<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-86461"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Row%20Functions"></a><title>Row Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T13:44:52Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Expression Syntax Reference"/>
<meta name="dcterms.identifier" content="E23382-06"/>
<meta name="dcterms.isVersionOf" content="OLAXS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Prev" href="olap_functions.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reserved.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E23382-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/7</span> <!-- End Header -->
<div id="OLAXS359" class="chapter"><a id="sthref328"></a>
<h1 class="chapter"><span class="secnum">3</span> Row Functions</h1>
<p>The OLAP row functions extend the syntax of the SQL row functions for use with dimensional objects. If you use the SQL row functions, then this syntax is familiar. You can use these functions on relational data when loading it into cubes and cube dimensions, and with the OLAP functions when creating calculated measures.</p>
<p>This chapter describes the row functions of the OLAP expression syntax. It contains these topics:</p>
<ul>
<li>
<p><a href="#BABBCGDH">Row Functions in Alphabetical Order</a></p>
</li>
<li>
<p><a href="#BABEECEA">Row Functions By Category</a></p>
</li>
</ul>
<a id="BABBCGDH"></a>
<div id="OLAXS360" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Row Functions in Alphabetical Order</h2>
<p><a href="#BABDHAGA">A</a> <a href="#BABGAGID">B</a> <a href="#BABHADBF">C</a> <a href="#BABCCJHI">D</a> <a href="#BABGJDJF">E</a> <a href="#BABDGEGG">F</a> <a href="#BABEBBFF">G</a> <a href="#BABJAIDG">H</a> <a href="#BABFDBIE">I</a> <a href="#BABJFDIF">L</a> <a href="#BABIFHAC">M</a> <a href="#BABGGHIG">N</a> <a href="#BABIJCAF">O</a> <a href="#BABJBHFD">P</a> <a href="#BABIJAEI">R</a> <a href="#BABEEHIC">S</a> <a href="#BABIHGEF">T</a> <a href="#BABCJJGJ">U</a> <a href="#BABJCCEF">V</a> <a href="#BABDAAHB">W</a></p>
<p class="subhead2"><a id="BABDHAGA"></a><a id="OLAXS361"></a>A</p>
<br/>
<a href="#BABHDCHD">ABS</a><br/>
<a href="#BABJEEIJ">ACOS</a><br/>
<a href="#BABEFICJ">ADD_MONTHS</a><br/>
<a href="#BABDBIEC">ASCII</a><br/>
<a href="#BABFIGBF">ASCIISTR</a><br/>
<a href="#BABIAEJA">ASIN</a><br/>
<a href="#BABHJCCA">ATAN</a><br/>
<a href="#BABCEJBJ">ATAN2</a>
<p class="subhead2"><a id="BABGAGID"></a><a id="OLAXS362"></a>B</p>
<br/>
<a href="#BABCBGBH">BIN_TO_NUM</a><br/>
<a href="#BABFICBF">BITAND</a>
<p class="subhead2"><a id="BABHADBF"></a><a id="OLAXS363"></a>C</p>
<br/>
<a href="#BABEBJED">CAST</a><br/>
<a href="#BABFHCFJ">CEIL</a><br/>
<a href="#BABFEIBF">CHARTOROWID</a><br/>
<a href="#BABHBGII">CHR</a><br/>
<a href="#BABHBHBD">COALESCE</a><br/>
<a href="#BABEHEIB">CONCAT</a><br/>
<a href="#BABCCJAA">COS</a><br/>
<a href="#BABEGGIB">COSH</a><br/>
<a href="#BABJCHBF">CURRENT_DATE</a><br/>
<a href="#BABEBIHE">CURRENT_TIMESTAMP</a>
<p class="subhead2"><a id="BABCCJHI"></a><a id="OLAXS364"></a>D</p>
<br/>
<a href="#BABCBFAE">DBTIMEZONE</a><br/>
<a href="#BABIIABE">DECODE</a>
<p class="subhead2"><a id="BABGJDJF"></a><a id="OLAXS365"></a>E</p>
<br/>
<a href="#BABEGEEH">EXP</a><br/>
<a href="#BABGBIEE">EXTRACT (datetime)</a>
<p class="subhead2"><a id="BABDGEGG"></a><a id="OLAXS366"></a>F</p>
<br/>
<a href="#BABJJAHG">FLOOR</a><br/>
<a href="#BABIDGCC">FROM_TZ</a>
<p class="subhead2"><a id="BABEBBFF"></a><a id="OLAXS367"></a>G</p>
<br/>
<a href="#BABEDDAH">GREATEST</a>
<p class="subhead2"><a id="BABJAIDG"></a><a id="OLAXS368"></a>H</p>
<br/>
<a href="#BABCFEHG">HEXTORAW</a>
<p class="subhead2"><a id="BABFDBIE"></a><a id="OLAXS369"></a>I</p>
<br/>
<a href="#BABGAGGD">INITCAP</a><br/>
<a href="#BABJJCGE">INSTR</a>
<p class="subhead2"><a id="BABJFDIF"></a><a id="OLAXS370"></a>L</p>
<br/>
<a href="#BABJFDCG">LAST_DAY</a><br/>
<a href="#BABHFIGC">LEAST</a><br/>
<a href="#BABJAGAD">LENGTH</a><br/>
<a href="#BABJDDEB">LN</a><br/>
<a href="#BABGDFII">LNNVL</a><br/>
<a href="#BABCFHAC">LOCALTIMESTAMP</a><br/>
<a href="#BABJAGED">LOG</a><br/>
<a href="#BABEFJAD">LOWER</a><br/>
<a href="#BABIBDFD">LPAD</a><br/>
<a href="#BABGBJCH">LTRIM</a>
<p class="subhead2"><a id="BABIFHAC"></a><a id="OLAXS371"></a>M</p>
<br/>
<a href="#BABHGFDJ">MOD</a><br/>
<a href="#BABEFBCC">MONTHS_BETWEEN</a>
<p class="subhead2"><a id="BABGGHIG"></a><a id="OLAXS372"></a>N</p>
<br/>
<a href="#BABCFEEC">NANVL</a><br/>
<a href="#BABHDEGJ">NEW_TIME</a><br/>
<a href="#BABHGJDH">NEXT_DAY</a><br/>
<a href="#BABCAIFH">NLS_CHARSET_ID</a><br/>
<a href="#BABFHAEA">NLS_CHARSET_NAME</a><br/>
<a href="#BABCEFBG">NLS_INITCAP</a><br/>
<a href="#BABBCAJH">NLS_LOWER</a><br/>
<a href="#BABDJBJF">NLS_UPPER</a><br/>
<a href="#BABCDEBD">NLSSORT</a><br/>
<a href="#BABBBHGD">NULLIF</a><br/>
<a href="#BABEBEJD">NUMTODSINTERVAL</a><br/>
<a href="#BABEIGFI">NUMTOYMINTERVAL</a><br/>
<a href="#BABBEIGA">NVL</a><br/>
<a href="#BABGACBH">NVL2</a>
<p class="subhead2"><a id="BABIJCAF"></a><a id="OLAXS373"></a>O</p>
<br/>
<a href="#BABECGHI">ORA_HASH</a>
<p class="subhead2"><a id="BABJBHFD"></a><a id="OLAXS374"></a>P</p>
<br/>
<a href="#BABIGDHJ">POWER</a>
<p class="subhead2"><a id="BABIJAEI"></a><a id="OLAXS375"></a>R</p>
<br/>
<a href="#BABJCBBB">RAWTOHEX</a><br/>
<a href="#BABBGEEJ">REGEXP_COUNT</a><br/>
<a href="#BABGDFJJ">REGEXP_INSTR</a><br/>
<a href="#BABFFECH">REGEXP_REPLACE</a><br/>
<a href="#BABDBGEJ">REGEXP_SUBSTR</a><br/>
<a href="#BABJBBDE">REMAINDER</a><br/>
<a href="#BABGIJDD">REPLACE</a><br/>
<a href="#BABEDEGD">ROUND (date)</a><br/>
<a href="#BABDHHIG">ROUND (number)</a><br/>
<a href="#BABDFJJA">ROWIDTOCHAR</a><br/>
<a href="#BABDHDHI">ROWIDTONCHAR</a><br/>
<a href="#BABHGHBC">RPAD</a><br/>
<a href="#BABHGJIH">RTRIM</a>
<p class="subhead2"><a id="BABEEHIC"></a><a id="OLAXS376"></a>S</p>
<br/>
<a href="#BABEHBHJ">SESSIONTIMEZONE</a><br/>
<a href="#BABHHIBF">SIGN</a><br/>
<a href="#BABCGEHA">SIN</a><br/>
<a href="#BABFFDHI">SINH</a><br/>
<a href="#BABDADDB">SOUNDEX</a><br/>
<a href="#BABBBEFA">SQRT</a><br/>
<a href="#BABCCAJC">SUBSTR</a><br/>
<a href="#BABICAHB">SYS_CONTEXT</a><br/>
<a href="#BABBHEEH">SYSDATE</a><br/>
<a href="#BABCHBIH">SYSTIMESTAMP</a>
<p class="subhead2"><a id="BABIHGEF"></a><a id="OLAXS377"></a>T</p>
<br/>
<a href="#BABHAFGH">TAN</a><br/>
<a href="#BABIEGCJ">TANH</a><br/>
<a href="#BABEDIGJ">TO_BINARY_DOUBLE</a><br/>
<a href="#BABHJDFA">TO_BINARY_FLOAT</a><br/>
<a href="#BABDBIBF">TO_CHAR (character)</a><br/>
<a href="#BABGCJCA">TO_CHAR (datetime)</a><br/>
<a href="#BABGGIAB">TO_CHAR (number)</a><br/>
<a href="#BABFFDIF">TO_DATE</a><br/>
<a href="#BABHEDHF">TO_DSINTERVAL</a><br/>
<a href="#BABDGAEE">TO_NCHAR (character)</a><br/>
<a href="#BABBDCAJ">TO_NCHAR (datetime)</a><br/>
<a href="#BABDFACE">TO_NCHAR (number)</a><br/>
<a href="#BABDJFIH">TO_NUMBER</a><br/>
<a href="#BABEHCBI">TO_TIMESTAMP</a><br/>
<a href="#BABEBADD">TO_TIMESTAMP_TZ</a><br/>
<a href="#BABJCFID">TO_YMINTERVAL</a><br/>
<a href="#BABCCDCC">TRANSLATE</a><br/>
<a href="#BABDFIFD">TRANSLATE (USING)</a><br/>
<a href="#BABFEIGE">TRIM</a><br/>
<a href="#BABJFABI">TRUNC (number)</a><br/>
<a href="#BABFIDAA">TZ_OFFSET</a>
<p class="subhead2"><a id="BABCJJGJ"></a><a id="OLAXS378"></a>U</p>
<br/>
<a href="#BABDICDF">UID</a><br/>
<a href="#BABHEAHD">UNISTR</a><br/>
<a href="#BABFCBFH">UPPER</a><br/>
<a href="#BABJIJCC">USER</a>
<p class="subhead2"><a id="BABJCCEF"></a><a id="OLAXS379"></a>V</p>
<br/>
<a href="#BABCEEEA">VSIZE</a>
<p class="subhead2"><a id="BABDAAHB"></a><a id="OLAXS380"></a>W</p>
<br/>
<a href="#BABICJBJ">WIDTH_BUCKET</a></div>
<!-- class="sect1" -->
<a id="BABEECEA"></a>
<div id="OLAXS381" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Row Functions By Category</h2>
<p>The row functions are grouped into the following categories:</p>
<ul>
<li>
<p><a href="#BABIADEC">Numeric Functions</a></p>
</li>
<li>
<p><a href="#BABIEEFG">Character Functions That Return Characters</a></p>
</li>
<li>
<p><a href="#BABBEFJE">NLS Character Functions</a></p>
</li>
<li>
<p><a href="#BABJHBFC">Character Functions That Return Numbers</a></p>
</li>
<li>
<p><a href="#BABDEIDD">Datetime Functions</a></p>
</li>
<li>
<p><a href="#BABEICJI">General Comparison Functions</a></p>
</li>
<li>
<p><a href="#BABIEABG">Conversion Functions</a></p>
</li>
<li>
<p><a href="#BABCGEJE">Encoding and Decoding Function</a></p>
</li>
<li>
<p><a href="#BABFFABB">Null-Related Functions</a></p>
</li>
<li>
<p><a href="#BABEBAAJ">Environment and Identifier Functions</a></p>
</li>
</ul>
<a id="BABIADEC"></a>
<div id="OLAXS382" class="sect2">
<h3 class="sect2">Numeric Functions</h3>
<p>These functions accept numeric input and return numeric values:</p>
<br/>
<a href="#BABHDCHD">ABS</a><br/>
<a href="#BABJEEIJ">ACOS</a><br/>
<a href="#BABIAEJA">ASIN</a><br/>
<a href="#BABHJCCA">ATAN</a><br/>
<a href="#BABCEJBJ">ATAN2</a><br/>
<a href="#BABFICBF">BITAND</a><br/>
<a href="#BABFHCFJ">CEIL</a><br/>
<a href="#BABCCJAA">COS</a><br/>
<a href="#BABEGGIB">COSH</a><br/>
<a href="#BABEGEEH">EXP</a><br/>
<a href="#BABJJAHG">FLOOR</a><br/>
<a href="#BABJDDEB">LN</a><br/>
<a href="#BABJAGED">LOG</a><br/>
<a href="#BABHGFDJ">MOD</a><br/>
<a href="#BABCFEEC">NANVL</a><br/>
<a href="#BABIGDHJ">POWER</a><br/>
<a href="#BABJBBDE">REMAINDER</a><br/>
<a href="#BABDHHIG">ROUND (number)</a><br/>
<a href="#BABHHIBF">SIGN</a><br/>
<a href="#BABCGEHA">SIN</a><br/>
<a href="#BABFFDHI">SINH</a><br/>
<a href="#BABBBEFA">SQRT</a><br/>
<a href="#BABHAFGH">TAN</a><br/>
<a href="#BABIEGCJ">TANH</a><br/>
<a href="#BABJFABI">TRUNC (number)</a><br/>
<a href="#BABICJBJ">WIDTH_BUCKET</a></div>
<!-- class="sect2" -->
<a id="BABIEEFG"></a>
<div id="OLAXS383" class="sect2">
<h3 class="sect2">Character Functions That Return Characters</h3>
<p>These functions accept character input and return character values:</p>
<br/>
<a href="#BABHBGII">CHR</a><br/>
<a href="#BABEHEIB">CONCAT</a><br/>
<a href="#BABGAGGD">INITCAP</a><br/>
<a href="#BABEFJAD">LOWER</a><br/>
<a href="#BABIBDFD">LPAD</a><br/>
<a href="#BABGBJCH">LTRIM</a><br/>
<a href="#BABFHAEA">NLS_CHARSET_NAME</a><br/>
<a href="#BABCEFBG">NLS_INITCAP</a><br/>
<a href="#BABBCAJH">NLS_LOWER</a><br/>
<a href="#BABDJBJF">NLS_UPPER</a><br/>
<a href="#BABCDEBD">NLSSORT</a><br/>
<a href="#BABFFECH">REGEXP_REPLACE</a><br/>
<a href="#BABDBGEJ">REGEXP_SUBSTR</a><br/>
<a href="#BABGIJDD">REPLACE</a><br/>
<a href="#BABHGHBC">RPAD</a><br/>
<a href="#BABHGJIH">RTRIM</a><br/>
<a href="#BABDADDB">SOUNDEX</a><br/>
<a href="#BABCCAJC">SUBSTR</a><br/>
<a href="#BABCCDCC">TRANSLATE</a><br/>
<a href="#BABFEIGE">TRIM</a><br/>
<a href="#BABFCBFH">UPPER</a></div>
<!-- class="sect2" -->
<a id="BABBEFJE"></a>
<div id="OLAXS384" class="sect2">
<h3 class="sect2">NLS Character Functions</h3>
<p>These functions return information about a character set:</p>
<br/>
<a href="#BABCAIFH">NLS_CHARSET_ID</a><br/>
<a href="#BABFHAEA">NLS_CHARSET_NAME</a></div>
<!-- class="sect2" -->
<a id="BABJHBFC"></a>
<div id="OLAXS385" class="sect2">
<h3 class="sect2">Character Functions That Return Numbers</h3>
<p>These functions accept character input and return numeric values:</p>
<br/>
<a href="#BABDBIEC">ASCII</a><br/>
<a href="#BABJJCGE">INSTR</a><br/>
<a href="#BABJAGAD">LENGTH</a><br/>
<a href="#BABBGEEJ">REGEXP_COUNT</a><br/>
<a href="#BABGDFJJ">REGEXP_INSTR</a></div>
<!-- class="sect2" -->
<a id="BABDEIDD"></a>
<div id="OLAXS386" class="sect2">
<h3 class="sect2">Datetime Functions</h3>
<p>These functions operate on date, timestamp, or interval values:</p>
<br/>
<a href="#BABEFICJ">ADD_MONTHS</a><br/>
<a href="#BABJCHBF">CURRENT_DATE</a><br/>
<a href="#BABEBIHE">CURRENT_TIMESTAMP</a><br/>
<a href="#BABCBFAE">DBTIMEZONE</a><br/>
<a href="#BABGBIEE">EXTRACT (datetime)</a><br/>
<a href="#BABIDGCC">FROM_TZ</a><br/>
<a href="#BABJFDCG">LAST_DAY</a><br/>
<a href="#BABCFHAC">LOCALTIMESTAMP</a><br/>
<a href="#BABEFBCC">MONTHS_BETWEEN</a><br/>
<a href="#BABHDEGJ">NEW_TIME</a><br/>
<a href="#BABHGJDH">NEXT_DAY</a><br/>
<a href="#BABEBEJD">NUMTODSINTERVAL</a><br/>
<a href="#BABEIGFI">NUMTOYMINTERVAL</a><br/>
<a href="#BABEDEGD">ROUND (date)</a><br/>
<a href="#BABEHBHJ">SESSIONTIMEZONE</a><br/>
<a href="#BABBHEEH">SYSDATE</a><br/>
<a href="#BABCHBIH">SYSTIMESTAMP</a><br/>
<a href="#BABGCJCA">TO_CHAR (datetime)</a><br/>
<a href="#BABHEDHF">TO_DSINTERVAL</a><br/>
<a href="#BABEHCBI">TO_TIMESTAMP</a><br/>
<a href="#BABEBADD">TO_TIMESTAMP_TZ</a><br/>
<a href="#BABJCFID">TO_YMINTERVAL</a><br/>
<a href="#BABFIDAA">TZ_OFFSET</a></div>
<!-- class="sect2" -->
<a id="BABEICJI"></a>
<div id="OLAXS387" class="sect2">
<h3 class="sect2">General Comparison Functions</h3>
<p>These functions determine the greatest or least value in a set of values:</p>
<br/>
<a href="#BABEDDAH">GREATEST</a><br/>
<a href="#BABHFIGC">LEAST</a></div>
<!-- class="sect2" -->
<a id="BABIEABG"></a>
<div id="OLAXS388" class="sect2">
<h3 class="sect2">Conversion Functions</h3>
<p>These functions change a value from one data type to another:</p>
<br/>
<a href="#BABFIGBF">ASCIISTR</a><br/>
<a href="#BABCBGBH">BIN_TO_NUM</a><br/>
<a href="#BABEBJED">CAST</a><br/>
<a href="#BABFEIBF">CHARTOROWID</a><br/>
<a href="#BABCFEHG">HEXTORAW</a><br/>
<a href="#BABEBEJD">NUMTODSINTERVAL</a><br/>
<a href="#BABEIGFI">NUMTOYMINTERVAL</a><br/>
<a href="#BABJCBBB">RAWTOHEX</a><br/>
<a href="#BABDFJJA">ROWIDTOCHAR</a><br/>
<a href="#BABDHDHI">ROWIDTONCHAR</a><br/>
<a href="#BABEDIGJ">TO_BINARY_DOUBLE</a><br/>
<a href="#BABHJDFA">TO_BINARY_FLOAT</a><br/>
<a href="#BABDBIBF">TO_CHAR (character)</a><br/>
<a href="#BABGCJCA">TO_CHAR (datetime)</a><br/>
<a href="#BABGGIAB">TO_CHAR (number)</a><br/>
<a href="#BABFFDIF">TO_DATE</a><br/>
<a href="#BABHEDHF">TO_DSINTERVAL</a><br/>
<a href="#BABDGAEE">TO_NCHAR (character)</a><br/>
<a href="#BABBDCAJ">TO_NCHAR (datetime)</a><br/>
<a href="#BABDFACE">TO_NCHAR (number)</a><br/>
<a href="#BABDJFIH">TO_NUMBER</a><br/>
<a href="#BABEHCBI">TO_TIMESTAMP</a><br/>
<a href="#BABEBADD">TO_TIMESTAMP_TZ</a><br/>
<a href="#BABJCFID">TO_YMINTERVAL</a><br/>
<a href="#BABDFIFD">TRANSLATE (USING)</a><br/>
<a href="#BABHEAHD">UNISTR</a></div>
<!-- class="sect2" -->
<a id="BABCGEJE"></a>
<div id="OLAXS389" class="sect2">
<h3 class="sect2">Encoding and Decoding Function</h3>
<p>These functions return a numeric value for each input value:</p>
<br/>
<a href="#BABIIABE">DECODE</a><br/>
<a href="#BABECGHI">ORA_HASH</a><br/>
<a href="#BABCEEEA">VSIZE</a></div>
<!-- class="sect2" -->
<a id="BABFFABB"></a>
<div id="OLAXS390" class="sect2">
<h3 class="sect2">Null-Related Functions</h3>
<p>These functions facilitate null handling:</p>
<br/>
<a href="#BABHBHBD">COALESCE</a><br/>
<a href="#BABGDFII">LNNVL</a><br/>
<a href="#BABCFEEC">NANVL</a><br/>
<a href="#BABBBHGD">NULLIF</a><br/>
<a href="#BABBEIGA">NVL</a><br/>
<a href="#BABGACBH">NVL2</a></div>
<!-- class="sect2" -->
<a id="BABEBAAJ"></a>
<div id="OLAXS391" class="sect2">
<h3 class="sect2">Environment and Identifier Functions</h3>
<p>These functions provide information about the instance and the session:</p>
<br/>
<a href="#BABICAHB">SYS_CONTEXT</a><br/>
<a href="#BABDICDF">UID</a><br/>
<a href="#BABJIJCC">USER</a></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div class="refentry"><a id="BABHDCHD"></a>
<div id="OLAXS392" class="refsect1">
<h2 class="refsect1">ABS</h2>
<p><code>ABS</code> returns the absolute value of a numeric expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref329"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref330"></a>Syntax</p>
<pre><span class="bold">ABS</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref331"></a>Arguments</p>
<p><code>n</code> is any numeric expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref332"></a>Example</p>
<p><code>ABS(-15)</code> returns the value <code>15</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJEEIJ"></a>
<div id="OLAXS393" class="refsect1">
<h2 class="refsect1">ACOS</h2>
<p><code>ACOS</code> calculates the angle value in radians of a specified cosine.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref333"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref334"></a>Syntax</p>
<pre><span class="bold">ACOS</span>(n) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref335"></a>Arguments</p>
<p><code>n</code> is a numeric expression for the cosine in the range of -1 to 1.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref336"></a>Example</p>
<p><code>ACOS(.3)</code> returns the value <code>1.26610367</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEFICJ"></a>
<div id="OLAXS394" class="refsect1">
<h2 class="refsect1">ADD_MONTHS</h2>
<p><code>ADD_MONTHS</code> returns a date that is a specified number of months after a specified date.</p>
<p>When the starting date is the last day of the month or when the returned month has fewer days, then <code>ADD_MONTHS</code> returns the last day of the month. Otherwise, the returned day is the starting day.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref337"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref338"></a>Syntax</p>
<pre><span class="bold">ADD_MONTHS</span>(date, integer) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref339"></a>Arguments</p>
<p><code>date</code> is the starting date.</p>
<p><code>integer</code> is the number of months to be added to the starting date.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref340"></a>Example</p>
<p><code>ADD_MONTHS(&#39;17-JUN-06&#39;, 1)</code> returns the value <code>17-JUL-06</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDBIEC"></a>
<div id="OLAXS395" class="refsect1">
<h2 class="refsect1">ASCII</h2>
<p><code>ASCII</code> returns the decimal representation of the first character of an expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref341"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref342"></a>Syntax</p>
<pre><span class="bold">ASCII</span>(char) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref343"></a>Arguments</p>
<p><code>char</code> can be any text expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref344"></a>Example</p>
<p><code>ASCII(&#39;Boston&#39;)</code> returns the value <code>66</code>, which is the ASCII equivalent of the letter B.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFIGBF"></a>
<div id="OLAXS396" class="refsect1">
<h2 class="refsect1">ASCIISTR</h2>
<p><code>ASCIISTR</code> converts a string in any character set to ASCII in the database character set. Non-ASCII characters are represented as <code>\</code>xxxx, where xxxx is a UTF-16 code unit.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref345"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref346"></a>Syntax</p>
<pre><span class="bold">ASCIISTR</span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref347"></a>Arguments</p>
<p><code>char</code> can be any character string.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref348"></a>Example</p>
<p><code>ASCIISTR(&#39;Sk&aring;ne&#39;)</code> returns the value <code>Sk\00E5ne</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIAEJA"></a>
<div id="OLAXS397" class="refsect1">
<h2 class="refsect1">ASIN</h2>
<p><code>ASIN</code> calculates the angle value in radians of a specified sine.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref349"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref350"></a>Syntax</p>
<pre><span class="bold">ASIN</span>(n) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref351"></a>Arguments</p>
<p><code>n</code> is a numeric expression in the range of -1 to 1 that contains the decimal value of a sine.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref352"></a>Example</p>
<p><code>ASIN(.3)</code> returns the value <code>0.304692654</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHJCCA"></a>
<div id="OLAXS398" class="refsect1">
<h2 class="refsect1">ATAN</h2>
<p><code>ATAN</code> calculates the angle value in radians of a specified tangent.</p>
<p>Use <code>ATAN2</code> to retrieve a full-range (0 - 2 <span class="italic">pi</span>) numeric value indicating the arc tangent of a given ratio.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref353"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref354"></a>Syntax</p>
<pre><span class="bold">ATAN</span>(n) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref355"></a>Arguments</p>
<p><code>n</code> is a numeric expression that contains the decimal value of a tangent.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref356"></a>Example</p>
<p><code>ATAN(.3)</code> returns the value <code>0.291456794</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCEJBJ"></a>
<div id="OLAXS399" class="refsect1">
<h2 class="refsect1">ATAN2</h2>
<p><code>ATAN2</code> returns a full-range (0 - 2 <span class="italic">pi</span>) numeric value of the arc tangent of a given ratio. The function returns values in the range of -<span class="italic">pi</span> to <span class="italic">pi</span>, depending on the signs of the arguments.</p>
<p>Use <code>ATAN</code> to calculate the angle value (in radians) of a specified tangent that is not a ratio.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref357"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref358"></a>Syntax</p>
<pre><span class="bold">ATAN2</span>(n1, n2) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref359"></a>Arguments</p>
<p><code>n1</code> and <code>n2</code> are numeric expressions for the components of the ratio.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref360"></a>Example</p>
<p><code>ATAN2(.3, .2)</code> returns the value <code>0.982793723</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCBGBH"></a>
<div id="OLAXS400" class="refsect1">
<h2 class="refsect1">BIN_TO_NUM</h2>
<p><code>BIN_TO_NUM</code> converts a bit vector to its equivalent number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref361"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref362"></a>Syntax</p>
<pre><span class="bold">BIN_TO_NUM</span>(expr [, expr ]... ) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref363"></a>Arguments</p>
<p><code>expr</code> is a numeric expression with a value of 0 or 1 for the value of a bit in the bit vector.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref364"></a>Example</p>
<p><code>BIN_TO_NUM(1,0,1,0)</code> returns the value <code>10</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFICBF"></a>
<div id="OLAXS401" class="refsect1">
<h2 class="refsect1">BITAND</h2>
<p><code>BITAND</code> computes an <code>AND</code> operation on the bits of two nonnegative integers, and returns an integer. This function is commonly used with the <code>DECODE</code> function.</p>
<p>An <code>AND</code> operation compares two bit values. If both values are 1, the operator returns 1. If one or both values are 0, the operator returns 0.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref365"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref366"></a>Syntax</p>
<pre><span class="bold">BITAND</span>(expr1, expr2) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref367"></a>Arguments</p>
<p><code>expr1</code> and <code>expr2</code> are numeric expressions for nonnegative integers.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref368"></a>Example</p>
<p><code>BITAND(7, 29)</code> returns the value <code>5</code>.</p>
<p>The binary value of <code>7</code> is <code>111</code> and of <code>29</code> is <code>11101</code>. A bit-by-bit comparison generates the binary value <code>101</code>, which is decimal <code>5</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEBJED"></a>
<div id="OLAXS402" class="refsect1">
<h2 class="refsect1">CAST</h2>
<p><code>CAST</code> converts values from one data type to another.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref369"></a>Return Value</p>
<p>The data type specified by <code>type_name</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref370"></a>Syntax</p>
<pre><span class="bold">CAST</span>(expr <span class="bold">AS</span> type_name)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref371"></a>Arguments</p>
<p><code>expr</code> can be an expression in one of the data types.</p>
<p><code>type_name</code> is one of the data types listed in <a href="syntax.htm#CEGFHFIG">Table 1-2, &#34;Dimensional Data Types&#34;</a>.</p>
<p><a href="#BABCJBHB">Table 3-1</a> shows which data types can be cast into which other built-in data types. <code>NUMBER</code> includes <code>NUMBER</code>, <code>DECIMAL</code>, and <code>INTEGER</code>. <code>DATETIME</code> includes <code>DATE</code>, <code>TIMESTAMP</code>, <code>TIMESTAMP WITH TIMEZONE</code>, and <code>TIMESTAMP WITH LOCAL TIMEZONE</code>. <code>INTERVAL</code> includes <code>INTERVAL DAY TO SECOND</code> and <code>INTERVAL YEAR TO MONTH</code>.</p>
<div id="OLAXS403" class="tblformalwide">
<p class="titleintable"><a id="sthref372"></a><a id="BABCJBHB"></a>Table 3-1 Compatible Data Types</p>
<table class="cellalignment5905" title="Compatible Data Types" summary="Compatible data types for CAST" dir="ltr">
<thead>
<tr class="cellalignment5894">
<th class="cellalignment5906" id="r1c1-t2">From</th>
<th class="cellalignment5906" id="r1c2-t2">To BINARY_FLOAT, BINARY_DOUBLE</th>
<th class="cellalignment5906" id="r1c3-t2">To CHAR, VARCHAR2</th>
<th class="cellalignment5906" id="r1c4-t2">To NUMBER</th>
<th class="cellalignment5906" id="r1c5-t2">To DATETIME, INTERVAL</th>
<th class="cellalignment5906" id="r1c6-t2">To NCHAR, NVARCHAR2</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r2c1-t2" headers="r1c1-t2">
<p><span class="bold">BINARY_FLOAT, BINARY_DOUBLE</span></p>
</td>
<td class="cellalignment5900" headers="r2c1-t2 r1c2-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r2c1-t2 r1c3-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r2c1-t2 r1c4-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r2c1-t2 r1c5-t2">
<p>no</p>
</td>
<td class="cellalignment5900" headers="r2c1-t2 r1c6-t2">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r3c1-t2" headers="r1c1-t2">
<p><span class="bold">CHAR, VARCHAR2</span></p>
</td>
<td class="cellalignment5900" headers="r3c1-t2 r1c2-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r3c1-t2 r1c3-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r3c1-t2 r1c4-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r3c1-t2 r1c5-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r3c1-t2 r1c6-t2">
<p>no</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r4c1-t2" headers="r1c1-t2">
<p><span class="bold">NUMBER</span></p>
</td>
<td class="cellalignment5900" headers="r4c1-t2 r1c2-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r4c1-t2 r1c3-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r4c1-t2 r1c4-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r4c1-t2 r1c5-t2">
<p>no</p>
</td>
<td class="cellalignment5900" headers="r4c1-t2 r1c6-t2">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r5c1-t2" headers="r1c1-t2">
<p><span class="bold">DATETIME, INTERVAL</span></p>
</td>
<td class="cellalignment5900" headers="r5c1-t2 r1c2-t2">
<p>no</p>
</td>
<td class="cellalignment5900" headers="r5c1-t2 r1c3-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r5c1-t2 r1c4-t2">
<p>no</p>
</td>
<td class="cellalignment5900" headers="r5c1-t2 r1c5-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r5c1-t2 r1c6-t2">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r6c1-t2" headers="r1c1-t2">
<p><span class="bold">NCHAR, NVARCHAR2</span></p>
</td>
<td class="cellalignment5900" headers="r6c1-t2 r1c2-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r6c1-t2 r1c3-t2">
<p>no</p>
</td>
<td class="cellalignment5900" headers="r6c1-t2 r1c4-t2">
<p>yes</p>
</td>
<td class="cellalignment5900" headers="r6c1-t2 r1c5-t2">
<p>no</p>
</td>
<td class="cellalignment5900" headers="r6c1-t2 r1c6-t2">
<p>yes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref373"></a>Example</p>
<p><code>CAST(&#39;123.4567&#39; AS NUMBER(10,2))</code> returns the value <code>123.46</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFHCFJ"></a>
<div id="OLAXS404" class="refsect1">
<h2 class="refsect1">CEIL</h2>
<p><code>CEIL</code> returns the smallest whole number greater than or equal to a specified number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref374"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref375"></a>Syntax</p>
<pre><span class="bold">CEIL</span>(n) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref376"></a>Arguments</p>
<p><code>n</code> is a numeric expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref377"></a>Examples</p>
<p><code>CEIL(3.1415927)</code> returns the value <code>4</code>.</p>
<p><code>CEIL(-3.4)</code> returns the value <code>-3.00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFEIBF"></a>
<div id="OLAXS405" class="refsect1">
<h2 class="refsect1">CHARTOROWID</h2>
<p><code>CHARTOROWID</code> converts a value from a text data type to a <code>ROWID</code> data type.</p>
<p>For more information about the <code>ROWID</code> pseudocolumn, refer to the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref378"></a>Return Value</p>
<pre>ROWID
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref379"></a>Syntax</p>
<pre><span class="bold">CHARTOROWID</span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref380"></a>Arguments</p>
<p><code>char</code> is a text expression that forms a valid rowid.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref381"></a>Example</p>
<p><code>chartorowid(&#39;AAAN6EAALAAAAAMAAB&#39;)</code> returns the text string <code>AAAN6EAALAAAAAMAAB</code> as a rowid.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHBGII"></a>
<div id="OLAXS406" class="refsect1">
<h2 class="refsect1">CHR</h2>
<p><code>CHR</code> converts an integer to the character with its binary equivalent in either the database character set or the national character set.</p>
<p>For single-byte character sets, if <code>n</code> &gt; 256, then <code>CHR</code> converts the binary equivalent of <code>mod(n, 256)</code>.</p>
<p>For the Unicode national character sets and all multibyte character sets, <code>n</code> must resolve to one entire code point. Code points are not validated, and the result of specifying invalid code points is indeterminate.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref382"></a>Return Value</p>
<pre>VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref383"></a>Syntax</p>
<pre><span class="bold">CHR</span>(n [ USING NCHAR_CS ]) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref384"></a>Arguments</p>
<p><code>n</code> is a numeric expression.</p>
<p><code>USING NCHAR_CS</code> returns a character in the national character set. Otherwise, the return value is in the database character set. The OLAP engine uses the UTF8 national character set, so the return value may be different from the SQL <code>CHR</code> function, which uses the database UTF16 national character set.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref385"></a>Example</p>
<p><code>CHR(67)</code>, <code>CHR(67 USING NCHAR_CS)</code>, and <code>CHR(323)</code> all return the letter <code>C</code> on an ASCII-based system with the WE8DEC database character set and the UTF8 national character set. <code>CHR(323)</code> is evaluated as <code>CHR(MOD(323, 256))</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHBHBD"></a>
<div id="OLAXS407" class="refsect1">
<h2 class="refsect1">COALESCE</h2>
<p><code>COALESCE</code> returns the first non-null expression in a list of expressions, or <code>NULL</code> when all of the expressions evaluate to null.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref386"></a>Return Value</p>
<p>Data type of the first argument</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref387"></a>Syntax</p>
<pre><span class="bold">COALESCE</span>(expr [, expr ]...) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref388"></a>Arguments</p>
<p><code>expr</code> can be any expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref389"></a>Examples</p>
<p><code>COALESCE(5, 8, 3)</code> returns the value <code>5</code>.</p>
<p><code>COALESCE(NULL, 8, 3)</code> returns the value <code>8</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEHEIB"></a>
<div id="OLAXS408" class="refsect1">
<h2 class="refsect1">CONCAT</h2>
<p><code>CONCAT</code> joins two expressions as a single character string. The data type of the return value is the same as the expressions, or if they are mixed, the one that results in a lossless conversion.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref390"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref391"></a>Syntax</p>
<pre><span class="bold">CONCAT</span>(char1, char2)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref392"></a>Arguments</p>
<p><code>char1</code> and <code>char2</code> are text expressions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref393"></a>Example</p>
<p><code>CONCAT(&#39;The current date is &#39;, &#39;October 13, 2006&#39;)</code> returns the string <code>The current date is October 13, 2006</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCCJAA"></a>
<div id="OLAXS409" class="refsect1">
<h2 class="refsect1">COS</h2>
<p><code>COS</code> calculates the cosine of an angle.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref394"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref395"></a>Syntax</p>
<pre><span class="bold">COS</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref396"></a>Arguments</p>
<p><code>n</code> is a numeric expression for an angle represented in radians.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref397"></a>Example</p>
<p><code>COS(180 * 3.1415927/180)</code> returns the cosine of 180 degrees as the value <code>-1</code>. The expression converts degrees to radians.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEGGIB"></a>
<div id="OLAXS410" class="refsect1">
<h2 class="refsect1">COSH</h2>
<p><code>COSH</code> calculates the cosine of a hyperbolic angle.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref398"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref399"></a>Syntax</p>
<pre><span class="bold">COSH</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref400"></a>Arguments</p>
<p><code>n</code> is a numeric expression for a hyperbolic angle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref401"></a>Example</p>
<p><code>COSH(0)</code> returns the value <code>1</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJCHBF"></a>
<div id="OLAXS411" class="refsect1">
<h2 class="refsect1">CURRENT_DATE</h2>
<p><code>CURRENT_DATE</code> returns the current date in the session time zone.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref402"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref403"></a>Syntax</p>
<pre>CURRENT_DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref404"></a>Example</p>
<p><code>CURRENT_DATE</code> returns a value such as <code>12-AUG-08</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEBIHE"></a>
<div id="OLAXS412" class="refsect1">
<h2 class="refsect1">CURRENT_TIMESTAMP</h2>
<p><code>CURRENT_TIMESTAMP</code> returns the current date and time in the session time zone. The time zone offset identifies the current local time of the session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref405"></a>Return Value</p>
<pre>TIMESTAMP WITH TIME ZONE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref406"></a>Syntax</p>
<pre><span class="bold">CURRENT_TIMESTAMP</span> [ (precision) ]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref407"></a>Arguments</p>
<p><code>precision</code> specifies the fractional second precision of the returned time value. The default value is 6.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref408"></a>Examples</p>
<p><code>CURRENT_TIMESTAMP</code> returns a value such as <code>08-AUG-06 11.18.31.082257 AM -08:00</code>.</p>
<p><code>CURRENT_TIMESTAMP(2)</code> returns a value such as <code>08-AUG-06 11.18.31.08 AM -08:00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCBFAE"></a>
<div id="OLAXS413" class="refsect1">
<h2 class="refsect1">DBTIMEZONE</h2>
<p><code>DBTIMEZONE</code> returns the value of the database time zone as either a time zone offset from Coordinated Universal Time (UTC) or a time zone region name.</p>
<p>To obtain other time zone offsets, use <code>TZ_OFFSET</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref409"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref410"></a>Syntax</p>
<pre><span class="bold">DBTIMEZONE</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref411"></a>Example</p>
<p><code>DBTIMEZONE</code> returns the offset <code>-08:00</code> for Mountain Standard Time.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIIABE"></a>
<div id="OLAXS414" class="refsect1">
<h2 class="refsect1">DECODE</h2>
<p><code>DECODE</code> compares an expression to one or more search strings one by one.</p>
<p>If <code>expr</code> is <code>search</code>, then <code>DECODE</code> returns the corresponding <code>result</code>. If there is no match, then <code>DECODE</code> returns <code>default</code>. If you omit <code>default</code>, then <code>DECODE</code> returns <code>NULL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref412"></a>Return Value</p>
<p>Data type of the first <code>result</code> argument</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref413"></a>Syntax</p>
<pre><span class="bold">DECODE</span>(expr, search, result
          [, search, result ]...
          [, default ]
      )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref414"></a>Arguments</p>
<p><code>expr</code> is an expression that is compared to one or more search strings.</p>
<p><code>search</code> is a string that is searched for a match to <code>expr</code>.</p>
<p><code>result</code> is the return value when <code>expr</code> matches the corresponding search string.</p>
<p><code>default</code> is the return value when <code>expr</code> does not match any of the search strings. If <code>default</code> is omitted, then <code>DECODE</code> returns <code>NULL</code>.</p>
<p>The arguments can be any numeric or character type. Two nulls are equivalent. If <code>expr</code> is null, then <code>DECODE</code> returns the <code>result</code> of the first <code>search</code> that is also null.</p>
<p>The maximum number of components, including <code>expr</code>, <code>searches</code>, <code>results</code>, and <code>default</code>, is 255.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref415"></a>Example</p>
<p><code>DECODE(sysdate, &#39;21-JUN-06&#39;, &#39;Summer Solstice&#39;, &#39;21-DEC-06&#39;, &#39;Winter Solstice&#39;, &#39;Have a nice day!&#39;)</code></p>
<p>returns these values:</p>
<p><code>Summer Solstice</code> on June 21, 2006</p>
<p><code>Winter Solstice</code> on December 21, 2006</p>
<p><code>Have a nice day!</code> on all other days</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEGEEH"></a>
<div id="OLAXS415" class="refsect1">
<h2 class="refsect1">EXP</h2>
<p><code>EXP</code> returns <code>e</code> raised to the <code>n</code>th power, where <code>e</code> = 2.71828183. The function returns a value of the same type as the argument.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref416"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref417"></a>Syntax</p>
<pre><span class="bold">EXP</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref418"></a>Arguments</p>
<p><code>n</code> is a numeric expression for the exponent.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref419"></a>Example</p>
<p><code>EXP(4)</code> returns the value <code>54.59815</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGBIEE"></a>
<div id="OLAXS416" class="refsect1">
<h2 class="refsect1">EXTRACT (datetime)</h2>
<p><code>EXTRACT</code> returns the value of a specified field from a datetime or interval expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref420"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref421"></a>Syntax</p>
<pre><span class="bold">EXTRACT</span>( { { <span class="bold">YEAR</span>
           | <span class="bold">MONTH</span>
           | <span class="bold">DAY</span>
           | <span class="bold">HOUR</span>
           | <span class="bold">MINUTE</span>
           | <span class="bold">SECOND</span>
           }
         | { <span class="bold">TIMEZONE_HOUR</span>
           | <span class="bold">TIMEZONE_MINUTE</span>
           }
         | { <span class="bold">TIMEZONE_REGION</span>
           | <span class="bold">TIMEZONE_ABBR</span>
           }
         }
    <span class="bold">FROM</span>   { datetime_value_expression
           | interval_value_expression
           }
       )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref422"></a>Arguments</p>
<p><code>datetime_value_expression</code> is an expression with a datetime data type.</p>
<p><code>interval_value_expression</code> is an expression with an interval data type.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref423"></a>Example</p>
<p><code>EXTRACT(MONTH FROM CURRENT_TIMESTAMP)</code> returns the value <code>8</code> for August when the current timestamp is <code>08-AUG-06 01.10.55.330120 PM -07:00</code>.</p>
<p><code>EXTRACT(TIMEZONE_HOUR FROM CURRENT_TIMESTAMP)</code> returns the value <code>-7</code> from the same example.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJJAHG"></a>
<div id="OLAXS417" class="refsect1">
<h2 class="refsect1">FLOOR</h2>
<p><code>FLOOR</code> returns the largest integer equal to or less than a specified number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref424"></a>Return Value</p>
<pre>NUMBER 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref425"></a>Syntax</p>
<pre><span class="bold">FLOOR</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref426"></a>Arguments</p>
<p><code>n</code> can be any numeric expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref427"></a>Examples</p>
<p><code>FLOOR(15.7)</code> returns the value <code>15</code>.</p>
<p><code>FLOOR(-15.7)</code> returns the value <code>-16</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIDGCC"></a>
<div id="OLAXS418" class="refsect1">
<h2 class="refsect1">FROM_TZ</h2>
<p><code>FROM_TZ</code> converts a timestamp value and a time zone to a <code>TIMESTAMP WITH TIME ZONE</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref428"></a>Return Value</p>
<pre>TIMESTAMP WITH TIME ZONE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref429"></a>Syntax</p>
<pre><span class="bold">FROM_TZ</span> (timestamp_value, time_zone_value)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref430"></a>Arguments</p>
<p><code>timestamp_value</code> is an expression with a <code>TIMESTAMP</code> data type.</p>
<p><code>time_zone_value</code> is a text expression that returns a string in the format <code>TZH:TZM</code> or in <code>TZR</code> with optional <code>TZD</code> format.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref431"></a>Example</p>
<p><code>FROM_TZ(TIMESTAMP &#39;2008-03-26 08:00:00&#39;, &#39;3:00&#39;)</code> returns the value <code>26-MAR-08 08.00.00.000000 AM +03:00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEDDAH"></a>
<div id="OLAXS419" class="refsect1">
<h2 class="refsect1">GREATEST</h2>
<p><code>GREATEST</code> returns the largest expression in a list of expressions. All expressions after the first are implicitly converted to the data type of the first expression before the comparison. Text expressions are compared character by character.</p>
<p>To retrieve the smallest expression in a list of expressions, use <code>LEAST</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref432"></a>Return Value</p>
<p>The data type of the first expression</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref433"></a>Syntax</p>
<pre><span class="bold">GREATEST</span>(expr [, expr ]...)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref434"></a>Arguments</p>
<p><code>expr</code> can be any expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref435"></a>Examples</p>
<p><code>GREATEST(&#39;Harry&#39;,&#39;Harriot&#39;,&#39;Harold&#39;)</code> returns the value <code>Harry</code>.</p>
<p><code>GREATEST(7, 19, 3)</code> returns the value <code>19</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCFEHG"></a>
<div id="OLAXS420" class="refsect1">
<h2 class="refsect1">HEXTORAW</h2>
<p><code>HEXTORAW</code> converts a hexadecimal value to a raw value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref436"></a>Return Value</p>
<pre>RAW
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref437"></a>Syntax</p>
<pre><span class="bold">HEXTORAW </span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref438"></a>Arguments</p>
<p><code>char</code> is a hexadecimal value in the <code>CHAR</code>, <code>VARCHAR2</code>, <code>NCHAR</code>, or <code>NVARCHAR2</code> data type.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref439"></a>Example</p>
<p><code>HEXTORAW(&#39;7D&#39;)</code> returns the <code>RAW</code> value <code>7D</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGAGGD"></a>
<div id="OLAXS421" class="refsect1">
<h2 class="refsect1">INITCAP</h2>
<p><code>INITCAP</code> returns a specified text expression, with the first letter of each word in uppercase and all other letters in lowercase. Words are delimited by white space or non-alphanumeric characters. The data type of the return value is the same as the original text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref440"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref441"></a>Syntax</p>
<pre><span class="bold">INITCAP</span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref442"></a>Arguments</p>
<p><code>char</code> can be any text expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref443"></a>Example</p>
<p><code>INITCAP(&#39;top ten tunes&#39;)</code> and <code>INITCAP(&#39;TOP TEN TUNES&#39;)</code> both return the string <code>Top Ten Tunes</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJJCGE"></a>
<div id="OLAXS422" class="refsect1">
<h2 class="refsect1">INSTR</h2>
<p>The <code>INSTR</code> functions search <code>string</code> for <code>substring</code>. The function returns an integer indicating the position of the character in <code>string</code>, or a zero (0) if does not find a match.</p>
<ul>
<li>
<p><code>INSTR</code> calculates strings using characters as defined by the input character set.</p>
</li>
<li>
<p><code>INSTRB</code> uses bytes instead of characters.</p>
</li>
<li>
<p><code>INSTRC</code> uses Unicode complete characters.</p>
</li>
</ul>
<p><code>REGEXP_INSTR</code> provides additional options.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref444"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref445"></a>Syntax</p>
<pre>{ <span class="bold">INSTR</span> | <span class="bold">INSTRB</span> | <span class="bold">INSTRC</span> }
(string , substring [, position [, occurrence ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref446"></a>Arguments</p>
<p><code>string</code> is the text expression to search.</p>
<p><code>substring</code> is the text string to search for.</p>
<p><code>position</code> is a nonzero integer indicating the character in <code>string</code> where the function begins the search. When position is negative, then <code>INSTR</code> counts and searches backward from the end of string. The default value of position is 1, which means that the function begins searching at the first character of string.</p>
<p><code>occurrence</code> is an integer indicating which occurrence of string the function should search for. The value of occurrence must be positive. The default values of occurrence is 1, meaning the function searches for the first occurrence of <code>substring</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref447"></a>Example</p>
<p><code>INSTR(&#39;CORPORATE FLOOR&#39;,&#39;OR&#39;, 3, 2)</code> searches the string CORPORATE FLOOR beginning with the third character (R) for the second instance of the substring OR. It returns the value <code>14</code>, which is the position of the second O in FLOOR.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJFDCG"></a>
<div id="OLAXS423" class="refsect1">
<h2 class="refsect1">LAST_DAY</h2>
<p><code>LAST_DAY</code> returns the last day of the month in which a particular date falls.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref448"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref449"></a>Syntax</p>
<pre><span class="bold">LAST_DAY</span>(date)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref450"></a>Arguments</p>
<p><code>date</code> can be any datetime expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref451"></a>Example</p>
<p><code>LAST_DAY(&#39;26-MAR-06&#39;)</code> returns the value <code>31-MAR-06</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHFIGC"></a>
<div id="OLAXS424" class="refsect1">
<h2 class="refsect1">LEAST</h2>
<p><code>LEAST</code> returns the smallest expression in a list of expressions. All expressions after the first are implicitly converted to the data type of the first expression before the comparison. Text expressions are compared character by character.</p>
<p>To retrieve the largest expression in a list of expressions, use <code>GREATEST</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref452"></a>Return Value</p>
<p>The data type of the first expression</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref453"></a>Syntax</p>
<pre><span class="bold">LEAST</span>(expr [, expr ]...)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref454"></a>Arguments</p>
<p><code>expr</code> can be any expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref455"></a>Examples</p>
<p><code>LEAST(&#39;Harry&#39;,&#39;Harriot&#39;,&#39;Harold&#39;)</code> returns the value <code>Harold</code>.</p>
<p><code>LEAST(19, 3, 7)</code> returns the value <code>3</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJAGAD"></a>
<div id="OLAXS425" class="refsect1">
<h2 class="refsect1">LENGTH</h2>
<p>The <code>LENGTH</code> functions return the length of a text expression.</p>
<ul>
<li>
<p><code>LENGTH</code> counts the number of characters.</p>
</li>
<li>
<p><code>LENGTHB</code> uses bytes instead of characters.</p>
</li>
<li>
<p><code>LENGTHC</code> uses Unicode complete characters.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref456"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref457"></a>Syntax</p>
<pre>{ <span class="bold">LENGTH </span>| <span class="bold">LENGTHB </span>| <span class="bold">LENGTHC</span> }(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref458"></a>Arguments</p>
<p><code>char</code> is any text expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref459"></a>Example</p>
<p><code>LENGTH(&#39;CANDIDE&#39;)</code> returns the value <code>7</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJDDEB"></a>
<div id="OLAXS426" class="refsect1">
<h2 class="refsect1">LN</h2>
<p><code>LN</code> returns the natural logarithm of a number greater than 0.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref460"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref461"></a>Syntax</p>
<pre><span class="bold">LN</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref462"></a>Arguments</p>
<p><code>n</code> can be any numeric expression with a value greater than 0.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref463"></a>Example</p>
<p><code>LN(95)</code> returns the value <code>4.55387689</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGDFII"></a>
<div id="OLAXS427" class="refsect1">
<h2 class="refsect1">LNNVL</h2>
<p><code>LNNVL</code> evaluates a condition when one or both operands of the condition may be null. <code>LNNVL</code> can be used anywhere a scalar expression can appear, even in contexts where the <code>IS [NOT] NULL</code>, <code>AND</code>, or <code>OR</code> conditions are not valid but would otherwise be required to account for potential nulls.</p>
<p><span class="bold">NOTE</span>: This function returns <code>1</code> (true) if the condition is false or unknown, and <code>0</code> (false) if the condition is true.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref464"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref465"></a>Syntax</p>
<pre><span class="bold">LNNVL</span>(condition)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref466"></a>Arguments</p>
<p><code>condition</code> can be any expression containing scalar values.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref467"></a>Examples</p>
<p><code>LNNVL(1 &gt; 4)</code> returns <code>1</code> (true).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCFHAC"></a>
<div id="OLAXS428" class="refsect1">
<h2 class="refsect1">LOCALTIMESTAMP</h2>
<p><code>LOCALTIMESTAMP</code> returns the current date and time in the session time zone.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref468"></a>Return Value</p>
<pre>TIMESTAMP
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref469"></a>Syntax</p>
<pre><span class="bold">LOCALTIMESTAMP</span> [ (timestamp_precision) ]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref470"></a>Arguments</p>
<p><code>timestamp_precision</code> specifies the fractional second precision of the time value returned.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref471"></a>Examples</p>
<p><code>LOCALTIMESTAMP</code> returns a value such as <code>09-AUG-06 08.11.37.045186 AM</code>.</p>
<p><code>LOCALTIMESTAMP(2)</code> returns a value such as <code>09-AUG-06 08.11.37.040000 AM</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJAGED"></a>
<div id="OLAXS429" class="refsect1">
<h2 class="refsect1">LOG</h2>
<p><code>LOG</code> computes the logarithm of an expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref472"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref473"></a>Syntax</p>
<pre><span class="bold">LOG</span>(n2, n1)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref474"></a>Arguments</p>
<p><code>n2</code> is the base by which to compute the logarithm.</p>
<p><code>n1</code> is the value whose logarithm is calculated. It can be any numeric expression that is greater than zero. When the value is equal to or less than zero, <code>LOG</code> returns a null value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref475"></a>Example</p>
<p><code>LOG(10,100)</code> returns the value <code>2</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEFJAD"></a>
<div id="OLAXS430" class="refsect1">
<h2 class="refsect1">LOWER</h2>
<p><code>LOWER</code> converts all alphabetic characters in a text expression to lowercase. The data type of the return value is the same as the original text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref476"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref477"></a>Syntax</p>
<pre><span class="bold">LOWER</span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref478"></a>Arguments</p>
<p><code>char</code> can be any text expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref479"></a>Example</p>
<p><code>LOWER(&#39;STOP SHOUTING&#39;)</code> returns the string <code>stop shouting</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIBDFD"></a>
<div id="OLAXS431" class="refsect1">
<h2 class="refsect1">LPAD</h2>
<p><code>LPAD</code> adds characters to the left of an expression to a specified length. The data type of the return value is the same as the original text.</p>
<p>Use <code>RPAD</code> to add characters to the right.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref480"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref481"></a>Syntax</p>
<pre><span class="bold">LPAD</span>(expr1, n [, expr2 ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref482"></a>Arguments</p>
<p><code>expr1</code> is a text expression for the base string.</p>
<p><code>n</code> is the total length of the returned expression. If <code>expr1</code> is longer than <code>n</code>, then this function truncates <code>expr1</code> to <code>n</code> characters.</p>
<p><code>expr2</code> is a text expression for the padding characters. By default, it is a space.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref483"></a>Example</p>
<p><code>LPAD(&#39;Page 1&#39;,15,&#39;*.&#39;)</code> returns the value <code>*.*.*.*.*Page 1</code>.</p>
<p><code>LPAD(&#39;Stay tuned&#39;, 4)</code> returns the value <code>Stay</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGBJCH"></a>
<div id="OLAXS432" class="refsect1">
<h2 class="refsect1">LTRIM</h2>
<p><code>LTRIM</code> scans a text expression from left to right and removes all the characters that match the characters in the trim expression, until it finds an unmatched character. The data type of the return value is the same as the original text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref484"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref485"></a>Syntax</p>
<pre><span class="bold">LTRIM</span>(char [, set ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref486"></a>Arguments</p>
<p><code>char</code> is the text expression to be trimmed.</p>
<p><code>set</code> is a text expression with the characters to remove. The default value of <code>set</code> is a single blank.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref487"></a>Examples</p>
<p><code>LTRIM(&#39; . . . .Last Word&#39;, &#39; .&#39;)</code> returns the value <code>Last Word</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHGFDJ"></a>
<div id="OLAXS433" class="refsect1">
<h2 class="refsect1">MOD</h2>
<p><code>MOD</code> returns the remainder after a number is divided by another, or the number if the divisor is 0 (zero).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref488"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref489"></a>Syntax</p>
<pre><span class="bold">MOD</span>(n2, n1)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref490"></a>Arguments</p>
<p><code>n2</code> is a numeric expression for the number to be divided.</p>
<p><code>n1</code> is a numeric expression for the divisor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref491"></a>Example</p>
<p><code>MOD(13,7)</code> returns the value <code>6</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEFBCC"></a>
<div id="OLAXS434" class="refsect1">
<h2 class="refsect1">MONTHS_BETWEEN</h2>
<p><code>MONTHS_BETWEEN</code> calculates the number of months between two dates. When the two dates have the same day component or are both the last day of the month, then the return value is a whole number. Otherwise, the return value includes a fraction that considers the difference in the days based on a 31-day month.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref492"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref493"></a>Syntax</p>
<pre><span class="bold">MONTHS_BETWEEN</span>(date1, date2)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref494"></a>Arguments</p>
<p><code>date1</code> and <code>date2</code> are datetime expressions. If <code>date1</code> is later than <code>date2</code>, then the result is positive. If <code>date1</code> is earlier than <code>date2</code>, then the result is negative.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref495"></a>Example</p>
<p><code>MONTHS_BETWEEN(&#39;15-APR-06&#39;, &#39;01-JAN-06&#39;)</code> returns the value <code>3.4516129</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCFEEC"></a>
<div id="OLAXS435" class="refsect1">
<h2 class="refsect1">NANVL</h2>
<p><code>NANVL</code> checks if a value is a number. If it is, then <code>NANVL</code> returns that value. If not, it returns an alternate value. This function is typically used to convert a binary double or binary float NaN (Not a Number) value to zero or null.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref496"></a>Return Value</p>
<pre>datatype
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref497"></a>Syntax</p>
<pre><span class="bold">NANVL </span>(expression, alternate)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref498"></a>Arguments</p>
<p><code>expression</code> can be any value.</p>
<p><code>alternate</code> is the numeric value returned if <code>expression</code> is not a number.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHDEGJ"></a>
<div id="OLAXS436" class="refsect1">
<h2 class="refsect1">NEW_TIME</h2>
<p><code>NEW_TIME</code> converts the date and time from one time zone to another. Before using this function, set the <code>NLS_DATE_FORMAT</code> parameter to display 24-hour time.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref499"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref500"></a>Syntax</p>
<pre><span class="bold">NEW_TIME</span>(date, timezone1, timezone2)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref501"></a>Arguments</p>
<p><code>date</code> is a datetime expression to be converted to a new time zone.</p>
<p><code>timezone1</code> is the time zone of <code>date</code>.</p>
<p><code>timezone2</code> is the new time zone.</p>
<p>The time zone arguments are limited to the values in <a href="#BABHBEHI">Table 3-2</a>. For other time zones, use <code>FROM_TZ</code>.</p>
<div id="OLAXS437" class="tblformal">
<p class="titleintable"><a id="sthref502"></a><a id="BABHBEHI"></a>Table 3-2 Time Zones</p>
<table class="cellalignment5907" title="Time Zones" summary="Time zones supported by NEW_TIME" dir="ltr">
<thead>
<tr class="cellalignment5894">
<th class="cellalignment5906" id="r1c1-t3">Time Zone</th>
<th class="cellalignment5906" id="r1c2-t3">Abbreviation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r2c1-t3" headers="r1c1-t3">
<p>Alaska-Hawaii Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r2c1-t3 r1c2-t3">
<p>HDT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r3c1-t3" headers="r1c1-t3">
<p>Alaska-Hawaii Standard Time</p>
</td>
<td class="cellalignment5900" headers="r3c1-t3 r1c2-t3">
<p>HST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r4c1-t3" headers="r1c1-t3">
<p>Atlantic Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r4c1-t3 r1c2-t3">
<p>ADT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r5c1-t3" headers="r1c1-t3">
<p>Atlantic Standard Time</p>
</td>
<td class="cellalignment5900" headers="r5c1-t3 r1c2-t3">
<p>AST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r6c1-t3" headers="r1c1-t3">
<p>Bering Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r6c1-t3 r1c2-t3">
<p>BDT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r7c1-t3" headers="r1c1-t3">
<p>Bering Standard Time</p>
</td>
<td class="cellalignment5900" headers="r7c1-t3 r1c2-t3">
<p>BST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r8c1-t3" headers="r1c1-t3">
<p>Central Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r8c1-t3 r1c2-t3">
<p>CDT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r9c1-t3" headers="r1c1-t3">
<p>Central Standard Time</p>
</td>
<td class="cellalignment5900" headers="r9c1-t3 r1c2-t3">
<p>CST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r10c1-t3" headers="r1c1-t3">
<p>Eastern Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r10c1-t3 r1c2-t3">
<p>EDT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r11c1-t3" headers="r1c1-t3">
<p>Eastern Standard Time</p>
</td>
<td class="cellalignment5900" headers="r11c1-t3 r1c2-t3">
<p>EST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r12c1-t3" headers="r1c1-t3">
<p>Greenwich Mean Time</p>
</td>
<td class="cellalignment5900" headers="r12c1-t3 r1c2-t3">
<p>GMT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r13c1-t3" headers="r1c1-t3">
<p>Mountain Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r13c1-t3 r1c2-t3">
<p>MDT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r14c1-t3" headers="r1c1-t3">
<p>Mountain Standard Time</p>
</td>
<td class="cellalignment5900" headers="r14c1-t3 r1c2-t3">
<p>MST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r15c1-t3" headers="r1c1-t3">
<p>Newfoundland Standard Time</p>
</td>
<td class="cellalignment5900" headers="r15c1-t3 r1c2-t3">
<p>NST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r16c1-t3" headers="r1c1-t3">
<p>Pacific Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r16c1-t3 r1c2-t3">
<p>PDT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r17c1-t3" headers="r1c1-t3">
<p>Pacific Standard Time</p>
</td>
<td class="cellalignment5900" headers="r17c1-t3 r1c2-t3">
<p>PST</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r18c1-t3" headers="r1c1-t3">
<p>Yukon Daylight Time</p>
</td>
<td class="cellalignment5900" headers="r18c1-t3 r1c2-t3">
<p>YDT</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r19c1-t3" headers="r1c1-t3">
<p>Yukon Standard Time</p>
</td>
<td class="cellalignment5900" headers="r19c1-t3 r1c2-t3">
<p>YST</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref503"></a>Example</p>
<p><code>NEW_TIME(SYSDATE, &#39;PST&#39;, &#39;EST&#39;)</code> returns a value such as <code>18-JAN-07 04:38:07</code> in Eastern Standard Time when <code>SYSDATE</code> is <code>18-JAN-07 01:38:07</code> in Pacific Standard Time. For this example, <code>NLS_DATE_FORMAT</code> is set to <code>DD-MON-RR HH:MI:SS</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHGJDH"></a>
<div id="OLAXS438" class="refsect1">
<h2 class="refsect1">NEXT_DAY</h2>
<p><code>NEXT_DAY</code> returns the date of the first instance of a particular day of the week that follows the specified date.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref504"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref505"></a>Syntax</p>
<pre><span class="bold">NEXT_DAY</span>(date, char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref506"></a>Arguments</p>
<p><code>date</code> is a datetime expression.</p>
<p><code>char</code> is a text expression that identifies a day of the week (for example, Monday) in the language of your session.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref507"></a>Example</p>
<p><code>NEXT_DAY(&#39;11-SEP-01&#39;, &#39;Monday&#39;)</code> returns the value <code>17-SEP-01</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCAIFH"></a>
<div id="OLAXS439" class="refsect1">
<h2 class="refsect1">NLS_CHARSET_ID</h2>
<p><code>NLS_CHARSET_ID</code> returns the identification number corresponding to a specified character set name.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref508"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref509"></a>Syntax</p>
<pre><span class="bold">NLS_CHARSET_ID </span> ( charset_name )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref510"></a>Arguments</p>
<p><code>charset_name</code> is a VARCHAR2 expression that is a valid character set name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref511"></a>Example</p>
<p><code>NLS_CHARSET_ID(&#39;AL32UTF8&#39;)</code> returns the value <code>873</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFHAEA"></a>
<div id="OLAXS440" class="refsect1">
<h2 class="refsect1">NLS_CHARSET_NAME</h2>
<p><code>NLS_CHARSET_NAME</code> returns the name corresponding to a specified character set number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref512"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref513"></a>Syntax</p>
<pre><span class="bold">NLS_CHARSET_NAME </span>(charset_id)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref514"></a>Arguments</p>
<p><code>charset_id</code> is a valid character set number or one of these keywords:</p>
<ul>
<li>
<p><code>CHAR_CS</code> represents the database character set.</p>
</li>
<li>
<p><code>NCHAR_CS</code> represents the national character set. The national character set for the database can be either UTF-8 or AL16UTF16 (default). However, the national character set for analytic workspaces is always UTF-8.</p>
</li>
</ul>
<p>If the number does not correspond to a character set, then the function returns <code>NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref515"></a>Example</p>
<p><code>NLS_CHARSET_NAME(2000)</code> returns the value <code>AL16UTF16</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCEFBG"></a>
<div id="OLAXS441" class="refsect1">
<h2 class="refsect1">NLS_INITCAP</h2>
<p><code>NLS_INITCAP</code> returns a string in which each word begins with a capital followed by lower-case letters. White space and nonalphanumeric characters delimit the words.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref516"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref517"></a>Syntax</p>
<pre><span class="bold">NLS_INITCAP </span>(char [, &#39;nlsparam&#39; ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref518"></a>Arguments</p>
<p><code>char</code> can be any text string.</p>
<p><code>nlsparam</code> can have the form <code>&#39;NLS_SORT =</code><code>sort</code><code>&#39;</code> where <code>sort</code> is either a linguistic sort sequence or <code>BINARY</code>. The linguistic sort sequence handles special linguistic requirements for case conversions. These requirements can result in a return value of a different length than <code>char</code>. If you omit <code>nlsparam</code>, then this function uses the default sort sequence for your session.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref519"></a>Example</p>
<p><code>NLS_INITCAP(&#39;WALKING&amp;THROUGH*A*winter wonderland&#39;)</code> returns the value <code>Walking#Through*A*Winter Wonderland</code>.</p>
<p><code>NLS_INITCAP(&#39;ijsland&#39;)</code> returns the value <code>Ijsland</code>, but <code>NLS_INITCAP(NLS_INITCAP(&#39;ijsland&#39;, &#39;NLS_SORT = XDutch&#39;)</code> returns <code>IJsland</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBCAJH"></a>
<div id="OLAXS442" class="refsect1">
<h2 class="refsect1">NLS_LOWER</h2>
<p><code>NLS_LOWER</code> converts all alphabetic characters in a text expression to lowercase. The data type of the return value is the same as the original text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref520"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref521"></a>Syntax</p>
<pre><span class="bold">NLS_LOWER </span>(char [, &#39;nlsparam&#39; ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref522"></a>Arguments</p>
<p><code>char</code> can be any text expression.</p>
<p><code>nlsparam</code> is a linguistic sort sequence in the form <code>NLS_SORT =</code><code>sort</code><code>[_ai |_ci]</code>, where <code>sort</code> is an NLS language. You can add a suffix to the language to modify the sort: <code>_ai</code> for an accent-insensitive sort, or <code>_ci</code> for a case-insensitive sort.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref523"></a>Example</p>
<p><code>NLS_LOWER(&#39;STOP SHOUTING&#39;)</code> returns the string <code>stop shouting</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDJBJF"></a>
<div id="OLAXS443" class="refsect1">
<h2 class="refsect1">NLS_UPPER</h2>
<p><code>NLS_UPPER</code> converts all alphabetic characters in a text expression to uppercase. The data type of the return value is the same as the original text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref524"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref525"></a>Syntax</p>
<pre><span class="bold">NLS_UPPER </span>(char [, &#39;nlsparam&#39; ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref526"></a>Arguments</p>
<p><code>char</code> can be any text expression.</p>
<p><code>nlsparam</code> is a linguistic sort sequence in the form <code>NLS_SORT =</code><code>sort</code><code>[_ai |_ci]</code>, where <code>sort</code> is an NLS language. You can add a suffix to the language to modify the sort: <code>_ai</code> for an accent-insensitive sort, or <code>_ci</code> for a case-insensitive sort.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref527"></a>Example</p>
<p><code>NLS_UPPER(&#39;This is an emergency&#39;)</code> returns the string <code>THIS IS AN EMERGENCY</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCDEBD"></a>
<div id="OLAXS444" class="refsect1">
<h2 class="refsect1">NLSSORT</h2>
<p><code>NLSSORT</code> returns the string of bytes used to sort a text string. You can use this function to specify sorting and comparison operations based on a linguistic sort sequence rather than on the binary value of a string.</p>
<p><span class="bold">Note</span>: <code>NLSSORT</code> returns a <code>RAW</code> value, which you may pass to another function. To create a measure or a calculated measure for the values returned by <code>NLSSORT</code>, use the <code>RAWTOHEX</code> function.</p>
<p>For more information about linguistic sorting, refer to the <span class="italic">Oracle Database Globalization Support Guide</span>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref528"></a>Return Value</p>
<pre>RAW
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref529"></a>Syntax</p>
<pre><span class="bold">NLSSORT</span>(char [, &#39;nlsparam&#39; ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref530"></a>Arguments</p>
<p><code>char</code> is a text expression.</p>
<p><code>nlsparam</code> is a linguistic sort sequence in the form <code>NLS_SORT =</code><code>sort</code><code>[_ai |_ci]</code>, where <code>sort</code> is an NLS language. You can add a suffix to the language to modify the sort: <code>_ai</code> for an accent-insensitive sort, or <code>_ci</code> for a case-insensitive sort.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref531"></a>Example</p>
<p><code>NLSSORT(&#39;Rumpelstiltskin&#39;)</code> returns the value <code>52756D70656C7374696C74736B696E00</code> for a default linguistic sort, which in this case is American.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBBHGD"></a>
<div id="OLAXS445" class="refsect1">
<h2 class="refsect1">NULLIF</h2>
<p><code>NULLIF</code> compares one expression with another. It returns <code>NULL</code> when the expressions are equal, or the first expression when they are not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref532"></a>Return Value</p>
<p>Data type of the first argument</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref533"></a>Syntax</p>
<pre><span class="bold">NULLIF</span>(expr1, expr2)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref534"></a>Arguments</p>
<p><code>expr1</code> is the base expression. It cannot be a literal null.</p>
<p><code>expr2</code> is the expression to compare with the base expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref535"></a>Example</p>
<p><code>NULLIF(&#39;red&#39;, &#39;Red&#39;)</code> returns the value <code>red</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEBEJD"></a>
<div id="OLAXS446" class="refsect1">
<h2 class="refsect1">NUMTODSINTERVAL</h2>
<p><code>NUMTODSINTERVAL</code> converts a number to an <code>INTERVAL DAY TO SECOND</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref536"></a>Return Value</p>
<pre>INTERVAL DAY TO SECOND
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref537"></a>Syntax</p>
<pre><span class="bold">NUMTODSINTERVAL</span>(n, &#39;interval_unit&#39;)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref538"></a>Arguments</p>
<p><code>n</code> can be any numeric expression.</p>
<p><code>interval_unit</code> is a text expression that specifies the units. It must resolve to one of the following values:</p>
<ul>
<li>
<p><code>DAY</code></p>
</li>
<li>
<p><code>HOUR</code></p>
</li>
<li>
<p><code>MINUTE</code></p>
</li>
<li>
<p><code>SECOND</code></p>
</li>
</ul>
<p>These values are case insensitive.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref539"></a>Example</p>
<p><code>NUMTODSINTERVAL(100, &#39;MINUTE&#39;)</code> returns the value +00 01:40:00.000000.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEIGFI"></a>
<div id="OLAXS447" class="refsect1">
<h2 class="refsect1">NUMTOYMINTERVAL</h2>
<p><code>NUMTOYMINTERVAL</code> converts a number to an <code>INTERVAL YEAR TO MONTH</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref540"></a>Return Value</p>
<pre>INTERVAL YEAR TO MONTH
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref541"></a>Syntax</p>
<pre><span class="bold">NUMTOYMINTERVAL</span>(n, &#39;interval_unit&#39;)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref542"></a>Arguments</p>
<p><code>n</code> can be any numeric expression.</p>
<p><code>interval_unit</code> is a text expression that specifies the units. It must resolve to one of the following values:</p>
<ul>
<li>
<p><code>YEAR</code></p>
</li>
<li>
<p><code>MONTH</code></p>
</li>
</ul>
<p>These values are case insensitive.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref543"></a>Example</p>
<p><code>NUMTOYMINTERVAL(18, &#39;MONTH&#39;)</code> returns the value <code>+01-06</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBEIGA"></a>
<div id="OLAXS448" class="refsect1">
<h2 class="refsect1">NVL</h2>
<p><code>NVL</code> replaces a null with a string. <code>NVL</code> returns the replacement string when the base expression is null, and the value of the base expression when it is not null.</p>
<p>To replace an expression with one value if it is null and a different value if it is not, use <code>NVL2</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref544"></a>Return Value</p>
<p>Data type of the first argument</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref545"></a>Syntax</p>
<pre><span class="bold">NVL</span>(expr1, expr2)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref546"></a>Arguments</p>
<p><code>expr1</code> is the base expression that is evaluated.</p>
<p><code>expr2</code> is the replacement string that is returned when <code>expr1</code> is null.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref547"></a>Examples</p>
<p><code>NVL(&#39;First String&#39;, &#39;Second String&#39;)</code> returns the value <code>First String</code>.</p>
<p><code>NVL(null, &#39;Second String&#39;)</code> returns the value <code>Second String</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGACBH"></a>
<div id="OLAXS449" class="refsect1">
<h2 class="refsect1">NVL2</h2>
<p><code>NVL2</code> returns one value when the value of a specified expression is not null, or another value when the value of the specified expression is null.</p>
<p>To replace a null value with a string, use <code>NVL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref548"></a>Return Value</p>
<p>Data type of the first argument</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref549"></a>Syntax</p>
<pre><span class="bold">NVL2</span>(expr1, expr2, expr3)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref550"></a>Arguments</p>
<p><code>expr1</code> is the base expression whose value this function evaluates.</p>
<p><code>expr2</code> is an expression whose value is returned when <code>expr1</code> is not null.</p>
<p><code>expr3</code> is an expression whose value is returned when <code>expr1</code> is null.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref551"></a>Example</p>
<p><code>NVL2(&#39;Which string?&#39;, &#39;First String&#39;, &#39;Second String&#39;)</code> returns the value <code>First String</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABECGHI"></a>
<div id="OLAXS450" class="refsect1">
<h2 class="refsect1">ORA_HASH</h2>
<p><code>ORA_HASH</code> generates hash values for an expression. You can use it to randomly assign a set of values into several buckets for analysis, or to generate a set of random numbers.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref552"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref553"></a>Syntax</p>
<pre><span class="bold">ORA_HASH </span> (expr [, max_bucket [, seed_value ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref554"></a>Arguments</p>
<p><code>expr</code> can be any expression that provides the data for generating the hash values.</p>
<p><code>max_bucket</code> is the maximum bucket number. For example, when <code>max_bucket</code> is set to 5, <code>ORA_HASH</code> returns values of 0 to 5, creating six buckets. Set this value from 0 to 4294967295 or 2^32-1 (default).</p>
<p><code>seed_value</code> is a value used by <code>ORA_HASH</code> to generate the hash values. Enter a different <code>seed_value</code> for different results. Set this value from 0 (default) to 4294967295 or 2^32-1.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref555"></a>Example</p>
<p><code>ORA_HASH(PRODUCT_CUBE.PRICES, 5)</code> returns a value in the range of 0 to 5 for each value of the Prices measure, as shown in the Hash 5 column. The rows are also sorted on the Hash 5 column.</p>
<p><code>ORA_HASH(PRODUCT_CUBE.PRICES, 5, 13)</code> also returns values in the range of 0 to 5, but uses a different seed.</p>
<div class="inftblinformal">
<table class="cellalignment5905" summary="ORA_HASH example output" dir="ltr">
<thead>
<tr class="cellalignment5894">
<th class="cellalignment5906" id="r1c1-t4">Product</th>
<th class="cellalignment5906" id="r1c2-t4">Prices</th>
<th class="cellalignment5906" id="r1c3-t4">Hash 5</th>
<th class="cellalignment5906" id="r1c4-t4">Seed 13</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r2c1-t4" headers="r1c1-t4">ENVY STD</td>
<td class="cellalignment5900" headers="r2c1-t4 r1c2-t4">200539.83</td>
<td class="cellalignment5900" headers="r2c1-t4 r1c3-t4">0</td>
<td class="cellalignment5900" headers="r2c1-t4 r1c4-t4">4</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r3c1-t4" headers="r1c1-t4">ENVY EXE</td>
<td class="cellalignment5900" headers="r3c1-t4 r1c2-t4">255029.31</td>
<td class="cellalignment5900" headers="r3c1-t4 r1c3-t4">0</td>
<td class="cellalignment5900" headers="r3c1-t4 r1c4-t4">5</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r4c1-t4" headers="r1c1-t4">1GB USB DRV</td>
<td class="cellalignment5900" headers="r4c1-t4 r1c2-t4">44645.65</td>
<td class="cellalignment5900" headers="r4c1-t4 r1c3-t4">1</td>
<td class="cellalignment5900" headers="r4c1-t4 r1c4-t4">2</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r5c1-t4" headers="r1c1-t4">DLX MOUSE</td>
<td class="cellalignment5900" headers="r5c1-t4 r1c2-t4">1379.49</td>
<td class="cellalignment5900" headers="r5c1-t4 r1c3-t4">2</td>
<td class="cellalignment5900" headers="r5c1-t4 r1c4-t4">2</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r6c1-t4" headers="r1c1-t4">144MB DISK</td>
<td class="cellalignment5900" headers="r6c1-t4 r1c2-t4">3011.43</td>
<td class="cellalignment5900" headers="r6c1-t4 r1c3-t4">2</td>
<td class="cellalignment5900" headers="r6c1-t4 r1c4-t4">5</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r7c1-t4" headers="r1c1-t4">512 USB DRV</td>
<td class="cellalignment5900" headers="r7c1-t4 r1c2-t4">22139.99</td>
<td class="cellalignment5900" headers="r7c1-t4 r1c3-t4">2</td>
<td class="cellalignment5900" headers="r7c1-t4 r1c4-t4">2</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r8c1-t4" headers="r1c1-t4">19 SVGA</td>
<td class="cellalignment5900" headers="r8c1-t4 r1c2-t4">34837.16</td>
<td class="cellalignment5900" headers="r8c1-t4 r1c3-t4">3</td>
<td class="cellalignment5900" headers="r8c1-t4 r1c4-t4">0</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r9c1-t4" headers="r1c1-t4">56KPS MODEM</td>
<td class="cellalignment5900" headers="r9c1-t4 r1c2-t4">12478</td>
<td class="cellalignment5900" headers="r9c1-t4 r1c3-t4">3</td>
<td class="cellalignment5900" headers="r9c1-t4 r1c4-t4">2</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r10c1-t4" headers="r1c1-t4">ENVY EXT KBD</td>
<td class="cellalignment5900" headers="r10c1-t4 r1c2-t4">4312.22</td>
<td class="cellalignment5900" headers="r10c1-t4 r1c3-t4">3</td>
<td class="cellalignment5900" headers="r10c1-t4 r1c4-t4">5</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r11c1-t4" headers="r1c1-t4">17 SVGA</td>
<td class="cellalignment5900" headers="r11c1-t4 r1c2-t4">22605.55</td>
<td class="cellalignment5900" headers="r11c1-t4 r1c3-t4">4</td>
<td class="cellalignment5900" headers="r11c1-t4 r1c4-t4">1</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r12c1-t4" headers="r1c1-t4">EXT CD ROM</td>
<td class="cellalignment5900" headers="r12c1-t4 r1c2-t4">17990.14</td>
<td class="cellalignment5900" headers="r12c1-t4 r1c3-t4">4</td>
<td class="cellalignment5900" headers="r12c1-t4 r1c4-t4">0</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r13c1-t4" headers="r1c1-t4">ENVY ABM</td>
<td class="cellalignment5900" headers="r13c1-t4 r1c2-t4">205462.25</td>
<td class="cellalignment5900" headers="r13c1-t4 r1c3-t4">5</td>
<td class="cellalignment5900" headers="r13c1-t4 r1c4-t4">1</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIGDHJ"></a>
<div id="OLAXS451" class="refsect1">
<h2 class="refsect1">POWER</h2>
<p><code>POWER</code> raises a number to a power.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref556"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref557"></a>Syntax</p>
<pre><span class="bold">POWER</span>(n2, n1)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref558"></a>Arguments</p>
<p><code>n2</code> is any numeric expression that is raised to a power.</p>
<p><code>n1</code> is the exponent.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref559"></a>Example</p>
<p><code>POWER(3,2)</code> returns the value <code>9</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJCBBB"></a>
<div id="OLAXS452" class="refsect1">
<h2 class="refsect1">RAWTOHEX</h2>
<p><code>RAWTOHEX</code> converts raw data to a character value containing its hexadecimal representation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref560"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref561"></a>Syntax</p>
<pre><span class="bold">RAWTOHEX</span>(raw)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref562"></a>Arguments</p>
<p><code>raw</code> can be any scalar data type other than <code>LONG</code>, <code>LONG RAW</code>, <code>CLOB</code>, <code>BLOB</code>, or <code>BFILE</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref563"></a>Example</p>
<p><code>RAWTOHEX(NLSSORT(&#39;Rumpelstiltskin&#39;))</code> converts the raw value returned by <code>NLSSORT</code> to the hexadecimal value <code>52756D70656C7374696C74736B696E00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBGEEJ"></a>
<div id="OLAXS453" class="refsect1">
<h2 class="refsect1">REGEXP_COUNT</h2>
<p><code>REGEXP_COUNT</code> searches a string for a regular pattern and returns the number of times the pattern occurs. If no match is found, the function returns 0.</p>
<p>The function evaluates strings using characters as defined by the input character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref564"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref565"></a>Syntax</p>
<pre><span class="bold">REGEXP_COUNT</span> (source_char, pattern
              [, position
                 [, match_parameter ]
              ]
             )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref566"></a>Arguments</p>
<p><code>source_char</code> is the text expression to search.</p>
<p><code>pattern</code> is the string to search for. A period matches any character. For a list of operators, refer to the <span class="italic">Oracle Database SQL Language Reference</span>, Appendix D, &#34;Oracle Regular Expression Support.&#34;</p>
<p><code>position</code> is a nonzero integer indicating the character of <code>source_char</code> where the function begins the search. When <code>position</code> is negative, then the function counts and searches backward from the end of string. The default value of <code>position</code> is 1, which means that the function begins searching at the first character of <code>source_char</code>.</p>
<p><code>match_parameter</code> is a text literal that lets you change the default matching behavior of the function. You can specify one or more of the following values:</p>
<ul>
<li>
<p><code>c</code>: Case-sensitive matching.</p>
</li>
<li>
<p><code>i</code>: Case-insensitive matching.</p>
</li>
<li>
<p><code>m</code>: Treat the source string as multiple lines. The function interprets <code>^</code> and <code>$</code> as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</p>
</li>
<li>
<p><code>n</code>: New-line character is among the characters matched by a period (the wildcard character). By default, it is not.</p>
</li>
<li>
<p><code>x</code>: Ignore whitespace characters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref567"></a>Example</p>
<p><code>REGEXP_COUNT(&#39;Mississippi&#39;, &#39;i&#39;, 1)</code> searches the string <code>Mississippi</code> for the letter <code>i</code>, beginning the search at the first letter. It returns the value <code>4</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGDFJJ"></a>
<div id="OLAXS454" class="refsect1">
<h2 class="refsect1">REGEXP_INSTR</h2>
<p><code>REGEXP_INSTR</code> searches a string for a regular pattern. It can return an integer indicating either the beginning or the ending position of the matched substring. If no match is found, then the function returns 0.</p>
<p>The function evaluates strings using characters as defined by the input character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref568"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref569"></a>Syntax</p>
<pre><span class="bold">REGEXP_INSTR</span> (source_char, pattern
              [, position
                 [, occurrence
                    [, return_option
                       [, match_parameter ]
                    ]
                 ]
              ]
             )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref570"></a>Arguments</p>
<p><code>source_char</code> is the text expression to search.</p>
<p><code>pattern</code> is the string to search for. A period matches any character. For a list of operators, refer to the <span class="italic">Oracle Database SQL Language Reference</span>, Appendix D, Oracle Regular Expression Support.</p>
<p><code>position</code> is a nonzero integer indicating the character of <code>source_char</code> where the function begins the search. When <code>position</code> is negative, then the function counts and searches backward from the end of string. The default value of <code>position</code> is 1, which means that the function begins searching at the first character of <code>source_char</code>.</p>
<p><code>occurrence</code> is an integer indicating which occurrence of <code>pattern</code> the function should search for. The value of <code>occurrence</code> must be positive. The default values of <code>occurrence</code> is 1, meaning the function searches for the first occurrence of <code>pattern</code>.</p>
<p><code>return_option</code> is either 0 to return the position of the match (default), or 1 to return the position of the character following the match.</p>
<p><code>match_parameter</code> is a text literal that lets you change the default matching behavior of the function. You can specify one or more of the following values:</p>
<ul>
<li>
<p><code>c</code>: Case-sensitive matching.</p>
</li>
<li>
<p><code>i</code>: Case-insensitive matching.</p>
</li>
<li>
<p><code>m</code>: Treat the source string as multiple lines. The function interprets <code>^</code> and <code>$</code> as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</p>
</li>
<li>
<p><code>n</code>: New-line character is among the characters matched by a period (the wildcard character). By default, it is not.</p>
</li>
<li>
<p><code>x</code>: Ignore whitespace characters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref571"></a>Example</p>
<p><code>REGEXP_INSTR(&#39;Mississippi&#39;, &#39;i&#39;, 1, 3)</code> searches the string <code>Mississippi</code> for the third instance of the letter <code>i</code>, beginning the search at the first letter. It returns the value <code>8</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFFECH"></a>
<div id="OLAXS455" class="refsect1">
<h2 class="refsect1">REGEXP_REPLACE</h2>
<p><code>REGEXP_REPLACE</code> searches a string for a regular pattern and replaces it with another string. By default, the function returns <code>source_char</code> with every occurrence of the regular expression pattern replaced with <code>replace_string</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref572"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref573"></a>Syntax</p>
<pre><span class="bold">REGEXP_REPLACE</span>(source_char, pattern
               [, replace_string
                  [, position
                     [, occurrence
                        [, match_parameter ]
                     ]
                  ]
               ]
              )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref574"></a>Arguments</p>
<p><code>source_char</code> is the text expression that is searched.</p>
<p><code>pattern</code> is the text expression to search for. It is usually a text literal and can contain up to 512 bytes. For a list of operators, refer to the <span class="italic">Oracle Database SQL Language Reference</span>, Appendix D, &#34;Oracle Regular Expression Support.&#34;</p>
<p><code>replace_string</code> is the text that replaces <code>pattern</code> in <code>source_char</code>.</p>
<p><code>position</code> is a nonzero integer indicating the character of <code>source_char</code> where the function begins the search. When <code>position</code> is negative, then the function counts and searches backward from the end of string. The default value of <code>position</code> is 1, which means that the function begins searching at the first character of <code>source_char</code>.</p>
<p><code>occurrence</code> is an integer indicating which occurrence of <code>pattern</code> the function should search for. The value of <code>occurrence</code> must be positive. The default values of <code>occurrence</code> is 1, meaning the function searches for the first occurrence of <code>pattern</code>.</p>
<p><code>match_parameter</code> is a text literal that lets you change the default matching behavior of the function. You can specify one or more of the following values:</p>
<ul>
<li>
<p><code>c</code>: Case-sensitive matching.</p>
</li>
<li>
<p><code>i</code>: Case-insensitive matching.</p>
</li>
<li>
<p><code>m</code>: Treat the source string as multiple lines. The function interprets <code>^</code> and <code>$</code> as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</p>
</li>
<li>
<p><code>n</code>: New-line character is among the characters matched by a period (the wildcard character). By default, it is not.</p>
</li>
<li>
<p><code>x</code>: Ignore whitespace characters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref575"></a>Example</p>
<p><code>REGEXP_REPLACE(&#39;500 Oracle Parkway, Redwood Shores, CA&#39;, &#39;( ){2,}&#39;, &#39; &#39;)</code></p>
<p>eliminates extra spaces and returns the string</p>
<p><code>500 Oracle Parkway, Redwood Shores, CA</code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDBGEJ"></a>
<div id="OLAXS456" class="refsect1">
<h2 class="refsect1">REGEXP_SUBSTR</h2>
<p><code>REGEXP_SUBSTR</code> searches a string for a pattern and returns the matching string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref576"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref577"></a>Syntax</p>
<pre><span class="bold">REGEXP_SUBSTR</span>(source_char, pattern
              [, position
                 [, occurrence
                    [, match_parameter ]
                 ]
              ]
             )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref578"></a>Arguments</p>
<p><code>source_char</code> is the text expression that is searched.</p>
<p><code>pattern</code> is the text expression to search for. It is usually a text literal and can contain up to 512 bytes. For a list of operators, refer to the <span class="italic">Oracle Database SQL Language Reference</span>, Appendix D, &#34;Oracle Regular Expression Support.&#34;</p>
<p><code>position</code> is a nonzero integer indicating the character of <code>source_char</code> where the function begins the search. When <code>position</code> is negative, then the function counts and searches backward from the end of string. The default value of <code>position</code> is 1, which means that the function begins searching at the first character of <code>source_char</code>.</p>
<p><code>occurrence</code> is an integer indicating which occurrence of <code>pattern</code> the function should search for. The value of <code>occurrence</code> must be positive. The default values of <code>occurrence</code> is 1, meaning the function searches for the first occurrence of <code>pattern</code>.</p>
<p><code>match_parameter</code> is a text expression that lets you change the default matching behavior of the function. You can specify one or more of the following values:</p>
<ul>
<li>
<p><code>c</code>: Case-sensitive matching.</p>
</li>
<li>
<p><code>i</code>: Case-insensitive matching.</p>
</li>
<li>
<p><code>m</code>: Treat the source string as multiple lines. The function interprets <code>^</code> and <code>$</code> as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</p>
</li>
<li>
<p><code>n</code>: New-line character is among the characters matched by a period (the wildcard character). By default, it is not.</p>
</li>
<li>
<p><code>x</code>: Ignore whitespace characters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref579"></a>Examples</p>
<p><code>REGEXP_SUBSTR(&#39;7 W 96th St, New York, NEW YORK&#39;, &#39;new york&#39;, 10, 2, &#39;i&#39;)</code> starts searching at the tenth character and matches <code>NEW YORK</code> in a case-insensitive match.</p>
<p><code>REGEXP_SUBSTR(&#39;parsley, sage, rosemary, thyme&#39;, &#39;s[^,]+e&#39;, 1, 2)</code> starts searching at the first character and matches the second substring consisting of the letter <code>s</code>, any number of characters that are not commas, and the letter <code>e</code>. In this example, the function returns the value <code>sage</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJBBDE"></a>
<div id="OLAXS457" class="refsect1">
<h2 class="refsect1">REMAINDER</h2>
<p><code>REMAINDER</code> returns a rounded remainder when one number is divided by another using this equation:</p>
<p><code>n2 - (n1 * N)</code></p>
<p>where <code>N</code> is the integer nearest <code>n2/n1</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref580"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref581"></a>Syntax</p>
<pre><span class="bold">REMAINDER</span>(n2, n1)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref582"></a>Arguments</p>
<p><code>n1</code> is a numeric expression for the divisor.</p>
<p><code>n2</code> is a numeric expression for the dividend.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref583"></a>Example</p>
<p><code>REMAINDER(18,7)</code> returns the value <code>-3</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGIJDD"></a>
<div id="OLAXS458" class="refsect1">
<h2 class="refsect1">REPLACE</h2>
<p><code>REPLACE</code> searches a string for a regular pattern, replaces it with another string, and returns the modified string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref584"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref585"></a>Syntax</p>
<pre><span class="bold">REPLACE</span>(char, search_string [, replacement_string ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref586"></a>Arguments</p>
<p><code>char</code> is the text expression that is searched.</p>
<p><code>search_string</code> is the text expression to search for.</p>
<p><code>replacement_string</code> is the text expression that replaces <code>search_string</code> in <code>char</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref587"></a>Example</p>
<p><code>REPLACE(&#39;Nick Nack&#39;, &#39;N&#39;, &#39;Cl&#39;)</code> returns the string <code>Click Clack</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEDEGD"></a>
<div id="OLAXS459" class="refsect1">
<h2 class="refsect1">ROUND (date)</h2>
<p><code>ROUND</code> returns a date rounded to the unit specified by the date format.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref588"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref589"></a>Syntax</p>
<pre><span class="bold">ROUND</span>(date [, fmt ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref590"></a>Arguments</p>
<p><code>date</code> is an expression that identifies a date and time.</p>
<p><code>fmt</code> is a text literal with a date format, as described in the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref591"></a>Examples</p>
<p><code>ROUND(SYSDATE, &#39;YEAR&#39;)</code> returns the value <code>01-JAN-07</code> for any day in the last half of 2006.</p>
<p><code>ROUND(TO_DATE(&#39;13-OCT-06&#39;), &#39;MONTH&#39;)</code> returns the value <code>01-OCT-06</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDHHIG"></a>
<div id="OLAXS460" class="refsect1">
<h2 class="refsect1">ROUND (number)</h2>
<p><code>ROUND</code> returns a number rounded to a specified number of places.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref592"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref593"></a>Syntax</p>
<pre><span class="bold">ROUND</span>(n [, integer ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref594"></a>Arguments</p>
<p><code>n</code> is the number to round.</p>
<p><code>integer</code> is the number of decimal places of the rounded number. A negative value rounds to the left of the decimal point. The default value is 0.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref595"></a>Examples</p>
<p><code>ROUND(15.193)</code> returns the value <code>15</code>.</p>
<p><code>ROUND(15.193,1)</code> returns the value <code>15.2</code>.</p>
<p><code>ROUND(15.193,-1)</code> returns the value <code>20</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDFJJA"></a>
<div id="OLAXS461" class="refsect1">
<h2 class="refsect1">ROWIDTOCHAR</h2>
<p><code>ROWIDTOCHAR</code> converts a row address from a <code>ROWID</code> data type to text.The return value is always 18 characters long in the database character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref596"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref597"></a>Syntax</p>
<pre><span class="bold">ROWIDTOCHAR</span>(rowid)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref598"></a>Arguments</p>
<p><code>rowid</code> is a row address to convert.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDHDHI"></a>
<div id="OLAXS462" class="refsect1">
<h2 class="refsect1">ROWIDTONCHAR</h2>
<p><code>ROWIDTONCHAR</code> converts a row address from the <code>ROWID</code> data type to text. The return value is always 18 characters in the national character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref599"></a>Return Value</p>
<pre>NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref600"></a>Syntax</p>
<pre><span class="bold">ROWIDTONCHAR</span>(rowid)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref601"></a>Arguments</p>
<p><code>rowid</code> is a row address to convert.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHGHBC"></a>
<div id="OLAXS463" class="refsect1">
<h2 class="refsect1">RPAD</h2>
<p><code>RPAD</code> adds characters to the right of an expression to a specified length. The data type of the return value is the same as the original text.</p>
<p>Use <code>LPAD</code> to add characters to the left.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref602"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref603"></a>Syntax</p>
<pre><span class="bold">RPAD</span>(expr1 , n [, expr2 ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref604"></a>Arguments</p>
<p><code>expr1</code> is a text expression for the base string.</p>
<p><code>n</code> is the total length of the returned expression. If <code>expr1</code> is longer than <code>n</code>, then this function truncates <code>expr1</code> to <code>n</code> characters.</p>
<p><code>expr2</code> is a text expression for the padding characters. By default, it is a space.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref605"></a>Example</p>
<p><code>RPAD(&#39;Stay tuned&#39;, 15, &#39;. &#39;)</code> returns the value <code>Stay tuned. . .</code></p>
<p><code>RPAD(&#39;Stay tuned&#39;, 4)</code> returns the value <code>Stay</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHGJIH"></a>
<div id="OLAXS464" class="refsect1">
<h2 class="refsect1">RTRIM</h2>
<p><code>RTRIM</code> scans a text expression from right to left and removes all the characters that match the characters in the trim expression, until it finds an unmatched character. The data type of the return value is the same as the original text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref606"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref607"></a>Syntax</p>
<pre><span class="bold">RTRIM</span>(char [, set ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref608"></a>Arguments</p>
<p><code>char</code> is the text expression to be trimmed.</p>
<p><code>set</code> is a text expression with the characters to remove. The default value of <code>set</code> is a single blank.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref609"></a>Examples</p>
<p><code>RTRIM(&#39;You did that!?!?!?!&#39;, &#39;?!&#39;)</code> returns the value <code>You did that</code>.</p>
<p><code>RTRIM(&#39;3.14848&#39;, &#39;84&#39;)</code> returns the text value <code>3.1</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEHBHJ"></a>
<div id="OLAXS465" class="refsect1">
<h2 class="refsect1">SESSIONTIMEZONE</h2>
<p><code>SESSIONTIMEZONE</code> returns the time zone of the current session. The return type is a time zone offset from Coordinated Universal Time (UTC) or a time zone region name.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref610"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref611"></a>Syntax</p>
<pre><span class="bold">SESSIONTIMEZONE</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref612"></a>Example</p>
<p><code>SESSIONTIMEZONE</code> returns the value <code>-05:00</code> for Eastern Standard Time.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHHIBF"></a>
<div id="OLAXS466" class="refsect1">
<h2 class="refsect1">SIGN</h2>
<p><code>SIGN</code> returns a value that indicates whether a specified number is less than, equal to, or greater than 0 (zero):</p>
<ul>
<li>
<p><code>-1</code> if <code>n &lt; 0</code></p>
</li>
<li>
<p><code>0</code> if <code>n = 0</code></p>
</li>
<li>
<p><code>1</code> if <code>n &gt; 0</code></p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref613"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref614"></a>Syntax</p>
<pre><span class="bold">SIGN</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref615"></a>Arguments</p>
<p><code>n</code> is a numeric expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref616"></a>Example</p>
<p><code>SIGN(-15)</code> returns the value <code>-1</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCGEHA"></a>
<div id="OLAXS467" class="refsect1">
<h2 class="refsect1">SIN</h2>
<p><code>SIN</code> returns the sine of an angle.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref617"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref618"></a>Syntax</p>
<pre><span class="bold">SIN</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref619"></a>Arguments</p>
<p><code>n</code> is a numeric expression for an angle in radians.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref620"></a>Example</p>
<p><code>SIN(30 * 3.1415927/180)</code> calculates the sine of a 30 degrees angle as the value <code>0.500000007</code>. The numeric expression converts degrees to radians.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFFDHI"></a>
<div id="OLAXS468" class="refsect1">
<h2 class="refsect1">SINH</h2>
<p><code>SINH</code> returns the sine of a hyperbolic angle.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref621"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref622"></a>Syntax</p>
<pre><span class="bold">SINH</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref623"></a>Arguments</p>
<p><code>n</code> is a numeric expression for a hyperbolic angle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref624"></a>Example</p>
<p><code>SINH(1)</code> returns the value <code>1.17520119</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDADDB"></a>
<div id="OLAXS469" class="refsect1">
<h2 class="refsect1">SOUNDEX</h2>
<p><code>SOUNDEX</code> returns a character string containing the phonetic representation of a text expression. This function lets you compare words that are spelled differently but sound alike.</p>
<p>The function is based on the algorithm described in Donald Knuth&#39;s <span class="italic">The Art of Computer Programming</span>. This algorithm was designed specifically for English. Its results for other languages other than English are unpredictable and typically unsatisfactory.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref625"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref626"></a>Syntax</p>
<pre><span class="bold">SOUNDEX </span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref627"></a>Arguments</p>
<p><code>char</code> can be any text expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref628"></a>Example</p>
<p>All of these examples return the value <code>D500</code>:</p>
<pre>soundex(&#39;Donna&#39;)

soundex(&#39;Diane&#39;)

soundex(&#39;Dana&#39;)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBBEFA"></a>
<div id="OLAXS470" class="refsect1">
<h2 class="refsect1">SQRT</h2>
<p><code>SQRT</code> returns the square root of a number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref629"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref630"></a>Syntax</p>
<pre><span class="bold">SQRT</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref631"></a>Arguments</p>
<p><code>n</code> is a numeric expression for a positive number.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref632"></a>Example</p>
<p><code>SQRT(13)</code> returns the value <code>3.60555128</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCCAJC"></a>
<div id="OLAXS471" class="refsect1">
<h2 class="refsect1">SUBSTR</h2>
<p><code>SUBSTR</code> returns a portion of string, beginning at a specified character position and extending a specified number of characters.</p>
<ul>
<li>
<p><code>SUBSTR</code> calculates lengths using characters as defined by the input character set.</p>
</li>
<li>
<p><code>SUBSTRB</code> uses bytes instead of characters.</p>
</li>
<li>
<p><code>SUBSTRC</code> uses Unicode complete characters.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref633"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref634"></a>Syntax</p>
<pre>{ <span class="bold">SUBSTR</span> | <span class="bold">SUBSTRB</span> | <span class="bold">SUBSTRC</span> }(char, position [, substring_length ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref635"></a>Arguments</p>
<p><code>char</code> is a text expression that provides the base string from which the substring is derived.</p>
<p><code>position</code> identifies the first character of the substring:</p>
<ul>
<li>
<p>When <code>position</code> is positive, then the function counts from the beginning of <code>char</code> to find the first character.</p>
</li>
<li>
<p>When <code>position</code> is negative, then the function counts backward from the end of <code>char</code>.</p>
</li>
<li>
<p>When <code>position</code> is 0 (zero), then the first character is the beginning of the substring.</p>
</li>
</ul>
<p><code>substring_length</code> is the number of characters in the returned string. By default, the function returns all characters to the end of the base string. If you specify a value less than 1, then the function returns a null.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref636"></a>Examples</p>
<p><code>SUBSTR(&#39;firefly&#39;, 1, 4)</code> returns the substring <code>fire</code>.</p>
<p><code>SUBSTR(&#39;firefly&#39;, -3, 3)</code> returns the substring <code>fly</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABICAHB"></a>
<div id="OLAXS472" class="refsect1">
<h2 class="refsect1">SYS_CONTEXT</h2>
<p><code>SYS_CONTEXT</code> returns the value of an attribute of a named context. The context, attribute, and value must already be defined in the database. If the context is not defined, <code>SYS_CONTEXT</code> returns <code>NULL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref637"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref638"></a>Syntax</p>
<pre><span class="bold">SYS_CONTEXT </span>(&#39;namespace&#39;, &#39;parameter&#39;)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref639"></a>Arguments</p>
<p><code>namespace</code> can be any named context in the database. <code>USERENV</code> is a built-in context that describes the current session.</p>
<p><code>parameter</code> is a defined attribute of <code>namespace</code>. <a href="#BABBIFIJ">Table 3-3</a> describes the predefined attributes of <code>USERENV</code> that are most likely to have values. For a complete list, refer to the <code>SYS_CONTEXT</code> entry in the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<div id="OLAXS473" class="tblformal">
<p class="titleintable"><a id="sthref640"></a><a id="BABBIFIJ"></a>Table 3-3 USERENV Attributes</p>
<table class="cellalignment5907" title="USERENV Attributes" summary="USERENV attributes for SYS_CONTEXT function" dir="ltr">
<thead>
<tr class="cellalignment5894">
<th class="cellalignment5906" id="r1c1-t5">USERENV Attribute</th>
<th class="cellalignment5906" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r2c1-t5" headers="r1c1-t5">
<p><code>AUTHENTICATED_IDENTITY</code></p>
</td>
<td class="cellalignment5900" headers="r2c1-t5 r1c2-t5">
<p>The identity used for authentication, such as database user name, schema name, or operating system login name.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r3c1-t5" headers="r1c1-t5">
<p><code>AUTHENTICATION_METHOD</code></p>
</td>
<td class="cellalignment5900" headers="r3c1-t5 r1c2-t5">
<p>The method of authentication, such as <code>PASSWORD</code>, <code>OS</code>, or <code>SSL</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r4c1-t5" headers="r1c1-t5">
<p><code>CURRENT_EDITION_ID</code></p>
</td>
<td class="cellalignment5900" headers="r4c1-t5 r1c2-t5">
<p>The session edition identifier, such as <code>100</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r5c1-t5" headers="r1c1-t5">
<p><code>CURRENT_EDITION_NAME</code></p>
</td>
<td class="cellalignment5900" headers="r5c1-t5 r1c2-t5">
<p>The session edition name, such as <code>ORA$BASE</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r6c1-t5" headers="r1c1-t5">
<p><code>CURRENT_SCHEMA</code></p>
</td>
<td class="cellalignment5900" headers="r6c1-t5 r1c2-t5">
<p>The name of the currently active default schema, such as <code>SH</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r7c1-t5" headers="r1c1-t5">
<p><code>CURRENT_SCHEMA_ID</code></p>
</td>
<td class="cellalignment5900" headers="r7c1-t5 r1c2-t5">
<p>The numeric identifier of the currently active default schema, such as <code>80</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r8c1-t5" headers="r1c1-t5">
<p><code>CURRENT_USER</code></p>
</td>
<td class="cellalignment5900" headers="r8c1-t5 r1c2-t5">
<p>The name of the database user whose privileges are currently active, such as <code>SH</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r9c1-t5" headers="r1c1-t5">
<p><code>CURRENT_USERID</code></p>
</td>
<td class="cellalignment5900" headers="r9c1-t5 r1c2-t5">
<p>The numeric identifier of the database user whose privileges are currently active, such as <code>80</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r10c1-t5" headers="r1c1-t5">
<p><code>DATABASE_ROLE</code></p>
</td>
<td class="cellalignment5900" headers="r10c1-t5 r1c2-t5">
<p>Data Guard role of the database: <code>PRIMARY</code>, <code>PHYSICAL STANDBY</code>, <code>LOGICAL STANDBY</code>, or <code>SNAPSHOT STANDBY</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r11c1-t5" headers="r1c1-t5">
<p><code>DB_DOMAIN</code></p>
</td>
<td class="cellalignment5900" headers="r11c1-t5 r1c2-t5">
<p>The network domain of the database as specified by the <code>DB_DOMAIN</code> initialization parameter, such as <code>us.example.com</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r12c1-t5" headers="r1c1-t5">
<p><code>DB_NAME</code></p>
</td>
<td class="cellalignment5900" headers="r12c1-t5 r1c2-t5">
<p>The name of the database as specified by the <code>DB_NAME</code> initialization parameter.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r13c1-t5" headers="r1c1-t5">
<p><code>DB_UNIQUE_NAME</code></p>
</td>
<td class="cellalignment5900" headers="r13c1-t5 r1c2-t5">
<p>The unique name of the database within the domain as specified by the <code>DB_UNIQUE_NAME</code> initialization parameter.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r14c1-t5" headers="r1c1-t5">
<p><code>ENTERPRISE_IDENTITY</code></p>
</td>
<td class="cellalignment5900" headers="r14c1-t5 r1c2-t5">
<p>The enterprise-wide identity of the user, or <code>NULL</code> for local users, SYSDBA, and SYSOPER.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r15c1-t5" headers="r1c1-t5">
<p><code>FG_JOB_ID</code></p>
</td>
<td class="cellalignment5900" headers="r15c1-t5 r1c2-t5">
<p>Job identifier of the current session if a client foreground process opened it; otherwise, <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r16c1-t5" headers="r1c1-t5">
<p><code>GLOBAL_CONTEXT_MEMORY</code></p>
</td>
<td class="cellalignment5900" headers="r16c1-t5 r1c2-t5">
<p>The number used in the System Global Area by the globally accessed context.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r17c1-t5" headers="r1c1-t5">
<p><code>GLOBAL_UID</code></p>
</td>
<td class="cellalignment5900" headers="r17c1-t5 r1c2-t5">
<p>The global user identification from Oracle Internet Directory for Enterprise User Security logins; otherwise, <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r18c1-t5" headers="r1c1-t5">
<p><code>HOST</code></p>
</td>
<td class="cellalignment5900" headers="r18c1-t5 r1c2-t5">
<p>The name of the client host computer.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r19c1-t5" headers="r1c1-t5">
<p><code>IDENTIFICATION_TYPE</code></p>
</td>
<td class="cellalignment5900" headers="r19c1-t5 r1c2-t5">
<p>The way the user schema was created in the database: <code>LOCAL</code>, <code>EXTERNAL</code>, <code>GLOBAL SHARED</code>, or <code>GLOBAL PRIVATE</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r20c1-t5" headers="r1c1-t5">
<p><code>INSTANCE</code></p>
</td>
<td class="cellalignment5900" headers="r20c1-t5 r1c2-t5">
<p>The identification number of the current instance, such as <code>1</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r21c1-t5" headers="r1c1-t5">
<p><code>INSTANCE_NAME</code></p>
</td>
<td class="cellalignment5900" headers="r21c1-t5 r1c2-t5">
<p>The name of the database instance.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r22c1-t5" headers="r1c1-t5">
<p><code>IP_ADDRESS</code></p>
</td>
<td class="cellalignment5900" headers="r22c1-t5 r1c2-t5">
<p>The IP address of the client, such as <code>10.255.255.255</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r23c1-t5" headers="r1c1-t5">
<p><code>ISDBA</code></p>
</td>
<td class="cellalignment5900" headers="r23c1-t5 r1c2-t5">
<p><code>TRUE</code> if the user was authenticated with DBA privileges; otherwise, <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r24c1-t5" headers="r1c1-t5">
<p><code>LANG</code></p>
</td>
<td class="cellalignment5900" headers="r24c1-t5 r1c2-t5">
<p>A short name for the session language, such as <code>US</code> for <code>AMERICAN</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r25c1-t5" headers="r1c1-t5">
<p><code>LANGUAGE</code></p>
</td>
<td class="cellalignment5900" headers="r25c1-t5 r1c2-t5">
<p>The language, territory, and database character set in the form <code><span class="codeinlineitalic">language_territory.characterset</span></code>, such as <code>AMERICA_AMERICAN.WE8DEC</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r26c1-t5" headers="r1c1-t5">
<p><code>MODULE</code></p>
</td>
<td class="cellalignment5900" headers="r26c1-t5 r1c2-t5">
<p>The application name set through the <code>DBMS_APPLICATION_INFO</code> package or OCI, such as <code>JDBC Thin Client</code> or <code>SQL Developer</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r27c1-t5" headers="r1c1-t5">
<p><code>NETWORK_PROTOCOL</code></p>
</td>
<td class="cellalignment5900" headers="r27c1-t5 r1c2-t5">
<p>The network protocol being used for communication, such as <code>TCP</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r28c1-t5" headers="r1c1-t5">
<p><code>NLS_CALENDAR</code></p>
</td>
<td class="cellalignment5900" headers="r28c1-t5 r1c2-t5">
<p>The session calendar, such as <code>GREGORIAN</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r29c1-t5" headers="r1c1-t5">
<p><code>NLS_CURRENCY</code></p>
</td>
<td class="cellalignment5900" headers="r29c1-t5 r1c2-t5">
<p>The session currency mark, such as <code>$</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r30c1-t5" headers="r1c1-t5">
<p><code>NLS_DATE_FORMAT</code></p>
</td>
<td class="cellalignment5900" headers="r30c1-t5 r1c2-t5">
<p>The session date format, such as <code>DD-MON-RR</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r31c1-t5" headers="r1c1-t5">
<p><code>NLS_DATE_LANGUAGE</code></p>
</td>
<td class="cellalignment5900" headers="r31c1-t5 r1c2-t5">
<p>The session date language, such as <code>AMERICAN</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r32c1-t5" headers="r1c1-t5">
<p><code>NLS_SORT</code></p>
</td>
<td class="cellalignment5900" headers="r32c1-t5 r1c2-t5">
<p><code>BINARY</code> or a linguistic sort basis, such as <code>XSPANISH</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r33c1-t5" headers="r1c1-t5">
<p><code>NLS_TERRITORY</code></p>
</td>
<td class="cellalignment5900" headers="r33c1-t5 r1c2-t5">
<p>The session territory, such as <code>AMERICA</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r34c1-t5" headers="r1c1-t5">
<p><code>OS_USER</code></p>
</td>
<td class="cellalignment5900" headers="r34c1-t5 r1c2-t5">
<p>The operating system user name of the client process that initiated the database session.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r35c1-t5" headers="r1c1-t5">
<p><code>SERVER_HOST</code></p>
</td>
<td class="cellalignment5900" headers="r35c1-t5 r1c2-t5">
<p>The host name of the computer where the database instance is running.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r36c1-t5" headers="r1c1-t5">
<p><code>SERVICE_NAME</code></p>
</td>
<td class="cellalignment5900" headers="r36c1-t5 r1c2-t5">
<p>The name of the service the session is connected to, such as <code>SYS$USERS</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r37c1-t5" headers="r1c1-t5">
<p><code>SESSION_USER</code></p>
</td>
<td class="cellalignment5900" headers="r37c1-t5 r1c2-t5">
<p>The database user name or schema name that identified the user at login, such as <code>SH</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r38c1-t5" headers="r1c1-t5">
<p><code>SESSIONID</code></p>
</td>
<td class="cellalignment5900" headers="r38c1-t5 r1c2-t5">
<p>The session identifier, such as <code>120456</code>.</p>
</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r39c1-t5" headers="r1c1-t5">
<p><code>SID</code></p>
</td>
<td class="cellalignment5900" headers="r39c1-t5 r1c2-t5">
<p>The session number, such as <code>86</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref641"></a>Example</p>
<p><code>SYS_CONTEXT(&#39;USERENV&#39;,&#39;NLS_DATE_FORMAT&#39;)</code> returns a value such as <code>DD-MON-RR</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBHEEH"></a>
<div id="OLAXS474" class="refsect1">
<h2 class="refsect1">SYSDATE</h2>
<p><code>SYSDATE</code> returns the current date and time of the operating system on which the database resides. The format of the value depends on the value of the <code>NLS_DATE_FORMAT</code> initialization parameter.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref642"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref643"></a>Syntax</p>
<pre><span class="bold">SYSDATE</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref644"></a>Examples</p>
<p><code>SYSDATE</code> returns a value such as <code>13-AUG-06</code> with <code>NLS_DATE_FORMAT</code> set to <code>DD-MON-RR</code>.</p>
<p><code>TO_CHAR(SYSDATE, &#39;MM-DD-YYYY HH24:MI:SS&#39;)</code> returns a value such as <code>08-13-2006 17:20:47</code>. The date format provided in the call to <code>TO_CHAR</code> displays both the date and the time.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCHBIH"></a>
<div id="OLAXS475" class="refsect1">
<h2 class="refsect1">SYSTIMESTAMP</h2>
<p><code>SYSTIMESTAMP</code> returns the system date, including fractional seconds and time zone, of the system on which the database resides.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref645"></a>Return Value</p>
<pre>TIMESTAMP WITH TIME ZONE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref646"></a>Syntax</p>
<pre><span class="bold">SYSTIMESTAMP</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref647"></a>Example</p>
<p><code>SYSTIMESTAMP</code> returns a value such as</p>
<p><code>13-AUG-06 05.28.10.385799 PM -08:00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHAFGH"></a>
<div id="OLAXS476" class="refsect1">
<h2 class="refsect1">TAN</h2>
<p><code>TAN</code> returns the tangent of an angle.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref648"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref649"></a>Syntax</p>
<pre><span class="bold">TAN</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref650"></a>Arguments</p>
<p><code>n</code> is a numeric expression for an angle in radians.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref651"></a>Example</p>
<p><code>TAN(135 * 3.1415927/180)</code> calculates the tangent of a 135 degree angle as the value <code>-0.99999993</code>. The expression converts degrees to radians.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIEGCJ"></a>
<div id="OLAXS477" class="refsect1">
<h2 class="refsect1">TANH</h2>
<p><code>TANH</code> returns the tangent of a hyperbolic angle.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref652"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref653"></a>Syntax</p>
<pre><span class="bold">TANH</span>(n)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref654"></a>Arguments</p>
<p><code>n</code> is a numeric expression for a hyperbolic angle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref655"></a>Example</p>
<p><code>TANH(.5)</code> returns the value <code>0.462117157</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEDIGJ"></a>
<div id="OLAXS478" class="refsect1">
<h2 class="refsect1">TO_BINARY_DOUBLE</h2>
<p><code>TO_BINARY_DOUBLE</code> converts a text or numeric expression to a double-precision floating-point number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref656"></a>Return Value</p>
<pre>BINARY_DOUBLE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref657"></a>Syntax</p>
<pre><span class="bold">TO_BINARY_DOUBLE </span>(expr [, fmt [, &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref658"></a>Arguments</p>
<p><code>n</code> can be any text or numeric expression.</p>
<p><code>fmt</code> is a text expression that identifies a number format model as described in the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the characters used by these number format elements:</p>
<ul>
<li>
<p>Decimal character</p>
</li>
<li>
<p>Group separator</p>
</li>
<li>
<p>Local currency symbol</p>
</li>
<li>
<p>International currency symbol</p>
</li>
</ul>
<p>This argument has the format shown here:</p>
<pre>&#39;NLS_NUMERIC_CHARACTERS = &#39;&#39;dg&#39;&#39;
 NLS_CURRENCY = &#39;&#39;text&#39;&#39;
 NLS_ISO_CURRENCY = territory &#39;
</pre>
<p>The <code>d</code> is the decimal character, and the <code>g</code> is the group separator. They must be different single-byte characters. Within the quoted string, use two single quotation marks around the parameter values. Ten characters are available for the currency symbol.</p>
<p>If you omit this argument or any of the NLS parameters, then this function uses the default values for your session to interpret <code>expr</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref659"></a>Example</p>
<p>All of these examples return the value <code>1.235E+003</code>:</p>
<pre>TO_BINARY_DOUBLE(1234.56)

TO_BINARY_DOUBLE(&#39;$1,234.56&#39;, &#39;$9,999.99&#39;)

TO_BINARY_DOUBLE(&#39;1.234,56&#39;, &#39;9G999D99&#39;, &#39;NLS_NUMERIC_CHARACTERS=&#39;&#39;,.&#39;&#39;&#39;)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHJDFA"></a>
<div id="OLAXS479" class="refsect1">
<h2 class="refsect1">TO_BINARY_FLOAT</h2>
<p><code>TO_BINARY_FLOAT</code> converts a text or numeric expression to a single-precision floating-point number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref660"></a>Return Value</p>
<pre>BINARY_FLOAT
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref661"></a>Syntax</p>
<pre><span class="bold">TO_BINARY_FLOAT </span>(expr [, fmt [, &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref662"></a>Arguments</p>
<p><code>n</code> can be any text or numeric expression.</p>
<p><code>fmt</code> is a text expression that identifies a number format model as described in the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the characters used by these number format elements:</p>
<ul>
<li>
<p>Decimal character</p>
</li>
<li>
<p>Group separator</p>
</li>
<li>
<p>Local currency symbol</p>
</li>
<li>
<p>International currency symbol</p>
</li>
</ul>
<p>This argument has the format shown here:</p>
<pre>&#39;NLS_NUMERIC_CHARACTERS = &#39;&#39;dg&#39;&#39;
 NLS_CURRENCY = &#39;&#39;text&#39;&#39;
 NLS_ISO_CURRENCY = territory &#39;
</pre>
<p>The <code>d</code> is the decimal character, and the <code>g</code> is the group separator. They must be different single-byte characters. Within the quoted string, use two single quotation marks around the parameter values. Ten characters are available for the currency symbol.</p>
<p>If you omit this argument or any of the NLS parameters, then this function uses the default values for your session to interpret <code>expr</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref663"></a>Examples</p>
<p>All of these examples return the value <code>1.235E+003</code>:</p>
<pre>TO_BINARY_FLOAT(1234.56)

TO_BINARY_FLOAT(&#39;$1,234.56&#39;, &#39;$9,999.99&#39;)

TO_BINARY_FLOAT(&#39;1.234,56&#39;, &#39;9G999D99&#39;, &#39;NLS_NUMERIC_CHARACTERS=&#39;&#39;,.&#39;&#39;&#39;)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDBIBF"></a>
<div id="OLAXS480" class="refsect1">
<h2 class="refsect1">TO_CHAR (character)</h2>
<p><code>TO_CHAR(character)</code> converts a text expression to the database character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref664"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref665"></a>Syntax</p>
<pre><span class="bold">TO_CHAR</span>(exp)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref666"></a>Arguments</p>
<p><code>char</code> is a text expression. If it contains characters that are not represented in the database character set, then the conversion results in a loss of data.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref667"></a>Examples</p>
<p><code>TO_CHAR(&#39;&iexcl;Una qu&eacute; sorpresa!&#39;)</code> returns the value <code>?Una qu? sorpresa!</code> Two letters are lost in the conversion (<code>&iexcl;</code>and <code>&eacute;</code>) because they are not in the database character set.</p>
<p><code>TO_CHAR(&#39;David Ortiz&#39;)</code> returns the value <code>David Ortiz</code> in the database character set. No characters are lost in this conversion because all of them are in the database character set.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGCJCA"></a>
<div id="OLAXS481" class="refsect1">
<h2 class="refsect1">TO_CHAR (datetime)</h2>
<p><code>TO_CHAR(datetime)</code> converts a datetime or interval expression to a text string in a specified format.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref668"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref669"></a>Syntax</p>
<pre><span class="bold">TO_CHAR</span>({ datetime | interval } [, fmt [, &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref670"></a>Arguments</p>
<p><code>datetime</code> is a datetime expression to be converted to text.</p>
<p><code>interval</code> is an interval expression to be converted to text.</p>
<p><code>fmt</code> is a datetime model format specifying the format of <code>char</code>. The default date format is determined implicitly by the <code>NLS_TERRITORY</code> initialization parameter or can be set explicitly by the <code>NLS_DATE_FORMAT</code> parameter. For data type formats, refer to the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the language in which month and day names and abbreviations are returned. This argument can have this form:</p>
<pre>&#39;NLS_DATE_LANGUAGE = language&#39; 
</pre>
<p>By default, the return value is in the session date language.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref671"></a>Examples</p>
<p><code>TO_CHAR(SYSDATE)</code> returns a value such as <code>11-APR-08</code>.</p>
<p><code>TO_CHAR(SYSDATE, &#39;Day: MONTH DD, YYYY&#39;)</code> returns a value such as <code>Friday : APRIL 11, 2008</code>.</p>
<p><code>TO_CHAR(SYSDATE, &#39;Day: MONTH DD, YYYY&#39;, &#39;NLS_DATE_LANGUAGE = Spanish&#39;)</code> returns a value such as <code>Viernes : ABRIL 11, 2008</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGGIAB"></a>
<div id="OLAXS482" class="refsect1">
<h2 class="refsect1">TO_CHAR (number)</h2>
<p><code>TO_CHAR(number)</code> converts a numeric expression to a text value in the database character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref672"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref673"></a>Syntax</p>
<pre><span class="bold">TO_CHAR</span>(n [, fmt [, &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref674"></a>Arguments</p>
<p><code>n</code> is a numeric expression to be converted.</p>
<p><code>fmt</code> is a text expression that identifies a number format model as described in the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the characters that are returned by these number format elements:</p>
<ul>
<li>
<p>Decimal character</p>
</li>
<li>
<p>Group separator</p>
</li>
<li>
<p>Local currency symbol</p>
</li>
<li>
<p>International currency symbol</p>
</li>
</ul>
<p>This argument has the format shown here:</p>
<pre>&#39;NLS_NUMERIC_CHARACTERS = &#39;&#39;dg&#39;&#39;
 NLS_CURRENCY = &#39;&#39;text&#39;&#39;
 NLS_ISO_CURRENCY = territory &#39;
</pre>
<p>The characters <code>d</code> and <code>g</code> represent the decimal character and group separator, respectively. They must be different single-byte characters. Within the quoted string, use two single quotation marks around the parameter values. Ten characters are available for the currency symbol.</p>
<p>If you omit this argument or any of the NLS parameters, then this function uses the default values for your session.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref675"></a>Examples</p>
<p><code>TO_CHAR(1234567, &#39;C9G999G999D99&#39;)</code> returns a text string such as <code>USD1,234,567.00</code>.</p>
<p><code>TO_CHAR(1234567, &#39;C9G999G999D99&#39;, &#39;NLS_ISO_CURRENCY = SPAIN&#39;)</code> returns the text string <code>EUR1,234,567.00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFFDIF"></a>
<div id="OLAXS483" class="refsect1">
<h2 class="refsect1">TO_DATE</h2>
<p><code>TO_DATE</code> converts a text expression to a <code>DATE</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref676"></a>Return Value</p>
<pre>DATE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref677"></a>Syntax</p>
<pre><span class="bold">TO_DATE</span>(char [, fmt [, &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref678"></a>Arguments</p>
<p><code>char</code> is a text expression that represents a date.</p>
<p><code>fmt</code> is a datetime model format specifying the format of <code>char</code>. The default date format is determined implicitly by the <code>NLS_TERRITORY</code> initialization parameter or can be set explicitly by the <code>NLS_DATE_FORMAT</code> parameter. For data type formats, refer to the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the language of <code>char</code>. This argument can have this form:</p>
<pre>&#39;NLS_DATE_LANGUAGE = language&#39; 
</pre>
<p>By default, <code>char</code> is in the session date language.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref679"></a>Examples</p>
<p><code>TO_DATE(&#39;October 13, 2008&#39;, &#39;MONTH DD, YYYY&#39;)</code> returns the value <code>13-OCT-08</code>.</p>
<p><code>TO_DATE(&#39;13 Octubre 2008&#39;, &#39;dd month yyyy&#39;, &#39;NLS_DATE_LANGUAGE=SPANISH&#39;)</code> also returns the value <code>13-OCT-08</code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHEDHF"></a>
<div id="OLAXS484" class="refsect1">
<h2 class="refsect1">TO_DSINTERVAL</h2>
<p><code>TO_DSINTERVAL</code> converts a text expression to an <code>INTERVAL DAY TO SECOND</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref680"></a>Return Value</p>
<pre>INTERVAL DAY TO SECOND
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref681"></a>Syntax</p>
<pre><span class="bold">TO_DSINTERVAL</span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref682"></a>Arguments</p>
<p><code>char</code> is a text expression to be converted.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref683"></a>Example</p>
<p><code>TO_DSINTERVAL(&#39;360 12:45:49&#39;)</code> returns the value <code>+360 12:45:49.000000</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDGAEE"></a>
<div id="OLAXS485" class="refsect1">
<h2 class="refsect1">TO_NCHAR (character)</h2>
<p><code>TO_NCHAR(character)</code> converts a character string to the national character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref684"></a>Return Value</p>
<pre>NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref685"></a>Syntax</p>
<pre><span class="bold">TO_NCHAR</span>(exp)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref686"></a>Arguments</p>
<p><code>exp</code> is a text expression. If it contains characters that are not represented in the national character set, then the conversion results in a loss of data.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref687"></a>Example</p>
<p><code>TO_NCHAR(&#39;David Ortiz&#39;)</code> returns the value <code>David Ortiz</code> in the national character set.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBDCAJ"></a>
<div id="OLAXS486" class="refsect1">
<h2 class="refsect1">TO_NCHAR (datetime)</h2>
<p><code>TO_NCHAR(datetime)</code> converts a datetime or interval value to the national character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref688"></a>Return Value</p>
<pre>NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref689"></a>Syntax</p>
<pre><span class="bold">TO_NCHAR</span>({ datetime | interval }
         [, fmt [, &#39;nlsparam&#39; ] ]
        )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref690"></a>Arguments</p>
<p><code>datetime</code> is a datetime expression to be converted to text.</p>
<p><code>interval</code> is an interval expression to be converted to text.</p>
<p><code>fmt</code> is a datetime model format specifying the format of <code>char</code>. The default date format is determined implicitly by the <code>NLS_TERRITORY</code> initialization parameter or can be set explicitly by the <code>NLS_DATE_FORMAT</code> parameter. For data type formats, refer to the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the language in which month and day names and abbreviations are returned. This argument can have this form:</p>
<pre>&#39;NLS_DATE_LANGUAGE = language&#39; 
</pre>
<p>By default, the return value is in the session date language.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref691"></a>Examples</p>
<p><code>TO_NCHAR(SYSDATE)</code> returns a value such as <code>11-APR-08</code>.</p>
<p><code>TO_NCHAR(SYSDATE, &#39;Day: MONTH DD, YYYY&#39;)</code> returns a value such as <code>Friday : APRIL 11, 2008</code>.</p>
<p><code>TO_NCHAR(SYSDATE, &#39;Day: MONTH DD, YYYY&#39;, &#39;NLS_DATE_LANGUAGE = Spanish&#39;)</code> returns a value such as <code>Viernes : ABRIL 11, 2008</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDFACE"></a>
<div id="OLAXS487" class="refsect1">
<h2 class="refsect1">TO_NCHAR (number)</h2>
<p><code>TO_NCHAR(number)</code> converts a number to the national character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref692"></a>Return Value</p>
<pre>NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref693"></a>Syntax</p>
<pre><span class="bold">TO_CHAR</span>(n [, fmt [, &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref694"></a>Arguments</p>
<p><code>n</code> is a numeric expression to be converted.</p>
<p><code>fmt</code> is a text expression that identifies a number format model as described in the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> is a text expression that specifies the characters that are returned by these number format elements:</p>
<ul>
<li>
<p>Decimal character</p>
</li>
<li>
<p>Group separator</p>
</li>
<li>
<p>Local currency symbol</p>
</li>
<li>
<p>International currency symbol</p>
</li>
</ul>
<p>This argument has the format shown here:</p>
<pre>&#39;NLS_NUMERIC_CHARACTERS = &#39;&#39;dg&#39;&#39;
   NLS_CURRENCY = &#39;&#39;text&#39;&#39;
   NLS_ISO_CURRENCY = territory &#39;
</pre>
<p>The characters <code>d</code> and <code>g</code> represent the decimal character and group separator, respectively. They must be different single-byte characters. Within the quoted string, use two single quotation marks around the parameter values. Ten characters are available for the currency symbol.</p>
<p>If you omit this argument or any of the NLS parameters, then this function uses the default values for your session.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref695"></a>Examples</p>
<p><code>TO_NCHAR(1234567, &#39;C9G999G999D99&#39;)</code> returns a text string such as <code>USD1,234,567.00</code>.</p>
<p><code>TO_NCHAR(1234567, &#39;C9G999G999D99&#39;, &#39;NLS_ISO_CURRENCY = SPAIN&#39;)</code> returns the text string <code>EUR1,234,567.00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDJFIH"></a>
<div id="OLAXS488" class="refsect1">
<h2 class="refsect1">TO_NUMBER</h2>
<p><code>TO_NUMBER</code> converts a text expression containing a number to a value of <code>NUMBER</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref696"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref697"></a>Syntax</p>
<pre><span class="bold">TO_NUMBER</span>(expr [, fmt [, &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref698"></a>Arguments</p>
<p><code>expr</code> is an expression to be converted to a number.</p>
<p><code>fmt</code> is a text expression that identifies a number format model as described in the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the characters used by these number format elements:</p>
<ul>
<li>
<p>Decimal character</p>
</li>
<li>
<p>Group separator</p>
</li>
<li>
<p>Local currency symbol</p>
</li>
<li>
<p>International currency symbol</p>
</li>
</ul>
<p>This argument has the format shown here:</p>
<pre>&#39;NLS_NUMERIC_CHARACTERS = &#39;&#39;dg&#39;&#39;
 NLS_CURRENCY = &#39;&#39;text&#39;&#39;
 NLS_ISO_CURRENCY = territory &#39;
</pre>
<p>The <code>d</code> is the decimal character, and the <code>g</code> is the group separator. They must be different single-byte characters. Within the quoted string, use two single quotation marks around the parameter values. Ten characters are available for the currency symbol.</p>
<p>If you omit this argument or any of the NLS parameters, then this function uses the default values for your session to interpret <code>expr</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref699"></a>Examples</p>
<p><code>TO_NUMBER(&#39;$1,234,567.89&#39;, &#39;L999G999G999D99&#39;)</code> returns the value <code>1234567.89</code>.</p>
<p><code>TO_NUMBER(&#39;EUR1,234,567.89&#39;, &#39;C999G999G999D99&#39;, &#39;NLS_ISO_CURRENCY=SPAIN&#39;)</code> also returns the value <code>1234567.89</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEHCBI"></a>
<div id="OLAXS489" class="refsect1">
<h2 class="refsect1">TO_TIMESTAMP</h2>
<p><code>TO_TIMESTAMP</code> converts a text expression to a value of <code>TIMESTAMP</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref700"></a>Return Value</p>
<pre>TIMESTAMP
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref701"></a>Syntax</p>
<pre><span class="bold">TO_TIMESTAMP</span>(char [, fmt [ &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref702"></a>Arguments</p>
<p><code>char</code> is a text expression to be converted.</p>
<p><code>fmt</code> is a datetime model format specifying the format of <code>char</code>. The default date format is determined implicitly by the <code>NLS_TERRITORY</code> initialization parameter or can be set explicitly by the <code>NLS_DATE_FORMAT</code> parameter. For data type formats, refer to the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the language in which month and day names and abbreviations given in <code>char</code>. This argument has this form:</p>
<pre>&#39;NLS_DATE_LANGUAGE = language&#39; 
</pre>
<p>By default, <code>char</code> is in the session date language.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref703"></a>Examples</p>
<p><code>TO_TIMESTAMP(&#39;10-SEP-0614:10:10.123000&#39;,&#39;DD-MON-RRHH24:MI:SS.FF&#39;)</code> returns the value <code>10-SEP-06 02.10.10.123000 PM</code>.</p>
<p><code>TO_TIMESTAMP(&#39;10-AGOSTO-0714:10:10&#39;, &#39;DD-MON-RRHH24:MI:SS.FF&#39;, &#39;NLS_DATE_LANGUAGE=SPANISH&#39;)</code> returns the value <code>10-AUG-07 02.10.10.000000 PM</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEBADD"></a>
<div id="OLAXS490" class="refsect1">
<h2 class="refsect1">TO_TIMESTAMP_TZ</h2>
<p><code>TO_TIMESTAMP_TZ</code> converts a text expression to a value of <code>TIMESTAMP</code><code>WITH</code><code>TIME</code><code>ZONE</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref704"></a>Return Value</p>
<pre>TIMESTAMP WITH TIME ZONE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref705"></a>Syntax</p>
<pre><span class="bold">TO_TIMESTAMP_TZ</span>(char [, fmt [ &#39;nlsparam&#39; ] ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref706"></a>Arguments</p>
<p><code>char</code> is a text expression to be converted.</p>
<p><code>fmt</code> is a datetime model format specifying the format of <code>char</code>. The default date format is determined implicitly by the <code>NLS_TERRITORY</code> initialization parameter or can be set explicitly by the <code>NLS_DATE_FORMAT</code> parameter. For data type formats, refer to the <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<p><code>nlsparam</code> specifies the language in which month and day names and abbreviations given in <code>char</code>. This argument has this form:</p>
<pre>&#39;NLS_DATE_LANGUAGE = language&#39; 
</pre>
<p>By default, <code>char</code> is in the session date language.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref707"></a>Examples</p>
<p><code>TO_TIMESTAMP_TZ(&#39;2006-03-26 7:33:00 -4:00&#39;, &#39;YYYY-MM-DD HH:MI:SS TZH:TZM&#39;)</code> returns the value <code>26-MAR-06 07.33.00.000000 AM -04:00</code>.</p>
<p><code>TO_TIMESTAMP_TZ(&#39;2006-AGOSTO-13 7:33:00 -4:00&#39;, &#39;YYYY-MONTH-DD HH:MI:SS TZH:TZM&#39;, &#39;NLS_DATE_LANGUAGE=SPANISH&#39;)</code> returns the value <code>13-AUG-06 07.33.00.000000 AM -04:00</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJCFID"></a>
<div id="OLAXS491" class="refsect1">
<h2 class="refsect1">TO_YMINTERVAL</h2>
<p><code>TO_YMINTERVAL</code> converts a text expression to an <code>INTERVAL YEAR TO MONTH</code> data type. The function accepts argument in one of the two formats:</p>
<ul>
<li>
<p>SQL interval format compatible with the SQL standard (ISO/IEC 9075:2003)</p>
</li>
<li>
<p>ISO duration format compatible with the ISO 8601:2004 standard</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref708"></a>Return Value</p>
<pre>INTERVAL YEAR TO MONTH
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref709"></a>Syntax</p>
<pre><span class="bold">TO_YMINTERVAL </span> ( &#39; { sql_format | ym_iso_format } &#39; )

sql_format::=
[+|-] years - months

<span class="italic">ym_iso_format</span>::=
[-] <span class="bold">P </span> [ years <span class="bold">Y </span> ] [months <span class="bold">M </span>] [days <span class="bold">D </span>] [ <span class="bold">T </span> [hours <span class="bold">H </span>] [minutes <span class="bold">M </span>] [seconds [. frac_secs] <span class="bold">S </span> ] ]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref710"></a>Arguments</p>
<p><span class="bolditalic">In SQL format:</span></p>
<p><code>years</code> is an integer between 0 and 999999999</p>
<p><code>months</code> is an integer between 0 and 11.</p>
<p>Additional blanks are allowed between format elements.</p>
<p><span class="bolditalic">In ISO format:</span></p>
<p><code>years</code> and <code>months</code> are integers between 0 and 999999999.</p>
<p><code>days</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>, and <code>frac_secs</code> are nonnegative integers and are ignored.</p>
<p>No blanks are allowed in the value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref711"></a>Examples</p>
<p><code>TO_YMINTERVAL(&#39;1-6&#39;)</code> and <code>TO_YMINTERVAL(&#39;P1Y6M&#39;)</code> return the value <code>+01-06</code> for 1 year and 6 months.</p>
<p><code>SYSDATE + TO_YMINTERVAL(&#39;1-6&#39;)</code> adds one year and six months to the current date. When <code>SYSDATE</code> is <code>15-APR-08</code>, the value is <code>15-OCT-09</code>.</p>
<p><code>SYSDATE + TO_YMINTERVAL(&#39;P1Y6M&#39;)</code> adds one year and six months to the current date using ISO format. When <code>SYSDATE</code> is <code>15-APR-08</code>, the value is <code>15-OCT-09</code>.</p>
<p><code>SYSDATE + TO_YMINTERVAL(&#39;-1-2&#39;)</code> subtracts one year and two months from the current date. When <code>SYSDATE</code> is <code>15-APR-08</code>, the value is <code>15-FEB-07</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCCDCC"></a>
<div id="OLAXS492" class="refsect1">
<h2 class="refsect1">TRANSLATE</h2>
<p><code>TRANSLATE</code> enables you to make several single-character, one-to-one substitutions in one operation. This expression returns an expression with all occurrences of each character in one string replaced by its corresponding character in a second string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref712"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref713"></a>Syntax</p>
<pre><span class="bold">TRANSLATE</span>(expr, from_string, to_string)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref714"></a>Arguments</p>
<p><code>expr</code> is a text expression to be modified.</p>
<p><code>from_string</code> consists of one or more characters to be replaced in <code>expr</code>.</p>
<p><code>to_string</code> consists of one or more characters that replace the corresponding characters in <code>from_string</code>. This string can be shorter than <code>from_string</code>, so that a null replaces the extra characters. However, <code>to_string</code> cannot be empty.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref715"></a>Example</p>
<p><code>TRANSLATE(&#39;disk&#39;, &#39;dk&#39;, &#39;Dc&#39;)</code> returns the value <code>Disc</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDFIFD"></a>
<div id="OLAXS493" class="refsect1">
<h2 class="refsect1">TRANSLATE (USING)</h2>
<p><code>TRANSLATE</code> converts a text string between the database character set and the national character set.</p>
<p><span class="bold">Note</span>: The <code>TRANSLATE USING</code> function is supported primarily for ANSI compatibility. Oracle recommends that you use the <code>TO_CHAR</code> and <code>TO_NCHAR</code> functions for converting data to the database or national character sets. <code>TO_CHAR</code> and <code>TO_NCHAR</code> can take as arguments a greater variety of data types than <code>TRANSLATE USING</code>, which accepts only character data.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref716"></a>Return Value</p>
<pre>VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref717"></a>Syntax</p>
<pre><span class="bold">TRANSLATE </span>(char <span class="bold">USING </span>{ <span class="bold">CHAR_CS </span>| <span class="bold">NCHAR_CS</span> } )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref718"></a>Arguments</p>
<p><code>char</code> is a text expression to be converted to the database character set (<code>USING CHAR_CS</code>) or the national character set (<code>USING NCHAR_CS</code>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref719"></a>Example</p>
<p><code>TRANSLATE(&#39;north by northwest&#39; USING NCHAR_CS)</code> returns the value <code>north by northwest</code> in the national character set.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFEIGE"></a>
<div id="OLAXS494" class="refsect1">
<h2 class="refsect1">TRIM</h2>
<p><code>TRIM</code> removes leading or trailing characters (or both) from a character string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref720"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref721"></a>Syntax</p>
<pre><span class="bold">TRIM</span>([ { { <span class="bold">LEADING</span> | <span class="bold">TRAILING</span> | <span class="bold">BOTH</span> }[ trim_character ]  
       | trim_character
       }
       <span class="bold">FROM</span> 
     ]
     trim_source
    )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref722"></a>Arguments</p>
<p><code>LEADING</code> removes matching characters from the beginning of the string.</p>
<p><code>TRAILING</code> removes matching characters from the end of the string.</p>
<p><code>BOTH</code> removes matching characters from both the beginning and the end of the string. (Default)</p>
<p><code>trim_character</code> is a single character to be removed. By default, it is a space.</p>
<p><code>trim_source</code> is the text expression to be trimmed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref723"></a>Examples</p>
<p><code>TRIM(&#39;0&#39; FROM &#39;00026501.6703000&#39;)</code> returns the value <code>26501.6703</code>.</p>
<p><code>TRIM(LEADING &#39;!&#39; FROM &#39;!!Help! Help!!&#39;)</code> returns the value <code>Help! Help!!</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJFABI"></a>
<div id="OLAXS495" class="refsect1">
<h2 class="refsect1">TRUNC (number)</h2>
<p><code>TRUNC</code> shortens a numeric expression to a specified number of decimal places.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref724"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref725"></a>Syntax</p>
<pre><span class="bold">TRUNC</span>(n1 [, n2 ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref726"></a>Arguments</p>
<p><code>n1</code> is the numeric expression to be truncated.</p>
<p><code>n2</code> is the number of decimal places. A positive number truncates digits to the right of the decimal point, and a negative number replaces digits to the left of the decimal point. The default value is zero (0).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref727"></a>Examples</p>
<p><code>TRUNC(15.79)</code> returns the value <code>15</code>.</p>
<p><code>TRUNC(15.79, 1)</code> returns the value <code>15.7</code>.</p>
<p><code>TRUNC(15.79, -1)</code> returns the value <code>10</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFIDAA"></a>
<div id="OLAXS496" class="refsect1">
<h2 class="refsect1">TZ_OFFSET</h2>
<p><code>TZ_OFFSET</code> returns the time zone offset from Coordinated Universal Time (UTC).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref728"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref729"></a>Syntax</p>
<pre><span class="bold">TZ_OFFSET</span>({ &#39;time_zone_name&#39; | &#39;{ + | - } hh:mi&#39;
          | <span class="bold">SESSIONTIMEZONE</span> | <span class="bold">DBTMEZONE</span>
          }
         )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref730"></a>Arguments</p>
<p><code>time_zone_name</code> is the name of a time zone.</p>
<p><code>hh:mm</code> are hours and minutes. This argument simply returns itself.</p>
<p><code>SESSIONTIMEZONE</code> returns the session time zone.</p>
<p><code>DBTIMEZONE</code> returns the database time zone.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref731"></a>Examples</p>
<p><code>TZ_OFFSET(&#39;US/Eastern&#39;)</code> returns the offset <code>-04:00</code> during Daylight Savings Time.</p>
<p><code>TZ_OFFSET(&#39;EST&#39;)</code> returns the offset <code>-05:00</code>.</p>
<p><code>TZ_OFFSET(DBTIMEZONE)</code> returns the offset <code>-07:00</code> for Mountain Standard Time.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDICDF"></a>
<div id="OLAXS497" class="refsect1">
<h2 class="refsect1">UID</h2>
<p><code>UID</code> returns a unique identifier (UID) for the session user (the user who logged on).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref732"></a>Return Value</p>
<pre>INTEGER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref733"></a>Syntax</p>
<pre><span class="bold">UID</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref734"></a>Example</p>
<p><code>UID</code> returns a value such as <code>76</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHEAHD"></a>
<div id="OLAXS498" class="refsect1">
<h2 class="refsect1">UNISTR</h2>
<p><code>UNISTR</code> converts a text string to the national character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref735"></a>Return Value</p>
<pre>NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref736"></a>Syntax</p>
<pre><span class="bold">UNISTR </span>( string )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref737"></a>Arguments</p>
<p><code>string</code> can be any text expression. For portability, Oracle recommends using only ASCII characters and Unicode encoding values as text literals. A Unicode encoding value has the form \<span class="italic">xxxx</span> where <span class="italic">xxxx</span> is the hexadecimal value of a character. Supplementary characters are encoded as two code units, the first from the high-surrogates range (U+D800 to U+DBFF), and the second from the low-surrogates range (U+DC00 to U+DFFF). To include a literal backslash in the string, precede it with another backslash (\\).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref738"></a>Example</p>
<p><code>UNISTR(&#39;abc\00e5\00f1\00f6&#39;)</code> returns the value <code>abc&aring;&ntilde;&ouml;</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFCBFH"></a>
<div id="OLAXS499" class="refsect1">
<h2 class="refsect1">UPPER</h2>
<p><code>UPPER</code> converts all alphabetic characters in a text expression to uppercase. The data type of the return value is the same as the original text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref739"></a>Return Value</p>
<pre>CHAR | NCHAR | VARCHAR2 | NVARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref740"></a>Syntax</p>
<pre><span class="bold">UPPER</span>(char)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref741"></a>Arguments</p>
<p><code>char</code> can be any text expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref742"></a>Example</p>
<p><code>UPPER(&#39;This is an emergency&#39;)</code> returns the string <code>THIS IS AN EMERGENCY</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJIJCC"></a>
<div id="OLAXS500" class="refsect1">
<h2 class="refsect1">USER</h2>
<p><code>USER</code> returns the name of the session user (the user who logged on).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref743"></a>Return Value</p>
<pre>VARCHAR2
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref744"></a>Syntax</p>
<pre><span class="bold">USER</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref745"></a>Example</p>
<p><code>USER</code> returns a value such as <code>GLOBAL</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCEEEA"></a>
<div id="OLAXS501" class="refsect1">
<h2 class="refsect1">VSIZE</h2>
<p><code>VSIZE</code> returns the number of bytes in the internal representation of an expression. It returns <code>NULL</code> for a null expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref746"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref747"></a>Syntax</p>
<pre><span class="bold">VSIZE </span>(expr)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref748"></a>Arguments</p>
<p><code>expr</code> can be an expression of any data type.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref749"></a>Example</p>
<p><code>VSIZE(&#39;Sound of thunder&#39;)</code> returns the value <code>16</code>.</p>
<p><code>VSIZE(CHANNEL.LONG_DESCRIPTION)</code> returns the following values:</p>
<div class="inftblinformal">
<table class="cellalignment5905" summary="VSIZE example output" dir="ltr">
<thead>
<tr class="cellalignment5894">
<th class="cellalignment5906" id="r1c1-t6">Channel</th>
<th class="cellalignment5906" id="r1c2-t6">VSIZE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r2c1-t6" headers="r1c1-t6">Catalog</td>
<td class="cellalignment5900" headers="r2c1-t6 r1c2-t6">7</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r3c1-t6" headers="r1c1-t6">Direct Sales</td>
<td class="cellalignment5900" headers="r3c1-t6 r1c2-t6">12</td>
</tr>
<tr class="cellalignment5894">
<td class="cellalignment5900" id="r4c1-t6" headers="r1c1-t6">Internet</td>
<td class="cellalignment5900" headers="r4c1-t6 r1c2-t6">8</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABICJBJ"></a>
<div id="OLAXS502" class="refsect1">
<h2 class="refsect1">WIDTH_BUCKET</h2>
<p><code>WIDTH_BUCKET</code> enables you to construct a histogram range divided into intervals of identical size. The function returns the bucket number into which the value of an expression falls.</p>
<p>When needed, <code>WIDTH_BUCKET</code> creates an underflow bucket numbered 0 and an overflow bucket numbered <code>num_buckets</code>+1. These buckets handle values outside the specified range and are helpful in checking the reasonableness of the end points.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref750"></a>Return Value</p>
<pre>NUMBER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref751"></a>Syntax</p>
<pre><span class="bold">WIDTH_BUCKET</span>
   (expr, min_value, max_value, num_buckets)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref752"></a>Arguments</p>
<p><code>expr</code> is the expression for which the histogram is being created. This expression must evaluate to a numeric or datetime value or to a value. If <code>expr</code> evaluates to null, then the function returns <code>NULL</code>.</p>
<p><code>min_value</code> and <code>max_value</code> are expressions for the end points of the acceptable range for <code>expr</code>. Both of these expressions must evaluate to numeric or datetime values, and neither can evaluate to null.</p>
<p><code>num_buckets</code> is an expression for the number of buckets. This expression must evaluate to a positive integer.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref753"></a>Example</p>
<p><code>WIDTH_BUCKET(13, 0, 20, 4)</code> returns the value <code>3</code>. It creates four buckets from 0 to 20 and sorts the value 13 into bucket 3.</p>
<p><code>WIDTH_BUCKET(-5, 0, 20, 4)</code> returns the value <code>0</code>. The value <code>-5</code> is below the beginning of the range.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5893">
<tr>
<td class="cellalignment5900">
<table class="cellalignment5904">
<tr>
<td class="cellalignment5897"><a href="olap_functions.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5897"><a href="reserved.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5902">
<table class="cellalignment5903">
<tr>
<td class="cellalignment5897"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5897"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5897"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5897"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5897"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>