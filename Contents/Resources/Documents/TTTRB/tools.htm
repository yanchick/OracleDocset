<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114095"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Tools%20for%20Troubleshooting%20TimesTen"></a><title>Tools for Troubleshooting TimesTen</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-10-07T19:55:0Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Troubleshooting Guide"/>
<meta name="dcterms.identifier" content="E21636-11"/>
<meta name="dcterms.isVersionOf" content="TTTRB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2011, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="whatsnew.htm" title="Previous" type="text/html"/>
<link rel="Next" href="datastore_trouble.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21636-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">5/10</span> <!-- End Header -->
<div id="TTTRB119" class="chapter"><a id="sthref13"></a>
<h1 class="chapter"><span class="secnum">1</span> Tools for Troubleshooting TimesTen</h1>
<p>The following sections in this chapter describe how to use the TimesTen utilities and other tools that are used to diagnose problems with the TimesTen database:</p>
<ul>
<li>
<p><a href="#i1367573">Using the ttCapture utility</a></p>
</li>
<li>
<p><a href="#i1367296">Using the ttIsql utility</a></p>
</li>
<li>
<p><a href="#i1367399">Using the ttStatus utility</a></p>
</li>
<li>
<p><a href="#i1367615">Using the logs generated by the TimesTen daemon</a></p>
</li>
<li>
<p><a href="#i1367634">Using the ttTraceMon utility</a></p>
</li>
<li>
<p><a href="#i1368246">Using the ttXactAdmin utility</a></p>
</li>
<li>
<p><a href="#i1368309">Using ODBC tracing</a></p>
</li>
<li>
<p><a href="#i1368315">Using SNMP traps to detect events</a></p>
</li>
<li>
<p><a href="#i1368331">Monitoring the TimesTen system tables</a></p>
</li>
<li>
<p><a href="#i1368407">Using the query optimizer</a></p>
</li>
</ul>
<a id="i1367573"></a>
<div id="TTTRB128" class="sect1">
<h2 class="sect1">Using the ttCapture utility</h2>
<p>The <a id="sthref14"></a><code>ttCapture</code> utility captures information about the configuration and state of your TimesTen system into a file that provides TimesTen technical support with a snapshot of your system at the time the <code>ttCapture</code> utility is running. The <code>ttCapture</code> utility generates a file named <code>ttcapture.</code><code><span class="codeinlineitalic">date.time.</span></code><code>log</code>. By default, the file is written to the directory from which you invoke the <code>ttCapture</code> utility. Use the <code>ttCapture</code> <code>-dest</code> option to direct the output file to be written to another directory.</p>
<p>If you run <code>ttCapture</code> again, it writes the information to a new file.</p>
<p>On Windows platforms, running <code>ttCapture</code> also produces an XML file named <code>ttcapture.</code><code><span class="codeinlineitalic">date.time</span></code><code>.nfo</code> that contains output from the <code>msinfo32</code> utility.</p>
<p>When you experience a problem with a TimesTen database, run <code>ttCapture</code> with the <code><span class="codeinlineitalic">DSN</span></code> option for the database as soon as possible, either when you are encountering the problem or immediately afterward.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Always double-quote directory and file names in case there are spaces in the names.</div>
<p>When you contact TimesTen technical support, upload the <code>ttcapture.</code><code><span class="codeinlineitalic">date.number.</span></code><code>log</code> file to the Service Request. Windows users should also upload the <code>ttcapture.</code><code><span class="codeinlineitalic">date.time</span></code><code>.nfo</code> file.</p>
<p>See <a class="olink TTREF334" href="../TTREF/util.htm#TTREF334">&#34;ttCapture&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for information about additional options.</p>
</div>
<!-- class="sect1" -->
<a id="i1367296"></a>
<div id="TTTRB120" class="sect1">
<h2 class="sect1">Using the <a id="sthref15"></a>ttIsql utility</h2>
<p>The <code>ttIsql</code> utility enables you to interactively execute SQL statements and report status information on your TimesTen database.</p>
<p>All TimesTen SQL operations can be executed from a <code>ttIsql</code> <code>Command&gt;</code> prompt.</p>
<div id="TTTRB121" class="example">
<p class="titleinexample"><a id="sthref16"></a>Example 1-1 Using the ttIsql utility</p>
<p>To start the <code>ttIsql</code> utility for the demo database, enter:</p>
<pre>% ttIsql demo
</pre>
<p>You should see output similar to the following:</p>
<pre>Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.

connect &#34;DSN=demo&#34;;
Connection successful: DSN=demo;UID=testuser;DataStore=/scratch/testuser/demo;
DatabaseCharacterSet=AL32UTF8;ConnectionCharacterSet=AL32UTF8;PermSize=128;
TypeMode=0;
(Default setting AutoCommit=1)
</pre>
<p>You can then execute SQL statements or <code>ttIsql</code> commands at the <code>Command&gt;</code> prompt. You can also call TimesTen built-in procedures. One useful procedure is <code>ttConfiguration</code>. When you execute <code>ttConfiguration</code>, TimesTen displays the values of the connection attributes for your current database connection. For more information, see &#34;<a class="olink TTREF244" href="../TTREF/proced.htm#TTREF244">ttConfiguration</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</div>
<!-- class="example" -->
<p><a class="olink TTOPR306" href="../TTOPR/ttisql.htm#TTOPR306">&#34;Using the ttIsql Utility&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> describes how to use the most common <code>ttIsql</code> commands. The following <code>ttIsql</code> commands are commonly used when troubleshooting:</p>
<ul>
<li>
<p><code>monitor</code> formats the contents of the <code>SYS.MONITOR</code> table.</p>
<p>See <a class="olink TTOPR317" href="../TTOPR/ttisql.htm#TTOPR317">&#34;Displaying database structure information&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
<li>
<p><code>dssize</code> prints database size information.</p>
<p>See <a class="olink TTOPR317" href="../TTOPR/ttisql.htm#TTOPR317">&#34;Displaying database structure information&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
<li>
<p><code>showplan</code> prints the optimizer execution plans for selects, updates, and deletes in this transaction.</p>
<p>See <a class="olink TTOPR322" href="../TTOPR/ttisql.htm#TTOPR322">&#34;Viewing and changing query optimizer plans&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
<li>
<p><code>timing</code> prints query timing.</p>
<p>See <a class="olink TTOPR323" href="../TTOPR/ttisql.htm#TTOPR323">&#34;Timing ODBC function calls&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
<li>
<p><code>optprofile</code> prints the current optimizer flag settings and join order.</p>
<p>See <a class="olink TTOPR322" href="../TTOPR/ttisql.htm#TTOPR322">&#34;Viewing and changing query optimizer plans&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
</ul>
<p>For the full list of <code>ttIsql</code> features, see the lists of options and commands under the description of the <code>ttIsql</code> utility in the <a class="olink TTREF" href="../TTREF/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database Reference</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="i1367399"></a>
<div id="TTTRB122" class="sect1">
<h2 class="sect1">Using the <a id="sthref17"></a>ttStatus utility</h2>
<p><a id="sthref18"></a>Use the <code>ttStatus</code> utility to check the status of the TimesTen daemon and the state of all TimesTen connections.</p>
<div id="TTTRB123" class="example">
<p class="titleinexample"><a id="sthref19"></a>Example 1-2 ttStatus shows TimesTen daemon is not running</p>
<p>In this example, the output from <code>ttStatus</code> indicates that no TimesTen daemon is running. If the daemon has stopped unexpectedly, see <a href="datastore_trouble.htm#i1189144">&#34;No response from TimesTen daemon or subdaemon&#34;</a> for troubleshooting information.</p>
<p>On Windows:</p>
<pre>C:\&gt;ttStatus
ttStatus: Could not connect to the TimesTen service. 
If the TimesTen service is not running, please start it by running 
&#34;ttDaemonAdmin -start&#34;.
</pre>
<p>On UNIX platforms:</p>
<pre>$ ttStatus
ttStatus: Could not connect to the TimesTen daemon.
If the TimesTen daemon is not running, please start it
by running &#34;ttDaemonAdmin -start&#34;.
</pre></div>
<!-- class="example" -->
<div id="TTTRB124" class="example">
<p class="titleinexample"><a id="sthref20"></a>Example 1-3 ttStatus shows TimesTen daemon is running</p>
<p>In this example, the output from <code>ttStatus</code> indicates that the TimesTen daemon is running. There is one database named <code>demo</code>.</p>
<p>The first line indicates that the TimesTen daemon is running as process 4579 on port 4738 for the TimesTen instance <code>myinstance</code>. The second line indicates the TimesTen Server is running as process 4588 on port 4740.</p>
<p>There are currently 12 connections to the database: one user and 11 subdaemon connections.</p>
<p>The restart policies for the cache agent and the replication agent in the database are set to <code>manual</code>.</p>
</div>
<!-- class="example" -->
<pre>$ ttStatus
TimesTen status report as of Wed May  1 16:37:51 2013
 
Daemon pid 4579 port 4738 instance myinstance
TimesTen server pid 4588 started on port 4740
------------------------------------------------------------------------
Data store /scratch/testuser/demo
There are 12 connections to the data store
Shared Memory KEY 0x02010008 ID 7798789
PL/SQL Memory KEY 0x03010008 ID 7831558 Address 0x7fa0000000
Type            PID     Context             Connection Name              ConnID
Process         4631    0x0000000009b3e800  demo                              1
Subdaemon       4584    0x0000000000616460  Manager                         142
Subdaemon       4584    0x000000000066d210  Rollback                        141
Subdaemon       4584    0x000000000074ea00  Flusher                         140
Subdaemon       4584    0x00000000007a3c90  Monitor                         139
Subdaemon       4584    0x00000000007f8790  Deadlock Detector               138
Subdaemon       4584    0x000000000084f2f0  Aging                           136
Subdaemon       4584    0x0000000000863db0  Log Marker                      135
Subdaemon       4584    0x00000000008fcf70  IndexGC                         132
Subdaemon       4584    0x00002aaabcb008d0  Checkpoint                      137
Subdaemon       4584    0x00002aaabcb555f0  HistGC                          133
Subdaemon       4584    0x00002aaabcc008d0  AsyncMV                         134
Replication policy  : Manual
Cache Agent policy  : Manual
PL/SQL enabled.
------------------------------------------------------------------------
Accessible by group g900
End of report
</pre>
<div id="TTTRB127" class="example">
<p class="titleinexample"><a id="sthref21"></a>Example 1-4 ttStatus shows connection to old instance</p>
<p>This example shows a connection to an old instance of a database. This can occur when a database is invalidated, but some users have not disconnected from the invalidated copy of the database still in memory. After all users disconnect, the memory is automatically freed.</p>
<pre>C:\&gt;ttStatus

TimesTen status report as of Mon Aug  6 22:03:04 2012
Daemon pid 5088 port 17000 instance MYINSTANCE
TimesTen server pid 4344 started on port 17002
-----------------------------------------------------------------
Data store c:\temp\sample
There are no connections to the data store
Obsolete or not yet active connection(s):
Process  4696 context 0xd08800 name sample connid 1, obsolete connection, shmKey
&#39;Global\DBI45b94c6f.3.SHM.4&#39;
Replication policy : Manual
Cache agent policy : Manual
-----------------------------------------------------------------
End of report
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1367615"></a>
<div id="TTTRB129" class="sect1">
<h2 class="sect1">Using the logs generated by the TimesTen daemon</h2>
<p>The TimesTen daemon and its subdaemons and agents generate error, warning, and informational messages. These messages may be useful for TimesTen system administration and for debugging applications.</p>
<p>By default, informational messages are stored in:</p>
<ul>
<li>
<p>A <a id="sthref22"></a><a id="sthref23"></a>user error log that contains information you may need to be aware of, including actions you may need to take.</p>
</li>
<li>
<p>A <a id="sthref24"></a><a id="sthref25"></a>support log containing everything in the user error log plus information for use by TimesTen Customer Support.</p>
</li>
</ul>
<p>See <a class="olink TTOPR218" href="../TTOPR/daemon.htm#TTOPR218">&#34;Modifying informational messages&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for information about configuring the logs, including their location and size.</p>
<p>All message categories are enabled by default, but you can also disable or explicitly enable the following categories of user error log messages for all databases or specified databases through options of the <code>ttDaemonLog</code> utility:</p>
<ul>
<li>
<p><code>ALL</code> (default): For all messages</p>
</li>
<li>
<p><code>CACHE</code>: For messages from the cache agent, designated by <code>CAC</code></p>
</li>
<li>
<p><code>DAEMON</code>: For messages from the main daemon and subdaemons</p>
</li>
<li>
<p><code>DAEMONDBG</code>: For additional information from the main daemon and subdaemons.</p>
</li>
<li>
<p><code>REPLICATION</code>: For messages from the replication agent, designated by <code>REP</code></p>
</li>
<li>
<p><code>SERVER</code>: For messages from TimesTen Server.</p>
</li>
</ul>
<p>See <a class="olink TTREF338" href="../TTREF/util.htm#TTREF338">&#34;ttDaemonLog&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for information about <code>ttDaemonLog</code> options.</p>
</div>
<!-- class="sect1" -->
<a id="i1367634"></a>
<div id="TTTRB130" class="sect1">
<h2 class="sect1">Using the <a id="sthref26"></a>ttTraceMon utility</h2>
<p>Use the <code>ttTraceMon</code> utility to log various trace information on a number of TimesTen components. Each TimesTen component can be traced at different levels of detail. You can list all of the traceable TimesTen components and their current tracing level by specifying <code>ttTraceMon</code> with the <code>show</code> subcommand. The full list of options for <code>ttTraceMon</code> is described in the <a class="olink TTREF373" href="../TTREF/util.htm#TTREF373">&#34;ttTraceMon&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<p>TimesTen tracing severely impacts application performance and consumes a great deal of disk space if trace output is directed to a file. In addition, when using AWT cache groups, you must restart the replication agent when trying to trace the <code>ORACON</code> component with <code>ttTraceMon</code>. Use the <code>ttTraceMon</code> utility only when diagnosing problems. When you are finished, reset tracing to the default values.</p>
<div id="TTTRB131" class="example">
<p class="titleinexample"><a id="sthref27"></a>Example 1-5 Default trace levels for components</p>
<p>This example shows that the levels for most tracing components are set to level 0 (off) for the demo database. Both the <code>ERR</code> and <code>DEADLOCK</code> components are set to 1 for tracing by default. See <a href="#i1367951">&#34;ERR tracing&#34;</a>.</p>
<pre>% ttTraceMon -e show demo
AGING        ... 0
API          ... 0
ASYNCMV      ... 0
AUTOREFRESH  ... 0
CG           ... 0
CGRID        ... 0
CGRIDC       ... 0
CKPT         ... 0
DEADLOCK     ... 1
EE           ... 0
ERR          ... 1
FLOW         ... 0
HEAP         ... 0
LATCH        ... 0
LOCK         ... 0
LOG          ... 0
LOGF         ... 0
OPT          ... 0
ORACON       ... 0
PLOAD        ... 0
PT           ... 0
REPL         ... 0
SM           ... 0
SQL          ... 0
TEST         ... 0
TRACE        ... 0
XA           ... 0
XACT         ... 0
</pre>
<p>The output for most TimesTen components is of interest only to TimesTen technical support. However, the output for the <code>SQL</code>, <code>API</code>, <code>LOCK</code>, <code>ERR</code>, <code>AGING</code> and <code>AUTOREFRESH</code> components may be useful to you when you are troubleshooting application problems.</p>
<p>The rest of this section includes the following topics:</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p><a href="#i1367716">Starting a trace and reading the trace buffer</a></p>
</li>
<li>
<p><a href="#i1367751">SQL tracing</a></p>
</li>
<li>
<p><a href="#i1367818">API tracing</a></p>
</li>
<li>
<p><a href="#BABCEAFB">DEADLOCK tracing</a></p>
</li>
<li>
<p><a href="#i1367873">LOCK tracing</a></p>
</li>
<li>
<p><a href="#i1367951">ERR tracing</a></p>
</li>
<li>
<p><a href="#i1368021">AGING tracing</a></p>
</li>
<li>
<p><a href="#i1368116">AUTOREFRESH tracing</a></p>
</li>
</ul>
<a id="i1367716"></a>
<div id="TTTRB132" class="sect2">
<h3 class="sect2">Starting a trace and reading the trace buffer</h3>
<p>Start a new trace by specifying <code>ttTraceMon</code> <code><span class="codeinlineitalic">datastore</span></code>. For example, to start a trace on the <code>demo</code> database, enter:</p>
<pre>%  ttTraceMon demo
Trace monitor; empty line to exit
Trace &gt;
</pre>
<p>At the <code>Trace</code> prompt, specify the type of trace and its level. For example, to start tracing the <code>SQL</code> component at level 3, enter:</p>
<pre>Trace &gt; level sql 3
</pre>
<p>At this point you can run your application and the TimesTen trace information is written to a trace buffer. There are two ways to read the contents of the trace buffer:</p>
<ul>
<li>
<p>From the <code>Trace</code> prompt, use the <code>outfile</code> command to direct the trace buffer data to a file. You must do this before running your application. When writing tracing information to a file, new trace information is concatenated to the existing contents of the file.</p>
</li>
<li>
<p>From the <code>Trace</code> prompt, use the <code>dump</code> command to display the trace buffer data to your screen.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The contents of the trace buffer accumulate with each new trace. To clear the trace buffer, use the <code>flush</code> command from a <code>ttTraceMon</code> prompt. Clear the buffered trace records for a specific component by specifying the component with the <code>flush</code> command.</div>
<p>Each record from the <a id="sthref28"></a><a id="sthref29"></a>trace buffer has the following format:</p>
<pre><span class="italic">timestamp</span>   <span class="italic">sequence</span>   <span class="italic">component</span>   <span class="italic">level</span>   <span class="italic">connection</span>   <span class="italic">processid</span>
   <span class="italic">operation</span>
</pre>
<p>The fields in the records are defined as follows:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">timestamp</span></code> is the time at which the operation was executed.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">sequence</span></code> is the incremental number that identifies the trace line.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">component</span></code> is the TimesTen component being traced (such as <code>SQL</code>, <code>API</code>, <code>LOCK</code>, or <code>ERR</code>).</p>
</li>
<li>
<p><code><span class="codeinlineitalic">level</span></code> is the trace level associated with the trace line. The range of trace levels differs by component, but for all components, the lowest trace level generates the least verbose output and highest trace level generates the most verbose output. For example, if you are tracing <code>SQL</code> at level 4, your output includes lines for levels 2 (prepare), 3 (execute), and 4 (open, close, fetch).</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Trace levels for some components are not a continuous range of numbers. If you enter a number that does not correspond to a supported level for a component, tracing occurs at the highest supported level that is less than the number you entered. For example, if tracing levels for a component are 1, 2, 3, 4, and 6 and you enter 5, tracing events for level 1, 2, 3, and 4 are generated.</div>
<ul>
<li>
<p><code><span class="codeinlineitalic">connection</span></code> is the internal connection ID identifying the connection that generated the trace. This number corresponds to the <code>ConnID</code> shown in the <code>ttStatus</code> output. The connection ID is also used as the first element of the transaction ID.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">processid</span></code> is the operating system process ID for the process that generated the trace.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">operation</span></code> is the operation that occurred (such as SQL statement, API operation, or error message).</p>
</li>
</ul>
<p>For example, a line from the trace buffer after a SQL trace at level 3 might look like this:</p>
<pre>10:39:50.231 5281 SQL 2L 1C 3914P Preparing: select cust_num from customer
</pre></div>
<!-- class="sect2" -->
<a id="i1367751"></a>
<div id="TTTRB133" class="sect2">
<h3 class="sect2">SQL tracing</h3>
<p>Using <code>ttTraceMon</code> with the <a id="sthref30"></a><a id="sthref31"></a><a id="sthref32"></a><code>SQL</code> component provides information about the SQL being prepared or executed by the TimesTen engine. <a href="#g1393503">Table 1-1</a> describes the levels for SQL tracing. Each level with a &#39;+&#39; sign includes the trace information described for that level, plus all levels preceding it.</p>
<div id="TTTRB134" class="tblhruleformal">
<p class="titleintable"><a id="sthref33"></a><a id="g1393503"></a>Table 1-1 SQL tracing levels</p>
<table class="cellalignment2557" title="SQL tracing levels" summary="This table contains SQL tracing levels and the output associated with each level." dir="ltr">
<thead>
<tr class="cellalignment2551">
<th class="cellalignment2558" id="r1c1-t5">Level</th>
<th class="cellalignment2558" id="r1c2-t5">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r2c1-t5" headers="r1c1-t5">
<p>2</p>
</td>
<td class="cellalignment2559" headers="r2c1-t5 r1c2-t5">
<p>SQL commands being prepared</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r3c1-t5" headers="r1c1-t5">
<p>3</p>
</td>
<td class="cellalignment2559" headers="r3c1-t5 r1c2-t5">
<p>+ SQL commands being executed</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r4c1-t5" headers="r1c1-t5">
<p>4</p>
</td>
<td class="cellalignment2559" headers="r4c1-t5 r1c2-t5">
<p>+ The effect of command pooling (prepares not being done because the prepared command already exists in the pool), the need for reprepares (for example, because an index was created), and commands being destroyed</p>
<p>At this level, <code>ttTraceMon</code> also shows when a query command is being opened, fetched, and closed.</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r5c1-t5" headers="r1c1-t5">
<p>5</p>
</td>
<td class="cellalignment2559" headers="r5c1-t5 r1c2-t5">
<p>+ Some internal data, such as command numbers, which are not generally useful for customer-level debugging</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen recommends tracing SQL at level 3 or 4. SQL tracing does not show any information about the optimizer. Optimizer tracing is managed by a separate component (<code>OPT</code>) at level 4 only, and is not designed for customer use.</div>
<div id="TTTRB135" class="example">
<p class="titleinexample"><a id="sthref34"></a>Example 1-6 SQL trace</p>
<p>In this example, execute <code>ttTraceMon</code> to do a SQL trace at level 4 on the <code>demo</code> database. Direct the output from the SQL trace to the <code>SQLtrace.txt</code> file. Then flush the buffer so that the trace does not report past SQL statements.</p>
<pre>% ttTraceMon demo
Trace monitor; empty line to exit
Trace &gt; outfile SQLtrace.txt
Trace &gt; level sql 4
Trace &gt; flush
</pre>
<p>At this point, execute an application that includes the following SQL statement:</p>
<pre>SELECT * FROM departments WHERE department_id = 10;
</pre>
<p>The trace information is written to the <code>SQLtrace.txt</code> file:</p>
<pre>12:19:36.582     269 SQL      2L    3C  29570P Preparing: select * from 
departments where department_id = 10
12:19:36.583     270 SQL      4L    3C  29570P sbSqlCmdCompile ()(E): (Found 
already compiled version: refCount:01, bucket:28) cmdType:100, cmdNum:1000146.
12:19:36.583     271 SQL      4L    3C  29570P Opening: select * from departments
where department_id = 10;
12:19:36.583     272 SQL      4L    3C  29570P Fetching: select * from 
departments where department_id = 10;
12:19:36.583     273 SQL      4L    3C  29570P Closing: select * from departments
where department_id = 10;
5 records dumped
</pre>
<p>When the application has completed, turn off SQL tracing and exit <code>ttTraceMon</code>.</p>
<pre>Trace &gt; level sql 0
Trace &gt; {press ENTER &ndash; blank line}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1367818"></a>
<div id="TTTRB136" class="sect2">
<h3 class="sect2">API tracing</h3>
<p>API traces are generated for database operations such as connecting to a database, changing a connection attribute, and committing a transaction<a id="sthref35"></a><a id="sthref36"></a><a id="sthref37"></a><a id="sthref38"></a><a id="sthref39"></a>. <a href="#g1393522">Table 1-2</a> describes the levels for API tracing. Each level with a &#39;+&#39; sign includes the trace information described for that level, plus all levels preceding it.</p>
<div id="TTTRB137" class="tblhruleformal">
<p class="titleintable"><a id="sthref40"></a><a id="g1393522"></a>Table 1-2 API tracing levels</p>
<table class="cellalignment2557" title="API tracing levels" summary="API tracing levels" dir="ltr">
<thead>
<tr class="cellalignment2551">
<th class="cellalignment2558" id="r1c1-t7">Level</th>
<th class="cellalignment2558" id="r1c2-t7">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r2c1-t7" headers="r1c1-t7">
<p>1</p>
</td>
<td class="cellalignment2559" headers="r2c1-t7 r1c2-t7">
<p>All rollback attempts by the subdaemon</p>
<p>This occurs if an application exits abruptly and the subdaemon recovers its connection.</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r3c1-t7" headers="r1c1-t7">
<p>2</p>
</td>
<td class="cellalignment2559" headers="r3c1-t7 r1c2-t7">
<p>+ Some low-on-space conditions</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r4c1-t7" headers="r1c1-t7">
<p>3</p>
</td>
<td class="cellalignment2559" headers="r4c1-t7 r1c2-t7">
<p>+ Create, connect, disconnect, checkpoint, backup, and compact operations for the database, as well as commit and rollback for each connection, and a few other operations</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r5c1-t7" headers="r1c1-t7">
<p>4</p>
</td>
<td class="cellalignment2559" headers="r5c1-t7 r1c2-t7">
<p>+ Most other operations conducted at TimesTen&#39;s internal API level</p>
<p>It does not show numerous operations on the storage manager and indexes that are done internally.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen recommends tracing at level 3.</div>
<div id="TTTRB138" class="example">
<p class="titleinexample"><a id="sthref41"></a>Example 1-7 API trace</p>
<p>In this example, execute <code>ttTraceMon</code> to do a API trace at level 3 on the <code>demo</code> database. The output from the API trace is written to the <code>APItrace.txt</code> file. Before saving the API trace to the buffer, use the <code>flush</code> command to empty the buffer.</p>
<pre>% ttTraceMon demo
Trace monitor; empty line to exit
Trace&gt; outfile APItrace.txt
Trace&gt; level api 3
Trace &gt; flush
</pre>
<p>At this point, execute the application. When the application has completed, turn off API tracing and exit <code>ttTraceMon</code>:</p>
<pre>Trace &gt; level api 0
Trace &gt; {press ENTER &ndash; blank line}
</pre>
<p>The contents of <code>APItrace.txt</code> are similar to the sample output shown below. The output shows connection to the database, setting the connection character set, setting the isolation level, and committing a transaction.</p>
<pre>11:54:26.796    1016 API      3L    2C   4848P sb_dbConnect()(X)
11:54:26.796    1017 API      3L    2C   4848P sb_dbConnCharsetSet()(E)
11:54:26.796    1018 API      3L    2C   4848P sb_dbConnSetIsoLevel()(E)
11:54:39.795    1019 API      3L    2C   4848P sb_dbConnSetIsoLevel()(E)
11:54:45.253    1020 API      3L    2C   4848P sb_xactCommitQ()(E)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABCEAFB"></a>
<div id="TTTRB339" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DEADLOCK tracing</h3>
<p>Use the <a id="sthref42"></a><a id="sthref43"></a><a id="sthref44"></a><code>DEADLOCK</code> component to trace the occurrences of deadlocks for all applications.</p>
<p><a href="#BABBCHCD">Table 1-3</a> describes the <code>DEADLOCK</code> tracing levels. Each level with a &#39;+&#39; sign includes the trace information described for that level, plus all levels preceding it.</p>
<div id="TTTRB340" class="tblhruleformal">
<p class="titleintable"><a id="sthref45"></a><a id="BABBCHCD"></a>Table 1-3 DEADLOCK tracing levels</p>
<table class="cellalignment2557" title="DEADLOCK tracing levels" summary="Lock tracing levels" dir="ltr">
<thead>
<tr class="cellalignment2551">
<th class="cellalignment2558" id="r1c1-t9">Level</th>
<th class="cellalignment2558" id="r1c2-t9">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r2c1-t9" headers="r1c1-t9">
<p>1</p>
</td>
<td class="cellalignment2559" headers="r2c1-t9 r1c2-t9">
<p>Deadlock cycles, logged as they are discovered</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r3c1-t9" headers="r1c1-t9">
<p>4, 6</p>
</td>
<td class="cellalignment2559" headers="r3c1-t9 r1c2-t9">
<p>+ Detailed information about how the deadlock is detected</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div id="TTTRB341" class="example">
<p class="titleinexample"><a id="sthref46"></a>Example 1-8 DEADLOCK trace</p>
<p>In this example, execute <code>ttTraceMon</code> to do a <code>DEADLOCK</code> trace at level 1, which is the default, on <code>myDSN</code> database.</p>
<p>Make two connections to <code>myDSN</code>. For the first connection, autocommit is on. Create table <code>test</code> and insert two rows. Then, set autocommit off and update the <code>x1=1</code> row of table <code>test</code>. Because autocommit is off, the row is not inserted into the table until the commit. A lock is held until the transaction is committed or rolled back.</p>
<pre>Command&gt; create table test (x1 int unique, y1 int);
Command&gt; insert into test values (1,1);
1 row inserted.
Command&gt; insert into test values (2,2);
1 row inserted.
Command&gt; autocommit 0;
Command&gt; update test set y1=y1 where x1=1;
1 row updated.
</pre>
<p>For the second connection to <code>myDSN</code>, autocommit is set to off. Update the <code>x1=2</code> row of table <code>test</code>.</p>
<pre>Command&gt; autocommit 0;
Command&gt; update test set y1=y1 where x1=2;1 row updated.
</pre>
<p>Now, create a deadlock situation by executing update statements in both connections for rows that are locked by each other. The first connection executes an update against the row where <code>x1=2</code>.</p>
<pre>Command&gt; update test set y1=y1 where x1=2;
 6003: Lock request denied because of time-out
Details: Tran 2.1 (pid 32750) wants Un lock on rowid BMUFVUAAAAaAAAAETk, 
table ME.TEST. But tran 3.2 (pid 32731) has it in Xn (request was Xn).
Holder SQL (update t1 set y1=y1 where x1=2)
The command failed.
</pre>
<p>The second connection executes an update against the row where <code>x1=1</code>.</p>
<pre>Command&gt; update test set y1=y1 where x1=1;
 6002: Lock request denied because of deadlock
Details: Tran 3.2 (pid 32731) wants Un lock on rowid BMUFVUAAAAaAAAADzk, 
table ME.TEST. But tran 2.1 (pid 32750) has it in Xn (request was Xn). 
Holder SQL (update t1 set y1=y1 where x1=1)
The command failed.
</pre>
<p>Use the <code>flush</code> command to empty the buffer.</p>
<pre>% ttTraceMon myDSN
Trace monitor; empty line to exit
Trace&gt; flush
</pre>
<p>The trace buffer contains the following information showing all level 1 deadlock traces, as evidenced by &#39;<code>1L</code>&#39;.</p>
<pre>Trace&gt; dump
09:50:26.444      13 DEADLOCK 1L 2036C   3484P edge 1: xid 3.2, cid 3, 
&lt;Row BMUFVUAAAAaAAAADzk,0x8c5
74(574836)&gt; 0 cnt=1 , Tbl &#39;T1&#39;, SQL=&#39;update t1 set y1=y1 where x1=1&#39;
09:50:26.455      14 DEADLOCK 1L 2036C   3484P edge 0: xid 2.1, cid 2, 
&lt;Row BMUFVUAAAAaAAAAETk,0x8c5
74(574836)&gt; 0 cnt=1 , Tbl &#39;T1&#39;, SQL=&#39;update t1 set y1=y1 where x1=2&#39;
09:50:26.455      15 DEADLOCK 1L 2036C   3484P Victim: xcb:3.2, 
SQL=&#39;update t1 set y1=y1 where x1=1&#39;
</pre>
<p>If you want more information, set <code>DEADLOCK</code> tracing to a higher value. For example, the following sets <code>DEADLOCK</code> tracing to level 4 in <code>ttTraceMon</code>:</p>
<pre>Trace &gt; level deadlock 4
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1367873"></a>
<div id="TTTRB139" class="sect2">
<h3 class="sect2">LOCK tracing</h3>
<p>Use the <a id="sthref47"></a><a id="sthref48"></a><a id="sthref49"></a><code>LOCK</code> component to trace the locking behavior of your application to detect trouble with deadlocks or lock waits. <code>LOCK</code> tracing generates a great deal of volume, so it is important to choose the appropriate level of tracing. Level 3, for example, begins to generate a large number of traces, as traces are written for fairly common events. Also, the traces themselves may be hard to read in places. If you cannot discern enough information, contact TimesTen technical support for more information.</p>
<p><a href="#g1393541">Table 1-4</a> describes the <code>LOCK</code> tracing levels. Each level with a &#39;+&#39; sign includes the trace information described for that level, plus all levels preceding it.</p>
<div id="TTTRB140" class="tblhruleformal">
<p class="titleintable"><a id="sthref50"></a><a id="g1393541"></a>Table 1-4 LOCK tracing levels</p>
<table class="cellalignment2557" title="LOCK tracing levels" summary="Lock tracing levels" dir="ltr">
<thead>
<tr class="cellalignment2551">
<th class="cellalignment2558" id="r1c1-t10">Level</th>
<th class="cellalignment2558" id="r1c2-t10">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r2c1-t10" headers="r1c1-t10">
<p>1</p>
</td>
<td class="cellalignment2559" headers="r2c1-t10 r1c2-t10">
<p>Deadlock cycles as they are discovered</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r3c1-t10" headers="r1c1-t10">
<p>2</p>
</td>
<td class="cellalignment2559" headers="r3c1-t10 r1c2-t10">
<p>+ Failures to grant locks for any reason</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r4c1-t10" headers="r1c1-t10">
<p>3</p>
</td>
<td class="cellalignment2559" headers="r4c1-t10 r1c2-t10">
<p>+ Lock waits (which may or may not be granted)</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r5c1-t10" headers="r1c1-t10">
<p>4</p>
</td>
<td class="cellalignment2559" headers="r5c1-t10 r1c2-t10">
<p>+ All lock grants/releases, some routine calls, and the mechanism of the deadlock detector</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r6c1-t10" headers="r1c1-t10">
<p>6</p>
</td>
<td class="cellalignment2559" headers="r6c1-t10 r1c2-t10">
<p>+ Each step in cycle traversal</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div id="TTTRB141" class="example">
<p class="titleinexample"><a id="sthref51"></a>Example 1-9 LOCK trace</p>
<p>In this example, execute <code>ttTraceMon</code> to do a <code>LOCK</code> trace at level 4 on <code>myDSN</code> database.</p>
<p>Make two connections to <code>myDSN</code>. For the first connection, set autocommit on. Create table <code>test</code> and insert three rows. Create a materialized view using table <code>test</code>.</p>
<p>Turn on tracing at level 4 and use the <code>flush</code> command to empty the buffer.</p>
<pre>% ttTraceMon myDSN
Trace monitor; empty line to exit
Trace&gt; level lock 4
Trace&gt; flush
</pre>
<p>For the second connection to <code>myDSN</code>, set autocommit off. Insert a row into table <code>test</code>. Because autocommit is off, the row is not inserted into the table until the commit. A lock is held until the transaction is committed or rolled back.</p>
<p>If the <code>dump</code> command is used to display the contents of the trace buffer, there are no records in the trace buffer:</p>
<pre>Trace&gt; dump
0 records dumped
</pre>
<p>From the first connection, try to drop the materialized view. The view cannot be dropped because there is a transaction that has not been committed or rolled back:</p>
<pre>Command&gt; drop materialized view v;
 6003: Lock request denied because of time-out
Details: Tran 3.71 (pid 24524) wants Sn lock on table TTUSER.TEST. But tran 1.42 
(pid 24263) has it in IXn (request was IXn). Holder SQL (insert into test 
values (100);)
The command failed.
</pre>
<p>The trace buffer contains the following information:</p>
<pre>Trace&gt; dump
20:09:04.789  174759 LOCK     3L    3C  24524P ENQ: xcb:00003 &lt;Tbl 0x9b894,0x0&gt;
0+Sn=&gt;SL activity 0 Sn cnt=0; Holder xcb:00001 IXn
20:09:04.789  174760 LOCK     3L    3C  24524P Connection 3 scheduled for sleep
20:09:04.789  174761 LOCK     3L    3C  24524P Connection 3 sleeping
20:09:14.871  174762 LOCK     3L 2047C  24237P Connection 3 timed out
20:09:14.871  174763 LOCK     3L 2047C  24237P Connection 3 woken up
20:09:14.871  174764 LOCK     3L    3C  24524P Connection 3 awake
20:09:14.871  174765 LOCK     2L    3C  24524P ENQ: xcb:00003 &lt;Tbl 0x9b894,0x0&gt;
0+Sn=&gt;TM activity 0 Sn cnt=1; Holder xcb:00001 IXn
7 records dumped
</pre>
<p>When finished with the trace, set <code>LOCK</code> tracing back to its default setting (0) and exit <code>ttTraceMon</code>:</p>
<pre>Trace &gt; level lock 0
Trace &gt; {press ENTER &ndash; blank line}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1367951"></a>
<div id="TTTRB142" class="sect2">
<h3 class="sect2">ERR tracing</h3>
<p>It may be useful to trace the <a id="sthref52"></a><a id="sthref53"></a><a id="sthref54"></a><code>ERR</code> component. For example, an <code>ERR</code> trace at level 4 shows all of the error messages that are pushed in the TimesTen direct driver (not all errors are output to the user because they are handled internally). <code>ERR</code> tracing at level 1 is the default. No output is written for <code>ERR</code> tracing at level 2 and 3.</p>
<p><a href="#g1393563">Table 1-5</a> describes <code>ERR</code> tracing levels. Each level with a &#39;+&#39; sign includes the trace information described for that level, plus all levels preceding it.</p>
<div id="TTTRB143" class="tblhruleformal">
<p class="titleintable"><a id="sthref55"></a><a id="g1393563"></a>Table 1-5 ERR tracing levels</p>
<table class="cellalignment2557" title="ERR tracing levels" summary="ERR tracing levels" dir="ltr">
<thead>
<tr class="cellalignment2551">
<th class="cellalignment2558" id="r1c1-t11">Level</th>
<th class="cellalignment2558" id="r1c2-t11">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r2c1-t11" headers="r1c1-t11">
<p>1 (set by default)</p>
</td>
<td class="cellalignment2559" headers="r2c1-t11 r1c2-t11">
<p>Fatal errors</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r3c1-t11" headers="r1c1-t11">
<p>4</p>
</td>
<td class="cellalignment2559" headers="r3c1-t11 r1c2-t11">
<p>+ All other error messages, many of which are handled internally by TimesTen</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div id="TTTRB144" class="example">
<p class="titleinexample"><a id="sthref56"></a>Example 1-10 ERR trace</p>
<p>In this example, execute <code>ttTraceMon</code> to do a <code>ERR</code> trace at level 4 on <code>myDSN</code> database.</p>
<p>First, create a table:</p>
<pre>Command&gt; create table test (id tt_integer);
</pre>
<p>Next, turn on tracing at level 4. Rather than direct the trace output to a file as in the previous examples, read it directly from the trace buffer. Before saving the <code>ERR</code> trace to the buffer, use the <code>flush</code> command to empty the buffer.</p>
<pre>% ttTraceMon myDSN
Trace monitor; empty line to exit
Trace&gt; level err 4
Trace&gt; flush
</pre>
<p>Now execute a SQL script with three errors in it. The errors are:</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p>Creating a table with the same name as an existing table</p>
</li>
<li>
<p>Using incorrect syntax to insert values into the table</p>
</li>
<li>
<p>Inserting <code>CHAR</code> data into a <code>TT_INTEGER</code> column</p>
</li>
</ul>
<pre>Command&gt; create table test (id tt_integer);
 2207: Table TEST already exists
The command failed.
Command&gt; insert into test values &#39;abcd&#39;);
 1001: Syntax error in SQL statement before or at: &#34;&#39;abcd&#39;&#34;, character position:
 25
insert into test values &#39;abcd&#39;);
                        ^^^^^^
The command failed.
Command&gt; insert into test values (&#39;abcd&#39;);
 2609: Incompatible types found in expression
The command failed.
</pre>
<p>The trace information is written to the trace buffer. Display it by using the <code>dump</code> command.</p>
<pre>Trace&gt; dump
19:28:40.465  174227 ERR      4L    1C  24263P TT2207: Table TEST already exists
 -- file &#34;eeDDL.c&#34;, lineno 2930, procedure &#34;sbEeCrDtblEval()&#34;
19:28:51.399  174228 ERR      4L    1C  24263P TT1001: Syntax error in SQL 
statement before or at: &#34;&#39;abcd&#39;&#34;, character position: 25
insert into test values &#39;abcd&#39;);
                        ^^^^^^
 -- file &#34;ptSqlY.y&#34;, lineno 6273, procedure &#34;reserved_word_or_syntax_error&#34;
19:29:00.725  174229 ERR      4L    1C  24263P TT2609: Incompatible types found
in expression -- file &#34;saCanon.c&#34;, lineno 12618, procedure &#34;sbPtAdjustType()&#34;
3 records dumped
</pre>
<p>Set ERR tracing back to its default setting (1) and exit <code>ttTraceMon</code>:</p>
<pre>Trace &gt; level err 1
Trace &gt; {press ENTER &ndash; blank line}
</pre></div>
<!-- class="sect2" -->
<a id="i1368021"></a>
<div id="TTTRB145" class="sect2">
<h3 class="sect2">AGING tracing</h3>
<p>Use <a id="sthref57"></a><a id="sthref58"></a><a id="sthref59"></a>the <code>ttTraceMon</code> utility to obtain the following information:</p>
<ul>
<li>
<p>When aging starts and ends</p>
</li>
<li>
<p>How many rows have been deleted by the aging subdaemon</p>
</li>
</ul>
<p>See <a class="olink TTOPR348" href="../TTOPR/comp.htm#TTOPR348">&#34;Implementing aging in your tables&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<p><a href="#g1393576">Table 1-6</a> describes the <code>AGING</code> tracing levels. Each level with a &#39;+&#39; sign includes the trace information described for that level, plus all levels preceding it.</p>
<div id="TTTRB146" class="tblhruleformal">
<p class="titleintable"><a id="sthref60"></a><a id="g1393576"></a>Table 1-6 AGING tracing levels</p>
<table class="cellalignment2557" title="AGING tracing levels" summary="AGING tracing levels" dir="ltr">
<thead>
<tr class="cellalignment2551">
<th class="cellalignment2558" id="r1c1-t12">Level</th>
<th class="cellalignment2558" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r2c1-t12" headers="r1c1-t12">
<p>1</p>
</td>
<td class="cellalignment2559" headers="r2c1-t12 r1c2-t12">
<p>Messages about the following events:</p>
<ul>
<li>
<p>The aging subdaemon starts least recently used (LRU) or time-based aging.</p>
</li>
<li>
<p>The aging subdaemon repeats LRU aging because the LRU threshold was not met.</p>
</li>
<li>
<p>The aging subdaemon ends LRU or time-based aging.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r3c1-t12" headers="r1c1-t12">
<p>2</p>
</td>
<td class="cellalignment2559" headers="r3c1-t12 r1c2-t12">
<p>+ Messages about the following events <span class="italic">for each table</span>:</p>
<ul>
<li>
<p>Aging has started.</p>
</li>
<li>
<p>Aging has ended. The message includes the reason for ending and the total number of rows deleted.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r4c1-t12" headers="r1c1-t12">
<p>3</p>
</td>
<td class="cellalignment2559" headers="r4c1-t12 r1c2-t12">
<p>+ Detailed report on how many rows were deleted during each aging cycle</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r5c1-t12" headers="r1c1-t12">
<p>4</p>
</td>
<td class="cellalignment2559" headers="r5c1-t12 r1c2-t12">
<p>+ Message every time the aging subdaemon wakes up</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div id="TTTRB147" class="example">
<p class="titleinexample"><a id="sthref61"></a>Example 1-11 AGING trace</p>
<p>In this example, execute <code>ttTraceMon</code> to do an <code>AGING</code> trace on <code>myDSN</code> database. The database contains <code>TTUSER.MYTAB</code> table, which has a time-based aging policy. The table is described as follows:</p>
<pre>Command&gt; describe TTUSER.MYTAB;

Table TTUSER.MYTAB:
  Columns:
   *ID                              TT_INTEGER NOT NULL
    TS                              TIMESTAMP (6) NOT NULL
  Aging use TS lifetime 3 minutes cycle 1 minute on

1 table found.
(primary key columns are indicated with *)
</pre>
<p>The table contains the following rows before the aging cycle begins:</p>
<pre>Command&gt; select * from TTUSER.MYTAB;
&lt; 1, 2007-03-21 12:54:06.000000 &gt;
&lt; 3, 2010-03-17 08:00:00.000000 &gt;
&lt; 4, 2007-03-21 12:59:40.000000 &gt;
&lt; 5, 2007-03-21 13:00:10.000000 &gt;
&lt; 6, 2007-03-21 13:01:22.000000 &gt;
5 rows found.
</pre>
<p>Execute <code>ttTraceMon</code> to do an <code>AGING</code> trace at level 3. Rather than direct the trace output to a file, read it directly from the trace buffer. Before saving the <code>AGING</code> trace to the buffer, use the <code>flush</code> command to empty the buffer.</p>
<pre>% ttTraceMon myDSN
Trace monitor; empty line to exit
Trace&gt; level aging 3
Trace&gt; flush
</pre>
<p>Display the trace information in the buffer by using the <code>dump</code> command.</p>
<pre>Trace&gt; dump
13:16:56.802    1247 AGING    1L 2045C  17373P Entering sbAgingTB(): curTime=78
13:16:56.803    1248 AGING    2L 2045C  17373P Entering sbAgingOneTable(): 
curTime=78, ltblid= 637140
13:16:56.804    1249 AGING    3L 2045C  17373P curTime=78, 4 deleted, 1 
remaining, tbl = TTUSER.MYTAB
13:16:56.804    1250 AGING    2L 2045C  17373P Exiting sbAgingOneTable(): 
curTime=78, reason = &#39;no more rows&#39;, 4 deleted, 1 remaining, tbl = TTUSER.MYTAB
13:16:56.804    1251 AGING    1L 2045C  17373P Exiting sbAgingTB(): curTime=78
5 records dumped
</pre>
<p>Set <code>AGING</code> tracing back to its default setting (0) and exit <code>ttTraceMon</code>:</p>
<pre>Trace &gt; level aging 0
Trace &gt; {press ENTER &ndash; blank line}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1368116"></a>
<div id="TTTRB148" class="sect2">
<h3 class="sect2">AUTOREFRESH tracing</h3>
<p>Use the <code>ttTraceMon</code> <a id="sthref62"></a><a id="sthref63"></a><a id="sthref64"></a>utility to obtain information about the progress of autorefresh operations for cache groups with the <code>AUTOREFRESH</code> cache group attribute.</p>
<p>See <a class="olink TTCAC236" href="../TTCAC/define.htm#TTCAC236">&#34;AUTOREFRESH cache group attribute&#34;</a> in the <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
<p><a href="#g1393594">Table 1-7</a> describes <code>AUTOREFRESH</code> tracing levels. Each level with a &#39;+&#39; sign includes the trace information described for that level, plus all levels preceding it.</p>
<div id="TTTRB149" class="tblhruleformal">
<p class="titleintable"><a id="sthref65"></a><a id="g1393594"></a>Table 1-7 AUTOREFRESH tracing levels</p>
<table class="cellalignment2557" title="AUTOREFRESH tracing levels" summary="AUTOREFRESH tracing levels" dir="ltr">
<thead>
<tr class="cellalignment2551">
<th class="cellalignment2558" id="r1c1-t13">Level</th>
<th class="cellalignment2558" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r2c1-t13" headers="r1c1-t13">
<p>1</p>
</td>
<td class="cellalignment2559" headers="r2c1-t13 r1c2-t13">
<p>Autorefresh summary for the interval:</p>
<ul>
<li>
<p>The time that autorefresh started</p>
</li>
<li>
<p>Number of autorefreshed rows for the interval</p>
</li>
<li>
<p>Number of autorefreshed root table rows for interval</p>
</li>
<li>
<p>Total number of autorefreshed rows since the cache agent started</p>
</li>
<li>
<p>Total number of autorefreshed rows in the root table since the cache agent started</p>
</li>
<li>
<p>The time that autorefresh ended</p>
</li>
</ul>
<p><span class="bold">Note</span>: Times and information about root table rows are reported for full autorefresh.</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r3c1-t13" headers="r1c1-t13">
<p>2</p>
</td>
<td class="cellalignment2559" headers="r3c1-t13 r1c2-t13">
<p>+ Autorefresh summary at the cache group level:</p>
<ul>
<li>
<p>The time that autorefresh started for each cache group</p>
</li>
<li>
<p>Number of autorefreshed rows for each cache group</p>
</li>
<li>
<p>Number of autorefreshed root table rows for each cache group</p>
</li>
<li>
<p>Total number of autorefreshed rows for each cache group since the cache agent started</p>
</li>
<li>
<p>Total number of autorefreshed rows in the root table for each cache group since the cache agent started</p>
</li>
<li>
<p>The time that autorefresh ended for each cache group</p>
</li>
</ul>
<p><span class="bold">Note</span>: Times and information about root table rows are reported for full autorefresh.</p>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r4c1-t13" headers="r1c1-t13">
<p>3</p>
</td>
<td class="cellalignment2559" headers="r4c1-t13 r1c2-t13">
<p>+ Autorefresh summary at the table level:</p>
<ul>
<li>
<p>The time that autorefresh started</p>
</li>
<li>
<p>Number of autorefreshed rows</p>
</li>
<li>
<p>Total number of autorefreshed rows since the cache agent started</p>
</li>
<li>
<p>The time that autorefresh ended</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2551">
<td class="cellalignment2559" id="r5c1-t13" headers="r1c1-t13">
<p>4</p>
</td>
<td class="cellalignment2559" headers="r5c1-t13 r1c2-t13">
<p>+ Autorefresh details for each table:</p>
<ul>
<li>
<p>The time that autorefresh started for each table</p>
</li>
<li>
<p>The autorefresh query</p>
</li>
<li>
<p>Query execute time in milliseconds on the Oracle database</p>
</li>
<li>
<p>Query fetch time in milliseconds on the Oracle database</p>
</li>
<li>
<p>Query apply time in milliseconds on TimesTen</p>
</li>
<li>
<p>Query execute time in milliseconds on the Oracle database for child tables</p>
</li>
<li>
<p>Query fetch time in milliseconds on the Oracle database for child tables</p>
</li>
<li>
<p>Query apply time in milliseconds on TimesTen for child tables</p>
</li>
<li>
<p>The time that autorefresh ended for each table</p>
</li>
<li>
<p>The autorefresh bookmark (<code>logseq</code>) to which autorefresh was completed</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div id="TTTRB150" class="example">
<p class="titleinexample"><a id="sthref66"></a>Example 1-12 AUTOREFRESH trace</p>
<p>In this example, use the <code>ttTraceMon</code> utility to trace autorefresh operations on the <code>cgDSN</code> database. When the trace level is set to 1, the displayed information is similar to the output of the <code>ttCacheAutorefreshStatsGet</code> built-in procedure.</p>
<pre>% tttracemon cgDSN
Trace monitor; empty line to exit
Trace&gt; level autorefresh 1
Trace&gt; dump

08:56:57.445 19398 AUTOREFRESH 1L 5C 32246P Autorefresh number 1415 started 
for interval 60000
08:56:57.883 19419 AUTOREFRESH 1L 5C 32246P Duration For Interval 60000ms: 420
08:56:57.883 19420 AUTOREFRESH 1L 5C 32246P Num Rows For Interval 60000ms: 0
08:56:57.883 19421 AUTOREFRESH 1L 5C 32246P Num Root Rows For Interval 
60000ms: 0
08:56:57.883 19422 AUTOREFRESH 1L 5C 32246P Cumulative Rows for Interval 
60000ms: 11587
08:56:57.883 19423 AUTOREFRESH 1L 5C 32246P Cumulative Root Rows for Interval 60000ms: 1697
08:56:57.883 19424 AUTOREFRESH 1L 5C 32246P Autorefresh number 1415 ended for 
interval 60000ms successfully.
7 records dumped
</pre>
<p>Tracing at level 4 produces additional information about autorefresh operation 1415. Information about autorefresh is provided for the <code>testuser.readcache</code> cache group, the <code>testuser.readtab</code> root table and the autorefresh interval.</p>
<pre>Trace&gt; level autorefresh 4
Trace&gt; dump

08:56:57.445 19398 AUTOREFRESH 1L 5C 32246P Autorefresh number 1415 started for 
interval 60000
08:56:57.471 19399 AUTOREFRESH 2L 5C 32246P Autorefresh started for cachegroup 
TESTUSER.READCACHE
08:56:57.471 19400 AUTOREFRESH 3L 5C 32246P Incremental autorefresh started for 
table TESTUSER.READTAB
08:56:57.471 19401 AUTOREFRESH 4L 5C 32246P Autorefresh Query: SELECT L.&#34;COL_10&#34;, 
X.&#34;COL_20&#34;, X.ft$NotDelete, Z.rowid FROM (SELECT DISTINCT &#34;COL_10&#34; FROM 
&#34;TESTUSER&#34;.&#34;TT_06_454854_L&#34; WHERE logseq &gt;:logseq AND ft_cacheGroup &lt;&gt; 
100000000000*1844259679+-299200618) L,(SELECT &#34;TESTUSER&#34;.&#34;READTAB&#34;.&#34;COL_10&#34;, 
&#34;TESTUSER&#34;.&#34;READTAB&#34;.&#34;COL_20&#34;, 1 AS ft$NotDelete  FROM &#34;TESTUSER&#34;.&#34;READTAB&#34;, 
&#34;TESTUSER&#34;.&#34;T1&#34; WHERE &#34;TESTUSER&#34;.&#34;READTAB&#34;.&#34;COL_10&#34; = &#34;TESTUSER&#34;.&#34;T1&#34;.&#34;COL_10&#34;) 
X, &#34;TESTUSER&#34;.&#34;READTAB&#34; Z WHERE L .&#34;COL_10&#34; = X.&#34;COL_10&#34; (+) AND X.&#34;COL_10&#34; = 
Z.&#34;COL_10&#34; (+), logseq: 7
08:56:57.870 19402 AUTOREFRESH 3L 5C 32246P Duration for table 
TESTUSER.READTAB: 70
08:56:57.870 19403 AUTOREFRESH 3L 5C 32246P Num Rows for table 
TESTUSER.READTAB: 1
08:56:57.870 19404 AUTOREFRESH 3L 5C 32246P Cumulative rows for table 
TESTUSER.READTAB: 1559
08:56:57.870 19405 AUTOREFRESH 4L 5C 32246P Autorefresh Query Execute duration 
for table TESTUSER.READTAB: 60
08:56:57.870 19406 AUTOREFRESH 4L 5C 32246P Autorefresh Query Fetch duration for 
table TESTUSER.READTAB: 0
08:56:57.870 19407 AUTOREFRESH 4L 5C 32246P Autorefresh Query Apply duration for 
table TESTUSER.READTAB: 0
08:56:57.870 19408 AUTOREFRESH 4L 5C 32246P Max logseq applied for table 
TESTUSER.READTAB: 8
08:56:57.870 19409 AUTOREFRESH 4L 5C 32246P Autorefresh Query Execute duration 
for 7 child(ren) table(s): 32
08:56:57.870 19410 AUTOREFRESH 4L 5C 32246P Autorefresh Query Fetch duration for 
7 child(ren) table(s): 0
08:56:57.870 19411 AUTOREFRESH 4L 5C 32246P Autorefresh Query Apply duration for 
7 child(ren) table(s): 0
08:56:57.870 19412 AUTOREFRESH 3L 5C  32246P Incremental autorefresh ended for 
table TESTUSER.READTAB
08:56:57.872 19413 AUTOREFRESH 2L 5C 32246P Duration For Cache Group 
TESTUSER.READCACHE: 1020
08:56:57.872 19414 AUTOREFRESH 2L 5C 32246P Num Rows For Cache Group 
TESTUSER.READCACHE: 1
08:56:57.872 19415 AUTOREFRESH 2L 5C 32246P Num Root Rows For Cache Group 
TESTUSER.READCACHE: 0
08:56:57.872 19416 AUTOREFRESH 2L 5C 32246P Cumulative Rows for Cache Group 
TESTUSER.READCACHE: 11776
08:56:57.872 19417 AUTOREFRESH 2L 5C 32246P Cumulative Root Rows for Cache Group 
TESTUSER.READCACHE: 1697
08:56:57.872 19418 AUTOREFRESH 2L 5C 32246P Autorefresh ended for cache group 
TESTUSER.READCACHE
08:56:57.883 19419 AUTOREFRESH 1L 5C 32246P Duration For Interval 60000ms: 420
08:56:57.883 19420 AUTOREFRESH 1L 5C 32246P Num Rows For Interval 60000ms: 0
08:56:57.883 19421 AUTOREFRESH 1L 5C 32246P Num Root Rows For Interval 
60000ms: 0
08:56:57.883 19422 AUTOREFRESH 1L 5C 32246P Cumulative Rows for Interval 
60000ms: 11587
08:56:57.883 19423 AUTOREFRESH 1L 5C 32246P Cumulative Root Rows for Interval 
60000ms: 1697
08:56:57.883 19424 AUTOREFRESH 1L 5C 32246P Autorefresh number 1415 ended for 
interval 60000ms successfully.
27 records dumped
</pre>
<p>Set <code>AUTOREFRESH</code> tracing back to its default setting (0) and exit <code>ttTraceMon</code>:</p>
<pre>Trace &gt; level autorefresh 0
Trace &gt; {press ENTER &ndash; blank line}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1368246"></a>
<div id="TTTRB151" class="sect1">
<h2 class="sect1">Using the ttXactAdmin utility</h2>
<p>The <a id="sthref67"></a><code>ttXactAdmin</code> utility displays ownership, status, log and lock information for each outstanding transaction. You can also use it to show all current connections to a database. The <code>ttXactAdmin</code> utility is useful for troubleshooting problems with replication, XLA, and asynchronous writethrough cache groups.</p>
<div id="TTTRB152" class="example">
<p class="titleinexample"><a id="sthref68"></a>Example 1-13 Using ttXactAdmin to diagnose a lock timeout</p>
<p>Use <code>ttXactAdmin</code> to diagnose a <a id="sthref69"></a>lock timeout. Consider two connections that are trying to update the same row. The following transaction by Connection 1 is in progress:</p>
<pre>UPDATE table1 SET c1 = 2 WHERE c1 = 1;
</pre>
<p>Connection 2 attempts to make the following update:</p>
<pre>UPDATE table1 SET c1 = 3 WHERE c1 = 1;
</pre>
<p>Connection 2 receives the following error:</p>
<pre>6003: Lock request denied because of time-out
  Details: Tran 2.3 (pid 2880) wants Un lock on rowid 0x00156bbc, table
 TTUSER.TABLE1.
  But tran 1.21 (pid 2564) has it in Xn (request was Xn). Holder SQL 
(update table1 set c1 = 2 where c1 = 1;)
  The command failed.
</pre>
<p>The details of the error indicate that transaction 1.21 has a lock on row 0x00156bbc, the row that transaction 2.3 wants to update. <code>ttXactAdmin</code> displays this information in output that pertains to actions in the entire database:</p>
<pre>$ ttXactAdmin myDSN
2011-03-07 12:57:41.237
c:\datastore\myDSN
TimesTen Release 11.2.2.0.0

Outstanding locks

PID   Context   TransID  TransStatus  Resource   ResourceID   Mode Name

Program File Name: ttIsql

2564  0xeeb9a8  1.21     Active       Database   0x01312d00   IX
                                      Row        0x00156bbc   Xn   TTUSER.TABLE1
                                      Table      1910868      IXn  TTUSER.TABLE1

Program File Name: ttIsql

2880  0xeeb9a8  2.3      Active        Database   0x01312d00  IX
                                       Table      1910868     IXn  TTUSER.TABLE1
                                       Command    19972120    S

Awaiting locks

PID  Context   TransID Resource ResourceID  RMode HolderTransID HMode Name
2880 0xeeb9a8  2.3     Row      0x00156bbc  Un    1.21          Xn TTUSER.TABLE1

2 outstanding transactions found
</pre>
<p>See <a class="olink TTREF376" href="../TTREF/util.htm#TTREF376">&#34;ttXactAdmin&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1368309"></a>
<div id="TTTRB153" class="sect1">
<h2 class="sect1"><a id="sthref70"></a>Using ODBC tracing</h2>
<p><a id="sthref71"></a><a id="sthref72"></a><a id="sthref73"></a>On Windows, use the ODBC trace facility to verify the sequence and content of your commands. The ODBC trace facility works only if you have linked your application with the ODBC Driver Manager. Enable tracing by double-clicking <span class="bold">ODBC</span> in the Control Panel. This opens the ODBC Data Source Administrator. Choose the <span class="bold">Tracing</span> tab.</p>
<p>On UNIX platforms, ODBC tracing is available only when using a driver manager. To turn on tracing, set the <code>Trace</code> and <code>TraceFile</code> attributes.</p>
</div>
<!-- class="sect1" -->
<a id="i1368315"></a>
<div id="TTTRB154" class="sect1">
<h2 class="sect1">Using <a id="sthref74"></a>SNMP traps to detect events</h2>
<p>Network management software uses SNMP (Simple Network Management Protocol) to query or control the state of network devices such as routers and switches. These devices can generate alerts called <span class="italic">traps</span> to inform the network management systems of problems.</p>
<p>TimesTen sends SNMP traps for particular critical events to help facilitate user recovery mechanisms. These events are also recorded in the support log. Exposing them through SNMP traps enables network management software to take immediate action.</p>
<p>How to configure TimesTen to generate SNMP traps and how to receive the traps is described in <a class="olink TTERR138" href="../TTERR/snmp.htm#TTERR138">&#34;Diagnostics through SNMP Traps&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Error Messages and SNMP Traps</span>.</p>
</div>
<!-- class="sect1" -->
<a id="i1368331"></a>
<div id="TTTRB155" class="sect1">
<h2 class="sect1">Monitoring the TimesTen <a id="sthref75"></a><a id="sthref76"></a>system tables</h2>
<p>Each TimesTen database contains a group of system tables that store metadata about the current state of the database. The system tables are described in <a class="olink TTSYS346" href="../TTSYS/systemtables.htm#TTSYS346">&#34;System Tables&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can execute <code>SELECT</code> statements on a system table, but you cannot execute a statement such as <code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code> on these tables.</div>
<p>Use the system table <code>SYS.SYSTEMSTATS</code> to view database metrics. In addition, the <code>ttStats</code> utility enables you to monitor database metrics and to take and compare snapshots of metrics. For more information, see &#34;<a class="olink TTSYS439" href="../TTSYS/systemtables.htm#TTSYS439">SYS.SYSTEMSTATS</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span>, &#34;<a class="olink TTREF802" href="../TTREF/util.htm#TTREF802">ttStats</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>, and <a class="olink TTPLP71655" href="../TTPLP/t_stats.htm#TTPLP71655">&#34;TT_STATS&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Packages Reference</span>.</p>
<p>You can also view the <code>SYS.MONITOR</code> table, which contains statistics about certain events that have occurred since the first connection to the database. For example, the <code>SYS.MONITOR</code> table contains information about the number of connections to the database; the number of checkpoints taken; the size of the database; and the amount of memory currently in use. Check the contents of the <code>SYS.MONITOR</code> table by executing <code>SELECT</code> statements on the columns or by using the <code>ttIsql</code> <code>monitor</code> command. For an example of how to use the <code>ttIsql</code> <code>monitor</code> command, see <a class="olink TTOPR306" href="../TTOPR/ttisql.htm#TTOPR306">&#34;Using the ttIsql Utility&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</div>
<!-- class="sect1" -->
<a id="i1368407"></a>
<div id="TTTRB156" class="sect1">
<h2 class="sect1">Using the query optimizer</h2>
<p>The query optimizer is an important tool for performance tuning.</p>
<p>For details about using the query optimizer, see:</p>
<ul>
<li>
<p><a class="olink TTOPR512" href="../TTOPR/query.htm#TTOPR512">&#34;The TimesTen Query Optimizer&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span></p>
</li>
<li>
<p><a class="olink TTOPR322" href="../TTOPR/ttisql.htm#TTOPR322">&#34;Viewing and changing query optimizer plans&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span></p>
</li>
</ul>
<p>If you find that a given query runs more slowly than expected, confirm that the query optimizer has the latest statistics for the tables in your query, as described in <a href="datastore_trouble.htm#i1212897">&#34;Update query optimizer statistics&#34;</a>. If, after updating your statistics, your query still runs too slowly, it is possible that the TimesTen optimizer is not choosing the optimal query plan to answer that query. Under these circumstances, you can adjust how the optimizer generates a plan by using the <code>ttOpt</code> procedures described in <a class="olink TTOPR535" href="../TTOPR/query.htm#TTOPR535">&#34;Modifying plan generation&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>. You can also use statement level optimizer hints to influence the optimizer at the statement level. For more information, see &#34;<a class="olink TTSQL528" href="../TTSQL/state.htm#TTSQL528">Statement level optimizer hints</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span>.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2550">
<tr>
<td class="cellalignment2559">
<table class="cellalignment2555">
<tr>
<td class="cellalignment2554"><a href="whatsnew.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2554"><a href="datastore_trouble.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2011, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2561">
<table class="cellalignment2553">
<tr>
<td class="cellalignment2554"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2554"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2554"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2554"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2554"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2554"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>