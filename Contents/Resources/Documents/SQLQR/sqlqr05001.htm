<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-101994"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Syntax%20for%20Subclauses"></a><title>Syntax for Subclauses</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1091"/>
<meta name="dcterms.created" content="2017-03-16T17:26:50Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Quick Reference"/>
<meta name="dcterms.identifier" content="E49206-17"/>
<meta name="dcterms.isVersionOf" content="SQLQR"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="sqlqr05.htm" title="Previous" type="text/html"/>
<link rel="Next" href="sqlqr06.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49206-17.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/23</span> <!-- End Header --><a id="i110327"></a>
<div id="SQLQR533" class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><a id="sthref962"></a>Syntax for Subclauses</h1>
<p>The sections that follow show the syntax for each subclause found in:</p>
<ul>
<li>
<p><a href="sqlqr01.htm#g1000176">Chapter 1, &#34;SQL Statements&#34;</a></p>
</li>
<li>
<p><a href="sqlqr02.htm#g1002239">Chapter 2, &#34;SQL Functions&#34;</a></p>
</li>
<li>
<p><a href="sqlqr03.htm#g997148">Chapter 3, &#34;SQL Expressions&#34;</a></p>
</li>
<li>
<p><a href="sqlqr04.htm#g997627">Chapter 4, &#34;SQL Conditions&#34;</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for detailed information about Oracle SQL</div>
</li>
</ul>
<p class="subhead2"><a id="SQLQR1002"></a><span class="italic"><a id="sthref963"></a>action_audit_clause</span></p>
<pre dir="ltr">{ standard_actions | component_actions }...
</pre>
<p class="subhead2"><a id="SQLQR534"></a><span class="italic"><a id="sthref964"></a>activate_standby_db_clause</span></p>
<pre dir="ltr">ACTIVATE
     [ PHYSICAL | LOGICAL ]
     STANDBY DATABASE
     [ FINISH APPLY ]
</pre>
<p class="subhead2"><a id="SQLQR535"></a><span class="italic"><a id="sthref965"></a>add_binding_clause</span></p>
<pre dir="ltr">ADD BINDING
  (parameter_type [, parameter_type ]...)
  RETURN (return_type)
  [ implementation_clause ]
  using_function_clause
</pre>
<p class="subhead2"><a id="SQLQR536"></a><span class="italic"><a id="sthref966"></a>add_column_clause</span></p>
<pre dir="ltr">ADD
   ( {column_definition | virtual_column_definition
      [, column_definition | virtual_column_definition] ...
     } )
   [ column_properties ]
   [ ( out_of_line_part_storage [, out_of_line_part_storage]... ) ]
</pre>
<p class="subhead2"><a id="SQLQR537"></a><span class="italic"><a id="sthref967"></a>add_disk_clause</span></p>
<pre dir="ltr">ADD
  { [ QUORUM | REGULAR ] [ FAILGROUP failgroup_name ]
    DISK qualified_disk_clause [, qualified_disk_clause ]...
  }...
</pre>
<p class="subhead2"><a id="SQLQR538"></a><span class="italic"><a id="sthref968"></a>add_hash_index_partition</span></p>
<pre dir="ltr">ADD PARTITION
   [ partition_name ]
   [ TABLESPACE tablespace_name ]
   [ index_compression ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR539"></a><span class="italic"><a id="sthref969"></a>add_hash_partition_clause</span></p>
<pre dir="ltr">partitioning_storage_clause
[ update_index_clauses ]
[ parallel_clause ]
[ indexing_clause ]
</pre>
<p class="subhead2"><a id="SQLQR540"></a><span class="italic"><a id="sthref970"></a>add_hash_subpartition</span></p>
<pre dir="ltr">ADD individual_hash_subparts
   [ dependent_tables_clause ]
   [ update_index_clauses ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR541"></a><span class="italic"><a id="sthref971"></a>add_list_partition_clause</span></p>
<pre dir="ltr">list_values_clause
[ table_partition_description ]
[ ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subparts_by_quantity ]
[ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR542"></a><span class="italic"><a id="sthref972"></a>add_list_subpartition</span></p>
<pre dir="ltr">ADD list_subpartition_desc [, list_subpartition_desc ]...
[ dependent_tables_clause ] [ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR543"></a><span class="italic"><a id="sthref973"></a>add_logfile_clauses</span></p>
<pre dir="ltr">ADD [ STANDBY ] LOGFILE
   { 
     { [ INSTANCE &#39;instance_name&#39; ] | [ THREAD &#39;integer&#39; ] }
     [ GROUP integer ] redo_log_file_spec
       [, [ GROUP integer ] redo_log_file_spec ]...
   | MEMBER &#39;filename&#39; [ REUSE ] [, &#39;filename&#39; [ REUSE ] ]...
        TO logfile_descriptor [, logfile_descriptor ]...
   }
</pre>
<p class="subhead2"><a id="SQLQR544"></a><span class="italic"><a id="sthref974"></a>add_mv_log_column_clause</span></p>
<pre dir="ltr">ADD (column)
</pre>
<p class="subhead2"><a id="SQLQR545"></a><span class="italic"><a id="sthref975"></a>add_overflow_clause</span></p>
<pre dir="ltr">ADD OVERFLOW [ segment_attributes_clause ]
  [ ( PARTITION [ segment_attributes_clause ]
    [, PARTITION [ segment_attributes_clause ] ]...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR1003"></a><a id="sthref976"></a><span class="italic">add_period_clause</span></p>
<pre dir="ltr">ADD ( period_definition )
</pre>
<p class="subhead2"><a id="SQLQR546"></a><span class="italic"><a id="sthref977"></a>add_range_partition_clause</span></p>
<pre dir="ltr">range_values_clause
[ table_partition_description ]
[ ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subparts_by_quantity ]
[ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR547"></a><span class="italic"><a id="sthref978"></a>add_range_subpartition</span></p>
<pre dir="ltr">ADD range_subpartition_desc [, range_subpartition_desc ]...
[ dependent_tables_clause ] [ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR548"></a><span class="italic"><a id="sthref979"></a>add_system_partition_clause</span></p>
<pre dir="ltr">[table_partition_description]
[update_index_clauses]
</pre>
<p class="subhead2"><a id="SQLQR549"></a><span class="italic"><a id="sthref980"></a>add_table_partition</span></p>
<pre dir="ltr">ADD {
PARTITION [ partition ] add_range_partition_clause
  [, PARTITION [ partition ] add_range_partition_clause ]...
| PARTITION [ partition ] add_list_partition_clause
  [, PARTITION [ partition ] add_list_partition_clause ]...
| PARTITION [ partition ] add_system_partition_clause
  [, PARTITION [ partition ] add_system_partition_clause ]...
  [ BEFORE { partition_name | partition_number } ]
| PARTITION [ partition ] add_hash_partition_clause
} [ dependent_tables_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1004"></a><a id="sthref981"></a><span class="italic">add_update_secret</span></p>
<pre dir="ltr">{ ADD | UPDATE } SECRET &#39;secret&#39; FOR CLIENT &#39;client_identifier&#39;
  [ USING TAG &#39;tag&#39; ]
  IDENTIFIED BY keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR550"></a><span class="italic"><a id="sthref982"></a>add_volume_clause</span></p>
<pre dir="ltr">ADD VOLUME asm_volume SIZE size_clause [redundancy_clause]
  [ STRIPE_WIDTH integer {K | M} ]
  [ STRIPE_COLUMNS integer ]
  [ ATTRIBUTE (disk_region_clause) ]
</pre>
<p class="subhead2"><a id="SQLQR1173"></a><a id="sthref983"></a><span class="italic">advanced_index_compression</span></p>
<pre dir="ltr">COMPRESS ADVANCED LOW | NOCOMPRESS
</pre>
<p class="subhead2"><a id="SQLQR551"></a><span class="italic"><a id="sthref984"></a>alias_file_name</span></p>
<pre dir="ltr">+diskgroup_name [ (template_name) ] /alias_name
</pre>
<p class="subhead2"><a id="SQLQR552"></a><span class="italic"><a id="sthref985"></a>allocate_extent_clause</span></p>
<pre dir="ltr">ALLOCATE EXTENT
  [ ( { SIZE size_clause
      | DATAFILE &#39;filename&#39;
      | INSTANCE integer
      } ...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR1174"></a><a id="sthref986"></a><span class="italic">allow_disallow_clustering</span></p>
<pre dir="ltr">{ ALLOW | DISALLOW } CLUSTERING
</pre>
<p class="subhead2"><a id="SQLQR553"></a><span class="italic"><a id="sthref987"></a>alter_datafile_clause</span></p>
<pre dir="ltr">DATAFILE
   { &#39;filename&#39; | filenumber }
     [, &#39;filename&#39; | filenumber ]...
   }
   { ONLINE
   | OFFLINE [ FOR DROP ]
   | RESIZE size_clause
   | autoextend_clause
   | END BACKUP
   }
</pre>
<p class="subhead2"><a id="SQLQR554"></a><span class="italic"><a id="sthref988"></a>alter_external_table</span></p>
<pre dir="ltr">{ add_column_clause
| modify_column_clauses
| drop_column_clause
| parallel_clause
| external_data_properties
| REJECT LIMIT { integer | UNLIMITED }
| PROJECT COLUMN { ALL | REFERENCED }
}
  [ add_column_clause
  | modify_column_clauses
  | drop_column_clause
  | parallel_clause
  | external_data_properties
  | REJECT LIMIT { integer | UNLIMITED }
  | PROJECT COLUMN { ALL | REFERENCED }
  ]...
</pre>
<p class="subhead2"><a id="SQLQR555"></a><span class="italic"><a id="sthref989"></a>alter_index_partitioning</span></p>
<pre dir="ltr">{ modify_index_default_attrs
| add_hash_index_partition
| modify_index_partition
| rename_index_partition
| drop_index_partition
| split_index_partition
| coalesce_index_partition
| modify_index_subpartition
}
</pre>
<p class="subhead2"><a id="SQLQR556"></a><span class="italic"><a id="sthref990"></a>alter_interval_partitioning</span></p>
<pre dir="ltr">{ SET INTERVAL ( [ expr ] )
| SET STORE IN ( tablespace [, tablespace]... )
}
</pre>
<p class="subhead2"><a id="SQLQR557"></a><span class="italic"><a id="sthref991"></a>alter_iot_clauses</span></p>
<pre dir="ltr">{ index_org_table_clause
| alter_overflow_clause
| alter_mapping_table_clauses
| COALESCE
}
</pre>
<p class="subhead2"><a id="SQLQR1005"></a><span class="italic"><a id="sthref992"></a>alter_keystore_password</span></p>
<pre dir="ltr">ALTER KEYSTORE PASSWORD
  IDENTIFIED BY old_keystore_password
  SET new_keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR558"></a><span class="italic"><a id="sthref993"></a>alter_mapping_table_clauses</span></p>
<pre dir="ltr">MAPPING TABLE
  { allocate_extent_clause
  | deallocate_unused_clause
  }
</pre>
<p class="subhead2"><a id="SQLQR559"></a><span class="italic"><a id="sthref994"></a>alter_mv_refresh</span></p>
<pre dir="ltr">REFRESH
   { { FAST | COMPLETE | FORCE }
   | ON { DEMAND | COMMIT }
   | { START WITH | NEXT } date
   | WITH PRIMARY KEY
   | USING
        { DEFAULT MASTER ROLLBACK SEGMENT
        | MASTER ROLLBACK SEGMENT rollback_segment
        }
   | USING { ENFORCED | TRUSTED } CONSTRAINTS
   }
</pre>
<p class="subhead2"><a id="SQLQR560"></a><span class="italic"><a id="sthref995"></a>alter_overflow_clause</span></p>
<pre dir="ltr">{ add_overflow_clause
| OVERFLOW
     { segment_attributes_clause
     | allocate_extent_clause
     | shrink_clause
     | deallocate_unused_clause
     }...
}
</pre>
<p class="subhead2"><a id="SQLQR1006"></a><span class="italic"><a id="sthref996"></a>alter_query_rewrite_clause</span></p>
<pre dir="ltr">[ ENABLE | DISABLE ] QUERY REWRITE [ unusable_editions_clause ]
</pre>
<p class="subhead2"><a id="SQLQR561"></a><span class="italic"><a id="sthref997"></a>alter_session_set_clause</span></p>
<pre dir="ltr">SET { { parameter_name = parameter_value }...
    | EDITION = edition_name
    | CONTAINER = container_name
    | ROW ARCHIVAL VISIBILITY = { ACTIVE | ALL }
    }
</pre>
<p class="subhead2"><a id="SQLQR562"></a><span class="italic"><a id="sthref998"></a>alter_system_reset_clause</span></p>
<pre dir="ltr">parameter_name
   [ { SCOPE = SPFILE 
     | SID = { &#39;sid&#39; | &#39;*&#39; }
     }...
   ]
</pre>
<p class="subhead2"><a id="SQLQR563"></a><span class="italic"><a id="sthref999"></a>alter_system_set_clause</span></p>
<pre dir="ltr">{ set_parameter_clause
| USE_STORED_OUTLINES = (TRUE | FALSE | category_name)
| GLOBAL_TOPIC_ENABLED = (TRUE | FALSE)
}
</pre>
<p class="subhead2"><a id="SQLQR564"></a><span class="italic"><a id="sthref1000"></a>alter_table_partitioning</span></p>
<pre dir="ltr">{ modify_table_default_attrs
| alter_interval_partitioning
| set_subpartition_template
| modify_table_partition
| modify_table_subpartition
| move_table_partition
| move_table_subpartition
| add_table_partition
| coalesce_table_partition
| drop_table_partition
| drop_table_subpartition
| rename_partition_subpart
| truncate_partition_subpart
| split_table_partition
| split_table_subpartition
| merge_table_partitions
| merge_table_subpartitions
| exchange_partition_subpart
}
</pre>
<p class="subhead2"><a id="SQLQR565"></a><span class="italic"><a id="sthref1001"></a>alter_table_properties</span></p>
<pre dir="ltr">{ { { physical_attributes_clause
    | logging_clause
    | table_compression
    | inmemory_alter_table_clause
    | ilm_clause
    | supplemental_table_logging
    | allocate_extent_clause
    | deallocate_unused_clause
    | { CACHE | NOCACHE }
    | RESULT_CACHE ( MODE {DEFAULT | FORCE} )
    | upgrade_table_clause
    | records_per_block_clause
    | parallel_clause
    | row_movement_clause
    | flashback_archive_clause
    }...
  | RENAME TO new_table_name
  } [ alter_iot_clauses ] [ alter_XMLSchema_clause ]
| { shrink_clause
  | READ ONLY
  | READ WRITE
  | REKEY encryption_spec
  | [NO] ROW ARCHIVAL
  | ADD attribute_clustering_clause
  | MODIFY CLUSTERING [ clustering_when ] [ zonemap_clause ]
  | DROP CLUSTERING
  }
}
</pre>
<p class="subhead2"><a id="SQLQR566"></a><span class="italic"><a id="sthref1002"></a>alter_tempfile_clause</span></p>
<pre dir="ltr">TEMPFILE
   { &#39;filename&#39; [, &#39;filename&#39; ]...
   | filenumber [, filenumber ]...
   }
   { RESIZE size_clause
   | autoextend_clause
   | DROP [ INCLUDING DATAFILES ]
   | ONLINE
   | OFFLINE
   }
</pre>
<p class="subhead2"><a id="SQLQR567"></a><span class="italic"><a id="sthref1003"></a>alter_varray_col_properties</span></p>
<pre dir="ltr">MODIFY VARRAY varray_item
   ( modify_LOB_parameters )
</pre>
<p class="subhead2"><a id="SQLQR568"></a><span class="italic"><a id="sthref1004"></a>alter_XMLSchema_clause</span></p>
<pre dir="ltr">{ ALLOW ANYSCHEMA
| ALLOW NONSCHEMA
| DISALLOW NONSCHEMA
}
</pre>
<p class="subhead2"><a id="SQLQR1175"></a><a id="sthref1005"></a><span class="italic">alter_zonemap_attributes</span></p>
<pre dir="ltr">{ PCTFREE integer
| PCTUSED integer
| { CACHE | NOCACHE }
}...
</pre>
<p class="subhead2"><a id="SQLQR569"></a><span class="italic"><a id="sthref1006"></a>analytic_clause</span></p>
<pre dir="ltr">[ query_partition_clause ] [ order_by_clause [ windowing_clause ] ]
</pre>
<p class="subhead2"><a id="SQLQR570"></a><span class="italic"><a id="sthref1007"></a>archive_log_clause</span></p>
<pre dir="ltr">ARCHIVE LOG
   [  INSTANCE &#39;instance_name&#39; ]
   { { SEQUENCE integer
     | CHANGE integer
     | CURRENT [ NOSWITCH ]
     | GROUP integer
     | LOGFILE &#39;filename&#39;
          [ USING BACKUP CONTROLFILE ]
     | NEXT
     | ALL
     }
     [ TO &#39;location&#39; ]
   }
</pre>
<p class="subhead2"><a id="SQLQR571"></a><span class="italic"><a id="sthref1008"></a>array_DML_clause</span></p>
<pre dir="ltr">[ WITH | WITHOUT ]
ARRAY DML
[ ([ schema. ]type
   [, [ schema. ]varray_type ])
    [, ([ schema. ]type
        [, [ schema. ]varray_type ])...
]
</pre>
<p class="subhead2"><a id="SQLQR1146"></a><a id="sthref1009"></a><span class="italic">array_step</span></p>
<pre dir="ltr"><span class="bold">[</span> { integer | integer TO integer [, integer | integer TO integer ]... } | * <span class="bold">]</span>

Note: The outside square brackets shown in boldface type are part of the syntax.
      In this case, they do not represent optionality.
</pre>
<p class="subhead2"><a id="SQLQR572"></a><span class="italic"><a id="sthref1010"></a>ASM_filename</span></p>
<pre dir="ltr">{ fully_qualified_file_name
| numeric_file_name
| incomplete_file_name
| alias_file_name
}
</pre>
<p class="subhead2"><a id="SQLQR573"></a><span class="italic"><a id="sthref1011"></a>attribute_clause</span></p>
<pre dir="ltr">ATTRIBUTE level DETERMINES
   { dependent_column
   | ( dependent_column
       [, dependent_column ]... )
   }
</pre>
<p class="subhead2"><a id="SQLQR1176"></a><a id="sthref1012"></a><span class="italic">attribute_clustering_clause</span></p>
<pre dir="ltr">CLUSTERING [ clustering_join ] cluster_clause
           [ clustering_when ] [ zonemap_clause ]
</pre>
<p class="subhead2"><a id="SQLQR574"></a><span class="italic"><a id="sthref1013"></a>audit_operation_clause</span></p>
<pre dir="ltr">{ { sql_statement_shortcut
  | ALL
  | ALL STATEMENTS
  } [, { sql_statement_shortcut
       | ALL
       }
    ]
| { system_privilege
  | ALL PRIVILEGES
  } [, { system_privilege
       | ALL PRIVILEGES
       }
    ]
}
</pre>
<p class="subhead2"><a id="SQLQR575"></a><span class="italic"><a id="sthref1014"></a>audit_schema_object_clause</span></p>
<pre dir="ltr">{ sql_operation [, sql_operation ]
| ALL
} auditing_on_clause
</pre>
<p class="subhead2"><a id="SQLQR576"></a><span class="italic"><a id="sthref1015"></a>auditing_by_clause</span></p>
<pre dir="ltr">BY user [, user ]...
</pre>
<p class="subhead2"><a id="SQLQR577"></a><span class="italic"><a id="sthref1016"></a>auditing_on_clause</span></p>
<pre dir="ltr">ON { [ schema. ] object
   | DIRECTORY directory_name
   | MINING MODEL [ schema. ] model
   | SQL TRANSLATION PROFILE [ schema. ] profile
   | DEFAULT
   }
</pre>
<p class="subhead2"><a id="SQLQR578"></a><span class="italic"><a id="sthref1017"></a>autoextend_clause</span></p>
<pre dir="ltr">AUTOEXTEND
   { OFF
   | ON [ NEXT size_clause ]
        [ maxsize_clause ]
   }
</pre>
<p class="subhead2"><a id="SQLQR1007"></a><span class="italic"><a id="sthref1018"></a>backup_keystore</span></p>
<pre dir="ltr">BACKUP KEYSTORE [ USING &#39;backup_identifier&#39; ]
  IDENTIFIED BY keystore_password
  [ TO &#39;keystore_location&#39; ]
</pre>
<p class="subhead2"><a id="SQLQR579"></a><span class="italic"><a id="sthref1019"></a>binding_clause</span></p>
<pre dir="ltr">BINDING
   (parameter_type [, parameter_type ]...)
   RETURN return_type
   [ implementation_clause ]
   using_function_clause
    [, (parameter_type [, parameter_type ]...)
       RETURN return_type
       [ implementation_clause ]
       using_function_clause
    ]...
</pre>
<p class="subhead2"><a id="SQLQR580"></a><span class="italic"><a id="sthref1020"></a>bitmap_join_index_clause</span></p>
<pre dir="ltr">[ schema.]table
   ( [ [ schema. ]table. | t_alias. ]column
     [ ASC | DESC  ]
       [, [ [ schema. ]table. | t_alias. ]column
          [ ASC | DESC ]
       ]...
   )
   FROM [ schema. ]table [ t_alias ]
          [, [ schema. ]table [ t_alias ]
        ]...
   WHERE condition
      [ local_partitioned_index ] index_attributes
</pre>
<p class="subhead2"><a id="SQLQR581"></a><span class="italic"><a id="sthref1021"></a>build_clause</span></p>
<pre dir="ltr">BUILD { IMMEDIATE | DEFERRED }
</pre>
<p class="subhead2"><a id="SQLQR582"></a><span class="italic"><a id="sthref1022"></a>cell_assignment</span></p>
<pre dir="ltr">measure_column [ { { condition
                   | expr
                   | single_column_for_loop
                   }
                     [, { condition
                        | expr
                        | single_column_for_loop
                        }
                     ]...
                 | multi_column_for_loop
                 }
               ]

Note: The outer square brackets are part of the syntax.
      In this case, they do not indicate optionality.
</pre>
<p class="subhead2"><a id="SQLQR583"></a><span class="italic"><a id="sthref1023"></a>cell_reference_options</span></p>
<pre dir="ltr">[ { IGNORE | KEEP } NAV ]
[ UNIQUE { DIMENSION | SINGLE REFERENCE } ]
</pre>
<p class="subhead2"><a id="SQLQR584"></a><span class="italic"><a id="sthref1024"></a>character_set_clause</span></p>
<pre dir="ltr">CHARACTER SET character_set
</pre>
<p class="subhead2"><a id="SQLQR585"></a><span class="italic"><a id="sthref1025"></a>check_datafiles_clause</span></p>
<pre dir="ltr">CHECK DATAFILES [ GLOBAL | LOCAL ]
</pre>
<p class="subhead2"><a id="SQLQR586"></a><span class="italic"><a id="sthref1026"></a>check_diskgroup_clause</span></p>
<pre dir="ltr">CHECK [ REPAIR | NOREPAIR ]
</pre>
<p class="subhead2"><a id="SQLQR587"></a><span class="italic"><a id="sthref1027"></a>checkpoint_clause</span></p>
<pre dir="ltr">CHECKPOINT [ GLOBAL | LOCAL ]
</pre>
<p class="subhead2"><a id="SQLQR1008"></a><a id="sthref1028"></a><span class="italic">close_keystore</span></p>
<pre dir="ltr">SET KEYSTORE CLOSE
  [ IDENTIFIED BY keystore_password ]
  [ CONTAINER = { ALL | CURRENT } ]
</pre>
<p class="subhead2"><a id="SQLQR1177"></a><span class="italic"><a id="sthref1029"></a>cluster_clause</span></p>
<pre dir="ltr">BY [ LINEAR | INTERLEAVED ] ORDER clustering_columns
</pre>
<p class="subhead2"><a id="SQLQR588"></a><span class="italic"><a id="sthref1030"></a>cluster_index_clause</span></p>
<pre dir="ltr">CLUSTER [ schema. ] cluster index_attributes
</pre>
<p class="subhead2"><a id="SQLQR1147"></a><a id="sthref1031"></a><span class="italic">cluster_range_partitions</span></p>
<pre dir="ltr">PARTITION BY RANGE (column[, column ]...)
( PARTITION [ partition ]
    range_values_clause table_partition_description
      [, PARTITION [ partition ]
        range_values_clause table_partition_description
      ]...
)
</pre>
<p class="subhead2"><a id="SQLQR1178"></a><a id="sthref1032"></a><span class="italic">clustering_column_group</span></p>
<pre dir="ltr">( column [, column ]... )
</pre>
<p class="subhead2"><a id="SQLQR1179"></a><span class="italic"><a id="sthref1033"></a>clustering_columns</span></p>
<pre dir="ltr">clustering_column_group
| ( clustering_column_group [, clustering_column_group ]... )
</pre>
<p class="subhead2"><a id="SQLQR1180"></a><span class="italic"><a id="sthref1034"></a>clustering_join</span></p>
<pre dir="ltr">[ schema. ] table JOIN [ schema. ] table ON ( equijoin_condition )
                    [, JOIN [ schema. ] table ON ( equijoin_condition ) ]...
</pre>
<p class="subhead2"><a id="SQLQR1181"></a><a id="sthref1035"></a><span class="italic">clustering_when</span></p>
<pre dir="ltr">[ { YES | NO } ON LOAD ] [ { YES | NO } ON DATA MOVEMENT ]
</pre>
<p class="subhead2"><a id="SQLQR589"></a><span class="italic"><a id="sthref1036"></a>coalesce_index_partition</span></p>
<pre dir="ltr">COALESCE PARTITION [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR590"></a><span class="italic"><a id="sthref1037"></a>coalesce_table_partition</span></p>
<pre dir="ltr">COALESCE PARTITION
  [ update_index_clauses ]
  [ parallel_clause ]
  [ allow_disallow_clustering ]
</pre>
<p class="subhead2"><a id="SQLQR591"></a><span class="italic"><a id="sthref1038"></a>coalesce_table_subpartition</span></p>
<pre dir="ltr">COALESCE SUBPARTITION subpartition
  [update_index_clauses]
  [parallel_clause]
  [allow_disallow_clustering]
</pre>
<p class="subhead2"><a id="SQLQR592"></a><span class="italic"><a id="sthref1039"></a>column_association</span></p>
<pre dir="ltr">COLUMNS [ schema. ]table.column
          [, [ schema. ]table.column ]...
   using_statistics_type
</pre>
<p class="subhead2"><a id="SQLQR593"></a><a id="sthref1040"></a><span class="italic">column_clauses</span></p>
<pre dir="ltr">{ { add_column_clause
  | modify_column_clauses
  | drop_column_clause
  | add_period_clause
  | drop_period_clause
  }...
| rename_column_clause
| { modify_collection_retrieval }...
| { modify_LOB_storage_clause }...
| { alter_varray_col_properties }...
}
</pre>
<p class="subhead2"><a id="SQLQR594"></a><span class="italic"><a id="sthref1041"></a>column_definition</span></p>
<pre dir="ltr">column [ datatype ] [ SORT ] [ VISIBLE | INVISIBLE ]
  [ DEFAULT [ ON NULL ] expr | identity_clause ]
  [ ENCRYPT encryption_spec ]
  [ { inline_constraint }...
  | inline_ref_constraint
  ]
</pre>
<p class="subhead2"><a id="SQLQR595"></a><span class="italic"><a id="sthref1042"></a>column_properties</span></p>
<pre dir="ltr">{ object_type_col_properties
| nested_table_col_properties
| { varray_col_properties | LOB_storage_clause }
    [ (LOB_partition_storage [, LOB_partition_storage ]...) ]
| XMLType_column_properties
}...
</pre>
<p class="subhead2"><a id="SQLQR596"></a><span class="italic"><a id="sthref1043"></a>commit_switchover_clause</span></p>
<pre dir="ltr">{ PREPARE | COMMIT } TO SWITCHOVER
[ TO { { [ PHYSICAL | LOGICAL ] PRIMARY
     | [ PHYSICAL ] STANDBY
     } [ { WITH | WITHOUT } SESSION SHUTDOWN
         { WAIT | NOWAIT }
       ]
     | LOGICAL STANDBY
     }
| CANCEL
]
</pre>
<p class="subhead2"><a id="SQLQR1009"></a><a id="sthref1044"></a><span class="italic">component_actions</span></p>
<pre dir="ltr">ACTIONS COMPONENT =
  { DATAPUMP | DIRECT_LOAD | OLS | XS } component_action [, component_action ]...
  |
  DV component_action ON object_name [, component_action ON object_name ]...
</pre>
<p class="subhead2"><a id="SQLQR597"></a><span class="italic"><a id="sthref1045"></a>composite_hash_partitions</span></p>
<pre dir="ltr">PARTITION BY HASH (column [, column ] ...)
  { subpartition_by_range
  | subpartition_by_list
  | subpartition_by_hash
  }
  { individual_hash_partitions
  | hash_partitions_by_quantity
  }
</pre>
<p class="subhead2"><a id="SQLQR598"></a><span class="italic"><a id="sthref1046"></a>composite_list_partitions</span></p>
<pre dir="ltr">PARTITION BY LIST ( column )
  { subpartition_by_range
  | subpartition_by_list
  | subpartition_by_hash
  }
( list_partition_desc [, list_partition_desc]... )
</pre>
<p class="subhead2"><a id="SQLQR599"></a><span class="italic"><a id="sthref1047"></a>composite_range_partitions</span></p>
<pre dir="ltr">PARTITION BY RANGE ( column [, column]... )
  [ INTERVAL ( expr ) [ STORE IN ( tablespace [, tablespace]... ) ]]
  { subpartition_by_range
  | subpartition_by_list
  | subpartition_by_hash
  }
( range_partition_desc [, range_partition_desc]... )
</pre>
<p class="subhead2"><a id="SQLQR600"></a><span class="italic"><a id="sthref1048"></a>conditional_insert_clause</span></p>
<pre dir="ltr">[ ALL | FIRST ]
WHEN condition
THEN insert_into_clause
  [ values_clause ]
  [ error_logging_clause ]
  [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...
[ WHEN condition
  THEN insert_into_clause
    [ values_clause ]
    [ error_logging_clause ]
    [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...
]...
[ ELSE insert_into_clause
  [ values_clause ]
  [ error_logging_clause ]
   [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...
]
</pre>
<p class="subhead2"><a id="SQLQR601"></a><span class="italic"><a id="sthref1049"></a>constraint</span></p>
<pre dir="ltr">{ inline_constraint
| out_of_line_constraint
| inline_ref_constraint
| out_of_line_ref_constraint
}
</pre>
<p class="subhead2"><a id="SQLQR602"></a><span class="italic"><a id="sthref1050"></a>constraint_clauses</span></p>
<pre dir="ltr">{ ADD { { out_of_line_constraint }...
      | out_of_line_REF_constraint
      }
| MODIFY { CONSTRAINT constraint_name
         | PRIMARY KEY
         | UNIQUE (column [, column ]...)
         } constraint_state [ CASCADE ]
| RENAME CONSTRAINT old_name TO new_name
| { drop_constraint_clause }...
}
</pre>
<p class="subhead2"><a id="SQLQR603"></a><span class="italic"><a id="sthref1051"></a>constraint_state</span></p>
<pre dir="ltr">[ [ [ NOT ] DEFERRABLE ]
  [ INITIALLY { IMMEDIATE | DEFERRED } ]
| [ INITIALLY { IMMEDIATE | DEFERRED } ]
  [ [ NOT ] DEFERRABLE ]
]
[ RELY | NORELY ]
[ using_index_clause ]
[ ENABLE | DISABLE ]
[ VALIDATE | NOVALIDATE ]
[ exceptions_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1010"></a><a id="sthref1052"></a><span class="italic">container_data_clause</span></p>
<pre dir="ltr">{
SET CONTAINER_DATA = { ALL | DEFAULT | ( container_name [, container_name ]... ) }
|
ADD CONTAINER_DATA = ( container_name [, container_name ]... )
|
REMOVE CONTAINER_DATA = ( container_name [, container_name ]... )
}
[ FOR [ schema. ] container_data_object ]
</pre>
<p class="subhead2"><a id="SQLQR1182"></a><a id="sthref1053"></a><span class="italic">containers_clause</span></p>
<pre dir="ltr">CONTAINERS( [schema.] { table | view } )
</pre>
<p class="subhead2"><a id="SQLQR604"></a><a id="sthref1054"></a><span class="italic">context_clause</span></p>
<pre dir="ltr">[ WITH INDEX CONTEXT,
  SCAN CONTEXT implementation_type
  [ COMPUTE ANCILLARY DATA ]
]
[ WITH COLUMN CONTEXT ]
</pre>
<p class="subhead2"><a id="SQLQR605"></a><span class="italic"><a id="sthref1055"></a>controlfile_clauses</span></p>
<pre dir="ltr">CREATE { [ LOGICAL | PHYSICAL ] STANDBY | FAR SYNC INSTANCE }
  CONTROLFILE AS
  &#39;filename&#39; [ REUSE ]
| BACKUP CONTROLFILE TO
  { &#39;filename&#39; [ REUSE ]
  | trace_file_clause
  }
</pre>
<p class="subhead2"><a id="SQLQR606"></a><span class="italic"><a id="sthref1056"></a>convert_database_clause</span></p>
<pre dir="ltr">CONVERT TO ( PHYSICAL | SNAPSHOT ) STANDBY
</pre>
<p class="subhead2"><a id="SQLQR607"></a><span class="italic"><a id="sthref1057"></a>cost_matrix_clause</span></p>
<pre dir="ltr">COST
  { MODEL [AUTO]
  | ( class_value [, class_value]... )
        VALUES ( ( cost_value [, cost_value]...) 
                 [ , (cost_value [, cost_value]... ) ]...
               )
  }
</pre>
<p class="subhead2"><a id="SQLQR608"></a><span class="italic"><a id="sthref1058"></a>create_datafile_clause</span></p>
<pre dir="ltr">CREATE DATAFILE
   { &#39;filename&#39; | filenumber }
     [, &#39;filename&#39; | filenumber ]...
   }
   [ AS { file_specification
          [, file_specification ]...
        | NEW
        }
   ]
</pre>
<p class="subhead2"><a id="SQLQR1183"></a><a id="sthref1059"></a><span class="italic">create_file_dest_clause</span></p>
<pre dir="ltr">CREATE_FILE_DEST = { NONE | &#39;directory_path_name&#39; | diskgroup_name }
</pre>
<p class="subhead2"><a id="SQLQR1011"></a><a id="sthref1060"></a><span class="italic">create_key</span></p>
<pre dir="ltr">CREATE [ ENCRYPTION ] KEY [ USING TAG &#39;tag&#39; ]
  IDENTIFIED BY keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
  [ CONTAINER = { ALL | CURRENT } ]
</pre>
<p class="subhead2"><a id="SQLQR1012"></a><a id="sthref1061"></a><span class="italic">create_keystore</span></p>
<pre dir="ltr">CREATE
  { KEYSTORE &#39;keystore_location&#39;
  | [ LOCAL ] AUTO_LOGIN KEYSTORE FROM KEYSTORE &#39;keystore_location&#39;
  }
  IDENTIFIED BY keystore_password
</pre>
<p class="subhead2"><a id="SQLQR609"></a><span class="italic"><a id="sthref1062"></a>create_mv_refresh</span></p>
<pre dir="ltr">{ REFRESH
  { { FAST | COMPLETE | FORCE }
  | { ON DEMAND 
    | ON COMMIT 
    }
  | { START WITH date |
      NEXT date 
    }...
  | WITH { PRIMARY KEY | ROWID }
  | USING
     { DEFAULT [ MASTER | LOCAL ] ROLLBACK SEGMENT
     | [ MASTER | LOCAL ] ROLLBACK SEGMENT rollback_segment
     }...
  | USING
     { ENFORCED | TRUSTED } CONSTRAINTS
  }...
| NEVER REFRESH
}
</pre>
<p class="subhead2"><a id="SQLQR1013"></a><a id="sthref1063"></a><span class="italic">create_pdb_clone</span></p>
<pre dir="ltr">FROM { src_pdb_name [ @ dblink ] } | { NON$CDB @ dblink }
  [ pdb_storage_clause ]
  [ file_name_convert ]
  [ path_prefix_clause ]
  [ tempfile_reuse_clause ]
  [ SNAPSHOT COPY ]
  [ user_tablespaces_clause ]
  [ standbys_clause ]
  [ logging_clause ]
  [ create_file_dest_clause ]
  [ NO DATA ]
</pre>
<p class="subhead2"><a id="SQLQR1014"></a><a id="sthref1064"></a><span class="italic">create_pdb_from_seed</span></p>
<pre dir="ltr">ADMIN USER admin_user_name IDENTIFIED BY password
  [ pdb_dba_roles ]
  [ default_tablespace ]
  [ file_name_convert ]
  [ pdb_storage_clause ]
  [ path_prefix_clause ]
  [ tempfile_reuse_clause ]
  [ user_tablespaces_clause ]
  [ standbys_clause ]
  [ logging_clause ]
  [ create_file_dest_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1015"></a><a id="sthref1065"></a><span class="italic">create_pdb_from_xml</span></p>
<pre dir="ltr">[ AS CLONE ] USING filename
  [ source_file_name_convert | source_file_directory ]
  [ { [ COPY | MOVE ] file_name_convert } | NOCOPY ]
  [ pdb_storage_clause ]
  [ path_prefix_clause ]
  [ tempfile_reuse_clause ]
  [ user_tablespaces_clause ]
  [ standbys_clause ]
  [ logging_clause ]
  [ create_file_dest_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1184"></a><a id="sthref1066"></a><span class="italic">create_zonemap_as_subquery</span></p>
<pre dir="ltr">CREATE MATERIALIZED ZONEMAP
  [ schema. ] zonemap_name
  [ ( column_alias [, column_alias ]... ) ]
  [ zonemap_attributes ]
  [ zonemap_refresh_clause ]
  [ { ENABLE | DISABLE } PRUNING ]
  AS query_block
</pre>
<p class="subhead2"><a id="SQLQR1185"></a><span class="italic"><a id="sthref1067"></a>create_zonemap_on_table</span></p>
<pre dir="ltr">CREATE MATERIALIZED ZONEMAP
  [ schema. ] zonemap_name
  [ zonemap_attributes ]
  [ zonemap_refresh_clause ]
  [ { ENABLE | DISABLE } PRUNING ]
  ON [ schema. ] { table | materialized_view } ( column [, column]... )
</pre>
<p class="subhead2"><a id="SQLQR1016"></a><span class="italic"><a id="sthref1068"></a>cross_outer_apply_clause</span></p>
<pre dir="ltr">{ CROSS | OUTER } APPLY { table_reference | collection_expression }
</pre>
<p class="subhead2"><a id="SQLQR1017"></a><span class="italic"><a id="sthref1069"></a>cycle_clause</span></p>
<pre dir="ltr">{CYCLE c_alias [, c_alias]...
    SET cycle_mark_c_alias TO cycle_value
    DEFAULT no_cycle_value
}
</pre>
<p class="subhead2"><a id="SQLQR610"></a><span class="italic"><a id="sthref1070"></a>database_file_clauses</span></p>
<pre dir="ltr">{ RENAME FILE  &#39;filename&#39; [, &#39;filename&#39; ]...
   TO &#39;filename&#39;
| create_datafile_clause
| alter_datafile_clause
| alter_tempfile_clause
| move_datafile_clause
}
</pre>
<p class="subhead2"><a id="SQLQR611"></a><span class="italic"><a id="sthref1071"></a>database_logging_clauses</span></p>
<pre dir="ltr">{ LOGFILE
    [ GROUP integer ] file_specification
      [, [ GROUP integer ] file_specification ]...
| MAXLOGFILES integer
| MAXLOGMEMBERS integer
| MAXLOGHISTORY integer
| { ARCHIVELOG | NOARCHIVELOG }
| FORCE LOGGING
}
</pre>
<p class="subhead2"><a id="SQLQR612"></a><span class="italic"><a id="sthref1072"></a>datafile_tempfile_clauses</span></p>
<pre dir="ltr">{ ADD { DATAFILE | TEMPFILE }
   [ file_specification [, file_specification ]... ]
| DROP {DATAFILE | TEMPFILE } { &#39;filename&#39; | file_number }
| SHRINK TEMPFILE { &#39;filename&#39; | file_number } [KEEP size_clause]
| RENAME DATAFILE &#39;filename&#39; [, &#39;filename&#39; ]...
    TO &#39;filename&#39; [, &#39;filename&#39; ]...
| { DATAFILE | TEMPFILE } { ONLINE | OFFLINE }
}
</pre>
<p class="subhead2"><a id="SQLQR613"></a><span class="italic"><a id="sthref1073"></a>datafile_tempfile_spec</span></p>
<pre dir="ltr">[ &#39;filename&#39; | &#39;ASM_filename&#39; ]
[ SIZE size_clause ]
[ REUSE ]
[ autoextend_clause ]
</pre>
<p class="subhead2"><a id="SQLQR614"></a><a id="sthref1074"></a><span class="italic">db_user_proxy_clauses</span></p>
<pre dir="ltr">[ WITH
  { ROLE { role_name [, role_name]...
         | ALL EXCEPT role_name [, role_name]...
         }
  | NO ROLES
  }
]
[ AUTHENTICATION REQUIRED ]
</pre>
<p class="subhead2"><a id="SQLQR615"></a><a id="sthref1075"></a><span class="italic">dblink</span></p>
<pre dir="ltr">database[.domain [.domain ]... ] [ @ connection_qualifier ]
</pre>
<p class="subhead2"><a id="SQLQR616"></a><a id="sthref1076"></a><span class="italic">dblink_authentication</span></p>
<pre dir="ltr">AUTHENTICATED BY user IDENTIFIED BY password
</pre>
<p class="subhead2"><a id="SQLQR617"></a><a id="sthref1077"></a><span class="italic">deallocate_unused_clause</span></p>
<pre dir="ltr">DEALLOCATE UNUSED [ KEEP size_clause ]
</pre>
<p class="subhead2"><a id="SQLQR618"></a><span class="italic"><a id="sthref1078"></a>default_cost_clause</span></p>
<pre dir="ltr">DEFAULT COST (cpu_cost, io_cost, network_cost)
</pre>
<p class="subhead2"><a id="SQLQR619"></a><span class="italic"><a id="sthref1079"></a>default_selectivity_clause</span></p>
<pre dir="ltr">DEFAULT SELECTIVITY default_selectivity
</pre>
<p class="subhead2"><a id="SQLQR620"></a><span class="italic"><a id="sthref1080"></a>default_settings_clauses</span></p>
<pre dir="ltr">{ DEFAULT EDITION = edition_name
| SET DEFAULT { BIGFILE | SMALLFILE } TABLESPACE
| DEFAULT TABLESPACE tablespace
| DEFAULT TEMPORARY TABLESPACE { tablespace | tablespace_group_name }
| RENAME GLOBAL_NAME TO database.domain [.domain ]...
| ENABLE BLOCK CHANGE TRACKING [ USING FILE &#39;filename&#39; [ REUSE ] ]
| DISABLE BLOCK CHANGE TRACKING
| [NO] FORCE FULL DATABASE CACHING
| flashback_mode_clause
| set_time_zone_clause
}
</pre>
<p class="subhead2"><a id="SQLQR621"></a><span class="italic"><a id="sthref1081"></a>default_tablespace</span></p>
<pre dir="ltr">DEFAULT TABLESPACE tablespace
[ DATAFILE datafile_tempfile_spec ]
[ extent_management_clause ]
</pre>
<p class="subhead2"><a id="SQLQR622"></a><span class="italic"><a id="sthref1082"></a>default_temp_tablespace</span></p>
<pre dir="ltr">  [ BIGFILE | SMALLFILE ]
DEFAULT TEMPORARY TABLESPACE tablespace
  [ TEMPFILE file_specification [, file_specification ]...]
  [ extent_management_clause ]
</pre>
<p class="subhead2"><a id="SQLQR623"></a><span class="italic"><a id="sthref1083"></a>deferred_segment_creation</span></p>
<pre dir="ltr">SEGMENT CREATION { IMMEDIATE | DEFERRED }
</pre>
<p class="subhead2"><a id="SQLQR1018"></a><a id="sthref1084"></a><span class="italic">delete_secret</span></p>
<pre dir="ltr">DELETE SECRET FOR CLIENT &#39;client_identifier&#39;
  IDENTIFIED BY keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR624"></a><span class="italic"><a id="sthref1085"></a>dependent_tables_clause</span></p>
<pre dir="ltr">DEPENDENT TABLES
( table ( partition_spec [, partition_spec]... 
          [, table ( partition_spec [, partition_spec]... ]
        )
)
</pre>
<p class="subhead2"><a id="SQLQR625"></a><span class="italic"><a id="sthref1086"></a>dimension_join_clause</span></p>
<pre dir="ltr">{ JOIN KEY
   { child_key_column
   | (child_key_column [, child_key_column ]...)
   }
  REFERENCES parent_level
}...
</pre>
<p class="subhead2"><a id="SQLQR626"></a><span class="italic"><a id="sthref1087"></a>disk_offline_clause</span></p>
<pre dir="ltr">OFFLINE
  { [ QUORUM | REGULAR ] DISK disk_name [, disk_name ]...
  | DISKS IN [ QUORUM | REGULAR ] FAILGROUP failgroup_name [, failgroup_name ]...
  }... [ timeout_clause ]
</pre>
<p class="subhead2"><a id="SQLQR627"></a><span class="italic"><a id="sthref1088"></a>disk_online_clause</span></p>
<pre dir="ltr">ONLINE
  { { [ QUORUM | REGULAR ] DISK disk_name [, disk_name ]...
    | DISKS IN [ QUORUM | REGULAR ] FAILGROUP failgroup_name [, failgroup_name ]...
    }...
  | ALL
  } [ POWER integer ] [ WAIT | NOWAIT ]
</pre>
<p class="subhead2"><a id="SQLQR628"></a><span class="italic"><a id="sthref1089"></a>disk_region_clause</span></p>
<pre dir="ltr">[ HOT | COLD ] [ MIRRORHOT | MIRRORCOLD ]
</pre>
<p class="subhead2"><a id="SQLQR629"></a><span class="italic"><a id="sthref1090"></a>diskgroup_alias_clauses</span></p>
<pre dir="ltr">{ ADD ALIAS
    &#39;alias_name&#39; FOR &#39;filename&#39;
    [, &#39;alias_name&#39; FOR &#39;filename&#39; ]...
| DROP ALIAS &#39;alias_name&#39; [, &#39;alias_name&#39; ]...
| RENAME ALIAS
    &#39;old_alias_name&#39; TO &#39;new_alias_name&#39;
    [, &#39;old_alias_name&#39; TO &#39;new_alias_name&#39; ]...
}
</pre>
<p class="subhead2"><a id="SQLQR630"></a><span class="italic"><a id="sthref1091"></a>diskgroup_attributes</span></p>
<pre dir="ltr">SET ATTRIBUTE &#39;attribute_name&#39; = &#39;attribute_value&#39;
</pre>
<p class="subhead2"><a id="SQLQR631"></a><span class="italic"><a id="sthref1092"></a>diskgroup_availability</span></p>
<pre dir="ltr">{ MOUNT [ RESTRICTED | NORMAL ] 
           [ FORCE | NOFORCE ]
| DISMOUNT [ FORCE | NOFORCE ]
}
</pre>
<p class="subhead2"><a id="SQLQR632"></a><span class="italic"><a id="sthref1093"></a>diskgroup_directory_clauses</span></p>
<pre dir="ltr">{ ADD DIRECTORY &#39;filename&#39; [, &#39;filename&#39; ]...
| DROP DIRECTORY
    &#39;filename&#39; [ FORCE | NOFORCE ]
    [, &#39;filename&#39; [ FORCE | NOFORCE ] ]...
| RENAME DIRECTORY
    &#39;old_dir_name&#39; TO &#39;new_dir_name&#39;
    [, &#39;old_dir_name&#39; TO &#39;new_dir_name&#39; ]...
}
</pre>
<p class="subhead2"><a id="SQLQR633"></a><span class="italic"><a id="sthref1094"></a>diskgroup_template_clauses</span></p>
<pre dir="ltr">{ { ADD | MODIFY } TEMPLATE template_name qualified_template_clause
      [, template_name qualified_template_clause ]...
| DROP TEMPLATE template_name [, template_name ]...
}
</pre>
<p class="subhead2"><a id="SQLQR634"></a><span class="italic"><a id="sthref1095"></a>diskgroup_volume_clauses</span></p>
<pre dir="ltr">{ add_volume_clause
| modify_volume_clause
| RESIZE VOLUME asm_volume SIZE size_clause
| DROP VOLUME asm_volume
}
</pre>
<p class="subhead2"><a id="SQLQR635"></a><span class="italic"><a id="sthref1096"></a>distributed_recov_clauses</span></p>
<pre dir="ltr">{ ENABLE | DISABLE } DISTRIBUTED RECOVERY
</pre>
<p class="subhead2"><a id="SQLQR636"></a><span class="italic"><a id="sthref1097"></a>dml_table_expression_clause</span></p>
<pre dir="ltr">{ [ schema. ]
  { table
    [ partition_extension_clause
    | @ dblink
    ]
  | { view | materialized view } [ @ dblink ]
  }
| ( subquery [ subquery_restriction_clause ] )
| table_collection_expression
}
</pre>
<p class="subhead2"><a id="SQLQR637"></a><span class="italic"><a id="sthref1098"></a>domain_index_clause</span></p>
<pre dir="ltr">indextype
   [ local_domain_index_clause ]
   [ parallel_clause ]
   [ PARAMETERS (&#39;ODCI_parameters&#39;) ]
</pre>
<p class="subhead2"><a id="SQLQR638"></a><a id="sthref1099"></a><span class="italic">drop_binding_clause</span></p>
<pre dir="ltr">DROP BINDING (parameter_type [, parameter_type ]...)
  [ FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR639"></a><span class="italic"><a id="sthref1100"></a>drop_column_clause</span></p>
<pre dir="ltr">{ SET UNUSED { COLUMN column
             | (column [, column ]...)
             }
  [ { CASCADE CONSTRAINTS | INVALIDATE }... ]
  [ ONLINE ]
| DROP { COLUMN column
       | (column [, column ]...)
       }
  [ { CASCADE CONSTRAINTS | INVALIDATE }... ]
  [ CHECKPOINT integer ]
| DROP { UNUSED COLUMNS
       | COLUMNS CONTINUE
       }
  [ CHECKPOINT integer ]
}
</pre>
<p class="subhead2"><a id="SQLQR640"></a><span class="italic"><a id="sthref1101"></a>drop_constraint_clause</span></p>
<pre dir="ltr">DROP
   { { PRIMARY KEY
     | UNIQUE (column [, column ]...)
     }
     [ CASCADE ]
     [ { KEEP | DROP } INDEX ]
   | CONSTRAINT constraint_name
     [ CASCADE ]
   } [ ONLINE ]
</pre>
<p class="subhead2"><a id="SQLQR641"></a><span class="italic"><a id="sthref1102"></a>drop_disk_clause</span></p>
<pre dir="ltr">DROP
{ [ QUORUM | REGULAR ] DISK
    disk_name [ FORCE | NOFORCE ]
    [, disk_name [ FORCE | NOFORCE ] ]...
| DISKS IN [ QUORUM | REGULAR ] FAILGROUP
    failgroup_name [ FORCE | NOFORCE ]
    [, failgroup_name [ FORCE | NOFORCE ] ]...
}
</pre>
<p class="subhead2"><a id="SQLQR642"></a><span class="italic"><a id="sthref1103"></a>drop_diskgroup_file_clause</span></p>
<pre dir="ltr">DROP FILE &#39;filename&#39; [, &#39;filename&#39; ]...
</pre>
<p class="subhead2"><a id="SQLQR643"></a><span class="italic"><a id="sthref1104"></a>drop_index_partition</span></p>
<pre dir="ltr">DROP PARTITION partition_name
</pre>
<p class="subhead2"><a id="SQLQR644"></a><span class="italic"><a id="sthref1105"></a>drop_logfile_clauses</span></p>
<pre dir="ltr">DROP [ STANDBY ] LOGFILE
   { logfile_descriptor
     [, logfile_descriptor ]...
   | MEMBER &#39;filename&#39;
            [, &#39;filename&#39; ]...
   }
</pre>
<p class="subhead2"><a id="SQLQR1019"></a><a id="sthref1106"></a><span class="italic">drop_period_clause</span></p>
<pre dir="ltr">DROP ( PERIOD FOR valid_time_column )
</pre>
<p class="subhead2"><a id="SQLQR645"></a><span class="italic"><a id="sthref1107"></a>drop_table_partition</span></p>
<pre dir="ltr">DROP partition_extended_names
  [ update_index_clauses [ parallel_clause ] ]
</pre>
<p class="subhead2"><a id="SQLQR646"></a><span class="italic"><a id="sthref1108"></a>drop_table_subpartition</span></p>
<pre dir="ltr">DROP subpartition_extended_names
  [ update_index_clauses [ parallel_clause ] ]
</pre>
<p class="subhead2"><a id="SQLQR647"></a><span class="italic"><a id="sthref1109"></a>ds_iso_format</span></p>
<pre dir="ltr">[-] P [days D]
  [T [hours H] [minutes M] [seconds [. frac_secs] S ] ]
</pre>
<p class="subhead2"><a id="SQLQR648"></a><span class="italic"><a id="sthref1110"></a>else_clause</span></p>
<pre dir="ltr">ELSE else_expr
</pre>
<p class="subhead2"><a id="SQLQR649"></a><span class="italic"><a id="sthref1111"></a>enable_disable_clause</span></p>
<pre dir="ltr">{ ENABLE | DISABLE }
[ VALIDATE | NOVALIDATE ]
{ UNIQUE (column [, column ]...)
| PRIMARY KEY
| CONSTRAINT constraint_name
}
[ using_index_clause ]
[ exceptions_clause ]
[ CASCADE ]
[ { KEEP | DROP } INDEX ]
</pre>
<p class="subhead2"><a id="SQLQR650"></a><span class="italic"><a id="sthref1112"></a>enable_disable_volume</span></p>
<pre dir="ltr">{ ENABLE | DISABLE } VOLUME
  { asm_volume [, asm_volume]...
  | ALL
  }
</pre>
<p class="subhead2"><a id="SQLQR1020"></a><a id="sthref1113"></a><span class="italic">enable_pluggable_database</span></p>
<pre dir="ltr">ENABLE PLUGGABLE DATABASE
  [ SEED
  [ file_name_convert ]
  [ SYSTEM tablespace_datafile_clauses ]
  [ SYSAUX tablespace_datafile_clauses ]
  ]
</pre>
<p class="subhead2"><a id="SQLQR651"></a><a id="sthref1114"></a><span class="italic">encryption_spec</span></p>
<pre dir="ltr">  [ USING &#39;encrypt_algorithm&#39; ]
  [ IDENTIFIED BY password ]
  [ &#39;integrity_algorithm&#39; ]
  [ [ NO ] SALT ]
</pre>
<p class="subhead2"><a id="SQLQR652"></a><span class="italic"><a id="sthref1115"></a>end_session_clauses</span></p>
<pre dir="ltr">{ DISCONNECT SESSION &#39;integer1, integer2&#39;
     [ POST_TRANSACTION ]
| KILL SESSION &#39;integer1, integer2 [, @integer3]&#39;
}
[ IMMEDIATE | NOREPLAY ]
</pre>
<p class="subhead2"><a id="SQLQR653"></a><span class="italic"><a id="sthref1116"></a>error_logging_clause</span></p>
<pre dir="ltr">LOG ERRORS 
  [ INTO [schema.] table ]
  [ (simple_expression) ]
  [ REJECT LIMIT { integer | UNLIMITED } ]
</pre>
<p class="subhead2"><a id="SQLQR1021"></a><a id="sthref1117"></a><span class="italic">evaluation_edition_clause</span></p>
<pre dir="ltr">EVALUATE USING { CURRENT EDITION | EDITION edition | NULL EDITION }
</pre>
<p class="subhead2"><a id="SQLQR654"></a><span class="italic"><a id="sthref1118"></a>exceptions_clause</span></p>
<pre dir="ltr">EXCEPTIONS INTO [ schema. ] table
</pre>
<p class="subhead2"><a id="SQLQR655"></a><span class="italic"><a id="sthref1119"></a>exchange_partition_subpart</span></p>
<pre dir="ltr">EXCHANGE { partition_extended_name
         | subpartition_extended_name
         }
   WITH TABLE [ schema. ] table
   [ { INCLUDING | EXCLUDING } INDEXES ]
   [ { WITH | WITHOUT } VALIDATION ]
   [ exceptions_clause ]
   [ update_index_clauses [ parallel_clause ] ]
   [ CASCADE ]
</pre>
<p class="subhead2"><a id="SQLQR1022"></a><a id="sthref1120"></a><span class="italic">export_keys</span></p>
<pre dir="ltr">EXPORT [ ENCRYPTION ] KEYS WITH SECRET secret
  TO &#39;filename&#39;
  IDENTIFIED BY keystore_password
  [ WITH IDENTIFIER IN { &#39;key_id&#39; [, &#39;key_id&#39; ]... | ( subquery ) } ]
</pre>
<p class="subhead2"><a id="SQLQR656"></a><span class="italic"><a id="sthref1121"></a>expr</span></p>
<pre dir="ltr">{ simple_expression
| compound_expression
| case_expression
| cursor_expression
| datetime_expression
| function_expression
| interval_expression
| JSON_object_access_expr
| model_expression
| object_access_expression
| scalar_subquery_expression
| type_constructor_expression
| variable_expression
}
</pre>
<p class="subhead2"><a id="SQLQR657"></a><span class="italic"><a id="sthref1122"></a>expression_list</span></p>
<pre dir="ltr">{ expr [, expr ]...
| ( [expr [, expr ]] ...)
}
</pre>
<p class="subhead2"><a id="SQLQR658"></a><a id="sthref1123"></a><span class="italic">extended_attribute_clause</span></p>
<pre dir="ltr">ATTRIBUTE attribute
  { LEVEL level
    DETERMINES { dependent_column
               | (dependent_column [, dependent_column ]... )
               }
  }...
</pre>
<p class="subhead2"><a id="SQLQR659"></a><span class="italic"><a id="sthref1124"></a>extent_management_clause</span></p>
<pre dir="ltr">EXTENT MANAGEMENT LOCAL
  [ AUTOALLOCATE
  | UNIFORM [ SIZE size_clause ]
  ]
</pre>
<p class="subhead2"><a id="SQLQR660"></a><span class="italic"><a id="sthref1125"></a>external_data_properties</span></p>
<pre dir="ltr">DEFAULT DIRECTORY directory
[ ACCESS PARAMETERS
  { (opaque_format_spec)
  | USING CLOB subquery
  }
]
LOCATION
   ([ directory: ] &#39;location_specifier&#39;
      [, [ directory: ] &#39;location_specifier&#39; ]...
   )
</pre>
<p class="subhead2"><a id="SQLQR661"></a><span class="italic"><a id="sthref1126"></a>external_table_clause</span></p>
<pre dir="ltr">([ TYPE access_driver_type ]
 external_data_properties
)
[ REJECT LIMIT { integer | UNLIMITED } ]
</pre>
<p class="subhead2"><a id="SQLQR1023"></a><span class="italic"><a id="sthref1127"></a>failover_clause</span></p>
<pre dir="ltr">FAILOVER TO target_db_name [ FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR1024"></a><a id="sthref1128"></a><span class="italic">file_name_convert</span></p>
<pre dir="ltr">FILE_NAME_CONVERT =
  { ( &#39;filename_pattern&#39;, &#39;replacement_filename_pattern&#39;
      [, &#39;filename_pattern&#39;, &#39;replacement_filename_pattern&#39; ]... )
    |
    NONE
  }
</pre>
<p class="subhead2"><a id="SQLQR662"></a><span class="italic"><a id="sthref1129"></a>file_owner_clause</span></p>
<pre dir="ltr">SET OWNERSHIP { OWNER = &#39;user&#39; | GROUP = &#39;usergroup&#39; 
                  [, OWNER = &#39;user&#39; | GROUP = &#39;usergroup&#39; ]...
              } FOR FILE &#39;filename&#39; [, &#39;filename&#39;]...
</pre>
<p class="subhead2"><a id="SQLQR663"></a><span class="italic"><a id="sthref1130"></a>file_permissions_clause</span></p>
<pre dir="ltr">SET PERMISSION { OWNER | GROUP | OTHER }
  = { NONE | READ ONLY | READ WRITE }
  [, { OWNER | GROUP | OTHER | ALL }
    = { NONE | READ ONLY | READ WRITE } ]...
    FOR FILE &#39;filename&#39; [, &#39;filename&#39;]...
</pre>
<p class="subhead2"><a id="SQLQR664"></a><span class="italic"><a id="sthref1131"></a>file_specification</span></p>
<pre dir="ltr">{ datafile_tempfile_spec
| redo_log_file_spec
}
</pre>
<p class="subhead2"><a id="SQLQR665"></a><span class="italic"><a id="sthref1132"></a>flashback_archive_clause</span></p>
<pre dir="ltr">FLASHBACK ARCHIVE [flashback_archive] | NO FLASHBACK ARCHIVE
</pre>
<p class="subhead2"><a id="SQLQR666"></a><span class="italic"><a id="sthref1133"></a>flashback_archive_quota</span></p>
<pre dir="ltr">QUOTA integer { M | G | T | P | E }
</pre>
<p class="subhead2"><a id="SQLQR667"></a><span class="italic"><a id="sthref1134"></a>flashback_archive_retention</span></p>
<pre dir="ltr">RETENTION integer {YEAR | MONTH | DAY}
</pre>
<p class="subhead2"><a id="SQLQR668"></a><span class="italic"><a id="sthref1135"></a>flashback_mode_clause</span></p>
<pre dir="ltr">FLASHBACK { ON | OFF }
</pre>
<p class="subhead2"><a id="SQLQR669"></a><span class="italic"><a id="sthref1136"></a>flashback_query_clause</span></p>
<pre dir="ltr">{ VERSIONS BETWEEN { SCN | TIMESTAMP }
    { expr | MINVALUE } AND { expr | MAXVALUE }
| VERSIONS PERIOD FOR valid_time_column BETWEEN
    { expr | MINVALUE } AND { expr | MAXVALUE }
| AS OF { SCN | TIMESTAMP } expr
| AS OF PERIOD FOR valid_time_column expr
}
</pre>
<p class="subhead2"><a id="SQLQR1025"></a><span class="italic"><a id="sthref1137"></a>for_refresh_clause</span></p>
<pre dir="ltr">{ FOR SYNCHRONOUS REFRESH USING staging_log_name
| FOR FAST REFRESH
}
</pre>
<p class="subhead2"><a id="SQLQR670"></a><a id="sthref1138"></a><span class="italic">for_update_clause</span></p>
<pre dir="ltr">FOR UPDATE
  [ OF [ [ schema. ] { table | view } . ] column
         [, [ [ schema. ] { table | view } . ] column
         ]...
  ]
  [ { NOWAIT | WAIT integer 
    |  SKIP LOCKED
    }
  ]
</pre>
<p class="subhead2"><a id="SQLQR671"></a><span class="italic"><a id="sthref1139"></a>full_database_recovery</span></p>
<pre dir="ltr">[ STANDBY ] DATABASE
[ { UNTIL { CANCEL
          | TIME date
          | CHANGE integer
          | CONSISTENT
          }
  | USING BACKUP CONTROLFILE
  | SNAPSHOT TIME date
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR672"></a><span class="italic"><a id="sthref1140"></a>fully_qualified_file_name</span></p>
<pre dir="ltr">+diskgroup_name/db_name/file_type/
   file_type_tag.filenumber.incarnation_number
</pre>
<p class="subhead2"><a id="SQLQR673"></a><span class="italic"><a id="sthref1141"></a>function_association</span></p>
<pre dir="ltr">{ FUNCTIONS
     [ schema. ]function [, [ schema. ]function ]...
| PACKAGES
     [ schema. ]package [, [ schema. ]package ]...
| TYPES
     [ schema. ]type [, [ schema. ]type ]...
| INDEXES
     [ schema. ]index [, [ schema. ]index ]...
| INDEXTYPES
     [ schema. ]indextype [, [ schema. ]indextype ]...
}
{ using_statistics_type
| { default_cost_clause [, default_selectivity_clause ]
  | default_selectivity_clause [, default_cost_clause ]
  }
}
</pre>
<p class="subhead2"><a id="SQLQR674"></a><span class="italic"><a id="sthref1142"></a>general_recovery</span></p>
<pre dir="ltr">RECOVER
[ AUTOMATIC ]
[ FROM &#39;location&#39; ]
{ { full_database_recovery
  | partial_database_recovery
  | LOGFILE &#39;filename&#39;
  }
  [ { TEST
    | ALLOW integer CORRUPTION
    | parallel_clause
    }...
  ]
| CONTINUE [ DEFAULT ]
| CANCEL
}
</pre>
<p class="subhead2"><a id="SQLQR675"></a><a id="sthref1143"></a><span class="italic">global_partitioned_index</span></p>
<pre dir="ltr">GLOBAL PARTITION BY
   { RANGE (column_list)
        (index_partitioning_clause)
   | HASH (column_list)
        { individual_hash_partitions
        | hash_partitions_by_quantity
        }
   }
</pre>
<p class="subhead2"><a id="SQLQR676"></a><span class="italic"><a id="sthref1144"></a>grant_object_privileges</span></p>
<pre dir="ltr">{ object_privilege | ALL [ PRIVILEGES ] }
  [ (column [, column ]...) ]
    [, { object_privilege | ALL [ PRIVILEGES ] }
       [ (column [, column ]...) ]
    ]...
on_object_clause
TO grantee_clause
  [ WITH HIERARCHY OPTION ]
  [ WITH GRANT OPTION ]
</pre>
<p class="subhead2"><a id="SQLQR1136"></a><a id="sthref1145"></a><span class="italic">grant_roles_to_programs</span></p>
<pre dir="ltr">role [, role ]... TO program_unit [, program_unit ]...
</pre>
<p class="subhead2"><a id="SQLQR677"></a><span class="italic"><a id="sthref1146"></a>grant_system_privileges</span></p>
<pre dir="ltr">{ system_privilege | role | ALL PRIVILEGES }
  [, { system_privilege | role | ALL PRIVILEGES } ]...
TO { grantee_clause | grantee_identified_by } [ WITH { ADMIN | DELEGATE } OPTION ]
</pre>
<p class="subhead2"><a id="SQLQR678"></a><span class="italic"><a id="sthref1147"></a>grantee_clause</span></p>
<pre dir="ltr">{ user | role | PUBLIC }
  [, { user | role | PUBLIC } ]...
</pre>
<p class="subhead2"><a id="SQLQR1148"></a><span class="italic"><a id="sthref1148"></a>grantee_identified_by</span></p>
<pre dir="ltr">user [, user ]... IDENTIFIED BY password [, password ]...
</pre>
<p class="subhead2"><a id="SQLQR679"></a><span class="italic"><a id="sthref1149"></a>group_by_clause</span></p>
<pre dir="ltr">GROUP BY
   { expr
   | rollup_cube_clause
   | grouping_sets_clause
   }
     [, { expr
        | rollup_cube_clause
        | grouping_sets_clause
        }
     ]...
   [ HAVING condition ]
</pre>
<p class="subhead2"><a id="SQLQR680"></a><span class="italic"><a id="sthref1150"></a>grouping_expression_list</span></p>
<pre dir="ltr">expression_list [, expression_list ]...
</pre>
<p class="subhead2"><a id="SQLQR681"></a><span class="italic"><a id="sthref1151"></a>grouping_sets_clause</span></p>
<pre dir="ltr">GROUPING SETS
({ rollup_cube_clause | grouping_expression_list })
</pre>
<p class="subhead2"><a id="SQLQR682"></a><span class="italic"><a id="sthref1152"></a>hash_partitions</span></p>
<pre dir="ltr">PARTITION BY HASH (column [, column ] ...)
{ individual_hash_partitions
| hash_partitions_by_quantity
}
</pre>
<p class="subhead2"><a id="SQLQR683"></a><a id="sthref1153"></a><span class="italic">hash_partitions_by_quantity</span></p>
<pre dir="ltr">PARTITIONS hash_partition_quantity
[ STORE IN (tablespace [, tablespace ]...) ]
[ table_compression | index_compression ]
[ OVERFLOW STORE IN (tablespace [, tablespace ]...) ]
</pre>
<p class="subhead2"><a id="SQLQR684"></a><a id="sthref1154"></a><span class="italic">hash_subparts_by_quantity</span></p>
<pre dir="ltr">SUBPARTITIONS integer [STORE IN ( tablespace [, tablespace]... )]
</pre>
<p class="subhead2"><a id="SQLQR1149"></a><a id="sthref1155"></a><span class="italic">heap_org_table_clause</span></p>
<pre dir="ltr">[ table_compression ] [ inmemory_table_clause ] [ ilm_clause ]
</pre>
<p class="subhead2"><a id="SQLQR685"></a><span class="italic"><a id="sthref1156"></a>hierarchical_query_clause</span></p>
<pre dir="ltr">{ CONNECT BY [ NOCYCLE ] condition [ START WITH condition ]
| START WITH condition CONNECT BY [ NOCYCLE ] condition
}
</pre>
<p class="subhead2"><a id="SQLQR686"></a><span class="italic"><a id="sthref1157"></a>hierarchy_clause</span></p>
<pre dir="ltr">HIERARCHY hierarchy
(child_level { CHILD OF parent_level }...
  [ dimension_join_clause ]
)
</pre>
<p class="subhead2"><a id="SQLQR1026"></a><span class="italic"><a id="sthref1158"></a>identity_clause</span></p>
<pre dir="ltr">GENERATED
[ ALWAYS | BY DEFAULT [ ON NULL ] ]
AS IDENTITY [ ( identity_options ) ]
</pre>
<p class="subhead2"><a id="SQLQR1027"></a><span class="italic"><a id="sthref1159"></a>identity_options</span></p>
<pre dir="ltr">{ START WITH ( integer | LIMIT VALUE )
| INCREMENT BY integer
| ( MAXVALUE integer | NOMAXVALUE )
| ( MINVALUE integer | NOMINVALUE )
| ( CYCLE | NOCYCLE )
| ( CACHE integer | NOCACHE )
| ( ORDER | NOORDER ) }...
</pre>
<p class="subhead2"><a id="SQLQR1028"></a><a id="sthref1160"></a><span class="italic">ilm_clause</span></p>
<pre dir="ltr">ILM
{ ADD POLICY ilm_policy_clause
| { DELETE | ENABLE | DISABLE } POLICY ilm_policy_name
| DELETE_ALL | ENABLE_ALL | DISABLE_ALL
}
</pre>
<p class="subhead2"><a id="SQLQR1213"></a><a id="sthref1161"></a><span class="italic">ilm_compression_policy</span></p>
<pre dir="ltr">{ table_compression { SEGMENT | GROUP }
  { { AFTER ilm_time_period OF { { NO ACCESS } | { NO MODIFICATION } | CREATION } }
  | { ON function_name } }
}
|
{ ROW STORE COMPRESS ADVANCED ROW AFTER ilm_time_period OF NO MODIFICATION }
</pre>
<p class="subhead2"><a id="SQLQR1029"></a><a id="sthref1162"></a><span class="italic">ilm_policy_clause</span></p>
<pre dir="ltr">{ ilm_compression_policy | ilm_tiering_policy }
</pre>
<p class="subhead2"><a id="SQLQR1214"></a><a id="sthref1163"></a><span class="italic">ilm_tiering_policy</span></p>
<pre dir="ltr">{ TIER TO tablespace [ SEGMENT | GROUP ] [ ON function_name ] }
|
{ TIER TO tablespace READ ONLY [ SEGMENT | GROUP ]
  { { AFTER ilm_time_period OF { { NO ACCESS } | { NO MODIFICATION } | CREATION } }
  | { ON function_name } } }
</pre>
<p class="subhead2"><a id="SQLQR1215"></a><a id="sthref1164"></a><span class="italic">ilm_time_period</span></p>
<pre dir="ltr">integer { { DAY | DAYS } | { MONTH | MONTHS } | { YEAR | YEARS } }
</pre>
<p class="subhead2"><a id="SQLQR687"></a><span class="italic"><a id="sthref1165"></a>implementation_clause</span></p>
<pre dir="ltr">{ ANCILLARY TO primary_operator
    ( parameter_type [, parameter_type ]...)
      [, primary_operator
         ( parameter_type [, parameter_type ]...)
      ]...
| context_clause
}
</pre>
<p class="subhead2"><a id="SQLQR1030"></a><a id="sthref1166"></a><span class="italic">import_keys</span></p>
<pre dir="ltr">IMPORT [ ENCRYPTION ] KEYS WITH SECRET secret
  FROM &#39;filename&#39;
  IDENTIFIED BY keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR688"></a><span class="italic"><a id="sthref1167"></a>incomplete_file_name</span></p>
<pre dir="ltr">+diskgroup_name [ (template_name) ]
</pre>
<p class="subhead2"><a id="SQLQR689"></a><a id="sthref1168"></a><span class="italic">index_attributes</span></p>
<pre dir="ltr">[ { physical_attributes_clause
  | logging_clause
  | ONLINE
  | TABLESPACE { tablespace | DEFAULT }
  | index_compression
  | { SORT | NOSORT }
  | REVERSE
  | VISIBLE | INVISIBLE
  | partial_index_clause
  | parallel_clause
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR1186"></a><a id="sthref1169"></a><span class="italic">index_compression</span></p>
<pre dir="ltr">{ prefix_compression
| advanced_index_compression
}
</pre>
<p class="subhead2"><a id="SQLQR690"></a><span class="italic"><a id="sthref1170"></a>index_expr</span></p>
<pre dir="ltr">{ column | column_expression }
</pre>
<p class="subhead2"><a id="SQLQR691"></a><a id="sthref1171"></a><span class="italic">index_org_overflow_clause</span></p>
<pre dir="ltr">  [ INCLUDING column_name ]
OVERFLOW [ segment_attributes_clause ]
</pre>
<p class="subhead2"><a id="SQLQR692"></a><a id="sthref1172"></a><span class="italic">index_org_table_clause</span></p>
<pre dir="ltr">[ { mapping_table_clause
  | PCTTHRESHOLD integer
  | prefix_compression
  }...
]
[ index_org_overflow_clause ]
</pre>
<p class="subhead2"><a id="SQLQR693"></a><a id="sthref1173"></a><span class="italic">index_partition_description</span></p>
<pre dir="ltr">PARTITION
[ partition
   [ { segment_attributes_clause
     | index_compression
     }...
   | PARAMETERS ( &#39;ODCI_parameters&#39; )
   ]
   [ USABLE | UNUSABLE ]
]
</pre>
<p class="subhead2"><a id="SQLQR694"></a><span class="italic"><a id="sthref1174"></a>index_partitioning_clause</span></p>
<pre dir="ltr">PARTITION [ partition ]
   VALUES LESS THAN (literal[, literal]... )
   [ segment_attributes_clause ]
</pre>
<p class="subhead2"><a id="SQLQR695"></a><span class="italic"><a id="sthref1175"></a>index_properties</span></p>
<pre dir="ltr">[ { { global_partitioned_index
    | local_partitioned_index
    }
  | index_attributes
  }...
| INDEXTYPE IS { domain_index_clause
               | XMLIndex_clause
               }
]
</pre>
<p class="subhead2"><a id="SQLQR696"></a><span class="italic"><a id="sthref1176"></a>index_subpartition_clause</span></p>
<pre dir="ltr">{ STORE IN (tablespace[, tablespace ]...)
| (SUBPARTITION
      [ subpartition ][ TABLESPACE tablespace ] [ index_compression ] [ USABLE | UNUSABLE ]
   [, SUBPARTITION
         [ subpartition ][ TABLESPACE tablespace ] [ index_compression ] [ USABLE | UNUSABLE ]
   ]...
  )
}
</pre>
<p class="subhead2"><a id="SQLQR1031"></a><span class="italic"><a id="sthref1177"></a>indexing_clause</span></p>
<pre dir="ltr">INDEXING { ON | OFF }
</pre>
<p class="subhead2"><a id="SQLQR697"></a><span class="italic"><a id="sthref1178"></a>individual_hash_partitions</span></p>
<pre dir="ltr">( PARTITION [partition] [indexing_clause] [partitioning_storage_clause]
  [, PARTITION [partition] [indexing_clause] [partitioning_storage_clause]]... )
</pre>
<p class="subhead2"><a id="SQLQR698"></a><span class="italic"><a id="sthref1179"></a>individual_hash_subparts</span></p>
<pre dir="ltr">SUBPARTITION [subpartition] [indexing_clause] [partitioning_storage_clause]
</pre>
<p class="subhead2"><a id="SQLQR699"></a><span class="italic"><a id="sthref1180"></a>inline_constraint</span></p>
<pre dir="ltr">[ CONSTRAINT constraint_name ]
{ [ NOT ] NULL
| UNIQUE
| PRIMARY KEY
| references_clause
| CHECK (condition)
}
[ constraint_state ]
</pre>
<p class="subhead2"><a id="SQLQR700"></a><a id="sthref1181"></a><span class="italic">inline_ref_constraint</span></p>
<pre dir="ltr">{ SCOPE  IS [ schema. ] scope_table
| WITH ROWID
| [ CONSTRAINT constraint_name ]
  references_clause
  [ constraint_state ]
}
</pre>
<p class="subhead2"><a id="SQLQR1150"></a><a id="sthref1182"></a><span class="italic">inmemory_alter_table_clause</span></p>
<pre dir="ltr">[ INMEMORY [ inmemory_parameters ] ] [ inmemory_column_clause ]
| NO INMEMORY
</pre>
<p class="subhead2"><a id="SQLQR1151"></a><a id="sthref1183"></a><span class="italic">inmemory_clause</span></p>
<pre dir="ltr">INMEMORY [ inmemory_parameters ]
| NO INMEMORY
</pre>
<p class="subhead2"><a id="SQLQR1187"></a><a id="sthref1184"></a><span class="italic">inmemory_column_clause</span></p>
<pre dir="ltr">{ INMEMORY [ inmemory_memcompress ] | NO INMEMORY } ( column [, column ]... )
 [ { INMEMORY [ inmemory_memcompress ] | NO INMEMORY } ( column [, column ]... ) ]...
</pre>
<p class="subhead2"><a id="SQLQR1188"></a><a id="sthref1185"></a><span class="italic">inmemory_distribute</span></p>
<pre dir="ltr">DISTRIBUTE [ AUTO | BY { ROWID RANGE | PARTITION | SUBPARTITION } ]
</pre>
<p class="subhead2"><a id="SQLQR1189"></a><a id="sthref1186"></a><span class="italic">inmemory_duplicate</span></p>
<pre dir="ltr">DUPLICATE | DUPLICATE ALL | NO DUPLICATE
</pre>
<p class="subhead2"><a id="SQLQR1190"></a><a id="sthref1187"></a><span class="italic">inmemory_memcompress</span></p>
<pre dir="ltr">MEMCOMPRESS FOR { DML | QUERY [ LOW | HIGH ] | CAPACITY [ LOW | HIGH ] }
| NO MEMCOMPRESS
</pre>
<p class="subhead2"><a id="SQLQR1191"></a><a id="sthref1188"></a><span class="italic">inmemory_parameters</span></p>
<pre dir="ltr">[ inmemory_memcompress ] [ inmemory_priority ] [ inmemory_distribute ] [ inmemory_duplicate ]
</pre>
<p class="subhead2"><a id="SQLQR1192"></a><a id="sthref1189"></a><span class="italic">inmemory_priority</span></p>
<pre dir="ltr">PRIORITY { NONE | LOW | MEDIUM | HIGH | CRITICAL }
</pre>
<p class="subhead2"><a id="SQLQR1155"></a><a id="sthref1190"></a><span class="italic">inmemory_table_clause</span></p>
<pre dir="ltr">INMEMORY [ inmemory_parameters ] [ inmemory_column_clause ]
| NO INMEMORY
</pre>
<p class="subhead2"><a id="SQLQR701"></a><span class="italic"><a id="sthref1191"></a>inner_cross_join_clause</span></p>
<pre dir="ltr">{ [ INNER ] JOIN table_reference
    { ON condition
    | USING (column [, column ]...)
    }
| { CROSS
  | NATURAL [ INNER ]
  }
  JOIN table_reference
}
</pre>
<p class="subhead2"><a id="SQLQR702"></a><span class="italic"><a id="sthref1192"></a>insert_into_clause</span></p>
<pre dir="ltr">INTO dml_table_expression_clause [ t_alias ]
[ (column [, column ]...) ]
</pre>
<p class="subhead2"><a id="SQLQR703"></a><a id="sthref1193"></a><span class="italic">instance_clauses</span></p>
<pre dir="ltr">{ ENABLE | DISABLE } INSTANCE &#39;instance_name&#39;
</pre>
<p class="subhead2"><a id="SQLQR1032"></a><a id="sthref1194"></a><span class="italic">instances_clause</span></p>
<pre dir="ltr">INSTANCES = { ( &#39;instance_name&#39; [, &#39;instance_name&#39; ]... )
            | ALL [ EXCEPT ( &#39;instance_name&#39; [, &#39;instance_name&#39; ]... ) ] }
</pre>
<p class="subhead2"><a id="SQLQR704"></a><span class="italic"><a id="sthref1195"></a>integer</span></p>
<pre dir="ltr">[ + | - ] digit [ digit ]...
</pre>
<p class="subhead2"><a id="SQLQR705"></a><a id="sthref1196"></a><span class="italic">interval_day_to_second</span></p>
<pre dir="ltr">INTERVAL &#39;{ integer | integer time_expr | time_expr }&#39;
{ { DAY | HOUR | MINUTE } [ (leading_precision) ]
| SECOND [ (leading_precision [, fractional_seconds_precision ]) ]
}
[ TO { DAY | HOUR | MINUTE | SECOND [ (fractional_seconds_precision) ] } ]
</pre>
<p class="subhead2"><a id="SQLQR706"></a><span class="italic"><a id="sthref1197"></a>interval_year_to_month</span></p>
<pre dir="ltr">INTERVAL &#39;integer [- integer ]&#39;
{ YEAR | MONTH } [ (precision) ] [ TO { YEAR | MONTH } ]
</pre>
<p class="subhead2"><a id="SQLQR707"></a><span class="italic"><a id="sthref1198"></a>into_clause</span></p>
<pre dir="ltr">INTO [ schema. ] table
</pre>
<p class="subhead2"><a id="SQLQR708"></a><span class="italic"><a id="sthref1199"></a>invoker_rights_clause</span></p>
<pre dir="ltr">AUTHID { CURRENT_USER | DEFINER }
</pre>
<p class="subhead2"><a id="SQLQR709"></a><a id="sthref1200"></a><span class="italic">join_clause</span></p>
<pre dir="ltr">table_reference
  { inner_cross_join_clause | outer_join_clause | cross_outer_apply_clause }...
</pre>
<p class="subhead2"><a id="SQLQR1193"></a><a id="sthref1201"></a><span class="italic">JSON_column_definition</span></p>
<pre dir="ltr">JSON_exists_column
| JSON_query_column
| JSON_value_column
| JSON_nested_path
| ordinality_column
</pre>
<p class="subhead2"><a id="SQLQR1194"></a><a id="sthref1202"></a><span class="italic">JSON_columns_clause</span></p>
<pre dir="ltr">COLUMNS ( JSON_column_definition [, JSON_column_definition ]... )
</pre>
<p class="subhead2"><a id="SQLQR1195"></a><a id="sthref1203"></a><span class="italic">JSON_exists_column</span></p>
<pre dir="ltr">column_name JSON_value_return_type
  EXISTS PATH JSON_path_expression [ JSON_exists_on_error_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1156"></a><a id="sthref1204"></a><span class="italic">JSON_exists_on_error_clause</span></p>
<pre dir="ltr">{ ERROR | TRUE | FALSE } ON ERROR
</pre>
<p class="subhead2"><a id="SQLQR1196"></a><a id="sthref1205"></a><span class="italic">JSON_nested_path</span></p>
<pre dir="ltr">NESTED PATH JSON_path_expression JSON_columns_clause
</pre>
<p class="subhead2"><a id="SQLQR1157"></a><a id="sthref1206"></a><span class="italic">JSON_path_expression</span></p>
<pre dir="ltr">$[ object_step | array_step ]...
</pre>
<p class="subhead2"><a id="SQLQR1197"></a><a id="sthref1207"></a><span class="italic">JSON_query_column</span></p>
<pre dir="ltr">column_name JSON_query_return_type
  FORMAT JSON [ JSON_query_wrapper_clause ]
  PATH JSON_path_expression [ JSON_query_on_error_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1158"></a><a id="sthref1208"></a><span class="italic">JSON_query_on_error_clause</span></p>
<pre dir="ltr">{ ERROR | NULL | EMPTY } ON ERROR
</pre>
<p class="subhead2"><a id="SQLQR1198"></a><a id="sthref1209"></a><span class="italic">JSON_query_return_type</span></p>
<pre dir="ltr">VARCHAR2 [ ( size [BYTE | CHAR] ) ]
</pre>
<p class="subhead2"><a id="SQLQR1159"></a><a id="sthref1210"></a><span class="italic">JSON_query_returning_clause</span></p>
<pre dir="ltr">[ RETURNING JSON_query_return_type ] [ PRETTY ] [ ASCII ]
</pre>
<p class="subhead2"><a id="SQLQR1160"></a><a id="sthref1211"></a><span class="italic">JSON_query_wrapper_clause</span></p>
<pre dir="ltr">WITHOUT [ ARRAY ] WRAPPER
| WITH [ UNCONDITIONAL | CONDITIONAL ] [ ARRAY ] WRAPPER
</pre>
<p class="subhead2"><a id="SQLQR1199"></a><a id="sthref1212"></a><span class="italic">JSON_table_on_error_clause</span></p>
<pre dir="ltr">{ ERROR | NULL | DEFAULT literal } ON ERROR
</pre>
<p class="subhead2"><a id="SQLQR1200"></a><a id="sthref1213"></a><span class="italic">JSON_value_column</span></p>
<pre dir="ltr">column_name JSON_value_return_type PATH JSON_path_expression
  [ JSON_value_on_error_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1161"></a><a id="sthref1214"></a><span class="italic">JSON_value_on_error_clause</span></p>
<pre dir="ltr">{ ERROR | NULL | DEFAULT literal } ON ERROR
</pre>
<p class="subhead2"><a id="SQLQR1201"></a><a id="sthref1215"></a><span class="italic">JSON_value_return_type</span></p>
<pre dir="ltr">{ VARCHAR2 [ ( size [BYTE | CHAR] ) ]
| NUMBER [ ( precision [, scale] ) ]
}
</pre>
<p class="subhead2"><a id="SQLQR1162"></a><a id="sthref1216"></a><span class="italic">JSON_value_returning_clause</span></p>
<pre dir="ltr">[ RETURNING JSON_value_return_type ] [ ASCII ]
</pre>
<p class="subhead2"><a id="SQLQR1033"></a><a id="sthref1217"></a><span class="italic">key_management_clauses</span></p>
<pre dir="ltr">{ set_key
| create_key
| use_key
| set_key_tag
| export_keys
| import_keys
| migrate_key
| reverse_migrate_key
}
</pre>
<p class="subhead2"><a id="SQLQR1034"></a><span class="italic"><a id="sthref1218"></a>keystore_management_clauses</span></p>
<pre dir="ltr">{ create_keystore
| open_keystore
| close_keystore
| backup_keystore
| alter_keystore_password
| merge_into_new_keystore
| merge_into_exist_keystore
}
</pre>
<p class="subhead2"><a id="SQLQR711"></a><span class="italic"><a id="sthref1219"></a>level_clause</span></p>
<pre dir="ltr">LEVEL level IS
   { level_table.level_column
   | (level_table.level_column
      [, level_table.level_column ]...
     )
   } [ SKIP WHEN NULL ]
</pre>
<p class="subhead2"><a id="SQLQR712"></a><span class="italic"><a id="sthref1220"></a>list_partition_desc</span></p>
<pre dir="ltr">PARTITION [partition]
list_values_clause
table_partition_description
  [ ( range_subpartition_desc [, range_subpartition_desc]...
      | list_subpartition_desc, [, list_subpartition_desc]...
      | individual_hash_subparts [, individual_hash_subparts]...
    )
    | hash_subparts_by_quantity
  ]
</pre>
<p class="subhead2"><a id="SQLQR713"></a><span class="italic"><a id="sthref1221"></a>list_partitions</span></p>
<pre dir="ltr">PARTITION BY LIST (column)
(PARTITION [ partition ]
    list_values_clause table_partition_description
  [, PARTITION [ partition ]
        list_values_clause table_partition_description
  ]...
)
</pre>
<p class="subhead2"><a id="SQLQR714"></a><span class="italic"><a id="sthref1222"></a>list_subpartition_desc</span></p>
<pre dir="ltr">SUBPARTITION [subpartition]
  list_values_clause
  [indexing_clause] [partitioning_storage_clause]
</pre>
<p class="subhead2"><a id="SQLQR715"></a><span class="italic"><a id="sthref1223"></a>list_values_clause</span></p>
<pre dir="ltr">VALUES ({ literal | NULL }
        [, { literal | NULL }]...
       | DEFAULT
       )
</pre>
<p class="subhead2"><a id="SQLQR716"></a><span class="italic"><a id="sthref1224"></a>LOB_compression_clause</span></p>
<pre dir="ltr">{ COMPRESS [HIGH | MEDIUM | LOW ]
| NOCOMPRESS
}
</pre>
<p class="subhead2"><a id="SQLQR717"></a><span class="italic"><a id="sthref1225"></a>LOB_deduplicate_clause</span></p>
<pre dir="ltr">{ DEDUPLICATE   
| KEEP_DUPLICATES
}
</pre>
<p class="subhead2"><a id="SQLQR718"></a><span class="italic"><a id="sthref1226"></a>LOB_parameters</span></p>
<pre dir="ltr">{ { ENABLE | DISABLE } STORAGE IN ROW
  | CHUNK integer
  | PCTVERSION integer
  | FREEPOOLS integer
  | LOB_retention_clause
  | LOB_deduplicate_clause
  | LOB_compression_clause
  | { ENCRYPT encryption_spec | DECRYPT }
  | { CACHE | NOCACHE | CACHE READS } [ logging_clause ] 
}...
</pre>
<p class="subhead2"><a id="SQLQR719"></a><a id="sthref1227"></a><span class="italic">LOB_partition_storage</span></p>
<pre dir="ltr">PARTITION partition
{ LOB_storage_clause | varray_col_properties }...
  [ (SUBPARTITION subpartition
     { LOB_partitioning_storage | varray_col_properties }...
    )
]
</pre>
<p class="subhead2"><a id="SQLQR720"></a><a id="sthref1228"></a><span class="italic">LOB_partitioning_storage</span></p>
<pre dir="ltr">LOB (LOB_item) STORE AS [BASICFILE | SECUREFILE]
  [ LOB_segname [ (TABLESPACE tablespace) ]
  | (TABLESPACE tablespace)
  ]
</pre>
<p class="subhead2"><a id="SQLQR721"></a><a id="sthref1229"></a><span class="italic">LOB_retention_storage</span></p>
<pre dir="ltr">RETENTION [ MAX | MIN integer | AUTO | NONE ]
</pre>
<p class="subhead2"><a id="SQLQR722"></a><a id="sthref1230"></a><span class="italic">LOB_storage_clause</span></p>
<pre dir="ltr">LOB
{ (LOB_item [, LOB_item ]...)
     STORE AS { {SECUREFILE | BASICFILE}
              | (LOB_storage_parameters)
              }...
| (LOB_item)
     STORE AS { {SECUREFILE | BASICFILE}
              | LOB_segname 
              | (LOB_storage_parameters)
              }...
}
</pre>
<p class="subhead2"><a id="SQLQR723"></a><span class="italic"><a id="sthref1231"></a>LOB_storage_parameters</span></p>
<pre dir="ltr">{ { TABLESPACE tablespace
  | LOB_parameters [storage_clause]
  }...
| storage_clauase
}
</pre>
<p class="subhead2"><a id="SQLQR724"></a><span class="italic"><a id="sthref1232"></a>local_domain_index_clause</span></p>
<pre dir="ltr">LOCAL
  [ ( PARTITION partition [ PARAMETERS ( &#39;ODCI_parameters&#39; ) ]
      [,  PARTITION partition [ PARAMETERS (&#39;ODCI_parameters&#39;) ]]...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR725"></a><span class="italic"><a id="sthref1233"></a>local_partitioned_index</span></p>
<pre dir="ltr">LOCAL
[ on_range_partitioned_table
| on_list_partitioned_table
| on_hash_partitioned_table
| on_comp_partitioned_table
]
</pre>
<p class="subhead2"><a id="SQLQR726"></a><span class="italic"><a id="sthref1234"></a>local_XMLIndex_clause</span></p>
<pre dir="ltr">LOCAL
  [ ( PARTITION partition [ XMLIndex_parameters_clause ]
      [, PARTITION partition [ XMLIndex_parameters_clause ] ]...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR727"></a><a id="sthref1235"></a><span class="italic">logfile_clause</span></p>
<pre dir="ltr">LOGFILE
[ GROUP integer ] file_specification
  [, [ GROUP integer ] file_specification ]...
</pre>
<p class="subhead2"><a id="SQLQR728"></a><a id="sthref1236"></a><span class="italic">logfile_clauses</span></p>
<pre dir="ltr">{ { ARCHIVELOG [ MANUAL ]
  | NOARCHIVELOG
  }
| [ NO ] FORCE LOGGING
| RENAME FILE &#39;filename&#39; [, &#39;filename&#39; ]...
    TO &#39;filename&#39;
| CLEAR [ UNARCHIVED ]
    LOGFILE logfile_descriptor [, logfile_descriptor ]...
    [ UNRECOVERABLE DATAFILE ]
| add_logfile_clauses
| drop_logfile_clauses
| switch_logfile_clause
| supplemental_db_logging
}
</pre>
<p class="subhead2"><a id="SQLQR729"></a><span class="italic"><a id="sthref1237"></a>logfile_descriptor</span></p>
<pre dir="ltr">{ GROUP integer
| (&#39;filename&#39; [, &#39;filename&#39; ]...)
| &#39;filename&#39;
}
</pre>
<p class="subhead2"><a id="SQLQR730"></a><span class="italic"><a id="sthref1238"></a>logging_clause</span></p>
<pre dir="ltr">{ LOGGING | NOLOGGING |  FILESYSTEM_LIKE_LOGGING }
</pre>
<p class="subhead2"><a id="SQLQR731"></a><span class="italic"><a id="sthref1239"></a>main_model</span></p>
<pre dir="ltr">[ MAIN main_model_name ]
model_column_clauses
[ cell_reference_options ]
model_rules_clause
</pre>
<p class="subhead2"><a id="SQLQR732"></a><span class="italic"><a id="sthref1240"></a>managed_standby_recovery</span></p>
<pre dir="ltr">RECOVER
{ MANAGED STANDBY DATABASE
    [ { USING ARCHIVED LOGFILE
      | DISCONNECT [FROM SESSION]
      | NODELAY
      | UNTIL CHANGE integer
      | UNTIL CONSISTENT
      | parallel_clause
      }...
    | FINISH
    | CANCEL
    ]
| TO LOGICAL STANDBY { db_name | KEEP IDENTITY }
}
</pre>
<p class="subhead2"><a id="SQLQR733"></a><span class="italic"><a id="sthref1241"></a>mapping_table_clauses</span></p>
<pre dir="ltr">{ MAPPING TABLE | NOMAPPING }
</pre>
<p class="subhead2"><a id="SQLQR734"></a><span class="italic"><a id="sthref1242"></a>materialized_view_props</span></p>
<pre dir="ltr">[ column_properties ]
[ table_partitioning_clauses ]
[ CACHE | NOCACHE ]
[ parallel_clause ]
[ build_clause ]
</pre>
<p class="subhead2"><a id="SQLQR735"></a><span class="italic"><a id="sthref1243"></a>maximize_standby_db_clause</span></p>
<pre dir="ltr">SET STANDBY DATABASE TO MAXIMIZE
{ PROTECTION | AVAILABILITY | PERFORMANCE }
</pre>
<p class="subhead2"><a id="SQLQR736"></a><span class="italic"><a id="sthref1244"></a>maxsize_clause</span></p>
<pre dir="ltr">MAXSIZE { UNLIMITED | size_clause }
</pre>
<p class="subhead2"><a id="SQLQR737"></a><a id="sthref1245"></a><span class="italic">merge_insert_clause</span></p>
<pre dir="ltr">WHEN NOT MATCHED THEN
INSERT [ (column [, column ]...) ]
VALUES ({ expr | DEFAULT }
           [, { expr | DEFAULT } ]...
       )
[ where_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1035"></a><span class="italic"><a id="sthref1246"></a>merge_into_exist_keystore</span></p>
<pre dir="ltr">MERGE KEYSTORE &#39;keystore1_location&#39; [ IDENTIFIED BY keystore1_password ]
  INTO EXISTING KEYSTORE &#39;keystore2_location&#39; IDENTIFIED BY keystore2_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR1036"></a><a id="sthref1247"></a><span class="italic">merge_into_new_keystore</span></p>
<pre dir="ltr">MERGE KEYSTORE &#39;keystore1_location&#39; [ IDENTIFIED BY keystore1_password ]
  AND KEYSTORE &#39;keystore2_location&#39; [ IDENTIFIED BY keystore2_password ]
  INTO NEW KEYSTORE &#39;keystore3_location&#39; IDENTIFIED BY keystore3_password
</pre>
<p class="subhead2"><a id="SQLQR738"></a><span class="italic"><a id="sthref1248"></a>merge_table_partitions</span></p>
<pre dir="ltr">MERGE PARTITIONS partition_or_key_value
   { , partition_or_key_value [, partition_or_key_value ]...
   | TO partition_or_key_value }
   [ INTO partition_spec ]
   [ dependent_tables_clause ]
   [ update_index_clauses ]
   [ parallel_clause ]
   [ allow_disallow_clustering ]
</pre>
<p class="subhead2"><a id="SQLQR739"></a><span class="italic"><a id="sthref1249"></a>merge_table_subpartitions</span></p>
<pre dir="ltr">MERGE SUBPARTITIONS subpartition_or_key_value
   { , subpartition_or_key_value [, subpartition_or_key_value ]...
   | TO subpartition_or_key_value }
   [ INTO { range_subpartition_desc
          | list_subpartition_desc
          }
   ]
   [ dependent_tables_clause ]
   [ update_index_clauses ]
   [ parallel_clause ]
   [ allow_disallow_clustering ]
</pre>
<p class="subhead2"><a id="SQLQR740"></a><span class="italic"><a id="sthref1250"></a>merge_update_clause</span></p>
<pre dir="ltr">WHEN MATCHED THEN
UPDATE SET column = { expr | DEFAULT }
           [, column = { expr | DEFAULT } ]...
[ where_clause ]
[ DELETE where_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1037"></a><a id="sthref1251"></a><span class="italic">migrate_key</span></p>
<pre dir="ltr">SET [ ENCRYPTION ] KEY IDENTIFIED BY HSM_auth_string
  MIGRATE USING software_keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR1129"></a><a id="sthref1252"></a><span class="italic">mining_analytic_clause</span></p>
<pre dir="ltr">[ query_partition_clause ] [ order_by_clause ]
</pre>
<p class="subhead2"><a id="SQLQR741"></a><span class="italic"><a id="sthref1253"></a>mining_attribute_clause</span></p>
<pre dir="ltr">USING
{ * 
| { [ schema . ] table . * 
  | expr [ AS alias ]
  }
    [, { [ schema . ] table . * 
       | expr [ AS alias ]
       }
    ]...
}
</pre>
<p class="subhead2"><a id="SQLQR742"></a><span class="italic"><a id="sthref1254"></a>model_clause</span></p>
<pre dir="ltr">MODEL
   [ cell_reference_options ]
   [ return_rows_clause ]
   [ reference_model ]...
main_model
</pre>
<p class="subhead2"><a id="SQLQR744"></a><a id="sthref1255"></a><span class="italic">model_column_clauses</span></p>
<pre dir="ltr">[ PARTITION BY (expr [ c_alias ] [, expr [c_alias] ]...) ]
DIMENSION BY (expr [c_alias] [, expr [c_alias] ]...)
MEASURES (expr [c_alias] [, expr [c_alias] ]...)
</pre>
<p class="subhead2"><a id="SQLQR745"></a><span class="italic"><a id="sthref1256"></a>model_iterate_clause</span></p>
<pre dir="ltr">ITERATE ( number ) [ UNTIL ( condition ) ]
</pre>
<p class="subhead2"><a id="SQLQR746"></a><span class="italic"><a id="sthref1257"></a>model_rules_clause</span></p>
<pre dir="ltr">[ RULES
  [ { UPDATE | UPSERT [ ALL ] } ]
  [ { AUTOMATIC | SEQUENTIAL } ORDER ]
  [ model_iterate_clause ]
]
( [ { UPDATE | UPSERT [ ALL ] } ]
cell_assignment [ order_by_clause ] = expr
  [,  [ { UPDATE | UPSERT [ ALL ] } ]
    cell_assignment [ order_by_clause ] = expr
  ]...
)
</pre>
<p class="subhead2"><a id="SQLQR747"></a><span class="italic"><a id="sthref1258"></a>modify_col_properties</span></p>
<pre dir="ltr">column [ datatype ]
       [ DEFAULT [ ON NULL ] expr | identity_clause | DROP IDENTITY ]
       [ { ENCRYPT encryption_spec } | DECRYPT ]
       [ inline_constraint ... ]
       [ LOB_storage_clause ]
       [ alter_XMLSchema_clause ]
</pre>
<p class="subhead2"><a id="SQLQR748"></a><span class="italic"><a id="sthref1259"></a>modify_col_substitutable</span></p>
<pre dir="ltr">COLUMN column
[ NOT ] SUBSTITUTABLE AT ALL LEVELS
[ FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR1038"></a><span class="italic"><a id="sthref1260"></a>modify_col_visibility</span></p>
<pre dir="ltr">column { VISIBLE | INVISIBLE }
</pre>
<p class="subhead2"><a id="SQLQR749"></a><a id="sthref1261"></a><span class="italic">modify_collection_retrieval</span></p>
<pre dir="ltr">MODIFY NESTED TABLE collection_item
RETURN AS { LOCATOR | VALUE }
</pre>
<p class="subhead2"><a id="SQLQR750"></a><span class="italic"><a id="sthref1262"></a>modify_column_clauses</span></p>
<pre dir="ltr">MODIFY
{ ( modify_col_properties | modify_virtcol_properties
    [, modify_col_properties | modify_virtcol_properties ]... )
| ( modify_col_visibility [, modify_col_visibility ]... )
| modify_col_substitutable
}
</pre>
<p class="subhead2"><a id="SQLQR751"></a><span class="italic"><a id="sthref1263"></a>modify_diskgroup_file</span></p>
<pre dir="ltr">MODIFY FILE &#39;filename&#39; ATTRIBUTE ( disk_region_clause )
  [, &#39;filename&#39; ATTRIBUTE ( disk_region_clause ) ]...
</pre>
<p class="subhead2"><a id="SQLQR752"></a><span class="italic"><a id="sthref1264"></a>modify_hash_partition</span></p>
<pre dir="ltr">MODIFY partition_extended_name
  { partition_attributes
  | coalesce_table_subpartition
  | alter_mapping_table_clause
  | [ REBUILD ] UNUSABLE LOCAL INDEXES
  | indexing_clause
  }
</pre>
<p class="subhead2"><a id="SQLQR753"></a><span class="italic"><a id="sthref1265"></a>modify_index_default_attrs</span></p>
<pre dir="ltr">MODIFY DEFAULT ATTRIBUTES
   [ FOR PARTITION partition ]
   { physical_attributes_clause
   | TABLESPACE { tablespace | DEFAULT }
   | logging_clause
   }...
</pre>
<p class="subhead2"><a id="SQLQR754"></a><span class="italic"><a id="sthref1266"></a>modify_index_partition</span></p>
<pre dir="ltr">MODIFY PARTITION partition
{ { deallocate_unused_clause
  | allocate_extent_clause
  | physical_attributes_clause
  | logging_clause
  | index_compression
  }...
| PARAMETERS (&#39;ODCI_parameters&#39;)
| COALESCE [ CLEANUP ]
| UPDATE BLOCK REFERENCES
| UNUSABLE
}
</pre>
<p class="subhead2"><a id="SQLQR755"></a><a id="sthref1267"></a><span class="italic">modify_index_subpartition</span></p>
<pre dir="ltr">MODIFY SUBPARTITION subpartition
{ UNUSABLE
| allocate_extent_clause
| deallocate_unused_clause
}
</pre>
<p class="subhead2"><a id="SQLQR756"></a><span class="italic"><a id="sthref1268"></a>modify_list_partition</span></p>
<pre dir="ltr">MODIFY partition_extended_name
  { partition_attributes
  | { ADD | DROP } VALUES (literal[ , literal ]...)
  | { add_range_subpartition
    | add_list_subpartition
    | add_hash_subpartition
    }
  | coalesce_table_subpartition
  | [ REBUILD ] UNUSABLE LOCAL INDEXES
  | indexing_clause
  }
</pre>
<p class="subhead2"><a id="SQLQR757"></a><span class="italic"><a id="sthref1269"></a>modify_LOB_parameters</span></p>
<pre dir="ltr">{ storage_clause
| PCTVERSION integer
| FREEPOOLS integer
| REBUILD FREEPOOLS
| LOB_retention_clause
| LOB_deduplicate_clause
| LOB_compression_clause
| { ENCRYPT encryption_spec | DECRYPT }
| { CACHE 
  | { NOCACHE | CACHE READS } [ logging_clause ]
  }
| allocate_extent_clause
| shrink_clause
| deallocate_unused_clause
} ...
</pre>
<p class="subhead2"><a id="SQLQR758"></a><span class="italic"><a id="sthref1270"></a>modify_LOB_storage_clause</span></p>
<pre dir="ltr">MODIFY LOB (LOB_item)
   (modify_LOB_parameters)
</pre>
<p class="subhead2"><a id="SQLQR759"></a><a id="sthref1271"></a><span class="italic">modify_mv_column_clause</span></p>
<pre dir="ltr">MODIFY ( column [ ENCRYPT encryption_spec
       | DECRYPT ] 
       )
</pre>
<p class="subhead2"><a id="SQLQR1039"></a><span class="italic"><a id="sthref1272"></a>modify_opaque_type</span></p>
<pre dir="ltr">MODIFY OPAQUE TYPE anydata_column
STORE ( type_name [, type_name ]... ) UNPACKED
</pre>
<p class="subhead2"><a id="SQLQR760"></a><a id="sthref1273"></a><span class="italic">modify_range_partition</span></p>
<pre dir="ltr">MODIFY partition_extended_name
   { partition_attributes
   | { add_range_subpartition
     | add_hash_subpartition
     | add_list_subpartition
     }
   | coalesce_table_subpartition
   | alter_mapping_table_clause
   | [ REBUILD ] UNUSABLE LOCAL INDEXES
   | indexing_clause
   }
</pre>
<p class="subhead2"><a id="SQLQR761"></a><a id="sthref1274"></a><span class="italic">modify_table_default_attrs</span></p>
<pre dir="ltr">MODIFY DEFAULT ATTRIBUTES
   [ FOR partition_extended_name ]
   [ deferred_segment_creation ]
   [ indexing_clause ]
   [ segment_attributes_clause ]
   [ table_compression ]
   [ inmemory_clause ]
   [ PCTTHRESHOLD integer ]
   [ prefix_compression ]
   [ alter_overflow_clause ]
   [ { LOB (LOB_item) | VARRAY varray } (LOB_parameters) ]...
</pre>
<p class="subhead2"><a id="SQLQR762"></a><span class="italic"><a id="sthref1275"></a>modify_table_partition</span></p>
<pre dir="ltr">{ modify_range_partition
| modify_hash_partition
| modify_list_partition
}
</pre>
<p class="subhead2"><a id="SQLQR763"></a><span class="italic"><a id="sthref1276"></a>modify_table_subpartition</span></p>
<pre dir="ltr">MODIFY subpartition_extended_name
{ allocate_extent_clause
| deallocate_unused_cluse
| shrink_clause
| { { LOB LOB_item | VARRAY varray } (modify_LOB_parameters) }...
| [ REBUILD ] UNUSABLE LOCAL INDEXES
| { ADD | DROP } VALUES ( literal [, literal]... )
| indexing_clause
}
</pre>
<p class="subhead2"><a id="SQLQR1040"></a><a id="sthref1277"></a><span class="italic">modify_virtcol_properties</span></p>
<pre dir="ltr">column [ datatype ]
[ GENERATED ALWAYS ] AS (column_expression) [ VIRTUAL ]
evaluation_edition_clause [ unusable_editions_clause ]
</pre>
<p class="subhead2"><a id="SQLQR764"></a><span class="italic"><a id="sthref1278"></a>modify_volume_clause</span></p>
<pre dir="ltr">MODIFY VOLUME asm_volume
  [ ATTRIBUTE (disk_region_clause) ]
  [ MOUNTPATH &#39;mountpath_name&#39; ]
  [ USAGE &#39;usage_name&#39; ]
</pre>
<p class="subhead2"><a id="SQLQR1041"></a><span class="italic"><a id="sthref1279"></a>move_datafile_clause</span></p>
<pre dir="ltr">MOVE DATAFILE ( &#39;filename&#39; | &#39;ASM_filename&#39; | file_number )
 [ TO ( &#39;filename&#39; | &#39;ASM_filename&#39; ) ]
 [ REUSE ] [ KEEP ]
</pre>
<p class="subhead2"><a id="SQLQR765"></a><span class="italic"><a id="sthref1280"></a>move_mv_log_clause</span></p>
<pre dir="ltr">MOVE segment_attributes_clause [parallel_clause]
</pre>
<p class="subhead2"><a id="SQLQR766"></a><span class="italic"><a id="sthref1281"></a>move_table_clause</span></p>
<pre dir="ltr">MOVE [ ONLINE ]
   [ segment_attributes_clause ]
   [ table_compression ]
   [ index_org_table_clause ]
   [ { LOB_storage_clause | varray_col_properties }... ]
   [ parallel_clause ]
   [ allow_disallow_clustering ]
</pre>
<p class="subhead2"><a id="SQLQR767"></a><span class="italic"><a id="sthref1282"></a>move_table_partition</span></p>
<pre dir="ltr">MOVE partition_extended_name
   [ MAPPING TABLE ]
   [ table_partition_description ]
   [ update_index_clauses ]
   [ parallel_clause ]
   [ allow_disallow_clustering ]
   [ ONLINE ]
</pre>
<p class="subhead2"><a id="SQLQR768"></a><span class="italic"><a id="sthref1283"></a>move_table_subpartition</span></p>
<pre dir="ltr">MOVE subpartition_extended_name [ indexing_clause ]
     [ partitioning_storage_clause ] [ update_index_clauses ]
     [ parallel_clause ] [ allow_disallow_clustering ] [ ONLINE ]
</pre>
<p class="subhead2"><a id="SQLQR769"></a><span class="italic"><a id="sthref1284"></a>multi_column_for_loop</span></p>
<pre dir="ltr">FOR (dimension_column
      [, dimension_column ]...)
IN ( { (literal [, literal ]...)
       [ (literal [, literal ]...) ]...
     | subquery
     }
   )
</pre>
<p class="subhead2"><a id="SQLQR770"></a><span class="italic"><a id="sthref1285"></a>multi_table_insert</span></p>
<pre dir="ltr">{ ALL
  { insert_into_clause [ values_clause ] [error_logging_clause] }...
| conditional_insert_clause
} subquery
</pre>
<p class="subhead2"><a id="SQLQR771"></a><a id="sthref1286"></a><span class="italic">multiset_except</span></p>
<pre dir="ltr">nested_table1
MULTISET EXCEPT [ ALL | DISTINCT ]
nested_table2
</pre>
<p class="subhead2"><a id="SQLQR772"></a><span class="italic"><a id="sthref1287"></a>multiset_intersect</span></p>
<pre dir="ltr">nested_table1
MULTISET INTERSECT [ ALL | DISTINCT ]
nested_table2
</pre>
<p class="subhead2"><a id="SQLQR773"></a><span class="italic"><a id="sthref1288"></a>multiset_union</span></p>
<pre dir="ltr">nested_table1
MULTISET UNION [ ALL | DISTINCT ]
nested_table2
</pre>
<p class="subhead2"><a id="SQLQR774"></a><span class="italic"><a id="sthref1289"></a>mv_log_augmentation</span></p>
<pre dir="ltr">ADD { { OBJECT ID
      | PRIMARY KEY
      | ROWID
      | SEQUENCE
      } [ (column [, column ]...) ]
    | (column [, column ]... )
    } [, { { OBJECT ID
           | PRIMARY KEY
           | ROWID
           | SEQUENCE
           }
           [ (column [, column ]...) ]
         | (column [, column ]...)
         }
      ]...
    [ new_values_clause ]
</pre>
<p class="subhead2"><a id="SQLQR775"></a><span class="italic"><a id="sthref1290"></a>mv_log_purge_clause</span></p>
<pre dir="ltr">PURGE { IMMEDIATE [ SYNCHRONOUS | ASYNCHRONOUS ]  )
      | START WITH datetime_expr 
          [ NEXT datetime_expr 
          | REPEAT INTERVAL interval_expr 
          ]
      | [ START WITH datetime_expr ] { NEXT datetime_expr
                                     | REPEAT INTERVAL interval_expr
                                     }
      }
</pre>
<p class="subhead2"><a id="SQLQR776"></a><span class="italic"><a id="sthref1291"></a>nested_table_col_properties</span></p>
<pre dir="ltr">NESTED TABLE
{ nested_item | COLUMN_VALUE }
[ substitutable_column_clause ]
[ LOCAL | GLOBAL ]
STORE AS storage_table
[ ( { (object_properties)
    | [ physical_properties ]
    | [ column_properties ]
    }...
  )
]
[ RETURN [ AS ] { LOCATOR | VALUE } ]
</pre>
<p class="subhead2"><a id="SQLQR777"></a><span class="italic"><a id="sthref1292"></a>nested_table_partition_spec</span></p>
<pre dir="ltr">PARTITION partition [segment_attributes_clause]
</pre>
<p class="subhead2"><a id="SQLQR778"></a><span class="italic"><a id="sthref1293"></a>new_values_clause</span></p>
<pre dir="ltr">{ INCLUDING | EXCLUDING } NEW VALUES
</pre>
<p class="subhead2"><a id="SQLQR779"></a><span class="italic"><a id="sthref1294"></a>number</span></p>
<pre dir="ltr">[ + | - ]
{ digit [ digit ]... [ . ] [ digit [ digit ]... ]
| . digit [ digit ]...
}
[ [ e | E ] [ + | - ] digit [ digit ]... ] [ f | F | d | D ]
</pre>
<p class="subhead2"><a id="SQLQR780"></a><span class="italic"><a id="sthref1295"></a>numeric_file_name</span></p>
<pre dir="ltr">+diskgroup_name.filenumber.incarnation_number
</pre>
<p class="subhead2"><a id="SQLQR781"></a><span class="italic"><a id="sthref1296"></a>object_properties</span></p>
<pre dir="ltr">{ { column | attribute }
    [ DEFAULT expr ]
    [ { inline_constraint }...  | inline_ref_constraint ]
| { out_of_line_constraint
  | out_of_line_ref_constraint
  | supplemental_logging_props
  }
}
</pre>
<p class="subhead2"><a id="SQLQR1163"></a><a id="sthref1297"></a><span class="italic">object_step</span></p>
<pre dir="ltr">.{ simple_name | &#34;complex_name&#34;  | * }
</pre>
<p class="subhead2"><a id="SQLQR782"></a><span class="italic"><a id="sthref1298"></a>object_table</span></p>
<pre dir="ltr">OF
   [ schema. ] object_type
   [ object_table_substitution ]
   [ (object_properties) ]
   [ ON COMMIT { DELETE | PRESERVE } ROWS ]
   [ OID_clause ]
   [ OID_index_clause ]
   [ physical_properties ]
   [ table_properties ]
</pre>
<p class="subhead2"><a id="SQLQR783"></a><span class="italic"><a id="sthref1299"></a>object_table_substitution</span></p>
<pre dir="ltr">[ NOT ] SUBSTITUTABLE AT ALL LEVELS
</pre>
<p class="subhead2"><a id="SQLQR784"></a><span class="italic"><a id="sthref1300"></a>object_type_col_properties</span></p>
<pre dir="ltr">COLUMN column substitutable_column_clause
</pre>
<p class="subhead2"><a id="SQLQR785"></a><span class="italic"><a id="sthref1301"></a>object_view_clause</span></p>
<pre dir="ltr">OF [ schema. ] type_name
{ WITH OBJECT { IDENTIFIER | ID }
  { DEFAULT | ( attribute [, attribute ]... ) }
| UNDER [ schema. ] superview
}
[ ( { out_of_line_constraint
    | attribute { inline_constraint }...
    }  [, { out_of_line_constraint
          | attribute { inline_constraint }...
          }
       ]...
  )
]
</pre>
<p class="subhead2"><a id="SQLQR786"></a><span class="italic"><a id="sthref1302"></a>OID_clause</span></p>
<pre dir="ltr">OBJECT IDENTIFIER IS
{ SYSTEM GENERATED | PRIMARY KEY }
</pre>
<p class="subhead2"><a id="SQLQR787"></a><span class="italic"><a id="sthref1303"></a>OID_index_clause</span></p>
<pre dir="ltr">OIDINDEX [ index ]
({ physical_attributes_clause
 | TABLESPACE tablespace
 }...
)
</pre>
<p class="subhead2"><a id="SQLQR788"></a><span class="italic"><a id="sthref1304"></a>on_comp_partitioned_table</span></p>
<pre dir="ltr">[ STORE IN ( tablespace [, tablespace ]... ) ]
( PARTITION
    [ partition ]
    [ { segment_attributes_clause
      | index_compression
      }...
    ] [ USABLE | UNUSABLE ] [ index_subpartition_clause ]
      [, PARTITION
           [ partition ]
           [ { segment_attributes_clause
             | index_compression
             }...
           ] [ USABLE | UNUSABLE ] [ index_subpartition_clause ]
       ]...
)
</pre>
<p class="subhead2"><a id="SQLQR789"></a><span class="italic"><a id="sthref1305"></a>on_hash_partitioned_table</span></p>
<pre dir="ltr">{ STORE IN (tablespace[, tablespace ]...)
| (PARTITION [ partition ] [ TABLESPACE tablespace ]
    [ index_compression ] [ USABLE | UNUSABLE ]
  [, PARTITION [ partition ] [ TABLESPACE tablespace ]
    [ index_compression ] [ USABLE | UNUSABLE ]] ...
  )
}
</pre>
<p class="subhead2"><a id="SQLQR790"></a><span class="italic"><a id="sthref1306"></a>on_list_partitioned_table</span></p>
<pre dir="ltr">( PARTITION
    [ partition ]
    [ { segment_attributes_clause
      | index_compression
      }...
    ] [ USABLE | UNUSABLE ]
      [, PARTITION
           [ partition ]
           [ { segment_attributes_clause
             | index_compression
             }...
           ] [ USABLE | UNUSABLE ]
      ]...
)
</pre>
<p class="subhead2"><a id="SQLQR791"></a><span class="italic"><a id="sthref1307"></a>on_object_clause</span></p>
<pre dir="ltr">ON { [ schema. ] object
   | USER user [, user]...
   | DIRECTORY directory_name
   | EDITION edition_name
   | MINING MODEL [ schema. ] mining_model_name
   | JAVA { SOURCE | RESOURCE } [ schema. ] object
   | SQL TRANSLATION PROFILE [ schema. ] profile
   }
</pre>
<p class="subhead2"><a id="SQLQR792"></a><span class="italic"><a id="sthref1308"></a>on_range_partitioned_table</span></p>
<pre dir="ltr">( PARTITION
    [ partition ]
    [ { segment_attributes_clause
      | index_compression
      }...
    ] [ USABLE | UNUSABLE ]
      [, PARTITION
          [ partition ]
          [ { segment_attributes_clause
            | index_compression
            }...
          ] [ USABLE | UNUSABLE ]
     ]...
)
</pre>
<p class="subhead2"><a id="SQLQR1042"></a><a id="sthref1309"></a><span class="italic">open_keystore</span></p>
<pre dir="ltr">SET KEYSTORE OPEN
  IDENTIFIED BY keystore_password
  [ CONTAINER = { ALL | CURRENT } ]
</pre>
<p class="subhead2"><a id="SQLQR793"></a><span class="italic"><a id="sthref1310"></a>order_by_clause</span></p>
<pre dir="ltr">ORDER [ SIBLINGS ] BY
{ expr | position | c_alias }
[ ASC | DESC ]
[ NULLS FIRST | NULLS LAST ]
  [, { expr | position | c_alias }
     [ ASC | DESC ]
     [ NULLS FIRST | NULLS LAST ]
  ]...
</pre>
<p class="subhead2"><a id="SQLQR1202"></a><a id="sthref1311"></a><span class="italic">ordinality_column</span></p>
<pre dir="ltr">column_name FOR ORDINALITY
</pre>
<p class="subhead2"><a id="SQLQR794"></a><span class="italic"><a id="sthref1312"></a>out_of_line_constraint</span></p>
<pre dir="ltr">  [ CONSTRAINT constraint_name ]
{ UNIQUE (column [, column ]...)
| PRIMARY KEY (column [, column ]...)
| FOREIGN KEY (column [, column ]...) references_clause
| CHECK (condition)
} [ constraint_state ]
</pre>
<p class="subhead2"><a id="SQLQR795"></a><span class="italic"><a id="sthref1313"></a>out_of_line_part_storage</span></p>
<pre dir="ltr">PARTITION partition
  { nested_table_col_properties | LOB_storage_clause | varray_col_properties }
    [ nested_table_col_properties | LOB_storage_clause | varray_col_properties ]...
[ ( SUBPARTITION subpartition
   { nested_table_col_properties | LOB_storage_clause | varray_col_properties }
     [ nested_table_col_properties | LOB_storage_clause | varray_col_properties
     ]...
    [, SUBPARTITION subpartition
     { nested_table_col_properties | LOB_storage_clause | varray_col_properties }
       [ nested_table_col_properties | LOB_storage_clause | varray_col_properties
       ]...
    ]...
  )
]
</pre>
<p class="subhead2"><a id="SQLQR796"></a><span class="italic"><a id="sthref1314"></a>out_of_line_ref_constraint</span></p>
<pre dir="ltr">{ SCOPE FOR ({ ref_col | ref_attr })
    IS [ schema. ] scope_table
| REF ({ ref_col | ref_attr }) WITH ROWID
| [ CONSTRAINT constraint_name ] FOREIGN KEY
    ( { ref_col [, ref_col ] | ref_attr [, ref_attr ] } ) references_clause
    [ constraint_state ]
}
</pre>
<p class="subhead2"><a id="SQLQR797"></a><span class="italic"><a id="sthref1315"></a>outer_join_clause</span></p>
<pre dir="ltr">  [ query_partition_clause ] [ NATURAL ]
outer_join_type JOIN table_reference
  [ query_partition_clause ]
  [ ON condition
  | USING ( column [, column ]...)
  ]
</pre>
<p class="subhead2"><a id="SQLQR798"></a><span class="italic"><a id="sthref1316"></a>outer_join_type</span></p>
<pre dir="ltr">{ FULL | LEFT | RIGHT } [ OUTER ]
</pre>
<p class="subhead2"><a id="SQLQR799"></a><span class="italic"><a id="sthref1317"></a>parallel_clause</span></p>
<pre dir="ltr">{ NOPARALLEL | PARALLEL [ integer ] }
</pre>
<p class="subhead2"><a id="SQLQR800"></a><span class="italic"><a id="sthref1318"></a>partial_database_recovery</span></p>
<pre dir="ltr">{ TABLESPACE tablespace [, tablespace ]...
| DATAFILE { &#39;filename&#39; | filenumber }
             [, &#39;filename&#39; | filenumber ]...
}
</pre>
<p class="subhead2"><a id="SQLQR1043"></a><span class="italic"><a id="sthref1319"></a>partial_index_clause</span></p>
<pre dir="ltr">INDEXING { PARTIAL | FULL }
</pre>
<p class="subhead2"><a id="SQLQR801"></a><span class="italic"><a id="sthref1320"></a>partition_attributes</span></p>
<pre dir="ltr">[ { physical_attributes_clause
  | logging_clause
  | allocate_extent_clause
  | deallocate_unused_clause
  | shrink_clause
  }...
]
[ OVERFLOW
  { physical_attributes_clause
  | logging_clause
  | allocate_extent_clause
  | deallocate_unused_clause
  }...
]
[ table_compression ]
[ inmemory_clause ]
[ { { LOB LOB_item | VARRAY varray } (modify_LOB_parameters) }...]
</pre>
<p class="subhead2"><a id="SQLQR802"></a><span class="italic"><a id="sthref1321"></a>partition_extended_name</span></p>
<pre dir="ltr">PARTITION partition
| 
PARTITION FOR ( partition_key_value [, partition_key_value]... )
</pre>
<p class="subhead2"><a id="SQLQR1044"></a><a id="sthref1322"></a><span class="italic">partition_extended_names</span></p>
<pre dir="ltr">{ PARTITION | PARTITIONS }
partition | { FOR ( partition_key_value [, partition_key_value ]... ) }
  [, partition | { FOR ( partition_key_value [, partition_key_value ]... ) } ]...
</pre>
<p class="subhead2"><a id="SQLQR803"></a><span class="italic"><a id="sthref1323"></a>partition_extension_clause</span></p>
<pre dir="ltr">{ PARTITION (partition)
| PARTITION FOR (partition_key_value [, partition_key_value]...)
| SUBPARTITION (subpartition)
| SUBPARTITION FOR (subpartition_key_value [, subpartition_key_value]...)
}
</pre>
<p class="subhead2"><a id="SQLQR1045"></a><a id="sthref1324"></a><span class="italic">partition_or_key_value</span></p>
<pre dir="ltr">partition
|
FOR ( partition_key_value [, partition_key_value ]... )
</pre>
<p class="subhead2"><a id="SQLQR804"></a><span class="italic"><a id="sthref1325"></a>partition_spec</span></p>
<pre dir="ltr">PARTITION [ partition ] [ table_partition_description ]
</pre>
<p class="subhead2"><a id="SQLQR805"></a><span class="italic"><a id="sthref1326"></a>partitioning_storage_clause</span></p>
<pre dir="ltr">[ { TABLESPACE tablespace
  | OVERFLOW [TABLESPACE tablespace]
  | table_compression
  | index_compression
  | inmemory_clause
  | ilm_clause
  | LOB_partitioning_storage
  | VARRAY varray_item STORE AS [SECUREFILE | BASICFILE] LOB LOB_segname
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR806"></a><span class="italic"><a id="sthref1327"></a>password_parameters</span></p>
<pre dir="ltr">{ { FAILED_LOGIN_ATTEMPTS
  | PASSWORD_LIFE_TIME
  | PASSWORD_REUSE_TIME
  | PASSWORD_REUSE_MAX
  | PASSWORD_LOCK_TIME
  | PASSWORD_GRACE_TIME
  }
  { expr | UNLIMITED | DEFAULT }
| PASSWORD_VERIFY_FUNCTION
  { function | NULL | DEFAULT }
}
</pre>
<p class="subhead2"><a id="SQLQR1046"></a><a id="sthref1328"></a><span class="italic">path_prefix_clause</span></p>
<pre dir="ltr">PATH_PREFIX = { &#39;path_name&#39; | NONE }
</pre>
<p class="subhead2"><a id="SQLQR1047"></a><a id="sthref1329"></a><span class="italic">pdb_change_state</span></p>
<pre dir="ltr">[ pdb_name ] { pdb_open | pdb_close | pdb_save_or_discard_state }
</pre>
<p class="subhead2"><a id="SQLQR1048"></a><a id="sthref1330"></a><span class="italic">pdb_change_state_from_root</span></p>
<pre dir="ltr">{ pdb_name [, pdb_name ]... | ALL [ EXCEPT pdb_name [, pdb_name ]... ] }
{ pdb_open | pdb_close | pdb_save_or_discard_state }
</pre>
<p class="subhead2"><a id="SQLQR1049"></a><a id="sthref1331"></a><span class="italic">pdb_close</span></p>
<pre dir="ltr">CLOSE [ IMMEDIATE ] [ instances_clause | relocate_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1050"></a><a id="sthref1332"></a><span class="italic">pdb_datafile_clause</span></p>
<pre dir="ltr">[ pdb_name ] DATAFILE
  { { { &#39;filename&#39; | filenumber } [, &#39;filename&#39; | filenumber ]... } | ALL }
  { ONLINE | OFFLINE }
</pre>
<p class="subhead2"><a id="SQLQR1051"></a><a id="sthref1333"></a><span class="italic">pdb_dba_roles</span></p>
<pre dir="ltr">ROLES = ( role [, role ]... )
</pre>
<p class="subhead2"><a id="SQLQR1203"></a><span class="italic"><a id="sthref1334"></a>pdb_force_logging_clause</span></p>
<pre dir="ltr">{ ENABLE | DISABLE } FORCE { LOGGING | NOLOGGING }
</pre>
<p class="subhead2"><a id="SQLQR1137"></a><a id="sthref1335"></a><span class="italic">pdb_general_recovery</span></p>
<pre dir="ltr">RECOVER [ AUTOMATIC ]  [ FROM &#39;location&#39; ]
  [ DATABASE
  |
  TABLESPACE tablespace [, tablespace ]...
  |
  DATAFILE { &#39;filename&#39; | filenumber }
             [, &#39;filename&#39; | filenumber ]...
  |
  LOGFILE &#39;filename&#39;
  |
  CONTINUE [ DEFAULT ]
  ]
</pre>
<p class="subhead2"><a id="SQLQR1204"></a><a id="sthref1336"></a><span class="italic">pdb_logging_clauses</span></p>
<pre dir="ltr">{ logging_clause
| pdb_force_logging_clause
}
</pre>
<p class="subhead2"><a id="SQLQR1052"></a><a id="sthref1337"></a><span class="italic">pdb_open</span></p>
<pre dir="ltr">OPEN
  { [ READ WRITE | READ ONLY ] [ RESTRICTED ] [ FORCE ]
  | [ READ WRITE ] UPGRADE [ RESTRICTED ]
  | RESETLOGS
  }
  [ instances_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1130"></a><a id="sthref1338"></a><span class="italic">pdb_recovery_clauses</span></p>
<pre dir="ltr">[ pdb_name ] { pdb_general_recovery
             | { BEGIN | END } BACKUP
             | { ENABLE | DISABLE } RECOVERY
             }
</pre>
<p class="subhead2"><a id="SQLQR1205"></a><a id="sthref1339"></a><span class="italic">pdb_save_or_discard_state</span></p>
<pre dir="ltr">{ SAVE | DISCARD } STATE [ instances_clause ]
</pre>
<p class="subhead2"><a id="SQLQR1053"></a><a id="sthref1340"></a><span class="italic">pdb_settings_clauses</span></p>
<pre dir="ltr">[ pdb_name ]
{ DEFAULT EDITION = edition_name
| SET DEFAULT ( BIGFILE | SMALLFILE ) TABLESPACE
| DEFAULT TABLESPACE tablespace_name
| DEFAULT TEMPORARY TABLESPACE { tablespace | tablespace_group_name }
| RENAME GLOBAL_NAME TO database.domain [. domain ]...
| set_time_zone_clause
| database_file_clauses
| supplemental_db_logging
| pdb_storage_clause
| pdb_logging_clauses
}
</pre>
<p class="subhead2"><a id="SQLQR1054"></a><a id="sthref1341"></a><span class="italic">pdb_storage_clause</span></p>
<pre dir="ltr">STORAGE
  { ( MAXSIZE { UNLIMITED | size_clause }
    |
    MAX_SHARED_TEMP_SIZE { UNLIMITED | size_clause }... )
  |
  UNLIMITED
  }
</pre>
<p class="subhead2"><a id="SQLQR1055"></a><a id="sthref1342"></a><span class="italic">pdb_unplug_clause</span></p>
<pre dir="ltr">pdb_name UNPLUG INTO &#39;filename&#39;
</pre>
<p class="subhead2"><a id="SQLQR1056"></a><a id="sthref1343"></a><span class="italic">period_definition</span></p>
<pre dir="ltr">PERIOD FOR valid_time_column [ ( start_time_column, end_time_column ) ]
</pre>
<p class="subhead2"><a id="SQLQR807"></a><span class="italic"><a id="sthref1344"></a>permanent_tablespace_clause</span></p>
<pre dir="ltr">TABLESPACE tablespace
  [ DATAFILE file_specification [, file_specification ]... ]
{ MINIMUM EXTENT size_clause
| BLOCKSIZE integer [ K ]
| logging_clause
| FORCE LOGGING
| ENCRYPTION tablespace_encryption_spec
| DEFAULT [ table_compression ] [ inmemory_clause ] [ ilm_clause ] [ storage_clause ]
| { ONLINE | OFFLINE }
| extent_management_clause
| segment_management_clause
| flashback_mode_clause
}...
</pre>
<p class="subhead2"><a id="SQLQR808"></a><span class="italic"><a id="sthref1345"></a>physical_attributes_clause</span></p>
<pre dir="ltr">[ { PCTFREE integer
  | PCTUSED integer
  | INITRANS integer
  | storage_clause
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR809"></a><span class="italic"><a id="sthref1346"></a>physical_properties</span></p>
<pre dir="ltr">{ [ deferred_segment_creation ] segment_attributes_clause [ table_compression ]
    [ inmemory_table_clause ] [ ilm_clause ]
| [ deferred_segment_creation ] ORGANIZATION
  { HEAP [ segment_attributes_clause ] heap_org_table_clause
  | INDEX [ segment_attributes_clause ] index_org_table_clause
  | EXTERNAL external_table_clause
  }
| CLUSTER cluster (column [, column ]...)
}
</pre>
<p class="subhead2"><a id="SQLQR810"></a><span class="italic"><a id="sthref1347"></a>pivot_clause</span></p>
<pre dir="ltr">PIVOT [ XML ]
  ( aggregate_function ( expr ) [[AS] alias ]
      [, aggregate_function ( expr ) [[AS] alias ] ]...
    pivot_for_clause
    pivot_in_clause
  )
</pre>
<p class="subhead2"><a id="SQLQR811"></a><span class="italic"><a id="sthref1348"></a>pivot_for_clause</span></p>
<pre dir="ltr">FOR { column
    | ( column [, column]... )
    }
</pre>
<p class="subhead2"><a id="SQLQR812"></a><span class="italic"><a id="sthref1349"></a>pivot_in_clause</span></p>
<pre dir="ltr">IN ( { { { expr
         | ( expr [, expr]... )
         } [ [ AS] alias]
       }...
     | subquery
     | ANY [, ANY]...
     }
   )
</pre>
<p class="subhead2"><a id="SQLQR1057"></a><a id="sthref1350"></a><span class="italic">plsql_declarations</span></p>
<pre dir="ltr">{ function_declaration | procedure_declaration }...
</pre>
<p class="subhead2"><a id="SQLQR1206"></a><a id="sthref1351"></a><span class="italic">prefix_compression</span></p>
<pre dir="ltr">COMPRESS [ integer ] | NOCOMPRESS
</pre>
<p class="subhead2"><a id="SQLQR1058"></a><a id="sthref1352"></a><span class="italic">privilege_audit_clause</span></p>
<pre dir="ltr">PRIVILEGES system_privilege [, system_privilege ]...
</pre>
<p class="subhead2"><a id="SQLQR1138"></a><a id="sthref1353"></a><span class="italic">program_unit</span></p>
<pre dir="ltr">{ FUNCTION [ schema. ] function_name
|
PROCEDURE [ schema. ] procedure_name
|
PACKAGE [ schema. ] package_name }
</pre>
<p class="subhead2"><a id="SQLQR813"></a><span class="italic"><a id="sthref1354"></a>proxy_clause</span></p>
<pre dir="ltr">{ GRANT CONNECT THROUGH { ENTERPRISE USERS | db_user_proxy db_user_proxy_clauses }
| REVOKE CONNECT THROUGH { ENTERPRISE USERS | db_user_proxy }}
</pre>
<p class="subhead2"><a id="SQLQR814"></a><span class="italic"><a id="sthref1355"></a>qualified_disk_clause</span></p>
<pre dir="ltr">search_string
[ NAME disk_name ]
[ SIZE size_clause ]
[ FORCE | NOFORCE ]
</pre>
<p class="subhead2"><a id="SQLQR815"></a><span class="italic"><a id="sthref1356"></a>qualified_template_clause</span></p>
<pre dir="ltr">ATTRIBUTE
( redundancy_clause 
  striping_clause 
  disk_region_clause
)
</pre>
<p class="subhead2"><a id="SQLQR816"></a><span class="italic"><a id="sthref1357"></a>query_block</span></p>
<pre dir="ltr">  [ with_clause ]
SELECT [ hint ] [ { { DISTINCT | UNIQUE } | ALL } ] select_list
  FROM { table_reference | join_clause | ( join_clause ) }
         [ , { table_reference | join_clause | (join_clause) } ] ...
  [ where_clause ]
  [ hierarchical_query_clause ]
  [ group_by_clause ]
  [ model_clause ]
</pre>
<p class="subhead2"><a id="SQLQR817"></a><span class="italic"><a id="sthref1358"></a>query_partition_clause</span></p>
<pre dir="ltr">PARTITION BY
  { expr[, expr ]...
  | ( expr[, expr ]... )
  }
</pre>
<p class="subhead2"><a id="SQLQR1059"></a><a id="sthref1359"></a><span class="italic">query_rewrite_clause</span></p>
<pre dir="ltr">{ ENABLE | DISABLE } QUERY REWRITE [ unusable_editions_clause ]
</pre>
<p class="subhead2"><a id="SQLQR818"></a><span class="italic"><a id="sthref1360"></a>query_table_expression</span></p>
<pre dir="ltr">{ query_name
| [ schema. ]
  { table [ partition_extension_clause
          | @ dblink
          ]
  | { view | materialized view } [ @ dblink ]
  } [sample_clause]
| [ LATERAL ] (subquery [ subquery_restriction_clause ])
| table_collection_expression
}
</pre>
<p class="subhead2"><a id="SQLQR819"></a><span class="italic"><a id="sthref1361"></a>quiesce_clauses</span></p>
<pre dir="ltr">QUIESCE RESTRICTED | UNQUIESCE
</pre>
<p class="subhead2"><a id="SQLQR820"></a><span class="italic"><a id="sthref1362"></a>range_partition_desc</span></p>
<pre dir="ltr">PARTITION [partition]
range_values_clause
table_partition_description
[ ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subparts_by_quantity ]
</pre>
<p class="subhead2"><a id="SQLQR821"></a><span class="italic"><a id="sthref1363"></a>range_partitions</span></p>
<pre dir="ltr">PARTITION BY RANGE (column[, column ]...)
  [ INTERVAL (expr) [ STORE IN ( tablespace [, tablespace]...) ]]
( PARTITION [ partition ]
    range_values_clause table_partition_description
      [, PARTITION [ partition ]
        range_values_clause table_partition_description
      ]...
)
</pre>
<p class="subhead2"><a id="SQLQR822"></a><span class="italic"><a id="sthref1364"></a>range_subpartition_desc</span></p>
<pre dir="ltr">SUBPARTITION [subpartition] range_values_clause
  [indexing_clause] [partitioning_storage_clause]
</pre>
<p class="subhead2"><a id="SQLQR823"></a><span class="italic"><a id="sthref1365"></a>range_values_clause</span></p>
<pre dir="ltr">VALUES LESS THAN
  ({ literal | MAXVALUE }
     [, { literal | MAXVALUE } ]...
  )
</pre>
<p class="subhead2"><a id="SQLQR824"></a><span class="italic"><a id="sthref1366"></a>rebalance_diskgroup_clause</span></p>
<pre dir="ltr">REBALANCE [POWER integer] [WAIT | NOWAIT]
</pre>
<p class="subhead2"><a id="SQLQR825"></a><span class="italic"><a id="sthref1367"></a>rebuild_clause</span></p>
<pre dir="ltr">REBUILD
  [ { PARTITION partition
    | SUBPARTITION subpartition
    }
  | { REVERSE | NOREVERSE }
  ]
  [ parallel_clause
  | TABLESPACE tablespace
  | PARAMETERS ( &#39;ODCI_parameters&#39; )
  | XMLIndex_parameters_clause
  | ONLINE
  | physical_attributes_clause
  | index_compression
  | logging_clause
  | partial_index_clause
  ]...
</pre>
<p class="subhead2"><a id="SQLQR826"></a><span class="italic"><a id="sthref1368"></a>records_per_block_clause</span></p>
<pre dir="ltr">{ MINIMIZE | NOMINIMIZE } RECORDS_PER_BLOCK
</pre>
<p class="subhead2"><a id="SQLQR827"></a><span class="italic"><a id="sthref1369"></a>recovery_clauses</span></p>
<pre dir="ltr">{ general_recovery
| managed_standby_recovery
| BEGIN BACKUP
| END BACKUP
}
</pre>
<p class="subhead2"><a id="SQLQR828"></a><span class="italic"><a id="sthref1370"></a>redo_log_file_spec</span></p>
<pre dir="ltr">[ &#39;filename | ASM_filename&#39;
| (&#39;filename | ASM_filename&#39;
   [, &#39;filename | ASM_filename&#39; ]...)
]
[ SIZE size_clause ]
[ BLOCKSIZE size_clause
[ REUSE ]
</pre>
<p class="subhead2"><a id="SQLQR829"></a><span class="italic"><a id="sthref1371"></a>redundancy_clause</span></p>
<pre dir="ltr">[ MIRROR | HIGH | UNPROTECTED ]
</pre>
<p class="subhead2"><a id="SQLQR830"></a><span class="italic"><a id="sthref1372"></a>reference_model</span></p>
<pre dir="ltr">REFERENCE reference_model_name ON (subquery)
  model_column_clauses [ cell_reference_options ]
</pre>
<p class="subhead2"><a id="SQLQR831"></a><span class="italic"><a id="sthref1373"></a>reference_partition_desc</span></p>
<pre dir="ltr">PARTITION [partition] [table_partition_description] )
</pre>
<p class="subhead2"><a id="SQLQR832"></a><span class="italic"><a id="sthref1374"></a>reference_partitioning</span></p>
<pre dir="ltr">PARTITION BY REFERENCE ( constraint ) 
  [ (reference_partition_desc...) ]
</pre>
<p class="subhead2"><a id="SQLQR833"></a><span class="italic"><a id="sthref1375"></a>references_clause</span></p>
<pre dir="ltr">REFERENCES [ schema. ] object [ (column [, column ]...) ]
  [ON DELETE { CASCADE | SET NULL } ]
</pre>
<p class="subhead2"><a id="SQLQR834"></a><span class="italic"><a id="sthref1376"></a>register_logfile_clause</span></p>
<pre dir="ltr">REGISTER [ OR REPLACE ]
  [ PHYSICAL | LOGICAL ]
LOGFILE [ file_specification  [, file_specification ]...
  [ FOR logminer_session_name ]
</pre>
<p class="subhead2"><a id="SQLQR835"></a><span class="italic"><a id="sthref1377"></a>relational_properties</span></p>
<pre dir="ltr">{ column_definition
| virtual_column_definition
| period_definition
| { out_of_line_constraint | out_of_line_ref_constraint }
| supplemental_logging_props
}
  [, { column_definition
     | virtual_column_definition
     | period_definition
     | { out_of_line_constraint | out_of_line_ref_constraint }
     | supplemental_logging_props
     }
  ]...
</pre>
<p class="subhead2"><a id="SQLQR836"></a><span class="italic"><a id="sthref1378"></a>relational_table</span></p>
<pre dir="ltr">[ (relational_properties) ]
[ ON COMMIT { DELETE | PRESERVE } ROWS ]
[ physical_properties ]
[ table_properties ]
</pre>
<p class="subhead2"><a id="SQLQR1060"></a><a id="sthref1379"></a><span class="italic">relocate_clause</span></p>
<pre dir="ltr">RELOCATE [ TO &#39;instance_name&#39; ] 
| NORELOCATE
</pre>
<p class="subhead2"><a id="SQLQR837"></a><span class="italic"><a id="sthref1380"></a>rename_column_clause</span></p>
<pre dir="ltr">RENAME COLUMN old_name TO new_name
</pre>
<p class="subhead2"><a id="SQLQR1139"></a><a id="sthref1381"></a><span class="italic">rename_disk_clause</span></p>
<pre dir="ltr">RENAME
  { DISK old_disk_name TO new_disk_name [, old_disk_name TO new_disk_name ]...
  | DISKS ALL }
</pre>
<p class="subhead2"><a id="SQLQR838"></a><span class="italic"><a id="sthref1382"></a>rename_index_partition</span></p>
<pre dir="ltr">RENAME
  { PARTITION partition | SUBPARTITION subpartition }
TO new_name
</pre>
<p class="subhead2"><a id="SQLQR839"></a><span class="italic"><a id="sthref1383"></a>rename_partition_subpart</span></p>
<pre dir="ltr">RENAME { partition_extended_name
       | subpartition_extended_name
       } TO new_name
</pre>
<p class="subhead2"><a id="SQLQR1061"></a><a id="sthref1384"></a><span class="italic">replace_disk_clause</span></p>
<pre dir="ltr">REPLACE DISK disk_name WITH &#39;path_name&#39; [ FORCE | NOFORCE ]
  [, disk_name WITH &#39;path_name&#39; [ FORCE | NOFORCE ] ]...
[ POWER integer ] [ WAIT | NOWAIT ]
</pre>
<p class="subhead2"><a id="SQLQR840"></a><span class="italic"><a id="sthref1385"></a>resize_disk_clause</span></p>
<pre dir="ltr">RESIZE ALL [ SIZE size_clause ]
</pre>
<p class="subhead2"><a id="SQLQR841"></a><span class="italic"><a id="sthref1386"></a>resource_parameters</span></p>
<pre dir="ltr">{ { SESSIONS_PER_USER
  | CPU_PER_SESSION
  | CPU_PER_CALL
  | CONNECT_TIME
  | IDLE_TIME
  | LOGICAL_READS_PER_SESSION
  | LOGICAL_READS_PER_CALL
  | COMPOSITE_LIMIT
  }
  { integer | UNLIMITED | DEFAULT }
| PRIVATE_SGA
  { size_clause | UNLIMITED | DEFAULT }
}
</pre>
<p class="subhead2"><a id="SQLQR842"></a><span class="italic"><a id="sthref1387"></a>return_rows_clause</span></p>
<pre dir="ltr">RETURN { UPDATED | ALL } ROWS
</pre>
<p class="subhead2"><a id="SQLQR843"></a><span class="italic"><a id="sthref1388"></a>returning_clause</span></p>
<pre dir="ltr">{ RETURN | RETURNING } expr [, expr ]...
INTO data_item [, data_item ]...
</pre>
<p class="subhead2"><a id="SQLQR1062"></a><a id="sthref1389"></a><span class="italic">reverse_migrate_key</span></p>
<pre dir="ltr">SET [ ENCRYPTION ] KEY IDENTIFIED BY software_keystore_password
  REVERSE MIGRATE USING HSM_auth_string
</pre>
<p class="subhead2"><a id="SQLQR844"></a><span class="italic"><a id="sthref1390"></a>revoke_object_privileges</span></p>
<pre dir="ltr">{ object_privilege | ALL [ PRIVILEGES ] }
  [, { object_privilege | ALL [ PRIVILEGES ] } ]...
on_object_clause
FROM revokee_clause
[ CASCADE CONSTRAINTS | FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR1140"></a><a id="sthref1391"></a><span class="italic">revoke_roles_from_programs</span></p>
<pre dir="ltr">{ role [, role ]... | ALL } FROM program_unit [, program_unit ]...
</pre>
<p class="subhead2"><a id="SQLQR845"></a><span class="italic"><a id="sthref1392"></a>revoke_system_privileges</span></p>
<pre dir="ltr">{ system_privilege | role | ALL PRIVILEGES }
  [, { system_privilege | role | ALL PRIVILEGES } ]...
FROM revokee_clause
</pre>
<p class="subhead2"><a id="SQLQR1164"></a><a id="sthref1393"></a><span class="italic">revokee_clause</span></p>
<pre dir="ltr">{ user | role | PUBLIC }
  [, { user | role | PUBLIC } ]...
</pre>
<p class="subhead2"><a id="SQLQR1063"></a><a id="sthref1394"></a><span class="italic">role_audit_clause</span></p>
<pre dir="ltr">ROLES role [, role ]...
</pre>
<p class="subhead2"><a id="SQLQR846"></a><span class="italic"><a id="sthref1395"></a>rolling_migration_clauses</span></p>
<pre dir="ltr">{ START ROLLING MIGRATION TO &#39;ASM_version&#39;
| STOP ROLLING MIGRATION
}
</pre>
<p class="subhead2"><a id="SQLQR1064"></a><span class="italic"><a id="sthref1396"></a>rolling_patch_clauses</span></p>
<pre dir="ltr">{ START ROLLING PATCH
| STOP ROLLING PATCH
}
</pre>
<p class="subhead2"><a id="SQLQR847"></a><span class="italic"><a id="sthref1397"></a>rollup_cube_clause</span></p>
<pre dir="ltr">{ ROLLUP | CUBE } (grouping_expression_list)
</pre>
<p class="subhead2"><a id="SQLQR848"></a><span class="italic"><a id="sthref1398"></a>routine_clause</span></p>
<pre dir="ltr">[ schema. ] [ type. | package. ]
{ function | procedure | method }
[ @dblink_name ]
( [ argument [, argument ]... ] )
</pre>
<p class="subhead2"><a id="SQLQR1065"></a><span class="italic"><a id="sthref1399"></a>row_limiting_clause</span></p>
<pre dir="ltr">[ OFFSET offset { ROW | ROWS } ]
[ FETCH { FIRST | NEXT } [ { rowcount | percent PERCENT } ]
    { ROW | ROWS } { ONLY | WITH TIES } ]
</pre>
<p class="subhead2"><a id="SQLQR849"></a><span class="italic"><a id="sthref1400"></a>row_movement_clause</span></p>
<pre dir="ltr">{ ENABLE | DISABLE } ROW MOVEMENT
</pre>
<p class="subhead2"><a id="SQLQR1066"></a><a id="sthref1401"></a><span class="italic">row_pattern</span></p>
<pre dir="ltr">[ row_pattern | ] row_pattern_term

Note: The vertical bar is part of the syntax rather than BNF notation.
</pre>
<p class="subhead2"><a id="SQLQR1067"></a><a id="sthref1402"></a><span class="italic">row_pattern_aggregate_func</span></p>
<pre dir="ltr">[ RUNNING | FINAL ] aggregate_function
</pre>
<p class="subhead2"><a id="SQLQR1068"></a><a id="sthref1403"></a><span class="italic">row_pattern_classifier_func</span></p>
<pre dir="ltr">CLASSIFIER()
</pre>
<p class="subhead2"><a id="SQLQR1069"></a><span class="italic"><a id="sthref1404"></a>row_pattern_clause</span></p>
<pre dir="ltr">MATCH_RECOGNIZE {
  [ row_pattern_partition_by ]
  [ row_pattern_order_by ]
  [ row_pattern_measures ]
  [ row_pattern_rows_per_match ]
  [ row_pattern_skip_to ]
  PATTERN (row_pattern)
  [ row_pattern_subset_clause ]
  DEFINE row_pattern_definition_list
  }
</pre>
<p class="subhead2"><a id="SQLQR1070"></a><a id="sthref1405"></a><span class="italic">row_pattern_definition</span></p>
<pre dir="ltr">variable_name AS condition
</pre>
<p class="subhead2"><a id="SQLQR1071"></a><a id="sthref1406"></a><span class="italic">row_pattern_definition_list</span></p>
<pre dir="ltr">row_pattern_definition [, row_pattern_definition ]...
</pre>
<p class="subhead2"><a id="SQLQR1072"></a><a id="sthref1407"></a><span class="italic">row_pattern_factor</span></p>
<pre dir="ltr">row_pattern_primary [ row_pattern_quantifier ]
</pre>
<p class="subhead2"><a id="SQLQR1073"></a><span class="italic"><a id="sthref1408"></a>row_pattern_match_num_func</span></p>
<pre dir="ltr">MATCH_NUMBER()
</pre>
<p class="subhead2"><a id="SQLQR1074"></a><span class="italic"><a id="sthref1409"></a>row_pattern_measure_column</span></p>
<pre dir="ltr">expr AS c_alias
</pre>
<p class="subhead2"><a id="SQLQR1075"></a><a id="sthref1410"></a><span class="italic">row_pattern_measures</span></p>
<pre dir="ltr">MEASURES row_pattern_measure_column [, row_pattern_measure_column ]...
</pre>
<p class="subhead2"><a id="SQLQR1076"></a><a id="sthref1411"></a><span class="italic">row_pattern_nav_compound</span></p>
<pre dir="ltr">{ PREV | NEXT }
( [ RUNNING | FINAL ] { FIRST | LAST } ( expr [, offset ] ) [, offset] )
</pre>
<p class="subhead2"><a id="SQLQR1078"></a><a id="sthref1412"></a><span class="italic">row_pattern_nav_logical</span></p>
<pre dir="ltr">[ RUNNING | FINAL ] { FIRST | LAST } ( expr [, offset ] )
</pre>
<p class="subhead2"><a id="SQLQR1079"></a><a id="sthref1413"></a><span class="italic">row_pattern_nav_physical</span></p>
<pre dir="ltr">{ PREV | NEXT } ( expr [, offset ] )
</pre>
<p class="subhead2"><a id="SQLQR1077"></a><a id="sthref1414"></a><span class="italic">row_pattern_navigation_func</span></p>
<pre dir="ltr">row_pattern_nav_logical
| row_pattern_nav_physical
| row_pattern_nav_compound
</pre>
<p class="subhead2"><a id="SQLQR1080"></a><a id="sthref1415"></a><span class="italic">row_pattern_order_by</span></p>
<pre dir="ltr">ORDER BY column [, column ]...
</pre>
<p class="subhead2"><a id="SQLQR1081"></a><a id="sthref1416"></a><span class="italic">row_pattern_partition_by</span></p>
<pre dir="ltr">PARTITION BY column [, column ]...
</pre>
<p class="subhead2"><a id="SQLQR1082"></a><span class="italic"><a id="sthref1417"></a>row_pattern_permute</span></p>
<pre dir="ltr">PERMUTE ( row_pattern [, row_pattern ]...)
</pre>
<p class="subhead2"><a id="SQLQR1083"></a><a id="sthref1418"></a><span class="italic">row_pattern_primary</span></p>
<pre dir="ltr">variable_name
| $
| ^
| ( [ row_pattern ] )
| {- row_pattern -}
| row_pattern_permute

Note: The curly brackets are part of the syntax rather than BNF notation.
</pre>
<p class="subhead2"><a id="SQLQR1084"></a><a id="sthref1419"></a><span class="italic">row_pattern_quantifier</span></p>
<pre dir="ltr">* [ ? ]
| + [ ? ]
| ? [ ? ]
| { [ unsigned_integer ] , [ unsigned_integer ] } [ ? ]
| { unsigned_integer }

Note: The curly brackets are part of the syntax rather than BNF notation.
</pre>
<p class="subhead2"><a id="SQLQR1085"></a><a id="sthref1420"></a><span class="italic">row_pattern_rec_func</span></p>
<pre dir="ltr">row_pattern_classifier_func
| row_pattern_match_num_func
| row_pattern_navigation_func
| row_pattern_aggregate_func
</pre>
<p class="subhead2"><a id="SQLQR1086"></a><a id="sthref1421"></a><span class="italic">row_pattern_rows_per_match</span></p>
<pre dir="ltr">ONE ROW PER MATCH
| ALL ROWS PER MATCH
</pre>
<p class="subhead2"><a id="SQLQR1087"></a><a id="sthref1422"></a><span class="italic">row_pattern_skip_to</span></p>
<pre dir="ltr">AFTER MATCH {
  SKIP TO NEXT ROW
  | SKIP PAST LAST ROW
  | SKIP TO FIRST variable_name
  | SKIP TO LAST variable_name
  | SKIP TO variable_name
  }
</pre>
<p class="subhead2"><a id="SQLQR1088"></a><a id="sthref1423"></a><span class="italic">row_pattern_subset_clause</span></p>
<pre dir="ltr">SUBSET row_pattern_subset_item [, row_pattern_subset_item ]...
</pre>
<p class="subhead2"><a id="SQLQR1089"></a><a id="sthref1424"></a><span class="italic">row_pattern_subset_item</span></p>
<pre dir="ltr">variable_name = ( variable_name [, variable_name ] )
</pre>
<p class="subhead2"><a id="SQLQR1090"></a><a id="sthref1425"></a><span class="italic">row_pattern_term</span></p>
<pre dir="ltr">[ row_pattern_term ] row_pattern_factor
</pre>
<p class="subhead2"><a id="SQLQR850"></a><span class="italic"><a id="sthref1426"></a>sample_clause</span></p>
<pre dir="ltr">SAMPLE [ BLOCK ]
       (sample_percent)
       [ SEED (seed_value) ]
</pre>
<p class="subhead2"><a id="SQLQR851"></a><span class="italic"><a id="sthref1427"></a>scoped_table_ref_constraint</span></p>
<pre dir="ltr">{ SCOPE FOR ({ ref_column | ref_attribute })
  IS [ schema. ] { scope_table_name | c_alias }
}
</pre>
<p class="subhead2"><a id="SQLQR1091"></a><span class="italic"><a id="sthref1428"></a>scrub_clause</span></p>
<pre dir="ltr">SCRUB [ FILE &#39;ASM_filename&#39; | DISK disk_name ]
  [ REPAIR | NOREPAIR ]
  [ POWER { AUTO | LOW | HIGH | MAX } ]
  [ WAIT | NOWAIT ]
  [ FORCE | NOFORCE ]
</pre>
<p class="subhead2"><a id="SQLQR852"></a><span class="italic"><a id="sthref1429"></a>search_clause</span></p>
<pre dir="ltr">{ SEARCH
        { DEPTH FIRST BY c_alias [, c_alias]...
            [ ASC | DESC ]
            [ NULLS FIRST | NULLS LAST ]
         | BREADTH FIRST BY c_alias [, c_alias]...
            [ ASC | DESC ]
            [ NULLS FIRST | NULLS LAST ]
        }
        SET ordering_column
}
</pre>
<p class="subhead2"><a id="SQLQR853"></a><span class="italic"><a id="sthref1430"></a>searched_case_expression</span></p>
<pre dir="ltr">{ WHEN condition THEN return_expr }...
</pre>
<p class="subhead2"><a id="SQLQR1092"></a><a id="sthref1431"></a><span class="italic">secret_management_clauses</span></p>
<pre dir="ltr">{ add_update_secret
| delete_secret
}
</pre>
<p class="subhead2"><a id="SQLQR854"></a><span class="italic"><a id="sthref1432"></a>security_clause</span></p>
<pre dir="ltr">GUARD { ALL | STANDBY | NONE }
</pre>
<p class="subhead2"><a id="SQLQR855"></a><span class="italic"><a id="sthref1433"></a>security_clauses</span></p>
<pre dir="ltr">{ { ENABLE | DISABLE } RESTRICTED SESSION
  | SET ENCRYPTION WALLET OPEN
    IDENTIFIED BY { &#34;wallet_password&#34; | &#34;HSM_auth_string&#34; }
  | SET ENCRYPTION WALLET CLOSE
    [ IDENTIFIED BY { &#34;wallet_password&#34; | &#34;HSM_auth_string&#34; } ]
  | set_encryption_key
}
</pre>
<p class="subhead2"><a id="SQLQR856"></a><span class="italic"><a id="sthref1434"></a>segment_attributes_clause</span></p>
<pre dir="ltr">{ physical_attributes_clause
| TABLESPACE tablespace
| logging_clause
}...
</pre>
<p class="subhead2"><a id="SQLQR857"></a><span class="italic"><a id="sthref1435"></a>segment_management_clause</span></p>
<pre dir="ltr">SEGMENT SPACE MANAGEMENT { AUTO | MANUAL }
</pre>
<p class="subhead2"><a id="SQLQR858"></a><span class="italic"><a id="sthref1436"></a>select_list</span></p>
<pre dir="ltr">{ [t_alias.] *
| { query_name.*
  | [ schema. ]
    { table | view | materialized view } .*
  | expr [ [ AS ] c_alias ]
  }
    [, { query_name.*
       | [ schema. ]
         { table | view | materialized view } .*
       | expr [ [ AS ] c_alias ]
       }
    ]...
}
</pre>
<p class="subhead2"><a id="SQLQR1093"></a><span class="italic"><a id="sthref1437"></a>set_encryption_key</span></p>
<pre dir="ltr">{ SET ENCRYPTION KEY
  {
    [ &#34;certificate_id&#34; ] IDENTIFIED BY &#34;wallet_password&#34;
    |
    IDENTIFIED BY &#34;HSM_auth_string&#34; [ MIGRATE USING &#34;wallet_password&#34; ]
  }
}
</pre>
<p class="subhead2"><a id="SQLQR1094"></a><span class="italic"><a id="sthref1438"></a>set_key</span></p>
<pre dir="ltr">SET [ ENCRYPTION ] KEY [ USING TAG &#39;tag&#39; ]
  IDENTIFIED BY keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
  [ CONTAINER = { ALL | CURRENT } ]
</pre>
<p class="subhead2"><a id="SQLQR1095"></a><a id="sthref1439"></a><span class="italic">set_key_tag</span></p>
<pre dir="ltr">SET TAG &#39;tag&#39; FOR &#39;key_id&#39; IDENTIFIED BY keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR859"></a><span class="italic"><a id="sthref1440"></a>set_parameter_clause</span></p>
<pre dir="ltr">parameter_name =
   parameter_value [, parameter_value ]...
   [ COMMENT = string ]
   [ DEFERRED ]
   [ CONTAINER = { CURRENT | ALL } ]
   [ { SCOPE = { MEMORY | SPFILE | BOTH }
     | SID = { &#39;sid&#39; | &#39;*&#39; }
     }...
   ]
</pre>
<p class="subhead2"><a id="SQLQR860"></a><span class="italic"><a id="sthref1441"></a>set_subpartition_template</span></p>
<pre dir="ltr">SET SUBPARTITION TEMPLATE
   { ( range_subpartition_desc [, range_subpartition_desc]... )
   | ( list_subpartition_desc [, list_subpartition_desc]... )
   | ( individual_hash_subparts [, individual_hash_subparts]... )
   | ()
   | hash_subpartition_quantity
   }
</pre>
<p class="subhead2"><a id="SQLQR861"></a><span class="italic"><a id="sthref1442"></a>set_time_zone_clause</span></p>
<pre dir="ltr">SET TIME_ZONE =
   &#39;{ { + | - } hh : mi | time_zone_region }&#39;
</pre>
<p class="subhead2"><a id="SQLQR862"></a><span class="italic"><a id="sthref1443"></a>shrink_clause</span></p>
<pre dir="ltr">SHRINK SPACE [ COMPACT ] [ CASCADE ]
</pre>
<p class="subhead2"><a id="SQLQR863"></a><span class="italic"><a id="sthref1444"></a>shutdown_dispatcher_clause</span></p>
<pre dir="ltr">SHUTDOWN [ IMMEDIATE ] dispatcher_name
</pre>
<p class="subhead2"><a id="SQLQR864"></a><span class="italic"><a id="sthref1445"></a>simple_case_expression</span></p>
<pre dir="ltr">expr
  { WHEN comparison_expr THEN return_expr }...
</pre>
<p class="subhead2"><a id="SQLQR865"></a><span class="italic"><a id="sthref1446"></a>single_column_for_loop</span></p>
<pre dir="ltr">FOR dimension_column
  { IN ( { literal [, literal ]...
         | subquery
         }
       )
  | [ LIKE pattern ] FROM literal TO literal
      { INCREMENT | DECREMENT } literal
  }
</pre>
<p class="subhead2"><a id="SQLQR866"></a><span class="italic"><a id="sthref1447"></a>single_table_insert</span></p>
<pre dir="ltr">insert_into_clause
{ values_clause [ returning_clause ]
| subquery 
} [ error_logging_clause ]
</pre>
<p class="subhead2"><a id="SQLQR867"></a><span class="italic"><a id="sthref1448"></a>size_clause</span></p>
<pre dir="ltr">integer [ K | M | G | T | P | E ]
</pre>
<p class="subhead2"><a id="SQLQR1216"></a><a id="sthref1449"></a><span class="italic">source_file_directory</span></p>
<pre dir="ltr">SOURCE_FILE_DIRECTORY = { &#39;directory_path_name&#39; | NONE }
</pre>
<p class="subhead2"><a id="SQLQR1096"></a><a id="sthref1450"></a><span class="italic">source_file_name_convert</span></p>
<pre dir="ltr">SOURCE_FILE_NAME_CONVERT =
  { ( &#39;filename_pattern&#39;, &#39;replacement_filename_pattern&#39;
      [, &#39;filename_pattern&#39;, &#39;replacement_filename_pattern&#39; ]... )
    |
    NONE
  }
</pre>
<p class="subhead2"><a id="SQLQR868"></a><span class="italic"><a id="sthref1451"></a>split_index_partition</span></p>
<pre dir="ltr">SPLIT PARTITION partition_name_old
   AT (literal [, literal ]...)
   [ INTO (index_partition_description,
           index_partition_description
          )
   ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR869"></a><span class="italic"><a id="sthref1452"></a>split_nested_table_part</span></p>
<pre dir="ltr">NESTED TABLE column INTO
  ( nested_table_partition_spec, nested_table_partition_spec
    [split_nested_table_part]
  ) [split_nested_table_part]
</pre>
<p class="subhead2"><a id="SQLQR870"></a><span class="italic"><a id="sthref1453"></a>split_table_partition</span></p>
<pre dir="ltr">SPLIT partition_extended_name
  { AT (literal [, literal]... )
    [ INTO ( range_partition_desc, range_partition_desc ) ]
  | VALUES (literal [, literal] ... )
    [ INTO (list_partition_desc, list_partition_desc ) ]
  | INTO ( { range_partition_desc [, range_partition_desc ]...
           | list_partition_desc [, list_partition_desc ]... }
         , partition_spec )
  } [ split_nested_table_part ]
    [ dependent_tables_clause ]
    [ update_index_clauses ]
    [ parallel_clause ]
    [ allow_disallow_clustering ]
</pre>
<p class="subhead2"><a id="SQLQR871"></a><span class="italic"><a id="sthref1454"></a>split_table_subpartition</span></p>
<pre dir="ltr">SPLIT subpartition_extended_name
  { AT ( literal [, literal]... )
    [ INTO (range_subpartition_desc, range_subpartition_desc) ]
  | VALUES ({ literal | NULL  [, literal | NULL ]...})
    [ INTO (list_subpartition_desc, list_subpartition_desc) ]
  | INTO ( { range_subpartition_desc [, range_subpartition_desc ]...
           | list_subpartition_desc [, list_subpartition_desc ]... }
         , subpartition_spec )
  } [ dependent_tables_clause ]
    [ update_index_clauses ]
    [ parallel_clause ]
    [ allow_disallow_clustering ]
</pre>
<p class="subhead2"><a id="SQLQR872"></a><span class="italic"><a id="sthref1455"></a>sql_format</span></p>
<pre dir="ltr">[+ | -] days hours : minutes : seconds [. frac_secs ]
</pre>
<p class="subhead2"><a id="SQLQR1097"></a><a id="sthref1456"></a><span class="italic">standard_actions</span></p>
<pre dir="ltr">ACTIONS
  { { object_action | ALL }
    ON { DIRECTORY directory_name
       | MINING MODEL [ schema. ] object_name
       | [ schema. ] object_name }
  | { system_action | ALL }
  }
    [ { object_action | ALL }
      ON { DIRECTORY directory_name
         | MINING MODEL [ schema. ] object_name
         | [ schema. ] object_name }
    | { system_action | ALL } ]...
</pre>
<p class="subhead2"><a id="SQLQR873"></a><span class="italic"><a id="sthref1457"></a>standby_database_clauses</span></p>
<pre dir="ltr">{ { activate_standby_db_clause
| maximize_standby_db_clause
| register_logfile_clause
| commit_switchover_clause
| start_standby_clause
| stop_standby_clause
| convert_database_clause
} [ parallel_clause ] }
|
{ switchover_clause | failover_clause }
</pre>
<p class="subhead2"><a id="SQLQR1207"></a><a id="sthref1458"></a><span class="italic">standbys_clause</span></p>
<pre dir="ltr">STANDBYS = { NONE | ALL }
</pre>
<p class="subhead2"><a id="SQLQR874"></a><span class="italic"><a id="sthref1459"></a>start_standby_clause</span></p>
<pre dir="ltr">START LOGICAL STANDBY APPLY
[ IMMEDIATE ]
[ NODELAY ]
[ NEW PRIMARY dblink
| INITIAL [ scn_value ]
| { SKIP FAILED TRANSACTION | FINISH }
]
</pre>
<p class="subhead2"><a id="SQLQR875"></a><span class="italic"><a id="sthref1460"></a>startup_clauses</span></p>
<pre dir="ltr">{ MOUNT [ { STANDBY | CLONE } DATABASE ]
| OPEN
  { [ READ WRITE ]
      [ RESETLOGS | NORESETLOGS ]
        [ UPGRADE | DOWNGRADE ]
  | READ ONLY
  }
}
</pre>
<p class="subhead2"><a id="SQLQR876"></a><span class="italic"><a id="sthref1461"></a>still_image_object_types</span></p>
<pre dir="ltr">{ SI_StillImage
| SI_AverageColor
| SI_PositionalColor
| SI_ColorHistogram
| SI_Texture
| SI_FeatureList
| SI_Color
}
</pre>
<p class="subhead2"><a id="SQLQR877"></a><span class="italic"><a id="sthref1462"></a>stop_standby_clause</span></p>
<pre dir="ltr">{ STOP | ABORT } LOGICAL STANDBY APPLY
</pre>
<p class="subhead2"><a id="SQLQR878"></a><span class="italic"><a id="sthref1463"></a>storage_clause</span></p>
<pre dir="ltr">STORAGE
({ INITIAL size_clause
 | NEXT size_clause
 | MINEXTENTS integer
 | MAXEXTENTS { integer | UNLIMITED }
 | maxsize_clause
 | PCTINCREASE integer
 | FREELISTS integer
 | FREELIST GROUPS integer
 | OPTIMAL [ size_clause | NULL ]
 | BUFFER_POOL { KEEP | RECYCLE | DEFAULT }
 | FLASH_CACHE { KEEP | NONE | DEFAULT }
 | ENCRYPT
 } ...
)
</pre>
<p class="subhead2"><a id="SQLQR879"></a><span class="italic"><a id="sthref1464"></a>storage_table_clause</span></p>
<pre dir="ltr">WITH {SYSTEM | USER} MANAGED STORAGE TABLES
</pre>
<p class="subhead2"><a id="SQLQR880"></a><span class="italic"><a id="sthref1465"></a>string</span></p>
<pre dir="ltr">[ {N | n} ]
{ &#39;[ c ]...&#39;
| { Q | q } &#39;quote_delimiter c [ c ]... quote_delimiter&#39;
}
</pre>
<p class="subhead2"><a id="SQLQR881"></a><span class="italic"><a id="sthref1466"></a>striping_clause</span></p>
<pre dir="ltr">[ FINE | COARSE ]
</pre>
<p class="subhead2"><a id="SQLQR882"></a><span class="italic"><a id="sthref1467"></a>subpartition_by_hash</span></p>
<pre dir="ltr">SUBPARTITION BY HASH (column [, column ]...)
   [ SUBPARTITIONS integer
        [ STORE IN (tablespace [, tablespace ]...) ]
   | subpartition_template
   ]
</pre>
<p class="subhead2"><a id="SQLQR883"></a><span class="italic"><a id="sthref1468"></a>subpartition_by_list</span></p>
<pre dir="ltr">SUBPARTITION BY LIST (column) [ subpartition_template ]
</pre>
<p class="subhead2"><a id="SQLQR884"></a><span class="italic"><a id="sthref1469"></a>subpartition_by_range</span></p>
<pre dir="ltr">SUBPARTITION BY RANGE ( column [, column]... ) [subpartition_template]
</pre>
<p class="subhead2"><a id="SQLQR885"></a><span class="italic"><a id="sthref1470"></a>subpartition_extended_name</span></p>
<pre dir="ltr">SUBPARTITION subpartition
| 
SUBPARTITION FOR ( subpartition_key_value [, subpartition_key_value]... )
</pre>
<p class="subhead2"><a id="SQLQR1100"></a><a id="sthref1471"></a><span class="italic">subpartition_extended_names</span></p>
<pre dir="ltr">{ SUBPARTITION | SUBPARTITIONS }
subpartition | { FOR ( subpartition_key_value [, subpartition_key_value ]... ) }
  [, subpartition | { FOR ( subpartition_key_value [, subpartition_key_value ]... ) } ]...
</pre>
<p class="subhead2"><a id="SQLQR1101"></a><a id="sthref1472"></a><span class="italic">subpartition_or_key_value</span></p>
<pre dir="ltr">subpartition
|
FOR ( subpartition_key_value [, subpartition_key_value ]... )
</pre>
<p class="subhead2"><a id="SQLQR1102"></a><a id="sthref1473"></a><span class="italic">subpartition_spec</span></p>
<pre dir="ltr">SUBPARTITION [ subpartition ] [ partitioning_storage_clause ]
</pre>
<p class="subhead2"><a id="SQLQR886"></a><span class="italic"><a id="sthref1474"></a>subpartition_template</span></p>
<pre dir="ltr">SUBPARTITION TEMPLATE
  ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subpartition_quantity
</pre>
<p class="subhead2"><a id="SQLQR887"></a><span class="italic"><a id="sthref1475"></a>subquery</span></p>
<pre dir="ltr">{ query_block
| subquery { UNION [ALL] | INTERSECT | MINUS } subquery
    [ { UNION [ALL] | INTERSECT | MINUS } subquery ]...
| ( subquery )
} [ order_by_clause ] [ row_limiting_clause ]
</pre>
<p class="subhead2"><a id="SQLQR888"></a><span class="italic"><a id="sthref1476"></a>subquery_factoring_clause</span></p>
<pre dir="ltr">query_name ([c_alias [, c_alias]...]) AS (subquery) [search_clause] [cycle_clause]
[, query_name ([c_alias [, c_alias]...]) AS (subquery) [search_clause] [cycle_clause]]...
</pre>
<p class="subhead2"><a id="SQLQR889"></a><span class="italic"><a id="sthref1477"></a>subquery_restriction_clause</span></p>
<pre dir="ltr">WITH { READ ONLY
     | CHECK OPTION 
     } [ CONSTRAINT constraint ]
</pre>
<p class="subhead2"><a id="SQLQR890"></a><span class="italic"><a id="sthref1478"></a>substitutable_column_clause</span></p>
<pre dir="ltr">{ [ ELEMENT ] IS OF [ TYPE ] ( ONLY type )
| [ NOT ] SUBSTITUTABLE AT ALL LEVELS
}
</pre>
<p class="subhead2"><a id="SQLQR891"></a><span class="italic"><a id="sthref1479"></a>supplemental_db_logging</span></p>
<pre dir="ltr">{ ADD | DROP } SUPPLEMENTAL LOG
{ DATA
| supplemental_id_key_clause
| supplemental_plsql_clause
}
</pre>
<p class="subhead2"><a id="SQLQR892"></a><span class="italic"><a id="sthref1480"></a>supplemental_id_key_clause</span></p>
<pre dir="ltr">DATA
( { ALL | PRIMARY KEY | UNIQUE | FOREIGN KEY }
    [, { ALL | PRIMARY KEY | UNIQUE | FOREIGN KEY } ]...
)
COLUMNS
</pre>
<p class="subhead2"><a id="SQLQR893"></a><span class="italic"><a id="sthref1481"></a>supplemental_log_grp_clause</span></p>
<pre dir="ltr">GROUP log_group
(column [ NO LOG ]
  [, column [ NO LOG ] ]...)
  [ ALWAYS ]
</pre>
<p class="subhead2"><a id="SQLQR894"></a><span class="italic"><a id="sthref1482"></a>supplemental_logging_props</span></p>
<pre dir="ltr">SUPPLEMENTAL LOG { supplemental_log_grp_clause
                 | supplemental_id_key_clause
                 }
</pre>
<p class="subhead2"><a id="SQLQR895"></a><span class="italic"><a id="sthref1483"></a>supplemental_plsql_clause</span></p>
<pre dir="ltr">DATA FOR PROCEDURAL REPLICATION
</pre>
<p class="subhead2"><a id="SQLQR896"></a><span class="italic"><a id="sthref1484"></a>supplemental_table_logging</span></p>
<pre dir="ltr">{ ADD SUPPLEMENTAL LOG
  { supplemental_log_grp_clause | supplemental_id_key_clause }
    [, SUPPLEMENTAL LOG
       { supplemental_log_grp_clause | supplemental_id_key_clause }
    ]...
| DROP SUPPLEMENTAL LOG
  { supplemental_id_key_clause | GROUP log_group }
    [, SUPPLEMENTAL LOG
       { supplemental_id_key_clause | GROUP log_group }
    ]...
}
</pre>
<p class="subhead2"><a id="SQLQR897"></a><span class="italic"><a id="sthref1485"></a>switch_logfile_clause</span></p>
<pre dir="ltr">SWITCH ALL LOGFILES TO BLOCKSIZE integer
</pre>
<p class="subhead2"><a id="SQLQR1103"></a><span class="italic"><a id="sthref1486"></a>switchover_clause</span></p>
<pre dir="ltr">SWITCHOVER TO target_db_name [ VERIFY | FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR898"></a><span class="italic"><a id="sthref1487"></a>system_partitioning</span></p>
<pre dir="ltr">PARTITION BY SYSTEM [ PARTITIONS integer
                    | reference_partition_desc
                       [, reference_partition_desc ...]
                    ]
</pre>
<p class="subhead2"><a id="SQLQR899"></a><span class="italic"><a id="sthref1488"></a>table_collection_expression</span></p>
<pre dir="ltr">TABLE (collection_expression) [ (+) ]
</pre>
<p class="subhead2"><a id="SQLQR900"></a><span class="italic"><a id="sthref1489"></a>table_compression</span></p>
<pre dir="ltr">COMPRESS
| ROW STORE COMPRESS [ BASIC | ADVANCED ]
| COLUMN STORE COMPRESS [  FOR { QUERY | ARCHIVE } [ LOW | HIGH ] ]
  [ [NO] ROW LEVEL LOCKING ]
| NOCOMPRESS
</pre>
<p class="subhead2"><a id="SQLQR901"></a><span class="italic"><a id="sthref1490"></a>table_index_clause</span></p>
<pre dir="ltr">[ schema. ] table [ t_alias ]
(index_expr [ ASC | DESC ]
  [, index_expr [ ASC | DESC ] ]...)
  [ index_properties ]
</pre>
<p class="subhead2"><a id="SQLQR902"></a><span class="italic"><a id="sthref1491"></a>table_partition_description</span></p>
<pre dir="ltr">[ deferred_segment_creation ]
[ indexing_clause ]
[ segment_attributes_clause ]
[ table_compression | prefix_compression ]
[ inmemory_clause ]
{ ilm_clause ]
[ OVERFLOW [ segment_attributes_clause ] ]
[ { LOB_storage_clause
  | varray_col_properties
  | nested_table_col_properties
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR903"></a><span class="italic"><a id="sthref1492"></a>table_partitioning_clauses</span></p>
<pre dir="ltr">{ range_partitions
| list_partitions
| hash_partitions
| composite_range_partitions
| composite_list_partitions
| composite_hash_partitions
| reference_partitioning
| system_partitioning
}
</pre>
<p class="subhead2"><a id="SQLQR904"></a><span class="italic"><a id="sthref1493"></a>table_properties</span></p>
<pre dir="ltr">[ column_properties ]
[ indexing_clause ]
[ table_partitioning_clauses ]
[ attribute_clustering_clause ]
[ CACHE | NOCACHE ]
[ RESULT_CACHE ( MODE {DEFAULT | FORCE } ) ]
[ parallel_clause ]
[ ROWDEPENDENCIES | NOROWDEPENDENCIES ]
[ enable_disable_clause ]...
[ row_movement_clause ]
[ flashback_archive_clause ]
[ ROW ARCHIVAL ]
[ AS subquery ]
</pre>
<p class="subhead2"><a id="SQLQR905"></a><span class="italic"><a id="sthref1494"></a>table_reference</span></p>
<pre dir="ltr">{ { { ONLY (query_table_expression) | query_table_expression }
  [ flashback_query_clause ]
  [ pivot_clause | unpivot_clause | row_pattern_clause ] }
| containers_clause
}
[ t_alias ]
</pre>
<p class="subhead2"><a id="SQLQR906"></a><span class="italic"><a id="sthref1495"></a>tablespace_clauses</span></p>
<pre dir="ltr">{ EXTENT MANAGEMENT LOCAL
| DATAFILE file_specification [, file_specification ]...
| SYSAUX DATAFILE file_specification [, file_specification ]...
| default_tablespace
| default_temp_tablespace
| undo_tablespace
}
</pre>
<p class="subhead2"><a id="SQLQR1104"></a><a id="sthref1496"></a><span class="italic">tablespace_datafile_clauses</span></p>
<pre dir="ltr">DATAFILES { SIZE size_clause | autoextend_clause }...
</pre>
<p class="subhead2"><a id="SQLQR1105"></a><a id="sthref1497"></a><span class="italic">tablespace_encryption_spec</span></p>
<pre dir="ltr">[ USING &#39;encrypt_algorithm&#39; ]
</pre>
<p class="subhead2"><a id="SQLQR907"></a><span class="italic"><a id="sthref1498"></a>tablespace_group_clause</span></p>
<pre dir="ltr">TABLESPACE GROUP { tablespace_group_name | &#39;&#39; }
</pre>
<p class="subhead2"><a id="SQLQR908"></a><span class="italic"><a id="sthref1499"></a>tablespace_logging_clauses</span></p>
<pre dir="ltr">{ logging_clause
| [ NO ] FORCE LOGGING
}
</pre>
<p class="subhead2"><a id="SQLQR909"></a><span class="italic"><a id="sthref1500"></a>tablespace_retention_clause</span></p>
<pre dir="ltr">RETENTION { GUARANTEE | NOGUARANTEE }
</pre>
<p class="subhead2"><a id="SQLQR910"></a><span class="italic"><a id="sthref1501"></a>tablespace_state_clauses</span></p>
<pre dir="ltr">{ { ONLINE
  | OFFLINE [ NORMAL | TEMPORARY | IMMEDIATE ]
  }
  | READ { ONLY | WRITE }
  | { PERMANENT | TEMPORARY }
}
</pre>
<p class="subhead2"><a id="SQLQR1106"></a><a id="sthref1502"></a><span class="italic">tempfile_reuse_clause</span></p>
<pre dir="ltr">TEMPFILE REUSE
</pre>
<p class="subhead2"><a id="SQLQR911"></a><span class="italic"><a id="sthref1503"></a>temporary_tablespace_clause</span></p>
<pre dir="ltr">TEMPORARY TABLESPACE tablespace
  [ TEMPFILE file_specification [, file_specification ]... ]
  [ tablespace_group_clause ]
  [ extent_management_clause ]
</pre>
<p class="subhead2"><a id="SQLQR912"></a><span class="italic"><a id="sthref1504"></a>timeout_clause</span></p>
<pre dir="ltr">DROP AFTER integer { M | H }
</pre>
<p class="subhead2"><a id="SQLQR913"></a><span class="italic"><a id="sthref1505"></a>trace_file_clause</span></p>
<pre dir="ltr">TRACE
  [ AS &#39;filename&#39; [ REUSE ] ]
  [ RESETLOGS | NORESETLOGS ]
</pre>
<p class="subhead2"><a id="SQLQR914"></a><span class="italic"><a id="sthref1506"></a>truncate_partition_subpart</span></p>
<pre dir="ltr">TRUNCATE { partition_extended_names | subpartition_extended_names }
   [ { DROP [ ALL ] | REUSE } STORAGE ]
   [ update_index_clauses [ parallel_clause ] ] [ CASCADE ]
</pre>
<p class="subhead2"><a id="SQLQR915"></a><span class="italic"><a id="sthref1507"></a>undo_tablespace</span></p>
<pre dir="ltr">  [ BIGFILE | SMALLFILE ]
UNDO TABLESPACE tablespace
  [ DATAFILE file_specification [, file_specification ]...]
</pre>
<p class="subhead2"><a id="SQLQR916"></a><span class="italic"><a id="sthref1508"></a>undo_tablespace_clause</span></p>
<pre dir="ltr">UNDO TABLESPACE tablespace
  [ DATAFILE file_specification [, file_specification ]... ]
  [ extent_management_clause ]
  [ tablespace_retention_clause ]
</pre>
<p class="subhead2"><a id="SQLQR917"></a><span class="italic"><a id="sthref1509"></a>undrop_disk_clause</span></p>
<pre dir="ltr">UNDROP DISKS
</pre>
<p class="subhead2"><a id="SQLQR918"></a><span class="italic"><a id="sthref1510"></a>unpivot_clause</span></p>
<pre dir="ltr">UNPIVOT [ {INCLUDE | EXCLUDE} NULLS ]
( { column | ( column [, column]... ) }
  pivot_for_clause
  unpivot_in_clause
)
</pre>
<p class="subhead2"><a id="SQLQR919"></a><span class="italic"><a id="sthref1511"></a>unpivot_in_clause</span></p>
<pre dir="ltr">IN
( { column | ( column [, column]... ) }
      [  AS { literal | ( literal [, literal]... ) } ]
        [, { column | ( column [, column]... ) }
          [  AS {literal | ( literal [, literal]... ) } ]
        ]...
)
</pre>
<p class="subhead2"><a id="SQLQR1108"></a><a id="sthref1512"></a><span class="italic">unusable_editions_clause</span></p>
<pre dir="ltr">[ UNUSABLE BEFORE { CURRENT EDITION | EDITION edition } ]
[ UNUSABLE BEGINNING WITH { CURRENT EDITION | EDITION edition | NULL EDITION } ]
</pre>
<p class="subhead2"><a id="SQLQR920"></a><span class="italic"><a id="sthref1513"></a>update_all_indexes_clause</span></p>
<pre dir="ltr">UPDATE INDEXES
   [ ( index ( update_index_partition
             | update_index_subpartition
             )
        [, index ( update_index_partition
                 | update_index_subpartition
                 )
        ]...
      )
   ]
</pre>
<p class="subhead2"><a id="SQLQR921"></a><span class="italic"><a id="sthref1514"></a>update_global_index_clause</span></p>
<pre dir="ltr">{ UPDATE | INVALIDATE } GLOBAL INDEXES
</pre>
<p class="subhead2"><a id="SQLQR922"></a><span class="italic"><a id="sthref1515"></a>update_index_clauses</span></p>
<pre dir="ltr">{ update_global_index_clause
| update_all_indexes_clause
}
</pre>
<p class="subhead2"><a id="SQLQR923"></a><span class="italic"><a id="sthref1516"></a>update_index_partition</span></p>
<pre dir="ltr">index_partition_description [ index_subpartition_clause ]
  [, index_partition_description [ index_subpartition_clause ] ]...
</pre>
<p class="subhead2"><a id="SQLQR924"></a><span class="italic"><a id="sthref1517"></a>update_index_subpartition</span></p>
<pre dir="ltr">SUBPARTITION [ subpartition ]
   [ TABLESPACE tablespace ]
[, SUBPARTITION [ subpartition ]
      [ TABLESPACE tablespace ]
]...
</pre>
<p class="subhead2"><a id="SQLQR925"></a><span class="italic"><a id="sthref1518"></a>update_set_clause</span></p>
<pre dir="ltr">SET
{ { (column [, column ]...) = (subquery)
  | column = { expr | (subquery) | DEFAULT }
  }
     [, { (column [, column]...) = (subquery)
        | column = { expr | (subquery) | DEFAULT }
        }
     ]...
| VALUE (t_alias) = { expr | (subquery) }
}
</pre>
<p class="subhead2"><a id="SQLQR926"></a><span class="italic"><a id="sthref1519"></a>upgrade_table_clause</span></p>
<pre dir="ltr">UPGRADE [ [NOT ] INCLUDING DATA ]
   [ column_properties ]
</pre>
<p class="subhead2"><a id="SQLQR1109"></a><a id="sthref1520"></a><span class="italic">use_key</span></p>
<pre dir="ltr">USE [ ENCRYPTION ] KEY &#39;key_id&#39; [ USING TAG &#39;tag&#39; ]
  IDENTIFIED BY keystore_password
  [ WITH BACKUP [ USING &#39;backup_identifier&#39; ] ]
</pre>
<p class="subhead2"><a id="SQLQR927"></a><span class="italic"><a id="sthref1521"></a>user_clauses</span></p>
<pre dir="ltr">{ ADD USER &#39;user&#39; [, &#39;user&#39;]...
| DROP USER &#39;user&#39; [, &#39;user&#39;]... [CASCADE]
| REPLACE USER &#39;old_user&#39; WITH &#39;new_user&#39; [, &#39;old_user&#39; WITH &#39;new_user&#39;]...
}
</pre>
<p class="subhead2"><a id="SQLQR1208"></a><a id="sthref1522"></a><span class="italic">user_tablespaces_clause</span></p>
<pre dir="ltr">USER_TABLESPACES =
  { ( &#39;tablespace&#39; [, &#39;tablespace&#39; ]... )
  | NONE
  | ALL [ EXCEPT ( &#39;tablespace&#39; [, &#39;tablespace&#39; ]... ) ]
  }
</pre>
<p class="subhead2"><a id="SQLQR928"></a><span class="italic"><a id="sthref1523"></a>usergroup_clauses</span></p>
<pre dir="ltr">{ ADD USERGROUP &#39;usergroup&#39; WITH MEMBER &#39;user&#39; [, &#39;user&#39;]...
| MODIFY USERGROUP &#39;usergroup&#39; { ADD | DROP } MEMBER &#39;user&#39; [, &#39;user&#39;]...
| DROP USERGROUP &#39;usergroup&#39; 
}
</pre>
<p class="subhead2"><a id="SQLQR929"></a><span class="italic"><a id="sthref1524"></a>using_function_clause</span></p>
<pre dir="ltr">USING [ schema. ] [ package. | type. ] function_name
</pre>
<p class="subhead2"><a id="SQLQR930"></a><span class="italic"><a id="sthref1525"></a>using_index_clause</span></p>
<pre dir="ltr">USING INDEX
  { [ schema. ] index
  | (create_index_statement)
  | index_properties
  }
</pre>
<p class="subhead2"><a id="SQLQR931"></a><span class="italic"><a id="sthref1526"></a>using_statistics_type</span></p>
<pre dir="ltr">USING { [ schema. ] statistics_type | NULL }
</pre>
<p class="subhead2"><a id="SQLQR932"></a><span class="italic"><a id="sthref1527"></a>using_type_clause</span></p>
<pre dir="ltr">USING [ schema. ] implementation_type [ array_DML_clause ]
</pre>
<p class="subhead2"><a id="SQLQR933"></a><span class="italic"><a id="sthref1528"></a>validation_clauses</span></p>
<pre dir="ltr">{ VALIDATE REF UPDATE [ SET DANGLING TO NULL ]
| VALIDATE STRUCTURE
     [ CASCADE { FAST | COMPLETE { OFFLINE | ONLINE } [ into_clause ] } ]
}
</pre>
<p class="subhead2"><a id="SQLQR934"></a><span class="italic"><a id="sthref1529"></a>values_clause</span></p>
<pre dir="ltr">VALUES ({ expr | DEFAULT }
          [, { expr | DEFAULT } ]...
       )
</pre>
<p class="subhead2"><a id="SQLQR935"></a><span class="italic"><a id="sthref1530"></a>varray_col_properties</span></p>
<pre dir="ltr">VARRAY varray_item 
{ [ substitutable_column_clause ] varray_storage_clause
| substitutable_column_clause
}
</pre>
<p class="subhead2"><a id="SQLQR936"></a><span class="italic"><a id="sthref1531"></a>varray_storage_clause</span></p>
<pre dir="ltr">STORE AS [SECUREFILE | BASICFILE] LOB
{ [LOB_segname] ( LOB_storage_parameters )
| LOB_segname
}
</pre>
<p class="subhead2"><a id="SQLQR937"></a><span class="italic"><a id="sthref1532"></a>virtual_column_definition</span></p>
<pre dir="ltr">column [ datatype ] [ VISIBLE | INVISIBLE ]
  [ GENERATED ALWAYS ] AS (column_expression) [ VIRTUAL ]
  [ evaluation_edition_clause ] [ unusable_editions_clause ]
  [ inline_constraint [ inline_constraint ]... ]
</pre>
<p class="subhead2"><a id="SQLQR938"></a><span class="italic"><a id="sthref1533"></a>where_clause</span></p>
<pre dir="ltr">WHERE condition
</pre>
<p class="subhead2"><a id="SQLQR939"></a><span class="italic"><a id="sthref1534"></a>windowing_clause</span></p>
<pre dir="ltr">{ ROWS | RANGE }
{ BETWEEN
  { UNBOUNDED PRECEDING
  | CURRENT ROW
  | value_expr { PRECEDING | FOLLOWING }
  } 
  AND
  { UNBOUNDED FOLLOWING
  | CURRENT ROW
  | value_expr { PRECEDING | FOLLOWING }
  }
| { UNBOUNDED PRECEDING
  | CURRENT ROW
  | value_expr PRECEDING
  }
}
</pre>
<p class="subhead2"><a id="SQLQR1110"></a><span class="italic"><a id="sthref1535"></a>with_clause</span></p>
<pre dir="ltr">WITH [ plsql_declarations ] [ subquery_factoring_clause ]
</pre>
<p class="subhead2"><a id="SQLQR940"></a><span class="italic"><a id="sthref1536"></a>XML_attributes_clause</span></p>
<pre dir="ltr">XMLATTRIBUTES
  ( [ ENTITYESCAPING | NOENTITYESCAPING ]
    [ SCHEMACHECK | NOSCHEMACHECK ]
    value_expr [ { [AS] c_alias } | { AS EVALNAME value_expr } ]
      [, value_expr [ { [AS] c_alias } | { AS EVALNAME value_expr } ] ]...
  )
</pre>
<p class="subhead2"><a id="SQLQR941"></a><span class="italic"><a id="sthref1537"></a>XML_namespaces_clause</span></p>
<pre dir="ltr">XMLNAMESPACES
  ( { string AS identifier } | { DEFAULT string }
      [, { string AS identifier } | { DEFAULT string } ]...
  )
</pre>
<p class="subhead2"><a id="SQLQR942"></a><span class="italic"><a id="sthref1538"></a>XML_passing_clause</span></p>
<pre dir="ltr">PASSING [ BY VALUE ] 
    expr [ AS identifier ]
      [, expr [ AS identifier ] 
      ]...
</pre>
<p class="subhead2"><a id="SQLQR943"></a><span class="italic"><a id="sthref1539"></a>XML_table_column</span></p>
<pre dir="ltr">column
     { FOR ORDINALITY 
     | { datatype | XMLTYPE [ (SEQUENCE) BY REF ] }
     [ PATH string ] [ DEFAULT expr ]
     }
</pre>
<p class="subhead2"><a id="SQLQR944"></a><span class="italic"><a id="sthref1540"></a>XMLIndex_clause</span></p>
<pre dir="ltr">[XDB.] XMLINDEX [ local_XMLIndex_clause ]
                [ parallel_clause ]
  [ XMLIndex_parameters_clause ]
</pre>
<p class="subhead2"><a id="SQLQR945"></a><span class="italic"><a id="sthref1541"></a>XMLSchema_spec</span></p>
<pre dir="ltr">  [ XMLSCHEMA XMLSchema_URL ]
ELEMENT { element | XMLSchema_URL # element }
  [ STORE ALL VARRAYS AS { LOBS | TABLES } ]
  [ { ALLOW | DISALLOW } NONSCHEMA ]
  [ { ALLOW | DISALLOW } ANYSCHEMA ]
</pre>
<p class="subhead2"><a id="SQLQR946"></a><span class="italic"><a id="sthref1542"></a>XMLTABLE_options</span></p>
<pre dir="ltr">[ XML_passing_clause ]
[ RETURNING SEQUENCE BY REF ]
[ COLUMNS XML_table_column [, XML_table_column]...]
</pre>
<p class="subhead2"><a id="SQLQR947"></a><span class="italic"><a id="sthref1543"></a>XMLType_column_properties</span></p>
<pre dir="ltr">XMLTYPE [ COLUMN ] column
   [ XMLType_storage ]
   [ XMLSchema_spec ]
</pre>
<p class="subhead2"><a id="SQLQR948"></a><span class="italic"><a id="sthref1544"></a>XMLType_storage</span></p>
<pre dir="ltr">STORE
{ AS
{ OBJECT RELATIONAL
| [SECUREFILE | BASICFILE]
  { CLOB | BINARY XML }
    [ { LOB_segname [ (LOB_parameters) ]
      | (LOB_parameters)
      }
    ]
}
| { ALL VARRAYS AS { LOBS | TABLES } }
}
</pre>
<p class="subhead2"><a id="SQLQR949"></a><span class="italic"><a id="sthref1545"></a>XMLType_table</span></p>
<pre dir="ltr">OF XMLTYPE
  [ (oject_properties) ]
  [ XMLTYPE XMLType_storage ]
  [ XMLSchema_spec ]
  [ XMLType_virtual_columns ]
  [ ON COMMIT { DELETE | PRESERVE } ROWS ]
  [ OID_clause ]
  [ OID_index_clause ]
  [ physical_properties ]
  [ table_properties ]
</pre>
<p class="subhead2"><a id="SQLQR950"></a><span class="italic"><a id="sthref1546"></a>XMLType_view_clause</span></p>
<pre dir="ltr">OF XMLTYPE [ XMLSchema_spec ]
WITH OBJECT { IDENTIFIER | ID }
  { DEFAULT | ( expr [, expr ]...) }
</pre>
<p class="subhead2"><a id="SQLQR951"></a><span class="italic"><a id="sthref1547"></a>XMLType_virtual_columns</span></p>
<pre dir="ltr">VIRTUAL COLUMNS ( column AS (expr) [, column AS (expr) ]... )
</pre>
<p class="subhead2"><a id="SQLQR952"></a><span class="italic"><a id="sthref1548"></a>ym_iso_format</span></p>
<pre dir="ltr">[-] P [ years Y ] [months M] [days D]
  [T [hours H] [minutes M] [seconds [. frac_secs] S ] ]
</pre>
<p class="subhead2"><a id="SQLQR1209"></a><span class="italic"><a id="sthref1549"></a>zonemap_attributes</span></p>
<pre dir="ltr">{ TABLESPACE tablespace
| SCALE integer
| PCTFREE integer
| PCTUSED integer
| { CACHE | NOCACHE }
}...
</pre>
<p class="subhead2"><a id="SQLQR1210"></a><a id="sthref1550"></a><span class="italic">zonemap_clause</span></p>
<pre dir="ltr">{ WITH MATERIALIZED ZONEMAP [ ( zonemap_name ) ] }
|
{ WITHOUT MATERIALIZED ZONEMAP }
</pre>
<p class="subhead2"><a id="SQLQR1211"></a><a id="sthref1551"></a><span class="italic">zonemap_refresh_clause</span></p>
<pre dir="ltr">REFRESH
[ FAST | COMPLETE | FORCE ]
[ ON { DEMAND | COMMIT | LOAD | DATA MOVEMENT | LOAD DATA MOVEMENT } ]
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" -->
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4934">
<tr>
<td class="cellalignment4943">
<table class="cellalignment4939">
<tr>
<td class="cellalignment4938"><a href="sqlqr05.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4938"><a href="sqlqr06.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4945">
<table class="cellalignment4937">
<tr>
<td class="cellalignment4938"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4938"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4938"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4938"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4938"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4938"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>