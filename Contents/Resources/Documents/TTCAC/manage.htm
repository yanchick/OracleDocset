<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-107436"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Managing%20a%20Caching%20Environment"></a><title>Managing a Caching Environment</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2014-09-23T15:6:31Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen Application-Tier Database Cache User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E21634-12"/>
<meta name="dcterms.isVersionOf" content="TTCAC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="gridmembers.htm" title="Previous" type="text/html"/>
<link rel="Next" href="perform.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21634-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/21</span> <!-- End Header -->
<div id="TTCAC303" class="chapter"><a id="CACIJCFE"></a>
<h1 class="chapter"><span class="secnum">7</span> Managing a Caching Environment</h1>
<p>The following sections describe how to manage and monitor various aspects of a caching system such as cache grids, cache groups, and the cache agent process:</p>
<ul>
<li>
<p><a href="#BABDDCIB">Checking the status of the cache and replication agents</a></p>
</li>
<li>
<p><a href="#CACCFDDH">Monitoring cache groups and cache grids</a></p>
</li>
<li>
<p><a href="#BABFJHCA">Managing a caching environment with Oracle Database objects</a></p>
</li>
<li>
<p><a href="#CACIFDAC">Impact of failed autorefresh operations on TimesTen databases</a></p>
</li>
<li>
<p><a href="#BABGJCHH">Dropping Oracle Database objects used by autorefresh cache groups</a></p>
</li>
<li>
<p><a href="#CACBIHBH">Monitoring the cache administration user&#39;s tablespace</a></p>
</li>
<li>
<p><a href="#CACEACDD">Recovering after failure of a grid node</a></p>
</li>
<li>
<p><a href="#CACIIEDI">Backing up and restoring a database with cache groups</a></p>
</li>
<li>
<p><a href="#CACGGEFA">Changing cache user names and passwords</a></p>
</li>
</ul>
<a id="BABDDCIB"></a>
<div id="TTCAC304" class="sect1">
<h2 class="sect1">Checking the status of the cache and replication agents<a id="sthref505"></a><a id="sthref506"></a><a id="sthref507"></a></h2>
<p>You can use either the <code>ttAdmin</code> or <code>ttStatus</code> utility to check whether the TimesTen cache agent and replication agent processes are running as well as determine each agent&#39;s start policy.</p>
<div id="TTCAC305" class="example">
<p class="titleinexample"><a id="sthref508"></a>Example 7-1 Using ttAdmin to determine the cache and replication agents status</p>
<p>You can use a <code>ttAdmin -query</code> utility command to determine whether the cache and replication agents are running, and the cache and replication agent start policies for a TimesTen database:</p>
<pre>% ttAdmin -query cachealone1
RAM Residence Policy            : inUse
Replication Agent Policy        : manual
Replication Manually Started    : True
Cache Agent Policy              : always
Cache Agent Manually Started    : True
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>ttAdmin</code> utility, see <a class="olink TTREF321" href="../TTREF/util.htm#TTREF321">&#34;ttAdmin&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<div id="TTCAC306" class="example">
<p class="titleinexample"><a id="sthref509"></a>Example 7-2 Using ttStatus to determine the cache and replication agents status</p>
<p>You can use the <a id="sthref510"></a><a id="sthref511"></a><a id="sthref512"></a><code>ttStatus</code> utility to determine whether the cache and replication agents are running, and the cache and replication agent start policies for all TimesTen databases in the installed instance:</p>
<pre>% ttStatus
TimesTen status report as of Thu May  7 13:42:01 2009

Daemon pid 9818 port 4173 instance myinst
TimesTen server pid 9826 started on port 4175
------------------------------------------------------------------------
Data store /users/OracleCache/alone1
There are 38 connections to the data store
Shared Memory KEY 0x02011c82 ID 895844354
PL/SQL Memory KEY 0x03011c82 ID 895877123 Address 0x10000000
Type            PID     Context     Connection Name              ConnID
Cache Agent     1019    0x0828f840  Handler                           2
Cache Agent     1019    0x083a3d40  Timer                             3
Cache Agent     1019    0x0842d820  Aging                             4
Cache Agent     1019    0x08664fd8  Garbage Collector(-1580741728)    5
Cache Agent     1019    0x084d6ef8  Marker(-1580213344)               6
Cache Agent     1019    0xa5bb8058  DeadDsMonitor(-1579684960)        7
Cache Agent     1019    0x088b49a0  CacheGridEnv                     14
Cache Agent     1019    0x0896b9d0  CacheGridSend                    15
Cache Agent     1019    0x089fb020  CacheGridSend                    16
Cache Agent     1019    0x08a619f8  CacheGridSend                    17
Cache Agent     1019    0x08ace538  CacheGridRec                     18
Cache Agent     1019    0x08b42e88  CacheGridRec                     19
Cache Agent     1019    0x08bb77d8  CacheGridRec                     20
Cache Agent     1019    0x08c2c128  CacheGridRec                     21
Cache Agent     1019    0x08ca0a78  CacheGridRec                     22
Cache Agent     1019    0x08d153c8  CacheGridRec                     23
Cache Agent     1019    0x08d89d18  CacheGridRec                     24
Cache Agent     1019    0x08dfe668  CacheGridRec                     25
Cache Agent     1019    0x08e72fb8  CacheGridRec                     26
Cache Agent     1019    0x08ee8020  CacheGridRec                     27
Cache Agent     1019    0x08f5d088  CacheGridRec                     28
Cache Agent     1019    0x08fd23f8  CacheGridRec                     29
Cache Agent     1019    0x09047768  CacheGridRec                     30
Replication     18051   0x08c3d900  RECEIVER                          8
Replication     18051   0x08b53298  REPHOLD                           9
Replication     18051   0x08af8138  REPLISTENER                      10
Replication     18051   0x08a82f20  LOGFORCE                         11
Replication     18051   0x08bce660  TRANSMITTER                      12
Subdaemon       9822    0x080a2180  Manager                        2032
Subdaemon       9822    0x080ff260  Rollback                       2033
Subdaemon       9822    0x08548c38  Flusher                        2034
Subdaemon       9822    0x085e3b00  Monitor                        2035
Subdaemon       9822    0x0828fc10  Deadlock Detector              2036
Subdaemon       9822    0x082ead70  Checkpoint                     2037
Subdaemon       9822    0x08345ed0  Aging                          2038
Subdaemon       9822    0x083a1030  Log Marker                     2039
Subdaemon       9822    0x083fc190  AsyncMV                        2040
Subdaemon       9822    0x084572f0  HistGC                         2041
Replication policy  : Manual
Replication agent is running.
Cache Agent policy  : Always
TimesTen&#39;s Cache agent is running for this data store
PL/SQL enabled.
------------------------------------------------------------------------
</pre></div>
<!-- class="example" -->
<p>The information displayed by the <code>ttStatus</code> utility include the following that pertains to TimesTen Cache for each TimesTen database in the installed instance:</p>
<ul>
<li>
<p>The names of the cache agent process threads that are connected to the TimesTen database</p>
</li>
<li>
<p>The names of the replication agent process threads that are connected to the TimesTen database</p>
</li>
<li>
<p>Status on whether the cache agent is running</p>
</li>
<li>
<p>Status on whether the replication agent is running</p>
</li>
<li>
<p>The cache agent start policy</p>
</li>
<li>
<p>The replication agent start policy</p>
</li>
</ul>
<p>For more information about the <code>ttStatus</code> utility, see <a class="olink TTREF370" href="../TTREF/util.htm#TTREF370">&#34;ttStatus&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<div id="TTCAC457" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref513"></a>
<h3 class="sect2">Cache agent and replication connections<a id="sthref514"></a><a id="sthref515"></a><a id="sthref516"></a><a id="sthref517"></a></h3>
<p>When a connection from the cache agent to the Oracle database fails, the cache agent attempts to connect every 10 seconds. If the cache agent cannot connect to the Oracle database, the cache agent restarts after 10 minutes. This behavior repeats forever.</p>
<p>When a connection from the replication agent to the Oracle database fails, the replication agent attempts to reconnect to the Oracle database after 120 seconds. If it cannot reconnect after 120 seconds, the replication agent stops and does not restart.</p>
<p>If Fast Application Notification (FAN) is enabled on the Oracle database, the cache agent and the replication agent receive immediate notification of connection failures. If FAN is not enabled, the agents may wait until a TCP timeout occurs before becoming aware that the connection has failed.</p>
<p>If the Oracle Real Application Clusters (Oracle RAC) is enable on the Oracle database, along with FAN and Transparent Application Failover (TAF), then TAF manages the connection to a new Oracle Database instance. See <a href="rac.htm#BHCHEAIF">Chapter 11, &#34;Using TimesTen Application-Tier Database Cache in an Oracle RAC Environment&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACCFDDH"></a>
<div id="TTCAC307" class="sect1">
<h2 class="sect1">Monitoring cache groups and cache grids</h2>
<p>The following sections describe how to obtain information about cache grids and cache groups, and how to monitor the status of cache group operations:</p>
<ul>
<li>
<p><a href="#CACEAFDC">Using the ttIsql utility&#39;s cachegroups command</a></p>
</li>
<li>
<p><a href="#CACHIAGH">Monitoring autorefresh operations on cache groups</a></p>
</li>
<li>
<p><a href="#CACGHCIB">Monitoring AWT cache groups</a></p>
</li>
<li>
<p><a href="#CACFEHAI">Obtaining information for a cache grid</a></p>
</li>
<li>
<p><a href="#CACGDFGF">Tracking DDL statements issued on cached Oracle Database tables</a></p>
</li>
</ul>
<a id="CACEAFDC"></a>
<div id="TTCAC308" class="sect2">
<h3 class="sect2">Using the ttIsql utility&#39;s cachegroups command</h3>
<p>You can obtain information about cache groups in a TimesTen database using the <code>ttIsql</code> utility&#39;s <code>cachegroups</code> command.</p>
<div id="TTCAC309" class="example">
<p class="titleinexample"><a id="sthref518"></a>Example 7-3 <a id="sthref519"></a><a id="sthref520"></a>ttIsql utility&#39;s cachegroups command</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; cachegroups;

Cache Group CACHEUSER.RECENT_SHIPPED_ORDERS:

  Cache Group Type: Read Only
  Autorefresh: Yes
  Autorefresh Mode: Incremental
  Autorefresh State: On
  Autorefresh Interval: 1440 Minutes
  Autorefresh Status: ok
  Aging: Timestamp based uses column WHEN_SHIPPED lifetime 30 days cycle 24 hours on

  Root Table: ORATT.ORDERS
  Table Type: Read Only


Cache Group CACHEUSER.SUBSCRIBER_ACCOUNTS:

  Cache Group Type: Asynchronous Writethrough global (Dynamic)
  Autorefresh: No
  Aging: LRU on

  Root Table: ORATT.SUBSCRIBER
  Table Type: Propagate

Cache Group CACHEUSER.WESTERN_CUSTOMERS:

  Cache Group Type: User Managed
  Autorefresh: No
  Aging: No aging defined

  Root Table: ORATT.ACTIVE_CUSTOMER
  Where Clause: (oratt.active_customer.region = &#39;West&#39;)
  Table Type: Propagate

  Child Table: ORATT.ORDERTAB
  Table Type: Propagate

  Child Table: ORATT.ORDERDETAILS
  Where Clause: (oratt.orderdetails.quantity &gt;= 5)
  Table Type: Not Propagate

  Child Table: ORATT.CUST_INTERESTS
  Table Type: Read Only

3 cache groups found.
</pre></div>
<!-- class="example" -->
<p>The information displayed by the <code>ttIsql</code> utility&#39;s <code>cachegroups</code> command include:</p>
<ul>
<li>
<p>Cache group type, including whether the cache group is dynamic or global</p>
</li>
<li>
<p>Autorefresh attributes (mode, state, interval) and status, if applicable</p>
</li>
<li>
<p>Aging policy, if applicable</p>
</li>
<li>
<p>Name of root table and, if applicable, name of child tables</p>
</li>
<li>
<p>Cache table <code>WHERE</code> clause, if applicable</p>
</li>
<li>
<p>Cache table attributes (read-only, propagate, not propagate)</p>
</li>
</ul>
<p>For more information about the <code>ttIsql</code> utility&#39;s <code>cachegroups</code> command, see <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</div>
<!-- class="sect2" -->
<a id="CACHIAGH"></a>
<div id="TTCAC310" class="sect2">
<h3 class="sect2">Monitoring autorefresh operations on cache groups<a id="sthref521"></a></h3>
<p>TimesTen offers several mechanisms to obtain information and statistics about autorefresh operations on cache groups. See <a class="olink TTTRB247" href="../TTTRB/cache_trouble.htm#TTTRB247">&#34;Monitoring autorefresh cache groups&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Troubleshooting Guide</span>.</p>
</div>
<!-- class="sect2" -->
<a id="CACGHCIB"></a>
<div id="TTCAC453" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">M<a id="sthref522"></a><a id="sthref523"></a><a id="sthref524"></a>onitoring AWT cache groups</h3>
<p>TimesTen offers several mechanisms to obtain information and statistics about operations in AWT cache groups. See <a class="olink TTTRB277" href="../TTTRB/awt_trouble.htm#TTTRB277">&#34;AWT performance monitoring&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Troubleshooting Guide</span>.</p>
</div>
<!-- class="sect2" -->
<div id="TTCAC312" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref525"></a>
<h3 class="sect2">Configuring a transaction log file threshold for AWT cache groups</h3>
<p>The replication agent uses the transaction log to determine which updates on cache tables in AWT cache groups have been propagated to the cached Oracle Database tables and which updates have not. If updates are not being automatically propagated to the Oracle database because of a failure, transaction log files accumulate on disk. Examples of a failure that prevents propagation are that the replication agent is not running or the Oracle database server is unavailable. For more information about accumulation of transaction log files, see <a class="olink TTOPR711" href="../TTOPR/trans.htm#TTOPR711">&#34;Monitoring accumulation of transaction log files&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<p>You can call the <a id="sthref526"></a><a id="sthref527"></a><code>ttCacheAWTThresholdSet</code> built-in procedure as the cache manager user to set a threshold for the number of transaction log files that can accumulate before TimesTen stops tracking updates on cache tables in AWT cache groups. The default threshold is 0. This built-in procedure can only be called if the TimesTen database contains AWT cache groups.</p>
<p>After the threshold has been exceeded, you need to manually synchronize the cache tables with the cached Oracle Database tables using an <code>UNLOAD CACHE GROUP</code> statement followed by a <code>LOAD CACHE GROUP</code> statement. TimesTen may purge transaction log files even if they contain updates that have not been propagated to the cached Oracle Database tables.</p>
<div id="TTCAC313" class="example">
<p class="titleinexample"><a id="sthref528"></a>Example 7-4 <a id="sthref529"></a>Setting a transaction log file threshold for AWT cache groups</p>
<p>In this example, if the number of transaction log files that contain updates on cache tables in AWT cache groups exceeds 5, TimesTen stops tracking updates and can then purge transaction log files that may contain unpropagated updates:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheAWTThresholdSet(5);
</pre>
<p>You can call the <code>ttCacheAWTThresholdGet</code> built-in procedure to determine the current transaction log file threshold setting:</p>
<pre>Command&gt; CALL ttCacheAWTThresholdGet;
&lt; 5 &gt;
Command&gt; exit
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CACFEHAI"></a>
<div id="TTCAC314" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Obtaining information for a cache grid</h3>
<p>You can use the following mechanisms to display information on any cache grid and their grid members:</p>
<ul>
<li>
<p>Call the <a id="sthref530"></a><a id="sthref531"></a><code>ttGridInfo</code> built-in procedure as the cache manager user to return the grid name, cache administration user name, operating system platform, and TimesTen major release number for a specified cache grid or all existing cache grids:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttGridInfo(&#39;ttGrid&#39;);
&lt; TTGRID, CACHEUSER, Linux Intel x86, 32-bit, 11, 2, 1 &gt;
</pre>
<p>For more information about the <code>ttGridInfo</code> built-in procedure, see <a class="olink TTREF254" href="../TTREF/proced.htm#TTREF254">&#34;ttGridInfo&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</li>
<li>
<p>Call the <a id="sthref532"></a><a id="sthref533"></a><code>ttGridNodeStatus</code> built-in procedure as the cache manager user to return the grid name, member ID, node number, indication of whether the node is attached to the grid, host name, node name, IP address, and cache agent TCP/IP port number for all members of a specified cache grid or all existing cache grids:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttGridNodeStatus;
&lt; TTGRID, 1, 1, T, sys1, TTGRID_alone1_1, 140.87.0.201, 5001, &lt;NULL&gt;, &lt;NULL&gt;,
&lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt; &gt;
&lt; TTGRID, 2, 1, T, sys2, TTGRID_alone2_2, 140.87.0.202, 5002, &lt;NULL&gt;, &lt;NULL&gt;,
&lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt; &gt;
&lt; TTGRID, 3, 1, T, sys3, TTGRID_cacheact_3A, 140.87.0.203, 5003, T, sys4,
TTGRID_cachestand_3B, 140.87.0.204, 5004 &gt;
</pre>
<p>For more information about the <code>ttGridNodeStatus</code> built-in procedure, see <a class="olink TTREF256" href="../TTREF/proced.htm#TTREF256">&#34;ttGridNodeStatus&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CACDFIHE"></a>
<div id="TTCAC413" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Suspending global AWT cache group operations<a id="sthref534"></a><a id="sthref535"></a><a id="sthref536"></a></h3>
<p>You can use the <code>ttGridGlobalCGSuspend</code> built-in procedure to temporarily block these operations for global AWT cache groups:</p>
<ul>
<li>
<p>Dynamic loading</p>
</li>
<li>
<p>Deleting cache instances</p>
</li>
</ul>
<p>Use the <code>ttGridGlobalCGResume</code> built-in procedure to re-enable these operations.</p>
</div>
<!-- class="sect2" -->
<a id="CACGDFGF"></a>
<div id="TTCAC315" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tracking DDL statements issued on cached Oracle Database tables<a id="sthref537"></a><a id="sthref538"></a><a id="sthref539"></a></h3>
<p>When a DDL statement is issued on a cached Oracle Database table, this statement can be tracked in the Oracle Database <code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DDL_L</code> table when the Oracle Database <code>TT_</code><code><span class="codeinlineitalic">version_schema-ID</span></code><code>_DDL_T</code> trigger is fired to insert a row into the table, where <code><span class="codeinlineitalic">version</span></code> is an internal TimesTen version number and <code><span class="codeinlineitalic">schema-ID</span></code> is the ID of user that owns the cached Oracle Database table. A trigger is created for each Oracle Database user that owns cached Oracle Database tables. One DDL tracking table is created to store DDL statements issued on any cached Oracle Database table. The cache administration user owns the <code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DDL_L</code> table and the <code>TT_</code><code><span class="codeinlineitalic">version</span></code>_<code><span class="codeinlineitalic">schema-ID</span></code><code>_DDL_T</code> trigger.</p>
<p>To enable tracking of DDL statements issued on cached Oracle Database tables, call the <code>ttCacheDDLTrackingConfig</code> built-in procedure as the cache manager user. By default, DDL statements are not tracked.</p>
<p>For more information about the <code>ttCacheDDLTrackingConfig</code> built-in procedure, see <a class="olink TTREF229" href="../TTREF/proced.htm#TTREF229">&#34;ttCacheDDLTrackingConfig&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<div id="TTCAC316" class="example">
<p class="titleinexample"><a id="sthref540"></a>Example 7-5 Enabling <a id="sthref541"></a><a id="sthref542"></a>tracking of DDL statements issued on cached Oracle Database tables</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheDDLTrackingConfig(&#39;enable&#39;);
</pre></div>
<!-- class="example" -->
<p>The <code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DDL_L</code> table and <code>TT_</code><code><span class="codeinlineitalic">version</span></code>_<code><span class="codeinlineitalic">schema-ID</span></code><code>_DDL_T</code> trigger are automatically created if the cache administration user has been granted the set of required privileges including <code>RESOURCE</code> and <code>CREATE ANY TRIGGER</code>. These Oracle Database objects are created when you create a cache group after tracking of DDL statements has been enabled.</p>
<p>If you manually created the Oracle Database objects used to manage the caching of Oracle Database data, you need to run the <a id="sthref543"></a><a id="sthref544"></a><code>ttIsql</code> utility&#39;s <code>cachesqlget</code> command with the <code>ORACLE_DDL_TRACKING</code> option and the <code>INSTALL</code> flag as the cache manager user. This command should be run for each Oracle Database user that owns cached Oracle Database tables that you want to track DDL statements on. Running this command generates a SQL*Plus script used to create the <code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DDL_L</code> table and <code>TT_</code><code><span class="codeinlineitalic">version</span></code>_<code><span class="codeinlineitalic">schema-ID</span></code><code>_DDL_T</code> trigger in the Oracle database.</p>
<p>After generating the script, use SQL*Plus to run the script as the <code>sys</code> user.</p>
<div id="TTCAC317" class="example">
<p class="titleinexample"><a id="sthref545"></a>Example 7-6 Creating DDL tracking table and trigger when Oracle Database objects were manually created</p>
<p>In this example, the SQL*Plus script generated by the <code>ttIsql</code> utility&#39;s <code>cachesqlget</code> command is saved to the <code>/tmp/trackddl.sql</code> file. The owner of the cached Oracle Database table <code>oratt</code> is passed as an argument to the command.</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; cachesqlget ORACLE_DDL_TRACKING oratt INSTALL /tmp/trackddl.sql;
Command&gt; exit

% sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
SQL&gt; @/tmp/trackddl
SQL&gt; exit
</pre></div>
<!-- class="example" -->
<p>When you need to issue DDL statements such as <code>CREATE</code>, <code>DROP</code> or <code>ALTER</code> on cached Oracle Database tables in order to make changes to the Oracle Database schema, drop the affected cache groups before you modify the Oracle Database schema. Otherwise operations such as autorefresh may fail. You do <span class="italic">not</span> need to drop cache groups if you are altering the Oracle Database table to add a column. To issue other DDL statements for Oracle Database tables, first perform the following tasks:</p>
<ol>
<li>
<p>Use <code>DROP CACHE GROUP</code> statements to drop all cache groups that cache the affected Oracle Database tables. If you are dropping an AWT cache group, use the <code>ttRepSubscriberWait</code> built-in procedure to make sure that all committed updates on the cache tables have been propagated to the cached Oracle Database tables before the cache group is dropped.</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; <a id="sthref546"></a><a id="sthref547"></a>CALL ttRepSubscriberWait(&#39;_AWTREPSCHEME&#39;,&#39;TTREP&#39;,&#39;_ORACLE&#39;,&#39;sys1&#39;,-1);
</pre></li>
<li>
<p>Stop the cache agent.</p>
</li>
<li>
<p>Make the desired changes to the Oracle Database schema.</p>
</li>
<li>
<p>Use <code>CREATE CACHE GROUP</code> statements to re-create the cache groups, if feasible.</p>
</li>
</ol>
<p>If you want to truncate an Oracle Database table that is cached in an autorefresh cache group, perform the following tasks:</p>
<ol>
<li>
<p>Use an <code>ALTER CACHE GROUP</code> statement to set the cache group&#39;s autorefresh state to <code>PAUSED</code>.</p>
</li>
<li>
<p>Truncate the Oracle Database table.</p>
</li>
<li>
<p>Manually refresh the cache group using a <code>REFRESH CACHE GROUP</code> statement without a <code>WHERE</code> or <code>WITH ID</code> clause.</p>
</li>
</ol>
<p>Autorefresh operations resume after you refresh the cache group.</p>
<p>You can run the <code><span class="codeinlineitalic">TimesTen_install_dir</span></code><code>/oraclescripts/cacheInfo.sql</code> SQL*Plus script as the cache administration user to display information about the Oracle Database objects used to track DDL statements issued on cached Oracle Database tables:</p>
<pre>% cd <span class="italic">TimesTen_install_dir</span>/oraclescripts
% sqlplus cacheuser/oracle
SQL&gt; @cacheInfo
*************DDL Tracking Object Information  ***************
Common DDL Log Table Name: TT_05_DDL_L
DDL Trigger Name: TT_05_315_DDL_T
Schema for which DDL Trigger is tracking: ORATT
Number of cache groups using the DDL Trigger: 10
****************************
</pre>
<p>The information returned for each Oracle Database user that owns cached Oracle Database tables includes the name of the DDL tracking table, the name of its corresponding DDL trigger, the name of the user that the DDL trigger is associated with, and the number of cache groups that cache a table owned by the user associated with the DDL trigger.</p>
<p>If a particular table is cached in more than one grid member, each grid member contributes to the cache group count. An active standby pair counts as one grid member. If a cache group contains more than one cache table, each cache table owned by the user associated with the DDL trigger contributes to the cache group count.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFJHCA"></a>
<div id="TTCAC318" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Managing a caching environment with Oracle Database <a id="sthref548"></a><a id="sthref549"></a><a id="sthref550"></a>objects</h2>
<p>For an autorefresh cache group, TimesTen creates a change log table and trigger in the Oracle database for each cache table in the cache group. The trigger is fired for each committed insert, update, or delete operation on the cached Oracle Database table. The trigger records the primary key of the updated rows in the change log table. The cache agent periodically scans the change log table for updated keys and then joins this table with the cached Oracle Database table to get a snapshot of the latest updates.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are caching the same Oracle table in more than one TimesTen database, see <a href="perform.htm#BABEIHEA">&#34;Caching the same Oracle table on two or more TimesTen databases&#34;</a> for performance considerations.</div>
<p>The Oracle Database objects used to process autorefresh writethrough operations can be automatically created by TimesTen as described in <a href="prereqs.htm#BCFJJCFJ">&#34;Automatically create Oracle Database objects used to manage data caching&#34;</a> when you create a cache group with the <code>AUTOREFRESH MODE INCREMENTAL</code> cache group attribute. Alternatively, you can manually create these objects as described in <a href="prereqs.htm#BCFHCBJE">&#34;Manually create Oracle Database objects used to manage data caching&#34;</a> before performing any cache grid or cache group operation if, for security purposes, you do not want to grant the <code>RESOURCE</code> and <code>CREATE ANY TRIGGER</code> privileges to the cache administration user required to automatically create these objects.</p>
<p>Before the Oracle Database objects can be automatically or manually created, you must:</p>
<ul>
<li>
<p>Create a cache administration user in the Oracle database as described in <a href="prereqs.htm#BABBEGBI">&#34;Create the Oracle database users&#34;</a>.</p>
</li>
<li>
<p>Set the cache administration user name and password in the TimesTen database as described in <a href="prereqs.htm#BCFFCGHH">&#34;Set the cache administration user name and password&#34;</a>.</p>
</li>
<li>
<p>Start the cache agent as described in <a href="prereqs.htm#BCFIDDJA">&#34;Managing the cache agent&#34;</a>.</p>
</li>
</ul>
<p>For each cache administration user, TimesTen creates the following Oracle Database tables, where <code><span class="codeinlineitalic">version</span></code> is an internal TimesTen version number and <code><span class="codeinlineitalic">object-ID</span></code> is the ID of the cached Oracle Database table:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5353" title="Table descriptions" summary="These tables contain descriptions of tables created on Oracle used to implement automatic refresh and propagation, and to track DDL statements on Oracle tables." dir="ltr">
<thead>
<tr class="cellalignment5344">
<th class="cellalignment5354" id="r1c1-t3">Table Name</th>
<th class="cellalignment5354" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r2c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_AGENT_STATUS</code></td>
<td class="cellalignment5350" headers="r2c1-t3 r1c2-t3">Created when the first cache group is created. Stores information about each Oracle Database table cached in an autorefresh cache group.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r3c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_AR_PARAMS</code></td>
<td class="cellalignment5350" headers="r3c1-t3 r1c2-t3">Created when the cache administration user name and password is set. Stores the action to take when the cache administration user&#39;s tablespace is full.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r4c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_CACHE_STATS</code></td>
<td class="cellalignment5350" headers="r4c1-t3 r1c2-t3">Created when the cache administration user name and password is set.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r5c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DATABASES</code></td>
<td class="cellalignment5350" headers="r5c1-t3 r1c2-t3">Created when the cache administration user name and password is set. Stores the autorefresh status for all TimesTen databases that cache data from the Oracle database.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r6c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DB_PARAMS</code></td>
<td class="cellalignment5350" headers="r6c1-t3 r1c2-t3">Created when the cache administration user name and password is set. Stores the cache agent timeout, recovery method for dead cache groups, and the cache administration user&#39;s tablespace usage threshold.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r7c1-t3" headers="r1c1-t3"><code>TT_</code><code>version</code><code>_DBSPECIFIC_PARAMS</code></td>
<td class="cellalignment5350" headers="r7c1-t3 r1c2-t3">Internal use.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r8c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DDL_L</code></td>
<td class="cellalignment5350" headers="r8c1-t3 r1c2-t3">Created when the cache administration user name and password is set. Tracks DDL statements issued on cached Oracle Database tables.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r9c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DDL_TRACKING</code></td>
<td class="cellalignment5350" headers="r9c1-t3 r1c2-t3">Created when the cache administration user name and password is set. Stores a flag indicating whether tracking of DDL statements on cached Oracle Database tables is enabled or disabled.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r10c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_REPACTIVESTANDBY</code></td>
<td class="cellalignment5350" headers="r10c1-t3 r1c2-t3">Created when the first AWT cache group is created. Tracks the state and roles of TimesTen databases containing cache tables in an AWT cache group that are replicated in an active standby pair replication scheme.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r11c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_REPPEERS</code></td>
<td class="cellalignment5350" headers="r11c1-t3 r1c2-t3">Created when the first AWT cache group is created. Tracks the time and commit sequence number of the last update on the cache tables that was asynchronously propagated to the cached Oracle Database tables.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r12c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_SYNC_OBJS</code></td>
<td class="cellalignment5350" headers="r12c1-t3 r1c2-t3">Created when the first cache group is created.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r13c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_USER_COUNT</code></td>
<td class="cellalignment5350" headers="r13c1-t3 r1c2-t3">Created when the first cache group is created. Stores information about each cached Oracle Database table.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r14c1-t3" headers="r1c1-t3"><code>TT_</code><code><span class="codeinlineitalic">version_object-ID</span></code><code>_L</code></td>
<td class="cellalignment5350" headers="r14c1-t3 r1c2-t3">One change log table is created per Oracle Database table cached in an autorefresh cache group when the cache group is created. Tracks updates on the cached Oracle Database table.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>For each cache administration user, TimesTen creates the following Oracle Database triggers, where <code><span class="codeinlineitalic">version</span></code> is an internal TimesTen version number, <code><span class="codeinlineitalic">object-ID</span></code> is the ID of the cached Oracle Database table, and <code><span class="codeinlineitalic">schema-ID</span></code> is the ID of user who owns the cached Oracle Database table:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5353" title="Trigger descriptions" summary="These tables contain descriptions of triggers created on Oracle used to implement automatic refresh and propagation, and to track DDL statements on Oracle tables." dir="ltr">
<thead>
<tr class="cellalignment5344">
<th class="cellalignment5354" id="r1c1-t4">Trigger Name</th>
<th class="cellalignment5354" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r2c1-t4" headers="r1c1-t4"><code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_REPACTIVESTANDBY_T</code></td>
<td class="cellalignment5350" headers="r2c1-t4 r1c2-t4">Created when the first AWT cache group is created. When fired, inserts rows into the <code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_REPACTIVESTANDBY</code> table.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r3c1-t4" headers="r1c1-t4"><code>TT_</code><code><span class="codeinlineitalic">version_object-ID_</span></code><code>T</code></td>
<td class="cellalignment5350" headers="r3c1-t4 r1c2-t4">One trigger is created per Oracle Database table cached in an autorefresh cache group when the cache group is created. Fired for each insert, delete or update operation issued on the cached Oracle Database table to track operations in the <code>TT_</code><code><span class="codeinlineitalic">version_object-ID</span></code><code>_L</code> change log table.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r4c1-t4" headers="r1c1-t4"><code>TT_</code><code><span class="codeinlineitalic">version_schema-ID</span></code><code>_DDL_T</code></td>
<td class="cellalignment5350" headers="r4c1-t4 r1c2-t4">One trigger for each user who owns cached Oracle Database tables. Created when a cache group is created after tracking of DDL statements has been enabled. Fired for each DDL statement issued on a cached Oracle Database table to track operations in the <code>TT_</code><code><span class="codeinlineitalic">version</span></code><code>_DDL_L</code> table.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p><a id="CEGGBGDA"></a>For the <code>timesten</code> user, TimesTen creates the following Oracle Database tables:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5353" title="Cache grid information" summary="These tables contain information on existing cache grids." dir="ltr">
<thead>
<tr class="cellalignment5344">
<th class="cellalignment5354" id="r1c1-t5">Table Name</th>
<th class="cellalignment5354" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r2c1-t5" headers="r1c1-t5"><code>TT_GRIDID</code></td>
<td class="cellalignment5350" headers="r2c1-t5 r1c2-t5">Created by running the SQL*Plus script <code>initCacheGlobalSchema.sql</code>. Stores the ID number assigned to the most recently created cache grid.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r3c1-t5" headers="r1c1-t5"><code>TT_GRIDINFO</code></td>
<td class="cellalignment5350" headers="r3c1-t5 r1c2-t5">Created by running the SQL*Plus script <code>initCacheGlobalSchema.sql</code>. Stores the grid name, grid ID, and name of the cache administration user for all existing cache grids.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>For each cache administration user, TimesTen creates the following Oracle Database tables, where <code><span class="codeinlineitalic">version</span></code> is an internal TimesTen version number and <code><span class="codeinlineitalic">grid-ID</span></code> is the ID number of the cache grid:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5353" title="Cache grid information" summary="These tables contain information on existing cache grids, its attached grid members, and global cache groups." dir="ltr">
<thead>
<tr class="cellalignment5344">
<th class="cellalignment5354" id="r1c1-t6">Table Name</th>
<th class="cellalignment5354" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r2c1-t6" headers="r1c1-t6"><code>TT_</code><code><span class="codeinlineitalic">version_grid-name_grid-ID</span></code><code>CGNODEID</code></td>
<td class="cellalignment5350" headers="r2c1-t6 r1c2-t6">One table is created per cache grid when a grid is created. Stores the operating system name and version, and TimesTen release number.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r3c1-t6" headers="r1c1-t6"><code>TT_</code><code><span class="codeinlineitalic">version_grid-name_grid-ID</span></code><code>CGNODEINFO</code></td>
<td class="cellalignment5350" headers="r3c1-t6 r1c2-t6">One table is created per cache grid when a grid is created. Stores the host name, member name, IP address, and cache agent TCP/IP port of all attached grid members.</td>
</tr>
<tr class="cellalignment5344">
<td class="cellalignment5350" id="r4c1-t6" headers="r1c1-t6"><code>TT_</code><code><span class="codeinlineitalic">version_grid-name_grid-ID</span></code><code>CGGROUPDEFS</code></td>
<td class="cellalignment5350" headers="r4c1-t6 r1c2-t6">One table is created per cache grid when a grid is created. Stores the cache group name, owner, reference count and SQL text of all global cache groups in standalone TimesTen databases or active standby pairs that are associated with the cache grid.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect1" -->
<a id="CACIFDAC"></a>
<div id="TTCAC319" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Impact of failed autorefresh operations on TimesTen databases<a id="sthref551"></a></h2>
<p>A change log table is created in the cache administration user&#39;s tablespace for each Oracle Database table that is cached in an autorefresh cache group. For each update operation issued on these cached Oracle Database tables, a row is inserted into their change log table to keep track of updates that need to be applied to the TimesTen cache tables upon the next incremental autorefresh cycle. TimesTen periodically deletes rows in the change log tables that have been applied to the cache tables.</p>
<p>An Oracle Database table cannot be cached in more than one cache group within a TimesTen database. However, an Oracle Database table can be cached in more than one TimesTen database. This results in an Oracle Database table corresponding to multiple TimesTen cache tables. If updates on cached Oracle Database tables are not being automatically refreshed into all of their corresponding cache tables because the cache agent is not running on one or more of the TimesTen databases that the Oracle Database tables are cached in, rows in their change log tables are not deleted by default. The cache agent may not be running on a particular TimesTen database because the agent was explicitly stopped or never started, the database was destroyed, or the installed instance that the database resides in is down. As a result, rows accumulate in the change log tables and degrade the performance of autorefresh operations on cache tables in TimesTen databases where the cache agent is running. This can also cause the cache administration user&#39;s tablespace to fill up.</p>
<p>You can set a <a id="sthref552"></a>cache agent timeout to prevent rows from accumulating in the change log tables and not being deleted. The following criteria must be met in order for TimesTen to delete rows in the change log tables when the cache agent is not running on a TimesTen database and a cache agent timeout is set:</p>
<ul>
<li>
<p>Oracle Database tables are cached in autorefresh cache groups within more than one TimesTen database.</p>
</li>
<li>
<p>The cache agent is running on at least one of the TimesTen databases but is not running on at least another database.</p>
</li>
<li>
<p>Rows in the change log tables have been applied to the cache tables on all TimesTen databases where the cache agent is running.</p>
</li>
<li>
<p>For those databases where the cache agent is not running, the agent process has been down for a period of time that exceeds the cache agent timeout.</p>
</li>
</ul>
<p>Call the <code>ttCacheConfig</code> built-in procedure as the cache manager user from any of the TimesTen databases that cache data from the Oracle database. Pass the <code>AgentTimeout</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter and the timeout setting as a numeric string to the <code><span class="codeinlineitalic">Value</span></code> parameter. Do not pass in any values to the <code><span class="codeinlineitalic">tblOwner</span></code> and <code><span class="codeinlineitalic">tblName</span></code> parameters as they are not applicable to setting a cache agent timeout.</p>
<div id="TTCAC320" class="example">
<p class="titleinexample"><a id="sthref553"></a>Example 7-7 Setting <a id="sthref554"></a><a id="sthref555"></a>a cache agent timeout</p>
<p>In the following example, the cache agent timeout is set to 900 seconds (15 minutes):</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheConfig(&#39;AgentTimeout&#39;,,,&#39;900&#39;);
</pre>
<p>To determine the current cache agent timeout setting, call <code>ttCacheConfig</code> passing only the <code>AgentTimeout</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter:</p>
<pre>Command&gt; CALL ttCacheConfig(&#39;AgentTimeout&#39;);
&lt; AgentTimeout, &lt;NULL&gt;, &lt;NULL&gt;, 900 &gt;
</pre></div>
<!-- class="example" -->
<p>The default cache agent timeout is 0 seconds which means rows in the change log tables are not deleted until they have been applied to all its cache tables. If you set the cache agent timeout to a value between 1 and 600 seconds, the timeout is set to 600 seconds. The cache agent timeout applies to all TimesTen databases that cache data from the same Oracle database and have the same cache administration user name setting.</p>
<p>When determining a proper cache agent timeout setting, consider the time it takes to load the TimesTen database into memory, the time to start the cache agent process, potential duration of network outages, and anticipated duration of planned maintenance activities.</p>
<p>Each TimesTen database, and all of its autorefresh cache groups have an <a id="sthref556"></a>autorefresh status to determine whether any deleted rows from the change log tables were not applied to the cache tables in the cache groups. If rows were deleted from the change log tables and not applied to some cache tables because the cache agent on the database was down for a period of time that exceeded the cache agent timeout, those cache tables are no longer synchronized with the cached Oracle Database tables. Subsequent updates on the cached Oracle Database tables are not automatically refreshed into the cache tables until the accompanying cache group is recovered.</p>
<p>The following are the possible statuses for an autorefresh cache group:</p>
<ul>
<li>
<p><code>ok</code>: All of the deleted rows from the change log tables were applied to its cache tables. Incremental autorefresh operations continue to occur on the cache group.</p>
</li>
<li>
<p><code>dead</code>: Some of the deleted rows from the change log tables were not applied to its cache tables so the cache tables are not synchronized with the cached Oracle Database tables. Autorefresh operations have ceased on the cache group and do not resume until the cache group has been recovered.</p>
</li>
<li>
<p><code>recovering</code>: The cache group is being recovered. Once recovery completes, the cache tables are synchronized with the cached Oracle Database tables, the cache group&#39;s autorefresh status is set to <code>ok</code>, and incremental autorefresh operations resume on the cache group.</p>
</li>
</ul>
<p>The following are the possible <a id="sthref557"></a>autorefresh statuses for a TimesTen database:</p>
<ul>
<li>
<p><code>alive</code>: All of its autorefresh cache groups have an autorefresh status of OK.</p>
</li>
<li>
<p><code>dead</code>: All of its autorefresh cache groups have an autorefresh status of dead.</p>
</li>
<li>
<p><code>recovering</code>: At least one of its autorefresh cache groups have an autorefresh status of recovering.</p>
</li>
</ul>
<p>If the cache agent on a TimesTen database is down for a period of time that exceeds the cache agent timeout, the autorefresh status of the database is set to <code>dead</code>. Also, the autorefresh status of all autorefresh cache groups within that database are set to <code>dead</code>.</p>
<p>If you have enabled SNMP traps, a trap is thrown when the autorefresh status of a database is set to <code>dead</code>.</p>
<p>Call the <code>ttCacheDbCgStatus</code> built-in procedure as the cache manager user to determine the autorefresh status of a cache group and its accompanying TimesTen database. Pass the owner of the cache group to the <code><span class="codeinlineitalic">cgOwner</span></code> parameter and the name of the cache group to the <code><span class="codeinlineitalic">cgName</span></code> parameter.</p>
<div id="TTCAC321" class="example">
<p class="titleinexample"><a id="sthref558"></a>Example 7-8 Determining <a id="sthref559"></a><a id="sthref560"></a>the autorefresh status of a cache group and TimesTen database</p>
<p>In the following example, the autorefresh status of the database is <code>alive</code> and the autorefresh status of the <code>cacheuser.customer_orders</code> read-only cache group is <code>ok</code>:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheDbCgStatus(&#39;cacheuser&#39;,&#39;customer_orders&#39;);
&lt; alive, ok &gt;
</pre>
<p>To view only the autorefresh status of the database and not of a particular cache group, call <code>ttCacheDbCgStatus</code> without any parameters:</p>
<pre>Command&gt; CALL ttCacheDbCgStatus;
&lt; dead, &lt;NULL&gt; &gt;
</pre></div>
<!-- class="example" -->
<p>If the autorefresh status of a cache group is <code>ok</code>, its cache tables are being automatically refreshed based on its autorefresh interval. If the autorefresh status of a database is <code>alive</code>, the autorefresh status of all its autorefresh cache groups are <code>ok</code>.</p>
<p>If the autorefresh status of a cache group is <code>dead</code>, its cache tables are no longer being automatically refreshed when updates are committed on the cached Oracle Database tables. The cache group must be recovered in order to resynchronize the cache tables with the cached Oracle Database tables.</p>
<p>You can configure a<a id="sthref561"></a> recovery method for cache groups whose autorefresh status is <code>dead</code>.</p>
<p>Call the <code>ttCacheConfig</code> built-in procedure as the cache manager user from any of the TimesTen databases that cache data from the Oracle database. Pass the <code>DeadDbRecovery</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter and the recovery method as a string to the <code><span class="codeinlineitalic">Value</span></code> parameter. Do not pass in any values to the <code><span class="codeinlineitalic">tblOwner</span></code> and <code><span class="codeinlineitalic">tblName</span></code> parameters as they are not applicable to setting a recovery method for dead cache groups.</p>
<p>The following are the valid recovery methods:</p>
<ul>
<li>
<p><code>Normal</code>: When the cache agent starts, a full autorefresh operation is performed on cache groups whose autorefresh status is <code>dead</code> in order to recover those cache groups. This is the default recovery method.</p>
</li>
<li>
<p><code>Manual</code>: For each explicitly loaded cache group whose autorefresh status is <code>dead</code>, a <code>REFRESH CACHE GROUP</code> statement must be issued in order to recover these cache groups after the cache agent starts.</p>
<p>For each dynamic cache group whose autorefresh status is <code>dead</code>, a <code>REFRESH CACHE GROUP</code> or <code>UNLOAD CACHE GROUP</code> statement must be issued in order to recover these cache groups after the cache agent starts.</p>
</li>
<li>
<p><code>None</code>: Cache groups whose autorefresh status is <code>dead</code> must be dropped and then re-created after the cache agent starts in order to recover them.</p>
</li>
</ul>
<div id="TTCAC322" class="example">
<p class="titleinexample"><a id="sthref562"></a>Example 7-9 Configuring <a id="sthref563"></a><a id="sthref564"></a><a id="sthref565"></a><a id="sthref566"></a><a id="sthref567"></a>the recovery method for dead cache groups</p>
<p>In the following example, the recovery method is set to <code>Manual</code> for cache groups whose autorefresh status is <code>dead</code>:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheConfig(&#39;DeadDbRecovery&#39;,,,&#39;Manual&#39;);
</pre>
<p>To determine the current recovery method for dead cache groups, call <code>ttCacheConfig</code> passing only the <code>DeadDbRecovery</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter:</p>
<pre>Command&gt; CALL ttCacheConfig(&#39;DeadDbRecovery&#39;);
&lt; DeadDbRecovery, &lt;NULL&gt;, &lt;NULL&gt;, manual &gt;
</pre></div>
<!-- class="example" -->
<p>The recovery method applies to all autorefresh cache groups in all TimesTen databases that cache data from the same Oracle database and have the same cache administration user name setting.</p>
<p>If you have enabled SNMP traps, a trap is thrown when the cache agent starts and the recovery method is set to <code>Manual</code> or <code>None</code> to alert you to manually issue a statement such as <code>REFRESH CACHE GROUP</code> or <code>DROP CACHE GROUP</code> in order to recover cache groups in the database whose autorefresh status is <code>dead</code>.</p>
<p>When a cache group begins the recovery process, its autorefresh status is changed from <code>dead</code> to <code>recovering</code>, and the status of the accompanying TimesTen database is changed to <code>recovering</code>, if it is currently <code>dead</code>.</p>
<p>After the cache group has been recovered, its autorefresh status is changed from <code>recovering</code> to <code>ok</code>. Once all cache groups have been recovered and their autorefresh statuses are <code>ok</code>, the status of the accompanying TimesTen database is changed from <code>recovering</code> to <code>alive</code>.</p>
<p>A full autorefresh operation requires more system resources to process than an incremental autorefresh operation when there is a small volume of updates to refresh and a large number of rows in the cache tables. If you need to bring a TimesTen database down for maintenance activities and the volume of updates anticipated during the downtime on the Oracle Database tables that are cached in autorefresh cache groups is small, you can consider temporarily setting the cache agent timeout to 0. When the database is brought back up and the cache agent restarted, incremental autorefresh operations resumes on cache tables in autorefresh cache groups. Full autorefresh operations are avoided because the autorefresh status on the accompanying cache groups were not changed from <code>ok</code> to <code>dead</code> so those cache groups do not need to go through the recovery process. Make sure to set the cache agent timeout back to its original value once the database is back up and the cache agent has been started.</p>
</div>
<!-- class="sect1" -->
<a id="BABGJCHH"></a>
<div id="TTCAC323" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Dropping Oracle Database objects used by autorefresh cache groups<a id="sthref568"></a><a id="sthref569"></a></h2>
<p>If a TimesTen database that contains autorefresh cache groups becomes unavailable, Oracle Database objects such as change log tables and triggers used to implement autorefresh operations continue to exist in the Oracle database. A TimesTen database is unavailable, for example, when the TimesTen system is taken offline or the database has been destroyed without dropping its autorefresh cache groups.</p>
<p>Oracle Database objects used to implement autorefresh operations also continue to exist in the Oracle database when a TimesTen database is no longer being used but still contains autorefresh cache groups. Rows continue to accumulate in the change log tables. This impacts autorefresh performance on other TimesTen databases. Therefore, it is desirable to drop these Oracle Database objects associated with the unavailable or abandoned TimesTen database.</p>
<p>Run the <code><span class="codeinlineitalic"><a id="sthref570"></a><a id="sthref571"></a>TimesTen_install_dir</span></code><code>/oraclescripts/cacheCleanUp.sql</code> SQL*Plus script as the cache administration user to drop the Oracle Database objects used to implement autorefresh operations. The host name of the TimesTen system and the TimesTen database path name are passed as arguments to the <code>cacheCleanUp.sql</code> script. You can run the <code>cacheInfo.sql</code> script as the cache administration user to determine the host name of the TimesTen system and the database path name. The <code>cacheInfo.sql</code> script can also be used to determine whether any objects used to implement autorefresh operations exist in the Oracle database.</p>
<div id="TTCAC324" class="example">
<p class="titleinexample"><a id="sthref572"></a>Example 7-10 Dropping Oracle Database objects for autorefresh cache groups</p>
<p>In the following example, the TimesTen database still contained one read-only cache group <code>customer_orders</code> with cache tables <code>oratt.customer</code> and <code>oratt.orders</code> when the database was dropped. The <code>cacheCleanUp.sql</code> script drops the change log tables and triggers associated with the two cache tables.</p>
<pre>% cd <span class="italic">TimesTen_install_dir</span>/oraclescripts
% sqlplus cacheuser/oracle
SQL&gt; @cacheCleanUp &#34;sys1&#34; &#34;/users/OracleCache/alone1&#34;

*****************************OUTPUT**************************************
Performing cleanup for object_id: 69959 which belongs to table : CUSTOMER
Executing: delete from tt_05_agent_status where host = sys1 and datastore =
/users/OracleCache/alone1 and object_id = 69959
Executing: drop table tt_05_69959_L
Executing: drop trigger tt_05_69959_T
Executing: delete from tt_05_user_count where object_id = object_id1
Performing cleanup for object_id: 69966 which belongs to table : ORDERS
Executing: delete from tt_05_agent_status where host = sys1 and datastore =
/users/OracleCache/alone1 and object_id = 69966
Executing: drop table tt_05_69966_L
Executing: drop trigger tt_05_69966_T
Executing: delete from tt_05_user_count where object_id = object_id1
**************************************************************************
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CACBIHBH"></a>
<div id="TTCAC325" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Monitoring<a id="sthref573"></a><a id="sthref574"></a> the cache administration user&#39;s tablespace</h2>
<p>The following sections describe how to manage the cache administration user&#39;s tablespace:</p>
<ul>
<li>
<p><a href="#CACEGAAJ">Defragmenting change log tables in the tablespace</a></p>
</li>
<li>
<p><a href="#CACHDBJB">Receiving notification on tablespace usage</a></p>
</li>
<li>
<p><a href="#CACHGADA">Recovering from a full tablespace</a></p>
</li>
</ul>
<a id="CACEGAAJ"></a>
<div id="TTCAC468" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defragmenting change log tables in the tablespace<a id="sthref575"></a><a id="sthref576"></a><a id="sthref577"></a><a id="sthref578"></a><a id="sthref579"></a></h3>
<p>Prolonged use or a heavy workload of the change log tables for autorefresh cache groups can result in fragmentation of the tablespace. In order to prevent degradation of the tablespace from fragmentation of the change log tables, TimesTen calculates the percentage of fragmentation for the change log tables as a ratio of used space to the total size of the space. If this ratio falls below a defined threshold, TimesTen alerts you of the necessity for defragmentation of the change log tables by logging a message and, if you have enabled SNMP traps, by throwing the <code>ttCacheAutorefreshLogSpaceDeFragDetectedTrap</code> SNMP trap. By default, this threshold is set to 40%. You can configure what the fragmentation threshold should be with the <code>ttCacheConfig</code> built-in procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Messages are logged to the user and support error logs. For details, see <a class="olink TTOPR218" href="../TTOPR/daemon.htm#TTOPR218">&#34;Modifying informational messages&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</div>
<p>To set the fragmentation threshold, call the <code>ttCacheConfig</code> built-in procedure as the cache manager user from any of the TimesTen databases that cache data from the Oracle database. Pass the <code>AutoRefreshLogFragmentationWarningPCT</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter and the threshold setting as a numeric string to the <code><span class="codeinlineitalic">Value</span></code> parameter.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not pass in any values to the <code><span class="codeinlineitalic">tblOwner</span></code> and <code><span class="codeinlineitalic">tblName</span></code> parameters as they are not applicable to setting the fragmentation threshold.</div>
<div id="TTCAC469" class="example">
<p class="titleinexample"><a id="sthref580"></a>Example 7-11 Setting a fragmentation threshold</p>
<p>In the following example, the fragmentation threshold is set to 50%:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheConfig(&#39;AutoRefreshLogFragmentationWarningPCT&#39;,,,&#39;50&#39;);
&lt; AutoRefreshLogFragmentationWarningPCT, &lt;NULL&gt;, &lt;NULL&gt;, 50 &gt;
1 row found.
</pre></div>
<!-- class="example" -->
<p>To determine the current fragmentation threshold setting, call <code>ttCacheConfig</code> passing the <code>AutoRefreshLogFragmentationWarningPCT</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter:</p>
<pre>Command&gt; CALL ttCacheConfig(&#39;AutoRefreshLogFragmentationWarningPCT&#39;);
&lt; AutoRefreshLogFragmentationWarningPCT, &lt;NULL&gt;, &lt;NULL&gt;, 50 &gt;
</pre>
<p>You can either configure TimesTen to perform defragmentation automatically or manually initiate defragmentation. To configure what action is taken when the ratio falls below the fragmentation threshold, call the <code>ttCacheConfig</code> built-in procedure with the <code>AutoRefreshLogDeFragmentAction</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter and the desired action as the <code><span class="codeinlineitalic">Value</span></code> parameter as follows:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not pass in any values to the <code><span class="codeinlineitalic">tblOwner</span></code> and <code><span class="codeinlineitalic">tblName</span></code> parameters as they are not applicable to setting the defragmentation action.</div>
<ul>
<li>
<p><code>Manual</code>. This is the default. No action is taken to defragment the change log tables. Any defragmentation must be performed manually by executing the <code>ttCacheAutoRefreshLogDeFrag</code> built-in procedure. See <a href="#CACGFFJE">&#34;Manually defragmenting the change log tables for autorefresh cache groups&#34;</a> for more information.</p>
</li>
<li>
<p><code>Compact</code>: TimesTen defragments the change log tables.</p>
</li>
<li>
<p><code>CompactAndReclaim</code>: TimesTen defragments the change log tables and reclaims the space.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When reclaiming space, the change log table is briefly locked, which temporarily suspends writing into the base table.</div>
</li>
</ul>
<div id="TTCAC470" class="example">
<p class="titleinexample"><a id="sthref581"></a>Example 7-12 Configuring action for fragmentation</p>
<p>In the following example, the action is set to <code>CompactAndReclaim</code> so that when the fragmentation ratio falls below the threshold, TimesTen defragments the change log tables and reclaims the space:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheConfig(&#39;AutoRefreshLogDeFragmentAction&#39;,,,&#39;CompactAndReclaim&#39;);
&lt; AutoRefreshLogDeFragmentAction, &lt;NULL&gt;, &lt;NULL&gt;, compactandreclaim &gt;
1 row found.
</pre>
<p>To determine the current fragmentation threshold setting, call <code>ttCacheConfig</code> passing the <code>AutoRefreshLogDeFragmentAction</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter:</p>
<pre>Command&gt; CALL ttCacheConfig(&#39;AutoRefreshLogDeFragmentAction&#39;);
&lt; AutoRefreshLogDeFragmentAction , &lt;NULL&gt;, &lt;NULL&gt;, compactandreclaim &gt;
</pre></div>
<!-- class="example" -->
<p>You can discover the fragmentation percentage of the tablespace and when the last defragmentation operation was performed with the following returned columns from the <code><a id="sthref582"></a>ttCacheAutorefreshStatsGet</code> built-in procedure:</p>
<ul>
<li>
<p><code>AutoRefreshLogFragmentationPCT</code>: The current fragmentation percentage for the tablespace.</p>
</li>
<li>
<p><code>AutoRefreshLogFragmentationTS</code>: The timestamp of when the last fragmentation percentage was calculated.</p>
</li>
<li>
<p><code>autorefLogDeFragCnt</code>: The count for how many times the tables in this particular cache group have been defragmented.</p>
</li>
</ul>
<p>For more details, see <a class="olink TTREF220" href="../TTREF/proced.htm#TTREF220">&#34;ttCacheAutorefreshStatsGet&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<a id="CACGFFJE"></a>
<div id="TTCAC471" class="sect3">
<h4 class="sect3">Manually defragmenting the change log tables for autorefresh cache groups<a id="sthref583"></a></h4>
<p>To manually initiate a defragmentation of the change log tables, call the <code>ttCacheAutoRefreshLogDeFrag</code> built-in procedure as the cache manager user from any of the TimesTen databases that cache data from the Oracle database. Pass in one of the following strings as the parameter:</p>
<ul>
<li>
<p><code>Compact</code>: Defragment the change log tables.</p>
</li>
<li>
<p><code>CompactAndReclaim</code>: Defragment the change log tables and reclaim the space.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When reclaiming space, the change log table is briefly locked, which temporarily suspends writing into the base table.</div>
</li>
</ul>
<div id="TTCAC475" class="example">
<p class="titleinexample"><a id="sthref584"></a>Example 7-13 Manually defragmenting the change log tables</p>
<p>In the following example, the user calls the <code>ttCacheAutoRefreshLogDeFrag</code> built-in procedure with the <code>CompactAndReclaim</code> option:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheAutoRefreshLogDeFrag(&#39;CompactAndReclaim&#39;);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACHDBJB"></a>
<div id="TTCAC472" class="sect2">
<h3 class="sect2">Receiving notification on tablespace usage<a id="sthref585"></a><a id="sthref586"></a></h3>
<p>In order to avoid the tablespace becoming full, you can configure TimesTen to return a <a id="sthref587"></a><a id="sthref588"></a>warning to the application when an update operation such as an <code>UPDATE</code>, <code>INSERT</code> or <code>DELETE</code> statement is issued on cached Oracle Database tables and causes the usage of the cache administration user&#39;s tablespace to exceed a specified threshold.</p>
<p>Call the <code>ttCacheConfig</code> built-in procedure as the cache manager user from any of the TimesTen databases that cache tables from the Oracle database. Pass the <code>AutoRefreshLogTblSpaceUsagePCT</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter and the threshold as a numeric string to the <code><span class="codeinlineitalic">Value</span></code> parameter. The threshold value represents the percentage of space used in the cache administration user&#39;s tablespace upon which a warning is returned to the application when an update operation is issued on a cached Oracle Database table. Do not pass in any values to the <code><span class="codeinlineitalic">tblOwner</span></code> and <code><span class="codeinlineitalic">tblName</span></code> parameters as they are not applicable to setting a warning threshold for the usage of the cache administration user&#39;s tablespace.</p>
<p>The cache administration user must be granted the <code>SELECT</code> privilege on the Oracle Database <code>SYS.DBA_DATA_FILES</code> table in order for the cache manager user to set a warning threshold on the cache administration user&#39;s tablespace usage, and for the cache administration user to monitor its tablespace to determine if the configured threshold has been exceeded.</p>
<div id="TTCAC327" class="example">
<p class="titleinexample"><a id="sthref589"></a>Example 7-14 Setting a <a id="sthref590"></a><a id="sthref591"></a><a id="sthref592"></a>cache administration user&#39;s tablespace usage warning threshold</p>
<p>The following example configures a warning to be returned to the application that issues an update operation on a cached Oracle Database table if it results in the usage of the cache administration user&#39;s tablespace to exceed 80 percent:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheConfig(&#39;AutoRefreshLogTblSpaceUsagePCT&#39;,,,&#39;80&#39;);
</pre>
<p>To determine the current cache administration user&#39;s tablespace usage warning threshold, call <code>ttCacheConfig</code> passing only the <code>AutoRefreshLogTblSpaceUsagePCT</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter:</p>
<pre>Command&gt; CALL ttCacheConfig(&#39;AutoRefreshLogTblSpaceUsagePCT&#39;);
&lt; AutoRefreshLogTblSpaceUsagePCT, &lt;NULL&gt;, &lt;NULL&gt;, 80 &gt;
</pre></div>
<!-- class="example" -->
<p>The default cache administration user&#39;s tablespace usage warning threshold is 0 percent which means that no warning is returned to the application regardless of the tablespace usage. The cache administration user&#39;s tablespace usage warning threshold applies to all TimesTen databases that cache tables from the same Oracle database and have the same cache administration user name setting.</p>
<p>If you have enabled SNMP traps, a trap is thrown when the cache administration user&#39;s tablespace usage has exceeded the configured threshold.</p>
</div>
<!-- class="sect2" -->
<a id="CACHGADA"></a>
<div id="TTCAC473" class="sect2">
<h3 class="sect2">Recovering from a full tablespace<a id="sthref593"></a><a id="sthref594"></a></h3>
<p>By default, when the cache administration user&#39;s tablespace is full, an error is returned to the Oracle Database application when it attempts a DML operation, such as an <code>UPDATE</code>, <code>INSERT</code> or <code>DELETE</code> statement, on a particular cached Oracle Database table.</p>
<p>Rather than TimesTen returning an error to the Oracle Database application when the<a id="sthref595"></a><a id="sthref596"></a> cache administration user&#39;s tablespace is full, you can configure TimesTen to delete existing rows from the change log tables to make space for new rows when an update operation is issued on a particular cached Oracle Database table. If some of the deleted change log table rows have not been applied to the TimesTen cache tables, a full autorefresh operation is performed on those cache tables in each TimesTen database that contains the tables upon the next autorefresh cycle.</p>
<p>Call the <code>ttCacheConfig</code> built-in procedure as the cache manager user from any of the TimesTen databases that cache tables from the Oracle database. Pass the <code>TblSpaceFullRecovery</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter, the owner and name of the cached Oracle Database table to the <code><span class="codeinlineitalic">tblOwner</span></code> and <code><span class="codeinlineitalic">tblName</span></code> parameters, respectively, on which you want to configure an action to take if the cache administration user&#39;s tablespace becomes full, and the action itself as a string to the <code><span class="codeinlineitalic">Value</span></code> parameter.</p>
<p>The following are the valid actions:</p>
<ul>
<li>
<p><code>None</code>: Return an Oracle Database error to the application when an update operation is issued on the cached Oracle Database table. This is the default action.</p>
</li>
<li>
<p><code>Reload</code>: Delete rows from the change log table and perform a full autorefresh operation on the cache table upon the next autorefresh cycle when an update operation is issued on the cached Oracle Database table.</p>
</li>
</ul>
<div id="TTCAC326" class="example">
<p class="titleinexample"><a id="sthref597"></a>Example 7-15 Configuring an <a id="sthref598"></a><a id="sthref599"></a><a id="sthref600"></a><a id="sthref601"></a>action when the cache administration user&#39;s tablespace becomes full</p>
<p>In the following example, rows are deleted from the change log table and a full autorefresh operation is performed on the cache table upon the next autorefresh cycle when an update operation is issued on the <code>oratt.customer</code> cached Oracle Database table while the cache administration user&#39;s tablespace is full:</p>
<pre>% ttIsql &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; CALL ttCacheConfig(&#39;TblSpaceFullRecovery&#39;,&#39;oratt&#39;,&#39;customer&#39;,&#39;Reload&#39;);
</pre>
<p>To determine the current action to take when an update operation is issued on a particular cached Oracle Database table if the cache administration user&#39;s tablespace is full, call <code>ttCacheConfig</code> passing only the <code>TblSpaceFullRecovery</code> string to the <code><span class="codeinlineitalic">Param</span></code> parameter, and the owner and name of the cached Oracle Database table to the <code><span class="codeinlineitalic">tblOwner</span></code> and <code><span class="codeinlineitalic">tblName</span></code> parameters, respectively:</p>
<pre>Command&gt; CALL ttCacheConfig(&#39;TblSpaceFullRecovery&#39;,&#39;oratt&#39;,&#39;customer&#39;);
&lt; TblSpaceFullRecovery, ORATT, CUSTOMER, reload &gt;
</pre></div>
<!-- class="example" -->
<p>The action to take when update operations are issued on a cached Oracle Database table while the cache administration user&#39;s tablespace is full applies to all TimesTen databases that cache tables from the same Oracle database and have the same cache administration user name setting,</p>
<p>If you have enabled SNMP traps, a trap is thrown when an update operation is issued on a cached Oracle Database table and the cache administration user&#39;s tablespace is full.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACEACDD"></a>
<div id="TTCAC432" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Recovering after failure of a grid node<a id="sthref602"></a><a id="sthref603"></a><a id="sthref604"></a><a id="sthref605"></a><a id="sthref606"></a><a id="sthref607"></a></h2>
<p>When a standalone database grid member fails, the cache agent automatically restarts if the cache agent start policy is <code>manual</code> or <code>always</code>. The grid member is automatically reattached to the grid when the database recovers. If the cache agent start policy is <code>norestart</code>, you must restart the cache agent and then call the <code>ttGridAttach</code> built-in procedure to reattach the member to the grid. See <a href="prereqs.htm#BCFHEBIF">&#34;Set a cache agent start policy&#34;</a>.</p>
<p>You can verify that a standalone database grid member is attached to the grid by calling<a id="sthref608"></a><a id="sthref609"></a><a id="sthref610"></a><a id="sthref611"></a> the <code>ttRepStateGet</code> built-in procedure. If it is attached, you should see this output:</p>
<pre>Command&gt; CALL ttRepStateGet;
&lt; IDLE, AVAILABLE &gt;
1 row found.
</pre>
<p>If the active or the standby database node in an active standby pair grid member fails when Oracle Clusterware is managing the nodes in the grid, the grid node is automatically reattached to the grid when the cache agent restarts. For more information about how Oracle Clusterware handles failures, see <a class="olink TTREP281" href="../TTREP/cluster.htm#TTREP281">&#34;Recovering from failures&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
<p>If the active standby pair grid member is not managed by Oracle Clusterware, then perform the steps in <a class="olink TTREP233" href="../TTREP/standbycache.htm#TTREP233">&#34;Recovering from a failure of the active database&#34;</a> or <a class="olink TTREP241" href="../TTREP/standbycache.htm#TTREP241">&#34;Recovering from a failure of the standby database&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>. If the cache agent start policy is <code>manual</code> or <code>always</code>, the grid node is automatically reattached to the grid after the database recovers.). If the cache agent start policy is <code>norestart</code>, call the <code>ttGridAttach</code> built-in procedure to reattach the member to the grid.</p>
<p>Call the <code>ttRepStateGet</code> built-in procedure from the active database to verify that the active database is available and that the active standby pair is attached to the grid:</p>
<pre>Command&gt; CALL ttRepStateGet;
&lt; ACTIVE, AVAILABLE &gt;
1 row found.
</pre>
<p>For more information, see <a class="olink TTREF290" href="../TTREF/proced.htm#TTREF290">&#34;ttRepStateGet&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<p>A multinode failure can occur because of a hardware failure or network failure, for example. After a multinode failure occurs, call the <code>ttGridAttach</code> built-in procedure for each member that needs to be reattached. The operation fails for each grid member until you call the built-in procedure on the last grid member to be reattached. Call <code>ttGridAttach</code> again for the grid members that have not yet been attached and the operation succeeds. This sequence is necessary to prevent a &#34;split-brain&#34; situation with grid members being unaware of each other&#39;s states.</p>
</div>
<!-- class="sect1" -->
<a id="CACIIEDI"></a>
<div id="TTCAC460" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Backing up and restoring a database with cache groups</h2>
<p>Databases containing cache groups can be backed up and restored with either the <code>ttBackup</code> or <code>ttMigrate</code> utilities.</p>
<ul>
<li>
<p>If the restored database connects to the same backend Oracle database, then use the <code>ttBackup</code> and <code>ttRestore</code> utilities, then drop and recreate all cache groups in the restored TimesTen database. If they are static cache groups, you may be required to reload them. For dynamic cache groups, the reload is optional as data is pulled in from the Oracle database as it is referenced.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If another TimesTen database is used to connect to the original backend Oracle database (and now no longer connects) and if all cache groups in the TimesTen database were not cleanly dropped, then execute the <code>cacheCleanUp.sql</code> SQL*Plus script against the original Oracle database to remove all leftover objects. Specify the host and path for the original TimesTen database.</div>
</li>
<li>
<p>If the restored database connects to a different backend Oracle database than what it had originally connected with, then perform one of the following:</p>
<ul>
<li>
<p><a href="#CACJHDHJ">Backing up and restoring using the ttBackup and ttRestore utilities</a></p>
</li>
<li>
<p><a href="#CACBJDBD">Backing up and restoring with the ttMigrate utility</a></p>
</li>
</ul>
</li>
</ul>
<a id="CACJHDHJ"></a>
<div id="TTCAC538" class="sect2">
<h3 class="sect2">Backing up and restoring using the ttBackup and ttRestore utilities</h3>
<p>When you use the <code>ttBackup</code> utility, it backs up the TimesTen database with all of its data at a particular time. Thus, if you want to use these cache groups again, restoring this backup requires additional action as the restored data within the cache groups are out of date and out of sync with the data in the backend Oracle database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a class="olink TTINS252" href="../TTINS/migrate.htm#TTINS252">&#34;Migration, Backup, and Restoration&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span> and <a class="olink TTREF323" href="../TTREF/util.htm#TTREF323">&#34;ttBackup&#34;</a> and <a class="olink TTREF363" href="../TTREF/util.htm#TTREF363">&#34;ttRestore&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for more information on these tools.</div>
<p>If the restored database connects to a different backend Oracle database than what it had originally connected with and you want to use the <code>ttBackup</code> and <code>ttRestore</code> utilities to backup and restore your database, then perform the following:</p>
<ol>
<li>
<p>Execute the <code>ttBackup</code> utility command to backup the database and its objects into a binary file. For example, to backup the <code>cachealone1</code> database using the <code>/tmp/dump</code> directory for temporary storage:</p>
<pre>$ ttBackup -dir /tmp/dump -connstr &#34;DSN=cachealone1&#34;
</pre></li>
<li>
<p>Drop all cache groups and destroy the database. Since the database still exists with its cache groups, drop the cache groups and then destroy the database before restoring in the same or another location.</p>
<pre>$ ttIsql -connstr &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; call ttCacheStop;
Command&gt; DROP CACHE GROUP readcache;
Command&gt; exit;
Disconnecting...
Done.

$ ttDestroy cachealone1
</pre></li>
<li>
<p>Restore the database with the <code>ttRestore</code> utility and then delete the temporary directory.</p>
<pre>$ ttRestore -dir /tmp/dump -connstr &#34;DSN=cachealone1&#34;
Restore started ...
Restore complete

$ rm -r /tmp/dump
</pre></li>
<li>
<p>In order to re-synchronize the data within the cache groups, you must drop and recreate the cache groups:</p>
<ol>
<li>
<p>Connect to the TimesTen database.</p>
</li>
<li>
<p>Drop the cache groups that were restored with the <code>ttRestore</code> utility. Because the data is out of sync, you may see errors.</p>
</li>
<li>
<p>Specify the cache administrator user name and password with the <code>ttCacheUidPwdSet</code> built-in procedure.</p>
</li>
<li>
<p>Start the cache agent.</p>
</li>
<li>
<p>Recreate and, if required, reload the cache groups.</p>
</li>
</ol>
<pre>$ ttIsql -connstr &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;

Command&gt; DROP CACHE GROUP readcache;
Command&gt; call ttCacheUidPwdSet(&#39;cacheuser&#39;,&#39;oracle&#39;);
Command&gt; call ttCacheStart;
Command&gt; CREATE READONLY CACHE GROUP readcache
       &gt; AUTOREFRESH INTERVAL 5 SECONDS
       &gt; FROM oratt.readtab
       &gt; (keyval NUMBER NOT NULL PRIMARY KEY, str VARCHAR2(32));
Command&gt; LOAD CACHE GROUP readcache COMMIT EVERY 256 ROWS;
2 cache instances affected.
</pre></li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the restored TimesTen database is not able to connect to any backend Oracle database, then TimesTen cannot autorefresh the data for the read-only cache groups.</div>
</div>
<!-- class="sect2" -->
<a id="CACBJDBD"></a>
<div id="TTCAC537" class="sect2">
<h3 class="sect2">Backing up and restoring with the ttMigrate utility</h3>
<p>The <code>ttMigrate</code> utility saves tables and indexes from a TimesTen database into a binary file. When a cache group is migrated and included in the binary file, it includes the cache group definition and schema; however, the data of the cache group is not migrated.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a class="olink TTINS252" href="../TTINS/migrate.htm#TTINS252">&#34;Migration, Backup, and Restoration&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span> and <a class="olink TTREF343" href="../TTREF/util.htm#TTREF343">&#34;ttMigrate&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for more information on these tools.</div>
<p>If the restored database connects to a different backend Oracle database than what it had originally connected with and you want to use the <code>ttMigrate</code> utility for backing up and restoring the database, then perform the following:</p>
<ol>
<li>
<p>Execute the <code>ttMigrate -c</code> utility command to save the database and its objects into a binary file.</p>
<pre>$ ttMigrate -c &#34;DSN=cachealone1&#34; cachealone1.ttm
...
Saving user CACHEUSER
User successfully saved.

Saving user ORATT
User successfully saved.
 
Saving table CACHEUSER.READTAB
  Saving rows...
  2/2 rows saved.
Table successfully saved.
 
Saving cache group CACHEUSER.READCACHE
  Saving cached table ORATT.READTAB
Cache group successfully saved.
</pre></li>
<li>
<p>Drop all cache groups and destroy the TimesTen database:</p>
<ol>
<li>
<p>Stop the cache agent.</p>
</li>
<li>
<p>Drop all cache groups. You may see errors reported, which can be ignored. When you drop all cache groups before destroying the TimesTen database, all metadata on the Oracle Database for these cache groups is deleted.</p>
</li>
<li>
<p>Destroy the TimesTen database.</p>
<pre>Command&gt; call ttCacheStop;
 Command&gt; DROP CACHE GROUP readcache;
 Command&gt; exit
Disconnecting...
Done.
$ ttDestroy cachealone1
</pre></li>
</ol>
</li>
<li>
<p>Create and restore the database:</p>
<ol>
<li>
<p>Create the TimesTen database with a first connection request.</p>
</li>
<li>
<p>Create the TimesTen cache table user and the TimesTen cache manager user. Grant appropriate privileges to these users.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Depending on which TimesTen release you are migrating from, the users and privileges may or may not be migrated. See <a class="olink TTREF343" href="../TTREF/util.htm#TTREF343">&#34;ttMigrate&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for more information.</div>
</li>
<li>
<p>Restore the database from the saved binary file with the <code>ttMigrate -r</code> utility command.</p>
<pre>$ ttIsql cachealone1
Command&gt; CREATE USER cacheuser IDENTIFIED BY timesten;
 User created.
 
Command&gt; GRANT CREATE SESSION, CACHE_MANAGER, CREATE ANY TABLE TO cacheuser;
Command&gt; CREATE USER oratt IDENTIFIED BY timesten; 
User created.
 
Command&gt; exit
Disconnecting...
Done.

$ ttMigrate -r -relaxedUpgrade -cacheuid cacheuser -cachepwd oracle
 -connstr &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
 cachealone1.ttm
...
Restoring table CACHEUSER.READTAB
  Restoring rows...
  2/2 rows restored.
Table successfully restored.
 
Restoring cache group CACHEUSER.READCACHE
  Restoring cached table ORATT.READTAB
  1/1 cached table restored.
Cache group successfully restored.
</pre></li>
</ol>
</li>
<li>
<p>Connect to the restored database and reset the cache autorefresh state:</p>
<ol>
<li>
<p>Connect to the TimesTen database with ttIsql.</p>
</li>
<li>
<p>Specify the cache administrator user name and password with the <code>ttCacheUidPwdSet</code> built-in procedure.</p>
</li>
<li>
<p>Start the cache agent.</p>
</li>
<li>
<p>Alter the cache groups to set autorefresh state to <code>ON</code>.</p>
<pre>$ ttIsql -connstr &#34;DSN=cachealone1;UID=cacheuser;PWD=timesten;OraclePWD=oracle&#34;
Command&gt; call ttCacheUidPwdSet(&#39;cacheuser&#39;,&#39;oracle&#39;);
Command&gt; call ttCacheStart;
Command&gt; ALTER CACHE GROUP readcache SET AUTOREFRESH STATE ON;
</pre></li>
</ol>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the restored TimesTen database is not able to connect to any backend Oracle database, then TimesTen cannot autorefresh the data for the read-only cache groups.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACGGEFA"></a>
<div id="TTCAC545" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Changing cache user names and passwords</h2>
<p>Perform the following to change any of the user names or passwords for the TimesTen cache manager user, its companion Oracle user, or the cache administration user:</p>
<ol>
<li>
<p>If you want to modify the cache manager user or password, perform the following:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Passwords for both the TimesTen cache manager user and its companion Oracle user can be changed at any time.
<p>The name for the cache manager user on TimesTen must be the same as its companion Oracle user; however, the passwords may be different. For more details on the cache manager user and its companion Oracle user, see <a href="prereqs.htm#BCFFABDH">&#34;Create the TimesTen users&#34;</a>.</p>
</div>
<ol>
<li>
<p>On the TimesTen database, if you want to modify the password of the cache manager user, then use the <code>ALTER USER</code> statement on the active master.</p>
<pre>Command&gt; ALTER USER cacheuser IDENTIFIED BY newpwd;
</pre></li>
<li>
<p>On the back-end Oracle database, you can modify the cache manager companion Oracle password with the <code>ALTER USER</code> statement. If you are working on TimesTen, you can use <code>Passthrough 3</code> to execute this directly on the Oracle database.</p>
<pre>Command&gt; passthrough 3; 
Command&gt; ALTER USER cacheuser IDENTIFIED BY newpwd;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have modified the password for the companion Oracle user, reconnect to the TimesTen database as the cache manager user providing passwords for the cache manager user and its companion Oracle user.</div>
</li>
<li>
<p>If you want to change the cache manager user, you must first drop all cache groups that the cache manager user owns before dropping the existing user and creating a new user.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Alternatively, if you want to use a different user as the cache manager user, ensure that it has the correct privileges and a companion Oracle user with the correct privileges.</div>
<p>In addition, since the cache manager user must have a companion Oracle user with the same name, you must either:</p>
<ul>
<li>
<p>Drop all tables owned by the current companion Oracle user, drop the user, and then re-create it with the same name as the new cache manager user. If the current companion Oracle user is the cache administration user, see Step 3.</p>
</li>
<li>
<p>Choose another Oracle user that has the same name as the cache manager user and provides the same functionality.</p>
</li>
</ul>
<p>For full details on how to create a cache manager user and its companion Oracle user, see <a href="prereqs.htm#BCFFABDH">&#34;Create the TimesTen users&#34;</a>.</p>
</li>
<li>
<p>If the TimesTen cache manager user name or password are defined in the <code>sys.odbc.ini</code> (or <code>odbc.ini</code>) file, update the new cache manager user name or password in the <code>sys.odbc.ini</code> (or <code>odbc.ini</code>) file on both the active and standby masters.</p>
</li>
</ol>
</li>
<li>
<p>If you want to modify the cache administration user or its password, perform the following:</p>
<ol>
<li>
<p>On the back-end Oracle database, you can modify the cache administration password with the <code>ALTER USER</code> statement. The password of the cache administration user can be changed at any time.</p>
<p>If you are working on TimesTen, you can use <code>Passthrough 3</code> to execute this directly on the Oracle database.</p>
<pre>Command&gt; passthrough 3; 
Command&gt; ALTER USER cacheuser IDENTIFIED BY newpwd;
</pre></li>
<li>
<p>If you want to change the cache administration user, you must first drop all cache groups on the TimesTen database that the cache administration user manages before you can drop the cache administration user on the Oracle database and create a new user. Dropping the cache groups on TimesTen removes all metadata associated with those cache groups.</p>
<p>When you create a new cache administration user on the Oracle database, you must follow the same instructions for creating a cache adminstration user that are provided in the <a href="prereqs.htm#BABBEGBI">&#34;Create the Oracle database users&#34;</a>.</p>
</li>
<li>
<p>Set the new user name or password for the cache administration user by executing the <code>ttCacheUidPwdSet</code> built-in procedure on the active master database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="prereqs.htm#BCFFCGHH">&#34;Set the cache administration user name and password&#34;</a>.</div>
<pre>Command&gt; call ttCacheUidPwdSet(&#39;cacheuser&#39;,&#39;newpwd&#39;);
</pre></li>
</ol>
</li>
</ol>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5343">
<tr>
<td class="cellalignment5350">
<table class="cellalignment5348">
<tr>
<td class="cellalignment5347"><a href="gridmembers.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5347"><a href="perform.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5352">
<table class="cellalignment5346">
<tr>
<td class="cellalignment5347"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5347"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5347"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5347"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5347"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5347"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>