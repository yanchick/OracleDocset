<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-106280"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Enhancing%20the%20Application%3A%20Advanced%20JDBC%20Features"></a><title>Enhancing the Application: Advanced JDBC Features</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748"/>
<meta name="dcterms.created" content="2014-02-21T3:12:39Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database 2 Day + Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17944-10"/>
<meta name="dcterms.isVersionOf" content="TDPJD"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="upddata.htm" title="Previous" type="text/html"/>
<link rel="Next" href="getuncon.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17944-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/16</span> <!-- End Header -->
<div id="TDPJD206" class="chapter"><a id="sthref413"></a>
<h1 class="chapter"><span class="secnum">6</span> Enhancing the Application: Advanced JDBC Features</h1>
<p>This chapter describes additional functionality that you can use in your Java application. Some of these features have not been implemented in the sample application, while some features are enhancements you can use in your code to improve performance.</p>
<p>This chapter includes the following sections:</p>
<ul>
<li>
<p><a href="#CIHCIDFB">Using Dynamic SQL</a></p>
</li>
<li>
<p><a href="#CIHDGFFB">Calling Stored Procedures</a></p>
</li>
<li>
<p><a href="#CIHIGFFE">Using Cursor Variables</a></p>
</li>
</ul>
<a id="CIHCIDFB"></a>
<div id="TDPJD207" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.1</span> Using <a id="sthref414"></a>Dynamic SQL</h2>
<p>Dynamic SQL, or generating SQL statements during run time, is a constant need in a production environment. Very often, and especially in the matter of updates to be performed on a database, the final query is not known until run time.</p>
<p>For scenarios where many similar queries with differing update values must be run on the database, you can use the <a id="sthref415"></a><code><a id="sthref416"></a>OraclePreparedStatement</code> object, which extends the <code>Statement</code> object. This is done by substituting the literal update values with bind variables. You can also use stored PL/SQL functions on the database by calling stored procedures through the <code><a id="sthref417"></a><a id="sthref418"></a>OracleCallableStatement</code> object.</p>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#CIHFAACA">Using OraclePreparedStatement</a></p>
</li>
<li>
<p><a href="#CIHHFAJD">Using OracleCallableStatement</a></p>
</li>
<li>
<p><a href="#CIHCIIJB">Using Bind Variables</a></p>
</li>
</ul>
<a id="CIHFAACA"></a>
<div id="TDPJD208" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.1</span> Using <a id="sthref419"></a>OraclePreparedStatement</h3>
<p>To run static SQL queries on the database, you use the <code>Statement</code> object. However, to run multiple similar queries or perform multiple updates that affect many columns in the database, it is not feasible to hard-code each query in your application.</p>
<p>You can use <code>OraclePreparedStatement</code> when you run the same SQL statement multiple times. Consider a query like the following:</p>
<pre>SELECT * FROM Employees WHERE ID=xyz;
</pre>
<p>Every time the value of <code>xyz</code> in this query changes, the SQL statement needs to be compiled again.</p>
<p>If you use <code><a id="sthref420"></a>OraclePreparedStatement</code> functionality, the SQL statement you want to run is <a id="sthref421"></a>precompiled and stored in a <code>PreparedStatement</code> object, and you can run it as many times as required without compiling it every time it is run. If the data in the statement changes, you can use <a id="sthref422"></a>bind variables as placeholders for the data and then provide literal values at run time.</p>
<p>Consider the following example of using <code>OraclePreparedStatement</code>:</p>
<div id="TDPJD337" class="example">
<p class="titleinexample"><a id="sthref423"></a>Example 6-1 <a id="sthref424"></a>Creating a PreparedStatement</p>
<pre>OraclePreparedStatement pstmt = conn.prepareStatement(&#34;UPDATE Employees 
                                SET salary = ? WHERE ID = ?&#34;);
   pstmt.setBigDecimal(1, 153833.00)
   pstmt.setInt(2, 110592)   
</pre></div>
<!-- class="example" -->
<p>The advantages of using the <code>OraclePreparedStatement</code> interface include:</p>
<ul>
<li>
<p>You can batch updates by using the same <code>PreparedStatement</code> object</p>
</li>
<li>
<p>You can improve performance because the SQL statement that is run many times is compiled only the first time it is run.</p>
</li>
<li>
<p>You can use <a id="sthref425"></a>bind variables to make the code simpler and reusable.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHHFAJD"></a>
<div id="TDPJD209" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.2</span> Using <a id="sthref426"></a>OracleCallableStatement</h3>
<p>You can access stored procedures on databases using the <code><a id="sthref427"></a>OracleCallableStatement</code> interface. This interface extends the <code>OraclePreparedStatement</code> interface. The <code><a id="sthref428"></a>OracleCallableStatement</code> interface consists of standard JDBC escape syntax to call stored procedures. You may use this with or without a result parameter. However, if you do use a result parameter, it must be registered as an <code>OUT</code> parameter. Other parameters that you use with this interface can be either <code>IN</code>, <code>OUT</code>, or both.</p>
<p>These parameters are set by using accessor methods inherited from the <code><a id="sthref429"></a>OraclePreparedStatement</code> interface. <a id="sthref430"></a><code>IN</code> parameters are set by using the <code>set</code><code><span class="codeinlineitalic">XXX</span></code> methods and <code>OUT</code> parameters are retrieved by using the <code>get</code><code><span class="codeinlineitalic">XXX</span></code> methods, <code><span class="codeinlineitalic">XXX</span></code> being the Java data type of the parameter.</p>
<p>A <code>CallableStatement</code> can also return multiple <code>ResultSet</code> objects.</p>
<p>As an example, you can create an <code>OracleCallableStatement</code> to call the stored procedure called <code>foo</code>, as follows:</p>
<div id="TDPJD338" class="example">
<p class="titleinexample"><a id="sthref431"></a>Example 6-2 Creating a <a id="sthref432"></a>CallableStatement</p>
<pre>OracleCallableStatement cs = (OracleCallableStatement)
conn.prepareCall(&#34;{call foo(?)}&#34;);
</pre></div>
<!-- class="example" -->
<p>You can pass the string <code>bar</code> to this procedure in one of the following two ways:</p>
<pre>cs.setString(1,&#34;bar&#34;); // JDBC standard
// or...
cs.setStringAtName(X, &#34;value&#34;); // Oracle extension
</pre></div>
<!-- class="sect2" -->
<a id="CIHCIIJB"></a>
<div id="TDPJD210" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.3</span> Using <a id="sthref433"></a>Bind Variables</h3>
<p>Bind variables are variable substitutes for literals in a SQL statement. They are used in conjunction with <code><a id="sthref434"></a>OraclePreparedStatement</code> and <code><a id="sthref435"></a>OracleCallableStatement</code> to specify parameter values that are used to build the SQL statement. Using bind variables has remarkable performance advantages in a production environment.</p>
<p>For PL/SQL blocks or stored procedure calls, you can use the following qualifiers to differentiate between input and output variables: <a id="sthref436"></a><code>IN</code>, <code>OUT</code>, and <code>IN OUT</code>. Input variable values are set by using <code>set</code><code><span class="codeinlineitalic">XXX</span></code> methods and <code>OUT</code> variable values can be retrieved by using <code>get</code><code><span class="codeinlineitalic">XXX</span></code> methods, where <code><span class="codeinlineitalic">XXX</span></code> is the Java data type of the values. This depends on the SQL data types of the columns that you are accessing in the database.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDGFFB"></a>
<div id="TDPJD211" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.2</span> Calling Stored Procedures</h2>
<p>Oracle Java Database Connectivity (JDBC) drivers support the processing of PL/SQL <a id="sthref437"></a>stored procedures and anonymous blocks. They support Oracle PL/SQL block syntax and most of <a id="sthref438"></a>JDBC escape syntax. The following PL/SQL calls would work with any Oracle JDBC driver:</p>
<div id="TDPJD339" class="example">
<p class="titleinexample"><a id="sthref439"></a>Example 6-3 Calling Stored Procedures</p>
<pre>// JDBC syntaxCallableStatement cs1 = conn.prepareCall
                        ( &#34;{call proc (?,?)}&#34; ) ; // stored proc
CallableStatement cs2 = conn.prepareCall
                        ( &#34;{? = call func (?,?)}&#34; ) ; // stored func

// Oracle PL/SQL block syntax
CallableStatement cs3 = conn.prepareCall
                        ( &#34;begin proc (?,?); end;&#34; ) ; // stored proc
CallableStatement cs4 = conn.prepareCall
                        ( &#34;begin ? := func(?,?); end;&#34; ) ; // stored func
</pre></div>
<!-- class="example" -->
<p>As an example of using the Oracle syntax, here is a PL/SQL code snippet that creates a stored function. The PL/SQL function gets a character sequence and concatenates a suffix to it:</p>
<div id="TDPJD340" class="example">
<p class="titleinexample"><a id="sthref440"></a>Example 6-4 Creating a <a id="sthref441"></a>Stored Function</p>
<pre>create or replace function foo (val1 char)
return char as
begin
return val1 || &#39;suffix&#39;;
end;
</pre></div>
<!-- class="example" -->
<p>You can call this stored function in a Java program as follows:</p>
<div id="TDPJD341" class="example">
<p class="titleinexample"><a id="sthref442"></a>Example 6-5 Calling a <a id="sthref443"></a>Stored Function in Java</p>
<pre>OracleDataSource ods = new OracleDataSource();
ods.setURL(&#34;jdbc:oracle:thin:@&lt;hoststring&gt;&#34;);
ods.setUser(&#34;hr&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();
CallableStatement cs = conn.prepareCall (&#34;begin ? := foo(?); end;&#34;);
cs.registerOutParameter(1,Types.CHAR);
cs.setString(2, &#34;aa&#34;);
cs.executeUpdate();
String result = cs.getString(1);
</pre></div>
<!-- class="example" -->
<p>The following sections describe how you can use stored procedures in the sample application in this guide:</p>
<ul>
<li>
<p><a href="#CIHFBGEF">Creating a PL/SQL Stored Procedure in JDeveloper</a></p>
</li>
<li>
<p><a href="#CIHEBEBB">Creating a Method to Use the Stored Procedure</a></p>
</li>
<li>
<p><a href="#CIHGABFA">Enabling Users to Choose the Stored Procedure</a></p>
</li>
<li>
<p><a href="#CIHIAJFD">Calling the Stored Procedure from the Application</a></p>
</li>
</ul>
<a id="CIHFBGEF"></a>
<div id="TDPJD212" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.2.1</span> Creating a PL/SQL Stored Procedure in JDeveloper</h3>
<p>JDeveloper enables you to create <a id="sthref444"></a><a id="sthref445"></a><a id="sthref446"></a>stored procedures in the database through the Database Navigator. In these steps, you create a stored procedure that can be used as an alternative way of inserting an employee record in the sample application.</p>
<ol>
<li>
<p>Select the <span class="bold">DatabaseNavigatorName</span> tab to view the Database Navigator.</p>
</li>
<li>
<p>Expand the database connection node (by default called <code>Connection1</code>) to see the objects in the <code>HR</code> database.</p>
</li>
<li>
<p>Right-click <span class="bold">Procedures</span>, and select <span class="bold">New Procedure</span>.</p>
</li>
<li>
<p>In the Create PL/SQL Procedure dialog, enter <code>insert_employee</code> as the object name. Click <span class="bold">OK</span>.</p>
<p>The skeleton code for the procedure is displayed in the Source Editor.</p>
</li>
<li>
<p>After the keywords <code>CREATE OR REPLACE</code>, enter the following lines of code replacing the existing line:</p>
<pre>PROCEDURE INSERT_EMPLOYEE (p_first_name  employees.first_name%type, 
  p_last_name    employees.last_name%type,
  p_email        employees.email%type,
  p_phone_number employees.phone_number%type,
  p_job_id       employees.job_id%type,
  p_salary       employees.salary%type
) 
</pre></li>
<li>
<p>After the <code>BEGIN</code> statement, replace the line that reads <code>NULL</code> with the following:</p>
<pre>  INSERT INTO Employees VALUES (EMPLOYEES_SEQ.nextval, p_first_name, 
    p_last_name, p_email, p_phone_number, SYSDATE, p_job_id, 
    p_salary,.30, 100, 80);
</pre>
<p>You can see that the statement uses the same hard-coded values that are used for the last three columns in the <code>addEmployee</code> method in the <code>DataHandler.java</code> class.</p>
</li>
<li>
<p>Add the procedure name in the <code>END</code> statement:</p>
<pre>END insert_employee;
</pre></li>
<li>
<p>Save the file, and check whether there are any compilation errors.</p>
</li>
</ol>
<p>The complete code for the stored procedure is shown in <a href="#CIHFDDAA">Example 6-6</a>.</p>
<div id="TDPJD342" class="example">
<p class="titleinexample"><a id="CIHFDDAA"></a>Example 6-6 Creating a PL/SQL Stored Procedure to Insert Employee Data</p>
<pre>CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE (p_first_name  employees.first_name%type, 
  p_last_name    employees.last_name%type,
  p_email        employees.email%type,
  p_phone_number employees.phone_number%type,
  p_job_id       employees.job_id%type,
  p_salary       employees.salary%type
) 
AS
BEGIN
  INSERT INTO Employees VALUES (EMPLOYEES_SEQ.nextval, p_first_name , 
    p_last_name , p_email , p_phone_number, SYSDATE, p_job_id, 
    p_salary,.30,100,80);
END insert_employee;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHEBEBB"></a>
<div id="TDPJD213" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.2.2</span> Creating a Method to Use the Stored Procedure</h3>
<p>In these steps, you add a method to the <code>DataHandler.java</code> class that can be used as an alternative to the <code>addEmployee</code> method. The new method you add here makes use of the <code>insert_employee</code> stored procedure.</p>
<ol>
<li>
<p>Select the <span class="bold">Application</span> tab to display the Application Navigator.</p>
</li>
<li>
<p>If the <code>DataHandler.java</code> file is not already open in the Java Source Editor, double-click it to open it.</p>
</li>
<li>
<p>Import the <code>CallableStatement</code> interface as follows:</p>
<pre>import java.sql.CallableStatement;
</pre></li>
<li>
<p>After the <code>addEmployee</code> method, add the declaration for the <code>addEmployeeSP</code> method.</p>
<pre>public String addEmployeeSP(String first_name, String last_name, 
  String email, String phone_number, String job_id,
  int salary) throws SQLException {
}
</pre>
<p>The method signature is the same as that for <code>addEmployee</code>.</p>
</li>
<li>
<p>Inside the method, add a <code>try</code> block, and inside that, connect to the database.</p>
<pre>try {
  getDBConnection(); 
}
</pre></li>
<li>
<p>In addition, inside the <code>try</code> block, create the SQL string:</p>
<pre>sqlString = &#34;begin hr.insert_employee(?,?,?,?,?,?); end;&#34;;
</pre>
<p>The question marks (<code>?</code>) in the statement are bind variables, acting as placeholders for the values of <code>first_name</code>, <code>last_name</code>, and so on expected by the stored procedure.</p>
</li>
<li>
<p>Create the <code>CallableStatement</code>:</p>
<pre>CallableStatement callstmt = conn.prepareCall(sqlString);
</pre></li>
<li>
<p>Set the <code>IN</code> parameters:</p>
<pre>  callstmt.setString(1, first_name);
  callstmt.setString(2, last_name);
  callstmt.setString(3, email);
  callstmt.setString(4, phone_number);
  callstmt.setString(5, job_id);
  callstmt.setInt(6, salary);
</pre></li>
<li>
<p>Add a trace message, and run the callable statement.</p>
<pre>  System.out.println(&#34;\nInserting with stored procedure: &#34; + 
                      sqlString);
  callstmt.execute();
</pre></li>
<li>
<p>Add a return message:</p>
<pre>  return &#34;success&#34;; 
</pre></li>
<li>
<p>After the <code>try</code> block, add a <code>catch</code> block to trap any errors. Call the <code>logException</code> created in <a href="upddata.htm#BGBGBGDA">Example 5-5</a>.</p>
<pre>catch ( SQLException ex ) {
  System.out.println(&#34;Possible source of error: Make sure you have created the stored procedure&#34;); 
  logException( ex ); 
  return &#34;failure&#34;;
}
</pre></li>
<li>
<p>Save <code>DataHandler.java</code>.</p>
</li>
</ol>
<p>The complete method is shown in <a href="#CIHCIBFC">Example 6-7</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have not added the <code>logException()</code> method (see <a href="upddata.htm#BGBGBGDA">Example 5-5</a>), JDeveloper will indicate an error by showing a red curly line under <code>logException(ex)</code>. This method must be present in the <code>DataHandler.java</code> class before you proceed with compiling the file.</div>
<div id="TDPJD343" class="example">
<p class="titleinexample"><a id="CIHCIBFC"></a>Example 6-7 Using PL/SQL Stored Procedures in Java</p>
<pre>public String addEmployeeSP(String first_name, String last_name, 
  String email, String phone_number, String job_id,
  int salary) throws SQLException {
 
  try {
    getDBConnection(); 
    sqlString = &#34;begin hr.insert_employee(?,?,?,?,?,?); end;&#34;;
    CallableStatement callstmt = conn.prepareCall(sqlString);
    callstmt.setString(1, first_name);
    callstmt.setString(2, last_name);
    callstmt.setString(3, email);
    callstmt.setString(4, phone_number);
    callstmt.setString(5, job_id);
    callstmt.setInt(6, salary);
    System.out.println(&#34;\nInserting with stored procedure: &#34; + 
                       sqlString);
 
    callstmt.execute();
    return &#34;success&#34;; 
  }
  catch ( SQLException ex ) {
    System.out.println(&#34;Possible source of error: Make sure you have created the stored procedure&#34;); 
    logException( ex ); 
    return &#34;failure&#34;;
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHGABFA"></a>
<div id="TDPJD214" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.2.3</span> Enabling Users to Choose the Stored Procedure</h3>
<p>The steps in this section add a radio button group to the <code>insert.jsp</code> page, which enables a user to choose between inserting an employee record using the stored procedure, or by using a SQL query in Java code.</p>
<ol>
<li>
<p>Open <code>insert.jsp</code> in the Visual Editor, if it is not already open.</p>
</li>
<li>
<p>Create a new line after the Insert Employee Record heading. With the cursor on this new line, drag <span class="bold">UseBean</span> from the JSP page of the Component Palette to add a <code>jsp:useBean</code> tag to the page. Enter <code>empsbean</code> as the ID, browse to select <code>hr.DataHandler</code> as the <span class="bold">Class</span>, and set the <span class="bold">Scope</span> to <code>session</code>. With the UseBean still selected on the page, set the style of this line to <code>None</code> instead of Heading 3.</p>
</li>
<li>
<p>Drag a <span class="bold">Radio Button</span> component from the HTML Forms page of the Component Palette onto the page inside the form above the table. In the Insert Radio Button dialog, enter <code>useSP</code> as the <span class="bold">Name</span>, <code>false</code> as the <span class="bold">Value</span>, and select <span class="bold">Checked</span>. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In the Visual Editor, position the cursor to the right of the button, and enter text to describe the purpose of the button, for example, &#39;Use only JDBC to insert a new record&#39;.</p>
</li>
<li>
<p>Press Enter at the end of the current line to create a new line.</p>
</li>
<li>
<p>Drag a second <span class="bold">Radio Button</span> below the first one. In the Insert Radio Button dialog, use <code>useSP</code> as the <span class="bold">Name</span>, <code>true</code> as the <span class="bold">Value</span>, and ensure that the Checked check box is not selected.</p>
</li>
<li>
<p>In the Visual Editor, position the cursor directly to the right of the button, and enter text to describe the purpose of the button, for example, &#39;Use stored procedure called via JDBC to insert a record&#39;.</p>
</li>
<li>
<p>Save the page.</p>
</li>
</ol>
<p><a href="#CIHFGCJJ">Figure 6-1</a> shows <code>insert.jsp</code> with the radio button that provides the option to use a stored procedure.</p>
<div id="TDPJD344" class="figure">
<p class="titleinfigure"><a id="CIHFGCJJ"></a>Figure 6-1 Adding a Link to Provide the Stored Procedure Option</p>
<img width="580" height="684" src="img/splink.gif" alt="Description of Figure 6-1 follows"/><br/>
<a id="sthref447" href="img_text/splink.htm">Description of &#34;Figure 6-1 Adding a Link to Provide the Stored Procedure Option&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CIHIAJFD"></a>
<div id="TDPJD215" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.2.4</span> Calling the Stored Procedure from the Application</h3>
<p>The steps in this section modify the <code>insert_action.jsp</code> file, which processes the form on the <code>insert.jsp</code> page, to use the radio button selection and select the appropriate method for inserting a new employee record.</p>
<ol>
<li>
<p>Open <code>insert_action.jsp</code> in the Visual Editor, if it is not already open.</p>
</li>
<li>
<p>Double-click the scriptlet to invoke the Scriptlet Properties dialog box and add a new variable after the salary variable, as follows:</p>
<pre>String useSPFlag = request.getParameter(&#34;useSP&#34;);
</pre></li>
<li>
<p>Below that, still in the Scriptlet Properties dialog box, replace the existing <code>empsbean.addEmployee</code> line with the following lines of code to select the <code>addEmployeeSP</code> method or the pure JDBC <code>addEmployee</code> method to insert the record.</p>
<pre>if ( useSPFlag.equalsIgnoreCase(&#34;true&#34;))
  empsbean.addEmployeeSP(first_name, last_name, email, 
  phone_number, job_id, salary.intValue()); 
// otherwise use pure JDBC insert
else
  empsbean.addEmployee(first_name, last_name, email, 
  phone_number, job_id, salary.intValue()); 
</pre></li>
<li>
<p>Save <code>insert_action.jsp</code>.</p>
</li>
</ol>
<p>You can now run the application and use the radio buttons on the insert page to choose how you want to insert the new employee record. In a browser, the page will appear as shown in <a href="#CIHGBIBA">Figure 6-2</a>.</p>
<div id="TDPJD345" class="figure">
<p class="titleinfigure"><a id="CIHGBIBA"></a>Figure 6-2 Using Stored Procedures to Enter Records</p>
<img width="540" height="510" src="img/usingsp.gif" alt="Description of Figure 6-2 follows"/><br/>
<a id="sthref448" href="img_text/usingsp.htm">Description of &#34;Figure 6-2 Using Stored Procedures to Enter Records&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIGFFE"></a>
<div id="TDPJD216" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.3</span> <a id="sthref449"></a>Using Cursor Variables</h2>
<p>Oracle JDBC drivers support cursor variables with the <code>REF</code> <code>CURSOR</code> types, which are not a part of the JDBC standard. <code>REF</code> <code>CURSOR</code> types are supported as JDBC result sets.</p>
<p>A cursor variable holds the memory location of a query work area, rather than the contents of the area. Declaring a cursor variable creates a pointer. In SQL, a pointer has the data type <code>REF</code> <code><span class="codeinlineitalic">x</span></code>, where <code>REF</code> is short for <code>REFERENCE</code> and <code><span class="codeinlineitalic">x</span></code> represents the entity being referenced. A <code><a id="sthref450"></a>REF CURSOR</code>, then, identifies a reference to a cursor variable. Many cursor variables may exist to point to many work areas, so <code>REF</code> <code>CURSOR</code> can be thought of as a category or data type specifier that identifies many different types of cursor variables. A <code><a id="sthref451"></a>REF CURSOR</code> essentially encapsulates the results of a query.</p>
<p>Oracle does not return ResultSets. To access data returned by a query, you use <code>CURSORS</code> and <code>REF CURSORS</code>. <code>CURSORS</code> contain query results and metadata. A <code>REF CURSOR</code> (or <code>CURSOR</code> variable) data type contains a reference to a cursor. It can be passed between the RDBMS and the client, or between PL/SQL and Java in the database. It can also be returned from a query or a stored procedure.</p>
<p>Starting from this release, Oracle Database supports results of SQL statements executed in a stored procedure to be returned implicitly to the client.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC29004" href="../JJDBC/getsta.htm#JJDBC29004"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for more information on Support for Implicit Results.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>REF CURSOR</code> instances are not scrollable.</div>
<p>This section contains the following subsections:</p>
<ul>
<li>
<p><a href="#i1058743">Oracle REF CURSOR Type Category</a></p>
</li>
<li>
<p><a href="#CIHCFFFJ">Accessing REF CURSOR Data</a></p>
</li>
<li>
<p><a href="#CIHBIDDH">Using REF CURSOR in the Sample Application</a></p>
</li>
</ul>
<a id="i1058743"></a>
<div id="TDPJD217" class="sect2">
<h3 class="sect2"><span class="secnum">6.3.1</span> <a id="sthref452"></a><a id="sthref453"></a>Oracle REF CURSOR Type Category</h3>
<p>To create a cursor variable, begin by identifying a type that belongs to the <code>REF</code> <code>CURSOR</code> category. For example:</p>
<pre>dept_cv DeptCursorTyp 
...
</pre>
<p>Then, create the cursor variable by declaring it to be of the type <code>DeptCursorTyp</code>:</p>
<div id="TDPJD346" class="example">
<p class="titleinexample"><a id="CIHGFBCI"></a>Example 6-8 <a id="sthref454"></a>Declaring a REF CURSOR Type</p>
<pre>DECLARE TYPE DeptCursorTyp IS REF CURSOR
</pre></div>
<!-- class="example" -->
<p><code>REF</code> <code>CURSOR</code>, then, is a category of data types, rather than a particular data type. Stored procedures can return cursor variables of the <a id="sthref455"></a><code>REF</code> <code>CURSOR</code> category. This output is equivalent to a database cursor or a JDBC result set.</p>
</div>
<!-- class="sect2" -->
<a id="CIHCFFFJ"></a>
<div id="TDPJD218" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.3.2</span> Accessing <a id="sthref456"></a>R<a id="sthref457"></a>EF CURSOR Data</h3>
<p>In Java, <code><a id="sthref458"></a></code>a <code>REF CURSOR</code> is materialized as a <code>ResultSet</code> object and can be accessed as follows:</p>
<div id="TDPJD347" class="example">
<p class="titleinexample"><a id="sthref459"></a>Example 6-9 Accessing REF Cursor Data in Java</p>
<pre>import oracle.jdbc.*;
...
CallableStatement cstmt;
ResultSet cursor;

// Use a PL/SQL block to open the cursor
cstmt = conn.prepareCall
         (&#34;begin open ? for select ename from emp; end;&#34;);

cstmt.registerOutParameter(1, OracleTypes.CURSOR);
cstmt.execute();
cursor = ((OracleCallableStatement)cstmt).getCursor(1);

// Use the cursor like a normal ResultSet
while (cursor.next ())
    {System.out.println (cursor.getString(1));} 
</pre></div>
<!-- class="example" -->
<p>In the preceding example:</p>
<ol>
<li>
<p>A <code><a id="sthref460"></a>CallableStatement</code> object is created by using the <code>prepareCall</code> method of the connection class.</p>
</li>
<li>
<p>The callable statement implements a PL/SQL procedure that returns a <code>REF CURSOR</code>.</p>
</li>
<li>
<p>As always, the output parameter of the callable statement must be registered to define its type. Use the type code <code><a id="sthref461"></a>OracleTypes.CURSOR</code> for a <code>REF CURSOR</code>.</p>
</li>
<li>
<p>The callable statement is run, returning the <code>REF CURSOR</code>.</p>
</li>
<li>
<p>The <code>CallableStatement</code> object is cast to <code>OracleCallableStatement</code> to use the <code><a id="sthref462"></a>getCursor</code> method, which is an Oracle extension to the standard JDBC application programming interface (API), and returns the <code>REF CURSOR</code> into a <code>ResultSet</code> object.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHBIDDH"></a>
<div id="TDPJD219" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.3.3</span> Using REF CURSOR in the Sample Application</h3>
<p>In the following sections, you enhance the sample application to display a dynamically-generated list of job IDs and job titles in the Job field when they are inserting a new employee record.</p>
<ul>
<li>
<p><a href="#CIHEBJEH">Creating a Package in the Database</a></p>
</li>
<li>
<p><a href="#CIHBGAAI">Creating a Database Function</a></p>
</li>
<li>
<p><a href="#CIHHHGIJ">Calling the REF CURSOR from a Method</a></p>
</li>
<li>
<p><a href="#CIHDFDGD">Displaying a Dynamically Generated List</a></p>
</li>
</ul>
<p>To do this, you create a database function, <code>GET_JOBS</code>, that uses a <code>REF CURSOR</code> to retrieve a result set of jobs from the <code>Jobs</code> table. A new Java method, <code>getJobs</code>, calls this database function to retrieve the result set.</p>
<a id="CIHEBJEH"></a>
<div id="TDPJD220" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">6.3.3.1</span> Creating a Package in the Database</h4>
<p>The following steps create a new package in the database to hold a <code>REF CURSOR</code> declaration.</p>
<ol>
<li>
<p>Select the <span class="bold">DatabaseNavigatorName</span> tab to view it in the Navigator.</p>
</li>
<li>
<p>Expand the <span class="bold">Connection1</span> node to view the list of database objects. Scroll down to Packages. Right-click <span class="bold">Packages</span> and select <span class="bold">New Package</span>.</p>
</li>
<li>
<p>In the Create PL/SQL Package dialog, enter <code>JOBSPKG</code> as the name. Click <span class="bold">OK</span>. The package definition is displayed in the Source Editor.</p>
</li>
<li>
<p>Replace the line <code>/* TODO enter package declarations (types, exceptions, methods etc) here */</code> with the following line, to declare a <code>REF CURSOR</code> as follows:</p>
<pre>    TYPE ref_cursor IS REF CURSOR;
</pre></li>
<li>
<p>Save the package.</p>
</li>
</ol>
<p>The code for the package is shown in <a href="#CIHFAEJC">Example 6-10</a>:</p>
<div id="TDPJD348" class="example">
<p class="titleinexample"><a id="CIHFAEJC"></a>Example 6-10 Creating a Package in the Database</p>
<pre>CREATE OR REPLACE
PACKAGE JOBSPKG AS
    TYPE ref_cursor IS REF CURSOR;
END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHBGAAI"></a>
<div id="TDPJD221" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">6.3.3.2</span> Creating a Database Function</h4>
<p>These steps create a database function <code>GET_JOBS</code> that uses a <code>REF CURSOR</code> to retrieve a result set of jobs from the <code>Jobs</code> table.</p>
<ol>
<li>
<p>In the Database Navigator, again expand the necessary nodes to view the objects in the <code>HR</code> database. Right-click <span class="bold">Functions</span> and select <span class="bold">New Function</span> from the shortcut menu.</p>
</li>
<li>
<p>In the Create PL/SQL Function dialog, enter <code>GET_JOBS</code> as the name. Click <span class="bold">OK</span>. The definition for the <code>GET_JOBS</code> function displays in the Source Editor</p>
</li>
<li>
<p>In the first line of the function definition, substitute <code>JobsPkg.ref_cursor</code> as the return value, in place of <code>VARCHAR2</code>.</p>
</li>
<li>
<p>After the <code>AS</code> keyword, enter the following:</p>
<pre> jobs_cursor JobsPkg.ref_cursor;
</pre></li>
<li>
<p>In the <code>BEGIN</code> block enter the following code to replace the current content:</p>
<pre>  OPEN jobs_cursor FOR
  SELECT job_id, job_title FROM jobs;
  RETURN jobs_cursor;
</pre></li>
<li>
<p>Save the function</p>
</li>
</ol>
<p>The code for the function is shown in <a href="#CIHJBDJF">Example 6-11</a>.</p>
<div id="TDPJD349" class="example">
<p class="titleinexample"><a id="CIHJBDJF"></a>Example 6-11 Creating a Stored Function</p>
<pre>CREATE OR REPLACE FUNCTION GET_JOBS
RETURN JobsPkg.ref_cursor
AS jobs_cursor JobsPkg.ref_cursor;
BEGIN
  OPEN jobs_cursor FOR
  SELECT job_id, job_title FROM jobs;
  RETURN jobs_cursor;
END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHHHGIJ"></a>
<div id="TDPJD222" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">6.3.3.3</span> Calling the REF CURSOR from a Method</h4>
<p>These steps create a Java method, <code>getJobs</code>, in the <code>DataHandler</code> class that calls the <code>GET_JOBS</code> function to retrieve the result set.</p>
<ol>
<li>
<p>Double-click <code>DataHandler.java</code> to open it in the Source Editor if it is not already open.</p>
</li>
<li>
<p>Enter the method declaration.</p>
<pre>public ResultSet getJobs() throws SQLException {
 
}
</pre></li>
<li>
<p>Within the method body, connect to the database.</p>
<pre>  getDBConnection();
</pre></li>
<li>
<p>Following the connection, declare a new variable, <code>jobquery</code>:</p>
<pre>  String jobquery = &#34;begin ? := get_jobs; end;&#34;;
</pre></li>
<li>
<p>Create a CallableStatement using the <code>prepareCall</code> method:</p>
<pre>  CallableStatement callStmt = conn.prepareCall(jobquery);
</pre></li>
<li>
<p>Register the type of the <code>OUT</code> parameter, using an Oracle-specific type.</p>
<pre>  callStmt.registerOutParameter(1, OracleTypes.CURSOR);
</pre></li>
<li>
<p>When you specify that you want to use an Oracle-specific type, JDeveloper displays a message asking you to use Alt+Enter to import <code>oracle.jdbc.OracleTypes</code>. Press Alt+Enter, and then select <span class="bold">OracleTypes</span> (<code>oracle.jdbc</code>) from the list that appears.</p>
</li>
<li>
<p>Run the statement and return the result set.</p>
<pre>  callStmt.execute();
  rset = (ResultSet)callStmt.getObject(1);
</pre></li>
<li>
<p>Enclose the code entered so far in a <code>try</code> block.</p>
</li>
<li>
<p>Add a catch block to catch any exceptions, and call your logException method as well.</p>
<pre>catch ( SQLException ex ) {
  logException( ex );
}
</pre></li>
<li>
<p>After the close of the <code>catch</code> block, return the result set.</p>
<pre>return rset;
</pre></li>
<li>
<p>Make the file to check for syntax errors.</p>
</li>
</ol>
<p>The code for the <code>getJobs</code> method is as follows:</p>
<pre>  public ResultSet getJobs() throws SQLException {
  try {
    getDBConnection();
    String jobquery = &#34;begin ? := get_jobs; end;&#34;;
    CallableStatement callStmt = conn.prepareCall(jobquery);
    callStmt.registerOutParameter(1, OracleTypes.CURSOR);
    callStmt.execute();
    rset = (ResultSet)callStmt.getObject(1);
  } catch ( SQLException ex ) {
  logException( ex );
  }
  return rset;
  }
</pre></div>
<!-- class="sect3" -->
<a id="CIHDFDGD"></a>
<div id="TDPJD223" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">6.3.3.4</span> Displaying a Dynamically Generated List</h4>
<p>To create the list displaying the list of job IDs and job titles in the Insert page, you hard-coded the job IDs and job titles. In the following steps, you replace this with a dynamically-generated list provided by the <code>REF CURSOR</code> created in the previous section.</p>
<ol>
<li>
<p>Double-click <code>insert.jsp</code> in the Application Navigator to open it in the Visual Editor, if it is not already open.</p>
</li>
<li>
<p>Click and select the Page Directive on the top left corner of the page. The Property Inspector now shows the properties of the Page Directive.</p>
</li>
<li>
<p>Click the down arrow next to the <span class="bold">Import</span> field. The Edit Property: Import dialog box is displayed. Select the Hierarchy tab and then select <code>ResultSet</code> after extending <code>Java</code> and <code>SQL</code> folders respectively. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Drag a scriptlet onto the page next to the Page Directive. In the Insert Scriptlet dialog box, add the following code to execute the <code>getJobs</code> method and return a result set containing a list of jobs.</p>
<pre>ResultSet rset = empsbean.getJobs();
</pre></li>
<li>
<p>Select the <span class="bold">ListBox</span> component in the page (the component to enter the job in the form), and click <span class="bold">Scriptlet</span> in the JSP Component Palette. (You need not drag and drop the scriptlet onto the page in this case.) The Insert Scriptlet dialog box appears.</p>
</li>
<li>
<p>Enter the following code into the Insert Scriptlet dialog box. Click <span class="bold">OK</span>.</p>
<pre>  while (rset.next ())
   {
    out.println(&#34;&lt;option value=&#34; + rset.getString(&#34;job_id&#34;) + &#34;&gt;&#34; + 
    rset.getString(&#34;job_title&#34;) + &#34;&lt;/option&gt; &#34;  );
   }
</pre></li>
<li>
<p>Remove the hard-coded values as follows.</p>
<p>With the <span class="bold">ListBox</span> component still selected, in the Structure window scroll to <span class="bold">Job</span> field. Examine the list of hard-coded options below the select keyword. Delete each of the options, ensuring that you retain the scriptlet.</p>
<div id="TDPJD350" class="figure">
<p class="titleinfigure"><a id="sthref463"></a>Figure 6-3 Structure View of ListBox Options</p>
<img width="442" height="589" src="img/structviewhtml.gif" alt="Description of Figure 6-3 follows"/><br/>
<a id="sthref464" href="img_text/structviewhtml.htm">Description of &#34;Figure 6-3 Structure View of ListBox Options&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Save the page.</p>
</li>
</ol>
<p>Now run the application, click to insert a new employee and use the list to display a list of available jobs. <a href="#CIHCAHBG">Figure 6-4</a> shows the dynamic jobs list in the browser.</p>
<div id="TDPJD351" class="figure">
<p class="titleinfigure"><a id="CIHCAHBG"></a>Figure 6-4 Dynamically Generated List in Browser</p>
<img width="506" height="675" src="img/dyngenlistbrowser.gif" alt="Description of Figure 6-4 follows"/><br/>
<a id="sthref465" href="img_text/dyngenlistbrowser.htm">Description of &#34;Figure 6-4 Dynamically Generated List in Browser&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5878">
<tr>
<td class="cellalignment5885">
<table class="cellalignment5883">
<tr>
<td class="cellalignment5882"><a href="upddata.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5882"><a href="getuncon.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5887">
<table class="cellalignment5881">
<tr>
<td class="cellalignment5882"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5882"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5882"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5882"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5882"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5882"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>