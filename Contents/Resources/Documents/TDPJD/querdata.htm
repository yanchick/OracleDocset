<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-106337"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Querying%20for%20and%20Displaying%20Data"></a><title>Querying for and Displaying Data</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748"/>
<meta name="dcterms.created" content="2014-02-21T3:12:38Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database 2 Day + Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17944-10"/>
<meta name="dcterms.isVersionOf" content="TDPJD"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="getconn.htm" title="Previous" type="text/html"/>
<link rel="Next" href="upddata.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17944-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/16</span> <!-- End Header -->
<div id="TDPJD147" class="chapter"><a id="sthref236"></a>
<h1 class="chapter"><span class="secnum">4</span> Querying for and Displaying Data</h1>
<p>This chapter adds functions and code to the <code>DataHandler.java</code> file for querying the database. This chapter has the following sections:</p>
<ul>
<li>
<p><a href="#CIAIJFAI">Overview of Querying for Data in Oracle Database</a></p>
</li>
<li>
<p><a href="#CIAFIHHJ">Querying Data from a Java Application</a></p>
</li>
<li>
<p><a href="#CIABFADE">Creating JSP Pages</a></p>
</li>
<li>
<p><a href="#CIAIGFJE">Adding Dynamic Content to the JSP Page: Database Query Results</a></p>
</li>
<li>
<p><a href="#CIAIBADF">Filtering a Query Result Set</a></p>
</li>
<li>
<p><a href="#CIAJACEA">Adding Login Functionality to the Application</a></p>
</li>
<li>
<p><a href="#CIAIIABE">Testing the JSP Page</a></p>
</li>
</ul>
<a id="CIAIJFAI"></a>
<div id="TDPJD148" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.1</span> <a id="sthref237"></a><a id="sthref238"></a>Overview of Querying for Data in Oracle Database</h2>
<p>In outline, to <a id="sthref239"></a>query Oracle Database 12<span class="italic">c</span> Release 1 (12.1) from a Java class to retrieve data, you must do the following:</p>
<ol>
<li>
<p>Create a connection by using the <code>OracleDataSource.getConnection</code> method. This is covered in <a href="getconn.htm#CACIADFI">Chapter 3, &#34;Connecting to Oracle Database 12<span class="italic">c</span> Release 1 (12.1)&#34;</a>.</p>
</li>
<li>
<p>Define your SQL statements with the methods available for the connection object. The <code>createStatement</code> method is used to define a SQL query statement.</p>
</li>
<li>
<p>Using the methods available for the statement, run your queries. You use the <code>executeQuery</code> method to run queries on the database and produce a set of rows that match the query conditions. These results are contained in a <code>ResultSet</code> object.</p>
</li>
<li>
<p>You use a <code>ResultSet</code> object to display the data in the application pages.</p>
</li>
</ol>
<p>The following sections describe important Java Database Connectivity (JDBC) concepts related to querying the database from a Java application:</p>
<ul>
<li>
<p><a href="#CIACAABF">SQL Statements</a></p>
</li>
<li>
<p><a href="#CIAHJEAA">Query Methods for the Statement Object</a></p>
</li>
<li>
<p><a href="#CIAHAGCA">Result Sets</a></p>
</li>
</ul>
<a id="CIACAABF"></a>
<div id="TDPJD149" class="sect2">
<h3 class="sect2"><span class="secnum">4.1.1</span> SQL Statements</h3>
<p>Once you connect to the database and, in the process, create a <code>Connection</code> object, the next step is to create a <a id="sthref240"></a><code>Statement</code> object. The <code>createStatement</code> method of the JDBC <code>Connection</code> object returns an object of the JDBC <code>Statement</code> type. <a href="#CIABDGAI">Example 4-1</a> shows how to create a <code>Statement</code> object.</p>
<div id="TDPJD305" class="example">
<p class="titleinexample"><a id="CIABDGAI"></a>Example 4-1 Creating a Statement Object</p>
<pre>Statement stmt = conn.createStatement();
</pre></div>
<!-- class="example" -->
<p>The <code>Statement</code> object is used to run static SQL queries that can be coded into the application.</p>
<p>In addition, for scenarios where many similar queries with differing update values must be run on the database, you use the <a id="sthref241"></a><code><a id="sthref242"></a>OraclePreparedStatement</code> object, which extends the <code>Statement</code> object. To access stored procedures on Oracle Database 12<span class="italic">c</span> Release 1 (12.1), you use the <code>OracleCallableStatement</code> object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="addfunc.htm#CIHFAACA">Using OraclePreparedStatement</a></p>
</li>
<li>
<p><a href="addfunc.htm#CIHHFAJD">Using OracleCallableStatement</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIAHJEAA"></a>
<div id="TDPJD150" class="sect2">
<h3 class="sect2"><span class="secnum">4.1.2</span> <a id="sthref243"></a><a id="sthref244"></a>Query Methods for the Statement Object</h3>
<p>To run a query embedded in a <code>Statement</code> object, you use variants of the <code>execute</code> method. Important variants of this method are listed in <a href="#CIAIIABB">Table 4-1</a>.</p>
<div id="TDPJD306" class="tblformal">
<p class="titleintable"><a id="sthref245"></a><a id="CIAIIABB"></a>Table 4-1 Key Query Execution Methods for java.sql.Statement</p>
<table class="cellalignment5892" title="Key Query Execution Methods for java.sql.Statement" summary="Important variants of the execute method for the java.sql statement" dir="ltr">
<thead>
<tr class="cellalignment5879">
<th class="cellalignment5889" id="r1c1-t3">Method Name</th>
<th class="cellalignment5889" id="r1c2-t3">Return Type</th>
<th class="cellalignment5889" id="r1c3-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5879">
<td class="cellalignment5885" id="r2c1-t3" headers="r1c1-t3">
<p><code><a id="sthref246"></a><a id="sthref247"></a>execute(String sql)</code></p>
</td>
<td class="cellalignment5885" headers="r2c1-t3 r1c2-t3">
<p><code>Boolean</code></p>
</td>
<td class="cellalignment5885" headers="r2c1-t3 r1c3-t3">
<p>Runs the given SQL statement, which returns a Boolean response: true if the query runs successfully and false if it does not.</p>
</td>
</tr>
<tr class="cellalignment5879">
<td class="cellalignment5885" id="r3c1-t3" headers="r1c1-t3">
<p><code>addBatch()</code></p>
</td>
<td class="cellalignment5885" headers="r3c1-t3 r1c2-t3">
<p><code>void</code></p>
</td>
<td class="cellalignment5885" headers="r3c1-t3 r1c3-t3">
<p>Adds a set of parameters to a <code>PreparedStatement</code> object batch of commands.</p>
</td>
</tr>
<tr class="cellalignment5879">
<td class="cellalignment5885" id="r4c1-t3" headers="r1c1-t3">
<p><code><a id="sthref248"></a><a id="sthref249"></a>executeBatch()</code></p>
</td>
<td class="cellalignment5885" headers="r4c1-t3 r1c2-t3">
<p><code>int[]</code></p>
</td>
<td class="cellalignment5885" headers="r4c1-t3 r1c3-t3">
<p>Submits a batch of commands to the database for running, and returns an array of update counts if all commands run successfully.</p>
</td>
</tr>
<tr class="cellalignment5879">
<td class="cellalignment5885" id="r5c1-t3" headers="r1c1-t3">
<p><code><a id="sthref250"></a><a id="sthref251"></a>executeQuery(String sql)</code></p>
</td>
<td class="cellalignment5885" headers="r5c1-t3 r1c2-t3">
<p><code>ResultSet</code></p>
</td>
<td class="cellalignment5885" headers="r5c1-t3 r1c3-t3">
<p>Runs the given SQL statement, which returns a single <code>ResultSet</code> object.</p>
</td>
</tr>
<tr class="cellalignment5879">
<td class="cellalignment5885" id="r6c1-t3" headers="r1c1-t3">
<p><code><a id="sthref252"></a><a id="sthref253"></a>executeUpdate(String sql)</code></p>
</td>
<td class="cellalignment5885" headers="r6c1-t3 r1c2-t3">
<p><code>int</code></p>
</td>
<td class="cellalignment5885" headers="r6c1-t3 r1c3-t3">
<p>Runs the given SQL statement, which may be an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement or a SQL statement that returns nothing, such as a SQL DDL statement.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://www.oracle.com/technetwork/java/javase/documentation/api-jsp-136079.html">http://www.oracle.com/technetwork/java/javase/documentation/api-jsp-136079.html</a></code></div>
</div>
<!-- class="sect2" -->
<a id="CIAHAGCA"></a>
<div id="TDPJD151" class="sect2">
<h3 class="sect2"><span class="secnum">4.1.3</span> Result Sets</h3>
<p>A <a id="sthref254"></a><code>ResultSet</code> object contains a table of data representing a database result set, which is generated by executing a statement that queries the database.</p>
<p>A cursor points to the current row of data in a <code>ResultSet</code> object. Initially, it is positioned before the first row. Use the <a id="sthref255"></a><a id="sthref256"></a><code>next</code> method of the <code>ResultSet</code> object to move the cursor to the next row in the result set. It returns <code>false</code> when there are no more rows in the <code>ResultSet</code> object. Typically, the contents of a <code>ResultSet</code> object are read by using the <code>next</code> method within a loop until it returns <code>false</code>.</p>
<p>The <code>ResultSet</code> interface provides accessor methods (<code><a id="sthref257"></a>getBoolean</code>, <code><a id="sthref258"></a>getLong</code>, <code><a id="sthref259"></a>getInt</code>, and so on) for retrieving column values from the current row. Values can be retrieved by using either the index number of the column or the name of the column.</p>
<p>By default, only one <code>ResultSet</code> object per <code>Statement</code> object can be open at the same time. Therefore, to read data from multiple <code>ResultSet</code> objects, you must use multiple <code>Statement</code> objects. A <code>ResultSet</code> object is automatically closed when the <code>Statement</code> object that generated it is closed, rerun, or used to retrieve the next result from a sequence of multiple results.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for more information about result sets and their features</p>
</li>
</ul>
</div>
<a id="CIAFCGBC"></a>
<div id="TDPJD152" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">4.1.3.1</span> Features of ResultSet Objects</h4>
<p><span class="bold">Scroll<a id="sthref260"></a><a id="sthref261"></a><a id="sthref262"></a>ability</span> refers to the ability to move backward as well as forward through a result set. You can also move to any particular position in the result set, through either <span class="bold">relative posit<a id="sthref263"></a><a id="sthref264"></a><a id="sthref265"></a><a id="sthref266"></a>ioning</span> or <span class="bold">absolute positioning</span>. Relative positioning lets you move a specified number of rows forward or backward from the current row. Absolute positioning lets you move to a specified row number, counting from either the beginning or the end of the result set.</p>
<p>When creating a scrollable or positionable result set, you must also specify <span class="bold">sensi<a id="sthref267"></a><a id="sthref268"></a>tivity</span>. This refers to the ability of a result set to detect and reveal changes made to the underlying database from outside the result set. A sensitive result set can see changes made to the database while the result set is open, providing a dynamic view of the underlying data. Changes made to the underlying column values of rows in the result set are visible. <span class="bold">Upda<a id="sthref269"></a><a id="sthref270"></a>tability</span> refers to the ability to update data in a result set and then copy the changes to the database. This includes inserting new rows into the result set or deleting existing rows. A result set may be updatable or read-only.</p>
</div>
<!-- class="sect3" -->
<a id="CIACJICD"></a>
<div id="TDPJD153" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">4.1.3.2</span> Summary of Result Set Object Types</h4>
<p>Scrollability and sensitivity are independent of updatability, and the three result set types and two concurrency types combine for the following six result set categories:</p>
<ul>
<li>
<p>Forward-only/read-only</p>
</li>
<li>
<p>Forward-only/updatable</p>
</li>
<li>
<p>Scroll-sensitive/read-only</p>
</li>
<li>
<p>Scroll-sensitive/updatable</p>
</li>
<li>
<p>Scroll-insensitive/read-only</p>
</li>
<li>
<p>Scroll-insensitive/updatable</p>
</li>
</ul>
<p><a href="#CIAEICDC">Example 4-2</a> demonstrates how to <a id="sthref271"></a>declare a scroll-sensitive and read-only <code>ResultSet</code> object.</p>
<div id="TDPJD307" class="example">
<p class="titleinexample"><a id="CIAEICDC"></a>Example 4-2 Declaring a Scroll-Sensitive, Read-Only ResultSet Object</p>
<pre>stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
A forward-only updatable result set has no provision for positioning at a particular row within the <code>ResultSet</code> object. You can update rows only as you iterate through them using the <code>next</code> method.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAFIHHJ"></a>
<div id="TDPJD154" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.2</span> Querying Data from a <a id="sthref272"></a>Java Application</h2>
<p>This section discusses how you can use JDeveloper to create a Java class that queries data in Oracle Database 12<span class="italic">c</span> Release 1 (12.1) in the following sections:</p>
<ul>
<li>
<p><a href="#CIAFGFBG">Creating a Method in JDeveloper to Query Data</a></p>
</li>
<li>
<p><a href="#CIAGJGAH">Testing the Connection and the Query Methods</a></p>
</li>
</ul>
<a id="CIAFGFBG"></a>
<div id="TDPJD155" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.1</span> Creating a Method in JDeveloper to Query Data</h3>
<p>The following steps show you how to add a simple query method to your <a id="sthref273"></a><code>DataHandler.java</code> class. If <code><a id="sthref274"></a>DataHandler.java</code> is not open in the JDeveloper integrated development environment (IDE), double-click the <code>DataHandler.java</code> file in the Application Navigator to display it in the Java Source Editor.</p>
<ol>
<li>
<p>In the <code>DataHandler</code> class, add the following <code>import</code> statements after the existing <code>import</code> statements to use the <code>Statement</code> and <code>ResultSet</code> JDBC classes:</p>
<pre>import java.sql.Statement;
import java.sql.ResultSet;
</pre></li>
<li>
<p>After the <code>connection</code> declaration, declare variables for <code>Statement</code>, <code>ResultSet</code>, and <code>String</code> objects as follows:</p>
<pre>Statement stmt;
ResultSet rset;
String query;
String sqlString;
</pre></li>
<li>
<p>Create a method called <code>getAllEmployees</code>, which will be used to retrieve employee information from the database. Enter the signature for the method:</p>
<pre>public ResultSet getAllEmployees() throws SQLException{ 
</pre></li>
<li>
<p>Press the Enter key to include the closing brace for the method and a new line to start entering the method code.</p>
</li>
<li>
<p>Call the <a id="sthref275"></a><code>getDBConnection</code> method created earlier:</p>
<pre>getDBConnection();
</pre></li>
<li>
<p>After calling the <code>getDBConnection</code> method, use the <code>createStatement</code> method of the <code>Connection</code> instance to provide context for executing the SQL statement and define the <code>ResultSet</code> type. Specify a read-only, scroll-sensitive <code>ResultSet</code> type as stated in the following code:</p>
<pre>stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
</pre>
<p>The Java Code Insight feature can help you ensure that the statement syntax is correct.</p>
</li>
<li>
<p>Define the query and print a trace message. The following code uses a simple query to return all the rows and columns in the <code>Employees</code> table, where the data is ordered by the Employee ID:</p>
<pre>query = &#34;SELECT * FROM Employees ORDER BY employee_id&#34;;
System.out.println(&#34;\nExecuting query: &#34; + query);
</pre></li>
<li>
<p>Run the query and retrieve the results in the <code>ResultSet</code> instance as follows:</p>
<pre>rset = stmt.executeQuery(query); 
</pre></li>
<li>
<p>Return the <code>ResultSet</code> object:</p>
<pre>return rset;
</pre></li>
<li>
<p>Save your work. From the <span class="bold">File</span> menu, select <span class="bold">Save All</span>.</p>
</li>
</ol>
<p>The code for the <code>getAllEmployees</code> method should be as show<a id="sthref276"></a>n in <a href="#CIACCBAG">Example 4-3</a>.</p>
<div id="TDPJD308" class="example">
<p class="titleinexample"><a id="CIACCBAG"></a>Example 4-3 Using the Connection, Statement, Query, and ResultSet Objects</p>
<pre>    public ResultSet getAllEmployees() throws SQLException{
        getDBConnection(); 
        stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
               ResultSet.CONCUR_READ_ONLY);
        query = &#34;SELECT * FROM Employees ORDER BY employee_id&#34;;
        System.out.println(&#34;\nExecuting query: &#34; + query);
        rset = stmt.executeQuery(query); 
        return rset;
    }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIAGJGAH"></a>
<div id="TDPJD156" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.2</span> <a id="sthref277"></a>Testing the <a id="sthref278"></a>Connection and the Query Methods</h3>
<p>In the following steps, you create a simple Java class to test the methods in the <code>DataHandler.java</code> class. To test your application at this stage, you can temporarily set the value of the <code>jdbcUrl</code> variable to the connection string for your database and set the values of the <code>userid</code> and <code>password</code> variables to the values required to access the <code>HR</code> schema.</p>
<ol>
<li>
<p>Open the <code>DataHandler.java</code> class in the Java Visual Editor from the Application Navigator.</p>
</li>
<li>
<p>Change the <code>jdbcUrl</code>, <code>userid</code> and <code>password</code> variables to contain the values required for the <code>HR</code> schema as follows:</p>
<pre>String jdbcUrl = &#34;<span class="italic">connect-string</span>&#34;;
String userid = &#34;HR&#34;;
String password = &#34;hr&#34;;
</pre>
<p>where <code><span class="codeinlineitalic">connect-string</span></code> is, for example:</p>
<pre>jdbc:oracle:thin:@localhost:1521:ORACLE
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="getconn.htm#CACGGGJA">Declaring Connection-Related Variables</a> in <a href="getconn.htm#CACIADFI">Chapter 3</a></div>
</li>
<li>
<p>Create a new Java class named <code>JavaClient</code> in the <code>hr</code> package. Make it a public class and generate a default constructor and a <code>main</code> method. Note that you must select the <span class="bold">Main Method</span> check box from the Optional Attributes panel to generate the <code>main</code> method.</p>
<p>The skeleton <code>JavaClient.java</code> class is created and displayed in the Java Source Editor.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="getconn.htm#CACHDGCH">Creating a Java Class in JDeveloper</a> in <a href="getconn.htm#CACIADFI">Chapter 3</a> for information about creating a Java class file</div>
</li>
<li>
<p>Import the <code>ResultSet</code> package:</p>
<pre>import java.sql.ResultSet;
</pre></li>
<li>
<p>In the <code>main</code> method declaration, add exception handling as follows:</p>
<pre>public static void main(String[] args) throws Exception{
</pre></li>
<li>
<p>Replace the <code>JavaClient</code> object created by default with a <code>DataHandler</code> object. Locate the following line in the <code>main</code> method:</p>
<pre>JavaClient javaClient = new JavaClient();
</pre>
<p>Replace this with:</p>
<pre>DataHandler datahandler = new DataHandler();
</pre></li>
<li>
<p>Define a <code>ResultSet</code> object to hold the results of the <code>getAllEmployees</code> query, and iterate through the rows of the result set, displaying the first four columns, <code>Employee Id</code>, <code>First Name</code>, <code>Last Name</code>, and <code>Email</code>. To do this, add the following code to the <code>main</code> method:</p>
<pre>ResultSet rset = datahandler.getAllEmployees();

while (rset.next()) {
System.out.println(rset.getInt(1) + &#34; &#34; +
  rset.getString(2) + &#34; &#34; + 
  rset.getString(3) + &#34; &#34; + 
  rset.getString(4));
}
</pre></li>
<li>
<p>Compile the <code>JavaClient.java</code> file to check for compilation errors. To do this, right-click in the Java Source Editor, and select <span class="bold">Make</span> from the shortcut menu.</p>
<p>If there are no errors in compilation, you should see the following message in the Log window:</p>
<p><code>Successful compilation: 0 errors, 0 warnings</code></p>
</li>
<li>
<p>Run the <code>JavaClient.java</code> file. To do this, right-click in the Java Source Editor window and select <span class="bold">Run</span> from the shortcut menu.</p>
</li>
<li>
<p>Examine the output in the Log window. Notice the <a id="sthref279"></a><a id="sthref280"></a>trace message, followed by the four columns from the <code>Employees</code> table as shown in <a id="sthref281"></a><a href="#CIACDGDE">Figure 4-1</a>.</p>
<div id="TDPJD309" class="figure">
<p class="titleinfigure"><a id="CIACDGDE"></a>Figure 4-1 Test Output for Query Method in Log Window</p>
<img width="468" height="307" src="img/querytest.gif" alt="Description of Figure 4-1 follows"/><br/>
<a id="sthref282" href="img_text/querytest.htm">Description of &#34;Figure 4-1 Test Output for Query Method in Log Window&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>When you finish testing the application, set the <code>jdbcUrl</code>, <code>userid</code> and <code>password</code> variables in <code>DataHandler.java</code> back to <code>null</code>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="getconn.htm#CACGGGJA">Declaring Connection-Related Variables</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIABFADE"></a>
<div id="TDPJD157" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.3</span> Creating <a id="sthref283"></a>JSP Pages</h2>
<p>The <code>HRApp</code> application uses JavaServer Pages (JSP) technology to display data. JSP technology provides a simple, fast way to create server-independent and platform-independent dynamic Web content. A JSP page has the <code>.jsp</code> extension. This extension notifies the Web server that the page should be processed by a JSP container. The JSP container interprets the JSP tags and scriptlets, generates the content required, and sends the results back to the client as an HTML or XML page.</p>
<p>To develop JSP pages, you use some or all of the following:</p>
<ul>
<li>
<p><a id="sthref284"></a>HTML tags to design and format the dynamically generated Web page</p>
</li>
<li>
<p><a id="sthref285"></a>Standard JSP tags or <a id="sthref286"></a>Java-based scriptlets to call other components that generate the dynamic content on the page</p>
</li>
<li>
<p><a id="sthref287"></a>JSP tags from <a id="sthref288"></a><a id="sthref289"></a>custom tag libraries that generate the dynamic content on the page</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><code><a href="http://www.oracle.com/technetwork/java/javaee/jsp/index.html">http://www.oracle.com/technetwork/java/javaee/jsp/index.html</a></code></p>
</div>
<p>In this section, you will see how you can create JSP pages for the application in this guide in the following sections:</p>
<ul>
<li>
<p><a href="#CIAJJJCD">Overview of Page Presentation</a></p>
</li>
<li>
<p><a href="#CIADHJDD">Creating a Simple JSP Page</a></p>
</li>
<li>
<p><a href="#CIAIDHBB">Adding Static Content to a JSP Page</a></p>
</li>
<li>
<p><a href="#CIAIAAIJ">Adding a Style Sheet to a JSP Page</a></p>
</li>
</ul>
<a id="CIAJJJCD"></a>
<div id="TDPJD158" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.3.1</span> Overview of Page <a id="sthref290"></a>Presentation</h3>
<p>JSP pages can do the following:</p>
<ul>
<li>
<p>Display data</p>
</li>
<li>
<p>Hold input data entered by users adding employees and editing employee data</p>
</li>
<li>
<p>Hold the code needed to process the actions of validating user credentials and adding, updating, and deleting employee records in the database</p>
</li>
</ul>
<p>JSP pages are presented to users as HTML or XML. So, you can control the presentation of data in the same way as you do it for static HTML and XML pages. You can use standard HTML tags to format your page, including the <code>title</code> tag in the header to specify the title to be displayed for the page.</p>
<p>You use HTML tags for headings, tables, lists, and other items on your pages. <a id="sthref291"></a>Style sheets can also be used to define the presentation of items. If you use JDeveloper to develop your application, you can select styles from a list.</p>
<p>The following sections describe the main <a id="sthref292"></a>elements used in the JSP pages of the sample application:</p>
<ul>
<li>
<p><a href="#CIAJJFFH">JSP Tags</a></p>
</li>
<li>
<p><a href="#CIAHBGDF">Scriptlets</a></p>
</li>
<li>
<p><a href="#CIACBAAH">HTML Tags</a></p>
</li>
<li>
<p><a href="#CIAGHHAJ">HTML Forms</a></p>
</li>
</ul>
<a id="CIAJJFFH"></a>
<div id="TDPJD159" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">4.3.1.1</span> <a id="sthref293"></a>JSP Tags</h4>
<p><a id="sthref294"></a>JSP tags are used in the sample application in this guide for the following tasks: to initialize Java classes that hold the application methods and the JavaBean used to hold a single employee record, and to forward the user to either the same or another page in the application.</p>
<p>The <code>jsp:useBean</code> tag is used in pages to initialize the class that contains all the methods needed by the application, and the <code>jsp:forward</code> tag is used to forward the user to a specified page. You can drag the tags you need from the Component Palette of JSP tags, and enter the properties for the tag in the corresponding dialog box that is displayed.</p>
</div>
<!-- class="sect3" -->
<a id="CIAHBGDF"></a>
<div id="TDPJD160" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">4.3.1.2</span> <a id="sthref295"></a>Scriptlets</h4>
<p><a id="sthref296"></a><a id="sthref297"></a>Scriptlets are used to run the Java methods that operate on the database and to perform other processing in JSP pages. You can drag a scriptlet tag component from the Component Palette and drop it onto your page, ready to enter the scriptlet code. In JDeveloper, the code for scriptlets is entered in the Scriptlet Source Editor dialog box.</p>
<p>In this application, you use <a id="sthref298"></a>scriplets for a variety of tasks. As an example, one scriptlet calls the <code>DataHandler</code> method that returns a <code>ResultSet</code> object containing all the employees in the <code>Employees</code> table, which you can use to display that data in your JSP page. As another example, a scriplet is used to iterate through the same <code>ResultSet</code> object to display each item in a row of a table.</p>
</div>
<!-- class="sect3" -->
<a id="CIACBAAH"></a>
<div id="TDPJD161" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">4.3.1.3</span> <a id="sthref299"></a>HTML Tags</h4>
<p><a id="sthref300"></a>HTML tags are typically used for layout and presentation of the nondynamic portions of the user interface, for example headings and tables. In JDeveloper, you can drag and drop a Table component from the Component Palette onto your page. You must specify the number of rows and columns for the table, and all the table tags are automatically created.</p>
</div>
<!-- class="sect3" -->
<a id="CIAGHHAJ"></a>
<div id="TDPJD162" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">4.3.1.4</span> <a id="sthref301"></a>HTML Forms</h4>
<p><a id="sthref302"></a>HTML forms are used to interact with or gather information from the users on Web pages. The <code>FORM</code> element acts as a container for the controls on a page, and specifies the method to be used to process the form input.</p>
<p>For the filter control to select which employees to display, the <code>employees.jsp</code> page itself processes the form. For login, insert, edit, and delete operations, additional JSP pages are created to process these forms. To understand how the JSP pages in this application are interrelated, refer to <a href="introduction.htm#CACJBHGD">Figure 1-2</a>.</p>
<p>You can add a form in a JSP page by selecting it from the Component Palette of HTML tags. If you attempt to add a control on a page outside of the form component or in a page that does not contain a form, then JDeveloper prompts you to add a form component to contain it.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIADHJDD"></a>
<div id="TDPJD163" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.3.2</span> <a id="sthref303"></a>Creating a Simple JSP Page</h3>
<p>The following steps describe how to create a simple JSP page:</p>
<ol>
<li>
<p>In the Application Navigator, right-click the <span class="bold">View</span> project and choose <span class="bold">New</span> from the shortcut menu.</p>
</li>
<li>
<p>In the New Gallery, select the <span class="bold">All Technologies</span> tab.</p>
</li>
<li>
<p>Expand the Web Tier node from the Categories list and select <span class="bold">JSP</span>.</p>
</li>
<li>
<p>In the Items list, select <span class="bold">JSP</span> and click <span class="bold">OK</span>.</p>
<div id="TDPJD381" class="figure">
<p class="titleinfigure"><a id="sthref304"></a>Figure 4-2 Creating a JSP Page</p>
<img width="700" height="497" src="img/tdpjd9.gif" alt="Description of Figure 4-2 follows"/><br/>
<a id="sthref305" href="img_text/tdpjd9.htm">Description of &#34;Figure 4-2 Creating a JSP Page&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The Create JSP dialog box is displayed.</p>
</li>
<li>
<p>On the Create JSP dialog box, enter <code>employees.jsp</code> in the File Name text box and click <span class="bold">OK</span>. The new page opens in the JSP/HTML Visual Editor and is ready for you to start adding text and components to your web page.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIAIDHBB"></a>
<div id="TDPJD164" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.3.3</span> Adding <a id="sthref306"></a>Static Content to a JSP Page</h3>
<p>JDeveloper provides the Component Palette and the Property Inspector on the right hand side of the JSP/HTML Visual Editor. You can also use the JSP Source Editor by clicking the Source Editor tab next to the Design tab at the bottom of the page. The Component Palette enables you to add components to the page and the Property Inspector enables you to set the properties of the components. A blank page in the Visual Editor is shown in <a href="#CIAHBEJI">Figure 4-3</a>.</p>
<div id="TDPJD310" class="figure">
<p class="titleinfigure"><a id="CIAHBEJI"></a>Figure 4-3 Adding Content to JSP Pages in the JDeveloper Visual Source Editor</p>
<img width="600" height="520" src="img/jspvisualed.gif" alt="Description of Figure 4-3 follows"/><br/>
<a id="sthref307" href="img_text/jspvisualed.htm">Description of &#34;Figure 4-3 Adding Content to JSP Pages in the JDeveloper Visual Source Editor&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The following steps show how you can add text to the <a id="sthref308"></a><code>employees.jsp</code> page. They use the Visual Editor to modify the JSP. The Visual Editor is like a WYSIWYG editor and you can use it to modify content.</p>
<ol>
<li>
<p>With <code>employees.jsp</code> open in the Visual Editor, in the top line of your page, type <span class="bold">AnyCo Corporation: HR Application</span>. From the list of styles at the top of the page, on the left-hand side, select <span class="bold">Heading 2</span>.</p>
<div id="TDPJD382" class="figure">
<p class="titleinfigure"><a id="sthref309"></a>Figure 4-4 Formatting a JSP</p>
<img width="869" height="669" src="img/tdpjd11.gif" alt="Setting JSP style"/><br/></div>
<!-- class="figure" --></li>
<li>
<p>With the cursor still on the heading you added, from the <span class="bold">Design</span> menu select <span class="bold">Align</span>, and then <span class="bold">Center</span>.</p>
</li>
<li>
<p>In a similar way, on a new line, type <span class="bold">Employee Data</span>, and format it with the <span class="bold">Heading 3</span> style. Position it on the left-hand side of the page.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIAIAAIJ"></a>
<div id="TDPJD165" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.3.4</span> Adding a <a id="sthref310"></a><a id="sthref311"></a>Style Sheet to a JSP Page</h3>
<p>You can add a style sheet reference to your page, so that your headings, text, and other elements are formatted in a consistent way with the presentation features, such as the fonts and colors used in the Web pages. You can add a style sheet to the page as follows:</p>
<ol>
<li>
<p>With <code>employees.jsp</code> open in the Visual Editor, click the list arrow at the top right of the Component Palette, and select <span class="bold">CSS</span>.</p>
<div id="TDPJD383" class="figure">
<p class="titleinfigure"><a id="sthref312"></a>Figure 4-5 Selecting a CSS File for the JSP</p>
<img width="290" height="643" src="img/tdpjd12.gif" alt="Applying a CSS to a JSP"/><br/></div>
<!-- class="figure" --></li>
<li>
<p>From the <a id="sthref313"></a><span class="bold">CSS</span> list, drag <span class="bold">JDeveloper</span> onto your page. As soon as you drag JDeveloper onto your page, it will ask you to save the jdeveloper.css file. Save the file in the same location as your JSP file. After you save the CSS file, it formats the page with the <a id="sthref314"></a>JDeveloper styles. <a href="#CIAEBEDC">Figure 4-6</a> shows the JSP Page with the content added to it in the previous section and the JDeveloper stylesheet applied to it.</p>
<div id="TDPJD311" class="figure">
<p class="titleinfigure"><a id="CIAEBEDC"></a>Figure 4-6 Adding Static Content to the JSP Page</p>
<img width="600" height="309" src="img/jspstatcont.gif" alt="Description of Figure 4-6 follows"/><br/>
<a id="sthref315" href="img_text/jspstatcont.htm">Description of &#34;Figure 4-6 Adding Static Content to the JSP Page&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
In JDeveloper version 10.1.3, you can associate a stylesheet with the JSP page while creating it in the JSP Creation Wizard. The only difference is that you need to browse and locate the stylesheet to be applied to the JSP page, instead of just dragging and dropping it onto the page.</div>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAIGFJE"></a>
<div id="TDPJD166" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.4</span> Adding Dynamic Content to the JSP Page: Database Query Results</h2>
<p>This section includes the following subsections:</p>
<ul>
<li>
<p><a href="#CIADDAFB">Adding a JSP useBean Tag to Initialize the DataHandler Class</a></p>
</li>
<li>
<p><a href="#CIABFIDA">Creating a Result Set</a></p>
</li>
<li>
<p><a href="#CIABCGDI">Adding a Table to the JSP Page to Display the Result Set</a></p>
</li>
</ul>
<a id="CIADDAFB"></a>
<div id="TDPJD167" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.4.1</span> Adding a JSP useBean Tag to Initialize the DataHandler Class</h3>
<p>A <a id="sthref316"></a><code>jsp:useBean</code> tag identifies and initializes the class that holds the methods that run in the page. To add a <code>jsp:useBean</code> tag, follow these steps:</p>
<ol>
<li>
<p>Open <code>employees.jsp</code> in the Visual Editor.</p>
</li>
<li>
<p>In the Component Palette, select the <span class="bold">JSP</span> set of components. Scroll through the list and drag and drop <span class="bold">UseBean</span> to your page. The Insert UseBean dialog box is displayed.</p>
</li>
<li>
<p>In the Insert UseBean dialog box, enter <code>empsbean</code> as the <span class="bold">ID</span>. For the <span class="bold">Class</span>, click <span class="bold">Browse...</span>. The Class Browser dialog box is displayed. Type <code>hr.DataHandler</code> in the Match Class Name text box. Click <span class="bold">OK</span>. Leave the Type and BeanName fields blank and set the <span class="bold">Scope</span> to <code>session</code>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to create the tag in the page.</p>
</li>
</ol>
<p><a href="#CIAIIGBD">Figure 4-7</a> shows the representation of the <code>useBean</code> tag in the <code>employees.jsp</code> page.</p>
<div id="TDPJD312" class="figure">
<p class="titleinfigure"><a id="CIAIIGBD"></a>Figure 4-7 useBean Representation in the employees.jsp File</p>
<img width="600" height="360" src="img/usebeanrep.gif" alt="Description of Figure 4-7 follows"/><br/>
<a id="sthref317" href="img_text/usebeanrep.htm">Description of &#34;Figure 4-7 useBean Representation in the employees.jsp File&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>If you do not see the UseBean tag on the design view of the JSP, then go to Preferences from the Tools menu, and select the Show Invisible JSP Elements option, which is shown <a href="#CIAGCAGE">Figure 4-8</a>.</p>
<div id="TDPJD384" class="figure">
<p class="titleinfigure"><a id="CIAGCAGE"></a>Figure 4-8 Preferences Window to Select JSP and HTML Visual Editor Options</p>
<img width="700" height="500" src="img/tdpjd20.gif" alt="Description of Figure 4-8 follows"/><br/>
<a id="sthref318" href="img_text/tdpjd20.htm">Description of &#34;Figure 4-8 Preferences Window to Select JSP and HTML Visual Editor Options&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CIABFIDA"></a>
<div id="TDPJD168" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.4.2</span> Creating a Result Set</h3>
<p>The following steps describe how you can add a scripting element to your page to call the <code><a id="sthref319"></a>getAllEmployees</code> method and hold the result set data that is returned. This query is defined in the <code><a id="sthref320"></a><a id="sthref321"></a>DataHandler</code> class, and initialized in the page by using the <code>jsp:useBean</code> tag.</p>
<ol>
<li>
<p>Open the <code>employees.jsp</code> page in the Visual Editor. In the JSP part of the Component Palette, select <span class="bold">Scriptlet</span> and drag and drop it onto the JSP page next to the representation of the UseBean.</p>
</li>
<li>
<p>In the Insert Scriptlet dialog box, enter the following lines of code, which will call the <code>getAllEmployees</code> method and produce a <code>ResultSet</code> object:</p>
<pre>ResultSet rset;
rset = empsbean.getAllEmployees();
</pre>
<p>Click <span class="bold">OK</span>. A <a id="sthref322"></a><a id="sthref323"></a>representation of the scriptlet is displayed on the page as shown in <a href="#CIABFGEA">Figure 4-9</a>.</p>
<div id="TDPJD313" class="figure">
<p class="titleinfigure"><a id="CIABFGEA"></a>Figure 4-9 Scriptlet Representation in a JSP Page</p>
<img width="600" height="360" src="img/scriptletinjsp.gif" alt="Description of Figure 4-9 follows"/><br/>
<a id="sthref324" href="img_text/scriptletinjsp.htm">Description of &#34;Figure 4-9 Scriptlet Representation in a JSP Page&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select the <span class="bold">Source</span> tab at the bottom of the Visual Editor to see the code that has been created for the page so far. A wavy line under <code>ResultSet</code> indicates that there are errors in the code.</p>
</li>
<li>
<p>The Structure window on the left-hand side also indicates any errors in the page. Scroll to the top of the window and expand the <span class="bold">JSP Errors</span> node. <a href="#CIAFDGIE">Figure 4-10</a> shows how the error in the code is shown in the Structure window.</p>
<div id="TDPJD314" class="figure">
<p class="titleinfigure"><a id="CIAFDGIE"></a>Figure 4-10 Viewing Errors in the Structure Window</p>
<img width="290" height="551" src="img/tdpjd15.gif" alt="JSP errors shown in the structure window"/><br/></div>
<!-- class="figure" --></li>
<li>
<p>You must import the <code>ResultSet</code> package. To do this, click the <span class="bold">page</span> node in the Structure window to display the page properties in the Property Inspector on the left side of the main editing area.</p>
</li>
<li>
<p>Right-click inside the empty box to the right of the <span class="bold">import</span> property and click <span class="bold">Edit</span>. The <a id="sthref325"></a>Edit Property: Import dialog box is displayed, which is shown in <a href="#CIAGDFAE">Figure 4-11</a>.</p>
<div id="TDPJD315" class="figure">
<p class="titleinfigure"><a id="CIAGDFAE"></a>Figure 4-11 Importing Packages in JDeveloper</p>
<img width="428" height="379" src="img/tdpjd16.gif" alt="Description of Figure 4-11 follows"/><br/>
<a id="sthref326" href="img_text/tdpjd16.htm">Description of &#34;Figure 4-11 Importing Packages in JDeveloper&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select the <span class="bold">Hierarchy</span> tab, expand the <span class="bold">java</span> node, then the <span class="bold">sql</span> node, and then select <span class="bold">ResultSet</span>. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>On the Source tab, examine the code to see if the <code>import</code> statement has been added to the code for your page. The error should disappear from the list in the Structure window. Before continuing with the following sections, return to the design view of the page by selecting the <span class="bold">Design</span> tab.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIABCGDI"></a>
<div id="TDPJD169" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.4.3</span> Adding a Table to the JSP Page to Display the Result Set</h3>
<p>The following steps describe how you can add a table to the JSP page to display the results of the <code>getAllEmployees</code> query:</p>
<ol>
<li>
<p>If the <code>employees.jsp</code> page is not open in the Visual Editor, double-click it in the Application Navigator to open it, and work in the Design tab. With the <code>employees.jsp</code> file open in the Visual Editor, position the cursor after the scriptlet and from the HTML Common page of the Component Palette, select the <span class="bold">Table</span> component, which is shown in <a href="#CIAEHFAG">Figure 4-12</a>.</p>
<div id="TDPJD385" class="figure">
<p class="titleinfigure"><a id="CIAEHFAG"></a>Figure 4-12 Common HTML Components in the Component Palette</p>
<img width="288" height="367" src="img/tdpjd17.gif" alt="Component palette for HTML"/><br/></div>
<!-- class="figure" --></li>
<li>
<p>In the Insert Table dialog box, specify <code>1</code> row and <code>6</code> columns. Leave all Layout properties as default. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In the table row displayed on the page, enter text as follows for the headings for each of the columns: <span class="bold">First Name</span>, <span class="bold">Last Name</span>, <span class="bold">Email</span>, <span class="bold">Job</span>, <span class="bold">Phone</span>, <span class="bold">Salary</span>. Use <span class="bold">Heading 4</span> to format the column names.</p>
</li>
<li>
<p>Add a scripting element for output, this time to display the values returned for each of the columns in the table. To do this, select the table as follows. Position the cursor on the top border of the table, and click when the cursor image changes to a table image. From the JSP Component Palette, select <span class="bold">Scriptlet</span>. (You need not drag the scriptlet into your table; it is inserted automatically.)</p>
</li>
<li>
<p>In the Insert Scriptlet dialog box, enter the following lines of code:</p>
<pre>    while (rset.next ())
    {
    out.println(&#34;&lt;tr&gt;&#34;);
    out.println(&#34;&lt;td&gt;&#34; + 
      rset.getString(&#34;first_name&#34;) + &#34;&lt;/td&gt;&lt;td&gt; &#34; + 
      rset.getString(&#34;last_name&#34;) + &#34;&lt;/td&gt;&lt;td&gt; &#34; + 
      rset.getString(&#34;email&#34;) + &#34;&lt;/td&gt;&lt;td&gt; &#34; + 
      rset.getString(&#34;job_id&#34;) + &#34;&lt;/td&gt;&lt;td&gt;&#34; + 
      rset.getString(&#34;phone_number&#34;) + &#34;&lt;/td&gt;&lt;td&gt;&#34; + 
      rset.getDouble(&#34;salary&#34;) + &#34;&lt;/td&gt;&#34;);
    out.println(&#34;&lt;/tr&gt;&#34;);
    }
</pre></li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
</ol>
<p>The JSP page created is shown in <a href="#CIABJJBE">Figure 4-13</a>.</p>
<div id="TDPJD316" class="figure">
<p class="titleinfigure"><a id="CIABJJBE"></a>Figure 4-13 Table in a JSP Page</p>
<img width="534" height="376" src="img/populatingtablejsp.gif" alt="Description of Figure 4-13 follows"/><br/>
<a id="sthref327" href="img_text/populatingtablejsp.htm">Description of &#34;Figure 4-13 Table in a JSP Page&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAIBADF"></a>
<div id="TDPJD170" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.5</span> <a id="sthref328"></a>Filtering a Query Result Set</h2>
<p>You can filter the results of a query by certain parameters or conditions. You can also allow users of the application to customize the data filter. In the sample application created in this guide, the procedure of filtering the query result consists of the following tasks:</p>
<ol>
<li>
<p>Determining what filtered set is required</p>
<p>Users can specify the set of employee records that they want to view by entering a filter criterion in a query field, in this case, a part of the name that they want to search for. The <code>employees.jsp</code> page accepts this input through form controls, and processes it.</p>
</li>
<li>
<p>Creating a method to return a query <code>ResultSet</code></p>
<p>The user input string is used to create the SQL query statement. This statement selects all employees whose names include the sequence of characters that the user enters. The query searches for this string in both the first and the last names.</p>
</li>
<li>
<p>Displaying the results of the query</p>
<p>This is done by adding code to the <code>employees.jsp</code> page to use the method that runs the filtered query.</p>
</li>
</ol>
<p>This section describes filtering query data in the following sections:</p>
<ul>
<li>
<p><a href="#CIADEHAD">Creating a Java Method for Filtering Results</a></p>
</li>
<li>
<p><a href="#CIAIABBD">Testing the Query Filter Method</a></p>
</li>
<li>
<p><a href="#CIAGBGGG">Adding Filter Controls to the JSP Page</a></p>
</li>
<li>
<p><a href="#CIABCFJB">Displaying Filtered Data in the JSP Page</a></p>
</li>
</ul>
<a id="CIADEHAD"></a>
<div id="TDPJD171" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.5.1</span> Creating a Java Method for Filtering Results</h3>
<p>The following steps describe how you can create the <code>getEmployeesByName</code> method. This method enables users to filter employees by their first or last name.</p>
<ol>
<li>
<p>From the Application Navigator, open the <code><a id="sthref329"></a>DataHandler.java</code> class in the Java Visual Editor.</p>
</li>
<li>
<p>After the <code>getAllEmployees</code> method, declare the <code>getEmployeesByName</code> method as follows:</p>
<pre>public ResultSet getEmployeesByName(String name) throws SQLException {

}
</pre></li>
<li>
<p>Within the body of the method, add the following code to convert the name to uppercase to enable more search hits:</p>
<pre>name = name.toUpperCase();
</pre></li>
<li>
<p>Call the method to connect to the database:</p>
<pre>getDBConnection();
</pre></li>
<li>
<p>Specify the <code>ResultSet</code> type and create the query:</p>
<pre>stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                            ResultSet.CONCUR_READ_ONLY);
query =
&#34;SELECT * FROM Employees WHERE UPPER(first_name) LIKE \&#39;%&#34; + name + &#34;%\&#39;&#34; +
&#34; OR UPPER(last_name) LIKE \&#39;%&#34; + name + &#34;%\&#39; ORDER BY employee_id&#34;;
</pre></li>
<li>
<p>Print a trace message:</p>
<pre>System.out.println(&#34;\nExecuting query: &#34; + query);
</pre></li>
<li>
<p>Run the query and return a result set as before:</p>
<pre>rset = stmt.executeQuery(query);
return rset; 
</pre></li>
<li>
<p>Save the file and compile it to ensure there are no compilation errors.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIAIABBD"></a>
<div id="TDPJD172" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.5.2</span> Testing the <a id="sthref330"></a>Query Filter Method</h3>
<p>You can use the <code><a id="sthref331"></a>JavaClient.java</code> class created in <a href="#CIAGJGAH">Testing the Connection and the Query Methods</a> to test the <code>getEmployeesByName</code> method. You must add the <code>getEmployeesByName</code> method to display the query results as described in the following steps:</p>
<ol>
<li>
<p>Open the <code>JavaClient.java</code> class in the Java Source Editor.</p>
</li>
<li>
<p>After the result set displaying the results from the <code>getAllEmployees</code> query, define a result set for the conditional query as follows:</p>
<pre>rset = datahandler.getEmployeesByName(&#34;King&#34;);
 
System.out.println(&#34;\nResults from query: &#34;);
 
while (rset.next()) {
  System.out.println(rset.getInt(1) + &#34; &#34; + 
  rset.getString(2) + &#34; &#34; + 
  rset.getString(3) + &#34; &#34; + 
  rset.getString(4));
}
</pre></li>
<li>
<p>To test your application at this stage, you can temporarily adjust the values of the <code>jdbcUrl</code>, <code>userid</code> and <code>password</code> variables in the <code>DataHandler</code> class to provide the values required for the <code>HR</code> schema. Save the file, and compile it to check for syntax errors.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Make sure you change the values of <code>userid</code>, <code>password</code>, and <code>jdbcUrl</code> back to <code>null</code> after testing. For more information, refer to <a href="getconn.htm#CACGGGJA">Declaring Connection-Related Variables</a>.</div>
</li>
<li>
<p>To test-run the code, right-click in the Java Source Editor and select <span class="bold">Run</span> from the shortcut menu. In the Log window, you will first see the results of the <code>getAllEmployees</code> method, then the results from the <code>getEmployeesByName(&#34;xxx&#34;)</code> query. Here, <code>xxx</code> is set to &#34;King&#34; to test the filtering functionality. In actual operation, this parameter will be set to the value provided by the user of the application to filter the search.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIAGBGGG"></a>
<div id="TDPJD173" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.5.3</span> Adding Filter Controls to the JSP Page</h3>
<p>To accept the filter criterion and to display the filter results, you must modify the <code>employees.jsp</code> page. In the following steps, you add a form element and controls to the <code>employees.jsp</code> page that accepts input from users to filter employees by name:</p>
<ol>
<li>
<p>With the <code>employees.jsp</code> page displayed in the Visual Editor, position the cursor between the <code>useBean</code> tag and the scriptlet.</p>
</li>
<li>
<p>In the HTML Forms page of the Component Palette, select <span class="bold">Form</span>.</p>
</li>
<li>
<p>In the Insert Form dialog box, use the down arrow for the Action field and select <span class="bold">employees.jsp</span>. Leave the other fields empty and click <span class="bold">OK</span>.</p>
<p>The form is displayed on the page in the Visual Editor, represented by a dotted-line rectangle.</p>
</li>
<li>
<p>In the HTML Forms page of the Component Palette, scroll to <span class="bold">Text Field</span>. Select it and drag and drop it inside the Form component. In the Insert Text Field dialog, enter <code>query</code> as the value of the <span class="bold">Name</span> field and click <span class="bold">OK</span>. The text field box is displayed within the form. This field enables users to enter filter criteria.</p>
</li>
<li>
<p>Position the cursor to the left of the Text Field and add the following text:</p>
<p><span class="bold">Filter by Employee Name:</span></p>
</li>
<li>
<p>In the HTML Forms page of the Component Palette, scroll to <span class="bold">Submit Button</span>. Select it and drop it inside the <span class="bold">Form</span> component to the right of the Text Field.</p>
</li>
<li>
<p>In the Insert Submit Button dialog box, leave the <span class="bold">Name</span> field empty and enter <code>Filter</code> as the value of the <span class="bold">Value</span> field, and click <span class="bold">OK</span>.</p>
<p><a href="#CIAEACEG">Figure 4-14</a> shows these HTML Form components in the <code>employees.jsp</code> file.</p>
<div id="TDPJD317" class="figure">
<p class="titleinfigure"><a id="CIAEACEG"></a>Figure 4-14 HTML Form Components in the JSP Page</p>
<img width="535" height="348" src="img/htmlformjsp.gif" alt="Description of Figure 4-14 follows"/><br/>
<a id="sthref332" href="img_text/htmlformjsp.htm">Description of &#34;Figure 4-14 HTML Form Components in the JSP Page&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIABCFJB"></a>
<div id="TDPJD174" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.5.4</span> Displaying Filtered Data in the JSP Page</h3>
<p>In the previous section, you created a text field component on the JSP page that accepts user input. In this text field, users can specify a string with which to filter employee names. You also added a submit button.</p>
<p>In the following steps, you add code to the scriptlet in the <code>employees.java</code> file to enable it to use the <code>getEmployeesByName</code> method. This method is used only if a user submits a value for filtering the results. If this filter criterion is not specified, the <code>getAllEmployees</code> method is used.</p>
<ol>
<li>
<p>Open the <code>employees.jsp</code> file in the Visual Editor.</p>
</li>
<li>
<p>Double-click the <span class="bold">Scriptlet</span> tag on the page (not the one inside the table) to open the Properties dialog box. Modify the code as follows:</p>
<pre>ResultSet rset;
String query = request.getParameter(&#34;query&#34;);
if (query != null)
  rset = empsbean.getEmployeesByName(query);
else
  rset = empsbean.getAllEmployees();
</pre>
<p><a href="#CIAJBBHF">Figure 4-15</a> shows how you can use the Scriptlet Properties dialog box to modify the code.</p>
<div id="TDPJD318" class="figure">
<p class="titleinfigure"><a id="CIAJBBHF"></a>Figure 4-15 Using the Scriptlet Properties Dialog Box</p>
<img width="584" height="643" src="img/scrptltqked.gif" alt="Description of Figure 4-15 follows"/><br/>
<a id="sthref333" href="img_text/scrptltqked.htm">Description of &#34;Figure 4-15 Using the Scriptlet Properties Dialog Box&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Save the file.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAJACEA"></a>
<div id="TDPJD175" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.6</span> Adding <a id="sthref334"></a><a id="sthref335"></a><a id="sthref336"></a>Login Functionality to the Application</h2>
<p>The login functionality used in the sample application is a simple example of application-managed security. It is not a full Java EE security implementation, but simply used as an example in the sample application.</p>
<p>To implement this simple login functionality, you must perform the following tasks:</p>
<ul>
<li>
<p><a href="#CIAJBAJD">Creating a Method to Authenticate Users</a></p>
</li>
<li>
<p><a href="#CIAIBHBI">Creating a Login Page</a></p>
</li>
<li>
<p><a href="#CIAGFBAB">Preparing Error Reports for Failed Logins</a></p>
</li>
<li>
<p><a href="#CIAHHEDD">Creating the Login Interface</a></p>
</li>
<li>
<p><a href="#CIACCDEC">Creating a JSP Page to Handle Login Action</a></p>
</li>
</ul>
<a id="CIAJBAJD"></a>
<div id="TDPJD176" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.6.1</span> Creating a M<a id="sthref337"></a>ethod to Authenticate Users</h3>
<p>In the following steps, you create a method in the <code>DataHandler.java</code> class that authenticates users by checking that the values they supply for the <code>userid</code> and <code>password</code> match those required by the database schema.</p>
<ol>
<li>
<p>Open the <code>DataHandler.java</code> class in the Source Editor.</p>
</li>
<li>
<p>Create a method called <code>authenticateUser</code> that checks if the <code>userid</code>, <code>password</code>, and <code>host</code> values supplied by a user are valid:</p>
<pre>public boolean authenticateUser(String jdbcUrl, String userid, String password,
  HttpSession session) throws SQLException {
 
}
</pre></li>
<li>
<p>JDeveloper prompts you with a wavy underline and a message that you must import a class for <code>HttpSession</code>. Press the Alt+Enter keys to import the <code>javax.servlet.http.HttpSession</code> class.</p>
</li>
<li>
<p>Within the body of the method, assign the <code>jdbcUrl</code>, <code>userid</code>, and <code>password</code> values from the call to the attributes of the current object as follows:</p>
<pre>this.jdbcUrl= jdbcUrl;
this.userid = userid;
this.password = password;
</pre></li>
<li>
<p>Attempt to connect to the database using the values supplied, and if successful, return a value of <code>true</code>. Enclose this in a <code>try</code> block as follows:</p>
<pre>try {
  OracleDataSource ds;
  ds = new OracleDataSource();
  ds.setURL(jdbcUrl);
  conn = ds.getConnection(userid, password);
  return true;
}
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For information about using <code>try</code> and <code>catch</code> blocks, refer to <a href="upddata.htm#BGBEJJIJ">Exception Handling</a> in <a href="upddata.htm#BGBBDDAE">Chapter 5</a>.</div>
</li>
<li>
<p>To handle the case where the login credentials do not match, after the <code>try</code> block, add a <code>catch</code> block. The code in this block prints out a log message and sets up an error message. This error message can be displayed to the user if a login attempt fails. The <code>jdbcUrl</code>, <code>userid</code> and <code>password</code> variables are set back to <code>null</code>, and the method returns the value <code>false</code>. To do this, enter the following code:</p>
<pre>catch ( SQLException ex )  {
  System.out.println(&#34;Invalid user credentials&#34;);
  session.setAttribute(&#34;loginerrormsg&#34;, &#34;Invalid Login. Try Again...&#34;);
  this.jdbcUrl = null;
  this.userid = null;
  this.password = null;
  return false;
} 
</pre></li>
</ol>
<p>The complete code is shown in <a href="#CIACIJCF">Example 4-4</a>.</p>
<div id="TDPJD319" class="example">
<p class="titleinexample"><a id="CIACIJCF"></a>Example 4-4 Implementing User Validation</p>
<pre>public boolean authenticateUser(String jdbcUrl, String userid, String password,
  HttpSession session) throws SQLException {
 
  this.jdbcUrl = jdbcUrl;
  this.userid = userid;
  this.password = password;
  try {
    OracleDataSource ds;
    ds = new OracleDataSource();
    ds.setURL(jdbcUrl);
    conn = ds.getConnection(userid, password);
    return true;
  } catch ( SQLException ex )  {
  System.out.println(&#34;Invalid user credentials&#34;);
  session.setAttribute(&#34;loginerrormsg&#34;, &#34;Invalid Login. Try Again...&#34;);
  this.jdbcUrl = null;
  this.userid = null;
  this.password = null;
  return false;
  } 
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIAIBHBI"></a>
<div id="TDPJD177" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.6.2</span> Creating a <a id="sthref338"></a>Login Page</h3>
<p>The following steps create a <code>login.jsp</code> page, on which users enter the login details for the schema they are going to work on:</p>
<ol>
<li>
<p>In the View project, create a new JSP page. Change the Name to <code>login.jsp</code> and accept all other defaults. The new page opens in the JSP/HTML Visual Editor and is ready for you to start adding text and components to your Web page.</p>
</li>
<li>
<p>Drag and drop the already saved JDeveloper style sheet to the page from the Project CSS Files panel, which is shown in <a href="#CIAJCFHD">Figure 4-16</a>.</p>
<div id="TDPJD386" class="figure">
<p class="titleinfigure"><a id="CIAJCFHD"></a>Figure 4-16 Project CSS Files Panel</p>
<img width="297" height="651" src="img/tdpjd14.gif" alt="Project CSS Files Panel"/><br/></div>
<!-- class="figure" --></li>
<li>
<p>Give the page the same heading as earlier, <span class="bold">AnyCo Corporation: HR Application</span>, apply the <span class="bold">Heading 2</span> style to it, and align it to the center of the page.</p>
</li>
<li>
<p>On the next line, enter <span class="bold">Application Login</span>, with the <span class="bold">Heading 3</span> style applied. Align this heading to the left-hand side of the page.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIAGFBAB"></a>
<div id="TDPJD178" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.6.3</span> Preparing Error Reports for <a id="sthref339"></a><a id="sthref340"></a>Failed Logins</h3>
<p>The following steps add functions to the <code>login.jsp</code> page for displaying error messages when a user login fails. The scriptlets and expression used in the <code>login.jsp</code> page set up a variable to hold any error message. If the user login fails, the connection method sets a message for the session. This page checks to see if there is such a message, and if present, it displays the message.</p>
<ol>
<li>
<p>With the <code>login.jsp</code> page open in the Visual Editor, position the cursor after the text on this page. Then, from the JSP page of the Component Palette, drag and drop the <span class="bold">Scriptlet</span> element from the palette onto the page.</p>
</li>
<li>
<p>In the Insert Scriptlet dialog box, enter the following code:</p>
<pre>    String loginerrormsg = null;
    loginerrormsg = (String) session.getAttribute(&#34;loginerrormsg&#34;);
    if (loginerrormsg != null) {
</pre></li>
<li>
<p>Add another scriptlet in exactly the same way, and this time enter only a single closing brace (<code>}</code>) in the Insert Scriptlet dialog box.</p>
</li>
<li>
<p>Place the cursor between the two scriptlets and press Enter to create a new line. Apply the <span class="bold">Heading 4</span> style to the new line.</p>
</li>
<li>
<p>With the cursor still on the new line, in the JSP page of the Component Palette, click <span class="bold">Expression</span>.</p>
</li>
<li>
<p>In the Insert Expression dialog box, enter <code>loginerrormsg</code>.</p>
</li>
<li>
<p>To see the code that has been added to your l<code>ogin.jsp</code> page, below the Visual Editor, select the <span class="bold">Source</span> tab. The code should appear as follows:</p>
<pre>&lt;% 
    String loginerrormsg = null;
    loginerrormsg = (String) session.getAttribute(&#34;loginerrormsg&#34;);
    if (loginerrormsg != null) {
%&gt;
&lt;h4&gt;
  &lt;%=  loginerrormsg %&gt;
&lt;/h4&gt;
&lt;% 
}
%&gt;
</pre></li>
</ol>
<p>Before continuing with the following sections, return to the design view of the page by selecting the <span class="bold">Design</span> tab.</p>
</div>
<!-- class="sect2" -->
<a id="CIAHHEDD"></a>
<div id="TDPJD179" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.6.4</span> Creating the <a id="sthref341"></a>Login Interface</h3>
<p>In these steps, you add fields to the <code>login.jsp</code> page on which users enter their login details.</p>
<ol>
<li>
<p>If the <code>login.jsp</code> page is not open in the Visual Editor, double-click it in the Application Navigator to open it, and check that the Design tab is selected.</p>
</li>
<li>
<p>Position the cursor after the second scriptlet and select <span class="bold">Form</span> in the HTML Forms page of the Component Palette. In the Insert Form dialog box, enter <code>login_action.jsp</code> as the value for the <span class="bold">Action</span> field. This file will be used to process the user input in the <span class="bold">login.jsp</span> file. (You cannot select this page from a list as it is not created yet.) Leave the other fields empty and click <span class="bold">OK</span>.</p>
<p>The Form is displayed on the page in the Visual Editor, represented by a dotted rectangle.</p>
</li>
<li>
<p>Add a <span class="bold">Table</span> to the page. Position it inside the Form. Specify a 3-row and 2-column layout, and accept other layout defaults.</p>
</li>
<li>
<p>In the first column of the three rows, enter the following as the text to display for users:</p>
<p><span class="bold">User ID:</span></p>
<p><span class="bold">Password:</span></p>
<p><span class="bold">Host:</span></p>
</li>
<li>
<p>From the HTML page of the Component Palette, drag a <span class="bold">Text Field</span> into the table cell to the right of the User ID: cell. In the Insert Text Field dialog box, enter <code>userid</code> as the value of the <span class="bold">Name</span> property. Leave the other fields empty and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In the same way, add a <span class="bold">Text Field</span> to the table cell to the right of the Password: cell and enter <code>password</code> as the value of the <span class="bold">Name</span> property. Similarly, add a <span class="bold">Text Field</span> to the table cell to the right of the Host: cell and enter <code>host</code> as the value of the <span class="bold">Name</span> property.</p>
</li>
<li>
<p>Drag a <span class="bold">Submit</span> button to the Form below the table. Enter <code>Submit</code> for the <span class="bold">Value</span> property of the button.</p>
</li>
</ol>
<p>Your <code>login.jsp</code> page should now appear as shown in <a href="#CIAEICAB">Figure 4-17</a>.</p>
<div id="TDPJD320" class="figure">
<p class="titleinfigure"><a id="CIAEICAB"></a>Figure 4-17 Login Page</p>
<img width="490" height="448" src="img/loginpage.gif" alt="Description of Figure 4-17 follows"/><br/>
<a id="sthref342" href="img_text/loginpage.htm">Description of &#34;Figure 4-17 Login Page&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CIACCDEC"></a>
<div id="TDPJD180" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.6.5</span> Creating a<a id="sthref343"></a> JSP Page to Handle Login Action</h3>
<p>In the following steps, you create the <code>login_action.jsp</code> page, which is a nonviewable page that processes the login operation.</p>
<ol>
<li>
<p>Create a JSP page and call it <code>login_action.jsp</code>. Accept all default settings for the JSP page.</p>
</li>
<li>
<p>With <code>login_action.jsp</code> open in the Visual Editor, click and select the Page Directive on the top left corner of the page. The Property Inspector now shows the properties of the Page Directive.</p>
</li>
<li>
<p>Click the down arrow next to the <span class="bold">Import</span> field. The Edit Property: Import dialog box is displayed. Select the Hierarchy tab and then select <code>ResultSet</code> after extending <code>Java</code> and <code>SQL</code> folders respectively. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Drag a <span class="bold">jsp:usebean</span> tag onto the page. Enter <code>empsbean</code> as the <span class="bold">ID</span> and browse to select <span class="bold">hr.DataHandler</span> as the <span class="bold">Class</span>. Set the <span class="bold">Scope</span> to <code>session</code>, and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Position the cursor after the useBean tag and add a <span class="bold">Scriptlet</span> to the page. Enter the following code into the Insert Scriptlet dialog box and click <span class="bold">OK</span>.</p>
<pre>boolean userIsValid = false;
String host = request.getParameter(&#34;host&#34;);
String userid = request.getParameter(&#34;userid&#34;);
String password = request.getParameter(&#34;password&#34;);
String jdbcUrl = &#34;jdbc:oracle:thin:@&#34; + host + &#34;:1521:ORACLE&#34;;
userIsValid = empsbean.authenticateUser(jdbcUrl, userid, password, session);
</pre></li>
<li>
<p>Add another <span class="bold">Scriptlet</span>, and add the following code to it:</p>
<pre>if (userIsValid){
</pre></li>
<li>
<p>In the JSP page of the Component Palette, find <span class="bold">Forward</span> and drag it onto the page to add a <span class="bold">jsp:forward</span> tag onto the page. In the Insert Forward dialog box, enter <span class="bold">employees.jsp</span> as the value of the Page* field.</p>
</li>
<li>
<p>Add another scriptlet, and enter the following code:</p>
<pre>} else {
</pre></li>
<li>
<p>Add another <span class="bold">jsp:forward</span> tag, and this time move forward to <code>login.jsp</code>.</p>
</li>
<li>
<p>Add a final <span class="bold">Scriptlet</span>, and enter a closing brace (<code>}</code>).</p>
</li>
<li>
<p>Save your work.</p>
</li>
</ol>
<p>To see the code that has been added to <code>login_action.jsp</code>, select the <span class="bold">Source</span> tab. The code displayed is similar to the following:</p>
<pre>&lt;body&gt;
&lt;%@ page import=&#34;java.sql.ResultSet&#34;%&gt;&lt;jsp:useBean id=&#34;empsbean&#34;
                                                   class=&#34;hr.DataHandler&#34;
                                                   scope=&#34;session&#34;/&gt;
&lt;%boolean userIsValid = false;
String host = request.getParameter(&#34;host&#34;);
String userid = request.getParameter(&#34;userid&#34;);
String password = request.getParameter(&#34;password&#34;);
String jdbcUrl = &#34;jdbc:oracle:thin:@&#34; + host + &#34;:1521:ORACLE&#34;;
userIsValid = empsbean.authenticateUser(jdbcUrl, userid, password, session);%&gt; &lt;%if(userIsValid){%&gt;&lt;jsp:forward page=&#34;employees.jsp&#34;/&gt;
&lt;%if (userIsValid){%&gt;&lt;jsp:forward page=&#34;login.jsp&#34;/&gt;&lt;%}%&gt;
&lt;/body&gt;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAIIABE"></a>
<div id="TDPJD181" class="sect1">
<h2 class="sect1"><span class="secnum">4.7</span> <a id="sthref344"></a>Testing the JSP Page</h2>
<p>To test the login page and the filtering of employees, do the following:</p>
<ol>
<li>
<p>In the Application Navigator, right-click the view <span class="bold">project</span>, and select <span class="bold">Run</span>.</p>
<p>You may be prompted to specify a Default Run Target for the project. For now, set this to <code>login.jsp</code>. You can later change the project properties for the default run target page to be any page of your choice.</p>
<p>The login page is displayed in your browser, as shown in <a href="#CIABBBHB">Figure 4-18</a>.</p>
<div id="TDPJD321" class="figure">
<p class="titleinfigure"><a id="CIABBBHB"></a>Figure 4-18 Login Page for Sample Application in the Browser</p>
<img width="461" height="395" src="img/loginpagebrowser.gif" alt="Description of Figure 4-18 follows"/><br/>
<a id="sthref345" href="img_text/loginpagebrowser.htm">Description of &#34;Figure 4-18 Login Page for Sample Application in the Browser&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Enter the following login details for your database, and then click <span class="bold">Submit</span>.</p>
<p><span class="bold">User ID:</span> <code>HR</code></p>
<p><span class="bold">Password:</span> <code>hr</code></p>
<p><span class="bold">Host:</span> <code><span class="codeinlineitalic">localhost</span></code></p>
<p>The <code>Employee.java</code> file is displayed in your browser as shown in <a href="#CIAFDAAI">Figure 4-19</a>.</p>
<div id="TDPJD322" class="figure">
<p class="titleinfigure"><a id="CIAFDAAI"></a>Figure 4-19 Unfiltered Employee Data in employee.jsp</p>
<img width="602" height="654" src="img/employeejsp.gif" alt="Description of Figure 4-19 follows"/><br/>
<a id="sthref346" href="img_text/employeejsp.htm">Description of &#34;Figure 4-19 Unfiltered Employee Data in employee.jsp&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Enter a string of letters by which you want to filter employee data. For example, enter <code>ing</code> in the <span class="bold">Filter by Employee Name</span> field, and click <span class="bold">Filter</span>. A filtered list is displayed, which is shown in:</p>
<div id="TDPJD323" class="figure">
<p class="titleinfigure"><a id="sthref347"></a>Figure 4-20 Filtered Employee Data in employee.jsp</p>
<img width="602" height="427" src="img/filtereddata.gif" alt="Description of Figure 4-20 follows"/><br/>
<a id="sthref348" href="img_text/filtereddata.htm">Description of &#34;Figure 4-20 Filtered Employee Data in employee.jsp&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5878">
<tr>
<td class="cellalignment5885">
<table class="cellalignment5883">
<tr>
<td class="cellalignment5882"><a href="getconn.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5882"><a href="upddata.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5887">
<table class="cellalignment5881">
<tr>
<td class="cellalignment5882"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5882"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5882"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5882"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5882"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5882"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>