<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-102174"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/JSON_TABLE"></a><title>JSON_TABLE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:15Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="functions091.htm" title="Previous" type="text/html"/>
<link rel="Next" href="functions093.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">165/555</span> <!-- End Header --><a id="CJAGJFEI"></a>
<div id="SQLRF56973" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h1 class="refsect1">JSON_TABLE<a id="sthref1527"></a><a id="sthref1528"></a></h1>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">JSON_TABLE</code> function is available starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2).</div>
<p class="subhead1"><a id="SQLRF56974"></a>Syntax</p>
<img width="548" height="123" src="img/json_table.gif" alt="Description of json_table.gif follows"/><br/>
<a id="sthref1529" href="img_text/json_table.htm">Description of the illustration &#39;&#39;json_table.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJABACJA"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span>::=</span></a>, <a href="#CJAGFDBA"><span class="xreftitleitalic"><span class="italic">JSON_table_on_error_clause</span>::=</span></a>, <a href="#CJAHEFGD"><span class="xreftitleitalic"><span class="italic">JSON_columns_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJABACJA"></a><a id="SQLRF56975"></a><a href="functions091.htm#CJAGCJHA"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span></span></a>::=</p>
<img width="244" height="91" src="img/json_path_expression.gif" alt="Description of json_path_expression.gif follows"/><br/>
<a id="sthref1530" href="img_text/json_path_expression.htm">Description of the illustration &#39;&#39;json_path_expression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56976"></a><a href="functions091.htm#CJADGEEA"><span class="xreftitleitalic"><span class="italic">object_step</span></span></a>::=</p>
<img width="244" height="91" src="img/object_step.gif" alt="Description of object_step.gif follows"/><br/>
<a id="sthref1531" href="img_text/object_step.htm">Description of the illustration &#39;&#39;object_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56977"></a><a href="functions091.htm#CJAIIJJC"><span class="xreftitleitalic"><span class="italic">array_step</span></span></a>::=</p>
<img width="334" height="123" src="img/array_step.gif" alt="Description of array_step.gif follows"/><br/>
<a id="sthref1532" href="img_text/array_step.htm">Description of the illustration &#39;&#39;array_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAGFDBA"></a><a id="SQLRF56978"></a><a href="#CJABIHAJ"><span class="xreftitleitalic"><span class="italic">JSON_table_on_error_clause</span></span></a>::=</p>
<img width="291" height="91" src="img/json_table_on_error_clause.gif" alt="Description of json_table_on_error_clause.gif follows"/><br/>
<a id="sthref1533" href="img_text/json_table_on_error_clause.htm">Description of the illustration &#39;&#39;json_table_on_error_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAHEFGD"></a><a id="SQLRF56979"></a><a href="#CJAEAAHA"><span class="xreftitleitalic"><span class="italic">JSON_columns_clause</span></span></a>::=</p>
<img width="343" height="58" src="img/json_columns_clause.gif" alt="Description of json_columns_clause.gif follows"/><br/>
<a id="sthref1534" href="img_text/json_columns_clause.htm">Description of the illustration &#39;&#39;json_columns_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56980"></a><span class="italic">JSON_column_definition</span>::=</p>
<img width="185" height="156" src="img/json_column_definition.gif" alt="Description of json_column_definition.gif follows"/><br/>
<a id="sthref1535" href="img_text/json_column_definition.htm">Description of the illustration &#39;&#39;json_column_definition.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56982"></a><a href="#CJAGEFIB"><span class="xreftitleitalic"><span class="italic">JSON_exists_column</span></span></a>::=</p>
<img width="767" height="46" src="img/json_exists_column.gif" alt="Description of json_exists_column.gif follows"/><br/>
<a id="sthref1536" href="img_text/json_exists_column.htm">Description of the illustration &#39;&#39;json_exists_column.gif&#39;&#39;</a><br/>
<br/>
<p>(The syntax and semantics of these clauses are described in the <code dir="ltr">JSON_EXISTS</code> and <code dir="ltr">JSON_VALUE</code> documentation: <a href="functions093.htm#CJABCIJE"><span class="xreftitleitalic"><span class="italic">JSON_value_return_type</span>::=</span></a>, <a href="#CJABACJA"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span>::=</span></a>, <a href="conditions010.htm#BABGJJFD"><span class="xreftitleitalic"><span class="italic">JSON_exists_on_error_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="SQLRF56983"></a><a href="#CJAGFHCI"><span class="xreftitleitalic"><span class="italic">JSON_query_column</span></span></a>::=</p>
<img width="626" height="123" src="img/json_query_column.gif" alt="Description of json_query_column.gif follows"/><br/>
<a id="sthref1537" href="img_text/json_query_column.htm">Description of the illustration &#39;&#39;json_query_column.gif&#39;&#39;</a><br/>
<br/>
<p>(The syntax and semantics of these clauses are described in the <code dir="ltr">JSON_QUERY</code> documentation: <a href="functions091.htm#CJADJIIJ"><span class="xreftitleitalic"><span class="italic">JSON_query_return_type</span>::=</span></a>, <a href="functions091.htm#CJAGGHHG"><span class="xreftitleitalic"><span class="italic">JSON_query_wrapper_clause</span>::=</span></a>, <a href="functions091.htm#CJAFCHID"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span>::=</span></a>, <a href="functions091.htm#CJACIDGJ"><span class="xreftitleitalic"><span class="italic">JSON_query_on_error_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="SQLRF56984"></a><a href="#CJAHAAFJ"><span class="xreftitleitalic"><span class="italic">JSON_value_column</span></span></a>::=</p>
<img width="697" height="46" src="img/json_value_column.gif" alt="Description of json_value_column.gif follows"/><br/>
<a id="sthref1538" href="img_text/json_value_column.htm">Description of the illustration &#39;&#39;json_value_column.gif&#39;&#39;</a><br/>
<br/>
<p>(The syntax and semantics of these clauses are described in the <code dir="ltr">JSON_VALUE</code> documentation: <a href="functions093.htm#CJABCIJE"><span class="xreftitleitalic"><span class="italic">JSON_value_return_type</span>::=</span></a>, <a href="functions093.htm#CJAIIDIE"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span>::=</span></a>, <a href="functions093.htm#CJAHCAIE"><span class="xreftitleitalic"><span class="italic">JSON_value_on_error_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="SQLRF56985"></a><a href="#CJAGFIBD"><span class="xreftitleitalic"><span class="italic">JSON_nested_path</span></span></a>::=</p>
<img width="437" height="27" src="img/json_nested_path.gif" alt="Description of json_nested_path.gif follows"/><br/>
<a id="sthref1539" href="img_text/json_nested_path.htm">Description of the illustration &#39;&#39;json_nested_path.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJABACJA"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span>::=</span></a>, <a href="#CJAHEFGD"><span class="xreftitleitalic"><span class="italic">JSON_columns_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="SQLRF56981"></a><a href="#CJAGCABF"><span class="xreftitleitalic"><span class="italic">ordinality_column</span></span></a>::=</p>
<img width="260" height="27" src="img/ordinality_column.gif" alt="Description of ordinality_column.gif follows"/><br/>
<a id="sthref1540" href="img_text/ordinality_column.htm">Description of the illustration &#39;&#39;ordinality_column.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead1"><a id="SQLRF56986"></a>Purpose</p>
<p><code dir="ltr">JSON_TABLE</code> creates a relational view of JSON data. It maps the result of a JSON data evaluation into relational rows and columns. You can query the result returned by the function as a virtual relational table using SQL. The main purpose of <code dir="ltr">JSON_TABLE</code> is to create a row of relational data for each object inside a JSON array and output JSON values from within that object as individual SQL column values.</p>
<p>You can specify <code dir="ltr">JSON_TABLE</code> only in the <code dir="ltr">FROM</code> clause of a <code dir="ltr">SELECT</code> statement. The function first applies a JSON path expression, called a <span class="bold">row</span> <span class="bold">path</span> <span class="bold">expression</span>, to the supplied JSON data. The JSON value that matches the row path expression is called a <span class="bold">row</span> <span class="bold">source</span> in that it generates a row of relational data. The <code dir="ltr">COLUMNS</code> clause evaluates the row source, finds specific JSON values within the row source, and returns those JSON values as SQL values in individual columns of a row of relational data.</p>
<p>The <code dir="ltr">COLUMNS</code> clause enables you to search for JSON values in different ways by using the following clauses:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">JSON_exists_column</span></code> - Evaluates JSON data in the same manner as the <code dir="ltr">JSON_EXISTS</code> condition, that is, determines if a specified JSON value exists, and returns either a <code dir="ltr">VARCHAR2</code> column of values &#39;<code dir="ltr">true</code>&#39; or &#39;<code dir="ltr">false</code>&#39;, or a <code dir="ltr">NUMBER</code> column of values 1 or 0.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">JSON_query_column</span></code> - Evaluates JSON data in the same manner as the <code dir="ltr">JSON_QUERY</code> function, that is, finds one or more specified JSON values, and returns a column of character strings that contain those JSON values.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">JSON_value_column</span></code> - Evaluates JSON data in the same manner as the <code dir="ltr">JSON_VALUE</code> function, that is, finds a specified scalar JSON value, and returns a column of those JSON values as SQL values.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> - Allows you to flatten JSON values in a nested JSON object or JSON array into individual columns in a single row along with JSON values from the parent object or array. You can use this clause recursively to project data from multiple layers of nested objects or arrays into a single row.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">ordinality_column</span></code> - Returns a column of generated row numbers.</p>
</li>
</ul>
<p>The column definition clauses allow you to specify a name for each column of data that they return. You can reference these column names elsewhere in the <code dir="ltr">SELECT</code> statement, such as in the <code dir="ltr">SELECT</code> list and the <code dir="ltr">WHERE</code> clause.</p>
<p class="subhead2"><a id="SQLRF56987"></a><span class="italic">expr</span></p>
<p>Use this clause to specify the JSON data to be evaluated. For <code dir="ltr"><span class="codeinlineitalic">expr</span></code>, specify an expression that evaluates to a text literal. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column, then the column must be of data type <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">BLOB</code>. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is null, then the function returns null.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not a text literal of well-formed JSON data using strict or lax syntax, then the function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_table_on_error_clause</span></code> to override this default behavior. Refer to <a href="#CJABIHAJ"><span class="xreftitleitalic"><span class="italic">JSON_table_on_error_clause</span></span></a>.</p>
<p class="subhead2"><a id="SQLRF57038"></a>FORMAT JSON</p>
<p>You must specify <code dir="ltr">FORMAT</code> <code dir="ltr">JSON</code> if <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column of data type <code dir="ltr">BLOB</code>.</p>
<p class="subhead2"><a id="SQLRF56988"></a><span class="italic">JSON_path_expression</span></p>
<p>Use this clause to specify the row path expression. The function uses the row path expression to evaluate <code dir="ltr"><span class="codeinlineitalic">expr</span></code> and find the a JSON value, called the row source, that matches, or satisfy, the path expression. This row source is then evaluated by the <code dir="ltr">COLUMNS</code> clause. The path expression must be a text literal.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">JSON_path_expression</span></code> clause has the same semantics for <code dir="ltr">JSON_TABLE</code> and <code dir="ltr">JSON_QUERY</code>. For the full semantics of this clause, refer to <a href="functions091.htm#CJAGCJHA"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span></span></a> in the documentation on <code dir="ltr">JSON_QUERY</code>.</p>
<p class="subhead2"><a id="CJABIHAJ"></a><a id="SQLRF56989"></a><span class="italic">JSON_table_on_error_clause</span></p>
<p>Use this clause to specify the value returned by this function when the following errors occur:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not well-formed JSON data using strict or lax JSON syntax</p>
</li>
<li>
<p>No match is found when the JSON data is evaluated using the row path expression</p>
</li>
</ul>
<p>You can specify the following clauses:</p>
<ul>
<li>
<p><code dir="ltr">NULL</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns null when an error occurs. This is the default.</p>
</li>
<li>
<p><code dir="ltr">ERROR</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns the appropriate Oracle error when an error occurs.</p>
</li>
<li>
<p><code dir="ltr">DEFAULT</code> <code dir="ltr"><span class="codeinlineitalic">literal</span></code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns <code dir="ltr"><span class="codeinlineitalic">literal</span></code> when an error occurs. If the data type of the value returned by this function is <code dir="ltr">VARCHAR2</code>, then you must specify a text literal. If the data type is <code dir="ltr">NUMBER</code>, then you must specify a numeric literal.</p>
</li>
</ul>
<p class="subhead2"><a id="CJAEAAHA"></a><a id="SQLRF56990"></a><span class="italic">JSON_columns_clause</span></p>
<p>Use the <code dir="ltr">COLUMNS</code> clause to define the columns in the virtual relational table returned by the <code dir="ltr">JSON_TABLE</code> function.</p>
<p><a id="CJAGEFIB"></a><a id="SQLRF57003"></a><span class="subhead3"><span class="italic">JSON_exists_column</span>&nbsp;</span>This clause evaluates JSON data in the same manner as the <code dir="ltr">JSON_EXISTS</code> condition, that is, it determines if a specified JSON value exists. It returns either a <code dir="ltr">VARCHAR2</code> column of values &#39;<code dir="ltr">true</code>&#39; or &#39;<code dir="ltr">false</code>&#39;, or a <code dir="ltr">NUMBER</code> column of values 1 or 0. A value of &#39;<code dir="ltr">true</code>&#39; or 1 indicates that the JSON value exists and a value of &#39;<code dir="ltr">false</code>&#39; or 0 indicates that the JSON value does not exist.</p>
<p>You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_value_return_type</span></code> clause to control the data type of the returned column. If you omit this clause, then the data type is <code dir="ltr">VARCHAR2(4000)</code>. Use <code dir="ltr"><span class="codeinlineitalic">column_name</span></code> to specify the name of the returned column. The rest of the clauses of <code dir="ltr"><span class="codeinlineitalic">JSON_exists_column</span></code> have the same semantics here as they have for the <code dir="ltr">JSON_EXISTS</code> condition. For full information on these clauses, refer to <a href="conditions010.htm#BABHAGEG">&#34;JSON_EXISTS Condition&#34;</a>. Also see <a href="#CJAJGGJC">&#34;Using <span class="italic">JSON_exists_column</span>: Examples&#34;</a> for an example.</p>
<p><a id="CJAGFHCI"></a><a id="SQLRF57004"></a><span class="subhead3"><span class="italic">JSON_query_column</span>&nbsp;</span>This clause evaluates JSON data in the same manner as the <code dir="ltr">JSON_QUERY</code> function, that is, it finds one or more specified JSON values, and returns a column of character strings that contain those JSON values.</p>
<p>Use <code dir="ltr"><span class="codeinlineitalic">column_name</span></code> to specify the name of the returned column. The rest of the clauses of <code dir="ltr"><span class="codeinlineitalic">JSON_query_column</span></code> have the same semantics here as they have for the <code dir="ltr">JSON_QUERY</code> function. For full information on these clauses, refer to <a href="functions091.htm#CJACGHBJ">JSON_QUERY</a>. Also see <a href="#CJAEJCEF">&#34;Using <span class="italic">JSON_query_column</span>: Example&#34;</a> for an example.</p>
<p><a id="CJAHAAFJ"></a><a id="SQLRF57005"></a><span class="subhead3"><span class="italic">JSON_value_column</span>&nbsp;</span>This clause evaluates JSON data in the same manner as the <code dir="ltr">JSON_VALUE</code> function, that is, it finds a specified scalar JSON value, and returns a column of those JSON values as SQL values.</p>
<p>Use <code dir="ltr"><span class="codeinlineitalic">column_name</span></code> to specify the name of the returned column. The rest of the clauses of <code dir="ltr"><span class="codeinlineitalic">JSON_value_column</span></code> have the same semantics here as they have for the <code dir="ltr">JSON_VALUE</code> function. For full information on these clauses, refer to <a href="functions093.htm#CJAGGCJH">JSON_VALUE</a>. Also see <a href="#CJAFACBH">&#34;Using <span class="italic">JSON_value_column</span>: Example&#34;</a> for an example.</p>
<p><a id="CJAGFIBD"></a><a id="SQLRF57006"></a><span class="subhead3"><span class="italic">JSON_nested_path</span>&nbsp;</span>Use this clause to flatten JSON values in a nested JSON object or JSON array into individual columns in a single row along with JSON values from the parent object or array. You can use this clause recursively to project data from multiple layers of nested objects or arrays into a single row.</p>
<p>Specify the <code dir="ltr"><span class="codeinlineitalic">JSON_path_expression</span></code> clause to match the nested object or array. This path expression is relative to the row path expression specified in the <code dir="ltr">JSON_TABLE</code> function.</p>
<p>Use the <code dir="ltr">COLUMNS</code> clause to define the columns of the nested object or array to be returned. This clause is recursive&mdash;you can specify the <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause within another <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause. Also see <a href="#CJAJAEJD">&#34;Using <span class="italic">JSON_nested_path</span>: Examples&#34;</a> for an example.</p>
<p><a id="CJAGCABF"></a><a id="SQLRF57007"></a><span class="subhead3"><span class="italic">ordinality_column</span>&nbsp;</span>This clause returns a column of generated row numbers of data type <code dir="ltr">NUMBER</code>. You can specify at most one <code dir="ltr"><span class="codeinlineitalic">ordinality_column</span></code>. Also see <a href="#CJAFACBH">&#34;Using <span class="italic">JSON_value_column</span>: Example&#34;</a> for an example of using the <code dir="ltr"><span class="codeinlineitalic">ordinality_column</span></code> clause.</p>
<p class="subhead1"><a id="SQLRF56991"></a>Examples</p>
<p><a id="CJAHAAJE"></a><a id="SQLRF57008"></a><span class="subhead3">Creating a Table That Contains a JSON Document: Example&nbsp;</span>This example shows how to create and populate table <code dir="ltr">j_purchaseorder</code>, which is used in the rest of the <code dir="ltr">JSON_TABLE</code> examples in this section.</p>
<p>The following statement creates table <code dir="ltr">j_purchaseorder</code>. Column <code dir="ltr">po_document</code> is for storing JSON data and, therefore, has an <code dir="ltr">IS</code> <code dir="ltr">JSON</code> check constraint to ensure that only well-formed JSON is stored in the column.</p>
<pre dir="ltr">CREATE TABLE j_purchaseorder
  (id RAW (16) NOT NULL,
   date_loaded TIMESTAMP(6) WITH TIME ZONE,
   po_document CLOB CONSTRAINT ensure_json CHECK (po_document IS JSON));
</pre>
<p>The following statement inserts one row, or one JSON document, into table <code dir="ltr">j_purchaseorder</code>:</p>
<pre dir="ltr">INSERT INTO j_purchaseorder
  VALUES (
    SYS_GUID(),
    SYSTIMESTAMP,
    &#39;{&#34;PONumber&#34;              : 1600,
      &#34;Reference&#34;             : &#34;ABULL-20140421&#34;,
       &#34;Requestor&#34;            : &#34;Alexis Bull&#34;,
       &#34;User&#34;                 : &#34;ABULL&#34;,
       &#34;CostCenter&#34;           : &#34;A50&#34;,
       &#34;ShippingInstructions&#34; : {&#34;name&#34;   : &#34;Alexis Bull&#34;,
                                 &#34;Address&#34;: {&#34;street&#34;   : &#34;200 Sporting Green&#34;,
                                              &#34;city&#34;    : &#34;South San Francisco&#34;,
                                              &#34;state&#34;   : &#34;CA&#34;,
                                              &#34;zipCode&#34; : 99236,
                                              &#34;country&#34; : &#34;United States of America&#34;},
                                 &#34;Phone&#34; : [{&#34;type&#34; : &#34;Office&#34;, &#34;number&#34; : &#34;909-555-7307&#34;},
                                            {&#34;type&#34; : &#34;Mobile&#34;, &#34;number&#34; : &#34;415-555-1234&#34;}]},
       &#34;Special Instructions&#34; : null,
       &#34;AllowPartialShipment&#34; : true,
       &#34;LineItems&#34; : [{&#34;ItemNumber&#34; : 1,
                       &#34;Part&#34; : {&#34;Description&#34; : &#34;One Magic Christmas&#34;,
                                 &#34;UnitPrice&#34;   : 19.95,
                                 &#34;UPCCode&#34;     : 13131092899},
                       &#34;Quantity&#34; : 9.0},
                      {&#34;ItemNumber&#34; : 2,
                       &#34;Part&#34; : {&#34;Description&#34; : &#34;Lethal Weapon&#34;,
                                 &#34;UnitPrice&#34;   : 19.95,
                                 &#34;UPCCode&#34;     : 85391628927},
                       &#34;Quantity&#34; : 5.0}]}&#39;);
</pre>
<p><a id="CJAEJCEF"></a><a id="SQLRF57009"></a><span class="subhead3">Using <span class="italic">JSON_query_column</span>: Example&nbsp;</span>The statement in this example queries JSON data for a specific JSON property using the <code dir="ltr"><span class="codeinlineitalic">JSON_query_column</span></code> clause, and returns the property value in a column.</p>
<p>The statement first applies a row path expression to column <code dir="ltr">po_document</code>, which results in a match to the <code dir="ltr">ShippingInstructions</code> property. The <code dir="ltr">COLUMNS</code> clause then uses the <code dir="ltr"><span class="codeinlineitalic">JSON_query_column</span></code> clause to return the <code dir="ltr">Phone</code> property value in a <code dir="ltr">VARCHAR2(100)</code> column.</p>
<pre dir="ltr">SELECT jt.phones
FROM j_purchaseorder,
JSON_TABLE(po_document, &#39;$.ShippingInstructions&#39;
COLUMNS
  (phones VARCHAR2(100) FORMAT JSON PATH &#39;$.Phone&#39;)) AS jt;
</pre>
<pre dir="ltr">PHONES
-------------------------------------------------------------------------------------
[{&#34;type&#34;:&#34;Office&#34;,&#34;number&#34;:&#34;909-555-7307&#34;},{&#34;type&#34;:&#34;Mobile&#34;,&#34;number&#34;:&#34;415-555-1234&#34;}]
</pre>
<p><a id="CJAFACBH"></a><a id="SQLRF57010"></a><span class="subhead3">Using <span class="italic">JSON_value_column</span>: Example&nbsp;</span>The statement in this example refines the statement in the previous example by querying JSON data for specific JSON values using the <code dir="ltr"><span class="codeinlineitalic">JSON_value_column</span></code> clause, and returns the JSON values as SQL values in relational rows and columns.</p>
<p>The statement first applies a row path expression to column <code dir="ltr">po_document</code>, which results in a match to the elements in the JSON array <code dir="ltr">Phone</code>. These elements are JSON objects that contain two members named <code dir="ltr">type</code> and <code dir="ltr">number</code>. The statement uses the <code dir="ltr">COLUMNS</code> clause to return the <code dir="ltr">type</code> value for each object in a <code dir="ltr">VARCHAR2(10)</code> column called <code dir="ltr">phone_type</code>, and the <code dir="ltr">number</code> value for each object in a <code dir="ltr">VARCHAR2(20)</code> column called <code dir="ltr">phone_num</code>. The statement also returns an ordinal column named <code dir="ltr">row_number</code>.</p>
<pre dir="ltr">SELECT jt.*
FROM j_purchaseorder,
JSON_TABLE(po_document, &#39;$.ShippingInstructions.Phone[*]&#39;
COLUMNS (row_number FOR ORDINALITY,
         phone_type VARCHAR2(10) PATH &#39;$.type&#39;,
         phone_num VARCHAR2(20) PATH &#39;$.number&#39;))
AS jt;

ROW_NUMBER PHONE_TYPE PHONE_NUM
---------- ---------- --------------------
         1 Office     909-555-7307
         2 Mobile     415-555-1234
</pre>
<p><a id="CJAJGGJC"></a><a id="SQLRF57011"></a><span class="subhead3">Using <span class="italic">JSON_exists_column</span>: Examples&nbsp;</span>The statements in this example test whether a JSON value exists in JSON data using the <code dir="ltr"><span class="codeinlineitalic">JSON_exists_column</span></code> clause. The first example returns the result of the test as a &#39;<code dir="ltr">true</code>&#39; or &#39;<code dir="ltr">false</code>&#39; value in a column. The second example uses the result of the test in the <code dir="ltr">WHERE</code> clause.</p>
<p>The following statement first applies a row path expression to column <code dir="ltr">po_document</code>, which results in a match to the entire context item, or JSON document. It then uses the <code dir="ltr">COLUMNS</code> clause to return the requestor&#39;s name and a string value of &#39;<code dir="ltr">true</code>&#39; or &#39;<code dir="ltr">false</code>&#39; indicating whether the JSON data for that requestor contains a zip code. The <code dir="ltr">COLUMNS</code> clause first uses the <code dir="ltr"><span class="codeinlineitalic">JSON_value_column</span></code> clause to return the <code dir="ltr">Requestor</code> value in a <code dir="ltr">VARCHAR2(32)</code> column called <code dir="ltr">requestor</code>. It then uses the <code dir="ltr"><span class="codeinlineitalic">JSON_exists_column</span></code> clause to determine if the <code dir="ltr">zipCode</code> object exists and returns the result in a <code dir="ltr">VARCHAR2(5)</code> column called <code dir="ltr">has_zip</code>.</p>
<pre dir="ltr">SELECT requestor, has_zip
FROM j_purchaseorder,
JSON_TABLE(po_document, &#39;$&#39;
COLUMNS
  (requestor VARCHAR2(32) PATH &#39;$.Requestor&#39;,
   has_zip VARCHAR2(5) EXISTS PATH &#39;$.ShippingInstructions.Address.zipCode&#39;));

REQUESTOR                        HAS_ZIP
-------------------------------- -------
Alexis Bull                      true
</pre>
<p>The following statement is similar to the previous statement, except that it uses the value of <code dir="ltr">has_zip</code> in the <code dir="ltr">WHERE</code> clause to determine whether to return the <code dir="ltr">Requestor</code> value:</p>
<pre dir="ltr">SELECT requestor
FROM j_purchaseorder,
JSON_TABLE(po_document, &#39;$&#39;
COLUMNS
  (requestor VARCHAR2(32) PATH &#39;$.Requestor&#39;,
   has_zip VARCHAR2(5) EXISTS PATH &#39;$.ShippingInstructions.Address.zipCode&#39;))
WHERE (has_zip = &#39;true&#39;);

REQUESTOR
--------------------------------
Alexis Bull
</pre>
<p><a id="CJAJAEJD"></a><a id="SQLRF57012"></a><span class="subhead3">Using <span class="italic">JSON_nested_path</span>: Examples&nbsp;</span>The following two simple statements demonstrate the functionality of the <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause. They operate on a simple JSON array that contains three elements. The first two elements are numbers. The third element is a nested JSON array that contains two string value elements.</p>
<p>The following statement does not use the <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause. It returns the three elements in the array in a single row. The nested array is returned in its entirety.</p>
<pre dir="ltr">SELECT *
FROM JSON_TABLE(&#39;[1,2,[&#34;a&#34;,&#34;b&#34;]]&#39;, &#39;$&#39;
COLUMNS (outer_value_0 NUMBER PATH &#39;$[0]&#39;,
         outer_value_1 NUMBER PATH &#39;$[1]&#39;, 
         outer_value_2 VARCHAR2(20) FORMAT JSON PATH &#39;$[2]&#39;));

OUTER_VALUE_0 OUTER_VALUE_1 OUTER_VALUE_2
------------- ------------- --------------------
            1             2 [&#34;a&#34;,&#34;b&#34;]
</pre>
<p>The following statement is different from the previous statement because it uses the <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause to return the individual elements of the nested array in individual columns in a single row along with the parent array elements.</p>
<pre dir="ltr">SELECT *
FROM JSON_TABLE(&#39;[1,2,[&#34;a&#34;,&#34;b&#34;]]&#39;, &#39;$&#39;
COLUMNS (outer_value_0 NUMBER PATH &#39;$[0]&#39;,
         outer_value_1 NUMBER PATH &#39;$[1]&#39;,
         NESTED PATH &#39;$[2]&#39;
         COLUMNS (nested_value_0 VARCHAR2(1) PATH &#39;$[0]&#39;,
                  nested_value_1 VARCHAR2(1) PATH &#39;$[1]&#39;)));

OUTER_VALUE_0 OUTER_VALUE_1 NESTED_VALUE_0 NESTED_VALUE_1
------------- ------------- -------------- --------------
            1             2 a              b
</pre>
<p>The previous example shows how to use <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> with a nested JSON array. The following example shows how to use the <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause with a nested JSON object by returning the individual elements of the nested object in individual columns in a single row along with the parent object elements.</p>
<pre dir="ltr">SELECT *
FROM JSON_TABLE(&#39;{a:100, b:200, c:{d:300, e:400}}&#39;, &#39;$&#39;
COLUMNS (outer_value_0 NUMBER PATH &#39;$.a&#39;,
         outer_value_1 NUMBER PATH &#39;$.b&#39;,
         NESTED PATH &#39;$.c&#39;
         COLUMNS (nested_value_0 NUMBER PATH &#39;$.d&#39;,
                  nested_value_1 NUMBER PATH &#39;$.e&#39;)));

OUTER_VALUE_0 OUTER_VALUE_1 NESTED_VALUE_0 NESTED_VALUE_1
------------- ------------- -------------- --------------
          100           200            300            400
</pre>
<p>The following statement uses the <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause when querying the <code dir="ltr">j_purchaseorder</code> table. It first applies a row path expression to column <code dir="ltr">po_document</code>, which results in a match to the entire context item, or JSON document. It then uses the <code dir="ltr">COLUMNS</code> clause to return the <code dir="ltr">Requestor</code> value in a <code dir="ltr">VARCHAR2(32)</code> column called <code dir="ltr">requestor</code>. It then uses the <code dir="ltr"><span class="codeinlineitalic">JSON_nested_path</span></code> clause to return the property values of the individual objects in each member of the nested <code dir="ltr">Phone</code> array. Note that a row is generated for each member of the nested array, and each row contains the corresponding <code dir="ltr">Requestor</code> value.</p>
<pre dir="ltr">SELECT jt.*
FROM j_purchaseorder,
JSON_TABLE(po_document, &#39;$&#39;
COLUMNS
  (requestor VARCHAR2(32) PATH &#39;$.Requestor&#39;,
   NESTED PATH &#39;$.ShippingInstructions.Phone[*]&#39;
     COLUMNS (phone_type VARCHAR2(32) PATH &#39;$.type&#39;,
              phone_num VARCHAR2(20) PATH &#39;$.number&#39;)))
AS jt;
 
 
REQUESTOR            PHONE_TYPE           PHONE_NUM
-------------------- -------------------- ---------------
Alexis Bull          Office               909-555-7307
Alexis Bull          Mobile               415-555-1234
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="functions091.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="functions093.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>