<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-102173"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/JSON_QUERY"></a><title>JSON_QUERY</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:15Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="functions090.htm" title="Previous" type="text/html"/>
<link rel="Next" href="functions092.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">164/555</span> <!-- End Header --><a id="CJACGHBJ"></a>
<div id="SQLRF56718" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h1 class="refsect1">JSON_QUERY<a id="sthref1517"></a><a id="sthref1518"></a></h1>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">JSON_QUERY</code> function is available starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2).</div>
<p class="subhead1"><a id="SQLRF56719"></a>Syntax</p>
<img width="728" height="123" src="img/json_query.gif" alt="Description of json_query.gif follows"/><br/>
<a id="sthref1519" href="img_text/json_query.htm">Description of the illustration &#39;&#39;json_query.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAFCHID"></a><a id="SQLRF56720"></a><a href="#CJAGCJHA"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span></span></a>::=</p>
<img width="244" height="91" src="img/json_path_expression.gif" alt="Description of json_path_expression.gif follows"/><br/>
<a id="sthref1520" href="img_text/json_path_expression.htm">Description of the illustration &#39;&#39;json_path_expression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56721"></a><a href="#CJADGEEA"><span class="xreftitleitalic"><span class="italic">object_step</span></span></a>::=</p>
<img width="244" height="91" src="img/object_step.gif" alt="Description of object_step.gif follows"/><br/>
<a id="sthref1521" href="img_text/object_step.htm">Description of the illustration &#39;&#39;object_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56722"></a><a href="#CJAIIJJC"><span class="xreftitleitalic"><span class="italic">array_step</span></span></a>::=</p>
<img width="334" height="123" src="img/array_step.gif" alt="Description of array_step.gif follows"/><br/>
<a id="sthref1522" href="img_text/array_step.htm">Description of the illustration &#39;&#39;array_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAFCICG"></a><a id="SQLRF56723"></a><a href="#CJAGDHAA"><span class="xreftitleitalic"><span class="italic">JSON_query_returning_clause</span></span></a>::=</p>
<img width="534" height="37" src="img/json_query_returning_clause.gif" alt="Description of json_query_returning_clause.gif follows"/><br/>
<a id="sthref1523" href="img_text/json_query_returning_clause.htm">Description of the illustration &#39;&#39;json_query_returning_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJADJIIJ"></a><a id="SQLRF56972"></a><span class="italic">JSON_query_return_type</span>::=</p>
<img width="395" height="98" src="img/json_query_return_type.gif" alt="Description of json_query_return_type.gif follows"/><br/>
<a id="sthref1524" href="img_text/json_query_return_type.htm">Description of the illustration &#39;&#39;json_query_return_type.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAGGHHG"></a><a id="SQLRF56724"></a><a href="#CJABHEEC"><span class="xreftitleitalic"><span class="italic">JSON_query_wrapper_clause</span></span></a>::=</p>
<img width="499" height="131" src="img/json_query_wrapper_clause.gif" alt="Description of json_query_wrapper_clause.gif follows"/><br/>
<a id="sthref1525" href="img_text/json_query_wrapper_clause.htm">Description of the illustration &#39;&#39;json_query_wrapper_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJACIDGJ"></a><a id="SQLRF56779"></a><a href="#CJAJJCGH"><span class="xreftitleitalic"><span class="italic">JSON_query_on_error_clause</span></span></a>::=</p>
<img width="227" height="91" src="img/json_query_on_error_clause.gif" alt="Description of json_query_on_error_clause.gif follows"/><br/>
<a id="sthref1526" href="img_text/json_query_on_error_clause.htm">Description of the illustration &#39;&#39;json_query_on_error_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead1"><a id="SQLRF56725"></a>Purpose</p>
<p><code dir="ltr">JSON_QUERY</code> finds one or more specified JSON values in JSON data and returns the values in a character string.</p>
<p class="subhead2"><a id="SQLRF56726"></a><span class="italic">expr</span></p>
<p>Use this clause to specify the JSON data to be evaluated. For <code dir="ltr"><span class="codeinlineitalic">expr</span></code>, specify an expression that evaluates to a text literal. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column, then the column must be of data type <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">BLOB</code>. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is null, then the function returns null.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not a text literal of well-formed JSON data using strict or lax syntax, then the function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_query_on_error_clause</span></code> to override this default behavior. Refer to <a href="#CJAJJCGH"><span class="xreftitleitalic"><span class="italic">JSON_query_on_error_clause</span></span></a>.</p>
<p class="subhead2"><a id="SQLRF57037"></a>FORMAT JSON</p>
<p>You must specify <code dir="ltr">FORMAT</code> <code dir="ltr">JSON</code> if <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column of data type <code dir="ltr">BLOB</code>.</p>
<p class="subhead2"><a id="CJAGCJHA"></a><a id="SQLRF56727"></a><span class="italic">JSON_path_expression</span></p>
<p>Use this clause to specify a JSON path expression. The function uses the path expression to evaluate <code dir="ltr"><span class="codeinlineitalic">expr</span></code> and find one or more JSON values that match, or satisfy, the path expression. The path expression must be a text literal.</p>
<p>The path expression must begin with a dollar sign (<code dir="ltr">$</code>), which represents the context item, that is, the expression specified by <code dir="ltr"><span class="codeinlineitalic">expr</span></code>. The dollar sign is followed by zero or more steps, each of which can be an object step or an array step.</p>
<p>The function attempts to match the first step in the path expression to the context item. If the first step results in a match, then the function attempts to match the second step to the JSON value(s) that matched the first step. If the second step results in a match, then the function attempts to match the third step to the JSON values(s) that matched the second step, and so on. The function returns the value(s) matched in the final step as a comma-separated sequence of values in a character string. The order of the sequence is nondeterministic. All values are returned using strict JSON syntax, regardless of whether the original JSON data used strict or lax JSON syntax. A path expression that consists of a dollar sign followed by zero steps (<code dir="ltr">&#39;$&#39;</code>) matches the entire context item.</p>
<p>You can specify the <code dir="ltr"><span class="codeinlineitalic">JSON_query_returning_clause</span></code> to control the data type and format of the return character string. Refer to the <a href="#CJAGDHAA"><span class="xreftitleitalic"><span class="italic">JSON_query_returning_clause</span></span></a>.</p>
<p>If multiple values match the path expression, or if only one scalar value matches the path expression, then you must wrap the value(s) in an array wrapper. Refer to the <a href="#CJABHEEC"><span class="xreftitleitalic"><span class="italic">JSON_query_wrapper_clause</span></span></a>.</p>
<p>If any step in the path expression does not result in a match, then the function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_query_on_error_clause</span></code> to override this default behavior. Refer to the <a href="#CJAJJCGH"><span class="xreftitleitalic"><span class="italic">JSON_query_on_error_clause</span></span></a>.</p>
<p><a id="CJADGEEA"></a><a id="SQLRF56728"></a><span class="subhead3"><span class="italic">object_step</span>&nbsp;</span>Use this clause to specify an object step.</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> or <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> to specify a property name. If a member with that property name exists in the JSON object being evaluated, then the object step results in a match to the property value of that member. Otherwise, the object step does not result in a match. Both types of names are case-sensitive. Therefore, a match will result only if the alphabetic character cases match in the object step and the JSON data.</p>
<p>A <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> can contain only alphanumeric characters and must begin with an alphabetic character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> can contain only alphanumeric characters and spaces, and must begin with an alphanumeric character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> must be enclosed in double quotation marks.</p>
</li>
<li>
<p>Use the asterisk wildcard symbol (<code dir="ltr">*</code>) to specify all property names. If the JSON object being evaluated contains at least one member, then the object step results in a match to the values of all members. Otherwise, the object step does not result in a match.</p>
</li>
</ul>
<p>If you apply an object step to a JSON array, then the array is implicitly unwrapped and the elements of the array are evaluated using the object step. This is called JSON path expression relaxation. Refer to <a class="olink ADXDB6373" href="../ADXDB/json.htm#ADXDB6373"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information.</p>
<p>If the JSON data being evaluated is not a JSON object, then the object step does not result in a match.</p>
<p><a id="CJAIIJJC"></a><a id="SQLRF56729"></a><span class="subhead3"><span class="italic">array_step</span>&nbsp;</span>Use this clause to specify an array step.</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the element at index <code dir="ltr"><span class="codeinlineitalic">integer</span></code> in a JSON array. Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the range of elements between the two index <code dir="ltr"><span class="codeinlineitalic">integer</span></code> values, inclusive. If the specified elements exist in the JSON array being evaluated, then the array step results in a match to those elements. Otherwise, the array step does not result in a match. The first element in a JSON array had index 0.</p>
</li>
<li>
<p>Use the asterisk wildcard symbol (<code dir="ltr">*</code>) to specify all elements in a JSON array. If the JSON array being evaluated contains at least one element, then the array step results in a match to all elements in the JSON array. Otherwise, the array step does not result in a match.</p>
</li>
</ul>
<p>If the JSON data being evaluated is not a JSON array, then the data is implicitly wrapped in an array and then evaluated using the array step. This is called JSON path expression relaxation. Refer to <a class="olink ADXDB6373" href="../ADXDB/json.htm#ADXDB6373"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information.</p>
<p class="subhead2"><a id="CJAGDHAA"></a><a id="SQLRF56730"></a><span class="italic">JSON_query_returning_clause</span></p>
<p>Use this clause to specify the data type and format of the character string returned by this function.</p>
<p><a id="SQLRF56731"></a><span class="subhead3">RETURNING&nbsp;</span>Use the <code dir="ltr">RETURNING</code> clause to specify the data type of the character string. If you omit this clause, then <code dir="ltr">JSON_QUERY</code> returns a character string of type <code dir="ltr">VARCHAR2(4000)</code>.</p>
<p>You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_return_type_clause</span></code> to specify the following data type:</p>
<ul>
<li>
<p><code dir="ltr">VARCHAR2[(</code><code dir="ltr"><span class="codeinlineitalic">size</span></code> <code dir="ltr">[BYTE,CHAR])]</code></p>
<p>When specifying the <code dir="ltr">VARCHAR2</code> data type elsewhere in SQL, you are required to specify a size. However, in this clause you can omit the size. In this case, <code dir="ltr">JSON_QUERY</code> returns a character string of type <code dir="ltr">VARCHAR2(4000)</code>.</p>
<p>Refer to <a href="sql_elements001.htm#i45694">&#34;VARCHAR2 Data Type&#34;</a> for more information.</p>
</li>
</ul>
<p>If the data type is not large enough to hold the return character string, then this function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_query_on_error_clause</span></code> to override this default behavior. Refer to the <a href="#CJAJJCGH"><span class="xreftitleitalic"><span class="italic">JSON_query_on_error_clause</span></span></a>.</p>
<p><a id="SQLRF56732"></a><span class="subhead3">PRETTY&nbsp;</span>Specify <code dir="ltr">PRETTY</code> to pretty-print the return character string by inserting newline characters and indenting.</p>
<p><a id="SQLRF56733"></a><span class="subhead3">ASCII&nbsp;</span>Specify <code dir="ltr">ASCII</code> to automatically escape any non-ASCII Unicode characters in the return character string, using standard ASCII Unicode escape sequences.</p>
<p class="subhead2"><a id="CJABHEEC"></a><a id="SQLRF56734"></a><span class="italic">JSON_query_wrapper_clause</span></p>
<p>Use this clause to control whether this function wraps the values matched by the path expression in an array wrapper&mdash;that is, encloses the sequence of values in square brackets (<code dir="ltr">[]</code>).</p>
<ul>
<li>
<p>Specify <code dir="ltr">WITHOUT</code> <code dir="ltr">WRAPPER</code> to omit the array wrapper. You can specify this clause only if the path expression matches a single JSON object or JSON array. This is the default.</p>
</li>
<li>
<p>Specify <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> to include the array wrapper. You must specify this clause if the path expression matches a single scalar value (a value that is not a JSON object or JSON array) or multiple values of any type.</p>
</li>
<li>
<p>Specifying the <code dir="ltr">WITH</code> <code dir="ltr">UNCONDITIONAL</code> <code dir="ltr">WRAPPER</code> clause is equivalent to specifying the <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> clause. The <code dir="ltr">UNCONDITIONAL</code> keyword is provided for semantic clarity.</p>
</li>
<li>
<p>Specify <code dir="ltr">WITH</code> <code dir="ltr">CONDITIONAL</code> <code dir="ltr">WRAPPER</code> to include the array wrapper only if the path expression matches a single scalar value or multiple values of any type. If the path expression matches a single JSON object or JSON array, then the array wrapper is omitted.</p>
</li>
</ul>
<p>The <code dir="ltr">ARRAY</code> keyword is optional and is provided for semantic clarity.</p>
<p>If the function returns a single scalar value, or multiple values of any type, and you do not specify <code dir="ltr">WITH</code> <code dir="ltr">[UNCONDITIONAL</code> <code dir="ltr">|</code> <code dir="ltr">CONDITIONAL]</code> <code dir="ltr">WRAPPER</code>, then the function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_query_on_error_clause</span></code> to override this default behavior. Refer to the <a href="#CJAJJCGH"><span class="xreftitleitalic"><span class="italic">JSON_query_on_error_clause</span></span></a>.</p>
<p class="subhead2"><a id="CJAJJCGH"></a><a id="SQLRF56735"></a><span class="italic">JSON_query_on_error_clause</span></p>
<p>Use this clause to specify the value returned by this function when any of the following errors occur:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not well-formed JSON data using strict or lax JSON syntax</p>
</li>
<li>
<p>No match is found when the JSON data is evaluated using the JSON path expression</p>
</li>
<li>
<p>The return value data type is not large enough to hold the return character string</p>
</li>
<li>
<p>The function matches a single scalar value or, multiple values of any type, and the <code dir="ltr">WITH</code> <code dir="ltr">[UNCONDITIONAL</code> <code dir="ltr">|</code> <code dir="ltr">CONDITIONAL]</code> <code dir="ltr">WRAPPER</code> clause is not specified</p>
</li>
</ul>
<p>You can specify the following clauses:</p>
<ul>
<li>
<p><code dir="ltr">NULL</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns null when an error occurs. This is the default.</p>
</li>
<li>
<p><code dir="ltr">ERROR</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns the appropriate Oracle error when an error occurs.</p>
</li>
<li>
<p><code dir="ltr">EMPTY</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns an empty JSON array (<code dir="ltr">&#39;[]&#39;</code>) when an error occurs.</p>
</li>
</ul>
<p class="subhead1"><a id="SQLRF56736"></a>Examples</p>
<p>The following query returns the context item, or the specified string of JSON data. The path expression matches a single JSON object, which does not require an array wrapper. Note that the JSON data is converted to strict JSON syntax in the returned value&mdash;that is, the object property names are enclosed in double quotation marks.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;{a:100, b:200, c:300}&#39;, &#39;$&#39;) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
{&#34;a&#34;:100,&#34;b&#34;:200,&#34;c&#34;:300}
</pre>
<p>The following query returns the value of the member with property name <code dir="ltr">a</code>. The path expression matches a scalar value, which must be enclosed in an array wrapper. Therefore, the <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> clause is specified.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;{a:100, b:200, c:300}&#39;, &#39;$.a&#39; WITH WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[100]
</pre>
<p>The following query returns the values of all object members. The path expression matches multiple values, which together must be enclosed in an array wrapper. Therefore, the <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> clause is specified.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;{a:100, b:200, c:300}&#39;, &#39;$.*&#39; WITH WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[100,200,300]
</pre>
<p>The following query returns the context item, or the specified string of JSON data. The path expression matches a single JSON array, which does not require an array wrapper.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[0,1,2,3,4]&#39;, &#39;$&#39;) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[0,1,2,3,4]
</pre>
<p>The following query is similar to the previous query, except the <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> clause is specified. Therefore, the JSON array is wrapped in an array wrapper.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[0,1,2,3,4]&#39;, &#39;$&#39; WITH WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[[0,1,2,3,4]]
</pre>
<p>The following query returns all elements in a JSON array. The path expression matches multiple values, which together must be enclosed in an array wrapper. Therefore, the <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> clause is specified.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[0,1,2,3,4]&#39;, &#39;$[*]&#39; WITH WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[0,1,2,3,4]
</pre>
<p>The following query returns the elements at indexes 0, 3 through 5, and 7 in a JSON array. The path expression matches multiple values, which together must be enclosed in an array wrapper. Therefore, the <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> clause is specified.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[0,1,2,3,4,5,6,7,8]&#39;, &#39;$[0, 3 TO 5, 7]&#39; WITH WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[0,3,4,5,7]
</pre>
<p>The following query returns the fourth element in a JSON array. The path expression matches a scalar value, which must be enclosed in an array wrapper. Therefore, the <code dir="ltr">WITH</code> <code dir="ltr">WRAPPER</code> clause is specified.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[0,1,2,3,4]&#39;, &#39;$[3]&#39; WITH WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[3]
</pre>
<p>The following query returns the first element in a JSON array. The <code dir="ltr">WITH</code> <code dir="ltr">CONDITIONAL</code> <code dir="ltr">WRAPPER</code> clause is specified and the path expression matches a single JSON object. Therefore, the value returned is not wrapped in an array. Note that the JSON data is converted to strict JSON syntax in the returned value&mdash;that is, the object property name is enclosed in double quotation marks.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[{a:100},{b:200},{c:300}]&#39;, &#39;$[0]&#39;
       WITH CONDITIONAL WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
{&#34;a&#34;:100}
</pre>
<p>The following query returns all elements in a JSON array. The <code dir="ltr">WITH</code> <code dir="ltr">CONDITIONAL</code> <code dir="ltr">WRAPPER</code> clause is specified and the path expression matches multiple JSON objects. Therefore, the value returned is wrapped in an array.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[{&#34;a&#34;:100},{&#34;b&#34;:200},{&#34;c&#34;:300}]&#39;, &#39;$[*]&#39;
       WITH CONDITIONAL WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[{&#34;a&#34;:100},{&#34;b&#34;:200},{&#34;c&#34;:300}]
</pre>
<p>The following query is similar to the previous query, except that the value returned is of data type <code dir="ltr">VARCHAR2(100)</code>.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[{&#34;a&#34;:100},{&#34;b&#34;:200},{&#34;c&#34;:300}]&#39;, &#39;$[*]&#39;
       RETURNING VARCHAR2(100) WITH CONDITIONAL WRAPPER) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[{&#34;a&#34;:100},{&#34;b&#34;:200},{&#34;c&#34;:300}]
</pre>
<p>The following query returns the fourth element in a JSON array. However, the supplied JSON array does not contain a fourth element, which results in an error. The <code dir="ltr">EMPTY</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> clause is specified. Therefore, the query returns an empty JSON array.</p>
<pre dir="ltr">SELECT JSON_QUERY(&#39;[{&#34;a&#34;:100},{&#34;b&#34;:200},{&#34;c&#34;:300}]&#39;, &#39;$[3]&#39;
       EMPTY ON ERROR) AS value
  FROM DUAL;

VALUE
--------------------------------------------------------------------------------
[]
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="functions090.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="functions092.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>