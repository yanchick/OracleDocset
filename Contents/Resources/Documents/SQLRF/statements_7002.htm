<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-103663"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/CREATE%20TABLE"></a><title>CREATE TABLE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:50Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="statements_7001.htm" title="Previous" type="text/html"/>
<link rel="Next" href="statements_7003.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">452/555</span> <!-- End Header --><a id="i2095331"></a>
<div id="SQLRF01402" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h1 class="refsect1">CREATE TABLE <a id="sthref5479"></a></h1>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5480"></a>Purpose</p>
<p><a id="sthref5481"></a><a id="sthref5482"></a><a id="sthref5483"></a>Us<a id="sthref5484"></a><a id="sthref5485"></a><a id="sthref5486"></a><a id="sthref5487"></a><a id="sthref5488"></a><a id="sthref5489"></a><a id="sthref5490"></a>e the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement to create one of the following types of tables:</p>
<ul>
<li>
<p>A <span class="bold">relational table</span>, which is the basic structure to hold user data.</p>
</li>
<li>
<p>An <span class="bold">object table</span>, which is a table that uses an object type for a column definition. An object table is explicitly defined to hold object instances of a particular type.</p>
</li>
</ul>
<p>You can also create an object type and then use it in a column when creating a relational table.</p>
<p>Tables are created with no data unless a subquery is specified. You can add rows to a table with the <code dir="ltr">INSERT</code> statement. After creating a table, you can define additional columns, partitions, and integrity constraints with the <code dir="ltr">ADD</code> clause of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement. You can change the definition of an existing column or partition with the <code dir="ltr">MODIFY</code> clause of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN015" href="../ADMIN/tables.htm#ADMIN015"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> and <a href="statements_8001.htm#BABHJHEB">CREATE TYPE</a> for more information about creating objects</p>
</li>
<li>
<p><a href="statements_3001.htm#CJAHHIBI">ALTER TABLE</a> and <a href="statements_9003.htm#i2061306">DROP TABLE</a> for information on modifying and dropping tables</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5491"></a>Additional Topics</p>
<ul>
<li>
<p><a href="#i2235043">Prerequisites</a></p>
</li>
<li>
<p><a href="#i2201774">Syntax</a></p>
</li>
<li>
<p><a href="#i2157251">Semantics</a></p>
</li>
<li>
<p><a href="#i2062833">Examples</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2235043"></a>Prerequisites</p>
<p>To create a <span class="bold">relational table</span> in your own schema, you must have the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> system privilege. To create a table in another user&#39;s schema, you must have the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> system privilege. Also, the owner of the schema to contain the table must have either space quota on the tablespace to contain the table or the <code dir="ltr">UNLIMITED</code> <code dir="ltr">TABLESPACE</code> system privilege.</p>
<p>In addition to these table privileges, to create an object table or a relational table with an object type column, the owner of the table must have the <code dir="ltr">EXECUTE</code> object privilege in order to access all types referenced by the table, or you must have the <code dir="ltr">EXECUTE</code> <code dir="ltr">ANY</code> <code dir="ltr">TYPE</code> system privilege. These privileges must be granted explicitly and not acquired through a role.</p>
<p>Additionally, if the table owner intends to grant access to the table to other users, then the owner must have been granted the <code dir="ltr">EXECUTE</code> object privilege on the referenced types <code dir="ltr">WITH</code> <code dir="ltr">GRANT</code> <code dir="ltr">OPTION</code>, or have the <code dir="ltr">EXECUTE</code> <code dir="ltr">ANY</code> <code dir="ltr">TYPE</code> system privilege <code dir="ltr">WITH</code> <code dir="ltr">ADMIN</code> <code dir="ltr">OPTION</code>. Without these privileges, the table owner has insufficient privileges to grant access to the table to other users.</p>
<p>To enable a unique or primary key constraint, you must have the privileges necessary to create an index on the table. You need these privileges because Oracle Database creates an index on the columns of the unique or primary key in the schema containing the table.</p>
<p>To specify an edition in the <code dir="ltr"><span class="codeinlineitalic">evaluation_edition_clause</span></code> or the <code dir="ltr"><span class="codeinlineitalic">unusable_editions_clause</span></code>, you must have the <code dir="ltr">USE</code> privilege on the edition.</p>
<p>To specify the <code dir="ltr"><span class="codeinlineitalic">zonemap_clause</span></code>, you must have the permissions necessary to create a zone map. Refer to the <a href="statements_6004.htm#CACECGEF">&#34;Prerequisites&#34;</a> section in the documentation on <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">ZONEMAP</code>.</p>
<p>To create an <span class="bold">external table</span>, you must have the required read and write operating system privileges on the appropriate operating system directories. You must have the <code dir="ltr">READ</code> object privilege on the database directory object corresponding to the operating system directory in which the external data resides. You must also have the <code dir="ltr">WRITE</code> object privilege on the database directory in which the files will reside if you specify a log file or bad file in the <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code> or if you unload data into an external table from a database table by specifying the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause.</p>
<p>To create an <span class="bold">XMLType table</span> in a different database schema from your own, you must have not only privilege <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> but also privilege <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">INDEX</code>. This is because a unique index is created on column <code dir="ltr">OBJECT_ID</code> when you create the table. Column <code dir="ltr">OBJECT_ID</code> stores a system-generated object identifier.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="statements_5013.htm#i2062403">CREATE INDEX</a></p>
</li>
<li>
<p><a class="olink ADMIN01503" href="../ADMIN/tables.htm#ADMIN01503"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about the privileges required to create tables using types</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2201774"></a>Syntax</p>
<p class="subhead2"><a id="SQLRF54364"></a><span class="italic">create_table</span>::=</p>
<img width="720" height="91" src="img/create_table.gif" alt="Description of create_table.gif follows"/><br/>
<a id="sthref5492" href="img_text/create_table.htm">Description of the illustration &#39;&#39;create_table.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2149006"><span class="xreftitleitalic"><span class="italic">relational_table</span>::=</span></a>, <a href="#i2214901"><span class="xreftitleitalic"><span class="italic">object_table</span> ::=</span></a>, <a href="#i2234923"><span class="xreftitleitalic"><span class="italic">XMLType_table</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2149006"></a><a id="SQLRF54365"></a><span class="italic">relational_table</span>::=<a id="sthref5493"></a><a id="sthref5494"></a></p>
<img width="596" height="135" src="img/relational_table.gif" alt="Description of relational_table.gif follows"/><br/>
<a id="sthref5495" href="img_text/relational_table.htm">Description of the illustration &#39;&#39;relational_table.gif&#39;&#39;</a><br/>
<br/>
<div class="infobox-note">
<p class="notep1">Note:</p>
Each of the clauses following the table name is optional for any given relational table. However, for every table you must at least specify either column names and data types using the <code dir="ltr"><span class="codeinlineitalic">relational_properties</span></code> clause or an <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause using the <code dir="ltr"><span class="codeinlineitalic">table_properties</span></code> clause.</div>
<p>(<a href="#i2146032"><span class="xreftitleitalic"><span class="italic">relational_properties</span>::=</span></a>, <a href="#i2126711"><span class="xreftitleitalic"><span class="italic">physical_properties</span>::=</span></a>, <a href="#i2126725"><span class="xreftitleitalic"><span class="italic">table_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2214901"></a><a id="SQLRF54366"></a><a href="#i2159410"><span class="xreftitleitalic"><span class="italic">object_table</span></span></a> ::=<a id="sthref5496"></a><a id="sthref5497"></a></p>
<img width="642" height="209" src="img/object_table.gif" alt="Description of object_table.gif follows"/><br/>
<a id="sthref5498" href="img_text/object_table.htm">Description of the illustration &#39;&#39;object_table.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2126754"><span class="xreftitleitalic"><span class="italic">object_table_substitution</span> ::=</span></a>, <a href="#i2126768"><span class="xreftitleitalic"><span class="italic">object_properties</span>::=</span></a>, <a href="#i2149035"><span class="xreftitleitalic"><span class="italic">oid_clause</span>::=</span></a>, <a href="#i2149044"><span class="xreftitleitalic"><span class="italic">oid_index_clause</span>::=</span></a>, <a href="#i2126711"><span class="xreftitleitalic"><span class="italic">physical_properties</span>::=</span></a>, <a href="#i2126725"><span class="xreftitleitalic"><span class="italic">table_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2234923"></a><a id="SQLRF54367"></a><a href="#i2129952"><span class="xreftitleitalic"><span class="italic">XMLType_table</span></span></a> ::=</p>
<img width="774" height="209" src="img/xmltype_table.gif" alt="Description of xmltype_table.gif follows"/><br/>
<a id="sthref5499" href="img_text/xmltype_table.htm">Description of the illustration &#39;&#39;xmltype_table.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2218838"><span class="xreftitleitalic"><span class="italic">XMLType_storage</span>::=</span></a>, <a href="#BABJDCGH"><span class="xreftitleitalic"><span class="italic">XMLSchema_spec</span>::=</span></a>, <a href="#BABFIGHD"><span class="xreftitleitalic"><span class="italic">XMLType_virtual_columns</span>::=</span></a>, <a href="#i2149035"><span class="xreftitleitalic"><span class="italic">oid_clause</span>::=</span></a>, <a href="#i2149044"><span class="xreftitleitalic"><span class="italic">oid_index_clause</span>::=</span></a>, <a href="#i2126711"><span class="xreftitleitalic"><span class="italic">physical_properties</span>::=</span></a>, <a href="#i2126725"><span class="xreftitleitalic"><span class="italic">table_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146032"></a><a id="SQLRF54368"></a><a href="#i2128561"><span class="xreftitleitalic"><span class="italic">relational_properties</span></span></a>::=</p>
<img width="268" height="220" src="img/relational_properties.gif" alt="Description of relational_properties.gif follows"/><br/>
<a id="sthref5500" href="img_text/relational_properties.htm">Description of the illustration &#39;&#39;relational_properties.gif&#39;&#39;</a><br/>
<br/>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can specify these clauses in any order with the following exception: You must specify at least one <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> or <code dir="ltr"><span class="codeinlineitalic">virtual_column_definition</span></code> before you specify <code dir="ltr"><span class="codeinlineitalic">period_definition</span></code>. You can specify <code dir="ltr"><span class="codeinlineitalic">period_definition</span></code> only once.</div>
<p>(<a href="#CEGEDHJE"><span class="xreftitleitalic"><span class="italic">column_definition</span>::=</span></a>, <a href="#BABCHBHE"><span class="xreftitleitalic"><span class="italic">virtual_column_definition</span> ::=</span></a>, <a href="#CJAEJCEG"><span class="xreftitleitalic"><span class="italic">period_definition</span>::=</span></a>, <a href="clauses002.htm#CJAEDFIB"><span class="xreftitleitalic"><span class="italic">constraint</span>::=</span></a>, <a href="#i2126822"><span class="xreftitleitalic"><span class="italic">supplemental_logging_props</span> ::=</span></a>)</p>
<p class="subhead2"><a id="CEGEDHJE"></a><a id="SQLRF54369"></a><a href="#CEGBACAG"><span class="xreftitleitalic"><span class="italic">column_definition</span></span></a>::=</p>
<img width="810" height="206" src="img/column_definition.gif" alt="Description of column_definition.gif follows"/><br/>
<a id="sthref5501" href="img_text/column_definition.htm">Description of the illustration &#39;&#39;column_definition.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAECCFH"><span class="xreftitleitalic"><span class="italic">identity_clause</span>::=</span></a>, <a href="#CEGJIIIH"><span class="xreftitleitalic"><span class="italic">encryption_spec</span> ::=</span></a>, <a href="clauses002.htm#CJAEDFIB"><span class="xreftitleitalic"><span class="italic">constraint</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJAECCFH"></a><a id="SQLRF55655"></a><a href="#CJAHJHJC"><span class="xreftitleitalic"><span class="italic">identity_clause</span></span></a>::=</p>
<img width="787" height="98" src="img/identity_clause.gif" alt="Description of identity_clause.gif follows"/><br/>
<a id="sthref5502" href="img_text/identity_clause.htm">Description of the illustration &#39;&#39;identity_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAJIFAG"></a><a id="SQLRF55656"></a><a href="#CJAIJGEG"><span class="xreftitleitalic"><span class="italic">identity_options</span></span></a>::=</p>
<img width="395" height="435" src="img/identity_options.gif" alt="Description of identity_options.gif follows"/><br/>
<a id="sthref5503" href="img_text/identity_options.htm">Description of the illustration &#39;&#39;identity_options.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABCHBHE"></a><a id="SQLRF54370"></a><a href="#BABIJABG"><span class="xreftitleitalic"><span class="italic">virtual_column_definition</span></span></a> ::=</p>
<img width="798" height="154" src="img/virtual_column_definition.gif" alt="Description of virtual_column_definition.gif follows"/><br/>
<a id="sthref5504" href="img_text/virtual_column_definition.htm">Description of the illustration &#39;&#39;virtual_column_definition.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJACADGB"><span class="xreftitleitalic"><span class="italic"><span class="italic">evaluation_edition_clause</span></span>::=</span></a>, <a href="#CJACHEDG"><span class="xreftitleitalic"><span class="italic">unusable_editions_clause</span>::=</span></a>, <a href="clauses002.htm#CJAEDFIB"><span class="xreftitleitalic"><span class="italic">constraint</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJACADGB"></a><a id="SQLRF56248"></a><span class="italic"><a href="#CJAFBHGE"><span class="xreftitleboldital"><span class="italic">evaluation_edition_clause</span></span></a></span>::=</p>
<img width="352" height="91" src="img/evaluation_edition_clause.gif" alt="Description of evaluation_edition_clause.gif follows"/><br/>
<a id="sthref5505" href="img_text/evaluation_edition_clause.htm">Description of the illustration &#39;&#39;evaluation_edition_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJACHEDG"></a><a id="SQLRF56387"></a><a href="#CJAEAAJC"><span class="xreftitleitalic"><span class="italic">unusable_editions_clause</span></span></a>::=</p>
<img width="482" height="199" src="img/unusable_editions_clause.gif" alt="Description of unusable_editions_clause.gif follows"/><br/>
<a id="sthref5506" href="img_text/unusable_editions_clause.htm">Description of the illustration &#39;&#39;unusable_editions_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAEJCEG"></a><a id="SQLRF56430"></a><a href="#CJADHJHB"><span class="xreftitleitalic"><span class="italic">period_definition</span></span></a>::=</p>
<img width="629" height="46" src="img/period_definition.gif" alt="Description of period_definition.gif follows"/><br/>
<a id="sthref5507" href="img_text/period_definition.htm">Description of the illustration &#39;&#39;period_definition.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGJIIIH"></a><a id="SQLRF54371"></a><a href="#CEGDFHBD"><span class="xreftitleitalic"><span class="italic">encryption_spec</span></span></a> ::=</p>
<img width="553" height="121" src="img/encryption_spec.gif" alt="Description of encryption_spec.gif follows"/><br/>
<a id="sthref5508" href="img_text/encryption_spec.htm">Description of the illustration &#39;&#39;encryption_spec.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2126754"></a><a id="SQLRF54372"></a><a href="#i2159431"><span class="xreftitleitalic"><span class="italic">object_table_substitution</span></span></a> ::=</p>
<img width="390" height="46" src="img/object_table_substitution.gif" alt="Description of object_table_substitution.gif follows"/><br/>
<a id="sthref5509" href="img_text/object_table_substitution.htm">Description of the illustration &#39;&#39;object_table_substitution.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2126768"></a><a id="SQLRF54373"></a><a href="#i2159490"><span class="xreftitleitalic"><span class="italic">object_properties</span></span></a>::=</p>
<img width="539" height="202" src="img/object_properties.gif" alt="Description of object_properties.gif follows"/><br/>
<a id="sthref5510" href="img_text/object_properties.htm">Description of the illustration &#39;&#39;object_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="clauses002.htm#CJAEDFIB"><span class="xreftitleitalic"><span class="italic">constraint</span>::=</span></a>, <a href="#i2126822"><span class="xreftitleitalic"><span class="italic">supplemental_logging_props</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2149035"></a><a id="SQLRF54374"></a><a href="#i2159502"><span class="xreftitleitalic"><span class="italic">oid_clause</span></span></a>::=</p>
<img width="416" height="58" src="img/oid_clause.gif" alt="Description of oid_clause.gif follows"/><br/>
<a id="sthref5511" href="img_text/oid_clause.htm">Description of the illustration &#39;&#39;oid_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2149044"></a><a id="SQLRF54375"></a><a href="#i2159516"><span class="xreftitleitalic"><span class="italic">oid_index_clause</span></span></a>::=</p>
<img width="503" height="70" src="img/oid_index_clause.gif" alt="Description of oid_index_clause.gif follows"/><br/>
<a id="sthref5512" href="img_text/oid_index_clause.htm">Description of the illustration &#39;&#39;oid_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129582"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2126711"></a><a id="SQLRF54376"></a><a href="#i2128663"><span class="xreftitleitalic"><span class="italic">physical_properties</span></span></a>::=</p>
<img width="912" height="248" src="img/physical_properties.gif" alt="Description of physical_properties.gif follows"/><br/>
<a id="sthref5513" href="img_text/physical_properties.htm">Description of the illustration &#39;&#39;physical_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGBDDBC"><span class="xreftitleitalic"><span class="italic">deferred_segment_creation</span>::=</span></a>, <a href="#i2214991"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span> ::=</span></a>, <a href="#i2129627"><span class="xreftitleitalic"><span class="italic">table_compression</span>::=</span></a>, <a href="#CEGBJJJG"><span class="xreftitleitalic"><span class="italic">inmemory_table_clause</span>::=</span></a>, <a href="#CJAIDBJE"><span class="xreftitleitalic"><span class="italic">ilm_clause</span>::=</span></a>, <a href="#CEGBBCEF"><span class="xreftitleitalic"><span class="italic">heap_org_table_clause</span>::=</span></a>, <a href="#i2129638"><span class="xreftitleitalic"><span class="italic">index_org_table_clause</span> ::=</span></a>, <a href="#i2129649"><span class="xreftitleitalic"><span class="italic">external_table_clause</span> ::=</span></a>)</p>
<p class="subhead2"><a id="CEGBDDBC"></a><a id="SQLRF54377"></a><a href="#CEGJHDEB"><span class="xreftitleitalic"><span class="italic">deferred_segment_creation</span></span></a>::=</p>
<img width="307" height="58" src="img/deferred_segment_creation.gif" alt="Description of deferred_segment_creation.gif follows"/><br/>
<a id="sthref5514" href="img_text/deferred_segment_creation.htm">Description of the illustration &#39;&#39;deferred_segment_creation.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2214991"></a><a id="SQLRF54378"></a><a href="#i2128666"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span></span></a> ::=</p>
<img width="263" height="103" src="img/segment_attributes_clause.gif" alt="Description of segment_attributes_clause.gif follows"/><br/>
<a id="sthref5515" href="img_text/segment_attributes_clause.htm">Description of the illustration &#39;&#39;segment_attributes_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129582"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span>::=</span></a>, <a href="#i2129672"><span class="xreftitleitalic"><span class="italic">logging_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2129582"></a><a id="SQLRF54379"></a><a href="#i2128669"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span></span></a>::=</p>
<img width="268" height="147" src="img/physical_attributes_clause.gif" alt="Description of physical_attributes_clause.gif follows"/><br/>
<a id="sthref5516" href="img_text/physical_attributes_clause.htm">Description of the illustration &#39;&#39;physical_attributes_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="clauses009.htm#CJACEJGB"><span class="xreftitleitalic"><span class="italic">storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2129627"></a><a id="SQLRF54380"></a><a href="#i2128733"><span class="xreftitleitalic"><span class="italic">table_compression</span></span></a>::=</p>
<img width="949" height="263" src="img/table_compression.gif" alt="Description of table_compression.gif follows"/><br/>
<a id="sthref5517" href="img_text/table_compression.htm">Description of the illustration &#39;&#39;table_compression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGBJJJG"></a><a id="SQLRF56758"></a><a href="#CEGBCAAE"><span class="xreftitleitalic"><span class="italic">inmemory_table_clause</span></span></a>::=</p>
<img width="531" height="79" src="img/inmemory_table_clause.gif" alt="Description of inmemory_table_clause.gif follows"/><br/>
<a id="sthref5518" href="img_text/inmemory_table_clause.htm">Description of the illustration &#39;&#39;inmemory_table_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGHDDGE"><span class="xreftitleitalic"><span class="italic">inmemory_parameters</span>::=</span></a>, <a href="#CEGFJCBF"><span class="xreftitleitalic"><span class="italic">inmemory_column_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGHDDGE"></a><a id="SQLRF56759"></a><a href="#CEGIDFIC"><span class="xreftitleitalic"><span class="italic">inmemory_parameters</span></span></a>::=</p>
<img width="735" height="37" src="img/inmemory_parameters.gif" alt="Description of inmemory_parameters.gif follows"/><br/>
<a id="sthref5519" href="img_text/inmemory_parameters.htm">Description of the illustration &#39;&#39;inmemory_parameters.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGJJGCD"><span class="xreftitleitalic"><span class="italic">inmemory_memcompress</span>::=</span></a>, <a href="#CEGFADAI"><span class="xreftitleitalic"><span class="italic">inmemory_priority</span>::=</span></a>, <a href="#CEGHBAEI"><span class="xreftitleitalic"><span class="italic">inmemory_distribute</span>::=</span></a>, <a href="#CEGIBBBA"><span class="xreftitleitalic"><span class="italic">inmemory_duplicate</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGJJGCD"></a><a id="SQLRF56948"></a><a href="#CEGEIIGJ"><span class="xreftitleitalic"><span class="italic">inmemory_memcompress</span></span></a>::=</p>
<img width="496" height="159" src="img/inmemory_memcompress.gif" alt="Description of inmemory_memcompress.gif follows"/><br/>
<a id="sthref5520" href="img_text/inmemory_memcompress.htm">Description of the illustration &#39;&#39;inmemory_memcompress.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGFADAI"></a><a id="SQLRF56949"></a><a href="#CEGJGCDF"><span class="xreftitleitalic"><span class="italic">inmemory_priority</span></span></a>::=</p>
<img width="208" height="156" src="img/inmemory_priority.gif" alt="Description of inmemory_priority.gif follows"/><br/>
<a id="sthref5521" href="img_text/inmemory_priority.htm">Description of the illustration &#39;&#39;inmemory_priority.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGHBAEI"></a><a id="SQLRF56950"></a><a href="#CEGCEDJH"><span class="xreftitleitalic"><span class="italic">inmemory_distribute</span></span></a>::=</p>
<img width="395" height="143" src="img/inmemory_distribute.gif" alt="Description of inmemory_distribute.gif follows"/><br/>
<a id="sthref5522" href="img_text/inmemory_distribute.htm">Description of the illustration &#39;&#39;inmemory_distribute.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGIBBBA"></a><a id="SQLRF56951"></a><a href="#CEGFFGHA"><span class="xreftitleitalic"><span class="italic">inmemory_duplicate</span></span></a>::=</p>
<img width="232" height="79" src="img/inmemory_duplicate.gif" alt="Description of inmemory_duplicate.gif follows"/><br/>
<a id="sthref5523" href="img_text/inmemory_duplicate.htm">Description of the illustration &#39;&#39;inmemory_duplicate.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGFJCBF"></a><a id="SQLRF56760"></a><a href="#CEGJEEBB"><span class="xreftitleitalic"><span class="italic">inmemory_column_clause</span></span></a>::=</p>
<img width="527" height="91" src="img/inmemory_column_clause.gif" alt="Description of inmemory_column_clause.gif follows"/><br/>
<a id="sthref5524" href="img_text/inmemory_column_clause.htm">Description of the illustration &#39;&#39;inmemory_column_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGJJGCD"><span class="xreftitleitalic"><span class="italic">inmemory_memcompress</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJAIDBJE"></a><a id="SQLRF56581"></a><a href="#CJAIIDEA"><span class="xreftitleitalic"><span class="italic">ilm_clause</span></span></a>::=</p>
<img width="378" height="220" src="img/ilm_clause.gif" alt="Description of ilm_clause.gif follows"/><br/>
<a id="sthref5525" href="img_text/ilm_clause.htm">Description of the illustration &#39;&#39;ilm_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56582"></a><a href="#CJAIHFAD"><span class="xreftitleitalic"><span class="italic">ilm_policy_clause</span></span></a>::=</p>
<img width="195" height="58" src="img/ilm_policy_clause.gif" alt="Description of ilm_policy_clause.gif follows"/><br/>
<a id="sthref5526" href="img_text/ilm_policy_clause.htm">Description of the illustration &#39;&#39;ilm_policy_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGIBBHB"><span class="xreftitleitalic"><span class="italic">ilm_compression_policy</span>::=</span></a>, <a href="#CEGDJHIA"><span class="xreftitleitalic"><span class="italic">ilm_tiering_policy</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGIBBHB"></a><a id="SQLRF57073"></a><span class="italic">ilm_compression_policy</span>::=</p>
<img width="767" height="156" src="img/ilm_compression_policy.gif" alt="Description of ilm_compression_policy.gif follows"/><br/>
<a id="sthref5527" href="img_text/ilm_compression_policy.htm">Description of the illustration &#39;&#39;ilm_compression_policy.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129627"><span class="xreftitleitalic"><span class="italic">table_compression</span>::=</span></a>, <a href="#CEGJAIDA"><span class="xreftitleitalic"><span class="italic">ilm_time_period</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGDJHIA"></a><a id="SQLRF57074"></a><span class="italic">ilm_tiering_policy</span>::=</p>
<img width="926" height="208" src="img/ilm_tiering_policy.gif" alt="Description of ilm_tiering_policy.gif follows"/><br/>
<a id="sthref5528" href="img_text/ilm_tiering_policy.htm">Description of the illustration &#39;&#39;ilm_tiering_policy.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGJAIDA"><span class="xreftitleitalic"><span class="italic">ilm_time_period</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGJAIDA"></a><a id="SQLRF57075"></a><span class="italic">ilm_time_period</span>::=</p>
<img width="216" height="187" src="img/ilm_time_period.gif" alt="Description of ilm_time_period.gif follows"/><br/>
<a id="sthref5529" href="img_text/ilm_time_period.htm">Description of the illustration &#39;&#39;ilm_time_period.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2126725"></a><a id="SQLRF54381"></a><a href="#i2128916"><span class="xreftitleitalic"><span class="italic">table_properties</span></span></a>::=</p>
<img width="753" height="293" src="img/table_properties.gif" alt="Description of table_properties.gif follows"/><br/>
<a id="sthref5530" href="img_text/table_properties.htm">Description of the illustration &#39;&#39;table_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2146083"><span class="xreftitleitalic"><span class="italic">column_properties</span>::=</span></a>, <a href="#CJAJBJII"><span class="xreftitleitalic"><span class="italic"><span class="italic">indexing_clause</span></span>::=</span></a>, <a href="#i2129707"><span class="xreftitleitalic"><span class="italic">table_partitioning_clauses</span> ::=</span></a>, <a href="#CEGGFJJD"><span class="xreftitleitalic"><span class="italic">attribute_clustering_clause</span>::=</span></a>, <a href="#i2129718"><span class="xreftitleitalic"><span class="italic">parallel_clause</span> ::=</span></a>, <a href="#i2129729"><span class="xreftitleitalic"><span class="italic">enable_disable_clause</span> ::=</span></a>, <a href="#i2204697"><span class="xreftitleitalic"><span class="italic">row_movement_clause</span> ::=</span></a>, <a href="#BABDGEHC"><span class="xreftitleitalic"><span class="italic">flashback_archive_clause</span>::=</span></a>, <a href="statements_10002.htm#i2126435"><span class="xreftitleitalic"><span class="italic">subquery</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146083"></a><a id="SQLRF54382"></a><a href="#i2128918"><span class="xreftitleitalic"><span class="italic">column_properties</span></span></a>::=</p>
<img width="525" height="202" src="img/column_properties.gif" alt="Description of column_properties.gif follows"/><br/>
<a id="sthref5531" href="img_text/column_properties.htm">Description of the illustration &#39;&#39;column_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129742"><span class="xreftitleitalic"><span class="italic">object_type_col_properties</span>::=</span></a>, <a href="#i2215015"><span class="xreftitleitalic"><span class="italic">nested_table_col_properties</span> ::=</span></a>, <a href="#i2149052"><span class="xreftitleitalic"><span class="italic">varray_col_properties</span> ::=</span></a>, <a href="#i2218765"><span class="xreftitleitalic"><span class="italic">LOB_storage_clause</span>::=</span></a>, <a href="#i2129787"><span class="xreftitleitalic"><span class="italic">LOB_partition_storage</span>::=</span></a>, <a href="#i2129798"><span class="xreftitleitalic"><span class="italic">XMLType_column_properties</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2129742"></a><a id="SQLRF54383"></a><a href="#i2128922"><span class="xreftitleitalic"><span class="italic">object_type_col_properties</span></span></a>::=</p>
<img width="329" height="27" src="img/object_type_col_properties.gif" alt="Description of object_type_col_properties.gif follows"/><br/>
<a id="sthref5532" href="img_text/object_type_col_properties.htm">Description of the illustration &#39;&#39;object_type_col_properties.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2215008"></a><a id="SQLRF54384"></a><span class="italic">substitutable_column_clause</span>::=</p>
<img width="522" height="98" src="img/substitutable_column_clause.gif" alt="Description of substitutable_column_clause.gif follows"/><br/>
<a id="sthref5533" href="img_text/substitutable_column_clause.htm">Description of the illustration &#39;&#39;substitutable_column_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2215015"></a><a id="SQLRF54385"></a><a href="#i2129048"><span class="xreftitleitalic"><span class="italic">nested_table_col_properties</span></span></a> ::=<a id="sthref5534"></a></p>
<img width="671" height="345" src="img/nested_table_col_properties.gif" alt="Description of nested_table_col_properties.gif follows"/><br/>
<a id="sthref5535" href="img_text/nested_table_col_properties.htm">Description of the illustration &#39;&#39;nested_table_col_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2215008"><span class="xreftitleitalic"><span class="italic">substitutable_column_clause</span>::=</span></a>, <a href="#i2126768"><span class="xreftitleitalic"><span class="italic">object_properties</span>::=</span></a>, <a href="#i2126711"><span class="xreftitleitalic"><span class="italic">physical_properties</span>::=</span></a>, <a href="#i2146083"><span class="xreftitleitalic"><span class="italic">column_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2149052"></a><a id="SQLRF54386"></a><a href="#i2143624"><span class="xreftitleitalic"><span class="italic">varray_col_properties</span></span></a> ::=<a id="sthref5536"></a></p>
<img width="569" height="79" src="img/varray_col_properties.gif" alt="Description of varray_col_properties.gif follows"/><br/>
<a id="sthref5537" href="img_text/varray_col_properties.htm">Description of the illustration &#39;&#39;varray_col_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2215008"><span class="xreftitleitalic"><span class="italic">substitutable_column_clause</span>::=</span></a>, <a href="#BABCACAI"><span class="xreftitleitalic"><span class="italic">varray_storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABCACAI"></a><a id="SQLRF54387"></a><span class="italic">varray_storage_clause</span>::=</p>
<img width="746" height="95" src="img/varray_storage_clause.gif" alt="Description of varray_storage_clause.gif follows"/><br/>
<a id="sthref5538" href="img_text/varray_storage_clause.htm">Description of the illustration &#39;&#39;varray_storage_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2149089"><span class="xreftitleitalic"><span class="italic">LOB_parameters</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2218765"></a><a id="SQLRF54388"></a><a href="#i2128940"><span class="xreftitleitalic"><span class="italic">LOB_storage_clause</span></span></a>::=<a id="sthref5539"></a></p>
<img width="652" height="239" src="img/lob_storage_clause.gif" alt="Description of lob_storage_clause.gif follows"/><br/>
<a id="sthref5540" href="img_text/lob_storage_clause.htm">Description of the illustration &#39;&#39;lob_storage_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BABGHDEA"><span class="xreftitleitalic"><span class="italic">LOB_storage_parameters</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABGHDEA"></a><a id="SQLRF54389"></a><span class="italic">LOB_storage_parameters</span>::=</p>
<img width="374" height="123" src="img/lob_storage_parameters.gif" alt="Description of lob_storage_parameters.gif follows"/><br/>
<a id="sthref5541" href="img_text/lob_storage_parameters.htm">Description of the illustration &#39;&#39;lob_storage_parameters.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2149089"><span class="xreftitleitalic"><span class="italic">LOB_parameters</span>::=</span></a>, <a href="clauses009.htm#CJACEJGB"><span class="xreftitleitalic"><span class="italic">storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2149089"></a><a id="SQLRF54390"></a><a href="#BABFFFBE"><span class="xreftitleitalic"><span class="italic">LOB_parameters</span></span></a>::=</p>
<img width="392" height="425" src="img/lob_parameters.gif" alt="Description of lob_parameters.gif follows"/><br/>
<a id="sthref5542" href="img_text/lob_parameters.htm">Description of the illustration &#39;&#39;lob_parameters.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BABFCEJE"><span class="xreftitleitalic"><span class="italic">LOB_deduplicate_clause</span>::=</span></a>, <a href="#BABFHIFJ"><span class="xreftitleitalic"><span class="italic">LOB_compression_clause</span>::=</span></a>, <a href="#CEGJIIIH"><span class="xreftitleitalic"><span class="italic">encryption_spec</span> ::=</span></a>, <a href="clauses005.htm#CJAHABGF"><span class="xreftitleitalic"><span class="italic">logging_clause</span>::=</span></a>)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Several of the LOB parameters are no longer needed if you are using SecureFiles for LOB storage. Refer to <a href="#i2128955"><span class="xreftitleitalic"><span class="italic">LOB_storage_parameters</span></span></a> for more information.</div>
<p class="subhead2"><a id="BABEBCJJ"></a><a id="SQLRF54391"></a><a href="#BABHECFH"><span class="xreftitleitalic"><span class="italic">LOB_retention_clause</span></span></a>::=</p>
<img width="296" height="143" src="img/lob_retention_clause.gif" alt="Description of lob_retention_clause.gif follows"/><br/>
<a id="sthref5543" href="img_text/lob_retention_clause.htm">Description of the illustration &#39;&#39;lob_retention_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABFCEJE"></a><a id="SQLRF54392"></a><a href="#BABHHFDA"><span class="xreftitleitalic"><span class="italic">LOB_deduplicate_clause</span></span></a>::=</p>
<img width="183" height="58" src="img/lob_deduplicate_clause.gif" alt="Description of lob_deduplicate_clause.gif follows"/><br/>
<a id="sthref5544" href="img_text/lob_deduplicate_clause.htm">Description of the illustration &#39;&#39;lob_deduplicate_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABFHIFJ"></a><a id="SQLRF54393"></a><a href="#BABIJJHI"><span class="xreftitleitalic"><span class="italic">LOB_compression_clause</span></span></a>::=</p>
<img width="291" height="143" src="img/lob_compression_clause.gif" alt="Description of lob_compression_clause.gif follows"/><br/>
<a id="sthref5545" href="img_text/lob_compression_clause.htm">Description of the illustration &#39;&#39;lob_compression_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2129672"></a><a id="SQLRF54394"></a><span class="italic">logging_clause</span>::=</p>
<img width="237" height="91" src="img/logging_clause.gif" alt="Description of logging_clause.gif follows"/><br/>
<a id="sthref5546" href="img_text/logging_clause.htm">Description of the illustration &#39;&#39;logging_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2129787"></a><a id="SQLRF54395"></a><a href="#BABEACDC"><span class="xreftitleitalic"><span class="italic">LOB_partition_storage</span></span></a>::=</p>
<img width="537" height="178" src="img/lob_partition_storage.gif" alt="Description of lob_partition_storage.gif follows"/><br/>
<a id="sthref5547" href="img_text/lob_partition_storage.htm">Description of the illustration &#39;&#39;lob_partition_storage.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2218765"><span class="xreftitleitalic"><span class="italic">LOB_storage_clause</span>::=</span></a>, <a href="#i2149052"><span class="xreftitleitalic"><span class="italic">varray_col_properties</span> ::=</span></a>, <a href="#BABEACJG"><span class="xreftitleitalic"><span class="italic">LOB_partitioning_storage</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABEACJG"></a><a id="SQLRF54396"></a><span class="italic">LOB_partitioning_storage</span>::=</p>
<img width="768" height="156" src="img/lob_partitioning_storage.gif" alt="Description of lob_partitioning_storage.gif follows"/><br/>
<a id="sthref5548" href="img_text/lob_partitioning_storage.htm">Description of the illustration &#39;&#39;lob_partitioning_storage.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2129798"></a><a id="SQLRF54397"></a><a href="#i2129098"><span class="xreftitleitalic"><span class="italic">XMLType_column_properties</span></span></a> ::=</p>
<img width="617" height="46" src="img/xmltype_column_properties.gif" alt="Description of xmltype_column_properties.gif follows"/><br/>
<a id="sthref5549" href="img_text/xmltype_column_properties.htm">Description of the illustration &#39;&#39;xmltype_column_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2218838"><span class="xreftitleitalic"><span class="italic">XMLType_storage</span>::=</span></a>, <a href="#BABJDCGH"><span class="xreftitleitalic"><span class="italic">XMLSchema_spec</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2218838"></a><a id="SQLRF54398"></a><span class="italic">XMLType_storage</span>::=</p>
<img width="846" height="267" src="img/xmltype_storage.gif" alt="Description of xmltype_storage.gif follows"/><br/>
<a id="sthref5550" href="img_text/xmltype_storage.htm">Description of the illustration &#39;&#39;xmltype_storage.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2149089"><span class="xreftitleitalic"><span class="italic">LOB_parameters</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABJDCGH"></a><a id="SQLRF54399"></a><span class="italic">XMLSchema_spec</span>::=</p>
<img width="614" height="258" src="img/xmlschema_spec.gif" alt="Description of xmlschema_spec.gif follows"/><br/>
<a id="sthref5551" href="img_text/xmlschema_spec.htm">Description of the illustration &#39;&#39;xmlschema_spec.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABFIGHD"></a><a id="SQLRF54400"></a><a href="#BABJHCEG"><span class="xreftitleitalic"><span class="italic">XMLType_virtual_columns</span></span></a>::=</p>
<img width="482" height="58" src="img/xmltype_virtual_columns.gif" alt="Description of xmltype_virtual_columns.gif follows"/><br/>
<a id="sthref5552" href="img_text/xmltype_virtual_columns.htm">Description of the illustration &#39;&#39;xmltype_virtual_columns.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2204697"></a><a id="SQLRF54403"></a><a href="#i2159748"><span class="xreftitleitalic"><span class="italic">row_movement_clause</span></span></a> ::=<a id="sthref5553"></a><a id="sthref5554"></a><a id="sthref5555"></a><a id="sthref5556"></a></p>
<img width="268" height="58" src="img/row_movement_clause.gif" alt="Description of row_movement_clause.gif follows"/><br/>
<a id="sthref5557" href="img_text/row_movement_clause.htm">Description of the illustration &#39;&#39;row_movement_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABDGEHC"></a><a id="SQLRF54404"></a><a href="#BABGIIIA"><span class="xreftitleitalic"><span class="italic">flashback_archive_clause</span></span></a>::=</p>
<img width="385" height="79" src="img/flashback_archive_clause.gif" alt="Description of flashback_archive_clause.gif follows"/><br/>
<a id="sthref5558" href="img_text/flashback_archive_clause.htm">Description of the illustration &#39;&#39;flashback_archive_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGBBCEF"></a><a id="SQLRF56762"></a><span class="italic">heap_org_table_clause</span>::=</p>
<img width="506" height="37" src="img/heap_org_table_clause.gif" alt="Description of heap_org_table_clause.gif follows"/><br/>
<a id="sthref5559" href="img_text/heap_org_table_clause.htm">Description of the illustration &#39;&#39;heap_org_table_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129627"><span class="xreftitleitalic"><span class="italic">table_compression</span>::=</span></a>, <a href="#CEGBJJJG"><span class="xreftitleitalic"><span class="italic">inmemory_table_clause</span>::=</span></a>, <a href="#CJAIDBJE"><span class="xreftitleitalic"><span class="italic">ilm_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2129638"></a><a id="SQLRF54405"></a><a href="#i2128766"><span class="xreftitleitalic"><span class="italic">index_org_table_clause</span></span></a> ::=<a id="sthref5560"></a></p>
<img width="518" height="114" src="img/index_org_table_clause.gif" alt="Description of index_org_table_clause.gif follows"/><br/>
<a id="sthref5561" href="img_text/index_org_table_clause.htm">Description of the illustration &#39;&#39;index_org_table_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2146256"><span class="xreftitleitalic"><span class="italic">mapping_table_clauses</span>::=</span></a>, <a href="#CEGHDCBC"><span class="xreftitleitalic"><span class="italic">prefix_compression</span>::=</span></a>, <a href="#i2146263"><span class="xreftitleitalic"><span class="italic">index_org_overflow_clause</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2146256"></a><a id="SQLRF54406"></a><a href="#i2128795"><span class="xreftitleitalic"><span class="italic">mapping_table_clauses</span></span></a>::=</p>
<img width="190" height="58" src="img/mapping_table_clauses.gif" alt="Description of mapping_table_clauses.gif follows"/><br/>
<a id="sthref5562" href="img_text/mapping_table_clauses.htm">Description of the illustration &#39;&#39;mapping_table_clauses.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2215029"></a><a id="SQLRF54407"></a><span class="italic">index_compression</span>::=</p>
<img width="228" height="58" src="img/index_compression.gif" alt="Description of index_compression.gif follows"/><br/>
<a id="sthref5563" href="img_text/index_compression.htm">Description of the illustration &#39;&#39;index_compression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGHDCBC"></a><a id="SQLRF56889"></a><a href="#CEGFFACJ"><span class="xreftitleitalic"><span class="italic">prefix_compression</span></span></a>::=</p>
<img width="248" height="79" src="img/prefix_compression.gif" alt="Description of prefix_compression.gif follows"/><br/>
<a id="sthref5564" href="img_text/prefix_compression.htm">Description of the illustration &#39;&#39;prefix_compression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56890"></a><span class="italic">advanced_index_compression</span>::=</p>
<img width="282" height="58" src="img/advanced_index_compression.gif" alt="Description of advanced_index_compression.gif follows"/><br/>
<a id="sthref5565" href="img_text/advanced_index_compression.htm">Description of the illustration &#39;&#39;advanced_index_compression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2146263"></a><a id="SQLRF54408"></a><a href="#i2128810"><span class="xreftitleitalic"><span class="italic">index_org_overflow_clause</span></span></a> ::=</p>
<img width="551" height="46" src="img/index_org_overflow_clause.gif" alt="Description of index_org_overflow_clause.gif follows"/><br/>
<a id="sthref5566" href="img_text/index_org_overflow_clause.htm">Description of the illustration &#39;&#39;index_org_overflow_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2214991"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2126822"></a><a id="SQLRF54409"></a><a href="#i2159548"><span class="xreftitleitalic"><span class="italic">supplemental_logging_props</span></span></a> ::=</p>
<img width="393" height="58" src="img/supplemental_logging_props.gif" alt="Description of supplemental_logging_props.gif follows"/><br/>
<a id="sthref5567" href="img_text/supplemental_logging_props.htm">Description of the illustration &#39;&#39;supplemental_logging_props.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF54410"></a><span class="italic">supplemental_log_grp_clause</span>::=</p>
<img width="577" height="79" src="img/supplemental_log_grp_clause.gif" alt="Description of supplemental_log_grp_clause.gif follows"/><br/>
<a id="sthref5568" href="img_text/supplemental_log_grp_clause.htm">Description of the illustration &#39;&#39;supplemental_log_grp_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF54411"></a><span class="italic">supplemental_id_key_clause</span>::=</p>
<img width="407" height="156" src="img/supplemental_id_key_clause.gif" alt="Description of supplemental_id_key_clause.gif follows"/><br/>
<a id="sthref5569" href="img_text/supplemental_id_key_clause.htm">Description of the illustration &#39;&#39;supplemental_id_key_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2129649"></a><a id="SQLRF54412"></a><a href="#i2159541"><span class="xreftitleitalic"><span class="italic">external_table_clause</span></span></a> ::=</p>
<img width="748" height="79" src="img/external_table_clause.gif" alt="Description of external_table_clause.gif follows"/><br/>
<a id="sthref5570" href="img_text/external_table_clause.htm">Description of the illustration &#39;&#39;external_table_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2146275"><span class="xreftitleitalic"><span class="italic">external_data_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146275"></a><a id="SQLRF54413"></a><span class="italic">external_data_properties</span>::=</p>
<img width="708" height="187" src="img/external_data_properties.gif" alt="Description of external_data_properties.gif follows"/><br/>
<a id="sthref5571" href="img_text/external_data_properties.htm">Description of the illustration &#39;&#39;external_data_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code>: This clause specifies all access parameters for the <code dir="ltr">ORACLE_LOADER</code> and <code dir="ltr">ORACLE_DATAPUMP</code> access drivers. See <a class="olink SUTIL1358" href="../SUTIL/GUID-07D30CE6-128D-426F-8B76-B13E1C53BD5A.htm#SUTIL1358"><span class="italic">Oracle Database Utilities</span></a> for descriptions of these parameters.)</p>
<p class="subhead2"><a id="CJAJBJII"></a><a id="SQLRF55869"></a><span class="italic"><a href="#CJAFJABE"><span class="xreftitleitalic"><span class="italic">indexing_clause</span></span></a></span>::=</p>
<img width="180" height="58" src="img/indexing_clause.gif" alt="Description of indexing_clause.gif follows"/><br/>
<a id="sthref5572" href="img_text/indexing_clause.htm">Description of the illustration &#39;&#39;indexing_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2129707"></a><a id="SQLRF54414"></a><a href="#i2215406"><span class="xreftitleitalic"><span class="italic">table_partitioning_clauses</span></span></a> ::=</p>
<img width="215" height="251" src="img/table_partitioning_clauses.gif" alt="Description of table_partitioning_clauses.gif follows"/><br/>
<a id="sthref5573" href="img_text/table_partitioning_clauses.htm">Description of the illustration &#39;&#39;table_partitioning_clauses.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2146287"><span class="xreftitleitalic"><span class="italic">range_partitions</span>::=</span></a>, <a href="#i2146309"><span class="xreftitleitalic"><span class="italic">list_partitions</span> ::=</span></a>, <a href="#i2146298"><span class="xreftitleitalic"><span class="italic">hash_partitions</span> ::=</span></a>, <a href="#i2146320"><span class="xreftitleitalic"><span class="italic">composite_range_partitions</span>::=</span></a>, <a href="#BABFDCFF"><span class="xreftitleitalic"><span class="italic">composite_list_partitions</span>::=</span></a> <a href="#CJABBBAI"><span class="xreftitleitalic"><span class="italic">composite_hash_partitions</span>::=</span></a>, <a href="#BABDECCA"><span class="xreftitleitalic"><span class="italic">reference_partitioning</span>::=</span></a>, <a href="#BABFAEHI"><span class="xreftitleitalic"><span class="italic">system_partitioning</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146287"></a><a id="SQLRF54415"></a><a href="#BABJDACD"><span class="xreftitleitalic"><span class="italic">range_partitions</span></span></a>::=<a id="sthref5574"></a><a id="sthref5575"></a></p>
<img width="602" height="282" src="img/range_partitions.gif" alt="Description of range_partitions.gif follows"/><br/>
<a id="sthref5576" href="img_text/range_partitions.htm">Description of the illustration &#39;&#39;range_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2125922"><span class="xreftitleitalic"><span class="italic">range_values_clause</span>::=</span></a>, <a href="#i2127282"><span class="xreftitleitalic"><span class="italic">table_partition_description</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146298"></a><a id="SQLRF54416"></a><a href="#BABIHJGG"><span class="xreftitleitalic"><span class="italic">hash_partitions</span></span></a> ::=<a id="sthref5577"></a><a id="sthref5578"></a></p>
<img width="557" height="76" src="img/hash_partitions.gif" alt="Description of hash_partitions.gif follows"/><br/>
<a id="sthref5579" href="img_text/hash_partitions.htm">Description of the illustration &#39;&#39;hash_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2126179"><span class="xreftitleitalic"><span class="italic">individual_hash_partitions</span>::=</span></a>, <a href="#i2125987"><span class="xreftitleitalic"><span class="italic">hash_partitions_by_quantity</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2126179"></a><a id="SQLRF54417"></a><span class="italic">individual_hash_partitions</span>::=</p>
<img width="676" height="79" src="img/individual_hash_partitions.gif" alt="Description of individual_hash_partitions.gif follows"/><br/>
<a id="sthref5580" href="img_text/individual_hash_partitions.htm">Description of the illustration &#39;&#39;individual_hash_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAJBJII"><span class="xreftitleitalic"><span class="italic"><span class="italic">indexing_clause</span></span>::=</span></a>, <a href="#CJADDEEH"><span class="xreftitleitalic"><span class="italic">partitioning_storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2125987"></a><a id="SQLRF54418"></a><span class="italic">hash_partitions_by_quantity</span>::=</p>
<img width="633" height="178" src="img/hash_partitions_by_quantity.gif" alt="Description of hash_partitions_by_quantity.gif follows"/><br/>
<a id="sthref5581" href="img_text/hash_partitions_by_quantity.htm">Description of the illustration &#39;&#39;hash_partitions_by_quantity.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129627"><span class="xreftitleitalic"><span class="italic">table_compression</span>::=</span></a>, <a href="#i2215029"><span class="xreftitleitalic"><span class="italic">index_compression</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146309"></a><a id="SQLRF54419"></a><a href="#BABDGHIB"><span class="xreftitleitalic"><span class="italic">list_partitions</span></span></a> ::=<a id="sthref5582"></a><a id="sthref5583"></a></p>
<img width="586" height="135" src="img/list_partitions.gif" alt="Description of list_partitions.gif follows"/><br/>
<a id="sthref5584" href="img_text/list_partitions.htm">Description of the illustration &#39;&#39;list_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2125928"><span class="xreftitleitalic"><span class="italic">list_values_clause</span>::=</span></a>, <a href="#i2127282"><span class="xreftitleitalic"><span class="italic">table_partition_description</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146320"></a><a id="SQLRF54422"></a><a href="#BABIEIGC"><span class="xreftitleitalic"><span class="italic">composite_range_partitions</span></span></a>::=</p>
<img width="576" height="294" src="img/composite_range_partitions.gif" alt="Description of composite_range_partitions.gif follows"/><br/>
<a id="sthref5585" href="img_text/composite_range_partitions.htm">Description of the illustration &#39;&#39;composite_range_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BABDDHAA"><span class="xreftitleitalic"><span class="italic">subpartition_by_range</span>::=</span></a>. <a href="#i2153057"><span class="xreftitleitalic"><span class="italic">subpartition_by_list</span>::=</span></a>, <a href="#i2129906"><span class="xreftitleitalic"><span class="italic">subpartition_by_hash</span>::=</span></a>, <a href="#BABJIIJB"><span class="xreftitleitalic"><span class="italic">range_partition_desc</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJABBBAI"></a><a id="SQLRF54423"></a><a href="#CJAIEEFH"><span class="xreftitleitalic"><span class="italic">composite_hash_partitions</span></span></a>::=</p>
<img width="727" height="91" src="img/composite_hash_partitions.gif" alt="Description of composite_hash_partitions.gif follows"/><br/>
<a id="sthref5586" href="img_text/composite_hash_partitions.htm">Description of the illustration &#39;&#39;composite_hash_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BABDDHAA"><span class="xreftitleitalic"><span class="italic">subpartition_by_range</span>::=</span></a>, <a href="#i2153057"><span class="xreftitleitalic"><span class="italic">subpartition_by_list</span>::=</span></a>, <a href="#i2129906"><span class="xreftitleitalic"><span class="italic">subpartition_by_hash</span>::=</span></a>, <a href="#i2126179"><span class="xreftitleitalic"><span class="italic">individual_hash_partitions</span>::=</span></a>, <a href="#i2125987"><span class="xreftitleitalic"><span class="italic">hash_partitions_by_quantity</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABFDCFF"></a><a id="SQLRF54424"></a><a href="#BABHDBFJ"><span class="xreftitleitalic"><span class="italic">composite_list_partitions</span></span></a>::=</p>
<img width="697" height="91" src="img/composite_list_partitions.gif" alt="Description of composite_list_partitions.gif follows"/><br/>
<a id="sthref5587" href="img_text/composite_list_partitions.htm">Description of the illustration &#39;&#39;composite_list_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BABDDHAA"><span class="xreftitleitalic"><span class="italic">subpartition_by_range</span>::=</span></a>. <a href="#i2153057"><span class="xreftitleitalic"><span class="italic">subpartition_by_list</span>::=</span></a>, <a href="#i2129906"><span class="xreftitleitalic"><span class="italic">subpartition_by_hash</span>::=</span></a>, <a href="#BABIBDHH"><span class="xreftitleitalic"><span class="italic">list_partition_desc</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABDECCA"></a><a id="SQLRF54420"></a><a href="#BABFBFBC"><span class="xreftitleitalic"><span class="italic">reference_partitioning</span></span></a>::=<a id="sthref5588"></a><a id="sthref5589"></a></p>
<img width="666" height="79" src="img/reference_partitioning.gif" alt="Description of reference_partitioning.gif follows"/><br/>
<a id="sthref5590" href="img_text/reference_partitioning.htm">Description of the illustration &#39;&#39;reference_partitioning.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="clauses002.htm#CJAEDFIB"><span class="xreftitleitalic"><span class="italic">constraint</span>::=</span></a>, <a href="#BABEJDCI"><span class="xreftitleitalic"><span class="italic">reference_partition_desc</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABEJDCI"></a><a id="SQLRF54421"></a><span class="italic">reference_partition_desc</span>::=</p>
<img width="425" height="46" src="img/reference_partition_desc.gif" alt="Description of reference_partition_desc.gif follows"/><br/>
<a id="sthref5591" href="img_text/reference_partition_desc.htm">Description of the illustration &#39;&#39;reference_partition_desc.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127282"><span class="xreftitleitalic"><span class="italic">table_partition_description</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABFAEHI"></a><a id="SQLRF54425"></a><a href="#BABJBDCC"><span class="xreftitleitalic"><span class="italic">system_partitioning</span></span></a>::=</p>
<img width="480" height="110" src="img/system_partitioning.gif" alt="Description of system_partitioning.gif follows"/><br/>
<a id="sthref5592" href="img_text/system_partitioning.htm">Description of the illustration &#39;&#39;system_partitioning.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BABEJDCI"><span class="xreftitleitalic"><span class="italic">reference_partition_desc</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABJIIJB"></a><a id="SQLRF54426"></a><span class="italic">range_partition_desc</span>::=</p>
<img width="866" height="239" src="img/range_partition_desc.gif" alt="Description of range_partition_desc.gif follows"/><br/>
<a id="sthref5593" href="img_text/range_partition_desc.htm">Description of the illustration &#39;&#39;range_partition_desc.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2125922"><span class="xreftitleitalic"><span class="italic">range_values_clause</span>::=</span></a>, <a href="#i2127282"><span class="xreftitleitalic"><span class="italic">table_partition_description</span>::=</span></a>, <a href="#BABEGHJB"><span class="xreftitleitalic"><span class="italic">range_subpartition_desc</span>::=</span></a>, <a href="#i2146352"><span class="xreftitleitalic"><span class="italic">list_subpartition_desc</span>::=</span></a>, <a href="#i2215074"><span class="xreftitleitalic"><span class="italic">individual_hash_subparts</span>::=</span></a>, <a href="#BABIDCDG"><span class="xreftitleitalic"><span class="italic">hash_subparts_by_quantity</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABIBDHH"></a><a id="SQLRF54427"></a><span class="italic">list_partition_desc</span>::=</p>
<img width="850" height="239" src="img/list_partition_desc.gif" alt="Description of list_partition_desc.gif follows"/><br/>
<a id="sthref5594" href="img_text/list_partition_desc.htm">Description of the illustration &#39;&#39;list_partition_desc.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2125928"><span class="xreftitleitalic"><span class="italic">list_values_clause</span>::=</span></a>, <a href="#i2127282"><span class="xreftitleitalic"><span class="italic">table_partition_description</span>::=</span></a>, <a href="#BABEGHJB"><span class="xreftitleitalic"><span class="italic">range_subpartition_desc</span>::=</span></a>, <a href="#i2146352"><span class="xreftitleitalic"><span class="italic">list_subpartition_desc</span>::=</span></a>, <a href="#i2215074"><span class="xreftitleitalic"><span class="italic">individual_hash_subparts</span>::=</span></a>, <a href="#BABIDCDG"><span class="xreftitleitalic"><span class="italic">hash_subparts_by_quantity</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2129934"></a><a id="SQLRF54428"></a><a href="#BABHJECD"><span class="xreftitleitalic"><span class="italic">subpartition_template</span></span></a>::=</p>
<img width="522" height="220" src="img/subpartition_template.gif" alt="Description of subpartition_template.gif follows"/><br/>
<a id="sthref5595" href="img_text/subpartition_template.htm">Description of the illustration &#39;&#39;subpartition_template.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BABEGHJB"><span class="xreftitleitalic"><span class="italic">range_subpartition_desc</span>::=</span></a>, <a href="#i2146352"><span class="xreftitleitalic"><span class="italic">list_subpartition_desc</span>::=</span></a>, <a href="#i2215074"><span class="xreftitleitalic"><span class="italic">individual_hash_subparts</span>::=</span></a>, <a href="#BABIDCDG"><span class="xreftitleitalic"><span class="italic">hash_subparts_by_quantity</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABDDHAA"></a><a id="SQLRF54429"></a><span class="italic">subpartition_by_range</span>::=</p>
<img width="572" height="60" src="img/subpartition_by_range.gif" alt="Description of subpartition_by_range.gif follows"/><br/>
<a id="sthref5596" href="img_text/subpartition_by_range.htm">Description of the illustration &#39;&#39;subpartition_by_range.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129934"><span class="xreftitleitalic"><span class="italic">subpartition_template</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2153057"></a><a id="SQLRF54430"></a><span class="italic">subpartition_by_list</span>::=</p>
<img width="524" height="46" src="img/subpartition_by_list.gif" alt="Description of subpartition_by_list.gif follows"/><br/>
<a id="sthref5597" href="img_text/subpartition_by_list.htm">Description of the illustration &#39;&#39;subpartition_by_list.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129934"><span class="xreftitleitalic"><span class="italic">subpartition_template</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2129906"></a><a id="SQLRF54431"></a><a href="#BABJAFIB"><span class="xreftitleitalic"><span class="italic">subpartition_by_hash</span></span></a>::=<a id="sthref5598"></a><a id="sthref5599"></a><a id="sthref5600"></a></p>
<img width="596" height="209" src="img/subpartition_by_hash.gif" alt="Description of subpartition_by_hash.gif follows"/><br/>
<a id="sthref5601" href="img_text/subpartition_by_hash.htm">Description of the illustration &#39;&#39;subpartition_by_hash.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129934"><span class="xreftitleitalic"><span class="italic">subpartition_template</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABEGHJB"></a><a id="SQLRF54432"></a><span class="italic">range_subpartition_desc</span>::=</p>
<img width="760" height="46" src="img/range_subpartition_desc.gif" alt="Description of range_subpartition_desc.gif follows"/><br/>
<a id="sthref5602" href="img_text/range_subpartition_desc.htm">Description of the illustration &#39;&#39;range_subpartition_desc.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2125922"><span class="xreftitleitalic"><span class="italic">range_values_clause</span>::=</span></a>, <a href="#CJAJBJII"><span class="xreftitleitalic"><span class="italic"><span class="italic">indexing_clause</span></span>::=</span></a>, <a href="#CJADDEEH"><span class="xreftitleitalic"><span class="italic">partitioning_storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2146352"></a><a id="SQLRF54433"></a><span class="italic">list_subpartition_desc</span>::=</p>
<img width="746" height="46" src="img/list_subpartition_desc.gif" alt="Description of list_subpartition_desc.gif follows"/><br/>
<a id="sthref5603" href="img_text/list_subpartition_desc.htm">Description of the illustration &#39;&#39;list_subpartition_desc.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2125928"><span class="xreftitleitalic"><span class="italic">list_values_clause</span>::=</span></a>, <a href="#CJAJBJII"><span class="xreftitleitalic"><span class="italic"><span class="italic">indexing_clause</span></span>::=</span></a>, <a href="#CJADDEEH"><span class="xreftitleitalic"><span class="italic">partitioning_storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2215074"></a><a id="SQLRF54434"></a><span class="italic">individual_hash_subparts</span>::=</p>
<img width="628" height="46" src="img/individual_hash_subparts.gif" alt="Description of individual_hash_subparts.gif follows"/><br/>
<a id="sthref5604" href="img_text/individual_hash_subparts.htm">Description of the illustration &#39;&#39;individual_hash_subparts.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAJBJII"><span class="xreftitleitalic"><span class="italic"><span class="italic">indexing_clause</span></span>::=</span></a>, <a href="#CJADDEEH"><span class="xreftitleitalic"><span class="italic">partitioning_storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="BABIDCDG"></a><a id="SQLRF54435"></a><span class="italic">hash_subparts_by_quantity</span>::=</p>
<img width="518" height="79" src="img/hash_subparts_by_quantity.gif" alt="Description of hash_subparts_by_quantity.gif follows"/><br/>
<a id="sthref5605" href="img_text/hash_subparts_by_quantity.htm">Description of the illustration &#39;&#39;hash_subparts_by_quantity.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2125922"></a><a id="SQLRF54436"></a><span class="italic">range_values_clause</span>::=</p>
<img width="411" height="91" src="img/range_values_clause.gif" alt="Description of range_values_clause.gif follows"/><br/>
<a id="sthref5606" href="img_text/range_values_clause.htm">Description of the illustration &#39;&#39;range_values_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2125928"></a><a id="SQLRF54437"></a><span class="italic">list_values_clause</span>::=</p>
<img width="298" height="123" src="img/list_values_clause.gif" alt="Description of list_values_clause.gif follows"/><br/>
<a id="sthref5607" href="img_text/list_values_clause.htm">Description of the illustration &#39;&#39;list_values_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2127282"></a><a id="SQLRF54438"></a><a href="#BABHFEGC"><span class="xreftitleitalic"><span class="italic">table_partition_description</span></span></a>::=</p>
<img width="796" height="289" src="img/table_partition_description.gif" alt="Description of table_partition_description.gif follows"/><br/>
<a id="sthref5608" href="img_text/table_partition_description.htm">Description of the illustration &#39;&#39;table_partition_description.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGBDDBC"><span class="xreftitleitalic"><span class="italic">deferred_segment_creation</span>::=</span></a>, <a href="#CJAJBJII"><span class="xreftitleitalic"><span class="italic"><span class="italic">indexing_clause</span></span>::=</span></a>, <a href="#i2214991"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span> ::=</span></a>, <a href="#i2129627"><span class="xreftitleitalic"><span class="italic">table_compression</span>::=</span></a>, <a href="#CEGHDCBC"><span class="xreftitleitalic"><span class="italic">prefix_compression</span>::=</span></a>, <a href="#CEGBJBFH"><span class="xreftitleitalic"><span class="italic">inmemory_clause</span>::=</span></a>, <a href="#CJAIDBJE"><span class="xreftitleitalic"><span class="italic">ilm_clause</span>::=</span></a>, <a href="#i2214991"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span> ::=</span></a>, <a href="#i2218765"><span class="xreftitleitalic"><span class="italic">LOB_storage_clause</span>::=</span></a>, <a href="#i2149052"><span class="xreftitleitalic"><span class="italic">varray_col_properties</span> ::=</span></a>, <a href="#i2215015"><span class="xreftitleitalic"><span class="italic">nested_table_col_properties</span> ::=</span></a>)</p>
<p class="subhead2"><a id="CJADDEEH"></a><a id="SQLRF54439"></a><a href="#BABEJJGH"><span class="xreftitleitalic"><span class="italic">partitioning_storage_clause</span></span></a>::=</p>
<img width="720" height="346" src="img/partitioning_storage_clause.gif" alt="Description of partitioning_storage_clause.gif follows"/><br/>
<a id="sthref5609" href="img_text/partitioning_storage_clause.htm">Description of the illustration &#39;&#39;partitioning_storage_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129627"><span class="xreftitleitalic"><span class="italic">table_compression</span>::=</span></a>, <a href="#i2215029"><span class="xreftitleitalic"><span class="italic">index_compression</span>::=</span></a>, <a href="#CEGBJBFH"><span class="xreftitleitalic"><span class="italic">inmemory_clause</span>::=</span></a>, <a href="#CJAIDBJE"><span class="xreftitleitalic"><span class="italic">ilm_clause</span>::=</span></a>, <a href="#BABEACJG"><span class="xreftitleitalic"><span class="italic">LOB_partitioning_storage</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGBJBFH"></a><a id="SQLRF56763"></a><a href="#CEGDHEGF"><span class="xreftitleitalic"><span class="italic">inmemory_clause</span></span></a>::=</p>
<img width="326" height="79" src="img/inmemory_clause.gif" alt="Description of inmemory_clause.gif follows"/><br/>
<a id="sthref5610" href="img_text/inmemory_clause.htm">Description of the illustration &#39;&#39;inmemory_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGJJGCD"><span class="xreftitleitalic"><span class="italic">inmemory_memcompress</span>::=</span></a>, <a href="#CEGHDDGE"><span class="xreftitleitalic"><span class="italic">inmemory_parameters</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGGFJJD"></a><a id="SQLRF56824"></a><a href="#CEGIDCDI"><span class="xreftitleitalic"><span class="italic">attribute_clustering_clause</span></span></a>::=</p>
<img width="676" height="46" src="img/attribute_clustering_clause.gif" alt="Description of attribute_clustering_clause.gif follows"/><br/>
<a id="sthref5611" href="img_text/attribute_clustering_clause.htm">Description of the illustration &#39;&#39;attribute_clustering_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CEGIAIBF"><span class="xreftitleitalic"><span class="italic">clustering_join</span>::=</span></a>, <a href="#CEGFAFAE"><span class="xreftitleitalic"><span class="italic">cluster_clause</span>::=</span></a>, <a href="#CEGJACCH"><span class="xreftitleitalic"><span class="italic">clustering_when</span>::=</span></a>, <a href="#CEGJCEGI"><span class="xreftitleitalic"><span class="italic">zonemap_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="CEGIAIBF"></a><a id="SQLRF56825"></a><a href="#CEGFDIAC"><span class="xreftitleitalic"><span class="italic">clustering_join</span></span></a>::=</p>
<img width="708" height="79" src="img/clustering_join.gif" alt="Description of clustering_join.gif follows"/><br/>
<a id="sthref5612" href="img_text/clustering_join.htm">Description of the illustration &#39;&#39;clustering_join.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGFAFAE"></a><a id="SQLRF56826"></a><a href="#CEGDGDIH"><span class="xreftitleitalic"><span class="italic">cluster_clause</span></span></a>::=</p>
<img width="433" height="79" src="img/cluster_clause.gif" alt="Description of cluster_clause.gif follows"/><br/>
<a id="sthref5613" href="img_text/cluster_clause.htm">Description of the illustration &#39;&#39;cluster_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56827"></a><a href="#CEGBGGHG"><span class="xreftitleitalic"><span class="italic">clustering_columns</span></span></a>::=</p>
<img width="293" height="91" src="img/clustering_columns.gif" alt="Description of clustering_columns.gif follows"/><br/>
<a id="sthref5614" href="img_text/clustering_columns.htm">Description of the illustration &#39;&#39;clustering_columns.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56828"></a><a href="#CEGDGCCC"><span class="xreftitleitalic"><span class="italic">clustering_column_group</span></span></a>::=</p>
<img width="171" height="58" src="img/clustering_column_group.gif" alt="Description of clustering_column_group.gif follows"/><br/>
<a id="sthref5615" href="img_text/clustering_column_group.htm">Description of the illustration &#39;&#39;clustering_column_group.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGJACCH"></a><a id="SQLRF56829"></a><a href="#CEGJBIHI"><span class="xreftitleitalic"><span class="italic">clustering_when</span></span></a>::=</p>
<img width="564" height="70" src="img/clustering_when.gif" alt="Description of clustering_when.gif follows"/><br/>
<a id="sthref5616" href="img_text/clustering_when.htm">Description of the illustration &#39;&#39;clustering_when.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CEGJCEGI"></a><a id="SQLRF56891"></a><a href="#CEGDJAGF"><span class="xreftitleitalic"><span class="italic">zonemap_clause</span></span></a>::=</p>
<img width="510" height="79" src="img/zonemap_clause.gif" alt="Description of zonemap_clause.gif follows"/><br/>
<a id="sthref5617" href="img_text/zonemap_clause.htm">Description of the illustration &#39;&#39;zonemap_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2129718"></a><a id="SQLRF54441"></a><a href="#i2159323"><span class="xreftitleitalic"><span class="italic">parallel_clause</span></span></a> ::=<a id="sthref5618"></a><a id="sthref5619"></a></p>
<img width="241" height="79" src="img/parallel_clause.gif" alt="Description of parallel_clause.gif follows"/><br/>
<a id="sthref5620" href="img_text/parallel_clause.htm">Description of the illustration &#39;&#39;parallel_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2129729"></a><a id="SQLRF54442"></a><a href="#i2062565"><span class="xreftitleitalic"><span class="italic">enable_disable_clause</span></span></a> ::=<a id="sthref5621"></a><a id="sthref5622"></a></p>
<img width="683" height="221" src="img/enable_disable_clause.gif" alt="Description of enable_disable_clause.gif follows"/><br/>
<a id="sthref5623" href="img_text/enable_disable_clause.htm">Description of the illustration &#39;&#39;enable_disable_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2146364"><span class="xreftitleitalic"><span class="italic">using_index_clause</span> ::=</span></a>, <code dir="ltr"><span class="codeinlineitalic">exceptions_clause</span></code> not supported in <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statements)</p>
<p class="subhead2"><a id="i2146364"></a><a id="SQLRF54443"></a><a href="#i2159557"><span class="xreftitleitalic"><span class="italic">using_index_clause</span></span></a> ::=</p>
<img width="379" height="110" src="img/using_index_clause.gif" alt="Description of using_index_clause.gif follows"/><br/>
<a id="sthref5624" href="img_text/using_index_clause.htm">Description of the illustration &#39;&#39;using_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="statements_5013.htm#i2125762"><span class="xreftitleitalic"><span class="italic">create_index</span>::=</span></a>, <a href="#i2168216"><span class="xreftitleitalic"><span class="italic">index_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2168216"></a><a id="SQLRF54444"></a><span class="italic">index_properties</span>::=</p>
<img width="392" height="178" src="img/index_properties.gif" alt="Description of index_properties.gif follows"/><br/>
<a id="sthref5625" href="img_text/index_properties.htm">Description of the illustration &#39;&#39;index_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="statements_5013.htm#i2126415"><span class="xreftitleitalic"><span class="italic">global_partitioned_index</span>::=</span></a>, <a href="statements_5013.htm#i2125897"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span> ::=</span></a>&mdash;part of <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code>, <a href="statements_5013.htm#i2182500"><span class="xreftitleitalic"><span class="italic">index_attributes</span>::=</span></a>, <code dir="ltr"><span class="codeinlineitalic">domain_index_clause</span></code> and <code dir="ltr"><span class="codeinlineitalic">XMLIndex_clause</span></code>: not supported in <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code>)</p>
<p class="subhead2"><a id="SQLRF54445"></a><span class="italic">index_attributes</span>::=</p>
<img width="341" height="435" src="img/index_attributes.gif" alt="Description of index_attributes.gif follows"/><br/>
<a id="sthref5626" href="img_text/index_attributes.htm">Description of the illustration &#39;&#39;index_attributes.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2129582"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span>::=</span></a>, <a href="clauses005.htm#CJAHABGF"><span class="xreftitleitalic"><span class="italic">logging_clause</span>::=</span></a>, <a href="#i2215029"><span class="xreftitleitalic"><span class="italic">index_compression</span>::=</span></a>, <code dir="ltr"><span class="codeinlineitalic">partial_index_clause</span></code> and <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code>: not supported in <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2157251"></a>Semantics</p>
<p class="subhead2"><a id="SQLRF54446"></a><span class="italic">relational_table <a id="sthref5627"></a></span></p>
<p class="subhead1"><a id="SQLRF54447"></a>GLOBAL TEMPORARY<a id="sthref5628"></a> <a id="sthref5629"></a><a id="sthref5630"></a><a id="sthref5631"></a><a id="sthref5632"></a><a id="sthref5633"></a><a id="sthref5634"></a></p>
<p>Specify <code dir="ltr">GLOBAL</code> <code dir="ltr">TEMPORARY</code> to indicate that the table is temporary and that its <span class="bold">definition</span> is visible to all sessions with appropriate privileges. The <span class="bold">data</span> in a temporary table is visible only to the session that inserts the data into the table.</p>
<p>When you first create a temporary table, its table metadata is stored in the data dictionary, but no space is allocated for table data. Space is allocated for the table segment at the time of the first DML operation on the table. The temporary table definition persists in the same way as the definitions of regular tables, but the table segment and any data the table contains are either <span class="bold">session-specific</span> or <span class="bold">transaction-specific</span> data. You specify whether the table segment and data are session- or transaction-specific with the <a href="#i2189569">ON COMMIT</a> keywords.</p>
<p>You can perform DDL operations (such as <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>, <code dir="ltr">DROP</code> <code dir="ltr">TABLE</code>, <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code>) on a temporary table only when no session is bound to it. A session becomes bound to a temporary table by performing an <code dir="ltr">INSERT</code> operation on the table. A session becomes unbound to the temporary table by issuing a <code dir="ltr">TRUNCATE</code> statement or at session termination, or, for a transaction-specific temporary table, by issuing a <code dir="ltr">COMMIT</code> or <code dir="ltr">ROLLBACK</code> statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT211" href="../CNCPT/tablecls.htm#CNCPT211"><span class="italic">Oracle Database Concepts</span></a> for information on temporary tables and <a href="#i2153132">&#34;Creating a Table: Temporary Table Example&#34;</a></div>
<p><a id="SQLRF54448"></a><span class="subhead3">Restrictions on Temporary Tables&nbsp;</span>Temporary tables are subject to the following restrictions:</p>
<ul>
<li>
<p>Temporary tables cannot be partitioned, clustered, or index organized.</p>
</li>
<li>
<p>You cannot specify any foreign key constraints on temporary tables.</p>
</li>
<li>
<p>Temporary tables cannot contain columns of nested table.</p>
</li>
<li>
<p>You cannot specify the following clauses of the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code>: <code dir="ltr">TABLESPACE</code>, <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code>, or <code dir="ltr"><span class="codeinlineitalic">logging_clause</span></code>.</p>
</li>
<li>
<p>Parallel <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code> and <code dir="ltr">MERGE</code> are not supported for temporary tables.</p>
</li>
<li>
<p>The only part of the <code dir="ltr"><span class="codeinlineitalic">segment_attributes_clause</span></code> you can specify for a temporary table is <code dir="ltr">TABLESPACE</code>, which allows you to specify a single temporary tablespace.</p>
</li>
<li>
<p>Distributed transactions are not supported for temporary tables.</p>
</li>
<li>
<p>A temporary table cannot contain <code dir="ltr">INVISIBLE</code> columns.</p>
</li>
</ul>
<p class="subhead1"><a id="SQLRF54449"></a><span class="italic">schema</span></p>
<p>Specify the schema to contain the table. If you omit <code dir="ltr"><span class="codeinlineitalic">schema</span></code>, then the database creates the table in your own schema.</p>
<p class="subhead1"><a id="SQLRF54450"></a><span class="italic">table</span></p>
<p>Specify the name of the table or object table to be created. The name must satisfy the requirements listed in <a href="sql_elements008.htm#i27570">&#34;Database Object Naming Rules&#34;</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2153108">&#34;Creating Tables: General Examples&#34;</a></div>
<p class="subhead1"><a id="i2128561"></a><a id="SQLRF54451"></a><span class="italic">relational_properties</span></p>
<p>The relational properties describe the components of a relational table.</p>
<p class="subhead1"><a id="CEGBACAG"></a><a id="SQLRF54452"></a><span class="italic">column_definition</span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause lets you define the characteristics of the column.</p>
<p><a id="SQLRF57084"></a><span class="subhead3">Specifying <span class="italic">column_definition</span> with AS <span class="italic">subquery</span>&nbsp;</span>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause, and each column returned by <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> has a column name or is an expression with a specified column alias, then you can omit the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause. In this case, the names of the columns of table are the same as the names of the columns returned by <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>. The exception is creating an index-organized table, for which you must specify the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause, because you must designate a primary key column. Regardless of the table type, if you specify the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause and the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause, then you must omit <code dir="ltr"><span class="codeinlineitalic">datatype</span></code> from the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause.</p>
<p class="subhead2"><a id="SQLRF54453"></a><span class="italic">column</span> <a id="sthref5635"></a><a id="sthref5636"></a></p>
<p>Specify the name of a column of the table.</p>
<p>If you also specify <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>, then you can omit <code dir="ltr"><span class="codeinlineitalic">column</span></code> and <code dir="ltr"><span class="codeinlineitalic">datatype</span></code> unless you are creating an index-organized table. If you specify <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> when creating an index-organized table, then you must specify <code dir="ltr"><span class="codeinlineitalic">column</span></code>, and you must omit <code dir="ltr"><span class="codeinlineitalic">datatype</span></code>.</p>
<p>The absolute maximum number of columns in a table is 1000. When you create an object table or a relational table with columns of object, nested table, varray, or <code dir="ltr">REF</code> type, Oracle Database maps the columns of the user-defined types to relational columns, in effect creating hidden columns that count toward the 1000-column limit.</p>
<p class="subhead2"><a id="SQLRF54454"></a><span class="italic">datatype</span></p>
<p>Specify the data type of a column.</p>
<p>In general, you must specify <code dir="ltr"><span class="codeinlineitalic">datatype</span></code>. However, the following exceptions apply:</p>
<ul>
<li>
<p>You must omit <code dir="ltr"><span class="codeinlineitalic">datatype</span></code> if you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause.</p>
</li>
<li>
<p>You can also omit <code dir="ltr"><span class="codeinlineitalic">datatype</span></code> if the statement designates the column as part of a foreign key in a referential integrity constraint. Oracle Database automatically assigns to the column the data type of the corresponding column of the referenced key of the referential integrity constraint.</p>
</li>
</ul>
<p><a id="SQLRF54456"></a><span class="subhead3">Restrictions on Table Column Data Types&nbsp;</span>The following restrictions apply to the data types of table columns:</p>
<ul>
<li>
<p>Do not create a table with <code dir="ltr">LONG</code> columns. Use LOB columns (<code dir="ltr">CLOB</code>, <code dir="ltr">NCLOB</code>, <code dir="ltr">BLOB</code>) instead. <code dir="ltr">LONG</code> columns are supported only for backward compatibility.</p>
</li>
<li>
<p>You can specify a column of type <code dir="ltr">ROWID</code>, but Oracle Database does not guarantee that the values in such columns are valid rowids.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sql_elements001.htm#i45441">&#34;Data Types&#34;</a> for information on <code dir="ltr">LONG</code> columns and on Oracle-supplied data types</div>
<p class="subhead2"><a id="SQLRF54457"></a>SORT <a id="sthref5637"></a></p>
<p>The <code dir="ltr">SORT</code> keyword is valid only if you are creating this table as part of a hash cluster and only for columns that are also cluster columns.</p>
<p>This clause instructs the database to sort the rows of the cluster on this column after applying the hash function when performing a DML operation. Doing so may improve response time during subsequent operations on the clustered data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2171985">&#34;CLUSTER Clause&#34;</a> for information on creating a cluster table</div>
<p class="subhead2"><a id="CJAGDBIC"></a><a id="SQLRF55897"></a>VISIBLE | INVISIBLE</p>
<p>Use this clause to specify whether <code dir="ltr"><span class="codeinlineitalic">column</span></code> is <code dir="ltr">VISIBLE</code> or <code dir="ltr">INVISIBLE</code>. The default is <code dir="ltr">VISIBLE</code>.</p>
<p><code dir="ltr">INVISIBLE</code> columns are user-specified hidden columns. To display or assign a value to an <code dir="ltr">INVISIBLE</code> column, you must specify its name explicitly. For example:</p>
<ul>
<li>
<p>The <code dir="ltr">SELECT</code> <code dir="ltr">*</code> syntax will not display an <code dir="ltr">INVISIBLE</code> column. However, if you include an <code dir="ltr">INVISIBLE</code> column in the select list of a <code dir="ltr">SELECT</code> statement, then the column will be displayed.</p>
</li>
<li>
<p>You cannot implicitly specify a value for an <code dir="ltr">INVISIBLE</code> column in the <code dir="ltr">VALUES</code> clause of an <code dir="ltr">INSERT</code> statement. You must specify the <code dir="ltr">INVISIBLE</code> column in the column list.</p>
</li>
<li>
<p>You must explicitly specify an <code dir="ltr">INVISIBLE</code> column in Oracle Call Interface (OCI) describes.</p>
</li>
<li>
<p>You can configure SQL*Plus to allow <code dir="ltr">INVISIBLE</code> column information to be viewed with the <code dir="ltr">DESCRIBE</code> command. Refer to <a class="olink SQPUG303" href="../SQPUG/ch_twelve040.htm#SQPUG303"><span class="italic">SQL*Plus User&#39;s Guide and Reference</span></a> for more information.</p>
</li>
</ul>
<p><a id="SQLRF55898"></a><span class="subhead3">Notes on VISIBLE and INVISIBLE Columns&nbsp;</span>The following notes apply to <code dir="ltr">VISIBLE</code> and <code dir="ltr">INVISIBLE</code> columns:</p>
<ul>
<li>
<p>An <code dir="ltr">INVISIBLE</code> column can be used as a partitioning key when specified as part of <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code>.</p>
</li>
<li>
<p>You can specify <code dir="ltr">INVISIBLE</code> columns in a <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code>.</p>
</li>
<li>
<p>A virtual column can be an <code dir="ltr">INVISIBLE</code> column.</p>
</li>
<li>
<p>PL/SQL <code dir="ltr">%ROWTYPE</code> attributes do not show <code dir="ltr">INVISIBLE</code> columns.</p>
</li>
<li>
<p>The <code dir="ltr">COLUMN_ID</code> column of the <code dir="ltr">ALL_</code>, <code dir="ltr">DBA_</code>, and <code dir="ltr">USER_TAB_COLUMNS</code> data dictionary views determines the order in which a <code dir="ltr">SELECT</code> <code dir="ltr">*</code> query returns columns for a table, view, or materialized view. The value of <code dir="ltr">COLUMN_ID</code> is NULL for <code dir="ltr">INVISIBLE</code> columns. When you make an invisible column visible, it will be assigned the next highest available <code dir="ltr">COLUMN_ID</code> value. When you make a visible column invisible, its <code dir="ltr">COLUMN_ID</code> value is set to NULL and <code dir="ltr">COLUMN_ID</code> is decremented by 1 for any columns with a higher <code dir="ltr">COLUMN_ID</code>.</p>
</li>
</ul>
<p><a id="SQLRF55899"></a><span class="subhead3">Restrictions on VISIBLE and INVISIBLE Columns&nbsp;</span>The following restrictions apply to <code dir="ltr">VISIBLE</code> and <code dir="ltr">INVISIBLE</code> columns:</p>
<ul>
<li>
<p><code dir="ltr">INVISIBLE</code> columns are not supported in external tables, cluster tables, or temporary tables.</p>
</li>
<li>
<p>You cannot make a system-generated hidden column visible.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To determine whether a column is a system-generated hidden column, query the <code dir="ltr">HIDDEN_COLUMN</code> and <code dir="ltr">USER_GENERATED</code> columns of the <code dir="ltr">ALL_</code>, <code dir="ltr">DBA_</code>, and <code dir="ltr">USER_TAB_COLS</code> data dictionary views. Refer to <a class="olink REFRN20276" href="../REFRN/GUID-85036F42-140A-406B-BE11-0AC49A00DBA3.htm#REFRN20276"><span class="italic">Oracle Database Reference</span></a> for more information.</div>
</li>
</ul>
<p class="subhead2"><a id="CJAFIJBC"></a><a id="SQLRF54458"></a>DEFAULT <a id="sthref5638"></a><a id="sthref5639"></a></p>
<p>The <code dir="ltr">DEFAULT</code> clause lets you specify a value to be assigned to the column if a subsequent <code dir="ltr">INSERT</code> statement omits a value for the column. The data type of the expression must match the data type specified for the column. The column must also be large enough to hold this expression.</p>
<p>The <code dir="ltr">DEFAULT</code> expression can include any SQL function as long as the function does not return a literal argument, a column reference, or a nested function invocation.</p>
<p>The <code dir="ltr">DEFAULT</code> expression can include the sequence pseudocolumns <code dir="ltr">CURRVAL</code> and <code dir="ltr">NEXTVAL</code>, as long as the sequence exists and you have the privileges necessary to access it. Users who perform subsequent inserts that use the <code dir="ltr">DEFAULT</code> expression must have the <code dir="ltr">INSERT</code> privilege on the table and the <code dir="ltr">SELECT</code> privilege on the sequence. If the sequence is later dropped, then subsequent <code dir="ltr">INSERT</code> statements where the <code dir="ltr">DEFAULT</code> expression is used will result in an error. If you do not fully qualify the sequence by specifying the sequence owner, for example, <code dir="ltr">SCOTT</code>.<code dir="ltr">SEQ1</code>, then Oracle Database will default the sequence owner to be the user who issues the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement. For example, if user <code dir="ltr">MARY</code> creates <code dir="ltr">SCOTT</code>.<code dir="ltr">TABLE</code> and refers to a sequence that is not fully qualified, such as <code dir="ltr">SEQ2</code>, then the column will use sequence <code dir="ltr">MARY</code>.<code dir="ltr">SEQ2</code>. Synonyms on sequences undergo a full name resolution and are stored as the fully qualified sequence in the data dictionary; this is true for public and private synonyms. For example, if user <code dir="ltr">BETH</code> adds a column referring to public or private synonym <code dir="ltr">SYN1</code> and the synonym refers to <code dir="ltr">PETER</code>.<code dir="ltr">SEQ7</code>, then the column will store <code dir="ltr">PETER</code>.<code dir="ltr">SEQ7</code> as the default.</p>
<p><a id="SQLRF54459"></a><span class="subhead3">Restrictions on Default Column Values&nbsp;</span>Default column values are subject to the following restrictions:</p>
<ul>
<li>
<p>A <code dir="ltr">DEFAULT</code> expression cannot contain references to PL/SQL functions or to other columns, the pseudocolumns <code dir="ltr">LEVEL</code>, <code dir="ltr">PRIOR</code>, and <code dir="ltr">ROWNUM</code>, or date constants that are not fully specified.</p>
</li>
<li>
<p>The expression can be of any form except a scalar subquery expression.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="expressions001.htm#i1002626">&#34;About SQL Expressions&#34;</a> for the syntax of <code dir="ltr"><span class="codeinlineitalic">expr</span></code></div>
<p><a id="CJABFBAA"></a><a id="SQLRF55628"></a><span class="subhead3">ON NULL&nbsp;</span>If you specify the <code dir="ltr">ON</code> <code dir="ltr">NULL</code> clause, then Oracle Database assigns the <code dir="ltr">DEFAULT</code> column value when a subsequent <code dir="ltr">INSERT</code> statement attempts to assign a value that evaluates to NULL.</p>
<p>When you specify <code dir="ltr">ON</code> <code dir="ltr">NULL</code>, the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint and <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> constraint state are implicitly specified. If you specify an inline constraint that conflicts with <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> and <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code>, then an error is raised.</p>
<p><a id="SQLRF57042"></a><span class="subhead3">Restriction on the ON NULL Clause&nbsp;</span>You cannot specify this clause for an object type column or a REF column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CJAIGEJE">&#34;Creating a Table with a DEFAULT ON NULL Column Value: Example&#34;</a></div>
<p class="subhead2"><a id="CJAHJHJC"></a><a id="SQLRF55657"></a><span class="italic">identity_clause</span><a id="sthref5640"></a></p>
<p>Use this clause to specify an identity column. The identity column will be assigned an increasing or decreasing integer value from a sequence generator for each subsequent <code dir="ltr">INSERT</code> statement. You can use the <code dir="ltr"><span class="codeinlineitalic">identity_options</span></code> clause to configure the sequence generator.</p>
<p><a id="SQLRF55658"></a><span class="subhead3">ALWAYS&nbsp;</span>If you specify <code dir="ltr">ALWAYS</code>, then Oracle Database always uses the sequence generator to assign a value to the column. If you attempt to explicitly assign a value to the column using <code dir="ltr">INSERT</code> or <code dir="ltr">UPDATE</code>, then an error will be returned. This is the default.</p>
<p><a id="SQLRF55659"></a><span class="subhead3">BY DEFAULT&nbsp;</span>If you specify <code dir="ltr">BY</code> <code dir="ltr">DEFAULT</code>, then Oracle Database uses the sequence generator to assign a value to the column by default, but you can also explicitly assign a specified value to the column. If you specify <code dir="ltr">ON</code> <code dir="ltr">NULL</code>, then Oracle Database uses the sequence generator to assign a value to the column when a subsequent <code dir="ltr">INSERT</code> statement attempts to assign a value that evaluates to NULL.</p>
<p class="subhead2"><a id="CJAIJGEG"></a><a id="SQLRF55660"></a><span class="italic">identity_options</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">identity_options</span></code> clause to configure the sequence generator. The <code dir="ltr"><span class="codeinlineitalic">identity_options</span></code> clause has the same parameters as the <code dir="ltr">CREATE</code> <code dir="ltr">SEQUENCE</code> statement. Refer to <a href="statements_6017.htm#i2067093">CREATE SEQUENCE</a> for a full description of these parameters and characteristics. The exception is <code dir="ltr">START</code> <code dir="ltr">WITH</code> <code dir="ltr">LIMIT VALUE</code>, which is specific to <code dir="ltr"><span class="codeinlineitalic">identity_options</span></code> and can only be used with <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">MODIFY</code>. Refer to <a href="statements_3001.htm#CJABEJEF"><span class="xreftitleitalic"><span class="italic">identity_options</span></span></a> for more information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you create an identity column, Oracle recommends that you specify the <code dir="ltr">CACHE</code> clause with a value higher than the default of 20 to enhance performance.</div>
<p><a id="SQLRF55661"></a><span class="subhead3">Restrictions on Identity Columns&nbsp;</span>Identity columns are subject to the following restrictions:</p>
<ul>
<li>
<p>You can specify only one identity column per table.</p>
</li>
<li>
<p>If you specify <code dir="ltr"><span class="codeinlineitalic">identity_clause</span></code>, then you must specify a numeric data type for <code dir="ltr"><span class="codeinlineitalic">datatype</span></code> in the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause. You cannot specify a user-defined data type.</p>
</li>
<li>
<p>If you specify <code dir="ltr"><span class="codeinlineitalic">identity_clause</span></code>, then you cannot specify the <code dir="ltr">DEFAULT</code> clause in the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause.</p>
</li>
<li>
<p>When you specify <code dir="ltr"><span class="codeinlineitalic">identity_clause</span></code>, the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint and <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> constraint state are implicitly specified. If you specify an inline constraint that conflicts with <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> and <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code>, then an error is raised.</p>
</li>
<li>
<p>If an identity column is encrypted, then the encryption algorithm may be inferred. Oracle recommends that you use a strong encryption algorithm on identity columns.</p>
</li>
<li>
<p><code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> will not inherit the identity property on a column.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CJAHCAFF">&#34;Creating a Table with an Identity Column: Examples&#34;</a></div>
<p class="subhead2"><a id="CEGDFHBD"></a><a id="SQLRF54460"></a><span class="italic">encryption_spec</span> <a id="sthref5641"></a><a id="sthref5642"></a></p>
<p>The <code dir="ltr">ENCRYPT</code> clause lets you use the Transparent Data Encryption (TDE) feature to encrypt the column you are defining. You can encrypt columns of type <code dir="ltr">CHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">DATE</code>, LOB, and <code dir="ltr">RAW</code>. The data does not appear in its encrypted form to authorized users, such as the user who encrypts the column.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Column encryption requires that a system administrator with appropriate privileges has initialized the security module, opened a keystore, and set an encryption key. Refer to <a class="olink ASOAG10137" href="../ASOAG/introduction-to-transparent-data-encryption.htm#ASOAG10137"><span class="italic">Oracle Database Advanced Security Guide</span></a> for general information about column encryption and to <a href="statements_2017.htm#BGBCEDHJ"><span class="xreftitleitalic"><span class="italic">security_clauses</span></span></a> for related <code dir="ltr">ALTER</code> <code dir="ltr">SYSTEM</code> statements.</div>
<p><a id="SQLRF54461"></a><span class="subhead3">USING &#39;<span class="italic">encrypt_algorithm</span>&#39;&nbsp;</span>Use this clause to specify the name of the algorithm to be used. Valid algorithms are <code dir="ltr">AES256</code>, <code dir="ltr">AES192</code>, <code dir="ltr">AES128</code> and <code dir="ltr">3DES168</code>. If you omit this clause, then the database uses <code dir="ltr">AES192</code>. If you encrypt more than one column in the same table, and if you specify the <code dir="ltr">USING</code> clause for one of the columns, then you must specify the same encryption algorithm for all the encrypted columns.</p>
<p><a id="SQLRF54462"></a><span class="subhead3">IDENTIFIED BY <span class="italic">password</span>&nbsp;</span>If you specify this clause, then the database derives the column key from the specified password.</p>
<p><a id="SQLRF55611"></a><span class="subhead3">&#39;<span class="italic">integrity_algorithm</span>&#39;&nbsp;</span>Use this clause to specify the integrity algorithm to be used. Valid integrity algorithms are <code dir="ltr">SHA-1</code> and <code dir="ltr">NOMAC</code>.</p>
<ul>
<li>
<p>If you specify <code dir="ltr">SHA-1</code>, then TDE uses the Secure Hash Algorithm (SHA-1) and adds a 20-byte Message Authentication Code (MAC) to each encrypted value for integrity checking. This is the default.</p>
</li>
<li>
<p>If you specify <code dir="ltr">NOMAC</code>, then TDE does not add a MAC and does not perform the integrity check. This saves 20 bytes of disk space per encrypted value. Refer to <a class="olink ASOAG10146" href="../ASOAG/configuring-transparent-data-encryption.htm#ASOAG10146"><span class="italic">Oracle Database Advanced Security Guide</span></a> for more information on using <code dir="ltr">NOMAC</code> to save disk space and improve performance.</p>
</li>
</ul>
<p>All encrypted columns in a table must use the same integrity algorithm. If you already have a table column using the <code dir="ltr">SHA-1</code> algorithm, then you cannot use the <code dir="ltr">NOMAC</code> parameter to encrypt another column in the same table. Refer to the <a href="statements_3001.htm#CJAEGJGI">REKEY <span class="italic">encryption_spec</span></a> clause of <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> to learn how to change the integrity algorithm used by all encrypted columns in a table.</p>
<p><a id="SQLRF54463"></a><span class="subhead3">SALT | NO SALT&nbsp;</span>Specify <code dir="ltr">SALT</code> to instruct the database to append a random string, called &#34;salt,&#34; to the clear text of the column before encrypting it. This is the default.</p>
<p>Specify <code dir="ltr">NO</code> <code dir="ltr">SALT</code> to prevent the database from appending salt to the clear text of the column before encrypting it.</p>
<p>The following considerations apply when specifying <code dir="ltr">SALT</code> or <code dir="ltr">NO</code> <code dir="ltr">SALT</code> for encrypted columns:</p>
<ul>
<li>
<p>If you want to use the column as an index key, then you must specify <code dir="ltr">NO</code> <code dir="ltr">SALT</code>. Refer to <a class="olink ASOAG9538" href="../ASOAG/configuring-transparent-data-encryption.htm#ASOAG9538"><span class="italic">Oracle Database Advanced Security Guide</span></a> for a description of &#34;salt&#34; in this context.</p>
</li>
<li>
<p>If you specify table compression for the table, then the database does not compress the data in encrypted columns with <code dir="ltr">SALT</code>.</p>
</li>
</ul>
<p>You cannot specify <code dir="ltr">SALT</code> or <code dir="ltr">NO</code> <code dir="ltr">SALT</code> for LOB encryption.</p>
<p><a id="SQLRF54464"></a><span class="subhead3">Restrictions on <span class="italic">encryption_spec</span>:&nbsp;</span>The following restrictions apply to column encryption:</p>
<ul>
<li>
<p>Transparent Data Encryption is not supported by the traditional import and export utilities or by transportable-tablespace-based export. Use the Data Pump import and export utilities with encrypted columns instead.</p>
</li>
<li>
<p>To encrypt a column in an external table, the table must use <code dir="ltr">ORACLE_DATAPUMP</code> as its access type.</p>
</li>
<li>
<p>You cannot encrypt a column in tables owned by <code dir="ltr">SYS</code>.</p>
</li>
<li>
<p>You cannot encrypt a foreign key column.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ASOAG021" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ASOAG021"><span class="italic">Oracle Database Advanced Security Guide</span></a> for more information about Transparent Data Encryption</div>
<p class="subhead1"><a id="BABIJABG"></a><a id="SQLRF54465"></a><span class="italic">virtual_column_definition <a id="sthref5643"></a><a id="sthref5644"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">virtual_column_definition</span></code> clause lets you create a virtual column. A virtual column is not stored on disk. Rather, the database derives the values in a virtual column on demand by computing a set of expressions or functions. Virtual columns can be used in queries, DML, and DDL statements. They can be indexed, and you can collect statistics on them. Thus, they can be treated much as other columns. Exceptions and restrictions are listed below in <a href="#BABIJIHJ">&#34;Notes on Virtual Columns&#34;</a> and <a href="#BABIIGBD">&#34;Restrictions on Virtual Columns&#34;</a>.</p>
<p><a id="SQLRF56307"></a><span class="subhead3"><span class="italic">column</span>&nbsp;</span>For <code dir="ltr"><span class="codeinlineitalic">column</span></code>, specify the name of the virtual column.</p>
<p><a id="SQLRF56308"></a><span class="subhead3"><span class="italic">datatype</span>&nbsp;</span>You can optionally specify the data type of the virtual column. If you omit <code dir="ltr"><span class="codeinlineitalic">datatype</span></code>, then the database determines the data type of the column based on the data type of the underlying expressions. All Oracle scalar data types and <code dir="ltr">XMLType</code> are supported.</p>
<p><a id="CJAGHAJC"></a><a id="SQLRF56388"></a><span class="subhead3">VISIBLE | INVISIBLE&nbsp;</span>Use this clause to specify whether virtual column is <code dir="ltr">VISIBLE</code> or <code dir="ltr">INVISIBLE</code>. The default is <code dir="ltr">VISIBLE</code>. For complete information, refer to <a href="#CJAGDBIC">&#34;VISIBLE | INVISIBLE&#34;</a>.</p>
<p><a id="SQLRF56309"></a><span class="subhead3">GENERATED ALWAYS&nbsp;</span>The optional keywords <code dir="ltr">GENERATED</code> <code dir="ltr">ALWAYS</code> are provided for semantic clarity. They indicate that the column is not stored on disk, but is evaluated on demand.</p>
<p><a id="SQLRF56310"></a><span class="subhead3"><span class="italic">column_expression</span>&nbsp;</span>The <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> clause determines the content of the column. Refer to <a href="expressions005.htm#BABIGHHI">&#34;Column Expressions&#34;</a> for more information on <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code>.</p>
<p><a id="SQLRF56311"></a><span class="subhead3">VIRTUAL&nbsp;</span>The optional keyword <code dir="ltr">VIRTUAL</code> is provided for semantic clarity.</p>
<p><a id="CJAFBHGE"></a><a id="SQLRF56312"></a><span class="subhead3"><span class="italic">evaluation_edition_clause</span>&nbsp;</span>You must specify this clause if <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> refers to an editioned PL/SQL function. Use this clause to specify the edition that is searched during name resolution of the editioned PL/SQL function&mdash;the evaluation edition.</p>
<ul>
<li>
<p>Specify <code dir="ltr">CURRENT</code> <code dir="ltr">EDITION</code> to search the edition in which this DDL statement is executed.</p>
</li>
<li>
<p>Specify <code dir="ltr">EDITION</code> <code dir="ltr"><span class="codeinlineitalic">edition</span></code> to search <code dir="ltr"><span class="codeinlineitalic">edition</span></code>.</p>
</li>
<li>
<p>Specifying <code dir="ltr">NULL</code> <code dir="ltr">EDITION</code> is equivalent to omitting the <code dir="ltr"><span class="codeinlineitalic">evaluation_edition_clause</span></code>.</p>
</li>
</ul>
<p>If you omit the <code dir="ltr"><span class="codeinlineitalic">evaluation_edition_clause</span></code>, then editioned objects are invisible during name resolution and an error will result. If the evaluation edition is dropped, then a subsequent query on the virtual column will result in an error.</p>
<p>The database does not maintain dependencies on the functions referenced by a virtual column. Therefore, if a virtual column refers to a noneditioned function, and the function becomes editioned, then the following operations may raise an error:</p>
<ul>
<li>
<p>Querying the virtual column</p>
</li>
<li>
<p>Updating a row that includes the virtual column</p>
</li>
<li>
<p>Firing a trigger that accesses the virtual column</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS1328" href="../ADFNS/adfns_editions.htm#ADFNS1328"><span class="italic">Oracle Database Development Guide</span></a> for more information on specifying the evaluation edition for a virtual column</div>
<p><a id="CJAEAAJC"></a><a id="SQLRF56389"></a><span class="subhead3"><span class="italic">unusable_editions_clause</span>&nbsp;</span>This clause lets you specify that the virtual column expression is unusable for evaluating queries in one or more editions. The remaining editions form a range of editions in which it is safe for the optimizer to use the virtual column expression to evaluate queries.</p>
<p>For example, suppose you define a function-based index on the virtual column. The optimizer can use the function-based index to evaluate queries that contain the virtual column expression in their <code dir="ltr">WHERE</code> clause. If a query is compiled in an edition that is in the usable range of editions for the virtual column, then the optimizer will consider using the index to evaluate the query. If a query is compiled in an edition outside the usable range of editions for the virtual column, then the optimizer will not consider using the index.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT1163" href="../CNCPT/indexiot.htm#CNCPT1163"><span class="italic">Oracle Database Concepts</span></a> for more information on optimization with function-based indexes</div>
<p><a id="SQLRF56390"></a><span class="subhead3">UNUSABLE BEFORE Clause&nbsp;</span>This clause lets you specify that the virtual column expression is unusable for evaluating queries in the ancestors of an edition.</p>
<ul>
<li>
<p>If you specify <code dir="ltr">CURRENT</code> <code dir="ltr">EDITION</code>, then the virtual column expression is unusable in the ancestors of the edition in which this DDL statement is executed.</p>
</li>
<li>
<p>If you specify <code dir="ltr">EDITION</code> <code dir="ltr"><span class="codeinlineitalic">edition</span></code>, then the virtual column expression is unusable in the ancestors of the specified <code dir="ltr"><span class="codeinlineitalic">edition</span></code>.</p>
</li>
</ul>
<p><a id="SQLRF56391"></a><span class="subhead3">UNUSABLE BEGINNING WITH Clause&nbsp;</span>This clause lets you specify that the virtual column expression is unusable for evaluating queries in an edition and its descendants.</p>
<ul>
<li>
<p>If you specify <code dir="ltr">CURRENT</code> <code dir="ltr">EDITION</code>, then the virtual column expression is unusable in the edition in which this DDL statement is executed and its descendants.</p>
</li>
<li>
<p>If you specify <code dir="ltr">EDITION</code> <code dir="ltr"><span class="codeinlineitalic">edition</span></code>, then the virtual column expression is unusable in the specified <code dir="ltr"><span class="codeinlineitalic">edition</span></code> and its descendants.</p>
</li>
<li>
<p>Specifying <code dir="ltr">NULL</code> <code dir="ltr">EDITION</code> is equivalent to omitting the <code dir="ltr">UNUSABLE</code> <code dir="ltr">BEGINNING</code> <code dir="ltr">WITH</code> clause.</p>
</li>
</ul>
<p>If an edition specified in this clause is subsequently dropped, there is no effect on the virtual column.</p>
<p class="subhead2"><a id="BABIJIHJ"></a><a id="SQLRF54466"></a>Notes on Virtual Columns</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> refers to a column on which column-level security is implemented, then the virtual column does not inherit the security rules of the base column. In such a case, you must ensure that data in the virtual column is protected, either by duplicating a column-level security policy on the virtual column or by applying a function that implicitly masks the data. For example, it is common for credit card numbers to be protected by a column-level security policy, while still allowing call center employees to view the last four digits of the credit card number for validation purposes. In such a case, you could define the virtual column to take a substring of the last four digits of the credit card number.</p>
</li>
<li>
<p>A table index defined on a virtual column is equivalent to a function-based index on the table.</p>
</li>
<li>
<p>You cannot directly update a virtual column. Thus, you cannot specify a virtual column in the <code dir="ltr">SET</code> clause of an <code dir="ltr">UPDATE</code> statement. However, you can specify a virtual column in the <code dir="ltr">WHERE</code> clause of an <code dir="ltr">UPDATE</code> statement. Likewise, you can specify a virtual column in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">DELETE</code> statement to delete rows from a table based on the derived value of the virtual column.</p>
</li>
<li>
<p>A query that specifies in its <code dir="ltr">FROM</code> clause a table containing a virtual column is eligible for result caching. Refer to <a href="sql_elements006.htm#BABIFIGC">&#34;RESULT_CACHE Hint&#34;</a> for more information on result caching.</p>
</li>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> can refer to a PL/SQL function if the function is explicitly designated <code dir="ltr">DETERMINISTIC</code> during its creation. However, if the function is subsequently replaced, definitions dependent on the virtual column are not invalidated. In such a case, if the table contains data, queries that reference the virtual column may return incorrect results if the virtual column is used in the definition of constraints, indexes, or materialized views or for result caching. Therefore, in order to replace the deterministic PL/SQL function for a virtual column.</p>
<ul>
<li>
<p>Disable and re-enable any constraints on the virtual column.</p>
</li>
<li>
<p>Rebuild any indexes on the virtual column.</p>
</li>
<li>
<p>Fully refresh materialized views accessing the virtual column.</p>
</li>
<li>
<p>Flush the result cache if cached queries have accessed the virtual column.</p>
</li>
<li>
<p>Regather statistics on the table.</p>
</li>
</ul>
</li>
<li>
<p>A virtual column can be an <code dir="ltr">INVISIBLE</code> column. The <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> can contain <code dir="ltr">INVISIBLE</code> columns.</p>
</li>
</ul>
<p class="subhead2"><a id="BABIIGBD"></a><a id="SQLRF54467"></a>Restrictions on Virtual Columns</p>
<ul>
<li>
<p>You can create virtual columns only in relational heap tables. Virtual columns are not supported for index-organized, external, object, cluster, or temporary tables.</p>
</li>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> in the <code dir="ltr">AS</code> clause has the following restrictions:</p>
<ul>
<li>
<p>It cannot refer to another virtual column by name.</p>
</li>
<li>
<p>Any columns referenced in <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> must be defined on the same table.</p>
</li>
<li>
<p>It can refer to a deterministic user-defined function, but if it does, then you cannot use the virtual column as a partitioning key column.</p>
</li>
<li>
<p>The output of <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> must be a scalar value.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="expressions005.htm#BABIGHHI">&#34;Column Expressions&#34;</a> for additional information and restrictions on <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code></div>
</li>
<li>
<p>The virtual column cannot be an Oracle supplied data type, a user-defined type, or LOB or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>.</p>
</li>
<li>
<p>You cannot specify a call to a PL/SQL function in the defining expression for a virtual column that you want to use as a partitioning column.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_3001.htm#BABIDDJJ">&#34;Adding a Virtual Table Column: Example&#34;</a> and <a class="olink ADMIN11004" href="../ADMIN/tables.htm#ADMIN11004"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for examples of creating tables with virtual columns</div>
<p class="subhead2"><a id="CJADHJHB"></a><a id="SQLRF56431"></a><span class="italic">period_definition</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">period_definition</span></code> clause to create a valid time dimension for <code dir="ltr"><span class="codeinlineitalic">table</span></code>.</p>
<p>This clause implements Temporal Validity support for <code dir="ltr"><span class="codeinlineitalic">table</span></code>. If you specify this clause, then one column in <code dir="ltr"><span class="codeinlineitalic">table</span></code>, the start time column, contains a start date or timestamp, and another column in <code dir="ltr"><span class="codeinlineitalic">table</span></code>, the end time column, contains an end date or timestamp. These two columns define a valid time dimension for <code dir="ltr"><span class="codeinlineitalic">table</span></code>&mdash;that is, a period of time for which each row is considered valid. You can use Oracle Flashback Query to retrieve rows from <code dir="ltr"><span class="codeinlineitalic">table</span></code> based on whether they are considered valid as of a specified time, before a specified time, or during a specified time period.</p>
<p>You can specify at most one valid time dimension when you create a table. You can subsequently add additional valid time dimensions to a table with the <a href="statements_3001.htm#CJAEGCFI"><span class="xreftitleitalic"><span class="italic">add_period_clause</span></span></a> of <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>.</p>
<p><a id="SQLRF56432"></a><span class="subhead3"><span class="italic">valid_time_column</span>&nbsp;</span>Specify the name of the valid time dimension. The name must satisfy the requirements listed in <a href="sql_elements008.htm#i27570">&#34;Database Object Naming Rules&#34;</a>. Oracle Database creates an <code dir="ltr">INVISIBLE</code> virtual column with this name of data type <code dir="ltr">NUMBER</code> in <code dir="ltr"><span class="codeinlineitalic">table</span></code>.</p>
<p><a id="SQLRF56433"></a><span class="subhead3"><span class="italic">start_time_column</span> and <span class="italic">end_time_column</span>&nbsp;</span>You can optionally specify these clauses as follows:</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">start_time_column</span></code> to specify the name of the start time column, which contains the start date or timestamp.</p>
</li>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">end_time_column</span></code> to specify the name of the end time column, which contains the end date or timestamp.</p>
</li>
</ul>
<p>The names you specify for <code dir="ltr"><span class="codeinlineitalic">start_time_column</span></code> and <code dir="ltr"><span class="codeinlineitalic">end_time_column</span></code> must satisfy the requirements listed in <a href="sql_elements008.htm#i27570">&#34;Database Object Naming Rules&#34;</a>.</p>
<p>If you specify these clauses, then you must define <code dir="ltr"><span class="codeinlineitalic">start_time_column</span></code> and <code dir="ltr"><span class="codeinlineitalic">end_time_column</span></code> in the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> clause of <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code>. Each column must be of a datetime data type (<code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>, or <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>) and can be <code dir="ltr">VISIBLE</code> or <code dir="ltr">INVISIBLE</code>.</p>
<p>If you do not specify these clauses, then Oracle Database creates a start time column named <code dir="ltr"><span class="codeinlineitalic">valid_time_column</span></code><code dir="ltr">_START</code>, and an end time column named <code dir="ltr"><span class="codeinlineitalic">valid_time_column</span></code><code dir="ltr">_END</code>. These columns are of data type <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> and are <code dir="ltr">INVISIBLE</code>.</p>
<p>You can insert and update values in the start time column and end time column as you would any column, with the following considerations:</p>
<ul>
<li>
<p>If the value of the start time column is NULL, then the row is considered valid for all time values that occur before, but not including, the value of the end time column.</p>
</li>
<li>
<p>If the value of the end time column is NULL, then the row is considered valid for all time values that occur on or after the value of the start time column.</p>
</li>
<li>
<p>If the value of neither column is NULL, then the value of the start time column must be earlier than the value of the end time column. The row is considered valid for all time values that occur on or after the value of the start time column, and up to, but not including, the value of the end time column.</p>
</li>
<li>
<p>If the value of both columns is NULL, then the row is considered valid for all time values.</p>
</li>
</ul>
<p><a id="SQLRF56434"></a><span class="subhead3">Restrictions on Valid Time Dimension Columns&nbsp;</span>The following restrictions apply to valid time dimension columns:</p>
<ul>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">valid_time_column</span></code> is for internal use only. You cannot perform DDL or DML operations on it with one exception: You can drop the column by using the <code dir="ltr"><span class="codeinlineitalic">drop_period_clause</span></code> of <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>.</p>
</li>
<li>
<p>You can drop the start time column and end time column only by using the <code dir="ltr"><span class="codeinlineitalic">drop_period_clause</span></code> of <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>.</p>
</li>
<li>
<p>If the start time column and end time column are automatically created by Oracle Database, then they are <code dir="ltr">INVISIBLE</code> and you cannot subsequently make them <code dir="ltr">VISIBLE</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS967" href="../ADFNS/adfns_design.htm#ADFNS967"><span class="italic">Oracle Database Development Guide</span></a> for more information on Temporal Validity</p>
</li>
<li>
<p><code dir="ltr">SELECT</code> <a href="statements_10002.htm#i2112818"><span class="xreftitleitalic"><span class="italic">flashback_query_clause</span></span></a> for more information on Oracle Flashback Query</p>
</li>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <a href="statements_3001.htm#CJAEGCFI"><span class="xreftitleitalic"><span class="italic">add_period_clause</span></span></a> and <a href="statements_3001.htm#CJAJHJEJ"><span class="xreftitleitalic"><span class="italic">drop_period_clause</span></span></a> for information how to add and drop a valid time dimension</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="SQLRF54468"></a>Constraint Clauses</p>
<p>Use these clauses to create constraints on the table columns. You must specify a <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> constraint for an index-organized table, and it cannot be <code dir="ltr">DEFERRABLE</code>. Refer to <a href="clauses002.htm#g1053592"><span class="xreftitleitalic"><span class="italic">constraint</span></span></a> for syntax and description of these constraints as well as examples.</p>
<p><a id="i2219054"></a><a id="SQLRF54469"></a><span class="subhead3"><span class="italic">inline_ref_constraint</span> and <span class="italic">out_of_line_ref_constraint <a id="sthref5645"></a><a id="sthref5646"></a><a id="sthref5647"></a><a id="sthref5648"></a><a id="sthref5649"></a><a id="sthref5650"></a></span>&nbsp;</span>These clauses let you describe a column of type <code dir="ltr">REF</code>. The only difference between these clauses is that you specify <code dir="ltr"><span class="codeinlineitalic">out_of_line_ref_constraint</span></code> from the table level, so you must identify the <code dir="ltr">REF</code> column or attribute you are defining. Specify <code dir="ltr"><span class="codeinlineitalic">inline_ref_constraint</span></code> as part of the definition of the <code dir="ltr">REF</code> column or attribute.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clauses002.htm#i1015744">&#34;REF Constraint Examples&#34;</a></div>
<p><a id="SQLRF54470"></a><span class="subhead3"><span class="italic">inline_constrai<a id="sthref5651"></a><a id="sthref5652"></a><a id="sthref5653"></a>nt <a id="sthref5654"></a><a id="sthref5655"></a><a id="sthref5656"></a><a id="sthref5657"></a><a id="sthref5658"></a></span>&nbsp;</span>Use the <code dir="ltr"><span class="codeinlineitalic">inline_constraint</span></code> to define an integrity constraint as part of the column definition.</p>
<p>You can create <code dir="ltr">UNIQUE</code>, <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code>, and <code dir="ltr">REFERENCES</code> constraints on scalar attributes of object type columns. You can also create <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints on object type columns and <code dir="ltr">CHECK</code> constraints that reference object type columns or any attribute of an object type column.</p>
<p><a id="SQLRF54471"></a><span class="subhead3"><span class="italic">out_of_line_constraint <a id="sthref5659"></a><a id="sthref5660"></a></span>&nbsp;</span>Use the <code dir="ltr"><span class="codeinlineitalic">out_of_line_constraint</span></code> syntax to define an integrity constraint as part of the table definition.</p>
<p class="subhead2"><a id="i2159548"></a><a id="SQLRF54472"></a><span class="italic">supplemental_logging_props <a id="sthref5661"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">supplemental_logging_props</span></code> clause lets you instruct the database to put additional data into the log stream to support log-based tools.</p>
<p><a id="i2209474"></a><a id="SQLRF54473"></a><span class="subhead3"><span class="italic">supplemental_log_grp_clause</span>&nbsp;</span>Use this clause to create a named log group.</p>
<ul>
<li>
<p>The <code dir="ltr">NO</code> <code dir="ltr">LOG</code> clause lets you omit from the redo log one or more columns that would otherwise be included in the redo for the named log group. You must specify at least one fixed-length column without <code dir="ltr">NO</code> <code dir="ltr">LOG</code> in the named log group.</p>
</li>
<li>
<p>If you specify <code dir="ltr">ALWAYS</code>, then during an update, the database includes in the redo all columns in the log group. This is called an <span class="bold">unconditional log group</span> (sometimes called an &#34;always log group&#34;), because Oracle Database supplementally logs all the columns in the log group when the associated row is modified. If you omit <code dir="ltr">ALWAYS</code>, then the database supplementally logs all the columns in the log group only if any column in the log group is modified. This is called a <span class="bold">conditional log group</span>.</p>
</li>
</ul>
<p>You can query the appropriate <code dir="ltr">USER_</code>, <code dir="ltr">ALL_</code>, or <code dir="ltr">DBA_LOG_GROUP_COLUMNS</code> data dictionary view to determine whether any supplemental logging has already been specified.</p>
<p><a id="i2215249"></a><a id="SQLRF54474"></a><span class="subhead3"><span class="italic">supplemental_id_key_clause</span>&nbsp;</span>Use this clause to specify that all or a combination of the primary key, unique key, and foreign key columns should be supplementally logged. Oracle Database will generate either an <span class="bold">unconditional log group</span> or a <span class="bold">conditional log group</span>. With an unconditional log group, the database supplementally logs all the columns in the log group when the associated row is modified. With a conditional log group, the database supplementally logs all the columns in the log group only if any column in the log group is modified.</p>
<ul>
<li>
<p>If you specify <code dir="ltr">ALL</code> <code dir="ltr">COLUMNS</code>, then the database includes in the redo log all the fixed-length maximum size columns of that row. Such a redo log is a system-generated unconditional log group.</p>
</li>
<li>
<p>If you specify <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> <code dir="ltr">COLUMNS</code>, then for all tables with a primary key, the database places into the redo log all columns of the primary key whenever an update is performed. Oracle Database evaluates which columns to supplementally log as follows:</p>
<ul>
<li>
<p>First the database chooses columns of the primary key constraint, if the constraint is validated or marked <code dir="ltr">RELY</code> and is not marked as <code dir="ltr">DISABLED</code> or <code dir="ltr">INITIALLY</code> <code dir="ltr">DEFERRED</code>.</p>
</li>
<li>
<p>If no primary key columns exist, then the database looks for the smallest <code dir="ltr">UNIQUE</code> index with at least one <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> column and uses the columns in that index.</p>
</li>
<li>
<p>If no such index exists, then the database supplementally logs all scalar columns of the table.</p>
</li>
</ul>
</li>
<li>
<p>If you specify <code dir="ltr">UNIQUE</code> <code dir="ltr">COLUMNS</code>, then for all tables with a unique key or a bitmap index, if any of the unique key or bitmap index columns are modified, the database places into the redo log all other columns belonging to the unique key or bitmap index. Such a log group is a system-generated conditional log group.</p>
</li>
<li>
<p>If you specify <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> <code dir="ltr">COLUMNS</code>, then for all tables with a foreign key, if any foreign key columns are modified, the database places into the redo log all other columns belonging to the foreign key. Such a redo log is a system-generated conditional log group.</p>
</li>
</ul>
<p>If you specify this clause multiple times, then the database creates a separate log group for each specification. You can query the appropriate <code dir="ltr">USER_</code>, <code dir="ltr">ALL_</code>, or <code dir="ltr">DBA_LOG_GROUPS</code> data dictionary view to determine whether any supplemental logging data has already been specified.</p>
<p class="subhead2"><a id="i2189569"></a><a id="SQLRF54475"></a>ON <a id="sthref5662"></a><a id="sthref5663"></a>COMMIT</p>
<p>The <code dir="ltr">ON</code> <code dir="ltr">COMMIT</code> clause is relevant only if you are creating a temporary table. This clause specifies whether the data in the temporary table persists for the duration of a transaction or a session.</p>
<p><a id="SQLRF54476"></a><span class="subhead3">DELETE ROWS&nbsp;</span>Specify <code dir="ltr">DELETE</code> <code dir="ltr">ROWS</code> for a transaction-specific temporary table. This is the default. Oracle Database will truncate the table (delete all its rows) after each commit.</p>
<p><a id="SQLRF54477"></a><span class="subhead3">PRESERVE ROWS&nbsp;</span>Specify <code dir="ltr">PRESERVE</code> <code dir="ltr">ROWS</code> for a session-specific temporary table. Oracle Database will truncate the table (delete all its rows) when you terminate the session.</p>
<p class="subhead1"><a id="i2128663"></a><a id="SQLRF54478"></a><span class="italic">physical_properties</span></p>
<p>The physical properties relate to the treatment of extents and segments and to the storage characteristics of the table.</p>
<p class="subhead2"><a id="CEGJHDEB"></a><a id="SQLRF30035"></a><span class="italic">deferred_segment_creation</span></p>
<p>Use this clause to determine when the database should create the segment(s) for this table:</p>
<ul>
<li>
<p><code dir="ltr">SEGMENT</code> <code dir="ltr">CREATION</code> <code dir="ltr">DEFERRED</code>: This clause defers creation of the table segment &mdash; as well as segments for any LOB columns of the table, any indexes created implicitly as part of table creation, and any indexes subsequently explicitly created on the table &mdash; until the first row of data is inserted into the table. At that time, the segments for the table, LOB columns and indexes, and explicitly created indexes are all materialized and inherit any storage properties specified in this <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement or, in the case of explicitly created indexes, the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement. These segments are created regardless whether the initial insert operation is uncommitted or rolled back. This is the default value.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
When creating many tables with deferred segment creation, ensure that you allocate enough space for your database so that when the first rows are inserted, there is enough space for all the new segments.</div>
</li>
<li>
<p><code dir="ltr">SEGMENT</code> <code dir="ltr">CREATION</code> <code dir="ltr">IMMEDIATE</code>: The table segment is created as part of this <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement.</p>
</li>
</ul>
<p>Immediate segment creation is useful, for example, if your application depends upon the object appearing in the <code dir="ltr">DBA_</code>, <code dir="ltr">USER_</code>, and <code dir="ltr">ALL_SEGMENTS</code> data dictionary views, because the object will not appear in those views until the segment is created. This clause overrides the setting of the <code dir="ltr">DEFERRED_SEGMENT_CREATION</code> initialization parameter.</p>
<p>To determine whether a segment has been created for an existing table or its LOB columns or indexes, query the <code dir="ltr">SEGMENT_CREATED</code> column of <code dir="ltr">USER_TABLES</code>, <code dir="ltr">USER_INDEXES</code>, or <code dir="ltr">USER_LOBS</code>.</p>
<p><a id="SQLRF54479"></a><span class="subhead3">Notes on Tables Without Segments &nbsp;</span>The following rules apply to a table whose segment has not yet been materialized:</p>
<ul>
<li>
<p>If you create this table with <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>, then if the source table has no rows, segment creation of the new table is deferred. If the source table has rows, then segment creation of the new table is not deferred.</p>
</li>
<li>
<p>If you specify <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">ALLOCATE</code> <code dir="ltr">EXTENT</code> before the segment is materialized, then the segment is materialized and then an extent is allocated. However the <code dir="ltr">ALLOCATE</code> <code dir="ltr">EXTENT</code> clause in a DDL statement on any indexes of the table will return an error.</p>
</li>
<li>
<p>In a DDL statement on the table or its LOB columns or indexes, any specification of <code dir="ltr">DEALLOCATE</code> <code dir="ltr">UNUSED</code> is silently ignored.</p>
</li>
<li>
<p><code dir="ltr">ONLINE</code> operations on indexes of a table or table partition without a segment will silently be disabled; that is, they will proceed <code dir="ltr">OFFLINE</code>.</p>
</li>
<li>
<p>If any of the following DDL statements are executed on a table with one or more LOB columns, then the resulting partition(s) or subpartition(s) will be materialized:</p>
<ul>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">SPLIT</code> <code dir="ltr">[SUB]PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">MERGE</code> <code dir="ltr">[SUB]PARTITIONS</code></p>
</li>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">ADD</code> <code dir="ltr">[SUB]PARTITION</code> (hash partitions only)</p>
</li>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">COALESCE</code> <code dir="ltr">[SUB]PARTITION</code> (hash partitions only)</p>
</li>
</ul>
</li>
</ul>
<p><a id="CJAIJAHI"></a><a id="SQLRF54480"></a><span class="subhead3">Restrictions on Deferred Segment Creation&nbsp;</span>This clause is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot defer segment creation for the following types of tables: index-organized tables, clustered tables, global temporary tables, session-specific temporary tables, internal tables, object tables, <code dir="ltr">XMLType</code> tables, AQ tables, external tables, and tables owned by <code dir="ltr">SYS</code>, <code dir="ltr">SYSTEM</code>, <code dir="ltr">PUBLIC</code>, <code dir="ltr">OUTLN</code>, or <code dir="ltr">XDB</code>.</p>
</li>
<li>
<p>Deferred segment creation is not supported for bitmap join indexes and domain indexes.</p>
</li>
<li>
<p>Deferred segment creation is not supported in dictionary-managed tablespaces.</p>
</li>
<li>
<p>Deferred segment creation is not supported in the <code dir="ltr">SYSTEM</code> tablespace.</p>
</li>
<li>
<p>Serializable transactions do not work with deferred segment creation. Trying to insert data into an empty table with no segment created causes an error.</p>
</li>
<li>
<p>When a global index is marked <code dir="ltr">UNUSABLE</code> during a partition maintenance operation, the database does not drop the unusable index segments.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT304" href="../CNCPT/logical.htm#CNCPT304"><span class="italic">Oracle Database Concepts</span></a> for general information on segment allocation and <a class="olink REFRN10307" href="../REFRN/GUID-29066C9A-1CC7-48E4-A278-BB9678EE3362.htm#REFRN10307"><span class="italic">Oracle Database Reference</span></a> for more information about the <code dir="ltr">DEFERRED_SEGMENT_CREATION</code> initialization parameter</div>
<p class="subhead2"><a id="i2128666"></a><a id="SQLRF20022"></a><span class="italic">segment_attributes_clause <a id="sthref5664"></a><a id="sthref5665"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">segment_attributes_clause</span></code> lets you specify physical attributes and tablespace storage for the table.</p>
<p><a id="i2128669"></a><a id="SQLRF54481"></a><span class="subhead3"><span class="italic">physical_attributes_clause<a id="sthref5666"></a></span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">physical_attributes_clause</span></code> lets you specify the value of the <code dir="ltr">PCTFREE</code>, <code dir="ltr">PCTUSED</code>, and <code dir="ltr">INITRANS</code> parameters and the storage characteristics of the table.</p>
<ul>
<li>
<p>For a nonpartitioned table, each parameter and storage characteristic you specify determines the actual physical attribute of the segment associated with the table.</p>
</li>
<li>
<p>For partitioned tables, the value you specify for the parameter or storage characteristic is the default physical attribute of the segments associated with all partitions specified in this <code dir="ltr">CREATE</code> statement (and in subsequent <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">ADD</code> <code dir="ltr">PARTITION</code> statements), unless you explicitly override that value in the <code dir="ltr">PARTITION</code> clause of the statement that creates the partition.</p>
</li>
</ul>
<p>If you omit this clause, then Oracle Database sets <code dir="ltr">PCTFREE</code> to 10, <code dir="ltr">PCTUSED</code> to 40, and <code dir="ltr">INITRANS</code> to 1.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="clauses007.htm#g1058547"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span></span></a> and <a href="clauses007.htm#i1026834"><span class="xreftitleitalic"><span class="italic">storage_clause</span></span></a> for a description of these clauses</p>
</li>
<li>
<p><a href="#i2153121">&#34;Creating a Table: Storage Example&#34;</a></p>
</li>
</ul>
</div>
<p><a id="SQLRF54482"></a><span class="subhead3">TABLESPACE <a id="sthref5667"></a><a id="sthref5668"></a><a id="sthref5669"></a><a id="sthref5670"></a>&nbsp;</span>Specify the tablespace in which Oracle Database creates the table, object table <code dir="ltr">OIDINDEX</code>, partition, LOB data segment, LOB index segment, or index-organized table overflow data segment. If you omit <code dir="ltr">TABLESPACE</code>, then the database creates that item in the default tablespace of the owner of the schema containing the table.</p>
<p>For a heap-organized table with one or more LOB columns, if you omit the <code dir="ltr">TABLESPACE</code> clause for LOB storage, then the database creates the LOB data and index segments in the tablespace where the table is created.</p>
<p>For an index-organized table with one or more LOB columns, if you omit <code dir="ltr">TABLESPACE</code>, then the LOB data and index segments are created in the tablespace in which the primary key index segment of the index-organized table is created.</p>
<p>For nonpartitioned tables, the value specified for <code dir="ltr">TABLESPACE</code> is the actual physical attribute of the segment associated with the table. For partitioned tables, the value specified for <code dir="ltr">TABLESPACE</code> is the default physical attribute of the segments associated with all partitions specified in the <code dir="ltr">CREATE</code> statement and on subsequent <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">ADD</code> <code dir="ltr">PARTITION</code> statements, unless you specify <code dir="ltr">TABLESPACE</code> in the <code dir="ltr">PARTITION</code> description.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_7003.htm#i2231734">CREATE TABLESPACE</a> for more information on tablespaces</div>
<p class="subhead2"><a id="SQLRF54483"></a><span class="italic">logging_clause <a id="sthref5671"></a><a id="sthref5672"></a><a id="sthref5673"></a><a id="sthref5674"></a></span></p>
<p>Specify whether the creation of the table and of any indexes required because of constraints, partition, or LOB storage characteristics will be logged in the redo log file (<code dir="ltr">LOGGING</code>) or not (<code dir="ltr">NOLOGGING</code>).The logging attribute of the table is independent of that of its indexes.</p>
<p>This attribute also specifies whether subsequent direct loader (SQL*Loader) and direct-path <code dir="ltr">INSERT</code> operations against the table, partition, or LOB storage are logged (<code dir="ltr">LOGGING</code>) or not logged (<code dir="ltr">NOLOGGING</code>).</p>
<p>Refer to <a href="clauses005.htm#i999782"><span class="xreftitleitalic"><span class="italic">logging_clause</span></span></a> for a full description of this clause.</p>
<p class="subhead2"><a id="i2128733"></a><a id="SQLRF54484"></a><span class="italic">table_compression</span> <a id="sthref5675"></a><a id="sthref5676"></a><a id="sthref5677"></a><a id="sthref5678"></a><a id="sthref5679"></a></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">table_compression</span></code> clause is valid only for heap-organized tables. Use this clause to instruct the database whether to compress data segments to reduce disk use. The <code dir="ltr">COMPRESS</code> clauses enable table compression. The <code dir="ltr">NOCOMPRESS</code> clause disables table compression. The default is <code dir="ltr">NOCOMPRESS</code>.</p>
<p><a id="SQLRF56620"></a><span class="subhead3">COMPRESS&nbsp;</span>Specifying only the keyword <code dir="ltr">COMPRESS</code> is equivalent to specifying <code dir="ltr">ROW</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">BASIC</code> and enables basic table compression.</p>
<p><a id="SQLRF56041"></a><span class="subhead3">ROW STORE COMPRESS BASIC&nbsp;</span><a id="sthref5680"></a><a id="sthref5681"></a>When you enable table compression by specifying either <code dir="ltr">ROW</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> or <code dir="ltr">ROW</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">BASIC</code>, you enable <span class="bold">basic table compression</span>. Oracle Database attempts to compress data during direct-path <code dir="ltr">INSERT</code> operations when it is productive to do so. The original import utility (imp) does not support direct-path <code dir="ltr">INSERT</code>, and therefore cannot import data in a compressed format.</p>
<p>Tables with basic table compression use a <code dir="ltr">PCTFREE</code> value of 0 to maximize compression, unless you explicitly set a value for <code dir="ltr">PCTFREE</code> in the <code dir="ltr"><span class="codeinlineitalic">physical_attributes_clause</span></code>.</p>
<p>In earlier releases, basic table compression was enabled using <code dir="ltr">COMPRESS</code> <code dir="ltr">BASIC</code>. This syntax is still supported for backward compatibility.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_9015.htm#i2191836">&#34;Conventional and Direct-Path INSERT&#34;</a> for information on direct-path <code dir="ltr">INSERT</code> operations, including restrictions</div>
<p><a id="SQLRF56042"></a><span class="subhead3">ROW STORE COMPRESS ADVANCED&nbsp;</span><a id="sthref5682"></a><a id="sthref5683"></a>When you enable table compression by specifying <code dir="ltr">ROW</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">ADVANCED</code>, you enable <span class="bold">Advanced Row Compression</span>. Oracle Database compresses data during all DML operations on the table. This form of compression is recommended for OLTP environments.</p>
<p>Tables with <code dir="ltr">ROW</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">ADVANCED</code> or <code dir="ltr">NOCOMPRESS</code> use the <code dir="ltr">PCTFREE</code> default value of 10, to maximize compress while still allowing for some future DML changes to the data, unless you override this default explicitly.</p>
<p>In earlier releases, Advanced Row Compression was called OLTP table compression and was enabled using <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">OLTP</code>. This syntax is still supported for backward compatibility.</p>
<p><a id="CJAJAGFB"></a><a id="SQLRF56043"></a><span class="subhead3">COLUMN STORE COMPRESS FOR { QUERY | ARCHIVE }&nbsp;</span><a id="sthref5684"></a><a id="sthref5685"></a><a id="sthref5686"></a><a id="sthref5687"></a>When you specify <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">QUERY</code> or <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">ARCHIVE</code>, you enable <span class="bold">Hybrid Columnar Compression</span>. With Hybrid Columnar Compression, data can be compressed during bulk load operations. During the load process, data is transformed into a column-oriented format and then compressed. Oracle Database uses a compression algorithm appropriate for the level you specify. In general, the higher the level, the greater the compression ratio. Hybrid Columnar Compression can result in higher compression ratios, at a greater CPU cost. Therefore, this form of compression is recommended for data that is not frequently updated.</p>
<p><code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">QUERY</code> is useful in data warehousing environments. Valid values are <code dir="ltr">LOW</code> and <code dir="ltr">HIGH</code>, with <code dir="ltr">HIGH</code> providing a higher compression ratio. The default is <code dir="ltr">HIGH</code>.</p>
<p><code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">ARCHIVE</code> uses higher compression ratios than <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">QUERY</code>, and is useful for compressing data that will be stored for long periods of time. Valid values are <code dir="ltr">LOW</code> and <code dir="ltr">HIGH</code>, with <code dir="ltr">HIGH</code> providing the highest possible compression ratio. The default is <code dir="ltr">LOW</code>.</p>
<p>Specifying <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> is equivalent to specifying <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">QUERY</code> <code dir="ltr">HIGH</code>.</p>
<p>Tables with <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">QUERY</code> or <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">ARCHIVE</code> use a <code dir="ltr">PCTFREE</code> value of 0 to maximize compression, unless you explicitly set a value for <code dir="ltr">PCTFREE</code> in the <code dir="ltr"><span class="codeinlineitalic">physical_attributes_clause</span></code>. For these tables, <code dir="ltr">PCTFREE</code> has no effect for blocks loaded using direct-path <code dir="ltr">INSERT</code>. <code dir="ltr">PCTFREE</code> is honored for blocks loaded using conventional <code dir="ltr">INSERT</code>, and for blocks created as a result of DML operations on blocks originally loaded using direct-path <code dir="ltr">INSERT</code>.</p>
<p><a id="CEGEFDAC"></a><a id="SQLRF57015"></a><span class="subhead3">[NO] ROW LEVEL LOCKING&nbsp;</span>If you specify <code dir="ltr">ROW</code> <code dir="ltr">LEVEL</code> <code dir="ltr">LOCKING</code>, then Oracle Database uses row-level locking during DML operations. This improves the performance of these operations when accessing Hybrid Columnar Compressed data. If you specify <code dir="ltr">NO</code> <code dir="ltr">ROW</code> <code dir="ltr">LEVEL</code> <code dir="ltr">LOCKING</code>, then row-level locking is not used. The default is <code dir="ltr">NO</code> <code dir="ltr">ROW</code> <code dir="ltr">LEVEL</code> <code dir="ltr">LOCKING</code>.</p>
<p>In earlier releases, Hybrid Columnar Compression was enabled using <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">QUERY</code> and <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">ARCHIVE</code>. This syntax is still supported for backward compatibility.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT89198" href="../CNCPT/tablecls.htm#CNCPT89198"><span class="italic">Oracle Database Concepts</span></a> for more information on Hybrid Columnar Compression, which is a feature of certain Oracle storage systems</div>
<p><a id="SQLRF56044"></a><span class="subhead3">Notes on Table Compression:&nbsp;</span>You can specify table compression for the following portions of a heap-organized table:</p>
<ul>
<li>
<p>For an entire table, in the <code dir="ltr"><span class="codeinlineitalic">physical_properties</span></code> clause of <code dir="ltr"><span class="codeinlineitalic">relational_table</span></code> or <code dir="ltr"><span class="codeinlineitalic">object_table</span></code></p>
</li>
<li>
<p>For a range partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">range_partitions</span></code> clause</p>
</li>
<li>
<p>For a composite range partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">range_partition_desc</span></code> clause</p>
</li>
<li>
<p>For a composite list partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">list_partition_desc</span></code> clause</p>
</li>
<li>
<p>For a list partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">list_partitions</span></code> clause</p>
</li>
<li>
<p>For a system or reference partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">reference_partition_desc</span></code> clause</p>
</li>
<li>
<p>For the storage table of a nested table, in the <code dir="ltr"><span class="codeinlineitalic">nested_table_col_properties</span></code> clause</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS236" href="../ARPLS/d_compress.htm#ARPLS236"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code dir="ltr">DBMS_COMPRESSION</code> package, which helps you choose the correct compression level for an application, and <a class="olink ADMIN13948" href="../ADMIN/tables.htm#ADMIN13948"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about table compression, including examples</div>
</li>
</ul>
<p><a id="SQLRF54485"></a><span class="subhead3">Restrictions on Table Compression&nbsp;</span>Table compression is subject to the following restrictions:</p>
<ul>
<li>
<p>Data segments of BasicFiles LOBs are not compressed. For information on compression of SecureFiles LOBs, see <a href="#BABIJJHI"><span class="xreftitleitalic"><span class="italic">LOB_compression_clause</span></span></a>.</p>
</li>
<li>
<p>You cannot drop a column from a table that uses <code dir="ltr">COMPRESS</code> <code dir="ltr">BASIC</code>, although you can set such a column as unused. All of the operations of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> ... <code dir="ltr"><span class="codeinlineitalic">drop_column_clause</span></code> are valid for tables that use <code dir="ltr">ROW</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">ADVANCED</code>, <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">QUERY</code>, and <code dir="ltr">COLUMN</code> <code dir="ltr">STORE</code> <code dir="ltr">COMPRESS</code> <code dir="ltr">FOR</code> <code dir="ltr">ARCHIVE</code>.</p>
</li>
<li>
<p>You cannot specify any type of table compression for an index-organized table, any overflow segment or partition of an overflow segment, or any mapping table segment of an index-organized table.</p>
</li>
<li>
<p>You cannot specify any type of table compression for external tables or for tables that are part of a cluster.</p>
</li>
<li>
<p>You cannot specify any type of table compression for tables with <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns, tables that are owned by the <code dir="ltr">SYS</code> schema and reside in the <code dir="ltr">SYSTEM</code> tablespace, or tables with <code dir="ltr">ROWDEPENDENCIES</code> enabled.</p>
</li>
<li>
<p>You cannot specify Hybrid Columnar Compression on tables that are enabled for flashback archiving.</p>
</li>
<li>
<p>You cannot specify Hybrid Columnar Compression on the following object-relational features: object tables, <code dir="ltr">XMLType</code> tables, columns with abstract data types, collections stored as tables, or OPAQUE types, including <code dir="ltr">XMLType</code> columns stored as objects.</p>
</li>
<li>
<p>When you update a row in a table compressed with Hybrid Columnar Compression, the <code dir="ltr">ROWID</code> of the row may change.</p>
</li>
<li>
<p>In tables compressed with Hybrid Columnar Compression, updates to a single row may result in locks on multiple rows. Concurrency for write transactions may therefore be affected.</p>
</li>
<li>
<p>If a table compressed with Hybrid Columnar Compression has a foreign key constraint, and you insert data using <code dir="ltr">INSERT</code> with the <code dir="ltr">APPEND</code> hint, then the data will be compressed to a lesser level than is typical with Hybrid Columnar Compression. To compress the data with Hybrid Columnar Compression, disable the foreign key constraint, insert the data using <code dir="ltr">INSERT</code> with the <code dir="ltr">APPEND</code> hint, and then reenable the foreign key constraint.</p>
</li>
</ul>
<p class="subhead2"><a id="CEGBCAAE"></a><a id="SQLRF56764"></a><span class="italic">inmemory_table_clause</span></p>
<p>Use this clause to enable or disable the table for the In-Memory Column Store (IM column store). The IM column store is an optional, static SGA pool that stores copies of tables and partitions in a special columnar format optimized for rapid scans. The IM column store does not replace the buffer cache, but acts as a supplement so that both memory areas can store the same data in different formats. The IM column store is available starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2).</p>
<ul>
<li>
<p>Specify <code dir="ltr">INMEMORY</code> to enable the table for the IM column store.</p>
<p>You can optionally use the <code dir="ltr"><span class="codeinlineitalic">inmemory_parameters</span></code> clause to specify how table data is stored in the IM column store. This clause enables you to specify the data compression method and the data population priority. In an Oracle RAC environment, it also enables you to specify how the data is distributed and duplicated across Oracle RAC instances. Refer to the <a href="#CEGIDFIC"><span class="xreftitleitalic"><span class="italic">inmemory_parameters</span></span></a> clause for more information.</p>
<p>You can optionally use the <code dir="ltr"><span class="codeinlineitalic">inmemory_column_clause</span></code> to disable specific table columns for the IM column store, and to specify the data compression method for specific columns. Refer to the <a href="#CEGJEEBB"><span class="xreftitleitalic"><span class="italic">inmemory_column_clause</span></span></a> for more information.</p>
</li>
<li>
<p>Specify <code dir="ltr">NO</code> <code dir="ltr">INMEMORY</code> to disable the table for the IM column store.</p>
</li>
</ul>
<p>If you omit this clause, then the table is assigned the default IM column store settings for the tablespace in which it is created. Refer to the <a href="statements_7003.htm#CEGCFHJD"><span class="xreftitleitalic"><span class="italic">inmemory_clause</span></span></a> of <code dir="ltr">CREATE</code> <code dir="ltr">TABLESPACE</code> for more information on specifying the default IM column store settings for a tablespace.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">INMEMORY_CLAUSE_DEFAULT</code> initialization parameter enables you to specify a default IM column store clause for new tables and materialized views. Refer to <a class="olink REFRN10350" href="../REFRN/GUID-5772F775-2A3E-4BC8-AA03-B8FF383BEE52.htm#REFRN10350"><span class="italic">Oracle Database Reference</span></a> for more information on the <code dir="ltr">INMEMORY_CLAUSE_DEFAULT</code> initialization parameter.</div>
<p><a id="CEGGAGGF"></a><a id="SQLRF56786"></a><span class="subhead3">Restrictions on the In-Memory Column Store&nbsp;</span>The following restrictions apply to the In-Memory Column Store:</p>
<ul>
<li>
<p>You cannot specify the <code dir="ltr">INMEMORY</code> clause for tables that are owned by the <code dir="ltr">SYS</code> schema and reside in the <code dir="ltr">SYSTEM</code> or <code dir="ltr">SYSAUX</code> tablespace.</p>
</li>
<li>
<p>The IM column store does not support <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns, out-of-line columns (LOBs, varrays, nested table columns), virtual columns, or extended data type columns. If you enable a table for the IM column store and it contains any of these types of columns, then the columns will not be populated in the IM column store.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT89659" href="../CNCPT/memory.htm#CNCPT89659"><span class="italic">Oracle Database Concepts</span></a> for an overview of the IM column store</p>
</li>
<li>
<p><a class="olink ADMIN14257" href="../ADMIN/memory.htm#ADMIN14257"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> to learn how to use the IM column store</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="CEGIDFIC"></a><a id="SQLRF56765"></a><span class="italic">inmemory_parameters</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">inmemory_memcompress</span></code>, <code dir="ltr"><span class="codeinlineitalic">inmemory_priority</span></code>, <code dir="ltr"><span class="codeinlineitalic">inmemory_distribute</span></code>, and <code dir="ltr"><span class="codeinlineitalic">inmemory_duplicate</span></code> clauses to specify how table data is stored in the IM column store.</p>
<p><a id="CEGEIIGJ"></a><a id="SQLRF56952"></a><span class="subhead3"><span class="italic">inmemory_memcompress</span>&nbsp;</span>Use this clause to specify the compression method for table data stored in the IM column store. This data is called in-memory data. To instruct the database to not compress in-memory data, specify <code dir="ltr">NO</code> <code dir="ltr">MEMCOMPRESS</code>. To instruct the database to compress in-memory data, specify <code dir="ltr">MEMCOMPRESS</code> <code dir="ltr">FOR</code> followed by one of the following methods:</p>
<ul>
<li>
<p><code dir="ltr">DML</code> - This method is optimized for DML operations and performs little or no data compression.</p>
</li>
<li>
<p><code dir="ltr">QUERY</code> - Specifying <code dir="ltr">QUERY</code> is equivalent to specifying <code dir="ltr">QUERY</code> <code dir="ltr">LOW</code>.</p>
</li>
<li>
<p><code dir="ltr">QUERY</code> <code dir="ltr">LOW</code> - This method compresses in-memory data the least (except for <code dir="ltr">DML</code>) and results in the best query performance. This is the default.</p>
</li>
<li>
<p><code dir="ltr">QUERY</code> <code dir="ltr">HIGH</code> -This method compress in-memory data more than <code dir="ltr">QUERY</code> <code dir="ltr">LOW</code>, but less than <code dir="ltr">CAPACITY</code> <code dir="ltr">LOW</code>.</p>
</li>
<li>
<p><code dir="ltr">CAPACITY</code> - Specifying <code dir="ltr">CAPACITY</code> is equivalent to specifying <code dir="ltr">CAPACITY</code> <code dir="ltr">LOW</code>.</p>
</li>
<li>
<p><code dir="ltr">CAPACITY</code> <code dir="ltr">LOW</code> - This method compresses in-memory data more than <code dir="ltr">QUERY</code> <code dir="ltr">HIGH</code>, but less than <code dir="ltr">CAPACITY</code> <code dir="ltr">HIGH</code>, and results in excellent query performance.</p>
</li>
<li>
<p><code dir="ltr">CAPACITY</code> <code dir="ltr">HIGH</code> - This method compresses in-memory data the most and results in good query performance.</p>
</li>
</ul>
<p><a id="CEGJGCDF"></a><a id="SQLRF56767"></a><span class="subhead3"><span class="italic">inmemory_priority</span>&nbsp;</span>Use the <code dir="ltr">PRIORITY</code> clause to specify the data population priority for table data in the IM column store. This clause controls the priority of population, but not the speed of population.</p>
<ul>
<li>
<p>Specify <code dir="ltr">NONE</code> for <span class="bold">on-demand population</span>. In this case, the database populates table data in the IM column store when the table it is accessed through a full table scan. If the table is never accessed, or if it is accessed only through an index scan or fetch by rowid, then population never occurs. This is the default.</p>
</li>
<li>
<p>Specify one of the following priority levels for <span class="bold">priority-based population</span>: <code dir="ltr">LOW</code>, <code dir="ltr">MEDIUM</code>, <code dir="ltr">HIGH</code>, or <code dir="ltr">CRITICAL</code>. In this case, the database automatically populates table data in the IM column store using an internally managed priority queue; a full scan is not a necessary condition for population. The database queues population of the table data based on the specified priority level. For example, a table with the setting <code dir="ltr">INMEMORY</code> <code dir="ltr">PRIORITY</code> <code dir="ltr">CRITICAL</code> takes precedence over a table with the setting <code dir="ltr">INMEMORY</code> <code dir="ltr">PRIORITY</code> <code dir="ltr">HIGH</code>, which in turn takes precedence over a table with the setting <code dir="ltr">INMEMORY</code> <code dir="ltr">PRIORITY</code> <code dir="ltr">LOW</code>, and so on. If the IM column store has insufficient space, then the database does not populate additional table data until space is available.</p>
</li>
</ul>
<p><a id="CEGCEDJH"></a><a id="SQLRF56768"></a><span class="subhead3"><span class="italic">inmemory_distribute</span>&nbsp;</span>The <code dir="ltr">DISTRIBUTE</code> clause is applicable only if you are using Oracle Real Application Clusters (Oracle RAC). It controls how table data in the IM column store is distributed across Oracle RAC instances. You can specify the following options:</p>
<ul>
<li>
<p><code dir="ltr">AUTO</code> - Oracle Database controls how data is distributed across Oracle RAC instances. Large tables are distributed across Oracle RAC instances depending on their access patterns. Smaller tables may be distributed between instances. If you specify only the <code dir="ltr">DISTRIBUTE</code> keyword or omit the <code dir="ltr"><span class="codeinlineitalic">inmemory_distribute</span></code> clause entirely, then <code dir="ltr">AUTO</code> is the default.</p>
</li>
<li>
<p><code dir="ltr">BY</code> <code dir="ltr">ROWID</code> <code dir="ltr">RANGE</code> - Data in certain ranges of rowids is distributed to different Oracle RAC instances.</p>
</li>
<li>
<p><code dir="ltr">BY</code> <code dir="ltr">PARTITION</code> - Data in partitions is distributed to different Oracle RAC instances.</p>
</li>
<li>
<p><code dir="ltr">BY</code> <code dir="ltr">SUBPARTITION</code> - Data in subpartitions is distributed to different Oracle RAC instances.</p>
</li>
</ul>
<p><a id="CEGFFGHA"></a><a id="SQLRF56953"></a><span class="subhead3"><span class="italic">inmemory_duplicate</span>&nbsp;</span>The <code dir="ltr">DUPLICATE</code> clause is applicable only if you are using Oracle Real Application Clusters (Oracle RAC) on an engineered system. It controls how table data in the IM column store is duplicated across Oracle RAC instances. You can specify the following options:</p>
<ul>
<li>
<p><code dir="ltr">DUPLICATE</code> - Data is duplicated on one Oracle RAC instance, resulting in the data existing on a total of two Oracle RAC instances.</p>
</li>
<li>
<p><code dir="ltr">DUPLICATE</code> <code dir="ltr">ALL</code> - Data is duplicated across all Oracle RAC instances. If you specify <code dir="ltr">DUPLICATE</code> <code dir="ltr">ALL</code>, then the database uses the <code dir="ltr">DISTRIBUTE</code> <code dir="ltr">AUTO</code> setting, regardless of whether or how you specify the <code dir="ltr"><span class="codeinlineitalic">inmemory_distribute</span></code> clause.</p>
</li>
<li>
<p><code dir="ltr">NO</code> <code dir="ltr">DUPLICATE</code> - Data is not duplicated across Oracle RAC instances. This is the default.</p>
</li>
</ul>
<p class="subhead2"><a id="CEGJEEBB"></a><a id="SQLRF56769"></a><span class="italic">inmemory_column_clause</span></p>
<p>Use this clause to disable specific table columns for the IM column store, and to specify the data compression method for specific columns. In order to specify this clause, the table must be enabled for the IM column store.</p>
<ul>
<li>
<p>Specify <code dir="ltr">INMEMORY</code> to enable the specified table columns for the IM column store.</p>
<p>You can optionally use the <code dir="ltr"><span class="codeinlineitalic">inmemory_memcompress</span></code> clause to specify the data compression method for specific columns. See <a href="#CEGEIIGJ"><span class="xreftitleitalic"><span class="italic">inmemory_memcompress</span></span></a>. If you omit the <code dir="ltr"><span class="codeinlineitalic">inmemory_memcompress</span></code> clause, then the table column uses the data compression method for the table. You cannot specify the <code dir="ltr">PRIORITY</code>, <code dir="ltr">DISTRIBUTE</code>, or <code dir="ltr">DUPLICATE</code> settings for a specific table column. These settings are the same for all table columns as they are for the table.</p>
</li>
<li>
<p>Specify <code dir="ltr">NO</code> <code dir="ltr">INMEMORY</code> to disable the specified table columns for the IM column store.</p>
</li>
</ul>
<p>If you omit the <code dir="ltr"><span class="codeinlineitalic">inmemory_column_clause</span></code>, then all table columns use the IM column store settings for the table.</p>
<p><a id="SQLRF57016"></a><span class="subhead3">Restriction on <span class="italic">inmemory_column_clause</span>&nbsp;</span>You cannot specify this clause for a <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column, an out-of-line column (LOB, varray, nested table column), a virtual column, or an extended data type column.</p>
<p class="subhead2"><a id="CEGDHEGF"></a><a id="SQLRF56771"></a><span class="italic">inmemory_clause</span></p>
<p>Use this clause to enable or disable a table partition for the IM column store. In order to specify this clause, the table must be enabled for the IM column store. If you omit this clause, then the table partition uses the IM column store settings for the table.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">inmemory_parameters</span></code> clause has the same semantics for table partitions as for tables. Refer to the <a href="#CEGIDFIC"><span class="xreftitleitalic"><span class="italic">inmemory_parameters</span></span></a> clause for full information.</p>
<p class="subhead2"><a id="CJAIIDEA"></a><a id="SQLRF56584"></a><span class="italic">ilm_clause</span></p>
<p>Use this clause to add an Automatic Data Optimization policy to <code dir="ltr"><span class="codeinlineitalic">table</span></code>.</p>
<p>This clause has the same semantics in <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> and <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>, with the following additional restriction: You can specify only the <code dir="ltr">ADD</code> <code dir="ltr">POLICY</code> clause for <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code>. Refer to the <a href="statements_3001.htm#CJADBBDI"><span class="xreftitleitalic"><span class="italic">ilm_clause</span></span></a> for the full semantics of this clause.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink VLDBG14118" href="../VLDBG/GUID-B011D86F-DCDE-4BF5-9C47-24B9650EFCA8.htm#VLDBG14118"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information on managing policies for Automatic Data Optimization</div>
<p><a id="SQLRF56772"></a><span class="subhead3">Restrictions on Automatic Data Optimization&nbsp;</span>Automatic Data Optimization is subject to the following restrictions:</p>
<ul>
<li>
<p>Automatic Data Optimization is not supported for tables that contain object types, index-organized tables, clustered tables, or materialized views.</p>
</li>
<li>
<p>Automatic Data Optimization is not supported in multitenant container databases (CDBs).</p>
</li>
<li>
<p>Row-level policies are not supported for tables that support Temporal Validity or tables that are enabled for row archiving for In-Database Archiving.</p>
</li>
</ul>
<p class="subhead2"><a id="CJAIHFAD"></a><a id="SQLRF56585"></a><span class="italic">ilm_policy_clause</span></p>
<p>Use this clause to describe the Automatic Data Optimization policy.</p>
<p>This clause has the same semantics in <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> and <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>. Refer to <a href="statements_3001.htm#CJAJGGED"><span class="xreftitleitalic"><span class="italic">ilm_policy_clause</span></span></a> for the full semantics of this clause.</p>
<p class="subhead2"><a id="SQLRF54486"></a>RECOVERABLE | UNRECOVERABLE <a id="sthref5688"></a><a id="sthref5689"></a></p>
<p>These keywords are deprecated and have been replaced with <code dir="ltr">LOGGING</code> and <code dir="ltr">NOLOGGING</code>, respectively. Although <code dir="ltr">RECOVERABLE</code> and <code dir="ltr">UNRECOVERABLE</code> are supported for backward compatibility, Oracle strongly recommends that you use the <code dir="ltr">LOGGING</code> and <code dir="ltr">NOLOGGING</code> keywords.</p>
<p><a id="SQLRF54487"></a><span class="subhead3">Restrictions on [UN]RECOVERABLE&nbsp;</span>This clause is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify <code dir="ltr">RECOVERABLE</code> for partitioned tables or LOB storage characteristics.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">UNRECOVERABLE</code> for partitioned or index-organized tables.</p>
</li>
<li>
<p>You can specify <code dir="ltr">UNRECOVERABLE</code> only with <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>.</p>
</li>
</ul>
<p class="subhead2"><a id="SQLRF54488"></a>ORGANIZATION <a id="sthref5690"></a></p>
<p>The <code dir="ltr">ORGANIZATION</code> clause lets you specify the order in which the data rows of the table are stored.</p>
<p><a id="SQLRF54489"></a><span class="subhead3">HEAP<a id="sthref5691"></a><a id="sthref5692"></a>&nbsp;</span><code dir="ltr">HEAP</code> indicates that the data rows of <code dir="ltr"><span class="codeinlineitalic">table</span></code> are stored in no particular order. This is the default.</p>
<p><a id="SQLRF54490"></a><span class="subhead3">INDEX<a id="sthref5693"></a><a id="sthref5694"></a>&nbsp;</span><code dir="ltr">INDEX</code> indicates that <code dir="ltr"><span class="codeinlineitalic">table</span></code> is created as an index-organized table. In an index-organized table, the data rows are held in an index defined on the primary key for the table.</p>
<p><a id="SQLRF54491"></a><span class="subhead3">EXTERNAL<a id="sthref5695"></a><a id="sthref5696"></a><a id="sthref5697"></a><a id="sthref5698"></a>&nbsp;</span><code dir="ltr">EXTERNAL</code> indicates that table is a read-only table located outside the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2153251">&#34;External Table Example&#34;</a></div>
<p class="subhead2"><a id="i2128766"></a><a id="SQLRF54492"></a><span class="italic">index_org_table_clause</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">index_org_table_clause</span></code> to create an index-organized table. Oracle Database maintains the table rows, both primary key column values and nonkey column values, in an index built on the primary key. Index-organized tables are therefore best suited for primary key-based access and manipulation. An index-organized table is an alternative to:</p>
<ul>
<li>
<p>A noncluster table indexed on the primary key by using the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement</p>
</li>
<li>
<p>A cluster table stored in an indexed cluster that has been created using the <code dir="ltr">CREATE</code> <code dir="ltr">CLUSTER</code> statement that maps the primary key for the table to the cluster key</p>
</li>
</ul>
<p>You must specify a primary key for an index-organized table, because the primary key uniquely identifies a row. The primary key cannot be <code dir="ltr">DEFERRABLE</code>. Use the primary key instead of the rowid for directly accessing index-organized rows.</p>
<p>If an index-organized table is partitioned and contains LOB columns, then you should specify the <code dir="ltr"><span class="codeinlineitalic">index_org_table_clause</span></code> first, then the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code>, and then the appropriate <code dir="ltr"><span class="codeinlineitalic">table_partitioning_clauses</span></code>.</p>
<p>You cannot use the <code dir="ltr">TO_LOB</code> function to convert a <code dir="ltr">LONG</code> column to a LOB column in the subquery of a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statement if you are creating an index-organized table. Instead, create the index-organized table without the <code dir="ltr">LONG</code> column, and then use the <code dir="ltr">TO_LOB</code> function in an <code dir="ltr">INSERT</code> ... <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statement.</p>
<p>The <code dir="ltr">ROWID</code> pseudocolumn of an index-organized table returns logical rowids instead of physical rowids. A column that you create with the data type <code dir="ltr">ROWID</code> cannot store the logical rowids of the IOT. The only data you can store in a column of type <code dir="ltr">ROWID</code> is rowids from heap-organized tables. If you want to store the logical rowids of an IOT, then create a column of type <code dir="ltr">UROWID</code> instead. A column of type <code dir="ltr">UROWID</code> can store both physical and logical rowids.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2153235">&#34;Index-Organized Table Example&#34;</a></div>
<p><a id="SQLRF54493"></a><span class="subhead3">Restrictions on Index-Organized Tables&nbsp;</span>Index-organized tables are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot define a virtual column for an index-organized table.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">composite_range_partitions</span></code>, <code dir="ltr"><span class="codeinlineitalic">composite_list_partitions</span></code>, or <code dir="ltr"><span class="codeinlineitalic">composite_hash_partitions</span></code> clauses for an index-organized table.</p>
</li>
<li>
<p>If the index-organized table is a nested table or varray, then you cannot specify <code dir="ltr"><span class="codeinlineitalic">table_partitioning_clauses</span></code>.</p>
</li>
</ul>
<p><a id="i2218529"></a><a id="SQLRF54494"></a><span class="subhead3"><a id="sthref5699"></a>PCTTHRESHOLD <span class="italic">integer<a id="sthref5700"></a></span>&nbsp;</span>Specify the percentage of space reserved in the index block for an index-organized table row. <code dir="ltr">PCTTHRESHOLD</code> must be large enough to hold the primary key. All trailing columns of a row, starting with the column that causes the specified threshold to be exceeded, are stored in the overflow segment. <code dir="ltr">PCTTHRESHOLD</code> must be a value from 1 to 50. If you do not specify <code dir="ltr">PCTTHRESHOLD</code>, then the default is 50.</p>
<p><a id="SQLRF54495"></a><span class="subhead3">Restriction on PCTTHRESHOLD&nbsp;</span>You cannot specify <code dir="ltr">PCTTHRESHOLD</code> for individual partitions of an index-organized table.</p>
<p><a id="i2128795"></a><a id="SQLRF54496"></a><span class="subhead3"><span class="italic">mapping_table_clauses</span><a id="sthref5701"></a><a id="sthref5702"></a><a id="sthref5703"></a>&nbsp;</span>Specify <code dir="ltr">MAPPING</code> <code dir="ltr">TABLE</code> to instruct the database to create a mapping of local to physical <code dir="ltr">ROWID</code>s and store them in a heap-organized table. This mapping is needed in order to create a bitmap index on the index-organized table. If the index-organized table is partitioned, then the mapping table is also partitioned and its partitions have the same name and physical attributes as the base table partitions.</p>
<p>Oracle Database creates the mapping table or mapping table partition in the same tablespace as its parent index-organized table or partition. You cannot query, perform DML operations on, or modify the storage characteristics of the mapping table or its partitions.</p>
<p><a id="CEGFFACJ"></a><a id="SQLRF57021"></a><span class="subhead3"><span class="italic">prefix_compression</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">prefix_compression</span></code> clauses let you enable or disable prefix compression for index-organized tables.</p>
<ul>
<li>
<p><a id="sthref5704"></a><a id="sthref5705"></a><a id="sthref5706"></a><a id="sthref5707"></a>Specify <code dir="ltr">COMPRESS</code> to enable <span class="bold">prefix</span> <span class="bold">compression</span>, also known as key compression, for an index-organized table, which eliminates repeated occurrence of primary key column values in index-organized tables. Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the prefix length, which is the number of prefix columns to compress.</p>
<p>The valid range of prefix length values is from 1 to the number of primary key columns minus 1. The default prefix length is the number of primary key columns minus 1.</p>
</li>
<li>
<p>Specify <code dir="ltr">NOCOMPRESS</code> to disable prefix compression in index-organized tables. This is the default.</p>
</li>
</ul>
<p><a id="SQLRF54498"></a><span class="subhead3">Restriction on Prefix Compression of Index-organized Tables&nbsp;</span>At the partition level, you can specify <code dir="ltr">COMPRESS</code>, but you cannot specify the prefix length with <code dir="ltr"><span class="codeinlineitalic">integer</span></code>.</p>
<p><a id="i2128810"></a><a id="SQLRF54499"></a><span class="subhead3"><span class="italic">index_org_overflow_clause</span> <a id="sthref5708"></a><a id="sthref5709"></a>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">index_org_overflow_clause</span></code> lets you instruct the database that index-organized table data rows exceeding the specified threshold are placed in the data segment specified in this clause.</p>
<ul>
<li>
<p>When you create an index-organized table, Oracle Database evaluates the maximum size of each column to estimate the largest possible row. If an overflow segment is needed but you have not specified <code dir="ltr">OVERFLOW</code>, then the database raises an error and does not execute the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement. This checking function guarantees that subsequent DML operations on the index-organized table will not fail because an overflow segment is lacking.</p>
</li>
<li>
<p>All physical attributes and storage characteristics you specify in this clause after the <code dir="ltr">OVERFLOW</code> keyword apply only to the overflow segment of the table. Physical attributes and storage characteristics for the index-organized table itself, default values for all its partitions, and values for individual partitions must be specified before this keyword.</p>
</li>
<li>
<p>If the index-organized table contains one or more LOB columns, then the LOBs will be stored out-of-line unless you specify <code dir="ltr">OVERFLOW</code>, even if they would otherwise be small enough be to stored inline.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">table</span></code> is partitioned, then the database equipartitions the overflow data segments with the primary key index segments.</p>
</li>
</ul>
<p><a id="i2209161"></a><a id="SQLRF54500"></a><span class="subhead3">INCLUDING <span class="italic">column_name</span>&nbsp;</span>Specify a column at which to divide an index-organized table row into index and overflow portions. The primary key columns are always stored in the index. <code dir="ltr"><span class="codeinlineitalic">column_name</span></code> can be either the last primary key column or any non primary key column. All non primary key columns that follow <code dir="ltr"><span class="codeinlineitalic">column_name</span></code> are stored in the overflow data segment.</p>
<p>If an attempt to divide a row at <code dir="ltr"><span class="codeinlineitalic">column_name</span></code> causes the size of the index portion of the row to exceed the specified or default <code dir="ltr">PCTTHRESHOLD</code> value, then the database breaks up the row based on the <code dir="ltr">PCTTHRESHOLD</code> value.</p>
<p><a id="SQLRF54501"></a><span class="subhead3">Restriction on the INCLUDING Clause&nbsp;</span>You cannot specify this clause for individual partitions of an index-organized table.</p>
<p class="subhead1"><a id="i2159541"></a><a id="SQLRF54502"></a><span class="italic">external_table_clause <a id="sthref5710"></a><a id="sthref5711"></a><a id="sthref5712"></a><a id="sthref5713"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">external_table_clause</span></code> to create an external table, which is a read-only table whose metadata is stored in the database but whose data in stored outside the database. Among other capabilities, external tables let you query data without first loading it into the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG014" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG014"><span class="italic">Oracle Database Data Warehousing Guide</span></a>, <a class="olink ADMIN01507" href="../ADMIN/tables.htm#ADMIN01507"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>, and <a class="olink SUTIL011" href="../SUTIL/GUID-44323E01-7D72-45EC-915A-99E596769D9E.htm#SUTIL011"><span class="italic">Oracle Database Utilities</span></a> for information on the uses for external tables</div>
<p>Because external tables have no data in the database, you define them with a small subset of the clauses normally available when creating tables.</p>
<ul>
<li>
<p>Within the <code dir="ltr"><span class="codeinlineitalic">relational_properties</span></code> clause, you can specify only <code dir="ltr"><span class="codeinlineitalic">column</span></code> and <code dir="ltr"><span class="codeinlineitalic">datatype</span></code>.</p>
</li>
<li>
<p>Within the <code dir="ltr"><span class="codeinlineitalic">physical_properties_clause</span></code>, you can specify only the organization of the table (<code dir="ltr">ORGANIZATION</code> <code dir="ltr">EXTERNAL</code> <code dir="ltr"><span class="codeinlineitalic">external_table_clause</span></code>).</p>
</li>
<li>
<p>Within the <code dir="ltr"><span class="codeinlineitalic">table_properties</span></code> clause, you can specify only the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code>. The <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> lets you parallelize subsequent queries on the external data and subsequent operations that populate the external table.</p>
</li>
<li>
<p>You can populate the external table at create time by using the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause.</p>
</li>
</ul>
<p>No other clauses are permitted in the same <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i2153251">&#34;External Table Example&#34;</a></p>
</li>
<li>
<p><code dir="ltr">ALTER TABLE</code> ... <a href="statements_3001.htm#CJAFACGH">&#34;PROJECT COLUMN Clause&#34;</a> for information on the effect of changing the default property of the column projection</p>
</li>
</ul>
</div>
<p><a id="SQLRF54503"></a><span class="subhead3">Restrictions on External Tables<a id="sthref5714"></a><a id="sthref5715"></a>&nbsp;</span>External tables are subject to the following restrictions:</p>
<ul>
<li>
<p>An external table cannot be a temporary table.</p>
</li>
<li>
<p>You cannot specify constraints on an external table.</p>
</li>
<li>
<p>You cannot create an index on an external table.</p>
</li>
<li>
<p>An external table cannot contain virtual columns or <code dir="ltr">INVISIBLE</code> columns.</p>
</li>
<li>
<p>An external table cannot have object type, varray, or <code dir="ltr">LONG</code> columns. However, you can populate LOB columns of an external table with varray or <code dir="ltr">LONG</code> data from an internal database table.</p>
</li>
</ul>
<p><a id="SQLRF54504"></a><span class="subhead3">TYPE <a id="sthref5716"></a><a id="sthref5717"></a><a id="sthref5718"></a>&nbsp;</span><code dir="ltr">TYPE</code> <code dir="ltr"><span class="codeinlineitalic">access_driver_type</span></code> indicates the <span class="bold">access driver</span> of the external table. The access driver is the API that interprets the external data for the database. Oracle Database provides two access drivers: <code dir="ltr">ORACLE_LOADER</code> and <code dir="ltr">ORACLE_DATAPUMP</code>. If you do not specify <code dir="ltr">TYPE</code>, then the database uses <code dir="ltr">ORACLE_LOADER</code> as the default access driver. You must specify the <code dir="ltr">ORACLE_DATAPUMP</code> access driver if you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause to unload data from one Oracle Database and reload it into the same or a different Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Utilities</span> for information about the <a class="olink SUTIL012" href="../SUTIL/GUID-EA56D498-E8BB-4E02-8ABF-12E7083ED9D5.htm#SUTIL012"><code dir="ltr">ORACLE_LOADER</code></a> and <a class="olink SUTIL500" href="../SUTIL/GUID-084DC623-9656-499C-885B-D8180C07704B.htm#SUTIL500"><code dir="ltr">ORACLE_DATAPUMP</code></a> access drivers</div>
<p><a id="SQLRF54505"></a><span class="subhead3">DEFAULT DIRECTORY&nbsp;</span><code dir="ltr">DEFAULT</code> <code dir="ltr">DIRECTORY</code> lets you specify a default directory object corresponding to a directory on the file system where the external data sources may reside. The default directory can also be used by the access driver to store auxiliary files such as error logs.</p>
<p><a id="SQLRF54506"></a><span class="subhead3">ACCESS PARAMETERS&nbsp;</span>The optional <code dir="ltr">ACCESS</code> <code dir="ltr">PARAMETERS</code> clause lets you assign values to the parameters of the specific access driver for this external table.</p>
<ul>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code> specifies all access parameters for the <code dir="ltr">ORACLE_LOADER</code> and <code dir="ltr">ORACLE_DATAPUMP</code> access drivers. See <a class="olink SUTIL1358" href="../SUTIL/GUID-07D30CE6-128D-426F-8B76-B13E1C53BD5A.htm#SUTIL1358"><span class="italic">Oracle Database Utilities</span></a> for descriptions of these parameters.</p>
<p>Field names specified in the <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code> must match columns in the table definition. Oracle Database ignores any field in the <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code> that is not matched by a column in the table definition.</p>
</li>
<li>
<p><code dir="ltr">USING</code> <code dir="ltr">CLOB</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> lets you derive the parameters and their values through a subquery. The subquery cannot contain any set operators or an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause. It must return one row containing a single item of data type <code dir="ltr">CLOB</code>.</p>
</li>
</ul>
<p>Whether you specify the parameters in an <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code> or derive them using a subquery, the database does not interpret anything in this clause. It is up to the access driver to interpret this information in the context of the external data.</p>
<p><a id="SQLRF54507"></a><span class="subhead3">LOCATION&nbsp;</span>The <code dir="ltr">LOCATION</code> clause lets you specify one or more external data sources. Usually the <code dir="ltr"><span class="codeinlineitalic">location_specifier</span></code> is a file, but it need not be. Oracle Database does not interpret this clause. It is up to the access driver to interpret this information in the context of the external data.</p>
<p><a id="SQLRF54508"></a><span class="subhead3">REJECT LIMIT&nbsp;</span>The <code dir="ltr">REJECT</code> <code dir="ltr">LIMIT</code> clause lets you specify how many conversion errors can occur during a query of the external data before an Oracle Database error is returned and the query is aborted. The default value is 0.</p>
<p class="subhead2"><a id="i2171985"></a><a id="SQLRF54509"></a>CLUSTER Clause <a id="sthref5719"></a><a id="sthref5720"></a><a id="sthref5721"></a></p>
<p>The <code dir="ltr">CLUSTER</code> clause indicates that the table is to be part of <code dir="ltr"><span class="codeinlineitalic">cluster</span></code>. The columns listed in this clause are the table columns that correspond to the cluster columns. Generally, the cluster columns of a table are the column or columns that make up its primary key or a portion of its primary key. Refer to <a href="statements_5002.htm#BABDBDEE">CREATE CLUSTER</a> for more information.</p>
<p>Specify one column from the table for each column in the cluster key. The columns are matched by position, not by name.</p>
<p>A cluster table uses the space allocation of the cluster. Therefore, do not use the <code dir="ltr">PCTFREE</code>, <code dir="ltr">PCTUSED</code>, or <code dir="ltr">INITRANS</code> parameters, the <code dir="ltr">TABLESPACE</code> clause, or the <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code> with the <code dir="ltr">CLUSTER</code> clause.</p>
<p><a id="SQLRF54510"></a><span class="subhead3">Restrictions on Cluster Tables&nbsp;</span>Cluster tables are subject to the following restrictions:</p>
<ul>
<li>
<p>Object tables and tables containing LOB columns or columns of the <code dir="ltr">Any*</code> Oracle-supplied types cannot be part of a cluster.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> or <code dir="ltr">CACHE</code> or <code dir="ltr">NOCACHE</code> for a table that is part of a cluster.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">CLUSTER</code> with either <code dir="ltr">ROWDEPENDENCIES</code> or <code dir="ltr">NOROWDEPENDENCIES</code> unless the cluster has been created with the same <code dir="ltr">ROWDEPENDENCIES</code> or <code dir="ltr">NOROWDEPENDENCIES</code> setting.</p>
</li>
<li>
<p>A cluster table cannot contain <code dir="ltr">INVISIBLE</code> columns.</p>
</li>
</ul>
<p class="subhead1"><a id="i2128916"></a><a id="SQLRF20023"></a><span class="italic">table_properties</span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">table_properties</span></code> further define the characteristics of the table.</p>
<p class="subhead1"><a id="i2128918"></a><a id="SQLRF54511"></a><span class="italic">column_properties</span> <a id="sthref5722"></a><a id="sthref5723"></a></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">column_properties</span></code> clauses to specify the storage attributes of a column.</p>
<p class="subhead2"><a id="i2128922"></a><a id="SQLRF54512"></a><span class="italic">object_type_col_properties<a id="sthref5724"></a><a id="sthref5725"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">object_type_col_properties</span></code> determine storage characteristics of an object column or attribute or of an element of a collection column or attribute.</p>
<p><a id="SQLRF54513"></a><span class="subhead3"><span class="italic">column</span>&nbsp;</span>For <code dir="ltr"><span class="codeinlineitalic">column</span></code>, specify an object column or attribute.</p>
<p><a id="i2215510"></a><a id="SQLRF54514"></a><span class="subhead3"><span class="italic">substitutable_column_clause</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">substitutable_column_clause</span></code> indicates whether object columns or attributes in the same hierarchy are substitutable for each other. You can specify that a column is of a particular type, or whether it can contain instances of its subtypes, or both.</p>
<ul>
<li>
<p>If you specify <code dir="ltr">ELEMENT</code>, then you constrain the element type of a collection column or attribute to a subtype of its declared type.</p>
</li>
<li>
<p>The <code dir="ltr">IS</code> <code dir="ltr">OF</code> <code dir="ltr">[TYPE]</code> <code dir="ltr">(ONLY</code> <code dir="ltr"><span class="codeinlineitalic">type</span></code><code dir="ltr">)</code> clause constrains the type of the object column to a subtype of its declared type.</p>
</li>
<li>
<p><code dir="ltr">NOT</code> <code dir="ltr">SUBSTITUTABLE</code> <code dir="ltr">AT</code> <code dir="ltr">ALL</code> <code dir="ltr">LEVELS</code> indicates that the object column cannot hold instances corresponding to any of its subtypes. Also, substitution is disabled for any embedded object attributes and elements of embedded nested tables and varrays. The default is <code dir="ltr">SUBSTITUTABLE</code> <code dir="ltr">AT</code> <code dir="ltr">ALL</code> <code dir="ltr">LEVELS</code>.</p>
</li>
</ul>
<p><a id="SQLRF54515"></a><span class="subhead3"><span class="bold">Restrictions on the</span> <span class="italic">substitutable_column_clause</span>&nbsp;</span>This clause is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify this clause for an attribute of an object column. However, you can specify this clause for a object type column of a relational table and for an object column of an object table if the substitutability of the object table itself has not been set.</p>
</li>
<li>
<p>For a collection type column, the only part of this clause you can specify is <code dir="ltr">[NOT]</code> <code dir="ltr">SUBSTITUTABLE</code> <code dir="ltr">AT</code> <code dir="ltr">ALL</code> <code dir="ltr">LEVELS</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="i2128940"></a><a id="SQLRF54516"></a><span class="italic">LOB_storage_clause<a id="sthref5726"></a><a id="sthref5727"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> lets you specify the storage attributes of LOB data segments. You must specify at least one clause after the <code dir="ltr">STORE</code> <code dir="ltr">AS</code> keywords. If you specify more than one clause, then you must specify them in the order shown in the syntax diagram, from top to bottom.</p>
<p>For a nonpartitioned table, this clause specifies the storage attributes of LOB data segments of the table.</p>
<p>For a partitioned table, Oracle Database implements this clause depending on where it is specified:</p>
<ul>
<li>
<p>For a partitioned table specified at the table level&mdash;when specified in the <code dir="ltr"><span class="codeinlineitalic">physical_properties</span></code> clause along with one of the partitioning clauses&mdash;this clause specifies the default storage attributes for LOB data segments associated with each partition or subpartition. These storage attributes apply to all partitions or subpartitions unless overridden by a <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> at the partition or subpartition level.</p>
</li>
<li>
<p>For an individual partition of a partitioned table&mdash;when specified as part of a <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code>&mdash;this clause specifies the storage attributes of the data segments of the partition or the default storage attributes of any subpartitions of the partition. A partition-level <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> overrides a table-level <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code>.</p>
</li>
<li>
<p>For an individual subpartition of a partitioned table&mdash;when specified as part of <code dir="ltr"><span class="codeinlineitalic">subpartition_by_hash</span></code> or <code dir="ltr"><span class="codeinlineitalic">subpartition_by_list</span></code>&mdash;this clause specifies the storage attributes of the data segments of the subpartition. A subpartition-level <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> overrides both partition-level and table-level <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clauses</span></code>.</p>
</li>
</ul>
<p><a id="SQLRF55612"></a><span class="subhead3">Restriction on the <span class="italic">LOB_storage_clause</span>:&nbsp;</span>Only the <code dir="ltr">TABLESPACE</code> clause is allowed when specifying the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> in a subpartition.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADLOB102" href="../ADLOB/adlob_design.htm#ADLOB102"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for detailed information about LOBs, including guidelines for creating gigabyte LOBs</p>
</li>
<li>
<p><a href="#i2116140">&#34;Creating a Table: LOB Column Example&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="SQLRF54517"></a><span class="italic">LOB_item</span></p>
<p>Specify the LOB column name or LOB object attribute for which you are explicitly defining tablespace and storage characteristics that are different from those of the table. Oracle Database automatically creates a system-managed index for each <code dir="ltr"><span class="codeinlineitalic">LOB_item</span></code> you create.</p>
<p class="subhead2"><a id="SQLRF54518"></a>SECUREFILE | BASICFILE</p>
<p>Use this clause to specify the type of LOB storage, either high-performance LOB (SecureFiles), or the traditional LOB (BasicFiles).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../ADLOB/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information about SecureFiles LOBs</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot convert a LOB from one type of storage to the other. Instead you must migrate to SecureFiles or BasicFiles by using online redefinition or partition exchange.</div>
<p class="subhead2"><a id="SQLRF54519"></a><span class="italic">LOB_segname</span></p>
<p>Specify the name of the LOB data segment. You cannot use <code dir="ltr"><span class="codeinlineitalic">LOB_segname</span></code> if you specify more than one <code dir="ltr"><span class="codeinlineitalic">LOB_item</span></code>.</p>
<p class="subhead2"><a id="i2128955"></a><a id="SQLRF54520"></a><span class="italic">LOB_storage_parameters <a id="sthref5728"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">LOB_storage_parameters</span></code> clause lets you specify various elements of LOB storage.</p>
<p><a id="SQLRF54521"></a><span class="subhead3">TABLESPACE Clause &nbsp;</span>Use this clause to specify the tablespace in which LOB data is to be stored.</p>
<p><a id="SQLRF54522"></a><span class="subhead3"><span class="italic">storage_clause</span> &nbsp;</span>Use the <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code> to specify various aspects of LOB segment storage. Of particular interest in the context of LOB storage is the <code dir="ltr">MAXSIZE</code> clause of the <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code>, which can be used in combination with the <code dir="ltr"><span class="codeinlineitalic">LOB_retention_clause</span></code> of <code dir="ltr"><span class="codeinlineitalic">LOB_parameters</span></code>. Refer to <a href="clauses009.htm#i997450"><span class="xreftitleitalic"><span class="italic">storage_clause</span></span></a> for more information.</p>
<p class="subhead2"><a id="BABFFFBE"></a><a id="SQLRF54523"></a><span class="italic">LOB_parameters</span></p>
<p>Several of the <code dir="ltr"><span class="codeinlineitalic">LOB_parameters</span></code> are no longer needed if you are using SecureFiles for LOB storage. The <code dir="ltr">PCTVERSION</code> and <code dir="ltr">FREEPOOLS</code> parameters are valid and useful only if you are using BasicFiles LOB storage.</p>
<p><a id="BABHDBGB"></a><a id="SQLRF54524"></a><span class="subhead3">ENABLE STORAGE IN ROW <a id="sthref5729"></a>&nbsp;</span>If you enable storage in row, then the LOB value is stored in the row (inline) if its length is less than approximately 4000 bytes minus system control information. This is the default.</p>
<p><a id="SQLRF54525"></a><span class="subhead3">Restriction on Enabling Storage in Row&nbsp;</span>For an index-organized table, you cannot specify this parameter unless you have specified an <code dir="ltr">OVERFLOW</code> segment in the <code dir="ltr"><span class="codeinlineitalic">index_org_table_clause</span></code>.</p>
<p><a id="SQLRF54526"></a><span class="subhead3">DISABLE STORAGE IN ROW <a id="sthref5730"></a>&nbsp;</span>If you disable storage in row, then the LOB value is stored outside of the row out of line regardless of the length of the LOB value.</p>
<p>The LOB locator is always stored inline regardless of where the LOB value is stored. You cannot change the value of <code dir="ltr">STORAGE</code> <code dir="ltr">IN</code> <code dir="ltr">ROW</code> once it is set except by moving the table. See the <a href="statements_3001.htm#i2085301"><span class="xreftitleitalic"><span class="italic">move_table_clause</span></span></a> in the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> documentation for more information.</p>
<p><a id="BABEJEAH"></a><a id="SQLRF54527"></a><span class="subhead3">CHUNK <span class="italic">integer</span> <a id="sthref5731"></a><a id="sthref5732"></a>&nbsp;</span>Specify the number of bytes to be allocated for LOB manipulation. If <code dir="ltr"><span class="codeinlineitalic">integer</span></code> is not a multiple of the database block size, then the database rounds up in bytes to the next multiple. For example, if the database block size is 2048 and <code dir="ltr"><span class="codeinlineitalic">integer</span></code> is 2050, then the database allocates 4096 bytes (2 blocks). The maximum value is 32768 (32K), which is the largest Oracle Database block size allowed. The default <code dir="ltr">CHUNK</code> size is one Oracle Database block.</p>
<p>The value of <code dir="ltr">CHUNK</code> must be less than or equal to the value of <code dir="ltr">NEXT</code>, either the default value or that specified in the <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code>. If <code dir="ltr">CHUNK</code> exceeds the value of <code dir="ltr">NEXT</code>, then the database returns an error. You cannot change the value of <code dir="ltr">CHUNK</code> once it is set.</p>
<p><a id="BABJEEFG"></a><a id="SQLRF54528"></a><span class="subhead3">PCTVERSION <span class="italic">integer</span> <a id="sthref5733"></a><a id="sthref5734"></a>&nbsp;</span></p>
<p>Specify the maximum percentage of overall LOB storage space used for maintaining old versions of the LOB. If the database is running in manual undo mode, then the default value is 10, meaning that older versions of the LOB data are not overwritten until they consume 10% of the overall LOB storage space.</p>
<p>You can specify the <code dir="ltr">PCTVERSION</code> parameter whether the database is running in manual or automatic undo mode. <code dir="ltr">PCTVERSION</code> is the default in manual undo mode. <code dir="ltr">RETENTION</code> is the default in automatic undo mode. You cannot specify both <code dir="ltr">PCTVERSION</code> and <code dir="ltr">RETENTION</code>.</p>
<p>This clause is not valid if you have specified <code dir="ltr">SECUREFILE</code>. If you specify both <code dir="ltr">SECUREFILE</code> and <code dir="ltr">PCTVERSION</code>, then the database silently ignores the <code dir="ltr">PCTVERSION</code> parameter.</p>
<p><a id="BABHECFH"></a><a id="SQLRF54529"></a><span class="subhead3"><span class="italic">LOB_retention_clause</span> <a id="sthref5735"></a><a id="sthref5736"></a>&nbsp;</span>Use this clause to specify whether you want the LOB segment retained for flashback purposes, consistent-read purposes, both, or neither.</p>
<p>You can specify the <code dir="ltr">RETENTION</code> parameter only if the database is running in automatic undo mode. Oracle Database uses the value of the <code dir="ltr">UNDO_RETENTION</code> initialization parameter to determine the amount of committed undo data to retain in the database. In automatic undo mode, <code dir="ltr">RETENTION</code> is the default value unless you specify <code dir="ltr">PCTVERSION</code>. You cannot specify both <code dir="ltr">PCTVERSION</code> and <code dir="ltr">RETENTION</code>.</p>
<p>You can specify the optional settings after <code dir="ltr">RETENTION</code> only if you are using SecureFiles. The <code dir="ltr">SECUREFILE</code> parameter of the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> indicates that the database will use SecureFiles to manage storage dynamically, taking into account factors such as the undo mode of the database.</p>
<ul>
<li>
<p>Specify <code dir="ltr">MAX</code> to signify that the undo should be retained until the LOB segment has reached <code dir="ltr">MAXSIZE</code>. If you specify <code dir="ltr">MAX</code>, then you must also specify the <code dir="ltr">MAXSIZE</code> clause in the <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code>.</p>
</li>
<li>
<p>Specify <code dir="ltr">MIN</code> if the database is in flashback mode to limit the undo retention <span class="bold">duration</span> for the specific LOB segment to <code dir="ltr"><span class="codeinlineitalic">n</span></code> seconds.</p>
</li>
<li>
<p>Specify <code dir="ltr">AUTO</code> if you want to retain undo sufficient for consistent read purposes only.</p>
</li>
<li>
<p>Specify <code dir="ltr">NONE</code> if no undo is required for either consistent read or flashback purposes.</p>
</li>
</ul>
<p>If you do not specify the <code dir="ltr">RETENTION</code> parameter, or you specify <code dir="ltr">RETENTION</code> with no optional settings, then <code dir="ltr">RETENTION</code> is set to <code dir="ltr">DEFAULT</code>, which is functionally equivalent to <code dir="ltr">AUTO</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> clause <a href="#i2128955"><span class="xreftitleitalic"><span class="italic">LOB_storage_parameters</span></span></a> for more information on simplified LOB storage using SecureFiles</p>
</li>
<li>
<p><a class="olink ADLOB4444" href="../ADLOB/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information on using SecureFiles</p>
</li>
<li>
<p><a href="statements_1006.htm#i2155821"><span class="xreftitleitalic"><span class="italic">flashback_mode_clause</span></span></a> of <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> for information on putting a database in flashback mode</p>
</li>
<li>
<p><a href="statements_7003.htm#i2153390">&#34;Creating an Undo Tablespace: Example&#34;</a></p>
</li>
</ul>
</div>
<p><a id="BABHJCGF"></a><a id="SQLRF54530"></a><span class="subhead3">FREEPOOLS <span class="italic">integer</span> <a id="sthref5737"></a><a id="sthref5738"></a>&nbsp;</span>Specify the number of groups of free lists for the LOB segment. Normally <code dir="ltr"><span class="codeinlineitalic">integer</span></code> will be the number of instances in an Oracle Real Application Clusters environment or 1 for a single-instance database.</p>
<p>You can specify this parameter only if the database is running in automatic undo mode. In this mode, <code dir="ltr">FREEPOOLS</code> is the default unless you specify the <code dir="ltr">FREELIST</code> <code dir="ltr">GROUPS</code> parameter of the <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code>. If you specify neither <code dir="ltr">FREEPOOLS</code> nor <code dir="ltr">FREELIST</code> <code dir="ltr">GROUPS</code>, then the database uses a default of <code dir="ltr">FREEPOOLS</code>&nbsp;<code dir="ltr">1</code> if the database is in automatic undo management mode and a default of <code dir="ltr">FREELIST</code> <code dir="ltr">GROUPS</code>&nbsp;<code dir="ltr">1</code> if the database is in manual undo management mode.</p>
<p>This clause is not valid if you have specified <code dir="ltr">SECUREFILE</code>. If you specify both <code dir="ltr">SECUREFILE</code> and <code dir="ltr">FREEPOOLS</code>, then the database silently ignores the <code dir="ltr">FREEPOOLS</code> parameter.</p>
<p><a id="SQLRF54531"></a><span class="subhead3">Restriction on FREEPOOLS&nbsp;</span>You cannot specify both <code dir="ltr">FREEPOOLS</code> and the <code dir="ltr">FREELIST</code> <code dir="ltr">GROUPS</code> parameter of the <code dir="ltr"><span class="codeinlineitalic">storage_clause</span></code>.</p>
<p><a id="BABHHFDA"></a><a id="SQLRF54532"></a><span class="subhead3"><span class="italic">LOB_deduplicate_clause</span> <a id="sthref5739"></a>&nbsp;</span>This clause is valid only for SecureFiles LOBs. Use the <code dir="ltr"><span class="codeinlineitalic">LOB_deduplicate_clause</span></code> to enable or disable LOB deduplication, which is the elimination of duplicate LOB data.</p>
<p>The <code dir="ltr">DEDUPLICATE</code> keyword instructs the database to eliminate duplicate copies of LOBs. Using a secure hash index to detect duplication, the database coalesces LOBs with identical content into a single copy, reducing storage consumption and simplifying storage management.</p>
<p>If you omit this clause, then LOB deduplication is disabled by default.</p>
<p>This clause implements LOB deduplication for the entire LOB segment. To enable or disable deduplication for an individual LOB, use the <code dir="ltr">DBMS_LOB.SETOPTIONS</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../ADLOB/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information about LOB deduplication and <a class="olink ARPLS600" href="../ARPLS/d_lob.htm#ARPLS600"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about about the <code dir="ltr">DBMS_LOB</code> package</div>
<p><a id="BABIJJHI"></a><a id="SQLRF54533"></a><span class="subhead3"><span class="italic">LOB_compression_clause</span> <a id="sthref5740"></a>&nbsp;</span>This clause is valid only for SecureFiles LOBs, not for BasicFiles LOBs. Use the <code dir="ltr"><span class="codeinlineitalic">LOB_compression_clause</span></code> to instruct the database to enable or disable server-side LOB compression. Random read/write access is possible on server-side compressed LOB segments. LOB compression is independent from table compression or index compression. If you omit this clause, then the default is <code dir="ltr">NOCOMPRESS</code>.</p>
<p>You can specify <code dir="ltr">HIGH</code>, <code dir="ltr">MEDIUM</code>, or <code dir="ltr">LOW</code> to vary the degree of compression. The <code dir="ltr">HIGH</code> degree of compression incurs higher latency than <code dir="ltr">MEDIUM</code> but provides better compression. The <code dir="ltr">LOW</code> degree results in significantly higher decompression and compression speeds, at the cost of slightly lower compression ratio than either <code dir="ltr">HIGH</code> or <code dir="ltr">MEDIUM</code>. If you omit this optional parameter, then the default is <code dir="ltr">MEDIUM</code>.</p>
<p>This clause implements server-side LOB compression for the entire LOB segment. To enable or disable compression on an individual LOB, use the <code dir="ltr">DBMS_LOB.SETOPTIONS</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../ADLOB/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information on server-side LOB storage and <span class="italic">Oracle Database PL/SQL Packages and Types Reference</span> for information about client-side LOB compression using the <a class="olink ARPLS381" href="../ARPLS/u_compr.htm#ARPLS381"><code dir="ltr">UTL_COMPRESS</code></a> supplied package and for information about the <a class="olink ARPLS600" href="../ARPLS/d_lob.htm#ARPLS600"><code dir="ltr">DBMS_LOB</code></a> package</div>
<p><a id="BABDDBJD"></a><a id="SQLRF54534"></a><span class="subhead3">ENCRYPT | DECRYPT <a id="sthref5741"></a>&nbsp;</span>These clauses are valid only for LOBs that are using SecureFiles for LOB storage. Specify <code dir="ltr">ENCRYPT</code> to encrypt all LOBs in the column. Specify <code dir="ltr">DECRYPT</code> to keep the LOB in cleartext. If you omit this clause, then <code dir="ltr">DECRYPT</code> is the default.</p>
<p>Refer to <a href="#CEGDFHBD"><span class="xreftitleitalic"><span class="italic">encryption_spec</span></span></a> for general information on that clause. When applied to a LOB column, <code dir="ltr"><span class="codeinlineitalic">encryption_spec</span></code> is specific to the individual LOB column, so the encryption algorithm can differ from that of other LOB columns and other non-LOB columns. Use the <code dir="ltr"><span class="codeinlineitalic">encryption_spec</span></code> as part of the <code dir="ltr"><span class="codeinlineitalic">column_definition</span></code> to encrypt the entire LOB column. Use the <code dir="ltr"><span class="codeinlineitalic">encryption_spec</span></code> as part of the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> to encrypt a LOB partition.</p>
<p><a id="SQLRF54535"></a><span class="subhead3">Restriction on <span class="italic">encryption_spec</span> for LOBs&nbsp;</span>You cannot specify the <code dir="ltr">SALT</code> or <code dir="ltr">NO</code> <code dir="ltr">SALT</code> clauses of <code dir="ltr"><span class="codeinlineitalic">encryption_spec</span></code> for LOB encryption.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../ADLOB/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information on LOB encryption and <a class="olink ARPLS600" href="../ARPLS/d_lob.htm#ARPLS600"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information the <code dir="ltr">DBMS_LOB</code> package</div>
<p><a id="SQLRF54536"></a><span class="subhead3">CACHE | NOCACHE | CACHE READS &nbsp;</span>Refer to <a href="#i2215507">CACHE | NOCACHE | CACHE READS</a> for information on these clauses.</p>
<p class="subhead2"><a id="BABEACDC"></a><a id="SQLRF54537"></a><span class="italic">LOB_partition_storage</span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">LOB_partition_storage</span></code> clause lets you specify a separate <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> or <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code> clause for each partition. You must specify the partitions in the order of partition position. You can find the order of the partitions by querying the <code dir="ltr">PARTITION_NAME</code> and <code dir="ltr">PARTITION_POSITION</code> columns of the <code dir="ltr">USER_IND_PARTITIONS</code> view.</p>
<p>If you do not specify a <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> or <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code> clause for a particular partition, then the storage characteristics are those specified for the LOB item at the table level. If you also did not specify any storage characteristics for the LOB item at the table level, then Oracle Database stores the LOB data partition in the same tablespace as the table partition to which it corresponds.</p>
<p><a id="SQLRF55613"></a><span class="subhead3">Restrictions on <span class="italic">LOB_partition_storage</span>:&nbsp;</span><code dir="ltr"><span class="codeinlineitalic">LOB_partition_storage</span></code> is subject to the following restrictions:</p>
<ul>
<li>
<p>In the <code dir="ltr"><span class="codeinlineitalic">LOB_parameters</span></code> of the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code>, you cannot specify <code dir="ltr"><span class="codeinlineitalic">encryption_spec</span></code>, because it is invalid to specify an encryption algorithm for partitions and subpartitions.</p>
</li>
<li>
<p>You can only specify the <code dir="ltr">TABLESPACE</code> clause for hash partitions and all types of subpartitions.</p>
</li>
</ul>
<p class="subhead2"><a id="i2143624"></a><a id="SQLRF54538"></a><span class="italic">varray_col_properties</span> <span class="bolditalic"><a id="sthref5742"></a><a id="sthref5743"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code> let you specify separate storage characteristics for the LOB in which a varray will be stored. If <code dir="ltr"><span class="codeinlineitalic">varray_item</span></code> is a multilevel collection, then the database stores all collection items nested within <code dir="ltr"><span class="codeinlineitalic">varray_item</span></code> in the same LOB in which <code dir="ltr"><span class="codeinlineitalic">varray_item</span></code> is stored.</p>
<ul>
<li>
<p>For a nonpartitioned table&mdash;when specified in the <code dir="ltr"><span class="codeinlineitalic">physical_properties</span></code> clause without any of the partitioning clauses&mdash;this clause specifies the storage attributes of the LOB data segments of the varray.</p>
</li>
<li>
<p>For a partitioned table specified at the table level&mdash;when specified in the <code dir="ltr"><span class="codeinlineitalic">physical_properties</span></code> clause along with one of the partitioning clauses&mdash;this clause specifies the default storage attributes for the varray LOB data segments associated with each partition (or its subpartitions, if any).</p>
</li>
<li>
<p>For an individual partition of a partitioned table&mdash;when specified as part of a <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code>&mdash;this clause specifies the storage attributes of the varray LOB data segments of that partition or the default storage attributes of the varray LOB data segments of any subpartitions of this partition. A partition-level <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code> overrides a table-level <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code>.</p>
</li>
<li>
<p>For an individual subpartition of a partitioned table&mdash;when specified as part of <code dir="ltr"><span class="codeinlineitalic">subpartition_by_hash</span></code> or <code dir="ltr"><span class="codeinlineitalic">subpartition_by_list</span></code>&mdash;this clause specifies the storage attributes of the varray data segments of this subpartition. A subpartition-level <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code> overrides both partition-level and table-level <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code>.</p>
</li>
</ul>
<p><a id="SQLRF54539"></a><span class="subhead3">STORE AS [SECUREFILE | BASICFILE] LOB Clause&nbsp;</span>If you specify <code dir="ltr">STORE</code> <code dir="ltr">AS</code> <code dir="ltr">LOB</code>, then:</p>
<ul>
<li>
<p>If the maximum varray size is less than approximately 4000 bytes, then the database stores the varray as an inline LOB unless you have disabled storage in row.</p>
</li>
<li>
<p>If the maximum varray size is greater than approximately 4000 bytes or if you have disabled storage in row, then the database stores in the varray as an out-of-line LOB.</p>
</li>
</ul>
<p>If you do not specify <code dir="ltr">STORE</code> <code dir="ltr">AS</code> <code dir="ltr">LOB</code>, then storage is based on the maximum possible size of the varray rather than on the actual size of a varray column. The maximum size of the varray is the number of elements times the element size, plus a small amount for system control information. If you omit this clause, then:</p>
<ul>
<li>
<p>If the maximum size of the varray is less than approximately 4000 bytes, then the database does not store the varray as a LOB, but as inline data.</p>
</li>
<li>
<p>If the maximum size is greater than approximately 4000 bytes, then the database always stores the varray as a LOB.</p>
<ul>
<li>
<p>If the actual size is less than approximately 4000 bytes, then it is stored as an inline LOB</p>
</li>
<li>
<p>If the actual size is greater than approximately 4000 bytes, then it is stored as an out-of-line LOB, as is true for other LOB columns.</p>
</li>
</ul>
</li>
</ul>
<p><a id="SQLRF54540"></a><span class="subhead3"><span class="italic">substitutable_column_clause</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">substitutable_column_clause</span></code> has the same behavior as described for <a href="#i2128922"><span class="xreftitleitalic"><span class="italic">object_type_col_properties</span></span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2090577">&#34;Substitutable Table and Column Examples&#34;</a></div>
<p><a id="SQLRF55614"></a><span class="subhead3">Restriction on Varray Column Properties &nbsp;</span>You cannot specify this clause on an interval partitioned table.</p>
<p class="subhead2"><a id="i2129048"></a><a id="SQLRF54541"></a><span class="italic">nested_table_col_properties</span> <span class="bolditalic"><a id="sthref5744"></a><a id="sthref5745"></a><a id="sthref5746"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">nested_table_col_properties</span></code> let you specify separate storage characteristics for a nested table, which in turn enables you to define the nested table as an index-organized table. Unless you explicitly specify otherwise in this clause:</p>
<ul>
<li>
<p>For a nonpartitioned table, the storage table is created in the same schema and the same tablespace as the parent table.</p>
</li>
<li>
<p>For a partitioned table, the storage table is created in the default tablespace of the schema. By default, nested tables are equipartitioned with the partitioned base table.</p>
</li>
<li>
<p>In either case, the storage table uses default storage characteristics, and stores the nested table values of the column for which it was created.</p>
</li>
</ul>
<p>You must include this clause when creating a table with columns or column attributes whose type is a nested table. Clauses within <code dir="ltr"><span class="codeinlineitalic">nested_table_col_properties</span></code> that function the same way they function for the parent table are not repeated here.</p>
<p><a id="SQLRF54542"></a><span class="subhead3"><span class="italic">nested_item</span>&nbsp;</span>Specify the name of a column, or of a top-level attribute of the object type of the tables, whose type is a nested table.</p>
<p><a id="SQLRF54543"></a><span class="subhead3">COLUMN_VALUE<a id="sthref5747"></a><a id="sthref5748"></a><a id="sthref5749"></a>&nbsp;</span>If the nested table is a multilevel collection, then the inner nested table or varray may not have a name. In this case, specify <code dir="ltr">COLUMN_VALUE</code> in place of the <code dir="ltr"><span class="codeinlineitalic">nested_item</span></code> name.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2139603">&#34;Creating a Table: Multilevel Collection Example&#34;</a> for examples using <code dir="ltr"><span class="codeinlineitalic">nested_item</span></code> and <code dir="ltr">COLUMN_VALUE</code></div>
<p><a id="SQLRF54544"></a><span class="subhead3">LOCAL | GLOBAL&nbsp;</span>Specify <code dir="ltr">LOCAL</code> to equipartition the nested table with the base table. This is the default. Oracle Database automatically creates a local partitioned index for the partitioned nested table.</p>
<p>Specify <code dir="ltr">GLOBAL</code> to indicate that the nested table is a nonpartitioned nested table of a partitioned base table.</p>
<p><a id="SQLRF54545"></a><span class="subhead3"><span class="italic">storage_table</span>&nbsp;</span>Specify the name of the table where the rows of <code dir="ltr"><span class="codeinlineitalic">nested_item</span></code> reside.</p>
<p>You cannot query or perform DML statements on <code dir="ltr"><span class="codeinlineitalic">storage_table</span></code> directly, but you can modify its storage characteristics by specifying its name in an <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_3001.htm#CJAHHIBI">ALTER TABLE</a> for information about modifying nested table column storage characteristics</div>
<p><a id="SQLRF54547"></a><span class="subhead3">RETURN [AS]&nbsp;</span>Specify what Oracle Database returns as the result of a query.</p>
<ul>
<li>
<p><code dir="ltr">VALUE</code> returns a copy of the nested table itself.</p>
</li>
<li>
<p><code dir="ltr">LOCATOR</code> returns a collection locator to the copy of the nested table.</p>
<p>The locator is scoped to the session and cannot be used across sessions. Unlike a LOB locator, the collection locator cannot be used to modify the collection instance.</p>
</li>
</ul>
<p>If you do not specify the <code dir="ltr"><span class="codeinlineitalic">segment_attributes_clause</span></code> or the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code>, then the nested table is heap organized and is created with default storage characteristics.</p>
<p><a id="SQLRF54548"></a><span class="subhead3">Restrictions on Nested Table Column Properties&nbsp;</span>Nested table column properties are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify this clause for a temporary table.</p>
</li>
<li>
<p>You cannot specify this clause on an interval partitioned table.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">oid_clause</span></code>.</p>
</li>
<li>
<p>At create time, you cannot use <code dir="ltr"><span class="codeinlineitalic">object_properties</span></code> to specify an <code dir="ltr"><span class="codeinlineitalic">out_of_line_ref_constraint</span></code>, <code dir="ltr"><span class="codeinlineitalic">inline_ref_constraint</span></code>, or foreign key constraint for the attributes of a nested table. However, you can modify a nested table to add such constraints using <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="statements_3001.htm#CJAHHIBI">ALTER TABLE</a> for information about modifying nested table column storage characteristics</p>
</li>
<li>
<p><a href="#i2153200">&#34;Nested Table Example&#34;</a> and <a href="#i2139603">&#34;Creating a Table: Multilevel Collection Example&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="i2129098"></a><a id="SQLRF54549"></a><span class="italic">XMLType_column_properties <a id="sthref5750"></a><a id="sthref5751"></a><a id="sthref5752"></a><a id="sthref5753"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">XMLType_column_properties</span></code> let you specify storage attributes for an <code dir="ltr">XMLTYPE</code> column.</p>
<p><a id="BABHACJA"></a><a id="SQLRF01709"></a><span class="subhead3"><span class="italic">XMLType_storage<a id="sthref5754"></a><a id="sthref5755"></a><a id="sthref5756"></a></span>&nbsp;</span><code dir="ltr">XMLType</code> data can be stored in binary XML, <code dir="ltr">CLOB</code>, or object-relational columns.</p>
<ul>
<li>
<p>Specify <code dir="ltr">BINARY</code> <code dir="ltr">XML</code> to store the XML data in compact binary XML format.</p>
<p>Any LOB parameters you specify are applied to the underlying <code dir="ltr">BLOB</code> column created for storing the binary XML encoded value.</p>
<p>In earlier releases, binary XML data is stored by default in a BasicFiles LOB. Beginning with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), if the <code dir="ltr">COMPATIBLE</code> initialization parameter is 11.2 or higher and you do not specify <code dir="ltr">BASICFILE</code> or <code dir="ltr">SECUREFILE</code>, then binary XML data is stored in a SecureFiles LOB whenever possible. If SecureFiles LOB storage is not possible then the binary XML data is stored in a BasicFiles LOB. This can occur if either of the following is true:</p>
<ul>
<li>
<p>The tablespace for the <code dir="ltr">XMLType</code> table does not use automatic segment space management.</p>
</li>
<li>
<p>A setting in file <code dir="ltr">init</code>.<code dir="ltr">ora</code> prevents SecureFiles LOB storage. For example, see parameter <code dir="ltr">DB_SECUREFILE</code> in <a class="olink REFRN10290" href="../REFRN/GUID-6F7C5E21-3929-4AB1-9C72-1BB9BDDB011F.htm#REFRN10290"><span class="italic">Oracle Database Reference</span></a>.</p>
</li>
</ul>
</li>
<li>
<p>Specify <code dir="ltr">CLOB</code> if you want the database to store the <code dir="ltr">XMLType</code> data in a <code dir="ltr">CLOB</code> column. Storing data in a <code dir="ltr">CLOB</code> column preserves the original content and enhances retrieval time.</p>
<p>If you specify LOB storage, then you can specify either LOB parameters or the <code dir="ltr"><span class="codeinlineitalic">XMLSchema_spec</span></code> clause, but not both. Specify the <code dir="ltr"><span class="codeinlineitalic">XMLSchema_spec</span></code> clause if you want to restrict the table or column to particular schema-based XML instances.</p>
<p>If you do not specify <code dir="ltr">BASICFILE</code> or <code dir="ltr">SECUREFILE</code> with this clause, then the <code dir="ltr">CLOB</code> column is stored in a BasicFiles LOB.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends against storing <code dir="ltr">XMLType</code> data in a <code dir="ltr">CLOB</code> column. <code dir="ltr">CLOB</code> storage of <code dir="ltr">XMLType</code> is deprecated. Use binary XML storage of <code dir="ltr">XMLType</code> instead.</div>
</li>
<li>
<p>Specify <code dir="ltr">OBJECT</code> <code dir="ltr">RELATIONAL</code> if you want the database to store the <code dir="ltr">XMLType</code> data in object-relational columns. Storing data objects relationally lets you define indexes on the relational columns and enhances query performance.</p>
<p>If you specify object-relational storage, then you must also specify the <code dir="ltr"><span class="codeinlineitalic">XMLSchema_spec</span></code> clause.</p>
</li>
</ul>
<p>Use the <code dir="ltr">ALL</code> <code dir="ltr">VARRAYS</code> <code dir="ltr">AS</code> clause if you want the database to store all varrays in an <code dir="ltr">XMLType</code> column.</p>
<p>In earlier releases, <code dir="ltr">XMLType</code> data is stored in a <code dir="ltr">CLOB</code> column in a BasicFiles LOB by default. Beginning with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), if the <code dir="ltr">COMPATIBLE</code> initialization parameter is 11.2 or higher and you do not specify the <code dir="ltr"><span class="codeinlineitalic">XMLType_storage</span></code> clause, then <code dir="ltr">XMLType</code> data is stored in a binary XML column in a SecureFiles LOB. If SecureFiles LOB storage is not possible, then it is stored in a binary XML column in a BasicFiles LOB.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../ADLOB/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information on SecureFiles LOBs</div>
<p><a id="SQLRF54550"></a><span class="subhead3"><span class="italic">XMLSchema_spec <a id="sthref5757"></a><a id="sthref5758"></a><a id="sthref5759"></a></span>&nbsp;</span></p>
<p>Refer to the <a href="#i2215293"><span class="xreftitleitalic"><span class="italic">XMLSchema_spec</span></span></a> for the full semantics of this clause.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="statements_3001.htm#i2103547"><span class="xreftitleitalic"><span class="italic">LOB_storage_clause</span></span></a> for information on the <code dir="ltr"><span class="codeinlineitalic">LOB_segname</span></code> and <code dir="ltr"><span class="codeinlineitalic">LOB_parameters</span></code> clauses</p>
</li>
<li>
<p><a href="#i2139746">&#34;XMLType Column Examples&#34;</a> for examples of <code dir="ltr">XMLType</code> columns in object-relational tables and <a href="ap_examples002.htm#i686084">&#34;Using XML in SQL Statements&#34;</a> for an example of creating an XMLSchema</p>
</li>
<li>
<p><span class="italic">Oracle XML DB Developer&#39;s Guide</span> for more information on <a class="olink ADXDB0400" href="../ADXDB/xdb04cre.htm#ADXDB0400"><code dir="ltr">XMLType</code> columns</a> and tables and on creating <a class="olink ADXDB0800" href="../ADXDB/xdb07evo.htm#ADXDB0800">XMLSchemas</a></p>
</li>
<li>
<p><a class="olink ARPLS377" href="../ARPLS/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information on the <code dir="ltr">DBMS_XMLSCHEMA</code> package</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="BABJHCEG"></a><a id="SQLRF54551"></a><span class="italic">XMLType_virtual_columns</span></p>
<p>This clause is valid only for <code dir="ltr">XMLType</code> tables with binary XML storage, which you designate in the <code dir="ltr"><span class="codeinlineitalic">XMLType_storage</span></code> clause. Specify the <code dir="ltr">VIRTUAL</code> <code dir="ltr">COLUMNS</code> clause to define virtual columns, which can be used as in a function-based index or in the definition of a constraint. You cannot define a constraint on such a virtual column during creation of the table, but you can use a subsequent <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement to add a constraint to the column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADXDB0300" href="../ADXDB/xdb03usg.htm#ADXDB0300"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for examples of how to use this clause in an XML environment</div>
<p class="subhead2"><a id="CJAFJABE"></a><a id="SQLRF56186"></a><span class="italic">indexing_clause<a id="sthref5760"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> is valid only for partitioned tables. Use this clause to set the <span class="bold">indexing</span> <span class="bold">property</span> for a table, table partition, or table subpartition.</p>
<ul>
<li>
<p>Specify <code dir="ltr">INDEXING</code> <code dir="ltr">ON</code> to set the indexing property to <code dir="ltr">ON</code>. This is the default.</p>
</li>
<li>
<p>Specify <code dir="ltr">INDEXING</code> <code dir="ltr">OFF</code> to set the indexing property to <code dir="ltr">OFF</code>.</p>
</li>
</ul>
<p>The indexing property determines whether table partitions and subpartitions are included in partial indexes on the table.</p>
<ul>
<li>
<p>For simple partitioned tables, partitions with an indexing property of <code dir="ltr">ON</code> are included in partial indexes on the table. Partitions with an indexing property of <code dir="ltr">OFF</code> are excluded.</p>
</li>
<li>
<p>For composite-partitioned tables, subpartitions with an indexing property of <code dir="ltr">ON</code> are included in partial indexes on the table. Subpartitions with an indexing property of <code dir="ltr">OFF</code> are excluded.</p>
</li>
</ul>
<p>You can specify the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> at the table, partition, or subpartition level. When you specify the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> at the table level, in the <code dir="ltr"><span class="codeinlineitalic">table_properties</span></code> clause, you set the default indexing property for the table. Interval partitions, which are automatically created by the database, always inherit the default indexing property for the table. Other types of partitions and subpartitions inherit the default indexing property as follows:</p>
<ul>
<li>
<p>For simple partitioned tables, partitions inherit the default indexing property for the table. You can override this behavior by specifying the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> for an individual partition:</p>
<ul>
<li>
<p>For a range partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">range_partitions</span></code> clause</p>
</li>
<li>
<p>For a hash partition, in the <code dir="ltr"><span class="codeinlineitalic">individual_hash_partitions</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">hash_partitions</span></code> clause</p>
</li>
<li>
<p>For a list partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">list_partitions</span></code> clause</p>
</li>
<li>
<p>For a reference partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">reference_partition_desc</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">reference_partitioning</span></code> clause</p>
</li>
<li>
<p>For a system partition, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">reference_partition_desc</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">system_partitioning</span></code> clause</p>
</li>
</ul>
</li>
<li>
<p>For composite-partitioned tables, subpartitions inherit the default indexing property for the table. You can override this behavior by specifying the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> for an individual partition or subpartition.</p>
<p>If you specify the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> for a partition, then its subpartitions inherit the indexing property of the partition:</p>
<ul>
<li>
<p>For composite range partitions, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">composite_range_partitions</span></code> clause</p>
</li>
<li>
<p>For composite list partitions, in the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> of the <code dir="ltr"><span class="codeinlineitalic">composite_list_partitions</span></code> clause</p>
</li>
<li>
<p>For composite hash partitions, in the <code dir="ltr"><span class="codeinlineitalic">individual_hash_partitions</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">composite_hash_partitions</span></code> clause</p>
</li>
</ul>
<p>You can set the indexing property of a subpartition by specifying the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> for the subpartition:</p>
<ul>
<li>
<p>For range subpartitions, in the <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">composite_range_partitions</span></code> clause</p>
</li>
<li>
<p>For list subpartitions, in the <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">composite_list_partitions</span></code> clause</p>
</li>
<li>
<p>For hash subpartitions, in the <code dir="ltr"><span class="codeinlineitalic">individual_hash_subparts</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">composite_hash_partitions</span></code> clause</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN" href="../REFRN/toc.htm"><span class="italic">Oracle Database Reference</span></a> for information on viewing the indexing property of a table, table partition, or table subpartition.
<ul>
<li>
<p>To view the default indexing property of a table, query the <code dir="ltr">DEF_INDEXING</code> column of the <code dir="ltr">*_PART_TABLES</code> views.</p>
</li>
<li>
<p>To view the indexing property of a table partition, query the <code dir="ltr">INDEXING</code> column of the <code dir="ltr">*_TAB_PARTITIONS</code> views.</p>
</li>
<li>
<p>To view the indexing property of a table subpartition, query the <code dir="ltr">INDEXING</code> column of the <code dir="ltr">*_TAB_SUBPARTITIONS</code> views.</p>
</li>
</ul>
</div>
<p><a id="SQLRF56187"></a><span class="subhead3">Restrictions on the <span class="italic">indexing_clause</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> for nonpartitioned tables.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> for index-organized tables.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <a href="statements_5013.htm#BGEBGEAH"><span class="xreftitleitalic"><span class="italic">partial_index_clause</span></span></a> of <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> for more information on partial indexes</div>
<p class="subhead2"><a id="i2215406"></a><a id="SQLRF54552"></a><span class="italic">table_partitioning_clauses <a id="sthref5761"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">table_partitioning_clauses</span></code> to create a partitioned table.</p>
<p><a id="CHDFAGGH"></a><a id="SQLRF54553"></a><span class="subhead3">Notes on Partitioning in General&nbsp;</span>The following notes pertain to all types of partitioning:</p>
<ul>
<li>
<p>You can specify up to a total of 1024K-1 partitions and subpartitions.</p>
</li>
<li>
<p>You can create a partitioned table with just one partition. A table with one partition is different from a nonpartitioned table. For example, you cannot add a partition to a nonpartitioned table.</p>
</li>
<li>
<p>You can specify a name for every table and LOB partition and for every table and LOB subpartition, but you need not do so. If you omit the name, then the database generates names as follows:</p>
<ul>
<li>
<p>If you omit a partition name, then the database generates a name of the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. System-generated names for LOB data and LOB index partitions take the form <code dir="ltr">SYS_LOB_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> and <code dir="ltr">SYS_IL_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>, respectively.</p>
</li>
<li>
<p>If you specify a subpartition name in <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code>, then for each subpartition created with that template, the database generates a name by concatenating the partition name with the template subpartition name. For LOB subpartitions, the generated LOB subpartition name is a concatenation of the partition name and the template LOB segment name. In either case, if the concatenation exceeds 30 characters, then the database returns an error and the statement fails.</p>
</li>
<li>
<p>If you omit a subpartition name when specifying an individual subpartition, and you have not specified <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code>, then the database generates a name of the form <code dir="ltr">SYS_SUBP</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. The corresponding system-generated names for LOB data and index subpartitions are <code dir="ltr">SYS_LOB_SUBP</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> and <code dir="ltr">SYS_IL_SUBP</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>, respectively.</p>
</li>
</ul>
</li>
<li>
<p>Tablespace storage can be specified at various levels in the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement for both table segments and LOB segments. The number of tablespaces does not have to equal the number of partitions or subpartitions. If the number of partitions or subpartitions is greater than the number of tablespaces, then the database cycles through the names of the tablespaces.</p>
<p>The database evaluates tablespace storage in the following order of descending priority:</p>
<ul>
<li>
<p>Tablespace storage specified at the individual table subpartition or LOB subpartition level has the highest priority, followed by storage specified for the partition or LOB in the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code>.</p>
</li>
<li>
<p>Tablespace storage specified at the individual table partition or LOB partition level. Storage parameters specified here take precedence over the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code>.</p>
</li>
<li>
<p>Tablespace storage specified for the table</p>
</li>
<li>
<p>Default tablespace storage specified for the user</p>
</li>
</ul>
</li>
<li>
<p>By default, nested tables are equipartitioned with the partitioned base table.</p>
</li>
</ul>
<p><a id="BABIICCD"></a><a id="SQLRF54554"></a><span class="subhead3">Restrictions on Partitioning in General&nbsp;</span>All partitioning is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot partition a table that is part of a cluster.</p>
</li>
<li>
<p>You cannot partition a nested table or varray that is defined as an index-organized table.</p>
</li>
<li>
<p>You cannot partition a table containing any <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns.</p>
</li>
</ul>
<p>The storage of partitioned database entities in tablespaces of different block sizes is subject to several restrictions. Refer to <a class="olink VLDBG00306" href="../VLDBG/GUID-24050391-B7C5-4AE2-86D4-B5438412C3F6.htm#VLDBG00306"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for a discussion of these restrictions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2153324">&#34;Partitioning Examples&#34;</a></div>
<p class="subhead1"><a id="BABJDACD"></a><a id="SQLRF54555"></a><span class="italic">range_partitions<a id="sthref5762"></a><a id="sthref5763"></a><a id="sthref5764"></a><a id="sthref5765"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">range_partitions</span></code> clause to partition the table on ranges of values from the column list. For an index-organized table, the column list must be a subset of the primary key columns of the table.</p>
<p class="subhead2"><a id="BABGEHCB"></a><a id="SQLRF54556"></a><span class="italic">column</span></p>
<p>Specify an ordered list of columns used to determine into which partition a row belongs. These columns are the <span class="bold">partitioning key</span>. You can specify virtual columns and <code dir="ltr">INVISIBLE</code> columns as partitioning key columns.</p>
<p class="subhead2"><a id="BABGCEFI"></a><a id="SQLRF54558"></a>INTERVAL Clause <a id="sthref5766"></a><a id="sthref5767"></a><a id="sthref5768"></a></p>
<p>Use this clause to establish <span class="bold">interval partitioning</span> for the table. Interval partitions are partitions based on a numeric range or datetime interval. They extend range partitioning by instructing the database to create partitions of the specified range or interval automatically when data inserted into the table exceeds all of the range partitions. For each automatically created partition, the database generates a name of the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. The database guarantees that automatically generated partition names are unique and do not violate namespace rules.</p>
<ul>
<li>
<p>For <code dir="ltr"><span class="codeinlineitalic">expr</span></code>, specify a valid number or interval expression.</p>
</li>
<li>
<p>The optional <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause lets you specify one or more tablespaces into which the database will store interval partition data.</p>
</li>
<li>
<p>You must also specify at least one range partition using the <code dir="ltr">PARTITION</code> clause of <code dir="ltr"><span class="codeinlineitalic">range_partitions</span></code>. The range partition key value determines the high value of the range partitions, which is called the <span class="bold">transition point</span>, and the database creates interval partitions for data beyond that transition point.</p>
</li>
</ul>
<p><a id="SQLRF54559"></a><span class="subhead3">Restrictions on Interval Partitioning&nbsp;</span>The <code dir="ltr">INTERVAL</code> clause is subject to the restrictions listed in <a href="#BABIICCD">&#34;Restrictions on Partitioning in General&#34;</a> and <a href="#CJAEBCJE">&#34;Restrictions on Range Partitioning&#34;</a>. The following additional restrictions apply:</p>
<ul>
<li>
<p>You can specify only one partitioning key column, and it must be of type <code dir="ltr">NUMBER</code>, <code dir="ltr">DATE</code>, <code dir="ltr">FLOAT</code>, or <code dir="ltr">TIMESTAMP</code>.</p>
</li>
<li>
<p>This clause is not supported for index-organized tables.</p>
</li>
<li>
<p>This clause is not supported for tables containing nested table columns, varray columns, or <code dir="ltr">XMLType</code> columns.</p>
</li>
<li>
<p>Interval partitioning is not supported at the subpartition level.</p>
</li>
<li>
<p>Serializable transactions do not work with interval partitioning. Trying to insert data into a partition of an interval partitioned table that does not yet have a segment causes an error.</p>
</li>
<li>
<p>In the <code dir="ltr">VALUES</code> clause:</p>
<ul>
<li>
<p>You cannot specify <code dir="ltr">MAXVALUE</code> (an infinite upper bound), because doing so would defeat the purpose of the automatic addition of partitions as needed.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">NULL</code> values for the partitioning key column.</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink VLDBG00221" href="../VLDBG/GUID-C121EA1B-2725-4464-B2C9-EEDE0C3C95AB.htm#VLDBG00221"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information on interval partitioning</div>
<p class="subhead2"><a id="SQLRF54560"></a>PARTITION <span class="italic">partition</span> <a id="sthref5769"></a></p>
<p>If you specify a partition name, then the name <code dir="ltr"><span class="codeinlineitalic">partition</span></code> must conform to the rules for naming schema objects and their part as described in <a href="sql_elements008.htm#i27570">&#34;Database Object Naming Rules&#34;</a>. If you omit <code dir="ltr"><span class="codeinlineitalic">partition</span></code>, then the database generates a name as described in <a href="#CHDFAGGH">&#34;Notes on Partitioning in General&#34;</a>.</p>
<p class="subhead2"><a id="BABGHDFA"></a><a id="SQLRF54561"></a><span class="italic">range_values_clause <a id="sthref5770"></a><a id="sthref5771"></a></span></p>
<p>Specify the noninclusive upper bound for the current partition. The value list is an ordered list of literal values corresponding to the column list in the <code dir="ltr"><span class="codeinlineitalic">range_partitions</span></code> clause. You can substitute the keyword <code dir="ltr">MAXVALUE</code> for any literal in the value list. <code dir="ltr">MAXVALUE</code> specifies a maximum value that will always sort higher than any other value, including null.</p>
<p>Specifying a value other than <code dir="ltr">MAXVALUE</code> for the highest partition bound imposes an implicit integrity constraint on the table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code dir="ltr"><span class="codeinlineitalic">table</span></code> is partitioned on a <code dir="ltr">DATE</code> column, and if the date format does not specify the first two digits of the year, then you must use the <code dir="ltr">TO_DATE</code> function with the <code dir="ltr">YYYY</code> 4-character format mask for the year. The <code dir="ltr">RRRR</code> format mask is not supported in this clause. The date format is determined implicitly by <code dir="ltr">NLS_TERRITORY</code> or explicitly by <code dir="ltr">NLS_DATE_FORMAT</code>. Refer to <a class="olink NLSPG003" href="../NLSPG/ch3globenv.htm#NLSPG003"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information on these initialization parameters.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT112" href="../CNCPT/schemaob.htm#CNCPT112"><span class="italic">Oracle Database Concepts</span></a> for more information about partition bounds and <a href="#i2093664">&#34;Range Partitioning Example&#34;</a></div>
<p class="subhead2"><a id="BABHFEGC"></a><a id="SQLRF54562"></a><span class="italic">table_partition_description</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> to define the physical and storage characteristics of the table.</p>
<p>The clauses <code dir="ltr"><span class="codeinlineitalic">deferred_segment_creation</span></code>, <code dir="ltr"><span class="codeinlineitalic">segment_attributes_clause</span></code>, <code dir="ltr"><span class="codeinlineitalic">table_compression</span></code>, <code dir="ltr"><span class="codeinlineitalic">inmemory_clause</span></code>, and <code dir="ltr"><span class="codeinlineitalic">ilm_clause</span></code> have the same function as described for the <a href="#i2128663"><span class="xreftitleitalic"><span class="italic">physical_properties</span></span></a> of the table as a whole.</p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> to set the indexing property for a range, list, system, or reference table partition. Refer to the <a href="#CJAFJABE"><span class="xreftitleitalic"><span class="italic">indexing_clause</span></span></a> for more information.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">prefix_compression</span></code> clause and <code dir="ltr">OVERFLOW</code> clause, have the same function as described for the <a href="#i2128766"><span class="xreftitleitalic"><span class="italic">index_org_table_clause</span></span></a> .</p>
<p><a id="SQLRF54563"></a><span class="subhead3"><span class="italic">LOB_storage_clause</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> lets you specify LOB storage characteristics for one or more LOB items in this partition or in any range or list subpartitions of this partition. If you do not specify the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code> for a LOB item, then the database generates a name for each LOB data partition as described in <a href="#CHDFAGGH">&#34;Notes on Partitioning in General&#34;</a>.</p>
<p><a id="SQLRF54564"></a><span class="subhead3"><span class="italic">varray_col_properties</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">varray_col_properties</span></code> let you specify storage characteristics for one or more varray items in this partition or in any range or list subpartitions of this partition.</p>
<p><a id="SQLRF54565"></a><span class="subhead3"><span class="italic">nested_table_col_properties</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">nested_table_col_properties</span></code> let you specify storage characteristics for one or more nested table storage table items in this partition or in any range or list subpartitions of this partition. Storage characteristics specified in this clause override any storage attributes specified at the table level.</p>
<p class="subhead2"><a id="BABEJJGH"></a><a id="SQLRF54566"></a><span class="italic">partitioning_storage_clause</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code> to specify storage characteristics for hash partitions and for range, hash, and list subpartitions.</p>
<p><a id="SQLRF54567"></a><span class="subhead3">Restrictions on <span class="italic">partitioning_storage_clause</span>&nbsp;</span>This clause is subject to the following restrictions:</p>
<ul>
<li>
<p>The <code dir="ltr">OVERFLOW</code> clause is relevant only for index-organized partitioned tables and is valid only within the <code dir="ltr"><span class="codeinlineitalic">individual_hash_partitions</span></code> clause. It is not valid for range or hash partitions or for subpartitions of any type.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">advanced_index_compression</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">index_compression</span></code> clause.</p>
</li>
<li>
<p>You can specify the <code dir="ltr"><span class="codeinlineitalic">prefix_compression</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> only for partitions of index-organized tables and you can specify <code dir="ltr">COMPRESS</code> or <code dir="ltr">NOCOMPRESS</code>, but you cannot specify the prefix length with <code dir="ltr"><span class="codeinlineitalic">integer</span></code>.</p>
</li>
</ul>
<p><a id="CJAEBCJE"></a><a id="SQLRF56106"></a><span class="subhead3">Restrictions on Range Partitioning&nbsp;</span>Range partitioning is subject to the restrictions listed in <a href="#BABIICCD">&#34;Restrictions on Partitioning in General&#34;</a>. The following additional restrictions apply:</p>
<ul>
<li>
<p>You cannot specify more than 16 partitioning key columns.</p>
</li>
<li>
<p>Partitioning key columns must be of type <code dir="ltr">CHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">FLOAT</code>, <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIMEZONE</code>, or <code dir="ltr">RAW</code>.</p>
</li>
<li>
<p>You cannot specify NULL in the <code dir="ltr">VALUES</code> clause.</p>
</li>
</ul>
<p class="subhead1"><a id="BABDGHIB"></a><a id="SQLRF54574"></a><span class="italic">list_partitions <a id="sthref5772"></a><a id="sthref5773"></a><a id="sthref5774"></a><a id="sthref5775"></a><a id="sthref5776"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">list_partitions</span></code> clause to partition the table on lists of literal values from <code dir="ltr"><span class="codeinlineitalic">column</span></code>. List partitioning is useful for controlling how individual rows map to specific partitions.</p>
<p><a id="BABCDDIA"></a><a id="SQLRF54575"></a><span class="subhead3"><span class="italic">list_values_clause</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">list_values_clause</span></code> of each partition must have at least one value. No value, including <code dir="ltr">NULL</code>, can appear in more than one partition. List partitions are not ordered.</p>
<p>If you specify the literal <code dir="ltr">NULL</code> for a partition value in the <code dir="ltr">VALUES</code> clause, then to access data in that partition in subsequent queries, you must use an <code dir="ltr">IS</code> <code dir="ltr">NULL</code> condition in the <code dir="ltr">WHERE</code> clause, rather than a comparison condition.</p>
<p>The <code dir="ltr">DEFAULT</code> keyword creates a partition into which the database will insert any row that does not map to another partition. Therefore, you can specify <code dir="ltr">DEFAULT</code> for only one partition, and you cannot specify any other values for that partition. Further, the default partition must be the last partition you define. The use of <code dir="ltr">DEFAULT</code> is similar to the use of <code dir="ltr">MAXVALUE</code> for range partitions.</p>
<p>The string comprising the list of values for each partition can be up to 4K bytes. The total number of values for all partitions cannot exceed 64K-1.</p>
<p>The partitioning key column for a list partition can be an extended data type column, which has a maximum size of 32767 bytes. In this case, the list of values that you want to specify for a partition may exceed the 4K byte limit. You can work around this limitation by using one of the following methods:</p>
<ul>
<li>
<p>Use the <code dir="ltr">DEFAULT</code> partition for values that exceed the 4K byte limit.</p>
</li>
<li>
<p>Use a hash function, such as <code dir="ltr">STANDARD_HASH</code>, in the partition key column to create unique identifiers of lengths less than 4K bytes. See <a href="functions183.htm#BABCCAFF">STANDARD_HASH</a> for more information.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sql_elements001.htm#BABCIGGA">&#34;Extended Data Types&#34;</a> for more information on extended data types</div>
<p><a id="BABFBIHA"></a><a id="SQLRF54576"></a><span class="subhead3"><span class="italic">table_partition_description</span> &nbsp;</span>The subclauses of the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> have the same behavior as described for range partitions in <a href="#BABHFEGC"><span class="xreftitleitalic"><span class="italic">table_partition_description</span></span></a>.</p>
<p><a id="SQLRF54577"></a><span class="subhead3">Restrictions on List Partitioning&nbsp;</span>List partitioning is subject to the restrictions listed in <a href="#BABIICCD">&#34;Restrictions on Partitioning in General&#34;</a>. The following additional restrictions apply:</p>
<ul>
<li>
<p>You can specify only one partitioning key column.</p>
</li>
<li>
<p>The partitioning key column must be of type <code dir="ltr">CHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">FLOAT</code>, <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIMEZONE</code>, or <code dir="ltr">RAW</code>.</p>
</li>
</ul>
<p class="subhead1"><a id="BABIHJGG"></a><a id="SQLRF54568"></a><span class="italic">hash_partitions <a id="sthref5777"></a><a id="sthref5778"></a><a id="sthref5779"></a><a id="sthref5780"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">hash_partitions</span></code> clause to specify that the table is to be partitioned using the hash method. Oracle Database assigns rows to partitions using a hash function on values found in columns designated as the partitioning key. You can specify individual hash partitions, or you can specify how many hash partitions the database should create.</p>
<p><a id="BABJHGCA"></a><a id="SQLRF54569"></a><span class="subhead3"><span class="italic">column</span>&nbsp;</span>Specify an ordered list of columns used to determine into which partition a row belongs (the partitioning key).</p>
<p><a id="CJAFBCJC"></a><a id="SQLRF54570"></a><span class="subhead3"><span class="italic">individual_hash_partitions</span>&nbsp;</span> Use this clause to specify individual partitions by name.</p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code> to set the indexing property for a hash partition. Refer to the <a href="#CJAFJABE"><span class="xreftitleitalic"><span class="italic">indexing_clause</span></span></a> for more information.</p>
<p><a id="SQLRF54571"></a><span class="subhead3">Restriction on Specifying Individual Hash Partitions&nbsp;</span>The only clauses you can specify in the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code> are the <code dir="ltr">TABLESPACE</code> clause and table compression.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your enterprise has or will have databases using different character sets, then use caution when partitioning on character columns. The sort sequence of characters is not identical in all character sets. Refer to <a class="olink NLSPG014" href="../NLSPG/applocaledata.htm#NLSPG014"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information on character set support.</div>
<p><a id="CJACBFBI"></a><a id="SQLRF54572"></a><span class="subhead3"><span class="italic">hash_partitions_by_quantity</span>&nbsp;</span>An alternative to defining individual partitions is to specify the number of hash partitions. In this case, the database assigns partition names of the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. The <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause lets you specify one or more tablespaces where the hash partition data is to be stored. The number of tablespaces need not equal the number of partitions. If the number of partitions is greater than the number of tablespaces, then the database cycles through the names of the tablespaces.</p>
<p>For both methods of hash partitioning, for optimal load balancing you should specify a number of partitions that is a power of 2. When you specify individual hash partitions, you can specify both <code dir="ltr">TABLESPACE</code> and table compression in the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code>. When you specify hash partitions by quantity, you can specify only <code dir="ltr">TABLESPACE</code>. Hash partitions inherit all other attributes from table-level defaults.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">table_compression</span></code> clause has the same function as described for the <a href="#i2128916"><span class="xreftitleitalic"><span class="italic">table_properties</span></span></a> of the table as a whole.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">prefix_compression</span></code> clause and the <code dir="ltr">OVERFLOW</code> clause have the same function as described for the <a href="#i2128766"><span class="xreftitleitalic"><span class="italic">index_org_table_clause</span></span></a> .</p>
<p><a id="sthref5781"></a><a id="sthref5782"></a>Tablespace storage specified at the table level is overridden by tablespace storage specified at the partition level, which in turn is overridden by tablespace storage specified at the subpartition level.</p>
<p>In the <code dir="ltr"><span class="codeinlineitalic">individual_hash_partitions</span></code> clause, the <code dir="ltr">TABLESPACE</code> clause of the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code> determines tablespace storage only for the individual partition being created. In the <code dir="ltr"><span class="codeinlineitalic">hash_partitions_by_quantity</span></code> clause, the <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause determines placement of partitions as the table is being created and the default storage location for subsequently added partitions.</p>
<p><a id="SQLRF57022"></a><span class="subhead3">Restriction on Specifying Hash Partitions by Quantity&nbsp;</span>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">advanced_index_compression</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">index_compression</span></code> clause.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink VLDBG00222" href="../VLDBG/GUID-A001EEE0-5FA8-4D14-834C-C2851A980D37.htm#VLDBG00222"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information on hash partitioning</div>
<p><a id="SQLRF54573"></a><span class="subhead3">Restrictions on Hash Partitioning&nbsp;</span>Hash partitioning is subject to the restrictions listed in <a href="#BABIICCD">&#34;Restrictions on Partitioning in General&#34;</a>. The following additional restrictions apply:</p>
<ul>
<li>
<p>You cannot specify more than 16 partitioning key columns.</p>
</li>
<li>
<p>Partitioning key columns must be of type <code dir="ltr">CHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">FLOAT</code>, <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIMEZONE</code>, or <code dir="ltr">RAW</code>.</p>
</li>
</ul>
<p class="subhead1"><a id="BABIEIGC"></a><a id="SQLRF54582"></a><span class="italic">composite_range_partitions</span> <a id="sthref5783"></a><a id="sthref5784"></a><a id="sthref5785"></a><a id="sthref5786"></a></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">composite_range_partitions</span></code> clause to first partition <code dir="ltr"><span class="codeinlineitalic">table</span></code> by range, and then partition the partitions further into range, hash, or list subpartitions.</p>
<p>The <code dir="ltr">INTERVAL</code> clause has the same semantics for composite range partitioning that it has for range partitioning. Refer to <a href="#BABGCEFI">&#34;INTERVAL Clause&#34;</a> for more information.</p>
<p>Specify <a href="#BABIHBBF"><span class="xreftitleitalic"><span class="italic">subpartition_by_range</span></span></a>, <a href="#BABJAFIB"><span class="xreftitleitalic"><span class="italic">subpartition_by_hash</span></span></a> or <a href="#BABEGDBF"><span class="xreftitleitalic"><span class="italic">subpartition_by_list</span></span></a> to indicate the type of subpartitioning you want for each composite range partition. Within these clauses you can specify a subpartition template, which establishes default subpartition characteristics for subpartitions created as part of this statement or subsequently created subpartitions.</p>
<p>After establishing the type of subpartitioning you want for the table, and optionally a subpartition template, you must define at least one range partition.</p>
<ul>
<li>
<p>You must specify the <a href="#BABGHDFA"><span class="xreftitleitalic"><span class="italic">range_values_clause</span></span></a> , which has the same requirements as for noncomposite range partitions.</p>
</li>
<li>
<p>Use the <a href="#BABFBIHA"><span class="xreftitleitalic"><span class="italic">table_partition_description</span></span></a> to define the physical and storage characteristics of the each partition.</p>
</li>
<li>
<p>In the <code dir="ltr"><span class="codeinlineitalic">range_partition_desc</span></code>, use <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">individual_hash_subparts</span></code>, or <code dir="ltr"><span class="codeinlineitalic">hash_subparts_by_quantity</span></code> to specify characteristics for the individual subpartitions of the partition. The values you specify in these clauses supersede for these subpartitions any values you have specified in the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code>.</p>
</li>
<li>
<p>The only characteristics you can specify for a hash or list subpartition or any LOB subpartition are <code dir="ltr">TABLESPACE</code> and <code dir="ltr"><span class="codeinlineitalic">table_compression</span></code>.</p>
</li>
</ul>
<p><a id="CHDFBDBC"></a><a id="SQLRF54583"></a><span class="subhead3">Restrictions on Composite Range Partitioning&nbsp;</span>Regardless of the type of subpartitioning, composite range partitioning is subject to the following restrictions:</p>
<ul>
<li>
<p>The only physical attributes you can specify at the subpartition level are <code dir="ltr">TABLESPACE</code> and table compression.</p>
</li>
<li>
<p>You cannot specify composite partitioning for an index-organized table. Therefore, the <code dir="ltr">OVERFLOW</code> clause of the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> is not valid for composite-partitioned tables.</p>
</li>
<li>
<p>You cannot specify composite partitioning for tables containing <code dir="ltr">XMLType</code> columns.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2101488">&#34;Composite-Partitioned Table Examples&#34;</a> for examples of composite range partitioning and <a class="olink VLDBG002" href="../VLDBG/GUID-EA7EF5CB-DD49-43AF-889A-F83AAC0D7D51.htm#VLDBG002"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for examples of composite list partitioning</div>
<p class="subhead1"><a id="BABHDBFJ"></a><a id="SQLRF54586"></a><span class="italic">composite_list_partitions</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">composite_list_partitions</span></code> clause to first partition <code dir="ltr"><span class="codeinlineitalic">table</span></code> by list, and then partition the partitions further into range, hash, or list subpartitions.</p>
<p>Specify <a href="#BABIHBBF"><span class="xreftitleitalic"><span class="italic">subpartition_by_range</span></span></a>, <a href="#BABJAFIB"><span class="xreftitleitalic"><span class="italic">subpartition_by_hash</span></span></a> or <a href="#BABEGDBF"><span class="xreftitleitalic"><span class="italic">subpartition_by_list</span></span></a> to indicate the type of subpartitioning you want for each composite list partition. Within these clauses you can specify a subpartition template, which establishes default subpartition characteristics for subpartitions created as part of this statement and for subsequently created subpartitions.</p>
<p>After establishing the type of subpartitioning you want for each composite partition, and optionally defining a subpartition template, you must define at least one list partition.</p>
<ul>
<li>
<p>In the <code dir="ltr"><span class="codeinlineitalic">list_partition_desc</span></code>, you must specify the <a href="#BABCDDIA"><span class="xreftitleitalic"><span class="italic">list_values_clause</span></span></a>, which has the same requirements as for noncomposite list partitions.</p>
</li>
<li>
<p>Use the <a href="#BABFBIHA"><span class="xreftitleitalic"><span class="italic">table_partition_description</span></span></a> to define the physical and storage characteristics of the each partition.</p>
</li>
<li>
<p>In the <code dir="ltr"><span class="codeinlineitalic">list_partition_desc</span></code>, use <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">individual_hash_subparts</span></code>, or <code dir="ltr"><span class="codeinlineitalic">hash_subparts_by_quantity</span></code> to specify characteristics for the individual subpartitions of the partition. The values you specify in these clauses supersede the for these subpartitions any values you have specified in the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code>.</p>
</li>
</ul>
<p><a id="SQLRF54587"></a><span class="subhead3">Restrictions on Composite List Partitioning&nbsp;</span>Composite list partitioning is subject to the same restrictions as described in <a href="#CHDFBDBC">&#34;Restrictions on Composite Range Partitioning&#34;</a>.</p>
<p class="subhead1"><a id="CJAIEEFH"></a><a id="SQLRF54584"></a><span class="italic">composite_hash_partitions</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">composite_hash_partitions</span></code> clause to first partition <code dir="ltr"><span class="codeinlineitalic">table</span></code> using the hash method, and then partition the partitions further into range, hash, or list subpartitions.</p>
<p>Specify <a href="#BABIHBBF"><span class="xreftitleitalic"><span class="italic">subpartition_by_range</span></span></a>, <a href="#BABJAFIB"><span class="xreftitleitalic"><span class="italic">subpartition_by_hash</span></span></a> or <a href="#BABEGDBF"><span class="xreftitleitalic"><span class="italic">subpartition_by_list</span></span></a> to indicate the type of subpartitioning you want for each composite range partition. Within these clauses you can specify a subpartition template, which establishes default subpartition characteristics for subpartitions created as part of this statement or subsequently created subpartitions.</p>
<p>After establishing the type of subpartitioning you want for the table, you must specify <a href="#CJAFBCJC"><span class="xreftitleitalic"><span class="italic">individual_hash_partitions</span></span></a> or <a href="#CJACBFBI"><span class="xreftitleitalic"><span class="italic">hash_partitions_by_quantity</span></span></a>.</p>
<p><a id="SQLRF54585"></a><span class="subhead3">Restrictions on Composite Hash Partitioning&nbsp;</span>Composite hash partitioning is subject to the same restrictions as described in <a href="#CHDFBDBC">&#34;Restrictions on Composite Range Partitioning&#34;</a>.</p>
<p><a id="BABHJECD"></a><a id="SQLRF54588"></a><span class="subhead3"><span class="italic">subpartition_template<a id="sthref5787"></a><a id="sthref5788"></a></span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code> is an optional element of range, list, and hash subpartitioning. The template lets you define default subpartitions for each table partition. Oracle Database will create these default subpartition characteristics in any partition for which you do not explicitly define subpartitions. This clause is useful for creating symmetric partitions. You can override this clause by explicitly defining subpartitions at the partition level, in the <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">individual_hash_subparts</span></code>, or <code dir="ltr"><span class="codeinlineitalic">hash_subparts_by_quantity</span></code> clause.</p>
<p>When defining subpartitions with a template, you can explicitly define range, list, or hash subpartitions, or you can define a quantity of hash subpartitions.</p>
<ul>
<li>
<p>To explicitly define subpartitions, use <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code>, or <code dir="ltr"><span class="codeinlineitalic">individual_hash_subparts</span></code>. You must specify a name for each subpartition. If you specify the <code dir="ltr"><span class="codeinlineitalic">LOB_partitioning_clause</span></code> of the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code>, then you must specify <code dir="ltr"><span class="codeinlineitalic">LOB_segname</span></code>.</p>
</li>
<li>
<p>To define a quantity of hash subpartitions, specify a positive integer for <code dir="ltr"><span class="codeinlineitalic">hash_subpartition_quantity</span></code>. The database creates that number of subpartitions in each partition and assigns subpartition names of the form <code dir="ltr">SYS_SUBP</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you specify tablespace storage for the subpartition template, it does not override any tablespace storage you have specified explicitly for the partitions of <code dir="ltr"><span class="codeinlineitalic">table</span></code>. To specify tablespace storage for subpartitions, do one of these things:
<ul>
<li>
<p>Omit tablespace storage at the partition level and specify tablespace storage in the subpartition template.</p>
</li>
<li>
<p>Define individual subpartitions with specific tablespace storage.</p>
</li>
</ul>
</div>
<p><a id="BABDAJFC"></a><a id="SQLRF54589"></a><span class="subhead3">Restrictions on Subpartition Templates&nbsp;</span>Subpartition templates are subject to the following restrictions:</p>
<ul>
<li>
<p>If you specify <code dir="ltr">TABLESPACE</code> for one LOB subpartition, then you must specify <code dir="ltr">TABLESPACE</code> for all of the LOB subpartitions of that LOB column. You can specify the same tablespace for more than one LOB subpartition.</p>
</li>
<li>
<p>If you specify separate LOB storage for list subpartitions using the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code>, either in the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code> or when defining individual subpartitions, then you must specify <code dir="ltr"><span class="codeinlineitalic">LOB_segname</span></code> for both LOB and varray columns.</p>
</li>
</ul>
<p class="subhead2"><a id="BABIHBBF"></a><a id="SQLRF54590"></a><span class="italic">subpartition_by_range</span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">subpartition_by_range</span></code> clause to indicate that the database should subpartition by range each partition in <code dir="ltr"><span class="codeinlineitalic">table</span></code>. The subpartitioning column list is unrelated to the partitioning key but is subject to the same restrictions (see <a href="#BABGEHCB"><span class="xreftitleitalic"><span class="italic">column</span></span></a>).</p>
<p>You can use the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code> to specify default subpartition characteristic values. See <a href="#BABHJECD"><span class="xreftitleitalic"><span class="italic">subpartition_template</span></span></a>. The database uses these values for any subpartition in this partition for which you do not explicitly specify the characteristic.</p>
<p>You can also define range subpartitions individually for each partition using the <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code> of <code dir="ltr"><span class="codeinlineitalic">range_partition_desc</span></code> or <code dir="ltr"><span class="codeinlineitalic">list_partition_desc</span></code>. If you omit both <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code> and the <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code>, then the database creates a single <code dir="ltr">MAXVALUE</code> subpartition.</p>
<p class="subhead2"><a id="BABEGDBF"></a><a id="SQLRF54592"></a><span class="italic">subpartition_by_list</span> <a id="sthref5789"></a><a id="sthref5790"></a><a id="sthref5791"></a></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">subpartition_by_list</span></code> clause to indicate that the database should subpartition each partition in <code dir="ltr"><span class="codeinlineitalic">table</span></code> by literal values from <code dir="ltr"><span class="codeinlineitalic">column</span></code>. You can specify only one list subpartitioning key column.</p>
<p>You can use the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code> to specify default subpartition characteristic values. See <a href="#BABHJECD"><span class="xreftitleitalic"><span class="italic">subpartition_template</span></span></a>. The database uses these values for any subpartition in this partition for which you do not explicitly specify the characteristic.</p>
<p>You can also define list subpartitions individually for each partition using the <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code> of <code dir="ltr"><span class="codeinlineitalic">range_partition_desc</span></code> or <code dir="ltr"><span class="codeinlineitalic">list_partition_desc</span></code>. If you omit both <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code> and the <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code>, then the database creates a single <code dir="ltr">DEFAULT</code> subpartition.</p>
<p><a id="SQLRF54593"></a><span class="subhead3">Restrictions on List Subpartitioning&nbsp;</span>List subpartitioning is subject to the same restrictions as described in <a href="#CHDFBDBC"><span class="xreftitleitalic">Restrictions on Composite Range Partitioning</span></a>.</p>
<p class="subhead2"><a id="BABJAFIB"></a><a id="SQLRF54591"></a><span class="italic">subpartition_by_hash<a id="sthref5792"></a><a id="sthref5793"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">subpartition_by_hash</span></code> clause to indicate that the database should subpartition by hash each partition in <code dir="ltr"><span class="codeinlineitalic">table</span></code>. The subpartitioning column list is unrelated to the partitioning key but is subject to the same restrictions (see <a href="#BABJHGCA"><span class="xreftitleitalic"><span class="italic">column</span></span></a>).</p>
<p>You can define the subpartitions using the <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code> or the <code dir="ltr">SUBPARTITIONS</code> <code dir="ltr"><span class="codeinlineitalic">integer</span></code> clause. See <a href="#BABHJECD"><span class="xreftitleitalic"><span class="italic">subpartition_template</span></span></a>. In either case, for optimal load balancing you should specify a number of partitions that is a power of 2.</p>
<p>If you specify <code dir="ltr">SUBPARTITIONS</code> <code dir="ltr"><span class="codeinlineitalic">integer</span></code>, then you determine the default number of subpartitions in each partition of <code dir="ltr"><span class="codeinlineitalic">table</span></code>, and optionally one or more tablespaces in which they are to be stored. The default value is 1. If you omit both this clause and <code dir="ltr"><span class="codeinlineitalic">subpartition_template</span></code>, then the database will create each partition with one hash subpartition.</p>
<p><a id="SQLRF54594"></a><span class="subhead3">Notes on Composite Partitions&nbsp;</span>The following notes apply to composite partitions:</p>
<ul>
<li>
<p>For all subpartitions, you can use the <code dir="ltr"><span class="codeinlineitalic">range_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">list_subpartition_desc</span></code>, <code dir="ltr"><span class="codeinlineitalic">individual_hash_subparts</span></code>, or <code dir="ltr"><span class="codeinlineitalic">hash_subparts_by_quantity</span></code> to specify individual subpartitions by name, and optionally some other characteristics.</p>
</li>
<li>
<p>Alternatively, for hash and list subpartitions:</p>
<ul>
<li>
<p>You can specify the number of subpartitions and optionally one or more tablespaces where they are to be stored. In this case, Oracle Database assigns subpartition names of the form <code dir="ltr">SYS_SUBPn</code>.</p>
</li>
<li>
<p>If you omit the subpartition description and if you have created a subpartition template, then the database uses the template to create subpartitions. If you have not created a subpartition template, then the database creates one hash subpartition or one <code dir="ltr">DEFAULT</code> list subpartition.</p>
</li>
</ul>
</li>
<li>
<p>For all types of subpartitions, if you omit the subpartitions description entirely, then the database assigns subpartition names as follows:</p>
<ul>
<li>
<p>If you have specified a subpartition template <span class="italic">and</span> you have specified partition names, then the database generates subpartition names of the form <code dir="ltr"><span class="codeinlineitalic">partition_name</span></code> underscore (_) <code dir="ltr"><span class="codeinlineitalic">subpartition_name</span></code> (for example, <code dir="ltr">P1_SUB1</code>).</p>
</li>
<li>
<p>If you have not specified a subpartition template <span class="italic">or</span> if you have specified a subpartition template but did not specify partition names, then the database generates subpartition names of the form <code dir="ltr">SYS_SUBP</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
</li>
</ul>
</li>
</ul>
<p class="subhead1"><a id="BABFBFBC"></a><a id="SQLRF54578"></a><span class="italic">reference_partitioning</span> <a id="sthref5794"></a><a id="sthref5795"></a><a id="sthref5796"></a><a id="sthref5797"></a></p>
<p>Use this clause to partition the table by reference. Partitioning by reference is a method of equipartitioning the table being created (the <span class="bold">child table</span>) by a referential constraint to an existing partitioned table (the <span class="bold">parent table</span>). When you partition a table by reference, partition maintenance operations subsequently performed on the parent table automatically cascade to the child table. Therefore, you cannot perform partition maintenance operations on a reference-partitioned table directly.</p>
<p>If the parent table is an interval-partitioned table, then partitions in the reference-partitioned child table that correspond to interval partitions in the parent table will be created during inserts into the child table. When an interval partition in a child table is created, the partition name is inherited from the associated parent table partition. If the child table has a table-level default tablespace, then it will be used as the tablespace for the new interval partition. Otherwise, the tablespace will be inherited from the parent table partition. Refer to <a class="olink VLDBG14103" href="../VLDBG/GUID-52397EF9-EC3B-4E80-8211-77E683263530.htm#VLDBG14103"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information on referencing an interval-partitioned table.</p>
<p><a id="SQLRF54579"></a><span class="subhead3"><span class="italic">constraint</span> <a id="sthref5798"></a><a id="sthref5799"></a>&nbsp;</span>The partitioning referential constraint must meet the following conditions:</p>
<ul>
<li>
<p>You must specify a referential integrity constraint defined on the table being created, which must refer to a primary key or unique constraint on the parent table. The constraint must be in <code dir="ltr">ENABLE</code> <code dir="ltr">VALIDATE</code> <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> state, which is the default when you specify a referential integrity constraint during table creation.</p>
</li>
<li>
<p>All foreign key columns referenced in the constraint must be <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>When you specify the constraint, you cannot specify the <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> <code dir="ltr">SET</code> <code dir="ltr">NULL</code> clause of the <code dir="ltr"><span class="codeinlineitalic">references_clause</span></code>.</p>
</li>
<li>
<p>The parent table referenced in the constraint must be an existing partitioned table. It can be partitioned by any method.</p>
</li>
<li>
<p>The foreign and parent keys cannot contain any virtual columns that reference PL/SQL functions or LOB columns.</p>
</li>
</ul>
<p><a id="SQLRF54580"></a><span class="subhead3"><span class="italic">reference_partition_desc</span> &nbsp;</span>Use this optional clause to specify partition names and to define the physical and storage characteristics of the partition. The subclauses of the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code> have the same behavior as described for range partitions in <a href="#BABFBIHA"><span class="xreftitleitalic"><span class="italic">table_partition_description</span></span></a>.</p>
<p>If you specify this clause when creating a reference-partitioned child table whose parent is an interval-partitioned table, then the partition descriptors are used for the child table&#39;s non-interval partitions. Partition descriptors cannot be specified for interval partitions.</p>
<p><a id="SQLRF54581"></a><span class="subhead3">Restrictions on Reference Partitioning&nbsp;</span>Reference partitioning is subject to the restrictions listed in <a href="#BABIICCD">&#34;Restrictions on Partitioning in General&#34;</a>. The following additional restrictions apply:</p>
<ul>
<li>
<p>Restrictions for reference partitioning are derived from the partitioning strategy of the parent table.</p>
</li>
<li>
<p>You cannot specify this clause for an index-organized table, an external table, or a domain index storage table.</p>
</li>
<li>
<p>The parent table can be partitioned by reference, but <code dir="ltr"><span class="codeinlineitalic">constraint</span></code> cannot be self-referential. The table being created cannot be partitioned based on a reference to itself.</p>
</li>
<li>
<p>If <code dir="ltr">ROW</code> <code dir="ltr">MOVEMENT</code> is enabled for the parent table, it must also be enabled for the child table.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink VLDBG00224" href="../VLDBG/GUID-54D18B18-6838-4115-9389-E1FB0D20A8CA.htm#VLDBG00224"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information on partitioning by reference and <a href="#BABFDECD">&#34;Reference Partitioning Example&#34;</a></div>
<p class="subhead1"><a id="BABJBDCC"></a><a id="SQLRF54595"></a><span class="italic">system_partitioning</span> <a id="sthref5800"></a><a id="sthref5801"></a></p>
<p>Use this clause to create system partitions. System partitioning does not entail any partitioning key columns, nor do system partitions have any range or list bounds or hash algorithms. Rather, they provide a way to equipartition dependent tables such as nested table or domain index storage tables with partitioned base tables.</p>
<ul>
<li>
<p>If you specify only <code dir="ltr">PARTITION</code> <code dir="ltr">BY</code> <code dir="ltr">SYSTEM</code>, then the database creates one partition with a system-generated name of the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
</li>
<li>
<p>If you specify <code dir="ltr">PARTITION</code> <code dir="ltr">BY</code> <code dir="ltr">SYSTEM</code> <code dir="ltr">PARTITIONS</code> <code dir="ltr"><span class="codeinlineitalic">integer</span></code>, then the database creates as many partitions as you specify in <code dir="ltr"><span class="codeinlineitalic">integer</span></code>, which can range from 1 to 1024K-1.</p>
</li>
<li>
<p>The description of the partition takes the same syntax as reference partitions, so they share the <code dir="ltr"><span class="codeinlineitalic">reference_partition_desc</span></code>. You can specify additional partition attributes with the <code dir="ltr"><span class="codeinlineitalic">reference_partition_desc</span></code> syntax. However, within the <code dir="ltr"><span class="codeinlineitalic">table_partition_description</span></code>, you cannot specify the <code dir="ltr">OVERFLOW</code> clause.</p>
</li>
</ul>
<p><a id="SQLRF54596"></a><span class="subhead3">Restrictions on System Partitioning&nbsp;</span>System partitioning is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot system partition an index-organized table or a table that is part of a cluster.</p>
</li>
<li>
<p>Composite partitioning is not supported with system partitioning.</p>
</li>
<li>
<p>You cannot split a system partition.</p>
</li>
<li>
<p>You cannot specify system partitioning in a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statement.</p>
</li>
<li>
<p>To insert data into a system-partitioned table using an <code dir="ltr">INSERT</code> <code dir="ltr">INTO</code> ... <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> statement, you must use partition-extended syntax to specify the partition into which the values returned by the subquery will be inserted.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Refer to <a class="olink ADDCI2801" href="../ADDCI/dom_idx.htm#ADDCI2801"><span class="italic">Oracle Database Data Cartridge Developer&#39;s Guide</span></a> for information on the uses for system partitioning and <a href="sql_elements009.htm#i165979">&#34;References to Partitioned Tables and Indexes&#34;</a></div>
<p class="subhead2"><a id="CEGIDCDI"></a><a id="SQLRF56830"></a><span class="italic">attribute_clustering_clause</span><a id="sthref5802"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr"><span class="codeinlineitalic">attribute_clustering_clause</span></code> is available starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2).</div>
<p>Use this clause to enable the table for attribute clustering. Attribute clustering lets you cluster data in close physical proximity based on the content of specified columns.</p>
<p>Attribute clustering can be based only on columns in <code dir="ltr"><span class="codeinlineitalic">table</span></code> or on joined values from other tables. The latter is called join attribute clustering.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG8916" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG8916"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for more information on attribute clustering</div>
<p class="subhead2"><a id="CEGFDIAC"></a><a id="SQLRF56831"></a><span class="italic">clustering_join</span></p>
<p>Use this clause to specify join attribute clustering. Use the <code dir="ltr">JOIN</code> clause to specify the joined values from other tables on which to base the attribute clustering. You can specify a maximum of four <code dir="ltr">JOIN</code> clauses.</p>
<p class="subhead2"><a id="CEGDGDIH"></a><a id="SQLRF56832"></a><span class="italic">cluster_clause</span></p>
<p>Use this clause to specify the type of ordering to use for the table: linear ordering or interleaved ordering. If you do not specify the <code dir="ltr">LINEAR</code> or <code dir="ltr">INTERLEAVED</code> keyword, then the default is <code dir="ltr">LINEAR</code>.</p>
<p><a id="SQLRF56833"></a><span class="subhead3">BY LINEAR ORDER&nbsp;</span>Use this clause to specify linear ordering. This type of ordering stores data according to the order of the specified columns. If you specify this clause, then you can specify only one clustering column group, which can contain at most 10 columns.</p>
<p><a id="SQLRF56834"></a><span class="subhead3">BY INTERLEAVED ORDER&nbsp;</span>Use this clause to specify interleaved ordering. This type of ordering uses a special multidimensional clustering technique, similar to z-ordering, that permits multicolumn clustering. If you specify this clause, then you can specify at most four clustering column groups, with a maximum of 40 columns across all groups.</p>
<p class="subhead2"><a id="CEGBGGHG"></a><a id="SQLRF56835"></a><span class="italic">clustering_columns</span></p>
<p>Use this clause to specify one or more clustering column groups.</p>
<p class="subhead2"><a id="CEGDGCCC"></a><a id="SQLRF56836"></a><span class="italic">clustering_column_group</span></p>
<p>Use this clause to specify one or more columns to be included in the clustering column group.</p>
<p class="subhead2"><a id="CEGJBIHI"></a><a id="SQLRF56837"></a><span class="italic">clustering_when</span></p>
<p>Use these clauses to allow or disallow attribute clustering during direct-path insert operations and data movement operations.</p>
<p><a id="SQLRF56838"></a><span class="subhead3">ON LOAD&nbsp;</span>Specify <code dir="ltr">YES</code> <code dir="ltr">ON</code> <code dir="ltr">LOAD</code> to allow, or <code dir="ltr">NO</code> <code dir="ltr">ON</code> <code dir="ltr">LOAD</code> to disallow, attribute clustering during direct-path inserts (serial or parallel) resulting either from an <code dir="ltr">INSERT</code> or a <code dir="ltr">MERGE</code> operation. The default is <code dir="ltr">NO</code> <code dir="ltr">ON</code> <code dir="ltr">LOAD</code>.</p>
<p><a id="SQLRF56839"></a><span class="subhead3">ON DATA MOVEMENT&nbsp;</span>Specify <code dir="ltr">YES</code> <code dir="ltr">ON</code> <code dir="ltr">DATA</code> <code dir="ltr">MOVEMENT</code> to allow, or <code dir="ltr">NO</code> <code dir="ltr">ON</code> <code dir="ltr">DATA</code> <code dir="ltr">MOVEMENT</code> to disallow, attribute clustering for data movement that occurs during the following operations:</p>
<ul>
<li>
<p>Data redefinition using the <code dir="ltr">DBMS_REDEFINITION</code> package</p>
</li>
<li>
<p>Table partition maintenance operations that are specified by the following clauses of <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>: <code dir="ltr"><span class="codeinlineitalic">coalesce_table</span></code>, <code dir="ltr"><span class="codeinlineitalic">merge_table_partitions</span></code>, <code dir="ltr"><span class="codeinlineitalic">move_table_partition</span></code>, and <code dir="ltr"><span class="codeinlineitalic">split_table_partition</span></code></p>
</li>
</ul>
<p>The default is <code dir="ltr">NO</code> <code dir="ltr">ON</code> <code dir="ltr">DATA</code> <code dir="ltr">MOVEMENT</code>.</p>
<p class="subhead2"><a id="CEGDJAGF"></a><a id="SQLRF56960"></a><span class="italic">zonemap_clause</span></p>
<p>Use this clause to create a zone map on the table. The zone map tracks the columns specified in the <code dir="ltr"><span class="codeinlineitalic">clustering_columns</span></code> clause.</p>
<ul>
<li>
<p>Specify <code dir="ltr">WITH</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">ZONEMAP</code> to create a zone map. For <code dir="ltr"><span class="codeinlineitalic">zonemap_name</span></code>, specify the name of the zone map to be created. If you omit <code dir="ltr"><span class="codeinlineitalic">zonemap_name</span></code>, then the name of the zone map is <code dir="ltr">ZMAP$_</code><code dir="ltr"><span class="codeinlineitalic">table</span></code>.</p>
</li>
<li>
<p>Specify <code dir="ltr">WITHOUT</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">ZONEMAP</code> to not create a zone map. This is the default.</p>
</li>
</ul>
<p>If you subsequently drop the table or use the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement to <code dir="ltr">DROP</code> <code dir="ltr">CLUSTERING</code> or <code dir="ltr">MODIFY</code> <code dir="ltr">CLUSTERING</code> ... <code dir="ltr">WITHOUT</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">ZONEMAP</code>, then the zone map will be dropped.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_6004.htm#CACECJCC">CREATE MATERIALIZED ZONEMAP</a> for more information on zone maps</div>
<p><a id="SQLRF56843"></a><span class="subhead3">Restrictions on Attribute Clustering&nbsp;</span>The following restrictions apply to attribute clustering:</p>
<ul>
<li>
<p>Attribute clustering is not supported for temporary tables or external tables.</p>
</li>
<li>
<p>The table being created must be a heap-organized table. However, tables specified in the <code dir="ltr"><span class="codeinlineitalic">clustering_join</span></code> clause can be heap-organized or index-organized tables.</p>
</li>
<li>
<p>Clustering columns must be of a scalar data type and cannot be encrypted.</p>
</li>
<li>
<p>If you specify <code dir="ltr">BY</code> <code dir="ltr">LINEAR</code> <code dir="ltr">ORDER</code>, then you can specify only one clustering column group, which can contain at most 10 columns.</p>
</li>
<li>
<p>If you specify <code dir="ltr">BY</code> <code dir="ltr">INTERLEAVED</code> <code dir="ltr">ORDER</code>, then you can specify at most four clustering column groups, with a maximum of 40 columns across all groups.</p>
</li>
<li>
<p>For join attribute clustering:</p>
<ul>
<li>
<p>The number of dimension tables cannot exceed four.</p>
</li>
<li>
<p>The join to the table or tables providing the attribute clustering columns must be on a unique key or primary key column to avoid row duplication.</p>
</li>
</ul>
</li>
<li>
<p>Attribute clustering will not order rows that are inserted using <code dir="ltr">MERGE</code> statements or multitable insert operations.</p>
</li>
</ul>
<p class="subhead2"><a id="i2215507"></a><a id="SQLRF54597"></a>CACHE | NOCACHE | CACHE READS</p>
<p>Use these clauses to indicate how Oracle Database should store blocks in the buffer cache. For LOB storage, you can specify <code dir="ltr">CACHE</code>, <code dir="ltr">NOCACHE</code>, or <code dir="ltr">CACHE</code> <code dir="ltr">READS</code>. For other types of storage, you can specify only <code dir="ltr">CACHE</code> or <code dir="ltr">NOCACHE</code>.</p>
<p>If you omit these clauses, then:</p>
<ul>
<li>
<p>In a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement, <code dir="ltr">NOCACHE</code> is the default.</p>
</li>
<li>
<p>In an <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement, the existing value is not changed.</p>
</li>
</ul>
<p>The behavior of <code dir="ltr">CACHE</code> and <code dir="ltr">NOCACHE</code> described in this section does not apply when Oracle Database chooses to use direct reads or to perform table scans using parallel query.</p>
<p><a id="SQLRF54598"></a><span class="subhead3">CACHE<a id="sthref5803"></a><a id="sthref5804"></a><a id="sthref5805"></a>&nbsp;</span>For data that is accessed frequently, this clause indicates that the blocks retrieved for this table are placed at the most recently used end of the least recently used (LRU) list in the buffer cache when a full table scan is performed. This attribute is useful for small lookup tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT1223" href="../CNCPT/memory.htm#CNCPT1223"><span class="italic">Oracle Database Concepts</span></a> for more information on how the database maintains the least recently used (LRU) list</div>
<p>As a parameter in the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code>, <code dir="ltr">CACHE</code> specifies that the database places LOB data values in the buffer cache for faster access. The database evaluates this parameter in conjunction with the <code dir="ltr"><span class="codeinlineitalic">logging_clause</span></code>. If you omit this clause, then the default value for both BasicFiles and SecureFiles LOBs is <code dir="ltr">NOCACHE</code> <code dir="ltr">LOGGING</code>.</p>
<p><a id="SQLRF54599"></a><span class="subhead3">Restriction on CACHE&nbsp;</span>You cannot specify <code dir="ltr">CACHE</code> for an index-organized table. However, index-organized tables implicitly provide <code dir="ltr">CACHE</code> behavior.</p>
<p><a id="SQLRF54600"></a><span class="subhead3">NOCACHE<a id="sthref5806"></a>&nbsp;</span>For data that is not accessed frequently, this clause indicates that the blocks retrieved for this table are placed at the least recently used end of the LRU list in the buffer cache when a full table scan is performed. <code dir="ltr">NOCACHE</code> is the default for LOB storage.</p>
<p>As a parameter in the <code dir="ltr"><span class="codeinlineitalic">LOB_storage_clause</span></code>, <code dir="ltr">NOCACHE</code> specifies that the LOB values are not brought into the buffer cache. <code dir="ltr">NOCACHE</code> is the default for LOB storage.</p>
<p><a id="SQLRF54601"></a><span class="subhead3">Restriction on NOCACHE&nbsp;</span>You cannot specify <code dir="ltr">NOCACHE</code> for an index-organized table.</p>
<p><a id="BABDDAHB"></a><a id="SQLRF54602"></a><span class="subhead3">CACHE READS<a id="sthref5807"></a><a id="sthref5808"></a>&nbsp;</span><code dir="ltr">CACHE</code> <code dir="ltr">READS</code> applies only to LOB storage. It specifies that LOB values are brought into the buffer cache only during read operations but not during write operations.</p>
<p><a id="SQLRF54603"></a><span class="subhead3"><span class="italic">logging_clause</span>&nbsp;</span>Use this clause to indicate whether the storage of data blocks should be logged or not.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clauses005.htm#i999782"><span class="xreftitleitalic"><span class="italic">logging_clause</span></span></a> for a description of the <code dir="ltr"><span class="codeinlineitalic">logging_clause</span></code> when specified as part of <code dir="ltr"><span class="codeinlineitalic">LOB_parameters</span></code></div>
<p class="subhead2"><a id="CEGBGJJE"></a><a id="SQLRF30051"></a>RESULT_CACHE Clause <a id="sthref5809"></a><a id="sthref5810"></a></p>
<p>Use this clause to determine whether the results of statements or query blocks that name this table are considered for storage in the result cache. Two modes of result caching are available:</p>
<ul>
<li>
<p><code dir="ltr">DEFAULT</code>: Result caching is not determined at the table level. The query is considered for result caching if the <code dir="ltr">RESULT_CACHE_MODE</code> initialization parameter is set to <code dir="ltr">FORCE</code>, or if that parameter is set to <code dir="ltr">MANUAL</code> and the <code dir="ltr">RESULT_CACHE</code> hint is specified in the query. This is the default if you omit this clause.</p>
</li>
<li>
<p><code dir="ltr">FORCE</code>: If all tables names in the query have this setting, then the query is always considered for caching unless the <code dir="ltr">NO_RESULT_CACHE</code> hint is specified for the query. If one or more tables named in the query are set to <code dir="ltr">DEFAULT</code>, then the effective table annotation for that query is considered to be <code dir="ltr">DEFAULT</code>, with the semantics described above.</p>
</li>
</ul>
<p>You can query the <code dir="ltr">RESULT_CACHE</code> column of the <code dir="ltr">DBA_</code>, <code dir="ltr">ALL_</code>, and <code dir="ltr">USER_TABLES</code> data dictionary views to learn the result cache mode of the table.</p>
<p>The <code dir="ltr">RESULT_CACHE</code> and <code dir="ltr">NO_RESULT_CACHE</code> SQL hints take precedence over these result cache table annotations and the <code dir="ltr">RESULT_CACHE_MODE</code> initialization parameter. The <code dir="ltr">RESULT_CACHE_MODE</code> setting of <code dir="ltr">FORCE</code> in turn takes precedence over this table annotation clause.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">RESULT_CACHE_MODE</code> setting of <code dir="ltr">FORCE</code> is not recommended, as it can cause significant performance and latching overhead, as database and clients will try to cache all queries.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNOCI10103" href="../LNOCI/oci10new.htm#LNOCI10103"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> and <a class="olink CNCPT1226" href="../CNCPT/memory.htm#CNCPT1226"><span class="italic">Oracle Database Concepts</span></a> for general information about result caching</p>
</li>
<li>
<p><a class="olink TGDBA295" href="../TGDBA/tune_buffer_cache.htm#TGDBA295"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for information about using this clause</p>
</li>
<li>
<p><span class="italic">Oracle Database Reference</span> for information about the <a class="olink REFRN10270" href="../REFRN/GUID-DEC2BDE4-8CF4-4378-A04C-6EE50A0FA250.htm#REFRN10270"><code dir="ltr">RESULT_CACHE_MODE</code></a> initialization parameter and the <a class="olink REFRN23286" href="../REFRN/GUID-480A67CD-39FD-40B8-9395-164E92E439E6.htm#REFRN23286"><code dir="ltr">*_TABLES</code></a> data dictionary views</p>
</li>
<li>
<p><a href="sql_elements006.htm#BABIFIGC">&#34;RESULT_CACHE Hint&#34;</a> and <a href="sql_elements006.htm#BABGGHJH">&#34;NO_RESULT_CACHE Hint&#34;</a> for information about the hints</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="i2159323"></a><a id="SQLRF54604"></a><span class="italic">parallel_clause</span> <span class="bolditalic"><a id="sthref5811"></a><a id="sthref5812"></a><a id="sthref5813"></a><a id="sthref5814"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> lets you parallelize creation of the table and set the default degree of parallelism for queries and the DML <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, and <code dir="ltr">MERGE</code> after table creation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The syntax of the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> supersedes syntax appearing in earlier releases of Oracle. Superseded syntax is still supported for backward compatibility but may result in slightly different behavior from that documented.</div>
<p><a id="SQLRF54605"></a><span class="subhead3">NOPARALLEL<a id="sthref5815"></a>&nbsp;</span>Specify <code dir="ltr">NOPARALLEL</code> for serial execution. This is the default.</p>
<p><a id="SQLRF54606"></a><span class="subhead3">PARALLEL&nbsp;</span> Specify <code dir="ltr">PARALLEL</code> if you want Oracle to select a degree of parallelism equal to the number of CPUs available on all participating instances times the value of the <code dir="ltr">PARALLEL_THREADS_PER_CPU</code> initialization parameter.</p>
<p><a id="SQLRF54607"></a><span class="subhead3">PARALLEL <span class="italic">integer</span>&nbsp;</span>Specification of <code dir="ltr"><span class="codeinlineitalic">integer</span></code> indicates the <span class="bold">degree of parallelism</span>, which is the number of parallel threads used in the parallel operation. Each parallel thread may use one or two parallel execution servers. Normally Oracle calculates the optimum degree of parallelism, so it is not necessary for you to specify <code dir="ltr"><span class="codeinlineitalic">integer</span></code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clauses006.htm#i77131"><span class="xreftitleitalic"><span class="italic">parallel_clause</span></span></a> for more information on this clause</div>
<p class="subhead2"><a id="CJAEEGDA"></a><a id="SQLRF54608"></a>NOROWDEPENDENCIES | ROWDEPENDENCIES <a id="sthref5816"></a><a id="sthref5817"></a><a id="sthref5818"></a><a id="sthref5819"></a></p>
<p>This clause lets you specify whether <code dir="ltr"><span class="codeinlineitalic">table</span></code> will use <span class="bold">row-level dependency tracking</span>. With this feature, each row in the table has a system change number (SCN) that represents a time greater than or equal to the commit time of the last transaction that modified the row. You cannot change this setting after <code dir="ltr"><span class="codeinlineitalic">table</span></code> is created.</p>
<p><a id="SQLRF54609"></a><span class="subhead3">ROWDEPENDENCIES&nbsp;</span>Specify <code dir="ltr">ROWDEPENDENCIES</code> if you want to enable row-level dependency tracking. This setting is useful primarily to allow for parallel propagation in replication environments. It increases the size of each row by 6 bytes.</p>
<p><a id="SQLRF57076"></a><span class="subhead3">Restriction on the ROWDEPENDENCIES Clause&nbsp;</span>Oracle does not support table compression for tables that use row-level dependency tracking. If you specify both the <code dir="ltr">ROWDEPENDENCIES</code> clause and the <code dir="ltr"><span class="codeinlineitalic">table_compression</span></code> clause, then the <code dir="ltr"><span class="codeinlineitalic">table_compression</span></code> clause is ignored. To remove the <code dir="ltr">ROWDEPENDENCIES</code> attribute, you must redefine the table using the <code dir="ltr">DBMS_REDEFINITION</code> package or recreate the table.</p>
<p><a id="SQLRF54610"></a><span class="subhead3">NOROWDEPENDENCIES&nbsp;</span>Specify <code dir="ltr">NOROWDEPENDENCIES</code> if you do not want <code dir="ltr"><span class="codeinlineitalic">table</span></code> to use the row-level dependency tracking feature. This is the default.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REPLN006" href="../REPLN/repplan.htm#REPLN006"><span class="italic">Oracle Database Advanced Replication</span></a> for information about the use of row-level dependency tracking in replication environments</div>
<p class="subhead2"><a id="i2062565"></a><a id="SQLRF54611"></a><span class="italic">enable_disable_clause</span> <span class="bolditalic"><a id="sthref5820"></a><a id="sthref5821"></a><a id="sthref5822"></a><a id="sthref5823"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">enable_disable_clause</span></code> lets you specify whether Oracle Database should apply a constraint. By default, constraints are created in <code dir="ltr">ENABLE</code> <code dir="ltr">VALIDATE</code> state.</p>
<p><a id="SQLRF54612"></a><span class="subhead3">Restrictions on Enabling and Disabling Constraints&nbsp;</span>Enabling and disabling constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>To enable or disable any integrity constraint, you must have defined the constraint in this or a previous statement.</p>
</li>
<li>
<p>You cannot enable a foreign key constraint unless the referenced unique or primary key constraint is already enabled.</p>
</li>
<li>
<p>In the <code dir="ltr"><span class="codeinlineitalic">index_properties</span></code> clause of the <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code>, the <code dir="ltr">INDEXTYPE</code> <code dir="ltr">IS</code> ... clause is not valid in the definition of a constraint.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clauses002.htm#g1053592"><span class="xreftitleitalic"><span class="italic">constraint</span></span></a> for more information on constraints and <a href="#i2153176">&#34;Creating a Table: ENABLE/DISABLE Examples&#34;</a></div>
<p><a id="SQLRF54613"></a><span class="subhead3">ENABLE Clause&nbsp;</span>Use this clause if you want the constraint to be applied to the data in the table. This clause is described fully in <a href="clauses002.htm#i1010237">&#34;ENABLE Clause&#34;</a> in the documentation on constraints.</p>
<p><a id="SQLRF54614"></a><span class="subhead3">DISABLE Clause&nbsp;</span>Use this clause if you want to disable the integrity constraint. This clause is described fully in <a href="clauses002.htm#i1002349">&#34;DISABLE Clause&#34;</a> in the documentation on constraints.</p>
<p><a id="SQLRF54615"></a><span class="subhead3">UNIQUE <a id="sthref5824"></a><a id="sthref5825"></a>&nbsp;</span>The <code dir="ltr">UNIQUE</code> clause lets you enable or disable the unique constraint defined on the specified column or combination of columns.</p>
<p><a id="SQLRF54616"></a><span class="subhead3">PRIMARY KEY <a id="sthref5826"></a><a id="sthref5827"></a>&nbsp;</span>The <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> clause lets you enable or disable the primary key constraint defined on the table.</p>
<p><a id="SQLRF54617"></a><span class="subhead3">CONSTRAINT <a id="sthref5828"></a>&nbsp;</span>The <code dir="ltr">CONSTRAINT</code> clause lets you enable or disable the integrity constraint named <code dir="ltr"><span class="codeinlineitalic">constraint_name</span></code>.</p>
<p><a id="SQLRF54618"></a><span class="subhead3">KEEP | DROP INDEX&nbsp;</span>This clause lets you either preserve or drop the index Oracle Database has been using to enforce a unique or primary key constraint.</p>
<p><a id="SQLRF54619"></a><span class="subhead3">Restriction on Preserving and Dropping Indexes&nbsp;</span>You can specify this clause only when disabling a unique or primary key constraint.</p>
<p><a id="i2159557"></a><a id="SQLRF54620"></a><span class="subhead3"><span class="italic">using_index_clause <a id="sthref5829"></a><a id="sthref5830"></a><a id="sthref5831"></a><a id="sthref5832"></a></span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code> lets you specify an index for Oracle Database to use to enforce a unique or primary key constraint, or lets you instruct the database to create the index used to enforce the constraint. This clause is discussed fully in <a href="clauses002.htm#i1002419"><span class="xreftitleitalic"><span class="italic">using_index_clause</span></span></a> in the documentation on constraints.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="statements_5013.htm#i2062403">CREATE INDEX</a> for a description of <a href="statements_5013.htm#i2075657"><span class="xreftitleitalic"><span class="italic">index_attributes</span></span></a>, the <a href="statements_5013.htm#i2150212"><span class="xreftitleitalic"><span class="italic">global_partitioned_index</span></span></a> and <a href="statements_5013.htm#i2135151"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span></span></a> clauses, <code dir="ltr">NOSORT</code>, and the <code dir="ltr"><span class="codeinlineitalic">logging_clause</span></code> in relation to indexes</p>
</li>
<li>
<p><a href="clauses002.htm#g1053592"><span class="xreftitleitalic"><span class="italic">constraint</span></span></a> for information on the <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code> and on <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> and <code dir="ltr">UNIQUE</code> constraints</p>
</li>
<li>
<p><a href="clauses002.htm#i1002834">&#34;Explicit Index Control Example&#34;</a> for an example of using an index to enforce a constraint</p>
</li>
</ul>
</div>
<p><a id="SQLRF54621"></a><span class="subhead3">CASCADE <a id="sthref5833"></a><a id="sthref5834"></a>&nbsp;</span>Specify <code dir="ltr">CASCADE</code> to disable any integrity constraints that depend on the specified integrity constraint. To disable a primary or unique key that is part of a referential integrity constraint, you must specify this clause.</p>
<p><a id="SQLRF54622"></a><span class="subhead3">Restriction on CASCADE&nbsp;</span>You can specify <code dir="ltr">CASCADE</code> only if you have specified <code dir="ltr">DISABLE</code>.</p>
<p class="subhead2"><a id="i2159748"></a><a id="SQLRF54623"></a><span class="italic">row_movement_clause</span> <span class="bolditalic"><a id="sthref5835"></a><a id="sthref5836"></a><a id="sthref5837"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">row_movement_clause</span></code> lets you specify whether the database can move a table row. It is possible for a row to move, for example, during table compression or an update operation on partitioned data.</p>
<div class="infoboxnotewarn">
<p class="notep1">Caution:</p>
If you need static rowids for data access, then do not enable row movement. For a normal (heap-organized) table, moving a row changes the rowid of the row. For a moved row in an index-organized table, the logical rowid remains valid, although the physical guess component of the logical rowid becomes inaccurate.</div>
<ul>
<li>
<p>Specify <code dir="ltr">ENABLE</code> to allow the database to move a row, thus changing the rowid.</p>
</li>
<li>
<p>Specify <code dir="ltr">DISABLE</code> if you want to prevent the database from moving a row, thus preventing a change of rowid.</p>
</li>
</ul>
<p>If you omit this clause, then the database disables row movement.</p>
<p><a id="SQLRF54624"></a><span class="subhead3">Restriction on Row Movement&nbsp;</span>You cannot specify this clause for a nonpartitioned index-organized table.</p>
<p class="subhead2"><a id="BABGIIIA"></a><a id="SQLRF30014"></a><span class="italic">flashback_archive_clause</span> <a id="sthref5838"></a><a id="sthref5839"></a><a id="sthref5840"></a></p>
<p>You must have the <code dir="ltr">FLASHBACK</code> <code dir="ltr">ARCHIVE</code> object privilege on the specified flashback data archive to specify this clause. Use this clause to enable or disable historical tracking for the table.</p>
<ul>
<li>
<p>Specify <code dir="ltr">FLASHBACK</code> <code dir="ltr">ARCHIVE</code> to enable tracking for the table. You can specify <code dir="ltr"><span class="codeinlineitalic">flashback_archive</span></code> to designate a particular flashback data archive for this table. The flashback data archive you specify much already exist.</p>
<p>If you omit <code dir="ltr"><span class="codeinlineitalic">flashback_archive</span></code>, then the database uses the default flashback data archive designated for the system. If no default flashback data archive has been designated for the system, then you must specify <code dir="ltr"><span class="codeinlineitalic">flashback_archive</span></code>.</p>
</li>
<li>
<p>Specify <code dir="ltr">NO</code> <code dir="ltr">FLASHBACK</code> <code dir="ltr">ARCHIVE</code> to disable tracking for the table. This is the default.</p>
</li>
</ul>
<p><a id="SQLRF54625"></a><span class="subhead3">Restrictions on <span class="italic">flashback_archive_clause</span>&nbsp;</span>Flashback data archives are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify this clause for a nested table, clustered table, temporary table, remote table, or external table.</p>
</li>
<li>
<p>You cannot specify this clause for a table compressed with Hybrid Columnar Compression.</p>
</li>
<li>
<p>The table for which you are specifying this clause cannot contain any <code dir="ltr">LONG</code> or nested table columns.</p>
</li>
<li>
<p>If you specify this clause and subsequently copy the table to a different database&mdash;using the export and import utilities or the transportable tablespace feature&mdash;then the copied table will not be enabled for tracking and the archived data for the original table will not be available for the copied table.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS01011" href="../ADFNS/adfns_flashback.htm#ADFNS01011"><span class="italic">Oracle Database Development Guide</span></a> for general information on using flashback data archives</p>
</li>
<li>
<p><a href="statements_1010.htm#BABGBHGE">ALTER FLASHBACK ARCHIVE</a> for information on changing the quota and retention attributes of the flashback data archive, as well as adding or changing tablespace storage for the flashback data archive</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="CJADBDCA"></a><a id="SQLRF56465"></a>ROW ARCHIVAL</p>
<p>Specify this clause to enable <code dir="ltr"><span class="codeinlineitalic">table</span></code> for row archival. This clause lets you implement In-Database Archiving, which allows you to designate table rows as active or archived. You can then perform queries on only the active rows within the table.</p>
<p>When you specify this clause, a hidden column <code dir="ltr">ORA_ARCHIVE_STATE</code> is created in the table. The column is of data type <code dir="ltr">VARCHAR2</code>. You can specify a value of <code dir="ltr">0</code> or <code dir="ltr">1</code> for this column to indicate whether a row is active (<code dir="ltr">0</code>) or archived (<code dir="ltr">1</code>). If you do not specify a value for <code dir="ltr">ORA_ARCHIVE_STATE</code> when inserting data into the table, then the value is set to <code dir="ltr">0</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">ROW</code> <code dir="ltr">ARCHIVE</code> <code dir="ltr">VISIBILITY</code> <code dir="ltr">=</code> <code dir="ltr">ACTIVE</code> for the session, then the database will consider only active rows when performing queries on the table.</p>
</li>
<li>
<p>If <code dir="ltr">ROW</code> <code dir="ltr">ARCHIVE</code> <code dir="ltr">VISIBILITY</code> <code dir="ltr">=</code> <code dir="ltr">ALL</code> for the session, then the database will consider all rows when performing queries on the table.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> <a href="statements_2015.htm#CCHEHEJJ">ROW ARCHIVAL VISIBILITY</a> clause to learn how to configure row archival visibility for a session</p>
</li>
<li>
<p>The <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <a href="statements_3001.htm#CJABCCEH">[NO] ROW ARCHIVAL</a> clause to learn how to enable or disable an existing table for row archival</p>
</li>
<li>
<p><span class="italic">Oracle Database VLDB and Partitioning Guide</span> for more information on In-Database Archiving</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="i2159659"></a><a id="SQLRF54626"></a>AS <span class="italic">subquery</span> <a id="sthref5841"></a><a id="sthref5842"></a><a id="sthref5843"></a></p>
<p>Specify a subquery to determine the contents of the table. The rows returned by the subquery are inserted into the table upon its creation.</p>
<p>For object tables, <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> can contain either one expression corresponding to the table type, or the number of top-level attributes of the table type. Refer to <a href="statements_10002.htm#i2065646">SELECT</a> for more information.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> returns the equivalent of part or all of an existing materialized view, then the database may rewrite the query to use the materialized view in place of one or more tables specified in <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Data Warehousing Guide</span> for more information on <a class="olink DWHSG008" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG008">materialized views</a> and <a class="olink DWHSG018" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG018">query rewrite</a></div>
<p>Oracle Database derives data types and lengths from the subquery. Oracle Database follows the following rules for integrity constraints and other column and table attributes:</p>
<ul>
<li>
<p>Oracle Database automatically defines on columns in the new table any <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints that have a state of <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> and <code dir="ltr">VALIDATE</code>, and were explicitly created on the corresponding columns of the selected table if the subquery selects the column rather than an expression containing the column. If any rows violate the constraint, then the database does not create the table and returns an error.</p>
</li>
<li>
<p><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints that were implicitly created by Oracle Database on columns of the selected table (for example, for primary keys) are not carried over to the new table.</p>
</li>
<li>
<p>In addition, primary keys, unique keys, foreign keys, check constraints, partitioning criteria, indexes, and column default values are not carried over to the new table.</p>
</li>
<li>
<p>If the selected table is partitioned, then you can choose whether the new table will be partitioned the same way, partitioned differently, or not partitioned. Partitioning is not carried over to the new table. Specify any desired partitioning as part of the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement before the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause.</p>
</li>
<li>
<p>A column that is encrypted using Transparent Data Encryption in the selected table will not be encrypted in the new table unless you define the column in the new table as encrypted at create time.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you encrypt sensitive columns before populating them with data. This will avoid creating clear text copies of sensitive data.</div>
</li>
</ul>
<p>If each column returned by <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> has a column name or is an expression with a specified column alias, then you can omit the columns from the table definition entirely. In this case, the names of the columns of <code dir="ltr"><span class="codeinlineitalic">table</span></code> are the same as the columns in <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>. The exception is creating an index-organized table, for which you must specify the columns in the table definition because you must specify a primary key column.</p>
<p>You can use <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> in combination with the <code dir="ltr">TO_LOB</code> function to convert the values in a <code dir="ltr">LONG</code> column in another table to LOB values in a column of the table you are creating.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADLOB008" href="../ADLOB/adlob_long_lob.htm#ADLOB008"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for a discussion of why and when to copy <code dir="ltr">LONG</code> data to a LOB</p>
</li>
<li>
<p><a href="functions002.htm#i88892">&#34;Conversion Functions&#34;</a> for a description of how to use the <code dir="ltr">TO_LOB</code> function</p>
</li>
<li>
<p><a href="statements_10002.htm#i2065646">SELECT</a> for more information on the <code dir="ltr"><span class="codeinlineitalic">order_by_clause</span></code></p>
</li>
<li>
<p><a class="olink TGSQL344" href="../TGSQL/tgsql_statscon.htm#TGSQL344"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for information on statistics gathering when using the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause</p>
</li>
</ul>
</div>
<p><a id="CJACIHHF"></a><a id="SQLRF54627"></a><span class="subhead3"><span class="italic">parallel_clause</span>&nbsp;</span>If you specify the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> in this statement, then the database will ignore any value you specify for the <code dir="ltr">INITIAL</code> storage parameter and will instead use the value of the <code dir="ltr">NEXT</code> parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clauses007.htm#i1026834"><span class="xreftitleitalic"><span class="italic">storage_clause</span></span></a> for information on these parameters</div>
<p><a id="SQLRF54628"></a><span class="subhead3">ORDER BY&nbsp;</span>The <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause lets you order rows returned by the subquery.</p>
<p>When specified with <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code>, this clause does not necessarily order data across the entire table. For example, it does not order across partitions. Specify this clause if you intend to create an index on the same key as the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> key column. Oracle Database will cluster data on the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> key so that it corresponds to the index key.</p>
<p><a id="SQLRF54629"></a><span class="subhead3">Restrictions on the Defining Query of a Table&nbsp;</span>The table query is subject to the following restrictions:</p>
<ul>
<li>
<p>The number of columns in the table must equal the number of expressions in the subquery.</p>
</li>
<li>
<p>The column definitions can specify only column names, default values, and integrity constraints, not data types.</p>
</li>
<li>
<p>You cannot define a foreign key constraint in a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement that contains <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> unless the table is reference partitioned and the constraint is the table&#39;s partitioning referential constraint. In all other cases, you must create the table without the constraint and then add it later with an <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
</li>
</ul>
<p class="subhead2"><a id="i2159410"></a><a id="SQLRF54630"></a><span class="italic">object_table <a id="sthref5844"></a><a id="sthref5845"></a><a id="sthref5846"></a></span></p>
<p>The <code dir="ltr">OF</code> clause lets you explicitly create an <span class="bold">object table</span> of type <code dir="ltr"><span class="codeinlineitalic">object_type</span></code>. The columns of an object table correspond to the top-level attributes of type <code dir="ltr"><span class="codeinlineitalic">object_type</span></code>. Each row will contain an object instance, and each instance will be assigned a unique, system-generated object identifier when a row is inserted. If you omit <code dir="ltr"><span class="codeinlineitalic">schema</span></code>, then the database creates the object table in your own schema.</p>
<p><a id="sthref5847"></a><a id="sthref5848"></a><a id="sthref5849"></a>Object tables, as well as <code dir="ltr">XMLType</code> tables, object views, and <code dir="ltr">XMLType</code> views, do not have any column names specified for them. Therefore, Oracle defines a system-generated pseudocolumn <code dir="ltr">OBJECT_ID</code>. You can use this column name in queries and to create object views with the <code dir="ltr">WITH</code> <code dir="ltr">OBJECT</code> <code dir="ltr">IDENTIFIER</code> clause.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2153366">&#34;Object Column and Table Examples&#34;</a></div>
<p class="subhead1"><a id="i2159431"></a><a id="SQLRF54631"></a><span class="italic">object_table_substitution <a id="sthref5850"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">object_table_substitution</span></code> clause to specify whether row objects corresponding to subtypes can be inserted into this object table.</p>
<p><a id="SQLRF54632"></a><span class="subhead3">NOT SUBSTITUTABLE AT ALL LEVELS&nbsp;</span><code dir="ltr">NOT</code> <code dir="ltr">SUBSTITUTABLE</code> <code dir="ltr">AT</code> <code dir="ltr">ALL</code> <code dir="ltr">LEVELS</code> indicates that the object table being created is not substitutable. In addition, substitution is disabled for all embedded object attributes and elements of embedded nested tables and arrays. The default is <code dir="ltr">SUBSTITUTABLE</code> <code dir="ltr">AT</code> <code dir="ltr">ALL</code> <code dir="ltr">LEVELS</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="statements_8001.htm#BABHJHEB">CREATE TYPE</a> for more information about creating object types</p>
</li>
<li>
<p><a href="sql_elements001.htm#i46376">&#34;User-Defined Types&#34;</a>, <a href="functions272.htm#i1012049">&#34;About User-Defined Functions&#34;</a>, <a href="expressions001.htm#i1002626">&#34;About SQL Expressions&#34;</a>, <a href="statements_8001.htm#BABHJHEB">CREATE TYPE</a>, and <a class="olink ADOBJ00805" href="../ADOBJ/adobjdes.htm#ADOBJ00805"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about using <code dir="ltr">REF</code> types</p>
</li>
</ul>
</div>
<p class="subhead1"><a id="i2159490"></a><a id="SQLRF54633"></a><span class="italic">object_properties</span></p>
<p>The properties of object tables are essentially the same as those of relational tables. However, instead of specifying columns, you specify attributes of the object.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">attribute</span></code>, specify the qualified column name of an item in an object.</p>
<p class="subhead1"><a id="i2159502"></a><a id="SQLRF54634"></a><span class="italic">oid_clause<a id="sthref5851"></a><a id="sthref5852"></a><a id="sthref5853"></a><a id="sthref5854"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">oid_clause</span></code> lets you specify whether the object identifier of the object table should be system generated or should be based on the primary key of the table. The default is <code dir="ltr">SYSTEM</code> <code dir="ltr">GENERATED</code>.</p>
<p><a id="SQLRF54635"></a><span class="subhead3">Restrictions on the <span class="italic">oid_clause</span>&nbsp;</span>This clause is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify <code dir="ltr">OBJECT</code> <code dir="ltr">IDENTIFIER</code> <code dir="ltr">IS</code> <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> unless you have already specified a <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> constraint for the table.</p>
</li>
<li>
<p>You cannot specify this clause for a nested table.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
A primary key object identifier is locally unique but not necessarily globally unique. If you require a globally unique identifier, then you must ensure that the primary key is globally unique.</div>
<p class="subhead1"><a id="i2159516"></a><a id="SQLRF54636"></a><span class="italic">oid_index_clause<a id="sthref5855"></a><a id="sthref5856"></a></span></p>
<p>This clause is relevant only if you have specified the <code dir="ltr"><span class="codeinlineitalic">oid_clause</span></code> as <code dir="ltr">SYSTEM</code> <code dir="ltr">GENERATED</code>. It specifies an index, and optionally its storage characteristics, on the hidden object identifier column.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">index</span></code>, specify the name of the index on the hidden system-generated object identifier column. If you omit <code dir="ltr"><span class="codeinlineitalic">index</span></code>, then the database generates a name.</p>
<p class="subhead1"><a id="SQLRF54637"></a><span class="italic">physical_properties</span> and <span class="italic">table_properties</span></p>
<p>The semantics of these clauses are documented in the corresponding sections under relational tables. See <a href="#i2128663"><span class="xreftitleitalic"><span class="italic">physical_properties</span></span></a> and <a href="#i2128916"><span class="xreftitleitalic"><span class="italic">table_properties</span></span></a>.</p>
<p class="subhead2"><a id="i2129952"></a><a id="SQLRF54638"></a><span class="italic">XMLType_table <a id="sthref5857"></a><a id="sthref5858"></a><a id="sthref5859"></a><a id="sthref5860"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">XMLType_table</span></code> syntax to create a table of data type <code dir="ltr">XMLType</code>. Most of the clauses used to create an <code dir="ltr">XMLType</code> table have the same semantics that exist for object tables. The clauses specific to <code dir="ltr">XMLType</code> tables are described in this section.</p>
<p><a id="sthref5861"></a><a id="sthref5862"></a><a id="sthref5863"></a>Object tables, as well as <code dir="ltr">XMLType</code> tables, object views, and <code dir="ltr">XMLType</code> views, do not have any column names specified for them. Therefore, Oracle defines a system-generated pseudocolumn <code dir="ltr">OBJECT_ID</code>. You can use this column name in queries and to create object views with the <code dir="ltr">WITH</code> <code dir="ltr">OBJECT</code> <code dir="ltr">IDENTIFIER</code> clause.</p>
<p class="subhead1"><a id="i2215293"></a><a id="SQLRF54639"></a><span class="italic">XMLSchema_spec</span></p>
<p>This clause lets you specify the URL of a registered XMLSchema, either in the <code dir="ltr">XMLSCHEMA</code> clause or as part of the <code dir="ltr">ELEMENT</code> clause, and an XML element name.</p>
<p>You must specify an element, although the XMLSchema URL is optional. If you do specify an XMLSchema URL, then you must already have registered the XMLSchema using the <code dir="ltr">DBMS_XMLSCHEMA</code> package.</p>
<p>The optional <code dir="ltr">STORE</code> <code dir="ltr">ALL</code> <code dir="ltr">VARRAYS</code> <code dir="ltr">AS</code> clause lets you specify how all varrays in the <code dir="ltr">XMLType</code> table or column are to be stored.</p>
<ul>
<li>
<p><code dir="ltr">STORE</code> <code dir="ltr">ALL</code> <code dir="ltr">VARRAYS</code> <code dir="ltr">AS</code> <code dir="ltr">LOBS</code> indicates that all varrays are to be stored as LOBs.</p>
</li>
<li>
<p><code dir="ltr">STORE</code> <code dir="ltr">ALL</code> <code dir="ltr">VARRAYS</code> <code dir="ltr">AS</code> <code dir="ltr">TABLES</code> indicates that all varrays are to be stored as tables.</p>
</li>
</ul>
<p>The optional <code dir="ltr">ALLOW</code> | <code dir="ltr">DISALLOW</code> clauses are valid only if you have specified <code dir="ltr">BINARY</code> <code dir="ltr">XML</code> storage.</p>
<ul>
<li>
<p><code dir="ltr">ALLOW</code> <code dir="ltr">NONSCHEMA</code> indicates that non-schema-based documents can be stored in the <code dir="ltr">XMLType</code> column.</p>
</li>
<li>
<p><code dir="ltr">DISALLOW</code> <code dir="ltr">NONSCHEMA</code> indicates that non-schema-based documents cannot be stored in the <code dir="ltr">XMLType</code> column. This is the default.</p>
</li>
<li>
<p><code dir="ltr">ALLOW</code> <code dir="ltr">ANYSCHEMA</code> indicates that any schema-based document can be stored in the <code dir="ltr">XMLType</code> column.</p>
</li>
<li>
<p><code dir="ltr">DISALLOW</code> <code dir="ltr">ANYSCHEMA</code> indicates that any schema-based document cannot be stored in the <code dir="ltr">XMLType</code> column. This is the default.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS377" href="../ARPLS/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information on the <code dir="ltr">DBMS_XMLSCHEMA</code> package</p>
</li>
<li>
<p><a class="olink ADXDB0400" href="../ADXDB/xdb04cre.htm#ADXDB0400"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for information on creating and working with XML data</p>
</li>
<li>
<p><a href="#i2130736">&#34;XMLType Table Examples&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2062833"></a>Examples <a id="sthref5864"></a></p>
<p class="subhead2"><a id="i2153108"></a><a id="SQLRF54640"></a>Creating Tables: General Examples</p>
<p>This statement shows how the <code dir="ltr">employees</code> table owned by the sample human resources (<code dir="ltr">hr</code>) schema was created. A hypothetical name is given to the table and constraints so that you can duplicate this example in your test database:</p>
<pre dir="ltr">CREATE TABLE employees_demo
    ( employee_id    NUMBER(6)
    , first_name     VARCHAR2(20)
    , last_name      VARCHAR2(25) 
         CONSTRAINT emp_last_name_nn_demo NOT NULL
    , email          VARCHAR2(25) 
         CONSTRAINT emp_email_nn_demo     NOT NULL
    , phone_number   VARCHAR2(20)
    , hire_date      DATE  DEFAULT SYSDATE 
         CONSTRAINT emp_hire_date_nn_demo  NOT NULL
    , job_id         VARCHAR2(10)
       CONSTRAINT     emp_job_nn_demo  NOT NULL
    , salary         NUMBER(8,2)
       CONSTRAINT     emp_salary_nn_demo  NOT NULL
    , commission_pct NUMBER(2,2)
    , manager_id     NUMBER(6)
    , department_id  NUMBER(4)
    , dn             VARCHAR2(300)
    , CONSTRAINT     emp_salary_min_demo
                     CHECK (salary &gt; 0) 
    , CONSTRAINT     emp_email_uk_demo
                     UNIQUE (email)
    ) ;
</pre>
<p>This table contains twelve columns. The <code dir="ltr">employee_id</code> column is of data type <code dir="ltr">NUMBER</code>. The <code dir="ltr">hire_date</code> column is of data type <code dir="ltr">DATE</code> and has a default value of <code dir="ltr">SYSDATE</code>. The <code dir="ltr">last_name</code> column is of type <code dir="ltr">VARCHAR2</code> and has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, and so on.</p>
<p><a id="i2153121"></a><a id="SQLRF54641"></a><span class="subhead3">Creating a Table: Storage Example&nbsp;</span>To define the same <code dir="ltr">employees_demo</code> table in the <code dir="ltr">example</code> tablespace with a small storage capacity, issue the following statement:</p>
<pre dir="ltr">CREATE TABLE employees_demo
    ( employee_id    NUMBER(6)
    , first_name     VARCHAR2(20)
    , last_name      VARCHAR2(25) 
         CONSTRAINT emp_last_name_nn_demo NOT NULL
    , email          VARCHAR2(25) 
         CONSTRAINT emp_email_nn_demo     NOT NULL
    , phone_number   VARCHAR2(20)
    , hire_date      DATE  DEFAULT SYSDATE 
         CONSTRAINT emp_hire_date_nn_demo  NOT NULL
    , job_id         VARCHAR2(10)
       CONSTRAINT     emp_job_nn_demo  NOT NULL
    , salary         NUMBER(8,2)
       CONSTRAINT     emp_salary_nn_demo  NOT NULL
    , commission_pct NUMBER(2,2)
    , manager_id     NUMBER(6)
    , department_id  NUMBER(4)
    , dn             VARCHAR2(300)
    , CONSTRAINT     emp_salary_min_demo
                     CHECK (salary &gt; 0) 
    , CONSTRAINT     emp_email_uk_demo
                     UNIQUE (email)
    ) 
   TABLESPACE example 
   STORAGE (INITIAL 8M);
</pre>
<p><a id="CJAIGEJE"></a><a id="SQLRF55629"></a><span class="subhead3">Creating a Table with a DEFAULT ON NULL Column Value: Example&nbsp;</span></p>
<p>The following statement creates a table <code dir="ltr">myemp</code>, which can be used to store employee data. The <code dir="ltr">department_id</code> column is defined with a <code dir="ltr">DEFAULT</code> <code dir="ltr">ON</code> <code dir="ltr">NULL</code> column value of 50. Therefore, if a subsequent <code dir="ltr">INSERT</code> statement attempts to assign a NULL value to <code dir="ltr">department_id</code>, then the value of 50 will be assigned instead.</p>
<pre dir="ltr">CREATE TABLE myemp (employee_id number, last_name varchar2(25),
                    department_id NUMBER DEFAULT ON NULL 50 NOT NULL);
</pre>
<p>In the <code dir="ltr">employees</code> table, <code dir="ltr">employee_id</code> 178 has a NULL value for <code dir="ltr">department_id</code>:</p>
<pre dir="ltr">SELECT employee_id, last_name, department_id
  FROM employees
  WHERE department_id IS NULL;

EMPLOYEE_ID LAST_NAME                 DEPARTMENT_ID
----------- ------------------------- -------------
        178 Grant
</pre>
<p>Populate the <code dir="ltr">myemp</code> table with the <code dir="ltr">employee_id</code>, <code dir="ltr">last_name</code>, and <code dir="ltr">department_id</code> column data from the <code dir="ltr">employees</code> table:</p>
<pre dir="ltr">INSERT INTO myemp (employee_id, last_name, department_id)
  (SELECT employee_id, last_name, department_id from employees);
</pre>
<p>In the <code dir="ltr">myemp</code> table, <code dir="ltr">employee_id</code> 178 has a value of 50 for <code dir="ltr">department_id</code>:</p>
<pre dir="ltr">SELECT employee_id, last_name, department_id
  FROM myemp
  WHERE employee_id = 178;
 
EMPLOYEE_ID LAST_NAME                 DEPARTMENT_ID
----------- ------------------------- -------------
        178 Grant                                50
</pre>
<p><a id="CJAHCAFF"></a><a id="SQLRF55697"></a><span class="subhead3">Creating a Table with an Identity Column: Examples&nbsp;</span></p>
<p>The following statement creates a table <code dir="ltr">t1</code> with an identity column <code dir="ltr">id</code>. The sequence generator will always assign increasing integer values to <code dir="ltr">id</code>, starting with <code dir="ltr">1</code>.</p>
<pre dir="ltr">CREATE TABLE t1 (id NUMBER GENERATED AS IDENTITY);
</pre>
<p>The following statement creates a table <code dir="ltr">t2</code> with an identity column <code dir="ltr">id</code>. The sequence generator will, by default, assign increasing integer values to <code dir="ltr">id</code> in increments of 10 starting with 100.</p>
<pre dir="ltr">CREATE TABLE t2 (id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 10));
</pre>
<p><a id="i2153132"></a><a id="SQLRF54642"></a><span class="subhead3">Creating a Table: Temporary Table Example&nbsp;</span>The following statement creates a temporary table <code dir="ltr">today_sales</code> for use by sales representatives in the sample database. Each sales representative session can store its own sales data for the day in the table. The temporary data is deleted at the end of the session.</p>
<pre dir="ltr">CREATE GLOBAL TEMPORARY TABLE today_sales
   ON COMMIT PRESERVE ROWS 
   AS SELECT * FROM orders WHERE order_date = SYSDATE;
</pre>
<p><a id="SQLRF54643"></a><span class="subhead3">Creating a Table with Deferred Segment Creation: Example&nbsp;</span>The following statement creates a table with deferred segment creation. Oracle Database will not create a segment for the data of this table until data is inserted into the table:</p>
<pre dir="ltr">CREATE TABLE later (col1 NUMBER, col2 VARCHAR2(20))    SEGMENT CREATION DEFERRED;
</pre>
<p><a id="i2090577"></a><a id="SQLRF54644"></a><span class="subhead3">Substitutable Table and Column Examples&nbsp;</span>The following statements create a type hierarchy, which can be used to create a substitutable table. Type <code dir="ltr">employee_t</code> inherits the <code dir="ltr">name</code> and <code dir="ltr">ssn</code> attributes from type <code dir="ltr">person_t</code> and in addition has <code dir="ltr">department_id</code> and <code dir="ltr">salary</code> attributes. Type <code dir="ltr">part_time_emp_t</code> inherits all of the attributes from <code dir="ltr">employee_t</code> and, through <code dir="ltr">employee_t</code>, those of <code dir="ltr">person_t</code> and in addition has a <code dir="ltr">num_hrs</code> attribute. Type <code dir="ltr">part_time_emp_t</code> is final by default, so no further subtypes can be created under it.</p>
<pre dir="ltr">CREATE TYPE person_t AS OBJECT (name VARCHAR2(100), ssn NUMBER) 
   NOT FINAL;
/

CREATE TYPE employee_t UNDER person_t 
   (department_id NUMBER, salary NUMBER) NOT FINAL;
/

CREATE TYPE part_time_emp_t UNDER employee_t (num_hrs NUMBER);
/
</pre>
<p>The following statement creates a substitutable table from the <code dir="ltr">person_t</code> type:</p>
<pre dir="ltr">CREATE TABLE persons OF person_t;
</pre>
<p>The following statement creates a table with a substitutable column of type <code dir="ltr">person_t</code>:</p>
<pre dir="ltr">CREATE TABLE books (title VARCHAR2(100), author person_t);
</pre>
<p>When you insert into <code dir="ltr">persons</code> or <code dir="ltr">books</code>, you can specify values for the attributes of <code dir="ltr">person_t</code> or any of its subtypes. Examples of insert statements appear in <a href="statements_9015.htm#i2085891">&#34;Inserting into a Substitutable Tables and Columns: Examples&#34;</a>.</p>
<p>You can extract data from such tables using built-in functions and conditions. For examples, see the functions <a href="functions234.htm#i1018806">TREAT</a> and <a href="functions204.htm#i1044156">SYS_TYPEID</a>, and the <a href="conditions015.htm#i1051274">&#34;IS OF <span class="italic">type</span> Condition&#34;</a> condition.</p>
<p><a id="i2153163"></a><a id="SQLRF54645"></a><span class="subhead3">Creating a Table: Parallelism Examples&nbsp;</span>The following statement creates a table using an optimum number of parallel execution servers to scan <code dir="ltr">employees</code> and to populate <code dir="ltr">dept_80</code>:</p>
<pre dir="ltr">CREATE TABLE dept_80
   PARALLEL
   AS SELECT * FROM employees
   WHERE department_id = 80;
</pre>
<p>Using parallelism speeds up the creation of the table, because the database uses parallel execution servers to create the table. After the table is created, querying the table is also faster, because the same degree of parallelism is used to access the table.</p>
<p>The following statement creates the same table serially. Subsequent DML and queries on the table will also be serially executed.</p>
<pre dir="ltr">CREATE TABLE dept_80
   AS SELECT * FROM employees
   WHERE department_id = 80;
</pre>
<p><a id="i2153176"></a><a id="SQLRF54646"></a><span class="subhead3">Creating a Table: ENABLE/DISABLE Examples&nbsp;</span>The following statement shows how the sample table <code dir="ltr">departments</code> was created. The example defines a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, and places it in <code dir="ltr">ENABLE</code> <code dir="ltr">VALIDATE</code> state. A hypothetical name is given to the table so that you can duplicate this example in your test database:</p>
<pre dir="ltr">CREATE TABLE departments_demo
    ( department_id    NUMBER(4)
    , department_name  VARCHAR2(30)
           CONSTRAINT  dept_name_nn  NOT NULL
    , manager_id       NUMBER(6)
    , location_id      NUMBER(4)
    , dn               VARCHAR2(300)
    ) ;
</pre>
<p>The following statement creates the same <code dir="ltr">departments_demo</code> table but also defines a disabled primary key constraint:</p>
<pre dir="ltr">CREATE TABLE departments_demo
    ( department_id    NUMBER(4)   PRIMARY KEY DISABLE
    , department_name  VARCHAR2(30)
           CONSTRAINT  dept_name_nn  NOT NULL
    , manager_id       NUMBER(6)
    , location_id      NUMBER(4)
    , dn               VARCHAR2(300)
    ) ;
</pre>
<p><a id="i2153200"></a><a id="SQLRF54647"></a><span class="subhead3">Nested Table Example&nbsp;</span>The following statement shows how the sample table <code dir="ltr">pm.print_media</code> was created with a nested table column <code dir="ltr">ad_textdocs_ntab</code>:</p>
<pre dir="ltr">CREATE TABLE print_media
    ( product_id        NUMBER(6)
    , ad_id             NUMBER(6)
    , ad_composite      BLOB
    , ad_sourcetext     CLOB
    , ad_finaltext      CLOB
    , ad_fltextn        NCLOB
    , ad_textdocs_ntab  textdoc_tab
    , ad_photo          BLOB
    , ad_graphic        BFILE
    , ad_header         adheader_typ
    ) NESTED TABLE ad_textdocs_ntab STORE AS textdocs_nestedtab;
</pre>
<p><a id="i2139603"></a><a id="SQLRF54648"></a><span class="subhead3">Creating a Table: Multilevel Collection Example&nbsp;</span>The following example shows how an account manager might create a table of customers using two levels of nested tables:</p>
<pre dir="ltr">CREATE TYPE phone AS OBJECT (telephone NUMBER);
/
CREATE TYPE phone_list AS TABLE OF phone;
/
CREATE TYPE my_customers AS OBJECT (
   cust_name VARCHAR2(25),
   phones phone_list);
/
CREATE TYPE customer_list AS TABLE OF my_customers;
/
CREATE TABLE business_contacts (
   company_name VARCHAR2(25),
   company_reps customer_list)
   NESTED TABLE company_reps STORE AS outer_ntab
   (NESTED TABLE phones STORE AS inner_ntab);
</pre>
<p>The following variation of this example shows how to use the <code dir="ltr">COLUMN_VALUE</code> keyword if the inner nested table has no column or attribute name:</p>
<pre dir="ltr">CREATE TYPE phone AS TABLE OF NUMBER;    
/
CREATE TYPE phone_list AS TABLE OF phone;
/
CREATE TABLE my_customers (
   name VARCHAR2(25),
   phone_numbers phone_list)
   NESTED TABLE phone_numbers STORE AS outer_ntab
   (NESTED TABLE COLUMN_VALUE STORE AS inner_ntab);
</pre>
<p><a id="i2116140"></a><a id="SQLRF54649"></a><span class="subhead3">Creating a Table: LOB Column Example&nbsp;</span>The following statement is a variation of the statement that created the <code dir="ltr">pm.print_media</code> table with some added LOB storage characteristics:</p>
<pre dir="ltr">CREATE TABLE print_media_new
    ( product_id        NUMBER(6)
    , ad_id             NUMBER(6)
    , ad_composite      BLOB
    , ad_sourcetext     CLOB
    , ad_finaltext      CLOB
    , ad_fltextn        NCLOB
    , ad_textdocs_ntab  textdoc_tab
    , ad_photo          BLOB
    , ad_graphic        BFILE
    , ad_header         adheader_typ
    ) NESTED TABLE ad_textdocs_ntab STORE AS textdocs_nestedtab_new
    LOB (ad_sourcetext, ad_finaltext) STORE AS
      (TABLESPACE example
       STORAGE (INITIAL 6144)
       CHUNK 4000
       NOCACHE LOGGING);
</pre>
<p>In the example, the database rounds the value of <code dir="ltr">CHUNK</code> up to 4096 (the nearest multiple of the block size of 2048).</p>
<p><a id="i2153235"></a><a id="SQLRF54650"></a><span class="subhead3">Index-Organized Table Example&nbsp;</span>The following statement is a variation of the sample table <code dir="ltr">hr.countries</code>, which is index organized:</p>
<pre dir="ltr">CREATE TABLE countries_demo
    ( country_id      CHAR(2)
      CONSTRAINT country_id_nn_demo NOT NULL
    , country_name    VARCHAR2(40)
    , currency_name   VARCHAR2(25)
    , currency_symbol VARCHAR2(3)
    , region          VARCHAR2(15)
    , CONSTRAINT    country_c_id_pk_demo
                    PRIMARY KEY (country_id ) )
    ORGANIZATION INDEX 
    INCLUDING   country_name 
    PCTTHRESHOLD 2 
    STORAGE 
     ( INITIAL  4K ) 
   OVERFLOW 
    STORAGE 
      ( INITIAL  4K ); 
</pre>
<p><a id="i2153251"></a><a id="SQLRF54651"></a><span class="subhead3">External Table Example&nbsp;</span>The following statement creates an external table that represents a subset of the sample table <code dir="ltr">hr.departments</code>. The <code dir="ltr">TYPE</code> clause specifies that the access driver type for the table is <code dir="ltr">ORACLE_LOADER</code>. The <code dir="ltr">ACCESS</code> <code dir="ltr">PARAMETERS()</code> clause specifies parameter values for the <code dir="ltr">ORACLE_LOADER</code> access driver. These parameters are shown in italics and form the <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code>. The syntax for <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code> depends on the access driver type and is outside the scope of this document. Refer to <a class="olink SUTIL012" href="../SUTIL/GUID-EA56D498-E8BB-4E02-8ABF-12E7083ED9D5.htm#SUTIL012"><span class="italic">Oracle Database Utilities</span></a> for details on the <code dir="ltr">ORACLE_LOADER</code> access driver and the <code dir="ltr"><span class="codeinlineitalic">opaque_format_spec</span></code> syntax.</p>
<pre dir="ltr">CREATE TABLE dept_external (
   deptno     NUMBER(6),
   dname      VARCHAR2(20),
   loc        VARCHAR2(25) 
)
ORGANIZATION EXTERNAL
(TYPE ORACLE_LOADER
 DEFAULT DIRECTORY admin
 ACCESS PARAMETERS
 (
<span class="italic">  RECORDS DELIMITED BY newline</span>
<span class="italic">  BADFILE &#39;ulcase1.bad&#39;</span>
<span class="italic">  DISCARDFILE &#39;ulcase1.dis&#39;</span>
<span class="italic">  LOGFILE &#39;ulcase1.log&#39;</span>
<span class="italic">  SKIP 20</span>
<span class="italic">  FIELDS TERMINATED BY &#34;,&#34;  OPTIONALLY ENCLOSED BY &#39;&#34;&#39;</span>
<span class="italic">  (</span>
<span class="italic">   deptno     INTEGER EXTERNAL(6),</span>
<span class="italic">   dname      CHAR(20),</span>
<span class="italic">   loc        CHAR(25)</span>
  )
 )
 LOCATION (&#39;ulcase1.ctl&#39;)
)
REJECT LIMIT UNLIMITED;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_5008.htm#i2092417">&#34;Creating a Directory: Examples&#34;</a> to see how the <code dir="ltr">admin</code> directory was created</div>
<p class="subhead2"><a id="i2130724"></a><a id="SQLRF54652"></a>XMLType Examples<a id="sthref5865"></a></p>
<p>This section contains brief examples of creating an <code dir="ltr">XMLType</code> table or <code dir="ltr">XMLType</code> column. For a more expanded version of these examples, refer to <a href="ap_examples002.htm#i686084">&#34;Using XML in SQL Statements&#34;</a>.</p>
<p><a id="i2130736"></a><a id="SQLRF54653"></a><span class="subhead3">XMLType Table Examples&nbsp;</span>The following example creates a very simple <code dir="ltr">XMLType</code> table with one implicit binary XML column:</p>
<pre dir="ltr">CREATE TABLE xwarehouses OF XMLTYPE;
</pre>
<p>The following example creates an XMLSchema-based table. The XMLSchema must already have been created (see <a href="ap_examples002.htm#i686084">&#34;Using XML in SQL Statements&#34;</a> for more information):</p>
<pre dir="ltr">CREATE TABLE xwarehouses OF XMLTYPE
   XMLSCHEMA &#34;http://www.example.com/xwarehouses.xsd&#34;
   ELEMENT &#34;Warehouse&#34;;
</pre>
<p>You can define constraints on an XMLSchema-based table, and you can also create indexes on XMLSchema-based tables, which greatly enhance subsequent queries. You can create object-relational views on <code dir="ltr">XMLType</code> tables, and you can create <code dir="ltr">XMLType</code> views on object-relational tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="ap_examples002.htm#i686084">&#34;Using XML in SQL Statements&#34;</a> for an example of adding a constraint</p>
</li>
<li>
<p><a href="statements_5013.htm#i2113966">&#34;Creating an Index on an XMLType Table: Example&#34;</a> for an example of creating an index</p>
</li>
<li>
<p><a href="statements_8004.htm#i2117764">&#34;Creating an XMLType View: Example&#34;</a> for an example of creating an <code dir="ltr">XMLType</code> view</p>
</li>
</ul>
</div>
<p><a id="i2139746"></a><a id="SQLRF54654"></a><span class="subhead3">XMLType Column Examples&nbsp;</span>The following example creates a table with an <code dir="ltr">XMLType</code> column stored as a <code dir="ltr">CLOB</code>. This table does not require an XMLSchema, so the content structure is not predetermined:</p>
<pre dir="ltr">CREATE TABLE xwarehouses (
   warehouse_id        NUMBER,
   warehouse_spec      XMLTYPE)
   XMLTYPE warehouse_spec STORE AS CLOB
   (TABLESPACE example
    STORAGE (INITIAL 6144)
    CHUNK 4000
    NOCACHE LOGGING);
</pre>
<p>The following example creates a similar table, but stores <code dir="ltr">XMLType</code> data in an object relational <code dir="ltr">XMLType</code> column whose structure is determined by the specified schema:</p>
<pre dir="ltr">CREATE TABLE xwarehouses (
   warehouse_id    NUMBER,
   warehouse_spec  XMLTYPE)
   XMLTYPE warehouse_spec STORE AS OBJECT RELATIONAL
      XMLSCHEMA &#34;http://www.example.com/xwarehouses.xsd&#34;
      ELEMENT &#34;Warehouse&#34;;
</pre>
<p>The following example creates another similar table with an <code dir="ltr">XMLType</code> column stored as a SecureFiles <code dir="ltr">CLOB</code>. This table does not require an XMLSchema, so the content structure is not predetermined. SecureFiles LOBs require a tablespace with automatic segment-space management, so the example uses the tablespace created in <a href="statements_7003.htm#i2153459">&#34;Specifying Segment Space Management for a Tablespace: Example&#34;</a>.</p>
<pre dir="ltr">CREATE TABLE xwarehouses (
  warehouse_id   NUMBER,
  warehouse_spec XMLTYPE)
  XMLTYPE        warehouse_spec STORE AS SECUREFILE CLOB
  (TABLESPACE auto_seg_ts
  STORAGE (INITIAL 6144)
  CACHE);
</pre>
<p class="subhead2"><a id="i2153324"></a><a id="SQLRF54655"></a>Partitioning Examples</p>
<p><a id="i2093664"></a><a id="SQLRF54656"></a><span class="subhead3">Range Partitioning Example&nbsp;</span>The <code dir="ltr">sales</code> table in the sample schema <code dir="ltr">sh</code> is partitioned by range. The following example shows an abbreviated variation of the <code dir="ltr">sales</code> table. Constraints and storage elements have been omitted from the example.</p>
<pre dir="ltr">CREATE TABLE range_sales
    ( prod_id        NUMBER(6)
    , cust_id        NUMBER
    , time_id        DATE
    , channel_id     CHAR(1)
    , promo_id       NUMBER(6)
    , quantity_sold  NUMBER(3)
    , amount_sold         NUMBER(10,2)
    ) 
PARTITION BY RANGE (time_id)
  (PARTITION SALES_Q1_1998 VALUES LESS THAN (TO_DATE(&#39;01-APR-1998&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q2_1998 VALUES LESS THAN (TO_DATE(&#39;01-JUL-1998&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q3_1998 VALUES LESS THAN (TO_DATE(&#39;01-OCT-1998&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q4_1998 VALUES LESS THAN (TO_DATE(&#39;01-JAN-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q1_1999 VALUES LESS THAN (TO_DATE(&#39;01-APR-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q2_1999 VALUES LESS THAN (TO_DATE(&#39;01-JUL-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q3_1999 VALUES LESS THAN (TO_DATE(&#39;01-OCT-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q4_1999 VALUES LESS THAN (TO_DATE(&#39;01-JAN-2000&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q1_2000 VALUES LESS THAN (TO_DATE(&#39;01-APR-2000&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q2_2000 VALUES LESS THAN (TO_DATE(&#39;01-JUL-2000&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q3_2000 VALUES LESS THAN (TO_DATE(&#39;01-OCT-2000&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q4_2000 VALUES LESS THAN (MAXVALUE))
;
</pre>
<p>For information about partitioned table maintenance operations, see <a class="olink VLDBG003" href="../VLDBG/GUID-F2C99CFA-1090-4A62-B452-D4E116A40A34.htm#VLDBG003"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a>.</p>
<p><a id="SQLRF54657"></a><span class="subhead3">Interval Partitioning Example&nbsp;</span>The following example creates a variation of the <code dir="ltr">oe.customers</code> table that is partitioned by interval on the <code dir="ltr">credit_limit</code> column. One range partition is created to establish the transition point. All of the original data in the table is within the bounds of the range partition. Then data is added that exceeds the range partition, and the database creates a new interval partition.</p>
<pre dir="ltr">CREATE TABLE customers_demo (
  customer_id number(6),
  cust_first_name varchar2(20),
  cust_last_name varchar2(20),
  credit_limit number(9,2))
PARTITION BY RANGE (credit_limit)
INTERVAL (1000)
(PARTITION p1 VALUES LESS THAN (5001));
 
INSERT INTO customers_demo
  (customer_id, cust_first_name, cust_last_name, credit_limit)
  (select customer_id, cust_first_name, cust_last_name, credit_limit
  from customers);
</pre>
<p>Query the <code dir="ltr">USER_TAB_PARTITIONS</code> data dictionary view before the database creates the interval partition:</p>
<pre dir="ltr">SELECT partition_name, high_value FROM user_tab_partitions  WHERE table_name = &#39;CUSTOMERS_DEMO&#39;;

PARTITION_NAME                 HIGH_VALUE
------------------------------ ---------------
P1                             5001
 
</pre>
<p>Insert data into the table that exceeds the high value of the range partition:</p>
<pre dir="ltr">INSERT INTO customers_demo
  VALUES (699, &#39;Fred&#39;, &#39;Flintstone&#39;, 5500);
</pre>
<p>Query the <code dir="ltr">USER_TAB_PARTITIONS</code> view again after the insert to learn the system-generated name of the interval partition created to accommodate the inserted data. (The system-generated name will vary for each session.)</p>
<pre dir="ltr">SELECT partition_name, high_value FROM user_tab_partitions
  WHERE table_name = &#39;CUSTOMERS_DEMO&#39;
  ORDER BY partition_name;

PARTITION_NAME                 HIGH_VALUE
------------------------------ ---------------
P1                             5001
SYS_P44                        6001
</pre>
<p><a id="i2115317"></a><a id="SQLRF54658"></a><span class="subhead3">List Partitioning Example&nbsp;</span>The following statement shows how the sample table <code dir="ltr">oe.customers</code> might have been created as a list-partitioned table. Some columns and all constraints of the sample table have been omitted in this example.</p>
<pre dir="ltr">CREATE TABLE list_customers 
   ( customer_id             NUMBER(6)
   , cust_first_name         VARCHAR2(20) 
   , cust_last_name          VARCHAR2(20)
   , cust_address            CUST_ADDRESS_TYP
   , nls_territory           VARCHAR2(30)
   , cust_email              VARCHAR2(40))
   PARTITION BY LIST (nls_territory) (
   PARTITION asia VALUES (&#39;CHINA&#39;, &#39;THAILAND&#39;),
   PARTITION europe VALUES (&#39;GERMANY&#39;, &#39;ITALY&#39;, &#39;SWITZERLAND&#39;),
   PARTITION west VALUES (&#39;AMERICA&#39;),
   PARTITION east VALUES (&#39;INDIA&#39;),
   PARTITION rest VALUES (DEFAULT));
</pre>
<p><a id="BABDDEAB"></a><a id="SQLRF54659"></a><span class="subhead3">Partitioned Table with LOB Columns Example&nbsp;</span>This statement creates a partitioned table <code dir="ltr">print_media_demo</code> with two partitions <code dir="ltr">p1</code> and <code dir="ltr">p2</code>, and a number of LOB columns. The statement uses the sample table <code dir="ltr">pm.print_media</code>.</p>
<pre dir="ltr">CREATE TABLE print_media_demo
   ( product_id NUMBER(6)
   , ad_id NUMBER(6)
   , ad_composite BLOB
   , ad_sourcetext CLOB
   , ad_finaltext CLOB
   , ad_fltextn NCLOB
   , ad_textdocs_ntab textdoc_tab
   , ad_photo BLOB
   , ad_graphic BFILE
   , ad_header adheader_typ
   ) NESTED TABLE ad_textdocs_ntab STORE AS textdocs_nestedtab_demo
      LOB (ad_composite, ad_photo, ad_finaltext)
      STORE AS(STORAGE (INITIAL 20M))
   PARTITION BY RANGE (product_id)
      (PARTITION p1 VALUES LESS THAN (3000) TABLESPACE tbs_01
         LOB (ad_composite, ad_photo)
         STORE AS (TABLESPACE tbs_02 STORAGE (INITIAL 10M))
         NESTED TABLE ad_textdocs_ntab STORE AS nt_p1 (TABLESPACE example),
       PARTITION P2 VALUES LESS THAN (MAXVALUE)
         LOB (ad_composite, ad_finaltext)
         STORE AS SECUREFILE (TABLESPACE auto_seg_ts)
         NESTED TABLE ad_textdocs_ntab STORE AS nt_p2
       )
   TABLESPACE tbs_03;
</pre>
<p>Partition <code dir="ltr">p1</code> will be in tablespace <code dir="ltr">tbs_01</code>. The LOB data partitions for <code dir="ltr">ad_composite</code> and <code dir="ltr">ad_photo</code> will be in tablespace <code dir="ltr">tbs_02</code>. The LOB data partition for the remaining LOB columns will be in tablespace <code dir="ltr">tbs_01</code>. The storage attribute <code dir="ltr">INITIAL</code> is specified for LOB columns <code dir="ltr">ad_composite</code> and <code dir="ltr">ad_photo</code>. Other attributes will be inherited from the default table-level specification. The default LOB storage attributes not specified at the table level will be inherited from the tablespace <code dir="ltr">tbs_02</code> for columns <code dir="ltr">ad_composite</code> and <code dir="ltr">ad_photo</code> and from tablespace <code dir="ltr">tbs_01</code> for the remaining LOB columns. LOB index partitions will be in the same tablespaces as the corresponding LOB data partitions. Other storage attributes will be based on values of the corresponding attributes of the LOB data partitions and default attributes of the tablespace where the index partitions reside. The nested table partition for ad_textdocs_ntab will be stored as <code dir="ltr">nt_p1</code> in tablespace <code dir="ltr">example</code>.</p>
<p>Partition <code dir="ltr">p2</code> will be in the default tablespace <code dir="ltr">tbs_03</code>. The LOB data for <code dir="ltr">ad_composite</code> and <code dir="ltr">ad_finaltext</code> will be in tablespace <code dir="ltr">auto_seg_ts</code> as SecureFiles LOBs. The LOB data for the remaining LOB columns will be in tablespace <code dir="ltr">tbs_03</code>. The LOB index for columns <code dir="ltr">ad_composite</code> and <code dir="ltr">ad_finaltext</code> will be in tablespace <code dir="ltr">auto_seg_ts</code>. The LOB index for the remaining LOB columns will be in tablespace <code dir="ltr">tbs_03</code>. The nested table partition for <code dir="ltr">ad_textdocs_ntab</code> will be stored as <code dir="ltr">nt_p2</code> in the default tablespace <code dir="ltr">tbs_03</code>.</p>
<p><a id="i2118202"></a><a id="SQLRF54660"></a><span class="subhead3">Hash Partitioning Example&nbsp;</span>The sample table <code dir="ltr">oe.product_information</code> is not partitioned. However, you might want to partition such a large table by hash for performance reasons, as shown in this example. The tablespace names are hypothetical in this example.</p>
<pre dir="ltr">CREATE TABLE hash_products 
    ( product_id          NUMBER(6)   PRIMARY KEY
    , product_name        VARCHAR2(50) 
    , product_description VARCHAR2(2000) 
    , category_id         NUMBER(2) 
    , weight_class        NUMBER(1) 
    , warranty_period     INTERVAL YEAR TO MONTH 
    , supplier_id         NUMBER(6) 
    , product_status      VARCHAR2(20) 
    , list_price          NUMBER(8,2) 
    , min_price           NUMBER(8,2) 
    , catalog_url         VARCHAR2(50) 
    , CONSTRAINT          product_status_lov_demo 
                          CHECK (product_status in (&#39;orderable&#39; 
                                                  ,&#39;planned&#39; 
                                                  ,&#39;under development&#39; 
                                                  ,&#39;obsolete&#39;) 
 ) ) 
 PARTITION BY HASH (product_id) 
 PARTITIONS 4 
 STORE IN (tbs_01, tbs_02, tbs_03, tbs_04); 
</pre>
<p><a id="BABFDECD"></a><a id="SQLRF54661"></a><span class="subhead3">Reference Partitioning Example&nbsp;</span>The next statement uses the <code dir="ltr">hash_products</code> partitioned table created in the preceding example. It creates a variation of the <code dir="ltr">oe.order_items</code> table that is partitioned by reference to the hash partitioning on the product id of <code dir="ltr">hash_products</code>. The resulting child table will be created with five partitions. For each row of the child table <code dir="ltr">part_order_items</code>, the database evaluates the foreign key value (<code dir="ltr">product_id</code>) to determine the partition number of the parent table <code dir="ltr">hash_products</code> to which the referenced key belongs. The <code dir="ltr">part_order_items</code> row is placed in its corresponding partition.</p>
<pre dir="ltr">CREATE TABLE part_order_items (
    order_id        NUMBER(12) PRIMARY KEY,
    line_item_id    NUMBER(3),
    product_id      NUMBER(6) NOT NULL,
    unit_price      NUMBER(8,2),
    quantity        NUMBER(8),
    CONSTRAINT product_id_fk
    FOREIGN KEY (product_id) REFERENCES hash_products(product_id))
 PARTITION BY REFERENCE (product_id_fk);
</pre>
<p><a id="i2101488"></a><a id="SQLRF54662"></a><span class="subhead3">Composite-Partitioned Table Examples&nbsp;</span>The table created in the <a href="#i2093664">&#34;Range Partitioning Example&#34;</a> divides data by time of sale. If you plan to access recent data according to distribution channel as well as time, then composite partitioning might be more appropriate. The following example creates a copy of that <code dir="ltr">range_sales</code> table but specifies range-hash composite partitioning. The partitions with the most recent data are subpartitioned with both system-generated and user-defined subpartition names. Constraints and storage attributes have been omitted from the example.</p>
<pre dir="ltr">CREATE TABLE composite_sales
    ( prod_id        NUMBER(6)
    , cust_id        NUMBER
    , time_id        DATE
    , channel_id     CHAR(1)
    , promo_id       NUMBER(6)
    , quantity_sold  NUMBER(3)
    , amount_sold         NUMBER(10,2)
    ) 
PARTITION BY RANGE (time_id)
SUBPARTITION BY HASH (channel_id)
  (PARTITION SALES_Q1_1998 VALUES LESS THAN (TO_DATE(&#39;01-APR-1998&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q2_1998 VALUES LESS THAN (TO_DATE(&#39;01-JUL-1998&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q3_1998 VALUES LESS THAN (TO_DATE(&#39;01-OCT-1998&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q4_1998 VALUES LESS THAN (TO_DATE(&#39;01-JAN-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q1_1999 VALUES LESS THAN (TO_DATE(&#39;01-APR-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q2_1999 VALUES LESS THAN (TO_DATE(&#39;01-JUL-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q3_1999 VALUES LESS THAN (TO_DATE(&#39;01-OCT-1999&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q4_1999 VALUES LESS THAN (TO_DATE(&#39;01-JAN-2000&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q1_2000 VALUES LESS THAN (TO_DATE(&#39;01-APR-2000&#39;,&#39;DD-MON-YYYY&#39;)),
   PARTITION SALES_Q2_2000 VALUES LESS THAN (TO_DATE(&#39;01-JUL-2000&#39;,&#39;DD-MON-YYYY&#39;))
      SUBPARTITIONS 8,
   PARTITION SALES_Q3_2000 VALUES LESS THAN (TO_DATE(&#39;01-OCT-2000&#39;,&#39;DD-MON-YYYY&#39;))
     (SUBPARTITION ch_c,
      SUBPARTITION ch_i,
      SUBPARTITION ch_p,
      SUBPARTITION ch_s,
      SUBPARTITION ch_t),
   PARTITION SALES_Q4_2000 VALUES LESS THAN (MAXVALUE)
      SUBPARTITIONS 4)
;
</pre>
<p>The following examples creates a partitioned table of customers based on the sample table <code dir="ltr">oe.customers</code>. In this example, the table is partitioned on the <code dir="ltr">credit_limit</code> column and list subpartitioned on the <code dir="ltr">nls_territory</code> column. The subpartition template determines the subpartitioning of any subsequently added partitions, unless you override the template by defining individual subpartitions. This composite partitioning makes it possible to query the table based on a credit limit range within a specified region:</p>
<pre dir="ltr">CREATE TABLE customers_part (
   customer_id        NUMBER(6),
   cust_first_name    VARCHAR2(20),
   cust_last_name     VARCHAR2(20),
   nls_territory      VARCHAR2(30),
   credit_limit       NUMBER(9,2)) 
   PARTITION BY RANGE (credit_limit)
   SUBPARTITION BY LIST (nls_territory)
      SUBPARTITION TEMPLATE 
         (SUBPARTITION east  VALUES 
            (&#39;CHINA&#39;, &#39;JAPAN&#39;, &#39;INDIA&#39;, &#39;THAILAND&#39;),
          SUBPARTITION west VALUES 
             (&#39;AMERICA&#39;, &#39;GERMANY&#39;, &#39;ITALY&#39;, &#39;SWITZERLAND&#39;),
          SUBPARTITION other VALUES (DEFAULT))
      (PARTITION p1 VALUES LESS THAN (1000),
       PARTITION p2 VALUES LESS THAN (2500),
       PARTITION p3 VALUES LESS THAN (MAXVALUE));
</pre>
<p class="subhead2"><a id="i2153366"></a><a id="SQLRF54663"></a>Object Column and Table Examples</p>
<p><a id="i2102043"></a><a id="SQLRF54664"></a><span class="subhead3">Creating Object Tables: Examples&nbsp;</span>Consider object type <code dir="ltr">department_typ</code>:</p>
<pre dir="ltr">CREATE TYPE department_typ AS OBJECT
   ( d_name   VARCHAR2(100), 
     d_address VARCHAR2(200) );
/
 
</pre>
<p>Object table <code dir="ltr">departments_obj_t</code> holds department objects of type <code dir="ltr">department_typ</code>:</p>
<pre dir="ltr">CREATE TABLE departments_obj_t OF department_typ; 
</pre>
<p>The following statement creates object table <code dir="ltr">salesreps</code> with a user-defined object type, <code dir="ltr">salesrep_typ</code>:</p>
<pre dir="ltr">CREATE OR REPLACE TYPE salesrep_typ AS OBJECT
  ( repId NUMBER,
    repName VARCHAR2(64));

CREATE TABLE salesreps OF salesrep_typ;
</pre>
<p><a id="SQLRF54665"></a><span class="subhead3">Creating a Table with a User-Defined Object Identifier: Example&nbsp;</span>This example creates an object type and a corresponding object table whose object identifier is primary key based:</p>
<pre dir="ltr">CREATE TYPE employees_typ AS OBJECT 
   (e_no NUMBER, e_address CHAR(30));
/

CREATE TABLE employees_obj_t OF employees_typ (e_no PRIMARY KEY)
   OBJECT IDENTIFIER IS PRIMARY KEY;
</pre>
<p>You can subsequently reference the <code dir="ltr">employees_obj_t</code> object table using either <code dir="ltr"><span class="codeinlineitalic">inline_ref_constraint</span></code> or <code dir="ltr"><span class="codeinlineitalic">out_of_line_ref_constraint</span></code> syntax:</p>
<pre dir="ltr">CREATE TABLE departments_t 
   (d_no    NUMBER,
    mgr_ref REF employees_typ SCOPE IS employees_obj_t);

CREATE TABLE departments_t (
    d_no NUMBER,
    mgr_ref REF employees_typ 
       CONSTRAINT mgr_in_emp REFERENCES employees_obj_t);
</pre>
<p><a id="SQLRF54666"></a><span class="subhead3">Specifying Constraints on Type Columns: Example&nbsp;</span>The following example shows how to define constraints on attributes of an object type column:</p>
<pre dir="ltr">CREATE TYPE address_t AS OBJECT
  ( hno    NUMBER,
    street VARCHAR2(40),
    city   VARCHAR2(20),
    zip    VARCHAR2(5),
    phone  VARCHAR2(10) );
/

CREATE TYPE person AS OBJECT
  ( name        VARCHAR2(40),
    dateofbirth DATE,
    homeaddress address_t,
    manager     REF person );
/

CREATE TABLE persons OF person
  ( homeaddress NOT NULL,
      UNIQUE (homeaddress.phone),
      CHECK (homeaddress.zip IS NOT NULL),
      CHECK (homeaddress.city &lt;&gt; &#39;San Francisco&#39;) );
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="statements_7001.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="statements_7003.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>