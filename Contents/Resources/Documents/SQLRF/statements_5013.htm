<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-103639"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/CREATE%20INDEX"></a><title>CREATE INDEX</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:45Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="statements_5012.htm" title="Previous" type="text/html"/>
<link rel="Next" href="statements_5014.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">428/555</span> <!-- End Header --><a id="i2062403"></a>
<div id="SQLRF01209" class="refsect1">
<h1 class="refsect1">CREATE INDEX <a id="sthref4806"></a></h1>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4807"></a>Purpose</p>
<p><a id="sthref4808"></a>Use the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement to create an index on:</p>
<ul>
<li>
<p>One or more columns of a table, a partitioned table, an index-organized table, or a cluster</p>
</li>
<li>
<p>One or more scalar typed object attributes of a table or a cluster</p>
</li>
<li>
<p>A nested table storage table for indexing a nested table column</p>
</li>
</ul>
<p><a id="sthref4809"></a><a id="sthref4810"></a><a id="sthref4811"></a><a id="sthref4812"></a><a id="sthref4813"></a>An <span class="bold">index</span> is a schema object that contains an entry for each value that appears in the indexed column(s) of the table or cluster and provides direct, fast access to rows. The maximum size of a single index entry is dependent on the block size of the database.</p>
<p>Oracle Database supports several types of index:</p>
<ul>
<li>
<p>Normal indexes. (By default, Oracle Database creates B-tree indexes.)</p>
</li>
<li>
<p><span class="bold">Bitmap indexes</span>, which store rowids associated with a key value as a bitmap.</p>
</li>
<li>
<p><span class="bold">Partitioned indexes</span>, which consist of partitions containing an entry for each value that appears in the indexed column(s) of the table.</p>
</li>
<li>
<p><span class="bold">Function-based indexes</span>, which are based on expressions. They enable you to construct queries that evaluate the value returned by an expression, which in turn may include built-in or user-defined functions.</p>
</li>
<li>
<p><a id="sthref4814"></a><a id="sthref4815"></a><a id="sthref4816"></a><span class="bold">Domain indexes</span>, which are instances of an application-specific index of type <code dir="ltr"><span class="codeinlineitalic">indextype</span></code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT811" href="../CNCPT/indexiot.htm#CNCPT811"><span class="italic">Oracle Database Concepts</span></a> for a discussion of indexes</p>
</li>
<li>
<p><a class="olink REFRN0043" href="../REFRN/GUID-685230CF-63F5-4C5A-B8B0-037C566BDA76.htm#REFRN0043"><span class="italic">Oracle Database Reference</span></a> for more information about the limits related to index size</p>
</li>
<li>
<p><a href="statements_1012.htm#i2050158">ALTER INDEX</a> and <a href="statements_8018.htm#i2066885">DROP INDEX</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4817"></a>Additional Topics</p>
<ul>
<li>
<p><a href="#i2084975">Prerequisites</a></p>
</li>
<li>
<p><a href="#i2171607">Syntax</a></p>
</li>
<li>
<p><a href="#i2182635">Semantics</a></p>
</li>
<li>
<p><a href="#i2077034">Examples</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2084975"></a>Prerequisites</p>
<p>To create an index in your own schema, one of the following conditions must be true:</p>
<ul>
<li>
<p>The table or cluster to be indexed must be in your own schema.</p>
</li>
<li>
<p>You must have the <code dir="ltr">INDEX</code> object privilege on the table to be indexed.</p>
</li>
<li>
<p>You must have the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">INDEX</code> system privilege.</p>
</li>
</ul>
<p>To create an index in another schema, you must have the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">INDEX</code> system privilege. Also, the owner of the schema to contain the index must have either the <code dir="ltr">UNLIMITED</code> <code dir="ltr">TABLESPACE</code> system privilege or space quota on the tablespaces to contain the index or index partitions.</p>
<p>To create a domain index in your own schema, in addition to the prerequisites for creating a conventional index, you must also have the <code dir="ltr">EXECUTE</code> object privilege on the indextype. If you are creating a domain index in another user&#39;s schema, then the index owner also must have the <code dir="ltr">EXECUTE</code> object privilege on the indextype and its underlying implementation type. Before creating a domain index, you should first define the indextype.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_5014.htm#i2089202">CREATE INDEXTYPE</a></div>
<p>To create a function-based index, in addition to the prerequisites for creating a conventional index, if the index is based on user-defined functions, then those functions must be marked <code dir="ltr">DETERMINISTIC</code>. Also, you must have the <code dir="ltr">EXECUTE</code> object privilege on any user-defined function(s) used in the function-based index if those functions are owned by another user.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2171607"></a>Syntax</p>
<p class="subhead2"><a id="i2125762"></a><a id="SQLRF53951"></a><span class="italic">create_index</span>::=</p>
<img width="727" height="218" src="img/create_index.gif" alt="Description of create_index.gif follows"/><br/>
<a id="sthref4818" href="img_text/create_index.htm">Description of the illustration &#39;&#39;create_index.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#BGEHEIHF"><span class="xreftitleitalic"><span class="italic">cluster_index_clause</span> ::=</span></a>, <a href="#BGEGIIHH"><span class="xreftitleitalic"><span class="italic">table_index_clause</span> ::=</span></a>, <a href="#BGEFEGEH"><span class="xreftitleitalic"><span class="italic">bitmap_join_index_clause</span> ::=</span></a>)</p>
<p class="subhead2"><a id="BGEHEIHF"></a><a id="SQLRF53952"></a><a href="#i2062657"><span class="xreftitleitalic"><span class="italic">cluster_index_clause</span></span></a> ::=<a id="sthref4819"></a></p>
<img width="406" height="46" src="img/cluster_index_clause.gif" alt="Description of cluster_index_clause.gif follows"/><br/>
<a id="sthref4820" href="img_text/cluster_index_clause.htm">Description of the illustration &#39;&#39;cluster_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2182500"><span class="xreftitleitalic"><span class="italic">index_attributes</span>::=</span></a>)</p>
<p class="subhead2"><a id="BGEGIIHH"></a><a id="SQLRF53953"></a><a href="#i2062671"><span class="xreftitleitalic"><span class="italic">table_index_clause</span></span></a> ::=<a id="sthref4821"></a></p>
<img width="782" height="110" src="img/table_index_clause.gif" alt="Description of table_index_clause.gif follows"/><br/>
<a id="sthref4822" href="img_text/table_index_clause.htm">Description of the illustration &#39;&#39;table_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2138869"><span class="xreftitleitalic"><span class="italic">index_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="BGEFEGEH"></a><a id="SQLRF53954"></a><a href="#i2077608"><span class="xreftitleitalic"><span class="italic">bitmap_join_index_clause</span></span></a> ::=<a id="sthref4823"></a></p>
<img width="800" height="315" src="img/bitmap_join_index_clause.gif" alt="Description of bitmap_join_index_clause.gif follows"/><br/>
<a id="sthref4824" href="img_text/bitmap_join_index_clause.htm">Description of the illustration &#39;&#39;bitmap_join_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2125897"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span> ::=</span></a>, <a href="#i2182500"><span class="xreftitleitalic"><span class="italic">index_attributes</span>::=</span></a>)</p>
<p class="subhead2"><a id="SQLRF53955"></a><a href="#i2062718"><span class="xreftitleitalic"><span class="italic">index_expr</span></span></a>::=</p>
<img width="173" height="58" src="img/index_expr.gif" alt="Description of index_expr.gif follows"/><br/>
<a id="sthref4825" href="img_text/index_expr.htm">Description of the illustration &#39;&#39;index_expr.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2138869"></a><a id="SQLRF53956"></a><span class="italic">index_properties</span>::=</p>
<img width="392" height="178" src="img/index_properties.gif" alt="Description of index_properties.gif follows"/><br/>
<a id="sthref4826" href="img_text/index_properties.htm">Description of the illustration &#39;&#39;index_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2126415"><span class="xreftitleitalic"><span class="italic">global_partitioned_index</span>::=</span></a>, <a href="#i2125897"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span> ::=</span></a>, <a href="#i2182500"><span class="xreftitleitalic"><span class="italic">index_attributes</span>::=</span></a>, <a href="#i2126404"><span class="xreftitleitalic"><span class="italic">domain_index_clause</span> ::=</span></a>, <a href="#BABJAGJE"><span class="xreftitleitalic"><span class="italic">XMLIndex_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2182500"></a><a id="SQLRF53957"></a><a href="#i2075657"><span class="xreftitleitalic"><span class="italic">index_attributes</span></span></a>::=</p>
<img width="341" height="435" src="img/index_attributes.gif" alt="Description of index_attributes.gif follows"/><br/>
<a id="sthref4827" href="img_text/index_attributes.htm">Description of the illustration &#39;&#39;index_attributes.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127508"><span class="xreftitleitalic"><span class="italic">physical_attributes_cl</span><span class="italic">ause</span> ::=</span></a>, <a href="#i2182589"><span class="xreftitleitalic"><span class="italic">logging_clause</span>::=</span></a>, <a href="#i2127535"><span class="xreftitleitalic"><span class="italic">index_compression</span>::=</span></a>, <a href="#BGEJJFGA"><span class="xreftitleitalic"><span class="italic"><span class="italic">partial_index_clause</span></span>::=</span></a>, <a href="#i2127546"><span class="xreftitleitalic"><span class="italic">parallel_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2127508"></a><a id="SQLRF53958"></a><a href="#i2172833"><span class="xreftitleitalic"><span class="italic">physical_attributes_cl</span><span class="italic">ause</span></span></a> ::=</p>
<img width="268" height="147" src="img/physical_attributes_clause.gif" alt="Description of physical_attributes_clause.gif follows"/><br/>
<a id="sthref4828" href="img_text/physical_attributes_clause.htm">Description of the illustration &#39;&#39;physical_attributes_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="clauses009.htm#CJACEJGB"><span class="xreftitleitalic"><span class="italic">storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2182589"></a><a id="SQLRF53959"></a><a href="#i2140505"><span class="xreftitleitalic"><span class="italic">logging_clause</span></span></a>::=</p>
<img width="237" height="91" src="img/logging_clause.gif" alt="Description of logging_clause.gif follows"/><br/>
<a id="sthref4829" href="img_text/logging_clause.htm">Description of the illustration &#39;&#39;logging_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2127535"></a><a id="SQLRF53960"></a><a href="#BABHDBHE"><span class="xreftitleitalic"><span class="italic">index_compression</span></span></a>::=</p>
<img width="228" height="58" src="img/index_compression.gif" alt="Description of index_compression.gif follows"/><br/>
<a id="sthref4830" href="img_text/index_compression.htm">Description of the illustration &#39;&#39;index_compression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56863"></a><a href="#CACJCADI"><span class="xreftitleitalic"><span class="italic">prefix_compression</span></span></a>::=</p>
<img width="248" height="79" src="img/prefix_compression.gif" alt="Description of prefix_compression.gif follows"/><br/>
<a id="sthref4831" href="img_text/prefix_compression.htm">Description of the illustration &#39;&#39;prefix_compression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56864"></a><a href="#CACIEEBC"><span class="xreftitleitalic"><span class="italic">advanced_index_compression</span></span></a>::=</p>
<img width="282" height="58" src="img/advanced_index_compression.gif" alt="Description of advanced_index_compression.gif follows"/><br/>
<a id="sthref4832" href="img_text/advanced_index_compression.htm">Description of the illustration &#39;&#39;advanced_index_compression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BGEJJFGA"></a><a id="SQLRF55867"></a><span class="italic"><a href="#BGEBGEAH"><span class="xreftitleitalic"><span class="italic">partial_index_clause</span></span></a></span>::=</p>
<img width="204" height="58" src="img/partial_index_clause.gif" alt="Description of partial_index_clause.gif follows"/><br/>
<a id="sthref4833" href="img_text/partial_index_clause.htm">Description of the illustration &#39;&#39;partial_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2126404"></a><a id="SQLRF53961"></a><a href="#i2077100"><span class="xreftitleitalic"><span class="italic">domain_index_clause</span></span></a> ::=<a id="sthref4834"></a><a id="sthref4835"></a></p>
<img width="841" height="46" src="img/domain_index_clause.gif" alt="Description of domain_index_clause.gif follows"/><br/>
<a id="sthref4836" href="img_text/domain_index_clause.htm">Description of the illustration &#39;&#39;domain_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127546"><span class="xreftitleitalic"><span class="italic">parallel_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="SQLRF53962"></a><a href="#BABIEFGJ"><span class="xreftitleitalic"><span class="italic">local_domain_index_clause</span></span></a>::=</p>
<img width="760" height="98" src="img/local_domain_index_clause.gif" alt="Description of local_domain_index_clause.gif follows"/><br/>
<a id="sthref4837" href="img_text/local_domain_index_clause.htm">Description of the illustration &#39;&#39;local_domain_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABJAGJE"></a><a id="SQLRF53963"></a><a href="#BABICDGF"><span class="xreftitleitalic"><span class="italic">XMLIndex_clause</span></span></a>::=</p>
<img width="798" height="46" src="img/xmlindex_clause.gif" alt="Description of xmlindex_clause.gif follows"/><br/>
<a id="sthref4838" href="img_text/xmlindex_clause.htm">Description of the illustration &#39;&#39;xmlindex_clause.gif&#39;&#39;</a><br/>
<br/>
<p>( The <code dir="ltr"><span class="codeinlineitalic">XMLIndex_parameters_clause</span></code> is documented in <a class="olink ADXDB0500" href="../ADXDB/xdb_indexing.htm#ADXDB0500"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>.)</p>
<p class="subhead2"><a id="SQLRF53964"></a><span class="italic">local_XMLIndex_clause</span>::=</p>
<img width="600" height="98" src="img/local_xmlindex_clause.gif" alt="Description of local_xmlindex_clause.gif follows"/><br/>
<a id="sthref4839" href="img_text/local_xmlindex_clause.htm">Description of the illustration &#39;&#39;local_xmlindex_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(The <code dir="ltr"><span class="codeinlineitalic">XMLIndex_parameters_clause</span></code> is documented in <a class="olink ADXDB0500" href="../ADXDB/xdb_indexing.htm#ADXDB0500"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>.)</p>
<p class="subhead2"><a id="i2126415"></a><a id="SQLRF53965"></a><a href="#i2150212"><span class="xreftitleitalic"><span class="italic">global_partitioned_index</span></span></a>::=<a id="sthref4840"></a><a id="sthref4841"></a></p>
<img width="673" height="91" src="img/global_partitioned_index.gif" alt="Description of global_partitioned_index.gif follows"/><br/>
<a id="sthref4842" href="img_text/global_partitioned_index.htm">Description of the illustration &#39;&#39;global_partitioned_index.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127580"><span class="xreftitleitalic"><span class="italic">index_partitioning_clause</span>::=</span></a>, <a href="#i2169764"><span class="xreftitleitalic"><span class="italic">individual_hash_partitions</span>::=</span></a>, <a href="#i2169779"><span class="xreftitleitalic"><span class="italic">hash_partitions_by_quantity</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2169764"></a><a id="SQLRF53966"></a><span class="italic">individual_hash_partitions</span>::=</p>
<img width="676" height="79" src="img/individual_hash_partitions.gif" alt="Description of individual_hash_partitions.gif follows"/><br/>
<a id="sthref4843" href="img_text/individual_hash_partitions.htm">Description of the illustration &#39;&#39;individual_hash_partitions.gif&#39;&#39;</a><br/>
<br/>
<p>(<code dir="ltr"><span class="codeinlineitalic">indexing_clause</span></code>: not supported in <code dir="ltr"><span class="codeinlineitalic">table_index_clause</span></code>, <a href="#i2169800"><span class="xreftitleitalic"><span class="italic">partitioning_storage_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2169800"></a><a id="SQLRF53967"></a><span class="italic">partitioning_storage_clause</span>::=</p>
<img width="720" height="346" src="img/partitioning_storage_clause.gif" alt="Description of partitioning_storage_clause.gif follows"/><br/>
<a id="sthref4844" href="img_text/partitioning_storage_clause.htm">Description of the illustration &#39;&#39;partitioning_storage_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<code dir="ltr"><span class="codeinlineitalic">table_compression</span></code>, <code dir="ltr"><span class="codeinlineitalic">inmemory_clause</span></code>, and <code dir="ltr"><span class="codeinlineitalic">ilm_clause</span></code> not supported with <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code>, <a href="#i2127535"><span class="xreftitleitalic"><span class="italic">index_compression</span>::=</span></a>, <a href="#CACCFEEE"><span class="xreftitleitalic"><span class="italic">LOB_partitioning_storage</span>::=</span></a>)</p>
<p class="subhead2"><a id="CACCFEEE"></a><a id="SQLRF53968"></a><span class="italic">LOB_partitioning_storage</span>::=</p>
<img width="768" height="156" src="img/lob_partitioning_storage.gif" alt="Description of lob_partitioning_storage.gif follows"/><br/>
<a id="sthref4845" href="img_text/lob_partitioning_storage.htm">Description of the illustration &#39;&#39;lob_partitioning_storage.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2169779"></a><a id="SQLRF53969"></a><span class="italic">hash_partitions_by_quantity</span>::=</p>
<img width="633" height="178" src="img/hash_partitions_by_quantity.gif" alt="Description of hash_partitions_by_quantity.gif follows"/><br/>
<a id="sthref4846" href="img_text/hash_partitions_by_quantity.htm">Description of the illustration &#39;&#39;hash_partitions_by_quantity.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2127580"></a><a id="SQLRF53970"></a><span class="italic">index_partitioning_clause</span>::=</p>
<img width="754" height="58" src="img/index_partitioning_clause.gif" alt="Description of index_partitioning_clause.gif follows"/><br/>
<a id="sthref4847" href="img_text/index_partitioning_clause.htm">Description of the illustration &#39;&#39;index_partitioning_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127592"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2125897"></a><a id="SQLRF53971"></a><a href="#i2135151"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span></span></a> ::=<a id="sthref4848"></a><a id="sthref4849"></a></p>
<img width="324" height="143" src="img/local_partitioned_index.gif" alt="Description of local_partitioned_index.gif follows"/><br/>
<a id="sthref4850" href="img_text/local_partitioned_index.htm">Description of the illustration &#39;&#39;local_partitioned_index.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127604"><span class="xreftitleitalic"><span class="italic">on_range_partitioned_table</span> ::=</span></a>, <a href="#i2127615"><span class="xreftitleitalic"><span class="italic">on_list_partitioned_table</span>::=</span></a>, <a href="#i2127630"><span class="xreftitleitalic"><span class="italic">on_hash_partitioned_table</span> ::=</span></a>, <a href="#i2127641"><span class="xreftitleitalic"><span class="italic">on_comp_partitioned_table</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2127604"></a><a id="SQLRF53972"></a><a href="#i2135160"><span class="xreftitleitalic"><span class="italic">on_range_partitioned_table</span></span></a> ::=<a id="sthref4851"></a></p>
<img width="746" height="119" src="img/on_range_partitioned_table.gif" alt="Description of on_range_partitioned_table.gif follows"/><br/>
<a id="sthref4852" href="img_text/on_range_partitioned_table.htm">Description of the illustration &#39;&#39;on_range_partitioned_table.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127592"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2127615"></a><a id="SQLRF53973"></a><span class="italic">on_list_partitioned_table</span>::=<a id="sthref4853"></a></p>
<img width="746" height="119" src="img/on_list_partitioned_table.gif" alt="Description of on_list_partitioned_table.gif follows"/><br/>
<a id="sthref4854" href="img_text/on_list_partitioned_table.htm">Description of the illustration &#39;&#39;on_list_partitioned_table.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127592"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2127592"></a><a id="SQLRF53974"></a><span class="italic">segment_attributes_clause</span>::=</p>
<img width="263" height="103" src="img/segment_attributes_clause.gif" alt="Description of segment_attributes_clause.gif follows"/><br/>
<a id="sthref4855" href="img_text/segment_attributes_clause.htm">Description of the illustration &#39;&#39;segment_attributes_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127508"><span class="xreftitleitalic"><span class="italic">physical_attributes_cl</span><span class="italic">ause</span> ::=</span></a>, <a href="#i2182589"><span class="xreftitleitalic"><span class="italic">logging_clause</span>::=</span></a></p>
<p class="subhead2"><a id="i2127630"></a><a id="SQLRF53975"></a><a href="#i2135169"><span class="xreftitleitalic"><span class="italic">on_hash_partitioned_table</span></span></a> ::=<a id="sthref4856"></a></p>
<img width="906" height="175" src="img/on_hash_partitioned_table.gif" alt="Description of on_hash_partitioned_table.gif follows"/><br/>
<a id="sthref4857" href="img_text/on_hash_partitioned_table.htm">Description of the illustration &#39;&#39;on_hash_partitioned_table.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2127641"></a><a id="SQLRF53976"></a><a href="#i2135178"><span class="xreftitleitalic"><span class="italic">on_comp_partitioned_table</span></span></a> ::=<a id="sthref4858"></a></p>
<img width="951" height="215" src="img/on_comp_partitioned_table.gif" alt="Description of on_comp_partitioned_table.gif follows"/><br/>
<a id="sthref4859" href="img_text/on_comp_partitioned_table.htm">Description of the illustration &#39;&#39;on_comp_partitioned_table.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2127592"><span class="xreftitleitalic"><span class="italic">segment_attributes_clause</span>::=</span></a>, <a href="#i2127535"><span class="xreftitleitalic"><span class="italic">index_compression</span>::=</span></a>, <a href="#i2127707"><span class="xreftitleitalic"><span class="italic">index_subpartition_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2127707"></a><a id="SQLRF53977"></a><span class="italic">index_subpartition_clause</span>::=<a id="sthref4860"></a><a id="sthref4861"></a></p>
<img width="947" height="175" src="img/index_subpartition_clause.gif" alt="Description of index_subpartition_clause.gif follows"/><br/>
<a id="sthref4862" href="img_text/index_subpartition_clause.htm">Description of the illustration &#39;&#39;index_subpartition_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2127546"></a><a id="SQLRF53978"></a><span class="italic">parallel_clause</span>::=</p>
<img width="241" height="79" src="img/parallel_clause.gif" alt="Description of parallel_clause.gif follows"/><br/>
<a id="sthref4863" href="img_text/parallel_clause.htm">Description of the illustration &#39;&#39;parallel_clause.gif&#39;&#39;</a><br/>
<br/></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2182635"></a>Semantics</p>
<p class="subhead1"><a id="SQLRF53979"></a>UNIQUE <a id="sthref4864"></a><a id="sthref4865"></a><a id="sthref4866"></a></p>
<p>Specify <code dir="ltr">UNIQUE</code> to indicate that the value of the column (or columns) upon which the index is based must be unique.</p>
<p><a id="SQLRF53980"></a><span class="subhead3">Restrictions on Unique Indexes&nbsp;</span>Unique indexes are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify both <code dir="ltr">UNIQUE</code> and <code dir="ltr">BITMAP</code>.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">UNIQUE</code> for a domain index.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clauses002.htm#i1034458">&#34;Unique Constraints&#34;</a> for information on the conditions that satisfy a unique constraint</div>
<p class="subhead1"><a id="i2077580"></a><a id="SQLRF53981"></a>BITMAP <a id="sthref4867"></a><a id="sthref4868"></a><a id="sthref4869"></a></p>
<p>Specify <code dir="ltr">BITMAP</code> to indicate that <code dir="ltr"><span class="codeinlineitalic">index</span></code> is to be created with a bitmap for each distinct key, rather than indexing each row separately. Bitmap indexes store the rowids associated with a key value as a bitmap. Each bit in the bitmap corresponds to a possible rowid. If the bit is set, then it means that the row with the corresponding rowid contains the key value. The internal representation of bitmaps is best suited for applications with low levels of concurrent transactions, such as data warehousing.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle does not index table rows in which all key columns are null except in the case of bitmap indexes. Therefore, if you want an index on all rows of a table, then you must either specify <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints for the index key columns or create a bitmap index.</div>
<p><a id="SQLRF53982"></a><span class="subhead3">Restrictions on Bitmap Indexes&nbsp;</span>Bitmap indexes are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify <code dir="ltr">BITMAP</code> when creating a global partitioned index.</p>
</li>
<li>
<p>You cannot create a bitmap secondary index on an index-organized table unless the index-organized table has a mapping table associated with it.</p>
</li>
<li>
<p>You cannot specify both <code dir="ltr">UNIQUE</code> and <code dir="ltr">BITMAP</code>.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">BITMAP</code> for a domain index.</p>
</li>
<li>
<p>A bitmap index can have a maximum of 30 columns.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT811" href="../CNCPT/indexiot.htm#CNCPT811"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink TGSQL850" href="../TGSQL/tgsql_indc.htm#TGSQL850"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for more information about using bitmap indexes</p>
</li>
<li>
<p><a href="statements_7002.htm#i2095331">CREATE TABLE</a> for information on mapping tables</p>
</li>
<li>
<p><a href="#i2129648">&#34;Bitmap Index Examples&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead1"><a id="SQLRF53983"></a><span class="italic">schema</span></p>
<p>Specify the schema to contain the index. If you omit <code dir="ltr"><span class="codeinlineitalic">schema</span></code>, then Oracle Database creates the index in your own schema.</p>
<p class="subhead1"><a id="SQLRF53984"></a><span class="italic">index</span></p>
<p>Specify the name of the index to be created. The name must satisfy the requirements listed in <a href="sql_elements008.htm#i27570">&#34;Database Object Naming Rules&#34;</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2105550">&#34;Creating an Index: Example&#34;</a> and <a href="#i2113966">&#34;Creating an Index on an XMLType Table: Example&#34;</a></div>
<p class="subhead1"><a id="i2062657"></a><a id="SQLRF53985"></a><span class="italic">cluster_index_clause</span> <span class="bolditalic"><a id="sthref4870"></a><a id="sthref4871"></a><a id="sthref4872"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">cluster_index_clause</span></code> to identify the cluster for which a cluster index is to be created. If you do not qualify cluster with <code dir="ltr"><span class="codeinlineitalic">schema</span></code>, then Oracle Database assumes the cluster is in your current schema. You cannot create a cluster index for a hash cluster.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_5002.htm#BABDBDEE">CREATE CLUSTER</a> and <a href="#i2129513">&#34;Creating a Cluster Index: Example&#34;</a></div>
<p class="subhead1"><a id="i2062671"></a><a id="SQLRF53986"></a><span class="italic">table_index_clause <a id="sthref4873"></a><a id="sthref4874"></a><a id="sthref4875"></a><a id="sthref4876"></a><a id="sthref4877"></a></span></p>
<p>Specify the table on which you are defining the index. If you do not qualify <code dir="ltr"><span class="codeinlineitalic">table</span></code> with <code dir="ltr"><span class="codeinlineitalic">schema</span></code>, then Oracle Database assumes the table is contained in your own schema.</p>
<p>You create an index on a nested table column by creating the index on the nested table storage table. Include the <code dir="ltr">NESTED_TABLE_ID</code> pseudocolumn of the storage table to create a <code dir="ltr">UNIQUE</code> index, which effectively ensures that the rows of a nested table value are distinct.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2129697">&#34;Indexes on Nested Tables: Example&#34;</a></div>
<p>You can perform DDL operations (such as <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>, <code dir="ltr">DROP</code> <code dir="ltr">TABLE</code>, <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code>) on a temporary table only when no session is bound to it. A session becomes bound to a temporary table by performing an <code dir="ltr">INSERT</code> operation on the table. A session becomes unbound to the temporary table by issuing a <code dir="ltr">TRUNCATE</code> statement or at session termination, or, for a transaction-specific temporary table, by issuing a <code dir="ltr">COMMIT</code> or <code dir="ltr">ROLLBACK</code> statement.</p>
<p><a id="SQLRF53987"></a><span class="subhead3">Restrictions on the <span class="italic">table_index_clause</span>&nbsp;</span>This clause is subject to the following restrictions:</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">index</span></code> is locally partitioned, then <code dir="ltr"><span class="codeinlineitalic">table</span></code> must be partitioned.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">table</span></code> is index-organized, then this statement creates a secondary index. The index contains the index key and the logical rowid of the index-organized table. The logical rowid excludes columns that are also part of the index key. You cannot specify <code dir="ltr">REVERSE</code> for this secondary index, and the combined size of the index key and the logical rowid should be less than the block size.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">table</span></code> is a temporary table, then <code dir="ltr"><span class="codeinlineitalic">index</span></code> will also be temporary with the same scope (session or transaction) as <code dir="ltr"><span class="codeinlineitalic">table</span></code>. The following restrictions apply to indexes on temporary tables:</p>
<ul>
<li>
<p>The only part of <code dir="ltr"><span class="codeinlineitalic">index_properties</span></code> you can specify is <code dir="ltr"><span class="codeinlineitalic">index_attributes</span></code>.</p>
</li>
<li>
<p>Within <code dir="ltr"><span class="codeinlineitalic">index_attributes</span></code>, you cannot specify the <code dir="ltr"><span class="codeinlineitalic">physical_attributes_clause</span></code>, the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code>, the <code dir="ltr"><span class="codeinlineitalic">logging_clause</span></code>, or <code dir="ltr">TABLESPACE</code>.</p>
</li>
<li>
<p>You cannot create a domain index or a partitioned index on a temporary table.</p>
</li>
</ul>
</li>
<li>
<p>You cannot create an index on an external table.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_7002.htm#i2095331">CREATE TABLE</a> and <a class="olink CNCPT211" href="../CNCPT/tablecls.htm#CNCPT211"><span class="italic">Oracle Database Concepts</span></a> for more information on temporary tables</div>
<p class="subhead2"><a id="SQLRF53988"></a><span class="italic">t_alias</span> <code dir="ltr"><span class="codeinlineitalic"><a id="sthref4878"></a><a id="sthref4879"></a></span></code></p>
<p>Specify a correlation name (alias) for the table upon which you are building the index.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This alias is required if the <code dir="ltr"><span class="codeinlineitalic">index_expr</span></code> references any object type attributes or object type methods. See <a href="#i2063357">&#34;Creating a Function-based Index on a Type Method: Example&#34;</a> and <a href="#i2089060">&#34;Indexing on Substitutable Columns: Examples&#34;</a>.</div>
<p class="subhead1"><a id="i2062718"></a><a id="SQLRF53989"></a><span class="italic">index_expr<a id="sthref4880"></a></span></p>
<p>For <code dir="ltr"><span class="codeinlineitalic">index_expr</span></code>, specify the column or column expression upon which the index is based.</p>
<p>You can create multiple indexes on the same set of columns, column expressions, or both if the following conditions are met:</p>
<ul>
<li>
<p>The indexes are of different types, use different partitioning, or have different uniqueness properties.</p>
</li>
<li>
<p>Only one of the indexes is <code dir="ltr">VISIBLE</code> at any given time.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN13845" href="../ADMIN/indexes.htm#ADMIN13845"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information on creating multiple indexes</div>
<p><a id="SQLRF53990"></a><span class="subhead3"><span class="italic">column <a id="sthref4881"></a></span>&nbsp;</span>Specify the name of one or more columns in the table. A bitmap index can have a maximum of 30 columns. Other indexes can have as many as 32 columns. These columns define the <span class="bold">index</span> <span class="bold">key</span>.</p>
<p>If a unique index is local nonprefixed (see <a href="#i2135151"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span></span></a> ), then the index key must contain the partitioning key.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink VLDBG004" href="../VLDBG/GUID-FA29787B-8700-49EA-B80D-54D667CF2752.htm#VLDBG004"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for information on prefixed and nonprefixed indexes</div>
<p>You can create an index on a scalar object attribute column or on the system-defined <code dir="ltr">NESTED_TABLE_ID</code> column of the nested table storage table. If you specify an object attribute column, then the column name must be qualified with the table name. If you specify a nested table column attribute, then it must be qualified with the outermost table name, the containing column name, and all intermediate attribute names leading to the nested table column attribute.</p>
<p><a id="BGECBJDG"></a><a id="SQLRF56300"></a><span class="subhead3">Creating an Index on an Extended Data Type Column&nbsp;</span>If <code dir="ltr"><span class="codeinlineitalic">column</span></code> is an extended data type column, then you may receive a &#34;maximum key length exceeded&#34; error when attempting to create the index. The maximum key length for an index varies depending on the database block size and some additional index metadata stored in a block. For example, for databases that use the Oracle standard 8K block size, the maximum key length is approximately 6400 bytes.</p>
<p>To work around this situation, you must shorten the length of the values you want to index, using one of the following methods:</p>
<ul>
<li>
<p>Create a function-based index to shorten the values stored in the extended data type column as part of the expression used for the index definition.</p>
</li>
<li>
<p>Create a virtual column to shorten the values stored in the extended data type column as part of the expression used for the virtual column definition and build a normal index on the virtual column. Using a virtual column also enables you to leverage functionality for regular columns, such as collecting statistics and using constraint and triggers.</p>
</li>
</ul>
<p>For both methods you can use either the <code dir="ltr">SUBSTR</code> or <code dir="ltr">STANDARD_HASH</code> function to shorten the values of the extended data type column to build an index. These methods have the following advantages and disadvantages:</p>
<ul>
<li>
<p>Use the <code dir="ltr">SUBSTR</code> function to return a substring, or prefix, of <code dir="ltr"><span class="codeinlineitalic">column</span></code> that is an acceptable length for the index key. This type of index can be used for equality, IN-list, and range predicates on the original column without the need to specify the <code dir="ltr">SUBSTR</code> column as part of the predicate. Refer to <a href="functions196.htm#i87066">SUBSTR</a> for more information.</p>
</li>
<li>
<p>Using the <code dir="ltr">STANDARD_HASH</code> function is likely to create an index that is more compact than the substring-based index and may result in fewer unnecessary index accesses. This type of index can be used for equality and IN-list predicates on the original column without the need to specify the <code dir="ltr">SUBSTR</code> column as part of the predicate. Refer to <a href="functions183.htm#BABCCAFF">STANDARD_HASH</a> for more information.</p>
</li>
</ul>
<p>The following example shows how to create a function-based index on an extended data type column:</p>
<pre dir="ltr">CREATE INDEX <span class="italic">index</span> ON <span class="italic">table</span> (SUBSTR(<span class="italic">column</span>, 0, <span class="italic">n</span>));
</pre>
<p>For n, specify a prefix length that is large enough to differentiate between values in <code dir="ltr"><span class="codeinlineitalic">column</span></code>.</p>
<p>The following example shows how to create a virtual column for an extended data type column, and then create an index on the virtual column:</p>
<pre dir="ltr">ALTER TABLE <span class="italic">table</span> ADD (<span class="italic">new_hash_column</span> AS (STANDARD_HASH(<span class="italic">column</span>)));
CREATE INDEX <span class="italic">index</span> ON <span class="italic">table</span> (<span class="italic">new_hash_column</span>);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sql_elements001.htm#BABCIGGA">&#34;Extended Data Types&#34;</a> for more information on extended data types</div>
<p><a id="BGEBJEBB"></a><a id="SQLRF53991"></a><span class="subhead3">Restrictions on Index Columns&nbsp;</span>The following restrictions apply to index columns:</p>
<ul>
<li>
<p>You cannot create an index on columns or attributes whose type is user-defined, <code dir="ltr">LONG</code>, <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, LOB, or <code dir="ltr">REF</code>, except that Oracle Database supports an index on <code dir="ltr">REF</code> type columns or attributes that have been defined with a <code dir="ltr">SCOPE</code> clause.</p>
</li>
<li>
<p>Only normal (B-tree) indexes can be created on encrypted columns, and they can only be used for equality searches.</p>
</li>
</ul>
<p><a id="i2100962"></a><a id="SQLRF53992"></a><span class="subhead3"><span class="italic">column_expression<a id="sthref4882"></a><a id="sthref4883"></a><a id="sthref4884"></a></span>&nbsp;</span>Specify an expression built from columns of <code dir="ltr"><span class="codeinlineitalic">table</span></code>, constants, SQL functions, and user-defined functions. When you specify <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code>, you create a <span class="bold">function-based index</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="expressions005.htm#BABIGHHI">&#34;Column Expressions&#34;</a>, <a href="#i2078649">&#34;Notes on Function-based Indexes&#34;</a>, <a href="#i2078657">&#34;Restrictions on Function-based Indexes&#34;</a>, and <a href="#i2092987">&#34;Function-Based Index Examples&#34;</a></div>
<p>Name resolution of the function is based on the schema of the index creator. User-defined functions used in <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> are fully name resolved during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> operation.</p>
<p>After creating a function-based index, collect statistics on both the index and its base table using the <code dir="ltr">DBMS_STATS</code> package. Such statistics will enable Oracle Database to correctly decide when to use the index.</p>
<p>Function-based unique indexes can be useful in defining a conditional unique constraint on a column or combination of columns. Refer to <a href="#BGEHDECJ">&#34;Using a Function-based Index to Define Conditional Uniqueness: Example&#34;</a> for an example.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS059" href="../ARPLS/d_stats.htm#ARPLS059"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the <code dir="ltr">DBMS_STATS</code> package</div>
<p><a id="i2078649"></a><a id="SQLRF53993"></a><span class="subhead3">Notes on Function-based Indexes&nbsp;</span>The following notes apply to function-based indexes:</p>
<ul>
<li>
<p>When you subsequently query a table that uses a function-based index, Oracle Database will not use the index unless the query filters out nulls. However, Oracle Database will use a function-based index in a query even if the columns specified in the <code dir="ltr">WHERE</code> clause are in a different order than their order in the <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> that defined the function-based index.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2092987">&#34;Function-Based Index Examples&#34;</a></div>
</li>
<li>
<p>If the function on which the index is based becomes invalid or is dropped, then Oracle Database marks the index <code dir="ltr">DISABLED</code>. Queries on a <code dir="ltr">DISABLED</code> index fail if the optimizer chooses to use the index. DML operations on a <code dir="ltr">DISABLED</code> index fail unless the index is also marked <code dir="ltr">UNUSABLE</code> <span class="bold">and</span> the parameter <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> is set to <code dir="ltr">true</code>. Refer to <a href="statements_2015.htm#i2231814">ALTER SESSION</a> for more information on this parameter.</p>
</li>
<li>
<p>If a public synonym for a function, package, or type is used in <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code>, and later an actual object with the same name is created in the table owner&#39;s schema, then Oracle Database disables the function-based index. When you subsequently enable the function-based index using <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> ... <code dir="ltr">ENABLE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> ... <code dir="ltr">REBUILD</code>, the function, package, or type used in the <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> continues to resolve to the function, package, or type to which the public synonym originally pointed. It will not resolve to the new function, package, or type.</p>
</li>
<li>
<p>If the definition of a function-based index generates internal conversion to character data, then use caution when changing NLS parameter settings. Function-based indexes use the current database settings for NLS parameters. If you reset these parameters at the session level, then queries using the function-based index may return incorrect results. Two exceptions are the collation parameters (<code dir="ltr">NLS_SORT</code> and <code dir="ltr">NLS_COMP</code>). Oracle Database handles the conversions correctly even if these have been reset at the session level.</p>
</li>
<li>
<p>Oracle Database cannot convert data in all cases, even when conversion is explicitly requested. For example, an attempt to convert the string <code dir="ltr">&#39;105 lbs&#39;</code> from <code dir="ltr">VARCHAR2</code> to <code dir="ltr">NUMBER</code> using the <code dir="ltr">TO_NUMBER</code> function fails with an error. Therefore, if <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> contains a data conversion function such as <code dir="ltr">TO_NUMBER</code> or <code dir="ltr">TO_DATE</code>, and if a subsequent <code dir="ltr">INSERT</code> or <code dir="ltr">UPDATE</code> statement includes data that the conversion function cannot convert, then the index will cause the <code dir="ltr">INSERT</code> or <code dir="ltr">UPDATE</code> statement to fail.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> contains a datetime format model, then the function-based index expression defining the column may contain format elements that are different from those specified. For example, define a function-based index using the <code dir="ltr">yyyy</code> datetime format element:</p>
<pre dir="ltr">CREATE INDEX cust_eff_ix ON customers
  (NVL(cust_eff_to, TO_DATE(&#39;9000-01-01 00:00:00&#39;, &#39;<span class="bold">yyyy</span>-mm-dd hh24:mi:ss&#39;)));
</pre>
<p>Query the <code dir="ltr">ALL_IND_EXPRESSIONS</code> view to see that the function-based index expression defining the column uses the <code dir="ltr">syyyy</code> datetime format element:</p>
<pre dir="ltr">SELECT column_expression
  FROM all_ind_expressions
  WHERE index_name=&#39;CUST_EFF_IX&#39;;

COLUMN_EXPRESSION
------------------------------------------------------------------------------
NVL(&#34;CUST_EFF_TO&#34;,TO_DATE(&#39; 9000-01-01 00:00:00&#39;, &#39;<span class="bold">syyyy</span>-mm-dd hh24:mi:ss&#39;))
</pre></li>
</ul>
<p><a id="i2078657"></a><a id="SQLRF01212"></a><span class="subhead3">Restrictions on Function-based Indexes&nbsp;</span>Function-based indexes are subject to the following restrictions:</p>
<ul>
<li>
<p>The value returned by the function referenced in <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> is subject to the same restrictions as are the index columns of a B-tree index. Refer to <a href="#BGEBJEBB">&#34;Restrictions on Index Columns&#34;</a>.</p>
</li>
<li>
<p>Any user-defined function referenced in <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> must be declared as <code dir="ltr">DETERMINISTIC</code>.</p>
</li>
<li>
<p>For a function-based globally partitioned index, the <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> cannot be the partitioning key.</p>
</li>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> can be any of the forms of expression described in <a href="expressions005.htm#BABIGHHI">Column Expressions</a>.</p>
</li>
<li>
<p>All functions must be specified with parentheses, even if they have no parameters. Otherwise Oracle Database interprets them as column names.</p>
</li>
<li>
<p>Any function you specify in <code dir="ltr"><span class="codeinlineitalic">column_expression</span></code> must return a repeatable value. For example, you cannot specify the <code dir="ltr">SYSDATE</code> or <code dir="ltr">USER</code> function or the <code dir="ltr">ROWNUM</code> pseudocolumn.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_5012.htm#i2153260">CREATE FUNCTION</a> and <a class="olink LNPLS01322" href="../LNPLS/function.htm#LNPLS01322"><span class="italic">Oracle Database PL/SQL Language Reference</span></a></div>
<p class="subhead2"><a id="SQLRF53994"></a>ASC | DESC <a id="sthref4885"></a><a id="sthref4886"></a><a id="sthref4887"></a><a id="sthref4888"></a><a id="sthref4889"></a><a id="sthref4890"></a></p>
<p>Use <code dir="ltr">ASC</code> or <code dir="ltr">DESC</code> to indicate whether the index should be created in ascending or descending order. Indexes on character data are created in ascending or descending order of the character values in the database character set.</p>
<p>Oracle Database treats descending indexes as if they were function-based indexes. As with other function-based indexes, the database does not use descending indexes until you first analyze the index and the table on which the index is defined. See the <a href="#i2100962"><span class="xreftitleitalic"><span class="italic">column_expression</span></span></a> clause of this statement.</p>
<p>Ascending unique indexes allow multiple <code dir="ltr">NULL</code> values. However, in descending unique indexes, multiple <code dir="ltr">NULL</code> values are treated as duplicate values and therefore are not permitted.</p>
<p><a id="SQLRF53995"></a><span class="subhead3">Restriction on Ascending and Descending Indexes&nbsp;</span>You cannot specify either of these clauses for a domain index. You cannot specify <code dir="ltr">DESC</code> for a reverse index. Oracle Database ignores <code dir="ltr">DESC</code> if <code dir="ltr"><span class="codeinlineitalic">index</span></code> is bitmapped or if the <code dir="ltr">COMPATIBLE</code> initialization parameter is set to a value less than 8.1.0.</p>
<p class="subhead2"><a id="i2075657"></a><a id="SQLRF20021"></a><span class="italic">index_attributes</span></p>
<p>Specify the optional index attributes.</p>
<p><a id="i2172833"></a><a id="SQLRF53996"></a><span class="subhead3"><span class="italic">physical_attributes_cl</span><span class="italic">ause</span> &nbsp;</span>Use the <code dir="ltr"><span class="codeinlineitalic">physical_attributes_clause</span></code> to establish values for physical and storage characteristics for the index.</p>
<p>If you omit this clause, then Oracle Database sets <code dir="ltr">PCTFREE</code> to 10 and <code dir="ltr">INITRANS</code> to 2.</p>
<p><a id="SQLRF53997"></a><span class="subhead3">Restriction on Index Physical Attributes&nbsp;</span>You cannot specify the <code dir="ltr">PCTUSED</code> parameter for an index.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clauses007.htm#g1058547"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span></span></a> and <a href="clauses007.htm#i1026834"><span class="xreftitleitalic"><span class="italic">storage_clause</span></span></a> for a complete description of these clauses</div>
<p><a id="SQLRF53998"></a><span class="subhead3">TABLESPACE<a id="sthref4891"></a><a id="sthref4892"></a>&nbsp;</span>For <code dir="ltr"><span class="codeinlineitalic">tablespace</span></code>, specify the name of the tablespace to hold the index, index partition, or index subpartition. If you omit this clause, then Oracle Database creates the index in the default tablespace of the owner of the schema containing the index.</p>
<p>For a local index, you can specify the keyword <code dir="ltr">DEFAULT</code> in place of <code dir="ltr"><span class="codeinlineitalic">tablespace</span></code>. New partitions or subpartitions added to the local index will be created in the same tablespace(s) as the corresponding partitions or subpartitions of the underlying table.</p>
<p class="subhead2"><a id="BABHDBHE"></a><a id="SQLRF53999"></a><span class="italic">index_compression</span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">index_compression</span></code> clauses let you enable or disable index compression for the index. Specify the <code dir="ltr">COMPRESS</code> clause of <code dir="ltr"><span class="codeinlineitalic">prefix_compression</span></code> to enable prefix compression for the index, specify the <code dir="ltr">COMPRESS</code> <code dir="ltr">ADVANCED</code> <code dir="ltr">LOW</code> clause of <code dir="ltr"><span class="codeinlineitalic">advanced_index_compression</span></code> to enable advanced index compression for the index, or specify the <code dir="ltr">NOCOMPRESS</code> clause of either <code dir="ltr"><span class="codeinlineitalic">prefix_compression</span></code> or <code dir="ltr"><span class="codeinlineitalic">advanced_index_compression</span></code> to disable compression for the index. The default is <code dir="ltr">NOCOMPRESS</code>.</p>
<p>Oracle Database compresses indexes that are nonunique or unique indexes of at least two columns. If you want to use compression for a partitioned index, then you must create the index with compression enabled at the index level. You can subsequently enable and disable the compression setting for individual partitions of such a partitioned index. You can also enable and disable compression when rebuilding individual partitions. You can modify an existing non-partitioned index to enable or disable compression only when rebuilding the index.</p>
<p><a id="CACJCADI"></a><a id="SQLRF56994"></a><span class="subhead3"><span class="italic">prefix_compression</span> <a id="sthref4893"></a><a id="sthref4894"></a><a id="sthref4895"></a><a id="sthref4896"></a><a id="sthref4897"></a>&nbsp;</span>Specify <code dir="ltr">COMPRESS</code> to enable <span class="bold">prefix</span> <span class="bold">compression</span>, also known as key compression, which eliminates repeated occurrence of key column values. Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the prefix length (number of prefix columns to compress).</p>
<ul>
<li>
<p>For unique indexes, the range of valid prefix length values is from 1 to the number of key columns minus 1. The default prefix length is the number of key columns minus 1.</p>
</li>
<li>
<p>For nonunique indexes, the range of valid prefix length values is from 1 to the number of key columns. The default prefix length is number of key columns.</p>
</li>
</ul>
<p><a id="CACIEEBC"></a><a id="SQLRF56996"></a><span class="subhead3"><span class="italic">advanced_index_compression</span><a id="sthref4898"></a><a id="sthref4899"></a><a id="sthref4900"></a>&nbsp;</span>Specify <code dir="ltr">COMPRESS</code> <code dir="ltr">ADVANCED</code> <code dir="ltr">LOW</code> to enable <span class="bold">advanced</span> <span class="bold">index</span> <span class="bold">compression</span>. Advanced index compression improves compression ratios significantly while still providing efficient access to indexes. Therefore, advanced index compression works well on all supported indexes, including those indexes that are not good candidates for prefix compression.</p>
<p><a id="SQLRF56997"></a><span class="subhead3">Restrictions on Index Compression&nbsp;</span>The following restrictions apply to index compression:</p>
<ul>
<li>
<p>You cannot specify prefix compression or advanced index compression for a bitmap index or on a single-column unique index.</p>
</li>
<li>
<p>You cannot specify advanced index compression for index-organized tables.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN14307" href="../ADMIN/indexes.htm#ADMIN14307"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information on prefix compression and advanced index compression</p>
</li>
<li>
<p><a href="#i2129467">&#34;Compressing an Index: Example&#34;</a></p>
</li>
</ul>
</div>
<p><a id="BGEBGEAH"></a><a id="SQLRF56182"></a><span class="subhead3"><span class="italic">partial_index_clause<a id="sthref4901"></a><a id="sthref4902"></a><a id="sthref4903"></a><a id="sthref4904"></a></span>&nbsp;</span>You can specify this clause only when creating an index on a partitioned table. Specify <code dir="ltr">INDEXING</code> <code dir="ltr">FULL</code> to create a <span class="bold">full</span> <span class="bold">index</span>. Specify <code dir="ltr">INDEXING</code> <code dir="ltr">PARTIAL</code> to create a <span class="bold">partial</span> <span class="bold">index</span>. The default is <code dir="ltr">INDEXING</code> <code dir="ltr">FULL</code>.</p>
<p>A full index includes all partitions in the underlying table, regardless of their indexing properties. A partial index includes only partitions in the underlying table with an indexing property of <code dir="ltr">ON</code>.</p>
<p>If a partial index is a local partitioned index, then index partitions that correspond with table partitions with an indexing property of <code dir="ltr">ON</code> are marked <code dir="ltr">USABLE</code>. Index partitions that correspond with table partitions with an indexing property of <code dir="ltr">OFF</code> are marked <code dir="ltr">UNUSABLE</code>.</p>
<p>If the underlying table is a composite-partitioned table, then the preceding conditions for index partitions and table partitions apply instead to index subpartitions and table subpartitions.</p>
<p><a id="SQLRF56183"></a><span class="subhead3">Restrictions on Partial Indexes&nbsp;</span>Partial indexes are subject to the following restrictions:</p>
<ul>
<li>
<p>The underlying table of a partial index cannot be a nonpartitioned table.</p>
</li>
<li>
<p>Unique indexes cannot be partial indexes. This applies to indexes created with the <code dir="ltr">CREATE</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">INDEX</code> statement and indexes that are implicitly created when you specify a unique constraint on one or more columns.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> <a href="statements_7002.htm#CJAFJABE"><span class="xreftitleitalic"><span class="italic">indexing_clause</span></span></a> for information on the indexing property</div>
<p><a id="SQLRF54002"></a><span class="subhead3">SORT | NOSORT <a id="sthref4905"></a><a id="sthref4906"></a><a id="sthref4907"></a>&nbsp;</span>By default, Oracle Database sorts indexes in ascending order when it creates the index. You can specify <code dir="ltr">NOSORT</code> to indicate to the database that the rows are already stored in the database in ascending order, so that Oracle Database does not have to sort the rows when creating the index. If the rows of the indexed column or columns are not stored in ascending order, then the database returns an error. For greatest savings of sort time and space, use this clause immediately after the initial load of rows into a table. If you specify neither of these keywords, then <code dir="ltr">SORT</code> is the default.</p>
<p><a id="SQLRF54003"></a><span class="subhead3">Restrictions on NOSORT&nbsp;</span>This parameter is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify <code dir="ltr">REVERSE</code> with this clause.</p>
</li>
<li>
<p>You cannot use this clause to create a cluster index partitioned or bitmap index.</p>
</li>
<li>
<p>You cannot specify this clause for a secondary index on an index-organized table.</p>
</li>
</ul>
<p><a id="SQLRF54004"></a><span class="subhead3">REVERSE <a id="sthref4908"></a><a id="sthref4909"></a><a id="sthref4910"></a>&nbsp;</span>Specify <code dir="ltr">REVERSE</code> to store the bytes of the index block in reverse order, excluding the rowid.</p>
<p><a id="SQLRF54005"></a><span class="subhead3">Restrictions on Reverse Indexes&nbsp;</span>Reverse indexes are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify <code dir="ltr">NOSORT</code> with this clause.</p>
</li>
<li>
<p>You cannot reverse a bitmap index or an index on an index-organized table.</p>
</li>
</ul>
<p><a id="BABBCCAA"></a><a id="SQLRF54006"></a><span class="subhead3">VISIBLE | INVISIBLE <a id="sthref4911"></a>&nbsp;</span>Use this clause to specify whether the index is visible or invisible to the optimizer. An invisible index is maintained by DML operations, but it is not be used by the optimizer during queries unless you explicitly set the parameter <code dir="ltr">OPTIMIZER_USE_INVISIBLE_INDEXES</code> to <code dir="ltr">TRUE</code> at the session or system level.</p>
<p>To determine whether an existing index is visible or invisible to the optimizer, you can query the <code dir="ltr">VISIBILITY</code> column of the <code dir="ltr">USER_</code>, <code dir="ltr">DBA_</code>, <code dir="ltr">ALL_INDEXES</code> data dictionary views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN12317" href="../ADMIN/indexes.htm#ADMIN12317"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information on this feature</div>
<p><a id="i2140505"></a><a id="SQLRF54007"></a><span class="subhead3"><span class="italic">logging_clause</span>&nbsp;</span>Specify whether the creation of the index will be logged (<code dir="ltr">LOGGING</code>) or not logged (<code dir="ltr">NOLOGGING</code>) in the redo log file. This setting also determines whether subsequent Direct Loader (SQL*Loader) and direct-path <code dir="ltr">INSERT</code> operations against the index are logged or not logged. <code dir="ltr">LOGGING</code> is the default.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">index</span></code> is nonpartitioned, then this clause specifies the logging attribute of the index.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">index</span></code> is partitioned, then this clause determines:</p>
<ul>
<li>
<p>The default value of all partitions specified in the <code dir="ltr">CREATE</code> statement, unless you specify the <code dir="ltr"><span class="codeinlineitalic">logging_clause</span></code> in the <code dir="ltr">PARTITION</code> description clause</p>
</li>
<li>
<p>The default value for the segments associated with the index partitions</p>
</li>
<li>
<p>The default value for local index partitions or subpartitions added implicitly during subsequent <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">ADD</code> <code dir="ltr">PARTITION</code> operations</p>
</li>
</ul>
<p>The logging attribute of the index is independent of that of its base table.</p>
<p>If you omit this clause, then the logging attribute is that of the tablespace in which it resides.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="clauses005.htm#i999782"><span class="xreftitleitalic"><span class="italic">logging_clause</span></span></a> for a full description of this clause</p>
</li>
<li>
<p><a class="olink VLDBG010" href="../VLDBG/GUID-3E2AE088-2505-465E-A8B2-AC38813EA355.htm#VLDBG010"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information about logging and parallel DML</p>
</li>
<li>
<p><a href="#i2129491">&#34;Creating an Index in NOLOGGING Mode: Example&#34;</a></p>
</li>
</ul>
</div>
<p><a id="SQLRF54008"></a><span class="subhead3">ONLINE <a id="sthref4912"></a><a id="sthref4913"></a><a id="sthref4914"></a><a id="sthref4915"></a>&nbsp;</span>Specify <code dir="ltr">ONLINE</code> to indicate that DML operations on the table will be allowed during creation of the index.</p>
<p><a id="SQLRF54009"></a><span class="subhead3">Restrictions on Online Index Building&nbsp;</span>Online index building is subject to the following restrictions:</p>
<ul>
<li>
<p>Parallel DML is not supported during online index building. If you specify <code dir="ltr">ONLINE</code> and then issue parallel DML statements, then Oracle Database returns an error.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">ONLINE</code> for a bitmap index or a cluster index.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">ONLINE</code> for a conventional index on a <code dir="ltr">UROWID</code> column.</p>
</li>
<li>
<p>For a nonunique secondary index on an index-organized table, the number of index key columns plus the number of primary key columns that are included in the logical rowid in the index-organized table cannot exceed 32. The logical rowid excludes columns that are part of the index key.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT811" href="../CNCPT/indexiot.htm#CNCPT811"><span class="italic">Oracle Database Concepts</span></a> for a description of online index building and rebuilding</div>
<p class="subhead2"><a id="SQLRF54010"></a><span class="italic">parallel_clause</span> <a id="sthref4916"></a><a id="sthref4917"></a></p>
<p>Specify the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> if you want creation of the index to be parallelized.</p>
<p>For complete information on this clause, refer to <a href="statements_7002.htm#i2159323"><span class="xreftitleitalic"><span class="italic">parallel_clause</span></span></a> in the documentation on <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code>.</p>
<p class="subhead1"><a id="SQLRF54011"></a>Index Partitioning Clauses <a id="sthref4918"></a><a id="sthref4919"></a><a id="sthref4920"></a></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">global_partitioned_index</span></code> clause and the <code dir="ltr"><span class="codeinlineitalic">local_partitioned_index</span></code> clauses to partition <code dir="ltr"><span class="codeinlineitalic">index</span></code>.</p>
<p>The storage of partitioned database entities in tablespaces of different block sizes is subject to several restrictions. Refer to <a class="olink VLDBG00306" href="../VLDBG/GUID-24050391-B7C5-4AE2-86D4-B5438412C3F6.htm#VLDBG00306"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for a discussion of these restrictions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2129599">&#34;Partitioned Index Examples&#34;</a></div>
<p class="subhead2"><a id="i2150212"></a><a id="SQLRF54012"></a><span class="italic">global_partitioned_index</span> <a id="sthref4921"></a><a id="sthref4922"></a><a id="sthref4923"></a><a id="sthref4924"></a><a id="sthref4925"></a><a id="sthref4926"></a></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">global_partitioned_index</span></code> clause lets you specify that the partitioning of the index is user defined and is not equipartitioned with the underlying table. By default, nonpartitioned indexes are global indexes.</p>
<p>You can partition a global index by range or by hash. In both cases, you can specify up to 32 columns as partitioning key columns. The partitioning column list must specify a left prefix of the index column list. If the index is defined on columns <code dir="ltr">a</code>, <code dir="ltr">b</code>, and <code dir="ltr">c</code>, then for the columns you can specify <code dir="ltr">(a</code>, <code dir="ltr">b</code>, <code dir="ltr">c)</code>, or (<code dir="ltr">a</code>, <code dir="ltr">b)</code>, or (<code dir="ltr">a</code>, <code dir="ltr">c)</code>, but you cannot specify (<code dir="ltr">b</code>, <code dir="ltr">c)</code> or <code dir="ltr">(c)</code> or (<code dir="ltr">b</code>, <code dir="ltr">a</code>). If you omit the partition names, then Oracle Database assigns names of the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
<p><a id="SQLRF54013"></a><span class="subhead3">GLOBAL PARTITION BY RANGE&nbsp;</span>Use this clause to create a range-partitioned global index. Oracle Database will partition the global index on the ranges of values from the table columns you specify in the column list.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2105538">&#34;Creating a Range-Partitioned Global Index: Example&#34;</a></div>
<p><a id="SQLRF54014"></a><span class="subhead3">GLOBAL PARTITION BY HASH&nbsp;</span>Use this clause to create a hash-partitioned global index. Oracle Database assigns rows to the partitions using a hash function on values in the partitioning key columns.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> clause <a href="statements_7002.htm#BABIHJGG"><span class="xreftitleitalic"><span class="italic">hash_partitions</span></span></a> for information on the two methods of hash partitioning and <a href="#i2169259">&#34;Creating a Hash-Partitioned Global Index: Example&#34;</a></div>
<p><a id="SQLRF54015"></a><span class="subhead3">Restrictions on Global Partitioned Indexes&nbsp;</span>Global partitioned indexes are subject to the following restrictions:</p>
<ul>
<li>
<p>The partitioning key column list cannot contain the <code dir="ltr">ROWID</code> pseudocolumn or a column of type <code dir="ltr">ROWID</code>.</p>
</li>
<li>
<p>The only property you can specify for hash partitions is tablespace storage. Therefore, you cannot specify LOB or varray storage clauses in the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code> of <code dir="ltr"><span class="codeinlineitalic">individual_hash_partitions</span></code>.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr">OVERFLOW</code> clause of <code dir="ltr"><span class="codeinlineitalic">hash_partitions_by_quantity</span></code>, as that clause is valid only for index-organized table partitions.</p>
</li>
<li>
<p>In the <code dir="ltr"><span class="codeinlineitalic">partitioning_storage_clause</span></code>, you cannot specify <code dir="ltr"><span class="codeinlineitalic">table_compression</span></code> or the <code dir="ltr"><span class="codeinlineitalic">inmemory_clause</span></code>, but you can specify <code dir="ltr"><span class="codeinlineitalic">index_compression</span></code>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your enterprise has or will have databases using different character sets, then use caution when partitioning on character columns. The sort sequence of characters is not identical in all character sets.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG014" href="../NLSPG/applocaledata.htm#NLSPG014"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information on character set support</div>
<p><a id="SQLRF54016"></a><span class="subhead3"><span class="italic">index_partitioning_clause</span><a id="sthref4927"></a>&nbsp;</span>Use this clause to describe the individual index partitions. The number of repetitions of this clause determines the number of partitions. If you omit <code dir="ltr"><span class="codeinlineitalic">partition</span></code>, then Oracle Database generates a name with the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
<p><a id="sthref4928"></a>For <code dir="ltr">VALUES</code> <code dir="ltr">LESS</code> <code dir="ltr">THAN</code> (<code dir="ltr"><span class="codeinlineitalic">value_list</span></code>), specify the noninclusive upper bound for the current partition in a global index. The value list is a comma-delimited, ordered list of literal values corresponding to the column list in the <code dir="ltr"><span class="codeinlineitalic">global_partitioned_index</span></code> clause. Always specify <code dir="ltr">MAXVALUE</code> as the value of the last partition.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the index is partitioned on a <code dir="ltr">DATE</code> column, and if the date format does not specify the first two digits of the year, then you must use the <code dir="ltr">TO_DATE</code> function with a 4-character format mask for the year. The date format is determined implicitly by <code dir="ltr">NLS_TERRITORY</code> or explicitly by <code dir="ltr">NLS_DATE_FORMAT</code>. Refer to <a class="olink NLSPG003" href="../NLSPG/ch3globenv.htm#NLSPG003"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information on these initialization parameters.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_7002.htm#i2093664">&#34;Range Partitioning Example&#34;</a></div>
<p class="subhead2"><a id="i2135151"></a><a id="SQLRF54017"></a><span class="italic">local_partitioned_index <a id="sthref4929"></a><a id="sthref4930"></a><a id="sthref4931"></a><a id="sthref4932"></a><a id="sthref4933"></a><a id="sthref4934"></a><a id="sthref4935"></a></span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">local_partitioned_index</span></code> clauses let you specify that the index is partitioned on the same columns, with the same number of partitions and the same partition bounds as <code dir="ltr"><span class="codeinlineitalic">table</span></code>. For composite-partitioned tables, this clause lets you specify that the index is subpartitioned on the same columns, with the same number of subpartitions and the same subpartition bounds as <code dir="ltr"><span class="codeinlineitalic">table</span></code>. Oracle Database automatically maintains local index partitioning as the underlying table is repartitioned.</p>
<p>If you specify only the keyword <code dir="ltr">LOCAL</code> and do not specify a subclause, then Oracle Database creates each index partition in the same tablespace as its corresponding table partition and assigns it the same name as its corresponding table partition. If <code dir="ltr"><span class="codeinlineitalic">table</span></code> is a composite-partitioned table, then Oracle Database creates each index subpartition in the same tablespace as its corresponding table subpartition and assigns it the same name as its corresponding table subpartition.</p>
<p><a id="i2135160"></a><a id="SQLRF54018"></a><span class="subhead3"><span class="italic">on_range_partitioned_table <a id="sthref4936"></a></span>&nbsp;</span>This clause lets you specify the names and attributes of index partitions on a range-partitioned table. If you specify this clause, then the number of <code dir="ltr">PARTITION</code> clauses must be equal to the number of table partitions, and in the same order. If you omit <code dir="ltr"><span class="codeinlineitalic">partition</span></code>, then Oracle Database generates a name that is consistent with the corresponding table partition. If the name conflicts with an existing index partition name, then the database uses the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
<p>You cannot specify prefix compression for an index partition unless you have specified prefix compression for the index.</p>
<p>For more information on the <code dir="ltr">USABLE</code> and <code dir="ltr">UNUSABLE</code> clauses, refer to <a href="#BABCHJDH">USABLE | UNUSABLE</a>.</p>
<p><a id="SQLRF54019"></a><span class="subhead3"><span class="italic">on_list_partitioned_table</span>&nbsp;</span>The <code dir="ltr"><span class="codeinlineitalic">on_list_partitioned_table</span></code> clause is identical to <a href="#i2135160"><span class="xreftitleitalic"><span class="italic">on_range_partitioned_table</span></span></a> .</p>
<p><a id="i2135169"></a><a id="SQLRF54020"></a><span class="subhead3"><span class="italic">on_hash_partitioned_table <a id="sthref4937"></a></span>&nbsp;</span>This clause lets you specify names and tablespace storage for index partitions on a hash-partitioned table.</p>
<p>If you specify any <code dir="ltr">PARTITION</code> clauses, then the number of these clauses must be equal to the number of table partitions. If you omit <code dir="ltr"><span class="codeinlineitalic">partition</span></code>, then Oracle Database generates a name that is consistent with the corresponding table partition. If the name conflicts with an existing index partition name, then the database uses the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. You can optionally specify tablespace storage for one or more individual partitions. If you do not specify tablespace storage either here or in the <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause, then the database stores each index partition in the same tablespace as the corresponding table partition.</p>
<p>The <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause lets you specify one or more tablespaces across which Oracle Database will distribute all the index hash partitions. The number of tablespaces need not equal the number of index partitions. If the number of index partitions is greater than the number of tablespaces, then the database cycles through the names of the tablespaces.</p>
<p>For more information on the <code dir="ltr">USABLE</code> and <code dir="ltr">UNUSABLE</code> clauses, refer to <a href="#BABCHJDH">USABLE | UNUSABLE</a>.</p>
<p><a id="i2135178"></a><a id="SQLRF54021"></a><span class="subhead3"><span class="italic">on_comp_partitioned_table <a id="sthref4938"></a></span>&nbsp;</span>This clause lets you specify the name and attributes of index partitions on a composite-partitioned table.</p>
<p>The <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause is valid only for range-hash or list-hash composite-partitioned tables. It lets you specify one or more default tablespaces across which Oracle Database will distribute all index hash subpartitions for all partitions. You can override this storage by specifying different default tablespace storage for the subpartitions of an individual partition in the second <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause in the <code dir="ltr"><span class="codeinlineitalic">index_subpartition_clause</span></code>.</p>
<p>For range-range, range-list, and list-list composite-partitioned tables, you can specify default attributes for the range or list subpartitions in the <code dir="ltr">PARTITION</code> clause. You can override this storage by specifying different attributes for the range or list subpartitions of an individual partition in the <code dir="ltr">SUBPARTITION</code> clause of the <code dir="ltr"><span class="codeinlineitalic">index_subpartition_clause</span></code>.</p>
<p>You cannot specify prefix compression for an index partition unless you have specified prefix compression for the index.</p>
<p>For more information on the <code dir="ltr">USABLE</code> and <code dir="ltr">UNUSABLE</code> clauses, refer to <a href="#BABCHJDH">USABLE | UNUSABLE</a>.</p>
<p><a id="i2146961"></a><a id="SQLRF54022"></a><span class="subhead3"><span class="italic">index_subpartition_clause</span>&nbsp;</span>This clause lets you specify names and tablespace storage for index subpartitions in a composite-partitioned table.</p>
<p>The <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause is valid only for hash subpartitions of a range-hash and list-hash composite-partitioned table. It lets you specify one or more tablespaces across which Oracle Database will distribute all the index hash subpartitions. The <code dir="ltr">SUBPARTITION</code> clause is valid for all subpartition types.</p>
<p>If you specify any <code dir="ltr">SUBPARTITION</code> clauses, then the number of those clauses must be equal to the number of table subpartitions. If you omit <code dir="ltr"><span class="codeinlineitalic">subpartition</span></code>, then the database generates a name that is consistent with the corresponding table subpartition. If the name conflicts with an existing index subpartition name, then the database uses the form <code dir="ltr">SYS_SUBP</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
<p>The number of tablespaces need not equal the number of index subpartitions. If the number of index subpartitions is greater than the number of tablespaces, then the database cycles through the names of the tablespaces.</p>
<p>If you do not specify tablespace storage for subpartitions either in the <code dir="ltr"><span class="codeinlineitalic">on_comp_partitioned_table</span></code> clause or in the <code dir="ltr"><span class="codeinlineitalic">index_subpartition_clause</span></code>, then Oracle Database uses the tablespace specified for <code dir="ltr"><span class="codeinlineitalic">index</span></code>. If you also do not specify tablespace storage for <code dir="ltr"><span class="codeinlineitalic">index</span></code>, then the database stores the subpartition in the same tablespace as the corresponding table subpartition.</p>
<p>For more information on the <code dir="ltr">USABLE</code> and <code dir="ltr">UNUSABLE</code> clauses, refer to <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> ... <a href="#BABCHJDH">USABLE | UNUSABLE</a>.</p>
<p class="subhead2"><a id="i2077100"></a><a id="SQLRF54023"></a><span class="italic">domain_index_clause <a id="sthref4939"></a><a id="sthref4940"></a><a id="sthref4941"></a><a id="sthref4942"></a><a id="sthref4943"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">domain_index_clause</span></code> to indicate that <code dir="ltr"><span class="codeinlineitalic">index</span></code> is a domain index, which is an instance of an application-specific index of type <code dir="ltr"><span class="codeinlineitalic">indextype</span></code>.</p>
<p><a id="sthref4944"></a>Creating a domain index requires a number of preceding operations. You must first create an implementation type for an indextype. You must also create a functional implementation and then create an operator that uses the function. Next you create an indextype, which associates the implementation type with the operator. Finally, you create the domain index using this clause. Refer to <a href="ap_examples.htm#g696338">Appendix F, &#34;Extended Examples&#34;</a>, which contains an example of creating a simple domain index, including all of these operations.</p>
<p><a id="SQLRF54024"></a><span class="subhead3"><span class="italic">index_expr</span>&nbsp;</span>In the <code dir="ltr"><span class="codeinlineitalic">index_expr</span></code> (in <code dir="ltr"><span class="codeinlineitalic">table_index_clause</span></code>), specify the table columns or object attributes on which the index is defined. You can define multiple domain indexes on a single column only if the underlying indextypes are different and the indextypes support a disjoint set of user-defined operators.</p>
<p><a id="SQLRF54026"></a><span class="subhead3">Restrictions on Domain Indexes&nbsp;</span>Domain indexes are subject to the following restrictions:</p>
<ul>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">index_expr</span></code> (in <code dir="ltr"><span class="codeinlineitalic">table_index_clause</span></code>) can specify only a single column, and the column cannot be of data type <code dir="ltr">REF</code>, varray, nested table, <code dir="ltr">LONG</code>, or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>.</p>
</li>
<li>
<p>You cannot create a bitmap or unique domain index.</p>
</li>
<li>
<p>You cannot create a domain index on a temporary table.</p>
</li>
<li>
<p>You can create a local domain index only on a range-, list-, hash-, or interval-partitioned table.</p>
</li>
</ul>
<p><a id="SQLRF54027"></a><span class="subhead3"><span class="italic">indextype</span>&nbsp;</span>For <code dir="ltr"><span class="codeinlineitalic">indextype</span></code>, specify the name of the indextype. This name should be a valid schema object that has already been created.</p>
<p><a id="sthref4945"></a>If you have installed Oracle Text, then you can use various built-in indextypes to create Oracle Text domain indexes. For more information on Oracle Text and the indexes it uses, refer to <a class="olink CCREF0105" href="../CCREF/csql.htm#CCREF0105"><span class="italic">Oracle Text Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_5014.htm#i2089202">CREATE INDEXTYPE</a></div>
<p><a id="BABIEFGJ"></a><a id="SQLRF54028"></a><span class="subhead3"><span class="italic">local_domain_index_clause</span><a id="sthref4946"></a><a id="sthref4947"></a>&nbsp;</span>Use this clause to specify that the index is a local index on a partitioned table.</p>
<ul>
<li>
<p>The <code dir="ltr">PARTITIONS</code> clause lets you specify names for the index partitions. The number of partitions you specify must match the number of partitions in the base table. If you omit this clause, then the database creates the partitions with system-generated names of the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
</li>
<li>
<p>The <code dir="ltr">PARAMETERS</code> clause lets you specify the parameter string specific to an individual partition. If you omit this clause, then the parameter string associated with the index is also associated with the partition.</p>
</li>
</ul>
<p><a id="SQLRF54029"></a><span class="subhead3"><span class="italic">parallel_clause</span> <a id="sthref4948"></a>&nbsp;</span>Use the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> to parallelize creation of the domain index. For a nonpartitioned domain index, Oracle Database passes the explicit or default degree of parallelism to the <code dir="ltr">ODCIIndexCreate</code> cartridge routine, which in turn establishes parallelism for the index. For local domain indexes, this clause causes the index partitions to be created in parallel.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADDCI270" href="../ADDCI/ext_idx_frmwork.htm#ADDCI270"><span class="italic">Oracle Database Data Cartridge Developer&#39;s Guide</span></a> for complete information on the Oracle Data Cartridge Interface (ODCI) routines</div>
<p><a id="SQLRF54030"></a><span class="subhead3">PARAMETERS&nbsp;</span><a id="sthref4949"></a>In the <code dir="ltr">PARAMETERS</code> clause, specify the parameter string that is passed uninterpreted to the appropriate ODCI indextype routine. The maximum length of the parameter string is 1000 characters.</p>
<p>When you specify this clause at the top level of the syntax, the parameters become the default parameters for the index partitions. If you specify this clause as part of the <code dir="ltr"><span class="codeinlineitalic">local_domain_index_clause</span></code>, then you override any default parameters with parameters for the individual partition.</p>
<p>After the domain index is created, Oracle Database invokes the appropriate ODCI routine. If the routine does not return successfully, then the domain index is marked <code dir="ltr">FAILED</code>. The only operations supported on an failed domain index are <code dir="ltr">DROP</code> <code dir="ltr">INDEX</code> and (for non-local indexes) <code dir="ltr">REBUILD</code> <code dir="ltr">INDEX</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADDCI270" href="../ADDCI/ext_idx_frmwork.htm#ADDCI270"><span class="italic">Oracle Database Data Cartridge Developer&#39;s Guide</span></a> for information on the Oracle Data Cartridge Interface (ODCI) routines</div>
<p class="subhead1"><a id="BABICDGF"></a><a id="SQLRF54031"></a><span class="italic">XMLIndex_clause</span> <a id="sthref4950"></a></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">XMLIndex_clause</span></code> lets you define an <code dir="ltr">XMLIndex</code> index, typically on a column contain XML data. An <code dir="ltr">XMLIndex</code> index is a type of domain index designed specifically for the domain of XML data.</p>
<p><a id="SQLRF54032"></a><span class="subhead3"><span class="italic">XMLIndex_parameters_clause</span>&nbsp;</span><a id="sthref4951"></a>This clause lets you specify information about the path table and about the secondary indexes corresponding to the components of <code dir="ltr">XMLIndex</code>. This clause also lets you specify information about the structured component of the index. The maximum length of the parameter string is 1000 characters.</p>
<p>When you specify this clause at the top level of the syntax, the parameters become the parameters of the index and the default parameters for the index partitions. If you specify this clause as part of the <code dir="ltr"><span class="codeinlineitalic">local_xmlindex_clause</span></code> clause, then you override any default parameters with parameters for the individual partition.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADXDB0500" href="../ADXDB/xdb_indexing.htm#ADXDB0500"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for the syntax and semantics of the <code dir="ltr"><span class="codeinlineitalic">XMLIndex_parameters_clause</span></code>, as well as detailed information about the use of <code dir="ltr">XMLIndex</code></div>
<p class="subhead1"><a id="i2077608"></a><a id="SQLRF54033"></a><span class="italic">bitmap_join_index_clause <a id="sthref4952"></a><a id="sthref4953"></a></span></p>
<p>Use the <code dir="ltr"><span class="codeinlineitalic">bitmap_join_index_clause</span></code> to define a <span class="bold">bitmap join index</span>. A bitmap join index is defined on a single table. For an index key made up of dimension table columns, it stores the fact table rowids corresponding to that key. In a data warehousing environment, the table on which the index is defined is commonly referred to as a <span class="bold">fact table</span>, and the tables with which this table is joined are commonly referred to as <span class="bold">dimension tables</span>. However, a star schema is not a requirement for creating a join index.</p>
<p><a id="SQLRF54034"></a><span class="subhead3">ON&nbsp;</span>In the <code dir="ltr">ON</code> clause, first specify the fact table, and then inside the parentheses specify the columns of the dimension tables on which the index is defined.</p>
<p><a id="SQLRF54035"></a><span class="subhead3">FROM&nbsp;</span>In the <code dir="ltr">FROM</code> clause, specify the joined tables.</p>
<p><a id="SQLRF54036"></a><span class="subhead3">WHERE&nbsp;</span>In the <code dir="ltr">WHERE</code> clause, specify the join condition.</p>
<p>If the underlying fact table is partitioned, then you must also specify one of the <code dir="ltr"><span class="codeinlineitalic">local_partitioned_index</span></code> clauses (see <a href="#i2135151"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span></span></a> ).</p>
<p><a id="SQLRF54037"></a><span class="subhead3">Restrictions on Bitmap Join Indexes&nbsp;</span>In addition to the restrictions on bitmap indexes in general (see <a href="#i2077580">BITMAP</a>), the following restrictions apply to bitmap join indexes:</p>
<ul>
<li>
<p>You cannot create a bitmap join index on a temporary table.</p>
</li>
<li>
<p>No table may appear twice in the <code dir="ltr">FROM</code> clause.</p>
</li>
<li>
<p>You cannot create a function-based join index.</p>
</li>
<li>
<p>The dimension table columns must be either primary key columns or have unique constraints.</p>
</li>
<li>
<p>If a dimension table has a composite primary key, then each column in the primary key must be part of the join.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">local_partitioned_index</span></code> clause unless the fact table is partitioned.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Data Warehousing Guide</span> for information on fact and <a class="olink DWHSG010" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG010">dimension tables</a> and on using <a class="olink DWHSG9041" href="../DWHSG/schemas.htm#DWHSG9041">bitmap indexes</a> in a data warehousing environment</div>
<p class="subhead1"><a id="BABCHJDH"></a><a id="SQLRF54038"></a>USABLE | UNUSABLE <a id="sthref4954"></a></p>
<p>You can specify the <code dir="ltr">USABLE</code> and <code dir="ltr">UNUSABLE</code> keywords:</p>
<ul>
<li>
<p>For an index, in the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement</p>
</li>
<li>
<p>For an index partition, in the <code dir="ltr"><span class="codeinlineitalic">on_range_partitioned_table</span></code>, <code dir="ltr"><span class="codeinlineitalic">on_list_partitioned_table</span></code>, <code dir="ltr"><span class="codeinlineitalic">on_hash_partitioned_table</span></code>, and <code dir="ltr"><span class="codeinlineitalic">on_comp_partitioned_table</span></code> clauses</p>
</li>
<li>
<p>For an index subpartition, in the <code dir="ltr"><span class="codeinlineitalic">index_subpartition_clause</span></code></p>
</li>
</ul>
<p>For nonpartitioned indexes, specify <code dir="ltr">UNUSABLE</code> to create an index in an unusable state. An unusable index must be rebuilt, or dropped and re-created, before it can be used. Specify <code dir="ltr">USABLE</code> to create an index in a usable state. <code dir="ltr">USABLE</code> is the default.</p>
<p>For partitioned indexes, specify <code dir="ltr">USABLE</code> or <code dir="ltr">UNUSABLE</code> as follows:</p>
<ul>
<li>
<p>If you specify <code dir="ltr">UNUSABLE</code> for the index, then all index partitions are marked <code dir="ltr">UNUSABLE</code>.</p>
</li>
<li>
<p>If you specify <code dir="ltr">USABLE</code> for the index, then all index partitions are marked <code dir="ltr">USABLE</code>.</p>
</li>
<li>
<p>If you do not specify <code dir="ltr">USABLE</code> or <code dir="ltr">UNUSABLE</code> for the index, then all index partitions are marked <code dir="ltr">USABLE</code>. The exception is a local partial index. If you specify the <code dir="ltr">LOCAL</code> and <code dir="ltr">INDEXING</code> <code dir="ltr">PARTIAL</code> clauses, and do not specify <code dir="ltr">USABLE</code> or <code dir="ltr">UNUSABLE</code>, then each index partition is marked <code dir="ltr">USABLE</code> if the indexing property of its corresponding table partition is <code dir="ltr">ON</code>, or <code dir="ltr">UNUSABLE</code> if the indexing property of its corresponding table partition is <code dir="ltr">OFF</code>.</p>
</li>
</ul>
<p>You can override the preceding conditions by specifying <code dir="ltr">USABLE</code> or <code dir="ltr">UNUSABLE</code> for a specific index partition.</p>
<p>If the underlying table is a composite-partitioned table, then the preceding conditions for index partitions and table partitions apply instead to index subpartitions and table subpartitions.</p>
<p>After you create a partitioned index, you can choose to rebuild specific index partitions or subpartitions to make them <code dir="ltr">USABLE</code>. Doing so can be useful if you want to maintain indexes only on some index partitions or subpartitions&mdash;for example, if you want to enable index access for new partitions but not for old partitions.</p>
<p>When an index, or some partitions or subpartitions of an index, are created <code dir="ltr">UNUSABLE</code>, no segment is allocated for the unusable object. The unusable index or index partition consumes no space in the database.</p>
<p>If an index, or some partitions or subpartitions of the index, are marked <code dir="ltr">UNUSABLE</code>, then the index will be considered as an access path by the optimizer only under the following circumstances: the optimizer must know at compile time which partitions are to be accessed, and all of those partitions to be accessed must be marked <code dir="ltr">USABLE</code>. Therefore, the query cannot contain any bind variables.</p>
<p><a id="SQLRF54039"></a><span class="subhead3">Restrictions on USABLE | UNUSABLE&nbsp;</span>The following restrictions apply when marking an index <code dir="ltr">USABLE</code> or <code dir="ltr">UNUSABLE</code>:</p>
<ul>
<li>
<p>You cannot specify this clause for an index on a temporary table.</p>
</li>
<li>
<p>Unusable indexes or index partitions will still have a segment under the following conditions:</p>
<ul>
<li>
<p>The index (or index partition) is owned by <code dir="ltr">SYS</code>, <code dir="ltr">SYSTEM</code>, <code dir="ltr">PUBLIC</code>, <code dir="ltr">OUTLN</code>, or <code dir="ltr">XDB</code></p>
</li>
<li>
<p>The index (or index partition) is stored in dictionary-managed tablespaces</p>
</li>
<li>
<p>The global partitioned or nonpartitioned index on a partitioned table becomes unusable due to a partition maintenance operation</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2077034"></a>Examples <a id="sthref4955"></a></p>
<p class="subhead2"><a id="i2099437"></a><a id="SQLRF54040"></a>General Index Examples</p>
<p><a id="i2105550"></a><a id="SQLRF54041"></a><span class="subhead3">Creating an Index: Example&nbsp;</span>The following statement shows how the sample index <code dir="ltr">ord_customer_ix</code> on the <code dir="ltr">customer_id</code> column of the sample table <code dir="ltr">oe.orders</code> was created:</p>
<pre dir="ltr">CREATE INDEX ord_customer_ix
   ON orders (customer_id);
</pre>
<p><a id="i2129467"></a><a id="SQLRF54042"></a><span class="subhead3">Compressing an Index: Example&nbsp;</span>To create the <code dir="ltr">ord_customer_ix_demo</code> index with the <code dir="ltr">COMPRESS</code> clause, you might issue the following statement:</p>
<pre dir="ltr">CREATE INDEX ord_customer_ix_demo 
   ON orders (customer_id, sales_rep_id)
   COMPRESS 1;
</pre>
<p>The index will compress repeated occurrences of <code dir="ltr">customer_id</code> column values.</p>
<p><a id="i2129491"></a><a id="SQLRF54043"></a><span class="subhead3">Creating an Index in NOLOGGING Mode: Example&nbsp;</span>If the sample table <code dir="ltr">orders</code> had been created using a fast parallel load (so all rows were already sorted), then you could issue the following statement to quickly create an index.</p>
<pre dir="ltr">/* Unless you first sort the table oe.orders, this example fails
   because you cannot specify NOSORT unless the base table is
   already sorted.
*/
CREATE INDEX ord_customer_ix_demo
   ON orders (order_mode)
   NOSORT
   NOLOGGING;
</pre>
<p><a id="i2129513"></a><a id="SQLRF54044"></a><span class="subhead3">Creating a Cluster Index: Example&nbsp;</span>To create an index for the <code dir="ltr">personnel</code> cluster, which was created in <a href="statements_5002.htm#i2105033">&#34;Creating a Cluster: Example&#34;</a>, issue the following statement:</p>
<pre dir="ltr">CREATE INDEX idx_personnel ON CLUSTER personnel; 
</pre>
<p>No index columns are specified, because cluster indexes are automatically built on all the columns of the cluster key. For cluster indexes, all rows are indexed.</p>
<p><a id="i2113966"></a><a id="SQLRF54045"></a><span class="subhead3">Creating an Index on an XMLType Table: Example<a id="sthref4956"></a><a id="sthref4957"></a>&nbsp;</span>The following example creates an index on the area element of the <code dir="ltr">xwarehouses</code> table (created in <a href="statements_7002.htm#i2130736">&#34;XMLType Table Examples&#34;</a>):</p>
<pre dir="ltr">CREATE INDEX area_index ON xwarehouses e 
   (EXTRACTVALUE(VALUE(e),&#39;/Warehouse/Area&#39;));
</pre>
<p>Such an index would greatly improve the performance of queries that select from the table based on, for example, the square footage of a warehouse, as shown in this statement:</p>
<pre dir="ltr">SELECT e.getClobVal() AS warehouse
   FROM xwarehouses e
   WHERE EXISTSNODE(VALUE(e),&#39;/Warehouse[Area&gt;50000]&#39;) = 1;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="functions065.htm#i1006711">EXISTSNODE</a> and <a href="functions245.htm#i79988">VALUE</a></div>
<p class="subhead2"><a id="i2092987"></a><a id="SQLRF54046"></a>Function-Based Index Examples</p>
<p>The following examples show how to create and use function-based indexes.</p>
<p><a id="i2105548"></a><a id="SQLRF54047"></a><span class="subhead3">Creating a Function-Based Index: Example&nbsp;</span>The following statement creates a function-based index on the <code dir="ltr">employees</code> table based on an uppercase evaluation of the <code dir="ltr">last_name</code> column:</p>
<pre dir="ltr">CREATE INDEX upper_ix ON employees (UPPER(last_name)); 
</pre>
<p>See the <a href="#i2084975">&#34;Prerequisites&#34;</a> for the privileges and parameter settings required when creating function-based indexes.</p>
<p>To increase the likelihood that Oracle Database will use the index rather than performing a full table scan, be sure that the value returned by the function is not null in subsequent queries. For example, this statement will use the index, unless some other condition exists that prevents the optimizer from doing so:</p>
<pre dir="ltr">SELECT first_name, last_name 
   FROM employees WHERE UPPER(last_name) IS NOT NULL
   ORDER BY UPPER(last_name);
</pre>
<p>Without the <code dir="ltr">WHERE</code> clause, Oracle Database may perform a full table scan.</p>
<p>In the next statements showing index creation and subsequent query, Oracle Database will use index <code dir="ltr">income_ix</code> even though the columns are in reverse order in the query:</p>
<pre dir="ltr">CREATE INDEX income_ix 
   ON employees(salary + (salary*commission_pct));

SELECT first_name||&#39; &#39;||last_name &#34;Name&#34;
   FROM employees 
   WHERE (salary*commission_pct) + salary &gt; 15000
   ORDER BY employee_id;
</pre>
<p><a id="i2092927"></a><a id="SQLRF30015"></a><span class="subhead3">Creating a Function-Based Index on a LOB Column: Example&nbsp;</span>The following statement uses the <code dir="ltr">text_length</code> function to create a function-based index on a LOB column in the sample <code dir="ltr">pm</code> schema. See <a class="olink LNPLS01382" href="../LNPLS/create_function.htm#LNPLS01382"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the example that creates this function. The example selects rows from the sample table <code dir="ltr">print_media</code> where that <code dir="ltr">CLOB</code> column has fewer than 1000 characters.</p>
<pre dir="ltr">CREATE INDEX src_idx ON print_media(text_length(ad_sourcetext));

SELECT product_id FROM print_media 
   WHERE text_length(ad_sourcetext) &lt; 1000
   ORDER BY product_id;

PRODUCT_ID
----------
      2056
      2268
      3060
      3106
</pre>
<p><a id="i2063357"></a><a id="SQLRF54048"></a><span class="subhead3">Creating a Function-based Index on a Type Method: Example&nbsp;</span>This example entails an object type <code dir="ltr">rectangle</code> containing two number attributes: <code dir="ltr">length</code> and <code dir="ltr">width</code>. The <code dir="ltr">area()</code> method computes the area of the rectangle.</p>
<pre dir="ltr">CREATE TYPE rectangle AS OBJECT  
( length   NUMBER, 
  width    NUMBER, 
  MEMBER FUNCTION area RETURN NUMBER DETERMINISTIC 
); 
 
CREATE OR REPLACE TYPE BODY rectangle AS 
  MEMBER FUNCTION area RETURN NUMBER IS 
  <span class="italic">BEGIN </span>
<span class="italic">   RETURN (length*width); </span>
<span class="italic">  END; </span>
END; 
</pre>
<p>Now, if you create a table <code dir="ltr">rect_tab</code> of type <code dir="ltr">rectangle</code>, you can create a function-based index on the <code dir="ltr">area()</code> method as follows:</p>
<pre dir="ltr">CREATE TABLE rect_tab OF rectangle; 
CREATE INDEX area_idx ON rect_tab x (x.area()); 
</pre>
<p>You can use this index efficiently to evaluate a query of the form:</p>
<pre dir="ltr">SELECT * FROM rect_tab x WHERE x.area() &gt; 100; 
</pre>
<p><a id="BGEHDECJ"></a><a id="SQLRF54049"></a><span class="subhead3">Using a Function-based Index to Define Conditional Uniqueness: Example <a id="sthref4958"></a>&nbsp;</span>The following statement creates a unique function-based index on the <code dir="ltr">oe.orders</code> table that prevents a customer from taking advantage of promotion ID 2 (&#34;blowout sale&#34;) more than once:</p>
<pre dir="ltr">CREATE UNIQUE INDEX promo_ix ON orders
   (CASE WHEN promotion_id =2 THEN customer_id ELSE NULL END,
    CASE WHEN promotion_id = 2 THEN promotion_id ELSE NULL END);

INSERT INTO orders (order_id, order_date, customer_id, order_total, promotion_id)
   VALUES (2459, systimestamp, 106, 251, 2);
1 row created.

INSERT INTO orders (order_id, order_date, customer_id, order_total, promotion_id)
   VALUES (2460, systimestamp+1, 106, 110, 2);
insert into orders (order_id, order_date, customer_id, order_total, promotion_id)
*
ERROR at line 1:
ORA-00001: unique constraint (OE.PROMO_IX) violated
</pre>
<p>The objective is to remove from the index any rows where the <code dir="ltr">promotion_id</code> is not equal to 2. Oracle Database does not store in the index any rows where all the keys are <code dir="ltr">NULL</code>. Therefore, in this example, both <code dir="ltr">customer_id</code> and <code dir="ltr">promotion_id</code> are mapped to <code dir="ltr">NULL</code> unless promotion_id is equal to 2. The result is that the index constraint is violated only if promotion_id is equal to 2 for two rows with the same <code dir="ltr">customer_id</code> value.</p>
<p class="subhead2"><a id="i2129599"></a><a id="SQLRF54050"></a>Partitioned Index Examples</p>
<p><a id="i2105538"></a><a id="SQLRF54051"></a><span class="subhead3">Creating a Range-Partitioned Global Index: Example&nbsp;</span>The following statement creates a global prefixed index <code dir="ltr">cost_ix</code> on the sample table <code dir="ltr">sh.sales</code> with three partitions that divide the range of costs into three groups:</p>
<pre dir="ltr">CREATE INDEX cost_ix ON sales (amount_sold)
   GLOBAL PARTITION BY RANGE (amount_sold)
      (PARTITION p1 VALUES LESS THAN (1000),
       PARTITION p2 VALUES LESS THAN (2500),
       PARTITION p3 VALUES LESS THAN (MAXVALUE));
</pre>
<p><a id="i2169259"></a><a id="SQLRF54052"></a><span class="subhead3">Creating a Hash-Partitioned Global Index: Example&nbsp;</span>The following statement creates a hash-partitioned global index <code dir="ltr">cust_last_name_ix</code> on the sample table <code dir="ltr">sh.customers</code> with four partitions:</p>
<pre dir="ltr">CREATE INDEX cust_last_name_ix ON customers (cust_last_name)
  GLOBAL PARTITION BY HASH (cust_last_name)
  PARTITIONS 4;
</pre>
<p><a id="i2105539"></a><a id="SQLRF54053"></a><span class="subhead3">Creating an Index on a Hash-Partitioned Table: Example&nbsp;</span>The following statement creates a local index on the <code dir="ltr">category_id</code> column of the <code dir="ltr">hash_products</code> partitioned table (which was created in <a href="statements_7002.htm#i2118202">&#34;Hash Partitioning Example&#34;</a>). The <code dir="ltr">STORE</code> <code dir="ltr">IN</code> clause immediately following <code dir="ltr">LOCAL</code> indicates that <code dir="ltr">hash_products</code> is hash partitioned. Oracle Database will distribute the hash partitions between the <code dir="ltr">tbs1</code> and <code dir="ltr">tbs2</code> tablespaces:</p>
<pre dir="ltr">CREATE INDEX prod_idx ON hash_products(category_id) LOCAL
   STORE IN (tbs_01, tbs_02);
</pre>
<p>The creator of the index must have quota on the tablespaces specified. See <a href="statements_7003.htm#i2231734">CREATE TABLESPACE</a> for examples that create tablespaces <code dir="ltr">tbs_01</code> and <code dir="ltr">tbs_02</code>.</p>
<p><a id="i2105732"></a><a id="SQLRF54054"></a><span class="subhead3">Creating an Index on a Composite-Partitioned Table: Example&nbsp;</span>The following statement creates a local index on the <code dir="ltr">composite_sales</code> table, which was created in <a href="statements_7002.htm#i2101488">&#34;Composite-Partitioned Table Examples&#34;</a>. The <code dir="ltr">STORAGE</code> clause specifies default storage attributes for the index. However, this default is overridden for the five subpartitions of partitions <code dir="ltr">q3_2000</code> and <code dir="ltr">q4_2000</code>, because separate <code dir="ltr">TABLESPACE</code> storage is specified.</p>
<p>The creator of the index must have quota on the tablespaces specified. See <a href="statements_7003.htm#i2231734">CREATE TABLESPACE</a> for examples that create tablespaces <code dir="ltr">tbs_02</code> and <code dir="ltr">tbs_03</code>.</p>
<pre dir="ltr">CREATE INDEX sales_ix ON composite_sales(time_id, prod_id)
   STORAGE (INITIAL 1M)
   LOCAL
   (PARTITION q1_1998,
    PARTITION q2_1998,
    PARTITION q3_1998,
    PARTITION q4_1998,
    PARTITION q1_1999,
    PARTITION q2_1999,
    PARTITION q3_1999,
    PARTITION q4_1999,
    PARTITION q1_2000,
    PARTITION q2_2000
      (SUBPARTITION pq2001, SUBPARTITION pq2002, 
       SUBPARTITION pq2003, SUBPARTITION pq2004,
       SUBPARTITION pq2005, SUBPARTITION pq2006, 
       SUBPARTITION pq2007, SUBPARTITION pq2008),
    PARTITION q3_2000
      (SUBPARTITION c1 TABLESPACE tbs_02, 
       SUBPARTITION c2 TABLESPACE tbs_02, 
       SUBPARTITION c3 TABLESPACE tbs_02,
       SUBPARTITION c4 TABLESPACE tbs_02,
       SUBPARTITION c5 TABLESPACE tbs_02),
    PARTITION q4_2000
      (SUBPARTITION pq4001 TABLESPACE tbs_03, 
       SUBPARTITION pq4002 TABLESPACE tbs_03,
       SUBPARTITION pq4003 TABLESPACE tbs_03,
       SUBPARTITION pq4004 TABLESPACE tbs_03)
);
</pre>
<p class="subhead2"><a id="i2129648"></a><a id="SQLRF54055"></a>Bitmap Index Examples</p>
<p>The following creates a bitmap index on the table <code dir="ltr">oe.hash_products</code>, which was created in <a href="statements_7002.htm#i2118202">&#34;Hash Partitioning Example&#34;</a>:</p>
<pre dir="ltr">CREATE BITMAP INDEX product_bm_ix 
   ON hash_products(list_price)
   LOCAL(PARTITION ix_p1 TABLESPACE tbs_01,
         PARTITION ix_p2,
         PARTITION ix_p3 TABLESPACE tbs_02,
         PARTITION ix_p4 TABLESPACE tbs_03)
   TABLESPACE tbs_04;
</pre>
<p>Because <code dir="ltr">hash_products</code> is a partitioned table, the bitmap join index must be locally partitioned. In this example, the user must have quota on tablespaces specified. See <a href="statements_7003.htm#i2231734">CREATE TABLESPACE</a> for examples that create tablespaces <code dir="ltr">tbs_01</code>, <code dir="ltr">tbs_02</code>, <code dir="ltr">tbs_03</code>, and <code dir="ltr">tbs_04</code>.</p>
<p>The next series of statements shows how one might create a bitmap join index on a fact table using a join with a dimension table.</p>
<pre dir="ltr">CREATE TABLE hash_products
    ( product_id          NUMBER(6)
    , product_name        VARCHAR2(50)
    , product_description VARCHAR2(2000)
    , category_id         NUMBER(2)
    , weight_class        NUMBER(1)
    , warranty_period     INTERVAL YEAR TO MONTH
    , supplier_id         NUMBER(6)
    , product_status      VARCHAR2(20)
    , list_price          NUMBER(8,2)
    , min_price           NUMBER(8,2)
    , catalog_url         VARCHAR2(50)
    , CONSTRAINT          pk_product_id PRIMARY KEY (product_id)
    , CONSTRAINT          product_status_lov_demo
                          CHECK (product_status in (&#39;orderable&#39;
                                                  ,&#39;planned&#39;
                                                  ,&#39;under development&#39;
                                                  ,&#39;obsolete&#39;)
 ) )
 PARTITION BY HASH (product_id)
 PARTITIONS 5
 STORE IN (example); 
 
CREATE TABLE sales_quota
    ( product_id          NUMBER(6)
    , customer_name       VARCHAR2(50)  
    , order_qty           NUMBER(6)
  ,CONSTRAINT u_product_id UNIQUE(product_id)
 ); 
 
CREATE BITMAP INDEX product_bm_ix
   ON hash_products(list_price)
   FROM hash_products h, sales_quota s
   WHERE h.product_id = s.product_id
   LOCAL(PARTITION ix_p1 TABLESPACE example,
         PARTITION ix_p2,
         PARTITION ix_p3 TABLESPACE example,
         PARTITION ix_p4,
         PARTITION ix_p5 TABLESPACE example)
   TABLESPACE example;
</pre>
<p class="subhead2"><a id="i2129697"></a><a id="SQLRF54056"></a>Indexes on Nested Tables: Example</p>
<p>The sample table <code dir="ltr">pm.print_media</code> contains a nested table column <code dir="ltr">ad_textdocs_ntab</code>, which is stored in storage table <code dir="ltr">textdocs_nestedtab</code>. The following example creates a unique index on storage table <code dir="ltr">textdocs_nestedtab</code>:</p>
<pre dir="ltr">CREATE UNIQUE INDEX nested_tab_ix
      ON textdocs_nestedtab(NESTED_TABLE_ID, document_typ);
</pre>
<p>Including pseudocolumn <code dir="ltr">NESTED_TABLE_ID</code> ensures distinct rows in nested table column <code dir="ltr">ad_textdocs_ntab</code>.</p>
<p class="subhead2"><a id="i2089060"></a><a id="SQLRF54057"></a>Indexing on Substitutable Columns: Examples</p>
<p>You can build an index on attributes of the declared type of a substitutable column. In addition, you can reference the subtype attributes by using the appropriate <code dir="ltr">TREAT</code> function. The following example uses the table <code dir="ltr">books</code>, which is created in <a href="statements_7002.htm#i2090577">&#34;Substitutable Table and Column Examples&#34;</a>. The statement creates an index on the <code dir="ltr">salary</code> attribute of all employee authors in the <code dir="ltr">books</code> table:</p>
<pre dir="ltr">CREATE INDEX salary_i 
   ON books (TREAT(author AS employee_t).salary);
</pre>
<p>The target type in the argument of the <code dir="ltr">TREAT</code> function must be the type that added the attribute being referenced. In the example, the target of <code dir="ltr">TREAT</code> is <code dir="ltr">employee_t</code>, which is the type that added the <code dir="ltr">salary</code> attribute.</p>
<p>If this condition is not satisfied, then Oracle Database interprets the <code dir="ltr">TREAT</code> function as any functional expression and creates the index as a function-based index. For example, the following statement creates a function-based index on the <code dir="ltr">salary</code> attribute of part-time employees, assigning nulls to instances of all other types in the type hierarchy.</p>
<pre dir="ltr">CREATE INDEX salary_func_i ON persons p
   (TREAT(VALUE(p) AS part_time_emp_t).salary);
</pre>
<p>You can also build an index on the type-discriminant column underlying a substitutable column by using the <code dir="ltr">SYS_TYPEID</code> function.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database uses the type-discriminant column to evaluate queries that involve the <code dir="ltr">IS</code> <code dir="ltr">OF</code> <code dir="ltr"><span class="codeinlineitalic">type</span></code> condition. The cardinality of the typeid column is normally low, so Oracle recommends that you build a bitmap index in this situation.</div>
<p>The following statement creates a bitmap index on the typeid of the author column of the books table:</p>
<pre dir="ltr">CREATE BITMAP INDEX typeid_i ON books (SYS_TYPEID(author));
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01383" href="../LNPLS/create_type.htm#LNPLS01383"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to see the creation of the type hierarchy underlying the <code dir="ltr">books</code> table</p>
</li>
<li>
<p>the functions <a href="functions234.htm#i1018806">TREAT</a> and <a href="functions204.htm#i1044156">SYS_TYPEID</a> and the condition <a href="conditions015.htm#i1051274">&#34;IS OF <span class="italic">type</span> Condition&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="statements_5012.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="statements_5014.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>