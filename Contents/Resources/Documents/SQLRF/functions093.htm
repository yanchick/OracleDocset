<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-102175"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/JSON_VALUE"></a><title>JSON_VALUE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:15Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="functions092.htm" title="Previous" type="text/html"/>
<link rel="Next" href="functions094.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">166/555</span> <!-- End Header --><a id="CJAGGCJH"></a>
<div id="SQLRF56668" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h1 class="refsect1">JSON_VALUE<a id="sthref1541"></a><a id="sthref1542"></a></h1>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">JSON_VALUE</code> function is available starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2).</div>
<p class="subhead1"><a id="SQLRF56669"></a>Syntax</p>
<img width="550" height="123" src="img/json_value.gif" alt="Description of json_value.gif follows"/><br/>
<a id="sthref1543" href="img_text/json_value.htm">Description of the illustration &#39;&#39;json_value.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAIIDIE"></a><a id="SQLRF56696"></a><a href="#CJAJDGGJ"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span></span></a>::=</p>
<img width="244" height="91" src="img/json_path_expression.gif" alt="Description of json_path_expression.gif follows"/><br/>
<a id="sthref1544" href="img_text/json_path_expression.htm">Description of the illustration &#39;&#39;json_path_expression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJACBJBG"></a><a id="SQLRF56697"></a><a href="#CJAHGEGE"><span class="xreftitleitalic"><span class="italic">object_step</span></span></a>::=</p>
<img width="244" height="91" src="img/object_step.gif" alt="Description of object_step.gif follows"/><br/>
<a id="sthref1545" href="img_text/object_step.htm">Description of the illustration &#39;&#39;object_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJADFIEC"></a><a id="SQLRF56698"></a><a href="#CJAICBIF"><span class="xreftitleitalic"><span class="italic">array_step</span></span></a>::=</p>
<img width="334" height="123" src="img/array_step.gif" alt="Description of array_step.gif follows"/><br/>
<a id="sthref1546" href="img_text/array_step.htm">Description of the illustration &#39;&#39;array_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJABCEAE"></a><a id="SQLRF56699"></a><a href="#CJABADIE"><span class="xreftitleitalic"><span class="italic">JSON_value_returning_clause</span></span></a>::=</p>
<img width="416" height="37" src="img/json_value_returning_clause.gif" alt="Description of json_value_returning_clause.gif follows"/><br/>
<a id="sthref1547" href="img_text/json_value_returning_clause.htm">Description of the illustration &#39;&#39;json_value_returning_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJABCIJE"></a><a id="SQLRF56992"></a><span class="italic">JSON_value_return_type</span>::=</p>
<img width="432" height="171" src="img/json_value_return_type.gif" alt="Description of json_value_return_type.gif follows"/><br/>
<a id="sthref1548" href="img_text/json_value_return_type.htm">Description of the illustration &#39;&#39;json_value_return_type.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAHCAIE"></a><a id="SQLRF56780"></a><a href="#CJAHDAFG"><span class="xreftitleitalic"><span class="italic">JSON_value_on_error_clause</span></span></a>::=</p>
<img width="291" height="91" src="img/json_value_on_error_clause.gif" alt="Description of json_value_on_error_clause.gif follows"/><br/>
<a id="sthref1549" href="img_text/json_value_on_error_clause.htm">Description of the illustration &#39;&#39;json_value_on_error_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead1"><a id="SQLRF56671"></a>Purpose</p>
<p><code dir="ltr">JSON_VALUE</code> finds a specified scalar JSON value in JSON data and returns it as a SQL value.</p>
<p class="subhead2"><a id="SQLRF56737"></a><span class="italic">expr</span></p>
<p>Use this clause to specify the JSON data to be evaluated. For <code dir="ltr"><span class="codeinlineitalic">expr</span></code>, specify an expression that evaluates to a text literal. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column, then the column must be of data type <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">BLOB</code>. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is null, then the function returns null.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not a text literal of well-formed JSON data using strict or lax syntax, then the function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_value_on_error_clause</span></code> to override this default behavior. Refer to the <a href="#CJAHDAFG"><span class="xreftitleitalic"><span class="italic">JSON_value_on_error_clause</span></span></a>.</p>
<p class="subhead2"><a id="SQLRF57039"></a>FORMAT JSON</p>
<p>You must specify <code dir="ltr">FORMAT</code> <code dir="ltr">JSON</code> if <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column of data type <code dir="ltr">BLOB</code>.</p>
<p class="subhead2"><a id="CJAJDGGJ"></a><a id="SQLRF56738"></a><span class="italic">JSON_path_expression</span></p>
<p>Use this clause to specify a JSON path expression. The function uses the path expression to evaluate <code dir="ltr"><span class="codeinlineitalic">expr</span></code> and find a scalar JSON value that matches, or satisfies, the path expression. The path expression must be a text literal.</p>
<p>The path expression must begin with a dollar sign (<code dir="ltr">$</code>), which represents the context item, that is, the expression specified by <code dir="ltr"><span class="codeinlineitalic">expr</span></code>. The dollar sign is followed by zero or more steps, each of which can be an object step or an array step.</p>
<p>The function attempts to match the first step in the path expression to the context item. If the first step results in a match, then the function attempts to match the second step to the JSON value(s) that matched the first step. If the second step results in a match, then the function attempts to match the third step to the JSON value(s) that matched the second step, and so on. If the final step matches a scalar JSON value, then the function returns that value as a SQL value. A path expression that consists of a dollar sign followed by zero steps (<code dir="ltr">&#39;$&#39;</code>) matches the entire context item.</p>
<p>You can specify the <code dir="ltr"><span class="codeinlineitalic">JSON_value_returning_clause</span></code> to control the data type and format of the returned SQL value. Refer to the <a href="#CJABADIE"><span class="xreftitleitalic"><span class="italic">JSON_value_returning_clause</span></span></a>.</p>
<p>If any step in the path expression does not result in a match, or if the final step matches a nonscalar value, then the function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_value_on_error_clause</span></code> to override this default behavior. Refer to the <a href="#CJAHDAFG"><span class="xreftitleitalic"><span class="italic">JSON_value_on_error_clause</span></span></a>.</p>
<p><a id="CJAHGEGE"></a><a id="SQLRF56739"></a><span class="subhead3"><span class="italic">object_step</span>&nbsp;</span>Use this clause to specify an object step.</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> or <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> to specify a property name. If a member with that property name exists in the JSON object being evaluated, then the object step results in a match to the property value of that member. Otherwise, the object step does not result in a match. Both types of names are case-sensitive. Therefore, a match will result only if the alphabetic character cases match in the object step and the JSON data.</p>
<p>A <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> can contain only alphanumeric characters and must begin with an alphabetic character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> can contain only alphanumeric characters and spaces, and must begin with an alphanumeric character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> must be enclosed in double quotation marks.</p>
</li>
<li>
<p>Use the asterisk wildcard symbol (<code dir="ltr">*</code>) to specify all property names. If the JSON object being evaluated contains at least one member, then the object step results in a match to the values of all members. Otherwise, the object step does not result in a match.</p>
</li>
</ul>
<p>If you apply an object step to a JSON array, then the array is implicitly unwrapped and the elements of the array are evaluated using the object step. This is called JSON path expression relaxation. Refer to <a class="olink ADXDB6373" href="../ADXDB/json.htm#ADXDB6373"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information.</p>
<p>If the JSON value being evaluated is not a JSON object, then the object step does not result in a match.</p>
<p><a id="CJAICBIF"></a><a id="SQLRF56740"></a><span class="subhead3"><span class="italic">array_step</span>&nbsp;</span>Use this clause to specify an array step.</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the element at index <code dir="ltr"><span class="codeinlineitalic">integer</span></code> in a JSON array. Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the range of elements between the two index <code dir="ltr"><span class="codeinlineitalic">integer</span></code> values, inclusive. If the specified elements exist in the JSON array being evaluated, then the array step results in a match to those elements. Otherwise, the array step does not result in a match. The first element in a JSON array has index 0.</p>
</li>
<li>
<p>Use the asterisk wildcard symbol (<code dir="ltr">*</code>) to specify all elements in a JSON array. If the JSON array being evaluated contains at least one element, then the array step results in a match to all elements in the JSON array. Otherwise, the array step does not result in a match.</p>
</li>
</ul>
<p>If the JSON data being evaluated is not a JSON array, then the data is implicitly wrapped in an array and then evaluated using the array step. This is called JSON path expression relaxation. Refer to <a class="olink ADXDB6373" href="../ADXDB/json.htm#ADXDB6373"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information.</p>
<p class="subhead2"><a id="CJABADIE"></a><a id="SQLRF56707"></a><span class="italic">JSON_value_returning_clause</span></p>
<p>Use this clause to specify the data type and format of the value returned by this function.</p>
<p><a id="SQLRF56741"></a><span class="subhead3">RETURNING&nbsp;</span>Use the <code dir="ltr">RETURNING</code> clause to specify the data type of the return value. If you omit this clause, then <code dir="ltr">JSON_VALUE</code> returns a value of type <code dir="ltr">VARCHAR2(4000)</code>.</p>
<p>You can use <code dir="ltr"><span class="codeinlineitalic">JSON_value_return_type</span></code> to specify the following data types:</p>
<ul>
<li>
<p><code dir="ltr">VARCHAR2[(</code><code dir="ltr"><span class="codeinlineitalic">size</span></code> <code dir="ltr">[BYTE,CHAR])]</code></p>
<p>If you specify this data type, then the scalar value returned by this function can be a character or number value. A number value will be implicitly converted to a <code dir="ltr">VARCHAR2</code>. When specifying the <code dir="ltr">VARCHAR2</code> data type elsewhere in SQL, you are required to specify a size. However, in this clause you can omit the size. In this case, <code dir="ltr">JSON_VALUE</code> returns a value of type <code dir="ltr">VARCHAR2(4000)</code>.</p>
<p>Refer to <a href="sql_elements001.htm#i45694">&#34;VARCHAR2 Data Type&#34;</a> for more information.</p>
</li>
<li>
<p><code dir="ltr">NUMBER[(</code><code dir="ltr"><span class="codeinlineitalic">precision</span></code> <code dir="ltr">[,</code> <code dir="ltr"><span class="codeinlineitalic">scale</span></code><code dir="ltr">])]</code></p>
<p>If you specify this data type, then the scalar value returned by this function must be a number value.</p>
<p>Refer to <a href="sql_elements001.htm#CHDHDHGB">&#34;NUMBER Data Type&#34;</a> for more information.</p>
</li>
</ul>
<p>If the data type is not large enough to hold the return value, then this function returns null by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_value_on_error_clause</span></code> to override this default behavior. Refer to the <a href="#CJAHDAFG"><span class="xreftitleitalic"><span class="italic">JSON_value_on_error_clause</span></span></a>.</p>
<p><a id="SQLRF56742"></a><span class="subhead3">ASCII&nbsp;</span>Specify <code dir="ltr">ASCII</code> to automatically escape any non-ASCII Unicode characters in the return value, using standard ASCII Unicode escape sequences.</p>
<p class="subhead2"><a id="CJAHDAFG"></a><a id="SQLRF56708"></a><span class="italic">JSON_value_on_error_clause</span></p>
<p>Use this clause to specify the value returned by this function when any of the following errors occur:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not well-formed JSON data using strict or lax JSON syntax</p>
</li>
<li>
<p>A nonscalar value or no match is found when the JSON data is evaluated using the JSON path expression</p>
</li>
<li>
<p>The return value data type is not large enough to hold the return value</p>
</li>
</ul>
<p>You can specify the following clauses:</p>
<ul>
<li>
<p><code dir="ltr">NULL</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns null when an error occurs. This is the default.</p>
</li>
<li>
<p><code dir="ltr">ERROR</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns the appropriate Oracle error when an error occurs.</p>
</li>
<li>
<p><code dir="ltr">DEFAULT</code> <code dir="ltr"><span class="codeinlineitalic">literal</span></code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns <code dir="ltr"><span class="codeinlineitalic">literal</span></code> when an error occurs. If the data type of the value returned by this function is <code dir="ltr">VARCHAR2</code>, then you must specify a text literal. If the data type is <code dir="ltr">NUMBER</code>, then you must specify a numeric literal.</p>
</li>
</ul>
<p class="subhead1"><a id="SQLRF56672"></a>Examples</p>
<p>The following query returns the value of the member with property name <code dir="ltr">a</code>. Because the <code dir="ltr">RETURNING</code> clause is not specified, the value is returned as a <code dir="ltr">VARCHAR2(4000)</code> data type:</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;{a:100}&#39;, &#39;$.a&#39;) AS value
  FROM DUAL;

VALUE
-----
100
</pre>
<p>The following query returns the value of the member with property name <code dir="ltr">a</code>. Because the <code dir="ltr">RETURNING</code> <code dir="ltr">NUMBER</code> clause is specified, the value is returned as a <code dir="ltr">NUMBER</code> data type:</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;{a:100}&#39;, &#39;$.a&#39; RETURNING NUMBER) AS value
  FROM DUAL;

     VALUE
----------
       100
</pre>
<p>The following query returns the value of the member with property name <code dir="ltr">b</code>, which is in the value of the member with property name <code dir="ltr">a</code>:</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;{a:{b:100}}&#39;, &#39;$.a.b&#39;) AS value
  FROM DUAL;

VALUE
-----
100
</pre>
<p>The following query returns the value of the member with property name <code dir="ltr">d</code> in any object:</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;{a:{b:100}, c:{d:200}, e:{f:300}}&#39;, &#39;$.*.d&#39;) AS value
  FROM DUAL;

VALUE
-----
200
</pre>
<p>The following query returns the value of the first element in an array:</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;[0, 1, 2, 3]&#39;, &#39;$[0]&#39;) AS value
  FROM DUAL;

VALUE
-----
0
</pre>
<p>The following query returns the value of the third element in an array. The array is the value of the member with property name <code dir="ltr">a</code>.</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;{a:[5, 10, 15, 20]}&#39;, &#39;$.a[2]&#39;) AS value
  FROM DUAL;

VALUE
-----
15
</pre>
<p>The following query returns the value of the member with property name <code dir="ltr">a</code> in the second object in an array:</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;[{a:100}, {a:200}, {a:300}]&#39;, &#39;$[1].a&#39;) AS value
  FROM DUAL;

VALUE
-----
200
</pre>
<p>The following query returns the value of the member with property name <code dir="ltr">c</code> in any object in an array:</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;[{a:100}, {b:200}, {c:300}]&#39;, &#39;$[*].c&#39;) AS value
  FROM DUAL;

VALUE
-----
300
</pre>
<p>The following query attempts to return the value of the member that has property name <code dir="ltr">lastname</code>. However, such a member does not exist in the specified JSON data, resulting in no match. Because the <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> clause is not specified, the statement uses the default <code dir="ltr">NULL</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> and returns null.</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;{firstname:&#34;John&#34;}&#39;, &#39;$.lastname&#39;) AS &#34;Last Name&#34;
  FROM DUAL;

Last Name
---------

</pre>
<p>The following query results in an error because it attempts to return the value of the member with property name <code dir="ltr">lastname</code>, which does not exist in the specified JSON. Because the <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> clause is specified, the statement returns the specified text literal.</p>
<pre dir="ltr">SELECT JSON_VALUE(&#39;{firstname:&#34;John&#34;}&#39;, &#39;$.lastname&#39;
                  DEFAULT &#39;No last name found&#39; ON ERROR) AS &#34;Last Name&#34;
  FROM DUAL;

Last Name
---------
No last name found
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="functions092.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="functions094.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>