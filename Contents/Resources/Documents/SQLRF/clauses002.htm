<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-102041"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/constraint"></a><title>constraint</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:24Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="clauses001.htm" title="Previous" type="text/html"/>
<link rel="Next" href="clauses003.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">348/555</span> <!-- End Header --><a id="i78179"></a>
<div id="SQLRF52180" class="refsect1"><!-- infolevel="all" infotype="General" --><a id="g1053592"></a>
<h1 class="refsect1"><span class="italic">constraint</span></h1>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2227"></a>Purpose</p>
<p><a id="sthref2228"></a><a id="sthref2229"></a>Use a <code dir="ltr"><span class="codeinlineitalic">constraint</span></code> to define an <span class="bold">integrity constraint&mdash;</span>a rule that restricts the values in a database. Oracle Database lets you create six types of constraints and lets you declare them in two ways.</p>
<p>The six types of integrity constraint are described briefly here and more fully in <a href="#i1002038">&#34;Semantics&#34;</a>:</p>
<ul>
<li>
<p>A <code dir="ltr"><span class="codeinlinebold">NOT</span></code> <code dir="ltr"><span class="codeinlinebold">NULL</span></code> <span class="bold">constraint</span> prohibits a database value from being null.</p>
</li>
<li>
<p>A <span class="bold">unique constraint</span> prohibits multiple rows from having the same value in the same column or combination of columns but allows some values to be null.</p>
</li>
<li>
<p>A <span class="bold">primary key constraint</span> combines a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint and a unique constraint in a single declaration. It prohibits multiple rows from having the same value in the same column or combination of columns and prohibits values from being null.</p>
</li>
<li>
<p>A <span class="bold">foreign key constraint</span> requires values in one table to match values in another table.</p>
</li>
<li>
<p>A <span class="bold">check constraint</span> requires a value in the database to comply with a specified condition.</p>
</li>
<li>
<p>A <code dir="ltr">REF</code> column by definition references an object in another object type or in a relational table. A <span class="bold">REF constraint</span> lets you further describe the relationship between the <code dir="ltr">REF</code> column and the object it references.</p>
</li>
</ul>
<p>You can define constraints syntactically in two ways:</p>
<ul>
<li>
<p>As part of the definition of an individual column or attribute. This is called <span class="bold">inline</span> specification.</p>
</li>
<li>
<p>As part of the table definition. This is called <span class="bold">out-of-line</span> specification.</p>
</li>
</ul>
<p><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints must be declared inline. All other constraints can be declared either inline or out of line.</p>
<p>Constraint clauses can appear in the following statements:</p>
<ul>
<li>
<p><code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> (see <a href="statements_7002.htm#i2095331">CREATE TABLE</a><code dir="ltr">)</code></p>
</li>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> (see <a href="statements_3001.htm#CJAHHIBI">ALTER TABLE</a>)</p>
</li>
<li>
<p><code dir="ltr">CREATE</code> <code dir="ltr">VIEW</code> (see <a href="statements_8004.htm#i2065510">CREATE VIEW</a><code dir="ltr">)</code></p>
</li>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">VIEW</code> (see <a href="statements_4004.htm#i2058392">ALTER VIEW</a><code dir="ltr">)</code></p>
</li>
</ul>
<p><a id="SQLRF52181"></a><span class="subhead3">View Constraints&nbsp;</span>Oracle Database does not enforce view constraints. However, you can enforce constraints on views through constraints on base tables.</p>
<p>You can specify only unique, primary key, and foreign key constraints on views, and they are supported only in <code dir="ltr">DISABLE</code> <code dir="ltr">NOVALIDATE</code> mode. You cannot define view constraints on attributes of an object column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1002565">&#34;View Constraints&#34;</a> for additional information on view constraints and <a href="#i1002349">&#34;DISABLE Clause&#34;</a> for information on <code dir="ltr">DISABLE</code> <code dir="ltr">NOVALIDATE</code> mode</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2230"></a>Prerequisites</p>
<p>You must have the privileges necessary to issue the statement in which you are defining the constraint.</p>
<p>To create a foreign key constraint, in addition, the parent table or view must be in your own schema or you must have the <code dir="ltr">REFERENCES</code> privilege on the columns of the referenced key in the parent table or view.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2231"></a>Syntax</p>
<p class="subhead2"><a id="CJAEDFIB"></a><a id="SQLRF52182"></a><span class="italic">constraint</span>::=</p>
<img width="206" height="123" src="img/constraint.gif" alt="Description of constraint.gif follows"/><br/>
<a id="sthref2232" href="img_text/constraint.htm">Description of the illustration &#39;&#39;constraint.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAGIICD"><span class="xreftitleitalic"><span class="italic">inline_constraint</span>::=</span></a>, <a href="#CJADJGEC"><span class="xreftitleitalic"><span class="italic">out_of_line_constraint</span>::=</span></a>, <a href="#CJAHIEIJ"><span class="xreftitleitalic"><span class="italic">inline_ref_constraint</span>::=</span></a>, <a href="#CJABCJJF"><span class="xreftitleitalic"><span class="italic">out_of_line_ref_constraint</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJAGIICD"></a><a id="SQLRF52183"></a><span class="italic">inline_constraint</span>::=</p>
<img width="657" height="175" src="img/inline_constraint.gif" alt="Description of inline_constraint.gif follows"/><br/>
<a id="sthref2233" href="img_text/inline_constraint.htm">Description of the illustration &#39;&#39;inline_constraint.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAIHHGC"><span class="xreftitleitalic"><span class="italic">references_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJADJGEC"></a><a id="SQLRF52184"></a><span class="italic">out_of_line_constraint</span>::=</p>
<img width="859" height="220" src="img/out_of_line_constraint.gif" alt="Description of out_of_line_constraint.gif follows"/><br/>
<a id="sthref2234" href="img_text/out_of_line_constraint.htm">Description of the illustration &#39;&#39;out_of_line_constraint.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAIHHGC"><span class="xreftitleitalic"><span class="italic">references_clause</span>::=</span></a>, <a href="#CJAFFBAA"><span class="xreftitleitalic"><span class="italic">constraint_state</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJAHIEIJ"></a><a id="SQLRF52185"></a><span class="italic">inline_ref_constraint</span>::=</p>
<img width="579" height="131" src="img/inline_ref_constraint.gif" alt="Description of inline_ref_constraint.gif follows"/><br/>
<a id="sthref2235" href="img_text/inline_ref_constraint.htm">Description of the illustration &#39;&#39;inline_ref_constraint.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAIHHGC"><span class="xreftitleitalic"><span class="italic">references_clause</span>::=</span></a>, <a href="#CJAFFBAA"><span class="xreftitleitalic"><span class="italic">constraint_state</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJABCJJF"></a><a id="SQLRF52186"></a><span class="italic">out_of_line_ref_constraint</span>::=</p>
<img width="890" height="256" src="img/out_of_line_ref_constraint.gif" alt="Description of out_of_line_ref_constraint.gif follows"/><br/>
<a id="sthref2236" href="img_text/out_of_line_ref_constraint.htm">Description of the illustration &#39;&#39;out_of_line_ref_constraint.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAIHHGC"><span class="xreftitleitalic"><span class="italic">references_clause</span>::=</span></a>, <a href="#CJAFFBAA"><span class="xreftitleitalic"><span class="italic">constraint_state</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJAIHHGC"></a><a id="SQLRF52187"></a><a href="#i1002156"><span class="xreftitleitalic"><span class="italic">references_clause</span></span></a>::=</p>
<img width="815" height="79" src="img/references_clause.gif" alt="Description of references_clause.gif follows"/><br/>
<a id="sthref2237" href="img_text/references_clause.htm">Description of the illustration &#39;&#39;references_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="CJAFFBAA"></a><a id="SQLRF52188"></a><a href="#i1002273"><span class="xreftitleitalic"><span class="italic">constraint_state</span></span></a>::=</p>
<img width="281" height="379" src="img/constraint_state.gif" alt="Description of constraint_state.gif follows"/><br/>
<a id="sthref2238" href="img_text/constraint_state.htm">Description of the illustration &#39;&#39;constraint_state.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#CJAGEBIG"><span class="xreftitleitalic"><span class="italic">using_index_clause</span>::=</span></a>, <a href="#CJAEHIDE"><span class="xreftitleitalic"><span class="italic">exceptions_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJAGEBIG"></a><a id="SQLRF52189"></a><a href="#i1002419"><span class="xreftitleitalic"><span class="italic">using_index_clause</span></span></a>::=</p>
<img width="379" height="110" src="img/using_index_clause.gif" alt="Description of using_index_clause.gif follows"/><br/>
<a id="sthref2239" href="img_text/using_index_clause.htm">Description of the illustration &#39;&#39;using_index_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="statements_5013.htm#i2125762"><span class="xreftitleitalic"><span class="italic">create_index</span>::=</span></a>, <a href="#CJAIEIDI"><span class="xreftitleitalic"><span class="italic">index_properties</span>::=</span></a>)</p>
<p class="subhead2"><a id="CJAIEIDI"></a><a id="SQLRF52190"></a><span class="italic">index_properties</span>::=</p>
<img width="392" height="178" src="img/index_properties.gif" alt="Description of index_properties.gif follows"/><br/>
<a id="sthref2240" href="img_text/index_properties.htm">Description of the illustration &#39;&#39;index_properties.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="statements_5013.htm#i2126415"><span class="xreftitleitalic"><span class="italic">global_partitioned_index</span>::=</span></a>, <a href="statements_5013.htm#i2125897"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span> ::=</span></a>--part of <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code>, <a href="#CJAFHDJI"><span class="xreftitleitalic"><span class="italic">index_attributes</span>::=</span></a>. The <code dir="ltr">INDEXTYPE</code> <code dir="ltr">IS</code> ... clause is not valid when defining a constraint.)</p>
<p class="subhead2"><a id="CJAFHDJI"></a><a id="SQLRF52191"></a><span class="italic">index_attributes</span>::=</p>
<img width="341" height="435" src="img/index_attributes.gif" alt="Description of index_attributes.gif follows"/><br/>
<a id="sthref2241" href="img_text/index_attributes.htm">Description of the illustration &#39;&#39;index_attributes.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="statements_5002.htm#i2127411"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span>::=</span></a>, <a href="clauses005.htm#CJAHABGF"><span class="xreftitleitalic"><span class="italic">logging_clause</span>::=</span></a>, <a href="statements_5013.htm#i2127535"><span class="xreftitleitalic"><span class="italic">index_compression</span>::=</span></a>, <a href="statements_5013.htm#BGEJJFGA"><span class="xreftitleitalic"><span class="italic"><span class="italic">partial_index_clause</span></span>::=</span></a>--all part of <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code>, <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code>: not supported in <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code>)</p>
<p class="subhead2"><a id="CJAEHIDE"></a><a id="SQLRF52192"></a><a href="#i1002527"><span class="xreftitleitalic"><span class="italic">exceptions_clause</span></span></a>::=</p>
<img width="364" height="46" src="img/exceptions_clause.gif" alt="Description of exceptions_clause.gif follows"/><br/>
<a id="sthref2242" href="img_text/exceptions_clause.htm">Description of the illustration &#39;&#39;exceptions_clause.gif&#39;&#39;</a><br/>
<br/></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1002038"></a>Semantics</p>
<p>This section describes the semantics of <code dir="ltr"><span class="codeinlineitalic">constraint</span></code>. For additional information, refer to the SQL statement in which you define or redefine a constraint for a table or view.</p>
<p>Oracle Database does not support constraints on columns or attributes whose type is a user-defined object, nested table, <code dir="ltr">VARRAY</code>, <code dir="ltr">REF</code>, or LOB, with two exceptions:</p>
<ul>
<li>
<p><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints are supported for a column or attribute whose type is user-defined object, <code dir="ltr">VARRAY</code>, <code dir="ltr">REF</code>, or LOB.</p>
</li>
<li>
<p><code dir="ltr">NOT</code> <code dir="ltr">NULL</code>, foreign key, and <code dir="ltr">REF</code> constraints are supported on a column of type <code dir="ltr">REF</code>.</p>
</li>
</ul>
<p><a id="SQLRF52193"></a><span class="subhead3">CONSTRAINT <span class="italic">constraint_name</span> <a id="sthref2243"></a>&nbsp;</span>Specify a name for the constraint. If you omit this identifier, then Oracle Database generates a name with the form <code dir="ltr">SYS_C</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. Oracle stores the name and the definition of the integrity constraint in the <code dir="ltr">USER_</code>, <code dir="ltr">ALL_</code>, and <code dir="ltr">DBA_CONSTRAINTS</code> data dictionary views (in the <code dir="ltr">CONSTRAINT_NAME</code> and <code dir="ltr">SEARCH_CONDITION</code> columns, respectively).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN002" href="../REFRN/GUID-8865F65B-EF6D-44A5-B0A1-3179EFF0C36A.htm#REFRN002"><span class="italic">Oracle Database Reference</span></a> for information on the data dictionary views</div>
<p class="subhead1"><a id="SQLRF30038"></a>NOT NULL Constraints</p>
<p>A <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint prohibits a column from containing nulls. The <code dir="ltr">NULL</code> keyword by itself does not actually define an integrity constraint, but you can specify it to explicitly permit a column to contain nulls. You must define <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> and <code dir="ltr">NULL</code> using inline specification. If you specify neither <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> nor <code dir="ltr">NULL</code>, then the default is <code dir="ltr">NULL</code>.</p>
<p><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints are the only constraints you can specify inline on <code dir="ltr">XMLType</code> and <code dir="ltr">VARRAY</code> columns.</p>
<p>To satisfy a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, every row in the table must contain a value for the column.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database does not index table rows in which all key columns are null except in the case of bitmap indexes. Therefore, if you want an index on all rows of a table, then you must either specify <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints for at least one of the index key columns or create a bitmap index.</div>
</div>
<!-- class="refsubsect" -->
<p><a id="SQLRF52194"></a><span class="subhead3">Restrictions on NOT NULL Constraints&nbsp;</span><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify <code dir="ltr">NULL</code> or <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> in a view constraint.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">NULL</code> or <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> for an attribute of an object. Instead, use a <code dir="ltr">CHECK</code> constraint with the <code dir="ltr">IS</code> [<code dir="ltr">NOT</code>] <code dir="ltr">NULL</code> condition.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1002779">&#34;Attribute-Level Constraints Example&#34;</a> and <a href="#i1015640">&#34;NOT NULL Example&#34;</a></div>
<p class="subhead1"><a id="i1034458"></a><a id="SQLRF52195"></a>Unique Constraints</p>
<p>A <span class="bold">unique</span> constraint designates a column as a unique key. A <span class="bold">composite unique key</span> designates a combination of columns as the unique key. When you define a unique constraint inline, you need only the <code dir="ltr">UNIQUE</code> keyword. When you define a unique constraint out of line, you must also specify one or more columns. You must define a composite unique key out of line.</p>
<p>To satisfy a unique constraint, no two rows in the table can have the same value for the unique key. However, the unique key made up of a single column can contain nulls. To satisfy a composite unique key, no two rows in the table or view can have the same combination of values in the key columns. Any row that contains nulls in all key columns automatically satisfies the constraint. However, two rows that contain nulls for one or more key columns and the same combination of values for the other key columns violate the constraint.</p>
<p>When you specify a unique constraint on one or more columns, Oracle implicitly creates an index on the unique key. If you are defining uniqueness for purposes of query performance, then Oracle recommends that you instead create the unique index explicitly using a <code dir="ltr">CREATE</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">INDEX</code> statement. You can also use the <code dir="ltr">CREATE</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">INDEX</code> statement to create a unique function-based index that defines a conditional unique constraint. See <a href="statements_5013.htm#BGEHDECJ">&#34;Using a Function-based Index to Define Conditional Uniqueness: Example&#34;</a> for more information.</p>
<p>When you specify an enabled unique constraint on an extended data type column, you may receive a &#34;maximum key length exceeded&#34; error when Oracle tries to create the index to enforce uniqueness for the enabled constraint. See <a href="statements_5013.htm#BGECBJDG">&#34;Creating an Index on an Extended Data Type Column&#34;</a> for information on how to work around this issue.</p>
<p><a id="SQLRF52196"></a><span class="subhead3">Restrictions on Unique Constraints&nbsp;</span>Unique constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>None of the columns in the unique key can be of LOB, <code dir="ltr">LONG</code>, <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, <code dir="ltr">VARRAY</code>, <code dir="ltr">NESTED</code> <code dir="ltr">TABLE</code>, <code dir="ltr">OBJECT</code>, <code dir="ltr">REF</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE,</code> or user-defined type. However, the unique key can contain a column of <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>.</p>
</li>
<li>
<p>A composite unique key cannot have more than 32 columns.</p>
</li>
<li>
<p>You cannot designate the same column or combination of columns as both a primary key and a unique key.</p>
</li>
<li>
<p>You cannot specify a unique key when creating a subview in an inheritance hierarchy. The unique key can be specified only for the top-level (root) view.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015609">&#34;Unique Key Example&#34;</a> and <a href="#i1015598">Composite Unique Key Example</a></div>
<p class="subhead1"><a id="CJACHGAB"></a><a id="SQLRF52197"></a>Primary Key Constraints <a id="sthref2244"></a><a id="sthref2245"></a><a id="sthref2246"></a><a id="sthref2247"></a><a id="sthref2248"></a></p>
<p>A <span class="bold">primary key</span> constraint designates a column as the primary key of a table or view. A <span class="bold">composite primary key</span> designates a combination of columns as the primary key. When you define a primary key constraint inline, you need only the <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> keywords. When you define a primary key constraint out of line, you must also specify one or more columns. You must define a composite primary key out of line.</p>
<p>To satisfy a primary key constraint:</p>
<ul>
<li>
<p>No primary key value can appear in more than one row in the table.</p>
</li>
<li>
<p>No column that is part of the primary key can contain a null.</p>
</li>
</ul>
<p>When you create a primary key constraint:</p>
<ul>
<li>
<p>Oracle Database uses an existing index if it contains a unique set of values before enforcing the primary key constraint. The existing index can be defined as unique or nonunique. When a DML operation is performed, the primary key constraint is enforced using this existing index.</p>
</li>
<li>
<p>If no existing index can be used, then Oracle Database generates a unique index.</p>
</li>
</ul>
<p>When you drop a primary key constraint:</p>
<ul>
<li>
<p>If the primary key was created using an existing index, then the index is not dropped.</p>
</li>
<li>
<p>If the primary key was created using a system-generated index, then the index is dropped.</p>
</li>
</ul>
<p>When you designate an extended data type column as an enabled primary key, you may receive a &#34;maximum key length exceeded&#34; error when Oracle tries to create the index to enforce uniqueness for the enabled constraint. See <a href="statements_5013.htm#BGECBJDG">&#34;Creating an Index on an Extended Data Type Column&#34;</a> for information on how to work around this issue.</p>
<p><a id="SQLRF52198"></a><span class="subhead3">Restrictions on Primary Key Constraints&nbsp;</span>Primary constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>A table or view can have only one primary key.</p>
</li>
<li>
<p>None of the columns in the primary key can be LOB, <code dir="ltr">LONG</code>, <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, <code dir="ltr">VARRAY</code>, <code dir="ltr">NESTED</code> <code dir="ltr">TABLE</code>, <code dir="ltr">BFILE</code>, <code dir="ltr">REF</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>, or user-defined type. However, the primary key can contain a column of <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>.</p>
</li>
<li>
<p>The size of the primary key cannot exceed approximately one database block.</p>
</li>
<li>
<p>A composite primary key cannot have more than 32 columns.</p>
</li>
<li>
<p>You cannot designate the same column or combination of columns as both a primary key and a unique key.</p>
</li>
<li>
<p>You cannot specify a primary key when creating a subview in an inheritance hierarchy. The primary key can be specified only for the top-level (root) view.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1002629">&#34;Primary Key Example&#34;</a> and <a href="#i1015668">&#34;Composite Primary Key Example&#34;</a></div>
<p class="subhead1"><a id="i1002118"></a><a id="SQLRF52199"></a>Foreign Key Constraints<a id="sthref2249"></a><a id="sthref2250"></a><a id="sthref2251"></a><a id="sthref2252"></a><a id="sthref2253"></a></p>
<p>A <span class="bold">foreign key constraint</span> (also called a <span class="bold">referential integrity constraint</span>) designates a column as the foreign key and establishes a relationship between that foreign key and a specified primary or unique key, called the <span class="bold">referenced key</span>. A <span class="bold">composite foreign key</span> designates a combination of columns as the foreign key.</p>
<p>The table or view containing the foreign key is called the <span class="bold">child</span> object, and the table or view containing the referenced key is called the <span class="bold">parent</span> object. The foreign key and the referenced key can be in the same table or view. In this case, the parent and child tables are the same. If you identify only the parent table or view and omit the column name, then the foreign key automatically references the primary key of the parent table or view. The corresponding column or columns of the foreign key and the referenced key must match in order and data type.</p>
<p>You can define a foreign key constraint on a single key column either inline or out of line. You must specify a composite foreign key and a foreign key on an attribute out of line.</p>
<p>To satisfy a composite foreign key constraint, the composite foreign key must refer to a composite unique key or a composite primary key in the parent table or view, or the value of at least one of the columns of the foreign key must be null.</p>
<p>You can designate the same column or combination of columns as both a foreign key and a primary or unique key. You can also designate the same column or combination of columns as both a foreign key and a cluster key.</p>
<p>You can define multiple foreign keys in a table or view. Also, a single column can be part of more than one foreign key.</p>
<p><a id="SQLRF52200"></a><span class="subhead3">Restrictions on Foreign Key Constraints&nbsp;</span>Foreign key constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>None of the columns in the foreign key can be of LOB, <code dir="ltr">LONG</code>, <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, <code dir="ltr">VARRAY</code>, <code dir="ltr">NESTED</code> <code dir="ltr">TABLE</code>, <code dir="ltr">BFILE</code>, <code dir="ltr">REF</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>, or user-defined type. However, the primary key can contain a column of <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>.</p>
</li>
<li>
<p>The referenced unique or primary key constraint on the parent table or view must already be defined.</p>
</li>
<li>
<p>A composite foreign key cannot have more than 32 columns.</p>
</li>
<li>
<p>The child and parent tables must be on the same database. To enable referential integrity constraints across nodes of a distributed database, you must use database triggers. See <a href="statements_7004.htm#i2235611">CREATE TRIGGER</a>.</p>
</li>
<li>
<p>If either the child or parent object is a view, then the constraint is subject to all restrictions on view constraints. See <a href="#i1002565">&#34;View Constraints&#34;</a>.</p>
</li>
<li>
<p>You cannot define a foreign key constraint in a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement that contains an <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause. Instead, you must create the table without the constraint and then add it later with an <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
</li>
<li>
<p>When a table has a foreign key, and the parent of the foreign key is an index-organized table, a session that updates a row that contains the foreign key can hang when another session is updating a non-key column in the parent table.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS004" href="../ADFNS/adfns_constraints.htm#ADFNS004"><span class="italic">Oracle Database Development Guide</span></a> for more information on using constraints</p>
</li>
<li>
<p><a href="#i1036780">&#34;Foreign Key Constraint Example&#34;</a> and <a href="#i1015710">&#34;Composite Foreign Key Constraint Example&#34;</a></p>
</li>
</ul>
</div>
<p><a id="i1002156"></a><a id="SQLRF52201"></a><span class="subhead3"><span class="italic">references_clause</span>&nbsp;</span>Foreign key constraints use the <code dir="ltr"><span class="codeinlineitalic">references_clause</span></code> syntax. When you specify a foreign key constraint inline, you need only the <code dir="ltr"><span class="codeinlineitalic">references_clause</span></code>. When you specify a foreign key constraint out of line, you must also specify the <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> keywords and one or more columns.</p>
<p><a id="SQLRF52202"></a><span class="subhead3">ON DELETE Clause<a id="sthref2254"></a><a id="sthref2255"></a>&nbsp;</span>The <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> clause lets you determine how Oracle Database automatically maintains referential integrity if you remove a referenced primary or unique key value. If you omit this clause, then Oracle does not allow you to delete referenced key values in the parent table that have dependent rows in the child table.</p>
<ul>
<li>
<p>Specify <code dir="ltr">CASCADE</code> if you want Oracle to remove dependent foreign key values.</p>
</li>
<li>
<p>Specify <code dir="ltr">SET</code> <code dir="ltr">NULL</code> if you want Oracle to convert dependent foreign key values to <code dir="ltr">NULL</code>. You cannot specify this clause for a virtual column, because the values in a virtual column cannot be updated directly. Rather, the values from which the virtual column are derived must be updated.</p>
</li>
</ul>
<p><a id="SQLRF52203"></a><span class="subhead3">Restriction on ON DELETE&nbsp;</span>You cannot specify this clause for a view constraint.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015699">&#34;ON DELETE Example&#34;</a></div>
<p class="subhead1"><a id="SQLRF52204"></a>Check Constraints<a id="sthref2256"></a><a id="sthref2257"></a><a id="sthref2258"></a><a id="sthref2259"></a></p>
<p>A <span class="bold">check constraint</span> lets you specify a condition that each row in the table must satisfy. To satisfy the constraint, each row in the table must make the condition either <code dir="ltr">TRUE</code> or unknown (due to a null). When Oracle evaluates a check constraint condition for a particular row, any column names in the condition refer to the column values in that row.</p>
<p>The syntax for inline and out-of-line specification of check constraints is the same. However, inline specification can refer only to the column (or the attributes of the column if it is an object column) currently being defined, whereas out-of-line specification can refer to multiple columns or attributes.</p>
<p>Oracle does not verify that conditions of check constraints are not mutually exclusive. Therefore, if you create multiple check constraints for a column, design them carefully so their purposes do not conflict. Do not assume any particular order of evaluation of the conditions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="conditions.htm#g1077361">Chapter 6, &#34;Conditions&#34;</a> for additional information and syntax</p>
</li>
<li>
<p><a href="#i1002719">&#34;Check Constraint Examples&#34;</a> and <a href="#i1002779">&#34;Attribute-Level Constraints Example&#34;</a></p>
</li>
</ul>
</div>
<p><a id="SQLRF52205"></a><span class="subhead3">Restrictions on Check Constraints&nbsp;</span>Check constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot specify a check constraint for a view. However, you can define the view using the <code dir="ltr">WITH</code> <code dir="ltr">CHECK</code> <code dir="ltr">OPTION</code> clause, which is equivalent to specifying a check constraint for the view.</p>
</li>
<li>
<p>The condition of a check constraint can refer to any column in the table, but it cannot refer to columns of other tables.</p>
</li>
<li>
<p>Conditions of check constraints cannot contain the following constructs:</p>
<ul>
<li>
<p>Subqueries and scalar subquery expressions</p>
</li>
<li>
<p>Calls to the functions that are not deterministic (<code dir="ltr">CURRENT_DATE</code>, <code dir="ltr">CURRENT_TIMESTAMP</code>, <code dir="ltr">DBTIMEZONE</code>, <code dir="ltr">LOCALTIMESTAMP</code>, <code dir="ltr">SESSIONTIMEZONE</code>, <code dir="ltr">SYSDATE</code>, <code dir="ltr">SYSTIMESTAMP</code>, <code dir="ltr">UID</code>, <code dir="ltr">USER</code>, and <code dir="ltr">USERENV</code>)</p>
</li>
<li>
<p>Calls to user-defined functions</p>
</li>
<li>
<p>Dereferencing of <code dir="ltr">REF</code> columns (for example, using the <code dir="ltr">DEREF</code> function)</p>
</li>
<li>
<p>Nested table columns or attributes</p>
</li>
<li>
<p>The pseudocolumns <code dir="ltr">CURRVAL</code>, <code dir="ltr">NEXTVAL</code>, <code dir="ltr">LEVEL</code>, or <code dir="ltr">ROWNUM</code></p>
</li>
<li>
<p>Date constants that are not fully specified</p>
</li>
</ul>
</li>
</ul>
<p class="subhead1"><a id="SQLRF52206"></a>REF Constraints <a id="sthref2260"></a><a id="sthref2261"></a><a id="sthref2262"></a><a id="sthref2263"></a><a id="sthref2264"></a><a id="sthref2265"></a></p>
<p><code dir="ltr">REF</code> constraints let you describe the relationship between a column of type <code dir="ltr">REF</code> and the object it references.</p>
<p><a id="SQLRF52207"></a><span class="subhead3"><span class="italic">ref_constraint</span>&nbsp;</span><code dir="ltr">REF</code> constraints use the <code dir="ltr"><span class="codeinlineitalic">ref_constraint</span></code> syntax. You define a <code dir="ltr">REF</code> constraint either inline or out of line. Out-of-line specification requires you to specify the <code dir="ltr">REF</code> column or attribute you are further describing.</p>
<ul>
<li>
<p>For <code dir="ltr"><span class="codeinlineitalic">ref_column</span></code>, specify the name of a <code dir="ltr">REF</code> column of an object or relational table.</p>
</li>
<li>
<p>For <code dir="ltr"><span class="codeinlineitalic">ref_attribute</span></code>, specify an embedded <code dir="ltr">REF</code> attribute within an object column of a relational table.</p>
</li>
</ul>
<p>Both inline and out-of-line specification let you define a scope constraint, a rowid constraint, or a referential integrity constraint on a <code dir="ltr">REF</code> column.</p>
<p>If the scope table or referenced table of the <code dir="ltr">REF</code> column has a primary-key-based object identifier, then the <code dir="ltr">REF</code> column is a <span class="bold">user-defined</span> <code dir="ltr"><span class="codeinlinebold">REF</span></code> <span class="bold">column</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADOBJ00805" href="../ADOBJ/adobjdes.htm#ADOBJ00805"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information on <code dir="ltr">REF</code> data types</p>
</li>
<li>
<p><a href="#i1002118">&#34;Foreign Key Constraints&#34;</a>, and <a href="#i1015744">&#34;REF Constraint Examples&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="i1002226"></a><a id="SQLRF52208"></a>SCOPE REF Constraints</p>
<p>In a table with a <code dir="ltr">REF</code> column, each <code dir="ltr">REF</code> value in the column can conceivably reference a row in a different object table. The <code dir="ltr">SCOPE</code> clause restricts the scope of references to a single table, <code dir="ltr"><span class="codeinlineitalic">scope_table</span></code>. The values in the <code dir="ltr">REF</code> column or attribute point to objects in <code dir="ltr"><span class="codeinlineitalic">scope_table</span></code>, in which object instances of the same type as the <code dir="ltr">REF</code> column are stored.</p>
<p>Specify the <code dir="ltr">SCOPE</code> clause to restrict the scope of references in the <code dir="ltr">REF</code> column to a single table. For you to specify this clause, <code dir="ltr"><span class="codeinlineitalic">scope_table</span></code> must be in your own schema, or you must have the <code dir="ltr">READ</code> or <code dir="ltr">SELECT</code> privilege on <code dir="ltr"><span class="codeinlineitalic">scope_table</span></code>, or you must have the <code dir="ltr">READ</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> or <code dir="ltr">SELECT</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> system privilege. You can specify only one scope table for each <code dir="ltr">REF</code> column.</p>
<p><a id="SQLRF52209"></a><span class="subhead3">Restrictions on Scope Constraints&nbsp;</span>Scope constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot add a scope constraint to an existing column unless the table is empty.</p>
</li>
<li>
<p>You cannot specify a scope constraint for the <code dir="ltr">REF</code> elements of a <code dir="ltr">VARRAY</code> column.</p>
</li>
<li>
<p>You must specify this clause if you specify <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> and the subquery returns user-defined <code dir="ltr">REF</code> data types.</p>
</li>
<li>
<p>You cannot subsequently drop a scope constraint from a <code dir="ltr">REF</code> column.</p>
</li>
</ul>
<p class="subhead2"><a id="SQLRF52210"></a>Rowid REF Constraints <a id="sthref2266"></a></p>
<p>Specify <code dir="ltr">WITH</code> <code dir="ltr">ROWID</code> to store the rowid along with the <code dir="ltr">REF</code> value in <code dir="ltr"><span class="codeinlineitalic">ref_column</span></code> or <code dir="ltr"><span class="codeinlineitalic">ref_attribute</span></code>. Storing the rowid with the <code dir="ltr">REF</code> value can improve the performance of dereferencing operations, but will also use more space. Default storage of <code dir="ltr">REF</code> values is without rowids.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The function <a href="functions062.htm#i1152051">DEREF</a> for an example of dereferencing</div>
<p><a id="SQLRF52211"></a><span class="subhead3">Restrictions on Rowid Constraints&nbsp;</span>Rowid constraints are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot define a rowid constraint for the <code dir="ltr">REF</code> elements of a <code dir="ltr">VARRAY</code> column.</p>
</li>
<li>
<p>You cannot subsequently drop a rowid constraint from a <code dir="ltr">REF</code> column.</p>
</li>
<li>
<p>If the <code dir="ltr">REF</code> column or attribute is scoped, then this clause is ignored and the rowid is not stored with the <code dir="ltr">REF</code> value.</p>
</li>
</ul>
<p class="subhead2"><a id="SQLRF52212"></a>Referential Integrity Constraints on REF Columns</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">references_clause</span></code> of the <code dir="ltr"><span class="codeinlineitalic">ref_constraint</span></code> syntax lets you define a foreign key constraint on the <code dir="ltr">REF</code> column. This clause also implicitly restricts the scope of the <code dir="ltr">REF</code> column or attribute to the referenced table. However, whereas a foreign key constraint on a non-<code dir="ltr">REF</code> column references an actual column in the parent table, a foreign key constraint on a <code dir="ltr">REF</code> column references the implicit object identifier column of the parent table.</p>
<p>If you do not specify <code dir="ltr">a</code> constraint name, then Oracle generates a system name for the constraint of the form <code dir="ltr">SYS_C</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
<p>If you add a referential integrity constraint to an existing <code dir="ltr">REF</code> column that is already scoped, then the referenced table must be the same as the scope table of the <code dir="ltr">REF</code> column. If you later drop the referential integrity constraint, then the <code dir="ltr">REF</code> column will remain scoped to the referenced table.</p>
<p>As is the case for foreign key constraints on other types of columns, you can use the <code dir="ltr"><span class="codeinlineitalic">references_clause</span></code> alone for inline declaration. For out-of-line declaration you must also specify the <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> keywords plus one or more <code dir="ltr">REF</code> columns or attributes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ002" href="../ADOBJ/adobjbas.htm#ADOBJ002"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information on object identifiers</div>
<p><a id="SQLRF52213"></a><span class="subhead3">Restrictions on Foreign Key Constraints on REF Columns&nbsp;</span>Foreign key constraints on <code dir="ltr">REF</code> columns have the following additional restrictions:</p>
<ul>
<li>
<p>Oracle implicitly adds a scope constraint when you add a referential integrity constraint to an existing unscoped <code dir="ltr">REF</code> column. Therefore, all the restrictions that apply for scope constraints also apply in this case.</p>
</li>
<li>
<p>You cannot specify a column after the object name in the <code dir="ltr"><span class="codeinlineitalic">references_clause</span></code>.</p>
</li>
</ul>
<p class="subhead1"><a id="SQLRF52214"></a>Specifying Constraint State</p>
<p>As part of constraint definition, you can specify how and when Oracle should enforce the constraint.</p>
<p><a id="i1002273"></a><a id="SQLRF52215"></a><span class="subhead3"><span class="italic">constraint_state</span>&nbsp;</span>You can use the <code dir="ltr"><span class="codeinlineitalic">constraint_state</span></code> with both inline and out-of-line specification. Specify the clauses of <code dir="ltr"><span class="codeinlineitalic">constraint_state</span></code> in the order shown, from top to bottom, and do not specify any clause more than once.</p>
<p><a id="SQLRF52216"></a><span class="subhead3">DEFERRABLE Cla<a id="sthref2267"></a><a id="sthref2268"></a>use<a id="sthref2269"></a><a id="sthref2270"></a><a id="sthref2271"></a>&nbsp;</span>The <code dir="ltr">DEFERRABLE</code> and <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> parameters indicate whether or not, in subsequent transactions, constraint checking can be deferred until the end of the transaction using the <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINT</code>(<code dir="ltr">S</code>) statement. If you omit this clause, then the default is <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code>.</p>
<ul>
<li>
<p>Specify <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> to indicate that in subsequent transactions you cannot use the <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINT</code>[<code dir="ltr">S</code>] clause to defer checking of this constraint until the transaction is committed. The checking of a <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> constraint can never be deferred to the end of the transaction.</p>
<p>If you declare a new constraint <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code>, then it must be valid at the time the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement is committed or the statement will fail.</p>
</li>
<li>
<p>Specify <code dir="ltr">DEFERRABLE</code> to indicate that in subsequent transactions you can use the <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINT</code>[<code dir="ltr">S</code>] clause to defer checking of this constraint until a <code dir="ltr">COMMIT</code> statement is submitted. If the constraint check fails, then the database returns an error and the transaction is not committed. This setting in effect lets you disable the constraint temporarily while making changes to the database that might violate the constraint until all the changes are complete.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The optimizer does not consider indexes on deferrable constraints as usable.</div>
</li>
</ul>
<p>You cannot alter the deferrability of a constraint. Whether you specify either of these parameters, or make the constraint <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> implicitly by specifying neither of them, you cannot specify this clause in an <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement. You must drop the constraint and re-create it.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="statements_10003.htm#i2066960">SET CONSTRAINT[S]</a> for information on setting constraint checking for a transaction</p>
</li>
<li>
<p><a class="olink ADMIN021" href="../ADMIN/general.htm#ADMIN021"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> and <a class="olink CNCPT021" href="../CNCPT/datainte.htm#CNCPT021"><span class="italic">Oracle Database Concepts</span></a> for more information about deferred constraints</p>
</li>
<li>
<p><a href="#i1015767">&#34;DEFERRABLE Constraint Examples&#34;</a></p>
</li>
</ul>
</div>
<p><a id="SQLRF52217"></a><span class="subhead3">Restriction on [NOT] DEFERRABLE&nbsp;</span>You cannot specify either of these parameters for a view constraint.</p>
<p><a id="SQLRF52218"></a><span class="subhead3">INITIALLY Clause&nbsp;</span>The <code dir="ltr">INITIALLY</code> clause establishes the default checking behavior for constraints that are <code dir="ltr">DEFERRABLE</code>. The <code dir="ltr">INITIALLY</code> setting can be overridden by a <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINT</code>(<code dir="ltr">S</code>) statement in a subsequent transaction.</p>
<ul>
<li>
<p><span class="bold"><a id="sthref2272"></a><a id="sthref2273"></a></span>Specify <code dir="ltr">INITIALLY</code> <code dir="ltr">IMMEDIATE</code> to indicate that Oracle should check this constraint at the end of each subsequent SQL statement. If you do not specify <code dir="ltr">INITIALLY</code> at all, then the default is <code dir="ltr">INITIALLY</code> <code dir="ltr">IMMEDIATE</code>.</p>
<p>If you declare a new constraint <code dir="ltr">INITIALLY</code> <code dir="ltr">IMMEDIATE</code>, then it must be valid at the time the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement is committed or the statement will fail.</p>
</li>
<li>
<p><span class="bold"><a id="sthref2274"></a></span>Specify <code dir="ltr">INITIALLY</code> <code dir="ltr">DEFERRED</code> to indicate that Oracle should check this constraint at the end of subsequent transactions.</p>
</li>
</ul>
<p>This clause is not valid if you have declared the constraint to be <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code>, because a <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> constraint is automatically <code dir="ltr">INITIALLY</code> <code dir="ltr">IMMEDIATE</code> and cannot ever be <code dir="ltr">INITIALLY</code> <code dir="ltr">DEFERRED</code>.</p>
<p><a id="SQLRF52219"></a><span class="subhead3">VALIDATE | NOVALIDATE&nbsp;</span>The behavior of <code dir="ltr">VALIDATE</code> and <code dir="ltr">NOVALIDATE</code> depends on whether the constraint is enabled or disabled, either explicitly or by default. Therefore, the <code dir="ltr">VALIDATE</code> and <code dir="ltr">NOVALIDATE</code> keywords are described in the context of <a href="#i1010237">&#34;ENABLE Clause&#34;</a> and <a href="#i1002349">&#34;DISABLE Clause&#34;</a>.</p>
<p><a id="SQLRF57046"></a><span class="subhead3">Note on Foreign Key Constraints in NOVALIDATE Mode&nbsp;</span>When a foreign key constraint is in <code dir="ltr">NOVALIDATE</code> mode, if existing data in the table does not comply with the constraint and the <code dir="ltr">QUERY_REWRITE_INTEGRITY</code> parameter is not set to <code dir="ltr">ENFORCED</code>, then the optimizer may use join elimination during queries on the table. In this case, a query may return table rows with noncompliant foreign key values even if the query contains a join condition that should filter out those rows.</p>
<p><a id="i1010237"></a><a id="SQLRF52220"></a><span class="subhead3">ENABLE Clause&nbsp;</span>Specify <code dir="ltr">ENABLE</code> if you want the constraint to be applied to the data in the table.</p>
<p>If you enable a unique or primary key constraint, and if no index exists on the key, then Oracle Database creates a unique index. Unless you specify <code dir="ltr">KEEP INDEX</code> when subsequently disabling the constraint, this index is dropped and the database rebuilds the index every time the constraint is reenabled.</p>
<p>You can also avoid rebuilding the index and eliminate redundant indexes by creating new primary key and unique constraints initially disabled. Then create (or use existing) nonunique indexes to enforce the constraint. Oracle does not drop a nonunique index when the constraint is disabled, so subsequent <code dir="ltr">ENABLE</code> operations are facilitated.</p>
<ul>
<li>
<p><span class="bold"><a id="sthref2275"></a></span><code dir="ltr">ENABLE</code> <code dir="ltr">VALIDATE</code> specifies that all old and new data also complies with the constraint. An enabled validated constraint guarantees that all data is and will continue to be valid.</p>
<p>If any row in the table violates the integrity constraint, then the constraint remains disabled and Oracle returns an error. If all rows comply with the constraint, then Oracle enables the constraint. Subsequently, if new data violates the constraint, then Oracle does not execute the statement and returns an error indicating the integrity constraint violation.</p>
<p>If you place a primary key constraint in <code dir="ltr">ENABLE</code> <code dir="ltr">VALIDATE</code> mode, then the validation process will verify that the primary key columns contain no nulls. To avoid this overhead, mark each column in the primary key <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> before entering data into the column and before enabling the primary key constraint of the table.</p>
</li>
<li>
<p><span class="bold"><a id="sthref2276"></a></span><code dir="ltr">ENABLE</code> <code dir="ltr">NOVALIDATE</code> ensures that all new DML operations on the constrained data comply with the constraint. This clause does not ensure that existing data in the table complies with the constraint.</p>
</li>
</ul>
<p>If you specify neither <code dir="ltr">VALIDATE</code> nor <code dir="ltr">NOVALIDATE</code>, then the default is <code dir="ltr">VALIDATE</code>.</p>
<p>If you change the state of any single constraint from <code dir="ltr">ENABLE</code> <code dir="ltr">NOVALIDATE</code> to <code dir="ltr">ENABLE</code> <code dir="ltr">VALIDATE</code>, then the operation can be performed in parallel, and does not block reads, writes, or other DDL operations.</p>
<p><a id="SQLRF52221"></a><span class="subhead3">Restriction on the ENABLE Clause&nbsp;</span>You cannot enable a foreign key that references a disabled unique or primary key.</p>
<p><a id="i1002349"></a><a id="SQLRF52222"></a><span class="subhead3">DISABLE Clause&nbsp;</span>Specify <code dir="ltr">DISABLE</code> to disable the integrity constraint. Disabled integrity constraints appear in the data dictionary along with enabled constraints. If you do not specify this clause when creating a constraint, then Oracle automatically enables the constraint.</p>
<ul>
<li>
<p><code dir="ltr"><a id="sthref2277"></a>DISABLE</code> <code dir="ltr">VALIDATE</code> disables the constraint and drops the index on the constraint, but keeps the constraint valid. This feature is most useful in data warehousing situations, because it lets you load large amounts of data while also saving space by not having an index. This setting lets you load data from a nonpartitioned table into a partitioned table using the <code dir="ltr"><span class="codeinlineitalic">exchange_partition_subpart</span></code> clause of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement or using SQL*Loader. All other modifications to the table (inserts, updates, and deletes) by other SQL statements are disallowed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG8151" href="../DWHSG/schemas.htm#DWHSG8151"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for more information on using this setting</div>
</li>
<li>
<p><code dir="ltr"><a id="sthref2278"></a>DISABLE</code> <code dir="ltr">NOVALIDATE</code> signifies that Oracle makes no effort to maintain the constraint (because it is disabled) and cannot guarantee that the constraint is true (because it is not being validated).</p>
<p>You cannot drop a table whose primary key is being referenced by a foreign key even if the foreign key constraint is in <code dir="ltr">DISABLE</code> <code dir="ltr">NOVALIDATE</code> state. Further, the optimizer can use constraints in <code dir="ltr">DISABLE</code> <code dir="ltr">NOVALIDATE</code> state.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TGSQL850" href="../TGSQL/tgsql_indc.htm#TGSQL850"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for information on when to use this setting</div>
</li>
</ul>
<p>If you specify neither <code dir="ltr">VALIDATE</code> nor <code dir="ltr">NOVALIDATE</code>, then the default is <code dir="ltr">NOVALIDATE</code>.</p>
<p>If you disable a unique or primary key constraint that is using a unique index, then Oracle drops the unique index. Refer to the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> <a href="statements_7002.htm#i2062565"><span class="xreftitleitalic"><span class="italic">enable_disable_clause</span></span></a> for additional notes and restrictions.</p>
<p><a id="i1002915"></a><a id="SQLRF52223"></a><span class="subhead3">RELY Clause <a id="sthref2279"></a><a id="sthref2280"></a><a id="sthref2281"></a><a id="sthref2282"></a><a id="sthref2283"></a>&nbsp;</span>The <code dir="ltr">RELY</code> and <code dir="ltr">NORELY</code> parameters specify whether a constraint in <code dir="ltr">NOVALIDATE</code> mode is to be taken into account for query rewrite. Specify <code dir="ltr">RELY</code> to activate a constraint in <code dir="ltr">NOVALIDATE</code> mode for query rewrite in an unenforced query rewrite integrity mode. The constraint is in <code dir="ltr">NOVALIDATE</code> mode, so Oracle does not enforce it. The default is <code dir="ltr">NORELY</code>.</p>
<p>Unenforced constraints are generally useful only with materialized views and query rewrite. Depending on the <a class="olink REFRN10177" href="../REFRN/GUID-23655494-DF65-4F0E-A89F-8333222297F5.htm#REFRN10177"><code dir="ltr">QUERY_REWRITE_INTEGRITY</code></a> mode, query rewrite can use only constraints that are in <code dir="ltr">VALIDATE</code> mode, or that are in <code dir="ltr">NOVALIDATE</code> mode with the <code dir="ltr">RELY</code> parameter set, to determine join information.</p>
<p><a id="SQLRF52224"></a><span class="subhead3">Restriction on the RELY Clause&nbsp;</span>You cannot set a nondeferrable <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint to <code dir="ltr">RELY</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG018" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG018"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for more information on materialized views and query rewrite</div>
<p class="subhead2"><a id="i1002914"></a><a id="SQLRF52225"></a>Using Indexes to Enforce Constraints <a id="sthref2284"></a><a id="sthref2285"></a><a id="sthref2286"></a></p>
<p>When defining the state of a unique or primary key constraint, you can specify an index for Oracle to use to enforce the constraint, or you can instruct Oracle to create the index used to enforce the constraint.</p>
<p><a id="i1002419"></a><a id="SQLRF52226"></a><span class="subhead3"><span class="italic">using_index_clause</span>&nbsp;</span>You can specify the <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code> only when enabling unique or primary key constraints. You can specify the clauses of the <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code> in any order, but you can specify each clause only once.</p>
<ul>
<li>
<p>If you specify <code dir="ltr"><span class="codeinlineitalic">schema</span></code><span class="italic">.</span><code dir="ltr"><span class="codeinlineitalic">index</span></code>, then Oracle attempts to enforce the constraint using the specified index. If Oracle cannot find the index or cannot use the index to enforce the constraint, then Oracle returns an error.</p>
</li>
<li>
<p>If you specify the <code dir="ltr"><span class="codeinlineitalic">create_index_statement</span></code>, then Oracle attempts to create the index and use it to enforce the constraint. If Oracle cannot create the index or cannot use the index to enforce the constraint, then Oracle returns an error.</p>
</li>
<li>
<p>If you neither specify an existing index nor create a new index, then Oracle creates the index. In this case:</p>
<ul>
<li>
<p>The index receives the same name as the constraint.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">table</span></code> is partitioned, then you can specify a locally or globally partitioned index for the unique or primary key constraint.</p>
</li>
</ul>
</li>
</ul>
<p><a id="SQLRF52227"></a><span class="subhead3">Restrictions on the <span class="italic">using_index_clause</span>&nbsp;</span>The following restrictions apply to the <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code>:</p>
<ul>
<li>
<p>You cannot specify this clause for a view constraint.</p>
</li>
<li>
<p>You cannot specify this clause for a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>, foreign key, or check constraint.</p>
</li>
<li>
<p>You cannot specify an index (<code dir="ltr"><span class="codeinlineitalic">schema.index</span></code>) or create an index (<code dir="ltr"><span class="codeinlineitalic">create_index_statement</span></code>) when enabling the primary key of an index-organized table.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">parallel_clause</span></code> of <code dir="ltr"><span class="codeinlineitalic">index_attributes</span></code>.</p>
</li>
<li>
<p>The <code dir="ltr">INDEXTYPE</code> <code dir="ltr">IS</code> ... clause of <code dir="ltr"><span class="codeinlineitalic">index_properties</span></code> is not valid in the definition of a constraint.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="statements_5013.htm#i2062403">CREATE INDEX</a> for a description of <a href="statements_5013.htm#i2075657"><span class="xreftitleitalic"><span class="italic">index_attributes</span></span></a>, the <a href="statements_5013.htm#i2150212"><span class="xreftitleitalic"><span class="italic">global_partitioned_index</span></span></a> and <a href="statements_5013.htm#i2135151"><span class="xreftitleitalic"><span class="italic">local_partitioned_index</span></span></a> clauses, and for a description of <code dir="ltr">NOSORT</code> and the <code dir="ltr"><span class="codeinlineitalic">logging_clause</span></code> in relation to indexes</p>
</li>
<li>
<p><a href="clauses007.htm#i77584"><span class="xreftitleitalic"><span class="italic">physical_attributes_clause</span></span></a> and <code dir="ltr">PCTFREE</code> parameters and <a href="clauses009.htm#i997450"><span class="xreftitleitalic"><span class="italic">storage_clause</span></span></a></p>
</li>
<li>
<p><a href="#i1002834">&#34;Explicit Index Control Example&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead1"><a id="i1012716"></a><a id="SQLRF52228"></a>Handling Constraint Exceptions</p>
<p>When defining the state of a constraint, you can specify a table into which Oracle places the rowids of all rows violating the constraint.</p>
<p><a id="i1002527"></a><a id="SQLRF52229"></a><span class="subhead3"><span class="italic">exceptions_clause</span>&nbsp;</span>Use the <code dir="ltr"><span class="codeinlineitalic">exceptions_clause</span></code> syntax to define exception handling. If you omit <code dir="ltr"><span class="codeinlineitalic">schema</span></code>, then Oracle assumes the exceptions table is in your own schema. If you omit this clause altogether, then Oracle assumes that the table is named <code dir="ltr">EXCEPTIONS</code>. The <code dir="ltr">EXCEPTIONS</code> table or the table you specify must exist on your local database.</p>
<p>You can create the <code dir="ltr">EXCEPTIONS</code> table using one of these scripts:</p>
<ul>
<li>
<p><code dir="ltr">UTLEXCPT.SQL</code> uses physical rowids. Therefore it can accommodate rows from conventional tables but not from index-organized tables. (See the Note that follows.)</p>
</li>
<li>
<p><code dir="ltr">UTLEXPT1.SQL</code> uses universal rowids, so it can accommodate rows from both conventional and index-organized tables.</p>
</li>
</ul>
<p>If you create your own exceptions table, then it must follow the format prescribed by one of these two scripts.</p>
<p>If you are collecting exceptions from index-organized tables based on primary keys (rather than universal rowids), then you must create a separate exceptions table for each index-organized table to accommodate its primary-key storage. You create multiple exceptions tables with different names by modifying and resubmitting the script.</p>
<p><a id="SQLRF52230"></a><span class="subhead3">Restrictions on the <span class="italic">exceptions_clause</span>&nbsp;</span>The following restrictions apply to the <code dir="ltr"><span class="codeinlineitalic">exceptions_clause</span></code>:</p>
<ul>
<li>
<p>You cannot specify this clause for a view constraint.</p>
</li>
<li>
<p>You cannot specify this clause in a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement, because no rowids exist until <span class="italic">after</span> the successful completion of the statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The <code dir="ltr">DBMS_IOT</code> package in <a class="olink ARPLS018" href="../ARPLS/d_iot.htm#ARPLS018"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information on the SQL scripts</p>
</li>
<li>
<p><a class="olink TGDBA94470" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=TGDBA94470"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for information on eliminating migrated and chained rows</p>
</li>
</ul>
</div>
</li>
</ul>
<p class="subhead2"><a id="i1002565"></a><a id="SQLRF30018"></a>View Constraints <a id="sthref2287"></a></p>
<p>Data warehousing applications recognize multidimensional data in the Oracle Database by identifying referential integrity constraints in the relational schema. These constraints represent primary and foreign key relationships among tables. By querying the Oracle Database data dictionary, applications can recognize such constraints and therefore recognize the multidimensional data in the database. For schema complexity or security reasons, you might want to define views on fact and dimension tables. Oracle Database provides the ability to constrain these views. By allowing constraint definitions between views, you can propagate base table constraints to the views, thereby allowing applications to recognize multidimensional data even in the restricted environment provided by the view.</p>
<p>Oracle does not enforce view constraints. However, operations on views are subject to the integrity constraints defined on the underlying base tables. This means that you can enforce constraints on views through constraints on base tables.</p>
<p><a id="BABFCAIF"></a><a id="SQLRF52231"></a><span class="subhead3">Notes on View Constraints&nbsp;</span>View constraints are a subset of table constraints and are subject to the following restrictions:</p>
<ul>
<li>
<p>You can specify only unique, primary key, and foreign key constraints on views. However, you can define the view using the <code dir="ltr">WITH</code> <code dir="ltr">CHECK</code> <code dir="ltr">OPTION</code> clause, which is equivalent to specifying a check constraint for the view.</p>
</li>
<li>
<p>View constraints are supported only in <code dir="ltr">DISABLE</code> <code dir="ltr">NOVALIDATE</code> mode. You cannot specify any other mode. You must specify the keyword <code dir="ltr">DISABLE</code> when you declare the view constraint. You need not specify <code dir="ltr">NOVALIDATE</code> explicitly, as it is the default.</p>
</li>
<li>
<p>The <code dir="ltr">RELY</code> and <code dir="ltr">NORELY</code> parameters are optional. View constraints, because they are unenforced, are usually specified with the <code dir="ltr">RELY</code> parameter to make them more useful. The <code dir="ltr">RELY</code> or <code dir="ltr">NORELY</code> keyword must precede the <code dir="ltr">DISABLE</code> keyword. Refer to <a href="#i1002915">&#34;RELY Clause&#34;</a> for more information.</p>
</li>
<li>
<p>Because view constraints are not enforced directly, you cannot specify <code dir="ltr">INITIALLY</code> <code dir="ltr">DEFERRED</code> or <code dir="ltr">DEFERRABLE</code>.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code>, the <code dir="ltr"><span class="codeinlineitalic">exceptions_clause</span></code> clause, or the <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> clause of the <code dir="ltr"><span class="codeinlineitalic">references_clause</span></code>.</p>
</li>
<li>
<p>You cannot define view constraints on attributes of an object column.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1063310"></a>Examples</p>
<p><a id="i1015609"></a><a id="SQLRF52232"></a><span class="subhead3">Unique Key Example&nbsp;</span>The following statement is a variation of the statement that created the sample table <code dir="ltr">sh.promotions</code>. It defines inline and implicitly enables a unique key on the <code dir="ltr">promo_id</code> column (other constraints are not shown):</p>
<pre dir="ltr">CREATE TABLE promotions_var1
    ( promo_id         NUMBER(6)
                       CONSTRAINT promo_id_u  UNIQUE
    , promo_name       VARCHAR2(20)
    , promo_category   VARCHAR2(15)
    , promo_cost       NUMBER(10,2)
    , promo_begin_date DATE
    , promo_end_date   DATE
    ) ;
</pre>
<p>The constraint <code dir="ltr">promo_id_u</code> identifies the <code dir="ltr">promo_id</code> column as a unique key. This constraint ensures that no two promotions in the table have the same ID. However, the constraint does allow promotions without identifiers.</p>
<p>Alternatively, you can define and enable this constraint out of line:</p>
<pre dir="ltr">CREATE TABLE promotions_var2
    ( promo_id         NUMBER(6)
    , promo_name       VARCHAR2(20)
    , promo_category   VARCHAR2(15)
    , promo_cost       NUMBER(10,2)
    , promo_begin_date DATE
    , promo_end_date   DATE
    , CONSTRAINT promo_id_u UNIQUE (promo_id)
   USING INDEX PCTFREE 20
      TABLESPACE stocks
      STORAGE (INITIAL 8M) ); 
</pre>
<p>The preceding statement also contains the <code dir="ltr"><span class="codeinlineitalic">using_index_clause</span></code>, which specifies storage characteristics for the index that Oracle creates to enable the constraint.</p>
<p><a id="i1015598"></a><a id="SQLRF52233"></a><span class="subhead3">Composite Unique Key Example&nbsp;</span>The following statement defines and enables a composite unique key on the combination of the <code dir="ltr">warehouse_id</code> and <code dir="ltr">warehouse_name</code> columns of the <code dir="ltr">oe.warehouses</code> table:</p>
<pre dir="ltr">ALTER TABLE warehouses
   ADD CONSTRAINT wh_unq UNIQUE (warehouse_id, warehouse_name)
   USING INDEX PCTFREE 5
   EXCEPTIONS INTO wrong_id;
</pre>
<p>The <code dir="ltr">wh_unq</code> constraint ensures that the same combination of <code dir="ltr">warehouse_id</code> and <code dir="ltr">warehouse_name</code> values does not appear in the table more than once.</p>
<p>The <code dir="ltr">ADD</code> <code dir="ltr">CONSTRAINT</code> clause also specifies other properties of the constraint:</p>
<ul>
<li>
<p>The <code dir="ltr">USING</code> <code dir="ltr">INDEX</code> clause specifies storage characteristics for the index Oracle creates to enable the constraint.</p>
</li>
<li>
<p>The <code dir="ltr">EXCEPTIONS</code> <code dir="ltr">INTO</code> clause causes Oracle to write to the <code dir="ltr">wrong_id</code> table information about any rows currently in the <code dir="ltr">warehouses</code> table that violate the constraint. If the <code dir="ltr">wrong_id</code> exceptions table does not already exist, then this statement will fail.</p>
</li>
</ul>
<p><a id="i1002629"></a><a id="SQLRF52234"></a><span class="subhead3">Primary Key Example&nbsp;</span>The following statement is a variation of the statement that created the sample table <code dir="ltr">hr.locations</code>. It creates the <code dir="ltr">locations_demo</code> table and defines and enables a primary key on the <code dir="ltr">location_id</code> column (other constraints from the <code dir="ltr">hr.locations</code> table are omitted):</p>
<pre dir="ltr">CREATE TABLE locations_demo
    ( location_id    NUMBER(4) CONSTRAINT loc_id_pk PRIMARY KEY
    , street_address VARCHAR2(40)
    , postal_code    VARCHAR2(12)
    , city           VARCHAR2(30)
    , state_province VARCHAR2(25)
    , country_id     CHAR(2)
    ) ;
</pre>
<p>The <code dir="ltr">loc_id_pk</code> constraint, specified inline, identifies the <code dir="ltr">location_id</code> column as the primary key of the <code dir="ltr">locations_demo</code> table. This constraint ensures that no two locations in the table have the same location number and that no location identifier is <code dir="ltr">NULL</code>.</p>
<p>Alternatively, you can define and enable this constraint out of line:</p>
<pre dir="ltr">CREATE TABLE locations_demo
    ( location_id    NUMBER(4) 
    , street_address VARCHAR2(40)
    , postal_code    VARCHAR2(12)
    , city           VARCHAR2(30)
    , state_province VARCHAR2(25)
    , country_id     CHAR(2)
    , CONSTRAINT loc_id_pk PRIMARY KEY (location_id));
</pre>
<p><a id="i1015640"></a><a id="SQLRF52235"></a><span class="subhead3">NOT NULL Example&nbsp;</span>The following statement alters the <code dir="ltr">locations_demo</code> table (created in <a href="#i1002629">&#34;Primary Key Example&#34;</a>) to define and enable a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint on the <code dir="ltr">country_id</code> column:</p>
<pre dir="ltr">ALTER TABLE locations_demo
   MODIFY (country_id CONSTRAINT country_nn NOT NULL); 
</pre>
<p>The constraint <code dir="ltr">country_nn</code> ensures that no location in the table has a null <code dir="ltr">country_id</code>.</p>
<p><a id="i1015668"></a><a id="SQLRF52236"></a><span class="subhead3">Composite Primary Key Example&nbsp;</span>The following statement defines a composite primary key on the combination of the <code dir="ltr">prod_id</code> and <code dir="ltr">cust_id</code> columns of the sample table <code dir="ltr">sh.sales</code>:</p>
<pre dir="ltr">ALTER TABLE sales 
    ADD CONSTRAINT sales_pk PRIMARY KEY (prod_id, cust_id) DISABLE; 
</pre>
<p>This constraint identifies the combination of the <code dir="ltr">prod_id</code> and <code dir="ltr">cust_id</code> columns as the primary key of the <code dir="ltr">sales</code> table. The constraint ensures that no two rows in the table have the same combination of values for the <code dir="ltr">prod_id</code> column and <code dir="ltr">cust_id</code> columns.</p>
<p>The constraint clause (<code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code>) also specifies the following properties of the constraint:</p>
<ul>
<li>
<p>The constraint definition does not include a constraint name, so Oracle generates a name for the constraint.</p>
</li>
<li>
<p>The <code dir="ltr">DISABLE</code> clause causes Oracle to define the constraint but not enable it.</p>
</li>
</ul>
<p><a id="i1036780"></a><a id="SQLRF52237"></a><span class="subhead3">Foreign Key Constraint Example&nbsp;</span>The following statement creates the <code dir="ltr">dept_20</code> table and defines and enables a foreign key on the <code dir="ltr">department_id</code> column that references the primary key on the <code dir="ltr">department_id</code> column of the <code dir="ltr">departments</code> table:</p>
<pre dir="ltr">CREATE TABLE dept_20 
   (employee_id     NUMBER(4), 
    last_name       VARCHAR2(10), 
    job_id          VARCHAR2(9), 
    manager_id      NUMBER(4), 
    hire_date       DATE, 
    salary          NUMBER(7,2), 
    commission_pct  NUMBER(7,2), 
    department_id   CONSTRAINT fk_deptno 
                    REFERENCES departments(department_id) ); 
</pre>
<p>The constraint <code dir="ltr">fk_deptno</code> ensures that all departments given for employees in the <code dir="ltr">dept_20</code> table are present in the <code dir="ltr">departments</code> table. However, employees can have null department numbers, meaning they are not assigned to any department. To ensure that all employees are assigned to a department, you could create a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint on the <code dir="ltr">department_id</code> column in the <code dir="ltr">dept_20</code> table in addition to the <code dir="ltr">REFERENCES</code> constraint.</p>
<p>Before you define and enable this constraint, you must define and enable a constraint that designates the <code dir="ltr">department_id</code> column of the <code dir="ltr">departments</code> table as a primary or unique key.</p>
<p>The foreign key constraint definition does not use the <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> clause, because the constraint is defined inline. The data type of the <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> column is not needed, because Oracle automatically assigns to this column the data type of the referenced key.</p>
<p>The constraint definition identifies both the parent table and the columns of the referenced key. Because the referenced key is the primary key of the parent table, the referenced key column names are optional.</p>
<p>Alternatively, you can define this foreign key constraint out of line:</p>
<pre dir="ltr">CREATE TABLE dept_20 
   (employee_id     NUMBER(4), 
    last_name       VARCHAR2(10), 
    job_id          VARCHAR2(9), 
    manager_id      NUMBER(4), 
    hire_date       DATE, 
    salary          NUMBER(7,2), 
    commission_pct  NUMBER(7,2), 
    department_id, 
   CONSTRAINT fk_deptno 
      FOREIGN  KEY (department_id) 
      REFERENCES  departments(department_id) ); 
</pre>
<p>The foreign key definitions in both variations of this statement omit the <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> clause, causing Oracle to prevent the deletion of a department if any employee works in that department.</p>
<p><a id="i1015699"></a><a id="SQLRF52238"></a><span class="subhead3">ON DELETE Example&nbsp;</span>This statement creates the <code dir="ltr">dept_20</code> table, defines and enables two referential integrity constraints, and uses the <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> clause:</p>
<pre dir="ltr">CREATE TABLE dept_20 
   (employee_id     NUMBER(4) PRIMARY KEY, 
    last_name       VARCHAR2(10), 
    job_id          VARCHAR2(9), 
    manager_id      NUMBER(4) CONSTRAINT fk_mgr
                    REFERENCES employees ON DELETE SET NULL, 
    hire_date       DATE, 
    salary          NUMBER(7,2), 
    commission_pct  NUMBER(7,2), 
    department_id   NUMBER(2)   CONSTRAINT fk_deptno 
                    REFERENCES departments(department_id) 
                    ON DELETE CASCADE ); 
</pre>
<p>Because of the first <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> clause, if manager number 2332 is deleted from the <code dir="ltr">employees</code> table, then Oracle sets to null the value of <code dir="ltr">manager_id</code> for all employees in the <code dir="ltr">dept_20</code> table who previously had manager 2332.</p>
<p>Because of the second <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> clause, Oracle cascades any deletion of a <code dir="ltr">department_id</code> value in the <code dir="ltr">departments</code> table to the <code dir="ltr">department_id</code> values of its dependent rows of the <code dir="ltr">dept_20</code> table. For example, if Department 20 is deleted from the <code dir="ltr">departments</code> table, then Oracle deletes all of the employees in Department 20 from the <code dir="ltr">dept_20</code> table.</p>
<p><a id="i1015710"></a><a id="SQLRF52239"></a><span class="subhead3">Composite Foreign Key Constraint Example&nbsp;</span>The following statement defines and enables a foreign key on the combination of the <code dir="ltr">employee_id</code> and <code dir="ltr">hire_date</code> columns of the <code dir="ltr">dept_20</code> table:</p>
<pre dir="ltr">ALTER TABLE dept_20
   ADD CONSTRAINT fk_empid_hiredate
   FOREIGN KEY (employee_id, hire_date)
   REFERENCES hr.job_history(employee_id, start_date)
   EXCEPTIONS INTO wrong_emp;
</pre>
<p>The constraint <code dir="ltr">fk_empid_hiredate</code> ensures that all the employees in the <code dir="ltr">dept_20</code> table have <code dir="ltr">employee_id</code> and <code dir="ltr">hire_date</code> combinations that exist in the <code dir="ltr">employees</code> table. Before you define and enable this constraint, you must define and enable a constraint that designates the combination of the <code dir="ltr">employee_id</code> and <code dir="ltr">hire_date</code> columns of the <code dir="ltr">employees</code> table as a primary or unique key.</p>
<p>The <code dir="ltr">EXCEPTIONS</code> <code dir="ltr">INTO</code> clause causes Oracle to write information to the <code dir="ltr">wrong_emp</code> table about any rows in the <code dir="ltr">dept_20</code> table that violate the constraint. If the <code dir="ltr">wrong_emp</code> exceptions table does not already exist, then this statement will fail.</p>
<p><a id="i1002719"></a><a id="SQLRF52240"></a><span class="subhead3">Check Constraint Examples&nbsp;</span>The following statement creates a <code dir="ltr">divisions</code> table and defines a <code dir="ltr">check</code> constraint in each column of the table:</p>
<pre dir="ltr">CREATE TABLE divisions  
   (div_no    NUMBER  CONSTRAINT check_divno
              CHECK (div_no BETWEEN 10 AND 99) 
              DISABLE, 
    div_name  VARCHAR2(9)  CONSTRAINT check_divname
              CHECK (div_name = UPPER(div_name)) 
              DISABLE, 
    office    VARCHAR2(10)  CONSTRAINT check_office
              CHECK (office IN (&#39;DALLAS&#39;,&#39;BOSTON&#39;,
              &#39;PARIS&#39;,&#39;TOKYO&#39;)) 
              DISABLE); 
</pre>
<p>Each constraint restricts the values of the column in which it is defined:</p>
<ul>
<li>
<p><code dir="ltr">check_divno</code> ensures that no division numbers are less than 10 or greater than 99.</p>
</li>
<li>
<p><code dir="ltr">check_divname</code> ensures that all division names are in uppercase.</p>
</li>
<li>
<p><code dir="ltr">check_office</code> restricts office locations to Dallas, Boston, Paris, or Tokyo.</p>
</li>
</ul>
<p>Because each <code dir="ltr">CONSTRAINT</code> clause contains the <code dir="ltr">DISABLE</code> clause, Oracle only defines the constraints and does not enable them.</p>
<p>The following statement creates the <code dir="ltr">dept_20</code> table, defining out of line and implicitly enabling a check constraint:</p>
<pre dir="ltr">CREATE TABLE dept_20
   (employee_id     NUMBER(4) PRIMARY KEY, 
    last_name       VARCHAR2(10), 
    job_id          VARCHAR2(9), 
    manager_id      NUMBER(4), 
    salary          NUMBER(7,2), 
    commission_pct  NUMBER(7,2), 
    department_id   NUMBER(2),
    CONSTRAINT check_sal CHECK (salary * commission_pct &lt;= 5000));
</pre>
<p>This constraint uses an inequality condition to limit an employee&#39;s total commission, the product of <code dir="ltr">salary</code> and <code dir="ltr">commission_pct</code>, to $5000:</p>
<ul>
<li>
<p>If an employee has non-null values for both salary and commission, then the product of these values must not exceed $5000 to satisfy the constraint.</p>
</li>
<li>
<p>If an employee has a null salary or commission, then the result of the condition is unknown and the employee automatically satisfies the constraint.</p>
</li>
</ul>
<p>Because the constraint clause in this example does not supply a constraint name, Oracle generates a name for the constraint.</p>
<p>The following statement defines and enables a primary key constraint, two foreign key constraints, a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, and two check constraints:</p>
<pre dir="ltr">CREATE TABLE order_detail 
  (CONSTRAINT pk_od PRIMARY KEY (order_id, part_no), 
   order_id    NUMBER 
      CONSTRAINT fk_oid 
         REFERENCES oe.orders(order_id), 
   part_no     NUMBER 
      CONSTRAINT fk_pno 
         REFERENCES oe.product_information(product_id), 
   quantity    NUMBER 
      CONSTRAINT nn_qty NOT NULL 
      CONSTRAINT check_qty CHECK (quantity &gt; 0), 
   cost        NUMBER 
      CONSTRAINT check_cost CHECK (cost &gt; 0) ); 
</pre>
<p>The constraints enable the following rules on table data:</p>
<ul>
<li>
<p><code dir="ltr">pk_od</code> identifies the combination of the <code dir="ltr">order_id</code> and <code dir="ltr">part_no</code> columns as the primary key of the table. To satisfy this constraint, no two rows in the table can contain the same combination of values in the <code dir="ltr">order_id</code> and the <code dir="ltr">part_no</code> columns, and no row in the table can have a null in either the <code dir="ltr">order_id</code> or the <code dir="ltr">part_no</code> column.</p>
</li>
<li>
<p><code dir="ltr">fk_oid</code> identifies the <code dir="ltr">order_id</code> column as a foreign key that references the <code dir="ltr">order_id</code> column in the <code dir="ltr">orders</code> table in the sample schema <code dir="ltr">oe</code>. All new values added to the column <code dir="ltr">order_detail</code>.<code dir="ltr">order_id</code> must already appear in the column <code dir="ltr">oe.orders.order_id</code>.</p>
</li>
<li>
<p><code dir="ltr">fk_pno</code> identifies the <code dir="ltr">product_id</code> column as a foreign key that references the <code dir="ltr">product_id</code> column in the <code dir="ltr">product_information</code> table owned by <code dir="ltr">oe</code>. All new values added to the column <code dir="ltr">order_detail.product_id</code> must already appear in the column <code dir="ltr">oe.product_information.product_id</code>.</p>
</li>
<li>
<p><code dir="ltr">nn_qty</code> forbids nulls in the <code dir="ltr">quantity</code> column.</p>
</li>
<li>
<p><code dir="ltr">check_qty</code> ensures that values in the <code dir="ltr">quantity</code> column are always greater than zero.</p>
</li>
<li>
<p><code dir="ltr">check_cost</code> ensures the values in the cost column are always greater than zero.</p>
</li>
</ul>
<p>This example also illustrates the following points about constraint clauses and column definitions:</p>
<ul>
<li>
<p>Out-of-line constraint definition can appear before or after the column definitions. In this example, the out-of-line definition of the <code dir="ltr">pk_od</code> constraint precedes the column definitions.</p>
</li>
<li>
<p>A column definition can contain multiple inline constraint definitions. In this example, the definition of the <code dir="ltr">quantity</code> column contains the definitions of both the <code dir="ltr">nn_qty</code> and <code dir="ltr">check_qty</code> constraints.</p>
</li>
<li>
<p>A table can have multiple <code dir="ltr">CHECK</code> constraints. Multiple <code dir="ltr">CHECK</code> constraints, each with a simple condition enforcing a single business rule, are preferable to a single <code dir="ltr">CHECK</code> constraint with a complicated condition enforcing multiple business rules. When a constraint is violated, Oracle returns an error identifying the constraint. Such an error more precisely identifies the violated business rule if the identified constraint enables a single business rule.</p>
</li>
</ul>
<p><a id="i1002779"></a><a id="SQLRF52241"></a><span class="subhead3">Attribute-Level Constraints Example&nbsp;</span>The following example guarantees that a value exists for both the <code dir="ltr">first_name</code> and <code dir="ltr">last_name</code> attributes of the <code dir="ltr">name</code> column in the <code dir="ltr">students</code> table:</p>
<pre dir="ltr">CREATE TYPE person_name AS OBJECT
   (first_name VARCHAR2(30), last_name VARCHAR2(30));
/

CREATE TABLE students (name person_name, age INTEGER,
   CHECK (name.first_name IS NOT NULL AND 
          name.last_name IS NOT NULL));
</pre>
<p><a id="i1015744"></a><a id="SQLRF52242"></a><span class="subhead3">REF Constraint Examples&nbsp;</span>The following example creates a duplicate of the sample schema object type <code dir="ltr">cust_address_typ</code>, and then creates a table containing a <code dir="ltr">REF</code> column with a <code dir="ltr">SCOPE</code> constraint:</p>
<pre dir="ltr">CREATE TYPE cust_address_typ_new AS OBJECT
    ( street_address     VARCHAR2(40)
    , postal_code        VARCHAR2(10)
    , city               VARCHAR2(30)
    , state_province     VARCHAR2(10)
    , country_id         CHAR(2)
    );
/
CREATE TABLE address_table OF cust_address_typ_new;

CREATE TABLE customer_addresses (
   add_id NUMBER, 
   address REF cust_address_typ_new
   SCOPE IS address_table);
</pre>
<p>The following example creates the same table but with a referential integrity constraint on the <code dir="ltr">REF</code> column that references the object identifier column of the parent table:</p>
<pre dir="ltr">CREATE TABLE customer_addresses (
   add_id NUMBER,
   address REF cust_address_typ REFERENCES address_table);
</pre>
<p>The following example uses the type <code dir="ltr">department_typ</code> and the table <code dir="ltr">departments_obj_t</code>, created in <a href="statements_7002.htm#i2102043">&#34;Creating Object Tables: Examples&#34;</a>. A table with a scoped <code dir="ltr">REF</code> is then created.</p>
<pre dir="ltr">CREATE TABLE employees_obj
   ( e_name   VARCHAR2(100),
     e_number NUMBER,
     e_dept   REF department_typ SCOPE IS departments_obj_t );
</pre>
<p>The following statement creates a table with a <code dir="ltr">REF</code> column which has a referential integrity constraint defined on it:</p>
<pre dir="ltr">CREATE TABLE employees_obj
   ( e_name   VARCHAR2(100),
     e_number NUMBER,
     e_dept   REF department_typ REFERENCES departments_obj_t);
</pre>
<p><a id="i1002834"></a><a id="SQLRF52243"></a><span class="subhead3">Explicit Index Control Example&nbsp;</span>The following statement shows another way to create a unique (or primary key) constraint that gives you explicit control over the index (or indexes) Oracle uses to enforce the constraint:</p>
<pre dir="ltr">CREATE TABLE promotions_var3
    ( promo_id         NUMBER(6)
    , promo_name       VARCHAR2(20)
    , promo_category   VARCHAR2(15)
    , promo_cost       NUMBER(10,2)
    , promo_begin_date DATE
    , promo_end_date   DATE
    , CONSTRAINT promo_id_u UNIQUE (promo_id, promo_cost)
         USING INDEX (CREATE UNIQUE INDEX promo_ix1
            ON promotions_var3 (promo_id, promo_cost))
    , CONSTRAINT promo_id_u2 UNIQUE (promo_cost, promo_id) 
         USING INDEX promo_ix1);
</pre>
<p>This example also shows that you can create an index for one constraint and use that index to create and enable another constraint in the same statement.</p>
<p><a id="i1015767"></a><a id="SQLRF52244"></a><span class="subhead3">DEFERRABLE Constraint Examples&nbsp;</span>The following statement creates table <code dir="ltr">games</code> with a <code dir="ltr">NOT</code> <code dir="ltr">DEFERRABLE</code> <code dir="ltr">INITIALLY</code> <code dir="ltr">IMMEDIATE</code> constraint check (by default) on the <code dir="ltr">scores</code> column:</p>
<pre dir="ltr">CREATE TABLE games (scores NUMBER CHECK (scores &gt;= 0));
</pre>
<p>To define a unique constraint on a column as <code dir="ltr">INITIALLY</code> <code dir="ltr">DEFERRED</code> <code dir="ltr">DEFERRABLE</code>, issue the following statement:</p>
<pre dir="ltr">CREATE TABLE games
  (scores NUMBER, CONSTRAINT unq_num UNIQUE (scores)
   INITIALLY DEFERRED DEFERRABLE);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="clauses001.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="clauses003.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>