<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-103562"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Literals"></a><title>Literals</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="sql_elements002.htm" title="Previous" type="text/html"/>
<link rel="Next" href="sql_elements004.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/555</span> <!-- End Header --><a id="i11223"></a>
<div id="SQLRF00217" class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1">Literals <a id="sthref309"></a></h1>
<p>The terms <span class="bold">literal</span> and <span class="bold">constant value</span> are synonymous and refer to a fixed data value. For example, &#39;JACK&#39;, &#39;BLUE ISLAND&#39;, and &#39;101&#39; are all character literals; 5001 is a numeric literal. Character literals are enclosed in single quotation marks so that Oracle can distinguish them from schema object names.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i42617">Text Literals</a></p>
</li>
<li>
<p><a href="#i139891">Numeric Literals</a></p>
</li>
<li>
<p><a href="#BABGIGCJ">Datetime Literals</a></p>
</li>
<li>
<p><a href="#i38598">Interval Literals</a></p>
</li>
</ul>
<p>Many SQL statements and functions require you to specify character and numeric literal values. You can also specify literals as part of expressions and conditions. You can specify character literals with the &#39;<code dir="ltr"><span class="codeinlineitalic">text</span></code>&#39; notation, national character literals with the <code dir="ltr"><span class="codeinlineitalic">N&#39;text&#39;</span></code> notation, and numeric literals with the <code dir="ltr"><span class="codeinlineitalic">integer</span></code>, or <code dir="ltr"><span class="codeinlineitalic">number</span></code> notation, depending on the context of the literal. The syntactic forms of these notations appear in the sections that follow.</p>
<p>To specify a datetime or interval data type as a literal, you must take into account any optional precisions included in the data types. Examples of specifying datetime and interval data types as literals are provided in the relevant sections of <a href="sql_elements001.htm#i45441">&#34;Data Types&#34;</a>.</p>
<a id="i42617"></a>
<div id="SQLRF00218" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">Text Literals <a id="sthref310"></a></h2>
<p>Use the text literal notation to specify values whenever <code dir="ltr"><span class="codeinlineitalic">string</span></code> appears in the syntax of expressions, conditions, SQL functions, and SQL statements in other parts of this reference. This reference uses the terms <span class="bold">text literal</span>, <span class="bold">character literal</span>, and <span class="bold">string</span> interchangeably. Text, character, and string literals are always surrounded by single quotation marks. If the syntax uses the term <code dir="ltr"><span class="codeinlineitalic">char</span></code>, then you can specify either a text literal or another expression that resolves to character data &mdash; for example, the <code dir="ltr">last_name</code> column of the <code dir="ltr">hr.employees</code> table. When <code dir="ltr"><span class="codeinlineitalic">char</span></code> appears in the syntax, the single quotation marks are not used.</p>
<p><a id="sthref311"></a>The syntax of text literals or strings follows:</p>
<p class="subhead2"><a id="CHDBJHHA"></a><a id="SQLRF51057"></a><span class="italic">string</span>::=</p>
<img width="557" height="123" src="img/string.gif" alt="Description of string.gif follows"/><br/>
<a id="sthref312" href="img_text/string.htm">Description of the illustration &#39;&#39;string.gif&#39;&#39;</a><br/>
<br/>
<p><a id="sthref313"></a>where <code dir="ltr">N</code> or <code dir="ltr">n</code> specifies the literal using the national character set (<code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code> data). By default, text entered using this notation is translated into the national character set by way of the database character set when used by the server. To avoid potential loss of data during the text literal conversion to the database character set, set the environment variable <code dir="ltr">ORA_NCHAR_LITERAL_REPLACE</code> to <code dir="ltr">TRUE</code>. Doing so transparently replaces the <code dir="ltr">n&#39;</code> internally and preserves the text literal for SQL processing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG0071" href="../NLSPG/ch7progrunicode.htm#NLSPG0071"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information about N-quoted literals</div>
<p>In the top branch of the syntax:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">c</span></code> is any member of the user&#39;s character set. A single quotation mark (&#39;) within the literal must be preceded by an escape character. To represent one single quotation mark within a literal, enter two single quotation marks.</p>
</li>
<li>
<p>&#39; &#39; are two single quotation marks that begin and end text literals.</p>
</li>
</ul>
<p>In the bottom branch of the syntax:</p>
<ul>
<li>
<p><code dir="ltr">Q</code> or <code dir="ltr">q</code> indicates that the alternative quoting mechanism will be used. This mechanism allows a wide range of delimiters for the text string.</p>
</li>
<li>
<p>The outermost <code dir="ltr">&#39;</code> <code dir="ltr">&#39;</code> are two single quotation marks that precede and follow, respectively, the opening and closing <code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">c</span></code> is any member of the user&#39;s character set. You can include quotation marks (&#34;) in the text literal made up of <code dir="ltr">c</code> characters. You can also include the <code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code>, as long as it is not immediately followed by a single quotation mark.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code> is any single- or multibyte character except space, tab, and return. The <code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code> can be a single quotation mark. However, if the <code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code> appears in the text literal itself, ensure that it is not immediately followed by a single quotation mark.</p>
<p>If the opening <code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code> is one of <code dir="ltr">[</code>, <code dir="ltr">{</code>, <code dir="ltr">&lt;</code>, or <code dir="ltr">(</code>, then the closing <code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code> must be the corresponding <code dir="ltr">]</code>, <code dir="ltr">}</code>, <code dir="ltr">&gt;</code>, or <code dir="ltr">)</code>. In all other cases, the opening and closing <code dir="ltr"><span class="codeinlineitalic">quote_delimiter</span></code> must be the same character.</p>
</li>
</ul>
<p><a id="sthref314"></a>Text literals have properties of both the <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> data types:</p>
<ul>
<li>
<p>Within expressions and conditions, Oracle treats text literals as though they have the data type <code dir="ltr">CHAR</code> by comparing them using blank-padded comparison semantics.</p>
</li>
<li>
<p>A text literal can have a maximum length of 4000 bytes if the initialization parameter <code dir="ltr">MAX_STRING_SIZE</code> <code dir="ltr">=</code> <code dir="ltr">STANDARD</code>, and 32767 bytes if <code dir="ltr">MAX_STRING_SIZE</code> <code dir="ltr">=</code> <code dir="ltr">EXTENDED</code>. See <a href="sql_elements001.htm#BABCIGGA">&#34;Extended Data Types&#34;</a> for more information.</p>
</li>
</ul>
<p>Here are some valid text literals:</p>
<pre dir="ltr">&#39;Hello&#39;
&#39;ORACLE.dbs&#39;
&#39;Jackie&#39;&#39;s raincoat&#39;
&#39;09-MAR-98&#39;
N&#39;nchar literal&#39;
</pre>
<p>Here are some valid text literals using the alternative quoting mechanism:</p>
<pre dir="ltr">q&#39;!name LIKE &#39;%DBMS_%%&#39;!&#39;
q&#39;&lt;&#39;So,&#39; she said, &#39;It&#39;s finished.&#39;&gt;&#39;
q&#39;{SELECT * FROM employees WHERE last_name = &#39;Smith&#39;;}&#39;
nq&#39;&iuml; &Yuml;1234 &iuml;&#39;
q&#39;&#34;name like &#39;[&#39;&#34;&#39;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sql_elements002.htm#BABJBDGB">&#34;Blank-Padded and Nonpadded Comparison Semantics&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i139891"></a>
<div id="SQLRF00220" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">Numeric Literals <a id="sthref315"></a></h2>
<p>Use numeric literal notation to specify fixed and floating-point numbers.</p>
<a id="i139900"></a>
<div id="SQLRF51058" class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3">Integer Literals <a id="sthref316"></a></h3>
<p>You must use the integer notation to specify an integer whenever <code dir="ltr"><span class="codeinlineitalic">integer</span></code> appears in expressions, conditions, SQL functions, and SQL statements described in other parts of this reference.</p>
<p><a id="sthref317"></a>The syntax of <code dir="ltr"><span class="codeinlineitalic">integer</span></code> follows:</p>
<p class="subhead2"><a id="i139906"></a><a id="SQLRF51059"></a><span class="italic">integer</span>::=</p>
<img width="208" height="79" src="img/integer.gif" alt="Description of integer.gif follows"/><br/>
<a id="sthref318" href="img_text/integer.htm">Description of the illustration &#39;&#39;integer.gif&#39;&#39;</a><br/>
<br/>
<p>where <code dir="ltr"><span class="codeinlineitalic">digit</span></code> is one of 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.</p>
<p><a id="sthref319"></a>An integer can store a maximum of 38 digits of precision.</p>
<p>Here are some valid integers:</p>
<pre dir="ltr">7
+255
</pre></div>
<!-- class="sect3" -->
<div id="SQLRF51060" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref320"></a>
<h3 class="sect3">NUMBER and Floating-Point Literals</h3>
<p>You must use the number or floating-point notation to specify values whenever <code dir="ltr"><span class="codeinlineitalic">number</span></code> or <code dir="ltr"><span class="codeinlineitalic">n</span></code> appears in expressions, conditions, SQL functions, and SQL statements in other parts of this reference.</p>
<p><a id="sthref321"></a>The syntax of <code dir="ltr"><span class="codeinlineitalic">number</span></code> follows:</p>
<p class="subhead2"><a id="SQLRF51061"></a><span class="italic">number</span>::=</p>
<img width="478" height="261" src="img/number.gif" alt="Description of number.gif follows"/><br/>
<a id="sthref322" href="img_text/number.htm">Description of the illustration &#39;&#39;number.gif&#39;&#39;</a><br/>
<br/>
<p>where</p>
<ul>
<li>
<p>+ or - indicates a positive or negative value. If you omit the sign, then a positive value is the default.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">digit</span></code> is one of 0, 1, 2, 3, 4, 5, 6, 7, 8 or 9.</p>
</li>
<li>
<p>e or E indicates that the number is specified in scientific notation. The digits after the E specify the exponent. The exponent can range from -130 to 125.</p>
</li>
<li>
<p>f or F indicates that the number is a 32-bit binary floating point number of type <code dir="ltr">BINARY_FLOAT</code>.</p>
</li>
<li>
<p>d or D indicates that the number is a 64-bit binary floating point number of type <code dir="ltr">BINARY_DOUBLE</code>.</p>
<p>If you omit f or F and d or D, then the number is of type <code dir="ltr">NUMBER</code>.</p>
<p>The suffixes f (F) and d (D) are supported only in floating-point number literals, not in character strings that are to be converted to <code dir="ltr">NUMBER</code>. For example, if Oracle is expecting a <code dir="ltr">NUMBER</code> and it encounters the string <code dir="ltr">&#39;9&#39;</code>, then it converts the string to the number 9. However, if Oracle encounters the string <code dir="ltr">&#39;9f&#39;</code>, then conversion fails and an error is returned.</p>
</li>
</ul>
<p><a id="sthref323"></a><a id="sthref324"></a>A number of type <code dir="ltr">NUMBER</code> can store a maximum of 38 digits of precision. If the literal requires more precision than provided by <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, or <code dir="ltr">BINARY_DOUBLE</code>, then Oracle truncates the value. If the range of the literal exceeds the range supported by <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, or <code dir="ltr">BINARY_DOUBLE</code>, then Oracle raises an error.</p>
<p><a id="sthref325"></a>Numeric literals are SQL syntax elements, which are not sensitive to NLS settings. The decimal separator character in numeric literals is always the period (.). However, if a text literal is specified where a numeric value is expected, then the text literal is implicitly converted to a number in an NLS-sensitive way. The decimal separator contained in the text literal must be the one established with the initialization parameter <code dir="ltr">NLS_NUMERIC_CHARACTERS</code>. Oracle recommends that you use numeric literals in SQL scripts to make them work independently of the NLS environment.</p>
<p>The following examples illustrate the behavior of decimal separators in numeric literals and text literals. These examples assume that you have established the comma (,) as the NLS decimal separator for the current session with the following statement:</p>
<pre dir="ltr">ALTER SESSION SET NLS_NUMERIC_CHARACTERS=&#39;,.&#39;;
</pre>
<p>The previous statement also establishes the period (.) as the NLS group separator, but that is irrelevant for these examples.</p>
<p>This example uses the required decimal separator (.) in the numeric literal <code dir="ltr">1.23</code> and the established NLS decimal separator (,) in the text literal &#39;<code dir="ltr">2,34&#39;</code>. The text literal is converted to the numeric value 2.34, and the output is displayed using commas for the decimal separators.</p>
<pre dir="ltr">SELECT 2 * 1.23, 3 * &#39;2,34&#39; FROM DUAL;

    2*1.23   3*&#39;2,34&#39;
---------- ----------
      2,46       7,02
</pre>
<p>The next example shows that a comma is not treated as part of a numeric literal. Rather, the comma is treated as the delimiter in a list of two numeric expressions: <code dir="ltr">2*1</code> and <code dir="ltr">23</code>.</p>
<pre dir="ltr">SELECT 2 * 1,23 FROM DUAL;

       2*1         23
---------- ----------
         2         23
</pre>
<p>The next example shows that the decimal separator in a text literal must match the NLS decimal separator in order for implicit text-to-number conversion to succeed. The following statement fails because the decimal separator (.) does not match the established NLS decimal separator (,):</p>
<pre dir="ltr">SELECT 3 * &#39;2.34&#39; FROM DUAL;
           *
ERROR at line 1:
ORA-01722: invalid number 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_2015.htm#i2231814">ALTER SESSION</a> and <a class="olink REFRN10126" href="../REFRN/GUID-11CC68FD-A719-4F79-A012-9EAFAE999960.htm#REFRN10126"><span class="italic">Oracle Database Reference</span></a></div>
<p>Here are some valid <code dir="ltr">NUMBER</code> literals:</p>
<pre dir="ltr">25
+6.34
0.5
25e-03
-1
</pre>
<p>Here are some valid floating-point number literals:</p>
<pre dir="ltr">25f
+6.34F
0.5d
-1D
</pre>
<p>You can also use the following supplied floating-point literals in situations where a value cannot be expressed as a numeric literal:</p>
<div class="inftblinformal">
<table class="cellalignment5872" title="Floating-point literals" summary="The first column lists the floating-point literals, the second column describes the literal, and the third column provides examples." dir="ltr">
<thead>
<tr class="cellalignment5863">
<th class="cellalignment5873" id="r1c1-t53">Literal</th>
<th class="cellalignment5873" id="r1c2-t53">Meaning</th>
<th class="cellalignment5873" id="r1c3-t53">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r2c1-t53" headers="r1c1-t53"><code dir="ltr">binary_float_nan</code></td>
<td class="cellalignment5869" headers="r2c1-t53 r1c2-t53">A value of type <code dir="ltr">BINARY_FLOAT</code> for which the condition <code dir="ltr">IS</code> <code dir="ltr">NAN</code> is true</td>
<td class="cellalignment5869" headers="r2c1-t53 r1c3-t53">
<pre dir="ltr">SELECT COUNT(*) 
  FROM employees 
  WHERE TO_BINARY_FLOAT(commission_pct)
     != BINARY_FLOAT_NAN;
</pre></td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r3c1-t53" headers="r1c1-t53"><code dir="ltr">binary_float_infinity</code></td>
<td class="cellalignment5869" headers="r3c1-t53 r1c2-t53">Single-precision positive infinity</td>
<td class="cellalignment5869" headers="r3c1-t53 r1c3-t53">
<pre dir="ltr">SELECT COUNT(*) 
  FROM employees 
  WHERE salary &lt; BINARY_FLOAT_INFINITY;
</pre></td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r4c1-t53" headers="r1c1-t53"><code dir="ltr">binary_double_nan</code></td>
<td class="cellalignment5869" headers="r4c1-t53 r1c2-t53">A value of type <code dir="ltr">BINARY_DOUBLE</code> for which the condition <code dir="ltr">IS</code> <code dir="ltr">NAN</code> is true</td>
<td class="cellalignment5869" headers="r4c1-t53 r1c3-t53">
<pre dir="ltr">SELECT COUNT(*) 
  FROM employees 
  WHERE TO_BINARY_FLOAT(commission_pct)
     != BINARY_FLOAT_NAN;
</pre></td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r5c1-t53" headers="r1c1-t53"><code dir="ltr">binary_double_infinity</code></td>
<td class="cellalignment5869" headers="r5c1-t53 r1c2-t53">Double-precision positive infinity</td>
<td class="cellalignment5869" headers="r5c1-t53 r1c3-t53">
<pre dir="ltr">SELECT COUNT(*) 
  FROM employees 
  WHERE salary &lt; BINARY_DOUBLE_INFINITY;
</pre></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABGIGCJ"></a>
<div id="SQLRF51062" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">Datetime Literals <a id="sthref326"></a><a id="sthref327"></a></h2>
<p>Oracle Database supports four datetime data types: <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>, and <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>.</p>
<p><a id="SQLRF51063"></a><span class="subhead3">Date Literals&nbsp;</span>You can specify a <code dir="ltr">DATE</code> value as a string literal, or you can convert a character or numeric value to a date value with the <code dir="ltr">TO_DATE</code> function. <code dir="ltr">DATE</code> literals are the only case in which Oracle Database accepts a <code dir="ltr">TO_DATE</code> expression in place of a string literal.</p>
<p>To specify a <code dir="ltr">DATE</code> value as a literal, you must use the Gregorian calendar. You can specify an ANSI literal, as shown in this example:</p>
<pre dir="ltr">DATE &#39;1998-12-25&#39;
</pre>
<p>The ANSI date literal contains no time portion, and must be specified in the format &#39;<code dir="ltr">YYYY-MM-DD</code>&#39;. Alternatively you can specify an Oracle date value, as in the following example:</p>
<pre dir="ltr">TO_DATE(&#39;98-DEC-25 17:30&#39;,&#39;YY-MON-DD HH24:MI&#39;)
</pre>
<p>The default date format for an Oracle <code dir="ltr">DATE</code> value is specified by the initialization parameter <code dir="ltr">NLS_DATE_FORMAT</code>. This example date format includes a two-digit number for the day of the month, an abbreviation of the month name, the last two digits of the year, and a 24-hour time designation.</p>
<p>Oracle automatically converts character values that are in the default date format into date values when they are used in date expressions.</p>
<p>If you specify a date value without a time component, then the default time is midnight (00:00:00 or 12:00:00 for 24-hour and 12-hour clock time, respectively). If you specify a date value without a date, then the default date is the first day of the current month.</p>
<p>Oracle <code dir="ltr">DATE</code> columns always contain both the date and time fields. Therefore, if you query a <code dir="ltr">DATE</code> column, then you must either specify the time field in your query or ensure that the time fields in the <code dir="ltr">DATE</code> column are set to midnight. Otherwise, Oracle may not return the query results you expect. You can use the <code dir="ltr">TRUNC</code> date function to set the time field to midnight, or you can include a greater-than or less-than condition in the query instead of an equality or inequality condition.</p>
<p>Here are some examples that assume a table <code dir="ltr">my_table</code> with a number column <code dir="ltr">row_num</code> and a <code dir="ltr">DATE</code> column <code dir="ltr">datecol</code>:</p>
<pre dir="ltr">INSERT INTO my_table VALUES (1, SYSDATE);
INSERT INTO my_table VALUES (2, TRUNC(SYSDATE));

SELECT *
  FROM my_table;

   ROW_NUM DATECOL
---------- ---------
         1 03-OCT-02
         2 03-OCT-02

SELECT *
  FROM my_table
  WHERE datecol &gt; TO_DATE(&#39;02-OCT-02&#39;, &#39;DD-MON-YY&#39;);

   ROW_NUM DATECOL
---------- ---------
         1 03-OCT-02
         2 03-OCT-02

SELECT *
  FROM my_table
  WHERE datecol = TO_DATE(&#39;03-OCT-02&#39;,&#39;DD-MON-YY&#39;);

   ROW_NUM DATECOL
---------- ---------
         2 03-OCT-02
</pre>
<p>If you know that the time fields of your <code dir="ltr">DATE</code> column are set to midnight, then you can query your <code dir="ltr">DATE</code> column as shown in the immediately preceding example, or by using the <code dir="ltr">DATE</code> literal:</p>
<pre dir="ltr">SELECT *
  FROM my_table
  WHERE datecol = DATE &#39;2002-10-03&#39;;


   ROW_NUM DATECOL
---------- ---------
         2 03-OCT-02
</pre>
<p>However, if the <code dir="ltr">DATE</code> column contains values other than midnight, then you must filter out the time fields in the query to get the correct result. For example:</p>
<pre dir="ltr">SELECT *
  FROM my_table
  WHERE TRUNC(datecol) = DATE &#39;2002-10-03&#39;;


   ROW_NUM DATECOL
---------- ---------
         1 03-OCT-02
         2 03-OCT-02
</pre>
<p>Oracle applies the <code dir="ltr">TRUNC</code> function to each row in the query, so performance is better if you ensure the midnight value of the time fields in your data. To ensure that the time fields are set to midnight, use one of the following methods during inserts and updates:</p>
<ul>
<li>
<p>Use the <code dir="ltr">TO_DATE</code> function to mask out the time fields:</p>
<pre dir="ltr">INSERT INTO my_table
  VALUES (3, TO_DATE(&#39;3-OCT-2002&#39;,&#39;DD-MON-YYYY&#39;));
</pre></li>
<li>
<p>Use the <code dir="ltr">DATE</code> literal:</p>
<pre dir="ltr">INSERT INTO my_table
  VALUES (4, &#39;03-OCT-02&#39;);
</pre></li>
<li>
<p>Use the <code dir="ltr">TRUNC</code> function:</p>
<pre dir="ltr">INSERT INTO my_table
  VALUES (5, TRUNC(SYSDATE));
</pre></li>
</ul>
<p>The date function <code dir="ltr">SYSDATE</code> returns the current system date and time. The function <code dir="ltr">CURRENT_DATE</code> returns the current session date. For information on <code dir="ltr">SYSDATE</code>, the <code dir="ltr">TO_*</code> datetime functions, and the default date format, see <a href="functions002.htm#i88891">&#34;Datetime Functions&#34;</a>.</p>
<p><a id="SQLRF51064"></a><span class="subhead3">TIMESTAMP Literals&nbsp;</span>The <code dir="ltr">TIMESTAMP</code> data type stores year, month, day, hour, minute, and second, and fractional second values. When you specify <code dir="ltr">TIMESTAMP</code> as a literal, the <code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code> value can be any number of digits up to 9, as follows:</p>
<pre dir="ltr">TIMESTAMP &#39;1997-01-31 09:26:50.124&#39;
</pre>
<p><a id="SQLRF51065"></a><span class="subhead3">TIMESTAMP WITH TIME ZONE Literals&nbsp;</span>The <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> data type is a variant of <code dir="ltr">TIMESTAMP</code> that includes a time zone region name or time zone offset. When you specify <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> as a literal, the <code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code> value can be any number of digits up to 9. For example:</p>
<pre dir="ltr">TIMESTAMP &#39;1997-01-31 09:26:56.66 +02:00&#39;
</pre>
<p>Two <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> values are considered identical if they represent the same instant in UTC, regardless of the <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> offsets stored in the data. For example,</p>
<pre dir="ltr">TIMESTAMP &#39;1999-04-15 8:00:00 -8:00&#39;
</pre>
<p>is the same as</p>
<pre dir="ltr">TIMESTAMP &#39;1999-04-15 11:00:00 -5:00&#39;
</pre>
<p>8:00 a.m. Pacific Standard Time is the same as 11:00 a.m. Eastern Standard Time.</p>
<p><a id="sthref328"></a>You can replace the UTC offset with the <code dir="ltr">TZR</code> (time zone region name) format element. For example, the following example has the same value as the preceding example:</p>
<pre dir="ltr">TIMESTAMP &#39;1999-04-15 8:00:00 US/Pacific&#39;
</pre>
<p>To eliminate the ambiguity of boundary cases when the daylight saving time switches, use both the <code dir="ltr">TZR</code> and a corresponding <code dir="ltr">TZD</code> format element. The following example ensures that the preceding example will return a daylight saving time value:</p>
<pre dir="ltr">TIMESTAMP &#39;1999-10-29 01:30:00 US/Pacific PDT&#39;
</pre>
<p>You can also express the time zone offset using a datetime expression:</p>
<pre dir="ltr">SELECT TIMESTAMP &#39;2009-10-29 01:30:00&#39; AT TIME ZONE &#39;US/Pacific&#39;
  FROM DUAL;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="expressions007.htm#i1047500">&#34;Datetime Expressions&#34;</a> for more information</div>
<p>If you do not add the <code dir="ltr">TZD</code> format element, and the datetime value is ambiguous, then Oracle returns an error if you have the <code dir="ltr">ERROR_ON_OVERLAP_TIME</code> session parameter set to <code dir="ltr">TRUE</code>. If that parameter is set to <code dir="ltr">FALSE</code>, then Oracle interprets the ambiguous datetime as standard time in the specified region.</p>
<p><a id="SQLRF51066"></a><span class="subhead3">TIMESTAMP WITH LOCAL TIME ZONE Literals&nbsp;</span>The <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> data type differs from <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> in that data stored in the database is normalized to the database time zone. The time zone offset is not stored as part of the column data. There is no literal for <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>. Rather, you represent values of this data type using any of the other valid datetime literals. The table that follows shows some of the formats you can use to insert a value into a <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> column, along with the corresponding value returned by a query.</p>
<div class="inftblinformal">
<table class="cellalignment5872" title="Specifying Values for a TIMESTAMP WITH LOCAL TIME ZONE Column" summary="This table shows TIMESTAMP WITH TIME ZONE literals and their equivalent values returned by a query." dir="ltr">
<thead>
<tr class="cellalignment5863">
<th class="cellalignment5873" id="r1c1-t55">Value Specified in INSERT Statement</th>
<th class="cellalignment5873" id="r1c2-t55">Value Returned by Query</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r2c1-t55" headers="r1c1-t55"><code dir="ltr">&#39;19-FEB-2004&#39;</code></td>
<td class="cellalignment5869" headers="r2c1-t55 r1c2-t55">19-FEB-2004.00.00.000000 AM</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r3c1-t55" headers="r1c1-t55"><code dir="ltr">SYSTIMESTAMP</code></td>
<td class="cellalignment5869" headers="r3c1-t55 r1c2-t55">19-FEB-04 02.54.36.497659 PM</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r4c1-t55" headers="r1c1-t55"><code dir="ltr">TO_TIMESTAMP(&#39;19-FEB-2004&#39;, &#39;DD-MON-YYYY&#39;)</code></td>
<td class="cellalignment5869" headers="r4c1-t55 r1c2-t55">19-FEB-04 12.00.00.000000 AM</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r5c1-t55" headers="r1c1-t55"><code dir="ltr">SYSDATE</code></td>
<td class="cellalignment5869" headers="r5c1-t55 r1c2-t55">19-FEB-04 02.55.29.000000 PM</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r6c1-t55" headers="r1c1-t55"><code dir="ltr">TO_DATE(&#39;19-FEB-2004&#39;, &#39;DD-MON-YYYY&#39;)</code></td>
<td class="cellalignment5869" headers="r6c1-t55 r1c2-t55">19-FEB-04 12.00.00.000000 AM</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r7c1-t55" headers="r1c1-t55"><code dir="ltr">TIMESTAMP&#39;2004-02-19 8:00:00 US/Pacific&#39;</code></td>
<td class="cellalignment5869" headers="r7c1-t55 r1c2-t55">19-FEB-04 08.00.00.000000 AM</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Notice that if the value specified does not include a time component (either explicitly or implicitly), then the value returned defaults to midnight.</p>
</div>
<!-- class="sect2" -->
<a id="i38598"></a>
<div id="SQLRF00221" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">Interval Literals<a id="sthref329"></a><a id="sthref330"></a></h2>
<p>An interval literal specifies a period of time. You can specify these differences in terms of years and months, or in terms of days, hours, minutes, and seconds. Oracle Database supports two types of interval literals, <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> and <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code>. Each type contains a leading field and may contain a trailing field. The leading field defines the basic unit of date or time being measured. The trailing field defines the smallest increment of the basic unit being considered. For example, a <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> interval considers an interval of years to the nearest month. A <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">MINUTE</code> interval considers an interval of days to the nearest minute.</p>
<p>If you have date data in numeric form, then you can use the <code dir="ltr">NUMTOYMINTERVAL</code> or <code dir="ltr">NUMTODSINTERVAL</code> conversion function to convert the numeric data into interval values.</p>
<p>Interval literals are used primarily with analytic functions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="functions004.htm#i81407">&#34;Analytic Functions&#34;</a>, <a href="functions129.htm#i88258">NUMTODSINTERVAL</a>, and <a href="functions130.htm#i89943">NUMTOYMINTERVAL</a></div>
<div id="SQLRF51067" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref331"></a>
<h3 class="sect3">INTERVAL YEAR TO MONTH</h3>
<p>Specify <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> interval literals using the following syntax:</p>
<p class="subhead2"><a id="SQLRF51068"></a><span class="italic">interval_year_to_month</span>::=</p>
<img width="484" height="169" src="img/interval_year_to_month.gif" alt="Description of interval_year_to_month.gif follows"/><br/>
<a id="sthref332" href="img_text/interval_year_to_month.htm">Description of the illustration &#39;&#39;interval_year_to_month.gif&#39;&#39;</a><br/>
<br/>
<p>where</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">&#39;integer [-integer]&#39;</span></code> specifies integer values for the leading and optional trailing field of the literal. If the leading field is <code dir="ltr">YEAR</code> and the trailing field is <code dir="ltr">MONTH</code>, then the range of integer values for the month field is 0 to 11.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">precision</span></code> is the maximum number of digits in the leading field. The valid range of the leading field precision is 0 to 9 and its default value is 2.</p>
</li>
</ul>
<p><a id="SQLRF51069"></a><span class="subhead3">Restriction on the Leading Field&nbsp;</span>If you specify a trailing field, then it must be less significant than the leading field. For example, <code dir="ltr">INTERVAL</code> &#39;<code dir="ltr">0-1</code>&#39; <code dir="ltr">MONTH</code> <code dir="ltr">TO</code> <code dir="ltr">YEAR</code> is not valid.</p>
<p>The following <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> literal indicates an interval of 123 years, 2 months:</p>
<pre dir="ltr">INTERVAL &#39;123-2&#39; YEAR(3) TO MONTH
</pre>
<p>Examples of the other forms of the literal follow, including some abbreviated versions:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5872" title="INTERVAL YEAR TO MONTH Literals" summary="The first column shows various forms of interval literal and the second column explains how the database interprets that literal." dir="ltr">
<thead>
<tr class="cellalignment5863">
<th class="cellalignment5873" id="r1c1-t57">Form of Interval Literal</th>
<th class="cellalignment5873" id="r1c2-t57">Interpretation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r2c1-t57" headers="r1c1-t57"><code dir="ltr">INTERVAL &#39;123-2&#39; YEAR(3) TO MONTH</code></td>
<td class="cellalignment5869" headers="r2c1-t57 r1c2-t57">An interval of 123 years, 2 months. You must specify the leading field precision if it is greater than the default of 2 digits.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r3c1-t57" headers="r1c1-t57"><code dir="ltr">INTERVAL &#39;123&#39; YEAR(3)</code></td>
<td class="cellalignment5869" headers="r3c1-t57 r1c2-t57">An interval of 123 years 0 months.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r4c1-t57" headers="r1c1-t57"><code dir="ltr">INTERVAL &#39;300&#39; MONTH(3)</code></td>
<td class="cellalignment5869" headers="r4c1-t57 r1c2-t57">An interval of 300 months.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r5c1-t57" headers="r1c1-t57"><code dir="ltr">INTERVAL &#39;4&#39; YEAR</code></td>
<td class="cellalignment5869" headers="r5c1-t57 r1c2-t57">Maps to <code dir="ltr">INTERVAL &#39;4-0&#39; YEAR TO MONTH</code> and indicates 4 years.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r6c1-t57" headers="r1c1-t57"><code dir="ltr">INTERVAL &#39;50&#39; MONTH</code></td>
<td class="cellalignment5869" headers="r6c1-t57 r1c2-t57">Maps to <code dir="ltr">INTERVAL &#39;4-2&#39; YEAR TO MONTH</code> and indicates 50 months or 4 years 2 months.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r7c1-t57" headers="r1c1-t57"><code dir="ltr">INTERVAL &#39;123&#39; YEAR</code></td>
<td class="cellalignment5869" headers="r7c1-t57 r1c2-t57">Returns an error, because the default precision is 2, and &#39;123&#39; has 3 digits.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>You can add or subtract one <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> literal to or from another to yield another <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> literal. For example:</p>
<pre dir="ltr">INTERVAL &#39;5-3&#39; YEAR TO MONTH + INTERVAL&#39;20&#39; MONTH = 
INTERVAL &#39;6-11&#39; YEAR TO MONTH
</pre></div>
<!-- class="sect3" -->
<div id="SQLRF51070" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref333"></a>
<h3 class="sect3">INTERVAL DAY TO SECOND</h3>
<p>Specify <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> interval literals using the following syntax:</p>
<p class="subhead2"><a id="SQLRF51071"></a><span class="italic">interval_day_to_second</span>::=</p>
<img width="595" height="468" src="img/interval_day_to_second.gif" alt="Description of interval_day_to_second.gif follows"/><br/>
<a id="sthref334" href="img_text/interval_day_to_second.htm">Description of the illustration &#39;&#39;interval_day_to_second.gif&#39;&#39;</a><br/>
<br/>
<p>where</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">integer</span></code> specifies the number of days. If this value contains more digits than the number specified by the leading precision, then Oracle returns an error.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">time_expr</span></code> specifies a time in the format <code dir="ltr"><span class="codeinlineitalic">HH</span></code><code dir="ltr">[</code>:<code dir="ltr"><span class="codeinlineitalic">MI</span></code><code dir="ltr">[</code>:<code dir="ltr"><span class="codeinlineitalic">SS</span></code><code dir="ltr">[</code>.<code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">]]]</code> or <code dir="ltr"><span class="codeinlineitalic">MI</span></code><code dir="ltr">[</code>:<code dir="ltr"><span class="codeinlineitalic">SS</span></code><code dir="ltr">[</code>.<code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">]]</code> or <code dir="ltr"><span class="codeinlineitalic">SS</span></code><code dir="ltr">[</code>.<code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">]</code>, where <code dir="ltr"><span class="codeinlineitalic">n</span></code> specifies the fractional part of a second. If <code dir="ltr"><span class="codeinlineitalic">n</span></code> contains more digits than the number specified by <code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code>, then <code dir="ltr"><span class="codeinlineitalic">n</span></code> is rounded to the number of digits specified by the <code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code> value. You can specify <code dir="ltr"><span class="codeinlineitalic">time_expr</span></code> following an integer and a space only if the leading field is <code dir="ltr">DAY</code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">leading_precision</span></code> is the number of digits in the leading field. Accepted values are 0 to 9. The default is 2.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code> is the number of digits in the fractional part of the <code dir="ltr">SECOND</code> datetime field. Accepted values are 1 to 9. The default is 6.</p>
</li>
</ul>
<p><a id="SQLRF51072"></a><span class="subhead3">Restriction on the Leading Field:&nbsp;</span>If you specify a trailing field, then it must be less significant than the leading field. For example, <code dir="ltr">INTERVAL</code> <code dir="ltr">MINUTE</code> <code dir="ltr">TO</code> <code dir="ltr">DAY</code> is not valid. As a result of this restriction, if <code dir="ltr">SECOND</code> is the leading field, the interval literal cannot have any trailing field.</p>
<p>The valid range of values for the trailing field are as follows:</p>
<ul>
<li>
<p><code dir="ltr">HOUR</code>: 0 to 23</p>
</li>
<li>
<p><code dir="ltr">MINUTE</code>: 0 to 59</p>
</li>
<li>
<p><code dir="ltr">SECOND</code>: 0 to 59.999999999</p>
</li>
</ul>
<p>Examples of the various forms of <code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> literals follow, including some abbreviated versions:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5872" title="INTERVAL DAY TO SECOND Literals" summary="The first column shows various forms of interval literal and the second column explains how the database interprets that literal." dir="ltr">
<thead>
<tr class="cellalignment5863">
<th class="cellalignment5873" id="r1c1-t58">Form of Interval Literal</th>
<th class="cellalignment5873" id="r1c2-t58">Interpretation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r2c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;4 5:12:10.222&#39; DAY TO SECOND(3)</code></td>
<td class="cellalignment5869" headers="r2c1-t58 r1c2-t58">4 days, 5 hours, 12 minutes, 10 seconds, and 222 thousandths of a second.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r3c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;4 5:12&#39; DAY TO MINUTE</code></td>
<td class="cellalignment5869" headers="r3c1-t58 r1c2-t58">4 days, 5 hours and 12 minutes.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r4c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;400 5&#39; DAY(3) TO HOUR</code></td>
<td class="cellalignment5869" headers="r4c1-t58 r1c2-t58">400 days 5 hours.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r5c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;400&#39; DAY(3)</code></td>
<td class="cellalignment5869" headers="r5c1-t58 r1c2-t58">400 days.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r6c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;11:12:10.2222222&#39; HOUR TO SECOND(7)</code></td>
<td class="cellalignment5869" headers="r6c1-t58 r1c2-t58">11 hours, 12 minutes, and 10.2222222 seconds.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r7c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;11:20&#39; HOUR TO MINUTE</code></td>
<td class="cellalignment5869" headers="r7c1-t58 r1c2-t58">11 hours and 20 minutes.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r8c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;10&#39; HOUR</code></td>
<td class="cellalignment5869" headers="r8c1-t58 r1c2-t58">10 hours.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r9c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;10:22&#39; MINUTE TO SECOND</code></td>
<td class="cellalignment5869" headers="r9c1-t58 r1c2-t58">10 minutes 22 seconds.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r10c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;10&#39; MINUTE</code></td>
<td class="cellalignment5869" headers="r10c1-t58 r1c2-t58">10 minutes.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r11c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;4&#39; DAY</code></td>
<td class="cellalignment5869" headers="r11c1-t58 r1c2-t58">4 days.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r12c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;25&#39; HOUR</code></td>
<td class="cellalignment5869" headers="r12c1-t58 r1c2-t58">25 hours.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r13c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;40&#39; MINUTE</code></td>
<td class="cellalignment5869" headers="r13c1-t58 r1c2-t58">40 minutes.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r14c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;120&#39; HOUR(3)</code></td>
<td class="cellalignment5869" headers="r14c1-t58 r1c2-t58">120 hours.</td>
</tr>
<tr class="cellalignment5863">
<td class="cellalignment5869" id="r15c1-t58" headers="r1c1-t58"><code dir="ltr">INTERVAL &#39;30.12345&#39; SECOND(2,4)</code></td>
<td class="cellalignment5869" headers="r15c1-t58 r1c2-t58">30.1235 seconds. The fractional second &#39;12345&#39; is rounded to &#39;1235&#39; because the precision is 4.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>You can add or subtract one <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> interval literal from another <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> literal. For example.</p>
<pre dir="ltr">INTERVAL&#39;20&#39; DAY - INTERVAL&#39;240&#39; HOUR = INTERVAL&#39;10-0&#39; DAY TO SECOND
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="sql_elements002.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="sql_elements004.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>