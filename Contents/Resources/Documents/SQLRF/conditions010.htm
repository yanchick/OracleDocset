<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-102059"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/JSON%20Conditions"></a><title>JSON Conditions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:10Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="conditions009.htm" title="Previous" type="text/html"/>
<link rel="Next" href="conditions011.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">67/555</span> <!-- End Header --><a id="BABEHDJA"></a>
<div id="SQLRF56660" class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1">JSON Conditions<a id="sthref1089"></a><a id="sthref1090"></a></h1>
<p>JavaScript Object Notation (JSON) conditions allow you to test JSON data as follows:</p>
<ul>
<li>
<p><a href="#BABCFADA">IS JSON Condition</a> lets you test whether an expression is syntactically correct JSON data</p>
</li>
<li>
<p><a href="#BABHAGEG">JSON_EXISTS Condition</a> lets you test whether a specified JSON value exists in JSON data</p>
</li>
<li>
<p><a href="#BABJFEGF">JSON_TEXTCONTAINS Condition</a> lets you test whether a specified character string exists in JSON property values.</p>
</li>
</ul>
<p class="subhead2"><a id="SQLRF57035"></a><span class="italic">JSON_condition</span>::=</p>
<img width="225" height="91" src="img/json_condition.gif" alt="Description of json_condition.gif follows"/><br/>
<a id="sthref1091" href="img_text/json_condition.htm">Description of the illustration &#39;&#39;json_condition.gif&#39;&#39;</a><br/>
<br/>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JSON conditions are available starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2).</div>
<a id="BABCFADA"></a>
<div id="SQLRF56661" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">IS JSON Condition<a id="sthref1092"></a><a id="sthref1093"></a></h2>
<p>Use this condition to test whether an expression is syntactically correct, or well-formed, JSON data.</p>
<ul>
<li>
<p>If you specify <code dir="ltr">IS</code> <code dir="ltr">JSON</code>, then this condition returns <code dir="ltr">TRUE</code> if the expression is well-formed JSON data and <code dir="ltr">FALSE</code> if the expression is not well-formed JSON data.</p>
</li>
<li>
<p>If you specify <code dir="ltr">IS</code> <code dir="ltr">NOT</code> <code dir="ltr">JSON</code>, then this condition returns <code dir="ltr">TRUE</code> if the expression is not well-formed JSON data and <code dir="ltr">FALSE</code> if the expression is well-formed JSON data.</p>
</li>
</ul>
<p class="subhead2"><a id="SQLRF56662"></a><span class="italic">is_JSON_condition</span>::=</p>
<img width="579" height="178" src="img/is_json_condition.gif" alt="Description of is_json_condition.gif follows"/><br/>
<a id="sthref1094" href="img_text/is_json_condition.htm">Description of the illustration &#39;&#39;is_json_condition.gif&#39;&#39;</a><br/>
<br/>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">expr</span></code> to specify the JSON data to be evaluated. Specify an expression that evaluates to a text literal. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column, then the column must be of data type <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">BLOB</code>. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> evaluates to null or a text literal of length zero, then this condition returns <code dir="ltr">UNKNOWN</code>.</p>
</li>
<li>
<p>You must specify <code dir="ltr">FORMAT</code> <code dir="ltr">JSON</code> if <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column of data type <code dir="ltr">BLOB</code>.</p>
</li>
<li>
<p>If you specify <code dir="ltr">STRICT</code>, then this condition considers only strict JSON syntax to be well-formed JSON data. If you specify <code dir="ltr">LAX</code>, then this condition also considers lax JSON syntax to be well-formed JSON data. The default is <code dir="ltr">LAX</code>. Refer to <a class="olink ADXDB6259" href="../ADXDB/json.htm#ADXDB6259"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information on strict and lax JSON syntax.</p>
</li>
<li>
<p>If you specify <code dir="ltr">WITH</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">KEYS</code>, then this condition considers JSON data to be well-formed only if key names are unique within each object. If you specify <code dir="ltr">WITHOUT</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">KEYS</code>, then this condition considers JSON data to be well-formed even if duplicate key names occur within an object. A <code dir="ltr">WITHOUT</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">KEYS</code> test performs faster than a <code dir="ltr">WITH</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">KEYS</code> test. The default is <code dir="ltr">WITHOUT</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">KEYS</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="SQLRF56663"></a>Examples</p>
<p><a id="SQLRF57000"></a><span class="subhead3">Testing for STRICT or LAX JSON Syntax: Example&nbsp;</span>The following statement creates table <code dir="ltr">t</code> with column <code dir="ltr">col1</code>:</p>
<pre dir="ltr">CREATE TABLE t (col1 VARCHAR2(100));
</pre>
<p>The following statements insert values into column <code dir="ltr">col1</code> of table <code dir="ltr">t</code>:</p>
<pre dir="ltr">INSERT INTO t VALUES ( &#39;[ &#34;LIT192&#34;, &#34;CS141&#34;, &#34;HIS160&#34; ]&#39; );
INSERT INTO t VALUES ( &#39;{ &#34;Name&#34;: &#34;John&#34; }&#39; );
INSERT INTO t VALUES ( &#39;{ &#34;Grade Values&#34; : { A : 4.0, B : 3.0, C : 2.0 } }&#39;);
INSERT INTO t VALUES ( &#39;{ &#34;isEnrolled&#34; : true }&#39; );
INSERT INTO t VALUES ( &#39;{ &#34;isMatriculated&#34; : False }&#39; );
INSERT INTO t VALUES (NULL);
INSERT INTO t VALUES (&#39;This is not well-formed JSON data&#39;);
</pre>
<p>The following statement queries table <code dir="ltr">t</code> and returns <code dir="ltr">col1</code> values that are well-formed JSON data. Because neither the <code dir="ltr">STRICT</code> nor <code dir="ltr">LAX</code> keyword is specified, this example uses the default <code dir="ltr">LAX</code> setting. Therefore, this query returns values that use strict or lax JSON syntax.</p>
<pre dir="ltr">SELECT col1
  FROM t
  WHERE col1 IS JSON;

COL1
--------------------------------------------------
[ &#34;LIT192&#34;, &#34;CS141&#34;, &#34;HIS160&#34; ]
{ &#34;Name&#34;: &#34;John&#34; }
{ &#34;Grade Values&#34; : { A : 4.0, B : 3.0, C : 2.0 } }
{ &#34;isEnrolled&#34; : true }
{ &#34;isMatriculated&#34; : False }
</pre>
<p>The following statement queries table <code dir="ltr">t</code> and returns <code dir="ltr">col1</code> values that are well-formed JSON data. This example specifies the <code dir="ltr">STRICT</code> setting. Therefore, this query returns only values that use strict JSON syntax.</p>
<pre dir="ltr">SELECT col1
  FROM t
  WHERE col1 IS JSON STRICT;

COL1
--------------------------------------------------
[ &#34;LIT192&#34;, &#34;CS141&#34;, &#34;HIS160&#34; ]
{ &#34;Name&#34;: &#34;John&#34; }
{ &#34;isEnrolled&#34; : true }
</pre>
<p>The following statement queries table <code dir="ltr">t</code> and returns <code dir="ltr">col1</code> values that use lax JSON syntax, but omits <code dir="ltr">col1</code> values that use strict JSON syntax. Therefore, this query returns only values that contain the exceptions allowed in lax JSON syntax.</p>
<pre dir="ltr">SELECT col1
  FROM t
  WHERE col1 IS NOT JSON STRICT AND col1 IS JSON LAX;

COL1
--------------------------------------------------
{ &#34;Grade Values&#34; : { A : 4.0, B : 3.0, C : 2.0 } }
{ &#34;isMatriculated&#34; : False }
</pre>
<p><a id="SQLRF57001"></a><span class="subhead3">Testing for Unique Keys: Example&nbsp;</span>The following statement creates table <code dir="ltr">t</code> with column <code dir="ltr">col1</code>:</p>
<pre dir="ltr">CREATE TABLE t (col1 VARCHAR2(100));
</pre>
<p>The following statements insert values into column <code dir="ltr">col1</code> of table <code dir="ltr">t</code>:</p>
<pre dir="ltr">INSERT INTO t VALUES (&#39;{a:100, b:200, c:300}&#39;);
INSERT INTO t VALUES (&#39;{a:100, a:200, b:300}&#39;);
INSERT INTO t VALUES (&#39;{a:100, b : {a:100, c:300}}&#39;);
</pre>
<p>The following statement queries table t and returns <code dir="ltr">col1</code> values that are well-formed JSON data with unique key names within each object:</p>
<pre dir="ltr">SELECT col1 FROM t
  WHERE col1 IS JSON WITH UNIQUE KEYS;

COL1
---------------------------
{a:100, b:200, c:300}
{a:100, b : {a:100, c:300}}
</pre>
<p>The second row is returned because, while the key name <code dir="ltr">a</code> appears twice, it is in two different objects.</p>
<p>The following statement queries table <code dir="ltr">t</code> and returns <code dir="ltr">col1</code> values that are well-formed JSON data, regardless of whether there are unique key names within each object:</p>
<pre dir="ltr">SELECT col1 FROM t
  WHERE col1 IS JSON WITHOUT UNIQUE KEYS;

COL1
---------------------------
{a:100, b:200, c:300}
{a:100, a:200, b:300}
{a:100, b : {a:100, c:300}}
</pre>
<p><a id="SQLRF57002"></a><span class="subhead3">Using IS JSON as a Check Constraint: Example&nbsp;</span>The following statement creates table <code dir="ltr">j_purchaseorder</code>, which will store JSON data in column <code dir="ltr">po_document</code>. The statement uses the <code dir="ltr">IS</code> <code dir="ltr">JSON</code> condition as a check constraint to ensure that only well-formed JSON is stored in column <code dir="ltr">po_document</code>.</p>
<pre dir="ltr">CREATE TABLE j_purchaseorder
  (id RAW (16) NOT NULL,
   date_loaded TIMESTAMP(6) WITH TIME ZONE,
   po_document CLOB CONSTRAINT ensure_json CHECK (po_document IS JSON));
</pre></div>
<!-- class="sect2" -->
<a id="BABHAGEG"></a>
<div id="SQLRF56664" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">JSON_EXISTS Condition<a id="sthref1095"></a><a id="sthref1096"></a></h2>
<p>Use the <code dir="ltr">JSON_EXISTS</code> condition to test whether a specified JSON value exists in JSON data. This condition returns <code dir="ltr">TRUE</code> if the JSON value exists and <code dir="ltr">FALSE</code> if the JSON value does not exist.</p>
<p class="subhead2"><a id="SQLRF56665"></a><span class="italic">JSON_exists_condition</span>::=</p>
<img width="553" height="123" src="img/json_exists_condition.gif" alt="Description of json_exists_condition.gif follows"/><br/>
<a id="sthref1097" href="img_text/json_exists_condition.htm">Description of the illustration &#39;&#39;json_exists_condition.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABEAHJF"></a><a id="SQLRF56684"></a><a href="#BABGHIIC"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span></span></a>::=</p>
<img width="244" height="91" src="img/json_path_expression.gif" alt="Description of json_path_expression.gif follows"/><br/>
<a id="sthref1098" href="img_text/json_path_expression.htm">Description of the illustration &#39;&#39;json_path_expression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABDEGDE"></a><a id="SQLRF56685"></a><a href="#BABDFEAC"><span class="xreftitleitalic"><span class="italic">object_step</span></span></a>::=</p>
<img width="244" height="91" src="img/object_step.gif" alt="Description of object_step.gif follows"/><br/>
<a id="sthref1099" href="img_text/object_step.htm">Description of the illustration &#39;&#39;object_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABFIDHF"></a><a id="SQLRF56686"></a><a href="#BABHCAHC"><span class="xreftitleitalic"><span class="italic">array_step</span></span></a>::=</p>
<img width="334" height="123" src="img/array_step.gif" alt="Description of array_step.gif follows"/><br/>
<a id="sthref1100" href="img_text/array_step.htm">Description of the illustration &#39;&#39;array_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BABGJJFD"></a><a id="SQLRF56778"></a><a href="#BABHJEDF"><span class="xreftitleitalic"><span class="italic">JSON_exists_on_error_clause</span></span></a>::=</p>
<img width="227" height="91" src="img/json_exists_on_error_clause.gif" alt="Description of json_exists_on_error_clause.gif follows"/><br/>
<a id="sthref1101" href="img_text/json_exists_on_error_clause.htm">Description of the illustration &#39;&#39;json_exists_on_error_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56717"></a><span class="italic">expr</span></p>
<p>Use this clause to specify the JSON data to be evaluated. For <code dir="ltr"><span class="codeinlineitalic">expr</span></code>, specify an expression that evaluates to a text literal. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column, then the column must be of data type <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">BLOB</code>. If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> evaluates to null or a text literal of length zero, then the condition returns <code dir="ltr">UNKNOWN</code>.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not a text literal of well-formed JSON data using strict or lax syntax, then the condition returns <code dir="ltr">FALSE</code> by default. You can use the <code dir="ltr"><span class="codeinlineitalic">JSON_exists_on_error_clause</span></code> to override this default behavior. Refer to the <a href="#BABHJEDF"><span class="xreftitleitalic"><span class="italic">JSON_exists_on_error_clause</span></span></a>.</p>
<p class="subhead2"><a id="SQLRF57036"></a>FORMAT JSON</p>
<p>You must specify <code dir="ltr">FORMAT</code> <code dir="ltr">JSON</code> if <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is a column of data type <code dir="ltr">BLOB</code>.</p>
<p class="subhead2"><a id="BABGHIIC"></a><a id="SQLRF56687"></a><span class="italic">JSON_path_expression</span></p>
<p>Use this clause to specify a JSON path expression. The condition uses the path expression to evaluate <code dir="ltr"><span class="codeinlineitalic">expr</span></code> and determine if a JSON value that matches, or satisfies, the path expression exists. The path expression must be a text literal.</p>
<p>The path expression must begin with a dollar sign (<code dir="ltr">$</code>), which represents the context item, that is, the expression specified by <code dir="ltr"><span class="codeinlineitalic">expr</span></code>. The dollar sign is followed by zero or more steps, each of which can be an object step or an array step. The condition attempts to match the first step in the path expression to the context item. If the first step results in a match, then the condition attempts to match the second step to the JSON value(s) that matched the first step. If the second step results in a match, then the condition attempts to match the third step to the JSON value(s) that matched the second step, and so on. If the final step results in a match, then the condition returns <code dir="ltr">TRUE</code>. If any step in the path expression does not result in a match, then the condition returns <code dir="ltr">FALSE</code>. A path expression that consists of a dollar sign followed by zero steps (<code dir="ltr">&#39;$&#39;</code>) matches the entire context item.</p>
<p><a id="BABDFEAC"></a><a id="SQLRF56689"></a><span class="subhead3"><span class="italic">object_step</span>&nbsp;</span>Use this clause to specify an object step.</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> or <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> to specify a property name. If a member with that property name exists in the JSON object being evaluated, then the object step results in a match to the property value of that member. Otherwise, the object step does not result in a match. Both types of names are case-sensitive. Therefore, a match will result only if the alphabetic character cases match in the object step and the JSON data.</p>
<p>A <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> can contain only alphanumeric characters and must begin with an alphabetic character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> can contain only alphanumeric characters and spaces, and must begin with an alphanumeric character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> must be enclosed in double quotation marks.</p>
</li>
<li>
<p>Use the asterisk wildcard symbol (<code dir="ltr">*</code>) to specify all property names. If the JSON object being evaluated contains at least one member, then the object step results in a match to the values of all members. Otherwise, the object step does not result in a match.</p>
</li>
</ul>
<p>If you apply an object step to a JSON array, then the array is implicitly unwrapped and the elements of the array are evaluated using the object step. This is called JSON path expression relaxation. Refer to <a class="olink ADXDB6373" href="../ADXDB/json.htm#ADXDB6373"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information.</p>
<p>If the JSON value being evaluated is not a JSON object, then the object step does not result in a match.</p>
<p><a id="BABHCAHC"></a><a id="SQLRF56690"></a><span class="subhead3"><span class="italic">array_step</span>&nbsp;</span>Use this clause to specify an array step.</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the element at index <code dir="ltr"><span class="codeinlineitalic">integer</span></code> in a JSON array. Use <code dir="ltr"><span class="codeinlineitalic">integer</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">integer</span></code> to specify the range of elements between the two index <code dir="ltr"><span class="codeinlineitalic">integer</span></code> values, inclusive. If the specified elements exist in the JSON array being evaluated, then the array step results in a match to those elements. Otherwise, the array step does not result in a match. The first element in a JSON array has index 0.</p>
</li>
<li>
<p>Use the asterisk wildcard symbol (<code dir="ltr">*</code>) to specify all elements in a JSON array. If the JSON array being evaluated contains at least one element, then the array step results in a match to all elements in the JSON array. Otherwise, the array step does not result in a match.</p>
</li>
</ul>
<p>If the JSON data being evaluated is not a JSON array, then the data is implicitly wrapped in an array and then evaluated using the array step. This is called JSON path expression relaxation. Refer to <a class="olink ADXDB6373" href="../ADXDB/json.htm#ADXDB6373"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information.</p>
<p class="subhead2"><a id="BABHJEDF"></a><a id="SQLRF56694"></a><span class="italic">JSON_exists_on_error_clause</span></p>
<p>Use this clause to specify the value returned by this condition when <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not well-formed JSON data.</p>
<p>You can specify the following clauses:</p>
<ul>
<li>
<p><code dir="ltr">ERROR</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns the appropriate Oracle error when <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not well-formed JSON data.</p>
</li>
<li>
<p><code dir="ltr">TRUE</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns <code dir="ltr">TRUE</code> when <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not well-formed JSON data.</p>
</li>
<li>
<p><code dir="ltr">FALSE</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> - Returns <code dir="ltr">FALSE</code> when <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is not well-formed JSON data. This is the default.</p>
</li>
</ul>
<p class="subhead2"><a id="SQLRF56695"></a>Examples</p>
<p>The following statement creates table <code dir="ltr">t</code> with column <code dir="ltr">name</code>:</p>
<pre dir="ltr">CREATE TABLE t (name VARCHAR2(100));
</pre>
<p>The following statements insert values into column <code dir="ltr">name</code> of table <code dir="ltr">t</code>:</p>
<pre dir="ltr">INSERT INTO t VALUES (&#39;[{first:&#34;John&#34;}, {middle:&#34;Mark&#34;}, {last:&#34;Smith&#34;}]&#39;);
INSERT INTO t VALUES (&#39;[{first:&#34;Mary&#34;}, {last:&#34;Jones&#34;}]&#39;);
INSERT INTO t VALUES (&#39;[{first:&#34;Jeff&#34;}, {last:&#34;Williams&#34;}]&#39;);
INSERT INTO t VALUES (&#39;[{first:&#34;Jean&#34;}, {middle:&#34;Anne&#34;}, {last:&#34;Brown&#34;}]&#39;);
INSERT INTO t VALUES (NULL);
INSERT INTO t VALUES (&#39;This is not well-formed JSON data&#39;);
</pre>
<p>The following statement queries column <code dir="ltr">name</code> in table <code dir="ltr">t</code> and returns JSON data that consists of an array whose first element is an object with property name <code dir="ltr">first</code>. The <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> clause is not specified. Therefore, the <code dir="ltr">JSON_EXISTS</code> condition returns <code dir="ltr">FALSE</code> for values that are not well-formed JSON data.</p>
<pre dir="ltr">SELECT name FROM t
  WHERE JSON_EXISTS(name, &#39;$[0].first&#39;);

NAME
--------------------------------------------------
[{first:&#34;John&#34;}, {middle:&#34;Mark&#34;}, {last:&#34;Smith&#34;}]
[{first:&#34;Mary&#34;}, {last:&#34;Jones&#34;}]
[{first:&#34;Jeff&#34;}, {last:&#34;Williams&#34;}]
[{first:&#34;Jean&#34;}, {middle:&#34;Anne&#34;}, {last:&#34;Brown&#34;}]
</pre>
<p>The following statement queries column <code dir="ltr">name</code> in table <code dir="ltr">t</code> and returns JSON data that consists of an array whose second element is an object with property name <code dir="ltr">middle</code>. The <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> clause is not specified. Therefore, the <code dir="ltr">JSON_EXISTS</code> condition returns <code dir="ltr">FALSE</code> for values that are not well-formed JSON data.</p>
<pre dir="ltr">SELECT name FROM t
  WHERE JSON_EXISTS(name, &#39;$[1].middle&#39;);

NAME
--------------------------------------------------------------------------------
[{first:&#34;John&#34;}, {middle:&#34;Mark&#34;}, {last:&#34;Smith&#34;}]
[{first:&#34;Jean&#34;}, {middle:&#34;Anne&#34;}, {last:&#34;Brown&#34;}]
</pre>
<p>The following statement is similar to the previous statement, except that the <code dir="ltr">TRUE</code> <code dir="ltr">ON</code> <code dir="ltr">ERROR</code> clause is specified. Therefore, the <code dir="ltr">JSON_EXISTS</code> condition returns <code dir="ltr">TRUE</code> for values that are not well-formed JSON data.</p>
<pre dir="ltr">SELECT name FROM t
  WHERE JSON_EXISTS(name, &#39;$[1].middle&#39; TRUE ON ERROR);

NAME
--------------------------------------------------------------------------------
[{first:&#34;John&#34;}, {middle:&#34;Mark&#34;}, {last:&#34;Smith&#34;}]
[{first:&#34;Jean&#34;}, {middle:&#34;Anne&#34;}, {last:&#34;Brown&#34;}]
This is not well-formed JSON data
</pre>
<p>The following statement queries column <code dir="ltr">name</code> in table <code dir="ltr">t</code> and returns JSON data that consists of an array that contains an element that is an object with property name <code dir="ltr">last</code>. The wildcard symbol (<code dir="ltr">*</code>) is specified for the array index. Therefore, the query returns arrays that contain such an object, regardless of its index number in the array.</p>
<pre dir="ltr">SELECT name FROM t
  WHERE JSON_EXISTS(name, &#39;$[*].last&#39;);

NAME
--------------------------------------------------
[{first:&#34;John&#34;}, {middle:&#34;Mark&#34;}, {last:&#34;Smith&#34;}]
[{first:&#34;Mary&#34;}, {last:&#34;Jones&#34;}]
[{first:&#34;Jeff&#34;}, {last:&#34;Williams&#34;}]
[{first:&#34;Jean&#34;}, {middle:&#34;Anne&#34;}, {last:&#34;Brown&#34;}]
</pre></div>
<!-- class="sect2" -->
<a id="BABJFEGF"></a>
<div id="SQLRF56963" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">JSON_TEXTCONTAINS Condition<a id="sthref1102"></a><a id="sthref1103"></a></h2>
<p>Use the <code dir="ltr">JSON_TEXTCONTAINS</code> condition to test whether a specified character string exists in JSON property values. You can use this condition to filter JSON data on a specific word or number.</p>
<p>This condition takes the following arguments:</p>
<ul>
<li>
<p>A table or view column that contains JSON data. A JSON search index, which is an Oracle Text index designed specifically for use with JSON data, must be defined on the column. Each row of JSON data in the column is referred to as a <span class="bold">JSON</span> <span class="bold">document</span>.</p>
</li>
<li>
<p>A JSON path expression. The path expression is applied to each JSON document in an attempt to match a specific JSON object within the document. The path expression can contain only JSON object steps; it cannot contain JSON array steps.</p>
</li>
<li>
<p>A character string. The condition searches for the character string in all of the string and numeric property values in the matched JSON object, including array values. The string must exist as a separate word in the property value. For example, if you search for &#39;beth&#39;, then a match will be found for string property value &#34;beth smith&#34;, but not for &#34;elizabeth smith&#34;. If you search for &#39;10&#39;, then a match will be found for numeric property value 10 or string property value &#34;10 main street&#34;, but a match will not be found for numeric property value 110 or string property value &#34;102 main street&#34;.</p>
</li>
</ul>
<p>This condition returns <code dir="ltr">TRUE</code> if a match is found, and <code dir="ltr">FALSE</code> if a match is not found.</p>
<p class="subhead2"><a id="SQLRF56964"></a><span class="italic">JSON_textcontains_condition</span>::=</p>
<img width="550" height="27" src="img/json_textcontains_condition.gif" alt="Description of json_textcontains_condition.gif follows"/><br/>
<a id="sthref1104" href="img_text/json_textcontains_condition.htm">Description of the illustration &#39;&#39;json_textcontains_condition.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56965"></a><a href="#BABCGGEF"><span class="xreftitleitalic"><span class="italic">JSON_path_expression</span></span></a>::=</p>
<img width="244" height="91" src="img/json_path_expression.gif" alt="Description of json_path_expression.gif follows"/><br/>
<a id="sthref1105" href="img_text/json_path_expression.htm">Description of the illustration &#39;&#39;json_path_expression.gif&#39;&#39;</a><br/>
<br/>
<p>(<code dir="ltr">JSON_TEXTCONTAINS</code> does not support <code dir="ltr"><span class="codeinlineitalic">array_step</span></code>)</p>
<p class="subhead2"><a id="SQLRF56966"></a><a href="#BABCDAFA"><span class="xreftitleitalic"><span class="italic">object_step</span></span></a>::=</p>
<img width="244" height="91" src="img/object_step.gif" alt="Description of object_step.gif follows"/><br/>
<a id="sthref1106" href="img_text/object_step.htm">Description of the illustration &#39;&#39;object_step.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="SQLRF56967"></a><span class="italic">column</span></p>
<p>Specify the name of the table or view column containing the JSON data to be tested. The column must be of data type <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">BLOB</code>. A JSON search index, which is an Oracle Text index designed specifically for use with JSON data, must be defined on the column. If a column value is a null or a text literal of length zero, then the condition returns <code dir="ltr">UNKNOWN</code>.</p>
<p>If a column value is not a text literal of well-formed JSON data using strict or lax syntax, then the condition returns <code dir="ltr">FALSE</code>.</p>
<p class="subhead2"><a id="BABCGGEF"></a><a id="SQLRF56968"></a><span class="italic">JSON_path_expression</span></p>
<p>Use this clause to specify a JSON path expression. The condition uses the path expression to evaluate <code dir="ltr"><span class="codeinlineitalic">column</span></code> and determine if a JSON value that matches, or satisfies, the path expression exists. The path expression must be a text literal.</p>
<p>The path expression must begin with a dollar sign (<code dir="ltr">$</code>), which represents the context item, that is, <code dir="ltr"><span class="codeinlineitalic">column</span></code>. The dollar sign is followed by zero or more object steps.</p>
<p>The condition attempts to match the first step in the path expression to the context item. If the first step results in a match, then the condition attempts to match the second step to the JSON value(s) that matched the first step. If the second step results in a match, then the condition attempts to match the third step to the JSON value(s) that matched the second step, and so on. If any step in the path expression does not result in a match, then the condition returns <code dir="ltr">FALSE</code>. If the final step results in a match and the matched value contains <code dir="ltr"><span class="codeinlineitalic">string</span></code>, then the condition returns <code dir="ltr">TRUE</code>. Otherwise, the condition returns <code dir="ltr">FALSE</code>.</p>
<p>A path expression that consists of a dollar sign followed by zero object steps (<code dir="ltr">&#39;$&#39;</code>) matches the entire context item.</p>
<p><a id="BABCDAFA"></a><a id="SQLRF56969"></a><span class="subhead3"><span class="italic">object_step</span>&nbsp;</span>Use this clause to specify an object step.</p>
<ul>
<li>
<p>Use <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> or <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> to specify a property name. If a member with that property name exists in the JSON object being evaluated, then the object step results in a match to the property value of that member. Otherwise, the object step does not result in a match. Both types of names are case-sensitive. Therefore, a match will result only if the alphabetic character cases match in the object step and the JSON data.</p>
<p>A <code dir="ltr"><span class="codeinlineitalic">simple_name</span></code> can contain only alphanumeric characters and must begin with an alphabetic character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> can contain only alphanumeric characters and spaces, and must begin with an alphanumeric character. A <code dir="ltr"><span class="codeinlineitalic">complex_name</span></code> must be enclosed in double quotation marks.</p>
</li>
<li>
<p>Use the asterisk wildcard symbol (<code dir="ltr">*</code>) to specify all property names. If the JSON object being evaluated contains at least one member, then the object step results in a match to the values of all members. Otherwise, the object step does not result in a match.</p>
</li>
</ul>
<p>If you apply an object step to a JSON array, then the array is implicitly unwrapped and the elements of the array are evaluated using the object step. This is called JSON path expression relaxation. Refer to <a class="olink ADXDB6373" href="../ADXDB/json.htm#ADXDB6373"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information.</p>
<p>If the JSON value being evaluated is not a JSON object, then the object step does not result in a match.</p>
<p class="subhead2"><a id="SQLRF56970"></a><span class="italic">string</span></p>
<p>The condition searches for the character string specified by <code dir="ltr"><span class="codeinlineitalic">string</span></code>. The string must be enclosed in single quotation marks.</p>
<p class="subhead2"><a id="SQLRF56971"></a>Examples</p>
<p>The following statement creates table <code dir="ltr">families</code> with column <code dir="ltr">family_doc</code>:</p>
<pre dir="ltr">CREATE TABLE families (family_doc VARCHAR2(200));
</pre>
<p>The following statement creates a JSON search index on column <code dir="ltr">family_doc</code>:</p>
<pre dir="ltr">CREATE INDEX ix
  ON families(family_doc)
  INDEXTYPE IS CTXSYS.CONTEXT
  PARAMETERS (&#39;SECTION GROUP CTXSYS.JSON_SECTION_GROUP SYNC (ON COMMIT)&#39;);
</pre>
<p>The following statements insert JSON documents that describe families into column <code dir="ltr">family_doc</code>:</p>
<pre dir="ltr">INSERT INTO families
VALUES (&#39;{family : {id:10, ages:[40,38,12], address : {street : &#34;10 Main Street&#34;}}}&#39;);

INSERT INTO families
VALUES (&#39;{family : {id:11, ages:[42,40,10,5], address : {street : &#34;200 East Street&#34;, apt : 20}}}&#39;);

INSERT INTO families
VALUES (&#39;{family : {id:12, ages:[25,23], address : {street : &#34;300 Oak Street&#34;, apt : 10}}}&#39;);
</pre>
<p>The following statement commits the transaction:</p>
<pre dir="ltr">COMMIT;
</pre>
<p>The following query returns the JSON documents that contain <code dir="ltr">10</code> in any property value in the document:</p>
<pre dir="ltr">SELECT family_doc FROM families
  WHERE JSON_TEXTCONTAINS(family_doc, &#39;$&#39;, &#39;10&#39;);

FAMILY_DOC
--------------------------------------------------------------------------------
{family : {id:10, ages:[40,38,12], address : {street : &#34;10 Main Street&#34;}}}
{family : {id:11, ages:[42,40,10,5], address : {street : &#34;200 East Street&#34;, apt : 20}}}
{family : {id:12, ages:[25,23], address : {street : &#34;300 Oak Street&#34;, apt : 10}}}
</pre>
<p>The following query returns the JSON documents that contain 10 in the <code dir="ltr">id</code> property value:</p>
<pre dir="ltr">SELECT family_doc FROM families
  where json_textcontains(family_doc, &#39;$.family.id&#39;, &#39;10&#39;);

FAMILY_DOC
--------------------------------------------------------------------------------
{family : {id:10, ages:[40,38,12], address : {street : &#34;10 Main Street&#34;}}}
</pre>
<p>The following query returns the JSON documents that have a 10 in the array of values for the <code dir="ltr">ages</code> property:</p>
<pre dir="ltr">SELECT family_doc FROM families
  WHERE JSON_TEXTCONTAINS(family_doc, &#39;$.family.ages&#39;, &#39;10&#39;);

FAMILY_DOC
--------------------------------------------------------------------------------
{family : {id:11, ages:[42,40,10,5], address : {street : &#34;200 East Street&#34;, apt : 20}}}
</pre>
<p>The following query returns the JSON documents that have a 10 in the <code dir="ltr">address</code> property value:</p>
<pre dir="ltr">SELECT family_doc FROM families
  WHERE JSON_TEXTCONTAINS(family_doc, &#39;$.family.address&#39;, &#39;10&#39;);

FAMILY_DOC
--------------------------------------------------------------------------------
{family : {id:10, ages:[40,38,12], address : {street : &#34;10 Main Street&#34;}}}
{family : {id:12, ages:[25,23], address : {street : &#34;300 Oak Street&#34;, apt : 10}}}
</pre>
<p>The following query returns the JSON documents that have a 10 in the <code dir="ltr">apt</code> property value:</p>
<pre dir="ltr">SELECT family_doc FROM families
  WHERE JSON_TEXTCONTAINS(family_doc, &#39;$.family.address.apt&#39;, &#39;10&#39;);

FAMILY_DOC
--------------------------------------------------------------------------------
{family : {id:12, ages:[25,23], address : {street : &#34;300 Oak Street&#34;, apt : 10}}}
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="conditions009.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="conditions011.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>