<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-103550"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Hierarchical%20Queries"></a><title>Hierarchical Queries</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:52:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="queries002.htm" title="Previous" type="text/html"/>
<link rel="Next" href="queries004.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">359/555</span> <!-- End Header --><a id="i2053935"></a>
<div id="SQLRF52332" class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1">Hierarchical Queries <a id="sthref2409"></a><a id="sthref2410"></a><a id="sthref2411"></a></h1>
<p>If a table contains hierarchical data, then you can select rows in a hierarchical order using the hierarchical query clause:</p>
<p class="subhead2"><a id="SQLRF52333"></a><span class="italic">hierarchical_query_clause</span>::=</p>
<img width="610" height="98" src="img/hierarchical_query_clause.gif" alt="Description of hierarchical_query_clause.gif follows"/><br/>
<a id="sthref2412" href="img_text/hierarchical_query_clause.htm">Description of the illustration &#39;&#39;hierarchical_query_clause.gif&#39;&#39;</a><br/>
<br/>
<p><code dir="ltr"><span class="codeinlineitalic">condition</span></code> can be any condition as described in <a href="conditions.htm#g1077361">Chapter 6, &#34;Conditions&#34;</a>.</p>
<p><code dir="ltr">START</code> <code dir="ltr">WITH</code> specifies the root row(s) of the hierarchy.</p>
<p><code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> specifies the relationship between parent rows and child rows of the hierarchy.</p>
<ul>
<li>
<p>The <code dir="ltr">NOCYCLE</code> parameter instructs Oracle Database to return rows from a query even if a <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> loop exists in the data. Use this parameter along with the <code dir="ltr">CONNECT_BY_ISCYCLE</code> pseudocolumn to see which rows contain the loop. Refer to <a href="pseudocolumns001.htm#i1009434">CONNECT_BY_ISCYCLE Pseudocolumn</a> for more information.</p>
</li>
<li>
<p>In a hierarchical query, one expression in <code dir="ltr"><span class="codeinlineitalic">condition</span></code> must be qualified with the <code dir="ltr">PRIOR</code> operator to refer to the parent row. For example,</p>
<pre dir="ltr">... PRIOR expr = expr
or
... expr = PRIOR expr
</pre>
<p>If the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is compound, then only one condition requires the <code dir="ltr">PRIOR</code> operator, although you can have multiple <code dir="ltr">PRIOR</code> conditions. For example:</p>
<pre dir="ltr">CONNECT BY last_name != &#39;King&#39; AND PRIOR employee_id = manager_id ...
CONNECT BY PRIOR employee_id = manager_id and 
           PRIOR account_mgr_id = customer_id ...
</pre>
<p><code dir="ltr">PRIOR</code> is a unary operator and has the same precedence as the unary + and - arithmetic operators. It evaluates the immediately following expression for the parent row of the current row in a hierarchical query.</p>
<p><code dir="ltr">PRIOR</code> is most commonly used when comparing column values with the equality operator. (The <code dir="ltr">PRIOR</code> keyword can be on either side of the operator.) <code dir="ltr">PRIOR</code> causes Oracle to use the value of the parent row in the column. Operators other than the equal sign (=) are theoretically possible in <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> clauses. However, the conditions created by these other operators can result in an infinite loop through the possible combinations. In this case Oracle detects the loop at run time and returns an error.</p>
</li>
</ul>
<p>Both the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition and the <code dir="ltr">PRIOR</code> expression can take the form of an uncorrelated subquery. However, <code dir="ltr">CURRVAL</code> and <code dir="ltr">NEXTVAL</code> are not valid <code dir="ltr">PRIOR</code> expressions, so the <code dir="ltr">PRIOR</code> expression cannot refer to a sequence.</p>
<p>You can further refine a hierarchical query by using the <code dir="ltr">CONNECT_BY_ROOT</code> operator to qualify a column in the select list. This operator extends the functionality of the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> [<code dir="ltr">PRIOR</code>] condition of hierarchical queries by returning not only the immediate parent row but all ancestor rows in the hierarchy.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="operators004.htm#i1035022">CONNECT_BY_ROOT</a> for more information about this operator and <a href="#i2060615">&#34;Hierarchical Query Examples&#34;</a></div>
<p>Oracle processes hierarchical queries as follows:</p>
<ul>
<li>
<p>A join, if present, is evaluated first, whether the join is specified in the <code dir="ltr">FROM</code> clause or with <code dir="ltr">WHERE</code> clause predicates.</p>
</li>
<li>
<p>The <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition is evaluated.</p>
</li>
<li>
<p>Any remaining <code dir="ltr">WHERE</code> clause predicates are evaluated.</p>
</li>
</ul>
<p><a id="sthref2413"></a><a id="sthref2414"></a>Oracle then uses the information from these evaluations to form the hierarchy using the following steps:</p>
<ol>
<li>
<p>Oracle selects the root row(s) of the hierarchy&mdash;those rows that satisfy the <code dir="ltr">START</code> <code dir="ltr">WITH</code> condition.</p>
</li>
<li id="i2070828">
<p>Oracle selects the child rows of each root row. Each child row must satisfy the condition of the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition with respect to one of the root rows.</p>
</li>
<li>
<p>Oracle selects successive generations of child rows. Oracle first selects the children of the rows returned in step <a href="#i2070828">2</a>, and then the children of those children, and so on. Oracle always selects children by evaluating the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition with respect to a current parent row.</p>
</li>
<li>
<p><a id="sthref2415"></a>If the query contains a <code dir="ltr">WHERE</code> clause without a join, then Oracle eliminates all rows from the hierarchy that do not satisfy the condition of the <code dir="ltr">WHERE</code> clause. Oracle evaluates this condition for each row individually, rather than removing all the children of a row that does not satisfy the condition.</p>
</li>
<li id="i2053972">
<p>Oracle returns the rows in the order shown in <a href="#i2066595">Figure 9-1</a>. In the diagram, children appear below their parents. For an explanation of hierarchical trees, see <a href="pseudocolumns001.htm#i1009270">Figure 3-1, &#34;Hierarchical Tree&#34;</a>.</p>
</li>
</ol>
<div id="SQLRF52334" class="figure">
<p class="titleinfigure"><a id="i2066595"></a>Figure 9-1 Hierarchical Queries</p>
<img width="258" height="200" src="img/sqlrf002.gif" alt="Description of Figure 9-1 follows"/><br/>
<a id="sthref2416" href="img_text/sqlrf002.htm">Description of &#39;&#39;Figure 9-1 Hierarchical Queries&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a id="sthref2417"></a>To find the children of a parent row, Oracle evaluates the <code dir="ltr">PRIOR</code> expression of the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition for the parent row and the other expression for each row in the table. Rows for which the condition is true are the children of the parent. The <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition can contain other conditions to further filter the rows selected by the query.</p>
<p>If the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition results in a loop in the hierarchy, then Oracle returns an error. A loop occurs if one row is both the parent (or grandparent or direct ancestor) and a child (or a grandchild or a direct descendent) of another row.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In a hierarchical query, do not specify either <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> or <code dir="ltr">GROUP</code> <code dir="ltr">BY</code>, as they will override the hierarchical order of the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> results. If you want to order rows of siblings of the same parent, then use the <code dir="ltr">ORDER</code> <code dir="ltr">SIBLINGS</code> <code dir="ltr">BY</code> clause. See <a href="statements_10002.htm#i2171079"><span class="xreftitleitalic"><span class="italic">order_by_clause</span></span></a> .</div>
<a id="i2060615"></a>
<div id="SQLRF52335" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">Hierarchical Query Examples</h2>
<p><a id="SQLRF52336"></a><span class="subhead3">CONNECT BY Example&nbsp;</span>The following hierarchical query uses the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> clause to define the relationship between employees and managers:</p>
<pre dir="ltr">SELECT employee_id, last_name, manager_id
   FROM employees
   CONNECT BY PRIOR employee_id = manager_id;

EMPLOYEE_ID LAST_NAME                 MANAGER_ID
----------- ------------------------- ----------
        101 Kochhar                          100
        108 Greenberg                        101
        109 Faviet                           108
        110 Chen                             108
        111 Sciarra                          108
        112 Urman                            108
        113 Popp                             108
        200 Whalen                           101
        203 Mavris                           101
        204 Baer                             101
. . .
</pre>
<p><a id="SQLRF52337"></a><span class="subhead3">LEVEL Example&nbsp;</span>The next example is similar to the preceding example, but uses the <code dir="ltr">LEVEL</code> pseudocolumn to show parent and child rows:</p>
<pre dir="ltr">SELECT employee_id, last_name, manager_id, LEVEL
   FROM employees
   CONNECT BY PRIOR employee_id = manager_id;

EMPLOYEE_ID LAST_NAME                 MANAGER_ID      LEVEL
----------- ------------------------- ---------- ----------
        101 Kochhar                          100          1
        108 Greenberg                        101          2
        109 Faviet                           108          3
        110 Chen                             108          3
        111 Sciarra                          108          3
        112 Urman                            108          3
        113 Popp                             108          3
        200 Whalen                           101          2
        203 Mavris                           101          2
        204 Baer                             101          2
        205 Higgins                          101          2
        206 Gietz                            205          3
        102 De Haan                          100          1
...
</pre>
<p><a id="i2070904"></a><a id="SQLRF52338"></a><span class="subhead3">START WITH Examples&nbsp;</span>The next example adds a <code dir="ltr">START</code> <code dir="ltr">WITH</code> clause to specify a root row for the hierarchy and an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause using the <code dir="ltr">SIBLINGS</code> keyword to preserve ordering within the hierarchy:</p>
<pre dir="ltr">SELECT last_name, employee_id, manager_id, LEVEL
      FROM employees
      START WITH employee_id = 100
      CONNECT BY PRIOR employee_id = manager_id
      ORDER SIBLINGS BY last_name;

LAST_NAME                 EMPLOYEE_ID MANAGER_ID      LEVEL
------------------------- ----------- ---------- ----------
King                              100                     1
Cambrault                         148        100          2
Bates                             172        148          3
Bloom                             169        148          3
Fox                               170        148          3
Kumar                             173        148          3
Ozer                              168        148          3
Smith                             171        148          3
De Haan                           102        100          2
Hunold                            103        102          3
Austin                            105        103          4
Ernst                             104        103          4
Lorentz                           107        103          4
Pataballa                         106        103          4
Errazuriz                         147        100          2
Ande                              166        147          3
Banda                             167        147          3
...
</pre>
<p>In the <code dir="ltr">hr.employees</code> table, the employee Steven King is the head of the company and has no manager. Among his employees is John Russell, who is the manager of department 80. If you update the <code dir="ltr">employees</code> table to set Russell as King&#39;s manager, you create a loop in the data:</p>
<pre dir="ltr">UPDATE employees SET manager_id = 145
   WHERE employee_id = 100;

SELECT last_name &#34;Employee&#34;, 
   LEVEL, SYS_CONNECT_BY_PATH(last_name, &#39;/&#39;) &#34;Path&#34;
   FROM employees
   WHERE level &lt;= 3 AND department_id = 80
   START WITH last_name = &#39;King&#39;
   CONNECT BY PRIOR employee_id = manager_id AND LEVEL &lt;= 4;

ERROR:
ORA-01436: CONNECT BY loop in user data
</pre>
<p>The <code dir="ltr">NOCYCLE</code> parameter in the <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> condition causes Oracle to return the rows in spite of the loop. The <code dir="ltr">CONNECT_BY_ISCYCLE</code> pseudocolumn shows you which rows contain the cycle:</p>
<pre dir="ltr">SELECT last_name &#34;Employee&#34;, CONNECT_BY_ISCYCLE &#34;Cycle&#34;,
   LEVEL, SYS_CONNECT_BY_PATH(last_name, &#39;/&#39;) &#34;Path&#34;
   FROM employees
   WHERE level &lt;= 3 AND department_id = 80
   START WITH last_name = &#39;King&#39;
   CONNECT BY NOCYCLE PRIOR employee_id = manager_id AND LEVEL &lt;= 4
   ORDER BY &#34;Employee&#34;, &#34;Cycle&#34;, LEVEL, &#34;Path&#34;;

Employee                       Cycle      LEVEL Path
------------------------- ---------- ---------- -------------------------
Abel                               0          3 /King/Zlotkey/Abel
Ande                               0          3 /King/Errazuriz/Ande
Banda                              0          3 /King/Errazuriz/Banda
Bates                              0          3 /King/Cambrault/Bates
Bernstein                          0          3 /King/Russell/Bernstein
Bloom                              0          3 /King/Cambrault/Bloom
Cambrault                          0          2 /King/Cambrault
Cambrault                          0          3 /King/Russell/Cambrault
Doran                              0          3 /King/Partners/Doran
Errazuriz                          0          2 /King/Errazuriz
Fox                                0          3 /King/Cambrault/Fox
...
</pre>
<p><a id="SQLRF52339"></a><span class="subhead3">CONNECT_BY_ISLEAF Example&nbsp;</span>The following statement shows how you can use a hierarchical query to turn the values in a column into a comma-delimited list:</p>
<pre dir="ltr">SELECT LTRIM(SYS_CONNECT_BY_PATH (warehouse_id,&#39;,&#39;),&#39;,&#39;) FROM
   (SELECT ROWNUM r, warehouse_id FROM warehouses)
   WHERE CONNECT_BY_ISLEAF = 1
   START WITH r = 1
   CONNECT BY r = PRIOR r + 1
   ORDER BY warehouse_id; 
 
LTRIM(SYS_CONNECT_BY_PATH(WAREHOUSE_ID,&#39;,&#39;),&#39;,&#39;)
--------------------------------------------------------------------------------
1,2,3,4,5,6,7,8,9
</pre>
<p><a id="i2069380"></a><a id="SQLRF52340"></a><span class="subhead3">CONNECT_BY_ROOT Examples&nbsp;</span>The following example returns the last name of each employee in department 110, each manager at the highest level above that employee in the hierarchy, the number of levels between manager and employee, and the path between the two:</p>
<pre dir="ltr">SELECT last_name &#34;Employee&#34;, CONNECT_BY_ROOT last_name &#34;Manager&#34;,
   LEVEL-1 &#34;Pathlen&#34;, SYS_CONNECT_BY_PATH(last_name, &#39;/&#39;) &#34;Path&#34;
   FROM employees
   WHERE LEVEL &gt; 1 and department_id = 110
   CONNECT BY PRIOR employee_id = manager_id
   ORDER BY &#34;Employee&#34;, &#34;Manager&#34;, &#34;Pathlen&#34;, &#34;Path&#34;;

Employee        Manager            Pathlen Path
--------------- --------------- ---------- ------------------------------
Gietz           Higgins                  1 /Higgins/Gietz
Gietz           King                     3 /King/Kochhar/Higgins/Gietz
Gietz           Kochhar                  2 /Kochhar/Higgins/Gietz
Higgins         King                     2 /King/Kochhar/Higgins
Higgins         Kochhar                  1 /Kochhar/Higgins
</pre>
<p>The following example uses a <code dir="ltr">GROUP</code> <code dir="ltr">BY</code> clause to return the total salary of each employee in department 110 and all employees above that employee in the hierarchy:</p>
<pre dir="ltr">SELECT name, SUM(salary) &#34;Total_Salary&#34; FROM (
   SELECT CONNECT_BY_ROOT last_name as name, Salary
      FROM employees
      WHERE department_id = 110
      CONNECT BY PRIOR employee_id = manager_id)
      GROUP BY name
   ORDER BY name, &#34;Total_Salary&#34;;

NAME                      Total_Salary
------------------------- ------------
Gietz                             8300
Higgins                          20300
King                             20300
Kochhar                          20300
</pre>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a href="pseudocolumns001.htm#i1009261">LEVEL Pseudocolumn</a> and <a href="pseudocolumns001.htm#i1009434">CONNECT_BY_ISCYCLE Pseudocolumn</a> for a discussion of how these pseudocolumns operate in a hierarchical query</p>
</li>
<li>
<p><a href="functions198.htm#i1038266">SYS_CONNECT_BY_PATH</a> for information on retrieving the path of column values from root to node</p>
</li>
<li>
<p><a href="statements_10002.htm#i2171079"><span class="xreftitleitalic"><span class="italic">order_by_clause</span></span></a> for more information on the <code dir="ltr">SIBLINGS</code> keyword of <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clauses</p>
</li>
<li>
<p><a href="statements_10002.htm#i2077142"><span class="xreftitleitalic"><span class="italic">subquery_factoring_clause</span></span></a>, which supports recursive subquery factoring (recursive WITH) and lets you query hierarchical data. This feature is more powerful than <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code> in that it provides depth-first search and breadth-first search, and supports multiple recursive branches.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="queries002.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="queries004.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>