<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-103715"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/INSERT"></a><title>INSERT</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-18T18:53:0Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQL Language Reference"/>
<meta name="dcterms.identifier" content="E41329-25"/>
<meta name="dcterms.isVersionOf" content="SQLRF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="statements_9014.htm" title="Previous" type="text/html"/>
<link rel="Next" href="statements_9016.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41329-25.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">504/555</span> <!-- End Header --><a id="i2163698"></a>
<div id="SQLRF01604" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h1 class="refsect1">INSERT <a id="sthref7060"></a></h1>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7061"></a>Purpose <a id="sthref7062"></a><a id="sthref7063"></a><a id="sthref7064"></a><a id="sthref7065"></a><a id="sthref7066"></a><a id="sthref7067"></a><a id="sthref7068"></a></p>
<p>Use the <code dir="ltr">INSERT</code> statement to add rows to a table, the base table of a view, a partition of a partitioned table or a subpartition of a composite-partitioned table, or an object table or the base table of an object view.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7069"></a>Additional Topics</p>
<ul>
<li>
<p><a href="#i2063953">Prerequisites</a></p>
</li>
<li>
<p><a href="#i2111652">Syntax</a></p>
</li>
<li>
<p><a href="#i2145420">Semantics</a></p>
</li>
<li>
<p><a href="#i2145081">Examples</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2063953"></a>Prerequisites</p>
<p>For you to insert rows into a table, the table must be in your own schema or you must have the <code dir="ltr">INSERT</code> object privilege on the table.</p>
<p>For you to insert rows into the base table of a view, the owner of the schema containing the view must have the <code dir="ltr">INSERT</code> object privilege on the base table. Also, if the view is in a schema other than your own, then you must have the <code dir="ltr">INSERT</code> object privilege on the view.</p>
<p>If you have the <code dir="ltr">INSERT</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> system privilege, then you can also insert rows into any table or the base table of any view.</p>
<p>You must also have the <code dir="ltr">READ</code> or <code dir="ltr">SELECT</code> object privilege on the table into which you want to insert rows if the table is on a remote database.</p>
<p class="subhead2"><a id="i2191836"></a><a id="SQLRF55049"></a>Conventional and Direct-Path INSERT <a id="sthref7070"></a><a id="sthref7071"></a><a id="sthref7072"></a><a id="sthref7073"></a><a id="sthref7074"></a></p>
<p>You can use the <code dir="ltr">INSERT</code> statement to insert data into a table, partition, or view in two ways: conventional <code dir="ltr">INSERT</code> and direct-path <code dir="ltr">INSERT</code>. When you issue a conventional <code dir="ltr">INSERT</code> statement, Oracle Database reuses free space in the table into which you are inserting and maintains referential integrity constraints. With direct-path <code dir="ltr">INSERT</code>, the database appends the inserted data after existing data in the table. Data is written directly into data files, bypassing the buffer cache. Free space in the existing data is not reused. This alternative enhances performance during insert operations and is similar to the functionality of the Oracle direct-path loader utility, SQL*Loader. When you insert into a table that has been created in parallel mode, direct-path <code dir="ltr">INSERT</code> is the default.</p>
<p>The manner in which the database generates redo and undo data depends in part on whether you are using conventional or direct-path <code dir="ltr">INSERT</code>:</p>
<ul>
<li>
<p>Conventional <code dir="ltr">INSERT</code> always generates maximal redo and undo for changes to both data and metadata, regardless of the logging setting of the table and the archivelog and force logging settings of the database.</p>
</li>
<li>
<p>Direct-path <code dir="ltr">INSERT</code> generates both redo and undo for <span class="italic">metadata</span> changes, because these are needed for operation recovery. For <span class="italic">data</span> changes, undo and redo are generated as follows:</p>
<ul>
<li>
<p>Direct-path <code dir="ltr">INSERT</code> always bypasses undo generation for data changes.</p>
</li>
<li>
<p>If the database is not in <code dir="ltr">ARCHIVELOG</code> or <code dir="ltr">FORCE</code> <code dir="ltr">LOGGING</code> mode, then no redo is generated for data changes, regardless of the logging setting of the table.</p>
</li>
<li>
<p>If the database is in <code dir="ltr">ARCHIVELOG</code> mode (but not in <code dir="ltr">FORCE</code> <code dir="ltr">LOGGING</code> mode), then direct-path <code dir="ltr">INSERT</code> generates data redo for <code dir="ltr">LOGGING</code> tables but not for <code dir="ltr">NOLOGGING</code> tables.</p>
</li>
<li>
<p>If the database is in <code dir="ltr">ARCHIVELOG</code> <span class="bold">and</span> <code dir="ltr">FORCE</code> <code dir="ltr">LOGGING</code> mode, then direct-path SQL generate data redo for both <code dir="ltr">LOGGING</code> and <code dir="ltr">NOLOGGING</code> tables.</p>
</li>
</ul>
</li>
</ul>
<p>Direct-path <code dir="ltr">INSERT</code> is subject to a number of restrictions. If any of these restrictions is violated, then Oracle Database executes conventional <code dir="ltr">INSERT</code> serially without returning any message, unless otherwise noted:</p>
<ul>
<li>
<p>You can have multiple direct-path <code dir="ltr">INSERT</code> statements in a single transaction, with or without other DML statements. However, after one DML statement alters a particular table, partition, or index, no other DML statement in the transaction can access that table, partition, or index.</p>
</li>
<li>
<p>Queries that access the same table, partition, or index are allowed before the direct-path <code dir="ltr">INSERT</code> statement, but not after it.</p>
</li>
<li>
<p>If any serial or parallel statement attempts to access a table that has already been modified by a direct-path <code dir="ltr">INSERT</code> in the same transaction, then the database returns an error and rejects the statement.</p>
</li>
<li>
<p>The target table cannot be of a cluster.</p>
</li>
<li>
<p>The target table cannot contain object type columns.</p>
</li>
<li>
<p>Direct-path <code dir="ltr">INSERT</code> is not supported for an index-organized table (IOT) if it has a mapping table, or if it is reference by a materialized view.</p>
</li>
<li>
<p>Direct-path <code dir="ltr">INSERT</code> into a single partition of an index-organized table (IOT), into a partitioned IOT with only one partition, or into an IOT that is not partitioned, will be done serially, even if the IOT was created in parallel mode or you specify the <code dir="ltr">APPEND</code> or <code dir="ltr">APPEND_VALUES</code> hint. However, direct-path <code dir="ltr">INSERT</code> operations into a partitioned IOT will honor parallel mode as long as the partition-extended name is not used and the IOT has more than one partition.</p>
</li>
<li>
<p>The target table cannot have any triggers or referential integrity constraints defined on it.</p>
</li>
<li>
<p>The target table cannot be replicated.</p>
</li>
<li>
<p>A transaction containing a direct-path <code dir="ltr">INSERT</code> statement cannot be or become distributed.</p>
</li>
</ul>
<p>You cannot query or modify direct-path inserted data immediately after the insert is complete. If you attempt to do so, an <code dir="ltr">ORA-12838</code> error is generated. You must first issue a <code dir="ltr">COMMIT</code> statement before attempting to read or modify the newly-inserted data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN01509" href="../ADMIN/tables.htm#ADMIN01509"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for a more complete description of direct-path <code dir="ltr">INSERT</code></p>
</li>
<li>
<p><a class="olink SUTIL003" href="../SUTIL/GUID-DD843EE2-1FAB-4E72-A115-21D97A501ECC.htm#SUTIL003"><span class="italic">Oracle Database Utilities</span></a> for information on SQL*Loader</p>
</li>
<li>
<p><a class="olink TGSQL344" href="../TGSQL/tgsql_statscon.htm#TGSQL344"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for information on statistics gathering when inserting into an empty table using direct-path <code dir="ltr">INSERT</code></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2111652"></a>Syntax</p>
<p class="subhead2"><a id="SQLRF55050"></a><span class="italic">insert</span>::=</p>
<img width="350" height="64" src="img/insert.gif" alt="Description of insert.gif follows"/><br/>
<a id="sthref7075" href="img_text/insert.htm">Description of the illustration &#39;&#39;insert.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2121671"><span class="xreftitleitalic"><span class="italic">single_table_insert</span> ::=</span></a>, <a href="#i2121682"><span class="xreftitleitalic"><span class="italic">multi_table_insert</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2121671"></a><a id="SQLRF55051"></a><a href="#i2079995"><span class="xreftitleitalic"><span class="italic">single_table_insert</span></span></a> ::=</p>
<img width="602" height="79" src="img/single_table_insert.gif" alt="Description of single_table_insert.gif follows"/><br/>
<a id="sthref7076" href="img_text/single_table_insert.htm">Description of the illustration &#39;&#39;single_table_insert.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2121694"><span class="xreftitleitalic"><span class="italic">insert_into_clause</span> ::=</span></a>, <a href="#i2122346"><span class="xreftitleitalic"><span class="italic">values_clause</span> ::=</span></a>, <a href="#i2122356"><span class="xreftitleitalic"><span class="italic">returning_clause</span>::=</span></a>, <a href="statements_10002.htm#i2126435"><span class="xreftitleitalic"><span class="italic">subquery</span>::=</span></a>, <a href="#BGBDIGAH"><span class="xreftitleitalic"><span class="italic">error_logging_clause</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2121694"></a><a id="SQLRF55052"></a><a href="#i2080498"><span class="xreftitleitalic"><span class="italic">insert_into_clause</span></span></a> ::=</p>
<img width="553" height="79" src="img/insert_into_clause.gif" alt="Description of insert_into_clause.gif follows"/><br/>
<a id="sthref7077" href="img_text/insert_into_clause.htm">Description of the illustration &#39;&#39;insert_into_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2126242"><span class="xreftitleitalic"><span class="italic">DML_table_expression_clause</span>::=</span></a>)</p>
<p class="subhead2"><a id="i2122346"></a><a id="SQLRF55053"></a><a href="#i2064185"><span class="xreftitleitalic"><span class="italic">values_clause</span></span></a> ::=</p>
<img width="289" height="91" src="img/values_clause.gif" alt="Description of values_clause.gif follows"/><br/>
<a id="sthref7078" href="img_text/values_clause.htm">Description of the illustration &#39;&#39;values_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2122356"></a><a id="SQLRF55054"></a><a href="#BABJFHEF"><span class="xreftitleitalic"><span class="italic">returning_clause</span></span></a>::=<a id="sthref7079"></a></p>
<img width="383" height="76" src="img/returning_clause.gif" alt="Description of returning_clause.gif follows"/><br/>
<a id="sthref7080" href="img_text/returning_clause.htm">Description of the illustration &#39;&#39;returning_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2121682"></a><a id="SQLRF55055"></a><a href="#i2095116"><span class="xreftitleitalic"><span class="italic">multi_table_insert</span></span></a> ::=</p>
<img width="642" height="91" src="img/multi_table_insert.gif" alt="Description of multi_table_insert.gif follows"/><br/>
<a id="sthref7081" href="img_text/multi_table_insert.htm">Description of the illustration &#39;&#39;multi_table_insert.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2121694"><span class="xreftitleitalic"><span class="italic">insert_into_clause</span> ::=</span></a>, <a href="#i2122346"><span class="xreftitleitalic"><span class="italic">values_clause</span> ::=</span></a>, <a href="#i2121821"><span class="xreftitleitalic"><span class="italic">conditional_insert_clause</span> ::=</span></a>, <a href="statements_10002.htm#i2126435"><span class="xreftitleitalic"><span class="italic">subquery</span>::=</span></a>, <a href="#BGBDIGAH"><span class="xreftitleitalic"><span class="italic">error_logging_clause</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2121821"></a><a id="SQLRF55056"></a><a href="#i2079970"><span class="xreftitleitalic"><span class="italic">conditional_insert_clause</span></span></a> ::=</p>
<img width="850" height="175" src="img/conditional_insert_clause.gif" alt="Description of conditional_insert_clause.gif follows"/><br/>
<a id="sthref7082" href="img_text/conditional_insert_clause.htm">Description of the illustration &#39;&#39;conditional_insert_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="#i2121694"><span class="xreftitleitalic"><span class="italic">insert_into_clause</span> ::=</span></a>, <a href="#i2122346"><span class="xreftitleitalic"><span class="italic">values_clause</span> ::=</span></a>)</p>
<p class="subhead2"><a id="i2126242"></a><a id="SQLRF55057"></a><a href="#i2080505"><span class="xreftitleitalic"><span class="italic">DML_table_expression_clause</span></span></a>::=</p>
<img width="513" height="232" src="img/dml_table_expression_clause.gif" alt="Description of dml_table_expression_clause.gif follows"/><br/>
<a id="sthref7083" href="img_text/dml_table_expression_clause.htm">Description of the illustration &#39;&#39;dml_table_expression_clause.gif&#39;&#39;</a><br/>
<br/>
<p>(<a href="statements_9016.htm#BABBDIIJ"><span class="xreftitleitalic"><span class="italic">partition_extension_clause</span>::=</span></a>, <a href="statements_10002.htm#i2126435"><span class="xreftitleitalic"><span class="italic">subquery</span>::=</span></a>&mdash;part of <code dir="ltr">SELECT</code>, <a href="#i2121860"><span class="xreftitleitalic"><span class="italic">subquery_restriction_clause</span>::=</span></a>, <a href="#i2121871"><span class="xreftitleitalic"><span class="italic">table_collection_expression</span> ::=</span></a>)</p>
<p class="subhead2"><a id="SQLRF55058"></a><span class="italic">partition_extension_clause</span>::=</p>
<img width="475" height="187" src="img/partition_extension_clause.gif" alt="Description of partition_extension_clause.gif follows"/><br/>
<a id="sthref7084" href="img_text/partition_extension_clause.htm">Description of the illustration &#39;&#39;partition_extension_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2121860"></a><a id="SQLRF55059"></a><a href="#i2198448"><span class="xreftitleitalic"><span class="italic">subquery_restriction_clause</span></span></a>::=</p>
<img width="463" height="64" src="img/subquery_restriction_clause.gif" alt="Description of subquery_restriction_clause.gif follows"/><br/>
<a id="sthref7085" href="img_text/subquery_restriction_clause.htm">Description of the illustration &#39;&#39;subquery_restriction_clause.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="i2121871"></a><a id="SQLRF55060"></a><a href="#i2080063"><span class="xreftitleitalic"><span class="italic">table_collection_expression</span></span></a> ::=</p>
<img width="414" height="46" src="img/table_collection_expression.gif" alt="Description of table_collection_expression.gif follows"/><br/>
<a id="sthref7086" href="img_text/table_collection_expression.htm">Description of the illustration &#39;&#39;table_collection_expression.gif&#39;&#39;</a><br/>
<br/>
<p class="subhead2"><a id="BGBDIGAH"></a><a id="SQLRF55061"></a><a href="#BGBEIACB"><span class="xreftitleitalic"><span class="italic">error_logging_clause</span></span></a> ::=</p>
<img width="662" height="166" src="img/error_logging_clause.gif" alt="Description of error_logging_clause.gif follows"/><br/>
<a id="sthref7087" href="img_text/error_logging_clause.htm">Description of the illustration &#39;&#39;error_logging_clause.gif&#39;&#39;</a><br/>
<br/></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2145420"></a>Semantics</p>
<p class="subhead1"><a id="SQLRF55062"></a><span class="italic">hint</span></p>
<p>Specify a comment that passes instructions to the optimizer on choosing an execution plan for the statement.</p>
<p>For a multitable insert, if you specify the <code dir="ltr">PARALLEL</code> hint for any target table, then the entire multitable insert statement is parallelized even if the target tables have not been created or altered with <code dir="ltr">PARALLEL</code> specified. If you do not specify the <code dir="ltr">PARALLEL</code> hint, then the insert operation will not be parallelized unless all target tables were created or altered with <code dir="ltr">PARALLEL</code> specified.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sql_elements006.htm#i35922">&#34;Hints&#34;</a> for the syntax and description of hints</p>
</li>
<li>
<p><a href="#i2080134">&#34;Restrictions on Multitable Inserts&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead1"><a id="i2079995"></a><a id="SQLRF55063"></a><span class="italic">single_table_insert <a id="sthref7088"></a><a id="sthref7089"></a></span></p>
<p>In a <span class="bold">single-table insert</span>, you insert values into one row of a table, view, or materialized view by specifying values explicitly or by retrieving the values through a subquery.</p>
<p><span class="italic"><a id="sthref7090"></a></span>You can use the <code dir="ltr"><span class="codeinlineitalic">flashback_query_clause</span></code> in <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> to insert past data into <code dir="ltr"><span class="codeinlineitalic">table</span></code>. Refer to the <a href="statements_10002.htm#i2112818"><span class="xreftitleitalic"><span class="italic">flashback_query_clause</span></span></a> of <code dir="ltr">SELECT</code> for more information on this clause.</p>
<p><a id="SQLRF55064"></a><span class="subhead3">Restriction on Single-table Inserts&nbsp;</span>If you retrieve values through a subquery, then the select list of the subquery must have the same number of columns as the column list of the <code dir="ltr">INSERT</code> statement. If you omit the column list, then the subquery must provide values for every column in the table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2145074">&#34;Inserting Values into Tables: Examples&#34;</a></div>
<p class="subhead1"><a id="i2080498"></a><a id="SQLRF55065"></a><span class="italic">insert_into_clause <a id="sthref7091"></a></span></p>
<p>Use the <code dir="ltr">INSERT</code> <code dir="ltr">INTO</code> clause to specify the target object or objects into which the database is to insert data.</p>
<p class="subhead2"><a id="i2080505"></a><a id="SQLRF55066"></a><span class="italic">DML_table_expression_clause</span></p>
<p>Use the <code dir="ltr">INTO</code> <code dir="ltr"><span class="codeinlineitalic">DML_table_expression_clause</span></code> to specify the objects into which data is being inserted.</p>
<p><a id="SQLRF55067"></a><span class="subhead3"><span class="italic">schema</span>&nbsp;</span>Specify the schema containing the table, view, or materialized view. If you omit <code dir="ltr"><span class="codeinlineitalic">schema</span></code>, then the database assumes the object is in your own schema.</p>
<p><a id="SQLRF55068"></a><span class="subhead3"><span class="italic">table</span> | <span class="italic">view</span> | <span class="italic">materialized_view</span> | <span class="italic">subquery</span>&nbsp;</span>Specify the name of the table or object table, view or object view, materialized view, or the column or columns returned by a subquery, into which rows are to be inserted. If you specify a view or object view, then the database inserts rows into the base table of the view.</p>
<p>You cannot insert rows into a read-only materialized view. If you insert rows into a writable materialized view, then the database inserts the rows into the underlying container table. However, the insertions are overwritten at the next refresh operation. If you insert rows into an updatable materialized view that is part of a materialized view group, then the database also inserts the corresponding rows into the master table.</p>
<p>If any value to be inserted is a <code dir="ltr">REF</code> to an object table, and if the object table has a primary key object identifier, then the column into which you insert the <code dir="ltr">REF</code> must be a <code dir="ltr">REF</code> column with a referential integrity or <code dir="ltr">SCOPE</code> constraint to the object table.</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">table</span></code>, or the base table of <code dir="ltr"><span class="codeinlineitalic">view</span></code>, contains one or more domain index columns, then this statement executes the appropriate indextype insert routine.</p>
<p>Issuing an <code dir="ltr">INSERT</code> statement against a table fires any <code dir="ltr">INSERT</code> triggers defined on the table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADDCI4200" href="../ADDCI/ext_idx_ref.htm#ADDCI4200"><span class="italic">Oracle Database Data Cartridge Developer&#39;s Guide</span></a> for more information on these routines</div>
<p><a id="SQLRF55069"></a><span class="subhead3">Restrictions on the <span class="italic">DML_table_expression_clause</span>&nbsp;</span>This clause is subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot execute this statement if <code dir="ltr"><span class="codeinlineitalic">table</span></code> or the base table of <code dir="ltr"><span class="codeinlineitalic">view</span></code> contains any domain indexes marked <code dir="ltr">IN_PROGRESS</code> or <code dir="ltr">FAILED</code>.</p>
</li>
<li>
<p>You cannot insert into a partition if any affected index partitions are marked <code dir="ltr">UNUSABLE</code>.</p>
</li>
<li>
<p>With regard to the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause of the <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> in the <code dir="ltr"><span class="codeinlineitalic">DML_table_expression_clause</span></code>, ordering is guaranteed only for the rows being inserted, and only within each extent of the table. Ordering of new rows with respect to existing rows is not guaranteed.</p>
</li>
<li>
<p>If a view was created using the <code dir="ltr">WITH</code> <code dir="ltr">CHECK</code> <code dir="ltr">OPTION</code>, then you can insert into the view only rows that satisfy the defining query of the view.</p>
</li>
<li>
<p>If a view was created using a single base table, then you can insert rows into the view and then retrieve those values using the <code dir="ltr"><span class="codeinlineitalic">returning_clause</span></code>.</p>
</li>
<li>
<p><a id="sthref7092"></a>You cannot insert rows into a view except with <code dir="ltr">INSTEAD</code> <code dir="ltr">OF</code> triggers if the defining query of the view contains one of the following constructs:</p>
<dl>
<dd>A set operator</dd>
<dd>A <code dir="ltr">DISTINCT</code> operator</dd>
<dd>An aggregate or analytic function</dd>
<dd>A <code dir="ltr">GROUP</code> <code dir="ltr">BY</code>, <code dir="ltr">ORDER</code> <code dir="ltr">BY</code>, <code dir="ltr">MODEL</code>, <code dir="ltr">CONNECT</code> <code dir="ltr">BY</code>, or <code dir="ltr">START</code> <code dir="ltr">WITH</code> clause</dd>
<dd>A collection expression in a <code dir="ltr">SELECT</code> list</dd>
<dd>A subquery in a <code dir="ltr">SELECT</code> list</dd>
<dd>A subquery designated <code dir="ltr">WITH READ ONLY</code></dd>
<dd>Joins, with some exceptions, as documented in <a class="olink ADMIN020" href="../ADMIN/views.htm#ADMIN020"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a></dd>
</dl>
</li>
<li>
<p>If you specify an index, index partition, or index subpartition that has been marked <code dir="ltr">UNUSABLE</code>, then the <code dir="ltr">INSERT</code> statement will fail unless the <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> session parameter has been set to <code dir="ltr">TRUE</code>. Refer to <a href="statements_2015.htm#i2231814">ALTER SESSION</a> for information on the <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> session parameter.</p>
</li>
</ul>
<p><a id="SQLRF55070"></a><span class="subhead3"><span class="italic">partition_extension_clause</span> <a id="sthref7093"></a><a id="sthref7094"></a><a id="sthref7095"></a><a id="sthref7096"></a><a id="sthref7097"></a><a id="sthref7098"></a>&nbsp;</span>Specify the name or partition key value of the partition or subpartition within <code dir="ltr"><span class="codeinlineitalic">table</span></code>, or the base table of <code dir="ltr"><span class="codeinlineitalic">view</span></code>, targeted for inserts.</p>
<p>If a row to be inserted does not map into a specified partition or subpartition, then the database returns an error.</p>
<p><a id="SQLRF55071"></a><span class="subhead3">Restriction on Target Partitions and Subpartitions&nbsp;</span>This clause is not valid for object tables or object views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sql_elements009.htm#i165979">&#34;References to Partitioned Tables and Indexes&#34;</a></div>
<p><a id="SQLRF55072"></a><span class="subhead3"><span class="italic">dblink <a id="sthref7099"></a><a id="sthref7100"></a></span>&nbsp;</span>Specify a complete or partial name of a database link to a remote database where the table or view is located. You can insert rows into a remote table or view only if you are using Oracle Database distributed functionality.</p>
<p>If you omit <code dir="ltr"><span class="codeinlineitalic">dblink</span></code>, then Oracle Database assumes that the table or view is on the local database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sql_elements009.htm#i33367">&#34;Syntax for Schema Objects and Parts in SQL Statements&#34;</a> and <a href="sql_elements009.htm#i27761">&#34;References to Objects in Remote Databases&#34;</a> for information on referring to database links</p>
</li>
<li>
<p><a href="#i2126166">&#34;Inserting into a Remote Database: Example&#34;</a></p>
</li>
</ul>
</div>
<p><a id="i2198448"></a><a id="SQLRF55073"></a><span class="subhead3"><span class="italic">subquery_restriction_clause</span>&nbsp;</span>Use the <code dir="ltr"><span class="codeinlineitalic">subquery_restriction_clause</span></code> to restrict the subquery in one of the following ways:</p>
<p><a id="SQLRF55074"></a><span class="subhead3">WITH READ ONLY&nbsp;</span>Specify <code dir="ltr">WITH READ ONLY</code> to indicate that the table or view cannot be updated.</p>
<p><a id="SQLRF55075"></a><span class="subhead3">WITH CHECK OPTION&nbsp;</span>Specify <code dir="ltr">WITH CHECK OPTION</code> to indicate that Oracle Database prohibits any changes to the table or view that would produce rows that are not included in the subquery. When used in the subquery of a DML statement, you can specify this clause in a subquery in the <code dir="ltr">FROM</code> clause but not in subquery in the <code dir="ltr">WHERE</code> clause.</p>
<p><a id="SQLRF55076"></a><span class="subhead3">CONSTRAINT <span class="italic">constraint</span>&nbsp;</span>Specify the name of the <code dir="ltr">CHECK OPTION</code> constraint. If you omit this identifier, then Oracle automatically assigns the constraint a name of the form <code dir="ltr">SYS_C</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>, where n is an integer that makes the constraint name unique within the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_10002.htm#i2066598">&#34;Using the WITH CHECK OPTION Clause: Example&#34;</a></div>
<p><a id="i2080063"></a><a id="SQLRF55077"></a><span class="subhead3"><span class="italic">table_collection_expression</span> <span class="italic"><a id="sthref7101"></a><a id="sthref7102"></a><a id="sthref7103"></a></span>&nbsp;</span></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">table_collection_expression</span></code> lets you inform Oracle that the value of <code dir="ltr"><span class="codeinlineitalic">collection_expression</span></code> should be treated as a table for purposes of query and DML operations. The <code dir="ltr"><span class="codeinlineitalic">collection_expression</span></code> can be a subquery, a column, a function, or a collection constructor. Regardless of its form, it must return a collection value&mdash;that is, a value whose type is nested table or varray. This process of extracting the elements of a collection is called <span class="bold">collection unnesting</span>.</p>
<p>The optional plus (+) is relevant if you are joining the <code dir="ltr">TABLE</code> collection expression with the parent table. The + creates an outer join of the two, so that the query returns rows from the outer table even if the collection expression is null.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In earlier releases of Oracle, when <code dir="ltr"><span class="codeinlineitalic">collection_expression</span></code> was a subquery, <code dir="ltr"><span class="codeinlineitalic">table_collection_expression</span></code> was expressed as <code dir="ltr">THE</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>. That usage is now deprecated.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="statements_10002.htm#i2071643">&#34;Table Collections: Examples&#34;</a></div>
<p class="subhead2"><a id="SQLRF55078"></a><span class="italic">t_alias</span></p>
<p>Specify a <span class="bold">correlation name</span>, which is an alias for the table, view, materialized view, or subquery to be referenced elsewhere in the statement.</p>
<p><a id="SQLRF55079"></a><span class="subhead3">Restriction on Table Aliases&nbsp;</span>You cannot specify <code dir="ltr"><span class="codeinlineitalic">t_alias</span></code> during a multitable insert.</p>
<p class="subhead1"><a id="SQLRF55080"></a><span class="italic">column <a id="sthref7104"></a><a id="sthref7105"></a></span></p>
<p>Specify a column of the table, view, or materialized view. In the inserted row, each column in this list is assigned a value from the <code dir="ltr"><span class="codeinlineitalic">values_clause</span></code> or the subquery. If you want to assign a value to an <code dir="ltr">INVISIBLE</code> column, then you must include the column in this list.</p>
<p>If you omit one or more of the table&#39;s columns from this list, then the column value of that column for the inserted row is the column default value as specified when the table was created or last altered. If any omitted column has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint and no default value, then the database returns an error indicating that the constraint has been violated and rolls back the <code dir="ltr">INSERT</code> statement. Refer to <a href="statements_7002.htm#i2095331">CREATE TABLE</a> for more information on default column values.</p>
<p>If you omit the column list altogether, then the <code dir="ltr"><span class="codeinlineitalic">values_clause</span></code> or query must specify values for all columns in the table.</p>
<p class="subhead1"><a id="i2064185"></a><a id="SQLRF55081"></a><span class="italic">values_clause <a id="sthref7106"></a></span></p>
<p>For a <span class="bold">single-table insert</span> operation, specify a row of values to be inserted into the table or view. You must specify a value in the <code dir="ltr"><span class="codeinlineitalic">values_clause</span></code> for each column in the column list. If you omit the column list, then the <code dir="ltr"><span class="codeinlineitalic">values_clause</span></code> must provide values for every column in the table.</p>
<p>For a <span class="bold">multitable insert</span> operation, each expression in the <code dir="ltr"><span class="codeinlineitalic">values_clause</span></code> must refer to columns returned by the select list of the subquery. If you omit the <code dir="ltr"><span class="codeinlineitalic">values_clause</span></code>, then the select list of the subquery determines the values to be inserted, so it must have the same number of columns as the column list of the corresponding <code dir="ltr"><span class="codeinlineitalic">insert_into_clause</span></code>. If you do not specify a column list in the <code dir="ltr"><span class="codeinlineitalic">insert_into_clause</span></code>, then the computed row must provide values for all columns in the target table.</p>
<p>For both types of insert operations, if you specify a column list in the <code dir="ltr"><span class="codeinlineitalic">insert_into_clause</span></code>, then the database assigns to each column in the list a corresponding value from the values clause or the subquery. You can specify <code dir="ltr">DEFAULT</code> for any value in the <code dir="ltr"><span class="codeinlineitalic">values_clause</span></code>. If you have specified a default value for the corresponding column of the table or view, then that value is inserted. If no default value for the corresponding column has been specified, then the database inserts null. Refer to <a href="expressions001.htm#i1002626">&#34;About SQL Expressions&#34;</a> and <a href="statements_10002.htm#i2065646">SELECT</a> for syntax of valid expressions.</p>
<p><a id="SQLRF55082"></a><span class="subhead3">Restrictions on Inserted Values&nbsp;</span>The value are subject to the following restrictions:</p>
<ul>
<li>
<p>You cannot insert a <code dir="ltr">BFILE</code> value until you have initialized the <code dir="ltr">BFILE</code> locator to null or to a directory name and filename.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="functions020.htm#i76871">BFILENAME</a> for information on initializing <code dir="ltr">BFILE</code> values and for an example of inserting into a <code dir="ltr">BFILE</code></p>
</li>
<li>
<p><a class="olink ADLOB002" href="../ADLOB/adlob_working.htm#ADLOB002"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for information on initializing <code dir="ltr">BFILE</code> locators</p>
</li>
</ul>
</div>
</li>
<li>
<p>When inserting into a list-partitioned table, you cannot insert a value into the partitioning key column that does not already exist in the <code dir="ltr"><span class="codeinlineitalic">partition_key_value</span></code> list of one of the partitions.</p>
</li>
<li>
<p>You cannot specify <code dir="ltr">DEFAULT</code> when inserting into a view.</p>
</li>
<li>
<p>If you insert string literals into a <code dir="ltr">RAW</code> column, then during subsequent queries Oracle Database will perform a full table scan rather than using any index that might exist on the <code dir="ltr">RAW</code> column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="ap_examples002.htm#i686084">&#34;Using XML in SQL Statements&#34;</a> for information on inserting values into an XMLType table</p>
</li>
<li>
<p><a href="#i2085891">&#34;Inserting into a Substitutable Tables and Columns: Examples&#34;</a>, <a href="#i2085882">&#34;Inserting Using the TO_LOB Function: Example&#34;</a>, <a href="#i2102477">&#34;Inserting Sequence Values: Example&#34;</a>, and <a href="#i2126188">&#34;Inserting Using Bind Variables: Example&#34;</a></p>
</li>
</ul>
</div>
</li>
</ul>
<p class="subhead1"><a id="BABJFHEF"></a><a id="SQLRF55083"></a><span class="italic">returning_clause</span></p>
<p><a id="sthref7107"></a>The returning clause retrieves the rows affected by a DML statement. You can specify this clause for tables and materialized views and for views with a single base table.</p>
<p>When operating on a single row, a DML statement with a <code dir="ltr"><span class="codeinlineitalic">returning_clause</span></code> can retrieve column expressions using the affected row, rowid, and <code dir="ltr">REFs</code> to the affected row and store them in host variables or PL/SQL variables.</p>
<p>When operating on multiple rows, a DML statement with the <code dir="ltr"><span class="codeinlineitalic">returning_clause</span></code> stores values from expressions, rowids, and <code dir="ltr">REFs</code> involving the affected rows in bind arrays.</p>
<p><a id="SQLRF55084"></a><span class="subhead3"><span class="italic">expr</span>&nbsp;</span>Each item in the <code dir="ltr"><span class="codeinlineitalic">expr</span></code> list must be a valid expression syntax.</p>
<p><a id="SQLRF55085"></a><span class="subhead3">INTO&nbsp;</span>The <code dir="ltr">INTO</code> clause indicates that the values of the changed rows are to be stored in the variable(s) specified in <code dir="ltr"><span class="codeinlineitalic">data_item</span></code> list.</p>
<p><a id="SQLRF55086"></a><span class="subhead3"><span class="italic">data_item</span>&nbsp;</span>Each <code dir="ltr"><span class="codeinlineitalic">data_item</span></code> is a host variable or PL/SQL variable that stores the retrieved <code dir="ltr"><span class="codeinlineitalic">expr</span></code> value.</p>
<p>For each expression in the <code dir="ltr">RETURNING</code> list, you must specify a corresponding type-compatible PL/SQL variable or host variable in the <code dir="ltr">INTO</code> list.</p>
<p><a id="SQLRF55087"></a><span class="subhead3">Restrictions&nbsp;</span>The following restrictions apply to the <code dir="ltr">RETURNING</code> clause:</p>
<ul>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">expr</span></code> is restricted as follows:</p>
<ul>
<li>
<p>For <code dir="ltr">UPDATE</code> and <code dir="ltr">DELETE</code> statements each <code dir="ltr"><span class="codeinlineitalic">expr</span></code> must be a simple expression or a single-set aggregate function expression. You cannot combine simple expressions and single-set aggregate function expressions in the same <code dir="ltr"><span class="codeinlineitalic">returning_clause</span></code>. For <code dir="ltr">INSERT</code> statements, each <code dir="ltr"><span class="codeinlineitalic">expr</span></code> must be a simple expression. Aggregate functions are not supported in an <code dir="ltr">INSERT</code> statement <code dir="ltr">RETURNING</code> clause.</p>
</li>
<li>
<p>Single-set aggregate function expressions cannot include the <code dir="ltr">DISTINCT</code> keyword.</p>
</li>
</ul>
</li>
<li>
<p>If the <code dir="ltr"><span class="codeinlineitalic">expr</span></code> list contains a primary key column or other <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> column, then the update statement fails if the table has a <code dir="ltr">BEFORE</code> <code dir="ltr">UPDATE</code> trigger defined on it.</p>
</li>
<li>
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">returning_clause</span></code> for a multitable insert.</p>
</li>
<li>
<p>You cannot use this clause with parallel DML or with remote objects.</p>
</li>
<li>
<p>You cannot retrieve <code dir="ltr">LONG</code> types with this clause.</p>
</li>
<li>
<p>You cannot specify this clause for a view on which an <code dir="ltr">INSTEAD</code> <code dir="ltr">OF</code> trigger has been defined.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS005" href="../LNPLS/composites.htm#LNPLS005"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information on using the <code dir="ltr">BULK</code> <code dir="ltr">COLLECT</code> clause to return multiple values to collection variables</div>
<p class="subhead1"><a id="i2095116"></a><a id="SQLRF55088"></a><span class="italic">multi_table_insert <a id="sthref7108"></a><a id="sthref7109"></a><a id="sthref7110"></a><a id="sthref7111"></a></span></p>
<p>In a <span class="bold">multitable insert</span>, you insert computed rows derived from the rows returned from the evaluation of a subquery into one or more tables.</p>
<p>Table aliases are not defined by the select list of the subquery. Therefore, they are not visible in the clauses dependent on the select list. For example, this can happen when trying to refer to an object column in an expression. To use an expression with a table alias, you must put the expression into the select list with a column alias, and then refer to the column alias in the <code dir="ltr">VALUES</code> clause or <code dir="ltr">WHEN</code> condition of the multitable insert.</p>
<p class="subhead2"><a id="SQLRF55089"></a>ALL <span class="italic">into_clause</span></p>
<p>Specify <code dir="ltr">ALL</code> followed by multiple <code dir="ltr"><span class="codeinlineitalic">insert_into_clauses</span></code> to perform an <span class="bold">unconditional multitable insert</span>. Oracle Database executes each <code dir="ltr"><span class="codeinlineitalic">insert_into_clause</span></code> once for each row returned by the subquery.</p>
<p class="subhead2"><a id="i2079970"></a><a id="SQLRF55090"></a><span class="italic">conditional_insert_clause <a id="sthref7112"></a><a id="sthref7113"></a></span></p>
<p>Specify the <code dir="ltr"><span class="codeinlineitalic">conditional_insert_clause</span></code> to perform a <span class="bold">conditional multitable insert</span>. Oracle Database filters each <code dir="ltr"><span class="codeinlineitalic">insert_into_clause</span></code> through the corresponding <code dir="ltr">WHEN</code> condition, which determines whether that <code dir="ltr"><span class="codeinlineitalic">insert_into_clause</span></code> is executed. Each expression in the <code dir="ltr">WHEN</code> condition must refer to columns returned by the select list of the subquery. A single multitable insert statement can contain up to 127 <code dir="ltr">WHEN</code> clauses.</p>
<p><a id="SQLRF55091"></a><span class="subhead3">ALL&nbsp;</span>If you specify <code dir="ltr">ALL</code>, the default value, then the database evaluates each <code dir="ltr">WHEN</code> clause regardless of the results of the evaluation of any other <code dir="ltr">WHEN</code> clause. For each <code dir="ltr">WHEN</code> clause whose condition evaluates to true, the database executes the corresponding <code dir="ltr">INTO</code> clause list.</p>
<p><a id="SQLRF55092"></a><span class="subhead3">FIRST&nbsp;</span>If you specify <code dir="ltr">FIRST</code>, then the database evaluates each <code dir="ltr">WHEN</code> clause in the order in which it appears in the statement. For the first <code dir="ltr">WHEN</code> clause that evaluates to true, the database executes the corresponding <code dir="ltr">INTO</code> clause and skips subsequent <code dir="ltr">WHEN</code> clauses for the given row.</p>
<p><a id="SQLRF55093"></a><span class="subhead3">ELSE clause&nbsp;</span>For a given row, if no <code dir="ltr">WHEN</code> clause evaluates to true, then:</p>
<ul>
<li>
<p>If you have specified an <code dir="ltr">ELSE</code> clause, then the database executes the <code dir="ltr">INTO</code> clause list associated with the <code dir="ltr">ELSE</code> clause.</p>
</li>
<li>
<p>If you did not specify an else clause, then the database takes no action for that row.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2125362">&#34;Multitable Inserts: Examples&#34;</a></div>
<p><a id="i2080134"></a><a id="SQLRF55094"></a><span class="subhead3">Restrictions on Multitable Inserts&nbsp;</span>Multitable inserts are subject to the following restrictions:</p>
<ul>
<li>
<p>You can perform multitable inserts only on tables, not on views or materialized views.</p>
</li>
<li>
<p>You cannot perform a multitable insert into a remote table.</p>
</li>
<li>
<p>You cannot specify a <code dir="ltr">TABLE</code> collection expression when performing a multitable insert.</p>
</li>
<li>
<p>Multitable inserts are not parallelized if any target table is index organized or if any target table has a bitmap index defined on it.</p>
</li>
<li>
<p>Plan stability is not supported for multitable insert statements.</p>
</li>
<li>
<p>You cannot specify a sequence in any part of a multitable insert statement. A multitable insert is considered a single SQL statement. Therefore, the first reference to <code dir="ltr">NEXTVAL</code> generates the next number, and all subsequent references in the statement return the same number.</p>
</li>
</ul>
<p class="subhead1"><a id="SQLRF55095"></a><span class="italic">subquery</span></p>
<p>Specify a subquery that returns rows that are inserted into the table. The subquery can refer to any table, view, or materialized view, including the target tables of the <code dir="ltr">INSERT</code> statement. If the subquery selects no rows, then the database inserts no rows into the table.</p>
<p>You can use <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> in combination with the <code dir="ltr">TO_LOB</code> function to convert the values in a <code dir="ltr">LONG</code> column to LOB values in another column in the same or another table.</p>
<ul>
<li>
<p>To migrate <code dir="ltr">LONG</code> values to LOB values in another column in a view, you must perform the migration on the base table and then add the LOB column to the view.</p>
</li>
<li>
<p>To migrate <code dir="ltr">LONG</code> values on a remote table to LOB values in a local table, you must perform the migration on the remote table using the <code dir="ltr">TO_LOB</code> function, and then perform an <code dir="ltr">INSERT</code> ... <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> operation to copy the LOB values from the remote table into the local table.</p>
</li>
</ul>
<p><a id="SQLRF55096"></a><span class="subhead3">Notes on Inserting with a Subquery&nbsp;</span>The following notes apply when inserting with a subquery:</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> returns the partial or total equivalent of a materialized view, then the database may use the materialized view for query rewrite in place of one or more tables specified in <code dir="ltr"><span class="codeinlineitalic">subquery</span></code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Data Warehousing Guide</span> for more information on <a class="olink DWHSG008" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG008">materialized views</a> and <a class="olink DWHSG018" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG018">query rewrite</a></div>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> refers to remote objects, then the <code dir="ltr">INSERT</code> operation can run in parallel as long as the reference does not loop back to an object on the local database. However, if the <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> in the <code dir="ltr"><span class="codeinlineitalic">DML_table_expression_clause</span></code> refers to any remote objects, then the <code dir="ltr">INSERT</code> operation will run serially without notification. See <a href="statements_7002.htm#i2159323"><span class="xreftitleitalic"><span class="italic">parallel_clause</span></span></a> for more information.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> includes an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause, then it will override row ordering specified using attribute clustering table properties.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i2126076">&#34;Inserting Values with a Subquery: Example&#34;</a></p>
</li>
<li>
<p><a href="functions020.htm#i76871">BFILENAME</a> for an example of inserting into a <code dir="ltr">BFILE</code></p>
</li>
<li>
<p><a class="olink ADLOB012" href="../ADLOB/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for information on initializing <code dir="ltr">BFILE</code>s</p>
</li>
<li>
<p><a href="expressions001.htm#i1002626">&#34;About SQL Expressions&#34;</a> and <a href="statements_10002.htm#i2065646">SELECT</a> for syntax of valid expressions</p>
</li>
</ul>
</div>
<p class="subhead1"><a id="BGBEIACB"></a><a id="SQLRF55097"></a><span class="italic">error_logging_clause</span> <a id="sthref7114"></a><a id="sthref7115"></a></p>
<p>The <code dir="ltr"><span class="codeinlineitalic">error_logging_clause</span></code> lets you capture DML errors and the log column values of the affected rows and save them in an error logging table.</p>
<p><a id="SQLRF55098"></a><span class="subhead3">INTO <span class="italic">table</span>&nbsp;</span>Specify the name of the error logging table. If you omit this clause, then the database assigns the default name generated by the <code dir="ltr">DBMS_ERRLOG</code> package. The default error log table name is <code dir="ltr">ERR$_</code> followed by the first 25 characters of the name of the table upon which the DML operation is being executed.</p>
<p><a id="SQLRF55099"></a><span class="subhead3"><span class="italic">simple_expression</span>&nbsp;</span>Specify the value to be used as a statement tag, so that you can identify the errors from this statement in the error logging table. The expression can be either a text literal, a number literal, or a general SQL expression such as a bind variable. You can also use a function expression if you convert it to a text literal &mdash; for example, <code dir="ltr">TO_CHAR(SYSDATE)</code>.</p>
<p><a id="SQLRF55100"></a><span class="subhead3">REJECT LIMIT&nbsp;</span>This clause lets you specify an integer as an upper limit for the number of errors to be logged before the statement terminates and rolls back any changes made by the statement. The default rejection limit is zero. For parallel DML operations, the reject limit is applied to each parallel server.</p>
<p class="subhead2"><a id="SQLRF55101"></a>Restrictions on DML Error Logging</p>
<ul>
<li>
<p>The following conditions cause the statement to fail and roll back without invoking the error logging capability:</p>
<ul>
<li>
<p>Violated deferred constraints.</p>
</li>
<li>
<p>Any direct-path <code dir="ltr">INSERT</code> or <code dir="ltr">MERGE</code> operation that raises a unique constraint or index violation.</p>
</li>
<li>
<p>Any update operation <code dir="ltr">UPDATE</code> or <code dir="ltr">MERGE</code> that raises a unique constraint or index violation.</p>
</li>
</ul>
</li>
<li>
<p>You cannot track errors in the error logging table for <code dir="ltr">LONG</code>, LOB, or object type columns. However, the table that is the target of the DML operation can contain these types of columns.</p>
<ul>
<li>
<p>If you create or modify the corresponding error logging table so that it contains a column of an unsupported type, and if the name of that column corresponds to an unsupported column in the target DML table, then the DML statement fails at parse time.</p>
</li>
<li>
<p>If the error logging table does not contain any unsupported column types, then all DML errors are logged until the reject limit of errors is reached. For rows on which errors occur, column values with corresponding columns in the error logging table are logged along with the control information.</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS680" href="../ARPLS/d_errlog.htm#ARPLS680"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information on using the <code dir="ltr">create_error_log</code> procedure of the <code dir="ltr">DBMS_ERRLOG</code> package and <a class="olink ADMIN10261" href="../ADMIN/tables.htm#ADMIN10261"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for general information on DML error logging.</p>
</li>
<li>
<p><a href="#BCEGDJDJ">&#34;Inserting Into a Table with Error Logging: Example&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2145081"></a>Examples</p>
<p><a id="i2145074"></a><a id="SQLRF55102"></a><span class="subhead3">Inserting Values into Tables: Examples&nbsp;</span>The following statement inserts a row into the sample table <code dir="ltr">departments</code>:</p>
<pre dir="ltr">INSERT INTO departments
   VALUES (280, &#39;Recreation&#39;, 121, 1700);
</pre>
<p>If the <code dir="ltr">departments</code> table had been created with a default value of 121 for the <code dir="ltr">manager_id</code> column, then you could issue the same statement as follows:</p>
<pre dir="ltr">INSERT INTO departments
   VALUES (280, &#39;Recreation&#39;, DEFAULT, 1700);
</pre>
<p>The following statement inserts a row with six columns into the <code dir="ltr">employees</code> table. One of these columns is assigned <code dir="ltr">NULL</code> and another is assigned a number in scientific notation:</p>
<pre dir="ltr">INSERT INTO employees (employee_id, last_name, email, 
      hire_date, job_id, salary, commission_pct) 
   VALUES (207, &#39;Gregory&#39;, &#39;pgregory@example.com&#39;, 
      sysdate, &#39;PU_CLERK&#39;, 1.2E3, NULL);
</pre>
<p>The following statement has the same effect as the preceding example, but uses a subquery in the <code dir="ltr"><span class="codeinlineitalic">DML_table_expression_clause</span></code>:</p>
<pre dir="ltr">INSERT INTO 
   (SELECT employee_id, last_name, email, hire_date, job_id, 
      salary, commission_pct FROM employees) 
   VALUES (207, &#39;Gregory&#39;, &#39;pgregory@example.com&#39;, 
      sysdate, &#39;PU_CLERK&#39;, 1.2E3, NULL);
</pre>
<p><a id="i2126076"></a><a id="SQLRF55103"></a><span class="subhead3">Inserting Values with a Subquery: Example&nbsp;</span>The following statement copies employees whose commission exceeds 25% of their salary into the <code dir="ltr">bonuses</code> table, which was created in <a href="statements_9017.htm#i2091840">&#34;Merging into a Table: Example&#34;</a>:</p>
<pre dir="ltr">INSERT INTO bonuses
   SELECT employee_id, salary*1.1 
   FROM employees
   WHERE commission_pct &gt; 0.25; 
</pre>
<p><a id="BCEGDJDJ"></a><a id="SQLRF55104"></a><span class="subhead3">Inserting Into a Table with Error Logging: Example&nbsp;</span>The following statements create a <code dir="ltr">raises</code> table in the sample schema <code dir="ltr">hr</code>, create an error logging table using the <code dir="ltr">DBMS_ERRLOG</code> package, and populate the <code dir="ltr">raises</code> table with data from the <code dir="ltr">employees</code> table. One of the inserts violates the check constraint on <code dir="ltr">raises</code>, and that row can be seen in <code dir="ltr">errlog</code>. If more than ten errors had occurred, then the statement would have aborted, rolling back any insertions made:</p>
<pre dir="ltr">CREATE TABLE raises (emp_id NUMBER, sal NUMBER 
   CONSTRAINT check_sal CHECK(sal &gt; 8000));

EXECUTE DBMS_ERRLOG.CREATE_ERROR_LOG(&#39;raises&#39;, &#39;errlog&#39;);
</pre>
<pre dir="ltr">INSERT INTO raises
   SELECT employee_id, salary*1.1 FROM employees
   WHERE commission_pct &gt; .2
   LOG ERRORS INTO errlog (&#39;my_bad&#39;) REJECT LIMIT 10;

SELECT ORA_ERR_MESG$, ORA_ERR_TAG$, emp_id, sal FROM errlog;

ORA_ERR_MESG$               ORA_ERR_TAG$         EMP_ID SAL
--------------------------- -------------------- ------ -------
ORA-02290: check constraint my_bad               161    7700
 (HR.SYS_C004266) violated
</pre>
<p><a id="i2126166"></a><a id="SQLRF55105"></a><span class="subhead3">Inserting into a Remote Database: Example&nbsp;</span>The following statement inserts a row into the <code dir="ltr">employees</code> table owned by the user <code dir="ltr">hr</code> on the database accessible by the database link <code dir="ltr">remote</code>:</p>
<pre dir="ltr">INSERT INTO employees@remote
   VALUES (8002, &#39;Juan&#39;, &#39;Fernandez&#39;, &#39;juanf@example.com&#39;, NULL, 
   TO_DATE(&#39;04-OCT-1992&#39;, &#39;DD-MON-YYYY&#39;), &#39;SH_CLERK&#39;, 3000, 
   NULL, 121, 20); 
</pre>
<p><a id="i2102477"></a><a id="SQLRF55106"></a><span class="subhead3">Inserting Sequence Values: Example&nbsp;</span>The following statement inserts a new row containing the next value of the <code dir="ltr">departments_seq</code> sequence into the <code dir="ltr">departments</code> table:</p>
<pre dir="ltr">INSERT INTO departments 
   VALUES  (departments_seq.nextval, &#39;Entertainment&#39;, 162, 1400); 
</pre>
<p><a id="i2126188"></a><a id="SQLRF55107"></a><span class="subhead3">Inserting Using Bind Variables: Example&nbsp;</span>The following example returns the values of the inserted rows into output bind variables :<code dir="ltr">bnd1</code> and :<code dir="ltr">bnd2</code>. The bind variables must first be declared.</p>
<pre dir="ltr">INSERT INTO employees 
      (employee_id, last_name, email, hire_date, job_id, salary)
   VALUES 
   (employees_seq.nextval, &#39;Doe&#39;, &#39;john.doe@example.com&#39;, 
       SYSDATE, &#39;SH_CLERK&#39;, 2400) 
   RETURNING salary*12, job_id INTO :bnd1, :bnd2;
</pre>
<p><a id="i2085891"></a><a id="SQLRF55108"></a><span class="subhead3">Inserting into a Substitutable Tables and Columns: Examples&nbsp;</span>The following example inserts into the <code dir="ltr">persons</code> table, which is created in <a href="statements_7002.htm#i2090577">&#34;Substitutable Table and Column Examples&#34;</a>. The first statement uses the root type <code dir="ltr">person_t</code>. The second insert uses the <code dir="ltr">employee_t</code> subtype of <code dir="ltr">person_t</code>, and the third insert uses the <code dir="ltr">part_time_emp_t</code> subtype of <code dir="ltr">employee_t</code>:</p>
<pre dir="ltr">INSERT INTO persons VALUES (person_t(&#39;Bob&#39;, 1234));
INSERT INTO persons VALUES (employee_t(&#39;Joe&#39;, 32456, 12, 100000));
INSERT INTO persons VALUES (
   part_time_emp_t(&#39;Tim&#39;, 5678, 13, 1000, 20));
</pre>
<p>The following example inserts into the <code dir="ltr">books</code> table, which was created in <a href="statements_7002.htm#i2090577">&#34;Substitutable Table and Column Examples&#34;</a>. Notice that specification of the attribute values is identical to that for the substitutable table example:</p>
<pre dir="ltr">INSERT INTO books VALUES (
   &#39;An Autobiography&#39;, person_t(&#39;Bob&#39;, 1234));
INSERT INTO books VALUES (
   &#39;Business Rules&#39;, employee_t(&#39;Joe&#39;, 3456, 12, 10000));
INSERT INTO books VALUES (
   &#39;Mixing School and Work&#39;, 
   part_time_emp_t(&#39;Tim&#39;, 5678, 13, 1000, 20));
</pre>
<p>You can extract data from substitutable tables and columns using built-in functions and conditions. For examples, see the functions <a href="functions234.htm#i1018806">TREAT</a> and <a href="functions204.htm#i1044156">SYS_TYPEID</a>, and <a href="conditions015.htm#i1051274">&#34;IS OF <span class="italic">type</span> Condition&#34;</a>.</p>
<p><a id="i2085882"></a><a id="SQLRF55109"></a><span class="subhead3">Inserting Using the TO_LOB Function: Example&nbsp;</span>The following example copies <code dir="ltr">LONG</code> data to a LOB column in the following <code dir="ltr">long_tab</code> table:</p>
<pre dir="ltr">CREATE TABLE long_tab (pic_id NUMBER, long_pics LONG RAW);
</pre>
<p>First you must create a table with a LOB.</p>
<pre dir="ltr">CREATE TABLE lob_tab (pic_id NUMBER, lob_pics BLOB);
</pre>
<p>Next, use an <code dir="ltr">INSERT</code> ... <code dir="ltr">SELECT</code> statement to copy the data in all rows for the <code dir="ltr">LONG</code> column into the newly created LOB column:</p>
<pre dir="ltr">INSERT INTO lob_tab 
   SELECT pic_id, TO_LOB(long_pics) FROM long_tab;
</pre>
<p>When you are confident that the migration has been successful, you can drop the <code dir="ltr">long_pics</code> table. Alternatively, if the table contains other columns, then you can simply drop the <code dir="ltr">LONG</code> column from the table as follows:</p>
<pre dir="ltr">ALTER TABLE long_tab DROP COLUMN long_pics;
</pre>
<p><a id="i2125362"></a><a id="SQLRF55110"></a><span class="subhead3">Multitable Inserts: Examples <a id="sthref7116"></a><a id="sthref7117"></a>&nbsp;</span>The following example uses the multitable insert syntax to insert into the sample table <code dir="ltr">sh.sales</code> some data from an input table with a different structure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A number of <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints on the <code dir="ltr">sales</code> table have been disabled for purposes of this example, because the example ignores a number of table columns for the sake of brevity.</div>
<p>The input table looks like this:</p>
<pre dir="ltr">SELECT * FROM sales_input_table;

PRODUCT_ID CUSTOMER_ID WEEKLY_ST  SALES_SUN  SALES_MON  SALES_TUE  SALES_WED SALES_THU  SALES_FRI  SALES_SAT
---------- ----------- --------- ---------- ---------- ---------- -------------------- ---------- ----------
       111         222 01-OCT-00        100        200        300        400       500        600        700
       222         333 08-OCT-00        200        300        400        500       600        700        800
       333         444 15-OCT-00        300        400        500        600       700        800        900
</pre>
<pre dir="ltr"></pre>
<p>The multitable insert statement looks like this:</p>
<pre dir="ltr">INSERT ALL
      INTO sales (prod_id, cust_id, time_id, amount)
      VALUES (product_id, customer_id, weekly_start_date, sales_sun)
      INTO sales (prod_id, cust_id, time_id, amount)
      VALUES (product_id, customer_id, weekly_start_date+1, sales_mon)
      INTO sales (prod_id, cust_id, time_id, amount)
      VALUES (product_id, customer_id, weekly_start_date+2, sales_tue)
      INTO sales (prod_id, cust_id, time_id, amount)
      VALUES (product_id, customer_id, weekly_start_date+3, sales_wed)
      INTO sales (prod_id, cust_id, time_id, amount)
      VALUES (product_id, customer_id, weekly_start_date+4, sales_thu)
      INTO sales (prod_id, cust_id, time_id, amount)
      VALUES (product_id, customer_id, weekly_start_date+5, sales_fri)
      INTO sales (prod_id, cust_id, time_id, amount)
      VALUES (product_id, customer_id, weekly_start_date+6, sales_sat)
   SELECT product_id, customer_id, weekly_start_date, sales_sun,
      sales_mon, sales_tue, sales_wed, sales_thu, sales_fri, sales_sat
      FROM sales_input_table;
</pre>
<p>Assuming these are the only rows in the <code dir="ltr">sales</code> table, the contents now look like this:</p>
<pre dir="ltr">SELECT * FROM sales
   ORDER BY prod_id, cust_id, time_id;

   PROD_ID    CUST_ID TIME_ID   C   PROMO_ID QUANTITY_SOLD     AMOUNT       COST
---------- ---------- --------- - ---------- ------------- ---------- ----------
       111        222 01-OCT-00                                   100
       111        222 02-OCT-00                                   200
       111        222 03-OCT-00                                   300
       111        222 04-OCT-00                                   400
       111        222 05-OCT-00                                   500
       111        222 06-OCT-00                                   600
       111        222 07-OCT-00                                   700
       222        333 08-OCT-00                                   200
       222        333 09-OCT-00                                   300
       222        333 10-OCT-00                                   400
       222        333 11-OCT-00                                   500
       222        333 12-OCT-00                                   600
       222        333 13-OCT-00                                   700
       222        333 14-OCT-00                                   800
       333        444 15-OCT-00                                   300
       333        444 16-OCT-00                                   400
       333        444 17-OCT-00                                   500
       333        444 18-OCT-00                                   600
       333        444 19-OCT-00                                   700
       333        444 20-OCT-00                                   800
       333        444 21-OCT-00                                   900
</pre>
<p>The next examples insert into multiple tables. Suppose you want to provide to sales representatives some information on orders of various sizes. The following example creates tables for small, medium, large, and special orders and populates those tables with data from the sample table <code dir="ltr">oe.orders</code>:</p>
<pre dir="ltr">CREATE TABLE small_orders 
   (order_id       NUMBER(12)   NOT NULL,
    customer_id    NUMBER(6)    NOT NULL,
    order_total    NUMBER(8,2),
    sales_rep_id   NUMBER(6)
   );

CREATE TABLE medium_orders AS SELECT * FROM small_orders;

CREATE TABLE large_orders AS SELECT * FROM small_orders;

CREATE TABLE special_orders 
   (order_id       NUMBER(12)    NOT NULL,
    customer_id    NUMBER(6)     NOT NULL,
    order_total    NUMBER(8,2),
    sales_rep_id   NUMBER(6),
    credit_limit   NUMBER(9,2),
    cust_email     VARCHAR2(40)
   );
</pre>
<p>The first multitable insert populates only the tables for small, medium, and large orders:</p>
<pre dir="ltr">INSERT ALL
   WHEN order_total &lt;= 100000 THEN
      INTO small_orders
   WHEN order_total &gt; 1000000 AND order_total &lt;= 200000 THEN
      INTO medium_orders
   WHEN order_total &gt; 200000 THEN
      INTO large_orders
   SELECT order_id, order_total, sales_rep_id, customer_id
      FROM orders;
</pre>
<p>You can accomplish the same thing using the <code dir="ltr">ELSE</code> clause in place of the insert into the <code dir="ltr">large_orders</code> table:</p>
<pre dir="ltr">INSERT ALL
   WHEN order_total &lt;= 100000 THEN
      INTO small_orders
   WHEN order_total &gt; 100000 AND order_total &lt;= 200000 THEN
      INTO medium_orders
   ELSE
      INTO large_orders
   SELECT order_id, order_total, sales_rep_id, customer_id
      FROM orders;
</pre>
<p>The next example inserts into the small, medium, and large tables, as in the preceding example, and also puts orders greater than 290,000 into the <code dir="ltr">special_orders</code> table. This table also shows how to use column aliases to simplify the statement:</p>
<pre dir="ltr">INSERT ALL
   WHEN ottl &lt;= 100000 THEN
      INTO small_orders
         VALUES(oid, ottl, sid, cid)
   WHEN ottl &gt; 100000 and ottl &lt;= 200000 THEN
      INTO medium_orders 
         VALUES(oid, ottl, sid, cid)
   WHEN ottl &gt; 200000 THEN
      into large_orders
         VALUES(oid, ottl, sid, cid)
   WHEN ottl &gt; 290000 THEN
      INTO special_orders
   SELECT o.order_id oid, o.customer_id cid, o.order_total ottl,
      o.sales_rep_id sid, c.credit_limit cl, c.cust_email cem
      FROM orders o, customers c
      WHERE o.customer_id = c.customer_id;
</pre>
<p>Finally, the next example uses the <code dir="ltr">FIRST</code> clause to put orders greater than 290,000 into the <code dir="ltr">special_orders</code> table and exclude those orders from the <code dir="ltr">large_orders</code> table:</p>
<pre dir="ltr">INSERT FIRST
   WHEN ottl &lt;= 100000 THEN
      INTO small_orders
         VALUES(oid, ottl, sid, cid)
   WHEN ottl &gt; 100000 and ottl &lt;= 200000 THEN
      INTO medium_orders
         VALUES(oid, ottl, sid, cid)
   WHEN ottl &gt; 290000 THEN
      INTO special_orders
   WHEN ottl &gt; 200000 THEN
      INTO large_orders
         VALUES(oid, ottl, sid, cid)
   SELECT o.order_id oid, o.customer_id cid, o.order_total ottl,
      o.sales_rep_id sid, c.credit_limit cl, c.cust_email cem
      FROM orders o, customers c
      WHERE o.customer_id = c.customer_id;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5862">
<tr>
<td class="cellalignment5869">
<table class="cellalignment5867">
<tr>
<td class="cellalignment5866"><a href="statements_9014.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5866"><a href="statements_9016.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5871">
<table class="cellalignment5865">
<tr>
<td class="cellalignment5866"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5866"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5866"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5866"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5866"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5866"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>