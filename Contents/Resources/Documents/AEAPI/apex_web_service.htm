<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-1808"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/APEX_WEB_SERVICE"></a><title>APEX_WEB_SERVICE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748"/>
<meta name="dcterms.created" content="2014-05-22T14:53:20Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Application Express API Reference"/>
<meta name="dcterms.identifier" content="E17963-07"/>
<meta name="dcterms.isVersionOf" content="AEAPI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="apex_util.htm" title="Previous" type="text/html"/>
<link rel="Next" href="javascript_api.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17963-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">26/28</span> <!-- End Header -->
<div id="AEAPI537" class="chapter"><a id="BABFFDEH"></a>
<h1 class="chapter"><span class="secnum">22</span> APEX_WEB_SERVICE</h1>
<p>The <a id="sthref910"></a><a id="sthref911"></a>APEX_WEB_SERVICE API enables you to integrate other systems with Application Express by allowing you to interact with Web services anywhere you can use PL/SQL in your application. The API contains procedures and functions to call both SOAP and RESTful style Web services. It contains functions to parse the responses from Web services and to encode/decode into SOAP friendly base64 encoding.This API also contains package globals for managing cookies and HTTP headers when calling Web services whether from the API or by using standard processes of type Web service. Cookies and HTTP headers can be set before invoking a call to a Web service by populating the globals and the cookies and HTTP headers returned from the Web service response can be read from other globals.</p>
<p class="subhead2"><a id="AEAPI2347"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABFJHJC">About the APEX_WEB_SERVICE API</a></p>
</li>
<li>
<p><a href="#BABDJAIG">BLOB2CLOBBASE64 Function</a></p>
</li>
<li>
<p><a href="#BABHIEJB">CLOBBASE642BLOB Function</a></p>
</li>
<li>
<p><a href="#BABDHIBJ">MAKE_REQUEST Procedure</a></p>
</li>
<li>
<p><a href="#BABEEICD">MAKE_REQUEST Function</a></p>
</li>
<li>
<p><a href="#BABEDJHJ">MAKE_REST_REQUEST Function</a></p>
</li>
<li>
<p><a href="#BABIBFFF">PARSE_RESPONSE Function</a></p>
</li>
<li>
<p><a href="#BABBCJEI">PARSE_RESPONSE_CLOB Function</a></p>
</li>
<li>
<p><a href="#BABHIGGA">PARSE_XML Function</a></p>
</li>
<li>
<p><a href="#BABDAFHJ">PARSE_XML_CLOB Function</a></p>
</li>
</ul>
<div class="refentry"><a id="BABFJHJC"></a>
<div id="AEAPI1930" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">About the APEX_WEB_SERV<a id="sthref912"></a>ICE API</h2>
<p>Use the APEX_WEB_SERVICE API to invoke a Web service and examine the response anywhere you can use PL/SQL in Application Express.</p>
<p>The following are examples of when you might use the APEX_WEB_SERVICE API:</p>
<ul>
<li>
<p>When you want to invoke a Web service by using an On Demand Process using AJAX.</p>
</li>
<li>
<p>When you want to invoke a Web service as part of an Authentication Scheme.</p>
</li>
<li>
<p>When you need to pass a large binary parameter to a Web service that is base64 encoded.</p>
</li>
<li>
<p>When you want to invoke a Web service as part of a validation.</p>
</li>
</ul>
<p class="subhead2"><a id="AEAPI2348"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABGEIAH">Invoking a SOAP Style Web Service</a></p>
</li>
<li>
<p><a href="#BABGGBBH">Invoking a RESTful Style Web Service</a></p>
</li>
<li>
<p><a href="#BABFDAEC">Retrieving Cookies and HTTP Headers</a></p>
</li>
<li>
<p><a href="#BABDFEJG">Setting Cookies and HTTP Headers</a></p>
</li>
</ul>
<div id="AEAPI1931" class="refsect2"><a id="BABGEIAH"></a>
<h3 class="refsect2">Invoking a SOAP Style<a id="sthref913"></a> Web Service</h3>
<p>There is a procedure and a function to invoke a SOAP style Web service. The procedure stores the response in the collection specified by the parameter p_collection_name. The function returns the results as an XMLTYPE. To retrieve a specific value from the response, you use either the PARSE_RESPONSE function if the result is stored in a collection or the PARSE_XML function if the response is returned as an XMLTYPE. To pass a binary parameter to the Web service as base64 encoded character data, use the function BLOB2CLOBBASE64. Conversely, to transform a response that contains a binary parameter that is base64 encoded use the function CLOBBASE642BLOB.The following is an example of using the BLOB2CLOBBASE64 function to encode a parameter, MAKE_REQUEST procedure to call a Web service, and the PARSE_RESPONSE function to extract a specific value from the response.</p>
<pre>declare
 l_filename varchar2(255);
 l_BLOB BLOB;
 l_CLOB CLOB;
 l_envelope CLOB;
 l_response_msg varchar2(32767);
BEGIN
 IF :P1_FILE IS NOT NULL THEN
    SELECT filename, BLOB_CONTENT
      INTO l_filename, l_BLOB
      FROM APEX_APPLICATION_FILES
      WHERE name = :P1_FILE;
 
    l_CLOB := apex_web_service.blob2clobbase64(l_BLOB);
 
   l_envelope := q&#39;!&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt;!&#39;;
   l_envelope := l_envelope &#39;&lt;soapenv:Envelope xmlns:soapenv=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34; xmlns:chec=&#34;http://www.stellent.com/CheckIn/&#34;&gt;
  &lt;soapenv:Header/&gt;
  &lt;soapenv:Body&gt;
     &lt;chec:CheckInUniversal&gt;
        &lt;chec:dDocName&gt;&#39;||l_filename||&#39;&lt;/chec:dDocName&gt;
        &lt;chec:dDocTitle&gt;&#39;||l_filename||&#39;&lt;/chec:dDocTitle&gt;
        &lt;chec:dDocType&gt;Document&lt;/chec:dDocType&gt;
        &lt;chec:dDocAuthor&gt;GM&lt;/chec:dDocAuthor&gt;
        &lt;chec:dSecurityGroup&gt;Public&lt;/chec:dSecurityGroup&gt;
        &lt;chec:dDocAccount&gt;&lt;/chec:dDocAccount&gt;
        &lt;chec:CustomDocMetaData&gt;
           &lt;chec:property&gt;
              &lt;chec:name&gt;&lt;/chec:name&gt;
              &lt;chec:value&gt;&lt;/chec:value&gt;
           &lt;/chec:property&gt;
        &lt;/chec:CustomDocMetaData&gt;
        &lt;chec:primaryFile&gt;
           &lt;chec:fileName&gt;&#39;||l_filename&#39;||&lt;/chec:fileName&gt;
           &lt;chec:fileContent&gt;&#39;||l_CLOB||&#39;&lt;/chec:fileContent&gt;
        &lt;/chec:primaryFile&gt;
        &lt;chec:alternateFile&gt;
           &lt;chec:fileName&gt;&lt;/chec:fileName&gt;
           &lt;chec:fileContent&gt;&lt;/chec:fileContent&gt;
        &lt;/chec:alternateFile&gt;
        &lt;chec:extraProps&gt;
           &lt;chec:property&gt;
              &lt;chec:name&gt;&lt;/chec:name&gt;
              &lt;chec:value&gt;&lt;/chec:value&gt;
           &lt;/chec:property&gt;
        &lt;/chec:extraProps&gt;
     &lt;/chec:CheckInUniversal&gt;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;&#39;;
 
apex_web_service.make_request(
   p_url               =&gt; &#39;http://127.0.0.1/idc/idcplg&#39;,
   p_action            =&gt; &#39;http://www.stellent.com/CheckIn/&#39;,
   p_collection_name   =&gt; &#39;STELLENT_CHECKIN&#39;,
   p_envelope          =&gt; l_envelope,
   p_username          =&gt; &#39;sysadmin&#39;,
   p_password          =&gt; &#39;welcome1&#39; );
 
 l_response_msg := apex_web_service.parse_response(
  p_collection_name=&gt;&#39;STELLENT_CHECKIN&#39;,
p_xpath=&gt;&#39;//idc:CheckInUniversalResponse/idc:CheckInUniversalResult/idc:StatusInfo/idc:statusMessage/text()&#39;,
  p_ns=&gt;&#39;xmlns:idc=&#34;http://www.stellent.com/CheckIn/&#34;&#39;);
 
 :P1_RES_MSG := l_response_msg;
 
 END IF;
END;
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI1932" class="refsect2"><a id="BABGGBBH"></a>
<h3 class="refsect2">Invoking a R<a id="sthref914"></a>ESTful Style Web Service</h3>
<p>RESTful style Web services use a simpler architecture than SOAP. Typically the input to a RESTful style Web service is a collection of name/value pairs. The response can be an XML document or simply text such as a comma separated response or JSON. The following is an example of MAKE_REST_REQUEST being used in an application process that is callable by AJAX.</p>
<pre>declare
  l_clob clob;
  l_buffer         varchar2(32767);
  l_amount         number;
  l_offset         number;
begin
 
  l_clob := apex_web_service.make_rest_request(
              p_url =&gt; &#39;http://us.music.yahooapis.com/ video/v1/list/published/popular&#39;,
              p_http_method =&gt; &#39;GET&#39;,
              p_parm_name =&gt; apex_util.string_to_table(&#39;appid:format&#39;),
              p_parm_value =&gt; apex_util.string_to_table(apex_application.g_x01||&#39;:&#39;||apex_application.g_x02));
 
    l_amount := 32000;
    l_offset := 1;
    begin
        loop
            dbms_lob.read( l_clob, l_amount, l_offset, l_buffer );
            htp.p(l_buffer);
            l_offset := l_offset + l_amount;
            l_amount := 32000;
        end loop;
    exception
        when no_data_found then
            null;
    end;
 
end;
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI1933" class="refsect2"><a id="BABFDAEC"></a>
<h3 class="refsect2">Retrieving Cookies <a id="sthref915"></a>and HTTP Headers</h3>
<p>When you invoke a Web service using any of the supported methods in Application Express, the <code>g_response_cookies</code> and <code>g_headers</code> globals are populated if the Web service response included any cookies or HTTP headers. You can interrogate these globals and store the information in collections.The following are examples of interrogating the <code>APEX_WEB_SERVICE</code> globals to store cookie and HTTP header responses in collections.</p>
<pre>declare
  i number;
  secure varchar2(1);
begin
  apex_collection.create_or_truncate_collection(&#39;P31_RESP_COOKIES&#39;);
  for i in 1.. apex_web_service.g_response_cookies.count loop
    IF (apex_web_service.g_response_cookies(i).secure) THEN
      secure := &#39;Y&#39;;
    ELSE
      secure := &#39;N&#39;;
    END IF;
    apex_collection.add_member(p_collection_name =&gt; &#39;P31_RESP_COOKIES&#39;,
      p_c001 =&gt; apex_web_service.g_response_cookies(i).name,
      p_c002 =&gt; apex_web_service.g_response_cookies(i).value,
      p_c003 =&gt; apex_web_service.g_response_cookies(i).domain,
      p_c004 =&gt; apex_web_service.g_response_cookies(i).expire,
      p_c005 =&gt; apex_web_service.g_response_cookies(i).path,
      p_c006 =&gt; secure,
      p_c007 =&gt; apex_web_service.g_response_cookies(i).version );
  end loop;
end;
 
declare
  i number;
begin
apex_collection.create_or_truncate_collection(&#39;P31_RESP_HEADERS&#39;);
 
for i in 1.. apex_web_service.g_headers.count loop
  apex_collection.add_member(p_collection_name =&gt; &#39;P31_RESP_HEADERS&#39;,
    p_c001 =&gt; apex_web_service.g_headers(i).name,
    p_c002 =&gt; apex_web_service.g_headers(i).value,
    p_c003 =&gt; apex_web_service.g_status_code);
end loop;
end;
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI1934" class="refsect2"><a id="BABDFEJG"></a>
<h3 class="refsect2">Setting <a id="sthref916"></a>Cookies and HTTP Headers</h3>
<p>You set cookies and HTTP headers that should be sent along with a Web service request by populating the globals <code>g_request_cookies</code> and <code>g_request_headers</code> before the process that invokes the Web service.The following examples show populating the globals to send cookies and HTTP headers with a request.</p>
<pre>for c1 in (select seq_id, c001, c002, c003, c004, c005, c006, c007
             from apex_collections
            where collection_name = &#39;P31_RESP_COOKIES&#39; ) loop
  apex_web_service.g_request_cookies(c1.seq_id).name := c1.c001;
  apex_web_service.g_request_cookies(c1.seq_id).value := c1.c002;
  apex_web_service.g_request_cookies(c1.seq_id).domain := c1.c003;
  apex_web_service.g_request_cookies(c1.seq_id).expire := c1.c004;
  apex_web_service.g_request_cookies(c1.seq_id).path := c1.c005;
  if c1.c006 = &#39;Y&#39; then
    apex_web_service.g_request_cookies(c1.seq_id).secure := true;
  else
    apex_web_service.g_request_cookies(c1.seq_id).secure := false;
  end if;
  apex_web_service.g_request_cookies(c1.seq_id).version := c1.c007;
end loop;
 
for c1 in (select seq_id, c001, c002
             from apex_collections
            where collection_name = &#39;P31_RESP_HEADERS&#39; ) loop
  apex_web_service.g_request_headers(c1.seq_id).name := c1.c001;
  apex_web_service.g_request_headers(c1.seq_id).value := c1.c002;
end loop;
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABDJAIG"></a>
<div id="AEAPI1935" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">BLOB2CLOBBASE64 <a id="sthref917"></a>Function</h2>
<p>Use this function to convert a BLOB datatype into a CLOB that is base64 encoded. This is often used when sending a binary as an input to a Web service.</p>
<p class="subhead2"><a id="AEAPI1936"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.BLOB2CLOBBASE64 (
            p_blob IN BLOB)
RETURN CLOB;
</pre>
<p class="subhead2"><a id="AEAPI1937"></a>Parameters</p>
<p><a href="#BABDGIFA">Table 22-1</a> describes the parameters available in the <code>BLOB2CLOBBASE64</code> function.</p>
<div id="AEAPI1938" class="tblformal">
<p class="titleintable"><a id="sthref918"></a><a id="BABDGIFA"></a>Table 22-1 BLOB2CLOBBASE64 Parameters</p>
<table class="cellalignment3315" title="BLOB2CLOBBASE64 Parameters" summary="This table contains the parameters for the BLOB2CLOBBASE64 function." dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t2">Parameter</th>
<th class="cellalignment3316" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t2" headers="r1c1-t2">
<p><code>p_blob</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t2 r1c2-t2">
<p>The BLOB to convert into base64 encoded CLOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1939"></a>Example</p>
<p>The following example gets a file that was uploaded from the apex_application_files view and converts the BLOB into a CLOB that is base64 encoded.</p>
<pre>declare
        l_clob   CLOB;
    l_blob       BLOB;
begin
    SELECT BLOB_CONTENT
      INTO l_BLOB
      FROM APEX_APPLICATION_FILES
      WHERE name = :P1_FILE;
 
    l_CLOB := apex_web_service.blob2clobbase64(l_BLOB);
end;
</pre></div>
<!-- class="refsect1" -->
<a id="BABHIEJB"></a>
<div id="AEAPI1940" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">CLOBBASE642B<a id="sthref919"></a>LOB Function</h2>
<p>Use this function to convert a CLOB datatype that is base64 encoded into a BLOB. This is often used when receiving output from a Web service that contains a binary parameter.</p>
<p class="subhead2"><a id="AEAPI1941"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.CLOBBASE642BLOB (
            p_clob IN CLOB)
RETURN BLOB;
</pre>
<p class="subhead2"><a id="AEAPI1942"></a>Parameters</p>
<p><a href="#BABEJCHA">Table 22-2</a> describes the parameters available in the <code>CLOBBASE642BLOB</code> function.</p>
<div id="AEAPI1943" class="tblformal">
<p class="titleintable"><a id="sthref920"></a><a id="BABEJCHA"></a>Table 22-2 CLOBBASE642BLOB Parameters</p>
<table class="cellalignment3315" title="CLOBBASE642BLOB Parameters" summary="This table contains the parameters for the CLOBBASE642BLOB function." dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t3">Parameter</th>
<th class="cellalignment3316" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t3" headers="r1c1-t3">
<p><code>p_clob</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t3 r1c2-t3">
<p>The base64 encoded CLOB to convert into a BLOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1944"></a>Example</p>
<p>The following example retrieves a base64 encoded node from an XML document as a CLOB and converts it into a BLOB.</p>
<pre>declare
            l_base64     CLOB;
    l_blob       BLOB;
    l_xml        XMLTYPE;
begin
    l_base64 := apex_web_service.parse_xml_clob(l_xml, &#39; //runReportReturn/reportBytes/text()&#39;);
        l_blob := apex_web_service.clobbase642blob(l_base64);
end;
</pre></div>
<!-- class="refsect1" -->
<a id="BABDHIBJ"></a>
<div id="AEAPI1945" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">MAKE_REQUEST <a id="sthref921"></a>Procedure</h2>
<p>Use this procedure to invoke a SOAP style Web service with the supplied SOAP envelope and store the results in a collection.</p>
<p class="subhead2"><a id="AEAPI1946"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.MAKE_REQUEST (
    p_url               IN VARCHAR2,
    p_action            IN VARCHAR2 default null,
    p_version           IN VARCHAR2 default &#39;1.1&#39;,
    p_collection_name   IN VARCHAR2 default null,
    p_envelope          IN CLOB,
    p_username          IN VARCHAR2 default null,
    p_password          IN VARCHAR2 default null,
    p_proxy_override    IN VARCHAR2 default null,
    p_transfer_timeout  IN NUMBER   default 180,
    p_wallet_path       IN VARCHAR2 default null,
    p_wallet_pwd        IN VARCHAR2 default null );
</pre>
<p class="subhead2"><a id="AEAPI1947"></a>Parameters</p>
<p><a href="#BABCICEF">Table 22-3</a> describes the parameters available in the <code>MAKE_REQUEST</code> procedure.</p>
<div id="AEAPI1948" class="tblformal">
<p class="titleintable"><a id="sthref922"></a><a id="BABCICEF"></a>Table 22-3 MAKE_REQUEST Procedure Parameters</p>
<table class="cellalignment3315" title="MAKE_REQUEST Procedure Parameters" summary="This table contains the parameters for the MAKE_REQUEST procedure." dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t4">Parameter</th>
<th class="cellalignment3316" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t4" headers="r1c1-t4">
<p><code>p_url</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t4 r1c2-t4">
<p>The URL endpoint of the Web service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t4" headers="r1c1-t4">
<p><code>p_action</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t4 r1c2-t4">
<p>The SOAP Action corresponding to the operation to be invoked.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t4" headers="r1c1-t4">
<p><code>p_version</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t4 r1c2-t4">
<p>The SOAP version, 1.1 or 1.2. The default is 1.1.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r5c1-t4" headers="r1c1-t4">
<p><code>p_collection_name</code></p>
</td>
<td class="cellalignment3317" headers="r5c1-t4 r1c2-t4">
<p>The name of the collection to store the response.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r6c1-t4" headers="r1c1-t4">
<p><code>p_envelope</code></p>
</td>
<td class="cellalignment3317" headers="r6c1-t4 r1c2-t4">
<p>The SOAP envelope to post to the service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r7c1-t4" headers="r1c1-t4">
<p><code>p_username</code></p>
</td>
<td class="cellalignment3317" headers="r7c1-t4 r1c2-t4">
<p>The username if basic authentication is required for this service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r8c1-t4" headers="r1c1-t4">
<p><code>p_password</code></p>
</td>
<td class="cellalignment3317" headers="r8c1-t4 r1c2-t4">
<p>The password if basic authentication is required for this service</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r9c1-t4" headers="r1c1-t4">
<p><code>p_proxy_override</code></p>
</td>
<td class="cellalignment3317" headers="r9c1-t4 r1c2-t4">
<p>The proxy to use for the request. The proxy supplied overrides the proxy defined in the application attributes.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r10c1-t4" headers="r1c1-t4">
<p><code>p_transfer_timeout</code></p>
</td>
<td class="cellalignment3317" headers="r10c1-t4 r1c2-t4">
<p>The amount of time in seconds to wait for a response.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r11c1-t4" headers="r1c1-t4">
<p><code>p_wallet_path</code></p>
</td>
<td class="cellalignment3317" headers="r11c1-t4 r1c2-t4">
<p>The file system path to a wallet if the URL endpoint is https. For example, file:/usr/home/oracle/WALLETS. The wallet path provided overrides the wallet defined in the instance settings.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r12c1-t4" headers="r1c1-t4">
<p><code>p_wallet_pwd</code></p>
</td>
<td class="cellalignment3317" headers="r12c1-t4 r1c2-t4">
<p>The password to access the wallet.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1949"></a>Example</p>
<p>The following example uses the <code>make_request</code> procedure to retrieve a list of movies from a SOAP style Web service. The response is stored in an Application Express collection named <code>MOVIE_LISTINGS</code>.</p>
<pre>declare
        l_envelope CLOB;
BEGIN
        l_envelope := &#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;soap:Envelope xmlns:soap=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;
xmlns:tns=&#34;http://www.ignyte.com/whatsshowing&#34;
xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
   &lt;soap:Body&gt;
      &lt;tns:GetTheatersAndMovies&gt;
         &lt;tns:zipCode&gt;43221&lt;/tns:zipCode&gt;
         &lt;tns:radius&gt;5&lt;/tns:radius&gt;
      &lt;/tns:GetTheatersAndMovies&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;&#39;;
 
apex_web_service.make_request(
   p_url               =&gt; &#39; http://www.ignyte.com/webservices/ignyte.whatsshowing.webservice/moviefunctions.asmx&#39;,
   p_action            =&gt; &#39; http://www.ignyte.com/whatsshowing/GetTheatersAndMovies&#39;,
   p_collection_name   =&gt; &#39;MOVIE_LISTINGS&#39;,
   p_envelope          =&gt; l_envelope
);
END;
</pre></div>
<!-- class="refsect1" -->
<a id="BABEEICD"></a>
<div id="AEAPI1950" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">MAKE_REQUEST <a id="sthref923"></a>Function</h2>
<p>Use this function to invoke a SOAP style Web service with the supplied SOAP envelope returning the results in an XMLTYPE.</p>
<p class="subhead2"><a id="AEAPI1951"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.MAKE_REQUEST (
    p_url               IN VARCHAR2,
    p_action            IN VARCHAR2 default null,
    p_version           IN VARCHAR2 default &#39;1.1&#39;,
    p_envelope          IN CLOB,
    p_username          IN VARCHAR2 default null,
    p_password          IN VARCHAR2 default null,
    p_proxy_override    IN VARCHAR2 default null,
    p_transfer_timeout  IN NUMBER   default 180,
    p_wallet_path       IN VARCHAR2 default null,
    p_wallet_pwd        IN VARCHAR2 default null )
RETURN XMLTYPE;
</pre>
<p class="subhead2"><a id="AEAPI1952"></a>Parameters</p>
<p><a href="#BABFGCAA">Table 22-4</a> describes the parameters available in the <code>MAKE_REQUEST</code> function.</p>
<div id="AEAPI1953" class="tblformal">
<p class="titleintable"><a id="sthref924"></a><a id="BABFGCAA"></a>Table 22-4 MAKE_REQUEST Function Parameters</p>
<table class="cellalignment3315" title="MAKE_REQUEST Function Parameters" summary="This table contains the parameters for the MAKE_REQUEST function" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t5">Parameter</th>
<th class="cellalignment3316" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t5" headers="r1c1-t5">
<p><code>p_url</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t5 r1c2-t5">
<p>The URL endpoint of the Web service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t5" headers="r1c1-t5">
<p><code>p_action</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t5 r1c2-t5">
<p>The SOAP Action corresponding to the operation to be invoked.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t5" headers="r1c1-t5">
<p><code>p_version</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t5 r1c2-t5">
<p>The SOAP version, 1.1 or 1.2. The default is 1.1.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r5c1-t5" headers="r1c1-t5">
<p><code>p_envelope</code></p>
</td>
<td class="cellalignment3317" headers="r5c1-t5 r1c2-t5">
<p>The SOAP envelope to post to the service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r6c1-t5" headers="r1c1-t5">
<p><code>p_username</code></p>
</td>
<td class="cellalignment3317" headers="r6c1-t5 r1c2-t5">
<p>The username if basic authentication is required for this service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r7c1-t5" headers="r1c1-t5">
<p><code>p_password</code></p>
</td>
<td class="cellalignment3317" headers="r7c1-t5 r1c2-t5">
<p>The password if basic authentication is required for this service</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r8c1-t5" headers="r1c1-t5">
<p><code>p_proxy_override</code></p>
</td>
<td class="cellalignment3317" headers="r8c1-t5 r1c2-t5">
<p>The proxy to use for the request. The proxy supplied overrides the proxy defined in the application attributes.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r9c1-t5" headers="r1c1-t5">
<p><code>p_transfer_timeout</code></p>
</td>
<td class="cellalignment3317" headers="r9c1-t5 r1c2-t5">
<p>The amount of time in seconds to wait for a response.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r10c1-t5" headers="r1c1-t5">
<p><code>p_wallet_path</code></p>
</td>
<td class="cellalignment3317" headers="r10c1-t5 r1c2-t5">
<p>The file system path to a wallet if the URL endpoint is https. For example, file:/usr/home/oracle/WALLETS. The wallet path provided overrides the wallet defined in the instance settings.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r11c1-t5" headers="r1c1-t5">
<p><code>p_wallet_pwd</code></p>
</td>
<td class="cellalignment3317" headers="r11c1-t5 r1c2-t5">
<p>The password to access the wallet.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1954"></a>Example</p>
<p>The following example uses the <code>make_request</code> function to invoke a SOAP style Web service that returns movie listings. The result is stored in an XMLTYPE.</p>
<pre>declare
    l_envelope CLOB;
    l_xml        XMLTYPE;
BEGIN
            l_envelope := &#39; &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;soap:Envelope xmlns:soap=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;
xmlns:tns=&#34;http://www.ignyte.com/whatsshowing&#34;
xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
    &lt;soap:Body&gt;
        &lt;tns:GetTheatersAndMovies&gt;
            &lt;tns:zipCode&gt;43221&lt;/tns:zipCode&gt;
            &lt;tns:radius&gt;5&lt;/tns:radius&gt;
        &lt;/tns:GetTheatersAndMovies&gt;
    &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;&#39;;
 
l_xml := apex_web_service.make_request(
    p_url =&gt; &#39; http://www.ignyte.com/webservices/ignyte.whatsshowing.webservice/moviefunctions.asmx&#39;,
   p_action =&gt; &#39; http://www.ignyte.com/whatsshowing/GetTheatersAndMovies&#39;,
   p_envelope =&gt; l_envelope
);
END
</pre></div>
<!-- class="refsect1" -->
<a id="BABEDJHJ"></a>
<div id="AEAPI1955" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">MAKE_REST_REQUEST <a id="sthref925"></a>Function</h2>
<p>Use this function to invoke a RESTful style Web service supplying either name value pairs, a character based payload or a binary payload and returning the response in a CLOB.</p>
<p class="subhead2"><a id="AEAPI1956"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.MAKE_REST_REQUEST(
    p_url               IN VARCHAR2,
    p_http_method       IN VARCHAR2,
    p_username          IN VARCHAR2 default null,
    p_password          IN VARCHAR2 default null,
    p_proxy_override    IN VARCHAR2 default null,
    p_transfer_timeout  IN NUMBER   default 180,
    p_body              IN CLOB default empty_clob(),
    p_body_blob         IN BLOB default empty_blob(),
    p_parm_name         IN apex_application_global.VC_ARR2 default empty_vc_arr,
    p_parm_value        IN apex_application_global.VC_ARR2 default empty_vc_arr,
    p_wallet_path       IN VARCHAR2 default null,
    p_wallet_pwd        IN VARCHAR2 default null ) 
RETURN CLOB;
</pre>
<p class="subhead2"><a id="AEAPI1957"></a>Parameters</p>
<p><a href="#BABEDIGI">Table 22-5</a> describes the parameters available in the <code>MAKE_REST_REQUEST</code> function.</p>
<div id="AEAPI1958" class="tblformal">
<p class="titleintable"><a id="sthref926"></a><a id="BABEDIGI"></a>Table 22-5 MAKE_REST_REQUEST Function Parameters</p>
<table class="cellalignment3315" title="MAKE_REST_REQUEST Function Parameters" summary="This table contains the parameters for the MAKE_REQUEST_REQUEST function" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t6">Parameter</th>
<th class="cellalignment3316" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t6" headers="r1c1-t6">
<p><code>p_url</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t6 r1c2-t6">
<p>The URL endpoint of the Web service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t6" headers="r1c1-t6">
<p><code>p_http_method</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t6 r1c2-t6">
<p>The HTTP method to use, PUT, POST, GET, HEAD, or DELETE.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t6" headers="r1c1-t6">
<p><code>p_username</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t6 r1c2-t6">
<p>The username if basic authentication is required for this service.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r5c1-t6" headers="r1c1-t6">
<p><code>p_password</code></p>
</td>
<td class="cellalignment3317" headers="r5c1-t6 r1c2-t6">
<p>The password if basic authentication is required for this service</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r6c1-t6" headers="r1c1-t6">
<p><code>p_proxy_override</code></p>
</td>
<td class="cellalignment3317" headers="r6c1-t6 r1c2-t6">
<p>The proxy to use for the request. The proxy supplied overrides the proxy defined in the application attributes.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r7c1-t6" headers="r1c1-t6">
<p><code>p_transfer_timeout</code></p>
</td>
<td class="cellalignment3317" headers="r7c1-t6 r1c2-t6">
<p>The amount of time in seconds to wait for a response.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r8c1-t6" headers="r1c1-t6">
<p><code>p_body</code></p>
</td>
<td class="cellalignment3317" headers="r8c1-t6 r1c2-t6">
<p>The HTTP payload to be sent as CLOB.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r9c1-t6" headers="r1c1-t6">
<p><code>p_body_blob</code></p>
</td>
<td class="cellalignment3317" headers="r9c1-t6 r1c2-t6">
<p>The HTTP payload to be sent as binary BLOB. For example, posting a file.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r10c1-t6" headers="r1c1-t6">
<p><code>p_parm_name</code></p>
</td>
<td class="cellalignment3317" headers="r10c1-t6 r1c2-t6">
<p>The name of the parameters to be used in name/value pairs.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r11c1-t6" headers="r1c1-t6">
<p><code>p_parm_value</code></p>
</td>
<td class="cellalignment3317" headers="r11c1-t6 r1c2-t6">
<p>The value of the parameters to be used in name/value pairs.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r12c1-t6" headers="r1c1-t6">
<p><code>p_wallet_path</code></p>
</td>
<td class="cellalignment3317" headers="r12c1-t6 r1c2-t6">
<p>The file system path to a wallet if the URL endpoint is https. For example, file:/usr/home/oracle/WALLETS. The wallet path provided overrides the wallet defined in the instance settings.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r13c1-t6" headers="r1c1-t6">
<p><code>p_wallet_pwd</code></p>
</td>
<td class="cellalignment3317" headers="r13c1-t6 r1c2-t6">
<p>The password to access the wallet.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1959"></a>Example</p>
<p>The following example calls a RESTful style Web service using the <code>make_rest_request</code> function passing the parameters to the service as name/value pairs. The response from the service is stored in a locally declared CLOB.</p>
<pre>declare
    l_clob       CLOB;
BEGIN
 
    l_clob := apex_web_service.make_rest_request(
        p_url =&gt; &#39;http://us.music.yahooapis.com/ video/v1/list/published/popular&#39;,
        p_http_method =&gt; &#39;GET&#39;,
        p_parm_name =&gt; apex_util.string_to_table(&#39;appid:format&#39;),
        p_parm_value =&gt; apex_util.string_to_table(&#39;xyz:xml&#39;));
 
END
</pre></div>
<!-- class="refsect1" -->
<a id="BABIBFFF"></a>
<div id="AEAPI1960" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">PARSE_RESPONSE <a id="sthref927"></a>Function</h2>
<p>Use this function to parse the response from a Web service that is stored in a collection and return the result as a VARCHAR2 type.</p>
<p class="subhead2"><a id="AEAPI1961"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.PARSE_RESPONSE (
    p_collection_name   IN VARCHAR2,
    p_xpath             IN VARCHAR2,
    p_ns                IN VARCHAR2 default null ) 
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="AEAPI1962"></a>Parameters</p>
<p><a href="#BABHCBAB">Table 22-6</a> describes the parameters available in the <code>PARSE_RESPONSE</code> function.</p>
<div id="AEAPI1963" class="tblformal">
<p class="titleintable"><a id="sthref928"></a><a id="BABHCBAB"></a>Table 22-6 PARSE_RESPONSE Function Parameters</p>
<table class="cellalignment3315" title="PARSE_RESPONSE Function Parameters" summary="This table contains the parameters for the PARSE_RESPONSE function." dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t7">Parameter</th>
<th class="cellalignment3316" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t7" headers="r1c1-t7">
<p><code>p_collection_name</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t7 r1c2-t7">
<p>The name of the collection where the Web service response is stored.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t7" headers="r1c1-t7">
<p><code>p_xpath</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t7 r1c2-t7">
<p>The XPath expression to the desired node.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t7" headers="r1c1-t7">
<p><code>p_ns</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t7 r1c2-t7">
<p>The namespace to the desired node.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1964"></a>Example</p>
<p>The following example parses a response stored in a collection called <code>STELLENT_CHECKIN</code> and stores the value in a locally declared VARCHAR2 variable.</p>
<pre>declare
    l_response_msg  VARCHAR2(4000);
BEGIN
    l_response_msg := apex_web_service.parse_response(
        p_collection_name=&gt;&#39;STELLENT_CHECKIN&#39;,
        p_xpath =&gt;
&#39;//idc:CheckInUniversalResponse/idc:CheckInUniversalResult/idc:StatusInfo/idc:statusMessage/text()&#39;,
        p_ns=&gt;&#39;xmlns:idc=&#34;http://www.stellent.com/CheckIn/&#34;&#39;);
END;
</pre></div>
<!-- class="refsect1" -->
<a id="BABBCJEI"></a>
<div id="AEAPI1965" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">PARSE_RESPONSE_CLOB <a id="sthref929"></a>Function</h2>
<p>Use this function to parse the response from a Web service that is stored in a collection and return the result as a CLOB type.</p>
<p class="subhead2"><a id="AEAPI1966"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.PARSE_RESPONSE_CLOB (
    p_collection_name   IN VARCHAR2,
    p_xpath             IN VARCHAR2,
    p_ns                IN VARCHAR2 default null ) 
RETURN CLOB;
</pre>
<p class="subhead2"><a id="AEAPI1967"></a>Parameters</p>
<p><a href="#BABGBFCG">Table 22-7</a> describes the parameters available in the <code>PARSE_RESPONSE_CLOB</code> function.</p>
<div id="AEAPI1968" class="tblformal">
<p class="titleintable"><a id="sthref930"></a><a id="BABGBFCG"></a>Table 22-7 PARSE_RESPONSE _CLOB Function Parameters</p>
<table class="cellalignment3315" title="PARSE_RESPONSE _CLOB Function Parameters" summary="This table contains the parameters for the PARSE_RESPONSE_CLOB function." dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t8">Parameter</th>
<th class="cellalignment3316" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t8" headers="r1c1-t8">
<p><code>p_collection_name</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t8 r1c2-t8">
<p>The name of the collection where the Web service response is stored.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t8" headers="r1c1-t8">
<p><code>p_xpath</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t8 r1c2-t8">
<p>The XPath expression to the desired node.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t8" headers="r1c1-t8">
<p><code>p_ns</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t8 r1c2-t8">
<p>The namespace to the desired node.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1969"></a>Example</p>
<p>The following example parses a response stored in a collection called <code>STELLENT_CHECKIN</code> and stores the value in a locally declared CLOB variable.</p>
<pre>declare
    l_response_msg  CLOB;
BEGIN
    l_response_msg := apex_web_service.parse_response_clob(
        p_collection_name=&gt;&#39;STELLENT_CHECKIN&#39;,
        p_xpath=&gt;
&#39;//idc:CheckInUniversalResponse/idc:CheckInUniversalResult/idc:StatusInfo/idc:statusMessage/text()&#39;,
        p_ns=&gt;&#39;xmlns:idc=&#34;http://www.stellent.com/CheckIn/&#34;&#39;);
END;
</pre></div>
<!-- class="refsect1" -->
<a id="BABHIGGA"></a>
<div id="AEAPI1970" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">PARSE_XML <a id="sthref931"></a>Function</h2>
<p>Use this function to parse the response from a Web service returned as an XMLTYPE and return the value requested as a VARCHAR2.</p>
<p class="subhead2"><a id="AEAPI1971"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.PARSE_XML (
    p_xml               IN XMLTYPE,
    p_xpath             IN VARCHAR2,
    p_ns                IN VARCHAR2 default null ) 
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="AEAPI1972"></a>Parameters</p>
<p><a href="#BABBCGFI">Table 22-8</a> describes the parameters available in the <code>PARSE_XML</code> function.</p>
<div id="AEAPI1973" class="tblformal">
<p class="titleintable"><a id="sthref932"></a><a id="BABBCGFI"></a>Table 22-8 PARSE_XML Function Parameters</p>
<table class="cellalignment3315" title="PARSE_XML Function Parameters" summary="This table contains the parameters for the PARSE_XML function." dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t9">Parameter</th>
<th class="cellalignment3316" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t9" headers="r1c1-t9">
<p><code>p_xml</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t9 r1c2-t9">
<p>The XML document as an XMLTYPE to parse.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t9" headers="r1c1-t9">
<p><code>p_xpath</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t9 r1c2-t9">
<p>The XPath expression to the desired node.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t9" headers="r1c1-t9">
<p><code>p_ns</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t9 r1c2-t9">
<p>The namespace to the desired node.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1974"></a>Example</p>
<p>The following example uses the <code>make_request</code> function to call a Web service and store the results in a local XMLTYPE variable. The <code>parse_xml</code> function is then used to pull out a specific node of the XML document stored in the XMLTYPE and stores it in a locally declared VARCHAR2 variable.</p>
<pre>declare
    l_envelope CLOB;
    l_xml XMLTYPE;
    l_movie VARCHAR2(4000);
BEGIN
    l_envelope := &#39; &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;soap:Envelope xmlns:soap=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;
xmlns:tns=&#34;http://www.ignyte.com/whatsshowing&#34;
xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
   &lt;soap:Body&gt;
      &lt;tns:GetTheatersAndMovies&gt;
         &lt;tns:zipCode&gt;43221&lt;/tns:zipCode&gt;
         &lt;tns:radius&gt;5&lt;/tns:radius&gt;
      &lt;/tns:GetTheatersAndMovies&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;&#39;;
 
   l_xml := apex_web_service.make_request(
     p_url =&gt; &#39; http://www.ignyte.com/webservices/ignyte.whatsshowing.webservice/moviefunctions.asmx&#39;,
     p_action =&gt; &#39; http://www.ignyte.com/whatsshowing/GetTheatersAndMovies&#39;,
     p_envelope =&gt; l_envelope );
 
   l_movie := apex_web_service.parse_xml(
     p_xml =&gt; l_xml,
     p_xpath =&gt; &#39; //GetTheatersAndMoviesResponse/GetTheatersAndMoviesResult/Theater/Movies/Movie/Name[1]&#39;,
     p_ns =&gt; &#39; xmlns=&#34;http://www.ignyte.com/whatsshowing&#34;&#39; );
 
END;
</pre></div>
<!-- class="refsect1" -->
<a id="BABDAFHJ"></a>
<div id="AEAPI1975" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">PARSE_XML_CLOB <a id="sthref933"></a><a id="sthref934"></a>Function</h2>
<p>Use this function to parse the response from a Web service returned as an XMLTYPE and return the value requested as a CLOB.</p>
<p class="subhead2"><a id="AEAPI1976"></a>Syntax</p>
<pre>APEX_WEB_SERVICE.PARSE_XML_CLOB (
    p_xml               IN XMLTYPE,
    p_xpath             IN VARCHAR2,
    p_ns                IN VARCHAR2 default null ) 
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="AEAPI1977"></a>Parameters</p>
<p><a href="#BABJFFFD">Table 22-9</a> describes the parameters available in the <code>PARSE_XML_CLOB</code> function.</p>
<div id="AEAPI1978" class="tblformal">
<p class="titleintable"><a id="sthref935"></a><a id="BABJFFFD"></a>Table 22-9 PARSE_XML_CLOB Function Parameters</p>
<table class="cellalignment3315" title="PARSE_XML_CLOB Function Parameters" summary="This table contains the parameters for the PARSE_XML _CLOB function." dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t10">Parameter</th>
<th class="cellalignment3316" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t10" headers="r1c1-t10">
<p><code>p_xml</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t10 r1c2-t10">
<p>The XML document as an XMLTYPE to parse.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t10" headers="r1c1-t10">
<p><code>p_xpath</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t10 r1c2-t10">
<p>The XPath expression to the desired node.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t10" headers="r1c1-t10">
<p><code>p_ns</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t10 r1c2-t10">
<p>The namespace to the desired node.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI1979"></a>Example</p>
<p>The following example uses the <code>make_request</code> function to call a Web service and store the results in a local XMLTYPE variable. The <code>parse_xml</code> function is then used to pull out a specific node of the XML document stored in the XMLTYPE and stores it in a locally declared VARCHAR2 variable</p>
<pre>declare
    l_envelope CLOB;
    l_xml XMLTYPE;
    l_movie CLOB;
BEGIN
    l_envelope := &#39; &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;soap:Envelope xmlns:soap=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;
xmlns:tns=&#34;http://www.ignyte.com/whatsshowing&#34;
xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
   &lt;soap:Body&gt;
      &lt;tns:GetTheatersAndMovies&gt;
         &lt;tns:zipCode&gt;43221&lt;/tns:zipCode&gt;
         &lt;tns:radius&gt;5&lt;/tns:radius&gt;
      &lt;/tns:GetTheatersAndMovies&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;&#39;;
 
   l_xml := apex_web_service.make_request(
     p_url =&gt; &#39; http://www.ignyte.com/webservices/ignyte.whatsshowing.webservice/moviefunctions.asmx&#39;,
     p_action =&gt; &#39; http://www.ignyte.com/whatsshowing/GetTheatersAndMovies&#39;,
     p_envelope =&gt; l_envelope );
 
   l_movie := apex_web_service.parse_xml_clob(
     p_xml =&gt; l_xml,
     p_xpath =&gt; &#39; //GetTheatersAndMoviesResponse/GetTheatersAndMoviesResult/Theater/Movies/Movie/Name[1]&#39;,
     p_ns =&gt; &#39; xmlns=&#34;http://www.ignyte.com/whatsshowing&#34;&#39; );
 
END;
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3308">
<tr>
<td class="cellalignment3317">
<table class="cellalignment3313">
<tr>
<td class="cellalignment3312"><a href="apex_util.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3312"><a href="javascript_api.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3319">
<table class="cellalignment3311">
<tr>
<td class="cellalignment3312"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3312"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3312"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3312"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3312"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3312"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>