<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-1811"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/JavaScript%20APIs"></a><title>JavaScript APIs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748"/>
<meta name="dcterms.created" content="2014-05-22T14:53:20Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Application Express API Reference"/>
<meta name="dcterms.identifier" content="E17963-07"/>
<meta name="dcterms.isVersionOf" content="AEAPI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="apex_web_service.htm" title="Previous" type="text/html"/>
<link rel="Next" href="index.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17963-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">27/28</span> <!-- End Header -->
<div id="AEAPI266" class="chapter"><a id="CDEEIGFH"></a>
<h1 class="chapter"><span class="secnum">23</span> JavaScript APIs</h1>
<p>This section describes <a id="sthref936"></a><a id="sthref937"></a>JavaScript functions and objects included with Oracle Application Express and available on every page. You can use these functions and objects to provide client-side functionality, such as showing and hiding page elements, or making XML HTTP Asynchronous JavaScript and XML (AJAX) requests.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Legacy JavaScript. Work has commenced in attempting to reduce the overall size of JavaScript that is loaded by Application Express when rendering a page. JavaScript functions that are no longer served on every page are gradually being moved to a legacy JavaScript file, which can be found in <code>/i/libraries/apex/legacy.js</code>.
<p>When developing applications, a developer has the option to either include, or not include the legacy JavaScript functions. This is achieved by using the Include Legacy JavaScript property on the User Interface Attributes page under the application&#39;s Shared Components.</p>
<p>Existing applications are migrated with this option enabled, for backward compatibility. To not include this legacy file, you need to go through the functions listed in the legacy file, and search your application and associated JavaScript files for any references to those files. If you are happy that there are no references to these functions, you can switch off including the legacy file and benefit from the slightly smaller library.</p>
<p>When developing new applications, the legacy file is included by default in all applications that use a <code>Desktop</code> User Interface Type. New applications that use a <code>jQuery Mobile Smartphone</code> User Interface Type do not include this file.</p>
<p>For both new and existing application development, Oracle recommends that you do not continue to use any of the functions in legacy.js, to reduce your dependency to this legacy JavaScript.</p>
</div>
</div>
<!-- class="chapter" -->
<p class="subhead2"><a id="AEAPI2349"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBIFDBI">apex namespace</a></p>
</li>
<li>
<p><a href="#BGBBDBCJ">apex.da namespace</a></p>
</li>
<li>
<p><a href="#BGBDIAGB">apex.event namespace</a></p>
</li>
<li>
<p><a href="#BGBFEEAB">apex.item namespace</a></p>
</li>
<li>
<p><a href="#BGBDGIDE">apex.navigation namespace</a></p>
</li>
<li>
<p><a href="#BGBJEFDJ">apex.server namespace</a></p>
</li>
<li>
<p><a href="#BGBDAACG">apex.storage namespace</a></p>
</li>
<li>
<p><a href="#BGBFIEJC">apex.widget namespace</a></p>
</li>
<li>
<p><a href="#BGBIFCDG">Miscellaneous Javascript APIs</a></p>
</li>
</ul>
<div class="refentry"><a id="BGBIFDBI"></a>
<div id="AEAPI29437" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex namespace</h2>
<p>Use the <code>apex</code> namespace to store global variables and highly used functions in Application Express.</p>
<ul>
<li>
<p><a href="#BGBCIBDF">Global Variables</a></p>
</li>
<li>
<p><a href="#BGBIGGAE">apex.confirm</a></p>
</li>
<li>
<p><a href="#BGBBEFFJ">apex.submit</a></p>
</li>
</ul>
<div class="refsect2"><a id="BGBCIBDF"></a>
<h3 class="refsect2">Global Variables</h3>
<p>Global variables for this namespace are described in this section.</p>
<div class="refsect3"><a id="sthref938"></a>
<h4 class="refsect3">apex.gPageContext$</h4>
<p>Application Express variable that stores the current page context. The current page context is different depending on whether the page is a Desktop, or jQuery Mobile page. For Desktop, this is set to the document level. For jQuery Mobile, where pages are actually represented as DIV elements in the Browser DOM and multiple page DIVs can be loaded in the Browser DOM at one time, this is set to the DIV element representing the current page.</p>
<p>This is used to set the context for your jQuery selectors, to ensure that the selector is executing within the context of the correct page.</p>
<p>For example:</p>
<pre>jQuery( &#34;.my_class&#34;, apex.gPageContext$ );
</pre>
<p>This selects all elements with a CSS class of <code>my_class</code>, in the context of the current page.</p>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="AEAPI29440" class="refsect2"><a id="BGBIGGAE"></a>
<h3 class="refsect2">apex.confirm</h3>
<p>The <code>apex.confirm</code> function displays a confirmation and depending on the user&#39;s choice either submits the page, or cancels a page submit. This function has 2 signatures, as described below.</p>
<p class="subhead2"><a id="AEAPI29441"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDGHCBE">apex.confirm(pMessage, pRequest)</a></p>
</li>
<li>
<p><a href="#CDEHGADD">apex.confirm(pMessage, pOptions)</a></p>
</li>
</ul>
<div id="AEAPI521" class="refsect3"><a id="CHDGHCBE"></a>
<h4 class="refsect3"><a id="sthref939"></a>apex.confirm(pMessage, pRequest)</h4>
<p>Displays a confirmation showing a message, <code>pMessage</code>, and depending on user&#39;s choice, submits a page setting request value, <code>pRequest</code>, or cancels page submit.</p>
<p class="subhead2"><a id="AEAPI1999"></a>Parameters</p>
<pre>pMessage (string)
pRequest (string)
</pre>
<p class="subhead2"><a id="AEAPI2000"></a>Example</p>
<p>This example shows a confirmation dialog with the text &#39;Delete Department&#39;. If the user chooses to proceed with the delete, the current page is submitted with a REQUEST value of &#39;DELETE&#39;</p>
<pre>apex.confirm(&#39;Delete Department&#39;, &#39;DELETE&#39;);
</pre></div>
<!-- class="refsect3" -->
<div id="AEAPI274" class="refsect3"><a id="CDEHGADD"></a>
<h4 class="refsect3"><a id="sthref940"></a>apex.confirm(pMessage, pOptions)</h4>
<p>Displays a confirmation showing a message (<code>pMessage</code>) and depending on user&#39;s choice, submits a page setting request values specified by (<code>pOptions</code>) or cancels page submit.</p>
<p class="subhead2"><a id="AEAPI2001"></a>Parameters</p>
<pre>pMessage (string)
pOptions (Object)
where pOptions can contain the following properties:
<span class="bold">submitIfEnter</span> - If you only want to confirm when the ENTER key has been pressed, call apex.confirm in the event callback and pass the event object as this parameter.
<span class="bold">request</span> - The request value to set (defaults to null)
<span class="bold">set</span> - Object conatining name/value pairs of items to be set on the page prior to submission(defaults to null).
<span class="bold">showWait</span> - Flag to control if a &#39;Wait Indicator&#39; icon is displayed, which can be useful when running long page operations (Defaults to false).
</pre>
<p class="subhead2"><a id="sthref941"></a>Return Values</p>
<p>Boolean - If the <code>submitIfEnter</code> option is specified, a boolean value is returned. True is returned if the ENTER key was not pressed and false if the ENTER key was pressed. If <code>submitIfEnter</code> is not been specified, nothing is returned.</p>
<p class="subhead2"><a id="AEAPI2002"></a>Example</p>
<p>This example shows a confirmation message with the &#39;Save Department?&#39; text. If the user chooses to proceed with the save, the page is submitted with a <code>REQUEST</code> value of &#39;SAVE&#39; and 2 page item values are set, <code>P1_DEPTNO</code> to <code>10</code> and <code>P1_EMPNO</code> to <code>5433</code>.</p>
<pre>apex.confirm(&#34;Save Department?&#34;, {
  request:&#34;SAVE&#34;,
  set:{&#34;P1_DEPTNO&#34;:10, &#34;P1_EMPNO&#34;:5433}
  });
</pre></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="AEAPI29442" class="refsect2"><a id="BGBBEFFJ"></a>
<h3 class="refsect2">apex.submit</h3>
<p>The <code>apex.submit</code> function submits the current page. This function has 2 signatures, as described below.</p>
<p class="subhead2"><a id="AEAPI29443"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBJHEHG">apex.submit(pOptions)</a></p>
</li>
<li>
<p><a href="#CHDBEACA">apex.submit(pRequest)</a></p>
</li>
</ul>
<div id="AEAPI273" class="refsect3"><a id="BGBJHEHG"></a>
<h4 class="refsect3"><a id="sthref942"></a>apex.submit(pOptions)</h4>
<p>This function submits the page using the options specified in <code>pOptions</code>.</p>
<p class="subhead2"><a id="AEAPI1995"></a>Parameters</p>
<pre>pOptions (Object)
where pOptions can contain the following properties:
<span class="bold">submitIfEnter</span> - If you only want to submit when the ENTER key has been pressed, call apex.submit in the event callback and pass the event object as this parameter.
<span class="bold">request</span> - The request value to set (defaults to null)
<span class="bold">set</span> - Object conatining name/value pairs of items to be set on the page prior to submission(defaults to null).
<span class="bold">showWait</span> - Flag to control if a &#39;Wait Indicator&#39; icon is displayed, which can be useful when running long page operations (Defaults to false).
</pre>
<p class="subhead2"><a id="sthref943"></a>Return Values</p>
<p>Boolean - If the <code>submitIfEnter</code> option is specified, a boolean value is returned. True is returned if the ENTER key was not pressed and false if the ENTER key was pressed. If <code>submitIfEnter</code> is not been specified, nothing is returned.</p>
<p class="subhead2"><a id="AEAPI1996"></a>Example</p>
<p>This example submits the page with a REQUEST value of &#39;DELETE&#39; and 2 page item values are set, <code>P1_DEPTNO</code> to <code>10</code> and <code>P1_EMPNO</code> to <code>5433</code>. During submit a wait icon is displayed as visual indicator for the user as well.</p>
<pre>apex.submit({
  request:&#34;DELETE&#34;,
  set:{&#34;P1_DEPTNO&#34;:10, &#34;P1_EMPNO&#34;:5433});
</pre></div>
<!-- class="refsect3" -->
<div id="AEAPI522" class="refsect3"><a id="CHDBEACA"></a>
<h4 class="refsect3"><a id="sthref944"></a>apex.submit(pRequest)</h4>
<p>This function submits the page setting the Application Express Request value <code>pRequest</code>.</p>
<p class="subhead2"><a id="AEAPI1997"></a>Parameters</p>
<pre>pRequest (String)
</pre>
<p class="subhead2"><a id="AEAPI1998"></a>Example</p>
<p>Submits the current page with a REQUEST value of &#39;DELETE&#39;.</p>
<pre>apex.submit( &#39;DELETE&#39; );
</pre></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBBDBCJ"></a>
<div class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex.da namespace</h2>
<p>This namespace holds all Dynamic Action functions in Oracle Application Express.</p>
<div class="refsect2"><a id="sthref945"></a>
<h3 class="refsect2">apex.da.resume (pCallback, pErrorOccurred)</h3>
<p>This function resumes execution of a Dynamic Action. Execution of a Dynamic Action can be paused, if the action&#39;s <code>Wait for Result</code> attribute is checked. The <code>Wait for Result</code> is a Dynamic Action plug-in standard attribute designed for use with Ajax based Dynamic Actions. If a plug-in exposes this attribute, it needs to resume execution by calling this function in the relevant place in the plug-in JavaScript code, otherwise, your action breaks execution of Dynamic Actions.</p>
<p class="subhead2"><a id="sthref946"></a>Parameters</p>
<p><code>pCallback</code> (function) - This is a required parameter that references a callback function available from the <code>this.resumeCallback</code> property.</p>
<p><code>pErrorOccurred</code> (boolean) - This is a required parameter that indicates to the framework whether an error has occurred. If an error has occurred and the action&#39;s Stop Execution on Error attribute is checked, execution of the Dynamic Action is stopped.</p>
<p class="subhead2"><a id="sthref947"></a>Return Values</p>
<p>None</p>
<p class="subhead2"><a id="sthref948"></a>Example 1</p>
<p>Resume execution of the actions indicating that no error has occurred, for example from a success callback of an Ajax based action.</p>
<pre>apex.da.resume( lResumeCallback, false );
</pre>
<p class="subhead2"><a id="sthref949"></a>Example 2</p>
<p>Resume execution of the actions indicating that an error has occurred, for example from an error callback of an Ajax based action. If the action&#39;s</p>
<p><code>Stop Execution on Error</code> attribute is checked, execution of the dynamic action is stopped.</p>
<pre>apex.da.resume( lResumeCallback, true );
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBDIAGB"></a>
<div id="AEAPI29444" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex.event namespace</h2>
<p>Use the <code>apex.event</code> namespace to store all event related functions of Oracle Application Express.</p>
<p class="subhead2"><a id="AEAPI29445"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDGGBII">apex.event.trigger(pSelector,pEvent,pData)</a></p>
</li>
</ul>
<div id="AEAPI415" class="refsect2"><a id="CHDGGBII"></a>
<h3 class="refsect2"><a id="sthref950"></a>apex.event.trigger(pSelector,pEvent,pData)</h3>
<p>Given a jQuery selector, jQuery object or DOM Node the specified pEvent is triggered. pEvent can be a browser event like &#34;click&#34; or &#34;change&#34; but also a custom event like &#34;slidechange&#34;. This function should only be used to trigger events that are handled by the dynamic action framework. Otherwise, custom events registered by plug-ins installed in your application or any event that is already exposed in dynamic actions can be compromised.</p>
<p class="subhead2"><a id="AEAPI1980"></a>Return Value</p>
<pre>Boolean
</pre>
<p class="subhead2"><a id="AEAPI1981"></a>Parameters</p>
<pre>pSelector (jQuery selector | jQuery object | DOM Node)
pEvent (String)
pData (Object)
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBFEEAB"></a>
<div id="AEAPI29446" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex.item namespace</h2>
<p>This is the APEX page item namespace. This namespace holds all single item functions. These functions assume that these are APEX generated page items.</p>
<p class="subhead2"><a id="AEAPI29447"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBEBIEJ">apex.item( pNd )</a></p>
</li>
<li>
<p><a href="#BGBHDJHJ">apex.item( pNd ).addValue( pValue )</a></p>
</li>
<li>
<p><a href="#BGBJDEEB">apex.item( pNd ).disable()</a></p>
</li>
<li>
<p><a href="#BGBDAJHB">apex.item( pNd ).enable()</a></p>
</li>
<li>
<p><a href="#BGBJBEDJ">apex.item( pNd ).getValue()</a></p>
</li>
<li>
<p><a href="#BGBEAIGF">apex.item( pNd ).hide( pHideRow)</a></p>
</li>
<li>
<p><a href="#BGBJAEJH">apex.item( pNd ).isEmpty()</a></p>
</li>
<li>
<p><a href="#BGBEIADD">apex.item( pNd ).setFocus()</a></p>
</li>
<li>
<p><a href="#BGBBICFJ">apex.item( pNd ).setStyle( pPropertyName, pPropertyValue )</a></p>
</li>
<li>
<p><a href="#BGBBCDCH">apex.item( pNd ).setValue(pValue, pDisplayValue, pSuppressChangeEvent)</a></p>
</li>
</ul>
<div id="AEAPI29448" class="refsect2"><a id="BGBEBIEJ"></a>
<h3 class="refsect2">apex.item( pNd )</h3>
<p>The <code>apex.item</code> API provides a single interface for item related functionality of Application Express. The API returns an Application Express item object, which can then be used to access item related functions and properties.</p>
<p>Plug-in developers can override much of the behavior defined in the <code>apex.item</code> namespace, by calling <code>apex.widget.initPageItem</code> with their overrides. See the documentation on <a href="#BGBBHCBH">&#34;apex.widget.initPageItem( pName, pOptions)&#34;</a> for more details.</p>
<p class="subhead2"><a id="AEAPI29449"></a>Return Values</p>
<p><a href="#BGBCJFIG">Table 23-1, &#34;Return Values for apex.item( pNd )&#34;</a> describes the return values for this function.</p>
<div id="AEAPI29450" class="tblformal">
<p class="titleintable"><a id="sthref951"></a><a id="BGBCJFIG"></a>Table 23-1 Return Values for apex.item( pNd )</p>
<table class="cellalignment3315" title="Return Values for apex.item( pNd )" summary="table of return values" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t3">Type</th>
<th class="cellalignment3316" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t3" headers="r1c1-t3">
<p>(Object)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t3 r1c2-t3">
<p>Returns the Application Express item object, which is used to access item specific functions. For example <code>getValue</code>, <code>setValue</code>, and so on.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29451"></a>Parameters</p>
<p><a href="#BGBJJBCA">Table 23-2, &#34;Parameters for apex.item( pNd )&#34;</a> describes the parameters available for this function.</p>
<div id="AEAPI29452" class="tblformal">
<p class="titleintable"><a id="sthref952"></a><a id="BGBJJBCA"></a>Table 23-2 Parameters for apex.item( pNd )</p>
<table class="cellalignment3315" title="Parameters for apex.item( pNd )" summary="table of parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t4">Name</th>
<th class="cellalignment3316" id="r1c2-t4">Type</th>
<th class="cellalignment3316" id="r1c3-t4">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t4">Default</th>
<th class="cellalignment3316" id="r1c5-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t4" headers="r1c1-t4">
<p><code>pNd</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t4 r1c2-t4">
<p>(DOM Node | String)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t4 r1c3-t4">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t4 r1c4-t4">&nbsp;</td>
<td class="cellalignment3317" headers="r2c1-t4 r1c5-t4">
<p>Application Express item name or DOM node.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29453"></a>Examples</p>
<p>This will not be used by itself, rather it is used to access item specific functions and properties, as documented in the proceeding APIs</p>
</div>
<!-- class="refsect2" -->
<div id="AEAPI29454" class="refsect2"><a id="BGBHDJHJ"></a>
<h3 class="refsect2">apex.item( pNd ).addValue( pValue )</h3>
<p>Adds a value to an Application Express item that supports multiple values.</p>
<p class="subhead2"><a id="AEAPI29455"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29456"></a>Parameters</p>
<p><a href="#BGBGBICC">Table 23-3, &#34;Parameters for apex.item( pNd ).addValue( pValue )&#34;</a> describes parameters available for this function.</p>
<div id="AEAPI29457" class="tblformal">
<p class="titleintable"><a id="sthref953"></a><a id="BGBGBICC"></a>Table 23-3 Parameters for apex.item( pNd ).addValue( pValue )</p>
<table class="cellalignment3315" title="Parameters for apex.item( pNd ).addValue( pValue )" summary="table of parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t5">Name</th>
<th class="cellalignment3316" id="r1c2-t5">Type</th>
<th class="cellalignment3316" id="r1c3-t5">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t5">Default</th>
<th class="cellalignment3316" id="r1c5-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t5" headers="r1c1-t5">
<p><code>pValue</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t5 r1c2-t5">
<p>(String)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t5 r1c3-t5">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t5 r1c4-t5">&nbsp;</td>
<td class="cellalignment3317" headers="r2c1-t5 r1c5-t5">
<p>The value to be set.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29458"></a>Examples</p>
<p>In this example, the page item called &#39;P1_ITEM&#39; will have the value &#39;100&#39; added to the values currently selected.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).addValue(&#39;100&#39;) ;
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29459" class="refsect2"><a id="BGBJDEEB"></a>
<h3 class="refsect2">apex.item( pNd ).disable()</h3>
<p>Disables the Application Express item value, taking into account the item type, making it unavailable for edit.</p>
<p class="subhead2"><a id="AEAPI29460"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29461"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29462"></a>Examples</p>
<p>In this example, the page item called &#39;P1_ITEM&#39; will be disabled and unavailable for edit.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).disable() ;
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29463" class="refsect2"><a id="BGBDAJHB"></a>
<h3 class="refsect2">apex.item( pNd ).enable()</h3>
<p>Enables the Application Express item value, taking into account the item type, making it available for edit.</p>
<p class="subhead2"><a id="AEAPI29464"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29465"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29466"></a>Examples</p>
<p>In this example, the page item called &#39;P1_ITEM&#39; will be enabled and available for edit.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).enable() ;
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29467" class="refsect2"><a id="BGBJBEDJ"></a>
<h3 class="refsect2">apex.item( pNd ).getValue()</h3>
<p>Returns the current value of an Application Express item on a page, taking into account the current item type. This does not return the item&#39;s current value from session state (although that could be the same), rather it will return the value as it is on the current page.</p>
<p>There are 2 related functions to .getValue(). $v( pNd ) which returns an item&#39;s value, but in the format it will be posted. This will either be a single value, or if the item supports multiple values, will be a &#39;:&#39; colon separated list of values. There is also the $v2( pNd ) function, which is just a shortcut to .getValue() and returns either a single value, or array of values.</p>
<p class="subhead2"><a id="AEAPI29468"></a>Return Values</p>
<p><a href="#BGBFBIJE">Table 23-4, &#34;Return Values for apex.item( pNd ).getValue()&#34;</a> describes the return values for this function.</p>
<div id="AEAPI29469" class="tblformal">
<p class="titleintable"><a id="sthref954"></a><a id="BGBFBIJE"></a>Table 23-4 Return Values for apex.item( pNd ).getValue()</p>
<table class="cellalignment3315" title="Return Values for apex.item( pNd ).getValue()" summary="return values" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t6">Name</th>
<th class="cellalignment3316" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t6" headers="r1c1-t6">
<p>(String | Array)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t6 r1c2-t6">
<p>Returns either a single string value or array of string values if the item supports multiple values (for example the &#39;Select List&#39; with attribute &#39;Allow Multi Selection&#39; set to &#39; Yes&#39; or &#39;Shuttle&#39; native item types).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29470"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29471"></a>Examples</p>
<p>In this example, the current value of the page item called &#39;P1_ITEM&#39; will be shown in an alert.</p>
<pre>alert( &#34;P1_ITEM value = &#34; +  apex.item( &#34;P1_ITEM&#34; ).getValue()  );
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29472" class="refsect2"><a id="BGBEAIGF"></a>
<h3 class="refsect2">apex.item( pNd ).hide( pHideRow)</h3>
<p>Hides the Application Express item value, taking into account the item type. When using the .hide() function, it is important to understand the following:</p>
<ul>
<li>
<p>If the item being hidden is rendered on a page using table layout (meaning the page references a page template with Grid Layout Type set to &#39;HTML Table&#39;), and the call to hide has specified to hide the entire table row (pHideRow = TRUE), then it is assumed that everything pertaining to the item is contained in that row, and the entire row will be hidden.</p>
</li>
<li>
<p>If the item being hidden is rendered on a page using table layout, and the call to hide has specified not to hide the entire table row (pHideRow = FALSE, or not passed), then the function will attempt to hide the item&#39;s label, where the FOR attribute matches the ID of the item.</p>
</li>
<li>
<p>If the item being hidden is rendered on a page using grid layout (meaning the page references a page template with Grid Layout Type set to either &#39;Fixed Number of Columns&#39;, or &#39;Variable Number of Columns&#39;), and the item references a Label template that includes a Field Container element with a known ID (so where the Field Container &gt; Before Label and Item attribute includes an HTML element with id=&#34;#CURRENT_ITEM_CONTAINER_ID#&#34;), then it is assumed that everything pertaining to the item is contained in the Field Container, and this will be hidden.</p>
</li>
</ul>
<p class="subhead2"><a id="AEAPI29473"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29474"></a>Parameters</p>
<p><a href="#BGBHIFCH">Table 23-5, &#34;Parameters for apex.item( pDN ).hide( pHideRow )&#34;</a> describes the parameters available for this function.</p>
<div id="AEAPI29475" class="tblformal">
<p class="titleintable"><a id="sthref955"></a><a id="BGBHIFCH"></a>Table 23-5 Parameters for apex.item( pDN ).hide( pHideRow )</p>
<table class="cellalignment3315" title="Parameters for apex.item( pDN ).hide( pHideRow )" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t7">Name</th>
<th class="cellalignment3316" id="r1c2-t7">Type</th>
<th class="cellalignment3316" id="r1c3-t7">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t7">Default</th>
<th class="cellalignment3316" id="r1c5-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t7" headers="r1c1-t7">
<p><code>pHideRow</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t7 r1c2-t7">
<p>(String | Array)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t7 r1c3-t7">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r2c1-t7 r1c4-t7">
<p>FALSE</p>
</td>
<td class="cellalignment3317" headers="r2c1-t7 r1c5-t7">
<p>If TRUE, hides the nearest containing table row (TR). Only applicable when item is on a page using table layout (meaning the page references a page template with Grid Layout Type set to &#39;HTML Table&#39;).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29476"></a>Examples</p>
<p>In this example, the page item called P1_ITEM will be hidden. If P1_ITEM is on a page using grid layout and the item references a Label template that includes a Field Container element with a known ID (as detailed above), then that container element will be hidden. Otherwise just the item and its corresponding label will be hidden.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).hide();
</pre>
<p>In this example, the page item called P1_ITEM&#39;s nearest containing table row (TR) will be hidden (as pHideRow = TRUE). Hiding the entire table row should only be used on a page using table layout. If P1_ITEM is on a page using grid layout, then passing pHideRow = TRUE will not work and could result in adverse consequence for the page layout, where an incorrect table row is wrongly hidden.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).hide(TRUE);
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29477" class="refsect2"><a id="BGBJAEJH"></a>
<h3 class="refsect2">apex.item( pNd ).isEmpty()</h3>
<p>Returns true or false if an Application Express item is empty and will consider any whitespace including a space, a tab or a form-feed, as empty. This will also respect if the item type uses a List of Values, and a &#39;Null Return Value&#39; has been defined in the List of Values. In that case, the &#39;Null Return Value&#39; will be used to assert if the item is empty. In this case, the DOM node returned is the nearest ancestor of <code>pNd</code> that has a node name of <code>pToTag</code> and optionally a matching class. Also it returns false if <code>pNd</code> is not found or if there is no <code>pToTag</code> ancestor.</p>
<p class="subhead2"><a id="AEAPI29478"></a>Return Values</p>
<p><a href="#BGBHIAII">Table 23-6, &#34;Parameters for apex.item( pNd ).isEmpty()&#34;</a> describes the return values for this function.</p>
<div id="AEAPI29479" class="tblformal">
<p class="titleintable"><a id="sthref956"></a><a id="BGBHIAII"></a>Table 23-6 Parameters for apex.item( pNd ).isEmpty()</p>
<table class="cellalignment3315" title="Parameters for apex.item( pNd ).isEmpty()" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t8">Type</th>
<th class="cellalignment3316" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t8" headers="r1c1-t8">
<p>(Boolean)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t8 r1c2-t8">
<p>Returns true or false if an Application Express item is empty.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29480"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29481"></a>Examples</p>
<p>In this example, the call to .isEmpty() determines if the page item called &#39;P1_ITEM&#39; is null, and if so displays an alert.</p>
<pre>if( apex.item( &#34;P1_ITEM&#34; ).isEmpty()  ) {
  alert( &#34;P1_ITEM empty!&#34; );
}
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29482" class="refsect2"><a id="BGBEIADD"></a>
<h3 class="refsect2">apex.item( pNd ).setFocus()</h3>
<p>Places user focus on the Application Express item, taking into account how specific items are designed to receive focus.</p>
<p class="subhead2"><a id="AEAPI29483"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29484"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29485"></a>Examples</p>
<p>In this example, user focus is set to the page item called &#39;P1_ITEM&#39;.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).setFocus();
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29486" class="refsect2"><a id="BGBBICFJ"></a>
<h3 class="refsect2">apex.item( pNd ).setStyle( pPropertyName, pPropertyValue )</h3>
<p>Sets a style for the Application Express item, taking into account how specific items are designed to be styled.</p>
<p class="subhead2"><a id="AEAPI29487"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29488"></a>Parameters</p>
<p><a href="#BGBFIHBH">Table 23-7, &#34;Parameters for apex.item( pNd ).setStyle( pPropertyName, pPropertyValue )&#34;</a> describes the parameters available for this function.</p>
<div id="AEAPI29489" class="tblformal">
<p class="titleintable"><a id="sthref957"></a><a id="BGBFIHBH"></a>Table 23-7 Parameters for apex.item( pNd ).setStyle( pPropertyName, pPropertyValue )</p>
<table class="cellalignment3315" title="Parameters for apex.item( pNd ).setStyle( pPropertyName, pPropertyValue )" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t9">Name</th>
<th class="cellalignment3316" id="r1c2-t9">Type</th>
<th class="cellalignment3316" id="r1c3-t9">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t9">Default</th>
<th class="cellalignment3316" id="r1c5-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t9" headers="r1c1-t9">
<p><code>pPropertyName</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t9 r1c2-t9">
<p>(CSS Property Name)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t9 r1c3-t9">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t9 r1c4-t9">&nbsp;</td>
<td class="cellalignment3317" headers="r2c1-t9 r1c5-t9">
<p>The CSS property name that will be set.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t9" headers="r1c1-t9">
<p><code>pPropertyValue</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t9 r1c2-t9">
<p>(CSS Property Value)</p>
</td>
<td class="cellalignment3317" headers="r3c1-t9 r1c3-t9">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r3c1-t9 r1c4-t9">&nbsp;</td>
<td class="cellalignment3317" headers="r3c1-t9 r1c5-t9">
<p>The value used to set the CSS property.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29490"></a>Examples</p>
<p>In this example, the CSS property &#39;color&#39; will be set to &#39;red&#39; for the page item called &#39;P1_ITEM&#39;.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).setStyle( &#34;color&#34;, &#34;red&#34; );
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29491" class="refsect2"><a id="BGBBCDCH"></a>
<h3 class="refsect2">apex.item( pNd ).setValue(pValue, pDisplayValue, pSuppressChangeEvent)</h3>
<p>Sets the Application Express item value, taking into account the item type. This function sets the current value of an Application Express item on the page, not the item&#39;s current value in session state. It also allows for the caller to suppress the &#39;change&#39; event for the item being set, if desired.</p>
<p>See the <code>$s( pNd, pValue, pDisplayValue, pSuppressChangeEvent )</code> function for a shortcut to <code>.setValue()</code>.</p>
<p class="subhead2"><a id="AEAPI29492"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29493"></a>Parameters</p>
<p><a href="#BGBDIGCA">Table 23-8, &#34;Parameters for apex.item (pNd ).setValue( pValue, pDisplayValue, pSuppressChangeEvent)&#34;</a> describes the parameters available for this function.</p>
<div id="AEAPI29494" class="tblformal">
<p class="titleintable"><a id="sthref958"></a><a id="BGBDIGCA"></a>Table 23-8 Parameters for apex.item (pNd ).setValue( pValue, pDisplayValue, pSuppressChangeEvent)</p>
<table class="cellalignment3315" title="Parameters for apex.item (pNd ).setValue( pValue, pDisplayValue, pSuppressChangeEvent)" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t10">Name</th>
<th class="cellalignment3316" id="r1c2-t10">Type</th>
<th class="cellalignment3316" id="r1c3-t10">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t10">Default</th>
<th class="cellalignment3316" id="r1c5-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t10" headers="r1c1-t10">
<p><code>pValue</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t10 r1c2-t10">
<p>(String | Array)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t10 r1c3-t10">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t10 r1c4-t10">&nbsp;</td>
<td class="cellalignment3317" headers="r2c1-t10 r1c5-t10">
<p>The value to be set. For items that support multiple values (for example a &#39;Shuttle&#39;), an array of string values can be passed to set multiple values at once.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t10" headers="r1c1-t10">
<p><code>pDisplayValue</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t10 r1c2-t10">
<p>(String)</p>
</td>
<td class="cellalignment3317" headers="r3c1-t10 r1c3-t10">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r3c1-t10 r1c4-t10">&nbsp;</td>
<td class="cellalignment3317" headers="r3c1-t10 r1c5-t10">
<p>Optional parameter used to set the page item&#39;s display value, in the case where the return value is different. For example for the item type &#34;Popup LOV&#34;, with the attribute &#34;Input Field&#34; = &#34;Not Enterable, Show Display Value and Store Return Value&#34;, this value sets the &#34;Input Field&#34;. The value of pValue is then used to set the item&#39;s hidden return field.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t10" headers="r1c1-t10">
<p><code>pSuppressChangeEvent</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t10 r1c2-t10">
<p>(Boolean)</p>
</td>
<td class="cellalignment3317" headers="r4c1-t10 r1c3-t10">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r4c1-t10 r1c4-t10">
<p>FALSE</p>
</td>
<td class="cellalignment3317" headers="r4c1-t10 r1c5-t10">
<p>Pass TRUE to prevent the &#39;change&#39; event from being triggered, for the item being set.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29495"></a>Examples</p>
<p>In this example, the value of the page item called P1_ITEM will be set to &#34;10&#34;. As pSuppressChangeEvent has not been passed, the default behavior of the &#39;change&#39; event triggering for P1_ITEM will occur.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).setValue( &#34;10&#34; );
</pre>
<p>In this example P1_ITEM is a &#34;Popup LOV&#34; page item with the attribute &#34;Input Field&#34; = &#34;Not Enterable, Show Display Value and Store Return Value&#34;, set to &#34;Input Field&#34;. The display value of P1_ITEM will be set to &#34;SALES&#34; and the hidden return value will be set to &#34;10&#34;. As &#39;true&#39; has been passed for the pSuppressChangeEvent parameter, the &#39;change&#39; event will not trigger for the P1_ITEM item.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).setValue( &#34;10&#34;, &#34;SALES&#34;, true );
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29496" class="refsect2"><a id="BGBIIHCF"></a>
<h3 class="refsect2">apex.item( pNd ).show( pShowRow )</h3>
<p>Shows the Application Express item value, taking into account the item type. When using the .show() function, it is important to understand the following:</p>
<ul>
<li>
<p>If the item being shown is rendered on a page using table layout (meaning the page references a page template with Grid Layout Type set to &#39;HTML Table&#39;), and the call to show has specified to show the entire table row (pShowRow = TRUE), then it is assumed that everything pertaining to the item is contained in that row, and the entire row will be shown.</p>
</li>
<li>
<p>If the item being shown is rendered on a page using table layout, and the call to show has specified not to show the entire table row (pShowRow = FALSE, or not passed), then the function will attempt to show the item&#39;s label, where the FOR attribute matches the ID of the item.</p>
</li>
<li>
<p>If the item being shown is rendered on a page using grid layout (meaning the page references a page template with Grid Layout Type set to either &#39;Fixed Number of Columns&#39;, or &#39;Variable Number of Columns&#39;), and the item references a Label template that includes a Field Container element with a known ID (so where the Field Container &gt; Before Label and Item attribute includes an HTML element with id=&#34;#CURRENT_ITEM_CONTAINER_ID#&#34;), then it is assumed that everything pertaining to the item is contained in the Field Container, and this will be shown.</p>
</li>
</ul>
<p class="subhead2"><a id="AEAPI29497"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI29498"></a>Parameters</p>
<p><a href="#BGBIBDDF">Table 23-9, &#34;Parameters for apex.item ( pNd ).show( pShowRow )&#34;</a> describes the parameters for this function.</p>
<div id="AEAPI29499" class="tblformal">
<p class="titleintable"><a id="sthref959"></a><a id="BGBIBDDF"></a>Table 23-9 Parameters for apex.item ( pNd ).show( pShowRow )</p>
<table class="cellalignment3315" title="Parameters for apex.item ( pNd ).show( pShowRow )" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t11">Name</th>
<th class="cellalignment3316" id="r1c2-t11">Type</th>
<th class="cellalignment3316" id="r1c3-t11">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t11">Default</th>
<th class="cellalignment3316" id="r1c5-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t11" headers="r1c1-t11">
<p><code>pShowRow</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t11 r1c2-t11">
<p>(String | Array)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t11 r1c3-t11">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r2c1-t11 r1c4-t11">
<p>FALSE</p>
</td>
<td class="cellalignment3317" headers="r2c1-t11 r1c5-t11">
<p>If TRUE, shows the nearest containing table row (TR). Only applicable when item is on a page using table layout (meaning the page references a page template with Grid Layout Type set to &#39;HTML Table&#39;).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29500"></a>Examples</p>
<p>In this example, the page item called P1_ITEM will be shown. If P1_ITEM is on a page using grid layout and the item references a Label template that includes a Field Container element with a known ID (as detailed above), then that container element will be shown. Otherwise just the item and its corresponding label will be shown.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).show();
</pre>
<p>In this example, the page item called P1_ITEM&#39;s nearest containing table row (TR) will be shown (as pShowRow = TRUE). Showing the entire table row should only be used on a page using table layout. If P1_ITEM is on a page using grid layout, then passing pShowRow = TRUE will not work and could result in adverse consequence for the page layout, where an incorrect table row is wrongly shown.</p>
<pre>apex.item( &#34;P1_ITEM&#34; ).show(TRUE);
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBDGIDE"></a>
<div id="AEAPI29504" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex.navigation namespace</h2>
<p>Use the <code>apex.navigation</code> namespace to store popup and redirect related functions of Oracle Application Express.</p>
<p class="subhead2"><a id="AEAPI29505"></a>Topics:</p>
<ul>
<li>
<p><a href="#CDEIIHIF">apex.navigation.popup.close(pThat,pValue)</a></p>
</li>
</ul>
<div id="AEAPI29506" class="refsect2"><a id="CDEIIHIF"></a>
<h3 class="refsect2">apex.navigation.popup.close(pThat,pValue)</h3>
<p>Sets the value of the item in the parent window (<code>pThat</code>), with (<code>pValue</code>) and then closes the popup window.</p>
<p class="subhead2"><a id="AEAPI29507"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI29508"></a>Parameters</p>
<pre>pValue (string)
pThat (DOM node | string ID)
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBJEFDJ"></a>
<div id="AEAPI29509" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex.server namespace</h2>
<p>Use the <code>apex.server</code> namespace to store all AJAX functions to communicate with the server part of Oracle Application Express.</p>
<p class="subhead2"><a id="AEAPI29510"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBDIHHD">apex.server.plugin(pAjaxIdentifier,pData,pOptions)</a></p>
</li>
<li>
<p><a href="#BGBDEFFD">apex.server.pluginUrl( pAjaxIdentifier, pData )</a></p>
</li>
<li>
<p><a href="#BGBIIJFC">apex.server.process( pAjaxIdentifier, pData, pOptions )</a></p>
</li>
</ul>
<div id="AEAPI29511" class="refsect2"><a id="BGBDIHHD"></a>
<h3 class="refsect2">apex.server.plugin(pAjaxIdentifier,pData,pOptions)</h3>
<p>This function calls the PL/SQL AJAX function which has been defined for a plug-in. This function is a wrapper of the <code>jQuery.ajax</code> function and supports all the settings the jQuery function provides, with additional Application Express specific features.</p>
<p class="subhead2"><a id="AEAPI29512"></a>Parameters</p>
<div id="AEAPI29513" class="tblruleformalwidekey">
<p class="titleintable"><a id="sthref960"></a><a id="BGBCBAEI"></a>Table 23-10 apex.server.plugin(pAjaxIdentifier,pData,pOptions) Parameters</p>
<table class="cellalignment3322" title="apex.server.plugin(pAjaxIdentifier,pData,pOptions) Parameters" summary="table of parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t12">Parameter</th>
<th class="cellalignment3316" id="r1c2-t12">Type</th>
<th class="cellalignment3316" id="r1c3-t12">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t12" headers="r1c1-t12">
<p><code>pAjaxIdentifier</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t12 r1c2-t12">
<p>(String)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t12 r1c3-t12">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t12 r1c4-t12">
<p>Use the value returned by the PL/SQL package <code>apex_plugin.get_ajax_identifier</code> to identify your plug-in.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t12" headers="r1c1-t12">
<p><code>pData</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t12 r1c2-t12">
<p>{Object}</p>
</td>
<td class="cellalignment3317" headers="r3c1-t12 r1c3-t12">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r3c1-t12 r1c4-t12">
<p>Object which can optionally be used to send additional values to be sent with the AJAX request. The special attribute <code>pageItems</code> which can be of type jQuery selector, jQuery or DOM object or array of item names identifies the page items which should be included in the URL. But you can also set additional parameters that the <code>wwv_flow.show</code> procedure provides (for example you can set the scalar parameters x01 - x10 and the arrays f01 - f20).</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t12" headers="r1c1-t12">
<p><code>pOptions</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t12 r1c2-t12">
<p>{Object}</p>
</td>
<td class="cellalignment3317" headers="r4c1-t12 r1c3-t12">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r4c1-t12 r1c4-t12">
<p>Object which can optionally be used to set additional options used by the AJAX.</p>
<p>It supports the following optional Application Express specific attributes:</p>
<p><code>refreshObject</code> - jQuery selector, jQuery- or DOM object which identifies the DOM element for which the <code>apexbeforerefresh</code> and <code>apexafterrefresh</code> events are fired.</p>
<p><code>refreshObjectData</code> - Specify data that is internally passed by the <code>apexbeforerefresh</code> and <code>apexafterrefresh</code> event triggering code, so that any handlers defined for these events can access this data. In Dynamic Actions defined for the <code>Before Refresh</code> or <code>After Refresh</code> events, this can be accessed from JavaScript via the <code>this.data</code> property. For custom jQuery event handlers, this can be accessed via the <code>pData</code> parameter of the event handler.</p>
<p><code>clear</code> - JavaScript function used to clear the DOM after the <code>apexbeforerefresh</code> event has fired and before the actual AJAX call is triggered.</p>
<p><code>loadingIndicator</code> - jQuery selector, jQuery- or DOM object which identifies the DOM element where the loading indicator should be displayed next to it. <code>loadingIndicator</code> can also be a function which gets the loading Indicator as jQuery object and has to return the jQuery reference to the created loading indicator. For example:</p>
<pre>function( pLoadingIndicator ) {
    return pLoadingIndicator.prependTo ( apex.jQuery( &#34;td.shuttleControl&#34;, gShuttle ))
}
</pre>
<p><code>loadingIndicatorPosition</code> - 4 options to define the position of the loading indicator displayed. Only considered if the value passed to <code>loadingIndicator</code> is not a function.</p>
<ul>
<li>
<p><code>before</code>: Displays before the DOM element(s) defined by <code>loadingIndicator</code>.</p>
</li>
<li>
<p><code>after</code>: Displays after the DOM element(s) defined by <code>loadingIndicator</code>.</p>
</li>
<li>
<p><code>prepend</code>: Displays inside at the beginning of the DOM element(s) defined by <code>loadingIndicator</code>.</p>
</li>
<li>
<p><code>append</code>: Displays inside at the end of the DOM element(s) defined by <code>loadingIndicator</code>.</p>
</li>
</ul>
<p><span class="bold">See Also</span>: See jQuery documentation of <code>jQuery.ajax</code> for all other available attributes. The attribute <code>dataType</code> is defaulted to json.</p>
<p><code><a href="http://docs.jquery.com/">http://docs.jquery.com/</a></code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformalwidekey" -->
<p class="subhead2"><a id="AEAPI29514"></a>Return Values</p>
<div id="AEAPI29515" class="tblformal">
<p class="titleintable"><a id="sthref961"></a><a id="sthref962"></a>Table 23-11 Return Value</p>
<table class="cellalignment3315" title="Return Value" summary="Table of return values" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t13">Type</th>
<th class="cellalignment3316" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t13" headers="r1c1-t13">
<p>{Object}</p>
</td>
<td class="cellalignment3317" headers="r2c1-t13 r1c2-t13">
<p>Retuns a jqXHR object.</p>
<p><span class="bold">See Also</span>: See the jQuery documentation for more details on this object:</p>
<p><code><a href="http://docs.jquery.com/">http://docs.jquery.com/</a></code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29516"></a>Example</p>
<p>This call to <code>apex.server.plugin</code> sets the scalar value <code>x01</code> to <code>test</code> (which can be accessed from PL/SQL using <code>apex_application.g_x01</code>) and sets the page item&#39;s <code>P1_DEPTNO</code> and <code>P1_EMPNO</code> values in session state (using jQuery selector syntax). The <code>P1_MY_LIST</code> item is used as the element for which the <code>apexbeforerefresh</code> and <code>apexafterrefresh</code> events are fired. <code>P1_MY_LIST</code> is used as the element for which to display the loading indicator next to. The success callback is stubbed out and is used for developers to add their own code that fires when the call successfully returns.</p>
<p>The <code>pData</code> parameter to the success callback will contain any response sent from the call.</p>
<pre>apex.server.plugin ( lAjaxIdentifier, {
    x01: &#34;test&#34;,
    pageItems: &#34;#P1_DEPTNO,#P1_EMPNO&#34;
    }, {
    refreshObject:     &#34;#P1_MY_LIST&#34;,
    loadingIndicator:  &#34;#P1_MY_LIST&#34;,
    success: function( pData ) { ... do something here ... }
    } );
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29517" class="refsect2"><a id="BGBDEFFD"></a>
<h3 class="refsect2">apex.server.pluginUrl( pAjaxIdentifier, pData )</h3>
<p>This function returns the URL to issue a GET request to the PL/SQL AJAX function which has been defined for a plug-in.</p>
<p class="subhead2"><a id="AEAPI29518"></a>Parameters</p>
<div id="AEAPI29519" class="tblformal">
<p class="titleintable"><a id="sthref963"></a><a id="sthref964"></a>Table 23-12 apex.server.pluginUrl( pAjaxIdentifier, pData) Parameters</p>
<table class="cellalignment3315" title="apex.server.pluginUrl( pAjaxIdentifier, pData) Parameters" summary="Table of Parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t14">Name</th>
<th class="cellalignment3316" id="r1c2-t14">Type</th>
<th class="cellalignment3316" id="r1c3-t14">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t14">Default</th>
<th class="cellalignment3316" id="r1c5-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t14" headers="r1c1-t14">
<p><code>pAjaxIdentifier</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t14 r1c2-t14">
<p>(String)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t14 r1c3-t14">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t14 r1c4-t14">&nbsp;</td>
<td class="cellalignment3317" headers="r2c1-t14 r1c5-t14">
<p>Use the value returned by the PL/SQL package <code>apex_plugin.get_ajax_identifier</code> to identify your plug-in.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t14" headers="r1c1-t14">
<p><code>pData</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t14 r1c2-t14">
<p>{Object}</p>
</td>
<td class="cellalignment3317" headers="r3c1-t14 r1c3-t14">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r3c1-t14 r1c4-t14">&nbsp;</td>
<td class="cellalignment3317" headers="r3c1-t14 r1c5-t14">
<p>Object which can optionally be used to set additional values which are included into the URL. The special attribute <code>pageItems</code> which can be of type jQuery selector, jQuery or DOM object or array of item names identifies the page items which are included in the URL. You can also set additional parameters that the <code>wwv_flow.show</code> procedure provides (for example you can set the scalar parameters x01 - x10 and the arrays f01 - f20).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29520"></a>Return Value</p>
<div id="AEAPI29521" class="tblformal">
<p class="titleintable"><a id="sthref965"></a><a id="sthref966"></a>Table 23-13 Return Value</p>
<table class="cellalignment3315" title="Return Value" summary="Table of return values" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t15">Type</th>
<th class="cellalignment3316" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t15" headers="r1c1-t15">
<p>(String)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t15 r1c2-t15">
<p>The URL to issue the GET request.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29522"></a>Example</p>
<p>This call to <code>apex.server.pluginUrl</code> returns a URL to issue a GET request to the PL/SQL AJAX function which has been defined for a plug-in, where the URL sets the scalar value <code>x01</code> to <code>test</code> (which can be accessed from PL/SQL using <code>apex_application</code>.<code>g_x01</code>) and will also set the page item&#39;s <code>P1_DEPTNO</code> and <code>P1_EMPNO</code> values in session state (using jQuery selector syntax).</p>
<pre>var lUrl;
lUrl = apex.server.pluginUrl ( pAjaxIdentifier, {
  x01: &#34;test&#34;,
  pageItems: &#34;#P1_DEPTNO,#P1_EMPNO&#34; } );
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29523" class="refsect2"><a id="BGBIIJFC"></a>
<h3 class="refsect2">apex.server.process( pAjaxIdentifier, pData, pOptions )</h3>
<p>This function calls a PL/SQL on-demand process defined on page or application level. This function is a wrapper of the j<code>Query.ajax</code> function and supports all the setting the jQuery function provides but provides additional Application Express features.</p>
<p class="subhead2"><a id="AEAPI29524"></a>Parameters</p>
<div id="AEAPI29525" class="tblformal">
<p class="titleintable"><a id="sthref967"></a><a id="BGBFAIGG"></a>Table 23-14 apex.server.process Parameters</p>
<table class="cellalignment3315" title="apex.server.process Parameters" summary="table of parameters" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t16">Name</th>
<th class="cellalignment3316" id="r1c2-t16">Type</th>
<th class="cellalignment3316" id="r1c3-t16">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t16">Default</th>
<th class="cellalignment3316" id="r1c5-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t16" headers="r1c1-t16">
<p><code>pAjaxIdentifier</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t16 r1c2-t16">
<p>(String)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t16 r1c3-t16">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t16 r1c4-t16">&nbsp;</td>
<td class="cellalignment3317" headers="r2c1-t16 r1c5-t16">
<p>Use the value returned by the PL/SQL package <code>apex_plugin.get_ajax_identifier</code> to identify your plug-in.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t16" headers="r1c1-t16">
<p><code>pData</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t16 r1c2-t16">
<p>{Object}</p>
</td>
<td class="cellalignment3317" headers="r3c1-t16 r1c3-t16">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r3c1-t16 r1c4-t16">&nbsp;</td>
<td class="cellalignment3317" headers="r3c1-t16 r1c5-t16">
<p>Object which can optionally be used to send additional values to be sent with the AJAX request. The special attribute <code>pageItems</code> which can be of type jQuery selector, jQuery or DOM object or array of item names identifies the page items which are included in the URL. You can also set additional parameters that the <code>wwv_flow.show</code> procedure provides (for example you can set the scalar parameters x01 - x10 and the arrays f01 - f20).</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t16" headers="r1c1-t16">
<p><code>pOptions</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t16 r1c2-t16">
<p>{Object}</p>
</td>
<td class="cellalignment3317" headers="r4c1-t16 r1c3-t16">
<p>Optional</p>
</td>
<td class="cellalignment3317" headers="r4c1-t16 r1c4-t16">&nbsp;</td>
<td class="cellalignment3317" headers="r4c1-t16 r1c5-t16">
<p>Object which can optionally be used to set additional options used by the AJAX.</p>
<p>It supports the following optional Application Express specific attributes: <code>refreshObject</code> - jQuery selector, jQuery- or DOM object which identifies the DOM element for which the apexbeforerefresh and apexafterrefresh events are fired.</p>
<p><code>refreshObjectData</code> - Specify data that is internally passed by the <code>apexbeforerefresh</code> and <code>apexafterrefresh</code> event triggering code, so that any handlers defined for these events can access this data. In Dynamic Actions defined on the <code>Before Refresh</code> or <code>After Refresh</code> events, this can be accessed from JavaScript via the <code>this.data</code> property. For custom jQuery event handlers, this can be accessed via the <code>pData</code> parameter of the event handler.</p>
<p><code>clear</code> - JavaScript function used to clear the DOM after the <code>apexbeforerefresh</code> event has fired and before the actual AJAX call is triggered.</p>
<p><code>loadingIndicator</code> - jQuery selector, jQuery- or DOM object which identifies the DOM element where the loading indicator should be displayed next to it. <code>loadingIndicator</code> can also be a function which gets the loading Indicator as jQuery object and has to return the jQuery reference to the created loading indicator. For example:</p>
<pre>function( pLoadingIndicator ) {
  return lLoadingIndicator.prependTo ( apex.jQuery(
&#34;td.shuttleControl&#34;, gShuttle ))
}
</pre>
<p><code>loadingIndicatorPosition</code> - 4 options to define the position of the loading indicator displayed. Only considered if the value passed to loadingIndicator is not a function.</p>
<p><code>before</code>: Displays before the DOM element(s) defined by loadingIndicator</p>
<p><code>after</code>: Displays after the DOM element(s) defined by loadingIndicator</p>
<p><code>prepend</code>: Displays inside at the beginning of the DOM element(s) defined by loadingIndicator</p>
<p><code>append</code>: Displays inside at the end of the DOM element(s) defined by loadingIndicator</p>
<p><span class="bold">See Also</span>: See jQuery documentation of <code>jQuery.ajax</code> for all other available attributes. The attribute dataType is defaulted to json.</p>
<p>See the jQuery documentation for more details on this object:</p>
<p><code><a href="http://docs.jquery.com/">http://docs.jquery.com/</a></code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29526"></a>Return Values</p>
<div id="AEAPI29527" class="tblformal">
<p class="titleintable"><a id="sthref968"></a><a id="sthref969"></a>Table 23-15 Return Value</p>
<table class="cellalignment3315" title="Return Value" summary="table of return values" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t17">Type</th>
<th class="cellalignment3316" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t17" headers="r1c1-t17">
<p>{Object}</p>
</td>
<td class="cellalignment3317" headers="r2c1-t17 r1c2-t17">
<p>Returns a jqXHR object.</p>
<p>See the jQuery documentation for more details on this object:</p>
<p><code><a href="http://docs.jquery.com/">http://docs.jquery.com/</a></code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29528"></a>Example</p>
<p>This call to <code>apex.server.process</code> calls an on-demand process called <code>MY_PROCESS</code> and sets the scalar value <code>x01</code> to <code>test</code> (which can be accessed from PL/SQL using <code>apex_application.g_x01</code>) and sets the page item&#39;s <code>P1_DEPTNO</code> and <code>P1_EMPNO</code> values in session state (using jQuery selector syntax). The success callback is stubbed out so that developers can add their own code that fires when the call successfully returns.</p>
<p>Note: The <code>pData</code> parameter to the success callback contains any response sent from the call.</p>
<pre>apex.server.process ( &#34;MY_PROCESS&#34;, {
  x01: &#34;test&#34;,
  pageItems: &#34;#P1_DEPTNO,#P1_EMPNO&#34;
  }, {
 success: function( pData ) { ... do something here ... }
  } );
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBDAACG"></a>
<div id="AEAPI29529" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex.storage namespace</h2>
<p>Use the <code>apex.storage</code> namespace to store storage related functions of Oracle Application Express.</p>
<p class="subhead2"><a id="AEAPI29530"></a>Topics:</p>
<ul>
<li>
<p><a href="#CDEHDGAG">apex.storage.getCookie(pName)</a></p>
</li>
<li>
<p><a href="#CDEJCFHA">apex.storage.setCookie(pName,pValue)</a></p>
</li>
</ul>
<div id="AEAPI29531" class="refsect2"><a id="CDEHDGAG"></a>
<h3 class="refsect2">apex.storage.getCookie(pName)</h3>
<p>Returns the value of cookie name (<code>pName</code>).</p>
<p class="subhead2"><a id="AEAPI29532"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI29533"></a>Parameters</p>
<pre>pName (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI29534" class="refsect2"><a id="CDEJCFHA"></a>
<h3 class="refsect2">apex.storage.setCookie(pName,pValue)</h3>
<p>Sets a cookie (<code>pName</code>) to a specified value (<code>pValue</code>).</p>
<p class="subhead2"><a id="AEAPI29535"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI29536"></a>Parameters</p>
<pre>pName (String)
pValue (String)
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBFIEJC"></a>
<div id="AEAPI29537" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">apex.widget namespace</h2>
<p>Use the <code>apex.widget</code> namespace to store all the general purpose widget related functions of Oracle Application Express.</p>
<p class="subhead2"><a id="AEAPI29538"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBBHCBH">apex.widget.initPageItem( pName, pOptions)</a></p>
</li>
</ul>
<div id="AEAPI416" class="refsect2"><a id="BGBBHCBH"></a>
<h3 class="refsect2"><a id="sthref970"></a>apex.widget.initPageItem( pName, pOptions)</h3>
<p>Given the Application Express page item name or the DOM node, different callbacks and properties can be registered for a page item. This is necessary to seamlessly integrate a plug-in item type with the built-in page item related client-side functionality of Application Express.</p>
<p>For more information about implementing plug-ins, see &#34;Implementing Plug-ins&#34; in <a class="olink HTMDB27001" href="../HTMDB/advnc_plugins.htm#HTMDB27001"><span class="italic">Oracle Application Express Application Builder User&#39;s Guide</span></a>:</p>
<p>For samples authored by Oracle, see the plug-in repository, on OTN:</p>
<p><code><a href="http://apex.oracle.com/plugins">http://apex.oracle.com/plugins</a></code></p>
<p class="subhead2"><a id="AEAPI29539"></a>Return Values</p>
<p>None.</p>
<p class="subhead2"><a id="AEAPI1982"></a>Parameters</p>
<p><a href="#BGBFIIHH">Table 23-16, &#34;Parameters for apex.widget.initPageItem( pName, pOptions )&#34;</a> describes the available parameters for this function.</p>
<div id="AEAPI29540" class="tblformal">
<p class="titleintable"><a id="sthref971"></a><a id="BGBFIIHH"></a>Table 23-16 Parameters for apex.widget.initPageItem( pName, pOptions )</p>
<table class="cellalignment3315" title="Parameters for apex.widget.initPageItem( pName, pOptions )" summary="parameter table" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t18">Name</th>
<th class="cellalignment3316" id="r1c2-t18">Type</th>
<th class="cellalignment3316" id="r1c3-t18">Optional/Required</th>
<th class="cellalignment3316" id="r1c4-t18">Default</th>
<th class="cellalignment3316" id="r1c5-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t18" headers="r1c1-t18">
<p><code>pName</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t18 r1c2-t18">
<p>(DOM Node|String)</p>
</td>
<td class="cellalignment3317" headers="r2c1-t18 r1c3-t18">
<p>Required</p>
</td>
<td class="cellalignment3317" headers="r2c1-t18 r1c4-t18">&nbsp;</td>
<td class="cellalignment3317" headers="r2c1-t18 r1c5-t18">
<p>Application Express page item name or DOM node.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t18" headers="r1c1-t18">
<p><code>pOptions</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t18 r1c2-t18">
<p>(Object)</p>
</td>
<td class="cellalignment3317" headers="r3c1-t18 r1c3-t18">
<p>Required (individual properties are optional)</p>
</td>
<td class="cellalignment3317" headers="r3c1-t18 r1c4-t18">&nbsp;</td>
<td class="cellalignment3317" headers="r3c1-t18 r1c5-t18">
<p>Supports many properties to specify callbacks and certain item-specific values. Specifying any of these properties will override the default behavior of Application Express for that particular property.</p>
<p>See <a href="#BGBDCDAF">Table 23-17, &#34;Properties for the pOptions parameter&#34;</a> for <code>pOption</code> property details.</p>
<p><code>pOptions</code> can contain one of the following properties:</p>
<ul>
<li>
<p><code>getValue()</code></p>
</li>
<li>
<p><code>setValue( pValue, pDisplayValue )</code></p>
</li>
<li>
<p><code>enable()</code></p>
</li>
<li>
<p><code>disable()</code></p>
</li>
<li>
<p><code>show()</code></p>
</li>
<li>
<p><code>hide()</code></p>
</li>
<li>
<p><code>addValue()</code></p>
</li>
<li>
<p><code>nullValue()</code></p>
</li>
<li>
<p><code>setFocusTo</code></p>
</li>
<li>
<p><code>setStyleTo</code></p>
</li>
<li>
<p><code>afterModify()</code></p>
</li>
<li>
<p><code>loadingIndicator( pLoadingIndicator$ )</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="AEAPI29541" class="tblformal">
<p class="titleintable"><a id="sthref972"></a><a id="BGBDCDAF"></a>Table 23-17 Properties for the pOptions parameter</p>
<table class="cellalignment3315" title="Properties for the pOptions parameter " summary="properties for pOptions parameter" dir="ltr">
<thead>
<tr class="cellalignment3309">
<th class="cellalignment3316" id="r1c1-t19">Name</th>
<th class="cellalignment3316" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r2c1-t19" headers="r1c1-t19">
<p><code>getValue()</code></p>
</td>
<td class="cellalignment3317" headers="r2c1-t19 r1c2-t19">
<p>Specify a function for getting the item&#39;s value, which overrides the default page item handling. Ensuring the item returns its value correctly means certain item related client-side functionality of Application Express still works, for example in Dynamic Actions to evaluate a When condition on the item, or when calling the JavaScript function $v to get the item&#39;s value.</p>
<p>See <a href="#BGBJBEDJ">&#34;apex.item( pNd ).getValue()&#34;</a>, for details on how to define this function.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check by calling <code>apex.item( pNd ).getValue();</code> to see if that returns the item value correctly.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r3c1-t19" headers="r1c1-t19">
<p><code>setValue( pValue, pDisplayValue )</code></p>
</td>
<td class="cellalignment3317" headers="r3c1-t19 r1c2-t19">
<p>Specify a function for setting the item&#39;s value, which overrides the default page item handling. Ensuring the item can set its value correctly means certain item related client-side functionality of Application Express still works, for example when using the Set Value action of a Dynamic Action to set the item&#39;s value, or when calling the JavaScript function $s to set the item&#39;s value.</p>
<p>Note: Even if this function is defined, the default handling always handles the logic associated with the <code>.afterModify()</code> function and the <code>pSuppressChangeEvent</code> parameter, so that is outside the scope of what a plug-in developer is concerned with.</p>
<p>See the <a href="#BGBBCDCH">&#34;apex.item( pNd ).setValue(pValue, pDisplayValue, pSuppressChangeEvent)&#34;</a>, for details on how to define this function.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check by calling <code>apex.item( pNd ).setValue( pValue );</code> to see if that sets the item value correctly.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r4c1-t19" headers="r1c1-t19">
<p><code>enable()</code></p>
</td>
<td class="cellalignment3317" headers="r4c1-t19 r1c2-t19">
<p>Specify a function for enabling the item, which overrides the default page item handling. This could be useful for example where the item consists of compound elements which also need enabling, or if the item is based on a widget that already has its own enable method that you want to reuse. Ensuring the item can enable correctly means certain item related client-side functionality of Application Express still works, for example when using the Enable action of a Dynamic Actions, to enable the item.</p>
<p>Note: Even if this function is defined, the default handling always handles the logic associated with the <code>.afterModify()</code> function, so that is outside the scope of what a plug-in developer is concerned with.</p>
<p>See the <a href="#BGBDAJHB">&#34;apex.item( pNd ).enable()&#34;</a>, for details on how to define this function.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check by calling <code>apex.item( pNd ).enable();</code> to see if that enables the item satisfactorily.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r5c1-t19" headers="r1c1-t19">
<p><code>disable()</code></p>
</td>
<td class="cellalignment3317" headers="r5c1-t19 r1c2-t19">
<p>Specify a function for disabling the item, which overrides the default page item handling. This could be useful for example where the item consists of compound elements which also need disabling, or if the item is based on a widget that already has its own disable method that you want to reuse. Ensuring the item can disable correctly means certain item related client-side functionality of Application Express still works, for example when using the Disable action of a Dynamic Action to disable the item.</p>
<p>Note: Even if this function is defined, the default handling always handles the logic associated with the <code>.afterModify()</code> function, so that is outside the scope of what a plug-in developer is concerned with.</p>
<p>See the <a href="#BGBJDEEB">&#34;apex.item( pNd ).disable()&#34;</a>, for details on how to define this function.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check by calling <code>apex.item( pNd ).disable();</code> to see if that disables the item satisfactorily.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r6c1-t19" headers="r1c1-t19">
<p><code>show()</code></p>
</td>
<td class="cellalignment3317" headers="r6c1-t19 r1c2-t19">
<p>Specify a function for showing the item, which overrides the default page item handling. This is useful for example where the item consists of compound elements which also need showing, or if the item is based on a widget that already has its own show method that you want to reuse. Ensuring the item can show correctly means certain item related client-side functionality of Application Express still works, for example when using the Show action of a Dynamic Action, to show the item.</p>
<p>See the <a href="#BGBIIHCF">&#34;apex.item( pNd ).show( pShowRow )&#34;</a>, for details on how to define this function.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check by calling <code>apex.item( pNd ).show();</code> to see if that shows the item satisfactorily.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r7c1-t19" headers="r1c1-t19">
<p><code>hide()</code></p>
</td>
<td class="cellalignment3317" headers="r7c1-t19 r1c2-t19">
<p>Specify a function for hiding the item, which overrides the default page item handling. This could be useful for example where the item consists of compound elements which also needs hiding, or if the item is based on a widget that already has its own hide method that you want to reuse. Ensuring the item can hide correctly means certain item related client-side functionality of Application Express still works, for example when using the Hide action of a Dynamic Action, to hide the item.</p>
<p>See the <a href="#BGBEAIGF">&#34;apex.item( pNd ).hide( pHideRow)&#34;</a>, for details on how this function should be defined.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check by calling <code>apex.item( pNd ).hide();</code> to see if that hides the item satisfactorily.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r8c1-t19" headers="r1c1-t19">
<p><code>addValue()</code></p>
</td>
<td class="cellalignment3317" headers="r8c1-t19 r1c2-t19">
<p>Specify a function for adding a value to the item, where the item supports multiple values. Currently there is no client-side functionality of Application Express dependent on this. There is also no default page item handling.</p>
<p>Note: Even if this function is defined, the default handling always handles the logic associated with the <code>.afterModify()</code> function, so that is outside the scope of what a plug-in developer is concerned with.</p>
<p>See the <a href="#BGBHDJHJ">&#34;apex.item( pNd ).addValue( pValue )&#34;</a>, for details on how this function should be defined.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r9c1-t19" headers="r1c1-t19">
<p><code>nullValue</code></p>
</td>
<td class="cellalignment3317" headers="r9c1-t19 r1c2-t19">
<p>Specify a value that to be used to determine if the item is null. This is used when the item supports definition of a List of Values, where a developer can define a Null Return Value for the item and where the default item handling needs to know this in order to assert if the item is null or empty. This can be done by following these steps:</p>
<ol>
<li>
<p>From the Render function in the plug-in definition, emit the value stored in <code>p_item.lov_null_value</code> as part of the item initialization JavaScript code that fires when the page loads. For example:</p>
<pre>/* Assumes that you have some JavaScript function called &#39;com_your_company_your_item&#39; that accepts 2 parameters, the first being the name of the item and the second being an object storing properties (say pOptions) required by the item&#39;s client side code. */
apex_javascript.add_onload_code (
    p_code =&gt; &#39;com_your_company_your_item(&#39;||
               apex_javascript.add_value(
                   apex_plugin_util.page_item_names_to_jquery(p_item.name)||&#39;, {&#39;||
                       apex_javascript.add_attribute(&#39;lovNullValue&#39;, p_item.lov_null_value, false, false)||
               &#39;});&#39; );
</pre></li>
<li>
<p>Then, in the implementation of <code>com_your_company_your_item( pName, pOptions )</code> you have the value defined for the specific item&#39;s Null Return Value in the <code>pOptions.lovNullValue</code> property. This can then be used in your call to <code>apex.widget.initPageItem</code>, to set the <code>nullValue</code> property.</p>
<p>Ensuring the <code>nullValue</code> property is set means certain item related client-side functionality of Application Express still works, for example, in Dynamic Actions to correctly evaluate an <code>is null</code> or <code>is not null</code> when condition on the item, or when calling the JavaScript function <code>apex.item( pNd ).isEmpty()</code> to determine if the item is null.</p>
<p>See the <a href="#BGBJAEJH">&#34;apex.item( pNd ).isEmpty()&#34;</a>, for further details of this API.</p>
</li>
</ol>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r10c1-t19" headers="r1c1-t19">
<p><code>setFocusTo</code></p>
</td>
<td class="cellalignment3317" headers="r10c1-t19 r1c2-t19">
<p>Specify the element to receive focus, when focus is set to the item using the <code>apex.item( pNd ).setFocus()</code> API. This can be defined as either a jQuery selector, jQuery or DOM object which identifies the DOM element, or a function that returns a jQuery object referencing the element. This can be useful when the item consists of compound elements, and you do not want focus to go to the element that has an ID matching the item name, which is the default behavior. For example, the native item type <code>Popup LOV</code> when the attribute <code>Input Field</code> is set to <code>Not enterable, Show Display Value and Store Return Value</code> renders a disabled input field as the main element with an ID matching the item name and a popup selection icon next to the input. In this case, because you do not want focus to go to the disabled input, use the <code>setFocusTo</code> item property and set that to the popup selection icon.</p>
<p>Ensuring the item sets focus correctly means certain item related client-side functionality of Application Express still works, for example when using the <code>Set Focus</code> action of a Dynamic Action to set focus to the item, when users follow the <code>Go to Error</code> link that displays in a validation error message to go straight to the associated item, or when the item is the first item on a page and the developer has the page level attribute <code>Cursor Focus</code> set to <code>First item on page</code>.</p>
<p>See the <a href="#BGBEIADD">&#34;apex.item( pNd ).setFocus()&#34;</a>, for further details of this API.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check this by adding the item as the first item on a page, where the page has the page attribute <code>Cursor Focus</code> set to <code>First item on page</code>, and then running the page. The item receives focus.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r11c1-t19" headers="r1c1-t19">
<p><code>setStyleTo</code></p>
</td>
<td class="cellalignment3317" headers="r11c1-t19 r1c2-t19">
<p>Specify the element to receive style, when style is set to the item using the <code>apex.item( pNd ).setStyle()</code> API. This can be defined as either a jQuery selector, jQuery- or DOM object which identifies the DOM element(s), or a function that returns a jQuery object referencing the element(s). This is useful when the item consists of compound elements, and you do not want style to be set to the element or just the element, that has an ID matching the item name which is the default behavior. Ensuring the item sets style correctly means certain item related client-side functionality of Application Express still works, for example when using the <code>Set Style</code> action of a Dynamic Action to add style to the item.</p>
<p>Note: Even if this property is defined, the default handling still always handles the logic associated with the <code>.afterModify()</code> function, so that is outside the scope of what a plug-in developer is concerned with.</p>
<p>See the <code>apex.item( pNd ).setStyle()</code> documentation, for further details of this API.</p>
<p>Note: You should first check if the default handling of Application Express works for the item, because in that case you do not need to specify this. You can check by calling <code>apex.item( pNd ).setStyle( pPropertyName, pPropertyValue );</code> to see if the item correctly sets the style.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r12c1-t19" headers="r1c1-t19">
<p><code>afterModify()</code></p>
</td>
<td class="cellalignment3317" headers="r12c1-t19 r1c2-t19">
<p>Specify a function that is called after an item is modified. This is useful, for example as some frameworks such as jQuery Mobile need to be notified if widgets are modified, for example their value has been set, or they have been disabled in order to keep both the native and enhanced controls in sync. This callback provides the hook to do so.</p>
</td>
</tr>
<tr class="cellalignment3309">
<td class="cellalignment3317" id="r13c1-t19" headers="r1c1-t19">
<p><code>loadingIndicator( pLoadingIndicator$ )</code></p>
</td>
<td class="cellalignment3317" headers="r13c1-t19 r1c2-t19">
<p>Specify a function that normalizes how the item&#39;s loading indicator is displayed during a partial page refresh of the item. This function must pass the <code>pLoadingIndicator$</code> parameter as the first parameter, which contains a jQuery object with a reference to the DOM element for the loading indicator. The function then adds this loading indicator to the appropriate DOM element on the page for the item, and also returns the jQuery object reference to the loading indicator, such that the framework has a reference to it, so it can remove it once the call is complete.</p>
<p>This is used, for example, if the item is a <code>Cascading LOV</code> and the Cascading LOV Parent Item changes, or when setting the item&#39;s value by using one of the server-side Dynamic Actions such as <code>Set Value - SQL Statement</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="AEAPI29542"></a>Examples</p>
<p>The following example shows a call to <code>apex.widget.initPageItem</code> with all the available callbacks and properties passed.</p>
<pre>apex.widget.initPageItem( &#34;P100_COMPANY_NAME&#34;, {
    getValue:   function() {
        var lValue;
        // code to determine lValue based on the item type.
        return lValue;
    },
    setValue:   function( pValue, pDisplayValue ) {
        // code that sets pValue and pDisplayValue (if required), for the item type
    },
    enable:     function() {
        // code that enables the item type
    },
    disable:    function() {
        // code that disables the item type
    },
    show:       function() {
        // code that shows the item type
    },
    hide:       function() {
        // code that hides the item type
    },
    addValue:   function( pValue ) {
        // code that adds pValue to the values already in the item type
    },
    nullValue:  &#34;&lt;null return value for the item&gt;&#34;,
    setFocusTo: $( &#34;&lt;some jQuery selector&gt;&#34; ),
    setStyleTo: $( &#34;&lt;some jQuery selector&gt;&#34; ),    
    afterModify:        function(){
        // code to always fire after the item has been modified (value set, enabled, etc.)
    },
    loadingIndicator:   function( pLoadingIndicator$ ){
        // code to add the loading indicator in the best place for the item
        return pLoadingIndicator$;
    }
});
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBIFCDG"></a>
<div id="AEAPI29543" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Miscellaneous Javascript APIs</h2>
<p>This section contains all the miscellaneous, non-namespace APIs of Oracle Application Express, including shortcuts to highly used functions.</p>
<p class="subhead2"><a id="AEAPI29544"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBHEBGA">$x(pNd)</a></p>
</li>
<li>
<p><a href="#BGBGDGIH">$v(pNd)</a></p>
</li>
<li>
<p><a href="#CHDEJEIG">$v2(pNd)</a></p>
</li>
<li>
<p><a href="#CHDFBJGD">$s(pNd, pValue, pDisplayValue, pSuppressChangeEvent)</a></p>
</li>
<li>
<p><a href="#CHDCBJFF">$u_Carray(pNd)</a></p>
</li>
<li>
<p><a href="#CHDEIGDJ">$u_Narray(pNd)</a></p>
</li>
<li>
<p><a href="#CHDGAIJJ">$nvl(pTest, pDefault)</a></p>
</li>
<li>
<p><a href="#CHDDBBDH">$x_Style(pNd, pStyle, pString)</a></p>
</li>
<li>
<p><a href="#CHDDAGFE">$x_Hide(pNd)</a></p>
</li>
<li>
<p><a href="#CHDIFFJI">$x_Show(pNd)</a></p>
</li>
<li>
<p><a href="#CHDCEEAG">$x_Toggle(pNd)</a></p>
</li>
<li>
<p><a href="#CHDDJGHC">$x_Remove(pNd)</a></p>
</li>
<li>
<p><a href="#CHDDEFJJ">$x_Value(pNd,pValue)</a></p>
</li>
<li>
<p><a href="#CHDEGGGI">$x_UpTill(pNd, pToTag)</a></p>
</li>
<li>
<p><a href="#CHDIBGDH">$x_ItemRow(pNd,pFunc)</a></p>
</li>
<li>
<p><a href="#CHDIIJHG">$x_HideItemRow(pNd)</a></p>
</li>
<li>
<p><a href="#CHDHAEDD">$x_ShowItemRow(pNd)</a></p>
</li>
<li>
<p><a href="#CHDJHIFH">$x_ToggleItemRow(pNd)</a></p>
</li>
<li>
<p><a href="#CHDGBGAE">$x_HideAllExcept(pNd,pNdArray)</a></p>
</li>
<li>
<p><a href="#CHDHHIBB">$x_HideSiblings(pNd)</a></p>
</li>
<li>
<p><a href="#CHDJGBHF">$x_ShowSiblings(pNd)</a></p>
</li>
<li>
<p><a href="#CHDFCHJJ">$x_Class(pNd,pClass)</a></p>
</li>
<li>
<p><a href="#CHDEAIIA">$x_SetSiblingsClass(pNd, pClass, pNdClass)</a></p>
</li>
<li>
<p><a href="#CHDEACGG">$x_ByClass(pClass, pNd, pTag)</a></p>
</li>
<li>
<p><a href="#CHDGBBDE">$x_ShowAllByClass(pNd, pClass, pTag)</a></p>
</li>
<li>
<p><a href="#CHDFJBGB">$x_ShowChildren(pNd)</a></p>
</li>
<li>
<p><a href="#CHDIBFDB">$x_HideChildren(pNd)</a></p>
</li>
<li>
<p><a href="#CHDDAHDJ">$x_disableItem(pNd, pTest)</a></p>
</li>
<li>
<p><a href="#CHDJDFEI">$f_get_emptys(pNd, pClassFail, pClass)</a></p>
</li>
<li>
<p><a href="#CHDGEBHH">$v_Array(pNd)</a></p>
</li>
<li>
<p><a href="#CHDIFFFF">$f_ReturnChecked(pNd)</a></p>
</li>
<li>
<p><a href="#CHDDFHDF">$d_ClearAndHide(pNd)</a></p>
</li>
<li>
<p><a href="#CHDFGIHJ">$f_SelectedOptions(pNd)</a></p>
</li>
<li>
<p><a href="#CHDFBJDF">$f_SelectValue(pNd)</a></p>
</li>
<li>
<p><a href="#CHDHIFGB">$u_ArrayToString(pArray, pDelim)</a></p>
</li>
<li>
<p><a href="#CHDDGDGB">$x_CheckImageSrc(pId,pSearch)</a></p>
</li>
<li>
<p><a href="#CHDJFDGE">$v_CheckValueAgainst(pThis, pValue)</a></p>
</li>
<li>
<p><a href="#CHDHIAJB">$f_Hide_On_Value_Item(pThis, pThat, pValue)</a></p>
</li>
<li>
<p><a href="#CHDFAFJJ">$f_Show_On_Value_Item(pThis, pThat, pValue)</a></p>
</li>
<li>
<p><a href="#CHDEIJED">$f_Hide_On_Value_Item_Row(pThis, pThat, pValue)</a></p>
</li>
<li>
<p><a href="#CHDBAEJH">$f_Show_On_Value_Item_Row(pThis, pThat, pValue)</a></p>
</li>
<li>
<p><a href="#CHDIGFEF">$f_DisableOnValue(pThis, pValue, pThat)</a></p>
</li>
<li>
<p><a href="#CHDIFGBG">$x_ClassByClass(pNd, pClass, pTag, pClass2)</a></p>
</li>
<li>
<p><a href="#CHDEGJFC">$f_ValuesToArray(pThis, pClass, pTag)</a></p>
</li>
<li>
<p><a href="#CHDBGBJJ">$x_FormItems(pNd, pType)</a></p>
</li>
<li>
<p><a href="#CHDFECEC">$f_CheckAll(pThis, pCheck, pArray)</a></p>
</li>
<li>
<p><a href="#CHDHDHEB">$f_CheckFirstColumn(pNd)</a></p>
</li>
<li>
<p><a href="#CHDEBJAB">$v_PopupReturn(pValue, pThat) [Deprecated]</a></p>
</li>
<li>
<p><a href="#CHDFBAEE">$x_ToggleWithImage(pThis,pNd)</a></p>
</li>
<li>
<p><a href="#CHDIDCCA">$x_SwitchImageSrc(pNd, pSearch, pReplace)</a></p>
</li>
<li>
<p><a href="#CHDCFHHB">$x_CheckImageSrc(pNd, pSearch)</a></p>
</li>
<li>
<p><a href="#CHDFHGDB">$u_SubString(pText,pMatch)</a></p>
</li>
<li>
<p><a href="#CHDBAIHH">html_RemoveAllChildren(pNd)</a></p>
</li>
<li>
<p><a href="#CHDBCAGD">$v_IsEmpty(pThis) [Deprecated]</a></p>
</li>
<li>
<p><a href="#CHDBBJJJ">html_SetSelectValue(pId,pValue)</a></p>
</li>
<li>
<p><a href="#CHDIFGFC">addLoadEvent(pFunction)</a></p>
</li>
<li>
<p><a href="#CHDFCGHE">$f_Swap(pThis,pThat)</a></p>
</li>
<li>
<p><a href="#CHDFEHFA">submitEnter(pNd,e) [Deprecated]</a></p>
</li>
<li>
<p><a href="#CHDCFCJI">$f_SetValueSequence(pArray,pMultiple)</a></p>
</li>
<li>
<p><a href="#CHDBAFAG">$dom_AddTag(pThis, pTag, pText)</a></p>
</li>
<li>
<p><a href="#CHDIEEGE">$tr_AddTD(pThis,pText)</a></p>
</li>
<li>
<p><a href="#CHDHEDDA">$dom_AddInput(pThis,pType,pId,pName,pValue)</a></p>
</li>
<li>
<p><a href="#CHDIEDBG">$dom_MakeParent(p_Node,p_Parent)</a></p>
</li>
<li>
<p><a href="#CHDEGCGF">$x_RowHighlight(pThis, pColor)</a></p>
</li>
<li>
<p><a href="#CHDFAFCC">$x_RowHighlightOff(pThis)</a></p>
</li>
<li>
<p><a href="#CHDHIIGD">$v_Upper(pNd)</a></p>
</li>
<li>
<p><a href="#CHDEBGJG">$d_Find(pThis,pString,pTags,pClass)</a></p>
</li>
<li>
<p><a href="#CHDJEJEF">setReturn(p_R,p_D) [Deprecated]</a></p>
</li>
<li>
<p><a href="#CHDGCEAD">$f_First_field(pNd)</a></p>
</li>
<li>
<p><a href="#CHDJJIBG">GetCookie (pName) [Deprecated]</a></p>
</li>
<li>
<p><a href="#CHDDGGBA">SetCookie (pName,pValue) [Deprecated]</a></p>
</li>
</ul>
<div id="AEAPI267" class="refsect2"><a id="BGBHEBGA"></a>
<h3 class="refsect2"><a id="sthref973"></a>$x(pNd)</h3>
<p>Given a DOM node or string ID (pNd), this function returns a DOM node if the element is on the page, or returns false if it is not.</p>
<p class="subhead2"><a id="AEAPI1983"></a>Return Value</p>
<pre>(DOM Node | false)
</pre>
<p class="subhead2"><a id="AEAPI1984"></a>Parameters</p>
<pre>pNd (DOM Node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI268" class="refsect2"><a id="BGBGDGIH"></a>
<h3 class="refsect2"><a id="sthref974"></a>$v(pNd)</h3>
<p>Given a DOM node or string ID (pNd), this function returns the value of an Application Express item in the same format as it would be posted.</p>
<p class="subhead2"><a id="AEAPI1985"></a>Parameters</p>
<pre>pNd (DOM Node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI417" class="refsect2"><a id="CHDEJEIG"></a>
<h3 class="refsect2"><a id="sthref975"></a>$v2(pNd)</h3>
<p>Given a DOM node or string ID (pNd), this function returns the value of an Application Express item as a string or an array. If the page item type can contain multiple values like a shuttle, checkboxes or a multi select list an array is returned, otherwise a string.</p>
<p class="subhead2"><a id="AEAPI1986"></a>Return Value</p>
<pre>(string|array)
</pre>
<p class="subhead2"><a id="AEAPI1987"></a>Parameters</p>
<pre>pNd (DOM Node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI269" class="refsect2"><a id="CHDFBJGD"></a>
<h3 class="refsect2"><a id="sthref976"></a>$s(pNd, pValue, pDisplayValue, pSuppressChangeEvent)</h3>
<p>Given a DOM node or string ID <code>(pNd)</code>, this function sets the Application Express item value taking into account the item type. The <code>pDisplayValue</code> is optional. If used for a page item of type &#34;Popup LOV&#34; where the attribute &#34;Input Field&#34; = &#34;Not Enterable, Show Display Value and Store Return Value&#34;, it sets the &#34;Input Field&#34;. The value of <code>pValue</code> is stored in the hidden return field. The <code>pSuppressChangeEvent</code> parameter is optional. Passing either <code>FALSE</code> or not passing this parameter value results in a change event firing for the item being set. Pass <code>TRUE</code> to prevent the change event from firing for the item being set.</p>
<p class="subhead2"><a id="AEAPI1988"></a>Parameters</p>
<pre>pNd (DOM Node | string ID)
pValue  (String | Array)
pDisplayValue(String)
pSuppressChangeEvent(Boolean)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI271" class="refsect2"><a id="CHDEIGDJ"></a>
<h3 class="refsect2"><a id="sthref977"></a>$u_Narray(pNd)</h3>
<p>Given a DOM node or string ID or an array (pNd), this function returns a single value, if an pNd is an array but only has one element the value of that element is returned otherwise the array is returned. Used for creating DOM based functionality that can accept a single or multiple DOM nodes.</p>
<p class="subhead2"><a id="AEAPI1991"></a>Return Value</p>
<pre>Array (DOM Node | string ID | Array)
</pre>
<p class="subhead2"><a id="AEAPI1992"></a>Parameters</p>
<pre>Array or first value
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI270" class="refsect2"><a id="CHDCBJFF"></a>
<h3 class="refsect2"><a id="sthref978"></a>$u_Carray(pNd)</h3>
<p>Given a DOM node or string ID or an array (pNd), this function returns an array. Used for creating DOM based functionality that can accept a single or multiple DOM nodes.</p>
<p class="subhead2"><a id="AEAPI1989"></a>Return Value</p>
<pre>pNd (DOM Node | string ID | Array)
</pre>
<p class="subhead2"><a id="AEAPI1990"></a>Parameters</p>
<pre>Array
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI272" class="refsect2"><a id="CHDGAIJJ"></a>
<h3 class="refsect2"><a id="sthref979"></a>$nvl(pTest, pDefault)</h3>
<p>If <code>pTest</code> is empty or false return <code>pDefault</code> otherwise return <code>pTest</code>.</p>
<p class="subhead2"><a id="AEAPI1993"></a>Return Value</p>
<pre>(string | Array)
</pre>
<p class="subhead2"><a id="AEAPI1994"></a>Parameters</p>
<pre>pTest  (String | Array)
pDefault (String | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI275" class="refsect2"><a id="CHDDBBDH"></a>
<h3 class="refsect2"><a id="sthref980"></a>$x_Style(pNd, pStyle, pString)</h3>
<p>Sets a specific style property (<code>pStyle</code>) to given value (<code>pString</code>) of a DOM node or DOM node Array (<code>pNd</code>).</p>
<p class="subhead2"><a id="AEAPI2004"></a>Return Value</p>
<pre>(DOM node | DOM Array)
</pre>
<p class="subhead2"><a id="AEAPI2005"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array )
pStyle (String)
pString (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI276" class="refsect2"><a id="CHDDAGFE"></a>
<h3 class="refsect2"><a id="sthref981"></a>$x_Hide(pNd)</h3>
<p>Hides a DOM node or array of DOM nodes (<code>pNd</code>). This also takes into consideration which type of Application Express item is being hidden.</p>
<p class="subhead2"><a id="AEAPI2006"></a>Return Value</p>
<pre>(DOM node | Array)
</pre>
<p class="subhead2"><a id="AEAPI2007"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array )
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI277" class="refsect2"><a id="CHDIFFJI"></a>
<h3 class="refsect2"><a id="sthref982"></a>$x_Show(pNd)</h3>
<p>Shows a DOM node or array of DOM nodes (<code>pNd</code>). This also takes into consideration which type of Application Express item is being hidden.</p>
<p class="subhead2"><a id="AEAPI2008"></a>Return Value</p>
<pre>(DOM node | Array)
</pre>
<p class="subhead2"><a id="AEAPI2009"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array )
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI278" class="refsect2"><a id="CHDCEEAG"></a>
<h3 class="refsect2"><a id="sthref983"></a>$x_Toggle(pNd)</h3>
<p>Toggles a DOM node or array of DOM nodes (pNd).</p>
<p class="subhead2"><a id="AEAPI2010"></a>Return Value</p>
<pre>(DOM node | Array)
</pre>
<p class="subhead2"><a id="AEAPI2011"></a>Parameters</p>
<pre>pNd (DOM node | string ID | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI279" class="refsect2"><a id="CHDDJGHC"></a>
<h3 class="refsect2"><a id="sthref984"></a>$x_Remove(pNd)</h3>
<p>Removes a DOM node or array of DOM nodes.</p>
<p class="subhead2"><a id="AEAPI2012"></a>Return Value</p>
<pre>(DOM Node | Array)
</pre>
<p class="subhead2"><a id="AEAPI2013"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI280" class="refsect2"><a id="CHDDEFJJ"></a>
<h3 class="refsect2"><a id="sthref985"></a>$x_Value(pNd,pValue)</h3>
<p>Sets the value (<code>pValue</code>) of a DOM node or array of DOM nodes (<code>pNd</code>).</p>
<p class="subhead2"><a id="AEAPI2014"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2015"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array)
pValue (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI281" class="refsect2"><a id="CHDEGGGI"></a>
<h3 class="refsect2"><a id="sthref986"></a>$x_UpTill(pNd, pToTag)</h3>
<p>Starting from a DOM node (<code>pNd</code>), this function cascades up the DOM tree until the tag of node name (<code>pToTag</code>) is found. If the optional <code>pToClass</code> is present, the ancestor node must have a node name that equals <code>pToTag</code> and the class must equal <code>pToClass</code>.</p>
<p class="subhead2"><a id="AEAPI2016"></a>Return Value</p>
<pre>(DOM Node | false)
</pre>
<p class="subhead2"><a id="AEAPI2017"></a>Parameters</p>
<pre>pNd  (DOM Node | string ID) 
String (pToTag) 
String (pToClass ) 
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI282" class="refsect2"><a id="CHDIBGDH"></a>
<h3 class="refsect2"><a id="sthref987"></a>$x_ItemRow(pNd,pFunc)</h3>
<p>Given DOM node or array of DOM nodes, this function (shows, hides, or toggles) the entire row that contains the DOM node or array of DOM nodes. This is most useful when using Page Items. This function only works in table layouts since it explicitly looks for a containing <code>tr</code> element.</p>
<p class="subhead2"><a id="AEAPI2018"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2019"></a>Parameters</p>
<pre>pNd (DOM Node | string ID | Dom node Array) 
pFunc [&#39;TOGGLE&#39;,&#39;SHOW&#39;,&#39;HIDE&#39;] (String )
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI283" class="refsect2"><a id="CHDIIJHG"></a>
<h3 class="refsect2"><a id="sthref988"></a>$x_HideItemRow(pNd)</h3>
<p>Given a page item name, this function hides the entire row that holds the item. In most cases, this is the item and its label. This function only works in table layouts since it explicitly looks for a containing <code>tr</code> element.</p>
<p class="subhead2"><a id="AEAPI2020"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2021"></a>Parameters</p>
<pre>pNd (DOM Node | string ID | DON node Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI284" class="refsect2"><a id="CHDHAEDD"></a>
<h3 class="refsect2"><a id="sthref989"></a>$x_ShowItemRow(pNd)</h3>
<p>Given a page item name, this function shows the entire row that holds the item. In most cases, this is the item and its label. This function only works in table layouts since it explicitly looks for a containing <code>tr</code> element.</p>
<p class="subhead2"><a id="AEAPI2022"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2023"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM note Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI285" class="refsect2"><a id="CHDJHIFH"></a>
<h3 class="refsect2"><a id="sthref990"></a>$x_ToggleItemRow(pNd)</h3>
<p>Given a page item name (pNd), this function toggles the entire row that holds the item. In most cases, this is the item and its label. This function only works in table layouts since it explicitly looks for a containing <code>tr</code> element.</p>
<p class="subhead2"><a id="AEAPI2024"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2025"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node ray)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI286" class="refsect2"><a id="CHDGBGAE"></a>
<h3 class="refsect2"><a id="sthref991"></a>$x_HideAllExcept(pNd,pNdArray)</h3>
<p>Hides all DOM nodes referenced in <code>pNdArray</code> and then shows the DOM node referenced by <code>pNd</code>. This is most useful when <code>pNd</code> is also a node in <code>pNdArray</code>.</p>
<p class="subhead2"><a id="AEAPI2026"></a>Return Value</p>
<pre>(DOM node | DOM Array)
</pre>
<p class="subhead2"><a id="AEAPI2027"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array) 
pNdArray (DOM node | String | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI287" class="refsect2"><a id="CHDHHIBB"></a>
<h3 class="refsect2"><a id="sthref992"></a>$x_HideSiblings(pNd)</h3>
<p>Hides all sibling nodes of given <code>pNd</code>.</p>
<p class="subhead2"><a id="AEAPI2028"></a>Return Value</p>
<pre>(DOM node)
</pre>
<p class="subhead2"><a id="AEAPI2029"></a>Parameters</p>
<pre>pNd (DOM node | string ID )
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI288" class="refsect2"><a id="CHDJGBHF"></a>
<h3 class="refsect2"><a id="sthref993"></a>$x_ShowSiblings(pNd)</h3>
<p>Shows all sibling DOM nodes of given DOM nodes (<code>pNd</code>).</p>
<p class="subhead2"><a id="AEAPI2030"></a>Return Value</p>
<pre>(DOM node)
</pre>
<p class="subhead2"><a id="AEAPI2031"></a>Parameters</p>
<pre>pNd (DOM node | string ID )
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI289" class="refsect2"><a id="CHDFCHJJ"></a>
<h3 class="refsect2"><a id="sthref994"></a>$x_Class(pNd,pClass)</h3>
<p>Sets a DOM node or array of DOM nodes to a single class name.</p>
<p class="subhead2"><a id="AEAPI2032"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2033"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array)
pClass (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI290" class="refsect2"><a id="CHDEAIIA"></a>
<h3 class="refsect2"><a id="sthref995"></a>$x_SetSiblingsClass(pNd, pClass, pNdClass)</h3>
<p>Sets the class (<code>pClass</code>) of all DOM node siblings of a node (<code>pNd</code>). If <code>pNdClass</code> is not null the class of <code>pNd</code> is set to <code>pNdClass</code>.</p>
<p class="subhead2"><a id="AEAPI2034"></a>Return Value</p>
<pre>(DOM node | false)
</pre>
<p class="subhead2"><a id="AEAPI2035"></a>Parameters</p>
<pre>pNd (DOM Nnde | string ID)
pClass (String)
pThisClass (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI291" class="refsect2"><a id="CHDEACGG"></a>
<h3 class="refsect2"><a id="sthref996"></a>$x_ByClass(pClass, pNd, pTag)</h3>
<p>Returns an array of DOM nodes by a given class name (<code>pClass</code>). If the <code>pNd</code> parameter is provided, then the returned elements are all children of that DOM node. Including the <code>pTag</code> parameter further narrows the list to just return nodes of that tag type.</p>
<p class="subhead2"><a id="AEAPI2036"></a>Return Value</p>
<pre>(Array)
</pre>
<p class="subhead2"><a id="AEAPI2037"></a>Parameters</p>
<pre>pClass (String)
pNd  (DOM node | string ID)
pTag (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI292" class="refsect2"><a id="CHDGBBDE"></a>
<h3 class="refsect2"><a id="sthref997"></a>$x_ShowAllByClass(pNd, pClass, pTag)</h3>
<p>Show all the DOM node children of a DOM node (<code>pNd</code>) that have a specific class (<code>pClass</code>) and tag (<code>pTag</code>).</p>
<p class="subhead2"><a id="AEAPI2038"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2039"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
pClass (String)
pTag (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI293" class="refsect2"><a id="CHDFJBGB"></a>
<h3 class="refsect2"><a id="sthref998"></a>$x_ShowChildren(pNd)</h3>
<p>Show all DOM node children of a DOM node (<code>pNd</code>).</p>
<p class="subhead2"><a id="AEAPI2040"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2041"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI294" class="refsect2"><a id="CHDIBFDB"></a>
<h3 class="refsect2"><a id="sthref999"></a>$x_HideChildren(pNd)</h3>
<p>Hide all DOM node children of a DOM node (<code>pNd</code>).</p>
<p class="subhead2"><a id="AEAPI2042"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2043"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI295" class="refsect2"><a id="CHDDAHDJ"></a>
<h3 class="refsect2"><a id="sthref1000"></a>$x_disableItem(pNd, pTest)</h3>
<p>Disables or enables an item or array of items based on (<code>pTest</code>).</p>
<p class="subhead2"><a id="AEAPI2044"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2045"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node array)
a (true | false)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI296" class="refsect2"><a id="CHDJDFEI"></a>
<h3 class="refsect2"><a id="sthref1001"></a>$f_get_emptys(pNd, pClassFail, pClass)</h3>
<p>Checks an item or an array of items to see if any are empty, set the class of all items that are empty to <code>pClassFail</code>, set the class of all items that are not empty to <code>pClass</code>.</p>
<p class="subhead2"><a id="AEAPI2046"></a>Return Value</p>
<pre>false, Array  Array of all items that are empty (false | Array)
</pre>
<p class="subhead2"><a id="AEAPI2047"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node Array)
Sting (pClassFail)
Sting (pClass)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI297" class="refsect2"><a id="CHDGEBHH"></a>
<h3 class="refsect2"><a id="sthref1002"></a>$v_Array(pNd)</h3>
<p>Returns an item value as an array. Useful for multiselects and checkboxes.</p>
<p class="subhead2"><a id="AEAPI2048"></a>Return Value</p>
<pre>(Array)
</pre>
<p class="subhead2"><a id="AEAPI2049"></a>Parameters</p>
<pre>pId (DOM Node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI298" class="refsect2"><a id="CHDIFFFF"></a>
<h3 class="refsect2"><a id="sthref1003"></a>$f_ReturnChecked(pNd)</h3>
<p>Returns an item value as an array. Useful for radio items and check boxes.</p>
<p class="subhead2"><a id="AEAPI2050"></a>Return Value</p>
<pre>(Array)
</pre>
<p class="subhead2"><a id="AEAPI2051"></a>Parameters</p>
<pre>pId (DOM node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI299" class="refsect2"><a id="CHDDFHDF"></a>
<h3 class="refsect2"><a id="sthref1004"></a>$d_ClearAndHide(pNd)</h3>
<p>Clears the content of an DOM node or array of DOM nodes and hides them.</p>
<p class="subhead2"><a id="AEAPI2052"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2053"></a>Parameters</p>
<pre>pNd (DOM node | string ID | DOM node array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI300" class="refsect2"><a id="CHDFGIHJ"></a>
<h3 class="refsect2"><a id="sthref1005"></a>$f_SelectedOptions(pNd)</h3>
<p>Returns the DOM nodes of the selected options of a select item (<code>pNd</code>).</p>
<p class="subhead2"><a id="AEAPI2054"></a>Return Value</p>
<pre>(DOM Array)
</pre>
<p class="subhead2"><a id="AEAPI2055"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI301" class="refsect2"><a id="CHDFBJDF"></a>
<h3 class="refsect2"><a id="sthref1006"></a>$f_SelectValue(pNd)</h3>
<p>Returns the values of the selected options of a select item (<code>pNd</code>).</p>
<p class="subhead2"><a id="AEAPI2056"></a>Return Value</p>
<pre>(DOM Array | String)
</pre>
<p class="subhead2"><a id="AEAPI2057"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI302" class="refsect2"><a id="CHDHIFGB"></a>
<h3 class="refsect2"><a id="sthref1007"></a>$u_ArrayToString(pArray, pDelim)</h3>
<p>Given an array (<code>pArray</code>) return a string with the values of the array delimited with a given delimiter character (<code>pDelim</code>).</p>
<p class="subhead2"><a id="AEAPI2058"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2059"></a>Parameters</p>
<pre>pArray (pArray)
pDelim (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI303" class="refsect2"><a id="CHDDGDGB"></a>
<h3 class="refsect2"><a id="sthref1008"></a>$x_CheckImageSrc(pId,pSearch)</h3>
<p>Checks an image (<code>pId</code>) <code>source</code> attribute for a substring (<code>pSearch</code>). The function returns true if a substring (<code>pSearch</code>) is found. It returns false if a substring (<code>pSearch</code>) is not found.</p>
<p class="subhead2"><a id="AEAPI2060"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2061"></a>Parameters</p>
<pre>pId (DOM Node | String)
pSearch (pSearch)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI304" class="refsect2"><a id="CHDJFDGE"></a>
<h3 class="refsect2"><a id="sthref1009"></a>$v_CheckValueAgainst(pThis, pValue)</h3>
<p>Checks an page item&#39;s (<code>pThis</code>) value against a set of values (<code>pValue</code>). This function returns true if any value matches.</p>
<p class="subhead2"><a id="AEAPI2062"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2063"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pValue (Number | String | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI305" class="refsect2"><a id="CHDHIAJB"></a>
<h3 class="refsect2"><a id="sthref1010"></a>$f_Hide_On_Value_Item(pThis, pThat, pValue)</h3>
<p>Checks page item&#39;s (<code>pThis</code>) value against a value (<code>pValue</code>). If it matches, a DOM node (<code>pThat</code>) is set to hidden. If it does not match, then the DOM node (<code>pThat</code>) is set to visible.</p>
<p class="subhead2"><a id="AEAPI2064"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2065"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pThat  (DOM node | string ID | DOM node Array )
pValue (Number | String | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI306" class="refsect2"><a id="CHDFAFJJ"></a>
<h3 class="refsect2"><a id="sthref1011"></a>$f_Show_On_Value_Item(pThis, pThat, pValue)</h3>
<p>Checks page item&#39;s (<code>pThis</code>) value against a value (<code>pValue</code>). If it matches, a DOM node (<code>pThat</code>) is set to visible. If it does not match, then the DOM node (<code>pThat</code>) is set to hidden.</p>
<p class="subhead2"><a id="AEAPI2066"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2067"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pThat  (DOM node | string ID | DOM node Array )
pValue (Number | String | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI307" class="refsect2"><a id="CHDEIJED"></a>
<h3 class="refsect2"><a id="sthref1012"></a>$f_Hide_On_Value_Item_Row(pThis, pThat, pValue)</h3>
<p>Checks the value (<code>pValue</code>) of an item (<code>pThis</code>). If it matches, this function hides the table row that holds (<code>pThat</code>). If it does not match, then the table row is shown.</p>
<p class="subhead2"><a id="AEAPI2068"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2069"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pThat  (DOM node | string ID | DOM node Array )
pValue (Number | String | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI308" class="refsect2"><a id="CHDBAEJH"></a>
<h3 class="refsect2"><a id="sthref1013"></a>$f_Show_On_Value_Item_Row(pThis, pThat, pValue)</h3>
<p>Checks the value (<code>pValue</code>) of an item (<code>pThis</code>). If it matches, this function shows the table row that holds (<code>pThat</code>). If it does not match, then the table row is hidden.</p>
<p class="subhead2"><a id="AEAPI2070"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2071"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pThat  (DOM node | string ID | DOM node Array )
pValue (Number | String | Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI309" class="refsect2"><a id="CHDIGFEF"></a>
<h3 class="refsect2"><a id="sthref1014"></a>$f_DisableOnValue(pThis, pValue, pThat)</h3>
<p>Checks the value (<code>pValue</code>) of an item (<code>pThis</code>). If it matches, this function disables the item or array of items (<code>pThat</code>). If it does not match, then the item is enabled.</p>
<p class="subhead2"><a id="AEAPI2072"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2073"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pValue (String)
pThat  (DOM node | string ID | DOM node Array )
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI310" class="refsect2"><a id="CHDIFGBG"></a>
<h3 class="refsect2"><a id="sthref1015"></a>$x_ClassByClass(pNd, pClass, pTag, pClass2)</h3>
<p>Sets a class attribute of an array of nodes that are selected by class.</p>
<p class="subhead2"><a id="AEAPI2074"></a>Return Value</p>
<pre>(DOM node | DOM node Array)
</pre>
<p class="subhead2"><a id="AEAPI2075"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
pClass (String)
pTag (String)
pClass2 (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI311" class="refsect2"><a id="CHDEGJFC"></a>
<h3 class="refsect2"><a id="sthref1016"></a>$f_ValuesToArray(pThis, pClass, pTag)</h3>
<p>Collects the values of form items contained within DOM node (<code>pThis</code>) of class attribute (<code>pClass</code>) and nodeName (<code>pTag</code>) and returns an array.</p>
<p class="subhead2"><a id="AEAPI2076"></a>Return Value</p>
<pre>No applicable.
</pre>
<p class="subhead2"><a id="AEAPI2077"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pCLass (String)
pTag (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI312" class="refsect2"><a id="CHDBGBJJ"></a>
<h3 class="refsect2"><a id="sthref1017"></a>$x_FormItems(pNd, pType)</h3>
<p>Returns all form input items contained in a DOM node (<code>pThis</code>) of a certain type (<code>pType</code>).</p>
<p class="subhead2"><a id="AEAPI2078"></a>Return Value</p>
<pre>DOM node Array
</pre>
<p class="subhead2"><a id="AEAPI2079"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
pType (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI313" class="refsect2"><a id="CHDFECEC"></a>
<h3 class="refsect2"><a id="sthref1018"></a>$f_CheckAll(pThis, pCheck, pArray)</h3>
<p>Check or uncheck (<code>pCheck</code>) all check boxes contained within a DOM node (<code>pThis</code>). If an array of checkboxes DOM nodes (<code>pArray</code>) is provided, use that array for affected check boxes.</p>
<p class="subhead2"><a id="AEAPI2080"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2081"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pCheck (true | fales)
pArray (DOM node array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI314" class="refsect2"><a id="CHDHDHEB"></a>
<h3 class="refsect2"><a id="sthref1019"></a>$f_CheckFirstColumn(pNd)</h3>
<p>This function sets all checkboxes located in the first column of a table based on the checked state of the calling check box (<code>pNd</code>), useful for tabular forms.</p>
<p class="subhead2"><a id="AEAPI2082"></a>Return Value</p>
<pre>DOM node Array
</pre>
<p class="subhead2"><a id="AEAPI2083"></a>Parameters</p>
<pre>pNd (DOM node | String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI315" class="refsect2"><a id="CHDEBJAB"></a>
<h3 class="refsect2"><a id="sthref1020"></a>$v_PopupReturn(pValue, pThat) [Deprecated]</h3>
<p>Sets the value of the item in the parent window (<code>pThat</code>), with (<code>pValue</code>) and then closes the popup window.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is deprecated. Instead, use:
<p><a href="#CDEIIHIF">apex.navigation.popup.close(pThat,pValue)</a></p>
<p>For existing applications, the old function is still available, because of the application including the &#39;Legacy JavaScript&#39; file (legacy.js). For details on how to control the inclusion of this file, see &#34;About Database Applications&#34; in <a class="olink HTMDB04004" href="../HTMDB/bldr_attr.htm#HTMDB04004"><span class="italic">Oracle Application Express Application Builder User&#39;s Guide</span></a>.</p>
</div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<p class="subhead2"><a id="AEAPI2084"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2085"></a>Parameters</p>
<pre>pValue (string)
pThat (DOM node | string ID)
</pre>
<div id="AEAPI316" class="refsect2"><a id="CHDFBAEE"></a>
<h3 class="refsect2"><a id="sthref1021"></a>$x_ToggleWithImage(pThis,pNd)</h3>
<p>Given an image element (<code>pThis</code>) and a DOM node (<code>pNd</code>), this function toggles the display of the DOM node (<code>pNd</code>). The src attribute of the image element (<code>pThis</code>) is rewritten. The image src has any plus substrings replaced with minus substrings or minus substrings are replaced with plus substrings.</p>
<p class="subhead2"><a id="AEAPI2086"></a>Return Value</p>
<pre>(DOM Node)
</pre>
<p class="subhead2"><a id="AEAPI2087"></a>Parameters</p>
<pre>pThis (DOM Node | string ID)
pNd (DOM Nnde | string iD | DOM node Array)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI317" class="refsect2"><a id="CHDIDCCA"></a>
<h3 class="refsect2"><a id="sthref1022"></a>$x_SwitchImageSrc(pNd, pSearch, pReplace)</h3>
<p>Checks an image (<code>pId</code>) src attribute for a substring (<code>pSearch</code>). If a substring is found, this function replaces the image entire src attribute with (<code>pReplace</code>).</p>
<p class="subhead2"><a id="AEAPI2088"></a>Return Value</p>
<pre>(DOM node | false)
</pre>
<p class="subhead2"><a id="AEAPI2089"></a>Parameters</p>
<pre>pNd (DOM node | string ID)
pSearch (String)
pReplace (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI318" class="refsect2"><a id="CHDCFHHB"></a>
<h3 class="refsect2"><a id="sthref1023"></a>$x_CheckImageSrc(pNd, pSearch)</h3>
<p>Checks an image (<code>pNd</code>) source attribute for a substring (<code>pSearch</code>). The function returns true if a substring (<code>pSearch</code>) is found. It returns false if a substring (<code>pSearch</code>) is not found.</p>
<p class="subhead2"><a id="AEAPI2090"></a>Return Value</p>
<pre>(true | fales)
</pre>
<p class="subhead2"><a id="AEAPI2091"></a>Parameters</p>
<pre>pNd  (DOM node | string ID)
pSearch (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI319" class="refsect2"><a id="CHDFHGDB"></a>
<h3 class="refsect2"><a id="sthref1024"></a>$u_SubString(pText,pMatch)</h3>
<p>Returns a true or false if a string (<code>pText</code>) contains a substring (<code>pMatch</code>).</p>
<p class="subhead2"><a id="AEAPI2092"></a>Return Value</p>
<pre>(true | false)
</pre>
<p class="subhead2"><a id="AEAPI2093"></a>Parameters</p>
<pre>pText (String) 
pMatch (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI320" class="refsect2"><a id="CHDBAIHH"></a>
<h3 class="refsect2"><a id="sthref1025"></a>html_RemoveAllChildren(pNd)</h3>
<p>Use DOM methods to remove all DOM children of DOM node (<code>pND</code>).</p>
<p class="subhead2"><a id="AEAPI2094"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2095"></a>Parameters</p>
<pre>pNd (DOM node | string ID) 
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI321" class="refsect2"><a id="CHDBCAGD"></a>
<h3 class="refsect2"><a id="sthref1026"></a>$v_IsEmpty(pThis) [Deprecated]</h3>
<p>Returns true or false if a form element is empty, this considers any whitespace including a space, a tab, a form-feed, as empty. This also considers any null value that has been specified on the item.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is deprecated. Instead, use:
<p><a href="#BGBJAEJH">apex.item( pNd ).isEmpty()</a></p>
<p>For existing applications, the old function is still available, because of the application including the &#39;Legacy JavaScript&#39; file (legacy.js). For details on how to control the inclusion of this file, see &#34;About Database Applications&#34; in <a class="olink HTMDB04004" href="../HTMDB/bldr_attr.htm#HTMDB04004"><span class="italic">Oracle Application Express Application Builder User&#39;s Guide</span></a>.</p>
</div>
</div>
<!-- class="refsect2" -->
<p class="subhead2"><a id="AEAPI2096"></a>Return Value</p>
<pre>[true | false]
</pre>
<p class="subhead2"><a id="AEAPI2097"></a>Parameters</p>
<pre>pThis (DOM Node | String)
</pre>
<div id="AEAPI322" class="refsect2"><a id="CHDBBJJJ"></a>
<h3 class="refsect2"><a id="sthref1027"></a>html_SetSelectValue(pId,pValue)</h3>
<p>Sets the value (<code>pValue</code>) of a select item (<code>pId</code>). If the value is not found, this functions selects the first option (usually the <code>NULL</code> selection).</p>
<p class="subhead2"><a id="AEAPI2098"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2099"></a>Parameters</p>
<pre>pId (DOM node | String)
pValue (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI323" class="refsect2"><a id="CHDIFGFC"></a>
<h3 class="refsect2"><a id="sthref1028"></a>addLoadEvent(pFunction)</h3>
<p>Adds an onload function (<code>func</code>) without overwriting any previously specified onload functions.</p>
<p class="subhead2"><a id="AEAPI2100"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2101"></a>Parameters</p>
<pre>pFunction (Javascript Function)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI324" class="refsect2"><a id="CHDFCGHE"></a>
<h3 class="refsect2"><a id="sthref1029"></a>$f_Swap(pThis,pThat)</h3>
<p>Swaps the form values of two form elements (<code>pThis</code>,<code>pThat</code>).</p>
<p class="subhead2"><a id="AEAPI2102"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2103"></a>Parameters</p>
<pre>pThis (DOM Node | String)
pThat (DOM Node | String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI325" class="refsect2"><a id="CHDFEHFA"></a>
<h3 class="refsect2"><a id="sthref1030"></a>submitEnter(pNd,e) [Deprecated]</h3>
<p>Submits a page when ENTER is pressed in a text field, setting the request value to the ID of a DOM node (<code>pNd</code>).</p>
<p>Usage is <code>onkeypress=&#34;submitEnter(this,event)&#34;</code></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is deprecated. Instead, use:
<p><code>apex.submit( { submitIfEnter : event })</code></p>
<p>See <code>apex.submit</code> for further details on how to use the &#39;<code>submitIfEnter</code>&#39; <code>pOptions</code> property.For existing applications, the old function is still available, because of the application including the &#39;Legacy JavaScript&#39; file (legacy.js). For details on how to control the inclusion of this file, see &#34;About Database Applications&#34; in <a class="olink HTMDB04004" href="../HTMDB/bldr_attr.htm#HTMDB04004"><span class="italic">Oracle Application Express Application Builder User&#39;s Guide</span></a>.</p>
</div>
</div>
<!-- class="refsect2" -->
<p class="subhead2"><a id="AEAPI2104"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2105"></a>Parameters</p>
<pre>pNd (DOM node | String | Array)
</pre>
<div id="AEAPI326" class="refsect2"><a id="CHDCFCJI"></a>
<h3 class="refsect2"><a id="sthref1031"></a>$f_SetValueSequence(pArray,pMultiple)</h3>
<p>Sets array of form item (<code>pArray</code>) to sequential number in multiples of (<code>pMultiple</code>).</p>
<p class="subhead2"><a id="AEAPI2106"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2107"></a>Parameters</p>
<pre>pArray (Array) 
pMultiple (Number)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI327" class="refsect2"><a id="CHDBAFAG"></a>
<h3 class="refsect2"><a id="sthref1032"></a>$dom_AddTag(pThis, pTag, pText)</h3>
<p>Inserts the html element (<code>pTag</code>) as a child node of a DOM node (<code>pThis</code>) with the innerHTML set to (<code>pText</code>).</p>
<p class="subhead2"><a id="AEAPI2108"></a>Return Value</p>
<pre>DOM node
</pre>
<p class="subhead2"><a id="AEAPI2109"></a>Parameters</p>
<pre>pThis (DOM node | string ID ) 
pTag (String)
pText (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI328" class="refsect2"><a id="CHDIEEGE"></a>
<h3 class="refsect2"><a id="sthref1033"></a>$tr_AddTD(pThis,pText)</h3>
<p>Appends a table cell to a table row (<code>pThis</code>). And sets the content to (<code>pText</code>).</p>
<p class="subhead2"><a id="AEAPI2110"></a>Return Value</p>
<pre>(DOM node)
</pre>
<p class="subhead2"><a id="AEAPI2111"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pText (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI329" class="refsect2"><a id="CHDGIBHG"></a>
<h3 class="refsect2"><a id="sthref1034"></a>$tr_AddTH(pThis,pText)</h3>
<p>Appends a table cell to a table row (<code>pThis</code>). And sets the content to (<code>pText</code>).</p>
<p class="subhead2"><a id="AEAPI2112"></a>Return Value</p>
<pre>DOM node
</pre>
<p class="subhead2"><a id="AEAPI2113"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pTest (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI330" class="refsect2"><a id="CHDHEDDA"></a>
<h3 class="refsect2"><a id="sthref1035"></a>$dom_AddInput(pThis,pType,pId,pName,pValue)</h3>
<p>Inserts the html form input element (<code>pType</code>) as a child node of a DOM node (<code>pThis</code>) with an id (<code>pId</code>) and name (<code>pName</code>) value set to <code>pValue</code>.</p>
<p class="subhead2"><a id="AEAPI2114"></a>Return Value</p>
<pre>(DOM node)
</pre>
<p class="subhead2"><a id="AEAPI2115"></a>Parameters</p>
<pre>pThis (DOM node | string ID)
pType (String)
pId (String)
pName (String)
pValue (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI331" class="refsect2"><a id="CHDIEDBG"></a>
<h3 class="refsect2"><a id="sthref1036"></a>$dom_MakeParent(p_Node,p_Parent)</h3>
<p>Takes a DOM node (<code>p_Node</code>) and makes it a child of DOM node (<code>p_Parent</code>) and then returns the DOM node (pNode).</p>
<p class="subhead2"><a id="AEAPI2116"></a>Return Value</p>
<pre>(DOM node)
</pre>
<p class="subhead2"><a id="AEAPI2117"></a>Parameters</p>
<pre>p_This (DOM node | string ID)
p_Parent (DOM node | string ID)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI332" class="refsect2"><a id="CHDEGCGF"></a>
<h3 class="refsect2"><a id="sthref1037"></a>$x_RowHighlight(pThis, pColor)</h3>
<p>Give an table row DOM element (<code>pThis</code>), this function sets the background of all table cells to a color (<code>pColor</code>). A global variable <code>gCurrentRow</code> is set to <code>pThis</code>.</p>
<p class="subhead2"><a id="AEAPI2118"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2119"></a>Parameters</p>
<pre>pThis (DOM node | String)
pColor(String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI333" class="refsect2"><a id="CHDFAFCC"></a>
<h3 class="refsect2"><a id="sthref1038"></a>$x_RowHighlightOff(pThis)</h3>
<p>Give an table row Dom node (<code>pThis</code>), this function sets the background of all table cells to <code>NULL</code>.</p>
<p class="subhead2"><a id="AEAPI2120"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2121"></a>Parameters</p>
<pre>pThis (DOM Element | String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI334" class="refsect2"><a id="CHDHIIGD"></a>
<h3 class="refsect2"><a id="sthref1039"></a>$v_Upper(pNd)</h3>
<p>Sets the value of a form item (pNd) to uppercase.</p>
<p class="subhead2"><a id="AEAPI2122"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2123"></a>Parameters</p>
<pre>pNd (DOM Node | String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI335" class="refsect2"><a id="CHDEBGJG"></a>
<h3 class="refsect2"><a id="sthref1040"></a>$d_Find(pThis,pString,pTags,pClass)</h3>
<p>Hides child nodes of a Dom node (<code>pThis</code>) where the child node&#39;s inner HTML matches any instance of <code>pString</code>. To narrow the child nodes searched by specifying a tag name (<code>pTag</code>) or a class name (<code>pClass</code>). Note that the child node is set to a block level element when set to visible.</p>
<p class="subhead2"><a id="AEAPI2124"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2125"></a>Parameters</p>
<pre>pThis (DOM node | String)
pString (String)
pTags (String 
pClass (String)
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI337" class="refsect2"><a id="CHDJEJEF"></a>
<h3 class="refsect2"><a id="sthref1041"></a>setReturn(p_R,p_D) [Deprecated]</h3>
<p>Sets DOM items in the global variables <code>returnInput</code> (<code>p_R</code>) and <code>returnDisplay</code> (<code>p_D</code>) for use in populating items from popups.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is deprecated and due to very limited value there is no alternative.
<p>For existing applications, the old function is still available, because of the application including the &#39;Legacy JavaScript&#39; file (legacy.js). For details on how to control the inclusion of this file, see &#34;About Database Applications&#34; in <a class="olink HTMDB04004" href="../HTMDB/bldr_attr.htm#HTMDB04004"><span class="italic">Oracle Application Express Application Builder User&#39;s Guide</span></a>.</p>
</div>
</div>
<!-- class="refsect2" -->
<p class="subhead2"><a id="AEAPI2128"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2129"></a>Parameters</p>
<pre>p_R
p_D
</pre>
<div id="AEAPI338" class="refsect2"><a id="CHDGCEAD"></a>
<h3 class="refsect2"><a id="sthref1042"></a>$f_First_field(pNd)</h3>
<p>Places the user focus on a form item (pNd). If pNd is not found then this function places focus on the first found user editable field.</p>
<p class="subhead2"><a id="AEAPI2130"></a>Return Value</p>
<pre>true (if successful)
</pre>
<p class="subhead2"><a id="AEAPI2131"></a>Parameters</p>
<pre>pNd
</pre></div>
<!-- class="refsect2" -->
<div id="AEAPI339" class="refsect2"><a id="CHDJJIBG"></a>
<h3 class="refsect2"><a id="sthref1043"></a>GetCookie (pName) [Deprecated]</h3>
<p>Returns the value of cookie name (<code>pName</code>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is deprecated. Instead, use:
<p><a href="#CDEHDGAG">apex.storage.getCookie(pName)</a></p>
<p>For existing applications, the old function is still available, because of the application including the &#39;Legacy JavaScript&#39; file (legacy.js). For details on how to control the inclusion of this file, see &#34;About Database Applications&#34; in <a class="olink HTMDB04004" href="../HTMDB/bldr_attr.htm#HTMDB04004"><span class="italic">Oracle Application Express Application Builder User&#39;s Guide</span></a>.</p>
</div>
</div>
<!-- class="refsect2" -->
<p class="subhead2"><a id="AEAPI2132"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2133"></a>Parameters</p>
<pre>pName (String)
</pre>
<div id="AEAPI340" class="refsect2"><a id="CHDDGGBA"></a>
<h3 class="refsect2"><a id="sthref1044"></a>SetCookie (pName,pValue) [Deprecated]</h3>
<p>Sets a cookie (<code>pName</code>) to a specified value (<code>pValue</code>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is deprecated. Instead, use:
<p><a href="#CDEJCFHA">apex.storage.setCookie(pName,pValue)</a></p>
<p>For existing applications, the old function is still available, because of the application including the &#39;Legacy JavaScript&#39; file (legacy.js). For details on how to control the inclusion of this file, see &#34;About Database Applications&#34; in <a class="olink HTMDB04004" href="../HTMDB/bldr_attr.htm#HTMDB04004"><span class="italic">Oracle Application Express Application Builder User&#39;s Guide</span></a>.</p>
</div>
</div>
<!-- class="refsect2" -->
<p class="subhead2"><a id="AEAPI2134"></a>Return Value</p>
<pre>Not applicable.
</pre>
<p class="subhead2"><a id="AEAPI2135"></a>Parameters</p>
<pre>pName (String)
pValue (String)
</pre></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3308">
<tr>
<td class="cellalignment3317">
<table class="cellalignment3313">
<tr>
<td class="cellalignment3312"><a href="apex_web_service.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3312"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3319">
<table class="cellalignment3311">
<tr>
<td class="cellalignment3312"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3312"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3312"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3312"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3312"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3312"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>