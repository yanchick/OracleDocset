<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-77859"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Error%20Handling%20and%20Diagnostics"></a><title>Error Handling and Diagnostics</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T20:23:18Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Pro*COBOL&reg; Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53282-01"/>
<meta name="dcterms.isVersionOf" content="LNPCB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="pco07tab.htm" title="Previous" type="text/html"/>
<link rel="Next" href="pco09dyn.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53282-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/27</span> <!-- End Header -->
<div id="LNPCB008" class="chapter"><a id="i5309"></a>
<h1 class="chapter"><span class="secnum">8</span> Error Handling and Diagnostics</h1>
<p>An application program must anticipate runtime errors and attempt to recover from them. This chapter provides an in-depth discussion of error reporting and recovery. You learn how to handle warnings and errors using the ANSI status variables SQLCODE and SQLSTATE, or the Oracle SQLCA (SQL Communications Area) structure. You also learn how to use the WHENEVER statement and how to diagnose problems using the Oracle ORACA (Oracle Communications Area) structure.</p>
<p>The following topics are discussed:</p>
<ul>
<li>
<p><a href="#i8658">Why Error Handling is Needed</a></p>
</li>
<li>
<p><a href="#i8677">Error Handling Alternatives</a></p>
</li>
<li>
<p><a href="#i16095">Using the SQL Communications Area</a></p>
</li>
<li>
<p><a href="#i14161">Using the Oracle Communications Area</a></p>
</li>
<li>
<p><a href="#i16901">How Errors Map to SQLSTATE Codes</a></p>
</li>
</ul>
<a id="i8658"></a>
<div id="LNPCB493" class="sect1">
<h2 class="sect1">Why Error Handling is Needed</h2>
<p>A significant part of every application program must be devoted to error handling. The main benefit of error handling is that it enables your program to continue operating in the presence of errors. Errors arise from design faults, coding mistakes, hardware failures, invalid user input, and many other sources<a id="sthref1010"></a></p>
<p>You cannot anticipate all possible errors, but you can plan to handle certain kinds of errors meaningful to your program. For Pro*COBOL, error handling means detecting and recovering from SQL statement execution errors. You must trap errors because the precompiler will continue regardless of the errors encountered unless you halt processing.</p>
<p>You can also prepare to handle warnings such as &#34;value truncated&#34; and status changes such as &#34;end of data.&#34; It is especially important to check for error and warning conditions after every data manipulation statement because an INSERT, UPDATE, or DELETE statement might fail before processing all eligible rows in a table.</p>
</div>
<!-- class="sect1" -->
<a id="i8677"></a>
<div id="LNPCB494" class="sect1">
<h2 class="sect1">Error Handling Alternatives<a id="sthref1011"></a></h2>
<p>Pro*COBOL supports two general methods of error handling:</p>
<ul>
<li>
<p>The Oracle-specific method with SQLCA and optional ORACA.</p>
</li>
<li>
<p>The SQL standard method with SQLSTATE status variable.</p>
</li>
</ul>
<p>The precompiler MODE option governs compliance with the SQL standard. When MODE={ANSI | ANSI14}, you declare the SQLSTATE status variable as PIC X(5). Additionally, the ANSI SQL-89 SQLCODE status variable is still supported, but it is not recommended for new programs because it has been removed from the SQL standard. When MODE={ORACLE | ANSI13}, you <span class="italic">must</span> include the SQLCA through an EXEC SQL INCLUDE statement. It is possible to use both methods in one program but usually not necessary.</p>
<p>For detailed information on mixing methods see <a href="#i17446">&#34;Status Variable Combinations&#34;</a>.</p>
<a id="i8370"></a>
<div id="LNPCB495" class="sect2">
<h3 class="sect2"><a id="sthref1012"></a>SQLCA</h3>
<p>The SQLCA is a record-like, host-language data structure which includes Oracle warnings, error numbers and error text. Oracle updates the SQLCA after every <span class="italic">executable</span> SQL or PL/SQL statement. (SQLCA values are undefined after a declarative statement.) By checking return codes stored in the SQLCA, your program can determine the outcome of a SQL statement. This can be done in two ways:<a id="sthref1013"></a><a id="sthref1014"></a></p>
<ul>
<li>
<p>Implicit checking with the WHENEVER statement</p>
</li>
<li>
<p>Explicit checking of SQLCA variables</p>
</li>
</ul>
<p>When you use the WHENEVER statement to implicitly check the status of your SQL statements, Pro*COBOL automatically inserts error checking code after each executable statement. Alternatively, you can explicitly write your own code to test the value of the SQLCODE member of the SQLCA structure. Include SQLCA by using the embedded SQL INCLUDE statement:</p>
<pre>EXEC SQL INCLUDE SQLCA END-EXEC.
</pre></div>
<!-- class="sect2" -->
<div id="LNPCB496" class="sect2"><a id="sthref1015"></a>
<h3 class="sect2"><a id="sthref1016"></a>ORACA</h3>
<p>When more information is needed about runtime errors than the SQLCA provides, you can use the ORACA, which contains cursor statistics, SQL statement text, certain option settings and system statistics. <a id="sthref1017"></a>Include ORACA by using the embedded SQL INCLUDE statement:</p>
<pre>EXEC SQL INCLUDE ORACA END-EXEC.
</pre>
<p>The ORACA is optional and can be declared regardless of the MODE setting. For more information about the ORACA status variable, see <a href="#i14161">&#34;Using the Oracle Communications Area&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i8662"></a>
<div id="LNPCB497" class="sect2">
<h3 class="sect2">ANSI SQLSTATE Variable</h3>
<p>When MODE=ANSI, you can declare the ANSI SQLSTATE variable inside the Declare Section for implicit or explicit error checking. If the option DECLARE_SECTION is set to NO, then you can also declare it outside of the Declare Section.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When MODE=ANSI, you can also declare the SQLCODE variable with a picture S9(9) COMP. <a id="sthref1018"></a><a id="sthref1019"></a><a id="sthref1020"></a><a id="sthref1021"></a><a id="sthref1022"></a><a id="sthref1023"></a>While it can be used instead of or with the SQLSTATE variable, this is not recommended for new programs. You can also use the SQLCA with the SQLSTATE variable. When MODE=ANSI14, then SQLSTATE is not supported and you must declare either SQLCODE or include SQLCA. You cannot declare both SQLCODE and SQLCA for any setting of mode.</div>
</div>
<!-- class="sect2" -->
<div id="LNPCB498" class="sect2"><a id="sthref1024"></a>
<h3 class="sect2">Declaring SQLSTATE</h3>
<p><a id="i5251"></a>This section describes how to declare SQLSTATE. <a id="sthref1025"></a>SQLSTATE must be declared as a five-character alphanumeric string as in the following example:</p>
<pre>*    Declare the SQLSTATE status variable.
     EXEC SQL BEGIN DECLARE SECTION END-EXEC. 
       ... 
 01 SQLSTATE PIC X(5). 
       ... 
     EXEC SQL END DECLARE SECTION END-EXEC. 
</pre>
<div id="LNPCB499" class="sect3"><a id="sthref1026"></a>
<h4 class="sect3">SQLSTATE Values</h4>
<p>SQLSTATE status codes consist of a two-character <span class="italic">class code</span> followed by a three-character <span class="italic">subclass code</span>. Aside from class code 00 (successful completion), the class code denotes a category of exceptions. Aside from subclass code 000 (not applicable), the subclass code denotes a specific exception within that category. For example, the SQLSTATE value &#39;22012&#39; consists of class code 22 (data exception) and subclass code 012 (division by zero). <a id="sthref1027"></a><a id="sthref1028"></a><a id="sthref1029"></a></p>
<p>Each of the five characters in a SQLSTATE value is a digit (0..9) or an uppercase Latin letter (A..Z). Class codes that begin with a digit in the range 0..4 or a letter in the range A..H are reserved for predefined conditions (those defined in the SQL standard). All other class codes are reserved for implementation-defined conditions. Within predefined classes, subclass codes that begin with a digit in the range 0..4 or a letter in the range A..H are reserved for predefined sub-conditions. All other subclass codes are reserved for implementation-defined sub-conditions. <a href="#i15252">Figure 8-1</a> shows the coding scheme: <a id="sthref1030"></a></p>
<div id="LNPCB500" class="figure">
<p class="titleinfigure"><a id="i15252"></a>Figure 8-1 SQLSTATE Coding Scheme</p>
<img width="600" height="278" src="img/pco81055.gif" alt="SQLSTATE Coding Scheme"/><br/>
<a id="sthref1031" href="img_text/pco81055.htm">Description of &#34;Figure 8-1 SQLSTATE Coding Scheme&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#g29262">Table 8-1</a> shows the classes predefined by the SQL standard.<a id="sthref1032"></a></p>
<div id="LNPCB501" class="tblformal">
<p class="titleintable"><a id="sthref1033"></a><a id="g29262"></a>Table 8-1 Predefined Classes</p>
<table class="cellalignment4971" title="Predefined Classes " summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t3">Class</th>
<th class="cellalignment4972" id="r1c2-t3">Condition</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t3" headers="r1c1-t3">
<p>00</p>
</td>
<td class="cellalignment4973" headers="r2c1-t3 r1c2-t3">
<p>successful completion</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t3" headers="r1c1-t3">
<p>01</p>
</td>
<td class="cellalignment4973" headers="r3c1-t3 r1c2-t3">
<p>warning</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t3" headers="r1c1-t3">
<p>02</p>
</td>
<td class="cellalignment4973" headers="r4c1-t3 r1c2-t3">
<p>no data</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t3" headers="r1c1-t3">
<p>07</p>
</td>
<td class="cellalignment4973" headers="r5c1-t3 r1c2-t3">
<p>dynamic SQL error</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t3" headers="r1c1-t3">
<p>08</p>
</td>
<td class="cellalignment4973" headers="r6c1-t3 r1c2-t3">
<p>connection exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t3" headers="r1c1-t3">
<p>09</p>
</td>
<td class="cellalignment4973" headers="r7c1-t3 r1c2-t3">
<p>triggered action exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t3" headers="r1c1-t3">
<p>0A</p>
</td>
<td class="cellalignment4973" headers="r8c1-t3 r1c2-t3">
<p>feature not supported</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t3" headers="r1c1-t3">
<p>0A</p>
</td>
<td class="cellalignment4973" headers="r9c1-t3 r1c2-t3">
<p>feature not supported</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t3" headers="r1c1-t3">
<p>0D</p>
</td>
<td class="cellalignment4973" headers="r10c1-t3 r1c2-t3">
<p>invalid target type specification</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t3" headers="r1c1-t3">
<p>0E</p>
</td>
<td class="cellalignment4973" headers="r11c1-t3 r1c2-t3">
<p>invalid schema name list specification</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t3" headers="r1c1-t3">
<p>0F</p>
</td>
<td class="cellalignment4973" headers="r12c1-t3 r1c2-t3">
<p>locator exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t3" headers="r1c1-t3">
<p>0L</p>
</td>
<td class="cellalignment4973" headers="r13c1-t3 r1c2-t3">
<p>invalid grantor</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r14c1-t3" headers="r1c1-t3">
<p>0M</p>
</td>
<td class="cellalignment4973" headers="r14c1-t3 r1c2-t3">
<p>invalid SQL-invoked procedure reference</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r15c1-t3" headers="r1c1-t3">
<p>0P</p>
</td>
<td class="cellalignment4973" headers="r15c1-t3 r1c2-t3">
<p>invalid role specification</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r16c1-t3" headers="r1c1-t3">
<p>0S</p>
</td>
<td class="cellalignment4973" headers="r16c1-t3 r1c2-t3">
<p>invalid transform group name specification</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r17c1-t3" headers="r1c1-t3">
<p>0T</p>
</td>
<td class="cellalignment4973" headers="r17c1-t3 r1c2-t3">
<p>target table disagrees with cursor specification</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r18c1-t3" headers="r1c1-t3">
<p>0U</p>
</td>
<td class="cellalignment4973" headers="r18c1-t3 r1c2-t3">
<p>attempt to assign to non-updatable column</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r19c1-t3" headers="r1c1-t3">
<p>0V</p>
</td>
<td class="cellalignment4973" headers="r19c1-t3 r1c2-t3">
<p>attempt to assign to ordering column</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r20c1-t3" headers="r1c1-t3">
<p>0W</p>
</td>
<td class="cellalignment4973" headers="r20c1-t3 r1c2-t3">
<p>prohibited statement encountered during trigger execution</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r21c1-t3" headers="r1c1-t3">
<p>0Z</p>
</td>
<td class="cellalignment4973" headers="r21c1-t3 r1c2-t3">
<p>diagnostics exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r22c1-t3" headers="r1c1-t3">
<p>21</p>
</td>
<td class="cellalignment4973" headers="r22c1-t3 r1c2-t3">
<p>cardinality violation</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r23c1-t3" headers="r1c1-t3">
<p>22</p>
</td>
<td class="cellalignment4973" headers="r23c1-t3 r1c2-t3">
<p>data exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r24c1-t3" headers="r1c1-t3">
<p>23</p>
</td>
<td class="cellalignment4973" headers="r24c1-t3 r1c2-t3">
<p>integrity constraint violation</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r25c1-t3" headers="r1c1-t3">
<p>24</p>
</td>
<td class="cellalignment4973" headers="r25c1-t3 r1c2-t3">
<p>invalid cursor state</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r26c1-t3" headers="r1c1-t3">
<p>25</p>
</td>
<td class="cellalignment4973" headers="r26c1-t3 r1c2-t3">
<p>invalid transaction state</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r27c1-t3" headers="r1c1-t3">
<p>26</p>
</td>
<td class="cellalignment4973" headers="r27c1-t3 r1c2-t3">
<p>invalid SQL statement name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r28c1-t3" headers="r1c1-t3">
<p>27</p>
</td>
<td class="cellalignment4973" headers="r28c1-t3 r1c2-t3">
<p>triggered data change violation</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r29c1-t3" headers="r1c1-t3">
<p>28</p>
</td>
<td class="cellalignment4973" headers="r29c1-t3 r1c2-t3">
<p>invalid authorization specification</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r30c1-t3" headers="r1c1-t3">
<p>2A</p>
</td>
<td class="cellalignment4973" headers="r30c1-t3 r1c2-t3">
<p>direct SQL syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r31c1-t3" headers="r1c1-t3">
<p>2B</p>
</td>
<td class="cellalignment4973" headers="r31c1-t3 r1c2-t3">
<p>dependent privilege descriptors still exist</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r32c1-t3" headers="r1c1-t3">
<p>2C</p>
</td>
<td class="cellalignment4973" headers="r32c1-t3 r1c2-t3">
<p>invalid character set name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r33c1-t3" headers="r1c1-t3">
<p>2D</p>
</td>
<td class="cellalignment4973" headers="r33c1-t3 r1c2-t3">
<p>invalid transaction termination</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r34c1-t3" headers="r1c1-t3">
<p>2E</p>
</td>
<td class="cellalignment4973" headers="r34c1-t3 r1c2-t3">
<p>invalid connection name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r35c1-t3" headers="r1c1-t3">
<p>2F</p>
</td>
<td class="cellalignment4973" headers="r35c1-t3 r1c2-t3">
<p>SQL routine exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r36c1-t3" headers="r1c1-t3">
<p>2H</p>
</td>
<td class="cellalignment4973" headers="r36c1-t3 r1c2-t3">
<p>invalid collation name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r37c1-t3" headers="r1c1-t3">
<p>30</p>
</td>
<td class="cellalignment4973" headers="r37c1-t3 r1c2-t3">
<p>invalid SQL statement identifier</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r38c1-t3" headers="r1c1-t3">
<p>33</p>
</td>
<td class="cellalignment4973" headers="r38c1-t3 r1c2-t3">
<p>invalid SQL descriptor name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r39c1-t3" headers="r1c1-t3">
<p>34</p>
</td>
<td class="cellalignment4973" headers="r39c1-t3 r1c2-t3">
<p>invalid cursor name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r40c1-t3" headers="r1c1-t3">
<p>35</p>
</td>
<td class="cellalignment4973" headers="r40c1-t3 r1c2-t3">
<p>invalid condition number</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r41c1-t3" headers="r1c1-t3">
<p>36</p>
</td>
<td class="cellalignment4973" headers="r41c1-t3 r1c2-t3">
<p>cursor sensitivity exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r42c1-t3" headers="r1c1-t3">
<p>37</p>
</td>
<td class="cellalignment4973" headers="r42c1-t3 r1c2-t3">
<p>dynamic SQL syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r43c1-t3" headers="r1c1-t3">
<p>38</p>
</td>
<td class="cellalignment4973" headers="r43c1-t3 r1c2-t3">
<p>external routine exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r44c1-t3" headers="r1c1-t3">
<p>39</p>
</td>
<td class="cellalignment4973" headers="r44c1-t3 r1c2-t3">
<p>external routine invocation exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r45c1-t3" headers="r1c1-t3">
<p>3B</p>
</td>
<td class="cellalignment4973" headers="r45c1-t3 r1c2-t3">
<p>savepoint exception</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r46c1-t3" headers="r1c1-t3">
<p>3C</p>
</td>
<td class="cellalignment4973" headers="r46c1-t3 r1c2-t3">
<p>ambiguous cursor name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r47c1-t3" headers="r1c1-t3">
<p>3D</p>
</td>
<td class="cellalignment4973" headers="r47c1-t3 r1c2-t3">
<p>invalid catalog name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r48c1-t3" headers="r1c1-t3">
<p>3F</p>
</td>
<td class="cellalignment4973" headers="r48c1-t3 r1c2-t3">
<p>invalid schema name</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r49c1-t3" headers="r1c1-t3">
<p>40</p>
</td>
<td class="cellalignment4973" headers="r49c1-t3 r1c2-t3">
<p>transaction rollback</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r50c1-t3" headers="r1c1-t3">
<p>42</p>
</td>
<td class="cellalignment4973" headers="r50c1-t3 r1c2-t3">
<p>syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r51c1-t3" headers="r1c1-t3">
<p>44</p>
</td>
<td class="cellalignment4973" headers="r51c1-t3 r1c2-t3">
<p>with check option violation</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r52c1-t3" headers="r1c1-t3">
<p>HZ</p>
</td>
<td class="cellalignment4973" headers="r52c1-t3 r1c2-t3">
<p>remote database access</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The class code HZ is reserved for conditions defined in International Standard ISO/IEC DIS 9579-2, <span class="italic">Remote Database Access</span>.</div>
<p><a href="#CHDBBJAC">Table 8-4, &#34;SQLSTATE Codes&#34;</a> shows how errors map to SQLSTATE status codes. In some cases, several errors map to the status code. In other cases, no error maps to the status code (so the last column is empty). Status codes in the range 60000..99999 are implementation-defined.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i16095"></a>
<div id="LNPCB502" class="sect1">
<h2 class="sect1">Using the SQL Communications Area</h2>
<p>Oracle uses the SQL Communications Area (SQLCA) to store status information passed to your program at run time. The SQLCA is a record-like, COBOL data structure that is a updated after each executable SQL statement, so it always reflects the outcome of the most recent SQL operation. Its fields contain error, warning, and status information updated by Oracle whenever a SQL statement is executed. To determine that outcome, you can check variables in the SQLCA explicitly with your own COBOL code or implicitly with the WHENEVER statement.<a id="sthref1034"></a><a id="sthref1035"></a></p>
<p>When MODE={ORACLE | ANSI13}, the SQLCA is required; if the SQLCA is not declared, compile-time errors will occur. The SQLCA is optional when MODE={ANSI | ANSI14}, but if you want to use the WHENEVER SQLWARNING statement, you must declare the SQLCA. The SQLCA must also be included when using multibyte NCHAR host variables.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When your application uses Oracle Net Services to access a combination of local and remote databases concurrently, all the databases write to one SQLCA. There is <span class="italic">not</span> a different SQLCA for each database. For more information, see <a href="pco03dbc.htm#i7213">&#34;Concurrent Logons&#34;</a>.<a id="sthref1036"></a></div>
<div id="LNPCB503" class="sect2"><a id="sthref1037"></a>
<h3 class="sect2">Contents of the SQLCA</h3>
<p>The SQLCA contains runtime information about the execution of SQL statements, such as error codes, warning flags, event information, rows-processed count, and diagnostics.<a id="sthref1038"></a></p>
<p><a href="#i13349">Figure 8-2</a> shows all the variables in the SQLCA.</p>
<div id="LNPCB504" class="figure">
<p class="titleinfigure"><a id="i13349"></a>Figure 8-2 SQLCA Variable Declarations for Pro*COBOL</p>
<img width="600" height="272" src="img/pco81002.gif" alt="SQLCA Variable Declarations"/><br/>
<a id="sthref1039" href="img_text/pco81002.htm">Description of &#34;Figure 8-2 SQLCA Variable Declarations for Pro*COBOL&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="i5223"></a>
<div id="LNPCB505" class="sect2">
<h3 class="sect2">Declaring the SQLCA</h3>
<p>To declare the SQLCA, simply include it (using an EXEC SQL INCLUDE statement) in your Pro*COBOL source file outside the Declare Section as follows:<a id="sthref1040"></a><a id="sthref1041"></a><a id="sthref1042"></a></p>
<pre>*    Include the SQL Communications Area (SQLCA). 
     EXEC SQL INCLUDE SQLCA END-EXEC. 
</pre>
<p>The SQLCA must be declared <span class="italic">outside</span> the Declare Section.</p>
<div class="infobox-note">
<p class="notep1">Warning:</p>
<p class="warnsp">&thinsp;<span class="italic">Do not</span> declare SQLCODE if SQLCA is declared. Likewise, do <span class="italic">not</span> declare SQLCA if SQLCODE is declared. The status variable declared by the SQLCA structure is also called SQLCODE, so errors will occur if both error-reporting mechanisms are used.</p>
</div>
<p>When you precompile your program, the INCLUDE SQLCA statement is replaced by several variable declarations that allow Oracle to communicate with the program.</p>
</div>
<!-- class="sect2" -->
<a id="i7295"></a>
<div id="LNPCB506" class="sect2">
<h3 class="sect2">Key Components of Error Reporting</h3>
<p>The key components of Pro*COBOL error reporting depend on several fields in the SQLCA.<a id="sthref1043"></a></p>
<div id="LNPCB507" class="sect3"><a id="sthref1044"></a>
<h4 class="sect3">Status Codes</h4>
<p>Every executable SQL statement returns a status code in the SQLCA variable SQLCODE, which you can check implicitly with WHENEVER SQLERROR or explicitly with your own COBOL code.<a id="sthref1045"></a><a id="sthref1046"></a></p>
</div>
<!-- class="sect3" -->
<a id="i14854"></a>
<div id="LNPCB508" class="sect3">
<h4 class="sect3">Warning Flags</h4>
<p>Warning flags are returned in the SQLCA variables SQLWARN0 through SQLWARN7, which you can check with WHENEVER SQLWARNING or with your own COBOL code. These warning flags are useful for detecting runtime conditions that are not considered errors.<a id="sthref1047"></a><a id="sthref1048"></a><a id="sthref1049"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB509" class="sect3"><a id="sthref1050"></a>
<h4 class="sect3">Rows-Processed Count</h4>
<p>The number of rows processed by the most recently executed SQL statement is returned in the SQLCA variable SQLERRD(3). For repeated FETCHes on an OPEN cursor, SQLERRD(3) keeps a running total of the number of rows fetched.<a id="sthref1051"></a><a id="sthref1052"></a><a id="sthref1053"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB510" class="sect3"><a id="sthref1054"></a>
<h4 class="sect3">Parse Error Offset</h4>
<p>Before executing a SQL statement, Oracle must parse it; that is, examine it to make sure it follows syntax rules and refers to valid database objects. If Oracle finds an error, an offset is stored in the SQLCA variable SQLERRD(5), which you can check explicitly. The offset specifies the character position in the SQL statement at which the parse error begins. The first character occupies position zero. For example, if the offset is 9, the parse error begins at the tenth character.<a id="sthref1055"></a><a id="sthref1056"></a></p>
<p>If your SQL statement does not cause a parse error, Oracle sets SQLERRD(5) to zero. Oracle also sets SQLERRD(5) to zero if a parse error begins at the first character (which occupies position zero). So, check SQLERRD(5) only if SQLCODE is negative, which means that an error has occurred.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB511" class="sect3"><a id="sthref1057"></a>
<h4 class="sect3">Error Message Text</h4>
<p>The error code and message for errors are available in the SQLCA variable SQLERRMC. For example, you might place the following statements in an error-handling routine:<a id="sthref1058"></a><a id="sthref1059"></a><a id="sthref1060"></a></p>
<pre>*    Handle SQL execution errors. 
     MOVE SQLERRMC TO ERROR-MESSAGE. 
     DISPLAY ERROR-MESSAGE. 
</pre>
<p>At most, the first 70 characters of message text are stored. For messages longer than 70 characters, you must call the SQLGLM subroutine, which is discussed in <a href="#i13814">&#34;Getting the Full Text of Error Messages&#34;</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCB512" class="sect2"><a id="sthref1061"></a>
<h3 class="sect2">SQLCA Structure</h3>
<p>This section describes the structure of the SQLCA, its fields, and the values they can store.<a id="sthref1062"></a></p>
<div id="LNPCB513" class="sect3"><a id="sthref1063"></a>
<h4 class="sect3">SQLCAID</h4>
<p>This string field is initialized to &#34;SQLCA&#34; to identify the SQL Communications Area.<a id="sthref1064"></a><a id="sthref1065"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB514" class="sect3"><a id="sthref1066"></a>
<h4 class="sect3">SQLCABC</h4>
<p>This integer field holds the length, in bytes, of the SQLCA structure.<a id="sthref1067"></a><a id="sthref1068"></a></p>
</div>
<!-- class="sect3" -->
<a id="i6380"></a>
<div id="LNPCB515" class="sect3">
<h4 class="sect3">SQLCODE</h4>
<p>This integer field holds the status code of the most recently executed SQL statement. The status code, which indicates the outcome of the SQL operation, can be any of the following numbers:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="possible values of SQLCODE" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t7">Status Code</th>
<th class="cellalignment4972" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t7" headers="r1c1-t7">0</td>
<td class="cellalignment4973" headers="r2c1-t7 r1c2-t7">Oracle executed the statement without detecting an error or exception.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t7" headers="r1c1-t7">&gt; 0</td>
<td class="cellalignment4973" headers="r3c1-t7 r1c2-t7">Oracle executed the statement but detected an exception. This occurs when Oracle cannot find a row that meets your WHERE-clause search condition or when a SELECT INTO or FETCH returns no rows.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t7" headers="r1c1-t7">&lt; 0</td>
<td class="cellalignment4973" headers="r4c1-t7 r1c2-t7">When MODE={ANSI | ANSI14 | ANSI113}, +100 is returned to SQLCODE after an INSERT of no rows. This can happen when a subquery returns no rows to process.
<p>Oracle did not execute the statement because of a database, system, network, or application error. Such errors can be fatal. When they occur, the current transaction should, in most cases, be rolled back.</p>
<p>Negative return codes correspond to error codes listed in <a class="olink ERRMG" href="../ERRMG/toc.htm"><span class="italic">Oracle Database Error Messages</span></a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCB516" class="sect3"><a id="sthref1069"></a>
<h4 class="sect3"><a id="sthref1070"></a><a id="sthref1071"></a><a id="sthref1072"></a>SQLERRM</h4>
<p>This sub-record contains the following two fields:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="sub-record fields of SQLERRM" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t8">Fields</th>
<th class="cellalignment4972" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t8" headers="r1c1-t8">SQLERRML</td>
<td class="cellalignment4973" headers="r2c1-t8 r1c2-t8">This integer field holds the length of the message text stored in SQLERRMC.<a id="sthref1073"></a><a id="sthref1074"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t8" headers="r1c1-t8">SQLERRMC</td>
<td class="cellalignment4973" headers="r3c1-t8 r1c2-t8">This string field holds the message text for the error code stored in SQLCODE and can store up to 70 characters. For the full text of messages longer than 70 characters, use the SQLGLM function.
<p><a id="sthref1075"></a><a id="sthref1076"></a>Verify SQLCODE is negative before you reference SQLERRMC. If you reference SQLERRMC when SQLCODE is zero, you get the message text associated with a prior SQL statement.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB517"></a>SQLERRP</p>
<p>This string field is reserved for future use.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB518" class="sect3"><a id="sthref1077"></a>
<h4 class="sect3">SQLERRD</h4>
<p>This table of binary integers has six elements. Descriptions of the fields in SQLERRD follow:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="fields of SQLERRD" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t9">Fields</th>
<th class="cellalignment4972" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t9" headers="r1c1-t9">SQLERRD(1)</td>
<td class="cellalignment4973" headers="r2c1-t9 r1c2-t9">This field is reserved for future use.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t9" headers="r1c1-t9">SQLERRD(2)</td>
<td class="cellalignment4973" headers="r3c1-t9 r1c2-t9">This field is reserved for future use.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t9" headers="r1c1-t9">SQLERRD(3)</td>
<td class="cellalignment4973" headers="r4c1-t9 r1c2-t9">This field holds the number of rows processed by the most recently executed SQL statement. However, if the SQL statement failed, the value of SQLERRD(3) is undefined, with one exception. If the error occurred during a table operation, processing stops at the row that caused the error, so SQLERRD(3) gives the number of rows processed successfully.
<p><a id="sthref1078"></a><a id="sthref1079"></a>The rows-processed count is zeroed after an OPEN statement and incremented after a FETCH statement. For the EXECUTE, INSERT, UPDATE, DELETE, and SELECT INTO statements, the count reflects the number of rows processed successfully. The count does <span class="italic">not</span> include rows processed by an update or delete cascade. For example, if 20 rows are deleted because they meet WHERE-clause criteria, and 5 more rows are deleted because they now (after the primary delete) violate column constraints, the count is 20 not 25.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t9" headers="r1c1-t9">SQLERRD(4)</td>
<td class="cellalignment4973" headers="r5c1-t9 r1c2-t9">This field is reserved for future use.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t9" headers="r1c1-t9">SQLERRD(5)</td>
<td class="cellalignment4973" headers="r6c1-t9 r1c2-t9">This field holds an offset that specifies the character position at which a parse error begins in the most recently executed SQL statement. The first character occupies position zero.<a id="sthref1080"></a><a id="sthref1081"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t9" headers="r1c1-t9">SQLERRD(6)</td>
<td class="cellalignment4973" headers="r7c1-t9 r1c2-t9">This field is reserved for future use.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCB519" class="sect3"><a id="sthref1082"></a>
<h4 class="sect3">SQLWARN</h4>
<p>This table of single characters has eight elements. They are used as warning flags. Oracle sets a flag by assigning it a &#39;W&#39; (for warning) character value. The flags warn of exceptional conditions.</p>
<p>For example, a warning flag is set when Oracle assigns a truncated column value to an output host character variable.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="#i13349">Figure 8-2, &#34;SQLCA Variable Declarations for Pro*COBOL&#34;</a> illustrates SQLWARN implementation in Pro*COBOL as a group item with elementary PIC X items named SQLWARN0 through SQLWARN7.</div>
<p>Descriptions of the fields in SQLWARN follow:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="SQLWARN fields" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t11">Fields</th>
<th class="cellalignment4972" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t11" headers="r1c1-t11">SQLWARN0</td>
<td class="cellalignment4973" headers="r2c1-t11 r1c2-t11">This flag is set if another warning flag is set.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t11" headers="r1c1-t11">SQLWARN1</td>
<td class="cellalignment4973" headers="r3c1-t11 r1c2-t11">This flag is set if a truncated column value was assigned to an output host variable. This applies only to character data. Oracle truncates certain numeric data without setting a warning or returning a negative SQLCODE value.
<p>To find out if a column value was truncated and by how much, check the indicator variable associated with the output host variable. The (positive) integer returned by an indicator variable is the original length of the column value. You can increase the length of the host variable accordingly.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t11" headers="r1c1-t11">SQLWARN2</td>
<td class="cellalignment4973" headers="r4c1-t11 r1c2-t11">This flag is set if one or more NULLs were ignored in the evaluation of a SQL group function such as AVG, COUNT, or MAX. This behavior is expected because, except for COUNT(*), all group functions ignore NULLs. If necessary, you can use the SQL function NVL to temporarily assign values (zeros, for example) to the NULL column entries.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t11" headers="r1c1-t11">SQLWARN3</td>
<td class="cellalignment4973" headers="r5c1-t11 r1c2-t11">This flag is set if the number of columns in a query select list does not equal the number of host variables in the INTO clause of the SELECT or FETCH statement. The number of items returned is the lesser of the two.<a id="sthref1083"></a><a id="sthref1084"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t11" headers="r1c1-t11">SQLWARN4</td>
<td class="cellalignment4973" headers="r6c1-t11 r1c2-t11">This flag is no longer in use.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t11" headers="r1c1-t11">SQLWARN5</td>
<td class="cellalignment4973" headers="r7c1-t11 r1c2-t11">This flag is set when an EXEC SQL CREATE {PROCEDURE | FUNCTION | PACKAGE | PACKAGE BODY} statement fails because of a PL/SQL compilation error.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t11" headers="r1c1-t11">SQLWARN6</td>
<td class="cellalignment4973" headers="r8c1-t11 r1c2-t11">This flag is no longer in use.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t11" headers="r1c1-t11">SQLWARN7</td>
<td class="cellalignment4973" headers="r9c1-t11 r1c2-t11">This flag is no longer in use.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCB520" class="sect3"><a id="sthref1085"></a>
<h4 class="sect3">SQLEXT</h4>
<p>This string field is reserved for future use.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCB521" class="sect2"><a id="sthref1086"></a>
<h3 class="sect2">PL/SQL Considerations</h3>
<p><a id="sthref1087"></a><a id="sthref1088"></a>When your Pro*COBOL program executes an embedded PL/SQL block, not all fields in the SQLCA are set. For example, if the block fetches several rows, the rows-processed count, SQLERRD(3), is set to 1, <span class="italic">not</span> the actual number of rows fetched. So, you should rely only on the SQLCODE and SQLERRM fields in the SQLCA after executing a PL/SQL block.</p>
</div>
<!-- class="sect2" -->
<a id="i13814"></a>
<div id="LNPCB522" class="sect2">
<h3 class="sect2">Getting the Full Text of Error Messages</h3>
<p>Regardless of the setting of MODE, you can use SQLGLM to get the full text of error messages if you have explicitly declared SQLCODE and not included SQLCA. The SQLCA can accommodate error messages up to 70 characters long. To get the full text of longer (or nested) error messages, you need the SQLGLM subroutine.</p>
<p>If connected to a database, you can call SQLGLM using the syntax<a id="sthref1089"></a><a id="sthref1090"></a><a id="sthref1091"></a><a id="sthref1092"></a><a id="sthref1093"></a></p>
<pre>     CALL &#34;SQLGLM&#34; USING MSG-TEXT, MAX-SIZE, MSG-LENGTH
</pre>
<p>where the parameters are:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="SQLGLM parameters" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t12">Parameter</th>
<th class="cellalignment4972" id="r1c2-t12">Datatype</th>
<th class="cellalignment4972" id="r1c3-t12">Parameter Definition</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t12" headers="r1c1-t12">MSG-TEXT</td>
<td class="cellalignment4973" headers="r2c1-t12 r1c2-t12">PIC X(n)</td>
<td class="cellalignment4973" headers="r2c1-t12 r1c3-t12">The field in which to store the error message. (Oracle blank-pads to the end of this field.)</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t12" headers="r1c1-t12">MAX-SIZE</td>
<td class="cellalignment4973" headers="r3c1-t12 r1c2-t12">PIC S9(9) COMP</td>
<td class="cellalignment4973" headers="r3c1-t12 r1c3-t12">An integer that specifies the maximum size of the MSG-TEXT field in bytes.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t12" headers="r1c1-t12">MSG-LENGTH</td>
<td class="cellalignment4973" headers="r4c1-t12 r1c2-t12">PIC S9(9) COMP</td>
<td class="cellalignment4973" headers="r4c1-t12 r1c3-t12">An integer variable in which Oracle stores the actual length of the error message.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>All parameters must be passed by reference. This is usually the default parameter passing convention; you need not take special action.</p>
<p>The maximum length of an error message is 512 characters including the error code, nested messages, and message inserts such as table and column names. The maximum length of an error message returned by SQLGLM depends on the value specified for MAX-SIZE.</p>
<p>The following example uses SQLGLM to get an error message of up to 200 characters in length:<a id="sthref1094"></a><a id="sthref1095"></a></p>
<pre>     ... 
*    Declare variables for the SQL-ERROR subroutine call. 
 01  MSG-TEXT    PIC X(200). 
 01  MAX-SIZE    PIC S9(9) COMP VALUE 200. 
 01  MSG-LENGTH  PIC S9(9) COMP. 
     ... 
 PROCEDURE DIVISION. 
 MAIN. 
     EXEC SQL WHENEVER SQLERROR GOTO SQL-ERROR END-EXEC. 
     ... 
 SQL-ERROR. 
*    Clear the previous message text. 
     MOVE SPACES TO MSG-TEXT. 
*    Get the full text of the error message. 
     CALL &#34;SQLGLM&#34; USING MSG-TEXT, MAX-SIZE, MSG-LENGTH. 
     DISPLAY MSG-TEXT. 
</pre>
<p>In the example, SQLGLM is called only when a SQL error has occurred. Always make sure SQLCODE is negative <span class="italic">before</span> calling SQLGLM. If you call SQLGLM when SQLCODE is zero, you get the message text associated with a prior SQL statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your application calls SQLGLM to get message text, the message length must be passed. Do <span class="italic">not</span> use the SQLCA variable SQLERRML. SQLERRML is a PIC S9(4) COMP integer while SQLGLM and SQLIEM expect a PIC S9(9) COMP integer. Instead, use another variable declared as PIC S9(9) COMP.<a id="sthref1096"></a><a id="sthref1097"></a><a id="sthref1098"></a><a id="sthref1099"></a></div>
</div>
<!-- class="sect2" -->
<a id="i8098"></a>
<div id="LNPCB523" class="sect2">
<h3 class="sect2"><a id="sthref1100"></a><a id="sthref1101"></a><a id="sthref1102"></a>DSNTIAR</h3>
<p>DB2 provides an assembler routine called DSNTIAR to obtain a form of the SQLCA that can be displayed. For users migrating to Oracle from DB2, Pro*COBOL provides DSNTIAR. The DSNTIAR implementation is a wrapper around SQLGLM. The DSNTIAR interface is as follows</p>
<pre>     CALL &#39;DSNTIAR&#39; USING SQLCA MESSAGE LRECL
</pre>
<p>where <span class="italic">MESSAGE</span> is the output message area, in VARCHAR form of size greater than or equal to 240, and <span class="italic">LRECL</span> is a full word containing the length of the output messages, between 72 and 240. The first half-word of the MESSAGE argument contains the length of the remaining area. The possible error codes returned by DSNTIAR are listed in the following table.</p>
<div id="LNPCB524" class="tblformal">
<p class="titleintable"><a id="sthref1103"></a><a id="sthref1104"></a>Table 8-2 DSNTIAR Error Codes and Their Meanings</p>
<table class="cellalignment4971" title="DSNTIAR Error Codes and Their Meanings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t14">Error Codes</th>
<th class="cellalignment4972" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t14" headers="r1c1-t14">
<p>0</p>
</td>
<td class="cellalignment4973" headers="r2c1-t14 r1c2-t14">
<p>Successful execution</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t14" headers="r1c1-t14">
<p>4</p>
</td>
<td class="cellalignment4973" headers="r3c1-t14 r1c2-t14">
<p>More data was available than could fit into the provided message</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t14" headers="r1c1-t14">
<p>8</p>
</td>
<td class="cellalignment4973" headers="r4c1-t14 r1c2-t14">
<p>The logical record length (LRECL) was not between 72 and 240</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t14" headers="r1c1-t14">
<p>12</p>
</td>
<td class="cellalignment4973" headers="r5c1-t14 r1c2-t14">
<p>The message area was not large enough (greater than 240)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i13728"></a>
<div id="LNPCB525" class="sect2">
<h3 class="sect2">WHENEVER Directive</h3>
<p><a id="sthref1105"></a>By default, Pro*COBOL ignores error and warning conditions and continues processing, if possible. To do automatic condition checking and error handling, you need the WHENEVER statement.<a id="sthref1106"></a><a id="sthref1107"></a></p>
<p>With the WHENEVER statement you can specify actions to be taken when Oracle detects an error, warning condition, or &#34;not found&#34; condition. These actions include continuing with the next statement, PERFORMing a paragraph, branching to a paragraph, or stopping.<a id="sthref1108"></a></p>
<div id="LNPCB526" class="sect3"><a id="sthref1109"></a>
<h4 class="sect3">Conditions</h4>
<p>You can have Oracle automatically check the SQLCA for any of the following conditions.<a id="sthref1110"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB527" class="sect3"><a id="sthref1111"></a>
<h4 class="sect3"><a id="sthref1112"></a>SQLWARNING</h4>
<p>SQLWARN(0) is set because Oracle returned a warning (one of the warning flags, SQLWARN(1) through SQLWARN(7), is also set) or SQLCODE has a positive value other than +1403. For example, SQLWARN(1) is set when Oracle assigns a truncated column value to an output host variable.<a id="sthref1113"></a><a id="sthref1114"></a></p>
<p>Declaring the SQLCA is optional when MODE={ANSI | ANSI14}. To use WHENEVER SQLWARNING, however, you <span class="italic">must</span> declare the SQLCA.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You have to have included SQLCA for this to work.</div>
</div>
<!-- class="sect3" -->
<div id="LNPCB528" class="sect3"><a id="sthref1115"></a>
<h4 class="sect3"><a id="sthref1116"></a>SQLERROR</h4>
<p>SQLCODE has a negative value if Oracle returns an error.<a id="sthref1117"></a><a id="sthref1118"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB529" class="sect3"><a id="sthref1119"></a>
<h4 class="sect3">NOT FOUND or NOTFOUND<a id="sthref1120"></a></h4>
<p>SQLCODE has a value of +1403 (or +100 when MODE={ANSI | ANSI14 | ANSI13} or when END_OF_FETCH=100) when the end of fetch has been reached. This can happen when all the rows that meet the search criteria have been fetched or no rows meet that criteria.</p>
<p>You may use the END_OF_FETCH option to override the value use by the MODE macro option.</p>
<pre>END_OF_FETCH = 100 | 1403 (default 1403)
</pre>
<p>For more details, see <a href="pco14opt.htm#i6859">&#34;END_OF_FETCH&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB530" class="sect3"><a id="sthref1121"></a>
<h4 class="sect3">Actions</h4>
<p>You can use the WHENEVER statement to specify the following actions.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB531" class="sect3"><a id="sthref1122"></a>
<h4 class="sect3">CONTINUE<a id="sthref1123"></a><a id="sthref1124"></a></h4>
<p>Your program continues to run with the next statement if possible. This is the default action, equivalent to not using the WHENEVER statement. You can use it to &#34;turn off&#34; condition checking.<a id="sthref1125"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB532" class="sect3"><a id="sthref1126"></a>
<h4 class="sect3">DO CALL</h4>
<p>Your program calls a nested subprogram. When the end of the subprogram is reached, control transfers to the statement that follows the failed SQL statement.<a id="sthref1127"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB533" class="sect3"><a id="sthref1128"></a>
<h4 class="sect3">DO PERFORM<a id="sthref1129"></a></h4>
<p>Your program transfers control to a COBOL section or paragraph. When the end of the section is reached, control transfers to the statement that follows the failed SQL statement.<a id="sthref1130"></a></p>
<pre>     EXEC SQL                                                
         WHENEVER &lt;condition&gt; DO PERFORM &lt;section_name&gt;    
     END-EXEC.                                              
</pre></div>
<!-- class="sect3" -->
<div id="LNPCB534" class="sect3"><a id="sthref1131"></a>
<h4 class="sect3">GOTO or GO TO<a id="sthref1132"></a></h4>
<p>Your program branches to the specified paragraph or section.<a id="sthref1133"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB535" class="sect3"><a id="sthref1134"></a>
<h4 class="sect3">STOP<a id="sthref1135"></a></h4>
<p>Your program stops running and uncommitted work is rolled back.<a id="sthref1136"></a></p>
<p>Be careful. The STOP action displays no messages before logging off.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Though in the generated code EXEC SQL WHENEVER SQLERROR STOP is converted to IF SQLCODE IN SQLCA IS EQUAL TO 1403 THEN STOP RUN END-IF, Oracle server will take care of rolling back uncommitted data.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i14203"></a>
<div id="LNPCB536" class="sect2">
<h3 class="sect2">Coding the WHENEVER Statement</h3>
<p>Code the WHENEVER statement using the following syntax:<a id="sthref1137"></a></p>
<pre>     EXEC SQL 
         WHENEVER &lt;condition&gt; &lt;action&gt; 
     END-EXEC. 
</pre>
<div id="LNPCB537" class="sect3"><a id="sthref1138"></a>
<h4 class="sect3">DO PERFORM<a id="sthref1139"></a></h4>
<p>When using the WHENEVER ... DO PERFORM statement, the usual rules for PERFORMing a paragraph or section apply. However, you cannot use the THRU, TIMES, UNTIL, or VARYING clauses.</p>
<p>For example, the following WHENEVER ... DO statement is <span class="italic">invalid</span>:</p>
<pre> PROCEDURE DIVISION. 
*    Invalid statement 
     EXEC SQL WHENEVER SQLERROR DO 
         PERFORM DISPLAY-ERROR THRU LOG-OFF 
     END-EXEC. 
     ... 
 DISPLAY-ERROR. 
     ... 
 LOG-OFF. 
     ... 
</pre>
<p>In the following example, WHENEVER SQLERROR DO PERFORM statements are used to handle specific errors:<a id="sthref1140"></a></p>
<pre> PROCEDURE DIVISION. 
 MAIN SECTION.
 MSTART.
     ... 
     EXEC SQL 
         WHENEVER SQLERROR DO PERFORM INS-ERROR 
     END-EXEC. 
     EXEC SQL 
         INSERT INTO EMP (EMPNO, ENAME, DEPTNO) 
         VALUES (:EMP-NUMBER, :EMP-NAME, :DEPT-NUMBER) 
     END-EXEC.
     EXEC SQL 
         WHENEVER SQLERROR DO PERFORM DEL-ERROR 
     END-EXEC. 
     EXEC SQL 
         DELETE FROM DEPT 
         WHERE DEPTNO = :DEPT-NUMBER 
     END-EXEC. 
     ...
 MEXIT.
     STOP RUN.
 INS-ERROR SECTION.
 INSSTART.
*    Check for &#34;duplicate key value&#34; Oracle error 
     IF SQLCA.SQLCODE = -1 
     ... 
*    Check for &#34;value too large&#34; Oracle error 
     ELSE IF SQLCA.SQLCODE = -1401 
     ... 
     ELSE 
     ... 
     END-IF.
     ...
 INSEXIT.
     EXIT.
*
 DEL-ERROR SECTION.
 DSTART.
*    Check for the number of rows processed.
     IF SQLCA.SQLERRD(3) = 0 
     ... 
     ELSE 
     ...
     END-IF.
     ...
 DEXIT.
     EXIT.
</pre>
<p>Notice how the paragraphs check variables in the SQLCA to determine a course of action.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB538" class="sect3"><a id="sthref1141"></a>
<h4 class="sect3">DO CALL<a id="sthref1142"></a><a id="sthref1143"></a><a id="sthref1144"></a></h4>
<p>This clause calls an action subprogram. Here is the syntax of this clause:</p>
<pre>     EXEC SQL
         WHENEVER &lt;condition&gt; DO CALL &lt;subprogram_name&gt;
         [USING &lt;param1&gt; ...]
     END-EXEC.
</pre>
<p>The following restrictions or rules apply:</p>
<ul>
<li>
<p>You cannot use the RETURNING, ON_EXCEPTION, or OVER_FLOW phrases in the USING clause.</p>
</li>
<li>
<p>You may have to enter the subprogram name followed by the keyword COMMON in the PROGRAM-ID statement of your COBOL source code.</p>
</li>
<li>
<p>You must use a WHENEVER CONTINUE statement in the action subprogram.</p>
</li>
<li>
<p>The action subprogram name may have to be in double quotes in the DO CALL clause of the WHENEVER directive.</p>
</li>
</ul>
<p>Here is an example of a program that can call the error subprogram SQL-ERROR from inside the subprogram LOGON, or inside the MAIN program, without having to repeat code in two places, as when using the DO PERFORM clause:</p>
<pre>IDENTIFICATION DIVISION.
            PROGRAM-ID. MAIN.
            ENVIRONMENT DIVISION.
        ...
            PROCEDURE DIVISION.
            BEGIN-PGM.
                EXEC SQL
                    WHENEVER SQLERROR DO CALL &#34;SQL-ERROR&#34;
                END-EXEC.
                CALL &#34;LOGON&#34;.
        ...
            IDENTIFICATION DIVISION.
            PROGRAM-ID. LOGON.
            DATA DIVISION.
            WORKING-STORAGE SECTION.
            01  USERNAME          PIC X(15) VARYING.
            01  PASSWD            PIC X(15) VARYING.
            PROCEDURE DIVISION.
                MOVE &#34;SCOTT&#34; TO USERNAME-ARR.
                MOVE 5 TO USERNAME-LEN.
                MOVE &#34;TIGER&#34; TO PASSWD-ARR.
                MOVE 5 TO PASSWD-LEN.
                EXEC SQL
                   CONNECT :USERNAME IDENTIFIED BY :PASSWD
                END-EXEC.
                DISPLAY &#34; &#34;.
                DISPLAY &#34;CONNECTED TO ORACLE AS USER:  &#34;, USERNAME-ARR.
            END PROGRAM LOGON.
        ...
            IDENTIFICATION DIVISION.
            PROGRAM-ID. SQL-ERROR COMMON.
            PROCEDURE DIVISION.
                EXEC SQL
                    WHENEVER SQLERROR CONTINUE
                END-EXEC.
                DISPLAY &#34; &#34;.
                DISPLAY SQLERRMC.
                EXEC SQL
                    ROLLBACK WORK RELEASE
                END-EXEC.
                END PROGRAM SQL-ERROR.
            END PROGRAM MAIN.
</pre></div>
<!-- class="sect3" -->
<div id="LNPCB539" class="sect3"><a id="sthref1145"></a>
<h4 class="sect3">Scope<a id="sthref1146"></a></h4>
<p>Because WHENEVER is a declarative statement, its scope is positional, not logical. It tests all executable SQL statements that follow it in the source file, not in the flow of program logic. So, code the WHENEVER statement before the first executable SQL statement you want to test.<a id="sthref1147"></a></p>
<p>A WHENEVER statement stays in effect until superseded by another WHENEVER statement checking for the same condition.&thinsp;</p>
<p><span class="bold">Suggestion</span>: You can place WHENEVER statements at the beginning of each program unit that contains SQL statements. That way, SQL statements in one program unit will not reference WHENEVER actions in another program unit, causing errors at compile or run time.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB540" class="sect3"><a id="sthref1148"></a>
<h4 class="sect3">Careless Usage: Examples<a id="sthref1149"></a></h4>
<p>Careless use of the WHENEVER statement can cause problems. For example, the following code enters an infinite loop if the DELETE statement sets the NOT FOUND condition, because no rows meet the search condition:</p>
<pre>*    Improper use of WHENEVER. 
     EXEC SQL
         WHENEVER NOT FOUND GOTO NO-MORE
     END-EXEC. 
     PERFORM GET-ROWS UNTIL DONE = &#34;YES&#34;. 
     ... 
 GET-ROWS. 
     EXEC SQL
         FETCH emp_cursor INTO :EMP-NAME, :SALARY
     END-EXEC. 
     ... 
 NO-MORE. 
     MOVE &#34;YES&#34; TO DONE. 
     EXEC SQL
         DELETE FROM EMP WHERE EMPNO = :EMP-NUMBER
     END-EXEC. 
     ... 
</pre>
<p>In the next example, the NOT FOUND condition is properly handled by resetting the GOTO target:</p>
<pre>*    Proper use of WHENEVER. 
     EXEC SQL WHENEVER NOT FOUND GOTO NO-MORE END-EXEC. 
     PERFORM GET-ROWS UNTIL DONE = &#34;YES&#34;. 
     ... 
 GET-ROWS. 
     EXEC SQL
         FETCH emp_cursor INTO :EMP-NAME, :SALARY
     END-EXEC. 
     ... 
 NO-MORE. 
     MOVE &#34;YES&#34; TO DONE. 
     EXEC SQL WHENEVER NOT FOUND GOTO NONE-FOUND END-EXEC. 
     EXEC SQL
        DELETE FROM EMP WHERE EMPNO = :EMP-NUMBER
     END-EXEC. 
     ... 
 NONE-FOUND. 
     ... 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCB541" class="sect2"><a id="sthref1150"></a>
<h3 class="sect2">Getting the Text of SQL Statements</h3>
<p>In many Pro*COBOL applications, it is convenient to know the text of the statement being processed, its length, and the SQL command (such as INSERT or SELECT) that it contains. This is especially true for applications that use dynamic SQL.<a id="sthref1151"></a></p>
<p>The routine <a id="sthref1152"></a>SQLGLS, which is part of the SQLLIB runtime library, returns the following information:<a id="sthref1153"></a></p>
<ul>
<li>
<p>The text of the most recently parsed SQL statement</p>
</li>
<li>
<p>The length of the statement</p>
</li>
<li>
<p>A function code</p>
</li>
</ul>
<p>You can call SQLGLS after issuing a static SQL statement. With dynamic SQL Method 1, you can call SQLGLS after the SQL statement is executed. With dynamic SQL Method 2, 3, or 4, you can call SQLGLS after the statement is prepared.</p>
<p>To call SQLGLS, you use the following syntax: <a id="sthref1154"></a></p>
<pre>     CALL &#34;SQLGLS&#34; USING SQLSTM STMLEN SQLFC.
 
</pre>
<p><a href="#g43686">Table 8-3</a> shows the host-language datatypes available for the parameters in the SQLGLS argument list.tt</p>
<div id="LNPCB542" class="tblformal">
<p class="titleintable"><a id="sthref1155"></a><a id="g43686"></a>Table 8-3 Parameter Datatypes</p>
<table class="cellalignment4971" title="Parameter Datatypes" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t17">Parameter</th>
<th class="cellalignment4972" id="r1c2-t17">Datatype</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t17" headers="r1c1-t17">
<p>SQLSTM</p>
</td>
<td class="cellalignment4973" headers="r2c1-t17 r1c2-t17">
<p>PIC X(<span class="italic">n</span>)</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t17" headers="r1c1-t17">
<p>STMLEN</p>
</td>
<td class="cellalignment4973" headers="r3c1-t17 r1c2-t17">
<p>PIC S9(9) COMP</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t17" headers="r1c1-t17">
<p>SQLFC</p>
</td>
<td class="cellalignment4973" headers="r4c1-t17 r1c2-t17">
<p>PIC S9(9) COMP</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>All parameters must be passed by reference. This is usually the default parameter passing convention; you need not take special action.</p>
<p>The parameter <a id="sthref1156"></a>SQLSTM is a blank-padded (not null-terminated) character buffer that holds the returned text of the SQL statement. Your program must statically declare the buffer or dynamically allocate memory for it.<a id="sthref1157"></a><a id="sthref1158"></a></p>
<p>The length parameter STMLEN is a four-byte integer. Before calling <a id="sthref1159"></a>SQLGLS, set this parameter to the actual size (in bytes) of the SQLSTM buffer. When SQLGLS returns, the SQLSTM buffer contains the SQL statement text blank padded to the length of the buffer. STMLEN returns the actual number of bytes in the returned statement text, not counting the blank padding. However, STMLEN returns a zero if an error occurred.</p>
<p>Some possible errors follow: <a id="sthref1160"></a></p>
<ul>
<li>
<p>No SQL statement was parsed.</p>
</li>
<li>
<p>You passed an invalid parameter (for example, a negative length value).</p>
</li>
<li>
<p>An internal exception occurred in SQLLIB.</p>
</li>
</ul>
<p>The parameter SQLFC is a four-byte integer that returns the SQL function code for the SQL command in the statement. A complete table of the function code for each SQL command is found in <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>. <a id="sthref1161"></a><a id="sthref1162"></a><a id="sthref1163"></a></p>
<p>There are no SQL function codes for these statements:</p>
<ul>
<li>
<p>CONNECT</p>
</li>
<li>
<p>COMMIT</p>
</li>
<li>
<p>FETCH</p>
</li>
<li>
<p>ROLLBACK</p>
</li>
<li>
<p>RELEASE</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i14161"></a>
<div id="LNPCB543" class="sect1">
<h2 class="sect1">Using the Oracle Communications Area</h2>
<p>The SQLCA handles standard SQL communications. The Oracle Communications Area (ORACA) is a similar structure that you can include in your program to handle Oracle-specific communications. When you need more runtime information than the SQLCA provides, use the ORACA.<a id="sthref1164"></a></p>
<p>Besides helping you to diagnose problems, the ORACA lets you monitor your program&#39;s use of resources such as the SQL Statement Executor and the <span class="italic">cursor cache</span>, an area of memory reserved for cursor management.<a id="sthref1165"></a><a id="sthref1166"></a></p>
<div id="LNPCB544" class="sect2"><a id="sthref1167"></a>
<h3 class="sect2">Contents of the ORACA</h3>
<p>The ORACA contains option settings, system statistics, and extended diagnostics. <a href="#i14666">Figure 8-3</a> shows all the variables in the ORACA:</p>
<div id="LNPCB545" class="figure">
<p class="titleinfigure"><a id="i14666"></a>Figure 8-3 ORACA Variable Declarations for Pro*COBOL<a id="sthref1168"></a></p>
<img width="600" height="288" src="img/pco81003.gif" alt="ORACA Variable Declarations"/><br/>
<a id="sthref1169" href="img_text/pco81003.htm">Description of &#34;Figure 8-3 ORACA Variable Declarations for Pro*COBOL&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div id="LNPCB546" class="sect2"><a id="sthref1170"></a>
<h3 class="sect2">Declaring the ORACA</h3>
<p>To declare the ORACA, simply include it (using an EXEC SQL INCLUDE statement) in your Pro*COBOL source file outside the Declare Section as follows:<a id="sthref1171"></a><a id="sthref1172"></a><a id="sthref1173"></a></p>
<pre>*    Include the Oracle Communications Area (ORACA). 
     EXEC SQL INCLUDE ORACA END-EXEC. 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCB547" class="sect2"><a id="sthref1174"></a>
<h3 class="sect2">Enabling the <a id="sthref1175"></a>ORACA</h3>
<p>To enable the ORACA, you must set the ORACA precompiler option to YES on the command line or in a configuration file with:<a id="sthref1176"></a></p>
<pre>ORACA=YES 
</pre>
<p>or inline with:</p>
<pre>     EXEC Oracle OPTION (ORACA=YES) END-EXEC. 
</pre>
<p>Then, you must choose appropriate runtime options by setting flags in the ORACA. Enabling the ORACA is optional because it adds to runtime overhead. The default setting is ORACA=NO.<a id="sthref1177"></a><a id="sthref1178"></a><a id="sthref1179"></a></p>
</div>
<!-- class="sect2" -->
<div id="LNPCB548" class="sect2"><a id="sthref1180"></a>
<h3 class="sect2">Choosing Runtime Options</h3>
<p>The ORACA includes several option flags. Setting these flags by assigning them nonzero values enables you to:<a id="sthref1181"></a><a id="sthref1182"></a></p>
<ul>
<li>
<p>Save the text of SQL statements</p>
</li>
<li>
<p>Enable DEBUG operations</p>
</li>
<li>
<p>Check cursor cache consistency (the <span class="italic">cursor cache</span> is a continuously updated area of memory used for cursor management)</p>
</li>
<li>
<p>Check heap consistency (the <span class="italic">heap</span> is an area of memory reserved for dynamic variables)</p>
</li>
<li>
<p>Gather cursor statistics</p>
</li>
</ul>
<p>The following descriptions will help you choose the options you need.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCB549" class="sect2"><a id="sthref1183"></a>
<h3 class="sect2"><a id="sthref1184"></a>ORACA Structure</h3>
<p>This section describes the structure of the ORACA, its fields, and the values they can store.<a id="sthref1185"></a></p>
<div id="LNPCB550" class="sect3"><a id="sthref1186"></a>
<h4 class="sect3">ORACAID</h4>
<p>This string field is initialized to <code>ORACA</code> to identify the Oracle Communications Area.<a id="sthref1187"></a><a id="sthref1188"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB551" class="sect3"><a id="sthref1189"></a>
<h4 class="sect3">ORACABC</h4>
<p>This integer field holds the length, expressed in bytes, of the ORACA data structure.<a id="sthref1190"></a><a id="sthref1191"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB552" class="sect3"><a id="sthref1192"></a>
<h4 class="sect3">ORACCHF</h4>
<p>If the master DEBUG flag (ORADBGF) is set, this flag lets you check the cursor cache for consistency before every cursor operation.<a id="sthref1193"></a><a id="sthref1194"></a></p>
<p>The runtime library does the consistency checking and can issue error messages, which are listed in <a class="olink ERRMG" href="../ERRMG/toc.htm"><span class="italic">Oracle Database Error Messages</span></a>.</p>
<p>This flag has the following settings:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="possible ORACCHF flag settings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t18">Settings</th>
<th class="cellalignment4972" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t18" headers="r1c1-t18">0</td>
<td class="cellalignment4973" headers="r2c1-t18 r1c2-t18">Disable cache consistency checking (the default).</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t18" headers="r1c1-t18">1</td>
<td class="cellalignment4973" headers="r3c1-t18 r1c2-t18">Enable cache consistency checking.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCB553" class="sect3"><a id="sthref1195"></a>
<h4 class="sect3">ORADBGF</h4>
<p>This master flag lets you choose all the DEBUG options. It has the following settings:<a id="sthref1196"></a><a id="sthref1197"></a></p>
<div class="inftblinformal">
<table class="cellalignment4974" title="possible ORADBGF flag settings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t19">Settings</th>
<th class="cellalignment4972" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t19" headers="r1c1-t19">0</td>
<td class="cellalignment4973" headers="r2c1-t19 r1c2-t19">Disable all DEBUG operations (the default).</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t19" headers="r1c1-t19">1</td>
<td class="cellalignment4973" headers="r3c1-t19 r1c2-t19">Allow DEBUG operations to be enabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCB554" class="sect3"><a id="sthref1198"></a>
<h4 class="sect3">ORAHCHF</h4>
<p>If the master DEBUG flag (ORADBGF) is set, this flag tells the runtime library to check the heap for consistency every time Pro*COBOL dynamically allocates or frees memory. This is useful for detecting program bugs that upset memory.</p>
<p>This flag must be set before the CONNECT command is issued and, once set, cannot be cleared; subsequent change requests are ignored. It has the following settings:<a id="sthref1199"></a><a id="sthref1200"></a></p>
<div class="inftblinformal">
<table class="cellalignment4974" title="possible ORAHCHF flag settings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t20">Settings</th>
<th class="cellalignment4972" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t20" headers="r1c1-t20">0</td>
<td class="cellalignment4973" headers="r2c1-t20 r1c2-t20">Enable heap consistency checking (the default).</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t20" headers="r1c1-t20">1</td>
<td class="cellalignment4973" headers="r3c1-t20 r1c2-t20">Disable heap consistency checking.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCB555" class="sect3"><a id="sthref1201"></a>
<h4 class="sect3">ORASTXTF</h4>
<p>This flag lets you specify when the text of the current SQL statement is saved. It has the following settings:<a id="sthref1202"></a><a id="sthref1203"></a></p>
<div class="inftblinformal">
<table class="cellalignment4974" title="possible ORASTXTF flag settings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t21">Settings</th>
<th class="cellalignment4972" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t21" headers="r1c1-t21">0</td>
<td class="cellalignment4973" headers="r2c1-t21 r1c2-t21">Never save the SQL statement text (the default).</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t21" headers="r1c1-t21">1</td>
<td class="cellalignment4973" headers="r3c1-t21 r1c2-t21">Save the SQL statement text on SQLERROR only.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t21" headers="r1c1-t21">2</td>
<td class="cellalignment4973" headers="r4c1-t21 r1c2-t21">Save the SQL statement text on SQLERROR or SQLWARNING.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t21" headers="r1c1-t21">3</td>
<td class="cellalignment4973" headers="r5c1-t21 r1c2-t21">Always save the SQL statement text.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>The SQL statement text is saved in the ORACA sub-record named ORASTXT.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB556" class="sect3"><a id="sthref1204"></a>
<h4 class="sect3">Diagnostics</h4>
<p>The ORACA provides an enhanced set of diagnostics; the following variables help you to locate errors quickly.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB557" class="sect3"><a id="sthref1205"></a>
<h4 class="sect3">ORASTXT</h4>
<p>This sub-record helps you find faulty SQL statements. It lets you save the text of the last SQL statement parsed by Oracle. It contains the following two fields:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="possible ORASTXT flag settings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t22">Settings</th>
<th class="cellalignment4972" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t22" headers="r1c1-t22">ORASTXTL</td>
<td class="cellalignment4973" headers="r2c1-t22 r1c2-t22">This integer field holds the length of the current SQL statement.<a id="sthref1206"></a><a id="sthref1207"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t22" headers="r1c1-t22">ORASTXTC</td>
<td class="cellalignment4973" headers="r3c1-t22 r1c2-t22">This string field holds the text of the current SQL statement. At most, the first 70 characters of text are saved.<a id="sthref1208"></a><a id="sthref1209"></a></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Statements parsed by Pro*COBOL, such as CONNECT, FETCH, and COMMIT, are <span class="italic">not</span> saved in the ORACA.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCB558" class="sect3"><a id="sthref1210"></a>
<h4 class="sect3"><a id="sthref1211"></a>ORASFNM</h4>
<p>This sub-record identifies the file containing the current SQL statement and so helps you find errors when multiple files are precompiled for one application. It contains the following two fields:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="orasfnm fields" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t23">Settings</th>
<th class="cellalignment4972" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t23" headers="r1c1-t23">ORASFNML</td>
<td class="cellalignment4973" headers="r2c1-t23 r1c2-t23">This integer field holds the length of the filename stored in ORASFNMC.<a id="sthref1212"></a><a id="sthref1213"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t23" headers="r1c1-t23">ORASFNMC</td>
<td class="cellalignment4973" headers="r3c1-t23 r1c2-t23">This string field holds the filename. At most, the first 70 characters are stored.<a id="sthref1214"></a><a id="sthref1215"></a></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCB559" class="sect3"><a id="sthref1216"></a>
<h4 class="sect3"><a id="sthref1217"></a>ORASLNR</h4>
<p>This integer field identifies the line at (or near) which the current SQL statement can be found.<a id="sthref1218"></a><a id="sthref1219"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB560" class="sect3"><a id="sthref1220"></a>
<h4 class="sect3">Cursor Cache Statistics</h4>
<p>The following variables let you gather cursor cache statistics. They are automatically set by every COMMIT or ROLLBACK statement your program issues. Internally, there is a set of these variables for each CONNECTed database. The current values in the ORACA pertain to the database against which the last commit or rollback was executed.<a id="sthref1221"></a><a id="sthref1222"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB561" class="sect3"><a id="sthref1223"></a>
<h4 class="sect3">ORAHOC</h4>
<p>This integer field records the highest value to which MAXOPENCURSORS was set during program execution.<a id="sthref1224"></a><a id="sthref1225"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB562" class="sect3"><a id="sthref1226"></a>
<h4 class="sect3">ORAMOC</h4>
<p>This integer field records the maximum number of open cursors required by your program. This number can be higher than ORAHOC if MAXOPENCURSORS was set too low, which forced Pro*COBOL to extend the cursor cache.<a id="sthref1227"></a><a id="sthref1228"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB563" class="sect3"><a id="sthref1229"></a>
<h4 class="sect3"><a id="sthref1230"></a>ORACOC</h4>
<p>This integer field records the current number of open cursors required by your program.<a id="sthref1231"></a><a id="sthref1232"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB564" class="sect3"><a id="sthref1233"></a>
<h4 class="sect3">ORANOR</h4>
<p>This integer field records the number of cursor cache reassignments required by your program. This number shows the degree of &#34;thrashing&#34; in the cursor cache and should be kept as low as possible.<a id="sthref1234"></a><a id="sthref1235"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB565" class="sect3"><a id="sthref1236"></a>
<h4 class="sect3">ORANPR</h4>
<p>This integer field records the number of SQL statement parses required by your program.<a id="sthref1237"></a><a id="sthref1238"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCB566" class="sect3"><a id="sthref1239"></a>
<h4 class="sect3"><a id="sthref1240"></a>ORANEX</h4>
<p>This integer field records the number of SQL statement executions required by your program. The ratio of this number to the ORANPR number should be kept as high as possible. In other words, avoid unnecessary re-parsing. For help, see <a href="pcoadtun.htm#g26568">Appendix C, &#34;Performance Tuning&#34;</a>.<a id="sthref1241"></a><a id="sthref1242"></a></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCB567" class="sect2"><a id="sthref1243"></a>
<h3 class="sect2">ORACA Example Program</h3>
<p>The following program prompts for a department number, inserts the name and salary of each employee in that department into one of two tables, and then displays diagnostic information from the ORACA:<a id="sthref1244"></a></p>
<pre> IDENTIFICATION DIVISION.
 PROGRAM-ID. ORACAEX.
 ENVIRONMENT DIVISION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
     EXEC SQL INCLUDE SQLCA END-EXEC. 
     EXEC SQL INCLUDE ORACA END-EXEC. 

     EXEC ORACLE OPTION (ORACA=YES) END-EXEC. 

     EXEC SQL BEGIN DECLARE SECTION END-EXEC.
 01 USERNAME       PIC X(20).
 01 PASSWORD       PIC X(20).
 01 EMP-NAME       PIC X(10) VARYING.
 01 DEPT-NUMBER    PIC S9(4) COMP.
 01 SALARY         PIC S9(6)V99
                          DISPLAY SIGN LEADING SEPARATE.
     EXEC SQL END DECLARE SECTION END-EXEC.

 PROCEDURE DIVISION.
     DISPLAY &#34;Username? &#34; WITH NO ADVANCING. 
     ACCEPT USERNAME. 
     DISPLAY &#34;Password? &#34; WITH NO ADVANCING. 
     ACCEPT PASSWORD. 
     EXEC SQL
         WHENEVER SQLERROR GOTO SQL-ERROR
     END-EXEC. 
     EXEC SQL
         CONNECT :USERNAME IDENTIFIED BY :PASSWORD
     END-EXEC. 
     DISPLAY &#34;Connected to Oracle&#34;. 

* -- set flags in the ORACA 
* -- enable debug operations 
     MOVE 1 TO ORADBGF.
* -- enable cursor cache consistency check
     MOVE 1 TO ORACCHF.
* -- always save the SQL statement
     MOVE 3 TO ORASTXTF. 
     DISPLAY &#34;Department number? &#34; WITH NO ADVANCING. 
     ACCEPT DEPT-NUMBER. 
     EXEC SQL DECLARE EMPCURSOR CURSOR FOR 
         SELECT ENAME, SAL + NVL(COMM,0) 
         FROM EMP 
         WHERE DEPTNO = :DEPT-NUMBER
     END-EXEC. 
     EXEC SQL OPEN EMPCURSOR END-EXEC. 
     EXEC SQL
         WHENEVER NOT FOUND GOTO NO-MORE
     END-EXEC. 
 LOOP. 
     EXEC SQL 
         FETCH EMPCURSOR INTO :EMP-NAME, :SALARY 
     END-EXEC.
     IF SALARY &lt; 2500 
         EXEC SQL
             INSERT INTO PAY1 VALUES (:EMP-NAME, :SALARY)
         END-EXEC 
     ELSE 
         EXEC SQL
             INSERT INTO PAY2 VALUES (:EMP-NAME, :SALARY)
         END-EXEC 
     END-IF. 
     GO TO LOOP.

 NO-MORE.
     EXEC SQL CLOSE EMPCURSOR END-EXEC. 
     EXEC SQL WHENEVER SQLERROR CONTINUE END-EXEC. 
     EXEC SQL COMMIT WORK RELEASE END-EXEC. 
     DISPLAY &#34;(NO-MORE.) Last SQL statement: &#34;, ORASTXTC. 
     DISPLAY &#34;... at or near line number:  &#34;, ORASLNR. 
     DISPLAY  &#34; &#34;.
     DISPLAY &#34;          Cursor Cache Statistics&#34;. 
     DISPLAY &#34;-------------------------------------------&#34;. 
     DISPLAY &#34;Maximum value of MAXOPENCURSORS     &#34;, ORAHOC. 
     DISPLAY &#34;Maximum open cursors required:      &#34;, ORAMOC. 
     DISPLAY &#34;Current number of open cursors:     &#34;, ORACOC. 
     DISPLAY &#34;Number of cache reassignments:      &#34;, ORANOR. 
     DISPLAY &#34;Number of SQL statement parses:     &#34;, ORANPR. 
     DISPLAY &#34;Number of SQL statement executions: &#34;, ORANEX. 
     STOP RUN. 

 SQL-ERROR.
     EXEC SQL WHENEVER SQLERROR CONTINUE END-EXEC. 
     EXEC SQL ROLLBACK WORK RELEASE END-EXEC. 
     DISPLAY &#34;(SQL-ERROR.) Last SQL statement: &#34;, ORASTXTC. 
     DISPLAY &#34;... at or near line number:  &#34;, ORASLNR. 
     DISPLAY &#34; &#34;.
     DISPLAY &#34;          Cursor Cache Statistics&#34;. 
     DISPLAY &#34;-------------------------------------------&#34;. 
     DISPLAY &#34;MAXIMUM VALUE OF MAXOPENCURSORS     &#34;, ORAHOC. 
     DISPLAY &#34;Maximum open cursors required:      &#34;, ORAMOC. 
     DISPLAY &#34;Current number of open cursors:     &#34;, ORACOC. 
     DISPLAY &#34;Number of cache reassignments:      &#34;, ORANOR. 
     DISPLAY &#34;Number of SQL statement parses:     &#34;, ORANPR. 
     DISPLAY &#34;Number of SQL statement executions: &#34;, ORANEX. 
     STOP RUN.
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i16901"></a>
<div id="LNPCB568" class="sect1">
<h2 class="sect1">How Errors Map to SQLSTATE Codes</h2>
<p>The following table describes SQLSTATE the codes, what they signify, and the returned errors.</p>
<div id="LNPCB569" class="tblformal">
<p class="titleintable"><a id="sthref1245"></a><a id="CHDBBJAC"></a>Table 8-4 SQLSTATE Codes</p>
<table class="cellalignment4971" title="SQLSTATE Codes " summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t24"><span class="bold">Code</span></th>
<th class="cellalignment4972" id="r1c2-t24">Condition</th>
<th class="cellalignment4972" id="r1c3-t24">Oracle Error</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t24" headers="r1c1-t24">
<p>00000</p>
</td>
<td class="cellalignment4973" headers="r2c1-t24 r1c2-t24">
<p>successful completion</p>
</td>
<td class="cellalignment4973" headers="r2c1-t24 r1c3-t24">
<p>ORA-00000</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t24" headers="r1c1-t24">
<p>01000</p>
</td>
<td class="cellalignment4973" headers="r3c1-t24 r1c2-t24">
<p>warning</p>
</td>
<td class="cellalignment4973" headers="r3c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t24" headers="r1c1-t24">
<p>01001</p>
</td>
<td class="cellalignment4973" headers="r4c1-t24 r1c2-t24">
<p>cursor operation conflict</p>
</td>
<td class="cellalignment4973" headers="r4c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t24" headers="r1c1-t24">
<p>01002</p>
</td>
<td class="cellalignment4973" headers="r5c1-t24 r1c2-t24">
<p>disconnect error</p>
</td>
<td class="cellalignment4973" headers="r5c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t24" headers="r1c1-t24">
<p>01003</p>
</td>
<td class="cellalignment4973" headers="r6c1-t24 r1c2-t24">
<p>null value eliminated in set function</p>
</td>
<td class="cellalignment4973" headers="r6c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t24" headers="r1c1-t24">
<p>01004</p>
</td>
<td class="cellalignment4973" headers="r7c1-t24 r1c2-t24">
<p>string data - right truncation</p>
</td>
<td class="cellalignment4973" headers="r7c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t24" headers="r1c1-t24">
<p>01005</p>
</td>
<td class="cellalignment4973" headers="r8c1-t24 r1c2-t24">
<p>insufficient item descriptor areas</p>
</td>
<td class="cellalignment4973" headers="r8c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t24" headers="r1c1-t24">
<p>01006</p>
</td>
<td class="cellalignment4973" headers="r9c1-t24 r1c2-t24">
<p>privilege not revoked</p>
</td>
<td class="cellalignment4973" headers="r9c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t24" headers="r1c1-t24">
<p>01007</p>
</td>
<td class="cellalignment4973" headers="r10c1-t24 r1c2-t24">
<p>privilege not granted</p>
</td>
<td class="cellalignment4973" headers="r10c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t24" headers="r1c1-t24">
<p>01008</p>
</td>
<td class="cellalignment4973" headers="r11c1-t24 r1c2-t24">
<p>implicit zero-bit padding</p>
</td>
<td class="cellalignment4973" headers="r11c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t24" headers="r1c1-t24">
<p>01009</p>
</td>
<td class="cellalignment4973" headers="r12c1-t24 r1c2-t24">
<p>search condition too long for info schema</p>
</td>
<td class="cellalignment4973" headers="r12c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t24" headers="r1c1-t24">
<p>0100A</p>
</td>
<td class="cellalignment4973" headers="r13c1-t24 r1c2-t24">
<p>query expression too long for info schema</p>
</td>
<td class="cellalignment4973" headers="r13c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r14c1-t24" headers="r1c1-t24">
<p>02000</p>
</td>
<td class="cellalignment4973" headers="r14c1-t24 r1c2-t24">
<p>no data</p>
</td>
<td class="cellalignment4973" headers="r14c1-t24 r1c3-t24">
<p>ORA-01095</p>
<p>ORA-01403</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r15c1-t24" headers="r1c1-t24">
<p>07000</p>
</td>
<td class="cellalignment4973" headers="r15c1-t24 r1c2-t24">
<p>dynamic SQL error</p>
</td>
<td class="cellalignment4973" headers="r15c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r16c1-t24" headers="r1c1-t24">
<p>07001</p>
</td>
<td class="cellalignment4973" headers="r16c1-t24 r1c2-t24">
<p>using clause does not match parameter specs</p>
</td>
<td class="cellalignment4973" headers="r16c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r17c1-t24" headers="r1c1-t24">
<p>07002</p>
</td>
<td class="cellalignment4973" headers="r17c1-t24 r1c2-t24">
<p>using clause does not match target specs</p>
</td>
<td class="cellalignment4973" headers="r17c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r18c1-t24" headers="r1c1-t24">
<p>07003</p>
</td>
<td class="cellalignment4973" headers="r18c1-t24 r1c2-t24">
<p>cursor specification cannot be executed</p>
</td>
<td class="cellalignment4973" headers="r18c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r19c1-t24" headers="r1c1-t24">
<p>07004</p>
</td>
<td class="cellalignment4973" headers="r19c1-t24 r1c2-t24">
<p>using clause required for dynamic parameters</p>
</td>
<td class="cellalignment4973" headers="r19c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r20c1-t24" headers="r1c1-t24">
<p>07005</p>
</td>
<td class="cellalignment4973" headers="r20c1-t24 r1c2-t24">
<p>prepared statement not a cursor specification</p>
</td>
<td class="cellalignment4973" headers="r20c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r21c1-t24" headers="r1c1-t24">
<p>07006</p>
</td>
<td class="cellalignment4973" headers="r21c1-t24 r1c2-t24">
<p>restricted datatype attribute violation</p>
</td>
<td class="cellalignment4973" headers="r21c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r22c1-t24" headers="r1c1-t24">
<p>07007</p>
</td>
<td class="cellalignment4973" headers="r22c1-t24 r1c2-t24">
<p>using clause required for result fields</p>
</td>
<td class="cellalignment4973" headers="r22c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r23c1-t24" headers="r1c1-t24">
<p>07008</p>
</td>
<td class="cellalignment4973" headers="r23c1-t24 r1c2-t24">
<p>invalid descriptor count</p>
</td>
<td class="cellalignment4973" headers="r23c1-t24 r1c3-t24">
<p>SQL-02126</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r24c1-t24" headers="r1c1-t24">
<p>07009</p>
</td>
<td class="cellalignment4973" headers="r24c1-t24 r1c2-t24">
<p>invalid descriptor index</p>
</td>
<td class="cellalignment4973" headers="r24c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r25c1-t24" headers="r1c1-t24">
<p>08000</p>
</td>
<td class="cellalignment4973" headers="r25c1-t24 r1c2-t24">
<p>connection exception</p>
</td>
<td class="cellalignment4973" headers="r25c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r26c1-t24" headers="r1c1-t24">
<p>08001</p>
</td>
<td class="cellalignment4973" headers="r26c1-t24 r1c2-t24">
<p>SQL client unable to establish SQL connection</p>
</td>
<td class="cellalignment4973" headers="r26c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r27c1-t24" headers="r1c1-t24">
<p>08002</p>
</td>
<td class="cellalignment4973" headers="r27c1-t24 r1c2-t24">
<p>connection name in use</p>
</td>
<td class="cellalignment4973" headers="r27c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r28c1-t24" headers="r1c1-t24">
<p>08003</p>
</td>
<td class="cellalignment4973" headers="r28c1-t24 r1c2-t24">
<p>connection does not exist</p>
</td>
<td class="cellalignment4973" headers="r28c1-t24 r1c3-t24">
<p>SQL-02121</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r29c1-t24" headers="r1c1-t24">
<p>08004</p>
</td>
<td class="cellalignment4973" headers="r29c1-t24 r1c2-t24">
<p>SQL server rejected SQL connection</p>
</td>
<td class="cellalignment4973" headers="r29c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r30c1-t24" headers="r1c1-t24">
<p>08006</p>
</td>
<td class="cellalignment4973" headers="r30c1-t24 r1c2-t24">
<p>connection failure</p>
</td>
<td class="cellalignment4973" headers="r30c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r31c1-t24" headers="r1c1-t24">
<p>08007</p>
</td>
<td class="cellalignment4973" headers="r31c1-t24 r1c2-t24">
<p>transaction resolution unknown</p>
</td>
<td class="cellalignment4973" headers="r31c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r32c1-t24" headers="r1c1-t24">
<p>0A000</p>
</td>
<td class="cellalignment4973" headers="r32c1-t24 r1c2-t24">
<p>feature not supported</p>
</td>
<td class="cellalignment4973" headers="r32c1-t24 r1c3-t24">
<p>ORA-03000 .. 03099</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r33c1-t24" headers="r1c1-t24">
<p>0A001</p>
</td>
<td class="cellalignment4973" headers="r33c1-t24 r1c2-t24">
<p>multiple server transactions</p>
</td>
<td class="cellalignment4973" headers="r33c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r34c1-t24" headers="r1c1-t24">
<p>21000</p>
</td>
<td class="cellalignment4973" headers="r34c1-t24 r1c2-t24">
<p>cardinality violation</p>
</td>
<td class="cellalignment4973" headers="r34c1-t24 r1c3-t24">
<p>ORA-01427</p>
<p>SQL-02112</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r35c1-t24" headers="r1c1-t24">
<p>22000</p>
</td>
<td class="cellalignment4973" headers="r35c1-t24 r1c2-t24">
<p>data exception</p>
</td>
<td class="cellalignment4973" headers="r35c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r36c1-t24" headers="r1c1-t24">
<p>22001</p>
</td>
<td class="cellalignment4973" headers="r36c1-t24 r1c2-t24">
<p>string data - right truncation</p>
</td>
<td class="cellalignment4973" headers="r36c1-t24 r1c3-t24">
<p>ORA-01401</p>
<p>ORA-01406</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r37c1-t24" headers="r1c1-t24">
<p>22002</p>
</td>
<td class="cellalignment4973" headers="r37c1-t24 r1c2-t24">
<p>null value - no indicator parameter</p>
</td>
<td class="cellalignment4973" headers="r37c1-t24 r1c3-t24">
<p>ORA-01405</p>
<p>SQL-02124</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r38c1-t24" headers="r1c1-t24">
<p>22003</p>
</td>
<td class="cellalignment4973" headers="r38c1-t24 r1c2-t24">
<p>numeric value out of range</p>
</td>
<td class="cellalignment4973" headers="r38c1-t24 r1c3-t24">
<p>ORA-01426</p>
<p>ORA-01438</p>
<p>ORA-01455</p>
<p>ORA-01457</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r39c1-t24" headers="r1c1-t24">
<p>22005</p>
</td>
<td class="cellalignment4973" headers="r39c1-t24 r1c2-t24">
<p>error in assignment</p>
</td>
<td class="cellalignment4973" headers="r39c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r40c1-t24" headers="r1c1-t24">
<p>22007</p>
</td>
<td class="cellalignment4973" headers="r40c1-t24 r1c2-t24">
<p>invalid datetime format</p>
</td>
<td class="cellalignment4973" headers="r40c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r41c1-t24" headers="r1c1-t24">
<p>22008</p>
</td>
<td class="cellalignment4973" headers="r41c1-t24 r1c2-t24">
<p>datetime field overflow</p>
</td>
<td class="cellalignment4973" headers="r41c1-t24 r1c3-t24">
<p>ORA-01800 .. 01899</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r42c1-t24" headers="r1c1-t24">
<p>22009</p>
</td>
<td class="cellalignment4973" headers="r42c1-t24 r1c2-t24">
<p>invalid time zone displacement value</p>
</td>
<td class="cellalignment4973" headers="r42c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r43c1-t24" headers="r1c1-t24">
<p>22011</p>
</td>
<td class="cellalignment4973" headers="r43c1-t24 r1c2-t24">
<p>substring error</p>
</td>
<td class="cellalignment4973" headers="r43c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r44c1-t24" headers="r1c1-t24">
<p>22012</p>
</td>
<td class="cellalignment4973" headers="r44c1-t24 r1c2-t24">
<p>division by zero</p>
</td>
<td class="cellalignment4973" headers="r44c1-t24 r1c3-t24">
<p>ORA-01476</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r45c1-t24" headers="r1c1-t24">
<p>22015</p>
</td>
<td class="cellalignment4973" headers="r45c1-t24 r1c2-t24">
<p>interval field overflow</p>
</td>
<td class="cellalignment4973" headers="r45c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r46c1-t24" headers="r1c1-t24">
<p>22018</p>
</td>
<td class="cellalignment4973" headers="r46c1-t24 r1c2-t24">
<p>invalid character value for cast</p>
</td>
<td class="cellalignment4973" headers="r46c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r47c1-t24" headers="r1c1-t24">
<p>22019</p>
</td>
<td class="cellalignment4973" headers="r47c1-t24 r1c2-t24">
<p>invalid escape character</p>
</td>
<td class="cellalignment4973" headers="r47c1-t24 r1c3-t24">
<p>ORA-00911</p>
<p>ORA-01425</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r48c1-t24" headers="r1c1-t24">
<p>22021</p>
</td>
<td class="cellalignment4973" headers="r48c1-t24 r1c2-t24">
<p>character not in repertoire</p>
</td>
<td class="cellalignment4973" headers="r48c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r49c1-t24" headers="r1c1-t24">
<p>22022</p>
</td>
<td class="cellalignment4973" headers="r49c1-t24 r1c2-t24">
<p>indicator overflow</p>
</td>
<td class="cellalignment4973" headers="r49c1-t24 r1c3-t24">
<p>ORA-01411</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r50c1-t24" headers="r1c1-t24">
<p>22023</p>
</td>
<td class="cellalignment4973" headers="r50c1-t24 r1c2-t24">
<p>invalid parameter value</p>
</td>
<td class="cellalignment4973" headers="r50c1-t24 r1c3-t24">
<p>ORA-01025</p>
<p>ORA-01488</p>
<p>ORA-04000 .. 04019</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r51c1-t24" headers="r1c1-t24">
<p>22024</p>
</td>
<td class="cellalignment4973" headers="r51c1-t24 r1c2-t24">
<p>unterminated C string</p>
</td>
<td class="cellalignment4973" headers="r51c1-t24 r1c3-t24">
<p>ORA-01479 .. 01480</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r52c1-t24" headers="r1c1-t24">
<p>22025</p>
</td>
<td class="cellalignment4973" headers="r52c1-t24 r1c2-t24">
<p>invalid escape sequence</p>
</td>
<td class="cellalignment4973" headers="r52c1-t24 r1c3-t24">
<p>ORA-01424</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r53c1-t24" headers="r1c1-t24">
<p>22026</p>
</td>
<td class="cellalignment4973" headers="r53c1-t24 r1c2-t24">
<p>string data - length mismatch</p>
</td>
<td class="cellalignment4973" headers="r53c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r54c1-t24" headers="r1c1-t24">
<p>22027</p>
</td>
<td class="cellalignment4973" headers="r54c1-t24 r1c2-t24">
<p>trim error</p>
</td>
<td class="cellalignment4973" headers="r54c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r55c1-t24" headers="r1c1-t24">
<p>23000</p>
</td>
<td class="cellalignment4973" headers="r55c1-t24 r1c2-t24">
<p>integrity constraint violation</p>
</td>
<td class="cellalignment4973" headers="r55c1-t24 r1c3-t24">
<p>ORA-1400, ORA-00001</p>
<p>ORA-02290 .. 02299</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r56c1-t24" headers="r1c1-t24">
<p>24000</p>
</td>
<td class="cellalignment4973" headers="r56c1-t24 r1c2-t24">
<p>invalid cursor state</p>
</td>
<td class="cellalignment4973" headers="r56c1-t24 r1c3-t24">
<p>ORA-01001 .. 01003</p>
<p>ORA-01410</p>
<p>ORA-08006</p>
<p>SQL-02114</p>
<p>SQL-02117</p>
<p>SQL-02118</p>
<p>SQL-02122</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r57c1-t24" headers="r1c1-t24">
<p>25000</p>
</td>
<td class="cellalignment4973" headers="r57c1-t24 r1c2-t24">
<p>invalid transaction state</p>
</td>
<td class="cellalignment4973" headers="r57c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r58c1-t24" headers="r1c1-t24">
<p>26000</p>
</td>
<td class="cellalignment4973" headers="r58c1-t24 r1c2-t24">
<p>invalid SQL statement name</p>
</td>
<td class="cellalignment4973" headers="r58c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r59c1-t24" headers="r1c1-t24">
<p>27000</p>
</td>
<td class="cellalignment4973" headers="r59c1-t24 r1c2-t24">
<p>triggered data change violation</p>
</td>
<td class="cellalignment4973" headers="r59c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r60c1-t24" headers="r1c1-t24">
<p>28000</p>
</td>
<td class="cellalignment4973" headers="r60c1-t24 r1c2-t24">
<p>invalid authorization specification</p>
</td>
<td class="cellalignment4973" headers="r60c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r61c1-t24" headers="r1c1-t24">
<p>2A000</p>
</td>
<td class="cellalignment4973" headers="r61c1-t24 r1c2-t24">
<p>direct SQL syntax error or access rule violation</p>
</td>
<td class="cellalignment4973" headers="r61c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r62c1-t24" headers="r1c1-t24">
<p>2B000</p>
</td>
<td class="cellalignment4973" headers="r62c1-t24 r1c2-t24">
<p>dependent privilege descriptors still exist</p>
</td>
<td class="cellalignment4973" headers="r62c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r63c1-t24" headers="r1c1-t24">
<p>2C000</p>
</td>
<td class="cellalignment4973" headers="r63c1-t24 r1c2-t24">
<p>invalid character set name</p>
</td>
<td class="cellalignment4973" headers="r63c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r64c1-t24" headers="r1c1-t24">
<p>2D000</p>
</td>
<td class="cellalignment4973" headers="r64c1-t24 r1c2-t24">
<p>invalid transaction termination</p>
</td>
<td class="cellalignment4973" headers="r64c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r65c1-t24" headers="r1c1-t24">
<p>2E000</p>
</td>
<td class="cellalignment4973" headers="r65c1-t24 r1c2-t24">
<p>invalid connection name</p>
</td>
<td class="cellalignment4973" headers="r65c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r66c1-t24" headers="r1c1-t24">
<p>33000</p>
</td>
<td class="cellalignment4973" headers="r66c1-t24 r1c2-t24">
<p>invalid SQL descriptor name</p>
</td>
<td class="cellalignment4973" headers="r66c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r67c1-t24" headers="r1c1-t24">
<p>34000</p>
</td>
<td class="cellalignment4973" headers="r67c1-t24 r1c2-t24">
<p>invalid cursor name</p>
</td>
<td class="cellalignment4973" headers="r67c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r68c1-t24" headers="r1c1-t24">
<p>35000</p>
</td>
<td class="cellalignment4973" headers="r68c1-t24 r1c2-t24">
<p>invalid condition number</p>
</td>
<td class="cellalignment4973" headers="r68c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r69c1-t24" headers="r1c1-t24">
<p>37000</p>
</td>
<td class="cellalignment4973" headers="r69c1-t24 r1c2-t24">
<p>dynamic SQL syntax error or access rule violation</p>
</td>
<td class="cellalignment4973" headers="r69c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r70c1-t24" headers="r1c1-t24">
<p>3C000</p>
</td>
<td class="cellalignment4973" headers="r70c1-t24 r1c2-t24">
<p>ambiguous cursor name</p>
</td>
<td class="cellalignment4973" headers="r70c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r71c1-t24" headers="r1c1-t24">
<p>3D000</p>
</td>
<td class="cellalignment4973" headers="r71c1-t24 r1c2-t24">
<p>invalid catalog name</p>
</td>
<td class="cellalignment4973" headers="r71c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r72c1-t24" headers="r1c1-t24">
<p>3F000</p>
</td>
<td class="cellalignment4973" headers="r72c1-t24 r1c2-t24">
<p>invalid schema name</p>
</td>
<td class="cellalignment4973" headers="r72c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r73c1-t24" headers="r1c1-t24">
<p>40000</p>
</td>
<td class="cellalignment4973" headers="r73c1-t24 r1c2-t24">
<p>transaction rollback</p>
</td>
<td class="cellalignment4973" headers="r73c1-t24 r1c3-t24">
<p>ORA-02091 .. 02092</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r74c1-t24" headers="r1c1-t24">
<p>40001</p>
</td>
<td class="cellalignment4973" headers="r74c1-t24 r1c2-t24">
<p>serialization failure</p>
</td>
<td class="cellalignment4973" headers="r74c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r75c1-t24" headers="r1c1-t24">
<p>40002</p>
</td>
<td class="cellalignment4973" headers="r75c1-t24 r1c2-t24">
<p>integrity constraint violation</p>
</td>
<td class="cellalignment4973" headers="r75c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r76c1-t24" headers="r1c1-t24">
<p>40003</p>
</td>
<td class="cellalignment4973" headers="r76c1-t24 r1c2-t24">
<p>statement completion unknown</p>
</td>
<td class="cellalignment4973" headers="r76c1-t24 r1c3-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r77c1-t24" headers="r1c1-t24">
<p>42000</p>
</td>
<td class="cellalignment4973" headers="r77c1-t24 r1c2-t24">
<p>syntax error or access rule violation</p>
</td>
<td class="cellalignment4973" headers="r77c1-t24 r1c3-t24">
<p>ORA-00022</p>
<p>ORA-00251</p>
<p>ORA-00900 .. 00999</p>
<p>ORA-01031</p>
<p>ORA-01490 .. 01493</p>
<p>ORA-01700 .. 01799</p>
<p>ORA-01900 .. 02099</p>
<p>ORA-02140 .. 02289</p>
<p>ORA-02420 .. 02424</p>
<p>ORA-02450 .. 02499</p>
<p>ORA-03276 .. 03299</p>
<p>ORA-04040 .. 04059</p>
<p>ORA-04070 .. 04099</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r78c1-t24" headers="r1c1-t24">
<p>44000</p>
</td>
<td class="cellalignment4973" headers="r78c1-t24 r1c2-t24">
<p>with check option violation</p>
</td>
<td class="cellalignment4973" headers="r78c1-t24 r1c3-t24">
<p>ORA-01402</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r79c1-t24" headers="r1c1-t24">
<p>60000</p>
</td>
<td class="cellalignment4973" headers="r79c1-t24 r1c2-t24">
<p>system errors</p>
</td>
<td class="cellalignment4973" headers="r79c1-t24 r1c3-t24">
<p>ORA-00370 .. 00429</p>
<p>ORA-00600 .. 00899</p>
<p>ORA-06430 .. 06449</p>
<p>ORA-07200 .. 07999</p>
<p>ORA-09700 .. 09999</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r80c1-t24" headers="r1c1-t24">
<p>61000</p>
</td>
<td class="cellalignment4973" headers="r80c1-t24 r1c2-t24">
<p>resource error</p>
</td>
<td class="cellalignment4973" headers="r80c1-t24 r1c3-t24">
<p>ORA-00018 .. 00035</p>
<p>ORA-00050 .. 00068</p>
<p>ORA-02376 .. 02399</p>
<p>ORA-04020 .. 04039</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r81c1-t24" headers="r1c1-t24">
<p>62000</p>
</td>
<td class="cellalignment4973" headers="r81c1-t24 r1c2-t24">
<p>multithreaded server and detached process errors</p>
</td>
<td class="cellalignment4973" headers="r81c1-t24 r1c3-t24">
<p>ORA-00100 .. 00120</p>
<p>ORA-00440 .. 00569</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r82c1-t24" headers="r1c1-t24">
<p>63000</p>
</td>
<td class="cellalignment4973" headers="r82c1-t24 r1c2-t24">
<p>Oracle XA and two-task interface errors</p>
</td>
<td class="cellalignment4973" headers="r82c1-t24 r1c3-t24">
<p>ORA-00150 .. 00159</p>
<p>SQL-02128</p>
<p>ORA-02700 .. 02899</p>
<p>ORA-03100 .. 03199</p>
<p>ORA-06200 .. 06249 SQL-02128</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r83c1-t24" headers="r1c1-t24">
<p>64000</p>
</td>
<td class="cellalignment4973" headers="r83c1-t24 r1c2-t24">
<p>control file, database file, and redo file errors;</p>
<p>archival and media recovery errors</p>
</td>
<td class="cellalignment4973" headers="r83c1-t24 r1c3-t24">
<p>ORA-00200 .. 00369</p>
<p>ORA-01100 .. 01250</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r84c1-t24" headers="r1c1-t24">
<p>65000</p>
</td>
<td class="cellalignment4973" headers="r84c1-t24 r1c2-t24">
<p>PL/SQL errors</p>
</td>
<td class="cellalignment4973" headers="r84c1-t24 r1c3-t24">
<p>ORA-06500 .. 06599</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r85c1-t24" headers="r1c1-t24">
<p>66000</p>
</td>
<td class="cellalignment4973" headers="r85c1-t24 r1c2-t24">
<p>Oracle Net Services driver errors</p>
</td>
<td class="cellalignment4973" headers="r85c1-t24 r1c3-t24">
<p>ORA-06000 .. 06149</p>
<p>ORA-06250 .. 06429</p>
<p>ORA-06600 .. 06999</p>
<p>ORA-12100 .. 12299</p>
<p>ORA-12500 .. 12599</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r86c1-t24" headers="r1c1-t24">
<p>67000</p>
</td>
<td class="cellalignment4973" headers="r86c1-t24 r1c2-t24">
<p>licensing errors</p>
</td>
<td class="cellalignment4973" headers="r86c1-t24 r1c3-t24">
<p>ORA-00430 .. 00439</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r87c1-t24" headers="r1c1-t24">
<p>69000</p>
</td>
<td class="cellalignment4973" headers="r87c1-t24 r1c2-t24">
<p>SQL*Connect errors</p>
</td>
<td class="cellalignment4973" headers="r87c1-t24 r1c3-t24">
<p>ORA-00570 .. 00599</p>
<p>ORA-07000 .. 07199</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r88c1-t24" headers="r1c1-t24">
<p>72000</p>
</td>
<td class="cellalignment4973" headers="r88c1-t24 r1c2-t24">
<p>SQL execute phase errors</p>
</td>
<td class="cellalignment4973" headers="r88c1-t24 r1c3-t24">
<p>ORA-01000 .. 01099</p>
<p>ORA-01401 .. 01489</p>
<p>ORA-01495 .. 01499</p>
<p>ORA-01500 .. 01699</p>
<p>ORA-02400 .. 02419</p>
<p>ORA-02425 .. 02449</p>
<p>ORA-04060 .. 04069</p>
<p>ORA-08000 .. 08190</p>
<p>ORA-12000 .. 12019</p>
<p>ORA-12300 .. 12499</p>
<p>ORA-12700 .. 21999</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r89c1-t24" headers="r1c1-t24">
<p>82100</p>
</td>
<td class="cellalignment4973" headers="r89c1-t24 r1c2-t24">
<p>out of memory (could not allocate)</p>
</td>
<td class="cellalignment4973" headers="r89c1-t24 r1c3-t24">
<p>SQL-02100</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r90c1-t24" headers="r1c1-t24">
<p>82101</p>
</td>
<td class="cellalignment4973" headers="r90c1-t24 r1c2-t24">
<p>inconsistent cursor cache: unit cursor/global cursor mismatch</p>
</td>
<td class="cellalignment4973" headers="r90c1-t24 r1c3-t24">
<p>SQL-02101</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r91c1-t24" headers="r1c1-t24">
<p>82102</p>
</td>
<td class="cellalignment4973" headers="r91c1-t24 r1c2-t24">
<p>inconsistent cursor cache: no global cursor entry</p>
</td>
<td class="cellalignment4973" headers="r91c1-t24 r1c3-t24">
<p>SQL-02102</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r92c1-t24" headers="r1c1-t24">
<p>82103</p>
</td>
<td class="cellalignment4973" headers="r92c1-t24 r1c2-t24">
<p>inconsistent cursor cache: out of range cursor cache reference</p>
</td>
<td class="cellalignment4973" headers="r92c1-t24 r1c3-t24">
<p>SQL-02103</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r93c1-t24" headers="r1c1-t24">
<p>82104</p>
</td>
<td class="cellalignment4973" headers="r93c1-t24 r1c2-t24">
<p>inconsistent host cache: no cursor cache available</p>
</td>
<td class="cellalignment4973" headers="r93c1-t24 r1c3-t24">
<p>SQL-02104</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r94c1-t24" headers="r1c1-t24">
<p>82105</p>
</td>
<td class="cellalignment4973" headers="r94c1-t24 r1c2-t24">
<p>inconsistent cursor cache: global cursor not found</p>
</td>
<td class="cellalignment4973" headers="r94c1-t24 r1c3-t24">
<p>SQL-02105</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r95c1-t24" headers="r1c1-t24">
<p>82106</p>
</td>
<td class="cellalignment4973" headers="r95c1-t24 r1c2-t24">
<p>inconsistent cursor cache: invalid cursor number</p>
</td>
<td class="cellalignment4973" headers="r95c1-t24 r1c3-t24">
<p>SQL-02106</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r96c1-t24" headers="r1c1-t24">
<p>82107</p>
</td>
<td class="cellalignment4973" headers="r96c1-t24 r1c2-t24">
<p>program too old for runtime library</p>
</td>
<td class="cellalignment4973" headers="r96c1-t24 r1c3-t24">
<p>SQL-02107</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r97c1-t24" headers="r1c1-t24">
<p>82108</p>
</td>
<td class="cellalignment4973" headers="r97c1-t24 r1c2-t24">
<p>invalid descriptor passed to runtime library</p>
</td>
<td class="cellalignment4973" headers="r97c1-t24 r1c3-t24">
<p>SQL-02108</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r98c1-t24" headers="r1c1-t24">
<p>82109</p>
</td>
<td class="cellalignment4973" headers="r98c1-t24 r1c2-t24">
<p>inconsistent host cache: host reference is out of range</p>
</td>
<td class="cellalignment4973" headers="r98c1-t24 r1c3-t24">
<p>SQL-02109</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r99c1-t24" headers="r1c1-t24">
<p>82110</p>
</td>
<td class="cellalignment4973" headers="r99c1-t24 r1c2-t24">
<p>inconsistent host cache: invalid host cache entry type</p>
</td>
<td class="cellalignment4973" headers="r99c1-t24 r1c3-t24">
<p>SQL-02110</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r100c1-t24" headers="r1c1-t24">
<p>82111</p>
</td>
<td class="cellalignment4973" headers="r100c1-t24 r1c2-t24">
<p>heap consistency error</p>
</td>
<td class="cellalignment4973" headers="r100c1-t24 r1c3-t24">
<p>SQL-02111</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r101c1-t24" headers="r1c1-t24">
<p>82112</p>
</td>
<td class="cellalignment4973" headers="r101c1-t24 r1c2-t24">
<p>unable to open message file</p>
</td>
<td class="cellalignment4973" headers="r101c1-t24 r1c3-t24">
<p>SQL-02113</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r102c1-t24" headers="r1c1-t24">
<p>82113</p>
</td>
<td class="cellalignment4973" headers="r102c1-t24 r1c2-t24">
<p>code generation internal consistency failed</p>
</td>
<td class="cellalignment4973" headers="r102c1-t24 r1c3-t24">
<p>SQL-02115</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r103c1-t24" headers="r1c1-t24">
<p>82114</p>
</td>
<td class="cellalignment4973" headers="r103c1-t24 r1c2-t24">
<p>reentrant code generator gave invalid context</p>
</td>
<td class="cellalignment4973" headers="r103c1-t24 r1c3-t24">
<p>SQL-02116</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r104c1-t24" headers="r1c1-t24">
<p>82115</p>
</td>
<td class="cellalignment4973" headers="r104c1-t24 r1c2-t24">
<p>invalid hstdef argument</p>
</td>
<td class="cellalignment4973" headers="r104c1-t24 r1c3-t24">
<p>SQL-02119</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r105c1-t24" headers="r1c1-t24">
<p>82116</p>
</td>
<td class="cellalignment4973" headers="r105c1-t24 r1c2-t24">
<p>first and second arguments to sqlrcn both null</p>
</td>
<td class="cellalignment4973" headers="r105c1-t24 r1c3-t24">
<p>SQL-02120</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r106c1-t24" headers="r1c1-t24">
<p>82117</p>
</td>
<td class="cellalignment4973" headers="r106c1-t24 r1c2-t24">
<p>invalid OPEN or PREPARE for this connection</p>
</td>
<td class="cellalignment4973" headers="r106c1-t24 r1c3-t24">
<p>SQL-02122</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r107c1-t24" headers="r1c1-t24">
<p>82118</p>
</td>
<td class="cellalignment4973" headers="r107c1-t24 r1c2-t24">
<p>application context not found</p>
</td>
<td class="cellalignment4973" headers="r107c1-t24 r1c3-t24">
<p>SQL-02123</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r108c1-t24" headers="r1c1-t24">
<p>82119</p>
</td>
<td class="cellalignment4973" headers="r108c1-t24 r1c2-t24">
<p>connect error; can&#39;t get error text</p>
</td>
<td class="cellalignment4973" headers="r108c1-t24 r1c3-t24">
<p>SQL-02125</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r109c1-t24" headers="r1c1-t24">
<p>82120</p>
</td>
<td class="cellalignment4973" headers="r109c1-t24 r1c2-t24">
<p>precompiler/SQLLIB version mismatch.</p>
</td>
<td class="cellalignment4973" headers="r109c1-t24 r1c3-t24">
<p>SQL-02127</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r110c1-t24" headers="r1c1-t24">
<p>82121</p>
</td>
<td class="cellalignment4973" headers="r110c1-t24 r1c2-t24">
<p>FETCHed number of bytes is odd</p>
</td>
<td class="cellalignment4973" headers="r110c1-t24 r1c3-t24">
<p>SQL-02129</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r111c1-t24" headers="r1c1-t24">
<p>82122</p>
</td>
<td class="cellalignment4973" headers="r111c1-t24 r1c2-t24">
<p>EXEC TOOLS interface is not available</p>
</td>
<td class="cellalignment4973" headers="r111c1-t24 r1c3-t24">
<p>SQL-02130</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r112c1-t24" headers="r1c1-t24">
<p>82123</p>
</td>
<td class="cellalignment4973" headers="r112c1-t24 r1c2-t24">
<p>runtime context in use</p>
</td>
<td class="cellalignment4973" headers="r112c1-t24 r1c3-t24">
<p>SQL-02131</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r113c1-t24" headers="r1c1-t24">
<p>82124</p>
</td>
<td class="cellalignment4973" headers="r113c1-t24 r1c2-t24">
<p>unable to allocate runtime context</p>
</td>
<td class="cellalignment4973" headers="r113c1-t24 r1c3-t24">
<p>SQL-02131</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r114c1-t24" headers="r1c1-t24">
<p>82125</p>
</td>
<td class="cellalignment4973" headers="r114c1-t24 r1c2-t24">
<p>unable to initialize process for use with threads</p>
</td>
<td class="cellalignment4973" headers="r114c1-t24 r1c3-t24">
<p>SQL-02133</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r115c1-t24" headers="r1c1-t24">
<p>82126</p>
</td>
<td class="cellalignment4973" headers="r115c1-t24 r1c2-t24">
<p>invalid runtime context</p>
</td>
<td class="cellalignment4973" headers="r115c1-t24 r1c3-t24">
<p>SQL-02134</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r116c1-t24" headers="r1c1-t24">
<p>90000</p>
</td>
<td class="cellalignment4973" headers="r116c1-t24 r1c2-t24">
<p>debug events</p>
</td>
<td class="cellalignment4973" headers="r116c1-t24 r1c3-t24">
<p>ORA-10000 .. 10999</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r117c1-t24" headers="r1c1-t24">
<p>99999</p>
</td>
<td class="cellalignment4973" headers="r117c1-t24 r1c2-t24">
<p>catch all</p>
</td>
<td class="cellalignment4973" headers="r117c1-t24 r1c3-t24">
<p>all others</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r118c1-t24" headers="r1c1-t24">
<p>HZ000</p>
</td>
<td class="cellalignment4973" headers="r118c1-t24 r1c2-t24">
<p>remote database access</p>
</td>
<td class="cellalignment4973" headers="r118c1-t24 r1c3-t24">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<a id="i17446"></a>
<div id="LNPCB570" class="sect2">
<h3 class="sect2">Status Variable Combinations</h3>
<p>When MODE={ANSI | ANSI14}, the behavior of the status variables depends on the following:</p>
<ul>
<li>
<p>Which variables are declared.</p>
</li>
<li>
<p>Declaration placement (<span class="italic">inside</span> or <span class="italic">outside</span> the Declare Section).</p>
</li>
<li>
<p>The ASSUME_SQLCODE setting.</p>
</li>
</ul>
<p><a href="#g48624">Table 8-5</a> and <a href="#g49487">Table 8-6</a> describe the resulting behavior of each status variable combination when ASSUME_SQLCODE=NO and when ASSUME_SQLCODE=YES, respectively.</p>
<p>For both Tables: when DECLARE_SECTION=NO, any declaration of a status variable is treated as IN as far as these tables are concerned.</p>
<p>Do not use ASSUME_SQLCODE=YES with DECLARE_SECTION=NO.</p>
<div id="LNPCB571" class="tblformalwide">
<p class="titleintable"><a id="sthref1246"></a><a id="g48624"></a>Table 8-5 Status Variable Behavior with ASSUME_SQLCODE=NO and MODE=ANSI | ANSI14 and DECLARE_SECTION=YES</p>
<table class="cellalignment4974" title="Status Variable Behavior with ASSUME_SQLCODE=NO and MODE=ANSI | ANSI14 and DECLARE_SECTION=YES " summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t25">Declare Section</th>
<th class="cellalignment4972" id="r1c2-t25">(IN/OUT------</th>
<th class="cellalignment4972" id="r1c3-t25">)</th>
<th class="cellalignment4972" id="r1c4-t25">Behavior</th>
</tr>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r2c1-t25" headers="r1c1-t25">SQLCODE</th>
<th class="cellalignment4972" id="r2c2-t25" headers="r2c1-t25 r1c2-t25">SQLSTATE</th>
<th class="cellalignment4972" id="r2c3-t25" headers="r2c1-t25 r1c3-t25">SQLCA</th>
<th class="cellalignment4972" id="r2c4-t25" headers="r2c1-t25 r1c4-t25">-</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r3c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r3c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r3c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCODE is declared and is presumed to be a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r4c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r4c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r4c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r5c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r5c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r5c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r6c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r6c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r6c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCODE is declared and is presumed to be a status variable, and SQLSTATE is declared but is not recognized as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r7c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r7c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r7c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r8c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r8c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r8c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r9c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r9c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r9c1-t25 r1c4-t25 r2c4-t25">
<p>SQLSTATE is declared as a status variable, and SQLCODE is declared but is not recognized as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r10c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r10c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r10c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t25" headers="r1c1-t25 r2c1-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r11c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r11c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r11c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r12c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r12c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r12c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCODE is declared as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r13c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r13c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r13c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r14c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r14c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r14c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r14c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r15c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r15c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r15c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r15c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCODE is declared as a status variable, and SQLSTATE is declared but is not recognized as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r16c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r16c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r16c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r16c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r17c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r17c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r17c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r17c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r18c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r18c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r18c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r18c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCODE and SQLSTATE are declared as a status variables.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r19c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r19c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r19c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r19c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r20c1-t25" headers="r1c1-t25 r2c1-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r20c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r20c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r20c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r21c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r21c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r21c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r21c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r22c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r22c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r22c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r22c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCA is declared as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r23c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r23c1-t25 r1c2-t25 r2c2-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r23c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r23c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCA is declared as a status host variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r24c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r24c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r24c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r24c1-t25 r1c4-t25 r2c4-t25">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r25c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r25c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r25c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r25c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCA is declared as a status variable, and SQLSTATE is declared but is not recognized as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r26c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r26c1-t25 r1c2-t25 r2c2-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r26c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r26c1-t25 r1c4-t25 r2c4-t25">
<p>SQLCA is declared as a status host variable, and SQLSTATE is declared but is not recognized as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r27c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r27c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r27c1-t25 r1c3-t25 r2c3-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r27c1-t25 r1c4-t25 r2c4-t25">
<p>SQLSTATE is declared as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r28c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r28c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r28c1-t25 r1c3-t25 r2c3-t25">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r28c1-t25 r1c4-t25 r2c4-t25">
<p>SQLSTATE and SQLCA are declared as status variables.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r29c1-t25" headers="r1c1-t25 r2c1-t25">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r29c1-t25 r1c2-t25 r2c2-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r29c1-t25 r1c3-t25 r2c3-t25">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r29c1-t25 r1c4-t25 r2c4-t25">
<p>SQLSTATE and SQLCA are declared as status host variables.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" -->
<div id="LNPCB572" class="tblformalwide">
<p class="titleintable"><a id="sthref1247"></a><a id="g49487"></a>Table 8-6 Status Variable Behavior with ASSUME_SQLCODE=YES and MODE=ANSI | ANSI14 and DECLARE_SECTION=YES</p>
<table class="cellalignment4974" title="Status Variable Behavior with ASSUME_SQLCODE=YES and MODE=ANSI | ANSI14 and DECLARE_SECTION=YES " summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t26" colspan="3">Declare Section (IN/OUT/&thinsp;&mdash;)</th>
<th class="cellalignment4972" id="r1c2-t26">Behavior</th>
</tr>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r2c1-t26" headers="r1c1-t26">SQLCODE</th>
<th class="cellalignment4972" id="r2c2-t26" headers="r2c1-t26 r1c1-t26 r1c2-t26">SQLSTATE</th>
<th class="cellalignment4972" id="r2c3-t26" headers="r2c1-t26 r1c1-t26">SQLCA</th>
<th class="cellalignment4972" id="r2c4-t26" headers="r2c1-t26"><br/></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r3c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r3c1-t26 r1c1-t26 r2c3-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r3c1-t26 r2c4-t26">
<p>SQLCODE is declared and is presumed to be a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r4c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r4c1-t26 r1c1-t26 r2c3-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r4c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r5c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r5c1-t26 r1c1-t26 r2c3-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r5c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r6c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r6c1-t26 r1c1-t26 r2c3-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r6c1-t26 r2c4-t26">
<p>SQLCODE is declared and is presumed to be a status variable, and SQLSTATE is declared but is not recognized as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r7c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r7c1-t26 r1c1-t26 r2c3-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r7c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r8c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r8c1-t26 r1c1-t26 r2c3-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r8c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r9c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r9c1-t26 r1c1-t26 r2c3-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r9c1-t26 r2c4-t26">
<p>SQLSTATE is declared as a status variable, and SQLCODE is declared and is presumed to be a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r10c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r10c1-t26 r1c1-t26 r2c3-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r10c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t26" headers="r1c1-t26 r2c1-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r11c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r11c1-t26 r1c1-t26 r2c3-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r11c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r12c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r12c1-t26 r1c1-t26 r2c3-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r12c1-t26 r2c4-t26">
<p>SQLCODE is declared as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r13c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r13c1-t26 r1c1-t26 r2c3-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r13c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r14c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r14c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r14c1-t26 r1c1-t26 r2c3-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r14c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r15c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r15c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r15c1-t26 r1c1-t26 r2c3-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r15c1-t26 r2c4-t26">
<p>SQLCODE is declared as a status variable, and SQLSTATE is declared but not as a status variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r16c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r16c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r16c1-t26 r1c1-t26 r2c3-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r16c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r17c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r17c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r17c1-t26 r1c1-t26 r2c3-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r17c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r18c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r18c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r18c1-t26 r1c1-t26 r2c3-t26">
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r18c1-t26 r2c4-t26">
<p>SQLCODE and SQLSTATE are declared as a status variables.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r19c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r19c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r19c1-t26 r1c1-t26 r2c3-t26">
<p>OUT</p>
</td>
<td class="cellalignment4973" headers="r19c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r20c1-t26" headers="r1c1-t26 r2c1-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r20c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r20c1-t26 r1c1-t26 r2c3-t26">
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r20c1-t26 r2c4-t26">
<p>This status variable configuration is not supported.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r21c1-t26" headers="r1c1-t26 r2c1-t26">
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
</td>
<td class="cellalignment4973" headers="r21c1-t26 r1c1-t26 r1c2-t26 r2c2-t26">
<p>&mdash;</p>
<p>&mdash;</p>
<p>&mdash;</p>
<p>OUT</p>
<p>OUT</p>
<p>OUT</p>
<p>IN</p>
<p>IN</p>
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r21c1-t26 r1c1-t26 r2c3-t26">
<p>&mdash;</p>
<p>OUT</p>
<p>IN</p>
<p>&mdash;</p>
<p>OUT</p>
<p>IN</p>
<p>&mdash;</p>
<p>OUT</p>
<p>IN</p>
</td>
<td class="cellalignment4973" headers="r21c1-t26 r2c4-t26">
<p>These status variable configurations are not supported. SQLCODE must be declared when ASSUME_SQLCODE=YES.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4964">
<tr>
<td class="cellalignment4973">
<table class="cellalignment4969">
<tr>
<td class="cellalignment4968"><a href="pco07tab.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4968"><a href="pco09dyn.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4976">
<table class="cellalignment4967">
<tr>
<td class="cellalignment4968"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4968"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4968"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4968"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4968"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4968"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>