<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-77870"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Embedded%20SQL%20Statements%20and%20Precompiler%20Directives"></a><title>Embedded SQL Statements and Precompiler Directives</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T20:23:31Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Pro*COBOL&reg; Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53282-01"/>
<meta name="dcterms.isVersionOf" content="LNPCB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="pcoaechk.htm" title="Previous" type="text/html"/>
<link rel="Next" href="pcoawin.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53282-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/27</span> <!-- End Header -->
<div id="LNPCB020" class="appendix"><a id="g65199"></a> <a id="i24929"></a>
<h1 class="appendix"><span class="secnum">E</span> Embedded SQL Statements and Precompiler Directives</h1>
<p>This appendix describes Oracle embedded SQL statements and directives. These statements and directives are prefaced in your source code with the keywords, EXEC SQL.</p>
<p>Note: Only statements which differ in syntax from non-embedded SQL are described in this appendix. For details of the non-embedded SQL statements, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></p>
<p>This appendix contains the following sections:</p>
<ul>
<li>
<p><a href="#i13518">Summary of Precompiler Directives and Embedded SQL Statements</a></p>
</li>
<li>
<p><a href="#i44167">About the Statement Descriptions</a></p>
</li>
<li>
<p><a href="#i13528">How to Read Syntax Diagrams</a></p>
</li>
<li>
<p><a href="#i16241">ALLOCATE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i18519">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i24775">CALL (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12818">COMMIT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12848">CONNECT (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i18514">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i18524">CONTEXT FREE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i18529">CONTEXT USE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#i12826">DECLARE STATEMENT (Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#i13566">DECLARE TABLE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#i12827">DELETE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i13581">DESCRIBE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i18533">DESCRIBE DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i26109">ENABLE THREADS (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i13589">EXECUTE ... END-EXEC (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i12797">EXECUTE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i21036">EXECUTE DESCRIPTOR (Executable Embedded SQL</a></p>
</li>
<li>
<p><a href="#i12849">EXECUTE IMMEDIATE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12800">FETCH (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i20706">FETCH DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i24648">FREE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i18535">GET DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i18354">INSERT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i21397">LOB APPEND (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17359">LOB ASSIGN (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17380">LOB CLOSE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17401">LOB COPY (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17422">LOB CREATE TEMPORARY (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17443">LOB DESCRIBE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17468">LOB DISABLE BUFFERING (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17489">LOB ENABLE BUFFERING (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17510">LOB ERASE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17531">LOB FILE CLOSE ALL (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17552">LOB FILE SET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17573">LOB FLUSH BUFFER (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17594">LOB FREE TEMPORARY (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17615">LOB LOAD (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17637">LOB OPEN (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17658">LOB READ (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17679">LOB TRIM (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i17700">LOB WRITE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#i12809">OPEN (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i21046">OPEN DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12812">ROLLBACK (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12813">SAVEPOINT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i18540">SET DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12828">SELECT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12829">UPDATE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#i12996">VAR (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#i13647">WHENEVER (Embedded SQL Directive)</a></p>
</li>
</ul>
<a id="i13518"></a>
<div id="LNPCB1341" class="sect1">
<h2 class="sect1">Summary of Precompiler Directives and Embedded SQL Statements<a id="sthref2009"></a><a id="sthref2010"></a> <a id="sthref2011"></a></h2>
<p>Embedded SQL statements place DDL, DML, and Transaction Control statements within a procedural language program. Embedded SQL is supported by the Oracle Precompilers. <a href="#g50953">Table E-2</a> provides a functional summary of the embedded SQL statements and directives.</p>
<p>The <span class="italic">Source/Type</span> column in <a href="#g50953">Table E-2</a> is displayed in the format <span class="italic">source/type</span> where:</p>
<div id="LNPCB1342" class="tblformalwidemax">
<p class="titleintable"><a id="sthref2012"></a><a id="sthref2013"></a>Table E-1 Source/Type Column Meaning</p>
<table class="cellalignment4974" title="Source/Type Column Meaning" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t2">SQL Statements</th>
<th class="cellalignment4972" id="r1c2-t2">Directives</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t2" headers="r1c1-t2">
<p><span class="italic">source</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t2 r1c2-t2">
<p>Is either standard SQL (S) or an Oracle extension (O).</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t2" headers="r1c1-t2">
<p><span class="italic">type</span></p>
</td>
<td class="cellalignment4973" headers="r3c1-t2 r1c2-t2">
<p>Is either an executable (E) statement or a directive (D).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwidemax" -->
<div id="LNPCB1343" class="tblformalwidemax">
<p class="titleintable"><a id="sthref2014"></a><a id="g50953"></a>Table E-2 Precompiler Directives and Embedded SQL Statements and Clauses</p>
<table class="cellalignment4974" title=" Precompiler Directives and Embedded SQL Statements and Clauses " summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t3">EXEC SQL Statement</th>
<th class="cellalignment4972" id="r1c2-t3">Source/Type</th>
<th class="cellalignment4972" id="r1c3-t3">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t3" headers="r1c1-t3">
<p>ALLOCATE</p>
</td>
<td class="cellalignment4973" headers="r2c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r2c1-t3 r1c3-t3">
<p>To allocate memory for a cursor variable, LOB locator or ROWID.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t3" headers="r1c1-t3">
<p>ALLOCATE DESCRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r3c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r3c1-t3 r1c3-t3">
<p>To allocate a descriptor for ANSI dynamic SQL.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t3" headers="r1c1-t3">
<p>CALL</p>
</td>
<td class="cellalignment4973" headers="r4c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r4c1-t3 r1c3-t3">
<p>Call a stored procedure.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t3" headers="r1c1-t3">
<p>CLOSE</p>
</td>
<td class="cellalignment4973" headers="r5c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r5c1-t3 r1c3-t3">
<p>To disable a cursor.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t3" headers="r1c1-t3">
<p>COMMIT</p>
</td>
<td class="cellalignment4973" headers="r6c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r6c1-t3 r1c3-t3">
<p>To make all database changes permanent.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t3" headers="r1c1-t3">
<p>CONNECT</p>
</td>
<td class="cellalignment4973" headers="r7c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r7c1-t3 r1c3-t3">
<p>To log on to a database instance.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t3" headers="r1c1-t3">
<p>CONTEXT ALLOCATE</p>
</td>
<td class="cellalignment4973" headers="r8c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r8c1-t3 r1c3-t3">
<p>To allocate memory for a SQLLIB runtime context.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t3" headers="r1c1-t3">
<p>CONTEXT FREE</p>
</td>
<td class="cellalignment4973" headers="r9c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r9c1-t3 r1c3-t3">
<p>To free memory for a SQLLIB runtime context.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t3" headers="r1c1-t3">
<p>CONTEXT USE</p>
</td>
<td class="cellalignment4973" headers="r10c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r10c1-t3 r1c3-t3">
<p>To specify a SQLLIB runtime context.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t3" headers="r1c1-t3">
<p>DEALLOCATE DESCRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r11c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r11c1-t3 r1c3-t3">
<p>To deallocate a descriptor area to free memory.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t3" headers="r1c1-t3">
<p>DECLARE CURSOR</p>
</td>
<td class="cellalignment4973" headers="r12c1-t3 r1c2-t3">
<p>S/D</p>
</td>
<td class="cellalignment4973" headers="r12c1-t3 r1c3-t3">
<p>To declare a cursor, associating it with a query.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t3" headers="r1c1-t3">
<p>DECLARE DATABASE</p>
</td>
<td class="cellalignment4973" headers="r13c1-t3 r1c2-t3">
<p>O/D</p>
</td>
<td class="cellalignment4973" headers="r13c1-t3 r1c3-t3">
<p>To declare an identifier for a nondefault database to be accessed in subsequent embedded SQL statements.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r14c1-t3" headers="r1c1-t3">
<p>DECLARE STATEMENT</p>
</td>
<td class="cellalignment4973" headers="r14c1-t3 r1c2-t3">
<p>S/D</p>
</td>
<td class="cellalignment4973" headers="r14c1-t3 r1c3-t3">
<p>To assign a SQL variable name to a SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r15c1-t3" headers="r1c1-t3">
<p>DECLARE TABLE</p>
</td>
<td class="cellalignment4973" headers="r15c1-t3 r1c2-t3">
<p>O/D</p>
</td>
<td class="cellalignment4973" headers="r15c1-t3 r1c3-t3">
<p>To declare the table structure for semantic checking of embedded SQL statements by the Oracle Precompiler.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r16c1-t3" headers="r1c1-t3">
<p>DELETE</p>
</td>
<td class="cellalignment4973" headers="r16c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r16c1-t3 r1c3-t3">
<p>To remove rows from a table or from a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r17c1-t3" headers="r1c1-t3">
<p>DESCRIBE</p>
</td>
<td class="cellalignment4973" headers="r17c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r17c1-t3 r1c3-t3">
<p>To initialize a descriptor, a structure holding host variable descriptions.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r18c1-t3" headers="r1c1-t3">
<p>DESCRIBE DECRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r18c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r18c1-t3 r1c3-t3">
<p>To obtain information about an ANSI SQL statement, and store it in a descriptor.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r19c1-t3" headers="r1c1-t3">
<p>ENABLE THREADS</p>
</td>
<td class="cellalignment4973" headers="r19c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r19c1-t3 r1c3-t3">
<p>To initialize a process that supports multiple threads.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r20c1-t3" headers="r1c1-t3">
<p>EXECUTE...END-EXEC</p>
</td>
<td class="cellalignment4973" headers="r20c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r20c1-t3 r1c3-t3">
<p>To execute an anonymous PL/SQL block.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r21c1-t3" headers="r1c1-t3">
<p>EXECUTE</p>
</td>
<td class="cellalignment4973" headers="r21c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r21c1-t3 r1c3-t3">
<p>To execute a prepared dynamic SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r22c1-t3" headers="r1c1-t3">
<p>EXECUTE DESCRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r22c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r22c1-t3 r1c3-t3">
<p>To execute a prepared statement using ANSI Dynamic SQL.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r23c1-t3" headers="r1c1-t3">
<p>EXECUTE IMMEDIATE</p>
</td>
<td class="cellalignment4973" headers="r23c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r23c1-t3 r1c3-t3">
<p>To prepare and execute a SQL statement with no host variables.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r24c1-t3" headers="r1c1-t3">
<p>FETCH</p>
</td>
<td class="cellalignment4973" headers="r24c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r24c1-t3 r1c3-t3">
<p>To retrieve rows selected by a query.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r25c1-t3" headers="r1c1-t3">
<p>FETCH DESCRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r25c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r25c1-t3 r1c3-t3">
<p>To retrieve rows selected by a query using ANSI Dynamic SQL.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r26c1-t3" headers="r1c1-t3">
<p>FREE</p>
</td>
<td class="cellalignment4973" headers="r26c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r26c1-t3 r1c3-t3">
<p>To free memory used by a cursor, LOB locator, or ROWID.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r27c1-t3" headers="r1c1-t3">
<p>GET DESCRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r27c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r27c1-t3 r1c3-t3">
<p>To move information from an ANSI SQL descriptor area into host variables.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r28c1-t3" headers="r1c1-t3">
<p>INSERT</p>
</td>
<td class="cellalignment4973" headers="r28c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r28c1-t3 r1c3-t3">
<p>To add rows to a table or to a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r29c1-t3" headers="r1c1-t3">
<p>LOB APPEND</p>
</td>
<td class="cellalignment4973" headers="r29c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r29c1-t3 r1c3-t3">
<p>To append a LOB to the end of another lOB.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r30c1-t3" headers="r1c1-t3">
<p>LOB ASSIGN</p>
</td>
<td class="cellalignment4973" headers="r30c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r30c1-t3 r1c3-t3">
<p>To assign a LOB or BFILE locator to another locator.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r31c1-t3" headers="r1c1-t3">
<p>LOB CLOSE</p>
</td>
<td class="cellalignment4973" headers="r31c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r31c1-t3 r1c3-t3">
<p>To close an open LOB or BFILE.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r32c1-t3" headers="r1c1-t3">
<p>LOB COPY</p>
</td>
<td class="cellalignment4973" headers="r32c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r32c1-t3 r1c3-t3">
<p>To copy all or part of a LOB value into another LOB.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r33c1-t3" headers="r1c1-t3">
<p>LOB CREATE TEMPORARY</p>
</td>
<td class="cellalignment4973" headers="r33c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r33c1-t3 r1c3-t3">
<p>To create a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r34c1-t3" headers="r1c1-t3">
<p>LOB DESCRIBE</p>
</td>
<td class="cellalignment4973" headers="r34c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r34c1-t3 r1c3-t3">
<p>To retrieve attributes from a LOB.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r35c1-t3" headers="r1c1-t3">
<p>LOB DISABLE BUFFERING</p>
</td>
<td class="cellalignment4973" headers="r35c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r35c1-t3 r1c3-t3">
<p>To disable LOB buffering.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r36c1-t3" headers="r1c1-t3">
<p>LOB ENABLE BUFFERING</p>
</td>
<td class="cellalignment4973" headers="r36c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r36c1-t3 r1c3-t3">
<p>To enable LOB buffering.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r37c1-t3" headers="r1c1-t3">
<p>LOB ERASE</p>
</td>
<td class="cellalignment4973" headers="r37c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r37c1-t3 r1c3-t3">
<p>To erase a given amount of LOB data starting from a given offset.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r38c1-t3" headers="r1c1-t3">
<p>LOB FILE CLOSE ALL</p>
</td>
<td class="cellalignment4973" headers="r38c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r38c1-t3 r1c3-t3">
<p>To close all open BFILE.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r39c1-t3" headers="r1c1-t3">
<p>LOB FILE SET</p>
</td>
<td class="cellalignment4973" headers="r39c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r39c1-t3 r1c3-t3">
<p>To set DIRECTORY and FILENAME in a BFILE locator.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r40c1-t3" headers="r1c1-t3">
<p>LOB FLUSH BUFFER</p>
</td>
<td class="cellalignment4973" headers="r40c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r40c1-t3 r1c3-t3">
<p>To write the LOB buffers to the database server.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r41c1-t3" headers="r1c1-t3">
<p>LOB FREE TEMPORARY</p>
</td>
<td class="cellalignment4973" headers="r41c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r41c1-t3 r1c3-t3">
<p>To free temporary space for the LOB locator.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r42c1-t3" headers="r1c1-t3">
<p>LOB LOAD</p>
</td>
<td class="cellalignment4973" headers="r42c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r42c1-t3 r1c3-t3">
<p>To copy all or part of a BFILE into an internal LOB.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r43c1-t3" headers="r1c1-t3">
<p>LOB OPEN</p>
</td>
<td class="cellalignment4973" headers="r43c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r43c1-t3 r1c3-t3">
<p>To open a LOB or BFILE to read or read/write access.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r44c1-t3" headers="r1c1-t3">
<p>LOB READ</p>
</td>
<td class="cellalignment4973" headers="r44c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r44c1-t3 r1c3-t3">
<p>To read all or part of a LOB or BFILE into a buffer.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r45c1-t3" headers="r1c1-t3">
<p>LOB TRIM</p>
</td>
<td class="cellalignment4973" headers="r45c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r45c1-t3 r1c3-t3">
<p>To truncate a lob value.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r46c1-t3" headers="r1c1-t3">
<p>LOB WRITE</p>
</td>
<td class="cellalignment4973" headers="r46c1-t3 r1c2-t3">
<p>O/E</p>
</td>
<td class="cellalignment4973" headers="r46c1-t3 r1c3-t3">
<p>To write the contents of a buffer to a LOB.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r47c1-t3" headers="r1c1-t3">
<p>OPEN</p>
</td>
<td class="cellalignment4973" headers="r47c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r47c1-t3 r1c3-t3">
<p>To execute the query associated with a cursor.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r48c1-t3" headers="r1c1-t3">
<p>OPEN DESCRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r48c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r48c1-t3 r1c3-t3">
<p>To execute the query associated with a cursor in ANSI Dynamic SQL.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r49c1-t3" headers="r1c1-t3">
<p>PREPARE</p>
</td>
<td class="cellalignment4973" headers="r49c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r49c1-t3 r1c3-t3">
<p>To parse a dynamic SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r50c1-t3" headers="r1c1-t3">
<p>ROLLBACK</p>
</td>
<td class="cellalignment4973" headers="r50c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r50c1-t3 r1c3-t3">
<p>To end the current transaction and discard all changes.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r51c1-t3" headers="r1c1-t3">
<p>SAVEPOINT</p>
</td>
<td class="cellalignment4973" headers="r51c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r51c1-t3 r1c3-t3">
<p>To identify a point in a transaction to which you can later roll back.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r52c1-t3" headers="r1c1-t3">
<p>SELECT</p>
</td>
<td class="cellalignment4973" headers="r52c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r52c1-t3 r1c3-t3">
<p>To retrieve data from one or more tables, views, or snapshots, assigning the selected values to host variables.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r53c1-t3" headers="r1c1-t3">
<p>SET DESCRIPTOR</p>
</td>
<td class="cellalignment4973" headers="r53c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r53c1-t3 r1c3-t3">
<p>To set information in the ANSI SQL descriptor area from host variables.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r54c1-t3" headers="r1c1-t3">
<p>UPDATE</p>
</td>
<td class="cellalignment4973" headers="r54c1-t3 r1c2-t3">
<p>S/E</p>
</td>
<td class="cellalignment4973" headers="r54c1-t3 r1c3-t3">
<p>To change existing values in a table or in a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r55c1-t3" headers="r1c1-t3">
<p>VAR</p>
</td>
<td class="cellalignment4973" headers="r55c1-t3 r1c2-t3">
<p>O/D</p>
</td>
<td class="cellalignment4973" headers="r55c1-t3 r1c3-t3">
<p>To override the default datatype and assign a specific Oracle external datatype to a host variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r56c1-t3" headers="r1c1-t3">
<p>WHENEVER</p>
</td>
<td class="cellalignment4973" headers="r56c1-t3 r1c2-t3">
<p>S/D</p>
</td>
<td class="cellalignment4973" headers="r56c1-t3 r1c3-t3">
<p>To specify handling for error and warning conditions.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwidemax" --></div>
<!-- class="sect1" -->
<a id="i44167"></a>
<div id="LNPCB1344" class="sect1">
<h2 class="sect1">About the Statement Descriptions</h2>
<p>The directives, and statements appear alphabetically. The description of each contains the following sections:</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="displays the different elements of statement descriptions in the chapter" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t4">Directives</th>
<th class="cellalignment4972" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t4" headers="r1c1-t4">Purpose</td>
<td class="cellalignment4973" headers="r2c1-t4 r1c2-t4">Describes the basic uses of the statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t4" headers="r1c1-t4">Prerequisites</td>
<td class="cellalignment4973" headers="r3c1-t4 r1c2-t4">Lists privileges you must have and steps that you must take before using the statement. Unless otherwise noted, most statements also require that the database be open by your instance.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t4" headers="r1c1-t4">Syntax</td>
<td class="cellalignment4973" headers="r4c1-t4 r1c2-t4">Shows the syntax diagram with the keywords and parameters of the statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t4" headers="r1c1-t4">Keywords and Parameters</td>
<td class="cellalignment4973" headers="r5c1-t4 r1c2-t4">Describes the purpose of each keyword and parameter.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t4" headers="r1c1-t4">Usage Notes</td>
<td class="cellalignment4973" headers="r6c1-t4 r1c2-t4">Discusses how and when to use the statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t4" headers="r1c1-t4">Prerequisites</td>
<td class="cellalignment4973" headers="r7c1-t4 r1c2-t4">Lists privileges you must have and steps that you must take before using the statement. Unless otherwise noted, most statements also require that the database be open by your instance.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t4" headers="r1c1-t4">Syntax</td>
<td class="cellalignment4973" headers="r8c1-t4 r1c2-t4">Shows the syntax diagram with the keywords and parameters of the statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect1" -->
<a id="i13528"></a>
<div id="LNPCB1345" class="sect1">
<h2 class="sect1">How to Read Syntax Diagrams<a id="sthref2015"></a></h2>
<p>Syntax diagrams are used to illustrate embedded SQL syntax. They are drawings that depict valid syntax.<a id="sthref2016"></a><a id="sthref2017"></a></p>
<p>Trace each diagram from left to right, in the direction shown by the arrows.<a id="sthref2018"></a><a id="sthref2019"></a></p>
<p>Statements keywords appear in UPPER CASE inside rectangles. Type them exactly as shown in the rectangles. Parameters appear in lower case inside ovals. Variables are used for the parameters. Operators, delimiters, and terminators appear inside circles.</p>
<p>If the syntax diagram has more than one path, you can choose any path to travel.</p>
<p>If you have the choice of more than one keyword, operator, or parameter, your options appear in a vertical list. In the following example, you can travel down the vertical line as far as you like, then continue along any horizontal line:</p>
<img width="496" height="72" src="img/first.gif" alt="Syntax Diagrams"/><br/>
<a id="sthref2020" href="img_text/first.htm">Description of the illustration first.gif</a><br/>
<br/>
<p>According to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL WHENEVER NOT FOUND ... 
EXEC SQL WHENEVER SQLERROR ... 
EXEC SQL WHENEVER SQLWARNING ... 
</pre>
<a id="i20239"></a>
<div id="LNPCB1346" class="sect2">
<h3 class="sect2">Statement Terminator</h3>
<p>In all Pro*COBOL EXEC SQL diagrams, each statement is understood to end with the token <span class="italic">END-EXEC.</span></p>
</div>
<!-- class="sect2" -->
<div id="LNPCB1347" class="sect2"><a id="sthref2021"></a>
<h3 class="sect2">Required Keywords and Parameters</h3>
<p>Required keywords and parameters can appear singly or in a vertical list of alternatives. Single required keywords and parameters appear on the main path, that is, on the horizontal line you are currently traveling. In the following example, cursor is a required parameter:</p>
<img width="398" height="32" src="img/reqp.gif" alt="Required Keywords and Parameters"/><br/>
<a id="sthref2022" href="img_text/reqp.htm">Description of the illustration reqp.gif</a><br/>
<br/>
<p>If there is a cursor named <span class="italic">EMPCURSOR</span>, then, according to the diagram, the following statement is valid:</p>
<pre>EXEC SQL CLOSE EMPCURSOR END-EXEC. 
</pre>
<p>If any of the keywords or parameters in a vertical list appears on the main path, one of them is required. That is, you must choose one of the keywords or parameters, but not necessarily the one that appears on the main path. In the following example, you must choose one of the four actions:</p>
<img width="394" height="107" src="img/reqp1.gif" alt="Syntax Diagram"/><br/>
<a id="sthref2023" href="img_text/reqp1.htm">Description of the illustration reqp1.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="LNPCB1348" class="sect2"><a id="sthref2024"></a>
<h3 class="sect2">Optional Keywords and Parameters</h3>
<p>If keywords and parameters appear in a vertical list preceding the main path, they are optional. In the following example, instead of traveling down a vertical line, you can continue along the main path:</p>
<img width="385" height="48" src="img/optional.gif" alt="Optional Keywords and Parameters"/><br/>
<a id="sthref2025" href="img_text/optional.htm">Description of the illustration optional.gif</a><br/>
<br/>
<p>If there is a database named <span class="italic">oracle2</span>, then, according to the diagram, all of the following statements are valid:</p>
<pre>     EXEC SQL ROLLBACK END-EXEC. 
     EXEC SQL ROLLBACK WORK END-EXEC. 
     EXEC SQL AT ORACLE2 ROLLBACK END-EXEC. 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCB1349" class="sect2"><a id="sthref2026"></a>
<h3 class="sect2">Syntax Loops</h3>
<p>Loops let you repeat the syntax within them as many times as you like. In the following example, <span class="italic">column_name</span> is inside a loop. So, after choosing one column name, you can go back repeatedly to choose another.</p>
<img width="391" height="55" src="img/syntax.gif" alt="Syntax Loops"/><br/>
<a id="sthref2027" href="img_text/syntax.htm">Description of the illustration syntax.gif</a><br/>
<br/>
<p>If DEBIT, CREDIT, and BALANCE are column names, then, according to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL SELECT DEBIT INTO ... 
EXEC SQL SELECT CREDIT, BALANCE INTO ... 
EXEC SQL SELECT DEBIT, CREDIT, BALANCE INTO ... 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCB1350" class="sect2"><a id="sthref2028"></a>
<h3 class="sect2">Multi-part Diagrams</h3>
<p>Read a multi-part diagram as if all the main paths were joined end-to-end. The following example is a two-part diagram:</p>
<img width="496" height="103" src="img/part.gif" alt="Multi-part Diagrams"/><br/>
<a id="sthref2029" href="img_text/part.htm">Description of the illustration part.gif</a><br/>
<br/>
<p>According to the diagram, the following statement is valid:</p>
<pre>     EXEC SQL PREPARE statement_name FROM :host_string END-EXEC. 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCB1351" class="sect2"><a id="sthref2030"></a>
<h3 class="sect2">Oracle Names</h3>
<p>The names of Oracle database objects, such as tables and columns, must not exceed 30 characters in length. The first character must be a letter, but the rest can be any combination of letters, numerals, dollar signs ($), pound signs (#), and underscores (_).<a id="sthref2031"></a><a id="sthref2032"></a><a id="sthref2033"></a></p>
<p>However, if a name is enclosed by quotation marks (&#34;), it can contain any combination of legal characters, including spaces but excluding quotation marks.</p>
<p>Oracle names are not case-sensitive except when enclosed by quotation marks.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i16241"></a>
<div id="LNPCB1352" class="sect1">
<h2 class="sect1">ALLOCATE (Executable Embedded SQL Extension)<a id="sthref2034"></a><a id="sthref2035"></a><a id="sthref2036"></a><a id="sthref2037"></a><a id="sthref2038"></a></h2>
<p class="subhead1"><a id="LNPCB1353"></a>Purpose</p>
<p>To allocate a cursor variable to be referenced in a PL/SQL block, or to allocate a LOB locator, or a ROWID<a id="sthref2039"></a> .</p>
<p class="subhead1"><a id="LNPCB1354"></a>Prerequisites</p>
<p>A cursor variable (see <a href="pco06pls.htm#g33607">Chapter 6, &#34;Embedded PL/SQL&#34;</a>) of type <a id="sthref2040"></a>SQL-CURSOR must be declared before allocating memory for the cursor variable.</p>
<p class="subhead1"><a id="LNPCB1355"></a>Syntax</p>
<img width="387" height="50" src="img/allocob.gif" alt="ALLOCATE"/><br/>
<a id="sthref2041" href="img_text/allocob.htm">Description of the illustration allocob.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1356"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for ALLOCATE statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t5">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t5" headers="r1c1-t5"><span class="italic">cursor_variable</span></td>
<td class="cellalignment4973" headers="r2c1-t5 r1c2-t5">A cursor variable of type SQL-CURSOR</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t5" headers="r1c1-t5"><span class="italic">host_ptr</span></td>
<td class="cellalignment4973" headers="r3c1-t5 r1c2-t5">A variable of type SQL-ROWID for a ROWID, or SQL-BLOB, SQL-CLOB, or SQL-NCLOB for a LOB</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1357"></a>Usage Notes</p>
<p>Whereas a cursor is static, a cursor variable is dynamic because it is not tied to a specific query. You can open a cursor variable for any type-compatible query.</p>
<p>For more information on this statement, see <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> and <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></p>
<p class="subhead1"><a id="LNPCB1358"></a>Example</p>
<p>This partial example illustrates the use of the ALLOCATE statement:</p>
<pre>       ...
 01  EMP-CUR       SQL-CURSOR.
 01  EMP-REC.
     ...
     EXEC SQL ALLOCATE :EMP-CUR END-EXEC.
     ...
</pre>
<p class="subhead1"><a id="LNPCB1359"></a>Related Topics</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12797">EXECUTE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12800">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#i24648">FREE (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18519"></a>
<div id="LNPCB1360" class="sect1">
<h2 class="sect1">ALLOCATE DESCRIPTOR (Executable Embedded SQL)<a id="sthref2042"></a><a id="sthref2043"></a><a id="sthref2044"></a></h2>
<p class="subhead1"><a id="LNPCB1361"></a>Purpose</p>
<p>An ANSI dynamic SQL statement that allocates a descriptor.</p>
<p class="subhead1"><a id="LNPCB1362"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1363"></a>Syntax</p>
<img width="600" height="128" src="img/alldesc.gif" alt="ALLOCATE DESCRIPTOR"/><br/>
<a id="sthref2045" href="img_text/alldesc.htm">Description of the illustration alldesc.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1364"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for allocate descriptor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t6"><span class="bold">Keywords and Parameters</span></th>
<th class="cellalignment4972" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t6" headers="r1c1-t6"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t6 r1c2-t6">Host variable containing number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t6" headers="r1c1-t6"><span class="italic">descriptor_name</span>
<p><span class="italic">descriptor name</span></p>
</td>
<td class="cellalignment4973" headers="r3c1-t6 r1c2-t6">Host variable containing number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t6" headers="r1c1-t6">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r4c1-t6 r1c2-t6">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t6" headers="r1c1-t6">WITH MAX <span class="italic">integer</span></td>
<td class="cellalignment4973" headers="r5c1-t6 r1c2-t6">Maximum number of host variables. The default is 100.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1365"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option. For information on using this statement, see <a href="pco10ady.htm#i1005236">&#34;ALLOCATE DESCRIPTOR&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1366"></a>Example</p>
<pre>     EXEC SQL 
       FOR :batch ALLOCATE DESCRIPTOR GLOBAL :binddes WITH MAX 25 
     END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1367"></a>Related Topics</p>
<p><a href="#i18533">DESCRIBE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i18535">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i18540">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i24775"></a>
<div id="LNPCB1368" class="sect1">
<h2 class="sect1"><a id="sthref2046"></a><a id="sthref2047"></a><a id="sthref2048"></a>CALL (Executable Embedded SQL)</h2>
<p class="subhead1"><a id="LNPCB1369"></a>Purpose</p>
<p>To call a stored procedure.</p>
<p class="subhead1"><a id="LNPCB1370"></a>Prerequisites</p>
<p>An active database connection must exist.</p>
<p class="subhead1"><a id="LNPCB1371"></a>Syntax</p>
<img width="496" height="144" src="img/call.gif" alt="CALL"/><br/>
<a id="sthref2049" href="img_text/call.htm">Description of the illustration call.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1372"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for call statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t7">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t7" headers="r1c1-t7"><span class="italic">schema</span></td>
<td class="cellalignment4973" headers="r2c1-t7 r1c2-t7">Is the schema containing the procedure. If you omit schema, Oracle assumes the procedure is in your own schema.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t7" headers="r1c1-t7"><span class="italic">pkg</span></td>
<td class="cellalignment4973" headers="r3c1-t7 r1c2-t7">The package where the procedure is stored.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t7" headers="r1c1-t7"><span class="italic">st_proc</span></td>
<td class="cellalignment4973" headers="r4c1-t7 r1c2-t7">The stored procedure to be called.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t7" headers="r1c1-t7"><span class="italic">db_link</span></td>
<td class="cellalignment4973" headers="r5c1-t7 r1c2-t7">The complete or partial name of a database link to a remote database where the procedure is located. For information on referring to database links, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t7" headers="r1c1-t7"><span class="italic">expr</span></td>
<td class="cellalignment4973" headers="r6c1-t7 r1c2-t7">The list of expressions that are the parameters of the procedure.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t7" headers="r1c1-t7"><span class="italic">ret_var</span></td>
<td class="cellalignment4973" headers="r7c1-t7 r1c2-t7">The host variable that receives the returned value of a function.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t7" headers="r1c1-t7"><span class="italic">ret_ind</span></td>
<td class="cellalignment4973" headers="r8c1-t7 r1c2-t7">The indicator variable for <span class="italic">ret_var</span>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1373"></a>Usage Notes</p>
<p>For more about this statement, see <a href="pco06pls.htm#i8978">Calling a Stored PL/SQL or Java Subprogram</a>.</p>
<p>For a complete discussion of stored procedures, see: <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a>, &#34;External Routines&#34; chapter.</p>
<p class="subhead1"><a id="LNPCB1374"></a>Example</p>
<pre> ...
     05  EMP-NAME      PIC X(10) VARYING.
     05  EMP-NUMBER    PIC S9(4) COMP VALUE ZERO.
     05  SALARY        PIC S9(5)V99 COMP-3 VALUE ZERO.
...
      05  D-EMP-NUMBER  PIC 9(4).
...
      ACCEPT D-EMP-NUMBER.
      EXEC SQL 
        CALL mypkge.getsal(:EMP-NUMBER, :D-EMP-NUMBER, :EMP-NAME) INTO :SALARY 
      END-EXEC.
...
</pre>
<p class="subhead1"><a id="LNPCB1375"></a>Related Topics</p>
<p>None</p>
</div>
<!-- class="sect1" -->
<a id="i12794"></a>
<div id="LNPCB1376" class="sect1">
<h2 class="sect1">CLOSE (Executable Embedded SQL)<a id="sthref2050"></a><a id="sthref2051"></a><a id="sthref2052"></a><a id="sthref2053"></a><a id="sthref2054"></a></h2>
<p class="subhead1"><a id="LNPCB1377"></a>Purpose</p>
<p>To disable a cursor, freeing the resources acquired by opening the cursor, and releasing parse locks.</p>
<p class="subhead1"><a id="LNPCB1378"></a>Prerequisites</p>
<p>The cursor or cursor variable must be open and MODE=ANSI.</p>
<p class="subhead1"><a id="LNPCB1379"></a>Syntax</p>
<img width="496" height="80" src="img/close.gif" alt="CLOSE"/><br/>
<a id="sthref2055" href="img_text/close.htm">Description of the illustration close.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1380"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for close statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t8">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t8" headers="r1c1-t8"><span class="italic">cursor</span></td>
<td class="cellalignment4973" headers="r2c1-t8 r1c2-t8">The cursor to be closed</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t8" headers="r1c1-t8"><span class="italic">cursor_variable</span></td>
<td class="cellalignment4973" headers="r3c1-t8 r1c2-t8">The cursor variable to be closed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1381"></a>Usage Notes</p>
<p>Rows cannot be fetched from a closed cursor. A cursor need not be closed to be reopened. The HOLD_CURSOR<a id="sthref2056"></a> and RELEASE_CURSOR<a id="sthref2057"></a> precompiler options alter the effect of the CLOSE statement. For information on these options, see <a href="pco14opt.htm#g27880">Chapter 14, &#34;Precompiler Options&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1382"></a>Example</p>
<p>This example illustrates the use of the CLOSE statement:<a id="sthref2058"></a></p>
<pre>     EXEC SQL CLOSE EMP-CUR END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1383"></a>Related Topics</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#i12809">OPEN (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12818"></a>
<div id="LNPCB1384" class="sect1">
<h2 class="sect1">COMMIT (Executable Embedded SQL)<a id="sthref2059"></a><a id="sthref2060"></a><a id="sthref2061"></a><a id="sthref2062"></a> <a id="sthref2063"></a></h2>
<p class="subhead1"><a id="LNPCB1385"></a>Purpose</p>
<p>To end your current transaction, making permanent all its changes to the database and optionally freeing all resources and disconnecting from the database server.</p>
<p class="subhead1"><a id="LNPCB1386"></a>Prerequisites</p>
<p>To commit your current transaction, no privileges are necessary.</p>
<p>To manually commit a distributed in-doubt transaction that you originally committed, you must have FORCE TRANSACTION system privilege. To manually commit a distributed in-doubt transaction that was originally committed by another user, you must have FORCE ANY TRANSACTION system privilege.</p>
<p class="subhead1"><a id="LNPCB1387"></a>Syntax</p>
<img width="496" height="160" src="img/commit.gif" alt="COMMIT"/><br/>
<a id="sthref2064" href="img_text/commit.htm">Description of the illustration commit.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1388"></a>Keyword and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for commit statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t9">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t9" headers="r1c1-t9">&nbsp;</td>
<td class="cellalignment4973" headers="r2c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t9" headers="r1c1-t9">AT</td>
<td class="cellalignment4973" headers="r3c1-t9 r1c2-t9"><a id="sthref2065"></a>Identifies the database to which the COMMIT statement is issued. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t9" headers="r1c1-t9"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r4c1-t9 r1c2-t9">A database identifier declared in a previous DECLARE DATABASE statement or used in a CONNECT statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t9" headers="r1c1-t9"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r5c1-t9 r1c2-t9">If you omit this clause, Oracle issues the statement to your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t9" headers="r1c1-t9">WORK</td>
<td class="cellalignment4973" headers="r6c1-t9 r1c2-t9"><a id="sthref2066"></a>Is supported only for compliance with standard SQL. The statements COMMIT and COMMIT WORK are equivalent.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t9" headers="r1c1-t9"><a id="sthref2067"></a>COMMENT</td>
<td class="cellalignment4973" headers="r7c1-t9 r1c2-t9">Specifies a comment to be associated with the current transaction. The &#39;<span class="italic">text</span>&#39; is a quoted literal of up to 50 characters that Oracle stores in the data dictionary view DBA_2PC_PENDING along with the transaction ID if the transaction becomes in-doubt.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t9" headers="r1c1-t9">RELEASE</td>
<td class="cellalignment4973" headers="r8c1-t9 r1c2-t9">Frees all resources and disconnects the application from the Oracle Server.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t9" headers="r1c1-t9">FORCE</td>
<td class="cellalignment4973" headers="r9c1-t9 r1c2-t9">M<a id="sthref2068"></a>anually commits an in-doubt distributed transaction. The transaction is identified by the &#39;<span class="italic">text</span>&#39; containing its local or global transaction ID. To find the IDs of such transactions, query the data dictionary view DBA_2PC_PENDING. You can also use the optional <span class="italic">integer</span> to explicitly assign the transaction a system change number (SCN). If you omit the integer, the transaction is committed using the current SCN.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1389"></a>Usage Notes</p>
<p>Always explicitly commit or rollback the last transaction in your program by using the COMMIT or ROLLBACK statement and the RELEASE option. Oracle automatically rolls back changes if the program terminates abnormally.<a id="sthref2069"></a></p>
<p>The COMMIT statement has no effect on host variables or on the flow of control in the program. For more information on this statement, see <a href="pco03dbc.htm#i3985">&#34;Using the COMMIT Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1390"></a>Example</p>
<p><a id="sthref2070"></a>This example illustrates the use of the embedded SQL COMMIT statement:</p>
<pre>     EXEC SQL AT SALESDB COMMIT RELEASE END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1391"></a>Related Topics</p>
<p><a href="#i12812">ROLLBACK (Executable Embedded SQL)</a>.</p>
<p><a href="#i12813">SAVEPOINT (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12848"></a>
<div id="LNPCB1392" class="sect1">
<h2 class="sect1">CONNECT (Executable Embedded SQL Extension)<a id="sthref2071"></a><a id="sthref2072"></a><a id="sthref2073"></a> <a id="sthref2074"></a></h2>
<p class="subhead1"><a id="LNPCB1393"></a>Purpose</p>
<p>To logon to an Oracle database.</p>
<p class="subhead1"><a id="LNPCB1394"></a>Prerequisites</p>
<p>You must have CREATE SESSION system privilege in the specified database.</p>
<p class="subhead1"><a id="LNPCB1395"></a>Syntax</p>
<img width="496" height="216" src="img/connect.gif" alt="CONNECT"/><br/>
<a id="sthref2075" href="img_text/connect.htm">Description of the illustration connect.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1396"></a>Keyword and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for connect statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t10">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t10" headers="r1c1-t10"><span class="italic">user</span>
<p><span class="italic">password</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t10 r1c2-t10">Specifies your username and password separately.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t10" headers="r1c1-t10"><span class="italic">user_password</span></td>
<td class="cellalignment4973" headers="r3c1-t10 r1c2-t10">Is a single host variable containing the connect string <span class="italic">username</span>/<span class="italic">password</span>[<span class="italic">@dbname</span>].
<p>To allow Oracle to verify your connection through your operating system, specify &#34;/&#34; as the :<span class="italic">user_password</span> value.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t10" headers="r1c1-t10">AT</td>
<td class="cellalignment4973" headers="r4c1-t10 r1c2-t10"><a id="sthref2076"></a>Identifies the database to which the connection is made. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t10" headers="r1c1-t10"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r5c1-t10 r1c2-t10">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t10" headers="r1c1-t10"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r6c1-t10 r1c2-t10">A host variable whose value is a previously declared <span class="italic">db_name</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t10" headers="r1c1-t10">USING</td>
<td class="cellalignment4973" headers="r7c1-t10 r1c2-t10"><a id="sthref2077"></a>Specifies the Oracle Net Services database specification string used to connect to a nondefault database. If you omit this clause, you are connected to your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t10" headers="r1c1-t10">ALTER AUTHORIZATION</td>
<td class="cellalignment4973" headers="r8c1-t10 r1c2-t10">Change password to the following string.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t10" headers="r1c1-t10"><span class="italic">new_password</span></td>
<td class="cellalignment4973" headers="r9c1-t10 r1c2-t10">New password string.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t10" headers="r1c1-t10">IN SYSDBA MODE
<p>IN SYSOPER MODE</p>
</td>
<td class="cellalignment4973" headers="r10c1-t10 r1c2-t10">Connect with SYSDBA or SYSOPER system privileges. Not allowed when ALTER AUTHORIZATION is used, or precompiler option AUTO_CONNECT is set to YES.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1397"></a>Usage Notes</p>
<p>A program can have multiple connections, but can only connect once to your default database. For more information on this statement, see: <a href="pco03dbc.htm#i7213">&#34;Concurrent Logons&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1398"></a>Example<a id="sthref2078"></a></p>
<p>The following example illustrate the use of CONNECT:</p>
<pre>     EXEC SQL CONNECT :USERNAME 
          IDENTIFIED BY :PASSWORD 
     END-EXEC.
</pre>
<p>You can also use this statement in which the value of :<span class="italic">userid</span> is the value of :<span class="italic">username</span> and :<span class="italic">password</span> separated by a &#34;/&#34; such as &#39;SCOTT/TIGER&#39;:</p>
<pre>     EXEC SQL CONNECT :USERID END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1399"></a>Related Topics</p>
<p><a href="#i12818">COMMIT (Executable Embedded SQL)</a>.</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#i12812">ROLLBACK (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18514"></a>
<div id="LNPCB1400" class="sect1">
<h2 class="sect1">CONTEXT ALLOCATE (Executable Embedded SQL Extension)<a id="sthref2079"></a><a id="sthref2080"></a><a id="sthref2081"></a><a id="sthref2082"></a><a id="sthref2083"></a><a id="sthref2084"></a></h2>
<p class="subhead1"><a id="LNPCB1401"></a>Purpose</p>
<p>To initialize a SQLLIB runtime context that is referenced in an EXEC SQL CONTEXT USE statement.<a id="sthref2085"></a></p>
<p class="subhead1"><a id="LNPCB1402"></a>Prerequisites</p>
<p>The runtime context must be declared of type SQL-CONTEXT.</p>
<p class="subhead1"><a id="LNPCB1403"></a>Syntax</p>
<img width="496" height="26" src="img/conall.gif" alt="CONTEXT ALLOCATE"/><br/>
<a id="sthref2086" href="img_text/conall.htm">Description of the illustration conall.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1404"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for context allocate statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t11">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t11" headers="r1c1-t11"><span class="italic">context</span></td>
<td class="cellalignment4973" headers="r2c1-t11 r1c2-t11">The SQLLIB runtime context for which memory is to be allocated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1405"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pco12thr.htm#i998018">&#34;Embedded SQL Statements and Directives for Runtime Contexts&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1406"></a>Example</p>
<p>This example illustrates the use of a CONTEXT ALLOCATE statement in a Pro*COBOL embedded SQL program:</p>
<pre>     EXEC SQL CONTEXT ALLOCATE :ctx1 END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1407"></a>Related Topics</p>
<p><a href="#i18524">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#i18529">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18524"></a>
<div id="LNPCB1408" class="sect1">
<h2 class="sect1">CONTEXT FREE (Executable Embedded SQL Extension)<a id="sthref2087"></a><a id="sthref2088"></a><a id="sthref2089"></a><a id="sthref2090"></a><a id="sthref2091"></a></h2>
<p class="subhead1"><a id="LNPCB1409"></a>Purpose</p>
<p>To free all memory associated with a runtime context and place a null pointer in the host program variable.</p>
<p class="subhead1"><a id="LNPCB1410"></a>Prerequisites</p>
<p>The CONTEXT ALLOCATE statement must be used to allocate memory for the specified runtime context before the CONTEXT FREE statement can free the memory allocated for it.</p>
<p class="subhead1"><a id="LNPCB1411"></a>Syntax</p>
<img width="496" height="48" src="img/confree.gif" alt="CONTEXT FREE"/><br/>
<a id="sthref2092" href="img_text/confree.htm">Description of the illustration confree.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1412"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for context free statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t12">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t12" headers="r1c1-t12"><span class="italic">context</span></td>
<td class="cellalignment4973" headers="r2c1-t12 r1c2-t12">The allocated runtime context for which the memory is to be deallocated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1413"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pco12thr.htm#i998018">&#34;Embedded SQL Statements and Directives for Runtime Contexts&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1414"></a>Example</p>
<p>This example illustrates the use of a CONTEXT FREE statement in a Pro*COBOL embedded SQL program:</p>
<pre>     EXEC SQL CONTEXT FREE :ctx1 END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1415"></a>Related Topics</p>
<p><a href="#i18514">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#i18529">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18529"></a>
<div id="LNPCB1416" class="sect1">
<h2 class="sect1">CONTEXT USE (Oracle Embedded SQL Directive)<a id="sthref2093"></a><a id="sthref2094"></a><a id="sthref2095"></a><a id="sthref2096"></a></h2>
<p class="subhead1"><a id="LNPCB1417"></a>Purpose</p>
<p>To instruct the precompiler to use the specified SQLLIB runtime context on subsequent executable SQL statements</p>
<p class="subhead1"><a id="LNPCB1418"></a>Prerequisites</p>
<p>The runtime context specified by the CONTEXT USE directive must be previously declared.</p>
<p class="subhead1"><a id="LNPCB1419"></a>Syntax</p>
<img width="496" height="64" src="img/conuse.gif" alt="CONTEXT USE"/><br/>
<a id="sthref2097" href="img_text/conuse.htm">Description of the illustration conuse.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1420"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for context use statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t13">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t13" headers="r1c1-t13"><span class="italic">context</span></td>
<td class="cellalignment4973" headers="r2c1-t13 r1c2-t13">The allocated runtime context to use for subsequent executable SQL statements that follow it. For example, after specifying in your source code which context to use (multiple contexts can be allocated), you can connect to the Oracle Server and perform database operations within the scope of that context.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t13" headers="r1c1-t13">DEFAULT</td>
<td class="cellalignment4973" headers="r3c1-t13 r1c2-t13">Indicates that the global context is to be used.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1421"></a>Usage Notes</p>
<p>This statement has no effect on declarative statements such as EXEC SQL INCLUDE or EXEC ORACLE OPTION. It works similarly to the EXEC SQL WHENEVER directive in that it affects all executable SQL statements which positionally follow it in a given source file without regard to standard C scope rules.</p>
<p>For more information on this statement, see <a href="pco12thr.htm#i998018">&#34;Embedded SQL Statements and Directives for Runtime Contexts&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1422"></a>Example</p>
<p>This example illustrates the use of a CONTEXT USE directive in a Pro*COBOL program:</p>
<pre>     EXEC SQL CONTEXT USE :ctx1 END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1423"></a>Related Topics</p>
<p><a href="#i18514">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#i18524">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i19201"></a>
<div id="LNPCB1424" class="sect1">
<h2 class="sect1">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)<a id="sthref2098"></a><a id="sthref2099"></a><a id="sthref2100"></a></h2>
<p class="subhead1"><a id="LNPCB1425"></a>Purpose</p>
<p>An ANSI dynamic SQL statement that deallocates a descriptor area to free memory.</p>
<p class="subhead1"><a id="LNPCB1426"></a>Prerequisites</p>
<p>The descriptor specified by the DEALLOCATE DESCRIPTOR statement must be previously allocated using the ALLOCATE DESCRIPTOR statement.</p>
<p class="subhead1"><a id="LNPCB1427"></a>Syntax</p>
<img width="496" height="96" src="img/dealdesc.gif" alt="DEALLOCATE DESCRIPTOR"/><br/>
<a id="sthref2101" href="img_text/dealdesc.htm">Description of the illustration dealdesc.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1428"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for deallocate descriptor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t14">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t14" headers="r1c1-t14">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r2c1-t14 r1c2-t14">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t14" headers="r1c1-t14"><span class="italic">descriptor_name</span>
<p><span class="italic">&#39;descriptor name&#39;</span></p>
</td>
<td class="cellalignment4973" headers="r3c1-t14 r1c2-t14">Host variable containing the name of the allocated ANSI descriptor.
<p>Name of the allocated ANSI descriptor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1429"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option.</p>
<p>For more information on this statement, see <a href="pco10ady.htm#i1005237">&#34;DEALLOCATE DESCRIPTOR&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1430"></a>Example</p>
<pre>     EXEC SQL DEALLOCATE DESCRIPTOR GLOBAL &#39;SELDES&#39;  END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1431"></a>Related Topics</p>
<p><a href="#i18519">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i18533">DESCRIBE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i18535">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#i18540">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12806"></a>
<div id="LNPCB1432" class="sect1">
<h2 class="sect1">DECLARE CURSOR (Embedded SQL Directive)<a id="sthref2102"></a><a id="sthref2103"></a><a id="sthref2104"></a></h2>
<p class="subhead1"><a id="LNPCB1433"></a>Purpose</p>
<p>To declare a cursor, giving it a name and associating it with a SQL statement or a PL/SQL block.</p>
<p class="subhead1"><a id="LNPCB1434"></a>Prerequisites</p>
<p>If you associate the cursor with an identifier for a SQL statement or PL/SQL block, you must have declared this identifier in a previous DECLARE STATEMENT statement.</p>
<p class="subhead1"><a id="LNPCB1435"></a>Syntax</p>
<img width="496" height="192" src="img/dclco.gif" alt="DECLARE CURSOR"/><br/>
<a id="sthref2105" href="img_text/dclco.htm">Description of the illustration dclco.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1436"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for declare cursor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t15">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t15" headers="r1c1-t15">AT</td>
<td class="cellalignment4973" headers="r2c1-t15 r1c2-t15"><a id="sthref2106"></a>Identifies the database on which the cursor is declared. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t15" headers="r1c1-t15"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t15 r1c2-t15">Database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t15" headers="r1c1-t15"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t15 r1c2-t15">Host variable whose value is a previously declared <span class="italic">db_name</span>.
<p>If you omit this clause, Oracle declares the cursor on your default database.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t15" headers="r1c1-t15"><span class="italic">cursor</span></td>
<td class="cellalignment4973" headers="r5c1-t15 r1c2-t15">Name of the cursor to be declared.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t15" headers="r1c1-t15">WITH HOLD</td>
<td class="cellalignment4973" headers="r6c1-t15 r1c2-t15">Cursor remains open after a COMMIT. The cursor must not be declared for UPDATE.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t15" headers="r1c1-t15">SELECT <span class="italic">statement</span></td>
<td class="cellalignment4973" headers="r7c1-t15 r1c2-t15">Is a SELECT statement to be associated with the cursor. The following statement cannot contain an INTO clause.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t15" headers="r1c1-t15"><span class="italic">statement_name</span></td>
<td class="cellalignment4973" headers="r8c1-t15 r1c2-t15">Identifies a SQL statement or PL/SQL block to be associated with the cursor. The <span class="italic">statement_name</span> or <span class="italic">block_name</span> must be previously declared in a DECLARE STATEMENT statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1437"></a>Usage Notes</p>
<p>You must declare a cursor before referencing it in other embedded SQL statements. The scope of a cursor declaration is global within its precompilation unit and the name of each cursor must be unique in its scope. You cannot declare two cursors with the same name in a single precompilation unit.</p>
<p>You can reference the cursor in the WHERE clause of an UPDATE or DELETE statement using the CURRENT OF syntax, if the cursor has been opened with an OPEN statement and positioned on a row with a FETCH statement. For more information on this statement, see <a href="pco03dbc.htm#i4014">&#34;WITH HOLD Clause in DECLARE CURSOR Statements&#34;</a>.</p>
<p>By default, held cursors are closed after ROLLBACK to conform to SQL standard behavior. To have held cursors remain open after ROLLBACK for backward compatibility, set the command-line option, CWH_SQL99, to NO.</p>
<p class="subhead1"><a id="LNPCB1438"></a>Example</p>
<p><a id="sthref2107"></a>This example illustrates the use of a DECLARE CURSOR statement:</p>
<pre>     EXEC SQL DECLARE EMPCURSOR CURSOR 
         FOR SELECT ENAME, EMPNO, JOB, SAL 
         FROM EMP 
         WHERE DEPTNO = :DEPTNO 
     END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1439"></a>Related Topics</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#i12826">DECLARE STATEMENT (Embedded SQL Directive)</a>.</p>
<p><a href="#i12827">DELETE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12800">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#i12809">OPEN (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12828">SELECT (Executable Embedded SQL)</a>.</p>
<p><a href="#i12829">UPDATE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12819"></a>
<div id="LNPCB1440" class="sect1">
<h2 class="sect1">DECLARE DATABASE (Oracle Embedded SQL Directive)<a id="sthref2108"></a><a id="sthref2109"></a><a id="sthref2110"></a></h2>
<p class="subhead1"><a id="LNPCB1441"></a>Purpose</p>
<p>To declare an identifier for a nondefault database to be accessed in subsequent embedded SQL statements.<a id="sthref2111"></a></p>
<p class="subhead1"><a id="LNPCB1442"></a>Prerequisites</p>
<p>You must have access to a username on the nondefault database.</p>
<p class="subhead1"><a id="LNPCB1443"></a>Syntax</p>
<img width="496" height="48" src="img/dcldbase.gif" alt="DECLARE DATABASE"/><br/>
<a id="sthref2112" href="img_text/dcldbase.htm">Description of the illustration dcldbase.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1444"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for declare database statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t16">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t16" headers="r1c1-t16"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r2c1-t16 r1c2-t16">The identifier established for the nondefault database.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1445"></a>Usage Notes</p>
<p>You declare a <span class="italic">db_name</span> for a nondefault database so that other embedded SQL statements can refer to that database using the AT clause. Before issuing a CONNECT statement with an AT clause, you must declare a <span class="italic">db_name</span> for the nondefault database with a DECLARE DATABASE statement.</p>
<p>For more information on this statement, see <a href="pco03dbc.htm#i5956">&#34;Using Username/Password&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1446"></a>Example</p>
<p>This example illustrates the use of a DECLARE DATABASE directive:</p>
<pre>     EXEC SQL DECLARE ORACLE3 DATABASE END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1447"></a>Related Topics</p>
<p><a href="#i12818">COMMIT (Executable Embedded SQL)</a></p>
<p><a href="#i12848">CONNECT (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#i12826">DECLARE STATEMENT (Embedded SQL Directive)</a>.</p>
<p><a href="#i12827">DELETE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12797">EXECUTE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12849">EXECUTE IMMEDIATE (Executable Embedded SQL)</a>.</p>
<p><a href="#i18354">INSERT (Executable Embedded SQL)</a>.</p>
<p><a href="#i12828">SELECT (Executable Embedded SQL)</a>.</p>
<p><a href="#i12829">UPDATE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12826"></a>
<div id="LNPCB1448" class="sect1">
<h2 class="sect1">DECLARE STATEMENT (Embedded SQL Directive)<a id="sthref2113"></a><a id="sthref2114"></a> <a id="sthref2115"></a></h2>
<p class="subhead1"><a id="LNPCB1449"></a>Purpose</p>
<p>To declare an identifier for a SQL statement or PL/SQL block to be used in other embedded SQL statements.</p>
<p class="subhead1"><a id="LNPCB1450"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1451"></a>Syntax</p>
<img width="496" height="80" src="img/dcl_stmt.gif" alt="DECLARE STATEMENT"/><br/>
<a id="sthref2116" href="img_text/dcl_stmt.htm">Description of the illustration dcl_stmt.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1452"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for declare statement statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t17">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t17" headers="r1c1-t17">AT</td>
<td class="cellalignment4973" headers="r2c1-t17 r1c2-t17"><a id="sthref2117"></a>Identifies the database on which the SQL statement or PL/SQL block is declared. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t17" headers="r1c1-t17"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t17 r1c2-t17">Database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t17" headers="r1c1-t17"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t17 r1c2-t17">Host variable whose value is a previously declared <span class="italic">db_name</span>. If you omit this clause, Oracle Database declares the SQL statement or PL/SQL block on your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t17" headers="r1c1-t17"><span class="italic">statement_name</span></td>
<td class="cellalignment4973" headers="r5c1-t17 r1c2-t17">Is the declared identifier for the statement or PL/SQL block.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1453"></a>Usage Notes</p>
<p>You must declare an identifier for a SQL statement or PL/SQL block with a DECLARE STATEMENT statement only if a DECLARE CURSOR statement referencing the identifier appears physically (not logically) in the embedded SQL program before the PREPARE statement that parses the statement or block and associates it with its identifier.</p>
<p>The scope of a statement declaration is global within its precompilation unit, like a cursor declaration.<a id="sthref2118"></a><a id="sthref2119"></a> For more information on this statement, see <a href="pco09dyn.htm#i3409">&#34;DECLARE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1454"></a>Example I<a id="sthref2120"></a></p>
<p>This example illustrates the use of the DECLARE STATEMENT statement:</p>
<pre>     EXEC SQL AT REMOTEDB 
         DECLARE MYSTATEMENT STATEMENT 
     END-EXEC.
     EXEC SQL PREPARE MYSTATEMENT FROM :MY-STRING
     END-EXEC.
     EXEC SQL EXECUTE MYSTATEMENT END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1455"></a>Example II</p>
<p>In this example, the DECLARE STATEMENT statement is required because the DECLARE CURSOR statement precedes the PREPARE statement:</p>
<pre>     EXEC SQL DECLARE MYSTATEMENT STATEMENT END-EXEC. 
     ...
     EXEC SQL DECLARE EMPCURSOR CURSOR FOR MYSTATEMENT END-EXEC. 
     ...
     EXEC SQL PREPARE MYSTATEMENT FROM :MY-STRING END-EXEC. 
     ...
</pre>
<p class="subhead1"><a id="LNPCB1456"></a>Related Topics</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#i12800">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#i12809">OPEN (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i13566"></a>
<div id="LNPCB1457" class="sect1">
<h2 class="sect1">DECLARE TABLE (Oracle Embedded SQL Directive)<a id="sthref2121"></a><a id="sthref2122"></a> <a id="sthref2123"></a></h2>
<p class="subhead1"><a id="LNPCB1458"></a>Purpose</p>
<p>To define the structure of a table or view, including each column&#39;s datatype, default value, and NULL or NOT NULL specification for semantic checking by the precompiler when option SQLCHECK=SEMANTICS (or FULL).</p>
<p class="subhead1"><a id="LNPCB1459"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1460"></a>Syntax</p>
<img width="496" height="128" src="img/dcltab.gif" alt="DECLARE TABLE"/><br/>
<a id="sthref2124" href="img_text/dcltab.htm">Description of the illustration dcltab.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1461"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for declare table statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t18">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t18" headers="r1c1-t18"><span class="italic">table</span></td>
<td class="cellalignment4973" headers="r2c1-t18 r1c2-t18">The name of the declared table.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t18" headers="r1c1-t18"><span class="italic">column</span></td>
<td class="cellalignment4973" headers="r3c1-t18 r1c2-t18">A column of the <span class="italic">table</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t18" headers="r1c1-t18"><span class="italic">datatype</span></td>
<td class="cellalignment4973" headers="r4c1-t18 r1c2-t18">The datatype of a <span class="italic">column</span>. For information on Oracle datatypes, see <a href="pco04dat.htm#i22898">&#34;The Oracle Database Datatypes&#34;</a>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t18" headers="r1c1-t18">NOT NULL</td>
<td class="cellalignment4973" headers="r5c1-t18 r1c2-t18">Specifies that a <span class="italic">column</span> cannot contain nulls.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1462"></a>Usage Notes</p>
<p>Datatypes can only use integers (not expressions) for length, precision, scale. For more information on using this statement, see <a href="pcoaechk.htm#i1415">&#34;Specifying SQLCHECK=SEMANTICS&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1463"></a>Example</p>
<p><a id="sthref2125"></a>The following statement declares the PARTS table with the PARTNO, BIN, and QTY columns:</p>
<pre>     EXEC SQL DECLARE PARTS TABLE 
         (PARTNO  NUMBER  NOT NULL, 
          BIN     NUMBER, 
          QTY     NUMBER) 
     END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1464"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="sect1" -->
<a id="i12827"></a>
<div id="LNPCB1465" class="sect1">
<h2 class="sect1">DELETE (Executable Embedded SQL)<a id="sthref2126"></a><a id="sthref2127"></a> <a id="sthref2128"></a></h2>
<p class="subhead1"><a id="LNPCB1466"></a>Purpose</p>
<p>To remove rows from a table or from a view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCB1467"></a>Prerequisites</p>
<p>For you to delete rows from a table, the table must be in your own schema or you must have DELETE privilege on the table.</p>
<p>For you to delete rows from the base table of a view, the owner of the schema containing the view must have DELETE privilege on the base table. Also, if the view is in a schema other than your own, you must be granted DELETE privilege on the view.</p>
<p>The DELETE ANY TABLE system privilege also enables you to delete rows from any table or any view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCB1468"></a>Syntax</p>
<img width="496" height="304" src="img/delete.gif" alt="DELETE"/><br/>
<a id="sthref2129" href="img_text/delete.htm">Description of the illustration delete.gif</a><br/>
<br/>
<p>where the DML Returning clause is:</p>
<img width="592" height="128" src="img/return.gif" alt="return clause"/><br/>
<a id="sthref2130" href="img_text/return.htm">Description of the illustration return.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1469"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for delete statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t19">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t19" headers="r1c1-t19">AT</td>
<td class="cellalignment4973" headers="r2c1-t19 r1c2-t19">Identifies the database to which the DELETE statement is issued. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t19" headers="r1c1-t19"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t19 r1c2-t19">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t19" headers="r1c1-t19"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t19 r1c2-t19">A host variable whose value is a previously declared <span class="italic">db_name</span>. If you omit this clause, the DELETE statement is issued to your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t19" headers="r1c1-t19"><span class="italic">host_integer</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r5c1-t19 r1c2-t19">Limits the number of times the statement is executed if the WHERE clause contains array host variables. If you omit this clause, Oracle executes the statement once for each component of the smallest array.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t19" headers="r1c1-t19"><span class="italic">schema</span></td>
<td class="cellalignment4973" headers="r6c1-t19 r1c2-t19">The schema containing the table or view. If you omit <span class="italic">schema</span>, Oracle assumes the table or view is in your own schema.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t19" headers="r1c1-t19"><span class="italic">table view</span></td>
<td class="cellalignment4973" headers="r7c1-t19 r1c2-t19">The name of a table from which the rows are to be deleted. If you specify <span class="italic">view</span>, Oracle deletes rows from the view&#39;s base table.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t19" headers="r1c1-t19"><span class="italic">dblink</span></td>
<td class="cellalignment4973" headers="r8c1-t19 r1c2-t19"><a id="sthref2131"></a>The complete or partial name of a database link to a remote database where the table or view is located. For information on referring to database links, see Chapter 2 of the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a> You can only delete rows from a remote table or view if you are using Oracle with the distributed option.
<p>If you omit <span class="italic">dblink</span>, Oracle assumes that the table or view is located on the local database.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t19" headers="r1c1-t19"><span class="italic">part_name</span></td>
<td class="cellalignment4973" headers="r9c1-t19 r1c2-t19">Name of partition in the table</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t19" headers="r1c1-t19"><span class="italic">alias</span></td>
<td class="cellalignment4973" headers="r10c1-t19 r1c2-t19">The alias assigned to the table. Aliases are generally used in DELETE statements with correlated queries.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t19" headers="r1c1-t19">WHERE</td>
<td class="cellalignment4973" headers="r11c1-t19 r1c2-t19"><a id="sthref2132"></a>Specifies which rows are deleted:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t19" headers="r1c1-t19">&nbsp;</td>
<td class="cellalignment4973" headers="r12c1-t19 r1c2-t19"><span class="italic">condition</span></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t19" headers="r1c1-t19">&nbsp;</td>
<td class="cellalignment4973" headers="r13c1-t19 r1c2-t19">CURRENT OF</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r14c1-t19" headers="r1c1-t19">&nbsp;</td>
<td class="cellalignment4973" headers="r14c1-t19 r1c2-t19">If you omit this clause entirely, Oracle deletes all rows from the table or view.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r15c1-t19" headers="r1c1-t19"><span class="italic">DML returning clause</span></td>
<td class="cellalignment4973" headers="r15c1-t19 r1c2-t19">See <a href="pco05sql.htm#i6276">&#34;DML Returning Clause&#34;</a> for a discussion.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1470"></a>Usage Notes</p>
<p>The host variables in the WHERE clause should be either all scalars or all arrays. If they are scalars, Oracle executes the DELETE statement only once. If they are arrays, Oracle executes the statement once for each set of array components. Each execution may delete zero, one, or multiple rows.</p>
<p>Array host variables in the WHERE clause can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>the size of the smallest array</p>
</li>
<li>
<p>the value of the <span class="italic">host_integer</span> in the optional FOR clause</p>
</li>
</ul>
<p>If no rows satisfy the condition, no rows are deleted and the SQLCODE returns a NOT_FOUND condition.</p>
<p>The cumulative number of rows deleted is returned through the SQLCA. If the WHERE clause contains array host variables, this value reflects the total number of rows deleted for all components of the array processed by the DELETE statement.</p>
<p>If no rows satisfy the condition, Oracle returns an error through the SQLCODE of the SQLCA. If you omit the WHERE clause, Oracle raises a warning flag in the fifth component of SQLWARN in the SQLCA. For more information on this statement and the SQLCA, see <a href="pco08err.htm#i16095">&#34;Using the SQL Communications Area&#34;</a>.</p>
<p>You can use comments in a DELETE statement to pass instructions, or <span class="italic">hints</span>,<a id="sthref2133"></a> to the Oracle optimizer. The optimizer uses hints to choose an execution plan for the statement. For more information on hints, see <a class="olink TGDBA94417" href="../TGDBA/pfgrf_os.htm#TGDBA94417"><span class="italic">Oracle Database Performance Tuning Guide.</span></a></p>
<p class="subhead1"><a id="LNPCB1471"></a>Example</p>
<p><a id="sthref2134"></a>This example illustrates the use of the DELETE statement:</p>
<pre>     EXEC SQL DELETE FROM EMP
        WHERE DEPTNO = :DEPTNO
        AND JOB = :JOB
    END-EXEC.
    EXEC SQL DECLARE EMPCURSOR CURSOR
        FOR SELECT EMPNO, COMM
        FROM EMP
    END-EXEC.
    EXEC SQL OPEN EMPCURSOR END-EXEC.
    EXEC SQL FETCH EMPCURSOR
        INTO :EMP-NUMBER, :COMMISSION
    END-EXEC.
    EXEC SQL DELETE FROM EMP
        WHERE CURRENT OF EMPCURSOR
    END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1472"></a>Related Topics</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#i12826">DECLARE STATEMENT (Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i13581"></a>
<div id="LNPCB1473" class="sect1">
<h2 class="sect1">DESCRIBE (Executable Embedded SQL)<a id="sthref2135"></a><a id="sthref2136"></a> <a id="sthref2137"></a></h2>
<p class="subhead1"><a id="LNPCB1474"></a>Purpose</p>
<p>To initialize a descriptor to hold descriptions of host variables for an Oracle dynamic SQL statement or PL/SQL block.<a id="sthref2138"></a></p>
<p class="subhead1"><a id="LNPCB1475"></a>Prerequisites</p>
<p>You must have prepared the SQL statement or PL/SQL block in a previous embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCB1476"></a>Syntax</p>
<img width="496" height="112" src="img/describe.gif" alt="DESCRIBE"/><br/>
<a id="sthref2139" href="img_text/describe.htm">Description of the illustration describe.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1477"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for describe statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t20">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t20" headers="r1c1-t20">BIND VARIABLES FOR</td>
<td class="cellalignment4973" headers="r2c1-t20 r1c2-t20">Initializes the descriptor to hold information about the input variables for the SQL statement or PL/SQL block.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t20" headers="r1c1-t20">SELECT LIST FOR</td>
<td class="cellalignment4973" headers="r3c1-t20 r1c2-t20">Initializes the descriptor to hold information about the select list of a SELECT statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t20" headers="r1c1-t20">-</td>
<td class="cellalignment4973" headers="r4c1-t20 r1c2-t20">The default is SELECT LIST FOR.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t20" headers="r1c1-t20"><span class="italic">statement_name</span></td>
<td class="cellalignment4973" headers="r5c1-t20 r1c2-t20">Identifies a SQL statement or PL/SQL block previously prepared with a PREPARE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t20" headers="r1c1-t20"><span class="italic">descriptor</span></td>
<td class="cellalignment4973" headers="r6c1-t20 r1c2-t20"><a id="sthref2140"></a>The name of the descriptor to be initialized.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1478"></a>Usage Notes</p>
<p>You must issue a DESCRIBE statement before manipulating the bind or select descriptor within an embedded SQL program.</p>
<p>You cannot describe both input variables and output variables into the same descriptor.</p>
<p>The number of variables found by a DESCRIBE statement is the total number of placeholders in the prepare SQL statement or PL/SQL block, rather than the total number of uniquely named placeholders. For more information on this statement, see <a href="pco09dyn.htm#i3410">&#34;The DESCRIBE Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1479"></a>Example</p>
<p><a id="sthref2141"></a>This example illustrates the use of the DESCRIBE statement in a Pro*COBOL embedded SQL program:</p>
<pre>     EXEC SQL PREPARE MYSTATEMENT FROM :MY-STRING END-EXEC. 
     EXEC SQL DECLARE EMPCURSOR 
         FOR SELECT EMPNO, ENAME, SAL, COMM 
         FROM EMP 
         WHERE DEPTNO = :DEPT-NUMBER 
     END-EXEC.
     EXEC SQL DESCRIBE BIND VARIABLES FOR MYSTATEMENT 
         INTO BINDDESCRIPTOR
     END-EXEC. 
     EXEC SQL OPEN EMPCURSOR 
         USING BINDDESCRIPTOR
     END-EXEC. 
     EXEC SQL DESCRIBE SELECT LIST FOR MY-STATEMENT 
         INTO SELECTDESCRIPTOR
     END-EXEC. 
     EXEC SQL FETCH EMPCURSOR 
         INTO SELECTDESCRIPTOR
     END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1480"></a>Related Topics</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18533"></a>
<div id="LNPCB1481" class="sect1">
<h2 class="sect1">DESCRIBE DESCRIPTOR (Executable Embedded SQL)<a id="sthref2142"></a><a id="sthref2143"></a><a id="sthref2144"></a></h2>
<p class="subhead1"><a id="LNPCB1482"></a>Purpose</p>
<p>Used to obtain information about an ANSI SQL statement, and to store it in a descriptor.</p>
<p class="subhead1"><a id="LNPCB1483"></a>Prerequisites</p>
<p>You must have prepared the SQL statement in a previous embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCB1484"></a>Syntax</p>
<img width="496" height="160" src="img/descans.gif" alt="DESCRIBE DESCRIPTOR"/><br/>
<a id="sthref2145" href="img_text/descans.htm">Description of the illustration descans.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1485"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for describe descriptor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t21">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t21" headers="r1c1-t21"><span class="italic">statement_id</span></td>
<td class="cellalignment4973" headers="r2c1-t21 r1c2-t21">The name of the previously prepared SQL statement or PL/SQL block. OUTPUT is the default.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t21" headers="r1c1-t21"><span class="italic">desc_name</span></td>
<td class="cellalignment4973" headers="r3c1-t21 r1c2-t21">Host variable containing the name of the descriptor that will hold information about the SQL statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t21" headers="r1c1-t21"><span class="italic">&#39;descriptor name&#39;</span></td>
<td class="cellalignment4973" headers="r4c1-t21 r1c2-t21">Name of the descriptor</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t21" headers="r1c1-t21">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r5c1-t21 r1c2-t21">LOCAL is the default. It means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1486"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option. Only COUNT and NAME are implemented for the INPUT descriptor.</p>
<p>The number of variables found by a DESCRIBE statement is the total number of place-holders in the prepare SQL statement or PL/SQL block, rather than the total number of uniquely named place-holders. For more information on this statement, see <a href="pco10ady.htm#g1024116">Chapter 10, &#34;ANSI Dynamic SQL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1487"></a>Example</p>
<pre>     EXEC SQL PREPARE s FROM :my_stament END-EXEC. 
     EXEC SQL DESCRIBE INPUT s USING DESCRIPTOR &#39;in&#39; END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1488"></a>Related Topics</p>
<p><a href="#i18519">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i19201">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)</a>.</p>
<p><a href="#i18535">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#i18540">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i26109"></a>
<div id="LNPCB1489" class="sect1">
<h2 class="sect1">ENABLE THREADS (Executable Embedded SQL Extension)<a id="sthref2146"></a><a id="sthref2147"></a><a id="sthref2148"></a></h2>
<p class="subhead1"><a id="LNPCB1490"></a>Purpose</p>
<p>To initialize a process that supports multiple threads.</p>
<p class="subhead1"><a id="LNPCB1491"></a>Prerequisites</p>
<p>You must be developing a precompiler application for and compiling it on a platform that supports multithreaded applications, and THREADS=YES must be specified on the command line.</p>
<p class="subhead1"><a id="LNPCB1492"></a>Syntax</p>
<img width="496" height="48" src="img/enable_t.gif" alt="ENABLE THREADS"/><br/>
<a id="sthref2149" href="img_text/enable_t.htm">Description of the illustration enable_t.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1493"></a>Keywords and Parameters</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1494"></a>Usage Notes</p>
<p>The ENABLE THREADS statement must be executed once, and only once, before any other executable SQL statement and before spawning any threads. This statement does not require a host-variable specification.</p>
<p class="subhead1"><a id="LNPCB1495"></a>Example</p>
<p>This example illustrates the use of the ENABLE THREADS statement in a Pro*COBOL program:</p>
<pre>EXEC SQL ENABLE THREADS END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1496"></a>Related Topics</p>
<p><a href="#i18514">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#i18524">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#i18529">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i13589"></a>
<div id="LNPCB1497" class="sect1">
<h2 class="sect1">EXECUTE ... END-EXEC (Executable Embedded SQL Extension)<a id="sthref2150"></a><a id="sthref2151"></a> <a id="sthref2152"></a></h2>
<p class="subhead1"><a id="LNPCB1498"></a>Purpose</p>
<p>To embed an anonymous PL/SQL block into an Oracle Pro*COBOL program.<a id="sthref2153"></a><a id="sthref2154"></a></p>
<p class="subhead1"><a id="LNPCB1499"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1500"></a>Syntax</p>
<img width="496" height="96" src="img/execeex.gif" alt="EXECUTE ... END-EXEC"/><br/>
<a id="sthref2155" href="img_text/execeex.htm">Description of the illustration execeex.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1501"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for execute...end-exec statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t22">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t22" headers="r1c1-t22">AT</td>
<td class="cellalignment4973" headers="r2c1-t22 r1c2-t22"><a id="sthref2156"></a>Identifies the database on which the PL/SQL block is executed. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t22" headers="r1c1-t22"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t22 r1c2-t22">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t22" headers="r1c1-t22"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t22 r1c2-t22">A host variable whose value is a previously declared <span class="italic">db_name</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t22" headers="r1c1-t22">&nbsp;</td>
<td class="cellalignment4973" headers="r5c1-t22 r1c2-t22">If you omit this clause, the PL/SQL block is executed on your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t22" headers="r1c1-t22"><span class="italic">pl/sql_block</span></td>
<td class="cellalignment4973" headers="r6c1-t22 r1c2-t22">For information on PL/SQL, including how to write PL/SQL blocks, see the <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t22" headers="r1c1-t22">END-EXEC</td>
<td class="cellalignment4973" headers="r7c1-t22 r1c2-t22">Must appear after the embedded PL/SQL block.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1502"></a>Usage Notes</p>
<p>Since the Oracle Precompilers treat an embedded PL/SQL block like a single embedded SQL statement, you can embed a PL/SQL block anywhere in an Oracle Precompiler program that you can embed a SQL statement. For more information on embedding PL/SQL blocks in Oracle Precompiler programs, see <a href="pco06pls.htm#g33607">Chapter 6, &#34;Embedded PL/SQL&#34;</a><span class="italic">.</span></p>
<p class="subhead1"><a id="LNPCB1503"></a>Example</p>
<p><a id="sthref2157"></a>Placing this EXECUTE statement in an Oracle Precompiler program embeds a PL/SQL block in the program:</p>
<pre>     EXEC SQL EXECUTE 
     BEGIN 
        SELECT ENAME, JOB, SAL 
            INTO :EMP-NAME:IND-NAME, :JOB-TITLE, :SALARY 
            FROM EMP 
            WHERE EMPNO = :EMP-NUMBER; 
        IF :EMP-NAME:IND-NAME IS NULL 
            THEN RAISE NAME-MISSING; 
        END IF; 
     END; 
     END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1504"></a>Related Topics</p>
<p><a href="#i12849">EXECUTE IMMEDIATE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12797"></a>
<div id="LNPCB1505" class="sect1">
<h2 class="sect1">EXECUTE (Executable Embedded SQL)<a id="sthref2158"></a><a id="sthref2159"></a><a id="sthref2160"></a><a id="sthref2161"></a></h2>
<p class="subhead1"><a id="LNPCB1506"></a>Purpose</p>
<p>In Oracle dynamic SQL, to execute a DELETE, INSERT, or UPDATE statement or a PL/SQL block that has been previously prepared with an embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCB1507"></a>Prerequisites</p>
<p>You must first prepare the SQL statement or PL/SQL block with an embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCB1508"></a>Syntax</p>
<img width="496" height="224" src="img/execo.gif" alt="EXECUTE"/><br/>
<a id="sthref2162" href="img_text/execo.htm">Description of the illustration execo.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1509"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for execute statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t23">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t23" headers="r1c1-t23">FOR <span class="italic">:array_size</span>
<p>FOR <span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t23 r1c2-t23"><a id="sthref2163"></a>Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
<p>Limits the number of times the statement is executed when the USING clause contains array host variables If you omit this clause, Oracle executes the statement once for each component of the smallest array.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t23" headers="r1c1-t23"><span class="italic">statement_id</span></td>
<td class="cellalignment4973" headers="r3c1-t23 r1c2-t23">A precompiler identifier associated with the SQL statement or PL/SQL block to be executed. Use the embedded SQL PREPARE statement to associate the precompiler identifier with the statement or PL/SQL block.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t23" headers="r1c1-t23">USING DESCRIPTOR <span class="italic">SQLDA_descriptor</span></td>
<td class="cellalignment4973" headers="r4c1-t23 r1c2-t23">Uses an Oracle descriptor.
<p>CANNOT be used together with an ANSI descriptor (INTO clause).</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t23" headers="r1c1-t23">USING</td>
<td class="cellalignment4973" headers="r5c1-t23 r1c2-t23">Specifies a list of host variables with optional indicator variables that Oracle substitutes as input variables into the statement to be executed. The host and indicator variables must be either all scalars or all arrays.<a id="sthref2164"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t23" headers="r1c1-t23"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r6c1-t23 r1c2-t23">Host variables.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t23" headers="r1c1-t23"><span class="italic">indicator_variable</span></td>
<td class="cellalignment4973" headers="r7c1-t23 r1c2-t23">Indicator variables.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1510"></a>Usage Note</p>
<p>For more information on this statement, see <a href="pco09dyn.htm#g19788">Chapter 9, &#34;Oracle Dynamic SQL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1511"></a>Example</p>
<p><a id="sthref2165"></a>This example illustrates the use of the EXECUTE statement in a Pro*COBOL embedded SQL program:</p>
<pre>     EXEC SQL PREPARE MY-STATEMENT FROM MY-STRING END-EXEC. 
     EXEC SQL EXECUTE MY-STATEMENT USING :MY-VAR END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1512"></a>Related Topics</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i21036"></a>
<div id="LNPCB1513" class="sect1">
<h2 class="sect1">EXECUTE DESCRIPTOR (Executable Embedded SQL<a id="sthref2166"></a></h2>
<p class="subhead1"><a id="LNPCB1514"></a>Purpose</p>
<p>In ANSI SQL Method 4, to execute a DELETE, INSERT, or UPDATE statement or a PL/SQL block that has been previously prepared with an embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCB1515"></a>Prerequisites</p>
<p>You must first prepare the SQL statement or PL/SQL block with an embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCB1516"></a>Syntax</p>
<img width="592" height="288" src="img/execa.gif" alt="EXECUTE DESCRIPTOR"/><br/>
<a id="sthref2167" href="img_text/execa.htm">Description of the illustration execa.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1517"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for execute descriptor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t24">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t24" headers="r1c1-t24">FOR <span class="italic">:array_size</span>
<p>FOR <span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t24 r1c2-t24"><a id="sthref2168"></a>Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
<p>Limits the number of times the statement is executed. Oracle executes the statement once for each component of the smallest array.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t24" headers="r1c1-t24"><span class="italic">statement_id</span></td>
<td class="cellalignment4973" headers="r3c1-t24 r1c2-t24">A precompiler identifier associated with the SQL statement or PL/SQL block to be executed. Use the embedded SQL PREPARE statement to associate the precompiler identifier with the statement or PL/SQL block.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t24" headers="r1c1-t24">USING
<p><span class="italic">descriptor_name</span></p>
<p><span class="italic">descriptor name</span></p>
</td>
<td class="cellalignment4973" headers="r4c1-t24 r1c2-t24">An ANSI input descriptor.
<p>Host variable containing name of the input descriptor.</p>
<p>Name of the input descriptor.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t24" headers="r1c1-t24"><span class="italic">INTO</span>
<p><span class="italic">descriptor_name</span></p>
<p><span class="italic">descriptor name</span></p>
</td>
<td class="cellalignment4973" headers="r5c1-t24 r1c2-t24">An ANSI output descriptor.
<p>Host variable containing the name of the output descriptor.</p>
<p>Name of the output descriptor.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t24" headers="r1c1-t24">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r6c1-t24 r1c2-t24">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1518"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pco10ady.htm#i1007416">&#34;EXECUTE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1519"></a>Examples</p>
<p>The ANSI dynamic SQL Method 4 enables DML RETURNING in a SELECT to be supported by the INTO clause in EXECUTE:</p>
<pre>EXEC SQL EXECUTE S2 USING DESCRIPTOR :bv1 INTO DESCRIPTOR &#39;SELDES&#39; END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1520"></a>Related Topics</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12849"></a>
<div id="LNPCB1521" class="sect1">
<h2 class="sect1">EXECUTE IMMEDIATE (Executable Embedded SQL)<a id="sthref2169"></a><a id="sthref2170"></a><a id="sthref2171"></a></h2>
<p class="subhead1"><a id="LNPCB1522"></a>Purpose</p>
<p>To prepare and execute a DELETE, INSERT, or UPDATE statement or a PL/SQL block containing no host variables.</p>
<p class="subhead1"><a id="LNPCB1523"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1524"></a>Syntax</p>
<img width="496" height="160" src="img/execi.gif" alt="EXECUTE IMMEDIATE"/><br/>
<a id="sthref2172" href="img_text/execi.htm">Description of the illustration execi.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1525"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for execute immediate statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t25">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t25" headers="r1c1-t25">AT</td>
<td class="cellalignment4973" headers="r2c1-t25 r1c2-t25"><a id="sthref2173"></a>Identifies the database on which the SQL statement or PL/SQL block is executed. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t25" headers="r1c1-t25"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t25 r1c2-t25">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t25" headers="r1c1-t25"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t25 r1c2-t25">A host variable whose value is a previously declared <span class="italic">db_name</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t25" headers="r1c1-t25">&nbsp;</td>
<td class="cellalignment4973" headers="r5c1-t25 r1c2-t25">If you omit this clause, the statement or block is executed on your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t25" headers="r1c1-t25"><span class="italic">host_string</span></td>
<td class="cellalignment4973" headers="r6c1-t25 r1c2-t25">A host variable whose value is the SQL statement or PL/SQL block to be executed.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t25" headers="r1c1-t25"><span class="italic">text</span></td>
<td class="cellalignment4973" headers="r7c1-t25 r1c2-t25">A text literal containing the SQL statement or PL/SQL block to be executed. The quotes may be omitted.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t25" headers="r1c1-t25">&nbsp;</td>
<td class="cellalignment4973" headers="r8c1-t25 r1c2-t25">The SQL statement can only be a DELETE, INSERT, or UPDATE statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1526"></a>Usage Notes</p>
<p>When you issue an EXECUTE IMMEDIATE statement, Oracle parses the specified SQL statement or PL/SQL block, checking for errors, and executes it. If any errors are encountered, they are returned in the SQLCODE component of the SQLCA.</p>
<p>For more information on this statement, see <a href="pco09dyn.htm#i3411">&#34;The EXECUTE IMMEDIATE Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1527"></a>Example</p>
<p><a id="sthref2174"></a>This example illustrates the use of the EXECUTE IMMEDIATE statement:</p>
<pre>     EXEC SQL
         EXECUTE IMMEDIATE &#39;DELETE FROM EMP WHERE EMPNO = 9460&#39;
     END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1528"></a>Related Topics</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12797">EXECUTE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12800"></a>
<div id="LNPCB1529" class="sect1">
<h2 class="sect1">FETCH (Executable Embedded SQL)<a id="sthref2175"></a><a id="sthref2176"></a><a id="sthref2177"></a><a id="sthref2178"></a><a id="sthref2179"></a><a id="sthref2180"></a></h2>
<p class="subhead1"><a id="LNPCB1530"></a>Purpose</p>
<p>To retrieve one or more rows returned by a query, assigning the select list values to host variables. For ANSI Dynamic SQL Method 4, see <a href="#i20706">&#34;FETCH DESCRIPTOR (Executable Embedded SQL)&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1531"></a>Prerequisites</p>
<p>You must first open the cursor with an the OPEN statement.</p>
<p class="subhead1"><a id="LNPCB1532"></a>Syntax</p>
<img width="496" height="224" src="img/fetcho.gif" alt="FETCH"/><br/>
<a id="sthref2181" href="img_text/fetcho.htm">Description of the illustration fetcho.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1533"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for fetch statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t26">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t26" headers="r1c1-t26">FOR <span class="italic">:array_size</span>
<p>FOR <span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t26 r1c2-t26">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
<p>Limits the number of rows fetched if you are using array host variables. If you omit this clause, Oracle fetches enough rows to fill the smallest array.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t26" headers="r1c1-t26"><span class="italic">cursor</span></td>
<td class="cellalignment4973" headers="r3c1-t26 r1c2-t26">A cursor that is declared by a DECLARE CURSOR statement. The FETCH statement returns one of the rows selected by the query associated with the cursor.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t26" headers="r1c1-t26"><span class="italic">cursor_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t26 r1c2-t26">A cursor variable is allocated an ALLOCATE statement. The FETCH statement returns one of the rows selected by the query associated with the cursor variable.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t26" headers="r1c1-t26">INTO</td>
<td class="cellalignment4973" headers="r5c1-t26 r1c2-t26"><a id="sthref2182"></a>Specifies a list of host variables and optional indicator variables into which data is fetched. These host variables and indicator variables must be declared within the program.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t26" headers="r1c1-t26">USING <span class="italic">SQLDA_variable</span></td>
<td class="cellalignment4973" headers="r6c1-t26 r1c2-t26"><a id="sthref2183"></a>Specifies the Oracle descriptor referenced in a previous DESCRIBE statement. Only use this clause with dynamic embedded SQL, method 4. The USING clause does not apply when a cursor variable is used.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t26" headers="r1c1-t26"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r7c1-t26 r1c2-t26">The host variable into which data is returned.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t26" headers="r1c1-t26">i<span class="italic">ndicator_variable</span></td>
<td class="cellalignment4973" headers="r8c1-t26 r1c2-t26">The host indicator variable.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1534"></a>Usage Notes</p>
<p>The FETCH statement reads the rows of the active set and names the output variables which contain the results. Indicator values are set to -1 if their associated host variable is null.</p>
<p>The number of rows retrieved is specified by the size of the output host variables or the value specified in the FOR clause. The host variables to receive the data should be either all scalars or all arrays. If they are scalars, Oracle fetches only one row. If they are arrays, Oracle fetches enough rows to fill the arrays.</p>
<p>Array host variables can have different sizes. In this case, the number of rows Oracle fetches is determined by the smaller of the following values:</p>
<ul>
<li>
<p>The size of the smallest array</p>
</li>
<li>
<p>The value of the <span class="italic">host_integer</span> in the optional FOR clause</p>
</li>
</ul>
<p>Of course, the number of rows fetched can be further limited by the number of rows that actually satisfy the query.</p>
<p>If a FETCH statement does not retrieve all rows returned by the query, the cursor is positioned on the next returned row. When the last row returned by the query has been retrieved, the next FETCH statement results in an warning code returned in the SQLCODE element of the SQLCA.</p>
<p>If the array is not completely filled then the warning is issued and you should check SQLERRD(3) to see how many rows were actually fetched.</p>
<p>Note that the FETCH statement does not contain an AT clause. You must specify the database accessed by the cursor in the DECLARE CURSOR statement.</p>
<p>You can only move forward through the active set with FETCH statements. If you want to revisit any of the previously fetched rows, you must reopen the cursor and fetch each row in turn. If you want to change the active set, you must assign new values to the input host variables in the cursor&#39;s query and reopen the cursor.</p>
<p class="subhead1"><a id="LNPCB1535"></a>Example</p>
<p><a id="sthref2184"></a>This example illustrates the FETCH statement in a Pro*COBOL embedded SQL program:</p>
<pre>     EXEC SQL DECLARE EMPCURSOR CURSOR FOR 
         SELECT JOB, SAL FROM EMP WHERE DEPTNO = 30
     END-EXEC. 
     ... 
     EXEC SQL WHENEVER NOT FOUND GOTO ... 
 LOOP. 
     EXEC SQL FETCH EMPCURSOR INTO :JOB-TITLE1, :SALARY1 END-EXEC. 
     EXEC SQL FETCH EMPCURSOR INTO :JOB-TITLE2, :SALARY2 END-EXEC. 
     ... 
     GO TO LOOP. 
     ... 
</pre>
<p class="subhead1"><a id="LNPCB1536"></a>Related Topics</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#i12809">OPEN (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i20706"></a>
<div id="LNPCB1537" class="sect1">
<h2 class="sect1">FETCH DESCRIPTOR (Executable Embedded SQL)<a id="sthref2185"></a><a id="sthref2186"></a><a id="sthref2187"></a><a id="sthref2188"></a><a id="sthref2189"></a><a id="sthref2190"></a><a id="sthref2191"></a> <a id="sthref2192"></a><a id="sthref2193"></a></h2>
<p class="subhead1"><a id="LNPCB1538"></a>Purpose</p>
<p>To retrieve one or more rows returned by a query, assigning the select list values to host variables. Used in ANSI Dynamic SQL Method 4.</p>
<p class="subhead1"><a id="LNPCB1539"></a>Prerequisites</p>
<p>You must first open the cursor with an the OPEN statement.</p>
<p class="subhead1"><a id="LNPCB1540"></a>Syntax</p>
<img width="496" height="192" src="img/fetcha.gif" alt="FETCH DESCRIPTOR"/><br/>
<a id="sthref2194" href="img_text/fetcha.htm">Description of the illustration fetcha.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1541"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for fetch descriptor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t27">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t27" headers="r1c1-t27"><span class="italic">FOR :array_size</span>
<p><span class="italic">FOR integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t27 r1c2-t27">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
<p>Limits the number of rows fetched if you are using array host variables. If you omit this clause, Oracle fetches enough rows to fill the smallest array.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t27" headers="r1c1-t27"><span class="italic">cursor</span></td>
<td class="cellalignment4973" headers="r3c1-t27 r1c2-t27">A cursor that is declared by a DECLARE CURSOR statement. The FETCH statement returns one of the rows selected by the query associated with the cursor.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t27" headers="r1c1-t27"><span class="italic">cursor_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t27 r1c2-t27">A cursor variable is allocated an ALLOCATE statement. The FETCH statement returns one of the rows selected by the query associated with the cursor variable.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t27" headers="r1c1-t27">INTO</td>
<td class="cellalignment4973" headers="r5c1-t27 r1c2-t27"><a id="sthref2195"></a>Specifies a list of host variables and optional indicator variables into which data is fetched. These host variables and indicator variables must be declared within the program.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t27" headers="r1c1-t27">INTO <span class="italic">&#39;descriptor name&#39;</span>
<p>INTO <span class="italic">:descriptor_name</span></p>
</td>
<td class="cellalignment4973" headers="r6c1-t27 r1c2-t27">Name of the output ANSI descriptor.
<p>Host variable containing the name of the output descriptor.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t27" headers="r1c1-t27">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r7c1-t27 r1c2-t27">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1542"></a>Usage Notes</p>
<p>The number of rows retrieved is specified by the size of the output host variables and the value specified in the FOR clause. The host variables to receive the data should be either all scalars or all arrays. If they are scalars, Oracle fetches only one row. If they are arrays, Oracle fetches enough rows to fill the arrays.</p>
<p>Array host variables can have different sizes. In this case, the number of rows Oracle fetches is determined by the smaller of the following values:</p>
<ul>
<li>
<p>The size of the smallest array</p>
</li>
<li>
<p>The value of the <span class="italic">array_size</span> in the optional FOR clause</p>
</li>
<li>
<p>Of course, the number of rows fetched can be further limited by the number of rows that actually satisfy the query.</p>
</li>
</ul>
<p>If a FETCH statement does not retrieve all rows returned by the query, the cursor is positioned on the next returned row. When the last row returned by the query has been retrieved, the next FETCH statement results in a warning code returned in the SQLCODE element of the SQLCA.</p>
<p>If the array is not completely filled then the warning is issued and you should check SQLERRD(3) to see how many rows were actually fetched.</p>
<p>Note that the FETCH statement does not contain an AT clause. You must specify the database accessed by the cursor in the DECLARE CURSOR statement.</p>
<p>You can only move forward through the active set with FETCH statements. If you want to revisit any of the previously fetched rows, you must reopen the cursor and fetch each row in turn. If you want to change the active set, you must assign new values to the input host variables in the cursor&#39;s query and reopen the cursor.</p>
<p>Use DYNAMIC=ANSI precompiler option for the ANSI SQL Method 4 application. For more information, see <a href="pco10ady.htm#i1007925">&#34;FETCH&#34;</a> for the ANSI SQL Method 4 application.</p>
<p class="subhead1"><a id="LNPCB1543"></a>Example</p>
<pre>...
EXEC SQL ALLOCATE DESCRIPTOR &#39;output_descriptor&#39; END-EXEC.
...
EXEC SQL PREPARE S FROM :dyn_statement END-EXEC.
EXEC SQL DECLARE mycursor CURSOR FOR S END-EXEC.
...
EXEC SQL FETCH mycursor INTO DESCRIPTOR &#39;output_descriptor&#39; END-EXEC.
...
</pre>
<p class="subhead1"><a id="LNPCB1544"></a>Related Topics</p>
<p>PREPARE statement.</p>
</div>
<!-- class="sect1" -->
<a id="i24648"></a>
<div id="LNPCB1545" class="sect1">
<h2 class="sect1"><a id="sthref2196"></a><a id="sthref2197"></a>FREE (Executable Embedded SQL Extension)<a id="sthref2198"></a><a id="sthref2199"></a><a id="sthref2200"></a></h2>
<p class="subhead1"><a id="LNPCB1546"></a>Purpose</p>
<p>To free memory used by a cursor, LOB locator, or ROWID.</p>
<p class="subhead1"><a id="LNPCB1547"></a>Prerequisites</p>
<p>The memory has to have been already allocated.</p>
<p class="subhead1"><a id="LNPCB1548"></a>Syntax</p>
<img width="496" height="64" src="img/freecob.gif" alt="FREE"/><br/>
<a id="sthref2201" href="img_text/freecob.htm">Description of the illustration freecob.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1549"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for free statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t28">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t28" headers="r1c1-t28"><span class="italic">cursor_variable</span></td>
<td class="cellalignment4973" headers="r2c1-t28 r1c2-t28">A cursor variable that has previously been allocated in an ALLOCATE statement. It is of type SQL-CURSOR.
<p>The FETCH statement returns one of the rows selected by the query associated with the cursor variable.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t28" headers="r1c1-t28"><span class="italic">host_ptr</span></td>
<td class="cellalignment4973" headers="r3c1-t28 r1c2-t28">A variable of type SQL-ROWID for a ROWID, or SQL-BLOB, SQL-CLOB, or SQL-NCLOB for a LOB.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1550"></a>Usage Notes</p>
<p>See <a href="pco05sql.htm#i3779">&#34;Cursors&#34;</a> and <a href="pco06pls.htm#i5051">&#34;Cursor Variables&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1551"></a>Example</p>
<pre>* CURSOR VARIABLE EXAMPLE
...
 01  CUR      SQL-CURSOR.
...
     EXEC SQL ALLOCATE :CUR END-EXEC.
...
     EXEC SQL CLOSE :CUR END-EXEC.
     EXEC SQL FREE  :CUR END-EXEC.
...
</pre>
<p class="subhead1"><a id="LNPCB1552"></a>Related Topics</p>
<p><a href="#i16241">ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18535"></a>
<div id="LNPCB1553" class="sect1">
<h2 class="sect1">GET DESCRIPTOR (Executable Embedded SQL)<a id="sthref2202"></a><a id="sthref2203"></a><a id="sthref2204"></a></h2>
<p class="subhead1"><a id="LNPCB1554"></a>Purpose</p>
<p>To obtain information about host variables from a SQL descriptor area.</p>
<p class="subhead1"><a id="LNPCB1555"></a>Prerequisites</p>
<p>Use only with value semantics and ANSI dynamic SQL Method 4.</p>
<p class="subhead1"><a id="LNPCB1556"></a>Syntax</p>
<img width="592" height="160" src="img/getdesc.gif" alt="GET DESCRIPTOR"/><br/>
<a id="sthref2205" href="img_text/getdesc.htm">Description of the illustration getdesc.gif</a><br/>
<br/>
<p>where <code>item_name</code> can be one of these choices:</p>
<img width="496" height="384" src="img/getdncob.gif" alt="example"/><br/>
<a id="sthref2206" href="img_text/getdncob.htm">Description of the illustration getdncob.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1557"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for get descriptor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t29">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t29" headers="r1c1-t29"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t29 r1c2-t29">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t29" headers="r1c1-t29"><span class="italic">:descriptor_name</span></td>
<td class="cellalignment4973" headers="r3c1-t29 r1c2-t29">Host variable containing the name of the allocated ANSI descriptor.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t29" headers="r1c1-t29"><span class="italic">&#39;descriptor name&#39;</span></td>
<td class="cellalignment4973" headers="r4c1-t29 r1c2-t29">Name of the allocated ANSI descriptor.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t29" headers="r1c1-t29">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r5c1-t29 r1c2-t29">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t29" headers="r1c1-t29"><span class="italic">host_var</span>=COUNT</td>
<td class="cellalignment4973" headers="r6c1-t29 r1c2-t29">Host variable containing the total number of input or output variables.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t29" headers="r1c1-t29"><span class="italic">integer</span></td>
<td class="cellalignment4973" headers="r7c1-t29 r1c2-t29">Total number of input or output variables.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t29" headers="r1c1-t29">VALUE :<span class="italic">host_integer</span></td>
<td class="cellalignment4973" headers="r8c1-t29 r1c2-t29">Host variable containing the position of the referenced input or output variable.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t29" headers="r1c1-t29">VALUE <span class="italic">integer</span></td>
<td class="cellalignment4973" headers="r9c1-t29 r1c2-t29">The position of the referenced input or output variable.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t29" headers="r1c1-t29"><span class="italic">host_var</span></td>
<td class="cellalignment4973" headers="r10c1-t29 r1c2-t29">Host variable which will receive the item&#39;s value.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t29" headers="r1c1-t29"><span class="italic">item_name</span></td>
<td class="cellalignment4973" headers="r11c1-t29 r1c2-t29">The <span class="italic">item_name</span> is found in <a href="pco10ady.htm#g1028984">Table 10-4</a>, and <a href="pco10ady.htm#g1030681">Table 10-5</a>, under the &#34;Descriptor Item Name&#34; column heading.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1558"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option. The array size clause can be used with DATA, RETURNED_LENGTH, and INDICATOR item names. See <a href="pco10ady.htm#i1004022">&#34;GET DESCRIPTOR&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1559"></a>Example</p>
<pre>     EXEC SQL GET DESCRIPTOR GLOBAL &#39;mydesc&#39; :mydesc_num_vars = COUNT END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1560"></a>Related Topics</p>
<p><a href="#i18519">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i18533">DESCRIBE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i18540">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18354"></a>
<div id="LNPCB1561" class="sect1">
<h2 class="sect1">INSERT (Executable Embedded SQL)<a id="sthref2207"></a><a id="sthref2208"></a><a id="sthref2209"></a><a id="sthref2210"></a><a id="sthref2211"></a><a id="sthref2212"></a><a id="sthref2213"></a></h2>
<p class="subhead1"><a id="LNPCB1562"></a>Purpose</p>
<p>To add rows to a table or to a view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCB1563"></a>Prerequisites</p>
<p>For you to insert rows into a table, the table must be in your own schema or you must have INSERT privilege on the table.</p>
<p>For you to insert rows into the base table of a view, the owner of the schema containing the view must have INSERT privilege on the base table. Also, if the view is in a schema other than your own, you must have INSERT privilege on the view.</p>
<p>The INSERT ANY TABLE system privilege also enables you to insert rows into any table or any view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCB1564"></a>Syntax</p>
<img width="592" height="272" src="img/insert.gif" alt="INSERT"/><br/>
<a id="sthref2214" href="img_text/insert.htm">Description of the illustration insert.gif</a><br/>
<br/>
<p>where DML returning clause is:</p>
<img width="592" height="128" src="img/return.gif" alt="return clause"/><br/>
<a id="sthref2215" href="img_text/return.htm">Description of the illustration return.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1565"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for insert statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t30">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t30" headers="r1c1-t30">AT</td>
<td class="cellalignment4973" headers="r2c1-t30 r1c2-t30"><a id="sthref2216"></a>Identifies the database on which the INSERT statement is executed. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t30" headers="r1c1-t30"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t30 r1c2-t30">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t30" headers="r1c1-t30"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t30 r1c2-t30">A host variable whose value is a previously declared <span class="italic">db_name</span>. If you omit this clause, the INSERT statement is executed on your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t30" headers="r1c1-t30">FOR :<span class="italic">host_integer</span></td>
<td class="cellalignment4973" headers="r5c1-t30 r1c2-t30"><a id="sthref2217"></a>Limits the number of times the statement is executed if the VALUES clause contains array host variables. If you omit this clause, Oracle executes the statement once for each component in the smallest array.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t30" headers="r1c1-t30"><span class="italic">schema</span></td>
<td class="cellalignment4973" headers="r6c1-t30 r1c2-t30">The schema containing the table or view. If you omit <span class="italic">schema</span>, Oracle assumes the table or view is in your own schema.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t30" headers="r1c1-t30"><span class="italic">table</span>
<p><span class="italic">view</span></p>
</td>
<td class="cellalignment4973" headers="r7c1-t30 r1c2-t30">The name of the table into which rows are to be inserted. If you specify <span class="italic">view</span>, Oracle inserts rows into the view&#39;s base table.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t30" headers="r1c1-t30"><span class="italic">db_link</span></td>
<td class="cellalignment4973" headers="r8c1-t30 r1c2-t30"><a id="sthref2218"></a>A complete or partial name of a database link to a remote database where the table or view is located. For information on referring to database links, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a> You can only insert rows into a remote table or view if you are using Oracle with the distributed option.
<p>If you omit <span class="italic">db_link</span>, Oracle assumes that the table or view is on the local database.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t30" headers="r1c1-t30"><span class="italic">part_name</span></td>
<td class="cellalignment4973" headers="r9c1-t30 r1c2-t30">The name of partition in the table</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t30" headers="r1c1-t30"><span class="italic">column</span></td>
<td class="cellalignment4973" headers="r10c1-t30 r1c2-t30">A column of the table or view. In the inserted row, each column in this list is assigned a value from the VALUES clause or the query.
<p>If you omit one of the table&#39;s columns from this list, the column&#39;s value for the inserted row is the column&#39;s default value as specified when the table was created. If you omit the column list altogether, the VALUES clause or query must specify values for all columns in the table.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t30" headers="r1c1-t30">VALUES</td>
<td class="cellalignment4973" headers="r11c1-t30 r1c2-t30"><a id="sthref2219"></a>Specifies a row of values to be inserted into the table or view. See the syntax description of <span class="italic">expr</span> in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a> Note that the expressions can be host variables with optional indicator variables. You must specify an expression in the VALUES clause for each column in the column list.<a id="sthref2220"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t30" headers="r1c1-t30"><span class="italic">subquery</span></td>
<td class="cellalignment4973" headers="r12c1-t30 r1c2-t30">A subquery that returns rows that are inserted into the table. The select list of this subquery must have the same number of columns as the column list of the INSERT statement. For the syntax description of a subquery, see &#34;SELECT&#34; in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t30" headers="r1c1-t30"><span class="italic">DML returning clause</span></td>
<td class="cellalignment4973" headers="r13c1-t30 r1c2-t30">See <a href="pco05sql.htm#i6276">&#34;DML Returning Clause&#34;</a> for a discussion.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1566"></a>Usage Notes</p>
<p>Any host variables that appear in the WHERE clause should be either all scalars or all arrays. If they are scalars, Oracle executes the INSERT statement once. If they are arrays, Oracle executes the INSERT statement once for each set of array components, inserting one row each time.</p>
<p>Array host variables in the WHERE clause can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>Size of the smallest array</p>
</li>
<li>
<p>The value of the <span class="italic">host_integer</span> in the optional FOR clause.</p>
</li>
</ul>
<p>For more information on this statement, see <a href="pco05sql.htm#i3311">&#34;The Basic SQL Statements&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1567"></a>Example I</p>
<p>This example illustrates the use of the embedded SQL INSERT statement:</p>
<pre>     EXEC SQL 
         INSERT INTO EMP (ENAME, EMPNO, SAL) 
         VALUES (:ENAME, :EMPNO, :SAL)
     END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1568"></a>Example II</p>
<p>This example shows an embedded SQL INSERT statement with a subquery:</p>
<pre>     EXEC SQL 
         INSERT INTO NEWEMP (ENAME, EMPNO, SAL) 
         SELECT ENAME, EMPNO, SAL FROM EMP
         WHERE DEPTNO = :DEPTNO
     END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1569"></a>Related Topics</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i21397"></a>
<div id="LNPCB1570" class="sect1">
<h2 class="sect1">LOB APPEND (Executable Embedded SQL Extension)<a id="sthref2221"></a><a id="sthref2222"></a></h2>
<p class="subhead1"><a id="LNPCB1571"></a>Purpose</p>
<p>To append a LOB to the end of another LOB.</p>
<p class="subhead1"><a id="LNPCB1572"></a>Prerequisites</p>
<p>LOB buffering must not be enabled.The destination LOB must have been initialized.</p>
<p class="subhead1"><a id="LNPCB1573"></a>Syntax</p>
<img width="496" height="80" src="img/lobapp.gif" alt="LOB APPEND"/><br/>
<a id="sthref2223" href="img_text/lobapp.htm">Description of the illustration lobapp.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1574"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008465">&#34;APPEND&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1575"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17359"></a>
<div id="LNPCB1576" class="sect1">
<h2 class="sect1">LOB ASSIGN (Executable Embedded SQL Extension)<a id="sthref2224"></a><a id="sthref2225"></a></h2>
<p class="subhead1"><a id="LNPCB1577"></a>Purpose</p>
<p>To assign a LOB or BFILE locator to another locator.</p>
<p class="subhead1"><a id="LNPCB1578"></a>Syntax</p>
<img width="496" height="96" src="img/lobass.gif" alt="LOB ASSIGN"/><br/>
<a id="sthref2226" href="img_text/lobass.htm">Description of the illustration lobass.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1579"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008466">&#34;ASSIGN&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1580"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17380"></a>
<div id="LNPCB1581" class="sect1">
<h2 class="sect1">LOB CLOSE (Executable Embedded SQL Extension)<a id="sthref2227"></a><a id="sthref2228"></a></h2>
<p class="subhead1"><a id="LNPCB1582"></a>Purpose</p>
<p>To close an open LOB or BFILE.</p>
<p class="subhead1"><a id="LNPCB1583"></a>Syntax</p>
<img width="496" height="80" src="img/lobclose.gif" alt="LOB CLOSE"/><br/>
<a id="sthref2229" href="img_text/lobclose.htm">Description of the illustration lobclose.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1584"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008467">&#34;CLOSE&#34;</a> .</p>
<p class="subhead1"><a id="LNPCB1585"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17401"></a>
<div id="LNPCB1586" class="sect1">
<h2 class="sect1">LOB COPY (Executable Embedded SQL Extension)<a id="sthref2230"></a><a id="sthref2231"></a></h2>
<p class="subhead1"><a id="LNPCB1587"></a>Purpose</p>
<p>To copy all or part of a LOB value into another LOB.</p>
<p class="subhead1"><a id="LNPCB1588"></a>Syntax</p>
<img width="592" height="128" src="img/lobcop.gif" alt="LOB COPY"/><br/>
<a id="sthref2232" href="img_text/lobcop.htm">Description of the illustration lobcop.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1589"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008468">&#34;COPY&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1590"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17422"></a>
<div id="LNPCB1591" class="sect1">
<h2 class="sect1">LOB CREATE TEMPORARY (Executable Embedded SQL Extension)<a id="sthref2233"></a><a id="sthref2234"></a></h2>
<p class="subhead1"><a id="LNPCB1592"></a>Purpose</p>
<p>To create a temporary LOB.</p>
<p class="subhead1"><a id="LNPCB1593"></a>Syntax</p>
<img width="496" height="96" src="img/lobcreat.gif" alt="LOB CREATE TEMPORARY"/><br/>
<a id="sthref2235" href="img_text/lobcreat.htm">Description of the illustration lobcreat.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1594"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008469">&#34;CREATE TEMPORARY&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1595"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17443"></a>
<div id="LNPCB1596" class="sect1">
<h2 class="sect1">LOB DESCRIBE (Executable Embedded SQL Extension)<a id="sthref2236"></a><a id="sthref2237"></a></h2>
<p class="subhead1"><a id="LNPCB1597"></a>Purpose</p>
<p>To retrieve attributes from a LOB.</p>
<p class="subhead1"><a id="LNPCB1598"></a>Syntax</p>
<img width="496" height="176" src="img/lobdesc.gif" alt="LOB DESCRIBE"/><br/>
<a id="sthref2238" href="img_text/lobdesc.htm">Description of the illustration lobdesc.gif</a><br/>
<br/>
<p>where <code>attrib</code> is:</p>
<img width="496" height="192" src="img/lobatt.gif" alt="example"/><br/>
<a id="sthref2239" href="img_text/lobatt.htm">Description of the illustration lobatt.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1599"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008862">&#34;DESCRIBE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1600"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17468"></a>
<div id="LNPCB1601" class="sect1">
<h2 class="sect1">LOB DISABLE BUFFERING (Executable Embedded SQL Extension)<a id="sthref2240"></a><a id="sthref2241"></a></h2>
<p class="subhead1"><a id="LNPCB1602"></a>Purpose</p>
<p>To disable LOB buffering.</p>
<p class="subhead1"><a id="LNPCB1603"></a>Syntax</p>
<img width="496" height="80" src="img/lobdisab.gif" alt="LOB DISABLE BUFFERING"/><br/>
<a id="sthref2242" href="img_text/lobdisab.htm">Description of the illustration lobdisab.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1604"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008470">&#34;DISABLE BUFFERING&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1605"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17489"></a>
<div id="LNPCB1606" class="sect1">
<h2 class="sect1">LOB ENABLE BUFFERING (Executable Embedded SQL Extension)<a id="sthref2243"></a><a id="sthref2244"></a></h2>
<p class="subhead1"><a id="LNPCB1607"></a>Purpose</p>
<p>To enable LOB buffering.</p>
<p class="subhead1"><a id="LNPCB1608"></a>Syntax</p>
<img width="496" height="80" src="img/lobenab.gif" alt="LOB ENABLE BUFFERING"/><br/>
<a id="sthref2245" href="img_text/lobenab.htm">Description of the illustration lobenab.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1609"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1007018">ENABLE BUFFERING</a></p>
<p class="subhead1"><a id="LNPCB1610"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17510"></a>
<div id="LNPCB1611" class="sect1">
<h2 class="sect1">LOB ERASE (Executable Embedded SQL Extension)<a id="sthref2246"></a><a id="sthref2247"></a></h2>
<p class="subhead1"><a id="LNPCB1612"></a>Purpose</p>
<p>To erase a given amount of LOB data starting from a given offset.</p>
<p class="subhead1"><a id="LNPCB1613"></a>Syntax</p>
<img width="496" height="112" src="img/loberas.gif" alt="LOB ERASE"/><br/>
<a id="sthref2248" href="img_text/loberas.htm">Description of the illustration loberas.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1614"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008471">&#34;ERASE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1615"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17531"></a>
<div id="LNPCB1616" class="sect1">
<h2 class="sect1">LOB FILE CLOSE ALL (Executable Embedded SQL Extension)<a id="sthref2249"></a><a id="sthref2250"></a></h2>
<p class="subhead1"><a id="LNPCB1617"></a>Purpose</p>
<p>To close all open BFILEs in the current session.</p>
<p class="subhead1"><a id="LNPCB1618"></a>Syntax</p>
<img width="496" height="80" src="img/lobficl.gif" alt="LOB FILE CLOSE ALL"/><br/>
<a id="sthref2251" href="img_text/lobficl.htm">Description of the illustration lobficl.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1619"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008472">&#34;FILE CLOSE ALL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1620"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17552"></a>
<div id="LNPCB1621" class="sect1">
<h2 class="sect1">LOB FILE SET (Executable Embedded SQL Extension)<a id="sthref2252"></a><a id="sthref2253"></a></h2>
<p class="subhead1"><a id="LNPCB1622"></a>Purpose</p>
<p>To set DIRECTORY and FILENAME in a BFILE locator.</p>
<p class="subhead1"><a id="LNPCB1623"></a>Syntax</p>
<img width="496" height="112" src="img/lobfise.gif" alt="LOB FILE SET"/><br/>
<a id="sthref2254" href="img_text/lobfise.htm">Description of the illustration lobfise.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1624"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008473">&#34;FILE SET&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1625"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17573"></a>
<div id="LNPCB1626" class="sect1">
<h2 class="sect1">LOB FLUSH BUFFER (Executable Embedded SQL Extension)<a id="sthref2255"></a><a id="sthref2256"></a></h2>
<p class="subhead1"><a id="LNPCB1627"></a>Purpose</p>
<p>To write the LOB buffers to the database server.</p>
<p class="subhead1"><a id="LNPCB1628"></a>Syntax</p>
<img width="592" height="80" src="img/lobflbuf.gif" alt="LOB FLUSH BUFFER"/><br/>
<a id="sthref2257" href="img_text/lobflbuf.htm">Description of the illustration lobflbuf.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1629"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008474">&#34;FLUSH BUFFER&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1630"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17594"></a>
<div id="LNPCB1631" class="sect1">
<h2 class="sect1">LOB FREE TEMPORARY (Executable Embedded SQL Extension)<a id="sthref2258"></a><a id="sthref2259"></a></h2>
<p class="subhead1"><a id="LNPCB1632"></a>Purpose</p>
<p>To free temporary space for the LOB locator.</p>
<p class="subhead1"><a id="LNPCB1633"></a>Syntax</p>
<img width="496" height="112" src="img/lobfrtem.gif" alt="LOB FREE TEMPORARY"/><br/>
<a id="sthref2260" href="img_text/lobfrtem.htm">Description of the illustration lobfrtem.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1634"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008475">&#34;FREE TEMPORARY&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1635"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17615"></a>
<div id="LNPCB1636" class="sect1">
<h2 class="sect1">LOB LOAD (Executable Embedded SQL Extension)<a id="sthref2261"></a><a id="sthref2262"></a></h2>
<p class="subhead1"><a id="LNPCB1637"></a>Purpose</p>
<p>To copy all or part of a BFILE into an internal LOB.</p>
<p class="subhead1"><a id="LNPCB1638"></a>Syntax</p>
<img width="496" height="128" src="img/loblofr.gif" alt="LOB LOAD"/><br/>
<a id="sthref2263" href="img_text/loblofr.htm">Description of the illustration loblofr.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1639"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008476">&#34;LOAD FROM FILE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1640"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17637"></a>
<div id="LNPCB1641" class="sect1">
<h2 class="sect1">LOB OPEN (Executable Embedded SQL Extension)<a id="sthref2264"></a><a id="sthref2265"></a></h2>
<p class="subhead1"><a id="LNPCB1642"></a>Purpose</p>
<p>To open a LOB or BFILE for read or read/write access.</p>
<p class="subhead1"><a id="LNPCB1643"></a>Syntax</p>
<img width="592" height="80" src="img/lobopen.gif" alt="LOB OPEN"/><br/>
<a id="sthref2266" href="img_text/lobopen.htm">Description of the illustration lobopen.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1644"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008477">&#34;OPEN&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1645"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17658"></a>
<div id="LNPCB1646" class="sect1">
<h2 class="sect1">LOB READ (Executable Embedded SQL Extension)<a id="sthref2267"></a><a id="sthref2268"></a></h2>
<p class="subhead1"><a id="LNPCB1647"></a>Purpose</p>
<p>To read all or part of a LOB or BFILE into a buffer.</p>
<p class="subhead1"><a id="LNPCB1648"></a>Syntax</p>
<img width="592" height="144" src="img/lobread.gif" alt="LOB READ"/><br/>
<a id="sthref2269" href="img_text/lobread.htm">Description of the illustration lobread.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1649"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1000009">&#34;READ&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1650"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17679"></a>
<div id="LNPCB1651" class="sect1">
<h2 class="sect1">LOB TRIM (Executable Embedded SQL Extension)<a id="sthref2270"></a><a id="sthref2271"></a></h2>
<p class="subhead1"><a id="LNPCB1652"></a>Purpose</p>
<p>To truncate a LOB value.</p>
<p class="subhead1"><a id="LNPCB1653"></a>Syntax</p>
<img width="592" height="80" src="img/lobtrim.gif" alt="LOB TRIM"/><br/>
<a id="sthref2272" href="img_text/lobtrim.htm">Description of the illustration lobtrim.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1654"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008478">&#34;TRIM&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1655"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i17700"></a>
<div id="LNPCB1656" class="sect1">
<h2 class="sect1">LOB WRITE (Executable Embedded SQL Extension)<a id="sthref2273"></a><a id="sthref2274"></a></h2>
<p class="subhead1"><a id="LNPCB1657"></a>Purpose</p>
<p>To write the contents of a buffer to a LOB.</p>
<p class="subhead1"><a id="LNPCB1658"></a>Syntax</p>
<img width="496" height="256" src="img/lobwri.gif" alt="LOB WRITE"/><br/>
<a id="sthref2275" href="img_text/lobwri.htm">Description of the illustration lobwri.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1659"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pco13lob.htm#i1008479">&#34;WRITE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1660"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="i12809"></a>
<div id="LNPCB1661" class="sect1">
<h2 class="sect1">OPEN (Executable Embedded SQL)<a id="sthref2276"></a><a id="sthref2277"></a><a id="sthref2278"></a><a id="sthref2279"></a><a id="sthref2280"></a></h2>
<p class="subhead1"><a id="LNPCB1662"></a>Purpose</p>
<p>To open a cursor, evaluating the associated query and substituting the host variable names supplied by the USING clause into the WHERE clause of the query. It can be used in place of EXECUTE in dynamic SQL. For the ANSI Dynamic SQL syntax, see <a href="#i21046">&#34;OPEN DESCRIPTOR (Executable Embedded SQL)&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1663"></a>Prerequisites</p>
<p>You must declare the cursor with a DECLARE CURSOR embedded SQL statement before opening it.</p>
<p class="subhead1"><a id="LNPCB1664"></a>Syntax</p>
<img width="496" height="224" src="img/openo.gif" alt="OPEN"/><br/>
<a id="sthref2281" href="img_text/openo.htm">Description of the illustration openo.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1665"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for open statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t31">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t31" headers="r1c1-t31"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t31 r1c2-t31">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
<p>Can only be used when the OPEN is equivalent to EXECUTE.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t31" headers="r1c1-t31"><span class="italic">cursor</span></td>
<td class="cellalignment4973" headers="r3c1-t31 r1c2-t31">The (previously declared) cursor to be opened.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t31" headers="r1c1-t31"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t31 r1c2-t31">Specifies a host variable<a id="sthref2282"></a> with an optional indicator variable to be substituted into the statement associated with the cursor.
<p><a id="sthref2283"></a>CANNOT be used together with an ANSI descriptor (INTO clause).</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t31" headers="r1c1-t31">DESCRIPTOR <span class="italic">SQLDA_descriptor</span></td>
<td class="cellalignment4973" headers="r5c1-t31 r1c2-t31">Specifies an Oracle descriptor that describes the host variables to be substituted into the WHERE clause of the associated query. The descriptor must be initialized in a previous DESCRIBE statement. The substitution is based on position. The host variable names specified in this statement can be different from the variable names in the associated query.
<p>CANNOT be used together with an ANSI descriptor (INTO clause).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1666"></a>Usage Notes</p>
<p>The OPEN statement defines the active set of rows and initializes the cursor just before the first row of the active set. The values of the host variables at the time of the OPEN are substituted in the statement. This statement does not actually retrieve rows; rows are retrieved by the FETCH statement.<a id="sthref2284"></a></p>
<p>Once you have opened a cursor, its input host variables are not reexamined until you reopen the cursor. To change any input host variables and therefore the active set, you must reopen the cursor.</p>
<p>All cursors in a program are in a closed state when the program is initiated or when they have been explicitly closed using the CLOSE statement.</p>
<p>You can reopen a cursor without first closing it. For more information on this statement, see <a href="pco05sql.htm#i3312">&#34;Opening a Cursor&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1667"></a>Example</p>
<p><a id="sthref2285"></a><a id="sthref2286"></a><a id="sthref2287"></a>This example illustrates the use of the OPEN statement in a Pro*COBOL program:</p>
<pre>     EXEC SQL DECLARE EMPCURSOR CURSOR FOR 
         SELECT ENAME, EMPNO, JOB, SAL 
         FROM EMP 
         WHERE DEPTNO = :DEPTNO
     END-EXEC. 
     EXEC SQL OPEN EMPCURSOR END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1668"></a>Related Topics</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a> .</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a> .</p>
<p><a href="#i12797">EXECUTE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12800">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a> .</p>
</div>
<!-- class="sect1" -->
<a id="i21046"></a>
<div id="LNPCB1669" class="sect1">
<h2 class="sect1">OPEN DESCRIPTOR (Executable Embedded SQL)<a id="sthref2288"></a><a id="sthref2289"></a><a id="sthref2290"></a><a id="sthref2291"></a><a id="sthref2292"></a> <a id="sthref2293"></a><a id="sthref2294"></a><a id="sthref2295"></a></h2>
<p class="subhead1"><a id="LNPCB1670"></a>Purpose</p>
<p>To open a cursor (for ANSI Dynamic SQL Method 4), evaluating the associated query and substituting the input host variable names supplied by the USING clause into the WHERE clause of the query. The INTO clause denotes the output descriptor. It can be used in place of EXECUTE in dynamic SQL.</p>
<p class="subhead1"><a id="LNPCB1671"></a>Prerequisites</p>
<p>You must declare the cursor with a DECLARE CURSOR embedded SQL statement before opening it.</p>
<p class="subhead1"><a id="LNPCB1672"></a>Syntax</p>
<img width="592" height="288" src="img/opena.gif" alt="OPEN DESCRIPTOR"/><br/>
<a id="sthref2296" href="img_text/opena.htm">Description of the illustration opena.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1673"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for open descriptor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t32">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t32" headers="r1c1-t32"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t32 r1c2-t32">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
<p>Used only with dynamic SQL when it is equivalent to EXECUTE.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t32" headers="r1c1-t32"><span class="italic">cursor</span></td>
<td class="cellalignment4973" headers="r3c1-t32 r1c2-t32">The (previously declared) cursor to be opened.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t32" headers="r1c1-t32">USING DESCRIPTOR
<p><span class="italic">descriptor_name &#39;descriptor name&#39;</span></p>
</td>
<td class="cellalignment4973" headers="r4c1-t32 r1c2-t32">Specifies an ANSI input descriptor with the host variable containing the name of the ANSI descriptor, or the name of the ANSI descriptor.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t32" headers="r1c1-t32">INTO DESCRIPTOR <span class="italic">descriptor_name &#39;descriptor name&#39;</span></td>
<td class="cellalignment4973" headers="r5c1-t32 r1c2-t32">Specifies an ANSI output descriptor with the host variable containing the name of the ANSI descriptor, or the name of the ANSI descriptor.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t32" headers="r1c1-t32">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r6c1-t32 r1c2-t32">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1674"></a>Usage Notes</p>
<p>Set the precompiler option DYNAMIC to ANSI.</p>
<p>The OPEN statement defines the active set of rows and initializes the cursor just before the first row of the active set. The values of the host variables at the time of the OPEN are substituted in the statement. This statement does not actually retrieve rows; rows are retrieved by the FETCH statement.<a id="sthref2297"></a></p>
<p>Once you have opened a cursor, its input host variables are not reexamined until you reopen the cursor. To change any input host variables and therefore the active set, you must reopen the cursor.</p>
<p>All cursors in a program are in a closed state when the program is initiated or when they have been explicitly closed using the CLOSE statement.</p>
<p>You can reopen a cursor without first closing it. For more information on this statement, see <a href="pco05sql.htm#i5615">&#34;Inserting Rows&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1675"></a>Example</p>
<pre> 01 DYN-STATEMENT PIC X(58) VALUE &#34;SELECT ENAME, EMPNO FROM EMP WHERE
       DEPTNO =:DEPTNO-DAT&#34;.
 01 DEPTNO-DAT PIC S9(9) COMP VALUE 10.
 ...
     EXEC SQL ALLOCATE DESCRIPTOR &#39;input-descriptor&#39; END-EXEC.
     EXEC SQL ALLOCATE DESCRIPTOR &#39;output-descriptor&#39;
     ...
     EXEC SQL PREPARE S FROM :DYN-STATEMENT END-EXEC.
     EXEC SQL DECLARE C CURSOR FOR S END-EXEC.
     ...
     EXEC SQL OPEN C USING DESCRIPTOR &#39;input-descriptor&#39; END-EXEC.
     ...
</pre>
<p class="subhead1"><a id="LNPCB1676"></a>Related Topics</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#i20706">FETCH DESCRIPTOR (Executable Embedded SQL)</a> .</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12803"></a>
<div id="LNPCB1677" class="sect1">
<h2 class="sect1">PREPARE (Executable Embedded SQL)<a id="sthref2298"></a><a id="sthref2299"></a><a id="sthref2300"></a></h2>
<p class="subhead1"><a id="LNPCB1678"></a>Purpose</p>
<p><a id="sthref2301"></a>To parse a SQL statement or PL/SQL block specified by a host variable and associate it with an identifier.</p>
<p class="subhead1"><a id="LNPCB1679"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1680"></a>Syntax</p>
<img width="592" height="112" src="img/prepare.gif" alt="PREPARE"/><br/>
<a id="sthref2302" href="img_text/prepare.htm">Description of the illustration prepare.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1681"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for prepare statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t33">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t33" headers="r1c1-t33"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r2c1-t33 r1c2-t33">A null-terminated string containing the database connection name, as established previously in a CONNECT statement. If it is omitted, or if it is an empty string, the default database connection is assumed.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t33" headers="r1c1-t33"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r3c1-t33 r1c2-t33">A host variable containing the name of the database connection.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t33" headers="r1c1-t33"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r4c1-t33 r1c2-t33">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t33" headers="r1c1-t33"><span class="italic">statement_id</span></td>
<td class="cellalignment4973" headers="r5c1-t33 r1c2-t33">The identifier to be associated with the prepared SQL statement or PL/SQL block. If this identifier was previously assigned to another statement or block, the prior assignment is superseded.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t33" headers="r1c1-t33"><span class="italic">host_string</span></td>
<td class="cellalignment4973" headers="r6c1-t33 r1c2-t33">A host variable whose value is the text of a SQL statement or PL/SQL block to be prepared.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t33" headers="r1c1-t33"><span class="italic">text</span></td>
<td class="cellalignment4973" headers="r7c1-t33 r1c2-t33">A text literal containing the SQL statement or PL/SQL block to be executed. The quotes may be omitted.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t33" headers="r1c1-t33"><span class="italic">select_command</span></td>
<td class="cellalignment4973" headers="r8c1-t33 r1c2-t33">A SELECT statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1682"></a>Usage Notes</p>
<p>Any variables that appear in the <span class="italic">host_string</span> or <span class="italic">text</span> are placeholders. The actual host variable names are assigned in the USING clause of the OPEN statement (input host variables) or in the INTO clause of the FETCH statement (output host variables).</p>
<p>A SQL statement is prepared only once, but can be executed any number of times.</p>
<p class="subhead1"><a id="LNPCB1683"></a>Example</p>
<p><a id="sthref2303"></a>This example illustrates the use of a PREPARE statement in a Pro*COBOL embedded SQL program:</p>
<pre>     EXEC SQL PREPARE MYSTATEMENT FROM :MY-STRING END-EXEC. 
     EXEC SQL EXECUTE MYSTATEMENT END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1684"></a>Related Topics</p>
<p><a href="#i12794">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#i12800">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#i12809">OPEN (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12812"></a>
<div id="LNPCB1685" class="sect1">
<h2 class="sect1">ROLLBACK (Executable Embedded SQL)<a id="sthref2304"></a><a id="sthref2305"></a><a id="sthref2306"></a> <a id="sthref2307"></a><a id="sthref2308"></a></h2>
<p class="subhead1"><a id="LNPCB1686"></a>Purpose</p>
<p>To undo work done in the current transaction.<a id="sthref2309"></a><a id="sthref2310"></a> You can also use this statement to manually undo the work done by an in-doubt distributed transaction.</p>
<p class="subhead1"><a id="LNPCB1687"></a>Prerequisites</p>
<p>To roll back your current transaction, no privileges are necessary.</p>
<p>To manually roll back an in-doubt distributed transaction that you originally committed, you must have FORCE TRANSACTION system privilege. To manually roll back an in-doubt distributed transaction originally committed by another user, you must have FORCE ANY TRANSACTION system privilege.</p>
<p class="subhead1"><a id="LNPCB1688"></a>Syntax</p>
<img width="496" height="208" src="img/rollb.gif" alt="ROLLBACK"/><br/>
<a id="sthref2311" href="img_text/rollb.htm">Description of the illustration rollb.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1689"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for rollback statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t34">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t34" headers="r1c1-t34"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r2c1-t34 r1c2-t34">A null-terminated string containing the database connection name, as established previously in a CONNECT statement. If it is omitted, or if it is an empty string, the default database connection is assumed.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t34" headers="r1c1-t34"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r3c1-t34 r1c2-t34">A host variable containing the name of the database connection.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t34" headers="r1c1-t34">&nbsp;</td>
<td class="cellalignment4973" headers="r4c1-t34 r1c2-t34">If you omit this clause, the savepoint is created on your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t34" headers="r1c1-t34">WORK</td>
<td class="cellalignment4973" headers="r5c1-t34 r1c2-t34"><a id="sthref2312"></a>Is optional and is provided for ANSI compatibility.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t34" headers="r1c1-t34">TO</td>
<td class="cellalignment4973" headers="r6c1-t34 r1c2-t34">Rolls back the current transaction to the specified savepoint. If you omit this clause, the ROLLBACK statement rolls back the entire transaction.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t34" headers="r1c1-t34">FORCE</td>
<td class="cellalignment4973" headers="r7c1-t34 r1c2-t34"><a id="sthref2313"></a>Manually rolls back an in-doubt distributed transaction. The transaction is identified by the <span class="italic">text</span> containing its local or global transaction ID. To find the IDs of such transactions, query the data dictionary view DBA_2PC_PENDING.
<p>ROLLBACK statements with the FORCE clause are not supported in PL/SQL.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t34" headers="r1c1-t34">RELEASE</td>
<td class="cellalignment4973" headers="r8c1-t34 r1c2-t34">Frees all resources and disconnects the application from the database server. The RELEASE clause is not allowed with SAVEPOINT and FORCE clauses.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t34" headers="r1c1-t34"><span class="italic">savepoint</span></td>
<td class="cellalignment4973" headers="r9c1-t34 r1c2-t34">The name of the savepoint to be rolled back to.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1690"></a>Usage Notes</p>
<p>A transaction (or a logical unit of work) is a sequence of SQL statements that Oracle treats as a single unit. A transaction begins with the first executable SQL statement after a COMMIT, ROLLBACK or connection to the database. A transaction ends with a COMMIT<a id="sthref2314"></a> statement, a ROLLBACK<a id="sthref2315"></a> statement, or disconnection (intentional or unintentional) from the database. Note that Oracle issues an implicit COMMIT statement before and after processing any data definition language statement.</p>
<p>Using the ROLLBACK statement without the TO SAVEPOINT clause performs the following operations:</p>
<ul>
<li>
<p>ends the transaction</p>
</li>
<li>
<p>undoes all changes in the current transaction</p>
</li>
<li>
<p>erases all savepoints in the transaction</p>
</li>
<li>
<p>releases the transaction&#39;s<a id="sthref2316"></a> locks</p>
</li>
</ul>
<p>Using the ROLLBACK statement with the TO SAVEPOINT clause performs the following operations:</p>
<ul>
<li>
<p>rolls back just the portion of the transaction after the savepoint.</p>
</li>
<li>
<p>loses all savepoints created after that savepoint. Note that the named savepoint is retained, so you can roll back to the same savepoint multiple times<a id="sthref2317"></a>. Prior savepoints are also retained.</p>
</li>
<li>
<p>releases all table and row locks acquired since the savepoint. Note that other transactions that have requested access to rows locked after the savepoint must continue to wait until the transaction is committed or rolled back. Other transactions that have not already requested the rows can request and access the rows immediately.</p>
</li>
</ul>
<p>It is recommended that you explicitly end transactions in application programs using either a COMMIT or ROLLBACK statement. If you do not explicitly commit the transaction and the program terminates abnormally, Oracle rolls back the last uncommitted transaction.</p>
<p class="subhead1"><a id="LNPCB1691"></a>Example I</p>
<p><a id="sthref2318"></a>The following statement rolls back your entire current transaction:</p>
<pre>     EXEC SQL ROLLBACK END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1692"></a>Example II</p>
<p>The following statement rolls back your current transaction to savepoint SP5:</p>
<pre>      EXEC SQL ROLLBACK TO SAVEPOINT SP5 END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1693"></a>Distributed Transactions</p>
<p>Oracle with the distributed option enables you to perform distributed transactions, or transactions that modify data on multiple databases. To commit or roll back a distributed transaction, you need only issue a COMMIT or ROLLBACK statement as you would any other transaction.</p>
<p>If there is a network failure during the commit process for a distributed transaction, the state of the transaction may be unknown, or in-doubt. After consultation with the administrators of the other databases involved in the transaction, you may decide to manually commit or roll back the transaction on your local database. You can manually roll back the transaction on your local database by issuing a ROLLBACK statement with the FORCE clause.</p>
<p>You cannot manually roll back an in-doubt transaction to a savepoint.</p>
<p>A ROLLBACK statement with a FORCE clause only rolls back the specified transaction. Such a statement does not affect your current transaction.</p>
<p class="subhead1"><a id="LNPCB1694"></a>Example III</p>
<p>The following statement manually rolls back an in-doubt distributed transaction:</p>
<pre>     EXEC SQL ROLLBACK WORK FORCE &#39;25.32.87&#39; END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1695"></a>Related Topics</p>
<p><a href="#i12818">COMMIT (Executable Embedded SQL)</a>.</p>
<p><a href="#i12813">SAVEPOINT (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12813"></a>
<div id="LNPCB1696" class="sect1">
<h2 class="sect1">SAVEPOINT (Executable Embedded SQL)<a id="sthref2319"></a><a id="sthref2320"></a><a id="sthref2321"></a><a id="sthref2322"></a><a id="sthref2323"></a></h2>
<p class="subhead1"><a id="LNPCB1697"></a>Purpose</p>
<p>To identify a point in a transaction to which you can later roll back.<a id="sthref2324"></a></p>
<p class="subhead1"><a id="LNPCB1698"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1699"></a>Syntax</p>
<img width="496" height="96" src="img/savep.gif" alt="SAVEPOINT"/><br/>
<a id="sthref2325" href="img_text/savep.htm">Description of the illustration savep.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1700"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for savepoint statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t35">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t35" headers="r1c1-t35">AT</td>
<td class="cellalignment4973" headers="r2c1-t35 r1c2-t35"><a id="sthref2326"></a>Identifies the database on which the savepoint is created. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t35" headers="r1c1-t35"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t35 r1c2-t35">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t35" headers="r1c1-t35"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t35 r1c2-t35">A host variable whose value is a previously declared <span class="italic">db_name</span>. If you omit this clause, the savepoint is created on your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t35" headers="r1c1-t35"><span class="italic">savepoint</span></td>
<td class="cellalignment4973" headers="r5c1-t35 r1c2-t35">The name of the savepoint to be created.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1701"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pco03dbc.htm#i4100">&#34;Using the SAVEPOINT Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1702"></a>Example</p>
<p><a id="sthref2327"></a>This example illustrates the use of the embedded SQL SAVEPOINT statement:</p>
<pre>     EXEC SQL SAVEPOINT SAVE3 END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1703"></a>Related Topics</p>
<p><a href="#i12818">COMMIT (Executable Embedded SQL)</a>.</p>
<p><a href="#i12812">ROLLBACK (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12828"></a>
<div id="LNPCB1704" class="sect1">
<h2 class="sect1">SELECT (Executable Embedded SQL)<a id="sthref2328"></a><a id="sthref2329"></a><a id="sthref2330"></a></h2>
<p class="subhead1"><a id="LNPCB1705"></a>Purpose</p>
<p>To retrieve data from one or more tables, views, or snapshots, assigning the selected values to host variables.<a id="sthref2331"></a></p>
<p class="subhead1"><a id="LNPCB1706"></a>Prerequisites</p>
Feature 47829-1 - New READ Privilege
<p>For you to select data from a table or snapshot, the table or snapshot must be in your own schema or you must have READ or SELECT privilege on the table or snapshot.</p>
<p>For you to select rows from the base tables of a view, the owner of the schema containing the view must have READ or SELECT privilege on the base tables. Also, if the view is in a schema other than your own, you must have READ or SELECT privilege on the view.</p>
<p>The READ ANY TABLE or SELECT ANY TABLE system privilege also enables you to select data from any table or any snapshot or any view&#39;s base table.</p>
<p>The READ privilege cannot be used for SELECT ... FOR UPDATE operations.</p>
<p class="subhead1"><a id="LNPCB1707"></a>Syntax</p>
<img width="592" height="432" src="img/select_a.gif" alt="SELECT"/><br/>
<a id="sthref2332" href="img_text/select_a.htm">Description of the illustration select_a.gif</a><br/>
<br/>
<img width="592" height="272" src="img/select_b.gif" alt="SELECT"/><br/>
<a id="sthref2333" href="img_text/select_b.htm">Description of the illustration select_b.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1708"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for SELECT statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t36">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t36" headers="r1c1-t36">AT</td>
<td class="cellalignment4973" headers="r2c1-t36 r1c2-t36"><a id="sthref2334"></a>Identifies the database to which the SELECT statement is issued. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t36" headers="r1c1-t36"><span class="italic">db_name</span></td>
<td class="cellalignment4973" headers="r3c1-t36 r1c2-t36">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t36" headers="r1c1-t36"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t36 r1c2-t36">A host variable whose value is a previously declared <span class="italic">db_name</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t36" headers="r1c1-t36">&nbsp;</td>
<td class="cellalignment4973" headers="r5c1-t36 r1c2-t36">If you omit this clause, the SELECT statement is issued to your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t36" headers="r1c1-t36"><span class="italic">select_list</span></td>
<td class="cellalignment4973" headers="r6c1-t36 r1c2-t36">Identical to the non-embedded SELECT statement except that a host variables can be used in place of literals.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t36" headers="r1c1-t36">INTO</td>
<td class="cellalignment4973" headers="r7c1-t36 r1c2-t36">Specifies output host variables and optional indicator variables to receive the data returned by the SELECT statement. Note that these variables must be either all scalars or all arrays, but arrays need not have the same size.<a id="sthref2335"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t36" headers="r1c1-t36">WHERE</td>
<td class="cellalignment4973" headers="r8c1-t36 r1c2-t36">Restricts the rows returned to those for which the condition is TRUE. See the syntax description of <span class="italic">condition</span> in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>. The <span class="italic">condition</span> can contain host variables, but cannot contain indicator variables. These host variables should be scalars and cannot be arrays.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>All other keywords and parameters are identical to the non-embedded SQL SELECT statement.</p>
<p class="subhead1"><a id="LNPCB1709"></a>Usage Notes</p>
<p>If no rows meet the WHERE clause condition, no rows are retrieved and Oracle returns an error code through the SQLCODE component of the SQLCA.</p>
<p>You can use comments in a SELECT statement to pass instructions, or <span class="italic">hints</span>,<a id="sthref2336"></a> to the Oracle optimizer. The optimizer uses hints to choose an execution plan for the statement. For more information on hints, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide.</span></a></p>
<p class="subhead1"><a id="LNPCB1710"></a>Example</p>
<p><a id="sthref2337"></a>This example illustrates the use of the embedded SQL SELECT statement:</p>
<pre>     EXEC SQL SELECT ENAME, SAL + 100, JOB 
         INTO :ENAME, :SAL, :JOB 
         FROM EMP 
         WHERE EMPNO = :EMPNO
     END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1711"></a>Related Topics</p>
<p><a href="#i12806">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#i12797">EXECUTE (Executable Embedded SQL)</a>.</p>
<p><a href="#i12800">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i18540"></a>
<div id="LNPCB1712" class="sect1">
<h2 class="sect1">SET DESCRIPTOR (Executable Embedded SQL)<a id="sthref2338"></a><a id="sthref2339"></a><a id="sthref2340"></a></h2>
<p class="subhead1"><a id="LNPCB1713"></a>Purpose</p>
<p>Use this ANSI dynamic SQL statement to set information in the descriptor area from host variables.</p>
<p class="subhead1"><a id="LNPCB1714"></a>Prerequisites</p>
<p>Use after a DESCRIBE DESCRIPTOR.</p>
<p class="subhead1"><a id="LNPCB1715"></a>Syntax</p>
<img width="592" height="192" src="img/setdesc.gif" alt="SET DESCRIPTOR"/><br/>
<a id="sthref2341" href="img_text/setdesc.htm">Description of the illustration setdesc.gif</a><br/>
<br/>
<p>where <code>item_name</code> can be one of these choices:</p>
<img width="496" height="288" src="img/setdncob.gif" alt="SET DESCRIPTOR"/><br/>
<a id="sthref2342" href="img_text/setdncob.htm">Description of the illustration setdncob.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1716"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for SET DESCRIPTOR statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t37">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t37" headers="r1c1-t37"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment4973" headers="r2c1-t37 r1c2-t37">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed. The array size clause can only be used with DATA, RETURNED_LENGTH and INDICATOR item names.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t37" headers="r1c1-t37">GLOBAL | LOCAL</td>
<td class="cellalignment4973" headers="r3c1-t37 r1c2-t37">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t37" headers="r1c1-t37"><span class="italic">descriptor_name</span>
<p><span class="italic">&#39;descriptor name&#39;</span></p>
</td>
<td class="cellalignment4973" headers="r4c1-t37 r1c2-t37">Host variable containing the name of the allocated ANSI descriptor.
<p>Name of the allocated ANSI descriptor.</p>
</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t37" headers="r1c1-t37">COUNT</td>
<td class="cellalignment4973" headers="r5c1-t37 r1c2-t37">The total number of input or output variables.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t37" headers="r1c1-t37">VALUE</td>
<td class="cellalignment4973" headers="r6c1-t37 r1c2-t37">The position of the referenced host variable in the statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t37" headers="r1c1-t37"><span class="italic">item_name</span></td>
<td class="cellalignment4973" headers="r7c1-t37 r1c2-t37">See <a href="pco10ady.htm#g1029727">Table 10-6</a>, and <a href="pco10ady.htm#g1029923">Table 10-7</a> for lists of the <span class="italic">item_names</span>, and their descriptions.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t37" headers="r1c1-t37"><span class="italic">host_var</span></td>
<td class="cellalignment4973" headers="r8c1-t37 r1c2-t37">Host variable containing the total number of input or output variables.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t37" headers="r1c1-t37"><span class="italic">integer</span></td>
<td class="cellalignment4973" headers="r9c1-t37 r1c2-t37">Total number of input or output variables.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t37" headers="r1c1-t37"><span class="italic">host_var</span></td>
<td class="cellalignment4973" headers="r10c1-t37 r1c2-t37">The host variables used to set the item.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t37" headers="r1c1-t37">REF</td>
<td class="cellalignment4973" headers="r11c1-t37 r1c2-t37">Reference semantics are to be used. Can be used only with RETURNED_LENGTH, DATA, and INDICATOR item names.
<p>Must be used to set RETURNED_LENGTH.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1717"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option. Set CHARACTER_SET_NAME to UTF16 for client-side Unicode support. See <a href="pco10ady.htm#i1001420">&#34;SET DESCRIPTOR&#34;</a> for complete details, including tables of descriptor item names.</p>
<p class="subhead1"><a id="LNPCB1718"></a>Example</p>
<pre>     EXEC SQL SET DESCRIPTOR GLOBAL :mydescr COUNT = 3 END-EXEC.
</pre>
<p class="subhead1"><a id="LNPCB1719"></a>Related Topics</p>
<p><a href="#i18519">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i19201">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)</a>.</p>
<p><a href="#i18533">DESCRIBE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i18535">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#i12803">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12829"></a>
<div id="LNPCB1720" class="sect1">
<h2 class="sect1">UPDATE (Executable Embedded SQL)<a id="sthref2343"></a><a id="sthref2344"></a><a id="sthref2345"></a><a id="sthref2346"></a><a id="sthref2347"></a><a id="sthref2348"></a><a id="sthref2349"></a> <a id="sthref2350"></a></h2>
<p class="subhead1"><a id="LNPCB1721"></a>Purpose</p>
<p>To change existing values in a table or in a view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCB1722"></a>Prerequisites</p>
<p>For you to update values in a table or snapshot, the table must be in your own schema or you must have UPDATE privilege on the table.</p>
<p>For you to update values in the base table of a view, the owner of the schema containing the view must have UPDATE privilege on the base table. Also, if the view is in a schema other than your own, you must have UPDATE privilege on the view.</p>
<p>The UPDATE ANY TABLE system privilege also enables you to update values in any table or any view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCB1723"></a>Syntax</p>
<img width="592" height="368" src="img/update.gif" alt="UPDATE"/><br/>
<a id="sthref2351" href="img_text/update.htm">Description of the illustration update.gif</a><br/>
<br/>
<p>where DML returning clause is:</p>
<img width="592" height="128" src="img/return.gif" alt="UPDATE"/><br/>
<a id="sthref2352" href="img_text/return.htm">Description of the illustration return.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1724"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for UPDATE statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t38">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t38" headers="r1c1-t38">AT</td>
<td class="cellalignment4973" headers="r2c1-t38 r1c2-t38"><a id="sthref2353"></a>identifies the database to which the UPDATE statement is issued. The database can be identified by either:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t38" headers="r1c1-t38"><span class="italic">dbname</span></td>
<td class="cellalignment4973" headers="r3c1-t38 r1c2-t38">A database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t38" headers="r1c1-t38"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r4c1-t38 r1c2-t38">A host variable whose value is a previously declared <span class="italic">dbname</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t38" headers="r1c1-t38">-</td>
<td class="cellalignment4973" headers="r5c1-t38 r1c2-t38">If you omit this clause, the UPDATE statement is issued to your default database.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t38" headers="r1c1-t38">FOR :<span class="italic">host_integer</span></td>
<td class="cellalignment4973" headers="r6c1-t38 r1c2-t38">Limits the number of times the UPDATE statement is executed if the SET and WHERE clauses contain array host variables. If you omit this clause, Oracle executes the statement once for each component of the smallest array.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t38" headers="r1c1-t38"><span class="italic">schema</span></td>
<td class="cellalignment4973" headers="r7c1-t38 r1c2-t38">The schema containing the table or view. If you omit <span class="italic">schema</span>, Oracle assumes the table or view is in your own schema.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t38" headers="r1c1-t38"><span class="italic">table view</span></td>
<td class="cellalignment4973" headers="r8c1-t38 r1c2-t38">The name of the table to be updated. If you specify <span class="italic">view</span>, Oracle updates the view&#39;s base table.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t38" headers="r1c1-t38"><span class="italic">dblink</span></td>
<td class="cellalignment4973" headers="r9c1-t38 r1c2-t38"><a id="sthref2354"></a>A complete or partial name of a database link to a remote database where the table or view is located. For information on referring to database links, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a> You can only use a database link to update a remote table or view if you are using Oracle with the distributed option.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t38" headers="r1c1-t38"><span class="italic">part_name</span></td>
<td class="cellalignment4973" headers="r10c1-t38 r1c2-t38">Name of partition in the table</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t38" headers="r1c1-t38"><span class="italic">alias</span></td>
<td class="cellalignment4973" headers="r11c1-t38 r1c2-t38">A name used to reference the table, view, or subquery elsewhere in the statement.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t38" headers="r1c1-t38"><span class="italic">column</span></td>
<td class="cellalignment4973" headers="r12c1-t38 r1c2-t38">The name of a column of the table or view that is to be updated. If you omit a column of the table from the SET clause, that column&#39;s value remains unchanged.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r13c1-t38" headers="r1c1-t38"><span class="italic">expr</span></td>
<td class="cellalignment4973" headers="r13c1-t38 r1c2-t38">The new value assigned to the corresponding column. This expression can contain host variables and optional indicator variables. See the syntax of <span class="italic">expr</span> in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r14c1-t38" headers="r1c1-t38"><span class="italic">subquery_1</span></td>
<td class="cellalignment4973" headers="r14c1-t38 r1c2-t38">A subquery that returns new values that are assigned to the corresponding columns. For the syntax of a subquery, see &#34;SELECT&#34; in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r15c1-t38" headers="r1c1-t38"><span class="italic">subquery_2</span></td>
<td class="cellalignment4973" headers="r15c1-t38 r1c2-t38">A subquery that return a new value that is assigned to the corresponding column. For the syntax of a subquery, see &#34;SELECT&#34; in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r16c1-t38" headers="r1c1-t38">WHERE</td>
<td class="cellalignment4973" headers="r16c1-t38 r1c2-t38"><a id="sthref2355"></a>Specifies which rows of the table or view are updated:</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r17c1-t38" headers="r1c1-t38">-</td>
<td class="cellalignment4973" headers="r17c1-t38 r1c2-t38"><span class="italic">condition</span></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r18c1-t38" headers="r1c1-t38">-</td>
<td class="cellalignment4973" headers="r18c1-t38 r1c2-t38">CURRENT OF</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r19c1-t38" headers="r1c1-t38">-</td>
<td class="cellalignment4973" headers="r19c1-t38 r1c2-t38">If you omit this clause entirely, Oracle updates all rows of the table or view.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r20c1-t38" headers="r1c1-t38"><span class="italic">DML returning clause</span></td>
<td class="cellalignment4973" headers="r20c1-t38 r1c2-t38">See <a href="pco05sql.htm#i6276">&#34;DML Returning Clause&#34;</a> for a discussion.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1725"></a>Usage Notes</p>
<p>Host variables in the SET and WHERE clauses must be either all scalars or all arrays. If they are scalars, Oracle executes the UPDATE statement only once. If they are arrays, Oracle executes the statement once for each set of array components. Each execution may update zero, one, or multiple rows.</p>
<p>Array host variables can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller</p>
<p>of the following values:</p>
<ul>
<li>
<p>The size of the smallest array</p>
</li>
<li>
<p>The value of the <span class="italic">host_integer</span> in the optional FOR clause</p>
</li>
</ul>
<p>The cumulative number of rows updated is returned through the third element of the SQLERRD component of the SQLCA. When arrays are used as input host variables, this count reflects the total number of updates for all components of the array processed in the UPDATE statement. If no rows satisfy the condition, no rows are updated and Oracle returns an error message through the SQLCODE element of the SQLCA. If you omit the WHERE clause, all rows are updated and Oracle raises a warning flag in the fifth component of the SQLWARN element of the SQLCA.</p>
<p>You can use comments in an UPDATE statement to pass instructions, or <span class="italic">hints</span>,<a id="sthref2356"></a> to the Oracle optimizer. The optimizer uses hints to choose an execution plan for the statement. For more information on hints, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span>.</a></p>
<p>For more information on this statement, see <a href="pco05sql.htm#i3311">&#34;The Basic SQL Statements&#34;</a> and<a href="pco03dbc.htm#g16449">Chapter 3, &#34;Database Concepts&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1726"></a>Examples</p>
<p><a id="sthref2357"></a>The following examples illustrate the use of the embedded SQL UPDATE statement:</p>
<pre>     EXEC SQL UPDATE EMP 
         SET SAL = :SAL, COMM = :COMM INDICATOR :COMM-IND 
         WHERE ENAME = :ENAME
     END-EXEC. 
 
     EXEC SQL UPDATE EMP 
         SET (SAL, COMM) = 
             (SELECT AVG(SAL)*1.1, AVG(COMM)*1.1 
             FROM EMP) 
         WHERE ENAME = &#39;JONES&#39;
     END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1727"></a>Related Topics</p>
<p><a href="#i12819">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i12996"></a>
<div id="LNPCB1728" class="sect1">
<h2 class="sect1">VAR (Oracle Embedded SQL Directive)<a id="sthref2358"></a><a id="sthref2359"></a><a id="sthref2360"></a></h2>
<p class="subhead1"><a id="LNPCB1729"></a>Purpose</p>
<p>To perform <span class="italic">host variable equivalencing<a id="sthref2361"></a><a id="sthref2362"></a></span>, to assign a specific Oracle external datatype to an individual host variable, overriding the default datatype assignment. There is an optional clause, CONVBUFSZ, that specifies the size of a buffer for character set conversion.</p>
<p class="subhead1"><a id="LNPCB1730"></a>Prerequisites</p>
<p>The host variable must be previously declared in the embedded SQL program.</p>
<p class="subhead1"><a id="LNPCB1731"></a>Syntax</p>
<img width="592" height="176" src="img/var.gif" alt="VAR"/><br/>
<a id="sthref2363" href="img_text/var.htm">Description of the illustration var.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1732"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for VAR statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t39">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t39" headers="r1c1-t39"><span class="italic">host_variable</span></td>
<td class="cellalignment4973" headers="r2c1-t39 r1c2-t39">The host variable to be assigned an Oracle external datatype.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t39" headers="r1c1-t39"><span class="italic">dtyp</span></td>
<td class="cellalignment4973" headers="r3c1-t39 r1c2-t39">An Oracle external datatype recognized by Pro*COBOL (not an Oracle internal datatype). The datatype may include a length, precision, or scale. This external datatype is assigned to the <span class="italic">host_variable</span>. For a list of external datatypes, see <a href="pco04dat.htm#i20902">&#34;External Datatypes&#34;</a>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t39" headers="r1c1-t39"><span class="italic">size</span></td>
<td class="cellalignment4973" headers="r4c1-t39 r1c2-t39">The size in bytes of a buffer in the Oracle runtime library used to perform conversion between character sets of the <span class="italic">host_variable</span>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCB1733"></a>Usage Notes</p>
<p>Datatype equivalencing is useful for any of the following purposes:</p>
<ul>
<li>
<p>To store program data as binary data in the database</p>
</li>
<li>
<p>To override default datatype conversion</p>
</li>
</ul>
<p>For more information about Oracle datatypes, see <a href="pco04dat.htm#i22676">&#34;Sample Program 4: Datatype Equivalencing&#34;</a>.</p>
<p class="subhead1"><a id="LNPCB1734"></a>Example</p>
<p><a id="sthref2364"></a>This example equivalences the host variable DEPT_NAME to the datatype VARCHAR2 and the host variable BUFFER to the datatype RAW(200):</p>
<pre>     EXEC SQL BEGIN DECLARE SECTION END-EXEC. 
     ... 
     01 DEPT-NAME  PIC X(15).
* -- default datatype is CHAR 
     EXEC SQL VAR DEPT-NAME IS VARCHAR2 END-EXEC.
* -- reset to STRING 
     ...
     01 BUFFER-VAR.
          05 BUFFER  PIC X(200).     
* -- default datatype is CHAR 
     EXEC SQL VAR BUFFER IS RAW(200) END-EXEC.
* -- refer to RAW 
     ...
     EXEC SQL END DECLARE SECTION END-EXEC. 
</pre>
<p class="subhead1"><a id="LNPCB1735"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="sect1" -->
<a id="i13647"></a>
<div id="LNPCB1736" class="sect1">
<h2 class="sect1">WHENEVER (Embedded SQL Directive)<a id="sthref2365"></a><a id="sthref2366"></a> <a id="sthref2367"></a></h2>
<p class="subhead1"><a id="LNPCB1737"></a>Purpose</p>
<p>To specify the action to be taken when an error or warning results from executing an embedded SQL program.</p>
<p class="subhead1"><a id="LNPCB1738"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCB1739"></a>Syntax</p>
<img width="393" height="146" src="img/whenever.gif" alt="WHENEVER"/><br/>
<a id="sthref2368" href="img_text/whenever.htm">Description of the illustration whenever.gif</a><br/>
<br/>
<p>where DO.CALL.CLAUSE is:</p>
<img width="496" height="62" src="img/docall.gif" alt="WHENEVER"/><br/>
<a id="sthref2369" href="img_text/docall.htm">Description of the illustration docall.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCB1740"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment4974" title="keywords and parameters for WHENEVER statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment4965">
<th class="cellalignment4972" id="r1c1-t40">Keywords and Parameters</th>
<th class="cellalignment4972" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r2c1-t40" headers="r1c1-t40">NOT FOUND | NOTFOUND</td>
<td class="cellalignment4973" headers="r2c1-t40 r1c2-t40"><a id="sthref2370"></a>Identifies any exception condition that returns an error code of +1403 to SQLCODE (or a +100 code when MODE=ANSI).</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r3c1-t40" headers="r1c1-t40">SQLERROR</td>
<td class="cellalignment4973" headers="r3c1-t40 r1c2-t40"><a id="sthref2371"></a>Identifies a condition that results in a negative return code.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r4c1-t40" headers="r1c1-t40">SQLWARNING</td>
<td class="cellalignment4973" headers="r4c1-t40 r1c2-t40"><a id="sthref2372"></a>Identifies a non-fatal warning condition.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r5c1-t40" headers="r1c1-t40">CONTINUE</td>
<td class="cellalignment4973" headers="r5c1-t40 r1c2-t40">Indicates that the program should progress to the next statement.<a id="sthref2373"></a></td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r6c1-t40" headers="r1c1-t40">GOTO | GO TO</td>
<td class="cellalignment4973" headers="r6c1-t40 r1c2-t40"><a id="sthref2374"></a>Indicates that the program should branch to the statement named by <span class="italic">label</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r7c1-t40" headers="r1c1-t40">STOP</td>
<td class="cellalignment4973" headers="r7c1-t40 r1c2-t40"><a id="sthref2375"></a>Stops program execution.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r8c1-t40" headers="r1c1-t40">DO PERFORM</td>
<td class="cellalignment4973" headers="r8c1-t40 r1c2-t40"><a id="sthref2376"></a>Indicates that the program should perform a paragraph or section at <span class="italic">label</span>.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r9c1-t40" headers="r1c1-t40">DO CALL</td>
<td class="cellalignment4973" headers="r9c1-t40 r1c2-t40"><a id="sthref2377"></a>Indicates that the program should execute a subprogram.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r10c1-t40" headers="r1c1-t40"><span class="italic">subprogram_name</span></td>
<td class="cellalignment4973" headers="r10c1-t40 r1c2-t40">The subprogram to be executed. It may have to be inside quotes (&#34;).</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r11c1-t40" headers="r1c1-t40">USING</td>
<td class="cellalignment4973" headers="r11c1-t40 r1c2-t40">Indicates that the parameters of the subprogram follow.</td>
</tr>
<tr class="cellalignment4965">
<td class="cellalignment4973" id="r12c1-t40" headers="r1c1-t40"><span class="italic">param</span></td>
<td class="cellalignment4973" headers="r12c1-t40 r1c2-t40">A list of subprogram parameters separated by blanks.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p><a id="sthref2378"></a><a id="sthref2379"></a>The WHENEVER directive enables your program to take one of several possible actions in the event an embedded SQL statement results in an error or warning.</p>
<p>The scope of a WHENEVER statement is positional, rather than logical. A WHENEVER statement applies to all embedded SQL statements that textually follow it in the source file, not in the flow of the program logic. A WHENEVER statement remains in effect until it is superseded by another WHENEVER statement checking for the same condition.</p>
<p>For more information about and examples of the conditions and actions of this directive, see <a href="pco08err.htm#i13728">&#34;WHENEVER Directive&#34;</a><span class="italic">.</span></p>
<p>Do not confuse the WHENEVER embedded SQL directive with the WHENEVER SQL*Plus command.</p>
<p class="subhead1"><a id="LNPCB1741"></a>Example</p>
<p><a id="sthref2380"></a>The following example illustrates the use of the WHENEVER directive in a Pro*COBOL embedded SQL program:</p>
<pre>     EXEC SQL WHENEVER NOT FOUND CONTINUE END-EXEC.
     ... 
     EXEC SQL WHENEVER SQLERROR GOTO SQL-ERROR END-EXEC. 
     ... 
 SQL-ERROR. 
     EXEC SQL WHENEVER SQLERROR CONTINUE END-EXEC. 
     DISPLAY &#34;ORACLE ERROR DETECTED.&#34;.
     EXEC SQL ROLLBACK RELEASE END-EXEC.
     STOP RUN. 
</pre>
<p class="subhead1"><a id="LNPCB1742"></a>Related Topics</p>
<p>None</p>
</div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4964">
<tr>
<td class="cellalignment4973">
<table class="cellalignment4969">
<tr>
<td class="cellalignment4968"><a href="pcoaechk.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4968"><a href="pcoawin.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4976">
<table class="cellalignment4967">
<tr>
<td class="cellalignment4968"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4968"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4968"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4968"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4968"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4968"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>