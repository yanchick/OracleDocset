<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-3675"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Text%20SQL%20Statements%20and%20Operators"></a><title>Oracle Text SQL Statements and Operators</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="ALTER INDEX statement, SQL commands, ALTER INDEX, index maintenance, maintaining index, syntax overview, parameters syntax, renaming index, index, renaming, rename syntax, rebuilding index, syntax, stopword, adding dynamically, DML processing, batch, replacing preferences, preferences, replacing, rebuild syntax, sections, metadata, replacing metadata, changing, METADATA keyword, synchronize index, synchronizing, on commit, sync parameter, EVERY parameter, SYNC EVERY parameter, SYNC ON COMMIT parameter, automatic index synchronization, failed index operation, resuming, resuming failed index, zone section, field section, attribute section, stop section, parallel indexing, indexing, parallel, examples, ALTER TABLE statement, partitioned tables, modifying, CATSEARCH operator, CONTAINS operator, query template, template query, query, example, CREATE INDEX statement, CREATE INDEX, creating, context indextype, indextype context, CTXCAT index, about, CTXRULE index, CONTEXT index, CONTEXT, ONLINE, CREATE INDEX and, FILTER BY, ORDER BY, partitioned index, local, local partitioned index, creating local in parallel, JOB_QUEUE_PROCESSES initialization parameter, specifying for indexing, charset column, format column, TEXT format column value, BINARY format column value, IGNORE format column value, language column, memory, for indexing, populate parameter, nopopulate parameter, empty index, populate index parameter, nopopulate index parameter, CTXCAT, supported preferences, unsupported preferences, CTXRULE, lexer types, and CTXRULE index, DROP INDEX statement, DROP INDEX, MATCHES operator"/>
<meta name="dcterms.created" content="2017-06-08T04:23:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Text Reference"/>
<meta name="dcterms.identifier" content="E41399-12"/>
<meta name="dcterms.isVersionOf" content="CCREF"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="release_changes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="cdatadic.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41399-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-4775F5FE-4569-4DF4-A7CA-B20EC6880CAB"></a> <span id="PAGE" style="display:none;">6/31</span> <!-- End Header -->
<a id="CCREF0100"></a>
<h1 id="CCREF-GUID-4775F5FE-4569-4DF4-A7CA-B20EC6880CAB" class="sect1"><span class="enumeration_chapter">1</span> Oracle Text SQL Statements and Operators</h1>
<div>
<p>This chapter describes the SQL statements and Oracle Text operators for creating and managing Oracle Text indexes and performing Oracle Text queries.</p>
<p>The following statements are described in this chapter:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48">ALTER INDEX</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-DFC14045-45A7-47AA-8FFC-53B222E00E9A">ALTER TABLE: Supported Partitioning Statements</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54">CATSEARCH</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59">CONTAINS</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862">CREATE INDEX</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-9E117E79-F01E-4C34-88E3-17A2BB036389">DROP INDEX</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-6A13B685-0AF6-46E6-8AAC-722905EE0763">MATCHES</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-24B74948-E18F-4B71-8F74-032F933CF53A">MATCH_SCORE</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-263BAC8E-EAA9-4DF2-9F46-354C34E8C3C0">SCORE</a></p>
</li>
</ul>
</div>
<a id="CCREF23682"></a><a id="CCREF23683"></a><a id="CCREF23684"></a><a id="CCREF24122"></a><a id="CCREF24123"></a><a id="CCREF23685"></a><a id="CCREF23686"></a><a id="CCREF23687"></a><a id="CCREF23688"></a><a id="CCREF23689"></a><a id="CCREF23690"></a><a id="CCREF23691"></a><a id="CCREF23692"></a><a id="CCREF23693"></a><a id="CCREF24062"></a><a id="CCREF23694"></a><a id="CCREF23695"></a><a id="CCREF0101"></a>
<div class="props_rev_3"><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48"></a>
<h2 id="CCREF-GUID-47E60252-C731-46A8-B587-AE30C1634F48" class="sect2"><span class="enumeration_section">1.1</span> ALTER INDEX</h2>
<div>
<div class="section">
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-343CE9AA-40E3-4B05-A0BD-E4EBBEA85224">
<p class="notep1">Note:</p>
<p>This section describes the <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> statement as it pertains to managing an Oracle Text domain index.</p>
<p>For a complete description of the <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> statement, see <a class="olink SQLRF00805" target="_blank" href="../SQLRF/statements_1012.htm#SQLRF00805"><span class="italic">Oracle Database SQL Language Reference</span>.</a></p>
</div>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__CHDGHGJE">
<p class="subhead2">ALTER INDEX Purpose</p>
<p>Use <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> to make changes to, or perform maintenance tasks for a <code class="codeph">CONTEXT</code>, <code class="codeph">CTXCAT</code>, or <code class="codeph">CTXRULE</code> index.</p>
<p>All Index Types</p>
<p>Use <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> to perform the following tasks on all Oracle Text index types:</p>
<ul style="list-style-type: disc;">
<li>
<p>Rename the index or index partition. See <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996830">ALTER INDEX RENAME Syntax</a>&#34;</span>.</p>
</li>
<li>
<p>Rebuild the index using different preferences. Some restrictions apply for the <code class="codeph">CTXCAT</code> index type. See <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span>.</p>
</li>
<li>
<p>Add stopwords to the index. See <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span>.</p>
</li>
<li>
<p>Add or remove a sub_lexer, and remove a stopword or set of stopwords for a given symbol (language or language-independent). See <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__CHDBEEJD">ALTER INDEX Sub_Lexer Syntax</a>&#34;</span></p>
</li>
</ul>
<p>CONTEXT and CTXRULE Index Types</p>
<p>Use <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> to perform the following tasks on <code class="codeph">CONTEXT</code> and <code class="codeph">CTXRULE</code> index types:</p>
<ul style="list-style-type: disc;">
<li>
<p>Resume a failed index operation (creation/optimization).</p>
</li>
<li>
<p>Add sections and stop sections to the index.</p>
</li>
<li>
<p>Replace index metadata.</p>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-B4FC1E9C-44F0-4D11-AFE9-5032B322CE34">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span> to learn more about performing these tasks</p>
</div>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Overview of ALTER INDEX Syntax</p>
<p>The syntax for <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> is fairly complex. The major divisions are covered in the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJEBEICE">ALTER INDEX MODIFY PARTITION Syntax</a>&#34;</span>&mdash;use this to modify an index partition&#39;s metadata.</p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJECABDI">ALTER INDEX PARAMETERS Syntax</a>&#34;</span>&mdash;use this to modify the parameters of a nonpartitioned index, or to modify all partitions of a local partitioned index, without rebuilding the index.</p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996830">ALTER INDEX RENAME Syntax</a>&#34;</span>&mdash;use this to rename an index or index partition.</p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span>&mdash;use this to rebuild an index or index partition. With this statement, you can also replace index metadata; add stopwords, sections, and stop sections to an index; and resume a failed operation.</p>
<p>The parameters for <code class="codeph">ALTER INDEX REBUILD</code> have their own syntax, which is a subset of the syntax for <code class="codeph">ALTER</code> <code class="codeph">INDEX</code>. For example, the <code class="codeph">ALTER INDEX REBUILD PARAMETERS</code> statement can take either <code class="codeph">REPLACE</code> or <code class="codeph">RESUME</code> as an argument, and <code class="codeph">ALTER INDEX REBUILD PARAMETERS (&#39;REPLACE&#39;)</code> can take several arguments. Valid examples of <code class="codeph">ALTER INDEX REBUILD</code> include the following statements:</p>
<pre dir="ltr">ALTER INDEX REBUILD PARALLEL <span class="italic">n</span>
ALTER INDEX REBUILD PARAMETERS (&#39;REPLACE DATASTORE <span class="italic">datastore_pref&#39;</span>)
ALTER INDEX REBUILD PARAMETERS (&#39;REPLACE WORDLIST <span class="italic">wordlist_pref</span>&#39;)
</pre></li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJEBEICE">
<p class="subhead2">ALTER INDEX MODIFY PARTITION Syntax</p>
<p>Use the following syntax to modify the metadata of an index partition:</p>
<pre dir="ltr">ALTER INDEX <span class="italic">index_name</span> MODIFY PARTITION <span class="italic">partition_name</span> PARAMETER (<span class="italic">paramstring</span>)
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3676"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-EFB9F452-7692-44A1-9420-C073B4DA0FAE"><!-- --></a>index_name</dt>
<dd>
<p>Specify the name of the index whose partition metadata you want to modify.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3677"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-3658B3A5-F96C-4A2D-BF14-3F7EAD9B37C4"><!-- --></a>partition_name</dt>
<dd>
<p>Specify the name of the index partition whose metadata you want to modify.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3678"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-3A6A87EB-85C9-4911-A0ED-DDCA61548808"><!-- --></a>paramstring</dt>
<dd>
<p>The only valid argument here is &#39;<code class="codeph">REPLACE METADATA</code>&#39;. This follows the same syntax as <code class="codeph">ALTER INDEX REBUILD PARTITION PARAMETERS (&#39;REPLACE METADATA&#39;)</code>; see the <code class="codeph">REPLACE METADATA</code> subsection of the <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span> section for more information. (The two statements are equivalent. <code class="codeph">ALTER INDEX MODIFY PARTITION</code> is offered for ease of use, and is the recommended syntax.)</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJECABDI">
<p class="subhead2">ALTER INDEX PARAMETERS Syntax</p>
<p>Use the following syntax to modify the parameters either of nonpartitioned or local partitioned indexes, without rebuilding the index. For partitioned indexes, this statement works at the index level, not at the partition level. This statement changes information for the entire index, including all partitions.</p>
<pre dir="ltr">ALTER INDEX <span class="italic">index_name</span> PARAMETERS (<span class="italic">paramstring</span>)
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3679"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-0A8F17BC-36BE-430D-B53A-44C8028B8176"><!-- --></a>paramstring</dt>
<dd>
<p><code class="codeph">ALTER INDEX PARAMETERS</code> accepts the following arguments for <span class="variable">paramstring</span>:</p>
<ul style="list-style-type: disc;">
<li>
<p>&#39;<code class="codeph">REPLACE METADATA</code>&#39;</p>
<p>Replaces current metadata. See the <code class="codeph">REPLACE METADATA</code> subsection of the <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span> section for more information.</p>
</li>
<li>
<p>&#39;<code class="codeph">ADD STOPWORD</code>&#39;</p>
<p>Dynamically adds a stopword to an index. See the <code class="codeph">ADD STOPWORD</code> subsection of the <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span> section for more information.</p>
</li>
<li>
<p>&#39;<code class="codeph">ADD FIELD SECTION</code>&#39;</p>
<p>Dynamically adds a field section to an index. See the <code class="codeph">ADD FIELD</code> subsection of the <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span> section for more information. You can add an unlimited number of field sections.</p>
</li>
<li>
<p>&#39;<code class="codeph">ADD ZONE SECTION</code>&#39;</p>
<p>Dynamically adds a zone section to an index. See the <code class="codeph">ADD ZONE</code> subsection of the <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span> section for more information.</p>
</li>
<li>
<p>&#39;<code class="codeph">ADD ATTR SECTION</code>&#39;</p>
<p>Dynamically adds an attribute section to an index. See the <code class="codeph">ADD ATTR</code> subsection of the <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span> section for more information.</p>
</li>
<li>
<p>&#39;<code class="codeph">ADD SDATA SECTION</code>&#39;</p>
<p>Dynamically adds an <code class="codeph">SDATA</code> section to an index, without rebuilding the index. An <code class="codeph">SDATA</code> section can only be added to <code class="codeph">BASIC</code>, <code class="codeph">HTML</code>, <code class="codeph">XML</code>, and <code class="codeph">NEWS</code> section groups. It supports both global as well as local indexes. The syntax is:</p>
<pre dir="ltr">ALTER INDEX <span class="italic">index_name</span> PARAMETERS (ADD SDATA SECTION <span class="italic">sdata_section_name</span> TAG <span class="italic">sdata_section_tag</span> DATATYPE <span class="italic">sdata_section_datatype</span>);
</pre>
<p>The datatype can be <code class="codeph">VARCHAR2</code>, <code class="codeph">CHAR</code>, <code class="codeph">NUMBER</code>, <code class="codeph">DATE</code>, or <code class="codeph">RAW</code>.</p>
<p>See <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__CIHJJJDH">Adding an SDATA Section</a>&#34;</span> for more information.</p>
</li>
</ul>
</dd>
</dl>
<p>Each of the above described parameters has an equivalent <code class="codeph">ALTER INDEX REBUILD PARAMETERS</code> version, except <code class="codeph">ADD SDATA SECTION</code>.</p>
<p>For example, <code class="codeph">ALTER INDEX PARAMETERS (&#39;REPLACE METADATA&#39;)</code> is equivalent to <code class="codeph">ALTER INDEX REBUILD PARAMETERS (&#39;REPLACE METADATA&#39;)</code>. However, the <code class="codeph">ALTER INDEX PARAMETERS</code> versions work on either partitioned or nonpartitioned indexes, whereas the <code class="codeph">ALTER INDEX REBUILD PARAMETERS</code> versions work only on nonpartitioned indexes.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996830">
<p class="subhead2">ALTER INDEX RENAME Syntax</p>
<p>Use the following syntax to rename an index or index partition:</p>
<pre dir="ltr">ALTER INDEX [<span class="variable">schema.]index_name</span> RENAME TO <span class="variable">new_index_name;  </span>

ALTER INDEX [schema.]index_name RENAME PARTITION part_name TO new_part_name;
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3680"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-58CD5790-9FA0-4D10-8DDB-05170A9477B8"><!-- --></a>[schema.]index_name</dt>
<dd>
<p>Specify the name of the index to rename.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3681"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-27D8801B-9588-4C9D-8AEE-0C4F4E537F93"><!-- --></a>new_index_name</dt>
<dd>
<p>Specify the new name for <code class="codeph">schema.index.</code> The <code class="codeph">new_index_name</code> parameter can be no more than 25 bytes, and 21 bytes for a partitioned index. If you specify a name longer than 25 bytes (or longer than 21 bytes for a partitioned index), then Oracle Text returns an error and the renamed index is no longer valid.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-4EFE6DE6-F5D8-4A79-B83C-462541E1376A">
<p class="notep1">Note:</p>
<p>When <code class="codeph">new_index_name</code> is more than 25 bytes (21 for local partitioned index) and less than 30 bytes, Oracle Text renames the index, even though the system returns an error. To drop the index and associated tables, you must drop <code class="codeph">new_index_name</code> with the <code class="codeph">DROP</code> <code class="codeph">INDEX</code> statement and then re-create and drop <code class="codeph">index_name</code>.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3682"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-D0C790A3-A977-4068-B5AA-CA4390A2C490"><!-- --></a>part_name</dt>
<dd>
<p>Specify the name of the index partition to rename.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3683"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-AA3EF602-D0CE-4EDF-B828-4C411C9CAD5A"><!-- --></a>new_part_name</dt>
<dd>
<p>Specify the new name for partition.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">
<p class="subhead2">ALTER INDEX REBUILD Syntax</p>
<p>Use <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code> to rebuild an index, rebuild an index partition, resume a failed operation, replace index metadata, add stopwords to an index, or add sections and stop sections to an index.</p>
<p>The <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code> syntax has its own subsyntax. That is, its parameters have their own syntax. For example, the <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code> <code class="codeph">PARAMETERS</code> statement can take either <code class="codeph">REPLACE</code> or <code class="codeph">RESUME</code> as an argument, and <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code> <code class="codeph">PARAMETERS</code> <code class="codeph">(&#39;REPLACE&#39;)</code> has several arguments it can take.</p>
<p>Valid examples of <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code> include the following statements:</p>
<pre dir="ltr">ALTER INDEX REBUILD PARALLEL <span class="italic">n</span>
ALTER INDEX REBUILD PARAMETERS (REPLACE DATASTORE <span class="italic">datastore_pref</span>)
ALTER INDEX REBUILD PARAMETERS (REPLACE WORDLIST <span class="italic">wordlist_pref</span>)
</pre>
<p>This is the syntax for <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code>:</p>
<pre dir="ltr">ALTER INDEX <span class="variable">[schema.]index</span> [REBUILD] [PARTITION partname] [ONLINE] [PARAMETERS
(<span class="variable">paramstring</span>)][PARALLEL N];
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3684"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-2BCDC0E1-C66C-4001-8CD8-2E235016ADF1"><!-- --></a>PARTITION <span class="italic">partname</span></dt>
<dd>
<p>Rebuilds the index partition <code class="codeph">partname</code>. Only one index partition can be built at a time.</p>
<p>When you rebuild a partition you can specify only <code class="codeph">RESUME</code> or <code class="codeph">REPLACE</code> in <code class="codeph">paramstring</code>. These operations work only on the <code class="codeph">partname</code> you specify.</p>
<p>With the <code class="codeph">REPLACE</code> operation, you can specify <code class="codeph">MEMORY</code>, <code class="codeph">STORAGE</code>, and <code class="codeph">SYNC</code> for each index partition.</p>
<p><span class="bold">Adding Partitions</span> To add a partition to the base table, use the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> SQL statement. When you add a partition to an indexed table, Oracle Text automatically creates the metadata for the new index partition. The new index partition has the same name as the new table partition. Change the index partition name with <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">RENAME</code>.</p>
<p><span class="bold">Splitting or Merging Partitions</span> Splitting or merging a table partition with <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> renders the index partitions invalid. You must rebuild them with <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3685"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-EB8FCD39-00D2-4FC4-8506-3884C82A6DE3"><!-- --></a>ONLINE</dt>
<dd>
<p>Enables you to continue to perform updates, insertions, and deletions on a base table. It does not enable you to query the base table. The <code class="codeph">ONLINE</code> keyword can only be used with the Enteprise Edition of Oracle Database.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-127386FC-C24B-420E-BC3E-891629C4BF20">
<p class="notep1">Note:</p>
<p>You can specify <code class="codeph">REPLACE</code> or <code class="codeph">RESUME</code> when rebuilding an index or an index partition <code class="codeph">ONLINE</code>.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3686"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-EA3D665F-A7E3-4313-8D8A-35FC7E47D926"><!-- --></a>PARAMETERS (paramstring)</dt>
<dd>
<p>Optionally specify <code class="codeph">paramstring</code>. If you do not specify <code class="codeph">paramstring</code>, then Oracle Text rebuilds the index with existing preference settings.</p>
<p>The syntax for <code class="codeph">paramstring</code> is as follows:</p>
<pre dir="ltr">paramstring = 
</pre>
<pre dir="ltr">&#39;REPLACE 
     [DATASTORE <span class="italic">datastore_pref</span>] 
     [FILTER <span class="italic">filter_pref</span>] 
     [LEXER <span class="italic">lexer_pref</span>] 
     [WORDLIST <span class="italic">wordlist_pref</span>] 
     [STORAGE <span class="italic">storage_pref</span>] 
     [STOPLIST <span class="italic">stoplist</span>] 
     [SECTION GROUP <span class="italic">section_group</span>]
     [MEMORY <span class="italic">memsize</span>
     [[POPULATE | NOPOPULATE]
     [INDEX SET <span class="italic">index_set</span>]
 
     [METADATA <span class="italic">preference new_preference</span>]
     [METADATA FORMAT COLUMN format_column_name]
     [[METADATA] SYNC (MANUAL | EVERY &#34;<span class="variable">interval-string</span>&#34; | ON COMMIT)]
     [[METADATA] TRANSACTIONAL|NONTRANSACTIONAL

| RESUME [memory <span class="italic">memsize</span>]
| OPTIMIZE [token <span class="italic">index_token</span> | fast | full [maxtime (<span class="italic">time</span> | unlimited)]
| ADD STOPWORD <span class="italic">word </span>[language <span class="italic">language</span>]
| ADD ZONE SECTION <span class="italic">section_name</span> tag <span class="italic">tag</span>
| ADD FIELD SECTION <span class="italic">section_name</span> tag <span class="italic">tag</span> [(VISIBLE | INVISIBLE)]
| ADD ATTR SECTION <span class="italic">section_name</span> tag <span class="italic">tag@attr</span>
| ADD STOP SECTION <span class="italic">tag&#39;</span>
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3687"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-94F6B64C-1DAE-4E2F-A16E-35F3472C549B"><!-- --></a>REPLACE [<span class="italic">optional_preference_list</span>]</dt>
<dd>
<p>Rebuilds an index. You can optionally specify your own preferences, or system-defined preferences.</p>
<p>You can replace only preferences that are supported for that index type. For instance, you cannot replace index set for a <code class="codeph">CONTEXT</code> or <code class="codeph">CTXRULE</code> index. Similarly, for the <code class="codeph">CTXCAT</code> index type, you can replace lexer, wordlist, storage index set, and memory preferences.</p>
<p>The <code class="codeph">POPULATE</code> parameter is the default and need not be specified. If you want to empty the index of its contents, then specify <code class="codeph">NOPOPULATE</code>. Clear an index of its contents when you must rebuild your index incrementally. The <code class="codeph">NOPOPULATE</code> choice is available for a specific partition of the index, and not just for the entire index.</p>
<p>If you are rebuilding a partitioned index using the <code class="codeph">REPLACE</code> parameter, then you can specify only <code class="codeph">STORAGE</code>, <code class="codeph">MEMORY</code>, and <code class="codeph">NOPOPULATE</code>.</p>
<p>A new wordlist preference <code class="codeph">SEPARATE_OFFSETS</code> specifies that the <code class="codeph">token_info</code> in the index is stored as docids only in one place, and <code class="codeph">offsets</code> is stored only in another place. Refer to <a class="olink CCAPP9553" target="_blank" href="../CCAPP/GUID-8D3C30AE-D466-46C1-A281-916B7D48994C.htm#CCAPP9553"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for information on improved response time using the SEPARATE_OFFSETS option of CONTEXT index.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-C91B59CA-AC8A-4B39-94EE-B098DC112864">
<p class="notep1">Note:</p>
<p>If this procedure modifies the existing index tables for only the following storage attributes of the <code class="codeph">BASIC_STORAGE</code> type (any one of them), then it will not result in re-indexing of data:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BIG_IO</code></p>
</li>
<li>
<p><code class="codeph">I_INDEX_CLAUSE</code></p>
</li>
<li>
<p><code class="codeph">I_TABLE_CLAUSE</code></p>
</li>
<li>
<p><code class="codeph">SEPARATE_OFFSETS</code></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-492BC283-4EA8-4695-B8C6-C32E00DE3C9B">
<p class="notep1">See Also:</p>
<p>.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="cdatadic.htm#GUID-22680996-89CF-4666-89E6-BE8B9431DB02">Oracle Text Indexing Elements</a> for more information about creating and setting preferences, including information about system-defined preferences</p>
</li>
<li>
<p><a class="olink CCAPP9553" target="_blank" href="../CCAPP/GUID-8D3C30AE-D466-46C1-A281-916B7D48994C.htm#CCAPP9553"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for information on improved response time using the SEPARATE_OFFSETS option of CONTEXT index</p>
</li>
</ul>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3688"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJEJFFFJ"><!-- --></a>REPLACE METADATA <span class="italic">preference new_preference</span></dt>
<dd>
<p>Replaces the existing <code class="codeph">preference</code> class settings, including <code class="codeph">SYNC</code> parameters, of the index with the settings from <code class="codeph">new_preference</code>. Only index preferences and attributes are replaced. The index is not rebuilt.</p>
<p>This statement is useful when you want to replace a preference and its attribute settings after the index is built, without re-indexing all data. re-indexing data can require significant time and computing resources.</p>
<p>This statement is also useful for changing the <code class="codeph">SYNC</code> parameter type, which can be automatic, manual, or on-commit.</p>
<p>The <code class="codeph">ALTER INDEX REBUILD PARAMETER (&#39;REPLACE METADATA&#39;)</code> statement does not work for a local partitioned index at the global level for the index. You cannot, for example, use this syntax to change a global preference, such as filter or lexer type, without rebuilding the index. Use <code class="codeph">ALTER INDEX PARAMETERS</code> instead to change the metadata of an index at the global level, including all partitions. See <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJECABDI">ALTER INDEX PARAMETERS Syntax</a>&#34;</span>.</p>
<p><span class="bold">When should I use the METADATA keyword?</span> <code class="codeph">REPLACE METADATA</code> should be used only when the change in index metadata will not lead to an inconsistent index, which can lead to incorrect query results.</p>
<p>For example, use this statement in the following instances:</p>
<ul style="list-style-type: disc;">
<li>
<p>To go from a single-language lexer to a multilexer in anticipation of multilingual data. For an example, see <span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I1000829">Replacing Index Metadata: Changing Single-Lexer to Multilexer</a>&#34;</span>.</p>
</li>
<li>
<p>To change the <code class="codeph">WILDCARD_MAXTERMS</code> setting in <a href="cdatadic.htm#GUID-CD2DE39F-17F7-424E-8DB3-A16C7843965D">BASIC_WORDLIST</a>.</p>
</li>
<li>
<p>To change the <code class="codeph">SYNC</code> parameter type, which can be automatic, manual, or on-commit.</p>
</li>
</ul>
<p>These changes are safe and will not lead to an inconsistent index that might adversely affect your query results.</p>
<div class="infoboxnotewarn" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-FD4861B0-3E46-45DC-A7EE-04E67520B9F1">
<p class="notep1">WARNING:</p>
<p>The <code class="codeph">REPLACE</code> <code class="codeph">METADATA</code> statement can result in inconsistent index data, which can lead to incorrect query results. As such, Oracle does not recommend using this statement, unless you carefully consider the effect it will have on the consistency of your index data and subsequent queries.</p>
</div>
<p>There can be many instances when changing metadata can result in inconsistent index data. For example, Oracle recommends <span class="italic">against</span> using the <code class="codeph">METADATA</code> keyword after performing the following procedures:</p>
<ul style="list-style-type: disc;">
<li>
<p>Changing the <a href="cdatadic.htm#GUID-2EE366EC-0748-48D5-81BF-7D6430371358">USER_DATASTORE</a> procedure to a new PL/SQL stored procedure that has different output.</p>
</li>
<li>
<p>Changing the <a href="cdatadic.htm#GUID-CD2DE39F-17F7-424E-8DB3-A16C7843965D">BASIC_WORDLIST</a> attribute <code class="codeph">PREFIX_INDEX</code> from <code class="codeph">NO</code> to <code class="codeph">YES</code> because no prefixes have been generated for existing documents. Changing it from <code class="codeph">YES</code> to <code class="codeph">NO</code> is safe.</p>
</li>
<li>
<p>Adding or changing <code class="codeph">BASIC_LEXER</code> printjoin and skipjoin characters, because new queries with these characters would be lexed differently from how these characters were lexed at index time.</p>
</li>
<li>
<p>Do not use <code class="codeph">REPLACE</code> <code class="codeph">METADATA</code> with <code class="codeph">FORWARD_INDEX</code>. Instead use <code class="codeph">REPLACE</code> <code class="codeph">STORAGE</code>.</p>
</li>
</ul>
<p>In these unsafe cases, Oracle recommends rebuilding the index.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3689"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-FDE24A55-1C4D-48E1-9CED-8121AC71A331"><!-- --></a>REPLACE [METADATA] SYNC (MANUAL | EVERY &#34;<span class="variable">interval-string</span>&#34; | ON COMMIT)</dt>
<dd>
<p>Specifies <code class="codeph">SYNC</code> for automatic synchronization of the <code class="codeph">CONTEXT</code> index when a DML change has occurred to the base table. You can specify one of the <code class="codeph">SYNC</code> methods shown in <a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__CIHGAAFI" title="This table shows methods for using ALTER INDEX REPLACE SYNC.">Table 1-1</a>.</p>
<div class="tblformal" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__CIHGAAFI">
<p class="titleintable">Table 1-1 ALTER INDEX SYNC Methods</p>
<table class="cellalignment3033" title="ALTER INDEX SYNC Methods" summary="This table shows methods for using ALTER INDEX REPLACE SYNC.">
<thead>
<tr class="cellalignment3022">
<th class="cellalignment3055" id="d5330e1361">SYNC Type</th>
<th class="cellalignment3056" id="d5330e1364">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3022">
<td class="cellalignment3057" id="d5330e1369" headers="d5330e1361">
<p><code class="codeph">MANUAL</code></p>
</td>
<td class="cellalignment3058" headers="d5330e1369 d5330e1364">
<p>Means no automatic synchronization. This is the default. You must manually synchronize the index using <code class="codeph">CTX_DDL.SYNC_INDEX</code>.</p>
<p>Use <code class="codeph">MANUAL</code> to disable <code class="codeph">ON</code> <code class="codeph">COMMIT</code> and <code class="codeph">EVERY</code> synchronization.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3057" id="d5330e1394" headers="d5330e1361">
<p><code class="codeph">EVERY</code> <span class="variable">interval-string</span></p>
</td>
<td class="cellalignment3058" headers="d5330e1394 d5330e1364">
<p>Automatically synchronize the index at a regular interval specified by the value of <span class="variable">interval-string</span>, which takes the same syntax as that for scheduler jobs. Automatic synchronization using <code class="codeph">EVERY</code> requires that the index creator have <code class="codeph">CREATE</code> <code class="codeph">JOB</code> privileges.</p>
<p>Ensure that <span class="variable">interval-string</span> is set to a long enough period so that any previous synchronization jobs will have completed. Otherwise, the synchronization job may hang. The <span class="variable">interval-string</span> argument must be enclosed in double quotation marks (&#39;&#39; &#39;&#39;).</p>
<p>See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000959">Enabling Automatic Index Synchronization</a>&#34;</span> for an example of automatic synchronization syntax.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3057" id="d5330e1431" headers="d5330e1361">
<p><code class="codeph">ON</code> <code class="codeph">COMMIT</code></p>
</td>
<td class="cellalignment3058" headers="d5330e1431 d5330e1364">
<p>Synchronize the index immediately after a commit. The commit does not return until the sync is complete. (Because the synchronization is performed as a separate transaction, there may be a time period, usually small, when the data is committed but index changes are not.)</p>
<p>The operation uses the memory specified with the <span class="variable">memory</span> parameter.</p>
<p>Note that the sync operation has its own transaction context. If this operation fails, the data transaction still commits. Index synchronization errors are logged in the <code class="codeph">CTX_USER_INDEX_ERRORS</code> view. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000916">Viewing Index Errors</a>&#34;</span> under <code class="codeph">CREATE INDEX</code>.</p>
<p><code class="codeph">ON COMMIT</code> sync works best when the <code class="codeph">STAGE_ITAB</code> index option is enabled, because otherwise it causes significant fragmentation of the main index, requiring frequent OPTIMIZE calls.</p>
<p>See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000959">Enabling Automatic Index Synchronization</a>&#34;</span> for an example of <code class="codeph">ON</code> <code class="codeph">COMMIT</code> syntax.</p>
<p>Refer to <a class="olink CCAPP9554" target="_blank" href="../CCAPP/GUID-54F2466B-7D05-45AC-A64E-04717F75C507.htm#CCAPP9554"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for more information about the STAGE_ITAB option of the CONTEXT index.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Each partition of a locally partitioned index can have its own type of sync: (<code class="codeph">ON COMMIT</code>, <code class="codeph">EVERY</code>, or <code class="codeph">MANUAL</code>). The type of sync specified in master parameter strings applies to all index partitions unless a partition specifies its own type.</p>
<p>With automatic (<code class="codeph">EVERY</code>) synchronization, you can specify memory size and parallel synchronization. The syntax is:</p>
<pre dir="ltr">... EVERY <span class="variable">interval_string</span> MEMORY <span class="variable">mem_size</span> PARALLEL <span class="variable">paradegree</span> ...
</pre>
<p><code class="codeph">ON</code> <code class="codeph">COMMIT</code> synchronizations can only be executed serially and at the same memory size as what was specified at index creation.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-C16D0FF2-F374-4205-A60D-5A1090250361">
<p class="notep1">Note:</p>
<p>This command rebuilds the index. When you want to change the <code class="codeph">SYNC</code> setting without rebuilding the index, use the <code class="codeph">REBUILD REPLACE METADATA SYNC (MANUAL | ON COMMIT)</code> operation.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3690"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-F6BB1283-3156-40FB-A3AA-45D153311C24"><!-- --></a>REPLACE [METADATA] TRANSACTIONAL | NONTRANSACTIONAL</dt>
<dd>
<p><a id="d5330e1532" class="indexterm-anchor"></a><a id="d5330e1534" class="indexterm-anchor"></a><a id="d5330e1538" class="indexterm-anchor"></a><a id="d5330e1540" class="indexterm-anchor"></a><a id="d5330e1542" class="indexterm-anchor"></a>This parameter enables you to turn the <code class="codeph">TRANSACTIONAL</code> property on or off. For more information, see <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJECACGF">&#34;TRANSACTIONAL&#34;</a>&#34;</span>.</p>
<p>Using this parameter only succeeds if there are no rows in the DML pending queue. Therefore, you may need to sync the index before issuing this command.</p>
<p>To turn on the <code class="codeph">TRANSACTIONAL</code> index property:</p>
<pre dir="ltr">ALTER INDEX myidx REBUILD PARAMETERS(&#39;replace metadata transactional&#39;);
</pre>
<p>or</p>
<pre dir="ltr">ALTER INDEX myidx REBUILD PARAMETERS(&#39;replace  transactional&#39;);
</pre>
<p>To turn off the <code class="codeph">TRANSACTIONAL</code> index property:</p>
<pre dir="ltr">ALTER INDEX myidx REBUILD PARAMETERS(&#39;replace metadata nontransactional&#39;);
</pre>
<p>or</p>
<pre dir="ltr">ALTER INDEX myidx REBUILD PARAMETERS(&#39;replace  nontransactional&#39;);
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3691"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-6720B345-4B3E-4572-BBEB-02405D3AA205"><!-- --></a>RESUME [MEMORY <span class="italic">memsize</span>]</dt>
<dd>
<p>Resumes a failed index operation. You can optionally specify the amount of memory to use with <code class="codeph">memsize</code>.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-E0DCC76E-5F7D-495F-951A-436691C228E6">
<p class="notep1">Note:</p>
<p>This <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> operation applies only to <code class="codeph">CONTEXT</code> and <code class="codeph">CTXRULE</code> indexes. It does not apply to <code class="codeph">CTXCAT</code> indexes.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3692"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJECBEJG"><!-- --></a>ADD STOPWORD <span class="italic">word</span> [language <span class="italic">language</span>]</dt>
<dd>
<p>Dynamically adds a stopword word to the index.</p>
<p>Index entries for <code class="codeph">word</code> that existed before this operation are not deleted. However, subsequent queries on <code class="codeph">word</code> are treated as though it has always been a stopword.</p>
<p>When your stoplist is a multilanguage stoplist, you must specify <code class="codeph">language</code>.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3693"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJEBBEDA"><!-- --></a>ADD ZONE SECTION <span class="italic">section_name</span> tag <span class="italic">tag</span></dt>
<dd>
<p>Dynamically adds the zone section <code class="codeph">section_name</code> identified by <code class="codeph">tag</code> to the existing index.</p>
<p>The added section <code class="codeph">section_name</code> applies only to documents indexed after this operation. For the change to take effect, you must manually re-index any existing documents that contain the tag.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-2BBA1E8F-C836-4C3E-B90C-F56E21541BA6">
<p class="notep1">Note:</p>
<p>This <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> operation applies only to <code class="codeph">CONTEXT</code> and <code class="codeph">CTXRULE</code> indexes. It does not apply to <code class="codeph">CTXCAT</code> indexes.</p>
</div>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-FBB40FB4-0680-4D77-BC0D-3740D57C00D7">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__BABEIJDB">Notes</a>&#34;</span></p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3694"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJEBHEGJ"><!-- --></a>ADD FIELD SECTION <span class="italic">section_name</span> tag <span class="italic">tag</span> [(VISIBLE | INVISIBLE)]</dt>
<dd>
<p>Dynamically adds the field section <span class="italic"><code class="codeph">section_name</code></span> identified by <code class="codeph">tag</code> to the existing index. There is no limit to the number of field sections that can be added.</p>
<p>Optionally specify <code class="codeph">VISIBLE</code> to make the field sections visible. The default is <code class="codeph">INVISIBLE</code>.</p>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-8FD98B26-9C6B-4AED-9FAC-2F8CAD083575">
<p class="notep1">See Also:</p>
<p>CTX_DDL.<a href="cddlpkg.htm#GUID-A275E1CF-2F48-4A52-9E4C-4BE1698C647F">ADD_FIELD_SECTION</a> for more information on visible and invisible field sections</p>
</div>
<p>The added section <span class="italic"><code class="codeph">section_name</code></span> applies only to documents indexed after this operation. For the change to affect previously indexed documents, you must explicitly re-index the documents that contain the tag.</p>
<p>This statement does not rebuild the index.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-9B424FEC-2092-4D21-AC8B-1AFAD1F61712">
<p class="notep1">Note:</p>
<p>This <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> operation applies only to <code class="codeph">CONTEXT</code> <code class="codeph">CTXRULE</code> indexes. It does not apply to <code class="codeph">CTXCAT</code> indexes.</p>
</div>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-20215BC2-DFF0-4229-8653-640A81F59AEB">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__BABEIJDB">Notes</a>&#34;</span></p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3695"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BJEBIAID"><!-- --></a>ADD ATTR SECTION <span class="italic">section_name</span> tag <span class="italic">tag@attr</span></dt>
<dd>
<p>Dynamically adds an attribute section <span class="italic"><code class="codeph">section_name</code></span> to the existing index. You must specify the XML tag and attribute in the form <code class="codeph">tag@attr</code>. You can add attribute sections only to XML section groups.</p>
<p>The added attribute section <span class="italic"><code class="codeph">section_name</code></span> applies only to documents indexed after this operation. For the change to take effect, you must manually re-index any existing documents that contain the tag.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-6BBDD00A-98C5-49E0-93C1-398AA1F0EBE2">
<p class="notep1">Note:</p>
<p>This <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> operation applies only to <code class="codeph">CONTEXT</code> <code class="codeph">CTXRULE</code> indexes. It does not apply to <code class="codeph">CTXCAT</code> indexes.</p>
</div>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-8AF32375-4375-4206-833B-D20B94B2425D">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__BABEIJDB">Notes</a>&#34;</span></p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3696"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-4663878B-B9BB-43D1-B01B-318E75300A51"><!-- --></a>ADD STOP SECTION <span class="italic">tag</span></dt>
<dd>
<p>Dynamically adds the stop section identified by <code class="codeph">tag</code> to the existing index. As stop sections apply only to automatic sectioning of XML documents, the index must use the <code class="codeph">AUTO_SECTION_GROUP</code> section group. The tag you specify must be case sensitive and unique within the automatic section group or else <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> raises an error.</p>
<p>The added stop section <code class="codeph">tag</code> applies only to documents indexed after this operation. For the change to affect previously indexed documents, you must explicitly re-index the documents that contain the tag.</p>
<p>The text within a stop section can always be searched.</p>
<p>The number of stop sections you can add is unlimited.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-B4274369-F863-4C8A-95BC-0F8B47BCC431">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__BABEIJDB">Notes</a>&#34;</span></p>
</div>
<div class="infobox-note" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-76AA54D3-2D1B-4E7A-9BA1-5FEA50807984">
<p class="notep1">Note:</p>
<p>This <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> operation applies only to <code class="codeph">CONTEXT</code> indexes. It does not apply to <code class="codeph">CTXCAT</code> indexes.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3697"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-79B0D55C-8A3D-44A4-AA8D-7AA43ED58AA7"><!-- --></a>PARALLEL n</dt>
<dd>
<p>Using <span class="italic">n</span>, you can optionally specify the parallel degree for parallel indexing. This parameter is supported only when you use <code class="codeph">SYNC</code>, <code class="codeph">REPLACE</code>, and <code class="codeph">RESUME</code> <code class="codeph">in paramstring</code>. The actual degree of parallelism might be smaller depending on your resources.</p>
<p>Parallel indexing can speed up indexing when you have large amounts of data to index and when your operating system supports multiple CPUs.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__CHDBEEJD">
<p class="subhead2">ALTER INDEX Sub_Lexer Syntax</p>
<p>Use the following syntax.</p>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-9FA0F35D-AB59-40AD-85CD-8467098AC76D">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__CHDGHGJE">ALTER INDEX Purpose</a>&#34;</span> for list of types of indexes and syntax for ALTER INDEX</p>
</div>
<pre dir="ltr">New paramstring = 
&#39;REPLACE 
     [DATASTORE datastore_pref] 
     [FILTER filter_pref] 
     [LEXER lexer_pref] 
     [WORDLIST wordlist_pref] 
     [STORAGE storage_pref] 
     [STOPLIST stoplist] 
     [SECTION GROUP section_group]
     [MEMORY memsize
     [[POPULATE | NOPOPULATE]
     [INDEX SET index_set]
 
     [METADATA preference new_preference]
     [[METADATA] SYNC (MANUAL | EVERY &#34;interval-string&#34; | ON COMMIT)]
     [[METADATA] TRANSACTIONAL|NONTRANSACTIONAL
 
| RESUME [memory memsize]
| OPTIMIZE [token index_token | fast | full [maxtime (time | unlimited)]
| SYNC [memory memsize]
| ADD STOPWORD word <span class="bold">[language language][LANGUAGE_DEPENDENT(TRUE|FALSE)]</span>
| ADD ZONE SECTION section_name tag tag
| ADD FIELD SECTION section_name tag tag [(VISIBLE | INVISIBLE)]
| ADD ATTR SECTION section_name tag tag@attr
| ADD STOP SECTION tag
<span class="bold">| ADD SUB_LEXER sub_lexer_name LANGUAGE language [ALT_VALUE alternate_value_for_language] [LANGUAGE_DEPENDENT (TRUE|FALSE)]</span>
<span class="bold">| REMOVE SUB_LEXER LANGUAGE language</span>
<span class="bold">| REMOVE STOPWORD word [LANGUAGE language]</span>
<span class="bold">| REMOVE STOPWORDS FOR LANGUAGE language</span>
<span class="bold">| MIGRATE to MULTI_STOPLIST [LANGUAGE COLUMN lang]</span>
<span class="bold">| MIGRATE FIELD SECTION field_section_name to [READ ONLY] MDATA</span>
<span class="bold">| UPDATE SUB_LEXER LANGUAGE language TO sub_lexer_preference</span>
<span class="bold">| ADD MDATA SECTION secname TAG sectag</span>
</pre>
<p>Sub_Lexer Example</p>
<pre dir="ltr">ALTER INDEX myidx PARAMETERS(&#39;ADD SUB_LEXER mycompany_lexer LANGUAGE mycompany LANGUAGE_DEPENDENT FALSE&#39;);

ALTER INDEX myidx PARAMETERS(&#39;REMOVE STOPWORDS FOR LANGUAGE mycompany&#39;);
</pre>
<p>Sub_Lexer Notes</p>
<p>The language can be Oracle predefined language symbols (globalization support name or abbreviation of an Oracle Text-supported language), or user-defined symbols for language independent sub_lexer or stopword.</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3698"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-AE73BC01-FC35-421B-BFE3-DF5447992AF5"><!-- --></a>ADD SUB_LEXER</dt>
<dd>
<p>The following conditions apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>If LANGUAGE_DEPENDENT clause is not provided, it will default TRUE.</p>
</li>
<li>
<p>Sync will be blocked (or it will be blocked by sync).</p>
</li>
<li>
<p>If adding first language independent sub_lexer, then base table will also be locked.</p>
</li>
<li>
<p>Adding first language independent sub_lexer or stopword will take longer to complete. Otherwise, it should take fraction of a second to complete unless it&#39;s being blocked by ongoing sync process on the same index.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3699"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-DD054C3B-79E1-43E5-B723-073570888E51"><!-- --></a>REMOVE SUB_LEXER</dt>
<dd>
<p>Will succeed only if there are no documents with language column set to the symbol for the sub_lexer being removed.</p>
</dd>
</dl>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3700"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-5B062FD4-70EF-40B6-828A-E771043F54B5"><!-- --></a>REMOVE STOPWORD</dt>
<dd>
<p>The following conditions apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>If LANGUAGE clause is not specified, it is assumed that the index is using basic_stoplist. If the index is not using basic_stoplist, an error will be raised.</p>
</li>
<li>
<p>If the index is using basic_stoplist (instead of multi_stoplist), then it will succeed only if the base table is empty.</p>
</li>
<li>
<p>If the index is using multi_stoplist, and user specifies &#34;ALL&#34; for LANGUAGE clause, then it will succeed only if the base table is empty.</p>
</li>
<li>
<p>If the index is using multi_stoplist, and user specifies a symbol for LANGUAGE clause, then it will succeed only if there are no documents with language column set to the symbol for the stopword being removed.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-A7717ABC-064E-4B57-B101-490380AB6472">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48__I996850">ALTER INDEX REBUILD Syntax</a>&#34;</span></p>
</div>
</dd>
</dl>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3701"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-83B1EA8F-E52E-4B1A-931A-3ECF56F97B4B"><!-- --></a>MIGRATE TO MULTI_STOPLIST [LANGUAGE COLUMN lang]</dt>
<dd>
<p>The following conditions apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>Migrate the stoplist of an existing Text index to Multi_stoplist. The language of the existing stopwords will have the value of ALL.</p>
</li>
<li>
<p>If <code class="codeph">LANGUAGE</code> column has already been defined for the index:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">LANGUAGE</code> <code class="codeph">COLUMN</code> can be skipped (old language column is retained for the index).</p>
</li>
<li>
<p>If <code class="codeph">LANGUAGE</code> <code class="codeph">COLUMN</code> is specified and there is a mismatch between index language column and the one specified, an error will be raised.</p>
</li>
</ul>
</li>
<li>
<p><code class="codeph">LANGUAGE</code> <code class="codeph">COLUMN</code> must be specified for the index; otherwise, an error is raised.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3702"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-6A70181E-53C7-42C0-A80A-DC1A64C542C7"><!-- --></a>MIGRATE FIELD SECTION TO MDATA SECTION</dt>
<dd>
<p>The following conditions apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>Allow user to convert a field section to MDATA section. Specify READ ONLY if the MDATA section is meant to be a READ_ONLY MDATA section (ADD and REMOVE not allowed).</p>
</li>
<li>
<p>Limitation: Tokens in migrated MDATA sections will not have typical MDATA characteristics - case information, tokens being stored as it is in the document, etc. To retain these, those documents need to be reindexed.</p>
</li>
</ul>
</dd>
</dl>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3703"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-A850775A-DAB1-4EA3-ACD3-0A78CE1E495B"><!-- --></a>UPDATE SUB_LEXER LANGUAGE SUB_LEXER_SYMBOL TO SUB_LEXER_PREFERENCE</dt>
<dd>
<p>The following conditions apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>Allows user to update sublexer dynamically.</p>
</li>
<li>
<p>Language, alt_value, language dependency should remain same for the old and new sublexer preference.</p>
</li>
<li>
<p>For updating the default sublexer, the syntax is:</p>
<pre dir="ltr">UPDATE SUB_LEXER DEFAULT TO SUB_LEXER_PREFERENCE
</pre></li>
</ul>
</dd>
</dl>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3704"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-1F9BA31B-337B-4AAB-A410-B3D7AF4404E0"><!-- --></a>ADD MDATA SECTION secname TAG sectag</dt>
<dd>
<p>The following conditions apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>Allows users to add MDATA section to the index.</p>
</li>
<li>
<p>Cannot be used with NULL/AUTO/PATH section groups.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">ALTER INDEX Examples</p>
<p>Resuming Failed Index<a id="d5330e2088" class="indexterm-anchor"></a></p>
<p>The following statement resumes the indexing operation on <code class="codeph">newsindex</code> with 2 megabytes of memory:</p>
<pre dir="ltr">ALTER INDEX newsindex REBUILD PARAMETERS(&#39;resume memory 2M&#39;);
</pre>
<p>Rebuilding an Index<a id="d5330e2103" class="indexterm-anchor"></a></p>
<p>The following statement rebuilds the index, replacing the stoplist preference with <code class="codeph">new_stop</code>.</p>
<pre dir="ltr">ALTER INDEX newsindex REBUILD PARAMETERS(&#39;replace stoplist new_stop&#39;);
</pre>
<p>Rebuilding a Partitioned Index <a id="d5330e2116" class="indexterm-anchor"></a></p>
<p>The following example creates a partitioned text table, populates it, and creates a partitioned index. It then adds a new partition to the table and rebuilds the index with <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> as follows:</p>
<pre dir="ltr">PROMPT create partitioned table and populate it

create table part_tab (a int, b varchar2(40)) partition by range(a)
(partition p_tab1 values less than (10),
 partition p_tab2 values less than (20),
 partition p_tab3 values less than (30));

insert into part_tab values (1,&#39;Actinidia deliciosa&#39;);
insert into part_tab values (8,&#39;Distictis buccinatoria&#39;);
insert into part_tab values (12,&#39;Actinidia quinata&#39;);
insert into part_tab values (18,&#39;Distictis Rivers&#39;);
insert into part_tab values (21,&#39;pandorea jasminoides Lady Di&#39;);
insert into part_tab values (28,&#39;pandorea rosea&#39;);

commit;

PROMPT create partitioned index
create index part_idx on part_tab(b) indextype is ctxsys.context
local (partition p_idx1, partition p_idx2, partition p_idx3);
</pre>
<pre dir="ltr">PROMPT add a partition and populate it
alter table part_tab add partition p_tab4 values less than (40);
insert into part_tab values (32, &#39;passiflora citrina&#39;);
insert into part_tab values (33, &#39;passiflora alatocaerulea&#39;);
commit;
</pre>
<p>The following statement rebuilds the index in the newly populated partition. In general, the index partition name for a newly added partition is the same as the table partition name, unless the name has already been used. In this case, Oracle Text generates a new name.</p>
<pre dir="ltr">alter index part_idx rebuild partition p_tab4;
</pre>
<p>The following statement queries the table for the two hits in the newly added partition:</p>
<pre dir="ltr">select * from part_tab where contains(b,&#39;passiflora&#39;) &gt;0;
</pre>
<p>The following statement queries the newly added partition directly:</p>
<pre dir="ltr">select * from part_tab partition (p_tab4) where contains(b,&#39;passiflora&#39;) &gt;;
</pre>
<p id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__I1000829">Replacing Index Metadata: Changing Single-Lexer to Multilexer<a id="d5330e2148" class="indexterm-anchor"></a><a id="d5330e2152" class="indexterm-anchor"></a></p>
<p>The following example demonstrates how an application can migrate from single-language documents (English) to multilanguage documents (English and Spanish) by replacing the index metadata for the lexer.</p>
<pre dir="ltr">REM creates a simple table, which stores only English (American) text

create table simple (text varchar2(80));
insert into simple values (&#39;the quick brown fox&#39;);
commit;

REM create a simple lexer to lex this English text

begin
  ctx_ddl.create_preference(&#39;us_lexer&#39;,&#39;basic_lexer&#39;);
end;
/

REM create a text index on the simple table
create index simple_idx on simple(text)
indextype is ctxsys.context parameters (&#39;lexer us_lexer&#39;);

REM we can query easily
select * from simple where contains(text, &#39;fox&#39;)&gt;0;

REM now suppose we want to start accepting Spanish documents.
REM first we have to extend the table with a language column
alter table simple add (lang varchar2(10) default &#39;us&#39;);

REM now let&#39;s create a Spanish lexer, 
begin
  ctx_ddl.create_preference(&#39;e_lexer&#39;,&#39;basic_lexer&#39;);
  ctx_ddl.set_attribute(&#39;e_lexer&#39;,&#39;base_letter&#39;,&#39;yes&#39;);
end;
/
REM Then create a multilexer incorporating our English and Spanish lexers.
REM Note that the DEFAULT lexer is the exact same lexer, with which we have
REM have already indexed all the documents.
begin
  ctx_ddl.create_preference(&#39;m_lexer&#39;,&#39;multi_lexer&#39;);
  ctx_ddl.add_sub_lexer(&#39;m_lexer&#39;,&#39;default&#39;,&#39;us_lexer&#39;);
  ctx_ddl.add_sub_lexer(&#39;m_lexer&#39;,&#39;spanish&#39;,&#39;e_lexer&#39;);
end;
/
REM next replace our metadata
alter index simple_idx rebuild
parameters (&#39;replace metadata language column lang lexer m_lexer&#39;);

REM We are ready for some Spanish data.  Note that we could have inserted
REM this BEFORE the alter index, as long as we did not SYNC.
insert into simple values (&#39;el zorro marr&amp;oacute;n r&amp;aacute;pido&#39;, &#39;e&#39;);
commit;
exec ctx_ddl.sync_index(&#39;simple_idx&#39;);
REM now query the Spanish data with base lettering:
select * from simple where contains(text, &#39;rapido&#39;)&gt;0;
</pre>
<p>Optimizing the Index</p>
<p>To optimize your index, use CTX_DDL.<a href="cddlpkg.htm#GUID-28E079B1-D5CA-4264-B1C0-A1C5CE174C55">OPTIMIZE_INDEX</a>.</p>
<p>Synchronizing the Index</p>
<p>To synchronize your index, use CTX_DDL.<a href="cddlpkg.htm#GUID-E7C3F68F-459C-4D52-9E7D-531ED475E008">SYNC_INDEX</a>.</p>
<p>Adding a Zone Section<a id="d5330e2179" class="indexterm-anchor"></a></p>
<p>To add to the index the zone section <code class="codeph">author</code> identified by the tag &lt;<code class="codeph">author&gt;</code>, enter the following statement:</p>
<pre dir="ltr">ALTER INDEX myindex REBUILD PARAMETERS(&#39;add zone section author tag author&#39;);
</pre>
<p>Adding a Stop Section<a id="d5330e2195" class="indexterm-anchor"></a></p>
<p>To add a stop section identified by tag &lt;<code class="codeph">fluff&gt;</code> to the index that uses the <code class="codeph">AUTO_SECTION_GROUP</code>, enter the following statement:</p>
<pre dir="ltr">ALTER INDEX myindex REBUILD PARAMETERS(&#39;add stop section fluff&#39;);
</pre>
<p>Adding an Attribute Section<a id="d5330e2211" class="indexterm-anchor"></a></p>
<p>Assume that the following text appears in an XML document:</p>
<pre dir="ltr">&lt;book title=&#34;Tale of Two Cities&#34;&gt;It was the best of times.&lt;/book&gt;
</pre>
<p>Assume also that you want to create a separate section for the title attribute and you want to name the new attribute section <code class="codeph">booktitle</code>. To do so, enter the following statement:</p>
<pre dir="ltr">ALTER INDEX myindex REBUILD PARAMETERS(&#39;add attr section booktitle tag
title@book&#39;);
</pre>
<p id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__CIHJJJDH">Adding an SDATA Section<a id="d5330e2229" class="indexterm-anchor"></a></p>
<p>To add an SDATA section <code class="codeph">S1</code> of <code class="codeph">NUMBER</code> data type and identified by tag <code class="codeph">T1</code>, to the index, enter the following statement:</p>
<pre dir="ltr">ALTER INDEX myindex PARAMETERS(&#39;add sdata section S1 tag T1 datatype NUMBER);
</pre>
<p>Using Flashback Queries</p>
<p>If a Text query is flashed back to a point before an <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> statement was issued on the Text index for which the query is being run, then:</p>
<ul style="list-style-type: disc;">
<li>
<p>The query optimizer will not choose the index access path for that given index because the index is treated according to its creation time with <code class="codeph">ALTER</code> <code class="codeph">INDEX</code>. Therefore, to the query optimizer, the index is perceived not to exist.</p>
</li>
<li>
<p>The functional processing of the Text operator will fail with ORA-01466 or ORA-08176 errors if the <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> statement involves re-creation of <code class="codeph">DR$</code> index tables.</p>
</li>
</ul>
<p>To work around this issue, use the <code class="codeph">DBMS_FLASHBACK</code> package. For example:</p>
<pre dir="ltr">EXEC dbms_flashback.enable_at_system_change_number(:scn);
SELECT id from documents WHERE CONTAINS(text, &#39;oracle&#39;)&gt;0;
EXEC dbms_flashback.disable;
</pre>
<div class="infoboxnotealso" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__GUID-0B06B783-882B-4F79-8DAD-3F4466149259">
<p class="notep1">See Also:</p>
<p>&#34;<a class="olink ADFNS01009" target="_blank" href="../ADFNS/adfns_flashback.htm#ADFNS01009">Using DBMS_FLASHBACK Package</a>&#34; in <span class="italic">Oracle Database Development Guide</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section" id="GUID-47E60252-C731-46A8-B587-AE30C1634F48__BABEIJDB">
<p class="subhead2">Notes</p>
<p><a id="d5330e2299" class="indexterm-anchor"></a>Add Section Constraints</p>
<p><a id="d5330e2305" class="indexterm-anchor"></a>Before altering the index section information, Oracle Text checks the new section against the existing sections to ensure that all validity constraints are met. These constraints are the same for adding a section to a section group with the <code class="codeph">CTX_DDL</code> PL/SQL package and are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>You cannot add zone, field, or stop sections to a <code class="codeph">NULL_SECTION_GROUP</code>.</p>
</li>
<li>
<p>You cannot add zone, field, or attribute sections to an automatic section group.</p>
</li>
<li>
<p>You cannot add attribute sections to anything other than XML section groups.</p>
</li>
<li>
<p>You cannot have the same tag for two different sections.</p>
</li>
<li>
<p>Section names for zone, field, and attribute sections cannot intersect.</p>
</li>
<li>
<p>You cannot exceed 64 fields per section.</p>
</li>
<li>
<p>You cannot add stop sections to basic, HTML, XML, or news section groups.</p>
</li>
<li>
<p><code class="codeph">SENTENCE</code> and <code class="codeph">PARAGRAPH</code> are reserved section names.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p>CTX_DDL.<a href="cddlpkg.htm#GUID-E7C3F68F-459C-4D52-9E7D-531ED475E008">SYNC_INDEX</a> in <a href="cddlpkg.htm#GUID-0F7C39E8-E44A-421C-B40D-3B3578B507E9">CTX_DDL Package</a></p>
<p>CTX_DDL.<a href="cddlpkg.htm#GUID-28E079B1-D5CA-4264-B1C0-A1C5CE174C55">OPTIMIZE_INDEX</a> in <a href="cddlpkg.htm#GUID-0F7C39E8-E44A-421C-B40D-3B3578B507E9">CTX_DDL Package</a></p>
<p><a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862">CREATE INDEX</a></p>
</div>
<!-- class="section" --></div>
</div>
<a id="CCREF23696"></a><a id="CCREF23697"></a><a id="CCREF23698"></a><a id="CCREF23699"></a><a id="CCREF23700"></a><a id="CCREF23701"></a><a id="CCREF0110"></a>
<div class="props_rev_3"><a id="GUID-DFC14045-45A7-47AA-8FFC-53B222E00E9A"></a>
<h2 id="CCREF-GUID-DFC14045-45A7-47AA-8FFC-53B222E00E9A" class="sect2"><span class="enumeration_section">1.2</span> ALTER TABLE: Supported Partitioning Statements</h2>
<div>
<div class="section">
<div class="infobox-note" id="GUID-DFC14045-45A7-47AA-8FFC-53B222E00E9A__GUID-61E4435B-7B53-40E9-8616-19D1578B6926">
<p class="notep1">Note:</p>
<p>This section describes the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement as it pertains to adding and modifying a partitioned text table with a context domain index.</p>
<p>For a complete description of the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement, see <a class="olink SQLRF01001" target="_blank" href="../SQLRF/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span>.</a></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Purpose</p>
<p>Use the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement to add, modify, split, merge, exchange, or drop a partitioned text table with a context domain index. The following sections describe some of the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> operations.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Modify Partition Syntax</p>
<p>Unusable Local Indexes</p>
<pre dir="ltr">ALTER TABLE  [schema.]table MODIFY PARTITION partition UNUSABLE LOCAL INDEXES
</pre>
<p>Marks the index partition corresponding to the given table partition <code class="codeph">UNUSABLE</code>. You might mark an index partition unusable before you rebuild the index partition as described in <span class="q">&#34;<a href="csql.htm#GUID-DFC14045-45A7-47AA-8FFC-53B222E00E9A__i1000191">Rebuild Unusable Local Indexes</a>&#34;</span>.</p>
<p>If the index partition is not marked unusable, then the statement returns without actually rebuilding the local index partition.</p>
<p id="GUID-DFC14045-45A7-47AA-8FFC-53B222E00E9A__i1000191">Rebuild Unusable Local Indexes</p>
<pre dir="ltr">ALTER TABLE  [schema.]table MODIFY PARTITION partition REBUILD UNUSABLE LOCAL
INDEXES
</pre>
<p>Rebuilds the index partition corresponding to the specified table partition that has an <code class="codeph">UNUSABLE</code> status.</p>
<div class="infobox-note" id="GUID-DFC14045-45A7-47AA-8FFC-53B222E00E9A__GUID-B03ED099-54AD-4AA8-9761-BBFCAFCFEE1A">
<p class="notep1">Note:</p>
<p>If the index partition status is already <code class="codeph">VALID</code> before you enter this statement, then this statement does <span class="italic">not</span> rebuild the index partition. Do not depend on this statement to rebuild the index partition unless the index partition status is <code class="codeph">UNUSABLE</code>.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Add Partition Syntax</p>
<pre dir="ltr">ALTER TABLE [schema.]table ADD PARTITION [partition] 
VALUES LESS THAN (value_list) [partition_description]
</pre>
<p>Adds a new partition to the high end of a range-partitioned table.</p>
<p>To add a partition to the beginning or to the middle of the table, use the <code class="codeph">ALTER TABLE SPLIT PARTITION</code> statement.</p>
<p>The newly added table partition is always empty, and the context domain index (if any) status for this partition is always <code class="codeph">VALID</code>. After issuing DML, if you want to synchronize or optimize this newly added index partition, then you must look up the index partition name and enter the <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">REBUILD</code> <code class="codeph">PARTITION</code> statement. For this newly added partition, the index partition name is usually the same as the table partition name, but if the table partition name is already used by another index partition, the system assigns a name in the form of <code class="codeph">SYS_Pn</code>.</p>
<p>By querying the <code class="codeph">USER_IND_PARTITIONS</code> view and comparing the <code class="codeph">HIGH_VALUE</code> field, you can determine the index partition name for the newly added partition.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Merge Partition Syntax</p>
<pre dir="ltr">ALTER TABLE [schema.]table 
MERGE PARTITIONS partition1, partition2 
[INTO PARTITION [new_partition] [partition_description]]
[UPDATE GLOBAL INDEXES]
</pre>
<p>Applies only to a range partition. This statement merges the contents of two adjacent partitions into a new partition and then drops the original two partitions. If the resulting partition is non-empty, then the corresponding local domain index partition is marked <code class="codeph">UNUSABLE</code>. You can use <code class="codeph">ALTER TABLE MODIFY PARTITION</code> to rebuild the partition index.</p>
<p><a id="d5330e2573" class="indexterm-anchor"></a><a id="d5330e2575" class="indexterm-anchor"></a>For a global, nonpartitioned index, if you perform the merge operation without an <code class="codeph">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code class="codeph">NULL</code>) will be invalid and must be rebuilt. If you specify the <code class="codeph">UPDATE GLOBAL INDEXES</code> clause after the operation and the <code class="codeph">SYNC</code> type is <code class="codeph">MANUAL</code>, then the index will be valid, but you still must synchronize the index with CTX_DDL.<a href="cddlpkg.htm#GUID-E7C3F68F-459C-4D52-9E7D-531ED475E008">SYNC_INDEX</a> for the update to take place.</p>
<p>The naming convention for the resulting index partition is the same as in the <code class="codeph">ALTER TABLE ADD PARTITION</code> statement.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Split Partition Syntax</p>
<pre dir="ltr">ALTER TABLE [schema.]table
SPLIT PARTITION partition_name_old 
AT (value_list)
[into (partition_description, partition_description)]
[parallel_clause]
[UPDATE GLOBAL INDEXES]
</pre>
<p>Applies only to range partitions. This statement divides a table partition into two partitions, thus adding a new partition to the table. The local corresponding index partitions will be marked <code class="codeph">UNUSABLE</code> if the corresponding table partitions are non-empty. Use the <code class="codeph">ALTER TABLE MODIFY PARTITION</code> statement to rebuild the partition indexes.</p>
<p><a id="d5330e2619" class="indexterm-anchor"></a><a id="d5330e2621" class="indexterm-anchor"></a>For a global, nonpartitioned index, if you perform the split operation without an <code class="codeph">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code class="codeph">NULL</code>) will be invalid and must be rebuilt. If you specify the <code class="codeph">UPDATE GLOBAL INDEXES</code> clause after the operation and the <code class="codeph">SYNC</code> type is <code class="codeph">MANUAL</code>, then the index will be valid, but you still must synchronize the index with CTX_DDL.<a href="cddlpkg.htm#GUID-E7C3F68F-459C-4D52-9E7D-531ED475E008">SYNC_INDEX</a> for the update to take place.</p>
<p>The naming convention for the two resulting index partition is the same as in the <code class="codeph">ALTER TABLE ADD PARTITION</code> statement.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Exchange Partition Syntax</p>
<pre dir="ltr">ALTER TABLE [schema.]table EXCHANGE PARTITION partition WITH TABLE table
[INCLUDING|EXCLUDING INDEXES}
[WITH|WITHOUT VALIDATION]
[EXCEPTIONS INTO [schema.]table]
[UPDATE GLOBAL INDEXES]
</pre>
<p>Converts a partition to a nonpartitioned table, and converts a table to a partition of a partitioned table by exchanging their data segments. Rowids are preserved.</p>
<p>If <code class="codeph">EXCLUDING INDEXES</code> is specified, all the context indexes corresponding to the partition and all the indexes on the exchanged table are marked as <code class="codeph">UNUSABLE</code>. To rebuild the new index partition in this case, issue an <code class="codeph">ALTER TABLE MODIFY PARTITION</code> statement.</p>
<p>If <code class="codeph">INCLUDING INDEXES</code> is specified, then for every local domain index on the partitioned table, there must be a nonpartitioned domain index on the nonpartitioned table. The local index partitions are exchanged with the corresponding regular indexes.</p>
<p><a id="d5330e2675" class="indexterm-anchor"></a><a id="d5330e2677" class="indexterm-anchor"></a>For a global, nonpartitioned index, if you perform the exchange operation without an <code class="codeph">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code class="codeph">NULL</code>) will be invalid and must be rebuilt. If you specify the <code class="codeph">UPDATE GLOBAL INDEXES</code> clause after the operation and the <code class="codeph">SYNC</code> type is <code class="codeph">MANUAL</code>, then the index will be valid, but you still must synchronize the index with CTX_DDL.<a href="cddlpkg.htm#GUID-E7C3F68F-459C-4D52-9E7D-531ED475E008">SYNC_INDEX</a> for the update to take place.</p>
<p>Field Sections</p>
<p>Field section queries might not work the same way if the nonpartitioned index and local index use different section IDs for the same field section.</p>
<p>Storage</p>
<p>Storage is not changed. So if the index on the nonpartitioned table <code class="codeph">$I</code> table was in tablespace XYZ, then after the exchange partition, it will still be in tablespace XYZ, but now it is the <code class="codeph">$I</code> table for an index partition.</p>
<p>Storage preferences are not switched, so if you switch and then rebuild the index, then the table may be created in a different location.</p>
<p>Restrictions</p>
<p>Both indexes must be equivalent. They must use the same objects and the same settings for each object. Note that Oracle Text checks only that the indexes are using the same object. But they should use the same exact everything.</p>
<p>No index object can be partitioned, that is, when the user has used the storage object to partition the $I, $N tables.</p>
<p>If either index or index partition does not meet all these restrictions an error is raised and both the index and index partition will be <code class="codeph">INVALID</code>. You must manually rebuild both index and index partition using the <code class="codeph">ALTER INDEX REBUILD</code> statement.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Truncate Partition Syntax</p>
<pre dir="ltr">ALTER TABLE [schema.]table TRUNCATE PARTITION [DROP|REUSE STORAGE] [UPDATE GLOBAL
INDEXES]
</pre>
<p>Removes all rows from a partition in a table. Corresponding <code class="codeph">CONTEXT</code> index partitions are also removed.</p>
<p><a id="d5330e2744" class="indexterm-anchor"></a><a id="d5330e2746" class="indexterm-anchor"></a>For a global, nonpartitioned index, if you perform the truncate operation without an <code class="codeph">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code class="codeph">NULL</code>) will be invalid and must be rebuilt. If you specify the <code class="codeph">UPDATE GLOBAL INDEXES</code> clause after the operation, the index will be valid.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">ALTER TABLE Examples</p>
<p>Global Index on Partitioned Table Examples</p>
<p>The following example creates a range-partitioned table with three partitions. Each partition is populated with two rows. A global, nonpartitioned <code class="codeph">CONTEXT</code> index is then created. To demonstrate the <code class="codeph">UPDATE GLOBAL INDEXES</code> clause, the partitions are split and merged with an index synchronization.</p>
<pre dir="ltr">create table tdrexglb_part(a int, b varchar2(40)) partition by range(a)
(partition p1 values less than (10),
 partition p2 values less than (20),
 partition p3 values less than (30));

insert into tdrexglb_part values (1,&#39;row1&#39;);
insert into tdrexglb_part values (8,&#39;row2&#39;);
insert into tdrexglb_part values (11,&#39;row11&#39;);
insert into tdrexglb_part values (18,&#39;row18&#39;);
insert into tdrexglb_part values (21,&#39;row21&#39;);
insert into tdrexglb_part values (28,&#39;row28&#39;);

commit;
create index tdrexglb_parti on tdrexglb_part(b) indextype is ctxsys.context;

create table tdrexglb(a int, b varchar2(40));

insert into tdrexglb values(20,&#39;newrow20&#39;);
commit;


PROMPT make sure query works
select * from tdrexglb_part where contains(b,&#39;row18&#39;) &gt;0;

PROMPT split partition
alter table tdrexglb_part split partition p2 at (15) into
(partition p21, partition p22) update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,&#39;row11&#39;) &gt;0;
select * from tdrexglb_part where contains(b,&#39;row18&#39;) &gt;0;

exec ctx_ddl.sync_index(&#39;tdrexglb_parti&#39;)

PROMPT after sync
select * from tdrexglb_part where contains(b,&#39;row11&#39;) &gt;0;
select * from tdrexglb_part where contains(b,&#39;row18&#39;) &gt;0;

PROMPT merge partition
alter table tdrexglb_part merge partitions p22, p3 
into partition pnew3 update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,&#39;row18&#39;) &gt;0;
select * from tdrexglb_part where contains(b,&#39;row28&#39;) &gt;0;
exec ctx_ddl.sync_index(&#39;tdrexglb_parti&#39;);

PROMPT after sync
select * from tdrexglb_part where contains(b,&#39;row18&#39;) &gt;0;
select * from tdrexglb_part where contains(b,&#39;row28&#39;) &gt;0;

PROMPT drop partition 
alter table tdrexglb_part drop partition p1 update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,&#39;row1&#39;) &gt;0;
exec ctx_ddl.sync_index(&#39;tdrexglb_parti&#39;);

PROMPT after sync
select * from tdrexglb_part where contains(b,&#39;row1&#39;) &gt;0;

PROMPT exchange partition
alter table tdrexglb_part exchange partition pnew3 with table
tdrexglb update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,&#39;newrow20&#39;) &gt;0;
select * from tdrexglb_part where contains(b,&#39;row28&#39;) &gt;0;

exec ctx_ddl.sync_index(&#39;tdrexglb_parti&#39;);
PROMPT after sync
select * from tdrexglb_part where contains(b,&#39;newrow20&#39;) &gt;0;
select * from tdrexglb_part where contains(b,&#39;row28&#39;) &gt;0;

PROMPT move table partition
alter table tdrexglb_part move partition p21 update global indexes;
PROMPT before sync
select * from tdrexglb_part where contains(b,&#39;row11&#39;) &gt;0;

exec ctx_ddl.sync_index(&#39;tdrexglb_parti&#39;);
PROMPT after sync
select * from tdrexglb_part where contains(b,&#39;row11&#39;) &gt;0;

PROMPT truncate table partition
alter table tdrexglb_part truncate partition p21 update global indexes;

update global indexes;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="CCREF23702"></a><a id="CCREF23703"></a><a id="CCREF23704"></a><a id="CCREF23705"></a><a id="CCREF0103"></a>
<div class="props_rev_3"><a id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54"></a>
<h2 id="CCREF-GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54" class="sect2"><span class="enumeration_section">1.3</span> CATSEARCH</h2>
<div>
<div class="section">
<p>Use the <code class="codeph">CATSEARCH</code> operator to search <a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I999894">CTXCAT</a> indexes. Use this operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement.</p>
<p>The <code class="codeph">CATSEARCH</code> operator also supports database links. You can identify a remote table or materialized view by appending <code class="codeph">@dblink</code> to the end of its name. The <code class="codeph">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Indexing of remote views is not supported.)</p>
<p>The grammar of this operator is called <code class="codeph">CTXCAT</code>. You can also use the <code class="codeph">CONTEXT</code> grammar if your search criteria require special functionality, such as thesaurus, fuzzy matching, proximity searching, or stemming. To utilize the <code class="codeph">CONTEXT</code> grammar, use the <span class="q">&#34;<a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I997325">Query Template Specification</a>&#34;</span> in the <a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__CHDDHAEF">&#34;text_query&#34;</a> parameter as described in this section.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">About Performance</p>
<p>Use the <code class="codeph">CATSEARCH</code> operator with a <a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I999894">CTXCAT</a> index mainly to improve mixed-query performance. Specify your text query condition with <code class="codeph">text_query</code> and your structured condition with the <code class="codeph">structured_query</code> argument.</p>
<p>Internally, Oracle Text uses a combined B-tree index on text and structured columns to quickly produce results satisfying the query.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Limitations</p>
<p>If the optimizer chooses to use the functional query invocation, then your query will fail. The optimizer might choose functional invocation when your structured clause is highly selective.</p>
<p>The <code class="codeph">structured_query</code> argument of the <code class="codeph">CATSEARCH</code> operator must reference columns used during <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> sets; otherwise, error DRG-10845 will be raised. For example, the error will be raised if you issue a <code class="codeph">CATSEARCH</code> query on a view created on top of a table with the <code class="codeph">CTXCAT</code> index on it, and the name of the logical column on the view is different from the actual column name on the physical table. The columns referenced by the <code class="codeph">structured_query</code> argument of the <code class="codeph">CATSEARCH</code> operator must be the physical column name used during <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> sets, not the logical column on the view.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">CATSEARCH(
</pre>
<pre dir="ltr">[<span class="italic">schema</span>.]<span class="italic">column</span>,
text_query       [VARCHAR2|CLOB],
structured_query VARCHAR2,
</pre>
<pre dir="ltr">RETURN NUMBER;
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3705"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__GUID-DA7A29FA-EE51-4DC0-BBB5-88B0FDB73C74"><!-- --></a>[schema.]column</dt>
<dd>
<p>Specifies the text column to be searched on. This column must have a <code class="codeph">CTXCAT</code> index associated with it.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3706"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__CHDDHAEF"><!-- --></a>text_query</dt>
<dd>
<p>Specify one of the following to define your search in <code class="codeph">column</code>:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p><a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I997256">CATSEARCH Query Operations</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I997325">Query Template Specification</a> (for using <code class="codeph">CONTEXT</code> grammar)</p>
</li>
</ul>
<p id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I997256">CATSEARCH Query Operations</p>
<p>The <code class="codeph">CATSEARCH</code> operator supports only the following query operations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Logical <code class="codeph">AND</code></p>
</li>
<li>
<p>Logical <code class="codeph">OR</code> (|)</p>
</li>
<li>
<p>Logical <code class="codeph">NOT</code> (-)</p>
</li>
<li>
<p>&#34; &#34; (quoted phrases)</p>
</li>
<li>
<p>Wildcarding</p>
</li>
</ul>
<p><a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__CHDJBGHE" title="This table describes the various CATSEARCH query operators.">Table 1-2</a> provides the syntax for these operators.</p>
<div class="tblformal" id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__CHDJBGHE">
<p class="titleintable">Table 1-2 CATSEARCH Query Operators</p>
<table class="cellalignment3028" title="CATSEARCH Query Operators" summary="This table describes the various CATSEARCH query operators.">
<thead>
<tr class="cellalignment3022">
<th class="cellalignment3036" id="d5330e3032">Operation</th>
<th class="cellalignment3121" id="d5330e3035">Syntax</th>
<th class="cellalignment3183" id="d5330e3038">Description of Operation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3022">
<td class="cellalignment3038" id="d5330e3043" headers="d5330e3032">
<p>Logical <code class="codeph">AND</code></p>
</td>
<td class="cellalignment3123" headers="d5330e3043 d5330e3035">
<p>a b c</p>
</td>
<td class="cellalignment3184" headers="d5330e3043 d5330e3038">
<p>Returns rows that contain a, b, and c.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3038" id="d5330e3055" headers="d5330e3032">
<p>Logical <code class="codeph">OR</code></p>
</td>
<td class="cellalignment3123" headers="d5330e3055 d5330e3035">
<p>a | b | c</p>
</td>
<td class="cellalignment3184" headers="d5330e3055 d5330e3038">
<p>Returns rows that contain a, b, or c.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3038" id="d5330e3067" headers="d5330e3032">
<p>Logical <code class="codeph">NOT</code></p>
</td>
<td class="cellalignment3123" headers="d5330e3067 d5330e3035">
<p>a - b</p>
</td>
<td class="cellalignment3184" headers="d5330e3067 d5330e3038">
<p>Returns rows that contain a and not b.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3038" id="d5330e3079" headers="d5330e3032">
<p>Hyphen with no space</p>
</td>
<td class="cellalignment3123" headers="d5330e3079 d5330e3035">
<p>a-b</p>
</td>
<td class="cellalignment3184" headers="d5330e3079 d5330e3038">
<p>Hyphen treated as a regular character.</p>
<p>For example, if the hyphen is defined as skipjoin, words such as <span class="italic">web-site</span> are treated as the single query term <span class="italic">website</span>.</p>
<p>Likewise, if the hyphen is defined as a printjoin, words such as <span class="italic">web-site</span> are treated as <span class="italic">web-site</span> in the <code class="codeph">CTXCAT</code> query language.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3038" id="d5330e3108" headers="d5330e3032">
<p>&#34; &#34;</p>
</td>
<td class="cellalignment3123" headers="d5330e3108 d5330e3035">
<p>&#34;a b c&#34;</p>
</td>
<td class="cellalignment3184" headers="d5330e3108 d5330e3038">
<p>Returns rows that contain the phrase &#34;a b c&#34;.</p>
<p>For example, entering &#34;Sony CD Player&#34; means return all rows that contain this sequence of words.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3038" id="d5330e3120" headers="d5330e3032">
<p>( )</p>
</td>
<td class="cellalignment3123" headers="d5330e3120 d5330e3035">
<p>(A B) | C</p>
</td>
<td class="cellalignment3184" headers="d5330e3120 d5330e3038">
<p>Parentheses group operations. This query is equivalent to the <code class="codeph">CONTAINS</code> query (A &amp;B) | C.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3038" id="d5330e3133" headers="d5330e3032">
<p>Wildcard</p>
<p>(right and double truncated)</p>
</td>
<td class="cellalignment3123" headers="d5330e3133 d5330e3035">
<p>term*</p>
<p>a*b</p>
</td>
<td class="cellalignment3184" headers="d5330e3133 d5330e3038">
<p>The wildcard character matches zero or more characters.</p>
<p>For example, <span class="italic">do*</span> matches <span class="italic">dog</span>, and <span class="italic">gl*s</span> matches <span class="italic">glass</span>.</p>
<p>Left truncation not supported.</p>
<p>Note: Oracle recommends that you create a prefix index if your application uses wildcard searching. Set prefix indexing with the <a href="cdatadic.htm#GUID-CD2DE39F-17F7-424E-8DB3-A16C7843965D">BASIC_WORDLIST</a> preference.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following limitations apply to these operators:</p>
<ul style="list-style-type: disc;">
<li>
<p>The left-hand side (the column name) must be a column named in at least one of the indexes of the index set.</p>
</li>
<li>
<p>The left-hand side must be a plain column name. Functions and expressions are not allowed.</p>
</li>
<li>
<p>The right-hand side must be composed of literal values. Functions, expressions, other columns, and subselects are not allowed.</p>
</li>
<li>
<p>Multiple criteria can be combined with <code class="codeph">AND</code>. Note that <code class="codeph">OR</code> is not supported.</p>
</li>
<li>
<p>When querying a remote table through a database link, the database link must be specified for <code class="codeph">CATSEARCH</code> as well as for the table being queried.</p>
</li>
</ul>
<p>For example, these expressions are supported:</p>
<pre dir="ltr">catsearch(text, &#39;dog&#39;, &#39;foo &gt; 15&#39;)
catsearch(text, &#39;dog&#39;, &#39;bar = &#39;&#39;SMITH&#39;&#39;&#39;)
catsearch(text, &#39;dog&#39;, &#39;foo between 1 and 15&#39;)
catsearch(text, &#39;dog&#39;, &#39;foo = 1 and abc = 123&#39;)
catsearch@remote(text, &#39;dog&#39;, &#39;foo = 1 and abc = 123&#39;)
</pre>
<p>These expressions are not supported:</p>
<pre dir="ltr">catsearch(text, &#39;dog&#39;, &#39;upper(bar) = &#39;&#39;A&#39;&#39;&#39;)
catsearch(text, &#39;dog&#39;, &#39;bar LIKE &#39;&#39;A%&#39;&#39;&#39;)
catsearch(text, &#39;dog&#39;, &#39;foo = abc&#39;)
catsearch(text, &#39;dog&#39;, &#39;foo = 1 or abc = 3&#39;)
</pre>
<p id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I997325">Query Template Specification<a id="d5330e3206" class="indexterm-anchor"></a><a id="d5330e3208" class="indexterm-anchor"></a></p>
<p>Specifies a marked-up string that specifies a query template. Specify one of the following templates:</p>
<ul style="list-style-type: disc;">
<li>
<p>Query rewrite, used to expand a query string into different versions</p>
</li>
<li>
<p>Progressive relaxation, used to progressively enter less restrictive versions of a query to increase recall</p>
</li>
<li>
<p>Alternate grammar, used to specify <code class="codeph">CONTAINS</code> operators (See <span class="q">&#34;<a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I1000002">CONTEXT Query Grammar Examples</a>&#34;</span>)</p>
</li>
<li>
<p>Alternate language, used to specify alternate query language</p>
</li>
<li>
<p>Alternate scoring, used to specify alternate scoring algorithms</p>
<div class="infoboxnotealso" id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__GUID-5318826C-460B-490D-9A10-02DFF216C577">
<p class="notep1">See Also:</p>
<p>The <a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__BJECJFFJ">&#34;text_query&#34;</a> parameter description for <code class="codeph">CONTAINS</code> for more information about the syntax for these query templates</p>
</div>
</li>
</ul>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3707"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__GUID-419D7768-C225-4C70-ADD4-17A8F6348212"><!-- --></a>structured_query</dt>
<dd>
<p>Specifies the structured conditions and the <code class="codeph">ORDER</code> <code class="codeph">BY</code> clause. There must exist an index for any column you specify. For example, if you specify <code class="codeph">&#39;category_id=1 order by bid_close&#39;</code>, you must have an index for <code class="codeph">&#39;category_id, bid_close&#39;</code> as specified with the <code class="codeph">CTX_DDL</code>.<code class="codeph">ADD_INDEX</code> package.</p>
<p>With <code class="codeph">structured_query</code>, you can use standard SQL syntax only with the following operators:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p>=</p>
</li>
<li>
<p>&lt;=</p>
</li>
<li>
<p>&gt;=</p>
</li>
<li>
<p>&gt;</p>
</li>
<li>
<p>&lt;</p>
</li>
<li>
<p><code class="codeph">IN</code></p>
</li>
<li>
<p><code class="codeph">BETWEEN</code></p>
</li>
<li>
<p><code class="codeph">AND</code> (to combine two or more clauses)</p>
<div class="infobox-note" id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__GUID-CB7CA638-4F74-475E-9281-585032BAC80D">
<p class="notep1">Note:</p>
<p>You cannot use parentheses () in the <code class="codeph">structured_query</code> parameter.</p>
</div>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<ol>
<li>
<p>Create the table.</p>
<p>The following statement creates the table to be indexed:</p>
<pre dir="ltr">CREATE TABLE auction (category_id number primary key, title varchar2(20), 
bid_close date);
</pre>
<p>The following statements insert the values into the table:</p>
<pre dir="ltr">INSERT INTO auction values(1, &#39;Sony DVD Player&#39;, &#39;20-FEB-2012&#39;);
INSERT INTO auction values(2, &#39;Sony DVD Player&#39;, &#39;24-FEB-2012&#39;);
INSERT INTO auction values(3, &#39;Pioneer DVD Player&#39;, &#39;25-FEB-2012&#39;);
INSERT INTO auction values(4, &#39;Sony DVD Player&#39;, &#39;25-FEB-2012&#39;);
INSERT INTO auction values(5, &#39;Bose Speaker&#39;, &#39;22-FEB-2012&#39;);
INSERT INTO auction values(6, &#39;Tascam CD Burner&#39;, &#39;25-FEB-2012&#39;);
INSERT INTO auction values(7, &#39;Nikon digital camera&#39;, &#39;22-FEB-2012&#39;);
INSERT INTO auction values(8, &#39;Canon digital camera&#39;, &#39;26-FEB-2012&#39;);
</pre></li>
<li>
<p>Create the <code class="codeph">CTXCAT</code> index.</p>
<p>The following statements create the <code class="codeph">CTXCAT</code> index:</p>
<pre dir="ltr">begin
</pre>
<pre dir="ltr">ctx_ddl.create_index_set(&#39;auction_iset&#39;);
ctx_ddl.add_index(&#39;auction_iset&#39;,&#39;bid_close&#39;); 
</pre>
<pre dir="ltr">end;
/
CREATE INDEX auction_titlex ON auction(title) INDEXTYPE IS CTXSYS.CTXCAT
PARAMETERS (&#39;index set auction_iset&#39;);
</pre></li>
<li>
<p>Query the table.</p>
<p>A typical query with <code class="codeph">CATSEARCH</code> might include a structured clause as follows to find all rows that contain the word <span class="italic">camera</span> ordered by <code class="codeph">bid_close</code>:</p>
<pre dir="ltr">SELECT * FROM auction WHERE CATSEARCH(title, &#39;camera&#39;, &#39;order by bid_close desc&#39;)&gt;
0;

CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          8 Canon digital camera 26-FEB-12
          7 Nikon digital camera 22-FEB-12
</pre>
<p>The following query finds all rows that contain the phrase <span class="italic">Sony DVD Player</span> and that have a bid close date of February 20, 2012:</p>
<pre dir="ltr">SELECT * FROM auction WHERE CATSEARCH(title, &#39;&#34;Sony DVD Player&#34;&#39;,
&#39;bid_close=&#39;&#39;20-FEB-00&#39;&#39;&#39;)&gt; 0;
 
CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          1 Sony DVD Player       20-FEB-12
</pre>
<p>The following query finds all rows with the terms <span class="italic">Sony</span> and <span class="italic">DVD</span> and <span class="italic">Player</span>:</p>
<pre dir="ltr">SELECT * FROM auction WHERE CATSEARCH(title, &#39;Sony DVD Player&#39;, 
&#39;order by bid_close
desc&#39;)&gt; 0;
CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          4 Sony DVD Player       25-FEB-12
          2 Sony DVD Player       24-FEB-12
          1 Sony DVD Player       20-FEB-12
</pre>
<p>The following query finds all rows with the term <span class="italic">DVD</span> and not <span class="italic">Player</span>:</p>
<pre dir="ltr">SELECT * FROM auction WHERE CATSEARCH(title, &#39;DVD - Player&#39;, &#39;order by bid_close
desc&#39;)&gt; 0;
 
CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          6 Tascam CD Burner     25-FEB-12
</pre>
<p>The following query finds all rows with the terms <span class="italic">CD</span> or <span class="italic">DVD</span> or <span class="italic">Speaker</span>:</p>
<pre dir="ltr">SELECT * FROM auction WHERE CATSEARCH(title, &#39;CD | DVD | Speaker&#39;, &#39;order by
bid_close desc&#39;)&gt; 0;
 
CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          3 Pioneer DVD Player   25-FEB-12
          4 Sony DVD Player      25-FEB-12
          6 Tascam CD Burner     25-FEB-12
          2 Sony DVD Player      24-FEB-12
          5 Bose Speaker         22-FEB-12
          1 Sony DVD Player      20-FEB-12
</pre>
<p>The following query finds all rows that are about <span class="italic">audio equipment</span>:</p>
<pre dir="ltr">SELECT * FROM auction WHERE CATSEARCH(title, &#39;ABOUT(audio equipment)&#39;, 
NULL)&gt; 0;
</pre></li>
</ol>
<p id="GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I1000002">CONTEXT Query Grammar Examples</p>
<p>The following examples show how to specify the <code class="codeph">CONTEXT</code> grammar in <code class="codeph">CATSEARCH</code> queries using the template feature:</p>
<pre dir="ltr">PROMPT
PROMPT fuzzy: query = ?test
PROMPT should match all fuzzy variations of test (for example, text)
select pk||&#39; ==&gt; &#39;||text from test 
where catsearch(text,
&#39;&lt;query&gt; 
  &lt;textquery grammar=&#34;context&#34;&gt;
     ?test
  &lt;/textquery&gt;
&lt;/query&gt;&#39;,&#39;&#39;)&gt;0
order by pk; 

PROMPT
PROMPT fuzzy: query = !sail
PROMPT should match all soundex variations of bot (for example, sell)
select pk||&#39; ==&gt; &#39;||text from test 
where catsearch(text,
&#39;&lt;query&gt; 
  &lt;textquery grammar=&#34;context&#34;&gt;
     !sail
  &lt;/textquery&gt;
&lt;/query&gt;&#39;,&#39;&#39;)&gt;0
order by pk; 

PROMPT
PROMPT theme (ABOUT) query
PROMPT query: about(California)
select pk||&#39; ==&gt; &#39;||text from test 
where catsearch(text,
&#39;&lt;query&gt; 
  &lt;textquery grammar=&#34;context&#34;&gt;
     about(California)
  &lt;/textquery&gt;
&lt;/query&gt;&#39;,&#39;&#39;)&gt;0
order by pk; 
</pre>
<p>The following example shows a field section search against a <code class="codeph">CTXCAT</code> index using <code class="codeph">CONTEXT</code> grammar by means of a query template in a <code class="codeph">CATSEARCH</code> query:</p>
<pre dir="ltr">-- Create and populate table
create table BOOKS (ID number, INFO varchar2(200), PUBDATE DATE);
 
insert into BOOKS values(1, &#39;&lt;author&gt;NOAM CHOMSKY&lt;/author&gt;&lt;subject&gt;CIVIL
   RIGHTS&lt;/subject&gt;&lt;language&gt;ENGLISH&lt;/language&gt;&lt;publisher&gt;MIT
  PRESS&lt;/publisher&gt;&#39;, &#39;01-NOV-2003&#39;);
 
insert into BOOKS values(2, &#39;&lt;author&gt;NICANOR PARRA&lt;/author&gt;&lt;subject&gt;POEMS 
  AND ANTIPOEMS&lt;/subject&gt;&lt;language&gt;SPANISH&lt;/language&gt;
  &lt;publisher&gt;VASQUEZ&lt;/publisher&gt;&#39;, &#39;01-JAN-2001&#39;);
 
insert into BOOKS values(1, &#39;&lt;author&gt;LUC SANTE&lt;/author&gt;&lt;subject&gt;XML
  DATABASE&lt;/subject&gt;&lt;language&gt;FRENCH&lt;/language&gt;&lt;publisher&gt;FREE
  PRESS&lt;/publisher&gt;&#39;, &#39;15-MAY-2002&#39;);
 
commit;
 
-- Create index set and section group
exec ctx_ddl.create_index_set(&#39;BOOK_INDEX_SET&#39;);
exec ctx_ddl.add_index(&#39;BOOKSET&#39;,&#39;PUBDATE&#39;);
 
exec ctx_ddl.create_section_group(&#39;BOOK_SECTION_GROUP&#39;,
      &#39;BASIC_SECTION_GROUP&#39;);
exec ctx_ddl.add_field_section(&#39;BOOK_SECTION_GROUP&#39;,&#39;AUTHOR&#39;,&#39;AUTHOR&#39;);
exec ctx_ddl.add_field_section(&#39;BOOK_SECTION_GROUP&#39;,&#39;SUBJECT&#39;,&#39;SUBJECT&#39;);
exec ctx_ddl.add_field_section(&#39;BOOK_SECTION_GROUP&#39;,&#39;LANGUAGE&#39;,&#39;LANGUAGE&#39;);
exec ctx_ddl.add_field_section(&#39;BOOK_SECTION_GROUP&#39;,&#39;PUBLISHER&#39;,&#39;PUBLISHER&#39;); 
  
-- Create index
create index books_index on books(info) indextype is ctxsys.ctxcat
  parameters(&#39;index set book_index_set section group book_section_group&#39;);
 
-- Use the index
-- Note that: even though CTXCAT index can be created with field sections, it
-- cannot be accessed using CTXCAT grammar (default for CATSEARCH).
-- We need to use query template with CONTEXT grammar to access field 
-- sections with CATSEARCH.
 
select  id, info from books
where catsearch(info,
&#39;&lt;query&gt;
      &lt;textquery grammar=&#34;context&#34;&gt;
              NOAM within author and english within language
      &lt;/textquery&gt;
 &lt;/query&gt;&#39;,
&#39;order by pubdate&#39;)&gt;0; 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998134">Syntax for CTXCAT Index Type</a>&#34;</span></p>
<p><a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a></p>
</div>
<!-- class="section" --></div>
</div>
<a id="CCREF23706"></a><a id="CCREF23707"></a><a id="CCREF24124"></a><a id="CCREF23708"></a><a id="CCREF23709"></a><a id="CCREF24125"></a><a id="CCREF23710"></a><a id="CCREF23711"></a><a id="CCREF23712"></a><a id="CCREF23713"></a><a id="CCREF23714"></a><a id="CCREF23715"></a><a id="CCREF23716"></a><a id="CCREF23717"></a><a id="CCREF23718"></a><a id="CCREF24063"></a><a id="CCREF23719"></a><a id="CCREF23720"></a><a id="CCREF24126"></a><a id="CCREF0104"></a>
<div class="props_rev_3"><a id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59"></a>
<h2 id="CCREF-GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59" class="sect2"><span class="enumeration_section">1.4</span> CONTAINS</h2>
<div>
<div class="section">
<p>Use the <a id="d5330e3539" class="indexterm-anchor"></a><code class="codeph">CONTAINS</code> operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement to specify the query expression for a Text query.</p>
<p>The <code class="codeph">CONTAINS</code> operator also supports database links. You can identify a remote table or materialized view by appending <code class="codeph">@dblink</code> to the end of its name. The <code class="codeph">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view (querying of remote views is not supported).</p>
<p><code class="codeph">CONTAINS</code> returns a relevance score for every row selected. Obtain this score with the <a href="csql.htm#GUID-263BAC8E-EAA9-4DF2-9F46-354C34E8C3C0">SCORE</a> operator.</p>
<p>The grammar for this operator is called the <code class="codeph">CONTEXT</code> grammar. You can also use <code class="codeph">CTXCAT</code> grammar if your application works better with simpler syntax. To do so, use the <span class="q">&#34;<a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54__I997325">Query Template Specification</a>&#34;</span> in the <a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__BJECJFFJ">&#34;text_query&#34;</a> parameter as described in this section.</p>
<div class="infoboxnotealso" id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__GUID-EF27B927-C22E-4A39-955A-0C276CDF872B">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDIGBGC">Query Rewrite Template</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDJEHAG">Query Result Set Descriptor Template</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDFEHCJ">Query Relaxation Template</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDGIDCE">Alternate Grammar Template</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDFGJFE">Language Independent Template</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDIBEJB">Alternate Language Template</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDJFCEE">Alternative Scoring Template</a>&#34;</span></p>
</li>
<li>
<p>The CONTEXT Grammar&#34; topic in <a class="olink CCAPP9172" target="_blank" href="../CCAPP/GUID-7070C025-54E1-4FBB-8585-1FCBD525927D.htm#CCAPP9172"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">CONTAINS(
         [<span class="italic">schema</span>.]<span class="italic">column</span>,
         text_query    [VARCHAR2|CLOB]
         [,label       NUMBER])
RETURN NUMBER;
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3708"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__GUID-D007B8E0-6BCC-46A8-B0C1-E056C94D7C5B"><!-- --></a>[schema.]column</dt>
<dd>
<p>Specify the text column to be searched on. This column must have a Text index associated with it.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3709"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__BJECJFFJ"><!-- --></a>text_query</dt>
<dd>
<p>Specify one of the following (limited to 4000 bytes for a <code class="codeph">VARCHAR2</code> or 64000 bytes for a <code class="codeph">CLOB</code>):</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p>The query expression that defines your search in <code class="codeph">column</code>.</p>
</li>
<li>
<p>A marked-up document that specifies a query template.</p>
<p>Use one of the following query templates:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDIGBGC">Query Rewrite Template</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDJEHAG">Query Result Set Descriptor Template</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDFEHCJ">Query Relaxation Template</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDGIDCE">Alternate Grammar Template</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDFGJFE">Language Independent Template</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDIBEJB">Alternate Language Template</a></p>
</li>
<li>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDJFCEE">Alternative Scoring Template</a></p>
</li>
</ul>
</li>
</ul>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDIGBGC">Query Rewrite Template<a id="d5330e3704" class="indexterm-anchor"></a><a id="d5330e3706" class="indexterm-anchor"></a></p>
<p>Use this template to automatically write different versions of a query before you submit the query to Oracle Text. This is useful when you need to maximize the recall of a user query. For example, you can program your application to expand a single phrase query of &#39;cat dog&#39; into the following queries:</p>
<pre dir="ltr">{cat} {dog}
{cat} ; {dog}
{cat} AND {dog}
{cat} ACCUM {dog}
</pre>
<p>These queries are submitted as one query and results are returned with no duplication. In this example, the query returns documents that contain the phrase <span class="italic">cat dog</span> as well as documents in which <span class="italic">cat</span> is near <span class="italic">dog</span>, and documents that have <span class="italic">cat</span> and <span class="italic">dog</span>.</p>
<p>This is done with the following template:</p>
<pre dir="ltr"> &lt;query&gt;
   &lt;textquery lang=&#34;ENGLISH&#34; grammar=&#34;CONTEXT&#34;&gt; cat dog
     &lt;progression&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34; &#34;))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34; ; &#34;))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34;AND&#34;))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34;ACCUM&#34;))&lt;/rewrite&gt;&lt;/seq&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
  &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;
&lt;/query&gt;
</pre>
<p><a id="d5330e3734" class="indexterm-anchor"></a><a id="d5330e3736" class="indexterm-anchor"></a>The operator <code class="codeph">TRANSFORM</code> is used to specify the rewrite rules and has the following syntax (note that it uses double parentheses). The parameters are described in <a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDEAGEF" title="This table shows TRANSFORM parameters.">Table 1-3</a>.</p>
<pre dir="ltr">TRANSFORM((terms, prefix, suffix, connector))
</pre>
<div class="tblformal" id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDEAGEF">
<p class="titleintable">Table 1-3 TRANSFORM Parameters</p>
<table class="cellalignment3028" title="TRANSFORM Parameters" summary="This table shows TRANSFORM parameters.">
<thead>
<tr class="cellalignment3022">
<th class="cellalignment3086" id="d5330e3762">Parameter</th>
<th class="cellalignment3085" id="d5330e3765">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e3770" headers="d5330e3762">
<p><code class="codeph">term</code></p>
</td>
<td class="cellalignment3087" headers="d5330e3770 d5330e3765">
<p>Specifies the type of terms to be produced from the original query. Specify either <code class="codeph">TOKENS</code> or <code class="codeph">THEMES</code>.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e3784" headers="d5330e3762">
<p><code class="codeph">prefix</code></p>
</td>
<td class="cellalignment3087" headers="d5330e3784 d5330e3765">
<p>Specifies the literal string to be prepended to all terms.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e3792" headers="d5330e3762">
<p><code class="codeph">suffix</code></p>
</td>
<td class="cellalignment3087" headers="d5330e3792 d5330e3765">
<p>Specifies the literal string to be appended to all terms.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e3800" headers="d5330e3762">
<p><code class="codeph">connector</code></p>
</td>
<td class="cellalignment3087" headers="d5330e3800 d5330e3765">
<p>Specifies the literal string to connect all terms after applying the prefix and suffix.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note" id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__GUID-777FA58E-FA80-454E-BB46-370CA08DB750">
<p class="notep1">Note:</p>
<p>An error will be raised if the input Text query string specified in the Query Rewrite Template with <code class="codeph">TRANSFORM</code> rules contains any Oracle Text query operators (such as <code class="codeph">AND</code>, <code class="codeph">OR</code>, or <code class="codeph">SOUNDEX</code>). Also, any special characters (such as <code class="codeph">%</code> or <code class="codeph">$</code>) in the input Text query string must be preceded by an escape character, or an error is raised.</p>
</div>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDJEHAG">Query Result Set Descriptor Template</p>
<p>Use this template to take in a Result Set Descriptor. The element ctx_result_set_descriptor is added to the query template. This enables the CONTAINS query cursor to take in a group count query.</p>
<p>The Result Set Interface document is placed in a public variable in the ctx_query package. (ctx_query.result_set_document.)</p>
<p>The CONTAINS query cursor behavior remains unchanged and the Result Set Document is available right after closing the cursor</p>
<p>For example, the following query of <span class="italic">kukui nut</span> returns a result set with the following template.</p>
<pre dir="ltr">&lt;query&gt;
   &lt;textquery lang=&#34;ENGLISH&#34; grammar=&#34;CONTEXT&#34;&gt;
     &lt;progression&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34; &#34;))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34; ; &#34;))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34;AND&#34;))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34;ACCUM&#34;))&lt;/rewrite&gt;&lt;/seq&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
  &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;
&lt;ctx_result_set_descriptor&gt; 
 &lt;group&gt;
    &lt;group_values&gt;
       &lt;value id=&#34;2&#34;/&gt;
       &lt;value id=&#34;3&#34;/&gt;
       &lt;value id=&#34;4&#34;/&gt;
    &lt;/group_values&gt;
    &lt;count/&gt;
  &lt;/group&gt;
&lt;/ctx_result_set_descriptor&gt;
&lt;/query&gt;
</pre>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDFEHCJ">Query Relaxation Template<a id="d5330e3846" class="indexterm-anchor"></a><a id="d5330e3848" class="indexterm-anchor"></a><a id="d5330e3850" class="indexterm-anchor"></a></p>
<p>Use this template to progressively relax your query. <span class="bold">Progressive</span> <span class="bold">relaxation</span> is when you increase recall by progressively issuing less restrictive versions of a query, so that your application can return an appropriate number of hits to the user.</p>
<p>For example, the query of <span class="italic">black pen</span> can be progressively relaxed to:</p>
<pre dir="ltr">black pen
black NEAR pen
black AND pen
black ACCUM pen
</pre>
<p>This is done with the following template</p>
<pre dir="ltr">&lt;query&gt;
   &lt;textquery lang=&#34;ENGLISH&#34; grammar=&#34;CONTEXT&#34;&gt;
     &lt;progression&gt;
       &lt;seq&gt;black pen&lt;/seq&gt;
       &lt;seq&gt;black NEAR pen&lt;/seq&gt;
       &lt;seq&gt;black AND pen&lt;/seq&gt;
       &lt;seq&gt;black ACCUM pen&lt;/seq&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
   &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;
&lt;/query&gt;
</pre>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDGIDCE">Alternate Grammar Template<a id="d5330e3874" class="indexterm-anchor"></a></p>
<p>Use this template to specify an alternate grammar, such as <code class="codeph">CONTEXT</code> or <code class="codeph">CATSEARCH</code>. Specifying an alternate grammar enables you to enter queries using different syntax and operators.</p>
<p>For example, with <code class="codeph">CATSEARCH</code>, enter <code class="codeph">ABOUT</code> queries using the <code class="codeph">CONTEXT</code> grammar. Likewise with <code class="codeph">CONTAINS</code>, enter logical queries using the simplified <code class="codeph">CATSEARCH</code> syntax.</p>
<p>The phrase <span class="italic">&#39;dog cat mouse&#39;</span> is interpreted as a phrase in <code class="codeph">CONTAINS</code>. However, with <code class="codeph">CATSEARCH</code>, this is equivalent to an <code class="codeph">AND</code> query of <span class="italic">&#39;dog AND cat AND mouse&#39;</span>. Specify that <code class="codeph">CONTAINS</code> use the alternate grammar with the following template:</p>
<pre dir="ltr">&lt;query&gt; 
  &lt;textquery grammar=&#34;CTXCAT&#34;&gt;dog cat mouse&lt;/textquery&gt;
  &lt;score datatype=&#34;integer&#34;/&gt;
&lt;/query&gt;
</pre>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDFGJFE">Language Independent Template<a id="d5330e3926" class="indexterm-anchor"></a></p>
<p>Use this template to specify a lexer that uses user-defined symbols (or abbreviations) and does not depend on any language.</p>
<p>The following example specifies that the query take a list of language-independent sublexers.</p>
<pre dir="ltr">&lt;query&gt;
      &lt;textquery grammar=&#34;CONTEXT&#34; lang=&#34;ENGLISH&#34;&gt;
            Oracle 
      &lt;/textquery&gt;
      &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;
      <span class="bold">&lt;sublexers&gt;</span>
            <span class="bold">&lt;sublexer_label&gt;  SESSION_LANG   &lt;/sublexer_label&gt;</span>
            <span class="bold">&lt;sublexer_label&gt;   MAIL   &lt;/sublexer_label&gt;</span>
            <span class="bold">&lt;sublexer_label&gt; CALENDER &lt;/sublexer_label&gt;</span>
      <span class="bold">&lt;/sublexers&gt;</span>
&lt;/query&gt;
</pre>
<p>The following conditions apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">sublexers</code> element consists of one or more <code class="codeph">sublexer_label</code> elements.</p>
</li>
<li>
<p>Each <code class="codeph">sublexer_label</code> element contains the symbol for the language independent sub_lexer.</p>
</li>
<li>
<p>When the <code class="codeph">sublexers</code> element is specified, the query will be processed with the stopwords and sub_lexers for each of the symbols specified in the <code class="codeph">sublexers</code> element, and <code class="codeph">query</code> will return only the documents indexed by the specified sub_lexers.</p>
</li>
<li>
<p>A special reserved symbol called <code class="codeph">SESSION_LANG</code> can be used for the system to pick a language-dependent sub_lexer based on the language specified in <code class="codeph">lang</code> attribute of the <code class="codeph">textquery</code> element in the query template. If <code class="codeph">lang</code> attribute is not specified, then the <code class="codeph">lang</code> attribute will be based on session language. <code class="codeph">Query</code> parsed by the chosen sub_lexer will only return documents indexed by that language-dependent sub_lexer. If both <code class="codeph">SESSION_LANG</code> and <code class="codeph">lang</code> attribute are specified, the <code class="codeph">lang</code> attribute will take priority.</p>
</li>
<li>
<p>If <code class="codeph">sublexers</code> element is specified without <code class="codeph">SESSION_LANG</code>, then <code class="codeph">lang</code> attribute of <code class="codeph">textquery</code> element will be ignored.</p>
</li>
<li>
<p>Default Behavior:</p>
<p>If <code class="codeph">sublexers</code> element is not present in the query template, then <code class="codeph">query</code> will be parsed with one language-dependent sub-lexer (if any), which is chosen based on the specified <code class="codeph">lang</code> attribute value or the session language AND all language independent sub-lexers.</p>
</li>
</ul>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDIBEJB">Alternate Language Template<a id="d5330e4047" class="indexterm-anchor"></a></p>
<p>Use this template to specify an alternate language:</p>
<pre dir="ltr">&lt;query&gt;&lt;textquery lang=&#34;french&#34;&gt;bon soir&lt;/textquery&gt;&lt;/query&gt;
</pre>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDJFCEE">Alternative Scoring Template<a id="d5330e4055" class="indexterm-anchor"></a></p>
<p>Use this template to specify an alternative scoring algorithm.</p>
<p>The following example specifies that the query use the <code class="codeph">CONTEXT</code> grammar and return integer scores using the <code class="codeph">COUNT</code> algorithm. This algorithm returns a score as the number of query occurrences in the document.</p>
<pre dir="ltr">&lt;query&gt;        
     &lt;textquery grammar=&#34;CONTEXT&#34; lang=&#34;english&#34;&gt; mustang  
     &lt;/textquery&gt;     
     &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;     
&lt;/query&gt;
</pre>
<p>The following example uses the <code class="codeph">normalization_expr</code> attribute to add <code class="codeph">SDATA</code>(<span class="italic">price</span>) into the score returned by the query, and uses it as the final score:</p>
<pre dir="ltr">&lt;query&gt;
    &lt;textquery grammar=&#34;CONTEXT&#34; lang=&#34;english&#34;&gt;
        DEFINESCORE(dog, RELEVANCE) and  cat
    &lt;/textquery&gt;
    &lt;score  algorithm=&#34;COUNT&#34;  normalization_expr =&#34;doc_score+ SDATA(price)&#34;/&gt;
&lt;/query&gt;
</pre>
<p>The <a id="d5330e4085" class="indexterm-anchor"></a><code class="codeph">normalization_expr</code> attribute is used only with the alternate scoring template, and is an arithmetic expression that consists of:</p>
<ul style="list-style-type: disc;">
<li>
<p>Arithmetic operators: + - * /. The operator precedence is the same as that for SQL operator precedence.</p>
</li>
<li>
<p>Grouping operators: (). Parentheses can be used to alter the precedence of the arithmetic operators.</p>
</li>
<li>
<p>Absolute function: ABS(<span class="italic">n</span>) returns the absolute value of <span class="italic">n</span>; where <span class="italic">n</span> is any expression that returns a number.</p>
</li>
<li>
<p>Logarithmic function: LOG(<span class="italic">n</span>): returns the base-10 logarithmic value of <span class="italic">n</span>; where <span class="italic">n</span> is any expression that returns a number.</p>
</li>
<li>
<p>Predefined components: The <code class="codeph">doc_score</code> predefined component can be used to return the initial query score of a particular document.</p>
</li>
<li>
<p><code class="codeph">SDATA</code> component: <code class="codeph">SDATA</code><span class="italic">(name)</span> returns the value of the <code class="codeph">SDATA</code> with the specified name as the score.</p>
<ul style="list-style-type: disc;">
<li>
<p>Only <code class="codeph">SDATA</code> with a <code class="codeph">NUMBER</code> or <code class="codeph">DATE</code> data type is allowed. An error is raised otherwise.</p>
</li>
<li>
<p>The <span class="italic">sdata</span> string and the <code class="codeph">SDATA</code> name are case-insensitive.</p>
</li>
<li>
<p>Because an <code class="codeph">SDATA</code> section value can be <code class="codeph">NULL</code>, any expression with <code class="codeph">NULL</code> <code class="codeph">SDATA</code> section value is evaluated as 0. For example: the <code class="codeph">normalization_expr &#34;doc_score + SDATA(price)&#34;</code> will be evaluated to 0 if <code class="codeph">SDATA(price)</code> for a given document has a <code class="codeph">NULL</code> value.</p>
</li>
</ul>
</li>
<li>
<p>Numeric literals: There are any number literal that conforms to the SQL pattern of <code class="codeph">NUMBER</code> literal and is within the range of the double-precision floating-point (<code class="codeph">-3.4e38</code> to <code class="codeph">3.4e38</code>).</p>
</li>
<li>
<p>Date literals: Date literals must be enclosed with <code class="codeph">DATE</code> (). Only the following format is allowed: <code class="codeph">YYYY-MM-DD</code> or <code class="codeph">YYYY-MM-DD HH24:MI:SS</code>. For example: <code class="codeph">DATE(2005-11-08)</code>.</p>
<p>Consistent with SQL, if no time is specified, then <code class="codeph">00:00:00</code> is assumed.</p>
</li>
</ul>
<p>The <code class="codeph">normalization_expr</code> attribute overrides the algorithm attribute. That is, if algorithm is set to <code class="codeph">COUNT</code>, and the user also specifies <code class="codeph">normalization_expr</code>, then the score will not be count, but the calculated score based on the <code class="codeph">normalization_expr</code>.</p>
<p>If the score (either from <code class="codeph">algorithm = COUNT</code> or <code class="codeph">normalization_expr =</code> ...) is internally calculated to be greater than 100, then it will be set to 100.</p>
<p>If the query relaxation template is used, the score will be further normalized in such a way that documents returned from higher sequences will always have higher scores than documents returned from sequence(s) below.</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3710"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__GUID-A46666BE-46FD-4117-811C-76CED20A6121"><!-- --></a>DATE Literal Restrictions</dt>
<dd>
<p>Only the minus (<code class="codeph">-</code>) operator is allowed between date-type data (<code class="codeph">DATE</code> literals and date-type <code class="codeph">SDATA</code>). Using other operators will result in an error. Subtracting two date-type data will produce a number (float) that represents the difference in number of days between the two dates. For example, the following expression is allowed:</p>
<pre dir="ltr">SDATA(dob) &ndash;  DATE(2005-11-08)
</pre>
<p>The following expression is not allowed:</p>
<pre dir="ltr">SDATA(dob) +  DATE(2005-11-08)
</pre>
<p>The plus (<code class="codeph">+</code>) and minus (<code class="codeph">-</code>) operators are allowed between numeric data and date type of data. The number operand is interpreted as the number or fraction of days. For example, the following expression is allowed:</p>
<pre dir="ltr">DATE(2005-11-08) + 1        = 9 NOV 2005
</pre>
<p>The following expression is not allowed:</p>
<pre dir="ltr">DATE(2005-11-08)* 3          = ERROR
</pre></dd>
</dl>
<p>Template Attribute Values</p>
<p><a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDEBEHA" title="This table describes template attribute values.">Table 1-4</a> gives the possible values for template attributes.</p>
<div class="tblformal" id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__CHDEBEHA">
<p class="titleintable">Table 1-4 Template Attribute Values</p>
<table class="cellalignment3028" title="Template Attribute Values" summary="This table describes template attribute values.">
<thead>
<tr class="cellalignment3022">
<th class="cellalignment3086" id="d5330e4299">Tag Attribute</th>
<th class="cellalignment3083" id="d5330e4302">Description</th>
<th class="cellalignment3064" id="d5330e4305">Possible Values</th>
<th class="cellalignment3099" id="d5330e4308">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e4313" headers="d5330e4299">
<p>grammar=</p>
</td>
<td class="cellalignment3084" headers="d5330e4313 d5330e4302">
<p>Specifies the grammar of the query.</p>
</td>
<td class="cellalignment3066" headers="d5330e4313 d5330e4305">
<p><code class="codeph">CONTEXT</code></p>
<p><code class="codeph">CTXCAT</code></p>
</td>
<td class="cellalignment3101" headers="d5330e4313 d5330e4308">
<p>The grammar of the query.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e4330" headers="d5330e4299">
<p>datatype=</p>
</td>
<td class="cellalignment3084" headers="d5330e4330 d5330e4302">
<p>Specifies the type of number returned as score.</p>
</td>
<td class="cellalignment3066" headers="d5330e4330 d5330e4305">
<p><code class="codeph">INTEGER</code></p>
<p><code class="codeph">FLOAT</code></p>
</td>
<td class="cellalignment3101" headers="d5330e4330 d5330e4308">
<p>Returns score as integer between 0 and 100.</p>
<p>Returns score as its high-precision floating-point number between 0 and 100.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e4350" headers="d5330e4299">
<p>algorithm=</p>
</td>
<td class="cellalignment3084" headers="d5330e4350 d5330e4302">
<p>Specifies the scoring algorithm to use.</p>
</td>
<td class="cellalignment3066" headers="d5330e4350 d5330e4305">
<p><code class="codeph">DEFAULT</code></p>
<p><code class="codeph">COUNT</code></p>
</td>
<td class="cellalignment3101" headers="d5330e4350 d5330e4308">
<p>Returns the default.</p>
<p>Returns scores as the number of occurrences in the document.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3088" id="d5330e4369" headers="d5330e4299">
<p>lang=</p>
</td>
<td class="cellalignment3084" headers="d5330e4369 d5330e4302">
<p>Specifies the language name.</p>
</td>
<td class="cellalignment3066" headers="d5330e4369 d5330e4305">
<p>Any language supported by Oracle Database. See <a class="olink NLSPG" target="_blank" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</td>
<td class="cellalignment3101" headers="d5330e4369 d5330e4308">
<p>The language name.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Template Grammar Definition</p>
<p>The query template interface is an XML document. Its grammar is defined with the following XML DTD:</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">&lt;!ELEMENT query (textquery, score?, order?)&gt; 
&lt;!ELEMENT textquery (#PCDATA|progression)*&gt; 
&lt;!ELEMENT progression (seq)+&gt; 
&lt;!ELEMENT seq (#PCDATA|rewrite)*&gt; 
&lt;!ELEMENT rewrite (#PCDATA)&gt; 
&lt;!ELEMENT score EMPTY&gt; 
&lt;!ELEMENT order (orderkey+)&gt; 
&lt;!ELEMENT orderkey (#PCDATA)&gt; 
&lt;!ATTLIST textquery grammar (context | ctxcat) #IMPLIED&gt;
&lt;!ATTLIST textquery lang CDATA #IMPLIED&gt;
&lt;!ATTLIST score datatype (integer | float) &#34;integer&#34;&gt;
&lt;!ATTLIST score algorithm (default | count) &#34;default&#34;&gt;
</pre>
<p>Values are case insensitive: integer | float, default | count, context |ctxcat .</p>
<div class="infoboxnotealso" id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__GUID-07184163-E639-4390-B06A-BBCD1691D6D1">
<p class="notep1">See Also:</p>
<p><a href="cqoper.htm#GUID-6410B783-FC9A-4C99-B3AF-9E0349AA43D1">Oracle Text CONTAINS Query Operators</a> for more information about the operators in query expressions</p>
</div>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3711"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__GUID-70544F84-D8A2-42A4-9582-6987BEEE7DD9"><!-- --></a>label</dt>
<dd>
<p>Optionally, specifies the label that identifies the score generated by the <code class="codeph">CONTAINS</code> operator.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Returns</p>
<p>For each row selected, the <code class="codeph">CONTAINS</code> operator returns a number between 0 and 100 that indicates how relevant the document row is to the query. The number 0 means that Oracle Text found no matches in the row.</p>
</div>
<!-- class="section" -->
<div class="section">
<div class="infobox-note" id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__GUID-0EFB3333-DCC5-49A1-9376-831AC436870B">
<p class="notep1">Note:</p>
<p>You must use the <code class="codeph">SCORE</code> operator with a label to obtain this number.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example</p>
<p>The following example searches for all documents in the <code class="codeph">text</code> column that contain the word <span class="italic">oracle</span>. The score for each row is selected with the <code class="codeph">SCORE</code> operator using a label of <code class="codeph">1</code>:</p>
<pre dir="ltr">SELECT SCORE(1), title from newsindex 
    WHERE CONTAINS(text, &#39;oracle&#39;, 1) &gt; 0;
</pre>
<p>The <code class="codeph">CONTAINS</code> operator must be followed by an expression such as &gt; 0, which specifies that the score value calculated must be greater than zero for the row to be selected.</p>
<p>When the <code class="codeph">SCORE</code> operator is called (for example, in a <code class="codeph">SELECT</code> clause), the <code class="codeph">CONTAINS</code> clause must reference the score label value as in the following example:</p>
<pre dir="ltr">SELECT SCORE(1), title from newsindex 
     WHERE CONTAINS(text, &#39;oracle&#39;, 1) &gt; 0 ORDER BY SCORE(1) DESC;
</pre>
<p>The following example specifies that the query be parsed using the <code class="codeph">CATSEARCH</code> grammar:</p>
<pre dir="ltr">SELECT id FROM test WHERE CONTAINS (text,
 &#39;&lt;query&gt;
   &lt;textquery lang=&#34;ENGLISH&#34; grammar=&#34;CATSEARCH&#34;&gt;
      cheap pokemon
   &lt;/textquery&gt;
   &lt;score datatype=&#34;INTEGER&#34;/&gt;
  &lt;/query&gt;&#39; ) &gt; 0;
</pre>
<p>Grammar Template Example</p>
<p>The following example shows how to use the <code class="codeph">CTXCAT</code> grammar in a <code class="codeph">CONTAINS</code> query. The example creates a <code class="codeph">CTXCAT</code> and a <code class="codeph">CONTEXT</code> index on the same table, and compares the query results.</p>
<pre dir="ltr">PROMPT create context and ctxcat indexes, both using theme indexing
PROMPT
create index tdrbqcq101x on test(text) indextype is ctxsys.context
parameters (&#39;lexer theme_lexer&#39;);

create index tdrbqcq101cx on test(text) indextype is ctxsys.ctxcat
parameters (&#39;lexer theme_lexer&#39;);

PROMPT *****  San Diego             ***********
PROMPT *****  CONTEXT grammar       ***********
PROMPT ** should be interpreted as phrase query **
select pk||&#39; ==&gt; &#39;||text from test 
where contains(text,&#39;San Diego&#39;)&gt;0
order by pk;

PROMPT *****  San Diego      ***********
PROMPT *****  CTXCAT grammar ***********
PROMPT ** should be interpreted as AND query  ***
select pk||&#39; ==&gt; &#39;||text from test 
where contains(text,
&#39;&lt;query&gt; 
  &lt;textquery grammar=&#34;CTXCAT&#34;&gt;San Diego&lt;/textquery&gt;
  &lt;score datatype=&#34;integer&#34;/&gt;
&lt;/query&gt;&#39;)&gt;0
order by pk;

PROMPT *****  Hitlist from CTXCAT index ***********
select pk||&#39; ==&gt; &#39;||text from test 
where catsearch(text,&#39;San Diego&#39;,&#39;&#39;)&gt;0
order by pk;
</pre>
<p>Alternate Scoring Query Template Example</p>
<p>The following query template adds price <code class="codeph">SDATA</code> section (or <code class="codeph">SDATA</code> filter-by column) value into the score returned by the query and uses it as the final score:</p>
<pre dir="ltr">&lt;query&gt;
      &lt;textquery grammar=&#34;CONTEXT&#34; lang=&#34;english&#34;&gt;
             DEFINESCORE(dog, RELEVANCE) and cat
      &lt;/textquery&gt;
      &lt;score algorithm=&#34;COUNT&#34; normalization_expr =&#34;doc_score+SDATA(price)&#34;/&gt;
&lt;/query&gt;
</pre>
<p>Query Relaxation Template Example</p>
<p>The following query template defines a query relaxation sequence. The query of <span class="italic">black pen</span> is entered in sequence as <span class="italic">black pen</span>, then <span class="italic">black NEAR pen</span>, then <span class="italic">black AND pen</span>, and then <span class="italic">black ACCUM pen</span>. Query hits are returned in this sequence with no duplication as long as the application requires results.</p>
<pre dir="ltr">select id from docs where CONTAINS (text, &#39;
&lt;query&gt;
   &lt;textquery lang=&#34;ENGLISH&#34; grammar=&#34;CONTEXT&#34;&gt;
     &lt;progression&gt;
       &lt;seq&gt;black pen&lt;/seq&gt;
       &lt;seq&gt;black NEAR pen&lt;/seq&gt;
       &lt;seq&gt;black AND pen&lt;/seq&gt;
       &lt;seq&gt;black ACCUM pen&lt;/seq&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
   &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;
&lt;/query&gt;&#39;)&gt;0;
</pre>
<p>Query relaxation is most effective when your application requires the top <span class="italic">n</span> hits to a query, which you can obtain with the <code class="codeph">DOMAIN_INDEX_SORT</code> or <code class="codeph">FIRST_ROWS</code> hint, which is being deprecated, in a PL/SQL cursor.</p>
<p>Query Rewrite Template Example</p>
<p>The following template defines a query rewrite sequence. The query of <span class="italic">kukui nut</span> is rewritten as follows:</p>
<p>{kukui} {nut}</p>
<p>{kukui} ; {nut}</p>
<p>{kukui} AND {nut}</p>
<p>{kukui} ACCUM {nut}</p>
<pre dir="ltr">select id from docs where CONTAINS (text, &#39;
 &lt;query&gt;
   &lt;textquery lang=&#34;ENGLISH&#34; grammar=&#34;CONTEXT&#34;&gt; kukui nut
     &lt;progression&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34; &#34;))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34; ; &#34;))&lt;/rewrite&gt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34;AND&#34;))&lt;/rewrite&gt;&lt;seq/&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, &#34;{&#34;, &#34;}&#34;, &#34;ACCUM&#34;))&lt;/rewrite&gt;&lt;seq/&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
  &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;
&lt;/query&gt;&#39;)&gt;0;
</pre>
<p>Order By SDATA Sections Template Example</p>
<p>The following query template defines a query sequence for ordering by <code class="codeph">SDATA</code> section values using the <code class="codeph">&lt;order&gt;</code> and <code class="codeph">&lt;orderkey&gt;</code> elements. The first level of ordering is done on the <code class="codeph">SDATA</code> section <code class="codeph">price</code>, which is sorted in the ascending order. The second and third level of ordering is done by the <code class="codeph">SDATA</code> section <code class="codeph">pub_date</code> and score, both of which are sorted in the descending order.</p>
<pre dir="ltr">select id from docs where CONTAINS (text, &#39;
&lt;query&gt;
   &lt;textquery lang=&#34;ENGLISH&#34; grammar=&#34;CONTEXT&#34;&gt; Oracle &lt;/textquery&gt;
   &lt;score datatype=&#34;INTEGER&#34; algorithm=&#34;COUNT&#34;/&gt;
   &lt;order&gt;
       &lt;orderkey&gt; SDATA(price) ASC &lt;/orderkey&gt;
       &lt;orderkey&gt; SDATA(pub_date) DESC &lt;/orderKey&gt;
       &lt;orderkey&gt; Score DESC &lt;/orderkey&gt;
   &lt;/order&gt;
&lt;/query&gt;&#39;, 1)&gt;0;
</pre>
<p>The <code class="codeph">&lt;orderkey&gt;</code> element value must have the following format:</p>
<pre dir="ltr">&lt;orderkey&gt; SDATA(sdata_section_name) | score [DESC|ASC] &lt;/orderkey&gt;
</pre>
<p>The sort order is ascending by default, if not specified as either <code class="codeph">DESC</code> or <code class="codeph">ASC</code>.</p>
<p>The <code class="codeph">&lt;orderkey&gt;</code> element will be ignored in the following cases:</p>
<ul style="list-style-type: disc;">
<li>
<p>when the Oracle Cost-Based Optimizer (CBO) pushes the SQL query level ordering into the Text index</p>
</li>
<li>
<p>when the <code class="codeph">CONTAINS()</code> predicate is processed functionally</p>
</li>
<li>
<p>when the ordering is already specified by the ORDER BY clause in the SQL query statement</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Notes</p>
<p>Querying Multilanguage Tables<a id="d5330e4618" class="indexterm-anchor"></a></p>
<p>With the multilexer preference, you can create indexes from multilanguage tables. At query time, the multilexer examines the session&#39;s language setting and uses the sublexer preference for that language to parse the query. If the language setting is not mapped, then the default lexer is used.</p>
<p>When the language setting is mapped, the query is parsed and run as usual. The index contains tokens from multiple languages, so such a query can return documents in several languages.</p>
<p>To limit your query to returning documents of a given language, use a structured clause on the language column.</p>
<p id="GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__I997611">Query Performance Limitation with a Partitioned Index</p>
<p>Oracle Text supports the <code class="codeph">CONTEXT</code> indexing and querying of a partitioned text table.</p>
<p>However, for optimal performance when querying a partitioned table with an <code class="codeph">ORDER</code> <code class="codeph">BY</code> <code class="codeph">SCORE</code> clause, query the partition. If you query the entire table and use an <code class="codeph">ORDER</code> <code class="codeph">BY</code> <code class="codeph">SCORE</code> clause, the query might not perform optimally unless you include a range predicate that can limit the query to a single partition.</p>
<p>For example, the following statement queries the partition <code class="codeph">p_tab4</code> partition directly:</p>
<pre dir="ltr">select * from part_tab partition (p_tab4) where contains(b,&#39;oracle&#39;) &gt; 0 ORDER BY
SCORE DESC;
</pre>
<p>Limitation with Remote Execution of CONTAINS Query</p>
<p>Oracle Text supports the remote execution of the <code class="codeph">CONTAINS</code> operator, but with some limitations. You can invoke the <code class="codeph">CONTAINS</code> operator in a remote query only if the query is executed completely in the remote database. You cannot use the <code class="codeph">CONTAINS</code> operator in a subquery of a query, which causes the query to run partly on the remote database and partly on the local database. Doing so will raise the error &#34;ORA-00949: illegal reference to remote database.&#34; However, <code class="codeph">CONTAINS</code>, when invoked remotely from an inner query might run successfully sometimes if view merging is enabled and possible on this query, as in this case the query will be transformed into a single query and, hence, no error will occur.</p>
<p>For example, the following query is correct:</p>
<pre dir="ltr">select id from remtab@rdb 
where contains@rdb(text,&#39;hello&#39;) &gt; 0;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I997737">Syntax for CONTEXT Index Type</a>&#34;</span></p>
<p><a href="cqoper.htm#GUID-6410B783-FC9A-4C99-B3AF-9E0349AA43D1">Oracle Text CONTAINS Query Operators</a></p>
<p>&#34;The CONTEXT Grammar&#34; topic in <a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a></p>
<p><span class="q">&#34;<a href="csql.htm#GUID-263BAC8E-EAA9-4DF2-9F46-354C34E8C3C0">SCORE</a>&#34;</span></p>
</div>
<!-- class="section" --></div>
</div>
<a id="CCREF23721"></a><a id="CCREF23722"></a><a id="CCREF23723"></a><a id="CCREF23725"></a><a id="CCREF23726"></a><a id="CCREF23727"></a><a id="CCREF23728"></a><a id="CCREF23729"></a><a id="CCREF23730"></a><a id="CCREF23731"></a><a id="CCREF23732"></a><a id="CCREF23733"></a><a id="CCREF23734"></a><a id="CCREF23735"></a><a id="CCREF23736"></a><a id="CCREF23737"></a><a id="CCREF23738"></a><a id="CCREF23739"></a><a id="CCREF23740"></a><a id="CCREF23741"></a><a id="CCREF23742"></a><a id="CCREF23743"></a><a id="CCREF23744"></a><a id="CCREF23745"></a><a id="CCREF23746"></a><a id="CCREF0105"></a>
<div class="props_rev_3"><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862"></a>
<h2 id="CCREF-GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862" class="sect2"><span class="enumeration_section">1.5</span> CREATE INDEX</h2>
<div>
<div class="section">
<p>This section describes the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement as it pertains to creating an Oracle Text domain index and composite domain index.</p>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-085D9590-E92E-40D1-9650-A275F15C5F2E">
<p class="notep1">See Also:</p>
<p>&#34;<a class="olink SQLRF" target="_blank" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for a complete description of the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Purpose</p>
<p>Use <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> to create an Oracle Text index. An Oracle Text index is an Oracle Database <a id="d5330e4969" class="indexterm-anchor"></a>domain index or composite domain index of type <code class="codeph">CONTEXT</code>, <code class="codeph">CTXCAT</code>, or <code class="codeph">CTXRULE</code>. A domain index is an application-specific index. A <a id="d5330e4982" class="indexterm-anchor"></a><span class="bold">composite domain index</span> (CDI) is an Oracle Text index that not only indexes and processes a specified text column, but also indexes and processes <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> structured columns, which are specified during index creation.</p>
<p>You must create an appropriate Oracle Text index to enter <code class="codeph">CONTAINS</code>, <code class="codeph">CATSEARCH</code>, or <code class="codeph">MATCHES</code> queries.</p>
<p>You cannot create an Oracle Text index on an index-organized table<a id="d5330e5013" class="indexterm-anchor"></a>.</p>
<p>You can create the following types of Oracle Text indexes.</p>
<p>CONTEXT<a id="d5330e5020" class="indexterm-anchor"></a></p>
<p>A <code class="codeph">CONTEXT</code> index is the basic type of Oracle Text index. This is an index on a text column. A <code class="codeph">CONTEXT</code> index is useful when your source text consists of many large, coherent documents. Query this index with the <code class="codeph">CONTAINS</code> operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement. This index requires manual synchronization after DML. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I997737">Syntax for CONTEXT Index Type</a>&#34;</span>.</p>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I999894"><span class="bold">CTXCAT</span></p>
<p>The <code class="codeph">CTXCAT</code> index is a combined index on a text column and one or more other columns. The <code class="codeph">CTXCAT</code> type is typically used to index small documents or text fragments, such as item names, prices, and descriptions found in catalogs. Query this index with the <code class="codeph">CATSEARCH</code> operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement. This type of index is optimized for mixed queries. This index is transactional, automatically updating itself with DML to the base table. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998134">Syntax for CTXCAT Index Type</a>&#34;</span>.</p>
<p><span class="bold">CTXRULE</span></p>
<p>A <code class="codeph">CTXRULE</code> index is used to build a document classification application. The <code class="codeph">CTXRULE</code> index is an index created on a table of queries or a column containing a set of queries, where the queries serve as rules to define the classification criteria. Query this index with the <code class="codeph">MATCHES</code> operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1002072">Syntax for CTXRULE Index Type</a>&#34;</span>.</p>
<p>Required Privileges<a id="d5330e5099" class="indexterm-anchor"></a></p>
<p>You do not need the <code class="codeph">CTXAPP</code> role to create an Oracle Text index. If you have Oracle Database grants to create a B-tree index on the text column, you have sufficient privilege to create a text index. The issuing owner, table owner, and index owner can all be different users, which is consistent with Oracle standards for creating regular B-tree indexes.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I997737">
<p class="subhead2">Syntax for CONTEXT Index Type</p>
<p>Uses a <code class="codeph">CONTEXT</code> index to create an index on a text column. Query this index with the <code class="codeph">CONTAINS</code> operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement. This index requires manual synchronization after DML.</p>
<pre dir="ltr">CREATE INDEX [<span class="variable">schema</span>.]<span class="variable">index</span> ON [<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="italic">txt_column</span>)
  INDEXTYPE IS ctxsys.context [ONLINE]
  [FILTER BY <span class="italic">filter_column</span>[, <span class="italic">filter_column</span>]...]
  [ORDER BY <span class="italic">oby_column</span>[desc|asc][, <span class="italic">oby_column</span>[desc|asc]]...]
  [LOCAL [PARTITION [<span class="italic">partition</span>] [PARAMETERS(&#39;<span class="italic">paramstring</span>&#39;)]]
  [, PARTITION [<span class="italic">partition</span>] [PARAMETERS(&#39;<span class="italic">paramstring</span>&#39;)]])]
  [PARAMETERS(<span class="variable">paramstring</span>)] [PARALLEL n] [UNUSABLE]];
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3712"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-3E9BF753-F635-4F65-A106-04F035B9F2AC"><!-- --></a>[<span class="variable">schema</span>.]<span class="variable">index</span></dt>
<dd>
<p>Specifies the name of the Text index to create.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3713"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-1C23770F-D022-4877-A14B-B6CFC80C0AE7"><!-- --></a>[<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">txt_column</span>)</dt>
<dd>
<p>Specifies the name of the table and column to index. <code class="codeph">txt_column</code> is the name of the domain index column on which the <code class="codeph">CONTAINS()</code> operator will be invoked.</p>
<p>Your table can optionally contain a primary key if you prefer to identify your rows as such when you use procedures in <code class="codeph">CTX_DOC</code>. When your table has no primary key, document services identifies your documents by <code class="codeph">ROWID</code>.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-1720C8FB-84E4-4466-932E-BF2B99FD11C5">
<p class="notep1">Note:</p>
<p>Primary keys of the following type are supported: NUMBER, VARCHAR2, DATE, CHAR, VARCHAR, and RAW.</p>
</div>
<p><a id="d5330e5216" class="indexterm-anchor"></a><a id="d5330e5220" class="indexterm-anchor"></a><a id="d5330e5224" class="indexterm-anchor"></a><a id="d5330e5228" class="indexterm-anchor"></a><a id="d5330e5232" class="indexterm-anchor"></a><a id="d5330e5236" class="indexterm-anchor"></a><a id="d5330e5240" class="indexterm-anchor"></a><a id="d5330e5244" class="indexterm-anchor"></a>The column that you specify must be one of the following types: <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR</code>, <code class="codeph">VARCHAR2</code>, <code class="codeph">BLOB</code>, <code class="codeph">CLOB</code>, <code class="codeph">BFILE</code>, <code class="codeph">XMLType</code>, or <code class="codeph">URIType</code>.</p>
<p>The table that you specify can be a partitioned table. If you do not specify the <code class="codeph">LOCAL</code> clause, then a global, nonpartitioned index is created.</p>
<p>The <code class="codeph">DATE</code>, <code class="codeph">NUMBER</code>, and nested table columns cannot be indexed. Object columns also cannot be indexed, but their attributes can be indexed, provided that they are atomic data types.</p>
<p>Attempting to create an index on a Virtual Private Database (VPD) protected table will fail unless one of the following criteria is true:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p>The VPD policy is created such that it does not apply to the <code class="codeph">INDEX</code> statement type.</p>
</li>
<li>
<p>The policy function returns a <code class="codeph">NULL</code> predicate for the current user.</p>
</li>
<li>
<p>The user (or index owner) is <code class="codeph">SYS</code>.</p>
</li>
<li>
<p>The user has the <code class="codeph">EXEMPT</code> <code class="codeph">ACCESS</code> <code class="codeph">POLICY</code> privilege.</p>
</li>
</ul>
<p>Indexes on multiple columns are not supported with the <code class="codeph">CONTEXT</code> index type. You must specify only one column in the column list.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-E9C8E1D9-B162-41B8-AF3F-F5D1D81BCC1C">
<p class="notep1">Note:</p>
<p>With the <code class="codeph">CTXCAT</code> index type, you can create indexes on text and structured columns. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998134">Syntax for CTXCAT Index Type</a>&#34;</span></p>
</div>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-EA542AC3-3EF7-4DC1-A1C7-E84801CEC1BB">
<p class="notep1">Note:</p>
<p>Because a <a id="d5330e5338" class="indexterm-anchor"></a>Transparent Data Encryption-enabled column does not support domain indexes, it cannot be used with Oracle Text. However, you can create an Oracle Text index on a column in a table stored in a Transparent Data Encryption-enabled tablespace.</p>
</div>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3714"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-44B64A7D-D391-48D3-B439-D7B0964C20C8"><!-- --></a>ONLINE</dt>
<dd>
<p>Creates the index while enabling DML insertions/updates/deletions on the base table.</p>
<p>During indexing, Oracle Text enqueues DML requests in a pending queue. At the end of the index creation, Oracle Text locks the base table. During this time, DML is blocked. You must synchronize the index in order for DML changes to be available.</p>
</dd>
</dl>
<p>Limitations</p>
<p>The following limitations apply to using <code class="codeph">ONLINE</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>At the very beginning or very end of the <code class="codeph">ONLINE</code> process, DML might fail.</p>
</li>
<li>
<p><code class="codeph">ONLINE</code> is supported for <code class="codeph">CONTEXT</code> indexes only.</p>
</li>
</ul>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3715"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-7C81EA8D-7283-47CB-8142-B7BB35E3CC95"><!-- --></a>FILTER BY filter_column</dt>
<dd>
<p>This is the structured indexed column on which a range or equality predicate in the <code class="codeph">WHERE</code> clause of a mixed query will operate. You can specify one or more structured columns for <code class="codeph">filter_column</code>, on which the relational predicates are expected to be specified along with the <code class="codeph">CONTAINS()</code> predicate in a query.</p>
<p>The Cost-based Optimizer (CBO) will consider pushing down the structured predicates on these <code class="codeph">FILTER</code> <code class="codeph">BY</code> columns with the following relational operators: <code class="codeph">&lt;</code>, <code class="codeph">&lt;=</code>, <code class="codeph">=</code>, <code class="codeph">&gt;=</code>, <code class="codeph">&gt;</code>, <code class="codeph">between</code>, and <code class="codeph">LIKE</code> (for <code class="codeph">VARCHAR2</code>).</p>
<p>These columns can only be of <code class="codeph">CHAR</code>, <code class="codeph">NUMBER</code>, <code class="codeph">DATE</code>, <code class="codeph">VARCHAR2</code>, or <code class="codeph">RAW</code> type. Additionally, <code class="codeph">VARCHAR2</code> and <code class="codeph">RAW</code> types are supported only if the maximum length is specified and is limited to no more than <code class="codeph">249</code>. The <code class="codeph">ADT</code> attributes of supported types (<code class="codeph">CHAR</code>, <code class="codeph">NUMBER</code>, <code class="codeph">DATE</code>, <code class="codeph">VARCHAR2</code>, or <code class="codeph">RAW</code>) are also allowed. An error is raised for all other data types. Expressions, for example, <code class="codeph">func(cola)</code>, and virtual columns are not allowed.</p>
<p><code class="codeph">txt_column</code> is allowed in the <code class="codeph">FILTER</code> <code class="codeph">BY</code> column list.</p>
<p>DML operations on <code class="codeph">FILTER</code> <code class="codeph">BY</code> columns are always transactional.</p>
</dd>
</dl>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3716"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-D560D35A-125F-4AFF-BE04-2AC51DE64DF5"><!-- --></a>ORDER BY oby_column</dt>
<dd>
<p>This is the structured indexed column on which a structured <code class="codeph">ORDER</code> <code class="codeph">BY</code> mixed query will be based. A list of structured <span class="italic">oby_columns</span> can be specified in the <code class="codeph">ORDER</code> <code class="codeph">BY</code> clause of a <code class="codeph">CONTAINS()</code> query.</p>
<p>These columns can only be of <code class="codeph">CHAR</code>, <code class="codeph">NUMBER</code>, <code class="codeph">DATE</code>, <code class="codeph">VARCHAR2</code>, or <code class="codeph">RAW</code> type. Additionally, <code class="codeph">VARCHAR2</code> and <code class="codeph">RAW</code> types are supported only if the maximum length is specified and is limited to no more than <code class="codeph">249</code>. Expressions, for example, <code class="codeph">func(cola)</code>, and virtual columns are not allowed.</p>
<p>The order of the specified columns matters. The Cost-based Optimizer (CBO) will consider pushing the sort into the composite domain index only if the <code class="codeph">ORDER</code> <code class="codeph">BY</code> clause in the text query contains:</p>
<ul style="list-style-type: disc;">
<li>
<p>Entire ordered ORDER BY columns declared by the ORDER BY clause during the CREATE INDEX statement</p>
</li>
<li>
<p>Only the prefix of the ordered ORDER BY columns declared by the ORDER BY clause during the CREATE INDEX statement</p>
</li>
<li>
<p>The score followed by the prefix of the ordered ORDER BY columns declared by the ORDER BY clause during the CREATE INDEX statement</p>
</li>
<li>
<p>The score following the prefix of the ordered ORDER BY columns declared by the ORDER BY clause during the CREATE INDEX statement</p>
</li>
</ul>
<p>The following example illustrates Cost-based Optimizer (CBO) behavior with regard to <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns:</p>
<pre dir="ltr">CREATE INDEX foox ON foo(D) INDEXTYPE IS CTXSYS.CONTEXT
FILTER BY B, C
ORDER BY A, B desc;
</pre>
<p>Consider the following query:</p>
<pre dir="ltr">SELECT A, SCORE(1) FROM foo WHERE CONTAINS(D, &#39;oracle&#39;,1)&gt;0 
AND C&gt;100 ORDER BY col_list;
</pre>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-EE21C5A7-D02D-4DD3-9728-3F83B313F707">
<p class="notep1">Note:</p>
<p>If you set <code class="codeph">NLS_SORT</code> or <code class="codeph">NLS_COMP</code> parameters (that is, <code class="codeph">alter session set NLS_SORT = &lt;some lang&gt;;</code> ), then CBO will not push the sort or related structured predicate into the CDI. This behavior is consistent with regular B-tree indexes.</p>
</div>
<p>The Cost-based Optimizer (CBO) will consider pushing the sort into the composite domain index (CDI) if <code class="codeph">col_list</code> has the following values:</p>
<pre dir="ltr"> A
 A,B
 SCORE(1), A
 SCORE(1), A, B
 A, SCORE(1)
 A, B, SCORE(1) 
</pre>
<p>The CBO will not consider to push the sort into the CDI if <code class="codeph">col_list</code> has the following values:</p>
<pre dir="ltr"> B
 B,A
 SCORE(1), B  
 B, SCORE(1)
 A, B, C 
 A, B asc 
</pre>
<p>(or simply <code class="codeph">A</code>, <code class="codeph">B</code>)</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">SCORE</code> followed by the prefix of the ordered <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns declared by the <code class="codeph">ORDER</code> <code class="codeph">BY</code> clause during the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement.</p>
</li>
<li>
<p>The <code class="codeph">SCORE</code> following the prefix of the ordered <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns declared by the <code class="codeph">ORDER</code> <code class="codeph">BY</code> clause during the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement.</p>
</li>
</ul>
<p>Expressions, for example, <code class="codeph">func(cola)</code>, are not allowed.</p>
<p><code class="codeph">txt_column</code> appearing in the <code class="codeph">ORDER</code> <code class="codeph">BY</code> column list is allowed.</p>
<p>DML operations on <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns are always transactional.</p>
</dd>
</dl>
<p>Limitations</p>
<p>The following limitations apply to <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>A structured column is allowed in <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> clauses. However, a column that is mapped to <code class="codeph">MDATA</code> in a <code class="codeph">FILTER</code> <code class="codeph">BY</code> clause cannot also appear in the <code class="codeph">ORDER</code> <code class="codeph">BY</code> clause. An error will be raised in this case.</p>
</li>
<li>
<p>The maximum length for <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, and <code class="codeph">RAW</code> columns cannot be greater than 249. Additionally, if the <code class="codeph">VARCHAR2</code> or <code class="codeph">RAW</code> column is mapped to an <code class="codeph">MDATA</code> column, then the specified maximum length cannot exceed 64 and 32 bytes, respectively. (Note that <code class="codeph">MDATA</code> does not support <code class="codeph">CHAR</code> data types. If a <code class="codeph">FILTER</code> <code class="codeph">BY</code> column of <code class="codeph">CHAR</code> data type is mapped to an <code class="codeph">MDATA</code> section, then an error will be raised during the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement.)</p>
</li>
<li>
<p>The sum of the numbers for <code class="codeph">INDEXED_COLUMN</code>, <code class="codeph">FILTER</code> <code class="codeph">BY</code> columns, and <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns cannot be greater than 99.</p>
</li>
</ul>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-EA1748F8-94FB-4084-9985-8430C490A194">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>As with concatenated B-tree indexes or bitmap indexes, performance degradation may occur in DML as the number of <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns increases.</p>
</li>
<li>
<p>Mapping a <code class="codeph">FILTER</code> <code class="codeph">BY</code> column to <code class="codeph">MDATA</code> is not recommended if the <code class="codeph">FILTER</code> <code class="codeph">BY</code> column contains sequential values or has very high cardinality. Doing so can result in a very long and narrow <code class="codeph">$I</code> table and reduced <code class="codeph">$X</code> performance. An example is a column of type <code class="codeph">DATE</code>. For columns of this type, mapping to <code class="codeph">SDATA</code> is recommended.</p>
</li>
</ul>
</div>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-D46DCFC6-0075-43D7-8975-38FEF88D7510">
<p class="notep1">Note:</p>
<p>An index table with the name <code class="codeph">DR$</code><span class="italic">indextable</span><code class="codeph">$S</code> is created to store <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns that are mapped to <code class="codeph">SDATA</code> sections. If nothing is mapped to an <code class="codeph">SDATA</code> section, then the <code class="codeph">$S</code> table will not be created.</p>
<p><code class="codeph">$S</code> table contains the following columns:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SDATA_ID</code> <span class="italic">number</span> is the internal <code class="codeph">SDATA</code> section ID.</p>
</li>
<li>
<p><code class="codeph">SDATA_LAST</code> <span class="italic">number</span>, the last document ID, which is analogous to <code class="codeph">token_last</code>.</p>
</li>
<li>
<p><code class="codeph">SDATA_DATA</code> <code class="codeph">RAW</code><code class="codeph">(2000)</code>, the compressed <code class="codeph">SDATA</code> values. Note that if <code class="codeph">$S</code> is created on a tablespace with 4K database block size, then it will be defined as <code class="codeph">RAW</code><code class="codeph">(1500)</code>.</p>
</li>
</ul>
<p><span class="bold">Restriction:</span> For performance reasons, <code class="codeph">$S</code> table must be created on a tablespace with db block size &gt;= 4K without overflow segment and without <code class="codeph">PCTTHRESHOLD</code> clause. If <code class="codeph">$S</code> is created on a tablespace with db block size &lt; 4K, or is created with an overflow segment or with a <code class="codeph">PCTTHRESHOLD</code> clause, then appropriate errors will be raised during the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement.</p>
</div>
<p>Restrictions on exporting and importing text tables with composite domain index created with <code class="codeph">FILTER</code> <code class="codeph">BY</code> and/or <code class="codeph">ORDER</code> <code class="codeph">BY</code> clauses are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>Regular <code class="codeph">exp</code> and <code class="codeph">imp</code> will not support exporting and importing of composite domain index. Doing so will lead to the following error: <code class="codeph">EXP-00113: Feature Composite Domain Index is unsupported</code>.</p>
</li>
<li>
<p>To export a text table with composite domain index, you must use Data Pump Export and Import utilities (invoked with the <code class="codeph">expdp</code> and <code class="codeph">impdp</code> commands, respectively), or <code class="codeph">DBMS_DATAPUMP</code> PL/SQL package.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-E1796BFD-2671-421D-80AB-15F1037C619F">
<p class="notep1">See Also:</p>
<p><a href="cddlpkg.htm#GUID-F8DD37A5-04BA-45A3-BF6F-6614922B5058">ADD_SDATA_COLUMN</a> in <a href="cddlpkg.htm#GUID-0F7C39E8-E44A-421C-B40D-3B3578B507E9">CTX_DDL Package</a></p>
</div>
<p>Limitations of using <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> and <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> with <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> BY columns of the composite domain index, which are imposed by Extensible Indexing Framework in Oracle Database:</p>
<p><a id="d5330e6029" class="indexterm-anchor"></a>(These limitations are imposed by Extensible Indexing Framework in Oracle Database.)</p>
<ul style="list-style-type: disc;">
<li>
<p>Using <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> to add or drop <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns is currently not supported. You must re-create the index to add or drop <code class="codeph">FILTER</code> <code class="codeph">BY</code> or <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns.</p>
</li>
<li>
<p>To use <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> <code class="codeph">MODIFY</code> <code class="codeph">COLUMN</code> to modify the datatype of a column that has the composite domain index built on it, you must first drop the composite domain index before modifying the column.</p>
</li>
<li>
<p>To use <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> <code class="codeph">DROP</code> <code class="codeph">COLUMN</code> to drop a column that is part of the composite domain index, you must first drop the composite domain index before dropping the index column.</p>
</li>
</ul>
<p><a id="d5330e6100" class="indexterm-anchor"></a>The following limitations apply to <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> when used with PL/SQL packages:</p>
<ul style="list-style-type: disc;">
<li>
<p>Mapping <code class="codeph">FILTER</code> <code class="codeph">BY</code> columns to sections is optional. If section mapping does not exist for a <code class="codeph">FILTER</code> <code class="codeph">BY</code> column, then it is mapped to an <code class="codeph">SDATA</code> section by default. The section name assumes the name of the <code class="codeph">FILTER</code> <code class="codeph">BY</code> column.</p>
</li>
<li>
<p>If a section group is not specified during the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> clause of a composite domain index, then system default section group settings are used. An <code class="codeph">SDATA</code> section is created for each of the <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> columns.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-D44F2FBA-9861-4598-8F35-3A0935AF5BE1">
<p class="notep1">Note:</p>
<p>Because a section name does not allow certain special characters and is case-insensitive, if the column name is case-sensitive or contains special characters, then an error will be raised. To work around this problem, you must map the column to an <code class="codeph">MDATA</code> or <code class="codeph">SDATA</code> section before creating the index. See CTX_DDL.<a href="cddlpkg.htm#GUID-38A699AD-C8D4-4AB4-9AF5-BE07B761F25B">ADD_MDATA_COLUMN</a> or CTX_DDL.<a href="cddlpkg.htm#GUID-F8DD37A5-04BA-45A3-BF6F-6614922B5058">ADD_SDATA_COLUMN</a>.</p>
</div>
</li>
<li>
<p>An error is raised if a column that is mapped to an <code class="codeph">MDATA</code> section also appears in the <code class="codeph">ORDER</code> <code class="codeph">BY</code> column clause.</p>
</li>
<li>
<p>Column section names are unique to their section group. That is, you cannot have an <code class="codeph">MDATA</code> column section named <code class="codeph">FOO</code> if you already have an <code class="codeph">MDATA</code> column section named <code class="codeph">FOO</code>. Nor can you have a field section named <code class="codeph">FOO</code> if you already have an <code class="codeph">SDATA</code> column section named <code class="codeph">FOO</code>. This is true whether it is implicitly created (by <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> for <code class="codeph">FILTER</code> <code class="codeph">BY</code> or <code class="codeph">ORDER</code> <code class="codeph">BY</code> clauses) or explicitly created (by <code class="codeph">CTX_DDL.ADD_SDATA_COLUMN</code>).</p>
</li>
<li>
<p>One section name can be mapped to only one <code class="codeph">FILTER</code> <code class="codeph">BY</code> column, and vice versa. Mapping a section to more than one column, or mapping a column to more than one section is not allowed.</p>
</li>
<li>
<p>Column sections can be added to any type of section group, including the <code class="codeph">NULL</code> section group.</p>
</li>
<li>
<p>If a section group with sections added by the <code class="codeph">CTX_DDL.ADD_MDATA_COLUMN</code> or <code class="codeph">CTX_DDL.ADD_SDATA_COLUMN</code> packages is specified for a <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement without a <code class="codeph">FILTER</code> <code class="codeph">BY</code> clause, then the mapped column sections will be ignored. However, the index will still get created without those column sections. The same is true for a <code class="codeph">FILTER</code> <code class="codeph">BY</code> clause that does not contain mapped columns in the specified section group.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-6715C4D4-7AB9-4FE2-B329-BFBDDDF2972D">
<p class="notep1">See Also:</p>
<p>CTX_DDL.<a href="cddlpkg.htm#GUID-F8DD37A5-04BA-45A3-BF6F-6614922B5058">ADD_SDATA_COLUMN</a></p>
</div>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3717"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-4DEA9B20-02CC-4B9F-A214-EEE4471436C3"><!-- --></a>LOCAL [PARTITION [partition] [PARAMETERS(&#39;paramstring&#39;)]</dt>
<dd>
<p>Specifies a local partitioned context index on a partitioned table. The partitioned table must be partitioned by range. Hash, composite, and list partitions are not supported.</p>
<p>You can specify the list of index partition names with <span class="italic">partition_name</span>. If you do not specify a partition name, then the system assigns one. The order of the index partition list must correspond to the table partition order.</p>
<p>The <code class="codeph">PARAMETERS</code> clause associated with each partition specifies the parameters string specific to that partition. You can only specify <span class="italic">sync (manual|every |on commit)</span>, <span class="italic">memory</span> and <span class="italic">storage</span> for each index partition.</p>
<p>The <code class="codeph">PARAMETERS</code> clause also supports the <code class="codeph">POPULATE</code> and <code class="codeph">NOPOPULATE</code> arguments. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJEHFDFH">&#34;POPULATE | NOPOPULATE&#34;</a>&#34;</span>.</p>
<p>Query the views <a href="aviews.htm#GUID-39C91F29-7C61-493E-AA4C-E16558242D60">CTX_INDEX_PARTITIONS</a> or <a href="aviews.htm#GUID-51C3C118-1018-4C16-B62F-DB62169AB8F2">CTX_USER_INDEX_PARTITIONS</a> to find out index partition information, such as index partition name, and index partition status.</p>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-4CABFD3C-7893-4748-B074-2F7B49B6D6F2">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000586">Creating a Local Partitioned Index</a>&#34;</span></p>
</div>
</dd>
</dl>
<p>Query Performance Limitation with Partitioned Index</p>
<p>For optimal performance when querying a partitioned index with an <code class="codeph">ORDER</code> <code class="codeph">BY</code> <code class="codeph">SCORE</code> clause, query the partition. If you query the entire table and use an <code class="codeph">ORDER</code> <code class="codeph">BY</code> <code class="codeph">SCORE</code> clause, the query might not perform optimally unless you include a range predicate that can limit the query to the fewest number of partitions, which is optimally a single partition.</p>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-A99CAE34-6165-4B17-9FE1-423D11C45349">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59__I997611">Query Performance Limitation with a Partitioned Index</a>&#34;</span></p>
</div>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3718"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-04691215-D772-4E2D-9A77-56132BCB57C5"><!-- --></a>PARALLEL n</dt>
<dd>
<p>Optionally specifies the parallel degree for parallel indexing. The actual degree of parallelism might be smaller depending on your resources. You can use this parameter on nonpartitioned tables. However, creating a nonpartitioned index in parallel does not turn on parallel query processing. Parallel indexing is supported for creating a local partitioned index.</p>
<p>The indexing memory size specified in the parameter clause applies to each parallel slave. For example, if indexing memory size is specified in the parameter clause as 500M and parallel degree is specified as 2, then you must ensure that there is at least 1GB of memory available for indexing.</p>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-46E1B305-B4C8-425C-ACE1-B0E8466A6DC7">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998082">Parallel Indexing</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998102">Creating a Local Partitioned Index in Parallel</a>&#34;</span></p>
</li>
<li>
<p>The &#34;Performance Tuning&#34; chapter in <a class="olink CCAPP0500" target="_blank" href="../CCAPP/GUID-96F4B2AC-59E5-4B02-A85B-A7B2C20C4BDF.htm#CCAPP0500"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</dd>
</dl>
<p>Performance</p>
<p>Parallel indexing can speed up indexing when you have large amounts of data to index and when your operating system supports multiple CPUs.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-DC7E3AF5-D7BB-4E0F-85C6-F03B98FAA064">
<p class="notep1">Note:</p>
<p>Using <code class="codeph">PARALLEL</code> to create a local partitioned index that enables parallel queries. (Creating a nonpartitioned index in parallel does not turn on parallel query processing.)</p>
<p>Parallel querying degrades query throughput especially on heavily loaded systems. Because of this, Oracle recommends that you disable parallel querying after creating a local index. To do so, use the <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> <code class="codeph">NOPARALLEL</code> statement.</p>
<p>For more information on parallel querying, see the &#34;Performance Tuning&#34; chapter in <a class="olink CCAPP0500" target="_blank" href="../CCAPP/GUID-96F4B2AC-59E5-4B02-A85B-A7B2C20C4BDF.htm#CCAPP0500"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a>.</p>
</div>
<p>Limitations</p>
<p>Parallel indexing is supported only for the <code class="codeph">CONTEXT</code> index type.</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3719"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-476610B0-986F-4D88-AEB3-BAF2D7C375A3"><!-- --></a>UNUSABLE</dt>
<dd>
<p>Creates an unusable index. This creates index metadata only and exits immediately.</p>
<p>You might create an unusable index when you need to create a local partitioned index in parallel.</p>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-25FDB0EF-B181-436D-A791-EC4A07FA4710">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998102">Creating a Local Partitioned Index in Parallel</a>&#34;</span></p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3720"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-3B345118-87A5-4E77-93E4-8EF772E2D177"><!-- --></a>PARAMETERS(<span class="italic">paramstring</span>)</dt>
<dd>
<p>Optionally specify indexing parameters in <code class="codeph">paramstring</code>. You can specify preferences owned by another user using the <code class="codeph">user.preference</code> notation.</p>
<p>The syntax for <code class="codeph">paramstring</code> is as follows:</p>
<pre dir="ltr">paramstring =
&#39;[DATASTORE <span class="variable">datastore_pref</span>] 
 [FILTER <span class="variable">filter_pref</span>] 
 [CHARSET COLUMN <span class="italic">charset_column_name</span>]  
 [FORMAT COLUMN <span class="italic">format_column_name</span>]
 [SAVE_COPY COLUMN <span class="italic">save_copy_column_name</span>] 

 [LEXER <span class="variable">lexer_pref</span>]
 [LANGUAGE COLUMN <span class="italic">language_column_name</span>] 

 [WORDLIST <span class="variable">wordlist_pref</span>] 
 [STORAGE <span class="variable">storage_pref</span>] 
 [STOPLIST <span class="variable">stoplist</span>] 
 [SECTION GROUP <span class="variable">section_group</span>]
 [MEMORY <span class="variable">memsize</span>]
 [POPULATE | NOPOPULATE]
 [SYNC (MANUAL | EVERY &#34;<span class="variable">interval-string</span>&#34; | ON COMMIT)]
 [TRANSACTIONAL]&#39;
</pre>
<p>Create datastore, filter, lexer, wordlist, and storage preferences with CTX_DDL.<a href="cddlpkg.htm#GUID-56C4580F-6A43-43F4-BB83-DFAEB72A8DC3">CREATE_PREFERENCE</a> and then specify them in the paramstring.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-CA9B224C-BAFC-48D9-98A9-57E38C57ABEA">
<p class="notep1">Note:</p>
<p>When you specify no paramstring, Oracle Text uses the system defaults.</p>
<p>For more information about these defaults, see <span class="q">&#34;<a href="cdatadic.htm#GUID-BFE53A45-FA37-4F63-8D70-9E9C5E987D5E">Default Index Parameters</a>&#34;</span>.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3721"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-C49D72BC-0C91-402C-A4F4-FB93735416C7"><!-- --></a>DATASTORE <span class="italic">datastore_pref</span></dt>
<dd>
<p>Specifies the name of your datastore preference. Use the datastore preference to specify where your text is stored.See <span class="q">&#34;<a href="cdatadic.htm#GUID-91576377-DD67-4CBA-91AD-127402C4B93A">Datastore Types</a> &#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3722"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-B3ED8ED0-DC82-4086-9C87-3C7D398F6EF8"><!-- --></a>FILTER <span class="italic">filter_pref</span></dt>
<dd>
<p>Specifies the name of your filter preference. Use the filter preference to specify how to filter formatted documents to plain text or HTML. See <span class="q">&#34;<a href="cdatadic.htm#GUID-24A7DF95-CDA5-4062-82D5-6DFC45F736BF">Filter Types</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3723"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-1D11993B-942D-4701-8061-8D6B5AF8E21A"><!-- --></a>CHARSET COLUMN <span class="italic">charset_column_name</span></dt>
<dd>
<p>Specifies the name of the character set column. This column must be in the same table as the text column, and it must be of type <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR</code>, or <code class="codeph">VARCHAR2</code>. Use this column to specify the document character set for conversion to the database character set. The value is case-insensitive. You must specify a globalization support character set string, such as JA16EUC.</p>
<p>When the document is plain text or HTML, the <code class="codeph">AUTO_FILTER</code> and <code class="codeph">CHARSET</code> filters use this column to convert the document character set to the database character set for indexing.</p>
<p>Use this column when you have plain text or HTML documents with different character sets or in a character set different from the database character set.</p>
<p>Setting <code class="codeph">NLS_LENGTH_SEMANTICS</code> parameter to <code class="codeph">CHAR</code> is not supported at the database level. This parameter is supported for the following columns:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">CHARSET</code> <code class="codeph">COLUMN</code>, for example:</p>
<pre dir="ltr">VARCHAR2 &lt;<span class="italic">size</span>&gt; CHAR
CHAR &lt;<span class="italic">size</span>&gt; CHAR
</pre></li>
<li>
<p>An index created on a <code class="codeph">VARCHAR2</code> and <code class="codeph">CHAR</code> column</p>
</li>
<li>
<p><code class="codeph">VARCHAR2</code> and <code class="codeph">CHAR</code> columns for <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> clauses of <code class="codeph">CREATE</code> <code class="codeph">INDEX</code></p>
</li>
<li>
<p><code class="codeph">FORMAT</code> <code class="codeph">COLUMN</code></p>
</li>
</ul>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-45CA08DD-15D8-4318-97B5-BAFC67B65563">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>Documents are not marked for re-indexing when only the character set column changes. The indexed column must be updated to flag the re-index.</p>
</li>
<li>
<p>The <a id="d5330e6663" class="indexterm-anchor"></a><code class="codeph">NLS_LENGTH_SEMANTICS = CHAR</code> parameter is supported at the column level only, and is not supported at the database level, as described in this section.</p>
</li>
</ul>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3724"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-19009636-3F3A-473D-BB44-C956220CC1DA"><!-- --></a>FORMAT COLUMN <span class="italic">format_column_name</span></dt>
<dd>
<p>Specifies the name of the format column. The format column must be in the same table as the text column and it must be <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR</code>, or <code class="codeph">VARCHAR2</code> type.</p>
<p><code class="codeph">FORMAT COLUMN</code> determines how a document is filtered, or, in the case of the <code class="codeph">IGNORE</code> value, if it is to be indexed.</p>
<p><code class="codeph">AUTO_FILTER</code> uses the format column when filtering documents. Use this column with heterogeneous document sets to optionally bypass filtering for plain text or HTML documents.</p>
<p>In the format column, you can specify one of the following options:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">TEXT</code></p>
</li>
<li>
<p><code class="codeph">BINARY</code></p>
</li>
<li>
<p><code class="codeph">IGNORE</code></p>
</li>
</ul>
<p>The <code class="codeph">TEXT</code> option indicates that the document is either plain text or HTML. When <code class="codeph">TEXT</code> is specified, the document is not filtered, but may have the character set converted.</p>
<p>The <code class="codeph">BINARY</code> option indicates that the document is a format supported by the <code class="codeph">AUTO_FILTER</code> object other than plain text or HTML, for example PDF. <code class="codeph">BINARY</code> is the default, if the format column entry cannot be mapped.</p>
<p>The <code class="codeph">IGNORE</code> option indicates that the row is to be ignored during indexing. Use this value when you need to bypass rows that contain data incompatible with text indexing such as image data, or rows in languages that you do not want to process. The difference between documents with <code class="codeph">TEXT</code> and <code class="codeph">IGNORE</code> format column types is that the former are indexed but ignored by the filter, while the latter are not indexed at all. Thus, <code class="codeph">IGNORE</code> can be used with any filter type.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-3AE2B4C8-09FF-480C-8E8D-8B15F46931CD">
<p class="notep1">Note:</p>
<p>Documents are not marked for re-indexing when only the format column changes. The indexed column must be updated to flag the re-index.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3725"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-7386BB3F-914A-4F95-B0D3-3DE0864F7BD2"><!-- --></a>SAVE_COPY COLUMN <span class="italic">save_copy_column_name</span></dt>
<dd>
<p>Specifies the name of the column that contains the preference of whether to save a copy of a document into the <code class="codeph">$D</code> index table during a search operation.</p>
<p>You can specify one of the following three options in the <code class="codeph">SAVE_COPY</code> column: <code class="codeph">PLAINTEXT</code>, <code class="codeph">FILTERED</code>, or <code class="codeph">NONE</code>.</p>
<p>The <code class="codeph">PLAINTEXT</code> option indicates that the document should be stored as a plain text in the <code class="codeph">$D</code> index table. Specify this value when using the SNIPPET procedure.</p>
<p>The <code class="codeph">FILTERED</code> option indicates that a filter preference should be applied on the text present in the document before storing it into the <code class="codeph">$D</code> index table. Specify this value when using the MARKUP procedure or the HIGHLIGHT procedure.</p>
<p>The <code class="codeph">NONE</code> option indicates that a copy of the document should not be saved in the <code class="codeph">$D</code> index table. Specify this value for any of the following scenarios:</p>
<ul style="list-style-type: disc;">
<li>
<p>when SNIPPET, MARKUP, or HIGHLIGHT procedure is not used.</p>
</li>
<li>
<p>when the indexed column is either <code class="codeph">VARCHAR2</code> or <code class="codeph">CLOB</code>.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3726"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-34398282-CB98-4DDC-AD4E-184A34667A07"><!-- --></a>LEXER <span class="italic">lexer_pref</span></dt>
<dd>
<p>Specifies the name of your lexer or multilexer preference. Use the lexer preference to identify the language of your text and how text is tokenized for indexing. See <span class="q">&#34;<a href="cdatadic.htm#GUID-3C8A85E5-C346-4B18-874A-669D93F64DE8">Lexer Types</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3727"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-744B4BFF-8A58-4FEB-849B-C7A3777A3929"><!-- --></a>LANGUAGE COLUMN <span class="italic">language_column_name</span></dt>
<dd>
<p>Specifies the name of the language column when using a multi-lexer preference. See <span class="q">&#34;<a href="cdatadic.htm#GUID-93B17833-A046-468C-BE5F-2BD09A61935C">MULTI_LEXER</a>&#34;</span>.</p>
<p>This column must exist in the base table. It cannot be the same column as the indexed column. Only the first 30 bytes of the language column are examined for language identification.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-091BC0BB-094F-4473-AA6F-08E019C2491A">
<p class="notep1">Note:</p>
<p>Documents are not marked for re-indexing when only the language column changes. The indexed column must be updated to flag the re-index.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3728"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-4BA44E60-B205-425B-805B-16168CF6949A"><!-- --></a>WORDLIST <span class="italic">wordlist_pref</span></dt>
<dd>
<p>Specifies the name of your wordlist preference. Use the wordlist preference to enable features such as fuzzy, stemming, and prefix indexing for better wildcard searching. See <span class="q">&#34;<a href="cdatadic.htm#GUID-9CE95823-DF47-43E4-940A-9B1E8CB5E21F">Wordlist Type</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3729"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-B0CC6DE8-CB05-4553-9D1A-976CD08BB604"><!-- --></a>STORAGE <span class="italic">storage_pref</span></dt>
<dd>
<p>Specifies the name of your storage preference for the Text index. Use the storage preference to specify how the index tables are stored. See <span class="q">&#34;<a href="cdatadic.htm#GUID-C6DA9061-955A-403E-B8BB-961D31360DCB">Storage Types</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3730"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-C5ADA85D-72F9-4928-B379-8A281F855B4B"><!-- --></a>STOPLIST <span class="italic">stoplist</span></dt>
<dd>
<p>Specifies the name of your stoplist. Use stoplist to identify words that are not to be indexed. See CTX_DDL.<a href="cddlpkg.htm#GUID-3336B8E9-13FB-4997-A9AD-8D9A207B10C4">CREATE_STOPLIST</a> .</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3731"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-ED29D954-A976-42C8-B4D2-1B7BD0290C6F"><!-- --></a>SECTION GROUP <span class="italic">section_group</span></dt>
<dd>
<p>Specifies the name of your section group. Use section groups to create searchable sections in structured documents. See CTX_DDL.<a href="cddlpkg.htm#GUID-9B0E0A60-53DF-4B90-827A-8D1B8D313A16">CREATE_SECTION_GROUP</a> .</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3732"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-B7D74464-1E23-4852-ABAD-866FA0D4E30D"><!-- --></a>MEMORY <span class="italic">memsize</span></dt>
<dd>
<p>Specifies the amount of run-time memory to use for indexing. The syntax for <tt>memsize</tt> is as follows:</p>
<pre dir="ltr">memsize = <span class="variable">number</span>[K|M|G]
</pre>
<p>K stands for kilobytes, M stands for megabytes, and G stands for gigabytes.</p>
<p>The value you specify for <code class="codeph">memsize</code> must be between 1M and the value of <code class="codeph">MAX_INDEX_MEMORY</code> in the <a href="aviews.htm#GUID-A974A8EC-258E-4A7D-9A68-61DFE7672093">CTX_PARAMETERS</a> view. To specify a memory size larger than the <code class="codeph">MAX_INDEX_MEMORY</code>, you must reset this parameter with CTX_ADM.<a href="cadmpkg.htm#GUID-34F6AE6C-B3B3-4A08-87EA-A75849D4ED30">SET_PARAMETER</a> to be larger than or equal to <code class="codeph">memsize</code>.</p>
<p>The default is the value specified for <code class="codeph">DEFAULT_INDEX_MEMORY</code> in <code class="codeph">CTX_PARAMETERS</code>.</p>
<p><a id="d5330e6941" class="indexterm-anchor"></a><a id="d5330e6943" class="indexterm-anchor"></a>The <code class="codeph">memsize</code> parameter specifies the amount of memory Oracle Text uses for indexing before flushing the index to disk. Specifying a large amount memory improves indexing performance because there are fewer I/O operations and improves query performance and maintenance, because there is less fragmentation.</p>
<p>Specifying smaller amounts of memory increases disk I/O and index fragmentation, but might be useful when run-time memory is scarce.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3733"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJEHFDFH"><!-- --></a>POPULATE | NOPOPULATE</dt>
<dd>
<p>Specifies whether an index should be empty or populated. The default is <code class="codeph">POPULATE</code>.</p>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-67478C52-2619-47FC-B643-77771CC3E366">
<p class="notep1">Note:</p>
<p><code class="codeph">POPULATE</code> | <code class="codeph">NOPOPULATE</code> is the only option whose default value cannot be set with CTX_ADM.<a href="cadmpkg.htm#GUID-34F6AE6C-B3B3-4A08-87EA-A75849D4ED30">SET_PARAMETER</a>.</p>
</div>
<p><a id="d5330e6973" class="indexterm-anchor"></a>Empty indexes are populated by updates or inserts to the base table. You might create an empty index when you need to create your index incrementally or to selectively index documents in the base table. You might also create an empty index when you require only theme and Gist output from a document set.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3734"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJEDAGCH"><!-- --></a>SYNC (MANUAL | EVERY &#34;<span class="variable">interval-string</span>&#34; | ON COMMIT)</dt>
<dd>
<p>Specifies <code class="codeph">SYNC</code> for automatic synchronization of the <code class="codeph">CONTEXT</code> index when there are inserts, updates or deletes to the base table. You can specify one of the following <code class="codeph">SYNC</code> methods:</p>
<div class="tblformal" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-5F52FFA7-24D6-4CC8-B094-FB5951233628">
<p class="titleintable">Table 1-5 SYNC Types</p>
<table class="cellalignment3033" title="SYNC Types" summary="This table shows SYNC methods.">
<thead>
<tr class="cellalignment3022">
<th class="cellalignment3055" id="d5330e7006">SYNC Type</th>
<th class="cellalignment3056" id="d5330e7009">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3022">
<td class="cellalignment3057" id="d5330e7014" headers="d5330e7006">
<p><code class="codeph">MANUAL</code></p>
</td>
<td class="cellalignment3058" headers="d5330e7014 d5330e7009">
<p>Provides no automatic synchronization. This is the default. You must manually synchronize the index with <code class="codeph">CTX_DDL.SYNC_INDEX</code>.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3057" id="d5330e7025" headers="d5330e7006">
<p>EVERY &#34;<span class="variable">interval-string</span>&#34;</p>
</td>
<td class="cellalignment3058" headers="d5330e7025 d5330e7009">
<p>Automatically synchronizes the index at a regular interval specified by the value of <span class="variable">interval-string</span>, which takes the same syntax as that for scheduler jobs. Automatic synchronization using <code class="codeph">EVERY</code> requires that the index creator have <code class="codeph">CREATE JOB</code> privileges.</p>
<p>Ensure that <span class="variable">interval-string</span> is set to a long enough period that any previous sync jobs will have completed; otherwise, the sync job might hang. <span class="variable">interval-string</span> must be enclosed in double quotes, and any single quote within <span class="variable">interval-string</span> must be preceded by the escape character with another single quote.</p>
<p>See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000959">Enabling Automatic Index Synchronization</a>&#34;</span> for an example of automatic sync syntax.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3057" id="d5330e7061" headers="d5330e7006">
<p>ON COMMIT</p>
</td>
<td class="cellalignment3058" headers="d5330e7061 d5330e7009">
<p>Synchronizes the index immediately after a commit transaction. The commit transaction does not return until the sync is complete. (Because the synchronization is performed as a separate transaction, there may be a period, usually small, when the data is committed but index changes are not.)</p>
<p>The operation uses the memory specified with the <span class="variable">memory</span> parameter.</p>
<p>Note that the sync operation has its own transaction context. If this operation fails, the data transaction is still committed. Index synchronization errors are logged in the <code class="codeph">CTX_USER_INDEX_ERRORS</code> view. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000916">Viewing Index Errors</a>&#34;</span>.</p>
<p>See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000959">Enabling Automatic Index Synchronization</a>&#34;</span> for an example of <code class="codeph">ON COMMIT</code> syntax.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Each partition of a locally partitioned index can have its own type of sync (<code class="codeph">ON COMMIT</code>, <code class="codeph">EVERY</code>, or <code class="codeph">MANUAL</code>). The type of sync specified in master parameter strings applies to all index partitions unless a partition specifies its own type.</p>
<p>With automatic (<code class="codeph">EVERY</code>) synchronization, users can specify memory size and parallel synchronization. That syntax is:</p>
<pre dir="ltr">... EVERY <span class="variable">interval_string</span> MEMORY <span class="variable">mem_size</span> PARALLEL <span class="variable">paradegree</span> ...
</pre>
<p>The <code class="codeph">ON</code> <code class="codeph">COMMIT</code> synchronizations can be run only serially and must use the same memory size that was specified at index creation.</p>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-2F52F9E9-1B52-47C8-BCD0-CE00EE68FCB9">
<p class="notep1">See Also:</p>
<p><a class="olink ADMIN035" target="_blank" href="../ADMIN/schedadmin.htm#ADMIN035"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about job scheduling</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3735"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJECACGF"><!-- --></a>TRANSACTIONAL</dt>
<dd>
<p><a id="d5330e7138" class="indexterm-anchor"></a><a id="d5330e7140" class="indexterm-anchor"></a><a id="d5330e7144" class="indexterm-anchor"></a><a id="d5330e7146" class="indexterm-anchor"></a><a id="d5330e7148" class="indexterm-anchor"></a><a id="d5330e7152" class="indexterm-anchor"></a><a id="d5330e7156" class="indexterm-anchor"></a>Specifies that documents can be searched immediately after they are inserted or updated. If a text index is created with <code class="codeph">TRANSACTIONAL</code> enabled, then, in addition to processing the synchronized rowids already in the index, the <code class="codeph">CONTAINS</code> operator will process unsynchronized rowids as well. Oracle Text does in-memory indexing of unsynchronized rowids and processes the query against the in-memory index.</p>
<p><code class="codeph">TRANSACTIONAL</code> is an index-level parameter and does not apply at the partition level.</p>
<p>You must still synchronize your text indexes from time to time (with <code class="codeph">CTX_DDL.SYNC_INDEX</code>) to bring pending rowids into the index. Query performance degrades as the number of unsynchronized rowids increases. For that reason, Oracle recommends setting up your index to use automatic synchronization with the <code class="codeph">EVERY</code> or <code class="codeph">ON COMMIT</code> parameter. (See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJEDAGCH">&#34;SYNC (MANUAL | EVERY &#34;interval-string&#34; | ON COMMIT)&#34;</a>&#34;</span>.)</p>
<p><a id="d5330e7187" class="indexterm-anchor"></a><a id="d5330e7189" class="indexterm-anchor"></a><a id="d5330e7191" class="indexterm-anchor"></a>Transactional querying for indexes that have been created with the <code class="codeph">TRANSACTIONAL</code> parameter can be turned on and off (for the duration of a user session) with the PL/SQL variable <code class="codeph">CTX_QUERY.disable_transactional_query</code>. This is useful, for example, if you find that querying is slow due to the presence of too many pending rowids. Here is an example of setting this session variable:</p>
<pre dir="ltr">exec ctx_query.disable_transactional_query := TRUE;
</pre>
<p>If the index uses <code class="codeph">AUTO_FILTER</code>, queries involving unsynchronized rowids will require filtering of unsynchronized documents.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">CREATE INDEX: CONTEXT Index Examples</p>
<p>The following sections give examples of creating a <code class="codeph">CONTEXT</code> index.</p>
<p><a id="d5330e7218" class="indexterm-anchor"></a><a id="d5330e7222" class="indexterm-anchor"></a>Creating CONTEXT Index Using Default Preferences</p>
<p>The following example creates a <code class="codeph">CONTEXT</code> index called <code class="codeph">myindex</code> on the <code class="codeph">docs</code> column in <code class="codeph">mytable</code>. Default preferences are used.</p>
<pre dir="ltr">CREATE INDEX myindex ON mytable(docs) INDEXTYPE IS ctxsys.context;
</pre>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-5B6C8D43-E257-49E1-9642-32BA39C46EF5">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a></p>
</li>
<li>
<p>For more information about default settings, see <span class="q">&#34;<a href="cdatadic.htm#GUID-BFE53A45-FA37-4F63-8D70-9E9C5E987D5E">Default Index Parameters</a>&#34;</span></p>
</li>
</ul>
</div>
<p><a id="d5330e7259" class="indexterm-anchor"></a>Creating CONTEXT Index with Custom Preferences</p>
<p>The following example creates a <code class="codeph">CONTEXT</code> index called <code class="codeph">myindex</code> on the <code class="codeph">docs</code> column in <code class="codeph">mytable</code>. The index is created with a custom lexer preference called <code class="codeph">my_lexer</code> and a custom stoplist called <code class="codeph">my_stop</code>.</p>
<p>This example also assumes that the preference and stoplist were previously created with CTX_DDL.<a href="cddlpkg.htm#GUID-56C4580F-6A43-43F4-BB83-DFAEB72A8DC3">CREATE_PREFERENCE</a> for <code class="codeph">my_lexer</code>, and CTX_DDL.<a href="cddlpkg.htm#GUID-3336B8E9-13FB-4997-A9AD-8D9A207B10C4">CREATE_STOPLIST</a> for <code class="codeph">my_stop</code>. Default preferences are used for the unspecified preferences.</p>
<pre dir="ltr">CREATE INDEX myindex ON mytable(docs) INDEXTYPE IS ctxsys.context 
  PARAMETERS(&#39;LEXER my_lexer STOPLIST my_stop&#39;);
</pre>
<p>Any user can use any preference. To specify preferences that exist in another user&#39;s schema, add the user name to the preference name. The following example assumes that the preferences <code class="codeph">my_lexer</code> and <code class="codeph">my_stop</code> exist in the schema that belongs to user <code class="codeph">kenny</code>:</p>
<pre dir="ltr">CREATE INDEX myindex ON mytable(docs) INDEXTYPE IS ctxsys.context 
  PARAMETERS(&#39;LEXER kenny.my_lexer STOPLIST kenny.my_stop&#39;);
</pre>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000959">Enabling Automatic Index Synchronization</p>
<p>You can create your index and specify that the index be synchronized at regular intervals for insertions, updates and deletions to the base table. To do so, create the index with the <code class="codeph">SYNC</code> <code class="codeph">(</code><code class="codeph">EVERY</code> <code class="codeph">&#34;</code><span class="variable">interval-string</span><code class="codeph">&#34;)</code> parameter.</p>
<p>To use job scheduling, you must log in as a user who has DBA privileges and then grant <code class="codeph">CREATE JOB</code> privileges.</p>
<p>The following example creates an index and schedules three synchronization jobs for three index partitions. The first partition uses <code class="codeph">ON</code> <code class="codeph">COMMIT</code> synchronization. The other two partitions are synchronized by jobs that are scheduled to be executed every Monday at 3 P.M.</p>
<pre dir="ltr">CONNECT system/<span class="italic">password</span>
GRANT CREATE JOB TO dr_test

CREATE INDEX tdrmauto02x ON tdrmauto02(text)
   INDEXTYPE IS CTXSYS.CONTEXT local
   (PARTITION tdrm02x_i1 PARAMETERS(&#39;
   MEMORY 20m SYNC(ON COMMIT)&#39;),
   PARTITION tdrm02x_i2,
   PARTITION tdrm02x_i3)  PARAMETERS(&#39;
   SYNC (EVERY &#34;NEXT_DAY(TRUNC(SYSDATE), &#39;&#39;MONDAY&#39;&#39;) + 15/24&#34;)
  &#39;);
</pre>
<p>See <a class="olink ADMIN035" target="_blank" href="../ADMIN/schedadmin.htm#ADMIN035"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about job scheduling syntax.</p>
<p>Creating CONTEXT Index with Multilexer Preference<a id="d5330e7363" class="indexterm-anchor"></a></p>
<p>The multilexer preference decides which lexer to use for each row based on a language column. This is a character column in the table that stores the language of the document in the text column. For example, create the table <code class="codeph">globaldoc</code> to hold documents of different languages:</p>
<pre dir="ltr">CREATE TABLE globaldoc (
   doc_id NUMBER PRIMARY KEY,
   lang VARCHAR2(10),
   text CLOB
);
</pre>
<p>Assume that <code class="codeph">global_lexer</code> is a multilexer preference you created. To index the <code class="codeph">global_doc</code> table, specify the multilexer preference and the name of the language column as follows:</p>
<pre dir="ltr">CREATE INDEX globalx ON globaldoc(text) INDEXTYPE IS ctxsys.context PARAMETERS
(&#39;LEXER global_lexer LANGUAGE COLUMN lang&#39;);
</pre>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-EA26CF44-4920-471B-94D1-F521202BAEAC">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="cdatadic.htm#GUID-93B17833-A046-468C-BE5F-2BD09A61935C">MULTI_LEXER</a>&#34;</span> for more information about creating multilexer preferences</p>
</div>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000586">Creating a Local Partitioned Index<a id="d5330e7394" class="indexterm-anchor"></a></p>
<p>The following example creates a text table that is partitioned into three, populates it, and then creates a partitioned index:</p>
<pre dir="ltr">PROMPT create partitioned table and populate it

CREATE TABLE part_tab (a int, b varchar2(40)) PARTITION BY RANGE(a)
(partition p_tab1 values less than (10),
 partition p_tab2 values less than (20),
 partition p_tab3 values less than (30));

PROMPT create partitioned index
CREATE INDEX part_idx on part_tab(b) INDEXTYPE IS CTXSYS.CONTEXT
 LOCAL (partition p_idx1, partition p_idx2, partition p_idx3);
</pre>
<div class="infobox-note" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-4FA70079-5984-422D-A73C-EB6E47E431F7">
<p class="notep1">Note:</p>
<p>The limit for the number of partitions in Oracle Text is the same as the maximum number of partitions per table in Oracle Database.</p>
</div>
<p><a id="d5330e7406" class="indexterm-anchor"></a>Using FILTER BY and ORDER BY Clauses</p>
<p>The following example creates an index on table <span class="italic">docs</span> and orders the documents by author&#39;s publishing date.</p>
<p>First, create the table:</p>
<pre dir="ltr">CREATE TABLE docs (
    docid    NUMBER, 
    pub_date DATE, 
    author   VARCHAR2(30), 
    category VARCHAR2(30), 
    document CLOB
);
</pre>
<p>Create the index with <code class="codeph">FILTER</code> <code class="codeph">BY</code> and <code class="codeph">ORDER</code> <code class="codeph">BY</code> clauses:</p>
<pre dir="ltr">CREATE INDEX doc_idx on docs(document) indextype is ctxsys.context
  FILTER BY category, author
  ORDER BY pub_date desc, docid
  PARAMETERS (&#39;memory 500M&#39;);
</pre>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998082">Parallel Indexing<a id="d5330e7437" class="indexterm-anchor"></a></p>
<p>Parallel indexing can improve index performance when you have multiple CPUs.</p>
<p>To create an index in parallel, use the <code class="codeph">PARALLEL</code> clause with a parallel degree. This example uses a parallel degree of 3:</p>
<pre dir="ltr">CREATE INDEX myindex ON mytab(pk) INDEXTYPE IS ctxsys.context PARALLEL 3;
</pre>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998102">Creating a Local Partitioned Index in Parallel<a id="d5330e7452" class="indexterm-anchor"></a><a id="d5330e7456" class="indexterm-anchor"></a><a id="d5330e7458" class="indexterm-anchor"></a></p>
<p>Creating a local partitioned index in parallel can improve performance when you have multiple CPUs. With partitioned tables, you can divide the work. You can create a local partitioned index in parallel in two ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use the <code class="codeph">PARALLEL</code> clause with the <code class="codeph">LOCAL</code> clause in the <code class="codeph">CREATE INDEX</code> statement. In this case, the maximum parallel degree is limited to the number of partitions you have. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000611">Parallelism with CREATE INDEX</a>&#34;</span>.</p>
</li>
<li>
<p>Create an unusable index first, then run the <code class="codeph">DBMS_PCLXUTIL.BUILD_PART_INDEX</code> utility. This method can result in a higher degree of parallelism, especially if you have more CPUs than partitions. See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000635">Parallelism with DBMS_PCLUTIL.BUILD_PART_INDEX</a>&#34;</span>.</p>
</li>
</ul>
<p>If you attempt to create a local partitioned index in parallel, and the attempt fails, you may see the following error message:</p>
<pre dir="ltr">ORA-29953: error in the execution of the ODCIIndexCreate routine for one or more
of the index partitions
</pre>
<p>To determine the specific reason why the index creation failed, query the <a href="aviews.htm#GUID-49A2323B-71C6-49B0-85FA-046552DDBDE6">CTX_USER_INDEX_ERRORS</a> view.</p>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000611">Parallelism with CREATE INDEX</p>
<p>You can achieve local index parallelism by using the <code class="codeph">PARALLEL</code> and <code class="codeph">LOCAL</code> clauses in the <code class="codeph">CREATE INDEX</code> statement. In this case, the maximum parallel degree is limited to the number of partitions that you have.</p>
<p>The following example creates a table with three partitions, populates them, and then creates the local indexes in parallel with a degree of 2:</p>
<pre dir="ltr">create table part_tab3(id number primary key, text varchar2(100)) 
partition by range(id) 
(partition p1 values less than (1000), 
 partition p2 values less than (2000), 
 partition p3 values less than (3000)); 

begin 
  for i in 0..2999 
  loop 
      insert into part_tab3 values (i,&#39;oracle&#39;); 
  end loop; 
end; 
/ 

create index part_tab3x on part_tab3(text) 
indextype is ctxsys.context local (partition part_tabx1, 
                                   partition part_tabx2, 
                                   partition part_tabx3) 
parallel 2;                                                              
</pre>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000635"><a id="d5330e7520" class="indexterm-anchor"></a><a id="d5330e7524" class="indexterm-anchor"></a><a id="d5330e7528" class="indexterm-anchor"></a>Parallelism with DBMS_PCLUTIL.BUILD_PART_INDEX</p>
<p>You can achieve local index parallelism by first creating an unusable <code class="codeph">CONTEXT</code> index, and then running the <a class="olink ARPLS037" target="_blank" href="../ARPLS/d_pclxut.htm#ARPLS037"><code class="codeph">DBMS_PCLUTIL.BUILD_PART_INDEX</code></a> utility. This method can result in a higher degree of parallelism, especially when you have more CPUs than partitions.</p>
<p>In this example, the base table has three partitions. We create a local partitioned unusable index first, then run <a class="olink ARPLS037" target="_blank" href="../ARPLS/d_pclxut.htm#ARPLS037"><code class="codeph">DBMS_PCLUTIL.BUILD_PART_INDEX</code></a>, which builds the 3 partitions in parallel (referred to as inter-partition parallelism). Also, inside each partition, index creation proceeds in parallel (called intra-partition parallelism) with a parallel degree of 2. Therefore, the total parallel degree is 6 (3 times 2).</p>
<pre dir="ltr">create table part_tab3(id number primary key, text varchar2(100)) 
partition by range(id) 
(partition p1 values less than (1000), 
 partition p2 values less than (2000), 
 partition p3 values less than (3000)); 

begin 
  for i in 0..2999 
  loop 
      insert into part_tab3 values (i,&#39;oracle&#39;); 
  end loop; 
end; 
/ 

create index part_tab3x on part_tab3(text) 
indextype is ctxsys.context local (partition part_tabx1, 
                                   partition part_tabx2, 
                                   partition part_tabx3) 
unusable; 

exec dbms_pclxutil.build_part_index(jobs_per_batch=&gt;3,
  procs_per_job=&gt;2,
  tab_name=&gt;&#39;PART_TAB3&#39;,
  idx_name=&gt;&#39;PART_TAB3X&#39;,
  force_opt=&gt;TRUE); 
</pre>
<p id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1000916">Viewing Index Errors <a id="d5330e7554" class="indexterm-anchor"></a><a id="d5330e7558" class="indexterm-anchor"></a><a id="d5330e7562" class="indexterm-anchor"></a><a id="d5330e7566" class="indexterm-anchor"></a></p>
<p>After a <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> or <code class="codeph">ALTER</code> <code class="codeph">INDEX</code> operation, you can view index errors with Oracle Text views. To view errors on your indexes, query the <a href="aviews.htm#GUID-49A2323B-71C6-49B0-85FA-046552DDBDE6">CTX_USER_INDEX_ERRORS</a> view. To view errors on all indexes as <code class="codeph">CTXSYS</code>, query the <a href="aviews.htm#GUID-184A0B18-395F-420B-9588-DAB35241D24C">CTX_INDEX_ERRORS</a> view.</p>
<p>For example, to view the most recent errors on your indexes, enter the following statement:</p>
<pre dir="ltr">SELECT err_timestamp, err_text FROM ctx_user_index_errors
ORDER BY err_timestamp DESC;
</pre>
<p>Deleting Index Errors<a id="d5330e7603" class="indexterm-anchor"></a></p>
<p>To clear the index error view, enter the following statement:</p>
<pre dir="ltr">DELETE FROM ctx_user_index_errors;
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998134">
<p class="subhead2">Syntax for CTXCAT Index Type</p>
<p>Combines an index on a text column and one or more other columns. Query this index with the <code class="codeph">CATSEARCH</code> operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement. This type of index is optimized for mixed queries. This index is transactional, automatically updating itself with DML to the base table.</p>
<pre dir="ltr">CREATE INDEX [<span class="variable">schema</span>.]<span class="variable">index</span> on [<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">column</span>) INDEXTYPE IS ctxsys.ctxcat 
[PARAMETERS(&#39;[index set <span class="italic">index_set</span>]
[lexer <span class="variable">lexer_pref</span>]
[storage <span class="variable">storage_pref</span>] 
[stoplist <span class="variable">stoplist</span>] 
[section group <span class="italic">sectiongroup_pref</span>]
[wordlist <span class="variable">wordlist_pref</span>] 
[memory <span class="variable">memsize</span>]&#39;);
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3736"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-95508F9A-83BD-4BFF-B7E7-0035D474BB2F"><!-- --></a>[<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">column</span>)</dt>
<dd>
<p>Specifies the name of the table and column to index.</p>
<p><a id="d5330e7682" class="indexterm-anchor"></a>The column that you specify when you create a <code class="codeph">CTXCAT</code> index must be of type <code class="codeph">CHAR</code> or <code class="codeph">VARCHAR2</code>. No other types are supported for <code class="codeph">CTXCAT</code>.</p>
<p>Attempting to create an index on a Virtual Private Database (VPD) protected table will fail unless one of the following options is true:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p>The VPD policy is created such that it does not apply to <code class="codeph">INDEX</code> statement type, which is the default</p>
</li>
<li>
<p>The policy function returns a null predicate for the current user.</p>
</li>
<li>
<p>The user (index owner) is <code class="codeph">SYS</code>.</p>
</li>
<li>
<p>The user has the <code class="codeph">EXEMPT</code> <code class="codeph">ACCESS</code> <code class="codeph">POLICY</code> privilege.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Supported CTXCAT Preferences</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3737"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-A6A0971A-930A-4D12-A25A-B55E39DA75D7"><!-- --></a>index set <span class="italic">index_set</span></dt>
<dd>
<p>Specifies the index set preference to create the <code class="codeph">CTXCAT</code> index. Index set preferences name the columns that make up your subindexes. Any column that is named in an index set column list cannot have a <code class="codeph">NULL</code> value in any row of the base table, or else you get an error.</p>
<p>Always ensure that your columns have non-null values before and after indexing.</p>
<p>See <span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998241">Creating a CTXCAT Index</a>&#34;</span>.</p>
</dd>
</dl>
<p>Index Performance and Size Considerations</p>
<p>Although a <code class="codeph">CTXCAT</code> index offers query performance benefits, creating this type of index has its costs. The time that it takes Oracle Text to create a <code class="codeph">CTXCAT</code> index depends on the total size of the index.</p>
<p>The total size of a <code class="codeph">CTXCAT</code> index is directly related to:</p>
<ul style="list-style-type: disc;">
<li>
<p>Total text to be indexed</p>
</li>
<li>
<p>Number of component indexes in the index set</p>
</li>
<li>
<p>Number of columns in the base table that make up the component indexes</p>
</li>
</ul>
<p>Having many component indexes in your index set also degrades DML performance because more indexes must be updated.</p>
<p>Because of these added costs in creating a <code class="codeph">CTXCAT</code> index, you should carefully consider the query performance benefit that each component index gives your application before adding it to your index set.</p>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-021A4B9A-7813-43D2-A3B8-3E9335549A8F">
<p class="notep1">See Also:</p>
<p><a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for more information about creating <code class="codeph">CTXCAT</code> indexes and the benefits</p>
</div>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3738"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-5134A381-E51E-4AAB-A33D-43E6B806BC0F"><!-- --></a>Other CTXCAT Preferences</dt>
<dd>
<p>When you create an index of type <code class="codeph">CTXCAT</code>, you can use the supported index preferences listed in <a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJEJBHAG" title="This table shows supported CTXCAT Index Preferences.">Table 1-6</a> in the <code class="codeph">parameters</code> string.</p>
</dd>
</dl>
<div class="tblformal" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__BJEJBHAG">
<p class="titleintable">Table 1-6 Supported CTXCAT Index Preferences</p>
<table class="cellalignment3028" title="Supported CTXCAT Index Preferences" summary="This table shows supported CTXCAT Index Preferences.">
<thead>
<tr class="cellalignment3022">
<th class="cellalignment3107" id="d5330e7825">Preference Class</th>
<th class="cellalignment3108" id="d5330e7828">Supported Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3022">
<td class="cellalignment3109" id="d5330e7833" headers="d5330e7825">
<p>Datastore</p>
</td>
<td class="cellalignment3110" headers="d5330e7833 d5330e7828">
<p>This preference class is not supported for <code class="codeph">CTXCAT</code>.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3109" id="d5330e7843" headers="d5330e7825">
<p>Filter</p>
</td>
<td class="cellalignment3110" headers="d5330e7843 d5330e7828">
<p>This preference class is not supported for <code class="codeph">CTXCAT</code>.</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3109" id="d5330e7853" headers="d5330e7825">
<p>Lexer</p>
</td>
<td class="cellalignment3110" headers="d5330e7853 d5330e7828">
<p><a href="cdatadic.htm#GUID-118602A6-7B96-4D66-9BAD-4747186894BE">BASIC_LEXER</a> (<code class="codeph">index_themes</code> attribute not supported)</p>
<p><a href="cdatadic.htm#GUID-BBE21367-EB6F-4D07-9377-BFE9709E9C3C">CHINESE_LEXER</a></p>
<p><a href="cdatadic.htm#GUID-6F53E4EB-0663-4290-9560-59668DEBA039">CHINESE_VGRAM_LEXER</a></p>
<p><a href="cdatadic.htm#GUID-40AF0529-8D00-4826-888F-6B209D511B13">JAPANESE_LEXER</a></p>
<p><a href="cdatadic.htm#GUID-F27A8A4E-776A-488E-9587-C533313F47E4">JAPANESE_VGRAM_LEXER</a></p>
<p><a href="cdatadic.htm#GUID-05408DB5-8629-4B16-BA70-E13FDDE583BA">KOREAN_MORPH_LEXER</a></p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3109" id="d5330e7886" headers="d5330e7825">
<p>Wordlist</p>
</td>
<td class="cellalignment3110" headers="d5330e7886 d5330e7828">
<p><a href="cdatadic.htm#GUID-CD2DE39F-17F7-424E-8DB3-A16C7843965D">BASIC_WORDLIST</a></p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3109" id="d5330e7895" headers="d5330e7825">
<p>Storage</p>
</td>
<td class="cellalignment3110" headers="d5330e7895 d5330e7828">
<p><a href="cdatadic.htm#GUID-84CFF759-7AA2-4D64-BE72-6358873043BA">BASIC_STORAGE</a></p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3109" id="d5330e7904" headers="d5330e7825">
<p>Stoplist</p>
</td>
<td class="cellalignment3110" headers="d5330e7904 d5330e7828">
<p>Supports single language stoplists only (<code class="codeph">BASIC_STOPLIST</code> type).</p>
</td>
</tr>
<tr class="cellalignment3022">
<td class="cellalignment3109" id="d5330e7914" headers="d5330e7825">
<p>Section Group</p>
</td>
<td class="cellalignment3110" headers="d5330e7914 d5330e7828">
<p>Only Field Section is supported for <code class="codeph">CTXCAT</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Unsupported Preferences and Parameters</p>
<p>When you create a <code class="codeph">CTXCAT</code> index, you cannot specify datastore and filter preferences. For section group preferences, only the field section preference is supported. You also cannot specify language, format, or charset columns as with a <code class="codeph">CONTEXT</code> index.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I998241">
<p class="subhead2">Creating a CTXCAT Index</p>
<p>This section gives a brief example for creating a <code class="codeph">CTXCAT</code> index. For a more complete example, see <a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a>.</p>
<p>Consider a table called <code class="codeph">AUCTION</code> with the following schema:</p>
<pre dir="ltr">create table auction(item_id number,
title varchar2(100),
category_id number,
price number,
bid_close date);
</pre>
<p>Assume that queries on the table involve a mandatory text query clause and optional structured conditions on <code class="codeph">price</code>. Results must be sorted based on <code class="codeph">bid_close</code>. This means that an index to support good response time for the structured and sorting criteria is required.</p>
<p>You can create a catalog index to support the different types of structured queries a user might enter. For structured queries, a <code class="codeph">CTXCAT</code> index improves query performance over a context index.</p>
<p>To create the indexes, first, create the index set preference, next, optionally, add the storage preference, and, finally, add the required indexes to it:</p>
<pre dir="ltr">begin
ctx_ddl.create_index_set(&#39;auction_iset&#39;);
ctx_ddl.add_index(&#39;auction_iset&#39;,&#39;bid_close&#39;);
ctx_ddl.add_index(&#39;auction_iset&#39;,&#39;price, bid_close&#39;);
end;
</pre>
<p>Optionally, create the storage preference:</p>
<pre dir="ltr">begin
 ctx_ddl.create_preference(&#39;auction_st_pref&#39;, &#39;BASIC_STORAGE&#39;);
 ctx_ddl.set_attribute(&#39;auction_st_pref&#39;, &#39;I_TABLE_CLAUSE&#39;,
                       &#39;tablespace TEXT storage (initial 5M)&#39;);
 ctx_ddl.set_attribute(&#39;auction_st_pref&#39;, &#39;I_ROWID_INDEX_CLAUSE&#39;,
                        &#39;tablespace TEXT storage (initial 5M)&#39;);
 ctx_ddl.set_attribute(&#39;auction_st_pref&#39;, &#39;I_INDEX_CLAUSE&#39;,
                        &#39;tablespace TEXT storage (initial 5M) compress 2&#39;);
end;
/ 
</pre>
<p>Then, create the <code class="codeph">CTXCAT</code> index with the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> statement as follows:</p>
<pre dir="ltr">create index auction_titlex on AUCTION(title) indextype is CTXSYS.CTXCAT
parameters (&#39;index set auction_iset storage auction_st_pref&#39;);
</pre>
<p>Querying a CTXCAT Index</p>
<p>To query the title column for the word <span class="italic">pokemon</span>, enter regular and mixed queries as follows:</p>
<pre dir="ltr">select * from AUCTION where CATSEARCH(title, &#39;pokemon&#39;,NULL)&gt; 0;
select * from AUCTION where CATSEARCH(title, &#39;pokemon&#39;, &#39;price &lt; 50 order by
bid_close desc&#39;)&gt; 0;
</pre>
<div class="infoboxnotealso" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-B58D9277-FF39-40BB-AF84-44F057283730">
<p class="notep1">See Also:</p>
<p><a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for a complete <code class="codeph">CTXCAT</code> example</p>
</div>
</div>
<!-- class="section" -->
<div class="section" id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1002072">
<p class="subhead2">Syntax for CTXRULE Index Type</p>
<p>The <code class="codeph">CTXRULE</code> type is an index on a column containing a set of queries. Query this index with the <code class="codeph">MATCHES</code> operator in the <code class="codeph">WHERE</code> clause of a <code class="codeph">SELECT</code> statement.</p>
<pre dir="ltr">CREATE INDEX [<span class="variable">schema</span>.]<span class="variable">index</span> on [<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="italic">rule_co</span><span class="variable">l</span>) INDEXTYPE IS 
ctxsys.ctxrule 
[PARAMETERS (&#39;[lexer lexer_pref] [storage storage_pref]
[section group section_pref] [wordlist wordlist_pref]
[classifier classifier_pref]&#39;);

[PARALLEL n];
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3739"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-69E1E2CA-D044-4CC6-92CC-44EE6001C7E1"><!-- --></a>[<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">column</span>)</dt>
<dd>
<p>Specifies the name of the table and rule column to index. The rules can be query compatible strings, query template strings, or binary Support Vector Machine rules.</p>
<p><a id="d5330e8062" class="indexterm-anchor"></a>The column you specify when you create a <code class="codeph">CTXRULE</code> index must be <code class="codeph">VARCHAR2</code>, <code class="codeph">CLOB or BLOB</code>. No other types are supported for the <code class="codeph">CTXRULE</code> type.</p>
<p>Attempting to create an index on a Virtual Private Database (VPD) protected table will fail unless one of the following is true:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p>The VPD policy does not have the <code class="codeph">INDEX</code> statement type turned on (which is the default).</p>
</li>
<li>
<p>The policy function returns a null predicate for the current user.</p>
</li>
<li>
<p>The user (index owner) is <code class="codeph">SYS</code>.</p>
</li>
<li>
<p>The user has the <code class="codeph">EXEMPT</code> <code class="codeph">ACCESS</code> <code class="codeph">POLICY</code> privilege.</p>
</li>
</ul>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3740"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-7BE9469D-831D-4557-9196-5D3F9DCEC1E3"><!-- --></a>lexer_pref</dt>
<dd>
<p>Specifies the lexer preference to be used for processing queries and later for the documents to be classified with the <code class="codeph">MATCHES</code> function.</p>
<p>With both classifiers <code class="codeph">SVN_CLASSFIER</code> and <code class="codeph">RULE_CLASSIFIER</code>, you can use the <code class="codeph">BASIC_LEXER</code>, <code class="codeph">CHINESE_LEXER</code>, <code class="codeph">JAPANESE_LEXER</code>, or <code class="codeph">KOREAN_MORPH_LEXER</code> lexer. (See <span class="q">&#34;<a href="cdatadic.htm#GUID-33498DE0-DC96-4D98-B2BC-26DC49147DC5">Classifier Types</a>&#34;</span> and <span class="q">&#34;<a href="cdatadic.htm#GUID-3C8A85E5-C346-4B18-874A-669D93F64DE8">Lexer Types</a>&#34;</span>.)</p>
<p>For processing queries, these lexers support the following operators: <code class="codeph">ABOUT</code>, <code class="codeph">STEM</code>, <code class="codeph">AND</code>, <code class="codeph">NEAR</code>, <code class="codeph">NOT</code>, <code class="codeph">OR</code>, and <code class="codeph">WITHIN</code>.</p>
<p>The thesaural operators (<code class="codeph">BT*</code>, <code class="codeph">NT*</code>, <code class="codeph">PT</code>, <code class="codeph">RT</code>, <code class="codeph">SYN</code>, <code class="codeph">TR</code>, <code class="codeph">TRSYS</code>, <code class="codeph">TT,</code> and so on) are supported. However, these operators are expanded using a snapshot of the thesaurus at index time, not when the <code class="codeph">MATCHES</code> function is entered. This means that if you change your thesaurus after you index, you must re-index your query set.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3741"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-9F2424E8-726A-4D58-9536-CC4DA59E0E0A"><!-- --></a>storage_pref</dt>
<dd>
<p>Specify the storage preference for the index on the queries.Use the storage preference to specify how the index tables are stored. See <span class="q">&#34;<a href="cdatadic.htm#GUID-C6DA9061-955A-403E-B8BB-961D31360DCB">Storage Types</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3742"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-1CE85778-D860-4542-9F05-ECAD6875FC0F"><!-- --></a>section group</dt>
<dd>
<p>Specify the section group. This parameter does not affect the queries. It applies to sections in the documents to be classified. The following section groups are supported for the <code class="codeph">CTXRULE</code> index type:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BASIC_SECTION_GROUP</code></p>
</li>
<li>
<p><code class="codeph">HTML_SECTION_GROUP</code></p>
</li>
<li>
<p><code class="codeph">XML_SECTION_GROUP</code></p>
</li>
<li>
<p><code class="codeph">AUTO_SECTION_GROUP</code></p>
</li>
</ul>
<p>See <span class="q">&#34;<a href="cdatadic.htm#GUID-CDF963D3-36D8-4055-AFB1-367F18A048AD">Section Group Types</a>&#34;</span>.</p>
<p><code class="codeph">CTXRULE</code> does not support special sections. It also does not support <code class="codeph">NDATA</code> sections.</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3743"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-145D28B7-1119-400A-9626-31DA33C5549C"><!-- --></a>wordlist_pref</dt>
<dd>
<p>Specifies the wordlist preferences. This is used to enable stemming operations on query terms. See <a href="cdatadic.htm#GUID-9CE95823-DF47-43E4-940A-9B1E8CB5E21F">Wordlist Type</a>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3744"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__GUID-717787A9-5622-4D93-A7E2-E64934795605"><!-- --></a>classifier_pref</dt>
<dd>
<p>Specifies the classifier preference. See <span class="q">&#34;<a href="cdatadic.htm#GUID-33498DE0-DC96-4D98-B2BC-26DC49147DC5">Classifier Types</a>&#34;</span>. You must use the same preference name you specify with <code class="codeph">CTX_CLS.TRAIN</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example for Creating a CTXRULE Index</p>
<p>See <a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for a complete example of using the <code class="codeph">CTXRULE</code> index type in a document routing application.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p>CTX_DDL.<a href="cddlpkg.htm#GUID-56C4580F-6A43-43F4-BB83-DFAEB72A8DC3">CREATE_PREFERENCE</a></p>
<p>CTX_DDL.<a href="cddlpkg.htm#GUID-3336B8E9-13FB-4997-A9AD-8D9A207B10C4">CREATE_STOPLIST</a></p>
<p>CTX_DDL.<a href="cddlpkg.htm#GUID-9B0E0A60-53DF-4B90-827A-8D1B8D313A16">CREATE_SECTION_GROUP</a></p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48">ALTER INDEX</a> &#34;</span></p>
<p><span class="q">&#34;<a href="csql.htm#GUID-40404FD8-528E-4121-93B8-20F4D9E0EB54">CATSEARCH</a> &#34;</span></p>
</div>
<!-- class="section" --></div>
</div>
<a id="CCREF0109"></a>
<div class="props_rev_3"><a id="GUID-9E117E79-F01E-4C34-88E3-17A2BB036389"></a>
<h2 id="CCREF-GUID-9E117E79-F01E-4C34-88E3-17A2BB036389" class="sect2"><span class="enumeration_section">1.6</span> DROP INDEX</h2>
<div>
<div class="section">
<div class="infobox-note" id="GUID-9E117E79-F01E-4C34-88E3-17A2BB036389__GUID-77CAC0F7-2FC7-464F-B33F-FC47B0243853">
<p class="notep1">Note:</p>
<p>This section describes the <code class="codeph">DROP</code> <code class="codeph">INDEX</code> statement as it pertains to dropping a Text domain index.</p>
<p>For a complete description of the <code class="codeph">DROP</code> <code class="codeph">INDEX</code> statement, see <a class="olink SQLRF" target="_blank" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Purpose</p>
<p>Use <code class="codeph">DROP</code> <code class="codeph">INDEX</code> to drop a specified Text index.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">DROP INDEX [<span class="variable">schema</span>.]<span class="variable">index [force</span>];
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3745"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-9E117E79-F01E-4C34-88E3-17A2BB036389__GUID-19436025-C16A-4CA6-9A47-83452B30FC52"><!-- --></a>[force]</dt>
<dd>
<p>Optionally forces the index to be dropped. Use the <code class="codeph">force</code> option when Oracle Text cannot determine the state of the index, such as when an indexing operation fails.</p>
<p>Oracle recommends against using this option by default. Use it only when a regular call to <code class="codeph">DROP</code> <code class="codeph">INDEX</code> fails.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example</p>
<p>The following example drops an index named <code class="codeph">doc_index</code> in the current user&#39;s database schema:</p>
<pre dir="ltr">DROP INDEX doc_index;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-47E60252-C731-46A8-B587-AE30C1634F48">ALTER INDEX</a> &#34;</span></p>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862">CREATE INDEX</a>&#34;</span></p>
</div>
<!-- class="section" --></div>
</div>
<a id="CCREF0106"></a>
<div class="props_rev_3"><a id="GUID-6A13B685-0AF6-46E6-8AAC-722905EE0763"></a>
<h2 id="CCREF-GUID-6A13B685-0AF6-46E6-8AAC-722905EE0763" class="sect2"><span class="enumeration_section">1.7</span> MATCHES</h2>
<div>
<div class="section">
<p><a id="d5330e8525" class="indexterm-anchor"></a><a id="d5330e8529" class="indexterm-anchor"></a><a id="d5330e8531" class="indexterm-anchor"></a>Use the <code class="codeph">MATCHES</code> operator to find all rows in a query table that match a given document. The document must be a plain text, HTML, or XML document.</p>
<p>The <code class="codeph">MATCHES</code> operator also supports database links. You can identify a remote table or materialized view by appending <code class="codeph">@dblink</code> to the end of its name. The <code class="codeph">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Querying of remote views is not supported.)</p>
<p>This operator requires a <code class="codeph">CTXRULE</code> index on your set of queries.</p>
<p>When the <a href="cdatadic.htm#GUID-28CC450D-2DDF-4444-8BFD-A730B59A19DD">SVM_CLASSIFIER</a> classifier type is used, <code class="codeph">MATCHES</code> returns a score in the range 0 to 100; a higher number indicates a greater confidence in the match. Use the <code class="codeph">label</code> parameter and <code class="codeph">MATCH_SCORE</code> to obtain this number. Then use the matching score to apply a category-specific threshold to a particular category.</p>
<p>If the <code class="codeph">SVM_CLASSIFIER</code> type is not used, then this operator returns either 100 (the document matches the criteria) or 0 (the document does not match).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Limitation</p>
<p>If the optimizer chooses to use the functional query invocation with a <code class="codeph">MATCHES</code> query, your query will fail.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">MATCHES(
</pre>
<pre dir="ltr">[schema.]column,
document VARCHAR2 or CLOB
[,label INTEGER])
</pre>
<pre dir="ltr">RETURN NUMBER;
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3746"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6A13B685-0AF6-46E6-8AAC-722905EE0763__GUID-FC6034A5-028D-4A9F-9832-D7E93912498D"><!-- --></a>column</dt>
<dd>
<p>Specifies the column containing the indexed query set.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3747"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6A13B685-0AF6-46E6-8AAC-722905EE0763__GUID-1EA78830-72A6-42FA-9370-66E55CDCEA0F"><!-- --></a>document</dt>
<dd>
<p>Specifies the document to be classified. The document can be plain text, HTML, or XML. Binary formats are not supported.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3748"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6A13B685-0AF6-46E6-8AAC-722905EE0763__GUID-4BC54A5F-0D16-4368-8EE5-7A0363CB3B15"><!-- --></a>label</dt>
<dd>
<p>Optionally specifies the label that identifies the score generated by the <code class="codeph">MATCHES</code> operator. Use this label with <a href="csql.htm#GUID-24B74948-E18F-4B71-8F74-032F933CF53A">MATCH_SCORE</a>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Matches Example</p>
<p>The following example creates a table <code class="codeph">querytable</code>, and populates it with classification names and associated rules. It then creates a <code class="codeph">CTXRULE</code> index.</p>
<p>The example enters the <code class="codeph">MATCHES</code> query with a document string to be classified. The <code class="codeph">SELECT</code> statement returns all rows (queries) that are satisfied by the document:</p>
<pre dir="ltr">create table querytable (classification varchar2(64), text varchar2(4000));
insert into querytable values (&#39;common names&#39;, &#39;smith OR jones OR brown&#39;);
insert into querytable values (&#39;countries&#39;, &#39;United States OR Great Britain OR
France&#39;);
insert into querytable values (&#39;Oracle DB&#39;, &#39;oracle NEAR database&#39;);

create index query_rule on querytable(text) indextype is ctxsys.ctxrule;

SELECT classification FROM querytable WHERE MATCHES(text, &#39;Smith is a common name
in the United States&#39;) &gt; 0;


CLASSIFICATION
----------------------------------------------------------------
common names
countries
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-24B74948-E18F-4B71-8F74-032F933CF53A">MATCH_SCORE</a>&#34;</span></p>
<p><span class="q">&#34;<a href="csql.htm#GUID-46981A92-A7F3-4431-AEDB-7E4F0C5FC862__I1002072">Syntax for CTXRULE Index Type</a>&#34;</span></p>
<p>CTX_CLS.<a href="cclspkg.htm#GUID-FCD1B865-2904-4E00-8A0D-33DC3ACA397F">TRAIN</a></p>
<p><a class="olink CCAPP0600" target="_blank" href="../CCAPP/GUID-D694A98B-3B18-48B2-B10E-FB884B436FAF.htm#CCAPP0600"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> contains extended examples of simple and supervised classification, which make use of the <code class="codeph">MATCHES</code> operator.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="CCREF0112"></a>
<div class="props_rev_3"><a id="GUID-24B74948-E18F-4B71-8F74-032F933CF53A"></a>
<h2 id="CCREF-GUID-24B74948-E18F-4B71-8F74-032F933CF53A" class="sect2"><span class="enumeration_section">1.8</span> MATCH_SCORE</h2>
<div>
<div class="section">
<p><a id="d5330e8718" class="indexterm-anchor"></a><a id="d5330e8722" class="indexterm-anchor"></a><a id="d5330e8724" class="indexterm-anchor"></a>Use the <code class="codeph">MATCH_SCORE</code> operator in a statement to return scores produced by a <code class="codeph">MATCHES</code> query.</p>
<p>The <code class="codeph">MATCH_SCORE</code> operator also supports database links. You can identify a remote table or materialized view by appending <code class="codeph">@dblink</code> to the end of its name. The <code class="codeph">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Querying of remote views is not supported.)</p>
<p>When the <code class="codeph">SVM_CLASSIFIER</code> classifier type is used, this operator returns a score in the range 0 to 100. Use the matching score to apply a category-specific threshold to a particular category.</p>
<p>If the <code class="codeph">SVM_CLASSIFIER</code> classifier is not used, then this operator returns either 100 (the document matches the criteria) or 0 (the document does not match).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">MATCH_SCORE(label NUMBER)
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3749"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-24B74948-E18F-4B71-8F74-032F933CF53A__GUID-96403916-1EDB-402A-8FD2-24F08AF7B917"><!-- --></a>label</dt>
<dd>
<p>Specifies a number to identify the score produced by the query. Use this number to identify the <code class="codeph">MATCHES</code> clause that returns this score.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example</p>
<p>To get the matching score, use:</p>
<pre dir="ltr">select cat_id, match_score(1) from training_result where matches(profile,
text,1)&gt;0;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-6A13B685-0AF6-46E6-8AAC-722905EE0763">MATCHES</a> &#34;</span></p>
</div>
<!-- class="section" --></div>
</div>
<a id="CCREF23747"></a><a id="CCREF23748"></a><a id="CCREF0107"></a>
<div class="props_rev_3"><a id="GUID-263BAC8E-EAA9-4DF2-9F46-354C34E8C3C0"></a>
<h2 id="CCREF-GUID-263BAC8E-EAA9-4DF2-9F46-354C34E8C3C0" class="sect2"><span class="enumeration_section">1.9</span> SCORE</h2>
<div>
<div class="section">
<p><a id="d5330e8842" class="indexterm-anchor"></a><a id="d5330e8846" class="indexterm-anchor"></a><a id="d5330e8848" class="indexterm-anchor"></a>Use the <code class="codeph">SCORE</code> operator in a <code class="codeph">SELECT</code> statement to return the score values produced by a <a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59">CONTAINS</a> query. The <code class="codeph">SCORE</code> operator can be used in a <code class="codeph">SELECT</code>, <code class="codeph">ORDER</code> <code class="codeph">BY</code>, or <code class="codeph">GROUP</code> <code class="codeph">BY</code> clause.</p>
<p>The <code class="codeph">SCORE</code> operator also supports database links. You can identify a remote table or materialized view by appending <code class="codeph">@dblink</code> to the end of its name. The <code class="codeph">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Querying of remote views is not supported.)</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">SCORE(label NUMBER)
</pre>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-3750"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-263BAC8E-EAA9-4DF2-9F46-354C34E8C3C0__GUID-8AAB277F-F4E8-4FC4-9053-A0D564773EAD"><!-- --></a>label</dt>
<dd>
<p>Specifies a number to identify the score produced by the query. Use this number to identify the <code class="codeph">CONTAINS</code> clause that returns this score.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Example</p>
<p>Single CONTAINS</p>
<p>When the <code class="codeph">SCORE</code> operator is called (for example, in a <code class="codeph">SELECT</code> clause), the <code class="codeph">CONTAINS</code> clause must reference the score label value as in the following example:</p>
<pre dir="ltr">SELECT SCORE(1), title from newsindex 
           WHERE CONTAINS(text, &#39;oracle&#39;, 1) &gt; 0 ORDER BY SCORE(1) DESC;
</pre>
<p>Multiple CONTAINS</p>
<p>Assume that a news database stores and indexes the title and body of news articles separately. The following query returns all the documents that include the words <span class="italic">Oracle</span> in their title and <span class="italic">java</span> in their body. The articles are sorted by the scores for the first <code class="codeph">CONTAINS</code> (<span class="italic">Oracle</span>) and then by the scores for the second <code class="codeph">CONTAINS</code> (<span class="italic">java</span>).</p>
<pre dir="ltr">SELECT title, body, SCORE(10), SCORE(20)
</pre>
<pre dir="ltr">FROM news
WHERE CONTAINS (news.title, &#39;Oracle&#39;, 10) &gt; 0 OR
</pre>
<pre dir="ltr">CONTAINS (news.body, &#39;java&#39;, 20) &gt; 0 
ORDER BY SCORE(10), SCORE(20);
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Related Topics</p>
<p><span class="q">&#34;<a href="csql.htm#GUID-827A6E7D-106E-4341-9398-2FF6ABB05E59">CONTAINS</a>&#34;</span></p>
<p><a href="ascore.htm#GUID-9715B872-7499-4A6B-8EA1-68B06CA2A686">The Oracle Text Scoring Algorithm</a></p>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3021">
<tr>
<td class="cellalignment3040">
<table class="cellalignment3026">
<tr>
<td class="cellalignment3025"><a href="release_changes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3025"><a href="cdatadic.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3042">
<table class="cellalignment3024">
<tr>
<td class="cellalignment3025"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3025"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3025"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3025"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3025"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3025"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>