<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1678"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/XSQL%20Pages%20Reference"></a><title>XSQL Pages Reference</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="XSQL action elements, ((lt))xsql((colon))action((gt)), ((lt))xsql((colon))delete-request((gt)), ((lt))xsql((colon))dml((gt)), ((lt))xsql((colon))if-param((gt)), ((lt))xsql((colon))include-owa((gt)), ((lt))xsql((colon))include-param((gt)), ((lt))xsql((colon))include-posted-xml((gt)), ((lt))xsql((colon))include-request-params((gt)), ((lt))xsql((colon))include-xml((gt)), ((lt))xsql((colon))include-xsql((gt)), ((lt))xsql((colon))insert-param((gt)), ((lt))xsql((colon))insert-request((gt)), ((lt))xsql((colon))query((gt)), ((lt))xsql((colon))ref-cursor-function((gt)), ((lt))xsql((colon))set-cookie((gt)), ((lt))xsql((colon))set-page-param((gt)), ((lt))xsql((colon))set-session-param((gt)), ((lt))xsql((colon))set-stylesheet-param((gt)), ((lt))xsql((colon))update-request((gt))"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_pt_ref.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_ref_standards.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-6CECB521-F70B-434A-AA73-EB2049F5E463"></a> <span id="PAGE" style="display:none;">43/50</span> <!-- End Header -->
<a id="ADXDK19953"></a><a id="ADXDK19952"></a>
<h1 id="ADXDK-GUID-6CECB521-F70B-434A-AA73-EB2049F5E463" class="sect1"><span class="enumeration_chapter">32</span> XSQL Pages Reference</h1>
<div>
<p>This chapter contains reference information for the XSQL pages framework. <span class="q">&#34;<a href="adx_ref_xsql.htm#GUID-A87F53F2-87BB-4422-90EF-4032D97C54BE">XSQL Configuration File Parameters</a>&#34;</span> describes settings in the XSQL configuration file. <a href="adx_ref_xsql.htm#GUID-6CECB521-F70B-434A-AA73-EB2049F5E463__BJEBEJFF" title="XSQL Action Element, Handler Class, and Description are the columns.">Table 32-1</a> lists the legal built-in actions for XSQL pages.</p>
<div class="tblformalwide" id="GUID-6CECB521-F70B-434A-AA73-EB2049F5E463__BJEBEJFF">
<p class="titleintable">Table 32-1 Built-In XSQL Elements and Action Handler Classes</p>
<table class="cellalignment655" title="Built-In XSQL Elements and Action Handler Classes " summary="XSQL Action Element, Handler Class, and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment678" id="d119025e98">XSQL Action Element</th>
<th class="cellalignment714" id="d119025e101">Handler Class in oracle.xml.xsql.actions</th>
<th class="cellalignment697" id="d119025e104">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e109" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-3C8AD80E-4436-49CA-B69B-39DAF22A5AE5">&lt;xsql:action&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e109 d119025e101">
<p><code>XSQLExtensionActionHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e109 d119025e104">
<p>Invoke a user-defined action handler, implemented in Java, for executing custom logic and including custom Extensible Markup Language (XML) data in your XSQL page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e122" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-87E28D28-C22E-4468-BA26-3EE5801C14B4">&lt;xsql:delete-request&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e122 d119025e101">
<p><code>XSQLDeleteRequestHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e122 d119025e104">
<p>Delete an existing row in the database based on the posted XML document supplied in the request.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e135" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-B44BC32C-50EF-480F-834E-062BD5AE4866">&lt;xsql:dml&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e135 d119025e101">
<p><code>XSQLDMLHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e135 d119025e104">
<p>Execute a structured query language (SQL) data manipulation language (DML) statement or a Procedural Language/Structured Query Language (PL/SQL) anonymous block.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e148" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613">&lt;xsql:if-param&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e148 d119025e101">
<p><code>XSQLIfParamHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e148 d119025e104">
<p>Conditionally include XML content or other XSQL actions.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e161" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7">&lt;xsql:include-owa&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e161 d119025e101">
<p><code>XSQLIncludeOWAHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e161 d119025e104">
<p>Include the results of a stored procedure that uses the Oracle Web Agent (OWA) packages in the database to generate XML.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e174" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-7E25FEC6-00BE-4CDB-8841-35B4FF82D4AC">&lt;xsql:include-param&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e174 d119025e101">
<p><code>XSQLGetParameterHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e174 d119025e104">
<p>Include a parameter and its value as an element in the XSQL page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e187" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-628FF565-DA0C-48A3-AEDC-908538129A1E">&lt;xsql:include-posted-xml&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e187 d119025e101">
<p><code>XSQLIncludePostedXMLHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e187 d119025e104">
<p>Include the XML document that has been posted in the request into the XSQL page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e200" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-3F9C660B-10C2-4258-B5BB-7E5CEC4ACB23">&lt;xsql:include-request-params&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e200 d119025e101">
<p><code>XSQLIncludeRequestHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e200 d119025e104">
<p>Include all request parameters as XML elements in the XSQL page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e213" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-AE499EA9-A8C5-4274-98C6-8499ADF7ED55">&lt;xsql:include-xml&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e213 d119025e101">
<p><code>XSQLIncludeXMLHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e213 d119025e104">
<p>Include arbitrary XML resources at any point in your page by relative or absolute URL.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e226" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-82926ED4-FC53-4580-9CD7-DFD52EF3A31E">&lt;xsql:include-xsql&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e226 d119025e101">
<p><code>XSQLIncludeXSQLHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e226 d119025e104">
<p>Include the results of one XSQL page at any point inside another.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e239" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-E21DCCD0-AE99-47FA-A5D5-DD064D6E74CB">&lt;xsql:insert-param&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e239 d119025e101">
<p><code>XSQLInsertParameterHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e239 d119025e104">
<p>Insert the XML document contained in the value of a single parameter.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e253" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-A45E6112-F904-4665-959B-1AF39413E2F7">&lt;xsql:insert-request&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e253 d119025e101">
<p><code>XSQLInsertRequestHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e253 d119025e104">
<p>Insert the XML document or HTML form posted in the request into a table or view.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e266" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e266 d119025e101">
<p><code>XSQLQueryHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e266 d119025e104">
<p>Execute an arbitrary SQL statement and include its result in canonical XML format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e279" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-0E5978EA-0322-45EC-8B22-EA0F3C41D9B8">&lt;xsql:ref-cursor-function&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e279 d119025e101">
<p><code>XSQLRefCursorFunctionHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e279 d119025e104">
<p>Include the canonical XML representation of the result set of a cursor returned by a PL/SQL stored function.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e292" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-AAD3692A-5322-4167-9F20-0BEB81413765">&lt;xsql:set-cookie&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e292 d119025e101">
<p><code>XSQLSetCookieHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e292 d119025e104">
<p>Set an HTTP Cookie.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e305" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F">&lt;xsql:set-page-param&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e305 d119025e101">
<p><code>XSQLSetPageParamHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e305 d119025e104">
<p>Set an HTTP-Session level parameter. Set a page-level (local) parameter that can be referred to in subsequent SQL statements in the page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e318" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-95912581-8779-4BF5-8B48-7BD49919AFE5">&lt;xsql:set-session-param&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e318 d119025e101">
<p><code>XSQLSetSessionParamHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e318 d119025e104">
<p>Set an HTTP-Session level parameter.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e331" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-69D0F80D-6C91-458B-B19A-41E2FD4F3400">&lt;xsql:set-stylesheet-param&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e331 d119025e101">
<p><code>XSQLStylesheetParameterHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e331 d119025e104">
<p>Set the value of a top-level Extensible Stylesheet Language Transformation (XSLT) parameter.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d119025e344" headers="d119025e98">
<pre dir="ltr"><a href="adx_ref_xsql.htm#GUID-5514ECD7-5E7E-49D9-B52B-C8374404EC5B">&lt;xsql:update-request&gt;</a>
</pre></td>
<td class="cellalignment716" headers="d119025e344 d119025e101">
<p><code>XSQLUpdateRequestHandler</code></p>
</td>
<td class="cellalignment700" headers="d119025e344 d119025e104">
<p>Update an existing row in the database based on the posted XML document supplied in the request.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<a id="ADXDK19955"></a><a id="ADXDK19954"></a>
<div class="props_rev_3"><a id="GUID-A87F53F2-87BB-4422-90EF-4032D97C54BE"></a>
<h2 id="ADXDK-GUID-A87F53F2-87BB-4422-90EF-4032D97C54BE" class="sect2"><span class="enumeration_section">32.1</span> XSQL Configuration File Parameters</h2>
<div>
<div class="section">
<p>You can use the XSQL configuration file to tune your XSQL pages environment. <a href="adx_ref_xsql.htm#GUID-A87F53F2-87BB-4422-90EF-4032D97C54BE__BJEFBDGB" title="Configuration Setting Name and Description are the columns.">Table 32-2</a> defines the legal parameters.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-A87F53F2-87BB-4422-90EF-4032D97C54BE__BJEFBDGB">
<p class="titleintable">Table 32-2 XSQL Configuration File Settings</p>
<table class="cellalignment655" title="XSQL Configuration File Settings " summary="Configuration Setting Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment775" id="d119025e451">Configuration Setting Name</th>
<th class="cellalignment727" id="d119025e454">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e459" headers="d119025e451">
<pre dir="ltr">XSQLConfig/servlet/output-buffer-size
</pre></td>
<td class="cellalignment729" headers="d119025e459 d119025e454">
<p>Sets the size in bytes of the buffered output stream. If the servlet engine already buffers I/O to the servlet output stream, you can set to <code>0</code> (the default) to avoid additional buffering. Any nonnegative integer is valid.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e469" headers="d119025e451">
<pre dir="ltr">XSQLConfig/servlet/suppress-mime-charset/media-type
</pre></td>
<td class="cellalignment729" headers="d119025e469 d119025e454">
<p>The XSQL servlet sets the HTTP <code>ContentType</code> header to indicate the Multipurpose Internet Mail Extensions (MIME) type of the resource returned to the request. By default, the servlet includes the optional character set data in the MIME type. For a particular MIME type, you can suppress the inclusion of the character set data by including a <code>&lt;media-type&gt;</code> element, with the desired MIME type as its contents. You can list any number of <code>&lt;media-type&gt;</code> elements. Valid value is any string.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e485" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/character-set-conversion/
default-charset 
</pre>
<p><span class="bold">Note</span>: Setting name is a single line. It is displayed on two lines due to space constraints.</p>
</td>
<td class="cellalignment729" headers="d119025e485 d119025e454">
<p>Performs character set conversion by default on the value of HTTP parameters to compensate for the default character set used by most servlet engines. The default base character set used for conversion is the Java <code>8859_1</code>, which corresponds to the Internet Assigned Numbers Authority (IANA) <code>ISO-8859-1</code> set. If your servlet engine uses a different character set as its base, then you can specify this value here.</p>
<p>To suppress character set conversion, specify the empty element <code>&lt;none/&gt;</code> as the content of the <code>&lt;default-charset&gt;</code> element instead of a character set name. This technique is useful if you are working with parameter values that are correctly representable with your servlet default character set. It eliminates overhead associated with performing the character set conversion.</p>
<p>Valid values are any Java character set name or <code>&lt;none/&gt;</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e515" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/reload-connections-on-error
</pre></td>
<td class="cellalignment729" headers="d119025e515 d119025e454">
<p>Connection definitions are cached when the XSQL pages processor is initialized. Set to <code>yes</code> (default) to cause the processor to reread the <code>XSQLConfig.xml</code> file to reload connection definitions if an attempt is made to request a connection name that is not in the cached connection list. The <code>yes</code> setting is useful for adding new <code>&lt;connection&gt;</code> definitions to the file while the servlet is running. Set to <code>no</code> to avoid reloading the connection definition file when a connection name is not found in the in-memory cache. Valid values are <code>yes</code> and <code>no</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e544" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/default-fetch-size
</pre></td>
<td class="cellalignment729" headers="d119025e544 d119025e454">
<p>Sets the default value of the row fetch size for retrieving information from SQL queries. It takes effect only when you use the Oracle JDBC driver; otherwise the setting is ignored. This technique reduces network round trips to the database from the servlet engine running in a different tier.</p>
<p>Default is <code>50</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e556" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/page-cache-size
</pre></td>
<td class="cellalignment729" headers="d119025e556 d119025e454">
<p>Sets the size of the cache for XSQL page templates and so determines the maximum number of XSQL pages that are cached. Least recently used pages move out of the cache if you go above this number. Default is <code>25</code>. Any nonzero positive integer is valid.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e566" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/stylesheet-cache-size
</pre></td>
<td class="cellalignment729" headers="d119025e566 d119025e454">
<p>Sets the size of the cache for XSLT style sheets and so determines the maximum number of XSQL pages that are cached. Least recently used pages move out of the cache if you go above this number. Default is <code>25</code>. Any nonzero positive integer is valid.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e576" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/stylesheet-pool/initial
</pre></td>
<td class="cellalignment729" headers="d119025e576 d119025e454">
<p>Each cached style sheet is a pool of cached style sheet instances to improve throughput. Sets the initial number of style sheets to be allocated in each style sheet pool.</p>
<p>Default is <code>1</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e588" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/stylesheet-pool/increment
</pre></td>
<td class="cellalignment729" headers="d119025e588 d119025e454">
<p>Sets the number of style sheets allocated when the style sheet pool must grow due to increased load on the server.</p>
<p>Default is <code>1</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e600" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/stylesheet-pool/timeout-seconds
</pre></td>
<td class="cellalignment729" headers="d119025e600 d119025e454">
<p>Sets the number of seconds of inactivity before a style sheet instance in the pool is removed to free resources as the pool tries to shrink back to its initial size.</p>
<p>Default is <code>60</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e612" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/connection-pool/initial
</pre></td>
<td class="cellalignment729" headers="d119025e612 d119025e454">
<p>Controls the initial number of Java Database Connectivity (JDBC) connections allocated in each connection pool. The XSQL pages processor&#39;s default connection manager implements connection pooling to improve throughput.</p>
<p>Default is <code>2</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e625" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/connection-pool/increment
</pre></td>
<td class="cellalignment729" headers="d119025e625 d119025e454">
<p>Sets the number of connections allocated when the connection pool must grow due to increased load on the server.</p>
<p>Default is <code>1</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e637" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/connection-pool/timeout-seconds
</pre></td>
<td class="cellalignment729" headers="d119025e637 d119025e454">
<p>Sets the number of seconds of inactivity before a JDBC connection in the pool is removed to free resources as the pool tries to shrink back to its initial size.</p>
<p>Default is <code>60</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e649" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/connection-pool/dump-allowed
</pre></td>
<td class="cellalignment729" headers="d119025e649 d119025e454">
<p>Determines whether a diagnostic report of connection pool activity can be requested by passing the <code>dump-pool=y</code> parameter in the page request.</p>
<p>Default is <code>no</code>. Valid value is <code>yes</code> or <code>no</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e670" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/connection-manager/factory
</pre></td>
<td class="cellalignment729" headers="d119025e670 d119025e454">
<p>Specifies the fully qualified Java class name of the XSQL connection manager factory implementation. If not specified, default is <code>XSQLConnectionManagerFactoryImpl</code>.</p>
<p>Valid value is any class name that implements the <code>XSQLConnectionManagerFactory</code> interface.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e685" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/owa/fetch-style
</pre></td>
<td class="cellalignment729" headers="d119025e685 d119025e454">
<p>Sets the default OWA Page Buffer fetch style used by the <code>&lt;xsql:include-owa&gt;</code> action. Valid values are <code>CLOB</code> (default) or <code>TABLE</code>.</p>
<p>If set to <code>CLOB</code>, then the processor uses a temporary <code>CLOB</code> to retrieve the OWA page buffer. If set to <code>TABLE</code>, then the processor uses a more efficient approach that requires the Oracle Database user-defined type <code>XSQL_OWA_ARRAY</code>. Create this type with this data definition language (DDL) statement:</p>
<p><code>CREATE TYPE xsql_owa_array AS TABLE OF VARCHAR2(32767)</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e718" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/timing/page
</pre></td>
<td class="cellalignment729" headers="d119025e718 d119025e454">
<p>Determines whether the XSQL page processor adds an <code>xsql-timing</code> attribute to the document element of the page whose value reports the elapsed number of milliseconds required to process the page.</p>
<p>Valid values are <code>yes</code> or <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e736" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/timing/action
</pre></td>
<td class="cellalignment729" headers="d119025e736 d119025e454">
<p>Determines whether a the XSQL page processor adds comment to the page just before the action element whose contents reports the elapsed number of milliseconds required to process the action.</p>
<p>Valid values are <code>yes</code> or <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e751" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/logger/factory
</pre></td>
<td class="cellalignment729" headers="d119025e751 d119025e454">
<p>Specifies the fully qualified Java class name of a custom XSQL logger factory implementation. If not set, then no logger is used.</p>
<p>Valid value is any class name that implements the <code>XSQLLoggerFactory</code> interface.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e763" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/error-handler/class
</pre></td>
<td class="cellalignment729" headers="d119025e763 d119025e454">
<p>Specifies the fully qualified Java class name of a custom XSQL error handler. The specified handler is the default error handler implementation. If not set, then the default error handler is used.</p>
<p>Valid value is any class name that implements the <code>XSQLErrorHandler</code> interface.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e775" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/xml-parsing/preserve-whitespace
</pre></td>
<td class="cellalignment729" headers="d119025e775 d119025e454">
<p>Determines whether the XSQL pages processor preserves white space when parsing XSQL pages and XSLT style sheets.</p>
<p>Valid values are <code>true</code> (default) or <code>false</code>. Changing the default to false can slightly speed up processing of XSQL pages and style sheets because ignoring white space while parsing is faster than preserving it.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e790" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/security/stylesheet/defaults/
allow-client-style
</pre>
<p><span class="bold">Note</span>: Setting name is a single line. It is displayed on two lines due to space constraints.</p>
</td>
<td class="cellalignment729" headers="d119025e790 d119025e454">
<p>Prevents client overriding of the style sheet. Valid values are <code>yes</code> and <code>no</code>.</p>
<p>During development it is sometimes useful to use the XSQL style sheet override feature by providing a value for the <code>xml-stylesheet</code> parameter in the request. You can use the <code>xml-stylesheet=none</code> combination to temporarily disable the application of the style sheet for debugging purposes.</p>
<p>You can add the <code>allow-client-style=&#34;no&#34;</code> attribute to the document element of each XSQL page to prohibit client overriding of the style sheet in production applications. This setting can globally change the default behavior for <code>allow-client-style</code> in a single place.</p>
<p>This setting specifies only <span class="italic">default</span> behavior. If the attribute value is explicitly specified on the document element for a given XSQL page, its value takes precedence over this global default.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e829" headers="d119025e451">
<pre dir="ltr">XSQLConfig/processor/security/stylesheet/
trusted-hosts/host
</pre>
<p><span class="bold">Note</span>: Setting name is a single line. It is displayed on two lines due to space constraints.</p>
</td>
<td class="cellalignment729" headers="d119025e829 d119025e454">
<p>Specifies that any absolute URL to an XSLT style sheet must be from a trusted host whose name is listed in the configuration file. List any number of <code>&lt;host&gt;</code> elements inside the <code>&lt;trusted-hosts&gt;</code> element. The name of the local machine, <code>localhost</code>, and <code>127.0.0.1</code> are trusted hosts by default. Valid values are any host name or IP address.</p>
<p>The XSLT processor supports Java extension functions. Typically, XSQL pages refer to XSLT style sheets with relative URLs.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e854" headers="d119025e451">
<pre dir="ltr">XSQLConfig/http/proxyhost
</pre></td>
<td class="cellalignment729" headers="d119025e854 d119025e454">
<p>Sets the name of the HTTP proxy server to use when processing <code>URL</code>s with the HTTP protocol.</p>
<p>Valid value is any host name or Internet Protocol (IP) address.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e866" headers="d119025e451">
<pre dir="ltr">XSQLConfig/http/proxyport
</pre></td>
<td class="cellalignment729" headers="d119025e866 d119025e454">
<p>Sets the port number of the HTTP proxy server to use when processing URLs with the HTTP protocol.</p>
<p>Valid value is any nonzero integer.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e875" headers="d119025e451">
<pre dir="ltr">XSQLConfig/connectiondefs/connection
</pre></td>
<td class="cellalignment729" headers="d119025e875 d119025e454">
<p>Defines a short name and the JDBC details for a named connection used by the XSQL pages processor.</p>
<p>You may supply any number of <code>&lt;connection&gt;</code> element children of <code>&lt;connectiondefs&gt;</code>. Each connection definition must supply a <code>name</code> attribute and may supply children elements <code>&lt;username&gt;, &lt;password&gt;, &lt;driver&gt;, &lt;dburl&gt;</code>, and <code>&lt;autocommit&gt;</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e899" headers="d119025e451">
<pre dir="ltr">XSQLConfig/connectiondefs/connection/username
</pre></td>
<td class="cellalignment729" headers="d119025e899 d119025e454">
<p>Defines the user name for the current connection.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e906" headers="d119025e451">
<pre dir="ltr">XSQLConfig/connectiondefs/connection/password
</pre></td>
<td class="cellalignment729" headers="d119025e906 d119025e454">
<p>Defines the password for the current connection.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e913" headers="d119025e451">
<pre dir="ltr">XSQLConfig/connectiondefs/connection/dburl
</pre></td>
<td class="cellalignment729" headers="d119025e913 d119025e454">
<p>Defines the JDBC connection URL for the current connection.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e920" headers="d119025e451">
<pre dir="ltr">XSQLConfig/connectiondefs/connection/driver
</pre></td>
<td class="cellalignment729" headers="d119025e920 d119025e454">
<p>Specifies the fully qualified Java class name of the JDBC driver used for the current connection. If not specified, defaults to <code>oracle.jdbc.driver.OracleDriver</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e930" headers="d119025e451">
<pre dir="ltr">XSQLConfig/connectiondefs/connection/autocommit
</pre></td>
<td class="cellalignment729" headers="d119025e930 d119025e454">
<p>Explicitly sets the Auto Commit flag for the current connection. If not specified, the connection uses the JDBC driver default setting for Auto Commit.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e937" headers="d119025e451">
<pre dir="ltr">XSQLConfig/serializerdefs/serializer
</pre></td>
<td class="cellalignment729" headers="d119025e937 d119025e454">
<p>Defines a named custom serializer implementation. You can supply any number of <code>&lt;serializer&gt;</code> element children of <code>&lt;serializerdefs&gt;</code>. Each must specify both a <code>&lt;name&gt;</code> and a <code>&lt;class&gt;</code> child element.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e956" headers="d119025e451">
<pre dir="ltr">XSQLConfig/serializerdefs/serializer/name
</pre></td>
<td class="cellalignment729" headers="d119025e956 d119025e454">
<p>Defines the name of the current custom serializer definition.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment776" id="d119025e964" headers="d119025e451">
<pre dir="ltr">XSQLConfig/connectiondefs/connection/class
</pre></td>
<td class="cellalignment729" headers="d119025e964 d119025e454">
<p>Specifies the fully qualified Java class name of the current custom serializer. The class must implement the <code>XSQLDocumentSerializer</code> interface.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADXDK19956"></a>
<div class="props_rev_3"><a id="GUID-3C8AD80E-4436-49CA-B69B-39DAF22A5AE5"></a>
<h2 id="ADXDK-GUID-3C8AD80E-4436-49CA-B69B-39DAF22A5AE5" class="sect2"><span class="enumeration_section">32.2</span> &lt;xsql:action&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Invokes a user-defined action handler, implemented in Java, for executing custom logic and including custom XML data in a XSQL page. The Java class invoked with this action must implement the <code>oracle.xml.xsql.XSQLActionHandler</code> interface.</p>
<p>Use <code>&lt;xsql:action&gt;</code> to perform tasks that are not handled by the built-in action handlers. Custom actions can supply arbitrary XML content to the data page and perform arbitrary processing.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>The XSQL page processor processes the actions in a page in this way:</p>
<ol>
<li>
<p>Constructs an instance of the action handler class with the default constructor.</p>
</li>
<li>
<p>Initializes the handler instance with the action element object and the page processor context by invoking the method <code>init(Element actionElt, XSQLPageRequest context)</code>.</p>
</li>
<li>
<p>Invokes the method that allows the handler to handle the action <code>handleAction(Node result)</code>.</p>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <code>handler</code> is a single, required attribute named whose value is the fully qualified Java class name of the invoked action, <span class="italic"><code>yourpackage</code></span> is the Java package, and <span class="italic"><code>YourCustomHandler</code></span> is the Java class:</p>
<pre dir="ltr">&lt;xsql:action handler=&#34;<span class="italic">yourpackage.YourCustomHandler</span>&#34;/&gt;
</pre>
<p>Some action handlers expect text content or element content to appear inside the <code>&lt;xsql:action&gt;</code> element. In this case, use syntax such as:</p>
<pre dir="ltr">&lt;xsql:action handler=&#34;yourpackage.YourCustomHandler&#34;&gt;
  <span class="italic">Some_text</span>
&lt;/xsql:action&gt;
</pre>
<p>You can also use this syntax:</p>
<pre dir="ltr">&lt;xsql:action handler=&#34;yourpackage.YourCustomHandler&#34;&gt;
  &lt;some&gt;
    &lt;other/&gt;
    &lt;elements/&gt;
    &lt;here/&gt;
  &lt;/some&gt;   
&lt;/xsql:action&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p>The only required attribute is <code>handler</code>, but you can supply additional attributes to the handler. For example, if <code>yourpackage.YourCustomHandler</code> is expecting attributes named <code>param1</code> and <code>param2</code>, then use this syntax:</p>
<pre dir="ltr">&lt;xsql:action handler=&#34;yourpackage.YourCustomHandler&#34; param1=&#34;xxx&#34; param2=&#34;yyy&#34;&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example shows an XSQL page that invokes the <code>myactions.StockQuotes</code> Java class. It includes stock quotes from Google for any symbols passed in with the <code>symbol</code> parameter. If this parameter is not supplied, it supplies a default list.</p>
<p><span class="bold">Retrieving Stock Quotes</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;page xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:action handler=&#34;myactions.StockQuotes&#34;
               symbols=&#34;{@symbol}&#34;
               symbol=&#34;ORCL,SAP,MSFT,IBM&#34;/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19959"></a><a id="ADXDK19958"></a>
<div class="props_rev_3"><a id="GUID-87E28D28-C22E-4468-BA26-3EE5801C14B4"></a>
<h2 id="ADXDK-GUID-87E28D28-C22E-4468-BA26-3EE5801C14B4" class="sect2"><span class="enumeration_section">32.3</span> &lt;xsql:delete-request&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Accepts data posted from an XML document or HTML form and uses the <a href="glossary.htm#GUID-A564495D-ED7B-4F52-8FCA-944CF3BB274D"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> to delete the content of an XML document in canonical form from a target table or view.</p>
<p>By combining XSU with XSLT, you can transform XML into the canonical format expected by a given table. Afterward, you can use XSU to delete the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a <code>SELECT *</code> query against the table.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>table_name</code></span> is the name of a table and <span class="italic"><code>key</code></span> is a list of one or more columns to use as the unique key:</p>
<pre dir="ltr">&lt;xsql:delete-request table=&#34;<span class="italic">table_name</span>&#34; key-columns=&#34;<span class="italic">key</span>&#34;/&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-87E28D28-C22E-4468-BA26-3EE5801C14B4__BJEIHJFF" title="Attribute Name and Description are the columns.">Table 32-3</a> lists the optional attributes that you can use on the <code>&lt;xsql:delete-request&gt;</code> action. Required attributes are in bold</p>
<div class="tblformalwide" id="GUID-87E28D28-C22E-4468-BA26-3EE5801C14B4__BJEIHJFF">
<p class="titleintable">Table 32-3 Attributes for &lt;xsql:delete-request&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:delete-request&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment688" id="d119025e1300">Attribute Name</th>
<th class="cellalignment743" id="d119025e1303">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1308" headers="d119025e1300">
<pre dir="ltr"><span class="bold">table = &#34;</span><span class="italic"><span class="bold">string</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment744" headers="d119025e1308 d119025e1303">
<p>Name of the table, view, or synonym to use for deleting the XML data.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1321" headers="d119025e1300">
<pre dir="ltr"><span class="bold">key-columns = &#34;</span><span class="italic"><span class="bold">string string ...</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment744" headers="d119025e1321 d119025e1303">
<p>Space-delimited or comma-delimited list of one or more column names. The processor uses the values of these names in the posted XML document to identify the existing rows to delete.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1334" headers="d119025e1300">
<pre dir="ltr">transform = &#34;<span class="italic">URL</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e1334 d119025e1303">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be deleted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1344" headers="d119025e1300">
<pre dir="ltr">columns = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e1344 d119025e1303">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be deleted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1354" headers="d119025e1300">
<pre dir="ltr">commit = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e1354 d119025e1303">
<p>If set to <code>yes</code> (default), invokes <code>COMMIT</code> on the current connection after a successful execution of the deletion. Valid values are <code>yes</code> and <code>no</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1376" headers="d119025e1300">
<pre dir="ltr">commit-batch-size = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e1376 d119025e1303">
<p>If a positive, nonzero <code>integer</code> is specified, then after each batch of <code>integer</code> deleted records, the processor issues a <code>COMMIT</code>. The default batch size is zero (0) if not specified, which means that the processor does not commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1395" headers="d119025e1300">
<pre dir="ltr">date-format = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e1395 d119025e1303">
<p>Date format mask to use for interpreting date field values in XML being deleted. Valid values are those documented for the <code>java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e1408" headers="d119025e1300">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e1408 d119025e1303">
<p>Name of a page-private parameter that must be set to the string <code>Error</code> if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example specifies that the posted XML document is to be transformed with the <code>style.xsl</code> style sheet and then deleted from the <code>departments</code> table. The <code>departments.department_id</code> column is the primary key for the deletion.</p>
<p><span class="bold">Deleting Rows</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:delete-request table=&#34;departments&#34;       transform=&#34;style.xsl&#34; 
 connection=&#34;demo&#34; key-columns=&#34;department_id&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;/&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19962"></a><a id="ADXDK19961"></a>
<div class="props_rev_3"><a id="GUID-B44BC32C-50EF-480F-834E-062BD5AE4866"></a>
<h2 id="ADXDK-GUID-B44BC32C-50EF-480F-834E-062BD5AE4866" class="sect2"><span class="enumeration_section">32.4</span> &lt;xsql:dml&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Executes a DML or DDL statement or a PL/SQL block. Typically, you use this tag to include statements that would be executed or rolled back together.</p>
<p>This action requires a database connection provided as a <code>connection=&#34;connname&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>You cannot set parameter values by binding them in the position of <code>OUT</code> variables with <code>&lt;xsql:dml&gt;</code>. Only <code>IN</code> parameters are supported for binding.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for the action is as follows, where <span class="italic"><code>DML_DDL_or_PLSQL</code></span> is a placeholder for a legal DML statement, DDL statement, or PL/SQL block:</p>
<pre dir="ltr">&lt;xsql:dml&gt;
  <span class="italic">DML_DDL</span>_or_PLSQL
&lt;/xsql:dml&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-B44BC32C-50EF-480F-834E-062BD5AE4866__BJEGCACF" title="Attribute Name and Description are the columns.">Table 32-4</a> lists the optional attributes that you can use on the <code>&lt;xsql:dml&gt;</code> action.</p>
<div class="tblformalwide" id="GUID-B44BC32C-50EF-480F-834E-062BD5AE4866__BJEGCACF">
<p class="titleintable">Table 32-4 Attributes for &lt;xsql:dml&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:dml&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment674" id="d119025e1582">Attribute Name</th>
<th class="cellalignment755" id="d119025e1585">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e1590" headers="d119025e1582">
<pre dir="ltr">commit = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e1590 d119025e1585">
<p>If set to <code>yes</code>, invokes commit on the current connection after a successful execution of the DML statement. Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e1609" headers="d119025e1582">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e1609 d119025e1585">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e1619" headers="d119025e1582">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e1619 d119025e1585">
<p>Name of a page-private parameter that must be set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e1632" headers="d119025e1582">
<pre dir="ltr">error-statement = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e1632 d119025e1585">
<p>If set to <code>no</code>, suppresses the inclusion of the offending SQL statement in any <code>&lt;xsql-error&gt;</code> element generated. Valid values are <code>yes</code> (default) and <code>no</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example inserts the user name stored in the <code>webuser</code> cookie into a <code>request_log</code> table. Using bind variables guards against SQL injection attacks.</p>
<p><span class="bold">Inserting a User Name into a Table</span></p>
<pre dir="ltr"> &lt;xsql:dml connection=&#34;demo&#34; bind-params=&#34;webuser&#34;
           xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
   BEGIN
     INSERT INTO request_log(page,userid)
       VALUES( &#39;somepage.xsql&#39;, ? );
     COMMIT;
   END;
 &lt;/xsql:dml&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19965"></a><a id="ADXDK19964"></a>
<div class="props_rev_3"><a id="GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613"></a>
<h2 id="ADXDK-GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613" class="sect2"><span class="enumeration_section">32.5</span> &lt;xsql:if-param&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Enables you to include elements and actions nested inside if a specified condition is true. If the condition is true, then all nested XML content and actions are included in the page. If the condition is false, then none of the nested XML content or actions is included (and thus none of the nested actions is executed).</p>
<p>Specify which parameter value is evaluated by supplying the required <code>name</code> attribute. Simple parameter names and array-parameter names are supported.</p>
<div class="infobox-note" id="GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613__GUID-5D4ADCF4-A732-496D-BF5C-77D789B2A407">
<p class="notep1">Note:</p>
<p>If the parameter being tested does not exist, the test evaluates to false.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for the action is this, where <span class="italic"><code>some_name</code></span> is the value of the <code>name</code> attribute and <span class="italic"><code>test_condition</code></span> is exactly one of the conditions listed in <a href="adx_ref_xsql.htm#GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613__BJECCJJI" title="Attribute Name and Description are the columns.">Table 32-5</a>:</p>
<pre dir="ltr">&lt;xsql:if-param name=&#34;<span class="italic">some_name</span>&#34; <span class="italic">test_condition</span>&gt;
   <span class="italic">element_or_action</span>
&lt;/xsql:if-param&gt;
</pre>
<p>Any XML content or XSQL action elements can be nested inside an <code>&lt;xsql:if-param&gt;</code>, including other <code>&lt;xsql:if-param&gt;</code> elements.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p>In addition to the required <code>name</code> attribute, you must choose exactly one of the attributes listed in <a href="adx_ref_xsql.htm#GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613__BJECCJJI" title="Attribute Name and Description are the columns.">Table 32-5</a> to indicate how the parameter value (or values, in the array case) is tested. As with other XSQL actions, the attributes of the <code>&lt;xsql:if-param&gt;</code> action can contain lexical substitution parameter expressions such as <code>{@paramName}</code>.</p>
<div class="tblformalwide" id="GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613__BJECCJJI">
<p class="titleintable">Table 32-5 Attributes for &lt;xsql:if-param&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:if-param&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment697" id="d119025e1834">Attribute Name</th>
<th class="cellalignment777" id="d119025e1837">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment700" id="d119025e1842" headers="d119025e1834">
<pre dir="ltr">exists=&#34;<span class="italic">yes_or_no</span>&#34;
</pre></td>
<td class="cellalignment778" headers="d119025e1842 d119025e1837">
<p>If set to <code>exists=&#34;yes&#34;</code>, then this condition tests whether the named parameter exists and has a nonempty value. For an array-valued parameter, it tests whether the array-parameter exists and has at least one nonempty element.</p>
<p>If set to <code>exists=&#34;no&#34;</code>, then this condition evaluates to true if the parameter does not exist, of if it exists but has an empty value. For an array-valued parameter, it evaluates to true if the parameter does not exist, or if all of the array elements are empty.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment700" id="d119025e1860" headers="d119025e1834">
<pre dir="ltr">equals=&#34;<span class="italic">stringValue</span>&#34;
</pre></td>
<td class="cellalignment778" headers="d119025e1860 d119025e1837">
<p>This condition tests whether the named parameter equals the string value provided. By default the comparison is an exact string match. For a case-insensitive match, supply the additional <code>ignore-case=&#34;yes&#34;</code> attribute as well.</p>
<p>For an array-valued parameter, the condition tests whether any element in the array has the indicated value.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment700" id="d119025e1875" headers="d119025e1834">
<pre dir="ltr">not-equals=&#34;<span class="italic">stringValue</span>&#34;
</pre></td>
<td class="cellalignment778" headers="d119025e1875 d119025e1837">
<p>This condition tests whether the named parameter does not equal the string value provided. By default the comparison is an exact string match. For an array-valued parameter, the condition evaluates to true if none of the elements in the array has the indicated value.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment700" id="d119025e1885" headers="d119025e1834">
<pre dir="ltr">in-list = &#34;<span class="italic">comma-or-space-separated-list</span>&#34;
</pre></td>
<td class="cellalignment778" headers="d119025e1885 d119025e1837">
<p>This condition tests whether the named parameter matches any of the strings in the provided list. By default the comparison is an exact string match. For a case-insensitive match, supply the additional <code>ignore-case=&#34;yes&#34;</code> attribute as well.</p>
<p>The value of the <code>in-list</code> parameter is tokenized into an array with commas as the delimiter if commas are detected in the string. Otherwise, it uses a space as the delimiter. For an array-valued parameter, the condition tests whether any element in the array matches an element in the list.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment700" id="d119025e1903" headers="d119025e1834">
<pre dir="ltr">not-in-list = &#34;<span class="italic">comma-or-space-separated-list</span>&#34;
</pre></td>
<td class="cellalignment778" headers="d119025e1903 d119025e1837">
<p>This tests whether the named parameter does not match any of the strings in the provided list. By default the comparison is an exact string match. For a case-insensitive match, supply the additional <code>ignore-case=&#34;yes&#34;</code> attribute as well.</p>
<p>The value of the <code>not-in-list</code> parameter is tokenized into an array with commas as the delimiter if commas are in the string. Otherwise, the processor uses a space as the delimiter. For an array-valued parameter, the condition tests whether none of the elements in the array matches an element in the list.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>To test whether two different conditions are true, you can use nested <code>&lt;xsql:if-param&gt;</code> elements as shown in the following example.</p>
<p><span class="bold">Testing Conditions</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
&lt;!-- 
| Set page parameter &#39;some_param&#39; to value &#34;some_value&#34; if parameter &#39;a&#39;
| exists, and if parameter &#39;b&#39; has a value equal to &#34;X&#34;
+--&gt;
  &lt;xsql:if-param name=&#34;a&#34; exists=&#34;yes&#34;&gt;
    &lt;xsql:if-param name=&#34;b&#34; equals=&#34;X&#34;&gt;
      &lt;xsql:set-page-param name=&#34;some_param&#34; value=&#34;some_value&#34;/&gt;
    &lt;/xsql:if-param&gt;
  &lt;/xsql:if-param&gt;
  &lt;!-- ... --&gt; 
&lt;/page&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19968"></a><a id="ADXDK19967"></a>
<div class="props_rev_3"><a id="GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7"></a>
<h2 id="ADXDK-GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7" class="sect2"><span class="enumeration_section">32.6</span> &lt;xsql:include-owa&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Includes XML content generated by a database stored procedure. This action requires a database connection to be provided by supplying a <code>connection=&#34;connname&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>The stored procedure uses the standard OWA packages (<code>HTP</code> and <code>HTF</code>) to &#34;print&#34; the XML tags into the server-side page buffer. Afterwards, the XSQL pages processor fetches, parses, and includes the dynamically-produced XML content in the data page. The stored procedure must generate a well-formed XML page or an appropriate error is displayed.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>You can create a wrapper procedure that constructs XML elements with the HTP package. Your XSQL page can invoke the wrapper procedure by using <code>&lt;xsql:include-owa&gt;</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for the action is as follows, where <span class="italic"><code>PL/SQL_block</code></span> is a PL/SQL Block invoking a procedure that uses the HTP or HTF packages:</p>
<pre dir="ltr">&lt;xsql:include-owa&gt;
   <span class="italic">PL/SQL_block</span>
&lt;/xsql:include-owa&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7__BJEBBAII" title="Attribute Name and Description are the columns.">Table 32-6</a> lists the optional attributes supported by this action.</p>
<div class="tblformal" id="GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7__BJEBBAII">
<p class="titleintable">Table 32-6 Attributes for &lt;xsql:include-owa&gt;</p>
<table class="cellalignment650" title="Attributes for &lt;xsql:include-owa&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d119025e2074">Attribute Name</th>
<th class="cellalignment682" id="d119025e2077">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2082" headers="d119025e2074">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e2082 d119025e2077">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2092" headers="d119025e2074">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e2092 d119025e2077">
<p>Name of a page-private parameter that must be set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2105" headers="d119025e2074">
<pre dir="ltr">error-statement = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e2105 d119025e2077">
<p>If set to <code>no</code>, suppresses the inclusion of the offending SQL statement in any <code>&lt;xsql-error&gt;</code> element generated. Valid values are <code>yes</code> (default) and <code>no</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>Assume that you write a PL/SQL procedure called <code>UpdateStatus</code> that updates the status of a project. The procedure uses HTP to print an <code>&lt;UpdateStatus&gt;</code> datagram that contains the element <code>&lt;Success/&gt;</code> if no errors occur or one or more <code>&lt;Error&gt;</code> elements if errors occur.</p>
<p>The following example shows how you can invoke <code>UpdateStatus</code> from an XSQL page. The example uses SQL bind variable instead of lexical substitution to prevent the possibility of SQL injection attacks.</p>
<p><span class="bold">Including XML Content Created by a Stored Procedure</span></p>
<pre dir="ltr">&lt;xsql:include-owa connection=&#34;demo&#34; 
                  bind-params=&#34;project status&#34; 
                  xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt; 
  UpdateStatus( ?,? ); 
&lt;/xsql:include-owa&gt; 
</pre>
<p>Assume that a user enters an invalid status number for a project into a web-based form. The form posts the input parameters to an XSQL page as shown in the following example. The XSQL processor returns this datagram, which an XSLT style sheet could transform into an HTML error page:</p>
<pre dir="ltr">&lt;UpdateStatus&gt;
  &lt;Error Field=&#34;status&#34;&gt;Status must be 1, 2, 3, or 4&lt;/Error&gt;
&lt;/UpdateStatus&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19970"></a>
<div class="props_rev_3"><a id="GUID-7E25FEC6-00BE-4CDB-8841-35B4FF82D4AC"></a>
<h2 id="ADXDK-GUID-7E25FEC6-00BE-4CDB-8841-35B4FF82D4AC" class="sect2"><span class="enumeration_section">32.7</span> &lt;xsql:include-param&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Includes an XML representation of the name and value of a single parameter. This technique is useful if an associated XSLT style sheet must refer to parameter values with XPath expressions.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax of the action is as follows, where <span class="italic"><code>paramname</code></span> is the name of a parameter:</p>
<pre dir="ltr">&lt;xsql:include-param name=&#34;<span class="italic">paramname</span>&#34; /&gt;
</pre>
<p>The required <code>name</code> attribute supplies the name of the parameter whose value you want to include.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p>The <code>name</code> attribute is required; there are no optional attributes.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example uses XPATH to get the value of a parameter and represent it in XML.</p>
<p><span class="bold">Including an XML Representation of a Parameter Value</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34; 
                        xmlns:p=&#34;http://www.companysite.com/products&#34;&gt;
  &lt;xsql:set-page-param name=&#34;productid&#34;
                       xpath=&#34;/p:Products/productid&#34;/&gt;
  &lt;xsql:include-param name=&#34;productid&#34;/&gt;
&lt;/page&gt;
</pre>
<p>The XML fragment included in the datagram is:</p>
<pre dir="ltr">&lt;productid&gt;12345&lt;/productid&gt;
</pre>
<p>You can use an array parameter name to indicate that the value is to be treated as an array, as shown in this example:</p>
<pre dir="ltr">&lt;xsql:include-param name=&#34;productid[]&#34;/&gt;
</pre>
<p>The XML fragment reflects all of the array values, as shown in this example:</p>
<pre dir="ltr">&lt;productid&gt;
  &lt;value&gt;12345&lt;value&gt;
  &lt;value&gt;33455&lt;/value&gt;
  &lt;value&gt;88199&lt;/value&gt;
&lt;/productid&gt;
</pre>
<p>In this array-parameter name scenario, if <code>productid</code> is a single-valued parameter, then the fragment looks identical to a one-element array, as showd in this example:</p>
<pre dir="ltr">&lt;productid&gt;
  &lt;value&gt;12345&lt;value&gt;
&lt;/productid&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19972"></a>
<div class="sect2"><a id="GUID-628FF565-DA0C-48A3-AEDC-908538129A1E"></a>
<h2 id="ADXDK-GUID-628FF565-DA0C-48A3-AEDC-908538129A1E" class="sect2"><span class="enumeration_section">32.8</span> &lt;xsql:include-posted-xml&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Includes the posted XML document in the XSQL page. If the user posts an HTML form instead of an XML document, then the XML included is similar to that included by the <code>&lt;xsql:include-request-params&gt;</code> action.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax of the action is:</p>
<pre dir="ltr">&lt;xsql:include-posted-xml/&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p>None.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example shows a sample XSQL page that includes a posted XML document.</p>
<p><span class="bold">Including Posted XML</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsql&#34; href=&#34;somepage.xsql&#34;?&gt;
&lt;page connection=&#34;demo&#34; 
      xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:include-posted-xml/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19974"></a>
<div class="props_rev_3"><a id="GUID-3F9C660B-10C2-4258-B5BB-7E5CEC4ACB23"></a>
<h2 id="ADXDK-GUID-3F9C660B-10C2-4258-B5BB-7E5CEC4ACB23" class="sect2"><span class="enumeration_section">32.9</span> &lt;xsql:include-request-params&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Includes an XML representation of all parameters in the request in the datagram. The action element is replaced in the page at page-request time with a tree of XML elements that represents the parameters available to the request.</p>
<p>This technique is useful if an associated XSLT style sheet must refer to request parameter values with XPath expressions.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>When processing pages through the XSQL servlet, the XML included takes the form shown in the following example.</p>
<p><span class="bold">Including Request Parameters</span></p>
<pre dir="ltr">&lt;request&gt;
  &lt;parameters&gt;
    &lt;paramname&gt;value1&lt;/paramname&gt;
    &lt;ParamName2&gt;value2&lt;/ParamName2&gt;
     ...
  &lt;/parameters&gt;
  &lt;session&gt;
    &lt;sessVarName&gt;value1&lt;/sessVarName&gt;
     ...
  &lt;/session&gt;
  &lt;cookies&gt;
    &lt;cookieName&gt;value1&lt;/cookieName&gt;
     ...
  &lt;/cookies&gt;
&lt;/request&gt;
</pre>
<p>When you use the XSQL command-line utility or the <code>XSQLRequest</code> class, the XML takes the form shown in the following example.</p>
<p><span class="bold">Including Request Parameters</span></p>
<pre dir="ltr">&lt;request&gt;
  &lt;parameters&gt;
    &lt;paramname&gt;value1&lt;/paramname&gt;
    &lt;ParamName2&gt;value2&lt;/ParamName2&gt;
     ...
  &lt;/parameters&gt;
&lt;/request&gt;
</pre>
<p>The technique enables you to distinguish request parameters from session parameters or cookies because its value is a child element of <code>&lt;parameters&gt;</code>, <code>&lt;session&gt;</code>, or <code>&lt;cookies&gt;</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax of the action is:</p>
<pre dir="ltr">&lt;xsql:include-request-params/&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p>None.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example shows a sample XSQL page that includes all request parameters in the data page.</p>
<p><span class="bold">Including Request Parameters</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsql&#34; href=&#34;cookie_condition.xsl&#34;?&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:include-request-params/&gt;
&lt;/page&gt;
</pre>
<p>The <code>cookie_condition.xsl</code> style sheet chooses an output format based on whether the <code>siteuser</code> cookie is present. The following example shows a fragment of the style sheet.</p>
<p><span class="bold">Testing for Conditions in a Style Sheet</span></p>
<pre dir="ltr">&lt;xsl:choose&gt;
  &lt;xsl:when test=&#34;/page/request/cookies/siteuser&#34;&gt;
  ...
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
  ...
  &lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19980"></a><a id="ADXDK19979"></a>
<div class="props_rev_3"><a id="GUID-AE499EA9-A8C5-4274-98C6-8499ADF7ED55"></a>
<h2 id="ADXDK-GUID-AE499EA9-A8C5-4274-98C6-8499ADF7ED55" class="sect2"><span class="enumeration_section">32.10</span> &lt;xsql:include-xml&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Includes the XML contents of a local, remote, or database-driven XML resource in your datagram. You can specify the resource by URL or SQL statement. The server can deliver a resource that is a static XML file or dynamically created XML from a programmatic resource such as a servlet or common gateway interface (CGI) program.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>URL</code></span> is a relative URL or an absolute, HTTP-based URL to retrieve XML from another web site:</p>
<pre dir="ltr">&lt;xsql:include-xml href=&#34;URL&#34;/&gt;
</pre>
<p>Alternatively, you can use this syntax, where <span class="italic"><code>SQL_statement</code></span> is a SQL <code>SELECT</code> statement selecting a single row containing a single <code>CLOB</code> or <code>VARCHAR2</code> column value:</p>
<pre dir="ltr">&lt;xsql:include-xml&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:include-xml&gt;
</pre>
<p>The <code>href</code> attribute and SQL statement are mutually exclusive. If you provide one, then the other is not allowed.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-AE499EA9-A8C5-4274-98C6-8499ADF7ED55__BJEGIDAJ" title="Attribute Name and Description are the columns.">Table 32-7</a> lists the attributes supported by this action. Required attributes are in bold.</p>
<div class="tblformal" id="GUID-AE499EA9-A8C5-4274-98C6-8499ADF7ED55__BJEGIDAJ">
<p class="titleintable">Table 32-7 Attributes for &lt;xsql:include-xml&gt;</p>
<table class="cellalignment650" title="Attributes for &lt;xsql:include-xml&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d119025e2712">Attribute Name</th>
<th class="cellalignment682" id="d119025e2715">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2720" headers="d119025e2712">
<pre dir="ltr"><span class="bold">href=&#34;</span><span class="italic"><span class="bold">URL</span></span><span class="italic">&#34;</span>
</pre></td>
<td class="cellalignment684" headers="d119025e2720 d119025e2715">
<p>The absolute, relative, or parameterized URL of the XML resource to be included. The resource can be a static file dynamic source.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2733" headers="d119025e2712">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e2733 d119025e2715">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values for these names are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2743" headers="d119025e2712">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e2743 d119025e2715">
<p>Name of a page-private parameter that must be set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example includes an XML document retrieved by a database query. The XML content is a <code>CLOB</code>-valued member field of a user-defined type. The XML included must come from a <code>VARCHAR2</code> or <code>CLOB</code> column, not an <code>XMLType</code>.</p>
<p><span class="bold">Including an XML Document</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:include-xml bind-params=&#34;id&#34; connection=&#34;demo&#34;
                   xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT x.document.contents doc FROM xmldoc x
  WHERE x.docid = ?                        
&lt;/xsql:include-xml&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19983"></a><a id="ADXDK19982"></a>
<div class="props_rev_3"><a id="GUID-82926ED4-FC53-4580-9CD7-DFD52EF3A31E"></a>
<h2 id="ADXDK-GUID-82926ED4-FC53-4580-9CD7-DFD52EF3A31E" class="sect2"><span class="enumeration_section">32.11</span> &lt;xsql:include-xsql&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Includes the XML output of one XSQL page in another page. You can create a page that assembles the contents&shy;&mdash;optionally transformed&mdash;from other XSQL pages.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>If the aggregated page contains an <code>&lt;?xml-stylesheet?&gt;</code> processing instruction, then this style sheet is applied before the result is aggregated. Thus, you can use <code>&lt;xsql:include-xsql&gt;</code> to chain XSLT style sheets.</p>
<p>When one XSQL page aggregates another page by using <code>&lt;xsql:include-xsql&gt;</code>, all request-level parameters are visible to the nested page. For pages processed by the XSQL Servlet, the visible data includes session-level parameters and cookies. None of the page-private parameters of the aggregating page are visible to the nested page.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>XSQL_page</code></span> is a relative or absolute URL of an XSQL page to be included:</p>
<pre dir="ltr">&lt;xsql:include-xsql href=&#34;<span class="italic">XSQL_page</span>&#34;/&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-82926ED4-FC53-4580-9CD7-DFD52EF3A31E__BJEJCDJB" title="Attribute Name and Description are the columns.">Table 32-8</a> lists the attributes supported by this action. Required attributes are in bold; all others are optional.</p>
<div class="tblformal" id="GUID-82926ED4-FC53-4580-9CD7-DFD52EF3A31E__BJEJCDJB">
<p class="titleintable">Table 32-8 Attributes for &lt;xsql:include-xsql&gt;</p>
<table class="cellalignment650" title="Attributes for &lt;xsql:include-xsql&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d119025e2914">Attribute Name</th>
<th class="cellalignment682" id="d119025e2917">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2922" headers="d119025e2914">
<pre dir="ltr"><span class="bold">href=&#34;</span><span class="italic"><span class="bold">string</span></span><span class="italic">&#34;</span>
</pre></td>
<td class="cellalignment684" headers="d119025e2922 d119025e2917">
<p>Relative or absolute URL of XSQL page to be included.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2935" headers="d119025e2914">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e2935 d119025e2917">
<p>Name of a page-private parameter that must be set to the string <code>Error</code> if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e2948" headers="d119025e2914">
<pre dir="ltr">reparse = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e2948 d119025e2917">
<p>Indicates whether output of the included XSQL page must be reparsed before it is included. Valid values are <code>no</code> (default) and <code>yes</code>.</p>
<p>This attribute is useful if the included XSQL page selects the text of an XML document fragment that the including page wants to treat as elements.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example displays an XSQL page that lists discussion forum categories.</p>
<p><span class="bold">Categories.xsql</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:query connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT name
  FROM categories
  ORDER BY name
&lt;/xsql:query&gt;
</pre>
<p>The following example shows how you can include the results of the page in the previous Categories.xsql example into a page that lists the ten most recent topics in the current forum.</p>
<p><span class="bold">TopTenTopics.xsql</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;top-ten-topics connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;topics&gt;
    &lt;xsql:query max-rows=&#34;10&#34;&gt;
      SELECT subject 
      FROM topics 
      ORDER BY last_modified DESC
    &lt;/xsql:query&gt;
  &lt;/topics&gt;
  &lt;categories&gt;
    &lt;xsql:include-xsql href=&#34;Categories.xsql&#34;/&gt;
  &lt;/categories&gt;
&lt;/top-ten-topics&gt;
</pre>
<p>You can also use <code>&lt;xsql:include-xsql&gt;</code> to apply an XSLT style sheet to an included page. Assume that you write this XSLT style sheets:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>cats-as-html.xsl</code>, which renders the topics in HTML</p>
</li>
<li>
<p><code>cats-as-wml.xsl</code>, which renders the topics in WML</p>
</li>
</ul>
<p>One approach for catering to two different types of devices is to create different XSQL pages for each device. The following example shows an XSQL page that aggregates <code>Categories.xsql</code> and applies the <code>cats-as-html.xsl</code> style sheet.</p>
<p><span class="bold">HTMLCategories.xsql</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;!-- HTMLCategories.xsql --&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;cats-as-html.xsl&#34;?&gt;
&lt;xsql:include-xsql href=&#34;Categories.xsql&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;/&gt;
</pre>
<p>The following example shows an XSQL page that aggregates <code>Categories.xsql</code> and applies the <code>cats-as-html.xsl</code> style sheet for delivering to wireless devices.</p>
<p><span class="bold">WMLCategories.xsql</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;!-- WMLCategories.xsql --&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;cats-as-wml.xsl&#34;?&gt;
&lt;xsql:include-xsql href=&#34;Categories.xsql&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;/&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19989"></a><a id="ADXDK19988"></a>
<div class="props_rev_3"><a id="GUID-E21DCCD0-AE99-47FA-A5D5-DD064D6E74CB"></a>
<h2 id="ADXDK-GUID-E21DCCD0-AE99-47FA-A5D5-DD064D6E74CB" class="sect2"><span class="enumeration_section">32.12</span> &lt;xsql:insert-param&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Inserts the value of a parameter into a table or view. Use this tag when the client is posting a well-formed XML document as text in an HTTP parameter or individual HTML form field.</p>
<p>By combining the <a href="glossary.htm#GUID-A564495D-ED7B-4F52-8FCA-944CF3BB274D"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> with XSLT, you can transform XML into the canonical format expected by a given table. Afterward, you can use XSU to insert the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a <code>SELECT *</code> query against the table.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>table_or_view_name</code></span> is a relative or absolute URL of an XSQL page to be included:</p>
<pre dir="ltr">&lt;xsql:insert-param table=&#34;<span class="italic">table_or_view_name</span>&#34; name=&#34;<span class="italic">string</span>&#34;/&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-E21DCCD0-AE99-47FA-A5D5-DD064D6E74CB__BJECEGIE" title="Attribute Name and Description are the columns.">Table 32-9</a> lists the optional attributes that you can use on the <code>&lt;xsql:insert-param&gt;</code> action.</p>
<div class="tblformalwide" id="GUID-E21DCCD0-AE99-47FA-A5D5-DD064D6E74CB__BJECEGIE">
<p class="titleintable">Table 32-9 Attributes for &lt;xsql:insert-param&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:insert-param&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment688" id="d119025e3162">Attribute Name</th>
<th class="cellalignment743" id="d119025e3165">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3170" headers="d119025e3162">
<pre dir="ltr"><span class="bold">name=&#34;</span><span class="italic"><span class="bold">string</span></span><span class="italic">&#34;</span>
</pre></td>
<td class="cellalignment744" headers="d119025e3170 d119025e3165">
<p>Name of the parameter whose value contains XML to be inserted.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3183" headers="d119025e3162">
<pre dir="ltr"><span class="bold">table=&#34;</span><span class="italic"><span class="bold">string</span></span><span class="italic">&#34;</span>
</pre></td>
<td class="cellalignment744" headers="d119025e3183 d119025e3165">
<p>Name of the table, view, or synonym to use for inserting the XML data.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3196" headers="d119025e3162">
<pre dir="ltr">transform = &#34;<span class="italic">URL</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e3196 d119025e3165">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be inserted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3206" headers="d119025e3162">
<pre dir="ltr">columns = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e3206 d119025e3165">
<p>Space-delimited or comma-delimited list of one or more column names whose values are inserted. If supplied, then only these columns are inserted. If not supplied, all columns are inserted, with NULL values for columns whose values do not appear in the XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3216" headers="d119025e3162">
<pre dir="ltr">commit = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e3216 d119025e3165">
<p>If set to <code>yes</code>, invokes commit on the current connection after a successful execution of the insert. Valid values are <code>yes</code> (default) and <code>no</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3235" headers="d119025e3162">
<pre dir="ltr">commit-batch-size = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e3235 d119025e3165">
<p>If a positive, nonzero number <span class="italic"><code>integer</code></span> is specified, then after each batch of <span class="italic"><code>integer</code></span> inserted records, the XSQL processor issues a <code>COMMIT</code>. Default batch size is zero (<code>0</code>), which instructs the processor not to commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3259" headers="d119025e3162">
<pre dir="ltr">date-format = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e3259 d119025e3165">
<p>Date format mask to use for interpreting date field values in XML being inserted. Valid values are those for the <code>java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d119025e3272" headers="d119025e3162">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment744" headers="d119025e3272 d119025e3165">
<p>Name of a page-private parameter that must be set to <code>Error</code> if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example parses and transforms the contents of the HTML form parameter <code>xmlfield</code> for database insert.</p>
<p><span class="bold">Inserting XML Contained in an HTML Form Parameter</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:insert-param name=&#34;xmlfield&#34; table=&#34;image_metadata_table&#34;
transform=&#34;field-to-rowset.xsl&#34; connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;/&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19992"></a><a id="ADXDK19991"></a>
<div class="props_rev_3"><a id="GUID-A45E6112-F904-4665-959B-1AF39413E2F7"></a>
<h2 id="ADXDK-GUID-A45E6112-F904-4665-959B-1AF39413E2F7" class="sect2"><span class="enumeration_section">32.13</span> &lt;xsql:insert-request&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Accepts data posted from an XML document or HTML form and uses the <a href="glossary.htm#GUID-A564495D-ED7B-4F52-8FCA-944CF3BB274D"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> to insert the content of an XML document in canonical form into a target table or view.</p>
<p>If an HTML Form has been posted, then the posted XML document is materialized from HTTP request parameters, cookies, and session variables. The XML document has this form:</p>
<pre dir="ltr">&lt;request&gt;
&lt;parameters&gt;
  &lt;param1&gt;value1&lt;/param1&gt;
    :
  &lt;/paramN&gt;valueN&lt;/paramN&gt;
&lt;/parameters&gt;
  :
&lt;/request&gt;
</pre>
<p>By combining XSU with XSLT, you can transform XML into the canonical format expected by a given table. The XSQL engine uses XSU to insert the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a <code>SELECT *</code> query against the table.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>If you target a database view with an <code>INSERT</code>, then you can create <code>INSTEAD OF INSERT</code> triggers on the view to further automate the handling of the posted data. For example, an <code>INSTEAD OF INSERT</code> trigger on a view can use PL/SQL to check for the existence of a record and intelligently choose whether to do an <code>INSERT</code> or an <code>UPDATE</code> depending on the result.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is:</p>
<pre dir="ltr">&lt;xsql:insert-request table=&#34;<span class="italic">table</span>&#34;/&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-A45E6112-F904-4665-959B-1AF39413E2F7__BJEGEDCC" title="Attribute Name and Description are the columns.">Table 32-10</a> lists the optional attributes that you can use on the <code>&lt;xsql:insert-request&gt;</code> action.</p>
<div class="tblformalwide" id="GUID-A45E6112-F904-4665-959B-1AF39413E2F7__BJEGEDCC">
<p class="titleintable">Table 32-10 Attributes for &lt;xsql:insert-request&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:insert-request&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment674" id="d119025e3450">Attribute Name</th>
<th class="cellalignment755" id="d119025e3453">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e3458" headers="d119025e3450">
<pre dir="ltr"><span class="bold">table = &#34;</span><span class="italic"><span class="bold">string</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment756" headers="d119025e3458 d119025e3453">
<p>Name of the table, view, or synonym to use for inserting the XML data.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e3471" headers="d119025e3450">
<pre dir="ltr">transform = &#34;<span class="italic">URL</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e3471 d119025e3453">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be inserted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e3481" headers="d119025e3450">
<pre dir="ltr">columns = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e3481 d119025e3453">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be inserted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e3491" headers="d119025e3450">
<pre dir="ltr">commit = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e3491 d119025e3453">
<p>If set to <code>yes</code> (default), invokes <code>COMMIT</code> on the current connection after a successful execution of the insert. Valid values are <code>yes</code> and <code>no</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e3513" headers="d119025e3450">
<pre dir="ltr">commit-batch-size = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e3513 d119025e3453">
<p>If a positive, nonzero number <code>integer</code> is specified, then after each batch of integer inserted records, the processor issues a <code>COMMIT</code>. The default batch size is zero (0) if not specified, which means that the processor does not commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e3529" headers="d119025e3450">
<pre dir="ltr">date-format = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e3529 d119025e3453">
<p>Date format mask to use for interpreting date field values in XML being inserted. Valid values are those documented for the <code>java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e3542" headers="d119025e3450">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e3542 d119025e3453">
<p>Name of a page-private parameter that must be set to the string <code>Error</code> if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example parses and transforms the contents of the posted XML document or HTML Form for insert.</p>
<p><span class="bold">Inserting XML Received in a Parameter</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:insert-request 
  table=&#34;purchase_order&#34;
  transform=&#34;purchseorder-to-rowset.xsl&#34;
  connection=&#34;demo&#34; 
  xmlns:xsql=&#34;urn:oracle-xsql&#34;/&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19995"></a><a id="ADXDK19994"></a>
<div class="props_rev_3"><a id="GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563"></a>
<h2 id="ADXDK-GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563" class="sect2"><span class="enumeration_section">32.14</span> &lt;xsql:query&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Executes a SQL select statement and includes a canonical XML representation of the query result set in the data page. This action requires a database connection to be provided by supplying a <code>connection=&#34;</code><span class="italic"><code>connname</code></span><code>&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for the action is:</p>
<pre dir="ltr">&lt;xsql:query&gt;
   <span class="italic">SELECT_Statement</span>
&lt;/xsql:query&gt;
</pre>
<p>Any legal SQL select statement is permissible as a substitution for the <span class="italic"><code>SELECT_Statement</code></span> placeholder. If the select statement produces no rows, then you can provide a fallback query by including a nested <code>&lt;xsql:no-rows-query&gt;</code> element:</p>
<pre dir="ltr">&lt;xsql:query&gt;
  <span class="italic">SELECT_Statement</span>
  &lt;xsql:no-rows-query&gt;
    <span class="italic">Fallback_SELECT_Statement</span>
  &lt;/xsql:no-rows-query&gt;
&lt;/xsql:query&gt;
</pre>
<p>An <code>&lt;xsql:no-rows-query&gt;</code> element can <span class="italic">itself</span> contain nested <code>&lt;xsql:no-rows-query&gt;</code> elements to any level of nesting. The options available on the <code>&lt;xsql:no-rows-query&gt;</code> are identical to those legal on the <code>&lt;xsql:query&gt;</code> action element.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p>The optional attributes listed in <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563__BJEJEGCC" title="Attribute Name and Description are the columns.">Table 32-11</a> can be supplied to control various aspects of the data retrieved and the XML produced by the <code>&lt;xsql:query&gt;</code> action.</p>
<div class="tblformalwide" id="GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563__BJEJEGCC">
<p class="titleintable">Table 32-11 Attributes for &lt;xsql:query&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:query&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment739" id="d119025e3727">Attribute Name</th>
<th class="cellalignment740" id="d119025e3730">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3735" headers="d119025e3727">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3735 d119025e3730">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3745" headers="d119025e3727">
<pre dir="ltr">date-format = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3745 d119025e3730">
<p>Date format mask to use for formatted date column and attribute values in the XML that is queried. Valid values are the same values legal for the <code>java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3758" headers="d119025e3727">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3758 d119025e3730">
<p>Name of a page-private parameter that must be set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3771" headers="d119025e3727">
<pre dir="ltr">error-statement = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3771 d119025e3730">
<p>If set to <code>no</code>, suppresses the inclusion of the offending SQL statement in any <code>&lt;xsql-error&gt;</code> element generated. Valid values are <code>yes</code> (default) and <code>no</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3793" headers="d119025e3727">
<pre dir="ltr">fetch-size = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3793 d119025e3730">
<p>Number of records to fetch in each round trip to the database. If not set, the default value is used as specified by the <code>/XSQLConfig/processor/default-fetch-size</code> configuration setting in <code>XSQLConfig.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3809" headers="d119025e3727">
<pre dir="ltr">id-attribute = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3809 d119025e3730">
<p>XML attribute name to use instead of the default <code>num</code> for uniquely identifying each row in the result set. If the value is the empty string, then the row id attribute is suppressed.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3822" headers="d119025e3727">
<pre dir="ltr">id-attribute-column = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3822 d119025e3730">
<p>Case-sensitive name of the column in the result set whose value must be used in each row as the value of the row id attribute. The default is to use the row count as the value of the row id attribute.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3832" headers="d119025e3727">
<pre dir="ltr">include-schema = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3832 d119025e3730">
<p>If set to <code>yes</code>, includes an inline XML schema that describes the structure of the result set. Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3851" headers="d119025e3727">
<pre dir="ltr">max-rows = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3851 d119025e3730">
<p>Maximum number of rows to fetch after optionally skipping the number of rows set by the <code>skip-rows</code> attribute. If not specified, the default is to fetch all rows.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3864" headers="d119025e3727">
<pre dir="ltr">null-indicator = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3864 d119025e3730">
<p>Indicates whether to signal that a column&#39;s value is NULL by including the <code>NULL=&#34;Y&#34;</code> attribute on the element for the column. By default, columns with NULL values are omitted from the output. Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3883" headers="d119025e3727">
<pre dir="ltr">row-element = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3883 d119025e3730">
<p>XML element name to use instead of the default <code>&lt;ROW&gt;</code> for the <code>rowset</code> of query results. Set to the empty string to suppress generating a containing <code>&lt;ROW&gt;</code> element for each row in the result set.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3903" headers="d119025e3727">
<pre dir="ltr">rowset-element = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3903 d119025e3730">
<p>XML element name to use instead of the default <code>&lt;ROWSET&gt;</code> for the <code>rowset</code> of query results. Set to the empty string to suppress generating a containing <code>&lt;ROWSET&gt;</code> element.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3922" headers="d119025e3727">
<pre dir="ltr">skip-rows = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3922 d119025e3730">
<p>Number of rows to skip before fetching rows from the result set. Can be combined with <code>max-rows</code> for stateless paging through query results.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e3935" headers="d119025e3727">
<pre dir="ltr">tag-case = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e3935 d119025e3730">
<p>Valid values are <code>lower</code> and <code>upper</code>. If not specified, the default is to use the case of column names as specified in the query as corresponding XML element names.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example shows a simple XSQL page.</p>
<p><span class="bold">Hello World</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:query connection=&#34;xmlbook&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
   SELECT &#39;Hello, World!&#39; AS text     FROM DUAL&lt;/xsql:query&gt;
</pre>
<p>If you save the previous example as <code>hello.xsql</code> and execute it in a browser, the XSQL page processor returns this XML:</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
   &lt;ROW num=&#34;1&#34;&gt;
      &lt;TEXT&gt;Hello, World!&lt;/TEXT&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre>
<p>By default, the XML produced by a query reflects the column structure of its result set, with element names matching the names of the columns. Columns in the result with this nested structure produce nested elements that reflect this structure:</p>
<ul style="list-style-type: disc;">
<li>
<p>Object types</p>
</li>
<li>
<p>Collection types</p>
</li>
<li>
<p>CURSOR expressions</p>
</li>
</ul>
<p>The result of a typical query containing different types of columns and returning one row might look like the following example.</p>
<p><span class="bold">Nested Structure Example</span></p>
<pre dir="ltr">&lt;ROWSET&gt;
  &lt;ROW id=&#34;1&#34;&gt;
    &lt;VARCHARCOL&gt;Value&lt;/VARCHARCOL&gt;
    &lt;NUMBERCOL&gt;12345&lt;/NUMBERCOL&gt;
    &lt;DATECOL&gt;12/10/2001 10:13:22&lt;/DATECOL&gt;
    &lt;OBJECTCOL&gt;
       &lt;ATTR1&gt;Value&lt;/ATTR1&gt;
       &lt;ATTR2&gt;Value&lt;/ATTR2&gt;
    &lt;/OBJECTCOL&gt;
    &lt;COLLECTIONCOL&gt;
       &lt;COLLECTIONCOL_ITEM&gt;
         &lt;ATTR1&gt;Value&lt;/ATTR1&gt;
         &lt;ATTR2&gt;Value&lt;/ATTR2&gt;
       &lt;/COLLECTIONCOL_ITEM&gt;
       &lt;COLLECTIONCOL_ITEM&gt;
         &lt;ATTR1&gt;Value&lt;/ATTR1&gt;
         &lt;ATTR2&gt;Value&lt;/ATTR2&gt;
       &lt;/COLLECTIONCOL_ITEM&gt;
    &lt;/COLLECTIONCOL&gt;
    &lt;CURSORCOL&gt;
      &lt;CURSORCOL_ROW&gt;
        &lt;COL1&gt;Value1&lt;/COL1&gt;
        &lt;COL2&gt;Value2&lt;/COL2&gt;
      &lt;/CURSORCOR_ROW&gt;
    &lt;/CURSORCOL&gt;
  &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre>
<p>A <code>&lt;ROW&gt;</code> element repeats for each row in the result set. Your query can use standard SQL column aliasing to rename the columns in the result, which effectively renames the XML elements that are produced. Column aliasing is <span class="italic">required</span> for columns whose names otherwise are illegal names for an XML element.</p>
<p>For example, an <code>&lt;xsql:query&gt;</code> action as shown in the following example produces an error because the default column name for the calculated expression is an illegal XML element name.</p>
<p><span class="bold">Query with Error</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;xsql:query connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT TO_CHAR(hire_date,&#39;DD-MON&#39;) 
  FROM   employees
&lt;/xsql:query&gt;
</pre>
<p>You can fix the problem by using column aliasing as shown in the following example.</p>
<p><span class="bold">Query with Column Aliasing</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;xsql:query connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT TO_CHAR(hire_date,&#39;DD-MON&#39;) <span class="bold">AS hiredate</span> FROM   employees
&lt;/xsql:query&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK20000"></a>
<div class="props_rev_3"><a id="GUID-0E5978EA-0322-45EC-8B22-EA0F3C41D9B8"></a>
<h2 id="ADXDK-GUID-0E5978EA-0322-45EC-8B22-EA0F3C41D9B8" class="sect2"><span class="enumeration_section">32.15</span> &lt;xsql:ref-cursor-function&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Executes an arbitrary stored function returning a <code>REF</code> <code>CURSOR</code> and includes the query result set in canonical XML format. This action requires a database connection to be provided by supplying a <code>connection=&#34;</code><span class="italic"><code>connname</code></span><code>&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>Use this tag to invoke a stored procedure that determines what the query is and returns a cursor to the query. Used in this way, this tag also provides a weak level of security because it can hide the query from direct inspection.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax of the action is as follows, where <code>SCHEMA_NAME</code> represents an optional database schema name, <code>PACKAGE_NAME</code> represents an optional PL/SQL package name, and <code>FUNCTION_NAME</code> (required) specifies the name of a PL/SQL function:</p>
<pre dir="ltr">&lt;xsql:ref-cursor-function&gt;
  [SCHEMA_NAME.][PACKAGE_NAME.]FUNCTION_NAME(args);
&lt;/xsql:ref-cursor-function&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p>The optional attributes are the same as for the <code>&lt;xsql:query&gt;</code> action listed in <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563__BJEJEGCC" title="Attribute Name and Description are the columns.">Table 32-11</a> except that <code>fetch-size</code> is not available for <code>&lt;xsql:ref-cursor-function&gt;</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>By exploiting dynamic SQL in PL/SQL, a function can conditionally construct a dynamic query before a cursor handle to its result set is returned to the XSQL page processor. The return value of the function must be of type <code>REF</code> <code>CURSOR</code>. Consider the PL/SQL package shown in the following example.</p>
<p><span class="bold">DynCursor PL/SQL Package</span></p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE DynCursor IS
  TYPE ref_cursor IS REF CURSOR;
  FUNCTION DynamicQuery(id NUMBER) RETURN ref_cursor;
END;
CREATE OR REPLACE PACKAGE BODY DynCursor IS
  FUNCTION DynamicQuery(id NUMBER) RETURN ref_cursor IS
    the_cursor ref_cursor;
  BEGIN
    IF id = 1 THEN -- Conditionally return a dynamic query as a REF CURSOR
      OPEN the_cursor  -- An employees Query
       FOR &#39;SELECT employee_id, email FROM employees&#39;;
    ELSE
      OPEN the_cursor  -- A departments Query
        FOR &#39;SELECT department_name, department_id FROM departments&#39;; 
   END IF;
   RETURN the_cursor;
  END;
END;
</pre>
<p>An <code>&lt;xsql:ref-cursor-function&gt;</code> can include the dynamic results of the <code>REF</code> <code>CURSOR</code> returned by this function as shown in the following example.</p>
<p><span class="bold">Executing a REF CURSOR Function</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;xsql:ref-cursor-function connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt; 
  DynCursor.DynamicQuery(1);
&lt;/xsql:ref-cursor-function&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK20004"></a><a id="ADXDK20003"></a>
<div class="props_rev_3"><a id="GUID-AAD3692A-5322-4167-9F20-0BEB81413765"></a>
<h2 id="ADXDK-GUID-AAD3692A-5322-4167-9F20-0BEB81413765" class="sect2"><span class="enumeration_section">32.16</span> &lt;xsql:set-cookie&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sets an HTTP cookie to a value. By default, the value remains for the lifetime of the current browser, but you can change its lifetime by supplying the optional <code>max-age</code> attribute. The value to be assigned to the cookie can be supplied by a combination of static text and other parameter values, or from the result of a SQL <code>SELECT</code> statement.</p>
<p>Because this feature is specific to the HTTP protocol, this action is effective only if the XSQL page in which it appears is processed by the XSQL servlet. If this action is encountered in an XSQL page processed by the XSQL command-line utility or the <code>XSQLRequest</code> programmatic application programming interface (API), then it does nothing.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>If you use the SQL statement option, then a single row is fetched from the result set and the parameter is assigned the value of the first column. This use requires a database connection to be provided by supplying a <code>connection=&#34;connname&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>If you must set several cookie values based on the results of a single SQL statement, then do not use the <code>name</code> attribute. Instead, you can use the <code>names</code> attribute and supply a space-or-comma-delimited list of one or more cookie names.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>paramname</code></span> is the name of a parameter:</p>
<pre dir="ltr">&lt;xsql:set-cookie name=&#34;<span class="italic">paramname</span>&#34; value=&#34;<span class="italic">value</span>&#34;/&gt;
</pre>
<p>Alternatively, you can use this syntax, where <span class="italic"><code>SQL_statement</code></span> is a SQL <code>SELECT</code> statement and <span class="italic"><code>paramname</code></span> is the name of a parameter:</p>
<pre dir="ltr">&lt;xsql:set-cookie name=&#34;<span class="italic">paramname</span>&#34;&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-cookie&gt;
</pre>
<p>Either the <code>name</code> or the <code>names</code> attribute is required. The <code>value</code> attribute and the contained SQL statement are mutually exclusive. The number of columns in the select list must match the number of cookies being set or an error message results.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-AAD3692A-5322-4167-9F20-0BEB81413765__BJECHFIG" title="Attribute Name and Description are the columns.">Table 32-12</a> lists the attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div class="tblformal" id="GUID-AAD3692A-5322-4167-9F20-0BEB81413765__BJECHFIG">
<p class="titleintable">Table 32-12 Attributes for &lt;xsql:set-cookie&gt;</p>
<table class="cellalignment650" title="Attributes for &lt;xsql:set-cookie&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d119025e4369">Attribute Name</th>
<th class="cellalignment682" id="d119025e4372">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4377" headers="d119025e4369">
<pre dir="ltr"><span class="bold">name = &#34;</span><span class="italic"><span class="bold">string</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment684" headers="d119025e4377 d119025e4372">
<p>Name of the cookie whose value you want to set. You must use <code>name</code> or <code>names</code> but not both.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4396" headers="d119025e4369">
<pre dir="ltr"><span class="bold">names = &#34;</span><span class="italic"><span class="bold">string string ...</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment684" headers="d119025e4396 d119025e4372">
<p>Space-or-comma-delimited list of the cookie names whose values you want to set. You must use <code>name</code> or <code>names</code> but not both.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4415" headers="d119025e4369">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4415 d119025e4372">
<p>Ordered, space-delimited list of one or more XSQL parameter names. Values are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4425" headers="d119025e4369">
<pre dir="ltr">domain = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4425 d119025e4372">
<p>Domain in which cookie value is valid and readable. If <code>domain</code> is not set explicitly, it defaults to the fully qualified host name (for example, <code>server.biz.com</code>) of the document creating the cookie.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4441" headers="d119025e4369">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4441 d119025e4372">
<p>Name of a page-private parameter that is set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4454" headers="d119025e4369">
<pre dir="ltr">ignore-empty-value = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4454 d119025e4372">
<p>Indicates whether the cookie assignment is ignored if the value to which it is being assigned is an empty string.Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4470" headers="d119025e4369">
<pre dir="ltr">immediate = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4470 d119025e4372">
<p>Indicates whether the cookie assignment is immediately visible to the current page. Typically, cookies set in the current request are not visible until the browser sends them back to the server in a subsequent request.Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4486" headers="d119025e4369">
<pre dir="ltr">max-age = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4486 d119025e4372">
<p>Sets the maximum age of the cookie in <span class="italic">seconds</span>. Default is to set the cookie to expire when users current browser session terminates.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4499" headers="d119025e4369">
<pre dir="ltr">only-if-unset = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4499 d119025e4372">
<p>Indicates whether the cookie assignment occurs only when the cookie currently does not exists.Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4515" headers="d119025e4369">
<pre dir="ltr">path = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4515 d119025e4372">
<p>Relative URL path within domain in which cookie value is valid and readable. If path is not set explicitly, then it defaults to the URL path of the document creating the cookie.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4525" headers="d119025e4369">
<pre dir="ltr">value = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4525 d119025e4372">
<p>Sets the value to assign to the cookie.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example sets the HTTP cookie to the value of the parameter named <code>choice</code>.</p>
<p><span class="bold">Setting a Cookie to a Parameter Value</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:set-cookie name=&#34;last_selection&#34; 
                 value=&#34;{@choice}&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;/&gt;
</pre>
<p><a href="adx_ref_xsql.htm#GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613__BJECCJJI" title="Attribute Name and Description are the columns.">Table 32-5</a> sets the HTTP cookie to a value selected from the database.</p>
<p><span class="bold">Setting a Cookie to a Database-Generated Value</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:set-cookie name=&#34;shopping_cart_id&#34; bind-params=&#34;user&#34;
                 connection=&#34;demo&#34;       xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
 SELECT cartmgr.new_cart_id(UPPER(?)) FROM DUAL 
&lt;/xsql:set-cookie&gt;
</pre>
<p><a href="adx_ref_xsql.htm#GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7__BJEBBAII" title="Attribute Name and Description are the columns.">Table 32-6</a> sets three cookies based on the result of a single <code>SELECT</code> statement.</p>
<p><span class="bold">Setting Three Cookies</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:set-cookie names=&#34;paramname1 paramname2 paramname3&#34;
                 connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT expression_or_column1, expression_or_column2, expression_or_column3
  FROM table
  WHERE clause_identifying_a_single_row
&lt;/xsql:set-cookie&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK20009"></a><a id="ADXDK20008"></a>
<div class="props_rev_3"><a id="GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F"></a>
<h2 id="ADXDK-GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F" class="sect2"><span class="enumeration_section">32.17</span> &lt;xsql:set-page-param&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sets a page-private parameter to a value. The value can be supplied by a combination of static text and other parameter values, or alternatively from the result of a SQL <code>SELECT</code> statement.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>If you use the SQL statement option, then the program fetches a single row from the result set and assigns the parameter the value of the first column. This usage requires a database connection to be provided by supplying a <code>connection=&#34;connname&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>As an alternative to providing the <code>value</code> attribute, or a SQL statement, you can supply the <code>xpath</code> attribute to set the page-level parameter to the value of an XPath expression. The XPath expression is evaluated against an XML document or HTML form that has been posted to the XSQL pages processor. The value of the <code>xpath</code> attribute can be any valid XPath expression, optionally built using XSQL parameters as part of the attribute value like any other XSQL action element.</p>
<p>After a page-private parameter is set, subsequent action handlers can use this value as a lexical parameter, for example <code>{@po_id}</code>. Alternatively, action handlers can use this value as a SQL bind parameter value; they can reference its name in the <code>bind-params</code> attribute of any action handler that supports SQL operations.</p>
<p>If you must set multiple session parameter values based on the results of a single SQL statement, instead of using the <code>name</code> attribute, then you can use the <code>names</code> attribute. You can supply a list, delimited by spaces or commas, of one or more session parameter names.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>paramname</code></span> is the name of a parameter and <span class="italic"><code>value</code></span> is a value:</p>
<pre dir="ltr">&lt;xsql:set-page-param name=&#34;<span class="italic">paramname</span>&#34; value=&#34;<span class="italic">value</span>&#34;/&gt;
</pre>
<p>Alternatively, you can use this syntax, where <span class="italic"><code>SQL_statement</code></span> is a SQL <code>SELECT</code> statement and <span class="italic"><code>paramname</code></span> is the name of a parameter:</p>
<pre dir="ltr">&lt;xsql:set-page-param nname=&#34;<span class="italic">paramname</span>&#34;&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-page-param&gt;
</pre>
<p>Alternatively, you can use this syntax, where <span class="italic"><code>paramname</code></span> is the name of a parameter and where <span class="italic"><code>expression</code></span> is an XPath expression:</p>
<pre dir="ltr">&lt;xsql:set-page-param name=&#34;<span class="italic">paramname</span>&#34; xpath=&#34;<span class="italic">expression</span>&#34;/&gt;
</pre>
<p>Either the <code>name</code> or the <code>names</code> attribute is required. The <code>value</code> attribute and the contained SQL statement are mutually exclusive.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F__BJEICGIA" title="Attribute Name and Description are the columns.">Table 32-13</a> lists the attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div class="tblformal" id="GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F__BJEICGIA">
<p class="titleintable">Table 32-13 Attributes for &lt;xsql:set-page-param&gt;</p>
<table class="cellalignment650" title="Attributes for &lt;xsql:set-page-param&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d119025e4788">Attribute Name</th>
<th class="cellalignment682" id="d119025e4791">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4796" headers="d119025e4788">
<pre dir="ltr"><span class="bold">name = &#34;</span><span class="italic"><span class="bold">string</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment684" headers="d119025e4796 d119025e4791">
<p>Name of the page-private parameter whose value you want to set.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4809" headers="d119025e4788">
<pre dir="ltr"><span class="bold">names = &#34;</span><span class="italic"><span class="bold">string string ...</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment684" headers="d119025e4809 d119025e4791">
<p>Space-or-comma-delimited list of the page parameter names whose values you want to set. Either use the <code>name</code> or the <code>names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4828" headers="d119025e4788">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4828 d119025e4791">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4838" headers="d119025e4788">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4838 d119025e4791">
<p>Name of a page-private parameter that must be set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4851" headers="d119025e4788">
<pre dir="ltr">ignore-empty-value = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4851 d119025e4791">
<p>Indicates whether the page-level parameter assignment is ignored if the value to which it is being assigned is an empty string.Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4867" headers="d119025e4788">
<pre dir="ltr">quote-array-values = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4867 d119025e4791">
<p>If the parameter name is a simple-valued parameter name (for example, <code>myparam</code>) and if <code>treat-list-as-array=&#34;yes&#34;</code> is specified, then specifying <code>quote-array-values=&#34;yes&#34;</code> surrounds each string token with single quotation marks before separating the values with commas. Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4892" headers="d119025e4788">
<pre dir="ltr">treat-list-as-array = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4892 d119025e4791">
<p>Indicates whether the string-value assigned to the parameter is tokenized into an array of separate values before assignment. If any comma is present in the string, then the comma is used for separating tokens. Otherwise, spaces are used.Valid values are <code>yes</code> and <code>no</code>. The default value is <code>yes</code> if the parameter name being set is an array parameter name (for example, <code>myparam[]</code>), and default is <code>no</code> if the parameter name being set is a simple-valued parameter name like <code>myparam</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4921" headers="d119025e4788">
<pre dir="ltr">value = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4921 d119025e4791">
<p>Sets the value to assign to the parameter.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d119025e4931" headers="d119025e4788">
<pre dir="ltr">xpath = &#34;<span class="italic">XPathExpression</span>&#34;
</pre></td>
<td class="cellalignment684" headers="d119025e4931 d119025e4791">
<p>Sets the value of the parameter to an XPath expression evaluated against an XML document or HTML form that has been posted to the XSQL pages processor.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example sets multiple parameter values based on the results of a single SQL statement.</p>
<p><span class="bold">Setting Multiple Page Parameters</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;xsql:set-page-param names=&#34;paramname1 paramname2 paramname3&#34;
                     connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&gt;
  SELECT expression_or_column1, expression_or_column2, expression_or_column3
  FROM table
  WHERE clause_identifying_a_single_row
&lt;/xsql:set-page-param&gt;
</pre>
<p>The following example sets the page-level parameter to a value selected from database and then uses it as the value of an <code>xsql:query</code> attribute.</p>
<p><span class="bold">Setting a Parameter to a Database-Generated Value</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:set-page-param name=&#34;max-rows-pref&#34;&gt;
     SELECT max_rows
     FROM user_profile
     WHERE userid = {@userid}
  &lt;/xsql:set-page-param&gt;
  &lt;xsql:query max-rows=&#34;{@max-rows-pref}&#34;&gt;
    SELECT title, url
    FROM newsstory
    ORDER BY date_entered DESC
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK20013"></a><a id="ADXDK20012"></a>
<div class="props_rev_3"><a id="GUID-95912581-8779-4BF5-8B48-7BD49919AFE5"></a>
<h2 id="ADXDK-GUID-95912581-8779-4BF5-8B48-7BD49919AFE5" class="sect2"><span class="enumeration_section">32.18</span> &lt;xsql:set-session-param&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sets an HTTP session-level parameter to a value. The value of the session-level parameter remains for the lifetime HTTP session of the current browser user. The web server controls the session. The value can be supplied by a combination of static text and other parameter values, or from the result of a SQL <code>SELECT</code> statement.</p>
<p>Because this feature is specific to Java servlets, this action is effective only if the XSQL page in which it appears is processed by the XSQL servlet. If this action occurs in an XSQL page processed by the XSQL command-line utility or the <code>XSQLRequest</code> programmatic API, it does nothing.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>If you use the SQL statement option, the XSQL processor fetches a single row from the result set and assigns the parameter the value of the first column. This use requires a database connection to be provided by supplying a <code>connection=&#34;connname&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>To set several session parameter values based on the results of a single SQL statement, do not use the <code>name</code> attribute. Instead, use the <code>names</code> attribute and supply a space-or-comma-delimited list of one or more session parameter names.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>paramname</code></span> is the name of a parameter and where <span class="italic"><code>value</code></span> is a value:</p>
<pre dir="ltr">&lt;xsql:set-session-param name=&#34;<span class="italic">paramname</span>&#34; value=&#34;<span class="italic">value</span>&#34;/&gt;
</pre>
<p>Alternatively, you can use this syntax, where <span class="italic"><code>SQL_statement</code></span> is a SQL <code>SELECT</code> statement and <span class="italic"><code>paramname</code></span> is the name of a parameter:</p>
<pre dir="ltr">&lt;xsql:set-session-param name=&#34;<span class="italic">paramname</span>&#34;&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-session-param&gt;
</pre>
<p>Either the <code>name</code> or the <code>names</code> attribute is required. The <code>value</code> attribute and the contained SQL statement are mutually exclusive.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-95912581-8779-4BF5-8B48-7BD49919AFE5__BJEICHHB" title="Attribute Name and Description are the columns.">Table 32-14</a> lists the optional attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div class="tblformalwide" id="GUID-95912581-8779-4BF5-8B48-7BD49919AFE5__BJEICHHB">
<p class="titleintable">Table 32-14 Attributes for &lt;xsql:set-session-param&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:set-session-param&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment739" id="d119025e5145">Attribute Name</th>
<th class="cellalignment740" id="d119025e5148">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5153" headers="d119025e5145">
<pre dir="ltr"><span class="bold">name = &#34;</span><span class="italic"><span class="bold">string</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment742" headers="d119025e5153 d119025e5148">
<p>Name of the session-level variable whose value you want to set. Either use the <code>name</code> or the <code>names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5172" headers="d119025e5145">
<pre dir="ltr"><span class="bold">names = &#34;</span><span class="italic"><span class="bold">string string ...</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment742" headers="d119025e5172 d119025e5148">
<p>Space-or-comma-delimited list of the session parameter names whose values you want to set. Either use the <code>name</code> or the <code>names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5191" headers="d119025e5145">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5191 d119025e5148">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The parameter values are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5201" headers="d119025e5145">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5201 d119025e5148">
<p>Name of a page-private parameter that is set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5214" headers="d119025e5145">
<pre dir="ltr">ignore-empty-value = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5214 d119025e5148">
<p>Indicates whether the session-level parameter assignment is ignored if the value to which it is being assigned is an empty string. Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5230" headers="d119025e5145">
<pre dir="ltr">only-if-unset = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5230 d119025e5148">
<p>Indicates whether the session variable assignment occurs only when the session variable currently does not exists.Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5246" headers="d119025e5145">
<pre dir="ltr">quote-array-values = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5246 d119025e5148">
<p>If the parameter name is a simple-valued parameter name (for example, <code>myparam</code>) and if <code>treat-list-as-array=&#34;yes&#34;</code> is specified, then specifying <code>quote-array-values=&#34;yes&#34;</code> surrounds each string token with single quotation marks before separating the values with commas. Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5271" headers="d119025e5145">
<pre dir="ltr">treat-list-as-array = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5271 d119025e5148">
<p>Indicates whether the string-value assigned to the parameter is tokenized into an array of separate values before assignment. If any comma is present in the string, then the comma is used for separating tokens. Otherwise, spaces are used.Valid values are <code>yes</code> and <code>no</code>. The default value is <code>yes</code> if the parameter name being set is an array parameter name (for example, <code>myparam[]</code>), and default is <code>no</code> if the parameter name being set is a simple-valued parameter name like <code>myparam</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5300" headers="d119025e5145">
<pre dir="ltr">value = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5300 d119025e5148">
<p>Sets the value to assign to the parameter.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example sets multiple session parameter values based on the results of a single <code>SELECT</code> statement.</p>
<p><span class="bold">Setting Session Parameters</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:set-session-param names=&#34;paramname1 paramname2 paramname3&#34;&gt;
    SELECT expression_or_column1, expression_or_column2, expression_or_column3
    FROM   table
    WHERE  clause_identifying_a_single_row
  &lt;/xsql:set-session-param&gt;
  &lt;!-- ... --&gt;
&lt;/page&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK20016"></a><a id="ADXDK20015"></a>
<div class="props_rev_3"><a id="GUID-69D0F80D-6C91-458B-B19A-41E2FD4F3400"></a>
<h2 id="ADXDK-GUID-69D0F80D-6C91-458B-B19A-41E2FD4F3400" class="sect2"><span class="enumeration_section">32.19</span> &lt;xsql:set-stylesheet-param&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sets a top-level XSLT stylesheet parameter to a value. The value can be supplied by a combination of static text and other parameter values, or from the result of a SQL <code>SELECT</code> statement. The stylesheet parameter is set on any style sheet used during the processing of the current page.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
<p>If you use the SQL statement option, then a single row is fetched from the result set and the parameter is assigned the value of the first column. This use requires a database connection to be provided by supplying a <code>connection=&#34;connname&#34;</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>To set several stylesheet parameter values based on the results of a single SQL statement, do not use the <code>name</code> attribute. You can use the <code>names</code> attribute and supply a space-or-comma-delimited list of one or more stylesheet parameter names.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is as follows, where <span class="italic"><code>paramname</code></span> is the name of a parameter and where <span class="italic"><code>value</code></span> is a value:</p>
<pre dir="ltr">&lt;xsql:set-stylesheet-param name=&#34;<span class="italic">paramname</span>&#34; value=&#34;<span class="italic">value</span>&#34;/&gt;
</pre>
<p>Alternatively, you can use this syntax, where <span class="italic"><code>SQL_statement</code></span> is a SQL <code>SELECT</code> statement and <span class="italic"><code>paramname</code></span> is the name of a parameter:</p>
<pre dir="ltr">&lt;xsql:set-stylesheet-param name=&#34;paramname&#34;&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-stylesheet-param&gt;
</pre>
<p>Either the <code>name</code> or the <code>names</code> attribute is required. The <code>value</code> attribute and the contained SQL statement are mutually exclusive.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-69D0F80D-6C91-458B-B19A-41E2FD4F3400__BJEBAEEC" title="Attribute Name and Description are the columns.">Table 32-15</a> lists the optional attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div class="tblformalwide" id="GUID-69D0F80D-6C91-458B-B19A-41E2FD4F3400__BJEBAEEC">
<p class="titleintable">Table 32-15 Attributes for &lt;xsql:set-stylesheet-param&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:set-stylesheet-param&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment739" id="d119025e5498">Attribute Name</th>
<th class="cellalignment740" id="d119025e5501">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5506" headers="d119025e5498">
<pre dir="ltr"><span class="bold">name = &#34;</span><span class="italic"><span class="bold">string&#34;</span></span>
</pre></td>
<td class="cellalignment742" headers="d119025e5506 d119025e5501">
<p>Name of the top-level stylesheet parameter whose value you want to set.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5517" headers="d119025e5498">
<pre dir="ltr"><span class="bold">names = &#34;</span><span class="italic"><span class="bold">string string ...</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment742" headers="d119025e5517 d119025e5501">
<p>Space-or-comma-delimited list of the top-level stylesheet parameter names whose values you want to set. Use the <code>name</code> or the <code>names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5536" headers="d119025e5498">
<pre dir="ltr">bind-params = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5536 d119025e5501">
<p>Ordered, space-delimited list of one or more XSQL parameter names. Parameter values are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5546" headers="d119025e5498">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5546 d119025e5501">
<p>Name of a page-private parameter that must be set to the string &#39;<code>Error</code>&#39; if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5559" headers="d119025e5498">
<pre dir="ltr">ignore-empty-value = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5559 d119025e5501">
<p>Indicates whether the stylesheet parameter assignment is to be ignored if the value to which it is being assigned is an empty string. Valid values are <code>yes</code> and <code>no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d119025e5575" headers="d119025e5498">
<pre dir="ltr">value = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment742" headers="d119025e5575 d119025e5501">
<p>Sets the value to assign to the parameter.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example associates a style sheet and uses the <code>&lt;xsql:set-stylesheet-param&gt;</code> action element to assign the value of the XSQL page parameter named <code>p_table</code> to the XSLT top-level stylesheet parameter named <code>table</code>.</p>
<p><span class="bold">Setting a Stylesheet Parameter</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;style.xsl&#34;?&gt;
&lt;page connname=&#34;xmlbook&#34; connection=&#34;{@p_connname}&#34;&gt;
  &lt;xsql:query null-indicator=&#34;yes&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;![CDATA[
    SELECT *
    FROM {@p_table}
    WHERE rownum &lt; 2
  ]&gt;
  &lt;/xsql:query&gt;
  &lt;xsql:set-stylesheet-param name=&#34;table&#34; value=&#34;{@p_table}&#34;
                             xmlns:xsql=&#34;urn:oracle-xsql&#34; /&gt;
&lt;/page&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK20019"></a><a id="ADXDK20018"></a>
<div class="props_rev_3"><a id="GUID-5514ECD7-5E7E-49D9-B52B-C8374404EC5B"></a>
<h2 id="ADXDK-GUID-5514ECD7-5E7E-49D9-B52B-C8374404EC5B" class="sect2"><span class="enumeration_section">32.20</span> &lt;xsql:update-request&gt;</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Accepts data posted from an XML document or HTML form and uses the <a href="glossary.htm#GUID-A564495D-ED7B-4F52-8FCA-944CF3BB274D"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> to update the content of an XML document in canonical form from a target table or view.</p>
<p>By combining XSU with XSLT, you can transform XML into the canonical format expected by a given table. Afterward, you can use XSU to update the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a <code>SELECT *</code> query against the table.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<p>The syntax for this action is:</p>
<pre dir="ltr">&lt;xsql:update-request table=&#34;<span class="italic">table_name</span>&#34;/&gt;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Attributes</p>
<p><a href="adx_ref_xsql.htm#GUID-87E28D28-C22E-4468-BA26-3EE5801C14B4__BJEIHJFF" title="Attribute Name and Description are the columns.">Table 32-3</a> lists the attributes that you can use on the <code>&lt;xsql:update-request&gt;</code> action. Required attributes are in bold.</p>
<div class="tblformalwide" id="GUID-5514ECD7-5E7E-49D9-B52B-C8374404EC5B__GUID-6D9B8170-6991-482E-B172-90FC379834E6">
<p class="titleintable">Table 32-16 Attributes for &lt;xsql:update-request&gt;</p>
<table class="cellalignment655" title="Attributes for &lt;xsql:update-request&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment674" id="d119025e5732">Attribute Name</th>
<th class="cellalignment755" id="d119025e5735">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5740" headers="d119025e5732">
<pre dir="ltr"><span class="bold">table = &#34;</span><span class="italic"><span class="bold">string</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment756" headers="d119025e5740 d119025e5735">
<p>Name of the table, view, or synonym to use for updating the XML data.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5753" headers="d119025e5732">
<pre dir="ltr"><span class="bold">key_columns = &#34;</span><span class="italic"><span class="bold">string string ...</span></span><span class="bold">&#34;</span>
</pre></td>
<td class="cellalignment756" headers="d119025e5753 d119025e5735">
<p>Space-delimited or comma-delimited list of one or more column names. The processor uses the values of these names in the posted XML document to identify the existing rows to update.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5766" headers="d119025e5732">
<pre dir="ltr">transform = &#34;<span class="italic">URL</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e5766 d119025e5735">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be updated into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5776" headers="d119025e5732">
<pre dir="ltr">columns = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e5776 d119025e5735">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be updated into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5786" headers="d119025e5732">
<pre dir="ltr">commit = &#34;<span class="italic">boolean</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e5786 d119025e5735">
<p>If set to <code>yes</code> (default), invokes <code>COMMIT</code> on the current connection after a successful execution of the update. Valid values are <code>yes</code> and <code>no</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5808" headers="d119025e5732">
<pre dir="ltr">commit-batch-size = &#34;<span class="italic">integer</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e5808 d119025e5735">
<p>If a positive, nonzero <span class="italic"><code>integer</code></span> is specified, then after each batch of <span class="italic"><code>integer</code></span> updated records, the processor issues a <code>COMMIT</code>. The default batch size is zero (<code>0</code>) if not specified, which means that the processor does not commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5832" headers="d119025e5732">
<pre dir="ltr">date-format = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e5832 d119025e5735">
<p>Date format mask to use for interpreting date field values in XML being updated. Valid values are those for the <code>java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d119025e5845" headers="d119025e5732">
<pre dir="ltr">error-param = &#34;<span class="italic">string</span>&#34;
</pre></td>
<td class="cellalignment756" headers="d119025e5845 d119025e5735">
<p>Name of a page-private parameter that must be set to <code>Error</code> if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Examples</p>
<p>The following example parses and transforms the contents of the posted XML document or HTML Form for update.</p>
<p><span class="bold">Updating XML Received in a Parameter</span></p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:update-request table=&#34;purchase_order&#34;   key-columns=&#34;department_id&#34;
                     connection=&#34;demo&#34;        transform=&#34;doc-to-departments.xsl&#34;
 xmlns:xsql=&#34;urn:oracle-xsql/&gt;
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_pt_ref.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_ref_standards.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>