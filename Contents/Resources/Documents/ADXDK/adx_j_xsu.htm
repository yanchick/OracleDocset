<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1670"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XML%20SQL%20Utility"></a><title>Using the XML SQL Utility</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="XML SQL Utility (XSU), explained, XMLGEN (obsolete) See DBMS_XMLQUERY and DBMS_XMLSAVE, dependencies and installation, JDBC driver, connecting with OCI* JDBC driver, DBMS_XMLQuery(), DBMS_XMLQuery, generating XML, using DBMS_XMLQuery, PL/SQL, generating XML with DBMS_XMLQuery, getXMLClob, DBMS_XMLSave, storing XML in the database, DBMS_XMLSave(), getXML, getXML command line, using XSU command line, getXML, XSU, no rows exception, advanced techniques, exception handling (PL/SQL), context, creating one in XSU PL/SQL API, XSU usage techniques, mapping primer, mapping, primer, XSU, usage guidelines, Default SQL to XML Mapping, customizing generated XML, generated XML, customizing, select, with XSU, selects, insert, XSU, inserts, update, XSU, updates"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_diff.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_transx.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-4C9A3F2F-A2A7-4CBF-BCD4-FD667D559945"></a> <span id="PAGE" style="display:none;">21/50</span> <!-- End Header -->
<a id="ADXDK1007"></a><a id="ADXDK070"></a>
<h1 id="ADXDK-GUID-4C9A3F2F-A2A7-4CBF-BCD4-FD667D559945" class="sect1"><span class="enumeration_chapter">13</span> Using the XML SQL Utility</h1>
<div>
<p>This chapter explains how to use the Extensible Markup Language (XML) SQL Utility (XSU).</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-B8EF3AD4-E94A-487D-969F-2C1B2E095687">Introduction to the XML SQL Utility (XSU)</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-D3D785EB-E345-4F37-B7A7-7462BAA0F247">Using the XML SQL Utility: Overview</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-4922BDF4-3588-4348-9509-16BB8AB1A691">Programming with the XSU Java API</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-7C83AA79-2285-4C5A-A753-F7B71C78787F">Programming with the XSU PL/SQL API</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-33F51125-6078-4BC0-83BA-A529E2C47724">Tips and Techniques for Programming with XSU</a></p>
</li>
</ul>
</div>
<a id="ADXDK1008"></a><a id="ADXDK19392"></a>
<div class="props_rev_3"><a id="GUID-B8EF3AD4-E94A-487D-969F-2C1B2E095687"></a>
<h2 id="ADXDK-GUID-B8EF3AD4-E94A-487D-969F-2C1B2E095687" class="sect2"><span class="enumeration_section">13.1</span> Introduction to the XML SQL Utility (XSU)</h2>
<div>
<p><a href="glossary.htm#GUID-A564495D-ED7B-4F52-8FCA-944CF3BB274D"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> is an Oracle XML Developer&#39;s Kit (XDK) component that enables you to transfer XML data through Oracle SQL statements. You can use XSU to perform these tasks:</p>
<ul style="list-style-type: disc;">
<li>
<p>Transform data in object-relational database tables or views into XML. XSU can query the database and return the result set as an XML document.</p>
</li>
<li>
<p>Extract data from an XML document and use canonical mapping to insert the data into a table or a view or update or delete values of the appropriate columns or attributes.</p>
</li>
</ul>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-AE298459-AB63-4B8E-8D3F-07AB9114DA77">Prerequisites</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-8D708D9D-F93B-46A2-B96A-7458A2F6C36B">XSU Features</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-1805B089-C277-4899-9C31-FF44C6866FEF">XSU Restrictions</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19393"></a>
<div class="props_rev_3"><a id="GUID-AE298459-AB63-4B8E-8D3F-07AB9114DA77"></a>
<h3 id="ADXDK-GUID-AE298459-AB63-4B8E-8D3F-07AB9114DA77" class="sect3"><span class="enumeration_section">13.1.1</span> Prerequisites</h3>
<div>
<p>This chapter assumes that you are familiar with these technologies:</p>
<ul style="list-style-type: disc;">
<li>
<p>Oracle Database structured query language (SQL). XSU transfers XML to and from a database through <code>SELECT</code> statements and data manipulation language (DML).</p>
</li>
<li>
<p>Procedural Language/Structured Query Language (PL/SQL). XDK supplies a PL/SQL application programming interface (API) for XSU that mirrors the Java API.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-6ABA93DA-F986-43F2-97D2-23AA0EA6455C"><span class="xrefglossterm">Java Database Connectivity (JDBC)</span></a>. Java applications that use XSU to transfer XML to and from a database require a JDBC connection.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19394"></a>
<div class="props_rev_3"><a id="GUID-8D708D9D-F93B-46A2-B96A-7458A2F6C36B"></a>
<h3 id="ADXDK-GUID-8D708D9D-F93B-46A2-B96A-7458A2F6C36B" class="sect3"><span class="enumeration_section">13.1.2</span> XSU Features</h3>
<div>
<p>XSU has these key features:</p>
<ul style="list-style-type: disc;">
<li>
<p>Dynamically generates document type definitions (DTDs) or XML schemas.</p>
</li>
<li>
<p>Generates XML documents in their string or Document Object Model (DOM) representations.</p>
</li>
<li>
<p>Performs simple transformations during generation such as modifying default tag names for each <code>&lt;ROW&gt;</code> element. You can also register an XSL transformation that XSU applies to the generated XML documents as needed.</p>
</li>
<li>
<p>Generates XML as a stream of Simple API for XML (SAX2) callbacks.</p>
</li>
<li>
<p>Supports XML attributes during generation, which enables you to specify that a particular column or group of columns maps to an XML attribute instead of an XML element.</p>
</li>
<li>
<p>Allows SQL to XML tag escaping. Sometimes column names are not valid XML tag names. To avoid this problem you can either alias all the column names or turn on tag escaping.</p>
</li>
<li>
<p>Supports <code>XMLType</code> columns in objects or tables.</p>
</li>
<li>
<p>Inserts XML into relational database tables or views. When given an XML document, XSU can also update or delete records from a database object.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19395"></a>
<div class="props_rev_3"><a id="GUID-1805B089-C277-4899-9C31-FF44C6866FEF"></a>
<h3 id="ADXDK-GUID-1805B089-C277-4899-9C31-FF44C6866FEF" class="sect3"><span class="enumeration_section">13.1.3</span> XSU Restrictions</h3>
<div>
<p>Note these restrictions when using XSU:</p>
<ul style="list-style-type: disc;">
<li>
<p>XSU can store data only in a single table. You can store XML across tables, however, by using the Oracle Extensible Stylesheet Language Transformation (XSLT) processor to transform a document into multiple documents and inserting them separately. You can also define views over multiple tables and perform insertions into the views. If a view is nonupdatable (because of complex joins), then you can use <code>INSTEAD</code> <code>OF</code> triggers over the views to perform the inserts.</p>
</li>
<li>
<p>You cannot use XSU to load XML data stored in attributes into a database schema, but you can use an XSLT transformation to change the attributes into elements.</p>
</li>
<li>
<p>By default XSU is case-sensitive. You can either use the correct case, or specify that case is to be ignored.</p>
</li>
<li>
<p>XSU cannot generate a relational database schema from an input DTD.</p>
</li>
<li>
<p>Inserting into <code>XMLType</code> tables using XSU is not supported. <code>XMLType</code> columns are supported.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK1009"></a><a id="ADXDK19396"></a>
<div class="props_rev_3"><a id="GUID-D3D785EB-E345-4F37-B7A7-7462BAA0F247"></a>
<h2 id="ADXDK-GUID-D3D785EB-E345-4F37-B7A7-7462BAA0F247" class="sect2"><span class="enumeration_section">13.2</span> Using the XML SQL Utility: Overview</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-0DD4527B-DA4B-404D-B52C-15027C8C22BF">Using XSU: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-2BEECD17-A1B8-40F0-9363-CED111CAE8A2">Installing XSU</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-DBFFD584-82E8-45F8-82F0-E1BFFE6BC162">Running the XSU Demo Programs</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-939256D1-157F-4736-B74D-3288C60A3069">Using the XSU Command-Line Utility</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19397"></a>
<div class="props_rev_3"><a id="GUID-0DD4527B-DA4B-404D-B52C-15027C8C22BF"></a>
<h3 id="ADXDK-GUID-0DD4527B-DA4B-404D-B52C-15027C8C22BF" class="sect3"><span class="enumeration_section">13.2.1</span> Using XSU: Basic Process</h3>
<div>
<div class="section">
<p>XSU is accessible through these interfaces:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The <code>OracleXML</code><code>Query</code> and <code>OracleXMLSave</code> Java classes in the <code>oracle.xml.sql.query</code> package. Use the <code>OracleXMLQuery</code> class to generate XML from relational data and <code>OracleXMLSave</code> class to perform DML.</p>
</li>
<li>
<p>The PL/SQL packages <a class="olink ARPLS376" target="_blank" href="../ARPLS/d_xmlque.htm#ARPLS376"><code>DBMS_XMLQuery</code></a> and <a class="olink ARPLS066" target="_blank" href="../ARPLS/d_xmlsav.htm#ARPLS066"><code>DBMS_XMLSave</code></a>, which mirror the Java classes.</p>
</li>
</ul>
<p>You can write these types of XSU applications:</p>
<ul style="list-style-type: disc;">
<li>
<p>Java programs that run inside the database and access the internal XSU Java API</p>
</li>
<li>
<p>Java programs that run on the client and access the client-side XSU Java API</p>
</li>
<li>
<p>PL/SQL programs that access XSU through PL/SQL packages</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19399"></a><a id="ADXDK19398"></a>
<div class="props_rev_3"><a id="GUID-1B9C1372-3D9D-4628-8426-5C715225D616"></a>
<h4 id="ADXDK-GUID-1B9C1372-3D9D-4628-8426-5C715225D616" class="sect4"><span class="enumeration_section">13.2.1.1</span> Generating XML with the XSU Java API: Basic Process</h4>
<div>
<div class="section">
<p>The <code>OracleXMLQuery</code> class makes up the XML generation part of the XSU Java API. <a href="adx_j_xsu.htm#GUID-1B9C1372-3D9D-4628-8426-5C715225D616__BABJAEAE">Figure 13-1</a> shows the basic process for generating XML with XSU.</p>
<p>The basic steps in <a href="adx_j_xsu.htm#GUID-1B9C1372-3D9D-4628-8426-5C715225D616__BABJAEAE">Figure 13-1</a> are:</p>
<div class="figure" id="GUID-1B9C1372-3D9D-4628-8426-5C715225D616__BABJAEAE">
<p class="titleinfigure">Figure 13-1 Generating XML with XSU</p>
<img width="659" height="111" src="img/GUID-F60850B1-7ACB-4378-A97B-571F46558713-default.gif" alt="Description of Figure 13-1 follows" title="Description of Figure 13-1 follows"/><br/>
<a href="img_text/GUID-F60850B1-7ACB-4378-A97B-571F46558713-print.htm">Description of &#34;Figure 13-1 Generating XML with XSU&#34;</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC connection to the database. Normally, you establish a connection with the <code>DriverManager</code> class, which manages a set of JDBC drivers. After the JDBC drivers are loaded, invoke <code>getConnection()</code>. When it finds the right driver, this method returns a <code>Connection</code> object that represents a database session. All SQL statements are executed within the context of this session.</span>
<div>
<p>You have these options:</p>
<ul style="list-style-type: disc;">
<li>
<p>Create the connection with the JDBC Oracle Call Interface (OCI) driver. This code fragment shows this technique:</p>
<pre dir="ltr">// import the Oracle driver class
import oracle.jdbc.*;
// load the Oracle JDBC driver
DriverManager.registerDriver(new oracle.jdbc.OracleDriver());     
// create the connection
Connection conn =
   DriverManager.getConnection(&#34;jdbc:oracle:oci:@&#34;,&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre>
<p>The preceding example uses the default connection for the JDBC OCI driver.</p>
</li>
</ul>
<ul style="list-style-type: disc;">
<li>
<p>Create the connection with the JDBC thin driver. The thin driver is written in pure Java and can be called from any Java program. This code fragment shows this technique:</p>
<pre dir="ltr">Connection conn =        
   DriverManager.getConnection(&#34;jdbc:oracle:thin:@dlsun489:1521:ORCL&#34;,
     &#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre>
<p>The thin driver requires the host name (<code>dlsun489</code>), port number (1521), and the Oracle system identifier (SID), <code>ORCL</code>. The database must have an active Transmission Control Protocol/Internet Protocol (TCP/IP) listener.</p>
</li>
<li>
<p>Use default connection used by the server-side internal JDBC driver. This driver runs within a default session and default transaction context. You are already connected to the database; your SQL operations are part of the default transaction. Thus, you do not have to register the driver. Create the <code>Connection</code> object:</p>
<pre dir="ltr">Connection conn = new oracle.jdbc.OracleDriver().defaultConnection ();
</pre></li>
</ul>
<div class="infobox-note" id="GUID-1B9C1372-3D9D-4628-8426-5C715225D616__GUID-66AED7BB-EAD2-4B70-AD5E-F296DF002103">
<p class="notep1">Note:</p>
<p><code>OracleXMLDataSetExtJdbc</code> is used only for Oracle JDBC, whereas <code>OracleXMLDataSetGenJdbc</code> is used for non-Oracle JDBC. These classes are in the oracle.xml.sql.dataset package.</p>
</div>
</div>
</li>
<li class="stepexpand"><span>Create an XML query object and assign it a SQL query. You create an <code>OracleXMLQuery</code> Class instance by passing a SQL query to the constructor, as shown in this example:</span>
<div>
<pre dir="ltr">OracleXMLQuery qry = new OracleXMLQuery (conn, &#34;SELECT * from EMPLOYEES&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Configure the XML query object by invoking <code>OracleXMLQuery</code> methods. This example specifies that only 20 rows are to be included in the result set:</span>
<div>
<pre dir="ltr">xmlQry.setMaxRows(20); 
</pre></div>
</li>
<li class="stepexpand"><span>Return a DOM object or string by invoking <code>OracleXMLQuery</code> methods. For example, get a DOM object:</span>
<div>
<pre dir="ltr">XMLDocument domDoc = (XMLDocument)qry.getXMLDOM();
</pre>
<p>Get a string object:</p>
<pre dir="ltr">String xmlString = qry.getXMLString();
</pre></div>
</li>
<li class="stepexpand"><span>Perform additional processing on the string or DOM as needed.</span>
<div>
<div class="infoboxnotealso" id="GUID-1B9C1372-3D9D-4628-8426-5C715225D616__GUID-F77748C1-6B42-4BDC-8F91-042959F91653">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink JJDEV01000" target="_blank" href="../JJDEV/chone.htm#JJDEV01000"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> to learn about Oracle JDBC</p>
</li>
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about <code>OracleXMLQuery</code> methods</p>
</li>
</ul>
</div>
</div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19401"></a><a id="ADXDK19400"></a>
<div class="props_rev_3"><a id="GUID-24C29C76-152A-4609-AB5A-2C1DC2986CCB"></a>
<h4 id="ADXDK-GUID-24C29C76-152A-4609-AB5A-2C1DC2986CCB" class="sect4"><span class="enumeration_section">13.2.1.2</span> Performing DML with the XSU Java API: Basic Process</h4>
<div>
<div class="section">
<p>Use the <code>OracleXMLSave</code> class to insert, update, and delete XML in the database. <a href="adx_j_xsu.htm#GUID-24C29C76-152A-4609-AB5A-2C1DC2986CCB__BABCEFEJ">Figure 13-2</a> shows the basic process.</p>
<div class="figure" id="GUID-24C29C76-152A-4609-AB5A-2C1DC2986CCB__BABCEFEJ">
<p class="titleinfigure">Figure 13-2 Storing XML in the Database Using XSU</p>
<img width="580" height="352" src="img/GUID-C50891D7-B435-470C-B941-AE81A2863FBF-default.gif" alt="Description of Figure 13-2 follows" title="Description of Figure 13-2 follows"/><br/>
<a href="img_text/GUID-C50891D7-B435-470C-B941-AE81A2863FBF-print.htm">Description of &#34;Figure 13-2 Storing XML in the Database Using XSU&#34;</a></div>
<!-- class="figure" -->
<p>The basic steps in <a href="adx_j_xsu.htm#GUID-24C29C76-152A-4609-AB5A-2C1DC2986CCB__BABCEFEJ">Figure 13-2</a> are:</p>
<ol>
<li>
<p>Create a JDBC connection to the database. This step is identical to the first step described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-1B9C1372-3D9D-4628-8426-5C715225D616">Generating XML with the XSU Java API: Basic Process</a>.&#34;</span></p>
</li>
<li>
<p>Create an XML save object and assign it a table on which to perform DML. Pass a table or view name to the constructor, as shown in this example:</p>
<pre dir="ltr">OracleXMLSave sav = new OracleXMLSave(conn, &#34;employees&#34;);
</pre></li>
<li>
<p>Specify the primary key columns. For example, this code specifies that <code>employee_id</code> is the key column:</p>
<pre dir="ltr">String [] keyColNames = new String[1];
keyColNames[0] = &#34;EMPLOYEE_ID&#34;;
sav.setKeyColumnList(keyColNames);
</pre></li>
<li>
<p>Configure the XML save object by invoking <code>OracleXMLSave</code> methods. This example specifies an update of the <code>salary</code> and <code>job_id</code> columns:</p>
<pre dir="ltr">String[] updateColNames = new String[2];
updateColNames[0] = &#34;SALARY&#34;;
updateColNames[1] = &#34;JOB_ID&#34;;
sav.setUpdateColumnList(updateColNames); // set the columns to update
</pre></li>
<li>
<p>Invoke the <code>insertXML()</code>, <code>updateXML()</code>, or <code>deleteXML()</code> methods on the <code>OracleXMLSave</code> object. This example shows an update:</p>
<pre dir="ltr">// Assume that the user passes in this XML document as the first argument
sav.updateXML(sav.getURL(argv[0]));
</pre>
<p>When performing the DML, XSU performs these tasks:</p>
<ol>
<li>
<p>Parses the input XML document.</p>
</li>
<li>
<p>Matches element names to column names in the target table or view.</p>
</li>
<li>
<p>Converts the elements to SQL types and binds them to the appropriate statement.</p>
</li>
</ol>
</li>
<li>
<p>Close the <code>OracleXMLSave</code> object and deallocate all contexts associated with it, as shown in this example:</p>
<pre dir="ltr">sav.close();
</pre>
<div class="infoboxnotealso" id="GUID-24C29C76-152A-4609-AB5A-2C1DC2986CCB__GUID-0CA94A29-CD03-4C25-A2E6-EF3D4DEB4A80">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink JJDEV01000" target="_blank" href="../JJDEV/chone.htm#JJDEV01000"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> to learn about JDBC</p>
</li>
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about <code>OracleXMLSave</code></p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19402"></a>
<div class="props_rev_3"><a id="GUID-81C84033-4E22-4C25-9FB4-CD7B85DA02CC"></a>
<h4 id="ADXDK-GUID-81C84033-4E22-4C25-9FB4-CD7B85DA02CC" class="sect4"><span class="enumeration_section">13.2.1.3</span> Generating XML with the XSU PL/SQL API: Basic Process</h4>
<div>
<div class="section">
<p>The XSU PL/SQL API reflects the Java API in the generation and storage of XML documents from and to a database. <code>DBMS_XMLQuery</code> is the PL/SQL package that reflects the methods in the <code>OracleXMLQuery</code> Java class. This package has a context handle associated with it. Create a context by invoking a constructor-like function to get the handle, and then use the handle in all subsequent invocations.</p>
<div class="infobox-note" id="GUID-81C84033-4E22-4C25-9FB4-CD7B85DA02CC__GUID-4FB95C9F-83EA-4610-8E73-22D4836F4B8C">
<p class="notep1">Note:</p>
<p>For improved performance, consider using the C-based <code>DBMS_XMLGEN</code>, which is written in C and built into the database, rather than <code>DBMS_XMLQUERY</code>.</p>
</div>
<p>XSU supports the <code>XMLType</code> data type. Using XSU with <code>XMLType</code> is useful if, for example, you have <code>XMLType</code> columns in objects or tables.</p>
<p>Generating XML results in a character large object (CLOB) that contains the XML document. To use <a class="olink ARPLS376" target="_blank" href="../ARPLS/d_xmlque.htm#ARPLS376"><code>DBMS_XMLQuery</code></a> and the XSU generation engine, follow these basic steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Declare a variable for the XML query context and a variable for the generated XML. For example:</span>
<div>
<pre dir="ltr">v_queryCtx  DBMS_XMLQuery.ctxType;
v_result    CLOB;
</pre></div>
</li>
<li class="stepexpand"><span>Get a context handle by invoking the <code>DBMS_XMLQuery.newContext</code> function and supplying it the query, either as a <code>CLOB</code> or a <code>VARCHAR2</code>. This example registers a query to select the rows from the <code>employees</code> table with the <code>WHERE</code> clause containing the bind variables <code>:EMPLOYEE_ID</code> and <code>:FIRST_NAME</code>:</span>
<div>
<pre dir="ltr">v_queryCtx = DBMS_XMLQuery.newContext(&#39;SELECT * FROM employees 
                   WHERE employee_id=:EMPLOYEE_ID AND first_name=:FIRST_NAME&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Bind values to the query. The binds work by binding a name to the position. <code>clearBindValues</code> clears all the bind variables, whereas <code>setBindValue</code> sets a single bind variable with a string value. For example, bind the <code>employee_id</code> and <code>first_name</code> values as shown:</span>
<div>
<pre dir="ltr">DBMS_XMLQuery.setBindValue(v_queryCtx,&#39;EMPLOYEE_ID&#39;,20);
DBMS_XMLQuery.setBindValue(v_queryCtx,&#39;FIRST_NAME&#39;,&#39;John&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Configure the query context. Set optional arguments such as the <code>ROW</code> tag name, the <code>ROWSET</code> tag name, or the number of rows to fetch, and so on. This example specifies changes the default <code>ROWSET</code> element name to <code>EMPSET</code>:</span>
<div>
<pre dir="ltr">DBMS_XMLQuery.setRowSetTag(v_queryCtx,&#39;EMPSET&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Fetch the results. You can get the XML as a CLOB with the <code>getXML</code> function, which generates XML with or without a DTD or XML schema. This example applies bind values to the statement and gets the result corresponding to the predicate <code>employee_id = 20</code> and <code>first_name = &#39;John&#39;</code>:</span>
<div>
<pre dir="ltr">v_result := DBMS_XMLQuery.getXML(v_queryCtx);
</pre></div>
</li>
<li class="stepexpand"><span>Process the results of the XML generation. For example, suppose that your program declared these variables:</span>
<div>
<pre dir="ltr">v_xmlstr VARCHAR2(32767);
v_line   VARCHAR2(2000);
</pre>
<p>You can print the <code>CLOB</code> stored in <code>v_result</code>:</p>
<pre dir="ltr">v_xmlstr := DBMS_LOB.SUBSTR(v_result,32767);
LOOP
  EXIT WHEN v_xmlstr IS NULL;
  v_line := substr(v_xmlstr,1,INSTR(v_xmlstr,CHR(10))-1);
  DBMS_OUTPUT.PUT_LINE(&#39;| &#39; || v_line);
  v_xmlstr := SUBSTR(v_xmlstr,INSTR(v_xmlstr,CHR(10))+1);
END LOOP;
</pre></div>
</li>
<li class="stepexpand"><span>Close the context. For example:</span>
<div>
<pre dir="ltr">DBMS_XMLQuery.closeContext(v_queryCtx);
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19403"></a>
<div class="props_rev_3"><a id="GUID-12788D15-D670-4B65-866C-C7ECC4AD9E21"></a>
<h4 id="ADXDK-GUID-12788D15-D670-4B65-866C-C7ECC4AD9E21" class="sect4"><span class="enumeration_section">13.2.1.4</span> Performing DML with the PL/SQL API: Basic Process</h4>
<div>
<div class="section">
<p><a class="olink ARPLS066" target="_blank" href="../ARPLS/d_xmlsav.htm#ARPLS066"><code>DBMS_XMLSave</code></a> is the PL/SQL package that reflects the methods in the <code>OracleXMLSave</code> Java class. This package has a context handle associated with it. Create a context by invoking a constructor-like function to get the handle, and then use the handle in all subsequent invocations.</p>
<p>To use <code>DBMS_XMLSave</code>, follow these basic steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Declare a variable for the XML save context and a variable for the number of rows touched by the DML. For example:</span>
<div>
<pre dir="ltr">savCtx DBMS_XMLSave.ctxType;
v_rows   NUMBER;
</pre></div>
</li>
<li class="stepexpand"><span>Create a context handle by invoking the <code>DBMS_XMLSave.newContext</code> function and supply it the table name to use for the DML operations.</span>
<div>
<pre dir="ltr">savCtx  := DBMS_XMLSave.newContext(&#39;hr.employees&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Set options based on the type of DML to perform.</span>
<div>
<p>For inserts you can set the list of columns to insert into the <code>setUpdateColumn</code> function. The default is to insert values into all columns. This example sets five columns in the <code>employees</code> table:</p>
<pre dir="ltr">DBMS_XMLSave.setUpdateColumn(savCtx,&#39;EMPLOYEE_ID&#39;); 
DBMS_XMLSave.setUpdateColumn(savCtx,&#39;LAST_NAME&#39;);
DBMS_XMLSave.setUpdateColumn(savCtx,&#39;EMAIL&#39;);
DBMS_XMLSave.setUpdatecolumn(savCtx,&#39;JOB_ID&#39;);
DBMS_XMLSave.setUpdateColumn(savCtx,&#39;HIRE_DATE&#39;);
</pre>
<p>For updates you must supply the list of key columns. Optionally, you can then supply the list of columns for update. In this case, the tags in the XML document matching the key column names are used in the <code>WHERE</code> clause of the <code>UPDATE</code> statement and the tags matching the update column list are used in the <code>SET</code> clause of the <code>UPDATE</code> statement. For example:</p>
<pre dir="ltr">DBMS_XMLSave.setKeyColumn(savCtx,&#39;employee_id&#39;); -- set key column
-- set list of columns to update.
DBMS_XMLSave.setUpdateColumn(savCtx,&#39;salary&#39;);
DBMS_XMLSave.setUpdateColumn(savCtx,&#39;job_id&#39;);
</pre>
<p>For deletes the default is to create a <code>WHERE</code> clause to match all the tag values present in each <code>&lt;ROW&gt;</code> element of the document supplied. To override this behavior, set the list of key columns. In this case only those tag values whose tag names match these columns are used to identify the rows to delete (in effect used in the <code>WHERE</code> clause of the <code>DELETE</code> statement). For example:</p>
<pre dir="ltr">DBMS_XMLSave.setKeyColumn(savCtx,&#39;EMPLOYEE_ID&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Supply a context and XML document to the <code>insertXML</code>, <code>updateXML</code>, or <code>deleteXML</code> functions. For example:</span>
<div>
<pre dir="ltr">v_rows := DBMS_XMLSave.deleteXML(savCtx,xmlDoc);
</pre></div>
</li>
<li class="stepexpand"><span>Repeat the DML any number of times if needed.</span></li>
<li class="stepexpand"><span>Close the context. For example:</span>
<div>
<pre dir="ltr">DBMS_XMLSave.closeContext(savCtx);
</pre></div>
</li>
</ol>
<div class="section">
<p>For a model use the Java examples described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-4922BDF4-3588-4348-9509-16BB8AB1A691">Programming with the XSU Java API</a>.&#34;</span></p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19404"></a>
<div class="props_rev_3"><a id="GUID-2BEECD17-A1B8-40F0-9363-CED111CAE8A2"></a>
<h3 id="ADXDK-GUID-2BEECD17-A1B8-40F0-9363-CED111CAE8A2" class="sect3"><span class="enumeration_section">13.2.2</span> Installing XSU</h3>
<div>
<div class="section">
<p>XSU is included as part of Oracle Database, along with the other XDK utilities. <span class="q">&#34;<a href="adx_j_gs.htm#GUID-D26168D9-2F21-4B5A-9F7B-F1D4B66F0EB4">XDK for Java Component Dependencies</a>&#34;</span> describes the XSU components and dependencies.</p>
<p>By default, the Oracle Universal Installer installs XSU on disk and loads it into the database. No user intervention is required. If you did not load XSU in the database when installing Oracle, you can install XSU manually as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Ensure that Oracle XML DB is installed (it is installed by default as part of Oracle Database).</span></li>
<li><span>Load the <code>xsu12.jar</code> file into the database. This JAR file, which has a dependency on <code>xdb.jar</code> for <code>XMLType</code> access, is described in <a href="adx_j_gs.htm#GUID-D26168D9-2F21-4B5A-9F7B-F1D4B66F0EB4__BACCJCEA" title="Component, Library, and Notes are the columns.">Table 3-1</a>.</span></li>
<li><span>Run the <code>$ORACLE_HOME/rdbms/admin/dbmsxsu.sql</code> script. This SQL script builds the XSU PL/SQL API.</span></li>
</ol>
<div class="section">
<p>As explained in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-0DD4527B-DA4B-404D-B52C-15027C8C22BF">Using XSU: Basic Process</a>,&#34;</span> you do not have to load XSU into the database to use it. XSU can reside in any tier that supports Java.</p>
<p>These sections describe your installation options:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-87BA0272-6037-4262-98DA-6BB40FAF2BAF">Installing XSU in the Database</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-E7494F31-25A2-49A9-9631-24F872DAC692">Installing XSU in an Application Server</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-AB070D7C-D012-4B0B-8DF9-4ABA55EB6026">Installing XSU in a Web Server</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19406"></a><a id="ADXDK19405"></a>
<div class="props_rev_3"><a id="GUID-87BA0272-6037-4262-98DA-6BB40FAF2BAF"></a>
<h4 id="ADXDK-GUID-87BA0272-6037-4262-98DA-6BB40FAF2BAF" class="sect4"><span class="enumeration_section">13.2.2.1</span> Installing XSU in the Database</h4>
<div>
<p><a href="adx_j_xsu.htm#GUID-87BA0272-6037-4262-98DA-6BB40FAF2BAF__BABFHEJD">Figure 13-3</a> shows the typical architecture for applications that use the XSU libraries installed in the database. XML generated from XSU running in the database can be placed in advanced queues in the database to be queued to other systems or clients. You deliver the XML internally through stored procedures in the database or externally through web servers or application servers.</p>
<p>In <a href="adx_j_xsu.htm#GUID-87BA0272-6037-4262-98DA-6BB40FAF2BAF__BABFHEJD">Figure 13-3</a> all lines are bidirectional. Because XSU can generate and save data, resources can deliver XML to XSU running inside the database, which can then insert it in the appropriate database tables.</p>
<div class="figure" id="GUID-87BA0272-6037-4262-98DA-6BB40FAF2BAF__BABFHEJD">
<p class="titleinfigure">Figure 13-3 Running XSU in the Database</p>
<img width="672" height="332" src="img/GUID-7F0314C6-69DA-45DF-8E28-92144749EF9B-default.gif" alt="Description of Figure 13-3 follows" title="Description of Figure 13-3 follows"/><br/>
<a href="img_text/GUID-7F0314C6-69DA-45DF-8E28-92144749EF9B-print.htm">Description of &#34;Figure 13-3 Running XSU in the Database&#34;</a></div>
<!-- class="figure" --></div>
</div>
<a id="ADXDK19408"></a><a id="ADXDK19407"></a>
<div class="props_rev_3"><a id="GUID-E7494F31-25A2-49A9-9631-24F872DAC692"></a>
<h4 id="ADXDK-GUID-E7494F31-25A2-49A9-9631-24F872DAC692" class="sect4"><span class="enumeration_section">13.2.2.2</span> Installing XSU in an Application Server</h4>
<div>
<p>Your application architecture may require an application server in the middle tier. The application tier can be a database or an application server that supports Java programs.</p>
<p>You can generate XML in the middle tier from SQL queries or <code>ResultSets</code> for various reasons, for example, to integrate different JDBC data sources in the middle tier. In this case, you can install the XSU in your middle tier, thereby enabling your Java programs to make use of XSU through its Java API.</p>
<p><a href="adx_j_xsu.htm#GUID-E7494F31-25A2-49A9-9631-24F872DAC692__BABIGADF">Figure 13-4</a> shows a typical architecture for running XSU in a middle tier. In the middle tier, data from JDBC sources is converted by XSU into XML and then sent to web servers or other systems. Again, the process is bidirectional, which means that the data can be put back into the JDBC sources (database tables or views) with XSU. If a database is used as the application server, then you can use the PL/SQL front end instead of Java.</p>
<div class="figure" id="GUID-E7494F31-25A2-49A9-9631-24F872DAC692__BABIGADF">
<p class="titleinfigure">Figure 13-4 Running XSU in the Middle Tier</p>
<img width="663" height="327" src="img/GUID-3C82B5BD-EFAD-440C-B8C7-525E034AEFAD-default.gif" alt="Description of Figure 13-4 follows" title="Description of Figure 13-4 follows"/><br/>
<a href="img_text/GUID-3C82B5BD-EFAD-440C-B8C7-525E034AEFAD-print.htm">Description of &#34;Figure 13-4 Running XSU in the Middle Tier&#34;</a></div>
<!-- class="figure" --></div>
</div>
<a id="ADXDK19410"></a><a id="ADXDK19409"></a>
<div class="props_rev_3"><a id="GUID-AB070D7C-D012-4B0B-8DF9-4ABA55EB6026"></a>
<h4 id="ADXDK-GUID-AB070D7C-D012-4B0B-8DF9-4ABA55EB6026" class="sect4"><span class="enumeration_section">13.2.2.3</span> Installing XSU in a Web Server</h4>
<div>
<p><a href="adx_j_xsu.htm#GUID-AB070D7C-D012-4B0B-8DF9-4ABA55EB6026__BABEHFAH">Figure 13-5</a> shows that XSU can live in the web server because the web server supports Java servlets. In this way you can write Java servlets that use XSU. XSQL Servlet is a standard servlet provided by Oracle. It is built on top of XSU and provides a template-like interface to XSU functionality. To perform XML processing in the web server and avoid intricate servlet programming, you can use the XSQL Servlet.</p>
<div class="figure" id="GUID-AB070D7C-D012-4B0B-8DF9-4ABA55EB6026__BABEHFAH">
<p class="titleinfigure">Figure 13-5 Running XSU in a Web Server</p>
<img width="590" height="202" src="img/GUID-3AA128C0-987D-4F11-84BE-A4BF9892148E-default.gif" alt="Description of Figure 13-5 follows" title="Description of Figure 13-5 follows"/><br/>
<a href="img_text/GUID-3AA128C0-987D-4F11-84BE-A4BF9892148E-print.htm">Description of &#34;Figure 13-5 Running XSU in a Web Server&#34;</a></div>
<!-- class="figure" -->
<div class="infoboxnotealso" id="GUID-AB070D7C-D012-4B0B-8DF9-4ABA55EB6026__GUID-8F34D0AF-4079-4B84-91FE-CE242F74ED93">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ADXDB1600" target="_blank" href="../ADXDB/xdb13gen.htm#ADXDB1600"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>, especially the chapter on generating XML, for examples on using XSU with <code>XMLType</code></p>
</li>
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the classes <code>OracleXML</code><code>Query</code> and <code>OracleXMLSave</code></p>
</li>
<li>
<p><a class="olink ARPLS376" target="_blank" href="../ARPLS/d_xmlque.htm#ARPLS376"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> to learn about the package <code>DBMS_XMLQuery</code></p>
</li>
<li>
<p><a class="olink ARPLS066" target="_blank" href="../ARPLS/d_xmlsav.htm#ARPLS066"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> to learn about the package <code>DBMS_XMLSave</code></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-A1834D2F-B962-4881-AE7A-F323FF11384D">Using the XSQL Pages Publishing Framework</a> to learn about XSQL Servlet</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADXDK19412"></a><a id="ADXDK19411"></a>
<div class="props_rev_3"><a id="GUID-DBFFD584-82E8-45F8-82F0-E1BFFE6BC162"></a>
<h3 id="ADXDK-GUID-DBFFD584-82E8-45F8-82F0-E1BFFE6BC162" class="sect3"><span class="enumeration_section">13.2.3</span> Running the XSU Demo Programs</h3>
<div>
<div class="section">
<p>Demo programs for XSU are included in <code>$ORACLE_HOME/xdk/demo/java/xsu</code>. <a href="adx_j_xsu.htm#GUID-DBFFD584-82E8-45F8-82F0-E1BFFE6BC162__BABICEIE" title="File and Description are the Columns.">Table 13-1</a> describes the XML files and programs that you can use to test XSU.</p>
<div class="tblformalwide" id="GUID-DBFFD584-82E8-45F8-82F0-E1BFFE6BC162__BABICEIE">
<p class="titleintable">Table 13-1 XSU Sample Files</p>
<table class="cellalignment655" title="XSU Sample Files " summary="File and Description are the Columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment674" id="d60899e2171">File</th>
<th class="cellalignment755" id="d60899e2174">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2179" headers="d60899e2171">
<p><code>bindSQLVariables.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2179 d60899e2174">
<p>An PL/SQL script that binds values for <code>EMPLOYEE_ID</code> and <code>FIRST_NAME</code> to columns in the employees table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-4E4849A4-BE3E-4799-9CAE-42ED004D5EE5">Binding Values in XSU</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2198" headers="d60899e2171">
<p><code>changeElementName.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2198 d60899e2174">
<p>A PL/SQL program that gets the first 20 rows of the <code>employees</code> table as an XML document. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-1D112A7B-D6FF-4497-865A-16EE5AD3CAC8">Specifying Element Names with DBMS_XMLQuery</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2214" headers="d60899e2171">
<p><code>createObjRelSchema.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2214 d60899e2174">
<p>A SQL script that sets up an object-relational schema and populates it. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-A0899DAA-0B1D-482C-99E6-E995F2B535C8">XML Mapping Against an Object-Relational Schema</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2227" headers="d60899e2171">
<p><code>createObjRelSchema2.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2227 d60899e2174">
<p>A SQL script that sets up an object-relational schema and populates it. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-9BD36D83-085B-418B-AA50-1A01E3322D41">Altering the Database Schema or SQL Query</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2240" headers="d60899e2171">
<p><code>createRelSchema.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2240 d60899e2174">
<p>A SQL script that creates a relational table and then creates a customer view that contains a customer object on top of it. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-9BD36D83-085B-418B-AA50-1A01E3322D41">Altering the Database Schema or SQL Query</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2253" headers="d60899e2171">
<p><code>customer.xml</code></p>
</td>
<td class="cellalignment756" headers="d60899e2253 d60899e2174">
<p>An XML document that describes a customer. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-9BD36D83-085B-418B-AA50-1A01E3322D41">Altering the Database Schema or SQL Query</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2266" headers="d60899e2171">
<p><code>deleteEmployeeByKey.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2266 d60899e2174">
<p>A PL/SQL program that deletes an employee by primary key. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-F8A809E4-A3E4-4BE9-8915-D4DE501E5F84">Deleting by Key with DBMS_XMLSave: Example</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2279" headers="d60899e2171">
<p><code>deleteEmployeeByRow.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2279 d60899e2174">
<p>A PL/SQL program that deletes an employee by row. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-D40642F0-6F37-4559-8BC5-0CA5C9ED31AF">Deleting by Row with DBMS_XMLSave: Example</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2292" headers="d60899e2171">
<p><code>domTest.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2292 d60899e2174">
<p>A program that generates a DOM tree and then traverses it in document order, printing the nodes one by one. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-3839ED46-BD8B-4069-972A-DEBB031C6F57">Generating a DOM Tree with OracleXMLQuery</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2305" headers="d60899e2171">
<p><code>index.txt</code></p>
</td>
<td class="cellalignment756" headers="d60899e2305 d60899e2174">
<p>A README that describes the programs in the demo directory.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2313" headers="d60899e2171">
<p><code>insProc.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2313 d60899e2174">
<p>A PL/SQL program that inserts an XML document into a table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-F31407DC-E845-4C68-9237-452AE22052D2">Inserting Values into All Columns with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2327" headers="d60899e2171">
<p><code>insertClob.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2327 d60899e2174">
<p>A SQL script that creates a table called <code>xmldocument</code> and stores an XML document in the table as a <code>CLOB</code>. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-F31407DC-E845-4C68-9237-452AE22052D2">Inserting Values into All Columns with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2346" headers="d60899e2171">
<p><code>insertClob2.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2346 d60899e2174">
<p>A SQL script that inserts an XML document into the <code>xmldocument</code> table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05">Inserting into a Subset of Columns with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2362" headers="d60899e2171">
<p><code>insertClob3.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2362 d60899e2174">
<p>A SQL script that inserts an XML document into the <code>xmldocument</code> table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052">Updating Key Columns with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2378" headers="d60899e2171">
<p><code>insertClob4.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2378 d60899e2174">
<p>A SQL script that inserts an XML document into the <code>xmldocument</code> table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-1C70DB24-7F7B-45F2-9D8F-E5A9904C7932">Specifying a List of Columns with DBMS_XMLSave: Example</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2394" headers="d60899e2171">
<p><code>insertEmployee.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2394 d60899e2174">
<p>A PL/SQL script that invokes the <code>insProc</code> stored procedure and inserts an employee into the <code>employees</code> table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-E0360DFE-640A-490E-881B-D3F5C66DD823">Inserting XML with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2413" headers="d60899e2171">
<p><code>insertEmployee2.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2413 d60899e2174">
<p>A PL/SQL script that invokes the <code>testInsert</code> procedure to insert the XML data for an employee into the <code>hr.employees</code> table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05">Inserting into a Subset of Columns with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2432" headers="d60899e2171">
<p><code>mapColumnToAtt.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2432 d60899e2174">
<p>A SQL script that queries the <code>employees</code> table, rendering <code>employee_id</code> as an XML attribute. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-9BD36D83-085B-418B-AA50-1A01E3322D41">Altering the Database Schema or SQL Query</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2451" headers="d60899e2171">
<p><code>new_emp.xml</code></p>
</td>
<td class="cellalignment756" headers="d60899e2451 d60899e2174">
<p>An XML document that describes a new employee. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-D005B919-A669-4BF9-A22A-2F75ECE3B82D">Running the testInsert Program</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2464" headers="d60899e2171">
<p><code>new_emp2.xml</code></p>
</td>
<td class="cellalignment756" headers="d60899e2464 d60899e2174">
<p>An XML document that describes a new employee. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-ACDEFAC1-46BE-4363-90C4-027897AD1AD9">Running the testInsertSubset Program</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2477" headers="d60899e2171">
<p><code>noRowsTest.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2477 d60899e2174">
<p>A program that throws an exception when there are no more rows. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-4F096761-00BB-4A94-9368-F91C7ACA9D2C">Raising a No Rows Exception</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2490" headers="d60899e2171">
<p><code>pageTest.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2490 d60899e2174">
<p>A program that uses the JDBC <code>ResultSet</code> to generate XML one page at a time. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-788FD888-45E4-4B7F-91CD-0151398196CF">Generating Scrollable Result Sets</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2507" headers="d60899e2171">
<p><code>paginateResults.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2507 d60899e2174">
<p>A program that generates an XML page that paginates results. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-790B346F-11A5-493A-B34A-E972069F95EC">Paginating Results with OracleXMLQuery: Example</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2520" headers="d60899e2171">
<p><code>paginateResults.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2520 d60899e2174">
<p>A PL/SQL script that paginates results. It skips the first 3 rows of the <code>employees</code> table and then prints the rest of the rows 10 at a time by setting <code>skipRows</code> to 3 for the first batch of 10 rows and then to 0 for the rest of the batches. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-89F298B1-4D2B-43F5-AC89-64A6B679CBD0">Paginating Results with DBMS_XMLQuery</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2539" headers="d60899e2171">
<p><code>printClobOut.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2539 d60899e2174">
<p>A PL/SQL script that prints a CLOB to the output buffer. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-7AAAD71B-CB30-4CAD-AC58-86A23B4BF656">Generating XML from Simple Queries with DBMS_XMLQuery</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2552" headers="d60899e2171">
<p><code>raiseException.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2552 d60899e2174">
<p>A PL/SQL script that invokes the <code>DBMS_XMLQuery.getExceptionContent</code> procedure. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-A4AF1625-EED1-47EA-9EC5-00FDCD6C0F95">Handling Exceptions in the XSU PL/SQL API</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2568" headers="d60899e2171">
<p><code>refCurTest.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2568 d60899e2174">
<p>A program that generates XML from the results of the SQL query defined in the <code>testRefCur</code> function. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-B77E1941-0B4C-4B73-8EBC-25357E3DA75C">Generating XML from Cursor Objects</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2584" headers="d60899e2171">
<p><code>samp1.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2584 d60899e2174">
<p>A program that queries the <code>scott.emp</code> table, then generates an XML document from the query results.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2595" headers="d60899e2171">
<p><code>samp10.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2595 d60899e2174">
<p>A program that inserts <code>sampdoc.xml</code> into the <code>xmltest_tab1</code> table.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2609" headers="d60899e2171">
<p><code>samp2.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2609 d60899e2174">
<p>A program that queries the <code>scott.emp</code> table, then generates an XML document from the query results. This program demonstrates how you can customize the generated XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2620" headers="d60899e2171">
<p><code>sampdoc.xml</code></p>
</td>
<td class="cellalignment756" headers="d60899e2620 d60899e2174">
<p>A sample XML data document that <code>samp10.java</code> inserts into the database.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2631" headers="d60899e2171">
<p><code>samps.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2631 d60899e2174">
<p>A SQL script that creates the <code>xmltest_tab1</code> table used by <code>samp10.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2645" headers="d60899e2171">
<p><code>simpleQuery.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2645 d60899e2174">
<p>A PL/SQL script that selects 20 rows from the <code>hr.employees</code> table and gets an XML document as a CLOB. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-7AAAD71B-CB30-4CAD-AC58-86A23B4BF656">Generating XML from Simple Queries with DBMS_XMLQuery</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2662" headers="d60899e2171">
<p><code>testDML.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2662 d60899e2174">
<p>A PL/SQL script that uses the same context and settings to perform DML depending on user input. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-41CC4B56-3826-474D-8BE1-D127B1FBC004">Reusing the Context Handle with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2675" headers="d60899e2171">
<p><code>testDeleteKey.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2675 d60899e2174">
<p>A program that limits the number of elements used to identify a row, which improves performance by caching the <code>DELETE</code> statement and batching transactions. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-2D3D2A64-0291-4D19-9783-4BD518C8E95D">Deleting by Key with OracleXMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2691" headers="d60899e2171">
<p><code>testDeleteKey.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2691 d60899e2174">
<p>A PL/SQL script that deletes a row from the <code>employees</code> table for every <code>&lt;ROW&gt;</code> element in an input XML document. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-F8A809E4-A3E4-4BE9-8915-D4DE501E5F84">Deleting by Key with DBMS_XMLSave: Example</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2710" headers="d60899e2171">
<p><code>testDeleteRow.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2710 d60899e2174">
<p>A program that accepts an XML document file name as input and deletes the rows corresponding to the elements in the document. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-FD22DD32-C1F3-475E-8F5C-A735E2DC6FFE">Deleting by Row with OracleXMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2723" headers="d60899e2171">
<p><code>testDeleteRow.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2723 d60899e2174">
<p>A SQL script that deletes a row from the <code>employees</code> table for every <code>&lt;ROW&gt;</code> element in an input XML document. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-D40642F0-6F37-4559-8BC5-0CA5C9ED31AF">Deleting by Row with DBMS_XMLSave: Example</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2742" headers="d60899e2171">
<p><code>testException.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2742 d60899e2174">
<p>A sample program shown that throws a runtime exception and then gets the parent exception by invoking <code>Exception.getParentException()</code>. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-3184503E-9C0D-4DFF-984E-5D1C6512AA42">Getting the Parent Exception</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2758" headers="d60899e2171">
<p><code>testInsert.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2758 d60899e2174">
<p>A Java program that inserts XML values into all columns of the <code>hr.employees</code> table. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-FBDEFAFC-567F-48C5-85F1-B33680A85CA0">Inserting XML into All Columns with OracleXMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2774" headers="d60899e2171">
<p><code>testInsert.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2774 d60899e2174">
<p>A PL/SQL script that inserts XML data into a subset of columns. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05">Inserting into a Subset of Columns with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2787" headers="d60899e2171">
<p><code>testInsertSubset.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2787 d60899e2174">
<p>A program shown that inserts XML data into a subset of columns. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-220FC06C-0D3F-427D-ACEC-B37753B43189">Inserting XML into a Subset of Columns with OracleXMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2800" headers="d60899e2171">
<p><code>testRef.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2800 d60899e2174">
<p>A PL/SQL script that creates a function that defines a REF cursor and returns it. Every time the <code>testRefCur</code> function is called, it opens a cursor object for the <code>SELECT</code> query and returns that cursor instance. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-B77E1941-0B4C-4B73-8EBC-25357E3DA75C">Generating XML from Cursor Objects</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2819" headers="d60899e2171">
<p><code>testUpdate.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2819 d60899e2174">
<p>A sample program that updates the <code>hr.employees</code> table by invoking the <code>OracleXMLSave.setKeyColumnList()</code> method. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-646799B4-73D6-4AD1-94F1-E614343D65F6">Updating Rows with OracleXMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2839" headers="d60899e2171">
<p><code>testUpdateKey.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2839 d60899e2174">
<p>A PL/SQL that creates a PL/SQL procedure called <code>testUpdateKey</code> that uses the <code>employee_id</code> column of the <code>employees</code> table as a primary key. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052">Updating Key Columns with DBMS_XMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2861" headers="d60899e2171">
<p><code>testUpdateList.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2861 d60899e2174">
<p>Suppose you want to update only the salary and job title for each employee and ignore the other information. If you know that all the elements to be updated are the same for all <code>ROW</code> elements in the XML document, then you can use the <code>OracleXMLSave.setUpdateColumnNames()</code> method to specify the columns. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-BF4F12F6-1EC7-4B6D-BEEC-A9D9D5816D8B">Updating a Column List with OracleXMLSave</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2880" headers="d60899e2171">
<p><code>testUpdateSubset.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2880 d60899e2174">
<p>A SQL script that creates the procedure <code>testUpdateSubset</code>. The procedure specifies the <code>employee_id</code> column as the key, and specifies that <code>salary</code> and <code>job_id</code> are to be updated. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-1C70DB24-7F7B-45F2-9D8F-E5A9904C7932">Specifying a List of Columns with DBMS_XMLSave: Example</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2905" headers="d60899e2171">
<p><code>testXMLSQL.java</code></p>
</td>
<td class="cellalignment756" headers="d60899e2905 d60899e2174">
<p>A sample program that uses XSU to generate XML as a <code>String</code> object. This program queries the <code>hr.employees</code> table and prints the result set to standard output. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-40A59B26-5039-45FB-BCC0-6C886C573E80">Generating a String with OracleXMLQuery</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2924" headers="d60899e2171">
<p><code>upd_emp.xml</code></p>
</td>
<td class="cellalignment756" headers="d60899e2924 d60899e2174">
<p>An XML document that contains updated salary and other information for a series of employees. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-E1F2B493-A35D-4069-AE61-310538FA2FF0">Running the testUpdate Program</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2937" headers="d60899e2171">
<p><code>upd_emp2.xml</code></p>
</td>
<td class="cellalignment756" headers="d60899e2937 d60899e2174">
<p>An XML document that contains updated salary and other information for a series of employees. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-E1F2B493-A35D-4069-AE61-310538FA2FF0">Running the testUpdate Program</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2950" headers="d60899e2171">
<p><code>updateEmployee.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2950 d60899e2174">
<p>An XML document that contains new data for two employees. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-F631E856-2DF4-4926-90AA-BFF97840F90F">Running the testUpdateList Program</a>.&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment676" id="d60899e2963" headers="d60899e2171">
<p><code>updateEmployee2.sql</code></p>
</td>
<td class="cellalignment756" headers="d60899e2963 d60899e2174">
<p>A PL/SQL script that passes an XML document to the <code>testUpdateSubset</code> procedure and generates two <code>UPDATE</code> statements. See <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-1C70DB24-7F7B-45F2-9D8F-E5A9904C7932">Specifying a List of Columns with DBMS_XMLSave: Example</a>.&#34;</span></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The steps for running the demos are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Change into the <code>$ORACLE_HOME/xdk/demo/java/xsu</code> directory (UNIX) or <code>%ORACLE_HOME%\xdk\demo\java\xsu</code> directory (Windows).</span></li>
<li class="stepexpand"><span>Ensure that your environment variables are set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span> In particular, ensure that the Java classpath includes <code>xsu12.jar</code> for XSU and <code>ojdbc6.jar</code> (Java 1.6) for JDBC. If you use a multibyte character set other than UTF-8, ISO8859-1, or JA16SJIS, then place <code>orai18n.jar</code> in your classpath so that JDBC can convert the character set of the input file to the database character set.</span></li>
<li class="stepexpand"><span>Compile the Java programs as shown in this example:</span>
<div>
<pre dir="ltr">javac samp1.java samp2.java samp10.java
</pre></div>
</li>
<li class="stepexpand"><span>Connect to a database as user <code>hr</code> and run SQL script <code>createRelSchema</code>:</span>
<div>
<pre dir="ltr">CONNECT hr
@$ORACLE_HOME/xdk/demo/java/xsu/createRelSchema
</pre></div>
</li>
</ol>
<div class="section">
<p>These sections describe the XSU demos in detail.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19414"></a><a id="ADXDK19415"></a><a id="ADXDK19413"></a>
<div class="props_rev_3"><a id="GUID-939256D1-157F-4736-B74D-3288C60A3069"></a>
<h3 id="ADXDK-GUID-939256D1-157F-4736-B74D-3288C60A3069" class="sect3"><span class="enumeration_section">13.2.4</span> Using the XSU Command-Line Utility</h3>
<div>
<div class="section">
<p>XDK includes a command-line Java interface for XSU. XSU command-line options are provided through the Java class <code>OracleXML</code>. To use this API ensure that your Java classpath is set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span></p>
<p>To print usage information for XSU to standard output, run this command:</p>
<pre dir="ltr">java OracleXML
</pre>
<p>To use XSU, invoke it with either the <code>getXML</code> or <code>putXML</code> parameter:</p>
<pre dir="ltr">java OracleXML getXML <span class="italic">options</span>
java OracleXML putXML <span class="italic">options</span>
</pre>
<p><a href="adx_j_xsu.htm#GUID-939256D1-157F-4736-B74D-3288C60A3069__BABGDFFJ" title="Describes the getXML options">Table 13-2</a> describes the <code>getXML</code> options.</p>
<div class="tblformalwide" id="GUID-939256D1-157F-4736-B74D-3288C60A3069__BABGDFFJ">
<p class="titleintable">Table 13-2 getXML Options</p>
<table class="cellalignment655" title="getXML Options" summary="Describes the getXML options">
<thead>
<tr class="cellalignment644">
<th class="cellalignment732" id="d60899e3162">getXML Option</th>
<th class="cellalignment733" id="d60899e3165">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3170" headers="d60899e3162">
<p><code>-user</code> &#34;<span class="italic"><code>username</code></span>/<span class="italic"><code>password&#34;</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3170 d60899e3165">
<p>Specifies the user name and password to connect to the database. The connect string is also specified. You can specify the user name and password as part of the connect string.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3186" headers="d60899e3162">
<p><code>-conn</code> <span class="italic"><code>&#34;JDBC_connect_string&#34;</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3186 d60899e3165">
<p>Specifies the JDBC database connect string. By default the connect string is: &#34;<code>jdbc:oracle:oci:@</code>&#34;.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3201" headers="d60899e3162">
<p><code>-withDTD</code></p>
</td>
<td class="cellalignment735" headers="d60899e3201 d60899e3165">
<p>Instructs the XSU to generate the DTD along with the XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3209" headers="d60899e3162">
<p><code>-withSchema</code></p>
</td>
<td class="cellalignment735" headers="d60899e3209 d60899e3165">
<p>Instructs the XSU to generate the schema along with the XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3217" headers="d60899e3162">
<p><code>-rowsetTag</code> <span class="italic"><code>tag_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3217 d60899e3165">
<p>Specifies the rowset tag, which is tag that encloses all the XML elements corresponding to the records returned by the query. The default rowset tag is <code>&lt;ROWSET&gt;</code>. If you specify an empty string (&#34;&#34;) for rowset, then XSU omits the rowset element.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3232" headers="d60899e3162">
<p><code>-rowTag</code> <span class="italic"><code>tag_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3232 d60899e3165">
<p>Specifies the row tag that encloses the data corresponding to a database row. The default row tag is <code>&lt;ROW&gt;</code>. If you specify an empty string (&#34;&#34;) for the row tag, then XSU omits the row tag.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3247" headers="d60899e3162">
<p><code>-rowIdAttr</code> <span class="italic"><code>row_id_attribute_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3247 d60899e3165">
<p>Names the attribute of the <code>ROW</code> element that keeps track of the cardinality of the <code>rows</code>. By default this attribute is <code>num</code>. If you specify an empty string as the <code>rowID</code> attribute, then XSU omits the attribute.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3271" headers="d60899e3162">
<p>-<code>rowIdColumn</code> <span class="italic"><code>row_Id_column_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3271 d60899e3165">
<p>Specifies that the value of a scalar column from the query is to be used as the value of the <code>rowID</code> attribute.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3287" headers="d60899e3162">
<p><code>-collectionIdAttr</code> <span class="italic"><code>collect_id_attr_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3287 d60899e3165">
<p>Names the attribute of an XML list element that keeps track of the cardinality of the elements of the list. The generated XML lists correspond to either a cursor query, or collection. If you specify an empty string (&#34;&#34;) as the <code>rowID</code> attribute, then XSU omits the attribute.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3302" headers="d60899e3162">
<p><code>-useTypeForCollElemTag</code></p>
</td>
<td class="cellalignment735" headers="d60899e3302 d60899e3165">
<p>Specifies the use type name for the column-element tag. By default XSU uses the <code>column-name_item</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3313" headers="d60899e3162">
<p><code>-useNullAttrId</code></p>
</td>
<td class="cellalignment735" headers="d60899e3313 d60899e3165">
<p>Specifies the attribute <code>NULL (TRUE/FALSE)</code> to indicate the nullness of an element.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3325" headers="d60899e3162">
<p><code>-styleSheet</code> <span class="italic"><code>stylesheet_URI</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3325 d60899e3165">
<p>Specifies the style sheet in the XML processing instruction.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3337" headers="d60899e3162">
<p><code>-stylesheetType</code> <span class="italic"><code>stylesheet_type</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3337 d60899e3165">
<p>Specifies the style sheet type in the XML processing instruction.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3349" headers="d60899e3162">
<p><code>-setXSLT</code> <span class="italic"><code>URI</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3349 d60899e3165">
<p>Specifies the XSLT style sheet to apply to the XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3360" headers="d60899e3162">
<p><code>-setXSLTRef</code> <span class="italic"><code>URI</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3360 d60899e3165">
<p>Sets the XSLT external entity reference.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3372" headers="d60899e3162">
<p><code>-useLowerCase | -useUpperCase</code></p>
</td>
<td class="cellalignment735" headers="d60899e3372 d60899e3165">
<p>Generates lowercase or uppercase tag names. The default is to match the case of the SQL object names from which the tags are generated.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3380" headers="d60899e3162">
<p><code>-withEscaping</code></p>
</td>
<td class="cellalignment735" headers="d60899e3380 d60899e3165">
<p>Specifies the treatment of characters that are legal in SQL object names but illegal in XML tags. If such a character is encountered, then it is escaped so that it does not throw an exception.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3388" headers="d60899e3162">
<p><code>-errorTag</code> <span class="italic"><code>error tag_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3388 d60899e3165">
<p>Specifies the tag to enclose error messages that are formatted as XML.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3400" headers="d60899e3162">
<p><code>-raiseException</code></p>
</td>
<td class="cellalignment735" headers="d60899e3400 d60899e3165">
<p>Specifies that XSU must throw a Java exception. By default XSU catches any error and produces the XML error.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3408" headers="d60899e3162">
<p><code>-raiseNoRowsException</code></p>
</td>
<td class="cellalignment735" headers="d60899e3408 d60899e3165">
<p>Raises an exception if no rows are returned.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3416" headers="d60899e3162">
<p><code>-useStrictLegalXMLCharCheck</code></p>
</td>
<td class="cellalignment735" headers="d60899e3416 d60899e3165">
<p>Performs strict checking on input data.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3424" headers="d60899e3162">
<p><code>-maxRows</code> <span class="italic"><code>maximum_rows</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3424 d60899e3165">
<p>Specifies the maximum number of rows to be retrieved and converted to XML.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3437" headers="d60899e3162">
<p><code>-skipRows</code> <span class="italic"><code>number_of_rows_to_skip</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3437 d60899e3165">
<p>Specifies the number of rows to be skipped.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3448" headers="d60899e3162">
<p><code>-encoding</code> <span class="italic"><code>encoding_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3448 d60899e3165">
<p>Specifies the character set encoding of the generated XML.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3460" headers="d60899e3162">
<p><code>-dateFormat</code> <span class="italic"><code>date_format</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3460 d60899e3165">
<p>Specifies the date format for the date values in the XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3472" headers="d60899e3162">
<p><code>-fileName</code> <span class="italic"><code>SQL_query_fileName</code></span> | <span class="italic"><code>SQL_query</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3472 d60899e3165">
<p>Specifies the file name that contains the query or the query itself.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_xsu.htm#GUID-939256D1-157F-4736-B74D-3288C60A3069__BABEFCDB" title="putXML Option and Description are the columns.">Table 13-3</a> describes the <code>putXML</code> options.</p>
<div class="tblformalwide" id="GUID-939256D1-157F-4736-B74D-3288C60A3069__BABEFCDB">
<p class="titleintable">Table 13-3 putXML Options</p>
<table class="cellalignment655" title="putXML Options " summary="putXML Option and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment732" id="d60899e3506">putXML Options</th>
<th class="cellalignment733" id="d60899e3509">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3514" headers="d60899e3506">
<p><code>-user &#34;</code><span class="italic"><code>username</code></span>/<span class="italic"><code>password&#34;</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3514 d60899e3509">
<p>Specifies the user name and password to connect to the database. The connect string is also specified. You can specify the user name and password as part of the connect string.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3529" headers="d60899e3506">
<p><code>-conn</code> <span class="italic"><code>&#34;JDBC_connect_string&#34;</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3529 d60899e3509">
<p>Specifies the JDBC database connect string. By default the connect string is: &#34;<code>jdbc:oracle:oci:@</code>&#34;.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3544" headers="d60899e3506">
<p><code>-batchSize</code> <span class="italic"><code>batching_size</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3544 d60899e3509">
<p>Specifies the batch size that controls the number of rows that are batched together and inserted in a single trip to the database to improve performance.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3556" headers="d60899e3506">
<p><code>-commitBatch</code> <span class="italic"><code>commit_size</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3556 d60899e3509">
<p>Specifies the number of inserted records after which a commit is to be executed. If the autocommit is <code>TRUE</code> (the default), then setting <code>commitBatch</code> has no consequence.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3574" headers="d60899e3506">
<p><code>-rowTag</code> <span class="italic"><code>tag_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3574 d60899e3509">
<p>Specifies the <code>row</code> tag, which is tag used to enclose the data corresponding to a database row. The default row tag is <code>&lt;ROW&gt;</code>. If you specify an empty string for the row tag, then XSU omits the row tag.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3592" headers="d60899e3506">
<p><code>-dateFormat</code> <span class="italic"><code>date_format</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3592 d60899e3509">
<p>Specifies the date format for the date values in the XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3604" headers="d60899e3506">
<p><code>-withEscaping</code></p>
</td>
<td class="cellalignment735" headers="d60899e3604 d60899e3509">
<p>Turns on reverse mapping if SQL to XML name escaping was used when generating the doc.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3612" headers="d60899e3506">
<p><code>-ignoreCase</code></p>
</td>
<td class="cellalignment735" headers="d60899e3612 d60899e3509">
<p>Makes the matching of the column names with tag names case insensitive. For example, <code>EmpNo</code> matches with <code>EMPNO</code> if <code>ignoreCase</code> is on.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3629" headers="d60899e3506">
<p><code>-preserveWhitespace</code></p>
</td>
<td class="cellalignment735" headers="d60899e3629 d60899e3509">
<p>Preserves the white space in the inserted XML document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3637" headers="d60899e3506">
<p><code>-setXSLT</code> <span class="italic"><code>URI</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3637 d60899e3509">
<p>Specifies the XSLT to apply to the XML document before inserting.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3648" headers="d60899e3506">
<p><code>-setXSLTRef</code> <span class="italic"><code>URI</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3648 d60899e3509">
<p>Sets the XSLT external entity reference.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3661" headers="d60899e3506">
<p><code>-fileName</code> <span class="italic"><code>file_name</code></span> | <code>-URL</code> <span class="italic"><code>URL</code></span> | <code>-xmlDoc</code> <span class="italic"><code>xml_document</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3661 d60899e3509">
<p>Specifies the XML document to insert: a local file, a URL, or an XML document as a string on the command line.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d60899e3686" headers="d60899e3506">
<p><span class="italic"><code>table_name</code></span></p>
</td>
<td class="cellalignment735" headers="d60899e3686 d60899e3509">
<p>Specifies the name of the table to put the values into.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
<a id="ADXDK19416"></a>
<div class="props_rev_3"><a id="GUID-174D770C-41CE-48E3-A55D-1ADFEF0E6465"></a>
<h4 id="ADXDK-GUID-174D770C-41CE-48E3-A55D-1ADFEF0E6465" class="sect4"><span class="enumeration_section">13.2.4.1</span> Generating XML with the XSU Command-Line Utility</h4>
<div>
<div class="section">
<p>To generate XML from the database schema use the <code>getXML</code> parameter. For example, to generate an XML document by querying the <code>employees</code> table in the <code>hr</code> schema, you can use this syntax:</p>
<pre dir="ltr">java OracleXML getXML -user &#34;hr/<span class="italic">password</span>&#34; &#34;SELECT * FROM employees&#34;
</pre>
<p>The preceding command performs these tasks:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Connects to the current default database</span></li>
<li><span>Executes the specified <code>SELECT</code> query</span></li>
<li><span>Converts the SQL result set to XML</span></li>
<li><span>Prints the XML to standard output</span></li>
</ol>
<div class="section">
<p>The <code>getXML</code> parameter supports a wide range of options, which are explained in <a href="adx_j_xsu.htm#GUID-939256D1-157F-4736-B74D-3288C60A3069__BABGDFFJ" title="Describes the getXML options">Table 13-2</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK071"></a>
<div class="props_rev_3"><a id="GUID-02BD7152-7DDE-4525-81B5-9DA84AD57113"></a>
<h4 id="ADXDK-GUID-02BD7152-7DDE-4525-81B5-9DA84AD57113" class="sect4"><span class="enumeration_section">13.2.4.2</span> Generating XMLType Data with the XSU Command-Line Utility</h4>
<div>
<div class="section">
<p>You can use XSU to generate XML from tables with <code>XMLType</code> columns. Suppose that you run the demo script <code>setup_xmltype.sql</code> to create and populate the <code>parts</code> table. You can generate XML from this table with XSU:</p>
<pre dir="ltr">java OracleXML getXML -user &#34;hr/<span class="italic">password</span>&#34; -rowTag &#34;Part&#34; &#34;SELECT * FROM parts&#34;
</pre>
<p>The output of the command is shown below:</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
   &lt;Part num=&#34;1&#34;&gt;
      &lt;PARTNO&gt;1735&lt;/PARTNO&gt;
      &lt;PARTNAME&gt;Gizmo&lt;/PARTNAME&gt;
      &lt;PARTDESC&gt;
         &lt;Description&gt;
           &lt;Title&gt;Description of the Gizmo&lt;/Title&gt;
           &lt;Author&gt;John Smith&lt;/Author&gt;
           &lt;Body&gt;
             The &lt;b&gt;Gizmo&lt;/b&gt; is &lt;i&gt;grand&lt;/i&gt;.
           &lt;/Body&gt;
         &lt;/Description&gt;
      &lt;/PARTDESC&gt;
   &lt;/Part&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19417"></a>
<div class="props_rev_3"><a id="GUID-760FF626-748B-4216-B8BC-EF8CC1A2B89A"></a>
<h4 id="ADXDK-GUID-760FF626-748B-4216-B8BC-EF8CC1A2B89A" class="sect4"><span class="enumeration_section">13.2.4.3</span> Performing DML with the XSU Command-Line Utility</h4>
<div>
<div class="section">
<p>To insert an XML document called <code>new_employees.xml</code> into the <code>hr.employees</code> table, use this syntax:</p>
<pre dir="ltr">java OracleXML putXML -user &#34;hr/<span class="italic">password</span>&#34; -fileName &#34;new_employees.xml&#34; employees
</pre>
<p>The preceding command performs these tasks:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Connects to the current database as <code>hr</code></span></li>
<li><span>Reads the XML document named <code>new_emp.xml</code></span></li>
<li><span>Parses the XML document, matching the tags with column names</span></li>
<li><span>Inserts the values appropriately into the <code>employees</code> table</span></li>
</ol>
<div class="section">
<p>The <code>getXML</code> parameter supports a wide range of options, which are explained in <a href="adx_j_xsu.htm#GUID-939256D1-157F-4736-B74D-3288C60A3069__BABGDFFJ" title="Describes the getXML options">Table 13-2</a>.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="ADXDK1010"></a><a id="ADXDK19418"></a>
<div class="props_rev_3"><a id="GUID-4922BDF4-3588-4348-9509-16BB8AB1A691"></a>
<h2 id="ADXDK-GUID-4922BDF4-3588-4348-9509-16BB8AB1A691" class="sect2"><span class="enumeration_section">13.3</span> Programming with the XSU Java API</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-40A59B26-5039-45FB-BCC0-6C886C573E80">Generating a String with OracleXMLQuery</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-3839ED46-BD8B-4069-972A-DEBB031C6F57">Generating a DOM Tree with OracleXMLQuery</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-0C64EE95-DAF1-4A51-B35E-C1C0C10C96C5">Paginating Results with OracleXMLQuery</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-788FD888-45E4-4B7F-91CD-0151398196CF">Generating Scrollable Result Sets</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-B77E1941-0B4C-4B73-8EBC-25357E3DA75C">Generating XML from Cursor Objects</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-555483DC-5765-4E8B-B99A-96832941FB54">Inserting Rows with OracleXMLSave</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-646799B4-73D6-4AD1-94F1-E614343D65F6">Updating Rows with OracleXMLSave</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-2E4CC584-0613-4BC2-9C9B-252AE6A91A84">Deleting Rows with OracleXMLSave</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-6A0346A5-E903-4819-A4CA-BCC00EBA732A">Handling XSU Java Exceptions</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19419"></a>
<div class="props_rev_3"><a id="GUID-40A59B26-5039-45FB-BCC0-6C886C573E80"></a>
<h3 id="ADXDK-GUID-40A59B26-5039-45FB-BCC0-6C886C573E80" class="sect3"><span class="enumeration_section">13.3.1</span> Generating a String with OracleXMLQuery</h3>
<div>
<div class="section">
<p>The <code>testXMLSQL.java</code> demo program uses XSU to generate XML as a <code>String</code> object. This program queries the <code>hr.employees</code> table and prints the result set to standard output.</p>
<p>The <code>testXMLSQL.java</code> program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Register the JDBC driver and create a database connection. This code fragment uses the OCI JDBC driver and connects with the user name <code>hr</code>:</span>
<div>
<pre dir="ltr">import oracle.jdbc.*;...Connection conn  = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
...
private static Connection getConnection(String username, String password)
    throws SQLException
{
// register the JDBC driver
  DriverManager.registerDriver(new oracle.jdbc.OracleDriver()); 
// create the connection using the OCI driver
  Connection conn =
    DriverManager.getConnection(&#34;jdbc:oracle:oci:@&#34;,username,password);
  return conn;
}
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML query object and initialize it with a SQL query. This code fragment initializes the object with a <code>SELECT</code> statement on <code>hr.employees</code>:</span>
<div>
<pre dir="ltr">OracleXMLQuery qry = new OracleXMLQuery(conn, &#34;SELECT * FROM employees&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Get the query result set as a <code>String</code> object. The <code>getXMLString()</code> method transforms the object-relational data specified in the constructor into an XML document. This example shows this technique:</span>
<div>
<pre dir="ltr">String str = qry.getXMLString();
</pre></div>
</li>
<li class="stepexpand"><span>Close the query object to release any resources, as shown in this code:</span>
<div>
<pre dir="ltr">qry.close();
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK19420"></a>
<div class="props_rev_3"><a id="GUID-EDD35813-2EC5-485F-9FF9-A62E6524F4B4"></a>
<h4 id="ADXDK-GUID-EDD35813-2EC5-485F-9FF9-A62E6524F4B4" class="sect4"><span class="enumeration_section">13.3.1.1</span> Running the testXMLSQL Program</h4>
<div>
<div class="section">
<p>To run the <code>testXMLSQL.java</code> program perform these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Compile <code>testXMLSQL.java</code> with <code>javac</code>.</span></li>
<li><span>Execute <code>java testXMLSQL</code> on the command line.</span></li>
</ol>
<div class="section">
<p>You must have the <code>CLASSPATH</code> pointing to this directory for the Java executable to find the class. Alternatively, use visual Java tools such as Oracle JDeveloper to compile and run this program. When run, this program prints out the XML file to the screen. This code shows sample output with some rows edited out:</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
   &lt;ROW num=&#34;1&#34;&gt;
      &lt;EMPLOYEE_ID&gt;100&lt;/EMPLOYEE_ID&gt;
      &lt;FIRST_NAME&gt;Steven&lt;/FIRST_NAME&gt;
      &lt;LAST_NAME&gt;King&lt;/LAST_NAME&gt;
      &lt;EMAIL&gt;SKING&lt;/EMAIL&gt;
      &lt;PHONE_NUMBER&gt;515.123.4567&lt;/PHONE_NUMBER&gt;
      &lt;HIRE_DATE&gt;6/17/1987 0:0:0&lt;/HIRE_DATE&gt;
      &lt;JOB_ID&gt;AD_PRES&lt;/JOB_ID&gt;
      &lt;SALARY&gt;24000&lt;/SALARY&gt;
      &lt;DEPARTMENT_ID&gt;90&lt;/DEPARTMENT_ID&gt;
   &lt;/ROW&gt;
&lt;!-- ROW num=&#34;2&#34; through num=&#34;107&#34; ... --&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19421"></a>
<div class="props_rev_3"><a id="GUID-3839ED46-BD8B-4069-972A-DEBB031C6F57"></a>
<h3 id="ADXDK-GUID-3839ED46-BD8B-4069-972A-DEBB031C6F57" class="sect3"><span class="enumeration_section">13.3.2</span> Generating a DOM Tree with OracleXMLQuery</h3>
<div>
<div class="section">
<p>To generate a DOM tree from the XML generated by XSU, you can directly request a DOM document from XSU. This technique saves the overhead of creating a string representation of the XML document and then parsing it to generate the DOM tree.</p>
<p>XSU invokes the Oracle XML parser to construct the DOM tree from the data values. The <code>domTest.java</code> demo program generates a DOM tree and then traverses it in document order, printing the nodes one by one.</p>
<p>The first two steps in the <code>domTest.java</code> program are the same as in the <code>testXMLSQL.java</code> program described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-40A59B26-5039-45FB-BCC0-6C886C573E80">Generating a String with OracleXMLQuery</a>.&#34;</span> The program proceeds as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Get the DOM by invoking <code>getXMLDOM()</code> method. The following example shows this technique:</span>
<div>
<pre dir="ltr">XMLDocument domDoc = (XMLDocument)qry.getXMLDOM();
</pre></div>
</li>
<li class="stepexpand"><span>Print the DOM tree. The following code prints to standard output:</span>
<div>
<pre dir="ltr">domDoc.print(System.out);
</pre>
<p>You can also create a <code>StringWriter</code> and wrap it in a <code>PrintWriter</code>:</p>
<pre dir="ltr">StringWriter s = new StringWriter(10000);
domDoc.print(new PrintWriter(s));
System.out.println(&#34; The string version ---&gt; \n&#34;+s.toString());
</pre></div>
</li>
</ol>
<div class="section">
<p>After compiling the program, run it from the command line:</p>
<pre dir="ltr">java domTest
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK1011"></a><a id="ADXDK19422"></a>
<div class="props_rev_3"><a id="GUID-0C64EE95-DAF1-4A51-B35E-C1C0C10C96C5"></a>
<h3 id="ADXDK-GUID-0C64EE95-DAF1-4A51-B35E-C1C0C10C96C5" class="sect3"><span class="enumeration_section">13.3.3</span> Paginating Results with OracleXMLQuery</h3>
<div>
<div class="section">
<p class="subhead3">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-F777424E-1212-4F8E-A134-3CD61A07DDB0">Limiting the Number of Rows in the Result Set</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-9CECA907-B96B-4165-B774-9D9F777C6DBB">Keeping the Object Open for the Duration of the User&#39;s Session</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-790B346F-11A5-493A-B34A-E972069F95EC">Paginating Results with OracleXMLQuery: Example</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19424"></a><a id="ADXDK19423"></a>
<div class="props_rev_3"><a id="GUID-F777424E-1212-4F8E-A134-3CD61A07DDB0"></a>
<h4 id="ADXDK-GUID-F777424E-1212-4F8E-A134-3CD61A07DDB0" class="sect4"><span class="enumeration_section">13.3.3.1</span> Limiting the Number of Rows in the Result Set</h4>
<div>
<div class="section">
<p>In <code>testXMLSQL.java</code> and <code>domTest.java</code>, XSU generated XML from all rows returned by the query. Suppose that you query a table that contains 1000 rows, but you want only 100 rows at a time. One approach is to execute one query to get the first 100 rows, another to get the next 100 rows, and so on. With this technique you cannot skip the first five rows of the query and then generate the result. To avoid these problems, use these Java methods:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>OracleXMLSave.setSkipRows()</code> forces XSU to skip the desired number of rows before starting to generate the result. The command-line equivalent to this method is the <code>-skipRows</code> parameter.</p>
</li>
<li>
<p><code>OracleXMLSave.setMaxRows()</code> limits the number of rows converted to XML. The command-line equivalent to this method is the <code>-maxRows</code> parameter.</p>
</li>
</ul>
<p><a href="adx_j_xsu.htm#GUID-F777424E-1212-4F8E-A134-3CD61A07DDB0__BABHCFIG">Example 13-1</a> sets <code>skipRows</code> to a value of <code>5</code> and <code>maxRows</code> to a value of <code>1</code>, which causes XSU to skip the first 5 rows and then generate XML for the next row when querying the <code>hr.employees</code> table.</p>
<p>The following shows sample output (only row 6 of the query result set is returned):</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
   &lt;ROW num=&#34;6&#34;&gt;
      &lt;EMPLOYEE_ID&gt;105&lt;/EMPLOYEE_ID&gt;
      &lt;FIRST_NAME&gt;David&lt;/FIRST_NAME&gt;
      &lt;LAST_NAME&gt;Austin&lt;/LAST_NAME&gt;
      &lt;EMAIL&gt;DAUSTIN&lt;/EMAIL&gt;
      &lt;PHONE_NUMBER&gt;590.423.4569&lt;/PHONE_NUMBER&gt;
      &lt;HIRE_DATE&gt;6/25/1997 0:0:0&lt;/HIRE_DATE&gt;
      &lt;JOB_ID&gt;IT_PROG&lt;/JOB_ID&gt;
      &lt;SALARY&gt;4800&lt;/SALARY&gt;
      &lt;MANAGER_ID&gt;103&lt;/MANAGER_ID&gt;
      &lt;DEPARTMENT_ID&gt;60&lt;/DEPARTMENT_ID&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-F777424E-1212-4F8E-A134-3CD61A07DDB0__BABHCFIG">
<p class="titleinexample">Example 13-1 Specifying skipRows and maxRows on the Command Line</p>
<pre dir="ltr">java OracleXML getXML -user &#34;hr/<span class="italic">password</span>&#34; -skipRows 5 -maxRows 1 \
  &#34;SELECT * FROM employees&#34;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19425"></a>
<div class="props_rev_3"><a id="GUID-9CECA907-B96B-4165-B774-9D9F777C6DBB"></a>
<h4 id="ADXDK-GUID-9CECA907-B96B-4165-B774-9D9F777C6DBB" class="sect4"><span class="enumeration_section">13.3.3.2</span> Keeping the Object Open for the Duration of the User&#39;s Session</h4>
<div>
<div class="section">
<p>In some situations, you might want to keep the query object open for the duration of the user session. You can handle such cases with the <code>maxRows()</code> method and the <code>keepObjectOpen()</code> method.</p>
<p>Consider a web search engine that paginates search results. The first page lists 10 results, the next page lists 10 more, and so on. To perform this task with XSU, request 10 rows at a time and keep the <code>ResultSet</code> open so that the next time you ask XSU for more results, it starts generating from where the last generation finished. If <code>OracleXMLQuery</code> creates a result set from the SQL query string, then it typically closes the <code>ResultSet</code> internally because it assumes no more results are required. Thus, you must invoke <code>keepObjectOpen()</code> to keep the cursor active.</p>
<p>A different case requiring an open query object is when the number of rows or number of columns in a row is very large. In this case, you can generate multiple small documents rather than one large document.</p>
<div class="infoboxnotealso" id="GUID-9CECA907-B96B-4165-B774-9D9F777C6DBB__GUID-2BE85F16-6F79-4219-A371-757B907264D1">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_xsu.htm#GUID-790B346F-11A5-493A-B34A-E972069F95EC">Paginating Results with OracleXMLQuery: Example</a>&#34;</span></p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19426"></a>
<div class="props_rev_3"><a id="GUID-790B346F-11A5-493A-B34A-E972069F95EC"></a>
<h4 id="ADXDK-GUID-790B346F-11A5-493A-B34A-E972069F95EC" class="sect4"><span class="enumeration_section">13.3.3.3</span> Paginating Results with OracleXMLQuery: Example</h4>
<div>
<div class="section">
<p>The <code>paginateResults.java</code> program shows how you can generate an XML page that paginates results. The output XML displays only 20 rows of the <code>hr</code> table.</p>
<p>The first step of the <code>paginateResults.java</code> program, which creates the connection, is the same as in <code>testXMLSQL.java</code>. The program continues as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a SQL statement object and initialize it with a SQL query. The following code fragment sets two options in <code>java.sql.ResultSet</code>:</span>
<div>
<pre dir="ltr">Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                                      ResultSet.CONCUR_READ_ONLY);
</pre></div>
</li>
<li class="stepexpand"><span>Create the query as a string and execute it by invoking <code>Statement.executeQuery()</code>. The return object is of type <code>ResultSet</code>. The following example shows this technique:</span>
<div>
<pre dir="ltr">String sCmd = &#34;SELECT first_name, last_name FROM hr.employees&#34;; 
ResultSet rs = stmt.executeQuery(sCmd); 
</pre></div>
</li>
<li class="stepexpand"><span>Create the query object, as shown in this code:</span>
<div>
<pre dir="ltr">OracleXMLQuery xmlQry = new OracleXMLQuery(conn, rs);
</pre></div>
</li>
<li class="stepexpand"><span>Configure the query object. The following code specifies that the query object is open for the duration of the session. It also limits the number of rows returned to 20:</span>
<div>
<pre dir="ltr">xmlQry.keepObjectOpen(true); 
xmlQry.setRowsetTag(&#34;ROWSET&#34;); 
xmlQry.setRowTag(&#34;ROW&#34;); 
xmlQry.setMaxRows(20); 
</pre></div>
</li>
<li class="stepexpand"><span>Retrieve the result as a <code>String</code> and print:</span>
<div>
<pre dir="ltr">String sXML = xmlQry.getXMLString(); 
System.out.println(sXML);
</pre></div>
</li>
</ol>
<div class="section">
<p>After compiling the program, run it from the command line:</p>
<pre dir="ltr">java paginateResults
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19427"></a>
<div class="props_rev_3"><a id="GUID-788FD888-45E4-4B7F-91CD-0151398196CF"></a>
<h3 id="ADXDK-GUID-788FD888-45E4-4B7F-91CD-0151398196CF" class="sect3"><span class="enumeration_section">13.3.4</span> Generating Scrollable Result Sets</h3>
<div>
<div class="section">
<p>In some situations, you might want to perform a query and then retrieve a previous page of results from within the result set. To enable scrolling, instantiate the <code>Oracle.jdbc.ResultSet</code> class. You can use the <code>ResultSet</code> object to move back and forth within the result set and use XSU to generate XML each time.</p>
<p>The <code>pageTest.java</code> program shows how to use the JDBC <code>ResultSet</code> to generate XML a page at a time. Using <code>ResultSet</code> may be necessary in cases that are not handled directly by XSU, for example, when setting the batch size and binding values.</p>
<p>The <code>pageTest.java</code> program creates a <code>pageTest</code> object and initializes it with a SQL query. The constructor for the <code>pageTest</code> object performs these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC connection by invoking the same <code>getConnection()</code> method defined in <code>paginateResults.java</code>:</span>
<div>
<pre dir="ltr">Connection conn;
...
conn  = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create a statement:</span>
<div>
<pre dir="ltr">Statement stmt;
...
stmt = conn.createStatement();
</pre></div>
</li>
<li class="stepexpand"><span>Execute the query passed to the constructor to get the scrollable result set. The following code shows this technique:</span>
<div>
<pre dir="ltr">ResultSet rset = stmt.executeQuery(sqlQuery);
</pre></div>
</li>
<li class="stepexpand"><span>Create a query object by passing references to the connection and result set objects to the constructor. The following code fragment shows this technique:</span>
<div>
<pre dir="ltr">OracleXMLQuery qry;
...
qry = new OracleXMLQuery(conn,rset); 
</pre></div>
</li>
<li class="stepexpand"><span>Configure the query object. The following code fragment specifies that the query object be kept open, and that it raise an exception when there are no more rows:</span>
<div>
<pre dir="ltr">qry.keepObjectOpen(true);
qry.setRaiseNoRowsException(true);
qry.setRaiseException(true);
</pre></div>
</li>
<li class="stepexpand"><span>After creating the query object by passing it the string <code>&#34;SELECT * FROM employees&#34;</code>, the program loops through the result set. The <code>getResult()</code> method receives integer values specifying the start row and end row of the set. It sets the maximum number of rows to retrieve by calculating the difference of these values and then retrieves the result as a string. The following <code>while</code> loop retrieves and prints ten rows at a time:</span>
<div>
<pre dir="ltr">int i = 0;
while ((str = test.getResult(i,i+10))!= null)
{
  System.out.println(str);
  i+= 10;
}
</pre></div>
</li>
</ol>
<div class="section">
<p>After compiling the program, run it from the command line:</p>
<pre dir="ltr">java pageTest
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19428"></a>
<div class="props_rev_3"><a id="GUID-B77E1941-0B4C-4B73-8EBC-25357E3DA75C"></a>
<h3 id="ADXDK-GUID-B77E1941-0B4C-4B73-8EBC-25357E3DA75C" class="sect3"><span class="enumeration_section">13.3.5</span> Generating XML from Cursor Objects</h3>
<div>
<div class="section">
<p>The <code>OracleXMLQuery</code> class provides XML conversion only for query strings or <code>ResultSet</code> objects. If your program uses PL/SQL procedures that return <code>REF</code> cursors, then how do you perform the conversion? You can use the <code>ResultSet</code> conversion mechanism described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-788FD888-45E4-4B7F-91CD-0151398196CF">Generating Scrollable Result Sets</a>.&#34;</span></p>
<p><code>REF</code> cursors are references to cursor objects in PL/SQL. These cursor objects are SQL statements over which a program can iterate to get a set of values. The cursor objects are converted into <code>OracleResultSet</code> objects in the Java world. In your Java program you can initialize a <code>CallableStatement</code> object, execute a PL/SQL function that returns a cursor variable, get the <code>OracleResultSet</code> object, and then send it to the <code>OracleXMLQuery</code> object to get the desired XML.</p>
<p>Consider the <code>testRef</code> PL/SQL package defined in the <code>testRef.sql</code> script. It creates a function that defines a <code>REF</code> cursor and returns it. Every time the <code>testRefCur</code> PL/SQL function is called, it opens a cursor object for the <code>SELECT</code> query and returns that cursor instance. To convert the object to XML, do this:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Run the <code>testRef.sql</code> script to create the <code>testRef</code> package in the <code>hr</code> schema.</span></li>
<li><span>Compile and run the <code>refCurTest.java</code> program to generate XML from the results of the SQL query defined in the <code>testRefCur</code> function.</span></li>
</ol>
<div class="section">
<p>To apply the style sheet, you can use the <code>applyStylesheet</code> command, which forces the style sheet to be applied before generating the output.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19429"></a>
<div class="props_rev_3"><a id="GUID-555483DC-5765-4E8B-B99A-96832941FB54"></a>
<h3 id="ADXDK-GUID-555483DC-5765-4E8B-B99A-96832941FB54" class="sect3"><span class="enumeration_section">13.3.6</span> Inserting Rows with OracleXMLSave</h3>
<div>
<div class="section">
<p>To insert a document into a table or view, supply the table or view name and then the document. XSU parses the document (if a string is given) and then creates an <code>INSERT</code> statement into which it binds all the values. By default XSU inserts values into all columns of the table or view. An absent element is treated as a <code>NULL</code> value. The following example shows how you can store the XML document generated from the <code>hr.employees</code> table in the table.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19430"></a>
<div class="props_rev_3"><a id="GUID-FBDEFAFC-567F-48C5-85F1-B33680A85CA0"></a>
<h4 id="ADXDK-GUID-FBDEFAFC-567F-48C5-85F1-B33680A85CA0" class="sect4"><span class="enumeration_section">13.3.6.1</span> Inserting XML into All Columns with OracleXMLSave</h4>
<div>
<div class="section">
<p>The <code>testInsert.java</code> demo program inserts XML values into all columns of the <code>hr.employees</code> table.</p>
<p>The program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC OCI connection. The program invokes the same <code>getConnection()</code> method used by the previous examples in this chapter:</span>
<div>
<pre dir="ltr">Connection conn = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML save object. You initialize the object by passing it the <code>Connection</code> reference and the name of the table on which you want to perform DML. The following example shows this technique:</span>
<div>
<pre dir="ltr">OracleXMLSave sav = new OracleXMLSave(conn, &#34;employees&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Insert the data in an input XML document into the <code>hr.employees</code> table. The following code fragment creates a URL from the document file name specified on the command line:</span>
<div>
<pre dir="ltr">sav.insertXML(sav.getURL(argv[0]));
</pre></div>
</li>
<li class="stepexpand"><span>Close the XML save object:</span>
<div>
<pre dir="ltr">sav.close();
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK19431"></a>
<div class="props_rev_3"><a id="GUID-D005B919-A669-4BF9-A22A-2F75ECE3B82D"></a>
<h5 id="ADXDK-GUID-D005B919-A669-4BF9-A22A-2F75ECE3B82D" class="sect5"><span class="enumeration_section">13.3.6.1.1</span> Running the testInsert Program</h5>
<div>
<div class="section">
<p>Assume that you write the <code>new_emp.xml</code> document to describe new employee Janet Smith, who has employee ID 7369. You pass the file name <code>new_emp.xml</code> as an argument to the <code>testInsert</code> program:</p>
<pre dir="ltr">java testInsert &#34;new_emp.xml&#34;
</pre>
<p>The program inserts a new row in the <code>employees</code> table that contains the values for the columns specified. Any absent element inside the row element is treated as <code>NULL</code>.</p>
<p>Running the program generates an <code>INSERT</code> statement of this form:</p>
<pre dir="ltr">INSERT INTO hr.employees 
  (employee_id, first_name, last_name, email, phone_number, hire_date, 
   salary, commission_pct, manager_id, department_id)
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);     
</pre>
<p>XSU matches the element tags in the input XML document that match the column names and binds their values.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19432"></a>
<div class="props_rev_3"><a id="GUID-220FC06C-0D3F-427D-ACEC-B37753B43189"></a>
<h4 id="ADXDK-GUID-220FC06C-0D3F-427D-ACEC-B37753B43189" class="sect4"><span class="enumeration_section">13.3.6.2</span> Inserting XML into a Subset of Columns with OracleXMLSave</h4>
<div>
<div class="section">
<p>In some situations, you might not want to insert values into all columns. For example, the group of values that you get might not be the complete set, requiring you to use triggers or default values for the remaining columns. The <code>testInsertSubset.java</code> demo program shows how to handle this case.</p>
<p>The program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC OCI connection. The program invokes the same <code>getConnection()</code> method used by the previous examples in this chapter:</span>
<div>
<pre dir="ltr">Connection conn = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML save object. Initialize the object by passing it the <code>Connection</code> reference and the name of the table on which you want to perform DML. The following example shows this technique:</span>
<div>
<pre dir="ltr">OracleXMLSave sav = new OracleXMLSave(conn, &#34;employees&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an array of strings. Each element of the array must contain the name of a column in which values are inserted. The following code fragment specifies the names of five columns:</span>
<div>
<pre dir="ltr">String [] colNames = new String[5];
colNames[0] = &#34;EMPLOYEE_ID&#34;;
colNames[1] = &#34;LAST_NAME&#34;;
colNames[2] = &#34;EMAIL&#34;;
colNames[3] = &#34;JOB_ID&#34;;
colNames[4] = &#34;HIRE_DATE&#34;;
</pre></div>
</li>
<li class="stepexpand"><span>Configure the XML save object to update the specified columns. The following statement passes a reference to the array to the <code>OracleXMLSave.setUpdateColumnList()</code> method:</span>
<div>
<pre dir="ltr">sav.setUpdateColumnList(colNames);
</pre></div>
</li>
<li class="stepexpand"><span>Insert the data in an input XML document into the <code>hr.employees</code> table. The following code fragment creates a URL from the document file name specified on the command line:</span>
<div>
<pre dir="ltr">sav.insertXML(sav.getURL(argv[0]));
</pre></div>
</li>
<li class="stepexpand"><span>Close the XML save object:</span>
<div>
<pre dir="ltr">sav.close();
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK19433"></a>
<div class="props_rev_3"><a id="GUID-ACDEFAC1-46BE-4363-90C4-027897AD1AD9"></a>
<h5 id="ADXDK-GUID-ACDEFAC1-46BE-4363-90C4-027897AD1AD9" class="sect5"><span class="enumeration_section">13.3.6.2.1</span> Running the testInsertSubset Program</h5>
<div>
<div class="section">
<p>Assume that you use the <code>new_emp2.xml</code> document to store data for new employee Adams, who has employee ID 7400. You pass <code>new_emp2.xml</code> as an argument to the <code>testInsert</code> program:</p>
<pre dir="ltr">java testInsert new_emp2.xml
</pre>
<p>The program ignores values for the columns that were not specified in the input file. It performs an <code>INSERT</code> for each <code>ROW</code> element in the input and batches the <code>INSERT</code> statements by default.</p>
<p>The program generates this <code>INSERT</code> statement:</p>
<pre dir="ltr">INSERT INTO hr.employees (employee_id, last_name, email, job_id, hire_date) 
  VALUES (?, ?, ?, ?, ?);
</pre></div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="ADXDK19434"></a>
<div class="props_rev_3"><a id="GUID-646799B4-73D6-4AD1-94F1-E614343D65F6"></a>
<h3 id="ADXDK-GUID-646799B4-73D6-4AD1-94F1-E614343D65F6" class="sect3"><span class="enumeration_section">13.3.7</span> Updating Rows with OracleXMLSave</h3>
<div>
<div class="section">
<p>To update the fields in a table or view, supply the table or view name and then the XML document. XSU parses the document (if a string is given) and then creates one or more <code>UPDATE</code> statements into which it binds all the values. The following examples show how you can use an XML document to update the <code>hr.employees</code> table.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19435"></a>
<div class="props_rev_3"><a id="GUID-06AF6382-FDFC-4FC1-A65B-C0C66F658175"></a>
<h4 id="ADXDK-GUID-06AF6382-FDFC-4FC1-A65B-C0C66F658175" class="sect4"><span class="enumeration_section">13.3.7.1</span> Updating Key Columns with OracleXMLSave</h4>
<div>
<div class="section">
<p>The <code>testUpdate.java</code> demo program updates the <code>hr.employees</code> table by invoking the <code>OracleXMLSave.setKeyColumnList()</code> method.</p>
<p>The <code>testUpdate.java</code> program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC OCI connection. The program invokes the same <code>getConnection()</code> method used by the previous examples in this chapter:</span>
<div>
<pre dir="ltr">Connection conn = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML save object. You initialize the object by passing it the <code>Connection</code> reference and the name of the table on which you want to perform DML. The following example shows this technique:</span>
<div>
<pre dir="ltr">OracleXMLSave sav = new OracleXMLSave(conn, &#34;employees&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create a single-element <code>String</code> array to hold the name of the primary key column in the table to be updated. The following code fragment specifies the name of the <code>employee_id</code> column:</span>
<div>
<pre dir="ltr">String [] keyColNames = new String[1];
colNames[0] = &#34;EMPLOYEE_ID&#34;;
</pre></div>
</li>
<li class="stepexpand"><span>Set the XML save object to the primary key specified in the array. The following statement passes a reference to the <code>keyColNames</code> array to the <code>OracleXMLSave.setKeyColumnList()</code> method:</span>
<div>
<pre dir="ltr">sav.setKeyColumnList(keyColNames);
</pre></div>
</li>
<li class="stepexpand"><span>Update the rows specified in the input XML document. The following statement creates a URL from the file name specified on the command line:</span>
<div>
<pre dir="ltr">sav.updateXML(sav.getURL(argv[0]));
</pre></div>
</li>
<li class="stepexpand"><span>Close the XML save object:</span>
<div>
<pre dir="ltr">sav.close();
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK19437"></a><a id="ADXDK19436"></a>
<div class="props_rev_3"><a id="GUID-E1F2B493-A35D-4069-AE61-310538FA2FF0"></a>
<h5 id="ADXDK-GUID-E1F2B493-A35D-4069-AE61-310538FA2FF0" class="sect5"><span class="enumeration_section">13.3.7.1.1</span> Running the testUpdate Program</h5>
<div>
<div class="section">
<p>You can use XSU to update specified fields in a table. <a href="adx_j_xsu.htm#GUID-E1F2B493-A35D-4069-AE61-310538FA2FF0__BABJCJDJ">Example 13-2</a> shows <code>upd_emp.xml</code>, which contains updated salary and other information for the two employees that you just added, 7369 and 7400.</p>
<p>For updates, supply XSU with the list of key column names in the <code>WHERE</code> clause of the <code>UPDATE</code> statement. In the <code>hr.employees</code> table the <code>employee_id</code> column is the key.</p>
<p>Pass the file name <code>upd_emp.xml</code> as an argument to the preceding program:</p>
<pre dir="ltr">java testUpdate upd_emp.xml
</pre>
<p>The program generates two <code>UPDATE</code> statements. For the first <code>ROW</code> element, the program generates an <code>UPDATE</code> statement to update the <code>SALARY</code> field:</p>
<pre dir="ltr">UPDATE hr.employees SET salary = 3250 WHERE employee_id = 7400;
</pre>
<p>For the second <code>ROW</code> element the program generates this statement:</p>
<pre dir="ltr">UPDATE hr.employees SET job_id = &#39;SA_REP&#39; AND MANAGER_ID = 145 
  WHERE employee_id = 7369;
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-E1F2B493-A35D-4069-AE61-310538FA2FF0__BABJCJDJ">
<p class="titleinexample">Example 13-2 upd_emp.xml</p>
<pre dir="ltr">&lt;?xml version=&#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
 &lt;ROW num=&#34;1&#34;&gt;
    &lt;EMPLOYEE_ID&gt;7400&lt;/EMPLOYEE_ID&gt;
    &lt;SALARY&gt;3250&lt;/SALARY&gt;
 &lt;/ROW&gt;
 &lt;ROW num=&#34;2&#34;&gt;
    &lt;EMPLOYEE_ID&gt;7369&lt;/EMPLOYEE_ID&gt;
    &lt;JOB_ID&gt;SA_REP&lt;/JOB_ID&gt;
    &lt;MANAGER_ID&gt;145&lt;/MANAGER_ID&gt;
 &lt;/ROW&gt;
&lt;!-- additional rows ... --&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19438"></a>
<div class="props_rev_3"><a id="GUID-BF4F12F6-1EC7-4B6D-BEEC-A9D9D5816D8B"></a>
<h4 id="ADXDK-GUID-BF4F12F6-1EC7-4B6D-BEEC-A9D9D5816D8B" class="sect4"><span class="enumeration_section">13.3.7.2</span> Updating a Column List with OracleXMLSave</h4>
<div>
<div class="section">
<p>You may want to update a table by using only a subset of the elements in an XML document. You can achieve this goal by specifying a list of columns. This technique speeds processing because XSU uses the same <code>UPDATE</code> statement with bind variables for all the <code>ROW</code> elements. You can also ignore other tags in the XML document.</p>
<div class="infobox-note" id="GUID-BF4F12F6-1EC7-4B6D-BEEC-A9D9D5816D8B__GUID-5E0033C1-2F3C-4CAA-BBBE-A9E65CDB0A5B">
<p class="notep1">Note:</p>
<p>When you specify a list of columns to update, if an element corresponding to an update column is absent, XSU treats it as <code>NULL</code>.</p>
</div>
<p>Suppose you want to update the salary and job title for each employee and ignore the other data. If you know that all the elements to be updated are the same for all <code>ROW</code> elements in the XML document, then you can use the <code>OracleXMLSave.setUpdateColumnNames()</code> method to specify the columns. The <code>testUpdateList.java</code> program shows this technique.</p>
<p>The <code>testUpdateList.java</code> program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC OCI connection. The program invokes the same <code>getConnection()</code> method used by the previous examples in this chapter:</span>
<div>
<pre dir="ltr">Connection conn = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML save object. You initialize the object by passing it the <code>Connection</code> reference and the name of the table on which you want to perform DML. The following example shows this technique:</span>
<div>
<pre dir="ltr">OracleXMLSave sav = new OracleXMLSave(conn, &#34;employees&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an array of type <code>String</code> to hold the name of the primary key column in the table to be updated. The array contains only one element, which is the name of the primary key column in the table to be updated. The following code fragment specifies the name of the <code>employee_id</code> column:</span>
<div>
<pre dir="ltr">String [] colNames = new String[1];
colNames[0] = &#34;EMPLOYEE_ID&#34;;
</pre></div>
</li>
<li class="stepexpand"><span>Set the XML save object to the primary key specified in the array. The following statement passes a reference to the <code>colNames</code> array to the <code>OracleXMLSave.setKeyColumnList()</code> method:</span>
<div>
<pre dir="ltr">sav.setKeyColumnList(keyColNames);
</pre></div>
</li>
<li class="stepexpand"><span>Create an array of type <code>String</code> to hold the name of the columns to be updated. The following code fragment specifies the name of the <code>employee_id</code> column:</span>
<div>
<pre dir="ltr">String[] updateColNames = new String[2];
updateColNames[0] = &#34;SALARY&#34;;
updateColNames[1] = &#34;JOB_ID&#34;;
</pre></div>
</li>
<li class="stepexpand"><span>Set the XML save object to the list of columns to be updated. The following statement performs this task:</span>
<div>
<pre dir="ltr">sav.setUpdateColumnList(updateColNames);
</pre></div>
</li>
<li class="stepexpand"><span>Update the rows specified in the input XML document. The following code fragment creates a URL from the file name specified on the command line:</span>
<div>
<pre dir="ltr">sav.updateXML(sav.getURL(argv[0]));
</pre></div>
</li>
<li class="stepexpand"><span>Close the XML save object:</span>
<div>
<pre dir="ltr">sav.close();
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK19439"></a>
<div class="props_rev_3"><a id="GUID-F631E856-2DF4-4926-90AA-BFF97840F90F"></a>
<h5 id="ADXDK-GUID-F631E856-2DF4-4926-90AA-BFF97840F90F" class="sect5"><span class="enumeration_section">13.3.7.2.1</span> Running the testUpdateList Program</h5>
<div>
<div class="section">
<p>Suppose that you use the sample XML document <code>upd_emp2.xml</code> to store new data for employees Steven King, who has an employee ID of 100, and William Gietz, who has an employee identifier (ID) of 206. You pass <code>upd_emp2.xml</code> as an argument to the <code>testUpdateList</code> program:</p>
<pre dir="ltr">java testUpdateList upd_emp2.xml
</pre>
<p>In this example, the program generates two <code>UPDATE</code> statements. For the first <code>ROW</code> element, the program generates this statement:</p>
<pre dir="ltr">UPDATE hr.employees SET salary = 8350 AND job_id = &#39;AC_ACCOUNT&#39; 
  WHERE employee_id = 100;
</pre>
<p>For the second <code>ROW</code> element the program generates this statement:</p>
<pre dir="ltr">UPDATE hr.employees SET salary = 25000 AND job_id = &#39;AD_PRES&#39; 
  WHERE employee_id = 206;
</pre></div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="ADXDK19440"></a>
<div class="props_rev_3"><a id="GUID-2E4CC584-0613-4BC2-9C9B-252AE6A91A84"></a>
<h3 id="ADXDK-GUID-2E4CC584-0613-4BC2-9C9B-252AE6A91A84" class="sect3"><span class="enumeration_section">13.3.8</span> Deleting Rows with OracleXMLSave</h3>
<div>
<div class="section">
<p>When deleting from XML documents, you can specify a list of key columns. XSU uses these columns in the <code>WHERE</code> clause of the <code>DELETE</code> statement. If you do not supply the key column names, then XSU creates a new <code>DELETE</code> statement for each <code>ROW</code> element of the XML document. The list of columns in the <code>WHERE</code> clause of the <code>DELETE</code> statement matches those in the <code>ROW</code> element.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19441"></a>
<div class="props_rev_3"><a id="GUID-FD22DD32-C1F3-475E-8F5C-A735E2DC6FFE"></a>
<h4 id="ADXDK-GUID-FD22DD32-C1F3-475E-8F5C-A735E2DC6FFE" class="sect4"><span class="enumeration_section">13.3.8.1</span> Deleting by Row with OracleXMLSave</h4>
<div>
<div class="section">
<p>The <code>testDeleteRow.java</code> demo program accepts an XML document file name as input and deletes the rows corresponding to the elements in the document.</p>
<p>The <code>testDeleteRow.java</code> program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC OCI connection. The program invokes the same <code>getConnection()</code> method used by the previous examples in this chapter:</span>
<div>
<pre dir="ltr">Connection conn = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML save object. You initialize the object by passing it the <code>Connection</code> reference and the name of the table on which you want to perform DML. The following example shows this technique:</span>
<div>
<pre dir="ltr">OracleXMLSave sav = new OracleXMLSave(conn, &#34;employees&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Delete the rows specified in the input XML document. The following code fragment creates a URL from the file name specified on the command line:</span>
<div>
<pre dir="ltr">sav.deleteXML(sav.getURL(argv[0]));
</pre></div>
</li>
<li class="stepexpand"><span>Close the XML save object:</span>
<div>
<pre dir="ltr">sav.close();
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK19442"></a>
<div class="props_rev_3"><a id="GUID-C40831D5-A4B1-47EF-90E4-7C5859D9DBFC"></a>
<h5 id="ADXDK-GUID-C40831D5-A4B1-47EF-90E4-7C5859D9DBFC" class="sect5"><span class="enumeration_section">13.3.8.1.1</span> Running the testDelete Program</h5>
<div>
<div class="section">
<p>This section shows how to delete the employees 7400 and 7369 that you added in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-555483DC-5765-4E8B-B99A-96832941FB54">Inserting Rows with OracleXMLSave</a>.&#34;</span></p>
<p>To make this example work correctly, connect to the database and disable a constraint on the <code>hr.job_history</code> table:</p>
<pre dir="ltr">CONNECT hr
ALTER TABLE job_history
  DISABLE CONSTRAINT JHIST_EMP_FK;
EXIT
</pre>
<p>Now pass <code>upd_emp.xml</code> to the <code>testDeleteRow</code> program:</p>
<pre dir="ltr">java testDeleteRow upd_emp.xml
</pre>
<p>The program forms the <code>DELETE</code> statements based on the tag names present in each <code>ROW</code> element in the XML document. It executes these statements:</p>
<pre dir="ltr">DELETE FROM hr.employees WHERE salary = 3250 AND employee_id = 7400;
DELETE FROM hr.employees WHERE job_id = &#39;SA_REP&#39; AND MANAGER_ID = 145 
  AND employee_id = 7369;
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19443"></a>
<div class="props_rev_3"><a id="GUID-2D3D2A64-0291-4D19-9783-4BD518C8E95D"></a>
<h4 id="ADXDK-GUID-2D3D2A64-0291-4D19-9783-4BD518C8E95D" class="sect4"><span class="enumeration_section">13.3.8.2</span> Deleting by Key with OracleXMLSave</h4>
<div>
<div class="section">
<p>To use only the key values as predicates on the <code>DELETE</code> statement, invoke the <code>OracleXMLSave.setKeyColumnList()</code> method. This approach limits the number of elements used to identify a row, which has the benefit of improving performance by caching the <code>DELETE</code> statement and batching transactions. The <code>testDeleteKey.java</code> program shows this technique.</p>
<p>The <code>testDeleteKey.java</code> program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a JDBC OCI connection. The program invokes the same <code>getConnection()</code> method used by the previous examples in this chapter:</span>
<div>
<pre dir="ltr">Connection conn = getConnection(&#34;hr&#34;,&#34;<span class="italic">password</span>&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML save object. You initialize the object by passing it the <code>Connection</code> reference and the name of the table on which you want to perform DML. The following example shows this technique:</span>
<div>
<pre dir="ltr">OracleXMLSave sav = new OracleXMLSave(conn, &#34;employees&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Create an array of type <code>String</code> to hold the name of the primary key column in the table. The array contains only one element. The following code fragment specifies the name of the <code>employee_id</code> column:</span>
<div>
<pre dir="ltr">String [] colNames = new String[1];
colNames[0] = &#34;EMPLOYEE_ID&#34;;
</pre></div>
</li>
<li class="stepexpand"><span>Set the XML save object to the primary key specified in the array. The following statement passes a reference to the <code>colNames</code> array to the <code>OracleXMLSave.setKeyColumnList()</code> method:</span>
<div>
<pre dir="ltr">sav.setKeyColumnList(keyColNames);
</pre></div>
</li>
<li class="stepexpand"><span>Delete the rows specified in the input XML document. The following code fragment creates a URL from the file name specified on the command line:</span>
<div>
<pre dir="ltr">sav.deleteXML(sav.getURL(argv[0]));
</pre></div>
</li>
<li class="stepexpand"><span>Close the XML save object:</span>
<div>
<pre dir="ltr">sav.close();
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK19444"></a>
<div class="props_rev_3"><a id="GUID-079034DA-8188-4CA1-99DB-519BC2269DCD"></a>
<h5 id="ADXDK-GUID-079034DA-8188-4CA1-99DB-519BC2269DCD" class="sect5"><span class="enumeration_section">13.3.8.2.1</span> Running the testDeleteKey Program</h5>
<div>
<div class="section">
<p>This section shows how to delete employees 7400 and 7369 that you added in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-06AF6382-FDFC-4FC1-A65B-C0C66F658175">Updating Key Columns with OracleXMLSave</a>.&#34;</span> If you deleted these employees in the previous example, you can add them back to the <code>employees</code> table:</p>
<pre dir="ltr">java testInsert new_emp.xml
java testInsert new_emp2.xml
</pre>
<p>Delete employees 7400 and 7369 by passing the same <code>upd_emp.xml</code> document to the <code>testDeleteRow</code> program:</p>
<pre dir="ltr">java testDeleteKey upd_emp.xml
</pre>
<p>The program forms this single generated <code>DELETE</code> statement:</p>
<pre dir="ltr">DELETE FROM hr.employees WHERE employee_id=?;
</pre>
<p>The program executes these <code>DELETE</code> statements, one for each employee:</p>
<pre dir="ltr">DELETE FROM hr.employees WHERE employee_id = 7400;
DELETE FROM hr.employees WHERE employee_id = 7369;
</pre></div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="ADXDK19445"></a>
<div class="props_rev_3"><a id="GUID-6A0346A5-E903-4819-A4CA-BCC00EBA732A"></a>
<h3 id="ADXDK-GUID-6A0346A5-E903-4819-A4CA-BCC00EBA732A" class="sect3"><span class="enumeration_section">13.3.9</span> Handling XSU Java Exceptions</h3>
<div>
<div class="section">
<p>XSU catches all exceptions that occur during processing and throws <code>oracle.xml.sql.OracleXMLSQLException</code><span class="italic">,</span> which is a generic runtime exception. The invoking program does not have to catch this exception if it can still perform the appropriate action. The exception class provides methods to get error messages and also get any existing parent exception.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19446"></a>
<div class="props_rev_3"><a id="GUID-3184503E-9C0D-4DFF-984E-5D1C6512AA42"></a>
<h4 id="ADXDK-GUID-3184503E-9C0D-4DFF-984E-5D1C6512AA42" class="sect4"><span class="enumeration_section">13.3.9.1</span> Getting the Parent Exception</h4>
<div>
<p>The <code>testException.java</code> demo program throws a runtime exception and then gets the parent exception by invoking <code>Exception.getParentException()</code>.</p>
<p>Running the preceding program generates this error message:</p>
<pre dir="ltr">Caught SQL Exception:ORA-00904: &#34;SD&#34;: invalid identifier
</pre></div>
</div>
<a id="ADXDK19447"></a>
<div class="props_rev_3"><a id="GUID-4F096761-00BB-4A94-9368-F91C7ACA9D2C"></a>
<h4 id="ADXDK-GUID-4F096761-00BB-4A94-9368-F91C7ACA9D2C" class="sect4"><span class="enumeration_section">13.3.9.2</span> Raising a No Rows Exception</h4>
<div>
<div class="section">
<p>When there are no rows to process, XSU returns a <code>null</code> string. You can throw an exception every time there are no more rows, however, so that the program can process this exception through exception handlers. When a program invokes <code>OracleXMLQuery.setRaiseNoRowsException()</code>, XSU raises an <code>oracle.xml.sql.OracleXMLSQLNoRowsException</code> whenever there are no rows to generate for the output. This is a runtime exception and need not be caught.</p>
<p>The <code>noRowsTest.java</code> demo program instantiates the <code>pageTest</code> class defined in <code>pageTest.java</code>. The condition to check the termination changed from checking whether the result is <code>null</code> to an exception handler.</p>
<p>The <code>noRowsTest.java</code> program creates a <code>pageTest</code> object and initializes it with a SQL query. The program proceeds as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Configure the query object or raise a no rows exception. The following code fragment shows this technique:</span>
<div>
<pre dir="ltr">pageTest test = new pageTest(&#34;SELECT * from employees&#34;);
...
test.qry.setRaiseNoRowsException(true);
</pre></div>
</li>
<li class="stepexpand"><span>Loop through the result set infinitely, retrieving ten rows at a time. When no rows are available, the program throws an exception. The following code fragment invokes <code>pageTest.nextPage()</code>, which scrolls through the result set ten rows at a time:</span>
<div>
<pre dir="ltr">try
{
  while(true)
    System.out.println(test.nextPage());
}
</pre></div>
</li>
<li class="stepexpand"><span>Catch the no rows exception and print &#34;END OF OUTPUT&#34;. The following code shows this technique:</span>
<div>
<pre dir="ltr">catch(oracle.xml.sql.OracleXMLSQLNoRowsException e)
{
  System.out.println(&#34; END OF OUTPUT &#34;); 
  try
  {
    test.close();
  }
  catch ( Exception ae )
  {
    ae.printStackTrace(System.out);
  }
}
</pre></div>
</li>
</ol>
<div class="section">
<p>After compiling the program, run it from the command line:</p>
<pre dir="ltr">java noRowsTest
</pre></div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="ADXDK1012"></a><a id="ADXDK19448"></a>
<div class="props_rev_3"><a id="GUID-7C83AA79-2285-4C5A-A753-F7B71C78787F"></a>
<h2 id="ADXDK-GUID-7C83AA79-2285-4C5A-A753-F7B71C78787F" class="sect2"><span class="enumeration_section">13.4</span> Programming with the XSU PL/SQL API</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-7AAAD71B-CB30-4CAD-AC58-86A23B4BF656">Generating XML from Simple Queries with DBMS_XMLQuery</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-1D112A7B-D6FF-4497-865A-16EE5AD3CAC8">Specifying Element Names with DBMS_XMLQuery</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-89F298B1-4D2B-43F5-AC89-64A6B679CBD0">Paginating Results with DBMS_XMLQuery</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-E09BFFF7-87F1-4F07-9FB3-D175F8F7B1B0">Setting Style Sheets in XSU</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-4E4849A4-BE3E-4799-9CAE-42ED004D5EE5">Binding Values in XSU</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-E0360DFE-640A-490E-881B-D3F5C66DD823">Inserting XML with DBMS_XMLSave</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-51AA487E-EA62-41EA-B217-265AD8F9E694">Updating with DBMS_XMLSave</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-A5E05E31-FE39-475B-B18D-B8E27C0681A4">Deleting with DBMS_XMLSave</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-A4AF1625-EED1-47EA-9EC5-00FDCD6C0F95">Handling Exceptions in the XSU PL/SQL API</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-41CC4B56-3826-474D-8BE1-D127B1FBC004">Reusing the Context Handle with DBMS_XMLSave</a></p>
</li>
</ul>
<div class="infobox-note" id="GUID-7C83AA79-2285-4C5A-A753-F7B71C78787F__GUID-E7623895-0479-4FBA-BD99-AA42F97C5322">
<p class="notep1">Note:</p>
<p>For increased performance, consider using <a class="olink ARPLS374" target="_blank" href="../ARPLS/d_xmlgen.htm#ARPLS374"><code>DBMS_XMLGen</code></a> and <a class="olink ARPLS801" target="_blank" href="../ARPLS/d_xmlstore.htm#ARPLS801"><code>DBMS_XMLStore</code></a> as alternatives to <code>DBMS_XMLQuery</code> and <code>DBMS_XMLSave</code>. The two former packages are written in C and are built in to the database kernel. You can also use SQL and XML functions such as <code>XMLElement</code> for XML access in the database.</p>
</div>
</div>
<!-- class="section" --></div>
<a id="ADXDK19449"></a>
<div class="props_rev_3"><a id="GUID-7AAAD71B-CB30-4CAD-AC58-86A23B4BF656"></a>
<h3 id="ADXDK-GUID-7AAAD71B-CB30-4CAD-AC58-86A23B4BF656" class="sect3"><span class="enumeration_section">13.4.1</span> Generating XML from Simple Queries with DBMS_XMLQuery</h3>
<div>
<div class="section">
<p>This section shows how you can use the <code>DBMS_XMLQuery</code> package to generate XML from a SQL query. To make the example work, connect to the database as <code>hr</code> and run the <code>printClobOut.sql</code> script. The script creates <code>printClobOut</code>, which is a simple procedure that prints a CLOB to the output buffer. If you run the <code>printClobOut</code> procedure in SQL*Plus, it prints the input CLOB to the screen. Set server output to <code>ON</code> to see the results. You might have to increase your display buffer to see all the output.</p>
<p>Run the <code>simpleQuery.sql</code> script to select 20 rows from the <code>hr.employees</code> table and get an XML document as a CLOB. The program first gets the context handle by passing in a query and then invokes the <code>getXML</code> function to get the CLOB value. The document is in the same encoding as the database character set. This sample application assumes that you created the <code>printClobOut</code> procedure by running <code>printClobOut.sql</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19450"></a>
<div class="props_rev_3"><a id="GUID-1D112A7B-D6FF-4497-865A-16EE5AD3CAC8"></a>
<h3 id="ADXDK-GUID-1D112A7B-D6FF-4497-865A-16EE5AD3CAC8" class="sect3"><span class="enumeration_section">13.4.2</span> Specifying Element Names with DBMS_XMLQuery</h3>
<div>
<div class="section">
<p>With the XSU PL/SQL API you can change the default <code>ROW</code> and the <code>ROWSET</code> element names, which are the default names placed around each row of the result and around the whole output XML document. Use the PL/SQL procedures <code>setRowTagName</code> and <code>setRowSetTagName</code> to accomplish this task.</p>
<p>Connect as <code>hr</code> and run the <code>changeElementName.sql</code> script in SQL*Plus to get the first 20 rows of the <code>employees</code> table as an XML document. The anonymous PL/SQL block changes the <code>ROW</code> and <code>ROWSET</code> element names to <code>EMP</code> and <code>EMPSET</code>. The block invokes the <code>printClobOut</code> procedure that you created by running <code>printClobOut.sql</code>.</p>
<p>The generated XML document has an <code>&lt;EMPSET&gt;</code> document element. Each row is separated with the <code>&lt;EMP&gt;</code> tag.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19451"></a>
<div class="props_rev_3"><a id="GUID-89F298B1-4D2B-43F5-AC89-64A6B679CBD0"></a>
<h3 id="ADXDK-GUID-89F298B1-4D2B-43F5-AC89-64A6B679CBD0" class="sect3"><span class="enumeration_section">13.4.3</span> Paginating Results with DBMS_XMLQuery</h3>
<div>
<div class="section">
<p>You can paginate query results by invoking these PL/SQL functions:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>setMaxRows</code> sets the maximum number of rows to be converted to XML. This maximum is relative to the current row position from which the previous result was generated.</p>
</li>
<li>
<p><code>setSkipRows</code> specifies the number of rows to skip before converting the row values to XML.</p>
</li>
</ul>
<p>Run the <code>paginateResult.sql</code> script to execute an anonymous block that paginates results. It skips the first 3 rows of the <code>employees</code> table and prints the rest of the rows 10 at a time by setting <code>skipRows</code> to 3 for the first batch of 10 rows and then to 0 for the rest of the batches. For multiple fetches, you must determine when there are no more rows to fetch, which you can do by invoking <code>setRaiseNoRowsException</code>. This procedure raises an exception if no rows are written to the CLOB. This exception can be caught and used as the termination condition.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19452"></a>
<div class="props_rev_3"><a id="GUID-E09BFFF7-87F1-4F07-9FB3-D175F8F7B1B0"></a>
<h3 id="ADXDK-GUID-E09BFFF7-87F1-4F07-9FB3-D175F8F7B1B0" class="sect3"><span class="enumeration_section">13.4.4</span> Setting Style Sheets in XSU</h3>
<div>
<div class="section">
<p>The XSU PL/SQL API provides the ability to set style sheets on the generated XML documents as follows:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Set the style sheet header in the result with the <code>setStylesheetHeader</code> procedure. This procedure adds the XML processing instruction that includes the style sheet.</p>
</li>
<li>
<p>Apply a style sheet to the resulting XML document before generation. This method increases performance dramatically because otherwise the XML document must be generated as a CLOB, sent to the parser again, and have the style sheet applied. XSU generates a DOM document, invokes the parser, applies the style sheet and then generates the result. To apply the style sheet to the resulting XML document, use the <code>setXSLT</code> procedure, which uses the style sheet to generate the result.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19453"></a>
<div class="props_rev_3"><a id="GUID-4E4849A4-BE3E-4799-9CAE-42ED004D5EE5"></a>
<h3 id="ADXDK-GUID-4E4849A4-BE3E-4799-9CAE-42ED004D5EE5" class="sect3"><span class="enumeration_section">13.4.5</span> Binding Values in XSU</h3>
<div>
<div class="section">
<p>The XSU PL/SQL API provides the ability to bind values to a SQL statement. The SQL statement can contain named bind variables, which must be prefixed with a colon (<code>:</code>). The <code>bindSQLVariables.sql</code> script runs an anonymous PL/SQL block that binds values for <code>EMPLOYEE_ID</code> and <code>FIRST_NAME</code> to columns in the <code>employees</code> table.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19454"></a>
<div class="props_rev_3"><a id="GUID-E0360DFE-640A-490E-881B-D3F5C66DD823"></a>
<h3 id="ADXDK-GUID-E0360DFE-640A-490E-881B-D3F5C66DD823" class="sect3"><span class="enumeration_section">13.4.6</span> Inserting XML with DBMS_XMLSave</h3>
<div>
<div class="section">
<p>To insert a document into a table or view, supply the table or the view name and then the XML document. XSU parses the XML document (if a string is given) and then creates an <code>INSERT</code> statement into which it binds all the values. By default, XSU inserts values into all the columns of the table or view and treats absent elements as <code>NULL</code>.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19456"></a><a id="ADXDK19457"></a><a id="ADXDK19458"></a><a id="ADXDK19455"></a>
<div class="props_rev_3"><a id="GUID-F31407DC-E845-4C68-9237-452AE22052D2"></a>
<h4 id="ADXDK-GUID-F31407DC-E845-4C68-9237-452AE22052D2" class="sect4"><span class="enumeration_section">13.4.6.1</span> Inserting Values into All Columns with DBMS_XMLSave</h4>
<div>
<div class="section">
<p>Run the <code>insProc.sql</code> demo script to create a PL/SQL stored procedure, <code>insProc</code>, which accepts these parameters:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>An XML document as a <code>CLOB</code></p>
</li>
<li>
<p>The name of the table in which to insert the document</p>
</li>
</ul>
<p>You can invoke the <code>insProc</code> procedure to insert an XML document into the table.</p>
<p>Run the <code>insertClob.sql</code> script to create a table called <code>xmldocument</code> and store an XML document in the table as a <code>CLOB</code>. The XML document describes employee 7370, Liz Gardner, whom you want to insert into the <code>hr.employees</code> table.</p>
<p>Run the <code>insertEmployee.sql</code> script shown in <a href="adx_j_xsu.htm#GUID-F31407DC-E845-4C68-9237-452AE22052D2__BABDGHDD">Example 13-4</a> to call the <code>insProc</code> stored procedure and insert Liz Gardner into the <code>employees</code> table.</p>
<p>As in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-555483DC-5765-4E8B-B99A-96832941FB54">Inserting Rows with OracleXMLSave</a>,&#34;</span> running the <code>callinsProc</code> procedure generates an <code>INSERT</code> statement of the form shown in <a href="adx_j_xsu.htm#GUID-F31407DC-E845-4C68-9237-452AE22052D2__BABJADEA">Example 13-5</a>.</p>
<p>XSU matches the element tags in the input XML document that match the column names and binds their values.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-F31407DC-E845-4C68-9237-452AE22052D2__GUID-8364AE0A-5D84-4E8E-AA41-7C071AFB2D6C">
<p class="titleinexample">Example 13-3 insertClob.sql</p>
<pre dir="ltr">CREATE TABLE hr.xmldocument
  (docid   NUMBER PRIMARY KEY,
  xml_text CLOB);
-- insert an XML document into the CLOB column
INSERT INTO hr.xmldocument (docid,xml_text)
VALUES (1,
       &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
       &lt;ROWSET&gt;
        &lt;ROW num=&#34;1&#34;&gt;
           &lt;EMPLOYEE_ID&gt;7370&lt;/EMPLOYEE_ID&gt;
           &lt;FIRST_NAME&gt;Liz&lt;/FIRST_NAME&gt;
           &lt;LAST_NAME&gt;Gardner&lt;/LAST_NAME&gt;
           &lt;EMAIL&gt;liz.gardner@business.com&lt;/EMAIL&gt;
           &lt;PHONE_NUMBER&gt;650-555-6127&lt;/PHONE_NUMBER&gt;
           &lt;HIRE_DATE&gt;12/18/2004 0:0:0&lt;/HIRE_DATE&gt;
           &lt;SALARY&gt;3000&lt;/SALARY&gt;
           &lt;COMMISSION_PCT&gt;0&lt;/COMMISSION_PCT&gt;
           &lt;JOB_ID&gt;SH_CLERK&lt;/JOB_ID&gt;
           &lt;MANAGER_ID&gt;103&lt;/MANAGER_ID&gt;
           &lt;DEPARTMENT_ID&gt;20&lt;/DEPARTMENT_ID&gt;
        &lt;/ROW&gt;
       &lt;/ROWSET&gt;&#39;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-F31407DC-E845-4C68-9237-452AE22052D2__BABDGHDD">
<p class="titleinexample">Example 13-4 insertEmployee.sql</p>
<pre dir="ltr">DECLARE
  v_xml_text CLOB;
BEGIN
  SELECT xml_text 
    INTO v_xml_text
  FROM hr.xmldocument
  WHERE docid = 1;
  insProc(v_xml_text, &#39;employees&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-F31407DC-E845-4C68-9237-452AE22052D2__BABJADEA">
<p class="titleinexample">Example 13-5 Form of the INSERT Statement</p>
<pre dir="ltr">INSERT INTO hr.employees 
  (employee_id, first_name, last_name, email, phone_number, hire_date, 
   salary, commission_pct, manager_id, department_id)
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);     
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19460"></a><a id="ADXDK19461"></a><a id="ADXDK19459"></a>
<div class="props_rev_3"><a id="GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05"></a>
<h4 id="ADXDK-GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05" class="sect4"><span class="enumeration_section">13.4.6.2</span> Inserting into a Subset of Columns with DBMS_XMLSave</h4>
<div>
<div class="section">
<p>As explained in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-220FC06C-0D3F-427D-ACEC-B37753B43189">Inserting XML into a Subset of Columns with OracleXMLSave</a>,&#34;</span> you may not want to insert values into all columns. You can create a list of column names for insert processing and pass it to the <code>DBMS_XMLSave</code> procedure. You can set these values by invoking the <code>setUpdateColumnName</code> procedure repeatedly and passing in a column name to update every time. Clear the column name settings by invoking <code>clearUpdateColumnList</code><span class="italic">.</span></p>
<p>Run the <code>testInsert.sql</code> demo script to create a PL/SQL stored procedure called <code>testInsert</code>. You can use this procedure to insert XML data of type CLOB into the <code>hr.employees</code> table.</p>
<p>Run the <code>insertClob2.sql</code> script shown in <a href="adx_j_xsu.htm#GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05__BABDIHBI">Example 13-6</a> to insert an XML document describing new employee Jordan into a CLOB column of the <code>xmldocument</code> table. The document does not contain an element corresponding to every column in the <code>employees</code> table.</p>
<p>Running the <code>insertEmployee2.sql</code> script shown in <a href="adx_j_xsu.htm#GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05__BABDBECH">Example 13-7</a> inserts the data for employee Jim Jordan into a subset of the columns in the <code>hr.employees</code> table.</p>
<p>As in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-220FC06C-0D3F-427D-ACEC-B37753B43189">Inserting XML into a Subset of Columns with OracleXMLSave</a>,&#34;</span> invoking <code>testInsert</code> generates this <code>INSERT</code> statement:</p>
<pre dir="ltr">INSERT INTO hr.employees (employee_id, last_name, email, job_id, hire_date) 
  VALUES (?, ?, ?, ?, ?);
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05__BABDIHBI">
<p class="titleinexample">Example 13-6 insertClob2.sql</p>
<pre dir="ltr">-- insert an XML document into the CLOB column  of the xmldocument table with only 
-- some of the possible elements
INSERT INTO hr.xmldocument (docid, xml_text)
VALUES (2,
       &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
       &lt;ROWSET&gt;
        &lt;ROW num=&#34;1&#34;&gt;
           &lt;EMPLOYEE_ID&gt;7401&lt;/EMPLOYEE_ID&gt;
           &lt;LAST_NAME&gt;Jordan&lt;/LAST_NAME&gt;
           &lt;EMAIL&gt;jim.jordan@business.com&lt;/EMAIL&gt;
           &lt;JOB_ID&gt;SH_CLERK&lt;/JOB_ID&gt;
           &lt;HIRE_DATE&gt;12/17/2004 0:0:0&lt;/HIRE_DATE&gt;
        &lt;/ROW&gt;
       &lt;/ROWSET&gt;&#39;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05__BABDBECH">
<p class="titleinexample">Example 13-7 insertEmployee2.sql</p>
<pre dir="ltr">DECLARE
  v_xml_text CLOB;
BEGIN
  SELECT xml_text 
    INTO v_xml_text
  FROM hr.xmldocument
  WHERE docid = 2;
  testInsert(v_xml_text);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19462"></a>
<div class="props_rev_3"><a id="GUID-51AA487E-EA62-41EA-B217-265AD8F9E694"></a>
<h3 id="ADXDK-GUID-51AA487E-EA62-41EA-B217-265AD8F9E694" class="sect3"><span class="enumeration_section">13.4.7</span> Updating with DBMS_XMLSave</h3>
<div>
<div class="section">
<p>As described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-646799B4-73D6-4AD1-94F1-E614343D65F6">Updating Rows with OracleXMLSave</a>,&#34;</span> you can use an XML document to update specified fields in a table. You can either specify a column to use as a key or pass a list of columns for updating.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19464"></a><a id="ADXDK19465"></a><a id="ADXDK19463"></a>
<div class="props_rev_3"><a id="GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052"></a>
<h4 id="ADXDK-GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052" class="sect4"><span class="enumeration_section">13.4.7.1</span> Updating Key Columns with DBMS_XMLSave</h4>
<div>
<div class="section">
<p>Run the <code>testUpdateKey.sql</code> script to create a PL/SQL procedure called <code>testUpdateKey</code>. This procedure uses the <code>employee_id</code> column of the <code>hr.employees</code> table as a primary key.</p>
<p>Run the <code>insertClob3.sql</code> script shown in shown in <a href="adx_j_xsu.htm#GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052__BABDFCGH">Example 13-8</a> to insert an XML document into the CLOB column of the <code>xmldocument</code> table. The document specifies a new salary for employee 7400 and a new job ID and manager ID for employee 7369.</p>
<p>Run the <code>updateEmployee.sql</code> script shown in <a href="adx_j_xsu.htm#GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052__BABJJGAF">Example 13-9</a> to pass the XML document to the <code>testUpdateKey</code> procedure and generate two <code>UPDATE</code> statements.</p>
<p>For the first <code>ROW</code> element, the program generates an <code>UPDATE</code> statement:</p>
<pre dir="ltr">UPDATE hr.employees SET salary = 3250 WHERE employee_id = 7400;
</pre>
<p>For the second <code>ROW</code> element the program generates this statement:</p>
<pre dir="ltr">UPDATE hr.employees SET job_id = &#39;SA_REP&#39; AND MANAGER_ID = 145 
  WHERE employee_id = 7369;
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052__BABDFCGH">
<p class="titleinexample">Example 13-8 insertClob3.sql</p>
<pre dir="ltr">INSERT INTO hr.xmldocument (docid, xml_text)
VALUES (3,
       &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
        &lt;ROWSET&gt;
         &lt;ROW num=&#34;1&#34;&gt;
            &lt;EMPLOYEE_ID&gt;7400&lt;/EMPLOYEE_ID&gt;
            &lt;SALARY&gt;3250&lt;/SALARY&gt;
         &lt;/ROW&gt;
         &lt;ROW num=&#34;2&#34;&gt;
            &lt;EMPLOYEE_ID&gt;7369&lt;/EMPLOYEE_ID&gt;
            &lt;JOB_ID&gt;SA_REP&lt;/JOB_ID&gt;
            &lt;MANAGER_ID&gt;145&lt;/MANAGER_ID&gt;
         &lt;/ROW&gt;
        &lt;/ROWSET&gt;&#39;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-82EB2FE4-7A51-47F8-8CEE-EA4DAA3D0052__BABJJGAF">
<p class="titleinexample">Example 13-9 updateEmployee.sql</p>
<pre dir="ltr">DECLARE
  v_xml_text CLOB;
BEGIN
  SELECT xml_text 
    INTO v_xml_text
  FROM hr.xmldocument
  WHERE docid = 3;
  testUpdateKey(v_xml_text);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19467"></a><a id="ADXDK19466"></a>
<div class="props_rev_3"><a id="GUID-1C70DB24-7F7B-45F2-9D8F-E5A9904C7932"></a>
<h4 id="ADXDK-GUID-1C70DB24-7F7B-45F2-9D8F-E5A9904C7932" class="sect4"><span class="enumeration_section">13.4.7.2</span> Specifying a List of Columns with DBMS_XMLSave: Example</h4>
<div>
<div class="section">
<p>As described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-BF4F12F6-1EC7-4B6D-BEEC-A9D9D5816D8B">Updating a Column List with OracleXMLSave</a>,&#34;</span> you can specify a list of columns to update.</p>
<p>Run the <code>testUpdateSubset.sql</code> script creates the PL/SQL procedure <code>testUpdateSubset</code>. The procedure uses the <code>employee_id</code> column as key and updates only the <code>salary</code> and <code>job_id</code> columns of the <code>hr.employees</code> table.</p>
<p>Run the <code>insertClob4.sql</code> script to insert an XML document into the <code>xmldocument</code> table. The <code>&lt;ROW&gt;</code> elements in the document describe employees 100 and 206. Each <code>&lt;ROW&gt;</code> element has ten subelements that contain descriptive text.</p>
<p>Run the <code>updateEmployee2.sql</code> script shown in <a href="adx_j_xsu.htm#GUID-1C70DB24-7F7B-45F2-9D8F-E5A9904C7932__BABIAHBD">Example 13-10</a> to pass the XML CLOB to the <code>testUpdateSubset</code> procedure and generate two <code>UPDATE</code> statements.</p>
<p>The procedure updates only those columns specified in the <code>setUpdateColumn</code> procedure, <code>salary</code> and <code>email</code>, for employees 100 and 206.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-1C70DB24-7F7B-45F2-9D8F-E5A9904C7932__BABIAHBD">
<p class="titleinexample">Example 13-10 updateEmployee2.sql</p>
<pre dir="ltr">DECLARE
  v_xml_text CLOB;
BEGIN
  SELECT xml_text 
    INTO v_xml_text
  FROM hr.xmldocument
  WHERE docid = 4;
  testUpdateSubset(v_xml_text);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19468"></a>
<div class="props_rev_3"><a id="GUID-A5E05E31-FE39-475B-B18D-B8E27C0681A4"></a>
<h3 id="ADXDK-GUID-A5E05E31-FE39-475B-B18D-B8E27C0681A4" class="sect3"><span class="enumeration_section">13.4.8</span> Deleting with DBMS_XMLSave</h3>
<div>
<div class="section">
<p>As described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-2E4CC584-0613-4BC2-9C9B-252AE6A91A84">Deleting Rows with OracleXMLSave</a>,&#34;</span> you can supply a list of key columns that XSU uses to determine which rows to delete. XSU specifies these columns in the <code>WHERE</code> clause of the <code>DELETE</code> statement.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19470"></a><a id="ADXDK19469"></a>
<div class="props_rev_3"><a id="GUID-D40642F0-6F37-4559-8BC5-0CA5C9ED31AF"></a>
<h4 id="ADXDK-GUID-D40642F0-6F37-4559-8BC5-0CA5C9ED31AF" class="sect4"><span class="enumeration_section">13.4.8.1</span> Deleting by Row with DBMS_XMLSave: Example</h4>
<div>
<div class="section">
<p>Create the <code>testDeleteRow</code> PL/SQL procedure by running the <code>testDeleteRow.sql</code> script. The procedure deletes a row from the <code>hr.employees</code> table for every <code>&lt;ROW&gt;</code> element in an input XML document.</p>
<p>Suppose you want to delete the employee Jim Jordan that you added in <a href="adx_j_xsu.htm#GUID-3B7A6273-AF14-4B71-9C74-CD75889B3A05__BABDBECH">Example 13-7</a>. Run the <code>deleteEmployeeByRow.sql</code> script shown in <a href="adx_j_xsu.htm#GUID-D40642F0-6F37-4559-8BC5-0CA5C9ED31AF__BABIIJIH">Example 13-11</a> to pass the XML document as a CLOB to the <code>testDeleteRow</code> stored procedure.</p>
<p>The preceding invocation of <code>testDeleteRow</code> generates this <code>DELETE</code> statement:</p>
<pre dir="ltr">DELETE FROM hr.employees
  WHERE employee_id = 7401 AND last_name = &#39;JORDAN&#39;
  AND email = &#39;jim.jordan@business.com&#39; AND job_id = &#39;SH_CLERK&#39;
  AND hire_date = &#39;12/17/2004 0:0:0&#39;;
</pre>
<p>The program forms the <code>DELETE</code> statements based on the tag names present in each <code>&lt;ROW&gt;</code> element in the XML document.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-D40642F0-6F37-4559-8BC5-0CA5C9ED31AF__BABIIJIH">
<p class="titleinexample">Example 13-11 Deleting by Row</p>
<pre dir="ltr">DECLARE
  v_xml_text CLOB;
BEGIN
  SELECT xml_text 
    INTO v_xml_text
  FROM hr.xmldocument
  WHERE docid = 2;
  testDeleteRow(v_xml_text);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19472"></a><a id="ADXDK19471"></a>
<div class="props_rev_3"><a id="GUID-F8A809E4-A3E4-4BE9-8915-D4DE501E5F84"></a>
<h4 id="ADXDK-GUID-F8A809E4-A3E4-4BE9-8915-D4DE501E5F84" class="sect4"><span class="enumeration_section">13.4.8.2</span> Deleting by Key with DBMS_XMLSave: Example</h4>
<div>
<div class="section">
<p>As explained in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-2D3D2A64-0291-4D19-9783-4BD518C8E95D">Deleting by Key with OracleXMLSave</a>,&#34;</span> you can specify a column to use as a primary key for the deletions. Use the <code>DBMS_XMLSave.setKeyColumn</code> function to specify the key.</p>
<p>The <code>testDeleteKey</code> procedure created by running <code>testDeleteKey.sql</code> deletes a row from the <code>employees</code> table for every <code>&lt;ROW&gt;</code> element in an input XML document.</p>
<p>Suppose you want to delete the employee Liz Gardner that you added in <a href="adx_j_xsu.htm#GUID-F31407DC-E845-4C68-9237-452AE22052D2__BABDGHDD">Example 13-4</a>. Run the <code>deleteEmployeeByKey.sql</code> script shown in <a href="adx_j_xsu.htm#GUID-F8A809E4-A3E4-4BE9-8915-D4DE501E5F84__BABHIBFD">Example 13-12</a> to pass the XML document as a CLOB to the <code>testDeleteKey</code> stored procedure.</p>
<p>In the procedure call, XSU generates a single <code>DELETE</code> statement of this form:</p>
<pre dir="ltr">DELETE FROM hr.employees WHERE employee_id=?
</pre>
<p>XSU uses this statement for all <code>ROW</code> elements in the input XML document.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-F8A809E4-A3E4-4BE9-8915-D4DE501E5F84__BABHIBFD">
<p class="titleinexample">Example 13-12 Deleting by Key</p>
<pre dir="ltr">DECLARE
  v_xml_text CLOB;
BEGIN
  SELECT xml_text 
    INTO v_xml_text
  FROM hr.xmldocument
  WHERE docid = 1;
  testDeleteKey(v_xml_text);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19473"></a>
<div class="props_rev_3"><a id="GUID-A4AF1625-EED1-47EA-9EC5-00FDCD6C0F95"></a>
<h3 id="ADXDK-GUID-A4AF1625-EED1-47EA-9EC5-00FDCD6C0F95" class="sect3"><span class="enumeration_section">13.4.9</span> Handling Exceptions in the XSU PL/SQL API</h3>
<div>
<div class="section">
<p>Good PL/SQL coding practice accounts for possible exceptions. The anonymous PL/SQL block in <code>raiseException.sql</code> demonstrates how to invoke the <code>DBMS_XMLQuery.getExceptionContent</code> procedure. Run the script in SQL*Plus to print this error message:</p>
<pre dir="ltr">Exception caught 904 ORA-00904: &#34;Z&#34;: invalid identifier
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19474"></a>
<div class="props_rev_3"><a id="GUID-41CC4B56-3826-474D-8BE1-D127B1FBC004"></a>
<h3 id="ADXDK-GUID-41CC4B56-3826-474D-8BE1-D127B1FBC004" class="sect3"><span class="enumeration_section">13.4.10</span> Reusing the Context Handle with DBMS_XMLSave</h3>
<div>
<div class="section">
<p>In the DML examples described in the preceding sections, you can use the same context handle to perform more than one operation. That is, you can perform more than one <code>INSERT</code> with the same context if all of the insertions access the same table specified when creating the <code>save</code> context. You can also use the same context to mix DML statements.</p>
<p>The <code>testDML.sql</code> script shows how to use the same context and settings to perform DML depending on user input. The example uses a PL/SQL supplied package static variable to store the context so that the same context can be used for all function invocations.</p>
<p>In the <code>testDML</code> package created by the script, you create a context once for the whole package (and thus the session) and reuse the context for multiple DML operations.</p>
<div class="infobox-note" id="GUID-41CC4B56-3826-474D-8BE1-D127B1FBC004__GUID-5BD82B5A-4371-4924-BD6F-40E7C1870F6F">
<p class="notep1">Note:</p>
<p>The key column <code>employee_id</code> is used both for updates and deletes as a way of identifying the row.</p>
</div>
<p>You can call any of the three procedures created by the script to update the <code>employees</code> table:</p>
<pre dir="ltr">testDML.insertXML(xmlclob);
testDML.deleteXML(xmlclob);
testDML.updateXML(xmlclob);
</pre>
<p>Each procedure call uses the same context, which improves the performance of these operations, particularly if these operations are performed frequently.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK1013"></a><a id="ADXDK19475"></a>
<div class="sect2"><a id="GUID-33F51125-6078-4BC0-83BA-A529E2C47724"></a>
<h2 id="ADXDK-GUID-33F51125-6078-4BC0-83BA-A529E2C47724" class="sect2"><span class="enumeration_section">13.5</span> Tips and Techniques for Programming with XSU</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<p>This section provides additional tips and techniques for writing programs with XSU.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-84D83A32-328E-440D-A7F1-244803CAE38E">How XSU Maps Between SQL and XML</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-67C89C5D-ACB8-4DC0-850B-64A3DEA2BC07">How XSU Processes SQL Statements</a></p>
</li>
</ul>
</div>
<a id="ADXDK1014"></a><a id="ADXDK19476"></a>
<div class="props_rev_3"><a id="GUID-84D83A32-328E-440D-A7F1-244803CAE38E"></a>
<h3 id="ADXDK-GUID-84D83A32-328E-440D-A7F1-244803CAE38E" class="sect3"><span class="enumeration_section">13.5.1</span> How XSU Maps Between SQL and XML</h3>
<div>
<p>The fundamental component of a table is a column, whereas the fundamental components of an XML document are elements and attributes. How do tables map to XML documents? For example, if the <code>hr.employees</code> table has a column called <code>last_name</code>, how is this structure represented in XML: as an <code>&lt;EMPLOYEES&gt;</code> element with a <code>last_name</code> attribute or as a <code>&lt;LAST_NAME&gt;</code> element within a different root element? This section answers such questions by describing how SQL maps to XML and the reverse.</p>
<div class="section">
<p class="subhead3">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-15AC5AA9-6628-44A3-BF97-B0C0EBD81976">Default SQL-to-XML Mapping</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-F74783F7-7230-49F0-BE0E-83F04B5C7A37">Default XML-to-SQL Mapping</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-9E8CFEF1-E081-4D54-A397-06823C55F39E">Customizing Generated XML</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19477"></a>
<div class="props_rev_3"><a id="GUID-15AC5AA9-6628-44A3-BF97-B0C0EBD81976"></a>
<h4 id="ADXDK-GUID-15AC5AA9-6628-44A3-BF97-B0C0EBD81976" class="sect4"><span class="enumeration_section">13.5.1.1</span> Default SQL-to-XML Mapping</h4>
<div>
<p>To display data from some column of the <code>hr.employees</code> table as an XML document, run XSU at the command line:</p>
<pre dir="ltr">java OracleXML getXML -user &#34;hr/<span class="italic">password</span>&#34; -withschema \
  &#34;SELECT employee_id, last_name, hire_date FROM employees&#34;
</pre>
<p>XSU outputs an XML document based on the input query. The root element of the document is <code>&lt;DOCUMENT&gt;</code>. The following shows sample output, with extraneous lines replaced by comments:</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;DOCUMENT xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
   &lt;xsd:schema xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
   &lt;!-- children of schema element ... --&gt;
   &lt;/xsd:schema&gt;
   &lt;ROWSET xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
     xsi:noNamespaceSchemaLocation=&#34;#/DOCUMENT/xsd:schema[not(@targetNamespace)]&#34;&gt;
      &lt;ROW num=&#34;1&#34;&gt;
         &lt;EMPLOYEE_ID&gt;100&lt;/EMPLOYEE_ID&gt;
         &lt;LAST_NAME&gt;King&lt;/LAST_NAME&gt;
         &lt;HIRE_DATE&gt;6/17/1987 0:0:0&lt;/HIRE_DATE&gt;
      &lt;/ROW&gt;
      &lt;!-- additional rows ... --&gt;
   &lt;/ROWSET&gt;
&lt;/DOCUMENT&gt;
</pre>
<p>In the generated XML, the rows returned by the SQL query are children of the <code>&lt;ROWSET&gt;</code> element. The XML document has these features:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code>&lt;ROWSET&gt;</code> element has zero or more <code>&lt;ROW&gt;</code> child elements corresponding to the number of rows returned. If the query generates no rows, then no <code>&lt;ROW&gt;</code> elements are included; if the query generates one row, then one <code>&lt;ROW&gt;</code> element is included, and so forth.</p>
</li>
<li>
<p>Each <code>&lt;ROW&gt;</code> element contains data from one table row. Specifically, each <code>&lt;ROW&gt;</code> element has one or more child elements whose names and content are identical to the database columns specified in the <code>SELECT</code> statement.</p>
</li>
</ul>
</div>
<a id="ADXDK19479"></a><a id="ADXDK19478"></a>
<div class="props_rev_3"><a id="GUID-A0899DAA-0B1D-482C-99E6-E995F2B535C8"></a>
<h5 id="ADXDK-GUID-A0899DAA-0B1D-482C-99E6-E995F2B535C8" class="sect5"><span class="enumeration_section">13.5.1.1.1</span> XML Mapping Against an Object-Relational Schema</h5>
<div>
<p>Assume a case in which you generate an XML document from an object-relational schema. Run the <code>createObjRelSchema.sql</code> script in SQL*Plus to set up and populate an object-relational schema. The schema contains a <code>dept1</code> table with two columns that employ user-defined types.</p>
<p>You can query the <code>dept1</code> table by invoking XSU from the command line:</p>
<pre dir="ltr">% java OracleXML getXML -user &#34;hr/<span class="italic">password</span>&#34; -withschema &#34;SELECT * FROM dept1&#34;
</pre>
<p>XSU returns the XML document shown in <a href="adx_j_xsu.htm#GUID-A0899DAA-0B1D-482C-99E6-E995F2B535C8__BABBHAFE">Example 13-13</a>, which is altered so that extraneous lines are replaced by comments.</p>
<p>As in the previous example, the mapping is canonical, that is, <code>&lt;ROWSET&gt;</code> contains <code>&lt;ROW&gt;</code> child elements, which in turn contain child elements corresponding to the columns in <code>dept1</code>. For example, the <code>&lt;DEPTNAME&gt;</code> element corresponds to the <code>dept1.deptname</code> column. The elements corresponding to scalar type columns contain the data from the columns.</p>
<div class="example" id="GUID-A0899DAA-0B1D-482C-99E6-E995F2B535C8__BABBHAFE">
<p class="titleinexample">Example 13-13 XSU-Generated Sample Document</p>
<pre dir="ltr">&lt;?xml version=&#39;1.0&#39;?&gt;
&lt;DOCUMENT xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
   &lt;schema targetNamespace=&#34;http://xmlns.oracle.com/xdb/SYSTEM&#34;      
           xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
           xmlns:SYSTEM=&#34;http://xmlns.oracle.com/xdb/SYSTEM&#34;&gt;
   &lt;!-- children of schema element ... --&gt;
   &lt;/xsd:schema&gt;
   &lt;ROWSET xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
 xsi:noNamespaceSchemaLocation=&#34;#/DOCUMENT/xsd:schema[not(@targetNamespace)]&#34;&gt;
      &lt;ROW num=&#34;1&#34;&gt;
         &lt;DEPTNO&gt;120&lt;/DEPTNO&gt;
         &lt;DEPTNAME&gt;Treasury&lt;/DEPTNAME&gt;
         &lt;DEPTADDR&gt;
            &lt;STREET&gt;2004 Charade Rd&lt;/STREET&gt;
            &lt;CITY&gt;Seattle&lt;/CITY&gt;
            &lt;STATE&gt;WA&lt;/STATE&gt;
            &lt;ZIP&gt;98199&lt;/ZIP&gt;
         &lt;/DEPTADDR&gt;
         &lt;EMPLIST&gt;
            &lt;EMPLIST_ITEM&gt;
               &lt;EMPLOYEE_ID&gt;1&lt;/EMPLOYEE_ID&gt;
               &lt;LAST_NAME&gt;Mehta&lt;/LAST_NAME&gt;
               &lt;SALARY&gt;6000&lt;/SALARY&gt;
               &lt;EMPLOYEE_ADDRESS&gt;
                  &lt;STREET&gt;500 Main Road&lt;/STREET&gt;
                  &lt;CITY&gt;Seattle&lt;/CITY&gt;
                  &lt;STATE&gt;WA&lt;/STATE&gt;
                  &lt;ZIP&gt;98199&lt;/ZIP&gt;
               &lt;/EMPLOYEE_ADDRESS&gt;
            &lt;/EMPLIST_ITEM&gt;
         &lt;/EMPLIST&gt;
      &lt;/ROW&gt;
   &lt;/ROWSET&gt;
&lt;/DOCUMENT&gt;
 
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19480"></a>
<div class="props_rev_3"><a id="GUID-99C85F15-FAEA-4A8D-954B-0F0283819DF4"></a>
<h5 id="ADXDK-GUID-99C85F15-FAEA-4A8D-954B-0F0283819DF4" class="sect5"><span class="enumeration_section">13.5.1.1.2</span> Default Mapping of Complex Type Columns to XML</h5>
<div>
<p>The situation is more complex with elements corresponding to a complex type column. In <a href="adx_j_xsu.htm#GUID-A0899DAA-0B1D-482C-99E6-E995F2B535C8__BABBHAFE">Example 13-13</a>, <code>&lt;DEPTADDR&gt;</code> corresponds to the <code>dept1.deptAddr</code> column, which is of object type <code>AddressType</code>. Consequently, <code>&lt;DEPTADDR&gt;</code> contains child elements corresponding to the attributes specified in the type <code>AddressType</code>. The <code>AddressType</code> attribute <code>street</code> corresponds to the child XML element <code>&lt;STREET&gt;</code> and so forth. These subelements can contain data or subelements of their own, depending on whether the attribute they correspond to is of a simple or complex type.</p>
</div>
</div>
<a id="ADXDK19481"></a>
<div class="props_rev_3"><a id="GUID-0ECE1E50-CF88-4E63-87E4-C2C6CA856178"></a>
<h5 id="ADXDK-GUID-0ECE1E50-CF88-4E63-87E4-C2C6CA856178" class="sect5"><span class="enumeration_section">13.5.1.1.3</span> Default Mapping of Collections to XML</h5>
<div>
<p>When dealing with elements corresponding to database collections, the situation is also different. In <a href="adx_j_xsu.htm#GUID-A0899DAA-0B1D-482C-99E6-E995F2B535C8__BABBHAFE">Example 13-13</a>, the <code>&lt;EMPLIST&gt;</code> element corresponds to the <code>emplist</code> column of type <code>EmployeeListType</code>. Consequently, the <code>&lt;EMPLIST&gt;</code> element contains a list of <code>&lt;EMPLIST_ITEM&gt;</code> elements, each corresponding to an element of the collection. Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code>&lt;ROW&gt;</code> elements contain a cardinality attribute <code>num</code>.</p>
</li>
<li>
<p>If a particular column or attribute value is <code>NULL</code>, then for that row, the corresponding XML element is omitted.</p>
</li>
<li>
<p>If a top-level scalar column name starts with the at sign (@) character, then the column is mapped to an XML attribute instead of an XML element.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK19482"></a>
<div class="props_rev_3"><a id="GUID-F74783F7-7230-49F0-BE0E-83F04B5C7A37"></a>
<h4 id="ADXDK-GUID-F74783F7-7230-49F0-BE0E-83F04B5C7A37" class="sect4"><span class="enumeration_section">13.5.1.2</span> Default XML-to-SQL Mapping</h4>
<div>
<p>XML to SQL mapping is the reverse of SQL to XML mapping. Consider these differences when using XSU to map XML to SQL:</p>
<ul style="list-style-type: disc;">
<li>
<p>When transforming XML to SQL, XSU ignores XML attributes. Thus, there is really no mapping of XML attributes to SQL.</p>
</li>
<li>
<p>When transforming SQL to XML, XSU performs the mapping on a single <code>ResultSet</code> created by a SQL query. The query can span multiple database tables or views. When transforming XML into SQL, note:</p>
<ul style="list-style-type: disc;">
<li>
<p>To insert one XML document into multiple tables or views, you must create an object-relational view over the target schema.</p>
</li>
<li>
<p>If the view is not updatable, then you can use <code>INSTEAD OF INSERT</code> triggers.</p>
</li>
</ul>
</li>
</ul>
<p>If the XML document does not perfectly map to the target database schema, then you can perform these actions:</p>
<ul style="list-style-type: disc;">
<li>
<p>Modify the target. Create an object-relational view over the target schema and make the view the new target.</p>
</li>
<li>
<p>Modify the XML document by using XSLT to transform the XML document. You can register the XSLT style sheet with XSU so that the incoming XML is automatically transformed before it attempts any mapping.</p>
</li>
<li>
<p>Modify XSU&#39;s XML-to-SQL mapping. You can instruct XSU to perform case-insensitive matching of XML elements to database columns or attributes. For example, you can instruct XSU to do this:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use the name of the element corresponding to a database row instead of <code>ROW</code>.</p>
</li>
<li>
<p>Specify the date format to use when parsing dates in the XML document.</p>
</li>
</ul>
</li>
</ul>
</div>
</div>
<a id="ADXDK19483"></a>
<div class="props_rev_3"><a id="GUID-9E8CFEF1-E081-4D54-A397-06823C55F39E"></a>
<h4 id="ADXDK-GUID-9E8CFEF1-E081-4D54-A397-06823C55F39E" class="sect4"><span class="enumeration_section">13.5.1.3</span> Customizing Generated XML</h4>
<div>
<div class="section">
<p>In some situations, you might have to generate XML with a specific structure. Because the desired structure may differ from the default structure of the generated XML document, you want to have some flexibility in this process. You can customize the structure of a generated XML document by using one of these methods:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-9BD36D83-085B-418B-AA50-1A01E3322D41">Altering the Database Schema or SQL Query</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-F32325DC-C31E-4EEC-B778-F960E9AB606C">Modifying XSU</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19485"></a><a id="ADXDK19486"></a><a id="ADXDK19484"></a>
<div class="props_rev_3"><a id="GUID-9BD36D83-085B-418B-AA50-1A01E3322D41"></a>
<h5 id="ADXDK-GUID-9BD36D83-085B-418B-AA50-1A01E3322D41" class="sect5"><span class="enumeration_section">13.5.1.3.1</span> Altering the Database Schema or SQL Query</h5>
<div>
<div class="section">
<p>You can perform source customizations by altering the SQL query or the database schema. The simplest and most powerful source customizations include:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>In the database schema, create an object-relational view that maps to the desired XML document structure.</p>
</li>
<li>
<p>In your query, do this:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use cursor subqueries or cast-multiset constructs to create nesting in the XML document that comes from a flat schema.</p>
</li>
<li>
<p>Alias column and attribute names to get the desired XML element names.</p>
</li>
<li>
<p>Alias top-level scalar type columns with identifiers that begin with the at sign (@) to make them map to an XML attribute instead of an XML element. For example, executing these statement generates an XML document in which the <code>&lt;ROW&gt;</code> element has the attribute <code>empno</code>:</p>
<pre dir="ltr">SELECT employee_name AS &#34;@empno&#34;,... FROM employees;
</pre></li>
</ul>
</li>
</ul>
<p>Consider the <code>customer.xml</code> document shown in <a href="adx_j_xsu.htm#GUID-9BD36D83-085B-418B-AA50-1A01E3322D41__BABCIAJB">Example 13-14</a>.</p>
<p>Suppose you must design a set of database tables to store this data. Because the XML is nested more than one level, you can use an object-relational database schema that maps canonically to the preceding XML document. Run the <code>createObjRelSchema2.sql</code> script in SQL*Plus to create such a database schema.</p>
<p>You can load the data in the <code>customer.xml</code> document into the <code>customer_tab</code> table created by the script. Invoke XSU for Java from the command line:</p>
<pre dir="ltr">java OracleXML putXML -user &#34;hr/<span class="italic">password</span>&#34; -fileName customer.xml customer_tab
</pre>
<p>To load <code>customer.xml</code> into a database schema that is not object-relational, you can create objects in views on top of a standard relational schema. For example, you can create a relational table that contains the necessary columns, then create a customer view that contains a customer object on top of it, as shown in the <code>createRelSchema.sql</code> script in <a href="adx_j_xsu.htm#GUID-9BD36D83-085B-418B-AA50-1A01E3322D41__BABBCCEG">Example 13-15</a>.</p>
<p>You can load data into <code>customer_view</code>:</p>
<pre dir="ltr">java OracleXML putXML -user &#34;hr/<span class="italic">password</span>&#34; -fileName customer.xml customer_view
</pre>
<p>Alternatively, you can flatten your XML with XSLT and then insert it directly into a relational schema. However, this is the least recommended option.</p>
<p>To map a particular column or a group of columns to an XML attribute instead of an XML element, you can create an alias for the column name and prepend the at sign (@) before the name of this alias. For example, you can use the <code>mapColumnToAtt.sql</code> script to query the <code>hr.employees</code> table, rendering <code>employee_id</code> as an XML attribute.</p>
<p>You can run the <code>mapColumnToAtt.sql</code> script from the command line:</p>
<pre dir="ltr">java OracleXML getXML -user &#34;hr/<span class="italic">password</span>&#34; -fileName &#34;mapColumnToAtt.sql&#34;
</pre>
<div class="infobox-note" id="GUID-9BD36D83-085B-418B-AA50-1A01E3322D41__GUID-7F410CB4-C4B1-4A73-A6EA-0BDEEA414ED8">
<p class="notep1">Note:</p>
<p>All attributes must appear <span class="italic">before</span> any nonattribute.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-9BD36D83-085B-418B-AA50-1A01E3322D41__BABCIAJB">
<p class="titleinexample">Example 13-14 customer.xml</p>
<pre dir="ltr">&lt;?xml version = &#34;1.0&#34;?&gt;
&lt;ROWSET&gt;
 &lt;ROW num=&#34;1&#34;&gt;
  &lt;CUSTOMER&gt;
   &lt;CUSTOMERID&gt;1044&lt;/CUSTOMERID&gt;
   &lt;FIRSTNAME&gt;Paul&lt;/FIRSTNAME&gt;
   &lt;LASTNAME&gt;Astoria&lt;/LASTNAME&gt;
   &lt;HOMEADDRESS&gt;
    &lt;STREET&gt;123 Cherry Lane&lt;/STREET&gt;
    &lt;CITY&gt;SF&lt;/CITY&gt;
    &lt;STATE&gt;CA&lt;/STATE&gt;
    &lt;ZIP&gt;94132&lt;/ZIP&gt;
   &lt;/HOMEADDRESS&gt;
  &lt;/CUSTOMER&gt;
 &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9BD36D83-085B-418B-AA50-1A01E3322D41__BABBCCEG">
<p class="titleinexample">Example 13-15 createRelSchema.sql</p>
<pre dir="ltr">CREATE TABLE hr.cust_tab
 ( customerid NUMBER(10), 
   firstname VARCHAR2(20), 
   lastname VARCHAR2(20),
   street VARCHAR2(40),
   city VARCHAR2(20),
   state VARCHAR2(20),
   zip VARCHAR2(20)
 );

CREATE VIEW customer_view 
AS
SELECT customer_type(customerid, firstname, lastname,
       address_type(street,city,state,zip)) customer
FROM cust_tab;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19487"></a>
<div class="props_rev_3"><a id="GUID-F32325DC-C31E-4EEC-B778-F960E9AB606C"></a>
<h5 id="ADXDK-GUID-F32325DC-C31E-4EEC-B778-F960E9AB606C" class="sect5"><span class="enumeration_section">13.5.1.3.2</span> Modifying XSU</h5>
<div>
<p>XSU enables you to modify the rules that it uses to transform SQL data into XML. You can make any of these changes when mapping SQL to XML:</p>
<ul style="list-style-type: disc;">
<li>
<p>Change or omit the <code>&lt;ROWSET&gt;</code> or <code>&lt;ROW&gt;</code> tag.</p>
</li>
<li>
<p>Change or omit the attribute <code>num</code>, which is the cardinality attribute of the <code>&lt;ROW&gt;</code> element.</p>
</li>
<li>
<p>Specify the case for the generated XML element names.</p>
</li>
<li>
<p>Specify that XML elements corresponding to elements of a collection must have a cardinality attribute.</p>
</li>
<li>
<p>Specify the format for dates in the XML document.</p>
</li>
<li>
<p>Specify that null values in the XML document must be indicated with a nullness attribute rather than by omitting the element.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADXDK19488"></a>
<div class="props_rev_3"><a id="GUID-67C89C5D-ACB8-4DC0-850B-64A3DEA2BC07"></a>
<h3 id="ADXDK-GUID-67C89C5D-ACB8-4DC0-850B-64A3DEA2BC07" class="sect3"><span class="enumeration_section">13.5.2</span> How XSU Processes SQL Statements</h3>
<div>
<p>This section describes how XSU interacts with the database:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsu.htm#GUID-96EB8765-1F41-4E7E-9E9A-0E6864CB795A">How XSU Queries the Database</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-A8CBE301-616E-42E7-949E-D4E7EF61ED84">How XSU Inserts Rows</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-ED1B2C18-4548-4AEB-B94D-3610375D9A2E">How XSU Updates Rows</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-1333299E-2764-42FC-ACBF-FD1AC00BCF4B">How XSU Deletes Rows</a></p>
</li>
<li>
<p><a href="adx_j_xsu.htm#GUID-F30015F9-A177-4E4A-A9B5-7540DE85906C">How XSU Commits After DML</a></p>
</li>
</ul>
</div>
<a id="ADXDK19489"></a>
<div class="props_rev_3"><a id="GUID-96EB8765-1F41-4E7E-9E9A-0E6864CB795A"></a>
<h4 id="ADXDK-GUID-96EB8765-1F41-4E7E-9E9A-0E6864CB795A" class="sect4"><span class="enumeration_section">13.5.2.1</span> How XSU Queries the Database</h4>
<div>
<p>XSU executes SQL queries and retrieves the <code>ResultSet</code> from the database. XSU then acquires and analyzes metadata about the <code>ResultSet</code>. Using the mapping described in <span class="q">&#34;<a href="adx_j_xsu.htm#GUID-15AC5AA9-6628-44A3-BF97-B0C0EBD81976">Default SQL-to-XML Mapping</a>,&#34;</span> XSU processes the SQL result set and converts it into an XML document.</p>
<p>XSU cannot handle certain types of queries, especially those that mix columns of type <code>LONG</code> or <code>LONG RAW</code> with <code>CURSOR()</code> expressions in the <code>SELECT</code> clause. <code>LONG</code> and <code>LONG RAW</code> are two examples of data types that JDBC accesses as streams and whose use is deprecated. If you migrate these columns to <code>CLOBs</code>, then the queries succeed.</p>
</div>
</div>
<a id="ADXDK19490"></a>
<div class="props_rev_3"><a id="GUID-A8CBE301-616E-42E7-949E-D4E7EF61ED84"></a>
<h4 id="ADXDK-GUID-A8CBE301-616E-42E7-949E-D4E7EF61ED84" class="sect4"><span class="enumeration_section">13.5.2.2</span> How XSU Inserts Rows</h4>
<div>
<p>When inserting the contents of an XML document into a table or view, XSU performs these steps:</p>
<ol>
<li>
<p>Retrieves metadata about the target table or view.</p>
</li>
<li>
<p>Generates a SQL <code>INSERT</code> statement based on the metadata. For example, assume that the target table is <code>dept1</code> and the XML document is generated from <code>dept1</code>. XSU generates this <code>INSERT</code> statement:</p>
<pre dir="ltr">INSERT INTO dept1 (deptno, deptname, deptaddr, emplist) VALUES (?,?,?,?)
</pre></li>
<li>
<p>Parses the XML document, and for each record, it binds the appropriate values to the appropriate columns or attributes. For example, it binds the values for <code>INSERT</code> statement:</p>
<pre dir="ltr">deptno   &lt;- 100
deptname &lt;- SPORTS
deptaddr &lt;- AddressType(&#39;100 Redwood Shores Pkwy&#39;,&#39;Redwood Shores&#39;,
                        &#39;CA&#39;,&#39;94065&#39;)
emplist  &lt;- EmployeeListType(EmployeeType(7369,&#39;John&#39;,100000,
            AddressType(&#39;300 Embarcadero&#39;,&#39;Palo Alto&#39;,&#39;CA&#39;,&#39;94056&#39;),...)
</pre></li>
<li>
<p>Executes the statement. You can optimize <code>INSERT</code> processing to insert in batches and commit in batches.</p>
</li>
</ol>
<div class="infoboxnotealso" id="GUID-A8CBE301-616E-42E7-949E-D4E7EF61ED84__GUID-5A066F06-FFDD-4845-BF8C-0D942E8D1EF9">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="adx_j_xsu.htm#GUID-15AC5AA9-6628-44A3-BF97-B0C0EBD81976">Default SQL-to-XML Mapping</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="adx_j_xsu.htm#GUID-555483DC-5765-4E8B-B99A-96832941FB54">Inserting Rows with OracleXMLSave</a>&#34;</span> for more detail on batching</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK19491"></a>
<div class="props_rev_3"><a id="GUID-ED1B2C18-4548-4AEB-B94D-3610375D9A2E"></a>
<h4 id="ADXDK-GUID-ED1B2C18-4548-4AEB-B94D-3610375D9A2E" class="sect4"><span class="enumeration_section">13.5.2.3</span> How XSU Updates Rows</h4>
<div>
<p>Updates and delete statements differ from inserts in that they can affect more than one row in the database table. For inserts, each <code>&lt;ROW&gt;</code> element of the XML document can affect at most one row in the table if no triggers or constraints are on the table. With updates and deletes, the XML element can match more than one row if the matching columns are not key columns in the table.</p>
<p>For update statements, you must provide a list of key columns that XSU must identify the row to update. For example, assume that you have an XML document that contains this fragment:</p>
<pre dir="ltr">&lt;ROWSET&gt;
  &lt;ROW num=&#34;1&#34;&gt;
    &lt;DEPTNO&gt;100&lt;/DEPTNO&gt;
    &lt;DEPTNAME&gt;SportsDept&lt;/DEPTNAME&gt;
  &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre>
<p>You want to change the <code>DEPTNAME</code> value from <code>Sports</code> to <code>SportsDept</code>. If you supply the <code>DEPTNO</code> as the key column, then XSU generates this <code>UPDATE</code> statement:</p>
<pre dir="ltr">UPDATE dept1 SET deptname = ? WHERE deptno = ?
</pre>
<p>XSU binds the values in this way:</p>
<pre dir="ltr">deptno &lt;- 100
deptname &lt;- SportsDept
</pre>
<p>For updates, you can also choose to update only a set of columns and not all the elements present in the XML document.</p>
<div class="infoboxnotealso" id="GUID-ED1B2C18-4548-4AEB-B94D-3610375D9A2E__GUID-E231431B-E1A4-4DFF-B537-01C5ECF2846F">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_xsu.htm#GUID-646799B4-73D6-4AD1-94F1-E614343D65F6">Updating Rows with OracleXMLSave</a>&#34;</span></p>
</div>
</div>
</div>
<a id="ADXDK19492"></a>
<div class="props_rev_3"><a id="GUID-1333299E-2764-42FC-ACBF-FD1AC00BCF4B"></a>
<h4 id="ADXDK-GUID-1333299E-2764-42FC-ACBF-FD1AC00BCF4B" class="sect4"><span class="enumeration_section">13.5.2.4</span> How XSU Deletes Rows</h4>
<div>
<p>For deletes, you can choose to provide a set of key columns so that XSU can identify the rows to be deleted. If you do not provide the set of key columns, then the <code>DELETE</code> statement tries to match all the columns in the document. Assume that you pass this document to XSU:</p>
<pre dir="ltr">&lt;ROWSET&gt;
 &lt;ROW num=&#34;1&#34;&gt;
  &lt;DEPTNO&gt;100&lt;/DEPTNO&gt;
  &lt;DEPTNAME&gt;Sports&lt;/DEPTNAME&gt;
  &lt;DEPTADDR&gt;
      &lt;STREET&gt;100 Redwood Shores Pkwy&lt;/STREET&gt;
      &lt;CITY&gt;Redwood Shores&lt;/CITY&gt;
      &lt;STATE&gt;CA&lt;/STATE&gt;
      &lt;ZIP&gt;94065&lt;/ZIP&gt;
  &lt;/DEPTADDR&gt;
 &lt;/ROW&gt;
 &lt;!-- additional rows ... --&gt;
&lt;/ROWSET&gt;
</pre>
<p>XSU builds a <code>DELETE</code> statement for each <code>ROW</code> element:</p>
<pre dir="ltr">DELETE FROM dept1 WHERE deptno = ? AND deptname = ? AND deptaddr = ?
</pre>
<p>The binding is:</p>
<pre dir="ltr">deptno   &lt;- 100
deptname &lt;- sports
deptaddr &lt;- addresstype(&#39;100 redwood shores pkwy&#39;,&#39;redwood city&#39;,&#39;ca&#39;,
            &#39;94065&#39;)
</pre>
<div class="infoboxnotealso" id="GUID-1333299E-2764-42FC-ACBF-FD1AC00BCF4B__GUID-09106786-DCFA-444A-AABC-6CBF107D9B6F">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_xsu.htm#GUID-2E4CC584-0613-4BC2-9C9B-252AE6A91A84">Deleting Rows with OracleXMLSave</a>&#34;</span></p>
</div>
</div>
</div>
<a id="ADXDK19493"></a>
<div class="props_rev_3"><a id="GUID-F30015F9-A177-4E4A-A9B5-7540DE85906C"></a>
<h4 id="ADXDK-GUID-F30015F9-A177-4E4A-A9B5-7540DE85906C" class="sect4"><span class="enumeration_section">13.5.2.5</span> How XSU Commits After DML</h4>
<div>
<p>By default XSU performs no explicit commits. If <code>AUTOCOMMIT</code> is on, which is the default for a JDBC connection, then after each batch of statement executions XSU executes a <code>COMMIT</code>. You can override this behavior by turning <code>AUTOCOMMIT</code> off and then using <code>setCommitBatch</code> to specify the number of statement executions before XSU commits. If an error occurs, then XSU rolls back to either the state the target table was in before the call to XSU, or the state after the last commit made during the current call to XSU.</p>
</div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_diff.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_transx.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>