<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1641"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20SOAP%20with%20the%20Oracle%20XML%20Developer%27s%20Kit%20for%20C"></a><title>Using SOAP with the Oracle XML Developer&#39;s Kit for C</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="SOAP, for C, what is, C clients, server, C Functions, C examples"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_c_diff.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_pt_cplus.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-DC6C8B37-2B99-4C11-A4C6-D6CF2F5E441C"></a> <span id="PAGE" style="display:none;">33/50</span> <!-- End Header -->
<a id="ADXDK1043"></a><a id="ADXDK19852"></a>
<h1 id="ADXDK-GUID-DC6C8B37-2B99-4C11-A4C6-D6CF2F5E441C" class="sect1"><span class="enumeration_chapter">24</span> Using SOAP with the Oracle XML Developer&#39;s Kit for C</h1>
<div>
<p>This chapter explains how to use Simple Object Access Protocol (SOAP) with the Oracle XML Developer&#39;s Kit (XDK) for C.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_c_soap.htm#GUID-97787437-6E3F-4FC0-949B-B151E1861C38">Introduction to SOAP for C</a></p>
</li>
<li>
<p><a href="adx_c_soap.htm#GUID-8AA3100D-6E51-4D08-B5C4-4819C7EACF64">SOAP C Functions</a></p>
</li>
<li>
<p><a href="adx_c_soap.htm#GUID-38829ADC-8292-419D-876E-4C0BB7019CA2">SOAP Example 1: Sending an XML Document</a></p>
</li>
<li>
<p><a href="adx_c_soap.htm#GUID-6313E920-EAE2-43AF-AB90-866CA58A100C">SOAP Example 2: A Response Asking for Clarification</a></p>
</li>
<li>
<p><a href="adx_c_soap.htm#GUID-C850D49A-2E4F-4F4A-BED4-5B6E3CF7D130">SOAP Example 3: Using POST</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-DC6C8B37-2B99-4C11-A4C6-D6CF2F5E441C__GUID-80387919-9AD6-464F-874D-B49E115CFC63">
<p class="notep1">See Also:</p>
<p><a class="olink ADXDB3900" target="_blank" href="../ADXDB/xdb_web_services.htm#ADXDB3900"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</div>
</div>
<a id="ADXDK19853"></a>
<div class="props_rev_3"><a id="GUID-97787437-6E3F-4FC0-949B-B151E1861C38"></a>
<h2 id="ADXDK-GUID-97787437-6E3F-4FC0-949B-B151E1861C38" class="sect2"><span class="enumeration_section">24.1</span> Introduction to SOAP for C</h2>
<div>
<p>SOAP is an Extensible Markup Language (XML) protocol for exchanging structured and typed information between peers using HTTP and HTTPS in a distributed environment. Only HTTP 1.0 is supported in XDK for Oracle Database 10<span class="italic">g</span> release 2. SOAP has three parts:</p>
<ul style="list-style-type: disc;">
<li>
<p>The SOAP envelope which defines how to present what is in the message, who must process the message, and whether that processing is optional or mandatory.</p>
</li>
<li>
<p>A set of serialization and deserialization rules for converting application data types to and from XML.</p>
</li>
<li>
<p>A SOAP remote procedure call (RPC) that defines calls and responses.</p>
<div class="infobox-note" id="GUID-97787437-6E3F-4FC0-949B-B151E1861C38__GUID-6E8C4645-D28D-4602-80CF-5BC1EF46AEEB">
<p class="notep1">Note:</p>
<p>RPC and serialization/deserialization are not supported in this release.</p>
</div>
</li>
</ul>
<p>SOAP is operating system and language-independent because it is XML-based. This chapter presents the C implementation of the functions that read and write the SOAP message.</p>
<p>SOAP Version 1.2 is the definition of an XML-based message which is specified as an XML Infoset (an abstract data set, it could be XML 1.0) that gives a description of the message contents. Version 1.1 is also supported.</p>
<div class="infoboxnotealso" id="GUID-97787437-6E3F-4FC0-949B-B151E1861C38__GUID-319F57D6-C73F-4116-BDA9-30C6562BEE6F">
<p class="notep1">See Also:</p>
<p>W3C SOAP 1.2 specifications at:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/TR/soap12-part0/" target="_blank"><code>http://www.w3.org/TR/soap12-part0/</code></a> for Primer</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/soap12-part1/" target="_blank"><code>http://www.w3.org/TR/soap12-part1/</code></a> for Messaging Framework</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/soap12-part2/" target="_blank"><code>http://www.w3.org/TR/soap12-part2/</code></a> for Adjuncts</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19854"></a>
<div class="props_rev_3"><a id="GUID-EE6B64F4-9260-4E9D-A687-163AF7EE2D6D"></a>
<h3 id="ADXDK-GUID-EE6B64F4-9260-4E9D-A687-163AF7EE2D6D" class="sect3"><span class="enumeration_section">24.1.1</span> SOAP Messaging Overview</h3>
<div>
<p>SOAP is a lightweight protocol for sending and receiving requests and responses across the Internet. Because it is based on XML and transport protocols such as HTTP, it is not blocked by most firewalls. SOAP is independent of operating system, implementation language, and object model.</p>
<p>The power of SOAP is its ability to act as the glue between heterogeneous software components. For example, Visual Basic clients can invoke Common Object Request Broker Architecture (CORBA) services running on UNIX computers; Macintosh clients can invoke Perl objects running on Linux.</p>
<p>SOAP messages have these parts:</p>
<ul style="list-style-type: disc;">
<li>
<p>An <strong class="term">envelope</strong> that contains the message, defines how to process the message and who processes it, and whether processing is optional or mandatory. The <code>Envelope</code> element is required.</p>
</li>
<li>
<p>A set of <strong class="term">encoding rules</strong> that describe the data types for the application. These rules define a serialization mechanism that converts the application data types to and from XML.</p>
</li>
<li>
<p>A <strong class="term">remote procedure call (RPC)</strong> request and response convention. This required element is called a body element. The <code>Body</code> element contains a first subelement whose name is the name of a method. This method request element contains elements for each input and output parameter. The element names are the parameter names. RPC is not currently supported in this release.</p>
</li>
</ul>
<p>SOAP is independent of any transport protocol. Nevertheless, SOAP used over HTTP for remote service invocation has emerged as a standard for delivering programmatic content over the Internet.</p>
<p>Besides being independent of transfer protocol, SOAP is also independent of operating system. In other words, SOAP enables programs to communicate even when they are written in different languages and run on different operating systems.</p>
</div>
<a id="ADXDK19855"></a>
<div class="props_rev_3"><a id="GUID-221EA94A-2F7A-40DA-907B-D3214CFB28D9"></a>
<h4 id="ADXDK-GUID-221EA94A-2F7A-40DA-907B-D3214CFB28D9" class="sect4"><span class="enumeration_section">24.1.1.1</span> SOAP Message Format</h4>
<div>
<p>SOAP messages are of these types:</p>
<ul style="list-style-type: disc;">
<li>
<p>Requests for a service, including input parameters</p>
</li>
<li>
<p>Responses from the requested service, including return value and output parameters</p>
</li>
<li>
<p>Optional fault elements containing error codes and information</p>
</li>
</ul>
<p>In a SOAP message, the <strong class="term">payload</strong> contains the XML-encoded data. The payload contains no processing information. In contrast, the message header may contain processing information.</p>
</div>
<a id="ADXDK19857"></a><a id="ADXDK19856"></a>
<div class="sect5"><a id="GUID-683C406E-BA75-4D41-A422-835656CB4FF4"></a>
<h5 id="ADXDK-GUID-683C406E-BA75-4D41-A422-835656CB4FF4" class="sect5"><span class="enumeration_section">24.1.1.1.1</span> SOAP Requests</h5>
<div>
<p>In SOAP requests, the XML payload contains several elements that include:</p>
<ul style="list-style-type: disc;">
<li>
<p>Root element</p>
</li>
<li>
<p>Method element</p>
</li>
<li>
<p>Header elements (optional)</p>
</li>
</ul>
<p><a href="adx_c_soap.htm#GUID-683C406E-BA75-4D41-A422-835656CB4FF4__CHDHJHJJ">Example 24-1</a> shows the format of a sample SOAP message request. A <code>GetLastTradePrice</code> SOAP request is sent to a <code>StockQuote</code> service. The request accepts a string parameter representing the company stock symbol and returns a float representing the stock price in the SOAP response.</p>
<div class="example" id="GUID-683C406E-BA75-4D41-A422-835656CB4FF4__CHDHJHJJ">
<p class="titleinexample">Example 24-1 SOAP Request Message</p>
<pre dir="ltr">POST /StockQuote HTTP/1.0
Host: www.stockquoteserver.com
Content-Type: application/soap+xml; charset=&#34;utf-8&#34;
Content-Length: nnnn
SOAPAction: &#34;Some-URI&#34;

&lt;SOAP-ENV:Envelope  xmlns:SOAP-ENV=&#34;http://www.w3.org/2003/05/soap-envelope&#34;
            SOAP-ENV:encodingStyle=&#34;http://www.w3.org/2003/05/soap-encoding/&#34;&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;m:GetLastTradePrice xmlns:m=&#34;Some-URI&#34;&gt;
      &lt;symbol&gt;ORCL&lt;/symbol&gt;
    &lt;m:GetLastTradePrice&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</pre></div>
<!-- class="example" -->
<p>In <a href="adx_c_soap.htm#GUID-683C406E-BA75-4D41-A422-835656CB4FF4__CHDHJHJJ">Example 24-1</a>, the XML document is the SOAP message. The <code>&lt;SOAP-ENV:Envelope&gt;</code> element is the top-level element of the XML document. The payload is represented by the method element <code>&lt;m:GetLastTradePrice&gt;</code>. XML namespaces distinguish SOAP identifiers from application-specific identifiers.</p>
<p>The first line of the header specifies that the request uses HTTP as the transport protocol:</p>
<pre dir="ltr">POST /StockQuote HTTP/1.1
</pre>
<p>Because SOAP is independent of transport protocol, the rules governing XML payload format are independent of the use of HTTP for transport of the payload. This HTTP request points to the URI <code>/StockQuote</code>. Because the SOAP specification is silent on the issue of component activation, the code behind this URI determines how to activate the component and invoke the <code>GetLastTradePrice</code> method.</p>
</div>
</div>
<a id="ADXDK19859"></a><a id="ADXDK19858"></a>
<div class="props_rev_3"><a id="GUID-B975BA93-4413-48F0-B27E-25E3B0C10DF0"></a>
<h5 id="ADXDK-GUID-B975BA93-4413-48F0-B27E-25E3B0C10DF0" class="sect5"><span class="enumeration_section">24.1.1.1.2</span> Example of a SOAP Response</h5>
<div>
<p><a href="adx_c_soap.htm#GUID-B975BA93-4413-48F0-B27E-25E3B0C10DF0__CHDCHGHH">Example 24-2</a> shows the format of the response to the request in <a href="adx_c_soap.htm#GUID-683C406E-BA75-4D41-A422-835656CB4FF4__CHDHJHJJ">Example 24-1</a>. The <code>&lt;Price&gt;</code> element contains the stock price for <code>ORCL</code> requested by the first message.</p>
<p>The messages shown in <a href="adx_c_soap.htm#GUID-683C406E-BA75-4D41-A422-835656CB4FF4__CHDHJHJJ">Example 24-1</a> and <a href="adx_c_soap.htm#GUID-B975BA93-4413-48F0-B27E-25E3B0C10DF0__CHDCHGHH">Example 24-2</a> show two-way SOAP messaging, that is, a SOAP request that is answered by a SOAP response. A one-way SOAP message does not require a SOAP message in response.</p>
<div class="example" id="GUID-B975BA93-4413-48F0-B27E-25E3B0C10DF0__CHDCHGHH">
<p class="titleinexample">Example 24-2 SOAP Response Message</p>
<pre dir="ltr">HTTP/1.0 200 OK
Content-Type: application/soap+xml; charset=&#34;utf-8&#34;
Content-Length: nnnn

&lt;SOAP-ENV:Envelope  xmlns:SOAP-ENV=&#34;http://www.w3.org/2003/05/soap-envelope&#34; 
 SOAP-ENV:encodingStyle=&#34;http://www.w3.org/2003/05/soap-encoding/&#34;&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;m:GetLastTradePriceResponse xmlns:m=&#34;Some-URI&#34;&gt;
      &lt;Price&gt;13.5&lt;/Price&gt;
    &lt;/m:GetLastTradePriceResponse&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADXDK19860"></a>
<div class="props_rev_3"><a id="GUID-E2B40E66-A184-4A1E-8790-B04B8F8A80CD"></a>
<h3 id="ADXDK-GUID-E2B40E66-A184-4A1E-8790-B04B8F8A80CD" class="sect3"><span class="enumeration_section">24.1.2</span> Using SOAP Clients</h3>
<div>
<div class="section">
<p>SOAP clients are user-written applications that generate XML documents. The documents make a request for a SOAP service and handle the SOAP response. The SOAP implementation in XDK handles requests from any client that sends a valid SOAP request.</p>
<p>The SOAP client application programming interface (API) has these features:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Supports a synchronous invocation model for requests and responses</p>
</li>
<li>
<p>Facilitates the writing of client applications to make SOAP requests</p>
</li>
<li>
<p>Encapsulates the creation of the SOAP request and the details of sending the request over the underlying transport protocol</p>
</li>
<li>
<p>Supports a pluggable transport, allowing the client to easily change the transport (available transports include HTTP and HTTPS, but only HTTP 1.0 is supported in this release)</p>
</li>
</ul>
<p>The SOAP client must perform these steps to make a request and receive a response:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Gather all parameters that are needed to invoke a service.</span></li>
<li><span>Create a SOAP service request message, which is an XML message that is built according to the SOAP protocol. It contains all the values of all input parameters encoded in XML. This process is called <strong class="term">serialization</strong>.</span></li>
<li><span>Submit the request to a SOAP server using a transport protocol that is supported by the SOAP server.</span></li>
<li><span>Receive a SOAP response message.</span></li>
<li><span>Determine the success or failure of the request by handling the SOAP Fault element.</span></li>
<li><span>Convert the returned parameter from XML to native data type. This process is called <strong class="term">deserialization</strong>.</span></li>
<li><span>Use the result as needed.</span></li>
</ol>
</div>
</div>
<a id="ADXDK19861"></a>
<div class="props_rev_3"><a id="GUID-53495893-9965-441A-BADF-A848C5FB3DB6"></a>
<h3 id="ADXDK-GUID-53495893-9965-441A-BADF-A848C5FB3DB6" class="sect3"><span class="enumeration_section">24.1.3</span> Using SOAP Servers</h3>
<div>
<p>A SOAP server performs these steps when executing a SOAP service request:</p>
<ol>
<li>
<p>The SOAP server receives the service request.</p>
</li>
<li>
<p>The server parses the XML request and then decides whether to execute or reject the message.</p>
</li>
<li>
<p>If the message is executed, then the server determines whether the requested service exists.</p>
</li>
<li>
<p>The server converts all input parameters from XML into data types that the service understands.</p>
</li>
<li>
<p>The server invokes the service.</p>
</li>
<li>
<p>The server converts the return parameter to XML and generates a SOAP response message.</p>
</li>
<li>
<p>The server sends the response message back to the caller.</p>
</li>
</ol>
</div>
</div>
</div>
<a id="ADXDK19863"></a><a id="ADXDK19862"></a>
<div class="props_rev_3"><a id="GUID-8AA3100D-6E51-4D08-B5C4-4819C7EACF64"></a>
<h2 id="ADXDK-GUID-8AA3100D-6E51-4D08-B5C4-4819C7EACF64" class="sect2"><span class="enumeration_section">24.2</span> SOAP C Functions</h2>
<div>
<p>The SOAP C implementation uses the xml.h header. A context of type <code>xmlctx</code> must be created before a SOAP context can be created.</p>
<p>HTTP aspects of SOAP are hidden from the user. SOAP endpoints are specified as a couple (binding, endpoint) where binding is of type <code>xmlsoapbind</code> and the endpoint is a (<code>void *</code>) depending on the binding. Currently, only one binding is supported, <code>XMLSOAP_BIND_HTTP</code>. For HTTP binding, the endpoint is an (<code>OraText *</code>) URL.</p>
<p>The SOAP layer creates and transports SOAP messages between endpoints, and decomposes received SOAP messages.</p>
<p>The C functions are declared in <code>xmlsoap.h</code>. Here is the beginning of that header file:</p>
<div class="infoboxnotealso" id="GUID-8AA3100D-6E51-4D08-B5C4-4819C7EACF64__GUID-51CF2FC4-5921-4DC5-BCA1-040F4B0E97D6">
<p class="notep1">See Also:</p>
<p><a class="olink CAXML01300" target="_blank" href="../CAXML/soap.htm#CAXML01300"><span class="italic">Oracle Database XML C API Reference</span></a> for the C SOAP APIs</p>
</div>
<div class="example" id="GUID-8AA3100D-6E51-4D08-B5C4-4819C7EACF64__GUID-D73DB195-39E0-4C3B-BB9D-54CA6C540DDE">
<p class="titleinexample">Example 24-3 SOAP C Functions Defined in xmlsoap.h</p>
<pre dir="ltr">   FILE NAME
        xmlsoap.h - XML SOAP APIs
 
   FILE DESCRIPTION
        XML SOAP Public APIs
 
   PUBLIC FUNCTIONS
        XmlSoapCreateCtx         - Create and return a SOAP context
        XmlSoapDestroyCtx        - Destroy a SOAP context
 
        XmlSoapCreateConnection  - Create a SOAP connection object
        XmlSoapDestroyConnection - Destroy a SOAP connection object
 
        XmlSoapCall              - Send a SOAP message &amp; wait for reply
 
        XmlSoapCreateMsg         - Create and return an empty SOAP message
        XmlSoapDestroyMsg        - Destroy a SOAP message created
                                      w/XmlSoapCreateMsg
 
        XmlSoapGetEnvelope       - Return a SOAP message&#39;s envelope
        XmlSoapGetHeader         - Return a SOAP message&#39;s envelope header
        XmlSoapGetBody           - Return a SOAP message&#39;s envelope body
 
        XmlSoapAddHeaderElement  - Adds an element to a SOAP header
        XmlSoapGetHeaderElement  - Gets an element from a SOAP header
 
        XmlSoapAddBodyElement    - Adds an element to a SOAP message body
        XmlSoapGetBodyElement    - Gets an element from a SOAP message body
 
        XmlSoapSetMustUnderstand - Set mustUnderstand attr for SOAP hdr elem
        XmlSoapGetMustUnderstand - Get mustUnderstand attr from SOAP hdr elem
 
        XmlSoapSetRole           - Set role for SOAP header element
        XmlSoapGetRole           - Get role from SOAP header element
 
        XmlSoapSetRelay          - Set relay Header element property
        XmlSoapGetRelay          - Get relay Header element property
 
        XmlSoapSetFault          - Set Fault in SOAP message
        XmlSoapHasFault          - Does SOAP message have a Fault?
        XmlSoapGetFault          - Return Fault code, reason, and details
        
        XmlSoapAddFaultReason    - Add additional Reason to Fault
        XmlSoapAddFaultSubDetail - Add additional child to Fault Detail
        XmlSoapGetReasonNum      - Get number of Reasons in Fault element
        XmlSoapGetReasonLang     - Get a lang of a reasons with a
                                       particular iindex.
 
        XmlSoapError             - Get error message(s)
 
*/
 
#ifndef XMLSOAP_ORACLE
# define XMLSOAP_ORACLE
 
# ifndef XML_ORACLE
#  include &lt;xml.h&gt;
# endif
 
/*---------------------------------------------------------------------------
                Package SOAP - Simple Object Access Protocol APIs
 
     W3C: &#34;SOAP is a lightweight protocol for exchange of information
     in a decentralized, distributed environment.  It is an XML based
     protocol that consists of three parts: an envelope that defines a
     framework for describing what is in a message and how to process
     it, a set of encoding rules for expressing instances of
     application-defined datatypes, and a convention for representing
     remote procedure calls and responses.&#34;
     Atachments are allowed only in Soap 1.1     
     In Soap 1.2 body may not have other elements if Fault is present.
  
     Structure of a SOAP message:
 
     [SOAP message (XML document)
        [SOAP envelope
             [SOAP header?
                 element*
             ]
             [SOAP body
                 (element* | Fault)?
             ]
        ]
     ]
---------------------------------------------------------------------------*/
...
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19865"></a><a id="ADXDK19866"></a><a id="ADXDK19864"></a>
<div class="props_rev_3"><a id="GUID-38829ADC-8292-419D-876E-4C0BB7019CA2"></a>
<h2 id="ADXDK-GUID-38829ADC-8292-419D-876E-4C0BB7019CA2" class="sect2"><span class="enumeration_section">24.3</span> SOAP Example 1: Sending an XML Document</h2>
<div>
<p>Here is an XML document that shows a request to a travel company for a reservation on a plane flight from New York to Los Angeles for John Smith:</p>
<p>The example used to create the XML document, send it, and receive and decompose a reply is simplified. There is some minimal error checking. The <code>DEBUG</code> option is shown for correcting anomalies. The program may not work on all operating systems. To send this XML document, the first client C program follows these steps:</p>
<ul style="list-style-type: disc;">
<li>
<p>After declaring variables in <code>main()</code>, an XML context, <code>xctx</code>, is created using <code>XmlCreate()</code> and the context is then used to create a SOAP context, <code>ctx</code>, using <code>XmlSoapCreateCtx()</code>.</p>
</li>
<li>
<p>To construct the message, <code>XmlSoapCreateMsg()</code> is called and returns an empty SOAP message.</p>
</li>
<li>
<p>The header is constructed using <code>XmlSoapAddHeaderElement()</code>, <code>XmlSoapSetRole()</code>, <code>XmlSoapSetMustUnderstand()</code>, and <code>XmlDomAddTextElem()</code> to fill in the envelope with text.</p>
</li>
<li>
<p>The body elements are created by <code>XmlSoapAddBodyElement()</code>, <code>XmlDomCreateElemNS()</code>, and a series of invocations of <code>XmlDomAddTextElem()</code>. Then <code>XmlDomAppendChild()</code> completes the section of the body specifying the New York to Los Angeles flight.</p>
</li>
<li>
<p>The return flight is built in an analogous way. The lodging is added with another <code>XmlSoapAddBodyElement()</code> invocation.</p>
</li>
<li>
<p>The connection must be created next with <code>XmlSoapCreateConnection()</code>, specifying HTTP binding (the only binding available now) and an endpoint URL.</p>
</li>
<li>
<p>The function <code>XmlSoapCall()</code> sends the message over the defined connection with the SOAP server, and then waits for the reply.</p>
</li>
<li>
<p>The message reply is returned in the form of another SOAP message. This is done with <code>XmlSaveDom()</code> and <code>XmlSoapHasFault()</code> used with <code>XmlSoapGetFault()</code> to check for a fault and analyze the fault. The fault is parsed into its parts, which is output in this example.</p>
</li>
<li>
<p>If there was no fault returned, this is followed by <code>XmlSoapGetBody()</code> to return the envelope body. <code>XmlSaveDom()</code> completes the analysis of the returned message.</p>
</li>
<li>
<p>To clean up, use <code>XmlSoapDestroyMsg()</code> on the message and on the reply, <code>XmlDestroyCtx()</code> to destroy the SOAP context, and <code>XmlDestroy()</code> to destroy the XML context.</p>
</li>
</ul>
<p>The C client program for Example 1 is:</p>
<div class="example" id="GUID-38829ADC-8292-419D-876E-4C0BB7019CA2__GUID-E9CD8429-D166-439B-9101-9D5786426A4A">
<p class="titleinexample">Example 24-4 Example 1 SOAP Message</p>
<pre dir="ltr">&lt;?xml version=&#39;1.0&#39; ?&gt;
&lt;env:Envelope xmlns:env=&#34;http://www.w3.org/2003/05/soap-envelope&#34;&gt; 
 &lt;env:Header&gt;
  &lt;m:reservation xmlns:m=&#34;http://travelcompany.example.org/reservation&#34; 
          env:role=&#34;http://www.w3.org/2003/05/soap-envelope/role/next&#34;
           env:mustUnderstand=&#34;true&#34;&gt;
   &lt;m:reference&gt;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d&lt;/m:reference&gt;
   &lt;m:dateAndTime&gt;2001-11-29T13:20:00.000-05:00&lt;/m:dateAndTime&gt;
  &lt;/m:reservation&gt;
  &lt;n:passenger xmlns:n=&#34;http://mycompany.example.com/employees&#34;
          env:role=&#34;http://www.w3.org/2003/05/soap-envelope/role/next&#34;
           env:mustUnderstand=&#34;true&#34;&gt;
   &lt;n:name&gt;John Smith&lt;/n:name&gt;
  &lt;/n:passenger&gt;
 &lt;/env:Header&gt;
 &lt;env:Body&gt;
  &lt;p:itinerary
    xmlns:p=&#34;http://travelcompany.example.org/reservation/travel&#34;&gt;
   &lt;p:departure&gt;
     &lt;p:departing&gt;New York&lt;/p:departing&gt;
     &lt;p:arriving&gt;Los Angeles&lt;/p:arriving&gt;
     &lt;p:departureDate&gt;2001-12-14&lt;/p:departureDate&gt;
     &lt;p:departureTime&gt;late afternoon&lt;/p:departureTime&gt;
     &lt;p:seatPreference&gt;aisle&lt;/p:seatPreference&gt;
   &lt;/p:departure&gt;
   &lt;p:return&gt;
     &lt;p:departing&gt;Los Angeles&lt;/p:departing&gt;
     &lt;p:arriving&gt;New York&lt;/p:arriving&gt;
     &lt;p:departureDate&gt;2001-12-20&lt;/p:departureDate&gt;
     &lt;p:departureTime&gt;mid-morning&lt;/p:departureTime&gt;
     &lt;p:seatPreference/&gt;
   &lt;/p:return&gt;
  &lt;/p:itinerary&gt;
  &lt;q:lodging
   xmlns:q=&#34;http://travelcompany.example.org/reservation/hotels&#34;&gt;
   &lt;q:preference&gt;none&lt;/q:preference&gt;
  &lt;/q:lodging&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-38829ADC-8292-419D-876E-4C0BB7019CA2__BABEGEGD">
<p class="titleinexample">Example 24-5 Example 1 SOAP C Client</p>
<pre dir="ltr">#ifndef S_ORACLE
# include &lt;s.h&gt;
#endif
 
#ifndef XML_ORACLE
# include &lt;xml.h&gt;
#endif
 
#ifndef XMLSOAP_ORACLE
# include &lt;xmlsoap.h&gt;
#endif
 
 
#define MY_URL &#34;http://my_url.com&#34;
 
/* static function declaration */
static xmlerr add_ns_decl(xmlsoapctx  *ctx, xmlctx *xctx, xmlelemnode *elem,
                        oratext *pfx, oratext *uri);
 
 
sb4 main( sword argc, char *argv[])
{
    xmlctx      *xctx;
    xmlerr       xerr;
    xmlsoapctx  *ctx;
    oratext     *url;
    xmlsoapcon  *con;
 
    xmldocnode  *msg1, *reply, *msg2, *msg3;
    xmlelemnode *res, *pas, *pref, *itin, *departure, *ret, *lodging;
    xmlelemnode *departing, *arriving, *trans, *text, *charge, *card, *name;
    xmlelemnode *body, *header;
    boolean      has_fault;
    oratext     *code, *reason, *lang, *node, *role;
    xmlelemnode *detail;
    oratext *comp_uri   = &#34;http://travelcompany.example.org/&#34;;
    oratext *mres_uri   = &#34;http://travelcompany.example.org/reservation&#34;;
    oratext *trav_uri   = &#34;http://travelcompany.example.org/reservation/travel&#34;;
    oratext *hotel_uri  = &#34;http://travelcompany.example.org/reservation/hotels&#34;;
    oratext *npas_uri   = &#34;http://mycompany.example.com/employees&#34;;
 
    oratext *tparty_uri = &#34;http://thirdparty.example.org/transaction&#34;;
    oratext *estyle_uri = &#34;http://example.com/encoding&#34;;
    oratext *soap_style_uri = &#34;http://www.w3.org/2003/05/soap-encoding&#34;;
    oratext *estyle     = &#34;env:encodingStyle&#34;;
    oratext *finance_uri = &#34;http://mycompany.example.com/financial&#34;;
    
 
    if (!(xctx = XmlCreate(&amp;xerr, (oratext *)&#34;SOAP_test&#34;,NULL)))
    {
        printf(&#34;Failed to create XML context, error %u\n&#34;, (unsigned) xerr);
        return EX_FAIL;
    }
    /* Create SOAP context */
    if (!(ctx = XmlSoapCreateCtx(xctx, &amp;xerr, (oratext *) &#34;example&#34;, NULL)))
       {
         printf(&#34;Failed to create SOAP context, error %u\n&#34;, (unsigned) xerr);
         return EX_FAIL;
       }
 
 
    /* EXAMPLE 1 */
    /* construct message */
    if (!(msg1 = XmlSoapCreateMsg(ctx, &amp;xerr)))
    {
      printf(&#34;Failed to create SOAP message, error %u\n&#34;, (unsigned) xerr);
      return xerr;
    }
    res = XmlSoapAddHeaderElement(ctx, msg1, &#34;m:reservation&#34;, mres_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, res, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, res, TRUE);
    (void) XmlDomAddTextElem(xctx, res, mres_uri, &#34;m:reference&#34;,
                 &#34;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d&#34;);
    (void) XmlDomAddTextElem(xctx, res, mres_uri, &#34;m:dateAndTime&#34;,
                               &#34;2001-11-29T13:20:00.000-05:00&#34;);
    pas = XmlSoapAddHeaderElement(ctx, msg1, &#34;n:passenger&#34;, npas_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, pas, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, pas, TRUE);
    (void) XmlDomAddTextElem(xctx, pas, npas_uri, &#34;n:name&#34;,
                              &#34;John Smith&#34;);
    /* Fill body */
    /* Itinerary */
    itin = XmlSoapAddBodyElement(ctx, msg1, &#34;p:itinerary&#34;, trav_uri, &amp;xerr);
    /* Departure */
    departure = XmlDomCreateElemNS(xctx, msg1,  trav_uri, &#34;p:departure&#34;);
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              &#34;p:departing&#34;,&#34;New York&#34;);
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              &#34;p:arriving&#34;, &#34;Los Angeles&#34;);
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              &#34;p:departureDate&#34;, &#34;2001-12-14&#34;);
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              &#34;p:departureTime&#34;, &#34;late afternoon&#34;);
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              &#34;p:seatPreference&#34;, &#34;aisle&#34;);
    XmlDomAppendChild(xctx, itin, departure);
 
    /* Return */
    ret = XmlDomCreateElemNS(xctx, msg1,  trav_uri, &#34;p:return&#34;);
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              &#34;p:departing&#34;, &#34;Los Angeles&#34;);
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              &#34;p:arriving&#34;, &#34;New York&#34;);
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              &#34;p:departureDate&#34;, &#34;2001-12-20&#34;);
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              &#34;p:departureTime&#34;, &#34;mid-morning&#34;);
    pref = XmlDomCreateElemNS(xctx, msg1, trav_uri, &#34;p:seatPreference&#34;);
    (void) XmlDomAppendChild(xctx, ret, pref);
    XmlDomAppendChild(xctx, itin, ret);
 
    /* Lodging */
    lodging = XmlSoapAddBodyElement(ctx, msg1, &#34;q:lodging&#34;, hotel_uri, &amp;xerr);
    (void) XmlDomAddTextElem(xctx, lodging, hotel_uri,
                              &#34;q:preference&#34;, &#34;none&#34;);
 
#ifdef DEBUG
    /* dump the message in debug mode */
    printf(&#34;Message:\n&#34;);  
    XmlSaveDom(xctx, &amp;xerr, msg1, &#34;stdio&#34;, stdout, &#34;indent_step&#34;, 1, NULL);
#endif

/* END OF EXAMPLE 1 */

    /* create connection */
    url = MY_URL;
    if (!(con = XmlSoapCreateConnection(ctx, &amp;xerr, XMLSOAP_BIND_HTTP,
          url, NULL, 0, NULL, 0,
          &#34;XTest: baz&#34;, NULL)))
      {
        printf(&#34;Failed to create SOAP connection, error %u\n&#34;, (unsigned) xerr);
        return xerr;
    }
 
    reply = XmlSoapCall(ctx, con, msg1, &amp;xerr);
    XmlSoapDestroyConnection(ctx, con);
 
    if (!reply)
    {
      printf(&#34;Call failed, no message returned.\n&#34;);
      return xerr;
    }
 
#ifdef DEBUG
    printf(&#34;Reply:\n&#34;);  
    XmlSaveDom(xctx, &amp;xerr, reply, &#34;stdio&#34;, stdout, NULL);
#endif    
 
     printf(&#34;\n==== Header:\n &#34;);    
    header = XmlSoapGetHeader(ctx, reply, &amp;xerr);
    if (!header)
    {
        printf(&#34;NULL\n&#34;);
    }
    else
        XmlSaveDom(xctx, &amp;xerr, header, &#34;stdio&#34;, stdout, NULL);
    
 
   /* check for fault */
    has_fault = XmlSoapHasFault(ctx, reply, &amp;xerr);
    if(has_fault)
    {
        lang = NULL;
        xerr = XmlSoapGetFault(ctx, reply, &amp;code, &amp;reason, &amp;lang,
                               &amp;node, &amp;role, &amp;detail);
        if (xerr)
        {
            printf(&#34;error getting Fault %d\n&#34;, xerr);
            return EX_FAIL;
        }
         if(code)
            printf(&#34;   Code -- %s\n&#34;, code);
        else
            printf(&#34;   NO Code\n&#34;);
        if(reason)
            printf(&#34;   Reason -- %s\n&#34;, reason);
        else
            printf(&#34;   NO Reason\n&#34;);
        if(lang)
            printf(&#34;   Lang -- %s\n&#34;, lang);
        else
            printf(&#34;   NO Lang\n&#34;);
        if(node)
            printf(&#34;   Node -- %s\n&#34;, node);
        else
            printf(&#34;   NO Node\n&#34;);
        if(role)                
            printf(&#34;   Role -- %s\n&#34;, role);
        else
            printf(&#34;   NO Role\n&#34;);
        if(detail)
        {
            printf(&#34;   Detail\n&#34;);
            XmlSaveDom(xctx, &amp;xerr, detail, &#34;stdio&#34;, stdout, NULL);
            printf(&#34;\n&#34;);
        }
        else
            printf(&#34;   NO Detail\n&#34;);
       
    }
    else
    {
        body = XmlSoapGetBody(ctx, reply, &amp;xerr);
        printf(&#34;==== Body:\n &#34;);
        if (!body)
        {
            printf(&#34;NULL\n&#34;);
            return EX_FAIL;
        }
        XmlSaveDom(xctx, &amp;xerr, body, &#34;stdio&#34;, stdout, NULL);
    }
    (void) XmlSoapDestroyMsg(ctx, reply);
    (void) XmlSoapDestroyMsg(ctx, msg1);
    (void) XmlSoapDestroyCtx(ctx);
    XmlDestroy(xctx);
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19868"></a><a id="ADXDK19869"></a><a id="ADXDK19867"></a>
<div class="props_rev_3"><a id="GUID-6313E920-EAE2-43AF-AB90-866CA58A100C"></a>
<h2 id="ADXDK-GUID-6313E920-EAE2-43AF-AB90-866CA58A100C" class="sect2"><span class="enumeration_section">24.4</span> SOAP Example 2: A Response Asking for Clarification</h2>
<div>
<p>The travel company wants to know which airport in New York the traveller, John Smith, will depart from. The choices are JFK for Kennedy, EWR for Newark, or LGA for LaGuardia. So this reply is sent:</p>
<p>To send this XML document as a SOAP message, substitute this code block for the lines beginning with <code>/* EXAMPLE 1 */</code> and ending with <code>/* END OF EXAMPLE 1 */</code> in <a href="adx_c_soap.htm#GUID-38829ADC-8292-419D-876E-4C0BB7019CA2__BABEGEGD">Example 24-5</a>:</p>
<div class="example" id="GUID-6313E920-EAE2-43AF-AB90-866CA58A100C__GUID-77BBA2A6-3005-4837-B9C1-9483C7AF7D1F">
<p class="titleinexample">Example 24-6 Example 2 SOAP Message</p>
<pre dir="ltr">&lt;?xml version=&#39;1.0&#39; ?&gt;
&lt;env:Envelope xmlns:env=&#34;http://www.w3.org/2003/05/soap-envelope&#34;&gt; 
 &lt;env:Header&gt;
  &lt;m:reservation xmlns:m=&#34;http://travelcompany.example.org/reservation&#34; 
      env:role=&#34;http://www.w3.org/2003/05/soap-envelope/role/next&#34;
           env:mustUnderstand=&#34;true&#34;&gt;
   &lt;m:reference&gt;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d&lt;/m:reference&gt;
   &lt;m:dateAndTime&gt;2001-11-29T13:35:00.000-05:00&lt;/m:dateAndTime&gt;
  &lt;/m:reservation&gt;
  &lt;n:passenger xmlns:n=&#34;http://mycompany.example.com/employees&#34;
      env:role=&#34;http://www.w3.org/2003/05/soap-envelope/role/next&#34;
           env:mustUnderstand=&#34;true&#34;&gt;
   &lt;n:name&gt;John Smith&lt;/n:name&gt;
  &lt;/n:passenger&gt;
 &lt;/env:Header&gt;
 &lt;env:Body&gt;
  &lt;p:itineraryClarification 
    xmlns:p=&#34;http://travelcompany.example.org/reservation/travel&#34;&gt;
   &lt;p:departure&gt;
     &lt;p:departing&gt;
       &lt;p:airportChoices&gt;
          JFK LGA EWR 
       &lt;/p:airportChoices&gt;
     &lt;/p:departing&gt;
   &lt;/p:departure&gt;
   &lt;p:return&gt;
     &lt;p:arriving&gt;
       &lt;p:airportChoices&gt;
         JFK LGA EWR 
       &lt;/p:airportChoices&gt;
     &lt;/p:arriving&gt;
   &lt;/p:return&gt;  
  &lt;/p:itineraryClarification&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6313E920-EAE2-43AF-AB90-866CA58A100C__GUID-B665E6E0-8400-4647-B2EC-A1630E655CB8">
<p class="titleinexample">Example 24-7 Example 2 SOAP C Client</p>
<pre dir="ltr">#define XMLSOAP_MAX_NAME        1024
 
/* we need this function for examples 2 and 3 */
static xmlerr add_ns_decl(xmlsoapctx  *ctx, xmlctx *xctx, xmlelemnode *elem,
                          oratext *pfx, oratext *uri)
{
    oratext     *aq, aqbuf[XMLSOAP_MAX_NAME];
    xmldocnode  *doc;
    oratext     *xmlns = &#34;xmlns:&#34;;
    
    /* if no room for &#34;xmlns:usersprefix\0&#34; then fail now */
    if ((strlen((char *)pfx) + strlen((char *)xmlns)) &gt;
        sizeof(aqbuf))
        return EX_FAIL;
    (void) strcpy((char *)aqbuf, (char *)xmlns);
    strcat((char *)aqbuf, (char *)pfx);
    doc = XmlDomGetOwnerDocument(xctx, elem);
    aq = XmlDomSaveString(xctx, doc, aqbuf);
    XmlDomSetAttrNS(xctx, elem, uri, aq, uri);
    return XMLERR_OK;
}
 
    /* EXAMPLE 2 */
    /* construct message */
    if (!(msg2 = XmlSoapCreateMsg(ctx, &amp;xerr)))
    {
         printf(&#34;Failed to create SOAP message, error %u\n&#34;, (unsigned) xerr);
         return xerr;
    }
    res = XmlSoapAddHeaderElement(ctx, msg2, &#34;m:reservation&#34;, mres_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, res, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, res, TRUE);
    (void) XmlDomAddTextElem(xctx, res, mres_uri, &#34;m:reference&#34;,
                 &#34;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d&#34;);
    (void) XmlDomAddTextElem(xctx, res, mres_uri, &#34;m:dateAndTime&#34;,
                               &#34;2001-11-29T13:35:00.000-05:00&#34;);
    pas = XmlSoapAddHeaderElement(ctx, msg2, &#34;n:passenger&#34;, npas_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, pas, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, pas, TRUE);
    (void) XmlDomAddTextElem(xctx, pas, npas_uri, &#34;n:name&#34;,
                              &#34;John Smith&#34;);
    /* Fill body */
    /* Itinerary */
    itin = XmlSoapAddBodyElement(ctx, msg2, &#34;p:itineraryClarification&#34;,
                                 trav_uri, &amp;xerr);
    /* Departure */
    departure = XmlDomCreateElemNS(xctx, msg2,  trav_uri, &#34;p:departure&#34;);
    departing = XmlDomCreateElem(xctx, msg2,  &#34;p:departing&#34;);
    (void) XmlDomAddTextElem(xctx, departing, trav_uri,
                              &#34;p:airportChoices&#34;, &#34;JFK LGA EWR&#34;);
    (void) XmlDomAppendChild(xctx, departure, departing);
    XmlDomAppendChild(xctx, itin, departure);
 
    /* Return */
    ret = XmlDomCreateElemNS(xctx, msg2,  trav_uri, &#34;p:return&#34;);
    arriving = XmlDomCreateElemNS(xctx, msg2,  trav_uri, &#34;p:arriving&#34;);
    (void) XmlDomAddTextElem(xctx, arriving, trav_uri,
                              &#34;p:airportChoices&#34;, &#34;JFK LGA EWR&#34;);
    XmlDomAppendChild(xctx, ret, arriving);
    XmlDomAppendChild(xctx, itin, ret);
 
#ifdef DEBUG
    XmlSaveDom(xctx, &amp;xerr, msg2, &#34;stdio&#34;, stdout, &#34;indent_step&#34;, 1, NULL);
#endif
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19871"></a><a id="ADXDK19872"></a><a id="ADXDK19870"></a>
<div class="props_rev_3"><a id="GUID-C850D49A-2E4F-4F4A-BED4-5B6E3CF7D130"></a>
<h2 id="ADXDK-GUID-C850D49A-2E4F-4F4A-BED4-5B6E3CF7D130" class="sect2"><span class="enumeration_section">24.5</span> SOAP Example 3: Using POST</h2>
<div>
<p>Credit card information for John Smith is sent in the final XML document using the POST method. The <code>XmlSoapCall()</code> writes the HTTP header that precedes the XML message in this example:</p>
<p>The C Client includes this code block which is substituted like the second example in <a href="adx_c_soap.htm#GUID-38829ADC-8292-419D-876E-4C0BB7019CA2__BABEGEGD">Example 24-5</a>:</p>
<div class="example" id="GUID-C850D49A-2E4F-4F4A-BED4-5B6E3CF7D130__GUID-58DDA73F-62AB-403A-A4C0-21F992FD6E86">
<p class="titleinexample">Example 24-8 Example 3 SOAP Message</p>
<pre dir="ltr">POST /Reservations HTTP/1.0
Host: travelcompany.example.org
Content-Type: application/soap+xml; charset=&#34;utf-8&#34;
Content-Length: nnnn

&lt;?xml version=&#39;1.0&#39; ?&gt;
&lt;env:Envelope xmlns:env=&#34;http://www.w3.org/2003/05/soap-envelope&#34; &gt;
 &lt;env:Header&gt;
   &lt;t:transaction
           xmlns:t=&#34;http://thirdparty.example.org/transaction&#34;
           env:encodingStyle=&#34;http://example.com/encoding&#34;
           env:mustUnderstand=&#34;true&#34; &gt;5&lt;/t:transaction&gt;
 &lt;/env:Header&gt;  
 &lt;env:Body&gt;
  &lt;m:chargeReservation 
      env:encodingStyle=&#34;http://www.w3.org/2003/05/soap-encoding&#34;
         xmlns:m=&#34;http://travelcompany.example.org/&#34;&gt;
   &lt;m:reservation xmlns:m=&#34;http://travelcompany.example.org/reservation&#34;&gt;
    &lt;m:code&gt;FT35ZBQ&lt;/m:code&gt;
   &lt;/m:reservation&gt;   
   &lt;o:creditCard xmlns:o=&#34;http://mycompany.example.com/financial&#34;&gt;
    &lt;n:name xmlns:n=&#34;http://mycompany.example.com/employees&#34;&gt;
           John Smith
    &lt;/n:name&gt;     
    &lt;o:number&gt;123456789099999&lt;/o:number&gt;
    &lt;o:expiration&gt;2005-02&lt;/o:expiration&gt;
   &lt;/o:creditCard&gt;
  &lt;/m:chargeReservation&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C850D49A-2E4F-4F4A-BED4-5B6E3CF7D130__GUID-09E4AA70-22BF-473A-AA7F-83743438E9E4">
<p class="titleinexample">Example 24-9 Example 3 SOAP C Client</p>
<pre dir="ltr">#define XMLSOAP_MAX_NAME        1024
 
/* we need this function for examples 2 and 3 */
static xmlerr add_ns_decl(xmlsoapctx  *ctx, xmlctx *xctx, xmlelemnode *elem,
                          oratext *pfx, oratext *uri)
{
    oratext     *aq, aqbuf[XMLSOAP_MAX_NAME];
    xmldocnode  *doc;
    oratext     *xmlns = &#34;xmlns:&#34;;
    
    /* if no room for &#34;xmlns:usersprefix\0&#34; then fail now */
    if ((strlen((char *)pfx) + strlen((char *)xmlns)) &gt;
        sizeof(aqbuf))
        return EX_FAIL;
    (void) strcpy((char *)aqbuf, (char *)xmlns);
    strcat((char *)aqbuf, (char *)pfx);
    doc = XmlDomGetOwnerDocument(xctx, elem);
    aq = XmlDomSaveString(xctx, doc, aqbuf);
    XmlDomSetAttrNS(xctx, elem, uri, aq, uri);
    return XMLERR_OK;
}
 
    /* EXAMPLE 3 */
    if (!(msg3 = XmlSoapCreateMsg(ctx, &amp;xerr)))
    {
        printf(&#34;Failed to create SOAP message, error %u\n&#34;, (unsigned) xerr);
        return xerr;
    }
    trans = XmlSoapAddHeaderElement(ctx,msg3, &#34;t:transaction&#34;, tparty_uri, &amp;xerr);
    xerr = XmlSoapSetMustUnderstand(ctx, trans, TRUE);
    XmlDomSetAttr(xctx, trans, estyle, estyle_uri);
    text = XmlDomCreateText(xctx, msg3, &#34;5&#34;);
    XmlDomAppendChild(xctx, trans, text);
    
    /* Fill body */
    /* Charge Reservation */
    charge = XmlSoapAddBodyElement(ctx,msg3,&#34;m:chargeReservation&#34;,comp_uri,&amp;xerr);
    XmlDomSetAttr(xctx, charge, estyle, soap_style_uri);
    res = XmlDomCreateElemNS(xctx, msg3, mres_uri,  &#34;m:reservation&#34;);
    if (add_ns_decl(ctx, xctx, res, &#34;m&#34;, mres_uri))
        return EX_FAIL; 
    (void) XmlDomAddTextElem(xctx, res, mres_uri,
                              &#34;m:code&#34;, &#34;FT35ZBQ&#34;);
    (void) XmlDomAppendChild(xctx, charge, res);
 
    /* create card elem with  namespace */
    card = XmlDomCreateElemNS(xctx, msg3, finance_uri, &#34;o:creditCard&#34;);
    if (add_ns_decl(ctx, xctx, card, &#34;o&#34;, finance_uri))
        return EX_FAIL; 
    name =  XmlDomAddTextElem(xctx, card, npas_uri,
                              &#34;n:name&#34;, &#34;John Smith&#34;);
    /* add namespace */
    if (add_ns_decl(ctx, xctx, name, &#34;n&#34;, npas_uri))
        return EX_FAIL; 
    (void)  XmlDomAddTextElem(xctx, card, finance_uri,
                              &#34;o:number&#34;, &#34;123456789099999&#34;);
    (void) XmlDomAddTextElem(xctx, card, finance_uri,
                              &#34;o:expiration&#34;, &#34;2005-02&#34;);
    (void) XmlDomAppendChild(xctx, charge, card);
 
#ifdef DEBUG
    XmlSaveDom(xctx, &amp;xerr, msg3, &#34;stdio&#34;, stdout, &#34;indent_step&#34;, 1, NULL);
#endif
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_c_diff.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_pt_cplus.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>