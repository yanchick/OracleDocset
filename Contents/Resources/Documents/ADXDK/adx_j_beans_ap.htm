<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1655"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20XML%20Developer%27s%20Kit%20JavaBeans%20%28Deprecated%29"></a><title>Oracle XML Developer&#39;s Kit JavaBeans (Deprecated)</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="DOMBuilder Bean, XSLTransformer JavaBean, DB Access JavaBean, XMLDBAccess JavaBean, XMLDiff JavaBean, XMLCompress JavaBean, XSLValidator JavaBean, XSLT, XSLTransformer bean"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_ermg_xsu.htm" title="Previous" type="text/html"/>
<link rel="Next" href="glossary.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-43EA3B96-E55A-4346-892F-80D7482F330C"></a> <span id="PAGE" style="display:none;">48/50</span> <!-- End Header -->
<a id="ADXDK1062"></a><a id="ADXDK223"></a>
<h1 id="ADXDK-GUID-43EA3B96-E55A-4346-892F-80D7482F330C" class="sect1"><span class="enumeration_chapter">D</span> Oracle XML Developer&#39;s Kit JavaBeans (Deprecated)</h1>
<div>
<p>This appendix explains Oracle XML Developer&#39;s Kit (XDK) JavaBeans.</p>
<div class="infobox-note" id="GUID-43EA3B96-E55A-4346-892F-80D7482F330C__GUID-1AB12E8F-0B67-47F2-B376-326CCBD92417">
<p class="notep1">Note:</p>
<p>The XDK JavaBeans, described in this appendix, and the corresponding XDK Java application programming interface (API) packages and classes are deprecated in Oracle Database 12<span class="italic">c</span> Release 1 (12.1). These components are still supported in Oracle Database 12<span class="italic">c</span> Release 1 (12.1), but Oracle recommends not using them in new applications. This functionality is deprecated with no replacement.</p>
</div>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_beans_ap.htm#GUID-E4E9B32B-AA02-4765-AE9F-AB3A6F64C958">Introduction to XDK JavaBeans</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-5C647213-208F-41EF-95CF-83A1FE9AD65A">Using XDK JavaBeans: Overview</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-7CF7A932-8591-4E12-A174-692E20DE25AD">Processing XML with XDK JavaBeans</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-43EA3B96-E55A-4346-892F-80D7482F330C__GUID-0FF92B7F-C8A5-4C7B-85ED-31138902196C">
<p class="notep1">See Also:</p>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> for more information about the deprecated XDK Java APIs</p>
</div>
</div>
<!-- class="section" --></div>
<a id="ADXDK1063"></a><a id="ADXDK224"></a>
<div class="props_rev_3"><a id="GUID-E4E9B32B-AA02-4765-AE9F-AB3A6F64C958"></a>
<h2 id="ADXDK-GUID-E4E9B32B-AA02-4765-AE9F-AB3A6F64C958" class="sect2"><span class="enumeration_section">D.1</span> Introduction to XDK JavaBeans</h2>
<div>
<p>XDK JavaBeans are a set of Extensible Markup Language (XML) components that you can use in Java applications and applets.</p>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_beans_ap.htm#GUID-769DE8C3-2067-4B0A-9CF9-34B6E5103F24">Prerequisites</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-E6AEA5CB-CF99-49E3-8A6B-28C16F4BBC9C">Standards and Specifications</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-3E29583E-5973-493B-B49B-332661BBCC25">XDK JavaBeans Features</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK225"></a>
<div class="props_rev_3"><a id="GUID-769DE8C3-2067-4B0A-9CF9-34B6E5103F24"></a>
<h3 id="ADXDK-GUID-769DE8C3-2067-4B0A-9CF9-34B6E5103F24" class="sect3"><span class="enumeration_section">D.1.1</span> Prerequisites</h3>
<div>
<p>This appendix assumes that you are familiar with these technologies:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="glossary.htm#GUID-D126E236-BC79-4098-A944-341E7403D606"><span class="xrefglossterm">JavaBeans</span></a>. JavaBeans components, or Beans, are reusable software components that can be manipulated visually in a builder tool.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-6ABA93DA-F986-43F2-97D2-23AA0EA6455C"><span class="xrefglossterm">Java Database Connectivity (JDBC)</span></a>. Database connectivity is included with the XDK JavaBeans. The beans can connect directly to a JDBC-enabled database to retrieve and store XML and Extensible Stylesheet Language (XSL) files.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-0969F796-24C8-4A02-B671-B2EE8BD49F5B"><span class="xrefglossterm">Document Object Model (DOM)</span></a>. DOM is an in-memory tree representation of the structure of an XML document.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-6B57591D-3889-4BCD-8598-58ED2DC9E9EE"><span class="xrefglossterm">Simple API for XML (SAX)</span></a>. SAX is a standard for event-based XML parsing.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-B1E6F2C9-39D7-42D5-817B-6210231ABF97"><span class="xrefglossterm">XML Schema language</span></a>. See <a href="adx_j_sproc.htm#GUID-F41C7DA2-A3DF-463B-A08C-24E8F0621450">Using the XML Schema Processor for Java</a> for an overview and links to suggested reading.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK226"></a>
<div class="props_rev_3"><a id="GUID-E6AEA5CB-CF99-49E3-8A6B-28C16F4BBC9C"></a>
<h3 id="ADXDK-GUID-E6AEA5CB-CF99-49E3-8A6B-28C16F4BBC9C" class="sect3"><span class="enumeration_section">D.1.2</span> Standards and Specifications</h3>
<div>
<p>XDK JavaBeans require version 1.2 or later of XDK, and they can be used with any version of JDK 1.2 or above. The XDK JavaBeans conform with the Sun JavaBeans specification, and include the required <code>BeanInfo</code> class that extends <code>java.beans.SimpleBeanInfo</code>.</p>
<p>The JavaBeans 1.01 specification, which describes JavaBeans as present in JDK 1.1, is available here:</p>
<pre dir="ltr">http://www.oracle.com/technetwork/java/index.html
</pre>
<p>The additions for the Java 2 platform to the JavaBeans core specification provide developers with standard means to create more sophisticated JavaBeans components. The JavaBeans specifications for Java 2 are also available here:</p>
<pre dir="ltr">http://www.oracle.com/technetwork/java/index.html
</pre>
<div class="infoboxnotealso" id="GUID-E6AEA5CB-CF99-49E3-8A6B-28C16F4BBC9C__GUID-D2876B6B-425F-4AE3-AAF8-5350A94656C9">
<p class="notep1">See Also:</p>
<p><a href="adx_ref_standards.htm#GUID-795A483B-12AC-4F6D-A606-6BE9DA963F0F">Oracle XML Developer&#39;s Kit Standards</a> for a summary of the standards supported by XDK</p>
</div>
</div>
</div>
<a id="ADXDK227"></a>
<div class="props_rev_3"><a id="GUID-3E29583E-5973-493B-B49B-332661BBCC25"></a>
<h3 id="ADXDK-GUID-3E29583E-5973-493B-B49B-332661BBCC25" class="sect3"><span class="enumeration_section">D.1.3</span> XDK JavaBeans Features</h3>
<div>
<p>XDK JavaBeans facilitate the addition of graphical user interfaces (GUIs) to XML applications. Bean encapsulation includes documentation and descriptors that you can access directly from Java integrated development environments (IDEs) such as Oracle JDeveloper.</p>
<p>XDK includes these beans:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_beans_ap.htm#GUID-5CC98530-D48D-4E6B-ADFB-63DCD05157A4">DOMBuilder</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-2A740127-98CD-4B6E-9643-25CE1C196D5B">XSLTransformer</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-7336652B-C73E-4E35-9011-DEBFD5F6B4D8">DBAccess</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-5D9D3AEB-DA6C-4B8B-BD6F-AFC82D7D119B">XMLDBAccess</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-FF14448C-9A4D-4F24-9877-24FEF7ABDA2E">XMLDiff</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-DBEF5180-3B8B-45EB-A90A-655F9223ADB1">XMLCompress</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-5C123AF5-102F-432E-892A-1885CF41DD21">XSDValidator</a></p>
</li>
</ul>
</div>
<a id="ADXDK228"></a>
<div class="props_rev_3"><a id="GUID-5CC98530-D48D-4E6B-ADFB-63DCD05157A4"></a>
<h4 id="ADXDK-GUID-5CC98530-D48D-4E6B-ADFB-63DCD05157A4" class="sect4"><span class="enumeration_section">D.1.3.1</span> DOMBuilder</h4>
<div>
<p>The <code>oracle.xml.async.DOMBuilder</code> bean constructs a DOM tree from an XML document. The <code>DOMBuilder</code> JavaBean encapsulates the XML parser for Java <code>DOMParser</code> class with a bean interface and enhances by supporting asynchronous parsing. By registering a listener, Java programs can initiate parsing of large or successive documents and immediately return control to the caller.</p>
<p>A main benefit of this bean is increased efficiency when parsing multiple files, especially if the files are large. <code>DOMBuilder</code> can also provide asynchronous parsing in a background thread in interactive visual applications. Without asynchronous parsing, the GUI is useless until the document to be parsed. With <code>DOMBuilder</code>, the application invokes the parse method and then resumes control. The application can display a progress bar, allow the user to cancel the parse, and so forth.</p>
<div class="infoboxnotealso" id="GUID-5CC98530-D48D-4E6B-ADFB-63DCD05157A4__GUID-C3C2DF87-C545-4DF3-8339-A91A17687BA0">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8">Using the DOMBuilder JavaBean: Basic Process</a>&#34;</span></p>
</div>
</div>
</div>
<a id="ADXDK229"></a>
<div class="props_rev_3"><a id="GUID-2A740127-98CD-4B6E-9643-25CE1C196D5B"></a>
<h4 id="ADXDK-GUID-2A740127-98CD-4B6E-9643-25CE1C196D5B" class="sect4"><span class="enumeration_section">D.1.3.2</span> XSLTransformer</h4>
<div>
<p>The <code>oracle.xml.async.XSLTransformer</code> bean supports asynchronous transformation. It accepts an XML document, applies an Extensible Stylesheet Language Transformation (XSLT) style sheet, and creates an output file. The <code>XSLTransformer</code> JavaBean enables you to transform an XML document to almost any text-based format, including XML, HTML, and data definition language (DDL). This bean can also be used as the basis of a server-side application or servlet to render an XML document, such as an XML representation of a query result, into HTML for display in a browser.</p>
<p>The main benefit of the <code>XSLTransformer</code> bean is that it can transform multiple files in parallel. Like <code>DOMBuilder</code>, you can also use it in visual applications to avoid long periods of time when the GUI is nonresponsive. By implementing the <code>XSLTransformerListener</code> interface, the invoking application receives notification when the transformation completes.</p>
<div class="infoboxnotealso" id="GUID-2A740127-98CD-4B6E-9643-25CE1C196D5B__GUID-852D5FE4-8EF2-4FAF-BD3F-0FA220AFC0AE">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E">Using the XSLTransformer JavaBean: Basic Process</a>&#34;</span></p>
</div>
</div>
</div>
<a id="ADXDK230"></a>
<div class="props_rev_3"><a id="GUID-7336652B-C73E-4E35-9011-DEBFD5F6B4D8"></a>
<h4 id="ADXDK-GUID-7336652B-C73E-4E35-9011-DEBFD5F6B4D8" class="sect4"><span class="enumeration_section">D.1.3.3</span> DBAccess</h4>
<div>
<p>The <code>oracle.xml.dbaccess.DBAccess</code> bean maintains character large object (CLOB) tables that contain multiple XML and text documents. You can use it to store and retrieve XML documents in the database, but not to process them within the database. Java applications that use the DBAccess bean connect to the database through JDBC. XML documents stored in <code>CLOB</code> tables that are not of type <code>XMLType</code> do not have their entities expanded.</p>
<p>The <code>DBAccess</code> bean enables you to do perform these tasks:</p>
<ul style="list-style-type: disc;">
<li>
<p>Create and delete tables of type <code>CLOB</code>.</p>
</li>
<li>
<p>Query the contents of <code>CLOB</code> tables.</p>
</li>
<li>
<p>Perform <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> operations on XML documents stored in <code>CLOB</code> tables.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK231"></a>
<div class="props_rev_3"><a id="GUID-5D9D3AEB-DA6C-4B8B-BD6F-AFC82D7D119B"></a>
<h4 id="ADXDK-GUID-5D9D3AEB-DA6C-4B8B-BD6F-AFC82D7D119B" class="sect4"><span class="enumeration_section">D.1.3.4</span> XMLDBAccess</h4>
<div>
<p>The <code>oracle.xml.xmldbaccess.XMLDBAccess</code> bean extends the <code>DBAccess</code> bean to support XML documents stored in <code>XMLType</code> tables. The class provides methods to list, delete, or retrieve <code>XMLType</code> instances and their tables. For example, the <code>getXMLXPathTextData()</code> method retrieves the value of an XPath expression from an XML document.</p>
<p><code>DBAccess</code> JavaBean maintains <code>XMLType</code> tables that can hold multiple XML and text documents. Each XML or text document is stored as a row in the table. The table is created with this structured query language (SQL) statement:</p>
<pre dir="ltr">CREATE TABLE (FILENAME   CHAR( ) UNIQUE, 
              FILEDATA   SYS.XMLType);
</pre>
<p>The <code>FILENAME</code> field holds a unique string used as a key to retrieve, update, or delete the row. Document text is stored in the <code>FILEDATA</code> field.</p>
<p>The <code>XMLDBAccess</code> bean performs these tasks:</p>
<ul style="list-style-type: disc;">
<li>
<p>Creates and deletes <code>XMLType</code> tables</p>
</li>
<li>
<p>Lists the contents of an <code>XMLType</code> column</p>
</li>
<li>
<p>Performs <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> operations on XML documents stored in <code>XMLType</code> tables</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-5D9D3AEB-DA6C-4B8B-BD6F-AFC82D7D119B__GUID-1D30FC3F-008E-4DBF-8FD0-188A8DD47D0D">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE">Using the XMLDBAccess JavaBean: Basic Process</a>&#34;</span></p>
</div>
</div>
</div>
<a id="ADXDK232"></a>
<div class="props_rev_3"><a id="GUID-FF14448C-9A4D-4F24-9877-24FEF7ABDA2E"></a>
<h4 id="ADXDK-GUID-FF14448C-9A4D-4F24-9877-24FEF7ABDA2E" class="sect4"><span class="enumeration_section">D.1.3.5</span> XMLDiff</h4>
<div>
<p>When comparing XML documents, it is usually unhelpful to compare them character by character. Most XML comparisons are concerned with differences in structure and significant textual content, not differences in white space. The <code>oracle.xml.differ.XMLDiff</code> bean performs these tasks:</p>
<ul style="list-style-type: disc;">
<li>
<p>Constructs and compares the DOM trees for two input XML documents and indicates whether the documents are different.</p>
</li>
<li>
<p>Provides a graphical display of the differences between two XML files. Specifically, you can refer to node insert, delete, modify, or move.</p>
</li>
<li>
<p>Generates an XSLT style sheet that can convert one of the input XML documents into the other document.</p>
</li>
</ul>
<p>The <code>XMLDiff</code> bean is especially useful in pipeline applications. For example, an application could update an XML document, compare it with a previous version of the document, and store the XSLT style sheet that shows the differences between them.</p>
<div class="infoboxnotealso" id="GUID-FF14448C-9A4D-4F24-9877-24FEF7ABDA2E__GUID-BAE76901-863F-4BD5-9EA8-1725E084EF3F">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_pipeline.htm#GUID-B701FC56-68EB-4DB3-B198-357341B5223E">Using the XML Pipeline Processor for Java</a></p>
</li>
<li>
<p><span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7">Using the XMLDiff JavaBean: Basic Process</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK233"></a>
<div class="props_rev_3"><a id="GUID-DBEF5180-3B8B-45EB-A90A-655F9223ADB1"></a>
<h4 id="ADXDK-GUID-DBEF5180-3B8B-45EB-A90A-655F9223ADB1" class="sect4"><span class="enumeration_section">D.1.3.6</span> XMLCompress</h4>
<div>
<p>As explained in <span class="q">&#34;<a href="adx_j_parser.htm#GUID-7C87A9E2-000B-4A33-8D86-11FDA13E1CCA">Compressing and Decompressing XML</a>,&#34;</span> the Oracle XML parser includes a compressor that can serialize XML document objects as binary streams. Although a useful tool, compression with XML parser has these disadvantages:</p>
<ul style="list-style-type: disc;">
<li>
<p>When XML data is deserialized, it must be reparsed.</p>
</li>
<li>
<p>The encapsulation of XML data in tags greatly increase its size.</p>
</li>
</ul>
<p>The <code>oracle.xml.xmlcomp.XMLCompress</code> bean is an encapsulation of the XML compression functionality. It provides these advantages when serializing and deserializing XML:</p>
<ul style="list-style-type: disc;">
<li>
<p>It encapsulates the method that serializes the DOM, which produces a stream.</p>
</li>
<li>
<p>XML processors can regenerate the DOM from the compressed stream without reparsing the XML.</p>
</li>
</ul>
<p>The bean supports compression and decompression of input XML parsed by <code>DOMParser</code> or <code>SAXParser</code>. DOM compression supports inputs of type <code>XMLType</code>, <code>CLOB</code>, and <code>BLOB</code>.</p>
<p>To use different parsing options, parse the document before input and then pass the <code>XMLDocument</code> object to the compressor bean. The compression factor is a rough value based on the file size of the input XML file and the compressed file. The limitation of the compression factor method is that it can be used only when the compression is performed with <code>java.io.File</code> objects as parameters.</p>
</div>
</div>
<a id="ADXDK234"></a>
<div class="props_rev_3"><a id="GUID-5C123AF5-102F-432E-892A-1885CF41DD21"></a>
<h4 id="ADXDK-GUID-5C123AF5-102F-432E-892A-1885CF41DD21" class="sect4"><span class="enumeration_section">D.1.3.7</span> XSDValidator</h4>
<div>
<p>The <code>oracle.xml.schemavalidator.XSDValidator</code> bean encapsulates the <code>XSDValidator</code> class and adds capabilities for validating a DOM tree. A useful feature of this bean concerns validation errors. If the application throws a validation error, the <code>getStackList()</code> method returns a list of DOM tree paths that lead to the invalid node. Nodes with errors are returned in a vector of stack trees in which the top element of the stack represents the root node. You can get child nodes by pulling them from the stack. To use <code>getStackList()</code> you must use instantiate the <code>java.util.Vector</code> and <code>java.util.Stack</code> classes.</p>
</div>
</div>
</div>
</div>
<a id="ADXDK1064"></a><a id="ADXDK235"></a>
<div class="props_rev_3"><a id="GUID-5C647213-208F-41EF-95CF-83A1FE9AD65A"></a>
<h2 id="ADXDK-GUID-5C647213-208F-41EF-95CF-83A1FE9AD65A" class="sect2"><span class="enumeration_section">D.2</span> Using XDK JavaBeans: Overview</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_beans_ap.htm#GUID-8474BF39-D9DE-4BDE-ADDB-F28379D70E77">Using XDK JavaBeans: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-D52FABF2-2B48-440B-A916-3F29AF00B5C0">Running XDK JavaBean Demo Programs</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK236"></a>
<div class="props_rev_3"><a id="GUID-8474BF39-D9DE-4BDE-ADDB-F28379D70E77"></a>
<h3 id="ADXDK-GUID-8474BF39-D9DE-4BDE-ADDB-F28379D70E77" class="sect3"><span class="enumeration_section">D.2.1</span> Using XDK JavaBeans: Basic Process</h3>
<div>
<div class="section">
<p>This section describes the program flow of Java applications that use the more useful beans: <code>DOMBuilder</code>, <code>XSLTransformer</code>, <code>XMLDBAccess</code>, and <code>XMLDiff</code>. The section contains these topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_beans_ap.htm#GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8">Using the DOMBuilder JavaBean: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E">Using the XSLTransformer JavaBean: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE">Using the XMLDBAccess JavaBean: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7">Using the XMLDiff JavaBean: Basic Process</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK238"></a><a id="ADXDK239"></a><a id="ADXDK237"></a>
<div class="props_rev_3"><a id="GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8"></a>
<h4 id="ADXDK-GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8" class="sect4"><span class="enumeration_section">D.2.1.1</span> Using the DOMBuilder JavaBean: Basic Process</h4>
<div>
<div class="section">
<p>The <code>DOMBuilder</code> class implements an XML 1.0 parser according to the World Wide Web Consortium (W3C) recommendation. It parses an XML document and builds a DOM tree. The parsing is done in a separate thread. The <code>DOMBuilderListener</code> interface must be used for notification when the tree is built.</p>
<p>When developing applications that use this bean, you must import these subpackages:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.async</code>, which provides asynchronous Java beans for DOM building</p>
</li>
<li>
<p><code>oracle.xml.parser.v2</code>, which provides APIs for SAX, DOM, and XSLT</p>
</li>
</ul>
<p>The <code>oracle.xml.parser.v2</code> subpackage is described in detail in <a href="adx_j_parser.htm#GUID-33E0EA2B-A08A-462E-86B4-3F944409663D">XML Parsing for Java</a>. The most important DOM-related classes and interfaces in the <code>javax.xml.async</code> package are described in <a href="adx_j_beans_ap.htm#GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8__BEHCGFIB" title="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">Table D-1</a>.</p>
<div class="tblformalwide" id="GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8__BEHCGFIB">
<p class="titleintable">Table D-1 javax.xml.async DOM-Related Classes and Interfaces</p>
<table class="cellalignment655" title="javax.xml.async DOM-Related Classes and Interfaces" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d145504e1712">Class/Interface</th>
<th class="cellalignment682" id="d145504e1715">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e1720" headers="d145504e1712">
<p><code>DOMBuilder</code> class</p>
</td>
<td class="cellalignment684" headers="d145504e1720 d145504e1715">
<p>Encapsulates an XML parser to parse an XML document and build a DOM tree. The parsing is done in a separate thread. The <code>DOMBuilderListener</code> interface must be used for notification when the tree is built.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e1732" headers="d145504e1712">
<p><code>DOMBuilderEvent</code> class</p>
</td>
<td class="cellalignment684" headers="d145504e1732 d145504e1715">
<p>Instantiates the event object that <code>DOMBuilder</code> uses to notify all registered listeners about parse events.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e1744" headers="d145504e1712">
<p><code>DOMBuilderListener</code> interface</p>
</td>
<td class="cellalignment684" headers="d145504e1744 d145504e1715">
<p>Must be implemented so that the program can receive notifications about events during the asynchronous parsing. The class implementing this interface must be added to the <code>DOMBuilder</code> with the <code>addDOMBuilderListener()</code> method.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e1759" headers="d145504e1712">
<p><code>DOMBuildeErrorEvent</code> class</p>
</td>
<td class="cellalignment684" headers="d145504e1759 d145504e1715">
<p>Defines the error event that is sent when parse exception occurs.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e1768" headers="d145504e1712">
<p><code>DOMBuilderErrorListener</code> interface</p>
</td>
<td class="cellalignment684" headers="d145504e1768 d145504e1715">
<p>Must be implemented so that the program can receive notifications when errors are found during parsing. The class implementing this interface must be added to the <code>DOMBuilder</code> with the <code>addDOMBuilderErrorListener()</code> method.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_beans_ap.htm#GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8__BEHEBEJC">Figure D-1</a> depicts the basic process of an application that uses the <code>DOMBuilder</code> JavaBean.</p>
<div class="figure" id="GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8__BEHEBEJC">
<p class="titleinfigure">Figure D-1 DOMBuilder JavaBean Usage</p>
<img width="579" height="538" src="img/GUID-D2326D54-9770-4619-BB15-68A690CC903A-default.gif" alt="Description of Figure D-1 follows" title="Description of Figure D-1 follows"/><br/>
<a href="img_text/GUID-D2326D54-9770-4619-BB15-68A690CC903A-print.htm">Description of &#34;Figure D-1 DOMBuilder JavaBean Usage&#34;</a></div>
<!-- class="figure" -->
<p><a href="adx_j_beans_ap.htm#GUID-4CFA5A31-6F82-4FA2-9B3E-CBFD775849B8__BEHEBEJC">Figure D-1</a> shows these stages of XML processing:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Parse the input XML document. The program can receive the XML document as a file, string buffer, or URL.</span></li>
<li class="stepexpand"><span>Add the <code>DOMBuilder</code> listener. The program invokes the method <code>DOMBuilder.addDOMBuilderListener(DOMBuilderListener)</code>.</span></li>
<li class="stepexpand"><span>Parse the XML document. The program invokes the <code>DOMBuilder.parse()</code> method.</span></li>
<li class="stepexpand"><span>Optionally, process the parsed result further.</span></li>
<li class="stepexpand"><span>Invoke the listener when the program receives an asynchronous call. The listener, which must implement the <code>DOMBuilderListener</code> interface, is called by invoking the <code>DOMBuilderOver()</code> method.</span>
<div>
<p>The available <code>DOMBuilderListener</code> methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>domBuilderError(DOMBuilderEvent)</code>, which is called when parse errors occur.</p>
</li>
<li>
<p><code>domBuilderOver(DOMBuilderEvent)</code>, which is called when parsing completes.</p>
</li>
<li>
<p><code>domBuilderStarted(DOMBuilderEvent)</code>, which is called when parsing begins.</p>
</li>
</ul>
</div>
</li>
<li class="stepexpand"><span>Fetch the DOM. Invoke the <code>DOMBuilder.getDocument()</code> method to fetch the resulting DOM document and output it.</span></li>
</ol>
</div>
</div>
<a id="ADXDK241"></a><a id="ADXDK242"></a><a id="ADXDK240"></a>
<div class="props_rev_3"><a id="GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E"></a>
<h4 id="ADXDK-GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E" class="sect4"><span class="enumeration_section">D.2.1.2</span> Using the XSLTransformer JavaBean: Basic Process</h4>
<div>
<div class="section">
<p>The <code>XSLTransformer</code> bean encapsulates the Java XML parser XSLT processing engine with a bean interface and extends its functionality to permit asynchronous transformation. By registering a listener, your Java application can transform large and successive documents by having the control returned immediately to the caller.</p>
<p>When developing applications that use this bean, you must import these subpackages:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.async</code>, which provides asynchronous Java beans for XSL transformations</p>
</li>
<li>
<p><code>oracle.xml.parser.v2</code>, which provides APIs for XML parsing SAX, DOM, and XSLT</p>
</li>
</ul>
<p>The <code>oracle.xml.parser.v2 subpackage</code> is described in detail in <a href="adx_j_parser.htm#GUID-33E0EA2B-A08A-462E-86B4-3F944409663D">XML Parsing for Java</a>. The most important XSL-related classes and interfaces in the <code>javax.xml.async</code> package are described in <a href="adx_j_beans_ap.htm#GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E__BEHJCECE" title="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">Table D-2</a>.</p>
<div class="tblformalwide" id="GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E__BEHJCECE">
<p class="titleintable">Table D-2 javax.xml.async XSL-Related Classes and Interfaces</p>
<table class="cellalignment655" title="javax.xml.async XSL-Related Classes and Interfaces" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d145504e1987">Class/Interface</th>
<th class="cellalignment682" id="d145504e1990">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e1995" headers="d145504e1987">
<p><code>XSLTransformer</code> class</p>
</td>
<td class="cellalignment684" headers="d145504e1995 d145504e1990">
<p>Applies XSL transformation in a background thread.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e2004" headers="d145504e1987">
<p><code>XSLTransformerEvent</code> class</p>
</td>
<td class="cellalignment684" headers="d145504e2004 d145504e1990">
<p>Represents the event object used by <code>XSLTransformer</code> to notify XSL transformation events to all of its registered listeners.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e2016" headers="d145504e1987">
<p><code>XSLTransformerListener</code> interface</p>
</td>
<td class="cellalignment684" headers="d145504e2016 d145504e1990">
<p>Must be implemented so that the program can receive notifications about events during asynchronous transformation. The class implementing this interface must be added to the <code>XSLTransformer</code> with the <code>addXSLTransformerListener()</code> method.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e2031" headers="d145504e1987">
<p><code>XSLTransformerErrorEvent</code> class</p>
</td>
<td class="cellalignment684" headers="d145504e2031 d145504e1990">
<p>Instantiates the error event object that <code>XSLTransformer</code> uses to notify all registered listeners about transformation error events.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d145504e2043" headers="d145504e1987">
<p><code>XSLTransformerErrorListener</code> interface</p>
</td>
<td class="cellalignment684" headers="d145504e2043 d145504e1990">
<p>Must be implemented so that the program can receive notifications about error events during the asynchronous transformation. The class implementing this interface must be added to the <code>XSLTransformer</code> using <code>addXSLTransformerListener()</code> method.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_beans_ap.htm#GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E__BEHHGBBE">Figure D-2</a> shows <code>XSLTransformer</code> bean usage.</p>
<div class="figure" id="GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E__BEHHGBBE">
<p class="titleinfigure">Figure D-2 XSLTransformer JavaBean Usage</p>
<img width="579" height="434" src="img/GUID-D112E5DD-119F-43EE-B7CD-D25EBE978A60-default.gif" alt="Description of Figure D-2 follows" title="Description of Figure D-2 follows"/><br/>
<a href="img_text/GUID-D112E5DD-119F-43EE-B7CD-D25EBE978A60-print.htm">Description of &#34;Figure D-2 XSLTransformer JavaBean Usage&#34;</a></div>
<!-- class="figure" -->
<p><a href="adx_j_beans_ap.htm#GUID-5442ECA7-E135-44BB-AEB7-C3FAEE93690E__BEHHGBBE">Figure D-2</a> goes through these stages:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Input an XSLT style sheet and XML instance document.</span></li>
<li><span>Add an XSLT listener. The program invokes the <code>XSLTransfomer.addXSLTransformerListener()method</code>.</span></li>
<li><span>Apply the style sheets. The <code>XSLTransfomer.processXSL()</code> method initiates the XSL transformation in the background.</span></li>
<li><span>Optionally, perform further processing with the <code>XSLTransformer</code> bean.</span></li>
<li><span>Invoke the XSLT listener when the program receives an asynchronous call. The listener, which must implement the <code>XSLTransformerListener</code> interface, is called by invoking the <code>xslTransformerOver()</code> method.</span></li>
<li><span>Fetch the result of the transformation. Invoke the <code>XSLTransformer.getResult()</code> method to return the XML document fragment for the resulting document.</span></li>
<li><span>Output the XML document fragment.</span></li>
</ol>
</div>
</div>
<a id="ADXDK244"></a><a id="ADXDK245"></a><a id="ADXDK243"></a>
<div class="props_rev_3"><a id="GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE"></a>
<h4 id="ADXDK-GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE" class="sect4"><span class="enumeration_section">D.2.1.3</span> Using the XMLDBAccess JavaBean: Basic Process</h4>
<div>
<div class="section">
<p>When developing applications that use the <code>XMLDBAccess</code> bean, you must use these subpackages:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.xmldbaccess</code>, which includes the <code>XMLDBAccess</code> bean</p>
</li>
<li>
<p><code>oracle.xml.parser.v2</code>, which provides APIs for XML parsing SAX, DOM, and XSLT</p>
</li>
</ul>
<p>The <code>oracle.xml.parser.v2 subpackage</code> is described in detail in <a href="adx_j_parser.htm#GUID-33E0EA2B-A08A-462E-86B4-3F944409663D">XML Parsing for Java</a>. Some of the more important methods in the <code>XMLDBAccess</code> class are described in <a href="adx_j_beans_ap.htm#GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE__BEHDCBIH" title="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">Table D-3</a>.</p>
<div class="tblformal" id="GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE__BEHDCBIH">
<p class="titleintable">Table D-3 XMLDBAccess Methods</p>
<table class="cellalignment650" title="XMLDBAccess Methods" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment732" id="d145504e2238">Class/Interface</th>
<th class="cellalignment733" id="d145504e2241">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment734" id="d145504e2246" headers="d145504e2238">
<p><code>createXMLTypeTable()</code></p>
</td>
<td class="cellalignment735" headers="d145504e2246 d145504e2241">
<p>Creates an <code>XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d145504e2257" headers="d145504e2238">
<p><code>insertXMLTypeData()</code></p>
</td>
<td class="cellalignment735" headers="d145504e2257 d145504e2241">
<p>Inserts a text file as a row in an <code>XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d145504e2268" headers="d145504e2238">
<p><code>replaceXMLTypeData()</code></p>
</td>
<td class="cellalignment735" headers="d145504e2268 d145504e2241">
<p>Replaces a text file as a row in an <code>XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d145504e2279" headers="d145504e2238">
<p><code>getXMLTypeTableNames()</code></p>
</td>
<td class="cellalignment735" headers="d145504e2279 d145504e2241">
<p>Retrieves all XML tables with names starting with a specified string.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d145504e2287" headers="d145504e2238">
<p><code>getXMLTypeData()</code></p>
</td>
<td class="cellalignment735" headers="d145504e2287 d145504e2241">
<p>Retrieves text file from an <code>XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment734" id="d145504e2298" headers="d145504e2238">
<p><code>getXMLTypeXPathTextData()</code></p>
</td>
<td class="cellalignment735" headers="d145504e2298 d145504e2241">
<p>Retrieves the text data based on the XPath expression from an <code>XMLType</code> table.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_beans_ap.htm#GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE__BEHDCGFG">Figure D-3</a> shows typical <code>XMLDBAccess</code> bean usage. It shows how the <code>DBAccess</code> bean maintains and manipulates XML documents stored in <code>XMLType</code>s.</p>
<div class="figure" id="GUID-7B0ECA80-8EC3-430F-894B-E62EFD659BBE__BEHDCGFG">
<p class="titleinfigure">Figure D-3 XMLDBAccess JavaBean Usage</p>
<img width="477" height="267" src="img/GUID-7A257BAD-988E-43E0-826A-ADB9EB54C687-default.gif" alt="Description of Figure D-3 follows" title="Description of Figure D-3 follows"/><br/>
<a href="img_text/GUID-7A257BAD-988E-43E0-826A-ADB9EB54C687-print.htm">Description of &#34;Figure D-3 XMLDBAccess JavaBean Usage&#34;</a></div>
<!-- class="figure" -->
<p>For example, an <code>XMLDBAaccess</code> program could process XML documents in these stages:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Create an <code>XMLType</code> table. Invoke <code>createXMLTypeTable()</code> by passing it database connection information and a table name.</span></li>
<li><span>List the <code>XMLType</code> tables. Invoke <code>getXMLTypeTableNames()</code> by passing it database connection information and an empty string.</span></li>
<li><span>Load XML data into the table. Invoke <code>replaceXMLTypeData()</code> by passing it database connection information, the table name, the XML file name, and a string containing the XML.</span></li>
<li><span>Retrieve the XML data into a <code>String</code>. Invoke <code>getXMLTypeData()</code> by passing it the connection information, the table name, and the XML file name.</span></li>
<li><span>Retrieve XML data based on an XPath expression. Invoke <code>getXMLXPathTextData()</code> by passing it the connection information, the table name, the XML file name, and the XPath expression.</span></li>
<li><span>Close the connection.</span></li>
</ol>
</div>
</div>
<a id="ADXDK247"></a><a id="ADXDK248"></a><a id="ADXDK246"></a>
<div class="props_rev_3"><a id="GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7"></a>
<h4 id="ADXDK-GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7" class="sect4"><span class="enumeration_section">D.2.1.4</span> Using the XMLDiff JavaBean: Basic Process</h4>
<div>
<div class="section">
<p>When developing applications that use the <code>XMLDiff</code> bean, you typically use these subpackages:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.xmldiff</code>, which includes the <code>XMLDiff</code> bean</p>
</li>
<li>
<p><code>oracle.xml.parser.v2</code>, which provides APIs for XML parsing SAX, DOM, and XSLT</p>
</li>
<li>
<p><code>oracle.xml.async</code>, which provides asynchronous Java beans for DOM building</p>
</li>
</ul>
<p>The <code>oracle.xml.parser.v2 subpackage</code> is described in detail in <a href="adx_j_parser.htm#GUID-33E0EA2B-A08A-462E-86B4-3F944409663D">XML Parsing for Java</a>. Some important methods in the <code>XMLDiff</code> class are described in <a href="adx_j_beans_ap.htm#GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7__BEHFGFFC" title="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">Table D-4</a>.</p>
<div class="tblformal" id="GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7__BEHFGFFC">
<p class="titleintable">Table D-4 XMLDiff Methods</p>
<table class="cellalignment650" title="XMLDiff Methods" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment673" id="d145504e2504">Class/Interface</th>
<th class="cellalignment736" id="d145504e2507">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment675" id="d145504e2512" headers="d145504e2504">
<p><code>diff()</code></p>
</td>
<td class="cellalignment737" headers="d145504e2512 d145504e2507">
<p>Determines the differences between two input XML files or two XMLDocument objects.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d145504e2520" headers="d145504e2504">
<p><code>generateXSL()</code></p>
</td>
<td class="cellalignment737" headers="d145504e2520 d145504e2507">
<p>Generates an XSL file that represents the differences between the input two XML files. The first XML file can be transformed into the second XML file with the generated style sheet. If the XML files are the same, then the XSL generated can transform the first XML file into the second XML file, where the first and second files are equivalent.</p>
<p>Related methods are <code>generateXSLDoc()</code> and <code>generateXSLFile()</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d145504e2536" headers="d145504e2504">
<p><code>setFiles()</code></p>
</td>
<td class="cellalignment737" headers="d145504e2536 d145504e2507">
<p>Sets the XML files to be compared.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d145504e2544" headers="d145504e2504">
<p><code>getDocument1()</code></p>
</td>
<td class="cellalignment737" headers="d145504e2544 d145504e2507">
<p>Gets the document root as an XMLDocument object of the first XML tree. <code>getDocument2()</code> is the equivalent method for the second tree.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d145504e2555" headers="d145504e2504">
<p><code>getDiffPane1()</code></p>
</td>
<td class="cellalignment737" headers="d145504e2555 d145504e2507">
<p>Gets the text panel as <code>JTextPane</code> object that visually shows the diffs in the first XML file. <code>getDiffPane2()</code> is the equivalent method for the second file.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_beans_ap.htm#GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7__BEHCFGFH">Figure D-4</a> shows typical <code>XMLDiff</code> bean usage. It shows how <code>XMLDiff</code> bean compares and displays the differences between input XML documents.</p>
<div class="figure" id="GUID-F543BAE8-F01B-4A06-9335-289CF3D2EBD7__BEHCFGFH">
<p class="titleinfigure">Figure D-4 XMLDiff JavaBean Usage</p>
<img width="668" height="521" src="img/GUID-E4FB7B00-9C85-4B9F-B143-B47C71E9B41C-default.gif" alt="Description of Figure D-4 follows" title="Description of Figure D-4 follows"/><br/>
<a href="img_text/GUID-E4FB7B00-9C85-4B9F-B143-B47C71E9B41C-print.htm">Description of &#34;Figure D-4 XMLDiff JavaBean Usage&#34;</a></div>
<!-- class="figure" -->
<p>For example, an <code>XMLDiff</code> program could process XML documents in these stages:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Create an <code>XMLDiff</code> object.</span></li>
<li><span>Set the files to be compared. Create <code>File</code> objects for the input files and pass references to the objects to <code>XMLDiff.setFiles()</code>.</span></li>
<li><span>Compare the documents. The <code>diff()</code> method returns <code>false</code> if the XML files are the same and <code>true</code> if they are different.</span></li>
<li><span>Respond depending on the whether the input XML documents are the same or different. For example, if they are the same, invoke <code>JOptionPane.showMessageDialog()</code> to print a message.</span></li>
<li><span>Generate an XSLT style sheet that shows the differences between the input XML documents. For example, <code>generateXSLDoc()</code> generates an XSL style sheet as an <code>XMLDocument</code>.</span></li>
<li><span>Display the DOM trees created by <code>XMLDiff</code>.</span></li>
</ol>
</div>
</div>
</div>
<a id="ADXDK250"></a><a id="ADXDK251"></a><a id="ADXDK249"></a>
<div class="props_rev_3"><a id="GUID-D52FABF2-2B48-440B-A916-3F29AF00B5C0"></a>
<h3 id="ADXDK-GUID-D52FABF2-2B48-440B-A916-3F29AF00B5C0" class="sect3"><span class="enumeration_section">D.2.2</span> Running XDK JavaBean Demo Programs</h3>
<div>
<div class="section">
<p>Demo programs for XDK SJavaBeans are included in the <code>$ORACLE_HOME/xdk/demo/java/transviewer</code> directory. The demos show the use of the XDK beans described in <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-3E29583E-5973-493B-B49B-332661BBCC25">XDK JavaBeans Features</a>,&#34;</span> and also some visual beans that are now deprecated. The beans used in the demos are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>XSLTransformer</code></p>
</li>
<li>
<p><code>DOMBuilder</code></p>
</li>
<li>
<p><code>DBAccess</code></p>
</li>
<li>
<p><code>XMLDBAccess</code></p>
</li>
<li>
<p><code>XMLDiff</code></p>
</li>
<li>
<p><code>XMLCompress</code></p>
</li>
<li>
<p><code>XSDValidator</code></p>
</li>
<li>
<p><code>oracle.xml.srcviewer.XMLSourceView</code> (deprecated)</p>
</li>
<li>
<p><code>oracle.xml.treeviewer.XMLTreeView</code> (deprecated)</p>
</li>
<li>
<p><code>oracle.xml.transformer.XMLTransformPanel</code> (deprecated)</p>
</li>
<li>
<p><code>oracle.xml.dbviewer.DBViewer</code> (deprecated)</p>
</li>
</ul>
<p>Although the visual beans are deprecated, they remain useful as educational tools. Consequently, the deprecated beans are included in <code>$ORACLE_HOME/lib/xmldemo.jar</code>. The nondeprecated beans are included in <code>$ORACLE_HOME/lib/xml.jar</code>.</p>
<p><a href="adx_j_beans_ap.htm#GUID-D52FABF2-2B48-440B-A916-3F29AF00B5C0__BEHHBBIE" title="This table lists the sample programs provided in the demo directory. Sample, File Name and Description are the columns.">Table D-5</a> lists the sample programs provided in the demo directory. The first column of the table indicates which sample program use deprecated beans.</p>
<div class="tblformalwide" id="GUID-D52FABF2-2B48-440B-A916-3F29AF00B5C0__BEHHBBIE">
<p class="titleintable">Table D-5 JavaBean Sample Java Source Files</p>
<table class="cellalignment655" title="JavaBean Sample Java Source Files " summary="This table lists the sample programs provided in the demo directory. Sample, File Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment738" id="d145504e2801">Sample</th>
<th class="cellalignment738" id="d145504e2804">File Name</th>
<th class="cellalignment738" id="d145504e2807">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e2812" headers="d145504e2801">
<p><code>sample1</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e2812 d145504e2804">
<p><code>XMLTransformPanelSample.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e2812 d145504e2807">
<p>A visual application that uses the <code>XMLTransformPanel</code>, <code>DOMBuilder</code>, and <code>XSLTransformer</code> beans. This bean applies XSL transformations to XML documents and shows the result.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-019FEFD4-C142-4C6A-BBDB-A0408BB8FBAB">Running sample1</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e2844" headers="d145504e2801">
<p><code>sample2</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e2844 d145504e2804">
<p><code>ViewSample.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e2844 d145504e2807">
<p>A sample visual application that uses the <code>XMLSourceView</code> and <code>XMLTreeView</code> beans. It visualizes XML document files.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-F2C472FC-F1F5-4AB0-9D58-7D1A4B78D782">Running sample2</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e2872" headers="d145504e2801">
<p><code>sample3</code></p>
</td>
<td class="cellalignment644" headers="d145504e2872 d145504e2804">
<p><code>AsyncTransformSample.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e2872 d145504e2807">
<p>A nonvisual application that uses the <code>XSLTransformer</code> and <code>DOMBuilder</code> beans. It applies the XSLT style sheet specified in <code>doc.xsl</code> on all <code>.xml</code> files in the current directory. It writes the results to files with the extension <code>.log</code>.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-4A5BE3BA-2EE0-4699-B0BE-07E5BCD768FF">Running sample3</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e2907" headers="d145504e2801">
<p><code>sample4</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e2907 d145504e2804">
<p><code>DBViewSample.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e2907 d145504e2807">
<p>A visual application that uses the <code>DBViewer</code> bean to implement a simple application that handles insurance claims.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-C6A7DED3-7AD6-4F5E-A061-9EF00B25E628">Running sample4</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e2932" headers="d145504e2801">
<p><code>sample4</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e2932 d145504e2804">
<p><code>DBViewClaims.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e2932 d145504e2807">
<p>This <code>JFrame</code> subclass is instantiated in the <code>DBViewFrame</code> class, which is in turn instantiated in the <code>DBViewSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e2955" headers="d145504e2801">
<p><code>sample4</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e2955 d145504e2804">
<p><code>DBViewFrame.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e2955 d145504e2807">
<p>This <code>JFrame</code> subclass is instantiated in the <code>DBViewSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e2975" headers="d145504e2801">
<p><code>sample5</code></p>
</td>
<td class="cellalignment644" headers="d145504e2975 d145504e2804">
<p><code>XMLDBAccessSample.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e2975 d145504e2807">
<p>A nonvisual application for the <code>XMLDBAccess</code> bean. This program demonstrates how to use the <code>XMLDBAccess</code> bean APIs to store and retrieve XML documents in <code>XMLType</code> tables.</p>
<p>To use <code>XMLType</code>, you need Oracle Database and <code>xdb.jar</code>. The program accepts values for <code>HOSTNAME</code>, <code>PORT</code>, <code>SID</code>, <code>USERID</code>, and <code>PASSWORD</code>. The program creates tables in the database and loads data from file <code>booklist.xml</code>. The program writes output to <code>xmldbaccess.log</code>.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-014BE5F9-1497-4534-9E2A-E3972AD22016">Running sample5</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3034" headers="d145504e2801">
<p><code>sample6</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3034 d145504e2804">
<p><code>XMLDiffSample.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3034 d145504e2807">
<p>A visual application that uses the <code>XMLDiff</code> bean to find differences between two XML files and generate an XSLT style sheet. You can use this style sheet to transform the first input XML into the second input XML file.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-670E58DE-1CBB-461F-B606-EE69F953F99F">Running sample6</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3059" headers="d145504e2801">
<p><code>sample6</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3059 d145504e2804">
<p><code>XMLDiffFrame.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3059 d145504e2807">
<p>A class that implements the <code>ActionListener</code> interface. This class is used by the <code>XMLDiffSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3079" headers="d145504e2801">
<p><code>sample6</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3079 d145504e2804">
<p><code>XMLDiffSrcView.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3079 d145504e2807">
<p>A <code>JPanel</code> subclass used by the <code>XMLDiffSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3099" headers="d145504e2801">
<p><code>sample7</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3099 d145504e2804">
<p><code>compviewer.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3099 d145504e2807">
<p>A visual application that uses the <code>XMLCompress</code> bean to compress XML. The XML input can be an XML file or XML data obtained through a SQL query. The application enables you to decompress the compressed stream and view the resulting DOM tree.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-F9C1829F-AF1F-44C7-AB57-998D0977E945">Running sample7</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3125" headers="d145504e2801">
<p><code>sample7</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3125 d145504e2804">
<p><code>compstreamdata.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3125 d145504e2807">
<p>A simple class that pipes information from the GUI to the bean. This class is used in <code>dbpanel.java</code>, <code>filepanel.java</code>, and <code>xmlcompressutil.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3148" headers="d145504e2801">
<p><code>sample7</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3148 d145504e2804">
<p><code>dbpanel.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3148 d145504e2807">
<p>A <code>JPanel</code> subclass used in <code>xmlcompressutil.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3168" headers="d145504e2801">
<p><code>sample7</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3168 d145504e2804">
<p><code>filepanel.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3168 d145504e2807">
<p>A <code>JPanel</code> subclass used in <code>xmlcompressutil.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3188" headers="d145504e2801">
<p><code>sample7</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3188 d145504e2804">
<p><code>xmlcompressutil.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3188 d145504e2807">
<p>A <code>JPanel</code> subclass used in <code>compviewer.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3208" headers="d145504e2801">
<p><code>sample8</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3208 d145504e2804">
<p><code>XMLSchemaTreeViewer.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3208 d145504e2807">
<p>A visual application that uses the <code>Treeviewer</code>, <code>sourceviewer</code>, and <code>XSDValidator</code> beans. The application accepts an XML instance document and an XML schema document as inputs. The application parses both the documents and validates the instance document against the schema. If the document is invalid, then the nodes where the errors occurred are highlighted and an error message is shown in a tool tip.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-0B8DA850-9B11-4704-9CB3-BD2661941DB1">Running sample8</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3239" headers="d145504e2801">
<p><code>sample8</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3239 d145504e2804">
<p><code>TreeViewerValidate.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3239 d145504e2807">
<p>A <code>JPanel</code> subclass that displays a parsed XML instance document as a tree. This class is used by the <code>XMLSchemaTreeViewer.java</code> program.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3259" headers="d145504e2801">
<p><code>sample9</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3259 d145504e2804">
<p><code>XMLSrcViewer.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3259 d145504e2807">
<p>A visual application that uses the <code>sourceviewer</code> and <code>XSDValidator</code> beans. The demo takes an XML file as input. You can select the validation mode: document type definition (DTD), XML schema, or no validation. The program validates the XML data file against the DTD or schema and displays it with syntax highlighting. It also logs validation errors. For schema validation it also highlights the error nodes appropriately. External and internal DTDs can be viewed.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-68821BC1-524B-426D-B929-9854567F64C4">Running sample9</a>&#34;</span></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3287" headers="d145504e2801">
<p><code>sample9</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment644" headers="d145504e3287 d145504e2804">
<p><code>XMLSrcViewPanel.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3287 d145504e2807">
<p>A class that shows how to use the <code>XMLSourceView</code> and <code>DTDSourceView</code> objects. This class is used by the <code>XMLSrcViewer.java</code> program.Each <code>XMLSourceView</code> object is set as a Component of a <code>JPanel</code> by invoking <code>goButton_actionPerformed()</code>. The XML file to be viewed is parsed and the resulting XML document is set in the <code>XMLSourceView</code> object by invoking <code>makeSrcPane()</code>. The highlighting and DTD display properties are specified at this time. For performing schema validation, build the schema object by invoking <code>makeSchemaValPane()</code>. You can can check for errors and display the source code accordingly with different highlights. You can retrieve a list of schema validation errors from the <code>XMLSourceView</code> by invoking <code>dumpErrors()</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3335" headers="d145504e2801">
<p><code>sample10</code></p>
</td>
<td class="cellalignment644" headers="d145504e3335 d145504e2804">
<p><code>XSDValidatorSample.java</code></p>
</td>
<td class="cellalignment644" headers="d145504e3335 d145504e2807">
<p>An application that shows how to use the <code>XSDValidator</code> bean. It accepts an XML file and an XML schema file as input. The program displays errors occurring during validation, including line numbers.</p>
<p><span class="bold">See Also:</span> <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-CB1ABE4C-E7EB-4AC3-ADA7-4E9389127611">Running sample10</a>&#34;</span></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_beans_ap.htm#GUID-D52FABF2-2B48-440B-A916-3F29AF00B5C0__BEHEHFGI" title="File Name and Description are the columns.">Table D-6</a> describes additional files that are used by the demo programs.</p>
<div class="tblformalwide" id="GUID-D52FABF2-2B48-440B-A916-3F29AF00B5C0__BEHEHFGI">
<p class="titleintable">Table D-6 JavaBean Sample Files</p>
<table class="cellalignment655" title="JavaBean Sample Files " summary="File Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment738" id="d145504e3373">File Name</th>
<th class="cellalignment738" id="d145504e3376">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3381" headers="d145504e3373">
<p><code>XMLDiffData1.txt</code></p>
</td>
<td class="cellalignment644" headers="d145504e3381 d145504e3376">
<p>An XML document used by the <code>XMLDiffSample.java</code> program. By default the 2 XML files <code>XMLDiffData1.txt</code> and <code>XMLDiffData2.txt</code> are compared and the output XSLT is stored as <code>XMLDiffSample.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3401" headers="d145504e3373">
<p><code>XMLDiffData2.txt</code></p>
</td>
<td class="cellalignment644" headers="d145504e3401 d145504e3376">
<p>An XML document used by the <code>XMLDiffSample.java</code> program. By default the 2 XML files <code>XMLDiffData1.txt</code> and <code>XMLDiffData2.txt</code> are compared and the output XSLT is stored as <code>XMLDiffSample.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3421" headers="d145504e3373">
<p><code>booklist.xml</code></p>
</td>
<td class="cellalignment644" headers="d145504e3421 d145504e3376">
<p>An XML document for use by <code>XMLDBAccessSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3432" headers="d145504e3373">
<p><code>claim.sql</code></p>
</td>
<td class="cellalignment644" headers="d145504e3432 d145504e3376">
<p>An XML document used by <code>ViewSample.java</code> and <code>XMLDBAccessSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3446" headers="d145504e3373">
<p><code>doc.xml</code></p>
</td>
<td class="cellalignment644" headers="d145504e3446 d145504e3376">
<p>An XML document for use by <code>AsyncTransformSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3457" headers="d145504e3373">
<p><code>doc.xsl</code></p>
</td>
<td class="cellalignment644" headers="d145504e3457 d145504e3376">
<p>An XSLT style sheet for use by <code>AsyncTransformSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3468" headers="d145504e3373">
<p><code>emptable.xsl</code></p>
</td>
<td class="cellalignment644" headers="d145504e3468 d145504e3376">
<p>An XSLT style sheet for use by <code>AsyncTransformSample.java</code>, <code>ViewSample.java</code>, or <code>XMLTransformPanelSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3485" headers="d145504e3373">
<p><code>note_in_dtd.xml</code></p>
</td>
<td class="cellalignment644" headers="d145504e3485 d145504e3376">
<p>A sample XML document for use in <code>XMLSrcViewer.java</code>. You can use this file in DTD validation mode to view an internal DTD with validation errors. An internal DTD can be optionally displayed along with the XML data.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3496" headers="d145504e3373">
<p><code>purchaseorder.xml</code></p>
</td>
<td class="cellalignment644" headers="d145504e3496 d145504e3376">
<p>An XML document used by the <code>XSDValidatorSample.java</code> program. The instance document <code>purchaseorder.xml</code> does not conform to the XML schema defined in <code>purchaseorder.xsd</code>, which causes the program to display the errors.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment644" id="d145504e3513" headers="d145504e3373">
<p><code>purchaseorder.xsd</code></p>
</td>
<td class="cellalignment644" headers="d145504e3513 d145504e3376">
<p>An XML schema document used by the <code>XSDValidatorSample.java</code> program. The instance document <code>purchaseorder.xml</code> does not conform to the XML schema defined in <code>purchaseorder.xsd</code>, which causes the program to display the errors.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Documentation for how to compile and run the sample programs is located in the <code>README</code> in the same directory. The basic steps are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Change into the <code>$ORACLE_HOME/xdk/demo/java/transviewer</code> directory (UNIX) or <code>%ORACLE_HOME%\xdk\demo\java\transviewer</code> directory (Windows).</span></li>
<li class="stepexpand"><span>Make sure that your environment variables are set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span> The beans require Java Development Kit (JDK) 1.2 or later. The <code>DBViewer</code> and <code>DBTransformPanel</code> beans require JDK 1.2.2 when rendering HTML. Prior versions of the JDK may not render HTML in the result buffer properly.</span></li>
<li class="stepexpand"><span>Edit the <code>Makefile</code> (UNIX) or <code>Make.bat</code> (Windows) for your environment. In particular,:</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>Change the <code>JDKPATH</code> in the <code>Makefile</code> to point to your JDK path.</p>
</li>
<li>
<p>Change <code>PATHSEP</code> to the appropriate path separator for your operating system.</p>
</li>
<li>
<p>Change the <code>HOSTNAME</code>, <code>PORT</code>, <code>SID</code>, <code>USERID</code>, and <code>PASSWORD</code> parameters so that you can connect to the database through the JDBC thin driver. These parameters are used in <code>sample4</code> and <code>sample5</code>.</p>
</li>
</ul>
</div>
</li>
<li class="stepexpand"><span>Run <code>make</code> (UNIX) or <code>Make.bat</code> (Windows) at the system prompt to generate the class files.</span></li>
<li class="stepexpand"><span>Run <code>gmake</code> to run the demos:</span>
<div>
<pre dir="ltr">gmake sample1
gmake sample2
gmake sample3
gmake sample4
gmake sample5
gmake sample6
gmake sample7
gmake sample8
gmake sample9
gmake sample10
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK252"></a>
<div class="props_rev_3"><a id="GUID-019FEFD4-C142-4C6A-BBDB-A0408BB8FBAB"></a>
<h4 id="ADXDK-GUID-019FEFD4-C142-4C6A-BBDB-A0408BB8FBAB" class="sect4"><span class="enumeration_section">D.2.2.1</span> Running sample1</h4>
<div>
<div class="section">
<p><code>Sample1</code> is the program that uses the <code>XMLTransViewer</code> bean. You can run the program manually:</p>
<pre dir="ltr">java XMLTransformPanelSample
</pre>
<p>You can use the program to import and export XML files from Oracle Database, store XSL transformation files in the database, and apply style sheets to XML interactively. To use the database connectivity feature in this program, you must know the network name of the computer where the database runs, the port (usually <code>1521</code>), and the name of the Oracle instance (usually <code>orcl</code>). You also need an account with <code>CREATE TABLE</code> privileges. If you have installed the sample schemas, then you can use the account <code>hr</code>. You can the <code>XMLTransViewer</code> program to apply style sheet transformation to XML files and display the result.The program displays a panel with tabs on the top and the bottom. You can use the first two top tabs to switch between the XML buffer and the XSLT buffer. The third tab performs XSL transformation on the XML buffer and displays the result. You can use the first two tabs on the bottom to load and save data from Oracle Database and from the file system. The remaining bottom tabs switch the display of the current content to tree view, XML source, edit mode and, in case of the result view after the transformation, HTML.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK253"></a>
<div class="props_rev_3"><a id="GUID-F2C472FC-F1F5-4AB0-9D58-7D1A4B78D782"></a>
<h4 id="ADXDK-GUID-F2C472FC-F1F5-4AB0-9D58-7D1A4B78D782" class="sect4"><span class="enumeration_section">D.2.2.2</span> Running sample2</h4>
<div>
<div class="section">
<p><code>Sample2</code> is a GUI-based demo for the <code>XMLSourceView</code> and <code>XMLTreeView</code> beans, which are deprecated. The <code>ViewSample</code> program displays the <code>booklist.xml</code> file in separate source and tree views. You can run the program manually:</p>
<pre dir="ltr">java ViewSample
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK254"></a>
<div class="props_rev_3"><a id="GUID-4A5BE3BA-2EE0-4699-B0BE-07E5BCD768FF"></a>
<h4 id="ADXDK-GUID-4A5BE3BA-2EE0-4699-B0BE-07E5BCD768FF" class="sect4"><span class="enumeration_section">D.2.2.3</span> Running sample3</h4>
<div>
<div class="section">
<p><code>Sample3</code> is a nonvisual demo for the asynchronous <code>DOMBuilder</code> and <code>XSLTransformer</code> beans. The <code>AsyncTransformSample</code> program applies the <code>doc.xsl</code> XSLT style sheet to all <code>*.xml</code> files in the current directory. The program writes output to files with the extension <code>.log</code>. You can run the program:</p>
<pre dir="ltr">java AsyncTransformSample
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK255"></a>
<div class="props_rev_3"><a id="GUID-C6A7DED3-7AD6-4F5E-A061-9EF00B25E628"></a>
<h4 id="ADXDK-GUID-C6A7DED3-7AD6-4F5E-A061-9EF00B25E628" class="sect4"><span class="enumeration_section">D.2.2.4</span> Running sample4</h4>
<div>
<div class="section">
<p><code>Sample4</code> is a visual demo for the <code>DBViewer</code> bean, which is deprecated. It runs in these stages:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>It starts SQL*Plus, connects to the database with the <code>USERID</code> and <code>PASSWORD</code> specified in the <code>Makefile</code>, and runs the <code>claim.sql</code> script. This script creates several tables, views, and types for use by the <code>DBViewSample</code> demo program.</span></li>
<li class="stepexpand"><span>It runs the DBViewSample program:</span>
<div>
<pre dir="ltr">java -classpath &#34;$(MAKE_CLASSPATH)&#34; DBViewSample
</pre></div>
</li>
</ol>
<div class="section">
<p>JDBC connection information is hard-coded in the <code>DBViewClaims.java</code> source file, which implements a class used by the demo. Specifically, the program assumes the values for <code>USERID</code>, <code>PASSWORD</code>, and so forth set in the <code>Makefile</code>. If your configuration is different, navigate to line 92 in <code>DBViewClaims.java</code> and modify <code>setUsername()</code>, <code>setPassword()</code>, and so forth with values that reflect your Oracle Database configuration.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK256"></a>
<div class="props_rev_3"><a id="GUID-014BE5F9-1497-4534-9E2A-E3972AD22016"></a>
<h4 id="ADXDK-GUID-014BE5F9-1497-4534-9E2A-E3972AD22016" class="sect4"><span class="enumeration_section">D.2.2.5</span> Running sample5</h4>
<div>
<div class="section">
<p><code>Sample5</code> is a nonvisual demo for the <code>XMLDBAccess</code> bean. It uses the XMLType objects to store XML documents inside the database.The following program connects to the database with the Java thin client, creates <code>XMLType</code> tables, and loads the data from <code>booklist.xml</code>. To run the program you must specify these pieces of information as command-line arguments:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Host name (for example, <code>myhost</code>)</p>
</li>
<li>
<p>Port number (for example, <code>1521</code>)</p>
</li>
<li>
<p>SID of the database (for example, <code>ORCL</code>)</p>
</li>
<li>
<p>Database account in which the tables are created (for example, <code>hr</code>)</p>
</li>
<li>
<p>Password for the database account (for example, <code>hr</code>)</p>
</li>
</ul>
<p>For example, you can run the program:</p>
<pre dir="ltr">java XMLDBAccessSample myhost 1521 ORCL hr hr
</pre>
<p>The following text shows sample output from <code>dbaccess.log</code>:</p>
<pre dir="ltr">Demo for createXMLTypeTables():
Table +&#39;testxmltype&#39; successfully created.
 
Demo for listXMLTypeTables():
tablenamename=TESTXMLTYPE
 
Demo for replaceXMLTypeData() (similar to insert):
XML Data from +&#39;booklist.xml&#39; successfully replaced in table &#39;testxmltype&#39;.
 
Demo for getXMLTypeData():
XMLType data fetched:
&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;booklist&gt;  
  &lt;book isbn=&#34;1234-123456-1234&#34;&gt;    
    &lt;title&gt;C Programming Language&lt;/title&gt;    
    &lt;author&gt;Kernighan and Ritchie&lt;/author&gt;    
    &lt;publisher&gt;EEE&lt;/publisher&gt;    
    &lt;price&gt;7.99&lt;/price&gt;  
  &lt;/book&gt;
...
  &lt;book isbn=&#34;1230-23498-2349879&#34;&gt;    
    &lt;title&gt;Emperor&#39;s New Mind&lt;/title&gt;    
    &lt;author&gt;Roger Penrose&lt;/author&gt;    
    &lt;publisher&gt;Oxford Publishing Company&lt;/publisher&gt;    
    &lt;price&gt;15.99&lt;/price&gt;  
  &lt;/book&gt;
&lt;/booklist&gt;
 
Demo for getXMLTypeXPathTextData():
Data fetched using XPath exp &#39;/booklist/book[3]&#39;:
&lt;book isbn=&#34;2137-598354-65978&#34;&gt;
  &lt;title&gt;Twelve Red Herrings&lt;/title&gt;
  &lt;author&gt;Jeffrey Archer&lt;/author&gt;
  &lt;publisher&gt;Harper Collins&lt;/publisher&gt;
  &lt;price&gt;12.95&lt;/price&gt;
&lt;/book&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK257"></a>
<div class="props_rev_3"><a id="GUID-670E58DE-1CBB-461F-B606-EE69F953F99F"></a>
<h4 id="ADXDK-GUID-670E58DE-1CBB-461F-B606-EE69F953F99F" class="sect4"><span class="enumeration_section">D.2.2.6</span> Running sample6</h4>
<div>
<div class="section">
<p>The <code>sample6</code> program is a visual demo for the <code>XMLDiff</code> bean. The <code>XMLDiffSample</code> class invokes a GUI that enables you to choose the input data files from the <span class="bold">File</span> menu by selecting <span class="bold">Compare XML File</span>s. The <span class="bold">Transform</span> menu enables you to apply the generated XSLT generated to the first input XML. Select <span class="bold">Save As</span> in the <span class="bold">File</span> menu to save the output XML file, which is the same as the second input file. By default, the program compares <code>XMLDiffData1.txt</code> to <code>XMLDiffData2.txt</code> and stores the XSLT output as <code>XMLDiffSample.xsl</code>.</p>
<p>You can run the program manually:</p>
<pre dir="ltr">java -mx50m XMLDiffSample XMLDiffData1.txt XMLDiffData2.txt
</pre>
<p>If the input XML files use a DTD that accesses a URL outside a firewall, then modify <code>XMLDiffSample.java</code> to include the proxy server settings before the <code>setFiles()</code> invocation. For example, modify the program as follows:</p>
<pre dir="ltr">/* Set proxy to access dtd through firewall */
Properties p = System.getProperties();
p.put(&#34;proxyHost&#34;, &#34;www.proxyservername.com&#34;);
p.put(&#34;proxyPort&#34;, &#34;80&#34;);
p.put(&#34;proxySet&#34;, &#34;true&#34;);
/* You will also have to import java.util.*; */
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK258"></a>
<div class="props_rev_3"><a id="GUID-F9C1829F-AF1F-44C7-AB57-998D0977E945"></a>
<h4 id="ADXDK-GUID-F9C1829F-AF1F-44C7-AB57-998D0977E945" class="sect4"><span class="enumeration_section">D.2.2.7</span> Running sample7</h4>
<div>
<div class="section">
<p>The <code>sample7</code> visual demo shows the use of the <code>XMLCompress</code> bean. The <code>compviewer</code> class invokes a GUI which lets the user compress and uncompress XML files and data obtained from the database. The loading options enable the user to retrieve the data either from a file system or a database. This application does not support loading and saving compressed data from the database. The compression factor indicates a rough estimate by which the XML data is reduced.</p>
<p>You can run the program manually:</p>
<pre dir="ltr">java compviewer
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK259"></a>
<div class="props_rev_3"><a id="GUID-0B8DA850-9B11-4704-9CB3-BD2661941DB1"></a>
<h4 id="ADXDK-GUID-0B8DA850-9B11-4704-9CB3-BD2661941DB1" class="sect4"><span class="enumeration_section">D.2.2.8</span> Running sample8</h4>
<div>
<div class="section">
<p>The <code>sample8</code> demo shows the use of the <code>XMLTreeViewer</code> bean. The <code>XMLSchemaTreeViewer</code> program enables the user to view an <code>XMLDocument</code> in a tree format. The user can input a schema document and validate the instance document against the schema. If the document is invalid, then the invalid nodes are highlighted with the error message. Also, the program displays a log of all the line information in a separate panel, which enables the user to edit the instance document and revaluated. Test the program with sample files <code>purchaseorder.xml</code> and <code>purchaseorder.xsd</code>. The instance document <code>purchaseorder.xml</code> does not conform to the schema defined in <code>purchaseorder.xsd</code>.</p>
<p>You can run the program manually:</p>
<pre dir="ltr">java XMLSchemaTreeViewer
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK260"></a>
<div class="props_rev_3"><a id="GUID-68821BC1-524B-426D-B929-9854567F64C4"></a>
<h4 id="ADXDK-GUID-68821BC1-524B-426D-B929-9854567F64C4" class="sect4"><span class="enumeration_section">D.2.2.9</span> Running sample9</h4>
<div>
<div class="section">
<p>The <code>sample9</code> demo shows the use of the <code>SourceViewer</code> bean. The <code>XMLSrcViewer</code> program enables you to view an XML document or a DTD with syntax highlighting turned on. You can validate the XML document against an input XML Schema or DTD. The DTD can be internal or external.</p>
<p>If the validation is successful, then you can view the instance document and XML schema or DTD in the <span class="bold">Source View</span> pane. If errors were encountered during schema validation, then an error log with line numbers is available in the <span class="bold">Error</span> pane. The <span class="bold">Source View</span> pane shows the XML document with error nodes highlighted.You can use sample files <code>purchaseorder.xml</code> and <code>purchaseorder.xsd</code> for testing XML schema validation with errors. You can use <code>note_in_dtd.xml</code> with DTD validation mode to view an internal DTD with validation errors. You can run the program manually:</p>
<pre dir="ltr">java XMLSrcViewer
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK261"></a>
<div class="props_rev_3"><a id="GUID-CB1ABE4C-E7EB-4AC3-ADA7-4E9389127611"></a>
<h4 id="ADXDK-GUID-CB1ABE4C-E7EB-4AC3-ADA7-4E9389127611" class="sect4"><span class="enumeration_section">D.2.2.10</span> Running sample10</h4>
<div>
<div class="section">
<p>The <code>sample10</code> demo shows the use of the <code>XSDValidator</code> bean. The <code>XSDValidatorSample</code> program&#39;s two input arguments are an XML document and its associated XML schema. The program displays errors occurring during validation, including line numbers.</p>
<p>The following program uses <code>purchaseorder.xsd</code> to validate the contents of <code>purchaseorder.xml</code>:</p>
<pre dir="ltr">java XSDValidatorSample purchaseorder.xml purchaseorder.xsd
</pre>
<p>The XML document fails (intentionally) to validate against the schema. The program displays these errors:</p>
<pre dir="ltr">Sample purchaseorder.xml purchaseorder.xsd
&lt;Line 2, Column 41&gt;: XML-24523: (Error) Invalid value &#39;abc&#39; for attribute: &#39;orderDate&#39;
#document-&gt;purchaseOrder
&lt;Line 7, Column 27&gt;: XML-24525: (Error) Invalid text &#39;CA&#39; in element: &#39;state&#39;
#document-&gt;purchaseOrder-&gt;shipTo-&gt;state-&gt;#text
&lt;Line 8, Column 25&gt;: XML-24525: (Error) Invalid text &#39;sd&#39; in element: &#39;zip&#39;
#document-&gt;purchaseOrder-&gt;shipTo-&gt;zip-&gt;#text
&lt;Line 14, Column 27&gt;: XML-24525: (Error) Invalid text &#39;PA&#39; in element: &#39;state&#39;
#document-&gt;purchaseOrder-&gt;billTo-&gt;state-&gt;#text
&lt;Line 17, Column 22&gt;: XML-24534: (Error) Element &#39;coment&#39; not expected.
#document-&gt;purchaseOrder-&gt;coment
&lt;Line 29, Column 31&gt;: XML-24534: (Error) Element &#39;shipDae&#39; not expected.
#document-&gt;purchaseOrder-&gt;items-&gt;item-&gt;shipDae
</pre></div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="ADXDK1065"></a><a id="ADXDK262"></a>
<div class="props_rev_3"><a id="GUID-7CF7A932-8591-4E12-A174-692E20DE25AD"></a>
<h2 id="ADXDK-GUID-7CF7A932-8591-4E12-A174-692E20DE25AD" class="sect2"><span class="enumeration_section">D.3</span> Processing XML with XDK JavaBeans</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_beans_ap.htm#GUID-4DD2E05B-D08D-4626-81B8-6A5CD37630B0">Processing XML Asynchronously with the DOMBuilder and XSLTransformer Beans</a></p>
</li>
<li>
<p><a href="adx_j_beans_ap.htm#GUID-F5B2DFB0-3920-408C-B893-4ECC4958CC49">Comparing XML Documents with the XMLDiff JavaBean</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK263"></a>
<div class="props_rev_3"><a id="GUID-4DD2E05B-D08D-4626-81B8-6A5CD37630B0"></a>
<h3 id="ADXDK-GUID-4DD2E05B-D08D-4626-81B8-6A5CD37630B0" class="sect3"><span class="enumeration_section">D.3.1</span> Processing XML Asynchronously with the DOMBuilder and XSLTransformer Beans</h3>
<div>
<div class="section">
<p>As explained in and <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-2A740127-98CD-4B6E-9643-25CE1C196D5B">XSLTransformer</a>,&#34;</span> you can use XDK JavaBeans to perform asynchronous XML processing.</p>
<p>The <code>AsyncTransformSample.java</code> program shows how to use both the <code>DOMBuilder</code> and <code>XSLTransformer</code> beans. The program implements these methods:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>runDOMBuilders()</code></p>
</li>
<li>
<p><code>runXSLTransformer()</code></p>
</li>
<li>
<p><code>saveResult()</code></p>
</li>
<li>
<p><code>makeXSLDocument()</code></p>
</li>
<li>
<p><code>createURL()</code></p>
</li>
<li>
<p><code>init()</code></p>
</li>
<li>
<p><code>exitWithError()</code></p>
</li>
<li>
<p><code>asyncTransform()</code></p>
</li>
</ul>
<p>The basic architecture of the program is:</p>
<ol>
<li>
<p>The program declares and initializes the fields used by the class. The input XSLT style sheet is hard-coded in the program as <code>doc.xsl</code>. The class defines these fields:</p>
<pre dir="ltr">String        basedir = new String (&#34;.&#34;);
OutputStream  errors = System.err;
Vector        xmlfiles = new Vector();
int           numXMLDocs = 1;
String        xslFile = new String (&#34;doc.xsl&#34;);
URL           xslURL;
XMLDocument   xsldoc
</pre></li>
<li>
<p>The <code>main()</code> method invokes the <code>init()</code> method to perform the initial setup. This method lists the files in the current directory, and if it finds files that end in the extension <code>.xml</code>, it adds them to a <code>Vector</code> object. The implementation for the <code>init()</code> method is:</p>
<pre dir="ltr">boolean init () throws Exception
{
   File     directory = new File (basedir);
   String[] dirfiles = directory.list();
   for (int j = 0; j &lt; dirfiles.length; j++)
   {
      String dirfile = dirfiles[j];
 
      if (!dirfile.endsWith(&#34;.xml&#34;))
          continue;
 
       xmlfiles.addElement(dirfile);
   }
 
   if (xmlfiles.isEmpty()) {
      System.out.println(&#34;No files in directory were selected for processing&#34;);
      return false;
   }
   numXMLDocs = xmlfiles.size();

   return true;
}
</pre></li>
<li>
<p>The <code>main()</code> method instantiates <code>AsyncTransformSample</code>:</p>
<pre dir="ltr">AsyncTransformSample inst = new AsyncTransformSample();
</pre></li>
<li>
<p>The <code>main()</code> method invokes the <code>asyncTransform()</code> method. The <code>asyncTransform()</code> method performs these main tasks:</p>
<ol>
<li>
<p>Invokes <code>makeXSLDocument()</code> to parse the input XSLT style sheet.</p>
</li>
<li>
<p>Invokes <code>runDOMBuilders()</code> to initiate parsing of the instance documents, that is, the documents to be transformed, and then transforms them.</p>
</li>
</ol>
<p>After initiating the XML processing, the program resumes control and waits while the processing occurs in the background. When the last request completes, the method exits.</p>
<p>The following code shows the implementation of the <code>asyncTransform()</code> method:</p>
<pre dir="ltr">void asyncTransform () throws Exception
{
   System.err.println (numXMLDocs +
            &#34; XML documents will be transformed&#34; +
            &#34; using XSLT stylesheet specified in &#34; + xslFile +
            &#34; with &#34; +  numXMLDocs + &#34; threads&#34;);

   makeXSLDocument ();
   runDOMBuilders ();
 
   // wait for the last request to complete
   while (rm.activeFound())
      Thread.sleep(100);
}
</pre></li>
</ol>
</div>
<!-- class="section" --></div>
<a id="ADXDK264"></a>
<div class="props_rev_3"><a id="GUID-180E05B0-2B69-478F-A2F8-3064CE455A16"></a>
<h4 id="ADXDK-GUID-180E05B0-2B69-478F-A2F8-3064CE455A16" class="sect4"><span class="enumeration_section">D.3.1.1</span> Parsing the Input XSLT Style Sheet</h4>
<div>
<div class="section">
<p>The <code>makeXSLDocument()</code> method shows a simple DOM parse of the input style sheet. It does not use asynchronous parsing. The technique is the same described in <span class="q">&#34;<a href="adx_j_parser.htm#GUID-7C91F2D5-350D-4530-8988-295EF0B60D53">Performing Basic DOM Parsing</a>.&#34;</span></p>
<p>The method follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a new <code>DOMParser()</code> object. The following code fragment from <code>DOMSample.java</code> shows this technique:</span>
<div>
<pre dir="ltr">DOMParser parser = new DOMParser();
</pre></div>
</li>
<li class="stepexpand"><span>Configure the parser. The following code fragment specifies that white space must be preserved:</span>
<div>
<pre dir="ltr">parser.setPreserveWhitespace(true);
</pre></div>
</li>
<li class="stepexpand"><span>Create a <code>URL</code> object from the input style sheet. The following code fragment invokes the <code>createURL()</code> helper method to accomplish this task:</span>
<div>
<pre dir="ltr">xslURL = createURL (xslFile);
</pre></div>
</li>
<li class="stepexpand"><span>Parse the input XSLT style sheet. The following statement shows this technique:</span>
<div>
<pre dir="ltr">parser.parse (xslURL);
</pre></div>
</li>
<li class="stepexpand"><span>Get a handle to the root of the in-memory DOM tree. You can use the <code>XMLDocument</code> object to access every part of the parsed XML document. The following statement shows this technique:</span>
<div>
<pre dir="ltr">xsldoc = parser.getDocument();
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK265"></a>
<div class="props_rev_3"><a id="GUID-E83904EF-C2A6-4B67-95C6-FC8E291DF9CD"></a>
<h4 id="ADXDK-GUID-E83904EF-C2A6-4B67-95C6-FC8E291DF9CD" class="sect4"><span class="enumeration_section">D.3.1.2</span> Processing the XML Documents Asynchronously</h4>
<div>
<div class="section">
<p>The <code>runDOMBuilders()</code> method shows how you can use the <code>DOMBuilder</code> and <code>XSLTransformer</code> beans to perform asynchronous processing. The parsing and transforming of the XML occurs in the background.</p>
<p>The method follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a resource manager to manage the input XML documents. The program creates a <code>for</code> loop and gets the XML documents. The following code fragment shows this technique:</span>
<div>
<pre dir="ltr">rm = new ResourceManager (numXMLDocs);
for (int i = 0; i &lt; numXMLDocs; i++)
{
   rm.getResource();
   ...
}
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate the DOM builder bean for each input XML document. For example:</span>
<div>
<pre dir="ltr">DOMBuilder builder = new DOMBuilder(i);
</pre></div>
</li>
<li class="stepexpand"><span>Create a <code>URL</code> object from the XML file name. For example:</span>
<div>
<pre dir="ltr">DOMBuilder builder = new DOMBuilder(i);
URL  xmlURL = createURL(basedir + &#34;/&#34; + (String)xmlfiles.elementAt(i));
if (xmlURL == null)
   exitWithError(&#34;File &#34; + (String)xmlfiles.elementAt(i) + &#34; not found&#34;);
</pre></div>
</li>
<li class="stepexpand"><span>Configure the DOM builder. The following code fragment specifies the preservation of white space and sets the base URL for the document:</span>
<div>
<pre dir="ltr">builder.setPreserveWhitespace(true);
builder.setBaseURL (createURL(basedir + &#34;/&#34;));
</pre></div>
</li>
<li class="stepexpand"><span>Add the listener for the DOM builder. The program adds the listener by invoking <code>addDOMBuilderListener()</code>.</span>
<div>
<p>The class instantiated to create the listener must implement the <code>DOMBuilderListener</code> interface. The program provides a do-nothing implementation for <code>domBuilderStarted()</code> and <code>domBuilderError()</code>, but must provide a substantive implementation for <code>domBuilderOver()</code>, which is the method called when the parse of the XML document completes. The method invokes <code>runXSLTransformer()</code>, which is the method that transforms the XML. See <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-D31531D0-244C-4C24-BCDC-49A26EF2DD1F">Transforming the XML with the XSLTransformer Bean</a>&#34;</span> for an explanation of this method.</p>
<p>The following code fragment shows how to add the listener:</p>
<pre dir="ltr">builder.addDOMBuilderListener
( 
   new DOMBuilderListener()
   {
      public void domBuilderStarted(DOMBuilderEvent p0) {}
      public void domBuilderError(DOMBuilderEvent p0) {}
      public synchronized void domBuilderOver(DOMBuilderEvent p0)
      {
         DOMBuilder bld = (DOMBuilder)p0.getSource();
         runXSLTransformer (bld.getDocument(), bld.getId());
      }
   }
);
</pre></div>
</li>
<li class="stepexpand"><span>Add the error listener for the DOM builder. The program adds the listener by invoking <code>addDOMBuilderErrorListener()</code>.</span>
<div>
<p>The class instantiated to create the listener must implement the <code>DOMBuilderErrorListener</code> interface. The following code fragment show the implementation:</p>
<pre dir="ltr">builder.addDOMBuilderErrorListener
(
   new DOMBuilderErrorListener() 
   {
      public void domBuilderErrorCalled(DOMBuilderErrorEvent p0)
      {
         int id = ((DOMBuilder)p0.getSource()).getId();
         exitWithError(&#34;Error occurred while parsing &#34; +
            xmlfiles.elementAt(id) + &#34;: &#34; +
            p0.getException().getMessage());
      }
   }
);
</pre></div>
</li>
<li class="stepexpand"><span>Parse the document. The following statement shows this technique:</span>
<div>
<pre dir="ltr">builder.parse (xmlURL);
System.err.println(&#34;Parsing file &#34; + xmlfiles.elementAt(i));
</pre></div>
</li>
</ol>
</div>
<a id="ADXDK266"></a>
<div class="props_rev_3"><a id="GUID-D31531D0-244C-4C24-BCDC-49A26EF2DD1F"></a>
<h5 id="ADXDK-GUID-D31531D0-244C-4C24-BCDC-49A26EF2DD1F" class="sect5"><span class="enumeration_section">D.3.1.2.1</span> Transforming the XML with the XSLTransformer Bean</h5>
<div>
<div class="section">
<p>When the DOM parse completes, the DOM listener receives notification. The <code>domBuilderOver()</code> method implements the behavior in response to this event. The program passes the DOM to the <code>runXSLTransformer()</code> method, which initiates the XSL transformation.</p>
<p>The method follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Instantiate the <code>XSLTransformer</code> bean. This object performs the XSLT processing. The following statement shows this technique:</span>
<div>
<pre dir="ltr">XSLTransformer processor = new XSLTransformer (id);
</pre></div>
</li>
<li class="stepexpand"><span>Create a new style sheet object. For example:</span>
<div>
<pre dir="ltr">XSLStylesheet  xsl       = new XSLStylesheet (xsldoc, xslURL);
</pre></div>
</li>
<li class="stepexpand"><span>Configure the XSLT processor. For example, this statement sets the processor to show warnings and configures the error output stream:</span>
<div>
<pre dir="ltr">processor.showWarnings (true);
processor.setErrorStream (errors);
</pre></div>
</li>
<li class="stepexpand"><span>Add the listener for the XSLT processor. The program adds the listener by invoking <code>addXSLTransformerListener()</code>.</span>
<div>
<p>The class instantiated to create the listener must implement the <code>XSLTransformerListener</code> interface. The program provides a do-nothing implementation for <code>xslTransformerStarted()</code> and <code>xslTransformerError()</code>, but must provide a substantive implementation for <code>xslTransformerOver()</code>, which is the method called when the parse of the XML document completes. The method invokes <code>saveResult()</code>, which prints the transformation result to a file.</p>
<p>The following code fragment shows how to add the listener:</p>
<pre dir="ltr">processor.addXSLTransformerListener
(
   new XSLTransformerListener() 
   {
      public void xslTransformerStarted (XSLTransformerEvent p0) {}
      public void xslTransformerError(XSLTransformerEvent p0) {}
      public void xslTransformerOver (XSLTransformerEvent p0)
      {
         XSLTransformer trans = (XSLTransformer)p0.getSource();
         saveResult (trans.getResult(),  trans.getId());
      }
   }
);
</pre></div>
</li>
<li class="stepexpand"><span>Add the error listener for the XSLT processor. The program adds the listener by invoking <code>addXSLTransformerErrorListener()</code>.</span>
<div>
<p>The class instantiated to create the listener must implement the <code>XSLTransformerErrorListener</code> interface. The following code fragment show the implementation:</p>
<pre dir="ltr">processor.addXSLTransformerErrorListener 
(
   new XSLTransformerErrorListener() 
   {
      public void xslTransformerErrorCalled(XSLTransformerErrorEvent p0)
      {
         int i = ((XSLTransformer)p0.getSource()).getId();
         exitWithError(&#34;Error occurred while processing &#34; +
                       xmlfiles.elementAt(i) + &#34;: &#34; +
                       p0.getException().getMessage());
      }
   }
);
</pre></div>
</li>
<li class="stepexpand"><span>Transform the XML document with the XSLT style sheet. The following statement shows this technique:</span>
<div>
<pre dir="ltr">processor.processXSL (xsl, xml);
</pre></div>
</li>
</ol>
</div>
</div>
</div>
</div>
<a id="ADXDK267"></a>
<div class="props_rev_3"><a id="GUID-F5B2DFB0-3920-408C-B893-4ECC4958CC49"></a>
<h3 id="ADXDK-GUID-F5B2DFB0-3920-408C-B893-4ECC4958CC49" class="sect3"><span class="enumeration_section">D.3.2</span> Comparing XML Documents with the XMLDiff JavaBean</h3>
<div>
<div class="section">
<p>As explained in <span class="q">&#34;<a href="adx_j_beans_ap.htm#GUID-FF14448C-9A4D-4F24-9877-24FEF7ABDA2E">XMLDiff</a>,&#34;</span> you can use XDK JavaBeans to compare the structure and significant content of XML documents.</p>
<p>The <code>XMLDiffSample.java</code> program shows how to use the <code>XMLDiff</code> bean. The program implements these methods:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>showDiffs()</code></p>
</li>
<li>
<p><code>doXSLTransform()</code></p>
</li>
<li>
<p><code>createURL()</code></p>
</li>
</ul>
<p>The basic architecture of the program is:</p>
<ol>
<li>
<p>The program declares and initializes the fields used by the class. One field is of type <code>XMLDiffFrame</code>, which is the class implemented in the <code>XMLDiffFrame.java</code> demo. The class defines these fields:</p>
<pre dir="ltr">protected XMLDocument doc1;   /* DOM tree for first file */
protected XMLDocument doc2;   /* DOM tree for second file */
protected static XMLDiffFrame diffFrame; /* GUI frame */
protected static XMLDiffSample dfxApp;   /* XMLDiff sample application */
protected static XMLDiff xmlDiff;        /* XML diff object */
protected static XMLDocument xslDoc;     /* parsed xsl file */
protected static String outFile = new String(&#34;XMLDiffSample.xsl&#34;); /* output
                                                              xsl file name */
</pre></li>
<li>
<p>The <code>main()</code> method creates an <code>XMLDiffSample</code> object:</p>
<pre dir="ltr">dfxApp = new XMLDiffSample();
</pre></li>
<li>
<p>The <code>main()</code> method adds and initializes a <code>JFrame</code> to display the output of the comparison. The following code shows this technique:</p>
<pre dir="ltr">diffFrame = new XMLDiffFrame(dfxApp);
diffFrame.addTransformMenu();
</pre></li>
<li>
<p>The <code>main()</code> method instantiates the <code>XMLDiff</code> bean. The following code shows this technique:</p>
<pre dir="ltr">xmlDiff = new XMLDiff();
</pre></li>
<li>
<p>The <code>main()</code> method invokes the <code>showDiffs()</code> method. This method performs these tasks:</p>
<ol>
<li>
<p>Invokes <code>XMLDiff.diff()</code> to compare the input XML documents.</p>
</li>
<li>
<p>Generates and displays an XSLT stylsheet that can transform one input document into the other document.</p>
</li>
</ol>
<p>The following code fragment shows the <code>showDiffs()</code> method invocation:</p>
<pre dir="ltr">if (args.length == 3)
  outFile = args[2];
if(args.length &gt;= 2)
  dfxApp.showDiffs(new File(args[0]), new File(args[1])); 
diffFrame.setVisible(true);
</pre></li>
</ol>
</div>
<!-- class="section" --></div>
<a id="ADXDK268"></a>
<div class="props_rev_3"><a id="GUID-274E8DCA-6D57-4FBD-AB59-081A273F0D54"></a>
<h4 id="ADXDK-GUID-274E8DCA-6D57-4FBD-AB59-081A273F0D54" class="sect4"><span class="enumeration_section">D.3.2.1</span> Comparing the XML Files and Generating a Style Sheet</h4>
<div>
<div class="section">
<p>The <code>showDiffs()</code> method shows the use of the <code>XMLDiff</code> bean.</p>
<p>The method follows these steps:</p>
<ol>
<li>
<p>Set the files for the <code>XMLDiff</code> processor. The following statement shows this technique:</p>
<pre dir="ltr">xmlDiff.setFiles(file1, file2);
</pre></li>
<li>
<p>Compare the files. The <code>diff()</code> method returns a boolean value that indicates whether the input documents have identical structure and content. If they are equivalent, then the method prints a message to the <code>JFrame</code> implemented by the <code>XMLDiffFrame</code> class. The following code fragment shows this technique:</p>
<pre dir="ltr">if(!xmlDiff.diff())
{
  JOptionPane.showMessageDialog
  (
    diffFrame,
    &#34;Files are equivalent in XML representation&#34;,
    &#34;XMLDiffSample Message&#34;,
    JOptionPane.PLAIN_MESSAGE
  );
}
</pre></li>
<li>
<p>Generate a DOM for the XSLT style sheet that shows the differences between the two documents. The following code fragment shows this technique:</p>
<pre dir="ltr">xslDoc = xmlDiff.generateXSLDoc();
</pre></li>
<li>
<p>Display the documents in the <code>JFrame</code> implemented by <code>XMLDiffFrame</code>. <code>XMLDiffFrame</code> instantiates the <code>XMLSourceView</code> bean, which is deprecated. The method follows these steps:</p>
<ol>
<li>
<p>Create the source pane for the input documents. Pass the DOM handles of the two documents to the <code>diffFrame</code> object to make the source pane:</p>
<pre dir="ltr">diffFrame.makeSrcPane(xmlDiff.getDocument1(), xmlDiff.getDocument2());
</pre></li>
<li>
<p>Create the pane that shows the differences between the documents. Pass references to the text panes to <code>diffFrame</code>:</p>
<pre dir="ltr">diffFrame.makeDiffSrcPane(new XMLDiffSrcView(xmlDiff.getDiffPane1()),
                          new XMLDiffSrcView(xmlDiff.getDiffPane2()));
</pre></li>
<li>
<p>Create the pane for the XSLT style sheet. Pass the DOM of the style sheet:</p>
<pre dir="ltr">diffFrame.makeXslPane(xslDoc, &#34;Diff XSL Script&#34;);
diffFrame.makeXslTabbedPane();
</pre></li>
</ol>
</li>
</ol>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_ermg_xsu.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="glossary.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>