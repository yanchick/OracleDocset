<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1667"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XSLT%20Processor%20for%20Java"></a><title>Using the XSLT Processor for Java</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="XSL Transformation (XSLT) Processor for Java, XML Schema, processor for Java, how to run the sample program, oraxsl, command-line interfaces, Parser for Java, static and nonstatic methods, constructor extension functions, return value extension function, XSLT Processor for Java, hints for using"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_xmlbin.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_xqj.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-E148A072-BDBE-40A4-A393-F4FC362382F5"></a> <span id="PAGE" style="display:none;">14/50</span> <!-- End Header -->
<a id="ADXDK986"></a><a id="ADXDK4000"></a>
<h1 id="ADXDK-GUID-E148A072-BDBE-40A4-A393-F4FC362382F5" class="sect1"><span class="enumeration_chapter">6</span> Using the XSLT Processor for Java</h1>
<div>
<p>This chapter explains how to use the Extensible Stylesheet Language Transformation (XSLT) processor for Java.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xslt.htm#GUID-1E8020C0-90D9-4CC5-86DE-48237A43E0DC">Introduction to the XSLT Processor</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-322D83F3-DBA4-43C8-B378-8713854A3847">Using the XSLT Processor for Java: Overview</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-DC35FA19-A762-4380-B0E2-0352FAAE28C5">Transforming XML</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-E867162C-6289-4062-BCC3-3291FD6A4ED0">Programming with Oracle XSLT Extensions</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-4458FCD9-7947-40ED-9BD1-A0AD54706683">Tips and Techniques for Transforming XML</a></p>
</li>
</ul>
</div>
<a id="ADXDK987"></a><a id="ADXDK19219"></a>
<div class="props_rev_4"><a id="GUID-1E8020C0-90D9-4CC5-86DE-48237A43E0DC"></a>
<h2 id="ADXDK-GUID-1E8020C0-90D9-4CC5-86DE-48237A43E0DC" class="sect2"><span class="enumeration_section">6.1</span> Introduction to the XSLT Processor</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xslt.htm#GUID-A29D44F3-5B8D-482C-ABD9-A8DDD6A1333D">Prerequisites</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-6119AB61-59F7-49E9-9139-BAA2BD28155C">Standards and Specifications</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-9753FDEC-327D-4747-B016-EA2F924507C6">XML Transformation with XSLT 1.0 and 2.0</a></p>
</li>
</ul>
</div>
<a id="ADXDK19220"></a>
<div class="props_rev_3"><a id="GUID-A29D44F3-5B8D-482C-ABD9-A8DDD6A1333D"></a>
<h3 id="ADXDK-GUID-A29D44F3-5B8D-482C-ABD9-A8DDD6A1333D" class="sect3"><span class="enumeration_section">6.1.1</span> Prerequisites</h3>
<div>
<p>XSLT is a language, based on Extensible Markup Language (XML), that you can use to transform one XML document into another text document. For example, you can use XSLT to accept an XML data document as input, perform arithmetic calculations on element values in the document, and generate an Extensible HyperText Markup Language (XHTML) document that shows the calculation results.In XSLT, XPath is used to navigate and process elements in the source node tree. XPath models an XML document as a tree made up of nodes; the types of nodes in the XPath node tree correspond to the types of nodes in a DOM tree.</p>
<p>This chapter assumes that you are familiar with these World Wide Web Consortium (W3C) standards:</p>
<ul style="list-style-type: disc;">
<li>
<p>Extensible Stylesheet Language (XSL) and <a href="glossary.htm#GUID-8AD9F98D-06CF-4FC6-8729-9FE297BD501F"><span class="xrefglossterm">Extensible Stylesheet Language Transformations (XSLT)</span></a>. For a general introduction to XSLT, see the XML resources listed in <span class="q">&#34;<a href="preface.htm#GUID-2CD1F6B6-C8EC-42E3-97F2-589AABF9AFFB">Related Documents</a>.&#34;</span></p>
</li>
</ul>
</div>
</div>
<a id="ADXDK4001"></a>
<div class="props_rev_3"><a id="GUID-6119AB61-59F7-49E9-9139-BAA2BD28155C"></a>
<h3 id="ADXDK-GUID-6119AB61-59F7-49E9-9139-BAA2BD28155C" class="sect3"><span class="enumeration_section">6.1.2</span> Standards and Specifications</h3>
<div>
<p>XSLT is currently available in two versions: a working draft for XSLT 2.0 and the XSLT 1.0 Recommendation. You can find the specifications here:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/TR/xslt20/" target="_blank"><code>http://www.w3.org/TR/xslt20/</code></a></p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xslt" target="_blank"><code>http://www.w3.org/TR/xslt</code></a></p>
</li>
</ul>
<p>XPath, which is the navigational language used by XSLT and other XML languages, is available in two versions: a working draft for XPath 2.0 and the XPath 1.0 Recommendation. You can find the specifications for the two XPath versions here:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/TR/xpath20/" target="_blank"><code>http://www.w3.org/TR/xpath20/</code></a></p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xpath" target="_blank"><code>http://www.w3.org/TR/xpath</code></a></p>
</li>
</ul>
<p>The Oracle XML Developer&#39;s Kit (XDK) XSLT processor implements both the XSLT and XPath 1.0 standards, and also the current working drafts of the XSLT and XPath 2.0 standards. The XDK XSLT processor supports the XPath 2.0 functions and operators. You can find the specification here:</p>
<pre dir="ltr"><a href="http://www.w3.org/TR/xpath-functions/" target="_blank">http://www.w3.org/TR/xpath-functions/</a>
</pre>
<div class="infoboxnotealso" id="GUID-6119AB61-59F7-49E9-9139-BAA2BD28155C__GUID-2D0017D0-CA94-4706-86A3-B3ED3584C31D">
<p class="notep1">See Also:</p>
<p><a href="adx_ref_standards.htm#GUID-795A483B-12AC-4F6D-A606-6BE9DA963F0F">Oracle XML Developer&#39;s Kit Standards</a> for a summary of the standards supported by XDK</p>
</div>
</div>
</div>
<a id="ADXDK19221"></a>
<div class="props_rev_3"><a id="GUID-9753FDEC-327D-4747-B016-EA2F924507C6"></a>
<h3 id="ADXDK-GUID-9753FDEC-327D-4747-B016-EA2F924507C6" class="sect3"><span class="enumeration_section">6.1.3</span> XML Transformation with XSLT 1.0 and 2.0</h3>
<div>
<p>Oracle XML Developer&#39;s Kit (XDK) provides several useful features not included in XSLT 1.0. To use XSLT 2.0, set the <code>version</code> attribute in your style sheet:</p>
<pre dir="ltr">&lt;? xml-stylesheet version=&#34;2.0&#34; ... ?&gt;
</pre>
<p>Useful XSLT 2.0 features include these:</p>
<ul style="list-style-type: disc;">
<li>
<p>User-defined functions</p>
<p>You can use the <code>&lt;xsl:function&gt;</code> declaration to define functions. This element must have one <code>name</code> attribute to define the function name. The value of the <code>name</code> attribute is a <code>QName</code>. The content of the <code>&lt;xsl:function&gt;</code> element is zero or more <code>xsl:param</code> elements that specify the formal arguments of the function, followed by a sequence constructor that defines the value returned by the function.</p>
<p><code>QName</code> can have a null namespace, but user-defined functions must have a non-null namespace. That is, if <code>abc</code> is defined as a namespace, then <code>add</code> is not a legal user-defined function, but <code>abc:add</code> is.</p>
</li>
<li>
<p>Grouping</p>
<p>You can use the <code>&lt;xsl:for-each-group&gt;</code> element, <code>current-group()</code> function, and <code>current-grouping-key()</code> function to group items.</p>
</li>
<li>
<p>Multiple result documents</p>
<p>You can use the <code>&lt;xsl:result-document&gt;</code> element to create a result tree. The content of the <code>&lt;xsl:result-document&gt;</code> element is a sequence constructor for the children of the document node of the tree.</p>
<p>For example, this element enables you to accept an XML document as input and break it into separate documents. You can take an XML document that describes a list of books and generate an XHTML document for each book. You can then validate each output document.</p>
</li>
<li>
<p>Temporary trees</p>
<p>Instead of representing the intermediate XSL transformation results and XSL variables as strings, as in XSLT 1.0, you can store them as a set of document nodes. The document nodes, which you can construct with the <code>&lt;xsl:variable&gt;</code>, <code>&lt;xsl:param&gt;</code>, and <code>&lt;xsl:with-param&gt;</code> elements, are called temporary trees.</p>
</li>
<li>
<p>Character mapping</p>
<p>In XSLT 1.0, you had to use the <code>disable-output-escaping</code> attribute of the <code>&lt;xsl:text&gt;</code> and <code>&lt;xsl:value-of&gt;</code> elements to specify character escaping. In XSLT 2.0, you can declare mapping characters with an <code>&lt;xsl:character-map&gt;</code> element as a top-level <code>stylesheet</code> element. You can use this element to generate files with reserved or invalid XML characters in the XSLT outputs, such as <code>&lt;</code>, <code>&gt;</code>, and <code>&amp;</code>.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-9753FDEC-327D-4747-B016-EA2F924507C6__GUID-50686D1B-5575-4BC8-8B35-AF1838F0E667">
<p class="notep1">See Also:</p>
<p><a href="http://www.w3.org/TR/xslt20" target="_blank"><code>http://www.w3.org/TR/xslt20</code></a> for explanation and examples of XSLT 2.0 features</p>
</div>
</div>
</div>
</div>
<a id="ADXDK988"></a><a id="ADXDK19222"></a>
<div class="props_rev_3"><a id="GUID-322D83F3-DBA4-43C8-B378-8713854A3847"></a>
<h2 id="ADXDK-GUID-322D83F3-DBA4-43C8-B378-8713854A3847" class="sect2"><span class="enumeration_section">6.2</span> Using the XSLT Processor for Java: Overview</h2>
<div>
<p>The XDK XSLT processor transforms an XML document into another text-based document, with a format such as XML, HTML, XHTML, or text. You can invoke the processor programmatically by using a application programming interface (API) or run it from the command line. The XSLT processor can perform these tasks:</p>
<ul style="list-style-type: disc;">
<li>
<p>Reads one or more XSLT style sheets. The processor can apply multiple style sheets to a single XML input document and generate different results.</p>
</li>
<li>
<p>Reads one or more input XML documents. The processor can use a single style sheet to transform multiple XML input documents.</p>
</li>
<li>
<p>Builds output documents by applying the rules in the style sheet to the input XML documents. The output is a Document Object Model (DOM) tree, output stream, or series of Simple API for XML (SAX) events.</p>
</li>
</ul>
<p>Whereas XSLT is a function-based language that generally requires a DOM of the input document and style sheet to perform the transformation, the XDK Java implementation of the XSLT processor can use SAX to create a style sheet object to perform transformations with higher efficiency and fewer resources. You can reuse this style sheet object to transform multiple documents without reparsing the style sheet.</p>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xslt.htm#GUID-A30EDC89-3A29-4995-9E14-0D443981571C">Using the XSLT Processor: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-A934BBC3-82AC-4620-A20F-F8AE7E6CA62E">Running the XSLT Processor Demo Programs</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-354F13C8-024B-45DD-9EA7-ECF8C2CBC8EC">Using the XSLT Processor Command-Line Utility</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19224"></a><a id="ADXDK19223"></a>
<div class="props_rev_3"><a id="GUID-A30EDC89-3A29-4995-9E14-0D443981571C"></a>
<h3 id="ADXDK-GUID-A30EDC89-3A29-4995-9E14-0D443981571C" class="sect3"><span class="enumeration_section">6.2.1</span> Using the XSLT Processor: Basic Process</h3>
<div>
<p><a href="adx_j_xslt.htm#GUID-A30EDC89-3A29-4995-9E14-0D443981571C__i1012632">Figure 6-1</a> depicts the basic design of the XSLT processor for Java.</p>
<div class="infoboxnotealso" id="GUID-A30EDC89-3A29-4995-9E14-0D443981571C__GUID-DC436AB7-241C-4FBF-9DFB-2866A190E076">
<p class="notep1">See Also:</p>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code>XMLParser</code> and <code>XSDBuilder</code> classes</p>
</div>
<div class="figure" id="GUID-A30EDC89-3A29-4995-9E14-0D443981571C__i1012632">
<p class="titleinfigure">Figure 6-1 Using the XSLT Processor for Java</p>
<img width="405" height="462" src="img/GUID-189DF7EA-4BCD-41E7-8E73-EE6DB36ED192-default.gif" alt="Description of Figure 6-1 follows" title="Description of Figure 6-1 follows"/><br/>
<a href="img_text/GUID-189DF7EA-4BCD-41E7-8E73-EE6DB36ED192-print.htm">Description of &#34;Figure 6-1 Using the XSLT Processor for Java&#34;</a></div>
<!-- class="figure" --></div>
</div>
<a id="ADXDK19226"></a><a id="ADXDK19225"></a>
<div class="props_rev_3"><a id="GUID-A934BBC3-82AC-4620-A20F-F8AE7E6CA62E"></a>
<h3 id="ADXDK-GUID-A934BBC3-82AC-4620-A20F-F8AE7E6CA62E" class="sect3"><span class="enumeration_section">6.2.2</span> Running the XSLT Processor Demo Programs</h3>
<div>
<div class="section">
<p>Demo programs for the XSLT processor for Java are included in <code>$ORACLE_HOME/xdk/demo/java/parser/xslt</code>. <a href="adx_j_xslt.htm#GUID-A934BBC3-82AC-4620-A20F-F8AE7E6CA62E__CHDCGIAF" title="File and Description are the Columns.">Table 6-1</a> describes the XML files and programs that you can use to test the XSLT processor.</p>
<div class="tblformalwide" id="GUID-A934BBC3-82AC-4620-A20F-F8AE7E6CA62E__CHDCGIAF">
<p class="titleintable">Table 6-1 XSLT Processor Sample Files</p>
<table class="cellalignment655" title="XSLT Processor Sample Files " summary="File and Description are the Columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment704" id="d33313e935">File</th>
<th class="cellalignment708" id="d33313e938">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e943" headers="d33313e935">
<p><code>match.xml</code></p>
</td>
<td class="cellalignment709" headers="d33313e943 d33313e938">
<p>A sample XML document that you can use to test ID selection and pattern matching. Its associated style sheet is <code>match.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e954" headers="d33313e935">
<p><code>match.xsl</code></p>
</td>
<td class="cellalignment709" headers="d33313e954 d33313e938">
<p>A sample style sheet for use with <code>match.xml</code>. You can use it to test simple identity transformations.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e965" headers="d33313e935">
<p><code>math.xml</code></p>
</td>
<td class="cellalignment709" headers="d33313e965 d33313e938">
<p>A sample XML data document that you can use to perform simple arithmetic. Its associated style sheet is <code>math.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e976" headers="d33313e935">
<p><code>math.xsl</code></p>
</td>
<td class="cellalignment709" headers="d33313e976 d33313e938">
<p>A sample style sheet for use with <code>math.xml</code>. The style sheet outputs an HTML page with the results of arithmetic operations performed on element values in <code>math.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e990" headers="d33313e935">
<p><code>number.xml</code></p>
</td>
<td class="cellalignment709" headers="d33313e990 d33313e938">
<p>A sample XML data document that you can use to test for source tree numbering. The document describes the structure of a book.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e998" headers="d33313e935">
<p><code>number.xsl</code></p>
</td>
<td class="cellalignment709" headers="d33313e998 d33313e938">
<p>A sample style sheet for us with <code>number.xml</code>. The style sheet outputs an HTML page that calculates section numbers for the sections in the book described by <code>number.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1012" headers="d33313e935">
<p><code>position.xml</code></p>
</td>
<td class="cellalignment709" headers="d33313e1012 d33313e938">
<p>A sample XML data document that you can use to test for <code>position()=X</code> in complex patterns. Its associated style sheet is <code>position.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1026" headers="d33313e935">
<p><code>position.xsl</code></p>
</td>
<td class="cellalignment709" headers="d33313e1026 d33313e938">
<p>A sample style sheet for use with <code>position.xml</code>. The style sheet outputs an HTML page with the results of complex pattern matching.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1037" headers="d33313e935">
<p><code>reverse.xml</code></p>
</td>
<td class="cellalignment709" headers="d33313e1037 d33313e938">
<p>A sample XML data document that you can use with <code>reverse.xsl</code> to traverse backward through a tree.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1048" headers="d33313e935">
<p><code>reverse.xsl</code></p>
</td>
<td class="cellalignment709" headers="d33313e1048 d33313e938">
<p>A sample style sheet for us with <code>reverse.xml</code>. The style sheet output the item numbers in <code>reverse.xml</code> in reverse order.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1062" headers="d33313e935">
<p><code>string.xml</code></p>
</td>
<td class="cellalignment709" headers="d33313e1062 d33313e938">
<p>A sample XML data document that you can use to test perform various string test and manipulations. Its associated style sheet is <code>string.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1074" headers="d33313e935">
<p><code>string.xsl</code></p>
</td>
<td class="cellalignment709" headers="d33313e1074 d33313e938">
<p>A sample style sheet for us with <code>string.xml</code>. The style sheet outputs an XML document that displays the results of the string manipulations.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1085" headers="d33313e935">
<p><code>style.txt</code></p>
</td>
<td class="cellalignment709" headers="d33313e1085 d33313e938">
<p>A style sheet that provides the framework for an HTML page. The style sheet is included by <code>number.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1096" headers="d33313e935">
<p><code>variable.xml</code></p>
</td>
<td class="cellalignment709" headers="d33313e1096 d33313e938">
<p>A sample XML data document that you can use to test the use of XSL variables. The document describes the structure of a book. Its associated style sheet is <code>variable.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1107" headers="d33313e935">
<p><code>variable.xsl</code></p>
</td>
<td class="cellalignment709" headers="d33313e1107 d33313e938">
<p>A style sheet for use with <code>variable.xml</code>. The style sheet makes extensive use of XSL variables.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1118" headers="d33313e935">
<p><code>XSLSample.java</code></p>
</td>
<td class="cellalignment709" headers="d33313e1118 d33313e938">
<p>A sample application that offers a simple example of how to use the XSL processing capabilities of the Oracle XSLT processor. The program transforms an input XML document by using an input style sheet. This program builds the result of XSL transformations as a <code>DocumentFragment</code> and does not show <code>xsl:output</code> features.</p>
<p>Run this program with any XSLT style sheet in the directory as a first argument and its associated <code>*.xml</code> XML document as a second argument. For example, run the program with <code>variable.xsl</code> and <code>variable.xml</code> or <code>string.xsl</code> and <code>string.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d33313e1149" headers="d33313e935">
<p><code>XSLSample2.java</code></p>
</td>
<td class="cellalignment709" headers="d33313e1149 d33313e938">
<p>A sample application that offers a simple example of how to use the XSL processing capabilities of the Oracle XSLT processor. The program transforms an input XML document by using an input style sheet. This program outputs the result to a stream and supports <code>xsl:output</code> features. Like <code>XSLSample.java</code>, you can run it against any pair of XML data documents and style sheets in the directory.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Documentation for how to compile and run the sample programs is located in the <code>README</code>. The basic steps are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Change into the <code>$ORACLE_HOME/xdk/demo/java/parser/xslt</code> directory (UNIX) or <code>%ORACLE_HOME%\xdk\demo\java\parser\xslt</code> directory (Windows).</span></li>
<li class="stepexpand"><span>Make sure that your environment variables are set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>&#34;</span></span></li>
<li class="stepexpand"><span>Run <code>make</code> (UNIX) or <code>Make.bat</code> (Windows) at the command line. The make file compiles the source code and then runs the <code>XSLSample</code> and <code>XSLSample2</code> programs for each <code>*.xml</code> file and its associated <code>*.xsl</code> style sheet. The program writes its output for each transformation to <code>*.out</code>.</span></li>
<li class="stepexpand"><span>You can view the <code>*.out</code> files to see the output for the XML transformations. You can also run the programs on the command line as follows, where <span class="italic"><code>name</code></span> is replaced by <code>match</code>, <code>math</code>, and so forth:</span>
<div>
<pre dir="ltr">java XSLSample <span class="italic">name</span>.xsl <span class="italic">name</span>.xml
java XSLSample2 <span class="italic">name</span>.xsl <span class="italic">name</span>.xml
</pre>
<p>For example, run the <code>match.xml</code> demos:</p>
<pre dir="ltr">java XSLSample match.xsl match.xml
java XSLSample2 match.xsl match.xml
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19228"></a><a id="ADXDK19227"></a>
<div class="props_rev_3"><a id="GUID-354F13C8-024B-45DD-9EA7-ECF8C2CBC8EC"></a>
<h3 id="ADXDK-GUID-354F13C8-024B-45DD-9EA7-ECF8C2CBC8EC" class="sect3"><span class="enumeration_section">6.2.3</span> Using the XSLT Processor Command-Line Utility</h3>
<div>
<div class="section">
<p>XDK includes <code>oraxsl</code>, which is a command-line Java interface that can apply a style sheet to multiple XML documents. The <code>$ORACLE_HOME/bin/oraxsl</code> and <code>%ORACLE_HOME%\bin\oraxsl.bat</code> shell scripts execute the <code>oracle.xml.jaxb.oraxsl</code> class. To use <code>oraxsl</code> ensure that your <code>CLASSPATH</code> is set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span></p>
<p>Use this syntax on the command line to invoke <code>oraxsl</code>:</p>
<pre dir="ltr">oraxsl <span class="italic">options source stylesheet result</span>
</pre>
<p>The <code>oraxsl</code> utility expects a style sheet, an XML file to transform, and an optional result file. If you do not specify a result file, then the utility sends the transformed document to standard output. If multiple XML documents must be transformed by a style sheet, then use the <code>-l</code> or <code>-d</code> options with the <code>-s</code> and <code>-r</code> options. These and other options are described in <a href="adx_j_xslt.htm#GUID-354F13C8-024B-45DD-9EA7-ECF8C2CBC8EC__BABGFEBA" title="Option and Purpose are the columns.">Table 6-2</a>.</p>
<div class="tblformalwide" id="GUID-354F13C8-024B-45DD-9EA7-ECF8C2CBC8EC__BABGFEBA">
<p class="titleintable">Table 6-2 Command-Line Options for oraxsl</p>
<table class="cellalignment655" title="Command-Line Options for oraxsl" summary="Option and Purpose are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment710" id="d33313e1405">Option</th>
<th class="cellalignment711" id="d33313e1408">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1413" headers="d33313e1405">
<p><code>-w</code></p>
</td>
<td class="cellalignment713" headers="d33313e1413 d33313e1408">
<p>Shows warnings. By default, warnings are turned off.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1421" headers="d33313e1405">
<p><code>-e</code> <span class="italic"><code>error_log</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1421 d33313e1408">
<p>Specifies file into which the program writes errors and warnings.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1432" headers="d33313e1405">
<p><code>-l</code> <span class="italic"><code>xml_file_list</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1432 d33313e1408">
<p>Lists files to be processed.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1444" headers="d33313e1405">
<p><code>-d</code> <span class="italic"><code>directory</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1444 d33313e1408">
<p>Specifies the directory that contains the files to transform. The default behavior is to process all files in the directory. If only a subset of the files in that directory, for example, one file, must be processed, then change this behavior by setting <code>-l</code> and specifying the files that must be processed. You can also change the behavior by using the <code>-x</code> or <code>-i</code> option to select files based on their extension.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1465" headers="d33313e1405">
<p><code>-x</code> <span class="italic"><code>source_extension</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1465 d33313e1408">
<p>Specifies extensions for the files to be excluded. Use this option with <code>-d</code>. The program does not select any files with the specified extension.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1480" headers="d33313e1405">
<p><code>-i</code> <span class="italic"><code>source_extension</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1480 d33313e1408">
<p>Specifies extensions for the files to be included. Use this option with <code>-d</code>. The program selects only files with the specified extension.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1495" headers="d33313e1405">
<p><code>-s</code> <span class="italic"><code>stylesheet</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1495 d33313e1408">
<p>Specifies the style sheet. If you set <code>-d</code> or <code>-l</code>, then set <code>-s</code> to indicate the style sheet to be used. You must specify the complete path.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1516" headers="d33313e1405">
<p><code>-r</code> <span class="italic"><code>result_extension</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1516 d33313e1408">
<p>Specifies the extension to use for results. If you set <code>-d</code> or <code>-l</code>, then set <code>-r</code> to specify the extension to be used for the results of the transformation. So, if you specify the extension <code>out</code>, the program transformed an input document <code>doc</code> to <code>doc.out</code>. By default, the program places the results in the current directory. You can change this behavior by using the <code>-o</code> option, which enables you to specify a directory for the results.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1550" headers="d33313e1405">
<p><code>-o</code> <span class="italic"><code>result_directory</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1550 d33313e1408">
<p>Specifies the directory in which to place results. You must set this option with the <code>-r</code> option.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1565" headers="d33313e1405">
<p><code>-p</code> <span class="italic"><code>param_list</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1565 d33313e1408">
<p>Lists parameters.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1577" headers="d33313e1405">
<p><code>-t</code> <span class="italic"><code>num_of_threads</code></span></p>
</td>
<td class="cellalignment713" headers="d33313e1577 d33313e1408">
<p>Specifies the number of threads to use for processing. Using multiple threads can provide performance improvements when processing multiple documents.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1590" headers="d33313e1405">
<p><code>-v</code></p>
</td>
<td class="cellalignment713" headers="d33313e1590 d33313e1408">
<p>Generates verbose output. The program prints some debugging information and can help in tracing any problems that are encountered during processing.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d33313e1598" headers="d33313e1405">
<p><code>-debug</code></p>
</td>
<td class="cellalignment713" headers="d33313e1598 d33313e1408">
<p>Generates debugging output. By default, debug mode is disabled. A graphical user interface (GUI) version of the XSLT debugger is available in Oracle JDeveloper.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
<a id="ADXDK19230"></a><a id="ADXDK19231"></a><a id="ADXDK19232"></a><a id="ADXDK19229"></a>
<div class="props_rev_3"><a id="GUID-D6188498-793F-46D0-94C1-204004CA8B7B"></a>
<h4 id="ADXDK-GUID-D6188498-793F-46D0-94C1-204004CA8B7B" class="sect4"><span class="enumeration_section">6.2.3.1</span> Using the XSLT Processor Command-Line Utility: Example</h4>
<div>
<div class="section">
<p>You can test <code>oraxsl</code> on the various XML files and style sheets in <code>$ORACLE_HOME/xdk/demo/java/parser/xslt</code>. <a href="adx_j_xslt.htm#GUID-D6188498-793F-46D0-94C1-204004CA8B7B__CHDGHIJH">Example 6-1</a> displays the contents of <code>math.xml</code>.</p>
<p>The XSLT style sheet named <code>math.xsl</code> is shown in <a href="adx_j_xslt.htm#GUID-D6188498-793F-46D0-94C1-204004CA8B7B__CHDFIAIH">Example 6-2</a>.</p>
<p>You can run the <code>oraxsl</code> utility on these files to produce HTML output as shown in this example:</p>
<pre dir="ltr">oraxsl math.xml math.xsl math.htm
</pre>
<p>The output file <code>math.htm</code> is shown in <a href="adx_j_xslt.htm#GUID-D6188498-793F-46D0-94C1-204004CA8B7B__CHDICDGA">Example 6-3</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-D6188498-793F-46D0-94C1-204004CA8B7B__CHDGHIJH">
<p class="titleinexample">Example 6-1 math.xml</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;doc&gt;
  &lt;n1&gt;5&lt;/n1&gt;
  &lt;n2&gt;2&lt;/n2&gt;
  &lt;div&gt;-5&lt;/div&gt;
  &lt;mod&gt;2&lt;/mod&gt;
&lt;/doc&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D6188498-793F-46D0-94C1-204004CA8B7B__CHDFIAIH">
<p class="titleinexample">Example 6-2 math.xsl</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;&lt;xsl:stylesheet version=&#34;1.0&#34; xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;&gt;
  &lt;xsl:template match=&#34;doc&#34;&gt;
    &lt;HTML&gt;
      &lt;H1&gt;Test for mod.&lt;/H1&gt;
      &lt;HR/&gt;
      &lt;P&gt;Should say &#34;1&#34;: &lt;xsl:value-of select=&#34;5 mod 2&#34;/&gt;&lt;/P&gt;
      &lt;P&gt;Should say &#34;1&#34;: &lt;xsl:value-of select=&#34;n1 mod n2&#34;/&gt;&lt;/P&gt;
      &lt;P&gt;Should say &#34;-1&#34;: &lt;xsl:value-of select=&#34;div mod mod&#34;/&gt;&lt;/P&gt;
      &lt;P&gt;&lt;xsl:value-of select=&#34;div or ((mod)) | or&#34;/&gt;&lt;/P&gt;
    &lt;/HTML&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D6188498-793F-46D0-94C1-204004CA8B7B__CHDICDGA">
<p class="titleinexample">Example 6-3 math.htm</p>
<pre dir="ltr">&lt;HTML&gt;
   &lt;H1&gt;Test for mod.&lt;/H1&gt;
   &lt;HR&gt;
   &lt;P&gt;Should say &#34;1&#34;: 1&lt;/P&gt;
   &lt;P&gt;Should say &#34;1&#34;: 1&lt;/P&gt;
   &lt;P&gt;Should say &#34;-1&#34;: -1&lt;/P&gt;
   &lt;P&gt;true&lt;/P&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADXDK989"></a><a id="ADXDK19233"></a>
<div class="props_rev_3"><a id="GUID-DC35FA19-A762-4380-B0E2-0352FAAE28C5"></a>
<h2 id="ADXDK-GUID-DC35FA19-A762-4380-B0E2-0352FAAE28C5" class="sect2"><span class="enumeration_section">6.3</span> Transforming XML</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xslt.htm#GUID-66EB2FB4-0037-4CC9-A11B-FBA13CDE479A">Performing Basic XSL Transformation</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-8005D27C-3BCC-4F13-AE48-22E87FEDAB5C">Getting DOM Results from an XSL Transformation</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19235"></a><a id="ADXDK19234"></a>
<div class="props_rev_3"><a id="GUID-66EB2FB4-0037-4CC9-A11B-FBA13CDE479A"></a>
<h3 id="ADXDK-GUID-66EB2FB4-0037-4CC9-A11B-FBA13CDE479A" class="sect3"><span class="enumeration_section">6.3.1</span> Performing Basic XSL Transformation</h3>
<div>
<div class="section">
<p>As explained in <span class="q">&#34;<a href="adx_j_xslt.htm#GUID-322D83F3-DBA4-43C8-B378-8713854A3847">Using the XSLT Processor for Java: Overview</a>,&#34;</span> the fundamental classes used by the XSLT processor are <code>DOMParser</code> and <code>XSLProcessor</code>. The <code>XSL2Sample.java</code> demo program provides a good illustration of how to use these classes to transform an XML document with an XSLT style sheet.</p>
<p>Use these basic steps to write Java programs that use the XSLT processor:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a DOM parser object that you can use to parse the XML data documents and XSLT style sheets. This code fragment from <code>XSL2Sample.java</code> shows how to instantiate a parser:</span>
<div>
<pre dir="ltr">XMLDocument xml, xsldoc, out;URL xslURL;URL xmlURL;
// ... 
parser = new DOMParser();parser.setPreserveWhitespace(true);
</pre>
<p>By default, the parser does not preserve white space unless a DTD is used. It is important to preserve white space because it enables XSLT white space rules to determine how white space is handled.</p>
</div>
</li>
<li class="stepexpand"><span>Parse the XSLT style sheet with the <code>DOMParser.parse()</code> method. this code fragment from <code>XSL2Sample.java</code> shows how to perform the parse:</span>
<div>
<pre dir="ltr">xslURL = DemoUtil.createURL(args[0]);
parser.parse(xslURL);
xsldoc = parser.getDocument();
</pre></div>
</li>
<li class="stepexpand"><span>Parse the XML data document with the <code>DOMParser.parse()</code> method. this code fragment from <code>XSL2Sample.java</code> shows how to perform the parse:</span>
<div>
<pre dir="ltr">xmlURL = DemoUtil.createURL(args[1]);
parser.parse(xmlURL);
xml = parser.getDocument();
</pre></div>
</li>
<li class="stepexpand"><span>Create a new XSLT style sheet object. You can pass objects of these classes to the <code>XSLProcessor.newXSLStylesheet()</code> method:</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p><code>java.io.Reader</code></p>
</li>
<li>
<p><code>java.io.InputStream</code></p>
</li>
<li>
<p><code>XMLDocument</code></p>
</li>
<li>
<p><code>java.net.URL</code></p>
</li>
</ul>
<p>For example, <code>XSL2Sample.java</code> shows how to create a style sheet object from an <code>XMLDocument</code> object:</p>
<pre dir="ltr">XSLProcessor processor = new XSLProcessor();
processor.setBaseURL(xslURL);
XSLStylesheet xsl = processor.newXSLStylesheet(xsldoc);
</pre></div>
</li>
<li class="stepexpand"><span>Set the XSLT processor to display any warnings. For example, <code>XSL2Sample.java</code> invokes the <code>showWarnings()</code> and <code>setErrorStream()</code> methods:</span>
<div>
<pre dir="ltr">processor.showWarnings(true);
processor.setErrorStream(System.err);
</pre></div>
</li>
<li class="stepexpand"><span>Use the <code>XSLProcessor.processXSL()</code> method to apply the style sheet to the input XML data document. <a href="adx_j_xslt.htm#GUID-66EB2FB4-0037-4CC9-A11B-FBA13CDE479A__CHDEBBCE" title="Describes XSLProcessor methods.">Table 6-3</a> lists some other available <code>XSLProcessor</code> methods.</span>
<div>
<div class="tblformal" id="GUID-66EB2FB4-0037-4CC9-A11B-FBA13CDE479A__CHDEBBCE">
<p class="titleintable">Table 6-3 XSLProcessor Methods</p>
<table class="cellalignment685" title="XSLProcessor Methods" summary="Describes XSLProcessor methods.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d33313e2035">Method</th>
<th class="cellalignment682" id="d33313e2038">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2043" headers="d33313e2035">
<p><code>removeParam()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2043 d33313e2038">
<p>Removes parameters.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2051" headers="d33313e2035">
<p><code>resetParams()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2051 d33313e2038">
<p>Resets all parameters.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2059" headers="d33313e2035">
<p><code>setParam()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2059 d33313e2038">
<p>Sets parameters for the transformation.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2067" headers="d33313e2035">
<p><code>setBaseUrl()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2067 d33313e2038">
<p>Sets a base URL for any relative references in the style sheet.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2075" headers="d33313e2035">
<p><code>setEntityResolver()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2075 d33313e2038">
<p>Sets an entity resolver for any relative references in the style sheet.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2083" headers="d33313e2035">
<p><code>setLocale()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2083 d33313e2038">
<p>Sets a locale for error reporting.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>This code fragment from <code>XSL2Sample.java</code> shows how to apply the style sheet to the XML document:</p>
<pre dir="ltr">processor.processXSL(xsl, xml, System.out);
</pre></div>
</li>
<li class="stepexpand"><span>Process the transformed output. You can transform the results by creating an XML document object, writing to an output stream, or reporting SAX events.</span>
<div>
<p>This code fragment from <code>XSL2Sample.java</code> shows how to print the results:</p>
<pre dir="ltr">processor.processXSL(xsl, xml, System.out);
</pre>
<div class="infoboxnotealso" id="GUID-66EB2FB4-0037-4CC9-A11B-FBA13CDE479A__GUID-6DDEE800-55EE-48D2-A498-0BA863553A2D">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/TR/xslt" target="_blank"><code>http://www.w3.org/TR/xslt</code></a></p>
</li>
<li>
<p><a href="http://www.w3.org/style/XSL" target="_blank"><code>http://www.w3.org/style/XSL</code></a></p>
</li>
<li>
<p><a href="adx_j_parser.htm#GUID-33E0EA2B-A08A-462E-86B4-3F944409663D">XML Parsing for Java</a></p>
</li>
</ul>
</div>
</div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19237"></a><a id="ADXDK19236"></a>
<div class="props_rev_3"><a id="GUID-8005D27C-3BCC-4F13-AE48-22E87FEDAB5C"></a>
<h3 id="ADXDK-GUID-8005D27C-3BCC-4F13-AE48-22E87FEDAB5C" class="sect3"><span class="enumeration_section">6.3.2</span> Getting DOM Results from an XSL Transformation</h3>
<div>
<div class="section">
<p>The <code>XSLSample.java</code> demo program shows how to generate an <code>oracle.xml.parser.v2.XMLDocumentFragment</code> object as the result of an XSL transformation. An <code>XMLDocumentFragment</code> is a <span class="italic">lightweight</span> <code>Document</code> object that extracts a portion of an XML document tree. The <code>XMLDocumentFragment</code> class implements the <code>org.w3c.dom.DocumentFragment</code> interface.</p>
<p>The <code>XSL2Sample.java</code> program shows how to generate a <code>DocumentFragment</code> object. The basic steps for transforming XML are the same as those described in <span class="q">&#34;<a href="adx_j_xslt.htm#GUID-66EB2FB4-0037-4CC9-A11B-FBA13CDE479A">Performing Basic XSL Transformation</a>.&#34;</span> The only difference is in the arguments passed to the <code>XSLProcessor.processXSL()</code> method. This code fragment from <code>XSL2Sample.java</code> shows how to create the DOM fragment and then print it to standard output:</p>
<pre dir="ltr">XMLDocumentFragment result = processor.processXSL(xsl, xml);
result.print(System.out);
</pre>
<p><a href="adx_j_xslt.htm#GUID-8005D27C-3BCC-4F13-AE48-22E87FEDAB5C__CHDGAEIF" title="Describes XSLProcessor methods.">Table 6-4</a> lists some <code>XMLDocumentFragment</code> methods you can use to manipulate the object.</p>
<div class="tblformal" id="GUID-8005D27C-3BCC-4F13-AE48-22E87FEDAB5C__CHDGAEIF">
<p class="titleintable">Table 6-4 XMLDocumentFragment Methods</p>
<table class="cellalignment650" title="XMLDocumentFragment Methods" summary="Describes XSLProcessor methods.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d33313e2270">Method</th>
<th class="cellalignment682" id="d33313e2273">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2278" headers="d33313e2270">
<p><code>getAttributes()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2278 d33313e2273">
<p>Gets a <code>NamedNodeMap</code> containing the attributes of this node (if it is an <code>Element</code>) or null otherwise</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2292" headers="d33313e2270">
<p><code>getLocalName()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2292 d33313e2273">
<p>Gets the local name for this element</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2300" headers="d33313e2270">
<p><code>getNamespaceURI()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2300 d33313e2273">
<p>Gets the namespace URI of this element</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2308" headers="d33313e2270">
<p><code>getNextSibling()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2308 d33313e2273">
<p>Gets the node immediately following the current node</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2316" headers="d33313e2270">
<p><code>getNodeName()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2316 d33313e2273">
<p>Gets the name of the node</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2324" headers="d33313e2270">
<p><code>getNodeType()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2324 d33313e2273">
<p>Gets a code that represents the type of the underlying object</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2332" headers="d33313e2270">
<p><code>getParentNode()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2332 d33313e2273">
<p>Gets the parent of the current node</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2341" headers="d33313e2270">
<p><code>getPreviousSibling()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2341 d33313e2273">
<p>Gets the node immediately preceding the current node</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d33313e2349" headers="d33313e2270">
<p><code>reportSAXEvents()</code></p>
</td>
<td class="cellalignment684" headers="d33313e2349 d33313e2273">
<p>Reports SAX events from a DOM tree</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK990"></a><a id="ADXDK19238"></a>
<div class="props_rev_4"><a id="GUID-E867162C-6289-4062-BCC3-3291FD6A4ED0"></a>
<h2 id="ADXDK-GUID-E867162C-6289-4062-BCC3-3291FD6A4ED0" class="sect2"><span class="enumeration_section">6.4</span> Programming with Oracle XSLT Extensions</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xslt.htm#GUID-5B5119D6-90DF-42FD-BED1-942D67FBE10C">Overview of Oracle XSLT Extensions</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-6FD851D7-6B0C-488F-B521-5F9087CF6314">Specifying Namespaces for XSLT Extension Functions</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-E5ECD775-DA86-4D72-87D3-10691E30E0BD">Using Static and Nonstatic Java Methods in XSLT</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-8A201829-6863-49B3-AF3A-9AA8BD923A3C">Using Constructor Extension Functions</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-687048B9-629F-4528-8C77-533B3E613362">Using Return Value Extension Functions</a></p>
</li>
</ul>
</div>
<a id="ADXDK19239"></a>
<div class="props_rev_3"><a id="GUID-5B5119D6-90DF-42FD-BED1-942D67FBE10C"></a>
<h3 id="ADXDK-GUID-5B5119D6-90DF-42FD-BED1-942D67FBE10C" class="sect3"><span class="enumeration_section">6.4.1</span> Overview of Oracle XSLT Extensions</h3>
<div>
<p>The XSLT 1.0 standard defines two kinds of extensions: extension elements and extension functions. XDK provides extension functions for XSLT processing that enable users of the XSLT processor to invoke any Java method from XSL expressions. When using Oracle XSLT extensions, follow these guidelines:</p>
<ul style="list-style-type: disc;">
<li>
<p>When you define an XSLT extension in a given programming language, you can use only the XSLT style sheet with XSLT processors that can invoke this extension. Thus, only the Java version of the processor can invoke extension functions that are defined in Java.</p>
</li>
<li>
<p>Use XSLT extensions only if the built-in XSL functions cannot solve a given problem.</p>
</li>
<li>
<p>As explained in this section, the namespace of the extension class must start with the proper URL.</p>
</li>
</ul>
<p>These Oracle extension functions are especially useful:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>&lt;ora:output&gt;</code>, you can use <code>&lt;ora:output&gt;</code> as a top-level element or in an XSL template. If used as a top-level element, it is similar to the <code>&lt;xsl:output&gt;</code> extension function, except that it has an additional <code>name</code> attribute. When used as a template, it has the additional attributes <code>use</code> and <code>href</code>. This function is useful for creating multiple outputs from one XSL transformation.</p>
</li>
<li>
<p><code>&lt;ora:node-set&gt;</code>, which converts a result tree fragment into a node-set. This function is useful when you want to refer the existing text or intermediate text results in XSL for further transformation.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19240"></a>
<div class="props_rev_3"><a id="GUID-6FD851D7-6B0C-488F-B521-5F9087CF6314"></a>
<h3 id="ADXDK-GUID-6FD851D7-6B0C-488F-B521-5F9087CF6314" class="sect3"><span class="enumeration_section">6.4.2</span> Specifying Namespaces for XSLT Extension Functions</h3>
<div>
<div class="section">
<p>The Oracle Java extension functions belong to the namespace that corresponds to this Universal Resource Identifier (URI):</p>
<pre dir="ltr">http://www.oracle.com/XSL/Transform/java/
</pre>
<p>An extension function that belongs to this namespace refers to methods in the Java <span class="italic"><code>classname</code></span>, so that you can construct URIs in this format:</p>
<pre dir="ltr">http://www.oracle.com/XSL/Transform/java/<span class="/&#34;/&#34;italic&#34;&#34;">classname</span>
</pre>
<p>For example, you can use this namespace to invoke <code>java.lang.String</code> methods from XSL expressions:</p>
<pre dir="ltr">http://www.oracle.com/XSL/Transform/java/java.lang.String
</pre>
<div class="infobox-note" id="GUID-6FD851D7-6B0C-488F-B521-5F9087CF6314__GUID-59334606-CE35-4BF8-93B3-7CD5086472E0">
<p class="notep1">Note:</p>
<p>When assigning the <code>xsl</code> prefix to a namespace, the correct URI is <code>xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;</code>. Any other URI fails to give correct output.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19242"></a><a id="ADXDK19241"></a>
<div class="props_rev_3"><a id="GUID-E5ECD775-DA86-4D72-87D3-10691E30E0BD"></a>
<h3 id="ADXDK-GUID-E5ECD775-DA86-4D72-87D3-10691E30E0BD" class="sect3"><span class="enumeration_section">6.4.3</span> Using Static and Nonstatic Java Methods in XSLT</h3>
<div>
<div class="section">
<p>If the Java method is a nonstatic method of the class, then the first parameter is used as the instance on which the method is invoked, and the rest of the parameters are passed to the method. If the extension function is a static method, however, then all the parameters of the extension function are passed as parameters to the static function. <a href="adx_j_xslt.htm#GUID-E5ECD775-DA86-4D72-87D3-10691E30E0BD__CHDJFECJ">Example 6-4</a> shows how to use the <code>java.lang.Math.ceil()</code> method in an XSLT style sheet.</p>
<p>For example, you can create <a href="adx_j_xslt.htm#GUID-E5ECD775-DA86-4D72-87D3-10691E30E0BD__CHDJFECJ">Example 6-4</a> as style sheet <code>ceil.xsl</code> and then apply it to any well-formed XML document. For example, run the <code>oraxsl</code> utility:</p>
<pre dir="ltr">oraxsl ceil.xsl ceil.xsl ceil.out
</pre>
<p>The output document <code>ceil.out</code> has this content:</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39; encoding = &#39;UTF-8&#39;?&gt;
13
</pre>
<div class="infobox-note" id="GUID-E5ECD775-DA86-4D72-87D3-10691E30E0BD__GUID-01978C72-3CB1-48A7-91E6-83B553A5FA74">
<p class="notep1">Note:</p>
<p>The XSL class loader recognizes only statically added JARs and paths in the <code>CLASSPATH</code> and those specified by <code>wrapper.classpath</code>. Files added dynamically are not visible to XSLT processor.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E5ECD775-DA86-4D72-87D3-10691E30E0BD__CHDJFECJ">
<p class="titleinexample">Example 6-4 Using a Static Function in an XSLT Style Sheet</p>
<pre dir="ltr">&lt;xsl:stylesheet version=&#34;1.0&#34; 
  xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;
  xmlns:math=&#34;http://www.oracle.com/XSL/Transform/java/java.lang.Math&#34;&gt; 
  &lt;xsl:template match=&#34;/&#34;&gt; 
    &lt;xsl:value-of select=&#34;math:ceil(&#39;12.34&#39;)&#34;/&gt; 
  &lt;/xsl:template&gt; 
&lt;/xsl:stylesheet&gt; 
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19244"></a><a id="ADXDK19243"></a>
<div class="props_rev_3"><a id="GUID-8A201829-6863-49B3-AF3A-9AA8BD923A3C"></a>
<h3 id="ADXDK-GUID-8A201829-6863-49B3-AF3A-9AA8BD923A3C" class="sect3"><span class="enumeration_section">6.4.4</span> Using Constructor Extension Functions</h3>
<div>
<div class="section">
<p>The extension function <code>new</code> creates a new instance of the class and acts as the constructor. <a href="adx_j_xslt.htm#GUID-8A201829-6863-49B3-AF3A-9AA8BD923A3C__CHDIAJAI">Example 6-5</a> creates a new <code>String</code> object with the value <code>Hello World</code>, stores it in the XSL variable <code>str1</code>, and then outputs it in uppercase.</p>
<p>For example, you can create this style sheet as <code>hello.xsl</code> and apply it to any well-formed XML document. For example, run the <code>oraxsl</code> utility:</p>
<pre dir="ltr">oraxsl hello.xsl hello.xsl hello.out
</pre>
<p>The output document <code>hello.out</code> has this content:</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39; encoding = &#39;UTF-8&#39;?&gt;
HELLO WORLD
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-8A201829-6863-49B3-AF3A-9AA8BD923A3C__CHDIAJAI">
<p class="titleinexample">Example 6-5 Using a Constructor in an XSLT Style Sheet</p>
<pre dir="ltr">&lt;xsl:stylesheet version=&#34;1.0&#34;
  xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;
  xmlns:jstring=&#34;http://www.oracle.com/XSL/Transform/java/java.lang.String&#34;&gt; 
  &lt;xsl:template match=&#34;/&#34;&gt; 
    &lt;!-- creates a new java.lang.String and stores it in the variable str1 --&gt; 
    &lt;xsl:variable name=&#34;str1&#34; select=&#34;jstring:new(&#39;HeLlO wOrLd&#39;)&#34;/&gt; 
    &lt;xsl:value-of select=&#34;jstring:toUpperCase($str1)&#34;/&gt; 
  &lt;/xsl:template&gt; 
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19246"></a><a id="ADXDK19245"></a>
<div class="props_rev_3"><a id="GUID-687048B9-629F-4528-8C77-533B3E613362"></a>
<h3 id="ADXDK-GUID-687048B9-629F-4528-8C77-533B3E613362" class="sect3"><span class="enumeration_section">6.4.5</span> Using Return Value Extension Functions</h3>
<div>
<div class="section">
<p>The result of an extension function can be of any type, including the five types defined in XSL and the additional simple XML Schema data types defined in XSLT 2.0:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>NodeSet</code></p>
</li>
<li>
<p><code>Boolean</code></p>
</li>
<li>
<p><code>String</code></p>
</li>
<li>
<p><code>Number</code></p>
</li>
<li>
<p><code>ResultTree</code></p>
</li>
</ul>
<p>You can store these data types in variables or pass them to other extension functions. If the result is one of the five types defined in XSL, it can be returned as the result of an XSL expression.</p>
<p>The XSLT Processor supports overloading based on the number of parameters and type. The processor performs implicit type conversion between the five XSL types as defined in XSL. It performs type conversion implicitly among these data types, and also from <code>NodeSet</code> to these data types:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>String</code></p>
</li>
<li>
<p><code>Number</code></p>
</li>
<li>
<p><code>Boolean</code></p>
</li>
<li>
<p><code>ResultTree</code></p>
</li>
</ul>
<p>Overloading based on two types that can be implicitly converted to each other is not permitted. This overloading causes an error in XSL because <code>String</code> and <code>Number</code> can be implicitly converted to each other:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>overloadme(int i){}</code></p>
</li>
<li>
<p><code>overloadme(String s){}</code></p>
</li>
</ul>
<p>Mapping between XSL data types and Java data types is done as follows:</p>
<pre dir="ltr">String     -&gt;     java.lang.String
Number     -&gt;     int, float, double
Boolean    -&gt;     boolean
NodeSet    -&gt;     NodeList
ResultTree -&gt;     XMLDocumentFragment
</pre>
<p>The style sheet in <a href="adx_j_xslt.htm#GUID-687048B9-629F-4528-8C77-533B3E613362__CHDEGHCG">Example 6-6</a> parses the <code>variable.xml</code> document, which is located in the directory <code>$ORACLE_HOME/xdk/demo/java/parser/xslt</code>, and retrieves the value of the <code>&lt;title&gt;</code> child of the <code>&lt;chapter&gt;</code> element.</p>
<p>You can create <a href="adx_j_xslt.htm#GUID-687048B9-629F-4528-8C77-533B3E613362__CHDEGHCG">Example 6-6</a> as <code>gettitle.xsl</code> and then run <code>oraxsl</code>:</p>
<pre dir="ltr">oraxsl gettitle.xsl gettitle.xsl variable.out
</pre>
<p>The output document <code>variable.out</code> has this content:</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39; encoding = &#39;UTF-8&#39;?&gt;
The value of the title element is: Section Tests
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-687048B9-629F-4528-8C77-533B3E613362__CHDEGHCG">
<p class="titleinexample">Example 6-6 gettitle.xsl</p>
<pre dir="ltr">&lt;xsl:stylesheet version=&#34;1.0&#34;
  xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;
  xmlns:parser = &#34;http://www.oracle.com/XSL/Transform/java/oracle.xml.parser.v2.DOMParser&#34;
  xmlns:document =
    &#34;http://www.oracle.com/XSL/Transform/java/oracle.xml.parser.v2.XMLDocument&#34;&gt; 

  &lt;xsl:template match =&#34;/&#34;&gt; 
    &lt;!-- Create a new instance of the parser and store it in myparser variable --&gt; 
    &lt;xsl:variable name=&#34;myparser&#34; select=&#34;parser:new()&#34;/&gt; 

    &lt;!-- Call an instance method of DOMParser. The first parameter is the object.
     The PI is equivalent to $myparser.parse(&#39;file:/my_path/variable.xml&#39;). Note
     that you should replace my_path with the absolute path on your system. --&gt; 
    &lt;xsl:value-of select=&#34;parser:parse($myparser, &#39;file:/my_path/variable.xml&#39;)&#34;/&gt; 

    &lt;!-- Get the document node of the XML Dom tree --&gt; 
    &lt;xsl:variable name=&#34;mydocument&#34; select=&#34;parser:getDocument($myparser)&#34;/&gt;

    &lt;!-- Invoke getelementsbytagname on mydocument --&gt; 
    &lt;xsl:for-each select=&#34;document:getElementsByTagName($mydocument,&#39;chapter&#39;)&#34;&gt;
      The value of the title element is: &lt;xsl:value-of select=&#34;docinfo/title&#34; /&gt;
    &lt;/xsl:for-each&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19247"></a>
<div class="props_rev_3"><a id="GUID-4458FCD9-7947-40ED-9BD1-A0AD54706683"></a>
<h2 id="ADXDK-GUID-4458FCD9-7947-40ED-9BD1-A0AD54706683" class="sect2"><span class="enumeration_section">6.5</span> Tips and Techniques for Transforming XML</h2>
<div>
<div class="section">
<p>This section lists XSL and XSLT Processor for Java hints, and contains these topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308">Merging XML Documents with XSLT</a></p>
</li>
<li>
<p><a href="adx_j_xslt.htm#GUID-2EB5EB0A-869C-4CED-9BDA-F8E6317181D2">Creating an HTML Input Form Based on the Columns in a Table</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19249"></a><a id="ADXDK19250"></a><a id="ADXDK19251"></a><a id="ADXDK19252"></a><a id="ADXDK19248"></a>
<div class="props_rev_3"><a id="GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308"></a>
<h3 id="ADXDK-GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308" class="sect3"><span class="enumeration_section">6.5.1</span> Merging XML Documents with XSLT</h3>
<div>
<div class="section">
<p><span class="q">&#34;<a href="adx_j_parser.htm#GUID-F27F98D1-262F-49D4-8CDF-FAA1C9804ABD">Merging Documents with appendChild()</a>&#34;</span> discusses the DOM technique for merging documents. If the merging operation is simple, then you can also use an XSLT-based approach. For example, you might want to merge the XML documents shown in <a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDGJJHE">Example 6-7</a> and <a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDIFHEH">Example 6-8</a>.</p>
<p><a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDBJIJF">Example 6-9</a> displays a sample style sheet that merges the two XML documents based on matching the <code>&lt;key/&gt;</code> element values.</p>
<p>Create the XML files in <a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDGJJHE">Example 6-7</a>, <a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDIFHEH">Example 6-8</a>, and <a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDBJIJF">Example 6-9</a> and run this at the command line:</p>
<pre dir="ltr">oraxsl msg_w_num.xml msgmerge.xsl msgmerge.xml
</pre>
<p><a href="adx_j_xslt.htm#GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDCHCDA">Example 6-10</a> shows the output document, which merges the data contained in <code>msg_w_num.xml</code> and <code>msg_w_text.xml</code>.</p>
<p>This technique is not as efficient for larger files as an equivalent database join of two tables, but it is useful if you have only XML files.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDGJJHE">
<p class="titleinexample">Example 6-7 msg_w_num.xml</p>
<pre dir="ltr">&lt;messages&gt;
  &lt;msg&gt;
    &lt;key&gt;AAA&lt;/key&gt;
    &lt;num&gt;01001&lt;/num&gt;
  &lt;/msg&gt;
  &lt;msg&gt;
    &lt;key&gt;BBB&lt;/key&gt;
    &lt;num&gt;01011&lt;/num&gt;
  &lt;/msg&gt;
&lt;/messages&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDIFHEH">
<p class="titleinexample">Example 6-8 msg_w_text.xml</p>
<pre dir="ltr">&lt;messages&gt;
  &lt;msg&gt;
    &lt;key&gt;AAA&lt;/key&gt;
    &lt;text&gt;This is a Message&lt;/text&gt;
  &lt;/msg&gt;
  &lt;msg&gt;
    &lt;key&gt;BBB&lt;/key&gt;
    &lt;text&gt;This is another Message&lt;/text&gt;
  &lt;/msg&gt;
&lt;/messages&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDBJIJF">
<p class="titleinexample">Example 6-9 msgmerge.xsl</p>
<pre dir="ltr">&lt;xsl:stylesheet version=&#34;1.0&#34; xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;&gt;
  &lt;xsl:output indent=&#34;yes&#34;/&gt;
  &lt;!-- store msg_w_text.xml in doc2 variable --&gt;
  &lt;xsl:variable name=&#34;doc2&#34; select=&#34;document(&#39;msg_w_text.xml&#39;)&#34;/&gt;
  
  &lt;!-- match each node in input xml document, that is, msg_w_num.xml --&gt;
  &lt;xsl:template match=&#34;@*|node()&#34;&gt;
     &lt;!-- copy the current node to the result tree --&gt;
     &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select=&#34;@*|node()&#34;/&gt;
     &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;!-- match each &lt;msg&gt; element in msg_w_num.xml --&gt;
  &lt;xsl:template match=&#34;msg&#34;&gt;
     &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select=&#34;@*|node()&#34;/&gt;
        &lt;!-- insert two spaces so indentation is correct in output document --&gt;
        &lt;xsl:text&gt;  &lt;/xsl:text&gt; 
        &lt;!-- copy &lt;text&gt; node from msg_w_text.xml into result tree --&gt;
        &lt;text&gt;&lt;xsl:value-of 
               select=&#34;$doc2/messages/msg[key=current()/key]/text&#34;/&gt;
        &lt;/text&gt;
     &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1C6105F3-92E0-4900-B1BB-43B1893D0308__CHDCHCDA">
<p class="titleinexample">Example 6-10 msgmerge.xml</p>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39; encoding = &#39;UTF-8&#39;?&gt;
&lt;messages&gt;
  &lt;msg&gt;
    &lt;key&gt;AAA&lt;/key&gt;
    &lt;num&gt;01001&lt;/num&gt;
    &lt;text&gt;This is a Message&lt;/text&gt;
   &lt;/msg&gt;
  &lt;msg&gt;
    &lt;key&gt;BBB&lt;/key&gt;
    &lt;num&gt;01011&lt;/num&gt;
    &lt;text&gt;This is another Message&lt;/text&gt;
   &lt;/msg&gt;
&lt;/messages&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19253"></a>
<div class="props_rev_3"><a id="GUID-2EB5EB0A-869C-4CED-9BDA-F8E6317181D2"></a>
<h3 id="ADXDK-GUID-2EB5EB0A-869C-4CED-9BDA-F8E6317181D2" class="sect3"><span class="enumeration_section">6.5.2</span> Creating an HTML Input Form Based on the Columns in a Table</h3>
<div>
<div class="section">
<p>To generate an HTML form for inputting data that uses column names from a database table, you can use the XML SQL Utility (XSU) to get an XML document based on the <code>user_tab_columns</code> table and then use XSLT to transform the XML into an HTML form.</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Use XSU to generate an XML document based on the columns in the table. For example, using the table <code>hr.employees</code>, you can run XSU from the command line:</span>
<div>
<pre dir="ltr">java OracleXML getXML -user &#34;hr/<span class="italic">password</span>&#34;\
 &#34;SELECT column_name FROM user_tab_columns WHERE table_name = &#39;EMPLOYEES&#39;&#34;
</pre></div>
</li>
<li class="stepexpand"><span>Save the XSU output as an XML file called <code>emp_columns.xml</code>. The XML looks like this, with one <code>&lt;ROW&gt;</code> element corresponding to each column in the table (some <code>&lt;ROW&gt;</code> elements have been removed to conserve space):</span>
<div>
<pre dir="ltr">&lt;?xml version = &#39;1.0&#39;?&gt;&lt;ROWSET&gt;
   &lt;ROW num=&#34;1&#34;&gt;
      &lt;COLUMN_NAME&gt;EMPLOYEE_ID&lt;/COLUMN_NAME&gt;
   &lt;/ROW&gt;
   &lt;ROW num=&#34;2&#34;&gt;
      &lt;COLUMN_NAME&gt;FIRST_NAME&lt;/COLUMN_NAME&gt;
   &lt;/ROW&gt;
   &lt;!-- rows 3 through 10 --&gt;
   &lt;ROW num=&#34;11&#34;&gt;
      &lt;COLUMN_NAME&gt;DEPARTMENT_ID&lt;/COLUMN_NAME&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre></div>
</li>
<li class="stepexpand"><span>Create a style sheet to transform the XML into HTML. For example, create the <code>columns.xsl</code> style sheet:</span>
<div>
<pre dir="ltr">&lt;xsl:stylesheet version=&#34;1.0&#34; xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;&gt;
  &lt;xsl:output method=&#34;html&#34;/&gt;
  &lt;xsl:template match=&#34;/&#34;&gt;
    &lt;HTML&gt;
      &lt;xsl:apply-templates select=&#34;@*|node()&#34;/&gt;
    &lt;/HTML&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match=&#34;ROW&#34;&gt;
    &lt;xsl:value-of select=&#34;COLUMN_NAME&#34;/&gt;
    &lt;xsl:text&gt;&amp;nbsp;&lt;/xsl:text&gt;
    &lt;INPUT NAME=&#34;{COLUMN_NAME}&#34;/&gt;
    &lt;BR/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
</li>
<li class="stepexpand"><span>Run the <code>oraxsl</code> utility to generate the HTML form. For example:</span>
<div>
<pre dir="ltr">oraxsl emp_columns.xml columns.xsl emp_form.htm
</pre></div>
</li>
<li class="stepexpand"><span>Review the output HTML form, which has contents similar to these:</span>
<div>
<pre dir="ltr">&lt;HTML&gt;
   EMPLOYEE_ID&amp;nbsp;&lt;INPUT NAME=&#34;EMPLOYEE_ID&#34;&gt;&lt;BR&gt;
   FIRST_NAME&amp;nbsp;&lt;INPUT NAME=&#34;FIRST_NAME&#34;&gt;&lt;BR&gt;
   LAST_NAME&amp;nbsp;&lt;INPUT NAME=&#34;LAST_NAME&#34;&gt;&lt;BR&gt;
   EMAIL&amp;nbsp;&lt;INPUT NAME=&#34;EMAIL&#34;&gt;&lt;BR&gt;
   PHONE_NUMBER&amp;nbsp;&lt;INPUT NAME=&#34;PHONE_NUMBER&#34;&gt;&lt;BR&gt;
   HIRE_DATE&amp;nbsp;&lt;INPUT NAME=&#34;HIRE_DATE&#34;&gt;&lt;BR&gt;
   JOB_ID&amp;nbsp;&lt;INPUT NAME=&#34;JOB_ID&#34;&gt;&lt;BR&gt;
   SALARY&amp;nbsp;&lt;INPUT NAME=&#34;SALARY&#34;&gt;&lt;BR&gt;
   COMMISSION_PCT&amp;nbsp;&lt;INPUT NAME=&#34;COMMISSION_PCT&#34;&gt;&lt;BR&gt;
   MANAGER_ID&amp;nbsp;&lt;INPUT NAME=&#34;MANAGER_ID&#34;&gt;&lt;BR&gt;
   DEPARTMENT_ID&amp;nbsp;&lt;INPUT NAME=&#34;DEPARTMENT_ID&#34;&gt;&lt;BR&gt;
&lt;/HTML&gt;
</pre></div>
</li>
</ol>
<div class="section">
<p>&nbsp;</p>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_xmlbin.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_xqj.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>