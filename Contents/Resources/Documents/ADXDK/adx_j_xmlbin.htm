<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1664"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Binary%20XML%20with%20Java"></a><title>Using Binary XML with Java</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="binary XML, Java, storage format, models for using, terminology, encoding, encoding binary XML, decoding, decoding binary XML, vocabulary management, using Java, binary XML encoder, binary XML decoder"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_parser.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_xslt.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-38D2C558-108C-449A-A9CD-BC2DAD163D5C"></a> <span id="PAGE" style="display:none;">13/50</span> <!-- End Header -->
<a id="ADXDK985"></a><a id="ADXDK4440"></a>
<h1 id="ADXDK-GUID-38D2C558-108C-449A-A9CD-BC2DAD163D5C" class="sect1"><span class="enumeration_chapter">5</span> Using Binary XML with Java</h1>
<div>
<p>This chapter explains how to use Binary Extensible Markup Language (Binary XML) with Java.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xmlbin.htm#GUID-AE28E8A2-6782-4517-A8F3-9937198DE3CA">Introduction to Binary XML for Java</a></p>
</li>
<li>
<p><a href="adx_j_xmlbin.htm#GUID-346318B9-78D9-4B61-AE84-1EB09FA47B8C">Models for Using Binary XML</a></p>
</li>
<li>
<p><a href="adx_j_xmlbin.htm#GUID-A7BD5ED7-A114-4066-A2FF-DE400F37E6D5">Components of Binary XML for Java</a></p>
</li>
<li>
<p><a href="adx_j_xmlbin.htm#GUID-4B039190-876F-4A6A-8562-7E73AF36F40F">Binary XML Vocabulary Management</a></p>
</li>
<li>
<p><a href="adx_j_xmlbin.htm#GUID-AE12DDC0-142D-4742-8BE8-0F5557781F4F">Using Java Binary XML Package</a></p>
</li>
</ul>
</div>
<a id="ADXDK19188"></a>
<div class="props_rev_3"><a id="GUID-AE28E8A2-6782-4517-A8F3-9937198DE3CA"></a>
<h2 id="ADXDK-GUID-AE28E8A2-6782-4517-A8F3-9937198DE3CA" class="sect2"><span class="enumeration_section">5.1</span> Introduction to Binary XML for Java</h2>
<div>
<p>Binary XML was introduced in Oracle 11<span class="italic">g</span> Release 1 (11.1). Binary XML makes it possible to encode and decode between XML text and compressed binary XML. For efficiency, the Document Object Model (DOM) and Simple API for XML (SAX). Application programming interfaces (APIs) are provided on top of Binary XML for direct consumption by the XML applications. Compression and decompression of fragments of an XML document facilitate incremental processing.</p>
<p>This chapter assumes that you are familiar with the XML Parser for Java.</p>
<div class="infoboxnotealso" id="GUID-AE28E8A2-6782-4517-A8F3-9937198DE3CA__GUID-C85F94A8-205F-4114-929A-254B84CE1803">
<p class="notep1">See Also:</p>
<p><a href="adx_j_parser.htm#GUID-33E0EA2B-A08A-462E-86B4-3F944409663D">XML Parsing for Java</a></p>
</div>
</div>
<a id="ADXDK19189"></a>
<div class="props_rev_3"><a id="GUID-5D946D12-1531-453E-BFD0-4B25320D9DF2"></a>
<h3 id="ADXDK-GUID-5D946D12-1531-453E-BFD0-4B25320D9DF2" class="sect3"><span class="enumeration_section">5.1.1</span> Binary XML Storage Format</h3>
<div>
<p>An <code>XMLType</code> storage option is provided to enable storing XML documents in the binary format. This storage option is in addition to the existing character large object (<code>CLOB</code>) and object-relational storage options. <code>XMLType</code> tables and columns can be created using the binary XML storage option. The XML data in binary format can be accessed and manipulated by all the existing structured query language (SQL) operators and functions and Procedural Language/Structured Query Language (PL/SQL) APIs that operate on <code>XMLType</code>.</p>
<p>Binary XML is a compact XML-schema-aware encoding of XML data, but it can be used with XML data that is not based on an XML schema. You can also use binary XML for XML data which is outside the database (in a client-side application, for instance). Binary XML allows for encoding and decoding of XML documents, from text to binary and binary to text. Binary XML is post-parse persistent XML with native database data types.</p>
<p>Binary XML provides more efficient database storage, updating, indexing, query performance, and fragment extraction than unstructured storage. It can store data and metadata together, or separately.</p>
<div class="infoboxnotealso" id="GUID-5D946D12-1531-453E-BFD0-4B25320D9DF2__GUID-5682634E-83BD-4A85-96F9-7523D386D909">
<p class="notep1">See Also:</p>
<p><a class="olink ADXDB0120" target="_blank" href="../ADXDB/xdb01int.htm#ADXDB0120"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for a discussion of all the storage models in Oracle XML DB.</p>
</div>
</div>
</div>
<a id="ADXDK19190"></a>
<div class="props_rev_3"><a id="GUID-AD4B1CA9-CAAD-4F86-89DD-A77B33AEDBB3"></a>
<h3 id="ADXDK-GUID-AD4B1CA9-CAAD-4F86-89DD-A77B33AEDBB3" class="sect3"><span class="enumeration_section">5.1.2</span> Binary XML Processors</h3>
<div>
<p>A <span class="italic">binary XML processor</span> is an abstract term for describing a component that processes and transforms binary XML format into text and XML text into binary XML format. It can also provide a cache for storing schemas. The base class for a binary XML processor is <code>BinXMLProcessor</code>. A binary XML processor can originate or receive network protocol requests.</p>
</div>
</div>
</div>
<a id="ADXDK19191"></a>
<div class="props_rev_3"><a id="GUID-346318B9-78D9-4B61-AE84-1EB09FA47B8C"></a>
<h2 id="ADXDK-GUID-346318B9-78D9-4B61-AE84-1EB09FA47B8C" class="sect2"><span class="enumeration_section">5.2</span> Models for Using Binary XML</h2>
<div>
<p>There are several models for using binary XML in applications. These subsections describe the terminology and the models for using binary XML.</p>
</div>
<a id="ADXDK19192"></a>
<div class="props_rev_3"><a id="GUID-DCAAAD9D-B314-4B47-AA1F-B9C26B548D3B"></a>
<h3 id="ADXDK-GUID-DCAAAD9D-B314-4B47-AA1F-B9C26B548D3B" class="sect3"><span class="enumeration_section">5.2.1</span> Usage Terminology for Binary XML</h3>
<div>
<p>These terms relate to binary XML usage:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">doc-id</span>: Each encoded XML document is identified by a unique doc-id. It is either a 16-byte Global User identifier (GUID) or an opaque sequence of bytes like a URL.</p>
</li>
<li>
<p><span class="italic">token table</span>: When a text XML document does not have a schema associated with it, then a token (or symbol) table is used to minimize space for repeated items.</p>
</li>
<li>
<p><span class="italic">vocabulary id</span>: Can be a schema-id or a namespace Universal Resource Identifier (URI) for a token table.</p>
</li>
<li>
<p><span class="italic">schema-id</span>: A unique opaque binary identifier for a schema scoped to the binary XML processor. The schema-id is unique for a binary XML processor and is identifiable only within the scope of that binary XML processor. The schema-id remains constant even when the schema is evolved. A schema-id represents the entire set of schema documents, including imported and included schemas.</p>
</li>
<li>
<p><span class="italic">schema version</span>: Every annotated schema has a version number associated with it. The version number is specified as part of the system level annotations. It is incremented by the binary XML processor when a schema is evolved (that is, a new version of the same schema is registered with the binary XML processor).</p>
</li>
<li>
<p><span class="italic">partial validity</span>: Binary XML stream encoding using schema implies at least partial validity with the schema. Partial validity implies no validation for unique keys, keyrefs, identifiers (IDs), or DTD attributes such as IDREF.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19193"></a>
<div class="props_rev_3"><a id="GUID-C6CAD115-2D13-40D8-A2C9-583D300B1172"></a>
<h3 id="ADXDK-GUID-C6CAD115-2D13-40D8-A2C9-583D300B1172" class="sect3"><span class="enumeration_section">5.2.2</span> Standalone Model</h3>
<div>
<p>This is the simplest usage scenario for binary XML. There is a single binary XML processor. The only repository available is the local in-memory vocabulary cache that is not persistent and is available only for the life of the binary XML processor. All schemas must be registered in advance with the binary XML Processor before the encoding, or can be registered automatically when the XML Processor sees the <code>xsi:SchemaLocation</code> tag. For decoding, the schema is already available in the vocabulary cache.</p>
<p>If the decoding occurs in a different binary XML processor, see the different Web Services models described here.</p>
</div>
</div>
<a id="ADXDK19194"></a>
<div class="props_rev_3"><a id="GUID-338EF075-9FC3-4FFA-A165-66839D894092"></a>
<h3 id="ADXDK-GUID-338EF075-9FC3-4FFA-A165-66839D894092" class="sect3"><span class="enumeration_section">5.2.3</span> Client/Server Model</h3>
<div>
<p>In this scenario, the binary XML processor is connected to a database using Java Database Connectivity (JDBC). It is assumed that the schema is registered with the database before encoding.</p>
<p>Here is an example of how to achieve that:</p>
<pre dir="ltr">BEGIN
   DBMS_XMLSCHEMA.registerSchema(
   SCHEMAURL =&gt; 
   &#39;http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd&#39;,
   SCHEMADOC =&gt; 
   bfilename(&#39;XMLDIR&#39;,&#39;purchaseOrder.xsd&#39;),
   CSID =&gt; nls_charset_id(&#39;AL32UTF8&#39;),
   GENTYPES =&gt; FALSE,
   OPTIONS =&gt; REGISTER_BINARYXML );
END;
/
</pre>
<p>Unless a separate connection is specified for data (using <code>associateDataConnection()</code>) it is assumed that all data and metadata is stored and retrieved using a single connection for encoding and decoding.</p>
</div>
</div>
<a id="ADXDK19195"></a>
<div class="props_rev_3"><a id="GUID-CB4F1034-DFF8-4F5B-83AC-EC0398FA82C7"></a>
<h3 id="ADXDK-GUID-CB4F1034-DFF8-4F5B-83AC-EC0398FA82C7" class="sect3"><span class="enumeration_section">5.2.4</span> Web Services Model with Repository</h3>
<div>
<p>In this scenario there are multiple clients, each running a binary XML processor. One client does the encoding and the other client does the decoding. There is a common repository (that is not necessarily a database) connected to all the clients for metadata storage. It can be a file system or some other repository. The first binary XML processor ensures that the schema is registered with the repository before performing the encoding, or the schema might be automatically registered using the <code>xsi:schemaLocation</code> tag at the time of encoding. The second binary XML processor is used for decoding, is not aware of the location of the schema, and fetches the schema from the repository.</p>
<p>If the first binary XML processor registers a schema and the second binary XML processor registersthe same schema in the repository, the binary XML processor does not compile the schema, but simply returns the <code>vocabulary-id</code> of the existing compiled schema in the local vocabulary cache.</p>
<p>The <code>BinXMLProcessor</code> is not threadsafe, so multiple threads or clients accessing the repository must implement their own thread safety scheme.</p>
</div>
</div>
<a id="ADXDK19196"></a>
<div class="props_rev_3"><a id="GUID-8462F9AB-ED74-4D79-A75A-2E7DA7081F4D"></a>
<h3 id="ADXDK-GUID-8462F9AB-ED74-4D79-A75A-2E7DA7081F4D" class="sect3"><span class="enumeration_section">5.2.5</span> Web Services Model Without Repository</h3>
<div>
<p>In this scenario, there are multiple clients, each running a binary XML processor. Encoding and decoding can happen on different clients. There is no common metadata repository. The encoder must ensure that the binary data passed to the next client is independent of schema: that is, has inline token definitions. This can be achieved by setting <code>schemaAware</code> = <code>false</code> and <code>inlineTokenDefs</code> = <code>true</code>, using the <code>setProperty()</code> method, during encoding. While decoding, there is no schema required.</p>
</div>
</div>
</div>
<a id="ADXDK19197"></a>
<div class="props_rev_3"><a id="GUID-A7BD5ED7-A114-4066-A2FF-DE400F37E6D5"></a>
<h2 id="ADXDK-GUID-A7BD5ED7-A114-4066-A2FF-DE400F37E6D5" class="sect2"><span class="enumeration_section">5.3</span> Components of Binary XML for Java</h2>
<div>
<p>The Java XML binary functionality has three components:</p>
<ul style="list-style-type: disc;">
<li>
<p>Binary XML encoding&mdash;The binary XML encoder converts XML 1.0 infoset to binary XML.</p>
</li>
<li>
<p>Binary XML decoding&mdash;The binary XML decoder converts binary XML to XML infoset.</p>
</li>
<li>
<p>Binary XML vocabulary management, which includes schema management and token management.</p>
</li>
</ul>
</div>
<a id="ADXDK19198"></a>
<div class="props_rev_3"><a id="GUID-D70995F6-C8A4-45E4-B6D1-D8258FBA37D2"></a>
<h3 id="ADXDK-GUID-D70995F6-C8A4-45E4-B6D1-D8258FBA37D2" class="sect3"><span class="enumeration_section">5.3.1</span> Binary XML Encoding</h3>
<div>
<p>The encoder is created from the <code>BinXMLStream</code>. It takes as input the XML text and outputs the encoded binary XML to the <code>BinXMLStream</code> it was created from. The encoder reads the XML text using streaming SAX. The encoding of the XML text is based on the results of the XML parsing.</p>
<p>Set the <code>schemaAware</code> flag on the encoder that specifies whether the encoding is schema-aware or schema-less.</p>
<p>For schema-aware encoding, the encoder determines whether the schema with the specified schema URL has been registered with the vocabulary manager. For a repository-based or a database-based processor, the encoder queries the repository or the database for the compiled schema based on the schema URL. If the schema is available in the database, it is fetched from the repository or database in the binary XML format and registered with the local vocabulary manager. The vocabulary is schema.</p>
<p>Also set a flag to indicate that the encoding produces a binary XML stream that is independent of a schema. In this case, the resulting binary XML stream contains all token definitions inline and is not dependent on schema or external token sets.</p>
<p>If the encoding is schema-aware, the encoder uses the data type information from the schema object for more efficient encoding of the SAX stream. There is a default encoding data type associated with each schema built-in data type. Binary XML stream encoding using a schema implies at least partial validity with the schema (For partial validity there is no validation for unique key, or keyref, or ID, or DTD attributes such as IDREF). If the data is known to be completely valid with a schema, the encoded binary XML stream stores this information.</p>
<div class="infoboxnotealso" id="GUID-D70995F6-C8A4-45E4-B6D1-D8258FBA37D2__GUID-EC94B7DB-F670-4389-948B-4D95D1B8C358">
<p class="notep1">See Also:</p>
<p><a class="olink ADXDB0600" target="_blank" href="../ADXDB/xdb05sto.htm#ADXDB0600"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for tables of the binary encoding data types and their mappings from XML schema data types</p>
</div>
<p>If there is no schema associated with the text XML, then integer token ids are generated for repeated items in the text XML. Creating a token table of token ids and token definitions is an important compression technique. The token definitions are stored as token tables in the vocabulary cache. If the property for inline token definitions is set, then the token definitions are present inline.</p>
<div class="infoboxnotealso" id="GUID-D70995F6-C8A4-45E4-B6D1-D8258FBA37D2__GUID-5D6715B1-8BEB-4334-9FF6-0FDF5154D885">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_xmlbin.htm#GUID-64183150-1F23-48A4-A1E8-81A0CD512429">Token Management</a>&#34;</span></p>
</div>
<p>Another property on the encoder is specifying PSVI (Post-Schema-Validated Infoset) information as part of the binary stream. If this is set to true then PSVI information can be accessed using XDK extension APIs for PSVI on DOM. If <code>psvi = true</code> then the input XML is fully validated with the schema. If <code>psvi</code> is <code>false</code> then PSVI information is not included in the output binary stream. The default is <code>false</code>.</p>
</div>
</div>
<a id="ADXDK19199"></a>
<div class="props_rev_3"><a id="GUID-0A974367-AA47-40B2-A558-625A6BF3CE11"></a>
<h3 id="ADXDK-GUID-0A974367-AA47-40B2-A558-625A6BF3CE11" class="sect3"><span class="enumeration_section">5.3.2</span> Binary XML Decoding</h3>
<div>
<p>The binary XML decoder converts binary XML to XML infoset. The decoder is created from the <code>BinXMLStream</code>; it reads binary XML from this stream and outputs SAX events or provide a pull style <code>InfosetReader</code> API for reading the decoded XML. If a schema is associated with the <code>BinXMLStream</code>, the binary XML decoder retrieves the associated schema object from the vocabulary cache using the vocabulary id before decoding. If the schema is not available in the vocabulary cache, and the connection information to the server is available, then the schema is fetched from the server.</p>
<p>If no schema is associated with <code>BinXMLStream</code>, then the token definitions can be either inline in the <code>BinXMLStream</code> or stored in a token set. If tokens of a corresponding namespace are not stored in the local vocabulary cache, then the token set is fetched from the repository.</p>
</div>
</div>
</div>
<a id="ADXDK19200"></a>
<div class="props_rev_3"><a id="GUID-4B039190-876F-4A6A-8562-7E73AF36F40F"></a>
<h2 id="ADXDK-GUID-4B039190-876F-4A6A-8562-7E73AF36F40F" class="sect2"><span class="enumeration_section">5.4</span> Binary XML Vocabulary Management</h2>
<div>
<p>The binary XML processors are of different types depending on where the metadata (schema or token sets) are located&mdash;either local binary XML processor or repository binary XML processor.</p>
</div>
<a id="ADXDK19201"></a>
<div class="props_rev_3"><a id="GUID-7AD473C7-8966-4C17-AF64-7865D70FC486"></a>
<h3 id="ADXDK-GUID-7AD473C7-8966-4C17-AF64-7865D70FC486" class="sect3"><span class="enumeration_section">5.4.1</span> Schema Management</h3>
<div>
<p>For metadata persistence, Oracle recommends that you use the DB Binary XML processor. In this case, schemas and token sets are registered with the database. The vocabulary manager fetches the schema or token sets from the database and cache it in the local vocabulary cache for encoding and decoding.</p>
<div class="infoboxnotealso" id="GUID-7AD473C7-8966-4C17-AF64-7865D70FC486__GUID-48391895-82A1-462C-AB83-044E45B9722E">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_xmlbin.htm#GUID-04F717C4-91CC-472B-99FB-38F133F80797">Binary XML</a>&#34;</span></p>
</div>
<p>If you must use a persistent metadata repository that is not a database, you can plug in your own metadata repository. You must implement the interface for communicating with this repository, <code>BinXMLMetadataProvider</code>.</p>
</div>
<a id="ADXDK19202"></a>
<div class="props_rev_3"><a id="GUID-7F2B4014-6718-47F1-989E-C5F1493B2B81"></a>
<h4 id="ADXDK-GUID-7F2B4014-6718-47F1-989E-C5F1493B2B81" class="sect4"><span class="enumeration_section">5.4.1.1</span> Schema Registration</h4>
<div>
<p>Register schemas locally with the local binary XML processor. The local binary XML processor contains a vocabulary manager that maintains all schemas submitted by the user for the duration of its existence. The vocabulary manager associated with a local binary XML processor does not provide for schema persistence.</p>
<p>If you register the same schema (same schema location and same target namespace) then the schema is not parsed, and the existing vocabulary identifier is returned. If a new schema with the same target namespace and a different schema location is registered, then the existing schema definition is augmented with the new schema definitions or causes conflict error.</p>
</div>
</div>
<a id="ADXDK19203"></a>
<div class="props_rev_3"><a id="GUID-AE236BD0-59D1-40C9-A1B3-A9C3EE0B5641"></a>
<h4 id="ADXDK-GUID-AE236BD0-59D1-40C9-A1B3-A9C3EE0B5641" class="sect4"><span class="enumeration_section">5.4.1.2</span> Schema Identification</h4>
<div>
<p>Each schema is identified by a vocabulary id. The vocabulary id is in the scope of the processor and is unique within the processor. Any document that validates with a schema is required to validate with a latest version of the schema.</p>
</div>
</div>
<a id="ADXDK19204"></a>
<div class="props_rev_3"><a id="GUID-2A575201-65AD-4DF9-B655-6A42BEF25610"></a>
<h4 id="ADXDK-GUID-2A575201-65AD-4DF9-B655-6A42BEF25610" class="sect4"><span class="enumeration_section">5.4.1.3</span> Schema Annotations</h4>
<div>
<p>Binary XML annotations can appear only within the <code>&lt;xsd:appInfo&gt;</code> element in a schema. There are two categories of schema annotations&mdash;User-level and System-level. The vocabulary manager interprets these at the time of schema registration. All other types of annotations (for example, database related annotations, is ignored).</p>
</div>
</div>
<a id="ADXDK19205"></a>
<div class="props_rev_3"><a id="GUID-40702A1D-8D84-4ACF-9872-338FF4FFC442"></a>
<h4 id="ADXDK-GUID-40702A1D-8D84-4ACF-9872-338FF4FFC442" class="sect4"><span class="enumeration_section">5.4.1.4</span> User-Level Annotations</h4>
<div>
<p>These annotations are specified by the user before registration.</p>
<p><code>encodingType</code>&mdash;This annotation can be used within a <code>xsd:element</code>, <code>xsd:attribute</code> or <code>xsd:simpleType</code> elements. It indicates the data type to be used for encoding the node value of the element or attribute. For strings, there is support only for 8-bit encoding of Unicode (UTF-8) encoding in this release.</p>
</div>
</div>
<a id="ADXDK19206"></a>
<div class="props_rev_3"><a id="GUID-EB8A2CDF-E1D0-4834-A43C-AC4EBCC0AD0E"></a>
<h4 id="ADXDK-GUID-EB8A2CDF-E1D0-4834-A43C-AC4EBCC0AD0E" class="sect4"><span class="enumeration_section">5.4.1.5</span> System-Level Annotations</h4>
<div>
<p>The vocabulary manager adds these at the time of registration; you cannot overwrite them.</p>
</div>
</div>
</div>
<a id="ADXDK19207"></a>
<div class="props_rev_3"><a id="GUID-64183150-1F23-48A4-A1E8-81A0CD512429"></a>
<h3 id="ADXDK-GUID-64183150-1F23-48A4-A1E8-81A0CD512429" class="sect3"><span class="enumeration_section">5.4.2</span> Token Management</h3>
<div>
<p>Token sets can be fetched from the database or metadata repository, cached in the local vocabulary manager and used for decoding. While encoding, token sets can be pushed to the repository for persistence.</p>
<p>Token definitions can also be included as part of the binary XML stream by setting a flag on the encoder.</p>
</div>
</div>
</div>
<a id="ADXDK19208"></a>
<div class="props_rev_3"><a id="GUID-AE12DDC0-142D-4742-8BE8-0F5557781F4F"></a>
<h2 id="ADXDK-GUID-AE12DDC0-142D-4742-8BE8-0F5557781F4F" class="sect2"><span class="enumeration_section">5.5</span> Using Java Binary XML Package</h2>
<div>
<div class="section">
<p>A <code>BinXMLStream</code> class represents the binary XML stream. The different storage locations defined for the binary XML stream are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>InputStream</code>&mdash;stream for reading.</p>
</li>
<li>
<p><code>OutputStream</code>&mdash;stream for writing.</p>
</li>
<li>
<p><code>URL</code>&mdash;stream for reading.</p>
</li>
<li>
<p><code>File</code>&mdash;stream for read and write.</p>
</li>
<li>
<p><code>BLOB</code>&mdash;stream for reading and writing.</p>
</li>
<li>
<p>Byte array&mdash;stream for reading and writing.</p>
</li>
<li>
<p>In memory&mdash;stream for reading and writing.</p>
</li>
</ul>
<p>The <code>BinXMLStream</code> object specifies the type of storage during creation.</p>
<p>A <code>BinXMLStream</code> object can be created from a <code>BinXMLProcessor</code> factory. This factory can be initialized with a JDBC connection (for remote metadata access), connection pool, URL or a <code>PageManagerPool</code> (for lazy in-memory storage). <code>BinXMLEncoder</code> and <code>BinXMLDecoder</code> can be created from the <code>BinXMLStream</code> for encoding or decoding.</p>
<p>Here is an example of creating a processor without a repository, registering a schema, encoding XML SAX events into schema-aware binary format, and storing in a file:</p>
<pre dir="ltr">BinXMLProcessor  proc = BinXMLProcessorFactory.createProcessor();
proc.registerSchema(schemaURL);
BinXMLStream outbin = proc.createBinaryStream(outFile);
BinXMLEncoder enc = outbin.getEncoder();
enc.setSchemaAware(true);
ContentHandler hdlr = enc.getContentHandler();
</pre>
<p>In addition to getting the <code>ContentHandler</code>, you can also get the other handlers, such as:</p>
<pre dir="ltr">LexicalHandler lexhdlr = enc.getLexicalHandler();
DTDHandler dtdhdlr = encenc.getDTDHandler();
DeclHandler declhdlr = enc.getDeclHandler();
ErrorHandler errhdlr = enc.getErrorHandler();
</pre>
<p>Use <code>hdlr</code> in the application that generates the SAX events.</p>
<p>2. Here is an example of creating a processor with a database repository, decoding a schema-aware binary stream and reading the decoded XML using pull API. The schema is fetched from the database repository for decoding.</p>
<pre dir="ltr">DBBinXMLMetadataProvider dbrep = 
     BinXMLMetadataProviderFactory.createDBMetadataProvider();
BinXMLProcessor proc = BinXMLProcessorFactory.createProcessor(dbrep);
BinXMLStream inpbin = proc.createBinaryStream(blob);
BinXMLDecoder dec = inpbin.getDecoder();
InfosetReader xmlreader = dec.getReader();
</pre>
<p>Use <code>xmlreader</code> to read XML in a pull-style from the decoder.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19209"></a>
<div class="props_rev_3"><a id="GUID-E442D9A0-CB3A-4CFF-8A39-B7A2F673C3E2"></a>
<h3 id="ADXDK-GUID-E442D9A0-CB3A-4CFF-8A39-B7A2F673C3E2" class="sect3"><span class="enumeration_section">5.5.1</span> Binary XML Encoder</h3>
<div>
<p>The encoder takes XML input, which is parsed and read using SAX events, and outputs binary XML.</p>
</div>
<a id="ADXDK19210"></a>
<div class="props_rev_3"><a id="GUID-A06592C1-D899-479A-ABF6-4759C88478AD"></a>
<h4 id="ADXDK-GUID-A06592C1-D899-479A-ABF6-4759C88478AD" class="sect4"><span class="enumeration_section">5.5.1.1</span> Schema-Less Option</h4>
<div>
<p>You can specify the schema-aware or the schema-less option before encoding. The default is schema-less encoding. If the schema-aware option is set, then the encoding is done based on schema(s) specified in the instance document. The annotated schema(s) used for encoding is also required at the time of decoding. If the schema-less option is specified, then the encoding is independent of schema(s), but the tokens are inline by default. To override the default, set <code>Inline-token = false.</code></p>
</div>
</div>
<a id="ADXDK19212"></a><a id="ADXDK19211"></a>
<div class="props_rev_3"><a id="GUID-66597AC6-1E3A-435E-AFE9-29CCD2458C71"></a>
<h4 id="ADXDK-GUID-66597AC6-1E3A-435E-AFE9-29CCD2458C71" class="sect4"><span class="enumeration_section">5.5.1.2</span> Inline-Token Option</h4>
<div>
<p>You can set an option to create a binary XML stream with inline token definitions before encoding. If &#34;inlining&#34; is turned off, than you must ensure that the processors for the encoder or decoder are using the same metadata repository. The flag <code>Inline-token</code> is ignored if the schema-aware option is true. By default, the token definitions is inline.</p>
<div class="figure" id="GUID-66597AC6-1E3A-435E-AFE9-29CCD2458C71__GUID-0473E5AF-D727-4FDB-B634-E653BABF6C8A">
<p class="titleinfigure">Figure 5-1 Binary XML Encoding</p>
<img width="405" height="240" src="img/GUID-57584A19-5178-48A8-98AE-C5CCF50A7A85-default.gif" alt="Description of Figure 5-1 follows" title="Description of Figure 5-1 follows"/><br/>
<a href="img_text/GUID-57584A19-5178-48A8-98AE-C5CCF50A7A85-print.htm">Description of &#34;Figure 5-1 Binary XML Encoding&#34;</a></div>
<!-- class="figure" --></div>
</div>
</div>
<a id="ADXDK19214"></a><a id="ADXDK19213"></a>
<div class="props_rev_3"><a id="GUID-F090EAE2-F039-4787-B91E-D9047AF88270"></a>
<h3 id="ADXDK-GUID-F090EAE2-F039-4787-B91E-D9047AF88270" class="sect3"><span class="enumeration_section">5.5.2</span> Binary XML Decoder</h3>
<div>
<p>The binary XML decoder takes binary XML stream as input and generates SAX Events as output, or provides a pull interface to read the decoded XML. For a schema-aware binary XML stream, the binary XML decoder interacts with the vocabulary manager to extract the schema information.</p>
<p>If the vocabulary manager does not contain the required schema, and the processor is of type binary XML with a valid JDBC connection, then the remote schema is fetched from the database or the metadata repository based on the vocabulary id in the binary XML stream to be decoded. Similarly, the set of token definitions can be fetched from the database or the metadata repository.</p>
<div class="figure" id="GUID-F090EAE2-F039-4787-B91E-D9047AF88270__GUID-912C510F-EECF-4294-86E4-7C4F8FCD2DA6">
<p class="titleinfigure">Figure 5-2 Binary XML Decoder</p>
<img width="375" height="240" src="img/GUID-63C3EC2A-C1CD-4ABA-98B5-77E4514EF2BF-default.gif" alt="Description of Figure 5-2 follows" title="Description of Figure 5-2 follows"/><br/>
<a href="img_text/GUID-63C3EC2A-C1CD-4ABA-98B5-77E4514EF2BF-print.htm">Description of &#34;Figure 5-2 Binary XML Decoder&#34;</a></div>
<!-- class="figure" --></div>
</div>
<a id="ADXDK19215"></a>
<div class="props_rev_3"><a id="GUID-04807B10-06DE-42E6-933B-68F2BB738E2A"></a>
<h3 id="ADXDK-GUID-04807B10-06DE-42E6-933B-68F2BB738E2A" class="sect3"><span class="enumeration_section">5.5.3</span> Schema Registration</h3>
<div>
<p>Here is the flow of this process: If the vocabulary is an XML schema; it takes the XML schema text as input. The schema annotator annotates the schema text with system level annotations. The schema might already have some user level annotations.</p>
<p>The resulting annotated schema is processed by the Schema Builder to build an XML schema object. This XML schema object is stored in the vocabulary cache. The vocabulary cache assigns a unique vocabulary id for each XML schema object, which is returned as output. The annotated DOM representation of the schema is sent to the binary XML encoder.</p>
</div>
</div>
<a id="ADXDK19216"></a>
<div class="props_rev_3"><a id="GUID-E5DBDA35-6C90-4FED-BF1E-5CEF2D6428BF"></a>
<h3 id="ADXDK-GUID-E5DBDA35-6C90-4FED-BF1E-5CEF2D6428BF" class="sect3"><span class="enumeration_section">5.5.4</span> Resolving xsi:schemaLocation</h3>
<div>
<p>During encoding, if <code>schemaAware</code> is true and the property <code>ImplcitSchemaRegistration</code> is <code>true</code>, then the first <code>xsi:schemaLocation</code> tag present in the root element of an XML instance document automatically registers that schema in the local vocabulary manager. All other <code>schemaLocation</code> tags are not explicitly registered. If the processor is database-oriented, then the schema is also registered in the database; similarly for any metadata repository based processor.</p>
<p>If the encoding is set to <code>schemaAware</code> is <code>false</code> or <code>ImplcitSchemaRegistration</code> is <code>false</code>, then all <code>xsi:schemaLocation</code> tags are ignored by the encoder.</p>
</div>
</div>
<a id="ADXDK19217"></a>
<div class="props_rev_3"><a id="GUID-04F717C4-91CC-472B-99FB-38F133F80797"></a>
<h3 id="ADXDK-GUID-04F717C4-91CC-472B-99FB-38F133F80797" class="sect3"><span class="enumeration_section">5.5.5</span> Binary XML</h3>
<div>
<p>A <code>DBBinXMLMetadataProvider</code> object is either instantiated with a dedicated JDBC connection or a connection pool to access vocabulary information such as schema and token set. The processor is also associated with one or more data connections to access XML data.</p>
<p>A binary XML processor can communicate with the database for various types of binary XML operations involving storage and retrieval of binary XML schemas, token sets, and binary XML streams. Database communication is involved in these ways:</p>
<ol>
<li>
<p>Extracting compiled binary XML schema using the vocabulary ID or the schema URL</p>
<p>To retrieve a compiled binary XML schema for encoding, the database is queried based on the schema URL. For decoding the binary XML schema, fetch it from the database based on the vocabulary ID.</p>
</li>
<li>
<p>Storing noncompiled binary XML schema using the schema URL and retrieving the vocabulary id.</p>
<p>When the <code>xsi:schemaLocation</code> tag is encountered during encoding, the schema is registered in the database for persistent storage in the database. The vocabulary id associated with the schema, and the binary version of the compiled schema is retrieved from the database; the compiled schema object is built and stored in the local cache using the vocabulary id returned from the database.</p>
</li>
<li>
<p>Retrieving a binary token set using namespace URL.</p>
<p>If a binary stream to be decoded is associated with token tables for decoding, these are fetched from the database using the metadata connection.</p>
</li>
<li>
<p>Storing binary token set using namespace URL</p>
<p>If the XML text has been encoded without a schema, then it produces a token set of token definitions. These token tables can be stored persistently in the database. The metadata connection is used for transferring the token set to the database.</p>
</li>
<li>
<p>Binary XML stream with remote storage option</p>
<p>It is your responsibility to create a table containing an <code>XMLType</code> column with binary XML for storing the result of encoding and retrieving the binary XML for decoding. Communication with the database can be achieved with Oracle Net Services and JDBC. Fetch the <code>XMLType</code> object from the output result set of the JDBC query. The <code>BinXMLStream</code> for reading the binary data or for writing out binary data can be created from the <code>XMLType</code> object. The <code>XMLType</code> class must be extended to support reading and writing of binary XML data.</p>
</li>
</ol>
</div>
</div>
<a id="ADXDK19218"></a>
<div class="props_rev_3"><a id="GUID-8ED117C9-5082-4C23-AF00-7F0AB6C951ED"></a>
<h3 id="ADXDK-GUID-8ED117C9-5082-4C23-AF00-7F0AB6C951ED" class="sect3"><span class="enumeration_section">5.5.6</span> Persistent Storage of Metadata</h3>
<div>
<p>A local vocabulary manager and cache stores metadata information in the memory for the life of the <code>BinXMLProcessor</code>. Plug in your own back-end storage for metadata by implementing the <code>BinXMLMetadataProvider</code> interface and plugging it into the <code>BinXMLProcessor</code>. Currently only one metadata provider for each processor is supported.</p>
<p>You must code a <code>FileBinXMLMetadataProvider</code> that implements the <code>BinXMLMetadataProvider</code> interface. The encoder and decoder uses these APIs to access metadata from the persisted back-end storage. Set up the configuration information for the persistent storage: for example, root directory for a file system in <code>FileBinXMLMetadataProvider</code> class. Instantiate <code>FileBinXMLMetadataProvider</code> and plug it into the <code>BinXMLProcessor</code>.</p>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_parser.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_xslt.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>