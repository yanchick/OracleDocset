<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1658"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20JAXB%20Class%20Generator"></a><title>Using the JAXB Class Generator</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="JAXB, marshalling and unmarshalling, validating, compared with JAXP, JAXP, compared with JAXB, what is, XML Schema, processor for Java, how to run the sample program, oraxml, command-line interface, XML parser, oraxml command-line interface, features not supported"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_sproc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_pipeline.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-97D4F251-F7C3-49A1-B478-3387BC3D3C15"></a> <span id="PAGE" style="display:none;">18/50</span> <!-- End Header -->
<a id="ADXDK997"></a><a id="ADXDK6000"></a>
<h1 id="ADXDK-GUID-97D4F251-F7C3-49A1-B478-3387BC3D3C15" class="sect1"><span class="enumeration_chapter">10</span> Using the JAXB Class Generator</h1>
<div>
<p>This chapter explains how to use the Java Architecture for XML Binding (<a href="glossary.htm#GUID-BA133AF6-E300-4073-BF41-63E85E296731"><span class="xrefglossterm">JAXB</span></a>) class generator.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_jaxb.htm#GUID-26B7DCCE-8447-4D51-8E80-90B691346F17">Introduction to the JAXB Class Generator</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-B1E3950B-1EB3-4175-AE95-66D462C9BE5E">Using the JAXB Class Generator: Overview</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-C465678A-AAA4-42EA-ACAB-DC2D294607CF">Processing XML with the JAXB Class Generator</a></p>
</li>
</ul>
<div class="infobox-note" id="GUID-97D4F251-F7C3-49A1-B478-3387BC3D3C15__GUID-AF000931-D7E5-4436-A8A9-26FA5649095A">
<p class="notep1">Note:</p>
<p>Use the Java Architecture for XML Binding (JAXB) class generator for new applications to take advantage of the object binding feature for Extensible Markup Language (XML) data. The Oracle9<span class="italic">i</span> class generator for Java is deprecated. Oracle Database&nbsp;10<span class="italic">g</span> supports the Oracle9<span class="italic">i</span> class generator for backward compatibility.</p>
</div>
</div>
<a id="ADXDK998"></a><a id="ADXDK19289"></a>
<div class="props_rev_3"><a id="GUID-26B7DCCE-8447-4D51-8E80-90B691346F17"></a>
<h2 id="ADXDK-GUID-26B7DCCE-8447-4D51-8E80-90B691346F17" class="sect2"><span class="enumeration_section">10.1</span> Introduction to the JAXB Class Generator</h2>
<div>
<p>This section introduces JAXB.</p>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_jaxb.htm#GUID-A292C49D-68F6-42ED-9C7A-460347C87252">Prerequisites</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-48F3F639-194F-4EB4-81D5-7C4EC1C7D718">Standards and Specifications</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-97DB0107-C5ED-493B-B23D-7782AB1A6285">Marshalling and Unmarshalling with JAXB</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-9141E178-83A7-4352-9179-9BE635B759FD">Validation with JAXB</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-0EC35F1E-AA6F-4937-A232-5835F50BD2C7">JAXB Customization</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19290"></a>
<div class="props_rev_3"><a id="GUID-A292C49D-68F6-42ED-9C7A-460347C87252"></a>
<h3 id="ADXDK-GUID-A292C49D-68F6-42ED-9C7A-460347C87252" class="sect3"><span class="enumeration_section">10.1.1</span> Prerequisites</h3>
<div>
<p>This chapter assumes that you have some familiarity with these topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="glossary.htm#GUID-9A300561-B381-40D5-824C-153427438F3D"><span class="xrefglossterm">Java Architecture for XML Binding (JAXB)</span></a>. For a more thorough introduction to JAXB than is possible in this chapter, consult the XML resources listed in <span class="q">&#34;<a href="preface.htm#GUID-2CD1F6B6-C8EC-42E3-97F2-589AABF9AFFB">Related Documents</a>.&#34;</span></p>
</li>
<li>
<p><a href="glossary.htm#GUID-B1E6F2C9-39D7-42D5-817B-6210231ABF97"><span class="xrefglossterm">XML Schema language</span></a>. See <a href="adx_j_sproc.htm#GUID-F41C7DA2-A3DF-463B-A08C-24E8F0621450">Using the XML Schema Processor for Java</a> for an overview and links to suggested reading.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19291"></a>
<div class="props_rev_3"><a id="GUID-48F3F639-194F-4EB4-81D5-7C4EC1C7D718"></a>
<h3 id="ADXDK-GUID-48F3F639-194F-4EB4-81D5-7C4EC1C7D718" class="sect3"><span class="enumeration_section">10.1.2</span> Standards and Specifications</h3>
<div>
<p>The Oracle JAXB processor implements JSR-31 &#34;The Java Architecture for XML Binding (JAXB)&#34;, Version 1.0, which is a recommendation of the JCP (Java Community Process).</p>
<p>The Oracle XML Developer&#39;s Kit (XDK) implementation of the JAXB 1.0 specification does not support these optional features:</p>
<ul style="list-style-type: disc;">
<li>
<p>Javadoc generation</p>
</li>
<li>
<p>Fail Fast validation</p>
</li>
<li>
<p>External customization file</p>
</li>
<li>
<p>XML Schema concepts described in section E.2 of the specification</p>
</li>
</ul>
<p><a href="glossary.htm#GUID-9D3D661C-C601-480F-BBE9-4D12D7853BB9"><span class="xrefglossterm">JSR</span></a> is a Java Specification Request of the Java Community Process (JCP). You can find a description of the JSR here:</p>
<pre dir="ltr"><a href="http://jcp.org/en/jsr/overview" target="_blank">http://jcp.org/en/jsr/overview</a>
</pre>
<div class="infoboxnotealso" id="GUID-48F3F639-194F-4EB4-81D5-7C4EC1C7D718__GUID-F78CB9FA-C141-4A36-9B13-0017765F405B">
<p class="notep1">See Also:</p>
<p><a href="adx_ref_standards.htm#GUID-795A483B-12AC-4F6D-A606-6BE9DA963F0F">Oracle XML Developer&#39;s Kit Standards</a> for a summary of the standards supported by XDK</p>
</div>
</div>
</div>
<a id="ADXDK19292"></a>
<div class="props_rev_3"><a id="GUID-CCB5205D-73E6-4ABA-86BD-C815900DAB90"></a>
<h3 id="ADXDK-GUID-CCB5205D-73E6-4ABA-86BD-C815900DAB90" class="sect3"><span class="enumeration_section">10.1.3</span> JAXB Class Generator Features</h3>
<div>
<p>The JAXB class generator for Java generates the interfaces and the implementation classes corresponding to an XML Schema. Its principal advantage to Java developers is automation of the mapping between XML documents and Java code, which enables programs to use generated code to read, manipulate, and re-create XML data. The Java classes, which can be extended, give the developer access to the XML data without knowledge of the underlying XML data structure.</p>
<p>In short, the Oracle JAXB class generator provides these advantages for XML application development in Java:</p>
<ul style="list-style-type: disc;">
<li>
<p>Speed</p>
<p>Because the schema-to-code conversion is automated, you can rapidly generate Java code from an input XML schema.</p>
</li>
<li>
<p>Ease of use</p>
<p>You can invoke generated <code>get</code> and <code>set</code> methods rather than code your own from the start.</p>
</li>
<li>
<p>Automated data conversion</p>
<p>You can automate the conversion of XML document data into Java data types.</p>
</li>
<li>
<p>Customization</p>
<p>JAXB provides a flexible framework that enables you to customize the binding of XML elements and attributes.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19293"></a>
<div class="props_rev_3"><a id="GUID-97DB0107-C5ED-493B-B23D-7782AB1A6285"></a>
<h3 id="ADXDK-GUID-97DB0107-C5ED-493B-B23D-7782AB1A6285" class="sect3"><span class="enumeration_section">10.1.4</span> Marshalling and Unmarshalling with JAXB</h3>
<div>
<div class="section">
<p>JAXB is an application programming interface (API) and set of tools that maps XML data to Java objects. JAXB simplifies access to an XML document from a Java program by presenting the XML document to the program in a Java format.</p>
<p>You can use the JAXB API and tools to perform these basic tasks:</p>
<ol>
<li>
<p>Generate and compile JAXB classes from an XML schema with the <code>orajaxb</code> command-line utility.</p>
<p>To use the JAXB class generator to generate Java classes you must provide it with an XML schema. Document type definitions (DTDs) are not supported by JAXB. As explained in <span class="q">&#34;<a href="adx_j_sproc.htm#GUID-BC0B8A74-265E-4EBF-B012-923DA614F744">Converting DTDs to XML Schemas</a>,&#34;</span> however, you can use the <code>DTD2Schema</code> program to convert a DTD to an XML schema. Afterwards, you can use the JAXB class generator to generate classes from the schema.</p>
<p>The JAXB compiler generates Java classes that map to constraints in the source XML schema. The classes implements <code>get</code> and <code>set</code> methods that you can use to get and specify data for each type of element and attribute in the schema.</p>
</li>
<li>
<p>Process XML documents by instantiating the generated classes in a Java program.</p>
<p>Specifically, you can write a program that uses the JAXB binding framework to perform these tasks:</p>
<ol>
<li>
<p>Unmarshal the XML documents.</p>
<p>As explained in the JAXB specification, <a href="glossary.htm#GUID-491F320E-279A-42F5-B34B-4B8D75749DAB"><span class="xrefglossterm">unmarshalling</span></a> is defined as moving data from an XML document to the Java-generated objects.</p>
</li>
<li>
<p>Validate the XML documents.</p>
<p>You can validate before or during the unmarshalling of the contents into the content tree. You can also validate on demand by invoking the validation API on the Java object. See <span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-9141E178-83A7-4352-9179-9BE635B759FD">Validation with JAXB</a>.&#34;</span></p>
</li>
<li>
<p>Modify Java content objects.</p>
<p>The content tree of data objects represents the structure and content of the source XML documents. You can use the <code>set</code> methods defined for a class to modify the content of elements and attributes.</p>
</li>
<li>
<p>Marshal Java content objects back to XML.</p>
<p>In contrast to unmarshalling, <a href="glossary.htm#GUID-F136597D-93E1-46D6-9903-E5DF66129BCD"><span class="xrefglossterm">marshalling</span></a> is creating an XML document from Java objects by traversing a content tree of instances of Java classes. You can serialize the data to a Document Object Model (DOM) tree, Simple API for XML (SAX) content handler, transformation result, or output stream.</p>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19294"></a>
<div class="props_rev_3"><a id="GUID-9141E178-83A7-4352-9179-9BE635B759FD"></a>
<h3 id="ADXDK-GUID-9141E178-83A7-4352-9179-9BE635B759FD" class="sect3"><span class="enumeration_section">10.1.5</span> Validation with JAXB</h3>
<div>
<p>A Java content tree is considered valid with an XML schema when marshalling the tree generates a valid XML document.</p>
<p>JAXB applications can perform validation in these circumstances:</p>
<ul style="list-style-type: disc;">
<li>
<p>Unmarshalling-time validation that notifies the application of errors and warnings during unmarshalling. If unmarshalling includes validation that is error-free, then the input XML document and the Java content tree are valid.</p>
</li>
<li>
<p>On-demand validation of a Java content tree initiated by the application.</p>
</li>
<li>
<p>Fail-fast validation that gives immediate results while updating the Java content tree with <code>set</code> and <code>get</code> methods. As specified in <span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-48F3F639-194F-4EB4-81D5-7C4EC1C7D718">Standards and Specifications</a>,&#34;</span> fail-fast validation is an optional feature in the JAXB 1.0 specification that is not supported in the XDK implementation of the JAXB class generator.</p>
</li>
</ul>
<p>JAXB applications must be able to marshal a valid Java content tree, but they are not required to ensure that the Java content tree is valid before invoking a marshalling API. The marshalling process does not itself validate the content tree. Programs are required to throw a <code>javax/xml/bind/MarshalException</code> when marshalling fails due to invalid content.</p>
</div>
</div>
<a id="ADXDK19295"></a>
<div class="props_rev_3"><a id="GUID-0EC35F1E-AA6F-4937-A232-5835F50BD2C7"></a>
<h3 id="ADXDK-GUID-0EC35F1E-AA6F-4937-A232-5835F50BD2C7" class="sect3"><span class="enumeration_section">10.1.6</span> JAXB Customization</h3>
<div>
<p>The declared element and type names in an XML schema do not always provide the most useful Java class names. You can override the default JAXB bindings by using custom binding declarations, which are described in the JAXB specification. These declarations enable you to customize your generated JAXB classes beyond the XML-specific constraints in an XML schema to include Java-specific refinements such as class and package name mappings.</p>
<p>You can annotate the schema to perform these customizations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Bind XML names to user-defined Java class names</p>
</li>
<li>
<p>Name the package, derived classes, and methods</p>
</li>
<li>
<p>Choose which elements to bind to which classes</p>
</li>
<li>
<p>Decide how to bind each attribute and element declaration to a property in the appropriate content class</p>
</li>
<li>
<p>Choose the type of each attribute-value or content specification</p>
</li>
</ul>
<p>Several of the demos programs listed in <a href="adx_j_jaxb.htm#GUID-D5654A94-6253-4988-807A-9BBD6ADCDD52__CHDGCFDC" title="Lists the JAXB sample applications">Table 10-2</a> show JAXB customizations.</p>
<div class="infoboxnotealso" id="GUID-0EC35F1E-AA6F-4937-A232-5835F50BD2C7__GUID-F9C23ABA-7EDB-4F2A-BBE3-1CB8E6E6F4D1">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-C54597F9-B701-4D56-8254-1F6F3268F533">Customizing a Class Name in a Top-Level Element</a>&#34;</span> for a detailed explanation of a customization demo</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADXDK999"></a><a id="ADXDK19296"></a>
<div class="props_rev_3"><a id="GUID-B1E3950B-1EB3-4175-AE95-66D462C9BE5E"></a>
<h2 id="ADXDK-GUID-B1E3950B-1EB3-4175-AE95-66D462C9BE5E" class="sect2"><span class="enumeration_section">10.2</span> Using the JAXB Class Generator: Overview</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_jaxb.htm#GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7">Using the JAXB Processor: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-D5654A94-6253-4988-807A-9BBD6ADCDD52">Running the XML Schema Processor Demo Programs</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-1EBF886C-9940-4379-9143-C515F350F7E0">Using the JAXB Class Generator Command-Line Utility</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19298"></a><a id="ADXDK19299"></a><a id="ADXDK19297"></a>
<div class="props_rev_3"><a id="GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7"></a>
<h3 id="ADXDK-GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7" class="sect3"><span class="enumeration_section">10.2.1</span> Using the JAXB Processor: Basic Process</h3>
<div>
<div class="section">
<p>The XDK JAXB API exposes these packages:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>javax.xml.bind</code>, which provides a runtime binding framework for client applications including unmarshalling, marshalling, and validation</p>
</li>
<li>
<p><code>javax.xml.bind.util</code>, which provides useful client utility classes</p>
</li>
</ul>
<p>The most important classes and interfaces in the <code>javax.xml.bind</code> package are described in <a href="adx_j_jaxb.htm#GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7__BABHGDEA" title="This table describes the JAXB classes and interfaces available in the XDK Java API.">Table 10-1</a>. These form the core of most JAXB applications.</p>
<div class="tblformalwide" id="GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7__BABHGDEA">
<p class="titleintable">Table 10-1 javax.xml.bind Classes and Interfaces</p>
<table class="cellalignment655" title="javax.xml.bind Classes and Interfaces" summary="This table describes the JAXB classes and interfaces available in the XDK Java API.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment673" id="d50987e1146">Class/Interface</th>
<th class="cellalignment674" id="d50987e1149">Description</th>
<th class="cellalignment658" id="d50987e1152">Methods</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment675" id="d50987e1157" headers="d50987e1146">
<p><code>JAXBContext</code> class</p>
</td>
<td class="cellalignment676" headers="d50987e1157 d50987e1149">
<p>Provides an abstraction for managing the XML/Java binding information necessary to implement the JAXB binding framework operations: unmarshal, marshal, and validate. A client application gets new instances of this class by invoking the <code>newInstance()</code> method.</p>
</td>
<td class="cellalignment660" headers="d50987e1157 d50987e1152">
<p>The principal methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>newInstance()</code> creates a JAXB content class. Supply this method the name of the package containing the generated classes.</p>
</li>
<li>
<p><code>createMarshaller()</code> creates a marshaller that you can use to convert a content tree to XML.</p>
</li>
<li>
<p><code>createUnmarshaller()</code> creates an unmarshaller that you can use to convert XML to a content tree.</p>
</li>
<li>
<p><code>createValidator()</code> creates a <code>Validator</code> object that can validate a java content tree against its source schema.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d50987e1196" headers="d50987e1146">
<p><code>Marshaller</code> interface</p>
</td>
<td class="cellalignment676" headers="d50987e1196 d50987e1149">
<p>Governs the process of serializing Java content trees into XML data.</p>
</td>
<td class="cellalignment660" headers="d50987e1196 d50987e1152">
<p>The principal methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>getEventHandler()</code> returns the current or default event handler.</p>
</li>
<li>
<p><code>getProperty()</code> gets the property in the underlying implementation of marshaller.</p>
</li>
<li>
<p><code>marshal()</code> marshals the content tree into a DOM, SAX2 events, output stream, transformation result, or <code>Writer</code>.</p>
</li>
<li>
<p><code>setEventHandler()</code> creates a <code>Validator</code> object that validates a java content tree against its source schema.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d50987e1235" headers="d50987e1146">
<p><code>Unmarshaller</code> interface</p>
</td>
<td class="cellalignment676" headers="d50987e1235 d50987e1149">
<p>Governs the process of deserializing XML data into newly created Java content trees, optionally validating the XML data as it is unmarshalled.</p>
</td>
<td class="cellalignment660" headers="d50987e1235 d50987e1152">
<p>The principal methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>getEventHandler()</code> returns the current or default event handler.</p>
</li>
<li>
<p><code>getUnmarshallerHandler()</code> returns an unmarshaller handler object usable as a component in an XML pipeline.</p>
</li>
<li>
<p><code>isValidating()</code> indicates whether the unmarshaller is set to validate mode.</p>
</li>
<li>
<p><code>setEventHandler()</code> allows an application to register a <code>ValidationEventHandler</code>.</p>
</li>
<li>
<p><code>setValidating()</code> specifies whether the unmarshaller validates during unmarshal operations.</p>
</li>
<li>
<p><code>marshal()</code> unmarshals XML data from the specified file, URL, input stream, input source, SAX, or DOM.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d50987e1281" headers="d50987e1146">
<p><code>Validator</code> interface</p>
</td>
<td class="cellalignment676" headers="d50987e1281 d50987e1149">
<p>Controls the validation of content trees during run time. Specifically, this interface controls on-demand validation, which enables clients to receive data about validation errors and warnings detected in the Java content tree.</p>
</td>
<td class="cellalignment660" headers="d50987e1281 d50987e1152">
<p>The principal methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>getEventHandler()</code> returns the current or default event handler.</p>
</li>
<li>
<p><code>setEventHandler()</code> allows an application to register a <code>ValidationEventHandler</code>.</p>
</li>
<li>
<p><code>validate()</code> validates Java content trees on-demand at run time. This method can validate any arbitrary subtree of the Java content tree.</p>
</li>
<li>
<p><code>validateRoot()</code> validates the Java content tree rooted at <code>rootObj</code>. You can use this method to validate an entire Java content tree.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_jaxb.htm#GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7__CHDBCBHJ">Figure 10-1</a> depicts the process flow of a framework that uses the JAXB class generator.</p>
<div class="figure" id="GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7__CHDBCBHJ">
<p class="titleinfigure">Figure 10-1 JAXB Class Generator for Java</p>
<img width="549" height="233" src="img/GUID-9A6293B8-7E03-41F5-A99E-FCF592B4EB38-default.gif" alt="Description of Figure 10-1 follows" title="Description of Figure 10-1 follows"/><br/>
<a href="img_text/GUID-9A6293B8-7E03-41F5-A99E-FCF592B4EB38-print.htm">Description of &#34;Figure 10-1 JAXB Class Generator for Java&#34;</a></div>
<!-- class="figure" -->
<p>The basic stages of the process shown in <a href="adx_j_jaxb.htm#GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7__CHDBCBHJ">Figure 10-1</a> are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>The XML parser parses the XML schema and sends the parsed data to the JAXB class generator.</span></li>
<li class="stepexpand"><span>The class generator creates Java classes and interfaces based on the input XML schema.</span>
<div>
<p>By default, one XML element or type declaration generates one interface and one class. For example, if the schema defines an element named <code>&lt;anElement&gt;</code>, then by default the JAXB class generator generates a source file named <code>AnElement.java</code> and another named <code>AnElementImpl.java</code>. You can use customize binding declarations to override the default binding of XML Schema components to Java representations.</p>
</div>
</li>
<li class="stepexpand"><span>The Java compiler compiles the <code>.java</code> source files into class files. All of the generated classes, source files, and application code must be compiled.</span></li>
<li class="stepexpand"><span>Your Java application uses the compiled classes and the binding framework to perform these types of tasks:</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>Create a JAXB context. You use this context to create the marshaller and unmarshaller.</p>
</li>
<li>
<p>Build object trees representing XML data that is valid against the XML schema. You can perform this task by either unmarshalling the data from an XML document that conforms to the schema or instantiating the classes.</p>
</li>
<li>
<p>Access and modify the data.</p>
</li>
<li>
<p>Optionally validate the modifications to the data relative to the constraints expressed in the XML schema.</p>
</li>
<li>
<p>Marshal the data to new XML documents.</p>
</li>
</ul>
</div>
</li>
</ol>
<div class="section">
<div class="infoboxnotealso" id="GUID-35B362B4-772E-44E7-80A2-E7F9A7443BC7__GUID-851098C1-C0B3-4E0A-97FF-5D6B312D0597">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> for details of the JAXB API</p>
</li>
<li>
<p><span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-C465678A-AAA4-42EA-ACAB-DC2D294607CF">Processing XML with the JAXB Class Generator</a>&#34;</span> for detailed explanations of JAXB processing</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19301"></a><a id="ADXDK19300"></a>
<div class="props_rev_3"><a id="GUID-D5654A94-6253-4988-807A-9BBD6ADCDD52"></a>
<h3 id="ADXDK-GUID-D5654A94-6253-4988-807A-9BBD6ADCDD52" class="sect3"><span class="enumeration_section">10.2.2</span> Running the XML Schema Processor Demo Programs</h3>
<div>
<div class="section">
<p>Demo programs for the JAXB class generator for Java are included in <code>$ORACLE_HOME/xdk/demo/java/jaxb</code>. Specifically, XDK includes the JAXB demos listed in <a href="adx_j_jaxb.htm#GUID-D5654A94-6253-4988-807A-9BBD6ADCDD52__CHDGCFDC" title="Lists the JAXB sample applications">Table 10-2</a>.</p>
<div class="tblformalwide" id="GUID-D5654A94-6253-4988-807A-9BBD6ADCDD52__CHDGCFDC">
<p class="titleintable">Table 10-2 JAXB Class Generator Demos</p>
<table class="cellalignment655" title="JAXB Class Generator Demos" summary="Lists the JAXB sample applications">
<thead>
<tr class="cellalignment644">
<th class="cellalignment677" id="d50987e1500">Program</th>
<th class="cellalignment678" id="d50987e1503">Subdirectory within Oracle Home</th>
<th class="cellalignment659" id="d50987e1506">Demonstrates . . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1511" headers="d50987e1500">
<p><code>SampleApp1.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1511 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample1</code></p>
</td>
<td class="cellalignment661" headers="d50987e1511 d50987e1506">
<p>The binding of top-level element and <code>complexType</code> definitions in the <code>sample1.xsd</code> schema to Java classes.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1529" headers="d50987e1500">
<p><code>SampleApp2.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1529 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample2</code></p>
</td>
<td class="cellalignment661" headers="d50987e1529 d50987e1506">
<p>The binding of a top-level element with an inline <code>simpleType</code> definition in the <code>sample2.xsd</code> schema.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1547" headers="d50987e1500">
<p><code>SampleApp3.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1547 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample3</code></p>
</td>
<td class="cellalignment661" headers="d50987e1547 d50987e1506">
<p>The binding of a top-level <code>complexType</code> element that is derived by extension from another top-level <code>complexType</code> definition. See <span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-DEB32387-4956-4DDB-89C1-0ED9487EE65B">Binding Complex Types</a>&#34;</span> for a detailed explanation of this program.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1570" headers="d50987e1500">
<p><code>SampleApp4.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1570 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample4</code></p>
</td>
<td class="cellalignment661" headers="d50987e1570 d50987e1506">
<p>The binding of a content model within a <code>complexType</code> that refers to a top-level named group.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1585" headers="d50987e1500">
<p><code>SampleApp5.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1585 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample5</code></p>
</td>
<td class="cellalignment661" headers="d50987e1585 d50987e1506">
<p>The binding of <code>&lt;choice&gt;</code> with <code>maxOccurs</code> unbounded within a <code>complexType</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1606" headers="d50987e1500">
<p><code>SampleApp6.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1606 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample6</code></p>
</td>
<td class="cellalignment661" headers="d50987e1606 d50987e1506">
<p>The binding of atomic data types.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1618" headers="d50987e1500">
<p><code>SampleApp7.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1618 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample7</code></p>
</td>
<td class="cellalignment661" headers="d50987e1618 d50987e1506">
<p>The binding a <code>complexType</code> definition in which <code>mixed=&#34;true&#34;</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1636" headers="d50987e1500">
<p><code>SampleApp8.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1636 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample8</code></p>
</td>
<td class="cellalignment661" headers="d50987e1636 d50987e1506">
<p>The binding of elements and types declared in two different namespaces.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1648" headers="d50987e1500">
<p><code>SampleApp9.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1648 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample9</code></p>
</td>
<td class="cellalignment661" headers="d50987e1648 d50987e1506">
<p>The customization of a Java package name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1660" headers="d50987e1500">
<p><code>SampleApp10.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1660 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample10</code></p>
</td>
<td class="cellalignment661" headers="d50987e1660 d50987e1506">
<p>The customization of class name in a top-level element. See <span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-C54597F9-B701-4D56-8254-1F6F3268F533">Customizing a Class Name in a Top-Level Element</a>&#34;</span> for a detailed explanation of this program.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1677" headers="d50987e1500">
<p><code>SampleApp11.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1677 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample11</code></p>
</td>
<td class="cellalignment661" headers="d50987e1677 d50987e1506">
<p>The customization of class name of a local element occurring in a repeating model group declared inside a <code>complexType</code> element.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1693" headers="d50987e1500">
<p><code>SampleApp12.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1693 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample12</code></p>
</td>
<td class="cellalignment661" headers="d50987e1693 d50987e1506">
<p>The customization of the attribute name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1705" headers="d50987e1500">
<p><code>SampleApp13.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1705 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample13</code></p>
</td>
<td class="cellalignment661" headers="d50987e1705 d50987e1506">
<p>The <code>javaType</code> customization specified on a global <code>simpleType</code>. The <code>javaType</code> customization specifies the parse and print method declared on a user-defined class.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment679" id="d50987e1726" headers="d50987e1500">
<p><code>SampleApp14.java</code></p>
</td>
<td class="cellalignment680" headers="d50987e1726 d50987e1503">
<p><code>/xdk/demo/java/jaxb/Sample14</code></p>
</td>
<td class="cellalignment661" headers="d50987e1726 d50987e1506">
<p>The customization of the typesafe enum class name.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>You can find documentation that describes how to compile and run the sample programs in the <code>README</code> in the same directory. The basic steps are:</p>
<ol>
<li>
<p>Change into the <code>$ORACLE_HOME/xdk/demo/java/jaxb</code> directory (UNIX) or <code>%ORACLE_HOME%\xdk\demo\java\jaxb</code> directory (Windows).</p>
</li>
<li>
<p>Make sure that your environment variables are set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span></p>
</li>
<li>
<p>Run <code>make</code> (UNIX) or <code>Make.bat</code> (Windows) at the system prompt. The <code>make</code> utility performs these sequential actions for each sample subdirectory:</p>
<ol>
<li>
<p>Runs the <code>orajaxb</code> utility to generate Java class files based on an input XML schema. For most of the demos, the output classfiles are written to the <code>generated</code> subdirectory. For example, the <code>make</code> file performs these commands for the <code>sample1.xsd</code> schema in the <code>Sample1</code> subdirectory:</p>
<pre dir="ltr">cd ./Sample1; $(JAVA_HOME)/bin/java -classpath &#34;$(MAKE_CLASSPATH)&#34; \
oracle.xml.jaxb.orajaxb -schema sample1.xsd -targetPkg generated; echo;
</pre></li>
<li>
<p>Runs the <code>javac</code> utility to compile the Java classes. For example, the <code>make</code> utility performs these commands for the Java class files in the <code>Sample1/generated/</code> subdirectory:</p>
<pre dir="ltr">cd ./Sample1/generated; $(JAVA_HOME)/bin/javac -classpath \
&#34;$(MAKE_CLASSPATH)&#34; *.java
</pre></li>
<li>
<p>Runs the <code>javac</code> utility to compile a sample Java application that uses the classes compiled in the preceding step. For example, the <code>make</code> utility compiles the <code>SampleApp1.java</code> program:</p>
<pre dir="ltr">cd ./Sample1; $(JAVA_HOME)/bin/javac -classpath &#34;$(MAKE_CLASSPATH)&#34; \
SampleApp1.java
</pre></li>
<li>
<p>Runs the sample Java application and writes the results to a log file. For example, the <code>make</code> utility executes the <code>SampleApp1</code> class and writes the output to <code>sample1.out</code>:</p>
<pre dir="ltr">cd ./Sample1; $(JAVA_HOME)/bin/java -classpath &#34;$(MAKE_CLASSPATH)&#34; \SampleApp1 &gt; sample1.out
</pre></li>
</ol>
</li>
</ol>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19303"></a><a id="ADXDK19302"></a>
<div class="props_rev_3"><a id="GUID-1EBF886C-9940-4379-9143-C515F350F7E0"></a>
<h3 id="ADXDK-GUID-1EBF886C-9940-4379-9143-C515F350F7E0" class="sect3"><span class="enumeration_section">10.2.3</span> Using the JAXB Class Generator Command-Line Utility</h3>
<div>
<p>XDK includes <code>orajaxb</code>, which is a command-line Java interface that generates Java classes from input XML schemas. The <code>$ORACLE_HOME/bin/orajaxb</code> and <code>%ORACLE_HOME%\bin\orajaxb.bat</code> shell scripts execute the <code>oracle.xml.jaxb.orajaxb</code> class. To use <code>orajaxb</code> ensure that your <code>CLASSPATH</code> is set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span></p>
<p><a href="adx_j_jaxb.htm#GUID-1EBF886C-9940-4379-9143-C515F350F7E0__CHDFABII" title="Option and Purpose are the columns.">Table 10-3</a> lists the <code>orajaxb</code> command-line options.</p>
<div class="tblformal" id="GUID-1EBF886C-9940-4379-9143-C515F350F7E0__CHDFABII">
<p class="titleintable">Table 10-3 orajaxb Command-Line Options</p>
<table class="cellalignment650" title="orajaxb Command-Line Options " summary="Option and Purpose are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d50987e1970">Option</th>
<th class="cellalignment682" id="d50987e1973">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e1978" headers="d50987e1970">
<p>-<code>help</code></p>
</td>
<td class="cellalignment684" headers="d50987e1978 d50987e1973">
<p>Prints the help message.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e1987" headers="d50987e1970">
<p>-<code>version</code></p>
</td>
<td class="cellalignment684" headers="d50987e1987 d50987e1973">
<p>Prints the release version.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e1996" headers="d50987e1970">
<p>-<code>outputdir</code> <span class="italic"><code>OutputDir</code></span></p>
</td>
<td class="cellalignment684" headers="d50987e1996 d50987e1973">
<p>Specifies the directory in which to generate the Java source files. If the schema has a namespace, then the program generates the java code in the package (corresponding to the namespace) referenced from the outputDir. By default, the current directory is the <span class="italic"><code>outputDir</code></span>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e2013" headers="d50987e1970">
<p>-<code>schema</code> <span class="italic"><code>SchemaFile</code></span></p>
</td>
<td class="cellalignment684" headers="d50987e2013 d50987e1973">
<p>Specifies the input XML schema.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e2026" headers="d50987e1970">
<p>-<code>targetPkg</code> <span class="italic"><code>targetPkg</code></span></p>
</td>
<td class="cellalignment684" headers="d50987e2026 d50987e1973">
<p>Specifies the target package name. This option overrides any binding customization for package name, and also the default package name algorithm defined in the JAXB specification.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e2039" headers="d50987e1970">
<p>-<code>interface</code></p>
</td>
<td class="cellalignment684" headers="d50987e2039 d50987e1973">
<p>Generates only the interfaces.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e2048" headers="d50987e1970">
<p>-<code>verbose</code></p>
</td>
<td class="cellalignment684" headers="d50987e2048 d50987e1973">
<p>Lists the generated classes and interfaces.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e2057" headers="d50987e1970">
<p>-<code>defaultCus</code> <span class="italic"><code>fileName</code></span></p>
</td>
<td class="cellalignment684" headers="d50987e2057 d50987e1973">
<p>Generates the default customization file.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d50987e2070" headers="d50987e1970">
<p>-<code>extension</code></p>
</td>
<td class="cellalignment684" headers="d50987e2070 d50987e1973">
<p>Allows vendor specific extensions and does not strictly follow the compatibility rules specified in Appendix E.2 of the JAXB 1.0 specification. When specified, the program ignores JAXB 1.0 unsupported features such as notations, substitution groups, and any attributes.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<a id="ADXDK19304"></a>
<div class="props_rev_3"><a id="GUID-B9EBD0CA-2F11-4D71-9E94-7FD68BDD451F"></a>
<h4 id="ADXDK-GUID-B9EBD0CA-2F11-4D71-9E94-7FD68BDD451F" class="sect4"><span class="enumeration_section">10.2.3.1</span> Using the JAXB Class Generator Command-Line Utility: Example</h4>
<div>
<div class="section">
<p>To test <code>orjaxb</code>, change into the <code>$ORACLE_HOME/xdk/demo/java/jaxb/Sample1</code> directory. If you have run <code>make</code>, the directory contains these files:</p>
<pre dir="ltr">SampleApp1.class
SampleApp1.java
generated/
sample1.out
sample1.xml
sample1.xsd
</pre>
<p>The <code>sample.xsd</code> file is the XML schema associated with <code>sample1.xml</code>. The <code>generated/</code> subdirectory contains the classes generated from the input schema. You can test <code>orajaxb</code> by deleting the contents of <code>generated/</code> and regenerating the classes:</p>
<pre dir="ltr">rm generated/* 
orajaxb -schema sample1.xsd -targetPkg generated -verbose
</pre>
<p>The terminal displays this output:</p>
<pre dir="ltr">generated/CType.java
generated/AComplexType.java
generated/AnElement.java
generated/RElemOfCTypeInSameNs.java
generated/RType.java
generated/RElemOfSTypeInSameNs.java

generated/CTypeImpl.java
generated/AComplexTypeImpl.java
generated/AnElementImpl.java
generated/RElemOfCTypeInSameNsImpl.java
generated/RTypeImpl.java
generated/RElemOfSTypeInSameNsImpl.java
generated/ObjectFactory.java
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19305"></a>
<div class="props_rev_3"><a id="GUID-2A8D5A7F-DF15-4355-8A9A-F985DE89D395"></a>
<h3 id="ADXDK-GUID-2A8D5A7F-DF15-4355-8A9A-F985DE89D395" class="sect3"><span class="enumeration_section">10.2.4</span> JAXB Features Not Supported in XDK</h3>
<div>
<p>The XDK implementation of the JAXB specification does not support these features:</p>
<ul style="list-style-type: disc;">
<li>
<p>Javadoc generation</p>
</li>
<li>
<p>XML Schema component &#34;any&#34; and substitution groups</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-2A8D5A7F-DF15-4355-8A9A-F985DE89D395__GUID-6745EF13-2DB3-44C5-9FD5-534BE9090D55">
<p class="notep1">See Also:</p>
<p><a href="http://jcp.org/aboutJava/communityprocess/final/jsr031/index.html" target="_blank"><code>http://jcp.org/aboutJava/communityprocess/final/jsr031/index.html</code></a> for the JAXB specification</p>
</div>
</div>
</div>
</div>
<a id="ADXDK1000"></a><a id="ADXDK19306"></a>
<div class="props_rev_3"><a id="GUID-C465678A-AAA4-42EA-ACAB-DC2D294607CF"></a>
<h2 id="ADXDK-GUID-C465678A-AAA4-42EA-ACAB-DC2D294607CF" class="sect2"><span class="enumeration_section">10.3</span> Processing XML with the JAXB Class Generator</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_jaxb.htm#GUID-DEB32387-4956-4DDB-89C1-0ED9487EE65B">Binding Complex Types</a></p>
</li>
<li>
<p><a href="adx_j_jaxb.htm#GUID-C54597F9-B701-4D56-8254-1F6F3268F533">Customizing a Class Name in a Top-Level Element</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19307"></a>
<div class="props_rev_3"><a id="GUID-DEB32387-4956-4DDB-89C1-0ED9487EE65B"></a>
<h3 id="ADXDK-GUID-DEB32387-4956-4DDB-89C1-0ED9487EE65B" class="sect3"><span class="enumeration_section">10.3.1</span> Binding Complex Types</h3>
<div>
<div class="section">
<p>The <code>Sample3.java</code> program shows how to bind a complex type definition to a Java content interface. One complex type defined in the XML schema is derived by extension from another complex type.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19309"></a><a id="ADXDK19310"></a><a id="ADXDK19308"></a>
<div class="props_rev_3"><a id="GUID-80E81154-740C-4AAD-A33A-BAEBB1821D05"></a>
<h4 id="ADXDK-GUID-80E81154-740C-4AAD-A33A-BAEBB1821D05" class="sect4"><span class="enumeration_section">10.3.1.1</span> Defining the Schema</h4>
<div>
<div class="section">
<p><a href="adx_j_jaxb.htm#GUID-80E81154-740C-4AAD-A33A-BAEBB1821D05__CHDHFAIA">Example 10-1</a> shows the XML data document that provides the input to the sample application. The <code>sample3.xml</code> document describes the address of an employee.</p>
<p>The XML schema shown in <a href="adx_j_jaxb.htm#GUID-80E81154-740C-4AAD-A33A-BAEBB1821D05__CHDFGBAC">Example 10-2</a> defines the structure that you use to validate <code>sample3.xml</code>. The schema defines two complex types and one element, which are defined:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The first complex type, which is named <code>Address</code>, is a sequence of elements. Each element in the sequence describes one part of the address: name, door number, and so forth.</p>
</li>
<li>
<p>The second complex type, which is named <code>USAddress</code>, uses the <code>&lt;extension base=&#34;exp:Address&#34;&gt;</code> element to extend <code>Address</code> by adding US-specific elements to the <code>Address</code> sequence: state, zip, and so forth. The <code>exp</code> prefix specifies the <code>http://www.oracle.com/sample3/</code> namespace.</p>
</li>
<li>
<p>The element is named <code>myAddress</code> and is of type <code>exp:USAddress</code>. The <code>exp</code> prefix specifies the <code>http://www.oracle.com/sample3/</code> namespace. In <code>sample3.xml</code>, the <code>myAddress</code> top-level element, which is in namespace <code>http://www.oracle.com/sample3/</code>, conforms to the schema definition.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-80E81154-740C-4AAD-A33A-BAEBB1821D05__CHDHFAIA">
<p class="titleinexample">Example 10-1 sample3.xml</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;myAddress xmlns = &#34;http://www.oracle.com/sample3/&#34;
           xmlns:xsi = &#34;http://www.w3.org/2001/XMLSchema-instance&#34;
           xsi:schemaLocation = &#34;http://www.oracle.com/sample3 sample3.xsd&#34;&gt;
    &lt;name&gt;James Bond&lt;/name&gt;
    &lt;doorNumber&gt;420&lt;/doorNumber&gt;
    &lt;street&gt;Oracle parkway&lt;/street&gt;
    &lt;city&gt;Redwood shores&lt;/city&gt;
    &lt;state&gt;CA&lt;/state&gt;
    &lt;zip&gt;94065&lt;/zip&gt;
    &lt;country&gt;United States&lt;/country&gt;
&lt;/myAddress&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-80E81154-740C-4AAD-A33A-BAEBB1821D05__CHDFGBAC">
<p class="titleinexample">Example 10-2 sample3.xsd</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
 
&lt;!-- Binding a complex type definition to java content interface
 The complex type definition is derived by extension
--&gt;
 
&lt;schema xmlns = &#34;http://www.w3.org/2001/XMLSchema&#34;
        xmlns:exp=&#34;http://www.oracle.com/sample3/&#34;
        targetNamespace=&#34;http://www.oracle.com/sample3/&#34;
        elementFormDefault=&#34;qualified&#34;&gt;
 
   &lt;complexType name=&#34;Address&#34;&gt;
      &lt;sequence&gt;
         &lt;element name=&#34;name&#34; type=&#34;string&#34;/&gt;
         &lt;element name=&#34;doorNumber&#34; type=&#34;short&#34;/&gt;
         &lt;element name=&#34;street&#34; type=&#34;string&#34;/&gt;
         &lt;element name=&#34;city&#34; type=&#34;string&#34;/&gt;
      &lt;/sequence&gt;
   &lt;/complexType&gt;
 
  &lt;complexType name=&#34;USAddress&#34;&gt;
    &lt;complexContent&gt;
     &lt;extension base=&#34;exp:Address&#34;&gt;
       &lt;sequence&gt;
          &lt;element name=&#34;state&#34; type=&#34;string&#34;/&gt;
          &lt;element name=&#34;zip&#34; type=&#34;integer&#34;/&gt;
          &lt;element name=&#34;country&#34; type=&#34;string&#34;/&gt;
       &lt;/sequence&gt;
     &lt;/extension&gt;
    &lt;/complexContent&gt;
  &lt;/complexType&gt;
 
  &lt;element name=&#34;myAddress&#34; type=&#34;exp:USAddress&#34;/&gt;
 
&lt;/schema&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19312"></a><a id="ADXDK19311"></a>
<div class="props_rev_3"><a id="GUID-4856DA6D-E775-4296-8563-C8A09E04D88D"></a>
<h4 id="ADXDK-GUID-4856DA6D-E775-4296-8563-C8A09E04D88D" class="sect4"><span class="enumeration_section">10.3.1.2</span> Generating and Compiling the Java Classes</h4>
<div>
<div class="section">
<p>If you have an XML document and corresponding XML schema, then the next stage of processing is to generate the Java classes from the XML schema. You can use the JAXB command-line interface described in <span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-1EBF886C-9940-4379-9143-C515F350F7E0">Using the JAXB Class Generator Command-Line Utility</a>&#34;</span> to perform this task.</p>
<p>Assuming that your environment is set up as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>,&#34;</span> you can create the source files in the <code>generated</code> package:</p>
<pre dir="ltr">cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample3
orajaxb -schema sample1.xsd -targetPkg generated
</pre>
<p>The preceding <code>orajaxb</code> command creates these source files in the <code>./generated/</code> subdirectory:</p>
<pre dir="ltr">Address.java
AddressImpl.java
MyAddress.java
MyAddressImpl.java
ObjectFactory.java
USAddress.java
USAddressImpl.java
</pre>
<p>The complex types <code>Address</code> and <code>USAddress</code> each has two associated source files, as does the element <code>MyAddress</code>. The source file named after the element contains the interface; the file with the suffix <code>Impl</code> contains the class that implements the interface. For example, <code>Address.java</code> contains the interface <code>Address</code>, whereas <code>AddressImpl.java</code> contains the class that implements <code>Address</code>.</p>
<p>The content of the <code>Address.java</code> source file is shown in <a href="adx_j_jaxb.htm#GUID-4856DA6D-E775-4296-8563-C8A09E04D88D__CHDEAHGH">Example 10-3</a>.</p>
<p>The <code>Address</code> complex type defined a sequence of elements: <code>name</code>, <code>doorNumber</code>, <code>street</code>, and <code>city</code>. Consequently, the <code>Address</code> interface includes a <code>get</code> and <code>set</code> method signature for each of the four elements. For example, the interface includes <code>getName()</code> for retrieving data in the <code>&lt;name&gt;</code> element and <code>setName()</code> for modifying data in this element.</p>
<p>You can compile the Java source files with <code>javac</code>:</p>
<pre dir="ltr">cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample3/generated
javac *.java
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-4856DA6D-E775-4296-8563-C8A09E04D88D__CHDEAHGH">
<p class="titleinexample">Example 10-3 Address.java</p>
<pre dir="ltr">package generated; 
public interface Address
{
   public void setName(java.lang.String n);
   public java.lang.String getName(); 
   public void setDoorNumber(short d);
   public short getDoorNumber(); 
   public void setStreet(java.lang.String s);
   public java.lang.String getStreet(); 
   public void setCity(java.lang.String c);
   public java.lang.String getCity(); 
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19313"></a>
<div class="props_rev_3"><a id="GUID-A736D441-BA33-4B06-A5B8-D9ECC5C5A06A"></a>
<h4 id="ADXDK-GUID-A736D441-BA33-4B06-A5B8-D9ECC5C5A06A" class="sect4"><span class="enumeration_section">10.3.1.3</span> Processing the XML Data</h4>
<div>
<div class="section">
<p><code>Sample3.java</code> shows how you can process the <code>sample3.xml</code> document by using the Java class files that you generated in <span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-4856DA6D-E775-4296-8563-C8A09E04D88D">Generating and Compiling the Java Classes</a>.&#34;</span> The sample program unmarshals the XML data document, marshals it, and uses the generated classes to print and modify the address data.</p>
<p>The <code>Sample3.java</code> program processes the data as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create strings for the XML data document file name and the name of the directory that contains the generated classes. This name is the package name. For example:</span>
<div>
<pre dir="ltr">String fileName = &#34;sample3.xml&#34;;
String instancePath = &#34;generated&#34;;
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate a JAXB context by invoking <code>JAXBContext.newInstance()</code>. A client application gets a new instance of this class by initializing it with a context path. The path contains a list of Java package names that contain the interfaces available to the marshaller. Thisthese statement shows this technique:</span>
<div>
<pre dir="ltr">JAXBContext jc = JAXBContext.newInstance(instancePath);
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate the unmarshaller. The <code>Unmarshaller</code> class governs the process of deserializing XML data into newly created objects, optionally validating the XML data as it is unmarshalled. Thisthese statement shows this technique:</span>
<div>
<pre dir="ltr">Unmarshaller u = jc.createUnmarshaller();
</pre></div>
</li>
<li class="stepexpand"><span>Unmarshal the XML document. Invoke the <code>Unmarshaller.unmarshal()</code> method to deserialize the <code>sample3.xml</code> document and return the content trees as an <code>Object</code>. You can create a URL from the XML file name by invoking the <code>fileToUrl()</code> helper method. Thisthese statement shows this technique:</span>
<div>
<pre dir="ltr">Object obj = u.unmarshal(fileToURL(fileName));
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate a marshaller. The <code>Marshaller</code> class governs the process of serializing Java content trees back into XML data. Thisthese statement shows this technique:</span>
<div>
<pre dir="ltr">Marshaller m = jc.createMarshaller();
</pre></div>
</li>
<li class="stepexpand"><span>Marshal the content tree. Invoke the <code>Marshaller.marshal()</code> method to marshal the content tree <code>Object</code> returned by the unmarshaller. You can serialize the data to a DOM tree, SAX content handler, transformation result, or output stream. This statement serializes the XML data, including markup, as an output stream:</span>
<div>
<pre dir="ltr">m.marshal(obj, System.out);
</pre>
<p>By default, the marshaller uses 8-bit encoding of Unicode (UTF-8) encoding when writing XML data to an output stream.</p>
</div>
</li>
<li class="stepexpand"><span>Print the contents of the XML document. The program implements a <code>process()</code> method that accepts the content tree and marshaller as parameters.</span>
<div>
<p>The first stage of processing prints the data in the XML document without the XML markup. The method casts the <code>Object</code> generated by the marshaller into type <code>MyAddress</code>. It proceeds to invoke a series of methods whose method names are constructed by prefixing <code>get</code> to the name of an XML element. For example, to get the data in the <code>&lt;city&gt;</code> element in <a href="adx_j_jaxb.htm#GUID-80E81154-740C-4AAD-A33A-BAEBB1821D05__CHDHFAIA">Example 10-1</a>, the program invokes <code>getCity()</code>. This code fragment shows this technique:</p>
<pre dir="ltr">public static void process(Object obj, Marshaller m) throws Throwable
{
   generated.MyAddress elem = (generated.MyAddress)obj;
   System.out.println();
   System.out.println(&#34; My address is: &#34;);
   System.out.println(&#34;  name:  &#34;  + elem.getName() + &#34;\n&#34;  +
                      &#34;  doorNumber &#34; + elem.getDoorNumber() + &#34;\n&#34; +
                      &#34;  street: &#34; + elem.getStreet() + &#34;\n&#34; +
                      &#34;  city:   &#34; + elem.getCity() + &#34;\n&#34;  +
                      &#34;  state:  &#34; + elem.getState() + &#34;\n&#34; +
                      &#34;  zip:  &#34; + elem.getZip() + &#34;\n&#34; +
                      &#34;  country:  &#34; + elem.getCountry() + &#34;\n&#34; +
                      &#34;\n&#34; );
...
</pre></div>
</li>
<li class="stepexpand"><span>Change the XML data and print it. The <code>process()</code> method continues by invoking set methods that are analogous to the preceding get methods. The name of each set method is constructed by prefixing <code>set</code> to the name of an XML element. For example, <code>setCountry()</code> changes the value in the <code>&lt;country&gt;</code> element. These statements show this technique:</span>
<div>
<pre dir="ltr">short num = 550;
elem.setDoorNumber(num);
elem.setCountry(&#34;India&#34;);
num = 10100;
elem.setZip(new java.math.BigInteger(&#34;100100&#34;));
elem.setCity(&#34;Noida&#34;);
elem.setState(&#34;Delhi&#34;);
</pre>
<p>After changing the data, the program prints the data by invoking the same get methods as in the previous step.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
<a id="ADXDK19314"></a>
<div class="props_rev_3"><a id="GUID-C54597F9-B701-4D56-8254-1F6F3268F533"></a>
<h3 id="ADXDK-GUID-C54597F9-B701-4D56-8254-1F6F3268F533" class="sect3"><span class="enumeration_section">10.3.2</span> Customizing a Class Name in a Top-Level Element</h3>
<div>
<div class="section">
<p>The <code>Sample10.java</code> program shows one form of JAXB customization. The program shows you can change the name of a class that corresponds to an element in the input XML schema.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19316"></a><a id="ADXDK19317"></a><a id="ADXDK19315"></a>
<div class="props_rev_3"><a id="GUID-4E82459F-4799-4FC9-9A36-7703287021EE"></a>
<h4 id="ADXDK-GUID-4E82459F-4799-4FC9-9A36-7703287021EE" class="sect4"><span class="enumeration_section">10.3.2.1</span> Defining the Schema</h4>
<div>
<div class="section">
<p><a href="adx_j_jaxb.htm#GUID-4E82459F-4799-4FC9-9A36-7703287021EE__CHDDHGIJ">Example 10-4</a> shows the XML data document that provides the input to the sample application. The <code>sample10.xml</code> document describes a business.</p>
<p><a href="adx_j_jaxb.htm#GUID-4E82459F-4799-4FC9-9A36-7703287021EE__CHDFICJC">Example 10-5</a> shows the XML schema that defines the structure of <code>sample10.xml</code>. The schema defines one complex type and one element as follows:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The complex type, which is named <code>businessType</code>, is a sequence of elements. Each element in the sequence describes a part of the business: title, owner, and id.</p>
</li>
<li>
<p>The element, which is named <code>business</code>, is of type <code>biz:businessType</code>. The <code>biz</code> prefix specifies the <code>http://jaxbcustomized/sample10/</code> namespace. In <code>sample10.xml</code>, the <code>business</code> top-level element, which is in namespace <code>http://jaxbcustomized/sample10/</code>, conforms to the schema definition.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-4E82459F-4799-4FC9-9A36-7703287021EE__CHDDHGIJ">
<p class="titleinexample">Example 10-4 sample10.xml</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;business xmlns=&#34;http://jaxbcustomized/sample10/&#34;&gt;
   &lt;title&gt;Software Development&lt;/title&gt;
   &lt;owner&gt;Larry Peterson&lt;/owner&gt;
   &lt;id&gt;45123&lt;/id&gt;
&lt;/business&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4E82459F-4799-4FC9-9A36-7703287021EE__CHDFICJC">
<p class="titleinexample">Example 10-5 sample10.xsd</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
 
&lt;!-- Customization of class name in top level element --&gt;

&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
        targetNamespace=&#34;http://jaxbcustomized/sample10/&#34;
        xmlns:biz=&#34;http://jaxbcustomized/sample10/&#34;
        xmlns:jaxb=&#34;http://java.sun.com/xml/ns/jaxb&#34;
        jaxb:version=&#34;1.0&#34;
        elementFormDefault=&#34;qualified&#34;&gt;
 
   &lt;element name=&#34;business&#34; type=&#34;biz:businessType&#34;&gt;
      &lt;annotation&gt;
         &lt;appinfo&gt;
            &lt;jaxb:class name=&#34;myBusiness&#34;/&gt;
         &lt;/appinfo&gt;
      &lt;/annotation&gt;
   &lt;/element&gt;
 
   &lt;complexType name=&#34;businessType&#34;&gt;
      &lt;sequence&gt;
         &lt;element name=&#34;title&#34; type=&#34;string&#34;/&gt;
         &lt;element name=&#34;owner&#34; type=&#34;string&#34;/&gt;
         &lt;element name=&#34;id&#34; type=&#34;integer&#34;/&gt;
      &lt;/sequence&gt;
   &lt;/complexType&gt;
 
&lt;/schema&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDK19318"></a>
<div class="props_rev_3"><a id="GUID-3A871D54-8F6C-4DEC-8E0A-DBE5B6123D5A"></a>
<h5 id="ADXDK-GUID-3A871D54-8F6C-4DEC-8E0A-DBE5B6123D5A" class="sect5"><span class="enumeration_section">10.3.2.1.1</span> Customizing the Schema Binding</h5>
<div>
<div class="section">
<p>The schema shown in <a href="adx_j_jaxb.htm#GUID-4E82459F-4799-4FC9-9A36-7703287021EE__CHDFICJC">Example 10-5</a> customizes the binding of the <code>business</code> element with an inline binding declaration. The general form for inline customizations is:</p>
<pre dir="ltr">&lt;xs:annotation&gt;
   &lt;xs:appinfo&gt;
      .
      .
      binding declarations
      .
      .
   &lt;/xs:appinfo&gt;
&lt;/xs:annotation&gt;
</pre>
<p><a href="adx_j_jaxb.htm#GUID-4E82459F-4799-4FC9-9A36-7703287021EE__CHDFICJC">Example 10-5</a> uses the <code>&lt;class&gt;</code> binding declaration to bind a schema element to a Java class name. You can use the declaration to customize the name for an interface or the class that implements an interface. The JAXB class generator supports this syntax for <code>&lt;class&gt;</code> customizations:</p>
<pre dir="ltr">&lt;class [ name = &#34;className&#34;] &gt;
</pre>
<p>The <code>name</code> attribute specifies the name of the derived Java interface. <a href="adx_j_jaxb.htm#GUID-4E82459F-4799-4FC9-9A36-7703287021EE__CHDFICJC">Example 10-5</a> contains this customization:</p>
<pre dir="ltr">&lt;jaxb:class name=&#34;myBusiness&#34;/&gt;
</pre>
<p>Thus, the schema binds the <code>business</code> element to the interface <code>myBusiness</code> rather than to the interface <code>business</code>, which is the default.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19320"></a><a id="ADXDK19319"></a>
<div class="props_rev_3"><a id="GUID-FFB7871B-1474-4449-8238-6682BF539319"></a>
<h4 id="ADXDK-GUID-FFB7871B-1474-4449-8238-6682BF539319" class="sect4"><span class="enumeration_section">10.3.2.2</span> Generating and Compiling the Java Classes</h4>
<div>
<div class="section">
<p>After you have an XML document and corresponding XML schema, the next stage is to generate the Java classes from the XML schema. You can use the JAXB command-line interface to perform this task.</p>
<p>If your environment is set up as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>,&#34;</span> then you can create the source files in the <code>generated</code> package:</p>
<pre dir="ltr">cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample10
orajaxb -schema sample10.xsd
</pre>
<p>Because the preceding command does not specify a target package, the package name is constructed from the target namespace of the schema, which is <code>http://jaxbcustomized/sample10/</code> . Consequently, the utility generates these source files in the <code>./jaxbcustomized/sample10/</code> subdirectory:</p>
<pre dir="ltr">BusinessType.java
BusinessTypeImpl.java
MyBusiness.java
MyBusinessImpl.java
ObjectFactory.java
</pre>
<p>The complex type <code>businessType</code> has two source files, <code>BusinessType.java</code> and <code>BusinessTypeImpl.java</code>. Because of the JAXB customization, the <code>business</code> element is bound to interface <code>MyBusiness</code> and implementing class <code>MyBusinessImpl</code>.</p>
<p>The content of the <code>BusinessType.java</code> source file is shown in <a href="adx_j_jaxb.htm#GUID-FFB7871B-1474-4449-8238-6682BF539319__CHDECCFJ">Example 10-6</a>.</p>
<p>The <code>BusinessType</code> complex type defined a sequence of elements: <code>title</code>, <code>owner</code>, and <code>id</code>. Consequently, the <code>Address</code> interface includes a <code>get</code> and <code>set</code> method signature for each of the elements. For example, the interface includes <code>getTitle()</code> for retrieving data in the <code>&lt;title&gt;</code> element and <code>setTitle()</code> for modifying data in this element.</p>
<p>You can compile the Java source files with <code>javac</code>:</p>
<pre dir="ltr">cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample10/jaxbcustomized/sample10
javac *.java
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-FFB7871B-1474-4449-8238-6682BF539319__CHDECCFJ">
<p class="titleinexample">Example 10-6 BusinessType.java</p>
<pre dir="ltr">package jaxbcustomized.sample10;

public interface BusinessType
{
   public void setTitle(java.lang.String t);
   public java.lang.String getTitle();
   public void setOwner(java.lang.String o);
   public java.lang.String getOwner();
   public void setId(java.math.BigInteger i);
   public java.math.BigInteger getId();
} 
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19321"></a>
<div class="props_rev_3"><a id="GUID-8F929D03-ACF4-4DC1-BEBC-09BAB2F3584B"></a>
<h4 id="ADXDK-GUID-8F929D03-ACF4-4DC1-BEBC-09BAB2F3584B" class="sect4"><span class="enumeration_section">10.3.2.3</span> Processing the XML Data</h4>
<div>
<div class="section">
<p>The <code>Sample10.java</code> source file shows how you can process the data in the <code>sample10.xml</code> document by using the class files that you generated in <span class="q">&#34;<a href="adx_j_jaxb.htm#GUID-FFB7871B-1474-4449-8238-6682BF539319">Generating and Compiling the Java Classes</a>.&#34;</span> The sample program unmarshals the XML document, prints its content, and marshals the XML to standard output.</p>
<p>The <code>Sample10.java</code> program processes the XML data as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create strings for the XML data document file name and the name of the directory that contains the generated classes. This name is the package name. For example:</span>
<div>
<pre dir="ltr">String fileName = &#34;sample10.xml&#34;;
String instancePath = &#34;jaxbcustomized.sample10&#34;;
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate a JAXB context by invoking the <code>JAXBContext.newInstance()</code> method. This statement shows this technique:</span>
<div>
<pre dir="ltr">JAXBContext jc = JAXBContext.newInstance(instancePath);
</pre></div>
</li>
<li class="stepexpand"><span>Create the unmarshaller. This statement shows this technique:</span>
<div>
<pre dir="ltr">Unmarshaller u = jc.createUnmarshaller();
</pre></div>
</li>
<li class="stepexpand"><span>Unmarshal the XML document. The program unmarshals the document twice: it first returns an <code>Object</code> and then uses a cast to return a <code>MyBusiness</code> object. This statement shows this technique:</span>
<div>
<pre dir="ltr">Object obj = u.unmarshal(fileToURL(fileName));
jaxbcustomized.sample10.MyBusiness bus =
         (jaxbcustomized.sample10.MyBusiness) u.unmarshal(fileToURL(fileName));
</pre></div>
</li>
<li class="stepexpand"><span>Print the contents of the XML document. The program invokes the <code>get</code> methods on the <code>MyBusiness</code> object. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">System.out.println(&#34;My business details are: &#34;);
System.out.println(&#34;    title: &#34; + bus.getTitle());
System.out.println(&#34;    owner: &#34; + bus.getOwner());
System.out.println(&#34;    id:    &#34; + bus.getId().toString());
System.out.println();
</pre></div>
</li>
<li class="stepexpand"><span>Create a marshaller. This statement shows this technique:</span>
<div>
<pre dir="ltr">Marshaller m = jc.createMarshaller();
</pre></div>
</li>
<li class="stepexpand"><span>Configure the marshaller. You can invoke <code>setProperty()</code> to configure various properties the marshaller. The <code>JAXB_FORMATTED_OUTPUT</code> constant specifies that the marshaller must format the resulting XML data with line breaks and indentation. This statements show this technique:</span>
<div>
<pre dir="ltr">m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, new Boolean(true));
</pre></div>
</li>
<li class="stepexpand"><span>Marshal the content tree. This statement serializes the XML data, including markup, as an output stream:</span>
<div>
<pre dir="ltr">m.marshal(bus, System.out);
</pre>
<p>By default, the marshaller uses UTF-8 encoding when writing XML data to an output stream.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_sproc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_pipeline.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>