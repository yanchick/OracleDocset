<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1665"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XQuery%20Processor%20for%20Java"></a><title>Using the XQuery Processor for Java</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="XQuery processor for Java, XQJ, XQuery API for Java, XDK, JAR files for XQJ, entity resolver framework, custom entity resolver, example, streaming evaluation, using external storage, external storage, updating queries, XQuery Update Facility, updating query, standards and specifications, XQuery language, XML Syntax for XQuery (XQueryX), XQueryX, XQuery API for Java (XQJ), XQuery optional features, support in XDK, XQJ implementation-defined items, XQuery implementation-defined items, XQuery Update Facility implementation-defined items, static context, default initial values"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_xslt.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_xqjxdb.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-9E6570F0-37BB-4690-BFF6-A2052B5B57E8"></a> <span id="PAGE" style="display:none;">15/50</span> <!-- End Header -->
<a id="ADXDK991"></a><a id="ADXDK99930"></a>
<h1 id="ADXDK-GUID-9E6570F0-37BB-4690-BFF6-A2052B5B57E8" class="sect1"><span class="enumeration_chapter">7</span> Using the XQuery Processor for Java</h1>
<div>
<p>This chapter explains how to use the Oracle XML Developer&#39;s Kit (XDK) XQuery processor for Java.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xqj.htm#GUID-42469EA3-F7DC-41AF-A58B-795ED2BDC7AA">Introduction to the XQuery Processor for Java</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-5E83610F-647D-4AE5-801B-878244FB6949">Entity Resolution</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-2F04CC88-EDFF-4449-9F3B-E797285A5879">Performance and Scalability</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9">Performing Updates</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-7A47349F-CFFD-43FA-A5E4-FADC49BD75C0">Standards and Specifications</a></p>
</li>
</ul>
</div>
<a id="ADXDK114"></a><a id="ADXDK99995"></a>
<div class="props_rev_3"><a id="GUID-42469EA3-F7DC-41AF-A58B-795ED2BDC7AA"></a>
<h2 id="ADXDK-GUID-42469EA3-F7DC-41AF-A58B-795ED2BDC7AA" class="sect2"><span class="enumeration_section">7.1</span> Introduction to the XQuery Processor for Java</h2>
<div>
<p>XDK provides a standalone XQuery processor for use by Java applications. XQuery is the World Wide Web Consortium (W3C) standard query language for Extensible Markup Language (XML). Using XQuery to process XML within a Java application can improve developer productivity and application performance. Applications written with XQuery often require less code, run faster, and use less memory than applications written fully in Java.</p>
<p>JSR 225: XQuery API for Java (XQJ) defines how queries can be executed from a Java application. To use XQJ, your application must run with Java version 1.6. In addition, these JAR files are required:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>jlib/oxquery.jar</code></p>
</li>
<li>
<p><code>jlib/xqjapi.jar</code></p>
</li>
<li>
<p><code>jlib/orai18n-mapping.jar</code></p>
</li>
<li>
<p><code>lib/xmlparserv2.jar</code></p>
</li>
<li>
<p><code>xdk/jlib/apache-xmlbeans.jar</code></p>
</li>
</ul>
<p>The directory paths for these Java Archive (JAR) files are relative to the <code>ORACLE_HOME</code> directory of your Oracle Database installation.</p>
<p><a href="adx_j_xqj.htm#GUID-42469EA3-F7DC-41AF-A58B-795ED2BDC7AA__BAJCCHIC">Example 7-1</a> shows how to execute a simple &#34;Hello World&#34; query using XQuery API for Java (XQJ). Because the XQuery processor runs directly in the Java Virtual Machine (JVM), you need no database or server to run this example. The example prints the output <code>&lt;hello-world&gt;2&lt;/hello-world&gt;</code>.</p>
<p>This chapter describes the features and extensions that are specific to the Oracle implementation of XQuery. General information about XQuery and XQJ is documented outside of this document.</p>
<div class="infoboxnotealso" id="GUID-42469EA3-F7DC-41AF-A58B-795ED2BDC7AA__GUID-77A75716-1BC7-4010-9469-D56F11AA3588">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>XQuery Packages</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> for the related API documentation</p>
</li>
<li>
<p><a href="http://jcp.org/aboutJava/communityprocess/final/jsr225/" target="_blank"></a><a href="https://jcp.org/aboutJava/communityprocess/final/jsr225/index.html" target="_blank">https://jcp.org/aboutJava/communityprocess/final/jsr225/index.html</a> for information about JSR 225: XQuery API for Java (XQJ)</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xquery/" target="_blank"><code>http://www.w3.org/TR/xquery-30/</code></a> for information about XQuery 3.0: An XML Query Language</p>
</li>
</ul>
</div>
<div class="infobox-note" id="GUID-42469EA3-F7DC-41AF-A58B-795ED2BDC7AA__GUID-B3707335-F147-4DA1-9F43-DFB701A6152C">
<p class="notep1">Note:</p>
<p>Oracle also implements XQuery and XQJ as part of Oracle XML DB. See <a href="adx_j_xqjxdb.htm#GUID-DDFFD115-A115-4B6C-805C-350AF78281EB">Using XQuery API for Java to Access Oracle XML DB</a> for details about Oracle XML DB.</p>
</div>
<div class="example" id="GUID-42469EA3-F7DC-41AF-A58B-795ED2BDC7AA__BAJCCHIC">
<p class="titleinexample">Example 7-1 Simple Query Using XQJ</p>
<pre dir="ltr">import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
 
import oracle.xml.xquery.OXQDataSource;
 
public class HelloWorld {
    
    public static void main(String[] args) throws XQException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
        String query = &#34;&lt;hello-world&gt;{1 + 1}&lt;/hello-world&gt;&#34;;
        XQPreparedExpression expr = con.prepareExpression(query);
        XQSequence result = expr.executeQuery();

        // prints &#34;&lt;hello-world&gt;2&lt;/hello-world&gt;&#34;
        System.out.println(result.getSequenceAsString(null));
        
        result.close();
        expr.close();
        con.close();
    }
    
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK115"></a>
<div class="props_rev_3"><a id="GUID-5E83610F-647D-4AE5-801B-878244FB6949"></a>
<h2 id="ADXDK-GUID-5E83610F-647D-4AE5-801B-878244FB6949" class="sect2"><span class="enumeration_section">7.2</span> Entity Resolution</h2>
<div>
<p>XDK extends XQJ with an entity resolver framework for controlling how documents, schemas, modules, collations, and external functions are obtained during query processing. The examples in this section show how to use an entity resolver for several types of entities. See the class <code>oracle.xml.xquery.OXQEntity</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> for a complete list of the types of entities that the query processor can request.</p>
<p>This section includes these subsections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xqj.htm#GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2">Document Resolution</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF">External Function Resolution</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0">Module Resolution</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935">Schema Resolution</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-93E92988-81E7-4591-9F18-631525C86F1B">Prefabricated Entity Resolvers</a></p>
</li>
</ul>
</div>
<a id="ADXDK116"></a><a id="ADXDK117"></a><a id="ADXDK118"></a><a id="ADXDK112"></a>
<div class="props_rev_3"><a id="GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2"></a>
<h3 id="ADXDK-GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2" class="sect3"><span class="enumeration_section">7.2.1</span> Document Resolution</h3>
<div>
<div class="section">
<p>The example in this section shows how you can use an entity resolver to determine which document is returned by the <code>fn:doc</code> function.</p>
<p><a href="adx_j_xqj.htm#GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJEEDAJ">Example 7-2</a> displays the contents of <code>books.xml</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJFFCBB">Example 7-3</a> displays the contents of <code>books.xq</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJFDEDF">Example 7-4</a> shows how to execute the query <code>books.xq</code> with a custom entity resolver.</p>
<p>The example generates this output:</p>
<p><code>&lt;title&gt;A Game of Thrones&lt;/title&gt;</code></p>
<p>The instance of <code>MyEntityResolver</code> is passed to the XQuery processor by setting it on the connection. The XQuery processor invokes the entity resolver during query processing to get the document to be returned by the <code>fn:doc</code> function.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJEEDAJ">
<p class="titleinexample">Example 7-2 books.xml</p>
<pre dir="ltr">&lt;books&gt;
  &lt;book&gt;
    &lt;title&gt;A Game of Thrones&lt;/title&gt;
    &lt;author&gt;&lt;first&gt;George&lt;/first&gt;&lt;last&gt;Martin&lt;/last&gt;&lt;/author&gt;
    &lt;price&gt;10.99&lt;/price&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;The Pillars of the Earth&lt;/title&gt;
    &lt;author&gt;&lt;first&gt;Ken&lt;/first&gt;&lt;last&gt;Follett&lt;/last&gt;&lt;/author&gt;
    &lt;price&gt;7.99&lt;/price&gt;
  &lt;/book&gt;
&lt;/books&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJFFCBB">
<p class="titleinexample">Example 7-3 books.xq</p>
<pre dir="ltr">for $book in fn:doc(&#39;books.xml&#39;)/books/book 
where xs:decimal($book/price) gt 10.00
return
  $book/title
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJFDEDF">
<p class="titleinexample">Example 7-4 Executing a Query with a Custom Entity Resolver</p>
<pre dir="ltr">import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
 
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
import javax.xml.xquery.XQStaticContext;
 
import oracle.xml.xquery.OXQConnection;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQEntity;
import oracle.xml.xquery.OXQEntityKind;
import oracle.xml.xquery.OXQEntityLocator;
import oracle.xml.xquery.OXQEntityResolver;
import oracle.xml.xquery.OXQEntityResolverRequestOptions;
import oracle.xml.xquery.OXQView;

public class ResolveDocument {
 
    private static class MyEntityResolver extends OXQEntityResolver {
        @Override
        public OXQEntity resolveEntity(OXQEntityKind kind, OXQEntityLocator locator,
                OXQEntityResolverRequestOptions options) throws IOException {
            if (kind == OXQEntityKind.DOCUMENT) {
                URI systemId = locator.getSystemIdAsURI();
                if (&#34;file&#34;.equals(systemId.getScheme())) {
                    File file = new File(systemId);
                    FileInputStream input = new FileInputStream(file);
                    OXQEntity result = new OXQEntity(input);
                    result.enlistCloseable(input);
                    return result;
                }
            }
            return null;
        }
    }
 
    public static void main(String[] args) throws XQException, IOException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
 
        // OXQView is used to access Oracle extensions on XQJ objects.
        OXQConnection ocon = OXQView.getConnection(con);
        ocon.setEntityResolver(new MyEntityResolver());
 
        File query = new File(&#34;books.xq&#34;);
        
        // Relative URIs are resolved against the base URI before invoking the entity resolver.
        // The relative URI &#39;books.xml&#39; used in the query will be resolved against this URI.
        XQStaticContext ctx = con.getStaticContext();
        ctx.setBaseURI(query.toURI().toString());
 
        FileInputStream queryInput = new FileInputStream(query);
        XQPreparedExpression expr = con.prepareExpression(queryInput, ctx);
        queryInput.close();
        XQSequence result = expr.executeQuery();
        System.out.println(result.getSequenceAsString(null));
        
        result.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK188"></a><a id="ADXDK189"></a><a id="ADXDK108"></a><a id="ADXDK187"></a>
<div class="props_rev_3"><a id="GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF"></a>
<h3 id="ADXDK-GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF" class="sect3"><span class="enumeration_section">7.2.2</span> External Function Resolution</h3>
<div>
<div class="section">
<p>For each external function that is declared in a query, the entity resolver is called with the entity kind <code>oracle.xml.xquery.OXQEntityKind.EXTERNAL_FUNCTION</code>. The <code>oracle.xml.xquery.OXQEntityLocator</code> instance that is passed in the call to the entity resolver provides the name of the XQuery function and its argument types. The entity resolver can then return any class that extends <code>oracle.xml.xquery.OXQFunctionEvaluator</code> and has a public constructor. Then, the XQuery processor instantiates the returned class. When the XQuery external function call is evaluated, the <code>evaluate()</code> method is invoked.</p>
<p><a href="adx_j_xqj.htm#GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJFAIFJ">Example 7-6</a> shows how you can use an entity resolver to define the implementation of an XQuery external function.</p>
<p><a href="adx_j_xqj.htm#GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJIFHBB">Example 7-5</a> displays the contents of <code>trim.xq</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJFAIFJ">Example 7-6</a> runs <code>trim.xq</code>, and shows how to define the implementation of an external function.</p>
<p>The example generates this output:</p>
<p><code>&lt;result&gt;John Doe&lt;/result&gt;</code></p>
<p>The external function <code>util:trim</code> is used to remove white space from the beginning and end of a string value. This function is implemented in Java and called within the query.</p>
<p>In <a href="adx_j_xqj.htm#GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJFAIFJ">Example 7-6</a>, the entity resolver returned a class that extends <code>OXQFunctionEvaluator</code>. In some cases, it might be more convenient to return a Java static method instead of a class. When a static method is returned, the query processor automatically maps the method arguments and the return value to the XQuery data model, as defined by the XQJ specification.</p>
<p><a href="adx_j_xqj.htm#GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJEJAGB">Example 7-7</a> runs <code>trim.xq</code> again, but this time the external function is bound to a Java static method.</p>
<p>Again, the example generates this output:</p>
<p><code>&lt;result&gt;John Doe&lt;/result&gt;</code></p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJIFHBB">
<p class="titleinexample">Example 7-5 trim.xq</p>
<pre dir="ltr">declare namespace util = &#34;http://example.com/util&#34;;
 
declare function util:trim($arg as xs:string) as xs:string external;
 
(: a string with surrounding white space :)
declare variable $input := &#34;   John Doe    &#34;;
 
&lt;result&gt;{util:trim($input)}&lt;/result&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJFAIFJ">
<p class="titleinexample">Example 7-6 Defining the Implementation of an External Function</p>
<pre dir="ltr">import java.io.FileInputStream;
import java.io.IOException;
import java.util.Collections;
 
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
 
import oracle.xml.xquery.OXQConnection;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQEntity;
import oracle.xml.xquery.OXQEntityKind;
import oracle.xml.xquery.OXQEntityLocator;
import oracle.xml.xquery.OXQEntityResolver;
import oracle.xml.xquery.OXQEntityResolverRequestOptions;
import oracle.xml.xquery.OXQFunctionContext;
import oracle.xml.xquery.OXQFunctionEvaluator;
import oracle.xml.xquery.OXQFunctionMetaData;
import oracle.xml.xquery.OXQView;

public class ResolveExternalFunction {
 
    public static class TrimFunction extends OXQFunctionEvaluator {
        @Override
        public XQSequence evaluate(OXQFunctionContext context, XQSequence[] params) throws XQException {
            XQConnection con = context.getConnection();
            XQSequence arg = params[0];
            String value = arg.getSequenceAsString(null);
            String trimmed = value.trim();
            return con.createSequence(Collections.singleton(trimmed).iterator());
        }
    }
    
    private static class MyEntityResolver extends OXQEntityResolver {
        @Override
        public OXQEntity resolveEntity(OXQEntityKind kind, OXQEntityLocator locator,
                OXQEntityResolverRequestOptions options) throws XQException, IOException {
            if (kind == OXQEntityKind.EXTERNAL_FUNCTION) {
                OXQFunctionMetaData metaData = (OXQFunctionMetaData)locator.getExtension();
                QName name = metaData.getName();
                int arity = metaData.getParameterTypes().length;
                if (&#34;http://example.com/util&#34;.equals(name.getNamespaceURI()) &amp;&amp;
                    &#34;trim&#34;.equals(name.getLocalPart()) &amp;&amp; arity == 1) {
                    return new OXQEntity(TrimFunction.class);
                }
            }
            return null;
        }
    }

    public static void main(String[] args) throws IOException, XQException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
        OXQConnection ocon = OXQView.getConnection(con);
        ocon.setEntityResolver(new MyEntityResolver());
 
        FileInputStream query = new FileInputStream(&#34;trim.xq&#34;);
        XQPreparedExpression expr = con.prepareExpression(query);
        query.close();

        XQSequence result = expr.executeQuery();
        System.out.println(result.getSequenceAsString(null));
 
        result.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4B1AD5F7-FAF2-44C3-B577-5A5CF44B5AFF__BAJEJAGB">
<p class="titleinexample">Example 7-7 Binding an External Function to a Java Static Method</p>
<pre dir="ltr">import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.Method;
 
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
 
import oracle.xml.xquery.OXQConnection;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQEntity;
import oracle.xml.xquery.OXQEntityKind;
import oracle.xml.xquery.OXQEntityLocator;
import oracle.xml.xquery.OXQEntityResolver;
import oracle.xml.xquery.OXQEntityResolverRequestOptions;
import oracle.xml.xquery.OXQFunctionMetaData;
import oracle.xml.xquery.OXQView;

public class ResolveExternalFunction2 {
 
    public static String trim(String value) {
        return value.trim();
    }
    
    private static class MyEntityResolver extends OXQEntityResolver {
        @Override
        public OXQEntity resolveEntity(OXQEntityKind kind, OXQEntityLocator locator,
                OXQEntityResolverRequestOptions options) throws XQException, IOException {
            if (kind == OXQEntityKind.EXTERNAL_FUNCTION) {
                OXQFunctionMetaData metaData = (OXQFunctionMetaData)locator.getExtension();
                QName name = metaData.getName();
                int arity = metaData.getParameterTypes().length;
                if (&#34;http://example.com/util&#34;.equals(name.getNamespaceURI()) &amp;&amp;
                    &#34;trim&#34;.equals(name.getLocalPart()) &amp;&amp; arity == 1) {
                    Method staticMethod = null;
                    try {
                        staticMethod = ResolveExternalFunction2.class.getMethod(&#34;trim&#34;, String.class); 
                    } catch (NoSuchMethodException e) {
                        throw new IllegalStateException(e);
                    }
                    return new OXQEntity(staticMethod);
                }
            }
            return null;
        }
    }

    public static void main(String[] args) throws IOException, XQException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
        OXQConnection ocon = OXQView.getConnection(con);
        ocon.setEntityResolver(new MyEntityResolver());
 
        FileInputStream query = new FileInputStream(&#34;trim.xq&#34;);
        XQPreparedExpression expr = con.prepareExpression(query);
        query.close();
 
        XQSequence result = expr.executeQuery();
        System.out.println(result.getSequenceAsString(null));
 
        result.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK110"></a><a id="ADXDK111"></a><a id="ADXDK113"></a><a id="ADXDK109"></a>
<div class="props_rev_3"><a id="GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0"></a>
<h3 id="ADXDK-GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0" class="sect3"><span class="enumeration_section">7.2.3</span> Module Resolution</h3>
<div>
<p>An XQuery library module provides functions and variables that can be imported by other modules. For each imported module, the entity resolver is called with the entity kind <code>oracle.xml.xquery.OXQEntityKind.MODULE</code>. Using the <code>oracle.xml.xquery.OXQEntityLocator</code> instance, you can invoke the <code>getSystemId()</code> method to get the location of the module being imported. If no location is provided in the module import, you can invoke the method <code>getNamespace()</code> to get the target namespace of the module. The entity resolver can then return the corresponding library module.</p>
<p>The example in this section shows how you can use an entity resolver to control the resolution of XQuery library modules.</p>
<p><a href="adx_j_xqj.htm#GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0__BAJHBFFI">Example 7-8</a> displays the contents of <code>math.xq</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0__BAJDCFCE">Example 7-9</a> displays the contents of <code>main.xq</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0__BAJDGAIF">Example 7-10</a> shows how to execute a query that imports a library module.</p>
<p>The example generates this output:</p>
<p><code>20.546015931</code></p>
<p>The query <code>main.xq</code> imports the library module <code>math.xq</code>, and then invokes the function <code>math:circumference</code> to compute the circumference of a circle.</p>
<div class="example" id="GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0__BAJHBFFI">
<p class="titleinexample">Example 7-8 math.xq</p>
<pre dir="ltr">module namespace math = &#34;http://example.com/math&#34;;
 
declare variable $math:pi as xs:decimal := 3.14159265;
 
declare function math:circumference($diameter as xs:decimal) {
   $math:pi * $diameter
};
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0__BAJDCFCE">
<p class="titleinexample">Example 7-9 main.xq</p>
<pre dir="ltr">import module namespace math = &#34;http://example.com/math&#34; at &#34;math.xq&#34;;
 
math:circumference(6.54)
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ED851251-5829-4A8A-B4CD-3D9DF43232C0__BAJDGAIF">
<p class="titleinexample">Example 7-10 Executing a Query that Imports a Library Module</p>
<pre dir="ltr">import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
 
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
import javax.xml.xquery.XQStaticContext;
 
import oracle.xml.xquery.OXQConnection;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQEntity;
import oracle.xml.xquery.OXQEntityKind;
import oracle.xml.xquery.OXQEntityLocator;
import oracle.xml.xquery.OXQEntityResolver;
import oracle.xml.xquery.OXQEntityResolverRequestOptions;
import oracle.xml.xquery.OXQView;

public class ResolveLibraryModule {
 
    private static class MyEntityResolver extends OXQEntityResolver {
        @Override
        public OXQEntity resolveEntity(OXQEntityKind kind, OXQEntityLocator locator,
                OXQEntityResolverRequestOptions options) throws IOException {
            if (kind == OXQEntityKind.MODULE) {
                URI systemId = locator.getSystemIdAsURI();
                if (systemId != null &amp;&amp; &#34;file&#34;.equals(systemId.getScheme())) {
                    File file = new File(systemId);
                    FileInputStream input = new FileInputStream(file);
                    OXQEntity result = new OXQEntity(input);
                    result.enlistCloseable(input);
                    return result;
                }
            }
            return null;
        }
    }

    public static void main(String[] args) throws XQException, IOException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
 
        // OXQView is used to access Oracle extensions on XQJ objects.
        OXQConnection ocon = OXQView.getConnection(con);
        ocon.setEntityResolver(new MyEntityResolver());
 
        File query = new File(&#34;main.xq&#34;);
        
        // Relative URIs are resolved against the base URI before invoking the entity resolver.
        // The relative URI &#39;math.xq&#39; used in the query will be resolved against this URI.
        XQStaticContext ctx = con.getStaticContext();
        ctx.setBaseURI(query.toURI().toString());
        
        FileInputStream queryInput = new FileInputStream(query);
        XQPreparedExpression expr = con.prepareExpression(queryInput, ctx);
        queryInput.close();

        XQSequence result = expr.executeQuery();
        System.out.println(result.getSequenceAsString(null));
        
        result.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK102"></a><a id="ADXDK103"></a><a id="ADXDK104"></a><a id="ADXDK101"></a>
<div class="props_rev_3"><a id="GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935"></a>
<h3 id="ADXDK-GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935" class="sect3"><span class="enumeration_section">7.2.4</span> Schema Resolution</h3>
<div>
<p>An XQuery schema import imports element declarations, attributes declarations, and type definitions from an XML schema. You can use imported declarations and definitions in a query to validate and test data instances.</p>
<p>The example in this section shows how you can use an entity resolver to control which XML schema is used when a query imports a schema.</p>
<p><a href="adx_j_xqj.htm#GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935__BAJBFCBH">Example 7-11</a> displays the contents of <code>size.xsd</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935__BAJIDADH">Example 7-12</a> displays the contents of <code>size.xq</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935__BAJBEEGC">Example 7-13</a> shows how to execute a query that imports a schema.</p>
<p>The example generates this output:</p>
<pre dir="ltr">S INVALID:big XL INVALID:42
</pre>
<p>The query <code>size.xq</code> uses the type <code>shirt-size</code> defined in schema <code>size.xsd</code> to test a list of values.</p>
<div class="example" id="GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935__BAJBFCBH">
<p class="titleinexample">Example 7-11 size.xsd</p>
<pre dir="ltr">&lt;xs:schema 
  xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;
  targetNamespace=&#34;http://example.com/size&#34;&gt;
 
  &lt;xs:simpleType name=&#34;shirt-size&#34;&gt;
    &lt;xs:restriction base=&#34;xs:string&#34;&gt;
      &lt;xs:enumeration value=&#34;XS&#34;/&gt;
      &lt;xs:enumeration value=&#34;S&#34;/&gt;
      &lt;xs:enumeration value=&#34;M&#34;/&gt;
      &lt;xs:enumeration value=&#34;L&#34;/&gt;
      &lt;xs:enumeration value=&#34;XL&#34;/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
 
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935__BAJIDADH">
<p class="titleinexample">Example 7-12 size.xq</p>
<pre dir="ltr">import schema namespace ns = &#34;http://example.com/size&#34; at &#34;size.xsd&#34;;
 
for $size in (&#34;S&#34;, &#34;big&#34;, &#34;XL&#34;, 42)
return
  if ($size castable as ns:shirt-size) then
    ns:shirt-size($size)
  else
    concat(&#34;INVALID:&#34;, $size)
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E03FFCF3-0A2E-4764-A2CF-429D0A828935__BAJBEEGC">
<p class="titleinexample">Example 7-13 Executing a Query that Imports a Schema</p>
<pre dir="ltr">import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
 
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
import javax.xml.xquery.XQStaticContext;
 
import oracle.xml.xquery.OXQConnection;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQEntity;
import oracle.xml.xquery.OXQEntityKind;
import oracle.xml.xquery.OXQEntityLocator;
import oracle.xml.xquery.OXQEntityResolver;
import oracle.xml.xquery.OXQEntityResolverRequestOptions;
import oracle.xml.xquery.OXQView;

public class ResolveSchema {
 
    private static class MyEntityResolver extends OXQEntityResolver {
        @Override
        public OXQEntity resolveEntity(OXQEntityKind kind, OXQEntityLocator locator,
                OXQEntityResolverRequestOptions options) throws IOException {
            if (kind == OXQEntityKind.SCHEMA) {
                URI systemId = locator.getSystemIdAsURI();
                if (systemId != null &amp;&amp; &#34;file&#34;.equals(systemId.getScheme())) {
                    File file = new File(systemId);
                    FileInputStream input = new FileInputStream(file);
                    OXQEntity result = new OXQEntity(input);
                    result.enlistCloseable(input);
                    return result;
                }
            }
            return null;
        }
    }
  
   public static void main(String[] args) throws XQException, IOException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
 
        // OXQView is used to access Oracle extensions on XQJ objects.
        OXQConnection ocon = OXQView.getConnection(con);
        ocon.setEntityResolver(new MyEntityResolver());
 
        File query = new File(&#34;size.xq&#34;);
        
        // Relative URIs are resolved against the base URI before invoking the entity resolver.
        // The relative URI &#39;math.xq&#39; used in the query will be resolved against this URI.
        XQStaticContext ctx = con.getStaticContext();
        ctx.setBaseURI(query.toURI().toString());
        
        FileInputStream queryInput = new FileInputStream(query);
        XQPreparedExpression expr = con.prepareExpression(queryInput, ctx);
        queryInput.close();
        
        XQSequence result = expr.executeQuery();
        System.out.println(result.getSequenceAsString(null));
        
        result.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK107"></a><a id="ADXDK106"></a>
<div class="props_rev_3"><a id="GUID-93E92988-81E7-4591-9F18-631525C86F1B"></a>
<h3 id="ADXDK-GUID-93E92988-81E7-4591-9F18-631525C86F1B" class="sect3"><span class="enumeration_section">7.2.5</span> Prefabricated Entity Resolvers</h3>
<div>
<div class="section">
<p>XDK includes several implementations of <code>OXQEntityResolver</code> that you can use for common tasks such as file system and HTTP resolution. In the previous examples that resolve entities using the file system, you could replace <code>MyEntityResolver</code> with the file entity resolver that is available in XDK.</p>
<p>The example in this section shows how you can run the query in <a href="adx_j_xqj.htm#GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJFFCBB">Example 7-3</a> without having to implement your own entity resolver.</p>
<p><a href="adx_j_xqj.htm#GUID-93E92988-81E7-4591-9F18-631525C86F1B__BAJBBBBH">Example 7-14</a> shows how to execute the query <code>books.xq</code> with a prefabricated file resolver.</p>
<p><a href="adx_j_xqj.htm#GUID-93E92988-81E7-4591-9F18-631525C86F1B__BAJBBBBH">Example 7-14</a> generates this output:</p>
<pre dir="ltr">&lt;title&gt;A Game of Thrones&lt;/title&gt;
</pre>
<p>An instance of the factory <code>oracle.xml.xquery.OXQFileResolverFactory</code> is created from the connection. Then, this factory is used to create an entity resolver that resolves schemas, modules, and documents against the file system. By contrast with this example, <a href="adx_j_xqj.htm#GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJFDEDF">Example 7-4</a> uses the custom entity resolver <code>MyEntityResolver</code> to resolve only documents against the file system.</p>
<p>XDK provides these entity resolver factories:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.xquery.OXQFileResolverFactory</code>: Creates an entity resolver that resolves &#39;file:&#39; URIs for schema, module, and document locations.</p>
</li>
<li>
<p><code>oracle.xml.xquery.OXQHttpResolverFactory</code>: Creates an entity resolver that resolves &#39;http:&#39; URIs for schema, module, and document locations.</p>
</li>
<li>
<p><code>oracle.xml.xquery.OXQCompositeResolverFactory</code>: Creates an entity resolver that delegates requests to other entity resolvers. For any kind of request, the resolver returns the first nonnull result it receives from one of the delegate resolvers.</p>
</li>
<li>
<p><code>oracle.xml.xquery.OXQJavaResolverFactory</code>: Creates an entity resolver that resolves external functions and modules to Java static methods or classes.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-93E92988-81E7-4591-9F18-631525C86F1B__GUID-37F46B28-93FE-4626-9687-3CE8D39A4AD7">
<p class="notep1">See Also:</p>
<p>the package <code>oracle.xml.xquery</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> for API information about these factory interfaces</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-93E92988-81E7-4591-9F18-631525C86F1B__BAJBBBBH">
<p class="titleinexample">Example 7-14 Executing a Query with a Prefabricated File Resolver</p>
<pre dir="ltr">import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
 
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
import javax.xml.xquery.XQStaticContext;
 
import oracle.xml.xquery.OXQConnection;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQFileResolverFactory;
import oracle.xml.xquery.OXQView;

public class ResolverFactory {
    public static void main(String[] args) throws XQException, IOException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
 
        // OXQView is used to access Oracle extensions on XQJ objects.
        OXQConnection ocon = OXQView.getConnection(con);
        OXQFileResolverFactory factory = ocon.createEntityResolverFactory(OXQFileResolverFactory.class);
        ocon.setEntityResolver(factory.createResolver());
 
        File query = new File(&#34;books.xq&#34;);
        
        // Relative URIs are resolved against the base URI before invoking the entity resolver.
        // The relative URI &#39;books.xml&#39; used in the query will be resolved against this URI.
        XQStaticContext ctx = con.getStaticContext();
        ctx.setBaseURI(query.toURI().toString());
 
        FileInputStream queryInput = new FileInputStream(query);
        XQPreparedExpression expr = con.prepareExpression(queryInput, ctx);
        queryInput.close();
        
        XQSequence result = expr.executeQuery();
        System.out.println(result.getSequenceAsString(null));
        
        result.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK119"></a>
<div class="props_rev_3"><a id="GUID-2F04CC88-EDFF-4449-9F3B-E797285A5879"></a>
<h2 id="ADXDK-GUID-2F04CC88-EDFF-4449-9F3B-E797285A5879" class="sect2"><span class="enumeration_section">7.3</span> Performance and Scalability</h2>
<div>
<div class="section">
<p>The XDK XQuery processor provides several features for improving the performance and scalability of your application.</p>
<p>This section includes these subsections:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xqj.htm#GUID-80E29834-C423-41F9-BE6D-D34388E15A98">Streaming Query Evaluation</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-C36470F9-CC26-4169-8C50-78852EC74583">External Storage</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-729BCBC6-A03A-4397-BE61-6E0AB9B43A6D">Thread Safety</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK120"></a><a id="ADXDK121"></a><a id="ADXDK190"></a>
<div class="props_rev_3"><a id="GUID-80E29834-C423-41F9-BE6D-D34388E15A98"></a>
<h3 id="ADXDK-GUID-80E29834-C423-41F9-BE6D-D34388E15A98" class="sect3"><span class="enumeration_section">7.3.1</span> Streaming Query Evaluation</h3>
<div>
<div class="section">
<p>The XDK XQuery processor for Java supports streaming evaluation for many types of queries. Streaming evaluation requires a small amount of main memory, even when the input XML is very large.</p>
<p>To facilitate streaming evaluation, these actions are recommended:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Set the binding mode on the static context to deferred mode (see the method <code>javax.xml.xquery.XQStaticContext.setBindingMode(int)</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a>). If the binding mode is not deferred, the input XML is fully materialized when it is bound.</p>
</li>
<li>
<p>Provide the input XML as an instance of <code>java.io.InputStream</code>, <code>java.io.Reader</code>, or <code>javax.xml.stream.XMLStreamReader</code>. Input XML is provided to the query processor by binding it to the expression, or by returning it from an entity resolver.</p>
</li>
<li>
<p>Ensure that the <code>javax.xml.xquery.XQSequence</code> instance is consumed in a way that does not require materialization:</p>
<ul style="list-style-type: disc;">
<li>
<p>The string serialization methods <code>getSequenceAsString(...)</code> and <code>getItemAsString(...)</code> produce data as a string that is held in memory. Instead, use the <code>writeSequence(...)</code> or the <code>writeItem(...)</code> method to serialize the sequence.</p>
</li>
<li>
<p>The <code>getNode()</code> method builds a Document Object Model (DOM) node that is held in memory. Instead, consider using the <code>getSequenceAsStream()</code> or the <code>getItemAsStream()</code> method to get a Streaming API for XML (StAX) stream.</p>
</li>
<li>
<p>The <code>getItem()</code> method copies and materializes the current item in memory. Instead, use methods directly on the <code>java.xml.xquery.XQSequence</code> instance to access the current item (see the interface <code>javax.xml.xquery.XQItemAccessor</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a>).</p>
</li>
</ul>
</li>
</ul>
<p>The example described in this section invokes a query using XQJ in a way that does not prevent streaming evaluation.</p>
<p><a href="adx_j_xqj.htm#GUID-80E29834-C423-41F9-BE6D-D34388E15A98__BAJCBHAA">Example 7-15</a> displays the contents of <code>books2.xq</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-80E29834-C423-41F9-BE6D-D34388E15A98__BAJFEHHJ">Example 7-16</a> sets up the query to enable streaming evaluation.</p>
<p><a href="adx_j_xqj.htm#GUID-80E29834-C423-41F9-BE6D-D34388E15A98__BAJFEHHJ">Example 7-16</a> writes this output to the file <code>results.xml</code>:</p>
<p><code>&lt;title&gt;A Game of Thrones&lt;/title&gt;</code></p>
<p>The binding mode is set to the value <code>BINDING_MODE_DEFERRED</code> to avoid materializing <code>books.xml</code> when it is bound to the prepared expression. Likewise, the result is written to an output stream, and it is not materialized.</p>
<p>To simplify the example, the input file <code>books.xml</code> is small. Even if this file contained millions of books, evaluating the query would require only a small maximum heap size because only one book element is held in memory at one time. In contrast with the query <code>books.xq</code>, shown in <a href="adx_j_xqj.htm#GUID-74123D7F-5491-4F5D-BDA5-B2CC2F3B33C2__BAJFFCBB">Example 7-3</a>, the query <code>books2.xq</code> does not require you to define an entity resolver. Both examples (<code>books.xq</code> and <code>books2.xq</code>) are streamable.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-80E29834-C423-41F9-BE6D-D34388E15A98__BAJCBHAA">
<p class="titleinexample">Example 7-15 books2.xq</p>
<pre dir="ltr">declare variable $doc external;
 
for $book in $doc/books/book
where xs:decimal($book/price) gt 10.00
return
  $book/title
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-80E29834-C423-41F9-BE6D-D34388E15A98__BAJFEHHJ">
<p class="titleinexample">Example 7-16 Facilitating Streaming Evaluation</p>
<pre dir="ltr">import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
 
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQConstants;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
import javax.xml.xquery.XQStaticContext;
 
import oracle.xml.xquery.OXQDataSource;
 
public class Streaming {
 
    public static void main(String[] args) throws XQException, IOException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
        
        XQStaticContext ctx = con.getStaticContext();
        ctx.setBindingMode(XQConstants.BINDING_MODE_DEFERRED);
        con.setStaticContext(ctx);
        
        FileInputStream input = new FileInputStream(&#34;books.xml&#34;);
        FileInputStream query = new FileInputStream(&#34;books2.xq&#34;);
        FileOutputStream output = new FileOutputStream(&#34;result.xml&#34;);
        
        XQPreparedExpression expr = con.prepareExpression(query);
        query.close();
        expr.bindDocument(new QName(&#34;doc&#34;), input, null, null);
        
        XQSequence result = expr.executeQuery();
        result.writeSequence(output, null);
        
        result.close();
        input.close();
        output.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK122"></a><a id="ADXDK191"></a>
<div class="props_rev_3"><a id="GUID-C36470F9-CC26-4169-8C50-78852EC74583"></a>
<h3 id="ADXDK-GUID-C36470F9-CC26-4169-8C50-78852EC74583" class="sect3"><span class="enumeration_section">7.3.2</span> External Storage</h3>
<div>
<div class="section">
<p>Depending on the query, the processor might have to store part of the input XML in main memory during query evaluation. For example, this scenario can occur in cases such as these:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>A sequence is sorted.</p>
</li>
<li>
<p>The value bound to a variable is used multiple times.</p>
</li>
<li>
<p>A path expression uses a reverse-axis step.</p>
</li>
</ul>
<p>To reduce memory usage in such cases, you can configure the XQuery processor to use external storage for materializing XML, rather than main memory. To enable the use of external storage, set the data source property <code>OXQConstants.USE_EXTERNAL_STORAGE</code> to <code>true</code>, and set an <code>oracle.xml.scalable.PageManager</code> instance on the dynamic context.</p>
<div class="infobox-note" id="GUID-C36470F9-CC26-4169-8C50-78852EC74583__GUID-72A836B5-2C2C-491E-92C3-BEDE32CDD73A">
<p class="notep1">Note:</p>
<p>Using external storage can significantly reduce the amount of main memory that is consumed during query processing. However, it can also reduce performance.</p>
</div>
<p><a href="adx_j_xqj.htm#GUID-C36470F9-CC26-4169-8C50-78852EC74583__BAJHJDID">Example 7-17</a> shows how to enable the XQuery processor to use disk-based storage rather than main memory when XML is materialized.</p>
<p><a href="adx_j_xqj.htm#GUID-C36470F9-CC26-4169-8C50-78852EC74583__BAJHJDID">Example 7-17</a> writes this output to the file <code>results.xml</code>:</p>
<p><code>&lt;title&gt;A Game of Thrones&lt;/title&gt;</code></p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-C36470F9-CC26-4169-8C50-78852EC74583__BAJHJDID">
<p class="titleinexample">Example 7-17 Configuring the XQuery Processor to Use External Storage</p>
<pre dir="ltr">import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
 
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQConstants;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQSequence;
import javax.xml.xquery.XQStaticContext;
 
import oracle.xml.scalable.FilePageManager;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQPreparedExpression;
import oracle.xml.xquery.OXQView;

public class ExternalStorage {
 
    public static void main(String[] args) throws XQException, IOException {
        OXQDataSource ds = new OXQDataSource();
        ds.setProperty(OXQDataSource.USE_EXTERNAL_STORAGE, &#34;true&#34;);
        
        XQConnection con = ds.getConnection();
        XQStaticContext ctx = con.getStaticContext();
        ctx.setBindingMode(XQConstants.BINDING_MODE_DEFERRED);
        con.setStaticContext(ctx);
        
        FileInputStream input = new FileInputStream(&#34;books.xml&#34;);
        FileInputStream query = new FileInputStream(&#34;books2.xq&#34;);
        FileOutputStream output = new FileOutputStream(&#34;results.xml&#34;);
        
        XQPreparedExpression expr = con.prepareExpression(query);
        query.close();
        expr.bindDocument(new QName(&#34;doc&#34;), input, null, null);
        
        // Set a page manager that will be used by the XQuery processor if XML needs to be materialized
        OXQPreparedExpression oexpr = OXQView.getPreparedExpression(expr);
        File temporaryFile = File.createTempFile(&#34;books&#34;, &#34;.pagefile&#34;);
        temporaryFile.deleteOnExit();
        oexpr.setPageManager(new FilePageManager(temporaryFile.getAbsolutePath()));
        
        XQSequence result = expr.executeQuery();
        result.writeSequence(output, null);
        
        result.close();
        input.close();
        output.close();
        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK192"></a>
<div class="props_rev_3"><a id="GUID-729BCBC6-A03A-4397-BE61-6E0AB9B43A6D"></a>
<h3 id="ADXDK-GUID-729BCBC6-A03A-4397-BE61-6E0AB9B43A6D" class="sect3"><span class="enumeration_section">7.3.3</span> Thread Safety</h3>
<div>
<p>The Oracle implementation of XQJ is not threadsafe. For example, an instance of <code>javax.xml.xquery.XQSequence</code> must be accessed by only one thread. However, a restricted form of thread safety is supported for managing instances of <code>javax.xml.xquery.XQConnection</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p>An instance of <code>XQConnection</code> serves as a factory for creating instances of <code>XQExpression</code>, <code>XQPreparedExpression</code>, <code>XQItem</code>, <code>XQSequence</code>, <code>XQItemType</code>, and <code>XQSequenceType</code>. One thread can manage the creation of these objects for use by other threads. For example, <code>XQPreparedExpression</code> instances created in one thread by the same connection can be used in other threads. Each <code>XQPreparedExpression</code> instance, however, must be executed by only one thread. Any user-defined implementations of <code>oracle.xml.xquery.OXQEntityResolver</code> that are specified must be threadsafe when expressions from the same connection are evaluated concurrently.</p>
</li>
<li>
<p>The <code>XQConnection.close()</code> method closes all <code>XQExpression</code> and <code>XQPreparedExpression</code> instances that were geted from the connection. Closing those instances closes all <code>XQResultSequence</code> and <code>XQResultItem</code> instances obtained from the expressions. The <code>XQConnection.close()</code> method can be called while expressions obtained from the connection are being processed in other threads. In this case, all registered resources held by the expressions (such as <code>java.io.InputStream</code> and <code>java.io.Reader</code>) are closed. This contract assumes that all registered resources support a threadsafe close method. For example, many JDK implementations of <code>java.io.Closeable</code> satisfy this requirement. But, many implementations of <code>javax.xml.stream.XMLStreamReader</code> do not provide a threadsafe close method. Implementations without this support can give unpredictable results if they are closed while a second thread is still reading (see the interface <code>oracle.xml.xquery.OXQCloseable</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a>).</p>
<div class="infoboxnotealso" id="GUID-729BCBC6-A03A-4397-BE61-6E0AB9B43A6D__GUID-D41CBF61-90B5-4E84-99F7-23D92B3B1E12">
<p class="notep1">See Also:</p>
<p>the method <code>oracle.xml.xquery.OXQConnection.copyExpression(XQPreparedExpression)</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a></p>
</div>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK183"></a><a id="ADXDK184"></a><a id="ADXDK185"></a><a id="ADXDK186"></a><a id="ADXDK182"></a>
<div class="props_rev_3"><a id="GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9"></a>
<h2 id="ADXDK-GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9" class="sect2"><span class="enumeration_section">7.4</span> Performing Updates</h2>
<div>
<div class="section">
<p>XDK extends XQJ with the ability to execute updating queries. XML documents can be read as an instance of <code>javax.xml.xquery.XQItem</code>, and then modified using XQuery Update Facility extensions. This feature is disabled by default. You can enable it by setting the update mode on the dynamic context to <code>oracle.xml.xquery.OXQConstants.UPDATE_MODE_ENABLED</code>.</p>
<p>Documents to be updated must be bound in deferred mode (see the method <code>javax.xml.xquery.XQStaticContext.setBindingMode(int)</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a>). If the binding mode is not set to deferred, the input bindings are copied before query execution. Thus, only the copy is updated.</p>
<p>The example in this section shows how you can modify an XML document using the XQuery Update Facility.</p>
<p><a href="adx_j_xqj.htm#GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJFCJCC">Example 7-18</a> displays the contents of <code>configuration.xml</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJICABB">Example 7-19</a> displays the contents of <code>update.xq</code>.</p>
<p><a href="adx_j_xqj.htm#GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJGJHDJ">Example 7-20</a> displays the contents of <code>configuration.xml</code> after an update.</p>
<p><a href="adx_j_xqj.htm#GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJCDIFI">Example 7-21</a> shows how execute the query <code>update.xq</code>.</p>
<p>In the example, these actions occur:</p>
<ol>
<li>
<p>The XML file <code>configuration.xml</code> is read as an instance of <code>javax.xml.xquery.XQItem</code>.</p>
</li>
<li>
<p>The item is bound to the prepared expression for the query <code>update.xq</code>.</p>
</li>
<li>
<p>The query <code>update.xq</code> is executed.</p>
</li>
<li>
<p>The modified document is written to the file <code>configuration.xml</code>.</p>
</li>
</ol>
<div class="infoboxnotealso" id="GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__GUID-9703B030-1DA9-4353-8A2D-6DDBDC23C543">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/TR/xquery-update-10/" target="_blank"><code>http://www.w3.org/TR/xquery-update-10/</code></a> for information about XQuery Update Facility 1.0</p>
</li>
<li>
<p>The interface <code>oracle.xml.xquery.OXQDynamicContext</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJFCJCC">
<p class="titleinexample">Example 7-18 configuration.xml</p>
<pre dir="ltr">&lt;configuration&gt;
  &lt;property&gt;
    &lt;name&gt;hostname&lt;/name&gt;
    &lt;value&gt;example.com&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;timeout&lt;/name&gt;
    &lt;value&gt;1000&lt;/value&gt;
  &lt;/property&gt;
&lt;/configuration&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJICABB">
<p class="titleinexample">Example 7-19 update.xq</p>
<pre dir="ltr">declare variable $doc external;
 
let $timeout := $doc/configuration/property[name eq &#34;timeout&#34;]
return
  replace value of node $timeout/value 
  with 2 * xs:integer($timeout/value)
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJGJHDJ">
<p class="titleinexample">Example 7-20 Updated File configuration.xml</p>
<pre dir="ltr">&lt;configuration&gt;
  &lt;property&gt;
    &lt;name&gt;hostname&lt;/name&gt;
    &lt;value&gt;example.com&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;timeout&lt;/name&gt;
    &lt;value&gt;2000&lt;/value&gt;
  &lt;/property&gt;
&lt;/configuration&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-16E26F1C-DA32-4D6A-BBE0-84EAFBA96EB9__BAJCDIFI">
<p class="titleinexample">Example 7-21 Executing the Updating Query update.xq</p>
<pre dir="ltr">import java.io.FileInputStream;
import java.io.IOException;
import java.io.FileOutputStream;
 
import javax.xml.namespace.QName;
import javax.xml.xquery.XQConnection;
import javax.xml.xquery.XQConstants;
import javax.xml.xquery.XQException;
import javax.xml.xquery.XQItem;
import javax.xml.xquery.XQPreparedExpression;
import javax.xml.xquery.XQStaticContext;
 
import oracle.xml.xquery.OXQConstants;
import oracle.xml.xquery.OXQDataSource;
import oracle.xml.xquery.OXQView;
 
public class UpdateDocument {
    public static void main(String[] args) throws XQException, IOException {
        OXQDataSource ds = new OXQDataSource();
        XQConnection con = ds.getConnection();
        
        XQStaticContext ctx = con.getStaticContext();
        // Set the binding mode to deferred so the document
        // item is not copied when it is bound.
        ctx.setBindingMode(XQConstants.BINDING_MODE_DEFERRED);
        con.setStaticContext(ctx);
 
        FileInputStream input = new FileInputStream(&#34;configuration.xml&#34;);
        XQItem doc = con.createItemFromDocument(input, null, null);
        input.close();
        
        System.out.println(&#34;Before update: \n&#34; + doc.getItemAsString(null));
        
        FileInputStream query = new FileInputStream(&#34;update.xq&#34;);
        XQPreparedExpression expr = con.prepareExpression(query);
        query.close();
        expr.bindItem(new QName(&#34;doc&#34;), doc);
        // Enable updates (disabled by default)
        OXQView.getDynamicContext(expr).setUpdateMode(OXQConstants.UPDATE_MODE_ENABLED);
        expr.executeQuery();
 
        System.out.println(&#34;After update: \n&#34; + doc.getItemAsString(null));
        
        // Write the modified document back to the file
        FileOutputStream out = new FileOutputStream(&#34;configuration.xml&#34;);
        doc.writeItem(out, null);

        expr.close();
        con.close();
    }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK99996"></a>
<div class="props_rev_3"><a id="GUID-7A47349F-CFFD-43FA-A5E4-FADC49BD75C0"></a>
<h2 id="ADXDK-GUID-7A47349F-CFFD-43FA-A5E4-FADC49BD75C0" class="sect2"><span class="enumeration_section">7.5</span> Standards and Specifications &mdash; XQuery Processor for Java</h2>
<div>
<p>The XDK XQuery processor for Java conforms with these standards and specifications:</p>
<ul style="list-style-type: disc;">
<li>
<p>XQuery 3.0:</p>
<p><a href="http://www.w3.org/TR/xquery/" target="_blank"><code>http://www.w3.org/TR/xquery-30/</code></a></p>
<div class="infobox-note" id="GUID-7A47349F-CFFD-43FA-A5E4-FADC49BD75C0__GUID-BD352653-E22D-451D-AD74-88E1515EDB8D">
<p class="notep1">Note:</p>
All XQuery 1.0 level features are supported. XQuery 3.0 level features are supported except for the following: FLWOR window clause, FLWOR count clause, namespace constructors, decimal format declarations, <code>fn:format-number</code>, <code>fn:format-integer</code>, <code>fn:format-date</code>, <code>fn:format-time</code>, <code>fn:path</code>, and higher order XQuery functions.</div>
</li>
<li>
<p>XQuery Update Facility 1.0:</p>
<p><a href="http://www.w3.org/TR/xquery-update-10/" target="_blank"><code>http://www.w3.org/TR/xquery-update-10/</code></a></p>
</li>
<li>
<p>XML Syntax for XQuery 3.0 (XQueryX):</p>
<p><a href="http://www.w3.org/TR/xqueryx/" target="_blank"><code>http://www.w3.org/TR/xqueryx-30/</code></a></p>
</li>
<li>
<p>JSR 225: XQuery API for Java (XQJ):</p>
<p><a href="http://jcp.org/aboutJava/communityprocess/final/jsr225/" target="_blank"></a><a href="https://jcp.org/aboutJava/communityprocess/final/jsr225/index.html" target="_blank">https://jcp.org/aboutJava/communityprocess/final/jsr225/index.html</a></p>
</li>
</ul>
<div class="infobox-note" id="GUID-7A47349F-CFFD-43FA-A5E4-FADC49BD75C0__GUID-40808998-C99E-40AE-BCD8-CF1CDC2DCD22">
<p class="notep1">Note:</p>
<p>The XDK XQuery processor for Java is not interoperable with other XQJ implementations, including the Oracle XQJ implementation for Oracle XML DB. (See JSR-225: XQuery API for Java for the meaning of <span class="italic">interoperable</span>.)</p>
</div>
<p>This section includes these subsections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xqj.htm#GUID-19038D1D-9BB6-4973-BD8A-6C885A1300E0">Optional Features</a></p>
</li>
<li>
<p><a href="adx_j_xqj.htm#GUID-64686275-A3CA-4C60-934C-CA8CC6636E53">Implementation-Defined Items</a></p>
</li>
</ul>
</div>
<a id="ADXDK99968"></a><a id="ADXDK99967"></a>
<div class="props_rev_3"><a id="GUID-19038D1D-9BB6-4973-BD8A-6C885A1300E0"></a>
<h3 id="ADXDK-GUID-19038D1D-9BB6-4973-BD8A-6C885A1300E0" class="sect3"><span class="enumeration_section">7.5.1</span> Optional Features</h3>
<div>
<p>The XQuery specification defines certain features as optional. <a href="adx_j_xqj.htm#GUID-19038D1D-9BB6-4973-BD8A-6C885A1300E0__BAJEBIAI" title="Table of optional XQuery support">Table 7-1</a> lists the optional XQuery features supported by XDK.</p>
<div class="tblformal" id="GUID-19038D1D-9BB6-4973-BD8A-6C885A1300E0__BAJEBIAI">
<p class="titleintable">Table 7-1 XQuery Optional Features Supported by XDK</p>
<table class="cellalignment650" title="XQuery Optional Features Supported by XDK" summary="Table of optional XQuery support">
<thead>
<tr class="cellalignment644">
<th class="cellalignment651" id="d37985e2228">Feature</th>
<th class="cellalignment652" id="d37985e2231">For more information</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment653" id="d37985e2236" headers="d37985e2228">
<p>Schema import</p>
</td>
<td class="cellalignment654" headers="d37985e2236 d37985e2231">
<p><a href="http://www.w3.org/TR/xquery/#dt-schema-import" target="_blank"><code>http://www.w3.org/TR/xquery/#dt-schema-import</code></a></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment653" id="d37985e2246" headers="d37985e2228">
<p>Schema validation</p>
</td>
<td class="cellalignment654" headers="d37985e2246 d37985e2231">
<p><a href="http://www.w3.org/TR/xquery/#id-validate" target="_blank"><code>http://www.w3.org/TR/xquery/#id-validate</code></a></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment653" id="d37985e2256" headers="d37985e2228">
<p>Static typing</p>
</td>
<td class="cellalignment654" headers="d37985e2256 d37985e2231">
<p><a href="http://www.w3.org/TR/xquery/#id-static-typing-feature" target="_blank"><code>http://www.w3.org/TR/xquery/#id-static-typing-feature</code></a></p>
<p><a href="http://www.w3.org/TR/xquery-update-10/#id-update-static" target="_blank"><code>http://www.w3.org/TR/xquery-update-10/#id-update-static</code></a></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment653" id="d37985e2271" headers="d37985e2228">
<p>Full axis support</p>
</td>
<td class="cellalignment654" headers="d37985e2271 d37985e2231">
<p><a href="http://www.w3.org/TR/xquery/#id-full-axis-feature" target="_blank"><code>http://www.w3.org/TR/xquery/#id-full-axis-feature</code></a></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment653" id="d37985e2281" headers="d37985e2228">
<p>Modules</p>
</td>
<td class="cellalignment654" headers="d37985e2281 d37985e2231">
<p><a href="http://www.w3.org/TR/xquery/#id-module-feature" target="_blank"><code>http://www.w3.org/TR/xquery/#id-module-feature</code></a></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment653" id="d37985e2291" headers="d37985e2228">
<p>Serialization</p>
</td>
<td class="cellalignment654" headers="d37985e2291 d37985e2231">
<p><a href="http://www.w3.org/TR/xquery/#id-serialization-feature" target="_blank"><code>http://www.w3.org/TR/xquery/#id-serialization-feature</code></a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADXDK124"></a><a id="ADXDK125"></a><a id="ADXDK126"></a><a id="ADXDK127"></a><a id="ADXDK123"></a>
<div class="props_rev_3"><a id="GUID-64686275-A3CA-4C60-934C-CA8CC6636E53"></a>
<h3 id="ADXDK-GUID-64686275-A3CA-4C60-934C-CA8CC6636E53" class="sect3"><span class="enumeration_section">7.5.2</span> Implementation-Defined Items</h3>
<div>
<p>The XQJ and XQuery specifications leave the definition of certain aspects up to the implementation. The tables in this section briefly describe the implementation-defined items for XDK.</p>
<p><a href="adx_j_xqj.htm#GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJHHFGH" title="table of xqj support">Table 7-2</a> summarizes the XQJ implementation-defined items.</p>
<div class="tblformalwide" id="GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJHHFGH">
<p class="titleintable">Table 7-2 XQJ Implementation-Defined Items</p>
<table class="cellalignment655" title="XQJ Implementation-Defined Items" summary="table of xqj support">
<thead>
<tr class="cellalignment644">
<th class="cellalignment656" id="d37985e2417">Description</th>
<th class="cellalignment656" id="d37985e2420">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2425" headers="d37985e2417">
<p>Class name of <code>XQDataSource</code> implementation</p>
</td>
<td class="cellalignment657" headers="d37985e2425 d37985e2420">
<p><code>oracle.xml.xquery.OXQDataSource</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2436" headers="d37985e2417">
<p>Properties defined on <code>OXQDataSource</code></p>
</td>
<td class="cellalignment657" headers="d37985e2436 d37985e2420">
<p>None. The username and password are silently ignored.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2445" headers="d37985e2417">
<p>JDBC connection support</p>
</td>
<td class="cellalignment657" headers="d37985e2445 d37985e2420">
<p>JDBC connections are not supported.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2452" headers="d37985e2417">
<p>Commands</p>
</td>
<td class="cellalignment657" headers="d37985e2452 d37985e2420">
<p>Not supported.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2459" headers="d37985e2417">
<p>Cancelling of query execution with method <code>XQPreparedExpression.cancel()</code></p>
</td>
<td class="cellalignment657" headers="d37985e2459 d37985e2420">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2468" headers="d37985e2417">
<p>Serialization</p>
</td>
<td class="cellalignment657" headers="d37985e2468 d37985e2420">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2475" headers="d37985e2417">
<p>Additional StAX or SAX events</p>
</td>
<td class="cellalignment657" headers="d37985e2475 d37985e2420">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2482" headers="d37985e2417">
<p>User-defined schema types</p>
</td>
<td class="cellalignment657" headers="d37985e2482 d37985e2420">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2489" headers="d37985e2417">
<p>Node identity, document order, and full-node context preservation when a node is bound to an external variable</p>
</td>
<td class="cellalignment657" headers="d37985e2489 d37985e2420">
<p>Not preserved.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2496" headers="d37985e2417">
<p>Login timeout</p>
</td>
<td class="cellalignment657" headers="d37985e2496 d37985e2420">
<p>Not supported.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2503" headers="d37985e2417">
<p>Transactions</p>
</td>
<td class="cellalignment657" headers="d37985e2503 d37985e2420">
<p>Not supported. An exception is thrown if a transaction method is called.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2511" headers="d37985e2417">
<p><code>XQItemAccessor.getNodeUri()</code> method behavior if the input node is not a document node</p>
</td>
<td class="cellalignment657" headers="d37985e2511 d37985e2420">
<p>Exception</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2520" headers="d37985e2417">
<p><code>XQItemType.getTypeName()</code> method for anonymous types</p>
</td>
<td class="cellalignment657" headers="d37985e2520 d37985e2420">
<p>A unique name.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2529" headers="d37985e2417">
<p><code>XQItemType.getSchemaURI()</code> method</p>
</td>
<td class="cellalignment657" headers="d37985e2529 d37985e2420">
<p>The schema URI is returned when a type is created from XQJ. No otherwise.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2538" headers="d37985e2417">
<p><code>XQDataFactory.createItemFromDocument()</code> and <code>bindDocument()</code> methods if the input is not a well-formed XML document</p>
</td>
<td class="cellalignment657" headers="d37985e2538 d37985e2420">
<p>Exception</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2550" headers="d37985e2417">
<p>Additional error codes returned by class <code>XQQueryException</code></p>
</td>
<td class="cellalignment657" headers="d37985e2550 d37985e2420">
<p>The qualified names of Oracle-specific error codes are in the namespace <code>http://xmlns.oracle.com/xdk/xquery/errors</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2561" headers="d37985e2417">
<p><code>ConnectionPoolXQDataSource</code>, <code>PooledXQConnection</code>, <code>XQConnectionEvent</code>, <code>XQConnectionEventListener</code> interfaces</p>
</td>
<td class="cellalignment657" headers="d37985e2561 d37985e2420">
<p>No</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2579" headers="d37985e2417">
<p><code>XQDataSource.getConnection(java.sql.Connection)</code></p>
</td>
<td class="cellalignment657" headers="d37985e2579 d37985e2420">
<p>JDBC connections are not supported. An exception is thrown if this method is called.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment657" id="d37985e2587" headers="d37985e2417">
<p><code>XQDataSource.getConnection(java.lang.String, java.lang.String)</code></p>
</td>
<td class="cellalignment657" headers="d37985e2587 d37985e2420">
<p>Same as <code>getConnection()</code>. Parameters are ignored.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note" id="GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__GUID-025084F3-A4A8-44A1-9CF2-5F1CA576DEF0">
<p class="notep1">Note:</p>
<p>XDK support for the features in <a href="adx_j_xqj.htm#GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJHHFGH" title="table of xqj support">Table 7-2</a> differs from the Oracle XML DB support for them.</p>
</div>
<p><a href="adx_j_xqj.htm#GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJBDCIH" title="Table of implementation-defined items">Table 7-3</a> summarizes the XQuery implementation-defined items.</p>
<div class="tblformalwide" id="GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJBDCIH">
<p class="titleintable">Table 7-3 XQuery Implementation-Defined Items</p>
<table class="cellalignment655" title="XQuery Implementation-Defined Items" summary="Table of implementation-defined items">
<thead>
<tr class="cellalignment644">
<th class="cellalignment658" id="d37985e2621">Item</th>
<th class="cellalignment659" id="d37985e2624">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2629" headers="d37985e2621">
<p>The version of Unicode that is used to construct expressions</p>
</td>
<td class="cellalignment661" headers="d37985e2629 d37985e2624">
<p>4.0</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2636" headers="d37985e2621">
<p>The statically-known collations</p>
</td>
<td class="cellalignment661" headers="d37985e2636 d37985e2624">
<p>Unicode codepoint collation and collations derived from classes <code>java.text.Collator</code> or <code>oracle.i18n.text.OraCollator</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2648" headers="d37985e2621">
<p>The implicit time zone.</p>
</td>
<td class="cellalignment661" headers="d37985e2648 d37985e2624">
<p>Uses the default time zone, as determined by method <code>java.util.Calendar.getInstance()</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2657" headers="d37985e2621">
<p>The circumstances in which warnings are raised, and the ways in which warnings are handled</p>
</td>
<td class="cellalignment661" headers="d37985e2657 d37985e2624">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2664" headers="d37985e2621">
<p>The method by which errors are reported to the external processing environment</p>
</td>
<td class="cellalignment661" headers="d37985e2664 d37985e2624">
<p>Exception <code>javax.xml.xquery.XQException</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2673" headers="d37985e2621">
<p>Whether the implementation is based on the rules of XML 1.0 and XML Names, or the rules of XML 1.1 and XML Names 1.1</p>
</td>
<td class="cellalignment661" headers="d37985e2673 d37985e2624">
<p>1.0</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2680" headers="d37985e2621">
<p>Any components of the static context or dynamic context that are overwritten or augmented by the implementation</p>
</td>
<td class="cellalignment661" headers="d37985e2680 d37985e2624">
<p>See <a href="adx_j_xqj.htm#GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJGHGHD" title="Table of definitions for default context property values">Table 7-5</a></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2691" headers="d37985e2621">
<p>Which of the optional axes are supported by the implementation, if the Full-Axis Feature is not supported</p>
</td>
<td class="cellalignment661" headers="d37985e2691 d37985e2624">
<p>Full support</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2698" headers="d37985e2621">
<p>The default handling of empty sequences returned by an ordering key (sortspec) in an order by clause (empty least or empty greatest)</p>
</td>
<td class="cellalignment661" headers="d37985e2698 d37985e2624">
<p><code>least</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2706" headers="d37985e2621">
<p>The names and semantics of any extension expressions (pragmas) recognized by the implementation</p>
</td>
<td class="cellalignment661" headers="d37985e2706 d37985e2624">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2713" headers="d37985e2621">
<p>The names and semantics of any option declarations recognized by the implementation</p>
</td>
<td class="cellalignment661" headers="d37985e2713 d37985e2624">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2721" headers="d37985e2621">
<p>Protocols (if any) by which parameters can be passed to an external function, and the result of the function can be returned to the invoking query</p>
</td>
<td class="cellalignment661" headers="d37985e2721 d37985e2624">
<p>Defined by XQJ</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2728" headers="d37985e2621">
<p>The process by which the specific modules to be imported by a module import are identified, if the Module feature is supported (includes processing of location hints, if any)</p>
</td>
<td class="cellalignment661" headers="d37985e2728 d37985e2624">
<p>Entity resolvers</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2735" headers="d37985e2621">
<p>Any static typing extensions supported by the implementation, if the Static Typing feature is supported</p>
</td>
<td class="cellalignment661" headers="d37985e2735 d37985e2624">
<p>Strict mode (based on subtype) and optimistic mode (based on type intersection). Optimistic mode is the default.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2742" headers="d37985e2621">
<p>The means by which serialization is invoked, if the Serialization feature is supported</p>
</td>
<td class="cellalignment661" headers="d37985e2742 d37985e2624">
<p>Defined by XQJ</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2749" headers="d37985e2621">
<p>The default values for the <code>byte-order-mark</code>, <code>encoding</code>, <code>media-type</code>, <code>normalization-form</code>, <code>omit-xml-declaration</code>, <code>standalone</code>, and <code>version</code> parameters, if the Serialization feature is supported</p>
</td>
<td class="cellalignment661" headers="d37985e2749 d37985e2624">
<p>See the interface <code>oracle.xml.xquery.OXQSerializationParameters</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment660" id="d37985e2786" headers="d37985e2621">
<p>Limits on ranges of values for various data types, as enumerated in XQuery 1.0 Specification, Section 5.3</p>
</td>
<td class="cellalignment661" headers="d37985e2786 d37985e2624">
<p>Decimal and integer values have arbitrary precision.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_xqj.htm#GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJEADJF" title="Table of implementation-defined XQUF items">Table 7-4</a> summarizes the XQuery Update Facility implementation-defined items.</p>
<div class="tblformalwide" id="GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJEADJF">
<p class="titleintable">Table 7-4 XQuery Update Facility Implementation-Defined Items</p>
<table class="cellalignment655" title="XQuery Update Facility Implementation-Defined Items" summary="Table of implementation-defined XQUF items">
<thead>
<tr class="cellalignment644">
<th class="cellalignment662" id="d37985e2808">Item</th>
<th class="cellalignment663" id="d37985e2811">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment664" id="d37985e2816" headers="d37985e2808">
<p>The revalidation modes that are supported by this implementation.</p>
</td>
<td class="cellalignment665" headers="d37985e2816 d37985e2811">
<p><code>skip</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d37985e2824" headers="d37985e2808">
<p>The default revalidation mode for this implementation.</p>
</td>
<td class="cellalignment665" headers="d37985e2824 d37985e2811">
<p><code>skip</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d37985e2832" headers="d37985e2808">
<p>The mechanism (if any) by which an external function can return an XDM instance, or a pending update list, or both to the invoking query.</p>
</td>
<td class="cellalignment665" headers="d37985e2832 d37985e2811">
<p>Returning a pending update list from an external function is not supported.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d37985e2839" headers="d37985e2808">
<p>The semantics of <code>fn:put()</code>, including the kinds of nodes accepted as operands by this function.</p>
</td>
<td class="cellalignment665" headers="d37985e2839 d37985e2811">
<p>Any node type is accepted. Storage of the node is determined by the entity resolver. See the class <code>oracle.xml.xquery.OXQEntity</code> in <a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a>, specifically the documentation for the entity kind <code>UPD_PUT</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_xqj.htm#GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJGHGHD" title="Table of definitions for default context property values">Table 7-5</a> summarizes the default initial values for the static context.</p>
<div class="tblformalwide" id="GUID-64686275-A3CA-4C60-934C-CA8CC6636E53__BAJGHGHD">
<p class="titleintable">Table 7-5 Default Initial Values for the Static Context</p>
<table class="cellalignment655" title="Default Initial Values for the Static Context" summary="Table of definitions for default context property values">
<thead>
<tr class="cellalignment644">
<th class="cellalignment666" id="d37985e2875">Context Component</th>
<th class="cellalignment667" id="d37985e2878">Default Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2883" headers="d37985e2875">
<p>Statically known namespaces</p>
</td>
<td class="cellalignment669" headers="d37985e2883 d37985e2878">
<p><code>fn</code>=<code>http://www.w3.org/2005/xpath-functions</code></p>
<p><code>xml</code>=<code>http://www.w3.org/XML/1998/namespace</code></p>
<p><code>xs</code>=<code>http://www.w3.org/2001/XMLSchema</code></p>
<p><code>xsi</code>=<code>http://www.w3.org/2001/XMLSchema-instance</code></p>
<p><code>local</code>=<code>http://www.w3.org/2005/xquery-local-functions</code></p>
<p><code>ora-ext</code>=<code>http://xmlns.oracle.com/xdk/xquery/extension</code></p>
<p><code>ora-java</code>=<code>http://xmlns.oracle.com/xdk/xquery/java</code></p>
<p><code>ora-xml</code>=<code>http://xmlns.oracle.com/xdk/xquery/xml</code></p>
<p><code>ora-fn</code>=<code>http://xmlns.oracle.com/xdk/xquery/function</code></p>
<p>Prefixes that begin with <code>ora-</code> are reserved for use by Oracle. Additional prefixes that begin with <code>ora-</code> may be added to the default statically known namespaces in a future release.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2950" headers="d37985e2875">
<p>Default element/type namespace</p>
</td>
<td class="cellalignment669" headers="d37985e2950 d37985e2878">
<p>No namespace</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2957" headers="d37985e2875">
<p>Default function namespace</p>
</td>
<td class="cellalignment669" headers="d37985e2957 d37985e2878">
<p><code>fn</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2965" headers="d37985e2875">
<p>In-scope schema types</p>
</td>
<td class="cellalignment669" headers="d37985e2965 d37985e2878">
<p>Built-in types in <code>xs</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2974" headers="d37985e2875">
<p>In-scope element declarations</p>
</td>
<td class="cellalignment669" headers="d37985e2974 d37985e2878">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2981" headers="d37985e2875">
<p>In-scope attribute declarations</p>
</td>
<td class="cellalignment669" headers="d37985e2981 d37985e2878">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2988" headers="d37985e2875">
<p>In-scope variables</p>
</td>
<td class="cellalignment669" headers="d37985e2988 d37985e2878">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e2995" headers="d37985e2875">
<p>Context item static type</p>
</td>
<td class="cellalignment669" headers="d37985e2995 d37985e2878">
<p><code>item()</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3003" headers="d37985e2875">
<p>Function signatures</p>
</td>
<td class="cellalignment669" headers="d37985e3003 d37985e2878">
<p>Functions in the <code>fn</code> namespace, and constructors for built-in atomic types</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3013" headers="d37985e2875">
<p>Statically known collations</p>
</td>
<td class="cellalignment669" headers="d37985e3013 d37985e2878">
<p>Unicode codepoint collation and collations derived from classes <code>java.text.Collator</code> or <code>oracle.i18n.text.OraCollator</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3025" headers="d37985e2875">
<p>Default collation</p>
</td>
<td class="cellalignment669" headers="d37985e3025 d37985e2878">
<p>Unicode codepoint collation:</p>
<p><code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3036" headers="d37985e2875">
<p>Construction mode</p>
</td>
<td class="cellalignment669" headers="d37985e3036 d37985e2878">
<p><code>preserve</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3044" headers="d37985e2875">
<p>Ordering mode</p>
</td>
<td class="cellalignment669" headers="d37985e3044 d37985e2878">
<p><code>ordered</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3052" headers="d37985e2875">
<p>Default order for empty sequences</p>
</td>
<td class="cellalignment669" headers="d37985e3052 d37985e2878">
<p><code>least</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3060" headers="d37985e2875">
<p>Boundary-space policy</p>
</td>
<td class="cellalignment669" headers="d37985e3060 d37985e2878">
<p><code>strip</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3068" headers="d37985e2875">
<p>Copy-namespaces mode</p>
</td>
<td class="cellalignment669" headers="d37985e3068 d37985e2878">
<p><code>preserve</code>, <code>no-inherit</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3079" headers="d37985e2875">
<p>Base URI</p>
</td>
<td class="cellalignment669" headers="d37985e3079 d37985e2878">
<p>As defined in standard</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3086" headers="d37985e2875">
<p>Statically known documents</p>
</td>
<td class="cellalignment669" headers="d37985e3086 d37985e2878">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3093" headers="d37985e2875">
<p>Statically known collections</p>
</td>
<td class="cellalignment669" headers="d37985e3093 d37985e2878">
<p>None</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment668" id="d37985e3100" headers="d37985e2875">
<p>Statically known default collection type</p>
</td>
<td class="cellalignment669" headers="d37985e3100 d37985e2878">
<p><code>node()*</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_xslt.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_xqjxdb.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>