<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1668"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XSQL%20Pages%20Publishing%20Framework%3A%20Advanced%20Topics"></a><title>Using the XSQL Pages Publishing Framework: Advanced Topics</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="servlet, XSQL, XSQL, advanced topics, style sheets, action handler errors, FOP, serializer to produce PDF, Built-in Action Handler, XSQL, Built-in Action Handler, built-in action handler elements, custom connection manager"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_xsqlpub.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_pt_c.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-02EA5758-7A8F-4FD7-B9F1-F346E759CD79"></a> <span id="PAGE" style="display:none;">25/50</span> <!-- End Header -->
<a id="ADXDK1026"></a><a id="ADXDK090"></a>
<h1 id="ADXDK-GUID-02EA5758-7A8F-4FD7-B9F1-F346E759CD79" class="sect1"><span class="enumeration_chapter">17</span> Using the XSQL Pages Publishing Framework: Advanced Topics</h1>
<div>
<p>This chapter explains how to use advanced features of the XSQL pages publishing framework. For information about basic features, see <a href="adx_j_xsqlpub.htm#GUID-A1834D2F-B962-4881-AE7A-F323FF11384D">Using the XSQL Pages Publishing Framework</a>.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqladv.htm#GUID-2B89944D-0FF0-41C7-9547-C3F363718DF6">Customizing the XSQL Configuration File Name</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-3C0CC5DB-60EB-4093-996C-E0E0463401D1">Controlling How Style Sheets Are Processed</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-9AE06DA9-6F80-4182-896A-DA902ADC57D1">Working with Array-Valued Parameters</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-399504CA-5039-4004-9500-EBAF0A516928">Setting Error Parameters on Built-In Actions</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B">Including XMLType Query Results in XSQL Pages</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-4DCCB6F2-01D9-442A-BE70-D8EC70884D67">Handling Posted XML Content</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-AD1462CE-B917-48FF-B33A-37F0CA95AB17">Producing PDF Output with the FOP Serializer</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-D39E450F-9C2C-4240-A5E3-C5FCC4D57A42">Performing XSQL Customizations</a></p>
</li>
</ul>
</div>
<a id="ADXDK19642"></a>
<div class="props_rev_3"><a id="GUID-2B89944D-0FF0-41C7-9547-C3F363718DF6"></a>
<h2 id="ADXDK-GUID-2B89944D-0FF0-41C7-9547-C3F363718DF6" class="sect2"><span class="enumeration_section">17.1</span> Customizing the XSQL Configuration File Name</h2>
<div>
<div class="section">
<p>By default, the XSQL pages framework expects the configuration file to be named <code>XSQLConfig.xml</code>. When moving between development, test, and production environments, you can switch between different versions of an XSQL configuration file. To override the name of the configuration file read by the XSQL page processor, set the Java system property <code>xsql.config</code>.</p>
<p>The simplest technique is to specify a Java Virtual Machine (JVM) command-line flag such as <code>-Dxsql.config=</code><span class="italic"><code>MyConfigFile.xml</code></span> by defining a servlet initialization parameter named <code>xsql.config</code>. Add an <code>&lt;init-param&gt;</code> element to your <code>web.xml</code> file as part of the <code>&lt;servlet&gt;</code> tag that defines the XSQL Servlet:</p>
<pre dir="ltr">&lt;servlet&gt;
  &lt;servlet-name&gt;XSQL&lt;/servlet-name&gt;
  &lt;servlet-class&gt;oracle.xml.xsql.XSQLServlet&lt;/servlet-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;xsql.config&lt;/param-name&gt;
    &lt;param-value&gt;MyConfigFile.xml&lt;/param-value&gt;
    &lt;description&gt;
       Please Use MyConfigFile.xml instead of XSQLConfig.xml
    &lt;/description&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;
</pre>
<p>The servlet initialization parameter is applicable only to the servlet-based use of the XSQL engine. When using the <code>XSQLCommandLine</code> or <code>XSQLRequest</code> programmatic interfaces, use the <code>System</code> parameter instead.</p>
<div class="infobox-note" id="GUID-2B89944D-0FF0-41C7-9547-C3F363718DF6__GUID-DBDBCC92-551C-47DE-9577-37078DFC028F">
<p class="notep1">Note:</p>
<p>The configuration file is always read from the <code>CLASSPATH</code>. For example, if you specify a custom configuration parameter file named <code>MyConfigFile.xml</code>, then the XSQL processor attempts to read the XML file as a resource from the <code>CLASSPATH</code>. In a servlet environment like Java Platform, Enterprise Edition (Java EE), you must place your <code>MyConfigFile.xml</code> in the <code>.\WEB-INF\classes</code> directory (or another top-level directory on the <code>CLASSPATH</code>). If both the servlet initialization parameter and the <code>System</code> parameter are provided, then the servlet initialization parameter value is used.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK1027"></a><a id="ADXDK19643"></a>
<div class="props_rev_3"><a id="GUID-3C0CC5DB-60EB-4093-996C-E0E0463401D1"></a>
<h2 id="ADXDK-GUID-3C0CC5DB-60EB-4093-996C-E0E0463401D1" class="sect2"><span class="enumeration_section">17.2</span> Controlling How Style Sheets Are Processed</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqladv.htm#GUID-EE8B7B0D-B5E4-4B95-9CBB-7B7C4D747980">Overriding Client Style Sheets</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-92BEFB8C-8AB0-4B03-80FE-C1C18B88310B">Controlling the Content Type of the Returned Document</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-61EA0E25-8824-4223-98C0-E839EAC130BA">Assigning the Style Sheet Dynamically</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-4CFA584A-4454-4E2A-A957-03BF39050E0C">Processing XSLT Style Sheets in the Client</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-5DC69499-8476-48C7-9368-7AFA8D92EF21">Providing Multiple Style Sheets</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19644"></a>
<div class="props_rev_3"><a id="GUID-EE8B7B0D-B5E4-4B95-9CBB-7B7C4D747980"></a>
<h3 id="ADXDK-GUID-EE8B7B0D-B5E4-4B95-9CBB-7B7C4D747980" class="sect3"><span class="enumeration_section">17.2.1</span> Overriding Client Style Sheets</h3>
<div>
<div class="section">
<p>If the current XSQL page being requested allows it, then you can supply an Extensible Stylesheet Language Transformation (XSLT) style sheet URL in the request. This technique enables you to either override the default style sheet or apply a style sheet where none is applied by default. The client-initiated style sheet URL is provided by supplying the <code>xml-stylesheet</code> parameter as part of the request. The valid values for this parameter are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Any relative URL interpreted relative to the XSQL page being processed.</p>
</li>
<li>
<p>Any absolute URL that uses the HTTP protocol scheme, provided it references a trusted host as defined in the XSQL configuration file.</p>
</li>
<li>
<p>The literal value <code>none</code>. Setting <code>xml-stylesheet=none</code> is useful during development to temporarily &#34;short-circuit&#34; the XSLT style sheet processing to determine what XML datagram your style sheet is seeing. Use this technique to determine why a style sheet is not producing expected results.</p>
</li>
</ul>
<p>You can allow client override of style sheets for an XSQL page in these ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Setting the <code>allow-client-style</code> configuration parameter to <code>no</code> in the XSQL configuration file</p>
</li>
<li>
<p>Explicitly including an <code>allow-client-style=&#34;no&#34;</code> attribute on the document element of any XSQL page</p>
</li>
</ul>
<p>If client-override of style sheets has been globally disabled by default in the XSQL configuration file, any page can still enable client-override explicitly by including an <code>allow-client-style=&#34;yes&#34;</code> attribute on the document element of that page.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19646"></a><a id="ADXDK19645"></a>
<div class="props_rev_3"><a id="GUID-92BEFB8C-8AB0-4B03-80FE-C1C18B88310B"></a>
<h3 id="ADXDK-GUID-92BEFB8C-8AB0-4B03-80FE-C1C18B88310B" class="sect3"><span class="enumeration_section">17.2.2</span> Controlling the Content Type of the Returned Document</h3>
<div>
<div class="section">
<p>Setting the content type of the data that you serve enables the requesting client to correctly interpret the data that you return. If your style sheet uses an <code>&lt;xsl:output&gt;</code> element, then the XSQL processor infers the media type and encoding of the returned document from the <code>media-type</code> and <code>encoding</code> attributes of <code>&lt;xsl:output&gt;</code>.</p>
<p>The style sheet in <a href="adx_j_xsqladv.htm#GUID-92BEFB8C-8AB0-4B03-80FE-C1C18B88310B__BABGFJAC">Example 17-1</a> uses the <code>media-type=&#34;application/vnd.ms-excel&#34;</code> attribute on <code>&lt;xsl:output&gt;</code>. This instruction transforms the results of an XSQL page containing a standard query of the <code>hr.employees</code> table into Microsoft Excel format.</p>
<p>The following XSQL page uses the style sheet in <a href="adx_j_xsqladv.htm#GUID-92BEFB8C-8AB0-4B03-80FE-C1C18B88310B__BABGFJAC">Example 17-1</a>:</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet href=&#34;empToExcel.xsl&#34; type=&#34;text/xsl&#34;?&gt;
<span class="bold">&lt;xsql:query connection=&#34;hr&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;</span>
  SELECT   employee_id, email, salary 
  FROM     employees 
  ORDER BY salary DESC
&lt;/xsql:query&gt;
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-92BEFB8C-8AB0-4B03-80FE-C1C18B88310B__BABGFJAC">
<p class="titleinexample">Example 17-1 empToExcel.xsl</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsl:stylesheet version=&#34;1.0&#34; xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;&gt;
  &lt;xsl:output method=&#34;html&#34; media-type=&#34;application/vnd.ms-excel&#34;/&gt;
  &lt;xsl:template match=&#34;/&#34;&gt;
   &lt;html&gt;
     &lt;table&gt;
       &lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;th&gt;Salary&lt;/th&gt;&lt;/tr&gt;
       &lt;xsl:for-each select=&#34;ROWSET/ROW&#34;&gt;
         &lt;tr&gt;
           &lt;td&gt;&lt;xsl:value-of select=&#34;EMPLOYEE_ID&#34;/&gt;&lt;/td&gt;
           &lt;td&gt;&lt;xsl:value-of select=&#34;EMAIL&#34;/&gt;&lt;/td&gt;
           &lt;td&gt;&lt;xsl:value-of select=&#34;SALARY&#34;/&gt;&lt;/td&gt;
         &lt;/tr&gt;
       &lt;/xsl:for-each&gt;
     &lt;/table&gt;
   &lt;/html&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19648"></a><a id="ADXDK19649"></a><a id="ADXDK19647"></a>
<div class="props_rev_3"><a id="GUID-61EA0E25-8824-4223-98C0-E839EAC130BA"></a>
<h3 id="ADXDK-GUID-61EA0E25-8824-4223-98C0-E839EAC130BA" class="sect3"><span class="enumeration_section">17.2.3</span> Assigning the Style Sheet Dynamically</h3>
<div>
<div class="section">
<p>If you include an <code>&lt;?xml-stylesheet?&gt;</code> instruction at the top of your <code>.xsql</code> file, then the XSQL page processor considers it for use in transforming the resulting XML datagram. Consider the <code>emp_test.xsql</code> page shown in <a href="adx_j_xsqladv.htm#GUID-61EA0E25-8824-4223-98C0-E839EAC130BA__BABBEJCD">Example 17-2</a>.</p>
<p>The page in <a href="adx_j_xsqladv.htm#GUID-61EA0E25-8824-4223-98C0-E839EAC130BA__BABBEJCD">Example 17-2</a> uses the <code>emp.xsl</code> style sheet to transform the results of the <code>employees</code> query in the server tier before returning the response to the requester. The processor accesses the style sheet by the URL provided in the <code>href</code> pseudo-attribute on the <code>&lt;?xml-stylesheet?&gt;</code> processing instruction.</p>
<p>For example, to change XSLT style sheets dynamically based on arguments passed to the XSQL servlet, you can use a lexical parameter in the <code>href</code> attribute of your <code>xml-stylesheet</code> processing instruction, as shown in this sample instruction:</p>
<pre dir="ltr">&lt;?xml-stylesheet type=&#34;text/xsl&#34; <span class="bold">href=&#34;{@filename}.xsl</span>&#34;?&gt;
</pre>
<p>You can then pass the value of the <code>filename</code> parameter as part of the URL request to XSQL servlet.</p>
<p>You can also use the <a href="adx_ref_xsql.htm#GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F">&lt;xsql:set-page-param&gt;</a> element in an XSQL page to set the value of the parameter based on a SQL query. For example, the XSQL page in <a href="adx_j_xsqladv.htm#GUID-61EA0E25-8824-4223-98C0-E839EAC130BA__BABIEJED">Example 17-3</a> selects the name of the style sheet to use from a table by assigning the value of a page-private parameter.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-61EA0E25-8824-4223-98C0-E839EAC130BA__BABBEJCD">
<p class="titleinexample">Example 17-2 emp_test.xsql</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
<span class="bold">&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;emp.xsl&#34;?&gt;</span>
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query&gt;
    SELECT   * 
    FROM     employees
    ORDER BY salary DESC
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-61EA0E25-8824-4223-98C0-E839EAC130BA__BABIEJED">
<p class="titleinexample">Example 17-3 emp_test_dynamic.xsql</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;<span class="bold">{@sheet}</span>.xsl&#34;?&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:set-page-param bind-params=&#34;UserCookie&#34; <span class="bold">name=&#34;sheet&#34;</span>&gt;
    SELECT stylesheet_name
    FROM   user_prefs
    WHERE  username = ?
  &lt;/xsql:set-page-param&gt;
  &lt;xsql:query&gt;
    SELECT   * 
    FROM     employees 
    ORDER BY salary DESC
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19650"></a>
<div class="props_rev_3"><a id="GUID-4CFA584A-4454-4E2A-A957-03BF39050E0C"></a>
<h3 id="ADXDK-GUID-4CFA584A-4454-4E2A-A957-03BF39050E0C" class="sect3"><span class="enumeration_section">17.2.4</span> Processing XSLT Style Sheets in the Client</h3>
<div>
<div class="section">
<p>Some browsers support processing XSLT style sheets in the client. These browsers recognize the style sheet to be processed for an XML document by using an <code>&lt;?xml-stylesheet?&gt;</code> processing instruction. The use of <code>&lt;?xml-stylesheet?&gt;</code> for this purpose is part of the W3C Recommendation from June 29, 1999 entitled &#34;Associating Stylesheets with XML Documents, Version 1.0&#34;.</p>
<p>By default, the XSQL pages processor performs XSLT transformations in the server. By adding <code>client=&#34;yes&#34;</code> to your <code>&lt;?xml-stylesheet?&gt;</code> processing instruction in your XSQL page, however, you can defer XSLT processing to the client. The processor serves the XML datagram &#34;raw&#34; with the current <code>&lt;?xml-stylesheet?&gt;</code> element at the top of the document.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19653"></a><a id="ADXDK19652"></a><a id="ADXDK19651"></a>
<div class="props_rev_3"><a id="GUID-5DC69499-8476-48C7-9368-7AFA8D92EF21"></a>
<h3 id="ADXDK-GUID-5DC69499-8476-48C7-9368-7AFA8D92EF21" class="sect3"><span class="enumeration_section">17.2.5</span> Providing Multiple Style Sheets</h3>
<div>
<div class="section">
<p>You can include multiple <code>&lt;?xml-stylesheet?&gt;</code> processing instructions at the top of an XSQL page. The instructions can contain an optional <code>media</code> pseudo-attribute. If specified, the processor case-insensitively compares the value of the <code>media</code> pseudo-attribute with the value of the User-Agent string in the HTTP header. If the value of the <code>media</code> pseudo-attribute matches part of the User-Agent string, then the processor selects the current <code>&lt;?xml-stylesheet?&gt;</code> instruction for use. Otherwise, the processor ignores the instruction and continues looking. The processor uses the first matching processing instruction in document order. An instruction <span class="italic">without</span> a <code>media</code> pseudo-attribute matches all user agents.</p>
<p><a href="adx_j_xsqladv.htm#GUID-5DC69499-8476-48C7-9368-7AFA8D92EF21__BABBBEBB">Example 17-4</a> shows multiple processing instructions at the top of an XSQL file. The processor uses <code>doyouxml-lynx.xsl</code> for Lynx browsers, <code>doyouxml-ie.xsl</code> for Internet Explorer 5.0 or 5.5 browsers, and <code>doyouxml.xsl</code> for all others.</p>
<p><a href="adx_j_xsqladv.htm#GUID-5DC69499-8476-48C7-9368-7AFA8D92EF21__g1043042" title="Attribute Name and Description are the columns.">Table 17-1</a> summarizes the supported pseudo-attributes allowed on the <code>&lt;?xml-stylesheet?&gt;</code> processing instruction.</p>
<div class="tblformalwide" id="GUID-5DC69499-8476-48C7-9368-7AFA8D92EF21__g1043042">
<p class="titleintable">Table 17-1 Pseudo-Attributes for &lt;?xml-stylesheet ?&gt;</p>
<table class="cellalignment655" title="Pseudo-Attributes for &lt;?xml-stylesheet ?&gt; " summary="Attribute Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment710" id="d90987e1014">Attribute Name</th>
<th class="cellalignment711" id="d90987e1017">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment712" id="d90987e1022" headers="d90987e1014">
<pre dir="ltr">type = &#34;string&#34;
</pre></td>
<td class="cellalignment713" headers="d90987e1022 d90987e1017">
<p>Indicates the Multipurpose Internet Mail Extensions (MIME) type of the associated style sheet. For XSLT style sheets, this attribute must be set to the string <code>text/xsl</code>.</p>
<p>This attribute may be present <span class="italic">or</span> absent when using the <code>serializer</code> attribute, depending on whether an XSLT style sheet must execute before invoking the serializer, or not.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d90987e1040" headers="d90987e1014">
<pre dir="ltr">href = &#34;URL&#34;
</pre></td>
<td class="cellalignment713" headers="d90987e1040 d90987e1017">
<p>Indicates the relative or absolute URL to the XSLT style sheet to be used. If an absolute URL is supplied that uses the <code>http</code> protocol scheme, the IP address of the resource must be a trusted host listed in the XSQL configuration file (by default, named <code>XSQLConfig.xml</code>).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d90987e1053" headers="d90987e1014">
<pre dir="ltr">media = &#34;string&#34;
</pre></td>
<td class="cellalignment713" headers="d90987e1053 d90987e1017">
<p>Performs a case-<span class="italic">insensitive</span> match on the <code>User-Agent</code> string from the HTTP header sent by the requesting device. This attribute is optional. The current <code>&lt;?xml-stylesheet?&gt;</code> processing instruction is used only if the <code>User-Agent</code> string contains the value of the <code>media</code> attribute; otherwise it is ignored.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d90987e1075" headers="d90987e1014">
<pre dir="ltr">client = &#34;boolean&#34;
</pre></td>
<td class="cellalignment713" headers="d90987e1075 d90987e1017">
<p>Defers the processing of the associated XSLT style sheet to the client if set to <code>yes</code>. The raw XML datagram is sent to the client with the current <code>&lt;?xml-stylesheet?&gt;</code> instruction at the top of the document. The default if not specified is to perform the transformation in the server.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment712" id="d90987e1088" headers="d90987e1014">
<pre dir="ltr">serializer = &#34;string&#34;
</pre></td>
<td class="cellalignment713" headers="d90987e1088 d90987e1017">
<p>By default, the XSQL page processor uses:</p>
<ul style="list-style-type: disc;">
<li>
<p>XML Document Object Model (DOM) serializer if no XSLT style sheet is used</p>
</li>
<li>
<p>XSLT processor serializer if an XSLT style sheet is used</p>
</li>
</ul>
<p>Specifying this pseudo-attribute indicates that a custom serializer implementation must be used instead.</p>
<p>Valid values are either the name of a custom serializer defined in the <code>&lt;serializerdefs&gt;</code> section of the XSQL configuration file or the string <code>java:fully.qualified.Classname</code>. If both an XSLT style sheet and the serializer attribute are present, then the processor performs the XSLT transformation first, then invokes the custom serializer to render the final result to the <code>OutputStream</code> or <code>PrintWriter</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="example" id="GUID-5DC69499-8476-48C7-9368-7AFA8D92EF21__BABBBEBB">
<p class="titleinexample">Example 17-4 Multiple &lt;?xml-stylesheet ?&gt; Processing Instructions</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; media=&#34;lynx&#34; href=&#34;doyouxml-lynx.xsl&#34; ?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; media=&#34;msie 5&#34; href=&#34;doyouxml-ie.xsl&#34; ?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;doyouxml.xsl&#34; ?&gt;
&lt;page xmlns:xsql=&#34;urn:oracle-xsql&#34; connection=&#34;demo&#34;&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK1028"></a><a id="ADXDK19654"></a>
<div class="props_rev_3"><a id="GUID-9AE06DA9-6F80-4182-896A-DA902ADC57D1"></a>
<h2 id="ADXDK-GUID-9AE06DA9-6F80-4182-896A-DA902ADC57D1" class="sect2"><span class="enumeration_section">17.3</span> Working with Array-Valued Parameters</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqladv.htm#GUID-26DC324B-D279-4894-BF15-61CF8137522C">Supplying Values for Array-Valued Parameters</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-942C03B8-1201-44CA-94A5-A23AC1B17960">Setting Array-Valued Page or Session Parameters from Strings</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292">Binding Array-Valued Parameters in SQL and PL/SQL Statements</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19656"></a><a id="ADXDK19655"></a>
<div class="props_rev_3"><a id="GUID-26DC324B-D279-4894-BF15-61CF8137522C"></a>
<h3 id="ADXDK-GUID-26DC324B-D279-4894-BF15-61CF8137522C" class="sect3"><span class="enumeration_section">17.3.1</span> Supplying Values for Array-Valued Parameters</h3>
<div>
<div class="section">
<p>Request parameters, session parameters, and page-private parameters can have arrays of strings as values. To treat to the value of a parameter as an array, add two empty square brackets to the end of its name. For example, if an HTML form is posted with four occurrences of a input control named <code>productid</code>, then use the notation <code>productid[]</code> to refer to the array-valued <code>productid</code> parameter. If you refer to an array-valued parameter without using the array-brackets notation, then the XSQL processor uses the value of the first array entry.</p>
<div class="infobox-note" id="GUID-26DC324B-D279-4894-BF15-61CF8137522C__GUID-FA0D55C1-1240-4918-862E-924EAA476063">
<p class="notep1">Note:</p>
<p>The XSQL processor does not support use of numbers inside the array brackets. That is, you can refer to <code>productid</code> or <code>productid[]</code>, but not <code>productid[2]</code>.</p>
</div>
<p>Suppose that you refer to an array-valued parameter as a lexical substitution parameter inside an action handler attribute value or inside the content of an action handler element. The XSQL page processor converts its value to a comma-delimited list of non-null and nonempty strings in the order that they exist in the array. <a href="adx_j_xsqladv.htm#GUID-26DC324B-D279-4894-BF15-61CF8137522C__BABEGJHI">Example 17-5</a> shows an XSQL page with an array-valued parameter.</p>
<p>You can invoke the XSQL command-line utility to supply multiple values for the <code>productid</code> parameter in <code>Page.xsql</code>:</p>
<pre dir="ltr">xsql Page.xsql productid=111 productid=222 productid=333 productid=444
</pre>
<p>The preceding command sets the <code>productid[]</code> array-valued parameter to the value {&#34;<code>111</code>&#34;,&#34;<code>222</code>&#34;,&#34;<code>333</code>&#34;,&#34;<code>444</code>&#34;}. The XSQL page processor replaces the <code>{@productid[]}</code> expression in the query with the string &#34;111,222,333,444&#34;.</p>
<p>You can also pass multivalued parameters programmatically through the <code>XSQLRequest</code> application programming interface (API), which accepts a <code>java.util.Dictionary</code> of named parameters. You can use a <code>Hashtable</code> and invoke its <code>put(name,value)</code> method to add <code>String</code>-valued parameters to the request. To add multivalued parameters, put a value of type <code>String[]</code> instead of type <code>String</code>.</p>
<div class="infobox-note" id="GUID-26DC324B-D279-4894-BF15-61CF8137522C__GUID-7FF8435E-0F70-4262-9E5D-33283B9601FC">
<p class="notep1">Note:</p>
<p>Only request parameters, page-private parameters, and session parameters can use string arrays. The <a href="adx_ref_xsql.htm#GUID-69D0F80D-6C91-458B-B19A-41E2FD4F3400">&lt;xsql:set-stylesheet-param&gt;</a> and <a href="adx_ref_xsql.htm#GUID-AAD3692A-5322-4167-9F20-0BEB81413765">&lt;xsql:set-cookie&gt;</a> actions support only working with parameters as simple string values. To refer to a multivalued parameter in your XSLT style sheet, use <a href="adx_ref_xsql.htm#GUID-7E25FEC6-00BE-4CDB-8841-35B4FF82D4AC">&lt;xsql:include-param&gt;</a> to include the multivalued parameter into your XSQL datapage, then use an XPath expression in the style sheet to refer to the values from the datapage.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-26DC324B-D279-4894-BF15-61CF8137522C__BABEGJHI">
<p class="titleinexample">Example 17-5 Using an Array-Valued Parameter in an XSQL Page</p>
<pre dir="ltr">&lt;page xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query&gt;
    SELECT description
    FROM product
    WHERE productid in ( {@productid[]} )  /* Using lexical parameter */
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19657"></a>
<div class="props_rev_3"><a id="GUID-942C03B8-1201-44CA-94A5-A23AC1B17960"></a>
<h3 id="ADXDK-GUID-942C03B8-1201-44CA-94A5-A23AC1B17960" class="sect3"><span class="enumeration_section">17.3.2</span> Setting Array-Valued Page or Session Parameters from Strings</h3>
<div>
<div class="section">
<p>You can set the value of a page-private parameter or session parameter to a string-array value by using the array brackets notation on the name:</p>
<pre dir="ltr">&lt;!-- param name contains array brackets --&gt;
&lt;xsql:set-page-param name=&#34;names[]&#34; value=&#34;Tom Jane Joe&#34;/&gt;
</pre>
<p>You set the value similarly for session parameters, as shown in this example:</p>
<pre dir="ltr">&lt;xsql:set-session-param name=&#34;dates[]&#34; value=&#34;12-APR-1962 15-JUL-1968&#34;/&gt;
</pre>
<p>By default, when the name of the parameter uses array brackets, the XSQL processor treats the value as a space-or-comma-delimited list and tokenizes it.</p>
<p>The resulting string array value contains these separate tokens. In the preceding examples, the <code>names[]</code> parameter is the string array {&#34;<code>Tom</code>&#34;, &#34;<code>Jane</code>&#34;, &#34;<code>Joe</code>&#34;} and the <code>dates[]</code> parameter is the string array {&#34;<code>12-APR-1962</code>&#34;, &#34;<code>15-JUL-1968</code>&#34;}.</p>
<p>To handle strings that contain spaces, the tokenization algorithm first checks the string for the presence of commas. If at least one comma is found in the string, then commas are used as the token delimiter. For example, this action sets the value of the <code>names[]</code> parameter to the string array {&#34;<code>Tom Jones</code>&#34;, &#34;<code>Jane York</code>&#34;}:</p>
<pre dir="ltr">&lt;!-- param name contains array brackets --&gt;
&lt;xsql:set-page-param name=&#34;names[]&#34; value=&#34;Tom Jones,Jane York&#34;/&gt;
</pre>
<p>By default, when you set a parameter whose name does not end with the array-brackets, then the string-tokenization does not occur. Thus, this action sets the parameter <code>names</code> to the literal string &#34;<code>Tom Jones,Jane York</code>&#34;:</p>
<pre dir="ltr">&lt;!-- param name does NOT contain array brackets --&gt;
&lt;xsql:set-page-param name=&#34;names&#34; value=&#34;Tom Jones,Jane York&#34;/&gt;
</pre>
<p>You can force the string to be tokenized by including the <code>treat-list-as-array=&#34;yes&#34;</code> attribute on the <a href="adx_ref_xsql.htm#GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F">&lt;xsql:set-page-param&gt;</a> or <a href="adx_ref_xsql.htm#GUID-95912581-8779-4BF5-8B48-7BD49919AFE5">&lt;xsql:set-session-param&gt;</a> actions. When this attribute is set, the XSQL processor assigns a comma-delimited string of the tokenized values to the parameter. For example, this action sets the <code>names</code> parameter to the literal string &#34;<code>Tom,Jane,Joe</code>&#34;:</p>
<pre dir="ltr">&lt;!-- param name does NOT contain array brackets --&gt;
&lt;xsql:set-page-param name=&#34;names&#34; value=&#34;Tom Jane Joe&#34;
                     treat-list-as-array=&#34;yes&#34;/&gt;
</pre>
<p>When you are setting the value of a simple string-valued parameter and you are tokenizing the value with <code>treat-list-as-array=&#34;yes&#34;</code>, you can include the <code>quote-array-values=&#34;yes&#34;</code> attribute to surround the comma-delimited values with single quotation marks. Thus, this action assigns the literal string value &#34;<code>&#39;Tom Jones&#39;,&#39;Jane York&#39;,&#39;Jimmy&#39;</code>&#34; to the <code>names</code> parameter:</p>
<pre dir="ltr">&lt;!--  param name does NOT contain array brackets --&gt;
&lt;xsql:set-page-param name=&#34;names&#34; value=&#34;Tom Jones,Jane York,Jimmy&#34;
                     treat-list-as-array=&#34;yes&#34;
                     quote-array-values=&#34;yes&#34;/&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19659"></a><a id="ADXDK19660"></a><a id="ADXDK19661"></a><a id="ADXDK19658"></a>
<div class="props_rev_3"><a id="GUID-81F6D961-7250-4527-82E3-E0100E399292"></a>
<h3 id="ADXDK-GUID-81F6D961-7250-4527-82E3-E0100E399292" class="sect3"><span class="enumeration_section">17.3.3</span> Binding Array-Valued Parameters in SQL and PL/SQL Statements</h3>
<div>
<div class="section">
<p>Where string-valued scalar bind variables are supported in an XSQL page, you can also bind array-valued parameters. Use the array parameter name, for example, <code>myparam[]</code>, in the list of parameter names that you supply for the <code>bind-params</code> attribute. This technique enables you to process array-valued parameters in SQL statements and PL/SQL procedures.</p>
<p>The XSQL processor binds array-valued parameters as a nested table object type named <code>XSQL_TABLE_OF_VARCHAR</code>. You must create this type in your current schema with this DDL statement:</p>
<pre dir="ltr">CREATE TYPE xsql_table_of_varchar AS TABLE OF VARCHAR2(2000);
</pre>
<p>Although the type must have the name <code>xsql_table_of_varchar</code>, you can change the dimension of the <code>VARCHAR2</code> string, if necessary. You must make the dimension long enough for any string value you expect to handle in your array-valued string parameters.</p>
<p>Consider the PL/SQL function shown in <a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABHBICE">Example 17-6</a>.</p>
<p>The XSQL page in <a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABFJGDH">Example 17-7</a> shows how to bind two array-valued parameters in a SQL statement that uses <code>testTableFunction</code>.</p>
<p>Executing the XSQL page in <a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABFJGDH">Example 17-7</a> generates this datagram:</p>
<pre dir="ltr">&lt;page someNames=&#34;aa,bb,cc&#34; someValues=&#34;11,22,33&#34;&gt;
  &lt;ROWSET&gt;
    &lt;ROW num=&#34;1&#34;&gt;
      &lt;EXAMPLE&gt;aa=11:bb=22:cc=33&lt;/EXAMPLE&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
&lt;/page&gt;
</pre>
<p>This technique shows that the XSQL processor bound the array-valued <code>someNames[]</code> and <code>someValues[]</code> parameters as table collection types. It iterated over the values and concatenated them to produce the &#34;<code>aa=11:bb=22:cc=33</code>&#34; string value as the return value of the PL/SQL function.</p>
<p>You can mix any number of regular parameters and array-valued parameters in your bind-params string. Use the array-bracket notation for the parameters to be bound as arrays.</p>
<div class="infobox-note" id="GUID-81F6D961-7250-4527-82E3-E0100E399292__GUID-871921D0-7228-4172-A515-197120A522FE">
<p class="notep1">Note:</p>
<p>If you run the page in <a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABFJGDH">Example 17-7</a> but you have not created the <code>XSQL_TABLE_OF_VARCHAR</code> type as showd earlier, then you receive an error such as:</p>
<pre dir="ltr">&lt;page someNames=&#34;aa,bb,cc&#34; someValues=&#34;11,22,33&#34;&gt;
  &lt;xsql-error code=&#34;17074&#34; action=&#34;xsql:query&#34;&gt;
    &lt;statement&gt;
     select testTableFunction(?,?) as example from dual
    &lt;/statement&gt;
    &lt;message&gt;
      invalid name pattern: SCOTT.XSQL_TABLE_OF_VARCHAR
    &lt;/message&gt;
  &lt;/xsql-error&gt;
&lt;/page&gt;
</pre></div>
<p>Because the XSQL processor binds array parameters as nested table collection types, you can use the <code>TABLE()</code> operator with the <code>CAST()</code> operator in SQL to treat the nested table bind variable value as a table of values. You can then query this table. This technique is especially useful in subqueries. The page in <a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABJDBIB">Example 17-8</a> uses an array-valued parameter containing employee IDs to restrict the rows queried from <code>hr.employees</code>.</p>
<p>The XSQL page in <a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABJDBIB">Example 17-8</a> generates a datagram such as:</p>
<pre dir="ltr">&lt;page&gt;
  &lt;ROWSET&gt;
    &lt;ROW num=&#34;1&#34;&gt;
      &lt;NAME&gt;Alana Walsh&lt;/NAME&gt;
      &lt;SALARY&gt;3100&lt;/SALARY&gt;
    &lt;/ROW&gt;
    &lt;ROW num=&#34;2&#34;&gt;
      &lt;NAME&gt;Kevin Feeny&lt;/NAME&gt;
      &lt;SALARY&gt;3000&lt;/SALARY&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
&lt;/page&gt;
</pre>
<p><a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABFJGDH">Example 17-7</a> and <a href="adx_j_xsqladv.htm#GUID-81F6D961-7250-4527-82E3-E0100E399292__BABJDBIB">Example 17-8</a> show how to use <code>bind-params</code> with <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a>, but these techniques work for <a href="adx_ref_xsql.htm#GUID-B44BC32C-50EF-480F-834E-062BD5AE4866">&lt;xsql:dml&gt;</a>, <a href="adx_ref_xsql.htm#GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7">&lt;xsql:include-owa&gt;</a>, <a href="adx_ref_xsql.htm#GUID-0E5978EA-0322-45EC-8B22-EA0F3C41D9B8">&lt;xsql:ref-cursor-function&gt;</a>, and other actions that accept SQL or PL/SQL statements.</p>
<p>PL/SQL index-by tables work with the OCI JDBC driver but not the JDBC thin driver. By using the nested table collection type <code>XSQL_TABLE_OF_VARCHAR</code>, you can use array-valued parameters with either driver. In this way you avoid losing the programming flexibility of working with array values in PL/SQL.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-81F6D961-7250-4527-82E3-E0100E399292__BABHBICE">
<p class="titleinexample">Example 17-6 testTableFunction</p>
<pre dir="ltr">FUNCTION testTableFunction(p_name  XSQL_TABLE_OF_VARCHAR,
                           p_value XSQL_TABLE_OF_VARCHAR)
RETURN VARCHAR2 IS
  lv_ret     VARCHAR2(4000);
  lv_numElts INTEGER;
BEGIN
  IF p_name IS NOT NULL THEN
    lv_numElts := p_name.COUNT;
    FOR j IN 1..lv_numElts LOOP
      IF (j &gt; 1) THEN
        lv_ret := lv_ret||&#39;:&#39;;
      END IF;
      lv_ret := lv_ret||p_name(j)||&#39;=&#39;||p_value(j);
    END LOOP;
  END IF;
  RETURN lv_ret;
END;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-81F6D961-7250-4527-82E3-E0100E399292__BABFJGDH">
<p class="titleinexample">Example 17-7 XSQL Page with Array-Valued Parameters</p>
<pre dir="ltr">&lt;page xmlns:xsql=&#34;urn:oracle-xsql&#34; connection=&#34;demo&#34;
      someNames=&#34;aa,bb,cc&#34; someValues=&#34;11,22,33&#34;&gt;
  &lt;xsql:query bind-params=&#34;someNames[] someValues[]&#34;&gt;
    SELECT testTableFunction(?,?) AS example 
    FROM dual
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-81F6D961-7250-4527-82E3-E0100E399292__BABJDBIB">
<p class="titleinexample">Example 17-8 Using an Array-Valued Parameter to Restrict Rows</p>
<pre dir="ltr">&lt;page xmlns:xsql=&#34;urn:oracle-xsql&#34; connection=&#34;hr&#34;&gt;
  &lt;xsql:set-page-param name=&#34;someEmployees[]&#34; value=&#34;196,197&#34;/&gt;
  &lt;xsql:query bind-params=&#34;someEmployees[]&#34;&gt;
    SELECT first_name||&#39; &#39;||last_name AS name, salary
    FROM employees
    WHERE employee_id IN (
        SELECT * FROM TABLE(CAST( ? AS xsql_table_of_varchar))
     )
   &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19663"></a><a id="ADXDK19662"></a>
<div class="props_rev_3"><a id="GUID-399504CA-5039-4004-9500-EBAF0A516928"></a>
<h2 id="ADXDK-GUID-399504CA-5039-4004-9500-EBAF0A516928" class="sect2"><span class="enumeration_section">17.4</span> Setting Error Parameters on Built-In Actions</h2>
<div>
<div class="section">
<p>The XSQL page processor determines whether an action encountered a nonfatal error during its execution. For example, an attempt to insert a row or invoke a stored procedure can fail with a database exception that gets included in your XSQL data page as an <code>&lt;xsql-error&gt;</code> element.</p>
<p>You can set a page-private parameter in a built-in XSQL action when the action reports a nonfatal error. Use the <code>error-param</code> attribute on the action to enable this feature. For example, to set the parameter &#34;<code>dml-error</code>&#34; when the statement inside the <a href="adx_ref_xsql.htm#GUID-B44BC32C-50EF-480F-834E-062BD5AE4866">&lt;xsql:dml&gt;</a> action encounters a database error, you can use the technique shown in <a href="adx_j_xsqladv.htm#GUID-399504CA-5039-4004-9500-EBAF0A516928__BABFDBEB">Example 17-9</a>.</p>
<p>If the execution of the <code>&lt;xsql:dml&gt;</code> action encounters an error, then the XSQL processor sets the page-private parameter <code>dml-error</code> to the string &#34;<code>Error</code>&#34;. If the execution is successful, then the XSQL processor does not assign a value to the error parameter. In <a href="adx_j_xsqladv.htm#GUID-399504CA-5039-4004-9500-EBAF0A516928__BABFDBEB">Example 17-9</a>, if the page-private parameter <code>dml-error</code> already exists, then it retains its current value. If it does not exist, then it continues not to exist.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-399504CA-5039-4004-9500-EBAF0A516928__BABFDBEB">
<p class="titleinexample">Example 17-9 Setting an Error Parameter</p>
<pre dir="ltr">&lt;xsql:dml error-param=&#34;dml-error&#34; bind-params=&#34;val&#34;&gt;
  INSERT INTO yourtable(somecol) 
    VALUES(?)
&lt;/xsql:dml&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDK19665"></a><a id="ADXDK19664"></a>
<div class="props_rev_3"><a id="GUID-12DFFF06-F092-4FFB-8EF1-AA3B3C0D6255"></a>
<h3 id="ADXDK-GUID-12DFFF06-F092-4FFB-8EF1-AA3B3C0D6255" class="sect3"><span class="enumeration_section">17.4.1</span> Using Conditional Logic with Error Parameters</h3>
<div>
<div class="section">
<p>By using the error parameter in combination with <a href="adx_ref_xsql.htm#GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613">&lt;xsql:if-param&gt;</a>, you can achieve conditional behavior in your XSQL page template. For example, assume that your connection definition sets the <code>AUTOCOMMIT</code> flag to <code>false</code> on the connection named <code>demo</code> in the XSQL configuration file. The XSQL page shown in <a href="adx_j_xsqladv.htm#GUID-12DFFF06-F092-4FFB-8EF1-AA3B3C0D6255__BABJGFFA">Example 17-10</a> shows how you might roll back the changes made by a previous action if a subsequent action encounters an error.</p>
<p>If you have written custom action handlers, and if your custom actions invoke <code>reportMissingAttribute()</code>, <code>reportError()</code>, or <code>reportErrorIncludingStatement()</code> to report nonfatal action errors, then they automatically pick up this feature as well.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-12DFFF06-F092-4FFB-8EF1-AA3B3C0D6255__BABJGFFA">
<p class="titleinexample">Example 17-10 Achieving Conditional Behavior with an Error Parameter</p>
<pre dir="ltr">&lt;!-- NOTE: Connection &#34;demo&#34; must not set to autocommit! --&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:dml error-param=&#34;dml-error&#34; bind-params=&#34;val&#34;&gt;
    INSERT INTO yourtable(somecol) 
      VALUES(?)
  &lt;/xsql:dml&gt;
  &lt;!-- This second statement will commit if it succeeds --&gt;
  &lt;xsql:dml commit=&#34;yes&#34; error-param=&#34;dml-error&#34; bind-params=&#34;val2&#34;&gt;
    INSERT INTO anothertable(anothercol)
      VALUES(?)
  &lt;/xsql:dml&gt;
  &lt;xsql:if-param name=&#34;dml-error&#34; exists=&#34;yes&#34;&gt;
    &lt;xsql:dml&gt;
      ROLLBACK
    &lt;/xsql:dml&gt;
  &lt;/xsql:if-param&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19667"></a><a id="ADXDK19666"></a>
<div class="props_rev_3"><a id="GUID-52292147-F1A3-4C5D-942A-41CBDAC5499D"></a>
<h3 id="ADXDK-GUID-52292147-F1A3-4C5D-942A-41CBDAC5499D" class="sect3"><span class="enumeration_section">17.4.2</span> Formatting XSQL Action Handler Errors</h3>
<div>
<div class="section">
<p>Errors raised by the processing of XSQL action elements are reported as XML elements in a uniform way. This fact enables XSLT style sheets to detect their presence and optionally format them for presentation.</p>
<p>The action element in error is replaced in the page by this element:</p>
<pre dir="ltr">&lt;xsql-error action=&#34;xxx&#34;&gt; 
</pre>
<p>Depending on the error the <code>&lt;xsql-error&gt;</code> element contains:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>A nested <code>&lt;message&gt;</code> element</p>
</li>
<li>
<p>A <code>&lt;statement&gt;</code> element with the offending SQL statement</p>
</li>
</ul>
<p><a href="adx_j_xsqladv.htm#GUID-52292147-F1A3-4C5D-942A-41CBDAC5499D__BABDCABJ">Example 17-11</a> shows an XSLT style sheet that uses this information to display error information on the screen.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-52292147-F1A3-4C5D-942A-41CBDAC5499D__BABDCABJ">
<p class="titleinexample">Example 17-11 XSLT Style Sheet</p>
<pre dir="ltr">&lt;xsl:if test=&#34;//xsql-error&#34;&gt;
     &lt;table style=&#34;background:yellow&#34;&gt;
        &lt;xsl:for-each select=&#34;//xsql-error&#34;&gt;
           &lt;tr&gt;
            &lt;td&gt;&lt;b&gt;Action&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select=&#34;@action&#34;/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr valign=&#34;top&#34;&gt;
            &lt;td&gt;&lt;b&gt;Message&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select=&#34;message&#34;/&gt;&lt;/td&gt;
           &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
     &lt;/table&gt;
&lt;/xsl:if&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19669"></a><a id="ADXDK19670"></a><a id="ADXDK19671"></a><a id="ADXDK19672"></a><a id="ADXDK19673"></a><a id="ADXDK19668"></a>
<div class="props_rev_3"><a id="GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B"></a>
<h2 id="ADXDK-GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B" class="sect2"><span class="enumeration_section">17.5</span> Including XMLType Query Results in XSQL Pages</h2>
<div>
<div class="section">
<p>Oracle Database supports <code>XMLType</code> for storing and querying XML-based database content. You can exploit database XML features to produce XML for inclusion in your XSQL pages by using one of these techniques:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> handles any query including columns of type <code>XMLType</code>, but it handles XML markup in <code>CLOB</code> and <code>VARCHAR2</code> columns as literal text.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#GUID-AE499EA9-A8C5-4274-98C6-8499ADF7ED55">&lt;xsql:include-xml&gt;</a> parses and includes a single <code>CLOB</code> or string-based XML document retrieved from a query.</p>
</li>
</ul>
<p>One difference between the preceding approaches is that <code>&lt;xsql:include-xml&gt;</code> parses the literal XML appearing in a CLOB or string value as needed to turn it into a tree of elements and attributes. In contrast, <code>&lt;xsql:query&gt;</code> leaves XML markup in <code>CLOB</code> or string-valued columns as literal text.</p>
<p>Another difference is that while <code>&lt;xsql:query&gt;</code> can handle query results of any number of columns and rows, <code>&lt;xsql:include-xml&gt;</code> works on a single column of a single row. Accordingly, when using <code>&lt;xsql:include-xml&gt;</code>, the <code>SELECT</code> statement inside it returns a single row containing a single column. The column can either be a <code>CLOB</code> or a <code>VARCHAR2</code> value containing a well-formed XML document. The XSQL engine parses the XML document and includes it in your XSQL page.</p>
<p><a href="adx_j_xsqladv.htm#GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABCEICG">Example 17-12</a> uses nested <code>XmlAgg()</code> functions to aggregate the results of a dynamically-constructed XML document containing departments and nested employees. The functions aggregate the document into a single &#34;result&#34; document wrapped in a <code>&lt;DepartmentList&gt;</code> element.</p>
<p>In another example, suppose you have many <code>&lt;Movie&gt;</code> XML documents stored in a table of <code>XMLType</code> called <code>movies.</code> Each document might look like the one shown in <a href="adx_j_xsqladv.htm#GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABEGAFH">Example 17-13</a>.</p>
<p>You can use the built-in XPath query features to extract an aggregate list of all cast members who have received Oscar awards from any movie in the database. <a href="adx_j_xsqladv.htm#GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABFHAFD">Example 17-14</a> shows a sample query.</p>
<p>To include this query result of <code>XMLType</code> in your XSQL page, paste the query inside an <code>&lt;xsql:query&gt;</code> element. Make sure you include an alias for the query expression, as shown in <a href="adx_j_xsqladv.htm#GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABBHBFF">Example 17-15</a>.</p>
<p>You can use the combination of <code>XmlElement()</code> and <code>XmlAgg()</code> to make the database aggregate all of the XML fragments identified by the query into single, well-formed XML document. The functions work to produce a well-formed result like this:</p>
<pre dir="ltr">&lt;AwardedActors&gt;
  &lt;Actor&gt;...&lt;/Actor&gt;
  &lt;Actress&gt;...&lt;/Actress&gt;
&lt;/AwardedActors&gt;
</pre>
<p>You can use the standard XSQL bind variable capabilities in the middle of an XPath expression if you concatenate the bind variable into the expression. For example, to parameterize the value <code>Oscar</code> into a parameter named <code>award-from</code>, you can use an XSQL page like the one shown in <a href="adx_j_xsqladv.htm#GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABIEIIH">Example 17-16</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABCEICG">
<p class="titleinexample">Example 17-12 Aggregating a Dynamically-Constructed XML Document</p>
<pre dir="ltr">&lt;xsql:query connection=&#34;hr&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT XmlElement(&#34;DepartmentList&#34;,
           XmlAgg(
             XmlElement(&#34;Department&#34;, 
               XmlAttributes(department_id AS &#34;Id&#34;),
               XmlForest(department_name AS &#34;Name&#34;),
               (SELECT XmlElement(&#34;Employees&#34;,
                         XmlAgg( 
                           XmlElement(&#34;Employee&#34;,
                             XmlAttributes(employee_id AS &#34;Id&#34;),
                             XmlForest(first_name||&#39; &#39;||last_name AS &#34;Name&#34;,
                                       salary   AS &#34;Salary&#34;,
                                       job_id   AS &#34;Job&#34;)
                           )
                         )
                       )
                FROM employees e 
                WHERE e.department_id = d.department_id
               )
             )
           )
         ) AS result
  FROM departments d
  ORDER BY department_name
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABEGAFH">
<p class="titleinexample">Example 17-13 Movie XML Document</p>
<pre dir="ltr">&lt;Movie Title=&#34;The Talented Mr.Ripley&#34; RunningTime=&#34;139&#34; Rating=&#34;R&#34;&gt;
  &lt;Director&gt;
    &lt;First&gt;Anthony&lt;/First&gt;
    &lt;Last&gt;Minghella&lt;/Last&gt;
  &lt;/Director&gt;
  &lt;Cast&gt;
    &lt;Actor Role=&#34;Tom Ripley&#34;&gt;
      &lt;First&gt;Matt&lt;/First&gt;
      &lt;Last&gt;Damon&lt;/Last&gt;
    &lt;/Actor&gt;
    &lt;Actress Role=&#34;Marge Sherwood&#34;&gt;
      &lt;First&gt;Gwyneth&lt;/First&gt;
      &lt;Last&gt;Paltrow&lt;/Last&gt;
    &lt;/Actress&gt;
    &lt;Actor Role=&#34;Dickie Greenleaf&#34;&gt;
      &lt;First&gt;Jude&lt;/First&gt;
      &lt;Last&gt;Law&lt;/Last&gt;
      &lt;Award From=&#34;BAFTA&#34; Category=&#34;Best Supporting Actor&#34;/&gt;
    &lt;/Actor&gt;
  &lt;/Cast&gt;
&lt;/Movie&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABFHAFD">
<p class="titleinexample">Example 17-14 Using XPath to Extract an Aggregate List</p>
<pre dir="ltr">SELECT XMLELEMENT(&#34;AwardedActors&#34;,
           XMLAGG(EXTRACT(VALUE(m),
                  &#39;/Movie/Cast/*[Award[@From=&#34;Oscar&#34;]]&#39;)))
FROM movies m
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABBHBFF">
<p class="titleinexample">Example 17-15 Including an XMLType Query Result</p>
<pre dir="ltr">&lt;xsql:query connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT XMLELEMENT(&#34;AwardedActors&#34;,
           XMLAGG(EXTRACT(VALUE(m),
                  &#39;/Movie/Cast/*[Award[@From=&#34;Oscar&#34;]]&#39;))) AS result
  FROM movies m
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-77A49187-C2FD-4799-A3C3-EB209BE75F8B__BABIEIIH">
<p class="titleinexample">Example 17-16 Using XSQL Bind Variables in an XPath Expression</p>
<pre dir="ltr">&lt;xsql:query connection=&#34;orcl92&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;
            award-from=&#34;Oscar&#34;  bind-params=&#34;award-from&#34;&gt;
  /* Using a bind variable in an XPath expression */
  SELECT XMLELEMENT(&#34;AwardedActors&#34;,
           XMLAGG(EXTRACT(VALUE(m),
                  &#39;/Movie/Cast/*[Award[@From=&#34;&#39;|| ? ||&#39;&#34;]]&#39;))) AS result
  FROM movies m
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19674"></a>
<div class="props_rev_3"><a id="GUID-4DCCB6F2-01D9-442A-BE70-D8EC70884D67"></a>
<h2 id="ADXDK-GUID-4DCCB6F2-01D9-442A-BE70-D8EC70884D67" class="sect2"><span class="enumeration_section">17.6</span> Handling Posted XML Content</h2>
<div>
<div class="section">
<p>In addition to simplifying the assembly and transformation of XML content, the XSQL pages framework enables you to handle posted XML content. Built-in actions provide these advantages:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Simplify the handling of posted data from both XML document and HTML forms</p>
</li>
<li>
<p>Enable data to be posted directly into a database table by using XSU</p>
</li>
</ul>
<p>XSU can perform database inserts, updates, and deletes based on the content of an XML document in canonical form for a target table or view. For a specified table, the canonical XML form of its data is given by one row of XML output from a <code>SELECT *</code> query. When given an XML document in this form, XSU can automate the DML operation.</p>
<p>By combining XSU with XSLT, you can transform XML in any format into the canonical format expected by a given table. XSU can then perform DML on the resulting canonical XML.</p>
<p>The following built-in XSQL actions make it possible for you to exploit this capability from within your XSQL pages:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_ref_xsql.htm#GUID-A45E6112-F904-4665-959B-1AF39413E2F7">&lt;xsql:insert-request&gt;</a></p>
<p>Insert the optionally transformed XML document that was posted in the request into a table.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#GUID-5514ECD7-5E7E-49D9-B52B-C8374404EC5B">&lt;xsql:update-request&gt;</a></p>
<p>Update the optionally transformed XML document that was posted in the request into a table or view.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#GUID-87E28D28-C22E-4468-BA26-3EE5801C14B4">&lt;xsql:delete-request&gt;</a></p>
<p>Delete the optionally transformed XML document that was posted in the request from a table or view.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#GUID-E21DCCD0-AE99-47FA-A5D5-DD064D6E74CB">&lt;xsql:insert-param&gt;</a></p>
<p>Insert the optionally transformed XML document that was posted as the value of a request parameter into a table or view.</p>
</li>
</ul>
<p>If you target a database view with your insert, then you can create <code>INSTEAD OF INSERT</code> triggers on the view to further automate the handling of the posted information. For example, an <code>INSTEAD OF INSERT</code> trigger on a view can use PL/SQL to check for the existence of a record and intelligently choose whether to do an <code>INSERT</code> or an <code>UPDATE</code> depending on the result of this check.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19676"></a><a id="ADXDK19675"></a>
<div class="props_rev_3"><a id="GUID-56E150D2-3FE9-4ED4-A39B-9374B5CC4351"></a>
<h3 id="ADXDK-GUID-56E150D2-3FE9-4ED4-A39B-9374B5CC4351" class="sect3"><span class="enumeration_section">17.6.1</span> Understanding XML Posting Options</h3>
<div>
<p>The XSQL pages framework can handle posted data in these scenarios:</p>
<ul style="list-style-type: disc;">
<li>
<p>A client program sends an HTTP <code>POST</code> message that targets an XSQL page. The request body contains an XML document; the HTTP header reports a <code>ContentType</code> of &#34;<code>text/xml</code>&#34;.</p>
<p>In this case, <code>&lt;xsql:insert-request&gt;</code>, <code>&lt;xsql:update-request&gt;</code>, or <code>&lt;xsql:delete-request&gt;</code> can insert, update, or delete the content of the posted XML in the target table. If you transform the posted XML with XSLT, then the posted document is the source for the transformation.</p>
</li>
<li>
<p>A client program sends an HTTP <code>GET</code> request for an XSQL page, one of whose parameters contains an XML document.</p>
<p>In this case, you can use the <code>&lt;xsql:insert-param&gt;</code> action to insert the content of the posted XML parameter value in the target table. If you transform the posted XML document with XSLT, then the XML document in the parameter value is the source document for this transformation.</p>
</li>
<li>
<p>A browser submits an HTML form with <code>method</code>=<code>&#34;POST&#34;</code> whose action targets an XSQL page. The request body of the HTTP <code>POST</code> message contains an encoded version of the form fields and values with a <code>ContentType</code> of &#34;<code>application/x-www-form-urlencoded</code>&#34;.</p>
<p>In this case, the request does not contain an XML document, but an encoded version of the form parameters. To make all three of these cases uniform, however, the XSQL page processor materializes on demand an XML document from the form parameters, session variables, and cookies contained in the request. The XSLT processor transforms this dynamically-materialized XML document into canonical form for DML by using <code>&lt;xsql:insert&gt;</code>, <code>&lt;xsql:update-request&gt;</code>, or <code>&lt;xsql:delete-request&gt;</code>.</p>
</li>
</ul>
<p>When working with posted HTML forms, the dynamically materialized XML document has the form shown in <a href="adx_j_xsqladv.htm#GUID-56E150D2-3FE9-4ED4-A39B-9374B5CC4351__BABBACHJ">Example 17-17</a>.</p>
<p>If multiple parameters are posted with the same name, then the XSQL processor automatically creates multiple <code>&lt;row&gt;</code> elements to make subsequent processing easier. Assume that a request posts or includes these parameters and values:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>id</code> = <code>101</code></p>
</li>
<li>
<p><code>name</code> = <code>Steve</code></p>
</li>
<li>
<p><code>id</code> = <code>102</code></p>
</li>
<li>
<p><code>name</code> = <code>Sita</code></p>
</li>
<li>
<p><code>operation</code> = <code>update</code></p>
</li>
</ul>
<p>The XSQL page processor creates a set of parameters as follows:</p>
<pre dir="ltr">&lt;request&gt;
  &lt;parameters&gt;
    &lt;row&gt;
      &lt;id&gt;101&lt;/id&gt;
      &lt;name&gt;Steve&lt;/name&gt;
    &lt;/row&gt;
    &lt;row&gt;
      &lt;id&gt;102&lt;/id&gt;
      &lt;name&gt;Sita&lt;/name&gt;
    &lt;/row&gt;
    &lt;operation&gt;update&lt;/operation&gt;
  &lt;/parameters&gt;
  ...
&lt;/request&gt;
</pre>
<p>You must provide an XSLT style sheet that transforms this materialized XML document containing the request parameters into canonical format for your target table. Thus, you can build an XSQL page:</p>
<pre dir="ltr">&lt;!-- 
 | ShowRequestDocument.xsql
 | Show Materialized XML Document for an HTML Form
 +--&gt;
&lt;xsql:include-request-params xmlns:xsql=&#34;urn:oracle-xsql&#34;/&gt;
</pre>
<p>With this page in place, you can temporarily modify your HTML form to post to the <code>ShowRequestDocument.xsql</code> page. In the browser you see the &#34;raw&#34; XML for the materialized XML request document, which you can save and use to develop the XSL transformation.</p>
<div class="example" id="GUID-56E150D2-3FE9-4ED4-A39B-9374B5CC4351__BABBACHJ">
<p class="titleinexample">Example 17-17 XML Document Generated from HTML Form</p>
<pre dir="ltr">&lt;request&gt;
  &lt;parameters&gt;
    &lt;firstparamname&gt;firstparamvalue&lt;/firstparamname&gt;
     ... 
    &lt;lastparamname&gt;lastparamvalue&lt;/lastparamname&gt;
  &lt;/parameters&gt;
  &lt;session&gt;
    &lt;firstparamname&gt;firstsessionparamvalue&lt;/firstparamname&gt;
      ...
    &lt;lastparamname&gt;lastsessionparamvalue&lt;/lastparamname&gt;
  &lt;/session&gt;
  &lt;cookies&gt;
    &lt;firstcookie&gt;firstcookievalue&lt;/firstcookiename&gt;
       ... 
    &lt;lastcookie&gt;firstcookievalue&lt;/lastcookiename&gt;
  &lt;/cookies&gt;
&lt;/request&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19678"></a><a id="ADXDK19677"></a>
<div class="props_rev_3"><a id="GUID-AD1462CE-B917-48FF-B33A-37F0CA95AB17"></a>
<h2 id="ADXDK-GUID-AD1462CE-B917-48FF-B33A-37F0CA95AB17" class="sect2"><span class="enumeration_section">17.7</span> Producing PDF Output with the FOP Serializer</h2>
<div>
<div class="section">
<p>Using the XSQL pages framework support for custom serializers, the <code>oracle.xml.xsql.serializers.XSQLFOPSerializer</code> class provides integration with the Apache FOP processor. The FOP processor renders a PDF document from an XML document containing XSL Formatting Objects.</p>
<p>As described in <a href="adx_j_xsqlpub.htm#GUID-2F3D4C05-7E99-4E7D-994B-09A15331D01B__CHECIJCH" title="Demonstration Name and Description are the columns.">Table 16-1</a>, the demo directory includes the <code>emptablefo.xsl</code> style sheet and <code>emptable.xsql</code> page as illustrations. If you get an error trying to use the FOP serializer, then probably you do not have all of the required JAR files in the <code>CLASSPATH</code>. The <code>XSQLFOPSerializer</code> class resides in the separate <code>xml.jar</code> file, which must be included in the <code>CLASSPATH</code> to use the FOP integration. You must also add these additional Java archives to your <code>CLASSPATH</code>:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>fop.jar</code>&mdash;from Apache, version 0.20.3 or later</p>
</li>
<li>
<p><code>batik.jar</code>&mdash;from the FOP distribution</p>
</li>
<li>
<p><code>avalon-framework-4.0.jar</code>&mdash;from FOP distribution</p>
</li>
<li>
<p>l<code>ogkit-1.0.jar</code>&mdash;from FOP distribution</p>
</li>
</ul>
<p>In case you want to customize the implementation, the source code for the FOP serializer provided in this release is shown in <a href="adx_j_xsqladv.htm#GUID-AD1462CE-B917-48FF-B33A-37F0CA95AB17__BABJCBHC">Example 17-18</a>.</p>
<div class="infoboxnotealso" id="GUID-AD1462CE-B917-48FF-B33A-37F0CA95AB17__GUID-0563D88A-BF5B-442A-99A6-11A62938C015">
<p class="notep1">See Also:</p>
<p><a href="http://xml.apache.org/fop" target="_blank"><code>http://xml.apache.org/fop</code></a> to learn about the Formatting Objects Processor</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-AD1462CE-B917-48FF-B33A-37F0CA95AB17__BABJCBHC">
<p class="titleinexample">Example 17-18 Source Code for FOP Serializer</p>
<pre dir="ltr">package oracle.xml.xsql.serializers;
import org.w3c.dom.Document;
import org.apache.log.Logger;
import org.apache.log.Hierarchy;
import org.apache.fop.messaging.MessageHandler;
import org.apache.log.LogTarget;
import oracle.xml.xsql.XSQLPageRequest;
import oracle.xml.xsql.XSQLDocumentSerializer;
import org.apache.fop.apps.Driver;
import org.apache.log.output.NullOutputLogTarget;
/**
 * Tested with the FOP 0.20.3RC release from 19-Jan-2002
 */
public class XSQLFOPSerializer implements XSQLDocumentSerializer {
  private static final String PDFMIME = &#34;application/pdf&#34;;
  public void serialize(Document doc, XSQLPageRequest env) throws Throwable {
    try { 
      // First make sure we can load the driver
      Driver FOPDriver = new Driver();
      // Tell FOP not to spit out any messages by default.
      // You can modify this code to create your own FOP Serializer
      // that logs the output to one of many different logger targets
      // using the Apache LogKit API
      Logger logger=Hierarchy.getDefaultHierarchy().getLoggerFor(&#34;XSQLServlet&#34;);
      logger.setLogTargets(new LogTarget[]{new NullOutputLogTarget()});
      FOPDriver.setLogger(logger);
      // Some of FOP&#39;s messages appear to still use MessageHandler.
      MessageHandler.setOutputMethod(MessageHandler.NONE);
      // Then set the content type before getting the reader
      env.setContentType(PDFMIME);
      FOPDriver.setOutputStream(env.getOutputStream());
      FOPDriver.setRenderer(FOPDriver.RENDER_PDF); FOPDriver.render(doc);
    }
    catch (Exception e) {
      // Cannot write PDF output for the error anyway.
      // So maybe this stack trace will be useful info
      e.printStackTrace(System.err);
    }
  }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK1029"></a><a id="ADXDK19679"></a>
<div class="props_rev_3"><a id="GUID-D39E450F-9C2C-4240-A5E3-C5FCC4D57A42"></a>
<h2 id="ADXDK-GUID-D39E450F-9C2C-4240-A5E3-C5FCC4D57A42" class="sect2"><span class="enumeration_section">17.8</span> Performing XSQL Customizations</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqladv.htm#GUID-26A83890-40B5-4D18-86A7-E72CCD97D2AC">Writing Custom XSQL Action Handlers</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-9A5E5942-FA04-4C9D-BF46-3FBA294C5E33">Implementing Custom XSQL Serializers</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-DCB347E9-A50A-4EB2-A419-CAC9E21C60AF">Using a Custom XSQL Connection Manager for JDBC Data Sources</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-C01D126B-2CF1-46AB-92A6-62A83471A1E8">Writing Custom XSQL Connection Managers</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-0D913A5C-2BCF-4647-BACC-7DC1A329A8D4">Implementing a Custom XSQLErrorHandler</a></p>
</li>
<li>
<p><a href="adx_j_xsqladv.htm#GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8">Providing a Custom XSQL Logger Implementation</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19680"></a>
<div class="props_rev_3"><a id="GUID-26A83890-40B5-4D18-86A7-E72CCD97D2AC"></a>
<h3 id="ADXDK-GUID-26A83890-40B5-4D18-86A7-E72CCD97D2AC" class="sect3"><span class="enumeration_section">17.8.1</span> Writing Custom XSQL Action Handlers</h3>
<div>
<div class="section">
<p>When a task requires custom processing, and none of the built-in actions listed in <a href="adx_ref_xsql.htm#GUID-A87F53F2-87BB-4422-90EF-4032D97C54BE__BJEFBDGB" title="Configuration Setting Name and Description are the columns.">Table 32-2</a> does exactly what you need, you can write your own actions.</p>
<p>The XSQL pages engine processes an XSQL page by looking for action elements from the <code>xsql</code> namespace and invoking an appropriate action element handler class to process each action. The processor supports any action that implements the <code>XSQLActionHandler</code> interface. All of the built-in actions implement this interface.</p>
<p>The XSQL engine processes the actions in a page in this way. For each action in the page, the engine performs these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Constructs an instance of the action handler class using the default constructor</span></li>
<li><span>Initializes the handler instance with the action element object and the page processor context by invoking the method <code>init(Element actionElt,XSQLPageRequest context</code>)</span></li>
<li><span>Invokes the method that allows the handler to handle the action <code>handleAction</code> (<code>Node</code> result)</span></li>
</ol>
<div class="section">
<p>For built-in actions, the engine can map the XSQL action element name to the Java class that implements the handler of the action. <a href="adx_ref_xsql.htm#GUID-A87F53F2-87BB-4422-90EF-4032D97C54BE__BJEFBDGB" title="Configuration Setting Name and Description are the columns.">Table 32-2</a> lists the built-in actions and their corresponding classes.</p>
<p>For user-defined actions, use this built-in action, replacing <code>fully.qualified.Classname</code> with the name of your class:</p>
<pre dir="ltr">&lt;xsql:action handler=&#34;fully.qualified.Classname&#34; ... /&gt;
</pre>
<p>The <code>handler</code> attribute provides the fully qualified name of the Java class that implements the custom action handler.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19682"></a><a id="ADXDK19683"></a><a id="ADXDK19684"></a><a id="ADXDK19681"></a>
<div class="props_rev_3"><a id="GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F"></a>
<h4 id="ADXDK-GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F" class="sect4"><span class="enumeration_section">17.8.1.1</span> Implementing the XSQLActionHandler Interface</h4>
<div>
<div class="section">
<p>To create a custom action handler, provide a class that implements the <code>oracle.xml.xsql.XSQLActionHandler</code> interface. Most custom action handlers extend <code>oracle.xml.xsql.XSQLActionHandlerImpl</code>, which provides a default implementation of the <code>init()</code> method and offers useful helper methods.</p>
<p>When an action handler&#39;s <code>handleAction()</code> method is invoked by the XSQL pages processor, a DOM fragment is passed to the action implementation. The action handler appends any dynamically created XML content returned to the page to the root node.</p>
<p>The XSQL processor conceptually replaces the action element in the XSQL page with the content of this document fragment. It is legal for an action handler to append nothing to this fragment if it has no XML content to add to the page.</p>
<p>While writing you custom action handlers, some methods on the <code>XSQLActionHandlerImpl</code> class are helpful. <a href="adx_j_xsqladv.htm#GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F__g1043068" title="Method Name and Description are the columns.">Table 17-2</a> lists these methods.</p>
<div class="tblformalwide" id="GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F__g1043068">
<p class="titleintable">Table 17-2 Helpful Methods in the XSQLActionHandlerImpl Class</p>
<table class="cellalignment655" title="Helpful Methods in the XSQLActionHandlerImpl Class" summary="Method Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment678" id="d90987e3222">Method Name</th>
<th class="cellalignment686" id="d90987e3225">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3230" headers="d90987e3222">
<pre dir="ltr">getActionElement
</pre></td>
<td class="cellalignment687" headers="d90987e3230 d90987e3225">
<p>Returns the current action element being handled.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3237" headers="d90987e3222">
<pre dir="ltr">getActionElementContent
</pre></td>
<td class="cellalignment687" headers="d90987e3237 d90987e3225">
<p>Returns the text content of the current action element, with all lexical parameters substituted appropriately.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3244" headers="d90987e3222">
<pre dir="ltr">getPageRequest
</pre></td>
<td class="cellalignment687" headers="d90987e3244 d90987e3225">
<p>Returns the current XSQL pages processor context. Using this object you do this:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>setPageParam()</code></p>
<p>Set a page parameter value.</p>
</li>
<li>
<p><code>getPostedDocument()/setPostedDocument()</code></p>
<p>Get or set the posted XML document.</p>
</li>
<li>
<p><code>translateURL()</code></p>
<p>Translate a relative URL to an absolute URL.</p>
</li>
<li>
<p><code>getRequestObject()/setRequestObject()</code></p>
<p>Get or set objects in the page request context that can be shared across actions in a single page.</p>
</li>
<li>
<p><code>getJDBCConnection()</code></p>
<p>Gets the JDBC connection in use by this page (possible null if no connection in use).</p>
</li>
<li>
<p><code>getRequestType()</code></p>
<p>Detect whether you are running in the Servlet, Command Line, or Programmatic context. For example, if the request type is Servlet then you can cast the <code>XSQLPageRequest</code> object to the more specific <code>XSQLServletPageRequest</code> to access servlet-specific methods such as <code>getHttpServletRequest</code>, <code>getHttpServletResponse</code>, and <code>getServletContext</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3304" headers="d90987e3222">
<pre dir="ltr">getAttributeAllowingParam
</pre></td>
<td class="cellalignment687" headers="d90987e3304 d90987e3225">
<p>Retrieves the attribute value from an element, resolving any XSQL lexical parameter references that might appear in value of the attribute. Typically this method is applied to the action element itself, but it is also useful for accessing attributes of subelements. To access an attribute value without allowing lexical parameters, use the standard <code>getAttribute()</code> method on the DOM <code>Element</code> interface.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3317" headers="d90987e3222">
<pre dir="ltr">appendSecondaryDocument
</pre></td>
<td class="cellalignment687" headers="d90987e3317 d90987e3225">
<p>Appends the contents of an external XML document to the root of the action handler result content.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3324" headers="d90987e3222">
<pre dir="ltr">addResultElement
</pre></td>
<td class="cellalignment687" headers="d90987e3324 d90987e3225">
<p>Simplifies appending a single element with text content to the root of the action handler result content.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3331" headers="d90987e3222">
<pre dir="ltr">firstColumnOfFirstRow
</pre></td>
<td class="cellalignment687" headers="d90987e3331 d90987e3225">
<p>Returns the first column value of the first row of a SQL statement. Requires the current page to have a connection attribute on its document element, or an error is returned.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3338" headers="d90987e3222">
<pre dir="ltr">getBindVariableCount
</pre></td>
<td class="cellalignment687" headers="d90987e3338 d90987e3225">
<p>Returns the number of tokens in the space-delimited list of <code>bind-params</code>. This number indicates how many bind variables are expected to be bound to parameters.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3348" headers="d90987e3222">
<pre dir="ltr">handleBindVariables
</pre></td>
<td class="cellalignment687" headers="d90987e3348 d90987e3225">
<p>Manages the binding of JDBC bind variables that appear in a prepared statement with the parameter values specified in the <code>bind-params</code> attribute on the current action element. If the statement is already using several bind variables before invoking this method, you can pass the number of existing bind variable slots in use as well.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3358" headers="d90987e3222">
<pre dir="ltr">reportErrorIncludingStatement
</pre></td>
<td class="cellalignment687" headers="d90987e3358 d90987e3225">
<p>Reports an error. The error includes the offending (SQL) statement that caused the problem and optionally includes a numeric error code.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3365" headers="d90987e3222">
<pre dir="ltr">reportFatalError
</pre></td>
<td class="cellalignment687" headers="d90987e3365 d90987e3225">
<p>Reports a fatal error.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3373" headers="d90987e3222">
<pre dir="ltr">reportMissingAttribute
</pre></td>
<td class="cellalignment687" headers="d90987e3373 d90987e3225">
<p>Reports an error that a required action handler attribute is missing by using the <code>&lt;xsql-error&gt;</code> element.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3383" headers="d90987e3222">
<pre dir="ltr">reportStatus
</pre></td>
<td class="cellalignment687" headers="d90987e3383 d90987e3225">
<p>Reports action handler status by using the <code>&lt;xsql-status&gt;</code> element.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3393" headers="d90987e3222">
<pre dir="ltr">requiredConnectionProvided
</pre></td>
<td class="cellalignment687" headers="d90987e3393 d90987e3225">
<p>Checks whether a connection is available for this request and outputs an errorgram into the page if no connection is available.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment680" id="d90987e3400" headers="d90987e3222">
<pre dir="ltr">variableValue
</pre></td>
<td class="cellalignment687" headers="d90987e3400 d90987e3225">
<p>Returns the value of a lexical parameter, taking into account all scoping rules that might determine its default value.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_xsqladv.htm#GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F__BABDHCCI">Example 17-19</a> shows a custom action handler named <code>MyIncludeXSQLHandler</code> that leverages a built-in action handler. It uses arbitrary Java code to modify the XML fragment returned by this handler before appending its result to the XSQL page.</p>
<p>You might have to write custom action handlers that work differently based on whether the page is requested through the XSQL servlet, the XSQL command-line utility, or programmatically through the <code>XSQLRequest</code> class.You can invoke <code>getPageRequest()</code> in your action handler implementation to get a reference to the <code>XSQLPageRequest</code> interface for the current page request. By invoking <code>getRequestType()</code> on the <code>XSQLPageRequest</code> object, you can determine whether the request is coming from the Servlet, Command Line, or Programmatic routes. If the return value is <code>Servlet</code>, then you can access the HTTP servlet request, response, and servlet context objects as shown in <a href="adx_j_xsqladv.htm#GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F__BABDDIGI">Example 17-20</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F__BABDHCCI">
<p class="titleinexample">Example 17-19 MyIncludeXSQLHandler.java</p>
<pre dir="ltr">import oracle.xml.xsql.*;
import oracle.xml.xsql.actions.XSQLIncludeXSQLHandler;
import org.w3c.dom.*;
import java.sql.SQLException;
public class MyIncludeXSQLHandler extends XSQLActionHandlerImpl {
  XSQLActionHandler nestedHandler = null;
  public void init(XSQLPageRequest req, Element action) {
    super.init(req, action);
    // Create an instance of an XSQLIncludeXSQLHandler and init() the handler by 
    // passing the current request/action. This assumes the XSQLIncludeXSQLHandler 
    // will pick up its href=&#34;xxx.xsql&#34; attribute from the current action element.
    nestedHandler = new XSQLIncludeXSQLHandler();
    nestedHandler.init(req,action);
  }
  public void handleAction(Node result) throws SQLException {
    DocumentFragment df=result.getOwnerDocument().createDocumentFragment();
    nestedHandler.handleAction(df);
    // Custom Java code here can work on the returned document fragment
    // before appending the final, modified document to the result node.
    // For example, add an attribute to the first child.
    Element e = (Element)df.getFirstChild();
    if (e != null) {
      e.setAttribute(&#34;ExtraAttribute&#34;,&#34;SomeValue&#34;);
    }
    result.appendChild(df);
  }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-DFBE1960-184A-4C15-9F8D-2FC08633EF4F__BABDDIGI">
<p class="titleinexample">Example 17-20 Testing for the Servlet Request</p>
<pre dir="ltr">XSQLServletPageRequest xspr = (XSQLServletPageRequest)getPageRequest();
if (xspr.getRequestType().equals(&#34;Servlet&#34;)) {
  HttpServletRequest     req  = xspr.getHttpServletRequest();
  HttpServletResponse   resp  = xspr.getHttpServletResponse();
  ServletContext        cont  = xspr.getServletContext();
  // Do something here with req, resp, or cont. Note that writing to the response 
  // directly from a handler produces unexpected results. All the servlet or your 
  // custom Serializer to write to the servlet response output stream at the right 
  // moment later when all action elements have been processed.
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19685"></a>
<div class="props_rev_3"><a id="GUID-84654614-3CE1-4A4F-891E-94B145257B56"></a>
<h4 id="ADXDK-GUID-84654614-3CE1-4A4F-891E-94B145257B56" class="sect4"><span class="enumeration_section">17.8.1.2</span> Using Multivalued Parameters in Custom XSQL Actions</h4>
<div>
<div class="section">
<p><code>XSQLActionHandlerImpl</code> is the base class for custom XSQL actions. It supports:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Array-named lexical parameter substitution</p>
</li>
<li>
<p>Array-named bind variables</p>
</li>
<li>
<p>Simple-valued parameters</p>
</li>
</ul>
<p>If your custom actions use methods such as <code>getAttributeAllowingParam()</code>, <code>getActionElementContent()</code>, or <code>handleBindVariables()</code> from this base class, you pick up multivalued parameter functionality for free in your custom actions.</p>
<p>Use the <code>getParameterValues()</code> method on the <code>XSQLPageRequest</code> interface to explicitly get a parameter value as a <code>String[]</code>. The helper method <code>variableValues()</code> in <code>XSQLActionHandlerImpl</code> enables you to use this functionality from within a custom action handler if you must do so programmatically.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19687"></a><a id="ADXDK19686"></a>
<div class="props_rev_3"><a id="GUID-9A5E5942-FA04-4C9D-BF46-3FBA294C5E33"></a>
<h3 id="ADXDK-GUID-9A5E5942-FA04-4C9D-BF46-3FBA294C5E33" class="sect3"><span class="enumeration_section">17.8.2</span> Implementing Custom XSQL Serializers</h3>
<div>
<div class="section">
<p>You can implement a user-defined serializer class to control how the final XSQL datapage is serialized to a text or binary stream. A user-defined serializer must implement the <code>oracle.xml.xsql.XSQLDocumentSerializer</code> interface. The interface contains this single method:</p>
<pre dir="ltr">void serialize(org.w3c.dom.Document doc, XSQLPageRequest env) throws Throwable;
</pre>
<p>Only DOM-based serializers are supported. A custom serializer class is expected to perform these steps:</p>
<ol>
<li>
<p>Set the content type of the serialized stream before writing any content to the output <code>PrintWriter</code> (or <code>OutputStream</code>).</p>
<p>Set the type by invoking <code>setContentType()</code> on the <code>XSQLPageRequest</code> passed to your serializer. When setting the content type, you can set a MIME type:</p>
<pre dir="ltr">env.setContentType(&#34;text/html&#34;);
</pre>
<p>Alternatively, you can set a MIME type with an explicit output encoding character set:</p>
<pre dir="ltr">env.setContentType(&#34;text/html;charset=Shift_JIS&#34;);
</pre></li>
<li>
<p>Invoke either <code>getWriter()</code> or <code>getOutputStream()</code> (but not both) on the <code>XSQLPageRequest</code> to get the appropriate <code>PrintWriter</code> or <code>OutputStream</code> for serializing the content.</p>
</li>
</ol>
<p>The custom serializer in <a href="adx_j_xsqladv.htm#GUID-9A5E5942-FA04-4C9D-BF46-3FBA294C5E33__BABDGGCJ">Example 17-21</a> shows a simple implementation that serializes an HTML document containing the name of the document element of the current XSQL data page.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-9A5E5942-FA04-4C9D-BF46-3FBA294C5E33__BABDGGCJ">
<p class="titleinexample">Example 17-21 Custom Serializer</p>
<pre dir="ltr">package oracle.xml.xsql.serializers;
import org.w3c.dom.Document;
import java.io.PrintWriter;
import oracle.xml.xsql.*;

public class XSQLSampleSerializer implements XSQLDocumentSerializer {
  public void serialize(Document doc, XSQLPageRequest env) throws Throwable {
    String encoding = env.getPageEncoding();  // Use same encoding as XSQL page
                                              // template. Set to specific
                                              // encoding if necessary
    String mimeType = &#34;text/html&#34;; // Set this to the appropriate content type
    // (1) Set content type using the setContentType on the XSQLPageRequest
    if (encoding != null &amp;&amp; !encoding.equals(&#34;&#34;)) {
      env.setContentType(mimeType+&#34;;charset=&#34;+encoding);
    }
    else {
      env.setContentType(mimeType);
    }
    // (2) Get the output writer from the XSQLPageRequest
    PrintWriter e = env.getWriter();
    // (3) Serialize the document to the writer
    e.println(&#34;&lt;html&gt;Document element is &lt;b&gt;&#34;+
              doc.getDocumentElement().getNodeName()+&#34;&lt;/b&gt;&lt;/html&gt;&#34;);
  }
}
</pre></div>
<!-- class="example" --></div>
<a id="ADXDK19688"></a>
<div class="props_rev_3"><a id="GUID-7BC3B483-F753-48D5-82C0-D738095CE8CE"></a>
<h4 id="ADXDK-GUID-7BC3B483-F753-48D5-82C0-D738095CE8CE" class="sect4"><span class="enumeration_section">17.8.2.1</span> Techniques for Using a Custom Serializer</h4>
<div>
<div class="section">
<p>There are two ways to use a custom serializer, depending on whether you must first perform an XSLT transformation before serializing.</p>
<p>To perform an XSLT transformation before using a custom serializer, add the <code>serializer=&#34;java:fully.qualified.ClassName&#34;</code> in the <code>&lt;?xml-stylesheet?&gt;</code> processing instruction at the top of your page. The following examples shows this technique:</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;mystyle.xsl&#34;
                 serializer=&#34;java:my.pkg.MySerializer&#34;?&gt;
</pre>
<p>If you need only the custom serializer, omit the <code>type</code> and <code>href</code> attributes. The following example shows this technique:</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0?&gt;
&lt;?xml-stylesheet serializer=&#34;java:my.pkg.MySerializer&#34;?&gt;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19690"></a><a id="ADXDK19691"></a><a id="ADXDK19689"></a>
<div class="props_rev_3"><a id="GUID-759AE99A-23BA-4CCE-AEF7-F4B3F77892E7"></a>
<h4 id="ADXDK-GUID-759AE99A-23BA-4CCE-AEF7-F4B3F77892E7" class="sect4"><span class="enumeration_section">17.8.2.2</span> Assigning a Short Name to a Custom Serializer</h4>
<div>
<div class="section">
<p>You can also assign a short name to your custom serializers in the <code>&lt;serializerdefs&gt;</code> section of the XSQL configuration file. You can then use the nickname in the serializer attribute instead to save typing. Keep in mind that the short name is case-sensitive.</p>
<p>Assume that you have the information shown in <a href="adx_j_xsqladv.htm#GUID-759AE99A-23BA-4CCE-AEF7-F4B3F77892E7__BABJGEEH">Example 17-22</a> in your XSQL configuration file.</p>
<p>You can use the short names &#34;Sample&#34; or &#34;FOP&#34; in a style sheet instruction:</p>
<pre dir="ltr">&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;emp-to-xslfo.xsl&#34; serializer=&#34;FOP&#34;?&gt;
&lt;?xml-stylesheet serializer=&#34;Sample&#34;?&gt;
</pre>
<p>The <code>XSQLPageRequest</code> interface supports both a <code>getWriter()</code> and a <code>getOutputStream()</code> method. Custom serializers can invoke <code>getOutputStream()</code> to return an <code>OutputStream</code> instance into which binary data can be serialized. When you use the XSQL servlet, writing to this output stream writes binary information to the servlet output stream.</p>
<p>The serializer shown in <a href="adx_j_xsqladv.htm#GUID-759AE99A-23BA-4CCE-AEF7-F4B3F77892E7__BABEJAHC">Example 17-23</a> shows an example of writing a dynamic GIF image. In this example the GIF image is a static &#34;ok&#34; icon, but it shows the basic technique that a more sophisticated image serializer must use.</p>
<p>Using the XSQL command-line utility, the binary information is written to the target output file. Using the <code>XSQLRequest</code> API, two constructors exist that allow the caller to supply the target <code>OutputStream</code> to use for the results of page processing.</p>
<p>Your serializer must either invoke <code>getWriter()</code> for textual output or <code>getOutputStream()</code> for binary output but not both. Invoking both in the same request raises an error.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-759AE99A-23BA-4CCE-AEF7-F4B3F77892E7__BABJGEEH">
<p class="titleinexample">Example 17-22 Assigning Short Names to Custom Serializers</p>
<pre dir="ltr">&lt;XSQLConfig&gt;
  &lt;!--and so on. --&gt;
  &lt;serializerdefs&gt;
    &lt;serializer&gt;
      &lt;name&gt;Sample&lt;/name&gt;
      &lt;class&gt;oracle.xml.xsql.serializers.XSQLSampleSerializer&lt;/class&gt;
    &lt;/serializer&gt;
    &lt;serializer&gt;
      &lt;name&gt;FOP&lt;/name&gt;
      &lt;class&gt;oracle.xml.xsql.serializers.XSQLFOPSerializer&lt;/class&gt;
    &lt;/serializer&gt;
  &lt;/serializerdefs&gt;
&lt;/XSQLConfig&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-759AE99A-23BA-4CCE-AEF7-F4B3F77892E7__BABEJAHC">
<p class="titleinexample">Example 17-23 Writing a Dynamic GIF Image</p>
<pre dir="ltr">package oracle.xml.xsql.serializers;
import org.w3c.dom.Document;
import java.io.*;
import oracle.xml.xsql.*;

public class XSQLSampleImageSerializer implements XSQLDocumentSerializer {
   // Byte array representing a small &#34;ok&#34; GIF image
   private static byte[] okGif =
     {(byte)0x47,(byte)0x49,(byte)0x46,(byte)0x38,
      (byte)0x39,(byte)0x61,(byte)0xB,(byte)0x0,
      (byte)0x9,(byte)0x0,(byte)0xFFFFFF80,(byte)0x0,
      (byte)0x0,(byte)0x0,(byte)0x0,(byte)0x0,
      (byte)0xFFFFFFFF,(byte)0xFFFFFFFF,(byte)0xFFFFFFFF,(byte)0x2C,
      (byte)0x0,(byte)0x0,(byte)0x0,(byte)0x0,
      (byte)0xB,(byte)0x0,(byte)0x9,(byte)0x0,
      (byte)0x0,(byte)0x2,(byte)0x14,(byte)0xFFFFFF8C,
      (byte)0xF,(byte)0xFFFFFFA7,(byte)0xFFFFFFB8,(byte)0xFFFFFF9B,
      (byte)0xA,(byte)0xFFFFFFA2,(byte)0x79,(byte)0xFFFFFFE9,
      (byte)0xFFFFFF85,(byte)0x7A,(byte)0x27,(byte)0xFFFFFF93,
      (byte)0x5A,(byte)0xFFFFFFE3,(byte)0xFFFFFFEC,(byte)0x75,
      (byte)0x11,(byte)0xFFFFFF85,(byte)0x14,(byte)0x0,
      (byte)0x3B};

  public void serialize(Document doc, XSQLPageRequest env) throws Throwable {
    env.setContentType(&#34;image/gif&#34;);
    OutputStream os = env.getOutputStream();
    os.write(okGif,0,okGif.length);
    os.flush();
  }
}
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19692"></a>
<div class="props_rev_3"><a id="GUID-DCB347E9-A50A-4EB2-A419-CAC9E21C60AF"></a>
<h3 id="ADXDK-GUID-DCB347E9-A50A-4EB2-A419-CAC9E21C60AF" class="sect3"><span class="enumeration_section">17.8.3</span> Using a Custom XSQL Connection Manager for JDBC Data Sources</h3>
<div>
<div class="section">
<p>As an alternative to defining your named connections in the XSQL configuration file, you can use one of two provided <code>XSQLConnectionManager</code> implementations. These implementations enable you to use your servlet container&#39;s JDBC data source implementation and related connection pooling features.</p>
<p>This XSQL pages framework provides this alternative connection manager implementations:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.xsql.XSQLDatasourceConnectionManager</code></p>
<p>Consider using this connection manager if your servlet container&#39;s data source implementation does <span class="italic">not</span> use the Oracle JDBC driver. Features of the XSQL pages system such as <code>&lt;xsql:ref-cursor-function&gt;</code> and <code>&lt;xsql:include-owa&gt;</code> are not available when you do not use an Oracle JDBC driver.</p>
</li>
<li>
<p><code>oracle.xml.xsql.XSQLOracleDatasourceConnectionManager</code></p>
<p>Consider using this connection manager when your data source implementation returns JDBC <code>PreparedStatement</code> and <code>CallableStatement</code> objects that implement the <code>oracle.jdbc.PreparedStatement</code> and <code>oracle.jdbc.CallableStatement</code> interfaces. The Oracle WebLogic Server has a data source implementation that performs this task.</p>
</li>
</ul>
<p>When using either of the preceding alternative connection manager implementations, the value of the connection attribute in your XSQL page template is the Java Naming and Directory Interface (JNDI) name used to look up your desired data source. For example, the value of the connection attribute might look like:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>jdbc/scottDS</code></p>
</li>
<li>
<p><code>java:comp/env/jdbc/MyDatasource</code></p>
</li>
</ul>
<p>If you are not using the default XSQL pages connection manager, then needed connection pooling functionality must be provided by the alternative connection manager implementation. In the case of the preceding two options based on JDBC data sources, you must properly configure your servlet container to supply the connection pooling. See your servlet container documentation for instructions on how to properly configure the data sources to offer pooled connections.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19693"></a>
<div class="sect3"><a id="GUID-C01D126B-2CF1-46AB-92A6-62A83471A1E8"></a>
<h3 id="ADXDK-GUID-C01D126B-2CF1-46AB-92A6-62A83471A1E8" class="sect3"><span class="enumeration_section">17.8.4</span> Writing Custom XSQL Connection Managers</h3>
<div>
<p>You can provide a custom connection manager to replace the built-in connection management mechanism. To provide a custom connection manager implementation, you must perform these steps:</p>
<ol>
<li>
<p>Write a connection manager factory class that implements the <code>oracle.xml.xsql.XSQLConnectionManagerFactory</code> interface.</p>
</li>
<li>
<p>Write a connection manager class that implements the <code>oracle.xml.xsql.XSQLConnectionManager</code> interface.</p>
</li>
<li>
<p>Change the name of the <code>XSQLConnectionManagerFactory</code> class in your XSQL configuration file.</p>
</li>
</ol>
<p>The XSQL servlet uses your connection management scheme instead of the XSQL pages default scheme.</p>
<p>You can set your custom connection manager factory as the default connection manager factory by providing the class name in the XSQL configuration file. Set the factory in this section:</p>
<pre dir="ltr">&lt;!--
 | Set the name of the XSQL Connection Manager Factory
 | implementation. The class must implement the
 | oracle.xml.xsql.XSQLConnectionManagerFactory interface.
 | If unset, the default is to use the built-in connection
 | manager implementation in 
 | oracle.xml.xsql.XSQLConnectionManagerFactoryImpl
+--&gt;
  &lt;connection-manager&gt;
      &lt;factory&gt;oracle.xml.xsql.XSQLConnectionManagerFactoryImpl&lt;/factory&gt;
  &lt;/connection-manager&gt;
</pre>
<p>In addition to specifying the default connection manager factory, you can associate a custom connection factory with a <code>XSQLRequest</code> object by using APIs provided.</p>
<p>The responsibility of the <code>XSQLConnectionManagerFactory</code> is to return an instance of an <code>XSQLConnectionManager</code> for use by the current request. In a multithreaded environment such as a servlet engine, the <code>XSQLConnectionManager</code> object must ensure that a single <code>XSQLConnection</code> instance is not used by two different threads. This aim is realized by marking the connection as in use for the time between the <code>getConnection()</code> and <code>releaseConnection()</code> method invocations. The default XSQL connection manager implementation automatically pools named connections and adheres to this threadsafe policy.</p>
<p>If your custom implementation of <code>XSQLConnectionManager</code> implements the optional <code>oracle.xml.xsql.XSQLConnectionManagerCleanup</code> interface, then your connection manager can clean up any resources it has allocated. For example, if your servlet container invokes the <code>destroy()</code> method on the <code>XSQLServlet</code> servlet, which can occur during online administration of the servlet for example, the connection manager has a chance to clean up resources as part of the servlet destruction process.</p>
</div>
<a id="ADXDK19694"></a>
<div class="props_rev_3"><a id="GUID-2CEAD8D1-7014-49DF-94E9-0E2A68275DFE"></a>
<h4 id="ADXDK-GUID-2CEAD8D1-7014-49DF-94E9-0E2A68275DFE" class="sect4"><span class="enumeration_section">17.8.4.1</span> Accessing Authentication Information in a Custom Connection Manager</h4>
<div>
<div class="section">
<p>To use the HTTP authentication mechanism to get the user name and password to connect to the database, write a customized connection manager. You can then invoke a <code>getConnection()</code> method to get the needed information.</p>
<p>You can write a Java program that follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Pass an instance of the <code>oracle.xml.xsql.XSQLPageRequest</code> interface to the <code>getConnection()</code> method.</span></li>
<li><span>Invoke <code>getRequestType()</code> to ensure that the request type is <code>Servlet</code>.</span></li>
<li><span>Cast the <code>XSQLPageRequest</code> object to an <code>XSQLServletPageRequest</code>.</span></li>
<li><span>Invoke <code>getHttpServletRequest()</code> on the result of the preceding step.</span></li>
<li><span>Get the authentication information from the <code>javax.servlet.http.HttpServletResponse</code> object returned by the previous invocation.</span></li>
</ol>
</div>
</div>
</div>
<a id="ADXDK19696"></a><a id="ADXDK19695"></a>
<div class="props_rev_3"><a id="GUID-0D913A5C-2BCF-4647-BACC-7DC1A329A8D4"></a>
<h3 id="ADXDK-GUID-0D913A5C-2BCF-4647-BACC-7DC1A329A8D4" class="sect3"><span class="enumeration_section">17.8.5</span> Implementing a Custom XSQLErrorHandler</h3>
<div>
<div class="section">
<p>You may want to control how serious page processor errors such as an unavailable connection are reported to users. You can achieve this task by implementing the <code>oracle.xml.xsql.XSQLErrorHandler</code> interface. The interface contains this single method signature:</p>
<pre dir="ltr">public interface XSQLErrorHandler {
  public void handleError( XSQLError err, XSQLPageRequest env);
}
</pre>
<p>You can provide a class that implements the <code>XSQLErrorHandler</code> interface to customize how the XSQL pages processor writes error messages. The new <code>XSQLError</code> object encapsulates the error information and provides access to the error code, formatted error message, and so on.</p>
<p><a href="adx_j_xsqladv.htm#GUID-0D913A5C-2BCF-4647-BACC-7DC1A329A8D4__BABEHDDD">Example 17-24</a> shows a sample implementation of <code>XSQLErrorHandler</code>.</p>
<p>You can control which custom <code>XSQLErrorHandler</code> implementation is used in these distinct ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Define the name of a custom <code>XSQLErrorHandler</code> implementation class in the XSQL configuration file. You must provide the fully qualified class name of your error handler class as the value of the <code>/XSQLConfig/processor/error-handler/class</code> entry.</p>
<p>If the XSQL processor can load this class, and if it correctly implements the <code>XSQLErrorHandler</code> interface, then it uses this class as a singleton and replaces the default implementation globally wherever page processor errors are reported.</p>
</li>
<li>
<p>Override the error writer on a per page basis by using the <code>errorHandler</code> (or <code>xsql:errorHandler</code>) attribute on the document element of the page. The attribute value is the fully qualified class name of a class that implements the <code>XSQLErrorHandler</code> interface. This class reports the errors only for this page. The class is instantiated on each page request by the page engine.</p>
</li>
</ul>
<p>You can use a combination of the preceding approaches if needed.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-0D913A5C-2BCF-4647-BACC-7DC1A329A8D4__BABEHDDD">
<p class="titleinexample">Example 17-24 myErrorHandler class</p>
<pre dir="ltr">package example;
import oracle.xml.xsql.*;
import java.io.*;
public class myErrorHandler implements XSQLErrorHandler {
  public void logError( XSQLError err, XSQLPageRequest env) {
    // Must set the content type before writing anything out
    env.setContentType(&#34;text/html&#34;);
    PrintWriter pw = env.getErrorWriter();
    pw.println(&#34;&lt;H1&gt;ERROR&lt;/H1&gt;&lt;hr&gt;&#34;+err.getMessage());    
  }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19698"></a><a id="ADXDK19699"></a><a id="ADXDK19700"></a><a id="ADXDK19697"></a>
<div class="props_rev_3"><a id="GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8"></a>
<h3 id="ADXDK-GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8" class="sect3"><span class="enumeration_section">17.8.6</span> Providing a Custom XSQL Logger Implementation</h3>
<div>
<div class="section">
<p>You can optionally register custom code to handle the logging of the start and end of each XSQL page request. Your custom logger code must provide an implementation of the <code>oracle.xml.xsql.XSQLLoggerFactory</code> and <code>oracle.xml.xsql.XSQLLogger</code> interfaces.</p>
<p>The <code>XSQLLoggerFactory</code> interface contains this single method:</p>
<pre dir="ltr">public interface XSQLLoggerFactory {
  public XSQLLogger create( XSQLPageRequest env);
}
</pre>
<p>You can provide a class that implements the <code>XSQLLoggerFactory</code> interface to decide how <code>XSQLLogger</code> objects are created (or reused) for logging. The XSQL processor holds a reference to the <code>XSQLLogger</code> object returned by the factory for the duration of a page request. The processor uses it to log the start and end of each page request by invoking the <code>logRequestStart()</code> and <code>logRequestEnd()</code> methods.</p>
<p>The <code>XSQLLogger</code> interface is:</p>
<pre dir="ltr">public interface XSQLLogger {
   public void logRequestStart(XSQLPageRequest env) ;
   public void logRequestEnd(XSQLPageRequest env);
}
</pre>
<p>The classes in <a href="adx_j_xsqladv.htm#GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABEGBFA">Example 17-25</a> and <a href="adx_j_xsqladv.htm#GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABBDEGD">Example 17-26</a> show a trivial implementation of a custom logger. The <code>XSQLLogger</code> implementation in <a href="adx_j_xsqladv.htm#GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABEGBFA">Example 17-25</a> notes the time the page request started. It then logs the page request end by printing the name of the page request and the elapsed time to <code>System.out</code>.</p>
<p>The factory implementation is shown in <a href="adx_j_xsqladv.htm#GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABBDEGD">Example 17-26</a>.</p>
<p>To register a custom logger factory, edit the <code>XSQLConfig.xml</code> file and provide the name of your custom logger factory class as the content to the <code>/XSQLConfig/processor/logger/factory</code> element. <a href="adx_j_xsqladv.htm#GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABHCGBD">Example 17-27</a> shows this technique.</p>
<p>By default, <code>&lt;logger&gt;</code> section is commented out. There is no default logger.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABEGBFA">
<p class="titleinexample">Example 17-25 SampleCustomLogger Class</p>
<pre dir="ltr">package example;
import oracle.xml.xsql.*;
public class SampleCustomLogger implements XSQLLogger  {
  long start = 0;
  public void logRequestStart(XSQLPageRequest env) {
    start = System.currentTimeMillis();
  }
  public void logRequestEnd(XSQLPageRequest env) {
    long secs = System.currentTimeMillis() - start;
    System.out.println(&#34;Request for &#34; + env.getSourceDocumentURI()
                        + &#34; took &#34;+ secs + &#34;ms&#34;);
  }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABBDEGD">
<p class="titleinexample">Example 17-26 SampleCustomLoggerFactory Class</p>
<pre dir="ltr">package example;
import oracle.xml.xsql.*;
public class SampleCustomLoggerFactory implements XSQLLoggerFactory {
  public XSQLLogger create(XSQLPageRequest env) {
    return new SampleCustomLogger();
  }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2571E21E-CB76-4B80-8233-E4ACB4D81EB8__BABHCGBD">
<p class="titleinexample">Example 17-27 Registering a Custom Logger Factory</p>
<pre dir="ltr">&lt;XSQLConfig&gt;
    :
  &lt;processor&gt;
         :
      &lt;logger&gt;
         &lt;factory&gt;example.SampleCustomLoggerFactory&lt;/factory&gt;
      &lt;/logger&gt;
         :
   &lt;/processor&gt;
&lt;/XSQLConfig&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_xsqlpub.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_pt_c.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>