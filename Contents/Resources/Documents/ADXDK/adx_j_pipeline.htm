<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1660"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XML%20Pipeline%20Processor%20for%20Java"></a><title>Using the XML Pipeline Processor for Java</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="Pipeline Definition Language, XSL Transformation (XSLT) Processor for Java, XML Schema, processor for Java, how to run the sample program"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_jaxb.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_diff.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-B701FC56-68EB-4DB3-B198-357341B5223E"></a> <span id="PAGE" style="display:none;">19/50</span> <!-- End Header -->
<a id="ADXDK1001"></a><a id="ADXDK7000"></a>
<h1 id="ADXDK-GUID-B701FC56-68EB-4DB3-B198-357341B5223E" class="sect1"><span class="enumeration_chapter">11</span> Using the XML Pipeline Processor for Java</h1>
<div>
<p>This chapter explains how to use the Extensible Markup Language (XML) pipeline processor for Java.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_pipeline.htm#GUID-D52B346A-3EC7-4D7C-8A2E-4E110715C826">Introduction to the XML Pipeline Processor</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-C8D1362E-FB72-4D12-AF3E-0879CA473818">Using the XML Pipeline Processor: Overview</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-5AE2F9CB-3EE2-438E-9CC1-F4268B827342">Processing XML in a Pipeline</a></p>
</li>
</ul>
</div>
<a id="ADXDK1002"></a><a id="ADXDK19322"></a>
<div class="props_rev_3"><a id="GUID-D52B346A-3EC7-4D7C-8A2E-4E110715C826"></a>
<h2 id="ADXDK-GUID-D52B346A-3EC7-4D7C-8A2E-4E110715C826" class="sect2"><span class="enumeration_section">11.1</span> Introduction to the XML Pipeline Processor</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_pipeline.htm#GUID-FE136E1F-66F2-4B85-BE5F-27803082848E">Prerequisites</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-E153833F-1D1F-476F-BB8B-5C630454136E">Standards and Specifications</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-944781D8-B63C-4947-BB1B-CEAEFF9C184B">Multistage XML Processing</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-9D74C9DA-3884-42D0-8B42-C9A0EC678A74">Customized Pipeline Processes</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19323"></a>
<div class="props_rev_3"><a id="GUID-FE136E1F-66F2-4B85-BE5F-27803082848E"></a>
<h3 id="ADXDK-GUID-FE136E1F-66F2-4B85-BE5F-27803082848E" class="sect3"><span class="enumeration_section">11.1.1</span> Prerequisites</h3>
<div>
<p>This chapter assumes that you are familiar with these topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="glossary.htm#GUID-DEA2D6E1-4C5C-443F-A4C8-1AF13EE01841"><span class="xrefglossterm">XML Pipeline Definition Language</span></a>. This XML vocabulary enables you to describe the processing relations between XML resources. For a more thorough introduction to the Pipeline Definition Language, consult the XML resources listed in <span class="q">&#34;<a href="preface.htm#GUID-2CD1F6B6-C8EC-42E3-97F2-589AABF9AFFB">Related Documents</a>.&#34;</span></p>
</li>
<li>
<p><a href="glossary.htm#GUID-0969F796-24C8-4A02-B671-B2EE8BD49F5B"><span class="xrefglossterm">Document Object Model (DOM)</span></a>. DOM is an in-memory tree representation of the structure of an XML document.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-6B57591D-3889-4BCD-8598-58ED2DC9E9EE"><span class="xrefglossterm">Simple API for XML (SAX)</span></a>. SAX is a standard for event-based XML parsing.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-B1E6F2C9-39D7-42D5-817B-6210231ABF97"><span class="xrefglossterm">XML Schema language</span></a>. See <a href="adx_j_sproc.htm#GUID-F41C7DA2-A3DF-463B-A08C-24E8F0621450">Using the XML Schema Processor for Java</a> for an overview and links to suggested reading.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19324"></a>
<div class="props_rev_3"><a id="GUID-E153833F-1D1F-476F-BB8B-5C630454136E"></a>
<h3 id="ADXDK-GUID-E153833F-1D1F-476F-BB8B-5C630454136E" class="sect3"><span class="enumeration_section">11.1.2</span> Standards and Specifications</h3>
<div>
<p>The Oracle XML Pipeline processor is based on the World Wide Web Consortium (W3C) XML Pipeline Definition Language Version 1.0 Note. The W3C Note defines an XML vocabulary rather than an application programming interface (API). You can find the Pipeline specification here:</p>
<pre dir="ltr"><a href="http://www.w3.org/TR/xml-pipeline/" target="_blank">http://www.w3.org/TR/xml-pipeline/</a>
</pre>
<p><span class="q">&#34;<a href="adx_ref_standards.htm#GUID-B121CAD1-05B4-43F1-B022-E764F90B0B0D">Pipeline Definition Language Standard for XDK for Java</a>&#34;</span> describes the differences between the W3C Note and the Oracle XML Developer&#39;s Kit (XDK) implementation of the Oracle XML Pipeline processor.</p>
<div class="infoboxnotealso" id="GUID-E153833F-1D1F-476F-BB8B-5C630454136E__GUID-998CD51F-9674-4021-96FC-81C90283A4E7">
<p class="notep1">See Also:</p>
<p><a href="adx_ref_standards.htm#GUID-5FBC4319-4B8E-4547-9585-F498B71A3F18__DCGBIDIF" title="Standard, Java, C, and C++ are the columns.">Table 33-1</a></p>
</div>
</div>
</div>
<a id="ADXDK19326"></a><a id="ADXDK19325"></a>
<div class="props_rev_3"><a id="GUID-944781D8-B63C-4947-BB1B-CEAEFF9C184B"></a>
<h3 id="ADXDK-GUID-944781D8-B63C-4947-BB1B-CEAEFF9C184B" class="sect3"><span class="enumeration_section">11.1.3</span> Multistage XML Processing</h3>
<div>
<p>The Oracle XML Pipeline processor is built on the XML Pipeline Definition Language. The processor can take an input XML pipeline document and execute pipeline processes according to derived dependencies. A <strong class="term">pipeline document</strong>, which is written in XML, specifies the processes to be executed in a declarative manner. You can associate Java classes with processes by using the <code>&lt;processdef/&gt;</code> element in the pipeline document.</p>
<p>Use the Pipeline processor for mutistage processing, which occurs when you process XML components sequentially or in parallel. The output of one stage of processing can become the input of another stage of processing. You can write a pipeline document that defines the inputs and outputs of the processes. <a href="adx_j_pipeline.htm#GUID-944781D8-B63C-4947-BB1B-CEAEFF9C184B__CHDDCHID">Figure 11-1</a> shows a possible pipeline sequence.</p>
<div class="figure" id="GUID-944781D8-B63C-4947-BB1B-CEAEFF9C184B__CHDDCHID">
<p class="titleinfigure">Figure 11-1 Pipeline Processing</p>
<img width="504" height="147" src="img/GUID-D3F06B2E-4776-4AC7-AB20-43620D01E118-default.gif" alt="Description of Figure 11-1 follows" title="Description of Figure 11-1 follows"/><br/>
<a href="img_text/GUID-D3F06B2E-4776-4AC7-AB20-43620D01E118-print.htm">Description of &#34;Figure 11-1 Pipeline Processing&#34;</a></div>
<!-- class="figure" -->
<p>In addition to the XML Pipeline processor itself, XDK provides an API for processes that you can pipe together in a pipeline document. <a href="adx_j_pipeline.htm#GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__CHDFCBHA" title="Lists classes in the oracle.xml.pipeline.processes package.">Table 11-2</a> summarizes the classes provided in the <code>oracle.xml.pipeline.processes</code> package.</p>
<p>The typical stages of processing XML in a pipeline are:</p>
<ol>
<li>
<p>Parse the input XML documents. The <code>oracle.xml.pipeline.processes</code> package includes <code>DOMParserProcess</code> for DOM parsing and <code>SAXParserProcess</code> for SAX parsing.</p>
</li>
<li>
<p>Validate the input XML documents.</p>
</li>
<li>
<p>Serialize or transform the input documents. The Pipeline processor does not enable you to connect the SAX parser to the Extensible Stylesheet Language Transformation (XSLT) processor, which requires a DOM.</p>
</li>
</ol>
<p>In multistage processing, SAX is ideal for filtering and searching large XML documents. Use DOM to change or access XML content efficiently and dynamically.</p>
<div class="infoboxnotealso" id="GUID-944781D8-B63C-4947-BB1B-CEAEFF9C184B__GUID-308C0DCB-5F4F-46B1-BE94-14EFC8B85741">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adx_j_pipeline.htm#GUID-5AE2F9CB-3EE2-438E-9CC1-F4268B827342">Processing XML in a Pipeline</a>&#34;</span> to learn how to write a pipeline document that provides the input for a pipeline application</p>
</div>
</div>
</div>
<a id="ADXDK19328"></a><a id="ADXDK19327"></a>
<div class="props_rev_3"><a id="GUID-9D74C9DA-3884-42D0-8B42-C9A0EC678A74"></a>
<h3 id="ADXDK-GUID-9D74C9DA-3884-42D0-8B42-C9A0EC678A74" class="sect3"><span class="enumeration_section">11.1.4</span> Customized Pipeline Processes</h3>
<div>
<p>The <code>oracle.xml.pipeline.controller.Process</code> class is the base class for all pipeline process definitions. The classes in the <code>oracle.xml.pipeline.processes</code> package extend this base class. To create a customized pipeline process, you must create a class that extends the <code>Process</code> class.</p>
<p>At the minimum, every custom process must override the do-nothing <code>initialize()</code> and <code>execute()</code> methods of the <code>Process</code> class. If the customized process accepts SAX events as input, then it should override the <code>SAXContentHandler()</code> method to return the appropriate <code>ContentHandler</code> that handles incoming SAX events. It should also override the <code>SAXErrorHandler()</code> method to return the appropriate <code>ErrorHandler</code>. <a href="adx_j_pipeline.htm#GUID-9D74C9DA-3884-42D0-8B42-C9A0EC678A74__CHDFABEH" title="Lists methods in the Process class.">Table 11-1</a> provides further descriptions of the preceding methods.</p>
<div class="tblformalwide" id="GUID-9D74C9DA-3884-42D0-8B42-C9A0EC678A74__CHDFABEH">
<p class="titleintable">Table 11-1 Methods in the oracle.xml.pipeline.controller.Process Class</p>
<table class="cellalignment655" title="Methods in the oracle.xml.pipeline.controller.Process Class" summary="Lists methods in the Process class.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment739" id="d55430e672">Class</th>
<th class="cellalignment740" id="d55430e675">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e680" headers="d55430e672">
<p><code>initialize()</code></p>
</td>
<td class="cellalignment742" headers="d55430e680 d55430e675">
<p>Initializes the process before execution.</p>
<p>Invoke <code>getInput()</code> to fetch a specific input object associated with the process element and invoke <code>supportType()</code> to indicate the types of input supported. Analogously, invoke <code>getOutput()</code> and <code>supportType()</code> for output.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e702" headers="d55430e672">
<p><code>execute()</code></p>
</td>
<td class="cellalignment742" headers="d55430e702 d55430e675">
<p>Executes the process.</p>
<p>Invoke <code>getInParaValue()</code>, <code>getInput()</code>, or <code>getInputSource()</code> to fetch the inputs to the process. If a custom process outputs SAX events, then it should invoke the <code>getSAXContentHandler()</code> and <code>getSAXErrorHandler()</code> methods in <code>execute()</code> to get the SAX handlers of these processes in the pipeline:</p>
<p>Invoke <code>setOutputResult()</code>, <code>getOutputStream()</code>, <code>getOutputWriter()</code> or <code>setOutParam()</code> to set the outputs or outparams generated by this process.</p>
<p>Invoke <code>getErrorSource()</code>, <code>getErrorStream()</code>, or <code>getErrorDocument()</code> to access the pipeline error element associated with this process element. If an exception occurs during <code>execute()</code>, invoke <code>error()</code> or <code>info()</code> to propagate it to the <code>PipelineErrorHandler</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e769" headers="d55430e672">
<p><code>SAXContentHandler()</code></p>
</td>
<td class="cellalignment742" headers="d55430e769 d55430e675">
<p>Returns the SAX <code>ContentHandler</code>.</p>
<p>If dependencies from other processes are not available, then return <code>null</code>. When these dependencies are available, the method is executed till the end.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e785" headers="d55430e672">
<p><code>SAXErrorHandler()</code></p>
</td>
<td class="cellalignment742" headers="d55430e785 d55430e675">
<p>Returns the SAX <code>ErrorHandler</code>.</p>
<p>If you do not override this method, then the JAXB processor uses the default error handler implemented by this class to handle SAX errors.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-9D74C9DA-3884-42D0-8B42-C9A0EC678A74__GUID-AC792866-BA9A-4934-A331-04E1416BF803">
<p class="notep1">See Also:</p>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code>oracle.xml.pipeline.processes</code> package</p>
</div>
</div>
</div>
</div>
<a id="ADXDK1003"></a><a id="ADXDK19329"></a>
<div class="props_rev_3"><a id="GUID-C8D1362E-FB72-4D12-AF3E-0879CA473818"></a>
<h2 id="ADXDK-GUID-C8D1362E-FB72-4D12-AF3E-0879CA473818" class="sect2"><span class="enumeration_section">11.2</span> Using the XML Pipeline Processor: Overview</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_pipeline.htm#GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9">Using the XML Pipeline Processor: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-43CE03CE-C2AB-40F3-90E6-3832F80BF455">Running the XML Pipeline Processor Demo Programs</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-612A465F-72B4-4019-A8BE-4863D9E1D52B">Using the XML Pipeline Processor Command-Line Utility</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19331"></a><a id="ADXDK19332"></a><a id="ADXDK19333"></a><a id="ADXDK19330"></a>
<div class="props_rev_3"><a id="GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9"></a>
<h3 id="ADXDK-GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9" class="sect3"><span class="enumeration_section">11.2.1</span> Using the XML Pipeline Processor: Basic Process</h3>
<div>
<div class="section">
<p>The XML Pipeline processor is accessible through these packages:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.pipeline.controller</code>, which provides an XML Pipeline controller that executes XML processes in a pipeline based on dependencies.</p>
</li>
<li>
<p><code>oracle.xml.pipeline.processes</code>, which provides wrapper classes for XML processes that can be executed by the XML Pipeline controller. The <code>oracle.xml.pipeline.processes</code> package contains the classes that you can use to design a pipeline application framework. Each class extends the <code>oracle.xml.pipeline.controller.Process</code> class.</p>
<p><a href="adx_j_pipeline.htm#GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__CHDFCBHA" title="Lists classes in the oracle.xml.pipeline.processes package.">Table 11-2</a> lists the components in the package. You can connect these components and processes through a combination of the XML Pipeline processor and a pipeline document.</p>
</li>
</ul>
<div class="tblformalwide" id="GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__CHDFCBHA">
<p class="titleintable">Table 11-2 Classes in oracle.xml.pipeline.processes</p>
<table class="cellalignment655" title="Classes in oracle.xml.pipeline.processes" summary="Lists classes in the oracle.xml.pipeline.processes package.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment688" id="d55430e1025">Class</th>
<th class="cellalignment743" id="d55430e1028">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1033" headers="d55430e1025">
<p><code>CompressReaderProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1033 d55430e1028">
<p>Receives compressed XML and outputs parsed XML.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1041" headers="d55430e1025">
<p><code>CompressWriterProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1041 d55430e1028">
<p>Receives XML parsed with DOM or SAX and outputs compressed XML.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1049" headers="d55430e1025">
<p><code>DOMParserProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1049 d55430e1028">
<p>Parses incoming XML and outputs a DOM tree.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1057" headers="d55430e1025">
<p><code>SAXParserProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1057 d55430e1028">
<p>Parses incoming XML and outputs SAX events.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1065" headers="d55430e1025">
<p><code>XPathProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1065 d55430e1028">
<p>Accepts a DOM as input, uses an XPath pattern to select one or more nodes from an XML <code>Document</code> or an XML <code>DocumentFragment</code>, and outputs a <code>Document</code> or <code>DocumentFragment</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1085" headers="d55430e1025">
<p><code>XSDSchemaBuilder</code></p>
</td>
<td class="cellalignment744" headers="d55430e1085 d55430e1028">
<p>Parses an XML schema and outputs a schema object for validation. This process is built into the XML Pipeline processor and builds schema objects used for validating XML documents.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1093" headers="d55430e1025">
<p><code>XSDValProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1093 d55430e1028">
<p>Validates against a local schema, analyzes the results, and reports errors if necessary.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1101" headers="d55430e1025">
<p><code>XSLProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1101 d55430e1028">
<p>Accepts DOM as input, applies an XSL style sheet, and outputs the result of the transformation.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment690" id="d55430e1109" headers="d55430e1025">
<p><code>XSLStylesheetProcess</code></p>
</td>
<td class="cellalignment744" headers="d55430e1109 d55430e1028">
<p>Receives an XSL style sheet as a stream or DOM and creates an <code>XSLStylesheet</code> object.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_pipeline.htm#GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__CHDFJCEJ">Figure 11-2</a> shows how to pass a pipeline document to a Java application that uses the XML Pipeline processor, configure the processor, and execute the pipeline.</p>
<div class="figure" id="GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__CHDFJCEJ">
<p class="titleinfigure">Figure 11-2 Using the Pipeline Processor for Java</p>
<img width="591" height="659" src="img/GUID-7EAE5506-B369-4EA5-8C99-519B21DF70C8-default.gif" alt="Description of Figure 11-2 follows" title="Description of Figure 11-2 follows"/><br/>
<a href="img_text/GUID-7EAE5506-B369-4EA5-8C99-519B21DF70C8-print.htm">Description of &#34;Figure 11-2 Using the Pipeline Processor for Java&#34;</a></div>
<!-- class="figure" -->
<p>The basic steps are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Instantiate a pipeline document, which forms the input to the pipeline execution. Create the object by passing a <code>FileReader</code> to the constructor:</span>
<div>
<pre dir="ltr">PipelineDoc pipe;
FileReader f;
pipe = new PipelineDoc((Reader)f, false);
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate a pipeline processor. <code>PipelineProcessor</code> is the top-level class that executes the pipeline. <a href="adx_j_pipeline.htm#GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__CHDBAAEF" title="This table describes the methods in the PipelineProcessor class.">Table 11-3</a> describes some available methods.</span>
<div>
<div class="tblformal" id="GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__CHDBAAEF">
<p class="titleintable">Table 11-3 PipelineProcessor Methods</p>
<table class="cellalignment685" title="PipelineProcessor Methods" summary="This table describes the methods in the PipelineProcessor class.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment722" id="d55430e1161">Method</th>
<th class="cellalignment745" id="d55430e1164">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment724" id="d55430e1169" headers="d55430e1161">
<p><code>executePipeline()</code></p>
</td>
<td class="cellalignment746" headers="d55430e1169 d55430e1164">
<p>Executes the pipeline based on the <code>PipelineDoc</code> set by invoking <code>setPipelineDoc()</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment724" id="d55430e1183" headers="d55430e1161">
<p><code>getExecutionMode()</code></p>
</td>
<td class="cellalignment746" headers="d55430e1183 d55430e1164">
<p>Gets the type of execution mode: <code>PIPELINE_SEQUENTIAL</code> or <code>PIPELINE_PARALLEL</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment724" id="d55430e1197" headers="d55430e1161">
<p><code>setErrorHandler()</code></p>
</td>
<td class="cellalignment746" headers="d55430e1197 d55430e1164">
<p>Sets the error handler for the pipeline. This invocation is mandatory to execute the pipeline.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment724" id="d55430e1205" headers="d55430e1161">
<p><code>setExecutionMode()</code></p>
</td>
<td class="cellalignment746" headers="d55430e1205 d55430e1164">
<p>Sets the execution mode. <code>PIPELINE_PARALLEL</code> is the default and specifies that the processes in the pipeline must execute in parallel. <code>PIPELINE_SEQUENTIAL</code> specifies that the processes in the pipeline must execute sequentially.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment724" id="d55430e1219" headers="d55430e1161">
<p><code>setForce()</code></p>
</td>
<td class="cellalignment746" headers="d55430e1219 d55430e1164">
<p>Sets execution behavior. If <code>TRUE</code>, then the pipeline executes regardless of whether the target is up-to-date with the pipeline inputs.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment724" id="d55430e1230" headers="d55430e1161">
<p><code>setPipelineDoc()</code></p>
</td>
<td class="cellalignment746" headers="d55430e1230 d55430e1164">
<p>Sets the <code>PipelineDoc</code> object for the pipeline.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>This statement instantiates the pipeline processor:</p>
<pre dir="ltr">proc = new PipelineProcessor();
</pre></div>
</li>
<li class="stepexpand"><span>Set the processor to the pipeline document. For example:</span>
<div>
<pre dir="ltr">proc.setPipelineDoc(pipe);
</pre></div>
</li>
<li class="stepexpand"><span>Set the execution mode for the processor and perform any other needed configuration. For example, set the mode by passing a constant to <code>PipelineProcessor.setExecutionMode()</code>.</span>
<div>
<p>This statement specifies sequential execution:</p>
<pre dir="ltr">proc.setExecutionMode(PipelineConstants.PIPELINE_SEQUENTIAL); 
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate an error handler. The error handler must implement the <code>PipelineErrorHandler</code> interface. For example:</span>
<div>
<pre dir="ltr">errHandler = new PipelineSampleErrHdlr(logname);
</pre></div>
</li>
<li class="stepexpand"><span>Set the error handler for the processor by invoking <code>setErrorHandler()</code>. For example:</span>
<div>
<pre dir="ltr">proc.setErrorHandler(errHandler);
</pre></div>
</li>
<li class="stepexpand"><span>Execute the pipeline. For example:</span>
<div>
<pre dir="ltr">proc.executePipeline();
</pre>
<div class="infoboxnotealso" id="GUID-4C4B30D9-17B2-4B9F-825F-72174FA2EEE9__GUID-F0F5D564-14C5-4601-B642-FBC706D3277E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code>oracle.xml.pipeline</code> subpackages</p>
</li>
<li>
<p><span class="q">&#34;<a href="adx_j_pipeline.htm#GUID-3D56CF61-86A1-4DBD-AF42-7F284901EF3D">Creating a Pipeline Document</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19335"></a><a id="ADXDK19334"></a>
<div class="props_rev_3"><a id="GUID-43CE03CE-C2AB-40F3-90E6-3832F80BF455"></a>
<h3 id="ADXDK-GUID-43CE03CE-C2AB-40F3-90E6-3832F80BF455" class="sect3"><span class="enumeration_section">11.2.2</span> Running the XML Pipeline Processor Demo Programs</h3>
<div>
<div class="section">
<p>Demo programs for the XML Pipeline processor are included in <code>$ORACLE_HOME/xdk/demo/java/pipeline</code>. <a href="adx_j_pipeline.htm#GUID-43CE03CE-C2AB-40F3-90E6-3832F80BF455__CHDICHJA" title="File and Description are the Columns.">Table 11-4</a> describes the XML files and Java source files that you can use to test the utility.</p>
<div class="tblformal" id="GUID-43CE03CE-C2AB-40F3-90E6-3832F80BF455__CHDICHJA">
<p class="titleintable">Table 11-4 Pipeline Processor Sample Files</p>
<table class="cellalignment650" title="Pipeline Processor Sample Files " summary="File and Description are the Columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment718" id="d55430e1409">File</th>
<th class="cellalignment719" id="d55430e1412">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1417" headers="d55430e1409">
<p><code>README</code></p>
</td>
<td class="cellalignment721" headers="d55430e1417 d55430e1412">
<p>A text file that describes how to set up the Pipeline processor demos.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1425" headers="d55430e1409">
<p><code>PipelineSample.java</code></p>
</td>
<td class="cellalignment721" headers="d55430e1425 d55430e1412">
<p>A sample Pipeline processor application. The program takes <code>pipedoc.xml</code> as its first argument.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1436" headers="d55430e1409">
<p><code>PipelineSampleErrHdlr.java</code></p>
</td>
<td class="cellalignment721" headers="d55430e1436 d55430e1412">
<p>A sample program to create an error handler used by <code>PipelineSample</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1447" headers="d55430e1409">
<p><code>book.xml</code></p>
</td>
<td class="cellalignment721" headers="d55430e1447 d55430e1412">
<p>A sample XML document that describes a series of books. This document is specified as an input by <code>pipedoc.xml</code>, <code>pipedoc2.xml</code>, and <code>pipedocerr.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1464" headers="d55430e1409">
<p><code>book.xsl</code></p>
</td>
<td class="cellalignment721" headers="d55430e1464 d55430e1412">
<p>An XSLT style sheet that transforms the list of books in <code>book.xml</code> into an HTML table.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1475" headers="d55430e1409">
<p><code>book_err.xsl</code></p>
</td>
<td class="cellalignment721" headers="d55430e1475 d55430e1412">
<p>An XSLT style sheet specified as an input by the <code>pipedocerr.xml</code> pipeline document. This style sheet contains an intentional error.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1486" headers="d55430e1409">
<p><code>id.xsl</code></p>
</td>
<td class="cellalignment721" headers="d55430e1486 d55430e1412">
<p>An XSLT style sheet specified as an input by the <code>pipedoc3.xml</code> pipeline document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1497" headers="d55430e1409">
<p><code>items.xsd</code></p>
</td>
<td class="cellalignment721" headers="d55430e1497 d55430e1412">
<p>An XML schema document specified as an input by the <code>pipedoc3.xml</code> pipeline document.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1508" headers="d55430e1409">
<p><code>pipedoc.xml</code></p>
</td>
<td class="cellalignment721" headers="d55430e1508 d55430e1412">
<p>A pipeline document. This document specifies that process p1 must parse <code>book.xml</code> with DOM, process p2 must parse <code>book.xsl</code> and create a style sheet object, and process p3 must apply the style sheet to the DOM to generate <code>myresult.html</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1525" headers="d55430e1409">
<p><code>pipedoc2.xml</code></p>
</td>
<td class="cellalignment721" headers="d55430e1525 d55430e1412">
<p>A pipeline document. This document specifies that process p1 must parse <code>book.xml</code> with SAX, process p2 must generate compressed XML <code>compxml</code> from the SAX events, and process p3 must regenerate the XML from the compressed stream as <code>myresult2.html</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1542" headers="d55430e1409">
<p><code>pipedoc3.xml</code></p>
</td>
<td class="cellalignment721" headers="d55430e1542 d55430e1412">
<p>A pipeline document. This document specifies that a process p5 must parse <code>po.xml</code> with DOM, process p1 must select a single node from the DOM tree with an XPath expression, process p4 must parse <code>items.xsd</code> and generate a schema object, process p6 must validate the selected node against the schema, process p3 must parse <code>id.xsl</code> and generate a style sheet object, and validated node to produce <code>myresult3.html</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1563" headers="d55430e1409">
<p><code>pipedocerr.xml</code></p>
</td>
<td class="cellalignment721" headers="d55430e1563 d55430e1412">
<p>A pipeline document. This document specifies that process p1 must parse <code>book.xml</code> with DOM, process p2 must parse <code>book_err.xsl</code> and generate a style sheet object if it encounters no errors and apply an inline style sheet if it encounters errors, and process p3 must apply the style sheet to the DOM to generate <code>myresulterr.html</code>. Because <code>book_err.xsl</code> contains an error, the program must write the text contents of the input XML to <code>myresulterr.html</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment720" id="d55430e1586" headers="d55430e1409">
<p><code>po.xml</code></p>
</td>
<td class="cellalignment721" headers="d55430e1586 d55430e1412">
<p>A sample XML document that describes a purchase order. This document is specified as an input by <code>pipedoc3.xml</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Documentation for how to compile and run the sample programs is located in the <code>README</code>. The basic steps are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Change into the <code>$ORACLE_HOME/xdk/demo/java/pipeline</code> directory (UNIX) or <code>%ORACLE_HOME%\xdk\demo\java\pipeline</code> directory (Windows).</span></li>
<li class="stepexpand"><span>Ensure that your environment variables are set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span></span></li>
<li class="stepexpand"><span>Run <code>make</code> (UNIX) or <code>Make.bat</code> (Windows) at the system prompt to generate class files for <code>PipelineSample.java</code> and <code>PipelineSampleErrHdler.java</code> and run the demo programs. The programs write output files to the <code>log</code> subdirectory.</span>
<div>
<p>Alternatively, you can run the demo programs manually by using this syntax:</p>
<pre dir="ltr">java PipelineSample <span class="italic">pipedoc</span> <span class="italic">pipelog </span>[ seq | para ]
</pre>
<p>The <span class="italic"><code>pipedoc</code></span> option specifies which pipeline document to use. The <span class="italic"><code>pipelog</code></span> option specifies the name of the pipeline log file, which is optional unless you specify <code>seq</code> or <code>para</code>, in which case a file name is required. If you do not specify a log file, then the program generates <code>pipeline.log</code> by default. The <code>seq</code> option processes threads sequentially; <code>para</code> processes in parallel. If you specify neither <code>seq</code> or <code>para</code>, then the default is parallel processing.</p>
</div>
</li>
<li class="stepexpand"><span>View the files generated from the pipeline, which are all named with the initial string <code>myresult</code>, and the log files.</span></li>
</ol>
</div>
</div>
<a id="ADXDK19337"></a><a id="ADXDK19336"></a>
<div class="props_rev_3"><a id="GUID-612A465F-72B4-4019-A8BE-4863D9E1D52B"></a>
<h3 id="ADXDK-GUID-612A465F-72B4-4019-A8BE-4863D9E1D52B" class="sect3"><span class="enumeration_section">11.2.3</span> Using the XML Pipeline Processor Command-Line Utility</h3>
<div>
<div class="section">
<p>The command-line interface for the XML Pipeline processor is named <code>orapipe</code>. The Pipeline processor is packaged with Oracle Database. By default, the Oracle Universal Installer installs the utility on disk in <code>$ORACLE_HOME/bin</code>.</p>
<p>Before running the utility for the first time, ensure that your environment variables are set as described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>.&#34;</span> Run <code>orapipe</code> at the operating system command line with this syntax:</p>
<pre dir="ltr">orapipe <span class="italic">options pipedoc</span>
</pre>
<p>The <span class="italic"><code>pipedoc</code></span> is the pipeline document, which is required. <a href="adx_j_pipeline.htm#GUID-612A465F-72B4-4019-A8BE-4863D9E1D52B__CHDCHJDE" title="Option and Purpose are the columns.&lt;no value&gt;">Table 11-5</a> describes the available options for the <code>orapipe</code> utility.</p>
<div class="tblformal" id="GUID-612A465F-72B4-4019-A8BE-4863D9E1D52B__CHDCHJDE">
<p class="titleintable">Table 11-5 orapipe Command-Line Options</p>
<table class="cellalignment650" title="orapipe Command-Line Options" summary="Option and Purpose are the columns.&lt;no value&gt;">
<thead>
<tr class="cellalignment644">
<th class="cellalignment739" id="d55430e1813">Option</th>
<th class="cellalignment740" id="d55430e1816">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1821" headers="d55430e1813">
<p><code>-help</code></p>
</td>
<td class="cellalignment742" headers="d55430e1821 d55430e1816">
<p>Prints the help message</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1829" headers="d55430e1813">
<p><code>-log</code> <span class="italic"><code>logfile</code></span></p>
</td>
<td class="cellalignment742" headers="d55430e1829 d55430e1816">
<p>Writes errors and messages to the specified log file. The default is <code>pipeline.log</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1844" headers="d55430e1813">
<p><code>-noinfo</code></p>
</td>
<td class="cellalignment742" headers="d55430e1844 d55430e1816">
<p>Does not log informational items. The default is on.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1852" headers="d55430e1813">
<p><code>-nowarning</code></p>
</td>
<td class="cellalignment742" headers="d55430e1852 d55430e1816">
<p>Does not log warnings. The default is on.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1860" headers="d55430e1813">
<p><code>-validate</code></p>
</td>
<td class="cellalignment742" headers="d55430e1860 d55430e1816">
<p>Validates the input <code>pipedoc</code> with the pipeline schema. Validation is turned off by default. If <code>outparam</code> feature is used, then <code>validate</code> fails with the current pipeline schema because this is an additional feature.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1877" headers="d55430e1813">
<p><code>-version</code></p>
</td>
<td class="cellalignment742" headers="d55430e1877 d55430e1816">
<p>Prints the release version.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1885" headers="d55430e1813">
<p><code>-sequential</code></p>
</td>
<td class="cellalignment742" headers="d55430e1885 d55430e1816">
<p>Executes the pipeline in sequential mode. The default is parallel.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1893" headers="d55430e1813">
<p><code>-force</code></p>
</td>
<td class="cellalignment742" headers="d55430e1893 d55430e1816">
<p>Executes pipeline even if target is up-to-date. By default no force is specified.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment741" id="d55430e1901" headers="d55430e1813">
<p><code>-attr</code> <span class="italic"><code>name</code></span> <span class="italic"><code>value</code></span></p>
</td>
<td class="cellalignment742" headers="d55430e1901 d55430e1816">
<p>Sets the value of <code>$</code><span class="italic"><code>name</code></span> to the specified <span class="italic"><code>value</code></span>. For example, if the attribute name is <code>source</code> and the value is <code>book.xml</code>, then you can pass this value to an element in the pipeline document: <code>&lt;input ... label=&#34;$source&#34;&gt;</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK1004"></a><a id="ADXDK19338"></a>
<div class="props_rev_4"><a id="GUID-5AE2F9CB-3EE2-438E-9CC1-F4268B827342"></a>
<h2 id="ADXDK-GUID-5AE2F9CB-3EE2-438E-9CC1-F4268B827342" class="sect2"><span class="enumeration_section">11.3</span> Processing XML in a Pipeline</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_pipeline.htm#GUID-3D56CF61-86A1-4DBD-AF42-7F284901EF3D">Creating a Pipeline Document</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-8094F1B4-8834-4417-802E-A63555F193B6">Writing a Pipeline Processor Application</a></p>
</li>
<li>
<p><a href="adx_j_pipeline.htm#GUID-5588D2AB-4904-4E0D-A6E9-B4E249DE1E77">Writing a Pipeline Error Handler</a></p>
</li>
</ul>
</div>
<a id="ADXDK19339"></a>
<div class="props_rev_3"><a id="GUID-3D56CF61-86A1-4DBD-AF42-7F284901EF3D"></a>
<h3 id="ADXDK-GUID-3D56CF61-86A1-4DBD-AF42-7F284901EF3D" class="sect3"><span class="enumeration_section">11.3.1</span> Creating a Pipeline Document</h3>
<div>
<p>To use the Oracle XML Pipeline processor, you must create an XML document according to the rules of the Pipeline Definition Language specified in the W3C Note.</p>
<p>The W3C specification defines the XML processing components and the inputs and outputs for these processes. The XML Pipeline processor includes support for these XDK components:</p>
<ul style="list-style-type: disc;">
<li>
<p>XML parser</p>
</li>
<li>
<p>XML compressor</p>
</li>
<li>
<p>XML Schema validator</p>
</li>
<li>
<p>XSLT processor</p>
</li>
</ul>
</div>
<a id="ADXDK19341"></a><a id="ADXDK19340"></a>
<div class="props_rev_3"><a id="GUID-E64DBAED-1345-42E0-8EBE-360969CE7576"></a>
<h4 id="ADXDK-GUID-E64DBAED-1345-42E0-8EBE-360969CE7576" class="sect4"><span class="enumeration_section">11.3.1.1</span> Example of a Pipeline Document</h4>
<div>
<p>The XML Pipeline processor executes a sequence of XML processing according to the rules in the pipeline document and returns a result. <a href="adx_j_pipeline.htm#GUID-E64DBAED-1345-42E0-8EBE-360969CE7576__CHDHECFH">Example 11-1</a> shows <code>pipedoc.xml</code>, which is a sample pipeline document included in the demo directory.</p>
<div class="example" id="GUID-E64DBAED-1345-42E0-8EBE-360969CE7576__CHDHECFH">
<p class="titleinexample">Example 11-1 pipedoc.xml</p>
<pre dir="ltr">&lt;pipeline xmlns=&#34;http://www.w3.org/2002/02/xml-pipeline&#34;&gt;
 
  &lt;param name=&#34;target&#34; select=&#34;myresult.html&#34;/&gt;
 
  &lt;processdef name=&#34;domparser.p&#34; 
   definition=&#34;oracle.xml.pipeline.processes.DOMParserProcess&#34;/&gt;
  &lt;processdef name=&#34;xslstylesheet.p&#34;  
   definition=&#34;oracle.xml.pipeline.processes.XSLStylesheetProcess&#34;/&gt;
  &lt;processdef name=&#34;xslprocess.p&#34; 
   definition=&#34;oracle.xml.pipeline.processes.XSLProcess&#34;/&gt;
 
   &lt;process id=&#34;p2&#34; type=&#34;xslstylesheet.p&#34; ignore-errors=&#34;false&#34;&gt;
     &lt;input name=&#34;xsl&#34; label=&#34;book.xsl&#34;/&gt;
     &lt;outparam name=&#34;stylesheet&#34; label=&#34;xslstyle&#34;/&gt;
   &lt;/process&gt;
 
   &lt;process id=&#34;p3&#34; type=&#34;xslprocess.p&#34; ignore-errors=&#34;false&#34;&gt;
     &lt;param name=&#34;stylesheet&#34; label=&#34;xslstyle&#34;/&gt;
     &lt;input name=&#34;document&#34; label=&#34;xmldoc&#34;/&gt;
     &lt;output name=&#34;result&#34; label=&#34;myresult.html&#34;/&gt;
   &lt;/process&gt;
 
  &lt;process id=&#34;p1&#34; type=&#34;domparser.p&#34; ignore-errors=&#34;true&#34;&gt;
     &lt;input name=&#34;xmlsource&#34; label=&#34;book.xml &#34;/&gt;
     &lt;output name=&#34;dom&#34; label=&#34;xmldoc&#34;/&gt;
     &lt;param name=&#34;preserveWhitespace&#34; select=&#34;true&#34;&gt;&lt;/param&gt;
     &lt;error name=&#34;dom&#34;&gt;
       &lt;html xmlns=&#34;http://www/w3/org/1999/xhtml&#34;&gt;
         &lt;head&gt;
            &lt;title&gt;DOMParser Failure!&lt;/title&gt;
         &lt;/head&gt;
         &lt;body&gt;
           &lt;h1&gt;Error parsing document&lt;/h1&gt;
         &lt;/body&gt;
       &lt;/html&gt;
     &lt;/error&gt;
  &lt;/process&gt;
 
&lt;/pipeline&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDK19342"></a>
<div class="props_rev_3"><a id="GUID-A6E98D4E-0737-46FB-B531-BFBF5A4B222E"></a>
<h5 id="ADXDK-GUID-A6E98D4E-0737-46FB-B531-BFBF5A4B222E" class="sect5"><span class="enumeration_section">11.3.1.1.1</span> Processes Specified in the Pipeline Document</h5>
<div>
<p>In <a href="adx_j_pipeline.htm#GUID-E64DBAED-1345-42E0-8EBE-360969CE7576__CHDHECFH">Example 11-1</a>, three processes are called and associated with Java classes in the <code>oracle.xml.pipeline.processes</code> package. The pipeline document uses the <code>&lt;processdef/&gt;</code> element to make these associations:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>domparser.p</code> is associated with the <code>DOMParserProcess</code> class</p>
</li>
<li>
<p><code>xslstylesheet.p</code> is associated with the <code>XSLStylesheetProcess</code> class</p>
</li>
<li>
<p><code>xslprocess.p</code> is associated with the <code>XSLProcess</code> class</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19343"></a>
<div class="props_rev_3"><a id="GUID-6B675595-08E3-4F7F-BFD9-4326A07E023A"></a>
<h5 id="ADXDK-GUID-6B675595-08E3-4F7F-BFD9-4326A07E023A" class="sect5"><span class="enumeration_section">11.3.1.1.2</span> Processing Architecture Specified in the Pipeline Document</h5>
<div>
<div class="section">
<p>The <code>PipelineSample</code> program accepts the <code>pipedoc.xml</code> document shown in <a href="adx_j_pipeline.htm#GUID-E64DBAED-1345-42E0-8EBE-360969CE7576__CHDHECFH">Example 11-1</a> as input along with XML documents <code>book.xml</code> and <code>book.xsl</code>. The basic design of the pipeline is:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Parse the incoming <code>book.xml</code> document and generate a DOM tree. This task is performed by <code>DOMParserProcess</code>.</span></li>
<li><span>Parse <code>book.xsl</code> as a stream and generate an <code>XSLStylesheet</code> object. This task is performed by <code>XSLStylesheetProcess</code>.</span></li>
<li><span>Receive the DOM of <code>book.xml</code> as input, apply the style sheet object, and write the result to <code>myresult.html</code>. This task is performed by <code>XSLProcess</code>.</span></li>
</ol>
<div class="section">
<p>Note these aspects of the processing architecture used in the pipeline document:</p>
<ul style="list-style-type: disc;">
<li>
<p>The target information set, <code>http://example.org/myresult.html</code>, is inferred from the default value of the <code>target</code> parameter and the <code>xml:base</code> setting.</p>
</li>
<li>
<p>The process <code>p2</code> has an input of <code>book.xsl</code> and an output parameter with the label <code>xslstyle</code>, so it must run to produce the input for <code>p3</code>.</p>
</li>
<li>
<p>The <code>p3</code> process depends on input parameter <code>xslstyle</code> and document <code>xmldoc</code>.</p>
</li>
<li>
<p>The <code>p3</code> process has an output parameter with the label <code>http://example.org/myresult.html</code>, so it must run to produce the target.</p>
</li>
<li>
<p>The process <code>p1</code> depends on input document <code>book.xml</code> and outputs <code>xmldoc</code>, so it must run to produce the input for <code>p3</code>.</p>
</li>
</ul>
<p>In <a href="adx_j_pipeline.htm#GUID-E64DBAED-1345-42E0-8EBE-360969CE7576__CHDHECFH">Example 11-1</a>, more than one order of processing can satisfy all of the dependencies. Given the rules, the XML Pipeline processor must process <code>p3</code> last but can process <code>p1</code> and <code>p2</code> in either order or process them in parallel.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="ADXDK19344"></a>
<div class="props_rev_3"><a id="GUID-8094F1B4-8834-4417-802E-A63555F193B6"></a>
<h3 id="ADXDK-GUID-8094F1B4-8834-4417-802E-A63555F193B6" class="sect3"><span class="enumeration_section">11.3.2</span> Writing a Pipeline Processor Application</h3>
<div>
<div class="section">
<p>The <code>PipelineSample.java</code> source file shows a basic pipeline application. You can use the application with any of the pipeline documents in <a href="adx_j_pipeline.htm#GUID-43CE03CE-C2AB-40F3-90E6-3832F80BF455__CHDICHJA" title="File and Description are the Columns.">Table 11-4</a> to parse and transform an input XML document.</p>
<p>The basic steps of the program are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Perform the initial setup. The program declares references of type <code>FileReader</code> (for the input XML file), <code>PipelineDoc</code> (for the input pipeline document), and <code>PipelineProcessor</code> (for the processor). The first argument is the pipeline document, which is required. If a second argument is received, then it is stored in the <code>logname</code> String. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">public static void main(String[] args)
{
  FileReader f;
  PipelineDoc pipe;
  PipelineProcessor proc;
 
  if (args.length &lt; 1)
  {
    System.out.println(&#34;First argument needed, other arguments are &#34;.
                       &#34;optional:&#34;);
    System.out.println(&#34;pipedoc.xml &lt;output_log&gt; &lt;&#39;seq&#39;&gt;&#34;);
    return;
  }
  if (args.length &gt; 1)
    logname = args[1];
  ...
</pre></div>
</li>
<li class="stepexpand"><span>Create a <code>FileReader</code> object by passing the first command-line argument to the constructor as the file name. For example:</span>
<div>
<pre dir="ltr">f = new FileReader(args[0]);
</pre></div>
</li>
<li class="stepexpand"><span>Create a <code>PipelineDoc</code> object by passing the reference to the <code>FileReader</code> object. This example casts the <code>FileReader</code> to a <code>Reader</code> and specifies no validation:</span>
<div>
<pre dir="ltr">pipe = new PipelineDoc((Reader)f, false);
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate an XML Pipeline processor. This statement instantiates the pipeline processor:</span>
<div>
<pre dir="ltr">proc = new PipelineProcessor();
</pre></div>
</li>
<li class="stepexpand"><span>Set the processor to the pipeline document. For example:</span>
<div>
<pre dir="ltr">proc.setPipelineDoc(pipe);
</pre></div>
</li>
<li class="stepexpand"><span>Set the execution mode for the processor and perform any other configuration. This code fragment uses a condition to determine the execution mode. If three or more arguments are passed to the program, then it sets the mode to sequential or parallel depending on which argument is passed. For example:</span>
<div>
<pre dir="ltr">String execMode = null;
if (args.length &gt; 2)
{
   execMode = args[2];
   if(execMode.startsWith(&#34;seq&#34;))
      proc.setExecutionMode(PipelineConstants.PIPELINE_SEQUENTIAL);
   else if (execMode.startsWith(&#34;para&#34;))
      proc.setExecutionMode(PipelineConstants.PIPELINE_PARALLEL);
}
</pre></div>
</li>
<li class="stepexpand"><span>Instantiate an error handler. The error handler must implement the <code>PipelineErrorHandler</code> interface. The program uses the <code>PipelineSampleErrHdler</code> shown in <code>PipelineSampleErrHdlr.java</code>. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">errHandler = new PipelineSampleErrHdlr(logname);
</pre></div>
</li>
<li class="stepexpand"><span>Set the error handler for the processor by invoking <code>setErrorHandler()</code>. This statement shows this technique:</span>
<div>
<pre dir="ltr">proc.setErrorHandler(errHandler);
</pre></div>
</li>
<li class="stepexpand"><span>Execute the pipeline. This statement shows this technique:</span>
<div>
<pre dir="ltr">proc.executePipeline();
</pre>
<div class="infoboxnotealso" id="GUID-8094F1B4-8834-4417-802E-A63555F193B6__GUID-6986C242-3F8F-40B2-8C2F-50197E392BDB">
<p class="notep1">See Also:</p>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code>oracle.xml.pipeline</code> subpackages</p>
</div>
</div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19346"></a><a id="ADXDK19345"></a>
<div class="props_rev_3"><a id="GUID-5588D2AB-4904-4E0D-A6E9-B4E249DE1E77"></a>
<h3 id="ADXDK-GUID-5588D2AB-4904-4E0D-A6E9-B4E249DE1E77" class="sect3"><span class="enumeration_section">11.3.3</span> Writing a Pipeline Error Handler</h3>
<div>
<div class="section">
<p>An application invoking the XML Pipeline processor must implement the <code>PipelineErrorHandler</code> interface to handle errors received from the processor. Set the error handler in the processor by invoking <code>setErrorHandler()</code>. When writing the error handler, you can choose to throw an exception for different types of errors.</p>
<p>The <code>oracle.xml.pipeline.controller.PipelineErrorHandler</code> interface declares the methods shown in <a href="adx_j_pipeline.htm#GUID-5588D2AB-4904-4E0D-A6E9-B4E249DE1E77__CHDCGFIH" title="Lists methods in the PipelineErrorHandler interface.">Table 11-6</a>, all of which return <code>void</code>.</p>
<div class="tblformalwide" id="GUID-5588D2AB-4904-4E0D-A6E9-B4E249DE1E77__CHDCGFIH">
<p class="titleintable">Table 11-6 PipelineErrorHandler Methods</p>
<table class="cellalignment655" title="PipelineErrorHandler Methods" summary="Lists methods in the PipelineErrorHandler interface.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment747" id="d55430e2835">Method</th>
<th class="cellalignment714" id="d55430e2838">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment748" id="d55430e2843" headers="d55430e2835">
<p><code>error(java.lang.String msg, PipelineException e)</code></p>
</td>
<td class="cellalignment716" headers="d55430e2843 d55430e2838">
<p>Handles <code>PipelineException</code> errors.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment748" id="d55430e2854" headers="d55430e2835">
<p><code>fatalError(java.lang.String msg, PipelineException e)</code></p>
</td>
<td class="cellalignment716" headers="d55430e2854 d55430e2838">
<p>Handles fatal <code>PipelineException</code> errors.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment748" id="d55430e2865" headers="d55430e2835">
<p><code>warning(java.lang.String msg, PipelineException e)</code></p>
</td>
<td class="cellalignment716" headers="d55430e2865 d55430e2838">
<p>Handles <code>PipelineException</code> warnings.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment748" id="d55430e2876" headers="d55430e2835">
<p><code>info(java.lang.String msg)</code></p>
</td>
<td class="cellalignment716" headers="d55430e2876 d55430e2838">
<p>Prints optional, additional information about errors.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The first three methods in <a href="adx_j_pipeline.htm#GUID-5588D2AB-4904-4E0D-A6E9-B4E249DE1E77__CHDCGFIH" title="Lists methods in the PipelineErrorHandler interface.">Table 11-6</a> receive a reference to an <code>oracle.xml.pipeline.controller.PipelineException</code> object. These methods of the <code>PipelineException</code> class are especially useful:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>getExceptionType()</code>, which gets the type of exception thrown</p>
</li>
<li>
<p><code>getProcessId()</code>, which gets the process ID where the exception occurred</p>
</li>
<li>
<p><code>getMessage()</code>, which returns the message string of this <code>Throwable</code> error</p>
</li>
</ul>
<p>The <code>PipelineSampleErrHdler.java</code> source file implements a basic error handler for use with the <code>PipelineSample</code> program. The basic steps are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Implement a constructor. The constructor accepts the name of a log file and wraps it in a <code>FileWriter</code> object:</span>
<div>
<pre dir="ltr">PipelineSampleErrHdlr(String logFile) throws IOException
{
  log = new PrintWriter(new FileWriter(logFile));
}
</pre></div>
</li>
<li class="stepexpand"><span>Implement the <code>error()</code> method. This implementation prints the process ID, exception type, and error message. It also increments a variable holding the error count. For example:</span>
<div>
<pre dir="ltr">public void error (String msg, PipelineException e) throws Exception
{
  log.println(&#34;\nError in: &#34; + e.getProcessId());
  log.println(&#34;Type: &#34; + e.getExceptionType());
  log.println(&#34;Message: &#34; +  e.getMessage());
  log.println(&#34;Error message: &#34; + msg);
  log.flush();
  errCount++;
}
</pre></div>
</li>
<li class="stepexpand"><span>Implement the <code>fatalError()</code> method. This implementation follows the pattern of <code>error()</code>. For example:</span>
<div>
<pre dir="ltr">public void fatalError (String msg, PipelineException e) throws Exception
{
  log.println(&#34;\nFatalError in: &#34; + e.getProcessId());
  log.println(&#34;Type: &#34; + e.getExceptionType());
  log.println(&#34;Message: &#34; +  e.getMessage());
  log.println(&#34;Error message: &#34; + msg);
  log.flush();
  errCount++;
}
</pre></div>
</li>
<li class="stepexpand"><span>Implement the <code>warning()</code> method. This implementation follows the basic pattern of <code>error()</code> except it increments the <code>warnCount</code> variable rather than the <code>errCount</code> variable. For example:</span>
<div>
<pre dir="ltr">public void warning (String msg, PipelineException e) throws Exception
{
  log.println(&#34;\nWarning in: &#34; + e.getProcessId());
  log.println(&#34;Message: &#34; +  e.getMessage());
  log.println(&#34;Error message: &#34; + msg);
  log.flush();
  warnCount++;
}
</pre></div>
</li>
<li class="stepexpand"><span>Implement the <code>info()</code> method. Unlike the preceding methods, this method does not receive a <code>PipelineException</code> reference as input. This implementation prints the <code>String</code> received by the method and increments the value of the <code>warnCount</code> variable:</span>
<div>
<pre dir="ltr">public void info (String msg)
{
  log.println(&#34;\nInfo : &#34; + msg);
  log.flush();
  warnCount++;   
}
</pre></div>
</li>
<li class="stepexpand"><span>Implement a method to close the <code>PrintWriter</code>. This code implements the method <code>closeLog()</code>, which prints the number of errors and warnings and invokes <code>PrintWriter.close()</code>:</span>
<div>
<pre dir="ltr">public void closeLog()
{
  log.println(&#34;\nTotal Errors: &#34; + errCount + &#34;\nTotal Warnings: &#34; +
               warnCount);
  log.flush();
  log.close();
}
</pre>
<div class="infoboxnotealso" id="GUID-5588D2AB-4904-4E0D-A6E9-B4E249DE1E77__GUID-4F0AC0EA-0B5B-4430-88E9-EA4CBBADEC16">
<p class="notep1">See Also:</p>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code>PipelineErrorHandler</code> interface and the <code>PipelineException</code> class</p>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_jaxb.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_diff.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>