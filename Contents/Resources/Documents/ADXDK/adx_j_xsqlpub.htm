<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1669"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XSQL%20Pages%20Publishing%20Framework"></a><title>Using the XSQL Pages Publishing Framework</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="servlet, XSQL, CLASSPATH, XSQL Pages, Connection Definitions, XSQL Servlet examples, FOP, serializer, PDF results using FOP, XSQL, setting up demos, HTTP Parameters, XSQL servlet, hints, WML Document, two queries, HTML Form Parameters, Out Variable, using xsql, dml, SOAP support, connection, current page name, errors, HTTP POST method, security, XSQL Pages, XSQL Pages security"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_ref_dlf.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_xsqladv.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-A1834D2F-B962-4881-AE7A-F323FF11384D"></a> <span id="PAGE" style="display:none;">24/50</span> <!-- End Header -->
<a id="ADXDK1021"></a><a id="ADXDK080"></a>
<h1 id="ADXDK-GUID-A1834D2F-B962-4881-AE7A-F323FF11384D" class="sect1"><span class="enumeration_chapter">16</span> Using the XSQL Pages Publishing Framework</h1>
<div>
<p>This chapter explains how to use the basic features of the XSQL pages publishing framework.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-660C4C15-2442-4E60-A21F-F45CFE60873B">Introduction to the XSQL Pages Publishing Framework</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-855B6B47-A955-4434-BAF4-F744F882069C">Using the XSQL Pages Publishing Framework: Overview</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-467F3D9E-A9DD-4ED9-9DE8-97435FB4D0E2">Generating and Transforming XML with XSQL Servlet</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-3DAA9F54-2E89-4A57-9C3F-F4DEBA6CCCC8">Using XSQL in Java Programs</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-39AD57EF-9921-4499-B796-986E8F970B29">XSQL Pages Tips and Techniques</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-A1834D2F-B962-4881-AE7A-F323FF11384D__GUID-CA4260D1-FD17-42F2-A860-A8C046AB9BA1">
<p class="notep1">See Also:</p>
<p><a href="adx_j_xsqladv.htm#GUID-02EA5758-7A8F-4FD7-B9F1-F346E759CD79">Using the XSQL Pages Publishing Framework: Advanced Topics</a></p>
</div>
</div>
<a id="ADXDK19570"></a><a id="ADXDK19569"></a>
<div class="props_rev_3"><a id="GUID-660C4C15-2442-4E60-A21F-F45CFE60873B"></a>
<h2 id="ADXDK-GUID-660C4C15-2442-4E60-A21F-F45CFE60873B" class="sect2"><span class="enumeration_section">16.1</span> Introduction to the XSQL Pages Publishing Framework</h2>
<div>
<p>The Oracle XSQL pages publishing framework is an extensible platform for publishing Extensible Markup Language (XML) in multiple formats. The Java-based <a href="glossary.htm#GUID-9F169AB5-F7A8-4BF9-9690-415182824566"><span class="xrefglossterm">XSQL servlet</span></a>, which is the center of the framework, provides a declarative interface for dynamically publishing dynamic web content based on relational data.</p>
<p>The XSQL framework combines the power of structured query language (SQL), XML, and Extensible Stylesheet Language Transformation (XSLT). You can use it to create declarative templates called <a href="glossary.htm#GUID-32CAFB67-064D-4CE1-A775-F9F09E310A63"><span class="xrefglossterm">XSQL pages</span></a> to perform these actions:</p>
<ul style="list-style-type: disc;">
<li>
<p>Assemble dynamic XML datagrams based on parameterized SQL queries</p>
</li>
<li>
<p>Transform datagrams with XSLT to generate a result in an XML, HTML, or text-based format</p>
</li>
</ul>
<p>An XSQL page, so called because its default extension is <code>.xsql</code>, is an XML file that contains instructions for the XSQL servlet. The <a href="adx_j_xsqlpub.htm#GUID-660C4C15-2442-4E60-A21F-F45CFE60873B__CACCIIDJ">Example 16-1</a> shows a simple XSQL page. It uses the <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> action element to query the <code>hr.employees</code> table.</p>
<p>You can present a browser client with the data returned from the query in <a href="adx_j_xsqlpub.htm#GUID-660C4C15-2442-4E60-A21F-F45CFE60873B__CACCIIDJ">Example 16-1</a>. Assembling and transforming information for publishing requires no programming. You can perform most tasks in a declarative way. If a built-in feature does not fit your needs, however, you can use Java to integrate custom data sources or perform customized server-side processing.</p>
<p>In the XSQL pages framework, the <span class="italic">assembly</span> of information to be published is separate from presentation. This architectural feature enables you to do this:</p>
<ul style="list-style-type: disc;">
<li>
<p>Present the same data in multiple ways, including tailoring the presentation appropriately to the type of client device making the request &mdash;browser, cellular phone, personal digital assistant (PDA), and so on.</p>
</li>
<li>
<p>Reuse data by aggregating existing pages into new ones</p>
</li>
<li>
<p>Revise and enhance the presentation independently of the content</p>
</li>
</ul>
<div class="example" id="GUID-660C4C15-2442-4E60-A21F-F45CFE60873B__CACCIIDJ">
<p class="titleinexample">Example 16-1 Sample XSQL Page</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;emplist.xsl&#34;?&gt;
&lt;xsql:query connection=&#34;hr&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
 SELECT * FROM employees
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDK19571"></a>
<div class="props_rev_3"><a id="GUID-A8F52809-BCD1-47DD-81AF-E66D81F14D6A"></a>
<h3 id="ADXDK-GUID-A8F52809-BCD1-47DD-81AF-E66D81F14D6A" class="sect3"><span class="enumeration_section">16.1.1</span> Prerequisites</h3>
<div>
<p>This chapter assumes that you are familiar with these technologies:</p>
<ul style="list-style-type: disc;">
<li>
<p>Oracle Database SQL. The XSQL framework accesses data in a database.</p>
</li>
<li>
<p>Procedural Language/Structured Query Language (PL/SQL). Oracle XML Developer&#39;s Kit (XDK) supplies a PL/SQL application programming interface (API) for XML SQL Utility (XSU) that mirrors the Java API.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-6ABA93DA-F986-43F2-97D2-23AA0EA6455C"><span class="xrefglossterm">Java Database Connectivity (JDBC)</span></a>. The XSQL pages framework depends on a JDBC driver for database connections.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-8AD9F98D-06CF-4FC6-8729-9FE297BD501F"><span class="xrefglossterm">Extensible Stylesheet Language Transformations (XSLT)</span></a>. You can use XSLT to transform the data into a format appropriate for delivery to the user.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-A564495D-ED7B-4F52-8FCA-944CF3BB274D"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a>. The XSQL pages framework uses XSU to query the database.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK1022"></a><a id="ADXDK19572"></a>
<div class="props_rev_3"><a id="GUID-855B6B47-A955-4434-BAF4-F744F882069C"></a>
<h2 id="ADXDK-GUID-855B6B47-A955-4434-BAF4-F744F882069C" class="sect2"><span class="enumeration_section">16.2</span> Using the XSQL Pages Publishing Framework: Overview</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C">Using the XSQL Pages Framework: Basic Process</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-EE6FC3BB-27D5-458D-810E-6D2ECE34AC48">Setting Up the XSQL Pages Framework</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-2F3D4C05-7E99-4E7D-994B-09A15331D01B">Running the XSQL Pages Demo Programs</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-48903610-4E87-4246-A872-3DE816BE47F6">Using the XSQL Pages Command-Line Utility</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19574"></a><a id="ADXDK19575"></a><a id="ADXDK19573"></a>
<div class="props_rev_3"><a id="GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C"></a>
<h3 id="ADXDK-GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C" class="sect3"><span class="enumeration_section">16.2.1</span> Using the XSQL Pages Framework: Basic Process</h3>
<div>
<p>The XSQL page processor engine interprets, caches, and processes the contents of XSQL pages. <a href="adx_j_xsqlpub.htm#GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C__BABDJGAF">Figure 16-1</a> shows the basic architecture of the XSQL pages publishing framework. The XSQL page processor provides access from this entry points:</p>
<ul style="list-style-type: disc;">
<li>
<p>From the command line or in batch mode with the XSQL command-line utility. The <code>oracle.xml.xsql.XSQLCommandLine</code> class is the command-line interface.</p>
</li>
<li>
<p>Over the web by using the XSQL servlet installed in a web server. The <code>oracle.xml.xsql.XSQLServlet</code> class is the servlet interface.</p>
</li>
<li>
<p>As part of JSP applications by using <code>&lt;jsp:include&gt;</code> to include a template or <code>&lt;jsp:forward&gt;</code> to forward a template.</p>
</li>
<li>
<p>Programmatically by using the <code>oracle.xml.xsql.XSQLRequest</code> Java class.</p>
</li>
</ul>
<div class="figure" id="GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C__BABDJGAF">
<p class="titleinfigure">Figure 16-1 XSQL Pages Framework Architecture</p>
<img width="600" height="256" src="img/GUID-D4FEC207-6934-4E1E-B049-54D2E941B5DC-default.gif" alt="Description of Figure 16-1 follows" title="Description of Figure 16-1 follows"/><br/>
<a href="img_text/GUID-D4FEC207-6934-4E1E-B049-54D2E941B5DC-default.htm">Description of &#34;Figure 16-1 XSQL Pages Framework Architecture&#34;</a></div>
<!-- class="figure" -->
<p>You can run the same XSQL pages from any of the access points shown in <a href="adx_j_xsqlpub.htm#GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C__BABDJGAF">Figure 16-1</a>. Regardless of which way you use the XSQL page processor, it performs these actions to generate a result:</p>
<ol>
<li>
<p>Receives a request to process an XSQL page. The request can come from the command-line utility or programmatically from an <code>XSQLRequest</code> object.</p>
</li>
<li>
<p>Assembles an XML datagram by using the result of one or more SQL queries. The query is specified in the <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> element of the XSQL page.</p>
</li>
<li>
<p>Returns this XML datagram to the requester.</p>
</li>
<li>
<p>Optionally transforms the datagram into any XML, HTML, or text-based format.</p>
</li>
</ol>
<p><a href="adx_j_xsqlpub.htm#GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C__BABECBGF">Figure 16-2</a> shows a typical web-based scenario in which a web server receives an HTTP request for <code>Page.xsql</code>, which contains a reference to the XSLT style sheet <code>Style.xsl</code>. The XSQL page contains a database query.</p>
<div class="figure" id="GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C__BABECBGF">
<p class="titleinfigure">Figure 16-2 Web Access to XSQL Pages</p>
<img width="473" height="482" src="img/GUID-C7402F71-A96E-490B-91CC-CCDAE0FEFD98-default.gif" alt="Description of Figure 16-2 follows" title="Description of Figure 16-2 follows"/><br/>
<a href="img_text/GUID-C7402F71-A96E-490B-91CC-CCDAE0FEFD98-print.htm">Description of &#34;Figure 16-2 Web Access to XSQL Pages&#34;</a></div>
<!-- class="figure" -->
<p>The XSQL page processor shown in <a href="adx_j_xsqlpub.htm#GUID-74D4AEF8-4B33-427C-B7EF-7A1B22756A6C__BABECBGF">Figure 16-2</a> performs these steps:</p>
<ol>
<li>
<p>Receives a request from the XSQL Servlet to process <code>Page.xsql</code>.</p>
</li>
<li>
<p>Parses <code>Page.xsql</code> with the Oracle XML Parser and caches it.</p>
</li>
<li>
<p>Connects to the database based on the value of the connection attribute on the document element.</p>
</li>
<li>
<p>Generates the XML datagram by replacing each XSQL action element, for example, <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a>, with the XML results returned by its built-in action handler.</p>
</li>
<li>
<p>Parses the <code>Style.xsl</code> style sheet and caches it.</p>
</li>
<li>
<p>Transforms the datagram by passing it and the <code>Style.xsl</code> style sheet to the Oracle XSLT processor.</p>
</li>
<li>
<p>Returns the resulting XML or HTML document to the requester.</p>
</li>
</ol>
<p>During the transformation step in this process, you can use style sheets that conform with the W3C XSLT 1.0 or 2.0 standard to transform the assembled datagram into document formats such as:</p>
<ul style="list-style-type: disc;">
<li>
<p>HTML for browser display</p>
</li>
<li>
<p>Wireless Markup Language (WML) for wireless devices</p>
</li>
<li>
<p>Scalable Vector Graphics (SVG) for data-driven charts, graphs, and diagrams</p>
</li>
<li>
<p>XML Stylesheet Formatting Objects (XSL-FO), for rendering into Adobe PDF</p>
</li>
<li>
<p>Text documents such as e-mails, SQL scripts, Java programs, and so on</p>
</li>
<li>
<p>Arbitrary XML-based document formats</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19576"></a>
<div class="props_rev_3"><a id="GUID-EE6FC3BB-27D5-458D-810E-6D2ECE34AC48"></a>
<h3 id="ADXDK-GUID-EE6FC3BB-27D5-458D-810E-6D2ECE34AC48" class="sect3"><span class="enumeration_section">16.2.2</span> Setting Up the XSQL Pages Framework</h3>
<div>
<div class="section">
<p>You can develop and use XSQL pages in various scenarios. This section describes these topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-1B3E10B8-6C78-422A-961A-3FBBB81B67BA">Creating and Testing XSQL Pages with Oracle JDeveloper</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-244EFC1A-1A2D-4CFF-A8A9-B76A79A7CC48">Setting the CLASSPATH for XSQL Pages</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-B0FCAC1D-B5DA-4F73-A53D-9BEDC1DD8A5D">Configuring the XSQL Servlet Container</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-89235366-EED7-49DD-A946-127E771B67CF">Setting Up the Connection Definitions</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19577"></a>
<div class="props_rev_3"><a id="GUID-1B3E10B8-6C78-422A-961A-3FBBB81B67BA"></a>
<h4 id="ADXDK-GUID-1B3E10B8-6C78-422A-961A-3FBBB81B67BA" class="sect4"><span class="enumeration_section">16.2.2.1</span> Creating and Testing XSQL Pages with Oracle JDeveloper</h4>
<div>
<div class="section">
<p>The easiest way to use XSQL pages is with Oracle JDeveloper. The IDE supports these features:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Color-coded syntax highlighting</p>
</li>
<li>
<p>XML syntax checking</p>
</li>
<li>
<p>In-context drop-down lists that help you pick valid XSQL tag names and auto-complete tag and attribute names</p>
</li>
<li>
<p>XSQL page deployment and testing</p>
</li>
<li>
<p>Debugging tools</p>
</li>
<li>
<p>Wizards for creating XSQL actions</p>
</li>
</ul>
<p>To create an XSQL page in an Oracle JDeveloper project:</p>
<ol>
<li>
<p>Create or open a project.</p>
</li>
<li>
<p>Select <span class="bold">File</span> and then <span class="bold">New</span>.</p>
</li>
<li>
<p>In the <span class="bold">New Gallery</span> dialog box, select the <span class="bold">General</span> category and then <span class="bold">XML</span>.</p>
</li>
<li>
<p>In the <span class="bold">Item</span> window, select <span class="bold">XSQL Page</span> and click <span class="bold">OK</span>. Oracle JDeveloper loads a tab for the new XSQL page into the central window.</p>
</li>
</ol>
<p>To add XSQL action elements such as <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> to your XSQL page, place the cursor where you want the new element to go and click an item in the Component Palette. A wizard opens that takes you through the steps of selecting which XSQL action you want to use and which attributes you must provide.</p>
<p>To check the syntax of an XSQL page, place the cursor in the page and right-click <span class="bold">Check XML Syntax</span>. If there are any XML syntax errors, Oracle JDeveloper displays them.</p>
<p>To test an XSQL page, select the page in the navigator and right-click <span class="bold">Run</span>. Oracle JDeveloper automatically starts a local web server, properly configured to run XSQL pages, and tests your page by starting your default browser with the appropriate URL to request the page. After you have run the XSQL page, you can continue to make modifications to it in the IDE. And, you can modify any XSLT style sheets with which it might be associated. After saving the files in the IDE, you can immediately refresh the browser to observe the effect of the changes.</p>
<p>You must add the XSQL runtime library to your project library list so that the <code>CLASSPATH</code> is properly set. The IDE adds this entry automatically when you go through the New Gallery dialog to create a new XSQL page, but you can also add it manually to the project as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Right-click the project in the Applications Navigator.</span></li>
<li><span>Select <span class="bold">Project Properties</span>.</span></li>
<li><span>Select <span class="bold">Profiles</span> and then <span class="bold">Libraries</span> from the navigation tree.</span></li>
<li><span>Move <span class="bold">XSQL Runtime</span> from the <span class="bold">Available Libraries</span> pane to <span class="bold">Selected Libraries</span>.</span></li>
</ol>
</div>
</div>
<a id="ADXDK19578"></a>
<div class="props_rev_3"><a id="GUID-244EFC1A-1A2D-4CFF-A8A9-B76A79A7CC48"></a>
<h4 id="ADXDK-GUID-244EFC1A-1A2D-4CFF-A8A9-B76A79A7CC48" class="sect4"><span class="enumeration_section">16.2.2.2</span> Setting the CLASSPATH for XSQL Pages</h4>
<div>
<div class="section">
<p>Outside of the Oracle JDeveloper environment, ensure that the XSQL page processor engine is properly configured.</p>
<p>Ensure that the appropriate Java Archive (JAR) files are in the <code>CLASSPATH</code> of the Java Virtual Machine (JVM) that processes the XSQL Pages. The complete set of XDK JAR files is described in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-D26168D9-2F21-4B5A-9F7B-F1D4B66F0EB4__BACCJCEA" title="Component, Library, and Notes are the columns.">Table 3-1</a>.&#34;</span> The JAR files for the XSQL framework include:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>xml.jar</code>, the XSQL page processor</p>
</li>
<li>
<p><code>xmlparserv2.jar</code>, the Oracle XML parser</p>
</li>
<li>
<p><code>xsu12.jar</code>, the Oracle XML SQL utility (XSU)</p>
</li>
<li>
<p><code>ojdbc6.jar</code>, the Oracle JDBC driver</p>
</li>
</ul>
<div class="infobox-note" id="GUID-244EFC1A-1A2D-4CFF-A8A9-B76A79A7CC48__GUID-70047B4F-59AD-4982-9D7F-4F48A52BDB94">
<p class="notep1">Note:</p>
<p>The XSQL servlet can connect to any database that has Java Database Connectivity (JDBC) support. Indicate the appropriate JDBC driver class and connection URL in the XSQL configuration file connection definition. Object-relational functionality works only when using Oracle Database with the Oracle JDBC driver.</p>
</div>
<p>If you have configured your <code>CLASSPATH</code> as instructed in <span class="q">&#34;<a href="adx_j_gs.htm#GUID-EA5DB831-1D91-453A-AF7B-7B55343B1720">Setting Up the XDK for Java Environment</a>,&#34;</span> you need to add the <span class="italic">directory</span> only where the XSQL pages configuration file resides. In the database installation of XDK, the directory for <code>XSQLConfig.xml</code> is <code>$ORACLE_HOME/xdk/admin</code>.</p>
<p>On Windows your <code>%CLASSPATH%</code> variable contains these entries:</p>
<pre dir="ltr">%ORACLE_HOME%\lib\ojdbc6.jar;%ORACLE_HOME%\lib\xmlparserv2.jar;
%ORACLE_HOME%\lib\xsu12.jar;C:\xsql\lib\xml.jar;%ORACLE_HOME%\xdk\admin
</pre>
<p>On UNIX the <code>$CLASSPATH</code> variable contains these entries:</p>
<pre dir="ltr">$ORACLE_HOME/lib/ojdbc6.jar:$ORACLE_HOME/lib/xmlparserv2.jar:
$ORACLE_HOME/lib/xsu12.jar:$ORACLE_HOME/lib/xml.jar:$ORACLE_HOME\xdk\admin
</pre>
<div class="infobox-note" id="GUID-244EFC1A-1A2D-4CFF-A8A9-B76A79A7CC48__GUID-962765D7-4187-46C8-A0A6-1BA5E3B37BD3">
<p class="notep1">Note:</p>
<p>If you are deploying your XSQL pages in a Java Platform, Enterprise Edition (Java EE) web application archive (WAR) file, then you can include the XSQL JAR files in the <code>./WEB-INF/lib</code> directory of the WAR file.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19579"></a>
<div class="props_rev_3"><a id="GUID-B0FCAC1D-B5DA-4F73-A53D-9BEDC1DD8A5D"></a>
<h4 id="ADXDK-GUID-B0FCAC1D-B5DA-4F73-A53D-9BEDC1DD8A5D" class="sect4"><span class="enumeration_section">16.2.2.3</span> Configuring the XSQL Servlet Container</h4>
<div>
<div class="section">
<p>You can install the XSQL servlet in a variety of different web servers. See the file <code>$ORACLE_HOME/xdk/readme.html</code> for servlet installation instructions.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19581"></a><a id="ADXDK19580"></a>
<div class="props_rev_3"><a id="GUID-89235366-EED7-49DD-A946-127E771B67CF"></a>
<h4 id="ADXDK-GUID-89235366-EED7-49DD-A946-127E771B67CF" class="sect4"><span class="enumeration_section">16.2.2.4</span> Setting Up the Connection Definitions</h4>
<div>
<div class="section">
<p>XSQL pages specify database connections by using a short name for a connection that is defined in the XSQL configuration file, which by default is named <code>$ORACLE_HOME/xdk/admin/XSQLConfig.xml</code>.</p>
<div class="infobox-note" id="GUID-89235366-EED7-49DD-A946-127E771B67CF__GUID-4404DAED-08D2-4086-A462-79F842D76824">
<p class="notep1">Note:</p>
<p>If you are deploying your XSQL pages in a Java EE WAR file, then you can place the <code>XSQLConfig.xml</code> file in the <code>./WEB-INF/classes</code> directory of your WAR file.</p>
</div>
<p>The sample XSQL page shown in <a href="adx_j_xsqlpub.htm#GUID-660C4C15-2442-4E60-A21F-F45CFE60873B__CACCIIDJ">Example 16-1</a> contains this connection information:</p>
<pre dir="ltr">&lt;xsql:query connection=&#34;hr&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
</pre>
<p>Connection names are defined in the <code>&lt;connectiondefs&gt;</code> section of the XSQL configuration file. <a href="adx_j_xsqlpub.htm#GUID-89235366-EED7-49DD-A946-127E771B67CF__CACBEJBJ">Example 16-2</a> shows the relevant section of the sample configuration file included with the database, with the <code>hr</code> connection in bold.</p>
<p>For each database connection, you can specify these elements:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>&lt;username&gt;</code>, the database user name</p>
</li>
<li>
<p><code>&lt;password&gt;</code>, the database password</p>
</li>
<li>
<p><code>&lt;dburl&gt;</code>, the JDBC connection string</p>
</li>
<li>
<p><code>&lt;driver&gt;</code>, the fully qualified class name of the JDBC driver to use</p>
</li>
<li>
<p><code>&lt;autocommit&gt;</code>, which optionally forces <code>AUTOCOMMIT</code> to <code>TRUE</code> or <code>FALSE</code></p>
</li>
</ul>
<p>Specify an <code>&lt;autocommit&gt;</code> child element to control the setting of the JDBC autocommit for any connection. If no <code>&lt;autocommit&gt;</code> child element is set for a <code>&lt;connection&gt;</code>, then the autocommit setting is not set by the XSQL connection manager. In this case, the setting is the default autocommit setting for the JDBC driver.</p>
<p>You can place an arbitrary number of <code>&lt;connection&gt;</code> elements in the XSQL configuration file to define your database connections. An individual XSQL page refers to the connection it wants to use by putting a <code>connection=&#34;</code><span class="italic"><code>xxx</code></span><code>&#34;</code> attribute on the top-level element in the page (also called the &#34;document element&#34;).</p>
<div class="infobox-note" id="GUID-89235366-EED7-49DD-A946-127E771B67CF__GUID-F08F10A8-3930-4590-9FD6-1878264F859F">
<p class="notep1">Note:</p>
<p>The <code>XSQLConfig.xml</code> file contains sensitive database user name and password information that must be kept secure on the database server. See <span class="q">&#34;<a href="adx_j_xsqlpub.htm#GUID-338D0A70-3F60-4708-9D8E-54C8D87E93DE">Security Considerations for XSQL Pages</a>&#34;</span> for instructions.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-89235366-EED7-49DD-A946-127E771B67CF__CACBEJBJ">
<p class="titleinexample">Example 16-2 Connection Definitions Section of XSQLConfig.xml</p>
<pre dir="ltr">&lt;connectiondefs&gt; 
  ...
  <span class="bold">&lt;connection name=&#34;hr&#34;&gt;</span>
    <span class="bold">&lt;username&gt;hr&lt;/username&gt;</span>
    <span class="bold">&lt;password&gt;hr_password&lt;/password&gt;</span>
    <span class="bold">&lt;dburl&gt;jdbc:oracle:thin:@localhost:1521:ORCL&lt;/dburl&gt;</span>
    <span class="bold">&lt;driver&gt;oracle.jdbc.driver.OracleDriver&lt;/driver&gt;</span>
    <span class="bold">&lt;autocommit&gt;false&lt;/autocommit&gt;</span>
<span class="bold">  &lt;/connection&gt;</span>
  ...
&lt;/connectiondefs&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19583"></a><a id="ADXDK19582"></a>
<div class="props_rev_3"><a id="GUID-2F3D4C05-7E99-4E7D-994B-09A15331D01B"></a>
<h3 id="ADXDK-GUID-2F3D4C05-7E99-4E7D-994B-09A15331D01B" class="sect3"><span class="enumeration_section">16.2.3</span> Running the XSQL Pages Demo Programs</h3>
<div>
<div class="section">
<p>Demo programs for the XSQL servlet are included in <code>$ORACLE_HOME/xdk/demo/java/xsql</code>. <a href="adx_j_xsqlpub.htm#GUID-2F3D4C05-7E99-4E7D-994B-09A15331D01B__CHECIJCH" title="Demonstration Name and Description are the columns.">Table 16-1</a> lists the demo subdirectories and explains the included demos. The Demo Name column refers to the title of the demo listed on the XSQL Pages &amp; XSQL Servlet home page. <span class="q">&#34;<a href="adx_j_xsqlpub.htm#GUID-20F5A61E-7840-4167-8895-4D4C7802C3D9">Running the XSQL Demos</a>&#34;</span> explains how to access the home page.</p>
<div class="tblformalwide" id="GUID-2F3D4C05-7E99-4E7D-994B-09A15331D01B__CHECIJCH">
<p class="titleintable">Table 16-1 XSQL Servlet Demos</p>
<table class="cellalignment655" title="XSQL Servlet Demos " summary="Demonstration Name and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment726" id="d84781e1532">Directory</th>
<th class="cellalignment765" id="d84781e1535">Demo Name</th>
<th class="cellalignment755" id="d84781e1538">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1543" headers="d84781e1532">
<p><code>home/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1543 d84781e1535">
<p>XSQL Pages &amp; XSQL Servlet</p>
</td>
<td class="cellalignment756" headers="d84781e1543 d84781e1538">
<p>Contains the pages that display the tabbed home page of the XSQL demos and the online XSQL help that you can access from that page. As explained in <span class="q">&#34;<a href="adx_j_xsqlpub.htm#GUID-20F5A61E-7840-4167-8895-4D4C7802C3D9">Running the XSQL Demos</a>.&#34;</span> you can invoke the XSQL home page from the <code>index.html</code> page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1563" headers="d84781e1532">
<p><code>helloworld/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1563 d84781e1535">
<p>Hello World Page</p>
</td>
<td class="cellalignment756" headers="d84781e1563 d84781e1538">
<p>Shows the simplest possible XSQL page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1576" headers="d84781e1532">
<p><code>emp/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1576 d84781e1535">
<p>Employee Page</p>
</td>
<td class="cellalignment756" headers="d84781e1576 d84781e1538">
<p>XSQL page showing XML data from the <code>hr.employees</code> table, using XSQL page parameters to control what employees are returned and which columns to use for the database sort.</p>
<p>Uses an associated XSLT style sheet to format the results as an HTML Form containing the <code>emp.xsql</code> page as the form action so the user can refine the search criteria.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1595" headers="d84781e1532">
<p><code>insclaim/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1595 d84781e1535">
<p>Insurance Claim Page</p>
</td>
<td class="cellalignment756" headers="d84781e1595 d84781e1538">
<p>Demonstrates several sample queries over the richly structured Insurance Claim object view. The <code>insclaim.sql</code> scripts sets up the <code>INSURANCE_CLAIM_VIEW</code> object view and populates it with sample data.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1612" headers="d84781e1532">
<p><code>classerr/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1612 d84781e1535">
<p>Invalid Classes Page</p>
</td>
<td class="cellalignment756" headers="d84781e1612 d84781e1538">
<p>Uses <code>invalidclasses.xsl</code> to format a &#34;live&#34; list of current Java class compilation errors in your schema. The accompanying SQL script sets up the <code>XSQLJavaClassesView</code> object view used by the demo. The master/detail information from the object view is formatted into HTML by the <code>invalidclasses.xsl</code> style sheet in the server.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1632" headers="d84781e1532">
<p><code>doyouxml/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1632 d84781e1535">
<p>Do You XML? Site</p>
</td>
<td class="cellalignment756" headers="d84781e1632 d84781e1538">
<p>Shows how a simple, data-driven web site can be built with an XSQL page that uses SQL, XSQL substitution variables in the queries, and XSLT for formatting the site.</p>
<p>Demonstrates using substitution parameters in both the body of SQL query statements within <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> tags, and also within the attributes to <code>&lt;xsql:query&gt;</code> tags to control behavior such as how many records to display and to skip (for &#34;paging&#34; through query results in a stateless way).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1652" headers="d84781e1532">
<p><code>empdept/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1652 d84781e1535">
<p>Emp/Dept Object Demo</p>
</td>
<td class="cellalignment756" headers="d84781e1652 d84781e1538">
<p>Demonstrates how to use an object view to group master/detail information from two existing flat tables such as <code>scott.emp</code> and <code>scott.dept</code>. The <code>empdeptobjs.sql</code> script creates the object view and also the <code>INSTEAD OF INSERT</code> triggers that enable the master/detail view to be used as an insert target of <code>xsql:insert-request</code>.</p>
<p>The <code>empdept.xsl</code> style sheet shows a form of an XSLT style sheet that looks just like an HTML page without the extra <code>xsl:stylesheet</code> or <code>xsl:transform</code> at the top. Using a Literal Result Element as a style sheet is part of the XSLT 1.0 specification. The style sheet also shows how to generate an HTML page that includes <code>&lt;link rel=&#34;stylesheet&#34;&gt;</code> to enable the generated HTML to fully leverage cascading style sheets (CSS) for centralized HTML style information, found in the <code>coolcolors.css</code> file.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1695" headers="d84781e1532">
<p><code>airport/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1695 d84781e1535">
<p>Airport Code Validation</p>
</td>
<td class="cellalignment756" headers="d84781e1695 d84781e1538">
<p>Returns a datagram of information about airports based on their three-letter codes and uses <code>&lt;xsql:no-rows-query&gt;</code> as alternative queries when initial queries return no rows. After attempting to match the airport code passed in, the XSQL page tries a fuzzy match based on the airport description.</p>
<p>The <code>airport.htm</code> page shows how to use the XML results of the <code>airport.xsql</code> page from a web page with JavaScript to exploit built-in Document Object Model (DOM) functionality in Internet Explorer.</p>
<p>When you enter the three-letter airport code on the web page, a JavaScript fetches an XML datagram from XSQL servlet. The datagram corresponds to the code that you entered. If the return indicates no match, then the program collects a &#34;picklist&#34; of possible matches based on information returned in the XML datagram from XSQL servlet</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1719" headers="d84781e1532">
<p><code>airport/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1719 d84781e1535">
<p>Airport Code Display</p>
</td>
<td class="cellalignment756" headers="d84781e1719 d84781e1538">
<p>Demonstrates use of the same XSQL page as the Airport Code Validation example but supplies an XSLT style sheet name in the request. This behavior causes the airport information to be formatted as an HTML form instead of being returned as raw XML.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1730" headers="d84781e1532">
<p><code>airport/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1730 d84781e1535">
<p>Airport Soap Service</p>
</td>
<td class="cellalignment756" headers="d84781e1730 d84781e1538">
<p>Demonstrates returning airport information as a Simple Object Access Protocol (SOAP) Service.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1741" headers="d84781e1532">
<p><code>adhocsql/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1741 d84781e1535">
<p>Adhoc Query Visualization</p>
</td>
<td class="cellalignment756" headers="d84781e1741 d84781e1538">
<p>Demonstrates how to pass a SQL query and an XSLT style sheet as parameters to the server.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1753" headers="d84781e1532">
<p><code>document/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1753 d84781e1535">
<p>XML Document Demo</p>
</td>
<td class="cellalignment756" headers="d84781e1753 d84781e1538">
<p>Demonstrates inserting XML documents into relational tables. The <code>docdemo.sql</code> script creates a user-defined type called XMLDOCFRAG containing an attribute of type character large object (CLOB).</p>
<p>Try inserting the text of the document in <code>./xsql/demo/xml99.xml</code> and providing the name <code>xml99.xsl</code> as the style sheet, and <code>./xsql/demo/JDevRelNotes.xml</code> with the style sheet <code>relnotes.xsl</code>.</p>
<p>The <code>docstyle.xsql</code> page shows an example of the <a href="adx_ref_xsql.htm#GUID-82926ED4-FC53-4580-9CD7-DFD52EF3A31E">&lt;xsql:include-xsql&gt;</a> action element to include the output of the <code>doc.xsql</code> page into its own page before transforming the final output using a client-supplied style sheet name.</p>
<p>The demo uses the client-side XML features of Internet Explorer 5.0 to check the document for well-formedness before allowing it to be posted to the server.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1795" headers="d84781e1532">
<p><code>insertxml/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1795 d84781e1535">
<p>XML Insert Request Demo</p>
</td>
<td class="cellalignment756" headers="d84781e1795 d84781e1538">
<p>Demonstrates posting XML from a client to an XSQL page that handles inserting the posted XML data into a database table using the <a href="adx_ref_xsql.htm#GUID-A45E6112-F904-4665-959B-1AF39413E2F7">&lt;xsql:insert-request&gt;</a> action element. The demo accepts XML documents in the <code>moreover.com</code> XML-based news format.</p>
<p>In this case, the program doing the posting of the XML is a client-side web page using Internet Explorer 5.0 and the <code>XMLHttpRequest</code> object from JavaScript. If you look at the source for the <code>insertnewsstory.xsql</code> page, you&#39;ll see it&#39;s specifying a table name and an XSLT Transform name. The <code>moreover-to-newsstory.xsl</code> style sheet transforms the incoming XML information into the canonical format that the <code>OracleXMLSave</code> utility knows how to insert.</p>
<p>Try copying and pasting the example <code>&lt;article&gt;</code> element several times within the <code>&lt;moreovernews&gt;</code> element to insert several new articles in one shot.</p>
<p>The <code>newsstory.sql</code> script shows how INSTEAD OF triggers can be used on the database views into which you ask XSQL Pages to insert to the data to customize how incoming data is handled, default primary key values, and so on.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1840" headers="d84781e1532">
<p><code>svg/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1840 d84781e1535">
<p>Scalable Vector Graphics Demo</p>
</td>
<td class="cellalignment756" headers="d84781e1840 d84781e1538">
<p>The <code>deptlist.xsql</code> page displays a simple list of departments with hyperlinks to the <code>SalChart.xsql</code> page. The <code>SalChart.xsql</code> page queries employees for a given department passed in as a parameter and uses the associated <code>SalChart.xsql</code> style sheet to format the result into a Scalable Vector Graphics drawing, a bar chart comparing salaries of the employees in that department.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1863" headers="d84781e1532">
<p><code>fop/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1863 d84781e1535">
<p>PDF Demo</p>
</td>
<td class="cellalignment756" headers="d84781e1863 d84781e1538">
<p>The <code>emptable.xsql</code> page displays a simple list of employees. The <code>emptable.xsl</code> style sheet transforms the datapage into the XSL-FO Formatting Objects which, combined with the built-in FOP serializer, render the results in Adobe PDF format.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1880" headers="d84781e1532">
<p><code>cursor/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1880 d84781e1535">
<p>Cursor Demo</p>
</td>
<td class="cellalignment756" headers="d84781e1880 d84781e1538">
<p>Contains an example of using a nested <code>CURSOR</code> expression, which is one of three ways to use the default <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> element to produce nested elements.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment728" id="d84781e1898" headers="d84781e1532">
<p><code>actions/</code></p>
</td>
<td class="cellalignment766" headers="d84781e1898 d84781e1535">&nbsp;</td>
<td class="cellalignment756" headers="d84781e1898 d84781e1538">
<p>Contains the source code for two example custom actions.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
<a id="ADXDK19584"></a>
<div class="props_rev_3"><a id="GUID-430D7E5F-3A02-4F68-B33B-CE5B14042F7F"></a>
<h4 id="ADXDK-GUID-430D7E5F-3A02-4F68-B33B-CE5B14042F7F" class="sect4"><span class="enumeration_section">16.2.3.1</span> Setting Up the XSQL Demos</h4>
<div>
<div class="section">
<p>To set up the XSQL demos perform these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Change into the <code>$ORACLE_HOME/xdk/demo/java/xsql</code> directory (UNIX) or <code>%ORACLE_HOME%\xdk\demo\java\xsql</code> directory (Windows).</span></li>
<li class="stepexpand"><span>Start SQL*Plus and connect to your database as <code>ctxsys</code>&mdash;the schema owner for the Oracle Text packages&mdash;and issue this statement:</span>
<div>
<pre dir="ltr">GRANT EXECUTE ON ctx_ddl TO scott;
</pre></div>
</li>
<li class="stepexpand"><span>Connect to your database as a user with <code>DBA</code> privileges and issue this statement:</span>
<div>
<pre dir="ltr">GRANT QUERY REWRITE TO scott;
</pre>
<p>The preceding query enables <code>scott</code> to create a function-based index that one of the demos requires to perform case-insensitive queries on descriptions of airports.</p>
</div>
</li>
<li class="stepexpand"><span>Connect to your database as <code>scott</code>. You are prompted for the password.</span></li>
<li class="stepexpand"><span>Run the SQL script <code>install.sql</code> in the current directory. This script runs all SQL scripts for all the demos:</span>
<div>
<pre dir="ltr">@install.sql
</pre></div>
</li>
<li class="stepexpand"><span>Change to the <code>./doyouxml</code> subdirectory, and run this command to import sample data for the &#34;Do You XML?&#34; demo (you are prompted for the password):</span>
<div>
<pre dir="ltr">imp scott file=doyouxml.dmp
</pre></div>
</li>
<li class="stepexpand"><span>To run the Scalable Vector Graphics (SVG) demonstration, install an SVG plug-in such as Adobe SVG plug-in into your browser.</span></li>
</ol>
</div>
</div>
<a id="ADXDK19586"></a><a id="ADXDK19585"></a>
<div class="props_rev_3"><a id="GUID-20F5A61E-7840-4167-8895-4D4C7802C3D9"></a>
<h4 id="ADXDK-GUID-20F5A61E-7840-4167-8895-4D4C7802C3D9" class="sect4"><span class="enumeration_section">16.2.3.2</span> Running the XSQL Demos</h4>
<div>
<div class="section">
<p>The XSQL demos are designed to be accessed through a web browser. If you have set up the XSQL servlet in a web server as described in <span class="q">&#34;<a href="adx_j_xsqlpub.htm#GUID-B0FCAC1D-B5DA-4F73-A53D-9BEDC1DD8A5D">Configuring the XSQL Servlet Container</a>,&#34;</span> then you can access the demos through this URL, substituting appropriate values for <code>yourserver</code> and <code>port</code>:</p>
<pre dir="ltr">http://yourserver:port/xsql/index.html
</pre>
<p><a href="adx_j_xsqlpub.htm#GUID-20F5A61E-7840-4167-8895-4D4C7802C3D9__BABGEJHA">Figure 16-3</a> shows a section of the XSQL home page in Internet Explorer. (You must use browser version 5 or later.)</p>
<div class="figure" id="GUID-20F5A61E-7840-4167-8895-4D4C7802C3D9__BABGEJHA">
<p class="titleinfigure">Figure 16-3 XSQL Home Page</p>
<img width="1020" height="738" src="img/GUID-624E6DCF-9303-4B6B-AB9A-2E824EF9361D-default.gif" alt="Description of Figure 16-3 follows" title="Description of Figure 16-3 follows"/><br/>
<a href="img_text/GUID-624E6DCF-9303-4B6B-AB9A-2E824EF9361D-default.htm">Description of &#34;Figure 16-3 XSQL Home Page&#34;</a></div>
<!-- class="figure" -->
<p>The demos are designed to be self-explanatory. Click the demo titles&mdash;<span class="bold">Hello World Page</span>, <span class="bold">Employee Page</span>, and so forth&mdash;and follow the online instructions.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19587"></a>
<div class="props_rev_3"><a id="GUID-48903610-4E87-4246-A872-3DE816BE47F6"></a>
<h3 id="ADXDK-GUID-48903610-4E87-4246-A872-3DE816BE47F6" class="sect3"><span class="enumeration_section">16.2.4</span> Using the XSQL Pages Command-Line Utility</h3>
<div>
<div class="section">
<p>Often the content of a dynamic page is based on data that does not frequently change. To optimize performance of your web publishing, you can use operating system facilities to schedule offline processing of your XSQL pages. This technique enables the processed results to be served statically by your web server.</p>
<p>XDK includes a command-line Java interface that runs the XSQL page processor. You can process any XSQL page with the XSQL command-line utility.</p>
<p>The <code>$ORACLE_HOME/xdk/bin/xsql</code> and <code>%ORACLE_HOME%\xdk\bin\xsql.bat</code> shell scripts run the <code>oracle.xml.xsql.XSQLCommandLine</code> class. Before invoking the class ensure that your environment is configured as described in <span class="q">&#34;<a href="adx_j_xsqlpub.htm#GUID-EE6FC3BB-27D5-458D-810E-6D2ECE34AC48">Setting Up the XSQL Pages Framework</a>.&#34;</span> Depending on how you invoke the utility, the syntax is either of these:</p>
<pre dir="ltr">java oracle.xml.xsql.XSQLCommandLine <span class="italic">xsqlpage</span> [<span class="italic">outfile</span>] [param1=value1 ...]
xsql xsqlpage [outfile] [param1=value1 ...]
</pre>
<p>If you specify an <span class="italic"><code>outfile</code></span>, then the result of processing <code>xsqlpage</code> is written to it; otherwise the result goes to standard out. You can pass any number of parameters to the XSQL page processor, which are available for reference by the XSQL page processed as part of the request. However, these parameter names are recognized by the command-line utility and have a predefined behavior:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>xml-stylesheet=stylesheetURL</code></p>
<p>Provides the relative or absolute URL for a style sheet to use for the request. You can also set it to the string <code>none</code> to suppress XSLT style sheet processing for debugging.</p>
</li>
<li>
<p><code>posted-xml=XMLDocumentURL</code></p>
<p>Provides the relative or absolute URL of an XML resource to treat as if it were posted as part of the request.</p>
</li>
<li>
<p><code>useragent=UserAgentString</code></p>
<p>Simulates a particular HTTP User-Agent string from the command line so that an appropriate style sheet for that User-Agent type is selected as part of command-line processing of the page.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19588"></a>
<div class="props_rev_3"><a id="GUID-467F3D9E-A9DD-4ED9-9DE8-97435FB4D0E2"></a>
<h2 id="ADXDK-GUID-467F3D9E-A9DD-4ED9-9DE8-97435FB4D0E2" class="sect2"><span class="enumeration_section">16.3</span> Generating and Transforming XML with XSQL Servlet</h2>
<div>
<div class="section">
<p>This section describes the most basic tasks that you can perform with your server-side XSQL page templates:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3">Composing XSQL Pages</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-9097BDE6-8992-424B-BC63-3607A6DB0E38">Producing Datagrams from SQL Queries</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA">Transforming XML Datagrams into an Alternative XML Format</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-6B5269E5-9455-44A0-8D33-C916D19793EB">Transforming XML Datagrams into HTML for Display</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19590"></a><a id="ADXDK19591"></a><a id="ADXDK19589"></a>
<div class="props_rev_3"><a id="GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3"></a>
<h3 id="ADXDK-GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3" class="sect3"><span class="enumeration_section">16.3.1</span> Composing XSQL Pages</h3>
<div>
<div class="section">
<p>You can serve database information in XML format over the web with XSQL pages. For example, suppose your aim is to serve a real-time XML datagram from Oracle of all available flights landing today at JFK airport. <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACJFEFI">Example 16-3</a> shows a sample XSQL page in a file named <code>AvailableFlightsToday.xsql</code>.</p>
<p>The XSQL page is an XML file that contains any mix of static XML content and XSQL action elements. The file can have any extension, but <code>.xsql</code> is the default extension for XSQL pages. You can modify your servlet engine configuration settings to associate other extensions by using the same technique described in <span class="q">&#34;<a href="adx_j_xsqlpub.htm#GUID-B0FCAC1D-B5DA-4F73-A53D-9BEDC1DD8A5D">Configuring the XSQL Servlet Container</a>.&#34;</span> The servlet extension mapping is configured inside the <code>./WEB-INF/web.xml</code> file in a Java EE WAR file.</p>
<p>The XSQL page in <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACJFEFI">Example 16-3</a> begins with this declaration:</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
</pre>
<p>The first, outermost element in an XSQL page is the <strong class="term">document element</strong>. <code>AvailableFlightsToday.xsql</code> contains a single XSQL action element <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a>, but no static XML elements. In this case the <code>&lt;xsql:query&gt;</code> element is the document element. <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACJFEFI">Example 16-3</a> represents the simplest useful XSQL page: one that contains a single query. The results of the query replace the <code>&lt;xsql:query&gt;</code> section in the XSQL page.</p>
<div class="infobox-note" id="GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__GUID-07EAC600-D327-402A-A997-E12D29D02BAA">
<p class="notep1">Note:</p>
<p><a href="adx_ref_xsql.htm#GUID-6CECB521-F70B-434A-AA73-EB2049F5E463">XSQL Pages Reference</a> describes the complete set of built-in action elements.</p>
</div>
<p>The <code>&lt;xsql:query&gt;</code> action element includes an <code>xmlns</code> attribute that declares the <code>xsql</code> namespace prefix as a synonym for the <code>urn:oracle-xsql</code> value, which is the Oracle XSQL namespace identifier:</p>
<pre dir="ltr">&lt;xsql:query connection=&#34;demo&#34; bind-params=&#34;City&#34; <span class="bold">xmlns:xsql=&#34;urn:oracle-xsql&#34;</span>&gt;
</pre>
<p>The element also contains a <code>connection</code> attribute whose value is the name of a predefined connection in the XSQL configuration file:</p>
<pre dir="ltr">&lt;xsql:query <span class="bold">connection=&#34;demo&#34;</span> bind-params=&#34;City&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
</pre>
<p>The details concerning the user name, password, database, and JDBC driver to be used for the <code>demo</code> connection are centralized in the configuration file.</p>
<p>To include more than one query on the page, you can invent an XML element to wrap the other elements. <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACDJDJI">Example 16-4</a> shows this technique.</p>
<p>In <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACDJDJI">Example 16-4</a>, the <code>connection</code> attribute and the <code>xsql</code> namespace declaration always go on the document element, whereas the <code>bind-params</code> is specific to the <code>&lt;xsql:query&gt;</code> action.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACJFEFI">
<p class="titleinexample">Example 16-3 Sample XSQL Page in AvailableFlightsToday.xsql</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;xsql:query connection=&#34;demo&#34; bind-params=&#34;City&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  SELECT    Carrier, FlightNumber, Origin, TO_CHAR(ExpectedTime,&#39;HH24:MI&#39;) AS Due
  FROM      FlightSchedule
  WHERE     TRUNC(ExpectedTime) = TRUNC(SYSDATE)
  AND       Arrived = &#39;N&#39;
  AND       Destination = ?   /* The &#34;?&#34; represents a bind variable bound */
  ORDER BY  ExpectedTime      /* to the value of the City parameter.      */
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACDJDJI">
<p class="titleinexample">Example 16-4 Wrapping the &lt;xsql:query&gt; Element</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query bind-params=&#34;City&#34;&gt;
    SELECT   Carrier, FlightNumber, Origin, TO_CHAR(ExpectedTime,&#39;HH24:MI&#39;) AS Due
    FROM     FlightSchedule
    WHERE    TRUNC(ExpectedTime) = TRUNC(SYSDATE) 
    AND      Arrived = &#39;N&#39;
    AND      Destination = ?   /* The ? is a bind variable bound       */
    ORDER BY ExpectedTime      /* to the value of the City parameter.  */
  &lt;/xsql:query&gt;
  &lt;!-- Other xsql:query actions can go here inside &lt;page&gt; and &lt;/page&gt; --&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDK19593"></a><a id="ADXDK19594"></a><a id="ADXDK19592"></a>
<div class="props_rev_3"><a id="GUID-9D19543C-E8E8-4B7B-8183-C9D093DB74E5"></a>
<h4 id="ADXDK-GUID-9D19543C-E8E8-4B7B-8183-C9D093DB74E5" class="sect4"><span class="enumeration_section">16.3.1.1</span> Using Bind Parameters</h4>
<div>
<div class="section">
<p>The <code>&lt;xsql:query&gt;</code> element shown in <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACJFEFI">Example 16-3</a> contains a <code>bind-params</code> attribute that associates the values of parameters in the request to bind variables in the SQL statement included in the <code>&lt;xsql:query&gt;</code> tag. The bind parameters in the SQL statement are represented by question marks.</p>
<p>You can use SQL bind variables to parameterize the results of any of the actions in <a href="adx_ref_xsql.htm#GUID-6CECB521-F70B-434A-AA73-EB2049F5E463__BJEBEJFF" title="XSQL Action Element, Handler Class, and Description are the columns.">Table 32-1</a> that allow SQL statements. Bind variables enable your XSQL page template to produce results based on the values of parameters passed in the request.</p>
<p>To use a bind variable, include a question mark anywhere in a statement where bind variables are allowed by SQL. Whenever a SQL statement is executed in the page, the XSQL engine binds the parameter values to the variable by specifying the <code>bind-params</code> attribute on the action element.</p>
<p><a href="adx_j_xsqlpub.htm#GUID-9D19543C-E8E8-4B7B-8183-C9D093DB74E5__BABBGABH">Example 16-5</a> shows an XSQL page that binds the bind variables to the value of the <code>custid</code> parameter in the page request.</p>
<p>The XML data for a customer with ID of 101 can then be requested by passing the customer id parameter in the request:</p>
<pre dir="ltr">http://yourserver.com/fin/CustomerPortfolio.xsql?<span class="bold">custid=1001</span>
</pre>
<p>The value of the <code>bind-params</code> attribute is a space-delimited list of parameter names. The left-to-right order indicates the positional bind variable to which its value is bound in the statement. Thus, if your SQL statement contains five question marks, then the <code>bind-params</code> attribute needs a space-delimited list of five parameter names. If the same parameter value must be bound to several different occurrences of a bind variable, then repeat the name of the parameters in the value of the <code>bind-params</code> attribute at the appropriate position. Failure to include the same number of parameter names in the <code>bind-params</code> attribute as in the query causes an error when the page is executed.</p>
<p>You can use variables in any action that expects a SQL statement or PL/SQL block. The page shown in <a href="adx_j_xsqlpub.htm#GUID-9D19543C-E8E8-4B7B-8183-C9D093DB74E5__BABJDBFH">Example 16-6</a> shows this technique. The XSQL page contains three action elements:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_ref_xsql.htm#GUID-B44BC32C-50EF-480F-834E-062BD5AE4866">&lt;xsql:dml&gt;</a> binds <code>useridCookie</code> to an argument in the <code>log_user_hit</code> procedure.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> binds parameter <code>custid</code> to a variable in a <code>WHERE</code> clause.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7">&lt;xsql:include-owa&gt;</a> binds parameters <code>custid</code> and <code>userCookie</code> to two arguments in the <code>historical_data</code> procedure.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-9D19543C-E8E8-4B7B-8183-C9D093DB74E5__BABBGABH">
<p class="titleinexample">Example 16-5 Bind Variables in CustomerPortfolio.xsql</p>
<pre dir="ltr">&lt;portfolio connnection=&#34;prod&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query <span class="bold">bind-params=&#34;custid&#34;</span>&gt;
    SELECT s.ticker as &#34;Symbol&#34;, s.last_traded_price as &#34;Price&#34;
    FROM latest_stocks s, customer_portfolio p
    <span class="bold">WHERE p.customer_id = ?</span>
    AND s.ticker = p.ticker
  &lt;/xsql:query&gt;
&lt;/portfolio&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19543C-E8E8-4B7B-8183-C9D093DB74E5__BABJDBFH">
<p class="titleinexample">Example 16-6 Bind Variables with Action Elements in CustomerPortfolio.xsql</p>
<pre dir="ltr">&lt;portfolio connnection=&#34;prod&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:dml commit=&#34;yes&#34; <span class="bold">bind-params=&#34;useridCookie&#34;</span>&gt;
     BEGIN <span class="bold">log_user_hit(?)</span>; END;
  &lt;/xsql:dml&gt;
  &lt;current-prices&gt;
    &lt;xsql:query <span class="bold">bind-params=&#34;custid&#34;</span>&gt;
      SELECT s.ticker as &#34;Symbol&#34;, s.last_traded_price as &#34;Price&#34;
      FROM latest_stocks s, customer_portfolio p
      <span class="bold">WHERE p.customer_id = ?</span>
      AND s.ticker = p.ticker
    &lt;/xsql:query&gt;
  &lt;/current-prices&gt;
  &lt;analysis&gt;
    &lt;xsql:include-owa <span class="bold">bind-params=&#34;custid userCookie&#34;</span>&gt;
      BEGIN portfolio_analysis.historical_data(<span class="bold">?,5 /* years */, ?</span>); END;
    &lt;/xsql:include-owa&gt;
  &lt;/analysis&gt;
&lt;/portfolio&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19596"></a><a id="ADXDK19597"></a><a id="ADXDK19595"></a>
<div class="props_rev_3"><a id="GUID-1BAA1C0D-A63F-4B1B-8933-790573DF8D79"></a>
<h4 id="ADXDK-GUID-1BAA1C0D-A63F-4B1B-8933-790573DF8D79" class="sect4"><span class="enumeration_section">16.3.1.2</span> Using Lexical Substitution Parameters</h4>
<div>
<div class="section">
<p>For any XSQL action element, you can substitute the value of any attribute or the text of any contained SQL statement with a lexical substitution parameter. Thus, you can parameterize how actions behave and substitute parts of the SQL statements that they perform. Lexical substitution parameters are referenced with this syntax: {<code>@ParameterName</code>}.</p>
<p><a href="adx_j_xsqlpub.htm#GUID-1BAA1C0D-A63F-4B1B-8933-790573DF8D79__BABGGBIA">Example 16-7</a> shows how you can use two lexical substitution parameters. One parameter in the <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> element sets the maximum number of rows to be passed in, whereas the other controls the list of columns to be ordered.</p>
<p><a href="adx_j_xsqlpub.htm#GUID-1BAA1C0D-A63F-4B1B-8933-790573DF8D79__BABGGBIA">Example 16-7</a> also contains two bind parameters: <code>dev</code> and <code>prod</code>. For example, you might want to get the open bugs for developer <code>yxsmith</code> against product <code>817</code>. And, you want to retrieve only 10 rows and order them by bug number. You can fetch the XML for the bug list by specifying parameter values:</p>
<pre dir="ltr">http://server.com/bug/DevOpenBugs.xsql?<span class="bold">dev=yxsmith&amp;prod=817</span><span class="bold">&amp;max=10&amp;orderby=bugno</span>
</pre>
<p>You can also use the XSQL command-line utility to make the request:</p>
<pre dir="ltr">xsql DevOpenBugs.xsql <span class="bold">dev=yxsmith prod=817 max=10 orderby=bugno</span>
</pre>
<p>Lexical parameters also enable you to specify parameters for the XSQL pages connection and the style sheet used to process the page. <a href="adx_j_xsqlpub.htm#GUID-1BAA1C0D-A63F-4B1B-8933-790573DF8D79__BABDHDBC">Example 16-8</a> shows this technique. You can switch between style sheets <code>test.xsql</code> and <code>prod.xsl</code> by specifying the name/value pairs <code>sheet=test</code> and <code>sheet=prod</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-1BAA1C0D-A63F-4B1B-8933-790573DF8D79__BABGGBIA">
<p class="titleinexample">Example 16-7 Lexical Substitution Parameters for Rows and Columns in DevOpenBugs.xsql</p>
<pre dir="ltr">&lt;!-- DevOpenBugs.xsql --&gt;
&lt;open-bugs connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query max-rows=&#34;<span class="bold">{@max}</span>&#34; bind-params=&#34;dev prod&#34;&gt;
    SELECT bugno, abstract, status
    FROM   bug_table
    WHERE  programmer_assigned = UPPER(?)
    AND    product_id          = ?
    AND    status &lt; 80
    ORDER BY <span class="bold">{@orderby}</span>
  &lt;/xsql:query&gt;
&lt;/open-bugs&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1BAA1C0D-A63F-4B1B-8933-790573DF8D79__BABDHDBC">
<p class="titleinexample">Example 16-8 Lexical Substitution Parameters for Connections and Style Sheets in DevOpenBugs.xsql</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;<span class="bold">{@sheet}</span>.xsl&#34;?&gt;
&lt;!-- DevOpenBugs.xsql --&gt;
&lt;open-bugs connection=&#34;{@conn}&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query max-rows=&#34;{@max}&#34; bind-params=&#34;dev prod&#34;&gt;
    SELECT bugno, abstract, status
      FROM bug_table
     WHERE programmer_assigned = UPPER(?)
       AND product_id          = ?
       AND status &lt; 80
    ORDER BY {@orderby}
  &lt;/xsql:query&gt;
&lt;/open-bugs&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19599"></a><a id="ADXDK19600"></a><a id="ADXDK19601"></a><a id="ADXDK19602"></a><a id="ADXDK19598"></a>
<div class="props_rev_3"><a id="GUID-8E65A80B-23D4-4823-B47A-806032B310BD"></a>
<h4 id="ADXDK-GUID-8E65A80B-23D4-4823-B47A-806032B310BD" class="sect4"><span class="enumeration_section">16.3.1.3</span> Providing Default Values for Bind and Substitution Parameters</h4>
<div>
<div class="section">
<p>You may want to provide a default value for a bind variable or a substitution parameter directly in the page. In this way, the page is parameterized without requiring the requester to explicitly pass in all values in every request.</p>
<p>To include a default value for a parameter, add an XML attribute of the same name as the parameter to the action element or to any ancestor element. If a value for a given parameter is not included in the request, then the XSQL page processor searches for an attribute by the same name on the current action element. If it does not find one, it keeps looking for such an attribute on each ancestor element of the current action element until it gets to the document element of the page.</p>
<p>The page in <a href="adx_j_xsqlpub.htm#GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABJBDCH">Example 16-9</a> defaults the value of the <code>max</code> parameter to <code>10</code> for both <code>&lt;xsql:query&gt;</code> actions in the page.</p>
<p>This page in <a href="adx_j_xsqlpub.htm#GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABFAHCE">Example 16-10</a> defaults the first query to a <code>max</code> of <code>5</code>, the second query to a <code>max</code> of <code>7</code>, and the third query to a <code>max</code> of <code>10</code>.</p>
<p>All defaults are overridden if a value of <code>max</code> is supplied in the request, as shown in this example:</p>
<pre dir="ltr">http://yourserver.com/example.xsql?<span class="bold">max=3</span>
</pre>
<p>Bind variables respect the same defaulting rules. <a href="adx_j_xsqlpub.htm#GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABHIHDC">Example 16-11</a> shows how you can set the <code>val</code> parameter to <code>10</code> by default.</p>
<p>If the page in <a href="adx_j_xsqlpub.htm#GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABHIHDC">Example 16-11</a> is requested without any parameters, it returns this XML datagram:</p>
<pre dir="ltr">&lt;example&gt;
  &lt;rowset&gt;
    &lt;row&gt;
      &lt;somevalue&gt;10&lt;/somevalue&gt;
    &lt;/row&gt;
  &lt;/row&gt;
&lt;/example&gt;
</pre>
<p>Alternatively, assume that the page is requested with this URL:</p>
<pre dir="ltr">http://yourserver.com/example.xsql?<span class="bold">val=3</span>
</pre>
<p>The preceding URL returns this datagram:</p>
<pre dir="ltr">&lt;example&gt;
  &lt;rowset&gt;
    &lt;row&gt;
      &lt;somevalue&gt;3&lt;/somevalue&gt;
    &lt;/row&gt;
  &lt;/row&gt;
&lt;/example&gt;
</pre>
<p>You can remove the default value for the <code>val</code> parameter from the page by removing the <code>val</code> attribute. <a href="adx_j_xsqlpub.htm#GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABEBCBG">Example 16-12</a> shows this technique.</p>
<p>A URL request for the page that does not supply a name/value pair returns this datagram:</p>
<pre dir="ltr">&lt;example&gt;
  &lt;rowset/&gt;
&lt;/example&gt;
</pre>
<p>A bind variable that is bound to a parameter with <span class="italic">neither</span> a default value <span class="italic">nor</span> a value supplied in the request is bound to NULL, which causes the <code>WHERE</code> clause in <a href="adx_j_xsqlpub.htm#GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABEBCBG">Example 16-12</a> to return no rows.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABJBDCH">
<p class="titleinexample">Example 16-9 Setting a Default Value</p>
<pre dir="ltr">&lt;example <span class="bold">max=&#34;10&#34;</span> connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query max-rows=&#34;<span class="bold">{@max}</span>&#34;&gt;SELECT * FROM TABLE1&lt;/xsql:query&gt;
  &lt;xsql:query max-rows=&#34;<span class="bold">{@max}</span>&#34;&gt;SELECT * FROM TABLE2&lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABFAHCE">
<p class="titleinexample">Example 16-10 Setting Multiple Default Values</p>
<pre dir="ltr">&lt;example <span class="bold">max=&#34;10&#34;</span> connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query <span class="bold">max=&#34;5&#34;</span> max-rows=&#34;<span class="bold">{@max}</span>&#34;&gt;SELECT * FROM TABLE1&lt;/xsql:query&gt;
  &lt;xsql:query <span class="bold">max=&#34;7&#34;</span> max-rows=&#34;<span class="bold">{@max}</span>&#34;&gt;SELECT * FROM TABLE2&lt;/xsql:query&gt;
  &lt;xsql:query max-rows=&#34;<span class="bold">{@max}</span>&#34;&gt;SELECT * FROM TABLE3&lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABHIHDC">
<p class="titleinexample">Example 16-11 Defaults for Bind Variables</p>
<pre dir="ltr">&lt;example <span class="bold">val=&#34;10&#34;</span> connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query tag-case=&#34;lower&#34; <span class="bold">bind-params=&#34;val val val&#34;</span>&gt;
    SELECT ? AS somevalue
    FROM DUAL
    WHERE ? = ?
  &lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8E65A80B-23D4-4823-B47A-806032B310BD__BABEBCBG">
<p class="titleinexample">Example 16-12 Bind Variables with No Defaults</p>
<pre dir="ltr">&lt;example connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:query tag-case=&#34;lower&#34; <span class="bold">bind-params=&#34;val val val&#34;</span>&gt;
    SELECT ? AS somevalue
    FROM DUAL
    WHERE ? = ?
  &lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19603"></a>
<div class="props_rev_3"><a id="GUID-63C56764-6363-472A-9E9E-B2DE02B234AB"></a>
<h4 id="ADXDK-GUID-63C56764-6363-472A-9E9E-B2DE02B234AB" class="sect4"><span class="enumeration_section">16.3.1.4</span> How the XSQL Page Processor Handles Different Types of Parameters</h4>
<div>
<p>XSQL pages can make use of parameters supplied in the request and also of page-private parameters. The names and values of page-private parameters are determined by actions in the page. If an action encounters a reference to a parameter named <code>param</code> in either a <code>bind-params</code> attribute or in a lexical parameter reference, then the value of the <code>param</code> parameter is resolved in this order:</p>
<ol>
<li>
<p>The value of the page-private parameter named <code>param</code>, if set</p>
</li>
<li>
<p>The value of the request parameter named <code>param</code>, if supplied</p>
</li>
<li>
<p>The default value provided by an attribute named <code>param</code> on the current action element or one of its ancestor elements</p>
</li>
<li>
<p>The value NULL for bind variables and the empty string for lexical parameters</p>
</li>
</ol>
<p>For XSQL pages that are processed by the XSQL servlet over HTTP, you can also set and reference the HTTP-Session-level variables and HTTP Cookies parameters.</p>
<p>For XSQL pages processed through the XSQL servlet, the value of a parameter <code>param</code> is resolved in this order:</p>
<ol>
<li>
<p>The value of the page-private parameter <code>param</code>, if set</p>
</li>
<li>
<p>The value of the cookie named <code>param</code>, if set</p>
</li>
<li>
<p>The value of the session variable named <code>param</code>, if set</p>
</li>
<li>
<p>The value of the request parameter named <code>param</code>, if supplied</p>
</li>
<li>
<p>The default value provided by an attribute named <code>param</code> on the current action element or one of its ancestor elements</p>
</li>
<li>
<p>The value NULL for bind variables and the empty string for lexical parameters</p>
</li>
</ol>
<p>The resolution order means that users cannot supply parameter values in a request to override parameters of the same name set in the HTTP session. Also, users cannot set them as cookies that persist across browser sessions.</p>
</div>
</div>
</div>
<a id="ADXDK19605"></a><a id="ADXDK19604"></a>
<div class="props_rev_3"><a id="GUID-9097BDE6-8992-424B-BC63-3607A6DB0E38"></a>
<h3 id="ADXDK-GUID-9097BDE6-8992-424B-BC63-3607A6DB0E38" class="sect3"><span class="enumeration_section">16.3.2</span> Producing Datagrams from SQL Queries</h3>
<div>
<div class="section">
<p>With XSQL servlet properly installed on your web server, you can access XSQL pages by following these basic steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Copy an XSQL file to a directory under the virtual hierarchy of your web server. <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACJFEFI">Example 16-3</a> shows the sample page <code>AvailableFlightsToday.xsql</code>.</span>
<div>
<p>You can also deploy XSQL pages in a standard Java EE WAR file, which occurs when you use Oracle JDeveloper to develop and deploy your pages to Oracle WebLogic Server.</p>
</div>
</li>
<li class="stepexpand"><span>Load the page in your browser. For example, if the root URL is <code>yourcompany.com</code>, then you can access the <code>AvailableFlightsToday.xsql</code> page through a web browser by requesting this URL:</span>
<div>
<pre dir="ltr">http://yourcompany.com/AvailableFlightsToday.xsql?City=JFK
</pre></div>
</li>
</ol>
<div class="section">
<p>The XSQL page processor automatically materializes the results of the query in your XSQL page as XML and returns them to the requester. Typically, another server program requests this XML-based datagram for processing, but if you use a browser such as Internet Explorer, then you can directly view the XML result as shown in <a href="adx_j_xsqlpub.htm#GUID-9097BDE6-8992-424B-BC63-3607A6DB0E38__BABGAHAI">Figure 16-4</a>.</p>
<div class="figure" id="GUID-9097BDE6-8992-424B-BC63-3607A6DB0E38__BABGAHAI">
<p class="titleinfigure">Figure 16-4 XML Result from XSQL Page (AvailableFlightsToday.xsql) Query</p>
<img width="600" height="480" src="img/GUID-57FD5003-1822-458E-B8EB-4EA4E02CC226-default.gif" alt="Description of Figure 16-4 follows" title="Description of Figure 16-4 follows"/><br/>
<a href="img_text/GUID-57FD5003-1822-458E-B8EB-4EA4E02CC226-default.htm">Description of &#34;Figure 16-4 XML Result from XSQL Page (AvailableFlightsToday.xsql) Query&#34;</a></div>
<!-- class="figure" --></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19607"></a><a id="ADXDK19610"></a><a id="ADXDK19608"></a><a id="ADXDK19609"></a><a id="ADXDK19606"></a>
<div class="props_rev_3"><a id="GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA"></a>
<h3 id="ADXDK-GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA" class="sect3"><span class="enumeration_section">16.3.3</span> Transforming XML Datagrams into an Alternative XML Format</h3>
<div>
<div class="section">
<p>If the canonical <code>&lt;ROWSET&gt;</code> and <code>&lt;ROW&gt;</code> XML output from <a href="adx_j_xsqlpub.htm#GUID-9097BDE6-8992-424B-BC63-3607A6DB0E38__BABGAHAI">Figure 16-4</a> is not the XML format you need, then you can associate an XSLT style sheet with your XSQL page. The style sheet can transform the XML datagram in the server before returning the data.</p>
<p>When exchanging data with another program, you typically agree on a document type definition (DTD) that describes the XML format for the exchange. Assume that you are given the <code>flight-list.dtd</code> definition and are told to produce your list of arriving flights in a format compliant with the DTD. You can use a visual tool such as XML Authority to browse the structure of the flight-list DTD, as shown in <a href="adx_j_xsqlpub.htm#GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__BABCDJHB">Figure 16-5</a>.</p>
<div class="figure" id="GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__BABCDJHB">
<p class="titleinfigure">Figure 16-5 Exploring flight-list.dtd with XML Authority</p>
<img width="600" height="268" src="img/GUID-D8EBC203-15A6-41D8-8A9D-1D719888E3E4-default.gif" alt="Description of Figure 16-5 follows" title="Description of Figure 16-5 follows"/><br/>
<a href="img_text/GUID-D8EBC203-15A6-41D8-8A9D-1D719888E3E4-default.htm">Description of &#34;Figure 16-5 Exploring flight-list.dtd with XML Authority&#34;</a></div>
<!-- class="figure" -->
<p><a href="adx_j_xsqlpub.htm#GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__BABCDJHB">Figure 16-5</a> shows that the standard XML formats for flight lists are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>&lt;flight-list&gt;</code> element, which contains one or more <code>&lt;flight&gt;</code> elements</p>
</li>
<li>
<p><code>&lt;flight&gt;</code> elements, which have attributes <code>airline</code> and <code>number</code>, and each of which contains an <code>&lt;arrives&gt;</code> element</p>
</li>
<li>
<p><code>&lt;arrives&gt;</code> elements, which contains text</p>
</li>
</ul>
<p><a href="adx_j_xsqlpub.htm#GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__CACGCDCH">Example 16-13</a> shows the XSLT style sheet <code>flight-list.xsl</code>. By associating the style sheet with the XSQL page, you can change the default <code>&lt;ROWSET&gt;</code> and <code>&lt;ROW&gt;</code> format into the industry-standard <code>&lt;flight-list&gt;</code> and <code>&lt;flight&gt;</code>.</p>
<p>The XSLT style sheet is a template that includes the literal elements to produce in the resulting document, such as <code>&lt;flight-list&gt;</code>, <code>&lt;flight&gt;</code>, and <code>&lt;arrives&gt;</code>, interspersed with XSLT actions that enable you to do this:</p>
<ul style="list-style-type: disc;">
<li>
<p>Loop over matching elements in the source document with <code>&lt;xsl:for-each&gt;</code></p>
</li>
<li>
<p>Plug in the values of source document elements where necessary with <code>&lt;xsl:value-of&gt;</code></p>
</li>
<li>
<p>Plug in the values of source document elements into attribute values with the <span class="italic"><code>{some_parameter}</code></span> notation</p>
</li>
</ul>
<p>The following items have been added to the top-level <code>&lt;flight-list&gt;</code> element in the <a href="adx_j_xsqlpub.htm#GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__CACGCDCH">Example 16-13</a> style sheet:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;</code></p>
<p>This attribute defines the XML namespace named <code>xsl</code> and identifies the URL string that uniquely identifies the XSLT specification. Although it looks just like a URL, think of the string <code>http://www.w3.org/1999/XSL/Transform</code> as the &#34;global primary key&#34; for the set of elements defined in the XSLT 1.0 specification. When the namespace is defined, you can use the <code>&lt;xsl:XXX&gt;</code> action elements in the style sheet to loop and plug values in where necessary.</p>
</li>
<li>
<p><code>xsl:version=&#34;1.0&#34;</code></p>
<p>This attribute identifies the document as an XSLT 1.0 style sheet. A version attribute is required on all XSLT style sheets for them to be valid and recognized by an XSLT processor.</p>
</li>
</ul>
<p>You can associate the <code>flight-list.xsl</code> style sheet with the <code>AvailableFlightsToday.xsql</code> in <a href="adx_j_xsqlpub.htm#GUID-EC3175BC-6D0E-4BA3-9C13-D02C5C1215E3__CACJFEFI">Example 16-3</a> by adding an <code>&lt;?xml-stylesheet?&gt;</code> instruction to the top of the page. <a href="adx_j_xsqlpub.htm#GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__CACBHJGD">Example 16-14</a> shows this technique.</p>
<p>Associating an XSLT style sheet with the XSQL page causes the requesting program or browser to view the XML in the format as specified by <code>flight-list.dtd</code> you were given. <a href="adx_j_xsqlpub.htm#GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__BABFFFEF">Figure 16-6</a> shows a sample browser display.</p>
<div class="figure" id="GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__BABFFFEF">
<p class="titleinfigure">Figure 16-6 XSQL Page Results in XML Format</p>
<img width="452" height="331" src="img/GUID-D19F5261-7C2B-4E5F-AF5E-EC6595F28F5B-default.gif" alt="Description of Figure 16-6 follows" title="Description of Figure 16-6 follows"/><br/>
<a href="img_text/GUID-D19F5261-7C2B-4E5F-AF5E-EC6595F28F5B-default.htm">Description of &#34;Figure 16-6 XSQL Page Results in XML Format&#34;</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="example" id="GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__CACGCDCH">
<p class="titleinexample">Example 16-13 Industry Standard Formats in flight-list.xsl</p>
<pre dir="ltr">&lt;!-- XSLT Stylesheet to transform ROWSET/ROW results into flight-list format
 --&gt; 
&lt;flight-list xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;
               xsl:version=&#34;1.0&#34;&gt;   
  &lt;xsl:for-each select=&#34;ROWSET/ROW&#34;&gt;
      &lt;flight airline=&#34;{CARRIER}&#34; number=&#34;{FLIGHTNUMBER}&#34;&gt;
        &lt;arrives&gt;&lt;xsl:value-of select=&#34;DUE&#34;/&gt;&lt;/arrives&gt;
      &lt;/flight&gt;
  &lt;/xsl:for-each&gt;
&lt;/flight-list&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-DA8762CC-2348-4A6D-A088-6FBF942C8ADA__CACBHJGD">
<p class="titleinexample">Example 16-14 Style Sheet Association in flight-list.xsl</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
<span class="bold">&lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;flight-list.xsl&#34;?&gt;</span>
&lt;xsql:query connection=&#34;demo&#34; bind-params=&#34;City&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
    SELECT Carrier, FlightNumber, Origin, TO_CHAR(ExpectedTime,&#39;HH24:MI&#39;) AS Due
      FROM FlightSchedule
     WHERE TRUNC(ExpectedTime) = TRUNC(SYSDATE) AND Arrived = &#39;N&#39;
       AND Destination = ?   /* The ? is a bind variable being bound */
      ORDER BY ExpectedTime  /* to the value of the City parameter   */
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19612"></a><a id="ADXDK19613"></a><a id="ADXDK19611"></a>
<div class="props_rev_3"><a id="GUID-6B5269E5-9455-44A0-8D33-C916D19793EB"></a>
<h3 id="ADXDK-GUID-6B5269E5-9455-44A0-8D33-C916D19793EB" class="sect3"><span class="enumeration_section">16.3.4</span> Transforming XML Datagrams into HTML for Display</h3>
<div>
<div class="section">
<p>To return the same XML data in HTML instead of an alternative XML format, use a different XSLT style sheet. For example, rather than producing elements such as <code>&lt;flight-list&gt;</code> and <code>&lt;flight&gt;</code>, you can write a style sheet that produces HTML elements such as <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, and <code>&lt;td&gt;</code>. The result of the dynamically queried data then looks like the HTML page shown in <a href="adx_j_xsqlpub.htm#GUID-6B5269E5-9455-44A0-8D33-C916D19793EB__BABCFBIB">Figure 16-7</a>. Instead of returning raw XML data, the XSQL page leverages server-side XSLT transformation to format the information as HTML for delivery to the browser.</p>
<div class="figure" id="GUID-6B5269E5-9455-44A0-8D33-C916D19793EB__BABCFBIB">
<p class="titleinfigure">Figure 16-7 Using an XSLT Style Sheet to Render HTML</p>
<img width="429" height="301" src="img/GUID-433EC0FA-F430-4DF6-A38E-1A9F385F5416-default.gif" alt="Description of Figure 16-7 follows" title="Description of Figure 16-7 follows"/><br/>
<a href="img_text/GUID-433EC0FA-F430-4DF6-A38E-1A9F385F5416-default.htm">Description of &#34;Figure 16-7 Using an XSLT Style Sheet to Render HTML&#34;</a></div>
<!-- class="figure" -->
<p>Similar to the syntax of the <code>flight-list.xsl</code> style sheet, the <code>flight-display.xsl</code> style sheet shown in <a href="adx_j_xsqlpub.htm#GUID-6B5269E5-9455-44A0-8D33-C916D19793EB__CACFBCBJ">Example 16-15</a> looks like a template HTML page. It contains <code>&lt;xsl:for-each&gt;</code>, <code>&lt;xsl:value-of&gt;</code>, and attribute value templates such as <code>{DUE}</code> to plug in the dynamic values from the underlying <code>&lt;ROWSET&gt;</code> and <code>&lt;ROW&gt;</code> structured XML query results.</p>
<div class="infobox-note" id="GUID-6B5269E5-9455-44A0-8D33-C916D19793EB__GUID-ED078DB0-1833-483A-AAA1-53480207A8A6">
<p class="notep1">Note:</p>
<p>The style sheet produces well-formed HTML. Each opening tag is properly closed (for example, <code>&lt;td&gt;</code>&hellip;<code>&lt;/td&gt;</code>); empty tags use the XML empty element syntax <code>&lt;br/&gt;</code> instead of just <code>&lt;br&gt;</code>.</p>
</div>
<p>You can achieve useful results quickly by combining the power of:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Parameterized SQL statements to select information from Oracle Database</p>
</li>
<li>
<p>Industry-standard XML as a portable, interim data exchange format</p>
</li>
<li>
<p>XSLT to transform XML-based datagrams into any XML- or HTML-based format</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-6B5269E5-9455-44A0-8D33-C916D19793EB__CACFBCBJ">
<p class="titleinexample">Example 16-15 Query Results in flight-display.xsl</p>
<pre dir="ltr">&lt;!-- XSLT Stylesheet to transform ROWSET/ROW results into HTML --&gt;
&lt;html xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34; xsl:version=&#34;1.0&#34;&gt;
  &lt;head&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;flights.css&#34; /&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;center&gt;&lt;table border=&#34;0&#34;&gt;
      &lt;tr&gt;&lt;th&gt;Flight&lt;/th&gt;&lt;th&gt;Arrives&lt;/th&gt;&lt;/tr&gt;
      &lt;xsl:for-each select=&#34;ROWSET/ROW&#34;&gt;
        &lt;tr&gt;
          &lt;td&gt;
            &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;4&#34;&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;img align=&#34;absmiddle&#34; src=&#34;images/{CARRIER}.gif&#34;/&gt;&lt;/td&gt;
                &lt;td width=&#34;180&#34;&gt;
                  &lt;xsl:value-of select=&#34;CARRIER&#34;/&gt;
                  &lt;xsl:text&gt; &lt;/xsl:text&gt;
                  &lt;xsl:value-of select=&#34;FLIGHTNUMBER&#34;/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
            &lt;/table&gt;
          &lt;/td&gt;
          &lt;td align=&#34;center&#34;&gt;&lt;xsl:value-of select=&#34;DUE&#34;/&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/xsl:for-each&gt;
    &lt;/table&gt;&lt;/center&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19615"></a><a id="ADXDK19614"></a>
<div class="props_rev_3"><a id="GUID-3DAA9F54-2E89-4A57-9C3F-F4DEBA6CCCC8"></a>
<h2 id="ADXDK-GUID-3DAA9F54-2E89-4A57-9C3F-F4DEBA6CCCC8" class="sect2"><span class="enumeration_section">16.4</span> Using XSQL in Java Programs</h2>
<div>
<div class="section">
<p>The <code>oracle.xml.xsql.XSQLRequest</code> class enables you to use the XSQL page processor in your Java programs. To use the XSQL Java API, follow these basic steps:</p>
<ol>
<li>
<p>Construct an instance of <code>XSQLRequest</code>, passing the XSQL page to be processed into the constructor as one of these components:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>String</code> containing a URL to the page</p>
</li>
<li>
<p><code>URL</code> object for the page</p>
</li>
<li>
<p>In-memory <code>XMLDocument</code></p>
</li>
</ul>
</li>
<li>
<p>Invoke one of these methods on the object to process the page:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>process()</code> to write the result to a <code>PrintWriter</code> or <code>OutputStream</code></p>
</li>
<li>
<p><code>processToXML()</code> to return the result as an XML Document</p>
</li>
</ul>
</li>
</ol>
<p>To use the built-in XSQL connection manager, which implements JDBC connection pooling based on XSQL configuration file definitions, the XSQL page is all you must pass to the constructor. Optionally, you can pass in a custom implementation for the <code>XSQLConnectionManagerFactory</code> interface as well.</p>
<p>The ability to pass the XSQL page as an in-memory <code>XMLDocument</code> object means that you can dynamically generate any valid XSQL page for processing. You can then pass the page to the XSQL engine for evaluation.</p>
<p>When processing a page, you may want to perform these additional tasks as part of the request:</p>
<ul style="list-style-type: disc;">
<li>
<p>Pass a set of parameters to the request.</p>
<p>You accomplish this aim by passing any object that implements the <code>Dictionary</code> interface to the <code>process()</code> or <code>processToXML()</code> methods. Passing a <code>HashTable</code> containing the parameters is one popular approach.</p>
</li>
<li>
<p>Set an XML document to be processed by the page as if it were the &#34;posted XML&#34; message body.</p>
<p>You can do this by using the <code>XSQLResquest.setPostedDocument()</code> method.</p>
</li>
</ul>
<p><a href="adx_j_xsqlpub.htm#GUID-3DAA9F54-2E89-4A57-9C3F-F4DEBA6CCCC8__BABICHFJ">Example 16-16</a> shows how you can process a page by using <code>XSQLRequest</code>.</p>
<div class="infoboxnotealso" id="GUID-3DAA9F54-2E89-4A57-9C3F-F4DEBA6CCCC8__GUID-E83567D4-7DB2-442F-A6E3-502CC493B861">
<p class="notep1">See Also:</p>
<p><a href="adx_j_xsqladv.htm#GUID-02EA5758-7A8F-4FD7-B9F1-F346E759CD79">Using the XSQL Pages Publishing Framework: Advanced Topics</a> to learn more about the XSQL Java API</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-3DAA9F54-2E89-4A57-9C3F-F4DEBA6CCCC8__BABICHFJ">
<p class="titleinexample">Example 16-16 XSQLRequestSample Class</p>
<pre dir="ltr">import oracle.xml.xsql.XSQLRequest;
import java.util.Hashtable;
import java.io.PrintWriter;
import java.net.URL;
public class XSQLRequestSample {
  public static void main( String[] args) throws Exception {
     // Construct the URL of the XSQL Page
   URL pageUrl = new URL(&#34;file:///C:/foo/bar.xsql&#34;);
   // Construct a new XSQL Page request
   XSQLRequest req = new XSQLRequest(pageUrl);
   // Set up a Hashtable of named parameters to pass to the request
   Hashtable params = new Hashtable(3);
   params.put(&#34;param1&#34;,&#34;value1&#34;);
   params.put(&#34;param2&#34;,&#34;value2&#34;);
   /* If needed, treat an existing, in-memory XMLDocument as if
   ** it were posted to the XSQL Page as part of the request
   req.setPostedDocument(myXMLDocument);
   **
   */
   // Process the page, passing the parameters and writing the output
   // to standard out.
   req.process(params,new PrintWriter(System.out),
                      new PrintWriter(System.err));
  }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK1023"></a><a id="ADXDK19616"></a>
<div class="props_rev_3"><a id="GUID-39AD57EF-9921-4499-B796-986E8F970B29"></a>
<h2 id="ADXDK-GUID-39AD57EF-9921-4499-B796-986E8F970B29" class="sect2"><span class="enumeration_section">16.5</span> XSQL Pages Tips and Techniques</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-89565131-8BC2-4451-B4A6-05F8363DA3F6">XSQL Pages Limitations</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-0C47A9E6-C0B9-4837-A840-BDE2DB01742C">Hints for Using the XSQL Servlet</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-B3D7919E-53B3-4CF9-9531-5A884ADDD323">Resolving Common XSQL Connection Errors</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-338D0A70-3F60-4708-9D8E-54C8D87E93DE">Security Considerations for XSQL Pages</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19617"></a>
<div class="props_rev_3"><a id="GUID-89565131-8BC2-4451-B4A6-05F8363DA3F6"></a>
<h3 id="ADXDK-GUID-89565131-8BC2-4451-B4A6-05F8363DA3F6" class="sect3"><span class="enumeration_section">16.5.1</span> XSQL Pages Limitations</h3>
<div>
<p>HTTP parameters with multibyte names, for example, a parameter whose name is in Kanji, are properly handled when they are inserted into your XSQL page with the <a href="adx_ref_xsql.htm#GUID-3F9C660B-10C2-4258-B5BB-7E5CEC4ACB23">&lt;xsql:include-request-params&gt;</a> element. An attempt to refer to a parameter with a multibyte name inside the query statement of an <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> tag returns an empty string for the parameter value.</p>
<p>As a workaround use a nonmultibyte parameter name. The parameter can still have a multibyte value that can be handled correctly.</p>
</div>
</div>
<a id="ADXDK1024"></a><a id="ADXDK19618"></a>
<div class="props_rev_3"><a id="GUID-0C47A9E6-C0B9-4837-A840-BDE2DB01742C"></a>
<h3 id="ADXDK-GUID-0C47A9E6-C0B9-4837-A840-BDE2DB01742C" class="sect3"><span class="enumeration_section">16.5.2</span> Hints for Using the XSQL Servlet</h3>
<div>
<div class="section">
<p class="subhead3">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-EDD840F8-30DA-402B-B5A1-E518E01D121B">Specifying a DTD While Transforming XSQL Output to a WML Document</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-0FBEA844-5452-43EE-A52F-E863026CECD7">Testing Conditions in XSQL Pages</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-DA6BD380-B724-4850-9278-AC2A2AAE389C">Passing a Query Result to the WHERE Clause of Another Query</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-6D972E7C-6C29-4A08-8185-D5BA7397CF48">Handling Multivalued HTML Form Parameters</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-95902839-0A64-4863-AF9F-59F31D67CF28">Invoking PL/SQL Wrapper Procedures to Generate XML Datagrams</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-A51F8AD9-CF09-4903-9479-BDE41EC917B0">Accessing Contents of Posted XML</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-EF677A81-8330-4659-BAF1-3ABE06E745E2">Changing Database Connections Dynamically</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-FCA948AE-AC87-4B0E-940C-2E89CECF407C">Retrieving the Name of the Current XSQL Page</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19619"></a>
<div class="props_rev_3"><a id="GUID-EDD840F8-30DA-402B-B5A1-E518E01D121B"></a>
<h4 id="ADXDK-GUID-EDD840F8-30DA-402B-B5A1-E518E01D121B" class="sect4"><span class="enumeration_section">16.5.2.1</span> Specifying a DTD While Transforming XSQL Output to a WML Document</h4>
<div>
<div class="section">
<p>You can specify a DTD while transforming XSQL output to a Wireless Markup Language (WML) document for a wireless application. The technique is to use a built-in facility of the XSLT style sheet called <code>&lt;xsl:output&gt;</code>. The following example shows this technique:</p>
<pre dir="ltr">&lt;xsl:stylesheet xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;&gt;
  &lt;xsl:output type=&#34;xml&#34; doctype-system=&#34;your.dtd&#34;/&gt;
  &lt;xsl:template match=&#34;/&#34;&gt;
  &lt;/xsl:template&gt;
    ...
&lt;/xsl:stylesheet&gt;
</pre>
<p>The preceding style sheet produces an XML result that includes this code, where <code>&#34;your.dtd&#34;</code> can be any valid absolute or relative URL:</p>
<p><code>&lt;!DOCTYPE xxxx SYSTEM &#34;your.dtd&#34;&gt;</code></p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19621"></a><a id="ADXDK19620"></a>
<div class="props_rev_3"><a id="GUID-0FBEA844-5452-43EE-A52F-E863026CECD7"></a>
<h4 id="ADXDK-GUID-0FBEA844-5452-43EE-A52F-E863026CECD7" class="sect4"><span class="enumeration_section">16.5.2.2</span> Testing Conditions in XSQL Pages</h4>
<div>
<div class="section">
<p>You can include if-then logic in your XSQL pages. <a href="adx_j_xsqlpub.htm#GUID-0FBEA844-5452-43EE-A52F-E863026CECD7__CACBBJEG">Example 16-17</a> shows a technique for executing a query based on a test of a parameter value.</p>
<div class="infoboxnotealso" id="GUID-0FBEA844-5452-43EE-A52F-E863026CECD7__GUID-042BDA18-FCA0-4CB2-9333-2B2CCC6A6EAA">
<p class="notep1">See Also:</p>
<p><a href="adx_ref_xsql.htm#GUID-6CECB521-F70B-434A-AA73-EB2049F5E463">XSQL Pages Reference</a> to learn about the <a href="adx_ref_xsql.htm#GUID-7B3A4D36-BB66-4FB0-85F9-33BC84CE6613">&lt;xsql:if-param&gt;</a> action</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-0FBEA844-5452-43EE-A52F-E863026CECD7__CACBBJEG">
<p class="titleinexample">Example 16-17 Conditional Statements in XSQL Pages</p>
<pre dir="ltr">&lt;xsql:if-param name=&#34;security&#34; equals=&#34;admin&#34;&gt;
  &lt;xsql:query&gt;
      SELECT ....
  &lt;/xsql:query&gt;
&lt;/xsq:when&gt;
&lt;xsql:if-param name=&#34;security&#34; equals=&#34;user&#34;&gt;
  &lt;xsql:query&gt;
      SELECT ....
  &lt;/xsql:query&gt;
&lt;/xsql:if-param&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19623"></a><a id="ADXDK19622"></a>
<div class="props_rev_3"><a id="GUID-DA6BD380-B724-4850-9278-AC2A2AAE389C"></a>
<h4 id="ADXDK-GUID-DA6BD380-B724-4850-9278-AC2A2AAE389C" class="sect4"><span class="enumeration_section">16.5.2.3</span> Passing a Query Result to the WHERE Clause of Another Query</h4>
<div>
<div class="section">
<p>If you have two queries in an XSQL page, then you can use the value of a select list item of the first query in the second query by using page parameters. <a href="adx_j_xsqlpub.htm#GUID-DA6BD380-B724-4850-9278-AC2A2AAE389C__CACCHFJC">Example 16-18</a> shows this technique.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-DA6BD380-B724-4850-9278-AC2A2AAE389C__CACCHFJC">
<p class="titleinexample">Example 16-18 Passing Values Among SQL Queries</p>
<pre dir="ltr">&lt;page xmlns:xsql=&#34;urn:oracle-xsql&#34; connection=&#34;demo&#34;&gt;
  &lt;!-- Value of page param &#34;xxx&#34; will be first column of first row --&gt;
  &lt;xsql:set-page-param name=&#34;xxx&#34;&gt;
    SELECT one FROM table1 WHERE ...
  &lt;/xsl:set-param-param&gt;
  &lt;xsql:query bind-params=&#34;xxx&#34;&gt;
    SELECT col3,col4 FROM table2
    WHERE col3 = ?
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19625"></a><a id="ADXDK19626"></a><a id="ADXDK19624"></a>
<div class="props_rev_3"><a id="GUID-6D972E7C-6C29-4A08-8185-D5BA7397CF48"></a>
<h4 id="ADXDK-GUID-6D972E7C-6C29-4A08-8185-D5BA7397CF48" class="sect4"><span class="enumeration_section">16.5.2.4</span> Handling Multivalued HTML Form Parameters</h4>
<div>
<div class="section">
<p>In some situations, you might have to process multivalued HTML <code>&lt;form&gt;</code> parameters that are needed for <code>&lt;input name=&#34;choices&#34; type=&#34;checkbox&#34;&gt;</code>. Use the parameter array notation on your parameter name (for example, <code>choices[]</code>) to refer to the array of values from the selected check boxes.</p>
<p>Assume that you have a multivalued parameter named <code>guy</code>. You can use the array parameter notation in an XSQL page as shown in <a href="adx_j_xsqlpub.htm#GUID-6D972E7C-6C29-4A08-8185-D5BA7397CF48__CACEDCAC">Example 16-19</a>.</p>
<p>Assume that you request this page is requested with this URL, which contains multiple parameters of the same name to produce a multivalued attribute:</p>
<pre dir="ltr">http://yourserver.com/page.xsql?guy=Curly&amp;guy=Larry&amp;guy=Moe
</pre>
<p>The page returned looks like this:</p>
<pre dir="ltr">&lt;page&gt;
  &lt;guy-list&gt;Curly,Larry,Moe&lt;/guy-list&gt;
  &lt;quoted-guys&gt;&#39;Curly&#39;,&#39;Larry&#39;,&#39;Moe&#39;&lt;/quoted-guys&gt;
  &lt;guy&gt;
    &lt;value&gt;Curly&lt;/value&gt;
    &lt;value&gt;Larry&lt;/value&gt;
    &lt;value&gt;Moe&lt;/value&gt;
  &lt;/guy&gt;
&lt;/page&gt;
</pre>
<p>You can also use the value of a multivalued page parameter in a SQL statement <code>WHERE</code> clause by using the code shown in <a href="adx_j_xsqlpub.htm#GUID-6D972E7C-6C29-4A08-8185-D5BA7397CF48__BABDGEHI">Example 16-20</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-6D972E7C-6C29-4A08-8185-D5BA7397CF48__CACEDCAC">
<p class="titleinexample">Example 16-19 Handling Multivalued Parameters</p>
<pre dir="ltr">&lt;page xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:set-page-param name=&#34;guy-list&#34; value=&#34;{@guy[]}&#34;
                       treat-list-as-array=&#34;yes&#34;/&gt;
  &lt;xsql:set-page-param name=&#34;quoted-guys&#34; value=&#34;{@guy[]}&#34;
                       treat-list-as-array=&#34;yes&#34; quote-array-values=&#34;yes&#34;/&gt;
  &lt;xsql:include-param name=&#34;guy-list&#34;/&gt;
  &lt;xsql:include-param name=&#34;quoted-guys&#34;/&gt;
  &lt;xsql:include-param name=&#34;guy[]&#34;/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6D972E7C-6C29-4A08-8185-D5BA7397CF48__BABDGEHI">
<p class="titleinexample">Example 16-20 Using Multivalued Page Parameters in a SQL Statement</p>
<pre dir="ltr">&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:set-page-param name=&#34;quoted-guys&#34; value=&#34;{@guy[]}&#34;
                       treat-list-as-array=&#34;yes&#34; 
                       quote-array-values=&#34;yes&#34;/&gt;
  &lt;xsql:query&gt;
    SELECT *
    FROM   sometable
    WHERE  name IN ({@quoted-guys})
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19628"></a><a id="ADXDK19629"></a><a id="ADXDK19630"></a><a id="ADXDK19627"></a>
<div class="props_rev_3"><a id="GUID-95902839-0A64-4863-AF9F-59F31D67CF28"></a>
<h4 id="ADXDK-GUID-95902839-0A64-4863-AF9F-59F31D67CF28" class="sect4"><span class="enumeration_section">16.5.2.5</span> Invoking PL/SQL Wrapper Procedures to Generate XML Datagrams</h4>
<div>
<div class="section">
<p>You cannot set parameter values by binding them in the position of <code>OUT</code> variables with <a href="adx_ref_xsql.htm#GUID-B44BC32C-50EF-480F-834E-062BD5AE4866">&lt;xsql:dml&gt;</a>. Only <code>IN</code> parameters are supported for binding. You can create a wrapper procedure, however, that constructs XML elements with the HTTP package. Your XSQL page can then invoke the wrapper procedure with <a href="adx_ref_xsql.htm#GUID-7F7A66D1-BFBB-402A-A2DD-C2A98349CAA7">&lt;xsql:include-owa&gt;</a>.</p>
<p><a href="adx_j_xsqlpub.htm#GUID-95902839-0A64-4863-AF9F-59F31D67CF28__CACHACFH">Example 16-21</a> shows a PL/SQL procedure that accepts two <code>IN</code> parameters, multiplies them and puts the value in one <code>OUT</code> parameter, then adds them and puts the result in a second <code>OUT</code> parameter.</p>
<p>You can write the PL/SQL procedure in <a href="adx_j_xsqlpub.htm#GUID-95902839-0A64-4863-AF9F-59F31D67CF28__CACJBBGC">Example 16-22</a> to wrap the procedure in <a href="adx_j_xsqlpub.htm#GUID-95902839-0A64-4863-AF9F-59F31D67CF28__CACHACFH">Example 16-21</a>. The <code>addmultwrapper</code> procedure accepts the <code>IN</code> arguments that the <code>addmult</code> procedure preceding expects, and then encodes the <code>OUT</code> values as an XML datagram that you print to the Open Web Analytics (OWA) page buffer.</p>
<p>The XSQL page shown in <a href="adx_j_xsqlpub.htm#GUID-95902839-0A64-4863-AF9F-59F31D67CF28__CACDIGJI">Example 16-23</a> constructs an XML document by including a call to the PL/SQL wrapper procedure.</p>
<p>You can invoke <code>addmult.xsql</code> by entering a URL in a browser:</p>
<pre dir="ltr">http://yourserver.com/addmult.xsql?arg1=30&amp;arg2=45
</pre>
<p>The XML datagram returned by the servlet reflects the <code>OUT</code> values:</p>
<pre dir="ltr">&lt;page&gt;
  &lt;addmult&gt;&lt;sum&gt;75&lt;/sum&gt;&lt;product&gt;1350&lt;/product&gt;&lt;/addmult&gt;
&lt;/page&gt;
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-95902839-0A64-4863-AF9F-59F31D67CF28__CACHACFH">
<p class="titleinexample">Example 16-21 addmult PL/SQL Procedure</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE addmult(arg1        NUMBER, arg2        NUMBER,
                                    sumval  OUT NUMBER, prodval OUT NUMBER) 
IS
BEGIN
  sumval := arg1 + arg2;
  prodval := arg1 * arg2;
END;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-95902839-0A64-4863-AF9F-59F31D67CF28__CACJBBGC">
<p class="titleinexample">Example 16-22 addmultwrapper PL/SQL Procedure</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE addmultwrapper(arg1 NUMBER, arg2 NUMBER) 
IS
  sumval  NUMBER;
  prodval NUMBER;
  xml     VARCHAR2(2000);
BEGIN
  -- Call the procedure with OUT values
  addmult(arg1,arg2,sumval,prodval);
  -- Then produce XML that encodes the OUT values
  xml := &#39;&lt;addmult&gt;&#39;||
         &#39;&lt;sum&gt;&#39;||sumval||&#39;&lt;/sum&gt;&#39;||
         &#39;&lt;product&gt;&#39;||prodval||&#39;&lt;/product&gt;&#39;||
         &#39;&lt;/addmult&gt;&#39;;
  -- Print the XML result to the OWA page buffer for return
  HTP.P(xml);
END;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-95902839-0A64-4863-AF9F-59F31D67CF28__CACDIGJI">
<p class="titleinexample">Example 16-23 addmult.xsql</p>
<pre dir="ltr">&lt;page connection=&#34;demo&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  &lt;xsql:include-owa bind-params=&#34;arg1 arg2&#34;&gt;
    BEGIN addmultwrapper(?,?); END;
  &lt;/xsql:include-owa&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19631"></a>
<div class="props_rev_3"><a id="GUID-A51F8AD9-CF09-4903-9479-BDE41EC917B0"></a>
<h4 id="ADXDK-GUID-A51F8AD9-CF09-4903-9479-BDE41EC917B0" class="sect4"><span class="enumeration_section">16.5.2.6</span> Accessing Contents of Posted XML</h4>
<div>
<div class="section">
<p>The XSQL page processor can access the contents of posted XML. Any XML document can be posted and handled by the feature that XSQL supports.</p>
<p>For example, an XSQL page can access the contents of an inbound SOAP message by using the <code>xpath=</code>&#34;<span class="italic"><code>XpathExpression</code></span>&#34; attribute in the <a href="adx_ref_xsql.htm#GUID-002F1541-47DD-4C9B-A0D3-8F45A5D3A51F">&lt;xsql:set-page-param&gt;</a> action. Alternatively, custom action handlers can gain direct access to the SOAP message body by invoking <code>getPageRequest().getPostedDocument()</code>. To create the SOAP response body to return to the client, use an XSLT style sheet or a custom serializer implementation to write the XML response in an appropriate SOAP-encoded format.</p>
<div class="infoboxnotealso" id="GUID-A51F8AD9-CF09-4903-9479-BDE41EC917B0__GUID-BD0ACBA9-AD29-462C-A4A1-7D15EA06B83B">
<p class="notep1">See Also:</p>
<p>The Airport SOAP demo for an example of using an XSQL page to implement a SOAP-based web service</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19632"></a>
<div class="props_rev_3"><a id="GUID-EF677A81-8330-4659-BAF1-3ABE06E745E2"></a>
<h4 id="ADXDK-GUID-EF677A81-8330-4659-BAF1-3ABE06E745E2" class="sect4"><span class="enumeration_section">16.5.2.7</span> Changing Database Connections Dynamically</h4>
<div>
<div class="section">
<p>You can choose database connections dynamically when invoking an XSQL page. For example, you might want to switch between a test database and a production database.You can achieve this goal by including an XSQL parameter in the <code>connection</code> attribute of the XSQL page. Define an attribute of the same name to serve as the default value for the connection name.</p>
<p>Assume that in your XSQL configuration file you define connections for database <code>testdb</code> and <code>proddb</code>. You then write an XSQL page with this <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> element:</p>
<pre dir="ltr">&lt;xsql:query conn=&#34;testdb&#34; connection=&#34;{@conn}&#34; xmlns:xsql=&#34;urn:oracle-xsql&#34;&gt;
  ...
&lt;/xsql:query&gt; 
</pre>
<p>If you request this page without any parameters, then the value of the <code>conn</code> parameter is <code>testdb</code>, so the page uses the connection named <code>testdb</code> defined in the XSQL configuration file. If you request the page with <code>conn=proddb</code>, then the page uses the connection named <code>proddb</code> instead.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19634"></a><a id="ADXDK19633"></a>
<div class="props_rev_3"><a id="GUID-FCA948AE-AC87-4B0E-940C-2E89CECF407C"></a>
<h4 id="ADXDK-GUID-FCA948AE-AC87-4B0E-940C-2E89CECF407C" class="sect4"><span class="enumeration_section">16.5.2.8</span> Retrieving the Name of the Current XSQL Page</h4>
<div>
<div class="section">
<p>An XSQL page can access its own name in a generic way at run time to construct links to the current page. You can use a helper method like the one shown in <a href="adx_j_xsqlpub.htm#GUID-FCA948AE-AC87-4B0E-940C-2E89CECF407C__CACGCDHC">Example 16-24</a> to retrieve the name of the page inside a custom action handler.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-FCA948AE-AC87-4B0E-940C-2E89CECF407C__CACGCDHC">
<p class="titleinexample">Example 16-24 Getting the Name of the Current XSQL Page</p>
<pre dir="ltr">private String curPageName(XSQLPageRequest req) {
  String thisPage = req.getSourceDocumentURI();;
  int pos = thisPage.lastIndexOf(&#39;/&#39;);
  if (pos &gt;=0) thisPage = thisPage.substring(pos+1);
  pos = thisPage.indexOf(&#39;?&#39;);
  if (pos &gt;=0) thisPage = thisPage.substring(0,pos-1);
  return thisPage;
}
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK1025"></a><a id="ADXDK19635"></a>
<div class="props_rev_3"><a id="GUID-B3D7919E-53B3-4CF9-9531-5A884ADDD323"></a>
<h3 id="ADXDK-GUID-B3D7919E-53B3-4CF9-9531-5A884ADDD323" class="sect3"><span class="enumeration_section">16.5.3</span> Resolving Common XSQL Connection Errors</h3>
<div>
<div class="section">
<p class="subhead3">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-3D8EE2AE-61D5-4666-B0D2-D19E69F89628">Receiving &#34;Unable to Connect&#34; Errors</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-30B536C8-D425-48B6-A3E5-AFD681893FF0">Receiving &#34;No Posted Document to Process&#34; When Using HTTP POST</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19636"></a>
<div class="props_rev_3"><a id="GUID-3D8EE2AE-61D5-4666-B0D2-D19E69F89628"></a>
<h4 id="ADXDK-GUID-3D8EE2AE-61D5-4666-B0D2-D19E69F89628" class="sect4"><span class="enumeration_section">16.5.3.1</span> Receiving &#34;Unable to Connect&#34; Errors</h4>
<div>
<p>Suppose you are unable to connect to a database and you see errors similar to these when running the <code>helloworld.xsql</code> sample program:</p>
<pre dir="ltr">Oracle XSQL Servlet Page Processor
XSQL-007: Cannot acquire a database connection to process page.
Connection refused(DESCRIPTION=(TMP=)(VSNNUM=135286784)(ERR=12505)
(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
</pre>
<p>The preceding errors indicate that the XSQL servlet is attempting the JDBC connection based on the <code>&lt;connectiondef&gt;</code> information for the connection named <code>demo</code>, assuming you did not modify the <code>helloworld.xsql</code> demo page.</p>
<p>By default the <code>XSQLConfig.xml</code> file comes with the entry for the <code>demo</code> connection that looks like this (use the correct password):</p>
<pre dir="ltr">&lt;connection name=&#34;demo&#34;&gt;
  &lt;username&gt;scott&lt;/username&gt;
  &lt;password&gt;<span class="italic">password</span>&lt;/password&gt;
  &lt;dburl&gt;jdbc:oracle:thin:@localhost:1521:ORCL&lt;/dburl&gt;
  &lt;driver&gt;oracle.jdbc.driver.OracleDriver&lt;/driver&gt;
&lt;/connection&gt;
</pre>
<p>The error is probably due to one of these reasons:</p>
<ul style="list-style-type: disc;">
<li>
<p>Your database is not on the <code>localhost</code> machine.</p>
</li>
<li>
<p>Your database <code>SID</code> is not <code>ORCL.</code></p>
</li>
<li>
<p>Your TNS Listener Port is not <code>1521</code>.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19637"></a>
<div class="props_rev_3"><a id="GUID-30B536C8-D425-48B6-A3E5-AFD681893FF0"></a>
<h4 id="ADXDK-GUID-30B536C8-D425-48B6-A3E5-AFD681893FF0" class="sect4"><span class="enumeration_section">16.5.3.2</span> Receiving &#34;No Posted Document to Process&#34; When Using HTTP POST</h4>
<div>
<div class="section">
<p>When trying to post XML information to an XSQL page for processing, it must be sent by the HTTP <code>POST</code> method. This transfer can be effected by an HTML form or an XML document sent by HTTP <code>POST</code>. If you try to use HTTP <code>GET</code> instead, then there is no posted document, and hence you get the &#34;No posted document to process&#34; error. Use HTTP <code>POST</code> instead to cause the correct behavior.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK19638"></a>
<div class="props_rev_3"><a id="GUID-338D0A70-3F60-4708-9D8E-54C8D87E93DE"></a>
<h3 id="ADXDK-GUID-338D0A70-3F60-4708-9D8E-54C8D87E93DE" class="sect3"><span class="enumeration_section">16.5.4</span> Security Considerations for XSQL Pages</h3>
<div>
<p>This section describes best practices for managing security in the XSQL servlet:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-571FDEF8-59DE-4428-BBCB-6778E82D33EB">Installing Your XSQL Configuration File in a Safe Directory</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-BA3FEFC8-77AD-4A24-A635-6C715268C313">Disabling Default Client Style Sheet Overrides</a></p>
</li>
<li>
<p><a href="adx_j_xsqlpub.htm#GUID-556A8496-0C26-47F1-8F56-8A528A98F49D">Protecting Against the Misuse of Substitution Parameters</a></p>
</li>
</ul>
</div>
<a id="ADXDK19639"></a>
<div class="props_rev_3"><a id="GUID-571FDEF8-59DE-4428-BBCB-6778E82D33EB"></a>
<h4 id="ADXDK-GUID-571FDEF8-59DE-4428-BBCB-6778E82D33EB" class="sect4"><span class="enumeration_section">16.5.4.1</span> Installing Your XSQL Configuration File in a Safe Directory</h4>
<div>
<div class="section">
<p>The <code>XSQLConfig.xml</code> configuration file contains sensitive database user name and password information. This file must not reside in any directory that maps to a virtual path of your web server, nor in any of its subdirectories. The only required permissions for the configuration file are read permission granted to the UNIX account that owns the servlet engine. Failure to follow this recommendation could mean that a user of your site could browse the contents of your configuration file, thereby getting the passwords to database accounts.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19640"></a>
<div class="props_rev_3"><a id="GUID-BA3FEFC8-77AD-4A24-A635-6C715268C313"></a>
<h4 id="ADXDK-GUID-BA3FEFC8-77AD-4A24-A635-6C715268C313" class="sect4"><span class="enumeration_section">16.5.4.2</span> Disabling Default Client Style Sheet Overrides</h4>
<div>
<div class="section">
<p>By default, the XSQL page processor enables the user to supply a style sheet in the page request by passing a value for the special <code>xml-stylesheet</code> parameter. If you want the style sheet referenced by the server-side XSQL page to be the only legal style sheet, then include the <code>allow-client-style=&#34;no&#34;</code> attribute on the document element of your page. You can also globally change the default setting in the <code>XSQLConfig.xml</code> file to disallow client style sheet overrides. If you take either approach, then the only pages that allow client style sheet overrides are those that include the <code>allow-client-style=&#34;yes&#34;</code> attribute on their document element.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19641"></a>
<div class="props_rev_3"><a id="GUID-556A8496-0C26-47F1-8F56-8A528A98F49D"></a>
<h4 id="ADXDK-GUID-556A8496-0C26-47F1-8F56-8A528A98F49D" class="sect4"><span class="enumeration_section">16.5.4.3</span> Protecting Against the Misuse of Substitution Parameters</h4>
<div>
<div class="section">
<p>Any product that supports the use of lexical substitution variables in a SQL query can cause a developer problems. Any time you deploy an XSQL page that allows part of all of a SQL statement to be substituted by a lexical parameter, you must ensure that you have taken appropriate precautions against misuse.</p>
<p>For example, one of the demonstrations that comes with XSQL Pages is the Adhoc Query Demo. It shows how you can supply the entire SQL statement of an <a href="adx_ref_xsql.htm#GUID-A54C8FC8-D81E-466F-8DE9-E425387A6563">&lt;xsql:query&gt;</a> action handler as a parameter. This technique is a powerful and beneficial tool when in the right hands, but if you deploy a similar page to your production system, then the user can execute any query that the database security privileges for the connection associated with the page allows. For example, the Adhoc Query Demo is set up to use a connection that maps to the <code>scott</code> account, so a user can query any data that <code>scott</code> would be allowed to query from SQL*Plus.</p>
<p>You can use these techniques to ensure that your pages are not abused:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Ensure the database user account associated with the page has only the privileges for reading the tables and views you want your users to see.</p>
</li>
<li>
<p>Use true bind variables instead of lexical bind variables when substituting single values in a <code>SELECT</code> statement. If you must parameterize syntactic parts of your SQL statement, then lexical parameters are the only way to proceed. Otherwise, use true bind variables so that any attempt to pass an invalid value generates an error instead of producing an unexpected result.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_ref_dlf.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_xsqladv.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>