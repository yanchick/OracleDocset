<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1661"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XML%20Schema%20Processor%20for%20Java"></a><title>Using the XML Schema Processor for Java</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="XML Schema, explained, processor for Java, how to run the sample program"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_j_xqjxdb.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_j_jaxb.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-F41C7DA2-A3DF-463B-A08C-24E8F0621450"></a> <span id="PAGE" style="display:none;">17/50</span> <!-- End Header -->
<a id="ADXDK993"></a><a id="ADXDK5000"></a>
<h1 id="ADXDK-GUID-F41C7DA2-A3DF-463B-A08C-24E8F0621450" class="sect1"><span class="enumeration_chapter">9</span> Using the XML Schema Processor for Java</h1>
<div>
<p>This chapter explains how to use the Extensible Markup Language (XML) schema processor for Java.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_sproc.htm#GUID-AEB7C697-2E71-4AC1-8DFB-EB6531552A50">Introduction to XML Validation</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-D9E0C12D-122D-4183-A4AB-8BE7F476ABF8">Using the XML Schema Processor: Overview</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-61216843-3968-49AB-8323-5774A7ABA2D7">Validating XML with XML Schemas</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-654F9D12-EC32-464B-9465-06ECB9213829">Tips and Techniques for Programming with XML Schemas</a></p>
</li>
</ul>
</div>
<a id="ADXDK994"></a><a id="ADXDK19254"></a>
<div class="props_rev_3"><a id="GUID-AEB7C697-2E71-4AC1-8DFB-EB6531552A50"></a>
<h2 id="ADXDK-GUID-AEB7C697-2E71-4AC1-8DFB-EB6531552A50" class="sect2"><span class="enumeration_section">9.1</span> Introduction to XML Validation</h2>
<div>
<p>This section explains the different techniques for XML validation.</p>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_sproc.htm#GUID-D28C9F71-7B8B-4508-808B-C6A96F1DDE4A">Prerequisites</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-2CE6171F-CBF0-439A-AC05-84C27B4F0D72">Standards and Specifications</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-C8292C78-3BDC-4D6E-A97A-B820220A10FA">XML Validation with DTDs</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-674379DA-81FD-43CD-9C8B-998B70A11103">XML Validation with XML Schemas</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-1794D1E8-94A0-41EB-B8A5-E7927FAC4BE9">Differences Between XML Schemas and DTDs</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19255"></a>
<div class="props_rev_3"><a id="GUID-D28C9F71-7B8B-4508-808B-C6A96F1DDE4A"></a>
<h3 id="ADXDK-GUID-D28C9F71-7B8B-4508-808B-C6A96F1DDE4A" class="sect3"><span class="enumeration_section">9.1.1</span> Prerequisites</h3>
<div>
<p>This chapter assumes that you have working knowledge of these technologies:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="glossary.htm#GUID-F2AC11F4-F0D2-4EFB-B28B-8114CC0D7C38"><span class="xrefglossterm">document type definition (DTD)</span></a>. An XML document type definition (DTD) defines the legal structure of an XML document.</p>
</li>
<li>
<p><a href="glossary.htm#GUID-B1E6F2C9-39D7-42D5-817B-6210231ABF97"><span class="xrefglossterm">XML Schema language</span></a>. XML Schema defines the legal structure of an XML document.</p>
</li>
</ul>
<p>To learn more about these technologies, consult the XML resources in <span class="q">&#34;<a href="preface.htm#GUID-2CD1F6B6-C8EC-42E3-97F2-589AABF9AFFB">Related Documents</a>.&#34;</span></p>
<div class="infoboxnotealso" id="GUID-D28C9F71-7B8B-4508-808B-C6A96F1DDE4A__GUID-F6E7B158-90B3-467B-B7C9-339E68C0D78C">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3schools.com/dtd/" target="_blank"><code>http://www.w3schools.com/dtd/</code></a> for a DTD tutorial</p>
</li>
<li>
<p><a href="http://www.w3schools.com/schema" target="_blank"><code>http://www.w3schools.com/schema</code></a> for an XML Schema language tutorial</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK19256"></a>
<div class="props_rev_3"><a id="GUID-2CE6171F-CBF0-439A-AC05-84C27B4F0D72"></a>
<h3 id="ADXDK-GUID-2CE6171F-CBF0-439A-AC05-84C27B4F0D72" class="sect3"><span class="enumeration_section">9.1.2</span> Standards and Specifications</h3>
<div>
<p>XML Schema is a World Wide Web Consortium (W3C) standard. You can find the XML Schema specifications at these locations:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/TR/xmlschema-0/" target="_blank"><code>http://www.w3.org/TR/xmlschema-0/</code></a> for the W3C XML Schema Primer</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xmlschema-1/" target="_blank"><code>http://www.w3.org/TR/xmlschema-1/</code></a> for the definition of the XML Schema language structures</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xmlschema-2/" target="_blank"><code>http://www.w3.org/TR/xmlschema-2/</code></a> for the definition of the XML Schema language data types</p>
</li>
</ul>
<p>The Oracle XML Schema processor supports the W3C XML Schema specifications.</p>
<div class="infoboxnotealso" id="GUID-2CE6171F-CBF0-439A-AC05-84C27B4F0D72__GUID-80DA550E-F859-46D7-9094-5112FE6C9BDF">
<p class="notep1">See Also:</p>
<p><a href="adx_ref_standards.htm#GUID-795A483B-12AC-4F6D-A606-6BE9DA963F0F">Oracle XML Developer&#39;s Kit Standards</a> for a summary of the standards supported by Oracle XML Developer&#39;s Kit (XDK)</p>
</div>
</div>
</div>
<a id="ADXDK19257"></a>
<div class="props_rev_3"><a id="GUID-C8292C78-3BDC-4D6E-A97A-B820220A10FA"></a>
<h3 id="ADXDK-GUID-C8292C78-3BDC-4D6E-A97A-B820220A10FA" class="sect3"><span class="enumeration_section">9.1.3</span> XML Validation with DTDs</h3>
<div>
<p>Document type definition (DTDs) were originally developed for SGML. XML DTDs are a subset of those available in SGML and provide a mechanism for declaring constraints on XML markup. XML DTDs enable the specification of:</p>
<ul style="list-style-type: disc;">
<li>
<p>Which elements can be in your XML documents</p>
</li>
<li>
<p>The content model of an XML element, that is, whether the element contains only data or has a set of subelements that defines its structure. DTDs can define whether a subelement is optional or mandatory and whether it can occur only once or multiple times.</p>
</li>
<li>
<p>Attributes of XML elements. DTDs can also specify whether attributes are optional or mandatory.</p>
</li>
<li>
<p>Entities that are legal in your XML documents.</p>
</li>
</ul>
<p>An XML DTD is not itself written in XML, but is a context-independent grammar for defining the structure of an XML document. You can declare a DTD in an XML document itself or in a separate file from the XML document.</p>
<p>Validation is the process by which you verify an XML document against its associated DTD, ensuring that the structure, use of elements, and use of attributes are consistent with the definitions in the DTD. Thus, applications that handle XML documents can assume that the data matches the definition.</p>
<p>Using XDK, you can write an application that includes a validating XML parser; that is, a program that parses and validates XML documents against a DTD. Depending on its implementation, a validating parser may:</p>
<ul style="list-style-type: disc;">
<li>
<p>Either stop processing when it encounters an error, or continue.</p>
</li>
<li>
<p>Either report warnings and errors as they occur or in summary form at the end of processing.</p>
</li>
<li>
<p>Enable or disable validation mode</p>
<p>Most processors can enable or disable validation mode, but they must still process entity definitions and other constructs of DTDs.</p>
</li>
</ul>
</div>
<a id="ADXDK19259"></a><a id="ADXDK19260"></a><a id="ADXDK19258"></a>
<div class="props_rev_3"><a id="GUID-BD98BC10-64C1-435A-903D-9D80D69D1C1D"></a>
<h4 id="ADXDK-GUID-BD98BC10-64C1-435A-903D-9D80D69D1C1D" class="sect4"><span class="enumeration_section">9.1.3.1</span> DTD Samples in XDK</h4>
<div>
<p><a href="adx_j_sproc.htm#GUID-BD98BC10-64C1-435A-903D-9D80D69D1C1D__CIHDHBEE">Example 9-1</a> shows the contents of a DTD named <code>family.dtd</code>, which is located in <code>$ORACLE_HOME/xdk/demo/java/parser/common/</code>. The <code>&lt;ELEMENT&gt;</code> tags specify the legal nomenclature and structure of elements in the document, whereas the <code>&lt;ATTLIST&gt;</code> tags specify the legal attributes of elements.</p>
<p><a href="adx_j_sproc.htm#GUID-BD98BC10-64C1-435A-903D-9D80D69D1C1D__CIHCDDBD">Example 9-2</a> shows the contents of an XML document named <code>family.xml</code>, which is also located in <code>$ORACLE_HOME/xdk/demo/java/parser/common/</code>. The <code>&lt;!DOCTYPE&gt;</code> element in <code>family.xml</code> specifies that this XML document conforms to the external DTD named <code>family.dtd</code>.</p>
<div class="example" id="GUID-BD98BC10-64C1-435A-903D-9D80D69D1C1D__CIHDHBEE">
<p class="titleinexample">Example 9-1 family.dtd</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;!ELEMENT family (member*)&gt;
&lt;!ATTLIST family lastname CDATA #REQUIRED&gt;
&lt;!ELEMENT member (#PCDATA)&gt;
&lt;!ATTLIST member memberid ID #REQUIRED&gt;
&lt;!ATTLIST member dad IDREF #IMPLIED&gt;
&lt;!ATTLIST member mom IDREF #IMPLIED&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-BD98BC10-64C1-435A-903D-9D80D69D1C1D__CIHCDDBD">
<p class="titleinexample">Example 9-2 family.xml</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; standalone=&#34;no&#34;?&gt;
&lt;!DOCTYPE family SYSTEM &#34;family.dtd&#34;&gt;
&lt;family lastname=&#34;Smith&#34;&gt;
&lt;member memberid=&#34;m1&#34;&gt;Sarah&lt;/member&gt;
&lt;member memberid=&#34;m2&#34;&gt;Bob&lt;/member&gt;
&lt;member memberid=&#34;m3&#34; mom=&#34;m1&#34; dad=&#34;m2&#34;&gt;Joanne&lt;/member&gt;
&lt;member memberid=&#34;m4&#34; mom=&#34;m1&#34; dad=&#34;m2&#34;&gt;Jim&lt;/member&gt;
&lt;/family&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19261"></a>
<div class="props_rev_3"><a id="GUID-674379DA-81FD-43CD-9C8B-998B70A11103"></a>
<h3 id="ADXDK-GUID-674379DA-81FD-43CD-9C8B-998B70A11103" class="sect3"><span class="enumeration_section">9.1.4</span> XML Validation with XML Schemas</h3>
<div>
<p>The <a href="glossary.htm#GUID-B1E6F2C9-39D7-42D5-817B-6210231ABF97"><span class="xrefglossterm">XML Schema language</span></a>, also known as <a href="glossary.htm#GUID-8FD3F1F2-EA9C-4AED-955B-FE1570ABECDE"><span class="xrefglossterm">XML Schema Definition</span></a>, was created by the W3C to use XML syntax to describe the content and the structure of XML documents. An <a href="glossary.htm#GUID-085CAB85-F0BC-4D3B-A282-21E17B0BC9B3"><span class="xrefglossterm">XML schema</span></a> is an XML document written in the XML Schema language. An XML schema document contains rules describing the structure of an input XML document, called an <a href="glossary.htm#GUID-C0B7CAC1-AB51-490D-AA39-ED961BB623CD"><span class="xrefglossterm">instance document</span></a>. An instance document is valid if and only if it conforms to the rules of the XML schema.</p>
<p>The XML Schema language defines such things as:</p>
<ul style="list-style-type: disc;">
<li>
<p>Which elements and attributes are legal in the instance document</p>
</li>
<li>
<p>Which elements can be children of other elements</p>
</li>
<li>
<p>The order and number of child elements</p>
</li>
<li>
<p>Data types for elements and attributes</p>
</li>
<li>
<p>Default and fixed values for elements and attributes</p>
</li>
</ul>
<p>A validating XML parser tries to determine whether an instance document conforms to the rules of its associated XML schema. Using XDK you can write a validating parser that performs this schema validation. Depending on its implementation, a validating parser may:</p>
<ul style="list-style-type: disc;">
<li>
<p>Either stop processing when it encounters an error, or continue.</p>
</li>
<li>
<p>Either report warnings and errors as they occur or in summary form at the end of processing.</p>
</li>
</ul>
<p>The processor must consider entity definitions and other constructs that are defined in a DTD that is included by the instance document. The XML Schema language does not define what must occurs when an instance document includes both an XML schema and a DTD. Thus, the behavior of the application in such cases depends on the implementation.</p>
</div>
<a id="ADXDK19263"></a><a id="ADXDK19264"></a><a id="ADXDK19262"></a>
<div class="props_rev_3"><a id="GUID-E2B411D7-FE12-4E41-B9D8-201FF4D473F3"></a>
<h4 id="ADXDK-GUID-E2B411D7-FE12-4E41-B9D8-201FF4D473F3" class="sect4"><span class="enumeration_section">9.1.4.1</span> XML Schema Samples in XDK</h4>
<div>
<p><a href="adx_j_sproc.htm#GUID-E2B411D7-FE12-4E41-B9D8-201FF4D473F3__BABHGCFC">Example 9-3</a> shows a sample XML document that contains a purchase report that describes the parts that have been ordered in different regions. This sample file is located at <code>$ORACLE_HOME/xdk/demo/java/schema/report.xml</code>.</p>
<p><a href="adx_j_sproc.htm#GUID-E2B411D7-FE12-4E41-B9D8-201FF4D473F3__BABFDAEI">Example 9-4</a> shows the XML schema document named <code>report.xsd</code>, which is the sample XML schema document that you can use to validate <code>report.xml</code>. Among other things, the XML schema defines the names of the elements that are legal in the instance document and also the type of data that the elements can contain.</p>
<div class="example" id="GUID-E2B411D7-FE12-4E41-B9D8-201FF4D473F3__BABHGCFC">
<p class="titleinexample">Example 9-3 report.xml</p>
<pre dir="ltr">&lt;purchaseReport
  xmlns=&#34;http://www.example.com/Report&#34;
  xmlns:xsi = &#34;http://www.w3.org/2001/XMLSchema-instance&#34;
  xsi:schemaLocation=&#34;http://www.example.com/Report  report.xsd&#34;
  period=&#34;P3M&#34; periodEnding=&#34;1999-12-31&#34;&gt;
 
 &lt;regions&gt;
  &lt;zip code=&#34;95819&#34;&gt;
   &lt;part number=&#34;872-AA&#34; quantity=&#34;1&#34;/&gt;
   &lt;part number=&#34;926-AA&#34; quantity=&#34;1&#34;/&gt;
   &lt;part number=&#34;833-AA&#34; quantity=&#34;1&#34;/&gt;
   &lt;part number=&#34;455-BX&#34; quantity=&#34;1&#34;/&gt;
  &lt;/zip&gt;
  &lt;zip code=&#34;63143&#34;&gt;
   &lt;part number=&#34;455-BX&#34; quantity=&#34;4&#34;/&gt;
  &lt;/zip&gt;
 &lt;/regions&gt;
 &lt;parts&gt;
  &lt;part number=&#34;872-AA&#34;&gt;Lawnmower&lt;/part&gt;
  &lt;part number=&#34;926-AA&#34;&gt;Baby Monitor&lt;/part&gt;
  &lt;part number=&#34;833-AA&#34;&gt;Lapis Necklace&lt;/part&gt;
  &lt;part number=&#34;455-BX&#34;&gt;Sturdy Shelves&lt;/part&gt;
 &lt;/parts&gt;
&lt;/purchaseReport&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E2B411D7-FE12-4E41-B9D8-201FF4D473F3__BABFDAEI">
<p class="titleinexample">Example 9-4 report.xsd</p>
<pre dir="ltr">&lt;schema targetNamespace=&#34;http://www.example.com/Report&#34;
        xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
        xmlns:r=&#34;http://www.example.com/Report&#34;
        elementFormDefault=&#34;qualified&#34;&gt;
 
 &lt;annotation&gt;
  &lt;documentation&gt;
   Report schema for Example.com
   Copyright 2000 Example.com. All rights reserved.
  &lt;/documentation&gt;
 &lt;/annotation&gt;
 
 &lt;element name=&#34;purchaseReport&#34;&gt;
  &lt;complexType&gt;
   &lt;sequence&gt;
    &lt;element name=&#34;regions&#34; type=&#34;r:RegionsType&#34;&gt;
     &lt;keyref name=&#34;dummy2&#34; refer=&#34;r:pNumKey&#34;&gt;
      &lt;selector xpath=&#34;r:zip/r:part&#34;/&gt;
      &lt;field xpath=&#34;@number&#34;/&gt;
     &lt;/keyref&gt;
    &lt;/element&gt;
 
    &lt;element name=&#34;parts&#34; type=&#34;r:PartsType&#34;/&gt;
   &lt;/sequence&gt;
   &lt;attribute name=&#34;period&#34;       type=&#34;duration&#34;/&gt;
   &lt;attribute name=&#34;periodEnding&#34; type=&#34;date&#34;/&gt;
  &lt;/complexType&gt;
 
  &lt;unique name=&#34;dummy1&#34;&gt;
   &lt;selector xpath=&#34;r:regions/r:zip&#34;/&gt;
   &lt;field xpath=&#34;@code&#34;/&gt;
  &lt;/unique&gt;
 
  &lt;key name=&#34;pNumKey&#34;&gt;
   &lt;selector xpath=&#34;r:parts/r:part&#34;/&gt;
   &lt;field xpath=&#34;@number&#34;/&gt;
  &lt;/key&gt;
 &lt;/element&gt;
 &lt;complexType name=&#34;RegionsType&#34;&gt;
  &lt;sequence&gt;
   &lt;element name=&#34;zip&#34; maxOccurs=&#34;unbounded&#34;&gt;
    &lt;complexType&gt;
     &lt;sequence&gt;
      &lt;element name=&#34;part&#34; maxOccurs=&#34;unbounded&#34;&gt;
       &lt;complexType&gt;
        &lt;complexContent&gt;
         &lt;restriction base=&#34;anyType&#34;&gt;
          &lt;attribute name=&#34;number&#34;   type=&#34;r:SKU&#34;/&gt;
          &lt;attribute name=&#34;quantity&#34; type=&#34;positiveInteger&#34;/&gt;
         &lt;/restriction&gt;
        &lt;/complexContent&gt;
       &lt;/complexType&gt;
      &lt;/element&gt;
     &lt;/sequence&gt;
     &lt;attribute name=&#34;code&#34; type=&#34;positiveInteger&#34;/&gt;
    &lt;/complexType&gt;
   &lt;/element&gt;
  &lt;/sequence&gt;
 &lt;/complexType&gt;
 
 &lt;simpleType name=&#34;SKU&#34;&gt;
  &lt;restriction base=&#34;string&#34;&gt;
   &lt;pattern value=&#34;\d{3}-[A-Z]{2}&#34;/&gt;
  &lt;/restriction&gt;
 &lt;/simpleType&gt;
 
 &lt;complexType name=&#34;PartsType&#34;&gt;
  &lt;sequence&gt;
   &lt;element name=&#34;part&#34; maxOccurs=&#34;unbounded&#34;&gt;
    &lt;complexType&gt;
     &lt;simpleContent&gt;
      &lt;extension base=&#34;string&#34;&gt;
       &lt;attribute name=&#34;number&#34; type=&#34;r:SKU&#34;/&gt;
      &lt;/extension&gt;
     &lt;/simpleContent&gt;
    &lt;/complexType&gt;
   &lt;/element&gt;
  &lt;/sequence&gt;
 &lt;/complexType&gt;
 
&lt;/schema&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19266"></a><a id="ADXDK19265"></a>
<div class="props_rev_3"><a id="GUID-1794D1E8-94A0-41EB-B8A5-E7927FAC4BE9"></a>
<h3 id="ADXDK-GUID-1794D1E8-94A0-41EB-B8A5-E7927FAC4BE9" class="sect3"><span class="enumeration_section">9.1.5</span> Differences Between XML Schemas and DTDs</h3>
<div>
<p>The XML Schema language includes most of the capabilities of the DTD specification. An XML schema serves a similar purpose to a DTD, but is more flexible in specifying document constraints. <a href="adx_j_sproc.htm#GUID-1794D1E8-94A0-41EB-B8A5-E7927FAC4BE9__CIHDIBAB" title="This table compares the features of the XML Schema language and DTDs">Table 9-1</a> compares some features between the two validation mechanisms.</p>
<div class="tblformal" id="GUID-1794D1E8-94A0-41EB-B8A5-E7927FAC4BE9__CIHDIBAB">
<p class="titleintable">Table 9-1 Feature Comparison Between XML Schema and DTD</p>
<table class="cellalignment650" title="Feature Comparison Between XML Schema and DTD" summary="This table compares the features of the XML Schema language and DTDs">
<thead>
<tr class="cellalignment644">
<th class="cellalignment662" id="d45954e990">Feature</th>
<th class="cellalignment673" id="d45954e993">XML Schema</th>
<th class="cellalignment751" id="d45954e996">DTD</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1001" headers="d45954e990">
<p>Element nesting</p>
</td>
<td class="cellalignment675" headers="d45954e1001 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1001 d45954e996">
<p>X</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1011" headers="d45954e990">
<p>Element occurrence constraints</p>
</td>
<td class="cellalignment675" headers="d45954e1011 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1011 d45954e996">
<p>X</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1021" headers="d45954e990">
<p>Permitted attributes</p>
</td>
<td class="cellalignment675" headers="d45954e1021 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1021 d45954e996">
<p>X</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1031" headers="d45954e990">
<p>Attribute types and default values</p>
</td>
<td class="cellalignment675" headers="d45954e1031 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1031 d45954e996">
<p>X</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1041" headers="d45954e990">
<p>Written in XML</p>
</td>
<td class="cellalignment675" headers="d45954e1041 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1041 d45954e996">&nbsp;</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1050" headers="d45954e990">
<p>Namespace support</p>
</td>
<td class="cellalignment675" headers="d45954e1050 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1050 d45954e996">&nbsp;</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1059" headers="d45954e990">
<p>Built-In data types</p>
</td>
<td class="cellalignment675" headers="d45954e1059 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1059 d45954e996">&nbsp;</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1068" headers="d45954e990">
<p>User-Defined data types</p>
</td>
<td class="cellalignment675" headers="d45954e1068 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1068 d45954e996">&nbsp;</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1077" headers="d45954e990">
<p>Include/Import</p>
</td>
<td class="cellalignment675" headers="d45954e1077 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1077 d45954e996">&nbsp;</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment664" id="d45954e1086" headers="d45954e990">
<p>Refinement (inheritance)</p>
</td>
<td class="cellalignment675" headers="d45954e1086 d45954e993">
<p>X</p>
</td>
<td class="cellalignment752" headers="d45954e1086 d45954e996">&nbsp;</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>These reasons are probably the most persuasive for choosing XML schema validation over DTD validation:</p>
<ul style="list-style-type: disc;">
<li>
<p>The XML Schema language enables you to define rules for the <span class="italic">content</span> of elements and attributes. You achieve control over content by using data types. With XML Schema data types you can more easily perform actions such as:</p>
<ul style="list-style-type: disc;">
<li>
<p>Declare which elements are to contain which types of data, for example, positive integers in one element and years in another</p>
</li>
<li>
<p>Process data obtained from a database</p>
</li>
<li>
<p>Define restrictions on data, for example, a number between 10 and 20</p>
</li>
<li>
<p>Define data formats, for example, dates in the form MM-DD-YYYY</p>
</li>
<li>
<p>Convert data between different data types, for example, strings to dates</p>
</li>
</ul>
</li>
<li>
<p>Unlike DTD grammar, documents written in the XML Schema language are themselves written in XML. Thus, you can perform these actions:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use your XML parser to parse your XML schema</p>
</li>
<li>
<p>Process your XML schema with the XML Document Object Model (DOM)</p>
</li>
<li>
<p>Transform your XML document with Extensible Stylesheet Language Transformation (XSLT)</p>
</li>
<li>
<p>Reuse your XML schemas in other XML schemas</p>
</li>
<li>
<p>Extend your XML schema by adding elements and attributes</p>
</li>
<li>
<p>Reference multiple XML schemas from the same document</p>
</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK19267"></a>
<div class="props_rev_3"><a id="GUID-D9E0C12D-122D-4183-A4AB-8BE7F476ABF8"></a>
<h2 id="ADXDK-GUID-D9E0C12D-122D-4183-A4AB-8BE7F476ABF8" class="sect2"><span class="enumeration_section">9.2</span> Using the XML Schema Processor: Overview</h2>
<div>
<p>The Oracle XML Schema processor is a SAX-based XML schema validator that you can use to validate instance documents against an XML schema. The processor supports both language example (LAX) and strict validation.</p>
<p>You can use the processor in these ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Enable it in the XML parser</p>
</li>
<li>
<p>Use it with a DOM tree to validate whole or part of an XML document</p>
</li>
<li>
<p>Use it as a component in a processing pipeline (like a content handler)</p>
</li>
</ul>
<p>You can configure the schema processor in different ways depending on your requirements. For example, you can:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use a fixed XML schema or automatically build a schema based on the <code>schemaLocation</code> attributes in an instance document.</p>
</li>
<li>
<p>Set <code>XMLError</code> and <code>entityResolver</code> to gain better control over the validation process.</p>
</li>
<li>
<p>Determine how much of an instance document is to be validated. You can use any of the validation modes specified in <a href="adx_j_parser.htm#GUID-2DA498AD-B22B-4C66-AE90-5EB37EB105E7__g1043218" title="Name of Mode, Mode Value in Java, and Description are the columns.">Table 4-1</a>. You can also designate a type of element as the root of validation.</p>
</li>
</ul>
</div>
<a id="ADXDK19269"></a><a id="ADXDK19270"></a><a id="ADXDK19268"></a>
<div class="props_rev_3"><a id="GUID-66EB1648-53B0-4026-8139-EC9EED8A16E6"></a>
<h3 id="ADXDK-GUID-66EB1648-53B0-4026-8139-EC9EED8A16E6" class="sect3"><span class="enumeration_section">9.2.1</span> Using the XML Schema Processor: Basic Process</h3>
<div>
<p>These XDK packages are important for applications that process XML schemas:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>oracle.xml.parser.v2</code>, which provides APIs for XML parsing</p>
</li>
<li>
<p><code>oracle.xml.parser.schema</code>, which provides APIs for XML Schema processing</p>
</li>
</ul>
<p>The most important classes in the <code>oracle.xml.parser.schema</code> package are described in <a href="adx_j_sproc.htm#GUID-66EB1648-53B0-4026-8139-EC9EED8A16E6__CHDHIJJE" title="This table describes the oracle.xml.parser.schema classes.">Table 9-2</a>. These form the core of most XML schema applications.</p>
<div class="tblformalwide" id="GUID-66EB1648-53B0-4026-8139-EC9EED8A16E6__CHDHIJJE">
<p class="titleintable">Table 9-2 oracle.xml.parser.schema Classes</p>
<table class="cellalignment655" title="oracle.xml.parser.schema Classes" summary="This table describes the oracle.xml.parser.schema classes.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment673" id="d45954e1369">Class/Interface</th>
<th class="cellalignment674" id="d45954e1372">Description</th>
<th class="cellalignment658" id="d45954e1375">Methods</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment675" id="d45954e1380" headers="d45954e1369">
<p><code>XMLSchema</code> class</p>
</td>
<td class="cellalignment676" headers="d45954e1380 d45954e1372">
<p>Represents XML Schema component model. An <code>XMLSchema</code> object is a set of <code>XMLSchemaNodes</code> that belong to different target namespaces. The <code>XSDValidator</code> class uses <code>XMLSchema</code> for schema validation or metadata.</p>
</td>
<td class="cellalignment660" headers="d45954e1380 d45954e1375">
<p>The principal methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>get</code> methods such as <code>getElement()</code> and <code>getSchemaTargetNS()</code> get information about the XML schema</p>
</li>
<li>
<p><code>printSchema()</code> prints information about the XML schema</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d45954e1421" headers="d45954e1369">
<p><code>XMLSchemaNode</code> class</p>
</td>
<td class="cellalignment676" headers="d45954e1421 d45954e1372">
<p>Represents schema components in a target namespace, including type definitions, element and attribute delcarations, and group and attribute group definitions.</p>
</td>
<td class="cellalignment660" headers="d45954e1421 d45954e1375">
<p>The principal methods are <code>get</code> methods such as <code>getElementSet()</code> and <code>getAttributeDeclarations()</code> get components of the XML schema.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d45954e1442" headers="d45954e1369">
<p><code>XSDBuilder</code> class</p>
</td>
<td class="cellalignment676" headers="d45954e1442 d45954e1372">
<p>Builds an <code>XMLSchema</code> object from an XML schema document. The <code>XMLSchema</code> object is a set of objects (Infoset items) corresponding to top-level schema declarations and definitions. The schema document is XML parsed and converted to a DOM tree.</p>
</td>
<td class="cellalignment660" headers="d45954e1442 d45954e1375">
<p>The principal methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>build()</code> creates an <code>XMLSchema</code> object.</p>
</li>
<li>
<p><code>getObject()</code> returns the <code>XMLSchema</code> object.</p>
</li>
<li>
<p><code>setEntityResolver()</code> sets an <code>EntityResolver</code> for resolving imports and includes.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment675" id="d45954e1485" headers="d45954e1369">
<p><code>XSDValidator</code> class</p>
</td>
<td class="cellalignment676" headers="d45954e1485 d45954e1372">
<p>Validates an instance XML document against an XML schema. When registered, an <code>XSDValidator</code> object is inserted as a pipeline node between <code>XMLParser</code> and <code>XMLDocument</code> events handlers.</p>
</td>
<td class="cellalignment660" headers="d45954e1485 d45954e1375">
<p>The principal methods are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>get</code> methods such as <code>getCurrentMode()</code> and <code>getElementDeclaration()</code></p>
</li>
<li>
<p><code>set</code> methods such as <code>setXMLProperty()</code> and <code>setDocumentLocator()</code></p>
</li>
<li>
<p><code>startDocument()</code> receives notification of the beginning of the document.</p>
</li>
<li>
<p><code>startElement()</code> receives notification of the beginning of the element.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_j_sproc.htm#GUID-66EB1648-53B0-4026-8139-EC9EED8A16E6__i1012436">Figure 9-1</a> depicts the basic process of validating an instance document with the XML Schema processor.</p>
<div class="figure" id="GUID-66EB1648-53B0-4026-8139-EC9EED8A16E6__i1012436">
<p class="titleinfigure">Figure 9-1 XML Schema Processor</p>
<img width="470" height="339" src="img/GUID-19CD5AE7-12A3-4EEA-9C4D-18810BD84398-default.gif" alt="Description of Figure 9-1 follows" title="Description of Figure 9-1 follows"/><br/>
<a href="img_text/GUID-19CD5AE7-12A3-4EEA-9C4D-18810BD84398-print.htm">Description of &#34;Figure 9-1 XML Schema Processor&#34;</a></div>
<!-- class="figure" -->
<p>The XML Schema processor performs these major tasks:</p>
<ol>
<li>
<p>A builder (<code>XSDBuilder</code> object) assembles the XML schema from an input XML schema document. Although instance documents and schemas need not exist specifically as files on the operating system, they are commonly referred to as files. They may exist as streams of bytes, fields in a database record, or collections of XML Infoset &#34;Information Items.&#34;</p>
<p>This task involves parsing the schema document into an object. The builder creates the schema object explicitly or implicitly:</p>
<ul style="list-style-type: disc;">
<li>
<p>In explicit mode, you pass in an XML schema when you invoke the processor. <span class="q">&#34;<a href="adx_j_sproc.htm#GUID-EAAAB139-E5FE-434E-A310-2E13099B1FF8">Validating Against Externally Referenced XML Schemas</a>&#34;</span> explains how to build the schema object in explicit mode.</p>
</li>
<li>
<p>In implicit mode, you do not pass in an XML schema when you invoke the processor because the schema is internally referenced by the instance document. <span class="q">&#34;<a href="adx_j_sproc.htm#GUID-5B182AA2-84E3-416A-837A-6563B2F948D5">Validating Against Internally Referenced XML Schemas</a>&#34;</span> explains how to create the schema object in implicit mode.</p>
</li>
</ul>
</li>
<li>
<p>The XML schema validator uses the schema object to validate the instance document. This task has these steps:</p>
<ol>
<li>
<p>A Simple API for XML (SAX) parser parses the instance document into SAX events, which it passes to the validator.</p>
</li>
<li>
<p>The validator receives SAX events as input and validates them against the schema object, sending an error message if it finds invalid XML components.</p>
<p><span class="q">&#34;<a href="adx_j_parser.htm#GUID-2DA498AD-B22B-4C66-AE90-5EB37EB105E7">Validation in the XML Parser</a>&#34;</span> describes the validation modes that you can use when validating the instance document. If you do not explicitly set a schema for validation with the <code>XSDBuilder</code> class, then the instance document must have the correct <code>xsi:schemaLocation</code> attribute pointing to the schema file. Otherwise, the program does not perform the validation. If the processor encounters errors, it generates error messages.</p>
</li>
<li>
<p>The validator sends input SAX events, default values, or post-schema validation information to a DOM builder or application.</p>
</li>
</ol>
</li>
</ol>
<div class="infoboxnotealso" id="GUID-66EB1648-53B0-4026-8139-EC9EED8A16E6__GUID-79CE7578-8DAB-49AF-88FC-70B09FD34EF9">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code>XSDBuilder</code>, <code>DOMParser</code>, and <code>SAXParser</code> classes</p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-F41C7DA2-A3DF-463B-A08C-24E8F0621450">Using the XML Schema Processor for Java</a> to learn about the XDK SAX and DOM parsers</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK19272"></a><a id="ADXDK19271"></a>
<div class="props_rev_3"><a id="GUID-1794B57C-BD9A-4322-B136-B07B950EC479"></a>
<h3 id="ADXDK-GUID-1794B57C-BD9A-4322-B136-B07B950EC479" class="sect3"><span class="enumeration_section">9.2.2</span> Running the XML Schema Processor Demo Programs</h3>
<div>
<div class="section">
<p>Demo programs for the XML Schema processor for Java are included in <code>$ORACLE_HOME/xdk/demo/java/schema</code>. <a href="adx_j_sproc.htm#GUID-1794B57C-BD9A-4322-B136-B07B950EC479__CIHIEEDI" title="File and Description are the Columns.">Table 9-3</a> describes the XML files and programs that you can use to test the XML Schema processor.</p>
<div class="tblformalwide" id="GUID-1794B57C-BD9A-4322-B136-B07B950EC479__CIHIEEDI">
<p class="titleintable">Table 9-3 XML Schema Sample Files</p>
<table class="cellalignment655" title="XML Schema Sample Files " summary="File and Description are the Columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment704" id="d45954e1727">File</th>
<th class="cellalignment708" id="d45954e1730">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1735" headers="d45954e1727">
<pre dir="ltr">cat.xsd
</pre></td>
<td class="cellalignment709" headers="d45954e1735 d45954e1730">
<p>A sample XML schema used by the <code>XSDSetSchema.java</code> program to validate <code>catalogue.xml</code>. The <code>cat.xsd</code> schema specifies the structure of a catalogue of books.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1751" headers="d45954e1727">
<pre dir="ltr">catalogue.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1751 d45954e1730">
<p>A sample instance document that the <code>XSDSetSchema.java</code> program uses to validate against the <code>cat.xsd</code> schema.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1764" headers="d45954e1727">
<pre dir="ltr">catalogue_e.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1764 d45954e1730">
<p>A sample instance document used by the <code>XSDSample.java</code> program. When the program tries to validate this document against the <code>cat.xsd</code> schema, it generates schema errors.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1777" headers="d45954e1727">
<pre dir="ltr">DTD2Schema.java
</pre></td>
<td class="cellalignment709" headers="d45954e1777 d45954e1730">
<p>This sample program converts a DTD (first argument) into an XML Schema and uses it to validate an XML file (second argument).</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1784" headers="d45954e1727">
<pre dir="ltr">embeded_xsql.xsd
</pre></td>
<td class="cellalignment709" headers="d45954e1784 d45954e1730">
<p>The XML schema used by <code>XSDLax.java.</code> The schema defines the structure of an XSQL page.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1794" headers="d45954e1727">
<pre dir="ltr">embeded_xsql.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1794 d45954e1730">
<p>The instance document used by <code>XSDLax.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1804" headers="d45954e1727">
<pre dir="ltr">juicer1.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1804 d45954e1730">
<p>A sample XML document for use with <code>xsdproperty.java</code>. The XML schema that defines this document is <code>juicer1.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1817" headers="d45954e1727">
<pre dir="ltr">juicer1.xsd
</pre></td>
<td class="cellalignment709" headers="d45954e1817 d45954e1730">
<p>A sample XML schema for use with <code>xsdproperty.java</code>. This XML schema defines <code>juicer1.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1830" headers="d45954e1727">
<pre dir="ltr">juicer2.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1830 d45954e1730">
<p>A sample XML document for use with <code>xsdproperty.java</code>. The XML schema that defines this document is <code>juicer2.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1843" headers="d45954e1727">
<pre dir="ltr">juicer2.xsd
</pre></td>
<td class="cellalignment709" headers="d45954e1843 d45954e1730">
<p>A sample XML document for use with <code>xsdproperty.java</code>. This XML schema defines <code>juicer2.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1856" headers="d45954e1727">
<pre dir="ltr">report.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1856 d45954e1730">
<p>The sample XML file that <code>XSDSetSchema.java</code> uses to validate against the XML schema <code>report.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1870" headers="d45954e1727">
<pre dir="ltr">report.xsd
</pre></td>
<td class="cellalignment709" headers="d45954e1870 d45954e1730">
<p>A sample XML schema used by the <code>XSDSetSchema.java</code> program to validate the contents of <code>report.xml</code>. The <code>report.xsd</code> schema specifies the structure of a purchase order.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1886" headers="d45954e1727">
<pre dir="ltr">report_e.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1886 d45954e1730">
<p>When the program validates this sample XML file using <code>XSDSample.java</code>, it generates XML Schema errors.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1896" headers="d45954e1727">
<pre dir="ltr">xsddom.java
</pre></td>
<td class="cellalignment709" headers="d45954e1896 d45954e1730">
<p>This program shows how to validate an instance document by get a DOM representation of the document and using an <code>XSDValidator</code> object to validate it.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1906" headers="d45954e1727">
<pre dir="ltr">xsdent.java
</pre></td>
<td class="cellalignment709" headers="d45954e1906 d45954e1730">
<p>This program validates an XML document by redirecting the referenced schema in the <code>SchemaLocation</code> attribute to a local version.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1916" headers="d45954e1727">
<pre dir="ltr">xsdent.xml
</pre></td>
<td class="cellalignment709" headers="d45954e1916 d45954e1730">
<p>This XML document describes a book. The file is used as an input to <code>xsdent.java</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1926" headers="d45954e1727">
<pre dir="ltr">xsdent.xsd
</pre></td>
<td class="cellalignment709" headers="d45954e1926 d45954e1730">
<p>This XML schema document defines the rules for <code>xsdent.xml</code>. The schema document contains a <code>schemaLocation</code> attribute set to <code>xsdent-1.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1942" headers="d45954e1727">
<pre dir="ltr">xsdent-1.xsd
</pre></td>
<td class="cellalignment709" headers="d45954e1942 d45954e1730">
<p>The XML schema document referenced by the <code>schemaLocation</code> attribute in <code>xsdent.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1955" headers="d45954e1727">
<pre dir="ltr">xsdproperty.java
</pre></td>
<td class="cellalignment709" headers="d45954e1955 d45954e1730">
<p>This demo shows how to configure the XML Schema processor to validate an XML document based on a complex type or element declaration.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1962" headers="d45954e1727">
<pre dir="ltr">xsdsax.java
</pre></td>
<td class="cellalignment709" headers="d45954e1962 d45954e1730">
<p>This demo shows how to validate an XML document received as a SAX stream.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1969" headers="d45954e1727">
<pre dir="ltr">XSDLax.java
</pre></td>
<td class="cellalignment709" headers="d45954e1969 d45954e1730">
<p>This demo is the same as <code>XSDSetSchema.java</code> but sets the <code>SCHEMA_LAX_VALIDATION</code> flag for LAX validation.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1982" headers="d45954e1727">
<pre dir="ltr">XSDSample.java
</pre></td>
<td class="cellalignment709" headers="d45954e1982 d45954e1730">
<p>This program is a sample driver that you can use to process XML instance documents.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment706" id="d45954e1990" headers="d45954e1727">
<pre dir="ltr">XSDSetSchema.java
</pre></td>
<td class="cellalignment709" headers="d45954e1990 d45954e1730">
<p>This program is a sample driver to process XML instance documents by overriding the <code>schemaLocation</code>. The program uses the XML Schema specification from <code>cat.xsd</code> to validate the contents of <code>catalogue.xml</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Documentation for how to compile and run the sample programs is located in the <code>README</code> in the same directory. The basic steps are:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Change into the <code>$ORACLE_HOME/xdk/demo/java/schema</code> directory (UNIX) or <code>%ORACLE_HOME%\xdk\demo\java\schema</code> directory (Windows).</span></li>
<li class="stepexpand"><span>Run <code>make</code> (UNIX) or <code>Make.bat</code> (Windows) at the command line.</span></li>
<li class="stepexpand"><span>Add <code>xmlparserv2.jar</code>, <code>xschema.jar</code>, and the current directory to the <code>CLASSPATH</code>. These JAR files are located in <code>$ORACLE_HOME/lib</code> (UNIX) and <code>%ORACLE_HOME%\lib</code> (Windows). For example, you can set the <code>CLASSPATH</code> with the <code>tcsh</code> shell on UNIX:</span>
<div>
<pre dir="ltr">setenv CLASSPATH
 &#34;$CLASSPATH&#34;:$ORACLE_HOME/lib/xmlparserv2.jar:$ORACLE_HOME/lib/schema.jar:.
</pre>
<div class="infobox-note" id="GUID-1794B57C-BD9A-4322-B136-B07B950EC479__GUID-FF593407-5EB2-4FAC-93BA-E6344D752FF5">
<p class="notep1">Note:</p>
<p>The XML Schema processor requires JDK version 1.2 or later, and it is usable on any operating system with Java 1.2 support.</p>
</div>
</div>
</li>
<li class="stepexpand"><span>Run the sample programs with the XML files that are included in the directory:</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>These examples use <code>report.xsd</code> to validate the contents of <code>report.xml</code>:</p>
<pre dir="ltr">java XSDSample report.xml
java XSDSetSchema report.xsd report.xml
</pre></li>
<li>
<p>This example validates an instance document in Lax mode:</p>
<pre dir="ltr">java XSDLax embeded_xsql.xsd embeded_xsql.xml
</pre></li>
<li>
<p>These examples use <code>cat.xsd</code> to validate the contents of <code>catalogue.xml</code>:</p>
<pre dir="ltr">java XSDSample catalogue.xml
java XSDSetSchema cat.xsd catalogue.xml
</pre></li>
<li>
<p>These examples generates error messages:</p>
<pre dir="ltr">java XSDSample catalogue_e.xml
java XSDSample report_e.xml
</pre></li>
<li>
<p>This example uses the <code>schemaLocation</code> attribute in <code>xsdent.xsd</code> to redirect the XML schema to <code>xsdent-1.xsd</code> for validation:</p>
<pre dir="ltr">java xsdent xsdent.xml xsdent.xsd
</pre></li>
<li>
<p>This example generates a SAX stream from <code>report.xml</code> and validates it against the XML schema defined in <code>report.xsd</code>:</p>
<pre dir="ltr">java xsdsax report.xsd report.xml
</pre></li>
<li>
<p>This example creates a DOM representation of <code>report.xml</code> and validates it against the XML schema defined in <code>report.xsd</code>:</p>
<pre dir="ltr">java xsddom report.xsd report.xml
</pre></li>
<li>
<p>These examples configure validation starting with an element declaration or complex type definition:</p>
<pre dir="ltr">java xsdproperty juicer1.xml juicer1.xsd http://www.juicers.org \
juicersType false &gt; juicersType.out
                                                                                       
java xsdproperty juicer2.xml juicer2.xsd http://www.juicers.org \ 
Juicers true &gt; juicers_e.out
</pre></li>
<li>
<p>This example converts a DTD (<code>dtd2schema.dtd</code>) into an XML schema and uses it to validate an instance document (<code>dtd2schema.xml</code>):</p>
<pre dir="ltr">java DTD2Schema dtd2schema.dtd dtd2schema.xml
</pre></li>
</ul>
</div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19273"></a>
<div class="props_rev_3"><a id="GUID-47B783B4-29F5-4AE7-AD61-96207DC548D0"></a>
<h3 id="ADXDK-GUID-47B783B4-29F5-4AE7-AD61-96207DC548D0" class="sect3"><span class="enumeration_section">9.2.3</span> Using the XML Schema Processor Command-Line Utility</h3>
<div>
<div class="section">
<p><span class="q">&#34;<a href="adx_j_parser.htm#GUID-204C527C-DED2-4FBA-861E-3378370529ED">Using the XML Parser Command-Line Utility (oraxml)</a>&#34;</span> describes how to run the <code>oraxml</code> command-line utility. You can use this utility to validate instance documents against XML schemas and DTDs.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19275"></a><a id="ADXDK19274"></a>
<div class="props_rev_3"><a id="GUID-223D5EB3-013F-4DA7-97A3-090847AA2C2C"></a>
<h4 id="ADXDK-GUID-223D5EB3-013F-4DA7-97A3-090847AA2C2C" class="sect4"><span class="enumeration_section">9.2.3.1</span> Using oraxml to Validate Against a Schema</h4>
<div>
<div class="section">
<p>Change into the <code>$ORACLE_HOME/xdk/demo/java/schema</code> directory. <a href="adx_j_sproc.htm#GUID-223D5EB3-013F-4DA7-97A3-090847AA2C2C__CIHGACIE">Example 9-5</a> shows how you can validate <code>report.xml</code> against <code>report.xsd</code> by executing this command on the command line.</p>
<p>The expected output is:</p>
<pre dir="ltr">The encoding of the input file: UTF-8
The input XML file is parsed without errors using Schema validation mode.
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-223D5EB3-013F-4DA7-97A3-090847AA2C2C__CIHGACIE">
<p class="titleinexample">Example 9-5 Using oraxml to Validate Against a Schema</p>
<pre dir="ltr">oraxml -schema -enc report.xml
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19277"></a><a id="ADXDK19276"></a>
<div class="props_rev_3"><a id="GUID-0B1E253D-80F0-4B66-A9B5-F86AAFF2BBEA"></a>
<h4 id="ADXDK-GUID-0B1E253D-80F0-4B66-A9B5-F86AAFF2BBEA" class="sect4"><span class="enumeration_section">9.2.3.2</span> Using oraxml to Validate Against a DTD</h4>
<div>
<div class="section">
<p>Change into the <code>$ORACLE_HOME/xdk/demo/java/parser/common</code> directory. <a href="adx_j_sproc.htm#GUID-0B1E253D-80F0-4B66-A9B5-F86AAFF2BBEA__CIHJDDBC">Example 9-6</a> shows how you can validate <code>family.xml</code> against <code>family.dtd</code> by executing this command on the command line.</p>
<p>The expected output is:</p>
<pre dir="ltr">The encoding of the input file: UTF-8
 The input XML file is parsed without errors using DTD validation mode.
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-0B1E253D-80F0-4B66-A9B5-F86AAFF2BBEA__CIHJDDBC">
<p class="titleinexample">Example 9-6 Using oraxml to Validate Against a DTD</p>
<pre dir="ltr">oraxml -dtd -enc family.xml
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADXDK995"></a><a id="ADXDK19278"></a>
<div class="props_rev_3"><a id="GUID-61216843-3968-49AB-8323-5774A7ABA2D7"></a>
<h2 id="ADXDK-GUID-61216843-3968-49AB-8323-5774A7ABA2D7" class="sect2"><span class="enumeration_section">9.3</span> Validating XML with XML Schemas</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_sproc.htm#GUID-5B182AA2-84E3-416A-837A-6563B2F948D5">Validating Against Internally Referenced XML Schemas</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-EAAAB139-E5FE-434E-A310-2E13099B1FF8">Validating Against Externally Referenced XML Schemas</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-AFB85EDC-550E-41D9-8754-9F916E44301E">Validating a Subsection of an XML Document</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-C1C29EFC-2A5F-4D5E-8A45-E8E1A47720A3">Validating XML from a SAX Stream</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-38EF516D-CB44-4857-9EEF-17ECE082068E">Validating XML from a DOM</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-49EE75AF-E9AE-48A7-A331-7707A12A947C">Validating XML from Designed Types and Elements</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19279"></a>
<div class="props_rev_3"><a id="GUID-5B182AA2-84E3-416A-837A-6563B2F948D5"></a>
<h3 id="ADXDK-GUID-5B182AA2-84E3-416A-837A-6563B2F948D5" class="sect3"><span class="enumeration_section">9.3.1</span> Validating Against Internally Referenced XML Schemas</h3>
<div>
<div class="section">
<p>The <code>$ORACLE_HOME/xdk/demo/java/schema/XSDSample.java</code> program shows how to validate against an implicit XML Schema. The validation mode is implicit because the XML schema is referenced in the instance document itself.</p>
<p>Follow the steps in this section to write programs that use the <code>setValidationMode()</code> method of the <code>oracle.xml.parser.v2.</code><code>DOMParser</code> class:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a DOM parser to use for the validation of an instance document. this code fragment from <code>XSDSample.java</code> shows how to create the <code>DOMParser</code> object:</span>
<div>
<pre dir="ltr">public class XSDSample
{
   public static void main(String[] args) throws Exception
   {
      if (args.length != 1)
      {
         System.out.println(&#34;Usage: java XSDSample &lt;filename&gt;&#34;);
         return;
      }
      process (args[0]);
   }

   public static void process (String xmlURI) throws Exception
   {
      DOMParser dp  = new DOMParser();
      URL       url = createURL(xmlURI);
      ...
   }
...
}
</pre>
<p><code>createURL()</code> is a helper method that constructs a URL from a file name passed to the program as an argument.</p>
</div>
</li>
<li class="stepexpand"><span>Set the validation mode for the validating DOM parser with the <code>DOMParser.setValidationMode()</code> method. For example, <code>XSDSample.java</code> shows how to specify XML schema validation:</span>
<div>
<pre dir="ltr">dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
dp.setPreserveWhitespace(true);
</pre></div>
</li>
<li class="stepexpand"><span>Set the output error stream with the <code>DOMParser.setErrorStream()</code> method. For example, <code>XSDSample.java</code> sets the error stream for the DOM parser object:</span>
<div>
<pre dir="ltr">dp.setErrorStream (System.out);
</pre></div>
</li>
<li class="stepexpand"><span>Validate the instance document with the <code>DOMParser.parse()</code> method. You do not have to create an XML schema object explicitly because the schema is internally referenced by the instance document. For example, <code>XSDSample.java</code> validates the instance document:</span>
<div>
<pre dir="ltr">try
{
  System.out.println(&#34;Parsing &#34;+xmlURI);
  dp.parse(url);
  System.out.println(&#34;The input file &lt;&#34;+xmlURI+&#34;&gt; parsed without errors&#34;);
}
catch (XMLParseException pe)
{
  System.out.println(&#34;Parser Exception: &#34; + pe.getMessage());
}
catch (Exception e)
{
  System.out.println(&#34;NonParserException: &#34; + e.getMessage());
}
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19280"></a>
<div class="props_rev_3"><a id="GUID-EAAAB139-E5FE-434E-A310-2E13099B1FF8"></a>
<h3 id="ADXDK-GUID-EAAAB139-E5FE-434E-A310-2E13099B1FF8" class="sect3"><span class="enumeration_section">9.3.2</span> Validating Against Externally Referenced XML Schemas</h3>
<div>
<div class="section">
<p>The <code>$ORACLE_HOME/xdk/demo/java/schema/XSDSetSchema.java</code> program shows how to validate an XML schema explicitly. The validation mode is explicit because you use the <code>XSDBuilder</code> class to specify the schema to use for validation: the schema is not specified in the instance document as in implicit validation.</p>
<p>Follow the basic steps in this section to write Java programs that use the <code>build()</code> method of the <code>oracle.xml.parser.schema.XSDBuilder</code> class:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Build an XML schema object from the XML schema document with the <code>XSDBuilder.build()</code> method. This code fragment from <code>XSDSetSchema.java</code> shows how to create the object:</span>
<div>
<pre dir="ltr">public class XSDSetSchema
{
   public static void main(String[] args) throws Exception
   {
      if (args.length != 2)
      {
         System.out.println(&#34;Usage: java XSDSample &lt;schema_file&gt; &lt;xml_file&gt;&#34;);
         return;
      }
 
      XSDBuilder builder = new XSDBuilder();
      URL    url =  createURL(args[0]);
 
      // Build XML Schema Object
      XMLSchema schemadoc = (XMLSchema)builder.build(url);
      process(args[1], schemadoc);
   }
. . .
</pre>
<p>The <code>createURL()</code> method is a helper method that constructs a URL from the schema document file name specified on the command line.</p>
</div>
</li>
<li class="stepexpand"><span>Create a DOM parser to use for validation of the instance document. This code from <code>XSDSetSchema.java</code> shows how to pass the instance document file name and XML schema object to the <code>process()</code> method:</span>
<div>
<pre dir="ltr">public static void process(String xmlURI, XMLSchema schemadoc)throws Exception{
   DOMParser dp  = new DOMParser();
   URL       url = createURL (xmlURI);
   . . .
</pre></div>
</li>
<li class="stepexpand"><span>Specify the schema object to use for validation with the <code>DOMParser.setXMLSchema()</code> method. This step is not necessary in implicit validation mode because the instance document already references the schema. For example, <code>XSDSetSchema.java</code> specifies the schema:</span>
<div>
<pre dir="ltr">dp.setXMLSchema(schemadoc);
</pre></div>
</li>
<li class="stepexpand"><span>Set the validation mode for the DOM parser object with the <code>DOMParser.setValidationMode()</code> method. For example, <code>XSDSample.java</code> shows how to specify XML schema validation:</span>
<div>
<pre dir="ltr">dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
dp.setPreserveWhitespace(true);
</pre></div>
</li>
<li class="stepexpand"><span>Set the output error stream for the parser with the <code>DOMParser.setErrorStream()</code> method. For example, <code>XSDSetSchema.java</code> sets it:</span>
<div>
<pre dir="ltr">dp.setErrorStream (System.out);
</pre></div>
</li>
<li class="stepexpand"><span>Validate the instance document against the XML schema with the <code>DOMParser.parse()</code> method. For example, <code>XSDSetSchema.java</code> includes this code:</span>
<div>
<pre dir="ltr">try
{
   System.out.println(&#34;Parsing &#34;+xmlURI);
   dp.parse (url);
   System.out.println(&#34;The input file &lt;&#34;+xmlURI+&#34;&gt; parsed without errors&#34;);
}
catch (XMLParseException pe)
{
   System.out.println(&#34;Parser Exception: &#34; + pe.getMessage());
}
catch (Exception e)
{
   System.out.println (&#34;NonParserException: &#34; + e.getMessage());
}
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19281"></a>
<div class="props_rev_3"><a id="GUID-AFB85EDC-550E-41D9-8754-9F916E44301E"></a>
<h3 id="ADXDK-GUID-AFB85EDC-550E-41D9-8754-9F916E44301E" class="sect3"><span class="enumeration_section">9.3.3</span> Validating a Subsection of an XML Document</h3>
<div>
<div class="section">
<p>In LAX mode, you can validate parts of the XML content of an instance document without validating the whole document. A LAX parser indicates that the processor is to perform validation for elements in the instance document that are declared in an associated XML schema. The processor does not consider the instance document invalid if it contains no elements declared in the schema.</p>
<p>By using LAX mode, you can define the schema only for the part of the XML to be validated. The <code>$ORACLE_HOME/xdk/demo/java/schema/XSDLax.java</code> program shows how to use LAX validation. The program follows the basic steps described in <span class="q">&#34;<a href="adx_j_sproc.htm#GUID-EAAAB139-E5FE-434E-A310-2E13099B1FF8">Validating Against Externally Referenced XML Schemas</a>&#34;</span>:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Build an XML schema object from the user-specified XML schema document.</span></li>
<li><span>Create a DOM parser to use for validation of the instance document.</span></li>
<li><span>Specify the XML schema to use for validation.</span></li>
<li><span>Set the validation mode for the DOM parser object.</span></li>
<li><span>Set the output error stream for the parser.</span></li>
<li><span>Validate the instance document against the XML schema by invoking <code>DOMParser.parse()</code>.</span></li>
</ol>
<div class="section">
<p>To enable LAX validation, the program sets the validation mode in the parser to <code>SCHEMA_LAX_VALIDATION</code> rather than to <code>SCHEMA_VALIDATION</code>. This code fragment from <code>XSDLax.java</code> shows this technique:</p>
<pre dir="ltr">dp.setXMLSchema(schemadoc);
dp.setValidationMode(XMLParser.SCHEMA_LAX_VALIDATION);
dp.setPreserveWhitespace (true);
. . .
</pre>
<p>You can test LAX validation by running the sample program:</p>
<pre dir="ltr">java XSDLax embeded_xsql.xsd embeded_xsql.xml
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19282"></a>
<div class="props_rev_3"><a id="GUID-C1C29EFC-2A5F-4D5E-8A45-E8E1A47720A3"></a>
<h3 id="ADXDK-GUID-C1C29EFC-2A5F-4D5E-8A45-E8E1A47720A3" class="sect3"><span class="enumeration_section">9.3.4</span> Validating XML from a SAX Stream</h3>
<div>
<div class="section">
<p>The <code>$ORACLE_HOME/xdk/demo/java/schema/xsdsax.java</code> program shows how to validate an XML document received as a SAX stream. You instantiate an <code>XSDValidator</code> and register it with the SAX parser as the content handler.</p>
<p>Follow the steps in this section to write programs that validate XML from a SAX stream:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Build an XML schema object from the user-specified XML schema document by invoking the <code>XSDBuilder.build()</code> method. This code fragment shows how to create the object:</span>
<div>
<pre dir="ltr">XSDBuilder builder = new XSDBuilder();
URL    url =  XMLUtil.createURL(args[0]);

// Build XML Schema Object
XMLSchema schemadoc = (XMLSchema)builder.build(url);      
process(args[1], schemadoc);
. . .
</pre>
<p><code>createURL()</code> is a helper method that constructs a URL from the file name specified on the command line.</p>
</div>
</li>
<li class="stepexpand"><span>Create a SAX parser (<code>SAXParser</code> object) to use for validation of the instance document. This code fragment from <code>saxxsd.java</code> passes the handles to the XML document and schema document to the <code>process()</code> method:</span>
<div>
<pre dir="ltr">process(args[1], schemadoc);...public static void process(String xmlURI, XMLSchema schemadoc)
throws Exception 
{
    SAXParser dp  = new SAXParser();
...
</pre></div>
</li>
<li class="stepexpand"><span>Configure the SAX parser. This code fragment sets the validation mode for the SAX parser object with the <code>XSDBuilder.setValidationMode()</code> method:</span>
<div>
<pre dir="ltr">dp.setPreserveWhitespace (true);
dp.setValidationMode(XMLParser.NONVALIDATING);
</pre></div>
</li>
<li class="stepexpand"><span>Create and configure a validator (<code>XSDValidator</code> object). This code fragment shows this technique:</span>
<div>
<pre dir="ltr">XMLError err;... err = new XMLError();
...
XSDValidator validator = new XSDValidator();
...
validator.setError(err);
</pre></div>
</li>
<li class="stepexpand"><span>Specify the XML schema to use for validation by invoking the <code>XSDBuilder.setXMLProperty()</code> method. The first argument is the name of the property, which is <code>fixedSchema</code>, and the second is the reference to the XML schema object. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">validator.setXMLProperty(XSDNode.FIXED_SCHEMA, schemadoc);
...
</pre></div>
</li>
<li class="stepexpand"><span>Register the validator as the SAX content handler for the parser. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">dp.setContentHandler(validator);
...
</pre></div>
</li>
<li class="stepexpand"><span>Validate the instance document against the XML schema by invoking the <code>SAXParser.parse()</code> method. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">dp.parse (url);
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19283"></a>
<div class="props_rev_3"><a id="GUID-38EF516D-CB44-4857-9EEF-17ECE082068E"></a>
<h3 id="ADXDK-GUID-38EF516D-CB44-4857-9EEF-17ECE082068E" class="sect3"><span class="enumeration_section">9.3.5</span> Validating XML from a DOM</h3>
<div>
<div class="section">
<p>The <code>$ORACLE_HOME/xdk/demo/java/schema/xsddom.java</code> program shows how to validate an instance document by get a DOM representation of the document and using an <code>XSDValidator</code> object to validate it.</p>
<p>The <code>xsddom.java</code> program follows these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Build an XML schema object from the user-specified XML schema document by invoking the <code>XSDBuilder.build()</code> method. This code fragment shows how to create the object:</span>
<div>
<pre dir="ltr">XSDBuilder builder = new XSDBuilder();
URL    url =  XMLUtil.createURL(args[0]);

XMLSchema schemadoc = (XMLSchema)builder.build(url);      
process(args[1], schemadoc);
</pre>
<p><code>createURL()</code> is a helper method that constructs a URL from the file name specified on the command line.</p>
</div>
</li>
<li class="stepexpand"><span>Create a DOM parser (<code>DOMParser</code> object) to use for validation of the instance document. This code fragment from <code>domxsd.java</code> passes the handles to the XML document and schema document to the <code>process()</code> method:</span>
<div>
<pre dir="ltr">process(args[1], schemadoc);...public static void process(String xmlURI, XMLSchema schemadoc)
throws Exception 
{
    DOMParser dp  = new DOMParser();
    . . .
</pre></div>
</li>
<li class="stepexpand"><span>Configure the DOM parser. This code fragment sets the validation mode for the parser object with the <code>DOMParser.setValidationMode()</code> method:</span>
<div>
<pre dir="ltr">dp.setPreserveWhitespace (true);
dp.setValidationMode(XMLParser.NONVALIDATING);
dp.setErrorStream (System.out);
</pre></div>
</li>
<li class="stepexpand"><span>Parse the instance document. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">dp.parse (url);
</pre></div>
</li>
<li class="stepexpand"><span>Get the DOM representation of the input document. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">XMLDocument doc = dp.getDocument();
</pre></div>
</li>
<li class="stepexpand"><span>Create and configure a validator (<code>XSDValidator</code> object). This code fragment shows this technique:</span>
<div>
<pre dir="ltr">XMLError err;... err = new XMLError();
...
XSDValidator validator = new XSDValidator();
...
validator.setError(err);
</pre></div>
</li>
<li class="stepexpand"><span>Specify the schema object to use for validation by invoking the <code>XSDBuilder.setXMLProperty()</code> method. The first argument is the name of the property, which in this example is <code>fixedSchema</code>, and the second is the reference to the schema object. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">validator.setXMLProperty(XSDNode.FIXED_SCHEMA, schemadoc);
. . .
</pre></div>
</li>
<li class="stepexpand"><span>Get the root element (<code>XMLElement</code>) of the DOM tree and validate. This code fragment shows this technique:</span>
<div>
<pre dir="ltr">XMLElement root = (XMLElement)doc.getDocumentElement();
XMLElement copy = (XMLElement)root.validateContent(validator, true);
copy.print(System.out);
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19284"></a>
<div class="props_rev_3"><a id="GUID-49EE75AF-E9AE-48A7-A331-7707A12A947C"></a>
<h3 id="ADXDK-GUID-49EE75AF-E9AE-48A7-A331-7707A12A947C" class="sect3"><span class="enumeration_section">9.3.6</span> Validating XML from Designed Types and Elements</h3>
<div>
<div class="section">
<p>The <code>$ORACLE_HOME/xdk/demo/java/schema/xsdproperty.java</code> program shows how to configure the XML Schema processor to validate an XML document based on a complex type or element declaration.</p>
<p>The <code>xsdproperty.java</code> program follows these steps:</p>
<ol>
<li>
<p>Create <code>String</code> objects for the instance document name, XML schema name, root node namespace, root node local name, and specification of element or complex type (&#34;true&#34; means the root node is an element declaration). This code fragment shows this technique:</p>
<pre dir="ltr">String xmlfile = args[0];
String xsdfile =  args[1];
...
String ns = args[2]; //namespace for the root node
String nm = args[3]; //root node&#39;s local name
String el = args[4]; //true if root node is element declaration, 
                     // otherwise, the root node is a complex type
</pre></li>
<li>
<p>Create an XSD builder and use it to create the schema object. This code fragment shows this technique:</p>
<pre dir="ltr">XSDBuilder builder = new XSDBuilder();
URL    url =  XMLUtil.createURL(xsdfile);       
XMLSchema  schema;
...
schema = (XMLSchema) builder.build(url);
</pre></li>
<li>
<p>Get the node. Invoke different methods depending on whether the node is an element declaration or a complex type:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the node is an element declaration, pass the local name and namespace to the <code>getElement()</code> method of the schema object.</p>
</li>
<li>
<p>If the node is an element declaration, pass the namespace, local name, and root complex type to the <code>getType()</code> method of the schema object.</p>
</li>
</ul>
<p><code>xsdproperty.java</code> uses this control structure:</p>
<pre dir="ltr">QxName qname = new QxName(ns, nm);
...
XSDNode nd;
...
if (el.equals(&#34;true&#34;))
{
  nd = schema.getElement(ns, nm);
  /* process ... */
}
else
{
  nd = schema.getType(ns, nm, XSDNode.TYPE);
  /* process ... */
}
</pre></li>
<li>
<p>After getting the node, create a new parser and set the schema to the parser to enable schema validation. This code fragment shows this technique:</p>
<pre dir="ltr">DOMParser dp  = new DOMParser();
URL       url = XMLUtil.createURL (xmlURI);
</pre></li>
<li>
<p>Set properties on the parser and then parse the URL. Invoke the <code>schemaValidatorProperty()</code> method:</p>
<ol>
<li>
<p>Set the root element or type property on the parser to a fully qualified name.</p>
<p>For a top-level element declaration, set the property name to <code>XSDNode.ROOT_ELEMENT</code> and the value to a <code>QName</code>, as showd by the <code>process1()</code> method.</p>
<p>For a top-level type definition, set the property name to <code>XSDNode.ROOT_TYPE</code> and the value to a <code>QName</code>, as showd by the <code>process2()</code> method.</p>
</li>
<li>
<p>Set the root node property on the parser to an element or complex type node.</p>
<p>For an element node, set the property name to <code>XSDNode.ROOT_NODE</code> and the value to an <code>XSDElement</code> node, as showd by the <code>process3()</code> method.</p>
<p>For a type node, set the property name to <code>XSDNode.ROOT_NODE</code> and the value to an <code>XSDComplexType</code> node, as showd by the <code>process3()</code> method.</p>
</li>
</ol>
<p>This code fragment shows the sequence of method invocation:</p>
<pre dir="ltr">if (el.equals(&#34;true&#34;))
{
   nd = schema.getElement(ns, nm);
   process1(xmlfile, schema, qname);
   process3(xmlfile, schema, nd);
}
else
{
   nd = schema.getType(ns, nm, XSDNode.TYPE);
   process2(xmlfile, schema, qname);
   process3(xmlfile, schema, nd);
}
</pre>
<p>The processing methods are implemented:</p>
<pre dir="ltr">  static void process1(String xmlURI, XMLSchema schema, QxName qname)
      throws Exception
  {
    /* create parser... */
    dp.setXMLSchema(schema);
    dp.setSchemaValidatorProperty(XSDNode.ROOT_ELEMENT, qname);
    dp.setPreserveWhitespace (true);
    dp.setErrorStream (System.out);
    dp.parse (url);
    ...
  }
                                                                                             
  static void process2(String xmlURI, XMLSchema schema, QxName qname)
      throws Exception
  {
      /* create parser... */                                                                                        
    dp.setXMLSchema(schema);
    dp.setSchemaValidatorProperty(XSDNode.ROOT_TYPE, qname);
    dp.setPreserveWhitespace (true);
    dp.setErrorStream (System.out);
    dp.parse (url);
    ...
  }
                                                                                             
  static void process3(String xmlURI, XMLSchema schema, XSDNode node)
      throws Exception
  {
      /* create parser... */
                                                                                              
    dp.setXMLSchema(schema);
    dp.setSchemaValidatorProperty(XSDNode.ROOT_NODE, node);
    dp.setPreserveWhitespace (true);
    dp.setErrorStream (System.out);
    dp.parse (url);
    ...
  }
</pre></li>
</ol>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADXDK996"></a><a id="ADXDK19286"></a>
<div class="props_rev_3"><a id="GUID-654F9D12-EC32-464B-9465-06ECB9213829"></a>
<h2 id="ADXDK-GUID-654F9D12-EC32-464B-9465-06ECB9213829" class="sect2"><span class="enumeration_section">9.4</span> Tips and Techniques for Programming with XML Schemas</h2>
<div>
<div class="section">
<p class="subhead2">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_j_sproc.htm#GUID-FB1780C6-0CD0-4393-AEDD-0294701BEE9D">Overriding the Schema Location with an Entity Resolver</a></p>
</li>
<li>
<p><a href="adx_j_sproc.htm#GUID-BC0B8A74-265E-4EBF-B012-923DA614F744">Converting DTDs to XML Schemas</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDK19287"></a>
<div class="props_rev_3"><a id="GUID-FB1780C6-0CD0-4393-AEDD-0294701BEE9D"></a>
<h3 id="ADXDK-GUID-FB1780C6-0CD0-4393-AEDD-0294701BEE9D" class="sect3"><span class="enumeration_section">9.4.1</span> Overriding the Schema Location with an Entity Resolver</h3>
<div>
<div class="section">
<p>When the <code>XSDBuilder</code> builds a schema, it might have to include or import other schemas specified as URLs in the <code>schemaLocation</code> attribute. The <code>xsdent.java</code> demo described in <a href="adx_j_sproc.htm#GUID-1794B57C-BD9A-4322-B136-B07B950EC479__CIHIEEDI" title="File and Description are the Columns.">Table 9-3</a> shows this case. The document element in <code>xsdent.xml</code> file contains this attribute:</p>
<pre dir="ltr">xsi:schemaLocation =  &#34;http://www.example.com/BookCatalogue
                       xsdent.xsd&#34;&gt;
</pre>
<p>The <code>xsdent.xsd</code> document contains these elements:</p>
<pre dir="ltr">&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
               targetNamespace=&#34;http://www.example.com/BookCatalogue&#34;
               xmlns:catd = &#34;http://www.example.com/Digest&#34;
               xmlns:cat  = &#34;http://www.example.com/BookCatalogue&#34;
               elementFormDefault=&#34;qualified&#34;&gt;
&lt;import namespace = &#34;http://www.example.com/Digest&#34;
        schemaLocation = &#34;xsdent-1.xsd&#34; /&gt;
</pre>
<p>In some situations, you might want to override the schema locations specified in <code>&lt;import&gt;</code> and supply the builder with the required schema documents. For example, you might have downloaded the schemas documents from external web sites and stored them in a database. In such situations, you can set an entity resolver in the <code>XSDBuilder</code>. <code>XSDBuilder</code> passes the schema location to the resolver, which returns an <code>InputStream</code>, <code>Reader</code>, or <code>URL</code> as an InputSource. The builder can read the schema documents from the <code>InputSource</code>.</p>
<p>The <code>xsdent.java</code> program shows how you can override the schema location with an entity resolver. You must implement the <code>EntityResolver</code> interface, instantiate the entity resolver, and set it in the XML schema builder. In the demo code, <code>sampleEntityResolver1</code> returns <code>InputSource</code> as an <code>InputStream</code> whereas <code>sampleEntityResolver2</code> returns <code>InputSource</code> as a <code>URL</code>.</p>
<p>Follow these basic steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a new XML schema builder:</span>
<div>
<pre dir="ltr">XSDBuilder builder = new XSDBuilder(); 
   
</pre></div>
</li>
<li class="stepexpand"><span>Set the builder to your entity resolver. An entity resolver is a class that implements the <code>EntityResolver</code> interface. The purpose of the resolver is to enable the XML reader to intercept any external entities before including them. This code fragment creates an entity resolver and sets it in the builder:</span>
<div>
<pre dir="ltr">builder.setEntityResolver(new sampleEntityResolver1());
</pre>
<p>The <code>sampleEntityResolver1</code> class implements the <code>resolveEntity()</code> method. You can use this method to redirect external system identifiers to local URIs. The source code is:</p>
<pre dir="ltr">class sampleEntityResolver1 implements EntityResolver
{
   public InputSource resolveEntity (String targetNS,  String systemId)
   throws SAXException, IOException
   {
      // perform any validation check if needed based on targetNS &amp; systemId 
      InputSource mySource = null;
      URL u = XMLUtil.createURL(systemId); 
      // Create input source with InputStream as input
      mySource = new InputSource(u.openStream());
      mySource.setSystemId(systemId);
      return mySource;
   }
}
</pre>
<p>The <code>sampleEntityResolver1</code> class initializes the <code>InputSource</code> with a stream.</p>
</div>
</li>
<li class="stepexpand"><span>Build the XML schema object. This code shows this technique:</span>
<div>
<pre dir="ltr">schemadoc = builder.build(url);
</pre></div>
</li>
<li class="stepexpand"><span>Validate the instance document against the XML schema. The program executes this statement:</span>
<div>
<pre dir="ltr">process(xmlfile, schemadoc);
</pre>
<p>The <code>process()</code> method creates a DOM parser, configures it, and invokes the <code>parse()</code> method. The method is implemented:</p>
<pre dir="ltr">public static void process(String xmlURI, Object schemadoc)
    throws Exception
{
  DOMParser dp  = new DOMParser();
  URL       url = XMLUtil.createURL (xmlURI);
 
  dp.setXMLSchema(schemadoc);
  dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
  dp.setPreserveWhitespace (true);
  dp.setErrorStream (System.out);
  try {
     dp.parse (url);
     ...
}
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADXDK19288"></a>
<div class="props_rev_3"><a id="GUID-BC0B8A74-265E-4EBF-B012-923DA614F744"></a>
<h3 id="ADXDK-GUID-BC0B8A74-265E-4EBF-B012-923DA614F744" class="sect3"><span class="enumeration_section">9.4.2</span> Converting DTDs to XML Schemas</h3>
<div>
<div class="section">
<p>Because of the power and flexibility of the XML Schema language, you may want to convert your existing DTDs to XML schema documents. You can use XDK to perform this transformation.</p>
<p>The <code>$ORACLE_HOME/xdk/demo/java/schema/DTD2Schema.java</code> program shows how to convert a DTD. You can test the program:</p>
<pre dir="ltr">java DTD2Schema dtd2schema.dtd dtd2schema.xml
</pre>
<p>Follow these basic steps to convert a DTD to an XML schema document:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Parse the DTD with the <code>DOMParser.parseDTD()</code> method. This code fragment from <code>DTD2Schema.java</code> shows how to create the DTD object:</span>
<div>
<pre dir="ltr">XSDBuilder builder = new XSDBuilder(); 
URL dtdURL = createURL(args[0]);
DTD dtd = getDTD(dtdURL, &#34;abc&#34;);
   
</pre>
<p>The <code>getDTD()</code> method is implemented:</p>
<pre dir="ltr">private static DTD getDTD(URL dtdURL, String rootName)
   throws Exception
{
   DOMParser parser = new DOMParser();
   DTD dtd;
   parser.setValidationMode(true);
   parser.setErrorStream(System.out);
   parser.showWarnings(true);
   parser.parseDTD(dtdURL, rootName);
   dtd = (DTD)parser.getDoctype();
   return dtd;
}
</pre></div>
</li>
<li class="stepexpand"><span>Convert the DTD to an XML schema DOM tree with the <code>DTD.convertDTD2Sdhema()</code> method. This code fragment from <code>DTD2Schema.java</code> shows this technique:</span>
<div>
<pre dir="ltr">XMLDocument dtddoc = dtd.convertDTD2Schema();
</pre></div>
</li>
<li class="stepexpand"><span>Write the XML schema DOM tree to an output stream with the <code>XMLDocument.print()</code> method. This code fragment from <code>DTD2Schema.java</code> shows this technique:</span>
<div>
<pre dir="ltr">FileOutputStream fos = new FileOutputStream(&#34;dtd2schema.xsd.out&#34;);
dtddoc.print(fos);
</pre></div>
</li>
<li class="stepexpand"><span>Create an XML schema object from the schema DOM tree with the <code>XSDBuilder.build()</code> method. This code fragment from <code>DTD2Schema.java</code> shows this technique:</span>
<div>
<pre dir="ltr">XMLSchema schemadoc = (XMLSchema)builder.build(dtddoc, null);
</pre></div>
</li>
<li class="stepexpand"><span>Validate an instance document against the XML schema with the <code>DOMParser.parse()</code> method. This code fragment from <code>DTD2Schema.java</code> shows this technique:</span>
<div>
<pre dir="ltr">validate(args[1], schemadoc);
</pre>
<p>The <code>validate()</code> method is implemented:</p>
<pre dir="ltr">DOMParser dp  = new DOMParser();
URL       url = createURL (xmlURI); 
dp.setXMLSchema(schemadoc);
dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
dp.setPreserveWhitespace (true);
dp.setErrorStream (System.out);
try
{
   System.out.println(&#34;Parsing &#34;+xmlURI);
   dp.parse (url);
   System.out.println(&#34;The input file &lt;&#34;+xmlURI+&#34;&gt; parsed without errors&#34;);
}
...
</pre></div>
</li>
</ol>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_j_xqjxdb.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_j_jaxb.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>