<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1642"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20XML%20Schema%20Processor%20for%20C"></a><title>Using the XML Schema Processor for C</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="XML schema for C, sample programs, C components, demos, samples, streaming validator, transparent mode, opaque mode"/>
<meta name="dcterms.created" content="2016-12-08T13:58:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML Developer&#39;s Kit Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E54405-06"/>
<meta name="dcterms.isVersionOf" content="ADXDK"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adx_c_xmlbin.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adx_c_diff.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E54405-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-E200D27B-EC8D-44D9-A54D-6460D52CD70E"></a> <span id="PAGE" style="display:none;">31/50</span> <!-- End Header -->
<a id="ADXDK1040"></a><a id="ADXDK1600"></a>
<h1 id="ADXDK-GUID-E200D27B-EC8D-44D9-A54D-6460D52CD70E" class="sect1"><span class="enumeration_chapter">22</span> Using the XML Schema Processor for C</h1>
<div>
<p>This chapter explains how to use the Extensible Markup Language (XML) schema processor for C.</p>
<div class="section">
<p class="subhead1">Topics:</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="adx_c_sproc.htm#GUID-17F16A07-60E7-4598-836C-EBF31D9C69B9">Oracle XML Schema Processor for C</a></p>
</li>
<li>
<p><a href="adx_c_sproc.htm#GUID-867DB3AD-DD1B-4115-9825-9FBD1D00F2DB">Using the C XML Schema Processor Command-Line Utility</a></p>
</li>
<li>
<p><a href="adx_c_sproc.htm#GUID-8A27497A-0146-44C5-83A6-33090F4D1FC3">XML Schema Processor for C Usage Diagram</a></p>
</li>
<li>
<p><a href="adx_c_sproc.htm#GUID-5681C905-D876-412A-A88A-6CAD3A3FD3C3">How to Run XML Schema for C Sample Programs</a></p>
</li>
<li>
<p><a href="adx_c_sproc.htm#GUID-3CB7FD0A-E148-48C9-882F-BF5F3E51D1AB">What Is the Streaming Validator?</a></p>
</li>
</ul>
<div class="infobox-note" id="GUID-E200D27B-EC8D-44D9-A54D-6460D52CD70E__GUID-CE76921C-B1E1-4506-8325-2BDAB58C145B">
<p class="notep1">Note:</p>
<p>Use the unified C application programming interface (API) for Oracle XML Developer&#39;s Kit (XDK) and Oracle XML DB applications. Older, nonunified C functions are deprecated and supported only for backward compatibility. They will be removed in a future release.</p>
<p>The unified C API is described in <span class="q">&#34;<a href="adx_c_gs.htm#GUID-181C9561-3CA8-4FBB-A269-AEE8C4AA60D9">Overview of the Unified C API</a>.&#34;</span></p>
</div>
</div>
<a id="ADXDK19805"></a>
<div class="props_rev_3"><a id="GUID-17F16A07-60E7-4598-836C-EBF31D9C69B9"></a>
<h2 id="ADXDK-GUID-17F16A07-60E7-4598-836C-EBF31D9C69B9" class="sect2"><span class="enumeration_section">22.1</span> Oracle XML Schema Processor for C</h2>
<div>
<p>The XML Schema processor for C is a companion component to the Extensible Markup Language (XML) parser for C that allows support for simple and complex data types in XML applications.</p>
<p>The XML Schema processor for C supports the World Wide Web Consortium (W3C) XML Schema Recommendation. This makes writing custom applications that process XML documents straightforward, and means that a standards-compliant XML Schema processor is part of XDK on every operating system where Oracle Database is ported.</p>
<p>The XML Schema processor enables validation of XML and retrieval of metadata. It can be called by itself or through the XML Parser for C.</p>
<div class="infoboxnotealso" id="GUID-17F16A07-60E7-4598-836C-EBF31D9C69B9__GUID-85901773-6389-45C6-9228-733F665766ED">
<p class="notep1">See Also:</p>
<p><a href="adx_j_parser.htm#GUID-33E0EA2B-A08A-462E-86B4-3F944409663D">XML Parsing for Java</a>, for more information about XML Schema and why you would want to use XML Schema.</p>
</div>
</div>
<a id="ADXDK19806"></a>
<div class="props_rev_3"><a id="GUID-ED2D65C0-E980-4F0D-B53B-C0C9324E644D"></a>
<h3 id="ADXDK-GUID-ED2D65C0-E980-4F0D-B53B-C0C9324E644D" class="sect3"><span class="enumeration_section">22.1.1</span> Oracle XML Schema for C Features</h3>
<div>
<p>XML Schema processor for C has these features:</p>
<ul style="list-style-type: disc;">
<li>
<p>Supports simple and complex types</p>
</li>
<li>
<p>Built on XML parser for C</p>
</li>
<li>
<p>Supports the W3C XML Schema Recommendation</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-ED2D65C0-E980-4F0D-B53B-C0C9324E644D__GUID-5B9AE439-947F-4496-899A-DE6572C614D9">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink CAXML05000" target="_blank" href="../CAXML/schema.htm#CAXML05000"><span class="italic">Oracle Database XML C API Reference</span></a> &#34;Schema APIs for C&#34;</p>
</li>
<li>
<p><code>$ORACLE_HOME/xdk/demo/c/schema/</code> - sample code</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDK19807"></a>
<div class="props_rev_3"><a id="GUID-D897A10A-51B1-4053-8502-EE35E456342F"></a>
<h3 id="ADXDK-GUID-D897A10A-51B1-4053-8502-EE35E456342F" class="sect3"><span class="enumeration_section">22.1.2</span> Standards Conformance</h3>
<div>
<p>The Schema Processor conforms with these standards:</p>
<ul style="list-style-type: disc;">
<li>
<p>W3C recommendation for Extensible Markup Language (XML) 1.0</p>
</li>
<li>
<p>W3C recommendation for Document Object Model (DOM) Level 1.0</p>
</li>
<li>
<p>W3C recommendation for Namespaces in XML</p>
</li>
<li>
<p>W3C recommendation for XML Schema</p>
</li>
</ul>
</div>
</div>
<a id="ADXDK19809"></a><a id="ADXDK19810"></a><a id="ADXDK19808"></a>
<div class="props_rev_3"><a id="GUID-4A027870-C565-4E37-A0D2-42B1C7DDBE81"></a>
<h3 id="ADXDK-GUID-4A027870-C565-4E37-A0D2-42B1C7DDBE81" class="sect3"><span class="enumeration_section">22.1.3</span> XML Schema Processor for C: Supplied Software</h3>
<div>
<p><a href="adx_c_sproc.htm#GUID-4A027870-C565-4E37-A0D2-42B1C7DDBE81__g1010085" title="Directory and Files, and Description are the columns.">Table 22-1</a> lists the supplied files and directories for this release.</p>
<div class="tblformal" id="GUID-4A027870-C565-4E37-A0D2-42B1C7DDBE81__g1010085">
<p class="titleintable">Table 22-1 XML Schema Processor for C: Supplied Files in $ORACLE_HOME</p>
<table class="cellalignment650" title="XML Schema Processor for C: Supplied Files in $ORACLE_HOME" summary="Directory and Files, and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d108166e492">Directory and Files</th>
<th class="cellalignment682" id="d108166e495">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e500" headers="d108166e492">
<p><code>bin</code></p>
</td>
<td class="cellalignment684" headers="d108166e500 d108166e495">
<p>schema processor executable, <code>schema</code></p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e511" headers="d108166e492">
<p><code>lib</code></p>
</td>
<td class="cellalignment684" headers="d108166e511 d108166e495">
<p>XML/XSL/Schema &amp; support libraries</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e519" headers="d108166e492">
<p><code>nls/data</code></p>
</td>
<td class="cellalignment684" headers="d108166e519 d108166e495">
<p>Globalization Support data files</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e527" headers="d108166e492">
<p><code>xdk/demo/c/schema</code></p>
</td>
<td class="cellalignment684" headers="d108166e527 d108166e495">
<p>example usage of the Schema processor</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e535" headers="d108166e492">
<p><code>xdk/include</code></p>
</td>
<td class="cellalignment684" headers="d108166e535 d108166e495">
<p>header files</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e543" headers="d108166e492">
<p><code>xdk/mesg</code></p>
</td>
<td class="cellalignment684" headers="d108166e543 d108166e495">
<p>error message files</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e551" headers="d108166e492">
<p><code>xdk/readme.html</code></p>
</td>
<td class="cellalignment684" headers="d108166e551 d108166e495">
<p>introductory file</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="adx_c_sproc.htm#GUID-4A027870-C565-4E37-A0D2-42B1C7DDBE81__g1010119" title="Included Library and Description are the columns.">Table 22-2</a> lists the included libraries in directory <code>lib</code>.</p>
<div class="tblformal" id="GUID-4A027870-C565-4E37-A0D2-42B1C7DDBE81__g1010119">
<p class="titleintable">Table 22-2 XML Schema Processor for C: Supplied Libraries</p>
<table class="cellalignment650" title="XML Schema Processor for C: Supplied Libraries " summary="Included Library and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d108166e578">Included Library</th>
<th class="cellalignment682" id="d108166e581">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e586" headers="d108166e578">
<p><code>libxml10.a</code></p>
</td>
<td class="cellalignment684" headers="d108166e586 d108166e581">
<p>XML parser, Extensible Stylesheet Language Transformation (XSLT) processor, XML Schema processor</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e594" headers="d108166e578">
<p><code>libcore10.a</code></p>
</td>
<td class="cellalignment684" headers="d108166e594 d108166e581">
<p>Common Oracle Runtime Environment (CORE) functions</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e602" headers="d108166e578">
<p><code>libnls10.a</code></p>
</td>
<td class="cellalignment684" headers="d108166e602 d108166e581">
<p>Globalization Support</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
<a id="ADXDK19811"></a>
<div class="props_rev_3"><a id="GUID-867DB3AD-DD1B-4115-9825-9FBD1D00F2DB"></a>
<h2 id="ADXDK-GUID-867DB3AD-DD1B-4115-9825-9FBD1D00F2DB" class="sect2"><span class="enumeration_section">22.2</span> Using the C XML Schema Processor Command-Line Utility</h2>
<div>
<div class="section">
<p>XML Schema processor for C can be called as an executable by invoking <code>bin/schema</code> in the install area. This takes two arguments:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>XML instance document</p>
</li>
<li>
<p>Optionally, a default schema</p>
</li>
</ul>
<p>The XML Schema processor for C can also be invoked by writing code using the supplied APIs. The code must be compiled using the headers in the <code>include</code> subdirectory and linked against the libraries in the <code>lib</code> subdirectory. See <code>Makefile</code> in the <code>xdk/demo/c/schema</code> subdirectory for details on how to build your program.</p>
<p>Error message files in different languages are provided in the <code>mesg/</code> subdirectory.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDK19813"></a><a id="ADXDK19812"></a>
<div class="props_rev_3"><a id="GUID-8A27497A-0146-44C5-83A6-33090F4D1FC3"></a>
<h2 id="ADXDK-GUID-8A27497A-0146-44C5-83A6-33090F4D1FC3" class="sect2"><span class="enumeration_section">22.3</span> XML Schema Processor for C Usage Diagram</h2>
<div>
<p><a href="adx_c_sproc.htm#GUID-8A27497A-0146-44C5-83A6-33090F4D1FC3__i1008723">Figure 22-1</a> describes the calling sequence for the XML Schema processor for C, which is:</p>
<ol>
<li>
<p>The initialize call is invoked once at the beginning of a session; it returns a schema context which is used throughout the session.</p>
</li>
<li>
<p>Schema documents to be used in the session are loaded in advance.</p>
</li>
<li>
<p>The instance document to be validated is first parsed with the XML parser.</p>
</li>
<li>
<p>The top of the XML element subtree for the instance is then passed to the schema validate function.</p>
</li>
<li>
<p>If no explicit schema is defined in the instance document, any loaded schemas are used.</p>
</li>
<li>
<p>More documents can then be validated using the same schema context.</p>
</li>
<li>
<p>When the session is over, the Schema tear-down function is called, which releases all memory allocated for the loaded schemas.</p>
</li>
</ol>
<div class="figure" id="GUID-8A27497A-0146-44C5-83A6-33090F4D1FC3__i1008723">
<p class="titleinfigure">Figure 22-1 XML Schema Processor for C Usage Diagram</p>
<img width="548" height="447" src="img/GUID-E155155A-7E7D-4748-A5D0-5F8F661F1960-default.gif" alt="Description of Figure 22-1 follows" title="Description of Figure 22-1 follows"/><br/>
<a href="img_text/GUID-E155155A-7E7D-4748-A5D0-5F8F661F1960-print.htm">Description of &#34;Figure 22-1 XML Schema Processor for C Usage Diagram&#34;</a></div>
<!-- class="figure" --></div>
</div>
<a id="ADXDK19815"></a><a id="ADXDK19814"></a>
<div class="props_rev_3"><a id="GUID-5681C905-D876-412A-A88A-6CAD3A3FD3C3"></a>
<h2 id="ADXDK-GUID-5681C905-D876-412A-A88A-6CAD3A3FD3C3" class="sect2"><span class="enumeration_section">22.4</span> How to Run XML Schema for C Sample Programs</h2>
<div>
<p>The directory <code>xdk/demo/c/schema</code> contains sample XML Schema applications that show how to use Oracle XML Schema processor with its API. <a href="adx_c_sproc.htm#GUID-5681C905-D876-412A-A88A-6CAD3A3FD3C3__g1010135" title="Sample File and Description are the columns.">Table 22-3</a> lists the provided sample files.</p>
<div class="tblformal" id="GUID-5681C905-D876-412A-A88A-6CAD3A3FD3C3__g1010135">
<p class="titleintable">Table 22-3 XML Schema for C Samples Provided</p>
<table class="cellalignment650" title="XML Schema for C Samples Provided " summary="Sample File and Description are the columns.">
<thead>
<tr class="cellalignment644">
<th class="cellalignment681" id="d108166e945">Sample File</th>
<th class="cellalignment682" id="d108166e948">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e953" headers="d108166e945">
<p><code>Makefile</code></p>
</td>
<td class="cellalignment684" headers="d108166e953 d108166e948">
<p>Makefile to build the sample programs and run them, verifying correct output.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e961" headers="d108166e945">
<p><code>xsdtest.c</code></p>
</td>
<td class="cellalignment684" headers="d108166e961 d108166e948">
<p>Program which invokes the XML Schema for C API</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e969" headers="d108166e945">
<p><code>car.{xsd,xml,std}</code></p>
</td>
<td class="cellalignment684" headers="d108166e969 d108166e948">
<p>Sample schema, instance document, and expected output respectively, after running <code>xsdtest</code> on them.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e980" headers="d108166e945">
<p><code>aq.{xsd,xml,std}</code></p>
</td>
<td class="cellalignment684" headers="d108166e980 d108166e948">
<p>Second sample schema, instance document, and expected output respectively, after running <code>xsdtest</code> on them.</p>
</td>
</tr>
<tr class="cellalignment644">
<td class="cellalignment683" id="d108166e991" headers="d108166e945">
<p><code>pub.{xsd,xml,std}</code></p>
</td>
<td class="cellalignment684" headers="d108166e991 d108166e948">
<p>Third sample schema, instance document, and expected output respectively, after running <code>xsdtest</code> on them.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>To build the sample programs, run <code>make</code>.</p>
<p>To build the programs and run them, comparing the actual output to expected output:</p>
<pre dir="ltr">make sure
</pre></div>
</div>
<a id="ADXDK19004"></a>
<div class="props_rev_3"><a id="GUID-3CB7FD0A-E148-48C9-882F-BF5F3E51D1AB"></a>
<h2 id="ADXDK-GUID-3CB7FD0A-E148-48C9-882F-BF5F3E51D1AB" class="sect2"><span class="enumeration_section">22.5</span> What Is the Streaming Validator?</h2>
<div>
<p>The streaming validator was introduced in Oracle Database 11<span class="italic">g</span> Release 1 (11.1). It uses XML Events, which is a representation of an XML document that is similar to Simple API for XML (SAX) Events. XML events has a start tag, end tag, and comment. The producer drives the SAX events and the consumer drives the XML events. The streaming validator shares software with the older schema validator and derives most functionality from it. Memory overhead is less than for the DOM representation used in the older validator. Only one pass is made over the document.</p>
<p>There are two modes of streaming validation:</p>
<ul style="list-style-type: disc;">
<li>
<p>Transparent mode&mdash;events are returned to the application.</p>
</li>
<li>
<p>Opaque mode&mdash;events are not returned to the application but an error indicating success or failure of the document validation process is returned.</p>
</li>
</ul>
<p>Before document validation, the regular validation context must be created, and the relevant schema must be loaded using this context. Then XML event context for pull parser (or for another event producer) must be created. This event context is then given to the streaming validator, so that it can request events from the producer.</p>
<p>Passing in a schema DOM to the <code>XmlSchemaLoad</code> API is also supported.</p>
</div>
<a id="ADXDK19816"></a>
<div class="props_rev_3"><a id="GUID-9AA4F9D3-1898-4D08-BEF9-9AEA7EED6221"></a>
<h3 id="ADXDK-GUID-9AA4F9D3-1898-4D08-BEF9-9AEA7EED6221" class="sect3"><span class="enumeration_section">22.5.1</span> Using Transparent Mode</h3>
<div>
<div class="section">
<p>An application starts by invoking <code>XmlEvCreateSVCtx(</code>). This invocation creates and returns an event context of type <code>xmlctx</code>, which must be passed on all subsequent invoking the streaming validator. The event context created must be terminated by invoking <code>XmlEvDestroyCtx()</code>.</p>
<p>After creation of the event context, the application repeatedly advances validation to the next event by invoking <code>XmlEvNext()</code>, which returns the type of the next event. Additional API interfaces allow the application to retrieve information relevant to the last event.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDK19817"></a>
<div class="props_rev_3"><a id="GUID-A6EF9125-DECE-4C6F-8038-C8D4C355D20B"></a>
<h4 id="ADXDK-GUID-A6EF9125-DECE-4C6F-8038-C8D4C355D20B" class="sect4"><span class="enumeration_section">22.5.1.1</span> Error Handling in Transparent Mode</h4>
<div>
<p>There is no notion of a valid event. Validity is the property of a document and not of the individual items and events of the document. The errors are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>XML_EVENT_FATAL_ERROR</code>&mdash;When the producer of XML events reports this error, the streaming validator returns this event back to the application and stops the validation process.</p>
</li>
<li>
<p><code>XML_EVENT_ERROR</code>&mdash;The streaming validator returns this event to the application when a validation error occurs. The application can then invoke <code>XmlEvGetError()</code> to get more information about the error.</p>
</li>
</ul>
<p>If the application does not receive any <code>XML_EVENT_ERROR</code> or <code>XML_EVENT_FATAL_ERROR</code> events, the document is valid. Therefore, the application must handle these events and not ignore them.</p>
<p>These errors are not cached and the associated information is not available for later retrieval.</p>
</div>
</div>
<a id="ADXDK19819"></a><a id="ADXDK19818"></a>
<div class="props_rev_3"><a id="GUID-B26DBA74-92F6-4CA0-8160-CAD399B810D5"></a>
<h4 id="ADXDK-GUID-B26DBA74-92F6-4CA0-8160-CAD399B810D5" class="sect4"><span class="enumeration_section">22.5.1.2</span> Streaming Validator Example</h4>
<div>
<div class="section">
<p>Here is an example in transparent mode:</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B26DBA74-92F6-4CA0-8160-CAD399B810D5__GUID-80A7CED4-CE51-4696-A7E5-E353149F8647">
<p class="titleinexample">Example 22-1 Streaming Validator in Transparent Mode</p>
<pre dir="ltr"># include &#34;xmlev.h&#34;
...
xmlevctx *ppevtcx, *svevctx;
xmlctx *xctx
xsdctx *sctx;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) &#34;test&#34;)))
    printf(&#34;Failed to create XML context, error %u\n&#34;,
                        (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
    printf(&#34;Failed to create schema context, error %u\n&#34;,
                        (unsigned) xerr);
 
...
If (xerr = XmlSchemaLoad(sctx, &#34;my_schema.xsd&#34;, NULL))
    printf(&#34;Failed to load schema, error %u\n&#34;,
                        (unsigned) xerr);

if(!(ppevctx = XmlEvCreatePPCtx(xctx, &amp;xerr, NULL)))
   printf(&#34;Failed to create EVENT context, error %u\n&#34;,
                        (unsigned) xerr);
 
if(xerr = XmlEvLoadPPDoc(xctx, ppevctx, &#34;file&#34;, &#34;test.xml&#34;, 0, NULL))
   printf(&#34;Failed to load Document, error %u\n&#34;,
                        (unsigned) xerr);
 
...
If(!(svevctx = XmlEvCreateSVCtx(xctx, sctx, ppevctx, &amp;xerr)))
   printf(&#34;Failed to create SVcontext, error %u\n&#34;,
                        (unsigned) xerr);
...
for(;;)
{
   xmlevtype cur_event;
   cur_event = XmlEvNext(svevctx);
   switch(cur_event)
    {
        case XML_EVENT_FATAL_ERROR:
           printf(&#34;FATAL ERROR&#34;);
           /* error processing goes here */
           return;
        case XML_EVENT_ERROR:
           XmlEvGetError(svevctx, oratext *msg);
           printf(&#34;Validation Failed, Error %s\n&#34;, msg);
           break;
        case XML_EVENT_START_ELEMENT:
           printf(&#34;&lt;%s&gt;&#34;, XmlEvGetName(svevctx));
           break;
...
        case XML_EVENT_END_DOCUMENT:
           printf(&#34;END DOCUMENT&#34;);
           return;
    }
}
...
XmlEvDestroySVCtx(svevctx); 
XmlSchemaDestroy(sctx);
XmlEvDestroyCtx(ppevctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19820"></a>
<div class="props_rev_3"><a id="GUID-6FA49C7C-AF47-41E7-A408-671A56B5526F"></a>
<h3 id="ADXDK-GUID-6FA49C7C-AF47-41E7-A408-671A56B5526F" class="sect3"><span class="enumeration_section">22.5.2</span> Using Opaque Mode</h3>
<div>
<div class="section">
<p>In opaque mode, the streaming validator reads the instance document to be validated as a sequence of events from the producer, but does not pass the events to the application (consumer). It returns <code>XMLERR_OK</code> on success and an error number on failure.</p>
<p>After the schema has been loaded and the XML Events context has been initialized, the application can validate the document in this mode by invoking <code>XmlEvSchemaValidate()</code>. The signature of this function takes a pointer to the events context. The declaration is:</p>
<pre dir="ltr">xmlerr XmlEvSchemaValidate(xmlctx *xctx, xsdctx *sctx, xmlevctx *evctx, 
       oratext **errmsg);
/* Returns (xmlerr), the error code */
</pre></div>
<!-- class="section" --></div>
<a id="ADXDK19821"></a>
<div class="props_rev_3"><a id="GUID-4DE7B524-672B-4E1A-93DA-0AC889047AE4"></a>
<h4 id="ADXDK-GUID-4DE7B524-672B-4E1A-93DA-0AC889047AE4" class="sect4"><span class="enumeration_section">22.5.2.1</span> Error Handling in Opaque Mode</h4>
<div>
<p>When the streaming validator encounters an error, <code>XmlEvSchemaValidate()</code> returns an error number. This could be because of a parse error or a validation error. The application can then use the existing <code>XmlEvGetError</code> APIs to get the error message. The error message is parameterized and typically has all the errors leading up to the point where the streaming validator terminated.</p>
</div>
</div>
<a id="ADXDK19823"></a><a id="ADXDK19822"></a>
<div class="props_rev_3"><a id="GUID-A45759C8-8044-42C8-B678-7E4CAE92EF9D"></a>
<h4 id="ADXDK-GUID-A45759C8-8044-42C8-B678-7E4CAE92EF9D" class="sect4"><span class="enumeration_section">22.5.2.2</span> Example of Opaque Mode Application</h4>
<div>
<div class="section">
<p>Here is an example in opaque mode:</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-A45759C8-8044-42C8-B678-7E4CAE92EF9D__GUID-3A6EE0EF-5868-457F-9146-E98A1BA9D6F2">
<p class="titleinexample">Example 22-2 Example of Streaming Validator in Opaque Mode</p>
<pre dir="ltr"># include &#34;xmlev.h&#34;
...
xmlevctx *ppevtcx;
xmlctx   *xctx;
xsdctx   *sctx;
oratext  **errmsg;
xmlerr   xerr;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) &#34;test&#34;))
      printf(&#34;Failed to create XML context, error %u\n&#34;, (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
      printf(&#34;Failed to create schema context, error %u\n&#34;, (unsigned) xerr);
 
...
if (xerr = XmlSchemaLoad(sctx, &#34;my_schema.xsd&#34;, NULL))
    printf(&#34;Failed to load schema, error %u\n&#34;, (unsigned) xerr);
 
if(!(ppevctx = XmlEvCreatePPCtx(xctx, &amp;xerr, NULL)))
     printf(&#34;Failed to create EVENT context, error %u\n&#34;, (unsigned) xerr);
 
if(xerr = XmlEvLoadPPDoc(xctx, ppevctx, &#34;file&#34;, &#34;test.xml&#34;, 0, NULL))
   printf(&#34;Failed to load Document, error %u\n&#34;, (unsigned) xerr);

if((xerr = XmlEvSchemaValidate(xctx, sctx, ppevctx, errmsg)))
{
  printf(&#34;Validation Failed, Error: %s\n&#34;, errmsg);
}
...
XmlSchemaDestroy(sctx);
XmlEvDestroyCtx(ppevctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDK19825"></a><a id="ADXDK19824"></a>
<div class="props_rev_3"><a id="GUID-0FF5701E-1349-4514-B6B2-CAA69956BC80"></a>
<h3 id="ADXDK-GUID-0FF5701E-1349-4514-B6B2-CAA69956BC80" class="sect3"><span class="enumeration_section">22.5.3</span> Using Function XmlSchemaLoad() With an Existing DOM</h3>
<div>
<div class="section">
<p>Function <code>XmlSchemaLoad()</code> accepts two fixed arguments and a set of variable properties. The first argument is the schema context; the second is the URL location of the schema document.</p>
<p>Starting with Oracle Database 11<span class="italic">g</span> Release 1 (11.1), you can use property <code>schema_dom_callback</code> to provide access to the schema DOM given a URL. The property is a callback function provided by the application. If supplied, the schema load function uses this callback to access the DOM for the main schema and to access any included, imported, or redefined schemas.</p>
<p>The callback signature is as follows:</p>
<pre dir="ltr">typedef  xmldocnode* (*xmlsch_dom_callback) (xmlctx *xctx, oratext *uri, 
         xmlerr *xerr);
</pre>
<p>The callback accepts a URI (the schema load function passes in the URI of the document desired) and returns the document node. <a href="adx_c_sproc.htm#GUID-0FF5701E-1349-4514-B6B2-CAA69956BC80__GUID-D3201FCC-6377-446E-A325-18C33B904837">Example 22-3</a> illustrates this.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-0FF5701E-1349-4514-B6B2-CAA69956BC80__GUID-D3201FCC-6377-446E-A325-18C33B904837">
<p class="titleinexample">Example 22-3 XmlSchemaLoad() Example</p>
<pre dir="ltr"># include &#34;xmlev.h&#34;
...
xmlctx *xctx;
xsdctx *sctx;
xmldocnode *doc;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) &#34;test&#34;))
    printf(&#34;Failed to create XML context, error %u\n&#34;, (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
    printf(&#34;Failed to create schema context, error %u\n&#34;, (unsigned) xerr);
...
If (xerr = XmlSchemaLoad(sctx, schema_uri, &#34;schema_dom_callback&#34;, func1,  NULL))
    printf(&#34;Failed to load schema, error %u\n&#34;, (unsigned) xerr);
...
XmlSchemaDestroy(sctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDK19827"></a><a id="ADXDK19826"></a>
<div class="props_rev_3"><a id="GUID-58DE68DC-6EDF-405B-BD60-F751BAAE4C42"></a>
<h3 id="ADXDK-GUID-58DE68DC-6EDF-405B-BD60-F751BAAE4C42" class="sect3"><span class="enumeration_section">22.5.4</span> Validation Options</h3>
<div>
<div class="section">
<p>You can supply options to the validation process using <code>XmlSchemaSetValidateOptions()</code>. For example:</p>
<pre dir="ltr">XmlSchemaSetValidateOptions(scctx, &#34;ignore_id_constraint&#34;, (boolean)TRUE, NULL);
</pre>
<p>The options are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>ignore_id_constraint</code> (existing before Oracle Database 11<span class="italic">g</span> Release 1 (11.1))</p>
</li>
<li>
<p><code>ignore_sch_location</code> (existing before Oracle Database 11<span class="italic">g</span> Release 1 (11.1))</p>
</li>
<li>
<p><code>ignore_par_val_rest</code> (existing before Oracle Database 11<span class="italic">g</span> Release 1 (11.1))</p>
</li>
<li>
<p><code>ignore_pattern_check</code>: When this property is <code>TRUE</code>, the streaming validator ignores pattern-facet checks. The default is <code>FALSE</code>.</p>
</li>
<li>
<p><code>no_events_for_defaults</code>: When this property is <code>TRUE</code>, the streaming validator does not return events for default values added to the instance document. <span class="italic">This option can be used only in the transparent case.</span></p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-58DE68DC-6EDF-405B-BD60-F751BAAE4C42__GUID-D1659A1C-E3CC-4169-A049-8150354FD850">
<p class="titleinexample">Example 22-4 Example of Streaming Validator Using New Options</p>
<pre dir="ltr"># include &#34;xmlev.h&#34;
...
xmlevctx *ppevtcx;
xmlctx   *xctx;
xsdctx   *sctx;
xmlerr   xerr;
oratext  **errmsg;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) &#34;test&#34;))
    printf(&#34;Failed to create XML context, error %u\n&#34;, (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
    printf(&#34;Failed to create schema context, error %u\n&#34;, (unsigned) xerr);
...
If (xerr = XmlSchemaLoad(sctx, &#34;my_schema.xsd&#34;, NULL))
    printf(&#34;Failed to load schema, error %u\n&#34;, (unsigned) xerr);
if(!(ppevctx = XmlEvCreatePPCtx(xctx, &amp;xerr, &#34;file&#34;, &#34;test.xml&#34;, NULL)))
   printf(&#34;Failed to create EVENT context, error %u\n&#34;, (unsigned) xerr);
 
if(xerr = XmlEvLoadPPDoc(xctx, ppevctx, &#34;file&#34;, &#34;test.xml&#34;, 0, NULL))
   printf(&#34;Failed to load Document, error %u\n&#34;, (unsigned) xerr);
 
XmlSchemaSetValidateOptions(sctx, &#34;ignore_id_constraint&#34;, TRUE,
                                  &#34;ignore_pattern_facet&#34;, TRUE, NULL);
if((xerr = XmlEvSchemaValidate(xctx,sctx, ppevctx, errmsg)))
{
  printf(&#34;Validation Failed, Error: %s\n&#34;, errmsg);
}
...
XmlSchemaDestroy(sctx);
XmlEvDestroyCtx(ppevctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment643">
<tr>
<td class="cellalignment670">
<table class="cellalignment648">
<tr>
<td class="cellalignment647"><a href="adx_c_xmlbin.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment647"><a href="adx_c_diff.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment672">
<table class="cellalignment646">
<tr>
<td class="cellalignment647"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment647"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment647"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment647"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment647"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment647"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>