<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113978"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Examples%20Using%20TimesTen%20SQL%20in%20PL%2FSQL"></a><title>Examples Using TimesTen SQL in PL/SQL</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 704"/>
<meta name="dcterms.created" content="2014-10-01T13:43:51Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database PL/SQL Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E21639-07"/>
<meta name="dcterms.isVersionOf" content="TTPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="exceptions.htm" title="Previous" type="text/html"/>
<link rel="Next" href="plsqlenv.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21639-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/14</span> <!-- End Header --><a id="CIHGFECI"></a><a id="TTPLS211"></a>
<h1 class="chapter"><span class="secnum">5</span> Examples Using TimesTen SQL in PL/SQL</h1>
<p>This chapter provides additional examples to further explore the tight integration of TimesTen SQL in PL/SQL:</p>
<ul>
<li>
<p><a href="#CHDGBHHA">Examples using the SELECT...INTO statement in PL/SQL</a></p>
</li>
<li>
<p><a href="#CHDJAACF">Example using the INSERT statement</a></p>
</li>
<li>
<p><a href="#CHDIFAHG">Examples using input and output parameters and bind variables</a></p>
</li>
<li>
<p><a href="#CHDJGBGD">Examples using cursors</a></p>
</li>
<li>
<p><a href="#CHDDIIJE">Examples using FORALL and BULK COLLECT</a></p>
</li>
<li>
<p><a href="#CHDBHJCA">Examples using EXECUTE IMMEDIATE</a></p>
</li>
<li>
<p><a href="#CHDCIBCB">Examples using RETURNING INTO</a></p>
</li>
<li>
<p><a href="#CHDHFJEE">Examples using the AUTHID clause</a></p>
</li>
<li>
<p><a href="#CHDCJAHH">Example querying a system view</a></p>
</li>
</ul>
<a id="CHDGBHHA"></a><a id="TTPLS306"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exa<a id="sthref203"></a><a id="sthref204"></a>mples using the SELECT...INTO statement in PL/SQL</h2>
<p>Use the <code>SELECT... INTO</code> statement to retrieve exactly one row of data. TimesTen returns an error for any query that returns no rows or multiple rows.</p>
<p>The section provides the following examples:</p>
<ul>
<li>
<p><a href="#CHDCFJJD">Using SELECT... INTO to return sum of salaries</a></p>
</li>
<li>
<p><a href="#CHDDADDG">Using SELECT...INTO to query another user&#39;s table</a></p>
</li>
</ul>
<a id="CHDCFJJD"></a><a id="TTPLS380"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using SELECT... INTO to return sum of salaries</h3>
<p>This example uses a <code>SELECT...INTO</code> statement to calculate the sum of salaries for all employees in the department where <code>department_id</code> is 60.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS307"></a><a id="sthref205"></a>Example 5-1 Using SELECT... INTO to return sum of salaries</p>
<pre>Command&gt; DECLARE
       &gt;   v_sum_sal  NUMBER (10,2);
       &gt;   v_dept_no  NUMBER NOT NULL := 60;
       &gt; BEGIN
       &gt;   SELECT SUM(salary) -- aggregate function
       &gt;   INTO v_sum_sal FROM employees
       &gt;   WHERE department_id = v_dept_no;
       &gt;   DBMS_OUTPUT.PUT_LINE (&#39;Sum is &#39; || v_sum_sal);
       &gt;  END;
       &gt;  /
Sum is 28800
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDDADDG"></a><a id="TTPLS381"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using SELECT...INTO to query another user&#39;s table</h3>
<p>This example provides two users, <code>USER1</code> and <code>USER2</code>, to show one user employing <code>SELECT...INTO</code> to query another user&#39;s table.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS363"></a><a id="sthref206"></a>Example 5-2 Using SELECT...INTO to query another user&#39;s table</p>
<p>The following privileges are assumed:</p>
<pre>grant create session to user1;
grant create session to user2;
grant create table to user1;
grant select on user1.test to user2;
</pre>
<p><span class="bold">USER1:</span></p>
<pre>Command&gt; create table test(name varchar2(20), id number);
Command&gt; insert into test values(&#39;posey&#39;, 363);
1 row inserted.
</pre>
<p><span class="bold">USER2:</span></p>
<pre>Command&gt; declare
       &gt;    targetid number;
       &gt; begin
       &gt;    select id into targetid from user1.test where name=&#39;posey&#39;;
       &gt;    dbms_output.put_line(&#39;Target ID is &#39; || targetid);
       &gt; end;
       &gt; /
Target ID is 363
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJAACF"></a><a id="TTPLS308"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exa<a id="sthref207"></a><a id="sthref208"></a>mple using the INSERT statement</h2>
<p>TimesTen supports the TimesTen DML statements <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>MERGE</code>. This section has an example of the <code>INSERT</code> statement.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS309"></a><a id="sthref209"></a>Example 5-3 Using the INSERT statement in PL/SQL</p>
<p>This example uses the <code>AS SELECT</code> query clause to create table <code>emp_copy</code>, sets <code>AUTOCOMMIT</code> off, creates a sequence to increment <code>employee_id</code>, and uses the <code>INSERT</code> statement in PL/SQL to insert a row of data in table <code>emp_copy</code>.</p>
<pre>Command&gt; CREATE TABLE emp_copy AS SELECT * FROM employees;
107 rows inserted.
Command&gt; SET AUTOCOMMIT OFF;

Command&gt; CREATE SEQUENCE emp_copy_seq
       &gt; START WITH 207
       &gt; INCREMENT BY 1;

Command&gt;  BEGIN
       &gt;    INSERT INTO emp_copy
       &gt;      (employee_id, first_name, last_name, email, hire_date, job_id,
       &gt;       salary)
       &gt;    VALUES (emp_copy_seq.NEXTVAL, &#39;Parker&#39;, &#39;Cores&#39;, &#39;PCORES&#39;, SYSDATE,
       &gt;      &#39;AD_ASST&#39;, 4000);
       &gt;  END;
       &gt;  /
 
PL/SQL procedure successfully completed.
</pre>
<p>Continuing, the example confirms the row was inserted, then rolls back the transaction.</p>
<pre>Command&gt; SELECT * FROM EMP_COPY WHERE first_name = &#39;Parker&#39;;
&lt; 207, Parker, Cores, PCORES, &lt;NULL&gt;, 2008-07-19 21:49:55, AD_ASST, 4000, 
&lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt; &gt;
1 row found.
Command&gt; ROLLBACK;
Command&gt;  SELECT * FROM emp_copy WHERE first_name = &#39;Parker&#39;;
0 rows found.
</pre>
<p>Now <code>INSERT</code> is executed again, then the transaction is rolled back in PL/SQL. Finally, the example verifies that TimesTen did not insert the row.</p>
<pre>Command&gt; BEGIN
       &gt;   INSERT INTO emp_copy
       &gt;     (employee_id, first_name, last_name, email, hire_date, job_id,
       &gt;      salary)
       &gt;   VALUES (emp_copy_seq.NEXTVAL, &#39;Parker&#39;, &#39;Cores&#39;, &#39;PCORES&#39;, SYSDATE,
       &gt;           &#39;AD_ASST&#39;,4000);
       &gt; ROLLBACK;
       &gt; END;
       &gt; /
 
PL/SQL procedure successfully completed.
 
Command&gt; SELECT * FROM emp_copy WHERE first_name = &#39;Parker&#39;;
0 rows found.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDIFAHG"></a><a id="TTPLS310"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exa<a id="sthref210"></a><a id="sthref211"></a>mples using input and output parameters and bind variables</h2>
<p>The following examples in this section use <code>IN</code>, <code>OUT</code>, and <code>IN OUT</code> parameters, including bind variables (host variables) from outside PL/SQL:</p>
<ul>
<li>
<p><a href="#CHDIBHFD">Using IN and OUT parameters</a></p>
</li>
<li>
<p><a href="#CHDGGGEH">Using IN OUT parameters</a></p>
</li>
<li>
<p><a href="#CHDCDADF">Using associative arrays</a></p>
</li>
</ul>
<a id="CHDIBHFD"></a><a id="TTPLS382"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using IN and OUT parameters</h3>
<p>This example creates a procedure <code>query_emp</code> to retrieve information about an employee, passes the <code>employee_id</code> value 171 to the procedure, and retrieves the name and salary into two <code>OUT</code> parameters.</p>
<div class="example">
<p class="titleinexample"><a id="CHDHACEE"></a><a id="TTPLS311"></a>Example 5-4 Using IN and OUT parameters</p>
<pre>Command&gt; CREATE OR REPLACE PROCEDURE query_emp
       &gt;   (p_id IN employees.employee_id%TYPE,
       &gt;    p_name  OUT employees.last_name%TYPE,
       &gt;    p_salary OUT employees.salary%TYPE) IS
       &gt; BEGIN
       &gt;   SELECT last_name, salary INTO p_name, p_salary
       &gt;   FROM employees
       &gt;   WHERE employee_id = p_id;
       &gt; END query_emp;
       &gt; /
 
Procedure created.

Command&gt; -- Execute the procedure
       &gt; DECLARE
       &gt;  v_emp_name employees.last_name%TYPE;
       &gt;  v_emp_sal  employees.salary%TYPE;
       &gt; BEGIN
       &gt;  query_emp (171, v_emp_name, v_emp_sal);
       &gt;  DBMS_OUTPUT.PUT_LINE (v_emp_name || &#39; earns &#39; ||
       &gt;   TO_CHAR (v_emp_sal, &#39;$999,999.00&#39;));
       &gt; END;
       &gt; /
Smith earns    $7,400.00
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDGGGEH"></a><a id="TTPLS383"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using IN OUT parameters</h3>
<p>Consider a situation where you want to format a phone number. This example takes a 10-character string containing digits for a phone number and passes this unformatted string to a procedure as an <code>IN OUT</code> parameter. After the procedure is executed, the <code>IN OUT</code> parameter contains the formatted phone number value.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS313"></a><a id="sthref212"></a>Example 5-5 Using IN OUT parameters</p>
<pre>Command&gt; CREATE OR REPLACE PROCEDURE format_phone
       &gt;   (p_phone_no IN OUT VARCHAR2 ) IS
       &gt; BEGIN
       &gt;  p_phone_no := &#39;(&#39;  || SUBSTR (p_phone_no,1,3) ||
       &gt;                &#39;) &#39; || SUBSTR (p_phone_no,4,3) ||
       &gt;                &#39;-&#39;  || SUBSTR (p_phone_no,7);
       &gt; END format_phone;
       &gt; /
 
Procedure created.
</pre>
<p>Create the bind variable, execute the procedure, and verify the results.</p>
<pre>Command&gt; VARIABLE b_phone_no VARCHAR2 (15);
Command&gt; EXECUTE :b_phone_no := &#39;8006330575&#39;;
 
PL/SQL procedure successfully completed.
 
Command&gt; PRINT b_phone_no;
B_PHONE_NO           : 8006330575
Command&gt; BEGIN
       &gt;   format_phone (:b_phone_no);
       &gt; END;
       &gt; /
 
PL/SQL procedure successfully completed.
 
Command&gt; PRINT b_phone_no
B_PHONE_NO           : (800) 633-0575
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDCDADF"></a><a id="TTPLS384"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using as<a id="sthref213"></a>sociative arrays</h3>
<p>This example uses <code>ttIsql</code> to bind a <code>NUMBER</code> array and a <code>VARCHAR2</code> array to corresponding <code>OUT</code> associative arrays in a PL/SQL procedure.</p>
<p>See <a href="dtypesfunc.htm#CIJBEIIF">&#34;Using associative arrays from applications&#34;</a> for related information.</p>
<div class="example">
<p class="titleinexample"><a id="CIJGIGCD"></a><a id="TTPLS385"></a>Example 5-6 Binding to an associative array from ttIsql</p>
<p>Assume the following SQL setup.</p>
<pre>DROP TABLE FOO;
 
CREATE TABLE FOO (CNUM INTEGER,
                  CVC2 VARCHAR2(20));
 
INSERT INTO FOO VALUES ( null,
     &#39;VARCHAR  1&#39;);
INSERT INTO FOO VALUES (-102,
     null);
INSERT INTO FOO VALUES ( 103,
     &#39;VARCHAR  3&#39;);
INSERT INTO FOO VALUES (-104,
     &#39;VARCHAR  4&#39;);
INSERT INTO FOO VALUES ( 105,
     &#39;VARCHAR  5&#39;);
INSERT INTO FOO VALUES ( 106,
     &#39;VARCHAR  6&#39;);
INSERT INTO FOO VALUES ( 107,
     &#39;VARCHAR  7&#39;);
INSERT INTO FOO VALUES ( 108,
     &#39;VARCHAR  8&#39;);
 
COMMIT;
</pre>
<p>Assume the following PL/SQL package definition. This includes the <code>INTEGER</code> associative array type <code>NUMARRTYP</code> and the <code>VARCHAR2</code> associative array type <code>VCHARRTYP</code>, used for output associative arrays <code>c1</code> and <code>c2</code>, respectively, in the definition of procedure <code>P1</code>.</p>
<pre>CREATE OR REPLACE PACKAGE PKG1 AS
  TYPE NUMARRTYP IS TABLE OF INTEGER INDEX BY BINARY_INTEGER;
  TYPE VCHARRTYP IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
 
  PROCEDURE P1(c1 OUT NUMARRTYP,c2 OUT VCHARRTYP);
 
END PKG1;
/
 
CREATE OR REPLACE PACKAGE BODY PKG1 AS
 
  CURSOR CUR1 IS SELECT CNUM, CVC2 FROM FOO;
 
  PROCEDURE P1(c1 OUT NUMARRTYP,c2 OUT VCHARRTYP) IS
  BEGIN
    IF NOT CUR1%ISOPEN  THEN
      OPEN CUR1;
    END IF;
    FOR i IN 1..8 LOOP
      FETCH CUR1 INTO c1(i), c2(i);
      IF CUR1%NOTFOUND THEN
        CLOSE CUR1;
        EXIT;
      END IF;
    END LOOP;
  END P1;
 
END PKG1;
</pre>
<p>Now <code>ttIsql</code> calls <code>PKG1.P1</code>, binds arrays to the <code>P1</code> output associative arrays, and prints the contents of those associative arrays.</p>
<pre>Command&gt; var c1[10] number;
Command&gt; var c2[10] varchar2(20);
Command&gt; print;
C1                   : ARRAY [ 10 ] (Current Size 0)
C2                   : ARRAY [ 10 ] (Current Size 0)
Command&gt; BEGIN PKG1.P1(:c1, :c2); END;
&gt; /
 
PL/SQL procedure successfully completed.
 
Command&gt; print
C1                   : ARRAY [ 10 ] (Current Size 8)
C1[1] : &lt;NULL&gt;
C1[2] : -102
C1[3] : 103
C1[4] : -104
C1[5] : 105
C1[6] : 106
C1[7] : 107
C1[8] : 108
C2                   : ARRAY [ 10 ] (Current Size 8)
C2[1] : VARCHAR  1
C2[2] : &lt;NULL&gt;
C2[3] : VARCHAR  3
C2[4] : VARCHAR  4
C2[5] : VARCHAR  5
C2[6] : VARCHAR  6
C2[7] : VARCHAR  7
C2[8] : VARCHAR  8
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJGBGD"></a><a id="TTPLS314"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Ex<a id="sthref214"></a><a id="sthref215"></a>amples using cursors</h2>
<p>TimesTen supports cursors, as discussed in <a href="overview.htm#CEGBAJBJ">&#34;Use of cursors in PL/SQL programs&#34;</a>. Use a cursor to handle the result set of a <code>SELECT</code> statement.</p>
<p>Examples in this section cover the following:</p>
<ul>
<li>
<p><a href="#CHDICEFI">Fetching values</a></p>
</li>
<li>
<p><a href="#CHDFCADA">Using the %ROWCOUNT and %NOTFOUND attributes</a></p>
</li>
<li>
<p><a href="#CHDGGFHI">Using cursor FOR loops</a></p>
</li>
</ul>
<p>See <a class="olink LNPLS541" href="../LNPLS/static.htm#LNPLS541">&#34;Explicit Cursor Attributes&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span> for information about the cursor attributes used in these examples.</p>
<a id="CHDICEFI"></a><a id="TTPLS315"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Fet<a id="sthref216"></a><a id="sthref217"></a>ching values</h3>
<p>This section provides examples of how to fetch values from a cursor, including how to fetch the values into a record.</p>
<div class="example">
<p class="titleinexample"><a id="CHDGJFFA"></a><a id="TTPLS316"></a>Example 5-7 Fetching values from a cursor</p>
<p>The following exam<a id="sthref218"></a>ple uses a cursor to select <code>employee_id</code> and <code>last_name</code> from the <code>employees</code> table where <code>department_id</code> is 30 Two variables are declared to hold the fetched values from the cursor, and the <code>FETCH</code> statement retrieves rows one at a time in a loop to retrieve all rows. Execution stops when there are no remaining rows in the cursor, illustrating use of the <code>%NOTFOUND</code> cursor attribute.</p>
<p><code>%NOTFOUND</code> yields <code>TRUE</code> if an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement affected no rows, or a <code>SELECT INTO</code> statement returned no rows.</p>
<pre>Command&gt;  DECLARE
       &gt;    CURSOR c_emp_cursor IS
       &gt;      SELECT employee_id, last_name FROM employees
       &gt;      WHERE department_id = 30;
       &gt;    v_empno  employees.employee_id%TYPE;
       &gt;    v_lname  employees.last_name%TYPE;
       &gt;  BEGIN
       &gt;    OPEN c_emp_cursor;
       &gt;    LOOP
       &gt;     FETCH c_emp_cursor INTO v_empno, v_lname;
       &gt;    EXIT WHEN c_emp_cursor%NOTFOUND;
       &gt;    DBMS_OUTPUT.PUT_LINE (v_empno || &#39; &#39; || v_lname);
       &gt;    END LOOP;
       &gt;    CLOSE c_emp_cursor;
       &gt;  END;
       &gt;  /

114 Raphaely
115 Khoo
116 Baida
117 Tobias
118 Himuro
119 Colmenares
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="CHDFAAHB"></a><a id="TTPLS317"></a>Example 5-8 Fetching values into a record</p>
<p>This is similar to <a href="#CHDGJFFA">Example 5-7</a> above, with the same results, but fetches the values into a PL/SQL record instead of PL/SQL variables.</p>
<pre>Command&gt; DECLARE
       &gt;   CURSOR c_emp_cursor IS
       &gt;     SELECT employee_id, last_name FROM employees
       &gt;     WHERE department_id = 30;
       &gt;   v_emp_record  c_emp_cursor%ROWTYPE;
       &gt; BEGIN
       &gt;   OPEN c_emp_cursor;
       &gt;   LOOP
       &gt;     FETCH c_emp_cursor INTO v_emp_record;
       &gt;   EXIT WHEN c_emp_cursor%NOTFOUND;
       &gt;   DBMS_OUTPUT.PUT_LINE (v_emp_record.employee_id || &#39; &#39; |
       &gt;     v_emp_record.last_name);
       &gt;   END LOOP;
       &gt;   CLOSE c_emp_cursor;
       &gt; END;
       &gt; /

114 Raphaely
115 Khoo
116 Baida
117 Tobias
118 Himuro
119 Colmenares
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDFCADA"></a><a id="TTPLS318"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the %ROWCOUNT and %NOTFOUND attributes</h3>
<p><a href="#CHDCCCHA">Example 5-9</a> shows how to use the <code>%ROWCOUNT</code> cursor attribute as well as the <code>%NOTFOUND</code> cursor attribute previously shown in <a href="#CHDGJFFA">Example 5-7</a> and <a href="#CHDFAAHB">Example 5-8</a> above.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCCCHA"></a><a id="TTPLS319"></a>Example 5-9 Usi<a id="sthref219"></a>ng %ROWCOUNT and %NOTFOUND attributes</p>
<p>This example has the same results as <a href="#CHDFAAHB">Example 5-8</a>, but illustrating the <code>%ROWCOUNT</code> cursor attribute as well as the <code>%NOTFOUND</code> attribute for exit conditions in the loop.</p>
<p><code>%ROWCOUNT</code> yields the number of rows affected by an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement or returned by a <code>SELECT...INTO</code> or <code>FETCH...INTO</code> statement.</p>
<pre>Command&gt; DECLARE
       &gt;   CURSOR c_emp_cursor IS
       &gt;     SELECT employee_id, last_name FROM employees
       &gt;     WHERE department_id = 30;
       &gt;   v_emp_record  c_emp_cursor%ROWTYPE;
       &gt; BEGIN
       &gt; OPEN c_emp_cursor;
       &gt; LOOP
       &gt;   FETCH c_emp_cursor INTO v_emp_record;
       &gt;   EXIT WHEN c_emp_cursor%ROWCOUNT &gt; 10 OR c_emp_cursor%NOTFOUND;
       &gt;   DBMS_OUTPUT.PUT_LINE (v_emp_record.employee_id || &#39; &#39; ||
       &gt;     v_emp_record.last_name);
       &gt;   END LOOP;
       &gt;   CLOSE c_emp_cursor;
       &gt;  END;
       &gt;  /
114 Raphaely
115 Khoo
116 Baida
117 Tobias
118 Himuro
119 Colmenares
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDGGFHI"></a><a id="TTPLS320"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using cu<a id="sthref220"></a><a id="sthref221"></a>rsor FOR loops</h3>
<p>PL/SQL in TimesTen supports cursor <code>FOR</code> loops, as shown in the following examples.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFHCGH"></a><a id="TTPLS321"></a>Example 5-10 Using a cursor FOR loop</p>
<p>In this example, PL/SQL implicitly declares <code>emp_record</code>. No <code>OPEN</code> and <code>CLOSE</code> statements are necessary. The results are the same as in <a href="#CHDCCCHA">Example 5-9</a> above.</p>
<pre>Command&gt; DECLARE
       &gt;   CURSOR c_emp_cursor IS
       &gt;    SELECT employee_id, last_name FROM employees
       &gt;    WHERE department_id = 30;
       &gt; BEGIN
       &gt;   FOR emp_record IN c_emp_cursor
       &gt;    LOOP
       &gt;      DBMS_OUTPUT.PUT_LINE (emp_record.employee_id || &#39; &#39; ||
       &gt;         emp_record.last_name);
       &gt;    END LOOP;
       &gt; END;
       &gt; /
114 Raphaely
115 Khoo
116 Baida
117 Tobias
118 Himuro
119 Colmenares
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="TTPLS322"></a><a id="sthref222"></a>Example 5-11 Using a cursor FOR loop with subqueries</p>
<p>This example illustrates a <code>FOR</code> loop using subqueries. The results are the same as in <a href="#CHDCCCHA">Example 5-9</a> and <a href="#CHDFHCGH">Example 5-10</a> above.</p>
<pre>Command&gt; BEGIN
       &gt;  FOR emp_record IN (SELECT employee_id, last_name FROM
       &gt;   employees WHERE department_id = 30)
       &gt;  LOOP
       &gt;    DBMS_OUTPUT.PUT_LINE (emp_record.employee_id || &#39; &#39; ||
       &gt;      emp_record.last_name);
       &gt;   END LOOP;
       &gt; END;
       &gt; /
114 Raphaely
115 Khoo
116 Baida
117 Tobias
118 Himuro
119 Colmenares
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDIIJE"></a><a id="TTPLS323"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exam<a id="sthref223"></a><a id="sthref224"></a>ples using FORALL and BULK COLLECT</h2>
<p>TimesTen supports bulk binding and the <code>FORALL</code> statement and <code>BULK COLLECT</code> feature, as noted in <a href="overview.htm#CEGGIEEG">&#34;FORALL and BULK COLLECT operations&#34;</a>.</p>
<p>Examples in this section cover the following:</p>
<ul>
<li>
<p><a href="#CHDBCAJJ">Using FORALL with SQL%BULK_ROWCOUNT</a></p>
</li>
<li>
<p><a href="#CHDEHFBA">Using BULK COLLECT INTO with queries</a></p>
</li>
<li>
<p><a href="#CHDFJJFA">Using BULK COLLECT INTO with cursors</a></p>
</li>
<li>
<p><a href="#CHDCHCGE">Using SAVE EXCEPTIONS with BULK COLLECT</a></p>
</li>
</ul>
<a id="CHDBCAJJ"></a><a id="TTPLS324"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using FORALL with SQL%BU<a id="sthref225"></a><a id="sthref226"></a>LK_ROWCOUNT</h3>
<p>The <code>%BULK_ROWCOUNT</code> cursor attribute is a composite structure designed for use with the <code>FORALL</code> statement.</p>
<p>The attribute acts like an associative array (index-by table). Its <span class="italic">i</span>th element stores the number of rows processed by the <span class="italic">i</span>th execution of the <code>INSERT</code> statement. If the <span class="italic">i</span>th execution affects no rows, then <code>%BULK_ROWCOUNT(</code><code><span class="codeinlineitalic">i</span></code><code>)</code> returns zero.</p>
<p>This is demonstrated in <a href="#CHDFBDBG">Example 5-12</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFBDBG"></a><a id="TTPLS325"></a>Example 5-12 Using the FORALL statement with SQL%BULK_ROWCOUNT</p>
<pre>Command&gt; DECLARE
       &gt;   TYPE num_list_type IS TABLE OF NUMBER
       &gt;      INDEX BY BINARY_INTEGER;
       &gt; v_nums num_list_type;
       &gt; BEGIN
       &gt;   v_nums (1) := 1;
       &gt;   v_nums (2) := 3;
       &gt;   v_nums (3) := 5;
       &gt;   v_nums (4) := 7;
       &gt;   v_nums (5) := 11;
       &gt;     FORALL i IN v_nums.FIRST .. v_nums.LAST
       &gt;      INSERT INTO num_table (n) VALUES (v_nums (i));
       &gt;    FOR i IN v_nums.FIRST .. v_nums.LAST
       &gt;    LOOP
       &gt;       DBMS_OUTPUT.PUT_LINE (&#39;Inserted &#39;||
       &gt;         SQL%BULK_ROWCOUNT (i) || &#39; row (s)&#39; ||
       &gt;         &#39; on iteration  &#39; || i );
       &gt;    END LOOP;
       &gt; END;
       &gt; /
Inserted 1 row (s) on iteration  1
Inserted 1 row (s) on iteration  2
Inserted 1 row (s) on iteration  3
Inserted 1 row (s) on iteration  4
Inserted 1 row (s) on iteration  5
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDEHFBA"></a><a id="TTPLS326"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using B<a id="sthref227"></a>ULK COLLECT INTO with queries</h3>
<p>Use <code>BULK COLLECT</code> with the <code>SELECT</code> statement in PL/SQL to retrieve rows without using a cursor.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFAHAF"></a><a id="TTPLS327"></a>Example 5-13 Using BULK COLLECT INTO with queries</p>
<p>This example selects all rows from the <code>departments</code> table for a specified location into a nested table, then uses a <code>FOR LOOP</code> to output data.</p>
<pre>Command&gt; CREATE OR REPLACE PROCEDURE get_departments (p_loc NUMBER) IS
       &gt;    TYPE dept_tab_type IS
       &gt; TABLE OF departments%ROWTYPE;
       &gt;   v_depts dept_tab_type;
       &gt;  BEGIN
       &gt;    SELECT * BULK COLLECT INTO v_depts
       &gt;   FROM departments
       &gt;  where location_id = p_loc;
       &gt;  FOR i IN 1 .. v_depts.COUNT
       &gt;  LOOP
       &gt;     DBMS_OUTPUT.PUT_LINE (v_depts(i).department_id
       &gt;       || &#39; &#39; || v_depts (i).department_name);
       &gt;  END LOOP;
       &gt;  END;
       &gt;  /
 
Procedure created.
</pre>
<p>The following executes the procedure and verifies the results:</p>
</div>
<!-- class="example" -->
<pre>Command&gt; EXECUTE GET_DEPARTMENTS (1700);
10 Administration
30 Purchasing
90 Executive
100 Finance
110 Accounting
120 Treasury
130 Corporate Tax
140 Control And Credit
150 Shareholder Services
160 Benefits
170 Manufacturing
180 Construction
190 Contracting
200 Operations
210 IT Support
220 NOC
230 IT Helpdesk
240 Government Sales
250 Retail Sales
260 Recruiting
270 Payroll
 
PL/SQL procedure successfully completed.
 
Command&gt; SELECT department_id, department_name FROM departments WHERE
         location_id = 1700;
&lt; 10, Administration &gt;
&lt; 30, Purchasing &gt;
&lt; 90, Executive &gt;
&lt; 100, Finance &gt;
&lt; 110, Accounting &gt;
&lt; 120, Treasury &gt;
&lt; 130, Corporate Tax &gt;
&lt; 140, Control And Credit &gt;
&lt; 150, Shareholder Services &gt;
&lt; 160, Benefits &gt;
&lt; 170, Manufacturing &gt;
&lt; 180, Construction &gt;
&lt; 190, Contracting &gt;
&lt; 200, Operations &gt;
&lt; 210, IT Support &gt;
&lt; 220, NOC &gt;
&lt; 230, IT Helpdesk &gt;
&lt; 240, Government Sales &gt;
&lt; 250, Retail Sales &gt;
&lt; 260, Recruiting &gt;
&lt; 270, Payroll &gt;
21 rows found.
</pre></div>
<!-- class="sect2" -->
<a id="CHDFJJFA"></a><a id="TTPLS328"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using B<a id="sthref228"></a>ULK COLLECT INTO with cursors</h3>
<p><a href="#CHDHIIAA">Example 5-14</a> uses a cursor to bulk-collect rows from a table.</p>
<div class="example">
<p class="titleinexample"><a id="CHDHIIAA"></a><a id="TTPLS329"></a>Example 5-14 Using BULK COLLECT INTO with cursors</p>
<p>This example uses a cursor to bulk-collect rows from the <code>departments</code> table with a specified <code>location_id</code>. value. Results are the same as in <a href="#CHDFAHAF">Example 5-13</a> above.</p>
<pre>Command&gt; CREATE OR REPLACE PROCEDURE get_departments2 (p_loc NUMBER) IS
       &gt;   CURSOR cur_dept IS
       &gt;    SELECT * FROM departments
       &gt;    WHERE location_id = p_loc;
       &gt;  TYPE dept_tab_type IS TABLE OF cur_dept%ROWTYPE;
       &gt;  v_depts dept_tab_type;
       &gt; BEGIN
       &gt;   OPEN cur_dept;
       &gt;   FETCH cur_dept BULK COLLECT INTO v_depts;
       &gt;   CLOSE cur_dept;
       &gt; FOR i IN 1 .. v_depts.COUNT
       &gt;  LOOP
       &gt;    DBMS_OUTPUT.PUT_LINE (v_depts (i).department_id
       &gt;    || &#39; &#39; || v_depts (i).department_name );
       &gt; END LOOP;
       &gt; END;
       &gt; /
 
Procedure created.
 
Command&gt; EXECUTE GET_DEPARTMENTS2 (1700);
10 Administration
30 Purchasing
90 Executive
100 Finance
110 Accounting
120 Treasury
130 Corporate Tax
140 Control And Credit
150 Shareholder Services
160 Benefits
170 Manufacturing
180 Construction
190 Contracting
200 Operations
210 IT Support
220 NOC
230 IT Helpdesk
240 Government Sales
250 Retail Sales
260 Recruiting
270 Payroll
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDCHCGE"></a><a id="TTPLS364"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using SA<a id="sthref229"></a><a id="sthref230"></a><a id="sthref231"></a><a id="sthref232"></a>VE EXCEPTIONS with BULK COLLECT</h3>
<p><code>SAVE EXCEPTIONS</code> allows an <code>UPDATE</code>, <code>INSERT</code>, or <code>DELETE</code> statement to continue executing after it issues an exception. When the statement finishes, an error is issued to signal that at least one exception occurred. Exceptions are collected into an array that you can examine using <code>%BULK_EXCEPTIONS</code> after the statement has executed.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS365"></a><a id="sthref233"></a>Example 5-15 Using SAVE EXCEPTIONS with BULK COLLECT</p>
<p>In this example, PL/SQL raises predefined exceptions because some new values are too large for the <code>job_id</code> column. After the <code>FORALL</code> statement, <code>SQL%BULK_EXCEPTIONS.COUNT</code> returns 2, and the contents of <code>SQL%BULK_EXCEPTIONS</code> are (7, 01401) and (13, 01401), indicating the error number and the line numbers where the error was detected. To get the error message, the negative of <code>SQL%BULK_EXCEPTIONS(i).ERROR_CODE</code> is passed to the error-reporting function <code>SQLERRM</code> (which expects a negative number).</p>
<p>The following script is executed using <code>ttIsql</code>:</p>
<pre>-- create a temporary table for this example
CREATE TABLE emp_temp AS SELECT * FROM employees;
 
DECLARE
   TYPE empid_tab IS TABLE OF employees.employee_id%TYPE;
   emp_sr empid_tab;
-- create an exception handler for ORA-24381
   errors NUMBER;
   dml_errors EXCEPTION;
   PRAGMA EXCEPTION_INIT(dml_errors, -24381);

BEGIN
   SELECT employee_id
      BULK COLLECT INTO emp_sr FROM emp_temp
      WHERE hire_date &lt; &#39;1994-12-30&#39;;
-- add &#39;_SR&#39; to the job_id of the most senior employees
   FORALL i IN emp_sr.FIRST..emp_sr.LAST SAVE EXCEPTIONS
      UPDATE emp_temp SET job_id = job_id || &#39;_SR&#39;
      WHERE emp_sr(i) = emp_temp.employee_id;
-- If any errors occurred during the FORALL SAVE EXCEPTIONS,
-- a single exception is raised when the statement completes.
 
EXCEPTION
-- Figure out what failed and why
   WHEN dml_errors THEN
      errors := SQL%BULK_EXCEPTIONS.COUNT;
      DBMS_OUTPUT.PUT_LINE
         (&#39;Number of statements that failed: &#39; || errors);
      FOR i IN 1..errors LOOP
         DBMS_OUTPUT.PUT_LINE(&#39;Error #&#39; || i || &#39; occurred during &#39;||
                 &#39;iteration #&#39; || SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
         DBMS_OUTPUT.PUT_LINE(&#39;Error message is &#39; ||
         SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE));
   END LOOP;
END;
/
 
DROP TABLE emp_temp;
</pre>
<p>Results are as follows:</p>
<pre>Number of statements that failed: 2
Error #1 occurred during iteration #7
Error message is ORA-01401: inserted value too large for column
Error #2 occurred during iteration #13
Error message is ORA-01401: inserted value too large for column
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBHJCA"></a><a id="TTPLS330"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exa<a id="sthref234"></a><a id="sthref235"></a><a id="sthref236"></a>mples using EXECUTE IMMEDIATE</h2>
<p>TimesTen supports the <code>EXECUTE IMMEDIATE</code> statement, as noted in <a href="overview.htm#CEGEIGCA">&#34;Dynamic SQL in PL/SQL (EXECUTE IMMEDIATE statement)&#34;</a>. This section provides the following additional examples to consider as you develop your PL/SQL applications in TimesTen:</p>
<ul>
<li>
<p><a href="#CHDDBDDD">Using EXECUTE IMMEDIATE to create a table</a></p>
</li>
<li>
<p><a href="#CHDCGFIH">Using EXECUTE IMMEDIATE with a single row query</a></p>
</li>
<li>
<p><a href="#CHDJDEIE">Using EXECUTE IMMEDIATE to alter a connection attribute</a></p>
</li>
<li>
<p><a href="#CHDDCCEF">Using EXECUTE IMMEDIATE to call a TimesTen built-in procedure</a></p>
</li>
<li>
<p><a href="#CHDIFACF">Using EXECUTE IMMEDIATE with TimesTen-specific syntax</a></p>
</li>
</ul>
<a id="CHDDBDDD"></a><a id="TTPLS386"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using EXECUTE IMMEDIATE to create a table</h3>
<p>Consider a situation where you do not know your table definition at compilation. By using an <code>EXECUTE IMMEDIATE</code> statement, you can create your table at execution time. This example shows a procedure that creates a table using the <code>EXECUTE IMMEDIATE</code> statement. The procedure is executed with the table name and column definitions passed as parameters, then creation of the table is verified.</p>
<div class="example">
<p class="titleinexample"><a id="CEGDAHDD"></a><a id="TTPLS144"></a>Example 5-16 Using EXECUTE IMMEDIATE to create a table</p>
<pre>Command&gt; CREATE OR REPLACE PROCEDURE create_table
       &gt;   (p_table_name VARCHAR2, p_col_specs VARCHAR2) IS
       &gt; BEGIN
       &gt;   EXECUTE IMMEDIATE &#39;CREATE TABLE &#39; || p_table_name
       &gt;
       &gt; || &#39; (&#39; || p_col_specs|| &#39; )&#39;;
       &gt; END;
       &gt; /
 
Procedure created.
</pre>
<p>Execute the procedure and verify the table is created.</p>
<pre>Command&gt; BEGIN
       &gt; create_table (&#39;EMPLOYEES_NAMES&#39;, &#39;id NUMBER (4)
       &gt;  PRIMARY KEY, name VARCHAR2 (40)&#39;);
       &gt; END;
       &gt; /
 
PL/SQL procedure successfully completed.
 
Command&gt; DESCRIBE employees_names;
 
Table USER.EMPLOYEES_NAMES:
  Columns:
   *ID                              NUMBER (4) NOT NULL
    NAME                            VARCHAR2 (40) INLINE
 
1 table found.
(primary key columns are indicated with *)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDCGFIH"></a><a id="TTPLS387"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using EXECUTE IMMEDIATE with a single row query</h3>
<p>In this example, the function <code>get_emp</code> retrieves an employee record. The function is executed and returns the results in <code>v_emprec</code>.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS332"></a><a id="sthref237"></a>Example 5-17 Using EXECUTE IMMEDIATE with a single row query</p>
<pre>Command&gt; CREATE OR REPLACE FUNCTION get_emp (p_emp_id NUMBER)
       &gt;   RETURN employees%ROWTYPE IS
       &gt;   v_stmt VARCHAR2 (200);
       &gt;   v_emprec employees%ROWTYPE;
       &gt; BEGIN
       &gt;   v_stmt:= &#39;SELECT * FROM EMPLOYEES &#39;||
       &gt;   &#39;WHERE employee_id = :p_emp_id&#39;;
       &gt;   EXECUTE IMMEDIATE v_stmt INTO v_emprec USING p_emp_id;
       &gt;   RETURN v_emprec;
       &gt; END;
       &gt; /
 
Function created.
 
Command&gt; DECLARE
       &gt;   v_emprec employees%ROWTYPE := GET_EMP (100);
       &gt; BEGIN
       &gt;  DBMS_OUTPUT.PUT_LINE (&#39;Employee: &#39; || v_emprec.last_name);
       &gt; END;
       &gt; /
Employee: King
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDJDEIE"></a><a id="TTPLS388"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using EXECUTE IMMEDIATE to alter a connection attribute</h3>
<p>This example uses an <code>EXECUTE IMMEDIATE</code> statement with <code>ALTER SESSION</code> to alter the <code>PLSQL_OPTIMIZE_LEVEL</code> setting, calling the <code>ttConfiguration</code> built-in procedure before and after to verify the results. (The next example calls <code>ttConfiguration</code> from inside an <code>EXECUTE IMMEDIATE</code> statement.) Refer to <a class="olink TTREF244" href="../TTREF/proced.htm#TTREF244">&#34;ttConfiguration&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for information about this procedure.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS331"></a><a id="sthref238"></a>Example 5-18 Using EXECUTE IMMEDIATE to alter PLSCOPE_SETTINGS</p>
<pre>Command&gt; call ttconfiguration;
...
&lt; PLSCOPE_SETTINGS, IDENTIFIERS:NONE &gt;
&lt; PLSQL, 1 &gt;
&lt; PLSQL_CCFLAGS, &lt;NULL&gt; &gt;
&lt; PLSQL_CODE_TYPE, INTERPRETED &gt;
&lt; PLSQL_CONN_MEM_LIMIT, 100 &gt;
&lt; PLSQL_MEMORY_ADDRESS, 0x10000000 &gt;
&lt; PLSQL_MEMORY_SIZE, 32 &gt;
<span class="bold">&lt; PLSQL_OPTIMIZE_LEVEL, 2 &gt;</span>
&lt; PLSQL_TIMEOUT, 30 &gt;
...
54 rows found.
 
Command&gt; begin
       &gt; execute immediate &#39;alter session set PLSQL_OPTIMIZE_LEVEL=3&#39;;
       &gt; end;
       &gt; /
PL/SQL procedure successfully completed.
 
Command&gt; call ttconfiguration;
...
&lt; PLSCOPE_SETTINGS, IDENTIFIERS:NONE &gt;
&lt; PLSQL, 1 &gt;
&lt; PLSQL_CCFLAGS, &lt;NULL&gt; &gt;
&lt; PLSQL_CODE_TYPE, INTERPRETED &gt;
&lt; PLSQL_CONN_MEM_LIMIT, 100 &gt;
&lt; PLSQL_MEMORY_ADDRESS, 0x10000000 &gt;
&lt; PLSQL_MEMORY_SIZE, 32 &gt;
<span class="bold">&lt; PLSQL_OPTIMIZE_LEVEL, 3 &gt;</span>
&lt; PLSQL_TIMEOUT, 30 &gt;
...
54 rows found.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDDCCEF"></a><a id="TTPLS389"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">U<a id="sthref239"></a><a id="sthref240"></a>sing EXECUTE IMMEDIATE to call a TimesTen built-in procedure</h3>
<p>In PL/SQL, you can use an <code>EXECUTE IMMEDIATE</code> statement with <code>CALL</code> syntax to call a TimesTen built-in procedure.</p>
<p>For example, to call the built-in procedure <code>ttConfiguration</code> and return its output result set, create a PL/SQL record type then use <code>EXECUTE IMMEDIATE</code> with <code>BULK COLLECT</code> to fetch the result set into an array.</p>
<p>For more information on TimesTen built-in procedures, see <a class="olink TTREF213" href="../TTREF/proced.htm#TTREF213">&#34;Built-In Procedures&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFFJJC"></a><a id="TTPLS334"></a>Example 5-19 U<a id="sthref241"></a><a id="sthref242"></a>sing EXECUTE IMMEDIATE to call ttConfiguration</p>
<pre>Command&gt; DECLARE
       &gt;   TYPE ttConfig_record IS RECORD
       &gt;      (name varchar2(255), value varchar2 (255));
       &gt;   TYPE ttConfig_table IS TABLE OF ttConfig_record;
       &gt; v_ttConfigs ttConfig_table;
       &gt; BEGIN
       &gt;  EXECUTE IMMEDIATE  &#39;CALL ttConfiguration&#39;
       &gt;   BULK COLLECT into v_ttConfigs;
       &gt;  DBMS_OUTPUT.PUT_LINE (&#39;Name: &#39; || v_ttConfigs(1).name
       &gt;    || &#39; Value: &#39; || v_ttConfigs(1).value);
       &gt; end;
       &gt; /
Name: CacheGridEnable Value: 0
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDIFACF"></a><a id="TTPLS390"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using EXECUTE IMMEDIATE with TimesTen-specific syntax</h3>
<p>This example uses an <code>EXECUTE IMMEDIATE</code> statement to execute a TimesTen <code>SELECT FIRST</code> <code><span class="codeinlineitalic">n</span></code> statement. This syntax is specific to TimesTen.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS333"></a><a id="sthref243"></a>Example 5-20 Using EXECUTE IMMEDIATE with TimesTen-specific syntax</p>
<pre>Command&gt; DECLARE v_empid NUMBER;
       &gt; BEGIN
       &gt;   EXECUTE IMMEDIATE &#39;SELECT FIRST 1 employee_id FROM employees&#39;
       &gt;    INTO v_empid;
       &gt;  DBMS_OUTPUT.PUT_LINE (&#39;Employee id: &#39; || v_empid);
       &gt; END;
       &gt; /
Employee id: 100
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCIBCB"></a><a id="TTPLS335"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Ex<a id="sthref244"></a><a id="sthref245"></a><a id="sthref246"></a>amples using RETURNING INTO</h2>
<p>This section includes the following two examples using the <code>RETURNING INTO</code> clause:</p>
<ul>
<li>
<p><a href="#CHDHHDDI">Using the RETURNING INTO clause with a record</a></p>
</li>
<li>
<p><a href="#CHDGEDIJ">Using BULK COLLECT INTO with the RETURNING INTO clause</a></p>
</li>
</ul>
<p>See <a href="overview.htm#CEGEIHAB">&#34;RETURNING INTO clause&#34;</a> for an overview.</p>
<a id="CHDHHDDI"></a><a id="TTPLS336"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the RETURNING INTO clause with a record</h3>
<p>The following example uses <code>ttIsql</code> to run a SQL script that uses a <code>RETURNING INTO</code> clause to return data into a record. The example gives a raise to a specified employee, returns his name and new salary into a record, then outputs the data from the record. For reference, the original salary is shown before running the script.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS391"></a><a id="sthref247"></a>Example 5-21 Using the RETURNING INTO clause with a record</p>
<pre>Command&gt; SELECT SALARY,LAST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID = 100;
&lt; 24000, King &gt;
1 row found.

Command&gt; run ReturnIntoWithRecord.sql;
 
CREATE TABLE emp_temp AS SELECT * FROM employees;
107 rows inserted.
 
DECLARE
   TYPE EmpRec IS RECORD (last_name employees.last_name%TYPE,
                          salary employees.salary%TYPE);
   emp_info EmpRec;
   emp_id NUMBER := 100;
BEGIN
   UPDATE emp_temp SET salary = salary * 1.1
      WHERE employee_id = emp_id
      RETURNING last_name, salary INTO emp_info;
   DBMS_OUTPUT.PUT_LINE
      (&#39;Just gave a raise to &#39; || emp_info.last_name ||
       &#39;, who now makes &#39; || emp_info.salary);
   ROLLBACK;
END;
/
 
Just gave a raise to King, who now makes 26400
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDGEDIJ"></a><a id="TTPLS337"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using BULK COLLECT IN<a id="sthref248"></a>TO with the RETURNING INTO clause</h3>
<p>The following example uses <code>ttIsql</code> to run a SQL script that uses a <code>RETURNING INTO</code> clause with <code>BULK COLLECT</code> to return data into nested tables, a type of PL/SQL collection. The example deletes all the employees from a specified department, then, using one nested table for employee IDs and one for last names, outputs the employee ID and last name of each deleted employee. For reference, the IDs and last names of employees in the department are also displayed before execution of the script.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS392"></a><a id="sthref249"></a>Example 5-22 Using BULK COLLECT INTO with the RETURNING INTO clause</p>
<pre>Command&gt; select employee_id, last_name from employees where department_id=30;
&lt; 114, Raphaely &gt;
&lt; 115, Khoo &gt;
&lt; 116, Baida &gt;
&lt; 117, Tobias &gt;
&lt; 118, Himuro &gt;
&lt; 119, Colmenares &gt;
6 rows found.
Command&gt; run ReturnIntoWithBulkCollect.sql;
 
CREATE TABLE emp_temp AS SELECT * FROM employees;
107 rows inserted.
 
DECLARE
   TYPE NumList IS TABLE OF employees.employee_id%TYPE;
   enums NumList;
   TYPE NameList IS TABLE OF employees.last_name%TYPE;
   names NameList;
BEGIN
   DELETE FROM emp_temp WHERE department_id = 30
     RETURNING employee_id, last_name
     BULK COLLECT INTO enums, names;
   DBMS_OUTPUT.PUT_LINE
      (&#39;Deleted &#39; || SQL%ROWCOUNT || &#39; rows:&#39;);
   FOR i IN enums.FIRST .. enums.LAST
   LOOP
      DBMS_OUTPUT.PUT_LINE
         (&#39;Employee #&#39; || enums(i) || &#39;: &#39; || names(i));
   END LOOP;
END;
/
Deleted 6 rows:
Employee #114: Raphaely
Employee #115: Khoo
Employee #116: Baida
Employee #117: Tobias
Employee #118: Himuro
Employee #119: Colmenares
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHFJEE"></a><a id="TTPLS338"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Examples using the AU<a id="sthref250"></a><a id="sthref251"></a><a id="sthref252"></a>THID clause</h2>
<p>This section runs a script twice in <code>ttIsql</code> with just one change, first defining a PL/SQL procedure with <code>AUTHID CURRENT_USER</code> for invoker&#39;s rights, then with <code>AUTHID DEFINER</code> for definer&#39;s rights. See <a href="accesscntl.htm#BABDDCHC">&#34;Definer&#39;s rights and invoker&#39;s rights&#34;</a> for related information.</p>
<a id="TTPLS393"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref253"></a>
<h3 class="sect2">Script for AUTHID examples</h3>
<p>The script assumes three users have been created: a tool vendor and two tool users (<code>brandX</code> and <code>brandY</code>). Each has been granted <code>CREATE SESSION</code>, <code>CREATE PROCEDURE</code>, and <code>CREATE TABLE</code> privileges as necessary. The following setup is also assumed, to allow &#34;<code>use</code> <code><span class="codeinlineitalic">username</span></code><code>;</code>&#34; syntax to connect to the database as <code><span class="codeinlineitalic">username</span></code>.</p>
<pre>connect adding &#34;uid=toolVendor;pwd=pw&#34; as toolVendor;
connect adding &#34;uid=brandX;pwd=pw&#34; as brandX;
connect adding &#34;uid=brandY;pwd=pw&#34; as brandY;
</pre>
<p>The script does the following:</p>
<ul>
<li>
<p>Creates the procedure, <code>printInventoryStatistics</code>, as the tool vendor.</p>
</li>
<li>
<p>Creates a table with the same name, <code>myInventory</code>, in each of the three user schemas, populating it with unique data in each case.</p>
</li>
<li>
<p>Runs the procedure as each of the tool users.</p>
</li>
</ul>
<p>The different results between the two executions of the script show the difference between invoker&#39;s rights and definer&#39;s rights.</p>
<p>Following is the script for the invoker&#39;s rights execution.</p>
<pre>use toolVendor;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;butter&#39;, 1);

create or replace procedure printInventoryStatistics <span class="bold">authid current_user</span> is
 inventoryCount pls_integer;
begin
 select count(*) into inventoryCount from myInventory;
 dbms_output.put_line(&#39;Total items in inventory: &#39; || inventoryCount);
 for currentItem in (select * from myInventory) loop
   dbms_output.put_line(currentItem.name || &#39; &#39; || currentItem.inventoryCount);
 end loop;
end;
/
grant execute on printInventoryStatistics to brandX;
grant execute on printInventoryStatistics to brandY;
 
use brandX;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;toothpaste&#39;, 100);
set serveroutput on
execute toolVendor.printInventoryStatistics;
 
use brandY;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;shampoo&#39;, 10);
set serveroutput on
execute toolVendor.printInventoryStatistics; 
</pre>
<p>The only difference for the definer&#39;s rights execution is the change in the <code>AUTHID</code> clause for the procedure definition.</p>
<pre>...
create or replace procedure printInventoryStatistics <span class="bold">authid definer</span> is
 inventoryCount pls_integer;
begin
 select count(*) into inventoryCount from myInventory;
 dbms_output.put_line(&#39;Total items in inventory: &#39; || inventoryCount);
 for currentItem in (select * from myInventory) loop
   dbms_output.put_line(currentItem.name || &#39; &#39; || currentItem.inventoryCount);
 end loop;
end;
/
...
</pre></div>
<!-- class="sect2" -->
<a id="TTPLS394"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref254"></a>
<h3 class="sect2">Using AUTHID CURRENT_USER</h3>
<p>This example shows the results when the procedure is defined with invoker&#39;s rights. Note that when the tool users <code>brandX</code> and <code>brandY</code> run the <code>printInventoryStatistics</code> procedure, each sees the data in his own (the invoker&#39;s) <code>myInventory</code> table.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS339"></a><a id="sthref255"></a>Example 5-23 Using AUTHID CURRENT_USER</p>
<pre>Command&gt; run invoker.sql
 
use toolVendor;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;butter&#39;, 1);
1 row inserted.
 
create or replace procedure printInventoryStatistics <span class="bold">authid current_user</span> is
 inventoryCount pls_integer;
begin
 select count(*) into inventoryCount from myInventory;
 dbms_output.put_line(&#39;Total items in inventory: &#39; || inventoryCount);
 for currentItem in (select * from myInventory) loop
   dbms_output.put_line(currentItem.name || &#39; &#39; || currentItem.inventoryCount);
 end loop;
end;
/

Procedure created.
 
grant execute on printInventoryStatistics to brandX;
grant execute on printInventoryStatistics to brandY;
 
use brandX;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;toothpaste&#39;, 100);
1 row inserted.
set serveroutput on;
 
execute toolVendor.printInventoryStatistics;
Total items in inventory: 1
toothpaste 100
 
PL/SQL procedure successfully completed.
 
use brandY;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;shampoo&#39;, 10);
1 row inserted.
set serveroutput on;
 
execute toolVendor.printInventoryStatistics;
Total items in inventory: 1
shampoo 10
 
PL/SQL procedure successfully completed.
</pre>
<p>Use the following to terminate all the connections:</p>
<pre>Command&gt; disconnect all;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="TTPLS395"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref256"></a>
<h3 class="sect2">Using AUTHID DEFINER</h3>
<p>This example shows the results when the procedure is defined with definer&#39;s rights. Note that when the tool users <code>brandX</code> and <code>brandY</code> run <code>printInventoryStatistics</code>, each sees the data in <code>myInventory</code> belonging to the tool vendor (the definer).</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS340"></a><a id="sthref257"></a>Example 5-24 Using AUTHID DEFINER</p>
<pre>Command&gt; run definer.sql
 
use toolVendor;

create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;butter&#39;, 1);
1 row inserted.
 
create or replace procedure printInventoryStatistics <span class="bold">authid definer</span> is
 inventoryCount pls_integer;
begin
 select count(*) into inventoryCount from myInventory;
 dbms_output.put_line(&#39;Total items in inventory: &#39; || inventoryCount);
 for currentItem in (select * from myInventory) loop
   dbms_output.put_line(currentItem.name || &#39; &#39; || currentItem.inventoryCount);
 end loop;
end;
/
 
Procedure created.
 
grant execute on printInventoryStatistics to brandX;
grant execute on printInventoryStatistics to brandY;
 
use brandX;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;toothpaste&#39;, 100);
1 row inserted.
set serveroutput on;
 
execute toolVendor.printInventoryStatistics;
Total items in inventory: 1
butter 1
 
PL/SQL procedure successfully completed.
 
use brandY;
create table myInventory (name varchar2(100), inventoryCount tt_integer);
insert into myInventory values(&#39;shampoo&#39;, 10);
1 row inserted.
set serveroutput on;
 
execute toolVendor.printInventoryStatistics;
Total items in inventory: 1
butter 1
 
PL/SQL procedure successfully completed.
</pre>
<p>In this case, it is also instructive to see that although <code>brandX</code> and <code>brandY</code> can each access the <code>toolVendor.myInventory</code> table through the procedure, they cannot access it directly. That is a key use of definer&#39;s rights, to allow specific and restricted access to a table or other SQL object through the actions of a procedure.</p>
<pre>Command&gt; use brandX;
brandx: Command&gt; select * from toolVendor.myInventory;
15100: User BRANDX lacks privilege SELECT on TOOLVENDOR.MYINVENTORY
The command failed.

brandx: Command&gt; use brandY;
brandy: Command&gt; select * from toolVendor.myInventory;
15100: User BRANDY lacks privilege SELECT on TOOLVENDOR.MYINVENTORY
The command failed.
</pre>
<p>Use the following to terminate all the connections:</p>
<pre>Command&gt; disconnect all;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCJAHH"></a><a id="TTPLS341"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exa<a id="sthref258"></a><a id="sthref259"></a>mple querying a system view</h2>
<p>This section provides an example that queries a system view.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS342"></a><a id="sthref260"></a>Example 5-25 Querying system view USER_SOURCE</p>
<p>This example queries the <code>USER_SOURCE</code> system view to examine the source code of procedure <code>query_emp</code> from <a href="#CHDHACEE">Example 5-4</a>. (You must create that procedure before completing this example.)</p>
<pre>Command&gt; SELECT SUBSTR (text, 1, LENGTH(text)-1)
       &gt; FROM user_source
       &gt; WHERE name = &#39;QUERY_EMP&#39; AND type = &#39;PROCEDURE&#39;;
</pre>
<p>This produces the following output:</p>
<pre>&lt; PROCEDURE query_emp &gt;
&lt; (p_id IN employees.employee_id%TYPE, &gt;
&lt;  p_name OUT employees.last_name%TYPE, &gt;
&lt;  p_salary OUT employees.salary%TYPE) IS &gt;
&lt; BEGIN &gt;
&lt; SELECT last_name, salary INTO p_name, p_salary &gt;
&lt; FROM employees &gt;
&lt; WHERE employee_id = p_id; &gt;
&lt; END query_emp; &gt;
9 rows found.
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
As with other <code>USER_*</code> system views, all users have <code>SELECT</code> privilege for the <code>USER_SOURCE</code> system view.</div>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6337">
<tr>
<td class="cellalignment6344">
<table class="cellalignment6348">
<tr>
<td class="cellalignment6341"><a href="exceptions.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6341"><a href="plsqlenv.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6346">
<table class="cellalignment6347">
<tr>
<td class="cellalignment6341"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6341"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6341"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6341"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6341"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6341"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>