<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113967"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Data%20Types%20in%20PL%2FSQL%20in%20TimesTen"></a><title>Data Types in PL/SQL in TimesTen</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 704"/>
<meta name="dcterms.created" content="2014-10-01T13:43:51Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database PL/SQL Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E21639-07"/>
<meta name="dcterms.isVersionOf" content="TTPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="overview.htm" title="Previous" type="text/html"/>
<link rel="Next" href="exceptions.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21639-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/14</span> <!-- End Header --><a id="CIJEDIJB"></a><a id="TTPLS159"></a>
<h1 class="chapter"><span class="secnum">3</span> Data Types in PL/SQL in TimesTen</h1>
<p>This chapter focuses on the range of data types available to you for manipulating data in PL/SQL, TimesTen SQL, and your application programs.</p>
<p>Tim<a id="sthref104"></a>esTen supports PL/SQL data types and the interactions between PL/SQL data types, TimesTen data types, and client application program data types. Data type conversions and data type mappings are supported.</p>
<p>See the end of the chapter for TimesTen-specific considerations.</p>
<p>Topics in this chapter include the following:</p>
<ul>
<li>
<p><a href="#CIHJGBII">Understanding the data type environments</a></p>
</li>
<li>
<p><a href="#CIHJHECI">Understanding and using PL/SQL data types</a></p>
</li>
<li>
<p><a href="#BCGHDEDD">Data type conversion</a></p>
</li>
<li>
<p><a href="#CIJJFEAD">Differences in TimesTen: data type considerations</a></p>
</li>
</ul>
<a id="CIHJGBII"></a><a id="TTPLS160"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Und<a id="sthref105"></a>erstanding the data type environments</h2>
<p>There are three distinct environments to consider when discussing data types:</p>
<ul>
<li>
<p>PL/SQL programs that contain variables and constants that use PL/SQL data types</p>
</li>
<li>
<p>TimesTen SQL statements that make use of database rows, columns, and constants</p>
<p>These elements are expressed using TimesTen SQL data types.</p>
</li>
<li>
<p>Application programs that interact with the database and the PL/SQL programming language</p>
<p>Application programs are written in programming languages such as C and Java and contain variables and constants that use data types from these programming languages.</p>
</li>
</ul>
<p><a href="#CIJEEIAG">Table 3-1</a> summarizes the environments and gives examples of data types for each environment.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLS161"></a><a id="sthref106"></a><a id="CIJEEIAG"></a>Table 3-1 Summarizing the data type environments</p>
<table class="cellalignment6349" title="Summarizing the data type environments" summary="This table summarizes the data type enviroments." dir="ltr">
<thead>
<tr class="cellalignment6338">
<th class="cellalignment6350" id="r1c1-t2">Environment</th>
<th class="cellalignment6350" id="r1c2-t2">Data type examples</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r2c1-t2" headers="r1c1-t2">
<p>PL/SQL programs</p>
</td>
<td class="cellalignment6344" headers="r2c1-t2 r1c2-t2">
<p><code>NUMBER</code>, <code>PLS_INTEGER</code>, <code>VARCHAR2</code>, <code>STRING</code>, <code>DATE</code>, <code>TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r3c1-t2" headers="r1c1-t2">
<p>TimesTen SQL statements</p>
</td>
<td class="cellalignment6344" headers="r3c1-t2 r1c2-t2">
<p><code>TT_BIGINT</code>, <code>TT_INTEGER</code>, <code>BINARY_FLOAT</code>, <code>VARCHAR2</code>, <code>DATE</code>, <code>TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r4c1-t2" headers="r1c1-t2">
<p>Application programs</p>
</td>
<td class="cellalignment6344" headers="r4c1-t2 r1c2-t2">
<p><code>int</code>, <code>double</code>, <code>String</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect1" -->
<a id="CIHJHECI"></a><a id="TTPLS162"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Und<a id="sthref107"></a>erstanding and using PL/SQL data types</h2>
<p>This section describes the PL/SQL data types that are supported in PL/SQL programs. It does not describe the data types supported in TimesTen SQL statements. For information on data types supported in TimesTen SQL statements, see <a class="olink TTSQL123" href="../TTSQL/types.htm#TTSQL123">&#34;Data Types&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span>.</p>
<p>The following topics are covered in this section:</p>
<ul>
<li>
<p><a href="#CIHFBHED">PL/SQL data type categories</a></p>
</li>
<li>
<p><a href="#CIHBAJCC">Predefined PL/SQL scalar data types</a></p>
</li>
<li>
<p><a href="#CIHEGAHD">PL/SQL composite data types</a></p>
</li>
<li>
<p><a href="#CIJDIGEB">PL/SQL REF CURSORs</a></p>
</li>
</ul>
<p>For additional information see <a class="olink LNPLS003" href="../LNPLS/datatypes.htm#LNPLS003">&#34;PL/SQL Data Types&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span>.</p>
<a id="CIHFBHED"></a><a id="TTPLS163"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">PL/SQL d<a id="sthref108"></a>ata type categories</h3>
<p>In a PL/SQL block, every constant, variable, and parameter has a data type. PL/SQL provides predefined data types and subtypes and lets you define your own PL/SQL subtypes.</p>
<p><a href="#BCGJEHBI">Table 3-2</a> lists the categories of the predefined PL/SQL data types.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLS164"></a><a id="sthref109"></a><a id="BCGJEHBI"></a>Table 3-2 Predefined PL/SQL data type categories</p>
<table class="cellalignment6349" title="Predefined PL/SQL data type categories" summary="This table lists the PL/SQL predefined data types." dir="ltr">
<thead>
<tr class="cellalignment6338">
<th class="cellalignment6350" id="r1c1-t3">Data type category</th>
<th class="cellalignment6350" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r2c1-t3" headers="r1c1-t3">
<p>Scalar</p>
</td>
<td class="cellalignment6344" headers="r2c1-t3 r1c2-t3">
<p>Single values with no internal components</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r3c1-t3" headers="r1c1-t3">
<p>Composite</p>
</td>
<td class="cellalignment6344" headers="r3c1-t3 r1c2-t3">
<p>Internal components that are either scalar or composite</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r4c1-t3" headers="r1c1-t3">
<p>Reference</p>
</td>
<td class="cellalignment6344" headers="r4c1-t3 r1c2-t3">
<p>Pointers to other data items such as REF CURSORs</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="#CIJEHIHJ">&#34;Non-supported data types&#34;</a>.</div>
</div>
<!-- class="sect2" -->
<a id="CIHBAJCC"></a><a id="TTPLS165"></a>
<div class="sect2"><!-- infolevel="all" infotype="Concept" -->
<h3 class="sect2">Pred<a id="sthref110"></a>efined PL/SQL scalar data types</h3>
<p>Scalar data types store single values with no internal components. <a href="#CIJDDEAA">Table 3-3</a> lists predefined PL/SQL scalar data types of interest, grouped by data type families.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLS166"></a><a id="sthref111"></a><a id="CIJDDEAA"></a>Table 3-3 Predefined PL/SQL scalar data types</p>
<table class="cellalignment6349" title="Predefined PL/SQL scalar data types" summary="This table lists the PL/SQL predefined scalar data types." dir="ltr">
<thead>
<tr class="cellalignment6338">
<th class="cellalignment6350" id="r1c1-t5">Data type family</th>
<th class="cellalignment6350" id="r1c2-t5">Data type name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r2c1-t5" headers="r1c1-t5">
<p><code>NUMERIC</code></p>
</td>
<td class="cellalignment6344" headers="r2c1-t5 r1c2-t5">
<p><code>NUMBER</code></p>
<p><code>PLS_INTEGER</code></p>
<p><code>BINARY_FLOAT</code></p>
<p><code>BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r3c1-t5" headers="r1c1-t5">
<p><code>CHARACTER</code></p>
</td>
<td class="cellalignment6344" headers="r3c1-t5 r1c2-t5">
<p><code>CHAR[ACTER]</code></p>
<p><code>VARCHAR2</code></p>
<p><code>NCHAR</code> (national character <code>CHAR</code>)</p>
<p><code>NVARCHAR2</code> (national character <code>VARCHAR2</code>)</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r4c1-t5" headers="r1c1-t5">
<p><code>BINARY</code></p>
</td>
<td class="cellalignment6344" headers="r4c1-t5 r1c2-t5">
<p><code>RAW</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r5c1-t5" headers="r1c1-t5">
<p><code>BOOLEAN</code></p>
</td>
<td class="cellalignment6344" headers="r5c1-t5 r1c2-t5">
<p><code>BOOLEAN</code></p>
<p><span class="bold">Note</span>: You cannot bind <code>BOOLEAN</code> types in SQL statements.</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r6c1-t5" headers="r1c1-t5">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment6344" headers="r6c1-t5 r1c2-t5">
<p><code>DATE</code></p>
<p><code>TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r7c1-t5" headers="r1c1-t5">
<p><code>INTERVAL</code></p>
</td>
<td class="cellalignment6344" headers="r7c1-t5 r1c2-t5">
<p><code>INTERVAL YEAR TO MONTH</code></p>
<p><code>INTERVAL DAY TO SECONDS</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r8c1-t5" headers="r1c1-t5">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment6344" headers="r8c1-t5 r1c2-t5">
<p><code>ROWID</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r9c1-t5" headers="r1c1-t5">
<p><code>LOB</code></p>
</td>
<td class="cellalignment6344" headers="r9c1-t5 r1c2-t5">
<p><code>BLOB</code> (binary LOB)</p>
<p><code>CLOB</code> (character LOB)</p>
<p><code>NCLOB</code> (national character LOB)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="#CIJEHIHJ">&#34;Non-supported data types&#34;</a>.</div>
<div class="example">
<p class="titleinexample"><a id="TTPLS167"></a><a id="sthref112"></a>Example 3-1 Declaring PL/SQL variables</p>
<pre>Command&gt; DECLARE
       &gt;    v_emp_job     VARCHAR2 (9);
       &gt;    v_count_loop  BINARY_INTEGER := 0;
       &gt;    v_dept_total_sal NUMBER (9,2) := 0;
       &gt;    v_orderdate   DATE := SYSDATE + 7;
       &gt;    v_valid       BOOLEAN NOT NULL := TRUE;
       &gt; ...
</pre></div>
<!-- class="example" -->
<a id="TTPLS168"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref113"></a>
<h4 class="sect3">PL<a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a><a id="sthref117"></a><a id="sthref118"></a>S_INTEGER and BINARY_INTEGER data types</h4>
<p>The <code>PLS_INTEGER</code> and <code>BINARY_INTEGER</code> data types are identical and are used interchangeably in this document.</p>
<p>The <code>PLS_INTEGER</code> data type stores signed integers in the range -2,147,483,648 through 2,147,483,647 represented in 32 bits. It has the following advantages over the <code>NUMBER</code> data type and subtypes:</p>
<ul>
<li>
<p><code>PLS_INTEGER</code> values require less storage.</p>
</li>
<li>
<p><code>PLS_INTEGER</code> operations use hardware arithmetic, so they are faster than <code>NUMBER</code> operations, which use library arithmetic.</p>
</li>
</ul>
<p>For efficiency, use <code>PLS_INTEGER</code> values for all calculations that fall within its range. For calculations outside the <code>PLS_INTEGER</code> range, use <code>INTEGER</code>, a predefined subtype of the <code>NUMBER</code> data type.</p>
<p>See <a class="olink LNPLS319" href="../LNPLS/datatypes.htm#LNPLS319">&#34;PLS_INTEGER and BINARY_INTEGER Data Types&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span> for additional information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When a calculation with two <code>PLS_INTEGER</code> data types overflows the <code>PLS_INTEGER</code> range, an overflow exception is raised even if the result is assigned to a <code>NUMBER</code> data type.</div>
</div>
<!-- class="sect3" -->
<a id="TTPLS169"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref119"></a>
<h4 class="sect3">SIM<a id="sthref120"></a><a id="sthref121"></a><a id="sthref122"></a>PLE_INTEGER data type</h4>
<p><code>SIMPLE_INTEGER</code> is a predefined subtype of the <code>PLS_INTEGER</code> data type that has the same range as <code>PLS_INTEGER</code> (-2,147,483,648 through 2,147,483,647) and has a <code>NOT NULL</code> constraint. It differs from <code>PLS_INTEGER</code> in that it does not overflow.</p>
<p>You can use <code>SIMPLE_INTEGER</code> when the value is never null and overflow checking is unnecessary. Without the overhead of checking for null values and overflow, <code>SIMPLE_INTEGER</code> provides better performance than <code>PLS_INTEGER</code>.</p>
<p>See <a class="olink LNPLS00305" href="../LNPLS/datatypes.htm#LNPLS00305">&#34;SIMPLE_INTEGER Subtype of PLS_INTEGER&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span> for additional information.</p>
</div>
<!-- class="sect3" -->
<a id="CIJEHACF"></a><a id="TTPLS170"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">RO<a id="sthref123"></a><a id="sthref124"></a>WID data type</h4>
<p>Each row in a table has a unique identifier known as its <span class="italic">rowid</span>.</p>
<p>An application can specify literal rowid values in SQL statements, such as in <code>WHERE</code> clauses, as <code>CHAR</code> constants enclosed in single quotes.</p>
<p>Also refer to <a class="olink TTSQL150" href="../TTSQL/types.htm#TTSQL150">&#34;ROWID data type&#34;</a> and <a class="olink TTSQL195" href="../TTSQL/express.htm#TTSQL195">&#34;ROWID&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for additional information about rowids and the <code>ROWID</code> data type, including usage and life.</p>
</div>
<!-- class="sect3" -->
<a id="TTPLS377"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref125"></a>
<h4 class="sect3">LOB data types</h4>
<p>The LOB (large object) type family includes <code>CLOB</code> (character LOBs), <code>NCLOB</code> (national character LOBs), and <code>BLOB</code> (binary LOBs).</p>
<p>A LOB consists of a LOB locator and a LOB value. The locator acts as a handle to the value. When an application selects a LOB or passes a LOB as a parameter, for example, it is using the locator, not the actual value.</p>
<p>LOBs may be either persistent or temporary. A persistent LOB exists in the database, in a particular row of a LOB column. A temporary LOB is used internally within a program, but could then be inserted into a LOB column in the database to become a persistent LOB.</p>
<p>See <a class="olink TTSQL481" href="../TTSQL/types.htm#TTSQL481">&#34;LOB data types&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for additional information about LOBs in TimesTen.</p>
<p>Also see <a href="overview.htm#CEGFAEDJ">&#34;Large objects (LOBs)&#34;</a> for usage information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHEGAHD"></a><a id="TTPLS171"></a>
<div class="sect2"><!-- infolevel="all" infotype="Concept" -->
<h3 class="sect2">PL/SQL comp<a id="sthref126"></a><a id="sthref127"></a>osite data types</h3>
<p>Composite types have internal components that can be manipulated individually, such as the elements of an array, record, or table.</p>
<p>Oracle TimesTen In-Memory Database supports the following composite data types:</p>
<ul>
<li>
<p>Associative array (index-by table)</p>
</li>
<li>
<p>Nested table</p>
</li>
<li>
<p>Varray</p>
</li>
<li>
<p>Record</p>
</li>
</ul>
<p>Associative arrays, nested tables, and varrays are also referred to as <span class="italic">collections</span>.</p>
<p>The following sections discuss the use of composite data types:</p>
<ul>
<li>
<p><a href="#CIJEGABH">Using collections in PL/SQL</a></p>
</li>
<li>
<p><a href="#CIJCAAIG">Using records in PL/SQL</a></p>
</li>
<li>
<p><a href="#CIJBEIIF">Using associative arrays from applications</a></p>
</li>
</ul>
<p>See <a class="olink LNPLS005" href="../LNPLS/composites.htm#LNPLS005">&#34;PL/SQL Collections and Records&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span> for additional information.</p>
<a id="CIJEGABH"></a><a id="TTPLS172"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">U<a id="sthref128"></a><a id="sthref129"></a>sing c<a id="sthref130"></a><a id="sthref131"></a><a id="sthref132"></a><a id="sthref133"></a><a id="sthref134"></a><a id="sthref135"></a><a id="sthref136"></a><a id="sthref137"></a>ollections in PL/SQL</h4>
<p>You can declare collection data types similar to arrays, sets, and hash tables found in other languages. A collection is an ordered group of elements, all of the same type. Each element has a unique subscript that determines its position in the collection.</p>
<p>In PL/SQL, array types are known as <span class="italic">varrays</span> (variable size arrays), set types are known as <span class="italic">nested tables</span>, and hash table types are known as <span class="italic">associative arrays</span> or <span class="italic">index-by tables</span>. These are all collection types.</p>
<div class="example">
<p class="titleinexample"><a id="TTPLS173"></a><a id="sthref138"></a>Example 3-2 Using a PL/SQL collection type</p>
<p>This example declares collection type <code>staff_list</code> as a table of <code>employee_id</code>, then uses the collection type in a loop and in the <code>WHERE</code> clause of the <code>SELECT</code> statement.</p>
<pre>Command&gt; DECLARE
       &gt;   TYPE staff_list IS TABLE OF employees.employee_id%TYPE;
       &gt;   staff staff_list;
       &gt;   lname employees.last_name%TYPE;
       &gt;   fname employees.first_name%TYPE;
       &gt; BEGIN
       &gt;   staff := staff_list(100, 114, 115, 120, 122);
       &gt;   FOR i IN staff.FIRST..staff.LAST LOOP
       &gt;     SELECT last_name, first_name INTO lname, fname FROM employees
       &gt;       WHERE employees.employee_id = staff(i);
       &gt;     DBMS_OUTPUT.PUT_LINE (TO_CHAR(staff(i)) ||
       &gt;       &#39;: &#39; || lname || &#39;, &#39; || fname );
       &gt;     END LOOP;
       &gt; END;
       &gt; /
100: King, Steven
114: Raphaely, Den
115: Khoo, Alexander
120: Weiss, Matthew
122: Kaufling, Payam
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<p>Any collections can be passed between PL/SQL subprograms as parameters, but in TimesTen only associative arrays can be passed between PL/SQL and applications written in other languages. (See <a href="#CIJBEIIF">&#34;Using associative arrays from applications&#34;</a> below.)</p>
<p>You can use collections to move data in and out of TimesTen tables using bulk SQL.</p>
</div>
<!-- class="sect3" -->
<a id="CIJCAAIG"></a><a id="TTPLS174"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Us<a id="sthref139"></a><a id="sthref140"></a>ing records in PL/SQL</h4>
<p>Records are composite data structures that have fields with different data types. You can pass records to subprograms with a single parameter. You can also use the <code>%ROWTYPE</code> attribute to declare a record that represents a row in a table or a row from a query result set, without specifying the names and types for the fields, as shown in <a href="overview.htm#CEGIDCAF">Example 2-2</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CIJDDDHJ"></a><a id="TTPLS175"></a>Example 3-3 Declaring a record type</p>
<p>Declare various record types.</p>
<pre>Command&gt; DECLARE
       &gt;   TYPE timerec IS RECORD (hours SMALLINT, minutes SMALLINT);
       &gt;   TYPE meetin_typ IS RECORD (
       &gt;   date_held DATE,
       &gt;   duration timerec, -- nested record
       &gt;   location VARCHAR2(20),
       &gt;   purpose VARCHAR2(50));
       &gt; BEGIN
       &gt;   ...
       &gt; END;
       &gt; /
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIJBEIIF"></a><a id="TTPLS378"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using as<a id="sthref141"></a><a id="sthref142"></a><a id="sthref143"></a>sociative arrays from applications</h4>
<p>Associative arrays, formerly known as index-by tables or PL/SQL tables, are supported as <code>IN</code>, <code>OUT</code>, or <code>IN OUT</code> bind parameters in TimesTen PL/SQL, such as from an OCI, Pro*C/C++, or JDBC application. This enables arrays of data to be passed efficiently between an application and the database.</p>
<p>An associative array is a set of key-value pairs. In TimesTen, for associative array binding (but not for use of associative arrays only within PL/SQL), the keys, or indexes, must be integers (<code>BINARY_INTEGER</code> or <code>PLS_INTEGER</code>). The values must be simple scalar values of the same data type. For example, there could be an array of department managers indexed by department numbers. Indexes are stored in sort order, not creation order.</p>
<p>You can declare an associative array type and then an associative array in PL/SQL as in the following example (note the <code>INDEX BY</code>):</p>
<pre>declare
   TYPE VARCHARARRTYP IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
   x VARCHARARRTYP;
   ...
</pre>
<p>See <a href="#CIJHADCE">Example 3-4</a> below and <a href="sqlexamples.htm#CHDCDADF">&#34;Using associative arrays&#34;</a> for examples.</p>
<p>Also see <a class="olink TTCDV521" href="../TTCDV/oci.htm#TTCDV521">&#34;Associative array bindings in TimesTen OCI&#34;</a> and <a class="olink TTCDV538" href="../TTCDV/pro_c.htm#TTCDV538">&#34;Associative array bindings in TimesTen Pro*C/C++&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>, and <a class="olink TTJDV328" href="../TTJDV/writing_app.htm#TTJDV328">&#34;Binding associative arrays&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Java Developer&#39;s Guide</span>.</p>
<p>For general information about associative arrays, see <a class="olink LNPLS99969" href="../LNPLS/composites.htm#LNPLS99969">&#34;Associative Arrays&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span>.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
Note the following restrictions in TimesTen:
<ul>
<li>
<p>The following types are not supported in binding associative arrays: LOBs, REF CURSORs, <code>TIMESTAMP</code>, <code>ROWID</code>.</p>
</li>
<li>
<p>Associative array binding is not allowed in passthrough statements.</p>
</li>
<li>
<p>General bulk binding of arrays is not supported in TimesTen programmatic APIs. Varrays and nested tables are not supported as bind parameters.</p>
</li>
</ul>
</div>
<p>The following example does some simple manipulation of an associative array, effectively binding it from <code>ttIsql</code> and printing the array.</p>
<div class="example">
<p class="titleinexample"><a id="CIJHADCE"></a><a id="TTPLS379"></a>Example 3-4 Using an associative array from ttIsql</p>
<pre>Command&gt; var lngvc[1000] varchar2(30);
Command&gt; declare
&gt; TYPE VARCHARARRTYP IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
&gt; x VARCHARARRTYP;
&gt; begin
&gt;   x := :lngvc;
&gt;   x ( 1 ) := &#39;One&#39;;
&gt;   x ( 10 ) := &#39;Ten&#39;;
&gt;   :lngvc := x;
&gt; end;
&gt; /
 
PL/SQL procedure successfully completed.
 
Command&gt; print lngvc;
LNGVC                : ARRAY [ 1000 ] (Current Size 10)
LNGVC[1] : One
LNGVC[2] : &lt;NULL&gt;
LNGVC[3] : &lt;NULL&gt;
LNGVC[4] : &lt;NULL&gt;
LNGVC[5] : &lt;NULL&gt;
LNGVC[6] : &lt;NULL&gt;
LNGVC[7] : &lt;NULL&gt;
LNGVC[8] : &lt;NULL&gt;
LNGVC[9] : &lt;NULL&gt;
LNGVC[10] : Ten
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIJDIGEB"></a><a id="TTPLS176"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">PL<a id="sthref144"></a><a id="sthref145"></a><a id="sthref146"></a>/SQL REF CURSORs</h3>
<p>A REF CURSOR is a handle to a cursor over a SQL result set that can be passed as a parameter between PL/SQL and an application. TimesTen supports <code>OUT</code> REF CURSORs, from PL/SQL to the application. The application would open the REF CURSOR within PL/SQL, pass it from there through the applicable API, and fetch the result set.</p>
<p>TimesTen supports REF CURSORs in ODBC, JDBC, ODP.NET, OCI, Pro*C/C++, and TTClasses for either direct connections or client/server connections. REF CURSORs are also discussed in the following TimesTen documents:</p>
<ul>
<li>
<p><a class="olink TTCDV146" href="../TTCDV/writing_app.htm#TTCDV146">&#34;Working with REF CURSORs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span></p>
</li>
<li>
<p><a class="olink TTJDV159" href="../TTJDV/writing_app.htm#TTJDV159">&#34;Working with REF CURSORs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Java Developer&#39;s Guide</span></p>
</li>
<li>
<p><a class="olink TTCLS368" href="../TTCLS/usage.htm#TTCLS368">&#34;Working with REF CURSORs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database TTClasses Guide</span></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen supports one <code>OUT</code> REF CURSOR per statement.</div>
<p>You can define a REF CURSOR in PL/SQL in TimesTen as you would in Oracle Database. (See <a class="olink LNPLS00605" href="../LNPLS/static.htm#LNPLS00605">&#34;Cursor Variables&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span>.) It is typical to use REF CURSOR as a metatype, where you define a &#34;strong&#34; (specific) REF CURSOR type tailored to your data, then declare a cursor variable of that type. For example:</p>
<pre>Command&gt; DECLARE
       &gt;   TYPE DeptCurTyp IS REF CURSOR RETURN departments%ROWTYPE;
       &gt;   dept_cv  DeptCurTyp; -- declare cursor variable
       &gt; ...
</pre>
<div class="example">
<p class="titleinexample"><a id="TTPLS403"></a><a id="sthref147"></a>Example 3-5 Use a REF CURSOR as an output parameter</p>
<p>This example creates a procedure <code>GET_EMP</code> in a package <code>FOO_PACK</code> to retrieve information about employees from the <code>employees</code> table. The procedure declares a REF CURSOR type <code>cursor_out</code>, then uses that type for the output parameter.</p>
<p>First specify the package definition, REF CURSOR type, and procedure definition.</p>
<pre>create or replace package foo_pack is 
   type cursor_out is ref cursor;
   procedure get_emp (results out cursor_out);
end foo_pack;
</pre>
<p>Then specify the package body and procedure implementation.</p>
<pre>create or replace package body foo_pack as
   procedure get_emp (results out cursor_out) is
      begin
         open results for select employee_id, last_name from employees 
                          where employee_id &lt; 110 order by last_name;
      end get_emp;
end foo_pack;
</pre>
<p>Declare a REF CURSOR variable for the output, execute the procedure, and display the results. Note that outside of PL/SQL, you can declare only &#34;weak&#34; (generic) REF CURSORs.</p>
<pre>Command&gt; var proc_result refcursor;
Command&gt; exec foo_pack.get_emp(:proc_result);
 
PL/SQL procedure successfully completed.
 
Command&gt; print proc_result;
PROC_RESULT          :
&lt; 105, Austin &gt;
&lt; 102, De Haan &gt;
&lt; 104, Ernst &gt;
&lt; 109, Faviet &gt;
&lt; 108, Greenberg &gt;
&lt; 103, Hunold &gt;
&lt; 100, King &gt;
&lt; 101, Kochhar &gt;
&lt; 107, Lorentz &gt;
&lt; 106, Pataballa &gt;
10 rows found.
</pre></div>
<!-- class="example" -->
<p>Alternatively, you could declare a weakly typed REF CURSOR variable in <code>FOO_PACK</code>:</p>
<pre>create or replace package foo_pack is 
   procedure get_emp (results out sys_refcursor);
end foo_pack;
 
create or replace package body foo_pack as
   procedure get_emp (results out sys_refcursor) is
      begin
         open results for select employee_id, last_name from employees 
                          where employee_id &lt; 110 order by last_name;
      end get_emp;
end foo_pack;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCGHDEDD"></a><a id="TTPLS178"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Data type conversion</h2>
<p>This section covers the following data type conversions:</p>
<ul>
<li>
<p><a href="#CIJEEEGF">Conversion between PL/SQL data types</a></p>
</li>
<li>
<p><a href="#CIJGAJBC">Conversion between application data types and PL/SQL or SQL data types</a></p>
</li>
</ul>
<p>Also see type conversion information under <a href="#CIJJFEAD">&#34;Differences in TimesTen: data type considerations&#34;</a>.</p>
<a id="CIJEEEGF"></a><a id="TTPLS179"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Con<a id="sthref148"></a><a id="sthref149"></a>version between PL/SQL data types</h3>
<p>TimesTen supports implicit and explicit conversions between PL/SQL data types.</p>
<p>Consider this example: The variable <code>v_sal_hike</code> is of type <code>VARCHAR2</code>. When calculating the total salary, PL/SQL first converts <code>v_sal_hike</code> to <code>NUMBER</code> then performs the operation. The result is of type <code>NUMBER</code>. PL/SQL uses implicit conversion to obtain the correct result.</p>
<pre>Command&gt; DECLARE
       &gt;   v_salary NUMBER (6) := 6000;
       &gt;   v_sal_hike VARCHAR2(5) := &#39;1000&#39;;
       &gt;   v_total_salary v_salary%TYPE;
       &gt; BEGIN
       &gt; v_total_salary := v_salary + v_sal_hike;
       &gt; DBMS_OUTPUT.PUT_LINE (v_total_salary);
       &gt; end;
       &gt; /
7000

PL/SQL procedure successfully completed.
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#CIJIHGHG">&#34;Date and timestamp formats: NLS_DATE_FORMAT and NLS_TIMESTAMP_FORMAT&#34;</a>.</div>
</div>
<!-- class="sect2" -->
<a id="CIJGAJBC"></a><a id="TTPLS180"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Con<a id="sthref150"></a><a id="sthref151"></a>version between application data types and PL/SQL or SQL data types</h3>
<p>TimesTen supports data type conversions between application program data types and PL/SQL data types, and between application program data types and TimesTen SQL data types. For SQL, the conversions are the same whether SQL is invoked by your PL/SQL program or is invoked directly by your application.</p>
<p>As an example, <a href="#BABJJDGE">Table 3-4</a> shows a few representative data type mappings from an application using the ODBC API to PL/SQL program data types. For more information about ODBC-to-PL/SQL type mappings, refer to <a class="olink TTCDV505" href="../TTCDV/writing_app.htm#TTCDV505">&#34;Determination of parameter type assignments and type conversions&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLS181"></a><a id="sthref152"></a><a id="BABJJDGE"></a>Table 3-4 Sampling of ODBC SQL to PL/SQL type mapping</p>
<table class="cellalignment6349" title="Sampling of ODBC SQL to PL/SQL type mapping" summary="Type mappings from ODBC SQL to PL/SQL." dir="ltr">
<thead>
<tr class="cellalignment6338">
<th class="cellalignment6350" id="r1c1-t11">ODBC type</th>
<th class="cellalignment6350" id="r1c2-t11">PL/SQL type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r2c1-t11" headers="r1c1-t11">
<p><code>SQL_BINARY</code></p>
</td>
<td class="cellalignment6344" headers="r2c1-t11 r1c2-t11">
<p><code>RAW</code> (Bound precision is used.)</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r3c1-t11" headers="r1c1-t11">
<p><code>SQL_CHAR</code></p>
</td>
<td class="cellalignment6344" headers="r3c1-t11 r1c2-t11">
<p><code>CHAR</code> (Bound precision is used.)</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r4c1-t11" headers="r1c1-t11">
<p><code>SQL_DATE</code></p>
</td>
<td class="cellalignment6344" headers="r4c1-t11 r1c2-t11">
<p><code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r5c1-t11" headers="r1c1-t11">
<p><code>SQL_DECIMAL</code></p>
</td>
<td class="cellalignment6344" headers="r5c1-t11 r1c2-t11">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r6c1-t11" headers="r1c1-t11">
<p><code>SQL_DOUBLE</code></p>
</td>
<td class="cellalignment6344" headers="r6c1-t11 r1c2-t11">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r7c1-t11" headers="r1c1-t11">
<p><code>SQL_FLOAT</code></p>
</td>
<td class="cellalignment6344" headers="r7c1-t11 r1c2-t11">
<p><code>BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r8c1-t11" headers="r1c1-t11">
<p><code>SQL_INTEGER</code></p>
</td>
<td class="cellalignment6344" headers="r8c1-t11 r1c2-t11">
<p><code>PLS_INTEGER</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r9c1-t11" headers="r1c1-t11">
<p><code>SQL_REFCURSOR</code></p>
</td>
<td class="cellalignment6344" headers="r9c1-t11 r1c2-t11">
<p><code>REF CURSOR</code></p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r10c1-t11" headers="r1c1-t11">
<p><code>SQL_TIMESTAMP</code></p>
</td>
<td class="cellalignment6344" headers="r10c1-t11 r1c2-t11">
<p><code>TIMESTAMP</code> (Bound scale is used.)</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r11c1-t11" headers="r1c1-t11">
<p><code>SQL_VARCHAR</code></p>
</td>
<td class="cellalignment6344" headers="r11c1-t11 r1c2-t11">
<p><code>VARCHAR2</code> (Bound precision is used.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="example">
<p class="titleinexample"><a id="TTPLS182"></a><a id="sthref153"></a>Example 3-6 ODBC to PL/SQL data type conversions</p>
<p>Consider a scenario where your C program uses the ODBC API and your goal is to bind your C variable of type <code>VARCHAR2</code> to a PL/SQL variable of type <code>NUMBER</code>. TimesTen performs the implicit conversion for you.</p>
<pre>Command&gt; VARIABLE c_var VARCHAR2 (30) := &#39;961&#39;;
Command&gt; DECLARE v_var NUMBER;
       &gt; BEGIN
       &gt;   v_var := :c_var;
       &gt;   DBMS_OUTPUT.PUT_LINE (v_var);
       &gt; END;
       &gt; /
961
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="TTPLS183"></a><a id="sthref154"></a>Example 3-7 ODBC to TimesTen SQL data type conversions</p>
<p>This example creates a table with a column of type <code>TT_BIGINT</code> and uses PL/SQL to invoke the TimesTen SQL <code>INSERT</code> statement. A bind variable of type <code>SQL_VARCHAR</code> is used in the <code>INSERT</code> statement. The conversions are the same as the conversions that would occur if your application invoked the <code>INSERT</code> statement directly.</p>
<pre>Command&gt; CREATE TABLE conversion_test2 (Col1 TT_BIGINT);
Command&gt;  VARIABLE v_var VARCHAR2 (100) := &#39;1000&#39;;
Command&gt;  BEGIN
       &gt;   INSERT INTO conversion_test2 VALUES (:v_var);
       &gt;  END;
       &gt;  /
 
PL/SQL procedure successfully completed.

Command&gt; SELECT * FROM conversion_test2;
&lt; 1000 &gt;
1 row found.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIJJFEAD"></a><a id="TTPLS184"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Dif<a id="sthref155"></a><a id="sthref156"></a><a id="sthref157"></a>ferences in TimesTen: data type considerations</h2>
<p>This section covers the following TimesTen-specific considerations regarding data type support and type conversions:</p>
<ul>
<li>
<p><a href="#CIJJJCDH">Conversion between PL/SQL and TimesTen SQL data types</a></p>
</li>
<li>
<p><a href="#CIJIHGHG">Date and timestamp formats: NLS_DATE_FORMAT and NLS_TIMESTAMP_FORMAT</a></p>
</li>
<li>
<p><a href="#CIJEHIHJ">Non-supported data types</a></p>
</li>
<li>
<p><a href="#CIJBGACH">Zero-length strings in TimesTen type mode</a></p>
</li>
</ul>
<a id="CIJJJCDH"></a><a id="TTPLS185"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Con<a id="sthref158"></a><a id="sthref159"></a>version between PL/SQL and TimesTen SQL data types</h3>
<p>TimesTen supports conversions between PL/SQL data types and TimesTen SQL data types.</p>
<p><a href="#BCGBJEHF">Table 3-5</a> shows supported data type conversions, with PL/SQL types along the top and SQL types down the left side. The data types are grouped by data type families, with columns referring to PL/SQL type families and rows referring to TimesTen type families. &#34;Y&#34; indicates that a conversion is possible between the two families. Supported conversions are bidirectional.</p>
<div class="tblhruleformalwide">
<p class="titleintable"><a id="TTPLS186"></a><a id="sthref160"></a><a id="BCGBJEHF"></a>Table 3-5 Supported conversions between PL/SQL and TimesTen SQL data types</p>
<table class="cellalignment6349" title="Supported conversions between PL/SQL and TimesTen SQL data types" summary="This table summarizes the data type conversions between PL/SQL and TimesTen SQL." dir="ltr">
<thead>
<tr class="cellalignment6338">
<th class="cellalignment6350" id="r1c1-t12">Type Family</th>
<th class="cellalignment6350" id="r1c2-t12">NUMERIC</th>
<th class="cellalignment6350" id="r1c3-t12">CHARACTER</th>
<th class="cellalignment6350" id="r1c4-t12">BINARY</th>
<th class="cellalignment6350" id="r1c5-t12">DATETIME</th>
<th class="cellalignment6350" id="r1c6-t12">INTERVAL</th>
<th class="cellalignment6350" id="r1c7-t12">ROWID</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r2c1-t12" headers="r1c1-t12">
<p><code>NUMERIC</code></p>
</td>
<td class="cellalignment6344" headers="r2c1-t12 r1c2-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r2c1-t12 r1c3-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r2c1-t12 r1c4-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r2c1-t12 r1c5-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r2c1-t12 r1c6-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r2c1-t12 r1c7-t12">&nbsp;</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r3c1-t12" headers="r1c1-t12">
<p><code>CHARACTER</code></p>
</td>
<td class="cellalignment6344" headers="r3c1-t12 r1c2-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r3c1-t12 r1c3-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r3c1-t12 r1c4-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r3c1-t12 r1c5-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r3c1-t12 r1c6-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r3c1-t12 r1c7-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r4c1-t12" headers="r1c1-t12">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment6344" headers="r4c1-t12 r1c2-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r4c1-t12 r1c3-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r4c1-t12 r1c4-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r4c1-t12 r1c5-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r4c1-t12 r1c6-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r4c1-t12 r1c7-t12">&nbsp;</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r5c1-t12" headers="r1c1-t12">
<p><code>TIME</code></p>
</td>
<td class="cellalignment6344" headers="r5c1-t12 r1c2-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r5c1-t12 r1c3-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r5c1-t12 r1c4-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r5c1-t12 r1c5-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r5c1-t12 r1c6-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r5c1-t12 r1c7-t12">&nbsp;</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r6c1-t12" headers="r1c1-t12">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment6344" headers="r6c1-t12 r1c2-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r6c1-t12 r1c3-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r6c1-t12 r1c4-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r6c1-t12 r1c5-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r6c1-t12 r1c6-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r6c1-t12 r1c7-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r7c1-t12" headers="r1c1-t12">
<p><code>BINARY</code></p>
</td>
<td class="cellalignment6344" headers="r7c1-t12 r1c2-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r7c1-t12 r1c3-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r7c1-t12 r1c4-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
<td class="cellalignment6344" headers="r7c1-t12 r1c5-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r7c1-t12 r1c6-t12">&nbsp;</td>
<td class="cellalignment6344" headers="r7c1-t12 r1c7-t12">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" -->
<p><a href="#BCGFBBJI">Table 3-6</a> that follows summarizes the TimesTen data types and suggestions for PL/SQL type mappings.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLS187"></a><a id="sthref161"></a><a id="BCGFBBJI"></a>Table 3-6 Data type usage and sizes</p>
<table class="cellalignment6349" title="Data type usage and sizes" summary="This table summarizes the data type mappings." dir="ltr">
<thead>
<tr class="cellalignment6338">
<th class="cellalignment6350" id="r1c1-t13">TimesTen data type</th>
<th class="cellalignment6350" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r2c1-t13" headers="r1c1-t13">
<p><code>TT_TINYINT</code></p>
</td>
<td class="cellalignment6344" headers="r2c1-t13 r1c2-t13">
<p>This is for unsigned integers ranging from 0 to 255.</p>
<p>Numeric overflows can occur if you insert a value with type PL/SQL <code>NUMBER</code> or PL/SQL <code>PLS_INTEGER</code> (or <code>BINARY_INTEGER</code>) into a <code>TT_TINYINT</code> column.</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r3c1-t13" headers="r1c1-t13">
<p><code>TT_SMALLINT</code></p>
</td>
<td class="cellalignment6344" headers="r3c1-t13 r1c2-t13">
<p>This is for signed 16-bit integers in the range -32,768 to 32,767.</p>
<p>Numeric overflows can occur if you insert a value with type PL/SQL <code>NUMBER</code> or PL/SQL <code>PLS_INTEGER</code> (or <code>BINARY_INTEGER</code>) into a <code>TT_SMALLINT</code> column.</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r4c1-t13" headers="r1c1-t13">
<p><code>TT_INTEGER</code></p>
</td>
<td class="cellalignment6344" headers="r4c1-t13 r1c2-t13">
<p>This is for signed integers in the range -2,147,483,648 to 2,147,483,647.</p>
<p>This is equivalent to <code>PLS_INTEGER</code>.</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r5c1-t13" headers="r1c1-t13">
<p><code>TT_BIGINT</code></p>
</td>
<td class="cellalignment6344" headers="r5c1-t13 r1c2-t13">
<p>This is for signed eight-byte integers in the range -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.</p>
<p>Use PL/SQL <code>NUMBER</code>. A PL/SQL <code>PLS_INTEGER</code> (or <code>BINARY_INTEGER</code>) variable could overflow.</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r6c1-t13" headers="r1c1-t13">
<p><code>NUMBER</code>, <code>BINARY_FLOAT</code>, <code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment6344" headers="r6c1-t13 r1c2-t13">
<p>Use when floating point precision is required.</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r7c1-t13" headers="r1c1-t13">
<p>Character types</p>
</td>
<td class="cellalignment6344" headers="r7c1-t13 r1c2-t13">
<p>All PL/SQL character types can hold up to 32,767 bytes of data.</p>
<ul>
<li>
<p>TimesTen <code>CHAR</code> can hold up to 8300 bytes.</p>
</li>
<li>
<p>TimesTen <code>NCHAR</code> can hold up to 4150 characters (8300 bytes).</p>
</li>
<li>
<p>TimesTen <code>VARCHAR2</code> can hold up to 4,194,304 bytes.</p>
</li>
<li>
<p>TimesTen <code>NVARCHAR2</code> can hold up to 2,097,152 characters (4,194,304 bytes).</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r8c1-t13" headers="r1c1-t13">
<p>Datetime, interval, and time types</p>
</td>
<td class="cellalignment6344" headers="r8c1-t13 r1c2-t13">
<p>Use the <code>TO_CHAR</code> and <code>TO_DATE</code> built-in functions when you require a format that is different than the default format used when converting these types to and from character types.</p>
</td>
</tr>
<tr class="cellalignment6338">
<td class="cellalignment6344" id="r9c1-t13" headers="r1c1-t13">
<p>Binary types</p>
</td>
<td class="cellalignment6344" headers="r9c1-t13 r1c2-t13">
<ul>
<li>
<p>TimesTen <code>BINARY</code> can hold up to 8300 bytes.</p>
</li>
<li>
<p>TimesTen <code>VARBINARY</code> can hold up to 4,194,304 bytes.</p>
</li>
<li>
<p><code>RAW</code> and <code>LONG RAW</code> can hold up to 32,767 bytes.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">No<a id="sthref162"></a>te:</p>
See <a href="#CIJEHIHJ">&#34;Non-supported data types&#34;</a>.</div>
<div class="example">
<p class="titleinexample"><a id="TTPLS188"></a><a id="sthref163"></a>Example 3-8 Conversions between TimesTen SQL data types and PL/SQL data types</p>
<p>Consider the case where you have a table with two columns. <code>Col1</code> has a data type of <code>TT_INTEGER</code> and <code>Col2</code> has a data type of <code>NUMBER</code>. In your PL/SQL program, you declare two variables: <code>v_var1</code> of type <code>PLS_INTEGER</code> and <code>v_var2</code> of type <code>VARCHAR2</code>. The goal is to <code>SELECT</code> the row of data from your table into the two PL/SQL variables.</p>
<p>Data type conversions occur when you execute the <code>SELECT</code> statement. <code>Col1</code> is converted from a TimesTen SQL <code>TT_INTEGER</code> type into a <code>PLS_INTEGER</code> type. <code>Col2</code> is converted from a TimesTen SQL <code>NUMBER</code> type into a PL/SQL <code>VARCHAR2</code> type. The query executes successfully.</p>
<pre>Command&gt; CREATE TABLE test_conversion (Col1 TT_INTEGER, Col2 NUMBER);
Command&gt; INSERT INTO test_conversion VALUES (100, 20);
1 row inserted.

Command&gt;  DECLARE
       &gt;   v_var1 PLS_INTEGER;
       &gt;   v_var2 VARCHAR2 (100);
       &gt;  BEGIN
       &gt;   SELECT Col1, Col2 INTO v_var1, v_var2 FROM test_conversion;
       &gt;  DBMS_OUTPUT.PUT_LINE (v_var1);
       &gt;  DBMS_OUTPUT.PUT_LINE (v_var2);
       &gt; END;
       &gt; /
100
20
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIJIHGHG"></a><a id="TTPLS189"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Da<a id="sthref164"></a><a id="sthref165"></a><a id="sthref166"></a><a id="sthref167"></a>te and timestamp formats: NLS_DATE_FORMAT and NLS_TIMESTAMP_FORMAT</h3>
<p>TimesTen does not support user-specified <code>NLS_DATE_FORMAT</code> and <code>NLS_TIMESTAMP_FORMAT</code> settings.</p>
<ul>
<li>
<p><code>NLS_DATE_FORMAT</code> is always &#39;<code><span class="codeinlineitalic">yyyy-mm-dd</span></code>&#39;.</p>
</li>
<li>
<p><code>NLS_TIMESTAMP_FORMAT</code> is always &#39;<code><span class="codeinlineitalic">yyyy-mm-dd hh:mi:ss.ff6</span></code>&#39; (fractional seconds to six decimal places).</p>
</li>
</ul>
<p>You can use the SQL and PL/SQL <code>TO_DATE</code> and <code>TO_CHAR</code> functions to specify other desired formats. See <a class="olink TTSQL194" href="../TTSQL/express.htm#TTSQL194">&#34;Expressions&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for details of these functions.</p>
</div>
<!-- class="sect2" -->
<a id="CIJEHIHJ"></a><a id="TTPLS190"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">No<a id="sthref168"></a>n-supported data types</h3>
<p>Note the following non-support of data types:</p>
<ul>
<li>
<p>PL/SQL data type categories: PL/SQL in TimesTen does not support Internet data types (<code>XMLType</code>, <code>URIType</code>, <code>HttpURIType</code>) or &#34;Any&#34; data types (<code>AnyType</code>, <code>AnyData</code>, <code>AnyDataSet</code>).</p>
</li>
<li>
<p>PL/SQL scalar data types: TimesTen does not support the PL/SQL data types <code>TIMESTAMP WITH [LOCAL] TIME ZONE</code> and <code>UROWID</code>.</p>
</li>
<li>
<p>TimesTen PL/SQL does not support the TimesTen type <code>TT_DECIMAL</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIJBGACH"></a><a id="TTPLS402"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Zero-length strings in TimesTen type mode</h3>
<p>In TimesTen type mode, still supported for backward compatibility, the string value &#34;&#34; is considered by TimesTen to be an empty, zero-length string, but not a null value. In PL/SQL, however, a zero-length string is always considered to be null. If a parameter with a value of empty string is passed to a SQL statement that is executed in PL/SQL, the parameter is converted to <code>NULL</code> by PL/SQL before the SQL statement is passed to TimesTen.</p>
<p>See <a class="olink TTSQL182" href="../TTSQL/types.htm#TTSQL182">&#34;TimesTen type mode (backward compatibility)&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for information about this mode.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6337">
<tr>
<td class="cellalignment6344">
<table class="cellalignment6348">
<tr>
<td class="cellalignment6341"><a href="overview.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6341"><a href="exceptions.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6346">
<table class="cellalignment6347">
<tr>
<td class="cellalignment6341"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6341"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6341"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6341"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6341"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6341"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>