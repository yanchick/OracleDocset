<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79140"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/OracleIntervalYM%20Structure"></a><title>OracleIntervalYM Structure</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-10-14T19:43:32Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Data Provider for .NET Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17732-11"/>
<meta name="dcterms.isVersionOf" content="ODPNT"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="OracleIntervalDSStructure.htm" title="Previous" type="text/html"/>
<link rel="Next" href="OracleStringStructure.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17732-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">139/172</span> <!-- End Header --><a id="i1009021"></a>
<div id="ODPNT5803" class="refsect1">
<h1 class="refsect1"><a id="sthref1475"></a>OracleIntervalYM Structure</h1>
<p>The <code>OracleIntervalYM</code> structure represents the Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> data type to be stored in or retrieved from a database. Each <code>OracleIntervalYM</code> stores a period of time in years and months.</p>
<p class="subhead2"><a id="ODPNT5804"></a>Class Inheritance</p>
<p><code>System.Object</code></p>
<p><code>&nbsp;&nbsp;System.ValueType</code></p>
<p><code>&nbsp;&nbsp;&nbsp;&nbsp;Oracle.DataAccess.Types.OracleIntervalYM</code></p>
<p class="subhead2"><a id="ODPNT5805"></a>Declaration</p>
<pre>// C#
public struct OracleIntervalYM : IComparable
</pre>
<p class="subhead2"><a id="ODPNT8236"></a>Requirements</p>
<div class="inftblinformal">
<table class="cellalignment4229" summary="requirements" dir="ltr">
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r1c1-t398"><span class="bold">Provider</span></td>
<td class="cellalignment4226"><span class="bold">ODP.NET, Unmanaged Driver</span></td>
<td class="cellalignment4226"><span class="bold">ODP.NET, Managed Driver</span></td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t398"><span class="bold">Assembly</span></td>
<td class="cellalignment4226" headers="r2c1-t398"><code>Oracle.DataAccess.dll</code></td>
<td class="cellalignment4226" headers="r2c1-t398"><code>Oracle.ManagedDataAccess.dll</code></td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t398"><span class="bold">Namespace</span></td>
<td class="cellalignment4226" headers="r3c1-t398"><code>Oracle.DataAccess.Types</code></td>
<td class="cellalignment4226" headers="r3c1-t398"><code>Oracle.ManagedDataAccess.Types</code></td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t398"><span class="bold">.NET Framework</span></td>
<td class="cellalignment4226" headers="r4c1-t398">3.5, 4.0, 4.5</td>
<td class="cellalignment4226" headers="r4c1-t398">4.0, 4.5</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead2"><a id="ODPNT5806"></a>Thread Safety</p>
<p>All public static methods are thread-safe, although instance methods do not guarantee thread safety.</p>
<p class="subhead2"><a id="ODPNT5807"></a>Example</p>
<pre>// C#
 
using System;
using Oracle.DataAccess.Types;
 
class OracleIntervalYMSample
{
  static void Main()
  {
    OracleIntervalYM iYMMax = OracleIntervalYM.MaxValue;
    double totalYears = iYMMax.TotalYears;
 
    totalYears -= 1;
    OracleIntervalYM iYMMax_1 = new OracleIntervalYM(totalYears);
    
    // Calculate the difference
    OracleIntervalYM iYMDiff = iYMMax - iYMMax_1;
    
    // Prints &#34;iYMDiff.ToString() = +000000001-00&#34;
    Console.WriteLine(&#34;iYMDiff.ToString() = &#34; + iYMDiff.ToString());
  }
}
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
<li>
<p><a href="#i1009509">OracleIntervalYM Constructors</a></p>
</li>
<li>
<p><a href="#i1009717">OracleIntervalYM Static Fields</a></p>
</li>
<li>
<p><a href="#i1009884">OracleIntervalYM Static Methods</a></p>
</li>
<li>
<p><a href="#i1010262">OracleIntervalYM Static Operators</a></p>
</li>
<li>
<p><a href="#i1010751">OracleIntervalYM Type Conversions</a></p>
</li>
<li>
<p><a href="#i1010907">OracleIntervalYM Properties</a></p>
</li>
<li>
<p><a href="#i1011154">OracleIntervalYM Methods</a></p>
</li>
</ul>
</div>
<div id="ODPNT5809" class="refsect2"><a id="i1009097"></a>
<h2 class="refsect2">OracleIntervalYM Members<a id="sthref1476"></a></h2>
<p><code>OracleIntervalYM</code> members are listed in the following tables:</p>
<p class="subhead1"><a id="ODPNT5810"></a>OracleIntervalYM Constructors</p>
<p><code>OracleIntervalYM</code> constructors are listed in <a href="#g1309141">Table 14-74</a></p>
<div id="ODPNT5811" class="tblruleformal">
<p class="titleintable"><a id="sthref1477"></a><a id="g1309141"></a>Table 14-74 OracleIntervalYM Constructors</p>
<table class="cellalignment4229" title="OracleIntervalYM Constructors" summary="Rows are constructors. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t400">Constructor</th>
<th class="cellalignment4230" id="r1c2-t400">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t400" headers="r1c1-t400">
<p><a href="#i1009509">OracleIntervalYM Constructors</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t400 r1c2-t400">
<p>Instantiates a new instance of <code>OracleIntervalYM</code> structure (Overloaded)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p class="subhead1"><a id="ODPNT5812"></a>OracleIntervalYM Static Fields</p>
<p>The <code>OracleIntervalYM</code> static fields are listed in <a href="#g1309151">Table 14-75</a>.</p>
<div id="ODPNT5813" class="tblruleformal">
<p class="titleintable"><a id="sthref1478"></a><a id="g1309151"></a>Table 14-75 OracleIntervalYM Static Fields</p>
<table class="cellalignment4229" title="OracleIntervalYM Static Fields " summary="Rows are static fields. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t401">Field</th>
<th class="cellalignment4230" id="r1c2-t401">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t401" headers="r1c1-t401">
<p><a href="#i1009784">MaxValue</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t401 r1c2-t401">
<p>Represents the maximum value for an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t401" headers="r1c1-t401">
<p><a href="#i1009810">MinValue</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t401 r1c2-t401">
<p>Represents the minimum value for an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t401" headers="r1c1-t401">
<p><a href="#i1009836">Null</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t401 r1c2-t401">
<p>Represents a null value that can be assigned to an <code>OracleIntervalYM</code> instance</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t401" headers="r1c1-t401">
<p><a href="#i1009860">Zero</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t401 r1c2-t401">
<p>Represents a zero value for an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p class="subhead1"><a id="ODPNT5814"></a>OracleIntervalYM Static Methods</p>
<p>The <code>OracleIntervalYM</code> static methods are listed in <a href="#g1309170">Table 14-76</a>.</p>
<div id="ODPNT5815" class="tblruleformal">
<p class="titleintable"><a id="sthref1479"></a><a id="g1309170"></a>Table 14-76 OracleIntervalYM Static Methods</p>
<table class="cellalignment4229" title="OracleIntervalYM Static Methods " summary="Rows are static methods. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t402">Methods</th>
<th class="cellalignment4230" id="r1c2-t402">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t402" headers="r1c1-t402">
<p><a href="#CJAFGEJF">Equals</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t402 r1c2-t402">
<p>Determines whether or not two <code>OracleIntervalYM</code> values are equal (Overloaded)</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t402" headers="r1c1-t402">
<p><a href="#i1010014">GreaterThan</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t402 r1c2-t402">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t402" headers="r1c1-t402">
<p><a href="#i1010049">GreaterThanOrEqual</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t402 r1c2-t402">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t402" headers="r1c1-t402">
<p><a href="#i1010084">LessThan</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t402 r1c2-t402">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t402" headers="r1c1-t402">
<p><a href="#i1010119">LessThanOrEqual</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t402 r1c2-t402">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t402" headers="r1c1-t402">
<p><a href="#i1010154">NotEquals</a></p>
</td>
<td class="cellalignment4226" headers="r7c1-t402 r1c2-t402">
<p>Determines whether two <code>OracleIntervalYM</code> values are not equal</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r8c1-t402" headers="r1c1-t402">
<p><a href="#i1010189">Parse</a></p>
</td>
<td class="cellalignment4226" headers="r8c1-t402 r1c2-t402">
<p>Returns an <code>OracleIntervalYM</code> structure and sets its value for time interval using a string</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r9c1-t402" headers="r1c1-t402">
<p><a href="#i1010225">SetPrecision</a></p>
</td>
<td class="cellalignment4226" headers="r9c1-t402 r1c2-t402">
<p>Returns a new instance of an <code>OracleIntervalYM</code> with the specified year precision.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p class="subhead1"><a id="ODPNT5816"></a>OracleIntervalYM Static Operators</p>
<p>The <code>OracleIntervalYM</code> static operators are listed in <a href="#g1309201">Table 14-77</a>.</p>
<div id="ODPNT5817" class="tblruleformal">
<p class="titleintable"><a id="sthref1480"></a><a id="g1309201"></a>Table 14-77 OracleIntervalYM Static Operators</p>
<table class="cellalignment4229" title="OracleIntervalYM Static Operators " summary="Rows are static operators. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t403">Operator</th>
<th class="cellalignment4230" id="r1c2-t403">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t403" headers="r1c1-t403">
<p><a href="#i1010378">operator +</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t403 r1c2-t403">
<p>Adds two <code>OracleIntervalYM</code> values</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t403" headers="r1c1-t403">
<p><a href="#i1010411">operator ==</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t403 r1c2-t403">
<p>Determines whether or not two <code>OracleIntervalYM</code> values are equal</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t403" headers="r1c1-t403">
<p><a href="#i1010446">operator &gt;</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t403 r1c2-t403">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t403" headers="r1c1-t403">
<p><a href="#i1010481">operator &gt;=</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t403 r1c2-t403">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t403" headers="r1c1-t403">
<p><a href="#i1010516">operator !=</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t403 r1c2-t403">
<p>Determines whether two <code>OracleIntervalYM</code> values are not equal</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t403" headers="r1c1-t403">
<p><a href="#i1010551">operator &lt;</a></p>
</td>
<td class="cellalignment4226" headers="r7c1-t403 r1c2-t403">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r8c1-t403" headers="r1c1-t403">
<p><a href="#CJAJIIFB">operator &lt;=</a></p>
</td>
<td class="cellalignment4226" headers="r8c1-t403 r1c2-t403">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r9c1-t403" headers="r1c1-t403">
<p><a href="#i1010621">operator -</a></p>
</td>
<td class="cellalignment4226" headers="r9c1-t403 r1c2-t403">
<p>Subtracts one <code>OracleIntervalYM</code> value from another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r10c1-t403" headers="r1c1-t403">
<p><a href="#i1010654">operator -</a></p>
</td>
<td class="cellalignment4226" headers="r10c1-t403 r1c2-t403">
<p>Negates an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r11c1-t403" headers="r1c1-t403">
<p><a href="#i1010685">operator *</a></p>
</td>
<td class="cellalignment4226" headers="r11c1-t403 r1c2-t403">
<p>Multiplies an <code>OracleIntervalYM</code> value by a number</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r12c1-t403" headers="r1c1-t403">
<p><a href="#i1010718">operator /</a></p>
</td>
<td class="cellalignment4226" headers="r12c1-t403 r1c2-t403">
<p>Divides an <code>OracleIntervalYM</code> value by a number</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p class="subhead1"><a id="ODPNT5818"></a>OracleIntervalYM Type Conversions</p>
<p>The <code>OracleIntervalYM</code> conversions are listed in <a href="#g1309241">Table 14-78</a>.</p>
<div id="ODPNT5819" class="tblruleformal">
<p class="titleintable"><a id="sthref1481"></a><a id="g1309241"></a>Table 14-78 OracleIntervalYM Type Conversions</p>
<table class="cellalignment4229" title="OracleIntervalYM Type Conversions " summary="Rows are type conversions. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t404">Operator</th>
<th class="cellalignment4230" id="r1c2-t404">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t404" headers="r1c1-t404">
<p><a href="#i1010811">explicit operator long</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t404 r1c2-t404">
<p>Converts an <code>OracleIntervalYM</code> structure to a number</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t404" headers="r1c1-t404">
<p><a href="#i1010842">explicit operator OracleIntervalYM</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t404 r1c2-t404">
<p>Converts a string to an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t404" headers="r1c1-t404">
<p><a href="#i1010876">implicit operator OracleIntervalYM</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t404 r1c2-t404">
<p>Converts the number of months to an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p class="subhead1"><a id="ODPNT5820"></a>OracleIntervalYM Properties</p>
<p>The <code>OracleIntervalYM</code> properties are listed in <a href="#g1309257">Table 14-79</a>.</p>
<div id="ODPNT5821" class="tblruleformal">
<p class="titleintable"><a id="sthref1482"></a><a id="g1309257"></a>Table 14-79 OracleIntervalYM Properties</p>
<table class="cellalignment4229" title="OracleIntervalYM Properties " summary="Rows are properties. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t405">Properties</th>
<th class="cellalignment4230" id="r1c2-t405">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t405" headers="r1c1-t405">
<p><a href="#i1010988">BinData</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t405 r1c2-t405">
<p>Returns an array of bytes that represents the Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> in an Oracle internal format</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t405" headers="r1c1-t405">
<p><a href="#i1011016">IsNull</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t405 r1c2-t405">
<p>Indicates whether or not the current instance has a null value</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t405" headers="r1c1-t405">
<p><a href="#i1011042">Months</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t405 r1c2-t405">
<p>Gets the months component of an <code>OracleIntervalYM</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t405" headers="r1c1-t405">
<p><a href="#i1011070">TotalYears</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t405 r1c2-t405">
<p>Returns the total number, in years, that represents the period of time in the current <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t405" headers="r1c1-t405">
<p><a href="#i1011098">Value</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t405 r1c2-t405">
<p>Specifies the total number of months that is stored in the <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t405" headers="r1c1-t405">
<p><a href="#i1011126">Years</a></p>
</td>
<td class="cellalignment4226" headers="r7c1-t405 r1c2-t405">
<p>Gets the years component of an <code>OracleIntervalYM</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p class="subhead1"><a id="ODPNT5822"></a>OracleIntervalYM Methods</p>
<p>The <code>OracleIntervalYM</code> methods are listed in <a href="#g1309282">Table 14-80</a>.</p>
<div id="ODPNT5823" class="tblruleformal">
<p class="titleintable"><a id="sthref1483"></a><a id="g1309282"></a>Table 14-80 OracleIntervalYM Methods</p>
<table class="cellalignment4229" title="OracleIntervalYM Methods " summary="Rows are methods. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t406">Methods</th>
<th class="cellalignment4230" id="r1c2-t406">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t406" headers="r1c1-t406">
<p><a href="#i1011225">CompareTo</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t406 r1c2-t406">
<p>Compares the current <code>OracleIntervalYM</code> instance to the supplied object, and returns an integer that represents their relative values</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t406" headers="r1c1-t406">
<p><a href="#i1011266">Equals</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t406 r1c2-t406">
<p>Determines whether or not the specified <code>object</code> has the same time interval as the current instance (Overloaded)</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t406" headers="r1c1-t406">
<p><a href="#i1011300">GetHashCode</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t406 r1c2-t406">
<p>Returns a hash code for the <code>OracleIntervalYM</code> instance</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t406" headers="r1c1-t406">
<p>GetType</p>
</td>
<td class="cellalignment4226" headers="r5c1-t406 r1c2-t406">
<p>Inherited from <code>System.Object</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t406" headers="r1c1-t406">
<p><a href="#i1011327">ToString</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t406 r1c2-t406">
<p>Converts the current <code>OracleIntervalYM</code> structure to a string</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" -->
<div id="ODPNT5824" class="refsect2"><a id="i1009509"></a>
<h2 class="refsect2">OracleIntervalYM Constructors<a id="sthref1484"></a></h2>
<p>The <code>OracleIntervalYM</code> constructors creates a new instance of the <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5825"></a>Overload List:</p>
<ul>
<li>
<p><a href="#i1009557">OracleIntervalYM(long)</a></p>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure using the supplied total number of months for a period of time.</p>
</li>
<li>
<p><a href="#i1009586">OracleIntervalYM(string)</a></p>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value using the supplied string.</p>
</li>
<li>
<p><a href="#i1009620">OracleIntervalYM(double)</a></p>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value using the total number of years.</p>
</li>
<li>
<p><a href="#i1009650">OracleIntervalYM(int, int)</a></p>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value using years and months.</p>
</li>
<li>
<p><a href="#i1009684">OracleIntervalYM(byte[ ])</a></p>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value to the provided byte array, which is in an internal Oracle <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> format.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
<div id="ODPNT5826" class="refsect3"><a id="i1009557"></a>
<h3 class="refsect3">OracleIntervalYM(long)</h3>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure using the supplied total number of months for a period of time.</p>
<p class="subhead2"><a id="ODPNT5827"></a>Declaration</p>
<pre>// C#
public OracleIntervalYM (long <span class="italic">totalMonths</span>); 
</pre>
<p class="subhead2"><a id="ODPNT5828"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">totalMonths</span></code></p>
<p>The number of total months for a time interval. Range is -12,000,000,000 &lt; <code><span class="codeinlineitalic">totalMonths</span></code> &lt; 12,000,000,000.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5829"></a>Exceptions</p>
<p><code>ArgumentOutOfRangeException</code> - The <code><span class="codeinlineitalic">totalMonths</span></code> parameter is out of the specified range.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5830" class="refsect3"><a id="i1009586"></a>
<h3 class="refsect3">OracleIntervalYM(string)</h3>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value using the supplied string.</p>
<p class="subhead2"><a id="ODPNT5831"></a>Declaration</p>
<pre>// C#
public OracleIntervalYM (string <span class="italic">intervalStr</span>); 
</pre>
<p class="subhead2"><a id="ODPNT5832"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">intervalStr</span></code></p>
<p>A string representing the Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5833"></a>Remarks</p>
<p>The value specified in the supplied <code><span class="codeinlineitalic">intervalStr</span></code> must be in Year-Month format.</p>
<p class="subhead2"><a id="ODPNT5834"></a>Exceptions</p>
<p><code>ArgumentException</code> - The <code><span class="codeinlineitalic">intervalStr</span></code> parameter is not in the valid format or <code><span class="codeinlineitalic">intervalStr</span></code> has an invalid value.</p>
<p><code>ArgumentNullException</code> - The <code><span class="codeinlineitalic">intervalStr</span></code> parameter is null.</p>
<p class="subhead2"><a id="ODPNT5835"></a>Example</p>
<p>&#34;1-2&#34; means 1 year and 2 months.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5836" class="refsect3"><a id="i1009620"></a>
<h3 class="refsect3">OracleIntervalYM(double)</h3>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value using the total number of years.</p>
<p class="subhead2"><a id="ODPNT5837"></a>Declaration</p>
<pre>// C#
public OracleIntervalYM (double <span class="italic">totalYears</span>);
</pre>
<p class="subhead2"><a id="ODPNT5838"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">totalYears</span></code></p>
<p>Number of total years. Range is -1,000,000,000 &lt; <code><span class="codeinlineitalic">totalYears</span></code> &gt; 1,000,000,000.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5839"></a>Exceptions</p>
<p><code>ArgumentOutOfRangeException</code> - The <code><span class="codeinlineitalic">totalYears</span></code> parameter is out of the specified range.</p>
<p><code>ArgumentException</code> - The <code><span class="codeinlineitalic">totalYears</span></code> parameter cannot be used to construct a valid <code>OracleIntervalYM</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5840" class="refsect3"><a id="i1009650"></a>
<h3 class="refsect3">OracleIntervalYM(int, int)</h3>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value using years and months.</p>
<p class="subhead2"><a id="ODPNT5841"></a>Declaration</p>
<pre>// C#
public OracleIntervalYM (int <span class="italic">years</span>, int <span class="italic">months</span>); 
</pre>
<p class="subhead2"><a id="ODPNT5842"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">years</span></code></p>
<p>Number of years. Range of year is (-999,999,999 to 999,999,999).</p>
</li>
<li>
<p><code><span class="codeinlineitalic">months</span></code></p>
<p>Number of months. Range of month is (-11 to 11).</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5843"></a>Remarks</p>
<p>The sign of all the arguments must be the same.</p>
<p class="subhead2"><a id="ODPNT5844"></a>Exceptions</p>
<p><code>ArgumentOutOfRangeException</code> - The argument value for one or more of the parameters is out of the specified range.</p>
<p><code>ArgumentException</code> - The argument values of the parameters cannot be used to construct a valid <code>OracleIntervalYM</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5845" class="refsect3"><a id="i1009684"></a>
<h3 class="refsect3">OracleIntervalYM(byte[ ])</h3>
<p>This method creates a new instance of the <code>OracleIntervalYM</code> structure and sets its value to the provided byte array, which is in an internal Oracle <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> format.</p>
<p class="subhead2"><a id="ODPNT5846"></a>Declaration</p>
<pre>// C#
public OracleIntervalYM (byte[] <span class="italic">bytes</span>); 
</pre>
<p class="subhead2"><a id="ODPNT5847"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">bytes</span></code></p>
<p>A byte array that is in an internal Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> format.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5848"></a>Exceptions</p>
<p><code>ArgumentException</code> - The supplied byte array is not in an internal Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> format or the supplied byte array has an invalid value.</p>
<p><code>ArgumentNullException</code> - <code><span class="codeinlineitalic">bytes</span></code> is null.</p>
<p class="subhead2"><a id="ODPNT5849"></a>Remarks</p>
<p>The supplied byte array must be in an internal Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> format.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ODPNT5850" class="refsect2"><a id="i1009717"></a>
<h2 class="refsect2">OracleIntervalYM Static Fields <a id="sthref1485"></a></h2>
<p>The <code>OracleIntervalYM</code> static fields are listed in <a href="#g1309332">Table 14-81</a>.</p>
<div id="ODPNT5851" class="tblruleformal">
<p class="titleintable"><a id="sthref1486"></a><a id="g1309332"></a>Table 14-81 OracleIntervalYM Static Fields</p>
<table class="cellalignment4229" title="OracleIntervalYM Static Fields " summary="Rows are static fields. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t414">Field</th>
<th class="cellalignment4230" id="r1c2-t414">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t414" headers="r1c1-t414">
<p><a href="#i1009784">MaxValue</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t414 r1c2-t414">
<p>Represents the maximum value for an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t414" headers="r1c1-t414">
<p><a href="#i1009810">MinValue</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t414 r1c2-t414">
<p>Represents the minimum value for an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t414" headers="r1c1-t414">
<p><a href="#i1009836">Null</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t414 r1c2-t414">
<p>Represents a null value that can be assigned to an <code>OracleIntervalYM</code> instance</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t414" headers="r1c1-t414">
<p><a href="#i1009860">Zero</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t414 r1c2-t414">
<p>Represents a zero value for an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
<div id="ODPNT5852" class="refsect3"><a id="i1009784"></a>
<h3 class="refsect3">MaxValue</h3>
<p>This static field represents the maximum value for an <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5853"></a>Declaration</p>
<pre>// C#
public static readonly OracleIntervalYM MaxValue;
</pre>
<p class="subhead2"><a id="ODPNT5854"></a>Remarks</p>
<p>Year is 999999999 and Month is 11.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5855" class="refsect3"><a id="i1009810"></a>
<h3 class="refsect3">MinValue</h3>
<p>This static field represents the minimum value for an <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5856"></a>Declaration</p>
<pre>// C#
public static readonly OracleIntervalYM MinValue;
</pre>
<p class="subhead2"><a id="ODPNT5857"></a>Remarks</p>
<p>Year is -999999999 and Month is -11.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5858" class="refsect3"><a id="i1009836"></a>
<h3 class="refsect3">Null</h3>
<p>This static field represents a null value that can be assigned to an <code>OracleIntervalYM</code> instance.</p>
<p class="subhead2"><a id="ODPNT5859"></a>Declaration</p>
<pre>// C#
public static readonly OracleIntervalYM Null;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5860" class="refsect3"><a id="i1009860"></a>
<h3 class="refsect3">Zero</h3>
<p>This static field represents a zero value for an <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5861"></a>Declaration</p>
<pre>// C#
public static readonly OracleIntervalDS Zero;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ODPNT5862" class="refsect2"><a id="i1009884"></a>
<h2 class="refsect2">OracleIntervalYM Static Methods<a id="sthref1487"></a></h2>
<p>The <code>OracleIntervalYM</code> static methods are listed in <a href="#g1309371">Table 14-82</a>.</p>
<div id="ODPNT5863" class="tblruleformal">
<p class="titleintable"><a id="sthref1488"></a><a id="g1309371"></a>Table 14-82 OracleIntervalYM Static Methods</p>
<table class="cellalignment4229" title="OracleIntervalYM Static Methods " summary="Rows are static methods. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t420">Methods</th>
<th class="cellalignment4230" id="r1c2-t420">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t420" headers="r1c1-t420">
<p><a href="#CJAFGEJF">Equals</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t420 r1c2-t420">
<p>Determines whether or not two <code>OracleIntervalYM</code> values are equal (Overloaded)</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t420" headers="r1c1-t420">
<p><a href="#i1010014">GreaterThan</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t420 r1c2-t420">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t420" headers="r1c1-t420">
<p><a href="#i1010049">GreaterThanOrEqual</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t420 r1c2-t420">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t420" headers="r1c1-t420">
<p><a href="#i1010084">LessThan</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t420 r1c2-t420">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t420" headers="r1c1-t420">
<p><a href="#i1010119">LessThanOrEqual</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t420 r1c2-t420">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t420" headers="r1c1-t420">
<p><a href="#i1010154">NotEquals</a></p>
</td>
<td class="cellalignment4226" headers="r7c1-t420 r1c2-t420">
<p>Determines whether two <code>OracleIntervalYM</code> values are not equal</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r8c1-t420" headers="r1c1-t420">
<p><a href="#i1010189">Parse</a></p>
</td>
<td class="cellalignment4226" headers="r8c1-t420 r1c2-t420">
<p>Returns an <code>OracleIntervalYM</code> structure and sets its value for time interval using a string</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r9c1-t420" headers="r1c1-t420">
<p><a href="#i1010225">SetPrecision</a></p>
</td>
<td class="cellalignment4226" headers="r9c1-t420 r1c2-t420">
<p>Returns a new instance of an <code>OracleIntervalYM</code> with the specified year precision.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
<div id="ODPNT5864" class="refsect3"><a id="CJAFGEJF"></a>
<h3 class="refsect3">Equals</h3>
<p>This static method determines whether or not two <code>OracleIntervalYM</code> values are equal.</p>
<p class="subhead2"><a id="ODPNT5865"></a>Declaration</p>
<pre>// C#
public static bool Equals(OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5866"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>An <code>OracleIntervalYM</code> structure.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>An <code>OracleIntervalYM</code> structure.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5867"></a>Return Value</p>
<p>Returns <code>true</code> if two <code>OracleIntervalYM</code> values represent the same time interval, otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5868"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5869" class="refsect3"><a id="i1010014"></a>
<h3 class="refsect3">GreaterThan</h3>
<p>This static method determines whether or not the first of two <code>OracleIntervalYM</code> values is greater than the second.</p>
<p class="subhead2"><a id="ODPNT5870"></a>Declaration</p>
<pre>// C#
public static bool GreaterThan(OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5871"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5872"></a>Return Value</p>
<p>Returns <code>true</code> if the first of two <code>OracleIntervalYM</code> values is greater than the second; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5873"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5874" class="refsect3"><a id="i1010049"></a>
<h3 class="refsect3">GreaterThanOrEqual</h3>
<p>This static method determines whether or not the first of two <code>OracleIntervalYM</code> values is greater than or equal to the second.</p>
<p class="subhead2"><a id="ODPNT5875"></a>Declaration</p>
<pre>// C#
public static bool GreaterThanOrEqual(OracleIntervalYM <span class="italic">val1</span>, 
    OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5876"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5877"></a>Return Value</p>
<p>Returns <code>true</code> if the first of two <code>OracleIntervalYM</code> values is greater than or equal to the second; otherwise returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5878"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5879" class="refsect3"><a id="i1010084"></a>
<h3 class="refsect3">LessThan</h3>
<p>This static method determines whether or not the first of two <code>OracleIntervalYM</code> values is less than the second.</p>
<p class="subhead2"><a id="ODPNT5880"></a>Declaration</p>
<pre>// C#
public static bool LessThan(OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5881"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5882"></a>Return Value</p>
<p>Returns <code>true</code> if the first of two <code>OracleIntervalYM</code> values is less than the second; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5883"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5884" class="refsect3"><a id="i1010119"></a>
<h3 class="refsect3">LessThanOrEqual</h3>
<p>This static method determines whether or not the first of two <code>OracleIntervalYM</code> values is less than or equal to the second.</p>
<p class="subhead2"><a id="ODPNT5885"></a>Declaration</p>
<pre>// C#
public static bool LessThanOrEqual(OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5886"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5887"></a>Return Value</p>
<p>Returns <code>true</code> if the first of two <code>OracleIntervalYM</code> values is less than or equal to the second. Returns <code>false</code> otherwise.</p>
<p class="subhead2"><a id="ODPNT5888"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5889" class="refsect3"><a id="i1010154"></a>
<h3 class="refsect3">NotEquals</h3>
<p>This static method determines whether two <code>OracleIntervalYM</code> values are not equal.</p>
<p class="subhead2"><a id="ODPNT5890"></a>Declaration</p>
<pre>// C#
public static bool NotEquals(OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5891"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5892"></a>Return Value</p>
<p>Returns <code>true</code> if two <code>OracleIntervalYM</code> values are not equal. Returns <code>false</code> otherwise.</p>
<p class="subhead2"><a id="ODPNT5893"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5894" class="refsect3"><a id="i1010189"></a>
<h3 class="refsect3">Parse</h3>
<p>This static method returns an <code>OracleIntervalYM</code> structure and sets its value for time interval using a string.</p>
<p class="subhead2"><a id="ODPNT5895"></a>Declaration</p>
<pre>// C#
public static OracleIntervalYM Parse (string <span class="italic">intervalStr</span>);
</pre>
<p class="subhead2"><a id="ODPNT5896"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">intervalStr</span></code></p>
<p>A string representing the Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5897"></a>Return Value</p>
<p>Returns an <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5898"></a>Exceptions</p>
<p><code>ArgumentException</code> - The <code><span class="codeinlineitalic">intervalStr</span></code> parameter is not in the valid format or <code><span class="codeinlineitalic">intervalStr</span></code> has an invalid value.</p>
<p><code>ArgumentNullException</code> - The <code><span class="codeinlineitalic">intervalStr</span></code> parameter is null.</p>
<p class="subhead2"><a id="ODPNT5899"></a>Remarks</p>
<p>The value specified in the supplied <code><span class="codeinlineitalic">intervalStr</span></code> must be in the Year-Month format.</p>
<p class="subhead2"><a id="ODPNT5900"></a>Example</p>
<p>&#34;1-2&#34; means 1 year and 2 months.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5901" class="refsect3"><a id="i1010225"></a>
<h3 class="refsect3">SetPrecision</h3>
<p>This static method returns a new instance of an <code>OracleIntervalYM</code> with the specified year precision.</p>
<p class="subhead2"><a id="ODPNT5902"></a>Declaration</p>
<pre>// C#
public static OracleIntervalYM SetPrecision(OracleIntervalYM <span class="italic">value1</span>,
   int <span class="italic">yearPrecision</span>);
</pre>
<p class="subhead2"><a id="ODPNT5903"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">value1</span></code></p>
<p>An <code>OracleIntervalYM</code> structure.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">yearPrecision</span></code></p>
<p>The year precision provided. Range of year precision is (0 to 9).</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5904"></a>Return Value</p>
<p>An <code>OracleIntervalDS</code> instance.</p>
<p class="subhead2"><a id="ODPNT5905"></a>Exceptions</p>
<p><code>ArgumentOutOfRangeException</code> - <code><span class="codeinlineitalic">yearPrecision</span></code> is out of the specified range.</p>
<p class="subhead2"><a id="ODPNT5906"></a>Remarks</p>
<p>Depending on the value specified in the supplied <code>yearPrecision</code>, <code>0</code> or more leading zeros are displayed in the string returned by <code>ToString()</code>.</p>
<p class="subhead2"><a id="ODPNT5907"></a>Example</p>
<p>An <code>OracleIntervalYM</code> with a value of &#34;<code>1-2</code>&#34; results in the string &#34;<code>001-2</code>&#34; when <code>SetPrecision()</code> is called with the year precision set to <code>3</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ODPNT5908" class="refsect2"><a id="i1010262"></a>
<h2 class="refsect2">OracleIntervalYM Static Operators<a id="sthref1489"></a></h2>
<p>The <code>OracleIntervalYM</code> static operators are listed in <a href="#g1309438">Table 14-83</a>.</p>
<div id="ODPNT5909" class="tblruleformal">
<p class="titleintable"><a id="sthref1490"></a><a id="g1309438"></a>Table 14-83 OracleIntervalYM Static Operators</p>
<table class="cellalignment4229" title="OracleIntervalYM Static Operators " summary="Rows are static operators.. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t430">Operator</th>
<th class="cellalignment4230" id="r1c2-t430">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t430" headers="r1c1-t430">
<p><a href="#i1010378">operator +</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t430 r1c2-t430">
<p>Adds two <code>OracleIntervalYM</code> values</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t430" headers="r1c1-t430">
<p><a href="#i1010411">operator ==</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t430 r1c2-t430">
<p>Determines whether or not two <code>OracleIntervalYM</code> values are equal</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t430" headers="r1c1-t430">
<p><a href="#i1010446">operator &gt;</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t430 r1c2-t430">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t430" headers="r1c1-t430">
<p><a href="#i1010481">operator &gt;=</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t430 r1c2-t430">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is greater than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t430" headers="r1c1-t430">
<p><a href="#i1010516">operator !=</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t430 r1c2-t430">
<p>Determines whether two <code>OracleIntervalYM</code> values are not equal</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t430" headers="r1c1-t430">
<p><a href="#i1010551">operator &lt;</a></p>
</td>
<td class="cellalignment4226" headers="r7c1-t430 r1c2-t430">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r8c1-t430" headers="r1c1-t430">
<p><a href="#CJAJIIFB">operator &lt;=</a></p>
</td>
<td class="cellalignment4226" headers="r8c1-t430 r1c2-t430">
<p>Determines whether or not one <code>OracleIntervalYM</code> value is less than or equal to another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r9c1-t430" headers="r1c1-t430">
<p><a href="#i1010621">operator -</a></p>
</td>
<td class="cellalignment4226" headers="r9c1-t430 r1c2-t430">
<p>Subtracts one <code>OracleIntervalYM</code> value from another</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r10c1-t430" headers="r1c1-t430">
<p><a href="#i1010654">operator -</a></p>
</td>
<td class="cellalignment4226" headers="r10c1-t430 r1c2-t430">
<p>Negates an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r11c1-t430" headers="r1c1-t430">
<p><a href="#i1010685">operator *</a></p>
</td>
<td class="cellalignment4226" headers="r11c1-t430 r1c2-t430">
<p>Multiplies an <code>OracleIntervalYM</code> value by a number</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r12c1-t430" headers="r1c1-t430">
<p><a href="#i1010718">operator /</a></p>
</td>
<td class="cellalignment4226" headers="r12c1-t430 r1c2-t430">
<p>Divides an <code>OracleIntervalYM</code> value by a number</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
<div id="ODPNT5910" class="refsect3"><a id="i1010378"></a>
<h3 class="refsect3">operator +</h3>
<p>This static operator adds two <code>OracleIntervalYM</code> values.</p>
<p class="subhead2"><a id="ODPNT5911"></a>Declaration</p>
<pre>// C#
public static OracleIntervalYM operator + (OracleIntervalYM <span class="italic">val1</span>, 
    OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5912"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5913"></a>Return Value</p>
<p><code>OracleIntervalYM</code></p>
<p class="subhead2"><a id="ODPNT5914"></a>Remarks</p>
<p>If either argument has a null value, the returned <code>OracleIntervalYM</code> structure has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5915" class="refsect3"><a id="i1010411"></a>
<h3 class="refsect3">operator ==</h3>
<p>This static operator determines if two <code>OracleIntervalYM</code> values are equal.</p>
<p class="subhead2"><a id="ODPNT5916"></a>Declaration</p>
<pre>// C#
public static bool operator == (OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5917"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5918"></a>Return Value</p>
<p>Returns <code>true</code> if they are equal; otherwise returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5919"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5920" class="refsect3"><a id="i1010446"></a>
<h3 class="refsect3">operator &gt;</h3>
<p>This static operator determines if the first of two <code>OracleIntervalYM</code> values is greater than the second.</p>
<p class="subhead2"><a id="ODPNT5921"></a>Declaration</p>
<pre>// C#
public static bool operator &gt; (OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5922"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5923"></a>Return Value</p>
<p>Returns <code>true</code> if one <code>OracleIntervalYM</code> value is greater than another; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5924"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5925" class="refsect3"><a id="i1010481"></a>
<h3 class="refsect3">operator &gt;=</h3>
<p>This static operator determines if the first of two <code>OracleIntervalYM</code> values is greater than or equal to the second.</p>
<p class="subhead2"><a id="ODPNT5926"></a>Declaration</p>
<pre>// C#
public static bool operator &gt;= (OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5927"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5928"></a>Return Value</p>
<p>Returns <code>true</code> if one <code>OracleIntervalYM</code> value is greater than or equal to another; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5929"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5930" class="refsect3"><a id="i1010516"></a>
<h3 class="refsect3">operator !=</h3>
<p>This static operator determines whether two <code>OracleIntervalYM</code> values are not equal.</p>
<p class="subhead2"><a id="ODPNT5931"></a>Declaration</p>
<pre>// C#
public static bool operator != (OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>)
</pre>
<p class="subhead2"><a id="ODPNT5932"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5933"></a>Return Value</p>
<p>Returns <code>true</code> if two <code>OracleIntervalYM</code> values are not equal; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5934"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5935" class="refsect3"><a id="i1010551"></a>
<h3 class="refsect3">operator &lt;</h3>
<p>This static operator determines if the first of two <code>OracleIntervalYM</code> values is less than the second.</p>
<p class="subhead2"><a id="ODPNT5936"></a>Declaration</p>
<pre>// C#
public static bool operator &lt; (OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5937"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5938"></a>Return Value</p>
<p>Returns <code>true</code> if the first of two <code>OracleIntervalYM</code> values is less than the second; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5939"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5940" class="refsect3"><a id="CJAJIIFB"></a>
<h3 class="refsect3">operator &lt;=</h3>
<p>This static operator determines if the first of two <code>OracleIntervalYM</code> values is less than or equal to the second.</p>
<p class="subhead2"><a id="ODPNT5941"></a>Declaration</p>
<pre>// C#
public static bool operator &lt;= (OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5942"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5943"></a>Return Value</p>
<p>Returns <code>true</code> if the first of two <code>OracleIntervalYM</code> values is less than or equal to the second; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT5944"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5945" class="refsect3"><a id="i1010621"></a>
<h3 class="refsect3">operator -</h3>
<p>This static operator subtracts one <code>OracleIntervalYM</code> structure from another.</p>
<p class="subhead2"><a id="ODPNT5946"></a>Declaration</p>
<pre>// C#
public static OracleIntervalYM operator - (OracleIntervalYM <span class="italic">val1</span>, OracleIntervalYM <span class="italic">val2</span>);
</pre>
<p class="subhead2"><a id="ODPNT5947"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">val2</span></code></p>
<p>The second <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5948"></a>Return Value</p>
<p>An <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5949"></a>Remarks</p>
<p>If either argument has a null value, the returned <code>OracleIntervalYM</code> structure has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5950" class="refsect3"><a id="i1010654"></a>
<h3 class="refsect3">operator -</h3>
<p>This static operator negates an <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5951"></a>Declaration</p>
<pre>// C#
public static OracleIntervalYM operator - (OracleIntervalYM <span class="italic">val</span>);
</pre>
<p class="subhead2"><a id="ODPNT5952"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val</span></code></p>
<p>An <code>OracleIntervalYM</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5953"></a>Return Value</p>
<p>An <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5954"></a>Remarks</p>
<p>If the supplied <code>OracleIntervalYM</code> structure has a null value, the returned <code>OracleIntervalYM</code> structure has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5955" class="refsect3"><a id="i1010685"></a>
<h3 class="refsect3">operator *</h3>
<p>This static operator multiplies an <code>OracleIntervalYM</code> value by a number.</p>
<p class="subhead2"><a id="ODPNT5956"></a>Declaration</p>
<pre>// C#
public static OracleIntervalYM operator * (OracleIntervalYM <span class="italic">val1</span>, int <span class="italic">multiplier</span>);
</pre>
<p class="subhead2"><a id="ODPNT5957"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">multiplier</span></code></p>
<p>A multiplier.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5958"></a>Return Value</p>
<p>An <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5959"></a>Remarks</p>
<p>If the supplied <code>OracleIntervalYM</code> structure has a null value, the returned <code>OracleIntervalYM</code> structure has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5960" class="refsect3"><a id="i1010718"></a>
<h3 class="refsect3">operator /</h3>
<p>This static operator divides an <code>OracleIntervalYM</code> value by a number.</p>
<p class="subhead2"><a id="ODPNT5961"></a>Declaration</p>
<pre>// C#
public static OracleIntervalYM operator / (OracleIntervalYM <span class="italic">val1</span>, int divisor);
</pre>
<p class="subhead2"><a id="ODPNT5962"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val1</span></code></p>
<p>The first <code>OracleIntervalYM</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">divisor</span></code></p>
<p>A divisor.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5963"></a>Return Value</p>
<p>An <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5964"></a>Remarks</p>
<p>If the supplied <code>OracleIntervalYM</code> structure has a null value, the returned <code>OracleIntervalYM</code> structure has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ODPNT5965" class="refsect2"><a id="i1010751"></a>
<h2 class="refsect2">OracleIntervalYM Type Conversions<a id="sthref1491"></a></h2>
<p>The <code>OracleIntervalYM</code> conversions are listed in <a href="#g1309526">Table 14-84</a>.</p>
<div id="ODPNT5966" class="tblruleformal">
<p class="titleintable"><a id="sthref1492"></a><a id="g1309526"></a>Table 14-84 OracleIntervalYM Type Conversions</p>
<table class="cellalignment4229" title="OracleIntervalYM Type Conversions " summary="Rows are type conversions. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t443">Operator</th>
<th class="cellalignment4230" id="r1c2-t443">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t443" headers="r1c1-t443">
<p><a href="#i1010811">explicit operator long</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t443 r1c2-t443">
<p>Converts an <code>OracleIntervalYM</code> structure to a number</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t443" headers="r1c1-t443">
<p><a href="#i1010842">explicit operator OracleIntervalYM</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t443 r1c2-t443">
<p>Converts a string to an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t443" headers="r1c1-t443">
<p><a href="#i1010876">implicit operator OracleIntervalYM</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t443 r1c2-t443">
<p>Converts the number of months to an <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
<div id="ODPNT5967" class="refsect3"><a id="i1010811"></a>
<h3 class="refsect3">explicit operator long</h3>
<p>This type conversion operator converts an <code>OracleIntervalYM</code> to a number that represents the number of months in the time interval.</p>
<p class="subhead2"><a id="ODPNT5968"></a>Declaration</p>
<pre>// C#
public static explicit operator long (OracleIntervalYM <span class="italic">val</span>);
</pre>
<p class="subhead2"><a id="ODPNT5969"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">val</span></code></p>
<p>An <code>OracleIntervalYM</code> structure.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5970"></a>Return Value</p>
<p>A <code>long</code> number in months.</p>
<p class="subhead2"><a id="ODPNT5971"></a>Exceptions</p>
<p><code>OracleNullValueException</code> - The <code>OracleIntervalYM</code> structure has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5972" class="refsect3"><a id="i1010842"></a>
<h3 class="refsect3">explicit operator OracleIntervalYM</h3>
<p>This type conversion operator converts the string <code><span class="codeinlineitalic">intervalStr</span></code> to an <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5973"></a>Declaration</p>
<pre>// C#
public static explicit operator OracleIntervalYM (string <span class="italic">intervalStr</span>);
</pre>
<p class="subhead2"><a id="ODPNT5974"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">intervalStr</span></code></p>
<p>A string representation of an Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5975"></a>Return Value</p>
<p>An <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5976"></a>Exceptions</p>
<p><code>ArgumentException</code> - The supplied <code><span class="codeinlineitalic">intervalStr</span></code> parameter is not in the correct format or has an invalid value.</p>
<p><code>ArgumentNullException</code> - The <code><span class="codeinlineitalic">intervalStr</span></code> parameter is null.</p>
<p class="subhead2"><a id="ODPNT5977"></a>Remarks</p>
<p>The returned <code>OracleIntervalDS</code> structure contains the same time interval represented by the supplied <code><span class="codeinlineitalic">intervalStr</span></code>. The value specified in the supplied <code><span class="codeinlineitalic">intervalStr</span></code> must be in Year-Month format.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5978" class="refsect3"><a id="i1010876"></a>
<h3 class="refsect3">implicit operator OracleIntervalYM</h3>
<p>This type conversion operator converts the total number of months as time interval to an <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5979"></a>Declaration</p>
<pre>// C#
public static implicit operator OracleIntervalYM (long <span class="italic">months</span>);
</pre>
<p class="subhead2"><a id="ODPNT5980"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">months</span></code></p>
<p>The number of months to be converted. Range is (-999,999,999 * 12)-11 &lt;= <code><span class="codeinlineitalic">months</span></code> &lt;= (999,999,999 * 12)+11.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT5981"></a>Return Value</p>
<p>An <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5982"></a>Exceptions</p>
<p><code>ArgumentOutOfRangeException</code> - The <code><span class="codeinlineitalic">months</span></code> parameter is out of the specified range.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ODPNT5983" class="refsect2"><a id="i1010907"></a>
<h2 class="refsect2">OracleIntervalYM Properties<a id="sthref1493"></a></h2>
<p>The <code>OracleIntervalYM</code> properties are listed in <a href="#g1309558">Table 14-85</a>.</p>
<div id="ODPNT5984" class="tblruleformal">
<p class="titleintable"><a id="sthref1494"></a><a id="g1309558"></a>Table 14-85 OracleIntervalYM Properties</p>
<table class="cellalignment4229" title="OracleIntervalYM Properties " summary="Rows are properties. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t448">Properties</th>
<th class="cellalignment4230" id="r1c2-t448">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t448" headers="r1c1-t448">
<p><a href="#i1010988">BinData</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t448 r1c2-t448">
<p>Returns an array of bytes that represents the Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> in an Oracle internal format</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t448" headers="r1c1-t448">
<p><a href="#i1011016">IsNull</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t448 r1c2-t448">
<p>Indicates whether or not the current instance has a null value</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t448" headers="r1c1-t448">
<p><a href="#i1011042">Months</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t448 r1c2-t448">
<p>Gets the months component of an <code>OracleIntervalYM</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t448" headers="r1c1-t448">
<p><a href="#i1011070">TotalYears</a></p>
</td>
<td class="cellalignment4226" headers="r5c1-t448 r1c2-t448">
<p>Returns the total number, in years, that represents the period of time in the current <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t448" headers="r1c1-t448">
<p><a href="#i1011098">Value</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t448 r1c2-t448">
<p>Specifies the total number of months that is stored in the <code>OracleIntervalYM</code> structure</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t448" headers="r1c1-t448">
<p><a href="#i1011126">Years</a></p>
</td>
<td class="cellalignment4226" headers="r7c1-t448 r1c2-t448">
<p>Gets the years component of an <code>OracleIntervalYM</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
<div id="ODPNT5985" class="refsect3"><a id="i1010988"></a>
<h3 class="refsect3">BinData</h3>
<p>This property returns an array of bytes that represents the Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> in Oracle internal format.</p>
<p class="subhead2"><a id="ODPNT5986"></a>Declaration</p>
<pre>// C#
public byte[] BinData {get;}
</pre>
<p class="subhead2"><a id="ODPNT5987"></a>Property Value</p>
<p>A byte array that represents an Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> in Oracle internal format.</p>
<p class="subhead2"><a id="ODPNT5988"></a>Exceptions</p>
<p><code>OracleNullValueException</code> - The current instance has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5989" class="refsect3"><a id="i1011016"></a>
<h3 class="refsect3">IsNull</h3>
<p>This property indicates whether or not the value has a null value.</p>
<p class="subhead2"><a id="ODPNT5990"></a>Declaration</p>
<pre>// C#
public bool IsNull {get;}
</pre>
<p class="subhead2"><a id="ODPNT5991"></a>Property Value</p>
<p>Returns <code>true</code> if value has a null value; otherwise, returns <code>false</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5992" class="refsect3"><a id="i1011042"></a>
<h3 class="refsect3">Months</h3>
<p>This property gets the months component of an <code>OracleIntervalYM.</code></p>
<p class="subhead2"><a id="ODPNT5993"></a>Declaration</p>
<pre>// C#
public int Months {get;}
</pre>
<p class="subhead2"><a id="ODPNT5994"></a>Property Value</p>
<p>An <code>int</code> representing the months component.</p>
<p class="subhead2"><a id="ODPNT5995"></a>Exceptions</p>
<p><code>OracleNullValueException</code> - The current instance has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT5996" class="refsect3"><a id="i1011070"></a>
<h3 class="refsect3">TotalYears</h3>
<p>This property returns the total number, in years, that represents the period of time in the current <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT5997"></a>Declaration</p>
<pre>// C#
public double TotalYears {get;}
</pre>
<p class="subhead2"><a id="ODPNT5998"></a>Property Value</p>
<p>A <code>double</code> representing the total number of years.</p>
<p class="subhead2"><a id="ODPNT5999"></a>Exceptions</p>
<p><code>OracleNullValueException</code> - The current instance has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT6000" class="refsect3"><a id="i1011098"></a>
<h3 class="refsect3">Value</h3>
<p>This property gets the total number of months that is stored in the <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT6001"></a>Declaration</p>
<pre>// C#
public long Value {get;}
</pre>
<p class="subhead2"><a id="ODPNT6002"></a>Property Value</p>
<p>The total number of months representing the time interval.</p>
<p class="subhead2"><a id="ODPNT6003"></a>Exceptions</p>
<p><code>OracleNullValueException</code> - The current instance has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT6004" class="refsect3"><a id="i1011126"></a>
<h3 class="refsect3">Years</h3>
<p>This property gets the years component of an <code>OracleIntervalYM</code>.</p>
<p class="subhead2"><a id="ODPNT6005"></a>Declaration</p>
<pre>// C#
public int Years {get;}
</pre>
<p class="subhead2"><a id="ODPNT6006"></a>Property Value</p>
<p>An <code>int</code> representing the years component.</p>
<p class="subhead2"><a id="ODPNT6007"></a>Exceptions</p>
<p><code>OracleNullValueException</code> - The current instance has a null value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ODPNT6008" class="refsect2"><a id="i1011154"></a>
<h2 class="refsect2">OracleIntervalYM Methods<a id="sthref1495"></a></h2>
<p>The <code>OracleIntervalYM</code> methods are listed in <a href="#g1309611">Table 14-86</a>.</p>
<div id="ODPNT6009" class="tblruleformal">
<p class="titleintable"><a id="sthref1496"></a><a id="g1309611"></a>Table 14-86 OracleIntervalYM Methods</p>
<table class="cellalignment4229" title="OracleIntervalYM Methods " summary="Rows are methods. first column is name, second column is description" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t456">Methods</th>
<th class="cellalignment4230" id="r1c2-t456">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t456" headers="r1c1-t456">
<p><a href="#i1011225">CompareTo</a></p>
</td>
<td class="cellalignment4226" headers="r2c1-t456 r1c2-t456">
<p>Compares the current <code>OracleIntervalYM</code> instance to the supplied object, and returns an integer that represents their relative values</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t456" headers="r1c1-t456">
<p><a href="#i1011266">Equals</a></p>
</td>
<td class="cellalignment4226" headers="r3c1-t456 r1c2-t456">
<p>Determines whether or not the specified <code>object</code> has the same time interval as the current instance (Overloaded)</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t456" headers="r1c1-t456">
<p><a href="#i1011300">GetHashCode</a></p>
</td>
<td class="cellalignment4226" headers="r4c1-t456 r1c2-t456">
<p>Returns a hash code for the <code>OracleIntervalYM</code> instance</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t456" headers="r1c1-t456">
<p>GetType</p>
</td>
<td class="cellalignment4226" headers="r5c1-t456 r1c2-t456">
<p>Inherited from <code>System.Object</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t456" headers="r1c1-t456">
<p><a href="#i1011327">ToString</a></p>
</td>
<td class="cellalignment4226" headers="r6c1-t456 r1c2-t456">
<p>Converts the current <code>OracleIntervalYM</code> structure to a string</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
<div id="ODPNT6010" class="refsect3"><a id="i1011225"></a>
<h3 class="refsect3">CompareTo</h3>
<p>This method compares the current <code>OracleIntervalYM</code> instance to the supplied object, and returns an integer that represents their relative values.</p>
<p class="subhead2"><a id="ODPNT6011"></a>Declaration</p>
<pre>// C#
public int CompareTo(object <span class="italic">obj</span>);
</pre>
<p class="subhead2"><a id="ODPNT6012"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">obj</span></code></p>
<p>The supplied object.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT6013"></a>Return Value</p>
<p>The method returns a number:</p>
<p>Less than zero: if the current <code>OracleIntervalYM</code> represents a shorter time interval than <code><span class="codeinlineitalic">obj.</span></code></p>
<p>Zero: if the current <code>OracleIntervalYM</code> and <code><span class="codeinlineitalic">obj</span></code> represent the same time interval.</p>
<p>Greater than zero: if the current <code>OracleIntervalYM</code> represents a longer time interval than <code><span class="codeinlineitalic">obj.</span></code></p>
<p class="subhead2"><a id="ODPNT6014"></a>Implements</p>
<p><code>IComparable</code></p>
<p class="subhead2"><a id="ODPNT6015"></a>Exceptions</p>
<p><code>ArgumentException</code> - The <code><span class="codeinlineitalic">obj</span></code> parameter is not of type <code>OracleIntervalYM</code>.</p>
<p class="subhead2"><a id="ODPNT6016"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>The comparison must be between <code>OracleIntervalYM</code>s. For example, comparing an <code>OracleIntervalYM</code> instance with an <code>OracleBinary</code> instance is not allowed. When an <code>OracleIntervalYM</code> is compared with a different type, an <code>ArgumentException</code> is thrown.</p>
</li>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT6017" class="refsect3"><a id="i1011266"></a>
<h3 class="refsect3">Equals</h3>
<p>Overrides <code>Object</code></p>
<p>This method determines whether or not the specified object has the same time interval as the current instance.</p>
<p class="subhead2"><a id="ODPNT6018"></a>Declaration</p>
<pre>// C#
public override bool Equals(object <span class="italic">obj</span>);
</pre>
<p class="subhead2"><a id="ODPNT6019"></a>Parameters</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">obj</span></code></p>
<p>The supplied object.</p>
</li>
</ul>
<p class="subhead2"><a id="ODPNT6020"></a>Return Value</p>
<p>Returns <code>true</code> if the specified object instance is of type <code>OracleIntervalYM</code> and has the same time interval; otherwise, returns <code>false</code>.</p>
<p class="subhead2"><a id="ODPNT6021"></a>Remarks</p>
<p>The following rules apply to the behavior of this method.</p>
<ul>
<li>
<p>Any <code>OracleIntervalYM</code> that has a value compares greater than an <code>OracleIntervalYM</code> that has a null value.</p>
</li>
<li>
<p>Two <code>OracleIntervalYM</code>s that contain a null value are equal.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT6022" class="refsect3"><a id="i1011300"></a>
<h3 class="refsect3">GetHashCode</h3>
<p>Overrides <code>Object</code></p>
<p>This method returns a hash code for the <code>OracleIntervalYM</code> instance.</p>
<p class="subhead2"><a id="ODPNT6023"></a>Declaration</p>
<pre>// C#
public override int GetHashCode();
</pre>
<p class="subhead2"><a id="ODPNT6024"></a>Return Value</p>
<p>An <code>int</code> representing a hash code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" -->
<div id="ODPNT6025" class="refsect3"><a id="i1011327"></a>
<h3 class="refsect3">ToString</h3>
<p>Overrides <code>Object</code></p>
<p>This method converts the current <code>OracleIntervalYM</code> structure to a string.</p>
<p class="subhead2"><a id="ODPNT6026"></a>Declaration</p>
<pre>// C#
public override string ToString();
</pre>
<p class="subhead2"><a id="ODPNT6027"></a>Return Value</p>
<p>A string that represents the current <code>OracleIntervalYM</code> structure.</p>
<p class="subhead2"><a id="ODPNT6028"></a>Remarks</p>
<p>If the current instance has a null value, the returned string contain &#34;null&#34;.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="intro003.htm#CEGBBCEH">&#34;Oracle.DataAccess.Types and Oracle.ManagedDataAccess.Types Namespaces&#34;</a></p>
</li>
<li>
<p><a href="#i1009021">OracleIntervalYM Structure</a></p>
</li>
<li>
<p><a href="#i1009097">OracleIntervalYM Members</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4219">
<tr>
<td class="cellalignment4226">
<table class="cellalignment4224">
<tr>
<td class="cellalignment4223"><a href="OracleIntervalDSStructure.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4223"><a href="OracleStringStructure.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4228">
<table class="cellalignment4222">
<tr>
<td class="cellalignment4223"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4223"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4223"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4223"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4223"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4223"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>