<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79216"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/ODP.NET%20XML%20Support"></a><title>ODP.NET XML Support</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-10-14T19:43:26Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Data Provider for .NET Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17732-11"/>
<meta name="dcterms.isVersionOf" content="ODPNT"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="featLOBsupp.htm" title="Previous" type="text/html"/>
<link rel="Next" href="featUDTs.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17732-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">33/172</span> <!-- End Header --><a id="i1012109"></a>
<div id="ODPNT0020" class="sect1">
<h1 class="sect1">ODP.NET XML Support<a id="sthref491"></a><a id="sthref492"></a><a id="sthref493"></a><a id="sthref494"></a><a id="sthref495"></a></h1>
<p>ODP.NET allows the extraction of data from relational and object-relational tables and views as XML documents. The use of XML documents for insert, update, and delete operations to the database is also allowed. Oracle Database supports XML natively in the database, through Oracle XML DB, a distinct group of technologies related to high-performance XML storage and retrieval. Oracle XML DB is an evolution of the database that encompasses both SQL and XML data models in a highly interoperable manner, providing native XML support.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
ODP.NET, Managed Driver does not support ODP.NET XML Classes. However, it does interoperate with .NET Framework&#39;s XML classes, support XQuery, and support SQL to XML implicit conversion between Oracle Database to .NET as string or LOB client-side data types.</div>
<p>ODP.NET, Managed Driver follows XPath 1.0 specification and hence it does not support default XML namespaces. XML namespaces must be explicitly added to search or update nodes. This behavior differs from ODP.NET, Unmanaged Driver.</p>
<p>For samples related to ODP.NET XML support in ODAC installs, see the following directory:</p>
<pre><span class="italic">ORACLE_BASE</span>\<span class="italic">ORACLE_HOME</span>\ODACsamples
</pre>
<p>This section includes these topics:</p>
<ul>
<li>
<p><a href="#i1012135">Supported XML Features</a></p>
</li>
<li>
<p><a href="#i1012265">OracleXmlType and Connection Dependency</a></p>
</li>
<li>
<p><a href="#i1012461">Updating XMLType Data in the Database</a></p>
</li>
<li>
<p><a href="#i1010698">Updating XML Data in OracleXmlType</a></p>
</li>
<li>
<p><a href="#i1015150">Characters with Special Meaning in XML</a></p>
</li>
<li>
<p><a href="#i1013872">Retrieving Query Result Set as XML</a></p>
</li>
<li>
<p><a href="#i1012662">Data Manipulation Using XML</a></p>
</li>
</ul>
<a id="i1012135"></a>
<div id="ODPNT344" class="sect2">
<h2 class="sect2">Supported XML Features</h2>
<p>XML support in ODP.NET provides the ability to do the following:</p>
<ul>
<li>
<p>Store XML data natively in the database as the Oracle database native type, <code>XMLType</code>.</p>
</li>
<li>
<p>Access relational and object-relational data as XML data from an Oracle Database instance into the Microsoft .NET environment, and process the XML using the Microsoft .NET Framework.</p>
</li>
<li>
<p>Save changes to the database using XML data.</p>
</li>
<li>
<p>Execute XQuery statements<a id="sthref496"></a><a id="sthref497"></a><a id="sthref498"></a><a id="sthref499"></a><a id="sthref500"></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CJAJHEGG">&#34;XQuery Support&#34;</a></div>
</li>
</ul>
<p>For the .NET application developer, these features include the following:</p>
<ul>
<li>
<p>Enhancements to the <code>OracleCommand</code>, <code>OracleConnection</code>, and <code>OracleDataReader</code> classes.</p>
</li>
<li>
<p>The following XML-specific classes:</p>
<ul>
<li>
<p><code>OracleXmlType</code></p>
<p><code>OracleXmlType</code> objects are used to retrieve Oracle native <code>XMLType</code> data.</p>
</li>
<li>
<p><code>OracleXmlStream</code></p>
<p><code>OracleXmlStream</code> objects are used to retrieve XML data from <code>OracleXmlType</code> objects as a read-only .NET <code>Stream</code> object.</p>
</li>
<li>
<p><code>OracleXmlQueryProperties</code></p>
<p><code>OracleXmlQueryProperties</code> objects represent the XML properties used by the <code>OracleCommand</code> class when the <code>XmlCommandType</code> property is <code>Query</code>.</p>
</li>
<li>
<p><code>OracleXmlSaveProperties</code></p>
<p><code>OracleXmlSaveProperties</code> objects represent the XML properties used by the <code>OracleCommand</code> class when the <code>XmlCommandType</code> property is <code>Insert</code>, <code>Update</code>, or <code>Delete</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="OracleCommandClass.htm#i996876">&#34;OracleCommand Class&#34;</a></p>
</li>
<li>
<p><a href="OracleXmlTypeClass.htm#i1033889">&#34;OracleXmlType Class&#34;</a></p>
</li>
<li>
<p><a href="OracleXmlStreamClass.htm#i1033513">&#34;OracleXmlStream Class&#34;</a></p>
</li>
<li>
<p><a href="OracleXmlQueryPropertiesClass.htm#i1016004">&#34;OracleXmlQueryProperties Class&#34;</a></p>
</li>
<li>
<p><a href="OracleXmlSavePropertiesClass.htm#i1016516">&#34;OracleXmlSaveProperties Class&#34;</a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CJAJHEGG"></a>
<div id="ODPNT345" class="sect2">
<h2 class="sect2">XQuery Support<a id="sthref501"></a><a id="sthref502"></a></h2>
<p>ODP.NET supports the XQuery language through a native implementation of SQL/XML functions, <code>XMLQuery</code> and <code>XMLTable</code>. When executing XQuery statements, Oracle XML DB generally evaluates XQuery expressions by compiling them into the same underlying structures as relational queries. Queries are optimized, leveraging both relational-database and XQuery-specific optimization technologies, so that Oracle XML DB serves as a native XQuery engine.The treatment of all XQuery expressions, whether natively compiled or evaluated functionally, is transparent: programmers do not need to change their code to take advantage of XQuery optimizations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADXDB1700" href="../ADXDB/xdb_xquery.htm#ADXDB1700"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> to learn more about Oracle&#39;s XQuery support</div>
</div>
<!-- class="sect2" -->
<a id="i1012265"></a>
<div id="ODPNT346" class="sect2">
<h2 class="sect2">OracleXmlType and Connection Dependency<a id="sthref503"></a><a id="sthref504"></a><a id="sthref505"></a></h2>
<p>The read-only <code>Connection</code> property of the <code>OracleXmlType</code> class holds a reference to the <code>OracleConnection</code> object used to instantiate the <code>OracleXmlType</code> class.</p>
<p>How the <code>OracleXmlType</code> object obtains a reference to an <code>OracleConnection</code> object depends on how the <code>OracleXmlType</code> class is instantiated:</p>
<ul>
<li>
<p>Instantiated from an <code>OracleDataReader</code> class using the <code>GetOracleXmlType</code>, <code>GetOracleValue</code>, or <code>GetOracleValues</code> method:</p>
<p>The <code>Connection</code> property is set with a reference to the same <code>OracleConnection</code> object used by the <code>OracleDataReader</code> object.</p>
</li>
<li>
<p>Instantiated by invoking an <code>OracleXmlType</code> constructor with one of the parameters of type <code>OracleConnection</code>:</p>
<p>The <code>Connection</code> property is set with a reference to the same <code>OracleConnection</code> object provided in the constructor.</p>
</li>
<li>
<p>Instantiated by invoking an <code>OracleXmlType(OracleClob)</code> constructor:</p>
<p>The <code>Connection</code> property is set with a reference to the <code>OracleConnection</code> object used by the <code>OracleClob</code> object.</p>
</li>
</ul>
<p>An <code>OracleXmlType</code> object that is associated with one connection cannot be used with a different connection. For example, if an <code>OracleXmlType</code> object is obtained using <code>OracleConnection</code> <code>A</code>, that <code>OracleXmlType</code> object cannot be used as an input parameter of a command that uses <code>OracleConnection</code> <code>B</code>. By checking the <code>Connection</code> property of the <code>OracleXmlType</code> objects, the application can ensure that <code>OracleXmlType</code> objects are used only within the context of the <code>OracleConnection</code> referenced by its connection property. Otherwise, ODP.NET raises an exception.</p>
</div>
<!-- class="sect2" -->
<a id="i1012461"></a>
<div id="ODPNT347" class="sect2">
<h2 class="sect2">Updating XMLType Data in the Database</h2>
<p>Updating <code>XMLType</code> columns does not require a transaction. However, encapsulating the entire database update process within a transaction is highly recommended. This allows the updates to be rolled back if there are any errors.</p>
<p><code>XMLType</code> columns in the database can be updated using Oracle Data Provider for .NET in a few ways:</p>
<ul>
<li>
<p><a href="#i1009704">Updating with DataSet, OracleDataAdapter, and OracleCommandBuilder</a></p>
</li>
<li>
<p><a href="#i1009708">Updating with OracleCommand and OracleParameter</a></p>
</li>
</ul>
<a id="i1009704"></a>
<div id="ODPNT348" class="sect3">
<h3 class="sect3">Updating with DataSet, OracleDataAdapter, and OracleCommandBuilder<a id="sthref506"></a><a id="sthref507"></a></h3>
<p>If the <code>XMLType</code> column is fetched into the <code>DataSet</code>, the <code>XMLType</code> data is represented as a .NET <code>String</code>.</p>
<p>Modifying <code>XMLType</code> data in the <code>DataSet</code> does not require special treatment. <code>XMLType</code> data can be modified in the same way as any data that is stored in the <code>DataSet</code>. When a change is made and the <code>OracleDataAdapter.Update</code> method is invoked, the <code>OracleDataAdapter</code> object ensures that the <code>XMLType</code> data is handled properly. The <code>OracleDataAdapter</code> object uses any custom SQL <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statements that are provided. Otherwise, valid SQL statements are generated by the <code>OracleCommandBuilder</code> object as needed to <a href="glossary.htm#i433214"><span class="xrefglossterm">flush</span></a> the changes to the database.</p>
</div>
<!-- class="sect3" -->
<a id="i1009708"></a>
<div id="ODPNT349" class="sect3">
<h3 class="sect3">Updating with OracleCommand and OracleParameter<a id="sthref508"></a></h3>
<p>The <code>OracleCommand</code> class provides a powerful way of updating <code>XMLType</code> data, especially with the use of an <code>OracleParameter</code> object. To update columns in a database table, the new value for the column can be passed as an input parameter of a command.</p>
<div id="ODPNT350" class="sect4"><a id="sthref509"></a>
<h4 class="sect4">Input Binding<a id="sthref510"></a></h4>
<p>To update an <code>XMLType</code> column in the database, a SQL statement can be executed using static values. In addition, input parameters can be bound to SQL statements, anonymous PL/SQL blocks, or stored procedures to update <code>XMLType</code> columns. The parameter value can be set as .NET Framework Types, ODP.NET Types, or <code>OracleXmlType</code> objects.</p>
<p>While <code>XMLType</code> columns can be updated using an <code>OracleXmlType</code> object, having an instance of an <code>OracleXmlType</code> class does not guarantee that the <code>XMLType</code> column in the database can be updated.</p>
</div>
<!-- class="sect4" -->
<div id="ODPNT351" class="sect4"><a id="sthref511"></a>
<h4 class="sect4">Setting XMLType Column to NULL Value<a id="sthref512"></a></h4>
<p>Applications can set an <code>XMLType</code> column in the database to a <code>NULL</code> value, with or without input binding, as follows:</p>
<ul>
<li>
<p>Setting <code>NULL</code> values in an <code>XMLType</code> column with input binding</p>
<p>To set the <code>XMLType</code> column to <code>NULL</code>, the application can bind an input parameter whose value is <code>DBNull</code>.<code>Value</code>. This indicates to the <code>OracleCommand</code> object that a <code>NULL</code> value is to be inserted.</p>
<p>Passing in a null <code>OracleXmlType</code> object as an input parameter does not insert a <code>NULL</code> value into the <code>XMLType</code> column. In this case, the <code>OracleCommand</code> object raises an exception.</p>
</li>
<li>
<p>Setting <code>NULL</code> Values in an <code>XMLType</code> Column without input binding</p>
<p>The following example demonstrates setting <code>NULL</code> values in an <code>XMLType</code> column without input binding:</p>
<pre>// Create a table with an XMLType column in the database
CREATE TABLE XML_TABLE(NUM_COL number, XMLTYPE_COL xmltype);
</pre>
<p>An application can set a <code>NULL</code> value in the <code>XMLType</code> column by explicitly inserting a <code>NULL</code> value or by not inserting anything into that column as in the following examples:</p>
<pre>insert into xml_table(xmltype_col) values(NULL);
</pre>
<pre>update xml_table t set t.xmltype_col=NULL;
</pre></li>
</ul>
</div>
<!-- class="sect4" -->
<div id="ODPNT352" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref513"></a>
<h4 class="sect4">Setting XMLType Column to Empty XML Data</h4>
<p>The <code>XMLType</code> column can be initialized with empty XML data, using a SQL statement:</p>
<pre>// Create a table with an XMLType column in the database
CREATE TABLE XML_TABLE(NUM_COL number, XMLTYPE_COL xmltype);
</pre>
<pre>INSERT INTO XML_TABLE (NUM_COL, XMLTYPE_COL) VALUES (4, 
      XMLType.createxml(&#39;&lt;DOC/&gt;&#39;));
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010698"></a>
<div id="ODPNT353" class="sect2">
<h2 class="sect2">Updating XML Data in OracleXmlType<a id="sthref514"></a></h2>
<p>The following are ways that XML data can be updated in an <code>OracleXmlType</code> object.</p>
<ul>
<li>
<p>The XML data can be updated by passing an XPATH expression and the new value to the <code>Update</code> method on the <code>OracleXmlType</code> object.</p>
</li>
<li>
<p>The XML data can be retrieved on the client side as the .NET Framework <code>XmlDocument</code> object using the <code>GetXmlDocument</code> method on the <code>OracleXmlType</code> object. This XML data can then be manipulated using suitable .NET Framework classes. A new <code>OracleXmlType</code> can be created with the updated XML data from the .NET Framework classes. This new <code>OracleXmlType</code> is bound as an input parameter to an update or insert statement.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1015150"></a>
<div id="ODPNT354" class="sect2">
<h2 class="sect2">Characters with Special Meaning in XML<a id="sthref515"></a><a id="sthref516"></a></h2>
<p>The following characters in <a href="#BABDGBDA">Table 3-18</a> have special meaning in XML. For more information, refer to the XML 1.0 specifications</p>
<div id="ODPNT355" class="tblformal">
<p class="titleintable"><a id="sthref517"></a><a id="BABDGBDA"></a>Table 3-18 Characters with Special Meaning in XML</p>
<table class="cellalignment4231" title="Characters with Special Meaning in XML" summary="First column:special characters, second column: Meaning in XML, third column: entity encoding" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t86">Character</th>
<th class="cellalignment4230" id="r1c2-t86">Meaning in XML</th>
<th class="cellalignment4230" id="r1c3-t86">Entity Encoding</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t86" headers="r1c1-t86">
<p>&lt;</p>
</td>
<td class="cellalignment4226" headers="r2c1-t86 r1c2-t86">
<p>Begins an XML tag</p>
</td>
<td class="cellalignment4226" headers="r2c1-t86 r1c3-t86">
<p>&amp;lt;</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t86" headers="r1c1-t86">
<p>&gt;</p>
</td>
<td class="cellalignment4226" headers="r3c1-t86 r1c2-t86">
<p>Ends an XML tag</p>
</td>
<td class="cellalignment4226" headers="r3c1-t86 r1c3-t86">
<p>&amp;gt;</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t86" headers="r1c1-t86">
<p>&#34;</p>
</td>
<td class="cellalignment4226" headers="r4c1-t86 r1c2-t86">
<p>Quotation mark</p>
</td>
<td class="cellalignment4226" headers="r4c1-t86 r1c3-t86">
<p>&amp;quot;</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t86" headers="r1c1-t86">
<p>&#39;</p>
</td>
<td class="cellalignment4226" headers="r5c1-t86 r1c2-t86">
<p>Apostrophe or single quotation mark</p>
</td>
<td class="cellalignment4226" headers="r5c1-t86 r1c3-t86">
<p>&amp;apos;</p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t86" headers="r1c1-t86">
<p>&amp;</p>
</td>
<td class="cellalignment4226" headers="r6c1-t86 r1c2-t86">
<p>Ampersand</p>
</td>
<td class="cellalignment4226" headers="r6c1-t86 r1c3-t86">
<p>&amp;amp;</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>When these characters appear as data in an XML element, they are replaced with their equivalent entity encoding.</p>
<p>Also certain characters are not valid in XML element names. When SQL identifiers (such as column names) are mapped to XML element names, these characters are converted to a sequence of hexadecimal digits, derived from the Unicode encoding of the character, bracketed by an introductory underscore, a lowercase <code>x</code> and a trailing underscore. A blank space is not a valid character in an XML element name. If a SQL identifier contains a space character, then in the corresponding XML element name, the space character is replaced by <code>_x0020_</code>, which is based on Unicode encoding of the space character.</p>
</div>
<!-- class="sect2" -->
<a id="i1013872"></a>
<div id="ODPNT356" class="sect2">
<h2 class="sect2">Retrieving Query Result Set as XML<a id="sthref518"></a></h2>
<p>This section discusses retrieving the result set from a SQL query as XML data.</p>
<div id="ODPNT357" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref519"></a>
<h3 class="sect3">Handling Date and Time Format<a id="sthref520"></a></h3>
<p>The generated XML <code>DATE</code> and <code>TIMESTAMP</code> formats are based on the standard XML Schema formats.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#isoformats">http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#isoformats</a></code> for more information on the XML Schema specification.</div>
</div>
<!-- class="sect3" -->
<div id="ODPNT359" class="sect3"><a id="sthref521"></a>
<h3 class="sect3">Characters with Special Meaning in Column Data</h3>
<p>If the data in any of the select list columns in the query contains any characters with special meaning in XML (see <a href="#BABDGBDA">Table 3-18</a>), these characters are replaced with their corresponding entity encoding in the result XML document.</p>
<p>The following examples demonstrate how ODP.NET handles the angle bracket characters in the column data:</p>
<pre>/* Database Setup
connect scott/tiger@oracle
drop table specialchars;
create table specialchars (&#34;id&#34; number, name varchar2(255));
insert into specialchars values (1, &#39;&lt;Jones&gt;&#39;);
commit;
*/
 
// C#
 
using System;
using System.Data;
using System.Xml;
using Oracle.DataAccess.Client; 
 
class QueryResultAsXMLSample
{
  static void Main()
  {
    OracleConnection con = new OracleConnection();
 
    con.ConnectionString = &#34;User Id=scott;Password=tiger;Data Source=oracle;&#34;;
    con.Open();
 
    // Create the command
    OracleCommand cmd = new OracleCommand(&#34;&#34;, con);
 
    // Set the XML command type to query.
    cmd.XmlCommandType = OracleXmlCommandType.Query;
 
    // Set the SQL query
    cmd.CommandText = &#34;select * from specialchars&#34;;
 
    // Set command properties that affect XML query behavior.
    cmd.BindByName = true;
 
    // Set the XML query properties
    cmd.XmlQueryProperties.MaxRows = -1;
 
    // Get the XML document as an XmlReader.
    XmlReader xmlReader = cmd.ExecuteXmlReader();
    XmlDocument xmlDocument = new XmlDocument();
 
    xmlDocument.PreserveWhitespace = true;
    xmlDocument.Load(xmlReader);
    Console.WriteLine(xmlDocument.OuterXml);
 
    // Close and Dispose OracleConnection object
    con.Close();
    con.Dispose();
  }
}
</pre>
<p>The following XML document is generated for that table: The XML entity encoding that represents the angle brackets appears in bold.</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
   &lt;ROW&gt;
      &lt;id&gt;1&lt;/id &gt;
      &lt;NAME&gt;<span class="bold">&amp;lt;</span>Jones<span class="bold">&amp;gt;</span>&lt;/NAME&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="sect3" -->
<div id="ODPNT360" class="sect3"><a id="sthref522"></a>
<h3 class="sect3">Characters in Table or View Name</h3>
<p>If a table or view name has any non-alphanumeric characters other than an underscore (_), the table or view name must be enclosed in quotation marks.</p>
<p>For example, to select all entries from a table with the name <code>test&#39;ing</code>, the <code>CommandText</code> property of the <code>OracleCommand</code> object must be set to the following string:</p>
<pre>&#34;select * from \&#34;test&#39;ing\&#34;&#34;;
</pre></div>
<!-- class="sect3" -->
<div id="ODPNT361" class="sect3"><a id="sthref523"></a>
<h3 class="sect3">Case-Sensitivity in Column Name to XML Element Name Mapping</h3>
<p>The mapping of SQL identifiers (column names) to XML element names is case- sensitive, and the element names are in exactly the same case as the column names of the table or view.</p>
<p>However, the root tag and row tag names are case-insensitive. The following example demonstrates case-sensitivity in this situation:</p>
<pre>//Create the following table
create table casesensitive_table (&#34;Id&#34; number, NAME varchar2(255));
 
//insert name and id
insert into casesensitive_table values(1, &#39;Smith&#39;);
 
</pre>
<p>The following XML document is generated:</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
  &lt;ROWSET&gt;
    &lt;ROW&gt;
      &lt;Id&gt;1&lt;/Id&gt;
      &lt;NAME&gt;Smith&lt;/NAME&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
</pre>
<p>Note that the element name for the <code>Id</code> column matches the case of the column name.</p>
</div>
<!-- class="sect3" -->
<div id="ODPNT362" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref524"></a>
<h3 class="sect3">Column Name to XML Element Name Mapping</h3>
<p>For each row generated by the SQL query, the SQL identifier (column name) maps to an XML element in the generated XML document, as shown in the following example:</p>
<pre>// Create the following table
create table emp_table (EMPLOYEE_ID NUMBER(4), LAST_NAME varchar2(25));
// Insert some data
insert into emp_table values(205, &#39;Higgins&#39;);
</pre>
<p>The SQL query, <code>SELECT</code> <code>*</code> <code>FROM</code> <code>EMP_TABLE</code>, generates the following XML document:</p>
<pre>&lt;?XML version=&#34;1.0&#34;?&gt;
  &lt;ROWSET&gt;
    &lt;ROW&gt;
      &lt;EMPLOYEE_ID&gt;205&lt;/EMPLOYEE_ID&gt;
      &lt;LAST_NAME&gt;Higgins&lt;/LAST_NAME&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
</pre>
<p>The <code>EMPLOYEE_ID</code> and <code>LAST_NAME</code> database columns of the <code>employees</code> table map to the <code>EMPLOYEE_ID</code> and <code>LAST_NAME</code> elements of the generated XML document.</p>
<p>This section demonstrates how Oracle database handles the mapping of SQL identifiers to XML element names, when retrieving query results as XML from the database. The demonstration uses the <code>specialchars</code> table involving the <code>some</code> <code>id</code> column.</p>
<pre>// Create the specialchars table
create table specialchars (&#34;some id&#34; number, name varchar2(255));
</pre>
<p>Note that the <code>specialchars</code> table has a column named <code>some</code> <code>id</code> that contains a blank space character. The space character is not allowed in an XML element name.</p>
<p>When retrieving the query results as XML, the SQL identifiers in the query select list can contain characters that are not valid in XML element names. When these SQL identifiers (such as column names) are mapped to XML element names, each of these characters is converted to a sequence of hexadecimal digits, derived from the Unicode encoding of the characters, bracketed by an introductory underscore, a lowercase x, and a trailing underscore.</p>
<p>Thus, the SQL query in the following example can be used to get a result as an XML document from the <code>specialchars</code> table:</p>
<pre>select &#34;some id&#34;, name from specialchars;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015150">&#34;Characters with Special Meaning in XML&#34;</a></div>
<div id="ODPNT363" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref525"></a>
<h4 class="sect4">Improving Default Mapping</h4>
<p>You can improve the default mapping of SQL identifiers to XML element names by using the following techniques:</p>
<ul>
<li>
<p>Modify the source. Create an object-relational view over the source schema, and make that view the new source.</p>
</li>
<li>
<p>Use cursor subqueries and cast-multiset constructs in the SQL query.</p>
</li>
<li>
<p>Create an alias for the column or attribute names in the SQL query. Prefix the aliases with an at sign (@) to map them to XML attributes instead of XML elements.</p>
</li>
<li>
<p>Modify the XML document. Use <a href="glossary.htm#CBADGHEG"><span class="xrefglossterm">Extensible Stylesheet Language Transformation (XSLT)</span></a> to transform the XML document. Specify the XSL document and parameters. The transformation is done automatically after the XML document is generated from the relational data. Note that this may have an impact on performance.</p>
</li>
<li>
<p>Specify the name of the root tag and row tag used in the XML document.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="ODPNT364" class="sect3"><a id="sthref526"></a>
<h3 class="sect3">Object-Relational Data<a id="sthref527"></a></h3>
<p>ODP.NET can generate an XML document for data stored in object-relational columns, tables, and views, as shown in the following example:</p>
<pre>// Create the following tables and types
CREATE TYPE &#34;EmployeeType&#34; AS OBJECT (EMPNO NUMBER, ENAME VARCHAR2(20));
/
CREATE TYPE EmployeeListType AS TABLE OF &#34;EmployeeType&#34;;
/
CREATE TABLE mydept (DEPTNO NUMBER, DEPTNAME VARCHAR2(20), 
              EMPLIST EmployeeListType)
              NESTED TABLE EMPLIST STORE AS EMPLIST_TABLE;
INSERT INTO mydept VALUES (1, &#39;depta&#39;,
              EmployeeListType(&#34;EmployeeType&#34;(1, &#39;empa&#39;)));
</pre>
<p>The following XML document is generated for the table:</p>
<pre>&lt;?xml version = &#34;1.0&#34;?&gt;
&lt;ROWSET&gt;
   &lt;ROW&gt;
      &lt;DEPTNO&gt;1&lt;/DEPTNO&gt;
      &lt;DEPTNAME&gt;depta&lt;/DEPTNAME&gt;
      &lt;EMPLIST&gt;
         &lt;<span class="bold">EmployeeType</span>&gt;
            &lt;EMPNO&gt;1&lt;/EMPNO&gt;
            &lt;ENAME&gt;empa&lt;/ENAME&gt;
         &lt;/<span class="bold">EmployeeType</span>&gt;
      &lt;/EMPLIST&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre>
<p>ODP.NET encloses each item in a collection element, with the database type name of the element in the collection. The <code>mydept</code> table has a collection in the <code>EMPLIST</code> database column and each item in the collection is of type <code>EmployeeType</code>. Therefore, in the XML document, each item in the collection is enclosed in the type name <code>EmployeeType</code>, which appears in bold in the example.</p>
</div>
<!-- class="sect3" -->
<div id="ODPNT365" class="sect3"><a id="sthref528"></a>
<h3 class="sect3">NULL Values<a id="sthref529"></a></h3>
<p>If any database row has a column with a <code>NULL</code> value, then that column does not appear for that row in the generated XML document.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1012662"></a>
<div id="ODPNT366" class="sect2">
<h2 class="sect2">Data Manipulation Using XML<a id="sthref530"></a><a id="sthref531"></a><a id="sthref532"></a></h2>
<p>This section discusses making changes to the database data using XML.</p>
<div id="ODPNT367" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref533"></a>
<h3 class="sect3">Handling Date and Time Format<a id="sthref534"></a><a id="sthref535"></a><a id="sthref536"></a></h3>
<p>The generated XML <code>DATE</code> and <code>TIMESTAMP</code> formats are based on the standard XML Schema formats.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#isoformats">http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#isoformats</a></code> for more information on the XML Schema specification.</div>
</div>
<!-- class="sect3" -->
<div id="ODPNT369" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref537"></a>
<h3 class="sect3">Saving Changes Using XML<a id="sthref538"></a><a id="sthref539"></a></h3>
<p>Changes can be saved to database tables and views using XML data. However, insert, update, and delete operations cannot be combined in a single XML document. ODP.NET cannot accept a single XML document and determine which are insert, update, or delete changes.</p>
<p>The insert change must be in an XML document containing only rows to be inserted, the update changes only with rows to be updated, and the delete changes only with rows to be deleted.</p>
<p>For example, using the <code>employees</code> table that comes with the HR sample schema, you can specify the following query:</p>
<pre>select employee_id, last_name from employees where employee_id = 205;
</pre>
<p>The following XML document is generated:</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
   &lt;ROW&gt;
      &lt;EMPLOYEE_ID&gt;205&lt;/EMPLOYEE_ID&gt;
      &lt;LAST_NAME&gt;<span class="bold">Higgins</span>&lt;/LAST_NAME&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre>
<p>To change the name of employee <code>205</code> from <code><span class="codeinlinebold">Higgins</span></code> to <code><span class="codeinlinebold">Smith</span></code>, specify the <code>employees</code> table and the XML data containing the changes as follows:</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;ROWSET&gt;
   &lt;ROW&gt;
      &lt;EMPLOYEE_ID&gt;205&lt;/EMPLOYEE_ID&gt;
      &lt;LAST_NAME&gt;<span class="bold">Smith</span>&lt;/LAST_NAME&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="sect3" -->
<div id="ODPNT370" class="sect3"><a id="sthref540"></a>
<h3 class="sect3">Characters with Special Meaning in Column Data<a id="sthref541"></a><a id="sthref542"></a></h3>
<p>If the data in any of the elements in the XML document contains characters that have a special meaning in XML (see <a href="#BABDGBDA">Table 3-18</a>), these characters must be replaced with appropriate entity encoding, or be preceded by an escape character in the XML document, so that the data is stored correctly in the database table column. Otherwise, ODP.NET throws an exception.</p>
<p>The following example demonstrates how ODP.NET handles the angle bracket special characters in the column data, using entity encoding:</p>
<pre>// Create the following table
create table specialchars (&#34;id&#34; number, name varchar2(255));
</pre>
<p>The following XML document can be used to insert values <code>(1,</code> <code>&#39;&lt;Jones&gt;&#39;)</code> into the <code>specialchars</code> table. The XML entity encoding that represents the angle brackets appears in bold.</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
 &lt;ROWSET&gt;
  &lt;ROW&gt;
   &lt;id&gt;1&lt;/id &gt;
   &lt;NAME&gt;<span class="bold">&amp;lt;</span>Jones<span class="bold">&amp;gt;</span>&lt;/NAME&gt;
  &lt;/ROW&gt;
 &lt;/ROWSET&gt;
</pre></div>
<!-- class="sect3" -->
<div id="ODPNT371" class="sect3"><a id="sthref543"></a>
<h3 class="sect3">Characters with Special Meaning in Table or View Name<a id="sthref544"></a><a id="sthref545"></a></h3>
<p>If a table or view name has any non-alphanumeric characters other than an underscore (_), the table or view name must be enclosed in quotation marks.</p>
<p>For example, to save changes to a table with the name <code>test&#39;ing</code>, the <code>OracleCommand.XmlSaveProperties.TableName</code> property must be set to <code>&#34;\&#34;test&#39;ing\&#34;&#34;</code>.</p>
</div>
<!-- class="sect3" -->
<div id="ODPNT372" class="sect3"><a id="sthref546"></a>
<h3 class="sect3">Case-Sensitivity in XML Element Name to Column Name Mapping<a id="sthref547"></a><a id="sthref548"></a></h3>
<p>For each XML element that represents a row of data in the XML document, the child XML elements map to database column names. The mapping of the child element name to the column name is always case-sensitive, but the root tag and row tag names are case-insensitive. The following example demonstrates this case-sensitivity:</p>
<pre>//Create the following table
create table casesensitive_table (&#34;Id&#34; number, NAME varchar2(255));
</pre>
<p>The following XML document can be used to insert values (<code>1</code>, <code>Smith</code>) into the <code>casesensitive_table</code>:</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
  &lt;ROWSET&gt;
    &lt;ROW&gt;
      &lt;Id&gt;1&lt;/Id&gt;
      &lt;NAME&gt;Smith&lt;/NAME&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
</pre>
<p>Note that the element name for the <code>Id</code> column matches the case of the column name.</p>
</div>
<!-- class="sect3" -->
<div id="ODPNT373" class="sect3"><a id="sthref549"></a>
<h3 class="sect3">XML Element Name to Column Name Mapping<a id="sthref550"></a></h3>
<p>This section describes how Oracle database handles the mapping of XML element names to column names when using XML for data manipulation in the database. The following <code>specialchars</code> table involving the <code>some</code> <code>id</code> column demonstrates this handling.</p>
<pre>// Create the specialchars table
create table specialchars (&#34;some id&#34; number, name varchar2(255));
</pre>
<p>Note that the <code>specialchars</code> table has a column named <code>some</code> <code>id</code> that contains a blank space character. The space character is not allowed in an XML element name.</p>
</div>
<!-- class="sect3" -->
<div id="ODPNT374" class="sect3"><a id="sthref551"></a>
<h3 class="sect3">Saving Changes to a Table Using an XML Document <a id="sthref552"></a></h3>
<p>When an XML document is used to save changes to a table or view, the <code>OracleCommand.XmlSaveProperties.UpdateColumnsList</code> property is used to specify the list of columns to update or insert.</p>
<p>When an XML document is used to save changes to a column in a table or view, and the corresponding column name contains any of the characters that are not valid in an XML element name, the escaped column name must be specified in the <code>UpdateColumnsList</code> property as in the following example.</p>
<p>The following XML document can be used to insert values (<code>2</code>, <code>&lt;Jones&gt;</code>) into the <code>specialchars</code> table:</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
  &lt;ROWSET&gt;
    &lt;ROW&gt;
      &lt;some_x0020_id&gt;2&lt;/some_x0020_id&gt;
      &lt;NAME&gt;&amp;lt;Jones&amp;gt;&lt;/NAME&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
</pre>
<p>The following example specifies the list of columns to update or insert:</p>
<pre>/* Database Setup
connect scott/tiger@oracle
drop table specialchars;
create table specialchars (&#34;some id&#34; number, name varchar2(255));
insert into specialchars values (1, &#39;&lt;Jones&gt;&#39;);
commit;
*/
 
// C#
 
using System;
using System.Data;
using System.Xml;
using Oracle.DataAccess.Client; 
 
class InsertUsingXmlDocSample
{
  static void Main()
  {
    OracleConnection con = new OracleConnection();
 
    con.ConnectionString = &#34;User Id=scott;Password=tiger;Data Source=oracle;&#34;;
    con.Open();
    Console.WriteLine(&#34;Connected Successfully&#34;);
 
    // Create the command
    OracleCommand cmd = new OracleCommand(&#34;&#34;, con);
 
    // Set the XML command type to query.
    cmd.XmlCommandType = OracleXmlCommandType.Insert;
 
    // Set the XML document
    cmd.CommandText = &#34;&lt;?xml version = &#39;1.0&#39;?&gt;\n&#34; + &#34;&lt;ROWSET&gt;\n&#34; + &#34;&lt;ROW&gt;\n&#34; +
      &#34;&lt;some_x0020_id&gt;2&lt;/some_x0020_id&gt;\n&#34; + &#34;&lt;NAME&gt;&amp;lt;Jones&amp;gt;&lt;/NAME&gt;\n&#34; + 
      &#34;&lt;/ROW&gt;\n&#34; + &#34;&lt;/ROWSET&gt;\n&#34;;
    cmd.XmlSaveProperties.Table = &#34;specialchars&#34;;
 
    string[] ucols = new string[2];
 
    ucols[0] = &#34;some_x0020_id&#34;;
    ucols[1] = &#34;NAME&#34;;
    cmd.XmlSaveProperties.UpdateColumnsList = ucols;
 
    // Insert rows
    int rows = cmd.ExecuteNonQuery();
 
    Console.WriteLine(&#34;Number of rows inserted successfully : {0} &#34;, rows);
 
    // Close and Dispose OracleConnection object
    con.Close();
    con.Dispose();
  }
}
</pre>
<div id="ODPNT375" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref553"></a>
<h4 class="sect4">Improving Default Mapping<a id="sthref554"></a><a id="sthref555"></a></h4>
<p>You can improve the default mapping by using the following techniques:</p>
<ul>
<li>
<p>Modify the target. Create an object-relational view over the target schema, and make the view the new target.</p>
</li>
<li>
<p>Modify the XML document. Use XSLT to transform the XML document. Specify the XSL document and parameters. The transformation is done before the changes are saved. Note that this is may have an impact on performance.</p>
</li>
<li>
<p>Specify the name of the row tag used in the XML document.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="ODPNT376" class="sect3"><a id="sthref556"></a>
<h3 class="sect3">Object-Relational Data<a id="sthref557"></a></h3>
<p>Changes in an XML document can also be saved to object-relational data. Each item in a collection can be specified in one of the following ways in the XML document:</p>
<ul>
<li>
<p>By enclosing the database type name of the item as the XML element name.</p>
</li>
<li>
<p>By enclosing the name of the database column holding the collection with <code>_ITEM</code> appended as the XML element name.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="ODPNT377" class="sect3"><a id="sthref558"></a>
<h3 class="sect3">Multiple Tables<a id="sthref559"></a></h3>
<p>Oracle Database does not save changes to multiple relational tables that have been joined together. Oracle recommends that you create a view on those relational tables, and then update that view. If the view cannot be updated, triggers can be used instead.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01103" href="../SQLRF/statements_4003.htm#SQLRF01103"><span class="italic">Oracle Database SQL Language Reference</span></a> for the description and syntax of the <code>CREATE</code> <code>VIEW</code> statement</div>
</div>
<!-- class="sect3" -->
<div id="ODPNT378" class="sect3"><a id="sthref560"></a>
<h3 class="sect3">Commit <a id="sthref561"></a><a id="sthref562"></a>Transactions</h3>
<p>When the changes in an XML document are made, either all the changes are committed, or if an error occurs, all changes are rolled back.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4219">
<tr>
<td class="cellalignment4226">
<table class="cellalignment4224">
<tr>
<td class="cellalignment4223"><a href="featLOBsupp.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4223"><a href="featUDTs.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4228">
<table class="cellalignment4222">
<tr>
<td class="cellalignment4223"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4223"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4223"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4223"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4223"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4223"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>