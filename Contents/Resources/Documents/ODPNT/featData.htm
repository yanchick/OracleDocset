<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79202"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Obtaining%20Data%20from%20an%20OracleDataReader%20Object"></a><title>Obtaining Data from an OracleDataReader Object</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-10-14T19:43:26Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Data Provider for .NET Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17732-11"/>
<meta name="dcterms.isVersionOf" content="ODPNT"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="featTypes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="featRefCursor.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17732-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/172</span> <!-- End Header --><a id="i1006788"></a>
<div id="ODPNT283" class="sect1">
<h1 class="sect1">Obtaining Data from an OracleDataReader Object<a id="sthref382"></a><a id="sthref383"></a></h1>
<p>The <code>ExecuteReader</code> method of the <code>OracleCommand</code> object returns an <code>OracleDataReader</code> object, which is a read-only, forward-only result set.</p>
<p>This section provides the following information about the <code>OracleDataReader</code> object:</p>
<ul>
<li>
<p><a href="#i1006806">Typed OracleDataReader Accessors</a></p>
</li>
<li>
<p><a href="#i1007197">Obtaining LONG and LONG RAW Data</a></p>
</li>
<li>
<p><a href="#BABFGDGJ">Obtaining LOB Data</a></p>
</li>
<li>
<p><a href="#i1007208">Controlling the Number of Rows Fetched in One Database Round-Trip</a></p>
</li>
</ul>
<a id="i1006806"></a>
<div id="ODPNT284" class="sect2">
<h2 class="sect2">Typed OracleDataReader Accessors<a id="sthref384"></a><a id="sthref385"></a></h2>
<p>The <code>OracleDataReader</code> class provides two types of typed accessors:</p>
<ul>
<li>
<p><a href="#i1006818">.NET Type Accessors</a></p>
</li>
<li>
<p><a href="#i1007001">ODP.NET Type Accessors</a></p>
</li>
</ul>
<a id="i1006818"></a>
<div id="ODPNT285" class="sect3">
<h3 class="sect3">.NET Type Accessors<a id="sthref386"></a></h3>
<p><a href="#g1024876">Table 3-12</a> lists all the <a id="sthref387"></a>Oracle native database types that ODP.NET supports, and the corresponding .NET types that can represent the Oracle native type. If more than one .NET type can be used to represent an Oracle native type, the first entry is the .NET type that best represents the Oracle native type. The third column indicates the valid typed accessor that can be invoked for an Oracle native type to be obtained as a .NET type. If an invalid typed accessor is used for a column, an <code><a id="sthref388"></a>InvalidCastException</code> is thrown. Oracle native data types depend on the version of the database; therefore, some data types are not available in earlier versions of Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="OracleDataAdapterClass.htm#i1001593">&#34;OracleDataAdapter Class&#34;</a></p>
</li>
<li>
<p><a href="OracleDataReaderClass.htm#i1003252">&#34;OracleDataReader Class&#34;</a></p>
</li>
</ul>
</div>
<div id="ODPNT286" class="tblformal">
<p class="titleintable"><a id="sthref389"></a><a id="g1024876"></a>Table 3-12 .NET Type Accessors</p>
<table class="cellalignment4231" title=".NET Type Accessors " summary="rows are Oracle native types. first column is name, second column is .NET type, and third column is typed accessor" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t63">Oracle Native Data Type</th>
<th class="cellalignment4230" id="r1c2-t63">.NET Type</th>
<th class="cellalignment4230" id="r1c3-t63">Typed Accessor</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t63" headers="r1c1-t63">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment4226" headers="r2c1-t63 r1c2-t63">
<p><code>System.Byte[]</code></p>
</td>
<td class="cellalignment4226" headers="r2c1-t63 r1c3-t63">
<p><code>GetBytes</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t63" headers="r1c1-t63">
<p><code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment4226" headers="r3c1-t63 r1c2-t63">
<p><code>System.Double</code></p>
</td>
<td class="cellalignment4226" headers="r3c1-t63 r1c3-t63">
<p><code>GetDouble</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t63" headers="r1c1-t63">
<p><code>BINARY_FLOAT</code></p>
</td>
<td class="cellalignment4226" headers="r4c1-t63 r1c2-t63">
<p><code>System.Single</code></p>
</td>
<td class="cellalignment4226" headers="r4c1-t63 r1c3-t63">
<p><code>GetFloat</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t63" headers="r1c1-t63">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment4226" headers="r5c1-t63 r1c2-t63">
<p><code>System.Byte[]</code></p>
</td>
<td class="cellalignment4226" headers="r5c1-t63 r1c3-t63">
<p><code>GetBytes</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t63" headers="r1c1-t63">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment4226" headers="r6c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r6c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t63" headers="r1c1-t63">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment4226" headers="r7c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r7c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r8c1-t63" headers="r1c1-t63">
<p><code>DATE</code></p>
</td>
<td class="cellalignment4226" headers="r8c1-t63 r1c2-t63">
<p><code>System.DateTime</code></p>
</td>
<td class="cellalignment4226" headers="r8c1-t63 r1c3-t63">
<p><code>GetDateTime</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r9c1-t63" headers="r1c1-t63">
<p><code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code></p>
</td>
<td class="cellalignment4226" headers="r9c1-t63 r1c2-t63">
<p><code>System.Timespan</code></p>
</td>
<td class="cellalignment4226" headers="r9c1-t63 r1c3-t63">
<p><code>GetTimeSpan</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r10c1-t63" headers="r1c1-t63">
<p><code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code></p>
</td>
<td class="cellalignment4226" headers="r10c1-t63 r1c2-t63">
<p><code>System.Int64</code></p>
</td>
<td class="cellalignment4226" headers="r10c1-t63 r1c3-t63">
<p><code>GetInt64</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r11c1-t63" headers="r1c1-t63">
<p><code>LONG</code></p>
</td>
<td class="cellalignment4226" headers="r11c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r11c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r12c1-t63" headers="r1c1-t63">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment4226" headers="r12c1-t63 r1c2-t63">
<p><code>System.Byte[</code><code>]</code></p>
</td>
<td class="cellalignment4226" headers="r12c1-t63 r1c3-t63">
<p><code>GetBytes</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r13c1-t63" headers="r1c1-t63">
<p><code>NCHAR</code></p>
</td>
<td class="cellalignment4226" headers="r13c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r13c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r14c1-t63" headers="r1c1-t63">
<p><code>NCLOB</code></p>
</td>
<td class="cellalignment4226" headers="r14c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r14c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r15c1-t63" headers="r1c1-t63">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment4226" headers="r15c1-t63 r1c2-t63">
<p><code>System.Decimal</code></p>
<p><code>System.Byte</code></p>
<p><code>System.Int16</code></p>
<p><code>System.Int32</code></p>
<p><code>System.Int64</code></p>
<p><code>System.Single</code></p>
<p><code>System.Double</code></p>
</td>
<td class="cellalignment4226" headers="r15c1-t63 r1c3-t63">
<p><code>GetDecimal</code></p>
<p><code>GetByte</code></p>
<p><code>GetInt16</code></p>
<p><code>GetInt32</code></p>
<p><code>GetInt64</code></p>
<p><code>GetFloat</code></p>
<p><code>GetDouble</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r16c1-t63" headers="r1c1-t63">
<p><code>NVARCHAR2</code></p>
</td>
<td class="cellalignment4226" headers="r16c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r16c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r17c1-t63" headers="r1c1-t63">
<p><code>RAW</code></p>
</td>
<td class="cellalignment4226" headers="r17c1-t63 r1c2-t63">
<p><code>System.Byte[</code><code>]</code></p>
</td>
<td class="cellalignment4226" headers="r17c1-t63 r1c3-t63">
<p><code>GetBytes</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r18c1-t63" headers="r1c1-t63">
<p><code>REF</code></p>
</td>
<td class="cellalignment4226" headers="r18c1-t63 r1c2-t63">
<p><code>System.String</code></p>
</td>
<td class="cellalignment4226" headers="r18c1-t63 r1c3-t63">
<p><code>GetString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r19c1-t63" headers="r1c1-t63">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment4226" headers="r19c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r19c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r20c1-t63" headers="r1c1-t63">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment4226" headers="r20c1-t63 r1c2-t63">
<p><code>System.DateTime</code></p>
</td>
<td class="cellalignment4226" headers="r20c1-t63 r1c3-t63">
<p><code>GetDateTime</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r21c1-t63" headers="r1c1-t63">
<p><code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code></p>
</td>
<td class="cellalignment4226" headers="r21c1-t63 r1c2-t63">
<p><code>System.DateTime</code></p>
</td>
<td class="cellalignment4226" headers="r21c1-t63 r1c3-t63">
<p><code>GetDateTime</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r22c1-t63" headers="r1c1-t63">
<p><code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code></p>
</td>
<td class="cellalignment4226" headers="r22c1-t63 r1c2-t63">
<p><code>System.DateTime</code></p>
</td>
<td class="cellalignment4226" headers="r22c1-t63 r1c3-t63">
<p><code>GetDateTime</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r23c1-t63" headers="r1c1-t63">
<p><code>UROWID</code></p>
</td>
<td class="cellalignment4226" headers="r23c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r23c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r24c1-t63" headers="r1c1-t63">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment4226" headers="r24c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Char[]</code></p>
</td>
<td class="cellalignment4226" headers="r24c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetChars</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r25c1-t63" headers="r1c1-t63">
<p><code>XMLType</code></p>
</td>
<td class="cellalignment4226" headers="r25c1-t63 r1c2-t63">
<p><code>System.String</code></p>
<p><code>System.Xml.XmlReader</code></p>
</td>
<td class="cellalignment4226" headers="r25c1-t63 r1c3-t63">
<p><code>GetString</code></p>
<p><code>GetXmlReader</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Certain methods and properties of the <code>OracleDataReader</code> object require ODP.NET to map a <code>NUMBER</code> column to a .NET type based on the precision and scale of the column. These members are:</p>
<ul>
<li>
<p><code>Item</code> property</p>
</li>
<li>
<p><code>GetFieldType</code> method</p>
</li>
<li>
<p><code>GetValue</code> method</p>
</li>
<li>
<p><code>GetValues</code> method</p>
</li>
</ul>
<p>ODP.NET determines the appropriate .NET type by considering the following .NET types in order, and selecting the first .NET type from the list that can represent the entire range of values of the column:</p>
<ul>
<li>
<p><code>System.Byte</code></p>
</li>
<li>
<p><code>System.Int16</code></p>
</li>
<li>
<p><code>System.Int32</code></p>
</li>
<li>
<p><code>System.Int64</code></p>
</li>
<li>
<p><code>System.Single</code></p>
</li>
<li>
<p><code>System.Double</code></p>
</li>
<li>
<p><code>System.Decimal</code></p>
</li>
</ul>
<p>If no .NET type exists that can represent the entire range of values of the column, then an attempt is made to represent the column values as a <code>System.Decimal</code> type. If the value in the column cannot be represented as <code>System.Decimal</code>, then an exception is raised.</p>
<p>For example, consider two columns defined as <code>NUMBER(4,0)</code> and <code>NUMBER(10,2)</code>. The first .NET types from the previous list that can represent the entire range of values of the columns are <code>System.Int16</code> and <code>System.Double</code>, respectively. However, consider a column defined as <code>NUMBER(20,10)</code>. In this case, there is no .NET type that can represent the entire range of values on the column, so an attempt is made to return values in the column as a <code>System.Decimal</code> type. If a value in the column cannot be represented as a <code>System.Decimal type</code>, then an exception is raised.</p>
<p>The <code>Fill</code> method of the <code>OracleDataAdapter</code> class uses the <code>OracleDataReader</code> object to populate or refresh a <code>DataTable</code> or <code>DataSet</code> with .NET types. As a result, the .NET type used to represent a <code>NUMBER</code> column in the <code>DataTable</code> or <code>DataSet</code> also depends on the precision and scale of the column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="OracleDataReaderClass.htm#i1003252">&#34;OracleDataReader Class&#34;</a></p>
</li>
<li>
<p><a href="OracleDataAdapterClass.htm#i1001593">&#34;OracleDataAdapter Class&#34;</a></p>
</li>
<li>
<p><a href="OracleDataReaderClass.htm#i1004157">&#34;Item&#34;</a></p>
</li>
<li>
<p><a href="OracleDataReaderClass.htm#i1005058">&#34;GetFieldType&#34;</a></p>
</li>
<li>
<p><a href="OracleDataReaderClass.htm#i1006589">&#34;GetValues&#34;</a></p>
</li>
<li>
<p><a href="OracleDataReaderClass.htm#i1006555">&#34;GetValue&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1007001"></a>
<div id="ODPNT287" class="sect3">
<h3 class="sect3">ODP.NET Type Accessors<a id="sthref390"></a></h3>
<p>ODP.NET exposes provider-specific types that natively represent the data types in the database. In some cases, these ODP.NET types provide better performance and functioning than the corresponding .NET types. The ODP.NET types can be obtained from the <code>OracleDataReader</code> object by calling their respective typed accessor.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="featTypes.htm#i1006604">&#34;ODP.NET Types Overview&#34;</a> for a list of all ODP.NET types</div>
<p><a href="#g1024972">Table 3-13</a> lists the valid type accessors that ODP.NET uses to obtain ODP.NET types for an Oracle native type.</p>
<div id="ODPNT288" class="tblformal">
<p class="titleintable"><a id="sthref391"></a><a id="g1024972"></a>Table 3-13 ODP.NET Type Accessors</p>
<table class="cellalignment4231" title="ODP.NET Type Accessors " summary="rows are Oracle native types. first column is name, second column is ODP.NET type, and third column is typed accessor" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t66">Oracle Native Data Type</th>
<th class="cellalignment4230" id="r1c2-t66">ODP.NET Type</th>
<th class="cellalignment4230" id="r1c3-t66">Typed Accessor</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t66" headers="r1c1-t66">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment4226" headers="r2c1-t66 r1c2-t66">
<p><code>OracleBFile</code></p>
</td>
<td class="cellalignment4226" headers="r2c1-t66 r1c3-t66">
<p><code>GetOracleBFile</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t66" headers="r1c1-t66">
<p><code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment4226" headers="r3c1-t66 r1c2-t66">
<p><code>OracleDecimal</code></p>
</td>
<td class="cellalignment4226" headers="r3c1-t66 r1c3-t66">
<p><code>GetOracleDecimal</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t66" headers="r1c1-t66">
<p><code>BINARY_FLOAT</code></p>
</td>
<td class="cellalignment4226" headers="r4c1-t66 r1c2-t66">
<p><code>OracleDecimal</code></p>
</td>
<td class="cellalignment4226" headers="r4c1-t66 r1c3-t66">
<p><code>GetOracleDecimal</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t66" headers="r1c1-t66">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment4226" headers="r5c1-t66 r1c2-t66">
<p><code>OracleBlob</code></p>
<p><code>OracleBlob</code></p>
<p><code>OracleBinary</code></p>
</td>
<td class="cellalignment4226" headers="r5c1-t66 r1c3-t66">
<p><code>GetOracleBlob</code></p>
<p><code>GetOracleBlobForUpdate</code></p>
<p><code>GetOracleBinary</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t66" headers="r1c1-t66">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment4226" headers="r6c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r6c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t66" headers="r1c1-t66">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment4226" headers="r7c1-t66 r1c2-t66">
<p><code>OracleClob</code></p>
<p><code>OracleClob</code></p>
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r7c1-t66 r1c3-t66">
<p><code>GetOracleClob</code></p>
<p><code>GetOracleClobForUpdate</code></p>
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r8c1-t66" headers="r1c1-t66">
<p><code>DATE</code></p>
</td>
<td class="cellalignment4226" headers="r8c1-t66 r1c2-t66">
<p><code>OracleDate</code></p>
</td>
<td class="cellalignment4226" headers="r8c1-t66 r1c3-t66">
<p><code>GetOracleDate</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r9c1-t66" headers="r1c1-t66">
<p><code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code></p>
</td>
<td class="cellalignment4226" headers="r9c1-t66 r1c2-t66">
<p><code>OracleIntervalDS</code></p>
</td>
<td class="cellalignment4226" headers="r9c1-t66 r1c3-t66">
<p><code>GetOracleIntervalDS</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r10c1-t66" headers="r1c1-t66">
<p><code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code></p>
</td>
<td class="cellalignment4226" headers="r10c1-t66 r1c2-t66">
<p><code>OracleIntervalYM</code></p>
</td>
<td class="cellalignment4226" headers="r10c1-t66 r1c3-t66">
<p><code>GetOracleIntervalYM</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r11c1-t66" headers="r1c1-t66">
<p><code>LONG</code></p>
</td>
<td class="cellalignment4226" headers="r11c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r11c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r12c1-t66" headers="r1c1-t66">
<p><code>LONG</code> <code>RAW</code></p>
</td>
<td class="cellalignment4226" headers="r12c1-t66 r1c2-t66">
<p><code>OracleBinary</code></p>
</td>
<td class="cellalignment4226" headers="r12c1-t66 r1c3-t66">
<p><code>GetOracleBinary</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r13c1-t66" headers="r1c1-t66">
<p><code>NCHAR</code></p>
</td>
<td class="cellalignment4226" headers="r13c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r13c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r14c1-t66" headers="r1c1-t66">
<p><code>NCLOB</code></p>
</td>
<td class="cellalignment4226" headers="r14c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r14c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r15c1-t66" headers="r1c1-t66">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment4226" headers="r15c1-t66 r1c2-t66">
<p><code>OracleDecimal</code></p>
</td>
<td class="cellalignment4226" headers="r15c1-t66 r1c3-t66">
<p><code>GetOracleDecimal</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r16c1-t66" headers="r1c1-t66">
<p><code>NVARCHAR2</code></p>
</td>
<td class="cellalignment4226" headers="r16c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r16c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r17c1-t66" headers="r1c1-t66">
<p><code>RAW</code></p>
</td>
<td class="cellalignment4226" headers="r17c1-t66 r1c2-t66">
<p><code>OracleBinary</code></p>
</td>
<td class="cellalignment4226" headers="r17c1-t66 r1c3-t66">
<p><code>GetOracleBinary</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r18c1-t66" headers="r1c1-t66">
<p><code>REF</code></p>
</td>
<td class="cellalignment4226" headers="r18c1-t66 r1c2-t66">
<p>OracleRef</p>
</td>
<td class="cellalignment4226" headers="r18c1-t66 r1c3-t66">
<p><code>GetOracleRef</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r19c1-t66" headers="r1c1-t66">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment4226" headers="r19c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r19c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r20c1-t66" headers="r1c1-t66">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment4226" headers="r20c1-t66 r1c2-t66">
<p><code>OracleTimeStamp</code></p>
</td>
<td class="cellalignment4226" headers="r20c1-t66 r1c3-t66">
<p><code>GetOracleTimeStamp</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r21c1-t66" headers="r1c1-t66">
<p><code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code></p>
</td>
<td class="cellalignment4226" headers="r21c1-t66 r1c2-t66">
<p><code>OracleTimeStampLTZ</code></p>
</td>
<td class="cellalignment4226" headers="r21c1-t66 r1c3-t66">
<p><code>GetOracleTimeStampLTZ</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r22c1-t66" headers="r1c1-t66">
<p><code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code></p>
</td>
<td class="cellalignment4226" headers="r22c1-t66 r1c2-t66">
<p><code>OracleTimeStampTZ</code></p>
</td>
<td class="cellalignment4226" headers="r22c1-t66 r1c3-t66">
<p><code>GetOracleTimeStampTZ</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r23c1-t66" headers="r1c1-t66">
<p><code>UROWID</code></p>
</td>
<td class="cellalignment4226" headers="r23c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r23c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r24c1-t66" headers="r1c1-t66">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment4226" headers="r24c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
</td>
<td class="cellalignment4226" headers="r24c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r25c1-t66" headers="r1c1-t66">
<p><code>XMLType</code></p>
</td>
<td class="cellalignment4226" headers="r25c1-t66 r1c2-t66">
<p><code>OracleString</code></p>
<p><code>OracleXmlType</code></p>
</td>
<td class="cellalignment4226" headers="r25c1-t66 r1c3-t66">
<p><code>GetOracleString</code></p>
<p><code>GetOracleXmlType</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007197"></a>
<div id="ODPNT289" class="sect2">
<h2 class="sect2">Obtaining LONG and LONG RAW Data<a id="sthref392"></a><a id="sthref393"></a><a id="sthref394"></a><a id="sthref395"></a><a id="sthref396"></a><a id="sthref397"></a><a id="sthref398"></a><a id="sthref399"></a><a id="sthref400"></a></h2>
<p>ODP.NET fetches and caches rows from the database during the <code>Read</code> method invocations on the <code>OracleDataReader</code> object. The amount of <code>LONG</code> and <code>LONG</code> <code>RAW</code> column data that is retrieved from this operation is determined by <code>InitialLONGFetchSize</code>. The different behaviors observed when <code>InitialLONGFetchSize</code> is set to <code>0</code>, greater than <code>0</code>, and <code>-1</code> are explained in the following sections.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
ODP.NET does not support the <code>CommandBehavior.SequentialAccess</code> enumeration value. Therefore, <code>LONG</code> and <code>LONG</code> <code>RAW</code> data can be fetched randomly.</div>
<a id="BABIDFGB"></a>
<div id="ODPNT290" class="sect3">
<h3 class="sect3">Setting InitialLONGFetchSize to Zero or a Value Greater than Zero</h3>
<p>The specified amount of <code>InitialLONGFetchSize</code> characters or bytes for <code>LONG</code> or <code>LONG</code> <code>RAW</code> column data is retrieved into the cache during the <code>Read</code> method invocations on the <code>OracleDataReader</code> object.</p>
<p>By default, <code>InitialLONGFetchSize</code> is set to 0. In this case, ODP.NET does not fetch any <code>LONG</code> or <code>LONG</code> <code>RAW</code> column data during the <code>Read</code> method invocations on the <code>OracleDataReader</code> object. The <code>LONG</code> or <code>LONG</code> <code>RAW</code> data is fetched when the typed accessor method is explicitly invoked for the <code>LONG</code> or <code>LONG</code> <code>RAW</code> column, which incurs a database round-trip because no data is cached.</p>
<p>If <code>InitialLONGFetchSize</code> is set to a value greater than <code>0</code>, that amount of specified data is cached by ODP.NET during the <code>Read</code> method invocations on the <code>OracleDataReader</code> object. If the application requests an amount of data less than or equal to the <code>InitialLONGFetchSize</code> through the typed accessor methods, no database round-trip is incurred. However, an additional database round-trip is required to fetch data beyond <code>InitialLONGFetchSize</code>.</p>
<p>To obtain data beyond the <code>InitialLONGFetchSize</code> characters or bytes, one of the following must be in the select list:</p>
<ul>
<li>
<p>Primary key</p>
</li>
<li>
<p><code>ROWID</code></p>
</li>
<li>
<p>Unique columns - (defined as a set of columns on which a unique constraint has been defined or a unique index has been created, where at least one of the columns in the set has a <code>NOT</code> <code>NULL</code> constraint defined on it)</p>
</li>
</ul>
<p>To be able to fetch the entire <code>LONG</code> or <code>LONG</code> <code>RAW</code> data without having a primary key column, a <code>ROWID</code>, or unique columns in the select list, set the size of the <code>InitialLONGFetchSize</code> property on the <code>OracleCommand</code> object to equal or greater than the number of characters or bytes needed to be retrieved.</p>
<p>The <code>LONG</code> or <code>LONG</code> <code>RAW</code> data is returned when the appropriate typed accessor method (<code>GetChars</code>, <code>GetOracleString</code>, or <code>GetString</code> for <code>LONG</code> or <code>GetOracleBinary</code> or <code>GetBytes</code> for <code>LONG</code> <code>RAW</code>) is called on the <code>OracleDataReader</code> object.</p>
</div>
<!-- class="sect3" -->
<a id="BABHCEGJ"></a>
<div id="ODPNT291" class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3">Setting InitialLONGFetchSize to -1</h3>
<p>By setting <code>InitialLONGFetchSize</code> to <code>-1</code>, it is possible to fetch the entire <code>LONG</code> or <code>LONG</code> <code>RAW</code> data from the database for a select query, without requiring a primary key, <code>ROWID</code>, or unique column in the select list.</p>
<p>When <code>InitialLONGFetchSize</code> is set to <code>-1</code>, the entire <code>LONG</code> or <code>LONG</code> <code>RAW</code> data is retrieved and cached during <code>Read</code> method invocations on the <code>OracleDataReader</code> object. Calls to <code>GetString</code>, <code>GetOracleString</code>, <code>GetChars</code>, <code>GetBytes</code>, or <code>GetOracleBinary</code> in the <code>OracleDataReader</code> return the entire column data.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFGDGJ"></a>
<div id="ODPNT292" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2">Obtaining LOB Data<a id="sthref401"></a><a id="sthref402"></a><a id="sthref403"></a><a id="sthref404"></a><a id="sthref405"></a><a id="sthref406"></a><a id="sthref407"></a></h2>
<p>ODP.NET fetches and caches rows from the database during the <code>Read</code> method invocations on the <code>OracleDataReader</code> object. The amount of LOB column data that is retrieved from this operation is determined by <code>InitialLOBFetchSize</code>.</p>
<p>The following is a complete list of typed accessor methods that an application can call for the <code>CLOB</code> and <code>BLOB</code> columns, if <code>InitialLOBFetchSize</code> is set to <code>0</code>, greater than <code>0</code>, or <code>-1</code>:</p>
<ul>
<li>
<p>Methods callable for <code>BLOB</code> column</p>
<ul>
<li>
<p><code>GetBytes</code></p>
</li>
<li>
<p><code>GetValue</code></p>
</li>
<li>
<p><code>GetValues</code></p>
</li>
<li>
<p><code>GetOracleBinary</code></p>
</li>
<li>
<p><code>GetOracleBlob</code></p>
</li>
<li>
<p><code>GetOracleBlobForUpdate</code></p>
</li>
<li>
<p><code>GetOracleValue</code></p>
</li>
<li>
<p><code>GetOracleValues</code></p>
</li>
</ul>
</li>
<li>
<p>Methods callable for <code>CLOB</code> column</p>
<ul>
<li>
<p><code>GetChars</code></p>
</li>
<li>
<p><code>GetString</code></p>
</li>
<li>
<p><code>GetValue</code></p>
</li>
<li>
<p><code>GetValues</code></p>
</li>
<li>
<p><code>GetOracleString</code></p>
</li>
<li>
<p><code>GetOracleClob</code></p>
</li>
<li>
<p><code>GetOracleClobForUpdate</code></p>
</li>
<li>
<p><code>GetOracleValue</code></p>
</li>
<li>
<p><code>GetOracleValues</code></p>
</li>
</ul>
</li>
</ul>
<p>The following sections explain the different behaviors observed when <code>InitialLOBFetchSize</code> is set to <code>0</code>, greater than <code>0</code>, and -1.</p>
<a id="BABHEEEH"></a>
<div id="ODPNT293" class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3">Setting InitialLOBFetchSize to Zero</h3>
<p>By default, the <code>InitialLOBFetchSize</code> property is 0. This value dictates to ODP.NET that any LOBs selected will have their client LOB data fetches deferred until after the <code>OracleDataReader</code> <code>Read</code>, such as when using the an accessor. Each LOB value is retrieved only at the point it is individually accessed.</p>
<p>The advantage of using this retrieval strategy is that it conserves client memory and bandwidth. If the LOBs selected are either very large or not necessary to be immediately consumed by the end user, or both, then the application can perform better if LOBs are retrieved as needed, rather than all at once.</p>
</div>
<!-- class="sect3" -->
<a id="BABHHBGF"></a>
<div id="ODPNT294" class="sect3">
<h3 class="sect3">Setting InitialLOBFetchSize to a Value Greater than Zero</h3>
<p>If <code>InitialLOBFetchSize</code> is set to a value greater than <code>0</code>, ODP.NET caches LOB data up to <code>InitialLOBFetchSize</code> characters or bytes for each LOB selected during the <code>Read</code> method invocations on the <code>OracleDataReader</code> object. The maximum value is 2,147,483,647 (2GB). If the total size of a selected LOB is less than this number, the entire LOB data will be read.</p>
<p>By pre-fetching all LOB entries in one or more database round trips, applications can perform faster by reducing round trips. This approach is most advantageous when most LOBs are either small in size, or consumed by the end user almost immediately, or both. The down side of a large fetch size is higher memory consumption.</p>
<p>This section discusses the ways to fetch beyond the <code>InitialLOBFetchSize</code> characters or bytes that are cached.</p>
<p>The remaining LOB data is returned when a typed accessor is invoked, regardless of the value set to the <code>InitialLOBFetchSize</code> property. Primary key, <code>ROWID</code>, or unique columns are not required to be in the query select list to obtain data beyond the specified <code>InitialLOBFetchSize</code>.</p>
<p>The <code>GetOracleBlob</code>, <code>GetOracleClob</code>, <code>GetOracleBlobForUpdate</code>, and <code>GetOracleClobForUpdate</code> methods can now be invoked even if <code>InitialLOBFetchSize</code> is greater than <code>0</code>.</p>
</div>
<!-- class="sect3" -->
<a id="BABHJAAH"></a>
<div id="ODPNT297" class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3">Setting InitialLOBFetchSize to -1</h3>
<p>To fetch all LOB data selected during the read operation and not be bound by a set limit per LOB, set <code>InitialLOBFetchSize</code> to <code>-1</code>. A new default behavior has been introduced for ODP.NET Release 12.1.0.2 and higher when <code>InitialLobFetchSize</code> is set to <code>-1</code>.</p>
<p>When <code>LegacyEntireLOBFetch = 0</code>, which is the default value, the following operations are invoked for a LOB column:</p>
<ul>
<li>
<p><code>OracleDataReader.GetOracleClob()</code>: returns <code>OracleClob</code> object</p>
</li>
<li>
<p><code>OracleDataReader.GetOracleBlob()</code> : returns <code>OracleBlob</code> object</p>
</li>
<li>
<p><code>OracleDataReader.GetOracleClobForUpdate()</code>: returns <code>OracleClob</code> object</p>
</li>
<li>
<p><code>OracleDataReader.GetOracleBlobForUpdate()</code>: returns <code>OracleBlob</code> object</p>
</li>
<li>
<p><code>OracleDataReader.GetOracleValue()</code>: returns <code>OracleClob</code> object for a CLOB column</p>
</li>
<li>
<p><code>OracleDataReader.GetOracleValue()</code>: returns <code>OracleBlob</code> object for a BLOB column</p>
</li>
<li>
<p><code>OracleDataAdapter.Fill()</code> with <code>ProviderSpecificTypes=true</code>: populates <code>DataTable</code> with <code>OracleClob</code> for a <code>CLOB</code> column</p>
</li>
<li>
<p><code>OracleDataAdapter.Fill()</code> with <code>ProviderSpecificTypes=true</code>: populates <code>DataTable</code> with <code>OracleBlob</code> for a <code>BLOB</code> column</p>
</li>
</ul>
<p>To use the old behavior, set <code>LegacyEntireLobFetch = 1</code> in the ODP.NET configuration.</p>
<p>When <code>LegacyEntireLobFetch = 1</code> and <code>InitialLOBFetchSize = -1</code>, <code>GetOracleClob</code>, <code>GetOracleClobForUpdate</code>, <code>GetOracleBlob</code>, and <code>GetOracleBlobForUpdate</code> methods are not supported. The following operations are invoked for a LOB column in this scenario:</p>
<ul>
<li>
<p><code>OracleDataReader.GetOracleClob()</code>: throws <code>InvalidCastException()</code></p>
</li>
<li>
<p><code>OracleDataReader.GetOracleBlob()</code>: throws <code>InvalidCastException()</code></p>
</li>
<li>
<p><code>OracleDataReader.GetOracleClobForUpdate()</code>: throws <code>InvalidCastException()</code></p>
</li>
<li>
<p><code>OracleDataReader.GetOracleBlobForUpdate()</code>: throws <code>InvalidCastException()</code></p>
</li>
<li>
<p><code>OracleDataReader.GetOracleValue()</code>: returns <code>OracleString</code> object for a <code>CLOB</code> column</p>
</li>
<li>
<p><code>OracleDataReader.GetOracleValue()</code>: returns <code>OracleBinary</code> object for a <code>BLOB</code> column</p>
</li>
<li>
<p><code>OracleDataAdapter.Fill()</code> with <code>ProviderSpecificTypes=true</code>: populates <code>DataTable</code> with <code>OracleString</code> for a <code>CLOB</code> column</p>
</li>
<li>
<p><code>OracleDataAdapter.Fill()</code> with <code>ProviderSpecificTypes=true</code>: populates <code>DataTable</code> with <code>OracleBinary</code> for a <code>BLOB</code> column</p>
</li>
</ul>
<p>For releases prior to ODP.NET 12.1.0.2, by setting <code>InitialLOBFetchSize</code> to <code>-1</code>, it is possible to fetch the entire LOB data from the database for a select query, without requiring a primary key, <code>ROWID</code>, or unique column in the select list. When <code>InitialLOBFetchSize</code> is set to <code>-1</code>, the entire LOB column data is fetched and cached during the <code>Read</code> method invocations on the <code>OracleDataReader</code> object. Calls to <code>GetString</code>, <code>GetOracleString</code>, <code>GetChars</code>, <code>GetBytes</code>, or <code>GetOracleBinary</code> in the <code>OracleDataReader</code> allow retrieving all data.</p>
<div id="ODPNT298" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref408"></a>
<h4 class="sect4">Methods Supported for InitialLOBFetchSize of -1 and LegacyEntireLobFetch of 1</h4>
<p>This section lists supported and not supported methods for the <code>CLOB</code> and <code>BLOB</code> data types when the <code>InitialLOBFetchSize</code> property is set to <code>-1</code> and <code>LegacyEntireLobFetch</code> property is set to <code>1</code>.</p>
<p><a href="#CJABGICJ">Table 3-14</a> lists supported and not supported methods for the <code>CLOB</code> data types.</p>
<div id="ODPNT299" class="tblformal">
<p class="titleintable"><a id="sthref409"></a><a id="CJABGICJ"></a>Table 3-14 OracleDataReader CLOB Methods</p>
<table class="cellalignment4231" title="OracleDataReader CLOB Methods " summary="First column lists supported methods. Second lists unsupported methods" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t68">Supported</th>
<th class="cellalignment4230" id="r1c2-t68">Not Supported</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t68" headers="r1c1-t68">
<p><code>GetChars</code></p>
</td>
<td class="cellalignment4226" headers="r2c1-t68 r1c2-t68">
<p><code>GetOracleClob</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t68" headers="r1c1-t68">
<p><code>GetString</code></p>
</td>
<td class="cellalignment4226" headers="r3c1-t68 r1c2-t68">
<p><code>GetOracleClobForUpdate</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t68" headers="r1c1-t68">
<p><code>GetValue</code></p>
</td>
<td class="cellalignment4226" headers="r4c1-t68 r1c2-t68">&nbsp;</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t68" headers="r1c1-t68">
<p><code>GetValues</code></p>
</td>
<td class="cellalignment4226" headers="r5c1-t68 r1c2-t68">&nbsp;</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t68" headers="r1c1-t68">
<p><code>GetOracleString</code></p>
</td>
<td class="cellalignment4226" headers="r6c1-t68 r1c2-t68">&nbsp;</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t68" headers="r1c1-t68">
<p><code>GetOracleValue</code></p>
</td>
<td class="cellalignment4226" headers="r7c1-t68 r1c2-t68">&nbsp;</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r8c1-t68" headers="r1c1-t68">
<p><code>GetOracleValues</code></p>
</td>
<td class="cellalignment4226" headers="r8c1-t68 r1c2-t68">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#CJAHIHEG">Table 3-15</a> lists supported and not supported methods for the <code>BLOB</code> data types.</p>
<div id="ODPNT300" class="tblformal">
<p class="titleintable"><a id="sthref410"></a><a id="CJAHIHEG"></a>Table 3-15 OracleDataReader BLOB Methods</p>
<table class="cellalignment4231" title="OracleDataReader BLOB Methods " summary="First column lists supported methods. Second lists unsupported methods" dir="ltr">
<thead>
<tr class="cellalignment4220">
<th class="cellalignment4230" id="r1c1-t69">Supported</th>
<th class="cellalignment4230" id="r1c2-t69">Not Supported</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r2c1-t69" headers="r1c1-t69">
<p><code>GetBytes</code></p>
</td>
<td class="cellalignment4226" headers="r2c1-t69 r1c2-t69">
<p><code>GetOracleBlob</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r3c1-t69" headers="r1c1-t69">
<p><code>GetValue</code></p>
</td>
<td class="cellalignment4226" headers="r3c1-t69 r1c2-t69">
<p><code>GetOracleBlobForUpdate</code></p>
</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r4c1-t69" headers="r1c1-t69">
<p><code>GetValues</code></p>
</td>
<td class="cellalignment4226" headers="r4c1-t69 r1c2-t69">&nbsp;</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r5c1-t69" headers="r1c1-t69">
<p><code>GetOracleBinary</code></p>
</td>
<td class="cellalignment4226" headers="r5c1-t69 r1c2-t69">&nbsp;</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r6c1-t69" headers="r1c1-t69">
<p><code>GetOracleValue</code></p>
</td>
<td class="cellalignment4226" headers="r6c1-t69 r1c2-t69">&nbsp;</td>
</tr>
<tr class="cellalignment4220">
<td class="cellalignment4226" id="r7c1-t69" headers="r1c1-t69">
<p><code>GetOracleValues</code></p>
</td>
<td class="cellalignment4226" headers="r7c1-t69 r1c2-t69">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="ODPNT301" class="sect3"><a id="sthref411"></a>
<h3 class="sect3">Performance Considerations Related to the InitialLOBFetchSize Property</h3>
<p>This section discusses the advantages and disadvantages of the various <code>InitialLOBFetchSize</code> property settings in different situations.</p>
<p>An application does not have to choose between performance and <code>OracleBlob</code> and <code>OracleClob</code> functionality. Setting the <code>InitialLOBFetchSize</code> property results in a performance boost and still gives the flexibility to use the <code>OracleBlob</code> and <code>OracleClob</code> objects.</p>
<p>If the size of the LOB data is unknown or if the LOB data size varies irregularly, then it is better to leave the <code>InitialLOBFetchSize</code> property to its default value of <code>0</code>. This still gives better performance in most cases.</p>
<p>Setting the <code>InitialLOBFetchSize</code> property to a size equal to or greater than the LOB data size for most rows improves performance. It is generally recommended that the <code>InitialLOBFetchSize</code> property be set to a value larger than the size of the LOB data for more than 80% of the rows returned by the query. For example, if the size of the LOB data is less than 1 KB in 80% of the rows, and more than 1 MB for 20% of the rows, set the <code>InitialLOBFetchSize</code> property to 1 KB.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="featLOBsupp.htm#i1008076">&#34;LOB Support&#34;</a></p>
</li>
<li>
<p><a href="OracleCommandClass.htm#BABEGDHA">&#34;InitialLOBFetchSize&#34;</a></p>
</li>
<li>
<p><a href="OracleCommandClass.htm#BABCBFFB">&#34;InitialLONGFetchSize&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007208"></a>
<div id="ODPNT304" class="sect2">
<h2 class="sect2">Controlling the Number of Rows Fetched in One Database Round-Trip<a id="sthref412"></a><a id="sthref413"></a></h2>
<p>Application performance depends on the number of rows the application needs to fetch, and the number of database round-trips that are needed to retrieve them.</p>
<div id="ODPNT305" class="sect3"><a id="sthref414"></a>
<h3 class="sect3">Use of FetchSize<a id="sthref415"></a><a id="sthref416"></a><a id="sthref417"></a><a id="sthref418"></a></h3>
<p>The <code>FetchSize</code> property represents the total memory size in bytes that ODP.NET allocates to cache the data fetched from a database round-trip.</p>
<p>The <code>FetchSize</code> property can be set on the <code>OracleCommand,</code> <code>OracleDataReader</code>, or <code>OracleRefCursor</code> object, depending on the situation. It controls the fetch size for filling a <code>DataSet</code> or <code>DataTable</code> using an <code>OracleDataAdapter</code>.</p>
<p>If the <code>FetchSize</code> property is set on the <code>OracleCommand</code> object, then the newly created <code>OracleDataReader</code> object inherits the <code>FetchSize</code> property of the <code>OracleCommand</code> object. This inherited <code>FetchSize</code> value can be left as is, or modified to override the inherited value. The <code>FetchSize</code> property of the <code>OracleDataReader</code> object can be changed before the first <code>Read</code> method invocation, which allocates memory specified by the <code>FetchSize</code> property. All subsequent fetches from the database use the same cache allocated for that <code>OracleDataReader</code> object. Therefore, changing the <code>FetchSize</code> value after the first <code>Read</code> method invocation has no effect.</p>
</div>
<!-- class="sect3" -->
<div id="ODPNT306" class="sect3"><a id="sthref419"></a>
<h3 class="sect3">Fine-Tuning FetchSize<a id="sthref420"></a><a id="sthref421"></a></h3>
<p>By fine-tuning the <code>FetchSize</code> property, applications can control memory usage and the number of rows fetched in one database round-trip for better performance.</p>
<p>For example, if a query returns 100 rows and each row takes 1024 bytes, then setting the <code>FetchSize</code> property to 102400 takes just one database round-trip to fetch 100 rows. For the same query, if the <code>FetchSize</code> property is set to 10240, it takes 10 database round-trips to retrieve 100 rows. If the application requires all the rows to be fetched from the result set, the first scenario is faster than the second. However, if the application requires just the first 10 rows from the result set, the second scenario can perform better because it fetches only 10 rows, not 100 rows. When the next 10 rows are fetched, then the memory allocated for rows 1-10 is reused for rows 11-20.</p>
<p>The larger the <code>FetchSize</code>, the more system memory is used. Developers should not set large fetch sizes if their client systems have limited memory resources.</p>
</div>
<!-- class="sect3" -->
<div id="ODPNT307" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref422"></a>
<h3 class="sect3">Using the RowSize Property<a id="sthref423"></a><a id="sthref424"></a></h3>
<p>The <code>RowSize</code> property of the <code>OracleCommand</code> or <code>OracleRefCursor</code> object is populated with the row size (in bytes) after an execution of a <code>SELECT</code> statement. The <code>FetchSize</code> property can then be set to a value relative to the <code>RowSize</code> property by setting it to the result of multiplying the <code>RowSize</code> value times the number of rows to fetch for each database round-trip.</p>
<p>For example, setting the <code>FetchSize</code> to <code>RowSize</code> * 10 forces the <code>OracleDataReader</code> object to fetch exactly 10 rows for each database round-trip. Note that the <code>RowSize</code> value does not change due to the data length in each individual column. Instead, the <code>RowSize</code> value is determined strictly from the metadata information of the database table(s) that the <code>SELECT</code> statement is executed against.</p>
<p>The <code>RowSize</code> property can be used to set the <code>FetchSize</code> property at design time or at run time, as described in the following sections.</p>
<div id="ODPNT308" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref425"></a>
<h4 class="sect4">Setting FetchSize Value in the Registry</h4>
<p>The <code>HKLM\Software\Oracle\ODP.NET\</code> <code><span class="codeinlineitalic">version</span></code><code>\FetchSize</code> registry entry can be set to specify the default result set fetch size (in bytes) for all applications that use that particular version of ODP.NET or the <code>FetchSize</code> attribute in the application configuration or <code>web.config</code> file can specify the default value for a given application. By default, the fetch size is 131072 bytes. This value can be overridden programmatically by having the applications set the <code>FetchSize</code> property on either the <code>OracleCommand</code> or the <code>OracleDataReader</code> at run time.</p>
</div>
<!-- class="sect4" -->
<div id="ODPNT309" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref426"></a>
<h4 class="sect4">Setting FetchSize Value at Design Time<a id="sthref427"></a></h4>
<p>If the row size for a particular <code>SELECT</code> statement is already known from a previous execution, the <code>FetchSize</code> value of the <code>OracleCommand</code> object can be set at design time to the result of multiplying that row size times the number of rows the application wishes to fetch for each database round-trip. The <code>FetchSize</code> value set on the <code>OracleCommand</code> object is inherited by the <code>OracleDataReader</code> object that is created by the <code>ExecuteReader</code> method invocation on the <code>OracleCommand</code> object. Rather than setting the <code>FetchSize</code> value on the <code>OracleCommand</code> object, the <code>FetchSize</code> value can also be set on the <code>OracleDataReader</code> object directly. In either case, the <code>FetchSize</code> value is set at design time, without accessing the <code>RowSize</code> property value at run time.</p>
</div>
<!-- class="sect4" -->
<div id="ODPNT310" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref428"></a>
<h4 class="sect4">Setting FetchSize Value at Run Time<a id="sthref429"></a></h4>
<p>Applications that do not know the row size at design time can use the <code>RowSize</code> property of the <code>OracleCommand</code> object to set the <code>FetchSize</code> property of the <code>OracleDataReader</code> object. The <code>RowSize</code> property provides a dynamic way of setting the <code>FetchSize</code> property based on the size of a row.</p>
<p>After an <code>OracleDataReader</code> object is obtained by invoking the <code>ExecuteReader</code> method on the <code>OracleCommand</code> object, the <code>RowSize</code> property is populated with the size of the row (in bytes). By using the <code>RowSize</code> property, the application can dynamically set the <code>FetchSize</code> property of the <code>OracleDataReader</code> object to the product of the <code>RowSize</code> property value multiplied by the number of rows the application wishes to fetch for each database round-trip. In this scenario, the <code>FetchSize</code> property is set by accessing the <code>RowSize</code> property at run time.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4219">
<tr>
<td class="cellalignment4226">
<table class="cellalignment4224">
<tr>
<td class="cellalignment4223"><a href="featTypes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4223"><a href="featRefCursor.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4228">
<table class="cellalignment4222">
<tr>
<td class="cellalignment4223"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4223"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4223"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4223"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4223"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4223"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>