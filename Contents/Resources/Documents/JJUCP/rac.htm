<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-72355"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Oracle%20RAC%20Features"></a><title>Using Oracle RAC Features</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This guide provides instructions for using Oracle Universal Connection Pooling API. The API is JDBC driver agnostic."/>
<meta name="dcterms.created" content="2014-06-29T23:47:52Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Universal Connection Pool for JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49541-01"/>
<meta name="dcterms.isVersionOf" content="JJUCP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="manage.htm" title="Previous" type="text/html"/>
<link rel="Next" href="app_cont.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49541-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/16</span> <!-- End Header -->
<div id="JJUCP8197" class="chapter"><a id="CHDCDFAC"></a>
<h1 class="chapter"><span class="secnum">8</span> Using Oracle RAC Features</h1>
<p>The following sections are included in this chapter:</p>
<ul>
<li>
<p><a href="#CHDHIBJE">Overview of Oracle RAC Features</a></p>
</li>
<li>
<p><a href="#CHDHCGGG">Using Fast Connection Failover</a></p>
</li>
<li>
<p><a href="#CHDEEHJI">Using Run-Time Connection Load Balancing</a></p>
</li>
<li>
<p><a href="#CHDCIHED">Using Connection Affinity</a></p>
</li>
<li>
<p><a href="#BABGJFHI">Using Global Data Services</a></p>
</li>
</ul>
<a id="CHDHIBJE"></a>
<div id="JJUCP8198" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of Oracle RAC Features</h2>
<p><a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a>UCP JDBC connection pools provide a tight integration with various Oracle Real Application Clusters (Oracle RAC) Database features. The features include Fast Connection Failover (FCF), Run-Time Connection Load Balancing, and Connection Affinity. These features require the use of an Oracle JDBC driver, Oracle RAC database, and the Oracle Notification Service library (<code>ons.jar</code>) that is included with the Oracle Client software.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD076" href="../RACAD/GUID-8DC4D5E0-CA9D-47BC-BAD0-8769405AFEC5.htm#RACAD076"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for more information about these technologies</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 11<span class="italic">g</span> Release 1 (11.2), FCF is also supported by Oracle Restart on a single instance database. Oracle Restart was previously known as Single-Instance High Availability (SIHA). For more information on Oracle Restart, refer to <a class="olink ADMIN12708" href="../ADMIN/restart.htm#ADMIN12708"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>.</div>
<p>Applications use Oracle RAC features to maximize connection performance and availability and to mitigate down-time due to connection problems. Applications have different availability and performance requirements and should implement Oracle RAC features accordingly.</p>
<p class="subhead2"><a id="JJUCP8199"></a>Generic High Availability and Performance Features</p>
<p><a id="sthref303"></a>The UCP for JDBC APIs and connection pool properties include many high availability and performance features that do not require an Oracle RAC database. These features work well with both Oracle and non-Oracle connections and are discussed throughout this guide. For example: validating connections on borrow; setting timeout properties; setting maximum reuse properties; and connection pool manager operations are all used to ensure a high-level of connection availability and optimal performance.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Generic high availability and performance features work slightly better when using Oracle connections because UCP for JDBC leverages Oracle JDBC internal APIs.</div>
<p class="subhead2"><a id="JJUCP8200"></a>Database Version Compatibility for Oracle RAC</p>
<p><a href="#BABBBJEJ">Table 8-1</a> lists supported Database versions for various Oracle RAC features:</p>
<div id="JJUCP8201" class="tblhruleformal">
<p class="titleintable"><a id="sthref304"></a><a id="BABBBJEJ"></a>Table 8-1 Oracle RAC Version Compatibility</p>
<table class="cellalignment4241" title="Oracle RAC Version Compatibility" summary="Oracle RAC version compatibility" dir="ltr">
<thead>
<tr class="cellalignment4235">
<th class="cellalignment4242" id="r1c1-t5">Feature</th>
<th class="cellalignment4242" id="r1c2-t5">Supported Database Version</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r2c1-t5" headers="r1c1-t5">
<p>Fast Connection Failover</p>
</td>
<td class="cellalignment4243" headers="r2c1-t5 r1c2-t5">
<p>Oracle Database 10.1.x and later versions</p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r3c1-t5" headers="r1c1-t5">
<p>Run-time Connection Load-Balancing</p>
</td>
<td class="cellalignment4243" headers="r3c1-t5 r1c2-t5">
<p>Oracle Database 10.2.x and later versions</p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r4c1-t5" headers="r1c1-t5">
<p>Web Session Affinity</p>
</td>
<td class="cellalignment4243" headers="r4c1-t5 r1c2-t5">
<p>Oracle Database 11.1.x and later versions</p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r5c1-t5" headers="r1c1-t5">
<p>Transaction-Based Affinity</p>
</td>
<td class="cellalignment4243" headers="r5c1-t5 r1c2-t5">
<p>Oracle Database 10.2.x and later versions (Oracle Database 11.1.x recommended)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="JJUCP8202"></a>Oracle JDBC Driver Version Compatibility for Oracle RAC</p>
<p>Oracle JDBC driver 10.1.x and later versions are supported with Oracle RAC features.</p>
</div>
<!-- class="sect1" -->
<a id="CHDHCGGG"></a>
<div id="JJUCP08100" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Fast Connection Failover</h2>
<p>This section contains the following subsections:</p>
<ul>
<li>
<p><a href="#BABCFBCF">Overview of Fast Connection Failover</a></p>
</li>
<li>
<p><a href="#BABIHFGB">Understanding Fast Connection Failover</a></p>
</li>
<li>
<p><a href="#BABGCAAH">Fast Connection Failover Prerequisites</a></p>
</li>
<li>
<p><a href="#BABFBJCD">Example Fast Connection Failover Configuration</a></p>
</li>
<li>
<p><a href="#BABBFJGJ">Enabling Fast Connection Failover</a></p>
</li>
<li>
<p><a href="#BABGGFFJ">Configuring ONS</a></p>
</li>
<li>
<p><a href="#BABBHAFG">Configuring the Connection URL</a></p>
</li>
</ul>
<a id="BABCFBCF"></a>
<div id="JJUCP8269" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overview of Fast Connection Failover</h3>
<p><a id="sthref305"></a><a id="sthref306"></a><a id="sthref307"></a>The Fast Connection Failover (FCF) feature is a Fast Application Notification (FAN) client implemented through the connection pool. The feature requires the use of an Oracle JDBC driver and an Oracle RAC database or an Oracle Restart on a single instance database. This section only describes the steps that an application must perform when using FCF with Oracle RAC. For more information on setting up an Oracle RAC database, see the <a class="olink RACAD" href="../RACAD/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> or consult an Oracle database administrator.</p>
<p><a id="sthref308"></a>FCF manages pooled connections for high availability and provides the following features:</p>
<ul>
<li>
<p>FCF supports unplanned outages. Dead connections are rapidly detected and then the connections are aborted and removed from the pool. Connection removal relies on abort to rapidly sever socket connections in order to prevent hangs. Borrowed and in-use connections are interrupted only for unplanned outages.</p>
</li>
<li>
<p>FCF supports planned outages. Borrowed or in-use connections are not interrupted and closed until work is done and control of the connection is returned to the pool.</p>
</li>
<li>
<p>FCF encapsulates fatal connection errors and exceptions into the <code>isValid</code> API for robust and efficient retries. See <a href="connect.htm#CHDIDEEB">&#34;Checking If a Connection Is Valid&#34;</a> for more information on using this API.</p>
</li>
<li>
<p>FCF recognizes new nodes that join an Oracle RAC cluster and places new connections on that node appropriately in order to deliver maximum quality of service to applications at run time. This facilitates middle-tier integration of Oracle RAC node joins and work-request routing from the application tier.</p>
</li>
<li>
<p>FCF distributes run-time work requests to all active Oracle RAC instances.</p>
</li>
</ul>
<p class="subhead2"><a id="JJUCP8203"></a>Unplanned Shutdown Scenarios</p>
<p>FCF supports unplanned shutdown scenarios by detecting and removing stale connections to an Oracle RAC cluster. Stale connections include connections that do not have a service available on any instance in an Oracle RAC cluster due to service-down and node-down events. Borrowed connections and available connections that are stale are detected, and their network connection is severed before removing them from the pool. These removed connections are not replaced by the pool. Instead, the application must retry connections before performing any work with a connection.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Borrowed connections are immediately aborted and closed during unplanned shutdown scenarios. Any on-going transactions immediately receive an exception.</div>
<p class="subhead2"><a id="BABGFIFI"></a><a id="JJUCP8204"></a>Planned Shutdown Scenarios</p>
<p>FCF supports planned shutdown scenarios where an Oracle RAC service can be gracefully shutdown. In such scenarios, stale borrowed connections are marked and will only be aborted and removed after they are returned to the pool. Any on-going transactions do not see any difference and proceed to complete.</p>
<p>The primary difference between unplanned and planned shutdown scenarios is how borrowed connections are handled. Stale connections that are idle in the pool (not borrowed) are removed in the same manner as the unplanned shutdown scenario.</p>
<p>Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2), UCP for JDBC supports graceful connection draining from any planned-down Oracle RAC instance. Affected borrowed connections are removed smoothly over a grace period, instead of immediate removal upon their return to the pool. This helps in avoiding throughput impact and logon storms during any service relocation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABBFJGJ">&#34;Enabling Fast Connection Failover&#34;</a> for more information about graceful connection draining using UCP for JDBC</div>
<p class="subhead2"><a id="JJUCP8205"></a>Oracle RAC Instance Rejoin and New Instance Scenarios</p>
<p>FCF supports scenarios where an Oracle RAC cluster adds instances that provide a service of interest. The instance may be new to the cluster or may have been restarted after a down event. In both cases, UCP for JDBC recognizes the new instance and creates connections to the node as required.</p>
</div>
<!-- class="sect2" -->
<a id="BABIHFGB"></a>
<div id="JJUCP8270" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Understanding Fast Connection Failover</h3>
<p>After Fast Connection Failover is enabled, the mechanism is automatic; no application intervention is needed. This section discusses how a connection failover is presented to an application and what steps the application takes to recover, in the following sections:</p>
<ul>
<li>
<p><a href="#BABIFJHJ">What the Application Sees</a></p>
</li>
<li>
<p><a href="#BABFDJGB">How It Works</a></p>
</li>
</ul>
<a id="BABIFJHJ"></a>
<div id="JJUCP8271" class="sect3">
<h4 class="sect3">What the Application Sees</h4>
<p>By the time an Oracle RAC service failure is propagated to the JDBC application, the database already rolls back the local transaction. The cache manager then cleans up all invalid connections. When an application holding an invalid connection tries to do work through that connection, it is possible to receive <code>SQLException, ORA-17008, Closed Connection</code>.</p>
<p>When an application receives a <code>Closed Connection</code> error message, it should do the following:</p>
<ol>
<li>
<p>Retry the connection request. This is essential, because the old connection is no longer open.</p>
</li>
<li>
<p>Replay the transaction. All work done before the connection was closed has been lost.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
The application should not try to roll back the transaction. The transaction was already rolled back in the database by the time the application received the exception.</div>
</div>
<!-- class="sect3" -->
<a id="BABFDJGB"></a>
<div id="JJUCP8272" class="sect3">
<h4 class="sect3">How It Works</h4>
<p>Under Fast Connection Failover, each connection in the cache maintains a mapping to a service, instance, database, and host name.</p>
<p>When a database generates an Oracle RAC event, that event is forwarded to the JVM in which JDBC is running. A daemon thread inside the JVM receives the Oracle RAC event and passes it on to the Connection Cache Manager. The Connection Cache Manager then throws SQL exceptions to the applications affected by the Oracle RAC event.</p>
<p>A typical failover scenario may work like the following:</p>
<ol>
<li>
<p>A database instance fails, leaving several stale connections in the cache.</p>
</li>
<li>
<p>The Oracle RAC mechanism in the database generates an Oracle RAC event which is sent to the JVM containing JDBC.</p>
</li>
<li>
<p>The daemon thread inside the JVM finds all the connections affected by the Oracle RAC event, notifies them of the closed connection through SQL exceptions, and rolls back any open transactions.</p>
</li>
<li>
<p>Each individual connection receives a SQL exception and must retry.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABGCAAH"></a>
<div id="JJUCP8273" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Fast Connection Failover Prerequisites</h3>
<p><a id="sthref309"></a>Fast Connection Failover is available under the following circumstances:</p>
<ul>
<li>
<p>The Universal Connection Pool is enabled.</p>
<p>Fast Connection Failover works in conjunction with the JDBC connection caching mechanism. This helps applications manage connections to ensure high availability.</p>
</li>
<li>
<p>The application uses service names to connect to the database.</p>
<p>The application cannot use service identifiers.</p>
</li>
<li>
<p>The underlying database has Oracle Database 12<span class="italic">c</span> Release 1 (12.1) Real Application Clusters (Oracle RAC) capability or Oracle Data Guard configured with either single instance Databases or Oracle RAC.</p>
<p>If failover events are not propagated, then connection failover cannot occur.</p>
</li>
<li>
<p>Oracle Notification Service (ONS) is configured and available on the node where JDBC is running.</p>
<p>JDBC depends on ONS to propagate database events and notify JDBC of them.</p>
</li>
<li>
<p>The Java Virtual Machine (JVM) in which your JDBC instance is running must have <code>oracle.ons.oraclehome</code> set to point to your <code><span class="codeinlineitalic">ORACLE_HOME</span></code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFBJCD"></a>
<div id="JJUCP8206" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Example Fast Connection Failover Configuration</h3>
<p><a id="sthref310"></a><a id="sthref311"></a>The following example demonstrates a connection pool that uses the FCF feature. FCF is configured through a pool-enabled data source. The example includes enabling FCF, configuring the Oracle Notification Service (ONS) and configuring a connection URL. These topics are discussed after the example.</p>
<div id="JJUCP8207" class="example">
<p class="titleinexample"><a id="CHDEEBAJ"></a>Example 8-1 Fast Connection Failover Configuration Example</p>
<pre>PoolDataSource  pds = PoolDataSourceFactory.getPoolDataSource();

pds.setConnectionPoolName(&#34;FCFSamplePool&#34;);
pds.setFastConnectionFailoverEnabled(true);
pds.setONSConfiguration(&#34;nodes=racnode1:4200,racnode2:4200\nwalletfile=
/oracle11/onswalletfile&#34;);
pds.setConnectionFactoryClassName(&#34;oracle.jdbc.pool.OracleDataSource&#34;);pds.setURL(&#34;jdbc:oracle:thin@(DESCRIPTION= &#34;+
   &#34;(LOAD_BALANCE=on)&#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=racnode1) (PORT=1521))&#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=racnode2) (PORT=1521))&#34;+
   &#34;(CONNECT_DATA=(SERVICE_NAME=service_name)))&#34;);
...
</pre></div>
<!-- class="example" -->
<p>The <code>isValid</code> method of the <code>oracle.ucp.jdbc.ValidConnection</code> interface is typically used in conjunction with the FCF feature and is used to check if a borrowed connection is still usable after an SQL exception has been thrown due to an Oracle RAC down event. For example:</p>
<pre>try {  conn = pds.getConnection;  ...}catch (SQLException sqlexc)
{
   if (conn == null || !((ValidConnection) conn).isValid())
        
   // take the appropriate action
   
...
conn.close();
}
</pre>
<p>For more information on the <code>ValidConnection</code> interface, see <a href="connect.htm#CHDIDEEB">&#34;Checking If a Connection Is Valid&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABBFJGJ"></a>
<div id="JJUCP8208" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Enabling Fast Connection Failover</h3>
<p><a id="sthref312"></a><a id="sthref313"></a><a id="sthref314"></a>The FCF pool property is used to enable and disable FCF. FCF is disabled by default. The following example demonstrates enabling FCF as shown in <a href="#CHDEEBAJ">Example 8-1</a>.</p>
<pre>pds.setFastConnectionFailoverEnabled(true);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2), UCP for JDBC supports the <code>oracle.ucp.PlannedDrainingPeriod</code> system property. It specifies the grace time period (in integer seconds) over which the pool smoothly drains the borrowed connections affected by a planned shut down. Draining starts when the same Database service becomes available on another instance different from the one that is going down.
<p>When this property is not set, or set to <code>0</code>, then the pool closes any affected borrowed connection immediately when it is returned to the pool.</p>
</div>
<p class="subhead2"><a id="JJUCP8274"></a>Querying Fast Connection Failover Status</p>
<p>An application determines if Fast Connection Failover is enabled by calling <code>OracleDataSource.getFastConnectionFailoverEnabled</code>, which returns <code>true</code> if failover is enabled, <code>false</code> otherwise.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
FCF must also be enabled to use run-time connection load balancing and connection affinity. These features are discussed later in this chapter.</div>
</div>
<!-- class="sect2" -->
<a id="BABGGFFJ"></a>
<div id="JJUCP8209" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref315"></a>Configuring ONS</h3>
<p><a id="sthref316"></a><a id="sthref317"></a><a id="sthref318"></a><a id="sthref319"></a><a id="sthref320"></a>FCF relies on the Oracle Notification Service (ONS) to propagate database events between the connection pool and the Oracle RAC database. At run time, the connection pool must be able to setup an ONS environment. ONS (<code>ons.jar</code>) is included as part of the Oracle Client software. ONS can be configured using either remote configuration or client-side ONS daemon configuration. Remote configuration is the preferred configuration for standalone client applications. This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABFEHBD">Overview of ONS Configuration File</a></p>
</li>
<li>
<p><a href="#BABJEBBF">Remote Configuration</a></p>
</li>
<li>
<p><a href="#BABHFGFF">Client-Side Daemon Configuration</a></p>
</li>
</ul>
<a id="BABFEHBD"></a>
<div id="JJUCP8275" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Overview of ONS Configuration File</h4>
<p>ONS configuration is controlled by the ONS configuration file, <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/opmn/conf/<a id="sthref321"></a>ons.config</code>. This file tells the ONS daemon how it should behave. Configuration information within <code>ons.config</code> is defined in simple name and value pairs.</p>
<p>Some parameters in the <code>ons.config</code> file are required and some are optional. <a href="#BABFBABC">Table 8-2</a> lists the required ONS configuration parameters and <a href="#BABDHGCD">Table 8-3</a> lists the optional ONS configuration parameters. ONS must be refreshed after updating the <code>ons.config</code> file.</p>
<div id="JJUCP8276" class="tblhruleformal">
<p class="titleintable"><a id="sthref322"></a><a id="BABFBABC"></a>Table 8-2 Required ONS Configuration Parameters</p>
<table class="cellalignment4241" title="Required ONS Configuration Parameters" summary="This table lists the required parameters in the ons.config file." dir="ltr">
<thead>
<tr class="cellalignment4235">
<th class="cellalignment4242" id="r1c1-t11">Parameter</th>
<th class="cellalignment4242" id="r1c2-t11">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r2c1-t11" headers="r1c1-t11">
<p><code>localport</code></p>
</td>
<td class="cellalignment4243" headers="r2c1-t11 r1c2-t11">
<p>Specifies the port that ONS binds to on the local host interface to talk to local clients.</p>
<p>For example, <code>localport=4100</code></p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r3c1-t11" headers="r1c1-t11">
<p><code>remoteport</code></p>
</td>
<td class="cellalignment4243" headers="r3c1-t11 r1c2-t11">
<p>Specifies the port that ONS binds to on all interfaces for talking to other ONS daemons.</p>
<p>For example, <code>remoteport=4200</code></p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r4c1-t11" headers="r1c1-t11">
<p><code>nodes</code></p>
</td>
<td class="cellalignment4243" headers="r4c1-t11 r1c2-t11">
<p>Specifies a list of other ONS daemons to talk to. Node values are given as a comma-delimited list of either host names or IP addresses plus ports. The port value that is given is the remote port that each ONS instance is listening on. In order to maintain an identical file on all nodes, the <code>host:port</code> of the current ONS node can also be listed in the nodes list. It will be ignored when reading the list.</p>
<p>For example, <code>nodes=myhost.example.com:4200,123.123.123.123:4200</code></p>
<p>The nodes listed in the nodes line correspond to the individual nodes in the Oracle RAC instance. Listing the nodes ensures that the middle-tier node can communicate with the Oracle RAC nodes. At least one middle-tier node and one node in the Oracle RAC instance must be configured to see one another. As long as one node on each side is aware of the other, all nodes are visible. You need not list every single cluster and middle-tier node in the ONS configuration file of each Oracle RAC node. In particular, if one ONS configuration file cluster node is aware of the middle tier, then all nodes in the cluster are aware of it.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div id="JJUCP8277" class="tblhruleformal">
<p class="titleintable"><a id="sthref323"></a><a id="BABDHGCD"></a>Table 8-3 Optional ONS Configuration Parameters</p>
<table class="cellalignment4241" title="Optional ONS Configuration Parameters" summary="This table lists the optional parameters in the ons.config file." dir="ltr">
<thead>
<tr class="cellalignment4235">
<th class="cellalignment4242" id="r1c1-t12">Parameter</th>
<th class="cellalignment4242" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r2c1-t12" headers="r1c1-t12">
<p><code>logcomp</code></p>
</td>
<td class="cellalignment4243" headers="r2c1-t12 r1c2-t12">
<p>Specifies the ONS components to log. The format is as follows:</p>
<pre>&lt;component&gt;[&lt;subcomponent&gt;,...];&lt;component&gt;[&lt;subcomponent&gt;,...];...
</pre>
<p>If no subcomponents need to be specified, then do not include the brackets ([]) after the component name. To exclude messages from a subcomponent, precede the subcomponent name with an exclamation mark (!). For example, to exclude messages from the <code>topology</code> subcomponent, you use the following format:</p>
<pre>[all,!topology]
</pre>
<p>Note that before specifying a subcomponent from which you want to exclude messages, you must first ensure that the subcomponent includes the messages.</p>
<p>Following are the valid values for components:</p>
<ul>
<li>
<p><code>internal</code></p>
</li>
<li>
<p><code>ons</code></p>
</li>
</ul>
<p>If you specify the component as <code>internal</code>, then there are no valid values for subcomponent. If you specify the component as <code>ons</code>, then you can specify the following values for subcomponent:</p>
<ul>
<li>
<p><code>all</code>: Specifies all messages</p>
</li>
<li>
<p><code>ons</code>: ONS local information</p>
</li>
<li>
<p><code>listener</code>: ONS listener information</p>
</li>
<li>
<p><code>discover</code>: ONS discover (server or multicast) information</p>
</li>
<li>
<p><code>servers</code>: ONS remote servers currently up and connected to the cluster</p>
</li>
<li>
<p><code>topology</code>: ONS current cluster wide server connection topology</p>
</li>
<li>
<p><code>server</code>: ONS remote server connection information</p>
</li>
<li>
<p><code>client</code>: ONS client connection information</p>
</li>
<li>
<p><code>connect</code>: ONS generic connection information</p>
</li>
<li>
<p><code>subscribe</code>: ONS client subscription information</p>
</li>
<li>
<p><code>message</code>: ONS notification receiving and processing information</p>
</li>
<li>
<p><code>deliver</code>: ONS notification delivery information</p>
</li>
<li>
<p><code>special</code>: ONS special notification processing</p>
</li>
<li>
<p><code>internal</code>: ONS internal resource information</p>
</li>
<li>
<p><code>secure</code>: ONS SSL operation information</p>
</li>
<li>
<p><code>workers</code>: ONS worker threads</p>
</li>
</ul>
<p>The following example shows that you want to log messages for all the subcomponents under <code>ons</code>, except the <code>secure</code> subcomponent:</p>
<pre>logcomp=ons[all,!secure]
</pre></td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r3c1-t12" headers="r1c1-t12">
<p><code>logfile</code></p>
</td>
<td class="cellalignment4243" headers="r3c1-t12 r1c2-t12">
<p>Specifies a log file that ONS should use for logging messages. The default value for log file is <code>$ORACLE_HOME/opmn/logs/ons.log</code>.</p>
<p>For example, <code>logfile=/private/oraclehome/opmn/logs/myons.log</code></p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r4c1-t12" headers="r1c1-t12">
<p><code>walletfile</code></p>
</td>
<td class="cellalignment4243" headers="r4c1-t12 r1c2-t12">
<p>Specifies the wallet file used by the Oracle Secure Sockets Layer (SSL) to store SSL certificates. If a wallet file is specified to ONS, then it uses SSL when communicating with other ONS instances and require SSL certificate authentication from all ONS instances that try to connect to it. This means that if you want to turn on SSL for one ONS instance, then you must turn it on for all instances that are connected. This value should point to the directory where your <code>ewallet.p12</code> file is located.</p>
<p>For example, <code>walletfile=/private/oraclehome/opmn/conf/ssl.wlt/default</code></p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r5c1-t12" headers="r1c1-t12">
<p><code>useocr</code></p>
</td>
<td class="cellalignment4243" headers="r5c1-t12 r1c2-t12">
<p>Specifies the value, reserved for use on the server-side, to indicate ONS whether it should store all Oracle RAC nodes and port numbers in Oracle Cluster Registry (OCR) instead of the ONS configuration file or not. A value of <code>useocr=on</code> is used to store all Oracle RAC nodes and port numbers in Oracle Cluster Registry (OCR).</p>
<p>Do not use this option on the client-side.</p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r6c1-t12" headers="r1c1-t12">
<p><code>allowgroup</code></p>
</td>
<td class="cellalignment4243" headers="r6c1-t12 r1c2-t12">
<p>Specifies the ONS setting to indicate the user group connecting to the <code>localport</code>. When set to <code>true</code>, ONS allows users within the same OS group to connect to its local port. When set to <code>false</code>, ONS only allows the same user running the ONS daemon to access its local port. The default value of this parameter is <code>false</code>. When using remote ONS configuration, there is no need to set this parameter.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>The <code><a id="sthref324"></a>ons.config</code> file allows blank lines and comments on lines that begin with the number sign (<code>#</code>).</p>
</div>
<!-- class="sect3" -->
<a id="BABJEBBF"></a>
<div id="JJUCP8210" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref325"></a>Remote Configuration</h4>
<p>UCP for JDBC supports remote configuration of ONS through the <code>ONSConfiguration</code> pool property. The <code>ONSConfiguration</code> pool property value is a string that closely resembles the content of the <code>ons.config</code> file. The string contains a list of <code>name=value</code> pairs separated by a new line character (<code>\n</code>). You can set this pool property in the following two ways:</p>
<ul>
<li>
<p>The name can be one of the following: <code>nodes</code>, <code>walletfile</code>, or <code>walletpassword</code>. The parameter string should at least specify the ONS configuration <code>nodes</code> attribute as a list of <code>host:port</code> pairs separated by a comma. SSL is used when the <code>walletfile</code> attribute is specified as an Oracle wallet file.</p>
<p>The following example demonstrates an ONS configuration string as shown in <a href="#CHDEEBAJ">Example 8-1</a>:</p>
<pre>...
pds.setONSConfiguration(&#34;nodes=racnode1:4200,racnode2:4200\nwalletfile=/oracle11/onswalletfile&#34;);
...
</pre></li>
<li>
<p>The name can be only <code>propertiesfile</code>. The value is the location of an ONS-specific Java properties file. This file must contain the <code>oracle.ons.nodes</code> property, and one or both of the following ONS Java properties:</p>
<ul>
<li>
<p><code>oracle.ons.walletfile</code></p>
</li>
<li>
<p><code>oracle.ons.walletpassword</code></p>
<p>The following example illustrates such an <code>ONSConfiguration</code> string:</p>
<pre>pds.setONSConfiguration(&#34;propertiesfile=/usr/ons/ons.properties&#34;);
</pre>
<p>The following is an example of the content of the Java properties <code>ons.properties</code> file:</p>
<pre>oracle.ons.nodes=racnode1:4200,racnode2:4200
oracle.ons.walletfile=/oracle11/onswalletfile
</pre></li>
</ul>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The parameters in the configuration string must match those for the Oracle RAC Database. In addition, if you are using Oracle Application Server, then you must configure ONS using procedures that are applicable to the server.
<p>For standalone Java applications, you must configure ONS using the <code>setONSConfiguration</code> method. However, if your application meets the following requirements, then you no longer need to call the <code>setONSConfiguration</code> method for enabling FCF:</p>
<ul>
<li>
<p>Your application is using Oracle Database 12<span class="italic">c</span> Release 1 (12.1) UCP and Oracle RAC Database 12<span class="italic">c</span> Release 1 (12.1)</p>
</li>
<li>
<p>Your application does not require ONS wallet or keystore</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABHFGFF"></a>
<div id="JJUCP8211" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref326"></a>Client-Side Daemon Configuration</h4>
<p>Client-side ONS daemon configuration is typical of applications that run on a middle-tier server such as the Oracle Application Server. Clients in this scenario directly configure ONS by updating the <code>ons.config</code> file. The location of the file may be different depending on the platform. <a href="#BABIIAHB">Example 8-2</a> demonstrates an <code>ons.config</code> file for <a href="#CHDEEBAJ">Example 8-1</a>:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For client-side ONS daemon configuration, if the operating system (OS) user that starts the connection pool and the OS user that starts the client-side daemon are different, then they both <span class="italic">must</span> belong to the same OS group. Also, the value of the <code><a id="sthref327"></a>allowgroup</code> parameter must be set to <code>true</code> in the <code>ons.config</code> file.</div>
<div id="JJUCP8278" class="example">
<p class="titleinexample"><a id="BABIIAHB"></a>Example 8-2 Example of a Sample ons.config File</p>
<pre># This is an example ons.config file
#
# The first three values are required
localport=4100
remoteport=4200
nodes=racnode1.example.com:4200,racnode2.example.com:4200
</pre></div>
<!-- class="example" -->
<p>After configuring ONS, you start the ONS daemon with the <code>onsctl</code> command. You <span class="italic">must</span> make sure that an ONS daemon is running at all times.</p>
<p class="subhead2"><a id="JJUCP8279"></a>Using the onsctl Command</p>
<p>After configuring, use <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/opmn/bin/onsctl</code> to start, stop, reconfigure, and monitor the ONS daemon. <a href="#BABEBDBA">Table 8-4</a> is a summary of the commands that <code>onsctl</code> supports.</p>
<div id="JJUCP8280" class="tblformal">
<p class="titleintable"><a id="sthref328"></a><a id="BABEBDBA"></a>Table 8-4 onsctl Commands</p>
<table class="cellalignment4244" title="onsctl Commands" summary="table" dir="ltr">
<thead>
<tr class="cellalignment4235">
<th class="cellalignment4242" id="r1c1-t15">Command</th>
<th class="cellalignment4242" id="r1c2-t15">Effect</th>
<th class="cellalignment4242" id="r1c3-t15">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r2c1-t15" headers="r1c1-t15">
<p><code>start</code></p>
</td>
<td class="cellalignment4243" headers="r2c1-t15 r1c2-t15">
<p>Starts the ONS daemon</p>
</td>
<td class="cellalignment4243" headers="r2c1-t15 r1c3-t15">
<p><code>onsctl: ons started</code></p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r3c1-t15" headers="r1c1-t15">
<p><code>stop</code></p>
</td>
<td class="cellalignment4243" headers="r3c1-t15 r1c2-t15">
<p>Stops the ONS daemon</p>
</td>
<td class="cellalignment4243" headers="r3c1-t15 r1c3-t15">
<p><code>onsctl: shutting down ons daemon...</code></p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r4c1-t15" headers="r1c1-t15">
<p><code>ping</code></p>
</td>
<td class="cellalignment4243" headers="r4c1-t15 r1c2-t15">
<p>Verifies whether or not the ONS daemon is running</p>
</td>
<td class="cellalignment4243" headers="r4c1-t15 r1c3-t15">
<p><code>ons is running ...</code></p>
</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r5c1-t15" headers="r1c1-t15">
<p><code>reconfig</code></p>
</td>
<td class="cellalignment4243" headers="r5c1-t15 r1c2-t15">
<p>Triggers a reload of the ONS configuration without shutting down the ONS daemon</p>
</td>
<td class="cellalignment4243" headers="r5c1-t15 r1c3-t15">&nbsp;</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r6c1-t15" headers="r1c1-t15">
<p><code>help</code></p>
</td>
<td class="cellalignment4243" headers="r6c1-t15 r1c2-t15">
<p>Prints a help summary message for onsctl</p>
</td>
<td class="cellalignment4243" headers="r6c1-t15 r1c3-t15">&nbsp;</td>
</tr>
<tr class="cellalignment4235">
<td class="cellalignment4243" id="r7c1-t15" headers="r1c1-t15">
<p><code>detailed</code></p>
</td>
<td class="cellalignment4243" headers="r7c1-t15 r1c2-t15">
<p>Prints a detailed help message for onsctl</p>
</td>
<td class="cellalignment4243" headers="r7c1-t15 r1c3-t15">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD0067" href="../RACAD/GUID-66AB702E-D600-4B10-9BF3-AC0E7C7BF44D.htm#RACAD0067"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The Java Virtual Machine (JVM), in which your JDBC instance is running, must have the <code>oracle.ons.oraclehome</code> system property set to the location of <code>ORACLE_HOME</code> before starting the application. For example:</p>
<pre>java -Doracle.ons.oraclehome=$ORACLE_HOME ...
</pre></li>
<li>
<p>Oracle recommends remote configuration of ONS for UCP.</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
In Oracle RAC 12.1.0.2.0, by default, server installation requires the value of the <code>walletfile</code> ONS parameter to be set, and enforces the use of SSL for all ONS connections.
<p>If you have a UCP application that is already using the <code>walletfile</code> parameter in the ONS remote configuration string or local configuration file, then the only requirement is that, for the same topology, the wallet file on the client side must have the same content as the wallet file on the server side. You can make a copy of the server-side file and make it available on the client side.</p>
<p>For UCP applications that are using Oracle RAC features without setting the <code>walletfile</code> parameter, you must perform one of the following:</p>
<ul>
<li>
<p>Add the walletfile parameter setting to the ONS remote configuration string or local configuration file, as shown in <a href="#CHDEEBAJ">Example 8-1</a>. Keep in mind that, for the same topology, the wallet file on the client side must have the same content as the wallet file on the Oracle RAC server side.</p>
</li>
<li>
<p>Run the following command to remove the <code>walletfile</code> parameter setting from both client and server ONS configuration string and the local configuration file:</p>
<pre>srvctl modify nodeapps -clientdata
</pre></li>
</ul>
<p>For secure communication, the ONS auto-configuration in Oracle RAC 12.1.x no longer works when Oracle RAC 12.1.0.2.0 is first installed or patched. Applications have to use explicit ONS configuration (remote or local) instead, and make one of the changes previously discussed.</p>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABBHAFG"></a>
<div id="JJUCP8212" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring the Connection URL</h3>
<p><a id="sthref329"></a><a id="sthref330"></a><a id="sthref331"></a>The connection URL of a connection factory must use the service name syntax when using FCF. The service name is used to map the connection pool to the service. In addition, the factory class must be an Oracle factory class. The following example demonstrates configuring the connection URL as shown in <a href="#CHDEEBAJ">Example 8-1</a>:</p>
<pre>...
pds.setConnectionFactoryClassName(&#34;oracle.jdbc.pool.OracleDataSource&#34;);
pds.setURL(&#34;jdbc:oracle:thin@//host:port/service_name&#34;);
...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
An exception is thrown if a service identifier (SID) is specified for the connection URL when FCF is enabled.</div>
<p>The following examples demonstrate valid connection URL syntax when connecting to an Oracle RAC database. Examples for both the Oracle JDBC thin and Oracle OCI driver are included. Notice that the URL can be used to explicitly enable load balancing among Oracle RAC nodes:<a id="sthref332"></a></p>
<p class="subhead2"><a id="JJUCP8213"></a>Valid Connection URL Usage</p>
<pre>pds.setURL(&#34;jdbc:oracle:thin@//host:port/service_name&#34;); 

pds.setURL(&#34;jdbc:oracle:thin@//cluster-alias:port/service_name&#34;); 

pds.setURL(&#34;jdbc:oracle:thin:@(DESCRIPTION= &#34;+
   &#34;(LOAD_BALANCE=on)&#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))&#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521))&#34;+
   &#34;(CONNECT_DATA=(SERVICE_NAME=service_name)))&#34;);

pds.setURL(&#34;jdbc:oracle:thin:@(DESCRIPTION= &#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=cluster_alias) (PORT=1521)) &#34;+
   &#34;(CONNECT_DATA=(SERVICE_NAME=service_name)))&#34;);

pds.setURL(&#34;jdbc:oracle:oci:@TNS_ALIAS&#34;);

pds.setURL(&#34;jdbc:oracle:oci:@(DESCRIPTION= &#34;+
   &#34;(LOAD_BALANCE=on) &#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=host1) (PORT=1521)) &#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)) &#34;+
   &#34;(CONNECT_DATA=(SERVICE_NAME=service_name)))&#34;); 

pds.setURL(&#34;jdbc:oracle:oci:@(DESCRIPTION= &#34;+
   &#34;(ADDRESS=(PROTOCOL=TCP)(HOST=cluster_alias) (PORT=1521)) &#34;+
   &#34;(CONNECT_DATA=(SERVICE_NAME=service_name)))&#34;);
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEEHJI"></a>
<div id="JJUCP8214" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Run-Time Connection Load Balancing</h2>
<p>This section contains the following subsections:</p>
<ul>
<li>
<p><a href="#BABIAJAE">Overview of Run-Time Connection Load Balancing</a></p>
</li>
<li>
<p><a href="#BABHBEJD">Setting Up Run-Time Connection Load Balancing</a></p>
</li>
</ul>
<a id="BABIAJAE"></a>
<div id="JJUCP8281" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overview of Run-Time Connection Load Balancing</h3>
<p>In an Oracle Real Application Clusters environment, a connection could belong to any instance that provides the relevant service. In the best case, all instances perform equally well and randomly retrieving a connection from the cache is appropriate. However, when one instance performs better than others, random selection of a connection is inefficient. The run-time connection load balancing feature enables routing of work requests to an instance that offers the best performance, minimizing the need to relocate work.</p>
<p><a id="sthref333"></a><a id="sthref334"></a><a id="sthref335"></a><a id="sthref336"></a><a id="sthref337"></a><a id="sthref338"></a>UCP JDBC connection pools leverage the load balancing functionality provided by an Oracle RAC database. Run-time connection load balancing requires the use of an Oracle JDBC driver and an Oracle RAC database. For more information on setting up an Oracle RAC database, see the <a class="olink RACAD" href="../RACAD/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> or consult an Oracle database administrator.</p>
<p>Run-time connection load balancing is useful when:</p>
<ul>
<li>
<p>Traditional balancing of workload is not optimal</p>
</li>
<li>
<p>Requests must be routed to make optimal use of resources in a clustered database</p>
</li>
<li>
<p>Capacity within the cluster differs and is expected to change over time</p>
</li>
<li>
<p>The need to avoid sending work to slow, hung, and dead nodes is required</p>
</li>
</ul>
<p>UCP for JDBC uses the Oracle RAC Load Balancing Advisory. The advisory is used to balance work across Oracle RAC instances and is used to determine which instances offer the best performance. Applications transparently receive connections from instances that offer the best performance. Connection requests are quickly diverted from instances that have slowed, are not responding, or that have failed.</p>
<p><a id="sthref339"></a>Run-time connection load balancing provides the following benefits:</p>
<ul>
<li>
<p>Manages pooled connections for high performance and scalability</p>
</li>
<li>
<p>Receives continuous recommendations on the percentage of work to route to database instances</p>
</li>
<li>
<p>Adjusts distribution of work based on different back-end node capacities such as CPU capacity or response time</p>
</li>
<li>
<p>Reacts quickly to changes in cluster reconfiguration, application workload, overworked nodes, or hangs</p>
</li>
<li>
<p>Receives metrics from the Oracle RAC Load Balance Advisory. Connections to well performing instances are used most often. New and unused connections to under-performing instances will gravitate away over time. When distribution metrics are not received, connection are selected using a random choice.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABHBEJD"></a>
<div id="JJUCP8215" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Up Run-Time Connection Load Balancing</h3>
<p><a id="sthref340"></a><a id="sthref341"></a><a id="sthref342"></a><a id="sthref343"></a>Run-time connection load balancing requires that FCF is enabled and configured properly. See <a href="#CHDHCGGG">&#34;Using Fast Connection Failover&#34;</a> for detailed instructions on setting up FCF.</p>
<p>In addition, you must configure the Oracle RAC Load Balancing Advisory with service-level goals for each service for which load balancing is enabled:</p>
<ul>
<li>
<p>The service goal must be set to one of the following:</p>
<ul>
<li>
<p><code><a id="sthref344"></a>DBMS_SERVICE.SERVICE_TIME</code></p>
</li>
<li>
<p><code><a id="sthref345"></a>DBMS_SERVICE.THROUGHPUT</code></p>
</li>
</ul>
<p>The service goal can be set using the <code>goal</code> parameter, and the connection balancing goal can be set using the <code>clb_goal</code> parameter.</p>
</li>
<li>
<p>The connection balancing goal must be set to <code>SHORT</code>. For example,</p>
<pre>EXECUTE DBMS_SERVICE.MODIFY_SERVICE (service_name =&gt; &#39;sjob&#39; -, goal =&gt; 
   DBMS_SERVICE.GOAL_THROUGHPUT -, clb_goal =&gt; DBMS_SERVICE.CLB_GOAL_SHORT);
</pre>
<p>Or</p>
<pre>EXECUTE DBMS_SERVICE.MODIFY_SERVICE (service_name =&gt; &#39;sjob&#39; -, goal =&gt; 
   DBMS_SERVICE.GOAL_SERVICE_TIME -, clb_goal =&gt; DBMS_SERVICE.CLB_GOAL_SHORT);
</pre></li>
</ul>
<p>The connection balancing goal can also be set by calling the <code>DBMS_SERVICE.create_service</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can set the connection balancing goal to <code>LONG</code>. However, this is mostly useful for closed workloads, that is, when the rate of completing work is equal to the rate of starting new work.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD7276" href="../RACAD/GUID-75EE86C1-E690-4624-BA83-DFB83234156C.htm#RACAD7276"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCIHED"></a>
<div id="JJUCP8216" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Connection Affinity</h2>
<p>This section contains the following subsections:</p>
<ul>
<li>
<p><a href="#BABIEIDH">Overview of Connection Affinity</a></p>
</li>
<li>
<p><a href="#BABCBJHG">Setting Up Connection Affinity</a></p>
</li>
</ul>
<a id="BABIEIDH"></a>
<div id="JJUCP8282" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overview of Connection Affinity</h3>
<p><a id="sthref346"></a><a id="sthref347"></a><a id="sthref348"></a>UCP JDBC connection pools leverage affinity functionality provided by an Oracle RAC database. Connection affinity requires the use of an Oracle JDBC driver and an Oracle RAC database version 11.1.0.6 or higher.</p>
<p>Connection affinity is a performance feature that enables a connection pool to select connections that are directed at a specific Oracle RAC instance. The pool uses run-time connection load balancing (if configured) to select an Oracle RAC instance to create the first connection and then subsequent connections are created with an affinity to the same instance.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABEDCBA">&#34;Strict Affinity Mode&#34;</a></p>
</li>
<li>
<p><a class="olink RACAD03261" href="../RACAD/GUID-3FE2D3E6-EC1C-4478-A9E4-3751F7A47C9E.htm#RACAD03261"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for more information about setting up an Oracle RAC database.</p>
</li>
</ul>
</div>
<p>UCP JDBC connection pools support the following two types of connection affinity:</p>
<ul>
<li>
<p><a href="#BABJGCHF">Transaction-Based Affinity</a></p>
</li>
<li>
<p><a href="#BABEEAFF">Web Session Affinity</a></p>
</li>
</ul>
<p class="subhead2"><a id="BABJGCHF"></a><a id="JJUCP8217"></a>Transaction-Based Affinity</p>
<p><a id="sthref349"></a><a id="sthref350"></a><a id="sthref351"></a>Transaction-based affinity is an affinity to an Oracle RAC instance that can be released by either the client application or a failure event. Applications typically use this type of affinity when long-lived affinity to an Oracle RAC instance is desired or when the cost (in terms of performance) of being redirected to a new Oracle RAC instance is high. Distributed transactions are a good example of transaction-based affinity. XA connections that are enlisted in a distributed transaction keep an affinity to the Oracle RAC instance for the duration of the transaction. In this case, an application would incur a significant performance cost if a connection is redirect to a different Oracle RAC instance during the distributed transaction.</p>
<p class="subhead2"><a id="BABEEAFF"></a><a id="JJUCP8218"></a><a id="sthref352"></a><a id="sthref353"></a><a id="sthref354"></a>Web Session Affinity</p>
<p>Web session affinity is an affinity to an Oracle RAC instance that can be released by either the instance, a client application, or a failure event. The Oracle RAC instance uses a hint to communicate to a connection pool whether affinity has been enabled or disabled on the instance. An Oracle RAC instance may disable affinity based on many factors, such as performance or load. If an Oracle RAC instance can no longer support affinity, the connections in the pool are refreshed to use a new instance and affinity is established once again.</p>
<p>Applications typically use this type of affinity when short-lived affinity to an Oracle RAC instance is expected or if the cost (in terms of performance) of being redirected to a new Oracle RAC instance is minimal. For example, a mail client session might use Web session affinity to an Oracle RAC instance to increase performance and is relatively unaffected if a connection is redirected to a different instance.</p>
</div>
<!-- class="sect2" -->
<a id="BABCBJHG"></a>
<div id="JJUCP8219" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Up Connection Affinity</h3>
<p>Perform the following steps to set up <a id="sthref355"></a>connection affinity:</p>
<ul>
<li>
<p>Enable FCF.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHCGGG">&#34;Using Fast Connection Failover&#34;</a></div>
</li>
<li>
<p>Enable run-time connection load balancing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDEEHJI">&#34;Using Run-Time Connection Load Balancing&#34;</a></div>
</li>
<li>
<p>Create a connection affinity callback.</p>
</li>
<li>
<p>Register the callback.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Transaction-based affinity is strictly scoped between the application/middle-tier and UCP for JDBC. Therefore, transaction-based affinity requires only the <code>setFastConnectionFailoverEnabled</code> property be set to <code>true</code> and does not require complete FCF configuration.
<p>In addition, transaction-based affinity does not technically require run-time connection load balancing. However, it can help with performance and is usually enabled regardless. If run-time connection load balancing is not enabled, the connection pool randomly picks connections.</p>
</div>
<p>This section contains the following subsections:</p>
<ul>
<li>
<p><a href="#BABIFDEA">Creating a Connection Affinity Callback</a></p>
</li>
<li>
<p><a href="#BABFIIGG">Registering a Connection Affinity Callback</a></p>
</li>
<li>
<p><a href="#BABHIFFC">Removing a Connection Affinity Callback</a></p>
</li>
</ul>
<a id="BABIFDEA"></a>
<div id="JJUCP8220" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating a Connection Affinity Callback</h4>
<p><a id="sthref356"></a><a id="sthref357"></a><a id="sthref358"></a>Connection affinity requires the use of a callback. The callback is an implementation of the <code>ConnectionAffinityCallback</code> interface which is located in the <code>oracle.ucp</code> package. The callback is used by the connection pool to establish and retrieve a connection affinity context and is also used to set the affinity policy type (transaction-based or Web session).</p>
<p><a id="sthref359"></a><a id="sthref360"></a><a id="sthref361"></a><a id="sthref362"></a>The following example demonstrates setting an affinity policy in a callback implementation. The example also demonstrates manually setting an affinity context. typically, the connection pool sets the affinity context inside an application. However, the ability to manually set an affinity context is provided for applications that want to customize affinity behavior and control the affinity context directly.</p>
<pre>public class AffinityCallbackSample
   implements ConnectionAffinityCallback {
   
   Object appAffinityContext = null;
   ConnectionAffinityCallback.AffinityPolicy affinityPolicy =
   ConnectionAffinityCallback.AffinityPolicy.TRANSACTION_BASED_AFFINITY;
   
   //For Web session affinity, use WEBSESSION_BASED_AFFINITY;
   
   public void setAffinityPolicy(AffinityPolicy policy)
   {
      affinityPolicy = policy;
   }
   
   public AffinityPolicy getAffinityPolicy()
   {
      return affinityPolicy;
   }
   
   public boolean setConnectionAffinityContext(Object affCxt)
   {
      synchronized (lockObj)
      {
         appAffinityContext = affCxt;
      }
      return true;
   }
   
   public Object getConnectionAffinityContext()
   {
      synchronized (lockObj)
      {
         return appAffinityContext;
      }
   }
}
</pre></div>
<!-- class="sect3" -->
<a id="BABFIIGG"></a>
<div id="JJUCP8221" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Registering a Connection Affinity Callback</h4>
<p><a id="sthref363"></a><a id="sthref364"></a>A connection affinity callback is registered on a connection pool using the <code>registerConnectionAffinityCallback</code> method. The callback is registered when creating the connection pool. Only one callback can be registered per connection pool.</p>
<p>The following example demonstrates registering a connection affinity callback implementation:</p>
<pre>ConnectionAffinityCallback callback = new MyCallback();

PoolDataSource  pds = PoolDataSourceFactory.getPoolDataSource();

pds.setConnectionPoolName(&#34;AffinitySamplePool&#34;);
pds.registerConnectionAffinityCallback(callback);
...
</pre></div>
<!-- class="sect3" -->
<a id="BABHIFFC"></a>
<div id="JJUCP8222" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Removing a Connection Affinity Callback</h4>
<p><a id="sthref365"></a><a id="sthref366"></a>A connection affinity callback is removed from a connection pool using the <code>removeConnectionAffinityCallback</code> method. For example:</p>
<pre>PoolDataSource  pds = PoolDataSourceFactory.getPoolDataSource();

pds.setConnectionPoolName(&#34;AffinitySamplePool&#34;);
pds.removeConnectionAffinityCallback();
...
</pre></div>
<!-- class="sect3" -->
<a id="BABEDCBA"></a>
<div id="JJUCP8283" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Strict Affinity Mode</h4>
<p>By default, affinity is only a hint. A connection pool selects a new Oracle RAC instance for connections if it does not find a connection on a desired instance. You can change this behavior by switching the strict affinity mode on. The strict affinity mode throws a UCP exception if a connection on a desired instance is not found.</p>
<p>Use the following pool properties to switch on the strict affinity mode:</p>
<ul>
<li>
<p>The <code>useStrictWebSessionAffinity</code> property</p>
<p>Set the <code>useStrictWebSessionAffinity</code> property to <code>true</code> or <code>false</code> for switching the strict Web session affinity mode on or off respectively.</p>
</li>
<li>
<p>The <code>useStrictXAAffinity</code> property</p>
<p>Set the <code>useStrictXAAffinity</code> property to <code>true</code> or <code>false</code> for switching the strict transaction-based affinity mode on or off respectively.</p>
</li>
</ul>
<p>These properties can be handled through the <code>UniversalConnectionPoolMBean</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="manage.htm#CACFECED">&#34;UniversalConnectionPoolMBean&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGJFHI"></a>
<div id="JJUCP8246" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref367"></a><a id="sthref368"></a>Using Global Data Services</h2>
<p>This section describes the new Global Data Services (GDS) feature that can be used with Universal Connection Pool:</p>
<ul>
<li>
<p><a href="#BABHJBGI">Overview of Global Data Services</a></p>
</li>
<li>
<p><a href="#BABDDCEH">Configuration Settings of Applications Using GDS</a></p>
</li>
</ul>
<a id="BABHJBGI"></a>
<div id="JJUCP8247" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overview of Global Data Services</h3>
<p>Global Data Services (GDS) is a new feature introduced in Oracle Database 12<span class="italic">c</span> Release 1 (12.1). Through this feature, Fast Connection Failover, Run-time Connection Load-Balancing, and Connection Affinity features that were available only in Oracle RAC, are now extended to a set of replicated databases that offer common services.</p>
<p>The set of databases may include Oracle RAC and single-instance Oracle databases interconnected through Data Guard, GoldenGate, or any other replication technology. A database service that can be provided by multiple databases is called a global service, so that it can be distinguished from the traditional service that can be provided only by a single database. This combination enables services to be deployed anywhere within this globally distributed configuration, supporting load balancing, high availability, database affinity, and so on.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink GSMUG107" href="../GSMUG/intro.htm#GSMUG107"><span class="italic">Oracle Database Global Data Services Concepts and Administration Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="BABDDCEH"></a>
<div id="JJUCP8249" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuration Settings of Applications Using GDS</h3>
<p>UCP connects to Global Data Services in the same way that it connects to local services on an Oracle RAC. The service name in the connection string should be the name of the global service. The endpoint should be the endpoint of a GDS listener instead of the endpoint for the local, remote, or SCAN listener of a database.</p>
<p>A client must specify its region in the <code>REGION</code> parameter of the connection string. This is a new requirement for GDS. The region name is required because, in case of GDS, Run-time Load Balancing advisory is customized for particular regions. Following is an example of a typical connection string:</p>
<pre>(DESCRIPTION=
  (ADDRESS=(GDS_protocol_address_information))
  (CONNECT_DATA=
   (SERVICE_NAME=global_service_name)
   (REGION=region_name)))
</pre>
<p>Like with local services, UCP can specify multiple GDS listeners in the same connection string for listener failover, load balancing, or both.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
SCAN is not supported for GDS listeners, therefore endpoint for each listener must be specified.</div>
<pre>(DESCRIPTION=
  (ADDRESS_LIST=
    (LOAD_BALANCE=ON)
    (FAILOVER=ON)
    (ADDRESS=(GDS_protocol_address_information))
    (ADDRESS=(GDS_protocol_address_information)))
  (CONNECT_DATA=
   (SERVICE_NAME=global_service_name)
   (REGION=region_name)))
</pre>
<p>The <code>REGION</code> parameter is optional if only global service managers from the local region are specified in the client connection string. This is the case when there is only one region in the GDS configuration, or can be the case when there are multiple regions. But, it is not feasible to change the connection string of the an existing client designed to work with a single database. If the <code>REGION</code> parameter is not specified, then the client&#39;s region is assumed to be the region of the global service manager used to connect to the global service.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Unless the <code>REGION</code> parameter is specified in the connection string, you can use a pre-12c thin JDBC client only with a GDS configuration that has a single region.</div>
<p>All GDS listeners in the preceding example belong to the same region where UCP is running, that is the local region. To provide high availability, when all GDSs in the local region are unavailable, you can specify the GDS listeners for the buddy region in additional <code>ADDRESS_LIST</code> descriptors.</p>
<pre>(DESCRIPTION=
  (FAILOVER=on)
  (ADDRESS_LIST=
    (LOAD_BALANCE=ON)
    (ADDRESS=(global_protocol_address_information))
    (ADDRESS=(global_protocol_address_information)))
  (ADDRESS_LIST=
    (LOAD_BALANCE=ON)
    (ADDRESS=(global_protocol_address_information))
    (ADDRESS=(global_protocol_address_information)))
  (CONNECT_DATA=
   (SERVICE_NAME=global_service_name)
   (REGION=region_name)))
</pre>
<p>You do not need manual ONS configuration because UCP automatically retrieves the ONS connection information that is optimally customized for the UCP region from GDS.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>To enable automatic ONS configuration for GDS, you must enable Fast Connection Failover (FCF) on UCP.</p>
</li>
<li>
<p>Automatic ONS configuration works only with Oracle GDS and Oracle RAC. It does not work with single-instance Oracle Databases.</p>
<p>Automatic ONS configuration does not support ONS wallet or keystore parameters. If your application requires any of these parameters, then you must configure ONS explicitly in either of the following two ways:</p>
<ul>
<li>
<p>Calling the <code>PoolDataSource.setONSConfiguration(String)</code> method</p>
</li>
<li>
<p>Adding the ONS wallet or keystore parameters in the local ONS configuration file</p>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4234">
<tr>
<td class="cellalignment4243">
<table class="cellalignment4239">
<tr>
<td class="cellalignment4238"><a href="manage.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4238"><a href="app_cont.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4246">
<table class="cellalignment4237">
<tr>
<td class="cellalignment4238"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4238"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4238"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4238"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4238"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4238"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>