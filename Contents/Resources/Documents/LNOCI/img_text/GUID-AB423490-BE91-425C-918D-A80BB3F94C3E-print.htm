<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us"><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta http-equiv="Content-Script-Type" content="text/javascript"/>
<meta name="generator" content="DITA Open Toolkit version 1.8.5"/>
<a class="dashingAutolink" name="autolink-73959"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Description%20of%20the%20illustration%20xstrm044.eps"></a><title>Description of the illustration xstrm044.eps</title>
<link rel="stylesheet" href="../../dcommon/css/blafdoc.css" title="Oracle BLAFDoc" type="text/css"/>
</head>
<body>
<div>
<p>This illustration shows two long, rectangular, vertically-standing boxes separated by a large space. The left box is labeled &ldquo;client code&rdquo;, while the right box is labeled &ldquo;LCRCallbackSend&rdquo;. The execution flow is shown beginning at Step 1 by an arrow labelled LCRCallbackSend going from the left box toward the right box near their tops. This flow shows the user invokes the OCIXStreamInLCRCallbackSend() providing two callbacks: createlcr_cb and createchunk_cb. This function initiates an LCR inbound stream to the server shown as a large arrow flowing from the right edge of the right box labeled &ldquo;send to inbound server&rdquo;.</p>
<p>The execution flow continues with Step 2 situated beneath Step 1 and shown as an arrow labelled createlcr_cb flowing from the right box to a small box within the left box labeled &ldquo;construct LCR&rdquo; indicating that this function invokes the createlcr_cb() procedure to get an LCR from the callback to send to the server. If the flag from Step 2 indicates the current LCR has more data, then this function proceeds to Step 3; otherwise it loops back to Step 2 to get the next LCR. This is shown as a dashed line descending from the box labeled construct LCR and flowing to the left edge of the right box. If the return LCR is NULL, then this function exits.</p>
<p>The execution flow continues with Step 3 situated beneath Step 2 and shown as an arrow labelled createchunk_cb flowing from the right box to a small box labeled &ldquo;construct chunk&rdquo; within the left box, indicating that this function invokes the createchunk_cb() to get the chunk data to send to the server. If the flag from this callback has the OCI_XSTREAM_MORE_ROW_DATA bit set shown as a dashed line flowing to the left edge of the right box, then it repeats Step 3 shown as an arrow within the right box pointing to Step 3; otherwise, it loops back to Step 2 to get the next LCR from the user shown as an arrow within the right box pointing to Step 2. If any callback function returns any values other than OCI_CONTINUE, then the OCIXStreamInLCRCallbackSend() call terminates.</p>
</div>
<div class="footer"><img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo"/> <a href="../../dcommon/html/cpyr.htm"><br/>
<span class="copyrightlogo">Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.</span></a></div>


</body></html>