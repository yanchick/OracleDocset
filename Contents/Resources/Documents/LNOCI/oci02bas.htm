<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-73973"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/OCI%20Programming%20Basics"></a><title>OCI Programming Basics</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="This chapter introduces concepts and procedures involved in programming with OCI."/>
<meta name="keywords" content="OCI functions, globalization, data cartridges, globalization support, makefiles, header files, location of, demonstration files location, OCI applications, structure, OCI program, general structure, data structures, handles, descriptors, C data types, types, OCI handle types, handle type constants, OCI_HTYPE_ENV, OCI_HTYPE_ERROR, OCI_HTYPE_SVCCTX, OCI_HTYPE_STMT, OCI_HTYPE_BIND, OCI_HTYPE_DEFINE, OCI_HTYPE_DESCRIBE, OCI_HTYPE_SERVER, OCI_HTYPE_SESSION, OCI_HTYPE_AUTHINFO, authentication information handle, OCI_HTYPE_CPOOL, OCI_HTYPE_SPOOL, OCI_HTYPE_TRANS, OCI_HTYPE_COMPLEXOBJECT, OCI_HTYPE_SUBSCRIPTION, OCI_HTYPE_DIRPATH_CTX, OCI_HTYPE_DIRPATH_FN_CTX, OCI_HTYPE_DIRPATH_COLUMN_ARRAY, OCI_HTYPE_DIRPATH_STREAM, child freed when parent freed, allocating, freeing, advantages of, environment handle, description, error handle, service context handle, elements of, user session handle, server handle, server handle, user session handle, transaction handle, setting in service context, statement handle, bind handle, define handle, describe handle, complex object retrieval, handle, complex object retrieval handle, thread handle description, subscription handle, subscription, direct path loading, connection pool handle, connection pool handle, description, handle attributes, attributes, of handles, descriptor, locator, snapshot descriptor, snapshot, LOB locator, LOBs, for LOB data type, parameter descriptor, parameter, ROWID, OCIRowid descriptor, OCIRowid ROWID descriptor, date descriptor, datetime descriptor, interval descriptor, complex object retrieval (COR) descriptor, advanced queuing, descriptor, user memory, xtramem_sz parameter, using, steps, connection, session creation, application initialization, OCILogon(), proxy access, proxy authentication, initialization example, commit, rollback, transactions, committing, rolling back, terminating, errors, handling, return codes, OCI_ATTR_SERVER_STATUS, strings, passing as parameters, parameters, passing strings, NULLs, inserting into database, inserting using indicator variables, indicator variables, for named data types, for REFs, REFs, indicator variables for, named data types, inserting, canceling calls, canceling OCI calls, OCIBreak(), use of, OCI, aborting calls, positioned updates, positioned deletes, updates, positioned, deletes, used for positioned updates and deletes, reserved words, key words, coding guidelines, reserved namespaces, polling mode, nonblocking mode, connection mode, nonblocking, blocking modes, OCI_ATTR_NONBLOCKING_MODE, server handle attribute, OCIReset(), PL/SQL, using in OCI applications, binding placeholders, binding, PL/SQL placeholders, uses in OCI applications, OCIEnvNlsCreate(), NLS_LANG, NLS_NCHAR, OCI_UTF16ID, supporting UTF-16 Unicode in OCI, OCI_ATTR_ENV_NCHARSET_ID, byte order is native to machine, on which the application is running, OCIWchar data type, wchar_t data type, Unicode, data buffer alignment, character set conversion of Unicode, lmsgen utility"/>
<meta name="dcterms.created" content="2017-06-09T09:07:30Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49886-11"/>
<meta name="dcterms.isVersionOf" content="LNOCI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oci01int.htm" title="Previous" type="text/html"/>
<link rel="Next" href="oci03typ.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49886-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-4CFB8AF7-EF05-4E0F-847F-2D0710E552C5"></a> <span id="PAGE" style="display:none;">9/84</span> <!-- End Header -->
<a id="LNOCI020"></a>
<h1 id="LNOCI-GUID-4CFB8AF7-EF05-4E0F-847F-2D0710E552C5" class="sect1"><span class="enumeration_chapter">2</span> OCI Programming Basics</h1>
<div>
<p>This chapter introduces concepts and procedures involved in programming with OCI.</p>
<p>After reading this chapter, you should have most of the tools necessary to understand and create a basic OCI application.</p>
<p>This chapter includes the following major sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-8C6B6022-89EC-4E53-8CA4-AE415326D0E4" title="The OCI and OCCI header files that are required for OCI and OCCI client application development on Linux and UNIX operating systems reside in the $ORACLE_HOME/rdbms/public directory.">Header File and Makefile Locations</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-15C10430-3EBA-44B4-9518-BB097972A0F2" title="The general goal of an OCI application is to operate on behalf of multiple users.">Overview of OCI Program Programming</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-3CA268B4-AFC8-467C-B127-0E15E90A14DB" title="Handles and descriptors are opaque data structures that are defined in OCI applications.">OCI Data Structures</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-BD1CD486-6EA8-4C23-828F-DD1115317E5B" title="The following sections describe in detail each of the steps in developing an OCI application.">OCI Programming Steps</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-39339E95-A79E-43BD-B57E-4DB536CB3475" title="OCI function calls have a set of return codes.">Error Handling in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-A0A2BC74-CCF6-48B4-831F-768E1B65C33C" title="This section explains some additional issues when coding OCI applications.">Additional Coding Guidelines</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-46090C93-4BC4-4E88-AA09-3E9B716917A3" title="PL/SQL is Oracle&#39;s procedural extension to the SQL language.">About Using PL/SQL in an OCI Program</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-09672717-CAFD-41D3-9D11-9139B6FB460C" title="The following sections introduce OCI functions that can be used for globalization purposes, such as deriving locale information, manipulating strings, character set conversion, and OCI messaging.">OCI Globalization Support</a></p>
</li>
</ul>
<p>New users should pay particular attention to the information presented in this chapter, because it forms the basis for the rest of the material presented in this guide. The information in this chapter is supplemented by information in later chapters.</p>
<div class="infoboxnotealso" id="GUID-4CFB8AF7-EF05-4E0F-847F-2D0710E552C5__GUID-DB7D44CA-B4D2-4F8B-A42B-EC256DDB86F5">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink NLSPG0074" target="_blank" href="../NLSPG/ch7progrunicode.htm#NLSPG0074"><span><cite>Oracle Database Globalization Support Guide</cite></span></a> for a discussion of the OCI functions that apply to a multilingual environment</p>
</li>
<li>
<p><a class="olink ADDCI250" target="_blank" href="../ADDCI/c_cpp_java.htm#ADDCI250"><span><cite>Oracle Database Data Cartridge Developer&#39;s Guide</cite></span></a> for a discussion of the OCI functions that apply to cartridge services</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16176"></a>
<div class="props_rev_3"><a id="GUID-8C6B6022-89EC-4E53-8CA4-AE415326D0E4"></a>
<h2 id="LNOCI-GUID-8C6B6022-89EC-4E53-8CA4-AE415326D0E4" class="sect2">Header File and Makefile Locations</h2>
<div>
<p>The OCI and OCCI header files that are required for OCI and OCCI client application development on Linux and UNIX operating systems reside in the <code class="codeph">$ORACLE_HOME/rdbms/public</code> directory.</p>
<p>These files are available both with the Oracle Database Server installation, and with the Oracle Database Client Administration and Custom installations.</p>
<p>All demonstration programs and their related header files continue to reside in the <code class="codeph">$ORACLE_HOME/rdbms/demo</code> directory. These demonstration files are installable only from the Examples media. See <a href="ociabdem.htm#GUID-75E18629-0C54-4495-A747-AFB346034F26" title="Lists example programs with sample code demonstrating the allocation and use of OCI handles.">OCI Demonstration Programs</a> for the names of these programs and their purposes.</p>
<p>Several makefiles are provided in the <code class="codeph">demo</code> directory. Each makefile contains comments with instructions on its use in building OCI executables. Oracle recommends that you use these demonstration makefiles whenever possible to avoid errors in compilation and linking.</p>
<p>The <code class="codeph">demo_rdbms.mk</code> file in the <code class="codeph">demo</code> directory and is an example makefile. See the comments on how to build the demonstration OCI programs. The <code class="codeph">demo_rdbms.mk</code> file includes the <code class="codeph">$ORACLE_HOME/rdbms/public</code> directory. Ensure that your own customized makefiles have the <code class="codeph">$ORACLE_HOME/rdbms/public</code> directory in the <code class="codeph">INCLUDE</code> path.</p>
<p>The <code class="codeph">ociucb.mk</code> file is a makefile in <code class="codeph">demo</code> for building a callback shared library.</p>
</div>
</div>
<a id="LNOCI16179"></a><a id="LNOCI16178"></a>
<div class="props_rev_3"><a id="GUID-15C10430-3EBA-44B4-9518-BB097972A0F2"></a>
<h2 id="LNOCI-GUID-15C10430-3EBA-44B4-9518-BB097972A0F2" class="sect2">Overview of OCI Program Programming</h2>
<div>
<p>The general goal of an OCI application is to operate on behalf of multiple users.</p>
<p>In an n-tiered configuration, multiple users are sending HTTP requests to the client application. The client application may need to perform some data operations that include exchanging data and performing data processing.</p>
<p>OCI uses the following basic program flow:</p>
<ol>
<li>
<p>Create the environment by initializing the OCI programming environment and threads.</p>
</li>
<li>
<p>Allocate necessary handles, and establish server connections and user sessions.</p>
</li>
<li>
<p>Exchange data with the database server by executing SQL statements on the server, and perform necessary application data processing.</p>
</li>
<li>
<p>Execute prepared statements, or prepare a new statement for execution.</p>
</li>
<li>
<p>Terminate user sessions and disconnect from server connections.</p>
</li>
<li>
<p>Free handles and data structures.</p>
</li>
</ol>
<p><a href="oci02bas.htm#GUID-15C10430-3EBA-44B4-9518-BB097972A0F2__I461082">Figure 2-1</a> illustrates the flow of steps in an OCI application. <a href="oci02bas.htm#GUID-BD1CD486-6EA8-4C23-828F-DD1115317E5B" title="The following sections describe in detail each of the steps in developing an OCI application.">OCI Programming Steps</a> describes each step in more detail.</p>
<div class="figure" id="GUID-15C10430-3EBA-44B4-9518-BB097972A0F2__I461082">
<p class="titleinfigure">Figure 2-1 Basic OCI Program Flow</p>
<img width="122" height="285" src="img/GUID-7BC13C9D-9D49-4B25-8F15-8ED00D41266E-default.gif" alt="Description of Figure 2-1 follows" title="Description of Figure 2-1 follows"/><br/>
<a href="img_text/GUID-7BC13C9D-9D49-4B25-8F15-8ED00D41266E-print.htm">Description of &#34;Figure 2-1 Basic OCI Program Flow&#34;</a></div>
<!-- class="figure" -->
<p>The diagram and the list of steps present a simple generalization of OCI programming steps. Variations are possible, depending on the functionality of the program. OCI applications that include more sophisticated functionality, such as managing multiple sessions and transactions and using objects, require additional steps.</p>
<p>All OCI function calls are executed in the context of an environment. There can be multiple environments within an OCI process. If an environment requires any process-level initialization, then it is performed automatically.</p>
<div class="infobox-note" id="GUID-15C10430-3EBA-44B4-9518-BB097972A0F2__GUID-6DF50731-751D-46CA-9C25-4992F08C3141">
<p class="notep1">Note:</p>
<p>It is possible to have multiple active connections and statements in an OCI application.</p>
</div>
<div class="infoboxnotealso" id="GUID-15C10430-3EBA-44B4-9518-BB097972A0F2__GUID-761E00D6-02CE-45E2-A72A-C1130E6E6845">
<p class="notep1">See Also:</p>
<p><a href="oci11obj.htm#GUID-8A9E9784-9D10-40B1-ADE9-4CE9325255E5" title="This chapter introduces the OCI facility for working with objects in an Oracle database. It also discusses the object navigational function calls of OCI.">OCI Object-Relational Programming</a> through <a href="oci15ott.htm#GUID-3D22CA8E-BE01-492F-BA85-DDD0CD3F4890" title="This chapter discusses the Object Type Translator (OTT), which is used to map database object types and named collection types to C structs for use in OCI applications.">Using the Object Type Translator with OCI</a> for information about accessing and manipulating objects</p>
</div>
</div>
</div>
<a id="LNOCI16180"></a>
<div class="props_rev_3"><a id="GUID-3CA268B4-AFC8-467C-B127-0E15E90A14DB"></a>
<h2 id="LNOCI-GUID-3CA268B4-AFC8-467C-B127-0E15E90A14DB" class="sect2">OCI Data Structures</h2>
<div>
<p><span class="italic">Handles</span> and <span class="italic">descriptors</span> are opaque data structures that are defined in OCI applications.</p>
<p>Handles and descriptors can be allocated directly, through specific allocate calls, or they can be implicitly allocated by OCI functions.</p>
<div class="infobox-note" id="GUID-3CA268B4-AFC8-467C-B127-0E15E90A14DB__GUID-8CE54B6D-B689-4211-89A7-0BAAA031CF5D">
<p class="notep1">Note:</p>
<p>Programmers who have previously written 7.x OCI applications must become familiar with these data structures that are used by most OCI calls.</p>
</div>
<p>Handles and descriptors store information pertaining to data, connections, or application behavior. Handles are defined in more detail in the next section.</p>
<p>This section includes the following topics: <a href="oci02bas.htm#GUID-5F13B2EC-E29C-4710-8AD7-E97E6C28085E" title="Almost every OCI call includes in its parameter list one or more handles.">Handles</a></p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci02bas.htm#GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C" title="OCI descriptors and locators are opaque data structures that maintain data-specific information.">OCI Descriptors</a></li>
</ul>
</div>
</div>
<a id="LNOCI16182"></a><a id="LNOCI16181"></a>
<div class="props_rev_3"><a id="GUID-5F13B2EC-E29C-4710-8AD7-E97E6C28085E"></a>
<h3 id="LNOCI-GUID-5F13B2EC-E29C-4710-8AD7-E97E6C28085E" class="sect3">Handles</h3>
<div>
<p>Almost every OCI call includes in its parameter list one or more handles.</p>
<div class="section">
<p>A handle is an opaque pointer to a storage area allocated by the OCI library. You use a handle to store context or connection information, (for example, an environment or service context handle), or it may store information about OCI functions or data (for example, an error or describe handle). Handles can make programming easier, because the library, rather than the application, maintains this data.</p>
<p>Most OCI applications must access the information stored in handles. The get and set attribute OCI calls, <code class="codeph">OCIAttrGet()</code> and <code class="codeph">OCIAttrSet()</code>, access and set this information.</p>
<p><a href="oci02bas.htm#GUID-5F13B2EC-E29C-4710-8AD7-E97E6C28085E__G466063" title="This table has 3 columns. Column 1 is the handle type description, column 2 is the C data type, and column 3 is the handle type constant.">Table 2-1</a> lists the handles defined for OCI. For each handle type, the C data type and handle type constant used to identify the handle type in OCI calls are listed.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-5F13B2EC-E29C-4710-8AD7-E97E6C28085E__G466063">
<p class="titleintable">Table 2-1 OCI Handle Types</p>
<table class="cellalignment6157" title="OCI Handle Types " summary="This table has 3 columns. Column 1 is the handle type description, column 2 is the C data type, and column 3 is the handle type constant.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6178" id="d22181e1126">Description</th>
<th class="cellalignment6167" id="d22181e1129">C Data Type</th>
<th class="cellalignment6242" id="d22181e1132">Handle Type Constant</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1137" headers="d22181e1126">
<p>OCI environment handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1137 d22181e1129">
<p><code class="codeph">OCIEnv</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1137 d22181e1132">
<p><code class="codeph">OCI_HTYPE_ENV</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1149" headers="d22181e1126">
<p>OCI error handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1149 d22181e1129">
<p><code class="codeph">OCIError</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1149 d22181e1132">
<p><code class="codeph">OCI_HTYPE_ERROR</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1161" headers="d22181e1126">
<p>OCI service context handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1161 d22181e1129">
<p><code class="codeph">OCISvcCtx</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1161 d22181e1132">
<p><code class="codeph">OCI_HTYPE_SVCCTX</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1173" headers="d22181e1126">
<p>OCI statement handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1173 d22181e1129">
<p><code class="codeph">OCIStmt</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1173 d22181e1132">
<p><code class="codeph">OCI_HTYPE_STMT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1185" headers="d22181e1126">
<p>OCI bind handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1185 d22181e1129">
<p><code class="codeph">OCIBind</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1185 d22181e1132">
<p><code class="codeph">OCI_HTYPE_BIND</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1197" headers="d22181e1126">
<p>OCI define handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1197 d22181e1129">
<p><code class="codeph">OCIDefine</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1197 d22181e1132">
<p><code class="codeph">OCI_HTYPE_DEFINE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1209" headers="d22181e1126">
<p>OCI describe handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1209 d22181e1129">
<p><code class="codeph">OCIDescribe</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1209 d22181e1132">
<p><code class="codeph">OCI_HTYPE_DESCRIBE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1221" headers="d22181e1126">
<p>OCI server handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1221 d22181e1129">
<p><code class="codeph">OCIServer</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1221 d22181e1132">
<p><code class="codeph">OCI_HTYPE_SERVER</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1233" headers="d22181e1126">
<p>OCI user session handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1233 d22181e1129">
<p><code class="codeph">OCISession</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1233 d22181e1132">
<p><code class="codeph">OCI_HTYPE_SESSION</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1245" headers="d22181e1126">
<p>OCI authentication information handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1245 d22181e1129">
<p><code class="codeph">OCIAuthInfo</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1245 d22181e1132">
<p><code class="codeph">OCI_HTYPE_AUTHINFO</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1257" headers="d22181e1126">
<p>OCI connection pool handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1257 d22181e1129">
<p><code class="codeph">OCICPool</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1257 d22181e1132">
<p><code class="codeph">OCI_HTYPE_CPOOL</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1270" headers="d22181e1126">
<p>OCI session pool handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1270 d22181e1129">
<p><code class="codeph">OCISPool</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1270 d22181e1132">
<p><code class="codeph">OCI_HTYPE_SPOOL</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1282" headers="d22181e1126">
<p>OCI transaction handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1282 d22181e1129">
<p><code class="codeph">OCITrans</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1282 d22181e1132">
<p><code class="codeph">OCI_HTYPE_TRANS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1294" headers="d22181e1126">
<p>OCI complex object retrieval (COR) handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1294 d22181e1129">
<p><code class="codeph">OCIComplexObject</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1294 d22181e1132">
<p><code class="codeph">OCI_HTYPE_COMPLEXOBJECT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1306" headers="d22181e1126">
<p>OCI thread handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1306 d22181e1129">
<p><code class="codeph">OCIThreadHandle</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1306 d22181e1132">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1317" headers="d22181e1126">
<p>OCI subscription handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1317 d22181e1129">
<p><code class="codeph">OCISubscription</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1317 d22181e1132">
<p><code class="codeph">OCI_HTYPE_SUBSCRIPTION</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1329" headers="d22181e1126">
<p>OCI direct path context handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1329 d22181e1129">
<p><code class="codeph">OCIDirPathCtx</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1329 d22181e1132">
<p><code class="codeph">OCI_HTYPE_DIRPATH_CTX</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1341" headers="d22181e1126">
<p>OCI direct path function context handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1341 d22181e1129">
<p><code class="codeph">OCIDirPathFuncCtx</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1341 d22181e1132">
<p><code class="codeph">OCI_HTYPE_DIRPATH_FN_CTX</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1353" headers="d22181e1126">
<p>OCI direct path column array handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1353 d22181e1129">
<p><code class="codeph">OCIDirPathColArray</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1353 d22181e1132">
<p><code class="codeph">OCI_HTYPE_DIRPATH_COLUMN_ARRAY</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1365" headers="d22181e1126">
<p>OCI direct path stream handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1365 d22181e1129">
<p><code class="codeph">OCIDirPathStream</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1365 d22181e1132">
<p><code class="codeph">OCI_HTYPE_DIRPATH_STREAM</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1377" headers="d22181e1126">
<p>OCI process handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1377 d22181e1129">
<p><code class="codeph">OCIProcess</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1377 d22181e1132">
<p><code class="codeph">OCI_HTYPE_PROC</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1389" headers="d22181e1126">
<p>OCI administration handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1389 d22181e1129">
<p><code class="codeph">OCIAdmin</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1389 d22181e1132">
<p><code class="codeph">OCI_HTYPE_ADMIN</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6181" id="d22181e1402" headers="d22181e1126">
<p>OCI HA event handle</p>
</td>
<td class="cellalignment6171" headers="d22181e1402 d22181e1129">
<p><code class="codeph">OCIEvent</code></p>
</td>
<td class="cellalignment6244" headers="d22181e1402 d22181e1132">
<p>Not applicable</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-6374C1BF-9959-4791-8FA9-C630CD932992" title="Your application allocates all handles (except the bind, define, and thread handles) for a particular environment handle.">About Allocating and Freeing Handles</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-8C59F2D9-3A69-41EE-927B-13659F6AD411">Environment Handle</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-53AE9E90-F7F7-42B0-9266-D6173191F463" title="The error handle is passed as a parameter to most OCI calls.">Error Handle</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-AE250EB9-0C4F-428F-9965-8DD525C3332B" title="A service context handle defines attributes that determine the operational context for OCI calls to a server.">Service Context Handle and Associated Handles</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-37CEA9AF-A95A-463B-BA0D-1377F1912B03" title="A statement handle is the context that identifies a SQL or PL/SQL statement and its associated attributes">Statement, Bind, and Define Handles</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-63B7D9FD-A125-4948-A1BF-BDCCA785B835" title="The describe handle is used by the OCI describe call, OCIDescribeAny().">Describe Handle</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-69A6ADB9-FBAD-4BD3-8D09-B601C0118F06" title="The complex object retrieval (COR) handle is used by some OCI applications that work with objects in an Oracle database.">Complex Object Retrieval Handle</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-9ED08575-41FB-4116-8EB6-25CEC359444B" title="The thread handle is used in multithreaded applications.">Thread Handle</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-30BFCB00-7024-4936-842E-9A8986A9D9FC" title="The subscription handle is used by an OCI client application that registers and subscribes to receive notifications of database events or events in the AQ namespace.">Subscription Handle</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-F3338E24-AFCD-44B3-8C64-7A959810C482" title="The direct path handles are necessary for an OCI application that uses the direct path load engine in the Oracle database.">Direct Path Handles</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-DEA5B616-503F-47C0-AAFB-273EAC1B918A" title="The connection pool handle is used for applications that pool physical connections into virtual connections.">Connection Pool Handle</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-1072961E-BF2A-436D-B74C-D54F962C059C" title="All OCI handles have attributes that represent data stored in that handle.">Handle Attributes</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C" title="OCI descriptors and locators are opaque data structures that maintain data-specific information.">OCI Descriptors</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci02bas.htm#GUID-1072961E-BF2A-436D-B74C-D54F962C059C">Handle Attributes</a></li>
<li><a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03">OCIAttrSet()</a></li>
<li><a href="oci16rel002.htm#GUID-FA199A99-4D7A-42C2-BB0A-C20047B95DF9">OCIAttrGet()</a></li>
</ul>
</div>
</div>
<a id="LNOCI16183"></a>
<div class="props_rev_3"><a id="GUID-6374C1BF-9959-4791-8FA9-C630CD932992"></a>
<h4 id="LNOCI-GUID-6374C1BF-9959-4791-8FA9-C630CD932992" class="sect4">About Allocating and Freeing Handles</h4>
<div>
<p>Your application allocates all handles (except the bind, define, and thread handles) for a particular environment handle.</p>
<p>You pass the environment handle as one of the parameters to the handle allocation call. The allocated handle is then specific to that particular environment.</p>
<p>The bind and define handles are allocated for a statement handle, and contain information about the statement represented by that handle.</p>
<div class="infobox-note" id="GUID-6374C1BF-9959-4791-8FA9-C630CD932992__GUID-30F77D9B-45F7-4BF6-8783-337C726B12CF">
<p class="notep1">Note:</p>
<p>The bind and define handles are implicitly allocated by the OCI library, and do not require user allocation.</p>
</div>
<p>The environment handle is allocated and initialized with a call to <code class="codeph">OCIEnvCreate()</code> or to <code class="codeph">OCIEnvNlsCreate()</code>, one of which is required by all OCI applications.</p>
<p>All user-allocated handles are initialized using the OCI handle allocation call, <code class="codeph">OCIHandleAlloc()</code>.</p>
<p>The types of handles include: session pool handle, direct path context handle, thread handle, COR handle, subscription handle, describe handle, statement handle, service context handle, error handle, server handle, connection pool handle, event handle, and administration handle.</p>
<p>The thread handle is allocated with the <code class="codeph">OCIThreadHndInit()</code> call.</p>
<p>An application must free all handles when they are no longer needed. The <code class="codeph">OCIHandleFree()</code> function frees all handles.</p>
<div class="infobox-note" id="GUID-6374C1BF-9959-4791-8FA9-C630CD932992__GUID-C7DBC94A-4E71-4D40-AB68-F34A2ECA6575">
<p class="notep1">Note:</p>
<p>When a parent handle is freed, all child handles associated with it are also freed and can no longer be used. For example, when a statement handle is freed, any bind and define handles associated with it are also freed.</p>
</div>
<p>Handles lessen the need for global variables. Handles also make error reporting easier. An error handle is used to return errors and diagnostic information.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="ociabdem.htm#GUID-75E18629-0C54-4495-A747-AFB346034F26">OCI Demonstration Programs</a></li>
<li><a href="oci16rel001.htm#GUID-16BDA1F1-7DAF-41CA-9EE1-C9A4CB467244">OCIEnvCreate()</a></li>
<li><a href="oci16rel001.htm#GUID-0B6911A9-4B46-476C-BC5E-B87581666CD9">OCIEnvNlsCreate()</a></li>
<li><a href="oci16rel002.htm#GUID-C5BF55F7-A110-4CB5-9663-5056590F12B5">OCIHandleAlloc()</a></li>
<li><a href="oci17msc005.htm#GUID-1D3F6256-B071-436D-B6D6-5C34AF691304">OCIThreadHndInit()</a></li>
<li><a href="oci16rel002.htm#GUID-E87E9F91-D3DC-4F35-BE7C-F1EFBFEEBA0A">OCIHandleFree()</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16184"></a>
<div class="props_rev_3"><a id="GUID-8C59F2D9-3A69-41EE-927B-13659F6AD411"></a>
<h4 id="LNOCI-GUID-8C59F2D9-3A69-41EE-927B-13659F6AD411" class="sect4">Environment Handle</h4>
<div>
<p>The <span class="italic">environment handle</span> defines a context in which all OCI functions are invoked. Each environment handle contains a memory cache that enables fast memory access. All memory allocation under the environment handle is done from this cache. Access to the cache is serialized if multiple threads try to allocate memory under the same environment handle. When multiple threads share a single environment handle, they may block on access to the cache.</p>
<p>The environment handle is passed as the <span class="italic">parent</span> parameter to the <a href="oci16rel002.htm#GUID-C5BF55F7-A110-4CB5-9663-5056590F12B5" title="Returns a pointer to an allocated and initialized handle.">OCIHandleAlloc()</a> call to allocate all other handle types. Bind and define handles are allocated implicitly.</p>
</div>
</div>
<a id="LNOCI16185"></a>
<div class="props_rev_3"><a id="GUID-53AE9E90-F7F7-42B0-9266-D6173191F463"></a>
<h4 id="LNOCI-GUID-53AE9E90-F7F7-42B0-9266-D6173191F463" class="sect4">Error Handle</h4>
<div>
<p>The <span class="italic">error handle</span> is passed as a parameter to most OCI calls.</p>
<p>The error handle maintains information about errors that occur during an OCI operation. If an error occurs in a call, the error handle can be passed to <code class="codeph">OCIErrorGet()</code> to obtain additional information about the error that occurred.</p>
<p>Allocating the error handle is one of the first steps in an OCI application because most OCI calls require an error handle as a parameter.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci08sca.htm#GUID-17B33216-F71E-4CD8-9E07-AD8F551A9C69" title="To take advantage of thread safety, an application must be running on a thread-safe operating system.">About Implementing Thread Safety</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16187"></a><a id="LNOCI16186"></a>
<div class="props_rev_3"><a id="GUID-AE250EB9-0C4F-428F-9965-8DD525C3332B"></a>
<h4 id="LNOCI-GUID-AE250EB9-0C4F-428F-9965-8DD525C3332B" class="sect4">Service Context Handle and Associated Handles</h4>
<div>
<p>A <span class="italic">service context handle</span> defines attributes that determine the operational context for OCI calls to a server.</p>
<p>The service context handle contains three handles as its attributes, that represent a server connection, a user session, and a transaction. These attributes are illustrated in <a href="oci02bas.htm#GUID-AE250EB9-0C4F-428F-9965-8DD525C3332B__I461365">Figure 2-2</a>.</p>
<div class="figure" id="GUID-AE250EB9-0C4F-428F-9965-8DD525C3332B__I461365">
<p class="titleinfigure">Figure 2-2 Components of a Service Context</p>
<img width="326" height="111" src="img/GUID-586327FE-46DB-49C6-B7CF-35FC064D43E5-default.gif" alt="Description of Figure 2-2 follows" title="Description of Figure 2-2 follows"/><br/>
<a href="img_text/GUID-586327FE-46DB-49C6-B7CF-35FC064D43E5-print.htm">Description of &#34;Figure 2-2 Components of a Service Context&#34;</a></div>
<!-- class="figure" -->
<ul style="list-style-type: disc;">
<li>
<p>A <span class="italic">server handle</span> identifies a connection to a database. It translates into a physical connection in a connection-oriented transport mechanism.</p>
</li>
<li>
<p>A <span class="italic">user session handle</span> defines a user&#39;s roles and privileges (also known as the user&#39;s security domain), and the operational context in which the calls execute.</p>
</li>
<li>
<p>A <span class="italic">transaction handle</span> defines the transaction in which the SQL operations are performed. The transaction context includes user session state information, including any fetch state and package instantiation.</p>
</li>
</ul>
<p>Breaking the service context handle down in this way provides scalability and enables programmers to create sophisticated multitiered applications and transaction processing (TP) monitors to execute requests on behalf of multiple users on multiple application servers and different transaction contexts.</p>
<p>You must allocate and initialize the service context handle with <code class="codeph">OCIHandleAlloc()</code>, <code class="codeph">OCILogon()</code>, or <code class="codeph">OCILogon2()</code> before you can use it. The service context handle is allocated explicitly by <code class="codeph">OCIHandleAlloc()</code>. It can be initialized using <code class="codeph">OCIAttrSet()</code> with the server, user session, and transaction handle. If the service context handle is allocated implicitly using <code class="codeph">OCILogon()</code>, it is already initialized.</p>
<p>Applications maintaining only a single user session for each database connection at any time can call <code class="codeph">OCILogon()</code> to get an initialized service context handle.</p>
<p>In applications requiring more complex session management, the service context handle must be explicitly allocated, and the server and user session handles must be explicitly set into the service context handle. <code class="codeph">OCIServerAttach()</code> and <code class="codeph">OCISessionBegin()</code> calls initialize the server and user session handle respectively.</p>
<p>An application only defines a transaction explicitly if it is a global transaction or there are multiple transactions active for sessions. It works correctly with the implicit transaction created automatically by OCI when the application makes changes to the database.</p>
<div class="infoboxnotealso" id="GUID-AE250EB9-0C4F-428F-9965-8DD525C3332B__GUID-AE5F125F-D883-4021-9675-9D85AD409DF6">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci08sca.htm#GUID-3E96017A-64D3-4A29-B617-C9879610B5F2" title="OCI has a set of API calls to support operations on both local and global transactions.">OCI Support for Transactions</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-BA2B78A2-A855-4116-8ADC-13BFA1ADEAB3" title="This section describes how to initialize the OCI environment, establish a connection to a server, and authorize a user to perform actions against the database.">OCI Environment Initialization</a>, and <a href="oci08sca.htm#GUID-5579C27E-2536-4B21-96DB-3EDFECF576B5" title="OCI can authenticate and maintain multiple users.">Password and Session Management</a> for more information about establishing a server connection and user session</p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-C5BF55F7-A110-4CB5-9663-5056590F12B5" title="Returns a pointer to an allocated and initialized handle.">OCIHandleAlloc()</a></p>
</li>
<li>
<p><a href="oci16rel001.htm#GUID-F4592576-BE9D-4583-83AD-5D56D2E592E6">OCILogon()</a></p>
</li>
<li>
<p><a href="oci16rel001.htm#GUID-425D4B32-257C-480E-B69C-7112BE9482E6">OCILogon2()</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03" title="Sets the value of an attribute of a handle or a descriptor.">OCIAttrSet()</a></p>
</li>
<li>
<p><a href="oci16rel001.htm#GUID-B6291228-DA2F-4CE9-870A-F94243141757">OCIServerAttach()</a></p>
</li>
<li>
<p><a href="oci16rel001.htm#GUID-31B1FDB3-056E-4AF9-9B89-8DA6AA156947">OCISessionBegin()</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16189"></a><a id="LNOCI16188"></a>
<div class="props_rev_3"><a id="GUID-37CEA9AF-A95A-463B-BA0D-1377F1912B03"></a>
<h4 id="LNOCI-GUID-37CEA9AF-A95A-463B-BA0D-1377F1912B03" class="sect4">Statement, Bind, and Define Handles</h4>
<div>
<p>A <span class="italic">statement handle</span> is the context that identifies a SQL or PL/SQL statement and its associated attributes</p>
<p>A statement handle is shown in <a href="oci02bas.htm#GUID-37CEA9AF-A95A-463B-BA0D-1377F1912B03__CHDIBGAG">Figure 2-3</a>.</p>
<div class="figure" id="GUID-37CEA9AF-A95A-463B-BA0D-1377F1912B03__CHDIBGAG">
<p class="titleinfigure">Figure 2-3 Statement Handles</p>
<img width="212" height="111" src="img/GUID-6FBD26AC-1C50-44F8-95B3-ED5D7A6AF765-default.gif" alt="Description of Figure 2-3 follows" title="Description of Figure 2-3 follows"/><br/>
<a href="img_text/GUID-6FBD26AC-1C50-44F8-95B3-ED5D7A6AF765-print.htm">Description of &#34;Figure 2-3 Statement Handles&#34;</a></div>
<!-- class="figure" -->
<p>Information about input and output bind variables is stored in <span class="italic">bind handles</span>. The OCI library allocates a bind handle for each placeholder bound with the <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByName2()</code> or <code class="codeph">OCIBindByPos()</code> or <code class="codeph">OCIBindByPos2()</code> function. The user must not allocate bind handles. They are implicitly allocated by the bind call.</p>
<p>Fetched data returned by a query (select statement) is converted and retrieved according to the specifications of the <span class="italic">define handles</span>. The OCI library allocates a define handle for each output variable defined with <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code>. The user must not allocate define handles. They are implicitly allocated by the define call.</p>
<p>Bind and define handles are implicitly allocated by the OCI library, and are transparently reused if the bind or define operation is repeated. The actual value of the bind or define handle is needed by the application for the advanced bind or define operations described in <a href="oci05bnd.htm#GUID-4C2BD7BB-5768-4E8A-82BF-84FB0030A8C5" title="This chapter describes binding and defining in OCI.">Binding and Defining in OCI</a>. The handles are freed when the statement handle is freed or when a new statement is prepared on the statement handle. Explicitly allocating bind or define handles may lead to memory leaks. Explicitly freeing bind or define handles may cause abnormal program termination.</p>
<div class="infoboxnotealso" id="GUID-37CEA9AF-A95A-463B-BA0D-1377F1912B03__GUID-9A5B855B-94BD-4ABC-9967-EA42B19E315F">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="oci05bnd.htm#GUID-EE9AD90D-8CFD-4380-9D5E-819555EB3A8E" title="More advanced bind operations include multistep binds, and binds of named data types and REFs.">Advanced Bind Operations in OCI</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="oci05bnd.htm#GUID-237FC150-290A-42B8-99CB-2C6AFA5B9F9E" title="This section covers advanced define operations, including multistep defines and defines of named data types and REFs.">Advanced Define Operations in OCI</a>&#34;</span></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-55C47708-5468-4106-89BE-1AB60861D037" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this function when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByName2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-5C505821-323D-473D-825B-448C8D9A6702" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByPos2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-74939FB5-919E-4D24-B327-AFB532435061" title="Associates an item in a select list with the type and output data buffer. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIDefineByPos2()</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16190"></a>
<div class="props_rev_3"><a id="GUID-63B7D9FD-A125-4948-A1BF-BDCCA785B835"></a>
<h4 id="LNOCI-GUID-63B7D9FD-A125-4948-A1BF-BDCCA785B835" class="sect4">Describe Handle</h4>
<div>
<p>The <span class="italic">describe handle</span> is used by the OCI describe call, <code class="codeph">OCIDescribeAny()</code>.</p>
<p>The <code class="codeph">OCIDescribeAny()</code> call obtains information about schema objects in a database (for example, functions or procedures). The call takes a describe handle as one of its parameters, along with information about the object being described. When the call completes, the describe handle is populated with information about the object. The OCI application can then obtain describe information through the attributes of the parameter descriptors.</p>
<div class="infoboxnotealso" id="GUID-63B7D9FD-A125-4948-A1BF-BDCCA785B835__GUID-02AB653D-5C3B-4166-883A-227D8A3229DD">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci06des.htm#GUID-CED0D15A-D873-43F7-A5B2-51FC0662C250" title="Performs an explicit describe of schema objects and their subschema objects.The OCIDescribeAny() call limits information returned to the basic information and stops expanding a node if it amounts to another describe operation.What to be aware of when performing describe operations.The OCI_ATTR_TYPECODE attribute returns typecodes that represent the types supplied by the user when a new type is created using the CREATE TYPE statement.To describe type objects, it is necessary to initialize the OCI process in object mode.The column attribute OCI_ATTR_PRECISION can be returned using an implicit describe with OCIStmtExecute() and an explicit describe with OCIDescribeAny().This section describes the attributes and handles that belong to different parameters.Lists and describes the type-specific attributes when a parameter is for a procedure or function.Lists and describes the attributes when a parameter is for a package.Lists and describes the attributes when a parameter is for a type. Lists and describes the attributes when a parameter is for an attribute of a type.Lists and dsescribes the attributes when a parameter is for a method of a type.Lists and describes the attributes when a parameter is for a collection type.Lists and describes the attributes when a parameter is for a synonym.Lists and describes the attributes when a parameter is for a sequence.Lists and describes the attributes when a parameter is for an argument of a procedure or function.Lists and describes the attributes when the parameter is for a list of columns, arguments, and subprograms, or fields of a package record type.Lists and describes the attributes when a parameter is for a schema type.Lists and describes the attributes when a parameter is for a database type.Lists and describes the attributes when a parameter is for a rule.Lists and describes the attributes when a parameter is for a rule set.Lists and describes the attributes when a parameter is for an evaluation context.Lists and describes the attributes when a parameter is for a table alias.Lists and describes the attributes when a parameter is for a variable.Lists and describes the attributes when a parameter is for a name-value pair.Query and column information are supported with character-length semantics.Explicit describes of tables have three attributes: OCI_ATTR_DATA_SIZE, OCI_ATTR_CHAR_SIZE, and OCI_ATTR_CHAR_USED.Character-length semantics depends on the release of the server or client. It is best described when both server and client are Oracle9i or later. Otherwise, compatibility issues as described result.The following examples demonstrate the use of OCIDescribeAny() for describing different types of schema objects.Shows a loop that retrieves the column names and data types corresponding to a query following query execution.Illustrates the use of invisible column properties and checking each column to determine if it is an invisible column.">Describing Schema Metadata</a> for more information about using the <code class="codeph">OCIDescribeAny()</code> function</p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-AE9F73FB-DCC1-401E-8151-A8A89059163A" title="Describes existing schema and subschema objects.">OCIDescribeAny()</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16191"></a>
<div class="props_rev_3"><a id="GUID-69A6ADB9-FBAD-4BD3-8D09-B601C0118F06"></a>
<h4 id="LNOCI-GUID-69A6ADB9-FBAD-4BD3-8D09-B601C0118F06" class="sect4">Complex Object Retrieval Handle</h4>
<div>
<p>The <span class="italic">complex object retrieval (COR) handle</span> is used by some OCI applications that work with objects in an Oracle database.</p>
<p>The complex object retrieval (COR) handle contains <span class="italic">COR descriptors,</span> provides instructions for retrieving objects referenced by another object.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci11obj.htm#GUID-03683C87-7758-421A-BC51-C54A5A7679F2" title="A complex object includes its root object and its set of logically related objects each of which are prefetched based on a given depth level.">Complex Object Retrieval</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16192"></a>
<div class="props_rev_3"><a id="GUID-9ED08575-41FB-4116-8EB6-25CEC359444B"></a>
<h4 id="LNOCI-GUID-9ED08575-41FB-4116-8EB6-25CEC359444B" class="sect4">Thread Handle</h4>
<div>
<p>The thread handle is used in multithreaded applications.</p>
<p>For information about the thread handle, which is used in multithreaded applications, see the following OCIThread Package.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci08sca.htm#GUID-AAE70C09-E0D8-4264-8E88-1D6916ABF717" title="The OCIThread package provides some commonly used threading primitives.">OCIThread Package</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16193"></a>
<div class="props_rev_3"><a id="GUID-30BFCB00-7024-4936-842E-9A8986A9D9FC"></a>
<h4 id="LNOCI-GUID-30BFCB00-7024-4936-842E-9A8986A9D9FC" class="sect4">Subscription Handle</h4>
<div>
<p>The subscription handle is used by an OCI client application that registers and subscribes to receive notifications of database events or events in the AQ namespace.</p>
<p>The subscription handle encapsulates all information related to a registration from a client.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci09adv.htm#GUID-9CE58707-FC18-492E-8AA9-5314041BCEE4" title="The publish-subscribe notification feature allows an OCI application to receive client notifications directly, register an email address to which notifications can be sent, register an HTTP URL to which notifications can be posted, or register a PL/SQL procedure to be invoked on a notification.">Publish-Subscribe Notification in OCI</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16195"></a><a id="LNOCI16194"></a>
<div class="props_rev_3"><a id="GUID-F3338E24-AFCD-44B3-8C64-7A959810C482"></a>
<h4 id="LNOCI-GUID-F3338E24-AFCD-44B3-8C64-7A959810C482" class="sect4">Direct Path Handles</h4>
<div>
<p>The direct path handles are necessary for an OCI application that uses the direct path load engine in the Oracle database.</p>
<p>The direct path load interface enables the application to access the direct block formatter of the Oracle database. <a href="oci02bas.htm#GUID-F3338E24-AFCD-44B3-8C64-7A959810C482__CHDIHGED">Figure 2-4</a> shows the different kinds of direct path handles.</p>
<div class="figure" id="GUID-F3338E24-AFCD-44B3-8C64-7A959810C482__CHDIHGED">
<p class="titleinfigure">Figure 2-4 Direct Path Handles</p>
<img width="314" height="122" src="img/GUID-35E5C836-0996-4C72-A6DA-19691EBD157E-default.gif" alt="Description of Figure 2-4 follows" title="Description of Figure 2-4 follows"/><br/>
<a href="img_text/GUID-35E5C836-0996-4C72-A6DA-19691EBD157E-print.htm">Description of &#34;Figure 2-4 Direct Path Handles&#34;</a></div>
<!-- class="figure" --></div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci13obn.htm#GUID-5636C859-A1CD-4229-9CDF-0D477238AA05" title="Lists the external data types that are valid for scalar columns in a direct path load operation.A direct path load corresponds to a direct path array insert operation.Use the direct path function context handle to describe named type and REF columns: column objects, REF columns, and SQL string columns.Lists and describes the functions used with the direct path load interface.This section describes the direct path load examples for scalar columns.The date cache feature provides improved performance when loading Oracle date and time-stamp values that require data type conversions to be stored in the table.">Direct Path Loading Overview</a></li>
<li><a href="ociaahan.htm#GUID-0097B016-DAD2-4AFA-9D3C-37689FA75B41">Direct Path Loading Handle Attributes</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16196"></a>
<div class="props_rev_3"><a id="GUID-DEA5B616-503F-47C0-AAFB-273EAC1B918A"></a>
<h4 id="LNOCI-GUID-DEA5B616-503F-47C0-AAFB-273EAC1B918A" class="sect4">Connection Pool Handle</h4>
<div>
<p>The <span class="italic">connection pool handle</span> is used for applications that pool physical connections into virtual connections.</p>
<p>The <span class="italic">connection pool handle</span> is used for applications that pool physical connections into virtual connections by calling specific OCI functions.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci09adv.htm#GUID-1C9A6E8F-EF5A-478D-B65E-CE39D4F00683" title="Connection pooling is the use of a group (the pool) of reusable physical connections by several sessions to balance loads.">Connection Pooling in OCI</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI72575"></a><a id="LNOCI72576"></a><a id="LNOCI16197"></a>
<div class="props_rev_3"><a id="GUID-1072961E-BF2A-436D-B74C-D54F962C059C"></a>
<h4 id="LNOCI-GUID-1072961E-BF2A-436D-B74C-D54F962C059C" class="sect4">Handle Attributes</h4>
<div>
<p>All OCI handles have <span class="italic">attributes</span> that represent data stored in that handle.</p>
<p>You can read handle attributes by using the attribute get call, <code class="codeph">OCIAttrGet()</code>, and you can change them with the attribute set call, <code class="codeph">OCIAttrSet()</code>.</p>
<p>For example, the statements in <a href="oci02bas.htm#GUID-1072961E-BF2A-436D-B74C-D54F962C059C__CIHCFIFH">Example 2-1</a> set the user name in the session handle by writing to the <code class="codeph">OCI_ATTR_USERNAME</code> attribute:</p>
<p>Some OCI functions require that particular handle attributes be set before the function is called. For example, when <code class="codeph">OCISessionBegin()</code> is called to establish a user&#39;s login session, the user name and password must be set in the user session handle before the call is made.</p>
<p>Other OCI functions provide useful return data in handle attributes after the function completes. For example, when <code class="codeph">OCIStmtExecute()</code> is called to execute a SQL query, describe information relating to the select-list items is returned in the statement handle, as shown in <a href="oci02bas.htm#GUID-1072961E-BF2A-436D-B74C-D54F962C059C__CIHGFEBG">Example 2-2</a>.</p>
<div class="infoboxnotealso" id="GUID-1072961E-BF2A-436D-B74C-D54F962C059C__GUID-742C5CE9-47B8-4EC6-8F92-A11CB92ADFF5">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p>The description of <a href="oci16rel002.htm#GUID-8218D5F2-139B-4FA9-BA4A-ED0126687C0F" title="Allocates an array of descriptors.">OCIArrayDescriptorAlloc()</a> for an example showing how to allocate a large number of descriptors</p>
</li>
<li>
<p><a href="ociaahan.htm#GUID-CB59C987-07E7-42D4-ADDF-96142CBD3D11" title="This appendix describes the attributes for OCI handles and descriptors.">Handle and Descriptor Attributes</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-FA199A99-4D7A-42C2-BB0A-C20047B95DF9" title="Gets the value of an attribute of a handle.">OCIAttrGet()</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03" title="Sets the value of an attribute of a handle or a descriptor.">OCIAttrSet()</a></p>
</li>
<li>
<p><a href="oci16rel001.htm#GUID-31B1FDB3-056E-4AF9-9B89-8DA6AA156947">OCISessionBegin()</a></p>
</li>
<li>
<p><a href="oci17msc001.htm#GUID-98B26708-3E02-45C0-8258-5D5544F32BE9" title="Associates an application request with a server.">OCIStmtExecute()</a></p>
</li>
</ul>
</div>
<div class="example" id="GUID-1072961E-BF2A-436D-B74C-D54F962C059C__CIHCFIFH">
<p class="titleinexample">Example 2-1 Using the OCI_ATTR_USERNAME Attribute to Set the User Name in the Session Handle</p>
<pre dir="ltr">text username[] = &#34;hr&#34;;
err = OCIAttrSet ((void *) mysessp, OCI_HTYPE_SESSION, (void *)username,
      (ub4) strlen((char *)username), OCI_ATTR_USERNAME, (OCIError *) myerrhp);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1072961E-BF2A-436D-B74C-D54F962C059C__CIHGFEBG">
<p class="titleinexample">Example 2-2 Returning Describe Information in the Statement Handle Relating to Select-List Items</p>
<pre dir="ltr">ub4 parmcnt;
/* get the number of columns in the select list */
err = OCIAttrGet ((void  *)stmhp, (ub4)OCI_HTYPE_STMT, (void  *)
         &amp;parmcnt, (ub4 *) 0, (ub4)OCI_ATTR_PARAM_COUNT, errhp);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI16199"></a><a id="LNOCI16198"></a>
<div class="props_rev_3"><a id="GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C"></a>
<h4 id="LNOCI-GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C" class="sect4">OCI Descriptors</h4>
<div>
<p>OCI <span class="italic">descriptors</span> and <span class="italic">locators</span> are opaque data structures that maintain data-specific information.</p>
<div class="section">
<p><a href="oci02bas.htm#GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C__G466207" title="This table has 3 columns. Column 1 is the descriptor type description, column 2 is the C data type, and column 3 is the OCI type constant.">Table 2-2</a> lists OCI descriptors, along with their C data type, and the OCI type constant that allocates a descriptor of that type in a call to <code class="codeph">OCIDescriptorAlloc()</code>. The <code class="codeph">OCIDescriptorFree()</code> function frees descriptors and locators.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C__G466207">
<p class="titleintable">Table 2-2 Descriptor Types</p>
<table class="cellalignment6157" title="Descriptor Types " summary="This table has 3 columns. Column 1 is the descriptor type description, column 2 is the C data type, and column 3 is the OCI type constant.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6242" id="d22181e4323">Description</th>
<th class="cellalignment6245" id="d22181e4326">C Data Type</th>
<th class="cellalignment6242" id="d22181e4329">OCI Type Constant</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4334" headers="d22181e4323">
<p>Snapshot descriptor<a id="d22181e4337" class="indexterm-anchor"></a><a id="d22181e4341" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4334 d22181e4326">
<p><code class="codeph">OCISnapshot</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4334 d22181e4329">
<p><a id="d22181e4349" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_SNAP</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4354" headers="d22181e4323">
<p>Result set descriptor<a id="d22181e4357" class="indexterm-anchor"></a><a id="d22181e4361" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4354 d22181e4326">
<p><code class="codeph">OCIResult</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4354 d22181e4329">
<p><code class="codeph">OCI_DTYPE_RSET</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4372" headers="d22181e4323">
<p>LOB data type locator<a id="d22181e4375" class="indexterm-anchor"></a><a id="d22181e4379" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4372 d22181e4326">
<p><code class="codeph">OCILobLocator</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4372 d22181e4329">
<p><a id="d22181e4387" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_LOB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4392" headers="d22181e4323">
<p><code class="codeph">BFILE</code> data type locator<a id="d22181e4397" class="indexterm-anchor"></a><a id="d22181e4401" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4392 d22181e4326">
<p><code class="codeph">OCILobLocator</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4392 d22181e4329">
<p><a id="d22181e4409" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_FILE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4414" headers="d22181e4323">
<p>Read-only parameter descriptor<a id="d22181e4417" class="indexterm-anchor"></a><a id="d22181e4421" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4414 d22181e4326">
<p><code class="codeph">OCIParam</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4414 d22181e4329">
<p><a id="d22181e4429" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_PARAM</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4434" headers="d22181e4323">
<p><code class="codeph">ROWID</code> descriptor<a id="d22181e4439" class="indexterm-anchor"></a><a id="d22181e4443" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4434 d22181e4326">
<p><code class="codeph">OCIRowid</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4434 d22181e4329">
<p><a id="d22181e4451" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_ROWID</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4456" headers="d22181e4323">
<p><code class="codeph">ANSI DATE</code> descriptor<a id="d22181e4461" class="indexterm-anchor"></a><a id="d22181e4465" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4456 d22181e4326">
<p><code class="codeph">OCIDateTime</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4456 d22181e4329">
<p><a id="d22181e4473" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_DATE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4478" headers="d22181e4323">
<p><code class="codeph">TIMESTAMP</code> descriptor<a id="d22181e4483" class="indexterm-anchor"></a><a id="d22181e4487" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4478 d22181e4326">
<p><code class="codeph">OCIDateTime</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4478 d22181e4329">
<p><a id="d22181e4495" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4500" headers="d22181e4323">
<p><code class="codeph">TIMESTAMP WITH TIME ZONE</code> descriptor<a id="d22181e4505" class="indexterm-anchor"></a><a id="d22181e4509" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4500 d22181e4326">
<p><code class="codeph">OCIDateTime</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4500 d22181e4329">
<p><a id="d22181e4517" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_TIMESTAMP_TZ</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4522" headers="d22181e4323">
<p><code class="codeph">TIMESTAMP WITH LOCAL TIME ZONE</code> descriptor<a id="d22181e4527" class="indexterm-anchor"></a><a id="d22181e4531" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4522 d22181e4326">
<p><code class="codeph">OCIDateTime</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4522 d22181e4329">
<p><a id="d22181e4539" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_TIMESTAMP_LTZ</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4544" headers="d22181e4323">
<p><code class="codeph">INTERVAL YEAR TO MONTH</code> descriptor<a id="d22181e4549" class="indexterm-anchor"></a><a id="d22181e4553" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4544 d22181e4326">
<p><code class="codeph">OCIInterval</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4544 d22181e4329">
<p><a id="d22181e4561" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_INTERVAL_YM</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4567" headers="d22181e4323">
<p><code class="codeph">INTERVAL DAY TO SECOND</code> descriptor<a id="d22181e4572" class="indexterm-anchor"></a><a id="d22181e4576" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4567 d22181e4326">
<p><code class="codeph">OCIInterval</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4567 d22181e4329">
<p><a id="d22181e4584" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_INTERVAL_DS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4589" headers="d22181e4323">
<p>User callback descriptor<a id="d22181e4592" class="indexterm-anchor"></a><a id="d22181e4596" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4589 d22181e4326">
<p><code class="codeph">OCIUcb</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4589 d22181e4329">
<p><code class="codeph">OCI_DTYPE_UCB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4607" headers="d22181e4323">
<p><a id="d22181e4609" class="indexterm-anchor"></a><a id="d22181e4613" class="indexterm-anchor"></a>Distinguished names of the database servers in a registration request</p>
</td>
<td class="cellalignment6246" headers="d22181e4607 d22181e4326">
<p><code class="codeph">OCIServerDNs</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4607 d22181e4329">
<p><a id="d22181e4622" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_SRVDN</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4627" headers="d22181e4323">
<p>Complex object descriptor<a id="d22181e4630" class="indexterm-anchor"></a><a id="d22181e4634" class="indexterm-anchor"></a></p>
</td>
<td class="cellalignment6246" headers="d22181e4627 d22181e4326">
<p><code class="codeph">OCIComplexObjectComp</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4627 d22181e4329">
<p><a id="d22181e4642" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_COMPLEXOBJECTCOMP</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4647" headers="d22181e4323">
<p><a id="d22181e4649" class="indexterm-anchor"></a><a id="d22181e4655" class="indexterm-anchor"></a>Advanced queuing enqueue options</p>
</td>
<td class="cellalignment6246" headers="d22181e4647 d22181e4326">
<p><code class="codeph">OCIAQEnqOptions</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4647 d22181e4329">
<p><a id="d22181e4666" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_AQENQ_OPTIONS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4671" headers="d22181e4323">
<p><a id="d22181e4673" class="indexterm-anchor"></a><a id="d22181e4679" class="indexterm-anchor"></a>Advanced queuing dequeue options</p>
</td>
<td class="cellalignment6246" headers="d22181e4671 d22181e4326">
<p><code class="codeph">OCIAQDeqOptions</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4671 d22181e4329">
<p><a id="d22181e4690" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_AQDEQ_OPTIONS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4695" headers="d22181e4323">
<p><a id="d22181e4697" class="indexterm-anchor"></a><a id="d22181e4703" class="indexterm-anchor"></a>Advanced queuing message properties</p>
</td>
<td class="cellalignment6246" headers="d22181e4695 d22181e4326">
<p><code class="codeph">OCIAQMsgProperties</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4695 d22181e4329">
<p><a id="d22181e4714" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_AQMSG_PROPERTIES</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4719" headers="d22181e4323">
<p><a id="d22181e4721" class="indexterm-anchor"></a><a id="d22181e4727" class="indexterm-anchor"></a>Advanced queuing agent</p>
</td>
<td class="cellalignment6246" headers="d22181e4719 d22181e4326">
<p><code class="codeph">OCIAQAgent</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4719 d22181e4329">
<p><a id="d22181e4738" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_AQAGENT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4743" headers="d22181e4323">
<p><a id="d22181e4745" class="indexterm-anchor"></a><a id="d22181e4751" class="indexterm-anchor"></a>Advanced queuing notification</p>
</td>
<td class="cellalignment6246" headers="d22181e4743 d22181e4326">
<p><code class="codeph">OCIAQNotify</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4743 d22181e4329">
<p><a id="d22181e4762" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_AQNFY</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4767" headers="d22181e4323">
<p><a id="d22181e4769" class="indexterm-anchor"></a><a id="d22181e4775" class="indexterm-anchor"></a>Advanced queuing listen options</p>
</td>
<td class="cellalignment6246" headers="d22181e4767 d22181e4326">
<p><code class="codeph">OCIAQListenOpts</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4767 d22181e4329">
<p><code class="codeph">OCI_DTYPE_AQLIS_OPTIONS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4789" headers="d22181e4323">
<p><a id="d22181e4791" class="indexterm-anchor"></a><a id="d22181e4797" class="indexterm-anchor"></a>Advanced queuing message properties</p>
</td>
<td class="cellalignment6246" headers="d22181e4789 d22181e4326">
<p><code class="codeph">OCIAQLisMsgProps</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4789 d22181e4329">
<p><code class="codeph">OCI_DTYPE_AQLIS_MSG_PROPERTIES</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4812" headers="d22181e4323">
<p><a id="d22181e4814" class="indexterm-anchor"></a><a id="d22181e4818" class="indexterm-anchor"></a>Change notification</p>
</td>
<td class="cellalignment6246" headers="d22181e4812 d22181e4326">
<p>None</p>
</td>
<td class="cellalignment6244" headers="d22181e4812 d22181e4329">
<p><a id="d22181e4826" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_CHDES</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4831" headers="d22181e4323">
<p><a id="d22181e4833" class="indexterm-anchor"></a><a id="d22181e4837" class="indexterm-anchor"></a>Table change</p>
</td>
<td class="cellalignment6246" headers="d22181e4831 d22181e4326">
<p>None</p>
</td>
<td class="cellalignment6244" headers="d22181e4831 d22181e4329">
<p><code class="codeph">OCI_DTYPE_TABLE_CHDES</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4848" headers="d22181e4323">
<p><a id="d22181e4850" class="indexterm-anchor"></a><a id="d22181e4854" class="indexterm-anchor"></a>Row change</p>
</td>
<td class="cellalignment6246" headers="d22181e4848 d22181e4326">
<p>None</p>
</td>
<td class="cellalignment6244" headers="d22181e4848 d22181e4329">
<p><code class="codeph">OCI_DTYPE_ROW_CHDES</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6244" id="d22181e4865" headers="d22181e4323">
<p><a id="d22181e4867" class="indexterm-anchor"></a><a id="d22181e4871" class="indexterm-anchor"></a>Shard key and shard group key descriptor</p>
</td>
<td class="cellalignment6246" headers="d22181e4865 d22181e4326">
<p><code class="codeph">OCIShardkey</code></p>
</td>
<td class="cellalignment6244" headers="d22181e4865 d22181e4329">
<p><a id="d22181e4880" class="indexterm-anchor"></a><code class="codeph">OCI_DTYPE_SHARD_KEY</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<div class="infobox-note" id="GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C__GUID-2985DA49-AAA8-4B15-95E6-AE9A834AE60B">
<p class="notep1">Note:</p>
<p>Although there is a single C type for <code class="codeph">OCILobLocator</code>, this locator is allocated with a different OCI type constant for internal and external LOBs. <a href="oci02bas.htm#GUID-47F2594A-C4EA-4B2B-B564-EFD1F9691D58" title="A large object (LOB) is an Oracle data type that can hold binary large object (BLOB) or character large object (CLOB) data.">LOB and BFILE Locators</a> discusses this difference.</p>
</div>
<p>The following list describes the main purpose of each descriptor type. The sections that follow describe each descriptor type in more detail:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCISnapshot</code> - Used in statement execution</p>
</li>
<li>
<p><code class="codeph">OCILobLocator</code> - Used for LOB (<code class="codeph">OCI_DTYPE_LOB</code>) or <code class="codeph">BFILE</code> (<code class="codeph">OCI_DTYPE_FILE</code>) calls</p>
</li>
<li>
<p><code class="codeph">OCIParam</code> - Used in describe calls</p>
</li>
<li>
<p><code class="codeph">OCIRowid</code> - Used for binding or defining <code class="codeph">ROWID</code> values</p>
</li>
<li>
<p><code class="codeph">OCIDateTime</code> and <code class="codeph">OCIInterval</code> - Used for datetime and interval data types</p>
</li>
<li>
<p><code class="codeph">OCIComplexObjectComp</code> - Used for complex object retrieval</p>
</li>
<li>
<p><code class="codeph">OCIAQEnqOptions</code>, <code class="codeph">OCIAQDeqOptions</code>, <code class="codeph">OCIAQMsgProperties</code>, <code class="codeph">OCIAQAgent</code> - Used for Advanced Queuing</p>
</li>
<li>
<p><code class="codeph">OCIAQNotify</code> - Used for publish-subscribe notification</p>
</li>
<li>
<p><code class="codeph">OCIServerDNs</code> - Used for LDAP-based publish-subscribe notification</p>
</li>
</ul>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-F07DAAEB-04C7-493D-A758-D5B0D489C0CD" title="The snapshot descriptor is an optional parameter to the execute call, OCIStmtExecute().">Snapshot Descriptor</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-47F2594A-C4EA-4B2B-B564-EFD1F9691D58" title="A large object (LOB) is an Oracle data type that can hold binary large object (BLOB) or character large object (CLOB) data.">LOB and BFILE Locators</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-A425D636-6972-455F-A9E9-75CC82740328" title="OCI applications use parameter descriptors to obtain information about select-list columns or schema objects.">Parameter Descriptor</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-A33DC882-3CD2-45A5-888E-080EC1A755DF">ROWID Descriptor</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-067D34CE-A52C-47E3-8AF5-B140E85121AF" title="The date, datetime, and interval descriptors are used by applications that use the date, datetime, or interval data types (OCIDate, OCIDateTime, and OCIInterval).">Date, Datetime, and Interval Descriptors</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-36DDADE1-C692-4F83-823F-163897C0E221" title="Complex object retrieval (COR) may improve application performance when dealing with objects.">Complex Object Descriptor</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-907B8692-16A7-4DF0-90B7-723AC44B9A52" title="There are a number of Oracle Streams Advanced Queuing descriptors for use to maintain data-specific information.">Advanced Queuing Descriptors</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-394C2CED-C264-4F81-BD97-CCF9F149CC4C">User Memory Allocation</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></li>
<li><a href="oci16rel002.htm#GUID-A32BF051-3DC1-491C-AAFD-A46034DD1629">OCIDescriptorFree()</a></li>
<li><a href="oci16rel002.htm#GUID-8218D5F2-139B-4FA9-BA4A-ED0126687C0F">OCIArrayDescriptorAlloc()</a></li>
</ul>
</div>
</div>
<a id="LNOCI16200"></a>
<div class="props_rev_3"><a id="GUID-F07DAAEB-04C7-493D-A758-D5B0D489C0CD"></a>
<h5 id="LNOCI-GUID-F07DAAEB-04C7-493D-A758-D5B0D489C0CD" class="sect5">Snapshot Descriptor</h5>
<div>
<p>The <span class="italic">snapshot descriptor</span> is an optional parameter to the execute call, <code class="codeph">OCIStmtExecute()</code>.</p>
<p>The snapshot descriptor indicates that a query is being executed against a database snapshot that represents the state of a database at a particular time.</p>
<p>Allocate a snapshot descriptor with a call to <code class="codeph">OCIDescriptorAlloc()</code> by passing <code class="codeph">OCI_DTYPE_SNAP</code> as the <code class="codeph">type</code> parameter.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci17msc001.htm#GUID-98B26708-3E02-45C0-8258-5D5544F32BE9">OCIStmtExecute()</a></li>
<li><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></li>
<li><a href="oci04sql.htm#GUID-A4D09C66-C273-46C3-9EC8-0BCFBE4E61CF">Execution Snapshots</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16201"></a>
<div class="props_rev_3"><a id="GUID-47F2594A-C4EA-4B2B-B564-EFD1F9691D58"></a>
<h5 id="LNOCI-GUID-47F2594A-C4EA-4B2B-B564-EFD1F9691D58" class="sect5">LOB and BFILE Locators</h5>
<div>
<p>A large object (LOB) is an Oracle data type that can hold binary large object (<code class="codeph">BLOB</code>) or character large object (<code class="codeph">CLOB</code>) data.</p>
<p>In the database, an opaque data structure called a <span class="italic">LOB locator</span> is stored in a LOB column of a database row, or in the place of a LOB attribute of an object. The locator serves as a pointer to the actual LOB value, which is stored in a separate location.</p>
<div class="infobox-note" id="GUID-47F2594A-C4EA-4B2B-B564-EFD1F9691D58__GUID-5B69D96F-162E-4A8F-9491-9410A92010B7">
<p class="notep1">Note:</p>
<p>Depending on your application, you may or may not want to use LOB locators. You can use the data interface for LOBs, which does not require LOB locators. In this interface, you can bind or define character data for <code class="codeph">CLOB</code> columns or <code class="codeph">RAW</code> data for <code class="codeph">BLOB</code> columns.</p>
</div>
<p>The OCI LOB locator is used to perform OCI operations against a LOB (<code class="codeph">BLOB</code> or <code class="codeph">CLOB</code>) or FILE (<code class="codeph">BFILE</code>). <code class="codeph">OCILobXXX</code> functions take a LOB locator parameter instead of the LOB value. OCI LOB functions do not use actual LOB data as parameters. They use the LOB locators as parameters and operate on the LOB data referenced by them.</p>
<p>The LOB locator is allocated with a call to <code class="codeph">OCIDescriptorAlloc()</code> by passing <code class="codeph">OCI_DTYPE_LOB</code> as the <code class="codeph">type</code> parameter for <code class="codeph">BLOB</code>s or <code class="codeph">CLOB</code>s, and <code class="codeph">OCI_DTYPE_FILE</code> for <code class="codeph">BFILE</code>s.</p>
<div class="infobox-note" id="GUID-47F2594A-C4EA-4B2B-B564-EFD1F9691D58__GUID-4C0517A5-1346-420D-B9BF-763FD081E71A">
<p class="notep1">Note:</p>
<p>The two LOB locator types are <span class="italic">not</span> interchangeable. When binding or defining a <code class="codeph">BLOB</code> or <code class="codeph">CLOB</code>, the application must take care that the locator is properly allocated by using <code class="codeph">OCI_DTYPE_LOB</code>. Similarly, when binding or defining a <code class="codeph">BFILE</code>, the application must be sure to allocate the locator using <code class="codeph">OCI_DTYPE_FILE</code>.</p>
</div>
<p>An OCI application can retrieve a LOB locator from the Oracle database by issuing a SQL statement containing a LOB column or attribute as an element in the select list. In this case, the application would first allocate the LOB locator and then use it to define an output variable. Similarly, a LOB locator can be used as part of a bind operation to create an association between a LOB and a placeholder in a SQL statement.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci07lob.htm#GUID-0A094518-F97C-40BE-A336-259AA82BD0A2" title="This chapter describes LOB and BFILE operations.">LOB and BFILE Operations</a></li>
<li><a href="oci05bnd.htm#GUID-D757C946-BCDA-4A32-867B-BE951BA9BBF4" title="Oracle Database allows nonzero binds for INSERTs and UPDATEs of any size LOB.">About Binding LOB Data</a></li>
<li><a href="oci05bnd.htm#GUID-FE7DB3D8-9310-41ED-8869-B5106E60D29E">About Defining LOB Data</a></li>
<li><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16202"></a>
<div class="props_rev_3"><a id="GUID-A425D636-6972-455F-A9E9-75CC82740328"></a>
<h5 id="LNOCI-GUID-A425D636-6972-455F-A9E9-75CC82740328" class="sect5">Parameter Descriptor</h5>
<div>
<p>OCI applications use <span class="italic">parameter descriptors</span> to obtain information about select-list columns or schema objects.</p>
<p>This information is obtained through a describe operation.</p>
<p>The parameter descriptor is the only descriptor type that is <span class="italic">not</span> allocated using <code class="codeph">OCIDescriptorAlloc()</code>. You can obtain it only as an attribute of a describe handle, statement handle, or through a complex object retrieval handle by specifying the position of the parameter using an <code class="codeph">OCIParamGet()</code> call.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></li>
<li><a href="oci16rel002.htm#GUID-35D2FF91-139B-4A5C-97C8-8BC29866CCA4">OCIParamGet()</a></li>
<li><a href="oci04sql.htm#GUID-DDB109DD-52EB-4AA8-A69A-34015F8D5D6E" title="If your OCI application is processing a query, you may need to obtain more information about the items in the select list.">About Describing Select-List Items</a></li>
<li><a href="oci06des.htm#GUID-CED0D15A-D873-43F7-A5B2-51FC0662C250" title="Performs an explicit describe of schema objects and their subschema objects.The OCIDescribeAny() call limits information returned to the basic information and stops expanding a node if it amounts to another describe operation.What to be aware of when performing describe operations.The OCI_ATTR_TYPECODE attribute returns typecodes that represent the types supplied by the user when a new type is created using the CREATE TYPE statement.To describe type objects, it is necessary to initialize the OCI process in object mode.The column attribute OCI_ATTR_PRECISION can be returned using an implicit describe with OCIStmtExecute() and an explicit describe with OCIDescribeAny().This section describes the attributes and handles that belong to different parameters.Lists and describes the type-specific attributes when a parameter is for a procedure or function.Lists and describes the attributes when a parameter is for a package.Lists and describes the attributes when a parameter is for a type. Lists and describes the attributes when a parameter is for an attribute of a type.Lists and dsescribes the attributes when a parameter is for a method of a type.Lists and describes the attributes when a parameter is for a collection type.Lists and describes the attributes when a parameter is for a synonym.Lists and describes the attributes when a parameter is for a sequence.Lists and describes the attributes when a parameter is for an argument of a procedure or function.Lists and describes the attributes when the parameter is for a list of columns, arguments, and subprograms, or fields of a package record type.Lists and describes the attributes when a parameter is for a schema type.Lists and describes the attributes when a parameter is for a database type.Lists and describes the attributes when a parameter is for a rule.Lists and describes the attributes when a parameter is for a rule set.Lists and describes the attributes when a parameter is for an evaluation context.Lists and describes the attributes when a parameter is for a table alias.Lists and describes the attributes when a parameter is for a variable.Lists and describes the attributes when a parameter is for a name-value pair.Query and column information are supported with character-length semantics.Explicit describes of tables have three attributes: OCI_ATTR_DATA_SIZE, OCI_ATTR_CHAR_SIZE, and OCI_ATTR_CHAR_USED.Character-length semantics depends on the release of the server or client. It is best described when both server and client are Oracle9i or later. Otherwise, compatibility issues as described result.The following examples demonstrate the use of OCIDescribeAny() for describing different types of schema objects.Shows a loop that retrieves the column names and data types corresponding to a query following query execution.Illustrates the use of invisible column properties and checking each column to determine if it is an invisible column.">Describing Schema Metadata</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16203"></a>
<div class="props_rev_3"><a id="GUID-A33DC882-3CD2-45A5-888E-080EC1A755DF"></a>
<h5 id="LNOCI-GUID-A33DC882-3CD2-45A5-888E-080EC1A755DF" class="sect5">ROWID Descriptor</h5>
<div>
<p>The <code class="codeph">ROWID</code> descriptor, <code class="codeph">OCIRowid</code>, is used by applications that must retrieve and use Oracle ROWIDs. To work with a <code class="codeph">ROWID</code> an application can define a <code class="codeph">ROWID</code> descriptor for a rowid position in a SQL select list, and retrieve a <code class="codeph">ROWID</code> into the descriptor. This same descriptor can later be bound to an input variable in an <code class="codeph">INSERT</code> statement or <code class="codeph">WHERE</code> clause.</p>
<p><code class="codeph">ROWID</code>s are also redirected into descriptors using <a href="oci16rel002.htm#GUID-FA199A99-4D7A-42C2-BB0A-C20047B95DF9" title="Gets the value of an attribute of a handle.">OCIAttrGet()</a> on the statement handle following an execute operation.</p>
</div>
</div>
<a id="LNOCI16204"></a>
<div class="props_rev_3"><a id="GUID-067D34CE-A52C-47E3-8AF5-B140E85121AF"></a>
<h5 id="LNOCI-GUID-067D34CE-A52C-47E3-8AF5-B140E85121AF" class="sect5">Date, Datetime, and Interval Descriptors</h5>
<div>
<p>The date, datetime, and interval descriptors are used by applications that use the date, datetime, or interval data types (<code class="codeph">OCIDate</code>, <code class="codeph">OCIDateTime</code>, and <code class="codeph">OCIInterval</code>).</p>
<p>These descriptors can be used for binding and defining, and are passed as parameters to the functions <code class="codeph">OCIDescriptorAlloc()</code> and <code class="codeph">OCIDescriptorFree()</code> to allocate and free memory.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></li>
<li><a href="oci16rel002.htm#GUID-A32BF051-3DC1-491C-AAFD-A46034DD1629">OCIDescriptorFree()</a></li>
<li><a href="oci03typ.htm#GUID-027FB2E2-593C-43F1-9184-DFEF7A984A27" title="This chapter provides a reference to Oracle external data types used by OCI applications.">Data Types</a></li>
<li><a href="oci19map.htm#GUID-B94C677C-E38D-4231-BF8C-DCDC203BAEF5">OCI Data Type Mapping and Manipulation Functions</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16205"></a>
<div class="props_rev_3"><a id="GUID-36DDADE1-C692-4F83-823F-163897C0E221"></a>
<h5 id="LNOCI-GUID-36DDADE1-C692-4F83-823F-163897C0E221" class="sect5">Complex Object Descriptor</h5>
<div>
<p>Complex object retrieval (COR) may improve application performance when dealing with objects.</p>
<p>Application performance when dealing with objects may be increased using <span class="italic">complex object retrieval (COR)</span>.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci11obj.htm#GUID-03683C87-7758-421A-BC51-C54A5A7679F2" title="A complex object includes its root object and its set of logically related objects each of which are prefetched based on a given depth level.">Complex Object Retrieval</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16206"></a>
<div class="props_rev_3"><a id="GUID-907B8692-16A7-4DF0-90B7-723AC44B9A52"></a>
<h5 id="LNOCI-GUID-907B8692-16A7-4DF0-90B7-723AC44B9A52" class="sect5">Advanced Queuing Descriptors</h5>
<div>
<p>There are a number of Oracle Streams Advanced Queuing descriptors for use to maintain data-specific information.</p>
<p>Oracle Streams Advanced Queuing provides message queuing as an integrated part of Oracle Database.</p>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci09adv.htm#GUID-FF4165B2-A44C-4F76-AC26-DA860F340CA8" title="OCI provides an interface to the Streams Advanced Queuing (Streams AQ) feature. Streams AQ provides message queuing as an integrated part of Oracle Database.">OCI and Streams Advanced Queuing</a></li>
<li><a href="oci09adv.htm#GUID-1E9445D7-DFD9-4230-BFFD-EF3630691ECE" title="You can register directly to the database or register using Lightweight Directory Access Protocol (LDAP).">Publish-Subscribe Registration Functions in OCI</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16207"></a>
<div class="props_rev_3"><a id="GUID-394C2CED-C264-4F81-BD97-CCF9F149CC4C"></a>
<h5 id="LNOCI-GUID-394C2CED-C264-4F81-BD97-CCF9F149CC4C" class="sect5">User Memory Allocation</h5>
<div>
<p>The <a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a> call has an <code class="codeph">xtramem_sz</code> parameter in its parameter list. This parameter is used to specify the amount of user memory that should be allocated along with a descriptor or locator.</p>
<p>Typically, an application uses this parameter to allocate an application-defined structure that has the same lifetime as the descriptor or locator. This structure can be used for application <span class="italic">bookkeeping</span> or storing context information.</p>
<p>Using the <code class="codeph">xtramem_sz</code> parameter means that the application does not need to explicitly allocate and deallocate memory as each descriptor or locator is allocated and deallocated. The memory is allocated along with the descriptor or locator, and freeing the descriptor or locator (with <a href="oci16rel002.htm#GUID-A32BF051-3DC1-491C-AAFD-A46034DD1629">OCIDescriptorFree()</a>) frees the user&#39;s data structures as well.</p>
<p>The <a href="oci16rel002.htm#GUID-C5BF55F7-A110-4CB5-9663-5056590F12B5" title="Returns a pointer to an allocated and initialized handle.">OCIHandleAlloc()</a> call has a similar parameter for allocating user memory that has the same lifetime as the handle.</p>
<p>The <a href="oci16rel001.htm#GUID-16BDA1F1-7DAF-41CA-9EE1-C9A4CB467244" title="Creates and initializes an environment handle for OCI functions to work under.">OCIEnvCreate()</a> and (<a href="ociaedep001.htm#GUID-1AC89920-7DB1-46AC-BBAA-9854DDAD6AB7" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCIEnvInit()</a> deprecated) calls have a similar parameter for allocating user memory that has the same lifetime as the environment handle.</p>
</div>
</div>
</div>
</div>
</div>
<a id="LNOCI16208"></a>
<div class="props_rev_3"><a id="GUID-BD1CD486-6EA8-4C23-828F-DD1115317E5B"></a>
<h2 id="LNOCI-GUID-BD1CD486-6EA8-4C23-828F-DD1115317E5B" class="sect2">OCI Programming Steps</h2>
<div>
<p>The following sections describe in detail each of the steps in developing an OCI application.</p>
<p>Some of the steps are optional. For example, you do not need to describe or define select-list items if the statement is not a query. Application-specific processing also occurs in between any and all of the OCI function steps.</p>
<p>The following sections describe the steps that are required of an OCI application:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-BA2B78A2-A855-4116-8ADC-13BFA1ADEAB3" title="This section describes how to initialize the OCI environment, establish a connection to a server, and authorize a user to perform actions against the database.">OCI Environment Initialization</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-A139C136-0AA7-4568-94D4-B042AEFAB6D1" title="What are the specific steps involved in processing SQL statements in OCI.">About Processing SQL Statements in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-9D7C87CC-47F1-49BB-86D6-DF6490A99AA0" title="An application commits changes to the database by calling OCITransCommit().">Commit or Roll Back Operations</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-046BE629-DEC6-4608-885C-7B922DC825C3" title="What should an application do before it terminates.">About Terminating the Application</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-39339E95-A79E-43BD-B57E-4DB536CB3475" title="OCI function calls have a set of return codes.">Error Handling in OCI</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-BD1CD486-6EA8-4C23-828F-DD1115317E5B__GUID-AEDFFD27-0D2D-4A78-A79B-71F167EC2599">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p>The first sample program in <a href="ociabdem.htm#GUID-75E18629-0C54-4495-A747-AFB346034F26" title="Lists example programs with sample code demonstrating the allocation and use of OCI handles.">OCI Demonstration Programs</a> for an example showing the use of OCI calls for processing SQL statements.</p>
</li>
<li>
<p><a href="oci05bnd.htm#GUID-6C5EA0C6-0C1D-4CD5-B47F-1B95B4E9C558" title="You can use OCI to perform piecewise inserts, updates, and fetches of data.">Runtime Data Allocation and Piecewise Operations in OCI</a> for a detailed description of the special case of dynamically providing data at run time</p>
</li>
<li>
<p><a href="oci05bnd.htm#GUID-094F4767-1BE0-45AE-BA6C-3B114714F87A" title="Defining arrays of structures requires an initial call to OCIDefineByPos() or OCIDefineByPos2().">About Binding and Defining Arrays of Structures in OCI</a> for a description of the special considerations for operations involving arrays of structures</p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-39339E95-A79E-43BD-B57E-4DB536CB3475" title="OCI function calls have a set of return codes.">Error Handling in OCI</a> for an outline of the steps involved in processing a SQL statement within an OCI program</p>
</li>
<li>
<p><a href="oci08sca.htm#GUID-FB0528A0-460A-4778-9703-52BB0932E911" title="Threads are lightweight processes that exist within a larger process.">Overview of OCI Multithreaded Development</a> for information about using the OCI to write multithreaded applications</p>
</li>
<li>
<p><a href="oci01int.htm#GUID-0938E7F8-63F4-4D27-B86C-C27E8E6099F2" title="One of the main tasks of an OCI application is to process SQL statements.">SQL Statements</a> for more information about types of SQL statements</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16209"></a>
<div class="props_rev_3"><a id="GUID-BA2B78A2-A855-4116-8ADC-13BFA1ADEAB3"></a>
<h3 id="LNOCI-GUID-BA2B78A2-A855-4116-8ADC-13BFA1ADEAB3" class="sect3">OCI Environment Initialization</h3>
<div>
<p>This section describes how to initialize the OCI environment, establish a connection to a server, and authorize a user to perform actions against the database.</p>
<p>First, the three main steps in initializing the OCI environment are described in the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-083E4689-0B45-4120-9FBD-3E5FE6BB1589" title="Each OCI function call is executed in the context of an environment that is created with the OCIEnvCreate() call.">About Creating the OCI Environment</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-7A2B16D3-B937-4D32-9F87-46198629A2D3">About Allocating Handles and Descriptors</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-A4B693E9-7554-4721-A7F7-0B5B15589DEE" title="An application must call OCIEnvNlsCreate() to initialize the OCI environment handle. Existing applications may have used OCIEnvCreate().">Application Initialization, Connection, and Session Creation</a></p>
</li>
</ul>
</div>
<a id="LNOCI16210"></a>
<div class="props_rev_3"><a id="GUID-083E4689-0B45-4120-9FBD-3E5FE6BB1589"></a>
<h4 id="LNOCI-GUID-083E4689-0B45-4120-9FBD-3E5FE6BB1589" class="sect4">About Creating the OCI Environment</h4>
<div>
<p>Each OCI function call is executed in the context of an environment that is created with the <code class="codeph">OCIEnvCreate()</code> call.</p>
<p>The <code class="codeph">OCIEnvCreate()</code> call must be invoked before any other OCI call is executed. The only exception is the setting of a process-level attribute for the OCI shared mode.</p>
<p>The <code class="codeph">mode</code> parameter of <code class="codeph">OCIEnvCreate()</code> specifies whether the application calling the OCI library functions can:</p>
<ul style="list-style-type: disc;">
<li>
<p>Run in a threaded environment (<code class="codeph">mode</code> = <code class="codeph">OCI_THREADED</code>).</p>
</li>
<li>
<p>Use objects (<code class="codeph">mode</code> = <code class="codeph">OCI_OBJECT</code>). Use with AQ subscription registration.</p>
</li>
<li>
<p>Use subscriptions (<code class="codeph">mode</code> = <code class="codeph">OCI_EVENTS</code>).</p>
</li>
</ul>
<p>The mode can be set independently in each environment.</p>
<p>It is necessary to initialize in object mode if the application binds and defines objects, or if it uses the OCI&#39;s object navigation calls. The program may also choose to use none of these features (<code class="codeph">mode</code> = <code class="codeph">OCI_DEFAULT</code>) or some combination of them, separating the options with a vertical bar. For example if <code class="codeph">mode</code> = (<code class="codeph">OCI_THREADED</code> | <code class="codeph">OCI_OBJECT</code>), then the application runs in a threaded environment and uses objects.</p>
<p>You can specify user-defined memory management functions for each OCI environment.</p>
<div class="infoboxnotealso" id="GUID-083E4689-0B45-4120-9FBD-3E5FE6BB1589__GUID-AA28342A-0EE0-4C5A-8815-7C8055FD27DE">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci16rel001.htm#GUID-16BDA1F1-7DAF-41CA-9EE1-C9A4CB467244" title="Creates and initializes an environment handle for OCI functions to work under.">OCIEnvCreate()</a>, <a href="oci16rel001.htm#GUID-0B6911A9-4B46-476C-BC5E-B87581666CD9" title="Creates and initializes an environment handle for OCI functions to work under.">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#GUID-F50356A8-450D-4A96-8AB5-5726502766B2" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCIInitialize()</a> (deprecated) for more information about the initialization calls</p>
</li>
<li>
<p><a href="oci08sca.htm#GUID-FB0528A0-460A-4778-9703-52BB0932E911" title="Threads are lightweight processes that exist within a larger process.">Overview of OCI Multithreaded Development</a></p>
</li>
<li>
<p><a href="oci11obj.htm#GUID-8A9E9784-9D10-40B1-ADE9-4CE9325255E5" title="This chapter introduces the OCI facility for working with objects in an Oracle database. It also discusses the object navigational function calls of OCI.">OCI Object-Relational Programming</a>, <a href="oci12oty.htm#GUID-C62AEE74-0CC5-4FAB-A91F-997F71C49C2C" title="This chapter describes the purpose and structure of each of the data types that can be manipulated by the OCI data type mapping and manipulation functions.">Object-Relational Data Types in OCI</a>, <a href="oci13obn.htm#GUID-596F5F9B-47A1-48DB-8702-FEED7BE038B9" title="The direct path loading functions are used to load data from external files into tables and partitions.">Direct Path Load Interface</a>, <a href="oci14oca.htm#GUID-B2FBDC75-64BD-4E7E-A713-5095A827EA9C" title="This chapter introduces the OCI facility for working with objects in an Oracle Database.">Object Advanced Topics in OCI</a>, and <a href="oci15ott.htm#GUID-3D22CA8E-BE01-492F-BA85-DDD0CD3F4890" title="This chapter discusses the Object Type Translator (OTT), which is used to map database object types and named collection types to C structs for use in OCI applications.">Using the Object Type Translator with OCI</a></p>
</li>
<li>
<p><a href="oci09adv.htm#GUID-9CE58707-FC18-492E-8AA9-5314041BCEE4" title="The publish-subscribe notification feature allows an OCI application to receive client notifications directly, register an email address to which notifications can be sent, register an HTTP URL to which notifications can be posted, or register a PL/SQL procedure to be invoked on a notification.">Publish-Subscribe Notification in OCI</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16211"></a>
<div class="props_rev_3"><a id="GUID-7A2B16D3-B937-4D32-9F87-46198629A2D3"></a>
<h4 id="LNOCI-GUID-7A2B16D3-B937-4D32-9F87-46198629A2D3" class="sect4">About Allocating Handles and Descriptors</h4>
<div>
<p>Oracle Database provides OCI functions to allocate and deallocate handles and descriptors. You must allocate handles using <a href="oci16rel002.htm#GUID-C5BF55F7-A110-4CB5-9663-5056590F12B5" title="Returns a pointer to an allocated and initialized handle.">OCIHandleAlloc()</a> before passing them into an OCI call, unless the OCI call, such as <a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a>, allocates the handles for you.</p>
<p>You can allocate the types of handles listed in <a href="oci02bas.htm#GUID-5F13B2EC-E29C-4710-8AD7-E97E6C28085E__G466063" title="This table has 3 columns. Column 1 is the handle type description, column 2 is the C data type, and column 3 is the handle type constant.">Table 2-1</a> with <code class="codeph">OCIHandleAlloc()</code> Depending on the functionality of your application, it must allocate some or all of these handles.</p>
</div>
</div>
<a id="LNOCI16212"></a>
<div class="props_rev_3"><a id="GUID-A4B693E9-7554-4721-A7F7-0B5B15589DEE"></a>
<h4 id="LNOCI-GUID-A4B693E9-7554-4721-A7F7-0B5B15589DEE" class="sect4">Application Initialization, Connection, and Session Creation</h4>
<div>
<p>An application must call <code class="codeph">OCIEnvNlsCreate()</code> to initialize the OCI environment handle. Existing applications may have used <code class="codeph">OCIEnvCreate()</code>.</p>
<p>Following this step, the application has several options for establishing an Oracle database connection and beginning a user session.</p>
<p>These methods include:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-0BAFD661-8271-4D64-9501-31BE1ABD6796" title="The single user, single connection option is the simplified logon method, which can be used if an application maintains only a single user session for each database connection at any time.">Single User, Single Connection</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC">Client Access Through a Proxy</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-065FF1E3-FF87-4507-A72A-7D089D897B14" title="The nonproxy multiple sessions or connections option uses explicit attach and begin-session calls to maintain multiple user sessions and connections on a database connection.">Nonproxy Multiple Sessions or Connections</a></p>
</li>
</ul>
<div class="infobox-note" id="GUID-A4B693E9-7554-4721-A7F7-0B5B15589DEE__GUID-D959FDB4-15EF-49D9-8331-98D64DFCCA3E">
<p class="notep1">Note:</p>
<p><code class="codeph">OCIEnvCreate()</code> or <code class="codeph">OCIEnvNlsCreate()</code> should be used instead of the <code class="codeph">OCIInitialize()</code> and <code class="codeph">OCIEnvInit()</code> calls. <code class="codeph">OCIInitialize()</code> and <code class="codeph">OCIEnvInit()</code> calls are supported for backward compatibility.</p>
</div>
</div>
<a id="LNOCI72577"></a><a id="LNOCI16213"></a>
<div class="props_rev_3"><a id="GUID-0BAFD661-8271-4D64-9501-31BE1ABD6796"></a>
<h5 id="LNOCI-GUID-0BAFD661-8271-4D64-9501-31BE1ABD6796" class="sect5">Single User, Single Connection</h5>
<div>
<p>The single user, single connection option is the simplified logon method, which can be used if an application maintains only a single user session for each database connection at any time.</p>
<p>When an application calls <code class="codeph">OCILogon2()</code> or <code class="codeph">OCILogon()</code>, the OCI library initializes the service context handle that is passed to it, and creates a connection to the specified Oracle database for the user making the request.</p>
<p><a href="oci02bas.htm#GUID-0BAFD661-8271-4D64-9501-31BE1ABD6796__CIHBFIIG">Example 2-3</a> shows what a call to <code class="codeph">OCILogon2()</code> looks like for a single user session with user name <code class="codeph">hr</code>, password <code class="codeph">hr</code>, and database <code class="codeph">oracledb</code>.</p>
<p>The parameters to this call include the service context handle (which has been initialized), the user name, the user&#39;s password, and the name of the database that are used to establish the connection. With the last parameter, <code class="codeph">mode</code>, set to <code class="codeph">OCI_DEFAULT</code>, this call has the same effect as calling the older <code class="codeph">OCILogon()</code>. Use <code class="codeph">OCILogon2()</code> for any new applications. The server and user session handles are implicitly allocated by this function.</p>
<p>If an application uses this logon method, the service context, server, and user session handles are all read-only; the application cannot switch session or transaction by changing the appropriate attributes of the service context handle using an <code class="codeph">OCIAttrSet()</code> call.</p>
<p>An application that initializes its session and authorization using <code class="codeph">OCILogon2()</code> must terminate them using <code class="codeph">OCILogoff()</code>.</p>
<div class="infobox-note" id="GUID-0BAFD661-8271-4D64-9501-31BE1ABD6796__GUID-CC13D12D-61F8-497B-AA8B-ECD8FB70DA0A">
<p class="notep1">Note:</p>
<p>For simplicity in demonstrating this feature, this example does not perform the password management techniques that a deployed system normally uses. In a production environment, follow the Oracle Database password management guidelines, and disable any sample accounts. See <a class="olink DBSEG10005" target="_blank" href="../DBSEG/guidelines.htm#DBSEG10005"><span><cite>Oracle Database Security Guide</cite></span></a> for password management guidelines and other security recommendations.</p>
</div>
<div class="example" id="GUID-0BAFD661-8271-4D64-9501-31BE1ABD6796__CIHBFIIG">
<p class="titleinexample">Example 2-3 Using the OCILogon2 Call for a Single User Session</p>
<pre dir="ltr">OCILogon2(envhp, errhp, &amp;svchp, (text *)&#34;hr&#34;, (ub4)strlen(&#34;hr&#34;), (text *)&#34;hr&#34;,
          (ub4)strlen(&#34;hr&#34;), (text *)&#34;oracledb&#34;, (ub4)strlen(&#34;oracledb&#34;),
          OCI_DEFAULT);
</pre></div>
<!-- class="example" -->
<div class="section">
<p class="subhead3"></p>
<div class="infoboxnotealso" id="GUID-0BAFD661-8271-4D64-9501-31BE1ABD6796__GUID-FD912DD8-9C84-44FA-B6B7-A19581DC2C51">
<p class="notep1">See Also:</p>
<p><a href="oci02bas.htm#GUID-715E7F0A-E534-4929-939E-996FF27BAD17" title="Operating systems may provide facilities for spawning processes that allow child processes to reuse the state created by their parent process.">Operating System Considerations</a> for information regarding operating systems providing facilities for spawning processes that allow child processes to reuse state created by their parent process. This section explains why the child process must not use the same database connection as created by the parent.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72578"></a><a id="LNOCI72579"></a><a id="LNOCI72580"></a><a id="LNOCI72581"></a><a id="LNOCI72582"></a><a id="LNOCI72583"></a><a id="LNOCI72584"></a><a id="LNOCI72585"></a><a id="LNOCI13341"></a>
<div class="props_rev_3"><a id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC"></a>
<h5 id="LNOCI-GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC" class="sect5">Client Access Through a Proxy</h5>
<div>
<p>Proxy authentication is a process typically employed in an environment with a middle tier such as a firewall, in which the end user authenticates to the middle tier, which then authenticates to the database on the user&#39;s behalf&mdash;as its proxy. The middle tier logs in to the database as a proxy user. A proxy user can switch identities and, after logging in to the database, switch to the end user&#39;s identity. It can perform operations on the end user&#39;s behalf, using the authorization appropriate to that particular end user.</p>
<div class="infobox-note" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__GUID-14E60179-C4CD-46D6-9349-E85D45ADFE15">
<p class="notep1">Note:</p>
<p>In release 1 of Oracle 11<span class="italic">g</span>, standards for acceptable passwords were greatly raised to increase security. Examples of passwords in this section are incorrect. A password must contain no fewer than eight characters. See the guidelines for securing passwords<a class="olink DBSEG10005" target="_blank" href="../DBSEG/guidelines.htm#DBSEG10005"><span><cite>Oracle Database Security Guide</cite></span></a> for additional information.</p>
</div>
<p>Proxy to database users is supported by using OCI and the <code class="codeph">ALTER</code> <code class="codeph">USER</code> statement, whose BNF syntax is:</p>
<pre dir="ltr">ALTER USER &lt;<span class="italic">targetuser</span>&gt; GRANT CONNECT THROUGH &lt;proxy&gt; [AUTHENTICATION REQUIRED];
</pre>
<p>The <code class="codeph">ALTER</code> <code class="codeph">USER</code> statement is used once in an application. Connections can be made multiple times afterward. In OCI, you can either use connect strings or the function <a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03" title="Sets the value of an attribute of a handle or a descriptor.">OCIAttrSet()</a> with the parameter <code class="codeph">OCI_ATTR_PROXY_CLIENT</code>.</p>
<p>After a proxy switch is made, the current and connected user is the target user of the proxy. The identity of the original user is not used for any privilege calculations. The original user can be a local or external user.</p>
<p><a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGEIDA">Example 2-4</a> through <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHHBCID">Example 2-11</a> show connect strings that you can use in functions such as <a href="oci16rel001.htm#GUID-425D4B32-257C-480E-B69C-7112BE9482E6">OCILogon2()</a> (set <code class="codeph">mode</code> = <code class="codeph">OCI_DEFAULT</code>), <code class="codeph">OCILogon()</code>, <a href="oci16rel001.htm#GUID-31B1FDB3-056E-4AF9-9B89-8DA6AA156947">OCISessionBegin()</a> with <a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03" title="Sets the value of an attribute of a handle or a descriptor.">OCIAttrSet()</a> (pass the attribute <code class="codeph">OCI_ATTR_USERNAME</code> of the session handle), and so on.</p>
<p>In <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGEIDA">Example 2-4</a>, Dilbert and Joe are two local database users. To enable Dilbert to serve as a proxy for Joe, use the SQL statement shown in <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGEIDA">Example 2-4</a>.</p>
<p>When user name <code class="codeph">dilbert</code> is acting on behalf of <code class="codeph">joe</code>, use the connection string shown in <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGAGIJ">Example 2-5</a>. (The user name <code class="codeph">dilbert</code> has the password <code class="codeph">tiger123</code>).</p>
<p>The left and right brackets &#34;[&#34; and &#34;]&#34; are entered in the connection string.</p>
<p>In <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHIFFBF">Example 2-6</a>, &#34;Dilbert&#34; and &#34;Joe&#34; are two local database users. The names are case-sensitive and must be enclosed in double quotation marks. To enable &#34;Dilbert&#34; to serve as a proxy for &#34;Joe&#34;, use the SQL statement shown in <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHIFFBF">Example 2-6</a>.</p>
<p>When &#34;Dilbert&#34; is acting on behalf of &#34;Joe&#34;, use the connection string shown in <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHJDDAC">Example 2-7</a>. Be sure to include the double quotation marks (&#34;) characters.</p>
<p>When the proxy user is created as &#34;dilbert[mybert]&#34;, use the connection string shown in <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGAEIC">Example 2-8</a> to connect to the database. (The left and right brackets &#34;[&#34; and &#34;]&#34; are entered in the connection string.)</p>
<p>In <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHBJDDA">Example 2-9</a>, dilbert[mybert] and joe[myjoe] are two database users that contain the left and right bracket characters &#34;[&#34; and &#34;]&#34;. If dilbert[mybert] wants to act on behalf of joe[myjoe], <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHBJDDA">Example 2-9</a> shows the connect statement to use.</p>
<p>In <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHBGCBI">Example 2-10</a>, you can set the target user name by using the <code class="codeph">ALTER</code> <code class="codeph">USER</code> statement.</p>
<div class="infoboxnotealso" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__GUID-6B6FE90D-3D06-4363-8C8C-11BF1DC85BD3">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="ociaahan.htm#GUID-FB263210-118E-4DB3-A840-1769EF0CB977__BAJFJCJG">OCI_ATTR_PROXY_CLIENT</a>&#34;</span></p>
</li>
<li>
<p><a class="olink DBSEG33101" target="_blank" href="../DBSEG/authentication.htm#DBSEG33101"><span><cite>Oracle Database Security Guide</cite></span></a> for a discussion of proxy authentication</p>
</li>
<li>
<p><span class="q">&#34;<a href="oci08sca.htm#GUID-5579C27E-2536-4B21-96DB-3EDFECF576B5" title="OCI can authenticate and maintain multiple users.">Password and Session Management</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03" title="Sets the value of an attribute of a handle or a descriptor.">OCIAttrSet()</a>&#34;</span></p>
</li>
</ul>
</div>
<div class="infobox-note" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__GUID-D9362429-293B-443C-8F33-168017CBCD7A">
<p class="notep1">Note:</p>
<p>There are compatibility issues of client access through a proxy. Because this feature was introduced in Oracle Database release 10.2, pre-10.2 clients do not have it. If newer clients use the feature with pre-10.2 Oracle databases, the connect fails and the client returns an error after checking the database release level.</p>
</div>
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGEIDA">
<p class="titleinexample">Example 2-4 Enabling a Local User to Serve as a Proxy for Another User</p>
<pre dir="ltr">ALTER USER joe GRANT CONNECT THROUGH dilbert;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGAGIJ">
<p class="titleinexample">Example 2-5 Connection String to Use for the Proxy User</p>
<pre dir="ltr">dilbert[joe]/tiger123@db1
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHIFFBF">
<p class="titleinexample">Example 2-6 Preserving Case Sensitivity When Enabling a Local User to Serve as a Proxy for Another User</p>
<pre dir="ltr">ALTER USER &#34;Joe&#34; GRANT CONNECT THROUGH &#34;Dilbert&#34;;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHJDDAC">
<p class="titleinexample">Example 2-7 Preserving Case Sensitivity in the Connection String</p>
<pre dir="ltr">&#34;Dilbert&#34;[&#34;Joe&#34;]/tiger123@db1
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHGAEIC">
<p class="titleinexample">Example 2-8 Using &#34;dilbert[mybert]&#34; in the Connection String</p>
<pre dir="ltr">&#34;dilbert[mybert]&#34;/tiger123

rem the user was already created this way:
rem CREATE USER &#34;dilbert[mybert]&#34; IDENTIFIED BY tiger123;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHBJDDA">
<p class="titleinexample">Example 2-9 Using &#34;dilbert[mybert]&#34;[&#34;joe[myjoe]&#34;] in the Connection String</p>
<pre dir="ltr">&#34;dilbert[mybert]&#34;[&#34;joe[myjoe]&#34;]/tiger123
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHBGCBI">
<p class="titleinexample">Example 2-10 Setting the Target User Name</p>
<pre dir="ltr">ALTER USER joe GRANT CONNECT THROUGH dilbert;
</pre>
<p>Then, as shown in <a href="oci02bas.htm#GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHHBCID">Example 2-11</a>, in an OCI program, use the <code class="codeph">OCIAttrSet()</code> call to set the attribute <code class="codeph">OCI_ATTR_PROXY_CLIENT</code> and the proxy <code class="codeph">dilbert</code>. In your program, use these statements to connect multiple times.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-D77D0D4A-7483-423A-9767-CBB5854A15CC__CIHHBCID">
<p class="titleinexample">Example 2-11 Using OCI to Set the OCI_ATTR_PROXY_CLIENT Attribute and the Proxy dilbert</p>
<pre dir="ltr">OCIAttrSet(session, OCI_HTYPE_SESSION, (void  *)&#34;dilbert&#34;,
           (ub4)strlen(&#34;dilbert&#34;), OCI_ATTR_USERNAME, 
           error_handle);
OCIAttrSet(session, OCI_HTYPE_SESSION, (void  *)&#34;tiger123&#34;, 
           (ub4)strlen(&#34;tiger123&#34;), OCI_ATTR_PASSWORD, 
           error_handle);
OCIAttrSet(session, OCI_HTYPE_SESSION, (void  *)&#34;joe&#34;,
           (ub4)strlen(&#34;joe&#34;), OCI_ATTR_PROXY_CLIENT, 
           error_handle);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI72586"></a><a id="LNOCI16215"></a>
<div class="props_rev_3"><a id="GUID-065FF1E3-FF87-4507-A72A-7D089D897B14"></a>
<h5 id="LNOCI-GUID-065FF1E3-FF87-4507-A72A-7D089D897B14" class="sect5">Nonproxy Multiple Sessions or Connections</h5>
<div>
<p>The nonproxy multiple sessions or connections option uses explicit attach and begin-session calls to maintain multiple user sessions and connections on a database connection.</p>
<p>Specific calls to attach to the Oracle database and begin sessions are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCIServerAttach()</code> - Creates an access path to the Oracle database for OCI operations.</p>
</li>
<li>
<p><code class="codeph">OCISessionBegin()</code> - Establishes a session for a user against a particular Oracle database. This call is required for the user to execute operations on the Oracle database.</p>
</li>
</ul>
<p>A subsequent call to <code class="codeph">OCISessionBegin()</code> using different service context and session context handles logs off the previous user and causes an error. To run two simultaneous nonmigratable sessions, a second <code class="codeph">OCISessionBegin()</code> call must be made with the same service context handle and a new session context handle.</p>
<p>These calls set up an operational environment that enables you to execute SQL and PL/SQL statements against a database.</p>
<div class="infoboxnotealso" id="GUID-065FF1E3-FF87-4507-A72A-7D089D897B14__GUID-C4276652-8104-4DE4-AC3F-F0007B42D69D">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci16rel001.htm#GUID-8EDDA0CC-6755-49D8-89D0-81713E10B156" title="Initializes the connection pool.Shuts down an Oracle Database instance.Starts an Oracle Database instance.Creates and initializes an environment handle for OCI functions to work under.Creates and initializes an environment handle for OCI functions to work under. Releases a session that was retrieved using OCILogon2() or OCILogon().Initializes a session pool for use with OCI session pooling and database resident connection pooling (DRCP).">Connect, Authorize, and Initialize Functions</a></p>
</li>
<li>
<p><a href="oci09adv.htm#GUID-FD512A09-1A33-424B-AD4D-728956AFDBD8" title="Connection pooling is the use of a group (the pool) of reusable physical connections by several sessions to balance loads. Lists the steps you must follow to use connection pooling in your application.With OCI_CPOOL mode (connection pooling), the session memory (UGA) in the back-end database comes out of the SGA.The pool handle is freed using OCIHandleFree().Session pooling means that the application creates and maintains a group of stateless sessions to the database.What are the handle types for session pooling.This is the authentication information handle.Describes the usages for OCI calls for session pooling. Runtime connection load balancing routes work requests to sessions in a session pool that best serve the work.Database resident connection pooling (DRCP) provides a connection pool in the database server for typical web application usage scenarios where the application acquires a database connection, works on it for a relatively short duration, and then releases it. Indicates the circumstances in which to use them or not.There are a number of ways to create a session with varying functionality.How to choose the type od session to use.Statement caching refers to the feature that provides and manages a cache of statements for each session.If you are using statement caching, follow these rules.Oracle Call Interface can execute user-specific code in addition to OCI calls. An application can register user callback libraries with the OCIUserCallbackRegister() function.A user callback is registered using the OCIUserCallbackRegister() call. Shows examples of using OCI callbacks.TAF can be configured on both the client side and the server side. If both are configured, server-side settings take precedence.Because of the delay that can occur during failover, the application developer may want to inform the user that failover is in progress, and request that the user wait for notification that failover is complete. Use HA event notification to provide a best-effort programmatic signal to the client if there is a database failure for high availability clients connected to an Oracle RAC database. Transaction Guard introduces the concept of at-most-once transaction execution in case of a planned or unplanned outage to help prevent an application upon failover from submitting a duplicate submission of an original submission.This section describes developing OCI user applications that use Transaction Guard. OCI provides an interface to the Streams Advanced Queuing (Streams AQ) feature. Streams AQ provides message queuing as an integrated part of Oracle Database.Lists the OCI Streams Advanced Queuing functions.Lists the OCI Streams Advanced Queuing descriptors and shows their usage.The publish-subscribe notification feature allows an OCI application to receive client notifications directly, register an email address to which notifications can be sent, register an HTTP URL to which notifications can be posted, or register a PL/SQL procedure to be invoked on a notification. You can register directly to the database or register using Lightweight Directory Access Protocol (LDAP).The following steps are required in an OCI application to register directly and receive notifications for events.Lists the prerequisites for the open registration for publish-subscribe.Shows how to open register using LDAP registration.Shows how to set QOSFLAGS to QOS levels using OCIAttrSet().The client must register a notification callback that gets invoked when there is some activity on the subscription for which interest has been registered.The PL/SQL notification procedure that is invoked when there is some activity on the subscription for which interest has been registered, must be created in the database.">OCI Programming Advanced Topics</a> for more information about maintaining multiple sessions, transactions, and connections</p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-87D07567-1165-4DE7-B551-F70DD61DF1A8" title="The function OCIEnvNlsCreate() enables you to set character set information in applications independently from NLS_LANG and NLS_NCHAR settings.">Client Character Set Control from OCI</a> for the use of <code class="codeph">OCIEnvNlsCreate()</code></p>
</li>
</ul>
</div>
<p><a href="oci02bas.htm#GUID-065FF1E3-FF87-4507-A72A-7D089D897B14__CIHDEGIE">Example 2-12</a> demonstrates the creation and initialization of an OCI environment.</p>
<ul style="list-style-type: disc;">
<li>
<p>A server context is created and set in the service handle.</p>
</li>
<li>
<p>Then a user session handle is created and initialized using a database user name and password.</p>
</li>
<li>
<p>For simplicity, error checking is not included.</p>
</li>
</ul>
<p>The demonstration program <code class="codeph">cdemo81.c</code> in the <code class="codeph">demo</code> directory illustrates this process, with error checking.</p>
<div class="example" id="GUID-065FF1E3-FF87-4507-A72A-7D089D897B14__CIHDEGIE">
<p class="titleinexample">Example 2-12 Creating and Initializing an OCI Environment</p>
<pre dir="ltr">#include &lt;oci.h&gt;
...
main()
{
...
OCIEnv     *myenvhp;    /* the environment handle */
OCIServer  *mysrvhp;    /* the server handle */
OCIError   *myerrhp;    /* the error handle */
OCISession *myusrhp;    /* user session handle */
OCISvcCtx  *mysvchp;    /* the  service handle */
...
/* initialize the mode to be the threaded and object environment */
(void) OCIEnvCreate(&amp;myenvhp, OCI_THREADED|OCI_OBJECT, (void  *)0,
                    0, 0, 0, (size_t) 0, (void  **)0);

     /* allocate a server handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;mysrvhp,
      OCI_HTYPE_SERVER, 0, (void  **) 0);

      /* allocate an error handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;myerrhp,
      OCI_HTYPE_ERROR, 0, (void  **) 0);

      /* create a server context */
(void) OCIServerAttach (mysrvhp, myerrhp, (text *)&#34;inst1_alias&#34;,
      strlen (&#34;inst1_alias&#34;), OCI_DEFAULT);

     /* allocate a service handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;mysvchp,
      OCI_HTYPE_SVCCTX, 0, (void  **) 0);

 /* set the server attribute in the service context handle*/
(void) OCIAttrSet ((void  *)mysvchp, OCI_HTYPE_SVCCTX,
       (void  *)mysrvhp, (ub4) 0, OCI_ATTR_SERVER, myerrhp);

      /* allocate a user session handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;myusrhp,
     OCI_HTYPE_SESSION, 0, (void  **) 0);

      /* set user name attribute in user session handle */
 (void) OCIAttrSet ((void  *)myusrhp, OCI_HTYPE_SESSION,
      (void  *)&#34;hr&#34;, (ub4)strlen(&#34;hr&#34;),
      OCI_ATTR_USERNAME, myerrhp);

      /* set password attribute in user session handle */
 (void) OCIAttrSet ((void  *)myusrhp, OCI_HTYPE_SESSION,
      (void  *)&#34;hr&#34;, (ub4)strlen(&#34;hr&#34;),
      OCI_ATTR_PASSWORD, myerrhp);

 (void) OCISessionBegin ((void  *) mysvchp, myerrhp, myusrhp,
      OCI_CRED_RDBMS, OCI_DEFAULT);

    /* set the user session attribute in the service context handle*/
 (void) OCIAttrSet ((void  *)mysvchp, OCI_HTYPE_SVCCTX,
       (void  *)myusrhp, (ub4) 0, OCI_ATTR_SESSION, myerrhp);
...
}
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="LNOCI16217"></a>
<div class="props_rev_3"><a id="GUID-A139C136-0AA7-4568-94D4-B042AEFAB6D1"></a>
<h3 id="LNOCI-GUID-A139C136-0AA7-4568-94D4-B042AEFAB6D1" class="sect3">About Processing SQL Statements in OCI</h3>
<div>
<p>What are the specific steps involved in processing SQL statements in OCI.</p>
<p><a href="oci04sql.htm#GUID-3F20EDC9-D436-4A54-9698-4FA95988A819" title="This chapter discusses the concepts and steps involved in processing SQL statements with Oracle Call Interface.">Using SQL Statements in OCI</a> outlines the specific steps involved in processing SQL statements in OCI.</p>
</div>
</div>
<a id="LNOCI16218"></a>
<div class="props_rev_3"><a id="GUID-9D7C87CC-47F1-49BB-86D6-DF6490A99AA0"></a>
<h3 id="LNOCI-GUID-9D7C87CC-47F1-49BB-86D6-DF6490A99AA0" class="sect3">Commit or Roll Back Operations</h3>
<div>
<p>An application commits changes to the database by calling <code class="codeph">OCITransCommit()</code>.</p>
<p>The <code class="codeph">OCITransCommit()</code> call uses a service context as one of its parameters. The transaction is associated with the service context whose changes are committed. This transaction can be explicitly created by the application or implicitly created when the application modifies the database.</p>
<div class="infobox-note" id="GUID-9D7C87CC-47F1-49BB-86D6-DF6490A99AA0__GUID-7DC893E6-D507-4F65-80D6-DC4488D85D8A">
<p class="notep1">Note:</p>
<p>By using the <code class="codeph">OCI_COMMIT_ON_SUCCESS</code> mode of the <code class="codeph">OCIStmtExecute()</code> call, the application can selectively commit transactions after each statement execution, saving an extra round-trip.</p>
</div>
<p>To roll back a transaction, use the <code class="codeph">OCITransRollback()</code> call.</p>
<p>If an application disconnects from Oracle Database in a way other than a normal logoff, such as losing a network connection, and <code class="codeph">OCITransCommit()</code> has not been called, all active transactions are rolled back automatically.</p>
<div class="infoboxnotealso" id="GUID-9D7C87CC-47F1-49BB-86D6-DF6490A99AA0__GUID-780D5841-AE97-43F6-87B1-06486A9C79DC">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="oci02bas.htm#GUID-AE250EB9-0C4F-428F-9965-8DD525C3332B" title="A service context handle defines attributes that determine the operational context for OCI calls to a server.">Service Context Handle and Associated Handles</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="oci08sca.htm#GUID-3E96017A-64D3-4A29-B617-C9879610B5F2" title="OCI has a set of API calls to support operations on both local and global transactions.">OCI Support for Transactions</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16219"></a>
<div class="props_rev_3"><a id="GUID-046BE629-DEC6-4608-885C-7B922DC825C3"></a>
<h3 id="LNOCI-GUID-046BE629-DEC6-4608-885C-7B922DC825C3" class="sect3">About Terminating the Application</h3>
<div>
<p>What should an application do before it terminates.</p>
<p>An OCI application should perform the following steps before it terminates:</p>
<ol>
<li>
<p>Delete the user session by calling <code class="codeph">OCISessionEnd()</code> for each session.</p>
</li>
<li>
<p>Delete access to the data sources by calling <code class="codeph">OCIServerDetach()</code> for each source.</p>
</li>
<li>
<p>Explicitly deallocate all handles by calling <code class="codeph">OCIHandleFree()</code> for each handle.</p>
</li>
<li>
<p>Delete the environment handle, which deallocates all other handles associated with it.</p>
<div class="infobox-note" id="GUID-046BE629-DEC6-4608-885C-7B922DC825C3__GUID-2C80793C-A6FB-415D-AC0D-DAFC5FE94779">
<p class="notep1">Note:</p>
<p>When a parent OCI handle is freed, any child handles associated with it are freed automatically</p>
</div>
</li>
</ol>
<p>The calls to <code class="codeph">OCIServerDetach()</code> and <code class="codeph">OCISessionEnd()</code> are not mandatory but are recommended. If the application terminates, and <code class="codeph">OCITransCommit()</code> (transaction commit) has not been called, any pending transactions are automatically rolled back.</p>
<div class="infoboxnotealso" id="GUID-046BE629-DEC6-4608-885C-7B922DC825C3__GUID-761348EE-8437-4B88-B716-E4C4281BF5CC">
<p class="notep1">See Also:</p>
<p>The first sample program in <a href="ociabdem.htm#GUID-75E18629-0C54-4495-A747-AFB346034F26" title="Lists example programs with sample code demonstrating the allocation and use of OCI handles.">OCI Demonstration Programs</a> for an example showing handles being freed at the end of an application</p>
</div>
<div class="infobox-note" id="GUID-046BE629-DEC6-4608-885C-7B922DC825C3__GUID-C48D28EF-5B42-45B9-A98D-5CF6F13D1EA7">
<p class="notep1">Note:</p>
<p>If the application uses the simplified logon method of <code class="codeph">OCILogon2()</code>, then a call to <code class="codeph">OCILogoff()</code> terminates the session, disconnects from the Oracle database, and frees the service context and associated handles. The application is still responsible for freeing other handles it allocated.</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16221"></a><a id="LNOCI16220"></a>
<div class="props_rev_3"><a id="GUID-39339E95-A79E-43BD-B57E-4DB536CB3475"></a>
<h2 id="LNOCI-GUID-39339E95-A79E-43BD-B57E-4DB536CB3475" class="sect2">Error Handling in OCI</h2>
<div>
<p>OCI function calls have a set of return codes.</p>
<div class="section">
<p>These OCI function call return codes are listed in <a href="oci02bas.htm#GUID-39339E95-A79E-43BD-B57E-4DB536CB3475__G466363" title="This table has 3 columns. Column 1 is the OCI return code, column 2 is its value, and column 3 is its description.">Table 2-3</a>, which indicate the success or failure of the call, such as <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code>, or provide other information that may be required by the application, such as <code class="codeph">OCI_NEED_DATA</code> or <code class="codeph">OCI_STILL_EXECUTING</code>. Most OCI calls return one of these codes.</p>
<p>To verify that the connection to the server is not terminated by the <code class="codeph">OCI_ERROR</code>, an application can check the value of the attribute <code class="codeph">OCI_ATTR_SERVER_STATUS</code> in the server handle. If the value of the attribute is <code class="codeph">OCI_SERVER_NOT_CONNECTED</code>, then the connection to the server and the user session must be reestablished.</p>
<div class="infoboxnotealso" id="GUID-39339E95-A79E-43BD-B57E-4DB536CB3475__GUID-78545497-CD6A-4832-8562-C60CB8E6B2CA">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="oci02bas.htm#GUID-253C3621-6459-4D78-862F-1C13C5ECB97B">Functions Returning Other Values</a>&#34;</span> for exceptions</p>
</li>
<li>
<p><span class="q">&#34;<a href="oci17msc007.htm#GUID-4B99087C-74F6-498A-8310-D6645172390A" title="Returns an error message and an Oracle Database error code.">OCIErrorGet()</a>&#34;</span> for complete details and an example of usage</p>
</li>
<li>
<p><span class="q">&#34;<a href="ociaahan.htm#GUID-2B6D06A7-8EDF-46FF-BDEF-320D293DCA65">Server Handle Attributes</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-39339E95-A79E-43BD-B57E-4DB536CB3475__G466363">
<p class="titleintable">Table 2-3 OCI Return Codes</p>
<table class="cellalignment6157" title="OCI Return Codes " summary="This table has 3 columns. Column 1 is the OCI return code, column 2 is its value, and column 3 is its description.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6254" id="d22181e9536">OCI Return Code</th>
<th class="cellalignment6210" id="d22181e9539">Value</th>
<th class="cellalignment6282" id="d22181e9542">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9547" headers="d22181e9536">
<p><a id="d22181e9549" class="indexterm-anchor"></a><code class="codeph">OCI_SUCCESS</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9547 d22181e9539">
<p>0</p>
</td>
<td class="cellalignment6283" headers="d22181e9547 d22181e9542">
<p>The function completed successfully.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9560" headers="d22181e9536">
<p><a id="d22181e9562" class="indexterm-anchor"></a><code class="codeph">OCI_SUCCESS_WITH_INFO</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9560 d22181e9539">
<p>1</p>
</td>
<td class="cellalignment6283" headers="d22181e9560 d22181e9542">
<p>The function completed successfully; a call to <code class="codeph">OCIErrorGet()</code> returns additional diagnostic information. This may include warnings.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9576" headers="d22181e9536">
<p><a id="d22181e9578" class="indexterm-anchor"></a><code class="codeph">OCI_NO_DATA</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9576 d22181e9539">
<p>100</p>
</td>
<td class="cellalignment6283" headers="d22181e9576 d22181e9542">
<p>The function completed, and there is no further data.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9589" headers="d22181e9536">
<p><a id="d22181e9591" class="indexterm-anchor"></a><code class="codeph">OCI_ERROR</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9589 d22181e9539">
<p>-1</p>
</td>
<td class="cellalignment6283" headers="d22181e9589 d22181e9542">
<p>The function failed; a call to <code class="codeph">OCIErrorGet()</code> returns additional information.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9605" headers="d22181e9536">
<p><a id="d22181e9607" class="indexterm-anchor"></a><code class="codeph">OCI_INVALID_HANDLE</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9605 d22181e9539">
<p>-2</p>
</td>
<td class="cellalignment6283" headers="d22181e9605 d22181e9542">
<p>An invalid handle was passed as a parameter or a user callback was passed an invalid handle or invalid context. No further diagnostics are available.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9618" headers="d22181e9536">
<p><a id="d22181e9620" class="indexterm-anchor"></a><code class="codeph">OCI_NEED_DATA</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9618 d22181e9539">
<p>99</p>
</td>
<td class="cellalignment6283" headers="d22181e9618 d22181e9542">
<p>The application must provide runtime data.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9631" headers="d22181e9536">
<p><a id="d22181e9633" class="indexterm-anchor"></a><code class="codeph">OCI_STILL_EXECUTING</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9631 d22181e9539">
<p>-3123</p>
</td>
<td class="cellalignment6283" headers="d22181e9631 d22181e9542">
<p>The service context was established in nonblocking mode, and the current operation could not be completed immediately. The operation must be called again to complete. <code class="codeph">OCIErrorGet()</code> returns <code class="codeph">ORA-03123</code> as the error code.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9650" headers="d22181e9536">
<p><a id="d22181e9652" class="indexterm-anchor"></a><code class="codeph">OCI_CONTINUE</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9650 d22181e9539">
<p>-24200</p>
</td>
<td class="cellalignment6283" headers="d22181e9650 d22181e9542">
<p>This code is returned only from a callback function. It indicates that the callback function wants the OCI library to resume its normal processing.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6256" id="d22181e9663" headers="d22181e9536">
<p><a id="d22181e9665" class="indexterm-anchor"></a><code class="codeph">OCI_ROWCBK_DONE</code></p>
</td>
<td class="cellalignment6211" headers="d22181e9663 d22181e9539">
<p>-24201</p>
</td>
<td class="cellalignment6283" headers="d22181e9663 d22181e9542">
<p>This code is returned only from a callback function. It indicates that the callback function is done with the user row callback.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<p>If the return code indicates that an error has occurred, the application can retrieve error codes and messages specific to Oracle Database by calling <code class="codeph">OCIErrorGet()</code>. One of the parameters to <code class="codeph">OCIErrorGet()</code> is the error handle passed to the call that caused the error.</p>
<div class="infobox-note" id="GUID-39339E95-A79E-43BD-B57E-4DB536CB3475__GUID-B188A674-C504-4D62-8413-4D0778B60DEA">
<p class="notep1">Note:</p>
<p>Multiple diagnostic records can be retrieved by calling <code class="codeph">OCIErrorGet()</code> repeatedly until there are no more records (<code class="codeph">OCI_NO_DATA</code> is returned). <code class="codeph">OCIErrorGet()</code> returns at most a single diagnostic record.</p>
</div>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-6D5785E4-A162-436F-B934-C8FC7534F9BB" title="The OCI return code, error number, indicator variable, and column return code are specified when the data fetched is normal, null, or truncated.">Return and Error Codes for Data</a></p>
</li>
<li>
<p><a href="oci19map.htm#GUID-8A83C9F5-890A-4C26-9437-507DC76863F9">Functions Returning Other Values</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI16223"></a><a id="LNOCI16222"></a>
<div class="props_rev_3"><a id="GUID-6D5785E4-A162-436F-B934-C8FC7534F9BB"></a>
<h3 id="LNOCI-GUID-6D5785E4-A162-436F-B934-C8FC7534F9BB" class="sect3">Return and Error Codes for Data</h3>
<div>
<p>The OCI return code, error number, indicator variable, and column return code are specified when the data fetched is normal, null, or truncated.</p>
<div class="section">
<p><a id="d22181e9862" class="indexterm-anchor"></a><a id="d22181e9866" class="indexterm-anchor"></a>In <a href="oci02bas.htm#GUID-6D5785E4-A162-436F-B934-C8FC7534F9BB__G466402" title="This table has 4 columns. Column 1 is the state of the data, column 2 is the return code, column 3 is the indicator not provided and column 4 is the indicator provided.">Table 2-4</a>, the OCI return code, error number, indicator variable, and column return code are specified when the data fetched is normal, null, or truncated.</p>
<div class="infoboxnotealso" id="GUID-6D5785E4-A162-436F-B934-C8FC7534F9BB__GUID-FB4BFDA4-6745-4D8F-964A-EFEDC42236E7">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="oci02bas.htm#GUID-9966EDF7-37ED-42E5-AE57-67E394245BFA" title="Each bind and define OCI call has a parameter that associates an indicator variable, or an array of indicator variables, with a DML statement, a PL/SQL statement, or a query.">Indicator Variables</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-6D5785E4-A162-436F-B934-C8FC7534F9BB__G466402">
<p class="titleintable">Table 2-4 Return and Error Codes</p>
<table class="cellalignment6175" title="Return and Error Codes " summary="This table has 4 columns. Column 1 is the state of the data, column 2 is the return code, column 3 is the indicator not provided and column 4 is the indicator provided.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6226" id="d22181e9896">State of Data</th>
<th class="cellalignment6229" id="d22181e9899">Return Code</th>
<th class="cellalignment6268" id="d22181e9902">Indicator - Not provided</th>
<th class="cellalignment6276" id="d22181e9906">Indicator - Provided</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d22181e9912" headers="d22181e9896">
<p>Not null or truncated</p>
</td>
<td class="cellalignment6231" headers="d22181e9912 d22181e9899">
<p>Not provided</p>
</td>
<td class="cellalignment6270" headers="d22181e9912 d22181e9902">
<p><code class="codeph">OCI_SUCCESS</code></p>
<p>Error = 0</p>
</td>
<td class="cellalignment6278" headers="d22181e9912 d22181e9906">
<p><code class="codeph">OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = 0</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d22181e9933" headers="d22181e9896">
<p>Not null or truncated</p>
</td>
<td class="cellalignment6231" headers="d22181e9933 d22181e9899">
<p>Provided</p>
</td>
<td class="cellalignment6270" headers="d22181e9933 d22181e9902">
<p><code class="codeph">OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Return code = 0</p>
</td>
<td class="cellalignment6278" headers="d22181e9933 d22181e9906">
<p><code class="codeph">OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = 0</p>
<p>Return code = 0</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d22181e9958" headers="d22181e9896">
<p>Null data</p>
</td>
<td class="cellalignment6231" headers="d22181e9958 d22181e9899">
<p>Not provided</p>
</td>
<td class="cellalignment6270" headers="d22181e9958 d22181e9902">
<p><code class="codeph">OCI_ERROR</code></p>
<p>Error = 1405</p>
</td>
<td class="cellalignment6278" headers="d22181e9958 d22181e9906">
<p><code class="codeph">OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = -1</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d22181e9979" headers="d22181e9896">
<p>Null data</p>
</td>
<td class="cellalignment6231" headers="d22181e9979 d22181e9899">
<p>Provided</p>
</td>
<td class="cellalignment6270" headers="d22181e9979 d22181e9902">
<p><code class="codeph">OCI_ERROR</code></p>
<p>Error = 1405</p>
<p>Return code = 1405</p>
</td>
<td class="cellalignment6278" headers="d22181e9979 d22181e9906">
<p><code class="codeph">OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = -1</p>
<p>Return code = 1405</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d22181e10004" headers="d22181e9896">
<p>Truncated data</p>
</td>
<td class="cellalignment6231" headers="d22181e10004 d22181e9899">
<p>Not provided</p>
</td>
<td class="cellalignment6270" headers="d22181e10004 d22181e9902">
<p><code class="codeph">OCI_ERROR</code></p>
<p>Error = 1406</p>
</td>
<td class="cellalignment6278" headers="d22181e10004 d22181e9906">
<p><code class="codeph">OCI_ERROR</code></p>
<p>Error = 1406</p>
<p>Indicator = data_len</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d22181e10025" headers="d22181e9896">
<p>Truncated data</p>
</td>
<td class="cellalignment6231" headers="d22181e10025 d22181e9899">
<p>Provided</p>
</td>
<td class="cellalignment6270" headers="d22181e10025 d22181e9902">
<p><code class="codeph">OCI_SUCCESS_WITH_INFO</code></p>
<p>Error = 24345</p>
<p>Return code = 1405</p>
</td>
<td class="cellalignment6278" headers="d22181e10025 d22181e9906">
<p><code class="codeph">OCI_SUCCESS_WITH_INFO</code></p>
<p>Error = 24345</p>
<p>Indicator = data_len</p>
<p>Return code = 1406</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<p>For truncated data, <code class="codeph">data_len</code> is the actual length of the data that has been truncated if this length is less than or equal to <code class="codeph">SB2MAXVAL</code>. Otherwise, the indicator is set to -2.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16224"></a>
<div class="props_rev_3"><a id="GUID-253C3621-6459-4D78-862F-1C13C5ECB97B"></a>
<h3 id="LNOCI-GUID-253C3621-6459-4D78-862F-1C13C5ECB97B" class="sect3">Functions Returning Other Values</h3>
<div>
<p>Some functions return values other than the OCI error codes listed in <a href="oci02bas.htm#GUID-39339E95-A79E-43BD-B57E-4DB536CB3475__G466363" title="This table has 3 columns. Column 1 is the OCI return code, column 2 is its value, and column 3 is its description.">Table 2-3</a>. When you use these functions, be aware that they return values directly from the function call, rather than through an <code class="codeph">OUT</code> parameter. More detailed information about each function and its return values is listed in the reference chapters.</p>
</div>
</div>
</div>
<a id="LNOCI16225"></a>
<div class="props_rev_3"><a id="GUID-A0A2BC74-CCF6-48B4-831F-768E1B65C33C"></a>
<h2 id="LNOCI-GUID-A0A2BC74-CCF6-48B4-831F-768E1B65C33C" class="sect2">Additional Coding Guidelines</h2>
<div>
<p>This section explains some additional issues when coding OCI applications.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-715E7F0A-E534-4929-939E-996FF27BAD17" title="Operating systems may provide facilities for spawning processes that allow child processes to reuse the state created by their parent process.">Operating System Considerations</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-96DEFED3-0752-44DB-87A8-F71F35D51DF0" title="OCI functions take a variety of different types of parameters, including integers, handles, and character strings.">Parameter Types</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-B0824786-D546-4F10-8089-261B9238E390" title="How to insert a null into a database column.">Inserting Nulls into a Column</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-9966EDF7-37ED-42E5-AE57-67E394245BFA" title="Each bind and define OCI call has a parameter that associates an indicator variable, or an array of indicator variables, with a DML statement, a PL/SQL statement, or a query.">Indicator Variables</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-25EBC682-2D92-4748-985D-9F1B60F03CBA" title="How do you cancel long-running or repeated OCI calls.">About Canceling Calls</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-392BDD6B-01A9-4F9D-9A86-C230B0F59753" title="You can use the ROWID associated with a SELECT...FOR UPDATE OF... statement in a later UPDATE or DELETE statement.">Positioned Updates and Deletes</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-6DCD7944-1AA5-40D6-B969-99564EF38299" title="Some words are reserved by Oracle.">Reserved Words</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-83F4D3B1-56A7-4EEE-A905-BB84D399713D">Polling Mode Operations in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-48410BC4-D4DB-442F-960F-D23D011377FB" title="OCI provides the ability to establish a server connection in blocking mode or nonblocking mode.">Nonblocking Mode in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-EDCDDC7B-A912-4EE8-AEB5-89755590190F" title="You can modify or check an application&#39;s blocking status by calling OCIAttrSet() to set the status, or OCIAttrGet() to read the status on the server context handle with the attrtype parameter set to OCI_ATTR_NONBLOCKING_MODE.">Setting Blocking Modes</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-615787D2-F6F5-4B8D-9EF5-7CCD0E3A58AF">Canceling a Nonblocking Call</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI72587"></a>
<div class="props_rev_3"><a id="GUID-715E7F0A-E534-4929-939E-996FF27BAD17"></a>
<h3 id="LNOCI-GUID-715E7F0A-E534-4929-939E-996FF27BAD17" class="sect3">Operating System Considerations</h3>
<div>
<p>Operating systems may provide facilities for spawning processes that allow child processes to reuse the state created by their parent process.</p>
<p>After spawning a child process, the child process must not use the same database connection as created by the parent. Any attempt on behalf of the child process to use the same database connection as the parent may cause undesired connection interference and result in intermittent <code class="codeph">ORA-03137</code> errors, because Oracle Net expects only one user process to be using a connection to the database.</p>
<p>Where multiple, concurrent connections are required, consider using threads if your platform supports a threads package. Concurrent connections are supported in either single-threaded or multithreaded applications. For better performance with many concurrently opened connections, consider pooling them.</p>
<div class="infoboxnotealso" id="GUID-715E7F0A-E534-4929-939E-996FF27BAD17__GUID-C47A1C5E-E739-4C12-915D-0F98317C87B0">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci08sca.htm#GUID-FB0528A0-460A-4778-9703-52BB0932E911" title="Threads are lightweight processes that exist within a larger process.">Overview of OCI Multithreaded Development</a></p>
</li>
<li>
<p><a href="oci08sca.htm#GUID-AAE70C09-E0D8-4264-8E88-1D6916ABF717" title="The OCIThread package provides some commonly used threading primitives.">OCIThread Package</a></p>
</li>
<li>
<p><a href="oci09adv.htm#GUID-F9662FFB-EAEF-495C-96FC-49C6D1D9625C" title="Session pooling means that the application creates and maintains a group of stateless sessions to the database.">Session Pooling in OCI</a></p>
</li>
<li>
<p><a href="oci09adv.htm#GUID-8DD97D4D-C7AA-4EF7-9B55-8DC58BDC2726" title="Indicates the circumstances in which to use them or not.">When to Use Connection Pooling, Session Pooling, or Neither</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16226"></a>
<div class="props_rev_3"><a id="GUID-96DEFED3-0752-44DB-87A8-F71F35D51DF0"></a>
<h3 id="LNOCI-GUID-96DEFED3-0752-44DB-87A8-F71F35D51DF0" class="sect3">Parameter Types</h3>
<div>
<p>OCI functions take a variety of different types of parameters, including integers, handles, and character strings.</p>
<div class="p">Special considerations must be taken into account for some types of parameters, as described in the following sections:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-DA3CDD12-DB34-44CA-A4A9-98DC50A2630F">Address Parameters</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-C9F8EAD7-D1B4-46B8-B513-E4FED303F33A">Integer Parameters</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-C61D8B65-6883-4E3B-9625-20F0853B2596">Character String Parameters</a></p>
</li>
</ul>
</div>
<p>This section includes the following topics:</p>
<div class="infoboxnotealso" id="GUID-96DEFED3-0752-44DB-87A8-F71F35D51DF0__GUID-A90D6253-9037-4C46-88CE-93DDAF5E3DD5">
<p class="notep1">See Also:</p>
<p><a href="oci16rel001.htm#GUID-8EDDA0CC-6755-49D8-89D0-81713E10B156" title="Initializes the connection pool.Shuts down an Oracle Database instance.Starts an Oracle Database instance.Creates and initializes an environment handle for OCI functions to work under.Creates and initializes an environment handle for OCI functions to work under. Releases a session that was retrieved using OCILogon2() or OCILogon().Initializes a session pool for use with OCI session pooling and database resident connection pooling (DRCP).">Connect, Authorize, and Initialize Functions</a> for more information about parameter data types and parameter passing conventions</p>
</div>
</div>
<a id="LNOCI16227"></a>
<div class="props_rev_3"><a id="GUID-DA3CDD12-DB34-44CA-A4A9-98DC50A2630F"></a>
<h4 id="LNOCI-GUID-DA3CDD12-DB34-44CA-A4A9-98DC50A2630F" class="sect4">Address Parameters</h4>
<div>
<p>Address parameters are used to pass the address of the variable to Oracle Database. You should be careful when developing in C, because it normally passes scalar parameters by value.</p>
</div>
</div>
<a id="LNOCI16228"></a>
<div class="props_rev_3"><a id="GUID-C9F8EAD7-D1B4-46B8-B513-E4FED303F33A"></a>
<h4 id="LNOCI-GUID-C9F8EAD7-D1B4-46B8-B513-E4FED303F33A" class="sect4">Integer Parameters</h4>
<div>
<p>Binary integer and short binary integer parameters are numbers whose size is system-dependent. See Oracle Database documentation that is specific to your operating system for the size of these integers on your system.</p>
</div>
</div>
<a id="LNOCI16229"></a>
<div class="props_rev_3"><a id="GUID-C61D8B65-6883-4E3B-9625-20F0853B2596"></a>
<h4 id="LNOCI-GUID-C61D8B65-6883-4E3B-9625-20F0853B2596" class="sect4">Character String Parameters</h4>
<div>
<p>Character strings are a special type of address parameter. Each OCI routine that enables a character string to be passed as a parameter also has a string length parameter. The length parameter should be set to the length of the string.</p>
<div class="infobox-note" id="GUID-C61D8B65-6883-4E3B-9625-20F0853B2596__GUID-11CA565E-C2C7-4831-A74B-59AF3AF864AE">
<p class="notep1">Note:</p>
<p>Unlike earlier versions of OCI, you do not pass -1 for the string length parameter of a null-terminated string.</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16230"></a>
<div class="props_rev_3"><a id="GUID-B0824786-D546-4F10-8089-261B9238E390"></a>
<h3 id="LNOCI-GUID-B0824786-D546-4F10-8089-261B9238E390" class="sect3">Inserting Nulls into a Column</h3>
<div>
<p>How to insert a null into a database column.</p>
<p>You can insert a null into a database column in several ways.</p>
<ul style="list-style-type: disc;">
<li>
<p>One method is to use a literal <code class="codeph">NULL</code> in the text of an <code class="codeph">INSERT</code> or <code class="codeph">UPDATE</code> statement. For example, the SQL statement makes the <code class="codeph">ENAME</code> column <code class="codeph">NULL</code>.</p>
<pre dir="ltr">     INSERT INTO emp1 (ename, empno, deptno)
        VALUES (NULL, 8010, 20)
</pre></li>
<li>
<p>Use indicator variables in the OCI bind call.</p>
</li>
<li>
<p>Insert a <code class="codeph">NULL</code> to set both the buffer length and maximum length parameters to zero on a bind call.</p>
<div class="infobox-note" id="GUID-B0824786-D546-4F10-8089-261B9238E390__GUID-45409650-CCF1-4AF0-94FE-00D89C3D8EAB">
<p class="notep1">Note:</p>
<p>Following the SQL standard requirements, Oracle Database returns an error if an attempt is made to fetch a null select-list item into a variable that does not have an associated indicator variable specified in the define call.</p>
</div>
</li>
</ul>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="oci02bas.htm#GUID-9966EDF7-37ED-42E5-AE57-67E394245BFA" title="Each bind and define OCI call has a parameter that associates an indicator variable, or an array of indicator variables, with a DML statement, a PL/SQL statement, or a query.">Indicator Variables</a></li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16231"></a>
<div class="props_rev_3"><a id="GUID-9966EDF7-37ED-42E5-AE57-67E394245BFA"></a>
<h3 id="LNOCI-GUID-9966EDF7-37ED-42E5-AE57-67E394245BFA" class="sect3">Indicator Variables</h3>
<div>
<p>Each bind and define OCI call has a parameter that associates an indicator variable, or an array of indicator variables, with a DML statement, a PL/SQL statement, or a query.</p>
<p>The C language does not have the concept of null values; therefore, you associate indicator variables with input variables to specify whether the associated placeholder is a <code class="codeph">NULL</code>. When data is passed to an Oracle database, the values of these indicator variables determine whether a <code class="codeph">NULL</code> is assigned to a database field.</p>
<p>For output variables, indicator variables determine whether the value returned from Oracle is a <code class="codeph">NULL</code> or a truncated value. For a <code class="codeph">NULL</code> fetch in an <code class="codeph">OCIStmtFetch2()</code> call or a truncation in an <code class="codeph">OCIStmtExecute()</code> call, the OCI call returns <code class="codeph">OCI_SUCCESS_WITH_INFO</code>. The output indicator variable is set.</p>
<p>The data type of indicator variables is <code class="codeph">sb2</code>. For arrays of indicator variables, the individual array elements should be of type <code class="codeph">sb2</code>.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-D5C9F516-018D-4E75-B236-DE4A9B2938B3">Input</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-951C3617-BC07-445C-8C54-6413D7779542">Output</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-5FED7690-8C8C-408E-9652-EF1314EB6EE4" title="Indicator variables for most data types introduced after release 8.0 behave as described earlier.">Indicator Variables for Named Data Types and REFs</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16232"></a>
<div class="props_rev_3"><a id="GUID-D5C9F516-018D-4E75-B236-DE4A9B2938B3"></a>
<h4 id="LNOCI-GUID-D5C9F516-018D-4E75-B236-DE4A9B2938B3" class="sect4">Input</h4>
<div>
<div class="section">
<p>For input host variables, the OCI application can assign the following values to an indicator variable:</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-D5C9F516-018D-4E75-B236-DE4A9B2938B3__GUID-D86DD14E-396F-4BC6-9C49-715EF4780C47">
<table class="cellalignment6175" summary="Input indicator values vs. action taken">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6165" id="d22181e11904">Input Indicator Value</th>
<th class="cellalignment6235" id="d22181e11907">Action Taken by Oracle Database</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6169" id="d22181e11912" headers="d22181e11904">
<p>-1</p>
</td>
<td class="cellalignment6236" headers="d22181e11912 d22181e11907">
<p>Oracle Database assigns a <code class="codeph">NULL</code> to the column, ignoring the value of the input variable.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6169" id="d22181e11922" headers="d22181e11904">
<p>&gt;=0</p>
</td>
<td class="cellalignment6236" headers="d22181e11922 d22181e11907">
<p>Oracle Database assigns the value of the input variable to the column.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI16233"></a>
<div class="props_rev_3"><a id="GUID-951C3617-BC07-445C-8C54-6413D7779542"></a>
<h4 id="LNOCI-GUID-951C3617-BC07-445C-8C54-6413D7779542" class="sect4">Output</h4>
<div>
<div class="section">
<p>On output, Oracle Database can assign the following values to an indicator variable:</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-951C3617-BC07-445C-8C54-6413D7779542__GUID-DBDE2787-8124-4FC1-994B-80DE8E096879">
<table class="cellalignment6175" summary="Output indicator values and meaning">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6165" id="d22181e12087">Output Indicator Value</th>
<th class="cellalignment6235" id="d22181e12090">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6169" id="d22181e12095" headers="d22181e12087">
<p>-2</p>
</td>
<td class="cellalignment6236" headers="d22181e12095 d22181e12090">
<p>The length of the item is greater than the length of the output variable; the item has been truncated. Additionally, the original length is longer than the maximum data length that can be returned in the <code class="codeph">sb2</code> indicator variable.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6169" id="d22181e12105" headers="d22181e12087">
<p>-1</p>
</td>
<td class="cellalignment6236" headers="d22181e12105 d22181e12090">
<p>The selected value is null, and the value of the output variable is unchanged.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6169" id="d22181e12112" headers="d22181e12087">
<p>0</p>
</td>
<td class="cellalignment6236" headers="d22181e12112 d22181e12090">
<p>Oracle Database assigned an intact value to the host variable.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6169" id="d22181e12119" headers="d22181e12087">
<p>&gt;0</p>
</td>
<td class="cellalignment6236" headers="d22181e12119 d22181e12090">
<p>The length of the item is greater than the length of the output variable; the item has been truncated. The positive value returned in the indicator variable is the actual length before truncation.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI16234"></a>
<div class="props_rev_3"><a id="GUID-5FED7690-8C8C-408E-9652-EF1314EB6EE4"></a>
<h4 id="LNOCI-GUID-5FED7690-8C8C-408E-9652-EF1314EB6EE4" class="sect4">Indicator Variables for Named Data Types and REFs</h4>
<div>
<p>Indicator variables for most data types introduced after release 8.0 behave as described earlier.</p>
<p>The only exception is SQLT_NTY (a named data type). For data of type SQLT_NTY, the indicator variable must be a pointer to an indicator structure. Data of type SQLT_REF uses a standard scalar indicator, just like other variable types.</p>
<p>When database types are translated into C struct representations using the Object Type Translator (OTT), a null indicator structure is generated for each object type. This structure includes an atomic null indicator, plus indicators for each object attribute.</p>
<div class="infoboxnotealso" id="GUID-5FED7690-8C8C-408E-9652-EF1314EB6EE4__GUID-A2C4C79A-70FA-4801-8AF3-1EE10AA49C21">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p>Documentation for the OTT in <a href="oci15ott.htm#GUID-3D22CA8E-BE01-492F-BA85-DDD0CD3F4890" title="This chapter discusses the Object Type Translator (OTT), which is used to map database object types and named collection types to C structs for use in OCI applications.">Using the Object Type Translator with OCI</a>, and <a href="oci11obj.htm#GUID-D0FD9D2E-DAE1-4468-B90A-DE19B03CB0F3" title="If a column in a row of a database table has no value, then that column is said to be NULL, or to contain a NULL.">NULL Indicator Structure</a> for information about NULL indicator structures</p>
</li>
<li>
<p>Descriptions of <code class="codeph">OCIBindByName()</code> and <code class="codeph">OCIBindByPos()</code> in <a href="oci16rel003.htm#GUID-1A6A21C8-F2EB-4F4C-9F23-DCE7D433C3A0" title="Sets up the skip parameters for a static array bind.Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this function when working with data types when actual lengths exceed UB2MAXVAL on the client.Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.Registers user callbacks for dynamic data allocation. Specifies additional attributes necessary for a static array define, used in an array of structures (multirow, multicolumn) fetch.Associates an item in a select list with the type and output data buffer. Associates an item in a select list with the type and output data buffer. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.Sets the additional attributes required if the OCI_DYNAMIC_FETCH mode was selected in OCIDefineByPos() or OCIDefineByPos2().Sets up additional attributes necessary for a named data type or REF define.Describes existing schema and subschema objects.Gets the bind and indicator variable names.">Bind, Define, and Describe Functions</a>, and the sections <a href="oci12oty.htm#GUID-BB043B77-4B3C-4A1C-A4E4-9F225E0DF1BB">Information for Named Data Type and REF Binds</a>, and <a href="oci12oty.htm#GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11" title="Consider the following important information as you work with named data type and REF defines. It includes pointers about memory allocation and indicator variable usage.">Information for Named Data Type and REF Defines, and PL/SQL OUT Binds</a> for more information about setting indicator parameters for named data types and <code class="codeph">REF</code>s</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="LNOCI16235"></a>
<div class="props_rev_3"><a id="GUID-25EBC682-2D92-4748-985D-9F1B60F03CBA"></a>
<h3 id="LNOCI-GUID-25EBC682-2D92-4748-985D-9F1B60F03CBA" class="sect3">About Canceling Calls</h3>
<div>
<p>How do you cancel long-running or repeated OCI calls.</p>
<p>On most operating systems, you can cancel long-running or repeated OCI calls by entering the operating system&#39;s interrupt character (usually Control+C) from the keyboard.</p>
<div class="infobox-note" id="GUID-25EBC682-2D92-4748-985D-9F1B60F03CBA__GUID-E04EAE4B-6421-4E83-9706-A2E34C312818">
<p class="notep1">Note:</p>
<p>This is not to be confused with canceling a cursor, which is accomplished by calling <code class="codeph">OCIStmtFetch2()</code> with the <code class="codeph">nrows</code> parameter set to zero.</p>
</div>
<p>When you cancel the long-running or repeated call using the operating system interrupt, the error code <code class="codeph">ORA-01013</code> (&#34;user requested cancel of current operation&#34;) is returned.</p>
<p>When given a particular service context pointer or server context pointer, the <code class="codeph">OCIBreak()</code> function performs an immediate (asynchronous) stop of any currently executing OCI function associated with the server. It is normally used to stop a long-running OCI call being processed on the server. The <code class="codeph">OCIReset()</code> function is necessary to perform a protocol synchronization on a nonblocking connection after an OCI application stops a function with <code class="codeph">OCIBreak()</code>.</p>
<div class="infobox-note" id="GUID-25EBC682-2D92-4748-985D-9F1B60F03CBA__GUID-2BC8FEA4-D72F-4669-A725-E9B2C5A20580">
<p class="notep1">Note:</p>
<p><code class="codeph">OCIBreak()</code> works on Windows systems.</p>
</div>
<p>The status of potentially long-running calls can be monitored using nonblocking calls. Use multithreading for new applications.</p>
<div class="infoboxnotealso" id="GUID-25EBC682-2D92-4748-985D-9F1B60F03CBA__GUID-7C87AF01-6A34-44BA-84C3-C4D5431B369B">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci08sca.htm#GUID-FB0528A0-460A-4778-9703-52BB0932E911" title="Threads are lightweight processes that exist within a larger process.">Overview of OCI Multithreaded Development</a></p>
</li>
<li>
<p><a href="oci08sca.htm#GUID-AAE70C09-E0D8-4264-8E88-1D6916ABF717" title="The OCIThread package provides some commonly used threading primitives.">OCIThread Package</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16236"></a>
<div class="props_rev_3"><a id="GUID-392BDD6B-01A9-4F9D-9A86-C230B0F59753"></a>
<h3 id="LNOCI-GUID-392BDD6B-01A9-4F9D-9A86-C230B0F59753" class="sect3">Positioned Updates and Deletes</h3>
<div>
<p>You can use the <code class="codeph">ROWID</code> associated with a <code class="codeph">SELECT</code>...<code class="codeph">FOR</code> <code class="codeph">UPDATE</code> <code class="codeph">OF</code>... statement in a later <code class="codeph">UPDATE</code> or <code class="codeph">DELETE</code> statement.</p>
<p>The <code class="codeph">ROWID</code> is retrieved by calling <code class="codeph">OCIAttrGet()</code> on the statement handle to retrieve the handle&#39;s <code class="codeph">OCI_ATTR_ROWID</code> attribute.</p>
<p>For example, consider a SQL statement such as the following:</p>
<pre dir="ltr">SELECT ename FROM emp1 WHERE empno = 7499 FOR UPDATE OF sal
</pre>
<p>When the fetch is performed, the <code class="codeph">ROWID</code> attribute in the handle contains the row identifier of the selected row. You can retrieve the <code class="codeph">ROWID</code> into a buffer in your program by calling <code class="codeph">OCIAttrGet()</code> as follows:</p>
<pre dir="ltr">OCIRowid *rowid;   /* the rowid in opaque format */
/* allocate descriptor with OCIDescriptorAlloc() */
status = OCIDescriptorAlloc ((void  *) envhp, (void  **) &amp;rowid,
     (ub4) OCI_DTYPE_ROWID, (size_t) 0, (void  **) 0);
status = OCIAttrGet ((void *) mystmtp, OCI_HTYPE_STMT,
     (void *) rowid, (ub4 *) 0, OCI_ATTR_ROWID, (OCIError *) myerrhp);
</pre>
<p>You can then use the saved <code class="codeph">ROWID</code> in a <code class="codeph">DELETE</code> or <code class="codeph">UPDATE</code> statement. For example, if <code class="codeph">rowid</code> is the buffer in which the row identifier has been saved, you can later process a SQL statement such as the following by binding the new salary to the <code class="codeph">:1</code> placeholder and <code class="codeph">rowid</code> to the <code class="codeph">:2</code> placeholder.</p>
<pre dir="ltr">UPDATE emp1 SET sal = :1 WHERE rowid = :2
</pre>
<p>Be sure to use data type code 104 (<code class="codeph">ROWID</code> descriptor, see <a href="oci03typ.htm#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGIEEJI" title="This table has 4 columns. Column 1 is the external Oracle Database data type, column 2 is the data type code, and column 3 is the program variable type for C, and column 4 is the OCI-defined constant.">Table 3-2</a>) when binding <code class="codeph">rowid</code> to <code class="codeph">:2</code>.</p>
<p>By using prefetching, you can select an array of <code class="codeph">ROWID</code>s for use in subsequent batch updates.</p>
<div class="infoboxnotealso" id="GUID-392BDD6B-01A9-4F9D-9A86-C230B0F59753__GUID-D71BCC8B-2926-4D3E-B972-4C49B3CBCCE7">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-F3B74702-3C7C-4A99-BBE5-52122277F9B6">UROWID</a> and <a href="oci03typ.htm#GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328" title="The DATE data type can update, insert, or retrieve a date value using the Oracle internal date binary format.">DATE</a> for more information about <code class="codeph">ROWID</code>s</p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805" title="Lists and describes the data type codes for external data types.">External Data Types</a> for a table of external data types and codes</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16237"></a>
<div class="props_rev_3"><a id="GUID-6DCD7944-1AA5-40D6-B969-99564EF38299"></a>
<h3 id="LNOCI-GUID-6DCD7944-1AA5-40D6-B969-99564EF38299" class="sect3">Reserved Words</h3>
<div>
<p>Some words are reserved by Oracle.</p>
<p>That is, some reserved words have a special meaning to Oracle and cannot be redefined. For this reason, you cannot use them to name database objects such as columns, tables, or indexes.</p>
<p>This section includes the following topic: <a href="oci02bas.htm#GUID-79245A3F-6AC1-4864-9F8C-B2A7BCCF58FC">Oracle Reserved Namespaces</a></p>
<div class="infoboxnotealso" id="GUID-6DCD7944-1AA5-40D6-B969-99564EF38299__GUID-E05F9466-0155-4643-B8FF-79DD06F02217">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF022" target="_blank" href="../SQLRF/ap_keywd.htm#SQLRF022"><span><cite>Oracle Database SQL Language Reference</cite></span></a> and <a class="olink LNPLS019" target="_blank" href="../LNPLS/reservedwords.htm#LNPLS019"><span><cite>Oracle Database PL/SQL Language Reference</cite></span></a> to view the lists of the Oracle keywords or reserved words for SQL and PL/SQL</p>
</div>
</div>
<a id="LNOCI16239"></a><a id="LNOCI16238"></a>
<div class="props_rev_3"><a id="GUID-79245A3F-6AC1-4864-9F8C-B2A7BCCF58FC"></a>
<h4 id="LNOCI-GUID-79245A3F-6AC1-4864-9F8C-B2A7BCCF58FC" class="sect4">Oracle Reserved Namespaces</h4>
<div>
<div class="section">
<p><a href="oci02bas.htm#GUID-79245A3F-6AC1-4864-9F8C-B2A7BCCF58FC__G466511" title="This table has 2 columns. Column 1 is the namespace name and column 2 is its associated Oracle library.">Table 2-5</a> contains a list of namespaces that are reserved by Oracle. The initial characters of function names in Oracle libraries are restricted to the character strings in this list. Because of potential name conflicts, do not use function names that begin with these characters.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-79245A3F-6AC1-4864-9F8C-B2A7BCCF58FC__G466511">
<p class="titleintable">Table 2-5 Oracle Reserved Namespaces</p>
<table class="cellalignment6175" title="Oracle Reserved Namespaces " summary="This table has 2 columns. Column 1 is the namespace name and column 2 is its associated Oracle library.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6245" id="d22181e13234">Namespace</th>
<th class="cellalignment6249" id="d22181e13237">Library</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13242" headers="d22181e13234">
<p><code class="codeph">XA</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13242 d22181e13237">
<p>External functions for XA applications only</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13250" headers="d22181e13234">
<p><code class="codeph">SQ</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13250 d22181e13237">
<p>External SQLLIB functions used by Oracle Precompiler and SQL*Module applications</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13258" headers="d22181e13234">
<p><code class="codeph">O, OCI</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13258 d22181e13237">
<p>External OCI functions internal OCI functions</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13266" headers="d22181e13234">
<p><code class="codeph">UPI, KP</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13266 d22181e13237">
<p>Function names from the Oracle UPI layer</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13274" headers="d22181e13234">
<p><code class="codeph">NA</code></p>
<p><code class="codeph">NC</code></p>
<p><code class="codeph">ND</code></p>
<p><code class="codeph">NL</code></p>
<p><code class="codeph">NM</code></p>
<p><code class="codeph">NR</code></p>
<p><code class="codeph">NS</code></p>
<p><code class="codeph">NT</code></p>
<p><code class="codeph">NZ</code></p>
<p><code class="codeph">OSN</code></p>
<p><code class="codeph">TTC</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13274 d22181e13237">
<p>Oracle Net Native Services Product</p>
<p>Oracle Net RPC Project</p>
<p>Oracle Net Directory</p>
<p>Oracle Net Network Library Layer</p>
<p>Oracle Net Management Project</p>
<p>Oracle Net Interchange</p>
<p>Oracle Net Transparent Network Service</p>
<p>Oracle Net Drivers</p>
<p>Oracle Net Security Service</p>
<p>Oracle Net V1</p>
<p>Oracle Net Two Task</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13332" headers="d22181e13234">
<p><code class="codeph">GEN, L, ORA</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13332 d22181e13237">
<p>Core library functions</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13340" headers="d22181e13234">
<p><code class="codeph">LI, LM, LX</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13340 d22181e13237">
<p>Function names from the Oracle Globalization Support layer</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13348" headers="d22181e13234">
<p><code class="codeph">S</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13348 d22181e13237">
<p>Function names from system-dependent libraries</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d22181e13356" headers="d22181e13234">
<p><code class="codeph">KO</code></p>
</td>
<td class="cellalignment6250" headers="d22181e13356 d22181e13237">
<p>Kernel Objects</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<p>For a complete list of functions within a particular namespace, refer to the document that corresponds to the appropriate Oracle library.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="LNOCI72588"></a>
<div class="props_rev_3"><a id="GUID-83F4D3B1-56A7-4EEE-A905-BB84D399713D"></a>
<h3 id="LNOCI-GUID-83F4D3B1-56A7-4EEE-A905-BB84D399713D" class="sect3">Polling Mode Operations in OCI</h3>
<div>
<p>OCI has calls that poll for completion. Examples of such polling mode calls are:</p>
<ul style="list-style-type: disc;">
<li>
<p>OCI calls in nonblocking mode</p>
</li>
<li>
<p>OCI calls that operate on LOB data in pieces such as <a href="oci17msc002.htm#GUID-6AC6E6DA-236B-4BF9-942F-9FCC4178FEDA" title="Reads a portion of a LOB or BFILE, as specified by the call, into a buffer. This function must be used for LOBs of size greater than 4 GB.">OCILobRead2()</a> and <a href="oci17msc002.htm#GUID-77F056CA-9EEE-4550-8A8E-0155DF994DBE" title="Writes a buffer into a LOB. This function must be used for LOBs of size greater than 4 GB.">OCILobWrite2()</a></p>
</li>
<li>
<p><a href="oci17msc001.htm#GUID-98B26708-3E02-45C0-8258-5D5544F32BE9" title="Associates an application request with a server.">OCIStmtExecute()</a> and <a href="oci17msc001.htm#GUID-DF585B90-58BA-45FC-B7CE-6F7F987C03B9" title="Fetches a row from the (scrollable) result set.">OCIStmtFetch2()</a> when used with <a href="oci17msc001.htm#GUID-CDB6F3E3-0FB6-49A7-A8AE-83CD330A359F" title="Sets piece information for a piecewise operation.">OCIStmtSetPieceInfo()</a> and <a href="oci17msc001.htm#GUID-3D9B5C7B-E2A1-485D-852C-2434F303EC11" title="Returns piece information for a piecewise operation.">OCIStmtGetPieceInfo()</a></p>
</li>
</ul>
<p>In such cases, OCI requires that the application ensure that the same OCI call is repeated on the connection and nothing else is done on the connection in the interim. Performing any other OCI call on such a connection (when OCI has handed control back to the caller) can result in unexpected behavior.</p>
<p>Hence, with such polling mode OCI calls, the caller must ensure that the same call is repeated on the connection and that nothing else is done until the call completes.</p>
<p><a href="oci17msc007.htm#GUID-A414B5DE-07A3-4593-A448-B6023F87C2D0" title="Performs an immediate asynchronous break.">OCIBreak()</a> and <a href="oci17msc007.htm#GUID-7223B6DC-12C5-4C7E-80D2-83FB35655BE1">OCIReset()</a> are exceptions to the rule. These calls are allowed so that the caller can stop an OCI call that has been started.</p>
</div>
</div>
<a id="LNOCI16240"></a>
<div class="props_rev_3"><a id="GUID-48410BC4-D4DB-442F-960F-D23D011377FB"></a>
<h3 id="LNOCI-GUID-48410BC4-D4DB-442F-960F-D23D011377FB" class="sect3">Nonblocking Mode in OCI</h3>
<div>
<p>OCI provides the ability to establish a server connection in <span class="italic">blocking mode</span> or <span class="italic">nonblocking mode</span>.</p>
<div class="infobox-note" id="GUID-48410BC4-D4DB-442F-960F-D23D011377FB__GUID-307E2D32-EC5C-4D6E-9AB2-F85E7FD7E5D8">
<p class="notep1">Note:</p>
<p>Because nonblocking mode requires the caller to repeat the same call until it completes, it increases CPU usage. Instead, use multithreaded mode.</p>
</div>
<div class="infoboxnotealso" id="GUID-48410BC4-D4DB-442F-960F-D23D011377FB__GUID-E3D81807-262A-4F66-9FE0-A8C71C4C6866">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci08sca.htm#GUID-FB0528A0-460A-4778-9703-52BB0932E911" title="Threads are lightweight processes that exist within a larger process.">Overview of OCI Multithreaded Development</a></p>
</li>
<li>
<p><a href="oci08sca.htm#GUID-AAE70C09-E0D8-4264-8E88-1D6916ABF717" title="The OCIThread package provides some commonly used threading primitives.">OCIThread Package</a></p>
</li>
</ul>
</div>
<p>When a connection is made in blocking mode, an OCI call returns control to an OCI client application only when the call completes, either successfully or in error. With the nonblocking mode, control is immediately returned to the OCI program if the call could not complete, and the call returns a value of <code class="codeph">OCI_STILL_EXECUTING</code>.</p>
<p>In nonblocking mode, an application must test the return code of each OCI function to see if it returns <code class="codeph">OCI_STILL_EXECUTING</code>. If it does, the OCI client can continue to process program logic while waiting to retry the OCI call to the server. This mode is particularly useful in graphical user interface (GUI) applications, real-time applications, and in distributed environments.</p>
<p>The nonblocking mode is not interrupt-driven. Rather, it is based on a polling paradigm, which means that the client application must check whether the pending call is finished at the server by executing the call again <span class="italic">with the exact same parameters</span>.</p>
<p>The following features and functions are not supported in nonblocking mode:</p>
<ul style="list-style-type: disc;">
<li>
<p>Direct Path Load</p>
</li>
<li>
<p>LOB buffering</p>
</li>
<li>
<p>Objects</p>
</li>
<li>
<p>Query cache</p>
</li>
<li>
<p>Scrollable cursors</p>
</li>
<li>
<p>Transparent application failover (TAF)</p>
</li>
<li>
<p><code class="codeph">OCIAQEnqArray</code>()</p>
</li>
<li>
<p><code class="codeph">OCIAQDeqArray()</code></p>
</li>
<li>
<p><code class="codeph">OCIDescribeAny()</code></p>
</li>
<li>
<p><code class="codeph">OCILobArrayRead()</code></p>
</li>
<li>
<p><code class="codeph">OCILobArrayWrite()</code></p>
</li>
<li>
<p><code class="codeph">OCITransStart()</code></p>
</li>
<li>
<p><code class="codeph">OCITransDetach()</code></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16241"></a>
<div class="props_rev_3"><a id="GUID-EDCDDC7B-A912-4EE8-AEB5-89755590190F"></a>
<h3 id="LNOCI-GUID-EDCDDC7B-A912-4EE8-AEB5-89755590190F" class="sect3">Setting Blocking Modes</h3>
<div>
<p>You can modify or check an application&#39;s blocking status by calling <code class="codeph">OCIAttrSet()</code> to set the status, or <code class="codeph">OCIAttrGet()</code> to read the status on the server context handle with the <code class="codeph">attrtype</code> parameter set to <code class="codeph">OCI_ATTR_NONBLOCKING_MODE</code>.</p>
<p>You must set this <code class="codeph">OCI_ATTR_NONBLOCKING_MODE</code> attribute only after <code class="codeph">OCISessionBegin()</code> or <code class="codeph">OCILogon2()</code> has been called. Otherwise, an error is returned.</p>
<div class="infobox-note" id="GUID-EDCDDC7B-A912-4EE8-AEB5-89755590190F__GUID-EBB03E79-550B-4795-950D-227C9C52B3EC">
<p class="notep1">Note:</p>
<p>Only functions that have a server context or a service context handle as a parameter can return <code class="codeph">OCI_STILL_EXECUTING</code>.</p>
</div>
<div class="infoboxnotealso" id="GUID-EDCDDC7B-A912-4EE8-AEB5-89755590190F__GUID-E2AC6959-A306-4F32-B9FC-E4BB4990A321">
<p class="notep1">See Also:</p>
<p><a href="ociaahan.htm#GUID-2B6D06A7-8EDF-46FF-BDEF-320D293DCA65">Server Handle Attributes</a></p>
</div>
</div>
</div>
<a id="LNOCI16242"></a>
<div class="props_rev_3"><a id="GUID-615787D2-F6F5-4B8D-9EF5-7CCD0E3A58AF"></a>
<h3 id="LNOCI-GUID-615787D2-F6F5-4B8D-9EF5-7CCD0E3A58AF" class="sect3">Canceling a Nonblocking Call</h3>
<div>
<p>You can cancel a long-running OCI call by using the <a href="oci17msc007.htm#GUID-A414B5DE-07A3-4593-A448-B6023F87C2D0" title="Performs an immediate asynchronous break.">OCIBreak()</a> function while the OCI call is in progress. You must then issue an <a href="oci17msc007.htm#GUID-7223B6DC-12C5-4C7E-80D2-83FB35655BE1">OCIReset()</a> call to reset the asynchronous operation and protocol.</p>
</div>
</div>
</div>
<a id="LNOCI16243"></a>
<div class="props_rev_3"><a id="GUID-46090C93-4BC4-4E88-AA09-3E9B716917A3"></a>
<h2 id="LNOCI-GUID-46090C93-4BC4-4E88-AA09-3E9B716917A3" class="sect2">About Using PL/SQL in an OCI Program</h2>
<div>
<p>PL/SQL is Oracle&#39;s procedural extension to the SQL language.</p>
<p>PL/SQL supports tasks that are more complicated than simple queries and SQL data manipulation language (DML) statements. PL/SQL enables you to group some constructs into a single block and execute it as a unit. These constructs include:</p>
<ul style="list-style-type: disc;">
<li>
<p>One or more SQL statements</p>
</li>
<li>
<p>Variable declarations</p>
</li>
<li>
<p>Assignment statements</p>
</li>
<li>
<p>Procedural control statements such as <code class="codeph">IF...THEN...ELSE</code> statements and loops</p>
</li>
<li>
<p>Exception handling</p>
</li>
</ul>
<p>You can use PL/SQL blocks in your OCI program to perform the following operations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Call Oracle stored procedures and stored functions</p>
</li>
<li>
<p>Combine procedural control statements with several SQL statements, to be executed as a unit</p>
</li>
<li>
<p>Access special PL/SQL features such as tables, <code class="codeph">CURSOR FOR</code> loops, and exception handling</p>
</li>
<li>
<p>Use cursor variables</p>
</li>
<li>
<p>Operate on objects in a server</p>
<div class="infobox-note" id="GUID-46090C93-4BC4-4E88-AA09-3E9B716917A3__GUID-B3AACCE2-8701-4EF2-8558-93D8170A4C28">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>Although OCI can only directly process anonymous blocks, and not named packages or procedures, you can always put the package or procedure call within an anonymous block and process that block.</p>
</li>
<li>
<p>Note that all OUT variables must be initialized to <code class="codeph">NULL</code> (through an indicator of -1, or an actual length of 0) before a PL/SQL begin-end block can be executed in OCI.</p>
</li>
<li>
<p>OCI does not support the PL/SQL <code class="codeph">RECORD</code> data type.</p>
</li>
<li>
<p>When binding a PL/SQL VARCHAR2 variable in OCI, the maximum size of the bind variable is 32512 bytes, because of the overhead of control structures.</p>
</li>
</ul>
</div>
<div class="infobox-note" id="GUID-46090C93-4BC4-4E88-AA09-3E9B716917A3__GUID-5CD9C58C-DD1E-48E0-B757-74E1781A1796">
<p class="notep1">Note:</p>
<p>When you write PL/SQL code, it is important to remember that the parser treats everything between a pair of hyphens&#34;--&#34; and a carriage return character as a comment. So if comments are indicated on each line by &#34;--&#34;, the C compiler can concatenate all lines in a PL/SQL block into a single line without putting a carriage return &#34;\n&#34; for each line. In this particular case, the parser fails to extract the PL/SQL code of a line if the previous line ends with a comment. To avoid the problem, the programmer should put &#34;\n&#34; after each &#34;--&#34; comment to ensure that the comment ends there.</p>
</div>
<div class="infoboxnotealso" id="GUID-46090C93-4BC4-4E88-AA09-3E9B716917A3__GUID-69FA61BE-6026-4E70-AB38-206329EFE0B6">
<p class="notep1">See Also:</p>
<p><a class="olink LNPLS-GUID-826B070B-4888-4398-889B-61A3C6B91349" target="_blank" href="../LNPLS/overview.htm#LNPLS-GUID-826B070B-4888-4398-889B-61A3C6B91349"><span><cite>Oracle Database PL/SQL Language Reference</cite></span></a> for information about coding PL/SQL blocks</p>
</div>
</li>
</ul>
</div>
</div>
<a id="LNOCI16244"></a>
<div class="props_rev_3"><a id="GUID-09672717-CAFD-41D3-9D11-9139B6FB460C"></a>
<h2 id="LNOCI-GUID-09672717-CAFD-41D3-9D11-9139B6FB460C" class="sect2">OCI Globalization Support</h2>
<div>
<p>The following sections introduce OCI functions that can be used for globalization purposes, such as deriving locale information, manipulating strings, character set conversion, and OCI messaging.</p>
<p>These functions are also described in detail in other chapters of this guide because they have multiple purposes and functionality.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-87D07567-1165-4DE7-B551-F70DD61DF1A8" title="The function OCIEnvNlsCreate() enables you to set character set information in applications independently from NLS_LANG and NLS_NCHAR settings.">Client Character Set Control from OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-F76D4D82-156B-44EA-AF9B-5E52E6498ECC" title="How is character control performed by OCI interfaces.">Character Control and OCI Interfaces</a></p>
</li>
<li>
<p><a href="oci06des.htm#GUID-6941EC35-5C3F-4031-94E5-2347C4ABE96A" title="Query and column information are supported with character-length semantics.">Character-Length Semantics Support in Describe Operations</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-B39E5781-C1FB-4A3A-8D9A-C9F0273966E5" title="How does OCI support character sets.">Character Set Support in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-BD4EBBEC-3809-4944-B15A-5AEF34FD2470">Controlling Language and Territory in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-FE3D24F2-E3C7-4320-B713-B9A3CE7AA620" title="Many globalization support functions accept either the environment handle or the user session handle.">Other OCI Globalization Support Functions</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-A9961209-BBDB-464C-B102-50576FA501FB" title="An Oracle Database locale consists of language, territory, and character set definitions.">About Getting Locale Information in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-D1D359A3-5057-4492-805A-98A53E746322" title="OCI does not support nor handle the BOM (byte order mark) and assumes that the byte order is native to the machine on which your application is executing.">About OCI and the BOM (Byte Order Mark)</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA" title="Multibyte strings and wide-character strings are supported for string manipulation.">About Manipulating Strings in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-5A77144F-9929-4AA2-A48E-DF8C6A57320B" title="Conversion between Oracle character sets and Unicode (16-bit, fixed-width Unicode encoding) is supported.">About Converting Character Sets in OCI</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-27257B5E-0604-4BF9-A616-73D2625885F7" title="The user message API provides a simple interface for cartridge developers to retrieve their own messages and Oracle Database messages.">OCI Messaging Functions</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-662DDC47-BB19-4988-BA99-1AA0520C84FE" title="The lmsgen utility converts text-based message files (.msg) into binary format (.msb) so that Oracle Database messages and OCI messages provided by the user can be returned to OCI functions in the desired language.">lmsgen Utility</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16245"></a>
<div class="props_rev_3"><a id="GUID-87D07567-1165-4DE7-B551-F70DD61DF1A8"></a>
<h3 id="LNOCI-GUID-87D07567-1165-4DE7-B551-F70DD61DF1A8" class="sect3">Client Character Set Control from OCI</h3>
<div>
<p>The function <code class="codeph">OCIEnvNlsCreate()</code> enables you to set character set information in applications independently from <code class="codeph">NLS_LANG</code> and <code class="codeph">NLS_NCHAR</code> settings.</p>
<p><code class="codeph">OCI_UTF16ID</code> cannot be set from <code class="codeph">NLS_LANG</code> or <code class="codeph">NLS_NCHAR</code> and must be set using <code class="codeph">OCIEnvNlsCreate()</code>. One application can have several environment handles initialized within the same system environment using different client-side character set IDs and national character set IDs. For example:</p>
<pre dir="ltr">OCIEnvNlsCreate(OCIEnv **envhpp, ..., csid, ncsid); 
</pre>
<p>In this example, <code class="codeph">csid</code> is the value for the character set ID for the parameter <code class="codeph">charset</code>, and <code class="codeph">ncsid</code> is the value for the national character set ID for the parameter <code class="codeph">ncharset</code>. Either can be 0 or <code class="codeph">OCI_UTF16ID</code>. If both are 0, this is equivalent to using <code class="codeph">OCIEnvCreate()</code> instead. The other arguments are the same as for the <code class="codeph">OCIEnvCreate()</code> call.</p>
<p>Any Oracle character set ID, except AL16UTF16, can be specified through the <code class="codeph">OCIEnvNlsCtrate()</code> function to specify the encoding of metadata, SQL <code class="codeph">CHAR</code> data, and SQL <code class="codeph">NCHAR</code> data.</p>
<p>You can retrieve character sets in <code class="codeph">NLS_LANG</code> and <code class="codeph">NLS_NCHAR</code> through another function, <code class="codeph">OCINlsEnvironmentVariableGet()</code>.</p>
<div class="infoboxnotealso" id="GUID-87D07567-1165-4DE7-B551-F70DD61DF1A8__GUID-603E3859-CB73-4244-A23E-22C4A45DE647">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci16rel001.htm#GUID-0B6911A9-4B46-476C-BC5E-B87581666CD9" title="Creates and initializes an environment handle for OCI functions to work under.">OCIEnvNlsCreate()</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#GUID-1EC425D9-4DC2-4A94-95E4-13DD7BFE3A28">About Setting Client Character Sets in OCI</a> for a pseudocode fragment that illustrates a sample usage of these calls</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16247"></a>
<div class="props_rev_3"><a id="GUID-F76D4D82-156B-44EA-AF9B-5E52E6498ECC"></a>
<h3 id="LNOCI-GUID-F76D4D82-156B-44EA-AF9B-5E52E6498ECC" class="sect3">Character Control and OCI Interfaces</h3>
<div>
<p>How is character control performed by OCI interfaces.</p>
<p>The <code class="codeph">OCINlsGetInfo()</code> function returns information about any character set, including <code class="codeph">OCI_UTF16ID</code> if this value has been used in <code class="codeph">OCIEnvNlsCreate()</code>.</p>
<p>The <code class="codeph">OCIAttrGet()</code> function returns the character set ID and national character set ID that were passed into <code class="codeph">OCIEnvNlsCreate()</code>. This is used to get <code class="codeph">OCI_ATTR_ENV_CHARSET_ID</code> and <code class="codeph">OCI_ATTR_ENV_NCHARSET_ID</code>. This includes the value <code class="codeph">OCI_UTF16ID</code>.</p>
<p>If both <code class="codeph">charset</code> and <code class="codeph">ncharset</code> parameters were set to 0 by <code class="codeph">OCIEnvNlsCreate()</code>, the character set IDs in <code class="codeph">NLS_LANG</code> and <code class="codeph">NLS_NCHAR</code> are returned.</p>
<p>The <code class="codeph">OCIAttrSet()</code> function sets character IDs as the defaults if <code class="codeph">OCI_ATTR_CHARSET_FORM</code> is reset through this function. The eligible character set IDs include <code class="codeph">OCI_UTF16ID</code> if <code class="codeph">OCIEnvNlsCreate()</code> is passed as <code class="codeph">charset</code> or <code class="codeph">ncharset</code>.</p>
<p>The <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByName2()</code> and <code class="codeph">OCIBindByPos()</code> or <code class="codeph">OCIBindByPos2()</code> functions bind variables with the default character set in the <code class="codeph">OCIEnvNlsCreate()</code> call, including <code class="codeph">OCI_UTF16ID</code>. The actual length and the returned length are always in bytes if <code class="codeph">OCIEnvNlsCreate()</code> is used.</p>
<p>The <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code> function defines variables with the value of <code class="codeph">charset</code> in <code class="codeph">OCIEnvNlsCreate()</code>, including <code class="codeph">OCI_UTF16ID</code>, as the default. The actual length and returned length are always in bytes if <code class="codeph">OCIEnvNlsCreate()</code> is used. This behavior for bind and define handles is different from that when <code class="codeph">OCIEnvCreate()</code> is used and <code class="codeph">OCI_UTF16ID</code> is the character set ID for the bind and define handles.</p>
</div>
</div>
<a id="LNOCI16248"></a>
<div class="props_rev_3"><a id="GUID-16736B67-A8B0-4AC5-BEE7-92B9C74AA230"></a>
<h3 id="LNOCI-GUID-16736B67-A8B0-4AC5-BEE7-92B9C74AA230" class="sect3">Character-Length Semantics in OCI</h3>
<div>
<p>OCI works as a translator between server and client, and passes around character information for constraint checking.</p>
<p>There are two kinds of character sets: variable-width and fixed-width. (A single-byte character set is a special case of a fixed-width character set where each byte stands for one character.)</p>
<p>For fixed-width character sets, constraint checking is easier, as the number of bytes is equal to a multiple of the number of characters. Therefore, scanning of the entire string is not needed to determine the number of characters for fixed-width character sets. However, for variable-width character sets, complete scanning is needed to determine the number of characters in a string.</p>
</div>
</div>
<a id="LNOCI16249"></a>
<div class="props_rev_3"><a id="GUID-B39E5781-C1FB-4A3A-8D9A-C9F0273966E5"></a>
<h3 id="LNOCI-GUID-B39E5781-C1FB-4A3A-8D9A-C9F0273966E5" class="sect3">Character Set Support in OCI</h3>
<div>
<p>How does OCI support character sets.</p>
<p>See <a href="oci06des.htm#GUID-6941EC35-5C3F-4031-94E5-2347C4ABE96A" title="Query and column information are supported with character-length semantics.">Character-Length Semantics Support in Describe Operations</a> and <a href="oci05bnd.htm#GUID-84576558-1974-4E61-B6E6-795FA67419E3" title="This section discusses issues involving character conversions between the client and the server.">Character Conversion in OCI Binding and Defining</a> for a complete discussion of character set support in OCI.</p>
</div>
</div>
<a id="LNOCI73037"></a>
<div class="props_rev_3"><a id="GUID-BD4EBBEC-3809-4944-B15A-5AEF34FD2470"></a>
<h3 id="LNOCI-GUID-BD4EBBEC-3809-4944-B15A-5AEF34FD2470" class="sect3">Controlling Language and Territory in OCI</h3>
<div>
<p>The NLS language and territory can also be set programmatically using the attributes <a id="d22181e15687" class="indexterm-anchor"></a><code class="codeph">OCI_ATTR_ENV_NLS_LANGUAGE</code> and <a id="d22181e15694" class="indexterm-anchor"></a><code class="codeph">OCI_ATTR_ENV_NLS_TERRITORY</code> on OCI environment handle. See <span class="q">&#34;<a href="ociaahan.htm#GUID-9CA5026C-B6A0-4233-8B22-F1DD94ACE9F8__CACDCDID">OCI_ATTR_ENV_NLS_LANGUAGE</a>&#34;</span> and <span class="q">&#34;<a href="ociaahan.htm#GUID-9CA5026C-B6A0-4233-8B22-F1DD94ACE9F8__CACDFDCB">OCI_ATTR_ENV_NLS_TERRITORY</a>&#34;</span> for more details on the usage. These attributes will be effective for the database sessions created from that environment handle after the attributes have been set.</p>
</div>
</div>
<a id="LNOCI16250"></a>
<div class="props_rev_3"><a id="GUID-FE3D24F2-E3C7-4320-B713-B9A3CE7AA620"></a>
<h3 id="LNOCI-GUID-FE3D24F2-E3C7-4320-B713-B9A3CE7AA620" class="sect3">Other OCI Globalization Support Functions</h3>
<div>
<p>Many globalization support functions accept either the environment handle or the user session handle.</p>
<p>The OCI environment handle is associated with the client NLS environment variables. This environment does not change when <code class="codeph">ALTER</code> <code class="codeph">SESSION</code> statements are issued to the server. The character set associated with the environment handle is the client character set. The OCI session handle (returned by <code class="codeph">OCISessionBegin()</code>) is associated with the server session environment. The NLS settings change when the session environment is modified with an <code class="codeph">ALTER</code> <code class="codeph">SESSION</code> statement. The character set associated with the session handle is the database character set.</p>
<p>Note that the OCI session handle does not have NLS settings associated with it until the first transaction begins in the session. <code class="codeph">SELECT</code> statements do not begin a transaction.</p>
<div class="infoboxnotealso" id="GUID-FE3D24F2-E3C7-4320-B713-B9A3CE7AA620__GUID-514D1C28-5D5D-4756-8C84-5B8FF0C9C628">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci22glb.htm#GUID-B76A21C9-1A6F-456F-8E5B-076826E92002" title="This chapter describes the OCI globalization support functions.">OCI Globalization Support Functions</a></p>
</li>
<li>
<p><a class="olink NLSPG0074" target="_blank" href="../NLSPG/ch7progrunicode.htm#NLSPG0074"><span><cite>Oracle Database Globalization Support Guide</cite></span></a> for information about OCI programming with Unicode</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI72589"></a><a id="LNOCI16251"></a>
<div class="props_rev_3"><a id="GUID-A9961209-BBDB-464C-B102-50576FA501FB"></a>
<h3 id="LNOCI-GUID-A9961209-BBDB-464C-B102-50576FA501FB" class="sect3">About Getting Locale Information in OCI</h3>
<div>
<p>An Oracle Database locale consists of language, territory, and character set definitions.</p>
<p>The locale determines conventions such as day and month names, as well as date, time, number, and currency formats. A globalized application follows a user&#39;s locale setting and cultural conventions. For example, when the locale is set to German, users expect to see day and month names in German.</p>
<div class="infoboxnotealso" id="GUID-A9961209-BBDB-464C-B102-50576FA501FB__GUID-459A3C61-918A-47F3-B595-EB3C8E51D8E1">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci22glb001.htm#GUID-BBB8CCE2-7438-4C35-8AF3-7B9349531F93" title="Lists and describes OCI Locale Functions.">OCI Locale Functions</a></p>
</li>
<li>
<p><a href="oci22glb001.htm#GUID-70CCE086-4BF8-42F9-A6CA-E0B926C4DD11">OCINlsEnvironmentVariableGet()</a></p>
</li>
</ul>
</div>
<p>You can retrieve the following information with the <code class="codeph">OCINlsGetInfo()</code> function:</p>
<ul style="list-style-type: disc;">
<li>
<p>Days of the week (translated)</p>
</li>
<li>
<p>Abbreviated days of the week (translated)</p>
</li>
<li>
<p>Month names (translated)</p>
</li>
<li>
<p>Abbreviated month names (translated)</p>
</li>
<li>
<p>Yes/no (translated)</p>
</li>
<li>
<p>AM/PM (translated)</p>
</li>
<li>
<p>AD/BC (translated)</p>
</li>
<li>
<p>Numeric format</p>
</li>
<li>
<p>Debit/credit</p>
</li>
<li>
<p>Date format</p>
</li>
<li>
<p>Currency formats</p>
</li>
<li>
<p>Default language</p>
</li>
<li>
<p>Default territory</p>
</li>
<li>
<p>Default character set</p>
</li>
<li>
<p>Default linguistic sort</p>
</li>
<li>
<p>Default calendar</p>
</li>
</ul>
<p>The code in <a href="oci02bas.htm#GUID-A9961209-BBDB-464C-B102-50576FA501FB__CIHBCBGC">Example 2-13</a> retrieves locale information and checks for errors.</p>
<div class="example" id="GUID-A9961209-BBDB-464C-B102-50576FA501FB__CIHBCBGC">
<p class="titleinexample">Example 2-13 Getting Locale Information in OCI</p>
<pre dir="ltr">sword MyPrintLinguisticName(envhp, errhp)
OCIEnv   *envhp;
OCIError *errhp;
{
  OraText  infoBuf[OCI_NLS_MAXBUFSZ];
  sword ret;
  
  ret = OCINlsGetInfo(envhp,                           /* environment handle */
                      errhp,                                 /* error handle */
                      infoBuf,                         /* destination buffer */
                      (size_t) OCI_NLS_MAXBUFSZ,              /* buffer size */
                      (ub2) OCI_NLS_LINGUISTIC_NAME);                /* item */

  if (ret != OCI_SUCCESS) 
  {
    checkerr(errhp, ret, OCI_HTYPE_ERROR);
    ret = OCI_ERROR; 
  }
  else
  {
    printf(&#34;NLS linguistic: %s\n&#34;, infoBuf);
   }
  return(ret);
}
</pre></div>
<!-- class="example" --></div>
</div>
<div class="sect3"><a id="GUID-D1D359A3-5057-4492-805A-98A53E746322"></a>
<h3 id="LNOCI-GUID-D1D359A3-5057-4492-805A-98A53E746322" class="sect3">About OCI and the BOM (Byte Order Mark)</h3>
<div>
<p>OCI does not support nor handle the BOM (byte order mark) and assumes that the byte order is native to the machine on which your application is executing.</p>
<p>Your OCI application must not pass a string containing a BOM expecting that OCI can detect the encoding of the string. Your OCI application must remove the BOM if it exists in the string being passed in and ensure that it is in the encoding the OCI function expects.</p>
</div>
</div>
<a id="LNOCI72590"></a><a id="LNOCI72591"></a><a id="LNOCI16253"></a>
<div class="props_rev_3"><a id="GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA"></a>
<h3 id="LNOCI-GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA" class="sect3">About Manipulating Strings in OCI</h3>
<div>
<p>Multibyte strings and wide-character strings are supported for string manipulation.</p>
<p>Multibyte strings are encoded in native Oracle character sets. Functions that operate on multibyte strings take the string as a whole unit with the length of the string calculated in bytes. Wide-character string (<code class="codeph">wchar</code>) functions provide more flexibility in string manipulation. They support character-based and string-based operations where the length the string calculated in characters.</p>
<p>The wide-character data type, <code class="codeph">OCIWchar</code>, is Oracle-specific and should not be confused with the <code class="codeph">wchar_t</code> data type defined by the ANSI/ISO C standard. The Oracle wide-character data type is always 4 bytes in all operating systems, whereas the size of <code class="codeph">wchar_t</code> depends on the implementation and the operating system. The Oracle wide-character data type normalizes multibyte characters so that they have a uniform fixed width for easy processing. This guarantees no data loss for round-trip conversion between the Oracle wide-character set and the native character set.</p>
<p>String manipulation can be classified into the following categories:</p>
<ul style="list-style-type: disc;">
<li>
<p>Conversion of strings between multibyte and wide character</p>
</li>
<li>
<p>Character classifications</p>
</li>
<li>
<p>Case conversion</p>
</li>
<li>
<p>Calculations of display length</p>
</li>
<li>
<p>General string manipulation, such as comparison, concatenation, and searching</p>
<div class="infoboxnotealso" id="GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA__GUID-F1079617-9750-49C9-AE22-AD7D8C8DC910">
<p class="notep1">See Also:</p>
<p><a href="oci22glb003.htm#GUID-767B0982-8423-49C1-9C7D-4F2042E5D9A0" title="Lists and describes OCI string manipulation functions.">OCI String Manipulation Functions</a></p>
</div>
</li>
</ul>
<p><a href="oci02bas.htm#GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA__CIHCHBAH">Example 2-14</a> shows a simple case of manipulating strings.</p>
<p>The OCI character classification functions are described in detail in <a href="oci22glb004.htm#GUID-25048605-12AC-4DF0-9FF4-607EE9726217" title="Lists and describes OCI character classification functions.">OCI Character Classification Functions</a>.</p>
<p><a href="oci02bas.htm#GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA__CIHDCIFG">Example 2-15</a> shows how to classify characters in OCI.</p>
<div class="example" id="GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA__CIHCHBAH">
<p class="titleinexample">Example 2-14 Basic String Manipulation in OCI</p>
<pre dir="ltr">size_t MyConvertMultiByteToWideChar(envhp, dstBuf, dstSize, srcStr)
OCIEnv     *envhp;
OCIWchar   *dstBuf;
size_t      dstSize;
OraText    *srcStr;                         /* null terminated source string */
{
  sword  ret;
  size_t dstLen = 0;
  size_t srcLen;

  /* get length of source string */
  srcLen = OCIMultiByteStrlen(envhp, srcStr);
  
  ret = OCIMultiByteInSizeToWideChar(envhp,            /* environment handle */
                 dstBuf,                               /* destination buffer */
                 dstSize,                         /* destination buffer size */
                 srcStr,                                    /* source string */
                 srcLen,                          /* length of source string */
                 &amp;dstLen);                  /* pointer to destination length */

  if (ret != OCI_SUCCESS)                                          
  {
    checkerr(envhp, ret, OCI_HTYPE_ENV);                 
  }
  return(dstLen);
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C8EDF903-1106-45B0-A33E-A883E978BCBA__CIHDCIFG">
<p class="titleinexample">Example 2-15 Classifying Characters in OCI</p>
<pre dir="ltr">boolean MyIsNumberWideCharString(envhp, srcStr)
OCIEnv   *envhp;
OCIWchar *srcStr;                                 /* wide char source string */
{
  OCIWchar *pstr = srcStr;                        /* define and init pointer */
  boolean status = TRUE;            /* define and initialize status variable */

  /* Check input */
  if (pstr == (OCIWchar*) NULL)
    return(FALSE);


  if (*pstr == (OCIWchar) NULL)
    return(FALSE);

                                            /* check each character for digit */
  do 
  {
    if (OCIWideCharIsDigit(envhp, *pstr) != TRUE)
    {
      status = FALSE;
      break;                                  /* non-decimal digit character */
    }
  } while ( *++pstr != (OCIWchar) NULL);

  return(status);
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI72592"></a><a id="LNOCI16256"></a>
<div class="props_rev_3"><a id="GUID-5A77144F-9929-4AA2-A48E-DF8C6A57320B"></a>
<h3 id="LNOCI-GUID-5A77144F-9929-4AA2-A48E-DF8C6A57320B" class="sect3">About Converting Character Sets in OCI</h3>
<div>
<p>Conversion between Oracle character sets and Unicode (16-bit, fixed-width Unicode encoding) is supported.</p>
<p>Replacement characters are used if a character has no mapping from Unicode to the Oracle character set. Therefore, conversion back to the original character set is not always possible without data loss.</p>
<p>Character set conversion functions involving Unicode character sets require data bind and define buffers to be aligned at a <code class="codeph">ub2</code> address or an error is raised.</p>
<p><a href="oci02bas.htm#GUID-5A77144F-9929-4AA2-A48E-DF8C6A57320B__CIHCECEE">Example 2-16</a> shows a simple conversion into Unicode.</p>
<div class="infoboxnotealso" id="GUID-5A77144F-9929-4AA2-A48E-DF8C6A57320B__GUID-F77A73E6-2024-48EB-B30E-F5A13D23C01B">
<p class="notep1">See Also:</p>
<p><a href="oci22glb005.htm#GUID-DBC622E6-500C-4C79-9B06-CD84C48E44D3" title="Lists and describes OCI character set conversion functions.">OCI Character Set Conversion Functions</a></p>
</div>
<div class="example" id="GUID-5A77144F-9929-4AA2-A48E-DF8C6A57320B__CIHCECEE">
<p class="titleinexample">Example 2-16 Converting Character Sets in OCI</p>
<pre dir="ltr">/* Example of Converting Character Sets in OCI
--------------------------------------------*/

size_t MyConvertMultiByteToUnicode(envhp, errhp, dstBuf, dstSize, srcStr)
OCIEnv   *envhp;
OCIError *errhp;
ub2 *dstBuf;
size_t dstSize;
OraText *srcStr;
{
  size_t dstLen = 0;
  size_t srcLen = 0;
  OraText tb[OCI_NLS_MAXBUFSZ];   /* NLS info buffer */
  ub2    cid;                     /* OCIEnv character set ID */

  /* get OCIEnv character set */
  checkerr(errhp, OCINlsGetInfo(envhp, errhp, tb, sizeof(tb),
                                OCI_NLS_CHARACTER_SET));
  cid = OCINlsCharSetNameToId(envhp, tb);

  if (cid == OCI_UTF16ID)
  {
    ub2    *srcStrUb2 = (ub2*)srcStr;
    while (*srcStrUb2++) ++srcLen;
    srcLen *= sizeof(ub2);
  }
  else
    srcLen = OCIMultiByteStrlen(envhp, srcStr);

  checkerr(errhp,
    OCINlsCharSetConvert(
      envhp,       /* environment handle */
      errhp,       /* error handle */
      OCI_UTF16ID, /* Unicode character set ID */
      dstBuf,      /* destination buffer */
      dstSize,     /* size of destination buffer */
      cid,         /* OCIEnv character set ID */
      srcStr,      /* source string */
      srcLen,      /* length of source string */
      &amp;dstLen));   /* pointer to destination length */

  return dstLen/sizeof(ub2);
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI72593"></a><a id="LNOCI16258"></a>
<div class="props_rev_3"><a id="GUID-27257B5E-0604-4BF9-A616-73D2625885F7"></a>
<h3 id="LNOCI-GUID-27257B5E-0604-4BF9-A616-73D2625885F7" class="sect3">OCI Messaging Functions</h3>
<div>
<p>The user message API provides a simple interface for cartridge developers to retrieve their own messages and Oracle Database messages.</p>
<p><a href="oci02bas.htm#GUID-27257B5E-0604-4BF9-A616-73D2625885F7__CIHJDGHD">Example 2-17</a> creates a message handle, initializes it to retrieve messages from <code class="codeph">impus.msg</code>, retrieves message number 128, and closes the message handle. It assumes that OCI environment handles, OCI session handles, and the product, facility, and cache size have been initialized properly.</p>
<div class="example" id="GUID-27257B5E-0604-4BF9-A616-73D2625885F7__CIHJDGHD">
<p class="titleinexample">Example 2-17 Retrieving a Message from a Text Message File</p>
<pre dir="ltr">OCIMsg msghnd;                                              /* message handle */
         /* initialize a message handle for retrieving messages from impus.msg*/
err = OCIMessageOpen(hndl,errhp, &amp;msghnd, prod,fac,OCI_DURATION_SESSION);
if (err != OCI_SUCCESS)
                                                            /* error handling */
...
                            /* retrieve the message with message number = 128 */
msgptr = OCIMessageGet(msghnd, 128, msgbuf, sizeof(msgbuf));
                         /* do something with the message, such as display it */
...
      /* close the message handle when there are no more messages to retrieve */
OCIMessageClose(hndl, errhp, msghnd);
</pre>
<div class="infoboxnotealso" id="GUID-27257B5E-0604-4BF9-A616-73D2625885F7__GUID-EFE98E7B-2AF2-432F-A41A-BCE7119783CE">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ADDCI4660" target="_blank" href="../ADDCI/part2.htm#ADDCI4660"><span><cite>Oracle Database Data Cartridge Developer&#39;s Guide</cite></span></a></p>
</li>
<li>
<p><a href="oci22glb006.htm#GUID-0D127CE1-8826-4E20-BBF2-B776CF9B5EFE" title="Lists and describes OCI messaging functions.">OCI Messaging Functions</a></p>
</li>
</ul>
</div>
</div>
<!-- class="example" --></div>
</div>
<a id="LNOCI16260"></a>
<div class="props_rev_3"><a id="GUID-662DDC47-BB19-4988-BA99-1AA0520C84FE"></a>
<h3 id="LNOCI-GUID-662DDC47-BB19-4988-BA99-1AA0520C84FE" class="sect3">lmsgen Utility</h3>
<div>
<p>The <code class="codeph">lmsgen</code> utility converts text-based message files (<code class="codeph">.msg</code>) into binary format (<code class="codeph">.msb</code>) so that Oracle Database messages and OCI messages provided by the user can be returned to OCI functions in the desired language.</p>
<p>The BNF syntax of the Imsgen utility is as follows:</p>
<pre dir="ltr">lmsgen <span class="italic">text_file</span> <span class="italic">product</span> <span class="italic">facility</span> [<span class="italic">language</span>]
</pre>
<p>In the preceding syntax:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><code class="codeph">text_file</code></span> is a message text file.</p>
</li>
<li>
<p><span class="italic"><code class="codeph">product</code></span> is the name of the product.</p>
</li>
<li>
<p><span class="italic"><code class="codeph">facility</code></span> is the name of the facility.</p>
</li>
<li>
<p><span class="italic"><code class="codeph">language</code></span> is the optional message language corresponding to the language specified in the <code class="codeph">NLS_LANG</code> parameter. The language parameter is required if the message file is not tagged properly with language.</p>
</li>
</ul>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-DE5543AC-10DF-4B80-B214-B2322DA19864">Guidelines for Text Message Files</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-288C4005-4299-454C-883B-2A028B69822F">An Example of Creating a Binary Message File from a Text Message File</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16262"></a>
<div class="props_rev_3"><a id="GUID-DE5543AC-10DF-4B80-B214-B2322DA19864"></a>
<h4 id="LNOCI-GUID-DE5543AC-10DF-4B80-B214-B2322DA19864" class="sect4">Guidelines for Text Message Files</h4>
<div>
<p>Text message files must follow these guidelines:</p>
<ul style="list-style-type: disc;">
<li>
<p>Lines that start with &#34;<code class="codeph">/&#34;</code> and &#34;<code class="codeph">//</code>&#34; are treated as internal comments and are ignored.</p>
</li>
<li>
<p>To tag the message file with a specific language, include a line similar to the following:</p>
<pre dir="ltr">#   CHARACTER_SET_NAME= Japanese_Japan.JA16EUC
</pre></li>
<li>
<p>Each message contains three fields:</p>
<pre dir="ltr"><span class="italic">message_number</span>, <span class="italic">warning_level</span>, <span class="italic">message_text</span>
</pre>
<ul style="list-style-type: disc;">
<li>
<p>The message number must be unique within a message file.</p>
</li>
<li>
<p>The warning level is not currently used. Set to 0.</p>
</li>
<li>
<p>The message text cannot be longer than 76 bytes.</p>
</li>
</ul>
</li>
</ul>
<p>The following is an example of an Oracle Database message text file:</p>
<pre dir="ltr">/ Copyright (c) 2001 by the Oracle Corporation.  All rights reserved.
/ This is a test us7ascii message file
# CHARACTER_SET_NAME= american_america.us7ascii
/
00000, 00000, &#34;Export terminated unsuccessfully\n&#34;
00003, 00000, &#34;no storage definition found for segment(%lu, %lu)&#34;
</pre></div>
</div>
<a id="LNOCI16263"></a>
<div class="props_rev_3"><a id="GUID-288C4005-4299-454C-883B-2A028B69822F"></a>
<h4 id="LNOCI-GUID-288C4005-4299-454C-883B-2A028B69822F" class="sect4">An Example of Creating a Binary Message File from a Text Message File</h4>
<div>
<div class="section">
<p>The following table contains sample values for the <code class="codeph">lmsgen</code> parameters:</p>
<div class="tblformal" id="GUID-288C4005-4299-454C-883B-2A028B69822F__GUID-7C444B28-139D-4284-9F37-99A765FABF39">
<table class="cellalignment6175" summary="lmsgen parameter and value">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6239" id="d22181e17460">lmsgen Parameter</th>
<th class="cellalignment6188" id="d22181e17463">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6240" id="d22181e17468" headers="d22181e17460">
<p><span class="italic"><code class="codeph">product</code></span></p>
</td>
<td class="cellalignment6191" headers="d22181e17468 d22181e17463">
<p><code class="codeph">$HOME/myApplication</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6240" id="d22181e17478" headers="d22181e17460">
<p><span class="italic"><code class="codeph">facility</code></span></p>
</td>
<td class="cellalignment6191" headers="d22181e17478 d22181e17463">
<p><code class="codeph">imp</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6240" id="d22181e17488" headers="d22181e17460">
<p><span class="italic"><code class="codeph">language</code></span></p>
</td>
<td class="cellalignment6191" headers="d22181e17488 d22181e17463">
<p><code class="codeph">AMERICAN</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6240" id="d22181e17498" headers="d22181e17460">
<p><span class="italic"><code class="codeph">text_file</code></span></p>
</td>
<td class="cellalignment6191" headers="d22181e17498 d22181e17463">
<p><code class="codeph">impus.msg</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The text message file is found in the following location:</p>
<pre dir="ltr">$HOME/myApp/mesg/impus.msg
</pre>
<p>One of the lines in the text message file is:</p>
<pre dir="ltr">00128,2, &#34;Duplicate entry %s found in %s&#34;
</pre>
<p>The <code class="codeph">lmsgen</code> utility converts the text message file (<code class="codeph">impus.msg</code>) into binary format, resulting in a file called <code class="codeph">impus.msb</code>:</p>
<pre dir="ltr">% lmsgen impus.msg $HOME/myApplication imp AMERICAN
</pre>
<p>The following output results:</p>
<pre dir="ltr">Generating message file impus.msg --&gt;
/home/scott/myApplication/mesg/impus.msb

NLS Binary Message File Generation Utility: Version 9.2.0.0.0 -Production

Copyright (c) Oracle Corporation 1979, 2001.  All rights reserved.

CORE    9.2.0.0.0       Production
</pre></div>
<!-- class="section" --></div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6150">
<tr>
<td class="cellalignment6162">
<table class="cellalignment6155">
<tr>
<td class="cellalignment6154"><a href="oci01int.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6154"><a href="oci03typ.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6164">
<table class="cellalignment6153">
<tr>
<td class="cellalignment6154"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6154"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6154"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6154"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6154"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6154"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>