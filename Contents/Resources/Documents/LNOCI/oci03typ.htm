<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-73974"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Data%20Types"></a><title>Data Types</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="This chapter provides a reference to Oracle external data types used by OCI applications."/>
<meta name="keywords" content="data types, Oracle, Oracle data types, external, external data types, internal, internal data types, internal codes, internal codes for data types, Universal ROWID, BINARY_FLOAT data type, BINARY_DOUBLE data type, VARCHAR2, external data type, NUMBER, 64-bit integer support, INTEGER, INTEGER external data type, FLOAT, STRING, VARNUM, LONG, VARCHAR, DATE, RAW, VARRAW, LONG RAW, UNSIGNED, LONG VARCHAR, LONG VARRAW, CHAR, CHARZ, named data types, SQLT_NTY, definition, varrays, description, REF, SQLT_REF, definition, REFs, ROWID, LOB, LOBs, SQLT_BLOB, SQLT_CLOB, SQLT_NCLOB, BFILE, data type, FILE, BLOB data type, BLOBs (binary large objects), CLOB, NCLOB, DATE, ANSI, ANSI DATE, TIMESTAMP data type, TIMESTAMP, TIMESTAMP WITH TIME ZONE data type, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE data type, TIMESTAMP WITH LOCAL TIME ZONE, INTERVAL YEAR TO MONTH data type, INTERVAL YEAR TO MONTH, INTERVAL DAY TO SECOND data type, INTERVAL DAY TO SECOND, datetime, avoiding unexpected results, native float, native double, conversions, datetime and date, migration rules, typecodes, OCI_TYPECODE, values, OCITypeCode, SQLT typecodes, ub1, ub2, ub4, sb1, sb2, sb4, sword, definition in oratypes.h file, oratypes.h, contents"/>
<meta name="dcterms.created" content="2017-06-09T09:07:30Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49886-11"/>
<meta name="dcterms.isVersionOf" content="LNOCI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oci02bas.htm" title="Previous" type="text/html"/>
<link rel="Next" href="oci04sql.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49886-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-027FB2E2-593C-43F1-9184-DFEF7A984A27"></a> <span id="PAGE" style="display:none;">10/84</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='oci03typ'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('about:blank', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');
    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'); 
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" ><head><title>');
   
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="LNOCI030"></a>
<h1 id="LNOCI-GUID-027FB2E2-593C-43F1-9184-DFEF7A984A27" class="sect1"><span class="enumeration_chapter">3</span> Data Types</h1>
<div>
<p>This chapter provides a reference to Oracle external data types used by OCI applications.</p>
<p>It also discusses Oracle data types and the conversions between internal and external representations that occur when you transfer data between your program and an Oracle database.</p>
<p>This chapter contains these topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-3C267F8D-005C-4820-A1E0-AD821EAD1B4D" title="One of the main functions of an OCI program is to communicate with an Oracle database.">Oracle Data Types</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE" title="Lists and describes the internal data types.">Internal Data Types</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805" title="Lists and describes the data type codes for external data types.">External Data Types</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35" title="Shows the supported conversions from internal data types to external data types and from external data types into internal column representations.">Data Conversions</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-65066795-6F95-44AE-A454-31CF70A46A1F" title="A unique typecode is associated with each Oracle Database type, whether scalar, collection, reference, or object type.">Typecodes</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-7283C7EC-E768-44AD-991A-7E28AB49E7D3">Definitions in oratypes.h</a></p>
<div class="infoboxnotealso" id="GUID-027FB2E2-593C-43F1-9184-DFEF7A984A27__GUID-D8A36357-5EDA-4030-9F39-8CA604AADE1D">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF30020" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF30020"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for detailed information about Oracle internal data types</p>
</div>
</li>
</ul>
</div>
<a id="LNOCI16264"></a>
<div class="props_rev_3"><a id="GUID-3C267F8D-005C-4820-A1E0-AD821EAD1B4D"></a>
<h2 id="LNOCI-GUID-3C267F8D-005C-4820-A1E0-AD821EAD1B4D" class="sect2">Oracle Data Types</h2>
<div>
<p>One of the main functions of an OCI program is to communicate with an Oracle database.</p>
<p>The OCI application may retrieve data from database tables through SQL <code class="codeph">SELECT</code> queries, or it may modify existing data in tables through <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, or <code class="codeph">DELETE</code> statements.</p>
<p>Inside a database, values are stored in columns in tables. Internally, Oracle represents data in particular formats known as <span class="italic">internal data types</span>. Examples of internal data types include <code class="codeph">NUMBER</code>, <code class="codeph">CHAR</code>, and <code class="codeph">DATE</code> (see <a href="oci03typ.htm#GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE__CEGGBDFC" title="This table has 3 columns. Column 1 is the internal Oracle Database data type, column 2 is the maximum internal length, and column 3 is the data type code.">Table 3-1</a>).</p>
<p>In general, OCI applications do not work with internal data type representations of data, but with host language data types that are predefined by the language in which they are written. When data is transferred between an OCI client application and a database table, the OCI libraries convert the data between internal data types and <span class="italic">external data types</span>.</p>
<p>External data types are host language types that have been defined in the OCI header files. When an OCI application binds input variables, one of the bind parameters is an indication of the external data type code (or <span class="italic">SQLT code</span>) of the variable. Similarly, when output variables are specified in a define call, the external representation of the retrieved data must be specified.</p>
<p>In some cases, external data types are similar to internal types. External types provide a convenience for the programmer by making it possible to work with host language types instead of proprietary data formats.</p>
<div class="infobox-note" id="GUID-3C267F8D-005C-4820-A1E0-AD821EAD1B4D__GUID-1634E7E8-6DAD-480E-8C5C-36E44DC81D23">
<p class="notep1">Note:</p>
<p>Even though some external types are similar to internal types, an OCI application never binds to internal data types. They are discussed here because it can be useful to understand how internal types can map to external types.</p>
</div>
<p>OCI can perform a wide range of data type conversions when transferring data between an Oracle database and an OCI application. There are more OCI external data types than Oracle internal data types. In some cases, a single external type maps to an internal type; in other cases, multiple external types map to a single internal type.</p>
<p>The many-to-one mappings for some data types provide flexibility for the OCI programmer. For example, suppose that you are processing the following SQL statement:</p>
<pre dir="ltr">SELECT sal FROM emp WHERE empno = :employee_number
</pre>
<p>You want the salary to be returned as character data, instead of a binary floating-point format. Therefore, you specify an Oracle database external string data type, such as <code class="codeph">VARCHAR2</code> (code = 1) or <code class="codeph">CHAR</code> (code = 96) for the <code class="codeph">dty</code> parameter in the <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code> call for the <code class="codeph">sal</code> column. You also must declare a string variable in your program and specify its address in the <code class="codeph">valuep</code> parameter. See <a href="oci03typ.htm#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGIEEJI" title="This table has 4 columns. Column 1 is the external Oracle Database data type, column 2 is the data type code, and column 3 is the program variable type for C, and column 4 is the OCI-defined constant.">Table 3-2</a> for more information.</p>
<p>If you want the salary information to be returned as a binary floating-point value, however, specify the <code class="codeph">FLOAT</code> (code = 4) external data type. You also must define a variable of the appropriate type for the <code class="codeph">valuep</code> parameter.</p>
<p>Oracle Database performs most data conversions transparently. The ability to specify almost any external data type provides a lot of power for performing specialized tasks. For example, you can input and output <code class="codeph">DATE</code> values in pure binary format, with no character conversion involved, by using the <code class="codeph">DATE</code> external data type.</p>
<p>To control data conversion, you must use the appropriate external data type codes in the bind and define routines. You must tell Oracle Database where the input or output variables are in your OCI program and their data types and lengths.</p>
<p>OCI also supports an additional set of OCI typecodes that are used by the Oracle Database type management system to represent data types of object type attributes. You can use a set of predefined constants to represent these typecodes. The constants each contain the prefix <code class="codeph">OCI_TYPECODE</code>.</p>
<p>In summary, the OCI programmer must be aware of the following different data types or data representations:</p>
<ul style="list-style-type: disc;">
<li>
<p>Internal Oracle data types, which are used by table columns in an Oracle database. These also include data types used by PL/SQL that are not used by Oracle Database columns (for example, indexed table, boolean, record).</p>
</li>
<li>
<p>External OCI data types, which are used to specify host language representations of Oracle data.</p>
</li>
<li>
<p><code class="codeph">OCI_TYPECODE</code> values, which are used by Oracle Database to represent type information for object type attributes.</p>
</li>
</ul>
<p>Information about a column&#39;s internal data type is conveyed to your application in the form of an internal data type code. With this information about what type of data is to be returned, your application can determine how to convert and format the output data. The Oracle internal data type codes are listed in the section <a href="oci03typ.htm#GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE" title="Lists and describes the internal data types.">Internal Data Types</a>.</p>
<div class="infoboxnotealso" id="GUID-3C267F8D-005C-4820-A1E0-AD821EAD1B4D__GUID-DCA240C3-FD19-4045-90B4-98EBD91AFDE2">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328" title="The DATE data type can update, insert, or retrieve a date value using the Oracle internal date binary format.">DATE</a> for a description of the external data type</p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE" title="Lists and describes the internal data types.">Internal Data Types</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805" title="Lists and describes the data type codes for external data types.">External Data Types</a> and <a href="oci03typ.htm#GUID-92331EBC-12FB-4D5F-BFFD-5149F819266D">About Using External Data Type Codes</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-65066795-6F95-44AE-A454-31CF70A46A1F" title="A unique typecode is associated with each Oracle Database type, whether scalar, collection, reference, or object type.">Typecodes</a>, and <a href="oci03typ.htm#GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136">Relationship Between SQLT and OCI_TYPECODE Values</a></p>
</li>
<li>
<p><a class="olink SQLRF30020" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF30020"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for detailed information about Oracle internal data types</p>
</li>
<li>
<p><a href="oci04sql.htm#GUID-DDB109DD-52EB-4AA8-A69A-34015F8D5D6E" title="If your OCI application is processing a query, you may need to obtain more information about the items in the select list.">About Describing Select-List Items</a> for information about describing select-list items in a query</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16265"></a>
<div class="props_rev_3"><a id="GUID-92331EBC-12FB-4D5F-BFFD-5149F819266D"></a>
<h3 id="LNOCI-GUID-92331EBC-12FB-4D5F-BFFD-5149F819266D" class="sect3">About Using External Data Type Codes</h3>
<div>
<p>An external data type code indicates to Oracle Database how a host variable represents data in your program. This determines how the data is converted when it is returned to output variables in your program, or how it is converted from input (bind) variables to Oracle Database column values. For example, to convert a <code class="codeph">NUMBER</code> in an Oracle database column to a variable-length character array, you specify the <code class="codeph">VARCHAR2</code> external data type code in the <code class="codeph">OCIDefineByPos()</code> call that defines the output variable.</p>
<p>To convert a bind variable to a value in an Oracle Database column, specify the external data type code that corresponds to the type of the bind variable. For example, to input a character string such as 02-FEB-65 to a <code class="codeph">DATE</code> column, specify the data type as a character string and set the length parameter to 9.</p>
<p>It is always the programmer&#39;s responsibility to ensure that values are convertible. If you try to insert the string <code class="codeph">&#34;</code>MY BIRTHDAY<code class="codeph">&#34;</code> into a <code class="codeph">DATE</code> column, you get an error when you execute the statement.</p>
<div class="infoboxnotealso" id="GUID-92331EBC-12FB-4D5F-BFFD-5149F819266D__GUID-4FED6BC6-F682-41D9-8154-3B66683F8A2D">
<p class="notep1">See Also:</p>
<p><a href="oci03typ.htm#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGIEEJI" title="This table has 4 columns. Column 1 is the external Oracle Database data type, column 2 is the data type code, and column 3 is the program variable type for C, and column 4 is the OCI-defined constant.">Table 3-2</a> for a complete list of the external data types and data type codes</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16267"></a><a id="LNOCI16266"></a>
<div class="props_rev_3"><a id="GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE"></a>
<h2 id="LNOCI-GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE" class="sect2">Internal Data Types</h2>
<div>
<p>Lists and describes the internal data types.</p>
<div class="section">
<p><a href="oci03typ.htm#GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE__CEGGBDFC" title="This table has 3 columns. Column 1 is the internal Oracle Database data type, column 2 is the maximum internal length, and column 3 is the data type code.">Table 3-1</a> lists the internal Oracle Database data types (also known as <span class="italic">built-in</span>), along with each type&#39;s maximum internal length and data type code. PL/SQL types listed in <a href="oci03typ.htm#GUID-65066795-6F95-44AE-A454-31CF70A46A1F__G454481" title="This table has 2 columns. Column 1 is Value and column 2 is its corresponding data type.">Table 3-10</a> and <a href="oci03typ.htm#GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__G454572" title="This table has 3 columns. Column 1 is Oracle type system tymename, column 2 is Oracle type system type, and column 3 is the equivalent SQLT type.">Table 3-11</a> are also considered to be internal data types.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE__CEGGBDFC">
<p class="titleintable">Table 3-1 Internal Oracle Database Data Types</p>
<table class="cellalignment6175" title="Internal Oracle Database Data Types" summary="This table has 3 columns. Column 1 is the internal Oracle Database data type, column 2 is the maximum internal length, and column 3 is the data type code.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6173" id="d35260e927">Internal Oracle Database Data Type</th>
<th class="cellalignment6277" id="d35260e930">Maximum Internal Length</th>
<th class="cellalignment6272" id="d35260e933">Data Type Code</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e938" headers="d35260e927">
<p><code class="codeph">VARCHAR2, NVARCHAR2</code></p>
</td>
<td class="cellalignment6279" headers="d35260e938 d35260e930">
<p>4000 bytes (standard)</p>
<p>32767 bytes (extended)</p>
</td>
<td class="cellalignment6274" headers="d35260e938 d35260e933">
<p>1</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e951" headers="d35260e927">
<p><code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6279" headers="d35260e951 d35260e930">
<p>21 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e951 d35260e933">
<p>2</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e962" headers="d35260e927">
<p><code class="codeph">LONG</code></p>
</td>
<td class="cellalignment6279" headers="d35260e962 d35260e930">
<p>2^31-1 bytes (2 gigabytes)</p>
</td>
<td class="cellalignment6274" headers="d35260e962 d35260e933">
<p>8</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e973" headers="d35260e927">
<p><code class="codeph">DATE</code></p>
</td>
<td class="cellalignment6279" headers="d35260e973 d35260e930">
<p>7 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e973 d35260e933">
<p>12</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e984" headers="d35260e927">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6279" headers="d35260e984 d35260e930">
<p>2000 bytes (standard)</p>
<p>32767 bytes (extended)</p>
</td>
<td class="cellalignment6274" headers="d35260e984 d35260e933">
<p>23</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e997" headers="d35260e927">
<p><code class="codeph">LONG RAW</code></p>
</td>
<td class="cellalignment6279" headers="d35260e997 d35260e930">
<p>2^31-1 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e997 d35260e933">
<p>24</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1008" headers="d35260e927">
<p><code class="codeph">ROWID</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1008 d35260e930">
<p>10 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1008 d35260e933">
<p>69</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1019" headers="d35260e927">
<p><code class="codeph">CHAR, NCHAR</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1019 d35260e930">
<p>2000 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1019 d35260e933">
<p>96</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1030" headers="d35260e927">
<p><code class="codeph">BINARY_FLOAT</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1030 d35260e930">
<p>4 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1030 d35260e933">
<p>100</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1041" headers="d35260e927">
<p><code class="codeph">BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1041 d35260e930">
<p>8 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1041 d35260e933">
<p>101</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1052" headers="d35260e927">
<p>User-defined type (object type, <code class="codeph">VARRAY</code>, <code class="codeph">nested table</code>)</p>
</td>
<td class="cellalignment6279" headers="d35260e1052 d35260e930">
<p>Not Applicable</p>
</td>
<td class="cellalignment6274" headers="d35260e1052 d35260e933">
<p>108</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1069" headers="d35260e927">
<p><code class="codeph">REF</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1069 d35260e930">
<p>Not Applicable</p>
</td>
<td class="cellalignment6274" headers="d35260e1069 d35260e933">
<p>111</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1080" headers="d35260e927">
<p><code class="codeph">CLOB, NCLOB</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1080 d35260e930">
<p>128 terabytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1080 d35260e933">
<p>112</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1091" headers="d35260e927">
<p><code class="codeph">BLOB</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1091 d35260e930">
<p>128 terabytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1091 d35260e933">
<p>113</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1102" headers="d35260e927">
<p><code class="codeph">BFILE</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1102 d35260e930">
<p>Maximum operating system file size or <code class="codeph">UB8MAXVAL</code></p>
</td>
<td class="cellalignment6274" headers="d35260e1102 d35260e933">
<p>114</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1115" headers="d35260e927">
<p><code class="codeph">TIMESTAMP</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1115 d35260e930">
<p>11 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1115 d35260e933">
<p>180</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1126" headers="d35260e927">
<p><code class="codeph">TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1126 d35260e930">
<p>13 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1126 d35260e933">
<p>181</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1137" headers="d35260e927">
<p><code class="codeph">INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1137 d35260e930">
<p>5 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1137 d35260e933">
<p>182</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1148" headers="d35260e927">
<p><code class="codeph">INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1148 d35260e930">
<p>11 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1148 d35260e933">
<p>183</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1159" headers="d35260e927">
<p><code class="codeph">UROWID</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1159 d35260e930">
<p>3950 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1159 d35260e933">
<p>208</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6174" id="d35260e1170" headers="d35260e927">
<p><code class="codeph">TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment6279" headers="d35260e1170 d35260e930">
<p>11 bytes</p>
</td>
<td class="cellalignment6274" headers="d35260e1170 d35260e933">
<p>231</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-59037749-50BA-4BF5-BB01-B483D92E9572">LONG, RAW, LONG RAW, VARCHAR2</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-48C18A54-82D0-489E-A69F-89D1FBB8F3C9" title="Use Oracle internal data types to specify columns that contain characters or arrays of bytes.">Character Strings and Byte Arrays</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-F3B74702-3C7C-4A99-BBE5-52122277F9B6">UROWID</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-6A7C29FB-3363-44B1-86FE-F2D6F2520BEF">BINARY_FLOAT and BINARY_DOUBLE</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-7DA48B90-07C7-41A7-BC57-D8F358A4EEBE__GUID-71FC7444-8702-47C7-B892-F833F5688799">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF30020" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF30020"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for more information about these built-in data types</p>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI16268"></a>
<div class="props_rev_3"><a id="GUID-59037749-50BA-4BF5-BB01-B483D92E9572"></a>
<h3 id="LNOCI-GUID-59037749-50BA-4BF5-BB01-B483D92E9572" class="sect3">LONG, RAW, LONG RAW, VARCHAR2</h3>
<div>
<div class="section">
<p>You can use the piecewise capabilities provided by <a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a>, <a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a>, <a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a>, <a href="oci17msc001.htm#GUID-3D9B5C7B-E2A1-485D-852C-2434F303EC11" title="Returns piece information for a piecewise operation.">OCIStmtGetPieceInfo()</a>, and <a href="oci17msc001.htm#GUID-CDB6F3E3-0FB6-49A7-A8AE-83CD330A359F" title="Sets piece information for a piecewise operation.">OCIStmtSetPieceInfo()</a> to perform inserts, updates or fetches involving column data of the <code class="codeph">LONG</code>, <code class="codeph">RAW</code>, <code class="codeph">LONG RAW</code>, and <code class="codeph">VARCHAR2</code> data types.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16269"></a>
<div class="props_rev_3"><a id="GUID-48C18A54-82D0-489E-A69F-89D1FBB8F3C9"></a>
<h3 id="LNOCI-GUID-48C18A54-82D0-489E-A69F-89D1FBB8F3C9" class="sect3">Character Strings and Byte Arrays</h3>
<div>
<p>Use Oracle internal data types to specify columns that contain characters or arrays of bytes.</p>
<div class="section">
<p>You can use following Oracle internal data types to specify columns that contain characters or arrays of bytes: <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, <code class="codeph">RAW</code>, <code class="codeph">LONG</code>, and <code class="codeph">LONG</code> <code class="codeph">RAW</code>.</p>
<div class="infobox-note" id="GUID-48C18A54-82D0-489E-A69F-89D1FBB8F3C9__GUID-8C949B14-D167-451E-A993-313D270182E1">
<p class="notep1">Note:</p>
<p>LOBs can contain characters and <code class="codeph">BFILE</code>s can contain binary data. They are handled differently than other types, so they are not included in this discussion.</p>
</div>
<p><code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, and <code class="codeph">LONG</code> columns normally hold character data. <code class="codeph">RAW</code> and <code class="codeph">LONG</code> <code class="codeph">RAW</code> hold bytes that are not interpreted as characters (for example, pixel values in a bit-mapped graphic image). Character data can be transformed when it is passed through a gateway between networks. Character data passed between machines using different languages, where single characters may be represented by differing numbers of bytes, can be significantly changed in length. Raw data is never converted in this way.</p>
<p>It is the responsibility of the database designer to choose the appropriate Oracle internal data type for each column in the table. The OCI programmer must be aware of the many possible ways that character and byte-array data can be represented and converted between variables in the OCI program and Oracle Database tables.</p>
<p>When an array holds characters, the length parameter for the array in an OCI call is always passed in and returned in bytes, not characters.</p>
<div class="infoboxnotealso" id="GUID-48C18A54-82D0-489E-A69F-89D1FBB8F3C9__GUID-B977F546-C056-4730-8D86-2B33B658B1AC">
<p class="notep1">See Also:</p>
<p><a href="oci07lob.htm#GUID-0A094518-F97C-40BE-A336-259AA82BD0A2" title="This chapter describes LOB and BFILE operations.">LOB and BFILE Operations</a> for more information about <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, <code class="codeph">RAW</code>, <code class="codeph">LONG</code>, and <code class="codeph">LONG</code> <code class="codeph">RAW</code> data types</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16270"></a>
<div class="props_rev_3"><a id="GUID-F3B74702-3C7C-4A99-BBE5-52122277F9B6"></a>
<h3 id="LNOCI-GUID-F3B74702-3C7C-4A99-BBE5-52122277F9B6" class="sect3">UROWID</h3>
<div>
<div class="section">
<p><a id="d35260e1790" class="indexterm-anchor"></a><a id="d35260e1794" class="indexterm-anchor"></a><a id="d35260e1798" class="indexterm-anchor"></a>The Universal <code class="codeph">ROWID</code> (<code class="codeph">UROWID</code>) is a data type that can store both logical and physical rowids of Oracle Database tables. Logical rowids are primary key-based logical identifiers for the rows of index-organized tables (IOTs).</p>
<p>To use columns of the <code class="codeph">UROWID</code> data type, the value of the <code class="codeph">COMPATIBLE</code> initialization parameter must be set to 8.1 or later.</p>
<p>The following host variables can be bound to Universal <code class="codeph">ROWID</code>s:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLT_CHR</code> (<code class="codeph">VARCHAR2</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_VCS</code> (<code class="codeph">VARCHAR</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_STR</code> (<code class="codeph">NULL</code>-terminated string)</p>
</li>
<li>
<p><code class="codeph">SQLT_LVC</code> (<code class="codeph">LONG VARCHAR</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_AFC</code> (<code class="codeph">CHAR</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_AVC</code> (<code class="codeph">CHARZ</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_VST</code> (OCI String)</p>
</li>
<li>
<p><code class="codeph">SQLT_RDD</code> (<code class="codeph">ROWID</code> descriptor)</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI031"></a>
<div class="props_rev_3"><a id="GUID-6A7C29FB-3363-44B1-86FE-F2D6F2520BEF"></a>
<h3 id="LNOCI-GUID-6A7C29FB-3363-44B1-86FE-F2D6F2520BEF" class="sect3">BINARY_FLOAT and BINARY_DOUBLE</h3>
<div>
<div class="section">
<p>The <code class="codeph">BINARY_FLOAT</code> and <code class="codeph">BINARY_DOUBLE</code> data types represent single-precision and double-precision floating point values that mostly conform to the IEEE754 Standard for Floating-Point Arithmetic.</p>
<p>Prior to the addition of these data types with release 10.1, all numeric values in an Oracle Database were stored in the Oracle <code class="codeph">NUMBER</code> format. These new binary floating point types do not replace Oracle <code class="codeph">NUMBER</code>. Rather, they are alternatives to Oracle <code class="codeph">NUMBER</code> that provide the advantage of using less disk storage.</p>
<p>These internal types are represented by the following codes:</p>
<ul style="list-style-type: disc;">
<li>
<p><a id="d35260e2062" class="indexterm-anchor"></a><code class="codeph">SQLT_IBFLOAT</code> for <code class="codeph">BINARY_FLOAT</code></p>
</li>
<li>
<p><a id="d35260e2071" class="indexterm-anchor"></a><code class="codeph">SQLT_IBDOUBLE</code> for <code class="codeph">BINARY_DOUBLE</code></p>
</li>
</ul>
<p>All the following host variables can be bound to <code class="codeph">BINARY_FLOAT</code> and <code class="codeph">BINARY_DOUBLE</code> data types:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLT_BFLOAT</code> (native float)</p>
</li>
<li>
<p><code class="codeph">SQLT_BDOUBLE</code> (native double)</p>
</li>
<li>
<p><code class="codeph">SQLT_INT</code> (integer)</p>
</li>
<li>
<p><code class="codeph">SQLT_FLT</code> (float)</p>
</li>
<li>
<p><code class="codeph">SQLT_NUM</code> (Oracle <code class="codeph">NUMBER</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_UIN</code> (unsigned)</p>
</li>
<li>
<p><code class="codeph">SQLT_VNU</code> (<code class="codeph">VARNUM</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_CHR</code> (<code class="codeph">VARCHAR2</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_VCS</code> (<code class="codeph">VARCHAR</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_STR</code> (<code class="codeph">NULL</code>-terminated String)</p>
</li>
<li>
<p><code class="codeph">SQLT_LVC</code> (<code class="codeph">LONG</code> <code class="codeph">VARCHAR</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_AFC</code> (<code class="codeph">CHAR</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_AVC</code> (<code class="codeph">CHARZ</code>)</p>
</li>
<li>
<p><code class="codeph">SQLT_VST</code> (OCIString)</p>
</li>
</ul>
<p>For best performance, use external types <code class="codeph">SQLT_BFLOAT</code> and <code class="codeph">SQLT_BDOUBLE</code> in conjunction with the <code class="codeph">BINARY_FLOAT</code> and <code class="codeph">BINARY_DOUBLE</code> data types.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="LNOCI16272"></a><a id="LNOCI16271"></a>
<div class="props_rev_3"><a id="GUID-D69455D9-CE01-44CC-B5A9-E541C7774805"></a>
<h2 id="LNOCI-GUID-D69455D9-CE01-44CC-B5A9-E541C7774805" class="sect2">External Data Types</h2>
<div>
<p>Lists and describes the data type codes for external data types.</p>
<div class="section">
<p><a href="oci03typ.htm#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGIEEJI" title="This table has 4 columns. Column 1 is the external Oracle Database data type, column 2 is the data type code, and column 3 is the program variable type for C, and column 4 is the OCI-defined constant.">Table 3-2</a> lists data type codes for external data types. For each data type, the table lists the program variable types for C from or to which Oracle Database internal data is normally converted.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGIEEJI">
<p class="titleintable">Table 3-2 External Data Types and Codes</p>
<table class="cellalignment6157" title="External Data Types and Codes " summary="This table has 4 columns. Column 1 is the external Oracle Database data type, column 2 is the data type code, and column 3 is the program variable type for C, and column 4 is the OCI-defined constant.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6277" id="d35260e2377">External Data Type</th>
<th class="cellalignment6302" id="d35260e2380">Code</th>
<th class="cellalignment6254" id="d35260e2383">Program Variable(1)</th>
<th class="cellalignment6245" id="d35260e2389">OCI-Defined Constant</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2394" headers="d35260e2377">
<p><code class="codeph">VARCHAR2</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2394 d35260e2380">
<p>1</p>
</td>
<td class="cellalignment6256" headers="d35260e2394 d35260e2383">
<p>char[n]</p>
</td>
<td class="cellalignment6246" headers="d35260e2394 d35260e2389">
<p><code class="codeph">SQLT_CHR</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2409" headers="d35260e2377">
<p><code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2409 d35260e2380">
<p>2</p>
</td>
<td class="cellalignment6256" headers="d35260e2409 d35260e2383">
<p>unsigned char[21]</p>
</td>
<td class="cellalignment6246" headers="d35260e2409 d35260e2389">
<p><code class="codeph">SQLT_NUM</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2424" headers="d35260e2377">
<p>8-bit signed <code class="codeph">INTEGER</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2424 d35260e2380">
<p>3</p>
</td>
<td class="cellalignment6256" headers="d35260e2424 d35260e2383">
<p>signed char</p>
</td>
<td class="cellalignment6246" headers="d35260e2424 d35260e2389">
<p><code class="codeph">SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2440" headers="d35260e2377">
<p>16-bit signed <code class="codeph">INTEGER</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2440 d35260e2380">
<p>3</p>
</td>
<td class="cellalignment6256" headers="d35260e2440 d35260e2383">
<p>signed short, signed int</p>
</td>
<td class="cellalignment6246" headers="d35260e2440 d35260e2389">
<p><code class="codeph">SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2456" headers="d35260e2377">
<p>32-bit signed <code class="codeph">INTEGER</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2456 d35260e2380">
<p>3</p>
</td>
<td class="cellalignment6256" headers="d35260e2456 d35260e2383">
<p>signed int, signed long</p>
</td>
<td class="cellalignment6246" headers="d35260e2456 d35260e2389">
<p><code class="codeph">SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2472" headers="d35260e2377">
<p>64-bit signed <code class="codeph">INTEGER</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2472 d35260e2380">
<p>3</p>
</td>
<td class="cellalignment6256" headers="d35260e2472 d35260e2383">
<p>signed long, signed long long</p>
</td>
<td class="cellalignment6246" headers="d35260e2472 d35260e2389">
<p><code class="codeph">SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2488" headers="d35260e2377">
<p><code class="codeph">FLOAT</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2488 d35260e2380">
<p>4</p>
</td>
<td class="cellalignment6256" headers="d35260e2488 d35260e2383">
<p>float, double</p>
</td>
<td class="cellalignment6246" headers="d35260e2488 d35260e2389">
<p><code class="codeph">SQLT_FLT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2503" headers="d35260e2377">
<p><code class="codeph">NULL</code>-terminated <code class="codeph">STRING</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2503 d35260e2380">
<p>5</p>
</td>
<td class="cellalignment6256" headers="d35260e2503 d35260e2383">
<p>char[n+1]</p>
</td>
<td class="cellalignment6246" headers="d35260e2503 d35260e2389">
<p><code class="codeph">SQLT_STR</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2521" headers="d35260e2377">
<p><code class="codeph">VARNUM</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2521 d35260e2380">
<p>6</p>
</td>
<td class="cellalignment6256" headers="d35260e2521 d35260e2383">
<p>char[22]</p>
</td>
<td class="cellalignment6246" headers="d35260e2521 d35260e2389">
<p><code class="codeph">SQLT_VNU</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2536" headers="d35260e2377">
<p><code class="codeph">LONG</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2536 d35260e2380">
<p>8</p>
</td>
<td class="cellalignment6256" headers="d35260e2536 d35260e2383">
<p>char[n]</p>
</td>
<td class="cellalignment6246" headers="d35260e2536 d35260e2389">
<p><code class="codeph">SQLT_LNG</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2551" headers="d35260e2377">
<p><code class="codeph">VARCHAR</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2551 d35260e2380">
<p>9</p>
</td>
<td class="cellalignment6256" headers="d35260e2551 d35260e2383">
<p>char[n+sizeof(short integer)]</p>
</td>
<td class="cellalignment6246" headers="d35260e2551 d35260e2389">
<p><code class="codeph">SQLT_VCS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2567" headers="d35260e2377">
<p><code class="codeph">DATE</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2567 d35260e2380">
<p>12</p>
</td>
<td class="cellalignment6256" headers="d35260e2567 d35260e2383">
<p>char[7]</p>
</td>
<td class="cellalignment6246" headers="d35260e2567 d35260e2389">
<p><code class="codeph">SQLT_DAT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2582" headers="d35260e2377">
<p><code class="codeph">VARRAW</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2582 d35260e2380">
<p>15</p>
</td>
<td class="cellalignment6256" headers="d35260e2582 d35260e2383">
<p>unsigned char[n+sizeof(short integer)]</p>
</td>
<td class="cellalignment6246" headers="d35260e2582 d35260e2389">
<p><code class="codeph">SQLT_VBI</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2597" headers="d35260e2377">
<p>native float</p>
</td>
<td class="cellalignment6303" headers="d35260e2597 d35260e2380">
<p>21</p>
</td>
<td class="cellalignment6256" headers="d35260e2597 d35260e2383">
<p>float</p>
</td>
<td class="cellalignment6246" headers="d35260e2597 d35260e2389">
<p><code class="codeph">SQLT_BFLOAT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2611" headers="d35260e2377">
<p>native double</p>
</td>
<td class="cellalignment6303" headers="d35260e2611 d35260e2380">
<p>22</p>
</td>
<td class="cellalignment6256" headers="d35260e2611 d35260e2383">
<p>double</p>
</td>
<td class="cellalignment6246" headers="d35260e2611 d35260e2389">
<p><code class="codeph">SQLT_BDOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2625" headers="d35260e2377">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2625 d35260e2380">
<p>23</p>
</td>
<td class="cellalignment6256" headers="d35260e2625 d35260e2383">
<p>unsigned char[n]</p>
</td>
<td class="cellalignment6246" headers="d35260e2625 d35260e2389">
<p><code class="codeph">SQLT_BIN</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2640" headers="d35260e2377">
<p><code class="codeph">LONG RAW</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2640 d35260e2380">
<p>24</p>
</td>
<td class="cellalignment6256" headers="d35260e2640 d35260e2383">
<p>unsigned char[n]</p>
</td>
<td class="cellalignment6246" headers="d35260e2640 d35260e2389">
<p><code class="codeph">SQLT_LBI</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2655" headers="d35260e2377">
<p><code class="codeph">UNSIGNED INT</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2655 d35260e2380">
<p>68</p>
</td>
<td class="cellalignment6256" headers="d35260e2655 d35260e2383">
<p>unsigned</p>
</td>
<td class="cellalignment6246" headers="d35260e2655 d35260e2389">
<p><code class="codeph">SQLT_UIN</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2670" headers="d35260e2377">
<p><code class="codeph">LONG VARCHAR</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2670 d35260e2380">
<p>94</p>
</td>
<td class="cellalignment6256" headers="d35260e2670 d35260e2383">
<p>char[n+sizeof(integer)]</p>
</td>
<td class="cellalignment6246" headers="d35260e2670 d35260e2389">
<p><code class="codeph">SQLT_LVC</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2685" headers="d35260e2377">
<p><code class="codeph">LONG VARRAW</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2685 d35260e2380">
<p>95</p>
</td>
<td class="cellalignment6256" headers="d35260e2685 d35260e2383">
<p>unsigned char[n+sizeof(integer)]</p>
</td>
<td class="cellalignment6246" headers="d35260e2685 d35260e2389">
<p><code class="codeph">SQLT_LVB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2700" headers="d35260e2377">
<p><code class="codeph">CHAR</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2700 d35260e2380">
<p>96</p>
</td>
<td class="cellalignment6256" headers="d35260e2700 d35260e2383">
<p>char[n]</p>
</td>
<td class="cellalignment6246" headers="d35260e2700 d35260e2389">
<p><code class="codeph">SQLT_AFC</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2715" headers="d35260e2377">
<p><code class="codeph">CHARZ</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2715 d35260e2380">
<p>97</p>
</td>
<td class="cellalignment6256" headers="d35260e2715 d35260e2383">
<p>char[n+1]</p>
</td>
<td class="cellalignment6246" headers="d35260e2715 d35260e2389">
<p><code class="codeph">SQLT_AVC</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2731" headers="d35260e2377">
<p><code class="codeph">ROWID</code> descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2731 d35260e2380">
<p>104</p>
</td>
<td class="cellalignment6256" headers="d35260e2731 d35260e2383">
<p>OCIRowid *</p>
</td>
<td class="cellalignment6246" headers="d35260e2731 d35260e2389">
<p><code class="codeph">SQLT_RDD</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2747" headers="d35260e2377">
<p>NAMED DATATYPE</p>
</td>
<td class="cellalignment6303" headers="d35260e2747 d35260e2380">
<p>108</p>
</td>
<td class="cellalignment6256" headers="d35260e2747 d35260e2383">
<p>struct</p>
</td>
<td class="cellalignment6246" headers="d35260e2747 d35260e2389">
<p><code class="codeph">SQLT_NTY</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2761" headers="d35260e2377">
<p><code class="codeph">REF</code></p>
</td>
<td class="cellalignment6303" headers="d35260e2761 d35260e2380">
<p>110</p>
</td>
<td class="cellalignment6256" headers="d35260e2761 d35260e2383">
<p>OCIRef</p>
</td>
<td class="cellalignment6246" headers="d35260e2761 d35260e2389">
<p><code class="codeph">SQLT_REF</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2776" headers="d35260e2377">
<p>Character LOB descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2776 d35260e2380">
<p>112</p>
</td>
<td class="cellalignment6256" headers="d35260e2776 d35260e2383">
<p>OCILobLocator<a id="GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGIEIJD" href="#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGIEIJD" onclick="footdisplay(2,&#34;In applications using data type mappings generated by OTT, CLOBs may be mapped as OCIClobLocator, and BLOBs may be mapped as OCIBlobLocator. For more information, see Chapter 15. &#34;)"><sup>Foot&nbsp;2</sup></a></p>
</td>
<td class="cellalignment6246" headers="d35260e2776 d35260e2389">
<p><code class="codeph">SQLT_CLOB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2793" headers="d35260e2377">
<p>Binary LOB descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2793 d35260e2380">
<p>113</p>
</td>
<td class="cellalignment6256" headers="d35260e2793 d35260e2383">
<p>OCILobLocator<a id="fnsrc_d35260e2802" href="#fnsrc_d35260e2802" onclick="footdisplay(2,&#34;In applications using data type mappings generated by OTT, CLOBs may be mapped as OCIClobLocator, and BLOBs may be mapped as OCIBlobLocator. For more information, see Chapter 15. &#34;)"><sup>Footref&nbsp;2</sup></a></p>
</td>
<td class="cellalignment6246" headers="d35260e2793 d35260e2389">
<p><code class="codeph">SQLT_BLOB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2809" headers="d35260e2377">
<p>Binary FILE descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2809 d35260e2380">
<p>114</p>
</td>
<td class="cellalignment6256" headers="d35260e2809 d35260e2383">
<p>OCILobLocator</p>
</td>
<td class="cellalignment6246" headers="d35260e2809 d35260e2389">
<p><code class="codeph">SQLT_FILE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2823" headers="d35260e2377">
<p><code class="codeph">OCI STRING</code> type</p>
</td>
<td class="cellalignment6303" headers="d35260e2823 d35260e2380">
<p>155</p>
</td>
<td class="cellalignment6256" headers="d35260e2823 d35260e2383">
<p>OCIString</p>
</td>
<td class="cellalignment6246" headers="d35260e2823 d35260e2389">
<p><code class="codeph">SQLT_VST</code><a id="GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGHABFC" href="#GUID-D69455D9-CE01-44CC-B5A9-E541C7774805__CEGHABFC" onclick="footdisplay(3,&#34;For more information about the use of these data types, see Chapter 12. &#34;)"><sup>Foot&nbsp;3</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2842" headers="d35260e2377">
<p><code class="codeph">OCI DATE</code> type</p>
</td>
<td class="cellalignment6303" headers="d35260e2842 d35260e2380">
<p>156</p>
</td>
<td class="cellalignment6256" headers="d35260e2842 d35260e2383">
<p>OCIDate *</p>
</td>
<td class="cellalignment6246" headers="d35260e2842 d35260e2389">
<p><code class="codeph">SQLT_ODT</code><a id="fnsrc_d35260e2857" href="#fnsrc_d35260e2857" onclick="footdisplay(3,&#34;For more information about the use of these data types, see Chapter 12. &#34;)"><sup>Footref&nbsp;3</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2860" headers="d35260e2377">
<p><code class="codeph">ANSI DATE</code> descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2860 d35260e2380">
<p>184</p>
</td>
<td class="cellalignment6256" headers="d35260e2860 d35260e2383">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment6246" headers="d35260e2860 d35260e2389">
<p><code class="codeph">SQLT_DATE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2876" headers="d35260e2377">
<p><code class="codeph">TIMESTAMP</code> descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2876 d35260e2380">
<p>187</p>
</td>
<td class="cellalignment6256" headers="d35260e2876 d35260e2383">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment6246" headers="d35260e2876 d35260e2389">
<p><code class="codeph">SQLT_TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2892" headers="d35260e2377">
<p><code class="codeph">TIMESTAMP WITH TIME ZONE</code> descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2892 d35260e2380">
<p>188</p>
</td>
<td class="cellalignment6256" headers="d35260e2892 d35260e2383">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment6246" headers="d35260e2892 d35260e2389">
<p><code class="codeph">SQLT_TIMESTAMP_TZ</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2909" headers="d35260e2377">
<p><code class="codeph">INTERVAL YEAR TO MONTH</code> descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2909 d35260e2380">
<p>189</p>
</td>
<td class="cellalignment6256" headers="d35260e2909 d35260e2383">
<p>OCIInterval *</p>
</td>
<td class="cellalignment6246" headers="d35260e2909 d35260e2389">
<p><code class="codeph">SQLT_INTERVAL_YM</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2925" headers="d35260e2377">
<p><code class="codeph">INTERVAL DAY TO SECOND</code> descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2925 d35260e2380">
<p>190</p>
</td>
<td class="cellalignment6256" headers="d35260e2925 d35260e2383">
<p>OCIInterval *</p>
</td>
<td class="cellalignment6246" headers="d35260e2925 d35260e2389">
<p><code class="codeph">SQLT_INTERVAL_DS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6279" id="d35260e2941" headers="d35260e2377">
<p><code class="codeph">TIMESTAMP WITH LOCAL TIME ZONE</code> descriptor</p>
</td>
<td class="cellalignment6303" headers="d35260e2941 d35260e2380">
<p>232</p>
</td>
<td class="cellalignment6256" headers="d35260e2941 d35260e2383">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment6246" headers="d35260e2941 d35260e2389">
<p><code class="codeph">SQLT_TIMESTAMP_LTZ</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1</sup> Where the length is shown as n, it is a variable, and depends on the requirements of the program (or of the operating system for ROWID).</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2</sup></p>
<p>In applications using data type mappings generated by OTT, CLOBs may be mapped as OCIClobLocator, and BLOBs may be mapped as OCIBlobLocator. For more information, see Chapter 15.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3</sup></p>
<p>For more information about the use of these data types, see Chapter 12.</p>
<div class="section">
<div class="p">This section includes the following topics describing these external data types:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-9F594E9A-DEFC-452B-9869-56713E43638D" title="You must specify the desired length for the return value in value_sz for bind and define functions.">VARCHAR2</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-91151345-2C67-41BC-A782-AD4816B89BCF" title="You should not need to use NUMBER as an external data type.">NUMBER</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-9BC40A57-5AF9-4A58-AD72-139140DD3BB3" title="You can bind and define integer values greater than 32-bit size (more than nine digits of precision) from and into a NUMBER column using a 64-bit native host variable and SQLT_INT or SQLT_UIN as the external data type in an OCI application.">64-Bit Integer Host Data Type</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-666F4D53-F926-4199-BA74-0EA7AA290C1A">INTEGER</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-FFAF43F4-983C-47B6-BDCE-771DBA80EDA3">FLOAT</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-A6D9756C-9E3A-4AD6-A5DF-392DF1D74934" title="The NULL-terminated STRING format behaves like the VARCHAR2 format, except that the string must contain a NULL terminator character.">STRING</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-D002B932-9BAF-471C-AEE2-569815B43F29">VARNUM</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-A4B5A998-038A-44BA-A673-C41BEAC05C42">LONG</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-37C82FD7-50AD-41B9-B6A2-4AC04364C46D">VARCHAR</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328" title="The DATE data type can update, insert, or retrieve a date value using the Oracle internal date binary format.">DATE</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-CB58A9B9-9A86-48F9-AAA9-14E56FF55BD2">RAW</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-2B073F50-EADD-4280-A6F0-D2FB7D907F2C">VARRAW</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-BFED0382-28B3-4C30-8BC6-793186982FBD">LONG RAW</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-F9CA40B4-14F8-4F47-AEF6-D9E6F32B0DD6">UNSIGNED</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-461BA3FE-3042-49F9-A823-99EE2D84E3EE">LONG VARCHAR</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-2619053E-80C3-476B-9720-3EDA220283FB">LONG VARRAW</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-CF1E5A47-4332-491D-BBB0-FACF81377A21" title="The CHAR data type is a string of characters, with a maximum length of 2000.">CHAR</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-8373B154-64EF-4279-9250-1334A40533DD">CHARZ</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-72D5AB6E-05B1-4144-BAF0-CA2C8538E3D2" title="Named data types are user-defined types that are specified with the CREATE TYPE command in SQL.">Named Data Types: Object, VARRAY, Nested Table</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-43D2E2C0-E0B1-4712-AAEC-17DC8B84AE7B" title="This is a reference to a named data type.">REF</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-B43C9477-518A-44AD-BF9D-7F44A4F2ADD6" title="The ROWID data type identifies a particular row in a database table.">ROWID Descriptor</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-B04BC9DC-4C53-41B9-8EC4-18BA2DF34ED7" title="A LOB (large object) stores binary or character data up to 128 terabytes (TB) in length.">LOB Descriptor</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-2FC7CC65-52E0-4F60-90DA-68BBB4EA2721" title="Lists and describes the datetime and interval data type descriptors.">Datetime and Interval Data Type Descriptors</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-3A98A99E-9CF4-4E7C-8F18-15F60EE1BF34">Native Float and Native Double</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-0DB74E18-12CE-4647-B77F-D5BE13897E28" title="OCI supports Oracle-defined C data types for mapping user-defined data types to C representations (for example, OCINumber, OCIArray).">C Object-Relational Data Type Mappings</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI16273"></a>
<div class="props_rev_3"><a id="GUID-9F594E9A-DEFC-452B-9869-56713E43638D"></a>
<h3 id="LNOCI-GUID-9F594E9A-DEFC-452B-9869-56713E43638D" class="sect3">VARCHAR2</h3>
<div>
<p>The <code class="codeph">VARCHAR2</code> data type is a variable-length string of characters with a maximum length of 4000 bytes. If the <code class="codeph">init.ora</code> parameter <code class="codeph">max_string_size = standard</code> (default value), the maximum length of a <code class="codeph">VARCHAR2</code> can be 4000 bytes. If the <code class="codeph">init.ora</code> parameter <code class="codeph">max_string_size = extended</code>, the maximum length of a <code class="codeph">VARCHAR2</code> can be 32767 bytes.</p>
<div class="infobox-note" id="GUID-9F594E9A-DEFC-452B-9869-56713E43638D__GUID-87F46689-3FD8-4C5B-984C-112C51394083">
<p class="notep1">Note:</p>
<p>If you are using Oracle Database objects, you can work with a special <code class="codeph">OCIString</code> external data type using a set of predefined OCI functions. See <a href="oci12oty.htm#GUID-C62AEE74-0CC5-4FAB-A91F-997F71C49C2C" title="This chapter describes the purpose and structure of each of the data types that can be manipulated by the OCI data type mapping and manipulation functions.">Object-Relational Data Types in OCI</a> for more information about this data type.</p>
</div>
</div>
<a id="LNOCI16274"></a>
<div class="props_rev_3"><a id="GUID-0ABC05E4-E2A3-4D53-9FFD-8C7043A5604B"></a>
<h4 id="LNOCI-GUID-0ABC05E4-E2A3-4D53-9FFD-8C7043A5604B" class="sect4">Input</h4>
<div>
<p>The <code class="codeph">value_sz</code> parameter determines the length in the <a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a> or <a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a> call. If you are using extended <code class="codeph">VARCHAR2</code> lengths, then the <code class="codeph">value_sz</code> parameter determines the length in the <a href="oci16rel003.htm#GUID-55C47708-5468-4106-89BE-1AB60861D037" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this function when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByName2()</a> and <a href="oci16rel003.htm#GUID-5C505821-323D-473D-825B-448C8D9A6702" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByPos2()</a> calls.</p>
<p>If the <code class="codeph">value_sz</code> parameter is greater than zero, Oracle Database obtains the bind variable value by reading exactly that many bytes, starting at the buffer address in your program. Trailing blanks are stripped, and the resulting value is used in the SQL statement or PL/SQL block. If, with an <code class="codeph">INSERT</code> statement, the resulting value is longer than the defined length of the database column, the <code class="codeph">INSERT</code> fails, and an error is returned.</p>
<div class="infobox-note" id="GUID-0ABC05E4-E2A3-4D53-9FFD-8C7043A5604B__GUID-71F9836A-C295-4B4B-81DE-7BD5193A39A6">
<p class="notep1">Note:</p>
<p>A trailing <code class="codeph">NULL</code> is not stripped. Variables should be blank-padded but not <code class="codeph">NULL</code>-terminated.</p>
</div>
<p>If the <code class="codeph">value_sz</code> parameter is zero, Oracle Database treats the bind variable as a <code class="codeph">NULL</code>, regardless of its actual content. Of course, a <code class="codeph">NULL</code> must be allowed for the bind variable value in the SQL statement. If you try to insert a <code class="codeph">NULL</code> into a column that has a <code class="codeph">NOT</code> <code class="codeph">NULL</code> integrity constraint, Oracle Database issues an error, and the row is not inserted.</p>
<p>When the Oracle internal (column) data type is <code class="codeph">NUMBER</code>, input from a character string that contains the character representation of a number is legal. Input character strings are converted to internal numeric format. If the <code class="codeph">VARCHAR2</code> string contains an illegal conversion character, Oracle Database returns an error and the value is not inserted into the database.</p>
</div>
</div>
<a id="LNOCI16275"></a>
<div class="props_rev_3"><a id="GUID-1BE18DF9-EDFE-4326-A846-59E5D75B257F"></a>
<h4 id="LNOCI-GUID-1BE18DF9-EDFE-4326-A846-59E5D75B257F" class="sect4">Output</h4>
<div>
<p>You must specify the desired length for the return value in <code class="codeph">value_sz</code> for bind and define functions.</p>
<p>Specify the desired length for the return value in the <code class="codeph">value_sz</code> parameter of the <code class="codeph">OCIDefineByPos()</code> call, or the <code class="codeph">value_sz</code> parameter of <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByPos()</code> for PL/SQL blocks. If zero is specified for the length, no data is returned. If you are using extended <code class="codeph">VARCHAR2</code> lengths, then the <code class="codeph">value_sz</code> parameter determines the desired length for the return value in the <code class="codeph">OCIDefineByPos2()</code> call, or in the <code class="codeph">OCIBindByName2()</code> and <code class="codeph">OCIBindByPos2()</code> calls for PL/SQL blocks.</p>
<p>If you omit the <code class="codeph">rlenp</code> parameter of <code class="codeph">OCIDefineByPos()</code>, returned values are blank-padded to the buffer length, and <code class="codeph">NULL</code>s are returned as a string of blank characters. If <code class="codeph">rlenp</code> is included, returned values are not blank-padded. Instead, their actual lengths are returned in the <code class="codeph">rlenp</code> parameter.</p>
<p>To check if a <code class="codeph">NULL</code> is returned or if character truncation has occurred, include an indicator parameter in the <code class="codeph">OCIDefineByPos()</code> call. Oracle Database sets the indicator parameter to -1 when a <code class="codeph">NULL</code> is fetched and to the original column length when the returned value is truncated. Otherwise, it is set to zero. If you do not specify an indicator parameter and a <code class="codeph">NULL</code> is selected, the fetch call returns the error code <code class="codeph">OCI_SUCCESS_WITH_INFO</code>. Retrieving diagnostic information for the error returns <code class="codeph">ORA-1405</code>.</p>
<div class="infoboxnotealso" id="GUID-1BE18DF9-EDFE-4326-A846-59E5D75B257F__GUID-032B2FEB-617E-4C69-A691-3EDB55144E19">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-9966EDF7-37ED-42E5-AE57-67E394245BFA" title="Each bind and define OCI call has a parameter that associates an indicator variable, or an array of indicator variables, with a DML statement, a PL/SQL statement, or a query.">Indicator Variables</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a> or <a href="oci16rel003.htm#GUID-74939FB5-919E-4D24-B327-AFB532435061" title="Associates an item in a select list with the type and output data buffer. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIDefineByPos2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a> or <a href="oci16rel003.htm#GUID-55C47708-5468-4106-89BE-1AB60861D037" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this function when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByName2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a> or <a href="oci16rel003.htm#GUID-5C505821-323D-473D-825B-448C8D9A6702" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByPos2()</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="LNOCI16276"></a>
<div class="props_rev_3"><a id="GUID-91151345-2C67-41BC-A782-AD4816B89BCF"></a>
<h3 id="LNOCI-GUID-91151345-2C67-41BC-A782-AD4816B89BCF" class="sect3">NUMBER</h3>
<div>
<p>You should not need to use <code class="codeph">NUMBER</code> as an external data type.</p>
<div class="section">
<p>If you do use it as an external data type, Oracle Database returns numeric values in its internal 21-byte binary format and expects this format on input. The following discussion is included for completeness only.</p>
<div class="infobox-note" id="GUID-91151345-2C67-41BC-A782-AD4816B89BCF__GUID-1ADD7696-2336-4C61-8D2B-9F3EDEDED82A">
<p class="notep1">Note:</p>
<p>If you are using objects in an Oracle database, you can work with a special <code class="codeph">OCINumber</code> data type using a set of predefined OCI functions.</p>
</div>
<p>Oracle Database stores values of the <code class="codeph">NUMBER</code> data type in a variable-length format. The first byte is the exponent and is followed by 1 to 20 mantissa bytes. The high-order bit of the exponent byte is the sign bit; it is set for positive numbers, and it is cleared for negative numbers. The lower 7 bits represent the exponent, which is a base-100 digit with an offset of 65.</p>
<p>To calculate the decimal exponent, add 65 to the base-100 exponent and add another 128 if the number is positive. If the number is negative, you do the same, but subsequently the bits are inverted. For example, -5 has a base-100 exponent = 62 (0x3e). The decimal exponent is thus (~0x3e) -128 - 65 = 0xc1 -128 -65 = 193 -128 -65 = 0.</p>
<p>Each mantissa byte is a base-100 digit, in the range 1..100. For positive numbers, the digit has 1 added to it. So, the mantissa digit for the value 5 is 6. For negative numbers, instead of adding 1, the digit is subtracted from 101. So, the mantissa digit for the number -5 is 96 (101 - 5). Negative numbers have a byte containing 102 appended to the data bytes. However, negative numbers that have 20 mantissa bytes do not have the trailing 102 byte. Because the mantissa digits are stored in base 100, each byte can represent 2 decimal digits. The mantissa is normalized; leading zeros are not stored.</p>
<p>Up to 20 data bytes can represent the mantissa. However, only 19 are guaranteed to be accurate. The 19 data bytes, each representing a base-100 digit, yield a maximum precision of 38 digits for an Oracle <code class="codeph">NUMBER</code>.</p>
<p>If you specify the data type code 2 in the <code class="codeph">dty</code> parameter of an <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code> call, your program receives numeric data in this Oracle internal format. The output variable should be a 21-byte array to accommodate the largest possible number. Note that only the bytes that represent the number are returned. There is no blank padding or <code class="codeph">NULL</code> termination. If you must know the number of bytes returned, use the <code class="codeph">VARNUM</code> external data type instead of <code class="codeph">NUMBER</code>.</p>
<div class="infoboxnotealso" id="GUID-91151345-2C67-41BC-A782-AD4816B89BCF__GUID-19EE1631-164E-4BDF-AC57-21BC94047846">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41">OCINumber Examples</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-D002B932-9BAF-471C-AEE2-569815B43F29">VARNUM</a> for a description of the internal <code class="codeph">NUMBER</code> format</p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-AC31C501-8512-427B-9C0E-FF7F85E0C067" title="The OCINumber data type is an opaque structure used to represent Oracle numeric data types (NUMBER, FLOAT, DECIMAL, and so forth).">Number (OCINumber)</a> more information about the <code class="codeph">OCINumber</code> data type</p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a> or <a href="oci16rel003.htm#GUID-74939FB5-919E-4D24-B327-AFB532435061" title="Associates an item in a select list with the type and output data buffer. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIDefineByPos2()</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI039"></a>
<div class="props_rev_3"><a id="GUID-9BC40A57-5AF9-4A58-AD72-139140DD3BB3"></a>
<h3 id="LNOCI-GUID-9BC40A57-5AF9-4A58-AD72-139140DD3BB3" class="sect3">64-Bit Integer Host Data Type</h3>
<div>
<p>You can bind and define integer values greater than 32-bit size (more than nine digits of precision) from and into a <code class="codeph">NUMBER</code> column using a 64-bit native host variable and <code class="codeph">SQLT_INT</code> or <code class="codeph">SQLT_UIN</code> as the external data type in an OCI application.</p>
<p>Starting with release 11.2, OCI supports the ability to bind and define integer values greater than 32-bit size (more than nine digits of precision) from and into a <code class="codeph">NUMBER</code> column using a 64-bit native host variable and <code class="codeph">SQLT_INT</code> or <code class="codeph">SQLT_UIN</code> as the external data type in an OCI application.</p>
<p>This feature enables an application to bind and define 8-byte native host variables using <code class="codeph">SQLT_INT</code> or <code class="codeph">SQLT_UIN</code> external data types in the OCI bind and define function calls on all platforms. The <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code>, <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByName2()</code>, and <code class="codeph">OCIBindByPos()</code> or <code class="codeph">OCIBindByPos2()</code> function calls can specify an 8-byte integer data type pointer as the <code class="codeph">valuep</code> parameter. This feature enables you to insert and fetch large integer values (up to 18 decimal digits of precision) directly into and from native host variables and to perform free arithmetic on them.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-EC19CFA8-0618-4068-93A9-284BABC9887D">OCI Bind and Define for 64-Bit Integers</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-B03F56A5-5315-4B11-A8BE-A9B9BB0D49DA">Support for OUT Bind DML Returning Statements</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a> or <a href="oci16rel003.htm#GUID-74939FB5-919E-4D24-B327-AFB532435061" title="Associates an item in a select list with the type and output data buffer. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIDefineByPos2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a> or <a href="oci16rel003.htm#GUID-55C47708-5468-4106-89BE-1AB60861D037" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this function when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByName2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a> or <a href="oci16rel003.htm#GUID-5C505821-323D-473D-825B-448C8D9A6702" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByPos2()</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI72594"></a><a id="LNOCI16277"></a>
<div class="props_rev_2"><a id="GUID-EC19CFA8-0618-4068-93A9-284BABC9887D"></a>
<h4 id="LNOCI-GUID-EC19CFA8-0618-4068-93A9-284BABC9887D" class="sect4">OCI Bind and Define for 64-Bit Integers</h4>
<div>
<div class="section">
<p><a href="oci03typ.htm#GUID-EC19CFA8-0618-4068-93A9-284BABC9887D__CEGHEBFH">Example 3-1</a> shows a code fragment that works without errors.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-EC19CFA8-0618-4068-93A9-284BABC9887D__CEGHEBFH">
<p class="titleinexample">Example 3-1 OCI Bind and Define Support for 64-Bit Integers</p>
<pre dir="ltr">...
/* Variable declarations */
orasb8    sbigval1, sbigval2, sbigval3; // Signed 8-byte variables.
oraub8    ubigval1, ubigval2, ubigval3; // Unsigned 8-byte variables.
...
/* Bind Statements */
OCIBindByPos(..., (void *) &amp;sbigval1, sizeof(sbigval1), ..., SQLT_INT, ...);
OCIBindByPos(..., (void *) &amp;ubigval1, sizeof(ubigval1), ..., SQLT_UIN, ...);
OCIBindByName(...,(void *) &amp;sbigval2, sizeof(sbigval2), ..., SQLT_INT, ...);
OCIBindByName(...,(void *) &amp;ubigval2, sizeof(ubigval2), ..., SQLT_UIN, ...);
...
/* Define Statements */
OCIDefineByPos(..., (void *) &amp;sbigval3, sizeof(sbigval3), ..., SQLT_INT, ...);
OCIDefineByPos(..., (void *) &amp;ubigval3, sizeof(ubigval3), ..., SQLT_UIN, ...);
...
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI72595"></a><a id="LNOCI16278"></a>
<div class="props_rev_3"><a id="GUID-B03F56A5-5315-4B11-A8BE-A9B9BB0D49DA"></a>
<h4 id="LNOCI-GUID-B03F56A5-5315-4B11-A8BE-A9B9BB0D49DA" class="sect4">Support for OUT Bind DML Returning Statements</h4>
<div>
<p><a href="oci03typ.htm#GUID-B03F56A5-5315-4B11-A8BE-A9B9BB0D49DA__CEGHJEJC">Example 3-2</a> shows a code fragment that illustrates binding 8-byte integer data types for OUT binds of a DML returning statement.</p>
<div class="example" id="GUID-B03F56A5-5315-4B11-A8BE-A9B9BB0D49DA__CEGHJEJC">
<p class="titleinexample">Example 3-2 Binding 8-Byte Integer Data Types for OUT Binds of a DML Returning Statement</p>
<pre dir="ltr">...
/* Define SQL statements to be used in program. */
static text *dml_stmt = (text *) &#34; UPDATE emp SET sal = sal + :1
                                   WHERE empno = :2
                                   RETURNING sal INTO :out1&#34;;
...
 
/* Declare all handles to be used in program. */
OCIStmt    *stmthp;
OCIError   *errhp;
OCIBind    *bnd1p   = (OCIBind *) 0;
OCIBind    *bnd2p   = (OCIBind *) 0;
OCIBind    *bnd3p   = (OCIBind *) 0;
...
 
/* Bind variable declarations */
orasb8    sbigval;   // OUT bind variable (8-byte size).
sword     eno, hike; // IN bind variables.
...
 
/* get values for IN bind variables */
...
 
/* Bind Statements */
OCIBindByPos(stmthp, &amp;bnd1p, errhp, 1, (dvoid *) &amp;hike,
            (sb4) sizeof(hike), SQLT_INT, (dvoid *) 0, 
            (ub2 *) 0, (ub2 *) 0, (ub4) 0, (ub4 *) 0, OCI_DEFAULT);
OCIBindByPos(stmthp, &amp;bnd2p, errhp, 2, (dvoid *) &amp;eno,
            (sb4) sizeof(eno), SQLT_INT, (dvoid *) 0, 
            (ub2 *) 0, (ub2 *) 0, (ub4) 0, (ub4 *) 0, OCI_DEFAULT);
OCIBindByName(stmthp, &amp;bnd3p, errhp, (text *) &#34;:out1&#34;, -1, 
             (dvoid *) &amp;sbigval, sizeof(sbigval), SQLT_INT, (dvoid *) 0,
             (ub2 *) 0, (ub2 *) 0, (ub4) 0, (ub4 *) 0, OCI_DEFAULT);
...
 
/* Use the returned OUT bind variable value */
...
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNOCI16279"></a>
<div class="props_rev_3"><a id="GUID-666F4D53-F926-4199-BA74-0EA7AA290C1A"></a>
<h3 id="LNOCI-GUID-666F4D53-F926-4199-BA74-0EA7AA290C1A" class="sect3">INTEGER</h3>
<div>
<div class="section">
<p>The <code class="codeph">INTEGER</code> data type converts numbers. An external integer is a signed binary number; the size in bytes is system-dependent. The host system architecture determines the order of the bytes in the variable. A length specification is required for input and output. If the number being returned from Oracle Database is not an integer, the fractional part is discarded, and no error or other indication is returned. If the number to be returned exceeds the capacity of a signed integer for the system, Oracle Database returns an &#34;overflow on conversion&#34; error.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16280"></a>
<div class="props_rev_3"><a id="GUID-FFAF43F4-983C-47B6-BDCE-771DBA80EDA3"></a>
<h3 id="LNOCI-GUID-FFAF43F4-983C-47B6-BDCE-771DBA80EDA3" class="sect3">FLOAT</h3>
<div>
<div class="section">
<p>The <code class="codeph">FLOAT</code> data type processes numbers that have fractional parts or that exceed the capacity of an integer. The number is represented in the host system&#39;s floating-point format. Normally the length is either 4 or 8 bytes. The length specification is required for both input and output.</p>
<p>The internal format of an Oracle number is decimal, and most floating-point implementations are binary; therefore, Oracle Database can represent numbers with greater precision than floating-point representations.</p>
<div class="infobox-note" id="GUID-FFAF43F4-983C-47B6-BDCE-771DBA80EDA3__GUID-878B39EE-0F6C-40C0-9666-E4C34D6B4F79">
<p class="notep1">Note:</p>
<p>You may receive a round-off error when converting between <code class="codeph">FLOAT</code> and <code class="codeph">NUMBER</code>. Using a <code class="codeph">FLOAT</code> as a bind variable in a query may return an <code class="codeph">ORA-1403</code> error. You can avoid this situation by converting the <code class="codeph">FLOAT</code> into a <code class="codeph">STRING</code> and then using <code class="codeph">VARCHAR2</code> or a <code class="codeph">NULL</code>-terminated string for the operation.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16281"></a>
<div class="props_rev_3"><a id="GUID-A6D9756C-9E3A-4AD6-A5DF-392DF1D74934"></a>
<h3 id="LNOCI-GUID-A6D9756C-9E3A-4AD6-A5DF-392DF1D74934" class="sect3">STRING</h3>
<div>
<p>The <code class="codeph">NULL</code>-terminated <code class="codeph">STRING</code> format behaves like the <code class="codeph">VARCHAR2</code> format, except that the string must contain a <code class="codeph">NULL</code> terminator character.</p>
<div class="section">
<p>The <code class="codeph">STRING</code> data type is most useful for C language programs.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-A2E5A0BF-1AE8-4A97-9197-D34017F23EE1">Input</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-E0FBDE82-8BA1-4C80-8690-8A916487EB76">Output</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI16282"></a>
<div class="props_rev_3"><a id="GUID-A2E5A0BF-1AE8-4A97-9197-D34017F23EE1"></a>
<h4 id="LNOCI-GUID-A2E5A0BF-1AE8-4A97-9197-D34017F23EE1" class="sect4">Input</h4>
<div>
<p>The string length supplied in the <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByPos()</code> call limits the scan for the <code class="codeph">NULL</code> terminator. If the <code class="codeph">NULL</code> terminator is not found within the length specified, Oracle Database issues the following error:</p>
<p>ORA-01480: trailing <code class="codeph">NULL</code> missing from <code class="codeph">STR</code> bind value</p>
<p>If the length is not specified in the bind call, OCI uses an implied maximum string length of 4000.</p>
<p>The minimum string length is 2 bytes. If the first character is a <code class="codeph">NULL</code> terminator and the length is specified as 2, a <code class="codeph">NULL</code> is inserted into the column, if permitted. Unlike types <code class="codeph">VARCHAR2</code> and <code class="codeph">CHAR</code>, a string containing all blanks is not treated as a <code class="codeph">NULL</code> on input; it is inserted as is.</p>
<div class="infobox-note" id="GUID-A2E5A0BF-1AE8-4A97-9197-D34017F23EE1__GUID-F8CE17DF-664D-4B4C-8680-A17AAF169492">
<p class="notep1">Note:</p>
<p>You cannot pass -1 for the string length parameter of a <code class="codeph">NULL</code>-terminated string</p>
</div>
</div>
</div>
<a id="LNOCI16283"></a>
<div class="props_rev_3"><a id="GUID-E0FBDE82-8BA1-4C80-8690-8A916487EB76"></a>
<h4 id="LNOCI-GUID-E0FBDE82-8BA1-4C80-8690-8A916487EB76" class="sect4">Output</h4>
<div>
<p>A <code class="codeph">NULL</code> terminator is placed after the last character returned. If the string exceeds the field length specified, it is truncated and the last character position of the output variable contains the <code class="codeph">NULL</code> terminator.</p>
<p>A <code class="codeph">NULL</code> select-list item returns a <code class="codeph">NULL</code> terminator character in the first character position. An <code class="codeph">ORA-01405</code> error is also possible.</p>
</div>
</div>
</div>
<a id="LNOCI16285"></a><a id="LNOCI16284"></a>
<div class="props_rev_3"><a id="GUID-D002B932-9BAF-471C-AEE2-569815B43F29"></a>
<h3 id="LNOCI-GUID-D002B932-9BAF-471C-AEE2-569815B43F29" class="sect3">VARNUM</h3>
<div>
<div class="section">
<p>The <code class="codeph">VARNUM</code> data type is like the external <code class="codeph">NUMBER</code> data type, except that the first byte contains the length of the number representation. This length does not include the length byte itself. Reserve 22 bytes to receive the longest possible <code class="codeph">VARNUM</code>. Set the length byte when you send a <code class="codeph">VARNUM</code> value to Oracle Database.</p>
<p><a href="oci03typ.htm#GUID-D002B932-9BAF-471C-AEE2-569815B43F29__G454194" title="This table has 5 columns. Column 1 is the decimal value, column 2 is the length byte, column 3 is the exponent byte, column 4 is the mantissa bytes, and column 5 is the terminator byte.">Table 3-3</a> shows several examples of the <code class="codeph">VARNUM</code> values returned for numbers in a table.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-D002B932-9BAF-471C-AEE2-569815B43F29__G454194">
<p class="titleintable">Table 3-3 VARNUM Examples</p>
<table class="cellalignment6175" title="VARNUM Examples " summary="This table has 5 columns. Column 1 is the decimal value, column 2 is the length byte, column 3 is the exponent byte, column 4 is the mantissa bytes, and column 5 is the terminator byte.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6226" id="d35260e5815">Decimal Value</th>
<th class="cellalignment6226" id="d35260e5818">Length Byte</th>
<th class="cellalignment6226" id="d35260e5821">Exponent Byte</th>
<th class="cellalignment6216" id="d35260e5824">Mantissa Bytes</th>
<th class="cellalignment6216" id="d35260e5827">Terminator Byte</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d35260e5832" headers="d35260e5815">
<p>0</p>
</td>
<td class="cellalignment6227" headers="d35260e5832 d35260e5818">
<p>1</p>
</td>
<td class="cellalignment6227" headers="d35260e5832 d35260e5821">
<p>128</p>
</td>
<td class="cellalignment6218" headers="d35260e5832 d35260e5824">
<p>Not applicable</p>
</td>
<td class="cellalignment6218" headers="d35260e5832 d35260e5827">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d35260e5848" headers="d35260e5815">
<p>5</p>
</td>
<td class="cellalignment6227" headers="d35260e5848 d35260e5818">
<p>2</p>
</td>
<td class="cellalignment6227" headers="d35260e5848 d35260e5821">
<p>193</p>
</td>
<td class="cellalignment6218" headers="d35260e5848 d35260e5824">
<p>6</p>
</td>
<td class="cellalignment6218" headers="d35260e5848 d35260e5827">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d35260e5864" headers="d35260e5815">
<p>-5</p>
</td>
<td class="cellalignment6227" headers="d35260e5864 d35260e5818">
<p>3</p>
</td>
<td class="cellalignment6227" headers="d35260e5864 d35260e5821">
<p>62</p>
</td>
<td class="cellalignment6218" headers="d35260e5864 d35260e5824">
<p>96</p>
</td>
<td class="cellalignment6218" headers="d35260e5864 d35260e5827">
<p>102</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d35260e5880" headers="d35260e5815">
<p>2767</p>
</td>
<td class="cellalignment6227" headers="d35260e5880 d35260e5818">
<p>3</p>
</td>
<td class="cellalignment6227" headers="d35260e5880 d35260e5821">
<p>194</p>
</td>
<td class="cellalignment6218" headers="d35260e5880 d35260e5824">
<p>28, 68</p>
</td>
<td class="cellalignment6218" headers="d35260e5880 d35260e5827">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d35260e5896" headers="d35260e5815">
<p>-2767</p>
</td>
<td class="cellalignment6227" headers="d35260e5896 d35260e5818">
<p>4</p>
</td>
<td class="cellalignment6227" headers="d35260e5896 d35260e5821">
<p>61</p>
</td>
<td class="cellalignment6218" headers="d35260e5896 d35260e5824">
<p>74, 34</p>
</td>
<td class="cellalignment6218" headers="d35260e5896 d35260e5827">
<p>102</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d35260e5912" headers="d35260e5815">
<p>100000</p>
</td>
<td class="cellalignment6227" headers="d35260e5912 d35260e5818">
<p>2</p>
</td>
<td class="cellalignment6227" headers="d35260e5912 d35260e5821">
<p>195</p>
</td>
<td class="cellalignment6218" headers="d35260e5912 d35260e5824">
<p>11</p>
</td>
<td class="cellalignment6218" headers="d35260e5912 d35260e5827">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6227" id="d35260e5928" headers="d35260e5815">
<p>1234567</p>
</td>
<td class="cellalignment6227" headers="d35260e5928 d35260e5818">
<p>5</p>
</td>
<td class="cellalignment6227" headers="d35260e5928 d35260e5821">
<p>196</p>
</td>
<td class="cellalignment6218" headers="d35260e5928 d35260e5824">
<p>2, 24, 46, 68</p>
</td>
<td class="cellalignment6218" headers="d35260e5928 d35260e5827">
<p>Not applicable</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI16286"></a>
<div class="props_rev_3"><a id="GUID-A4B5A998-038A-44BA-A673-C41BEAC05C42"></a>
<h3 id="LNOCI-GUID-A4B5A998-038A-44BA-A673-C41BEAC05C42" class="sect3">LONG</h3>
<div>
<div class="section">
<p>The <code class="codeph">LONG</code> data type stores character strings longer than 4000 bytes. You can store up to 2 gigabytes (2^31-1 bytes) in a <code class="codeph">LONG</code> column. Columns of this type are used only for storage and retrieval of long strings. They cannot be used in functions, expressions, or <code class="codeph">WHERE</code> clauses. <code class="codeph">LONG</code> column values are generally converted to and from character strings.</p>
<p>Do not create tables with <code class="codeph">LONG</code> columns. Use <code class="codeph">LOB</code> columns (<code class="codeph">CLOB</code>, <code class="codeph">NCLOB</code>, or <code class="codeph">BLOB</code>) instead. <code class="codeph">LONG</code> columns are supported only for backward compatibility.</p>
<p>Oracle also recommends that you convert existing <code class="codeph">LONG</code> columns to <code class="codeph">LOB</code> columns. <code class="codeph">LOB</code> columns are subject to far fewer restrictions than <code class="codeph">LONG</code> columns. Furthermore, <code class="codeph">LOB</code> functionality is enhanced in every release, but <code class="codeph">LONG</code> functionality has been static for several releases.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16287"></a>
<div class="props_rev_3"><a id="GUID-37C82FD7-50AD-41B9-B6A2-4AC04364C46D"></a>
<h3 id="LNOCI-GUID-37C82FD7-50AD-41B9-B6A2-4AC04364C46D" class="sect3">VARCHAR</h3>
<div>
<div class="section">
<p>The <code class="codeph">VARCHAR</code> data type stores character strings of varying length. The first 2 bytes contain the length of the character string, and the remaining bytes contain the string. The specified length of the string in a bind or a define call must include the two length bytes, so the largest <code class="codeph">VARCHAR</code> string that can be received or sent is 65533 bytes long, not 65535.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16289"></a><a id="LNOCI16288"></a>
<div class="props_rev_3"><a id="GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328"></a>
<h3 id="LNOCI-GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328" class="sect3">DATE</h3>
<div>
<p>The <code class="codeph">DATE</code> data type can update, insert, or retrieve a date value using the Oracle internal date binary format.</p>
<div class="section">
<p>A date in binary format contains 7 bytes, as shown in <a href="oci03typ.htm#GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328__CEGGCDCF" title="This table has 3 columns and 3 rows. Row 1 is the byte number, row 2 is its meaning, and row 3 is an example for the given Date. Columns 2 through 8 represent bytes 1 through 7 as a date in binary format contains 7 bytes.">Table 3-4</a>.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328__CEGGCDCF">
<p class="titleintable">Table 3-4 Format of the DATE Data Type</p>
<table class="cellalignment6175" title="Format of the DATE Data Type" summary="This table has 3 columns and 3 rows. Row 1 is the byte number, row 2 is its meaning, and row 3 is an example for the given Date. Columns 2 through 8 represent bytes 1 through 7 as a date in binary format contains 7 bytes.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6212" id="d35260e6512">Byte</th>
<th class="cellalignment6207" id="d35260e6515">1</th>
<th class="cellalignment6210" id="d35260e6518">2</th>
<th class="cellalignment6210" id="d35260e6521">3</th>
<th class="cellalignment6210" id="d35260e6524">4</th>
<th class="cellalignment6210" id="d35260e6527">5</th>
<th class="cellalignment6302" id="d35260e6530">6</th>
<th class="cellalignment6210" id="d35260e6533">7</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6214" id="d35260e6538" headers="d35260e6512">
<p>Meaning</p>
</td>
<td class="cellalignment6209" headers="d35260e6538 d35260e6515">
<p>Century</p>
</td>
<td class="cellalignment6211" headers="d35260e6538 d35260e6518">
<p>Year</p>
</td>
<td class="cellalignment6211" headers="d35260e6538 d35260e6521">
<p>Month</p>
</td>
<td class="cellalignment6211" headers="d35260e6538 d35260e6524">
<p>Day</p>
</td>
<td class="cellalignment6211" headers="d35260e6538 d35260e6527">
<p>Hour</p>
</td>
<td class="cellalignment6303" headers="d35260e6538 d35260e6530">
<p>Minute</p>
</td>
<td class="cellalignment6211" headers="d35260e6538 d35260e6533">
<p>Second</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6214" id="d35260e6563" headers="d35260e6512">
<p>Example (for 30-NOV-1992, 3:17 PM)</p>
</td>
<td class="cellalignment6209" headers="d35260e6563 d35260e6515">
<p>119</p>
</td>
<td class="cellalignment6211" headers="d35260e6563 d35260e6518">
<p>192</p>
</td>
<td class="cellalignment6211" headers="d35260e6563 d35260e6521">
<p>11</p>
</td>
<td class="cellalignment6211" headers="d35260e6563 d35260e6524">
<p>30</p>
</td>
<td class="cellalignment6211" headers="d35260e6563 d35260e6527">
<p>16</p>
</td>
<td class="cellalignment6303" headers="d35260e6563 d35260e6530">
<p>18</p>
</td>
<td class="cellalignment6211" headers="d35260e6563 d35260e6533">
<p>1</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<p>The century and year bytes (bytes 1 and 2) are in excess-100 notation. The first byte stores the value of the year, which is 1992, as an integer, divided by 100, giving 119 in excess-100 notation. The second byte stores year modulo 100, giving 192. Dates Before Common Era (BCE) are less than 100. The era begins on 01-JAN-4712 BCE, which is Julian day 1. For this date, the century byte is 53, and the year byte is 88. The hour, minute, and second bytes are in excess-1 notation. The hour byte ranges from 1 to 24, the minute and second bytes from 1 to 60. If no time was specified when the date was created, the time defaults to midnight (1, 1, 1).</p>
<p>When you enter a date in binary format using the <code class="codeph">DATE</code> external data type, the database does not do consistency or range checking. All data in this format must be carefully validated before input.</p>
<div class="infobox-note" id="GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328__GUID-664116C3-CFA5-4880-97F4-AE3EC93F89ED">
<p class="notep1">Note:</p>
<p>There is little need to use the Oracle external <code class="codeph">DATE</code> data type in ordinary database operations. It is much more convenient to convert <code class="codeph">DATE</code> into character format, because the program usually deals with data in a character format, such as DD-MON-YY.</p>
</div>
<p>When a <code class="codeph">DATE</code> column is converted to a character string in your program, it is returned using the default format mask for your session, or as specified in the <code class="codeph">INIT.ORA</code> file.</p>
<p>If you are using objects in an Oracle database, you can work with a special <code class="codeph">OCIDate</code> data type using a set of predefined OCI functions.</p>
<div class="infoboxnotealso" id="GUID-C5E4228A-949E-4DAB-A10F-2A8C6C095328__GUID-13BC5F5E-2BB0-4A3B-8900-8D2E9283E6EA">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-97999BC9-BC69-44AE-ACE1-CD077BAC37D0" title="The Oracle date format is mapped in C by the OCIDate type, which is an opaque C struct. Elements of the struct represent the year, month, day, hour, minute, and second of the date.">Date (OCIDate)</a> for more information about the <code class="codeph">OCIDate</code> data type</p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-2FC7CC65-52E0-4F60-90DA-68BBB4EA2721" title="Lists and describes the datetime and interval data type descriptors.">Datetime and Interval Data Type Descriptors</a> for information about <code class="codeph">DATETIME</code> and <code class="codeph">INTERVAL</code> data types</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16290"></a>
<div class="props_rev_3"><a id="GUID-CB58A9B9-9A86-48F9-AAA9-14E56FF55BD2"></a>
<h3 id="LNOCI-GUID-CB58A9B9-9A86-48F9-AAA9-14E56FF55BD2" class="sect3">RAW</h3>
<div>
<div class="section">
<p>The <code class="codeph">RAW</code> data type is used for binary data or byte strings that are not to be interpreted by Oracle Database, for example, to store graphics character sequences. The maximum length of a <code class="codeph">RAW</code> column is 2000 bytes. If the <code class="codeph">init.ora</code> parameter <code class="codeph">max_string_size = standard</code> (default value), the maximum length of a <code class="codeph">RAW</code> can be 2000 bytes. If the <code class="codeph">init.ora</code> parameter <code class="codeph">max_string_size = extended</code>, the maximum length of a <code class="codeph">RAW</code> can be 32767 bytes.</p>
<div class="infoboxnotealso" id="GUID-CB58A9B9-9A86-48F9-AAA9-14E56FF55BD2__GUID-203C0E98-A196-4FE8-9B54-C841973B993F">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF50993" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF50993"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</div>
<p>When <code class="codeph">RAW</code> data in an Oracle Database table is converted to a character string in a program, the data is represented in hexadecimal character code. Each byte of the <code class="codeph">RAW</code> data is returned as two characters that indicate the value of the byte, from &#39;00&#39; to &#39;FF&#39;. To input a character string in your program to a <code class="codeph">RAW</code> column in an Oracle Database table, you must code the data in the character string using this hexadecimal code.</p>
<p>You can use the piecewise capabilities provided by <code class="codeph">OCIDefineByPos()</code>, <code class="codeph">OCIBindByName()</code>, <code class="codeph">OCIBindByPos()</code>, <code class="codeph">OCIStmtGetPieceInfo()</code>, and <code class="codeph">OCIStmtSetPieceInfo()</code> to perform inserts, updates, or fetches involving <code class="codeph">RAW</code> (or <code class="codeph">LONG</code> <code class="codeph">RAW</code>) columns.</p>
<p>If you are using objects in an Oracle database, you can work with a special <code class="codeph">OCIRaw</code> data type using a set of predefined OCI functions. See <span class="q">&#34;<a href="oci12oty.htm#GUID-2E651841-433D-4EE7-9606-8372E3AB7463" title="Variable-length raw data is represented in C using the OCIRaw * data type.">Raw (OCIRaw)</a>&#34;</span> for more information about this data type.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16291"></a>
<div class="props_rev_3"><a id="GUID-2B073F50-EADD-4280-A6F0-D2FB7D907F2C"></a>
<h3 id="LNOCI-GUID-2B073F50-EADD-4280-A6F0-D2FB7D907F2C" class="sect3">VARRAW</h3>
<div>
<div class="section">
<p>The <code class="codeph">VARRAW</code> data type is similar to the <code class="codeph">RAW</code> data type. However, the first 2 bytes contain the length of the data. The specified length of the string in a bind or a define call must include the two length bytes, so the largest <code class="codeph">VARRAW</code> string that can be received or sent is 65533 bytes, not 65535. For converting longer strings, use the <code class="codeph">LONG</code> <code class="codeph">VARRAW</code> external data type.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16292"></a>
<div class="props_rev_3"><a id="GUID-BFED0382-28B3-4C30-8BC6-793186982FBD"></a>
<h3 id="LNOCI-GUID-BFED0382-28B3-4C30-8BC6-793186982FBD" class="sect3">LONG RAW</h3>
<div>
<div class="section">
<p>The <code class="codeph">LONG</code> <code class="codeph">RAW</code> data type is similar to the <code class="codeph">RAW</code> data type, except that it stores raw data with a length up to 2 gigabytes (2^31-1 bytes).</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16293"></a>
<div class="props_rev_3"><a id="GUID-F9CA40B4-14F8-4F47-AEF6-D9E6F32B0DD6"></a>
<h3 id="LNOCI-GUID-F9CA40B4-14F8-4F47-AEF6-D9E6F32B0DD6" class="sect3">UNSIGNED</h3>
<div>
<div class="section">
<p>The <code class="codeph">UNSIGNED</code> data type is used for unsigned binary integers. The size in bytes is system-dependent. The host system architecture determines the order of the bytes in a word. A length specification is required for input and output. If the number being output from Oracle Database is not an integer, the fractional part is discarded, and no error or other indication is returned. If the number to be returned exceeds the capacity of an unsigned integer for the system, Oracle Database returns an &#34;overflow on conversion&#34; error.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16294"></a>
<div class="props_rev_3"><a id="GUID-461BA3FE-3042-49F9-A823-99EE2D84E3EE"></a>
<h3 id="LNOCI-GUID-461BA3FE-3042-49F9-A823-99EE2D84E3EE" class="sect3">LONG VARCHAR</h3>
<div>
<div class="section">
<p>The <code class="codeph">LONG</code> <code class="codeph">VARCHAR</code> data type stores data from and into an Oracle Database <code class="codeph">LONG</code> column. The first 4 bytes of a <code class="codeph">LONG</code> <code class="codeph">VARCHAR</code> contain the length of the item. So, the maximum length of a stored item is 2^31-5 bytes.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16295"></a>
<div class="props_rev_3"><a id="GUID-2619053E-80C3-476B-9720-3EDA220283FB"></a>
<h3 id="LNOCI-GUID-2619053E-80C3-476B-9720-3EDA220283FB" class="sect3">LONG VARRAW</h3>
<div>
<div class="section">
<p>The <code class="codeph">LONG</code> <code class="codeph">VARRAW</code> data type is used to store data from and into an Oracle Database <code class="codeph">LONG</code> <code class="codeph">RAW</code> column. The length is contained in the first four bytes. The maximum length is 2^31-5 bytes.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16296"></a>
<div class="props_rev_3"><a id="GUID-CF1E5A47-4332-491D-BBB0-FACF81377A21"></a>
<h3 id="LNOCI-GUID-CF1E5A47-4332-491D-BBB0-FACF81377A21" class="sect3">CHAR</h3>
<div>
<p>The <code class="codeph">CHAR</code> data type is a string of characters, with a maximum length of 2000.</p>
<div class="section">
<p><code class="codeph">CHAR</code> strings are compared using blank-padded comparison semantics.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-B57A3BE0-D6E9-4147-A4AA-BD389FCF917F">Input</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-B5AB06CB-A71B-40CE-B0D6-8A6B3D5455B0">Output</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-CF1E5A47-4332-491D-BBB0-FACF81377A21__GUID-21637F04-61A4-4EF0-A14A-C2FAB64CDED6">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF50974" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF50974"><span><cite>Oracle Database SQL Language Reference</cite></span></a></p>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI16297"></a>
<div class="props_rev_3"><a id="GUID-B57A3BE0-D6E9-4147-A4AA-BD389FCF917F"></a>
<h4 id="LNOCI-GUID-B57A3BE0-D6E9-4147-A4AA-BD389FCF917F" class="sect4">Input</h4>
<div>
<p>The length is determined by the <code class="codeph">value_sz</code> parameter in the <a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a> or <a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a> call.</p>
<div class="infobox-note" id="GUID-B57A3BE0-D6E9-4147-A4AA-BD389FCF917F__GUID-521CF4D6-BD15-4562-9C80-F8F98C0BAD7B">
<p class="notep1">Note:</p>
<p>The entire contents of the buffer (<code class="codeph">value_sz</code> chars) is passed to the database, including any trailing blanks or <code class="codeph">NULL</code>s.</p>
</div>
<p>If the <code class="codeph">value_sz</code> parameter is zero, Oracle Database treats the bind variable as a <code class="codeph">NULL</code>, regardless of its actual content. Of course, a <code class="codeph">NULL</code> must be allowed for the bind variable value in the SQL statement. If you try to insert a <code class="codeph">NULL</code> into a column that has a <code class="codeph">NOT</code> <code class="codeph">NULL</code> integrity constraint, Oracle Database issues an error and does not insert the row.</p>
<p>Negative values for the <code class="codeph">value_sz</code> parameter are not allowed for <code class="codeph">CHAR</code>s.</p>
<p>When the Oracle internal (column) data type is <code class="codeph">NUMBER</code>, input from a character string that contains the character representation of a number is legal. Input character strings are converted to internal numeric format. If the <code class="codeph">CHAR</code> string contains an illegal conversion character, Oracle Database returns an error and does not insert the value. Number conversion follows the conventions established by globalization support settings for your system. For example, your system might be configured to recognize a comma (,) rather than a period (.) as the decimal point.</p>
</div>
</div>
<a id="LNOCI16298"></a>
<div class="props_rev_3"><a id="GUID-B5AB06CB-A71B-40CE-B0D6-8A6B3D5455B0"></a>
<h4 id="LNOCI-GUID-B5AB06CB-A71B-40CE-B0D6-8A6B3D5455B0" class="sect4">Output</h4>
<div>
<p>Specify the desired length for the return value in the <code class="codeph">value_sz</code> parameter of the <a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a> call. If zero is specified for the length, no data is returned.</p>
<p>If you omit the <code class="codeph">rlenp</code> parameter of <code class="codeph">OCIDefineByPos()</code>, returned values are blank padded to the buffer length, and <code class="codeph">NULL</code>s are returned as a string of blank characters. If <code class="codeph">rlenp</code> is included, returned values are not blank-padded. Instead, their actual lengths are returned in the <code class="codeph">rlenp</code> parameter.</p>
<p>To check whether a <code class="codeph">NULL</code> is returned or character truncation occurs, include an indicator parameter or array of indicator parameters in the <a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a> call. An indicator parameter is set to -1 when a <code class="codeph">NULL</code> is fetched and to the original column length when the returned value is truncated. Otherwise, it is set to zero. If you do not specify an indicator parameter and a <code class="codeph">NULL</code> is selected, the fetch call returns an <code class="codeph">ORA-01405</code> error.</p>
<div class="infoboxnotealso" id="GUID-B5AB06CB-A71B-40CE-B0D6-8A6B3D5455B0__GUID-53D0E303-00E7-427A-B233-E206096C7EC5">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="oci02bas.htm#GUID-9966EDF7-37ED-42E5-AE57-67E394245BFA" title="Each bind and define OCI call has a parameter that associates an indicator variable, or an array of indicator variables, with a DML statement, a PL/SQL statement, or a query.">Indicator Variables</a>&#34;</span></p>
</div>
<p>You can also request output to a character string from an internal <code class="codeph">NUMBER</code> data type. Number conversion follows the conventions established by the globalization support settings for your system. For example, your system might use a comma (,) rather than a period (.) as the decimal point.</p>
</div>
</div>
</div>
<a id="LNOCI16299"></a>
<div class="props_rev_3"><a id="GUID-8373B154-64EF-4279-9250-1334A40533DD"></a>
<h3 id="LNOCI-GUID-8373B154-64EF-4279-9250-1334A40533DD" class="sect3">CHARZ</h3>
<div>
<div class="section">
<p>The <code class="codeph">CHARZ</code> external data type is similar to the <code class="codeph">CHAR</code> data type, except that the string must be <code class="codeph">NULL</code>-terminated on input, and Oracle Database places a <code class="codeph">NULL</code>-terminator character at the end of the string on output. The <code class="codeph">NULL</code> terminator serves only to delimit the string on input or output; it is not part of the data in the table.</p>
<p>On input, the length parameter must indicate the exact length, including the <code class="codeph">NULL</code> terminator. For example, if an array in C is declared as follows, then the length parameter when you bind <code class="codeph">my_num</code> must be seven. Any other value would return an error for this example.</p>
<pre dir="ltr">char my_num[] = &#34;123.45&#34;;
</pre>
<p>The following new external data types were introduced with or after release 8.0. These data types are not supported when you connect to an Oracle release 7 server.</p>
<div class="infobox-note" id="GUID-8373B154-64EF-4279-9250-1334A40533DD__GUID-BE3F3C6C-9A8A-42C2-BADB-4608525F373F">
<p class="notep1">Note:</p>
<p>Both internal and external data types have Oracle-defined constant values, such as <code class="codeph">SQLT_NTY</code>, <code class="codeph">SQLT_REF</code>, corresponding to their data type codes. Although the constants are not listed for all of the types in this chapter, they are used in this section when discussing new Oracle data types. The data type constants are also used in other chapters of this guide when referring to these new types.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16300"></a>
<div class="props_rev_3"><a id="GUID-72D5AB6E-05B1-4144-BAF0-CA2C8538E3D2"></a>
<h3 id="LNOCI-GUID-72D5AB6E-05B1-4144-BAF0-CA2C8538E3D2" class="sect3">Named Data Types: Object, VARRAY, Nested Table</h3>
<div>
<p>Named data types are user-defined types that are specified with the <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> command in SQL.</p>
<p>Examples include object types, varrays, and nested tables. In OCI, <span class="italic">named data type</span> refers to a host language representation of the type. The <code class="codeph">SQLT_NTY</code> data type code is used when binding or defining named data types.</p>
<p>In a C application, named data types are represented as C structs. These structs can be generated from types stored in the database by using the Object Type Translator. These types correspond to <code class="codeph">OCI_TYPECODE_OBJECT</code>.</p>
<div class="infoboxnotealso" id="GUID-72D5AB6E-05B1-4144-BAF0-CA2C8538E3D2__GUID-DB0E094B-C13E-4BED-9F6C-E4C55708EE33">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-6A16EF8B-8ACF-4FD8-9C39-EA8A0D14DEC4" title="The OCI data types and type descriptors are discussed in this section.">Object Type Information Storage and Access</a> for more information about working with named data types in OCI</p>
</li>
<li>
<p><a href="oci15ott.htm#GUID-3D22CA8E-BE01-492F-BA85-DDD0CD3F4890" title="This chapter discusses the Object Type Translator (OTT), which is used to map database object types and named collection types to C structs for use in OCI applications.">Using the Object Type Translator with OCI</a> for information about how named data types are represented as C structs</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16301"></a>
<div class="props_rev_3"><a id="GUID-43D2E2C0-E0B1-4712-AAEC-17DC8B84AE7B"></a>
<h3 id="LNOCI-GUID-43D2E2C0-E0B1-4712-AAEC-17DC8B84AE7B" class="sect3">REF</h3>
<div>
<p>This is a reference to a named data type.</p>
<div class="section">
<p>The C language representation of a <code class="codeph">REF</code> is a variable declared to be of type <code class="codeph">OCIRef *</code>. The <code class="codeph">SQLT_REF</code> data type code is used when binding or defining <code class="codeph">REF</code>s.</p>
<p>Access to <code class="codeph">REF</code>s is only possible when an OCI application has been initialized in object mode. When <code class="codeph">REF</code>s are retrieved from the server, they are stored in the client-side object cache.</p>
<p>To allocate a <code class="codeph">REF</code> for use in your application, you should declare a variable to be a pointer to a <code class="codeph">REF</code>, and then call <code class="codeph">OCIObjectNew()</code>, passing <code class="codeph">OCI_TYPECODE_REF</code> as the <code class="codeph">typecode</code> parameter.</p>
<div class="infoboxnotealso" id="GUID-43D2E2C0-E0B1-4712-AAEC-17DC8B84AE7B__GUID-C8A2149E-9912-490A-8C39-AB81876D6F6E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci18nav004.htm#GUID-2EFD6F01-A02F-4C5B-B20F-1EF841249056" title="Creates a standalone instance.">OCIObjectNew()</a></p>
</li>
<li>
<p><a href="oci14oca.htm#GUID-B2FBDC75-64BD-4E7E-A713-5095A827EA9C" title="This chapter introduces the OCI facility for working with objects in an Oracle Database.">Object Advanced Topics in OCI</a> for more information about working with <code class="codeph">REF</code>s in the OCI</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16302"></a>
<div class="props_rev_3"><a id="GUID-B43C9477-518A-44AD-BF9D-7F44A4F2ADD6"></a>
<h3 id="LNOCI-GUID-B43C9477-518A-44AD-BF9D-7F44A4F2ADD6" class="sect3">ROWID Descriptor</h3>
<div>
<p>The <code class="codeph">ROWID</code> data type identifies a particular row in a database table.</p>
<div class="section">
<p><code class="codeph">ROWID</code> can be a select-list item in a query, such as:</p>
<pre dir="ltr">SELECT ROWID, ename, empno FROM emp
</pre>
<p>In this case, you can use the returned <code class="codeph">ROWID</code> in further <code class="codeph">DELETE</code> statements.</p>
<p>If you are performing a <code class="codeph">SELECT</code> for <code class="codeph">UPDATE</code>, the <code class="codeph">ROWID</code> is implicitly returned. This <code class="codeph">ROWID</code> can be read into a user-allocated <code class="codeph">ROWID</code> descriptor by using <code class="codeph">OCIAttrGet()</code> on the statement handle and used in a subsequent <code class="codeph">UPDATE</code> statement. The prefetch operation fetches all <code class="codeph">ROWID</code>s on a <code class="codeph">SELECT</code> for <code class="codeph">UPDATE</code>; use prefetching and then a single row fetch.</p>
<p>You access rowids using a <code class="codeph">ROWID</code> descriptor, which you can use as a bind or define variable.</p>
<div class="infoboxnotealso" id="GUID-B43C9477-518A-44AD-BF9D-7F44A4F2ADD6__GUID-E8DB263E-318E-4A6B-B022-61D5ACC22B93">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci16rel002.htm#GUID-FA199A99-4D7A-42C2-BB0A-C20047B95DF9" title="Gets the value of an attribute of a handle.">OCIAttrGet()</a></p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C" title="OCI descriptors and locators are opaque data structures that maintain data-specific information.">OCI Descriptors</a> and <a href="oci02bas.htm#GUID-392BDD6B-01A9-4F9D-9A86-C230B0F59753" title="You can use the ROWID associated with a SELECT...FOR UPDATE OF... statement in a later UPDATE or DELETE statement.">Positioned Updates and Deletes</a> for more information about the use of the <code class="codeph">ROWID</code> descriptor</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16303"></a>
<div class="props_rev_3"><a id="GUID-B04BC9DC-4C53-41B9-8EC4-18BA2DF34ED7"></a>
<h3 id="LNOCI-GUID-B04BC9DC-4C53-41B9-8EC4-18BA2DF34ED7" class="sect3">LOB Descriptor</h3>
<div>
<p>A LOB (large object) stores binary or character data up to 128 terabytes (TB) in length.</p>
<p>Binary data is stored in a <code class="codeph">BLOB</code> (binary LOB), and character data is stored in a <code class="codeph">CLOB</code> (character LOB) or <code class="codeph">NCLOB</code> (national character LOB).</p>
<p>LOB values may or may not be stored inline with other row data in the database. In either case, LOBs have the full transactional support of the Oracle database. A database table stores a <span class="italic">LOB locator</span> that points to the LOB value, which may be in a different storage space.</p>
<p>When an OCI application issues a SQL query that includes a LOB column or attribute in its select list, fetching the results of the query returns the locator, rather than the actual LOB value. In OCI, the LOB locator maps to a variable of type <code class="codeph">OCILobLocator</code>.</p>
<div class="infobox-note" id="GUID-B04BC9DC-4C53-41B9-8EC4-18BA2DF34ED7__GUID-60487591-EF6D-4B54-9840-5AF30D4D9A08">
<p class="notep1">Note:</p>
<p>Depending on your application, you may or may not want to use LOB locators. You can use the data interface for LOBs, which does not require LOB locators. In this interface, you can bind or define character data for <code class="codeph">CLOB</code> columns or <code class="codeph">RAW</code> data for <code class="codeph">BLOB</code> columns.</p>
</div>
<p>The OCI functions for LOBs take a LOB locator as one of their arguments. The OCI functions assume that the locator has already been created, whether or not the LOB to which it points contains data.</p>
<p>Bind and define operations are performed on the LOB locator, which is allocated with the <code class="codeph">OCIDescriptorAlloc()</code> function.</p>
<p>The locator is always fetched first using SQL or <code class="codeph">OCIObjectPin()</code>, and then operations are performed using the locator. The OCI functions never take the actual LOB value as a parameter.</p>
<p>The data type codes available for binding or defining LOBs are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLT_BLOB</code> - A binary LOB data type</p>
</li>
<li>
<p><code class="codeph">SQLT_CLOB</code> - A character LOB data type</p>
</li>
</ul>
<p>The <code class="codeph">NCLOB</code> is a special type of <code class="codeph">CLOB</code> with the following requirements:</p>
<ul style="list-style-type: disc;">
<li>
<p>To write into or read from an <code class="codeph">NCLOB</code>, the user must set the character set form (<code class="codeph">csfrm</code>) parameter to be <code class="codeph">SQLCS_NCHAR</code>.</p>
</li>
<li>
<p>The amount (<code class="codeph">amtp</code>) parameter in calls involving <code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s is always interpreted in terms of characters, rather than bytes, for fixed-width character sets.</p>
</li>
</ul>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-A64308DD-12BA-4BFD-87BB-310C925BC37C" title="Oracle Database supports access to binary files (BFILEs).">BFILE</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-9606FF30-6E34-45BB-9C71-9D88A71C085E">BLOB</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-1BDD6269-9E65-4DB1-9871-4841A9EFBFC9">CLOB</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-B33D7ED0-56EA-4184-8468-06E80A2307C3">NCLOB</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-B04BC9DC-4C53-41B9-8EC4-18BA2DF34ED7__GUID-F15AFA73-0759-4FF6-AB4F-29625D605245">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci02bas.htm#GUID-82F35CC7-A79D-42CE-BF90-DE63FCBAAB7C" title="OCI descriptors and locators are opaque data structures that maintain data-specific information.">OCI Descriptors</a> for more information about descriptors, including the LOB locator</p>
</li>
<li>
<p><a class="olink SQLRF50997" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF50997"><span><cite>Oracle Database SQL Language Reference</cite></span></a> and <a class="olink ADLOB001" target="_blank" href="../ADLOB/adlob_intro.htm#ADLOB001"><span><cite>Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</cite></span></a> for more information about LOBs</p>
</li>
<li>
<p><a href="oci05bnd.htm#GUID-D757C946-BCDA-4A32-867B-BE951BA9BBF4" title="Oracle Database allows nonzero binds for INSERTs and UPDATEs of any size LOB.">About Binding LOB Data</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#GUID-FE7DB3D8-9310-41ED-8869-B5106E60D29E">About Defining LOB Data</a></p>
</li>
<li>
<p><a href="oci07lob.htm#GUID-7595F604-B560-4121-8254-57801341B02F" title="In all LOB operations that involve offsets into the data, the offset begins at 1. For LOB operations, such as OCILobCopy2(), OCILobErase2(), OCILobLoadFromFile2(), and OCILobTrim2(), the amount parameter is in characters for CLOBs and NCLOBs, regardless of the client-side character set.">LOB and BFILE Functions in OCI</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></p>
</li>
<li>
<p><a href="oci18nav005.htm#GUID-89F29585-2F16-4FA3-B1E0-BDD83707CA62" title="Pins a referenceable object.">OCIObjectPin()</a></p>
</li>
<li>
<p><a href="oci07lob.htm#GUID-0A094518-F97C-40BE-A336-259AA82BD0A2" title="This chapter describes LOB and BFILE operations.">LOB and BFILE Operations</a> for more information about OCI LOB functions</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16304"></a>
<div class="props_rev_3"><a id="GUID-A64308DD-12BA-4BFD-87BB-310C925BC37C"></a>
<h4 id="LNOCI-GUID-A64308DD-12BA-4BFD-87BB-310C925BC37C" class="sect4">BFILE</h4>
<div>
<p>Oracle Database supports access to binary files (<code class="codeph">BFILE</code>s).</p>
<div class="section">
<p>The <code class="codeph">BFILE</code> data type provides access to LOBs that are stored in file systems outside an Oracle database.</p>
<p>A <code class="codeph">BFILE</code> column or attribute stores a file LOB locator, which serves as a pointer to a binary file on the server&#39;s file system. The locator maintains the directory object and the file name. The maximum size of a <code class="codeph">BFILE</code> is the smaller of the operating system maximum file size or <code class="codeph">UB8MAXVAL</code>.</p>
<p>Binary file LOBs do not participate in transactions. Rather, the underlying operating system provides file integrity and durability.</p>
<p>The database administrator must ensure that the file exists and that Oracle Database processes have operating system read permissions on the file.</p>
<p>The <code class="codeph">BFILE</code> data type allows read-only support of large binary files; you cannot modify a file through Oracle Database. Oracle Database provides APIs to access file data.</p>
<p>The data type code available for binding or defining <code class="codeph">BFILE</code>s is <code class="codeph">SQLT_BFILE</code> (a binary FILE LOB data type)</p>
<div class="infoboxnotealso" id="GUID-A64308DD-12BA-4BFD-87BB-310C925BC37C__GUID-74A91412-5348-4EEA-AC47-33AF6666C2A4">
<p class="notep1">See Also:</p>
<p><a class="olink ADLOB45828" target="_blank" href="../ADLOB/adlob_bfile_ops.htm#ADLOB45828"><span><cite>Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</cite></span></a> for more information about directory aliases</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16305"></a>
<div class="props_rev_3"><a id="GUID-9606FF30-6E34-45BB-9C71-9D88A71C085E"></a>
<h4 id="LNOCI-GUID-9606FF30-6E34-45BB-9C71-9D88A71C085E" class="sect4">BLOB</h4>
<div>
<div class="section">
<p><a id="d35260e10033" class="indexterm-anchor"></a>The <code class="codeph">BLOB</code> data type stores unstructured binary large objects. <code class="codeph">BLOB</code>s can be thought of as bit streams with no character set semantics. <code class="codeph">BLOB</code>s can store up to 128 terabytes of binary data.</p>
<p><code class="codeph">BLOB</code>s have full transactional support; changes made through OCI participate fully in the transaction. The <code class="codeph">BLOB</code> value manipulations can be committed or rolled back. You cannot save a <code class="codeph">BLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16306"></a>
<div class="props_rev_3"><a id="GUID-1BDD6269-9E65-4DB1-9871-4841A9EFBFC9"></a>
<h4 id="LNOCI-GUID-1BDD6269-9E65-4DB1-9871-4841A9EFBFC9" class="sect4">CLOB</h4>
<div>
<div class="section">
<p><a id="d35260e10214" class="indexterm-anchor"></a>The <code class="codeph">CLOB</code> data type stores fixed-width or variable-width character data. <code class="codeph">CLOB</code>s can store up to 128 terabytes of character data.</p>
<p><code class="codeph">CLOB</code>s have full transactional support; changes made through OCI participate fully in the transaction. The <code class="codeph">CLOB</code> value manipulations can be committed or rolled back. You cannot save a <code class="codeph">CLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16307"></a>
<div class="props_rev_3"><a id="GUID-B33D7ED0-56EA-4184-8468-06E80A2307C3"></a>
<h4 id="LNOCI-GUID-B33D7ED0-56EA-4184-8468-06E80A2307C3" class="sect4">NCLOB</h4>
<div>
<div class="section">
<p>An <code class="codeph">NCLOB</code> is a national character version of a <code class="codeph">CLOB</code>. It stores fixed-width, single-byte or multibyte national character set (<code class="codeph">NCHAR</code>) data, or variable-width character set data. <code class="codeph">NCLOB</code>s can store up to 128 terabytes of character text data.</p>
<p><code class="codeph">NCLOB</code>s have full transactional support; changes made through OCI participate fully in the transaction. <code class="codeph">NCLOB</code> value manipulations can be committed or rolled back. You cannot save an <code class="codeph">NCLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="LNOCI16308"></a>
<div class="props_rev_3"><a id="GUID-2FC7CC65-52E0-4F60-90DA-68BBB4EA2721"></a>
<h3 id="LNOCI-GUID-2FC7CC65-52E0-4F60-90DA-68BBB4EA2721" class="sect3">Datetime and Interval Data Type Descriptors</h3>
<div>
<p>Lists and describes the datetime and interval data type descriptors.</p>
<p>The datetime and interval data type descriptors are briefly summarized here.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-827F97EC-7A97-4C17-9CEA-5174E0F01F58">ANSI DATE</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-0B7B789D-E8F0-4135-8F74-324FB4C4E20C">TIMESTAMP</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-A13DCC15-3356-47E1-9F38-00236660F190">TIMESTAMP WITH TIME ZONE</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-21099915-E92C-43DA-9785-1CB9BE09F59A">TIMESTAMP WITH LOCAL TIME ZONE</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-F286CD41-60A5-47CD-8310-4050367881CF">INTERVAL YEAR TO MONTH</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-4AEEFC72-8B77-4A30-B615-9D36DF403534">INTERVAL DAY TO SECOND</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-DDDBFD57-A544-4E1A-9E40-EA6C936A1711">About Avoiding Unexpected Results Using Datetime</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-2FC7CC65-52E0-4F60-90DA-68BBB4EA2721__GUID-5A66A4BA-F626-4849-8E5A-339FB73283DB">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF00208" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF00208"><span><cite>Oracle Database SQL Language Reference</cite></span></a></p>
</div>
</div>
<a id="LNOCI16309"></a>
<div class="props_rev_3"><a id="GUID-827F97EC-7A97-4C17-9CEA-5174E0F01F58"></a>
<h4 id="LNOCI-GUID-827F97EC-7A97-4C17-9CEA-5174E0F01F58" class="sect4">ANSI DATE</h4>
<div>
<div class="section">
<p><code class="codeph">ANSI</code> <code class="codeph">DATE</code> is based on <code class="codeph">DATE</code>, but contains no time portion. It also has no time zone. <code class="codeph">ANSI</code> <code class="codeph">DATE</code> follows the <span>ANSI</span> specification for the <code class="codeph">DATE</code> data type. When assigning an <code class="codeph">ANSI</code> <code class="codeph">DATE</code> to a <code class="codeph">DATE</code> or a time stamp data type, the time portion of the Oracle <code class="codeph">DATE</code> and the time stamp are set to zero. When assigning a <code class="codeph">DATE</code> or a time stamp to an <code class="codeph">ANSI</code> <code class="codeph">DATE</code>, the time portion is ignored.</p>
<p>Instead of using the <code class="codeph">ANSI DATE</code> data type, Oracle recommends that you use the <code class="codeph">TIMESTAMP</code> data type, which contains both date and time.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16310"></a>
<div class="props_rev_3"><a id="GUID-0B7B789D-E8F0-4135-8F74-324FB4C4E20C"></a>
<h4 id="LNOCI-GUID-0B7B789D-E8F0-4135-8F74-324FB4C4E20C" class="sect4">TIMESTAMP</h4>
<div>
<div class="section">
<p>The <code class="codeph">TIMESTAMP</code> data type is an extension of the <code class="codeph">DATE</code> data type. It stores the year, month, and day of the <code class="codeph">DATE</code> data type, plus the hour, minute, and second values. It has no time zone. The <code class="codeph">TIMESTAMP</code> data type has the following form:</p>
<pre dir="ltr">TIMESTAMP(fractional_seconds_precision) 
</pre>
<p>In this form, the optional <code class="codeph">fractional_seconds_precision</code> specifies the number of digits in the fractional part of the <code class="codeph">SECOND</code> datetime field and can be a number in the range 0 to 9. The default is 6.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16311"></a>
<div class="props_rev_3"><a id="GUID-A13DCC15-3356-47E1-9F38-00236660F190"></a>
<h4 id="LNOCI-GUID-A13DCC15-3356-47E1-9F38-00236660F190" class="sect4">TIMESTAMP WITH TIME ZONE</h4>
<div>
<div class="section">
<p><code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code> (<code class="codeph">TSTZ</code>) is a variant of <code class="codeph">TIMESTAMP</code> that includes an explicit time zone displacement in its value. The time zone displacement is the difference in hours and minutes between local time and UTC (coordinated universal time&mdash;formerly Greenwich mean time). The <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code> data type has the following form:</p>
<pre dir="ltr">TIMESTAMP(fractional_seconds_precision) WITH TIME ZONE
</pre>
<p>In this form, <code class="codeph">fractional_seconds_precision</code> optionally specifies the number of digits in the fractional part of the <code class="codeph">SECOND</code> datetime field, and can be a number in the range 0 to 9. The default is 6.</p>
<p>Two <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code> values are considered identical if they represent the same instant in UTC, regardless of the <code class="codeph">TIME</code> <code class="codeph">ZONE</code> offsets stored in the data.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16312"></a>
<div class="props_rev_3"><a id="GUID-21099915-E92C-43DA-9785-1CB9BE09F59A"></a>
<h4 id="LNOCI-GUID-21099915-E92C-43DA-9785-1CB9BE09F59A" class="sect4">TIMESTAMP WITH LOCAL TIME ZONE</h4>
<div>
<div class="section">
<p><code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">LOCAL</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code> (<code class="codeph">TSLTZ</code>) is another variant of <code class="codeph">TIMESTAMP</code> that includes a time zone displacement in its value. Storage is in the same format as for <code class="codeph">TIMESTAMP</code>. This type differs from <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code> in that data stored in the database is normalized to the database time zone, and the time zone displacement is not stored as part of the column data. When retrieving the data, Oracle Database returns it in your local session time zone.</p>
<p>The time zone displacement is the difference (in hours and minutes) between local time and UTC (coordinated universal time&mdash;formerly Greenwich mean time). The <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">LOCAL</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code> data type has the following form:</p>
<pre dir="ltr">TIMESTAMP(fractional_seconds_precision) WITH LOCAL TIME ZONE
</pre>
<p>In this form, <code class="codeph">fractional_seconds_precision</code> optionally specifies the number of digits in the fractional part of the <code class="codeph">SECOND</code> datetime field and can be a number in the range 0 to 9. The default is 6.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16313"></a>
<div class="props_rev_3"><a id="GUID-F286CD41-60A5-47CD-8310-4050367881CF"></a>
<h4 id="LNOCI-GUID-F286CD41-60A5-47CD-8310-4050367881CF" class="sect4">INTERVAL YEAR TO MONTH</h4>
<div>
<div class="section">
<p><code class="codeph">INTERVAL</code> <code class="codeph">YEAR</code> <code class="codeph">TO</code> <code class="codeph">MONTH</code> stores a period of time using the <code class="codeph">YEAR</code> and <code class="codeph">MONTH</code> datetime fields. The <code class="codeph">INTERVAL</code> <code class="codeph">YEAR</code> <code class="codeph">TO</code> <code class="codeph">MONTH</code> data type has the following form:</p>
<pre dir="ltr">INTERVAL YEAR(year_precision) TO MONTH
</pre>
<p>In this form, the optional <code class="codeph">year_precision</code> is the number of digits in the <code class="codeph">YEAR</code> datetime field. The default value of <code class="codeph">year_precision</code> is 2.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16314"></a>
<div class="props_rev_3"><a id="GUID-4AEEFC72-8B77-4A30-B615-9D36DF403534"></a>
<h4 id="LNOCI-GUID-4AEEFC72-8B77-4A30-B615-9D36DF403534" class="sect4">INTERVAL DAY TO SECOND</h4>
<div>
<div class="section">
<p><code class="codeph">INTERVAL</code> <code class="codeph">DAY</code> <code class="codeph">TO</code> <code class="codeph">SECOND</code> stores a period of time in terms of days, hours, minutes, and seconds. The <code class="codeph">INTERVAL</code> <code class="codeph">DAY</code> <code class="codeph">TO</code> <code class="codeph">SECOND</code> data type has the following form:</p>
<pre dir="ltr">INTERVAL DAY (day_precision) TO SECOND(fractional_seconds_precision)
</pre>
<p>In this form:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">day_precision</code> is the number of digits in the <code class="codeph">DAY</code> datetime field. It is optional. Accepted values are 0 to 9. The default is 2.</p>
</li>
<li>
<p><code class="codeph">fractional_seconds_precision</code> is the number of digits in the fractional part of the <code class="codeph">SECOND</code> datetime field. Accepted values are 0 to 9. The value should be provided as nanoseconds. The Default Day to Second precision is 6 unless the precision is specified to a different value at the time of creating the table. In this case, the least significant three digits will be truncated.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16315"></a>
<div class="props_rev_3"><a id="GUID-DDDBFD57-A544-4E1A-9E40-EA6C936A1711"></a>
<h4 id="LNOCI-GUID-DDDBFD57-A544-4E1A-9E40-EA6C936A1711" class="sect4">About Avoiding Unexpected Results Using Datetime</h4>
<div>
<div class="infobox-note" id="GUID-DDDBFD57-A544-4E1A-9E40-EA6C936A1711__GUID-5C786946-E85B-4674-86E8-8605045767E0">
<p class="notep1">Note:</p>
<p>To avoid unexpected results in your data manipulation language (DML) operations on datetime data, you can verify the database and session time zones by querying the built-in SQL functions <code class="codeph">DBTIMEZONE</code> and <code class="codeph">SESSIONTIMEZONE</code>. If the time zones have not been set manually, Oracle Database uses the operating system time zone by default. If the operating system time zone is not a valid Oracle Database time zone, Oracle Database uses UTC as the default value.</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16316"></a>
<div class="props_rev_3"><a id="GUID-3A98A99E-9CF4-4E7C-8F18-15F60EE1BF34"></a>
<h3 id="LNOCI-GUID-3A98A99E-9CF4-4E7C-8F18-15F60EE1BF34" class="sect3">Native Float and Native Double</h3>
<div>
<div class="section">
<p>The native float (<a id="d35260e12166" class="indexterm-anchor"></a><code class="codeph">SQLT_BFLOAT</code>) and native double (<a id="d35260e12171" class="indexterm-anchor"></a><code class="codeph">SQLT_BDOUBLE</code>) data types represent the single-precision and double-precision floating-point values. They are represented natively, that is, in the host system&#39;s floating-point format.</p>
<p>These external types were added in release 10.1 to externally represent the <code class="codeph">BINARY_FLOAT</code> and <code class="codeph">BINARY_DOUBLE</code> internal data types. Thus, performance for the internal types is best when used in conjunction with external types native float and native double respectively. This draws a clear distinction between the existing representation of floating-point values (<code class="codeph">SQLT_FLT</code>) and these types.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI16317"></a>
<div class="props_rev_3"><a id="GUID-0DB74E18-12CE-4647-B77F-D5BE13897E28"></a>
<h3 id="LNOCI-GUID-0DB74E18-12CE-4647-B77F-D5BE13897E28" class="sect3">C Object-Relational Data Type Mappings</h3>
<div>
<p>OCI supports Oracle-defined C data types for mapping user-defined data types to C representations (for example, <code class="codeph">OCINumber</code>, <code class="codeph">OCIArray</code>).</p>
<p>OCI provides a set of calls to operate on these data types, and to use these data types in bind and define operations, in conjunction with OCI external data types.</p>
<div class="infoboxnotealso" id="GUID-0DB74E18-12CE-4647-B77F-D5BE13897E28__GUID-9ECC073D-611F-4B08-A3B2-7BF0A35BFE75">
<p class="notep1">See Also:</p>
<p><a href="oci12oty.htm#GUID-C62AEE74-0CC5-4FAB-A91F-997F71C49C2C" title="This chapter describes the purpose and structure of each of the data types that can be manipulated by the OCI data type mapping and manipulation functions.">Object-Relational Data Types in OCI</a> for information about using these Oracle-defined C data types</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16319"></a><a id="LNOCI16318"></a>
<div class="props_rev_3"><a id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35"></a>
<h2 id="LNOCI-GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35" class="sect2">Data Conversions</h2>
<div>
<p>Shows the supported conversions from internal data types to external data types and from external data types into internal column representations.</p>
<p><a href="oci03typ.htm#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__G454246" title="This table has 10 columns and 2 row headings. This table is a matrix of internal data types to external data types. Column 1 are the external data types and row 2 shows the internal data types. Column 2 is VARCHAR2, column 3 is NUMBER, column 4 is LONG, column 5 is ROWID, column 6 is UROWID, column 7 is DATE, column 8 is RAW, column 9 is LONG RAW, and column 10 is CHAR.">Table 3-5</a> shows the supported conversions from internal data types to external data types, and from external data types into internal column representations, for all data types available through release 7.3. Information about data conversions for data types newer than release 7.3 is listed here:</p>
<ul style="list-style-type: disc;">
<li>
<p>REFs stored in the database are converted to <code class="codeph">SQLT_REF</code> on output.</p>
</li>
<li>
<p><code class="codeph">SQLT_REF</code> is converted to the internal representation of <code class="codeph">REF</code>s on input.</p>
</li>
<li>
<p>Named data types stored in the database can be converted to <code class="codeph">SQLT_NTY</code> (and represented by a C struct in the application) on output.</p>
</li>
<li>
<p><code class="codeph">SQLT_NTY</code> (represented by a C struct in an application) is converted to the internal representation of the corresponding type on input.</p>
</li>
</ul>
<p>LOBs are shown in <a href="oci03typ.htm#GUID-F7671AFA-4341-4461-A68E-76AB2CB1A0C8__G455014" title="This table has 3 columns. Column 1 is external data types, column 2 is internal CLOB, and column 3 is internal BLOB.">Table 3-6</a>, because of the width limitation.</p>
<div class="infoboxnotealso" id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__GUID-426805D9-8F82-41F4-8400-B745C7FE3408">
<p class="notep1">See Also:</p>
<p><a href="oci12oty.htm#GUID-C62AEE74-0CC5-4FAB-A91F-997F71C49C2C" title="This chapter describes the purpose and structure of each of the data types that can be manipulated by the OCI data type mapping and manipulation functions.">Object-Relational Data Types in OCI</a> for information about <code class="codeph">OCIString</code>, <code class="codeph">OCINumber</code>, and other new data types</p>
</div>
<div class="tblformalwide" id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__G454246">
<p class="titleintable">Table 3-5 Data Conversions</p>
<table class="cellalignment6157" title="Data Conversions " summary="This table has 10 columns and 2 row headings. This table is a matrix of internal data types to external data types. Column 1 are the external data types and row 2 shows the internal data types. Column 2 is VARCHAR2, column 3 is NUMBER, column 4 is LONG, column 5 is ROWID, column 6 is UROWID, column 7 is DATE, column 8 is RAW, column 9 is LONG RAW, and column 10 is CHAR.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6187" id="d35260e12588">NA(4)</th>
<th class="cellalignment6223" id="d35260e12594">INTERNAL DATA TYPES-&gt;</th>
<th class="cellalignment6302" id="d35260e12597">NA</th>
<th class="cellalignment6300" id="d35260e12600">NA</th>
<th class="cellalignment6304" id="d35260e12603">NA</th>
<th class="cellalignment6302" id="d35260e12606">NA</th>
<th class="cellalignment6304" id="d35260e12609">NA</th>
<th class="cellalignment6294" id="d35260e12612">NA</th>
<th class="cellalignment6300" id="d35260e12615">NA</th>
<th class="cellalignment6304" id="d35260e12618">NA</th>
</tr>
<tr class="cellalignment6151">
<th class="cellalignment6187" id="d35260e12622">EXTERNALDATA TYPES</th>
<th class="cellalignment6223" id="d35260e12627">VARCHAR2</th>
<th class="cellalignment6302" id="d35260e12630">NUMBER</th>
<th class="cellalignment6300" id="d35260e12633">LONG</th>
<th class="cellalignment6304" id="d35260e12636">ROWID</th>
<th class="cellalignment6302" id="d35260e12639">UROWID</th>
<th class="cellalignment6304" id="d35260e12642">DATE</th>
<th class="cellalignment6294" id="d35260e12645">RAW</th>
<th class="cellalignment6300" id="d35260e12648">LONG RAW</th>
<th class="cellalignment6304" id="d35260e12651">CHAR</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12657" headers="d35260e12588 d35260e12622">
<p><code class="codeph">VARCHAR2</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12657 d35260e12594 d35260e12627">
<p>I/O<a id="fn_5" href="#fn_5" onclick="footdisplay(5,&#34;I/O = Conversion is valid for input or output. &#34;)"><sup>Foot&nbsp;5</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12657 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12657 d35260e12600 d35260e12633">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e12657 d35260e12603 d35260e12636">
<p>I/O<a id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGJJEEI" href="#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGJJEEI" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Foot&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12657 d35260e12606 d35260e12639">
<p>I/O<a id="fnsrc_d35260e12682" href="#fnsrc_d35260e12682" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12657 d35260e12609 d35260e12642">
<p>I/O<a id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGCAEAH" href="#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGCAEAH" onclick="footdisplay(7,&#34;For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format. &#34;)"><sup>Foot&nbsp;7</sup></a></p>
</td>
<td class="cellalignment6295" headers="d35260e12657 d35260e12612 d35260e12645">
<p>I/O<a id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGEDAFF" href="#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGEDAFF" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Foot&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6301" headers="d35260e12657 d35260e12615 d35260e12648">
<p>I/O<a id="fnsrc_d35260e12699" href="#fnsrc_d35260e12699" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12657 d35260e12618 d35260e12651">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12705" headers="d35260e12588 d35260e12622">
<p><code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12705 d35260e12594 d35260e12627">
<p>I/O<a id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGIECDG" href="#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGIECDG" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Foot&nbsp;9</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12705 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12705 d35260e12600 d35260e12633">
<p>I<a id="fn_10" href="#fn_10" onclick="footdisplay(10,&#34;I = Conversion is valid for input only. &#34;)"><sup>Foot&nbsp;10</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12705 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e12705 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12705 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e12705 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e12705 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12705 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e12742" href="#fnsrc_d35260e12742" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12745" headers="d35260e12588 d35260e12622">
<p><code class="codeph">INTEGER</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12745 d35260e12594 d35260e12627">
<p>I/O<a id="fnsrc_d35260e12752" href="#fnsrc_d35260e12752" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12745 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12745 d35260e12600 d35260e12633">
<p>I</p>
</td>
<td class="cellalignment6305" headers="d35260e12745 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e12745 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12745 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e12745 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e12745 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12745 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e12778" href="#fnsrc_d35260e12778" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12781" headers="d35260e12588 d35260e12622">
<p><code class="codeph">FLOAT</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12781 d35260e12594 d35260e12627">
<p>I/O<a id="fnsrc_d35260e12788" href="#fnsrc_d35260e12788" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12781 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12781 d35260e12600 d35260e12633">
<p>I</p>
</td>
<td class="cellalignment6305" headers="d35260e12781 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e12781 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12781 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e12781 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e12781 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12781 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e12814" href="#fnsrc_d35260e12814" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12817" headers="d35260e12588 d35260e12622">
<p><code class="codeph">STRING</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12817 d35260e12594 d35260e12627">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e12817 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12817 d35260e12600 d35260e12633">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e12817 d35260e12603 d35260e12636">
<p>I/O<a id="fnsrc_d35260e12833" href="#fnsrc_d35260e12833" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12817 d35260e12606 d35260e12639">
<p>I/O<a id="fnsrc_d35260e12838" href="#fnsrc_d35260e12838" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12817 d35260e12609 d35260e12642">
<p>I/O<a id="fnsrc_d35260e12843" href="#fnsrc_d35260e12843" onclick="footdisplay(7,&#34;For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format. &#34;)"><sup>Footref&nbsp;7</sup></a></p>
</td>
<td class="cellalignment6295" headers="d35260e12817 d35260e12612 d35260e12645">
<p>I/O<a id="fnsrc_d35260e12848" href="#fnsrc_d35260e12848" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6301" headers="d35260e12817 d35260e12615 d35260e12648">
<p>I/O<a id="fnsrc_d35260e12853" href="#fnsrc_d35260e12853" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a>,<a id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGCHDIH" href="#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGCHDIH" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Foot&nbsp;11</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12817 d35260e12618 d35260e12651">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12863" headers="d35260e12588 d35260e12622">
<p><code class="codeph">VARNUM</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12863 d35260e12594 d35260e12627">
<p>I/O<a id="fnsrc_d35260e12870" href="#fnsrc_d35260e12870" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12863 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12863 d35260e12600 d35260e12633">
<p>I</p>
</td>
<td class="cellalignment6305" headers="d35260e12863 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e12863 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12863 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e12863 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e12863 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12863 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e12896" href="#fnsrc_d35260e12896" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12899" headers="d35260e12588 d35260e12622">
<p><code class="codeph">DECIMAL</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12899 d35260e12594 d35260e12627">
<p>I/O<a id="fnsrc_d35260e12906" href="#fnsrc_d35260e12906" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12899 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12899 d35260e12600 d35260e12633">
<p>I</p>
</td>
<td class="cellalignment6305" headers="d35260e12899 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e12899 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12899 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e12899 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e12899 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e12899 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e12932" href="#fnsrc_d35260e12932" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12935" headers="d35260e12588 d35260e12622">
<p><code class="codeph">LONG</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12935 d35260e12594 d35260e12627">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e12935 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12935 d35260e12600 d35260e12633">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e12935 d35260e12603 d35260e12636">
<p>I/O<a id="fnsrc_d35260e12951" href="#fnsrc_d35260e12951" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12935 d35260e12606 d35260e12639">
<p>I/O<a id="fnsrc_d35260e12956" href="#fnsrc_d35260e12956" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12935 d35260e12609 d35260e12642">
<p>I/O<a id="fnsrc_d35260e12961" href="#fnsrc_d35260e12961" onclick="footdisplay(7,&#34;For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format. &#34;)"><sup>Footref&nbsp;7</sup></a></p>
</td>
<td class="cellalignment6295" headers="d35260e12935 d35260e12612 d35260e12645">
<p>I/O<a id="fnsrc_d35260e12966" href="#fnsrc_d35260e12966" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6301" headers="d35260e12935 d35260e12615 d35260e12648">
<p>I/O<a id="fnsrc_d35260e12971" href="#fnsrc_d35260e12971" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a>,<a id="fnsrc_d35260e12974" href="#fnsrc_d35260e12974" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Footref&nbsp;11</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12935 d35260e12618 d35260e12651">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e12980" headers="d35260e12588 d35260e12622">
<p><code class="codeph">VARCHAR</code></p>
</td>
<td class="cellalignment6225" headers="d35260e12980 d35260e12594 d35260e12627">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e12980 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e12980 d35260e12600 d35260e12633">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e12980 d35260e12603 d35260e12636">
<p>I/O<a id="fnsrc_d35260e12996" href="#fnsrc_d35260e12996" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e12980 d35260e12606 d35260e12639">
<p>I/O<a id="fnsrc_d35260e13001" href="#fnsrc_d35260e13001" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12980 d35260e12609 d35260e12642">
<p>I/O<a id="fnsrc_d35260e13006" href="#fnsrc_d35260e13006" onclick="footdisplay(7,&#34;For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format. &#34;)"><sup>Footref&nbsp;7</sup></a></p>
</td>
<td class="cellalignment6295" headers="d35260e12980 d35260e12612 d35260e12645">
<p>I/O<a id="fnsrc_d35260e13011" href="#fnsrc_d35260e13011" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6301" headers="d35260e12980 d35260e12615 d35260e12648">
<p>I/O<a id="fnsrc_d35260e13016" href="#fnsrc_d35260e13016" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a>,<a id="fnsrc_d35260e13019" href="#fnsrc_d35260e13019" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Footref&nbsp;11</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e12980 d35260e12618 d35260e12651">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13025" headers="d35260e12588 d35260e12622">
<p><code class="codeph">DATE</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13025 d35260e12594 d35260e12627">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e13025 d35260e12597 d35260e12630">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13025 d35260e12600 d35260e12633">
<p>I</p>
</td>
<td class="cellalignment6305" headers="d35260e13025 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e13025 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13025 d35260e12609 d35260e12642">
<p>I/O</p>
</td>
<td class="cellalignment6295" headers="d35260e13025 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13025 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13025 d35260e12618 d35260e12651">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13057" headers="d35260e12588 d35260e12622">
<p><code class="codeph">VARRAW</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13057 d35260e12594 d35260e12627">
<p>I/O<a id="GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGGBDIE" href="#GUID-A8450885-DDB2-4AD0-A33B-50118FE78D35__CEGGBDIE" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Foot&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13057 d35260e12597 d35260e12630">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13057 d35260e12600 d35260e12633">
<p>I<a id="fnsrc_d35260e13073" href="#fnsrc_d35260e13073" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Footref&nbsp;11</sup></a>,<a id="fnsrc_d35260e13076" href="#fnsrc_d35260e13076" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13057 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e13057 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13057 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e13057 d35260e12612 d35260e12645">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13057 d35260e12615 d35260e12648">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13057 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e13096" href="#fnsrc_d35260e13096" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13100" headers="d35260e12588 d35260e12622">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13100 d35260e12594 d35260e12627">
<p>I/O<a id="fnsrc_d35260e13107" href="#fnsrc_d35260e13107" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13100 d35260e12597 d35260e12630">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13100 d35260e12600 d35260e12633">
<p>I<a id="fnsrc_d35260e13115" href="#fnsrc_d35260e13115" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Footref&nbsp;11</sup></a>,<a id="fnsrc_d35260e13118" href="#fnsrc_d35260e13118" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13100 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e13100 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13100 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e13100 d35260e12612 d35260e12645">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13100 d35260e12615 d35260e12648">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13100 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e13138" href="#fnsrc_d35260e13138" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13141" headers="d35260e12588 d35260e12622">
<p><code class="codeph">LONG RAW</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13141 d35260e12594 d35260e12627">
<p>O<a id="fn_13" href="#fn_13" onclick="footdisplay(13,&#34;O = Conversion is valid for output only. &#34;)"><sup>Foot&nbsp;13</sup></a>,<a id="fnsrc_d35260e13152" href="#fnsrc_d35260e13152" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13141 d35260e12597 d35260e12630">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13141 d35260e12600 d35260e12633">
<p>I<a id="fnsrc_d35260e13160" href="#fnsrc_d35260e13160" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Footref&nbsp;11</sup></a>,<a id="fnsrc_d35260e13163" href="#fnsrc_d35260e13163" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13141 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e13141 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13141 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e13141 d35260e12612 d35260e12645">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13141 d35260e12615 d35260e12648">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13141 d35260e12618 d35260e12651">
<p>O<a id="fnsrc_d35260e13183" href="#fnsrc_d35260e13183" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13186" headers="d35260e12588 d35260e12622">
<p><code class="codeph">UNSIGNED</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13186 d35260e12594 d35260e12627">
<p>I/O<a id="fnsrc_d35260e13193" href="#fnsrc_d35260e13193" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13186 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13186 d35260e12600 d35260e12633">
<p>I</p>
</td>
<td class="cellalignment6305" headers="d35260e13186 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e13186 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13186 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e13186 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13186 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13186 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e13219" href="#fnsrc_d35260e13219" onclick="footdisplay(9,&#34;For output, column value must represent a valid number. &#34;)"><sup>Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13222" headers="d35260e12588 d35260e12622">
<p><code class="codeph">LONG VARCHAR</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13222 d35260e12594 d35260e12627">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e13222 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13222 d35260e12600 d35260e12633">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13222 d35260e12603 d35260e12636">
<p>I/O<a id="fnsrc_d35260e13238" href="#fnsrc_d35260e13238" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13222 d35260e12606 d35260e12639">
<p>I/O<a id="fnsrc_d35260e13243" href="#fnsrc_d35260e13243" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13222 d35260e12609 d35260e12642">
<p>I/O<a id="fnsrc_d35260e13248" href="#fnsrc_d35260e13248" onclick="footdisplay(7,&#34;For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format. &#34;)"><sup>Footref&nbsp;7</sup></a></p>
</td>
<td class="cellalignment6295" headers="d35260e13222 d35260e12612 d35260e12645">
<p>I/O<a id="fnsrc_d35260e13253" href="#fnsrc_d35260e13253" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6301" headers="d35260e13222 d35260e12615 d35260e12648">
<p>I/O<a id="fnsrc_d35260e13258" href="#fnsrc_d35260e13258" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a>,<a id="fnsrc_d35260e13261" href="#fnsrc_d35260e13261" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Footref&nbsp;11</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13222 d35260e12618 d35260e12651">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13267" headers="d35260e12588 d35260e12622">
<p><code class="codeph">LONG VARRAW</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13267 d35260e12594 d35260e12627">
<p>I/O<a id="fnsrc_d35260e13274" href="#fnsrc_d35260e13274" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13267 d35260e12597 d35260e12630">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13267 d35260e12600 d35260e12633">
<p>I<a id="fnsrc_d35260e13282" href="#fnsrc_d35260e13282" onclick="footdisplay(11,&#34;Length must be less than or equal to 2000. &#34;)"><sup>Footref&nbsp;11</sup></a>,<a id="fnsrc_d35260e13285" href="#fnsrc_d35260e13285" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13267 d35260e12603 d35260e12636">
<p>NA</p>
</td>
<td class="cellalignment6303" headers="d35260e13267 d35260e12606 d35260e12639">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13267 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e13267 d35260e12612 d35260e12645">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13267 d35260e12615 d35260e12648">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13267 d35260e12618 d35260e12651">
<p>I/O<a id="fnsrc_d35260e13305" href="#fnsrc_d35260e13305" onclick="footdisplay(12,&#34;On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format. &#34;)"><sup>Footref&nbsp;12</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13308" headers="d35260e12588 d35260e12622">
<p><code class="codeph">CHAR</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13308 d35260e12594 d35260e12627">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e13308 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13308 d35260e12600 d35260e12633">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13308 d35260e12603 d35260e12636">
<p>I/O<a id="fnsrc_d35260e13324" href="#fnsrc_d35260e13324" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13308 d35260e12606 d35260e12639">
<p>I/O<a id="fnsrc_d35260e13329" href="#fnsrc_d35260e13329" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13308 d35260e12609 d35260e12642">
<p>I/O<a id="fnsrc_d35260e13334" href="#fnsrc_d35260e13334" onclick="footdisplay(7,&#34;For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format. &#34;)"><sup>Footref&nbsp;7</sup></a></p>
</td>
<td class="cellalignment6295" headers="d35260e13308 d35260e12612 d35260e12645">
<p>I/O<a id="fnsrc_d35260e13339" href="#fnsrc_d35260e13339" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6301" headers="d35260e13308 d35260e12615 d35260e12648">
<p>I<a id="fnsrc_d35260e13344" href="#fnsrc_d35260e13344" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13308 d35260e12618 d35260e12651">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13350" headers="d35260e12588 d35260e12622">
<p><code class="codeph">CHARZ</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13350 d35260e12594 d35260e12627">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e13350 d35260e12597 d35260e12630">
<p>I/O</p>
</td>
<td class="cellalignment6301" headers="d35260e13350 d35260e12600 d35260e12633">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13350 d35260e12603 d35260e12636">
<p>I/O<a id="fnsrc_d35260e13366" href="#fnsrc_d35260e13366" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13350 d35260e12606 d35260e12639">
<p>I/O<a id="fnsrc_d35260e13371" href="#fnsrc_d35260e13371" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13350 d35260e12609 d35260e12642">
<p>I/O<a id="fnsrc_d35260e13376" href="#fnsrc_d35260e13376" onclick="footdisplay(7,&#34;For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format. &#34;)"><sup>Footref&nbsp;7</sup></a></p>
</td>
<td class="cellalignment6295" headers="d35260e13350 d35260e12612 d35260e12645">
<p>I/O<a id="fnsrc_d35260e13381" href="#fnsrc_d35260e13381" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6301" headers="d35260e13350 d35260e12615 d35260e12648">
<p>I<a id="fnsrc_d35260e13386" href="#fnsrc_d35260e13386" onclick="footdisplay(8,&#34;For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format. &#34;)"><sup>Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13350 d35260e12618 d35260e12651">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6190" id="d35260e13392" headers="d35260e12588 d35260e12622">
<p><code class="codeph">ROWID</code> descriptor</p>
</td>
<td class="cellalignment6225" headers="d35260e13392 d35260e12594 d35260e12627">
<p>I<a id="fnsrc_d35260e13400" href="#fnsrc_d35260e13400" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment6303" headers="d35260e13392 d35260e12597 d35260e12630">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13392 d35260e12600 d35260e12633">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13392 d35260e12603 d35260e12636">
<p>I/O</p>
</td>
<td class="cellalignment6303" headers="d35260e13392 d35260e12606 d35260e12639">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13392 d35260e12609 d35260e12642">
<p>NA</p>
</td>
<td class="cellalignment6295" headers="d35260e13392 d35260e12612 d35260e12645">
<p>NA</p>
</td>
<td class="cellalignment6301" headers="d35260e13392 d35260e12615 d35260e12648">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e13392 d35260e12618 d35260e12651">
<p>I<a id="fnsrc_d35260e13426" href="#fnsrc_d35260e13426" onclick="footdisplay(6,&#34;For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format. &#34;)"><sup>Footref&nbsp;6</sup></a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;4</sup> NA means not applicable.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;5</sup></p>
<p>I/O = Conversion is valid for input or output.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;6</sup></p>
<p>For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;7</sup></p>
<p>For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;8</sup></p>
<p>For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;9</sup></p>
<p>For output, column value must represent a valid number.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;10</sup></p>
<p>I = Conversion is valid for input only.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;11</sup></p>
<p>Length must be less than or equal to 2000.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;12</sup></p>
<p>On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;13</sup></p>
<p>O = Conversion is valid for output only.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-F7671AFA-4341-4461-A68E-76AB2CB1A0C8">Data Conversions for LOB Data Type Descriptors</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-781C0BF5-5833-4720-BBD9-7398BBD9CDC3" title="Shows the data conversion for datetime and interval data types.">Data Conversions for Datetime and Interval Data Types</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-9FEFB0A2-7754-447A-89EB-FC96B9AD784D" title="OCI has full forward and backward compatibility between a client application and the Oracle database for datetime and date columns.">Datetime and Date Upgrading Rules</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-406EDC3C-FCBD-4596-9C0D-A15B55315EF3">Data Conversion for BINARY_FLOAT and BINARY_DOUBLE in OCI</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16321"></a><a id="LNOCI16320"></a>
<div class="props_rev_3"><a id="GUID-F7671AFA-4341-4461-A68E-76AB2CB1A0C8"></a>
<h3 id="LNOCI-GUID-F7671AFA-4341-4461-A68E-76AB2CB1A0C8" class="sect3">Data Conversions for LOB Data Type Descriptors</h3>
<div>
<div class="section">
<p><a href="oci03typ.htm#GUID-F7671AFA-4341-4461-A68E-76AB2CB1A0C8__G455014" title="This table has 3 columns. Column 1 is external data types, column 2 is internal CLOB, and column 3 is internal BLOB.">Table 3-6</a> shows the data conversions for <code class="codeph">LOB</code>s. For example, the external character data types (<code class="codeph">VARCHAR</code>, <code class="codeph">CHAR</code>, <code class="codeph">LONG</code>, and <code class="codeph">LONG VARCHAR</code>) convert to the internal <code class="codeph">CLOB</code> data type, whereas the external raw data types (<code class="codeph">RAW</code>, <code class="codeph">VARRAW</code>, <code class="codeph">LONG RAW</code>, and <code class="codeph">LONG VARRAW</code>) convert to the internal <code class="codeph">BLOB</code> data type.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-F7671AFA-4341-4461-A68E-76AB2CB1A0C8__G455014">
<p class="titleintable">Table 3-6 Data Conversions for LOBs</p>
<table class="cellalignment6175" title="Data Conversions for LOBs " summary="This table has 3 columns. Column 1 is external data types, column 2 is internal CLOB, and column 3 is internal BLOB.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6266" id="d35260e13653">EXTERNAL DATA TYPES</th>
<th class="cellalignment6228" id="d35260e13656">INTERNAL CLOB</th>
<th class="cellalignment6166" id="d35260e13659">INTERNAL BLOB</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13664" headers="d35260e13653">
<p><code class="codeph">VARCHAR</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13664 d35260e13656">
<p>I/O<a id="fn_14" href="#fn_14" onclick="footdisplay(14,&#34;I/O = Conversion is valid for input or output. &#34;)"><sup>Foot&nbsp;14</sup></a></p>
</td>
<td class="cellalignment6170" headers="d35260e13664 d35260e13659">
<p>NA<a id="fn_15" href="#fn_15" onclick="footdisplay(15,&#34;NA means not applicable. &#34;)"><sup>Foot&nbsp;15</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13681" headers="d35260e13653">
<p><code class="codeph">CHAR</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13681 d35260e13656">
<p>I/O</p>
</td>
<td class="cellalignment6170" headers="d35260e13681 d35260e13659">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13692" headers="d35260e13653">
<p><code class="codeph">LONG</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13692 d35260e13656">
<p>I/O</p>
</td>
<td class="cellalignment6170" headers="d35260e13692 d35260e13659">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13703" headers="d35260e13653">
<p><code class="codeph">LONG VARCHAR</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13703 d35260e13656">
<p>I/O</p>
</td>
<td class="cellalignment6170" headers="d35260e13703 d35260e13659">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13714" headers="d35260e13653">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13714 d35260e13656">
<p>NA</p>
</td>
<td class="cellalignment6170" headers="d35260e13714 d35260e13659">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13725" headers="d35260e13653">
<p><code class="codeph">VARRAW</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13725 d35260e13656">
<p>NA</p>
</td>
<td class="cellalignment6170" headers="d35260e13725 d35260e13659">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13736" headers="d35260e13653">
<p><code class="codeph">LONG RAW</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13736 d35260e13656">
<p>NA&nbsp;</p>
</td>
<td class="cellalignment6170" headers="d35260e13736 d35260e13659">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6267" id="d35260e13747" headers="d35260e13653">
<p><code class="codeph">LONG VARRAW</code></p>
</td>
<td class="cellalignment6230" headers="d35260e13747 d35260e13656">
<p>NA</p>
</td>
<td class="cellalignment6170" headers="d35260e13747 d35260e13659">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;14</sup></p>
<p>I/O = Conversion is valid for input or output.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;15</sup></p>
<p>NA means not applicable.</p>
</div>
</div>
<a id="LNOCI16323"></a><a id="LNOCI16322"></a>
<div class="props_rev_3"><a id="GUID-781C0BF5-5833-4720-BBD9-7398BBD9CDC3"></a>
<h3 id="LNOCI-GUID-781C0BF5-5833-4720-BBD9-7398BBD9CDC3" class="sect3">Data Conversions for Datetime and Interval Data Types</h3>
<div>
<p>Shows the data conversion for datetime and interval data types.</p>
<div class="section">
<p>You can also use one of the character data types for the host variable used in a fetch or insert operation from or to a datetime or interval column. Oracle Database does the conversion between the character data type and datetime or interval data type for you (see <a href="oci03typ.htm#GUID-781C0BF5-5833-4720-BBD9-7398BBD9CDC3__CHDJJHHB" title="This table has 8 columns. Column 1 is external types/internal types, column 2 is VARCHAR, CHAR, column 3 is DATE, column 4 is TS, column 5 is TSTZ, column 6 is TSLTZ, column 7 is INTERVAL YEAR TO MONTH, and column 8 is INTERVAL DAY TO SECOND.">Table 3-7</a>.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-781C0BF5-5833-4720-BBD9-7398BBD9CDC3__CHDJJHHB">
<p class="titleintable">Table 3-7 Data Conversion for Datetime and Interval Types</p>
<table class="cellalignment6157" title="Data Conversion for Datetime and Interval Types " summary="This table has 8 columns. Column 1 is external types/internal types, column 2 is VARCHAR, CHAR, column 3 is DATE, column 4 is TS, column 5 is TSTZ, column 6 is TSLTZ, column 7 is INTERVAL YEAR TO MONTH, and column 8 is INTERVAL DAY TO SECOND.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6286" id="d35260e13932">External Types/Internal Types</th>
<th class="cellalignment6223" id="d35260e13935">VARCHAR,CHAR</th>
<th class="cellalignment6304" id="d35260e13938">DATE</th>
<th class="cellalignment6304" id="d35260e13941">TS</th>
<th class="cellalignment6304" id="d35260e13944">TSTZ</th>
<th class="cellalignment6304" id="d35260e13947">TSLTZ</th>
<th class="cellalignment6207" id="d35260e13950">INTERVAL YEAR TO MONTH</th>
<th class="cellalignment6223" id="d35260e13953">INTERVAL DAY TO SECOND</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e13958" headers="d35260e13932">
<p><code class="codeph">VARCHAR2, CHAR</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13958 d35260e13935">
<p>I/O<a id="fn_16" href="#fn_16" onclick="footdisplay(16,&#34;I/O = Conversion is valid for input or output. &#34;)"><sup>Foot&nbsp;16</sup></a></p>
</td>
<td class="cellalignment6305" headers="d35260e13958 d35260e13938">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13958 d35260e13941">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13958 d35260e13944">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13958 d35260e13947">
<p>I/O</p>
</td>
<td class="cellalignment6209" headers="d35260e13958 d35260e13950">
<p>I/O</p>
</td>
<td class="cellalignment6225" headers="d35260e13958 d35260e13953">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e13987" headers="d35260e13932">
<p><code class="codeph">DATE</code></p>
</td>
<td class="cellalignment6225" headers="d35260e13987 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13987 d35260e13938">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13987 d35260e13941">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13987 d35260e13944">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e13987 d35260e13947">
<p>I/O</p>
</td>
<td class="cellalignment6209" headers="d35260e13987 d35260e13950">
<p>NA<a id="fn_17" href="#fn_17" onclick="footdisplay(17,&#34;NA means not applicable. &#34;)"><sup>Foot&nbsp;17</sup></a></p>
</td>
<td class="cellalignment6225" headers="d35260e13987 d35260e13953">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e14016" headers="d35260e13932">
<p><code class="codeph">OCI DATE</code></p>
</td>
<td class="cellalignment6225" headers="d35260e14016 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14016 d35260e13938">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14016 d35260e13941">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14016 d35260e13944">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14016 d35260e13947">
<p>I/O</p>
</td>
<td class="cellalignment6209" headers="d35260e14016 d35260e13950">
<p>NA</p>
</td>
<td class="cellalignment6225" headers="d35260e14016 d35260e13953">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e14042" headers="d35260e13932">
<p><code class="codeph">ANSI DATE</code></p>
</td>
<td class="cellalignment6225" headers="d35260e14042 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14042 d35260e13938">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14042 d35260e13941">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14042 d35260e13944">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14042 d35260e13947">
<p>I/O</p>
</td>
<td class="cellalignment6209" headers="d35260e14042 d35260e13950">
<p>NA</p>
</td>
<td class="cellalignment6225" headers="d35260e14042 d35260e13953">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e14068" headers="d35260e13932">
<p><code class="codeph">TIMESTAMP (TS)</code></p>
</td>
<td class="cellalignment6225" headers="d35260e14068 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14068 d35260e13938">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14068 d35260e13941">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14068 d35260e13944">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14068 d35260e13947">
<p>I/O</p>
</td>
<td class="cellalignment6209" headers="d35260e14068 d35260e13950">
<p>NA</p>
</td>
<td class="cellalignment6225" headers="d35260e14068 d35260e13953">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e14094" headers="d35260e13932">
<p><code class="codeph">TIMESTAMP WITH TIME ZONE (TSTZ)</code></p>
</td>
<td class="cellalignment6225" headers="d35260e14094 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14094 d35260e13938">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14094 d35260e13941">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14094 d35260e13944">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14094 d35260e13947">
<p>I/O</p>
</td>
<td class="cellalignment6209" headers="d35260e14094 d35260e13950">
<p>NA</p>
</td>
<td class="cellalignment6225" headers="d35260e14094 d35260e13953">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e14120" headers="d35260e13932">
<p><code class="codeph">TIMESTAMP WITH LOCAL TIME ZONE (TSLTZ)</code></p>
</td>
<td class="cellalignment6225" headers="d35260e14120 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14120 d35260e13938">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14120 d35260e13941">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14120 d35260e13944">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14120 d35260e13947">
<p>I/O</p>
</td>
<td class="cellalignment6209" headers="d35260e14120 d35260e13950">
<p>NA</p>
</td>
<td class="cellalignment6225" headers="d35260e14120 d35260e13953">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e14146" headers="d35260e13932">
<p><code class="codeph">INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment6225" headers="d35260e14146 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14146 d35260e13938">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e14146 d35260e13941">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e14146 d35260e13944">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e14146 d35260e13947">
<p>NA</p>
</td>
<td class="cellalignment6209" headers="d35260e14146 d35260e13950">
<p>I/O</p>
</td>
<td class="cellalignment6225" headers="d35260e14146 d35260e13953">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6288" id="d35260e14172" headers="d35260e13932">
<p><code class="codeph">INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment6225" headers="d35260e14172 d35260e13935">
<p>I/O</p>
</td>
<td class="cellalignment6305" headers="d35260e14172 d35260e13938">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e14172 d35260e13941">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e14172 d35260e13944">
<p>NA</p>
</td>
<td class="cellalignment6305" headers="d35260e14172 d35260e13947">
<p>NA</p>
</td>
<td class="cellalignment6209" headers="d35260e14172 d35260e13950">
<p>NA</p>
</td>
<td class="cellalignment6225" headers="d35260e14172 d35260e13953">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;16</sup></p>
<p>I/O = Conversion is valid for input or output.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;17</sup></p>
<p>NA means not applicable.</p>
<div class="section">
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-0AE224F1-5839-4A77-8641-CC0BEA773A6D">Assignment Notes</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-D4DF5B12-C095-472A-8AA0-0DA37A94590B">Data Conversion Notes for Datetime and Interval Types</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI16324"></a>
<div class="props_rev_3"><a id="GUID-0AE224F1-5839-4A77-8641-CC0BEA773A6D"></a>
<h4 id="LNOCI-GUID-0AE224F1-5839-4A77-8641-CC0BEA773A6D" class="sect4">Assignment Notes</h4>
<div>
<p>When you assign a source with a time zone to a target without a time zone, the time zone portion of the source is ignored. When you assign a source without a time zone to a target with a time zone, the time zone of the target is set to the session&#39;s default time zone.</p>
<p>When you assign an Oracle Database <code class="codeph">DATE</code> to a <code class="codeph">TIMESTAMP</code>, the <code class="codeph">TIME</code> portion of the <code class="codeph">DATE</code> is copied over to the <code class="codeph">TIMESTAMP</code>. When you assign a <code class="codeph">TIMESTAMP</code> to Oracle Database <code class="codeph">DATE</code>, the <code class="codeph">TIME</code> portion of the result <code class="codeph">DATE</code> is set to zero. This is done to encourage upgrading of Oracle Database <code class="codeph">DATE</code> to <code class="codeph">ANSI</code>-compliant <code class="codeph">DATETIME</code> data types.</p>
<p>When you assign an <code class="codeph">ANSI</code> <code class="codeph">DATE</code> to an Oracle <code class="codeph">DATE</code> or a <code class="codeph">TIMESTAMP</code>, the <code class="codeph">TIME</code> portion of the Oracle Database <code class="codeph">DATE</code> and the <code class="codeph">TIMESTAMP</code> are set to zero. When you assign an Oracle Database <code class="codeph">DATE</code> or a <code class="codeph">TIMESTAMP</code> to an ANSI <code class="codeph">DATE</code>, the <code class="codeph">TIME</code> portion is ignored.</p>
<p>When you assign a <code class="codeph">DATETIME</code> to a character string, the <code class="codeph">DATETIME</code> is converted using the session&#39;s default <code class="codeph">DATETIME</code> format. When you assign a character string to a <code class="codeph">DATETIME</code>, the string must contain a valid <code class="codeph">DATETIME</code> value based on the session&#39;s default <code class="codeph">DATETIME</code> format</p>
<p>When you assign a character string to an <code class="codeph">INTERVAL</code>, the character string must be a valid <code class="codeph">INTERVAL</code> character format.</p>
</div>
</div>
<a id="LNOCI16325"></a>
<div class="props_rev_3"><a id="GUID-D4DF5B12-C095-472A-8AA0-0DA37A94590B"></a>
<h4 id="LNOCI-GUID-D4DF5B12-C095-472A-8AA0-0DA37A94590B" class="sect4">Data Conversion Notes for Datetime and Interval Types</h4>
<div>
<p>When you convert from <code class="codeph">TSLTZ</code> to <code class="codeph">CHAR</code>, <code class="codeph">DATE</code>, <code class="codeph">TIMESTAMP</code>, and <code class="codeph">TSTZ</code>, the value is adjusted to the session time zone.</p>
<p>When you convert from <code class="codeph">CHAR</code>, <code class="codeph">DATE</code>, and <code class="codeph">TIMESTAMP</code> to <code class="codeph">TSLTZ</code>, the session time zone is stored in memory.</p>
<p>When you assign <code class="codeph">TSLTZ</code> to <code class="codeph">ANSI</code> <code class="codeph">DATE</code>, the time portion is zero.</p>
<p>When you convert from <code class="codeph">TSTZ</code>, the time zone that the time stamp is in is stored in memory.</p>
<p>When you assign a character string to an interval, the character string must be a valid interval character format.</p>
</div>
</div>
</div>
<a id="LNOCI16326"></a>
<div class="props_rev_3"><a id="GUID-9FEFB0A2-7754-447A-89EB-FC96B9AD784D"></a>
<h3 id="LNOCI-GUID-9FEFB0A2-7754-447A-89EB-FC96B9AD784D" class="sect3">Datetime and Date Upgrading Rules</h3>
<div>
<p>OCI has full forward and backward compatibility between a client application and the Oracle database for datetime and date columns.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-F8D97977-3E96-4A66-A2A6-73C842C8ED7E">Pre-9.0 Client with 9.0 or Later Server</a></p>
</li>
<li>
<p><a href="oci03typ.htm#GUID-54774793-0576-4CB4-B800-A18F5B927DC0">Pre-9.0 Server with 9.0 or Later Client</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16327"></a>
<div class="props_rev_3"><a id="GUID-F8D97977-3E96-4A66-A2A6-73C842C8ED7E"></a>
<h4 id="LNOCI-GUID-F8D97977-3E96-4A66-A2A6-73C842C8ED7E" class="sect4">Pre-9.0 Client with 9.0 or Later Server</h4>
<div>
<p>The only datetime data type available to a pre-9.0 application is the <code class="codeph">DATE</code> data type, <code class="codeph">SQLT_DAT</code>. When a pre-9.0 client that defined a buffer as <code class="codeph">SQLT_DAT</code> tries to obtain data from a <code class="codeph">TSLTZ</code> column, only the date portion of the value is returned to the client.</p>
</div>
</div>
<a id="LNOCI16328"></a>
<div class="props_rev_3"><a id="GUID-54774793-0576-4CB4-B800-A18F5B927DC0"></a>
<h4 id="LNOCI-GUID-54774793-0576-4CB4-B800-A18F5B927DC0" class="sect4">Pre-9.0 Server with 9.0 or Later Client</h4>
<div>
<p>When a pre-9.0 server is used with a 9.0 or later client, the client can have a bind or define buffer of type <code class="codeph">SQLT_TIMESTAMP_LTZ</code>. The following compatibilities are maintained in this case.</p>
<p>If any client application tries to insert a <code class="codeph">SQLT_TIMESTAMP_LTZ</code> (or any of the new datetime data types) into a <code class="codeph">DATE</code> column, an error is issued because there is potential data loss in this situation.</p>
<p>When a client has an OUT bind or a define buffer that is of data type <code class="codeph">SQLT_TIMESTAMP_LTZ</code> and the underlying server-side SQL buffer or column is of <code class="codeph">DATE</code> type, then the session time zone is assigned.</p>
</div>
</div>
</div>
<a id="LNOCI16330"></a><a id="LNOCI16331"></a><a id="LNOCI16329"></a>
<div class="props_rev_3"><a id="GUID-406EDC3C-FCBD-4596-9C0D-A15B55315EF3"></a>
<h3 id="LNOCI-GUID-406EDC3C-FCBD-4596-9C0D-A15B55315EF3" class="sect3">Data Conversion for BINARY_FLOAT and BINARY_DOUBLE in OCI</h3>
<div>
<div class="section">
<p><a href="oci03typ.htm#GUID-406EDC3C-FCBD-4596-9C0D-A15B55315EF3__G454882" title="This table has 3 columns. Column 1 is external types/internal types, column 2 is BINARY_FLOAT, and column 3 is BINARY_DOUBLE.">Table 3-8</a> shows the supported conversions between internal numeric data types and all relevant external types. An (I) implies that the conversion is valid for input only (binds), and (O) implies that the conversion is valid for output only (defines). An (I/O) implies that the conversion is valid for input and output (binds and defines).</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-406EDC3C-FCBD-4596-9C0D-A15B55315EF3__G454882">
<p class="titleintable">Table 3-8 Data Conversion for External Data Types to Internal Numeric Data Types</p>
<table class="cellalignment6175" title="Data Conversion for External Data Types to Internal Numeric Data Types " summary="This table has 3 columns. Column 1 is external types/internal types, column 2 is BINARY_FLOAT, and column 3 is BINARY_DOUBLE.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6182" id="d35260e15324">External Types/Internal Types</th>
<th class="cellalignment6166" id="d35260e15327">BINARY_FLOAT</th>
<th class="cellalignment6245" id="d35260e15330">BINARY_DOUBLE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15335" headers="d35260e15324">
<p><code class="codeph">VARCHAR</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15335 d35260e15327">
<p>I/O<a id="fn_18" href="#fn_18" onclick="footdisplay(18,&#34;An (I/O) implies that the conversion is valid for input and output (binds and defines) &#34;)"><sup>Foot&nbsp;18</sup></a></p>
</td>
<td class="cellalignment6246" headers="d35260e15335 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15349" headers="d35260e15324">
<p><code class="codeph">VARCHAR2</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15349 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15349 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15360" headers="d35260e15324">
<p><code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15360 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15360 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15371" headers="d35260e15324">
<p><code class="codeph">INTEGER</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15371 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15371 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15382" headers="d35260e15324">
<p><code class="codeph">FLOAT</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15382 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15382 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15393" headers="d35260e15324">
<p><code class="codeph">STRING</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15393 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15393 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15404" headers="d35260e15324">
<p><code class="codeph">VARNUM</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15404 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15404 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15415" headers="d35260e15324">
<p><code class="codeph">LONG</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15415 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15415 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15426" headers="d35260e15324">
<p><code class="codeph">UNSIGNED INT</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15426 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15426 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15437" headers="d35260e15324">
<p><code class="codeph">LONG VARCHAR</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15437 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15437 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15448" headers="d35260e15324">
<p><code class="codeph">CHAR</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15448 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15448 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15460" headers="d35260e15324">
<p><code class="codeph">BINARY_FLOAT</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15460 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15460 d35260e15330">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6184" id="d35260e15471" headers="d35260e15324">
<p><code class="codeph">BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment6170" headers="d35260e15471 d35260e15327">
<p>I/O</p>
</td>
<td class="cellalignment6246" headers="d35260e15471 d35260e15330">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;18</sup></p>
<p>An (I/O) implies that the conversion is valid for input and output (binds and defines)</p>
<div class="section">
<p><a href="oci03typ.htm#GUID-406EDC3C-FCBD-4596-9C0D-A15B55315EF3__G455058" title="This table has 3 columns. Column 1 is external types/internal types, column 2 is native float, and column 3 is native double.">Table 3-9</a> shows the supported conversions between all relevant internal types and numeric external types. An (I) implies that the conversion is valid for input only (only for binds), and (O) implies that the conversion is valid for output only (only for defines). An (I/O) implies that the conversion is valid for input and output (binds and defines).</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-406EDC3C-FCBD-4596-9C0D-A15B55315EF3__G455058">
<p class="titleintable">Table 3-9 Data Conversions for Internal to External Numeric Data Types</p>
<table class="cellalignment6175" title="Data Conversions for Internal to External Numeric Data Types " summary="This table has 3 columns. Column 1 is external types/internal types, column 2 is native float, and column 3 is native double.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6237" id="d35260e15499">Internal Types/External Types</th>
<th class="cellalignment6245" id="d35260e15502">Native Float</th>
<th class="cellalignment6166" id="d35260e15505">Native Double</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d35260e15510" headers="d35260e15499">
<p><code class="codeph">VARCHAR2</code></p>
</td>
<td class="cellalignment6246" headers="d35260e15510 d35260e15502">
<p>I/O<a id="fn_19" href="#fn_19" onclick="footdisplay(19,&#34;An (I/O) implies that the conversion is valid for input and output (binds and defines) &#34;)"><sup>Foot&nbsp;19</sup></a></p>
</td>
<td class="cellalignment6170" headers="d35260e15510 d35260e15505">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d35260e15524" headers="d35260e15499">
<p><code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6246" headers="d35260e15524 d35260e15502">
<p>I/O</p>
</td>
<td class="cellalignment6170" headers="d35260e15524 d35260e15505">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d35260e15535" headers="d35260e15499">
<p><code class="codeph">LONG</code></p>
</td>
<td class="cellalignment6246" headers="d35260e15535 d35260e15502">
<p>I<a id="fn_20" href="#fn_20" onclick="footdisplay(20,&#34;An (I) implies that the conversion is valid for input only (only for binds) &#34;)"><sup>Foot&nbsp;20</sup></a></p>
</td>
<td class="cellalignment6170" headers="d35260e15535 d35260e15505">
<p>I</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d35260e15549" headers="d35260e15499">
<p><code class="codeph">CHAR</code></p>
</td>
<td class="cellalignment6246" headers="d35260e15549 d35260e15502">
<p>I/O</p>
</td>
<td class="cellalignment6170" headers="d35260e15549 d35260e15505">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d35260e15560" headers="d35260e15499">
<p><code class="codeph">BINARY_FLOAT</code></p>
</td>
<td class="cellalignment6246" headers="d35260e15560 d35260e15502">
<p>I/O</p>
</td>
<td class="cellalignment6170" headers="d35260e15560 d35260e15505">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d35260e15571" headers="d35260e15499">
<p><code class="codeph">BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment6246" headers="d35260e15571 d35260e15502">
<p>I/O</p>
</td>
<td class="cellalignment6170" headers="d35260e15571 d35260e15505">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;19</sup></p>
<p>An (I/O) implies that the conversion is valid for input and output (binds and defines)</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;20</sup></p>
<p>An (I) implies that the conversion is valid for input only (only for binds)</p>
</div>
</div>
</div>
<a id="LNOCI16333"></a><a id="LNOCI16332"></a>
<div class="props_rev_3"><a id="GUID-65066795-6F95-44AE-A454-31CF70A46A1F"></a>
<h2 id="LNOCI-GUID-65066795-6F95-44AE-A454-31CF70A46A1F" class="sect2">Typecodes</h2>
<div>
<p>A unique typecode is associated with each Oracle Database type, whether scalar, collection, reference, or object type.</p>
<div class="section">
<p>This typecode identifies the type, and is used by Oracle Database to manage information about object type attributes. This typecode system is designed to be generic and extensible. It is not tied to a direct one-to-one mapping to Oracle data types. Consider the following SQL statements:</p>
<pre dir="ltr">CREATE TYPE my_type AS OBJECT
( attr1    NUMBER,
  attr2    INTEGER,
  attr3    SMALLINT);

CREATE TABLE my_table AS TABLE OF my_type;
</pre>
<p>These statements create an object type and an object table. When it is created, <code class="codeph">my_table</code> has three columns, all of which are of Oracle <code class="codeph">NUMBER</code> type, because <code class="codeph">SMALLINT</code> and <code class="codeph">INTEGER</code> map internally to <code class="codeph">NUMBER</code>. The internal representation of the attributes of <code class="codeph">my_type</code>, however, maintains the distinction between the data types of the three attributes: <code class="codeph">attr1</code> is <code class="codeph">OCI_TYPECODE_NUMBER</code>, <code class="codeph">attr2</code> is <code class="codeph">OCI_TYPECODE_INTEGER</code>, and <code class="codeph">attr3</code> is <code class="codeph">OCI_TYPECODE_SMALLINT</code>. If an application describes <code class="codeph">my_type</code>, these typecodes are returned.</p>
<p><code class="codeph">OCITypeCode</code> is the C data type of the typecode. The typecode is used by some OCI functions, like <a href="oci18nav004.htm#GUID-2EFD6F01-A02F-4C5B-B20F-1EF841249056" title="Creates a standalone instance.">OCIObjectNew()</a>, where it helps determine what type of object is created. It is also returned as the value of some attributes when an object is described; for example, querying the <code class="codeph">OCI_ATTR_TYPECODE</code> attribute of a type returns an <code class="codeph">OCITypeCode</code> value.</p>
<p><a href="oci03typ.htm#GUID-65066795-6F95-44AE-A454-31CF70A46A1F__G454481" title="This table has 2 columns. Column 1 is Value and column 2 is its corresponding data type.">Table 3-10</a> lists the possible values for an <code class="codeph">OCITypeCode</code>. There is a value corresponding to each Oracle data type.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-65066795-6F95-44AE-A454-31CF70A46A1F__G454481">
<p class="titleintable">Table 3-10 OCITypeCode Values and Data Types</p>
<table class="cellalignment6175" title="OCITypeCode Values and Data Types" summary="This table has 2 columns. Column 1 is Value and column 2 is its corresponding data type.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6192" id="d35260e15831">Value</th>
<th class="cellalignment6233" id="d35260e15834">Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15839" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_REF</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15839 d35260e15834">
<p>REF</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15847" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_DATE</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15847 d35260e15834">
<p>DATE</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15855" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15855 d35260e15834">
<p>TIMESTAMP</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15863" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP_TZ</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15863 d35260e15834">
<p>TIMESTAMP WITH TIME ZONE</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15871" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP_LTZ</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15871 d35260e15834">
<p>TIMESTAMP WITH LOCAL TIME ZONE</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15879" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_INTERVAL_YM</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15879 d35260e15834">
<p>INTERVAL YEAR TO MONTH</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15887" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_INTERVAL_DS</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15887 d35260e15834">
<p>INTERVAL DAY TO SECOND</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15895" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_REAL</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15895 d35260e15834">
<p>Single-precision real</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15903" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_DOUBLE</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15903 d35260e15834">
<p>Double-precision real</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15911" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_FLOAT</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15911 d35260e15834">
<p>Floating-point</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15919" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_NUMBER</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15919 d35260e15834">
<p>Oracle NUMBER</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15928" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_BFLOAT</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15928 d35260e15834">
<p>BINARY_FLOAT</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15936" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_BDOUBLE</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15936 d35260e15834">
<p>BINARY_DOUBLE</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15944" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_DECIMAL</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15944 d35260e15834">
<p>Decimal</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15952" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_OCTET</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15952 d35260e15834">
<p>Octet</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15960" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_INTEGER</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15960 d35260e15834">
<p>Integer</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15968" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_SMALLINT</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15968 d35260e15834">
<p>Small int</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15976" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_RAW</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15976 d35260e15834">
<p>RAW</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15984" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_VARCHAR2</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15984 d35260e15834">
<p>Variable string ANSI SQL, that is, VARCHAR2</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e15992" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_VARCHAR</code></p>
</td>
<td class="cellalignment6234" headers="d35260e15992 d35260e15834">
<p>Variable string Oracle SQL, that is, VARCHAR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16000" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_CHAR</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16000 d35260e15834">
<p>Fixed-length string inside SQL, that is SQL CHAR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16008" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_VARRAY</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16008 d35260e15834">
<p>Variable-length array (varray)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16017" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_TABLE</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16017 d35260e15834">
<p>Multiset</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16025" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_CLOB</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16025 d35260e15834">
<p>Character large object (CLOB)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16033" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_BLOB</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16033 d35260e15834">
<p>Binary large object (BLOB)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16041" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_BFILE</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16041 d35260e15834">
<p>Binary large object file (<code class="codeph">BFILE</code>)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16052" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_OBJECT</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16052 d35260e15834">
<p>Named object type, or SYS.XMLType</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16060" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_NAMEDCOLLECTION</code></p>
</td>
<td class="cellalignment6234" headers="d35260e16060 d35260e15834">
<p>Collection</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16068" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_BOOLEAN</code><a id="GUID-65066795-6F95-44AE-A454-31CF70A46A1F__CEGGFJIF" href="#GUID-65066795-6F95-44AE-A454-31CF70A46A1F__CEGGFJIF" onclick="footdisplay(21,&#34;This type is a PL/SQL type only. &#34;)"><sup>Foot&nbsp;21</sup></a></p>
</td>
<td class="cellalignment6234" headers="d35260e16068 d35260e15834">
<p>Boolean</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16079" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_RECORD</code><a id="fnsrc_d35260e16083" href="#fnsrc_d35260e16083" onclick="footdisplay(21,&#34;This type is a PL/SQL type only. &#34;)"><sup>Footref&nbsp;21</sup></a></p>
</td>
<td class="cellalignment6234" headers="d35260e16079 d35260e15834">
<p>Record</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16089" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_ITABLE</code><a id="fnsrc_d35260e16093" href="#fnsrc_d35260e16093" onclick="footdisplay(21,&#34;This type is a PL/SQL type only. &#34;)"><sup>Footref&nbsp;21</sup></a></p>
</td>
<td class="cellalignment6234" headers="d35260e16089 d35260e15834">
<p>Index-by <span>BINARY_INTEGER</span></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d35260e16101" headers="d35260e15831">
<p><code class="codeph">OCI_TYPECODE_INTEGER</code><a id="fnsrc_d35260e16105" href="#fnsrc_d35260e16105" onclick="footdisplay(21,&#34;This type is a PL/SQL type only. &#34;)"><sup>Footref&nbsp;21</sup></a></p>
</td>
<td class="cellalignment6234" headers="d35260e16101 d35260e15834">
<p><span>PLS_INTEGER</span> or <span>BINARY_INTEGER</span></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;21</sup></p>
<p>This type is a PL/SQL type only.</p>
<div class="section">
<p>This section includes the following topic: <a href="oci03typ.htm#GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136">Relationship Between SQLT and OCI_TYPECODE Values</a>.</p>
</div>
<!-- class="section" --></div>
<a id="LNOCI16335"></a><a id="LNOCI16334"></a>
<div class="props_rev_3"><a id="GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136"></a>
<h3 id="LNOCI-GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136" class="sect3">Relationship Between SQLT and OCI_TYPECODE Values</h3>
<div>
<div class="section">
<p>Oracle Database recognizes two different sets of data type code values. One set is distinguished by the <code class="codeph">SQLT_</code> prefix, the other by the <code class="codeph">OCI_TYPECODE_</code> prefix.</p>
<p>The <code class="codeph">SQLT</code> typecodes are used by OCI to specify a data type in a bind or define operation, enabling you to control data conversions between Oracle Database and OCI client applications. The <code class="codeph">OCI_TYPECODE</code> types are used by Oracle&#39;s type system to reference or describe predefined types when manipulating or creating user-defined types.</p>
<p>In many cases, there are direct mappings between <code class="codeph">SQLT</code> and <code class="codeph">OCI_TYPECODE</code> values. In other cases, however, there is not a direct one-to-one mapping. For example, <code class="codeph">OCI_TYPECODE_SIGNED8</code>, <code class="codeph">OCI_TYPECODE_SIGNED16</code>, <code class="codeph">OCI_TYPECODE_SIGNED32</code>, <code class="codeph">OCI_TYPECODE_INTEGER</code>, <code class="codeph">OCI_TYPECODE_OCTET</code>, and <code class="codeph">OCI_TYPECODE_SMALLINT</code> are all mapped to the <code class="codeph">SQLT_INT</code> type.</p>
<p><a href="oci03typ.htm#GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__G454572" title="This table has 3 columns. Column 1 is Oracle type system tymename, column 2 is Oracle type system type, and column 3 is the equivalent SQLT type.">Table 3-11</a> illustrates the mappings between <code class="codeph">SQLT</code> and <code class="codeph">OCI_TYPECODE</code> types.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__G454572">
<p class="titleintable">Table 3-11 OCI_TYPECODE to SQLT Mappings</p>
<table class="cellalignment6157" title="OCI_TYPECODE to SQLT Mappings " summary="This table has 3 columns. Column 1 is Oracle type system tymename, column 2 is Oracle type system type, and column 3 is the equivalent SQLT type.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6195" id="d35260e16347">Oracle Type System Typename</th>
<th class="cellalignment6178" id="d35260e16350">Oracle Type System Type</th>
<th class="cellalignment6166" id="d35260e16353">Equivalent SQLT Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16358" headers="d35260e16347">
<p><code class="codeph">BFILE</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16358 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_BFILE</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16358 d35260e16353">
<p><code class="codeph">SQLT_BFILE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16371" headers="d35260e16347">
<p><code class="codeph">BLOB</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16371 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_BLOB</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16371 d35260e16353">
<p><code class="codeph">SQLT_BLOB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16384" headers="d35260e16347">
<p><code class="codeph">BOOLEAN</code><a id="fn_22" href="#fn_22" onclick="footdisplay(22,&#34;This type is a PL/SQL type only. &#34;)"><sup>Foot&nbsp;22</sup></a></p>
</td>
<td class="cellalignment6181" headers="d35260e16384 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_BOOLEAN</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16384 d35260e16353">
<p><code class="codeph">SQLT_BOL</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16400" headers="d35260e16347">
<p><code class="codeph">CHAR</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16400 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_CHAR</code> (n)</p>
</td>
<td class="cellalignment6170" headers="d35260e16400 d35260e16353">
<p><code class="codeph">SQLT_AFC</code>(n)<a id="GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__CEGEFEEE" href="#GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__CEGEFEEE" onclick="footdisplay(23,&#34;n is the size of the string in bytes. &#34;)"><sup>Foot&nbsp;23</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16418" headers="d35260e16347">
<p><code class="codeph">CLOB</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16418 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_CLOB</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16418 d35260e16353">
<p><code class="codeph">SQLT_CLOB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16431" headers="d35260e16347">
<p><code class="codeph">COLLECTION</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16431 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_NAMEDCOLLECTION</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16431 d35260e16353">
<p><code class="codeph">SQLT_NCO</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16444" headers="d35260e16347">
<p><code class="codeph">DATE</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16444 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_DATE</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16444 d35260e16353">
<p><code class="codeph">SQLT_DAT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16457" headers="d35260e16347">
<p><code class="codeph">TIMESTAMP</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16457 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16457 d35260e16353">
<p><code class="codeph">SQLT_TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16470" headers="d35260e16347">
<p><code class="codeph">TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16470 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP_TZ</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16470 d35260e16353">
<p><code class="codeph">SQLT_TIMESTAMP_TZ</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16483" headers="d35260e16347">
<p><code class="codeph">TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16483 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP_LTZ</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16483 d35260e16353">
<p><code class="codeph">SQLT_TIMESTAMP_LTZ</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16496" headers="d35260e16347">
<p><code class="codeph">INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16496 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_INTERVAL_YM</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16496 d35260e16353">
<p><code class="codeph">SQLT_INTERVAL_YM</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16510" headers="d35260e16347">
<p><code class="codeph">INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16510 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_INTERVAL_DS</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16510 d35260e16353">
<p><code class="codeph">SQLT_INTERVAL_DS</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16523" headers="d35260e16347">
<p><code class="codeph">FLOAT</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16523 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_FLOAT</code> (b)</p>
</td>
<td class="cellalignment6170" headers="d35260e16523 d35260e16353">
<p><code class="codeph">SQLT_FLT</code> (8)<a id="fn_24" href="#fn_24" onclick="footdisplay(24,&#34;These are floating-point numbers, the precision is given in terms of binary digits. b is the precision of the number in binary digits. &#34;)"><sup>Foot&nbsp;24</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16541" headers="d35260e16347">
<p><code class="codeph">DECIMAL</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16541 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_DECIMAL</code> (p)</p>
</td>
<td class="cellalignment6170" headers="d35260e16541 d35260e16353">
<p><code class="codeph">SQLT_NUM</code> (p, 0)<a id="fn_25" href="#fn_25" onclick="footdisplay(25,&#34;This is equivalent to a NUMBER with no decimal places. &#34;)"><sup>Foot&nbsp;25</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16559" headers="d35260e16347">
<p><code class="codeph">DOUBLE</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16559 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_DOUBLE</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16559 d35260e16353">
<p><code class="codeph">SQLT_FLT</code> (8)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16573" headers="d35260e16347">
<p><code class="codeph">BINARY_FLOAT</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16573 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_BFLOAT</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16573 d35260e16353">
<p><code class="codeph">SQLT_BFLOAT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16586" headers="d35260e16347">
<p><code class="codeph">BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16586 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_BDOUBLE</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16586 d35260e16353">
<p><code class="codeph">SQLT_BDOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16599" headers="d35260e16347">
<p><code class="codeph">INDEX-BY BINARY_INTEGER</code><a id="fnsrc_d35260e16603" href="#fnsrc_d35260e16603" onclick="footdisplay(21,&#34;This type is a PL/SQL type only. &#34;)"><sup>Footref&nbsp;21</sup></a></p>
</td>
<td class="cellalignment6181" headers="d35260e16599 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_ITABLE</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16599 d35260e16353">
<p><code class="codeph">SQLT_NTY</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16614" headers="d35260e16347">
<p><code class="codeph">INTEGER</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16614 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_INTEGER</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16614 d35260e16353">
<p><code class="codeph">SQLT_INT</code> (i)<a id="GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__CEGFHFAG" href="#GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__CEGFHFAG" onclick="footdisplay(26,&#34;i is the size of the number in bytes, set as part of an OCI call. &#34;)"><sup>Foot&nbsp;26</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16631" headers="d35260e16347">
<p><code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16631 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_NUMBER</code> (p, s)</p>
</td>
<td class="cellalignment6170" headers="d35260e16631 d35260e16353">
<p><code class="codeph">SQLT_NUM</code> (p, s)<a id="fn_27" href="#fn_27" onclick="footdisplay(27,&#34;p is the precision of the number in decimal digits; s is the scale of the number in decimal digits. &#34;)"><sup>Foot&nbsp;27</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16649" headers="d35260e16347">
<p><code class="codeph">OCTET</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16649 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_OCTET</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16649 d35260e16353">
<p><code class="codeph">SQLT_INT</code> (1)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16663" headers="d35260e16347">
<p><code class="codeph">PLS_INTEGER</code> or <code class="codeph">BINARY_INTEGER</code><a id="fnsrc_d35260e16670" href="#fnsrc_d35260e16670" onclick="footdisplay(21,&#34;This type is a PL/SQL type only. &#34;)"><sup>Footref&nbsp;21</sup></a></p>
</td>
<td class="cellalignment6181" headers="d35260e16663 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_PLS_INTEGER</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16663 d35260e16353">
<p><code class="codeph">SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16682" headers="d35260e16347">
<p><code class="codeph">POINTER</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16682 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_PTR</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16682 d35260e16353">
<p>&lt;NONE&gt;</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16694" headers="d35260e16347">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16694 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_RAW</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16694 d35260e16353">
<p><code class="codeph">SQLT_LVB</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16707" headers="d35260e16347">
<p><code class="codeph">REAL</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16707 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_REAL</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16707 d35260e16353">
<p><code class="codeph">SQLT_FLT</code> (4)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16721" headers="d35260e16347">
<p><code class="codeph">REF</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16721 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_REF</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16721 d35260e16353">
<p><code class="codeph">SQLT_REF</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16734" headers="d35260e16347">
<p><code class="codeph">RECORD</code><a id="fnsrc_d35260e16738" href="#fnsrc_d35260e16738" onclick="footdisplay(21,&#34;This type is a PL/SQL type only. &#34;)"><sup>Footref&nbsp;21</sup></a></p>
</td>
<td class="cellalignment6181" headers="d35260e16734 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_RECORD</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16734 d35260e16353">
<p><code class="codeph">SQLT_NTY</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16749" headers="d35260e16347">
<p><code class="codeph">OBJECT</code> or <code class="codeph">SYS.XMLType</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16749 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_OBJECT</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16749 d35260e16353">
<p><code class="codeph">SQLT_NTY</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16765" headers="d35260e16347">
<p><code class="codeph">SIGNED(8)</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16765 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_SIGNED8</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16765 d35260e16353">
<p><code class="codeph">SQLT_INT</code> (1)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16779" headers="d35260e16347">
<p><code class="codeph">SIGNED(16)</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16779 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_SIGNED16</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16779 d35260e16353">
<p><code class="codeph">SQLT_INT</code> (2)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16793" headers="d35260e16347">
<p><code class="codeph">SIGNED(32)</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16793 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_SIGNED32</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16793 d35260e16353">
<p><code class="codeph">SQLT_INT</code> (4)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16807" headers="d35260e16347">
<p><code class="codeph">SMALLINT</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16807 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_SMALLINT</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16807 d35260e16353">
<p><code class="codeph">SQLT_INT</code> (i)<a id="fnsrc_d35260e16820" href="#fnsrc_d35260e16820" onclick="footdisplay(26,&#34;i is the size of the number in bytes, set as part of an OCI call. &#34;)"><sup>Footref&nbsp;26</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16823" headers="d35260e16347">
<p><code class="codeph">TABLE</code><a id="GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__CEGFIIIG" href="#GUID-DCC693D9-23D7-4727-9A71-E5FCDABA7136__CEGFIIIG" onclick="footdisplay(28,&#34;Can only be part of a named collection type. &#34;)"><sup>Foot&nbsp;28</sup></a></p>
</td>
<td class="cellalignment6181" headers="d35260e16823 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_TABLE</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16823 d35260e16353">
<p>&lt;NONE&gt;</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16839" headers="d35260e16347">
<p><code class="codeph">UNSIGNED(8)</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16839 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_UNSIGNED8</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16839 d35260e16353">
<p><code class="codeph">SQLT_UIN</code> (1)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16853" headers="d35260e16347">
<p><code class="codeph">UNSIGNED(16)</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16853 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_UNSIGNED16</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16853 d35260e16353">
<p><code class="codeph">SQLT_UIN</code> (2)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16867" headers="d35260e16347">
<p><code class="codeph">UNSIGNED(32)</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16867 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_UNSIGNED32</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16867 d35260e16353">
<p><code class="codeph">SQLT_UIN</code> (4)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16881" headers="d35260e16347">
<p><code class="codeph">VARRAY</code><a id="fnsrc_d35260e16885" href="#fnsrc_d35260e16885" onclick="footdisplay(28,&#34;Can only be part of a named collection type. &#34;)"><sup>Footref&nbsp;28</sup></a></p>
</td>
<td class="cellalignment6181" headers="d35260e16881 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_VARRAY</code></p>
</td>
<td class="cellalignment6170" headers="d35260e16881 d35260e16353">
<p>&lt;NONE&gt;</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16895" headers="d35260e16347">
<p><code class="codeph">VARCHAR</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16895 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_VARCHAR</code> (n)</p>
</td>
<td class="cellalignment6170" headers="d35260e16895 d35260e16353">
<p><code class="codeph">SQLT_CHR</code> (n)<a id="fnsrc_d35260e16909" href="#fnsrc_d35260e16909" onclick="footdisplay(23,&#34;n is the size of the string in bytes. &#34;)"><sup>Footref&nbsp;23</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6197" id="d35260e16912" headers="d35260e16347">
<p><code class="codeph">VARCHAR2</code></p>
</td>
<td class="cellalignment6181" headers="d35260e16912 d35260e16350">
<p><code class="codeph">OCI_TYPECODE_VARCHAR2</code> (n)</p>
</td>
<td class="cellalignment6170" headers="d35260e16912 d35260e16353">
<p><code class="codeph">SQLT_VCS</code> (n)<a id="fnsrc_d35260e16926" href="#fnsrc_d35260e16926" onclick="footdisplay(23,&#34;n is the size of the string in bytes. &#34;)"><sup>Footref&nbsp;23</sup></a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;22</sup></p>
<p>This type is a PL/SQL type only.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;23</sup></p>
<p>n is the size of the string in bytes.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;24</sup></p>
<p>These are floating-point numbers, the precision is given in terms of binary digits. b is the precision of the number in binary digits.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;25</sup></p>
<p>This is equivalent to a NUMBER with no decimal places.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;26</sup></p>
<p>i is the size of the number in bytes, set as part of an OCI call.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;27</sup></p>
<p>p is the precision of the number in decimal digits; s is the scale of the number in decimal digits.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;28</sup></p>
<p>Can only be part of a named collection type.</p>
</div>
</div>
</div>
<a id="LNOCI16336"></a>
<div class="props_rev_3"><a id="GUID-7283C7EC-E768-44AD-991A-7E28AB49E7D3"></a>
<h2 id="LNOCI-GUID-7283C7EC-E768-44AD-991A-7E28AB49E7D3" class="sect2">Definitions in oratypes.h</h2>
<div>
<p>Throughout this guide there are references to data types like <code class="codeph">ub2</code> or <code class="codeph">sb4</code>, or to constants like <code class="codeph">UB4MAXVAL</code>. These types are defined in the <code class="codeph">oratypes.h</code> header file, which is found in the <code class="codeph">public</code> directory. The exact contents may vary according to the operating system that you are using.</p>
<div class="infobox-note" id="GUID-7283C7EC-E768-44AD-991A-7E28AB49E7D3__GUID-B6C490FA-84C9-46E9-B541-E85DC0BFA615">
<p class="notep1">Note:</p>
<p><a id="d35260e17130" class="indexterm-anchor"></a><a id="d35260e17134" class="indexterm-anchor"></a>The use of the data types in <code class="codeph">oratypes.h</code> is<a id="d35260e17142" class="indexterm-anchor"></a> the only supported means of supplying parameters to OCI.</p>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6150">
<tr>
<td class="cellalignment6162">
<table class="cellalignment6155">
<tr>
<td class="cellalignment6154"><a href="oci02bas.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6154"><a href="oci04sql.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6164">
<table class="cellalignment6153">
<tr>
<td class="cellalignment6154"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6154"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6154"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6154"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6154"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6154"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>