<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-74002"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Object-Relational%20Data%20Types%20in%20OCI"></a><title>Object-Relational Data Types in OCI</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="This chapter describes the purpose and structure of each of the data types that can be manipulated by the OCI data type mapping and manipulation functions."/>
<meta name="keywords" content="Oracle data types, mapping to C, data types, mapping from Oracle to C, objects, NCHAR and NVARCHAR2 attribute of, mapping, Oracle methodology, C data types, manipulating with OCI, OCIDate, binding and defining, manipulation usage example, OCINumber, usage examples, OCIString, OCIRaw, OCITable, OCIArray, OCIColl, OCIIter, collections, description, functions for manipulating, data manipulation functions, scanning functions, varrays, or collection Iterator example, OCIArray manipulation, code example, usage example, nested table, element ordering, multilevel, OCIRef, descriptor, type descriptor object, attribute descriptor object, TDO, obtaining, objects, OCITypeElem, OCITypeMethod, OCIType, method descriptor object, parameter descriptor, object, AnyType, AnyData, AnyDataSet, bind operations, SQL statements, binding placeholders in, named data types, binding, definition, REFs, indicator variables, with named data type bind, with REF bind, arrays, binds, define operations, SQL query, defining output variables, defining, define calls, named data type defines, REF defines, PL/SQL OUT binds, SQLT_NTY, preallocating object memory, defines, define, bind example, define example"/>
<meta name="dcterms.created" content="2017-06-09T09:07:30Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49886-11"/>
<meta name="dcterms.isVersionOf" content="LNOCI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oci11obj.htm" title="Previous" type="text/html"/>
<link rel="Next" href="oci13obn.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49886-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C62AEE74-0CC5-4FAB-A91F-997F71C49C2C"></a> <span id="PAGE" style="display:none;">19/84</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='oci12oty'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('about:blank', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');
    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'); 
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" ><head><title>');
   
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="LNOCI110"></a>
<h1 id="LNOCI-GUID-C62AEE74-0CC5-4FAB-A91F-997F71C49C2C" class="sect1"><span class="enumeration_chapter">12</span> Object-Relational Data Types in OCI</h1>
<div>
<p>This chapter describes the purpose and structure of each of the data types that can be manipulated by the OCI data type mapping and manipulation functions.</p>
<p>This chapter also summarizes the different function groups giving lists of available functions and their purposes. In addition, provides information about how to use these data types in bind and define operations within an OCI application.</p>
<p>This chapter contains these topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-DDABE02B-E48E-4652-A212-39DBF7416103" title="The OCI data type mapping and manipulation functions provide the ability to manipulate instances of predefined Oracle C data types.">Overview of OCI Functions for Objects</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-FBFCB2C4-2E26-4FDC-ACB3-902742349800" title="Oracle provides a rich set of predefined data types with which you can create tables and specify user-defined data types (including object types).">About Mapping Oracle Data Types to C</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-23C8572F-ACCF-4FEB-AA70-AC08FFBDC29C" title="Shows how you can manipulate C data types with OCI and shows the various function prefixes, along with example function names and the data types on which the functions operate.">About Manipulating C Data Types with OCI</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-97999BC9-BC69-44AE-ACE1-CD077BAC37D0" title="The Oracle date format is mapped in C by the OCIDate type, which is an opaque C struct. Elements of the struct represent the year, month, day, hour, minute, and second of the date.">Date (OCIDate)</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE" title="The OCIDateTime data type is an opaque structure used to represent Oracle time-stamp data types (TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE) and the ANSI DATE data type.">Datetime and Interval (OCIDateTime, OCIInterval)</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-AC31C501-8512-427B-9C0E-FF7F85E0C067" title="The OCINumber data type is an opaque structure used to represent Oracle numeric data types (NUMBER, FLOAT, DECIMAL, and so forth).">Number (OCINumber)</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-A939CF70-1472-479C-81DD-274D8158C6A4" title="Fixed or variable-length string data is represented to C programs as an OCIString *.">Fixed or Variable-Length String (OCIString)</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-2E651841-433D-4EE7-9606-8372E3AB7463" title="Variable-length raw data is represented in C using the OCIRaw * data type.">Raw (OCIRaw)</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-82EEC341-6FE5-45EC-B768-52780CAF5461" title="Oracle Database provides two types of collections: variable-length arrays (varrays) and nested tables. In C applications, varrays are represented as OCIArray *, and nested tables are represented as OCITable *.">Collections (OCITable, OCIArray, OCIColl, OCIIter)</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-54C574D2-00A3-4AD0-AC61-BA2B18BE51D0" title="The collection element itself can be directly or indirectly another collection type.">About Multilevel Collection Types</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-964A12BB-B8A7-4ECA-ADDE-763CBC766174" title="A REF (reference) is an identifier to an object.">REF (OCIRef)</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-6A16EF8B-8ACF-4FD8-9C39-EA8A0D14DEC4" title="The OCI data types and type descriptors are discussed in this section.">Object Type Information Storage and Access</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-A728728A-3C8F-4446-874C-A551DE19BD28" title="The AnyType, AnyData, and AnyDataSet interfaces allow you to model self-descriptive data.">AnyType, AnyData, and AnyDataSet Interfaces</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-53D4F217-BE53-4B78-962C-0EAA9741F9AC" title="This section provides information about binding named data types (such as objects and collections) and REFs.">About Binding Named Data Types</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-5BFF4D9F-67AC-411B-9722-4135671FFD1E" title="For a named data type (object type, nested table, varray) define, two define calls are necessary. As with named data types, defining for a REF output variable is a two-step process.Consider the following important information as you work with named data type and REF defines. It includes pointers about memory allocation and indicator variable usage.">About Defining Named Data Types</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767" title="This section summarizes information about binding and defining Oracle C named data types">About Binding and Defining Oracle C Data Types</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-709C6AF1-8083-4E3E-B6DE-B8847C3E4693" title="The following code fragments demonstrate the use of the SQLT_NTY named data type in the bind call including OCIBindObject() and the SQLT_NTY named data type in the define call including OCIDefineObject().">SQLT_NTY Bind and Define Examples</a></p>
</li>
</ul>
</div>
<a id="LNOCI16832"></a>
<div class="props_rev_3"><a id="GUID-DDABE02B-E48E-4652-A212-39DBF7416103"></a>
<h2 id="LNOCI-GUID-DDABE02B-E48E-4652-A212-39DBF7416103" class="sect2">Overview of OCI Functions for Objects</h2>
<div>
<p>The OCI data type mapping and manipulation functions provide the ability to manipulate instances of predefined Oracle C data types.</p>
<p>These data types are used to represent the attributes of user-defined data types, including object types in Oracle Database.</p>
<p>Each group of functions within OCI is distinguished by a particular naming convention. The data type mapping and manipulation functions, for example, can be easily recognized because the function names start with the prefix <span class="italic">OCI</span>, followed by the name of a data type, as in <code class="codeph">OCIDateFromText()</code> and <code class="codeph">OCIRawSize()</code>. As will be explained later, the names can be further subdivided into function groups that operate on a particular type of data.</p>
<p>The predefined Oracle C types on which these functions operate are also distinguished by names that begin with the prefix <span class="italic">OCI</span>, as in <code class="codeph">OCIDate</code> or <code class="codeph">OCIString</code>.</p>
<p>The data type mapping and manipulation functions are used when an application must manipulate, bind, or define attributes of objects that are stored in an Oracle database, or that have been retrieved by a SQL query. Retrieved objects are stored in the client-side object cache.</p>
<p>The OCI client must allocate a descriptor before performing a bind or define operation. <code class="codeph">OCIStmtExecute()</code> and <code class="codeph">OCIStmtFetch2()</code> cannot allocate the memory for the descriptors if they are not allocated by <code class="codeph">OCIDescriptorAlloc()</code>.</p>
<p>These functions are valid only when an OCI application is running in object mode. For information about initializing OCI in object mode and creating an OCI application that accesses and manipulates objects, see <a href="oci11obj.htm#GUID-C89832E1-97A6-431F-ADC6-9CBF6B1EBA4E" title="If your OCI application is going to access and manipulate objects, it is essential that you specify a value of OCI_OBJECT for the mode parameter of the OCIEnvCreate() call, which is the first OCI call in any OCI application. Specifying this value for mode indicates to the OCI libraries that your application is working with objects.">About Initializing the Environment and the Object Cache</a>.</p>
<div class="infobox-note" id="GUID-DDABE02B-E48E-4652-A212-39DBF7416103__GUID-0532796E-1B18-4F51-8CBA-97B9EBF794D2">
<p class="notep1">Note:</p>
<p>Operations on object types such as <code class="codeph">OCIDate</code>, allow the address of the result to be the same as that of one of the operands.</p>
</div>
<div class="infoboxnotealso" id="GUID-DDABE02B-E48E-4652-A212-39DBF7416103__GUID-D8CC11C7-845F-4EC5-9025-DD08096C3D9E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci19map002.htm#GUID-EA8FEB07-401C-477E-805B-CC9E89FB13F4" title="Converts a character string to a date type according to the specified format.">OCIDateFromText()</a></p>
</li>
<li>
<p><a href="oci19map004.htm#GUID-D74E75FA-5985-4DDC-BC25-430B415B8837">OCIRawSize()</a></p>
</li>
<li>
<p><a href="oci14oca.htm#GUID-B2FBDC75-64BD-4E7E-A713-5095A827EA9C" title="This chapter introduces the OCI facility for working with objects in an Oracle Database.">Object Advanced Topics in OCI</a> for more information about retrieved objects being stored in the client-side object cache</p>
</li>
<li>
<p><a href="oci17msc001.htm#GUID-98B26708-3E02-45C0-8258-5D5544F32BE9" title="Associates an application request with a server.">OCIStmtExecute()</a></p>
</li>
<li>
<p><a href="oci17msc001.htm#GUID-DF585B90-58BA-45FC-B7CE-6F7F987C03B9" title="Fetches a row from the (scrollable) result set.">OCIStmtFetch2()</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></p>
</li>
<li>
<p><a class="olink ADOBJ-GUID-8A38BA82-CCD5-4424-AE19-10A994E25B0E" target="_blank" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ADOBJ-GUID-8A38BA82-CCD5-4424-AE19-10A994E25B0E"><span><cite>Oracle Database Object-Relational Developer&#39;s Guide</cite></span></a> for detailed information about object types, attributes, and collection data types</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16833"></a>
<div class="props_rev_3"><a id="GUID-FBFCB2C4-2E26-4FDC-ACB3-902742349800"></a>
<h2 id="LNOCI-GUID-FBFCB2C4-2E26-4FDC-ACB3-902742349800" class="sect2">About Mapping Oracle Data Types to C</h2>
<div>
<p>Oracle provides a rich set of predefined data types with which you can create tables and specify user-defined data types (including object types).</p>
<p>Object types extend the functionality of Oracle Database by allowing you to create data types that precisely model the types of data with which they work. This can provide increased efficiency and ease-of-use for programmers who are accessing the data.</p>
<p>You can use <code class="codeph">NCHAR</code> and <code class="codeph">NVARCHAR2</code> as attributes in objects and map to <code class="codeph">OCIString *</code> in C.</p>
<p>Database tables and object types are based upon the data types supplied by Oracle. These tables and types are created with SQL statements and stored using a specific set of Oracle internal data types, like <code class="codeph">VARCHAR2</code> or <code class="codeph">NUMBER</code>. For example, the following SQL statements create a user-defined <code class="codeph">address</code> data type and an object table to store instances of that type:</p>
<pre dir="ltr">CREATE TYPE address AS OBJECT
(street1    varchar2(50),
street2     varchar2(50),
city        varchar2(30),
state       char(2),
zip         number(5));
CREATE TABLE address_table OF address;
</pre>
<p>The new <code class="codeph">address</code> type could also be used to create a regular table with an object column:</p>
<pre dir="ltr">CREATE TABLE employees
(name         varchar2(30),
birthday      date,
home_addr     address);
</pre>
<p>An OCI application can manipulate information in the <code class="codeph">name</code> and <code class="codeph">birthday</code> columns of the <code class="codeph">employees</code> table using straightforward bind and define operations in association with SQL statements. Accessing information stored as attributes of objects requires some extra steps.</p>
<p>The OCI application first needs a way to represent the objects in a C language format. This is accomplished by using the Object Type Translator (OTT) to generate C struct representations of user-defined types. The elements of these structs have data types that represent C language mappings of Oracle data types.</p>
<p>An additional C type, <code class="codeph">OCIInd</code>, is used to represent null indicator information corresponding to attributes of object types.</p>
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-624EAEBE-AA0F-4DA5-A83D-88C0E7800F9E">OCI Type Mapping Methodology</a>.</p>
<div class="infoboxnotealso" id="GUID-FBFCB2C4-2E26-4FDC-ACB3-902742349800__GUID-186F29BD-1E27-4141-86DE-F1A10EDA0497">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci15ott.htm#GUID-FC45BE3C-C48C-427C-A60B-7B7658A42AD6__CIHEBCFC" title="This table has 3 columns. Column 1 is the object attribute type, column 2 is its corresponding C mapping, and column 3 is its corresponding OCITypeCode value.">Table 15-1</a> for the available Oracle types and their C mappings you can use as object attribute types</p>
</li>
<li>
<p><a href="oci15ott.htm#GUID-3D22CA8E-BE01-492F-BA85-DDD0CD3F4890" title="This chapter discusses the Object Type Translator (OTT), which is used to map database object types and named collection types to C structs for use in OCI applications.">Using the Object Type Translator with OCI</a> for more information and examples about using OTT</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16834"></a>
<div class="props_rev_3"><a id="GUID-624EAEBE-AA0F-4DA5-A83D-88C0E7800F9E"></a>
<h3 id="LNOCI-GUID-624EAEBE-AA0F-4DA5-A83D-88C0E7800F9E" class="sect3">OCI Type Mapping Methodology</h3>
<div>
<p>Oracle followed a distinct design philosophy when specifying the mappings of Oracle predefined types. The current system has the following benefits and advantages:</p>
<ul style="list-style-type: disc;">
<li>
<p>The actual representation of data types like <code class="codeph">OCINumber</code> is opaque to client applications, and the data types are manipulated with a set of predefined functions. This allows the internal representation to change to accommodate future enhancements without breaking user code.</p>
</li>
<li>
<p>The implementation is consistent with object-oriented paradigms in which class implementation is hidden and only the required operations are exposed.</p>
</li>
<li>
<p>This implementation can have advantages for programmers. Consider writing a C program to manipulate Oracle number variables without losing the accuracy provided by Oracle numbers. To do this operation in Oracle Database Release 7, you would have had to issue a &#34;<code class="codeph">SELECT ... FROM DUAL</code>&#34; statement. In later releases, this is accomplished by invoking the <code class="codeph">OCINumber*()</code> functions.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16836"></a><a id="LNOCI16835"></a>
<div class="props_rev_3"><a id="GUID-23C8572F-ACCF-4FEB-AA70-AC08FFBDC29C"></a>
<h2 id="LNOCI-GUID-23C8572F-ACCF-4FEB-AA70-AC08FFBDC29C" class="sect2">About Manipulating C Data Types with OCI</h2>
<div>
<p>Shows how you can manipulate C data types with OCI and shows the various function prefixes, along with example function names and the data types on which the functions operate.</p>
<p>In an OCI application, the manipulation of data may be as simple as adding together two integer variables and storing the result in a third variable:</p>
<pre dir="ltr">int    int_1, int_2, sum;
...
/* some initialization occurs */
...
sum = int_1 + int_2;
</pre>
<p>The C language provides a set of predefined operations on simple types such as <code class="codeph">integer</code>. However, the C data types listed in <a href="oci15ott.htm#GUID-FC45BE3C-C48C-427C-A60B-7B7658A42AD6__CIHEBCFC" title="This table has 3 columns. Column 1 is the object attribute type, column 2 is its corresponding C mapping, and column 3 is its corresponding OCITypeCode value.">Table 15-1</a> are not simple C primitives. Types such as <code class="codeph">OCIString</code> and <code class="codeph">OCINumber</code> are actually structs with a specific Oracle-defined internal structure. It is not possible to simply add together two <code class="codeph">OCINumber</code>s and store the value in the third.</p>
<p>The following is not valid:</p>
<pre dir="ltr">OCINumber    num_1, num_2, sum;
...
/* some initialization occurs */
...
sum = num_1 + num_2;           /* NOT A VALID OPERATION */
</pre>
<p>The OCI data type mapping and manipulation functions are provided to enable you to perform operations on these new data types. For example, the preceding addition of <code class="codeph">OCINumber</code>s could be accomplished as follows, using the <code class="codeph">OCINumberAdd()</code> function:</p>
<pre dir="ltr">OCINumber    num_1, num_2, sum;
...
/* some initialization occurs */
...
OCINumberAdd(errhp, &amp;num_1, &amp;num_2, &amp;sum): /* errhp is error handle */
</pre>
<p>OCI provides functions to operate on each of the new data types. The names of the functions provide information about the data types on which they operate. The first three letters, <span class="italic">OCI</span>, indicate that the function is part of OCI. The next part of the name indicates the data type on which the function operates. <a href="oci12oty.htm#GUID-23C8572F-ACCF-4FEB-AA70-AC08FFBDC29C__BGBICHGB" title="This table 3 columns. Column 1 is the OCI function prefix name, column 2 is its corresponding example OCI function name, and column 3 are the data types on which the OCI function operates.">Table 12-1</a> shows the various function prefixes, along with example function names and the data types on which the functions operate.</p>
<div class="tblformal" id="GUID-23C8572F-ACCF-4FEB-AA70-AC08FFBDC29C__BGBICHGB">
<p class="titleintable">Table 12-1 Function Prefix Examples</p>
<table class="cellalignment6175" title="Function Prefix Examples" summary="This table 3 columns. Column 1 is the OCI function prefix name, column 2 is its corresponding example OCI function name, and column 3 are the data types on which the OCI function operates.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6168" id="d133536e1259">Function Prefix</th>
<th class="cellalignment6220" id="d133536e1262">Example</th>
<th class="cellalignment6201" id="d133536e1265">Operates on</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1270" headers="d133536e1259">
<pre dir="ltr">OCIColl
</pre></td>
<td class="cellalignment6221" headers="d133536e1270 d133536e1262">
<pre dir="ltr"><a href="oci19map001.htm#GUID-B28B3D65-EB7B-44BD-ADBA-DAC0C21DE90F" title="Gets a pointer to the element at the given index.">OCICollGetElem()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1270 d133536e1265">
<pre dir="ltr">OCIColl, OCIIter, OCITable, OCIArray
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1285" headers="d133536e1259">
<pre dir="ltr">OCIDate
</pre></td>
<td class="cellalignment6221" headers="d133536e1285 d133536e1262">
<pre dir="ltr"><a href="oci19map002.htm#GUID-42422C47-805F-4EAA-BF44-E6DE6164082E">OCIDateDaysBetween()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1285 d133536e1265">
<pre dir="ltr">OCIDate
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1297" headers="d133536e1259">
<pre dir="ltr">OCIDateTime
</pre></td>
<td class="cellalignment6221" headers="d133536e1297 d133536e1262">
<pre dir="ltr"><a href="oci19map002.htm#GUID-BD2F6432-81FF-4CD6-9C3D-85E401894528">OCIDateTimeSubtract()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1297 d133536e1265">
<pre dir="ltr">OCIDate, OCIDateTime
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1309" headers="d133536e1259">
<pre dir="ltr">OCIInterval
</pre></td>
<td class="cellalignment6221" headers="d133536e1309 d133536e1262">
<pre dir="ltr"><a href="oci19map002.htm#GUID-DC306081-C4C3-48F5-818D-4C02DD945192">OCIIntervalToText()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1309 d133536e1265">
<pre dir="ltr">OCIInterval
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1321" headers="d133536e1259">
<pre dir="ltr">OCIIter
</pre></td>
<td class="cellalignment6221" headers="d133536e1321 d133536e1262">
<pre dir="ltr"><a href="oci19map001.htm#GUID-B75C3D43-507F-4D61-8390-9856FF0C7D81">OCIIterInit()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1321 d133536e1265">
<pre dir="ltr">OCIIter
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1333" headers="d133536e1259">
<pre dir="ltr">OCINumber
</pre></td>
<td class="cellalignment6221" headers="d133536e1333 d133536e1262">
<pre dir="ltr"><a href="oci19map003.htm#GUID-F3DC6DF6-9110-4BAC-AB97-DC604CA04BCD" title="Adds a NUMBER to another NUMBER.">OCINumberAdd()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1333 d133536e1265">
<pre dir="ltr">OCINumber
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1354" headers="d133536e1259">
<pre dir="ltr">OCIRaw
</pre></td>
<td class="cellalignment6221" headers="d133536e1354 d133536e1262">
<pre dir="ltr"><a href="oci19map004.htm#GUID-7D757B00-DF25-4F61-A3DF-8C72F18FDC9E">OCIRawResize()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1354 d133536e1265">
<pre dir="ltr">OCIRaw *
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1366" headers="d133536e1259">
<pre dir="ltr">OCIRef
</pre></td>
<td class="cellalignment6221" headers="d133536e1366 d133536e1262">
<pre dir="ltr"><a href="oci19map005.htm#GUID-14FAE208-53C4-4542-BD81-1A2093D2AD93">OCIRefAssign()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1366 d133536e1265">
<pre dir="ltr">OCIRef *
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1378" headers="d133536e1259">
<pre dir="ltr">OCIString
</pre></td>
<td class="cellalignment6221" headers="d133536e1378 d133536e1262">
<pre dir="ltr"><a href="oci19map006.htm#GUID-DBDAB2D9-4E78-4752-85B6-55D30CA6AF30">OCIStringSize()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1378 d133536e1265">
<pre dir="ltr">OCIString *
</pre></td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6172" id="d133536e1390" headers="d133536e1259">
<pre dir="ltr">OCITable
</pre></td>
<td class="cellalignment6221" headers="d133536e1390 d133536e1262">
<pre dir="ltr"><a href="oci19map007.htm#GUID-39B3CE36-117E-4ACB-8FD2-D24A660D32E1">OCITableLast()</a>
</pre></td>
<td class="cellalignment6204" headers="d133536e1390 d133536e1265">
<pre dir="ltr">OCITable *
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The structure of each of the data types is described later in this chapter, along with a list of the functions that manipulate that type.</p>
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-6FF2A269-FDFB-48CF-88C5-B0D9C5B137FC">Precision of Oracle Number Operations</a>.</p>
</div>
<a id="LNOCI16837"></a>
<div class="props_rev_3"><a id="GUID-6FF2A269-FDFB-48CF-88C5-B0D9C5B137FC"></a>
<h3 id="LNOCI-GUID-6FF2A269-FDFB-48CF-88C5-B0D9C5B137FC" class="sect3">Precision of Oracle Number Operations</h3>
<div>
<p>Oracle numbers have a precision of 38 decimal digits. All Oracle number operations are accurate to the full precision, with the following exceptions:</p>
<ul style="list-style-type: disc;">
<li>
<p>Inverse trigonometric functions are accurate to 28 decimal digits.</p>
</li>
<li>
<p>Other transcendental functions, including trigonometric functions, are accurate to approximately 37 decimal digits.</p>
</li>
<li>
<p>Conversions to and from native floating-point types have the precision of the relevant floating-point type, not to exceed 38 decimal digits.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16838"></a>
<div class="props_rev_3"><a id="GUID-97999BC9-BC69-44AE-ACE1-CD077BAC37D0"></a>
<h2 id="LNOCI-GUID-97999BC9-BC69-44AE-ACE1-CD077BAC37D0" class="sect2">Date (OCIDate)</h2>
<div>
<p>The Oracle date format is mapped in C by the <code class="codeph">OCIDate</code> type, which is an opaque C struct. Elements of the struct represent the year, month, day, hour, minute, and second of the date.</p>
<p>The specific elements can be set and retrieved using the appropriate OCI functions.</p>
<p>The <code class="codeph">OCIDate</code> data type can be bound or defined directly using the external typecode <code class="codeph">SQLT_ODT</code> in the bind or define call.</p>
<p>Unless otherwise specified, the term <span class="italic">date</span> in these function calls refers to a value of type <code class="codeph">OCIDate</code>.</p>
<div class="infoboxnotealso" id="GUID-97999BC9-BC69-44AE-ACE1-CD077BAC37D0__GUID-BDD13386-D4D1-4FB2-9911-B12F62616D7E">
<p class="notep1">See Also:</p>
<p><a href="oci19map.htm#GUID-B94C677C-E38D-4231-BF8C-DCDC203BAEF5" title="This chapter describes the OCI data type mapping and manipulation functions.">OCI Data Type Mapping and Manipulation Functions</a> for the prototypes and descriptions of all the functions</p>
</div>
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-D2E1D482-F2CD-4D26-AB01-FF28AA3117B2">Date Example</a>.</p>
</div>
<a id="LNOCI72707"></a><a id="LNOCI16839"></a>
<div class="props_rev_3"><a id="GUID-D2E1D482-F2CD-4D26-AB01-FF28AA3117B2"></a>
<h3 id="LNOCI-GUID-D2E1D482-F2CD-4D26-AB01-FF28AA3117B2" class="sect3">Date Example</h3>
<div>
<div class="section">
<p><a href="oci12oty.htm#GUID-D2E1D482-F2CD-4D26-AB01-FF28AA3117B2__BGBFJEFJ">Example 12-1</a> provides examples of how to manipulate an attribute of type <code class="codeph">OCIDate</code> using OCI calls. For this example, assume that <code class="codeph">OCIEnv</code> and <code class="codeph">OCIError</code> have been initialized as described in <span class="q">&#34;<a href="oci02bas.htm#GUID-BA2B78A2-A855-4116-8ADC-13BFA1ADEAB3" title="This section describes how to initialize the OCI environment, establish a connection to a server, and authorize a user to perform actions against the database.">OCI Environment Initialization</a>&#34;</span>. See <span class="q">&#34;<a href="oci14oca.htm#GUID-ACA41D5E-CA18-4526-8723-66E4B7BAAEA1" title="This section describes the most important functions that the object cache provides to operate on object copies.">Object Cache Operations</a>&#34;</span> for information about pinning.</p>
<p>The output is:</p>
<pre dir="ltr">For: FRIDAY   , OCTOBER   05, 1990
The last day of the month is: WEDNESDAY, OCTOBER   31, 1990
The next Wednesday is: WEDNESDAY, OCTOBER   10, 1990
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-D2E1D482-F2CD-4D26-AB01-FF28AA3117B2__BGBFJEFJ">
<p class="titleinexample">Example 12-1 Manipulating an Attribute of Type OCIDate</p>
<pre dir="ltr">#define FMT &#34;DAY, MONTH DD, YYYY&#34;
#define LANG &#34;American&#34;
struct person
{
OCIDate start_date;
};
typedef struct person person;

OCIError *err;
person *tim;
sword status;                      /* error status */
uword invalid;
OCIDate last_day, next_day;
text buf[100], last_day_buf[100], next_day_buf[100];
ub4 buflen = sizeof(buf);

/* Pin tim person object in the object cache. */
/*  For this example, assume that
/* tim is pointing to the pinned object. */
/* set the start date of tim */

OCIDateSetTime(&amp;tim-&gt;start_date,8,0,0);
OCIDateSetDate(&amp;tim-&gt;start_date,1990,10,5);

/* check if the date is valid */
if (OCIDateCheck(err, &amp;tim-&gt;start_date, &amp;invalid) != OCI_SUCCESS)
/* error handling code */

if (invalid)
/* error handling code */

/* get the last day of start_date&#39;s month */
if (OCIDateLastDay(err, &amp;tim-&gt;start_date, &amp;last_day) != OCI_SUCCESS)
/* error handling code */

/* get date of next named day */
if (OCIDateNextDay(err, &amp;tim-&gt;start_date, &#34;Wednesday&#34;,    strlen(&#34;Wednesday&#34;),
&amp;next_day) != OCI_SUCCESS)
/* error handling code */
/* convert dates to strings and print the information */
/* first convert the date itself*/
buflen = sizeof(buf);
if (OCIDateToText(err, &amp;tim-&gt;start_date, FMT, sizeof(FMT)-1, LANG,
    sizeof(LANG)-1,             &amp;buflen, buf) != OCI_SUCCESS)
/* error handling code */

/* now the last day of the month */
buflen = sizeof(last_day_buf);
if (OCIDateToText(err, &amp;last_day, FMT, sizeof(FMT)-1, LANG,    sizeof(LANG)-1,
&amp;buflen, last_day_buf) != OCI_SUCCESS)
/* error handling code */

/* now the first Wednesday after this date */
buflen = sizeof(next_day_buf);
if (OCIDateToText(err, &amp;next_day, FMT, sizeof(FMT)-1, LANG,
   sizeof(LANG)-1, &amp;buflen, next_day_buf) != OCI_SUCCESS)
/* error handling code */

/* print the information */
printf(&#34;For: %s\n&#34;, buf);
printf(&#34;The last day of the month is: %s\n&#34;, last_day_buf);
printf(&#34;The next Wednesday is: %s\n&#34;, next_day_buf);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNOCI16841"></a><a id="LNOCI16840"></a>
<div class="props_rev_3"><a id="GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE"></a>
<h2 id="LNOCI-GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE" class="sect2">Datetime and Interval (OCIDateTime, OCIInterval)</h2>
<div>
<p>The <code class="codeph">OCIDateTime</code> data type is an opaque structure used to represent Oracle time-stamp data types (<code class="codeph">TIMESTAMP</code>, <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code>, <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">LOCAL</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code>) and the <code class="codeph">ANSI DATE</code> data type.</p>
<p>You can set or retrieve the data in these types (that is, year, day, fractional second) using the appropriate OCI functions.</p>
<p>The <code class="codeph">OCIInterval</code> data type is also an opaque structure and is used to represent Oracle interval data types (<code class="codeph">INTERVAL</code> <code class="codeph">YEAR</code> <code class="codeph">TO</code> <code class="codeph">MONTH</code>, <code class="codeph">INTERVAL</code> <code class="codeph">DAY</code> <code class="codeph">TO</code> <code class="codeph">SECOND</code>).</p>
<p>You can bind and define <code class="codeph">OCIDateTime</code> and <code class="codeph">OCIInterval</code> data using the following external typecodes shown in <a href="oci12oty.htm#GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE__BGBJBCDC" title="This table has 3 columns. Column 1 is the datetime or interval OCI data type name, column 2 is the Oracle time-stamp data type name, and column 3 is the corresponding external typecode for binding and defining.">Table 12-2</a> in the bind or define call.</p>
<div class="tblformal" id="GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE__BGBJBCDC">
<p class="titleintable">Table 12-2 Binding and Defining Datetime and Interval Data Types</p>
<table class="cellalignment6175" title="Binding and Defining Datetime and Interval Data Types" summary="This table has 3 columns. Column 1 is the datetime or interval OCI data type name, column 2 is the Oracle time-stamp data type name, and column 3 is the corresponding external typecode for binding and defining.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6220" id="d133536e2196">OCI Data Type</th>
<th class="cellalignment6212" id="d133536e2199">Type of Data</th>
<th class="cellalignment6178" id="d133536e2202">External Typecode for Binding/Defining</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6221" id="d133536e2207" headers="d133536e2196">
<pre dir="ltr">OCIDateTime
</pre></td>
<td class="cellalignment6214" headers="d133536e2207 d133536e2199">
<p>ANSI DATE</p>
</td>
<td class="cellalignment6181" headers="d133536e2207 d133536e2202">
<p>SQLT_DATE</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6221" id="d133536e2217" headers="d133536e2196">
<pre dir="ltr">OCIDateTime
</pre></td>
<td class="cellalignment6214" headers="d133536e2217 d133536e2199">
<p>TIMESTAMP</p>
</td>
<td class="cellalignment6181" headers="d133536e2217 d133536e2202">
<p>SQLT_TIMESTAMP</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6221" id="d133536e2227" headers="d133536e2196">
<pre dir="ltr">OCIDateTime
</pre></td>
<td class="cellalignment6214" headers="d133536e2227 d133536e2199">
<p>TIMESTAMP WITH TIME ZONE</p>
</td>
<td class="cellalignment6181" headers="d133536e2227 d133536e2202">
<p>SQLT_TIMESTAMP_TZ</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6221" id="d133536e2237" headers="d133536e2196">
<pre dir="ltr">OCIDateTime
</pre></td>
<td class="cellalignment6214" headers="d133536e2237 d133536e2199">
<p>TIMESTAMP WITH LOCAL TIME ZONE</p>
</td>
<td class="cellalignment6181" headers="d133536e2237 d133536e2202">
<p>SQLT_TIMESTAMP_LTZ</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6221" id="d133536e2247" headers="d133536e2196">
<pre dir="ltr">OCIInterval
</pre></td>
<td class="cellalignment6214" headers="d133536e2247 d133536e2199">
<p>INTERVAL YEAR TO MONTH</p>
</td>
<td class="cellalignment6181" headers="d133536e2247 d133536e2202">
<p>SQLT_INTERVAL_YM</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6221" id="d133536e2257" headers="d133536e2196">
<pre dir="ltr">OCIInterval
</pre></td>
<td class="cellalignment6214" headers="d133536e2257 d133536e2199">
<p>INTERVAL DAY TO SECOND</p>
</td>
<td class="cellalignment6181" headers="d133536e2257 d133536e2202">
<p>SQLT_INTERVAL_DS</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>In general, functions that operate on <code class="codeph">OCIDateTime</code> data are also valid for <code class="codeph">OCIDate</code> data.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-4CE74470-CF8E-44E0-8984-2B154D0E29AC">About Datetime Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-D385A7B7-BDC8-4542-B307-95FE42E6C185">Datetime Example</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-002B17F4-16C6-48DD-AD3C-4609078312C1" title="Lists and describes the interval functions.">About Interval Functions</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE__GUID-4863DB1F-C8E3-498C-8EF5-A7B114334EF4">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-4CE74470-CF8E-44E0-8984-2B154D0E29AC__BGBFHBDD" title="This table has 2 columns. Column 1 is the OCI datetime function name and column 2 describes its purpose.">Table 12-3</a> and <a href="oci12oty.htm#GUID-002B17F4-16C6-48DD-AD3C-4609078312C1__BGBDAIGI" title="This table has 2 columns. Column 1 is the OCI interval function name and column 2 describes its purpose.">Table 12-4</a> for information about OCI functions that operate on datetime and interval data</p>
</li>
<li>
<p><a href="oci19map002.htm#GUID-32FD5ADE-158D-4603-A693-91798A1BD467" title="Converts a character string to a date type according to the specified format.Converts the given string to an Oracle datetime type in the OCIDateTime descriptor, according to the specified format.Converts the given date to a string according to the specified format.Converts a date type to a character string.Converts a date from one time zone to another.">OCI Date, Datetime, and Interval Functions</a> for more detailed information about datetime and interval functions</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16843"></a><a id="LNOCI16842"></a>
<div class="props_rev_3"><a id="GUID-4CE74470-CF8E-44E0-8984-2B154D0E29AC"></a>
<h3 id="LNOCI-GUID-4CE74470-CF8E-44E0-8984-2B154D0E29AC" class="sect3">About Datetime Functions</h3>
<div>
<p>The following functions operate on <code class="codeph">OCIDateTime</code> values. Some of these functions also perform arithmetic operations on datetime and interval values. Some functions may only work for certain datetime types. The possible types are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLT_DATE</code> - <code class="codeph">DATE</code></p>
</li>
<li>
<p><code class="codeph">SQLT_TIMESTAMP</code> - <code class="codeph">TIMESTAMP</code></p>
</li>
<li>
<p><code class="codeph">SQLT_TIMESTAMP_TZ</code> - <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code></p>
</li>
<li>
<p><code class="codeph">SQLT_TIMESTAMP_LTZ</code> - <code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">LOCAL</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code></p>
</li>
</ul>
<p>See the individual function descriptions listed in <a href="oci12oty.htm#GUID-4CE74470-CF8E-44E0-8984-2B154D0E29AC__BGBFHBDD" title="This table has 2 columns. Column 1 is the OCI datetime function name and column 2 describes its purpose.">Table 12-3</a> for more information about input types that are valid for a particular function.</p>
<div class="tblformal" id="GUID-4CE74470-CF8E-44E0-8984-2B154D0E29AC__BGBFHBDD">
<p class="titleintable">Table 12-3 Datetime Functions</p>
<table class="cellalignment6175" title="Datetime Functions " summary="This table has 2 columns. Column 1 is the OCI datetime function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6233" id="d133536e2537">Function</th>
<th class="cellalignment6192" id="d133536e2540">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2545" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-3B02C8CC-F35C-422F-B35C-47765C998E57">OCIDateTimeAssign()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2545 d133536e2540">
<p>Performs datetime assignment</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2555" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-5C2A63E3-85EC-4346-A636-33B9B4CCBA41">OCIDateTimeCheck()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2555 d133536e2540">
<p>Checks if the given date is valid</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2565" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-5FFD4B08-30E1-461E-8E55-940787D6D8EC">OCIDateTimeCompare()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2565 d133536e2540">
<p>Compares two datetime values</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2575" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-FC053036-BE93-42D7-A82C-4DDB6843E167">OCIDateTimeConstruct()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2575 d133536e2540">
<p>Constructs a datetime descriptor</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2585" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-744793B2-CD2F-47AC-825A-6FF5BEE12BAB">OCIDateTimeConvert()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2585 d133536e2540">
<p>Converts one datetime type to another</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2595" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-16189076-75E9-4B46-B418-89CD8DDB42EA">OCIDateTimeFromArray()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2595 d133536e2540">
<p>Converts an array containing a date to an <code class="codeph">OCIDateTime</code> descriptor</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2608" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-1A453A79-4EEF-462D-B4B3-45820F9EEA4C" title="Converts the given string to an Oracle datetime type in the OCIDateTime descriptor, according to the specified format.">OCIDateTimeFromText()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2608 d133536e2540">
<p>Converts the given string to Oracle datetime type in the <code class="codeph">OCIDateTime</code> descriptor, according to the specified format</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2627" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-FE6F9482-913D-43FD-BE5A-FCD9FA7B83AD">OCIDateTimeGetDate()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2627 d133536e2540">
<p>Gets the date (year, month, day) portion of a datetime value</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2637" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-D935ABA2-DEEA-4ABA-AA9C-C27E3E5AC1FD">OCIDateTimeGetTime()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2637 d133536e2540">
<p>Gets the time (hour, minute, second, fractional second) from datetime value</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2647" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-489C51F6-43DB-43DB-980F-2A42AFAFB332">OCIDateTimeGetTimeZoneName()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2647 d133536e2540">
<p>Gets the time zone name portion of a datetime value</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2657" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-B8DA860B-FD7D-481B-8347-156969B6EE04">OCIDateTimeGetTimeZoneOffset()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2657 d133536e2540">
<p>Gets the time zone (hour, minute) portion of a datetime value</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2668" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-810C6FB3-9B81-4A7C-9B5B-5D2D93B781FA">OCIDateTimeIntervalAdd()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2668 d133536e2540">
<p>Adds an interval to a datetime to produce a resulting datetime</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2678" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-DEDBFEF5-52DD-4036-93FE-C21B6ED4E8A5">OCIDateTimeIntervalSub()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2678 d133536e2540">
<p>Subtracts an interval from a datetime and stores the result in a datetime</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2688" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-BD2F6432-81FF-4CD6-9C3D-85E401894528">OCIDateTimeSubtract()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2688 d133536e2540">
<p>Takes two datetimes as input and stores their difference in an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2698" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-086776F8-1153-417D-ABC6-A864A2A62788">OCIDateTimeSysTimeStamp()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2698 d133536e2540">
<p>Gets the system current date and time as a time stamp with time zone</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2708" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-DCA1CF9E-AF92-42E1-B784-8BFC0C9FF8BE">OCIDateTimeToArray()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2708 d133536e2540">
<p>Converts an <code class="codeph">OCIDateTime</code> descriptor to an array</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2721" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-828401C8-8E88-4C53-A66A-24901CCF93C6" title="Converts the given date to a string according to the specified format.">OCIDateTimeToText()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2721 d133536e2540">
<p>Converts the given date to a string according to the specified format</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6234" id="d133536e2734" headers="d133536e2537">
<p><span class="q">&#34;<a href="oci19map002.htm#GUID-CC4F8554-6B58-4709-814E-37FE57A56959" title="Converts a date from one time zone to another.">OCIDateZoneToZone()</a>&#34;</span></p>
</td>
<td class="cellalignment6193" headers="d133536e2734 d133536e2540">
<p>Converts the date from one time zone to another time zone</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI72708"></a><a id="LNOCI16844"></a>
<div class="props_rev_3"><a id="GUID-D385A7B7-BDC8-4542-B307-95FE42E6C185"></a>
<h3 id="LNOCI-GUID-D385A7B7-BDC8-4542-B307-95FE42E6C185" class="sect3">Datetime Example</h3>
<div>
<div class="section">
<p>The code fragment in <a href="oci12oty.htm#GUID-D385A7B7-BDC8-4542-B307-95FE42E6C185__BGBEHEBE">Example 12-2</a> shows how to use an <code class="codeph">OCIDateTime</code> data type to select data from a <code class="codeph">TIMESTAMP WITH LOCAL TIME ZONE</code> column.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-D385A7B7-BDC8-4542-B307-95FE42E6C185__BGBEHEBE">
<p class="titleinexample">Example 12-2 Manipulating an Attribute of Type OCIDateTime</p>
<pre dir="ltr">...

/* allocate the program variable for storing the data */
OCIDateTime *tstmpltz = (OCIDateTime *)NULL;

/* Col1 is a time stamp with local time zone column */
OraText *sqlstmt = (OraText *)&#34;SELECT col1 FROM foo&#34;;

/* Allocate the descriptor (storage) for the data type */
status = OCIDescriptorAlloc(envhp,(void  **)&amp;tstmpltz, OCI_DTYPE_TIMESTAMP_LTZ,
         0, (void  **)0);
....

status = OCIStmtPrepare (stmthp, errhp, sqlstmt, (ub4)strlen ((char *)sqlstmt),
         (ub4)OCI_NTV_SYNTAX, (ub4)OCI_DEFAULT);

/* specify the define buffer for col1 */
status = OCIDefineByPos(stmthp, &amp;defnp, errhp, 1, &amp;tstmpltz, sizeof(tstmpltz),
         SQLT_TIMESTAMP_LTZ, 0, 0, 0, OCI_DEFAULT);

/* Execute and Fetch */
OCIStmtExecute(svchp, stmthp, errhp, 1, 0,(OCISnapshot *) NULL,
         (OCISnapshot *)NULL, OCI_DEFAULT)

At this point tstmpltz contains a valid time stamp with local time zone data. You
can get the time zone name of the datetime data using:

status = OCIDateTimeGetTimeZoneName(envhp, errhp, tstmpltz, (ub1 *)buf,
         (ub4 *)&amp;buflen);
...
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI16846"></a><a id="LNOCI16845"></a>
<div class="props_rev_3"><a id="GUID-002B17F4-16C6-48DD-AD3C-4609078312C1"></a>
<h3 id="LNOCI-GUID-002B17F4-16C6-48DD-AD3C-4609078312C1" class="sect3">About Interval Functions</h3>
<div>
<p>Lists and describes the interval functions.</p>
<p>The functions listed in <a href="oci12oty.htm#GUID-002B17F4-16C6-48DD-AD3C-4609078312C1__BGBDAIGI" title="This table has 2 columns. Column 1 is the OCI interval function name and column 2 describes its purpose.">Table 12-4</a> operate exclusively on interval data. In some cases it is necessary to specify the type of interval involved. Possible types include:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLT_INTERVAL_YM</code> - interval year to month</p>
</li>
<li>
<p><code class="codeph">SQLT_INTERVAL_DS</code> - interval day to second</p>
</li>
</ul>
<p>See the individual function descriptions for more detailed information.</p>
<div class="tblformal" id="GUID-002B17F4-16C6-48DD-AD3C-4609078312C1__BGBDAIGI">
<p class="titleintable">Table 12-4 Interval Functions</p>
<table class="cellalignment6175" title="Interval Functions " summary="This table has 2 columns. Column 1 is the OCI interval function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6235" id="d133536e3091">Function</th>
<th class="cellalignment6165" id="d133536e3094">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3099" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-0E4AF4DD-5EEB-434D-BA3A-F4EDE7038FF5">OCIIntervalAdd()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3099 d133536e3094">
<p>Adds two intervals to produce a resulting interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3107" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-A218E261-3D40-4B69-AD64-41B697A18C98">OCIIntervalAssign()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3107 d133536e3094">
<p>Copies one interval to another</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3115" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-90BA159E-79AE-47C6-844C-41BB5ADFEBD3">OCIIntervalCheck()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3115 d133536e3094">
<p>Checks the validity of an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3123" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-CCE310E5-C75E-4EDD-9B52-9CED37BDFEFF">OCIIntervalCompare()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3123 d133536e3094">
<p>Compares two intervals</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3131" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-16880D01-45BE-43A3-9CF2-AEAE07B64A6B">OCIIntervalDivide()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3131 d133536e3094">
<p>Divides an interval by an Oracle <code class="codeph">NUMBER</code> to produce an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3142" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-1F8A4B39-9EA5-4CEF-9468-079E4203B68D">OCIIntervalFromNumber()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3142 d133536e3094">
<p>Converts an Oracle <code class="codeph">NUMBER</code> to an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3153" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-247BB9B8-307B-4132-A1ED-5CA658B0DAA6">OCIIntervalFromText()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3153 d133536e3094">
<p>When given an interval string, converts the interval represented by the string</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3161" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-12B19818-0001-42F1-8B2C-FD96B7C3231C">OCIIntervalFromTZ()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3161 d133536e3094">
<p>Returns an interval when given an input string of time zone form</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3169" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-210C4C25-3E8D-4F6D-9502-20B258DACA60">OCIIntervalGetDaySecond()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3169 d133536e3094">
<p>Gets values of day, hour, minute, and second from an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3177" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-665EFBF6-5032-4BD3-B7A3-1C35C2D5A6B7">OCIIntervalGetYearMonth()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3177 d133536e3094">
<p>Gets year and month from an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3185" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-4DBA1745-E675-4774-99AB-DEE2A1FC3788">OCIIntervalMultiply()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3185 d133536e3094">
<p>Multiplies an interval by an Oracle <code class="codeph">NUMBER</code> to produce an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3197" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-303A876B-E1EA-4AF8-8BD1-FC133C5F3F84">OCIIntervalSetDaySecond()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3197 d133536e3094">
<p>Sets day, hour, minute, and second in an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3205" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-07D8A23E-58E2-420B-B4CA-EF37420F7549">OCIIntervalSetYearMonth()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3205 d133536e3094">
<p>Sets year and month in an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3213" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-2D0465BC-B8EA-4F41-B200-587F49D0B2CB">OCIIntervalSubtract()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3213 d133536e3094">
<p>Subtracts two intervals and stores the result in an interval</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3221" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-7B403C69-F618-42A6-94F3-41FB17F7F0AD">OCIIntervalToNumber()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3221 d133536e3094">
<p>Converts an interval to an Oracle <code class="codeph">NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6236" id="d133536e3231" headers="d133536e3091">
<p><a href="oci19map002.htm#GUID-DC306081-C4C3-48F5-818D-4C02DD945192">OCIIntervalToText()</a></p>
</td>
<td class="cellalignment6169" headers="d133536e3231 d133536e3094">
<p>When given an interval, produces a string representing the interval</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-002B17F4-16C6-48DD-AD3C-4609078312C1__GUID-AF3B7B36-03B4-4481-B9D8-8973502E11C2">
<p class="notep1">See Also:</p>
<p><a href="oci19map002.htm#GUID-32FD5ADE-158D-4603-A693-91798A1BD467" title="Converts a character string to a date type according to the specified format.Converts the given string to an Oracle datetime type in the OCIDateTime descriptor, according to the specified format.Converts the given date to a string according to the specified format.Converts a date type to a character string.Converts a date from one time zone to another.">OCI Date, Datetime, and Interval Functions</a> for complete lists of the names and purposes and more detailed information about these functions</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16847"></a>
<div class="props_rev_3"><a id="GUID-AC31C501-8512-427B-9C0E-FF7F85E0C067"></a>
<h2 id="LNOCI-GUID-AC31C501-8512-427B-9C0E-FF7F85E0C067" class="sect2">Number (OCINumber)</h2>
<div>
<p>The <code class="codeph">OCINumber</code> data type is an opaque structure used to represent Oracle numeric data types (<code class="codeph">NUMBER,</code> <code class="codeph">FLOAT,</code> <code class="codeph">DECIMAL</code>, and so forth).</p>
<p>You can bind or define this type using the external typecode <code class="codeph">SQLT_VNU</code> in the bind or define call.</p>
<p>Unless otherwise specified, the term <span class="italic">number</span> in these functions refers to a value of type <code class="codeph">OCINumber</code>.</p>
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41">OCINumber Examples</a>.</p>
<div class="infoboxnotealso" id="GUID-AC31C501-8512-427B-9C0E-FF7F85E0C067__GUID-F6356EFA-D8BB-4105-834B-E393A1088F47">
<p class="notep1">See Also:</p>
<p><a href="oci19map003.htm#GUID-B20FC9D4-B984-4668-999B-1E22387596AF__CEGDBEBG" title="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">Table 19-11</a>for the prototypes and descriptions for all the OCI <code class="codeph">NUMBER</code> functions</p>
</div>
</div>
<a id="LNOCI72709"></a><a id="LNOCI72710"></a><a id="LNOCI16848"></a>
<div class="props_rev_3"><a id="GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41"></a>
<h3 id="LNOCI-GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41" class="sect3">OCINumber Examples</h3>
<div>
<div class="section">
<p>The code fragment in <a href="oci12oty.htm#GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41__BGBGDHIF">Example 12-3</a> shows how to manipulate an attribute of type <code class="codeph">OCINumber</code>. The code fragment in <a href="oci12oty.htm#GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41__BGBBCHEC">Example 12-4</a> shows how to convert values in <code class="codeph">OCINumber</code> format returned from <code class="codeph">OCIDescribeAny()</code> calls to unsigned integers.</p>
<p><a href="oci12oty.htm#GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41__BGBBCHEC">Example 12-4</a> shows how to convert a numeric type returned from an <code class="codeph">OCIDescribeAny()</code> call in <code class="codeph">OCINumber</code> format, such as <code class="codeph">OCI_ATTR_MAX</code> or <code class="codeph">OCI_ATTR_MIN</code>, to an unsigned C integer.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41__BGBGDHIF">
<p class="titleinexample">Example 12-3 Manipulating an Attribute of Type OCINumber</p>
<pre dir="ltr">/* Example 1  */
struct person
{
OCINumber sal;
};
typedef struct person person;
OCIError *err;
person* steve;
person* scott;
person* jason;
OCINumber  *stevesal;
OCINumber  *scottsal;
OCINumber *debsal;
sword   status;
int     inum;
double  dnum;
OCINumber ornum;
text   buffer[21];
ub4     buflen;
sword   result;

/* For this example, assume OCIEnv and OCIError are initialized. */
/* For this example, assume that steve, scott, and jason are pointing to
  person objects that have been pinned in the object cache. */
stevesal = &amp;steve-&gt;sal;
scottsal = &amp;scott-&gt;sal;
debsal = &amp;jason-&gt;sal;

/* initialize steve&#39;s salary to be $12,000 */
inum = 12000;
status = OCINumberFromInt(err, &amp;inum, sizeof(inum), OCI_NUMBER_SIGNED,
    stevesal);
if (status != OCI_SUCCESS)  /* handle error from OCINumberFromInt */;

/* initialize scott&#39;s salary to be the same as steve&#39;s */
OCINumberAssign(err, stevesal, scottsal);

/* initialize jason&#39;s salary to be 20% more than steve&#39;s */
dnum = 1.2;
status = OCINumberFromReal(err, &amp;dnum, sizeof(dnum), &amp;ornum);
if (status != OCI_SUCCESS)  /* handle error from OCINumberFromReal */;
status = OCINumberMul(err, stevesal, &amp;ornum, debsal);
if (status != OCI_SUCCESS)  /* handle error from OCINumberMul */;

/* give scott a 50% raise */
dnum = 1.5;
status = OCINumberFromReal(err, &amp;dnum, sizeof(dnum), &amp;ornum);
if (status != OCI_SUCCESS)  /* handle error from OCINumberFromReal */;
status = OCINumberMul(err, scottsal, &amp;ornum, scottsal);
if (status != OCI_SUCCESS)  /* handle error from OCINumberMul */;

/* double steve&#39;s salary */
status = OCINumberAdd(err, stevesal, stevesal, stevesal);
if (status != OCI_SUCCESS)  /* handle error from OCINumberAdd */;

/* get steve&#39;s salary in integer */
status = OCINumberToInt(err, stevesal, sizeof(inum), OCI_NUMBER_SIGNED, &amp;inum);
if (status != OCI_SUCCESS)  /* handle error from OCINumberToInt */;

/* inum is set to 24000 */
/* get jason&#39;s salary in double */
status = OCINumberToReal(err, debsal, sizeof(dnum), &amp;dnum);
if (status != OCI_SUCCESS)  /* handle error from OCINumberToReal */;

/* dnum is set to 14400 */
/* print scott&#39;s salary as DEM0001&#39;8000.00 */
buflen = sizeof(buffer);
status = OCINumberToText(err, scottsal, (text *)&#34;C0999G9999D99&#34;, 13,
         (text *)&#34;NLS_NUMERIC_CHARACTERS=&#39;.&#39;&#39; NLS_ISO_CURRENCY=&#39;Germany&#39;&#34;,
         54, &amp;buflen, (text *)buffer);
if (status != OCI_SUCCESS)  /* handle error from OCINumberToText */;
printf(&#34;scott&#39;s salary = %s\n&#34;, buffer);

/* compare steve and scott&#39;s salaries */
status = OCINumberCmp(err, stevesal, scottsal, &amp;result);
if (status != OCI_SUCCESS)  /* handle error from OCINumberCmp */;

/* result is positive */
/* read jason&#39;s new salary from string */
status = OCINumberFromText(err, (text *)&#34;48&#39;000.00&#34;, 9, (text
*)&#34;99G999D99&#34;, 9,
    (text *)&#34;NLS_NUMERIC_CHARACTERS=&#39;.&#39;&#39;&#34;, 27, debsal);
if (status != OCI_SUCCESS)  /* handle error from OCINumberFromText */;
/* jason&#39;s salary is now 48000.00 */
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E1683C5B-40A2-4D79-993D-D1B9B9256B41__BGBBCHEC">
<p class="titleinexample">Example 12-4 Converting Values in OCINumber Format Returned from OCIDescribeAny() Calls to Unsigned Integers</p>
<pre dir="ltr">/* Example 2 */
ub4  max_seq_val  = 0;
ub1 *max_valp     = NULL;
ub4  max_val_size;
OCINumber max_val;
    OCINumberSetZero(_errhp, &amp;max_val);
    OCIParam* parmdp = 0;
    status = OCIAttrGet ((void *)_dschp, (ub4)OCI_HTYPE_DESCRIBE, &amp;parmdp, 0,
                         (ub4)OCI_ATTR_PARAM, _errhp);
if (isError (status, _errhp))
{
return 0;
}
status = OCIAttrGet ((void *)parmdp, (ub4)OCI_DTYPE_PARAM, &amp;max_valp,
                     &amp;max_val_size, (ub4)OCI_ATTR_MAX, _errhp);
//create an OCINumber object from the ORACLE NUMBER FORMAT
max_val.OCINumberPart[0] = max_val_size; //set the length byte
memcpy(&amp;max_val.OCINumberPart[1], max_valp, max_val_size); //copy the actual bytes
//now convert max_val to an unsigned C integer, max_seq_val 
status = OCINumberToInt(_errhp, &amp;max_val, sizeof(max_seq_val),
                        OCI_NUMBER_UNSIGNED, &amp;max_seq_val);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNOCI16849"></a>
<div class="props_rev_3"><a id="GUID-A939CF70-1472-479C-81DD-274D8158C6A4"></a>
<h2 id="LNOCI-GUID-A939CF70-1472-479C-81DD-274D8158C6A4" class="sect2">Fixed or Variable-Length String (OCIString)</h2>
<div>
<p>Fixed or variable-length string data is represented to C programs as an <code class="codeph">OCIString *</code>.</p>
<p>The length of the string does not include the NULL character.</p>
<p>For binding and defining variables of type <code class="codeph">OCIString *</code> use the external typecode <code class="codeph">SQLT_VST</code>.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-B509102B-E374-4CA2-BAE7-B98CE0643099">About String Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-E6C88B6F-F9E2-4D58-81D8-F915153B6C48">String Example</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-A939CF70-1472-479C-81DD-274D8158C6A4__GUID-FEDC696D-98CF-48A3-8DD8-AFDDA2A2200E">
<p class="notep1">See Also:</p>
<p><a href="oci19map006.htm#GUID-EB9D30A3-3BF9-47A4-96BB-D214730E903D__CEGGEHJF" title="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">Table 19-16</a> for the prototypes and descriptions for all the string functions</p>
</div>
</div>
<a id="LNOCI16851"></a><a id="LNOCI16850"></a>
<div class="props_rev_3"><a id="GUID-B509102B-E374-4CA2-BAE7-B98CE0643099"></a>
<h3 id="LNOCI-GUID-B509102B-E374-4CA2-BAE7-B98CE0643099" class="sect3">About String Functions</h3>
<div>
<p><a href="oci12oty.htm#GUID-B509102B-E374-4CA2-BAE7-B98CE0643099__BGBJGFCA" title="This table has 2 columns. Column 1 is the OCI string function name and column 2 describes its purpose.">Table 12-5</a> shows the functions that allow the C programmer to manipulate an instance of a string.</p>
<div class="tblformal" id="GUID-B509102B-E374-4CA2-BAE7-B98CE0643099__BGBJGFCA">
<p class="titleintable">Table 12-5 String Functions</p>
<table class="cellalignment6175" title="String Functions " summary="This table has 2 columns. Column 1 is the OCI string function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6237" id="d133536e3996">Function</th>
<th class="cellalignment6198" id="d133536e3999">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d133536e4004" headers="d133536e3996">
<p><span class="q">&#34;<a href="oci19map006.htm#GUID-3F336010-D8C8-4B50-89CB-ABCCA98905DA">OCIStringAllocSize()</a> &#34;</span></p>
</td>
<td class="cellalignment6199" headers="d133536e4004 d133536e3999">
<p>Get allocated size of string memory in code points (Unicode) or bytes</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d133536e4014" headers="d133536e3996">
<p><span class="q">&#34;<a href="oci19map006.htm#GUID-58BC140A-900C-4409-B3D2-C2DC8FB643FF">OCIStringAssign()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d133536e4014 d133536e3999">
<p>Assign one string to another string</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d133536e4024" headers="d133536e3996">
<p><span class="q">&#34;<a href="oci19map006.htm#GUID-96E8375B-9017-4E06-BF85-09C12DF286F4">OCIStringAssignText()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d133536e4024 d133536e3999">
<p>Assign the source text string to the target string</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d133536e4034" headers="d133536e3996">
<p><span class="q">&#34;<a href="oci19map006.htm#GUID-0E1302F7-A32C-46F1-93D7-FB33CF60C24F">OCIStringPtr()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d133536e4034 d133536e3999">
<p>Get a pointer to the text of a given string</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d133536e4044" headers="d133536e3996">
<p><span class="q">&#34;<a href="oci19map006.htm#GUID-CA52A8A4-08BA-4F08-A4A3-79F841F6AE9E">OCIStringResize()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d133536e4044 d133536e3999">
<p>Resize the memory of a given string</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d133536e4054" headers="d133536e3996">
<p><span class="q">&#34;<a href="oci19map006.htm#GUID-DBDAB2D9-4E78-4752-85B6-55D30CA6AF30">OCIStringSize()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d133536e4054 d133536e3999">
<p>Get the size of a given string</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI72711"></a><a id="LNOCI16852"></a>
<div class="props_rev_3"><a id="GUID-E6C88B6F-F9E2-4D58-81D8-F915153B6C48"></a>
<h3 id="LNOCI-GUID-E6C88B6F-F9E2-4D58-81D8-F915153B6C48" class="sect3">String Example</h3>
<div>
<div class="section">
<p><a href="oci12oty.htm#GUID-E6C88B6F-F9E2-4D58-81D8-F915153B6C48__BGBGFBCB">Example 12-5</a> assigns a text string to a string, then gets a pointer to the string part of the string, and the string size, and prints it out.</p>
<p>Note the double indirection used in passing the <span class="italic"><code class="codeph">vstring1</code></span> parameter in <a href="oci19map006.htm#GUID-96E8375B-9017-4E06-BF85-09C12DF286F4">OCIStringAssignText()</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E6C88B6F-F9E2-4D58-81D8-F915153B6C48__BGBGFBCB">
<p class="titleinexample">Example 12-5 Manipulating an Attribute of Type OCIString</p>
<pre dir="ltr">OCIEnv       *envhp;
OCIError     *errhp;
OCIString     *vstring1 = (OCIString *)0;
OCIString     *vstring2 = (OCIString *)0;
text          c_string[20];
text         *text_ptr;
sword        status;

strcpy((char *)c_string, &#34;hello world&#34;);
/* Assign a text string to an OCIString */
status = OCIStringAssignText(envhp, errhp, c_string,
      (ub4)strlen((char *)c_string),&amp;vstring1);
/* Memory for vstring1 is allocated as part of string assignment */

status = OCIStringAssignText(envhp, errhp, (text *)&#34;hello again&#34;,
       (ub4)strlen(&#34;This is a longer string.&#34;),&amp;vstring1);
/* vstring1 is automatically resized to store the longer string */

/* Get a pointer to the string part of vstring1 */
text_ptr = OCIStringPtr(envhp, vstring1);
/* text_ptr now points to &#34;hello world&#34; */
printf(&#34;%s\n&#34;, text_ptr);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNOCI16853"></a>
<div class="props_rev_3"><a id="GUID-2E651841-433D-4EE7-9606-8372E3AB7463"></a>
<h2 id="LNOCI-GUID-2E651841-433D-4EE7-9606-8372E3AB7463" class="sect2">Raw (OCIRaw)</h2>
<div>
<p>Variable-length raw data is represented in C using the <code class="codeph">OCIRaw *</code> data type.</p>
<p>For binding and defining variables of type <code class="codeph">OCIRaw *</code>, use the external typecode <code class="codeph">SQLT_LVB</code>.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-5403C9FE-B363-4D0E-85F3-D2237B729D7D">About Raw Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-5009434E-E8ED-4F4D-B756-580D185E14C1">Raw Example</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-2E651841-433D-4EE7-9606-8372E3AB7463__GUID-B46BC639-4D26-4A67-9FC7-62B5A248035D">
<p class="notep1">See Also:</p>
<p><a href="oci19map004.htm#GUID-3BA14C61-5227-4CAB-90B3-F24DF9069CC0__CEGGJJID" title="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">Table 19-14</a> for the prototypes and descriptions for all the raw functions</p>
</div>
</div>
<a id="LNOCI16855"></a><a id="LNOCI16854"></a>
<div class="props_rev_3"><a id="GUID-5403C9FE-B363-4D0E-85F3-D2237B729D7D"></a>
<h3 id="LNOCI-GUID-5403C9FE-B363-4D0E-85F3-D2237B729D7D" class="sect3">About Raw Functions</h3>
<div>
<p><a href="oci12oty.htm#GUID-5403C9FE-B363-4D0E-85F3-D2237B729D7D__BGBHAFCB" title="This table has 2 columns. Column 1 is the OCI RAW function name and column 2 describes its purpose.">Table 12-6</a> shows the functions that perform OCIRaw operations.</p>
<div class="tblformal" id="GUID-5403C9FE-B363-4D0E-85F3-D2237B729D7D__BGBHAFCB">
<p class="titleintable">Table 12-6 Raw Functions</p>
<table class="cellalignment6175" title="Raw Functions " summary="This table has 2 columns. Column 1 is the OCI RAW function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6192" id="d133536e4589">Function</th>
<th class="cellalignment6233" id="d133536e4592">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d133536e4597" headers="d133536e4589">
<p><span class="q">&#34;<a href="oci19map004.htm#GUID-4856A258-8883-4470-9881-51F27FA050F6">OCIRawAllocSize()</a>&#34;</span></p>
</td>
<td class="cellalignment6234" headers="d133536e4597 d133536e4592">
<p>Get the allocated size of raw memory in bytes</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d133536e4607" headers="d133536e4589">
<p><span class="q">&#34;<a href="oci19map004.htm#GUID-3BB4239F-8579-4CC1-B76F-0786BDBAEF9A">OCIRawAssignBytes()</a>&#34;</span></p>
</td>
<td class="cellalignment6234" headers="d133536e4607 d133536e4592">
<p>Assign raw data (ub1 *) to OCIRaw *</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d133536e4617" headers="d133536e4589">
<p><span class="q">&#34;<a href="oci19map004.htm#GUID-27DBFBE0-4511-4B34-8476-B9AC720E3F51">OCIRawAssignRaw()</a>&#34;</span></p>
</td>
<td class="cellalignment6234" headers="d133536e4617 d133536e4592">
<p>Assign one OCIRaw * to another</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d133536e4627" headers="d133536e4589">
<p><span class="q">&#34;<a href="oci19map004.htm#GUID-B05C44C5-7168-438B-AC2A-BD3AD309AAEA">OCIRawPtr()</a>&#34;</span></p>
</td>
<td class="cellalignment6234" headers="d133536e4627 d133536e4592">
<p>Get pointer to raw data</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d133536e4637" headers="d133536e4589">
<p><span class="q">&#34;<a href="oci19map004.htm#GUID-7D757B00-DF25-4F61-A3DF-8C72F18FDC9E">OCIRawResize()</a>&#34;</span></p>
</td>
<td class="cellalignment6234" headers="d133536e4637 d133536e4592">
<p>Resize memory of variable-length raw data</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6193" id="d133536e4647" headers="d133536e4589">
<p><span class="q">&#34;<a href="oci19map004.htm#GUID-D74E75FA-5985-4DDC-BC25-430B415B8837">OCIRawSize()</a>&#34;</span></p>
</td>
<td class="cellalignment6234" headers="d133536e4647 d133536e4592">
<p>Get size of raw data</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI72712"></a><a id="LNOCI16856"></a>
<div class="props_rev_3"><a id="GUID-5009434E-E8ED-4F4D-B756-580D185E14C1"></a>
<h3 id="LNOCI-GUID-5009434E-E8ED-4F4D-B756-580D185E14C1" class="sect3">Raw Example</h3>
<div>
<div class="section">
<p><a href="oci12oty.htm#GUID-5009434E-E8ED-4F4D-B756-580D185E14C1__BGBJFAHI">Example 12-6</a> shows how to set up a raw data block and obtain a pointer to its data.</p>
<p>Note the double indirection in the call to <a href="oci19map004.htm#GUID-3BB4239F-8579-4CC1-B76F-0786BDBAEF9A">OCIRawAssignBytes()</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-5009434E-E8ED-4F4D-B756-580D185E14C1__BGBJFAHI">
<p class="titleinexample">Example 12-6 Manipulating an Attribute of Type OCIRaw</p>
<pre dir="ltr">OCIEnv      *envhp;
OCIError    *errhp;
sword       status;
ub1         data_block[10000];
ub4         data_block_len = 10000;
OCIRaw      *raw1 = (OCIRaw *) 0;
ub1 *raw1_pointer;

/* Set up the RAW */
/* assume &#39;data_block&#39; has been initialized */
status = OCIRawAssignBytes(envhp, errhp, data_block, data_block_len,
&amp;raw1);

/* Get a pointer to the data part of the RAW */
raw1_pointer = OCIRawPtr(envhp, raw1);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNOCI16857"></a>
<div class="props_rev_3"><a id="GUID-82EEC341-6FE5-45EC-B768-52780CAF5461"></a>
<h2 id="LNOCI-GUID-82EEC341-6FE5-45EC-B768-52780CAF5461" class="sect2">Collections (OCITable, OCIArray, OCIColl, OCIIter)</h2>
<div>
<p>Oracle Database provides two types of collections: variable-length arrays (<code class="codeph">varray</code>s) and nested tables. In C applications, varrays are represented as <code class="codeph">OCIArray *</code>, and nested tables are represented as <code class="codeph">OCITable *</code>.</p>
<p>Both of these data types (along with <code class="codeph">OCIColl</code> and <code class="codeph">OCIIter</code>, described later) are opaque structures.</p>
<p>A variety of generic collection functions enable you to manipulate collection data. You can use these functions on both varrays and nested tables. In addition, there is a set of functions specific to nested tables.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-0225267B-286D-4295-92CF-0FBE5B3EEF25" title="Oracle Database provides two types of collections: variable-length arrays (varrays) and nested tables.">Generic Collection Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-69278F10-7CF3-4549-848D-72B0E75E8B61">About Collection Data Manipulation Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-E8FFB2D1-5CF0-4A60-8F79-2F0DF47B8808">About Collection Scanning Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-2FCDA745-15CA-48B6-9A35-0897740632C5">Varray/Collection Iterator Example</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6" title="As its name implies, one table may be nested, or contained within another, as a variable, attribute, parameter, or column.">About Nested Table Manipulation Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6" title="As its name implies, one table may be nested, or contained within another, as a variable, attribute, parameter, or column.">About Nested Table Manipulation Functions</a></p>
</li>
</ul>
</div>
<p>You can allocate an instance of a varray or nested table using <code class="codeph">OCIObjectNew()</code> and free it using <code class="codeph">OCIObjectFree()</code>.</p>
<div class="infoboxnotealso" id="GUID-82EEC341-6FE5-45EC-B768-52780CAF5461__GUID-5367E50D-C506-4CC3-B72B-95CA498AE38C">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6" title="As its name implies, one table may be nested, or contained within another, as a variable, attribute, parameter, or column.">About Nested Table Manipulation Functions</a></p>
</li>
<li>
<p><a href="oci18nav004.htm#GUID-2EFD6F01-A02F-4C5B-B20F-1EF841249056" title="Creates a standalone instance.">OCIObjectNew()</a></p>
</li>
<li>
<p><a href="oci18nav005.htm#GUID-0814B033-C25C-4B4C-8968-4C0B86C2E744">OCIObjectFree()</a></p>
</li>
<li>
<p><a href="oci19map001.htm#GUID-4DDCED9C-3D56-4BA0-89FA-63C1BBB43F4D" title="Gets a pointer to the element at the given index.">OCI Collection and Iterator Functions</a> for the prototypes and descriptions for these functions</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16858"></a>
<div class="props_rev_3"><a id="GUID-0225267B-286D-4295-92CF-0FBE5B3EEF25"></a>
<h3 id="LNOCI-GUID-0225267B-286D-4295-92CF-0FBE5B3EEF25" class="sect3">Generic Collection Functions</h3>
<div>
<p>Oracle Database provides two types of collections: variable-length arrays (varrays) and nested tables.</p>
<p>Both varrays and nested tables can be viewed as subtypes of a generic collection type.</p>
<p>In C, a generic collection is represented as <code class="codeph">OCIColl *</code>, a varray is represented as <code class="codeph">OCIArray *</code>, and a nested table is represented as <code class="codeph">OCITable *</code><span class="italic">.</span> Oracle provides a set of functions to operate on generic collections (such as <code class="codeph">OCIColl *</code>). These functions start with the prefix <code class="codeph">OCIColl</code>, as in <code class="codeph">OCICollGetElem()</code>. The <code class="codeph">OCIColl*()</code> functions can also be called to operate on varrays and nested tables.</p>
<p>The generic collection functions are grouped into two main categories:</p>
<ul style="list-style-type: disc;">
<li>
<p>Manipulating varray or nested table data</p>
</li>
<li>
<p>Scanning through a collection with a collection iterator</p>
</li>
</ul>
<p>The generic collection functions represent a complete set of functions for manipulating varrays. Additional functions are provided to operate specifically on nested tables. They are identified by the prefix <code class="codeph">OCITable</code>, as in <code class="codeph">OCITableExists().</code></p>
<div class="infobox-note" id="GUID-0225267B-286D-4295-92CF-0FBE5B3EEF25__GUID-894F725A-E43E-4836-ACFB-425A2C904377">
<p class="notep1">Note:</p>
<p>Indexes passed to collection functions are zero-based.</p>
</div>
<div class="infoboxnotealso" id="GUID-0225267B-286D-4295-92CF-0FBE5B3EEF25__GUID-44642667-D909-4D30-BF34-6053FF78D378">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci19map007.htm#GUID-8103EFB5-CB80-417A-9644-30A09137E41F">OCITableExists()</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6" title="As its name implies, one table may be nested, or contained within another, as a variable, attribute, parameter, or column.">About Nested Table Manipulation Functions</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16860"></a><a id="LNOCI16859"></a>
<div class="props_rev_3"><a id="GUID-69278F10-7CF3-4549-848D-72B0E75E8B61"></a>
<h3 id="LNOCI-GUID-69278F10-7CF3-4549-848D-72B0E75E8B61" class="sect3">About Collection Data Manipulation Functions</h3>
<div>
<p><a href="oci12oty.htm#GUID-69278F10-7CF3-4549-848D-72B0E75E8B61__BGBIHHEI" title="This table has 2 columns. Column 1 is the OCI collection function name and column 2 describes its purpose.">Table 12-7</a> shows the generic functions that manipulate collection data.</p>
<div class="tblformal" id="GUID-69278F10-7CF3-4549-848D-72B0E75E8B61__BGBIHHEI">
<p class="titleintable">Table 12-7 Collection Functions</p>
<table class="cellalignment6175" title="Collection Functions " summary="This table has 2 columns. Column 1 is the OCI collection function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6188" id="d133536e5501">Function</th>
<th class="cellalignment6239" id="d133536e5504">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5509" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-1F50303F-38EB-4CF5-A333-A75E01255585">OCICollAppend()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5509 d133536e5504">
<p>Append an element to the end of a collection</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5519" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-35E6A810-6CF7-4446-81F5-AC8A65BA4593">OCICollAssign()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5519 d133536e5504">
<p>Assign one collection to another</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5529" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-BDA5C09D-9470-4204-9A56-3070F64D8E91">OCICollAssignElem()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5529 d133536e5504">
<p>Assign element at given index</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5539" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-B28B3D65-EB7B-44BD-ADBA-DAC0C21DE90F" title="Gets a pointer to the element at the given index.">OCICollGetElem()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5539 d133536e5504">
<p>Get pointer to an element when given its index</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5552" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-AFEC5BFB-1AEF-435E-A2FE-38D8B34CE36F">OCICollGetElemArray()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5552 d133536e5504">
<p>Get array of elements from a collection</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5562" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-9962E0B5-587C-4FCC-BD73-09058C820658">OCICollIsLocator()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5562 d133536e5504">
<p>Indicate whether a collection is locator-based or not</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5572" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-848C1BF1-B0AD-47DF-9B80-9DA7A4020019">OCICollMax()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5572 d133536e5504">
<p>Get upper bound of collection</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5582" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-B8F6665F-12F1-43DB-A27E-82A2A655D701">OCICollSize()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5582 d133536e5504">
<p>Get current size of collection</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e5592" headers="d133536e5501">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-1AC632AC-97AA-4E38-BF50-6460D3929F96">OCICollTrim()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e5592 d133536e5504">
<p>Trim <span class="italic">n</span> elements from the end of the collection</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI16862"></a><a id="LNOCI16861"></a>
<div class="props_rev_3"><a id="GUID-E8FFB2D1-5CF0-4A60-8F79-2F0DF47B8808"></a>
<h3 id="LNOCI-GUID-E8FFB2D1-5CF0-4A60-8F79-2F0DF47B8808" class="sect3">About Collection Scanning Functions</h3>
<div>
<p><a href="oci12oty.htm#GUID-E8FFB2D1-5CF0-4A60-8F79-2F0DF47B8808__BGBIJHJD" title="This table has 2 columns. Column 1 is the OCI collection scanning function name and column 2 describes its purpose.">Table 12-8</a> shows the generic functions that enable you to scan collections with a collection iterator. The iterator is of type <code class="codeph">OCIIter</code>, and is created by first calling <a href="oci19map001.htm#GUID-A76A027E-C93D-415B-879F-251897CE2AB2">OCIIterCreate()</a>.</p>
<div class="tblformal" id="GUID-E8FFB2D1-5CF0-4A60-8F79-2F0DF47B8808__BGBIJHJD">
<p class="titleintable">Table 12-8 Collection Scanning Functions</p>
<table class="cellalignment6175" title="Collection Scanning Functions " summary="This table has 2 columns. Column 1 is the OCI collection scanning function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6159" id="d133536e5782">Function</th>
<th class="cellalignment6158" id="d133536e5785">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6161" id="d133536e5790" headers="d133536e5782">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-A76A027E-C93D-415B-879F-251897CE2AB2">OCIIterCreate()</a>&#34;</span></p>
</td>
<td class="cellalignment6160" headers="d133536e5790 d133536e5785">
<p>Create an iterator to scan the elements of a collection</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6161" id="d133536e5800" headers="d133536e5782">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-CAA61916-750A-4A36-B488-09126DA64FF8">OCIIterDelete()</a>&#34;</span></p>
</td>
<td class="cellalignment6160" headers="d133536e5800 d133536e5785">
<p>Delete a collection iterator</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6161" id="d133536e5810" headers="d133536e5782">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-D7E27E30-7702-4DC7-A061-5B28793D19AA">OCIIterGetCurrent()</a>&#34;</span></p>
</td>
<td class="cellalignment6160" headers="d133536e5810 d133536e5785">
<p>Get a pointer to the current element pointed to by the iterator</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6161" id="d133536e5820" headers="d133536e5782">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-B75C3D43-507F-4D61-8390-9856FF0C7D81">OCIIterInit()</a>&#34;</span></p>
</td>
<td class="cellalignment6160" headers="d133536e5820 d133536e5785">
<p>Initialize an iterator to scan the given collection</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6161" id="d133536e5830" headers="d133536e5782">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-D37A42CE-961A-4A9F-92F0-856B27EEB3E5">OCIIterNext()</a>&#34;</span></p>
</td>
<td class="cellalignment6160" headers="d133536e5830 d133536e5785">
<p>Get a pointer to the next iterator collection element</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6161" id="d133536e5840" headers="d133536e5782">
<p><span class="q">&#34;<a href="oci19map001.htm#GUID-C3F4A12A-59A9-4E31-B9A8-540A9146C884">OCIIterPrev()</a>&#34;</span></p>
</td>
<td class="cellalignment6160" headers="d133536e5840 d133536e5785">
<p>Get pointer to the previous iterator collection element</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI72713"></a><a id="LNOCI16863"></a>
<div class="props_rev_3"><a id="GUID-2FCDA745-15CA-48B6-9A35-0897740632C5"></a>
<h3 id="LNOCI-GUID-2FCDA745-15CA-48B6-9A35-0897740632C5" class="sect3">Varray/Collection Iterator Example</h3>
<div>
<p><a href="oci12oty.htm#GUID-2FCDA745-15CA-48B6-9A35-0897740632C5__BGBHJDDD">Example 12-7</a> creates and uses a collection iterator to scan through a varray.</p>
<div class="example" id="GUID-2FCDA745-15CA-48B6-9A35-0897740632C5__BGBHJDDD">
<p class="titleinexample">Example 12-7 Using Collection Data Manipulation Functions</p>
<pre dir="ltr">OCIEnv       *envhp;
OCIError     *errhp;
text         *text_ptr;
sword        status;
OCIArray     *clients;
OCIString    *client_elem;
OCIIter      *iterator;
boolean      eoc;
void         *elem;
OCIInd       *elemind;

/* Assume envhp, errhp have been initialized */
/* Assume clients points to a varray */

/* Print the elements of clients */
/* To do this, create an iterator to scan the varray */
status = OCIIterCreate(envhp, errhp, clients, &amp;iterator);

/* Get the first element of the clients varray */
printf(&#34;Clients&#39; list:\n&#34;);
status = OCIIterNext(envhp, errhp, iterator, &amp;elem,
                    (void  **) &amp;elemind, &amp;eoc);

while (!eoc &amp;&amp; (status == OCI_SUCCESS))
{
  client_elem = *((OCIString **)elem);
                             /* client_elem points to the string */

 /*
    the element pointer type returned by OCIIterNext() through &#39;elem&#39; is

    the same as that of OCICollGetElem(). See OCICollGetElem() for
    details.  */

  /*
    client_elem points to an OCIString descriptor, so to print it out,
    get a pointer to where the text begins
  */
  text_ptr = OCIStringPtr(envhp, client_elem);

  /*
    text_ptr now points to the text part of the client OCIString, which
is a
NULL-terminated string
  */
  printf(&#34;  %s\n&#34;, text_ptr);
  status = OCIIterNext(envhp, errhp, iterator, &amp;elem,
                      (void  **)&amp;elemind, &amp;eoc);
}

if (status != OCI_SUCCESS)
{
  /* handle error */
}

/* destroy the iterator */
status = OCIIterDelete(envhp, errhp, &amp;iterator);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI16865"></a><a id="LNOCI16864"></a>
<div class="props_rev_3"><a id="GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6"></a>
<h3 id="LNOCI-GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6" class="sect3">About Nested Table Manipulation Functions</h3>
<div>
<p>As its name implies, one table may be <span class="italic">nested,</span> or contained within another, as a variable, attribute, parameter, or column.</p>
<p>Nested tables may have elements deleted by the <code class="codeph">OCITableDelete()</code> function.</p>
<p>For example, suppose a table is created with 10 elements, and <code class="codeph">OCITableDelete()</code> is used to delete elements at index 0 through 4 and 9. The first existing element is now element 5, and the last existing element is element 8.</p>
<p>As noted previously, the generic collection functions may be used to map to and manipulate nested tables. In addition, <a href="oci12oty.htm#GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6__BGBBDIAI" title="This table has 2 columns. Column 1 is the OCI nested table function name and column 2 describes its purpose.">Table 12-9</a> shows the functions that are specific to nested tables. They should not be used on varrays.</p>
<div class="tblformal" id="GUID-DC731A4C-EC9D-4B2A-8485-C1D5D8BF4DE6__BGBBDIAI">
<p class="titleintable">Table 12-9 Nested Table Functions</p>
<table class="cellalignment6175" title="Nested Table Functions " summary="This table has 2 columns. Column 1 is the OCI nested table function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6241" id="d133536e6208">Function</th>
<th class="cellalignment6242" id="d133536e6211">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6243" id="d133536e6216" headers="d133536e6208">
<p><a href="oci19map007.htm#GUID-BA26FA59-EDC6-41C3-9823-7FFFAACE7231">OCITableDelete()</a></p>
</td>
<td class="cellalignment6244" headers="d133536e6216 d133536e6211">
<p>Delete an element at a given index</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6243" id="d133536e6225" headers="d133536e6208">
<p><a href="oci19map007.htm#GUID-8103EFB5-CB80-417A-9644-30A09137E41F">OCITableExists()</a></p>
</td>
<td class="cellalignment6244" headers="d133536e6225 d133536e6211">
<p>Test whether an element exists at a given index</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6243" id="d133536e6234" headers="d133536e6208">
<p><a href="oci19map007.htm#GUID-F4807159-0E8C-4204-AD4C-B08587D813F9">OCITableFirst()</a></p>
</td>
<td class="cellalignment6244" headers="d133536e6234 d133536e6211">
<p>Return the index for the first existing element of a table</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6243" id="d133536e6243" headers="d133536e6208">
<p><a href="oci19map007.htm#GUID-39B3CE36-117E-4ACB-8FD2-D24A660D32E1">OCITableLast()</a></p>
</td>
<td class="cellalignment6244" headers="d133536e6243 d133536e6211">
<p>Return the index for the last existing element of a table</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6243" id="d133536e6252" headers="d133536e6208">
<p><a href="oci19map007.htm#GUID-79A8FB56-EB9E-42EB-83FB-0D0A960B1B4D">OCITableNext()</a></p>
</td>
<td class="cellalignment6244" headers="d133536e6252 d133536e6211">
<p>Return the index for the next existing element of a table</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6243" id="d133536e6261" headers="d133536e6208">
<p><a href="oci19map007.htm#GUID-18F21E03-6827-4A2E-813D-A9F8BA369D0C">OCITablePrev()</a></p>
</td>
<td class="cellalignment6244" headers="d133536e6261 d133536e6211">
<p>Return the index for the previous existing element of a table</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6243" id="d133536e6270" headers="d133536e6208">
<p><a href="oci19map007.htm#GUID-547D71E5-518F-493A-8B5C-66316D534049">OCITableSize()</a></p>
</td>
<td class="cellalignment6244" headers="d133536e6270 d133536e6211">
<p>Return the table size, not including any deleted elements</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-2F38F311-6B75-46F8-B0D1-13816541A78E">Nested Table Element Ordering</a>.</p>
</div>
<a id="LNOCI16866"></a>
<div class="props_rev_3"><a id="GUID-2F38F311-6B75-46F8-B0D1-13816541A78E"></a>
<h4 id="LNOCI-GUID-2F38F311-6B75-46F8-B0D1-13816541A78E" class="sect4">Nested Table Element Ordering</h4>
<div>
<p>When a nested table is fetched into the object cache, its elements are given a transient ordering, numbered from zero to the number of elements, minus 1. For example, a table with 40 elements would be numbered from 0 to 39.</p>
<p>You can use these position ordinals to fetch and assign the values of elements (for example, fetch to element <span class="italic">i</span>, or assign to element <span class="italic">j</span>, where <span class="italic">i</span> and <span class="italic">j</span> are valid position ordinals for the given table).</p>
<p>When the table is copied back to the database, its transient ordering is lost. Delete operations may be performed against elements of the table. Delete operations create transient <span class="italic">holes</span>; that is, they do not change the position ordinals of the remaining table elements.</p>
</div>
</div>
</div>
<a id="LNOCI16867"></a>
<div class="props_rev_3"><a id="GUID-F699786B-DF2F-4D23-9E97-B708C2B3A36E"></a>
<h3 id="LNOCI-GUID-F699786B-DF2F-4D23-9E97-B708C2B3A36E" class="sect3">Nested Table Locators</h3>
<div>
<p>You can retrieve a locator to a nested table. A locator is like a handle to a collection value, and it contains information about the database snapshot that exists at the time of retrieval.</p>
<p>This snapshot information helps the database retrieve the correct instantiation of a collection value at a later time when collection elements are fetched using the locator.</p>
<p>Unlike a LOB locator, a collection locator cannot be used to modify a collection instance; it only locates the correct data. Using the locator enables an application to return a handle to a nested table without having to retrieve the entire collection, which may be quite large.</p>
<p>A user specifies when a table is created if a locator should be returned when a collection column or attribute is fetched, using the <code class="codeph">RETURN</code> <code class="codeph">AS</code> <code class="codeph">LOCATOR</code> specification.</p>
<p>You can use the <code class="codeph">OCICollIsLocator()</code> function to determine whether a collection is locator-based or not.</p>
<div class="infoboxnotealso" id="GUID-F699786B-DF2F-4D23-9E97-B708C2B3A36E__GUID-55F50943-7284-4E68-BB2A-0D404C5C5835">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci19map001.htm#GUID-9962E0B5-587C-4FCC-BD73-09058C820658">OCICollIsLocator()</a></p>
</li>
<li>
<p><a class="olink SQLRF-GUID-F9CE0CC3-13AE-4744-A43C-EAC7A71AAAB6#GUID-F9CE0CC3-13AE-4744-A43C-EAC7A71AAAB6/I2129048" target="_blank" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=SQLRF-GUID-F9CE0CC3-13AE-4744-A43C-EAC7A71AAAB6#GUID-F9CE0CC3-13AE-4744-A43C-EAC7A71AAAB6/I2129048"><span><cite>Oracle Database SQL Language Reference</cite></span></a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="LNOCI16868"></a>
<div class="props_rev_3"><a id="GUID-54C574D2-00A3-4AD0-AC61-BA2B18BE51D0"></a>
<h2 id="LNOCI-GUID-54C574D2-00A3-4AD0-AC61-BA2B18BE51D0" class="sect2">About Multilevel Collection Types</h2>
<div>
<p>The collection element itself can be directly or indirectly another collection type.</p>
<p>Multilevel collection type is the name given to such a top-level collection type.</p>
<p>Multilevel collections have the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>They can be collections of other collection types.</p>
</li>
<li>
<p>They can be collections of objects with collection attributes.</p>
</li>
<li>
<p>They have no limit to the number of nesting levels.</p>
</li>
<li>
<p>They can contain any combination of varrays and nested tables.</p>
</li>
<li>
<p>They can be used as columns in tables.</p>
</li>
</ul>
<p>OCI routines work with multilevel collections. The following routines can return in parameter <span class="italic"><code class="codeph">*elem</code></span> an <code class="codeph">OCIColl*</code>, which you can use in any of the collection routines:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCICollGetElem()</code></p>
</li>
<li>
<p><code class="codeph">OCIIterGetCurrent()</code></p>
</li>
<li>
<p><code class="codeph">OCIIterNext()</code></p>
</li>
<li>
<p><code class="codeph">OCIIterPrev()</code></p>
</li>
</ul>
<p>The following functions take a collection element and add it to an existing collection. Parameter <span class="italic"><code class="codeph">elem</code></span> could be an <code class="codeph">OCIColl*</code> if the element type is another collection:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCICollAssignElem()</code></p>
</li>
<li>
<p><code class="codeph">OCICollAppend()</code></p>
</li>
</ul>
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-26C34316-E63B-4387-929D-30704D16933E">Multilevel Collection Type Example</a>.</p>
<div class="infoboxnotealso" id="GUID-54C574D2-00A3-4AD0-AC61-BA2B18BE51D0__GUID-A21D5FB8-F69A-4D6F-8120-8D34C2BBDC21">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci19map001.htm#GUID-B28B3D65-EB7B-44BD-ADBA-DAC0C21DE90F" title="Gets a pointer to the element at the given index.">OCICollGetElem()</a></p>
</li>
<li>
<p><a href="oci19map001.htm#GUID-D7E27E30-7702-4DC7-A061-5B28793D19AA">OCIIterGetCurrent()</a></p>
</li>
<li>
<p><a href="oci19map001.htm#GUID-D37A42CE-961A-4A9F-92F0-856B27EEB3E5">OCIIterNext()</a></p>
</li>
<li>
<p><a href="oci19map001.htm#GUID-C3F4A12A-59A9-4E31-B9A8-540A9146C884">OCIIterPrev()</a></p>
</li>
<li>
<p><a href="oci19map001.htm#GUID-BDA5C09D-9470-4204-9A56-3070F64D8E91">OCICollAssignElem()</a></p>
</li>
<li>
<p><a href="oci19map001.htm#GUID-1F50303F-38EB-4CF5-A333-A75E01255585">OCICollAppend()</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI72714"></a><a id="LNOCI16869"></a>
<div class="props_rev_3"><a id="GUID-26C34316-E63B-4387-929D-30704D16933E"></a>
<h3 id="LNOCI-GUID-26C34316-E63B-4387-929D-30704D16933E" class="sect3">Multilevel Collection Type Example</h3>
<div>
<div class="section">
<p>The following types and tables are used for <a href="oci12oty.htm#GUID-26C34316-E63B-4387-929D-30704D16933E__BGBFCBDE">Example 12-8</a>.</p>
<pre dir="ltr">type_1 (a NUMBER, b NUMBER)
NT1 TABLE OF type_1
NT2 TABLE OF NT1
</pre>
<p>The code fragment in <a href="oci12oty.htm#GUID-26C34316-E63B-4387-929D-30704D16933E__BGBFCBDE">Example 12-8</a> iterates over the multilevel collection.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-26C34316-E63B-4387-929D-30704D16933E__BGBFCBDE">
<p class="titleinexample">Example 12-8 Using Multilevel Collection Data Manipulation Functions</p>
<pre dir="ltr">...
OCIColl *outer_coll;
OCIColl *inner_coll;
OCIIter *itr1, *itr2;
Type_1 *type_1_instance;
..
/* assume that outer_coll points to a valid coll of type NT2 */
checkerr(errhp, OCIIterCreate(envhp, errhp, outer_coll, &amp;itr1));
for(eoc = FALSE;!OCIIterNext(envhp, errhp, itr1, (void  **) &amp;elem,
                               (void  **) &amp;elem_null, &amp;eoc) &amp;&amp; !eoc;)
{
   inner_coll = (OCIColl *)elem;
   /* iterate over inner collection.. */
   checkerr(errhp, OCIIterCreate(envhp, errhp, inner_coll, &amp;itr2));
   for(eoc2 = FALSE;!OCIIterNext(envhp, errhp, itr2, (void  **)&amp;elem2,
              (void  **) &amp;elem2_null, &amp;eoc2) &amp;&amp; !eoc2;)
       {
        type_1_instance = (Type_1 *)elem2;
        /* use the fields of type_1_instance */
       }
   /* close iterator over inner collection */
   checkerr(errhp, OCIIterDelete(envhp, errhp, &amp;itr2));
}
/* close iterator over outer collection */
checkerr(errhp, OCIIterDelete(envhp, errhp, &amp;itr1));
...
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNOCI16870"></a>
<div class="props_rev_3"><a id="GUID-964A12BB-B8A7-4ECA-ADDE-763CBC766174"></a>
<h2 id="LNOCI-GUID-964A12BB-B8A7-4ECA-ADDE-763CBC766174" class="sect2">REF (OCIRef)</h2>
<div>
<p>A <code class="codeph">REF</code> (reference) is an identifier to an object.</p>
<p>It is an opaque structure that uniquely locates the object. An object may point to another object by way of a <code class="codeph">REF</code>.</p>
<p>In C applications, the <code class="codeph">REF</code> is represented by <code class="codeph">OCIRef*</code>.</p>
<div class="p">This section includes the following topic:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-22D75721-B905-4EF8-AB8E-5AC57DA3EE91">About REF Manipulation Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-D2A5DB37-633A-445D-A300-E49892059AA8">REF Example</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-964A12BB-B8A7-4ECA-ADDE-763CBC766174__GUID-84B7B8DD-E584-4DAA-9C0F-DA34CE3B7CA8">
<p class="notep1">See Also:</p>
<p><a href="oci19map005.htm#GUID-62B64714-2937-40CA-92BF-ECADCD1AB329__CEGIBDHA" title="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">Table 19-15</a> for the prototypes and descriptions for all the <code class="codeph">REF</code> manipulation functions</p>
</div>
</div>
<a id="LNOCI16872"></a><a id="LNOCI16871"></a>
<div class="props_rev_3"><a id="GUID-22D75721-B905-4EF8-AB8E-5AC57DA3EE91"></a>
<h3 id="LNOCI-GUID-22D75721-B905-4EF8-AB8E-5AC57DA3EE91" class="sect3">About REF Manipulation Functions</h3>
<div>
<p><a href="oci12oty.htm#GUID-22D75721-B905-4EF8-AB8E-5AC57DA3EE91__BGBFDGIJ" title="This table has 2 columns. Column 1 is the OCI REF manipulation function name and column 2 describes its purpose.">Table 12-10</a> shows the functions that perform <code class="codeph">REF</code> operations.</p>
<div class="tblformal" id="GUID-22D75721-B905-4EF8-AB8E-5AC57DA3EE91__BGBFDGIJ">
<p class="titleintable">Table 12-10 REF Manipulation Functions</p>
<table class="cellalignment6175" title="REF Manipulation Functions " summary="This table has 2 columns. Column 1 is the OCI REF manipulation function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6188" id="d133536e7425">Function</th>
<th class="cellalignment6239" id="d133536e7428">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e7433" headers="d133536e7425">
<p><span class="q">&#34;<a href="oci19map005.htm#GUID-14FAE208-53C4-4542-BD81-1A2093D2AD93">OCIRefAssign()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e7433 d133536e7428">
<p>Assign one <code class="codeph">REF</code> to another</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e7446" headers="d133536e7425">
<p><span class="q">&#34;<a href="oci19map005.htm#GUID-59DEE850-8716-4F94-97A2-26F5A1210785">OCIRefClear()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e7446 d133536e7428">
<p>Clear or nullify a <code class="codeph">REF</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e7458" headers="d133536e7425">
<p><span class="q">&#34;<a href="oci19map005.htm#GUID-90BFCC31-58CA-4461-B0CF-54AB97FCCDAE">OCIRefFromHex()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e7458 d133536e7428">
<p>Convert a hexadecimal string to a <code class="codeph">REF</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e7470" headers="d133536e7425">
<p><span class="q">&#34;<a href="oci19map005.htm#GUID-3E6FF0F1-00E9-4E72-B9EF-ABE153919082">OCIRefHexSize()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e7470 d133536e7428">
<p>Return the size of a hexadecimal string representation of <code class="codeph">REF</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e7482" headers="d133536e7425">
<p><span class="q">&#34;<a href="oci19map005.htm#GUID-5C5BAE55-4254-4E0E-BEBD-07C2AE6C7AAB">OCIRefIsEqual()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e7482 d133536e7428">
<p>Compare two <code class="codeph">REF</code>s for equality</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e7495" headers="d133536e7425">
<p><span class="q">&#34;<a href="oci19map005.htm#GUID-1DDD8B63-E9EE-46E7-866D-B8EB6355E339">OCIRefIsNull()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e7495 d133536e7428">
<p>Test whether a <code class="codeph">REF</code> is <code class="codeph">NULL</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e7510" headers="d133536e7425">
<p><span class="q">&#34;<a href="oci19map005.htm#GUID-B40E1BE1-7805-4A2B-BB86-00D126B742A3">OCIRefToHex()</a>&#34;</span></p>
</td>
<td class="cellalignment6240" headers="d133536e7510 d133536e7428">
<p>Convert a <code class="codeph">REF</code> to a hexadecimal string</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNOCI72715"></a><a id="LNOCI16873"></a>
<div class="props_rev_3"><a id="GUID-D2A5DB37-633A-445D-A300-E49892059AA8"></a>
<h3 id="LNOCI-GUID-D2A5DB37-633A-445D-A300-E49892059AA8" class="sect3">REF Example</h3>
<div>
<div class="section">
<p><a href="oci12oty.htm#GUID-D2A5DB37-633A-445D-A300-E49892059AA8__BGBBAIHG">Example 12-9</a> tests two <code class="codeph">REF</code>s for <code class="codeph">NULL</code>, compares them for equality, and assigns one <code class="codeph">REF</code> to another. Note the double indirection in the call to <a href="oci19map005.htm#GUID-14FAE208-53C4-4542-BD81-1A2093D2AD93">OCIRefAssign()</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-D2A5DB37-633A-445D-A300-E49892059AA8__BGBBAIHG">
<p class="titleinexample">Example 12-9 Using REF Manipulation Functions</p>
<pre dir="ltr">OCIEnv       *envhp;
OCIError     *errhp;
sword        status;
boolean      refs_equal;
OCIRef       *ref1, *ref2;

/* assume REFs have been initialized to point to valid objects */
/*Compare two REFs for equality */
refs_equal = OCIRefIsEqual(envhp, ref1, ref2);
printf(&#34;After first OCIRefIsEqual:\n&#34;);
if(refs_equal)
   printf(&#34;REFs equal\n&#34;);
else
   printf(&#34;REFs not equal\n&#34;);

/*Assign ref1 to ref2 */
status = OCIRefAssign (envhp, errhp, ref1, &amp;ref2);
if(status != OCI_SUCCESS)
/*error handling*/

/*Compare the two REFs again for equality */
refs_equal = OCIRefIsEqual(envhp, ref1, ref2);
printf(&#34;After second OCIRefIsEqual:\n&#34;);
if(refs_equal)
   printf(&#34;REFs equal\n&#34;);
else
   printf(&#34;REFs not equal\n&#34;);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNOCI16874"></a>
<div class="props_rev_3"><a id="GUID-6A16EF8B-8ACF-4FD8-9C39-EA8A0D14DEC4"></a>
<h2 id="LNOCI-GUID-6A16EF8B-8ACF-4FD8-9C39-EA8A0D14DEC4" class="sect2">Object Type Information Storage and Access</h2>
<div>
<p>The OCI data types and type descriptors are discussed in this section.</p>
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-3D021DDC-A638-41EF-BB61-1CD1B2A33A51">Descriptor Objects</a>.</p>
</div>
<a id="LNOCI16876"></a><a id="LNOCI16875"></a>
<div class="props_rev_3"><a id="GUID-3D021DDC-A638-41EF-BB61-1CD1B2A33A51"></a>
<h3 id="LNOCI-GUID-3D021DDC-A638-41EF-BB61-1CD1B2A33A51" class="sect3">Descriptor Objects</h3>
<div>
<p>When a given type is created with the <code class="codeph">CREATE TYPE</code> statement, it is stored in the server and associated with a type descriptor object (TDO). In addition, the database stores descriptor objects for each data attribute of the type, each method of the type, each parameter of each method, and the results returned by methods. <a href="oci12oty.htm#GUID-3D021DDC-A638-41EF-BB61-1CD1B2A33A51__BGBBFIHG" title="This table has 2 columns. Column 1 is the information type of the descriptor object and column 2 is the associated OCI data type.">Table 12-11</a> lists the OCI data types associated with each type of descriptor object.</p>
<div class="tblformal" id="GUID-3D021DDC-A638-41EF-BB61-1CD1B2A33A51__BGBBFIHG">
<p class="titleintable">Table 12-11 Descriptor Objects</p>
<table class="cellalignment6175" title="Descriptor Objects " summary="This table has 2 columns. Column 1 is the information type of the descriptor object and column 2 is the associated OCI data type.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6188" id="d133536e8065">Information Type</th>
<th class="cellalignment6239" id="d133536e8068">OCI Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e8073" headers="d133536e8065">
<p>Type</p>
</td>
<td class="cellalignment6240" headers="d133536e8073 d133536e8068">
<p>OCIType</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e8080" headers="d133536e8065">
<p>Type Attributes Collection Elements Method Parameters Method Results</p>
</td>
<td class="cellalignment6240" headers="d133536e8080 d133536e8068">
<p>OCITypeElem</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6191" id="d133536e8087" headers="d133536e8065">
<p>Method</p>
</td>
<td class="cellalignment6240" headers="d133536e8087 d133536e8068">
<p>OCITypeMethod</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Several OCI functions (including <a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a> and <a href="oci18nav004.htm#GUID-2EFD6F01-A02F-4C5B-B20F-1EF841249056" title="Creates a standalone instance.">OCIObjectNew()</a>) require a TDO as an input parameter. An application can obtain the TDO by calling <a href="oci18nav006.htm#GUID-3534AABC-E347-4BC7-B220-0CAECDC9ECE7" title="Gets the most current version of an existing TDO.">OCITypeByName()</a>, which gets the type&#39;s TDO in an <code class="codeph">OCIType</code> variable. Once you obtain the TDO, you can pass it, as necessary, to other calls.</p>
</div>
</div>
</div>
<a id="LNOCI16877"></a>
<div class="props_rev_3"><a id="GUID-A728728A-3C8F-4446-874C-A551DE19BD28"></a>
<h2 id="LNOCI-GUID-A728728A-3C8F-4446-874C-A551DE19BD28" class="sect2">AnyType, AnyData, and AnyDataSet Interfaces</h2>
<div>
<p>The AnyType, AnyData, and AnyDataSet interfaces allow you to model self-descriptive data.</p>
<p>You can store heterogeneous data types in the same column and query the type of data in an application.</p>
<p>These definitions are used in the discussion in the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">Persistent types.</span> Types that are created using the SQL statement <code class="codeph">CREATE TYPE</code>. They are stored persistently in the database.</p>
</li>
<li>
<p><span class="italic">Transient types.</span> Anonymous type descriptions that are not stored persistently in the database. They are created by programs as needed. They are useful for exchanging type information, if necessary, between various components of an application in a dynamic fashion.</p>
</li>
<li>
<p><span class="italic">Self-descriptive data.</span> Data encapsulating type information with its actual contents. The <code class="codeph">OCIAnyData</code> data type models such data in OCI. A data value of most SQL types can be converted to an OCIAnyData that can then be converted back to the old data value. The type <code class="codeph">SYS.ANYDATA</code> models such data in SQL or PL/SQL.</p>
</li>
<li>
<p><span class="italic">Self-descriptive dataset.</span> Encapsulation of a set of data instances (all of the same type) along with their type description. They should all have the same type description. The <code class="codeph">OCIDataAnySet</code> data type models this data in OCI. The type <code class="codeph">SYS.ANYDATASET</code> models such data in SQL or PL/SQL.</p>
</li>
</ul>
<p>Interfaces are available in both OCI (C language) and in SQL and PL/SQL for constructing and manipulating these type descriptions and self-descriptive data. The following sections describe the relevant OCI interfaces.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-FCA8FA3E-9018-468B-B722-9444E10838C4" title="You can use the type interfaces to construct named and anonymous transient object types (structured with attributes) and collection types.">About Type Interfaces</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-E84C6D01-023D-4B80-BEEB-250ADDFDDEB2">About OCIAnyData Interfaces</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-FE75A655-DBE6-46B0-A8D1-537991A39BE9">NCHAR Typecodes for OCIAnyData Functions</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-292DFA46-50CD-4578-B4A3-76E3B2CCC7C4" title="An OCIAnyDataSet encapsulates type information and a set of instances of that type. To begin the construction process, call OCIAnyDataSetBeginCreate().">About OCIAnyDataSet Interfaces</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-A728728A-3C8F-4446-874C-A551DE19BD28__GUID-534EBED4-4C87-4F1D-B0B6-7C6F1B0D2463">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci11obj.htm#GUID-8E954104-DBBB-46F7-823B-B29C1E83EFE9" title="Instances of an Oracle type are categorized into persistent objects and transient objects based on their lifetime.">Persistent Objects, Transient Objects, and Values</a></p>
</li>
<li>
<p><a class="olink SQLRF30022" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF30022"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for an overview in the section <span>about Oracle-supplied types</span></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI72716"></a><a id="LNOCI72717"></a><a id="LNOCI16878"></a>
<div class="props_rev_3"><a id="GUID-FCA8FA3E-9018-468B-B722-9444E10838C4"></a>
<h3 id="LNOCI-GUID-FCA8FA3E-9018-468B-B722-9444E10838C4" class="sect3">About Type Interfaces</h3>
<div>
<p>You can use the type interfaces to construct named and anonymous transient object types (structured with attributes) and collection types.</p>
<p>Use the <code class="codeph">OCITypeBeginCreate()</code> call to begin type construction of transient object types and collection types (the typecode parameter determines which one is being constructed).</p>
<p>You must allocate a parameter handle using <code class="codeph">OCIDescriptorAlloc()</code>. Subsequently, you set type information (for attributes of an object type and for the collection element&#39;s type) by using <code class="codeph">OCIAttrSet()</code>. For object types, as shown in <a href="oci12oty.htm#GUID-FCA8FA3E-9018-468B-B722-9444E10838C4__BGBEEFJE">Example 12-10</a>, use <code class="codeph">OCITypeAddAttr()</code> to add the attribute information to the type. After adding information for the last attribute, you must call <code class="codeph">OCITypeEndCreate()</code>.</p>
<p>For collection types, as shown in <a href="oci12oty.htm#GUID-FCA8FA3E-9018-468B-B722-9444E10838C4__BGBBFBFI">Example 12-11</a>, use <code class="codeph">OCITypeSetCollection()</code> to set the information on the collection element type. Subsequently, call <code class="codeph">OCITypeEndCreate()</code> to finish construction.</p>
<p>You can use the <code class="codeph">OCIDescribeAny()</code> call to obtain the <code class="codeph">OCIType</code> corresponding to a persistent type.</p>
<div class="example" id="GUID-FCA8FA3E-9018-468B-B722-9444E10838C4__BGBEEFJE">
<p class="titleinexample">Example 12-10 Using Type Interfaces to Construct Object Types</p>
<pre dir="ltr">OCITypeBeginCreate( ...)        /* Begin Type Creation */
OCIDescriptorAlloc(...)
OCIAttrSet(...)
OCITypeAddAttr(...)             /* Add attribute 1 */
OCIAttrSet(...)
OCITypeAddAttr(...)             /* Add attribute 2 */
...
OCITypeEndCreate(...)           /* End Type Creation */
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-FCA8FA3E-9018-468B-B722-9444E10838C4__BGBBFBFI">
<p class="titleinexample">Example 12-11 Using Type Interfaces to Construct Collection Types</p>
<pre dir="ltr">OCITypeBeginCreate( ...)        /* Begin Type Creation */
OCIDescriptorAlloc(...)
OCIAttrSet(...)
OCITypeSetCollection(...)       /* Set information on collection element */
OCITypeEndCreate(...)           /* End Type Creation */
</pre></div>
<!-- class="example" -->
<div class="section">
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-C954EBEA-D5F7-479B-A646-5250F1690D84">About Creating a Parameter Descriptor for OCIType Calls</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-0EC42E0A-5C04-4760-9940-A1C882BEC941">About Obtaining the OCIType for Persistent Types</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-2903B1B3-1C8F-47CB-8A42-D4366664347B">Type Access Calls</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-8B2E4762-52E0-4162-97D6-D0F00A18F597">Extensions to OCIDescribeAny()</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-FCA8FA3E-9018-468B-B722-9444E10838C4__GUID-CE386BA3-FEBA-4A0B-8CAC-B1152056D341">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci21any001.htm#GUID-27058922-D431-48F0-9751-16CB2C3E8723">OCITypeBeginCreate()</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03" title="Sets the value of an attribute of a handle or a descriptor.">OCIAttrSet()</a></p>
</li>
<li>
<p><a href="oci21any001.htm#GUID-B08C00FB-A9E9-49D7-A881-04A5A56BA082">OCITypeAddAttr()</a></p>
</li>
<li>
<p><a href="oci21any001.htm#GUID-2A09A697-CA56-46B7-80C3-A1E310757C8E">OCITypeEndCreate()</a></p>
</li>
<li>
<p><a href="oci21any001.htm#GUID-F3374E0F-BD26-4675-A643-8087B43DEECC">OCITypeSetCollection()</a></p>
</li>
<li>
<p><a href="oci21any001.htm#GUID-2A09A697-CA56-46B7-80C3-A1E310757C8E">OCITypeEndCreate()</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI16879"></a>
<div class="props_rev_3"><a id="GUID-C954EBEA-D5F7-479B-A646-5250F1690D84"></a>
<h4 id="LNOCI-GUID-C954EBEA-D5F7-479B-A646-5250F1690D84" class="sect4">About Creating a Parameter Descriptor for OCIType Calls</h4>
<div>
<p>You can use the <a href="oci16rel002.htm#GUID-E9EF2766-E078-49A7-B1D1-738E4BA4814F">OCIDescriptorAlloc()</a> call to allocate an <code class="codeph">OCIParam</code> (with the parent handle being the environment handle). Subsequently, you can call <a href="oci16rel002.htm#GUID-3741D7BD-7652-4D7A-8813-AC2AEA8D3B03" title="Sets the value of an attribute of a handle or a descriptor.">OCIAttrSet()</a> with the following allowed attribute types to set relevant type information:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_PRECISION</code></p>
</li>
</ul>
<p>To set numeric precision. Pass a <code class="codeph">(ub1 *)</code> attribute value to the buffer holding the precision value.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_SCALE</code></p>
</li>
</ul>
<p>To set numeric scale. Pass a <code class="codeph">(sb1 *)</code> attribute value to the buffer that is holding the scale value.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_CHARSET_ID</code></p>
</li>
</ul>
<p>To set the character set ID for character types. Pass a <code class="codeph">(ub2 *)</code> attribute value to the buffer holding the char set ID.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_CHARSET_FORM</code></p>
</li>
</ul>
<p>To set the character set form for character types. Pass a <code class="codeph">(ub1 *)</code> attribute value to the buffer holding the character set form value.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_DATA_SIZE</code></p>
</li>
</ul>
<p>Length of <code class="codeph">VARCHAR2</code>, <code class="codeph">RAW</code>, and so on. Pass a <code class="codeph">(ub2 *)</code> attribute value to the buffer holding the length.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_TYPECODE</code></p>
</li>
</ul>
<p>To set typecode. Pass a <code class="codeph">(ub2 *)</code> attribute value to the buffer holding the typecode. This attribute must be set first.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_TDO</code></p>
</li>
</ul>
<p>To set <code class="codeph">OCIType</code> of an object or collection attribute. Pass an <code class="codeph">(OCIType *)</code> attribute value to the <code class="codeph">OCIType</code> corresponding to the attribute. Ensure that the <code class="codeph">OCIType</code> is pinned when this <code class="codeph">OCIParam</code> is used during <code class="codeph">AnyType</code> construction. If it is a transient type attribute, its allocation duration should be at least as much as the top-level <code class="codeph">OCIType</code> being created. Otherwise, an exception is returned.</p>
<ul style="list-style-type: disc;">
<li>
<p>For built-in types, the following typecodes are acceptable (permissible values for <code class="codeph">OCI_ATTR_TYPECODE</code>) for SQL type attributes:</p>
<p><code class="codeph">OCI_TYPECODE_DATE</code>, <code class="codeph">OCI_TYPECODE_NUMBER</code>,</p>
<p><code class="codeph">OCI_TYPECODE_VARCHAR</code>, <code class="codeph">OCI_TYPECODE_RAW</code>,</p>
<p><code class="codeph">OCI_TYPECODE_CHAR</code>, <code class="codeph">OCI_TYPECODE_VARCHAR2</code>,</p>
<p><code class="codeph">OCI_TYPECODE_VARCHAR</code>, <code class="codeph">OCI_TYPECODE_BLOB</code>,</p>
<p><code class="codeph">OCI_TYPECODE_BFILE</code>, <code class="codeph">OCI_TYPECODE_CLOB</code>,</p>
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP</code>, <code class="codeph">OCI_TYPECODE_TIMESTAMP_TZ</code>,</p>
<p><code class="codeph">OCI_TYPECODE_TIMESTAMP_LTZ</code>,</p>
<p><code class="codeph">OCI_TYPECODE_INTERVAL_YM</code>, and <code class="codeph">OCI_TYPECODE_INTERVAL_DS</code>.</p>
</li>
<li>
<p>If the attribute or collection element type is itself another transient type, set <code class="codeph">OCI_ATTR_TYPECODE</code> to <code class="codeph">OCI_TYPECODE_OBJECT</code> or <code class="codeph">OCI_TYPECODE_REF</code> (for <code class="codeph">REF</code>s) or <code class="codeph">OCI_TYPECODE_VARRAY</code> or <code class="codeph">OCI_TYPECODE_TABLE</code> and set the <code class="codeph">OCI_ATTR_TDO</code> to the <code class="codeph">OCIType</code> corresponding to the transient type.</p>
</li>
<li>
<p>For user-defined type attributes, the permissible values for <code class="codeph">OCI_ATTR_TYPECODE</code> are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_TYPECODE_OBJECT</code> (for an Object Type)</p>
</li>
<li>
<p><code class="codeph">OCI_TYPECODE_REF</code> (for a <code class="codeph">REF</code> type)</p>
</li>
<li>
<p>and <code class="codeph">OCI_TYPECODE_VARRAY</code> or <code class="codeph">OCI_TYPECODE_TABLE</code> (for collections)</p>
</li>
</ul>
<p>The <code class="codeph">OCI_ATTR_TDO</code> should be set in these cases to the appropriate user-defined type&#39;s <code class="codeph">OCIType</code>.</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16880"></a>
<div class="props_rev_3"><a id="GUID-0EC42E0A-5C04-4760-9940-A1C882BEC941"></a>
<h4 id="LNOCI-GUID-0EC42E0A-5C04-4760-9940-A1C882BEC941" class="sect4">About Obtaining the OCIType for Persistent Types</h4>
<div>
<p>You can use the <a href="oci16rel003.htm#GUID-AE9F73FB-DCC1-401E-8151-A8A89059163A" title="Describes existing schema and subschema objects.">OCIDescribeAny()</a> call to obtain the <code class="codeph">OCIType</code> corresponding to a persistent type, as in the following example:</p>
<pre dir="ltr">OCIDescribeAny(svchp, errhp. (void  *)&#34;HR.EMPLOYEES&#34;,
               (ub4)strlen(&#34;HR.EMPLOYEES&#34;),
               (ub1)OCI_OTYPE_NAME, (ub1)OCI_DEFAULT, OCI_PTYPE_TYPE, dschp);
</pre>
<p>From the describe handle (<span class="italic"><code class="codeph">dschp</code></span>), you can use <a href="oci16rel002.htm#GUID-FA199A99-4D7A-42C2-BB0A-C20047B95DF9" title="Gets the value of an attribute of a handle.">OCIAttrGet()</a> calls to obtain the <code class="codeph">OCIType</code>.</p>
</div>
</div>
<a id="LNOCI16881"></a>
<div class="props_rev_3"><a id="GUID-2903B1B3-1C8F-47CB-8A42-D4366664347B"></a>
<h4 id="LNOCI-GUID-2903B1B3-1C8F-47CB-8A42-D4366664347B" class="sect4">Type Access Calls</h4>
<div>
<p><a href="oci16rel003.htm#GUID-AE9F73FB-DCC1-401E-8151-A8A89059163A" title="Describes existing schema and subschema objects.">OCIDescribeAny()</a> can be called with these transient type descriptions for a dynamic description of the type. The <code class="codeph">OCIType</code> pointer can be passed directly to <code class="codeph">OCIDescribeAny()</code> (with <span class="italic"><code class="codeph">objtype</code></span> set to <code class="codeph">OCI_OTYPE_PTR</code>). This provides a way to obtain attribute information by name and position.</p>
</div>
</div>
<a id="LNOCI16882"></a>
<div class="props_rev_3"><a id="GUID-8B2E4762-52E0-4162-97D6-D0F00A18F597"></a>
<h4 id="LNOCI-GUID-8B2E4762-52E0-4162-97D6-D0F00A18F597" class="sect4">Extensions to OCIDescribeAny()</h4>
<div>
<p>For transient types that represent built-in types (created with a built-in typecode), the parameter handle that describes these types (which are of type <code class="codeph">OCI_PTYPE_TYPE</code>) supports the following extra attributes:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_ATTR_DATA_SIZE</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_TYPECODE</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_DATA_TYPE</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_PRECISION</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_SCALE</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_CHARSET_ID</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_CHARSET_FORM</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_LFPRECISION</code></p>
</li>
<li>
<p><code class="codeph">OCI_ATTR_FSPRECISION</code></p>
</li>
</ul>
<p>These attributes have the usual meanings they have while describing a type attribute.</p>
<div class="infobox-note" id="GUID-8B2E4762-52E0-4162-97D6-D0F00A18F597__GUID-E47AB09E-C446-47C1-83CE-4F83DFBE0F44">
<p class="notep1">Note:</p>
<p>These attributes are supported only for transient built-in types. The attributes <code class="codeph">OCI_ATTR_IS_TRANSIENT_TYPE</code> and <code class="codeph">OCI_ATTR_IS_PREDEFINED_TYPE</code> are true for these types. For persistent types, these attributes are supported only from the parameter handle of the type&#39;s attributes (which are of type <code class="codeph">OCI_PTYPE_TYPE_ATTR</code>).</p>
</div>
</div>
</div>
</div>
<a id="LNOCI72718"></a><a id="LNOCI16883"></a>
<div class="props_rev_3"><a id="GUID-E84C6D01-023D-4B80-BEEB-250ADDFDDEB2"></a>
<h3 id="LNOCI-GUID-E84C6D01-023D-4B80-BEEB-250ADDFDDEB2" class="sect3">About OCIAnyData Interfaces</h3>
<div>
<p>An <code class="codeph">OCIAnyData</code> encapsulates type information and a data instance of that type (that is, self-descriptive data). An <code class="codeph">OCIAnyData</code> can be created from any built-in or user-defined type instance by using the <a href="oci21any002.htm#GUID-9A7B11E6-5FE9-46DD-B74A-4F21D177C315">OCIAnyDataConvert()</a> call. This call does a conversion (cast) to an <code class="codeph">OCIAnyData</code>.</p>
<p>Alternatively, object types and collection types can be constructed piece by piece (an attribute at a time for object types or a collection element at a time) by calling <a href="oci21any002.htm#GUID-89A24450-F4B4-43D0-8194-30023978E81B">OCIAnyDataBeginCreate()</a> with the type information (<code class="codeph">OCIType</code>). Subsequently, you can use <a href="oci21any002.htm#GUID-9F1F50D9-F886-4DD5-AAA8-C12B7CD7EF15">OCIAnyDataAttrSet()</a> for object types and use <a href="oci21any002.htm#GUID-51D85777-58B7-4348-ABB6-22F3E8568E37">OCIAnyDataCollAddElem()</a> for collection types. Finally, use the <a href="oci21any002.htm#GUID-D58536FB-33DE-4102-BBA1-9497A5368228">OCIAnyDataEndCreate()</a> call to finish the construction process.</p>
<p>Subsequently, you can invoke the access routines. To convert (cast) an <code class="codeph">OCIAnyData</code> to the corresponding type instance, you can use <a href="oci21any002.htm#GUID-FA586E41-210F-43EF-9492-57FE46879C66">OCIAnyDataAccess()</a>.</p>
<p>An <code class="codeph">OCIAnyData</code> that is based on an object or collection type can also be accessed piece by piece.</p>
<p>Special collection construction and access calls are provided for performance improvement. You can use these calls to avoid unnecessary creation and copying of the entire collection in memory, as shown in <a href="oci12oty.htm#GUID-E84C6D01-023D-4B80-BEEB-250ADDFDDEB2__BGBJBGHE">Example 12-12</a>.</p>
<p>or</p>
<pre dir="ltr">OCIAnyDataCollAddElem(...)    /* Element-wise construction for collections */

OCIAnyDataEndCreate(...)      /* End OCIAnyData Creation */
</pre>
<div class="example" id="GUID-E84C6D01-023D-4B80-BEEB-250ADDFDDEB2__BGBJBGHE">
<p class="titleinexample">Example 12-12 Using Special Construction and Access Calls for Improved Performance</p>
<pre dir="ltr">OCIAnyDataConvert(...)        /* Cast a built-in or user-defined type instance
                                 to an OCIAnyData in 1 call. */

OCIAnyDataBeginCreate(...)    /* Begin AnyData Creation */

OCIAnyDataAttrSet(...)        /* Attribute-wise construction for object types */
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI16884"></a>
<div class="props_rev_3"><a id="GUID-FE75A655-DBE6-46B0-A8D1-537991A39BE9"></a>
<h3 id="LNOCI-GUID-FE75A655-DBE6-46B0-A8D1-537991A39BE9" class="sect3">NCHAR Typecodes for OCIAnyData Functions</h3>
<div>
<p>The function <a id="d133536e9929" class="indexterm-anchor"></a><a href="oci21any002.htm#GUID-0A703B0A-E1AF-4817-85BD-533EE83D5C8E" title="Converts the OCITypeCode for an AnyData value to the SQLT code that corresponds to the representation of the value as returned by the OCIAnyData API.">OCIAnyDataTypeCodeToSqlt()</a> converts the <code class="codeph">OCITypeCode</code> for an <span>OCIAnyData</span> value to the <span>SQLT</span> code that corresponds to the representation of the value as returned by the <span>OCIAnyData</span> API.</p>
<p>The following typecodes are used in the OCIAnyData functions only:</p>
<ul style="list-style-type: disc;">
<li>
<p><a id="d133536e9958" class="indexterm-anchor"></a><code class="codeph">OCI_TYPECODE_NCHAR</code></p>
</li>
<li>
<p><a id="d133536e9964" class="indexterm-anchor"></a><code class="codeph">OCI_TYPECODE_NVARCHAR2</code></p>
</li>
<li>
<p><code class="codeph">OCI_TYPECODE_NCLOB</code></p>
</li>
</ul>
<p>In calls to other functions, such as <a href="oci16rel003.htm#GUID-AE9F73FB-DCC1-401E-8151-A8A89059163A" title="Describes existing schema and subschema objects.">OCIDescribeAny()</a>, these typecodes are not returned, and you must use the character set form to determine if the data is <code class="codeph">NCHAR</code> (if character set form is SQLCS_NCHAR).</p>
<p><a href="oci21any002.htm#GUID-0A703B0A-E1AF-4817-85BD-533EE83D5C8E" title="Converts the OCITypeCode for an AnyData value to the SQLT code that corresponds to the representation of the value as returned by the OCIAnyData API.">OCIAnyDataTypeCodeToSqlt()</a> converts <code class="codeph">OCI_TYPECODE_CHAR</code> and <code class="codeph">OCI_TYPECODE_VARCHAR2</code> to the output values <code class="codeph">SQLT_VST</code> (which corresponds to the <code class="codeph">OCIString</code> mapping) with a character set form of <code class="codeph">SQLCS_IMPLICIT</code>. <code class="codeph">OCI_TYPECODE_NVARCHAR2</code> also returns <code class="codeph">SQLT_VST</code> (<code class="codeph">OCIString</code> mapping is used by OCIAnyData API) with a character set form of <code class="codeph">SQLCS_NCHAR</code>.</p>
<div class="infoboxnotealso" id="GUID-FE75A655-DBE6-46B0-A8D1-537991A39BE9__GUID-CAE2F761-515F-4521-87E0-ACD09AA1A06A">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="oci21any002.htm#GUID-0A703B0A-E1AF-4817-85BD-533EE83D5C8E" title="Converts the OCITypeCode for an AnyData value to the SQLT code that corresponds to the representation of the value as returned by the OCIAnyData API.">OCIAnyDataTypeCodeToSqlt()</a>&#34;</span></p>
</div>
</div>
</div>
<a id="LNOCI16885"></a>
<div class="props_rev_3"><a id="GUID-292DFA46-50CD-4578-B4A3-76E3B2CCC7C4"></a>
<h3 id="LNOCI-GUID-292DFA46-50CD-4578-B4A3-76E3B2CCC7C4" class="sect3">About OCIAnyDataSet Interfaces</h3>
<div>
<p>An <code class="codeph">OCIAnyDataSet</code> encapsulates type information and <span class="italic">a set of instances</span> of that type. To begin the construction process, call <code class="codeph">OCIAnyDataSetBeginCreate()</code>.</p>
<p>Call <code class="codeph">OCIAnyDataSetAddInstance()</code> to add a new instance; this call returns the <code class="codeph">OCIAnyData</code> corresponding to that instance.</p>
<p>Then, you can invoke the OCIAnyData functions to construct this instance. Call <code class="codeph">OCIAnyDataSetEndCreate()</code> when all instances have been added.</p>
<p>For access, call <code class="codeph">OCIAnyDataSetGetInstance()</code> to get the <code class="codeph">OCIAnyData</code> corresponding to the instance. Only sequential access is supported. Subsequently, you can invoke the OCIAnyData access functions, as in the following example:</p>
<pre dir="ltr">OCIAnyDataSetBeginCreate(...)   /* Begin AnyDataSet Creation */
OCIAnyDataSetAddInstance(...)   /* Add a new instance to the AnyDataSet */
                                /* Use the OCIAnyData*() functions to create
                                   the instance */
OCIAnyDataSetEndCreate(...)     /* End OCIAnyDataSet Creation */
</pre>
<div class="infoboxnotealso" id="GUID-292DFA46-50CD-4578-B4A3-76E3B2CCC7C4__GUID-8A37ACA8-BC8C-4A62-B704-4B58EEC1593A">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci21any003.htm#GUID-9E2B585B-5DA0-44AC-A12C-7F22B83CCB19">OCIAnyDataSetBeginCreate()</a></p>
</li>
<li>
<p><a href="oci21any003.htm#GUID-13BB5AF0-2DF4-4CE3-A55E-80F98747127D">OCIAnyDataSetAddInstance()</a></p>
</li>
<li>
<p><a href="oci21any003.htm#GUID-8281456E-9DFE-4D02-9BA8-837F04ADD0E7">OCIAnyDataSetEndCreate()</a></p>
</li>
<li>
<p><a href="oci21any003.htm#GUID-8E8E00E9-5719-4BB0-93A3-1E0FAEF2624F">OCIAnyDataSetGetInstance()</a></p>
</li>
<li>
<p><a href="oci21any.htm#GUID-2872A0B8-D0DA-47B9-8692-FD55AC959E9B" title="This chapter describes the OCI Any Type and Data functions.">OCI Any Type and Data Functions</a> for complete descriptions of all the calls in these interfaces</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="LNOCI16886"></a>
<div class="props_rev_3"><a id="GUID-53D4F217-BE53-4B78-962C-0EAA9741F9AC"></a>
<h2 id="LNOCI-GUID-53D4F217-BE53-4B78-962C-0EAA9741F9AC" class="sect2">About Binding Named Data Types</h2>
<div>
<p>This section provides information about binding named data types (such as objects and collections) and <code class="codeph">REF</code>s.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-25B2139A-8F55-4256-88EB-D8F5F706904C" title="For a named data type (object type or collection) bind, a second bind call is necessary following OCIBindByName() or OCIBindByName2() or OCIBindByPos() or OCIBindByPos2().">Named Data Type Binds</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-5A08B855-FB63-4457-866F-DAB035059E49" title="As with named data types, binding REFs is a two-step process.">About Binding REFs</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-BB043B77-4B3C-4A1C-A4E4-9F225E0DF1BB">Information for Named Data Type and REF Binds</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-6F4BAE5F-0854-4CBC-9557-6A669673A14E" title="For doing array binds of named data types or REFs, for array inserts or fetches, the user must pass in an array of pointers to buffers (preallocated or otherwise) of the appropriate type.">Information Regarding Array Binds</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16887"></a>
<div class="props_rev_3"><a id="GUID-25B2139A-8F55-4256-88EB-D8F5F706904C"></a>
<h3 id="LNOCI-GUID-25B2139A-8F55-4256-88EB-D8F5F706904C" class="sect3">Named Data Type Binds</h3>
<div>
<p>For a named data type (object type or collection) bind, a second bind call is necessary following <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByName2()</code> or <code class="codeph">OCIBindByPos()</code> or <code class="codeph">OCIBindByPos2()</code>.</p>
<p>The <code class="codeph">OCIBindObject()</code> call sets up additional attributes specific to the object type bind. An OCI application uses this call when fetching data from a table that has a column with an object data type.</p>
<p>The <code class="codeph">OCIBindObject()</code> call takes, among other parameters, a type descriptor object (TDO) for the named data type. The TDO of data type <code class="codeph">OCIType</code> is created and stored in the database when a named data type is created. It contains information about the type and its attributes. An application can obtain a TDO by calling <code class="codeph">OCITypeByName()</code>.</p>
<p>The <code class="codeph">OCIBindObject()</code> call also sets up the indicator variable or structure for the named data type bind.</p>
<p>When binding a named data type, use the <code class="codeph">SQLT_NTY</code> data type constant to indicate the data type of the program variable being bound. <code class="codeph">SQLT_NTY</code> indicates that a C struct representing the named data type is being bound. A pointer to this structure is passed to the bind call.</p>
<p>With inheritance and instance substitutability, you can bind a subtype instance where the supertype is expected.</p>
<p>Working with named data types may require the use of three bind calls in some circumstances. For example, to bind a static array of named data types to a PL/SQL table, three calls must be invoked: <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByName2()</code>, <code class="codeph">OCIBindArrayOfStruct()</code>, and <code class="codeph">OCIBindObject()</code>.</p>
<div class="infoboxnotealso" id="GUID-25B2139A-8F55-4256-88EB-D8F5F706904C__GUID-6D2FF06F-C118-42B6-AAF7-C387C3673278">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci11obj.htm#GUID-7B0B6CF5-AD69-4FCB-9E96-CA6469601077" title="An application must fetch embedded object instances.">Fetching Embedded Objects</a> for information about using these data types to fetch an embedded object from the database</p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-BB043B77-4B3C-4A1C-A4E4-9F225E0DF1BB">Information for Named Data Type and REF Binds</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-3D021DDC-A638-41EF-BB61-1CD1B2A33A51">Descriptor Objects</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a> or <a href="oci16rel003.htm#GUID-55C47708-5468-4106-89BE-1AB60861D037" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this function when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByName2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a> or <a href="oci16rel003.htm#GUID-5C505821-323D-473D-825B-448C8D9A6702" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByPos2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a></p>
</li>
<li>
<p><a href="oci18nav006.htm#GUID-3534AABC-E347-4BC7-B220-0CAECDC9ECE7" title="Gets the most current version of an existing TDO.">OCITypeByName()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-E83BF668-88FC-4F31-A950-3580B79588E0" title="Sets up the skip parameters for a static array bind.">OCIBindArrayOfStruct()</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16888"></a>
<div class="props_rev_3"><a id="GUID-5A08B855-FB63-4457-866F-DAB035059E49"></a>
<h3 id="LNOCI-GUID-5A08B855-FB63-4457-866F-DAB035059E49" class="sect3">About Binding REFs</h3>
<div>
<p>As with named data types, binding <code class="codeph">REF</code>s is a two-step process.</p>
<p>First, call <code class="codeph">OCIBindByName()</code> or <code class="codeph">OCIBindByName2()</code> or <code class="codeph">OCIBindByPos()</code> or <code class="codeph">OCIBindByPos2()</code>, and then call <code class="codeph">OCIBindObject()</code>.</p>
<p><code class="codeph">REF</code>s are bound using the <code class="codeph">SQLT_REF</code> data type. When <code class="codeph">SQLT_REF</code> is used, then the program variable being bound must be of type <code class="codeph">OCIRef *</code>.</p>
<p>With inheritance and <code class="codeph">REF</code> substitutability, you can bind a <code class="codeph">REF</code> value to a subtype instance where a <code class="codeph">REF</code> to the supertype is expected.</p>
<div class="infoboxnotealso" id="GUID-5A08B855-FB63-4457-866F-DAB035059E49__GUID-C9D1BD8B-54C6-4340-B23B-FDD3932C8204">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci11obj.htm#GUID-2214E88A-97CD-4DF8-B1FD-31EB50D01402" title="To work with objects, your application must first retrieve one or more objects from the server.">Retrieving an Object Reference from the Server</a> for information about binding and pinning <code class="codeph">REF</code>s to objects</p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-BB043B77-4B3C-4A1C-A4E4-9F225E0DF1BB">Information for Named Data Type and REF Binds</a> for additional important information</p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CD63DF78-2178-4727-A896-B9673C4A37F0" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByName()</a> or <a href="oci16rel003.htm#GUID-55C47708-5468-4106-89BE-1AB60861D037" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this function when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByName2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-D28DF5A7-3C75-4E52-82F7-A5D6D5714E69" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block.">OCIBindByPos()</a> or <a href="oci16rel003.htm#GUID-5C505821-323D-473D-825B-448C8D9A6702" title="Creates an association between a program variable and a placeholder in a SQL statement or PL/SQL block. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIBindByPos2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16889"></a>
<div class="props_rev_3"><a id="GUID-BB043B77-4B3C-4A1C-A4E4-9F225E0DF1BB"></a>
<h3 id="LNOCI-GUID-BB043B77-4B3C-4A1C-A4E4-9F225E0DF1BB" class="sect3">Information for Named Data Type and REF Binds</h3>
<div>
<p>Remember the following important information when you work with named data type and <code class="codeph">REF</code> binds. It includes pointers about memory allocation and indicator variable usage.</p>
<ul style="list-style-type: disc;">
<li>
<p>If the data type being bound is <code class="codeph">SQLT_NTY</code>, the indicator struct parameter of the <a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a> call (<code class="codeph">void ** indpp</code>) is used, and the scalar indicator is completely ignored.</p>
</li>
<li>
<p>If the data type is <code class="codeph">SQLT_REF</code>, the scalar indicator is used, and the indicator struct parameter of <a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a> is completely ignored.</p>
</li>
<li>
<p>The use of indicator structures is optional. The user can pass a <code class="codeph">NULL</code> pointer in the <span class="italic"><code class="codeph">indpp</code></span> parameter for the <a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a> call. During the bind, therefore, the object is not atomically <code class="codeph">NULL</code> and none of its attributes are <code class="codeph">NULL</code>.</p>
</li>
<li>
<p>The indicator struct size pointer, <span class="italic"><code class="codeph">indsp</code></span>, and program variable size pointer, <span class="italic"><code class="codeph">pgvsp</code></span>, in the <a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a> call are optional. Users can pass <code class="codeph">NULL</code> if these parameters are not needed.</p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16890"></a>
<div class="props_rev_3"><a id="GUID-6F4BAE5F-0854-4CBC-9557-6A669673A14E"></a>
<h3 id="LNOCI-GUID-6F4BAE5F-0854-4CBC-9557-6A669673A14E" class="sect3">Information Regarding Array Binds</h3>
<div>
<p>For doing array binds of named data types or <code class="codeph">REF</code>s, for array inserts or fetches, the user must pass in an array of pointers to buffers (preallocated or otherwise) of the appropriate type.</p>
<p>Similarly, an array of scalar indicators for <code class="codeph">SQLT_REF</code> types or an array of pointers to indicator structs for <code class="codeph">SQLT_NTY</code> types must be passed.</p>
<div class="infoboxnotealso" id="GUID-6F4BAE5F-0854-4CBC-9557-6A669673A14E__GUID-38EBD1AA-1410-4B90-9DB6-11F4AB43AC9D">
<p class="notep1">See Also:</p>
<p><a href="oci03typ.htm#GUID-72D5AB6E-05B1-4144-BAF0-CA2C8538E3D2" title="Named data types are user-defined types that are specified with the CREATE TYPE command in SQL.">Named Data Types: Object, VARRAY, Nested Table</a> for more information about <code class="codeph">SQLT_NTY</code></p>
</div>
</div>
</div>
</div>
<a id="LNOCI16891"></a>
<div class="props_rev_3"><a id="GUID-5BFF4D9F-67AC-411B-9722-4135671FFD1E"></a>
<h2 id="LNOCI-GUID-5BFF4D9F-67AC-411B-9722-4135671FFD1E" class="sect2">About Defining Named Data Types</h2>
<div>
<p>This section provides information about defining named data types (for example, objects, collections) and <code class="codeph">REF</code>s.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-FA5165DE-AA42-449B-81E2-D4B4A5AE21B8" title="For a named data type (object type, nested table, varray) define, two define calls are necessary.">About Defining Named Data Type Output Variables</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-5C5F60CE-4FEF-4E0F-87C3-BD80D39FFBA8" title="As with named data types, defining for a REF output variable is a two-step process.">About Defining REF Output Variables</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11" title="Consider the following important information as you work with named data type and REF defines. It includes pointers about memory allocation and indicator variable usage.">Information for Named Data Type and REF Defines, and PL/SQL OUT Binds</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16892"></a>
<div class="props_rev_3"><a id="GUID-FA5165DE-AA42-449B-81E2-D4B4A5AE21B8"></a>
<h3 id="LNOCI-GUID-FA5165DE-AA42-449B-81E2-D4B4A5AE21B8" class="sect3">About Defining Named Data Type Output Variables</h3>
<div>
<p>For a named data type (object type, nested table, varray) define, two define calls are necessary.</p>
<p>The application should first call <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code>, specifying <code class="codeph">SQLT_NTY</code> in the <span class="italic"><code class="codeph">dty</code></span> parameter. Following <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code>, the application must call <code class="codeph">OCIDefineObject()</code> to set up additional attributes pertaining to a named data type define. In this case, the data buffer pointer in <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code> is ignored.</p>
<p>Specify the <code class="codeph">SQLT_NTY</code> data type constant for a named data type define. In this case, the application fetches the result data into a host-language representation of the named data type. In most cases, this is a C struct generated by the Object Type Translator.</p>
<p>To make an <code class="codeph">OCIDefineObject()</code> call, a pointer to the address of the C struct (preallocated or otherwise) must be provided. The object may have been created with <code class="codeph">OCIObjectNew()</code>, allocated in the cache, or with user-allocated memory.</p>
<p>However, in the presence of inheritance, Oracle strongly recommends using objects in the object cache and <span class="italic">not</span> passing objects allocated out of user memory from the stack. Otherwise, due to instance substitutability, the server may send back a <span class="italic">subtype</span> instance when the client is expecting a supertype instance. This requires the server to dynamically resize the object, which is possible only for objects in the cache.</p>
<div class="infoboxnotealso" id="GUID-FA5165DE-AA42-449B-81E2-D4B4A5AE21B8__GUID-BDF8A7AB-543E-4E19-8D1C-C202A1ED8ECC">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11" title="Consider the following important information as you work with named data type and REF defines. It includes pointers about memory allocation and indicator variable usage.">Information for Named Data Type and REF Defines, and PL/SQL OUT Binds</a> for more important information about defining named data types</p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a> or <a href="oci16rel003.htm#GUID-74939FB5-919E-4D24-B327-AFB532435061" title="Associates an item in a select list with the type and output data buffer. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIDefineByPos2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-F211198D-C88C-493B-A65E-2C2A95E6197B" title="Sets up additional attributes necessary for a named data type or REF define.">OCIDefineObject()</a></p>
</li>
<li>
<p><a href="oci18nav004.htm#GUID-2EFD6F01-A02F-4C5B-B20F-1EF841249056" title="Creates a standalone instance.">OCIObjectNew()</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16893"></a>
<div class="props_rev_3"><a id="GUID-5C5F60CE-4FEF-4E0F-87C3-BD80D39FFBA8"></a>
<h3 id="LNOCI-GUID-5C5F60CE-4FEF-4E0F-87C3-BD80D39FFBA8" class="sect3">About Defining REF Output Variables</h3>
<div>
<p>As with named data types, defining for a <code class="codeph">REF</code> output variable is a two-step process.</p>
<p>The first step is a call to <code class="codeph">OCIDefineByPos()</code> or <code class="codeph">OCIDefineByPos2()</code>, and the second is a call to <code class="codeph">OCIDefineObject()</code>. Also as with named data types, the <code class="codeph">SQLT_REF</code> data type constant is passed to the <span class="italic"><code class="codeph">dty</code></span> parameter of <code class="codeph">OCIDefineByPos()</code>.</p>
<p><code class="codeph">SQLT_REF</code> indicates that the application is fetching the result data into a variable of type <code class="codeph">OCIRef *</code>. This <code class="codeph">REF</code> can then be used as part of object pinning and navigation.</p>
<div class="infoboxnotealso" id="GUID-5C5F60CE-4FEF-4E0F-87C3-BD80D39FFBA8__GUID-F8E93D20-7B7A-48FB-82AC-2DB7AD18814A">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci16rel003.htm#GUID-CFE5AA54-DEBC-42D3-8A27-AFF1E7815691" title="Associates an item in a select list with the type and output data buffer.">OCIDefineByPos()</a> or <a href="oci16rel003.htm#GUID-74939FB5-919E-4D24-B327-AFB532435061" title="Associates an item in a select list with the type and output data buffer. Use this call when working with data types when actual lengths exceed UB2MAXVAL on the client.">OCIDefineByPos2()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-F211198D-C88C-493B-A65E-2C2A95E6197B" title="Sets up additional attributes necessary for a named data type or REF define.">OCIDefineObject()</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11" title="Consider the following important information as you work with named data type and REF defines. It includes pointers about memory allocation and indicator variable usage.">Information for Named Data Type and REF Defines, and PL/SQL OUT Binds</a> for more important information about defining <code class="codeph">REF</code>s</p>
</li>
<li>
<p><a href="oci11obj.htm#GUID-3F376D7F-56D2-4C5B-97FE-1E94E2A57519" title="Many of the programming principles that govern a relational OCI application are the same for an object-relational application.">About Working with Objects in OCI</a> for more information about object pinning and navigation</p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNOCI16894"></a>
<div class="props_rev_3"><a id="GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11"></a>
<h3 id="LNOCI-GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11" class="sect3">Information for Named Data Type and REF Defines, and PL/SQL OUT Binds</h3>
<div>
<p>Consider the following important information as you work with named data type and <code class="codeph">REF</code> defines. It includes pointers about memory allocation and indicator variable usage.</p>
<p>A PL/SQL OUT bind refers to binding a placeholder to an output variable in a PL/SQL block. Unlike a SQL statement, where output buffers are set up with define calls, in a PL/SQL block, output buffers are set up with bind calls.</p>
<ul style="list-style-type: disc;">
<li>
<p>If the data type being defined is <code class="codeph">SQLT_NTY</code>, then the indicator struct parameter of the <code class="codeph">OCIDefineObject()</code> call (<span class="italic"><code class="codeph">void ** indpp</code></span>) is used, and the scalar indicator is completely ignored.</p>
</li>
<li>
<p>If the data type is <code class="codeph">SQLT_REF</code>, then the scalar indicator is used, and the indicator struct parameter of <code class="codeph">OCIDefineObject()</code> is completely ignored.</p>
</li>
<li>
<p>The use of indicator structures is optional. The user can pass a <code class="codeph">NULL</code> pointer in the <span class="italic"><code class="codeph">indpp</code></span> parameter for the <code class="codeph">OCIDefineObject()</code> call. During a fetch or PL/SQL OUT bind, therefore, the user is not interested in any information about being null.</p>
</li>
<li>
<p>In a SQL define or PL/SQL OUT bind, you can pass in preallocated memory for either the output variable or the indicator. Then that preallocated memory is used to store result data, and any secondary memory (out-of-line memory), is deallocated. The preallocated memory must come from the cache (the result of an <code class="codeph">OCIObjectNew()</code> call).</p>
<div class="infobox-note" id="GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11__GUID-C914EC20-0FE0-4F9E-8D18-9BF10158D739">
<p class="notep1">Note:</p>
<p>If you want your client application to allocate memory from its own private memory space, instead of the cache, your application must ensure that there is no secondary out-of-line memory in the object.</p>
</div>
</li>
</ul>
<p>To preallocate object memory for an object define with type <code class="codeph">SQLT_NTY</code>, client applications must use the <code class="codeph">OCIObjectNew()</code> function. A client application should not allocate the object in its own private memory space, such as with <code class="codeph">malloc()</code> or on the stack. The <code class="codeph">OCIObjectNew()</code> function allocates the object in the object cache. The allocated object can be freed using <code class="codeph">OCIObjectFree()</code>.</p>
<div class="infobox-note" id="GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11__GUID-06531B2C-2F8E-44CC-9F01-8C6C0729A09F">
<p class="notep1">Note:</p>
<p>There is no change to the behavior of <code class="codeph">OCIDefineObject()</code> when the user does not preallocate the object memory and instead initializes the output variable to null pointer value. In this case, the object is implicitly allocated in the object cache by the OCI library.</p>
</div>
<ul style="list-style-type: disc;">
<li>
<p>In a SQL define or PL/SQL OUT bind, if the user passes in a <code class="codeph">NULL</code> address for the output variable or the indicator, memory for the variable or the indicator is implicitly allocated by OCI.</p>
</li>
<li>
<p>If an output object of type <code class="codeph">SQLT_NTY</code> is atomically <code class="codeph">NULL</code> (in a SQL define or PL/SQL OUT bind), only the <code class="codeph">NULL</code> indicator struct gets allocated (implicitly if necessary) and populated accordingly to indicate the atomic nullity of the object. The top-level object does not get implicitly allocated.</p>
</li>
<li>
<p>An application can free indicators by calling <code class="codeph">OCIObjectFree()</code>. If there is a top-level object (as with a non-atomically <code class="codeph">NULL</code> object), then the indicator is freed when the top-level object is freed with <code class="codeph">OCIObjectFree()</code>. If the object is atomically null, then there is no top-level object, so the indicator must be freed separately.</p>
</li>
<li>
<p>The indicator struct size pointer, <span class="italic"><code class="codeph">indszp</code></span>, and program variable size pointer, <span class="italic"><code class="codeph">pvszsp</code></span>, in the <code class="codeph">OCIDefineObject()</code> call are optional. Users can pass <code class="codeph">NULL</code> if these parameters are not needed.</p>
</li>
</ul>
<p>This section includes the following topic: <a href="oci12oty.htm#GUID-250F15D6-B7F0-4B34-AAD6-92C6718A8D40">Information About Array Defines</a>.</p>
<div class="infoboxnotealso" id="GUID-1E2056EF-32BE-4875-9211-C2D4BB535D11__GUID-6BA13192-B353-47E2-BA2B-4A8F6C569447">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci05bnd.htm#GUID-6D3F22A5-BA2E-4A22-BBFC-7FDA3B22557D" title="You process a PL/SQL block by placing the block in a string variable, binding any variables, and then executing the statement containing the block, just as you would with a single SQL statement.">About Binding Placeholders in PL/SQL</a> for more information</p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-F211198D-C88C-493B-A65E-2C2A95E6197B" title="Sets up additional attributes necessary for a named data type or REF define.">OCIDefineObject()</a></p>
</li>
<li>
<p><a href="oci18nav004.htm#GUID-2EFD6F01-A02F-4C5B-B20F-1EF841249056" title="Creates a standalone instance.">OCIObjectNew()</a></p>
</li>
<li>
<p><a href="oci18nav005.htm#GUID-0814B033-C25C-4B4C-8968-4C0B86C2E744">OCIObjectFree()</a></p>
</li>
<li>
<p><a href="oci18nav.htm#GUID-9F30DB5F-33CB-4CE6-8EFE-732B29E26727" title="This chapter describes the OCI navigational functions that are used to navigate through objects retrieved from an Oracle database.">OCI Navigational and Type Functions</a> for details about <code class="codeph">OCIObjectNew()</code> and <code class="codeph">OCIObjectFree()</code></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-F211198D-C88C-493B-A65E-2C2A95E6197B" title="Sets up additional attributes necessary for a named data type or REF define.">OCIDefineObject()</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16895"></a>
<div class="props_rev_3"><a id="GUID-250F15D6-B7F0-4B34-AAD6-92C6718A8D40"></a>
<h4 id="LNOCI-GUID-250F15D6-B7F0-4B34-AAD6-92C6718A8D40" class="sect4">Information About Array Defines</h4>
<div>
<p>To perform array defines of named data types or <code class="codeph">REF</code>s, the user must pass in an array of pointers to buffers (preallocated or otherwise) of the appropriate type. Similarly, an array of scalar indicators (for <code class="codeph">SQLT_REF</code> types) or an array of pointers to indicator structs (for <code class="codeph">SQLT_NTY</code> types) must be passed.</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16897"></a><a id="LNOCI16896"></a>
<div class="props_rev_3"><a id="GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767"></a>
<h2 id="LNOCI-GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767" class="sect2">About Binding and Defining Oracle C Data Types</h2>
<div>
<p>This section summarizes information about binding and defining Oracle C named data types</p>
<p>Previous chapters of this book have discussed OCI bind and define operations. <a href="oci04sql.htm#GUID-CB348BD8-9A45-4921-B397-ADFE96B75C70" title="Most DML statements, and some queries (such as those with a WHERE clause), require a program to pass data to Oracle Database as part of a SQL or PL/SQL statement.">About Binding Placeholders in OCI</a> discussed the basics of OCI bind operations, whereas <a href="oci04sql.htm#GUID-F5FB3DBA-9FDA-45FC-AF5D-2D8D4C436296" title="Query statements return data from the database to your application.">About Defining Output Variables in OCI</a> discussed the basics of OCI define operations. Information specific to binding and defining named data types and <code class="codeph">REF</code>s was described in <a href="oci05bnd.htm#GUID-4C2BD7BB-5768-4E8A-82BF-84FB0030A8C5" title="This chapter describes binding and defining in OCI.">Binding and Defining in OCI</a>.</p>
<p>The sections covering basic bind and define functionality showed how an application could use a scalar variable or array of scalars as an input (bind) value in a SQL statement, or as an output (define) buffer for a query.</p>
<p>The sections covering named data types and <code class="codeph">REF</code>s showed how to bind or define an object or reference. <a href="oci11obj.htm#GUID-B9E5DDBD-19CD-4AE0-B1D3-3B85ADEAAAB1" title="Pinning an object loads the object instance into the object cache, and enables you to access and modify the instance&#39;s attributes and follow references from that object to other objects, if necessary.">Pinning an Object</a> expanded on this to talk about pinning object references, <a href="oci11obj.htm#GUID-7B0B6CF5-AD69-4FCB-9E96-CA6469601077" title="An application must fetch embedded object instances.">Fetching Embedded Objects</a> discussed fetching embedded instances, and <a href="oci14oca.htm#GUID-4BFF0155-C6FE-4592-89CF-F8FD99E1E2BC" title="This section discusses how OCI applications can navigate through graphs of objects in the object cache.">Object Navigation</a> discussed object navigation.</p>
<p>The purpose of this section is to cover binding and defining of individual attribute values, using the data type mappings explained in this chapter.</p>
<p>Variables of one of the types defined in this chapter, such as <code class="codeph">OCINumber</code> or <code class="codeph">OCIString</code>, can typically be declared in an application and used directly in an OCI bind or define operation because the appropriate data type code is specified. <a href="oci12oty.htm#GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767__BGBJJCEH" title="This table has 3 columns. Column 1 is the data type, column 2 is its C mapping, and column 3 is the corresponding OCI external data type and code.">Table 12-12</a> lists the data types that you can use for binds and defines, along with their C mapping, and the OCI external data type that must be specified in the <span class="italic">dty</span> (data type code) parameter of the bind or define call.</p>
<div class="tblformal" id="GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767__BGBJJCEH">
<p class="titleintable">Table 12-12 Data Type Mappings for Binds and Defines</p>
<table class="cellalignment6175" title="Data Type Mappings for Binds and Defines " summary="This table has 3 columns. Column 1 is the data type, column 2 is its C mapping, and column 3 is the corresponding OCI external data type and code.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6245" id="d133536e12898">Data Type</th>
<th class="cellalignment6212" id="d133536e12901">C Mapping</th>
<th class="cellalignment6182" id="d133536e12904">OCI External Data Type and Code</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e12909" headers="d133536e12898">
<p>Oracle <code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6214" headers="d133536e12909 d133536e12901">
<pre dir="ltr">OCINumber
</pre></td>
<td class="cellalignment6184" headers="d133536e12909 d133536e12904">
<p>VARNUM (SQLT_VNU)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e12921" headers="d133536e12898">
<p>Oracle <code class="codeph">DATE</code></p>
</td>
<td class="cellalignment6214" headers="d133536e12921 d133536e12901">
<pre dir="ltr">OCIDate
</pre></td>
<td class="cellalignment6184" headers="d133536e12921 d133536e12904">
<p>SQLT_ODT</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e12933" headers="d133536e12898">
<p><code class="codeph">BLOB</code></p>
</td>
<td class="cellalignment6214" headers="d133536e12933 d133536e12901">
<pre dir="ltr">OCILobLocator *
</pre></td>
<td class="cellalignment6184" headers="d133536e12933 d133536e12904">
<p>SQLT_BLOB</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e12944" headers="d133536e12898">
<p><code class="codeph">CLOB</code>, <code class="codeph">NCLOB</code></p>
</td>
<td class="cellalignment6214" headers="d133536e12944 d133536e12901">
<pre dir="ltr">CILobLocator *
</pre></td>
<td class="cellalignment6184" headers="d133536e12944 d133536e12904">
<p>SQLTY_LOB</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e12958" headers="d133536e12898">
<p><code class="codeph">VARCHAR2</code>, <code class="codeph">NVARCHAR2</code></p>
</td>
<td class="cellalignment6214" headers="d133536e12958 d133536e12901">
<pre dir="ltr">OCIString *
</pre></td>
<td class="cellalignment6184" headers="d133536e12958 d133536e12904">
<p>SQLT_VST <a id="GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767__BGBGIDDF" href="#GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767__BGBGIDDF" onclick="footdisplay(1,&#34;Before fetching data into a define variable of type OCIString *, the size of the string must first be set using the OCIStringResize() routine. This may require a describe operation to obtain the length of the select-list data. Similarly, an OCIRaw * must be first sized with OCIStringResize(). &#34;)"><sup>Foot&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e12987" headers="d133536e12898">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6214" headers="d133536e12987 d133536e12901">
<pre dir="ltr">OCIRaw *
</pre></td>
<td class="cellalignment6184" headers="d133536e12987 d133536e12904">
<p>SQLT_LVB <a id="fnsrc_d133536e12997" href="#fnsrc_d133536e12997" onclick="footdisplay(1,&#34;Before fetching data into a define variable of type OCIString *, the size of the string must first be set using the OCIStringResize() routine. This may require a describe operation to obtain the length of the select-list data. Similarly, an OCIRaw * must be first sized with OCIStringResize(). &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e13000" headers="d133536e12898">
<p><code class="codeph">CHAR</code>, <code class="codeph">NCHAR</code></p>
</td>
<td class="cellalignment6214" headers="d133536e13000 d133536e12901">
<pre dir="ltr">OCIString *
</pre></td>
<td class="cellalignment6184" headers="d133536e13000 d133536e12904">
<p>SQLT_VST</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e13014" headers="d133536e12898">
<p>Object</p>
</td>
<td class="cellalignment6214" headers="d133536e13014 d133536e12901">
<pre dir="ltr">struct *
</pre></td>
<td class="cellalignment6184" headers="d133536e13014 d133536e12904">
<p>Named Data Type (SQLT_NTY)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e13024" headers="d133536e12898">
<p><code class="codeph">REF</code></p>
</td>
<td class="cellalignment6214" headers="d133536e13024 d133536e12901">
<pre dir="ltr">OCIRef *
</pre></td>
<td class="cellalignment6184" headers="d133536e13024 d133536e12904">
<p>REF (SQLT_REF)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e13035" headers="d133536e12898">
<p><code class="codeph">VARRAY</code></p>
</td>
<td class="cellalignment6214" headers="d133536e13035 d133536e12901">
<pre dir="ltr">OCIArray *
</pre></td>
<td class="cellalignment6184" headers="d133536e13035 d133536e12904">
<p>Named Data Type (SQLT_NTY)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e13046" headers="d133536e12898">
<p>Nested Table</p>
</td>
<td class="cellalignment6214" headers="d133536e13046 d133536e12901">
<pre dir="ltr">OCITable *
</pre></td>
<td class="cellalignment6184" headers="d133536e13046 d133536e12904">
<p>Named Data Type (SQLT_NTY)</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e13057" headers="d133536e12898">
<p><code class="codeph">DATETIME</code></p>
</td>
<td class="cellalignment6214" headers="d133536e13057 d133536e12901">
<pre dir="ltr">OCIDateTime *
</pre></td>
<td class="cellalignment6184" headers="d133536e13057 d133536e12904">
<p>See <a href="oci12oty.htm#GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE" title="The OCIDateTime data type is an opaque structure used to represent Oracle time-stamp data types (TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE) and the ANSI DATE data type.">Datetime and Interval (OCIDateTime, OCIInterval)</a>.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d133536e13112" headers="d133536e12898">
<p><code class="codeph">INTERVAL</code></p>
</td>
<td class="cellalignment6214" headers="d133536e13112 d133536e12901">
<pre dir="ltr">OCIInterval *
</pre></td>
<td class="cellalignment6184" headers="d133536e13112 d133536e12904">
<p>See <a href="oci12oty.htm#GUID-BE008B9E-1CC3-4168-881F-1CE5E95778AE" title="The OCIDateTime data type is an opaque structure used to represent Oracle time-stamp data types (TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE) and the ANSI DATE data type.">Datetime and Interval (OCIDateTime, OCIInterval)</a>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1</sup></p>
<p>Before fetching data into a define variable of type <code class="codeph">OCIString *</code>, the size of the string must first be set using the <code class="codeph">OCIStringResize()</code> routine. This may require a describe operation to obtain the length of the select-list data. Similarly, an <code class="codeph">OCIRaw *</code> must be first sized with <code class="codeph">OCIStringResize()</code>.</p>
<div class="p">The following sections presents examples of how to use C-mapped data types in an OCI application:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-2A93AB76-B6AE-4AEF-8785-07672740D8FE" title="Shows how you can use variables of type OCINumber in OCI bind and define operations">Bind and Define Examples</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-BEF74B03-0936-47B4-A778-F8A140660C0A" title="Shows how the flow of calls is used to perform certain OCI tasks.">Salary Update Examples</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-EA06FDEB-E669-460B-AA33-4C6B5F074767__GUID-80DF0029-09A3-45DD-B4D4-06CC12CABFD6">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci03typ.htm#GUID-027FB2E2-593C-43F1-9184-DFEF7A984A27" title="This chapter provides a reference to Oracle external data types used by OCI applications.">Data Types</a> for a discussion of OCI external data types, and a list of data typecodes</p>
</li>
<li>
<p><a href="oci19map006.htm#GUID-CA52A8A4-08BA-4F08-A4A3-79F841F6AE9E">OCIStringResize()</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI16898"></a>
<div class="props_rev_3"><a id="GUID-2A93AB76-B6AE-4AEF-8785-07672740D8FE"></a>
<h3 id="LNOCI-GUID-2A93AB76-B6AE-4AEF-8785-07672740D8FE" class="sect3">Bind and Define Examples</h3>
<div>
<p>Shows how you can use variables of type <code class="codeph">OCINumber</code> in OCI bind and define operations</p>
<div class="section">
<p>The examples in this section demonstrate how you can use variables of type <code class="codeph">OCINumber</code> in OCI bind and define operations.</p>
<p>Assume, for this example, that the following <code class="codeph">person</code> object type was created:</p>
<pre dir="ltr">CREATE TYPE person AS OBJECT
(name     varchar2(30),
salary     number);
</pre>
<p>This type is then used to create an <code class="codeph">employees</code> table that has a column of type <code class="codeph">person</code>.</p>
<pre dir="ltr">CREATE TABLE employees
(emp_id    number,
job_title  varchar2(30),
emp        person);
</pre>
<p>The Object Type Translator (OTT) generates the following C struct and null indicator struct for <code class="codeph">person</code>:</p>
<pre dir="ltr">struct person
{   OCIString * name;
   OCINumber salary;};
typedef struct person person;

struct person_ind
{   OCIInd  _atomic;
   OCIInd  name;
   OCIInd  salary;}
typedef struct person_ind person_ind;
</pre>
<p>Assume that the <code class="codeph">employees</code> table has been populated with values, and an OCI application has declared a <code class="codeph">person</code> variable:</p>
<pre dir="ltr">person *my_person;
</pre>
<p>The application then fetches an object into that variable through a <code class="codeph">SELECT</code> statement, such as:</p>
<pre dir="ltr">text *mystmt = (text *) &#34;SELECT person FROM employees
                        WHERE emp.name=&#39;Andrea&#39;&#34;;
</pre>
<p>This requires defining <code class="codeph">my_person</code> to be the output variable for this statement, using appropriate OCI define calls for named data types, as described in <a href="oci05bnd.htm#GUID-237FC150-290A-42B8-99CB-2C6AFA5B9F9E" title="This section covers advanced define operations, including multistep defines and defines of named data types and REFs.">Advanced Define Operations in OCI</a>. Executing the statement retrieves the <code class="codeph">person</code> object named <code class="codeph">Andrea</code> into the <code class="codeph">my_person</code> variable.</p>
<p>Once the object is retrieved into <code class="codeph">my_person</code>, the OCI application has access to the attributes of <code class="codeph">my_person</code>, including the name and the salary.</p>
<p>The application could go on to update another employee&#39;s salary to be the same as Andrea&#39;s, as in the following example:</p>
<pre dir="ltr">text *updstmt = (text *) &#34;UPDATE employees SET emp.salary = :newsal 
                            WHERE emp.name = &#39;MONGO&#39;&#34;;
</pre>
<p>Andrea&#39;s salary (stored in <code class="codeph">my_person-&gt;salary</code>) would be bound to the placeholder <code class="codeph">:newsal</code>, specifying an external data type of <code class="codeph">VARNUM</code> (data type code=6) in the bind operation:</p>
<pre dir="ltr">OCIBindByName(...,&#34;:newsal&#34;,...,&amp;my_person-&gt;salary,...,6,...);
OCIStmtExecute(...,updstmt,...);
</pre>
<p>Executing the statement updates Mongo&#39;s salary in the database to be equal to Andrea&#39;s, as stored in <code class="codeph">my_person.</code></p>
<p>Conversely, the application could update Andrea&#39;s salary to be the same as Mongo&#39;s, by querying the database for Mongo&#39;s salary, and then making the necessary salary assignment:</p>
<pre dir="ltr">text *selstmt = (text *) &#34;SELECT emp.salary FROM employees 
                           WHERE emp.name = &#39;MONGO&#39;&#34;;
OCINumber mongo_sal;
...
OCIDefineByPos(...,1,...,&amp;mongo_sal,...,6,...);
OCIStmtExecute(...,selstmt,...);
OCINumberAssign(...,&amp;mongo_sal, &amp;my_person-&gt;salary);
</pre>
<p>In this case, the application declares an output variable of type <code class="codeph">OCINumber</code> and uses it in the define step. The application also defines an output variable for position 1, and uses the appropriate data type code (6 for <code class="codeph">VARNUM</code>).</p>
<p>The salary value is fetched into the <code class="codeph">mongo_sal</code> <code class="codeph">OCINumber</code>, and the appropriate OCI function, <code class="codeph">OCINumberAssign()</code>, is used to assign the new salary to the copy of the <code class="codeph">Andrea</code> object currently in the cache. To modify the data in the database, the change must be flushed to the server.</p>
<div class="infoboxnotealso" id="GUID-2A93AB76-B6AE-4AEF-8785-07672740D8FE__GUID-FB30CB62-DF1F-4141-96D8-A74CCF66801E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci15ott.htm#GUID-3D22CA8E-BE01-492F-BA85-DDD0CD3F4890" title="This chapter discusses the Object Type Translator (OTT), which is used to map database object types and named collection types to C structs for use in OCI applications.">Using the Object Type Translator with OCI</a> for a complete discussion of OTT</p>
</li>
<li>
<p><a href="oci19map003.htm#GUID-0C78F351-550E-48F0-8D4C-A9AD8A28DA66">OCINumberAssign()</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72719"></a><a id="LNOCI16899"></a>
<div class="props_rev_3"><a id="GUID-BEF74B03-0936-47B4-A778-F8A140660C0A"></a>
<h3 id="LNOCI-GUID-BEF74B03-0936-47B4-A778-F8A140660C0A" class="sect3">Salary Update Examples</h3>
<div>
<p>Shows how the flow of calls is used to perform certain OCI tasks.</p>
<p>The examples in the previous section demonstrate the flexibility that the Oracle data types provide for bind and define operations. This section shows how you can perform the same operation in several different ways. You can use these data types in variety of ways in OCI applications.</p>
<p>The examples in this section demonstrate the flow of calls used to perform certain OCI tasks. An expanded pseudocode is used for these examples. Actual function names are used, but for simplicity not all parameters and typecasts are filled in. Other necessary OCI calls, such as handle allocations, have been omitted.</p>
<div class="section">
<p class="subhead3">The Scenario</p>
</div>
<!-- class="section" -->
<div class="section">
<p>The scenario for these examples is as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>An employee named <span class="italic"><code class="codeph">BRUCE</code></span> exists in the <code class="codeph">employees</code> table for a hospital. See <code class="codeph">person</code> type and <code class="codeph">employees</code> table creation statements in the previous section.</p>
</li>
<li>
<p>Bruce&#39;s current job title is <span class="italic"><code class="codeph">RADIOLOGIST</code></span>.</p>
</li>
<li>
<p>Bruce is being promoted to <span class="italic"><code class="codeph">RADIOLOGY_CHIEF</code></span>, and along with the promotion comes a salary increase.</p>
</li>
<li>
<p>Hospital salaries are in whole dollar values, are set according to job title, and are stored in a table called <code class="codeph">salaries</code>, defined as follows:</p>
<pre dir="ltr">CREATE TABLE salaries
(job_title   varchar2(20),
salary       integer));
</pre></li>
<li>
<p>Bruce&#39;s salary must be updated to reflect his promotion.</p>
</li>
</ul>
<p>To update Bruce&#39;s salary to reflect the promotion, the application must retrieve the salary corresponding to <span class="italic"><code class="codeph">RADIOLOGY_CHIEF</code></span> from the <code class="codeph">salaries</code> table, and update Bruce&#39;s salary. A separate step would write his new title and the modified object back to the database.</p>
<p>Assume that a variable of type <code class="codeph">person</code> has been declared as follows:</p>
<pre dir="ltr">person * my_person;
</pre>
<p>The object corresponding to Bruce has been fetched into <code class="codeph">person</code>. The following sections present three different ways in which the salary update could be performed.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-4869A21E-F28D-4C8F-80F4-E16914F2F39E">Method 1 - Fetch, Convert, Assign</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-137BADEE-01D3-4CD8-877B-C9F8F3C0FF96">Method 2 - Fetch and Assign</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-982DD352-E7F2-4FC4-AC02-395587A89366">Method 3 - Direct Fetch</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-BD07C7FA-8B8D-4AFE-B84E-DAEDFF4A4472">Summary and Notes</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="LNOCI72720"></a><a id="LNOCI16900"></a>
<div class="props_rev_3"><a id="GUID-4869A21E-F28D-4C8F-80F4-E16914F2F39E"></a>
<h4 id="LNOCI-GUID-4869A21E-F28D-4C8F-80F4-E16914F2F39E" class="sect4">Method 1 - Fetch, Convert, Assign</h4>
<div>
<div class="section">
<p><a href="oci12oty.htm#GUID-4869A21E-F28D-4C8F-80F4-E16914F2F39E__BGBCHECA">Example 12-13</a> uses the following method:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Do a traditional OCI define using an integer variable to retrieve the new salary from the database.</span></li>
<li><span>Convert the integer to an <code class="codeph">OCINumber.</code></span></li>
<li><span>Assign the new salary to Bruce.</span></li>
</ol>
<div class="example" id="GUID-4869A21E-F28D-4C8F-80F4-E16914F2F39E__BGBCHECA">
<p class="titleinexample">Example 12-13 Method 1 for a Salary Update: Fetch, Convert, and Assign</p>
<pre dir="ltr">#define INT_TYPE 3        /* data type code for sword integer define */

text *getsal = (text *) &#34;SELECT salary FROM salaries
                        WHERE job_title=&#39;RADIOLOGY_CHIEF&#39;&#34;;
sword    new_sal;
OCINumber   orl_new_sal;
...
OCIDefineByPos(...,1,...,new_sal,...,INT_TYPE,...);
                        /* define int output */
OCIStmtExecute(...,getsal,...);
                        /* get new salary as int */
OCINumberFromInt(...,new_sal,...,&amp;orl_new_sal);
                        /* convert salary to OCINumber */
OCINumberAssign(...,&amp;orl_new_sal, &amp;my_person-&gt;salary);
                        /* assign new salary */
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI72721"></a><a id="LNOCI16901"></a>
<div class="props_rev_3"><a id="GUID-137BADEE-01D3-4CD8-877B-C9F8F3C0FF96"></a>
<h4 id="LNOCI-GUID-137BADEE-01D3-4CD8-877B-C9F8F3C0FF96" class="sect4">Method 2 - Fetch and Assign</h4>
<div>
<div class="section">
<p>This method (<a href="oci12oty.htm#GUID-137BADEE-01D3-4CD8-877B-C9F8F3C0FF96__BGBFEAHJ">Example 12-14</a>) eliminates one of the steps described in Method 1.</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Define an output variable of type <code class="codeph">OCINumber</code>, so that no conversion is necessary after the value is retrieved.</span></li>
<li><span>Assign the new salary to Bruce.</span></li>
</ol>
<div class="example" id="GUID-137BADEE-01D3-4CD8-877B-C9F8F3C0FF96__BGBFEAHJ">
<p class="titleinexample">Example 12-14 Method 2 for a Salary Update: Fetch and Assign, No Convert</p>
<pre dir="ltr">#define VARNUM_TYPE 6         /* data type code for defining VARNUM */

text *getsal = (text *) &#34;SELECT salary FROM salaries
                              WHERE job_title=&#39;RADIOLOGY_CHIEF&#39;&#34;;
OCINumber   orl_new_sal;
...
OCIDefineByPos(...,1,...,orl_new_sal,...,VARNUM_TYPE,...);
                                     /* define OCINumber output */
OCIStmtExecute(...,getsal,...);      /* get new salary as OCINumber */
OCINumberAssign(...,&amp;orl_new_sal, &amp;my_person-&gt;salary); 
                                     /* assign new salary */
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI72722"></a><a id="LNOCI16902"></a>
<div class="props_rev_3"><a id="GUID-982DD352-E7F2-4FC4-AC02-395587A89366"></a>
<h4 id="LNOCI-GUID-982DD352-E7F2-4FC4-AC02-395587A89366" class="sect4">Method 3 - Direct Fetch</h4>
<div>
<div class="section">
<p>This method (<a href="oci12oty.htm#GUID-982DD352-E7F2-4FC4-AC02-395587A89366__BGBBEBFH">Example 12-15</a>) accomplishes the entire operation with a single define and fetch. No intervening output variable is used, and the value retrieved from the database is fetched directly into the salary attribute of the object stored in the cache.</p>
<p>Because the object corresponding to Bruce is pinned in the object cache, use the location of his salary attribute as the define variable, and execute or fetch directly into it.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-982DD352-E7F2-4FC4-AC02-395587A89366__BGBBEBFH">
<p class="titleinexample">Example 12-15 Method 3 for a Salary Update: Direct Fetch</p>
<pre dir="ltr">#define VARNUM_TYPE 6         /* data type code for defining VARNUM */

text *getsal = (text *) &#34;SELECT salary FROM salaries
                            WHERE job_title=&#39;RADIOLOGY_CHIEF&#39;&#34;;
...
OCIDefineByPos(...,1,...,&amp;my_person-&gt;salary,...,VARNUM_TYPE,...);
            /* define bruce&#39;s salary in cache as output variable */
OCIStmtExecute(...,getsal,...);
             /* execute and fetch directly */
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI16903"></a>
<div class="props_rev_3"><a id="GUID-BD07C7FA-8B8D-4AFE-B84E-DAEDFF4A4472"></a>
<h4 id="LNOCI-GUID-BD07C7FA-8B8D-4AFE-B84E-DAEDFF4A4472" class="sect4">Summary and Notes</h4>
<div>
<p>As the previous three examples show, the C data types provide flexibility for binding and defining. In these examples an integer can be fetched, and then converted to an <code class="codeph">OCINumber</code> for manipulation. You can use an <code class="codeph">OCINumber</code> as an intermediate variable to store the results of a query. Or, data can be fetched directly into a desired <code class="codeph">OCINumber</code> attribute of an object.</p>
<div class="infobox-note" id="GUID-BD07C7FA-8B8D-4AFE-B84E-DAEDFF4A4472__GUID-E77841C8-B569-4402-BB87-04FBEC8CA6AE">
<p class="notep1">Note:</p>
<p>In these examples it is important to remember that in OCI, if an output variable is defined before the execution of a query, the resulting data is prefetched directly into the output buffer.</p>
</div>
<p>In the preceding examples, extra steps would be necessary to ensure that the application writes changes to the database permanently. These might involve SQL <code class="codeph">UPDATE</code> calls and OCI transaction commit calls.</p>
<p>These examples all dealt with define operations, but a similar situation applies for binding.</p>
<p>Similarly, although these examples dealt exclusively with the <code class="codeph">OCINumber</code> type, a similar variety of operations are possible for the other Oracle C types described in the remainder of this chapter.</p>
</div>
</div>
</div>
</div>
<a id="LNOCI16904"></a>
<div class="props_rev_3"><a id="GUID-709C6AF1-8083-4E3E-B6DE-B8847C3E4693"></a>
<h2 id="LNOCI-GUID-709C6AF1-8083-4E3E-B6DE-B8847C3E4693" class="sect2">SQLT_NTY Bind and Define Examples</h2>
<div>
<p>The following code fragments demonstrate the use of the <code class="codeph">SQLT_NTY</code> named data type in the bind call including <code class="codeph">OCIBindObject()</code> and the <code class="codeph">SQLT_NTY</code> named data type in the define call including <code class="codeph">OCIDefineObject()</code>.</p>
<p>In each example, a previously defined SQL statement is being processed.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="oci12oty.htm#GUID-96E420B9-A980-43C6-AA62-44863B870728">SQLT_NTY Bind Example</a></p>
</li>
<li>
<p><a href="oci12oty.htm#GUID-697E6E01-86D9-4850-9332-79999AE1CF1E">SQLT_NTY Define Example</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-709C6AF1-8083-4E3E-B6DE-B8847C3E4693__GUID-BB59BA25-D0CA-45A3-B5FE-4DDDB4EA4DD8">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#GUID-F211198D-C88C-493B-A65E-2C2A95E6197B" title="Sets up additional attributes necessary for a named data type or REF define.">OCIDefineObject()</a></p>
</li>
</ul>
</div>
</div>
<a id="LNOCI72723"></a><a id="LNOCI16905"></a>
<div class="props_rev_3"><a id="GUID-96E420B9-A980-43C6-AA62-44863B870728"></a>
<h3 id="LNOCI-GUID-96E420B9-A980-43C6-AA62-44863B870728" class="sect3">SQLT_NTY Bind Example</h3>
<div>
<div class="section">
<p><a href="oci12oty.htm#GUID-96E420B9-A980-43C6-AA62-44863B870728__BGBCACCG">Example 12-16</a> shows how to use the <code class="codeph">SQLT_NTY</code> named data type in the bind call including <a href="oci16rel003.htm#GUID-384B5D31-165B-4661-A334-8C2B5E475AEF">OCIBindObject()</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-96E420B9-A980-43C6-AA62-44863B870728__BGBCACCG">
<p class="titleinexample">Example 12-16 Using the SQLT_NTY Bind Call Including OCIBindObject()</p>
<pre dir="ltr">/*
** This example performs a SQL insert statement
*/
void insert(envhp, svchp, stmthp, errhp, insstmt, nrows)
OCIEnv *envhp;
OCISvcCtx *svchp;
OCIStmt *stmthp;
OCIError *errhp;
text *insstmt;
ub2   nrows;
{
  OCIType *addr_tdo = (OCIType *)0 ;
  address  addrs;
  null_address naddrs;
  address *addr = &amp;addrs;
  null_address *naddr = &amp;naddrs;
  sword custno =300;
  OCIBind *bnd1p, *bnd2p;
  ub2 i;

  /* define the application request  */
  checkerr(errhp, OCIStmtPrepare(stmthp, errhp, (text *) insstmt,
           (ub4) strlen((char *)insstmt),
           (ub4) OCI_NTV_SYNTAX, (ub4) OCI_DEFAULT));

  /* bind the input variable */
 checkerr(errhp, OCIBindByName(stmthp, &amp;bnd1p, errhp, (text *) &#34;:custno&#34;,
          (sb4) -1, (void  *) &amp;custno,
          (sb4) sizeof(sword), SQLT_INT,
          (void  *) 0, (ub2 *)0, (ub2 *)0, (ub4) 0, (ub4 *) 0,
          (ub4) OCI_DEFAULT));

  checkerr(errhp, OCIBindByName(stmthp, &amp;bnd2p, errhp, (text *) &#34;:addr&#34;,
          (sb4) -1, (void  *) 0,
          (sb4) 0, SQLT_NTY, (void  *) 0, (ub2 *)0, (ub2 *)0,
          (ub4) 0, (ub4 *) 0, (ub4) OCI_DEFAULT));

  checkerr(errhp,
                OCITypeByName(envhp, errhp, svchp, (const text *)
                SCHEMA, (ub4) strlen((char *)SCHEMA),
                (const text *)&#34;ADDRESS_VALUE&#34;,
                (ub4) strlen((char *)&#34;ADDRESS_VALUE&#34;),
                (text *)0, 0, OCI_DURATION_SESSION,
                OCI_TYPEGET_HEADER, &amp;addr_tdo));

  if(!addr_tdo)
  {
    printf(&#34;Null tdo returned\n&#34;);
    return;
  }

  checkerr(errhp, OCIBindObject(bnd2p, errhp, addr_tdo, (void  **) &amp;addr,
        (ub4 *) 0, (void  **) &amp;naddr, (ub4 *) 0));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNOCI72724"></a><a id="LNOCI16906"></a>
<div class="props_rev_3"><a id="GUID-697E6E01-86D9-4850-9332-79999AE1CF1E"></a>
<h3 id="LNOCI-GUID-697E6E01-86D9-4850-9332-79999AE1CF1E" class="sect3">SQLT_NTY Define Example</h3>
<div>
<div class="section">
<p><a href="oci12oty.htm#GUID-697E6E01-86D9-4850-9332-79999AE1CF1E__BGBDFDAD">Example 12-17</a> shows how to use the <code class="codeph">SQLT_NTY</code> named data type in the define call including <a href="oci16rel003.htm#GUID-F211198D-C88C-493B-A65E-2C2A95E6197B" title="Sets up additional attributes necessary for a named data type or REF define.">OCIDefineObject()</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-697E6E01-86D9-4850-9332-79999AE1CF1E__BGBDFDAD">
<p class="titleinexample">Example 12-17 Using the SQLT_NTY Define Call Including OCIDefineObject()</p>
<pre dir="ltr">/*
** This example executes a SELECT statement from a table that includes
** an object.
*/

void selectval(envhp, svchp, stmthp, errhp)
OCIEnv *envhp;
OCISvcCtx *svchp;
OCIStmt *stmthp;
OCIError *errhp;
{
  OCIType *addr_tdo = (OCIType *)0;
  OCIDefine *defn1p, *defn2p;
  address *addr = (address *)NULL;
  sword custno =0;
  sb4 status;

  /* define the application request  */
  checkerr(errhp, OCIStmtPrepare(stmthp, errhp, (text *) selvalstmt,
                        (ub4) strlen((char *)selvalstmt),
                        (ub4) OCI_NTV_SYNTAX, (ub4) OCI_DEFAULT));

  /* define the output variable */
checkerr(errhp, OCIDefineByPos(stmthp, &amp;defn1p, errhp, (ub4) 1, (void  *)
       &amp;custno, (sb4) sizeof(sword), SQLT_INT, (void  *) 0, (ub2 *)0,
       (ub2 *)0, (ub4) OCI_DEFAULT));

checkerr(errhp, OCIDefineByPos(stmthp, &amp;defn2p, errhp, (ub4) 2, (void  *)
        0, (sb4) 0, SQLT_NTY, (void  *) 0, (ub2 *)0,
        (ub2 *)0, (ub4) OCI_DEFAULT));

checkerr(errhp,
               OCITypeByName(envhp, errhp, svchp, (const text *)
               SCHEMA, (ub4) strlen((char *)SCHEMA),
               (const text *) &#34;ADDRESS_VALUE&#34;,
               (ub4) strlen((char *)&#34;ADDRESS_VALUE&#34;),
               (text *)0, 0, OCI_DURATION_SESSION,
               OCI_TYPEGET_HEADER, &amp;addr_tdo));

  if(!addr_tdo)
  {
    printf(&#34;NULL tdo returned\n&#34;);
    return;
  }


  checkerr(errhp, OCIDefineObject(defn2p, errhp, addr_tdo, (void  **)
       &amp;addr, (ub4 *) 0, (void  **) 0, (ub4 *) 0));

  checkerr(errhp, OCIStmtExecute(svchp, stmthp, errhp, (ub4) 1, (ub4) 0,
       (OCISnapshot *) NULL, (OCISnapshot *) NULL, (ub4) OCI_DEFAULT));
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6150">
<tr>
<td class="cellalignment6162">
<table class="cellalignment6155">
<tr>
<td class="cellalignment6154"><a href="oci11obj.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6154"><a href="oci13obn.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6164">
<table class="cellalignment6153">
<tr>
<td class="cellalignment6154"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6154"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6154"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6154"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6154"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6154"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>