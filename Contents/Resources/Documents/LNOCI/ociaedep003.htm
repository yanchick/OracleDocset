<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-77742"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Deprecated%20Lob%20Functions"></a><title>Deprecated Lob Functions</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="OCILobCopy(), OCILobErase(), OCILobGetLength(), OCILobLoadFromFile(), OCILobRead(), SQLCS_IMPLICIT, Unicode, OCILobTrim(), OCILobWrite(), SQLCS_NCHAR, OCILobWriteAppend()"/>
<meta name="dcterms.created" content="2017-06-09T09:07:30Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49886-11"/>
<meta name="dcterms.isVersionOf" content="LNOCI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ociaedep002.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ociaedep004.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49886-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-9AAA282E-CCF4-4D93-9C04-4351E61E693F"></a> <span id="PAGE" style="display:none;">81/84</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='ociaedep003'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('about:blank', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');
    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'); 
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" ><head><title>');
   
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="LNOCI72896"></a><a id="LNOCI72895"></a>
<h1 id="LNOCI-GUID-9AAA282E-CCF4-4D93-9C04-4351E61E693F" class="sect1">Deprecated Lob Functions</h1>
<div>
<p><a href="ociaedep003.htm#GUID-9AAA282E-CCF4-4D93-9C04-4351E61E693F__CEGBHIAJ" title="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">Table E-4</a> lists the deprecated LOB functions that are described in this section.</p>
<div class="tblformal" id="GUID-9AAA282E-CCF4-4D93-9C04-4351E61E693F__CEGBHIAJ">
<p class="titleintable">Table E-4 Deprecated LOB Functions</p>
<table class="cellalignment6175" title="Deprecated LOB Functions " summary="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6268" id="d341459e162">Function</th>
<th class="cellalignment6269" id="d341459e165">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e170" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-2E89A469-397B-45BD-871B-4A7E7A5815C1" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobCopy()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e170 d341459e165">
<p>Copy all or part of one LOB to another.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e185" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-FD529B73-7D7B-4F93-BB01-4A4625503C36" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobErase()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e185 d341459e165">
<p>Erase a portion of a LOB.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e200" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-3CEE9E79-A7E5-4078-949B-BD0ED3FB4124" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobGetLength()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e200 d341459e165">
<p>Get length of a LOB.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e215" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-87C6AE88-5E71-4D89-A2B8-B391BFF73AC6" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobLoadFromFile()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e215 d341459e165">
<p>Load a LOB from a <code class="codeph">BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e233" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobRead()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e233 d341459e165">
<p>Read a portion of a LOB.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e248" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-2D1D8F83-040B-4923-9F02-108D1F636B20" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobTrim()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e248 d341459e165">
<p>Truncate a LOB.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e263" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobWrite()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e263 d341459e165">
<p>Write into a LOB.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d341459e278" headers="d341459e162">
<p><a href="ociaedep003.htm#GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8" title="This function was deprecated in a release previous to Oracle Database 11g Release 2 (11.2).">OCILobWriteAppend()</a></p>
</td>
<td class="cellalignment6271" headers="d341459e278 d341459e165">
<p>Write data beginning at the end of a LOB.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<a id="LNOCI72897"></a>
<div class="props_rev_3"><a id="GUID-2E89A469-397B-45BD-871B-4A7E7A5815C1"></a>
<h2 id="LNOCI-GUID-2E89A469-397B-45BD-871B-4A7E7A5815C1" class="sect2">OCILobCopy()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Copies all or a portion of a LOB value into another LOB value. This function is deprecated. Use <a href="oci17msc002.htm#GUID-404C8A50-516F-4DFD-939D-646A232AF7DF">OCILobCopy2()</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobCopy ( OCISvcCtx        *svchp,
                   OCIError         *errhp,
                   OCILobLocator    *dst_locp,
                   OCILobLocator    *src_locp,
                   ub4               amount,
                   ub4               dst_offset,
                   ub4               src_offset );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI17186"></a>
<div class="props_rev_3"><a id="GUID-FD529B73-7D7B-4F93-BB01-4A4625503C36"></a>
<h2 id="LNOCI-GUID-FD529B73-7D7B-4F93-BB01-4A4625503C36" class="sect2">OCILobErase()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Erases a specified portion of the internal LOB data starting at a specified offset. This function is deprecated. Use <code class="codeph">OCILobErase2()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobErase ( OCISvcCtx       *svchp,
                    OCIError        *errhp,
                    OCILobLocator   *locp,
                    ub4             *amount,
                    ub4              offset );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI17199"></a>
<div class="props_rev_3"><a id="GUID-3CEE9E79-A7E5-4078-949B-BD0ED3FB4124"></a>
<h2 id="LNOCI-GUID-3CEE9E79-A7E5-4078-949B-BD0ED3FB4124" class="sect2">OCILobGetLength()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Gets the length of a LOB. This function is deprecated. Use <code class="codeph">OCILobGetLength2()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobGetLength ( OCISvcCtx      *svchp,
                        OCIError       *errhp,
                        OCILobLocator  *locp,
                        ub4            *lenp );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI17207"></a>
<div class="props_rev_3"><a id="GUID-87C6AE88-5E71-4D89-A2B8-B391BFF73AC6"></a>
<h2 id="LNOCI-GUID-87C6AE88-5E71-4D89-A2B8-B391BFF73AC6" class="sect2">OCILobLoadFromFile()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Loads and copies all or a portion of the file into an internal LOB. This function is deprecated. Use <code class="codeph">OCILobLoadFromFile2()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobLoadFromFile ( OCISvcCtx        *svchp, 
                           OCIError         *errhp, 
                           OCILobLocator    *dst_locp, 
                           OCILobLocator    *src_locp, 
                           ub4               amount, 
                           ub4               dst_offset, 
                           ub4               src_offset ); 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI17213"></a><a id="LNOCI17212"></a>
<div class="props_rev_3"><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03"></a>
<h2 id="LNOCI-GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03" class="sect2">OCILobRead()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Reads a portion of a LOB or <code class="codeph">BFILE</code>, as specified by the call, into a buffer. This function is deprecated. Use <code class="codeph">OCILobRead2()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobRead ( OCISvcCtx          *svchp,
                   OCIError           *errhp,
                   OCILobLocator      *locp,
                   ub4                *amtp,
                   ub4                 offset,
                   void               *bufp,
                   ub4                 bufl,
                   void               *ctxp, 
                   OCICallbackLobRead (cbfp)
                                      ( void          *ctxp,
                                        const void    *bufp,
                                        ub4            len,
                                        ub1            piece 
                                      )
                   ub2                 csid,
                   ub1                 csfrm );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77696"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-9F94A8BF-E5A2-4D37-9032-0D43E7083E19"><!-- --></a><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77697"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-84CAEADE-134B-4669-AF65-D70B2D2594F8"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#GUID-4B99087C-74F6-498A-8310-D6645172390A" title="Returns an error message and an Oracle Database error code.">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77698"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-1FFD4E7D-D22A-4B5D-82CE-1770CFB2913E"><!-- --></a><span class="bold">locp</span> (IN)</dt>
<dd>
<p>A LOB or <code class="codeph">BFILE</code> locator that uniquely references the LOB or <code class="codeph">BFILE</code>. This locator must have been a locator that was obtained from the server specified by <code class="codeph">svchp</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77699"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-EDA99AF5-5F3F-406F-A669-B1477EF9A792"><!-- --></a><span class="bold">amtp</span> (IN/OUT)</dt>
<dd>
<p>The value in <code class="codeph">amtp</code> is the amount in either bytes or characters, as shown in <a href="ociaedep003.htm#GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__CIHDFFII" title="This table has 4 columns. Column 1 is LOB or BFILE, column 2 is input, column 3 is output with fixed-width client-side character set, and column 4 is output with varying-width client-side character set.">Table E-5</a>.</p>
</dd>
</dl>
<div class="tblformal" id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__CIHDFFII">
<p class="titleintable">Table E-5 Characters or Bytes in amtp for OCILobRead()</p>
<table class="cellalignment6175" title="Characters or Bytes in amtp for OCILobRead()" summary="This table has 4 columns. Column 1 is LOB or BFILE, column 2 is input, column 3 is output with fixed-width client-side character set, and column 4 is output with varying-width client-side character set.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6166" id="d341459e1230">LOB or BFILE</th>
<th class="cellalignment6187" id="d341459e1233">Input</th>
<th class="cellalignment6254" id="d341459e1236">Output with Fixed-Width Client-Side Character Set</th>
<th class="cellalignment6268" id="d341459e1239">Output with Varying-Width Client-Side Character Set</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6170" id="d341459e1244" headers="d341459e1230">
<p><code class="codeph">BLOB</code>s and <code class="codeph">BFILE</code>s</p>
</td>
<td class="cellalignment6190" headers="d341459e1244 d341459e1233">
<p>bytes</p>
</td>
<td class="cellalignment6256" headers="d341459e1244 d341459e1236">
<p>bytes</p>
</td>
<td class="cellalignment6270" headers="d341459e1244 d341459e1239">
<p>bytes</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6170" id="d341459e1262" headers="d341459e1230">
<p><code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s</p>
</td>
<td class="cellalignment6190" headers="d341459e1262 d341459e1233">
<p>characters</p>
</td>
<td class="cellalignment6256" headers="d341459e1262 d341459e1236">
<p>characters</p>
</td>
<td class="cellalignment6270" headers="d341459e1262 d341459e1239">
<p>bytes <a id="fn_1" href="#fn_1" onclick="footdisplay(1,&#34;The input amount refers to the number of characters to be read from the server-side CLOB or NCLOB. The output amount indicates how many bytes were read into the buffer bufp. &#34;)"><sup>Foot&nbsp;1</sup></a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1</sup></p>
<p>The input amount refers to the number of characters to be read from the server-side <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code>. The output amount indicates how many bytes were read into the buffer <code class="codeph">bufp</code>.</p>
<p>The parameter <code class="codeph">amtp</code> is the total amount of data read if:</p>
<ul style="list-style-type: disc;">
<li>
<p>Data is not read in streamed mode (only one piece is read and there is no polling or callback)</p>
</li>
<li>
<p>Data is read in streamed mode with a callback</p>
</li>
</ul>
<p>The parameter <code class="codeph">amtp</code> is the length of the last piece read if the data is read in streamed mode using polling.</p>
<p>If the amount to be read is larger than the buffer length, it is assumed that the LOB is being read in a streamed mode from the input offset until the end of the LOB, or until the specified number of bytes have been read, whichever comes first. On input, if this value is 0, then the data is read in streamed mode from the input offset until the end of the LOB.</p>
<p>The streamed mode (implemented with either polling or callbacks) reads the LOB value sequentially from the input offset.</p>
<p>If the data is read in pieces, the <code class="codeph">amtp</code> parameter always contains the length of the piece just read.</p>
<p>If a callback function is defined, then this callback function is invoked each time <code class="codeph">bufl</code> bytes are read off the pipe. Each piece is written into <code class="codeph">bufp</code>.</p>
<p>If the callback function is not defined, then the <code class="codeph">OCI_NEED_DATA</code> error code is returned. The application must call <code class="codeph">OCILobRead()</code> over and over again to read more pieces of the LOB until the <code class="codeph">OCI_NEED_DATA</code> error code is not returned. The buffer pointer and the length can be different in each call if the pieces are being read into different sizes and locations.</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77700"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-35796827-34F2-46FC-80F1-CA913782F473"><!-- --></a><span class="bold">offset</span> (IN)</dt>
<dd>
<p>On input, this is the absolute offset from the beginning of the LOB value. For character LOBs (<code class="codeph">CLOB</code>s, <code class="codeph">NCLOB</code>s) it is the number of characters from the beginning of the LOB, for binary LOBs or <code class="codeph">BFILE</code>s it is the number of bytes. The first position is 1.</p>
<p>If you use streaming (by polling or a callback), specify the offset in the first call; in subsequent polling calls, the offset parameter is ignored. When you use a callback, there is no offset parameter.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77701"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-B275576B-9903-4488-8B2E-9AE6C52DE0CE"><!-- --></a><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>The pointer to a buffer into which the piece is read. The length of the allocated memory is assumed to be <code class="codeph">bufl</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77702"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-1930E611-F040-4CA2-9992-15204ABCF0FA"><!-- --></a><span class="bold">bufl</span> (IN)</dt>
<dd>
<p>The length of the buffer in octets. This value differs from the <code class="codeph">amtp</code> value for <code class="codeph">CLOB</code>s and for <code class="codeph">NCLOB</code>s (<code class="codeph">csfrm</code>=<code class="codeph">SQLCS_NCHAR</code>) when the <code class="codeph">amtp</code> parameter is specified in terms of characters, and the <code class="codeph">bufl</code> parameter is specified in terms of bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77703"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-133883BB-FFD6-4E8B-8CD1-E63073A24E77"><!-- --></a><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context pointer for the callback function. Can be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77704"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-63988663-03CD-4D18-85FF-1D17B06061DD"><!-- --></a><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece. If this is <code class="codeph">NULL</code>, then <code class="codeph">OCI_NEED_DATA</code> is returned for each piece.</p>
<p>The callback function must return <code class="codeph">OCI_CONTINUE</code> for the read to continue. If any other error code is returned, the LOB read is terminated.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77705"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-B2A75BF7-CBA0-48B5-A965-75B4CD317192"><!-- --></a><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77706"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-06FCFFDD-5BC4-43F9-9FBE-563134609468"><!-- --></a><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77707"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-0C01A921-9331-497B-B55E-87E100FBD663"><!-- --></a><span class="bold">len</span> (IN)</dt>
<dd>
<p>The length in bytes of the current piece in <code class="codeph">bufp</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77708"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-4F8B2BAB-8059-4221-BAC6-7C3B4B9592C6"><!-- --></a><span class="bold">piece</span> (IN)</dt>
<dd>
<p>Which piece: <code class="codeph">OCI_FIRST_PIECE</code>, <code class="codeph">OCI_NEXT_PIECE</code>, or <code class="codeph">OCI_LAST_PIECE</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77709"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-CA5A34F4-2B69-4C40-BAD3-6D4D0288F422"><!-- --></a><span class="bold">csid</span> (IN)</dt>
<dd>
<p>The character set ID of the buffer data. If this value is 0, then <code class="codeph">csid</code> is set to the client&#39;s <code class="codeph">NLS_LANG</code> or <code class="codeph">NLS_CHAR</code> value, depending on the value of <code class="codeph">csfrm</code>. It is never assumed to be the server&#39;s character set, unless the server and client have the same settings.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77710"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-C96CCC0C-2360-4A7F-9A09-A91099701983"><!-- --></a><span class="bold">csfrm (IN)</span></dt>
<dd>
<p>The character set form of the buffer data. The <code class="codeph">csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code class="codeph">csfrm</code> parameter has two possible nonzero values:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><code class="codeph">SQLCS_NCHAR</code> - NCHAR character set ID</p>
</li>
</ul>
<p>The default value is <code class="codeph">SQLCS_IMPLICIT</code>. If <code class="codeph">csfrm</code> is not specified, the default is assumed.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Reads a portion of a LOB or <code class="codeph">BFILE</code> as specified by the call into a buffer. It is an error to try to read from a <code class="codeph">NULL</code> LOB or <code class="codeph">BFILE</code>.</p>
<div class="infobox-note" id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-3C1EBC7F-3AA0-4F31-B73A-89487C111AE6">
<p class="notep1">Note:</p>
<p>When you read or write LOBs, specify a character set form (<code class="codeph">csfrm</code>) that matches the form of the locator itself.</p>
</div>
<p>For <code class="codeph">BFILE</code>s, the operating system file must exist on the server, and it must have been opened by <a href="oci17msc002.htm#GUID-2E933BBA-BCE3-41F2-B8A2-4F9485F0BCB0" title="Opens a BFILE on the file system of the server for read-only access.">OCILobFileOpen()</a> or <a href="oci17msc002.htm#GUID-B007A3C7-999B-4AD7-8BF7-C6D14572F470" title="Opens a LOB, internal or external, in the indicated mode.">OCILobOpen()</a> using the input locator. Oracle Database must have permission to read the operating system file, and the user must have read permission on the directory object.</p>
<p>When you use the polling mode for <code class="codeph">OCILobRead()</code>, the first call must specify values for <code class="codeph">offset</code> and <code class="codeph">amtp</code>, but on subsequent polling calls to <code class="codeph">OCILobRead()</code>, you need not specify these values.</p>
<p>If the LOB is a <code class="codeph">BLOB</code>, the <code class="codeph">csid</code> and <code class="codeph">csfrm</code> parameters are ignored.</p>
<div class="infobox-note" id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-44A225FD-9509-4B8D-80DB-A1614E24A568">
<p class="notep1">Note:</p>
<p>To terminate an <code class="codeph">OCILobRead()</code> operation and free the statement handle, use the <a href="oci17msc007.htm#GUID-A414B5DE-07A3-4593-A448-B6023F87C2D0" title="Performs an immediate asynchronous break.">OCIBreak()</a> call.</p>
</div>
<p>The following apply to client-side varying-width character sets for <code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s:</p>
<ul style="list-style-type: disc;">
<li>
<p>When you use polling mode, be sure to specify the <code class="codeph">amtp</code> and <code class="codeph">offset</code> parameters only in the first call to <code class="codeph">OCILobRead()</code>. On subsequent polling calls, these parameters are ignored.</p>
</li>
<li>
<p>When you use callbacks, the <code class="codeph">len</code> parameter, which is input to the callback, indicates how many bytes are filled in the buffer. Check the <code class="codeph">len</code> parameter during your callback processing because the entire buffer cannot be filled with data.</p>
</li>
</ul>
<p>The following applies to client-side fixed-width character sets and server-side varying-width character sets for <code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s:</p>
<ul style="list-style-type: disc;">
<li>
<p>When reading a <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> value, look at the <code class="codeph">amtp</code> parameter after every call to <code class="codeph">OCILobRead()</code> to see how much of the buffer is filled. When the return value is in characters (as when the client-side character set is fixed-width), then convert this value to bytes and determine how much of the buffer is filled. When you use callbacks, always check the <code class="codeph">len</code> parameter to see how much of the buffer is filled. This value is always in bytes.</p>
</li>
</ul>
<p>To read data in UTF-16 format, set the <code class="codeph">csid</code> parameter to <code class="codeph">OCI_UTF16ID</code>. If the <code class="codeph">csid</code> parameter is set, it overrides the <code class="codeph">NLS_LANG</code> environment variable.</p>
<div class="infoboxnotealso" id="GUID-4F904ADC-547E-40CE-8F2F-98C7D7480D03__GUID-89B4B916-A4B5-4627-B9E5-1DC961009ECF">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci05bnd.htm#GUID-5495CEEB-17D0-4185-8879-3356A21E7888">PL/SQL REF CURSORs and Nested Tables in OCI</a> for additional information about Unicode format</p>
</li>
<li>
<p><a class="olink ADLOB012" target="_blank" href="../ADLOB/adlob_bfile_ops.htm#ADLOB012"><span><cite>Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</cite></span></a> for a description of <code class="codeph">BFILE</code>s</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#GUID-75E18629-0C54-4495-A747-AFB346034F26" title="Lists example programs with sample code demonstrating the allocation and use of OCI handles.">OCI Demonstration Programs</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#GUID-6C5EA0C6-0C1D-4CD5-B47F-1B95B4E9C558" title="You can use OCI to perform piecewise inserts, updates, and fetches of data.">Runtime Data Allocation and Piecewise Operations in OCI</a> for general information about piecewise OCI operations</p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-83F4D3B1-56A7-4EEE-A905-BB84D399713D">Polling Mode Operations in OCI</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI17217"></a>
<div class="props_rev_3"><a id="GUID-2D1D8F83-040B-4923-9F02-108D1F636B20"></a>
<h2 id="LNOCI-GUID-2D1D8F83-040B-4923-9F02-108D1F636B20" class="sect2">OCILobTrim()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Truncates the LOB value to a shorter length. This function is deprecated. Use <a href="oci17msc002.htm#GUID-ABDB1543-1782-4216-AD80-55FA82CFF733">OCILobTrim2()</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobTrim ( OCISvcCtx       *svchp,
                   OCIError        *errhp,
                   OCILobLocator   *locp,
                   ub4              newlen );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI17220"></a><a id="LNOCI17219"></a>
<div class="props_rev_3"><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854"></a>
<h2 id="LNOCI-GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854" class="sect2">OCILobWrite()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Writes a buffer into a LOB. This function is deprecated. Use <code class="codeph">OCILobWrite2()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobWrite ( OCISvcCtx       *svchp,
                    OCIError        *errhp,
                    OCILobLocator   *locp,
                    ub4             *amtp,
                    ub4              offset,
                    void            *bufp, 
                    ub4              buflen,
                    ub1              piece,
                    void            *ctxp, 
                    OCICallbackLobWrite      (cbfp)
                                    (
                                      void     *ctxp,
                                      void     *bufp,
                                      ub4      *lenp,
                                      ub1      *piecep
                                    ) 
                    ub2              csid,
                    ub1              csfrm );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77711"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-F5692DBD-4D30-4B45-B81B-E955F61B31B4"><!-- --></a><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77712"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-DD2D9A63-36ED-4F96-9A96-BA9CF6B15462"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#GUID-4B99087C-74F6-498A-8310-D6645172390A" title="Returns an error message and an Oracle Database error code.">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77713"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-67778583-65EC-4BCE-B3AD-CC3A2DDC5C38"><!-- --></a><span class="bold">locp</span> (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references the LOB. This locator must have been a locator that was obtained from the server specified by <code class="codeph">svchp</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77714"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-5B686A9D-AFE9-4D4B-8017-B03D8EC493FE"><!-- --></a><span class="bold">amtp</span> (IN/OUT)</dt>
<dd>
<p>The value in <code class="codeph">amtp</code> is the amount in either bytes or characters, as shown in <a href="ociaedep003.htm#GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__CIHFHDAB" title="This table has 4 columns. Column 1 is LOB or BFILE, column 2 is input with fixed-width client-side character set, and column 3 is input with varying-width client-side character set, and column 4 is output.">Table E-6</a>.</p>
</dd>
</dl>
<div class="tblformal" id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__CIHFHDAB">
<p class="titleintable">Table E-6 Characters or Bytes in amtp for OCILobWrite()</p>
<table class="cellalignment6175" title="Characters or Bytes in amtp for OCILobWrite()" summary="This table has 4 columns. Column 1 is LOB or BFILE, column 2 is input with fixed-width client-side character set, and column 3 is input with varying-width client-side character set, and column 4 is output.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6245" id="d341459e2134">LOB or BFILE</th>
<th class="cellalignment6268" id="d341459e2137">Input with Fixed-Width Client-Side Character Set</th>
<th class="cellalignment6268" id="d341459e2140">Input with Varying-Width Client-Side Character Set</th>
<th class="cellalignment6223" id="d341459e2143">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d341459e2148" headers="d341459e2134">
<p><code class="codeph">BLOB</code>s and <code class="codeph">BFILE</code>s</p>
</td>
<td class="cellalignment6270" headers="d341459e2148 d341459e2137">
<p>bytes</p>
</td>
<td class="cellalignment6270" headers="d341459e2148 d341459e2140">
<p>bytes</p>
</td>
<td class="cellalignment6225" headers="d341459e2148 d341459e2143">
<p>bytes</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d341459e2166" headers="d341459e2134">
<p><code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s</p>
</td>
<td class="cellalignment6270" headers="d341459e2166 d341459e2137">
<p>characters</p>
</td>
<td class="cellalignment6270" headers="d341459e2166 d341459e2140">
<p>bytes <a id="fn_2" href="#fn_2" onclick="footdisplay(2,&#34;The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the bufp, which is specified by buflen. If data is written in pieces, the amount of bytes to write may be larger than the buflen. The output amount refers to the number of characters written into the server-side CLOB or NCLOB. &#34;)"><sup>Foot&nbsp;2</sup></a></p>
</td>
<td class="cellalignment6225" headers="d341459e2166 d341459e2143">
<p>characters</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2</sup></p>
<p>The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the <code class="codeph">bufp</code>, which is specified by <code class="codeph">buflen</code>. If data is written in pieces, the amount of bytes to write may be larger than the <code class="codeph">buflen</code>. The output amount refers to the number of characters written into the server-side <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code>.</p>
<p>This should <span class="italic">always</span> be a non-<code class="codeph">NULL</code> pointer. If you want to specify write-until-end-of-file, then you must declare a variable, set it equal to zero, and pass its address for this parameter.</p>
<p>If the amount is specified on input, and the data is written in pieces, the parameter <code class="codeph">amtp</code> contains the total length of the pieces written at the end of the call (last piece written) and is undefined in between. Note that it is different from the piecewise read case. An error is returned if that amount is not sent to the server.</p>
<p>If <code class="codeph">amtp</code> is zero, then streaming mode is assumed, and data is written until the user specifies <code class="codeph">OCI_LAST_PIECE</code>.</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77715"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-82143EA4-606A-4B65-86EA-562E1CF2B955"><!-- --></a><span class="bold">offset</span> (IN)</dt>
<dd>
<p>On input, it is the absolute offset from the beginning of the LOB value. For character LOBs, it is the number of characters from the beginning of the LOB; for binary LOBs, it is the number of bytes. The first position is 1.</p>
<p>If you use streaming (by polling or a callback), specify the offset in the first call; in subsequent polling calls, the offset parameter is ignored. When you use a callback, there is no offset parameter.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77716"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-5B3D49EE-6F6E-4AEB-8A3E-477514BE0267"><!-- --></a><span class="bold">bufp</span> (IN)</dt>
<dd>
<p>The pointer to a buffer from which the piece is written. The length of the data in the buffer is assumed to be the value passed in <code class="codeph">buflen</code>. Even if the data is being written in pieces using the polling method, <code class="codeph">bufp</code> must contain the first piece of the LOB when this call is invoked. If a callback is provided, <code class="codeph">bufp</code> must not be used to provide data or an error results.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77717"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-4A83CE3C-A4B0-48C3-8843-38F8E6132BAB"><!-- --></a><span class="bold">buflen</span> (IN)</dt>
<dd>
<p>The length, in bytes, of the data in the buffer. This value differs from the <code class="codeph">amtp</code> value for <code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s when the <code class="codeph">amtp</code> parameter is specified in terms of characters, and the <code class="codeph">buflen</code> parameter is specified in terms of bytes.</p>
<div class="infobox-note" id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-BE02CF68-FA7B-4E97-8FCE-35AD48E93C09">
<p class="notep1">Note:</p>
<p>This parameter assumes an 8-bit byte. If your operating system uses a longer byte, you must adjust the value of <code class="codeph">buflen</code> accordingly.</p>
</div>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77718"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-D20270EE-A5E7-4392-A302-FF494E13FF62"><!-- --></a><span class="bold">piece</span> (IN)</dt>
<dd>
<p>Which piece of the buffer is being written. The default value for this parameter is <code class="codeph">OCI_ONE_PIECE</code>, indicating that the buffer is written in a single piece. The following other values are also possible for piecewise or callback mode: <code class="codeph">OCI_FIRST_PIECE</code>, <code class="codeph">OCI_NEXT_PIECE</code>, and <code class="codeph">OCI_LAST_PIECE</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77719"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-24FB0584-825F-459B-B748-D203C9620684"><!-- --></a><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77720"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-88BF21B1-FB07-4B8D-B021-4096C9AD2E1E"><!-- --></a><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece in a piecewise write. If this is <code class="codeph">NULL</code>, the standard polling method is used.</p>
<p>The callback function must return <code class="codeph">OCI_CONTINUE</code> for the write to continue. If any other error code is returned, the LOB write is terminated. The callback takes the following parameters:</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77721"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-CF21F381-105A-4A39-8242-7DF0B09311BE"><!-- --></a><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77722"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-7D5C32D5-597C-4FFD-8945-FB163710CF35"><!-- --></a><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece. This is the same as the <code class="codeph">bufp</code> passed as an input to the <code class="codeph">OCILobWrite()</code> routine.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77723"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-302F761F-B315-4289-803B-7A7BC5A746D5"><!-- --></a><span class="bold">lenp</span> (IN/OUT)</dt>
<dd>
<p>The length (in bytes) of the data in the buffer (IN), and the length (in bytes) of the current piece in <code class="codeph">bufp</code> (OUT).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77724"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-684F059C-A1BA-4A84-AD43-C93E274AEDE2"><!-- --></a><span class="bold">piecep</span> (OUT)</dt>
<dd>
<p>Which piece: <code class="codeph">OCI_NEXT_PIECE</code> or <code class="codeph">OCI_LAST_PIECE</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77725"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-4F008A69-C061-4228-A48E-0D94B75E4EC9"><!-- --></a>csid (IN)</dt>
<dd>
<p>The character set ID of the data in the buffer. If this value is 0, then <code class="codeph">csid</code> is set to the client&#39;s <code class="codeph">NLS_LANG</code> or <code class="codeph">NLS_CHAR</code> value, depending on the value of <code class="codeph">csfrm</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77726"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-D2E2AD87-B2D4-45DC-80C5-7B88647C4B4C"><!-- --></a>csfrm (IN)</dt>
<dd>
<p>The character set form of the buffer data. The <code class="codeph">csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code class="codeph">csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><code class="codeph">SQLCS_NCHAR</code> - <code class="codeph">NCHAR</code> character set ID</p>
</li>
</ul>
<p>The default value is <code class="codeph">SQLCS_IMPLICIT</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Writes a buffer into an internal LOB as specified. If LOB data exists, it is overwritten with the data stored in the buffer. The buffer can be written to the LOB in a single piece with this call, or it can be provided piecewise using callbacks or a standard polling method.</p>
<div class="infobox-note" id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-040BE9E1-955F-4B2A-BDEC-BA47A65C6589">
<p class="notep1">Note:</p>
<p>When you read or write LOBs, specify a character set form (<code class="codeph">csfrm</code>) that matches the form of the locator itself.</p>
</div>
<p>When you use the polling mode for <code class="codeph">OCILobWrite()</code>, the first call must specify values for <code class="codeph">offset</code> and <code class="codeph">amtp</code>, but on subsequent polling calls to <code class="codeph">OCILobWrite()</code>, you need not specify these values.</p>
<p>If the value of the <code class="codeph">piece</code> parameter is <code class="codeph">OCI_FIRST_PIECE</code>, data may need to be provided through callbacks or polling.</p>
<p>If a callback function is defined in the <code class="codeph">cbfp</code> parameter, then this callback function is invoked to get the next piece after a piece is written to the pipe. Each piece is written from <code class="codeph">bufp</code>. If no callback function is defined, then <code class="codeph">OCILobWrite()</code> returns the <code class="codeph">OCI_NEED_DATA</code> error code. The application must call <code class="codeph">OCILobWrite()</code> again to write more pieces of the LOB. In this mode, the buffer pointer and the length can be different in each call if the pieces are of different sizes and from different locations.</p>
<p>A <code class="codeph">piece</code> value of <code class="codeph">OCI_LAST_PIECE</code> terminates the piecewise write, regardless of whether the polling or callback method is used.</p>
<p>If the amount of data passed to Oracle Database (through either input mechanism) is less than the amount specified by the <code class="codeph">amtp</code> parameter, an ORA-22993 error is returned.</p>
<p>This function is valid for internal LOBs only. <code class="codeph">BFILE</code>s are not allowed, because they are read-only. If the LOB is a <code class="codeph">BLOB</code>, the <code class="codeph">csid</code> and <code class="codeph">csfrm</code> parameters are ignored.</p>
<p>If the client-side character set is varying-width, then the input amount is in bytes and the output amount is in characters for <code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s. The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the <code class="codeph">bufp</code>, which is specified by <code class="codeph">buflen</code>. If data is written in pieces, the amount of bytes to write may be larger than the <code class="codeph">buflen</code>. The output amount refers to the number of characters written into the server-side <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code>.</p>
<p>To write data in UTF-16 format, set the <code class="codeph">csid</code> parameter to <code class="codeph">OCI_UTF16ID</code>. If the <code class="codeph">csid</code> parameter is set, it overrides the <code class="codeph">NLS_LANG</code> environment variable.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit or roll back your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso" id="GUID-CA0A90B9-0BB0-4017-AC53-996A102A7854__GUID-15AEE649-0B43-4921-9B67-74A17ABCCEAF">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="oci05bnd.htm#GUID-5495CEEB-17D0-4185-8879-3356A21E7888">PL/SQL REF CURSORs and Nested Tables in OCI</a> for additional information about Unicode format</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#GUID-75E18629-0C54-4495-A747-AFB346034F26" title="Lists example programs with sample code demonstrating the allocation and use of OCI handles.">OCI Demonstration Programs</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#GUID-6C5EA0C6-0C1D-4CD5-B47F-1B95B4E9C558" title="You can use OCI to perform piecewise inserts, updates, and fetches of data.">Runtime Data Allocation and Piecewise Operations in OCI</a> for general information about piecewise OCI operations</p>
</li>
<li>
<p><a href="oci02bas.htm#GUID-83F4D3B1-56A7-4EEE-A905-BB84D399713D">Polling Mode Operations in OCI</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI17223"></a><a id="LNOCI17222"></a>
<div class="props_rev_3"><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8"></a>
<h2 id="LNOCI-GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8" class="sect2">OCILobWriteAppend()</h2>
<div>
<p>This function was deprecated in a release previous to Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Writes data starting at the end of a LOB. This function is deprecated. Use <a href="oci17msc002.htm#GUID-87D3275A-B042-4991-B261-AB531BB83CA2" title="Writes data starting at the end of a LOB. This function must be used for LOBs of size greater than 4 GB.">OCILobWriteAppend2()</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILobWriteAppend ( OCISvcCtx     *svchp,
                          OCIError      *errhp,
                          OCILobLocator *locp,
                          ub4           *amtp,
                          void          *bufp, 
                          ub4            buflen, 
                          ub1            piece, 
                          void          *ctxp, 
                          OCICallbackLobWrite       (cbfp)
                                         (
                                           void     *ctxp,
                                           void     *bufp,
                                           ub4      *lenp,
                                           ub1      *piecep
                                         ) 
                          ub2            csid, 
                          ub1            csfrm );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77727"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-D3D60590-DDCE-4E77-8784-F28B771AC152"><!-- --></a>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77728"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-C8FF80B5-A42C-4293-ADA9-BB61AF88EBF9"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#GUID-4B99087C-74F6-498A-8310-D6645172390A" title="Returns an error message and an Oracle Database error code.">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77729"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-ADEBFD7A-DB1D-441F-9389-86185F81BE21"><!-- --></a>locp (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references a LOB.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77730"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-85149587-050A-4E89-94BA-643DABCC2320"><!-- --></a>amtp (IN/OUT)</dt>
<dd>
<p>The value in <code class="codeph">amtp</code> is the amount in either bytes or characters, as shown in <a href="ociaedep003.htm#GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__CIHJGDCI" title="This table has 4 columns. Column 1 is LOB or BFILE, column 2 is input with fixed-width client-side character set, and column 3 is input with varying-width client-side character set, and column 4 is output.">Table E-7</a>.</p>
</dd>
</dl>
<div class="tblformal" id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__CIHJGDCI">
<p class="titleintable">Table E-7 Characters or Bytes in amtp for OCILobWriteAppend()</p>
<table class="cellalignment6175" title="Characters or Bytes in amtp for OCILobWriteAppend()" summary="This table has 4 columns. Column 1 is LOB or BFILE, column 2 is input with fixed-width client-side character set, and column 3 is input with varying-width client-side character set, and column 4 is output.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6245" id="d341459e2809">LOB or BFILE</th>
<th class="cellalignment6268" id="d341459e2812">Input with Fixed-Width Client-Side Character Set</th>
<th class="cellalignment6268" id="d341459e2815">Input with Varying-Width Client-Side Character Set</th>
<th class="cellalignment6223" id="d341459e2818">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d341459e2823" headers="d341459e2809">
<p><code class="codeph">BLOB</code>s and <code class="codeph">BFILE</code>s</p>
</td>
<td class="cellalignment6270" headers="d341459e2823 d341459e2812">
<p>bytes</p>
</td>
<td class="cellalignment6270" headers="d341459e2823 d341459e2815">
<p>bytes</p>
</td>
<td class="cellalignment6225" headers="d341459e2823 d341459e2818">
<p>bytes</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6246" id="d341459e2841" headers="d341459e2809">
<p><code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s</p>
</td>
<td class="cellalignment6270" headers="d341459e2841 d341459e2812">
<p>characters</p>
</td>
<td class="cellalignment6270" headers="d341459e2841 d341459e2815">
<p>bytes <a id="fn_3" href="#fn_3" onclick="footdisplay(3,&#34;The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the bufp, which is specified by buflen. If data is written in pieces, the amount of bytes to write may be larger than the buflen. The output amount refers to the number of characters written into the server-side CLOB or NCLOB. &#34;)"><sup>Foot&nbsp;3</sup></a></p>
</td>
<td class="cellalignment6225" headers="d341459e2841 d341459e2818">
<p>characters</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3</sup></p>
<p>The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the <code class="codeph">bufp,</code> which is specified by <code class="codeph">buflen</code>. If data is written in pieces, the amount of bytes to write may be larger than the <code class="codeph">buflen</code>. The output amount refers to the number of characters written into the server-side <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code>.</p>
<p>If the amount is specified on input, and the data is written in pieces, the parameter <code class="codeph">amtp</code> contains the total length of the pieces written at the end of the call (last piece written) and is undefined in between. (Note it is different from the piecewise read case). An error is returned if that amount is not sent to the server. If <code class="codeph">amtp</code> is zero, then streaming mode is assumed, and data is written until the user specifies <code class="codeph">OCI_LAST_PIECE</code>.</p>
<p>If the client-side character set is varying-width, then the input amount is in bytes, not characters, for <code class="codeph">CLOB</code>s or <code class="codeph">NCLOB</code>s.</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77731"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-8BA6F9B8-6DC3-4811-AC54-0AA06675DAC7"><!-- --></a>bufp (IN)</dt>
<dd>
<p>The pointer to a buffer from which the piece is written. The length of the data in the buffer is assumed to be the value passed in <code class="codeph">buflen</code>. Even if the data is being written in pieces, <code class="codeph">bufp</code> must contain the first piece of the LOB when this call is invoked. If a callback is provided, bufp must not be used to provide data or an error results.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77732"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-5F58598D-6D12-4E74-BBC4-EA00D4F717FF"><!-- --></a>buflen (IN)</dt>
<dd>
<p>The length, in bytes, of the data in the buffer. Note that this parameter assumes an 8-bit byte. If your operating system uses a longer byte, the value of <code class="codeph">buflen</code> must be adjusted accordingly.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77733"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-C83BBBCB-211E-472D-BA0D-3E5F75612153"><!-- --></a>piece (IN)</dt>
<dd>
<p>Which piece of the buffer is being written. The default value for this parameter is <code class="codeph">OCI_ONE_PIECE</code>, indicating that the buffer is written in a single piece. The following other values are also possible for piecewise or callback mode: <code class="codeph">OCI_FIRST_PIECE</code>, <code class="codeph">OCI_NEXT_PIECE</code>, and <code class="codeph">OCI_LAST_PIECE</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77734"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-D1EC9B33-9AB0-4B93-B454-6797E3CC3E13"><!-- --></a>ctxp (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77735"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-71A00317-13C2-48DD-B55C-5C7A0268C1F8"><!-- --></a>cbfp (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece in a piecewise write. If this is <code class="codeph">NULL</code>, the standard polling method is used. The callback function must return <code class="codeph">OCI_CONTINUE</code> for the write to continue. If any other error code is returned, the LOB write is terminated. The callback takes the following parameters:</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77736"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-08449DE5-7BEF-45B1-AA5E-4697DD90097A"><!-- --></a>ctxp (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77737"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-F94CE5F8-B3E6-4E1C-90B3-58A9B3576A7D"><!-- --></a>bufp (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77738"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-8CEFB604-A602-44E8-8507-A2CC49A47F22"><!-- --></a><span class="bold">lenp</span> (IN/OUT)</dt>
<dd>
<p>The length (in bytes) of the data in the buffer (IN), and the length (in bytes) of the current piece in <code class="codeph">bufp</code> (OUT).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77739"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-D85A2BA7-EAB9-4769-8D05-047C35335A73"><!-- --></a><span class="bold">piecep</span> (OUT)</dt>
<dd>
<p>Which piece: <code class="codeph">OCI_NEXT_PIECE</code> or <code class="codeph">OCI_LAST_PIECE</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77740"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-80FB4F9C-B89D-403F-86F0-32FE47B1EA3B"><!-- --></a>csid (IN)</dt>
<dd>
<p>The character set ID of the buffer data.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-77741"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-8C5FD1AA-555B-459B-BD31-E0C148EC994F"><!-- --></a>csfrm (IN)</dt>
<dd>
<p>The character set form of the buffer data.</p>
<p>The <code class="codeph">csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><code class="codeph">SQLCS_NCHAR</code> - <code class="codeph">NCHAR</code> character set ID</p>
</li>
</ul>
<p>The default value is <code class="codeph">SQLCS_IMPLICIT</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The buffer can be written to the LOB in a single piece with this call, or it can be provided piecewise using callbacks or a standard polling method. If the value of the piece parameter is <code class="codeph">OCI_FIRST_PIECE</code>, data must be provided through callbacks or polling. If a callback function is defined in the <code class="codeph">cbfp</code> parameter, then this callback function is invoked to get the next piece after a piece is written to the pipe. Each piece is written from <code class="codeph">bufp</code>. If no callback function is defined, then <code class="codeph">OCILobWriteAppend()</code> returns the <code class="codeph">OCI_NEED_DATA</code> error code.</p>
<p>The application must call <code class="codeph">OCILobWriteAppend()</code> again to write more pieces of the LOB. In this mode, the buffer pointer and the length can be different in each call if the pieces are of different sizes and from different locations. A piece value of <code class="codeph">OCI_LAST_PIECE</code> terminates the piecewise write.</p>
<p><code class="codeph">OCILobWriteAppend()</code> is not supported if LOB buffering is enabled.</p>
<p>If the LOB is a <code class="codeph">BLOB</code>, the <code class="codeph">csid</code> and <code class="codeph">csfrm</code> parameters are ignored.</p>
<p>If the client-side character set is varying-width, then the input amount is in bytes, not characters, for <code class="codeph">CLOB</code>s or <code class="codeph">NCLOB</code>s.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit or roll back your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso" id="GUID-BC03A84A-5747-414F-9A79-BAAF0EE71EF8__GUID-7C874EE5-AEEB-44A1-B78C-A60958A73A57">
<p class="notep1">See Also:</p>
<p><a href="oci07lob.htm#GUID-8C5ABC9E-3048-49AE-BFE3-DB4CB1A63AB3" title="How to improve LOB Read/Write performance.">About Improving LOB Read/Write Performance</a></p>
</div>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6150">
<tr>
<td class="cellalignment6162">
<table class="cellalignment6155">
<tr>
<td class="cellalignment6154"><a href="ociaedep002.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6154"><a href="ociaedep004.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6164">
<table class="cellalignment6153">
<tr>
<td class="cellalignment6154"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6154"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6154"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6154"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6154"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6154"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>