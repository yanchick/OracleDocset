<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-76388"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/OCI%20XStream%20Functions"></a><title>OCI XStream Functions</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="OCILCRAttributesGet(), OCILCRAttributesSet(), OCILCRFree(), OCILCRDDLInfoGet(), OCILCRHeaderGet(), OCILCRRowStmtGet(), OCILCRRowStmtWithBindVarGet(), OCILCRNew(), OCILCRRowColumnInfoGet(), LCR column flags, OCILCRRowColumnInfoSet(), OCILCRDDLInfoSet(), OCILCRHeaderSet(), OCILCRLobInfoGet(), OCILCRLobInfoSet(), OCILCRNumberFromPosition(), OCILCRSCNToPosition(), OCILCRWhereClauseGet(), OCILCRWhereClauseWithBindVarGet(), OCIXStreamInAttach(), OCIXStreamInDetach(), OCIXStreamInLCRSend(), OCIXStreamInLCRCallbackSend(), OCIXStreamInProcessedLWMGet(), OCIXStreamInErrorGet(), OCIXStreamInFlush(), OCIXStreamInChunkSend(), OCIXStreamInCommit(), OCIXStreamInSessionSet(), OCIXStreamOutAttach(), OCIXStreamOutDetach(), OCIXStreamOutLCRReceive(), OCIXStreamOutLCRCallbackReceive(), OCIXStreamOutProcessedLWMSet(), OCIXStreamOutChunkReceive(), OCIXStreamOutGetNextChunk(), OCIXStreamOutSessionSet()"/>
<meta name="dcterms.created" content="2017-06-09T09:07:30Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49886-11"/>
<meta name="dcterms.isVersionOf" content="LNOCI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oci26strm.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ociaahan.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49886-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-FEF426F1-90C1-49DB-ADCD-C7CF298F66B8"></a> <span id="PAGE" style="display:none;">73/84</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='oci26xstrm001'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('about:blank', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');
    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'); 
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" ><head><title>');
   
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="LNOCI72923"></a><a id="LNOCI72922"></a>
<h1 id="LNOCI-GUID-FEF426F1-90C1-49DB-ADCD-C7CF298F66B8" class="sect1">OCI XStream Functions</h1>
<div>
<div class="section">
<p>This section and <a href="oci26xstrm001.htm#GUID-FEF426F1-90C1-49DB-ADCD-C7CF298F66B8__CJACBEBG" title="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">Table 26-2</a> describe the OCI XStream functions.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-FEF426F1-90C1-49DB-ADCD-C7CF298F66B8__CJACBEBG">
<p class="titleintable">Table 26-2 OCI XStream Functions &nbsp;</p>
<table class="cellalignment6157" title="OCI XStream Functions &nbsp;" summary="This table has 2 columns. Column 1 is the function name and column 2 describes its purpose.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6237" id="d292661e164">Function</th>
<th class="cellalignment6198" id="d292661e167">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e172" headers="d292661e164">
<p><span class="bold">LCR Functions</span></p>
</td>
<td class="cellalignment6199" headers="d292661e172 d292661e167">
<p>To get and set one or more values of an LCR. <span class="bold">Note:</span> These calls do not require a server round-trip.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e184" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-156A6066-239A-428E-B20B-02C4CC49827B">OCILCRAttributesGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e184 d292661e167">
<p>Returns existing extra attributes from the LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e194" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD">OCILCRAttributesSet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e194 d292661e167">
<p>Sets extra attributes in a row or DDL LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e204" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-20A2C098-B2FA-4276-A267-53CDCA02B653">OCILCRFree()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e204 d292661e167">
<p>Frees the LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e214" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-D399025F-65A8-4DBA-9F4E-410693CA637D">OCILCRHeaderGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e214 d292661e167">
<p>Returns the common header fields for a row or DDL LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e224" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27">OCILCRHeaderSet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e224 d292661e167">
<p>Initializes the common header fields for a row or DDL LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e234" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3">OCILCRDDLInfoGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e234 d292661e167">
<p>Retrieves specific fields in a DDL LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e244" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F">OCILCRDDLInfoSet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e244 d292661e167">
<p>Populates DDL-specific fields in a DDL LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e254" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042">OCILCRLobInfoGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e254 d292661e167">
<p>Returns the LOB information for a piece-wise LOB LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e264" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C">OCILCRLobInfoSet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e264 d292661e167">
<p>Sets the LOB information for a piece-wise LOB LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e274" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-F837C0C0-4144-4BF2-B707-E80E57248470">OCILCRNew()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e274 d292661e167">
<p>Constructs a new LCR object of the specified type (ROW or DDL) for the given duration</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e285" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E" title="Returns the column fields in a row LCR.">OCILCRRowColumnInfoGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e285 d292661e167">
<p>Returns the column fields in a row LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e298" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-A4303887-D557-4D60-84B5-CD5C7522EC39">OCILCRRowColumnInfoSet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e298 d292661e167">
<p>Populates column fields in a row LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e308" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27">OCILCRRowStmtGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e308 d292661e167">
<p>Returns the generated SQL statement for the row LCR, with values in-lined</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e318" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6">OCILCRRowStmtWithBindVarGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e318 d292661e167">
<p>Returns the generated SQL statement, which uses bind variables for column values</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e328" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D">OCILCRSCNsFromPosition()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e328 d292661e167">
<p>Gets the SCN and commit SCN from a position value</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e338" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D">OCILCRSCNToPosition()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e338 d292661e167">
<p>Converts SCN to position</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e348" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819">OCILCRWhereClauseGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e348 d292661e167">
<p>Gets the <code class="codeph">WHERE</code> clause statement for the given row LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e361" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-72D8899B-0077-48C0-9861-E008A0530122">OCILCRWhereClauseWithBindVarGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e361 d292661e167">
<p>Gets the <code class="codeph">WHERE</code> clause statement with bind variables for the given row LCR</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e374" headers="d292661e164">
<p><span class="bold">XStream In Functions</span></p>
</td>
<td class="cellalignment6199" headers="d292661e374 d292661e167">
<p>To send an LCR stream to an XStream inbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e382" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758">OCIXStreamInAttach()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e382 d292661e167">
<p>Attaches to an inbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e392" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-41760606-A672-4F1B-8713-EC17124BB67B">OCIXStreamInChunkSend()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e392 d292661e167">
<p>Sends chunk data to the inbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e403" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-3C2E4835-C043-46CA-A6CD-754048E74EA4">OCIXStreamInCommit()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e403 d292661e167">
<p>Commits the given transaction</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e413" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-3DD2C906-C244-454C-861D-998A7B8032B5">OCIXStreamInDetach()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e413 d292661e167">
<p>Detaches from the inbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e423" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-00331B05-22D5-48B9-8189-B6A479EDC60E">OCIXStreamInErrorGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e423 d292661e167">
<p>Returns the first error encountered by the inbound server since the attach call</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e433" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-C23A6511-6E9A-4D49-A4AC-CBE3449F8EF5">OCIXStreamInFlush()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e433 d292661e167">
<p>Flushes the network while attaching to an XStream inbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e443" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402" title="Sends an LCR stream to the attached inbound server.">OCIXStreamInLCRCallbackSend()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e443 d292661e167">
<p>Sends the LCR stream to the attached inbound server using callbacks</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e456" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF" title="Sends an LCR stream from the client to the attached inbound server.">OCIXStreamInLCRSend()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e456 d292661e167">
<p>Sends the LCR stream to the attached inbound server using callbacks</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e469" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3">OCIXStreamInProcessedLWMGet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e469 d292661e167">
<p>Gets the local processed low position</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e479" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA">OCIXStreamInSessionSet()</a> &#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e479 d292661e167">
<p>Sets session attributes for XStream In functions</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e489" headers="d292661e164">
<p><span class="bold">XStream Out Functions</span></p>
</td>
<td class="cellalignment6199" headers="d292661e489 d292661e167">
<p>To receive an LCR stream from an XStream outbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e497" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC">OCIXStreamOutAttach()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e497 d292661e167">
<p>Attaches to an outbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e507" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56">OCIXStreamOutChunkReceive()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e507 d292661e167">
<p>Retrieves data of each LOB or <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> column one chunk at a time</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e524" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-ACF2C9C0-5B3B-443B-9693-0928AAC98509">OCIXStreamOutDetach()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e524 d292661e167">
<p>Detaches from the outbound server</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e534" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-AF2179BF-5222-4C75-BEA7-F48170D59340">OCIXStreamOutLCRCallbackReceive()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e534 d292661e167">
<p>Gets the LCR stream from the outbound server using callbacks</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e544" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339">OCIXStreamOutLCRReceive()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e544 d292661e167">
<p>Receives an LCR stream from an outbound server without using callbacks</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e554" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA">OCIXStreamOutProcessedLWMSet()</a>&#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e554 d292661e167">
<p>Updates the local copy of the processed low-water mark</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6238" id="d292661e564" headers="d292661e164">
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0">OCIXStreamOutSessionSet()</a> &#34;</span></p>
</td>
<td class="cellalignment6199" headers="d292661e564 d292661e167">
<p>Sets session attributes for XStream Out functions</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<a id="LNOCI72924"></a>
<div class="props_rev_3"><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B"></a>
<h2 id="LNOCI-GUID-156A6066-239A-428E-B20B-02C4CC49827B" class="sect2">OCILCRAttributesGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Gets extra attribute information in (ROW or DDL) LCR. In addition, it gets any extra non-first class attributes that are not populated through <code class="codeph">OCILCRHeaderGet()</code>, <code class="codeph">OCILCRDDLInfoGet()</code>, or <code class="codeph">OCILCRProcedureInfoGet()</code>, for example, edition name.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRAttributesGet (      OCISvcCtx   *svchp, 
                                 OCIError    *errhp, 
                                 ub2         *num_attrs,
                                 oratext     **attr_names,
                                 ub2         *attr_namesl,
                                 ub2         *attr_dtyp,
                                 void        **attr_valuesp,
                                 OCIInd      *attr_indp,
                                 ub2         *attr_alensp,
                                 void        *lcrp,
                                 ub2         array_size,
                                 ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76389"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-5F4AA225-D1F6-4684-A9B2-12AE843EB702"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76390"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-18624F26-949C-488C-84B0-E6E432760DD8"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76391"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-C99484CF-59B5-4193-A943-EC5AB8B2A36F"><!-- --></a>num_attrs (OUT)</dt>
<dd>
<p>Number of extra attributes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76392"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-30FC32C4-F983-4092-943B-F602E11B6B57"><!-- --></a>attr_names (OUT)</dt>
<dd>
<p>An array of extra attribute name pointers.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76393"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-CE05EDB5-C9E0-403B-ADE5-319EEB89EA40"><!-- --></a>attr_namesl (OUT)</dt>
<dd>
<p>An array of extra attribute name lengths.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76394"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-38E01C60-412E-41A9-89CD-121C0C907D0E"><!-- --></a>attr_dtyp (OUT)</dt>
<dd>
<p>An array of extra attribute data types. Valid data types: see Comments.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76395"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-C1E4D28E-5207-45C7-B699-3A54064B0886"><!-- --></a>attr_valuesp (OUT)</dt>
<dd>
<p>An array of extra attribute data value pointers.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76396"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-BD6FC303-070E-4FDC-A57F-7A32EBC53D45"><!-- --></a>attr_indp (OUT)</dt>
<dd>
<p>An indicator array. Each returned element is an <code class="codeph">OCIInd</code> value (<code class="codeph">OCI_IND_NULL</code> or <code class="codeph">OCI_IND_NOTNULL</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76397"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-041E272B-33B2-4AF7-813A-5EEC7EB4CA67"><!-- --></a>attr_alensp (OUT)</dt>
<dd>
<p>An array of actual extra attribute data lengths. Each element in <code class="codeph">alensp</code> is the length in bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76398"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-3271A501-5D23-4844-B927-C733294E75C7"><!-- --></a>lcrp (IN)</dt>
<dd>
<p>Pointer to row or DDL LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76399"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-DB73E556-0B70-4905-90A7-6FB969821E38"><!-- --></a>array_size (IN)</dt>
<dd>
<p>Size of the array argument in the other parameters. If <code class="codeph">array_size</code> is not large enough to accommodate the number of attributes in the requested attribute list, then <code class="codeph">OCI_ERROR</code> is returned. Parameter <code class="codeph">num_attrs</code> returns the expected size.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76400"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-156A6066-239A-428E-B20B-02C4CC49827B__GUID-00E6420D-8536-4548-805A-B6C44F97F44F"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The valid data types for <code class="codeph">attr_dtyp</code> are:</p>
<pre dir="ltr">SQLT_CHR
SQLT_INT
SQLT_RDD
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72925"></a>
<div class="props_rev_3"><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD"></a>
<h2 id="LNOCI-GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD" class="sect2">OCILCRAttributesSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Populates extra attribute information in row or DDL LCR. In addition, it populates any extra non-first class attributes that cannot be set through <code class="codeph">OCILCRHeaderSet()</code>, <code class="codeph">OCILCRDDLInfoSet()</code>, or <code class="codeph">OCILCRRowColumnInfoSet()</code>, for example, edition name.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRAttributesSet (      OCISvcCtx   *svchp,
                                 OCIError    *errhp,
                                 ub2         num_attrs,
                                 oratext     **attr_names,
                                 ub2         *attr_names_lens,
                                 ub2         *attr_dtyp,
                                 void        **attr_valuesp,
                                 OCIInd      *attr_indp,
                                 ub2         *attr_alensp,
                                 void        *lcrp,
                                 ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76401"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-D5E71A3B-C5B3-4B69-A085-DB446124C7BA"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76402"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-DADC0508-404E-4DA7-9A0F-2A3352DC0CCA"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76403"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-FD21E726-4320-462F-B78E-4BC716A76FCD"><!-- --></a>num_attrs (IN)</dt>
<dd>
<p>Number of extra attributes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76404"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-4E73B736-83EE-415F-BF82-D1BF12B8E99D"><!-- --></a>attr_names (IN)</dt>
<dd>
<p>Pointer to an array of extra attribute names. Attribute names must be canonicalized.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76405"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-8AB781CC-D6B4-49FF-BE2F-46AD3661E675"><!-- --></a>attr_names_lens (IN)</dt>
<dd>
<p>Pointer to an array of extra attribute name lengths.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76406"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-13A34B24-4A7B-4F2B-9954-ECDBEFFE5D69"><!-- --></a>attr_dtyp (IN)</dt>
<dd>
<p>Pointer to an array of extra attribute data types. See valid data types in Comments of <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-A4303887-D557-4D60-84B5-CD5C7522EC39">OCILCRRowColumnInfoSet()</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76407"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-3083E44B-79F3-4127-91B6-7AC957E5C1BD"><!-- --></a>attr_valuesp (IN)</dt>
<dd>
<p>Address of an array of extra attribute data values.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76408"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-A72B9309-D969-4273-8320-2810A2ACB28A"><!-- --></a>attr_indp (IN)</dt>
<dd>
<p>Pointer to an indicator array. For all data types, this is a pointer to an array of <code class="codeph">OCIInd</code> values (<code class="codeph">OCI_IND_NULL</code> or <code class="codeph">OCI_IND_NOTNULL</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76409"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-99395E40-A4C3-4FC1-A12F-621733C968FD"><!-- --></a>attr_alensp (IN)</dt>
<dd>
<p>Pointer to an array of actual extra attribute data lengths. Each element in <code class="codeph">attr_lensp</code> is the length in bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76410"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-D32F9FE6-9B55-4BD3-9CE0-0C3109719D4F"><!-- --></a>lcrp (IN/OUT)</dt>
<dd>
<p>Pointer to a row or DDL LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76411"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6B2505A0-70C3-49E5-B1FD-95989885E0DD__GUID-3C40B3C6-7EAA-4F7E-917C-6D61568E1051"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Valid attributes are:</p>
<pre dir="ltr">#define OCI_LCR_ATTR_THREAD_NO              &#34;THREAD#&#34;
#define OCI_LCR_ATTR_ROW_ID                 &#34;ROW_ID&#34;
#define OCI_LCR_ATTR_SESSION_NO             &#34;SESSION#&#34;
#define OCI_LCR_ATTR_SERIAL_NO              &#34;SERIAL#&#34;
#define OCI_LCR_ATTR_USERNAME               &#34;USERNAME&#34;
#define OCI_LCR_ATTR_TX_NAME                &#34;TX_NAME&#34;
#define OCI_LCR_ATTR_EDITION_NAME           &#34;EDITION_NAME&#34;
#define OCI_LCR_ATTR_MESSAGE_TRACKING_LABEL &#34;MESSAGE_TRACKING_LABEL&#34;
#define OCI_LCR_ATTR_CURRENT_USER           &#34;CURRENT_USER&#34;
#define OCI_LCR_ATTR_ROOT_NAME              &#34;ROOT_NAME&#34;
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72926"></a>
<div class="props_rev_3"><a id="GUID-20A2C098-B2FA-4276-A267-53CDCA02B653"></a>
<h2 id="LNOCI-GUID-20A2C098-B2FA-4276-A267-53CDCA02B653" class="sect2">OCILCRFree()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Frees the LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRFree ( OCISvcCtx   *svchp,
                   OCIError    *errhp, 
                   void        *lcrp,
                   ub4         mode ); 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76412"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-20A2C098-B2FA-4276-A267-53CDCA02B653__GUID-19BD4064-15E8-4A88-9080-A75559B7A8C3"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76413"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-20A2C098-B2FA-4276-A267-53CDCA02B653__GUID-6FF3B754-0E68-460D-B4D3-853C5A212EB5"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76414"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-20A2C098-B2FA-4276-A267-53CDCA02B653__GUID-49955BF8-6CE2-4A96-89F4-D67388F1AA48"><!-- --></a>lcrp (IN/OUT)</dt>
<dd>
<p>Streams LCR pointer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76415"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-20A2C098-B2FA-4276-A267-53CDCA02B653__GUID-946E9896-C43E-45E0-9BE9-537DFB8EFB81"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72927"></a>
<div class="props_rev_3"><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3"></a>
<h2 id="LNOCI-GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3" class="sect2">OCILCRDDLInfoGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Retrieves specific fields in a DDL LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRDDLInfoGet ( OCISvcCtx   *svchp,
                         OCIError    *errhp,
                         oratext     **object_type,
                         ub2         *object_type_len,
                         oratext     **ddl_text,
                         ub4         *ddl_text_len, 
                         oratext     **logon_user,
                         ub2         *logon_user_len,
                         oratext     **current_schema,
                         ub2         *current_schema_len,
                         oratext     **base_table_owner,
                         ub2         *base_table_owner_len,
                         oratext     **base_table_name,
                         ub2         *base_table_name_len,
                         oraub8      *flag,
                         void        *ddl_lcrp,
                         ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76416"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-AAE9AD73-EEF9-4161-867A-2E803C22D45D"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76417"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-79588548-4368-48C9-AB9E-1B1006B176A1"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76418"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-0A614441-2D08-46BB-8822-AC8070B44882"><!-- --></a>object_type (OUT)</dt>
<dd>
<p>The type of object on which the DDL statement was executed. (See <a href="oci26xstrm001.htm#GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F">OCILCRDDLInfoSet()</a>.) Optional. If not <code class="codeph">NULL</code>, then both <code class="codeph">object_type</code> and <code class="codeph">object_type_len</code> arguments must not be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76419"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-564E9516-D535-4637-AAD9-58A7E745A408"><!-- --></a>object_type_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">object_type</code> string without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76420"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-FD967581-3AA6-4132-98E3-2F5E1881760C"><!-- --></a>ddl_text (OUT)</dt>
<dd>
<p>The text of the DDL statement. Optional. If not <code class="codeph">NULL</code>, then both <code class="codeph">ddl_text</code> and <code class="codeph">ddl_text_len</code> arguments must not be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76421"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-2618D12C-3705-464E-B80F-19205E4387C2"><!-- --></a>ddl_text_len (OUT)</dt>
<dd>
<p>DDL text length in bytes without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76422"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-58CCA1BD-DD81-4B07-A1BA-E3BE7DE0B555"><!-- --></a>logon_user (OUT)</dt>
<dd>
<p>Canonicalized (follows a rule or procedure) name of the user whose session executed the DDL statement. Optional. If not <code class="codeph">NULL</code>, then both <code class="codeph">logon_user</code> and <code class="codeph">logon_user_len</code> arguments must not be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76423"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-CA8C0717-646A-42C5-B4E5-1BDB16DA0C87"><!-- --></a>logon_user_len (OUT)</dt>
<dd>
<p>Length of the logon_user string without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76424"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-3775AB88-8AFF-49B6-8E1B-3D472005B952"><!-- --></a>current_schema (OUT)</dt>
<dd>
<p>The canonicalized schema name that is used if no schema is specified explicitly for the modified database objects in <code class="codeph">ddl_text</code>. Optional. If not <code class="codeph">NULL</code>, then both <code class="codeph">current_schema</code> and <code class="codeph">current_schema_len</code> arguments must not be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76425"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-A1EA24D5-0C42-4F49-B7BD-58686F9BFD46"><!-- --></a>current_schema_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">current_schema</code> string without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76426"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-DC4A9CFD-2482-46A2-AA99-707B5CE0FB90"><!-- --></a>base_table_owner (OUT)</dt>
<dd>
<p>If the DDL statement is a table-related DDL (such as <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> and <code class="codeph">ALTER</code> <code class="codeph">TABLE</code>), or if the DDL statement involves a table (such as creating a trigger on a table), then <code class="codeph">base_table_owner</code> specifies the canonicalized owner of the table involved. Otherwise, <code class="codeph">base_table_owner</code> is <code class="codeph">NULL</code>. Optional. If not <code class="codeph">NULL</code>, then both <code class="codeph">base_table_owner</code> and <code class="codeph">base_table_owner_len</code> arguments must not be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76427"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-968D92C6-FE0C-4903-81C1-BC1120AD8645"><!-- --></a>base_table_owner_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">base_table_owner</code> string without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76428"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-EF831451-F6AD-4770-A420-98F31BC97EC7"><!-- --></a>base_table_name (OUT)</dt>
<dd>
<p>If the DDL statement is a table-related DDL (such as <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> and <code class="codeph">ALTER</code> <code class="codeph">TABLE</code>), or if the DDL statement involves a table (such as creating a trigger on a table), then <code class="codeph">base_table_name</code> specifies the canonicalized name of the table involved. Otherwise, <code class="codeph">base_table_name</code> is <code class="codeph">NULL</code>. Optional. If not <code class="codeph">NULL</code>, then both <code class="codeph">base_table_name</code> and <code class="codeph">base_table_name_len</code> arguments must not be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76429"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-F53933F5-E49F-436F-B2A5-75C47B016DF8"><!-- --></a>base_table_name_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">base_table_name</code> string without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76430"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-A0B8A903-14EC-4158-85E4-46E7C809B58D"><!-- --></a>flag (OUT)</dt>
<dd>
<p>DDL LCR flag. Optional. Data not returned if argument is <code class="codeph">NULL</code>. Future extension not used currently.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76431"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-27D3A9EF-B3C7-4DA4-BA57-97B20EEB88E2"><!-- --></a>ddl_lcrp (IN)</dt>
<dd>
<p>DDL LCR. Cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76432"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-54F4B7C4-3F17-48FD-B82B-72F68107D9F3__GUID-1657349A-6B5C-41B0-A84A-D1DF9603C746"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72928"></a>
<div class="props_rev_3"><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D"></a>
<h2 id="LNOCI-GUID-D399025F-65A8-4DBA-9F4E-410693CA637D" class="sect2">OCILCRHeaderGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Returns the common header fields for row or DDL, or procedure LCR. All returned pointers point directly to the corresponding LCR fields.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRHeaderGet ( OCISvcCtx   *svchp, 
                        OCIError    *errhp, 
                        oratext     **src_db_name,
                        ub2         *src_db_name_len,
                        oratext     **cmd_type,
                        ub2         *cmd_type_len,
                        oratext     **owner,
                        ub2         *owner_len,
                        oratext     **oname,
                        ub2         *oname_len,
                        ub1         **tag,
                        ub2         *tag_len,
                        oratext     **txid,
                        ub2         *txid_len, 
                        OCIDate     *src_time,
                        ub2         *old_columns,
                        ub2         *new_columns,
                        ub1         **position,
                        ub2         *position_len,
                        oraub8      *flag,
                        void        *lcrp,
                        ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76433"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-EC73773D-0070-487E-969F-385199977F85"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76434"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-A2EE4F16-2C81-4788-8E0D-D81A8AB61975"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76435"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-A873D991-6E2B-4B14-81F8-52E1D21A6086"><!-- --></a>src_db_name (OUT)</dt>
<dd>
<p>Canonicalized source database name. Must be non-<code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76436"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-597CE6CB-DAD6-4D43-93FB-10FD821EF90F"><!-- --></a>src_db_name_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">src_db_name</code> string in bytes excluding the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76437"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-487FFF4A-33DF-4363-975D-6231CAEEA91A"><!-- --></a>cmd_type (OUT)</dt>
<dd>
<p>For row LCRs: One of the following values:</p>
<div class="infobox-note" id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-7CB9B866-AAF5-43D5-9CE4-442EB7D34753">
<p class="notep1">Note:</p>
<p>The values, <code class="codeph">#define OCI_LCR_ROW_CMD_ROLLBACK</code> and <code class="codeph">#define OCI_LCR_ROW_CMD_START_TX</code>, is functionality that is available starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</p>
</div>
<pre dir="ltr">#define OCI_LCR_ROW_CMD_INSERT
#define OCI_LCR_ROW_CMD_DELETE
#define OCI_LCR_ROW_CMD_UPDATE
#define OCI_LCR_ROW_CMD_COMMIT
#define OCI_LCR_ROW_CMD_ROLLBACK
#define OCI_LCR_ROW_CMD_START_TX
#define OCI_LCR_ROW_CMD_LOB_WRITE
#define OCI_LCR_ROW_CMD_LOB_TRIM
#define OCI_LCR_ROW_CMD_LOB_ERASE
</pre>
<p>For DDL LCRs: One of the command types in <a class="olink LNOCI251" target="_blank" href="../LNOCI/ociaahan.htm#LNOCI251"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76438"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-EF26C058-877C-4E5D-8105-8B6D4C2CE357"><!-- --></a>cmd_type_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">cmd_type</code> string in bytes excluding the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76439"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-85E92F9E-6606-4660-81E8-EC7D540C53C0"><!-- --></a>owner (OUT)</dt>
<dd>
<p>Canonicalized table owner name. Must be non-<code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76440"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-0A83E141-4CCF-4E9A-ADB3-4C2389C3DD7E"><!-- --></a>owner_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">owner</code> string in bytes excluding the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76441"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-00649524-BDFE-424E-92A1-12254F1AAD81"><!-- --></a>oname (OUT)</dt>
<dd>
<p>Canonicalized table name. Must be non-<code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76442"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-747C068E-7247-46DC-B067-D675C3AB74A4"><!-- --></a>oname_len (OUT)</dt>
<dd>
<p>Length of the <code class="codeph">oname</code> string in bytes excluding the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76443"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-329D402A-F36A-4697-8CEB-0ADEF8BD16D6"><!-- --></a>tag (OUT)</dt>
<dd>
<p>A binary tag that enables tracking of the LCR. For example, you can use this tag to determine the original source database of the DML statement if apply forwarding is used.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76444"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-F94B832F-551E-407F-A667-27D3A56386B5"><!-- --></a>tag_len (OUT)</dt>
<dd>
<p>Number of bytes in the tag.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76445"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-9057590B-6434-40AF-88E0-93FEFE79D6CE"><!-- --></a>txid (OUT)</dt>
<dd>
<p>Transaction ID. Must be non-<code class="codeph">NULL</code></p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76446"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-860EC805-8F41-4BD6-B1AD-681F3F07405E"><!-- --></a>txid_len (OUT)</dt>
<dd>
<p>Length of the string in bytes excluding the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76447"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-1E95C3B5-79F5-494F-AE69-2E6D251949B0"><!-- --></a>src_time (OUT)</dt>
<dd>
<p>The time when the change was generated in the redo log file of the source database.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76448"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-B6D3F345-0820-4DAB-9F74-DE820BE7332C"><!-- --></a>old_columns (OUT)</dt>
<dd>
<p>Number of columns in the <code class="codeph">OLD</code> column list. Returns 0 if the input LCR is a DDL LCR. Optional.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76449"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-414C0A90-232E-4F9E-8B96-7CE970AE8C70"><!-- --></a>new_columns (OUT)</dt>
<dd>
<p>Number of columns in the <code class="codeph">NEW</code> column list. Returns 0 if the input LCR is a DDL LCR. Optional.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76450"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-E05C4FB3-5C49-4F90-800C-A014F5CA2D34"><!-- --></a>position (OUT)</dt>
<dd>
<p>Position for LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76451"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-17A39DE1-2DB0-4A59-9C47-51D955D45070"><!-- --></a>position_len (OUT)</dt>
<dd>
<p>Length of <code class="codeph">position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76452"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-1DE4BD9A-FD7E-4EAA-8342-08D92EF2D437"><!-- --></a>flag (OUT)</dt>
<dd>
<p>LCR flag. Possible flags are listed in Comments.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76453"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-B64A9B6C-D728-4C05-A3B5-56C58648BD30"><!-- --></a>lcrp (IN)</dt>
<dd>
<p><code class="codeph">lcrp</code> cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76454"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D399025F-65A8-4DBA-9F4E-410693CA637D__GUID-18DFE478-02E9-4FD8-89E5-891D4F74828E"><!-- --></a>mode (IN)</dt>
<dd>
<p><code class="codeph">OCILCR_NEW_ONLY_MODE</code> - If this mode is specified, then the <code class="codeph">new_columns</code> returned is the count of the columns in the <code class="codeph">NEW</code> column list only. Otherwise, the <code class="codeph">new_columns</code> returned is the number of distinct columns present in either the <code class="codeph">NEW</code> or the <code class="codeph">OLD</code> column list of the given row LCR.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>LCR flag.</p>
<pre dir="ltr">#define OCI_ROWLCR_HAS_ID_KEY_ONLY  /* only has ID key cols */
#define OCI_ROWLCR_SEQ_LCR          /* sequence lcr */
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72930"></a>
<div class="props_rev_3"><a id="GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27"></a>
<h2 id="LNOCI-GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27" class="sect2">OCILCRRowStmtGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Returns the generated SQL statement for the row LCR, with values in-lined. Users must preallocate the memory for <code class="codeph">sql_stmt</code>, and <code class="codeph">*sql_stmt_len</code> must be set to the size of the allocated buffer, when it is passed in. If *<code class="codeph">sql_stmt_len</code> is not large enough to hold the generated SQL statement, then an error is raised.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRRowStmtGet ( OCISvcCtx   *svchp,
                         OCIError    *errhp,
                         oratext     *row_stmt,
                         ub4         *row_stmt_len,
                         void        *row_lcrp,
                         ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76455"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27__GUID-28E5F635-4472-4FB4-B8AB-9A0D9E14FEB6"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76456"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27__GUID-AEECE61A-AF8E-43D0-B3EB-B701DFFFBB10"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76457"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27__GUID-3091F474-EE23-43A9-A240-F547FE07ED5B"><!-- --></a>row_stmt (IN/OUT)</dt>
<dd>
<p>The generated SQL statement for the row LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76458"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27__GUID-4B292549-4D62-42E6-B9F1-FBAEDB0D7F75"><!-- --></a>row_stmt_len (IN/OUT)</dt>
<dd>
<p>Set to the size of the allocated buffer for <code class="codeph">row_stmt</code> when passed in; returns the length of <code class="codeph">row_stmt</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76459"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27__GUID-EE681D72-C630-4A2C-9D75-37E73C6C857E"><!-- --></a>row_lcrp (IN)</dt>
<dd>
<p>Pointer to row LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76460"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-18B58C2B-38F7-4F8D-A261-4621B7E29F27__GUID-2BA8361D-FD22-4358-9F96-FFACF49268AA"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72931"></a>
<div class="props_rev_3"><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6"></a>
<h2 id="LNOCI-GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6" class="sect2">OCILCRRowStmtWithBindVarGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Returns the generated SQL statement, which uses bind variables for column values. The values for the bind variables are returned separately in arrays. You must preallocate the memory for <code class="codeph">sql_stmt</code> and the arrays, <code class="codeph">*sql_stmt_len</code> must be set to the size of the allocated buffer, and <code class="codeph">array_size</code> must be the length of the arrays. The actual column values in <code class="codeph">bind_var_valuesp</code> points to the values inside the LCR, so it is a shallow copy. If <code class="codeph">array_size</code> is not large enough to hold all the variables, or if <code class="codeph">*sql_stmt_len</code> is not large enough to hold the generated SQL statement, then an error is raised.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRRowStmtWithBindVarGet ( OCISvcCtx    *svchp,
                                    OCIError     *errhp,
                                    oratext      *row_stmt,
                                    ub4          *row_stmt_len,
                                    ub2          *num_bind_var,
                                    ub2          *bind_var_dtyp,
                                    void         **bind_var_valuesp,
                                    OCIInd       *bind_var_indp,
                                    ub2          *bind_var_alensp,
                                    ub1          *bind_var_csetidp,
                                    ub1          *bind_var_csetfp,
                                    void         *row_lcrp,
                                    oratext      **chunk_column_names,
                                    ub2          *chunk_column_namesl,
                                    oraub8       *chunk_column_flags,
                                    ub2          array_size,
                                    oratext      *bind_var_syntax,
                                    ub4          mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76461"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-175F3E49-251E-45DD-B41A-99750D978786"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76462"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-186B0718-7024-4C2C-8EB2-A0EAE4C326CA"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76463"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-AF4282E5-C195-4C7F-A47C-06CEB381F979"><!-- --></a>row_stmt (IN/OUT)</dt>
<dd>
<p>The generated SQL statement for the row LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76464"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-2ACE2BAD-3C15-4B73-B017-A7A49F566A46"><!-- --></a>row_stmt_len (IN/OUT)</dt>
<dd>
<p>Set to the size of the allocated buffer for <code class="codeph">row_stmt</code> when passed in; returns the length of <code class="codeph">row_stmt</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76465"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-1AC690A8-096F-4DA0-9C76-E3EC0B98F73C"><!-- --></a>num_bind_var (OUT)</dt>
<dd>
<p>The number of bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76466"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-D98CD054-BD08-48AE-B0F4-C5E1AB537575"><!-- --></a>bind_var_dtyp (IN/OUT)</dt>
<dd>
<p>Array of data types for the bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76467"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-4219DB24-0AFC-4B89-B868-ED3236E87A20"><!-- --></a>bind_var_valuesp (IN/OUT)</dt>
<dd>
<p>Array of values for the bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76468"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-5129EE01-306C-4DAF-8D21-9DEC7616652E"><!-- --></a>bind_var_indp (IN/OUT)</dt>
<dd>
<p>Array of <code class="codeph">NULL</code> indicators for the bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76469"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-58A57071-8AA7-43D0-B2B3-34F7B4F06BC5"><!-- --></a>bind_var_alensp (IN/OUT)</dt>
<dd>
<p>Array of lengths for the bind variable values.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76470"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-7DCF750F-AB03-43B3-B9A0-E5CE9B77F21F"><!-- --></a>bind_var_csetidp (IN/OUT)</dt>
<dd>
<p>Array of character set IDs for the bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76471"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-FF745403-F2AA-4D1E-9262-568B4AD33C17"><!-- --></a>bind_var_csetfp (IN/OUT)</dt>
<dd>
<p>Array of character set forms for the bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76472"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-CE37ED87-40EA-47B8-99B6-B1F5667BD967"><!-- --></a>row_lcrp (IN)</dt>
<dd>
<p>Pointer to row LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76473"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-D3D7599F-36F0-466F-9604-D45CF2969A1E"><!-- --></a>chunk_column_names (OUT)</dt>
<dd>
<p>Array of LOB column names in LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76474"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-A88BA07B-3368-4B9A-B0AD-1DEBAC1B4E91"><!-- --></a>chunk_column_namesl (OUT)</dt>
<dd>
<p>Array of LOB column name lengths.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76475"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-D7DED31E-040D-4AD1-8770-F9495A290FAA"><!-- --></a>chunk_column_flags (OUT)</dt>
<dd>
<p>Array of LOB column flags. Possible flags are listed in Comments.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76476"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-03537EF7-EC41-4C35-B027-E9A6288113C7"><!-- --></a>array_size (IN)</dt>
<dd>
<p>Size of each of the parameter arrays.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76477"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-C2A6FCAB-09EA-4761-AF57-99999AE7AD32"><!-- --></a>bind_var_syntax (IN)</dt>
<dd>
<p>Either (<code class="codeph">:</code>) (binds are of the form <code class="codeph">:1</code>, <code class="codeph">:2</code>, and so on.) or (<code class="codeph">?</code>) (binds are of the form (<code class="codeph">?</code>)).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76478"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-155714D6-4DF9-4F1D-9E51-C7735DACCBC6__GUID-3E97DF62-8638-43CC-B848-EBA77D672909"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The following <a id="d292661e2705" class="indexterm-anchor"></a>LCR column flags can be combined using bitwise <code class="codeph">OR</code> operator.</p>
<pre dir="ltr">#define OCI_LCR_COLUMN_LOB_DATA     /* column contains LOB data */
#define OCI_LCR_COLUMN_LONG_DATA    /* column contains long data */
#define OCI_LCR_COLUMN_EMPTY_LOB    /* column has an empty LOB  */
#define OCI_LCR_COLUMN_LAST_CHUNK   /* last chunk of current column */
#define OCI_LCR_COLUMN_AL16UTF16    /* column is in AL16UTF16 fmt */
#define OCI_LCR_COLUMN_NCLOB        /* column has NCLOB data */
#define OCI_LCR_COLUMN_XML_DATA     /* column contains xml data */
#define OCI_LCR_COLUMN_XML_DIFF     /* column contains xmldiff data */
#define OCI_LCR_COLUMN_ENCRYPTED    /* column is encrypted */
#define OCI_LCR_COLUMN_UPDATED      /* col is updated */

/* OCI_LCR_COLUMN_UPDATED is set only for the modified columns in the NEW
 * column list of an update LCR.
 */ 
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72934"></a>
<div class="props_rev_3"><a id="GUID-F837C0C0-4144-4BF2-B707-E80E57248470"></a>
<h2 id="LNOCI-GUID-F837C0C0-4144-4BF2-B707-E80E57248470" class="sect2">OCILCRNew()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Constructs a new Streams LCR object of the specified type (ROW or DDL) for the given duration.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRNew ( OCISvcCtx     *svchp, 
                  OCIError      *errhp, 
                  OCIDuration   duration, 
                  ub1           lcrtype,
                  void          **lcrp,
                  ub4           mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76479"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F837C0C0-4144-4BF2-B707-E80E57248470__GUID-CC8D79AF-FE5D-4C6B-858F-AA403317F9BD"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76480"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F837C0C0-4144-4BF2-B707-E80E57248470__GUID-404556D3-ABC1-4312-96EC-F51879BC300E"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76481"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F837C0C0-4144-4BF2-B707-E80E57248470__GUID-78122B0E-1702-4BE4-8868-CF9F4149F387"><!-- --></a>duration (IN)</dt>
<dd>
<p>Memory for the LCR is allocated for this specified duration.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76482"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F837C0C0-4144-4BF2-B707-E80E57248470__GUID-B2E90688-F078-4F02-8D8D-15F48BB997CC"><!-- --></a>lcrtype (IN)</dt>
<dd>
<p>LCR type. Values are:</p>
<pre dir="ltr">#define OCI_LCR_XROW
#define OCI_LCR_XDDL
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76483"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F837C0C0-4144-4BF2-B707-E80E57248470__GUID-5D8EABE8-809C-4108-96FD-2E5CB753E615"><!-- --></a>lcrp (IN/OUT)</dt>
<dd>
<p>If <code class="codeph">*lcrp</code> is not <code class="codeph">NULL</code>, an error is raised.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76484"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F837C0C0-4144-4BF2-B707-E80E57248470__GUID-98637A0B-6463-4F78-8573-F83636AB7DD2"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>After creation, you are not allowed to change the type of the LCR (ROW or DDL) or duration of the memory allocation.</p>
</li>
<li>
<p>Use <code class="codeph">OCILCRHeaderSet()</code> to populate common header fields for row or DDL LCR.</p>
</li>
<li>
<p>After the LCR header is initialized, use <code class="codeph">OCILCRRowColumnInfoSet()</code> or <code class="codeph">OCILCRDDLInfoSet()</code> to populate operation specific elements. Use <code class="codeph">OCILCRExtraAttributesSet()</code> to populate extra attribute information.</p>
</li>
<li>
<p>Use <code class="codeph">OCILCRFree()</code> to free the LCR created by this function.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI73072"></a><a id="LNOCI72935"></a>
<div class="props_rev_3"><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E"></a>
<h2 id="LNOCI-GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E" class="sect2">OCILCRRowColumnInfoGet()</h2>
<div>
<p>Returns the column fields in a row LCR.</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Returns the column fields in a row LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRRowColumnInfoGet ( OCISvcCtx    *svchp, 
                               OCIError     *errhp, 
                               ub2           column_value_type,
                               ub2          *num_columns,
                               oratext     **column_names,
                               ub2          *column_name_lens,
                               ub2          *column_dtyp,
                               void        **column_valuesp,
                               OCIInd       *column_indp,
                               ub2          *column_alensp,
                               ub1          *column_csetfp,
                               oraub8       *column_flags,
                               ub2          *column_csid,
                               void         *row_lcrp,
                               ub2           array_size,
                               ub4           mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76485"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-4FBA8A25-A44F-4C68-8AD7-24AAE80963DF"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76486"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-8FB9B152-84A6-4324-A071-F81F594FCBE1"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76487"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-71124F84-889A-40CE-B258-3364751DB443"><!-- --></a>column_value_type (IN)</dt>
<dd>
<p>ROW LCR column value type; either of:</p>
<pre dir="ltr">#define OCI_LCR_ROW_COLVAL_OLD
#define OCI_LCR_ROW_COLVAL_NEW
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76488"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-41D1B269-803C-4B31-AA7B-C3821A453552"><!-- --></a>num_columns (OUT)</dt>
<dd>
<p>Number of columns in the specified column array.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76489"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-E601C5A3-01E9-428F-9108-6D2BA7BD8DC8"><!-- --></a>column_names (OUT)</dt>
<dd>
<p>An array of column name pointers.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76490"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-68BCB552-A36F-4916-83D1-83CD6277D5A7"><!-- --></a>column_name_lens (OUT)</dt>
<dd>
<p>An array of column name lengths.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76491"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-A528A1AA-69A5-4EEA-89CC-73EFF194ED80"><!-- --></a>column_dtyp (OUT)</dt>
<dd>
<p>An array of column data types. Optional. Data is not returned if <code class="codeph">column_dtyp</code> is <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76492"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-A483DCDF-3AC8-405B-B482-52A15BEBAC98"><!-- --></a>column_valuesp (OUT)</dt>
<dd>
<p>An array of column data pointers.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76493"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-F734308A-F2FB-4578-BF5C-4B5A20C1B782"><!-- --></a>column_indp (OUT)</dt>
<dd>
<p>An array of indicators.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76494"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-DD97F11C-6F89-4CD1-B866-285EB5C33CE5"><!-- --></a>column_alensp (OUT)</dt>
<dd>
<p>An array of column lengths. Each returned element is the length in bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76495"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-944E17FD-C395-4308-B826-BACF68ABB0E9"><!-- --></a>column_csetfp (OUT)</dt>
<dd>
<p>An array of character set forms for the columns. Optional. Data is not returned if the argument is <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76496"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-46A3EA3A-6CF7-49F6-97A0-7AEF9B1CCC9B"><!-- --></a>column_flags (OUT)</dt>
<dd>
<p>An array of column flags. Optional. Data is not returned if the argument is <code class="codeph">NULL</code>. See Comments for the values.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76497"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-416FBBA9-D6A3-4451-A229-E76CB8294875"><!-- --></a>column_csid (OUT)</dt>
<dd>
<p>An array of character set IDs for the columns.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76498"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-A2AA55AC-5987-4333-A0F0-E7D9045EFCAC"><!-- --></a>row_lcrp (IN)</dt>
<dd>
<p><code class="codeph">row_lcrp</code> cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76499"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-4EDC426A-62C9-4B27-B5A7-77C4B715E490"><!-- --></a>array_size (IN)</dt>
<dd>
<p>Size of each of the parameter arrays. An error is returned if <code class="codeph">array_size</code> is less than the number of columns in the requested column list. The actual size of the requested column list is returned through the <code class="codeph">num_columns</code> parameter.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76500"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__GUID-C4F2A9E5-5415-4223-B1A2-C877680FF091"><!-- --></a>mode (IN)</dt>
<dd>
<p><code class="codeph">OCILCR_NEW_ONLY_MODE</code> - If this mode is specified, then the <code class="codeph">new_columns</code> returned is the count of the columns in the <code class="codeph">NEW</code> column list only. Otherwise, the <code class="codeph">new_columns</code> returned is the number of distinct columns present in either the <code class="codeph">NEW</code> or the <code class="codeph">OLD</code> column list of the given row LCR.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<ul style="list-style-type: disc;">
<li>
<p>For <code class="codeph">INSERT</code>, this function must only be called to get the NEW column values.</p>
</li>
<li>
<p>For <code class="codeph">DELETE</code>, this function must only be called to get the OLD column values.</p>
</li>
<li>
<p>For <code class="codeph">UPDATE</code>, this function can be called twice, once to get the NEW column values and once to get the OLD column values.</p>
</li>
<li>
<p>This function must not be called for <code class="codeph">COMMIT</code> operations.</p>
</li>
</ul>
<p>The following LCR column flags can be combined using bitwise <code class="codeph">OR</code> operator.</p>
<pre dir="ltr">#define OCI_LCR_COLUMN_LOB_DATA     /* column contains LOB data */
#define OCI_LCR_COLUMN_LONG_DATA    /* column contains long data */
#define OCI_LCR_COLUMN_EMPTY_LOB    /* column has an empty LOB  */
#define OCI_LCR_COLUMN_LAST_CHUNK   /* last chunk of current column */
#define OCI_LCR_COLUMN_AL16UTF16    /* column is in AL16UTF16 fmt */
#define OCI_LCR_COLUMN_NCLOB        /* column has NCLOB data */
#define OCI_LCR_COLUMN_XML_DATA     /* column contains xml data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_XML_DIFF     /* column contains xmldiff data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_ENCRYPTED    /* column is encrypted */
#define OCI_LCR_COLUMN_UPDATED      /* col is updated */

/* OCI_LCR_COLUMN_UPDATED is set only for the modified columns in the NEW
 * column list of an update LCR.
 */ 
</pre>
<p><a href="oci26xstrm001.htm#GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__BABHDBAJ" title="This table has 4 columns. Column 1 is the table column data type, column 2 is the LCR column data type, column 3 is the program variable, and column 4 is the OCI conversion function name.">Table 26-3</a> lists the currently supported table column data types. For each data type, it lists the corresponding LCR column data type, the C program variable type to cast the LCR column value, and the OCI functions that can manipulate the column values returned from <code class="codeph">OCILCRRowColumnInfoGet()</code>.</p>
<div class="tblformalwide" id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__BABHDBAJ">
<p class="titleintable">Table 26-3 Table Column Data Types</p>
<table class="cellalignment6157" title="Table Column Data Types" summary="This table has 4 columns. Column 1 is the table column data type, column 2 is the LCR column data type, column 3 is the program variable, and column 4 is the OCI conversion function name.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6272" id="d292661e3335">Table Column Data Types</th>
<th class="cellalignment6166" id="d292661e3338">LCR Column Data Type</th>
<th class="cellalignment6273" id="d292661e3341">Program Variable</th>
<th class="cellalignment6242" id="d292661e3344">Conversion Function</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3349" headers="d292661e3335">
<p><code class="codeph">VARCHAR</code>, <code class="codeph">NVARCHAR2</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3349 d292661e3338">
<p><code class="codeph">SQLT_CHR</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3349 d292661e3341">
<p><code class="codeph">char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3349 d292661e3344">&nbsp;</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3366" headers="d292661e3335">
<p><code class="codeph">NUMBER</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3366 d292661e3338">
<p><code class="codeph">SQLT_VNU</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3366 d292661e3341">
<p><code class="codeph">OCINumber</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3366 d292661e3344">
<p><code class="codeph">OCINumberToInt()</code></p>
<p><code class="codeph">OCINumberToReal()</code></p>
<p><code class="codeph">OCINumberToText()</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3390" headers="d292661e3335">
<p><code class="codeph">DATE</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3390 d292661e3338">
<p><code class="codeph">SQLT_ODT</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3390 d292661e3341">
<p><code class="codeph">OCIDate</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3390 d292661e3344">
<p><code class="codeph">OCIDateToText()</code></p>
<p>Can access structure directly to get date and time fields.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3409" headers="d292661e3335">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3409 d292661e3338">
<p><code class="codeph">SQLT_BIN</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3409 d292661e3341">
<p><code class="codeph">unsigned char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3409 d292661e3344">&nbsp;</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3423" headers="d292661e3335">
<p><code class="codeph">CHAR</code>, <code class="codeph">NCHAR</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3423 d292661e3338">
<p><code class="codeph">SQL_AFC</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3423 d292661e3341">
<p><code class="codeph">char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3423 d292661e3344">&nbsp;</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3440" headers="d292661e3335">
<p><code class="codeph">BINARY_FLOAT</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3440 d292661e3338">
<p><code class="codeph">SQLT_BFLOAT</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3440 d292661e3341">
<p><code class="codeph">float</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3440 d292661e3344">&nbsp;</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3454" headers="d292661e3335">
<p><code class="codeph">BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3454 d292661e3338">
<p><code class="codeph">SQLT_BDOUBLE</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3454 d292661e3341">
<p><code class="codeph">double</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3454 d292661e3344">&nbsp;</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3468" headers="d292661e3335">
<p><code class="codeph">TIMESTAMP</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3468 d292661e3338">
<p><code class="codeph">SQLT_TIMESTAMP</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3468 d292661e3341">
<p><code class="codeph">OCIDateTime *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3468 d292661e3344">
<p><code class="codeph">OCIDateTimeGetTime()</code></p>
<p><code class="codeph">OCIDateTimeGetDate()</code></p>
<p><code class="codeph">OCIDateTimeGetTimeZoneOffset()</code></p>
<p><code class="codeph">OCIDateTimeToText()</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3494" headers="d292661e3335">
<p><code class="codeph">TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3494 d292661e3338">
<p><code class="codeph">SQLT_TIMESTAMP_TZ</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3494 d292661e3341">
<p><code class="codeph">OCIDateTime *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3494 d292661e3344">
<p><code class="codeph">OCIDateTimeGetTime()</code></p>
<p><code class="codeph">OCIDateTimeGetDate()</code></p>
<p><code class="codeph">OCIDateTimeGetTimeZoneOffset()</code></p>
<p><code class="codeph">OCIDateTimeToText()</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3520" headers="d292661e3335">
<p><code class="codeph">TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3520 d292661e3338">
<p><code class="codeph">SQLT_TIMESTAMP_LTZ</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3520 d292661e3341">
<p><code class="codeph">OCIDateTime *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3520 d292661e3344">
<p><code class="codeph">OCIDateTimeGetTime()</code></p>
<p><code class="codeph">OCIDateTimeGetDate()</code></p>
<p><code class="codeph">OCIDateTimeGetTimeZoneOffset()</code></p>
<p><code class="codeph">OCIDateTimeToText()</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3546" headers="d292661e3335">
<p><code class="codeph">INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3546 d292661e3338">
<p><code class="codeph">SQLT_INTERVAL_YM</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3546 d292661e3341">
<p><code class="codeph">OCIInterval *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3546 d292661e3344">
<p><code class="codeph">OCIIntervalToText()</code></p>
<p><code class="codeph">OCIIntervalGetYearMonth()</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3567" headers="d292661e3335">
<p><code class="codeph">INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3567 d292661e3338">
<p><code class="codeph">SQLT_INTERVAL_DS</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3567 d292661e3341">
<p><code class="codeph">OCIInterval *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3567 d292661e3344">
<p><code class="codeph">OCIIntervalToText()</code></p>
<p><code class="codeph">OCIIntervalGetDaySecond()</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3587" headers="d292661e3335">
<p><code class="codeph">UROWID</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3587 d292661e3338">
<p><code class="codeph">SQLT_RDD</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3587 d292661e3341">
<p><code class="codeph">OCIRowid *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3587 d292661e3344">
<p><code class="codeph">OCIRowidToChar()</code></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3604" headers="d292661e3335">
<p><code class="codeph">CLOB</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3604 d292661e3338">
<p><code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3604 d292661e3341">
<p><code class="codeph">unsigned char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3604 d292661e3344">
<p><a id="GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__BABEDJDI" href="#GUID-80F5BEE8-EC26-426F-A114-9F7B7AFD497E__BABEDJDI" onclick="footdisplay(1,&#34;Call OCIXStreamOutChunkReceive() to get column data. &#34;)"><sup>Foot&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3625" headers="d292661e3335">
<p><code class="codeph">NCLOB</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3625 d292661e3338">
<p><code class="codeph">SQLT_BIN</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3625 d292661e3341">
<p><code class="codeph">unsigned char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3625 d292661e3344">
<p><a id="fnsrc_d292661e3639" href="#fnsrc_d292661e3639" onclick="footdisplay(1,&#34;Call OCIXStreamOutChunkReceive() to get column data. &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3642" headers="d292661e3335">
<p><code class="codeph">BLOB</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3642 d292661e3338">
<p><code class="codeph">SQLT_BIN</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3642 d292661e3341">
<p><code class="codeph">unsigned char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3642 d292661e3344">
<p><a id="fnsrc_d292661e3656" href="#fnsrc_d292661e3656" onclick="footdisplay(1,&#34;Call OCIXStreamOutChunkReceive() to get column data. &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3659" headers="d292661e3335">
<p><code class="codeph">LONG</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3659 d292661e3338">
<p><code class="codeph">SQLT_CHR</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3659 d292661e3341">
<p><code class="codeph">char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3659 d292661e3344">
<p><a id="fnsrc_d292661e3673" href="#fnsrc_d292661e3673" onclick="footdisplay(1,&#34;Call OCIXStreamOutChunkReceive() to get column data. &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3676" headers="d292661e3335">
<p><code class="codeph">LONG RAW</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3676 d292661e3338">
<p><code class="codeph">SQLT_BIN</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3676 d292661e3341">
<p><code class="codeph">unsigned char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3676 d292661e3344">
<p><a id="fnsrc_d292661e3690" href="#fnsrc_d292661e3690" onclick="footdisplay(1,&#34;Call OCIXStreamOutChunkReceive() to get column data. &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6274" id="d292661e3693" headers="d292661e3335">
<p><code class="codeph">XMLType</code></p>
</td>
<td class="cellalignment6170" headers="d292661e3693 d292661e3338">
<p><code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code></p>
</td>
<td class="cellalignment6275" headers="d292661e3693 d292661e3341">
<p><code class="codeph">unsigned char *</code></p>
</td>
<td class="cellalignment6244" headers="d292661e3693 d292661e3344">&nbsp;</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1</sup></p>
<p>Call OCIXStreamOutChunkReceive() to get column data.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72937"></a>
<div class="props_rev_3"><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39"></a>
<h2 id="LNOCI-GUID-A4303887-D557-4D60-84B5-CD5C7522EC39" class="sect2">OCILCRRowColumnInfoSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Populates column fields in a row LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRRowColumnInfoSet ( OCISvcCtx   *svchp, 
                               OCIError    *errhp, 
                               ub2         column_value_type,
                               ub2         num_columns,
                               oratext     **column_names,
                               ub2         *column_name_lens,
                               ub2         *column_dtyp,
                               void        **column_valuesp,
                               OCIInd      *column_indp,
                               ub2         *column_alensp,
                               ub1         *column_csetfp,
                               oraub8      *column_flags,
                               ub2         *column_csid,
                               void        *row_lcrp,
                               ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76501"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-1941FC95-B06B-440F-88B7-44877F15AD7A"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76502"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-2516242C-E5BE-47A6-8215-7632558136EC"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76503"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-22CCC640-514B-4640-A6C2-675AC056A189"><!-- --></a>column_value_type (IN)</dt>
<dd>
<p>ROW LCR Column value types:</p>
<pre dir="ltr">#define OCI_LCR_ROW_COLVAL_OLD
#define OCI_LCR_ROW_COLVAL_NEW
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76504"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-564F51CE-F127-4771-A9DC-A71C6B9C7DE8"><!-- --></a>num_columns (IN)</dt>
<dd>
<p>Number of columns in each of the array parameters.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76505"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-70998B40-D168-4595-AC0F-BECEDDA4C437"><!-- --></a>column_names (IN)</dt>
<dd>
<p>Pointer to an array of column names. Column names must be canonicalized. Column names must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76506"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-7A9D343D-088D-4EA8-A1C6-367A7FE006F8"><!-- --></a>column_name_lens (IN)</dt>
<dd>
<p>Pointer to an array of column name lengths.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76507"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-ABEDE5BE-2D0B-4259-996D-EF3C68B4F41E"><!-- --></a>column_dtyp (IN)</dt>
<dd>
<p>Pointer to an array of column data types. See Comments for valid data types.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76508"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-121FBA12-9BB3-446A-A2D4-4FA1A9EE3296"><!-- --></a>column_valuesp (IN)</dt>
<dd>
<p>Pointer to an array of column data pointers.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76509"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-30A71596-BF23-4AF5-88C7-AADF8BFC2FFD"><!-- --></a>column_indp (IN)</dt>
<dd>
<p>Pointer to an indicator array. For all data types, this is a pointer to an array of <code class="codeph">OCIInd</code> values (<code class="codeph">OCI_IND_NULL</code> or <code class="codeph">OCI_IND_NOTNULL</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76510"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-57DC581C-C710-4622-BC48-B82049C92461"><!-- --></a>column_alensp (IN)</dt>
<dd>
<p>Pointer to an array of actual column lengths in bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76511"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-00A287B1-6D9F-4413-B0AF-9AFB4355F184"><!-- --></a>column_csetfp (IN)</dt>
<dd>
<p>Pointer to an array of character set forms for the columns. The default form is <code class="codeph">SQLCS_IMPLICIT</code>. Setting this attribute causes the database or national character set to be used on the client side. Set this attribute to <code class="codeph">SQLCS_NCHAR</code> for the national character set or <code class="codeph">SQLCS_IMPLICIT</code> for the database character set. Pass 0 for non-character columns.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76512"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-27D68368-4DA8-43B7-B06F-0C695587B1EC"><!-- --></a>column_flags (IN)</dt>
<dd>
<p>Pointer to an array of column flags. (See Comments for the list of valid LCR column flags.)</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76513"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-A7EE71D7-55F0-4DEF-A393-97100CA310FF"><!-- --></a>column_csid (IN)</dt>
<dd>
<p>Pointer to an array of character set IDs for the columns.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76514"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-14C330ED-FD68-48EE-A033-5862A37DF094"><!-- --></a>row_lcrp (IN/OUT)</dt>
<dd>
<p><code class="codeph">row_lcrp</code> cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76515"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-A4303887-D557-4D60-84B5-CD5C7522EC39__GUID-9972FA52-EE99-4048-AFA1-4930AF57D397"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>For <code class="codeph">INSERT</code>, this function must only be called to specify the NEW column values.</p>
</li>
<li>
<p>For <code class="codeph">DELETE</code>, this function must only be called to specify the OLD column values.</p>
</li>
<li>
<p>For <code class="codeph">UPDATE</code>, this function can be called twice, once to specify the NEW column values and once to specify the OLD column values.</p>
</li>
<li>
<p>This function must not be called for <code class="codeph">COMMIT</code> operations.</p>
</li>
</ul>
<p>The following <a id="d292661e4028" class="indexterm-anchor"></a>LCR column flags can be combined using the bitwise <code class="codeph">OR</code> operator.</p>
<pre dir="ltr">#define OCI_LCR_COLUMN_LOB_DATA     /* column contains LOB data */
#define OCI_LCR_COLUMN_LONG_DATA    /* column contains long data */
#define OCI_LCR_COLUMN_EMPTY_LOB    /* column has an empty LOB  */
#define OCI_LCR_COLUMN_LAST_CHUNK   /* last chunk of current column */
#define OCI_LCR_COLUMN_AL16UTF16    /* column is in AL16UTF16 fmt */
#define OCI_LCR_COLUMN_NCLOB        /* column has NCLOB data */
#define OCI_LCR_COLUMN_XML_DATA     /* column contains xml data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_XML_DIFF     /* column contains xmldiff data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_ENCRYPTED    /* column is encrypted */
#define OCI_LCR_COLUMN_UPDATED      /* col is updated */

/* OCI_LCR_COLUMN_UPDATED is set only for the modified columns in the NEW
 * column list of an update LCR.
 */ 
</pre></div>
<!-- class="section" -->
<div class="section">
<p>Valid data types are:</p>
<pre dir="ltr">SQLT_AFC           SQLT_TIMESTAMP
SQLT_DAT           SQLT_TIMESTAMP_TZ
SQLT_BFLOAT        SQLT_TIMESTAMP_LTZ
SQLT_BDOUBLE       SQLT_INTERVAL_YM
SQLT_NUM           SQLT_INTERVAL_DS
SQLT_VCS
SQLT_ODT
SQLT_INT
SQLT_BIN
SQLT_CHR
SQLT_RDD
SQLT_VST
SQLT_INT
SQLT_FLT
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72938"></a>
<div class="props_rev_3"><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F"></a>
<h2 id="LNOCI-GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F" class="sect2">OCILCRDDLInfoSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Populates DDL-specific fields in a DDL LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRDDLInfoSet ( OCISvcCtx    *svchp,
                         OCIError     *errhp,
                         oratext      *object_type,
                         ub2          object_type_len,
                         oratext      *ddl_text,
                         ub4          ddl_text_len, 
                         oratext      *logon_user,
                         ub2          logon_user_len,
                         oratext      *current_schema,
                         ub2          current_schema_len,
                         oratext      *base_table_owner,
                         ub2          base_table_owner_len,
                         oratext      *base_table_name,
                         ub2          base_table_name_len,
                         oraub8       flag,
                         void         *ddl_lcrp,
                         ub4          mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76516"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-17B4E8D5-89F2-4CB7-8565-7FC66B43C4C2"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76517"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-D9106B5B-BFB2-4C2A-A6D9-E6C3E6C21D19"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76518"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-36975E8A-5AA1-4B5A-A0D4-42E81BEF3829"><!-- --></a>object_type (IN)</dt>
<dd>
<p>The type of object on which the DDL statement was executed. See Comments for the valid object types.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76519"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-5D20DF08-E250-43AB-A22C-2AB0333E7D50"><!-- --></a>object_type_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">object_type</code> string without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76520"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-0AF48FF4-F917-4F90-9B3A-992C337B34C4"><!-- --></a>ddl_text (IN)</dt>
<dd>
<p>The text of the DDL statement. This parameter must be set to a non-<code class="codeph">NULL</code> value. DDL text must be in Oracle Database DDL format.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76521"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-529E0523-E041-4624-91C7-E5236524E0D4"><!-- --></a>ddl_text_len (IN)</dt>
<dd>
<p>DDL text length in bytes without the <code class="codeph">NULL</code> terminator.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76522"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-B4D9D26D-E6B7-452B-AC38-6E9F2867D3E5"><!-- --></a>logon_user (IN)</dt>
<dd>
<p>Canonicalized name of the user whose session executed the DDL statement.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76523"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-85D725F9-1ED4-474B-B696-FA978B1D1C8B"><!-- --></a>logon_user_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">logon_user</code> string without the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76524"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-091E2C88-C72F-4DA9-B088-E8FB5644F647"><!-- --></a>current_schema (IN)</dt>
<dd>
<p>The canonicalized schema name that is used if no schema is specified explicitly for the modified database objects in <code class="codeph">ddl_text</code>. If a schema is specified in <code class="codeph">ddl_text</code> that differs from the one specified for <code class="codeph">current_schema</code>, then the function uses the schema specified in <code class="codeph">ddl_text</code>.</p>
<p>This parameter must be set to a non-<code class="codeph">NULL</code> value.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76525"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-4B11B4F5-E46A-48B7-875D-DEC012952C9C"><!-- --></a>current_schema_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">current_schema</code> string without the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76526"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-A4FB9939-BEC6-4CAF-B4A8-5766CB1FCA1E"><!-- --></a>base_table_owner (IN)</dt>
<dd>
<p>If the DDL statement is a table-related DDL (such as <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> or <code class="codeph">ALTER</code> <code class="codeph">TABLE</code>), or if the DDL statement involves a table (such as creating a trigger on a table), then <code class="codeph">base_table_owner</code> specifies the canonicalized owner of the table involved. Otherwise, <code class="codeph">base_table_owner</code> is <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76527"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-D6A4B996-E17D-42D8-9119-A3C6E76DC5FB"><!-- --></a>base_table_owner_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">base_table_owner</code> string without the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76528"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-EBAD2A81-D5F8-4DD2-B1DE-C974BE179D3F"><!-- --></a>base_table_name (IN)</dt>
<dd>
<p>If the DDL statement is a table-related DDL (such as <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> or <code class="codeph">ALTER</code> <code class="codeph">TABLE</code>), or if the DDL statement involves a table (such as creating a trigger on a table), then <code class="codeph">base_table_name</code> specifies the canonicalized name of the table involved. Otherwise, <code class="codeph">base_table_name</code> is <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76529"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-55D6C979-3D58-4D86-9251-032090251ECC"><!-- --></a>base_table_name_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">base_table_name</code> without the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76530"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-FD356BD8-1C66-466B-8197-0051AEE389B8"><!-- --></a>flag (IN)</dt>
<dd>
<p>DDL LCR flag. (Not currently used; used for future extension.) Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76531"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-44ECC0C2-FEE6-4856-A6A4-021F05440036"><!-- --></a>ddl_lcrp (IN/OUT)</dt>
<dd>
<p><code class="codeph">ddl_lcrp</code> cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76532"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6ACCE3A6-A627-47EC-9FAA-FA01BE907A4F__GUID-FA47CF50-8096-4A68-ACB7-85DCC32E8DA5"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The following are valid object types:</p>
<pre dir="ltr">CLUSTER
FUNCTION
INDEX
OUTLINE
PACKAGE
PACKAGE BODY
PROCEDURE
SEQUENCE
SYNONYM
TABLE
TRIGGER
TYPE
USER
VIEW
</pre>
<p><code class="codeph">NULL</code> is also a valid object type. Specify <code class="codeph">NULL</code> for all object types not listed.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72939"></a>
<div class="props_rev_3"><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27"></a>
<h2 id="LNOCI-GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27" class="sect2">OCILCRHeaderSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Initializes the common header fields for row or DDL LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRHeaderSet ( OCISvcCtx  *svchp,
                        OCIError   *errhp,
                        oratext    *src_db_name,
                        ub2        src_db_name_len,
                        oratext    *cmd_type,
                        ub2        cmd_type_len,
                        oratext    *owner,
                        ub2        owner_len,
                        oratext    *oname,
                        ub2        oname_len,
                        ub1        *tag,
                        ub2        tag_len,
                        oratext    *txid,
                        ub2        txid_len,
                        OCIDate    *src_time,
                        ub1        *position,
                        ub2        position_len,
                        oraub8     flag,
                        void       *lcrp,
                        ub4        mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76533"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-FAEA444C-E80C-4CA9-8835-070F8112C2BC"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76534"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-FFCD0C54-6CD2-4691-99DD-0FCED24B853F"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76535"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-7D8C5CAD-A32A-4153-BBC5-B5297C58FC58"><!-- --></a>src_db_name (IN)</dt>
<dd>
<p>Canonicalized source database name. Must be non-<code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76536"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-C6512FA3-B4CC-4EA2-8742-ADB3FB3AE137"><!-- --></a>src_db_name_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">src_db_name</code> string in bytes excluding the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76537"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-6241C5C2-8302-48EB-80F9-D1CF9254C0C0"><!-- --></a>cmd_type (IN)</dt>
<dd>
<p>For row LCRs: One of the following values:</p>
<div class="infobox-note" id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-29951DA8-0965-4A59-ACA0-3719E53E6023">
<p class="notep1">Note:</p>
<p>The values, <code class="codeph">#define OCI_LCR_ROW_CMD_ROLLBACK</code> and <code class="codeph">#define OCI_LCR_ROW_CMD_START_TX</code>, are available starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</p>
</div>
<pre dir="ltr">#define OCI_LCR_ROW_CMD_INSERT
#define OCI_LCR_ROW_CMD_DELETE
#define OCI_LCR_ROW_CMD_UPDATE
#define OCI_LCR_ROW_CMD_COMMIT
#define OCI_LCR_ROW_CMD_ROLLBACK
#define OCI_LCR_ROW_CMD_START_TX
#define OCI_LCR_ROW_CMD_LOB_WRITE
#define OCI_LCR_ROW_CMD_LOB_TRIM
#define OCI_LCR_ROW_CMD_LOB_ERASE
</pre>
<p>For DDL LCRs: One of the command types in <a href="ociaahan.htm#GUID-A251CF91-EB9F-4DBC-8BB8-FB5EA92C20DE__BAJHAFFF">OCI_ATTR_SQLFNCODE</a>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76538"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-15814AC2-5EE4-4B13-98C6-DBEAB8EE91F1"><!-- --></a>cmd_type_len (IN)</dt>
<dd>
<p>Length of <code class="codeph">cmd_type</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76539"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-430C6F21-2BC7-4130-8B55-F92C028B78B6"><!-- --></a>owner (IN)</dt>
<dd>
<p>Canonicalized table owner name. Owner is not required for <code class="codeph">COMMIT</code> LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76540"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-EB60D904-EB31-4CC7-84CD-AC9026606AE5"><!-- --></a>owner_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">owner</code> string in bytes excluding the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76541"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-312264A9-6365-45DB-A1CE-7DF8B6CDA6F5"><!-- --></a>oname (IN)</dt>
<dd>
<p>Canonicalized table name. Owner is not required for <code class="codeph">COMMIT</code> LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76542"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-28D55BE2-8BDD-49A9-BC32-B2E3280E6CC2"><!-- --></a>oname_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">oname</code> string in bytes excluding the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76543"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-FABCDA83-8E92-4F1E-A4C1-15731EB2F364"><!-- --></a>tag (IN)</dt>
<dd>
<p>A binary tag that enables tracking of the LCR. For example, you can use this tag to determine the original source database of the DML statement if apply forwarding is used.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76544"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-F2C0F103-E4D5-44BD-A671-288F961623C9"><!-- --></a>tag_len (IN)</dt>
<dd>
<p>Number of bytes in the tag. Cannot exceed 2000 bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76545"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-10F71BFC-ACB2-4282-8ADB-1F907A423012"><!-- --></a>txid (IN)</dt>
<dd>
<p>Transaction ID. Must be non-<code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76546"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-88D7E760-609B-4170-940D-600DE0A13CFA"><!-- --></a>txid_len (IN)</dt>
<dd>
<p>Length of the <code class="codeph">txid</code> string in bytes, excluding the <code class="codeph">NULL</code> terminator. Must follow Oracle Database naming conventions and size limitations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76547"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-B664DC1A-E9D8-4BC4-B7DA-CF8277AE3375"><!-- --></a>src_time (IN)</dt>
<dd>
<p>The time when the change was generated in the online redo log file of the source database.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76548"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-4D5D52FB-4115-4C92-AFE1-F10CBF4E73AC"><!-- --></a>position (IN)</dt>
<dd>
<p>Position for LCR. Must be non-<code class="codeph">NULL</code> and byte-comparable.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76549"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-06F06C15-0367-4959-ABEE-41BBFD4F41CD"><!-- --></a>position_len (IN)</dt>
<dd>
<p>Length of position. Must be greater than zero.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76550"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-6F419CE5-5370-403C-89C9-FE15A0868781"><!-- --></a>flag (IN)</dt>
<dd>
<p>LCR flag. Possible flags are listed in Comments.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76551"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-1DF6D5A6-349E-4911-A0B0-4489D3921415"><!-- --></a>lcrp (IN/OUT)</dt>
<dd>
<p><code class="codeph">lcrp</code> cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76552"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11DBB0D4-53DA-464F-8D2F-C4FFA3F3FD27__GUID-38177F04-D826-436B-9E39-C1149ABD033F"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>This function sets all internal fields of the LCR to <code class="codeph">NULL</code> including extra attributes.</p>
</li>
<li>
<p>This function <span class="italic">does not</span> deep copy the passed-in values. You must ensure data is valid for the duration of the LCR.</p>
</li>
<li>
<p>For <code class="codeph">COMMIT</code> LCRs, <code class="codeph">owner</code> and <code class="codeph">oname</code> information are not required. Provide valid values for <code class="codeph">src_db_name</code>, <code class="codeph">cmd_type</code>, <code class="codeph">tag</code>, <code class="codeph">txid</code>, and <code class="codeph">position</code>.</p>
</li>
<li>
<p>For row LCRs, use <code class="codeph">OCILCRRowColumnInfoSet()</code> to populate row LCR-specific column information.</p>
</li>
<li>
<p>For DDL LCRs, use <code class="codeph">OCILCRDDLInfoSet()</code> to populate DDL operation specific information.</p>
</li>
<li>
<p>For row or DDL LCRs, use <code class="codeph">OCILCRAttributesSet()</code> to populate extra attribute information.</p>
</li>
</ul>
<p>The following are LCR flags:</p>
<pre dir="ltr">#define OCI_ROWLCR_HAS_ID_KEY_ONLY  /* only has ID key cols */
#define OCI_ROWLCR_SEQ_LCR          /* sequence lcr */
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72941"></a>
<div class="props_rev_3"><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042"></a>
<h2 id="LNOCI-GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042" class="sect2">OCILCRLobInfoGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Returns the LOB information for a piece-wise LOB LCR generated from a <code class="codeph">DBMS_LOB</code> or <code class="codeph">OCILob</code> procedure.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRLobInfoGet ( OCISvcCtx   *svchp, 
                         OCIError    *errhp, 
                         oratext     **column_name,
                         ub2         *column_name_len,
                         ub2         *column_dty,
                         oraub8      *column_flag,
                         ub4         *offset,
                         ub4         *size,
                         void        *row_lcrp,
                         ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76553"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-665BDD97-4BEB-40B5-A055-2EFEC1DA6DDE"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76554"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-65DC2BB4-C8ED-4A6B-9A11-141B69196254"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76555"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-71DE1EF4-7B8D-4785-9415-A45214F0A2B1"><!-- --></a>column_name (OUT)</dt>
<dd>
<p>LOB column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76556"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-62E62D11-FD47-44D7-9C8B-3D9D2AA7BE6D"><!-- --></a>column_name_len (OUT)</dt>
<dd>
<p>Length of LOB column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76557"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-C96BA029-7B15-4BF8-9963-41EF594A1019"><!-- --></a>column_dty (OUT)</dt>
<dd>
<p>Column data type (either <code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76558"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-07CE054A-263D-421C-8A4C-227CE82987CE"><!-- --></a>column_flag (OUT)</dt>
<dd>
<p>Column flag. See Comments in <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-A4303887-D557-4D60-84B5-CD5C7522EC39">OCILCRRowColumnInfoSet()</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76559"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-2943B3D2-3781-4295-9253-9212E4CE879E"><!-- --></a>offset (OUT)</dt>
<dd>
<p>LOB operation offset in code points. Only returned for <code class="codeph">LOB</code> <code class="codeph">WRITE</code> and <code class="codeph">LOB</code> <code class="codeph">TRIM</code> operations. This is the same as the <code class="codeph">offset</code> parameter for <code class="codeph">OCILobErase()</code> or the <code class="codeph">offset</code> parameter in <code class="codeph">OCILobWrite()</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76560"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-2EA95736-51ED-4929-B8A4-DC7749C46022"><!-- --></a>size (OUT)</dt>
<dd>
<p>LOB operation size in code points. Only returned for <code class="codeph">LOB</code> <code class="codeph">TRIM</code> and <code class="codeph">LOB</code> <code class="codeph">ERASE</code> operations. This is the same as the <code class="codeph">new_length</code> parameter in <code class="codeph">OCILobTrim()</code> or the <code class="codeph">amtp</code> parameter in <code class="codeph">OCILobErase()</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76561"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-D62369F0-E2A2-4B8A-B172-1C27C73ECBE9"><!-- --></a>row_lcrp (IN)</dt>
<dd>
<p>Pointer to a row LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76562"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D1147B3C-F16C-4470-BC64-B8CADF83C042__GUID-AC9D53C3-A71C-4060-AA04-C15369832077"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Returns <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72942"></a>
<div class="props_rev_3"><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C"></a>
<h2 id="LNOCI-GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C" class="sect2">OCILCRLobInfoSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sets the LOB information for a piece-wise LOB LCR. This call is valid when the input LCR is a <code class="codeph">LOB_WRITE</code>, <code class="codeph">LOB_ERASE</code>, or <code class="codeph">LOB_TRIM</code>; otherwise, an error is returned.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRLobInfoSet ( OCISvcCtx   *svchp, 
                         OCIError    *errhp, 
                         oratext     *column_name,
                         ub2         column_name_len,
                         ub2         column_dty,
                         oraub8      column_flag,
                         ub4         offset,
                         ub4         size,
                         void        *row_lcrp,
                         ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76563"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-2807158B-5925-4FEB-B219-F684F95A2A1B"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76564"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-DB16D89B-B6A8-4E3A-BE46-FE877ABA8FEB"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76565"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-9C9D6FAE-2D39-4501-9109-A73EDA7F5D9D"><!-- --></a>column_name (IN)</dt>
<dd>
<p>LOB column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76566"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-9A503C9F-AA0B-40E4-B34C-6F9295F40537"><!-- --></a>column_name_len (IN)</dt>
<dd>
<p>Length of LOB column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76567"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-19A66677-B5F6-482A-8596-E9A356A0F58B"><!-- --></a>column_dty (IN)</dt>
<dd>
<p>Column data type (either <code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76568"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-C98F0C4B-0713-428B-B2D7-71526F249BE4"><!-- --></a>column_flag (IN)</dt>
<dd>
<p>Column flag. See Comments in <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-A4303887-D557-4D60-84B5-CD5C7522EC39">OCILCRRowColumnInfoSet()</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76569"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-F66C5116-1865-418F-AF48-45AED3EB6FD0"><!-- --></a>offset (IN)</dt>
<dd>
<p>LOB operation offset in code points. Only required for <code class="codeph">LOB</code> <code class="codeph">WRITE</code> and <code class="codeph">LOB</code> <code class="codeph">TRIM</code> operations. This is the same as the <code class="codeph">soffset</code> parameter for <code class="codeph">OCILobErase()</code> or the <code class="codeph">offset</code> parameter in <code class="codeph">OCILobWrite()</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76570"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-912BDD1B-CC1F-4AC2-BD73-FBF46A820180"><!-- --></a>size (IN)</dt>
<dd>
<p>LOB operation size in code points. Only required for <code class="codeph">LOB</code> <code class="codeph">TRIM</code> and <code class="codeph">LOB</code> <code class="codeph">ERASE</code> operations.This is the same as the <code class="codeph">new_length</code> parameter in <code class="codeph">OCILobTrim()</code> or the <code class="codeph">amtp</code> parameter in <code class="codeph">OCILobErase()</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76571"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-C21FBE26-C803-41C5-B312-6E5A7E7A5FC0"><!-- --></a>row_lcrp (IN/OUT)</dt>
<dd>
<p>Pointer to a row LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76572"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-11F2A2B0-DB08-4545-AA96-184AA4474F0C__GUID-9B0FD275-6E0F-4ED0-94F6-BEC011237AD6"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Returns <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72945"></a>
<div class="props_rev_3"><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D"></a>
<h2 id="LNOCI-GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D" class="sect2">OCILCRSCNsFromPosition()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Returns the SCN and the commit SCN from the position value. The input position must be one that is obtained from an XStream outbound server. An error is returned if the input position does not conform to the expected format.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRSCNsFromPosition ( OCISvcCtx   *svchp, 
                               OCIError    *errhp, 
                               ub1         *position,
                               ub2         position_len,
                               OCINumber   *scn,
                               OCINumber   *commit_scn,
                               ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76573"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D__GUID-F1DCEEB9-35CE-4D73-8A5B-C691ED684F7E"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76574"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D__GUID-BC94AF09-1D8F-4B95-ACD4-BF6B6927DCCC"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76575"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D__GUID-73779BA6-743D-4AF6-95F7-E61B2ED09FD7"><!-- --></a>position (IN)</dt>
<dd>
<p>LCR position value.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76576"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D__GUID-37330824-3CE9-43D6-B250-CBADCADF267A"><!-- --></a>position_len (IN)</dt>
<dd>
<p>Length of LCR position value.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76577"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D__GUID-D5B34717-F721-45E4-A23C-199868CA6D1B"><!-- --></a>scn (OUT)</dt>
<dd>
<p>SCN number embedded in the given LCR position.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76578"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D__GUID-475F5F40-E7E7-4A24-A1F5-6068D653B8A9"><!-- --></a>commit_scn (OUT)</dt>
<dd>
<p>The commit SCN embedded in the given position.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76579"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D5100804-5AAE-4CEC-8B1F-9137DEBD412D__GUID-6287381B-2951-4C23-87C3-C86A3E8B1512"><!-- --></a>mode (IN)</dt>
<dd>
<p>Mode flags used for future expansion. Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72947"></a>
<div class="props_rev_3"><a id="GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D"></a>
<h2 id="LNOCI-GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D" class="sect2">OCILCRSCNToPosition()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Converts an SCN to a position. The generated position can be passed as the <code class="codeph">last_position</code> to <code class="codeph">OCIXStreamOutAttach()</code> to filter the LCRs with commit SCN less than the given SCN and the LCR&#39;s SCN less than the given SCN. Therefore, the first LCR sent by the outbound server is either:</p>
<ul style="list-style-type: disc;">
<li>
<p>A commit LCR at the given SCN, or</p>
</li>
<li>
<p>The first LCR of the subsequent transaction with commit SCN greater than or equal to the given SCN.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRSCNToPosition ( OCISvcCtx  *svchp,
                            OCIError   *errhp,
                            ub1        *position,
                            ub2        *position_len,
                            OCINumber  *scn,
                            ub4        mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76580"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D__GUID-556361A7-EAA8-43E6-A3BC-7BFEC6A6C640"><!-- --></a>svchp (IN)</dt>
<dd>
<p>OCI service context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76581"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D__GUID-70330C11-F434-424B-8476-114174C495F8"><!-- --></a>errhp (IN)</dt>
<dd>
<p>OCI error handle.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76582"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D__GUID-FC56BE18-A69B-4A55-944A-8A071B4255C7"><!-- --></a>position (OUT)</dt>
<dd>
<p>The resulting position. You must preallocate <code class="codeph">OCI_LCR_MAX_POSITION_LEN</code> bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76583"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D__GUID-69026ABD-EAA3-415A-94F6-A6530271568F"><!-- --></a>position_len (OUT)</dt>
<dd>
<p>Length of <code class="codeph">position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76584"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D__GUID-DFB30C1D-D078-4F9D-95BA-51BD29604E01"><!-- --></a>scn (IN)</dt>
<dd>
<p>The SCN to be stored in <code class="codeph">position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76585"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-2A62CD9E-ACE8-4C8E-83D4-6A7BDF7B165D__GUID-2ECB771E-FE08-4B9A-8E7F-B344556B3D36"><!-- --></a>mode (IN)</dt>
<dd>
<p>Mode flags (Not currently used; used for future extension).</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Returns <code class="codeph">OCI_SUCCESS</code> if the conversion succeeds, <code class="codeph">OCI_ERROR</code> otherwise.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72948"></a>
<div class="props_rev_3"><a id="GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819"></a>
<h2 id="LNOCI-GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819" class="sect2">OCILCRWhereClauseGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Gets the <code class="codeph">WHERE</code> clause statement for the given row LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRWhereClauseGet ( OCISvcCtx  *svchp,
                             OCIError   *errhp,
                             oratext    *wc_stmt,
                             ub4        *wc_stmt_len,
                             void       *row_lcrp,
                             ub4        mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76586"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819__GUID-EAED2979-3AAB-4421-B03A-98FBA73D5108"><!-- --></a>svchp (IN/OUT)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76587"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819__GUID-486C3CB1-5536-42B6-B387-F073CB0195EE"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76588"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819__GUID-0ABCA3AE-F8D8-4A22-A593-A5D08FC63A3A"><!-- --></a>wc_stmt (OUT)</dt>
<dd>
<p>SQL statement equivalent to the LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76589"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819__GUID-C82E48B4-AF21-4778-84AC-843063F9A921"><!-- --></a>wc_stmt_len (IN/OUT)</dt>
<dd>
<p>Length of the <code class="codeph">wc_stmt</code> buffer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76590"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819__GUID-86500719-275B-4C0C-A5B2-A8817E305D9B"><!-- --></a>row_lcrp (IN)</dt>
<dd>
<p>Row LCR to be converted to SQL.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76591"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-7F3AC0FD-403B-43DF-BDE2-6FA5DE903819__GUID-B372CB79-A8E5-4955-892C-D40F1B486218"><!-- --></a>mode (IN)</dt>
<dd>
<p>Mode flags used for future expansion. Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The <code class="codeph">WHERE</code> clause generated for an <code class="codeph">INSERT</code> LCR has all the columns that are being inserted. This <code class="codeph">WHERE</code> clause could be used to identify the inserted row after it is inserted, for example, like &#34;returning <code class="codeph">ROWID</code>&#34;.</p>
<pre dir="ltr">INSERT INTO TAB(COL1) VALUES (10) -&gt; WHERE COL1=10
</pre>
<p>The <code class="codeph">WHERE</code> clause generated for <code class="codeph">UPDATE</code> has all the columns in the old column list. However, the values of the columns are that of the new value if it exists in the new column list of the <code class="codeph">UPDATE</code>. If the column does not have a new value, then the old column value is used.</p>
<pre dir="ltr">UPDATE TAB SET COL1 = 10 WHERE COL1 = 20 -&gt; WHERE COL1 = 10
UPDATE TAB SET COL2 = 20 WHERE COL1 = 20 -&gt; WHERE COL1 = 20
</pre>
<p>The <code class="codeph">WHERE</code> clause for DELETE uses the columns and values from the old column list.</p>
<p>LOB piecewise operations use the new columns and values for generating the <code class="codeph">WHERE</code> clause.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Returns</p>
<p><code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72949"></a>
<div class="props_rev_3"><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122"></a>
<h2 id="LNOCI-GUID-72D8899B-0077-48C0-9861-E008A0530122" class="sect2">OCILCRWhereClauseWithBindVarGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Gets the <code class="codeph">WHERE</code> clause statement with bind variables for the given row LCR.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCILCRWhereClauseWithBindVarGet ( OCISvcCtx  *svchp,
                                        OCIError   *errhp,
                                        oratext    *wc_stmt,
                                        ub4        *wc_stmt_len,
                                        ub2        *num_bind_var,
                                        ub2        *bind_var_dtyp,
                                        void       **bind_var_valuesp,
                                        OCIInd     *bind_var_indp,
                                        ub2        *bind_var_alensp,
                                        ub2        *bind_var_csetidp,
                                        ub1        *bind_var_csetfp,
                                        void       *row_lcrp,
                                        ub2        array_size,
                                        oratext    *bind_var_syntax,
                                        ub4        mode ); 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76592"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-ED804B27-C189-4554-8D33-2112964E5734"><!-- --></a>svchp (IN/OUT)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76593"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-2EADA3A5-4B63-4A09-B07A-D77333266078"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76594"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-8C609D6B-3C83-4761-BFC6-88BFD58E1E49"><!-- --></a>wc_stmt (OUT)</dt>
<dd>
<p>SQL statement equivalent to the LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76595"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-73962AB3-AC38-4E75-8832-0D691954FF0C"><!-- --></a>wc_stmt_len (IN/OUT)</dt>
<dd>
<p>Length of the <code class="codeph">wc_stmt</code> buffer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76596"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-8644A291-1B72-42B0-AC5F-CA06C1B28001"><!-- --></a>num_bind_var (OUT)</dt>
<dd>
<p>Number of bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76597"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-13E6D041-9506-48BD-8DC6-B597140F609A"><!-- --></a>bind_var_dtyp (OUT)</dt>
<dd>
<p>Array of data types of bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76598"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-39575987-6ABE-4B90-B775-3966B6191FDC"><!-- --></a>bind_var_valuesp (OUT)</dt>
<dd>
<p>Array of values of bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76599"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-C80D8DF2-BEDE-4E24-AFF9-9F114F18ABF4"><!-- --></a>bind_var_indp (OUT)</dt>
<dd>
<p>Array of <code class="codeph">NULL</code> indicators of bind variables.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76600"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-4881123E-8986-4A47-95E5-DA8A3335F72E"><!-- --></a>bind_var_alensp (OUT)</dt>
<dd>
<p>Array of lengths of bind values.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76601"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-EA11D471-5855-472B-9832-B6A599499987"><!-- --></a>bind_var_csetidp (OUT)</dt>
<dd>
<p>Array of char set IDs of binds.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76602"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-B5037368-F725-47C0-A4CD-BDDD0DF806CF"><!-- --></a>bind_var_csetfp (OUT)</dt>
<dd>
<p>Array of char set forms of binds.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76603"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-031B2C84-16F9-47C6-9E30-373C3B409B16"><!-- --></a>row_lcrp (IN)</dt>
<dd>
<p>Row LCR to be converted to SQL.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76604"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-2E527FBB-053D-492B-B844-9A8A73A75E0E"><!-- --></a>array_size (IN)</dt>
<dd>
<p>Size of the array of bind values.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76605"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-80A6A430-ABFB-4413-ABE7-96824506C446"><!-- --></a>bind_var_syntax (IN)</dt>
<dd>
<p>Native syntax to be used for binds.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76606"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-72D8899B-0077-48C0-9861-E008A0530122__GUID-2092A91D-C9CE-4723-981B-A3C4106908BD"><!-- --></a>mode (IN)</dt>
<dd>
<p>Mode flags for future expansion. Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>If <code class="codeph">array_size</code> is not large enough to accommodate the number of columns in the requested column list, then <code class="codeph">OCI_ERROR</code> is returned. The expected <code class="codeph">array_size</code> is returned through the <code class="codeph">num_bind_var</code> parameter.</p>
<p><code class="codeph">bind_var_syntax</code> for Oracle Database should contain (<code class="codeph">:</code>). This generates positional binds such as <code class="codeph">:1</code>, <code class="codeph">:2</code>, <code class="codeph">:3</code>, and so on. For non-Oracle databases input the string that must be used for binds.</p>
<p>The <code class="codeph">WHERE</code> clause generated for <code class="codeph">INSERT</code> LCR has all the columns that are being inserted. This <code class="codeph">WHERE</code> clause can identify the inserted row after it is inserted, for example, like &#34;returning <code class="codeph">ROWID</code>&#34;.</p>
<pre dir="ltr">INSERT INTO TAB(COL1) VALUES (10) -&gt; WHERE COL1=10
</pre>
<p>The <code class="codeph">WHERE</code> clause generated for <code class="codeph">UPDATE</code> has all the columns in the old column list. However, the values of the columns are that of the new column value of the column if it exists in the new values of the <code class="codeph">UPDATE</code>. If the column appears only in the old column, then the old column value is used.</p>
<pre dir="ltr">UPDATE TAB SET COL1 = 10 WHERE COL1 = 20 -&gt; WHERE COL1 = 10
UPDATE TAB SET COL2 = 20 WHERE COL1 = 20 -&gt; WHERE COL1 = 20
</pre>
<p>The <code class="codeph">WHERE</code> clause for <code class="codeph">DELETE</code> uses the columns and values from the old column list.</p>
<p>LOB piecewise operations use the new columns and values for generating the <code class="codeph">WHERE</code> clause.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Returns</p>
<p><code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72950"></a>
<div class="props_rev_3"><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758"></a>
<h2 id="LNOCI-GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758" class="sect2">OCIXStreamInAttach()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Attaches to an inbound server. The client application must connect to the database using a dedicated connection.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInAttach ( OCISvcCtx  *svchp,
                           OCIError   *errhp,
                           oratext    *server_name,
                           ub2        server_name_len,
                           oratext    *source_name,
                           ub2        source_name_len,
                           ub1        *last_position,
                           ub2        *last_position_len,
                           ub4        mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76607"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-51C55DF0-D6FD-4C6D-99CE-0F898217593D"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76608"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-523B94D0-945E-49F5-B816-3CEED3E3B871"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76609"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-92120EBA-C780-4CCF-BBF5-7C39F5620E68"><!-- --></a>server_name (IN)</dt>
<dd>
<p>XStream inbound server name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76610"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-469C332A-6713-440B-9722-889B33355C95"><!-- --></a>server_name_len (IN)</dt>
<dd>
<p>Length of the XStream inbound server name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76611"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-612EABDA-38C6-4E30-B910-9EA76BD67956"><!-- --></a>source_name (IN)</dt>
<dd>
<p>Source name to identify the data source.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76612"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-50D45090-3033-473C-A01C-53C8107B3E38"><!-- --></a>source_name_len (IN)</dt>
<dd>
<p>Source name length.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76613"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-4092A506-8C66-47A8-AAEF-B3F2742A705F"><!-- --></a>last_position (OUT)</dt>
<dd>
<p>Last position received by inbound server. Optional. If specified, then you must preallocate <code class="codeph">OCI_LCR_MAX_POSITION_LEN</code> bytes for the return value.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76614"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-0624B59E-B7EC-4026-AEEE-9B24DBACD774"><!-- --></a>last_position_len (OUT)</dt>
<dd>
<p>Length of <code class="codeph">last_position</code>. Must be non-<code class="codeph">NULL</code> if <code class="codeph">last_position</code> is non-<code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76615"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-F685A8BB-B874-44D7-89E8-1A8A0BF25758__GUID-259E4B7C-12DC-4515-8268-6F18D480706F"><!-- --></a>mode (IN)</dt>
<dd>
<p><code class="codeph">OCIXSTREAM_IN_ATTACH_RESTART_INBOUND</code> - If this mode is specified, then this function can notify the server to restart the inbound server regardless of whether it is in a disabled or aborted state. If you do not pass in this mode and the inbound server is in an aborted state when this call is made, then the function returns an error.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The name of the inbound server must be provided because multiple inbound servers can be configured in one Oracle instance. This function returns <code class="codeph">OCI_ERROR</code> if any error is encountered while attaching to the inbound server. Only one client can attach to an XStream inbound server at any time. An error is returned if multiple clients attempt to attach to the same inbound server or if the same client attempts to attach to multiple inbound servers concurrently.</p>
<p>This function returns the last position received by the inbound server. Having successfully attached to the server, the client should resume sending LCRs with positions greater than this <code class="codeph">last_position</code> since the inbound server discards all LCRs with positions less than or equal to the <code class="codeph">last_position</code>.</p>
<p>Returns either <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code> status code.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72951"></a>
<div class="props_rev_3"><a id="GUID-3DD2C906-C244-454C-861D-998A7B8032B5"></a>
<h2 id="LNOCI-GUID-3DD2C906-C244-454C-861D-998A7B8032B5" class="sect2">OCIXStreamInDetach()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Detaches from the inbound server.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInDetach ( OCISvcCtx  *svchp,
                           OCIError   *errhp,
                           ub1        *processed_low_position,
                           ub2        *processed_low_position_len,
                           ub4        mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76616"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3DD2C906-C244-454C-861D-998A7B8032B5__GUID-A80CADE4-79AE-4F35-B2B1-F7CF33A7C711"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76617"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3DD2C906-C244-454C-861D-998A7B8032B5__GUID-12AD2071-2DEC-46EF-998E-521051F9254A"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76618"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3DD2C906-C244-454C-861D-998A7B8032B5__GUID-9E1F008B-34CC-4260-83EE-4F8F2C748AB9"><!-- --></a>processed_low_position (OUT)</dt>
<dd>
<p>The server&#39;s processed low position.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76619"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3DD2C906-C244-454C-861D-998A7B8032B5__GUID-129D93C7-B86E-4BEF-A146-D91032E597AE"><!-- --></a>processed_low_position (OUT)</dt>
<dd>
<p>Length of <code class="codeph">processed_low_position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76620"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3DD2C906-C244-454C-861D-998A7B8032B5__GUID-4131EF2B-ED74-436E-9739-0013A3B3CA23"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>You must pass in a preallocated buffer for the position argument. The maximum length of this buffer is <code class="codeph">OCI_LCR_MAX_POSITION_LEN</code>. This position is exposed in <code class="codeph">DBA_XSTREAM_INBOUND_PROGRESS</code> view</p>
<p>This call returns the server&#39;s processed low position. If this function is invoked while a <code class="codeph">OCIXStreamInLCRSend()</code> call is in progress, then it immediately terminates that call before detaching from the inbound server.</p>
<p>Returns either <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code> status code.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72952"></a>
<div class="props_rev_3"><a id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF"></a>
<h2 id="LNOCI-GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF" class="sect2">OCIXStreamInLCRSend()</h2>
<div>
<p>Sends an LCR stream from the client to the attached inbound server.</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>To avoid a network round-trip for every <code class="codeph">OCIXStreamInLCRSend()</code> call, the connection is tied to this call and terminates the call after an ACK interval since the LCR stream is initiated to the server.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInLCRSend ( OCISvcCtx   *svchp,
                            OCIError    *errhp,
                            void        *lcrp,
                            ub1         lcrtype,
                            oraub8      flag,
                            ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76621"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF__GUID-7164B69D-3D79-4E84-B4A7-7AA1484D6765"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76622"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF__GUID-688FE20C-E3E6-44ED-A7AA-E07FA33C74EA"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76623"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF__GUID-9449141B-59BB-403B-8A11-34BD2F247457"><!-- --></a>lcrp (IN)</dt>
<dd>
<p>Pointer to the new LCR to send. It cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76624"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF__GUID-DAEF19B8-2BB6-4AA5-956D-FB1E24A02FB2"><!-- --></a>lcrtype (IN)</dt>
<dd>
<p>LCR type. Either of:</p>
<pre dir="ltr">#define OCI_LCR_XROW
#define OCI_LCR_XDDL
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76625"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF__GUID-9993190F-530E-42BE-9756-76FE4201F6BE"><!-- --></a>flag (IN)</dt>
<dd>
<p>If bit <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> (0x01) is set, then LCR contains more chunk data. You must call <code class="codeph">OCIXStreamInChunkSend()</code> before calling <code class="codeph">OCIXStreamInLCRSend()</code> again.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76626"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF__GUID-9F020661-377A-4388-AFF7-F2E61F629ABC"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Return codes are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_STILL_EXECUTING</code> means that the current call is still in progress. The connection associated with the specified service context handle is still tied to this call for streaming the LCRs to the server. An error is returned if you attempt to use the same connection to execute any OCI calls that require database round-trip, for example, <code class="codeph">OCIStmtExecute()</code>, <code class="codeph">OCIStmtFetch()</code>, <code class="codeph">OCILobRead()</code>, and so on. <code class="codeph">OCILCR*</code> calls are local calls; thus, they are valid while this call is in progress.</p>
</li>
<li>
<p><code class="codeph">OCI_SUCCESS</code> means the current call is completed. You can execute <code class="codeph">OCIStmt*</code>, <code class="codeph">OCILob*</code>, and so on from the same service context.</p>
</li>
<li>
<p><code class="codeph">OCI_ERROR</code> means this call encounters some errors. Use <code class="codeph">OCIErrorGet()</code> to obtain information about the error.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<div class="infoboxnotealso" id="GUID-65E4B034-6D00-4264-AA9A-3712491EDBCF__GUID-BB802991-D40C-49DC-B2D2-4BFD47E24FF5">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="oci25xstrmint.htm#GUID-D9D75296-0B0B-4AA8-A29E-A48ABFB29D98">Server Handle Attributes</a>&#34;</span></p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72954"></a><a id="LNOCI72953"></a>
<div class="props_rev_3"><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402"></a>
<h2 id="LNOCI-GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402" class="sect2">OCIXStreamInLCRCallbackSend()</h2>
<div>
<p>Sends an LCR stream to the attached inbound server.</p>
<div class="section">
<p class="subhead2">Purpose</p>
<p>You must specify a callback to construct each LCR for streaming. If some LCRs contain chunk data, then a second callback must be provided to create each chunk data.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInLCRCallbackSend ( 
          OCISvcCtx                       *svchp, 
          OCIError                        *errhp,
          OCICallbackXStreamInLCRCreate   createlcr_cb, 
          OCICallbackXStreamInChunkCreate createchunk_cb, 
          void                            *usrctxp,
          ub4                             mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76627"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-4127B0B5-F85F-4CAF-98EC-57D0ED532757"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76628"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-6B14A979-2AD1-4580-BD28-ED12FF89F267"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76629"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-11B1F23C-72DD-40BD-BBB1-6AE94C59E5F9"><!-- --></a>createlcr_cb (IN)</dt>
<dd>
<p>Client callback procedure to be invoked to generate an LCR for streaming. Cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76630"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-975E78D7-1954-4A4B-A79E-5E5250150B43"><!-- --></a>createchunk_cb (IN)</dt>
<dd>
<p>Client callback procedure to be invoked to create each chunk. Can be <code class="codeph">NULL</code> if you do not need to send any LCR with LOB or <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> columns. <code class="codeph">OCI_ERROR</code> is returned if this argument is <code class="codeph">NULL</code> and you attempt to send an LCR with additional chunk data.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76631"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-3EC28C24-9A85-4ED5-9DCF-54E5277563F8"><!-- --></a>usrctxp (IN)</dt>
<dd>
<p>User context to pass to both callback functions.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76632"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-CB2DC9DC-3393-41E3-A6CA-6CB817900161"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code> fore now.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Return code: <code class="codeph">OCI_ERROR</code> or <code class="codeph">OCI_SUCCESS</code>.</p>
<p>The <code class="codeph">createlcr_cb</code> argument must be of type <code class="codeph">OCICallbackXStreamInLCRCreate</code>:</p>
<pre dir="ltr">typedef sb4  (*OCICallbackXStreamInLCRCreate)
              void  *usrctxp, void **lcrp, ub1 *lcrtyp, oraub8 *flag);
</pre>
<p>Parameters of <code class="codeph">OCICallbackXStreamInLCRCreate()</code>:</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76633"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-AEC5B206-E0F5-49D6-B8F7-EABC8A67B4B4"><!-- --></a>usrctxp (IN/OUT)</dt>
<dd>
<p>Pointer to the user context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76634"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-9E6F26CF-F3DD-4BA5-9AA7-582359509209"><!-- --></a>lcrp (OUT)</dt>
<dd>
<p>Pointer to the LCR to be sent.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76635"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-3100F85C-6168-4F95-B837-F1253B16B5BE"><!-- --></a>lcrtyp (OUT)</dt>
<dd>
<p>LCR type (<code class="codeph">OCI_LCR_XROW</code> or <code class="codeph">OCI_LCR_XDDL</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76636"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-B8C0DBC2-85A5-433D-B148-DCEBA6DADD9A"><!-- --></a>flag (OUT)</dt>
<dd>
<p>If <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> is set, then the current LCR has more chunk data.</p>
</dd>
</dl>
<p>The input parameter to the callback is the user context. The output parameters are the new LCR, its type, and a flag. If the generated LCR contains additional chunk data, then this flag must have the <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> (0x01) bit set. The valid return codes from the <code class="codeph">OCICallbackXStreamInLCRCreate()</code> callback function are <code class="codeph">OCI_CONTINUE</code> or <code class="codeph">OCI_SUCCESS</code>. This callback function must return <code class="codeph">OCI_CONTINUE</code> to continue processing the <code class="codeph">OCIXStreamInLCRCallbackSend()</code> call. Any return code other than <code class="codeph">OCI_CONTINUE</code> signals that the client wants to terminate the <code class="codeph">OCIXStreamInLCRCallbackSend()</code> call immediately. In addition, a <code class="codeph">NULL</code> LCR returned from the <code class="codeph">OCICallbackXStreamInLCRCreate()</code> callback function signals that the client wants to terminate the current call.</p>
<p>The <code class="codeph">createchunk_cb</code> argument must be of type <code class="codeph">OCICallbackXStreamInChunkCreate</code>:</p>
<pre dir="ltr">typedef sb4 (*OCICallbackXStreamInChunkCreate)
void     *usrctxp,
oratext  **column_name,
ub2      *column_name_len,
ub2      *column_dty,
oraub8   *column_flag,
ub2      *column_csid,
ub4      *chunk_bytes,
ub1      **chunk_data,
oraub8   *flag);
</pre>
<p>The input parameters of the <code class="codeph">createchunk_cb()</code> procedure are the user context and the information about the chunk.</p>
<p>Parameters of <code class="codeph">OCICallbackXStreamInChunkCreate()</code>:</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76637"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-75CAFF3C-BD91-436C-8403-73644CDE09BD"><!-- --></a>usrctxp (IN/OUT)</dt>
<dd>
<p>Pointer to the user context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76638"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-0F61891A-BBB5-434E-9CCB-842633EA8964"><!-- --></a>column_name (OUT)</dt>
<dd>
<p>Column name of the current chunk.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76639"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-2F91FF0F-0EFA-44B2-8B6E-DB99EE52F98E"><!-- --></a>column_name_len (OUT)</dt>
<dd>
<p>Length of the column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76640"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-9F9DE1B5-B1FD-44D2-BF40-93558DE82BD8"><!-- --></a>column_name_dty (OUT)</dt>
<dd>
<p>Chunk data type (<code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76641"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-99665992-F6AE-40FE-B3E3-0DF6EAC9BB0A"><!-- --></a>column_flag (OUT)</dt>
<dd>
<p>See Comments in <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-41760606-A672-4F1B-8713-EC17124BB67B">OCIXStreamInChunkSend()</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76642"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-4C183C28-BF5D-424E-B9F0-EB41EDEB6C58"><!-- --></a>column_csid (OUT)</dt>
<dd>
<p>Column character set ID. Relevant only if the column is an <code class="codeph">XMLType</code> column (that is, <code class="codeph">column_flag</code> has the <code class="codeph">OCI_LCR_COLUMN_XML_DATA</code> bit set).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76643"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-610BB131-6ACF-4FA8-86B9-ED5D6455F991"><!-- --></a>chunk_bytes (OUT)</dt>
<dd>
<p>Chunk data length in bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76644"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-7722E412-7BC6-4EA6-9C32-D5A59D2241B9"><!-- --></a>chunk_data (OUT)</dt>
<dd>
<p>Chunk data pointer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76645"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__GUID-DB425ED6-1A2F-4A76-A8A5-92A1D5DF4045"><!-- --></a>flag (OUT)</dt>
<dd>
<p>If <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> is set, then the current LCR has more chunk data.</p>
</dd>
</dl>
<p>The <code class="codeph">OCIXStreamInLCRCallbackSend()</code> function invokes the <code class="codeph">createlcr_cb()</code> procedure to obtain each LCR to send to the server. If the return flag from the <code class="codeph">createlcr_cb()</code> procedure has the <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> bit set, then it invokes the <code class="codeph">createchunk_cb()</code> procedure to obtain each chunk. It repeatedly calls the <code class="codeph">createchunk_cb()</code> procedure while the flag returned from this callback has the <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> bit set. When this bit is not set, this function cycles back to invoke the <code class="codeph">createlcr_cb()</code> procedure to get the next LCR. This cycle is repeated until the <code class="codeph">createlcr_cb()</code> procedure returns a <code class="codeph">NULL</code> LCR or when at the transaction boundary after an ACK interval has elapsed since the call began.</p>
<p>The valid return codes from the <code class="codeph">OCICallbackXStreamInChunkCreate()</code> callback function are <code class="codeph">OCI_CONTINUE</code> or <code class="codeph">OCI_SUCCESS</code>. This callback function must return <code class="codeph">OCI_CONTINUE</code> to continue processing the <code class="codeph">OCIXStreamInLCRCallbackSend()</code> call. Any return code other than <code class="codeph">OCI_CONTINUE</code> signals that the client wants to terminate the <code class="codeph">OCIXStreamInLCRCallbackSend()</code> call immediately.</p>
<p>Because terminating the current call flushes the network and incurs another network round-trip in the next call, you must avoid returning a <code class="codeph">NULL</code> LCR immediately when there is no LCR to send. Doing this can greatly reduce network throughput and affect performance. During short idle periods, you can add some delays in the callback procedure instead of returning a <code class="codeph">NULL</code> LCR immediately to avoid flushing the network too frequently.</p>
<p><a href="oci26xstrm001.htm#GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__BABDCBID">Figure 26-1</a> shows the execution flow of the <code class="codeph">OCIXStreamInLCRCallbackSend()</code> function.</p>
<div class="figure" id="GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__BABDCBID">
<p class="titleinfigure">Figure 26-1 Execution Flow of the OCIXStreamInLCRCallbackSend() Function</p>
<img width="621" height="302" src="img/GUID-AB423490-BE91-425C-918D-A80BB3F94C3E-default.gif" alt="Description of Figure 26-1 follows" title="Description of Figure 26-1 follows"/><br/>
<a href="img_text/GUID-AB423490-BE91-425C-918D-A80BB3F94C3E-print.htm">Description of &#34;Figure 26-1 Execution Flow of the OCIXStreamInLCRCallbackSend() Function&#34;</a></div>
<!-- class="figure" -->
<p>* <code class="codeph">While OCI_XSTREAM_MORE_ROW_DATA</code> is set</p>
<p>Description of <a href="oci26xstrm001.htm#GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402__BABDCBID">Figure 26-1</a>:</p>
<ul style="list-style-type: disc;">
<li>
<p>At 1, the user invokes the <code class="codeph">OCIXStreamInLCRCallbackSend()</code> providing two callbacks. This function initiates an LCR inbound stream to the server.</p>
</li>
<li>
<p>At 2, this function invokes the <code class="codeph">createlcr_cb()</code> procedure to get an LCR from the callback to send to the server. If the return LCR is <code class="codeph">NULL</code>, then this function exits.</p>
</li>
<li>
<p>If the flag from 2 indicates the current LCR has more data (that is, the <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> bit is set), then this function proceeds to 3; otherwise, it loops back to 2 to get the next LCR.</p>
</li>
<li>
<p>At 3, this function invokes <code class="codeph">createchunk_cb()</code> to get the chunk data to send to the server. If the flag from this callback has the <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> bit set, then it repeats 3; otherwise, it loops back to 2 to get the next LCR from the user. If any callback function returns any values other than <code class="codeph">OCI_CONTINUE</code>, then the <code class="codeph">OCIXStreamInLCRCallbackSend()</code> call terminates.</p>
<p>Following is a sample client pseudocode snippet for callback mode (error checking is not included for simplicity):</p>
<pre dir="ltr">main
{
   /* Attach to inbound server */
   OCIXStreamInAttach();
 
   /* Get the server&#39;s processed low position to determine
    * the position of the first LCR to generate.
    */
   OCIXStreamInProcessedLWMGet(&amp;lwm);
 
   while (TRUE)
   {
      /* Initiate LCR inbound stream */
      OCIXStreamInLCRCallbackSend(createlcr_cb, createchunk_cb);
 
      OCIXStreamInProcessedLWMGet(&amp;lwm);
 
      if (some terminating condition)
         break;
   }
   OCIXStreamInDetach(&amp;lwm);
}
 
 
createlcr_cb (IN usrctx, OUT lcr, OUT flag)
{
   if (have more LCRs to send)
   {
      /* construct lcr */
      OCILCRHeaderSet(lcr);
      OCILCRRowColumnInfoSet(lcr);
 
      if (lcr has LOB | LONG | XMLType columns)
         Set OCI_XSTREAM_MORE_ROW_DATA flag;
 
      if (lcr is LOB_ERASE | LOB_TRIM | LOB_WRITE)
         OCILCRLobInfoSet(lcr);
   }
   else if (idle timeout expires)
   {
      lcr = null;
   }
}
 
createchunk_cb (IN usrctx, OUT chunk, OUT flag)
{
   /* set col_name, col_flag, chunk data, and so on */
   construct_chunk;
 
   if (last chunk of current column)
   {
      set col_flag |= OCI_LCR_COLUMN_LAST_CHUNK;
 
      if (last column)
         clear OCI_XSTREAM_MORE_ROW_DATA flag;
   }
}
</pre></li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72955"></a>
<div class="props_rev_3"><a id="GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3"></a>
<h2 id="LNOCI-GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3" class="sect2">OCIXStreamInProcessedLWMGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Gets the local processed low position that is cached at the client. This function can be called anytime while the client is attached to an XStream inbound server. Clients, using the callback mode to stream LCRs to the server (see <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-4552FD90-5643-4E11-BC9E-3C0C4D39A402" title="Sends an LCR stream to the attached inbound server.">OCIXStreamInLCRCallbackSend()</a>&#34;</span>), can invoke this function while in the callback procedures.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInProcessedLWMGet ( OCISvcCtx  *svchp,
                                    OCIError   *errhp,
                                    ub1        *processed_low_position,
                                    ub2        *processed_low_position_len,
                                    ub4        mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76646"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3__GUID-0B1301A7-5129-4BE5-B207-8DD6290DF1B8"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76647"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3__GUID-B594CE44-54E7-4558-8179-39E23731B0B8"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76648"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3__GUID-674F6DC2-92AB-4770-9A6E-59192E0914CE"><!-- --></a>processed_low_position (OUT)</dt>
<dd>
<p>The processed low position maintained at the client.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76649"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3__GUID-D77A536C-688A-4B34-8B14-994BEB725286"><!-- --></a>processed_low_position_len (OUT)</dt>
<dd>
<p>Length of <code class="codeph">processed_low_position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76650"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C516971-C8B8-4C1D-B409-9ABC5DD05EE3__GUID-C2B22F3C-7C35-4095-A8D2-19A427371A6F"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>After attaching to an XStream inbound server, a local copy of the server&#39;s processed low position (see <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA">OCIXStreamOutProcessedLWMSet()</a>&#34;</span>) is cached at the client. This local copy is refreshed with the server&#39;s low position when each of the following calls returns <code class="codeph">OCI_SUCCESS</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCIXStreamInAttach()</code></p>
</li>
<li>
<p><code class="codeph">OCIXStreamInLCRSend()</code></p>
</li>
<li>
<p><code class="codeph">OCIXStreamInLCRCallbackSend()</code></p>
</li>
<li>
<p><code class="codeph">OCIXStreamInFlush()</code></p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p>Return code: <code class="codeph">OCI_ERROR</code> or <code class="codeph">OCI_SUCCESS</code>.</p>
<p>You must pass in a preallocated buffer for the position argument. The maximum length of this buffer is <code class="codeph">OCI_LCR_MAX_POSITION_LEN</code>. This position is exposed in the <code class="codeph">DBA_XSTREAM_INBOUND_PROGRESS</code> view.</p>
<p>The client can use this position to periodically purge the logs used to generate the LCRs at or below this position.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72956"></a>
<div class="props_rev_3"><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E"></a>
<h2 id="LNOCI-GUID-00331B05-22D5-48B9-8189-B6A479EDC60E" class="sect2">OCIXStreamInErrorGet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Returns the first error encountered by the inbound server since the <code class="codeph">OCIXStreamInAttach()</code> call.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInErrorGet ( OCISvcCtx *svchp,
                             OCIError  *errhp,
                             sb4       *errcodep,
                             oratext   *msgbuf,
                             ub2       msg_bufsize,
                             ub2       *msg_len,
                             oratext   *txn_id,
                             ub2       txn_id_bufsize,
                             ub2       *txn_id_len );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76651"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-EF5DCF4B-DA1C-4819-9E4A-E440E8BA0BB7"><!-- --></a>svchp (IN/OUT)</dt>
<dd>
<p>OCI service handle.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76652"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-467C5F6F-6C8B-49D9-B8CA-B2493D54585B"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>Error Handle.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76653"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-4AAAF081-34F6-4ABA-8665-8FF9A63BD73A"><!-- --></a>errcodep (OUT)</dt>
<dd>
<p>Error code.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76654"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-6A0D5842-9E78-4357-8A94-162AC8C9BDD8"><!-- --></a>msgbuf (IN/OUT)</dt>
<dd>
<p>Preallocated message buffer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76655"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-B8C654F6-25D4-4097-BCA1-C91E532F47F0"><!-- --></a>msg_bufsize (IN)</dt>
<dd>
<p>Message buffer size.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76656"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-5B89ED21-E56D-452D-B0C7-846C59E7B9BD"><!-- --></a>msg_len (OUT)</dt>
<dd>
<p>Length of returned error message.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76657"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-CB361974-D8B4-400C-983F-21A0FA06A826"><!-- --></a>txn_id (IN/OUT)</dt>
<dd>
<p>Preallocated transaction ID buffer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76658"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-486D9375-3D02-4A03-BC8F-142197DC4FA6"><!-- --></a>txn_id_bufsize (IN)</dt>
<dd>
<p>The transaction ID buffer size.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76659"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-00331B05-22D5-48B9-8189-B6A479EDC60E__GUID-725282AC-418F-4BB8-B3B4-89A5A21E2F22"><!-- --></a>txn_id_len (OUT)</dt>
<dd>
<p>Length of the returned transaction ID.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The maximum size for the returned transaction ID is <code class="codeph">OCI_LCR_MAX_TXID_LEN</code>. If the allocated buffer for <code class="codeph">txn_id</code> is too small, then this routine returns <code class="codeph">ORA-29258</code>. The maximum size for the returned error msg is <code class="codeph">OCI_ERROR_MAXMSG_SIZE</code>. If the allocated size for <code class="codeph">msgbuf</code> is too small, then the returned message is truncated.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72957"></a>
<div class="props_rev_3"><a id="GUID-C23A6511-6E9A-4D49-A4AC-CBE3449F8EF5"></a>
<h2 id="LNOCI-GUID-C23A6511-6E9A-4D49-A4AC-CBE3449F8EF5" class="sect2">OCIXStreamInFlush()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Used to flush the network while attaching to an XStream inbound server. It terminates any in-progress <code class="codeph">OCIXStreamInLCRSend()</code> call associated with the specified service context.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInFlush ( OCISvcCtx    *svchp, 
                          OCIError     *errhp,
                          ub4          mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76660"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-C23A6511-6E9A-4D49-A4AC-CBE3449F8EF5__GUID-9702EDE6-8977-4FC7-812E-9C2BAB9E8A7F"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76661"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-C23A6511-6E9A-4D49-A4AC-CBE3449F8EF5__GUID-D33B5DD4-0A19-4531-86DE-3C3B42DF2653"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76662"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-C23A6511-6E9A-4D49-A4AC-CBE3449F8EF5__GUID-60412E6B-D17C-40DC-B215-E2EE0F7BDFE6"><!-- --></a>mode (IN)</dt>
<dd>
<p><code class="codeph">OCIXSTREAM_IN_FLUSH_WAIT_FOR_COMPLETE</code> - If this mode is specified, then this function flushes the network, and then waits for all complete and rollback transactions that have been sent to the inbound server to complete before returning control to the client.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Return code: <code class="codeph">OCI_ERROR</code> or <code class="codeph">OCI_SUCCESS</code>.</p>
<p>Each call incurs a database round-trip to get the server&#39;s processed low position, which you can retrieve afterward using <code class="codeph">OCIXStreamInProcessedLWMGet()</code>. Call this function only when there is no LCR to send to the server and the client wants to know the progress of the attached inbound server.</p>
<p>This call returns <code class="codeph">OCI_ERROR</code> if it is invoked from the callback functions of <code class="codeph">OCIXStreamInLCRCallbackSend()</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72959"></a><a id="LNOCI72958"></a>
<div class="props_rev_3"><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B"></a>
<h2 id="LNOCI-GUID-41760606-A672-4F1B-8713-EC17124BB67B" class="sect2">OCIXStreamInChunkSend()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sends a chunk to the inbound server. This function is valid during the execution of the <code class="codeph">OCIXStreamInLCRSend()</code> call.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInChunkSend (  OCISvcCtx   *svchp,
                               OCIError    *errhp,
                               oratext     *column_name,
                               ub2         column_name_len,
                               ub2         column_dty,
                               oraub8      column_flag,
                               ub2         column_csid,
                               ub4         chunk_bytes,
                               ub1         *chunk_data,
                               oraub8      flag,
                               ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76663"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-6B6790AF-FC12-4BD7-BD75-4174191758E5"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76664"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-99F78A55-2755-4E36-9BF4-AD1D526CE658"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76665"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-76823A51-9EA5-4289-AE99-E289ADFB60B2"><!-- --></a>column_name (IN)</dt>
<dd>
<p>Name of column associated with the given data. Column name must be canonicalized and must follow Oracle Database naming convention.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76666"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-92564FE0-8A50-45F5-8D97-6573794969BC"><!-- --></a>column_name_len (IN)</dt>
<dd>
<p>Length of column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76667"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-9E379576-AB5C-4033-8917-D0EF8106DF7D"><!-- --></a>column_dty (IN)</dt>
<dd>
<p>LCR chunk data type (must be <code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code>). See <a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__BABIGBAD" title="This table has 3 columns. Column 1 is the source column data type, column 2 is the corresponding Streams LCR data type, and column 3 is the corresponding Streams LCR character set.">Table 26-5</a>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76668"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-F8815292-3AFB-4023-90B4-C2A3BCEEAA7C"><!-- --></a>column_flag (IN)</dt>
<dd>
<p>Column flag. (See <a href="oci26xstrm001.htm#GUID-41760606-A672-4F1B-8713-EC17124BB67B__BABBEAII">Comments</a> for valid column flags.) Must specify <code class="codeph">OCI_LCR_COLUMN_LAST_CHUNK</code> for the last chunk of each LOB or <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> column.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76669"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-2E2CE507-D2A6-4A62-B060-295D99A1D273"><!-- --></a>column_csid (IN)</dt>
<dd>
<p>Column character set ID. This is required only if the <code class="codeph">column_flag</code> has <code class="codeph">OCI_LCR_COLUMN_XML_DATA</code> bit set.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76670"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-2F83C50A-2034-4C32-97F5-04D427B66E2C"><!-- --></a>chunk_bytes (IN)</dt>
<dd>
<p>Chunk data length in bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76671"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-16BC8EB6-C6FC-4788-AA39-48978BFD861C"><!-- --></a>chunk_data (IN)</dt>
<dd>
<p>Pointer to column data chunk. If the column is <code class="codeph">NCLOB</code> or varying width <code class="codeph">CLOB</code>, then the input chunk data must be in <code class="codeph">AL16UTF16</code> format. The chunk data must be in the character set defined in <a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__BABIGBAD" title="This table has 3 columns. Column 1 is the source column data type, column 2 is the corresponding Streams LCR data type, and column 3 is the corresponding Streams LCR character set.">Table 26-5</a>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76672"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-539A2D8D-3CE8-4088-B4A0-72D4EA151229"><!-- --></a>flag (IN)</dt>
<dd>
<p>If <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> (0x01) bit is set, then the current row change contains more data. You must clear this bit when sending the last chunk of the current LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76673"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__GUID-CBB90F6B-314A-460F-8744-8D48DD0530B4"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__BABBEAII">
<p class="subhead2">Comments</p>
<p>The following <a id="d292661e8882" class="indexterm-anchor"></a>LCR column flags can be combined using bitwise <code class="codeph">OR</code> operator.</p>
<pre dir="ltr">#define OCI_LCR_COLUMN_LOB_DATA     /* column contains LOB data */
#define OCI_LCR_COLUMN_LONG_DATA    /* column contains long data */
#define OCI_LCR_COLUMN_EMPTY_LOB    /* column has an empty LOB  */
#define OCI_LCR_COLUMN_LAST_CHUNK   /* last chunk of current column */
#define OCI_LCR_COLUMN_AL16UTF16    /* column is in AL16UTF16 fmt */
#define OCI_LCR_COLUMN_NCLOB        /* column has NCLOB data */
#define OCI_LCR_COLUMN_XML_DATA     /* column contains xml data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_XML_DIFF     /* column contains xmldiff data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_ENCRYPTED    /* column is encrypted */
#define OCI_LCR_COLUMN_UPDATED      /* col is updated */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_32K_DATA     /* col contains 32K data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_OBJECT_DATA  /* col contains object data in xml format */
</pre>
<p>In Streams, LOB, <code class="codeph">LONG</code>, or <code class="codeph">XMLType</code> column data is broken up into multiple chunks. For a row change containing columns of these data types, its associated LCR only contains data for the other column types. All LOB, <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> columns are either represented in the LCR as <code class="codeph">NULL</code> or not included in the LCR as defined in <a href="oci26xstrm001.htm#GUID-41760606-A672-4F1B-8713-EC17124BB67B__BABHADID" title="This table has 2 columns. Column 1 is the command type of the first LCR of a row change and column 2 describes the corresponding columns required in the first LCR.">Table 26-4</a>.</p>
<p><code class="codeph">OCILCRRowColumnInfoSet()</code> is provided to generate a list of scalar columns in an LCR. For LOB, <code class="codeph">LONG</code>, and <code class="codeph">XMLType</code> columns, <code class="codeph">OCIXStreamInChunkSend()</code> is provided to set the value of each chunk in a column. For a large column, this function can be invoked consecutively multiple times with smaller chunks of data. The XStream inbound server can assemble these chunks and apply the accumulated change to the designated column.</p>
<p>The LCR of a row change must contain all the scalar columns that can uniquely identify a row at the apply site. <a href="oci26xstrm001.htm#GUID-41760606-A672-4F1B-8713-EC17124BB67B__BABHADID" title="This table has 2 columns. Column 1 is the command type of the first LCR of a row change and column 2 describes the corresponding columns required in the first LCR.">Table 26-4</a> describes the required column list in each LCR for each DML operation.</p>
<div class="tblformal" id="GUID-41760606-A672-4F1B-8713-EC17124BB67B__BABHADID">
<p class="titleintable">Table 26-4 Required Column List in the First LCR</p>
<table class="cellalignment6175" title="Required Column List in the First LCR" summary="This table has 2 columns. Column 1 is the command type of the first LCR of a row change and column 2 describes the corresponding columns required in the first LCR.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6268" id="d292661e8951">Command Type of the First LCR of a Row Change</th>
<th class="cellalignment6269" id="d292661e8954">Columns Required in the First LCR</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d292661e8959" headers="d292661e8951">
<p><code class="codeph">INSERT</code></p>
</td>
<td class="cellalignment6271" headers="d292661e8959 d292661e8954">
<p>The <code class="codeph">NEW</code> column list must contain all non-<code class="codeph">NULL</code> scalar columns. All LOB, <code class="codeph">XMLType</code>, and <code class="codeph">LONG</code> columns with chunk data must be included in this NEW column list. Each must have <code class="codeph">NULL</code> value and <code class="codeph">OCI_LCR_COLUMN_EMPTY_LOB</code> flag specified.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d292661e8986" headers="d292661e8951">
<p><code class="codeph">UPDATE</code></p>
</td>
<td class="cellalignment6271" headers="d292661e8986 d292661e8954">
<p>The <code class="codeph">OLD</code> column list must contain the key columns.</p>
<p>The <code class="codeph">NEW</code> column list must contain all updated scalar columns. All LOB, <code class="codeph">XMLType</code>, and <code class="codeph">LONG</code> columns with chunk data must be included in this NEW column list. Each must have <code class="codeph">NULL</code> value and <code class="codeph">OCI_LCR_COLUMN_EMPTY_LOB</code> flag specified.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d292661e9014" headers="d292661e8951">
<p><code class="codeph">DELETE</code></p>
</td>
<td class="cellalignment6271" headers="d292661e9014 d292661e8954">
<p>The <code class="codeph">OLD</code> column list must contain the key columns.</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6270" id="d292661e9025" headers="d292661e8951">
<p><code class="codeph">LOB_WRITE</code>, <code class="codeph">LOB_TRIM</code>, <code class="codeph">LOB_ERASE</code></p>
</td>
<td class="cellalignment6271" headers="d292661e9025 d292661e8954">
<p>The <code class="codeph">NEW</code> column list must contain the key columns and the modified LOB column.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p>After constructing each LCR, you can call <code class="codeph">OCIXStreamInLCRSend()</code> to send that LCR. Afterward, <code class="codeph">OCIXStreamInChunkSend()</code> can be called repeatedly to send the chunk data for each LOB or <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> column in that LCR. Sending the chunk value for different columns cannot be interleaved. If a column contains multiple chunks, then this function must be called consecutively using the same column name before proceeding to a new column. The ordering of the columns is irrelevant.</p>
<p>When invoking this function, you must pass <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> as the flag argument if there is more data for the current LCR. When sending the last chunk of the current LCR, then this flag must be cleared to signal the end of the current LCR.</p>
<p>This function is valid only for <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">LOB_WRITE</code> operations. Multiple LOB, <code class="codeph">LONG</code>, or <code class="codeph">XMLType</code> columns can be specified for <code class="codeph">INSERT</code> and <code class="codeph">UPDATE</code>, while only one LOB column is allowed for <code class="codeph">LOB_WRITE</code> operation.</p>
<p>The following is a sample client pseudocode snippet for non-callback mode (error checking is not included for simplicity):</p>
<pre dir="ltr">main
{
   /* Attach to inbound server */
   OCIXStreamInAttach();
 
   /* Get the server&#39;s processed low position to determine
    * the position of the first LCR to generate.
    */
   OCIXStreamInProcessedLWMGet(&amp;lwm);
 
   while (TRUE)
   {
      flag = 0;
      /* construct lcr */
      OCILCRHeaderSet(lcr);
      OCILCRRowColumnInfoSet(lcr);
 
      if (lcr has LOB | LONG | XMLType columns)
         set OCI_XSTREAM_MORE_ROW_DATA flag;
 
      status = OCIXStreamInLCRSend(lcr, flag);
 
      if (status == OCI_STILL_EXECUTING &amp;&amp;
             (OCI_XSTREAM_MORE_ROW_DATA flag set))
      {
         for each LOB/LONG/XMLType column in row change
         {
            for each chunk in column
            {
               /* set col_name, col_flag, chunk data */
               construct chunk;
 
               if (last chunk of current column)
                   col_flag |= OCI_LCR_COLUMN_LAST_CHUNK;
 
               if (last chunk of last column)
                  clear OCI_XSTREAM_MORE_ROW_DATA flag;
 
               OCIXStreamInChunkSend(chunk, col_flag, flag);
            }
         }
      }
      else if (status == OCI_SUCCESS)
      {
         /* get lwm when SendLCR call ends successfully. */
         OCIXStreamInProcessedLWMGet(&amp;lwm);
      }
 
      if (some terminating_condition)
        break;
   }
 
   OCIXStreamInDetach();
}
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72960"></a>
<div class="props_rev_3"><a id="GUID-3C2E4835-C043-46CA-A6CD-754048E74EA4"></a>
<h2 id="LNOCI-GUID-3C2E4835-C043-46CA-A6CD-754048E74EA4" class="sect2">OCIXStreamInCommit()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Commits the given transaction. This function lets the client notify the inbound server about a transaction that has been executed by the client rather than by the server. So that if the same transaction is retransmitted during apply restart, it is ignored by the inbound server. A commit LCR must be supplied for the inbound server to extract the transaction ID and the position of the commit.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInCommit ( OCISvcCtx *svchp,
                           OCIError  *errhp,
                           void      *lcrp,
                           ub4       mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76674"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C2E4835-C043-46CA-A6CD-754048E74EA4__GUID-9872F16D-2ACE-4D42-95BD-D25CBC742DC1"><!-- --></a>svchp (IN/OUT)</dt>
<dd>
<p>OCI service handle.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76675"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C2E4835-C043-46CA-A6CD-754048E74EA4__GUID-6D93B8AF-9566-4074-83FD-92FE47BB18AE"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>Error Handle to which errors should be reported.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76676"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C2E4835-C043-46CA-A6CD-754048E74EA4__GUID-FDE1FADA-926D-4A68-8826-88FE83E55692"><!-- --></a>lcrp (IN)</dt>
<dd>
<p>Pointer to the LCR to send. Must be a commit LCR.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76677"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-3C2E4835-C043-46CA-A6CD-754048E74EA4__GUID-E4453582-C356-4873-A33D-A9505FF4656F"><!-- --></a>mode (IN)</dt>
<dd>
<p>Mode flags. Not used currently; used for future extension.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The position of the input LCR must be higher than <code class="codeph">DBA_XSTREAM_INBOUND_PROGRESS.APPLIED_HIGH_POSITION</code>, and the LCR&#39;s source database must match <code class="codeph">DBA_APPLY_PROGRESS.SOURCE_DATABASE</code> of the attached inbound server.</p>
<p>If there is any pre-commit handler defined, it is executed when this commit LCR is executed.</p>
<p>Assume a sample use case in which a situation where the inbound server does not support certain data types, but the client can do the work directly. The client performs the transaction changes directly to the database and then invokes the <code class="codeph">OCIXStreamInCommit()</code> to commit the transaction by way of the inbound server. Note that the client should not directly commit the transaction itself. Rather, the transaction changes are committed with this command (<code class="codeph">OCIXStreamInCommit()</code>) so that the transaction is atomic. Thus, if the inbound server becomes disabled during the client transaction, then the entire transaction is correctly rolled back.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72961"></a>
<div class="props_rev_3"><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA"></a>
<h2 id="LNOCI-GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA" class="sect2">OCIXStreamInSessionSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sets session attributes for XStream In functions.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamInSessionSet(OCISvcCtx   *svchp,
                             OCIError    *errhp,
                             oratext     *attribute_name,
                             ub2          attribute_name_len,
                             void        *attribute_value,
                             ub2          attribute_value_len,
                             ub2          attribute_dty,
                             ub4          mode); 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76678"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-D9211D4B-9E9C-4497-9FE1-9B92BF255589"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76679"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-F02E0A8E-8644-4633-9CCA-55D8E19EDF95"><!-- --></a>errhp (IN)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76680"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-64905454-B989-4553-93AC-149795503893"><!-- --></a>attribute_name (IN)</dt>
<dd>
<p>An attribute name.</p>
<p>Valid values for <code class="codeph">attribute_name</code> are:</p>
<pre dir="ltr">#define  OCIXSTREAM_ATTR_ATTACH_TIMEOUT &#34;ATTACH_TIMEOUT_SECS&#34;
#define  OCIXSTREAM_ATTR_MAX_ATTACH_RETRIES &#34;MAX_ATTACH_RETRIES&#34;
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76681"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-92CB5BC8-CBDD-46D7-96ED-FFC7E8DA5CB2"><!-- --></a>attribute_name_len (IN)</dt>
<dd>
<p>An attribute name length.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76682"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-DDD3FB30-D273-449F-9A65-1E57410FF764"><!-- --></a>attribute_value (IN)</dt>
<dd>
<p>The attribute value.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76683"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-0A5731BB-1BF5-47A9-9988-A01F766780CD"><!-- --></a>attribute_value_len (IN)</dt>
<dd>
<p>The attribute value length.</p>
<p>The maximum value for <code class="codeph">attribute_value_len</code> is 128.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76684"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-5F061061-4AF9-4DA4-9F00-53A8C0FEC7FC"><!-- --></a>attribute_dty (IN)</dt>
<dd>
<p>Pointer to an array of attribute data types. The only valid value for <code class="codeph">attribute_dty</code> is <code class="codeph">DTYUB2</code>. An error is returned if you try a data type other than <code class="codeph">DTYUB2</code> for <code class="codeph">ATTACH_TIMEOUT_SECS</code> and <code class="codeph">MAX_ATTACH_RETRIES</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76685"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-57E8A60E-1073-48C1-9933-CD61C3CB59AA__GUID-10398BF6-7D55-4FF2-84A3-AFA6B5E84130"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>You must invoke <code class="codeph">OCIXStreamInSessionSet()</code> before calling <code class="codeph">OCIXStreamInAttach()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Returns</p>
<p><code class="codeph">OCI_SUCCESS</code> if successful, otherwise <code class="codeph">OCI_ERROR</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72963"></a>
<div class="props_rev_3"><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC"></a>
<h2 id="LNOCI-GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC" class="sect2">OCIXStreamOutAttach()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Attaches to an XStream outbound server. The client application must connect to the database using a dedicated connection.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutAttach ( OCISvcCtx   *svchp,
                            OCIError    *errhp,
                            oratext     *server_name,
                            ub2         server_name_len,
                            ub1         *last_position,
                            ub2         last_position_len,
                            ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76686"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC__GUID-43A37457-5B34-4121-A4E4-1B6DD5879973"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76687"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC__GUID-105C1E58-E4E9-4239-AD74-00B6913E957C"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76688"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC__GUID-3607A8F2-496E-4130-AAFC-3C7B5126D53C"><!-- --></a>server_name (IN)</dt>
<dd>
<p>XStream outbound server name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76689"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC__GUID-7EA7E73B-8268-4839-9182-15FB8B136331"><!-- --></a>server_name_len (IN)</dt>
<dd>
<p>Length of XStream outbound server name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76690"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC__GUID-CEDEB6EF-D6F8-4449-A12E-4EAFA619C74E"><!-- --></a>last_position (IN)</dt>
<dd>
<p>Position to the last received LCR. Can be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76691"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC__GUID-946AD413-3FD7-44D8-9FBB-066AB0DA5A74"><!-- --></a>last_position_len (IN)</dt>
<dd>
<p>Length of <code class="codeph">last_position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76692"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-6FE55A86-565C-4DF4-941B-D3456AAE6BBC__GUID-952BEC2F-E592-4B54-8AB3-A70D8E249CF6"><!-- --></a>mode (IN)</dt>
<dd>
<p><code class="codeph">OCIXSTREAM_OUT_ATTACH_APP_FREE_LCR</code> - If this mode is specified, then the application is in charge of freeing the LCRs from the outbound server.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The <code class="codeph">OCIEnv</code> environment handle must be created with <code class="codeph">OCI_OBJECT</code> mode, and the service context must be in a connected state to issue this function. This function does not support nonblocking mode. It returns either the <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code> status code.</p>
<p>The name of the outbound server must be provided because multiple outbound servers can be configured in one Oracle Database instance. This function returns <code class="codeph">OCI_ERROR</code> if it encounters any error while attaching to the outbound server. Only one client can attach to an XStream outbound server at any time. An error is returned if multiple clients attempt to attach to the same outbound server or if the same client attempts to attach to multiple outbound servers using the same service handle.</p>
<p>The <code class="codeph">last_position</code> parameter is used to establish the starting point of the stream. This call returns <code class="codeph">OCI_ERROR</code> if the specified position is non-<code class="codeph">NULL</code> and less than the server&#39;s processed low position (see <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA">OCIXStreamOutProcessedLWMSet()</a>&#34;</span>); otherwise, LCRs with positions greater than the specified <code class="codeph">last_position</code> are sent to the user.</p>
<p>If the <code class="codeph">last_position</code> is <code class="codeph">NULL</code>, then the stream starts from the processed low position maintained in the server.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72964"></a>
<div class="props_rev_3"><a id="GUID-ACF2C9C0-5B3B-443B-9693-0928AAC98509"></a>
<h2 id="LNOCI-GUID-ACF2C9C0-5B3B-443B-9693-0928AAC98509" class="sect2">OCIXStreamOutDetach()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Detaches from the outbound server.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutDetach ( OCISvcCtx   *svchp,
                            OCIError    *errhp,
                            ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76693"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-ACF2C9C0-5B3B-443B-9693-0928AAC98509__GUID-B69CF1B8-D978-4424-A4C1-5784BDE95249"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76694"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-ACF2C9C0-5B3B-443B-9693-0928AAC98509__GUID-9BC9EC90-A14B-4D9E-ACD8-408601750665"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76695"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-ACF2C9C0-5B3B-443B-9693-0928AAC98509__GUID-67D12A85-99A9-43F4-A779-D729B5182617"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>This function sends the current local processed low position to the server before detaching from the outbound server. The outbound server automatically restarts after this call. This function returns <code class="codeph">OCI_ERROR</code> if it is invoked while a <code class="codeph">OCIXStreamOutReceive()</code> call is in progress.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72965"></a>
<div class="props_rev_3"><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339"></a>
<h2 id="LNOCI-GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339" class="sect2">OCIXStreamOutLCRReceive()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Receives an LCR from an outbound stream. If an LCR is available, then this function immediately returns that LCR. The duration of each LCR is limited to the interval between two successive <code class="codeph">OCIXStreamOutLCRReceive()</code> calls. When there is no LCR available in the stream, this call returns a <code class="codeph">NULL</code> LCR after an idle timeout.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutLCRReceive ( OCISvcCtx     *svchp, 
                                OCIError      *errhp, 
                                void          **lcrp,
                                ub1           *lcrtype,
                                oraub8        *flag,
                                ub1           *fetch_low_position,
                                ub2           *fetch_low_position_len,
                                ub4           mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76696"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-688DD65F-973D-4593-97F3-C9927954A85A"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76697"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-CF739793-F21E-4D4F-973C-2880F1DE9CFF"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76698"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-2441FAD9-6B5B-4C20-8A80-FB181E8EA053"><!-- --></a>lcrp (OUT)</dt>
<dd>
<p>Pointer to the LCR received from the stream. If there is an available LCR, then this LCR is returned with status code <code class="codeph">OCI_STILL_EXECUTING</code>. When the call ends, a <code class="codeph">NULL</code> LCR is returned with status code <code class="codeph">OCI_SUCCESS</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76699"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-D70204C5-4814-4A50-9755-C46E84C207BC"><!-- --></a>lcrtype (OUT)</dt>
<dd>
<p>This value is valid only when <code class="codeph">lcrp</code> is not <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76700"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-A9E8C4E3-A770-4F07-A624-95C8D6C9D8CB"><!-- --></a>flag (OUT)</dt>
<dd>
<p>Return flag. If bit <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> (0x01) is set, then this LCR has more data. You must use <code class="codeph">OCIXStreamOutReceiveChunk()</code> function to get the remaining data.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76701"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-F2DA0ACC-37E0-4D8B-859B-DC8CFED4566E"><!-- --></a>fetch_low_position (OUT)</dt>
<dd>
<p>XStream outbound server&#39;s fetch low position. This value is returned only when the return code is <code class="codeph">OCI_SUCCESS</code>. Optional. If non-<code class="codeph">NULL</code>, then you must preallocate <code class="codeph">OCI_LCR_MAX_POSITION_LEN</code> bytes for the return value.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76702"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-494480BF-4C17-4C1B-889F-F09CFCBB987D"><!-- --></a>fetch_low_position_len (OUT)</dt>
<dd>
<p>Length of <code class="codeph">fetch_low_position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76703"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-8F81AEF1-8142-4DB6-B676-EAFC0C593CB1"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>To avoid a network round-trip for every <code class="codeph">OCIXStreamOutLCRReceive()</code> call, the connection is tied to this call and allows the server to fill up the network buffer with LCRs so subsequent calls can quickly receive the LCRs from the network. The server ends each call at the transaction boundary after an ACK interval elapses since the call began. When there is no LCR in the stream, the server ends the call after the idle timeout elapses.</p>
<p>Return codes:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_STILL_EXECUTING</code> means that the current call is still in progress. The connection associated with the specified service context handle is still tied to this call for streaming the LCRs from the server. An error is returned if you attempt to use the same connection to execute any OCI calls that require database round-trip, for example, <code class="codeph">OCIStmtExecute()</code>, <code class="codeph">OCIStmtFetch()</code>, <code class="codeph">OCILobRead()</code>, and so on. <code class="codeph">OCILCR*</code> calls do not require round-trips; thus, they are valid while the call is in progress.</p>
</li>
<li>
<p><code class="codeph">OCI_SUCCESS</code> means that the current call is completed. You are free to execute <code class="codeph">OCIStmt*</code>, <code class="codeph">OCILob*</code>, and so on from the same service context.</p>
</li>
<li>
<p><code class="codeph">OCI_ERROR</code> means the current call encounters some errors. Use <code class="codeph">OCIErrorGet()</code> to obtain information about the error.</p>
</li>
</ul>
<p>This call always returns a <code class="codeph">NULL</code> LCR when the return code is <code class="codeph">OCI_SUCCESS</code>. In addition, it returns the fetch low position to denote that the outbound server has received all transactions with commit position lower than or equal to this value.</p>
<div class="infoboxnotealso" id="GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339__GUID-34995204-5A1C-4ED4-B7D1-82E5340E6EC6">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="oci25xstrmint.htm#GUID-D9D75296-0B0B-4AA8-A29E-A48ABFB29D98">Server Handle Attributes</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56">OCIXStreamOutChunkReceive()</a>&#34;</span> for non-callback pseudocode in the Comments section</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72967"></a><a id="LNOCI72966"></a>
<div class="props_rev_3"><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340"></a>
<h2 id="LNOCI-GUID-AF2179BF-5222-4C75-BEA7-F48170D59340" class="sect2">OCIXStreamOutLCRCallbackReceive()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Used to get the LCR stream from the outbound server using callbacks. You must supply a callback procedure to be invoked for each LCR received. If some LCRs in the stream may contain <code class="codeph">LOB</code> or <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> columns, then a second callback must be supplied to process each chunk (see <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56">OCIXStreamOutChunkReceive()</a>&#34;</span>).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutLCRCallbackReceive ( 
           OCISvcCtx                           *svchp, 
           OCIError                            *errhp,    
           OCICallbackXStreamOutLCRProcess     processlcr_cb,
           OCICallbackXStreamOutChunkProcess   processchunk_cb,
           void                                *usrctxp,
           ub1                                 *fetch_low_position,   
           ub2                                 *fetch_low_position_len,
           ub4                                 mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76704"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-49538148-4C7E-4061-86A4-548D4C335D96"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76705"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-9F657281-5713-4BA9-A7F7-04785B3890E2"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76706"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-0B552E45-158E-4D80-840D-B51559EB7290"><!-- --></a>processlcr_cb (IN)</dt>
<dd>
<p>Callback function to process each LCR received by the client. Cannot be <code class="codeph">NULL</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76707"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-686FBDF1-C0C2-4667-B6C8-38C8F932F2BB"><!-- --></a>processchunk_cb (IN)</dt>
<dd>
<p>Callback function to process each chunk in the received LCR. Can be <code class="codeph">NULL</code> if you do not expect to receive any LCRs with additional chunk data.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76708"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-5E9287B4-1EAE-4DC3-BB0E-A5799E227293"><!-- --></a>usrctxp (IN)</dt>
<dd>
<p>User context to pass to both callback procedures.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76709"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-18F25B92-42BF-4F1C-A460-BD731800B5B7"><!-- --></a>fetch_low_position (OUT)</dt>
<dd>
<p>XStream outbound server&#39;s fetch low position (see <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-DB68B825-32EC-42EC-B4F5-71A2E87F4339">OCIXStreamOutLCRReceive()</a>&#34;</span>). Optional.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76710"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-CAD6FD51-D0BA-4581-8989-17B8E610634E"><!-- --></a>fetch_low_position_len (OUT)</dt>
<dd>
<p>Length of <code class="codeph">fetch_low_position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76711"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-ACC7E58D-4DA1-492A-A934-32A7E801B1BA"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>Return code: <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code>.</p>
<p>The <code class="codeph">processlcr_cb</code> argument must be of type <code class="codeph">OCICallbackXStreamOutLCRProcess</code>:</p>
<pre dir="ltr">typedef sb4  (*OCICallbackXStreamOutLCRProcess) 
               (void  *usrctxp, void *lcrp, ub1 lcrtyp, oraub8 flag);
</pre>
<p>Parameters of <code class="codeph">OCICallbackXStreamOutLCRProcess()</code>:</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76712"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-1BE0238E-16E4-4BE1-B6E3-9C1216AECEB9"><!-- --></a>usrctxp (IN/OUT)</dt>
<dd>
<p>Pointer to the user context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76713"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-53BCEB06-3580-44C9-A648-23E727FF65D4"><!-- --></a>lcrp (IN)</dt>
<dd>
<p>Pointer to the LCR just received.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76714"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-ED4BF11B-BE75-4E6C-A093-BEF5DFFB731B"><!-- --></a>lcrtyp (IN)</dt>
<dd>
<p>LCR type (<code class="codeph">OCI_LCR_XROW</code> or <code class="codeph">OCI_LCR_XDDL</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76715"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-2443472E-31EF-449C-A85E-2E83F86DF284"><!-- --></a>flag (IN)</dt>
<dd>
<p>If <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> is set, then the current LCR has more chunk data.</p>
</dd>
</dl>
<p>The input parameters of the <code class="codeph">processlcr_cb()</code> procedure are the user context, the LCR just received, its type, and a flag to indicate whether the LCR contains more data. If there is an LCR available, then this callback is invoked immediately. If there is no LCR in the stream, after an idle timeout, then this call ends with <code class="codeph">OCI_SUCCESS</code> return code. The valid return codes from the <code class="codeph">OCICallbackXStreamOutLCRProcess()</code> callback function are <code class="codeph">OCI_CONTINUE</code> or <code class="codeph">OCI_SUCCESS</code>. This callback function must return <code class="codeph">OCI_CONTINUE</code> to continue processing the <code class="codeph">OCIXStreamOutLCRCallbackReceive()</code> call. Any return code other than <code class="codeph">OCI_CONTINUE</code> signals that the client wants to terminate <code class="codeph">OCIXStreamOutLCRCallbackReceive()</code> immediately.</p>
<div class="infoboxnotealso" id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-318E8C03-5252-4576-A7E7-F5917AE49AC3">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="oci25xstrmint.htm#GUID-D9D75296-0B0B-4AA8-A29E-A48ABFB29D98">Server Handle Attributes</a>&#34;</span></p>
</div>
<p>The <code class="codeph">processchunk_cb</code> argument must be of type <code class="codeph">OCICallbackXStreamOutChunkProcess</code>:</p>
<pre dir="ltr">typedef sb4  (*OCICallbackXStreamOutChunkProcess)
(void        *usrctxp, 
oratext      *column_name,
ub2          column_name_len,
ub2          column_dty,
oraub8       column_flag,
ub2          column_csid,
ub4          chunk_bytes,
ub1          *chunk_data,
oraub8       flag );
</pre>
<p>Parameters of <code class="codeph">OCICallbackXStreamOutChunkProcess()</code>:</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76716"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-16A59B41-D068-465A-B547-A985BFA03B54"><!-- --></a>usrctxp (IN/OUT)</dt>
<dd>
<p>Pointer to the user context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76717"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-8055A8F7-E500-4CCE-88D6-44159F5835B9"><!-- --></a>column_name (IN)</dt>
<dd>
<p>Column name of the current chunk.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76718"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-9B2F661D-C599-4D8D-84F8-BF20788F5147"><!-- --></a>column_name_len (IN)</dt>
<dd>
<p>Length of the column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76719"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-BD9CE456-173E-4FF0-AAE1-E986600B6FB3"><!-- --></a>column_name_dty (IN)</dt>
<dd>
<p>Chunk data type (<code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76720"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-FB8EB651-F911-4937-97FC-782B940690E9"><!-- --></a>column_flag (IN)</dt>
<dd>
<p>See Comments in <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-41760606-A672-4F1B-8713-EC17124BB67B">OCIXStreamInChunkSend()</a>&#34;</span>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76721"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-39A2574F-B75C-4612-BAF5-DF42C39346E9"><!-- --></a>column_csid (IN)</dt>
<dd>
<p>Column character set ID. Relevant only if the column is an <code class="codeph">XMLType</code> column (that is, <code class="codeph">column_flag</code> has the <code class="codeph">OCI_LCR_COLUMN_XML_DATA</code> bit set).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76722"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-1AB5B7E5-EADC-48AD-882E-91CCE6448E0C"><!-- --></a>chunk_bytes (IN)</dt>
<dd>
<p>Chunk data length in bytes.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76723"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-A4165F7F-F526-4916-870B-9995AE340AB3"><!-- --></a>chunk_data (IN)</dt>
<dd>
<p>Chunk data pointer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76724"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__GUID-A4411DB2-DF47-40AF-A778-A5BCEE4F1F9F"><!-- --></a>flag (IN)</dt>
<dd>
<p>If <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> is set, then the current LCR has more chunk data.</p>
</dd>
</dl>
<p>The input parameters of the <code class="codeph">processchunk_cb()</code> procedure are the user context, the information about the chunk, and a flag. When the <code class="codeph">flag</code> argument has the <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> (0x01) bit set, then there is more data for the current LCR.</p>
<p>The valid return codes from the <code class="codeph">OCICallbackXStreamOutChunkProcess()</code> callback function are <code class="codeph">OCI_CONTINUE</code> or <code class="codeph">OCI_SUCCESS</code>. This callback function must return <code class="codeph">OCI_CONTINUE</code> to continue processing the <code class="codeph">OCIXStreamOutLCRCallbackReceive()</code> call. Any return code other than <code class="codeph">OCI_CONTINUE</code> signals that the client wants to terminate <code class="codeph">OCIXStreamOutLCRCallbackReceive()</code> immediately.</p>
<p>OCI calls are provided to access each field in the LCR. If the LCR contains only scalar column(s), then the duration of that LCR is limited only to the <code class="codeph">processlcr_cb()</code> procedure. If the LCR contains some chunk data, then the duration of the LCR is extended until all the chunks have been processed. If you want to access the LCR data at a later time, then a copy of the LCR must be made before it is freed.</p>
<p>As for <code class="codeph">OCIXStreamOutLCRReceive()</code>, the server ends each call at the transaction boundary after each ACK interval since the call began, or after each idle timeout. The default ACK interval is 30 seconds, and the default idle timeout is one second. See <span class="q">&#34;<a href="oci25xstrmint.htm#GUID-D9D75296-0B0B-4AA8-A29E-A48ABFB29D98">Server Handle Attributes</a>&#34;</span> to tune these values. This function also returns the fetch low position when the call ends.</p>
<p><a href="oci26xstrm001.htm#GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__BABDDBJA">Figure 26-2</a> shows the execution flow of the <code class="codeph">OCIXStreamOutLCRCallbackReceive()</code> function.</p>
<div class="figure" id="GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__BABDDBJA">
<p class="titleinfigure">Figure 26-2 Execution Flow of the OCIXStreamOutLCRCallbackReceive() Function</p>
<img width="614" height="243" src="img/GUID-9DC3F712-E016-4C5F-8B96-F9B6DAA2AC75-default.gif" alt="Description of Figure 26-2 follows" title="Description of Figure 26-2 follows"/><br/>
<a href="img_text/GUID-9DC3F712-E016-4C5F-8B96-F9B6DAA2AC75-print.htm">Description of &#34;Figure 26-2 Execution Flow of the OCIXStreamOutLCRCallbackReceive() Function&#34;</a></div>
<!-- class="figure" -->
<p>* While <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> is set.</p>
<p>Description of <a href="oci26xstrm001.htm#GUID-AF2179BF-5222-4C75-BEA7-F48170D59340__BABDDBJA">Figure 26-2</a>:</p>
<ul style="list-style-type: disc;">
<li>
<p>At 1, the client invokes <code class="codeph">OCIXStreamOutLCRCallbackReceive()</code> providing two callbacks. This function initiates an LCR outbound stream from the server.</p>
</li>
<li>
<p>At 2, this function receives an LCR from the stream and invokes <code class="codeph">processlcr_cb()</code> procedure with the LCR just received. It passes <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> flag to <code class="codeph">processlcr_cb()</code> if the current LCR has additional data.</p>
</li>
<li>
<p>If the current LCR has no additional chunk, then this function repeats 2 for the next LCR in the stream.</p>
</li>
<li>
<p>At 3, if the current LCR contains additional chunk data, then this function invokes <code class="codeph">processchunk_cb()</code> for each chunk received with the <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> flag. This flag is cleared when the callback is invoked on the last chunk of the current LCR.</p>
</li>
<li>
<p>If there is more LCR in the stream, then it loops back to 2. This process continues until the end of the current call, or when there is no LCR in the stream for one second, or if a callback function returns any value other than <code class="codeph">OCI_CONTINUE</code>.</p>
</li>
</ul>
<p>Here is sample pseudocode for callback mode:</p>
<pre dir="ltr">main
{
   /* Attach to outbound server specifying last position */
   OCIXStreamOutAttach(last_pos);
 
   /* Update the local processed low position */
   OCIXStreamOutProcessedLWMSet(lwm);
 
   while (TRUE)
   {
      OCIXStreamOutLCRCallbackReceive(processlcr_cb,
                                      processchunk_cb, fwm);
 
      /* Use fetch low position(fwm)
       * to update processed lwm if applied.
       */
 
      /* Update the local lwm so it is sent to
       * server during next call.
       */
      OCIXStreamOutProcessedLWMSet(lwm);
      if (some terminating_condition)
         break;
   }
   OCIXStreamOutDetach();
}
 
processlcr_cb (IN lcr, IN flag)
{
   /* Process the LCR just received */
   OCILCRHeaderGet(lcr);
   OCILCRRowColumnInfoGet(lcr);
 
   if (lcr is LOB_WRITE | LOB_TRIM | LOB_ERASE)
      OCILCRLobInfoGet(lcr);
 
   if (OCI_XSTREAM_MORE_ROW_DATA flag set)
      prepare_for_chunk_data;
   else
      process_end_of_row;
}
 
processchunk_cb (IN chunk, IN flag)
{
   process_chunk;
 
   if (OCI_XSTREAM_MORE_ROW_DATA flag not set)
      process_end_of_row;
}
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72968"></a>
<div class="props_rev_3"><a id="GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA"></a>
<h2 id="LNOCI-GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA" class="sect2">OCIXStreamOutProcessedLWMSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Updates the local copy of the processed low position. This function can be called anytime between <code class="codeph">OCIXStreamOutAttach()</code> and <code class="codeph">OCIXStreamOutDetach()</code> calls. Clients using the callback mechanism to stream LCRs from the server (see <span class="q">&#34;<a href="oci26xstrm001.htm#GUID-AF2179BF-5222-4C75-BEA7-F48170D59340">OCIXStreamOutLCRCallbackReceive()</a>&#34;</span>), can invoke this function while in the callback procedures.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutProcessedLWMSet ( OCISvcCtx  *svchp, 
                                     OCIError   *errhp, 
                                     ub1        *processed_low_position,
                                     ub2        processed_low_position_len,
                                     ub4        mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76725"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA__GUID-DF30F56B-DC14-4C8F-98CF-224194083E0B"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76726"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA__GUID-5873D96A-5648-4E47-80C1-9CF8ED9F17E9"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76727"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA__GUID-52ACA2BA-4266-41FB-BCA3-C355B3C8B833"><!-- --></a>processed_low_position (IN)</dt>
<dd>
<p>The processed low position maintained at the client.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76728"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA__GUID-2693DFC6-2C97-44B6-8864-A7411946AD42"><!-- --></a>processed_low_position_len (IN)</dt>
<dd>
<p>Length of <code class="codeph">processed_low_position</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76729"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B273D4C2-81B0-4D89-AB3C-D61626A9FACA__GUID-28014C64-00D6-439C-9575-7F403116CE69"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The processed low position denotes that all LCRs at or below it have been processed. After successfully attaching to an XStream outbound server, a local copy of the processed low position is maintained at the client. Periodically, this position is sent to the server so that archived redo log files containing already processed transactions can be purged.</p>
<p>Return code: <code class="codeph">OCI_SUCCESS</code> or <code class="codeph">OCI_ERROR</code>.</p>
<p>Clients using <code class="codeph">XStreamOut</code> functions must keep track of the processed low position based on what they have processed and call this function whenever their processed low position has changed. This is done so that a more current value is sent to the server during the next update, which occurs at the beginning of the <code class="codeph">OCIXStreamOutLCRCallbackReceive()</code> and <code class="codeph">OCIXStreamDetach()</code> calls. For an <code class="codeph">OCIXStreamOutLCRReceive()</code> call, the processed low position is sent to the server when it initiates a request to start the outbound stream. It is not sent while the stream is in progress.</p>
<p>You can query the <code class="codeph">DBA_XSTREAM_OUTBOUND_PROGRESS</code> view to confirm that the processed low position has been saved in the server.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72970"></a><a id="LNOCI72969"></a>
<div class="props_rev_3"><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56"></a>
<h2 id="LNOCI-GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56" class="sect2">OCIXStreamOutChunkReceive()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Allows the client to retrieve the data of each <span>LOB</span> or <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> column one chunk at a time.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutChunkReceive ( OCISvcCtx   *svchp, 
                                  OCIError    *errhp,
                                  oratext     **column_name,
                                  ub2         *column_name_len,
                                  ub2         *column_dty,
                                  oraub8      *column_flag,
                                  ub2         *column_csid,
                                  ub4         *chunk_bytes,
                                  ub1         **chunk_data,
                                  oraub8      *flag,
                                  ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76730"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-0F86EFD5-DCEB-4F0C-A9EB-DBB8A1A3236F"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76731"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-0F4044B4-0FE8-4A62-9870-01B64D6F569C"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76732"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-9C360D00-1766-455C-B2DD-F4EAC1ADF450"><!-- --></a>column_name (OUT)</dt>
<dd>
<p>Name of the column that has data.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76733"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-C50E567B-7DE2-4894-9997-66EC90A6B847"><!-- --></a>column_name_len (OUT)</dt>
<dd>
<p>Length of the column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76734"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-F0376A7F-3118-4695-95EA-B263B5FEBE1F"><!-- --></a>column_dty (OUT)</dt>
<dd>
<p>Column chunk data type (either <code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76735"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-E08CC8C4-3CD6-4FE5-B45F-A5E89BD7F49A"><!-- --></a>column_flag (OUT)</dt>
<dd>
<p>Column flag. See Comments for valid flags.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76736"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-F142A3C1-B1B9-4ED7-BA72-CA79D79F2F48"><!-- --></a>column_csid (OUT)</dt>
<dd>
<p>Column character set ID. This is returned only for <code class="codeph">XMLType</code> column, that is, <code class="codeph">column_flag</code> has <code class="codeph">OCI_LCR_COLUMN_XML_DATA</code> bit set.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76737"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-5E4864F4-B0B0-40AC-9D89-7B36D36A8FBC"><!-- --></a>chunk_bytes (OUT)</dt>
<dd>
<p>Number of bytes in the returned chunk.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76738"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-72B59E21-BA48-484D-B8E2-4E20D473AC91"><!-- --></a>chunk_data (OUT)</dt>
<dd>
<p>Pointer to the chunk data in the LCR. The client must not deallocate this buffer since the LCR and its contents are maintained by this function.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76739"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-9BD9B053-39F0-4E1A-AA22-065F8494C4D6"><!-- --></a>flag (OUT)</dt>
<dd>
<p>If <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> (0x01) is set, then the current LCR has more chunks coming.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76740"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__GUID-B35352EA-B715-42B7-A838-DEB671226033"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>In Streams, <span>LOB</span>, <code class="codeph">LONG</code>, or <code class="codeph">XMLType</code> column data is broken up into multiple LCRs based on how they are stored in the online redo log files. Thus, for a row change containing these columns multiple LCRs may be constructed. The first LCR of a row change contains the column data for all the scalar columns. All LOB or <code class="codeph">LONG</code> or <code class="codeph">XMLType</code> columns in the first LCR are set to <code class="codeph">NULL</code> because their data are sent in subsequent LCRs for that row change. These column data are stored in the LCR as either <code class="codeph">RAW</code> (<code class="codeph">SQLT_BIN</code>) or <code class="codeph">VARCHAR2</code> (<code class="codeph">SQLT_CHR</code>) chunks as shown in <a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__BABIGBAD" title="This table has 3 columns. Column 1 is the source column data type, column 2 is the corresponding Streams LCR data type, and column 3 is the corresponding Streams LCR character set.">Table 26-5</a>.</p>
<div class="tblformalwide" id="GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__BABIGBAD">
<p class="titleintable">Table 26-5 Storage of LOB or LONG Data in the LCR</p>
<table class="cellalignment6157" title="Storage of LOB or LONG Data in the LCR" summary="This table has 3 columns. Column 1 is the source column data type, column 2 is the corresponding Streams LCR data type, and column 3 is the corresponding Streams LCR character set.">
<thead>
<tr class="cellalignment6151">
<th class="cellalignment6276" id="d292661e11482">Source Column Data Type</th>
<th class="cellalignment6266" id="d292661e11485">Streams LCR Data Type</th>
<th class="cellalignment6277" id="d292661e11488">Streams LCR Character Set</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6151">
<td class="cellalignment6278" id="d292661e11493" headers="d292661e11482">
<p><code class="codeph">BLOB</code></p>
</td>
<td class="cellalignment6267" headers="d292661e11493 d292661e11485">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6279" headers="d292661e11493 d292661e11488">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6278" id="d292661e11505" headers="d292661e11482">
<p>Fixed-width <code class="codeph">CLOB</code></p>
</td>
<td class="cellalignment6267" headers="d292661e11505 d292661e11485">
<p><code class="codeph">VARCHAR2</code></p>
</td>
<td class="cellalignment6279" headers="d292661e11505 d292661e11488">
<p>Client Character Set</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6278" id="d292661e11518" headers="d292661e11482">
<p>Varying-width <code class="codeph">CLOB</code></p>
</td>
<td class="cellalignment6267" headers="d292661e11518 d292661e11485">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6279" headers="d292661e11518 d292661e11488">
<p>AL16UTF16</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6278" id="d292661e11531" headers="d292661e11482">
<p><code class="codeph">NCLOB</code></p>
</td>
<td class="cellalignment6267" headers="d292661e11531 d292661e11485">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6279" headers="d292661e11531 d292661e11488">
<p>AL16UTF16</p>
</td>
</tr>
<tr class="cellalignment6151">
<td class="cellalignment6278" id="d292661e11543" headers="d292661e11482">
<p><code class="codeph">XMLType</code></p>
</td>
<td class="cellalignment6267" headers="d292661e11543 d292661e11485">
<p><code class="codeph">RAW</code></p>
</td>
<td class="cellalignment6279" headers="d292661e11543 d292661e11488">
<p>Column <code class="codeph">csid</code> obtained from the chunk</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>In Streams, <span>LOB</span>, <code class="codeph">LONG</code>, or <code class="codeph">XMLType</code> column data is broken up into multiple chunks based on how they are stored in the online redo log files. For a row change containing columns of these data types, its associated LCR only contains data for the other scalar columns. All LOB, <code class="codeph">LONG</code>, or <code class="codeph">XMLType</code> columns are either represented in the LCR as <code class="codeph">NULL</code> or not included in the LCR. The actual data for these columns are sent following each LCR as <code class="codeph">RAW</code> (<code class="codeph">SQLT_BIN</code>) or <code class="codeph">VARCHAR2</code> (<code class="codeph">SQLT_CHR</code>) chunks as shown in <a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__BABIGBAD" title="This table has 3 columns. Column 1 is the source column data type, column 2 is the corresponding Streams LCR data type, and column 3 is the corresponding Streams LCR character set.">Table 26-5</a>.</p>
<p>The following <a id="d292661e11597" class="indexterm-anchor"></a>LCR column flags can be combined using the bitwise <code class="codeph">OR</code> operator.</p>
<pre dir="ltr">#define OCI_LCR_COLUMN_LOB_DATA     /* column contains LOB data */
#define OCI_LCR_COLUMN_LONG_DATA    /* column contains long data */
#define OCI_LCR_COLUMN_EMPTY_LOB    /* column has an empty LOB  */
#define OCI_LCR_COLUMN_LAST_CHUNK   /* last chunk of current column */
#define OCI_LCR_COLUMN_AL16UTF16    /* column is in AL16UTF16 fmt */
#define OCI_LCR_COLUMN_NCLOB        /* column has NCLOB data */
#define OCI_LCR_COLUMN_XML_DATA     /* column contains xml data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_XML_DIFF     /* column contains xmldiff data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_ENCRYPTED    /* column is encrypted */
#define OCI_LCR_COLUMN_UPDATED      /* col is updated */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_32K_DATA     /* col contains 32K data */
</pre>
<pre dir="ltr">#define OCI_LCR_COLUMN_OBJECT_DATA  /* col contains object data in xml format */
</pre>
<p>Return code: <code class="codeph">OCI_ERROR</code> or <code class="codeph">OCI_SUCCESS</code>.</p>
<p>This call returns a <code class="codeph">NULL</code> column name and <code class="codeph">NULL</code> chunk data if it is invoked when the current LCR does not contain the LOB, <code class="codeph">LONG</code>, or <code class="codeph">XMLType</code> columns. This function is valid only when an <code class="codeph">OCIXStreamOutLCRReceive()</code> call is in progress. An error is returned if it is called during other times.</p>
<p>If the return flag from <code class="codeph">OCIXStreamOutLCRReceive()</code> has <code class="codeph">OCI_XSTREAM_MORE_ROW_DATA</code> bit set, then you must iteratively call <code class="codeph">OCIXStreamOutChunkReceive()</code> to retrieve all the chunks belonging to that row change before getting the next row change (that is, before making the next <code class="codeph">OCIXStreamOutLCRReceive()</code> call); otherwise, an error is returned.</p>
<p>Here is sample pseudocode for non-callback mode:</p>
<pre dir="ltr">main
{
   /* Attach to outbound server specifying last position */
   OCIXStreamOutAttach(last_pos);
 
   /* Update the local processed low position */
   OCIXStreamOutProcessedLWMSet(lwm);
 
   while (TRUE)
   {
      status = OCIXStreamOutLCRReceive(lcr, flag, fwm);
 
      if (status == OCI_STILL_EXECUTING)
      {
         /* Process LCR just received */
         OCILCRHeaderGet(lcr);
         OCILCRRowColumnInfoGet(lcr);
 
         while (OCI_XSTREAM_MORE_ROW_DATA flag set)
         {
            OCIXStreamReceiveChunk(chunk, flag, );
 
            process_chunk;
         }
         process_end_of_row;
      }
      else if (status == OCI_SUCCESS)
      {
         /* Use fetch low position(fwm)
          * to update processed lwm if applied.
          */
 
         /* Update the local lwm so it is sent to
          * server during next call.
          */
         OCIXStreamOutProcessedLWMSet(lwm);
 
          if (some terminating_condition)
            break;
       }
   }
   OCIXStreamOutDetach();
}
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72971"></a>
<div class="props_rev_3"><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635"></a>
<h2 id="LNOCI-GUID-B59DB8F2-1998-453D-AB90-386C54BF1635" class="sect2">OCIXStreamOutGetNextChunk()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>While in the <code class="codeph">ProcessLCRStream()</code> callback function, the client must repeatedly call <code class="codeph">OCIXStreamOutGetNextChunk()</code> to retrieve all the chunks in the current LCR (that is, until either <code class="codeph">OCI_ERROR</code> or <code class="codeph">OCI_SUCCESS</code> is returned). If this is not done, an error will be raised when the callback function ends.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutGetNextChunk ( OCISvcCtx   *svchp,
                                  OCIError    *errhp,
                                  oratext     **column_name,
                                  ub2         *column_name_len,
                                  ub2         *column_dty,
                                  oraub8      *column_flag,
                                  ub4         *rtn_bytes,
                                  ub1         **bufp,
                                  ub4         *op_offset,
                                  ub4         *op_size,
                                  ub4         mode );
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76741"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-5AD50113-979D-4A10-90B1-D2E0121CB2FF"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76742"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-A070CFB0-2C51-4E81-B00E-B1DFD53FC1AB"><!-- --></a>errhp (IN/OUT)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in the event of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76743"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-33C2BACE-AE10-4ECA-B769-D0EA1EDCC615"><!-- --></a>column_name (OUT)</dt>
<dd>
<p>Name of LOB column which the data belongs to.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76744"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-545CFDB0-B88E-44E3-8B1B-C0212AFFC598"><!-- --></a>column_name_len (OUT)</dt>
<dd>
<p>Length of column name.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76745"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-977A71DB-1012-4503-9CBD-C2506A1F5C5C"><!-- --></a>column_dty (OUT)</dt>
<dd>
<p>Column data type (either <code class="codeph">SQLT_CHR</code> or <code class="codeph">SQLT_BIN</code>).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76746"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-190AB0BD-06C1-464E-97B7-1121A35A2540"><!-- --></a>column_flag (OUT)</dt>
<dd>
<p>Column flag. Valid values are listed in Comments.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76747"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-09E3A597-FEC7-4964-B9E7-E1249A5BF460"><!-- --></a>rtn_bytes (OUT)</dt>
<dd>
<p>Number of bytes in returned buffer.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76748"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-53B9AE81-ACF8-45EF-80E5-6034BB61C2E0"><!-- --></a>bufp (OUT)</dt>
<dd>
<p>Pointer to the LOB chunk data in the LCR. The client should not de-allocate this buffer since the LCR and its contents are maintained by the function.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76749"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-D6572FBF-039F-4263-993F-10A3D91872F9"><!-- --></a>op_offset (OUT)</dt>
<dd>
<p>LOB operation offset. Optional. Data is not returned if the argument is <code class="codeph">NULL</code>. Relevant only for <code class="codeph">LOB_WRITE</code> and <code class="codeph">LOB_TRIM</code> operation; otherwise, a zero is returned.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76750"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-47AA504D-C27A-40E6-A022-460A78324B01"><!-- --></a>op_size (OUT)</dt>
<dd>
<p>LOB operation size. Optional. Data not returned if the argument is <code class="codeph">NULL</code>. Relevant only for <code class="codeph">LOB_TRIM</code> and <code class="codeph">LOB_ERASE</code> operation; otherwise, a zero is returned.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76751"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-B59DB8F2-1998-453D-AB90-386C54BF1635__GUID-785BDAAB-0B25-41E3-A264-DE9803FE6D5E"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code> for now.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>The <code class="codeph">OCIEnv</code> environment handle must be created with <code class="codeph">OCI_OBJECT</code> mode, and the service context must be in connected state to issue this function.</p>
<p>In streams, LOB or <code class="codeph">LONG</code> column data is broken up into multiple LCRs based on how they are stored in the redo logs. Thus, for a row change containing Re <code class="codeph">LONG</code> columns, multiple LCRs can be constructed. The first LCR of a row change contains the column data for all the scalar columns. All LOB or <code class="codeph">LONG</code> columns in the first LCR are set to <code class="codeph">NULL</code> since their data are sent in subsequent LCRs for that row change. <code class="codeph">LONG</code> column data is implicitly converted to LOB before the data is sent to the client. LOB or <code class="codeph">LONG</code> data is stored in the LCR as <code class="codeph">RAW</code> (<code class="codeph">SQLT_BIN</code>) or <code class="codeph">VARCHAR2</code> (<code class="codeph">SQLT_CHR</code>) as shown in <a href="oci26xstrm001.htm#GUID-E44A75FF-81BD-497F-A203-C6A6F6907C56__BABIGBAD" title="This table has 3 columns. Column 1 is the source column data type, column 2 is the corresponding Streams LCR data type, and column 3 is the corresponding Streams LCR character set.">Table 26-5</a>:</p>
<p>The <code class="codeph">OCIXStreamOutProcessLCRStream()</code> function allows the client to retrieve the data of each LOB or LONG column one chunk at a time. All the chunks belonging to one column are returned in a contiguous order. Chunk data from one column is returned entirely before switching to the next column. There is no fixed ordering on how the columns are returned. The client should not rely on the ordering of LOB columns but rely on the returned column names.</p>
<p>Invoking <code class="codeph">OCIXStreamOutGetNextChunk()</code> when the current LCR contains only scalar columns results in a <code class="codeph">NULL</code> column name, and no data is returned.</p>
<p>The returned column flag provides more information on each chunk data. For example, the flag <code class="codeph">OCI_LCR_COLUMN_LAST_CHUNK</code> is always returned on the last chunk of each column:</p>
<p>The following flags can specify a column property. Multiples of these flags can be combined using the bitwise <code class="codeph">OR</code> operator.</p>
<pre dir="ltr">#define OCI_LCR_COLUMN_LOB_DATA /* column contains lob data */
#define OCI_LCR_COLUMN_LONG_DATA /* column contains long data */
#define OCI_LCR_COLUMN_EMPTY_LOB /* column has an empty lob */
#define OCI_LCR_COLUMN_LAST_CHUNK /* last chunk of column */
#define OCI_LCR_COLUMN_AL16UTF16 /* column is in AL16UTF16 fmt */
#define OCI_LCR_COLUMN_NCLOB /* column has NCLOB data */
#define OCI_LCR_COLUMN_XML_DATA /* column contains xml data */
#define OCI_LCR_COLUMN_XML_DIFF /* column contains xmldiff */
#define OCI_LCR_COLUMN_ENCRYPTED /* column is encrypted */
</pre>
<p>During an <code class="codeph">OCIXStreamOutProcessLCRStream()</code> call, the client provides a callback function that will be invoked each time an LCR is retrieved. For an LCR containing LOB or <code class="codeph">LONG</code> columns, the first LCR of a row change is passed to this callback function. From within this callback function, the client can repeatedly call <code class="codeph">OCIXStreamOutGetNextChunk()</code> to retrieve all the chunks for each LOB or <code class="codeph">LONG</code> column. When this function returns <code class="codeph">OCI_SUCCESS</code>, it means the client has consumed all the data for the current row change.</p>
<p>While in the <code class="codeph">ProcessLCRStream</code> callback function the client must repeatedly call <code class="codeph">OCIXStreamOutGetNextChunk()</code> to retrieve all the chunks in the current LCR (that is, until either <code class="codeph">OCI_ERROR</code> or <code class="codeph">OCI_SUCCESS</code> is returned). If this is not done, an error is raised when the callback function ends.</p>
<p>This function is valid only during the duration that the <code class="codeph">ProcessLCRStream</code> callback function is invoked. An error is raised if it is called during other times.</p>
<p>This function returns the following values:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OCI_SUCCESS</code> means that all the data for the current LCR has been retrieved. You can check the returned column and buffer information to access the returned column data.</p>
</li>
<li>
<p><code class="codeph">OCI_NEED_DATA</code> means there is more data in the stream for the current LCR. You can check the returned column and buffer information to access the returned column data.</p>
</li>
<li>
<p><code class="codeph">OCI_ERROR</code> means there is an error. You can use <code class="codeph">OCIErrorGet()</code> to get the error code.</p>
</li>
</ul>
<p>Following is a sample client code snippet (error checking is not included for simplicity):</p>
<pre dir="ltr">main()
{
...
OCIServerAttach(...); /* Connect to Oracle db */
/* Attach to the outbound server named &lsquo;TT1&#39; */
OCIXStreamOutAttach(...,&ldquo;TT1&#34;, 3, hwm, hwm_len, (OCIDate *)0, OCI_DEFAULT);
/*--------------------------------------------------------
Initialize the LWM by querying the client&#39;s system tables
or set to zero and let the outbound server determines the LWM.
--------------------------------------------------------*/
Init_lwm(&amp;lwm);
/*---------------------------------------------------------
ProcessLCR_CB is a callback function to process each LCR (see below).
usrctxp is the user context to be passed to the callback function.
--------------------------------------------------------*/
while (OCIXStreamOutProcessLCRStream(..., lwm, lwm_len,(OCIDate *)0,
       ProcessLCR_CB, usrctxp, 0, OCI_DEFAULT) == OCI_SUCCESS)
{
/* Client maintains LWM. */
Maintain_lwm(&amp;lwm);
...
}
/* detach from the outbound server */
OCIXStreamOutDetach(..., lwm, lwm_len, (OCIDate *)0, OCI_DEFAULT);
}
/* Sample callback routine to OCIXStreamOutProcessLCRStream() */
sb4 ProcessLCR_CB (void *ctxp, void *lcrp, ub1 lcrtyp)
{
/* Get header information for current LCR */
status = OCILCRGetHeader(lcrp,...);
if (status != OCI_SUCCESS)
    handle_error();
if (lcrtype == OCI_LCR_XROW)
  {
   if (OCILcrRowGetColumnInfo(lcrp, ...) != OCI_SUCCESS)
     handle_error();
   process_scalar_columns(...);
   do
   {
     status = OCIXStreamOutGetNextChunk(..., &amp;colname, &amp;colnamelen,
                                        &amp;coldty, &amp;flag, &amp;rtn_bytes,
                                        bufp, ...);
     if (status == OCI_ERROR)
          handle_error();
     process_lob_chunk(...);
   } while (status == OCI_NEED_DATA);
       if (status == OCI_ERROR)
         handle_error();
  }
return OCI_CONTINUE;
}
</pre></div>
<!-- class="section" --></div>
</div>
<a id="LNOCI72973"></a>
<div class="props_rev_3"><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0"></a>
<h2 id="LNOCI-GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0" class="sect2">OCIXStreamOutSessionSet()</h2>
<div>
<div class="section">
<p class="subhead2">Purpose</p>
<p>Sets session attributes for XStream Out functions.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Syntax</p>
<pre dir="ltr">sword OCIXStreamOutSessionSet(OCISvcCtx   *svchp,
                              OCIError    *errhp,
                              oratext     *attribute_name,
                              ub2          attribute_name_len,
                              void        *attribute_value,
                              ub2          attribute_value_len,
                              ub2          attribute_dty,
                              ub4          mode); 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Parameters</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76752"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-FEE0ABAC-8775-4368-B5AF-6A994666C746"><!-- --></a>svchp (IN)</dt>
<dd>
<p>Service handle context.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76753"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-01B95190-BFFC-453E-A94D-2B3913B94078"><!-- --></a>errhp (IN)</dt>
<dd>
<p>An error handle you can pass to <code class="codeph">OCIErrorGet()</code> for diagnostic information in case of an error.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76754"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-2DF98640-4BB8-4BD1-A029-014B8AF1E337"><!-- --></a>attribute_name (IN)</dt>
<dd>
<p>An attribute name.</p>
<p>Valid values for <code class="codeph">attribute_name</code> are:</p>
<pre dir="ltr">#define  OCIXSTREAM_ATTR_ATTACH_TIMEOUT &#34;ATTACH_TIMEOUT_SECS&#34;
#define  OCIXSTREAM_ATTR_MAX_ATTACH_RETRIES &#34;MAX_ATTACH_RETRIES&#34;
</pre></dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76755"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-E750A196-61D5-4BD1-9A97-75C7228DEE97"><!-- --></a>attribute_name_len (IN)</dt>
<dd>
<p>An attribute name length.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76756"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-E35DAD64-A0F1-439A-ADA2-4E83BCD8865C"><!-- --></a>attribute_value (IN)</dt>
<dd>
<p>The attribute value.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76757"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-5B6DA33E-361B-4F9C-8290-62BDEBA2AE39"><!-- --></a>attribute_value_len (IN)</dt>
<dd>
<p>The attribute value length.</p>
<p>The maximum value for <code class="codeph">attribute_value_len</code> is 128.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76758"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-C1216000-720E-4D4B-A3B3-20ED4E9318FE"><!-- --></a>attribute_dty (IN)</dt>
<dd>
<p>Pointer to an array of attribute data types. The only valid value for <code class="codeph">attribute_dty</code> is <code class="codeph">DTYUB2</code>. An error is returned if you try a data type other than <code class="codeph">DTYUB2</code> for <code class="codeph">ATTACH_TIMEOUT_SECS</code> and <code class="codeph">MAX_ATTACH_RETRIES</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-76759"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-48B9827C-A2A2-4E24-BD93-BD43558F8FF0__GUID-3E115F69-3660-4EE1-8F49-AF766BFA4790"><!-- --></a>mode (IN)</dt>
<dd>
<p>Specify <code class="codeph">OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Comments</p>
<p>You must invoke <code class="codeph">OCIXStreamOutSessionSet()</code> before calling <code class="codeph">OCIXStreamOutAttach()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Returns</p>
<p><code class="codeph">OCI_SUCCESS</code> if successful, otherwise <code class="codeph">OCI_ERROR</code>.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6150">
<tr>
<td class="cellalignment6162">
<table class="cellalignment6155">
<tr>
<td class="cellalignment6154"><a href="oci26strm.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6154"><a href="ociaahan.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6164">
<table class="cellalignment6153">
<tr>
<td class="cellalignment6154"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6154"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6154"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6154"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6154"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6154"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>