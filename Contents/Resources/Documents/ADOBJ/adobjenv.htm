<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-744"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Object%20Support%20in%20Oracle%20Programming%20Environments"></a><title>Object Support in Oracle Programming Environments</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-08-06T13:19:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Object-Relational Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53277-02"/>
<meta name="dcterms.isVersionOf" content="ADOBJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adobjplsql.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adobjcol.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53277-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/16</span> <!-- End Header -->
<div id="ADOBJ003" class="chapter"><a id="i441290"></a>
<h1 class="chapter"><span class="secnum">4</span> Object Support in Oracle Programming Environments</h1>
<p><a id="sthref326"></a><a id="sthref327"></a>In an Oracle database, you can create object types with SQL data definition language (DDL) commands, and you can manipulate objects with SQL data manipulation language (DML) commands. From there, you can use many Oracle application programming environments and tools that have built-in support for Oracle Objects.</p>
<p>This chapter discusses the following topics:</p>
<ul>
<li>
<p><a href="#i452002">SQL and Object Types</a></p>
</li>
<li>
<p><a href="#CHDBGDGB">SQL Developer</a></p>
</li>
<li>
<p><a href="#i451615">PL/SQL</a></p>
</li>
<li>
<p><a href="#i452824">Oracle Call Interface (OCI)</a></p>
</li>
<li>
<p><a href="#i447809">Pro*C/C++</a></p>
</li>
<li>
<p><a href="#i457214">Oracle C++ Call Interface (OCCI)</a></p>
</li>
<li>
<p><a href="#i452304">Java Tools for Accessing Oracle Objects</a></p>
</li>
<li>
<p><a href="#i457671">XML</a></p>
</li>
<li>
<p><a href="#i1003861">Utilities Providing Support for Objects</a></p>
</li>
</ul>
<a id="i452002"></a>
<div id="ADOBJ7192" class="sect1">
<h2 class="sect1">SQL and Object Types<a id="sthref328"></a><a id="sthref329"></a></h2>
<p>Oracle SQL data definition language (DDL) provides the following support for object types:</p>
<ul>
<li>
<p>Defining object types, nested tables, and arrays</p>
</li>
<li>
<p>Specifying privileges</p>
</li>
<li>
<p>Specifying table columns of object types</p>
</li>
<li>
<p>Creating object tables</p>
</li>
</ul>
<p>Oracle SQL DML provides the following support for object types:</p>
<ul>
<li>
<p>Querying and updating objects and collections</p>
</li>
<li>
<p>Manipulating <code>REF</code>s</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For a complete description of Oracle SQL syntax, see <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CHDBGDGB"></a>
<div id="ADOBJ7641" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">SQL Developer</h2>
<p>SQL Developer provides a visual development environment for database developers and DBAs to create and manipulate database schema objects including Oracle Objects, and to run reports, monitor performance and perform many other database-related tasks using a rich graphical user interface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDDDG" href="../TDDDG/toc.htm"><span class="italic">Oracle SQL Developer User&#39;s Guide</span></a></div>
</div>
<!-- class="sect1" -->
<a id="i451615"></a>
<div id="ADOBJ7193" class="sect1">
<h2 class="sect1">PL/SQL<a id="sthref330"></a><a id="sthref331"></a><a id="sthref332"></a></h2>
<p>Object types and subtypes can be used in PL/SQL procedures and functions in most places where built-in types can appear.</p>
<p>The parameters and variables of PL/SQL functions and procedures can be of object types.</p>
<p>You can implement the <a id="sthref333"></a><a id="sthref334"></a>methods associated with object types in PL/SQL. These methods (functions and procedures) reside on the server as part of a user&#39;s <a id="sthref335"></a>schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For a complete description of PL/SQL, see the <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a></div>
</div>
<!-- class="sect1" -->
<a id="i452824"></a>
<div id="ADOBJ7194" class="sect1">
<h2 class="sect1">Oracle Call Interface (OCI)</h2>
<p><a id="sthref336"></a>OCI is a set of C library functions that applications can use to manipulate data and schemas in an Oracle database. OCI supports both traditional 3GL and object-oriented techniques for database access, as explained in the following sections.</p>
<p>An important component of OCI is a set of calls to manage a workspace called the object cache. The <a id="sthref337"></a><a id="sthref338"></a>object cache is a memory block on the client side that allows programs to store entire objects and to navigate among them without additional round trips to the server.</p>
<p>The object cache is completely under the control and management of the application programs using it. The Oracle server has no access to it. The application programs using it must maintain data coherency with the server and protect the workspace against simultaneous conflicting access.</p>
<p>OCI provides functions to</p>
<ul>
<li>
<p>Access objects on the server using <a id="sthref339"></a>SQL.</p>
</li>
<li>
<p>Access, manipulate and manage objects in the object cache by traversing pointers or <code>REF</code>s.</p>
</li>
<li>
<p>Convert Oracle dates, strings and numbers to C data types.</p>
</li>
<li>
<p>Manage the size of the object cache&#39;s memory.</p>
</li>
</ul>
<p>OCI improves concurrency by <a id="sthref340"></a><a id="sthref341"></a>allowing individual objects to be locked. It improves performance by supporting complex object retrieval.</p>
<p>OCI developers can use the object type translator to generate the C data types corresponding to a Oracle object types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI100" href="../LNOCI/oci11obj.htm#LNOCI100"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for more information about using objects with OCI</div>
<a id="i452267"></a>
<div id="ADOBJ7195" class="sect2">
<h3 class="sect2">Associative Access in OCI Programs</h3>
<p><a id="sthref342"></a>Traditionally, 3GL programs manipulate data stored in a relational database by executing SQL statements and PL/SQL procedures. Data is usually manipulated on the server without incurring the cost of transporting the data to the client(s). OCI supports this associative access to objects by providing an API for executing SQL statements that manipulate object data. Specifically, OCI enables you to:</p>
<ul>
<li>
<p>Execute SQL statements that manipulate object data and object type schema information</p>
</li>
<li>
<p>Pass object instances, object references (<code>REF</code>s), and collections as input variables in SQL statements</p>
</li>
<li>
<p>Return object instances, <code>REF</code>s, and collections as output of SQL statement fetches</p>
</li>
<li>
<p>Describe the properties of SQL statements that return object instances, <code>REF</code>s, and collections</p>
</li>
<li>
<p>Describe and execute PL/SQL procedures or functions with object parameters or results</p>
</li>
<li>
<p>Synchronize object and relational functionality through enhanced commit and rollback functions</p>
</li>
</ul>
<p>See <a href="#i451483">&#34;Associative Access in Pro*C/C++&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i452831"></a>
<div id="ADOBJ7196" class="sect2">
<h3 class="sect2">Navigational Access in OCI Programs</h3>
<p><a id="sthref343"></a>In the object-oriented programming paradigm, applications model their real-world entities as a set of inter-related objects that form graphs of objects. The relationships between objects are implemented as references. An application processes objects by starting at some initial set of objects, using the references in these initial objects to traverse the remaining objects, and performing computations on each object. OCI provides an API for this style of access to objects, known as navigational access. Specifically, OCI enables you to:</p>
<ul>
<li>
<p>Cache objects in memory on the client machine</p>
</li>
<li>
<p>Dereference an object reference and pin the corresponding object in the object cache. The pinned object is transparently mapped in the host language representation.</p>
</li>
<li>
<p>Notify the cache when the pinned object is no longer needed</p>
</li>
<li>
<p>Fetch a graph of related objects from the database into the client cache in one call</p>
</li>
<li>
<p>Lock objects</p>
</li>
<li>
<p>Create, update, and delete objects in the cache</p>
</li>
<li>
<p>Flush changes made to objects in the client cache to the database</p>
</li>
</ul>
<p>See <a href="#i452849">&#34;Navigational Access in Pro*C/C++&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBFGEC"></a>
<div id="ADOBJ7197" class="sect2">
<h3 class="sect2">Object Cache</h3>
<p><a id="sthref344"></a>To support high-performance navigational access of objects, OCI runtime provides an object cache for caching objects in memory. The object cache supports references (<code>REF</code>s) to database objects in the object cache, the database objects can be identified (that is, pinned) through their references. Applications do not need to allocate or free memory when database objects are loaded into the cache, because the object cache provides transparent and efficient memory management for database objects.</p>
<p>Also, when database objects are loaded into the cache, they are transparently mapped into the host language representation. For example, in the C programming language, the database object is mapped to its corresponding C structure. The object cache maintains the association between the object copy in the cache and the corresponding database object. Upon transaction commit, changes made to the object copy in the cache are propagated automatically to the database.</p>
<p>The object cache maintains a fast look-up table for mapping <code>REF</code>s to objects. When an application dereferences a <code>REF</code> and the corresponding object is not yet cached in the object cache, the object cache automatically sends a request to the server to fetch the object from the database and load it into the object cache. Subsequent dereferences of the same <code>REF</code> are faster because they become local cache access and do not incur network round-trips. To notify the object cache that an application is accessing an object in the cache, the application pins the object; when it is finished with the object, it unpins it. The object cache maintains a pin count for each object in the cache. The count is incremented upon a pin call and decremented upon an unpin call. When the pin count goes to zero, it means the object is no longer needed by the application. The object cache uses a least-recently used (LRU) algorithm to manage the size of the cache. When the cache reaches the maximum size, the LRU algorithm frees candidate objects with a pin count of zero.</p>
</div>
<!-- class="sect2" -->
<div id="ADOBJ7198" class="sect2"><a id="sthref345"></a>
<h3 class="sect2">Building an OCI Program That Manipulates Objects</h3>
<p><a id="sthref346"></a>When you build an OCI program that manipulates objects, you must complete the following general steps:</p>
<ol>
<li>
<p>Define the object types that correspond to the application objects.</p>
</li>
<li>
<p>Execute the SQL DDL statements to populate the database with the necessary object types.</p>
</li>
<li>
<p>Represent the object types in the host language format.</p>
<p>For example, to manipulate instances of the object types in a C program, you must represent these types in the C host language format. You can do this by representing the object types as C structs. You can use a tool provided by Oracle called the Object Type Translator (OTT) to generate the C mapping of the object types. The OTT puts the equivalent C structs in header (*.h) files. You include these *.h files in the *.c files containing the C functions that implement the application.</p>
</li>
<li>
<p>Construct the application executable by compiling and linking the application&#39;s *.c files with the OCI library.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI100" href="../LNOCI/oci11obj.htm#LNOCI100"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for tips and techniques for using OCI program effectively with objects</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADOBJ7199" class="sect2"><a id="sthref347"></a>
<h3 class="sect2">Defining User-Defined Constructors in C</h3>
<p>When defining a user-defined constructor in C, you must specify <code>SELF</code> (and you may optionally specify <code>SELF</code> <code>TDO</code>) in the <code>PARAMETERS</code> clause. On entering the C function, the attributes of the C structure that the object maps to are all initialized to <code>NULL</code>. The value returned by the function is mapped to an instance of the user-defined type. <a href="#CCHDJCAC">Example 4-1</a> shows how to define a user-defined constructor in C.</p>
<div id="ADOBJ7200" class="example">
<p class="titleinexample"><a id="CCHDJCAC"></a>Example 4-1 Defining a User-Defined Constructor in C</p>
<pre>CREATE LIBRARY person_lib TRUSTED AS STATIC
/

CREATE TYPE person AS OBJECT
  (  name VARCHAR2(30),
     CONSTRUCTOR FUNCTION person(SELF IN OUT NOCOPY person, name VARCHAR2) 
         RETURN SELF AS RESULT);
/

CREATE TYPE BODY person IS
    CONSTRUCTOR FUNCTION person(SELF IN OUT NOCOPY person, name VARCHAR2) 
         RETURN SELF AS RESULT
    IS EXTERNAL NAME &#34;cons_person_typ&#34; LIBRARY person_lib WITH CONTEXT
    PARAMETERS(context, SELF, name OCIString, name INDICATOR sb4); 
END;/
</pre></div>
<!-- class="example" -->
<p>The <code>SELF</code> parameter is mapped like an IN parameter, so in the case of a <code>NOT</code> <code>FINAL</code> type, it is mapped to <code>(dvoid *)</code>, not <code>(dvoid **)</code>.</p>
<p>The return value&#39;s <code>TDO</code> must match the <code>TDO</code> of <code>SELF</code> and is therefore implicit. The return value can never be null, so the return indicator is implicit as well.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i447809"></a>
<div id="ADOBJ7201" class="sect1">
<h2 class="sect1">Pro*C/C++</h2>
<p>The Oracle Pro*C/C++ precompiler allows programmers to use user-defined data types in C and C++ programs.</p>
<p>Pro*C developers can use the Object Type Translator to map Oracle object types and collections into C data types to be used in the Pro*C application.</p>
<p>Pro*C provides compile time type checking of object types and collections and automatic type conversion from database types to C data types.</p>
<p>Pro*C includes an EXEC SQL syntax to create and destroy objects and offers two ways to access objects in the server:</p>
<ul>
<li>
<p><a id="sthref348"></a>SQL statements and PL/SQL functions or procedures embedded in Pro*C programs.</p>
</li>
<li>
<p>An interface to the <a id="sthref349"></a><a id="sthref350"></a><a id="sthref351"></a>object cache (described under <a href="#i452824">&#34;Oracle Call Interface (OCI)&#34;</a>), where objects can be accessed by traversing pointers, then modified and updated on the server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For a complete description of the Pro*C/C++ precompiler, see <a class="olink LNPCC" href="../LNPCC/toc.htm"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a></div>
</li>
</ul>
<a id="i451483"></a>
<div id="ADOBJ7202" class="sect2">
<h3 class="sect2">Associative Access in Pro*C/C++</h3>
<p><a id="sthref352"></a>For background information on associative access, see <a href="#i452267">&#34;Associative Access in OCI Programs&#34;</a>.</p>
<p>Pro*C/C++ offers the following capabilities for associative access to objects:</p>
<ul>
<li>
<p>Support for transient copies of objects allocated in the object cache</p>
</li>
<li>
<p>Support for transient copies of objects referenced as input host variables in embedded SQL <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements, or in the <code>WHERE</code> clause of a <code>SELECT</code> statement</p>
</li>
<li>
<p>Support for transient copies of objects referenced as output host variables in embedded SQL <code>SELECT</code> and <code>FETCH</code> statements</p>
</li>
<li>
<p>Support for ANSI dynamic SQL statements that reference object types through the <code>DESCRIBE</code> statement, to get the object&#39;s type and schema information</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i452849"></a>
<div id="ADOBJ7203" class="sect2">
<h3 class="sect2">Navigational Access in Pro*C/C++<a id="sthref353"></a></h3>
<p>For background information on navigational access, see <a href="#i452831">&#34;Navigational Access in OCI Programs&#34;</a>.</p>
<p>Pro*C/C++ offers the following capabilities to support a more object-oriented interface to objects:</p>
<ul>
<li>
<p>Support for dereferencing, pinning, and optionally locking an object in the object cache using an embedded SQL <code>OBJECT</code> <code>DEREF</code> statement</p>
</li>
<li>
<p>Allowing a Pro*C/C++ user to inform the object cache when an object has been updated or deleted, or when it is no longer needed, using embedded SQL <code>OBJECT</code> <code>UPDATE</code>, <code>OBJECT</code> <code>DELETE</code>, and <code>OBJECT</code> <code>RELEASE</code> statements</p>
</li>
<li>
<p>Support for creating new referenceable objects in the object cache using an embedded SQL <code>OBJECT</code> <code>CREATE</code> statement</p>
</li>
<li>
<p>Support for flushing changes made in the object cache to the server with an embedded SQL <code>OBJECT</code> <code>FLUSH</code> statement</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADOBJ7204" class="sect2"><a id="sthref354"></a>
<h3 class="sect2">Converting Between Oracle Types and C Types<a id="sthref355"></a></h3>
<p>The C representation for objects that is generated by the Oracle Type Translator (OTT) uses OCI types whose internal details are hidden, such as <code>OCIString</code> and <code>OCINumber</code> for scalar attributes. Collection types and object references are similarly represented using <code>OCITable</code>, <code>OCIArray</code>, and <code>OCIRef</code> types. While using these opaque types insulates you from changes to their internal formats, using such types in a C or C++ application is cumbersome. Pro*C/C++ provides the following ease-of-use enhancements to simplify use of OCI types in C and C++ applications:</p>
<ul>
<li>
<p>Object attributes can be retrieved and implicitly converted to C types with the embedded SQL <code>OBJECT</code> <code>GET</code> statement.</p>
</li>
<li>
<p>Object attributes can be set and converted from C types with the embedded SQL <code>OBJECT</code> <code>SET</code> statement.</p>
</li>
<li>
<p>Collections can be mapped to a host array with the embedded SQL <code>COLLECTION</code> <code>GET</code> statement. Furthermore, if the collection is comprised of scalar types, then the OCI types can be implicitly converted to a compatible C type.</p>
</li>
<li>
<p>Host arrays can be used to update the elements of a collection with the embedded SQL <code>COLLECTION</code> <code>SET</code> statement. As with the <code>COLLECTION</code> <code>GET</code> statement, if the collection is comprised of scalar types, C types are implicitly converted to OCI types.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i452642"></a>
<div id="ADOBJ7205" class="sect2">
<h3 class="sect2">Oracle Type Translator (OTT)<a id="sthref356"></a><a id="sthref357"></a><a id="sthref358"></a></h3>
<p>The Oracle Type Translator (OTT) is a program that automatically generates C language structure declarations corresponding to object types. OTT makes it easier to use the Pro*C precompiler and the OCI server access package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For complete information about OTT, see <a class="olink LNOCI140" href="../LNOCI/oci15ott.htm#LNOCI140"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> and <a class="olink LNPCC019" href="../LNPCC/pc_19ott.htm#LNPCC019"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a>.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i457214"></a>
<div id="ADOBJ7206" class="sect1">
<h2 class="sect1">Oracle C++ Call Interface (OCCI)<a id="sthref359"></a><a id="sthref360"></a></h2>
<p>The Oracle C++ Call Interface (OCCI) is a C++ API that enables you to use the object-oriented features, native classes, and methods of the C++ programing language to access the Oracle database.</p>
<p>The OCCI interface is modeled on the JDBC interface and, like the JDBC interface, is easy to use. OCCI itself is built on top of OCI and provides the power and performance of OCI using an object-oriented paradigm.</p>
<p>OCI is a C API to the Oracle database. It supports the entire Oracle feature set and provides efficient access to both relational and object data, but it can be challenging to use&mdash;particularly if you want to work with complex, object data types. Object types are not natively supported in C, and simulating them in C is not easy. OCCI addresses this by providing a simpler, object-oriented interface to the functionality of OCI. It does this by defining a set of wrappers for OCI. By working with these higher-level abstractions, developers can avail themselves of the underlying power of OCI to manipulate objects in the server through an object-oriented interface that is significantly easier to program.</p>
<p>The Oracle C++ Call Interface, OCCI, can be roughly divided into three sets of functionalities, namely:</p>
<ul>
<li>
<p>Associative relational access</p>
</li>
<li>
<p>Associative object access</p>
</li>
<li>
<p>Navigational access</p>
</li>
</ul>
<div id="ADOBJ7207" class="sect2"><a id="sthref361"></a>
<h3 class="sect2">OCCI Associative Relational and Object Interfaces</h3>
<p>The associative relational API and object classes provide SQL access to the database. Through these interfaces, SQL is executed on the server to create, manipulate, and fetch object or relational data. Applications can access any data type on the server, including the following:</p>
<ul>
<li>
<p>Large objects</p>
</li>
<li>
<p>Objects/Structured types</p>
</li>
<li>
<p>Arrays</p>
</li>
<li>
<p>References</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADOBJ7208" class="sect2"><a id="sthref362"></a>
<h3 class="sect2">The OCCI Navigational Interface</h3>
<p>The navigational interface is a C++ interface that lets you seamlessly access and modify object-relational data in the form of C++ objects without using SQL. The C++ objects are transparently accessed and stored in the database as needed.</p>
<p>With the OCCI navigational interface, you can retrieve an object and navigate through references from that object to other objects. Server objects are materialized as C++ class instances in the application cache.</p>
<p>An application can use OCCI object navigational calls to perform the following functions on the server&#39;s objects:</p>
<ul>
<li>
<p>Create, access, lock, delete, and flush objects</p>
</li>
<li>
<p>Get references to the objects and navigate through them</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNCPP" href="../LNCPP/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer&#39;s Guide</span></a> for a complete account of how to build applications with the Oracle C++ API</div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i452304"></a>
<div id="ADOBJ00301" class="sect1">
<h2 class="sect1">Java Tools for Accessing Oracle Objects<a id="sthref363"></a><a id="sthref364"></a><a id="sthref365"></a><a id="sthref366"></a></h2>
<p>Java has emerged as a powerful, modern object-oriented language that provides developers with a simple, efficient, portable, and safe application development platform. Oracle provides various ways to integrate Oracle object features with Java. These interfaces enable you both to access SQL data from Java and to provide persistent database storage for Java objects.</p>
<ul>
<li>
<p><a href="#CHDDIJAE">JDBC Access to Oracle Object Data</a></p>
</li>
<li>
<p><a href="#i451975">SQLJ Access to Oracle Object Data</a></p>
</li>
<li>
<p><a href="#CHDFBFGJ">Choosing a Data Mapping Strategy</a></p>
</li>
<li>
<p><a href="#CHDBCIFA">Using JPublisher to Create Java Classes for JDBC and SQLJ Programs</a></p>
</li>
<li>
<p><a href="#CHDGGAIF">Java Object Storage</a></p>
</li>
<li>
<p><a href="#CHDBDJHG">Defining User-Defined Constructors in Java</a></p>
</li>
<li>
<p><a href="#CHDDHGAG">JDeveloper</a></p>
</li>
</ul>
<a id="CHDDIJAE"></a>
<div id="ADOBJ7214" class="sect2">
<h3 class="sect2">JDBC Access to Oracle Object Data</h3>
<p><a id="sthref367"></a><a id="sthref368"></a>JDBC (Java Database Connectivity) is a set of Java interfaces to the Oracle server. Oracle provides tight integration between objects and JDBC. You can map SQL types to Java classes with considerable flexibility.</p>
<p>Oracle JDBC:</p>
<ul>
<li>
<p>Allows access to objects and collection types (defined in the database) in Java programs through dynamic SQL.</p>
</li>
<li>
<p>Translates types defined in the database into Java classes through default or customizable mappings.</p>
</li>
</ul>
<p>Version 2.0 of the JDBC specification supports object-relational constructs such as user-defined (object) types. JDBC materializes Oracle objects as instances of particular Java classes. Using JDBC to access Oracle objects involves creating the Java classes for the Oracle objects and populating these classes. You can either:</p>
<ul>
<li>
<p>Let JDBC materialize the object as a <code>STRUCT</code>. In this case, JDBC creates the classes for the attributes and populates them for you.</p>
</li>
<li>
<p>Manually specify the mappings between Oracle objects and Java classes; that is, customize your Java classes for object data. The driver then populates the customized Java classes that you specify, which imposes a set of constraints on the Java classes. To satisfy these constraints, you can choose to define your classes according to either the <code>SQLData</code> interface or the <code>ORAData</code> interface.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for complete information about JDBC</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i451975"></a>
<div id="ADOBJ7215" class="sect2">
<h3 class="sect2">SQLJ Access to Oracle Object Data</h3>
<p><a id="sthref369"></a><a id="sthref370"></a>SQLJ provides access to server objects using SQL statements embedded in the Java code:</p>
<ul>
<li>
<p>You can use user-defined types in Java programs.</p>
</li>
<li>
<p>You can use JPublisher to map Oracle object and collection types into Java classes to be used in the application.</p>
</li>
<li>
<p>The object types and collections in the SQL statements are checked at compile time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JSQLJ" href="../JSQLJ/toc.htm">Oracle Database SQLJ Developer&#39;s Guide</a> for complete information about SQLJ</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDFBFGJ"></a>
<div id="ADOBJ7216" class="sect2">
<h3 class="sect2">Choosing a Data Mapping Strategy</h3>
<p><a id="sthref371"></a>Oracle SQLJ supports either strongly typed or weakly typed Java representations of object types, reference types (<code>REF</code>s), and collection types (varrays and nested tables) to be used in iterators or host expressions.</p>
<p>Strongly typed representations use a <span class="italic">custom Java class</span> that corresponds to a particular object type, <code>REF</code> type, or collection type and must implement the interface <code>oracle</code>.<code>sql</code>.<code>ORAData</code>. The Oracle JPublisher utility can automatically generate such custom Java classes.</p>
<p>Weakly typed representations use the class <code>oracle</code>.<code>sql</code>.<code>STRUCT</code> (for objects), <code>oracle</code>.<code>sql</code>.<code>REF</code> (for references), or <code>oracle</code>.<code>sql</code>.<code>ARRAY</code> (for collections).</p>
</div>
<!-- class="sect2" -->
<div id="ADOBJ7642" class="sect2"><a id="sthref372"></a>
<h3 class="sect2">JPublisher</h3>
<p>Oracle JPublisher is a utility that generates Java classes to represent the following user-defined database entities in your Java program:</p>
<ul>
<li>
<p>Database object types</p>
</li>
<li>
<p>Database reference (<code>REF</code>) types</p>
</li>
<li>
<p>Database collection types (varrays or nested tables)</p>
</li>
<li>
<p>PL/SQL packages</p>
</li>
</ul>
<p>JPublisher enables you to specify and customize the mapping of database object types, reference types, and collection types (varrays or nested tables) to Java classes, in a strongly typed paradigm.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink JJPUB" href="../JJPUB/toc.htm"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a></div>
<a id="CHDBCIFA"></a>
<div id="ADOBJ7217" class="sect3">
<h4 class="sect3">Using JPublisher to Create Java Classes for JDBC and SQLJ Programs<a id="sthref373"></a><a id="sthref374"></a></h4>
<p>Oracle lets you map Oracle object types, reference types, and collection types to Java classes and preserve all the benefits of strong typing. You can:</p>
<ul>
<li>
<p>Use JPublisher to automatically generate custom Java classes and use those classes without any change.</p>
</li>
<li>
<p>Subclass the classes produced by JPublisher to create your own specialized Java classes.</p>
</li>
<li>
<p>Manually code custom Java classes without using JPublisher if the classes meet the requirements stated in <a class="olink JJPUB02220" href="../JJPUB/intro.htm#JJPUB02220"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a>.</p>
</li>
</ul>
<p>We recommend that you use JPublisher and subclass when the generated classes do not do everything you need.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7218" class="sect3"><a id="sthref375"></a>
<h4 class="sect3">What JPublisher Produces for a User-Defined Object Type</h4>
<p>When you run JPublisher for a user-defined object type, it automatically creates the following:</p>
<ul>
<li>
<p>A custom object class to act as a type definition to correspond to your Oracle object type</p>
<p>This class includes getter and setter methods for each attribute. The method names are of the form <code>getXxx()</code> and <code>setXxx()</code> for attribute <code>xxx</code>.</p>
<p>Also, you can optionally instruct JPublisher to generate wrapper methods in your class that invoke the associated Oracle object methods executing in the server.</p>
</li>
<li>
<p>A related custom reference class for object references to your Oracle object type</p>
<p>This class includes a <code>getValue()</code> method that returns an instance of your custom object class, and a <code>setValue()</code> method that updates an object value in the database, taking as input an instance of the custom object class.</p>
</li>
</ul>
<p>When you run JPublisher for a user-defined collection type, it automatically creates the following:</p>
<ul>
<li>
<p>A custom collection class to act as a type definition to correspond to your Oracle collection type</p>
<p>This class includes overloaded <code>getArray()</code> and <code>setArray()</code> methods to retrieve or update a collection as a whole, a <code>getElement()</code> method and <code>setElement()</code> method to retrieve or update individual elements of a collection, and additional utility methods.</p>
</li>
</ul>
<p>JPublisher-produced custom Java classes in any of these categories implement the <code>ORAData</code> interface and the <code>getFactory()</code> method.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <a class="olink JJPUB" href="../JJPUB/toc.htm"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a> for more information about using JPublisher.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDGGAIF"></a>
<div id="ADOBJ7219" class="sect2">
<h3 class="sect2">Java Object Storage</h3>
<p>JPublisher enables you to construct Java classes that map to existing SQL types. You can then access the SQL types from a Java application using JDBC.</p>
<p>You can also go in the other direction. That is, you can create SQL types that map to existing Java classes. This capability enables you to provide persistent <a id="sthref376"></a>storage for Java objects. Such SQL types are called SQL types of Language Java, or <a id="sthref377"></a>SQLJ object types. They can be used as the type of an object, an attribute, a column, or a row in an object table. You can navigationally access objects of such types&mdash;Java objects&mdash;through either object references or foreign keys, and you can query and manipulate such objects from SQL.</p>
<p>You create SQLJ types with a <code>CREATE TYPE</code> statement as you do other user-defined SQL types. For SQLJ types, two special elements are added to the <code>CREATE</code> <code>TYPE</code> statement:</p>
<ul>
<li>
<p>An <code><a id="sthref378"></a>EXTERNAL</code> <code>NAME</code> phrase, used to identify the Java counterpart for each SQLJ attribute and method and the Java class corresponding to the SQLJ type itself</p>
</li>
<li>
<p>A <code><a id="sthref379"></a>USING</code> clause, to specify how the SQLJ type is to be represented to the server. The <code>USING</code> clause specifies the interface used to retrieve a SQLJ type and the kind of storage.</p>
</li>
</ul>
<p>For example:</p>
<div id="ADOBJ7220" class="example">
<p class="titleinexample"><a id="sthref380"></a>Example 4-2 Mapping SQL Types to Java Classes</p>
<pre>-- Mapping SQL Types to Java Classes example, not sample schema
CREATE TYPE full_address AS OBJECT (a NUMBER);
/

CREATE OR REPLACE TYPE person_t AS OBJECT
  EXTERNAL NAME &#39;Person&#39; LANGUAGE JAVA
  USING SQLData (
    ss_no NUMBER (9) EXTERNAL NAME &#39;socialSecurityNo&#39;,
    name varchar(100) EXTERNAL NAME &#39;name&#39;,
    address full_address EXTERNAL NAME &#39;addrs&#39;,
    birth_date date EXTERNAL NAME &#39;birthDate&#39;,
    MEMBER FUNCTION age  RETURN NUMBER EXTERNAL NAME &#39;age () return int&#39;,
    MEMBER FUNCTION addressf RETURN full_address
      EXTERNAL NAME &#39;get_address () return long_address&#39;,
    STATIC function createf RETURN person_t EXTERNAL NAME &#39;create () 
         return Person&#39;,
    STATIC function createf (name VARCHAR2, addrs full_address, bDate DATE)
      RETURN person_t EXTERNAL NAME &#39;create (java.lang.String, Long_address,
      oracle.sql.date) return Person&#39;,
    ORDER member FUNCTION compare (in_person person_t) RETURN NUMBER
      EXTERNAL NAME &#39;isSame (Person) return int&#39;)
/
</pre></div>
<!-- class="example" -->
<p>SQLJ types use the corresponding Java class as the body of the type; you do not specify a type body in SQL to contain implementations of the type&#39;s methods as you do with ordinary object types.</p>
<div id="ADOBJ7221" class="sect3"><a id="sthref381"></a>
<h4 class="sect3">Representing SQLJ Types to the Server</h4>
<p>How a SQLJ type is represented to the server and stored depends on the interfaces implemented by the corresponding Java class. Currently, Oracle supports a representation of SQLJ types only for Java classes that implement a <code>SQLData</code> or <code>ORAData</code> interface. These are represented to the server and are accessible through SQL. A representation for Java classes that implement the <code>java.io.Serializable</code> interface is not currently supported.</p>
<p>In a SQL representation, the attributes of the type are stored in columns like attributes of ordinary object types. With this representation, all attributes are public because objects are accessed and manipulated through SQL statements, but you can use triggers and constraints to ensure the consistency of the object data.</p>
<p>For a SQL representation, the <code>USING</code> clause must specify either <code><a id="sthref382"></a><a id="sthref383"></a>SQLData</code> or <code>ORAData</code>, and the corresponding Java class must implement one of those interfaces. The <code>EXTERNAL</code> <code>NAME</code> clause for attributes is optional.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7222" class="sect3"><a id="sthref384"></a>
<h4 class="sect3">Creating SQLJ Object Types</h4>
<p>The SQL statements to create <a id="sthref385"></a>SQLJ types and specify their mappings to Java are placed in a file called a <span class="bold">deployment descriptor</span>. Related SQL constraints and privileges are also specified in this file. The types are created when the file is executed.</p>
<p>Below is an overview of the process of creating SQL versions of Java types/classes:</p>
<ol>
<li>
<p>Design the Java types.</p>
</li>
<li>
<p>Generate the Java classes.</p>
</li>
<li>
<p>Create the SQLJ object type statements.</p>
</li>
<li>
<p>Construct the JAR file. This is a single file that contains all the classes needed.</p>
</li>
<li>
<p>Using the <code>loadjava</code> utility, install the Java classes defined in the JAR file.</p>
</li>
<li>
<p>Execute the statements to create the SQLJ object types.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7223" class="sect3"><a id="sthref386"></a>
<h4 class="sect3">Additional Notes About Mapping</h4>
<p>The following are additional notes to consider when mapping of Java classes to SQL types:</p>
<ul>
<li>
<p>You can map a <a id="sthref387"></a>SQLJ static function to a user-defined constructor in the Java class. The return value of this function is of the user-defined type in which the function is locally defined.</p>
</li>
<li>
<p>Java static variables are mapped to SQLJ static methods that return the value of the corresponding static variable identified by <code>EXTERNAL</code> <code>NAME</code>. The <code>EXTERNAL</code> <code>NAME</code> clause for an attribute is optional with a <code>SQLData</code> or <code>ORAData</code> representation.</p>
</li>
<li>
<p>Every attribute in a SQLJ type of a SQL representation must map to a Java field, but not every Java field must be mapped to a corresponding SQLJ attribute: you can omit Java fields from the mapping.</p>
</li>
<li>
<p>You can omit classes: you can map a SQLJ type to a non-root class in a Java class hierarchy without also mapping SQLJ types to the root class and intervening superclasses. Doing this enables you to hide the superclasses while still including attributes and methods inherited from them.</p>
<p>However, you must preserve the structural correspondence between nodes in a class hierarchy and their counterparts in a SQLJ type hierarchy. In other words, for two Java classes <code>j_A</code> and <code>j_B</code> that are related through inheritance and are mapped to two SQL types <code>s_A</code> and <code>s_B</code>, respectively, there must be exactly one corresponding node on the inheritance path from <code>s_A</code> to <code>s_B</code> for each node on the inheritance path from <code>j_A</code> to <code>j_B</code>.</p>
</li>
<li>
<p>You can map a Java class to multiple SQLJ types as long as you do not violate the restriction in the preceding paragraph. In other words, no two SQLJ types mapped to the same Java class can have a common supertype ancestor.</p>
</li>
<li>
<p>If all Java classes are not mapped to SQLJ types, it is possible that an attribute of a SQLJ object type might be set to an object of an unmapped Java class. Specifically, to a class occurring above or below the class to which the attribute is mapped in an inheritance hierarchy. If the object&#39;s class is a superclass of the attribute&#39;s type/class, an error is raised. If it is a subclass of the attribute&#39;s type/class, the object is mapped to the most specific type in its hierarchy for which a SQL mapping exists</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <a class="olink JJPUB" href="../JJPUB/toc.htm"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a> for JPublisher examples of object mapping</div>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7224" class="sect3"><a id="sthref388"></a>
<h4 class="sect3">Evolving SQLJ Types</h4>
<p>The <code><a id="sthref389"></a><a id="sthref390"></a>ALTER</code> <code>TYPE</code> statement enables you to evolve a type by, for example, adding or dropping attributes or methods.</p>
<p>When a SQLJ type is evolved, an additional validation is performed to check the mapping between the class and the type. If the class and the evolved type match, the type is marked valid. Otherwise, the type is marked as pending validation.</p>
<p>Being marked as pending validation is not the same as being marked invalid. A type that is pending validation can still be manipulated with <code>ALTER</code> <code>TYPE</code> and <code>GRANT</code> statements, for example.</p>
<p>If a type that has a SQL representation is marked as pending evaluation, you can still access tables of that type using any DML or SELECT statement that does not require a method invocation.</p>
<p>You cannot, however, execute DML or <code>SELECT</code> statements on tables of a type that has a serializable representation and has been marked as pending validation. Data of a serializable type can be accessed only navigationally, through method invocations. These are not possible with a type that is pending validation. However, you can still re-evolve the type until it passes validation.</p>
<p>See <a href="adobjadv.htm#i1006726">&#34;Type Evolution&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7225" class="sect3"><a id="sthref391"></a>
<h4 class="sect3">Constraints</h4>
<p>For SQLJ types having a SQL representation, the same constraints can be defined as for ordinary object types.</p>
<p>Constraints are defined on tables, not on types, and are defined at the column level. The following constraints are supported for SQLJ types having a SQL representation:</p>
<ul>
<li>
<p>Unique constraints</p>
</li>
<li>
<p>Primary Key</p>
</li>
<li>
<p>Check constraints</p>
</li>
<li>
<p><code>NOT NULL</code> constraints on attributes</p>
</li>
<li>
<p>Referential constraints</p>
</li>
</ul>
<p>The <code>IS</code> <code>OF</code> <code>TYPE</code> constraint on column substitutability is supported, too, for SQLJ types having a SQL representation. See <a href="adobjbas.htm#i463421">&#34;Constraining Substitutability&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7226" class="sect3"><a id="sthref392"></a>
<h4 class="sect3">Querying SQLJ Objects</h4>
<p>SQLJ types can be queried just like ordinary SQL object types. Methods called in a <code>SELECT</code> statement must not attempt to change attribute values.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7227" class="sect3"><a id="sthref393"></a>
<h4 class="sect3">Inserting Java Objects</h4>
<p>Inserting a row in a table containing a column of a SQLJ type requires a call to the type&#39;s constructor function to create a Java object of that type.</p>
<p>The implicit, system-generated constructor can be used, or a static function can be defined that maps to a user-defined constructor in the Java class.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7228" class="sect3"><a id="sthref394"></a>
<h4 class="sect3">Updating SQLJ Objects</h4>
<p>SQLJ objects can be updated either by using an <code>UPDATE</code> statement to modify the value of one or more attributes, or by invoking a method that updates the attributes and returns <code>SELF</code>&mdash;that is, returns the object itself with the changes made.</p>
<p>For example, suppose that <code>raise()</code> is a member function that increments the <code>salary</code> field/attribute by a specified amount and returns <code>SELF</code>. The following statement gives every employee in the object table <code>employee_objtab</code> a raise of <code>1000</code>:</p>
<p><code>UPDATE employee_objtab SET c=c.raise(1000);</code></p>
<p>A column of a SQLJ type can be set to <code>NULL</code> or to another column using the same syntax as for ordinary object types. For example, the following statement assigns column <code>d</code> to column <code>c</code>:</p>
<p><code>UPDATE employee_reltab SET c=d;</code></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDBDJHG"></a>
<div id="ADOBJ7229" class="sect2">
<h3 class="sect2">Defining User-Defined Constructors in Java</h3>
<p>When you implement a user-defined constructor in Java, the string supplied as the implementing routine must correspond to a static function. For the return type of the function, specify the Java type mapped to the SQL type.</p>
<p><a href="#CCHIEBCI">Example 4-3</a> is an example of a type declaration that involves a user-defined constructor implemented in Java.</p>
<div id="ADOBJ7230" class="example">
<p class="titleinexample"><a id="CCHIEBCI"></a>Example 4-3 Defining a User-Defined Constructor in Java</p>
<pre>-- Defining a User-Defined Constructor in Java example, not sample schema
CREATE TYPE person1_typ AS OBJECT 
 EXTERNAL NAME &#39;pkg1.J_Person&#39; LANGUAGE JAVA 
 USING SQLData( 
  name VARCHAR2(30), 
  age NUMBER,
  CONSTRUCTOR FUNCTION person1_typ(SELF IN OUT NOCOPY person1_typ, name VARCHAR2,
                                   age NUMBER) RETURN SELF AS RESULT
  AS LANGUAGE JAVA 
    NAME &#39;pkg1.J_Person.J_Person(java.lang.String, int) return J_Person&#39;)
/
</pre></div>
<!-- class="example" -->
<pre>DROP TYPE person1_typ FORCE;
DROP TYPE person_t FORCE;
DROP TYPE full_address FORCE;
DROP TYPE person FORCE;
DROP LIBRARY person_lib;
SPOOL OFF
COMMIT;
</pre></div>
<!-- class="sect2" -->
<a id="CHDDHGAG"></a>
<div id="ADOBJ7643" class="sect2">
<h3 class="sect2">JDeveloper</h3>
<p>Oracle JDeveloper is a full-featured, cross-platform, integrated development environment for creating multitier Java applications that is well integrated with Oracle Application Server and Database.</p>
<p>Oracle JDeveloper enables you to develop, debug, and deploy Java client applications, dynamic HTML applications, web and application server components, JavaBean components, and database stored procedures based on industry-standard models.</p>
<p>JDeveloper is also the integrated development environment for ADF and TopLink.</p>
<div id="ADOBJ7644" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref395"></a>
<h4 class="sect3">Application Development Framework (ADF)</h4>
<p>ADF is a framework for building scalable enterprise Java EE applications. Developers can use ADF to build applications where the application data is persisted to Oracle Object tables as well as other schema objects.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7645" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref396"></a>
<h4 class="sect3">TopLink</h4>
<p>TopLink is a framework for mapping Java objects to a variety of persistence technologies, including databases, and provides facilities to build applications leveraging Oracle Objects.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i457671"></a>
<div id="ADOBJ7231" class="sect1">
<h2 class="sect1">XML<a id="sthref397"></a><a id="sthref398"></a></h2>
<p><code>XMLType</code> views wrap existing relational and object-relational data in XML formats. These views are similar to object views. Each row of an <code>XMLType</code> view corresponds to an <code>XMLType</code> instance. The object identifier for uniquely identifying each row in the view can be created using an expression such as <code>extract()</code> on the <code>XMLType</code> value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADXDB5759" href="../ADXDB/xdb27aq.htm#ADXDB5759"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for information and examples on using XML with Oracle objects</div>
</div>
<!-- class="sect1" -->
<a id="i1003861"></a>
<div id="ADOBJ00407" class="sect1">
<h2 class="sect1">Utilities Providing Support for Objects<a id="sthref399"></a><a id="sthref400"></a></h2>
<p>This section describes several Oracle utilities that provide support for Oracle objects.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CHDCGCCG">Import/Export of Object Types</a></p>
</li>
<li>
<p><a href="#CHDEGJJE">SQL*Loader</a></p>
</li>
</ul>
<a id="CHDCGCCG"></a>
<div id="ADOBJ7384" class="sect2"><a id="i1003852"></a>
<h3 class="sect2">Import/Export of Object Types<a id="sthref401"></a><a id="sthref402"></a><a id="sthref403"></a><a id="sthref404"></a><a id="sthref405"></a><a id="sthref406"></a><a id="sthref407"></a><a id="sthref408"></a><a id="sthref409"></a></h3>
<p>Export and Import utilities move data into and out of Oracle databases. They also back up or archive data and aid migration to different releases of the Oracle RDBMS.</p>
<p>Export and Import support object types. Export writes object type definitions and all of the associated data to the dump file. Import then re-creates these items from the dump file.</p>
<p>When you import object tables, by default, <code>OID</code>s are preserved.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL200" href="../SUTIL/GUID-5F7380CE-A619-4042-8D13-1F7DDE429991.htm#SUTIL200"><span class="italic">Oracle Database Utilities</span></a> for instructions on how to use the Import and Export utilities</div>
<div id="ADOBJ7385" class="sect3"><a id="sthref410"></a>
<h4 class="sect3">Types</h4>
<p>The definition statements for derived types are exported. On an Import, a subtype may be created before the supertype definition has been imported. In this case, the subtype is created with compilation errors, which may be ignored. The type is revalidated after its supertype is created.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7386" class="sect3"><a id="sthref411"></a>
<h4 class="sect3">Object View Hierarchies</h4>
<p>View definitions for all views belonging to a view hierarchy are exported.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEGJJE"></a>
<div id="ADOBJ7387" class="sect2">
<h3 class="sect2">SQL*Loader</h3>
<p>The SQL*Loader utility moves data from external files into tables in an Oracle database. The files may contain data consisting of basic scalar data types, such as <code>INTEGER</code>, <code>CHAR</code>, or <code>DATE</code>, as well as complex user-defined data types such as row and column objects (including objects that have object, collection, or <code>REF</code> attributes), collections, and LOBs. Currently, SQL*Loader supports single-level collections only: you cannot yet use SQL*Loader to load multilevel collections, that is, collections whose elements are, or contain, other collections. SQL*Loader uses control files, which contain SQL*Loader data definition language (DDL) statements, to describe the format, content, and location of the datafiles.</p>
<p>SQL*Loader provides two approaches to loading data:</p>
<ul>
<li>
<p><span class="bold">Conventional path loading</span>, which uses the <code>SQL</code> <code>INSERT</code> statement and a bind array buffer to load data into database tables</p>
</li>
<li>
<p><span class="bold">Direct path loading</span>, which uses the Direct Path Load API to write data blocks directly to the database on behalf of the SQL*Loader client.</p>
<p>Direct path loading does not use a SQL interface and thus avoids the overhead of processing the associated SQL statements. Consequently, direct path loading generally provides much better performance than conventional path loading.</p>
</li>
</ul>
<p>Either approach can be used to load data of supported object and collection data types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL3311" href="../SUTIL/GUID-8D037494-07FA-4226-B507-E1B2ED10C144.htm#SUTIL3311"><span class="italic">Oracle Database Utilities</span></a> for instructions on how to use SQL*Loader</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3980">
<tr>
<td class="cellalignment3987">
<table class="cellalignment3985">
<tr>
<td class="cellalignment3984"><a href="adobjplsql.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3984"><a href="adobjcol.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3989">
<table class="cellalignment3983">
<tr>
<td class="cellalignment3984"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3984"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3984"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3984"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3984"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3984"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>