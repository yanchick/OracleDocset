<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-742"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Support%20for%20Collection%20Data%20Types"></a><title>Support for Collection Data Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-08-06T13:19:6Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Object-Relational Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53277-02"/>
<meta name="dcterms.isVersionOf" content="ADOBJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adobjenv.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adobjvew.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53277-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/16</span> <!-- End Header -->
<div id="ADOBJ00204" class="chapter"><a id="CHDBDAHH"></a>
<h1 class="chapter"><span class="secnum">5</span> Support for Collection Data Types</h1>
<p>This chapter explains how to create and manage these collection types: varrays and nested tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS005" href="../LNPLS/composites.htm#LNPLS005"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for a complete introduction to collections</div>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i467558">Collection Data Types</a></p>
</li>
<li>
<p><a href="#CHDGJHEE">Multilevel Collection Types</a></p>
</li>
<li>
<p><a href="#CIHJIIAB">Operations on Collection Data Types</a></p>
</li>
<li>
<p><a href="#i1005821">Partitioning Tables That Contain Oracle Objects</a></p>
</li>
</ul>
<a id="i467558"></a>
<div id="ADOBJ00210" class="sect1">
<h2 class="sect1">Collection Data Types<a id="sthref412"></a></h2>
<p>Oracle supports the varray and nested table collection data types.</p>
<ul>
<li>
<p>A varray is an ordered collection of elements.</p>
</li>
<li>
<p>A nested table can have any number of elements and is unordered.</p>
</li>
</ul>
<p>If you need to store only a fixed number of items, or loop through the elements in order, or often need to retrieve and manipulate the entire collection as a value, then use a varray.</p>
<p>If you need to run efficient queries on a collection, handle arbitrary numbers of elements, or perform mass insert, update, or delete operations, then use a nested table. See <a href="adobjdes.htm#i453969">&#34;Design Considerations for Collections&#34;</a>.</p>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CHDJJBJI">Creating a Collection Type</a></p>
</li>
<li>
<p><a href="#CHDJJBJI">Creating a Collection Type</a></p>
</li>
<li>
<p><a href="#CHDDGBEJ">Creating an Instance of a VARRAY or Nested Table</a></p>
</li>
<li>
<p><a href="#CHDHBADC">Constructor Methods for Collections</a></p>
</li>
<li>
<p><a href="#i468598">Varrays</a></p>
</li>
<li>
<p><a href="#i458789">Nested Tables</a></p>
</li>
<li>
<p><a href="#i471399">Increasing the Size and Precision of VARRAY and Nested Table Elements</a></p>
</li>
<li>
<p><a href="#i471403">Increasing VARRAY Limit Size</a></p>
</li>
<li>
<p><a href="#CHDGDEBD">Creating a Varray Containing LOB References</a></p>
</li>
</ul>
<a id="CHDJJBJI"></a>
<div id="ADOBJ7232" class="sect2">
<h3 class="sect2">Creating a Collection Type</h3>
<p>This section shows the creation of a nested table type. Creation of a <code>VARRAY</code> type is demonstrated in <a href="#i468598">&#34;Varrays&#34;</a>.</p>
<p><a href="#CHDBCCHJ">Example 5-1</a> demonstrates creating a <code>person_typ</code> object and a <code>people_typ</code> as a nested table type of <code>person_typ</code> objects, which are both used in subsequent examples in this chapter.</p>
<div id="ADOBJ7233" class="example">
<p class="titleinexample"><a id="CHDBCCHJ"></a>Example 5-1 CREATE TYPE person_typ for Subsequent Examples</p>
<pre>CREATE TYPE <span class="bold">person_typ</span> AS OBJECT (
  idno           NUMBER,
  name           VARCHAR2(30),
  phone          VARCHAR2(20),
  MAP MEMBER FUNCTION get_idno RETURN NUMBER, 
  MEMBER PROCEDURE display_details ( SELF IN OUT NOCOPY person_typ ) );
/

CREATE TYPE BODY person_typ AS
  MAP MEMBER FUNCTION get_idno RETURN NUMBER IS
  BEGIN
    RETURN idno;
  END;
  MEMBER PROCEDURE display_details ( SELF IN OUT NOCOPY person_typ ) IS
  BEGIN
    -- use the put_line procedure of the DBMS_OUTPUT package to display details
    DBMS_OUTPUT.put_line(TO_CHAR(idno) || &#39; - &#39;  || name || &#39; - &#39;  || phone);
  END;
END;
/

CREATE TYPE <span class="bold">people_typ</span> AS TABLE OF <span class="bold">person_typ</span>; -- nested table type
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDDGBEJ"></a>
<div id="ADOBJ7234" class="sect2">
<h3 class="sect2">Creating an Instance of a VARRAY or Nested Table<a id="sthref413"></a><a id="sthref414"></a><a id="sthref415"></a></h3>
<p>You create an instance of a collection type in the same way that you create an instance of any other object type, namely, by calling the constructor method of the type. The name of a constructor method is simply the name of the type. You specify the elements of the collection as a comma-delimited list of arguments to the method, for example.</p>
<pre>( person_typ(1, &#39;John Smith&#39;, &#39;1-650-555-0135&#39;),
</pre>
<p>Calling a constructor method with an empty list creates an empty collection of that type. Note that an empty collection is an actual collection that happens to be empty; it is not the same as a null collection. See <a href="adobjdes.htm#i448939">&#34;Design Considerations for Nested Tables&#34;</a> for more information on using nested tables.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHBADC"></a>
<div id="ADOBJ7235" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Constructor Methods for Collections<a id="sthref416"></a><a id="sthref417"></a><a id="sthref418"></a><a id="sthref419"></a><a id="sthref420"></a></h3>
<p>You can use a constructor method in a SQL statement to insert values into a nested table.</p>
<p><a href="#BHBBDFFH">Example 5-2</a> first creates a table that contains an instance of the nested table type <code>people_typ</code>, named <code>people_column</code>, and then shows how to use the constructor method in a SQL statement to insert values into <code>people_typ</code>. This example uses a literal invocation of the constructor method.</p>
<div id="ADOBJ7236" class="example">
<p class="titleinexample"><a id="BHBBDFFH"></a>Example 5-2 Using the Constructor Method to Insert Values into a Nested Table</p>
<pre>-- Requires Ex. 5-1
CREATE TABLE people_tab (
    group_no NUMBER,
    <span class="bold">people_column people_typ</span> )  -- an instance of nested table
    NESTED TABLE people_column STORE AS people_column_nt; -- storage table for NT

INSERT INTO people_tab VALUES (
            100,
            <span class="bold">people_typ</span>( person_typ(1, &#39;John Smith&#39;, &#39;1-650-555-0135&#39;),
                        person_typ(2, &#39;Diane Smith&#39;, NULL)));
</pre></div>
<!-- class="example" -->
<p>When you declare a table column to be of an object type or collection type, you can include a <code>DEFAULT</code> clause. This provides a value to use in cases where you do not explicitly specify a value for the column. The <code>DEFAULT</code> clause must contain a literal invocation of the constructor method for that object or collection.</p>
<p><a href="#CHDDFHFB">Example 5-3</a> shows how to use literal invocations of constructor methods to specify defaults for the <code>person_typ</code> object and the <code>people_typ</code> nested table:</p>
<div id="ADOBJ7237" class="example">
<p class="titleinexample"><a id="CHDDFHFB"></a>Example 5-3 Creating the department_persons Table Using the DEFAULT Clause</p>
<pre>-- requires Ex. 5-1
CREATE TABLE department_persons (
  dept_no    NUMBER PRIMARY KEY,
  dept_name  CHAR(20),
  dept_mgr   <span class="bold">person_typ DEFAULT person_typ(10,&#39;John Doe&#39;,NULL)</span>,
  dept_emps  <span class="bold">people_typ DEFAULT people_typ()</span> ) -- instance of nested table type
  NESTED TABLE dept_emps STORE AS dept_emps_tab;

INSERT INTO department_persons VALUES 
   ( 101, &#39;Physical Sciences&#39;, person_typ(65,&#39;Vrinda Mills&#39;, &#39;1-650-555-0125&#39;),
           people_typ( person_typ(1, &#39;John Smith&#39;, &#39;1-650-555-0135&#39;), 
                        person_typ(2, &#39;Diane Smith&#39;, NULL) ) );
INSERT INTO department_persons VALUES 
  ( 104, &#39;Life Sciences&#39;, person_typ(70,&#39;James Hall&#39;, &#39;1-415-555-0101&#39;), 
    <span class="bold">people_typ()</span> ); -- an empty people_typ table
</pre></div>
<!-- class="example" -->
<p>Note that <code>people_typ()</code> is a literal invocation of the constructor method for an empty <code>people_typ</code> nested table.</p>
<p>The <code>department_persons</code> table can be queried in two ways as shown in <a href="#BHBIIDCC">Example 5-16</a> and <a href="#BHBFDFDJ">Example 5-17</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i468598"></a>
<div id="ADOBJ7238" class="sect2">
<h3 class="sect2">Varrays<a id="sthref421"></a><a id="sthref422"></a><a id="sthref423"></a><a id="sthref424"></a><a id="sthref425"></a><a id="sthref426"></a><a id="sthref427"></a><a id="sthref428"></a></h3>
<p>A varray is an ordered set of data elements. All elements of a given varray are of the same data type or a subtype of the declared one. Each element has an index, which is a number corresponding to the position of the element in the array. The index number is used to access a specific element.</p>
<p>When you define a varray, you specify the maximum number of elements it can contain, although you can change this number later. The number of elements in an array is the size of the array.</p>
<p>The following statement creates an array type <code>email_list_arr</code> that has no more than ten elements, each of data type <code>VARCHAR2(80)</code>.</p>
<pre>CREATE TYPE email_list_arr AS VARRAY(10) OF VARCHAR2(80);
/
</pre>
<p><a href="#BHBFEIFI">Example 5-4</a> creates a <code>VARRAY</code> type that is an array of an object type. The <code>phone_varray_typ</code> <code>VARRAY</code> type is used as a data type for a column in the <code>dept_phone_list</code> table. The <code>INSERT</code> statements show how to insert values into <code>phone_varray_typ</code> by invoking the constructors for the varray <code>phone_varray_typ</code> and the object <code>phone_typ</code>.</p>
<div id="ADOBJ7239" class="example">
<p class="titleinexample"><a id="BHBFEIFI"></a>Example 5-4 Creating and Populating a VARRAY Data Type</p>
<pre>CREATE TYPE phone_typ AS OBJECT (
    country_code   VARCHAR2(2), 
    area_code      VARCHAR2(3),
    ph_number      VARCHAR2(7));
/
<span class="bold">CREATE TYPE phone_varray_typ</span> AS VARRAY(5) OF phone_typ;
/
CREATE TABLE dept_phone_list (
  dept_no NUMBER(5), 
  phone_list phone_varray_typ);

<span class="bold">INSERT INTO</span> dept_phone_list VALUES (
   100,
   <span class="bold">phone_varray_typ</span>( <span class="bold">phone_typ</span> (&#39;01&#39;, &#39;650&#39;, &#39;5550123&#39;),
                      phone_typ (&#39;01&#39;, &#39;650&#39;, &#39;5550148&#39;),
                      phone_typ (&#39;01&#39;, &#39;650&#39;, &#39;5550192&#39;)));
</pre></div>
<!-- class="example" -->
<p>Creating an array type, as with a SQL object type, does not allocate space. It defines a data type, which you can use as:</p>
<ul>
<li>
<p>The data type of a column of a relational table.</p>
</li>
<li>
<p>An object type attribute.</p>
</li>
<li>
<p>The type of a PL/SQL variable, parameter, or function return value.</p>
</li>
</ul>
<p>A varray is normally stored inline, that is, in the same tablespace as the other data in its row. If it is sufficiently large, Oracle stores it as a <code>BLOB</code>. See <a href="adobjdes.htm#i450743">&#34;Storage Considerations for Varrays&#34;</a>.</p>
<p>You can create a <code>VARRAY</code> type of <code>XMLType</code> or <code>LOB</code> type for procedural purposes, such as in PL/SQL or view queries. However, database storage for varrays of these types is not supported. Thus you cannot create an object table or an object type column of a varray type of <code>XMLType</code> or <code>LOB</code> type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01402" href="../SQLRF/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for information and examples on the <code>STORE</code> <code>AS</code> <code>LOB</code> clause of the <code>CREATE</code> <code>TABLE</code> statement</div>
</div>
<!-- class="sect2" -->
<a id="i458789"></a>
<div id="ADOBJ7240" class="sect2">
<h3 class="sect2">Nested Tables<a id="sthref429"></a><a id="sthref430"></a><a id="sthref431"></a><a id="sthref432"></a><a id="sthref433"></a><a id="sthref434"></a><a id="sthref435"></a><a id="sthref436"></a></h3>
<p>A nested table is an unordered set of data elements, all of the same data type. No maximum is specified in the definition of the table, and the order of the elements is not preserved. You select, insert, delete, and update in a nested table just as you do with ordinary tables using the <code>TABLE</code> expression.</p>
<p>A nested table can be viewed as a single column. If the column in a nested table is an object type, the table can also be viewed as a multi-column table, with a column for each attribute of the object type.</p>
<p>To declare nested table types, use the <code>CREATE</code> <code>TYPE</code> ... <code>AS</code> <code>TABLE</code> <code>OF</code> statement. For example:</p>
<pre>CREATE TYPE <span class="bold">people_typ</span> AS TABLE OF <span class="bold">person_typ</span>; 
</pre>
<p>A table type definition does not allocate space. It defines a type, which you can use as:</p>
<ul>
<li>
<p>The data type of a column of a relational table.</p>
</li>
<li>
<p>An object type attribute.</p>
</li>
<li>
<p>A PL/SQL variable, parameter, or function return type.</p>
</li>
</ul>
<a id="CHDCDJAJ"></a>
<div id="ADOBJ7241" class="sect3">
<h4 class="sect3">Storing Elements of Nested Tables<a id="sthref437"></a><a id="sthref438"></a><a id="sthref439"></a></h4>
<p>Elements of a nested table are actually stored in a separate storage table.</p>
<p>Oracle stores nested table data in a single storage table associated with the object table for both nested table types that are columns in a relational table or attributes in an object table. The storage table contains a column that identifies the parent table row or object that each element of the nested table belongs to. See <a href="adobjdes.htm#i445616">Figure 9-2, &#34;Nested Table Storage&#34;</a>.</p>
<p>The <code>NESTED</code> <code>TABLE..STORE AS</code> clause specifies storage names for nested tables. Storage names are used to create an index on a nested table.</p>
<p><a href="#i477859">Example 5-5</a> demonstrates creating and populating a nested table, and specifying the nested table storage using the <code>person_typ</code> object and the <code>people_typ</code> nested table as defined in <a href="#CHDBCCHJ">Example 5-1</a>.</p>
<div id="ADOBJ7242" class="example">
<p class="titleinexample"><a id="i477859"></a>Example 5-5 Creating and Populating Simple Nested Tables</p>
<pre>-- Requires 5-1
CREATE TABLE students (
   graduation DATE, 
   math_majors people_typ, -- nested tables (empty)
   chem_majors people_typ, 
   physics_majors people_typ)
 <span class="bold"> NESTED TABLE</span> math_majors <span class="bold">STORE AS</span> math_majors_nt  -- storage tables
  <span class="bold">NESTED TABLE</span> chem_majors <span class="bold">STORE AS</span> chem_majors_nt
  <span class="bold">NESTED TABLE</span> physics_majors <span class="bold">STORE AS</span> physics_majors_nt;

CREATE INDEX math_idno_idx ON math_majors_nt(idno);
CREATE INDEX chem_idno_idx ON chem_majors_nt(idno);
CREATE INDEX physics_idno_idx ON physics_majors_nt(idno);

INSERT INTO students (graduation) VALUES (&#39;01-JUN-03&#39;);
UPDATE students
  SET math_majors = 
        people_typ (person_typ(12, &#39;Bob Jones&#39;, &#39;650-555-0130&#39;), 
                    person_typ(31, &#39;Sarah Chen&#39;, &#39;415-555-0120&#39;),
                    person_typ(45, &#39;Chris Woods&#39;, &#39;415-555-0124&#39;)),
      chem_majors = 
        people_typ (person_typ(51, &#39;Joe Lane&#39;, &#39;650-555-0140&#39;), 
                    person_typ(31, &#39;Sarah Chen&#39;, &#39;415-555-0120&#39;),
                    person_typ(52, &#39;Kim Patel&#39;, &#39;650-555-0135&#39;)),
   physics_majors = 
        people_typ (person_typ(12, &#39;Bob Jones&#39;, &#39;650-555-0130&#39;), 
                    person_typ(45, &#39;Chris Woods&#39;, &#39;415-555-0124&#39;))
WHERE graduation = &#39;01-JUN-03&#39;;

SELECT m.idno math_id, c.idno chem_id, p.idno physics_id  FROM students s,
 TABLE(s.math_majors) m, TABLE(s.chem_majors) c, TABLE(s.physics_majors) p;
</pre></div>
<!-- class="example" -->
<p>A convenient way to access the elements of a nested table individually is to use a nested cursor or the <code>TABLE</code> function. See <a href="#i454908">&#34;Querying Collections&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<a id="i471398"></a>
<div id="ADOBJ7243" class="sect3">
<h4 class="sect3">Specifying a Tablespace When Storing a Nested Table<a id="sthref440"></a></h4>
<p>A nested table can be stored in a different tablespace than its parent table. In <a href="#CIHEDJFJ">Example 5-6</a>, the nested table is stored in the <code>system</code> tablespace:</p>
<div id="ADOBJ7244" class="example">
<p class="titleinexample"><a id="CIHEDJFJ"></a>Example 5-6 Specifying a Different Tablespace for Storing a Nested Table</p>
<pre>-- Requires Ex. 5-1, must remove code in Ex. 5-2 if created
CREATE TABLE people_tab (
    people_column people_typ )
    NESTED TABLE people_column STORE AS people_column_nt (<span class="bold">TABLESPACE system</span>);
</pre></div>
<!-- class="example" -->
<p>If the <code>TABLESPACE</code> clause is not specified, then the storage table of the nested table is created in the tablespace where the parent table is created. For multilevel nested tables, Oracle creates the child table in the same tablespace as its immediately preceding parent table.</p>
<p>You can issue an <code>ALTER</code> <code>TABLE..</code> <code>MOVE</code> statement to move a table to a different tablespace. If you do this on a table with nested table columns, only the parent table moves; no action is taken on the storage tables of the nested table. To move a storage table for a nested table to a different tablespace, issue <code>ALTER</code> <code>TABLE..</code> <code>MOVE</code> on the storage table. For example:</p>
<pre><span class="bold">ALTER TABLE</span> people_tab <span class="bold">MOVE TABLESPACE</span> system;  -- moving table
<span class="bold">ALTER TABLE</span> people_column_nt <span class="bold">MOVE TABLESPACE</span> example; -- moving storage table
</pre>
<p>Now the <code>people_tab</code> table is in the <code>system</code> tablespace and the nested table storage is stored in the <code>example</code> tablespace.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i471399"></a>
<div id="ADOBJ7245" class="sect2">
<h3 class="sect2">Increasing the Size and Precision of VARRAY and Nested Table Elements</h3>
<p>When the element type of a <code>VARRAY</code> type or nested table type is a variable character, or a <code>RAW</code> or numeric type, you can increase the size of the variable character or <code>RAW</code> type, or increase the precision of the numeric type. A new type version is generated for the <code>VARRAY</code> type or nested table type.</p>
<p>You make these changes using an <code>ALTER</code> <code>TYPE..MODIFY</code> statement, which has these options:</p>
<ul>
<li>
<p><code>INVALIDATE</code>: Invalidates all dependent objects</p>
</li>
<li>
<p><code>CASCADE</code>: Propagates the change to its type and table dependents</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjadv.htm#i1007112">&#34;ALTER TYPE Statement for Type Evolution&#34;</a> for further description of <code>INVALIDATE</code> and <code>CASCADE</code></div>
<p><a href="#BHBBEBCE">Example 5-7</a> increases the sizes of a <code>VARRAY</code> and a nested table element type.</p>
<div id="ADOBJ7246" class="example">
<p class="titleinexample"><a id="BHBBEBCE"></a>Example 5-7 Increasing the Size of an Element Type in a VARRAY and Nested Table</p>
<pre>CREATE TYPE email_list_arr AS VARRAY(10) OF VARCHAR2(80);
/
<span class="bold">ALTER TYPE</span> email_list_arr <span class="bold">MODIFY</span> <span class="bold">ELEMENT</span> <span class="bold">TYPE</span> VARCHAR2(100) <span class="bold">CASCADE</span>;

CREATE TYPE email_list_tab AS TABLE OF VARCHAR2(30);
/
<span class="bold">ALTER TYPE</span> email_list_tab <span class="bold">MODIFY</span> <span class="bold">ELEMENT</span> <span class="bold">TYPE</span> VARCHAR2(40) <span class="bold">CASCADE</span>;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i471403"></a>
<div id="ADOBJ7247" class="sect2">
<h3 class="sect2">Increasing VARRAY Limit Size<a id="sthref441"></a></h3>
<p>The <code>ALTER</code> <code>TYPE</code> ... <code>MODIFY</code> <code>LIMIT</code> syntax allows you to increase the number of elements of a <code>VARRAY</code> type. If the number is increased, a new type version is generated for the <code>VARRAY</code> type, and becomes part of the type change history.</p>
<p>The <code>ALTER</code> <code>TYPE</code> ... <code>MODIFY</code> <code>LIMIT</code> statement has these options:</p>
<ul>
<li>
<p><code>INVALIDATE</code>: Invalidates all dependent objects</p>
</li>
<li>
<p><code>CASCADE</code>: Propagates the change to its type and table dependents</p>
</li>
</ul>
<div id="ADOBJ7248" class="example">
<p class="titleinexample"><a id="CHDBJAHH"></a>Example 5-8 Increasing the VARRAY Limit Size</p>
<pre>-- if you have already creating following types, drop them.
DROP TYPE email_list_tab FORCE;
DROP TYPE email_list_arr FORCE;
CREATE TYPE email_list_arr AS VARRAY(10) OF VARCHAR2(80);
/
CREATE TYPE email_list_typ AS OBJECT (
    section_no   NUMBER, 
    emails       email_list_arr);
/

CREATE TYPE email_varray_typ AS VARRAY(5) OF email_list_typ;
/

<span class="bold">ALTER TYPE</span> email_varray_typ <span class="bold">MODIFY LIMIT</span> 100 <span class="bold">INVALIDATE</span>;
</pre></div>
<!-- class="example" -->
<p>When a <code>VARRAY</code> type is altered, changes are propagated to the dependent tables. See <a href="adobjdes.htm#i471407">&#34;Propagating VARRAY Size Change&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGDEBD"></a>
<div id="ADOBJ7249" class="sect2">
<h3 class="sect2">Creating a Varray Containing LOB References<a id="sthref442"></a><a id="sthref443"></a></h3>
<p>To create a varray of LOB references, first define a <code>VARRAY</code> type of type <code>REF</code> <code>email_list_typ</code>. Note: <code>email_list_typ</code> was defined in <a href="#CHDBJAHH">Example 5-8</a>. Next, create a table <code>dept_email_list</code> and define a column <code>email_addrs</code> of the array type in it.</p>
<div id="ADOBJ7250" class="example">
<p class="titleinexample"><a id="CIHCGDBE"></a>Example 5-9 Creating a VARRAY Containing LOB References</p>
<pre>-- Requires Ex. 5-8
CREATE TYPE ref_email_varray_typ AS VARRAY(5) OF <span class="bold">REF email_list_typ</span>;
/

CREATE TABLE dept_email_list (
  dept_no NUMBER, 
  email_addrs ref_email_varray_typ)
  VARRAY email_addrs STORE AS LOB dept_emails_lob3;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGJHEE"></a>
<div id="ADOBJ7251" class="sect1">
<h2 class="sect1">Multilevel Collection Types<a id="sthref444"></a><a id="sthref445"></a></h2>
<p>Multilevel collection types are collection types whose elements are themselves directly or indirectly another collection type. Possible multilevel collection types are:</p>
<ul>
<li>
<p>Nested table of nested table type</p>
</li>
<li>
<p>Nested table of varray type</p>
</li>
<li>
<p>Varray of nested table type</p>
</li>
<li>
<p>Varray of varray type</p>
</li>
<li>
<p>Nested table or varray of a user-defined type that has an attribute that is a nested table or varray type</p>
</li>
</ul>
<p>Like single-level collection types, multilevel collection types:</p>
<ul>
<li>
<p>Can be used as columns in a relational table or with object attributes in an object table.</p>
</li>
<li>
<p>Require that both the source and the target be of the same declared data type for assignment.</p>
</li>
</ul>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i471394">Nested Table Storage Tables for Multilevel Collection Types</a></p>
</li>
<li>
<p><a href="#CHDBACBE">Varray Storage for Multilevel Collections</a></p>
</li>
<li>
<p><a href="#CHDCIHHI">Constructors for Multilevel Collections</a></p>
</li>
</ul>
<a id="i471394"></a>
<div id="ADOBJ7252" class="sect2">
<h3 class="sect2">Nested Table Storage Tables for Multilevel Collection Types<a id="sthref446"></a><a id="sthref447"></a><a id="sthref448"></a><a id="sthref449"></a><a id="sthref450"></a></h3>
<p>A nested table type column or object table attribute requires a storage table to store rows for all its nested tables as described in <a href="#CHDCDJAJ">&#34;Storing Elements of Nested Tables&#34;</a>. With a multilevel nested table collection of nested tables, you must specify nested-table storage clauses for both the inner set and the outer set of nested tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGJAAB">&#34;Unnesting Queries with Multilevel Collections&#34;</a></div>
<p><a href="#BHBGJHHF">Example 5-10</a> creates the multilevel collection type <code>nt_country_typ</code>, a nested table of nested tables. The example models a system of corporate regions in which each region has a nested table collection of the countries, and each country has a nested table collection of its locations. This example requires the <code>regions</code>, <code>countries</code>, and <code>locations</code> tables of the Oracle <code>HR</code> sample schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink COMSC" href="../COMSC/toc.htm"><span class="italic">Oracle Database Sample Schemas</span></a> for information on using sample schemas</div>
<p>In <a href="#BHBGJHHF">Example 5-10</a>, the SQL statements create the table <code>region_tab</code>, which contains the column <code>countries</code>, whose type is a multilevel collection, <code>nt_country_typ</code>. This multilevel collection is a nested table of an object type that has the nested table attribute <code>locations</code>. Separate nested table clauses are provided for the outer <code>countries</code> nested table and for the inner <code>locations</code> nested table.</p>
<div id="ADOBJ7253" class="example">
<p class="titleinexample"><a id="BHBGJHHF"></a>Example 5-10 Multilevel Nested Table Storage</p>
<pre>-- Requires the HR sample schema
CREATE TYPE location_typ AS OBJECT (
  location_id      NUMBER(4),
  street_address   VARCHAR2(40),
  postal_code      VARCHAR2(12),
  city             VARCHAR2(30),
  state_province   VARCHAR2(25));
/

CREATE TYPE nt_location_typ AS TABLE OF location_typ;  -- nested table type
/

CREATE TYPE country_typ AS OBJECT (
  country_id     CHAR(2),
  country_name   VARCHAR2(40),
  <span class="bold">locations</span>      nt_location_typ); -- inner nested table
/

CREATE TYPE nt_country_typ AS TABLE OF country_typ;  -- multilevel collection type
/

CREATE TABLE region_tab (
  region_id     NUMBER,
  region_name   VARCHAR2(25),
  <span class="bold">countries</span>     nt_country_typ) -- outer nested table
  <span class="bold">NESTED TABLE</span> countries <span class="bold">STORE AS</span> nt_countries_tab
   (<span class="bold">NESTED TABLE</span> locations <span class="bold">STORE AS</span> nt_locations_tab);
</pre></div>
<!-- class="example" -->
<p>In <a href="#BHBGJHHF">Example 5-10</a> you can refer to the inner nested table <code>locations</code> by name because this nested table is a named attribute of an object. However, <span class="italic">if the inner nested table is not an attribute of an object, it has no name</span>. The keyword <code>COLUMN_VALUE</code> is provided for this case.</p>
<p><a href="#CIHBJBDD">Example 5-11</a> shows keyword <code>COLUMN_VALUE</code> used in place of a name for an inner nested table.</p>
<div id="ADOBJ7254" class="example">
<p class="titleinexample"><a id="CIHBJBDD"></a>Example 5-11 Multilevel Nested Table Storage Using the COLUMN_VALUE Keyword</p>
<pre>CREATE TYPE inner_table AS TABLE OF NUMBER;
/
CREATE TYPE outer_table AS TABLE OF inner_table;
/
CREATE TABLE tab1 (
  <span class="bold">col1 NUMBER</span>,  -- inner nested table, unnamed
  col2 outer_table)
NESTED TABLE col2 STORE AS col2_ntab
  (NESTED TABLE <span class="bold">COLUMN_VALUE</span> STORE AS cv_ntab);
</pre></div>
<!-- class="example" -->
<p><a href="#CIHJJFCC">Example 5-12</a> shows how to specify physical attributes for the storage tables in the nested table clause.</p>
<div id="ADOBJ7255" class="example">
<p class="titleinexample"><a id="CIHJJFCC"></a>Example 5-12 Specifying Physical Attributes for Nested Table Storage</p>
<pre>-- Requires Ex. 5-10
-- drop the following if you have previously created it
DROP TABLE region_tab FORCE;

CREATE TABLE region_tab (
  region_id     NUMBER,
  region_name   VARCHAR2(25),
  countries     nt_country_typ)
  NESTED TABLE countries STORE AS nt_countries_tab (
   (PRIMARY KEY (<span class="bold">NESTED_TABLE_ID</span>, country_id))
   <span class="bold">ORGANIZATION INDEX</span> COMPRESS
   NESTED TABLE locations STORE AS nt_locations_tab);
</pre></div>
<!-- class="example" -->
<p>Every nested table storage table contains a column, referenceable by <code><a id="sthref451"></a>NESTED_TABLE_ID</code>, that keys rows in the storage table to the associated row in the parent table. A parent table that is itself a nested table has two system-supplied ID columns:</p>
<ul>
<li>
<p>A system-supplied ID column that is referenceable by <code>NESTED_TABLE_ID</code>, which keys its rows back to rows in its parent table.</p>
</li>
<li>
<p>A system-supplied ID column that is hidden and referenced by the <code>NESTED_TABLE_ID</code> column in its nested table children.</p>
</li>
</ul>
<p>In <a href="#CIHJJFCC">Example 5-12</a>, nested table <code>countries</code> is made an <a id="sthref452"></a><a id="sthref453"></a><a id="sthref454"></a>index-organized table (IOT) by adding the <code>ORGANIZATION</code> <code>INDEX</code> clause and assigning the nested table a primary key in which the first column is <code>NESTED_TABLE_ID</code>. This column contains the ID of the row in the parent table with which a storage table row is associated. Specifying a primary key with <code>NESTED_TABLE_ID</code> as the first column and index-organizing the table causes Oracle database to physically cluster all the nested table rows that belong to the same parent row, for more efficient access.</p>
<p>If you do not specify a primary key with a <code>NESTED_TABLE_ID</code> column, then the database automatically creates a b-tree index on the <code>NESTED_TABLE_ID</code> column for better performance.</p>
<p>Each nested table needs its own table storage clause, so you must have as many nested table storage clauses as you have levels of nested tables in a collection. See <a href="adobjdes.htm#i448918">&#34;Nested Table Storage&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBACBE"></a>
<div id="ADOBJ7256" class="sect2">
<h3 class="sect2">Varray Storage for Multilevel Collections<a id="sthref455"></a><a id="sthref456"></a></h3>
<p>Multilevel varrays are stored in one of two ways, depending on whether the varray is a varray of varrays or a varray of nested tables.</p>
<ul>
<li>
<p>In a varray of varrays, the entire varray is stored inline in the row unless it is larger than approximately 4000 bytes or <code>LOB</code> storage is explicitly specified.</p>
</li>
<li>
<p>In a varray of nested tables, the entire varray is stored in a LOB, with only the LOB locator stored in the row. There is no storage table associated with nested table elements of a varray.</p>
</li>
</ul>
<p>You can explicitly specify LOB storage for varrays. The following example does this for a nested table of varray elements.</p>
<p><a href="#CIHFHCAA">Example 5-13</a> shows explicit <code>LOB</code> storage specified for a varray of varray type.</p>
<div id="ADOBJ7257" class="example">
<p class="titleinexample"><a id="CIHFHCAA"></a>Example 5-13 Specifying LOB Storage for a VARRAY of VARRAY Type</p>
<pre>-- Requires Ex. 5-8, drop following if created

DROP TYPE email_varray_typ FORCE;
CREATE TYPE email_list_typ2 AS OBJECT (
    section_no   NUMBER, 
    emails       email_list_arr);
/

CREATE TYPE email_varray_typ AS VARRAY(5) OF email_list_typ2;
/

CREATE TABLE dept_email_list2 (
  dept_no NUMBER, 
  email_addrs email_varray_typ)
  VARRAY email_addrs STORE AS LOB dept_emails_lob2;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adobjdes.htm#i450743">&#34;Storage Considerations for Varrays&#34;</a></p>
</li>
<li>
<p><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span> for a general understanding of LOBs</p>
</li>
</ul>
</div>
<div id="ADOBJ7258" class="example">
<p class="titleinexample"><a id="CIHIGHGC"></a>Example 5-14 Specifying LOB Storage for a Nested Table of VARRAYs</p>
<pre>-- drop the following types if you have created them
DROP TYPE email_list_typ FORCE;
DROP TABLE dept_email_list FORCE;
DROP TYPE email_list_arr FORCE;

CREATE TYPE email_list_arr AS VARRAY(10) OF VARCHAR2(80);
/

CREATE TYPE email_list_typ AS TABLE OF email_list_arr;
/

CREATE TABLE dept_email_list (
  dept_no NUMBER, 
  email_addrs email_list_typ)
  NESTED TABLE email_addrs STORE AS email_addrs_nt
  (
<span class="bold">VARRAY COLUMN_VALUE STORE AS LOB</span>
 dept_emails_lob);
</pre></div>
<!-- class="example" -->
<p><a href="#CIHIGHGC">Example 5-14</a> shows the <code>COLUMN_VALUE</code> keyword used with varrays. See <a href="#CIHBJBDD">Example 5-11</a> for discussion of this keyword and its use with nested tables.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCIHHI"></a>
<div id="ADOBJ7259" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Constructors for Multilevel Collections<a id="sthref457"></a><a id="sthref458"></a></h3>
<p>Multilevel collection types are created by calling the constructor of the respective type, just like single-level collections and other object types. The constructor for a multilevel collection type is a system-defined function that has the same name as the type and returns a new instance of it. Constructor parameters have the names and types of the attributes of the object type.</p>
<p><a href="#CIHDDFJC">Example 5-15</a> shows the constructor call for the multilevel collection type <code>nt_country_typ</code>. The <code>nt_country_typ</code> constructor calls the <code>country_typ</code> constructor, which calls the <code>nt_location_typ</code>, which calls the <code>location_typ</code> constructor.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>nt_country_typ</code> is a multilevel collection because it is a nested table that contains another nested table as an attribute.</div>
<div id="ADOBJ7260" class="example">
<p class="titleinexample"><a id="CIHDDFJC"></a>Example 5-15 Using Constructors for Multilevel Collections</p>
<pre>-- Requires 5-10 and HR sample schema
INSERT INTO region_tab 
VALUES(1, &#39;Europe&#39;, <span class="bold">nt_country_typ</span>( 
  <span class="bold">country_typ</span>( &#39;IT&#39;, &#39;Italy&#39;, <span class="bold">nt_location_typ</span> (
    <span class="bold">location_typ</span>(1000, &#39;1297 Via Cola di Rie&#39;,&#39;00989&#39;,&#39;Roma&#39;, &#39;&#39;),
    <span class="bold">location_typ</span>(1100, &#39;93091 Calle della Testa&#39;,&#39;10934&#39;,&#39;Venice&#39;,&#39;&#39;) ) 
    ),
  country_typ( &#39;CH&#39;, &#39;Switzerland&#39;, nt_location_typ (
    location_typ(2900, &#39;20 Rue des Corps-Saints&#39;, &#39;1730&#39;, &#39;Geneva&#39;, &#39;Geneve&#39;),
    location_typ(3000, &#39;Murtenstrasse 921&#39;, &#39;3095&#39;, &#39;Bern&#39;, &#39;BE&#39;) ) 
    ),
  country_typ( &#39;UK&#39;, &#39;United Kingdom&#39;, nt_location_typ (
    location_typ(2400, &#39;8204 Arthur St&#39;, &#39;&#39;, &#39;London&#39;, &#39;London&#39;),
    location_typ(2500, &#39;Magdalen Centre, The Oxford Science Park&#39;, &#39;OX9 9ZB&#39;,
                 &#39;Oxford&#39;, &#39;Oxford&#39;),
    location_typ(2600, &#39;9702 Chester Road&#39;, &#39;09629850293&#39;, &#39;Stretford&#39;,
                 &#39;Manchester&#39;) )
      ) 
  )
);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHJIIAB"></a>
<div id="ADOBJ00212" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Operations on Collection Data Types</h2>
<p>This section describes the operations on collection data types.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i454908">Querying Collections</a></p>
</li>
<li>
<p><a href="#i463812">Performing DML Operations on Collections</a></p>
</li>
<li>
<p><a href="#CHDICHHA">Using BULK COLLECT to Return Entire Result Sets</a></p>
</li>
<li>
<p><a href="#CHDEDHAB">Conditions that Compare Nested Tables</a></p>
</li>
<li>
<p><a href="#i471415">Multiset Operations for Nested Tables</a></p>
</li>
</ul>
<a id="i454908"></a>
<div id="ADOBJ7261" class="sect2">
<h3 class="sect2">Querying Collections<a id="sthref459"></a><a id="sthref460"></a></h3>
<p>There are two general ways to query a table that contains a collection type as a column or attribute.</p>
<ul>
<li>
<p>Nest the collections in the result rows that contain them.</p>
</li>
<li>
<p>Distribute or unnest collections so that each collection element appears on a row by itself.</p>
</li>
</ul>
<div id="ADOBJ7262" class="sect3"><a id="sthref461"></a>
<h4 class="sect3">Nesting Results of Collection Queries</h4>
<p>The following queries use the <code>department_persons</code> table shown in <a href="#CHDDFHFB">Example 5-3</a>. The column <code>dept_emps</code> is a nested table collection of <code>person_typ</code> type. The <code>dept_emps</code> collection column appears in the <code>SELECT</code> list like an ordinary scalar column. Querying a collection column in the <code>SELECT</code> list this way nests the elements of the collection in the result row that the collection is associated with.</p>
<p><a href="#BHBIIDCC">Example 5-16</a> shows the query retrieving the nested collection of employees.</p>
<div id="ADOBJ7263" class="example">
<p class="titleinexample"><a id="BHBIIDCC"></a>Example 5-16 Nesting Results of Collection Queries</p>
<pre>-- Requires Ex. 5-1 and Ex. 5-3
SELECT d.dept_emps 
  FROM department_persons d;
</pre></div>
<!-- class="example" -->
<br/>
<code>DEPT_EMPS(IDNO, NAME, PHONE)</code><br/>
<code>-------------------------------------------------------------</code><br/>
<code>PEOPLE_TYP(PERSON_TYP(1, &#39;John Smith&#39;, &#39;1-650-555-0135&#39;),</code><br/>
<code>PERSON_TYP(2, &#39;Diane Smith&#39;, &#39;1-650-555-0135&#39;))</code><br/>
<p>The results are also nested if an object type column in the <code>SELECT</code> list contains a collection attribute, even if that collection is not explicitly listed in the <code>SELECT</code> list itself. For example, the query <code>SELECT</code> <code>*</code> <code>FROM</code> <code>department_persons</code> produces a nested result.</p>
</div>
<!-- class="sect3" -->
<a id="BHBFIBJC"></a>
<div id="ADOBJ7264" class="sect3">
<h4 class="sect3">Unnesting Results of Collection Queries<a id="sthref462"></a><a id="sthref463"></a><a id="sthref464"></a><a id="sthref465"></a><a id="sthref466"></a></h4>
<p>Not all tools or applications can deal with results in a nested format. To view Oracle collection data using tools that require a conventional format, you must unnest, or flatten, the collection attribute of a row into one or more relational rows. You can do this using a <code>TABLE</code> expression with the collection. <code>TABLE</code> expressions enable you to query a collection in the <code>FROM</code> clause like a table. In effect, you join the nested table with the row that contains the nested table.</p>
<p><code>TABLE</code> expressions can be used to query any collection value expression, including transient values such as variables and parameters.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30047" href="../SQLRF/statements_10002.htm#SQLRF30047"><span class="italic">Oracle Database SQL Language Reference</span></a> for further information on the <code>TABLE</code> expression and unnesting collections</div>
<p>The query in <a href="#BHBFDFDJ">Example 5-17</a>, like that of <a href="#BHBIIDCC">Example 5-16</a>, retrieves the collection of employees, but here the collection is unnested.</p>
<div id="ADOBJ7265" class="example">
<p class="titleinexample"><a id="BHBFDFDJ"></a>Example 5-17 Unnesting Results of Collection Queries</p>
<pre>-- Requires Ex. 5-1 and 5-3
SELECT e.* 
  FROM department_persons d, TABLE(d.dept_emps) e;
</pre></div>
<!-- class="example" -->
<br/>
<code>IDNO NAME PHONE</code><br/>
<code>---------- ------------------------------ ---------------</code><br/>
<code>1 John Smith 1-650-555-0135</code><br/>
<code>2 Diane Smith 1-650-555-0135</code><br/>
<p><a href="#BHBFDFDJ">Example 5-17</a> shows that a <code>TABLE</code> expression can have its own table alias. A table alias for the <code>TABLE</code> expression appears in the <code>SELECT</code> list to select columns returned by the <code>TABLE</code> expression.</p>
<p>The <code>TABLE</code> expression uses another table alias to specify the table that contains the collection column that the <code>TABLE</code> expression references. The expression <code>TABLE(d.dept_emps)</code> specifies the <code>department_persons</code> table as containing the <code>dept_emps</code> collection column. To reference a table column, a <code>TABLE</code> expression can use the table alias of any table appearing to the left of it in a <code>FROM</code> clause. This is called left correlation.</p>
<p>In the example, the <code>department_persons</code> table is listed in the <code>FROM</code> clause solely to provide a table alias for the <code>TABLE</code> expression to use. No columns from the <code>department_persons</code> table other than the column referenced by the <code>TABLE</code> expression appear in the result.</p>
<p>The following example produces rows only for departments that have employees.</p>
<pre>SELECT d.dept_no, e.* 
  FROM department_persons d, TABLE(d.dept_emps) e;
</pre>
<p>To get rows for departments with or without employees, you can use outer-join syntax:</p>
<pre>SELECT d.dept_no, e.* 
  FROM department_persons d, TABLE(d.dept_emps) (+) e;
</pre>
<p>The (+) indicates that the dependent join between <code>department_persons</code> and <code>e.dept_emps</code> should be <code>NULL</code>-augmented. That is, there will be rows of <code>department_persons</code> in the output for which <code>e.dept_emps</code> is <code>NULL</code> or empty, with <code>NULL</code> values for columns corresponding to <code>e.dept_emps</code>.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7266" class="sect3"><a id="sthref467"></a>
<h4 class="sect3">Unnesting Queries Containing Table Expression Subqueries<a id="sthref468"></a><a id="sthref469"></a></h4>
<p>The examples in <a href="#BHBFIBJC">&#34;Unnesting Results of Collection Queries&#34;</a> show a <code>TABLE</code> expression that contains the name of a collection. Alternatively, a <code>TABLE</code> expression can contain a subquery of a collection.</p>
<p><a href="#CIHECAFA">Example 5-18</a> returns the collection of employees whose department number is <code>101</code>.</p>
<div id="ADOBJ7267" class="example">
<p class="titleinexample"><a id="CIHECAFA"></a>Example 5-18 Using a Table Expression Containing a Subquery of a Collection</p>
<pre>-- Requires Ex. 5-1 and 5-3
SELECT *
  FROM TABLE(SELECT d.dept_emps 
               FROM department_persons d
               WHERE d.dept_no = 101);
</pre></div>
<!-- class="example" -->
<p>Subqueries in a <code>TABLE</code> expression have these restrictions:</p>
<ul>
<li>
<p>The subquery must return a collection type.</p>
</li>
<li>
<p>The <code>SELECT</code> list of the subquery must contain exactly one item.</p>
</li>
<li>
<p>The subquery must return only a single collection; it cannot return collections for multiple rows. For example, the subquery <code>SELECT</code> <code>dept_emps</code> <code>FROM</code> <code>department_persons</code> succeeds in a <code>TABLE</code> expression only if table <code>department_persons</code> contains just a single row. If the table contains more than one row, the subquery produces an error.</p>
</li>
</ul>
<p><a href="#CIHJEAJF">Example 5-19</a> shows a <code>TABLE</code> expression used in the <code>FROM</code> clause of a <code>SELECT</code> embedded in a <code>CURSOR</code> expression.</p>
<div id="ADOBJ7268" class="example">
<p class="titleinexample"><a id="CIHJEAJF"></a>Example 5-19 Using a Table Expression in a CURSOR Expression</p>
<pre>-- Requires Ex. 5-1 and 5-3
SELECT d.dept_no, CURSOR(SELECT * FROM TABLE(d.dept_emps)) 
  FROM department_persons d
   WHERE d.dept_no = 101;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDGJAAB"></a>
<div id="ADOBJ7269" class="sect3">
<h4 class="sect3">Unnesting Queries with Multilevel Collections<a id="sthref470"></a><a id="sthref471"></a></h4>
<p>Unnesting queries can be also used with multilevel collections, both varrays and nested tables. <a href="#CIHCEAEG">Example 5-20</a> shows an unnesting query on a multilevel nested table collection of nested tables. From the table <code>region_tab</code> where each region has a nested table of <code>countries</code> and each country has a nested table of <code>locations</code>, the query returns the names of all <code>regions</code>, <code>countries</code>, and <code>locations</code>.</p>
<div id="ADOBJ7270" class="example">
<p class="titleinexample"><a id="CIHCEAEG"></a>Example 5-20 Unnesting Queries with Multilevel Collections Using the TABLE Function</p>
<pre>-- Requires Ex. 5-10 and 5-15
SELECT r.region_name, c.country_name, l.location_id 
  FROM region_tab r, TABLE(r.countries) c, TABLE(c.locations) l;
 
-- the following query is optimized to run against the locations table
SELECT l.location_id, l.city 
  FROM region_tab r, TABLE(r.countries) c, TABLE(c.locations) l;
</pre></div>
<!-- class="example" -->
<p>The output should be as follows:</p>
<pre>REGION_NAME               COUNTRY_NAME                             LOCATION_ID
------------------------- ---------------------------------------- -----------
Europe                    Italy                                           1000
Europe                    Italy                                           1100
Europe                    Switzerland                                     2900
Europe                    Switzerland                                     3000
Europe                    United Kingdom                                  2400
Europe                    United Kingdom                                  2500
Europe                    United Kingdom                                  2600
 
7 rows selected.
</pre>
<pre>LOCATION_ID CITY
----------- ------------------------------
       1000 Roma
       1100 Venice
       2900 Geneva
       3000 Bern
       2400 London
       2500 Oxford
       2600 Stretford
 
7 rows selected.
</pre>
<p>Because no columns of the base table <code>region_tab</code> appear in the second <code>SELECT</code> list, the query is optimized to run directly against the <code>locations</code> storage table.</p>
<p>Outer-join syntax can also be used with queries of multilevel collections. See <a href="adobjdes.htm#i449073">&#34;Viewing Object Data in Relational Form with Unnesting Queries&#34;</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i463812"></a>
<div id="ADOBJ7271" class="sect2">
<h3 class="sect2">Performing DML Operations on Collections<a id="sthref472"></a></h3>
<p>Oracle supports the following DML operations on collections:</p>
<ul>
<li>
<p>Inserts and updates that provide a new value for the entire collection</p>
</li>
<li>
<p>Individual or piecewise updates of nested tables and multilevel nested tables, including inserting, deleting, and updating elements</p>
</li>
</ul>
<p>Oracle does not support piecewise updates on <code>VARRAY</code> columns. However, <code>VARRAY</code> columns can be inserted into or updated as an atomic unit.This section contains these topics:</p>
<ul>
<li>
<p><a href="#CHDDBICH">Piecewise Operations on Nested Tables</a></p>
</li>
<li>
<p><a href="#CHDIBAEI">Piecewise Operations on Multilevel Nested Tables</a></p>
</li>
<li>
<p><a href="#CHDGGJBF">Atomical Changes on VARRAYs and Nested Tables</a></p>
</li>
<li>
<p><a href="#CHDJJHAD">Collections as Atomic Data Items</a></p>
</li>
</ul>
<a id="CHDDBICH"></a>
<div id="ADOBJ7272" class="sect3">
<h4 class="sect3">Piecewise Operations on Nested Tables</h4>
<p>For piecewise operations on nested table columns, use the <code>TABLE</code> expression.</p>
<p>The <code>TABLE</code> expression uses a subquery to extract the nested table, so that the <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement applies to the nested table rather than the top-level table.</p>
<p><code>CAST</code> operators are also helpful. With them, you can do set operations on nested tables using SQL notation, without actually storing the nested tables in the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00613" href="../SQLRF/functions024.htm#SQLRF00613"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a href="adobjbas.htm#i478986">&#34;CAST&#34;</a></p>
</li>
</ul>
</div>
<p>The DML statements in <a href="#CIHJHIGG">Example 5-21</a> demonstrate piecewise operations on nested table columns.</p>
<div id="ADOBJ7273" class="example">
<p class="titleinexample"><a id="CIHJHIGG"></a>Example 5-21 Piecewise Operations on Collections</p>
<pre>-- Requires Ex. 5-1 and 5-3
INSERT INTO TABLE(SELECT d.dept_emps 
                  FROM department_persons d
                  WHERE d.dept_no = 101)
   VALUES (5, &#39;Kevin Taylor&#39;, &#39;1-408-555-0199&#39;);

UPDATE TABLE(SELECT d.dept_emps 
                  FROM department_persons d
                  WHERE d.dept_no = 101) e   
   SET VALUE(e) = person_typ(5, &#39;Kevin Taylor&#39;, &#39;1-408-555-0199&#39;)
   WHERE e.idno = 5;
     
DELETE FROM TABLE(SELECT d.dept_emps 
                  FROM department_persons d
                  WHERE d.dept_no = 101) e
   WHERE e.idno = 5;
</pre></div>
<!-- class="example" -->
<p><a href="#CIHJDAFI">Example 5-22</a> shows <code>VALUE</code> used to return object instance rows for updating:</p>
<div id="ADOBJ7274" class="example">
<p class="titleinexample"><a id="CIHJDAFI"></a>Example 5-22 Using VALUE to Update a Nested Table</p>
<pre>-- Requires Ex. 5-1, 5-3
UPDATE TABLE(SELECT d.dept_emps FROM department_persons d 
               WHERE  d.dept_no = 101) p
   SET VALUE(p) = person_typ(2, &#39;Diane Smith&#39;, &#39;1-650-555-0148&#39;)
   WHERE p.idno = 2;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDIBAEI"></a>
<div id="ADOBJ7275" class="sect3">
<h4 class="sect3">Piecewise Operations on Multilevel Nested Tables<a id="sthref473"></a><a id="sthref474"></a></h4>
<p>Piecewise DML is possible only on multilevel nested tables, not on multilevel varrays. You can perform DML operation atomically on both VARRAYs and nested tables multilevel collections as described in <a href="#CHDJJHAD">&#34;Collections as Atomic Data Items&#34;</a>.</p>
<p><a href="#CIHEEEBD">Example 5-23</a> shows a piecewise insert operation on the <code>countries</code> nested table of nested tables. The example inserts a new country, complete with its own nested table of <code>location_typ</code>:</p>
<div id="ADOBJ7276" class="example">
<p class="titleinexample"><a id="CIHEEEBD"></a>Example 5-23 Piecewise INSERT on a Multilevel Collection</p>
<pre>-- Requires Ex. 5-10 and 5-15
INSERT INTO TABLE( SELECT countries FROM region_tab r WHERE r.region_id = 2) 
  VALUES ( &#39;CA&#39;, &#39;Canada&#39;, nt_location_typ( 
       location_typ(1800, &#39;147 Spadina Ave&#39;, &#39;M5V 2L7&#39;, &#39;Toronto&#39;, &#39;Ontario&#39;)));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHDABBA">Example 5-24</a> performs a piecewise insert into an inner nested table to add a location for a country. Like the preceding example, this example uses a <code>TABLE</code> expression containing a subquery that selects the inner nested table to specify the target for the insert.</p>
<div id="ADOBJ7277" class="example">
<p class="titleinexample"><a id="CIHDABBA"></a>Example 5-24 Piecewise INSERT into an Inner Nested Table</p>
<pre>-- Requires Ex. 5-10 and 5-15
INSERT INTO TABLE( SELECT c.locations 
  FROM TABLE( SELECT r.countries FROM region_tab r WHERE r.region_id = 2) c
  WHERE c.country_id = &#39;US&#39;)
  VALUES (1700, &#39;2004 Lakeview Rd&#39;, &#39;98199&#39;, &#39;Seattle&#39;, &#39;Washington&#39;);
 
SELECT r.region_name, c.country_name, l.location_id 
  FROM region_tab r, TABLE(r.countries) c, TABLE(c.locations) l;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDGGJBF"></a>
<div id="ADOBJ7278" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Atomical Changes on VARRAYs and Nested Tables</h4>
<p>This section discusses atomical changes to nested tables and <code>VARRAY</code>s.</p>
<p>Note: While nested tables can also be changed in a piecewise fashions, varrays cannot.</p>
<p><a href="#BEIGEIFE">Example 5-25</a> shows how you can manipulate SQL varray object types with PL/SQL statements. In this example, varrays are transferred between PL/SQL variables and SQL tables. You can insert table rows containing collections, update a row to replace its collection, and select collections into PL/SQL variables.</p>
<p>However, you cannot update or delete individual varray elements directly with SQL; you have to select the varray from the table, change it in PL/SQL, then update the table to include the new varray. You can also do this with nested tables, but nested tables have the option of doing piecewise updates and deletes.</p>
<div id="ADOBJ7279" class="example">
<p class="titleinexample"><a id="BEIGEIFE"></a>Example 5-25 Using INSERT, UPDATE, DELETE, and SELECT Statements With Varrays</p>
<pre>CREATE TYPE dnames_var IS VARRAY(7) OF VARCHAR2(30);
/
CREATE TABLE depts (region VARCHAR2(25), dept_names dnames_var);
BEGIN
   <span class="bold">INSERT</span> INTO depts VALUES(&#39;Europe&#39;, dnames_var(&#39;Shipping&#39;,&#39;Sales&#39;,&#39;Finance&#39;));
   <span class="bold">INSERT</span> INTO depts VALUES(&#39;Americas&#39;, dnames_var(&#39;Sales&#39;,&#39;Finance&#39;,&#39;Shipping&#39;));
   <span class="bold">INSERT</span> INTO depts 
     VALUES(&#39;Asia&#39;, dnames_var(&#39;Finance&#39;,&#39;Payroll&#39;,&#39;Shipping&#39;,&#39;Sales&#39;));
   COMMIT;
END;
/
DECLARE
   new_dnames dnames_var := dnames_var(&#39;Benefits&#39;, &#39;Advertising&#39;, &#39;Contracting&#39;, 
                                       &#39;Executive&#39;, &#39;Marketing&#39;);
   some_dnames dnames_var;
BEGIN
   <span class="bold">UPDATE</span> depts SET dept_names  = new_dnames WHERE region = &#39;Europe&#39;;
   COMMIT;
   <span class="bold">SELECT</span> dept_names INTO some_dnames FROM depts WHERE region = &#39;Europe&#39;;
   FOR i IN some_dnames.FIRST .. some_dnames.LAST
   LOOP
      DBMS_OUTPUT.PUT_LINE(&#39;dept_names = &#39; || some_dnames(i));
   END LOOP;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDJJHAD"></a>
<div id="ADOBJ7280" class="sect3">
<h4 class="sect3">Collections as Atomic Data Items</h4>
<p>The section <a href="#CHDCIHHI">&#34;Constructors for Multilevel Collections&#34;</a> shows how to insert an entire multilevel collection with an <code>INSERT</code> statement. Multilevel collections (both <code>VARRAY</code> and nested tables) can also be updated atomically with an <code>UPDATE</code> statement. For example, suppose <code>v_country</code> is a variable declared to be of the <code>countries</code> nested table type <code>nt_country_typ</code>.</p>
<p><a href="#CIHEHGBH">Example 5-26</a> updates <code>region_tab</code> by setting the <code>countries</code> collection as a unit to the value of <code>v_country</code>.</p>
<div id="ADOBJ7281" class="example">
<p class="titleinexample"><a id="CIHEHGBH"></a>Example 5-26 Using UPDATE to Insert an Entire Multilevel Collection</p>
<pre>-- Requires Ex. 5-10 and 5-15
INSERT INTO region_tab (region_id, region_name) VALUES(2, &#39;Americas&#39;);

DECLARE
  v_country nt_country_typ;
BEGIN
  v_country :=  nt_country_typ( country_typ( 
   &#39;US&#39;, &#39;United States of America&#39;, nt_location_typ (
   location_typ( 1500,&#39;2011 Interiors Blvd&#39;,&#39;99236&#39;,&#39;San Francisco&#39;,&#39;California&#39;),
   location_typ(1600,&#39;2007 Zagora St&#39;,&#39;50090&#39;,&#39;South Brunswick&#39;,&#39;New Jersey&#39;))));
  <span class="bold">UPDATE</span> region_tab r 
    SET r.countries = v_country WHERE r.region_id = 2;
END;
/
-- Invocation:
SELECT r.region_name, c.country_name, l.location_id 
  FROM region_tab r, TABLE(r.countries) c, TABLE(c.locations) l
     WHERE r.region_id = 2;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDICHHA"></a>
<div id="ADOBJ7282" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using BULK COLLECT to Return Entire Result Sets<a id="sthref475"></a><a id="sthref476"></a></h3>
<p>The PL/SQL <code>BULK</code> <code>COLLECT</code> clause is an alternative to using DML statements, which can be time consuming to process. You can return an entire result set in one operation.</p>
<p>In <a href="#BABBJBHD">Example 5-27</a>, <code>BULK</code> <code>COLLECT</code> is used with a multilevel collection that includes an object type.</p>
<div id="ADOBJ7283" class="example">
<p class="titleinexample"><a id="BABBJBHD"></a>Example 5-27 Using BULK COLLECT with Collections</p>
<pre>-- unrelated to other examples in this chapter
CREATE TYPE dnames_var IS VARRAY(7) OF VARCHAR2(30);
/
CREATE TABLE depts (region VARCHAR2(25), dept_names dnames_var);
BEGIN
   INSERT INTO depts VALUES(&#39;Europe&#39;, dnames_var(&#39;Shipping&#39;,&#39;Sales&#39;,&#39;Finance&#39;));
   INSERT INTO depts VALUES(&#39;Americas&#39;, dnames_var(&#39;Sales&#39;,&#39;Finance&#39;,&#39;Shipping&#39;));
   INSERT INTO depts 
     VALUES(&#39;Asia&#39;, dnames_var(&#39;Finance&#39;,&#39;Payroll&#39;,&#39;Shipping&#39;,&#39;Sales&#39;));
   COMMIT;
END;
/
DECLARE
   TYPE dnames_tab IS TABLE OF dnames_var;
   v_depts dnames_tab;
BEGIN
    SELECT dept_names <span class="bold">BULK COLLECT</span> INTO v_depts FROM depts;
    DBMS_OUTPUT.PUT_LINE(v_depts.COUNT); -- prints 3
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDEDHAB"></a>
<div id="ADOBJ7284" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Conditions that Compare Nested Tables<a id="sthref477"></a><a id="sthref478"></a><a id="sthref479"></a><a id="sthref480"></a></h3>
<p>The conditions listed in this section allow comparisons of nested tables, including multilevel nested tables. There is no mechanism for comparing varrays. The SQL examples in this section use the nested tables created in <a href="#i477859">Example 5-5</a>, and contain the objects created in <a href="#CHDBCCHJ">Example 5-1</a>.</p>
<a id="CHDCJEAJ"></a>
<div id="ADOBJ7285" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Equal and Not Equal Comparisons<a id="sthref481"></a><a id="sthref482"></a></h4>
<p>The equal (=) and not equal (&lt;&gt;) conditions determine whether the input nested tables are identical or not, returning the result as a Boolean value.</p>
<p>Two nested tables are equal if they have the same named type, have the same cardinality, and their elements are equal. Elements are equal depending on whether they are equal by the elements own equality definitions, except for object types which require a map method. Equality is determined in the existing order of the elements, because nested tables are unordered.</p>
<div id="ADOBJ7286" class="example">
<p class="titleinexample"><a id="CIHFECIH"></a>Example 5-28 Using an Equality Comparison with Nested Tables</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT p.name 
  FROM students, TABLE(physics_majors) p 
WHERE math_majors = physics_majors;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHFECIH">Example 5-28</a>, the nested tables contain <code>person_typ</code> objects, which have an associated map method. See <a href="#CHDBCCHJ">Example 5-1</a>. Since the two nested tables in the <code>WHERE</code> clause are not equal, no rows are selected.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7287" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref483"></a>
<h4 class="sect3">IN Comparison<a id="sthref484"></a></h4>
<p>The <code>IN</code> condition checks whether or not a nested table is in a list of nested tables, returning the result as a Boolean value. NULL is returned if the nested table is a null nested table.</p>
<div id="ADOBJ7288" class="example">
<p class="titleinexample"><a id="sthref485"></a>Example 5-29 Using an IN Comparison with Nested Tables</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT p.idno, p.name 
  FROM students, TABLE(physics_majors) p 
WHERE physics_majors IN (math_majors, chem_majors);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="ADOBJ7289" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref486"></a>
<h4 class="sect3">Subset of Multiset Comparison<a id="sthref487"></a></h4>
<p>The <code>SUBMULTISET</code> <code>[OF]</code> condition checks whether or not a nested table is a subset of another nested table, returning the result as a Boolean value. The <code>OF</code> keyword is optional and does not change the functionality of <code>SUBMULTISET</code>.</p>
<p>This condition is implemented only for nested tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i471415">&#34;Multiset Operations for Nested Tables&#34;</a></div>
<div id="ADOBJ7290" class="example">
<p class="titleinexample"><a id="sthref488"></a>Example 5-30 Testing the SUBMULTISET OF Condition on a Nested Table</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT p.idno, p.name 
  FROM students, TABLE(physics_majors) p 
WHERE physics_majors SUBMULTISET OF math_majors;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="ADOBJ7291" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref489"></a>
<h4 class="sect3">Member of a Nested Table Comparison<a id="sthref490"></a><a id="sthref491"></a></h4>
<p>The <code>MEMBER</code> <code>[OF]</code> or <code>NOT</code> <code>MEMBER</code> <code>[OF]</code> condition tests whether or not an element is a member of a nested table, returning the result as a Boolean value. The <code>OF</code> keyword is optional and has no effect on the output.</p>
<p>In <a href="#CIHBFJFF">Example 5-31</a>, the <code>person_typ</code> is an element of the same type as the elements of the nested table <code>math_majors</code>.</p>
<div id="ADOBJ7292" class="example">
<p class="titleinexample"><a id="CIHBFJFF"></a>Example 5-31 Using MEMBER OF on a Nested Table</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT graduation 
  FROM students 
WHERE person_typ(12, &#39;Bob Jones&#39;, &#39;1-650-555-0130&#39;) MEMBER OF math_majors;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDDBHGA">Example 5-32</a> presents an alternative approach to the <code>MEMBER</code> <code>OF</code> condition, which performs more efficiently for large collections.</p>
<div id="ADOBJ7293" class="example">
<p class="titleinexample"><a id="CHDDBHGA"></a>Example 5-32 Alternative to Using MEMBER OF on a Nested Table</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT graduation
  FROM students
WHERE person_typ(12, &#39;Bob Jones&#39;, &#39;1-650-555-0130&#39;) in (select value(p) 
    from TABLE( math_majors) p);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="ADOBJ7294" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref492"></a>
<h4 class="sect3">Empty Comparison<a id="sthref493"></a></h4>
<p>The <code>IS</code> <code>[NOT]</code> <code>EMPTY</code> condition checks whether a given nested table is empty or not empty, regardless of whether any of the elements are NULL. If a NULL is given for the nested table, the result is NULL. The result is returned as a Boolean value.</p>
<div id="ADOBJ7295" class="example">
<p class="titleinexample"><a id="sthref494"></a>Example 5-33 Using IS NOT on a Nested Table</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT p.idno, p.name 
  FROM students, TABLE(physics_majors) p 
WHERE physics_majors IS NOT EMPTY;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="ADOBJ7296" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref495"></a>
<h4 class="sect3">Set Comparison<a id="sthref496"></a><a id="sthref497"></a></h4>
<p>The <code>IS</code> <code>[NOT]</code> <code>A</code> <code>SET</code> condition checks whether or not a given nested table is composed of unique elements, returning a Boolean value.</p>
<div id="ADOBJ7297" class="example">
<p class="titleinexample"><a id="sthref498"></a>Example 5-34 Using IS A SET on a Nested Table</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT p.idno, p.name 
  FROM students, TABLE(physics_majors) p 
WHERE physics_majors IS A SET;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i471415"></a>
<div id="ADOBJ7298" class="sect2">
<h3 class="sect2">Multiset Operations for Nested Tables<a id="sthref499"></a><a id="sthref500"></a></h3>
<p>This section describes <a href="glossary.htm#CHDBJDCB"><span class="xrefglossterm">multiset operators</span></a> for nested tables. Multiset operations are not available for varrays.</p>
<p>The SQL examples in this section use the nested tables created in <a href="#i477859">Example 5-5</a> and the objects created in <a href="#CHDBCCHJ">Example 5-1</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adobjbas.htm#i463707">&#34;Functions and Operators Useful with Objects&#34;</a> for a description of additional operations</p>
</li>
<li>
<p><a class="olink SQLRF003" href="../SQLRF/operators.htm#SQLRF003"><span class="italic">Oracle Database SQL Language Reference</span></a>.for more information about using operators with nested tables</p>
</li>
</ul>
</div>
<a id="i478919"></a>
<div id="ADOBJ7299" class="sect3">
<h4 class="sect3">CARDINALITY<a id="sthref501"></a></h4>
<p>The <code>CARDINALITY</code> function returns the number of elements in a nested table. The return type is <code>NUMBER</code>. If the nested table is a null collection, <code>NULL</code> is returned.</p>
<div id="ADOBJ7300" class="example">
<p class="titleinexample"><a id="sthref502"></a>Example 5-35 Determining the CARDINALITY of a Nested Table</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT CARDINALITY(math_majors) 
  FROM students;
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>CARDINALITY</code> function, see <a class="olink SQLRF06305" href="../SQLRF/functions023.htm#SQLRF06305"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="i478930"></a>
<div id="ADOBJ7301" class="sect3">
<h4 class="sect3">COLLECT<a id="sthref503"></a></h4>
<p>The <code>COLLECT</code> function is an aggregate function which creates a multiset from a set of elements. The function takes a column of the element type as input and creates a multiset from rows selected. To get the results of this function, you must use it within a <code>CAST</code> function to specify the output type of <code>COLLECT</code>. See <a href="adobjbas.htm#i478986">&#34;CAST&#34;</a> for an example of the <code>COLLECT</code> function.</p>
<p>For more information about the <code>COLLECT</code> function, see <a class="olink SQLRF06304" href="../SQLRF/functions034.htm#SQLRF06304"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7302" class="sect3"><a id="sthref504"></a>
<h4 class="sect3">MULTISET EXCEP<a id="sthref505"></a>T</h4>
<p>The <code>MULTISET</code> <code>EXCEPT</code> operator inputs two nested tables and returns a nested table whose elements are in the first nested table but not the second. The input nested tables and the output nested table will all be of the same nested table type.</p>
<p>The <code>ALL</code> or <code>DISTINCT</code> options can be used with the operator. The default is <code>ALL</code>.</p>
<ul>
<li>
<p>With the <code>ALL</code> option, for <code>ntab1</code> <code>MULTISET</code> <code>EXCEPT</code> <code>ALL</code> <code>ntab2</code>, all elements in <code>ntab1</code> other than those in <code>ntab2</code> are part of the result. If a particular element occurs <code><span class="codeinlineitalic">m</span></code> times in <code>ntab1</code> and <code><span class="codeinlineitalic">n</span></code> times in <code>ntab2</code>, the result shows (<code><span class="codeinlineitalic">m</span></code> - <code><span class="codeinlineitalic">n</span></code>) occurrences of the element if <code><span class="codeinlineitalic">m</span></code> is greater than <code><span class="codeinlineitalic">n</span></code>, otherwise, <code>0</code> occurrences of the element.</p>
</li>
<li>
<p>With the <code>DISTINCT</code> option, any element that is present in <code>ntab1</code> and is also present in <code>ntab2</code> is eliminated, irrespective of the number of occurrences.</p>
</li>
</ul>
<div id="ADOBJ7303" class="example">
<p class="titleinexample"><a id="sthref506"></a>Example 5-36 Using the MULTISET EXCEPT Operation on Nested Tables</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT math_majors MULTISET EXCEPT physics_majors 
  FROM students 
WHERE graduation = &#39;01-JUN-03&#39;;
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>MULTISET</code> <code>EXCEPT</code> operator, see <a class="olink SQLRF0032" href="../SQLRF/operators006.htm#SQLRF0032"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7304" class="sect3"><a id="sthref507"></a>
<h4 class="sect3">MULTISET INTERSECT<a id="sthref508"></a></h4>
<p>The <code>MULTISET</code> <code>INTERSECT</code> operator returns a nested table whose values are common to the two input nested tables. The input nested tables and the output nested table are all type name equivalent.</p>
<p>There are two options associated with the operator: <code>ALL</code> or <code>DISTINCT</code>. The default is <code>ALL</code>. With the <code>ALL</code> option, if a particular value occurs <code><span class="codeinlineitalic">m</span></code> times in <code>ntab1</code> and <code><span class="codeinlineitalic">n</span></code> times in <code>ntab2</code>, the result contains the element <code>MIN</code>(<code><span class="codeinlineitalic">m</span></code>, <code><span class="codeinlineitalic">n</span></code>) times. With the <code>DISTINCT</code> option, the duplicates from the result are eliminated, including duplicates of <code>NULL</code> values if they exist.</p>
<div id="ADOBJ7305" class="example">
<p class="titleinexample"><a id="sthref509"></a>Example 5-37 Using the MULTISET INTERSECT Operation on Nested Tables</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT math_majors MULTISET INTERSECT physics_majors 
  FROM students 
WHERE graduation = &#39;01-JUN-03&#39;;
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>MULTISET</code> <code>INTERSECT</code> operator, see <a class="olink SQLRF0032" href="../SQLRF/operators006.htm#SQLRF0032"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7306" class="sect3"><a id="sthref510"></a>
<h4 class="sect3">MULTISET UNION<a id="sthref511"></a></h4>
<p>The <code>MULTISET</code> <code>UNION</code> operator returns a nested table whose values are those of the two input nested tables. The input nested tables and the output nested table are all type name equivalent.</p>
<p>There are two options associated with the operator: <code>ALL</code> or <code>DISTINCT</code>. The default is <code>ALL</code>. With the <code>ALL</code> option, all elements in <code>ntab1</code> and <code>ntab2</code> are part of the result, including all copies of <code>NULL</code>s. If a particular element occurs <code><span class="codeinlineitalic">m</span></code> times in <code>ntab1</code> and <code><span class="codeinlineitalic">n</span></code> times in <code>ntab2</code>, the result contains the element (<code><span class="codeinlineitalic">m</span></code> + <code><span class="codeinlineitalic">n</span></code>) times. With the <code>DISTINCT</code> option, the duplicates from the result are eliminated, including duplicates of <code>NULL</code> values if they exist.</p>
<div id="ADOBJ7307" class="example">
<p class="titleinexample"><a id="sthref512"></a>Example 5-38 Using the MULTISET UNION Operation on Nested Tables</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT math_majors MULTISET UNION DISTINCT physics_majors 
  FROM students 
WHERE graduation = &#39;01-JUN-03&#39;;
</pre></div>
<!-- class="example" -->
<br/>
<code>PEOPLE_TYP(PERSON_TYP(12, &#39;Bob Jones&#39;, &#39;1-650-555-0130&#39;),</code><br/>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PERSON_TYP(31, &#39;Sarah Chen&#39;, &#39;1-415-555-0120&#39;),</code><br/>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PERSON_TYP(45, &#39;Chris Woods&#39;, &#39;1-408-555-0128&#39;))</code><br/>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT math_majors MULTISET UNION ALL physics_majors
  FROM students 
WHERE graduation = &#39;01-JUN-03&#39;;
</pre>
<br/>
<code>PEOPLE_TYP(PERSON_TYP(12, &#39;Bob Jones&#39;, &#39;1-650-555-0130&#39;),</code><br/>
<code>&nbsp;&nbsp;&nbsp;&nbsp;PERSON_TYP(31, &#39;Sarah Chen&#39;, &#39;1-415-555-0120&#39;),</code><br/>
<code>&nbsp;&nbsp;&nbsp;&nbsp;PERSON_TYP(45, &#39;Chris Woods&#39;, &#39;1-408-555-0128&#39;),</code><br/>
<code>&nbsp;&nbsp;&nbsp;&nbsp;PERSON_TYP(12, &#39;Bob Jones&#39;, &#39;1-650-555-0130&#39;),</code><br/>
<code>&nbsp;&nbsp;&nbsp;&nbsp;PERSON_TYP(45, &#39;Chris Woods&#39;, &#39;1-408-555-0128&#39;))</code><br/>
<p>For more information about the <code>MULTISET</code> <code>UNION</code> operator, see <a class="olink SQLRF51170" href="../SQLRF/operators006.htm#SQLRF51170"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="i478860"></a>
<div id="ADOBJ7308" class="sect3">
<h4 class="sect3">POWERMULTISET<a id="sthref513"></a></h4>
<p>The <code>POWERMULTISET</code> function generates all non-empty submultisets from a given multiset. The input to the <code>POWERMULTISET</code> function can be any expression which evaluates to a multiset. The limit on the cardinality of the multiset argument is 32.</p>
<div id="ADOBJ7309" class="example">
<p class="titleinexample"><a id="sthref514"></a>Example 5-39 Using the POWERMULTISET Operation on Multiset</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT * FROM TABLE(POWERMULTISET( people_typ (
           person_typ(12, &#39;Bob Jones&#39;, &#39;1-650-555-0130&#39;), 
           person_typ(31, &#39;Sarah Chen&#39;, &#39;1-415-555-0120&#39;), 
           person_typ(45, &#39;Chris Woods&#39;, &#39;1-415-555-0124&#39;))));
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>POWERMULTISET</code> function, see <a class="olink SQLRF06306" href="../SQLRF/functions144.htm#SQLRF06306"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="i478877"></a>
<div id="ADOBJ7310" class="sect3">
<h4 class="sect3">POWERMULTISET_BY_CARDINALITY<a id="sthref515"></a></h4>
<p>The <code>POWERMULTISET_BY_CARDINALITY</code> function returns all non-empty submultisets of a nested table of the specified cardinality. The output is rows of nested tables.</p>
<p><code>POWERMULTISET_BY_CARDINALITY(x, l)</code> is equivalent to <code>TABLE(POWERMULTISET(x))</code> <code>p</code> where <code>CARDINALITY(value(p))</code> <code>=</code> <code>l</code>, where <code><span class="codeinlineitalic">x</span></code> is a multiset and l is the specified cardinality.</p>
<p>The first input parameter to the <code>POWERMULTISET_BY_CARDINALITY</code> can be any expression which evaluates to a nested table. The length parameter must be a positive integer, otherwise an error is returned. The limit on the cardinality of the nested table argument is 32.</p>
<div id="ADOBJ7311" class="example">
<p class="titleinexample"><a id="sthref516"></a>Example 5-40 Using the POWERMULTISET_BY_CARDINALITY Function</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT * FROM TABLE(POWERMULTISET_BY_CARDINALITY( people_typ (
           person_typ(12, &#39;Bob Jones&#39;, &#39;1-650-555-0130&#39;), 
           person_typ(31, &#39;Sarah Chen&#39;, &#39;1-415-555-0120&#39;), 
           person_typ(45, &#39;Chris Woods&#39;, &#39;1-415-555-0124&#39;)),2));
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>POWERMULTISET_BY_CARDINALITY</code> function, see <a class="olink SQLRF06307" href="../SQLRF/functions145.htm#SQLRF06307"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="i478961"></a>
<div id="ADOBJ7312" class="sect3">
<h4 class="sect3">SET<a id="sthref517"></a></h4>
<p>The <code>SET</code> function converts a nested table into a set by eliminating duplicates, and returns a nested table whose elements are distinct from one another. The nested table returned is of the same named type as the input nested table.</p>
<div id="ADOBJ7313" class="example">
<p class="titleinexample"><a id="sthref518"></a>Example 5-41 Using the SET Function on a Nested Table</p>
<pre>-- Requires Ex. 5-1 and 5-5
SELECT SET(physics_majors) 
  FROM students 
WHERE graduation = &#39;01-JUN-03&#39;;
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>SET</code> function, see <a class="olink SQLRF06308" href="../SQLRF/functions177.htm#SQLRF06308"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005821"></a>
<div id="ADOBJ00608" class="sect1">
<h2 class="sect1">Partitioning Tables That Contain Oracle Objects<a id="sthref519"></a><a id="sthref520"></a><a id="sthref521"></a></h2>
<p>Partitioning addresses the key problem of supporting very large tables and indexes by allowing you to decompose them into smaller and more manageable pieces called partitions. Oracle extends partitioning capabilities by letting you partition tables that contain objects, <code>REF</code>s, varrays, and nested tables. Varrays stored in <code>LOB</code>s are equipartitioned in a way similar to <code>LOB</code>s. Nested table storage tables will be equipartitioned with the base table. See also <a class="olink ADLOB45309" href="../ADLOB/adlob_tables.htm#ADLOB45309"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For further information on equipartitioning
<ul>
<li>
<p><a class="olink VLDBG1116" href="../VLDBG/GUID-7F8EBE79-9FF2-4B2D-9764-C11263FA550F.htm#VLDBG1116"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a></p>
</li>
<li>
<p><a class="olink ADXDB0730" href="../ADXDB/xdb06stt.htm#ADXDB0730"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
<p><a href="#i1011314">Example 5-42</a> partitions the purchase order table along zip codes (<code>ToZip</code>), which is an attribute of the <code>ShipToAddr</code> embedded column object. The <code>LineItemList_nt</code> nested table illustrates storage for the partitioned nested table.</p>
<div id="ADOBJ7314" class="example">
<p class="titleinexample"><a id="i1011314"></a>Example 5-42 Partitioning a Nested Table That Contains Objects</p>
<pre>CREATE TYPE StockItem_objtyp AS OBJECT (
      StockNo NUMBER,
      Price NUMBER,
      TaxRate NUMBER);
/
 
CREATE TYPE LineItem_objtyp AS OBJECT (
      LineItemNo NUMBER,
      Stock_ref REF StockItem_objtyp,
      Quantity NUMBER,
      Discount NUMBER);
/
 
CREATE TYPE Address_objtyp AS OBJECT (
      Street VARCHAR2(200),
      City VARCHAR2(200),
      State CHAR(2),
      Zip VARCHAR2(20))
/
 
CREATE TYPE LineItemList_nt as table of LineItem_objtyp;
/
 
CREATE TYPE PurchaseOrder_ntyp AS OBJECT ( 
      PONo                NUMBER, 
      OrderDate           DATE, 
      ShipDate            DATE, 
      OrderForm           BLOB, 
      LineItemList        LineItemList_nt, 
      ShipToAddr          Address_objtyp, 
 
   MAP MEMBER FUNCTION 
      ret_value RETURN NUMBER, 
   MEMBER FUNCTION 
      total_value RETURN NUMBER);
/
 
CREATE TABLE PurchaseOrders_ntab of PurchaseOrder_ntyp  
LOB (OrderForm) store as (nocache logging)  
NESTED TABLE LineItemList STORE AS LineItemList_ntab
PARTITION BY RANGE (ShipToAddr.zip)  
   (PARTITION PurOrderZone1_part VALUES LESS THAN (&#39;59999&#39;)  
       LOB (OrderForm) store as (  
       storage (INITIAL 10 MINEXTENTS 10 MAXEXTENTS 100))  
       NESTED TABLE LineItemList store as LineitemZone1_part(  
       storage (INITIAL 10 MINEXTENTS 10 MAXEXTENTS 100)),  
   PARTITION PurOrderZone2_part  VALUES LESS THAN (&#39;79999&#39;)  
       LOB (OrderForm) store as (  
       storage (INITIAL 10 MINEXTENTS 10 MAXEXTENTS 100))  
      NESTED TABLE LineItemList store as LineitemZone2_part( 
       storage (INITIAL 10 MINEXTENTS 10 MAXEXTENTS 100)),  
   PARTITION PurOrderZone3_part  VALUES LESS THAN (&#39;99999&#39;)  
       LOB (OrderForm) store as (  
       storage (INITIAL 10 MINEXTENTS 10 MAXEXTENTS 100))  
       NESTED TABLE LineItemList store as LineitemZone3_part(  
   storage (INITIAL 10 MINEXTENTS 10 MAXEXTENTS 100)) )
/ 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3980">
<tr>
<td class="cellalignment3987">
<table class="cellalignment3985">
<tr>
<td class="cellalignment3984"><a href="adobjenv.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3984"><a href="adobjvew.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3989">
<table class="cellalignment3983">
<tr>
<td class="cellalignment3984"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3984"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3984"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3984"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3984"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3984"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>