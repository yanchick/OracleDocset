<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-747"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20PL%2FSQL%20With%20Object%20Types"></a><title>Using PL/SQL With Object Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-08-06T13:19:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Object-Relational Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53277-02"/>
<meta name="dcterms.isVersionOf" content="ADOBJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adobjbas.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adobjenv.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53277-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/16</span> <!-- End Header -->
<div id="ADOBJ070" class="chapter"><a id="CHDEFBEA"></a>
<h1 class="chapter"><span class="secnum">3</span> Using PL/SQL With Object Types</h1>
<p>This chapter describes how to use object types with PL/SQL</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i7530">Declaring and Initializing Objects in PL/SQL</a></p>
</li>
<li>
<p><a href="#i11073">Manipulating Objects in PL/SQL</a></p>
</li>
<li>
<p><a href="#i21148">Using Overloading in PL/SQL with Inheritance</a></p>
</li>
<li>
<p><a href="#CIHJFFCI">Using Dynamic SQL With Objects</a></p>
</li>
</ul>
<a id="i7530"></a>
<div id="ADOBJ07001" class="sect1">
<h2 class="sect1">Declaring and Initializing Objects in PL/SQL<a id="sthref298"></a><a id="sthref299"></a></h2>
<p>Using object types in a PL/SQL block, subprogram, or package is a two-step process.</p>
<ol>
<li>
<p>You must define object types using the SQL statement <code>CREATE TYPE</code>, in SQL*Plus or other similar programs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjint.htm#i458117">&#34;About Object Types&#34;</a></div>
<p>After an object type is defined and installed in the schema, you can use it in any PL/SQL block, subprogram, or package.</p>
</li>
<li>
<p>In PL/SQL, you then declare a variable whose data type is the user-defined type or ADT that you just defined.</p>
</li>
</ol>
<p>Objects or ADTs follow the usual scope and instantiation rules.</p>
<div id="ADOBJ7171" class="sect2"><a id="sthref300"></a>
<h3 class="sect2">Defining Object Types</h3>
<p><a href="#CIHGJHHA">Example 3-1</a> provides two object types, and a table of object types. Subsequent examples show how to declare variables of those object types in PL/SQL and perform other operations with these objects.</p>
<div id="ADOBJ7172" class="example">
<p class="titleinexample"><a id="CIHGJHHA"></a>Example 3-1 Working With Object Types</p>
<pre>CREATE TYPE address_typ AS OBJECT ( 
   street          VARCHAR2(30),
   city            VARCHAR2(20),
   state           CHAR(2),
   postal_code     VARCHAR2(6) );
/
CREATE TYPE employee_typ AS OBJECT (
  employee_id       NUMBER(6),
  first_name        VARCHAR2(20),
  last_name         VARCHAR2(25),
  email             VARCHAR2(25),
  phone_number      VARCHAR2(20),
  hire_date         DATE,
  job_id            VARCHAR2(10),
  salary            NUMBER(8,2),
  commission_pct    NUMBER(2,2),
  manager_id        NUMBER(6),
  department_id     NUMBER(4),
  address           address_typ,
  MAP MEMBER FUNCTION get_idno RETURN NUMBER,
  MEMBER PROCEDURE display_address ( SELF IN OUT NOCOPY employee_typ ) );
/
CREATE TYPE BODY employee_typ AS
  MAP MEMBER FUNCTION get_idno RETURN NUMBER IS
  BEGIN
    RETURN employee_id;
  END;
  MEMBER PROCEDURE display_address ( SELF IN OUT NOCOPY employee_typ ) IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(first_name || &#39; &#39;  || last_name);
    DBMS_OUTPUT.PUT_LINE(address.street);
    DBMS_OUTPUT.PUT_LINE(address.city || &#39;, &#39;  || address.state || &#39; &#39; ||
                         address.postal_code);   
  END;
END;
/
CREATE TABLE employee_tab OF employee_typ;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="ADOBJ7173" class="sect2"><a id="sthref301"></a>
<h3 class="sect2">Declaring Objects in a PL/SQL Block<a id="sthref302"></a><a id="sthref303"></a></h3>
<p>You can use objects or ADTs wherever built-in types such as <code>CHAR</code> or <code>NUMBER</code> can be used.</p>
<p><a href="#BABIHHCG">Example 3-2</a> declares object <code>emp</code> of type <code>employee_typ</code>. Then, the constructor for object type <code>employee_typ</code> initializes the object.</p>
<div id="ADOBJ7174" class="example">
<p class="titleinexample"><a id="BABIHHCG"></a>Example 3-2 Declaring Objects in a PL/SQL Block</p>
<pre>-- Requires Ex. 3-1
DECLARE
  emp employee_typ; -- emp is atomically null
BEGIN
-- call the constructor for employee_typ
  emp := employee_typ(315, &#39;Francis&#39;, &#39;Logan&#39;, &#39;FLOGAN&#39;,
        &#39;415.555.0100&#39;, &#39;01-MAY-04&#39;, &#39;SA_MAN&#39;, 11000, .15, 101, 110, 
         address_typ(&#39;376 Mission&#39;, &#39;San Francisco&#39;, &#39;CA&#39;, &#39;94222&#39;));
  DBMS_OUTPUT.PUT_LINE(emp.first_name || &#39; &#39; || emp.last_name); -- display details
  emp.display_address();  -- call object method to display details
END;
/
</pre></div>
<!-- class="example" -->
<p>The formal parameter of a PL/SQL subprogram can have data types of user-defined types. Therefore, you can pass objects to stored subprograms and from one subprogram to another. In the next example, the object type <code>employee_typ</code> specifies the data type of a formal parameter:</p>
<p><code>PROCEDURE open_acct (new_acct IN OUT employee_typ) IS ...</code></p>
<p>In the following example, object type <code>employee_typ</code> specifies the return type of a function:</p>
<p><code>FUNCTION get_acct (acct_id IN NUMBER) RETURN employee_typ IS ...</code></p>
</div>
<!-- class="sect2" -->
<a id="BJEJFBIA"></a>
<div id="ADOBJ7175" class="sect2">
<h3 class="sect2">How PL/SQL Treats Uninitialized Objects<a id="sthref304"></a><a id="sthref305"></a><a id="sthref306"></a></h3>
<p>User-defined types, just like collections, are atomically null, until you initialize the object by calling the constructor for its object type. That is, the object itself is null, not just its attributes.</p>
<p>Comparing a null object with any other object always yields <code>NULL</code>. Also, if you assign an atomically null object to another object, the other object becomes atomically null (and must be reinitialized). Likewise, if you assign the non-value <code>NULL</code> to an object, the object becomes atomically null.</p>
<p>In an expression, attributes of an uninitialized object evaluate to <code>NULL</code>. When applied to an uninitialized object or its attributes, the <code>IS</code> <code>NULL</code> comparison operator yields <code>TRUE</code>.</p>
<p>See <a href="adobjbas.htm#CIHGJFGD">Example 2-1</a> for an illustration of null objects and objects with null attributes.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i11073"></a>
<div id="ADOBJ07002" class="sect1">
<h2 class="sect1">Manipulating Objects in PL/SQL</h2>
<p>This section describes how to manipulate object attributes and methods in PL/SQL.</p>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BJEEJJDC">Accessing Object Attributes With Dot Notation</a></p>
</li>
<li>
<p><a href="#BABECDGC">Calling Object Constructors and Methods</a></p>
</li>
<li>
<p><a href="#BJEJDIIH">Updating and Deleting Objects</a></p>
</li>
<li>
<p><a href="#i7534">Manipulating Objects Through Ref Modifiers</a></p>
</li>
</ul>
<a id="BJEEJJDC"></a>
<div id="ADOBJ7176" class="sect2">
<h3 class="sect2">Accessing Object Attributes With Dot Notation<a id="sthref307"></a></h3>
<p>You refer to an attribute by name. To access or change the value of an attribute, you use dot notation. Attribute names can be chained, which lets you access the attributes of a nested object type.</p>
<p><a href="#CIHBCFEI">Example 3-3</a> uses dot notation and generates the same output as <a href="#BABIHHCG">Example 3-2</a>.</p>
<div id="ADOBJ7177" class="example">
<p class="titleinexample"><a id="CIHBCFEI"></a>Example 3-3 Accessing Object Attributes</p>
<pre>-- Requires Ex. 3-1
DECLARE
  emp employee_typ;
BEGIN
  emp := <span class="bold">employee_typ</span>(315, &#39;Francis&#39;, &#39;Logan&#39;, &#39;FLOGAN&#39;,
        &#39;415.555.0100&#39;, &#39;01-MAY-04&#39;, &#39;SA_MAN&#39;, 11000, .15, 101, 110, 
         address_typ(&#39;376 Mission&#39;, &#39;San Francisco&#39;, &#39;CA&#39;, &#39;94222&#39;));
  DBMS_OUTPUT.PUT_LINE(emp.first_name || &#39; &#39;  || emp.last_name);
  DBMS_OUTPUT.PUT_LINE(emp.address.street);
  DBMS_OUTPUT.PUT_LINE(emp.address.city || &#39;, &#39;  ||emp. address.state || &#39; &#39; ||
                       emp.address.postal_code);   
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABECDGC"></a>
<div id="ADOBJ7178" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Calling Object Constructors and Methods<a id="sthref308"></a><a id="sthref309"></a><a id="sthref310"></a><a id="sthref311"></a><a id="sthref312"></a></h3>
<p>Calls to a constructor are allowed wherever function calls are allowed. Like all functions, a constructor is called as part of an expression, as shown in <a href="#CIHBCFEI">Example 3-3</a> and <a href="#CIHDFEDI">Example 3-4</a>.</p>
<div id="ADOBJ7179" class="example">
<p class="titleinexample"><a id="CIHDFEDI"></a>Example 3-4 Inserting Rows in an Object Table</p>
<pre>-- Requires Ex. 3-1
DECLARE
  emp <span class="bold">employee_typ</span>;
BEGIN
  INSERT INTO employee_tab VALUES (employee_typ(310, &#39;Evers&#39;, &#39;Boston&#39;, &#39;EBOSTON&#39;,
   &#39;617.555.0100&#39;, &#39;01-AUG-04&#39;, &#39;SA_REP&#39;, 9000, .15, 101, 110, 
    address_typ(&#39;123 Main&#39;, &#39;San Francisco&#39;, &#39;CA&#39;, &#39;94111&#39;)) );
  INSERT INTO employee_tab VALUES (employee_typ(320, &#39;Martha&#39;, &#39;Dunn&#39;, &#39;MDUNN&#39;,
    &#39;650.555.0150&#39;, &#39;30-SEP-04&#39;, &#39;AC_MGR&#39;, 12500, 0, 101, 110,
    address_typ(&#39;123 Broadway&#39;, &#39;Redwood City&#39;, &#39;CA&#39;, &#39;94065&#39;)) );
END;
/
SELECT VALUE(e) from employee_tab e;
</pre></div>
<!-- class="example" -->
<p>When you pass parameters to a constructor, the call assigns initial values to the attributes of the object being instantiated. When you call the default constructor to fill in all attribute values, you must supply a parameter for every attribute; unlike constants and variables, attributes cannot have default values. You can call a constructor using named notation instead of positional notation.</p>
<p>Like packaged subprograms, methods are called using dot notation. In <a href="#CIHIBDFI">Example 3-5</a>, the <code>display_address</code> method is called to display attributes of an object. Note the use of the <code>VALUE</code> function which returns the value of an object. <code>VALUE</code> takes as its argument a correlation variable. In this context, a correlation variable is a row variable or table alias associated with a row in an object table.</p>
<div id="ADOBJ7180" class="example">
<p class="titleinexample"><a id="CIHIBDFI"></a>Example 3-5 Accessing Object Methods</p>
<pre>-- Requires Ex. 3-1 and Ex. 3-4
DECLARE
  emp employee_typ;
BEGIN
  SELECT VALUE(e) INTO emp FROM employee_tab e WHERE e.employee_id = 310;
  <span class="bold">emp.display_address()</span>;
END;
/
</pre></div>
<!-- class="example" -->
<p>In SQL statements, calls to a parameterless method require an empty parameter list. In procedural statements, an empty parameter list is optional unless you chain calls, in which case it is required for all but the last call. Also, if you chain two function calls, the first function must return an object that can be passed to the second function.</p>
<p>If a PL/SQL function is used in place of an ADT constructor during a DML operation, the function may execute multiple times as part of the DML execution. For the function to execute only once per occurrence, it must be a deterministic function.</p>
<p>For static methods, calls use the notation <code><span class="codeinlineitalic">type_name</span></code><code>.</code><code><span class="codeinlineitalic">method_name</span></code> rather than specifying an instance of the type.</p>
<p>When you call a method using an instance of a subtype, the actual method that is executed depends on declarations in the type hierarchy. If the subtype overrides the method that it inherits from its supertype, the call uses the subtype implementation. Otherwise, the call uses the supertype implementation. This capability is known as dynamic method dispatch.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjbas.htm#i468270">&#34;Dynamic Method Dispatch&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BJEJDIIH"></a>
<div id="ADOBJ7181" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Updating and Deleting Objects</h3>
<p>From inside a PL/SQL block you can modify and delete rows in an object table.</p>
<div id="ADOBJ7182" class="example">
<p class="titleinexample"><a id="sthref313"></a>Example 3-6 Updating and Deleting Rows in an Object Table</p>
<pre>-- Requires Ex. 3-1 and 3-4
DECLARE
  emp employee_typ;
BEGIN
  INSERT INTO employee_tab VALUES (employee_typ(370, &#39;Robert&#39;, &#39;Myers&#39;, &#39;RMYERS&#39;,
   &#39;415.555.0150&#39;, &#39;07-NOV-04&#39;, &#39;SA_REP&#39;, 8800, .12, 101, 110, 
    address_typ(&#39;540 Fillmore&#39;, &#39;San Francisco&#39;, &#39;CA&#39;, &#39;94011&#39;)) );
  <span class="bold">UPDATE</span> employee_tab e SET e.address.street = &#39;1040 California&#39; 
     WHERE e.employee_id = 370;
  <span class="bold">DELETE</span> FROM employee_tab e WHERE e.employee_id = 310;
END;
/
SELECT VALUE(e) from employee_tab e;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i7534"></a>
<div id="ADOBJ7183" class="sect2">
<h3 class="sect2">Manipulating Objects Through Ref Modifiers<a id="sthref314"></a><a id="sthref315"></a><a id="sthref316"></a><a id="sthref317"></a></h3>
<p>You can retrieve <code>REF</code>s using the function <code>REF</code>, which takes as its argument a correlation variable or alias.</p>
<div id="ADOBJ7184" class="example">
<p class="titleinexample"><a id="sthref318"></a>Example 3-7 Updating Rows in an Object Table With a REF Modifier</p>
<pre>-- Requires Ex. 3-1, 3-4, and 3-6
DECLARE
  emp         employee_typ;
  emp_ref REF employee_typ;
BEGIN
  SELECT REF(e) INTO emp_ref FROM employee_tab e WHERE e.employee_id = 370;
  UPDATE employee_tab <span class="bold">e</span> 
    SET <span class="bold">e</span>.address = address_typ(&#39;8701 College&#39;, &#39;Oakland&#39;, &#39;CA&#39;, &#39;94321&#39;)
    WHERE REF(e) = emp_ref;
END;
/
</pre></div>
<!-- class="example" -->
<p>You can declare <code>REF</code>s as variables, parameters, fields, or attributes. You can use <code>REF</code>s as input or output variables in SQL data manipulation statements.</p>
<p>You cannot navigate through <code>REF</code>s in PL/SQL. For example, the assignment in <a href="#BABDDCJB">Example 3-8</a> using a <code>REF</code> is not allowed. Instead, use the function <code>DEREF</code> or make calls to the package <code>UTL_REF</code> to access the object. For information on the <code>REF</code> function, see <a class="olink SQLRF00694" href="../SQLRF/functions159.htm#SQLRF00694"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div id="ADOBJ7185" class="example">
<p class="titleinexample"><a id="BABDDCJB"></a>Example 3-8 Trying to Use DEREF in a SELECT INTO Statement, Incorrect</p>
<pre>-- Requires Ex. 3-1, 3-4, and 3-6
DECLARE 
  emp           employee_typ;
  emp_ref   REF employee_typ;
  emp_name      VARCHAR2(50);
BEGIN
  SELECT REF(e) INTO emp_ref FROM employee_tab e WHERE e.employee_id = 370;
  -- the following assignment raises an error, not allowed in PL/SQL  emp := DEREF(emp_ref);  --  cannot use DEREF in procedural statements
  emp_name := emp.first_name || &#39; &#39; || emp.last_name;
  DBMS_OUTPUT.PUT_LINE(emp_name);
END;
/
</pre></div>
<!-- class="example" -->
<p>This assignment raises an error as described below:</p>
<pre>not allowed in PL/SQL
-- emp_name := emp_ref.first_name || &#39; &#39; || emp_ref.last_name;
-- emp := DEREF(emp_ref); not allowed, cannot use DEREF in procedural statements
</pre>
<p>For detailed information on the <code>DEREF</code> function, see <a class="olink SQLRF00634" href="../SQLRF/functions062.htm#SQLRF00634"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i21148"></a>
<div id="ADOBJ7186" class="sect1">
<h2 class="sect1">Using Overloading in PL/SQL with Inheritance<a id="sthref319"></a><a id="sthref320"></a><a id="sthref321"></a><a id="sthref322"></a><a id="sthref323"></a></h2>
<p>Overloading allows you to substitute a subtype value for a formal parameter that is a supertype. This capability is known as substitutability. This section is about this aspect of overloading.</p>
<p class="subhead2"><a id="ADOBJ7187"></a>Rules of Substitution</p>
<p>If more than one instance of an overloaded procedure matches the procedure call, the following substitution rules determine which procedure, if any, is called:</p>
<ul>
<li>
<p>If the signatures of the overloaded procedures only differ in that some parameters are object types from the same supertype-subtype hierarchy, the closest match is used. The closest match is one where all the parameters are at least as close as any other overloaded instance, as determined by the depth of inheritance between the subtype and supertype, and at least one parameter is closer.</p>
</li>
<li>
<p>If instances of two overloaded methods match, and some argument types are closer in one overloaded procedure while others are closer in the second procedure, a semantic error occurs.</p>
</li>
<li>
<p>If some parameters differ in their position within the object type hierarchy, and other parameters are of different data types so that an implicit conversion would be necessary, then a semantic error occurs.</p>
</li>
</ul>
<p><a href="#CHDCJCFD">Example 3-9</a> creates a type hierarchy that has three levels starting with <code>super_t</code>. There is a package with two overloaded instances of a function that are the same except for the position of the argument type in the type hierarchy. The invocation declares a variable of type <code>final_t</code>, and then calls the overloaded function.</p>
<p>The instance of the function that executes is the one that accepts a <code>sub_t</code> parameter, because <code>sub_t</code> is closer to <code>final_t</code> than <code>super_t</code> in the hierarchy. This follows the rules of substitution.</p>
<p>Note that because determining which instance to call happens at compile time, the fact that the argument passed in was also a <code>final_t</code> is ignored. If the declaration was <code>v</code> <code>super_t</code> <code>:=</code> <code>final_t(1,2,3)</code>, the overloaded function with the argument <code>super_t</code> would be called.</p>
<div id="ADOBJ7188" class="example">
<p class="titleinexample"><a id="CHDCJCFD"></a>Example 3-9 Resolving PL/SQL Functions With Inheritance</p>
<pre>CREATE OR REPLACE TYPE super_t AS OBJECT
  (n NUMBER) NOT final;
/
CREATE OR REPLACE TYPE sub_t UNDER super_t
  (n2 NUMBER) NOT final;
/
CREATE OR REPLACE TYPE <span class="bold">final_t</span> UNDER sub_t
  (n3 NUMBER);
/
CREATE OR REPLACE PACKAGE p IS
   FUNCTION func (arg super_t) RETURN NUMBER;
   FUNCTION func (<span class="bold">arg sub_t</span>) RETURN NUMBER;
END;
/
CREATE OR REPLACE PACKAGE BODY p IS
   FUNCTION func (arg super_t) RETURN NUMBER IS BEGIN RETURN 1; END;
   FUNCTION func (<span class="bold">arg sub_t</span>) RETURN NUMBER IS BEGIN RETURN 2; END;
END;
/

DECLARE
  <span class="bold">v final_t := final_t(1,2,3)</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE(p.func(v));  -- prints 2
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDFGAII">Example 3-10</a>, determining which instance to call happens at run time because the functions are overriding member functions of the type hierarchy. This is dynamic method dispatch, described in <a href="adobjbas.htm#i468270">&#34;Dynamic Method Dispatch&#34;</a>.</p>
<p>Though <code>v</code> is an instance of <code>super_t</code>, because the value of <code>final_t</code> is assigned to <code>v</code>, the <code>sub_t</code> instance of the function is called, following the rules of substitution.</p>
<div id="ADOBJ7189" class="example">
<p class="titleinexample"><a id="CHDFGAII"></a>Example 3-10 Resolving PL/SQL Functions With Inheritance Dynamically</p>
<pre>-- Perform the following drop commands if you created these objects in Ex. 3-9
-- DROP PACKAGE p;
-- DROP TYPE final_t;
-- DROP TYPE _sub_t;
-- DROP TYPE super_t FORCE;
CREATE OR REPLACE TYPE super_t AS OBJECT
  (n NUMBER, MEMBER FUNCTION func RETURN NUMBER) NOT final;
/
CREATE OR REPLACE TYPE BODY super_t AS
 MEMBER FUNCTION func RETURN NUMBER IS BEGIN RETURN 1; END; END;
/
CREATE TYPE sub_t UNDER super_t
  (n2 NUMBER,
   OVERRIDING MEMBER FUNCTION func RETURN NUMBER) NOT final;
/
CREATE OR REPLACE TYPE BODY sub_t AS
 OVERRIDING MEMBER FUNCTION func RETURN NUMBER IS BEGIN RETURN 2; END; END;
/
CREATE OR REPLACE TYPE final_t UNDER sub_t
  (n3 NUMBER);
/

DECLARE
  v super_t := final_t(1,2,3);
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;answer:&#39;|| v.func); -- prints 2
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CIHJFFCI"></a>
<div id="ADOBJ07005" class="sect1">
<h2 class="sect1">Using Dynamic SQL With Objects<a id="sthref324"></a><a id="sthref325"></a></h2>
<p>Dynamic SQL is a feature of PL/SQL that enables you to enter SQL information at run time, such as: a table name, the full text of a SQL statement, or variable information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS011" href="../LNPLS/dynamic.htm#LNPLS011"><span class="italic">Oracle Database PL/SQL Language Reference</span></a></div>
<p><a href="#CHDHCFAB">Example 3-11</a> illustrates the use of objects and collections with dynamic SQL. First, the example defines the object type <code>person_typ</code> and the <code>VARRAY</code> type <code>hobbies_var</code>, then it defines the package, <code>teams</code>, that uses these types. You need <code>AUTHID</code> <code>CURRENT_USER</code> to execute dynamic package methods; otherwise, these methods raise an insufficient privileges error when you run <a href="#CHDBHEII">Example 3-12</a>.</p>
<div id="ADOBJ7190" class="example">
<p class="titleinexample"><a id="CHDHCFAB"></a>Example 3-11 A Package that Uses Dynamic SQL for Object Types and Collections</p>
<pre>CREATE OR REPLACE TYPE person_typ AS OBJECT (name VARCHAR2(25), age NUMBER);
/
CREATE TYPE hobbies_var AS VARRAY(10) OF VARCHAR2(25);
/
CREATE OR REPLACE PACKAGE teams 
   <span class="bold">AUTHID CURRENT_USER</span> AS
   PROCEDURE create_table (tab_name VARCHAR2);
   PROCEDURE insert_row (tab_name VARCHAR2, p person_typ, h hobbies_var);
   PROCEDURE print_table (tab_name VARCHAR2);
END;
/
CREATE OR REPLACE PACKAGE BODY teams AS
   PROCEDURE create_table (tab_name VARCHAR2) IS
   BEGIN
      EXECUTE IMMEDIATE &#39;CREATE TABLE &#39; || tab_name ||
                        &#39; (pers person_typ, hobbs hobbies_var)&#39;;
   END;
   PROCEDURE insert_row (
      tab_name VARCHAR2,
      p person_typ,
      h hobbies_var) IS
   BEGIN
      EXECUTE IMMEDIATE &#39;INSERT INTO &#39; || tab_name ||
         &#39; VALUES (:1, :2)&#39; USING p, h;
   END;
   PROCEDURE print_table (tab_name VARCHAR2) IS
      TYPE  refcurtyp IS REF CURSOR;
      v_cur refcurtyp;
      p     person_typ;
      h     hobbies_var;
   BEGIN
      OPEN v_cur FOR &#39;SELECT pers, hobbs FROM &#39; || tab_name;
      LOOP
         FETCH v_cur INTO p, h;
         EXIT WHEN v_cur%NOTFOUND;
         -- print attributes of &#39;p&#39; and elements of &#39;h&#39;
         DBMS_OUTPUT.PUT_LINE(&#39;Name: &#39; || p.name || &#39; - Age: &#39; || p.age);
         FOR i IN h.FIRST..h.LAST 
         LOOP
           DBMS_OUTPUT.PUT_LINE(&#39;Hobby(&#39; || i || &#39;): &#39; || h(i));
         END LOOP;
      END LOOP;
      CLOSE v_cur;
   END;
END;
/
</pre></div>
<!-- class="example" -->
<p>From an anonymous block, you might call the procedures in package <code>TEAMS</code>:</p>
<div id="ADOBJ7191" class="example">
<p class="titleinexample"><a id="CHDBHEII"></a>Example 3-12 Calling Procedures from the TEAMS Package</p>
<pre>DECLARE
   team_name VARCHAR2(15);
BEGIN
   team_name := &#39;Notables&#39;;
   TEAMS.create_table(team_name);
   TEAMS.insert_row(team_name, person_typ(&#39;John&#39;, 31),
      hobbies_var(&#39;skiing&#39;, &#39;coin collecting&#39;, &#39;tennis&#39;));
   TEAMS.insert_row(team_name, person_typ(&#39;Mary&#39;, 28),
      hobbies_var(&#39;golf&#39;, &#39;quilting&#39;, &#39;rock climbing&#39;, &#39;fencing&#39;));
   TEAMS.print_table(team_name);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3980">
<tr>
<td class="cellalignment3987">
<table class="cellalignment3985">
<tr>
<td class="cellalignment3984"><a href="adobjbas.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3984"><a href="adobjenv.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3989">
<table class="cellalignment3983">
<tr>
<td class="cellalignment3984"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3984"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3984"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3984"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3984"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3984"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>