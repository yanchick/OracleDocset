<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-748"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Applying%20an%20Object%20Model%20to%20Relational%20Data"></a><title>Applying an Object Model to Relational Data</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-08-06T13:19:6Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Object-Relational Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53277-02"/>
<meta name="dcterms.isVersionOf" content="ADOBJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adobjcol.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adobjmng.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53277-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/16</span> <!-- End Header -->
<div id="ADOBJ005" class="chapter"><a id="g444865"></a> <a id="i433585"></a>
<h1 class="chapter"><span class="secnum">6</span> Applying an Object Model to Relational Data</h1>
<p><a id="sthref522"></a>This chapter shows how to write object-oriented applications without changing the underlying structure of your relational data.</p>
<p>The chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i435541">Why Use Object Views</a></p>
</li>
<li>
<p><a href="#i435558">Defining Object Views</a></p>
</li>
<li>
<p><a href="#i435613">Using Object Views in Applications</a></p>
</li>
<li>
<p><a href="#i434727">Nesting Objects in Object Views</a></p>
</li>
<li>
<p><a href="#i436206">Identifying Null Objects in Object Views</a></p>
</li>
<li>
<p><a href="#i434776">Using Nested Tables and Varrays in Object Views</a></p>
</li>
<li>
<p><a href="#i434777">Specifying Object Identifiers for Object Views</a></p>
</li>
<li>
<p><a href="#i438678">Creating References to View Objects</a></p>
</li>
<li>
<p><a href="#i434837">Modelling Inverse Relationships with Object Views</a></p>
</li>
<li>
<p><a href="#i436241">Updating Object Views</a></p>
</li>
<li>
<p><a href="#i434900">Applying the Object Model to Remote Tables</a></p>
</li>
<li>
<p><a href="#i436232">Defining Complex Relationships in Object Views</a></p>
</li>
<li>
<p><a href="#i436788">Object View Hierarchies</a></p>
</li>
</ul>
<a id="i435541"></a>
<div id="ADOBJ00501" class="sect1">
<h2 class="sect1">Why Use Object Views<a id="sthref523"></a><a id="sthref524"></a><a id="sthref525"></a></h2>
<p>Just as a view is a virtual table, an object view is a virtual object table. Each row in the view is an object: you can call its methods, access its attributes using the dot notation, and create a <code>REF</code> that points to it.</p>
<p>You can run object-oriented applications without converting existing tables to a different physical structure. To do this, you can use object views to prototype or transition to object-oriented applications because the data in the view can be taken from relational tables and accessed as if the table were defined as an object table.</p>
<p>Object views can be used like relational views to present only the data that you want users to see. For example, you might create an object view that presents selected data from an employee table but omits sensitive data about salaries.</p>
<p>Using object views can lead to better performance. Relational data that makes up a row of an object view traverses the network as a unit, potentially saving many round trips.</p>
<p>You can fetch relational data into the client-side object cache and map it into C structures or C++ or Java classes, so 3GL applications can manipulate it just like native classes. You can also use object-oriented features like complex object retrieval with relational data.</p>
<ul>
<li>
<p>You can query the data in new ways by synthesizing objects from relational data. You can view data from multiple tables by using object dereferencing instead of writing complex joins with multiple tables.</p>
</li>
<li>
<p>You can pin the object data from object views and use the data in the client side object cache. When you retrieve these synthesized objects in the object cache by means of specialized object-retrieval mechanisms, you reduce network traffic.</p>
</li>
<li>
<p>You gain great flexibility when you create an object model within a view, enabling you to continue developing the model. If you need to alter an object type, you can simply replace the invalidated views with a new definition.</p>
</li>
<li>
<p>You do not place any restrictions on the characteristics of the underlying storage mechanisms by using objects in views. By the same token, you are not limited by the restrictions of current technology. For example, you can synthesize objects from relational tables which are parallelized and partitioned.</p>
</li>
<li>
<p>You can create different complex data models from the same underlying data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for a complete description of SQL syntax and usage</p>
</li>
<li>
<p><a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for a complete discussion of PL/SQL capabilities</p>
</li>
<li>
<p><a class="olink JJDEV" href="../JJDEV/toc.htm"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> for a complete discussion of Java</p>
</li>
<li>
<p><a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for a complete discussion of those facilities</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i435558"></a>
<div id="ADOBJ00503" class="sect1">
<h2 class="sect1">Defining Object Views<a id="sthref526"></a><a id="sthref527"></a></h2>
<p>The procedure for defining an object view is:</p>
<ol>
<li>
<p>Define an object type, where each attribute of the type corresponds to an existing column in a relational table.</p>
</li>
<li>
<p>Write a query that specifies how to extract the data from the relational table. Specify the columns in the same order as the attributes in the object type.</p>
</li>
<li>
<p>Specify a unique value, based on attributes of the underlying data, to serve as an object identifier, enabling you to create pointers (<code>REF</code>s) to the objects in the view. You can often use an existing primary key.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjint.htm#CHDCAIAF">&#34;Using Object Identifiers to Identify Row Objects&#34;</a></div>
</li>
</ol>
<p>To update an object view where the attributes of the object type do not correspond exactly to columns in existing tables, you may need to do the following:</p>
<p>Write an <code>INSTEAD</code> <code>OF</code> trigger procedure for Oracle to execute whenever an application program tries to update data in the object view. See <a href="#i436241">&#34;Updating Object Views&#34;</a>.</p>
<p>After these steps, you can use an object view just like an object table.</p>
<p><a href="#CHDEHDJD">Example 6-1</a> contains SQL statements to define an object view, where each row in the view is an object of type <code>employee_t</code>:</p>
<div id="ADOBJ7316" class="example">
<p class="titleinexample"><a id="CHDEHDJD"></a>Example 6-1 Creating an Object View</p>
<pre>CREATE TABLE emp_table (
    empnum   NUMBER (5),
    ename    VARCHAR2 (20),
    salary   NUMBER (9,2),
    job      VARCHAR2 (20));

CREATE TYPE employee_t AS OBJECT (
    empno    NUMBER (5),
    ename    VARCHAR2 (20),
    salary   NUMBER (9,2),
    job      VARCHAR2 (20));
/

CREATE VIEW emp_view1 OF employee_t
    <span class="bold">WITH OBJECT IDENTIFIER</span> (empno) AS
        SELECT e.empnum, e.ename, e.salary, e.job
            FROM emp_table e
            WHERE job = &#39;Developer&#39;;

insert into emp_table values(1,&#39;John&#39;,1000.00,&#39;Architect&#39;);
insert into emp_table values(2,&#39;Robert&#39;,900.00,&#39;Developer&#39;);
insert into emp_table values(3,&#39;James&#39;,2000.00,&#39;Director&#39;);

select * from emp_view1;


    EMPNO ENAME                    SALARY JOB
---------- -------------------- ---------- --------------------
         2 Robert                      900 Developer
</pre></div>
<!-- class="example" -->
<p>To access the data from the <code>empnum</code> column of the relational table, access the <code>empno</code> attribute of the object type.</p>
</div>
<!-- class="sect1" -->
<a id="i435613"></a>
<div id="ADOBJ00505" class="sect1">
<h2 class="sect1">Using Object Views in Applications<a id="sthref528"></a><a id="sthref529"></a><a id="sthref530"></a><a id="sthref531"></a><a id="sthref532"></a><a id="sthref533"></a><a id="sthref534"></a><a id="sthref535"></a></h2>
<p>Data in the rows of an object view may come from more than one table, but the object view still traverses the network in one operation. The instance appears in the client side object cache as a C or C++ structure or as a PL/SQL object variable. You can manipulate it like any other native structure.</p>
<p>You can refer to object views in SQL statements in the same way you refer to an object table. For example, object views can appear in a <code>SELECT</code> list, in an <code>UPDATE-SET</code> clause, or in a <code>WHERE</code> clause.</p>
<p>You can also define object views on object views.</p>
<p>You can access object view data on the client side using the same OCI calls you use for objects from object tables. For example, you can use <code>OCIObjectPin()</code> for <a href="glossary.htm#CHDGCJJG"><span class="xrefglossterm">pinning</span></a> a <code>REF</code> and <code>OCIObjectFlush()</code> for flushing an object to the server. When you update or flush an object to the database in an object view, the database updates the object view.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
See <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for more information about OCI calls.</div>
</div>
<!-- class="sect1" -->
<a id="i434727"></a>
<div id="ADOBJ00507" class="sect1">
<h2 class="sect1">Nesting Objects in Object Views<a id="sthref536"></a></h2>
<p>An object type can have other object types nested in it as attributes.</p>
<p>If the object type on which an object view is based has an attribute that itself is an object type, then you must provide column objects for this attribute as part of the process of creating the object view. If column objects of the attribute type already exist in a relational table, you can simply select them; otherwise, you must synthesize the object instances from underlying relational data just as you synthesize the principal object instances of the view. You synthesize, or create, these objects by calling the respective constructor methods of the object type to create the object instances, and you can populate their attributes with data from relational columns specified in the constructor.</p>
<p>For example, consider the department table <code>dept</code> in <a href="#CJAHHDDF">Example 6-2</a>. You might want to create an object view where the addresses are objects inside the department objects. That would allow you to define reusable methods for address objects, and use them for all kinds of addresses.</p>
<p>First, create the types for the address and department objects, then create the view containing the department number, name and address. The <code>address</code> objects are constructed from columns of the relational table.</p>
<div id="ADOBJ7317" class="example">
<p class="titleinexample"><a id="CJAHHDDF"></a>Example 6-2 Creating a View with Nested Object Types</p>
<pre>CREATE TABLE dept (
    deptno       NUMBER PRIMARY KEY,
    deptname     VARCHAR2(20),
    deptstreet   VARCHAR2(20),
    deptcity     VARCHAR2(10),
    deptstate    CHAR(2),
    deptzip      VARCHAR2(10));

CREATE TYPE address_t AS OBJECT (
   street   VARCHAR2(20),
    city    VARCHAR2(10),
    state   CHAR(2),
    zip     VARCHAR2(10));
/
CREATE TYPE dept_t AS OBJECT (
   deptno     NUMBER,
   deptname   VARCHAR2(20),
   address    <span class="bold">address_t</span> );
/

CREATE VIEW dept_view OF dept_t WITH OBJECT IDENTIFIER (deptno) AS
    SELECT d.deptno, d.deptname,
      address_t(d.deptstreet,d.deptcity,d.deptstate,d.deptzip) AS 
      deptaddr
      FROM dept d;

insert into dept values(1,&#39;Sales&#39;,&#39;500 Oracle pkwy&#39;,&#39;Redwood S&#39;,&#39;CA&#39;,&#39;94065&#39;);
insert into dept values(2,&#39;ST&#39;,&#39;400 Oracle Pkwy&#39;,&#39;Redwood S&#39;,&#39;CA&#39;,&#39;94065&#39;);
insert into dept values(3,&#39;Apps&#39;,&#39;300 Oracle pkwy&#39;,&#39;Redwood S&#39;,&#39;CA&#39;,&#39;94065&#39;);

select * from dept_view;
  
    DEPTNO DEPTNAME
---------- --------------------
ADDRESS(STREET, CITY, STATE, ZIP)
----------------------------------------------------------------------------------
         1 Sales
ADDRESS_T(&#39;500 Oracle pkwy&#39;, &#39;Redwood S&#39;, &#39;CA&#39;, &#39;94065&#39;)
 
         2 ST
ADDRESS_T(&#39;400 Oracle Pkwy&#39;, &#39;Redwood S&#39;, &#39;CA&#39;, &#39;94065&#39;)
 
         3 Apps
ADDRESS_T(&#39;300 Oracle pkwy&#39;, &#39;Redwood S&#39;, &#39;CA&#39;, &#39;94065&#39;)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i436206"></a>
<div id="ADOBJ00509" class="sect1">
<h2 class="sect1">Identifying Null Objects in Object Views<a id="sthref537"></a></h2>
<p>Because the constructor for an object never returns a null, none of the address objects in the preceding view can ever be null, even if the city, street, and so on columns in the relational table are all null. The relational table has no column that specifies whether or not the department address is null.</p>
<p>By using the <code>DECODE</code> function, or some other function, to return either a null or the constructed object, the null <code>deptstreet</code> column can be used to indicate that the whole address is null.</p>
<div id="ADOBJ7318" class="example">
<p class="titleinexample"><a id="sthref538"></a>Example 6-3 Identifying Null Objects in an Object View</p>
<pre>-- Requires Ex. 6-2
CREATE OR REPLACE VIEW dept_view AS
  SELECT d.deptno, d.deptname,
        DECODE(d.deptstreet, NULL, NULL, 
        address_t(d.deptstreet, d.deptcity, d.deptstate, d.deptzip)) AS deptaddr
  FROM dept d;
</pre></div>
<!-- class="example" -->
<p>This technique makes it impossible to directly update the department address through the view, because it does not correspond directly to a column in the relational table. Instead, define an <code>INSTEAD</code> <code>OF</code> trigger over the view to handle updates to this column.</p>
</div>
<!-- class="sect1" -->
<a id="i434776"></a>
<div id="ADOBJ00511" class="sect1">
<h2 class="sect1">Using Nested Tables and Varrays in Object Views<a id="sthref539"></a><a id="sthref540"></a></h2>
<p>Collections, both nested tables and <code>VARRAY</code>s, can be columns in views. You can select these collections from underlying collection columns or you can synthesize them using subqueries. The <code>CAST-MULTISET</code> operator provides a way of synthesizing such collections.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDBHGGE">Single-Level Collections in Object Views</a></p>
</li>
<li>
<p><a href="#CHDJFCHD">Multilevel Collections in Object Views</a></p>
</li>
</ul>
<a id="CHDBHGGE"></a>
<div id="ADOBJ7319" class="sect2">
<h3 class="sect2">Single-Level Collections in Object Views</h3>
<p>Using <a href="#CHDEHDJD">Example 6-1</a> and <a href="#CJAHHDDF">Example 6-2</a> as starting points, each employee in an <code>emp</code> relational table has the structure in <a href="#CJAGBBEC">Example 6-4</a>. Using this relational table, you can construct a <code>dept_view</code> with the department number, name, address and a collection of employees belonging to the department.</p>
<p>First, define a nested table type for the employee type <code>employee_t</code>. Next, define a department type with a department number, name, address, and a nested table of employees. Finally, define the object view <code>dept_view</code>.</p>
<div id="ADOBJ7320" class="example">
<p class="titleinexample"><a id="CJAGBBEC"></a>Example 6-4 Creating a View with a Single-Level Collection</p>
<pre>-- Requires Ex. 6-1 and Ex. 6-2
CREATE TABLE emp (
   empno    NUMBER PRIMARY KEY,
   empname  VARCHAR2(20),
   salary   NUMBER,
   job      VARCHAR2 (20), 
   deptno   NUMBER REFERENCES dept(deptno));

CREATE TYPE employee_list_t AS TABLE OF employee_t;  -- nested table
/
CREATE TYPE dept_t AS OBJECT (
    deptno     NUMBER,
    deptname   VARCHAR2(20),
    address    address_t,
    emp_list   employee_list_t);
/
CREATE VIEW dept_view OF dept_t WITH OBJECT IDENTIFIER (deptno) AS
    SELECT d.deptno, d.deptname,
     address_t(d.deptstreet,d.deptcity,d.deptstate,d.deptzip) AS deptaddr,
             <span class="bold">CAST</span>( <span class="bold">MULTISET</span> (
                           SELECT e.empno, e.empname, e.salary, e.job
                           FROM emp e 
                           WHERE e.deptno = d.deptno) 
                        AS employee_list_t)
                   AS emp_list
   FROM dept d;

insert into dept values(100,&#39;ST&#39;,&#39;400 Oracle Pkwy&#39;,&#39;Redwood S&#39;,&#39;CA&#39;,94065);
insert into dept values(200,&#39;Sales&#39;,&#39;500 Oracle Pkwy&#39;,&#39;Redwood S&#39;,&#39;CA&#39;,94065);
insert into emp values(1,&#39;John&#39;,900,&#39;Developer1&#39;,100);
 
insert into emp values(2,&#39;Robert&#39;,1000,&#39;Developer2&#39;,100);
insert into emp values(3,&#39;Mary&#39;, 1000,&#39;Apps1&#39;,200);
insert into emp values(4,&#39;Maria&#39;,1500,&#39;Developer3&#39;,200);
select * from dept_view where deptno = 100;
 
    DEPTNO DEPTNAME
---------- --------------------
ADDRESS(STREET, CITY, STATE, ZIP)
--------------------------------------------------------------------------------
EMP_LIST(EMPNO, ENAME, SALARY, JOB)
--------------------------------------------------------------------------------
       100 ST
ADDRESS_T(&#39;400 Oracle Pkwy&#39;, &#39;Redwood S&#39;, &#39;CA&#39;, &#39;94065&#39;)
EMPLOYEE_LIST_T(EMPLOYEE_T(1, &#39;John&#39;, 900, &#39;Developer1&#39;), EMPLOYEE_T(2, &#39;Robert&#39;
, 1000, &#39;Developer2&#39;))
 
 
select emp_list from dept_view where deptno = 100;
 
EMP_LIST(EMPNO, ENAME, SALARY, JOB)
--------------------------------------------------------------------------------
EMPLOYEE_LIST_T(EMPLOYEE_T(1, &#39;John&#39;, 900, &#39;Developer1&#39;), EMPLOYEE_T(2, &#39;Robert&#39;
, 1000, &#39;Developer2&#39;))
</pre></div>
<!-- class="example" -->
<p>The <code>SELECT</code> subquery inside the <code>CAST-MULTISET</code> block selects the list of employees that belong to the current department. The <code>MULTISET</code> keyword indicates that this is a list as opposed to a singleton value. The <code>CAST</code> operator casts the result set into the appropriate type, in this case to the <code>employee_list_t</code> nested table type.</p>
<p>A query on this view could provide the list of departments, with each department row containing the department number, name, the address object and a collection of employees belonging to the department.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJFCHD"></a>
<div id="ADOBJ7321" class="sect2">
<h3 class="sect2">Multilevel Collections in Object Views<a id="sthref541"></a><a id="sthref542"></a></h3>
<p>Multilevel collections and single-level collections are created and used in object views in the same way. The only difference is that, for a multilevel collection, you must create an additional level of collections.</p>
<p><a href="#CJABFAFF">Example 6-5</a> builds an object view containing a multilevel collection. The view is based on flat relational tables that contain no collections. As a preliminary to building the object view, the example creates the object and collection types it uses. An object type (for example, <code>emp_t</code>) is defined to correspond to each relational table, with attributes whose types correspond to the types of the respective table columns. In addition, the employee type has a nested table (attribute) of projects, and the department type has a nested table (attribute) of employees. The latter nested table is a multilevel collection. The <code>CAST-MULTISET</code> operator is used in the <code>CREATE</code> <code>VIEW</code> statement to build the collections.</p>
<div id="ADOBJ7322" class="example">
<p class="titleinexample"><a id="CJABFAFF"></a>Example 6-5 Creating a View with Multilevel Collections</p>
<pre>CREATE TABLE depts
  ( deptno     NUMBER,
    deptname   VARCHAR2(20));

CREATE TABLE emps
  ( ename VARCHAR2(20),
    salary     NUMBER,
    deptname   VARCHAR2(20));

CREATE TABLE projects
  ( projname   VARCHAR2(20),
    mgr        VARCHAR2(20));

CREATE TYPE project_t AS OBJECT
  ( projname   VARCHAR2(20),
    mgr        VARCHAR2(20));
/
CREATE TYPE nt_project_t AS TABLE OF project_t;
/
CREATE TYPE emp_t AS OBJECT
(  ename      VARCHAR2(20),
   salary     NUMBER,
   deptname   VARCHAR2(20),
   projects   nt_project_t );
/
CREATE TYPE nt_emp_t AS TABLE OF emp_t;
/
CREATE TYPE depts_t AS OBJECT
  ( deptno     NUMBER,
    deptname   VARCHAR2(20),
    emps       nt_emp_t );
/
CREATE VIEW v_depts OF depts_t WITH OBJECT IDENTIFIER (deptno) AS
  SELECT d.deptno, d.deptname, 
    CAST(MULTISET(SELECT e.ename, e.salary, e.deptname,
        CAST(MULTISET(SELECT p.projname, p.mgr
          FROM projects p
          WHERE p.mgr = e.ename)
        AS nt_project_t)
      FROM emps e
      WHERE e.deptname = d.deptname)
    AS nt_emp_t)
  FROM depts d;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i434777"></a>
<div id="ADOBJ00513" class="sect1">
<h2 class="sect1">Specifying Object Identifiers for Object Views<a id="sthref543"></a></h2>
<p>You can construct pointers (<code>REF</code>s) to the row objects in an object view. Because the view data is not stored persistently, you must specify a set of distinct values to be used as object identifiers. Object identifiers allow you to reference the objects in object views and pin them in the object cache.</p>
<p>If the view is based on an object table or an object view, then there is already an object identifier associated with each row and you can reuse them. To do this, either omit the <code>WITH</code> <code>OBJECT</code> <code>IDENTIFIER</code> clause or specify <code>WITH</code> <code>OBJECT</code> <code>IDENTIFIER</code> <code>DEFAULT</code>.</p>
<p>However, if the row object is synthesized from relational data, you must choose some other set of values.</p>
<p>You can specify object identifiers based on the primary key. This turns the set of unique keys that identify the row object into an identifier for the object. These values must be unique within the rows selected out of the view, because duplicates would lead to problems during navigation through object references.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjint.htm#CHDCAIAF">&#34;Using Object Identifiers to Identify Row Objects&#34;</a> for a description of primary-key based and system-generated object identifiers</div>
<ul>
<li>
<p>Object views created with the <code>WITH</code> <code>OBJECT</code> <code>IDENTIFIER</code> Clause</p>
<p>An object view created with the <code>WITH</code> <code>OBJECT</code> <code>IDENTIFIER</code> clause has an object identifier derived from the primary key.</p>
<p>For example, note the definition of the object type <code>dept_t</code> and the object view <code>dept_view</code> described in <a href="#CHDBHGGE">&#34;Single-Level Collections in Object Views&#34;</a>.</p>
<p>Because the underlying relational table has <code>deptno</code> as the primary key, each department row has a unique department number. In the view, the <code>deptno</code> column becomes the <code>deptno</code> attribute of the object type. Once you know that <code>deptno</code> is unique within the view objects, you can specify it as the object identifier.</p>
</li>
<li>
<p>Object views created with the <code>WITH</code> <code>OBJECT</code> <code>IDENTIFIER</code> <code>DEFAULT</code> Clause</p>
<p>If the <code>WITH</code> <code>OBJECT</code> <code>IDENTIFIER</code> <code>DEFAULT</code> clause is specified, the object identifier is either system-generated or primary-key based, depending on the underlying table or view definition.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
See <a href="adobjdes.htm#i443361">&#34;Storage Considerations for Object Identifiers (OIDs)&#34;</a>.</div>
</div>
<!-- class="sect1" -->
<a id="i438678"></a>
<div id="ADOBJ00515" class="sect1">
<h2 class="sect1">Creating References to View Objects<a id="sthref544"></a><a id="sthref545"></a></h2>
<p>In this connected group of examples, <a href="#CJAHHDDF">Example 6-2</a> and <a href="#CJAGBBEC">Example 6-4</a>, each object selected out of the <code>dept_view</code> view has a unique object identifier derived from the department number value. In the relational case, the foreign key <code>deptno</code> in the <code>emp</code> employee table matches the <code>deptno</code> primary key value in the <code>dept</code> department table. The primary key value creates the object identifier in the <code>dept_view</code>, allowing the foreign key value in the <code>emp_view</code> to create a reference to the primary key value in <code>dept_view</code>.</p>
<p>To synthesize a primary key object reference, use the <code>MAKE_REF</code> operator. This takes the view or table name that the reference points to, and a list of foreign key values, to create the object identifier portion of the reference that matches a specific object in the referenced view.</p>
<p><a href="#CJAEDIJE">Example 6-6</a> creates an <code>emp_view</code> view which has the employee&#39;s number, name, salary and a reference to the employee&#39;s department, by first creating the employee type <code>emp_t</code> and then the view based on that type.</p>
<div id="ADOBJ7323" class="example">
<p class="titleinexample"><a id="CJAEDIJE"></a>Example 6-6 Creating a Reference to Objects in a View</p>
<pre>-- Requires Ex. 6-2 and Ex. 6-4
-- if you have previously created emp_t, you must drop it
CREATE TYPE emp_t AS OBJECT (
  empno    NUMBER,
  ename    VARCHAR2(20),
  salary   NUMBER,
  deptref  REF dept_t);
/
CREATE OR REPLACE VIEW emp_view OF emp_t WITH OBJECT IDENTIFIER(empno)
   AS SELECT e.empno, e.empname, e.salary, 
                      <span class="bold">MAKE_REF</span>(<span class="bold">dept_view</span>, e.deptno) 
         FROM emp e;
</pre></div>
<!-- class="example" -->
<p>The <code>deptref</code> column in the view holds the department reference. The following simple query retrieves all employees whose departments are located in the city of Redwood S:</p>
<pre>SELECT e.empno, e.salary, e.deptref.deptno
  FROM emp_view e
 WHERE e.deptref.address.city = &#39;Redwood S&#39;;

   EMPNO     SALARY DEPTREF.DEPTNO
---------- ---------- --------------
         2       1000            100
         1        900            100
         4       1500            200
         3       1000            200
</pre>
<p>Note that you can also create <code>emp_view</code> using the <code>REF</code> modifier instead of <code>MAKE_REF</code> as follows to get the reference to the <code>dept_view</code> objects:</p>
<div id="ADOBJ7324" class="example">
<p class="titleinexample"><a id="CHDIGDFI"></a>Example 6-7 Query References to Objects with REF</p>
<pre>-- Requires Ex. 6-2, Ex. 6-4, and Ex. 6-6
CREATE OR REPLACE VIEW emp_view OF emp_t WITH OBJECT IDENTIFIER(empno)
   AS SELECT e.empno, e.empname, e.salary, <span class="bold">REF</span>(d)
         FROM emp e, dept_view d
          WHERE e.deptno = d.deptno;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDIGDFI">Example 6-7</a>, the <code>dept_view</code> joins the <code>emp</code> table on the <code>deptno</code> key.</p>
<p>The advantage of using the <code>MAKE_REF</code> operator, as in <a href="#CJAEDIJE">Example 6-6</a>, instead of the <code>REF</code> modifier is that with the former, you can create circular references. For example, you can create an employee view that has a reference to the employee&#39;s department, while the department view has a list of references to the employees who work in that department.</p>
<p>Note that if the object view has a primary-key based object identifier, the reference to such a view is primary-key based. On the other hand, a reference to a view with system-generated object identifier is a system-generated object reference. This difference is only relevant when you create object instances in the OCI object cache and need to get the reference to the newly created objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjenv.htm#CHDBFGEC">&#34;Object Cache&#34;</a></div>
<p>As with synthesized objects, you can also select persistently stored references as view columns and use them seamlessly in queries. However, the object references to view objects cannot be stored persistently.</p>
</div>
<!-- class="sect1" -->
<a id="i434837"></a>
<div id="ADOBJ00517" class="sect1">
<h2 class="sect1">Modelling Inverse Relationships with Object Views</h2>
<p>You can use views with objects to model inverse relationships.</p>
<p class="subhead1"><a id="ADOBJ7325"></a>One-to-One Relationships<a id="sthref546"></a></p>
<p>One-to-one relationships can be modeled with inverse object references. For example, suppose that each employee has a particular desktop computer, and that the computer belongs to that employee only. A relational model would capture this using foreign keys either from the computer table to the employee table, or in the reverse direction. Using views, you can model the objects so there is an object reference from the employee to the computer object and also a reference from the computer object to the employee.</p>
<p class="subhead1"><a id="ADOBJ7326"></a>One-to-Many and Many-to-One Relationships</p>
<p>One-to-many relationships (or many-to-many relationships) can be modeled either by using object references or by embedding the objects. One-to-many relationship can be modeled by having a collection of objects or object references. The many-to-one side of the relationship can be modeled using object references.</p>
<p>Consider the department-employee case. In the underlying relational model, the foreign key is in the employee table. The relationship between departments and employees can be modeled using collections in views. The department view can have a collection of employees, and the employee view can have a reference to the department (or inline the department values). This gives both the forward relation (from employee to department) and the inverse relation (department to list of employees). The department view can also have a collection of references to employee objects instead of embedding the employee objects.</p>
</div>
<!-- class="sect1" -->
<a id="i436241"></a>
<div id="ADOBJ00519" class="sect1">
<h2 class="sect1">Updating Object Views<a id="sthref547"></a><a id="sthref548"></a><a id="sthref549"></a></h2>
<p>You can update, insert, and delete data in an object view using the same SQL DML you use for object tables. Oracle updates the base tables of the object view if there is no ambiguity.</p>
<p>Views are not always directly updatable.</p>
<p>A view is not directly updatable if the view query contains joins, set operators, aggregate functions, or <code>GROUP BY</code> or <code>DISTINCT</code> clauses. Also, individual columns of a view are not directly updatable if they are based on pseudocolumns or expressions in the view query.</p>
<p>If a view is not directly updatable, you can still update it indirectly using <code>INSTEAD&nbsp;OF</code> triggers. To do so, you define an <code>INSTEAD</code> <code>OF</code> trigger for each kind of DML statement you want to execute on the view. In the <code>INSTEAD</code> <code>OF</code> trigger, code the operations that must take place on the underlying tables of the view to accomplish the desired change in the view. Then, when you issue a DML statement for which you have defined an <code>INSTEAD</code> <code>OF</code> trigger, Oracle transparently runs the associated trigger.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i436099">&#34;Using INSTEAD OF Triggers to Control Mutating and Validation&#34;</a> for an example of an <code>INSTEAD</code> <code>OF</code> trigger</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
In an object view hierarchy, <code>UPDATE</code> and <code>DELETE</code> statements operate polymorphically just as <code>SELECT</code> statements do: the set of rows picked out by an <code>UPDATE</code> or <code>DELETE</code> statement on a view implicitly includes qualifying rows in any subviews of the specified view as well.</div>
<p>For example, the following statement, which deletes all persons from <code>Person_v</code>, also deletes all students from <code>Student_v</code> and all employees from the <code>Employee_v</code> view.</p>
<p><code>DELETE FROM Person_v;</code></p>
<p>To exclude subviews and restrict the affected rows to just those in the view specified, use the <code>ONLY</code> keyword. For example, the following statement updates only persons and not employees or students.</p>
<p><code>UPDATE ONLY(Person_v) SET address = ...</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i436788">&#34;Object View Hierarchies&#34;</a> for a discussion of object view hierarchy and examples defining <code>Student_v</code> and <code>Employee_v</code> views</div>
<div id="ADOBJ7327" class="sect2"><a id="sthref550"></a>
<h3 class="sect2">Updating Nested Table Columns in Views<a id="sthref551"></a><a id="sthref552"></a><a id="sthref553"></a><a id="sthref554"></a></h3>
<p>You can modify a nested table by inserting new elements and updating or deleting existing elements. Nested table columns that are virtual or synthesized, as in a view, are not usually updatable. To overcome this, Oracle allows <code>INSTEAD</code> <code>OF</code> triggers to be created on these columns.</p>
<p>The <code>INSTEAD</code> <code>OF</code> trigger defined on a nested table column (of a view) is fired when the column is modified. Note that if the entire collection is replaced (by an update of the parent row), the <code>INSTEAD</code> <code>OF</code> trigger on the nested table column is not fired.</p>
</div>
<!-- class="sect2" -->
<a id="i436099"></a>
<div id="ADOBJ7328" class="sect2">
<h3 class="sect2">Using INSTEAD OF Triggers to Control Mutating and Validation</h3>
<p><code>INSTEAD</code> <code>OF</code> triggers provide a way to update complex views that otherwise could not be updated. They can also be used to enforce constraints, check privileges, and validate DML statements. Using these triggers, you can control mutation that might be caused by inserting, updating, and deleting in the objects created though an object view.</p>
<p>For instance, to enforce the condition that the number of employees in a department cannot exceed 10, you can write an <code>INSTEAD</code> <code>OF</code> trigger for the employee view. The trigger is not needed to execute the DML statement because the view can be updated, but you need it to enforce the constraint.</p>
<p><a href="#CJAGHHHB">Example 6-8</a> shows how to implement the trigger by means of SQL statements.</p>
<div id="ADOBJ7329" class="example">
<p class="titleinexample"><a id="CJAGHHHB"></a>Example 6-8 Creating INSTEAD OF Triggers on a View</p>
<pre>-- Requires Ex. 6-2, Ex. 6-4, and Ex. 6-6 
CREATE TRIGGER emp_instr INSTEAD OF INSERT on emp_view 
FOR EACH ROW
DECLARE
  dept_var dept_t;
  emp_count integer;
BEGIN
  -- Enforce the constraint
  -- First get the department number from the reference
  UTL_REF.SELECT_OBJECT(:NEW.deptref, dept_var);

  SELECT COUNT(*) INTO emp_count
    FROM emp
   WHERE deptno = dept_var.deptno;
  IF emp_count &lt; 9 THEN
     -- Do the insert
     INSERT INTO emp (empno, empname, salary, deptno) 
        VALUES (:NEW.empno, :NEW.ename, :NEW.salary, dept_var.deptno);
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjbas.htm#i454798">&#34;Triggers for Object Tables&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i434900"></a>
<div id="ADOBJ00523" class="sect1">
<h2 class="sect1">Applying the Object Model to Remote Tables<a id="sthref555"></a></h2>
<p>Although you cannot directly access remote tables as object tables, object views let you access remote tables as if they were object tables.</p>
<p>Consider a company with two branches; one in Washington D.C. and another in Chicago. Each site has an employee table. The headquarters in Washington has a department table with a list of all the departments. To get a total view of the entire organization, you can create views over the individual remote tables and then a overall view of the organization.</p>
<p>To this requires the following:</p>
<ul>
<li>
<p>Update the entry in <code>listener.ora</code>, such as: <code>(ADDRESS=(PROTOCOL=tcp)</code> <code>(HOST=stadv07.us.example.com)(PORT=1640))</code></p>
</li>
<li>
<p>Add entries to <code>tnsnames.ora</code>, such as: <code>chicago=(DESCRIPTION= (ADDRESS=(PROTOCOL=ipc)(KEY=linux)) (CONNECT_DATA=(SERVICE_NAME=linux.regress.rdbms.dev.us.example.com)))</code></p>
</li>
<li>
<p>Provide <code>CREATE</code> <code>DATABASE</code> <code>LINK</code> code as shown in <a href="#CJAFADJD">Example 6-9</a></p>
</li>
</ul>
<p><a href="#CJAFADJD">Example 6-9</a> begins by creating an object view for each employee table and then creates the global view.</p>
<div id="ADOBJ7330" class="example">
<p class="titleinexample"><a id="CJAFADJD"></a>Example 6-9 Creating an Object View to Access Remote Tables</p>
<pre>-- Requires Ex. 6-2, Ex. 6-4, and Ex. 6-6 
-- Example requires DB links, such as these, modify for your use and uncomment
-- CREATE DATABASE LINK chicago CONNECT TO hr IDENTIFIED BY hr USING &#39;inst1&#39;;
-- CREATE DATABASE LINK washington CONNECT TO hr IDENTIFIED BY hr USING &#39;inst1&#39;;
CREATE VIEW emp_washington_view (eno, ename, salary, job)
   AS SELECT e.empno, e.empname, e.salary, e.job
          FROM emp@washington e;

CREATE VIEW emp_chicago_view (eno, ename, salary, job)
   AS SELECT e.empno, e.empname, e.salary, e.job
          FROM emp@chicago e;

CREATE VIEW orgnzn_view OF dept_t WITH OBJECT IDENTIFIER (deptno) 
    AS SELECT d.deptno, d.deptname,
          address_t(d.deptstreet,d.deptcity,d.deptstate,d.deptzip) AS deptaddr,
          CAST( MULTISET (
                      SELECT e.eno, e.ename, e.salary, e.job
                      FROM emp_washington_view e) 
                   AS employee_list_t) AS emp_list
       FROM dept d
       WHERE d.deptcity = &#39;Washington&#39;
   UNION ALL
       SELECT d.deptno, d.deptname,
           address_t(d.deptstreet,d.deptcity,d.deptstate,d.deptzip) AS deptaddr,
              CAST( MULTISET (
                       SELECT e.eno, e.ename, e.salary, e.job
                       FROM emp_chicago_view e) 
                    AS employee_list_t) AS emp_list
       FROM dept d
       WHERE d.deptcity = &#39;Chicago&#39;;
</pre></div>
<!-- class="example" -->
<p>This view has a list of all employees for each department. The <code>UNION</code> <code>ALL</code> clause is used because employees cannot work in more than one department.</p>
</div>
<!-- class="sect1" -->
<a id="i436232"></a>
<div id="ADOBJ00525" class="sect1">
<h2 class="sect1">Defining Complex Relationships in Object Views<a id="sthref556"></a></h2>
<p>You can define circular references in object views using the <code>MAKE_REF</code> operator: <code>view_A</code> can refer to <code>view_B</code> which in turn can refer to <code>view_A</code>. This allows an object view to synthesize a complex structure such as a graph from relational data.</p>
<p>For example, in the case of the department and employee, the department object currently includes a list of employees. To conserve space, you may want to put references to the employee objects inside the department object, instead of materializing all the employees within the department object. You can construct (pin) the references to employee objects, and later follow the references using the dot notation to extract employee information.</p>
<p>Because the employee object already has a reference to the department in which the employee works, an object view over this model contains circular references between the department view and the employee view.</p>
<p>You can create circular references between object views in two different ways:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Both ways to create circular references require the setup described in <a href="#CHDBFEGC">&#34;Tables and Types to Demonstrate Circular View References&#34;</a>.</div>
<ul>
<li>
<p>First View After Second View</p>
<ol>
<li>
<p>Create view A without any reference to view B.</p>
</li>
<li>
<p>Create view B, which includes a reference to view A.</p>
</li>
<li>
<p>Replace view A with a new definition that includes the reference to view B.</p>
</li>
</ol>
<p>See the example in <a href="#i438039">&#34;Method 1: Re-create First View After Creating Second View&#34;</a></p>
</li>
<li>
<p>First View Using the <code>FORCE</code> Keyword</p>
<ol>
<li>
<p>Create view A with a reference to view B using the <code>FORCE</code> keyword.</p>
</li>
<li>
<p>Create view B with a reference to view A. When view A is used, it is validated and re-compiled.</p>
</li>
</ol>
<p>See the example in <a href="#i438056">&#34;Method 2: Create First View Using FORCE Keyword&#34;</a></p>
</li>
</ul>
<p>Method 2 has fewer steps, but the <code>FORCE</code> keyword may hide errors in the view creation. You need to query the <code>USER_ERRORS</code> catalog view to see if there were any errors during the view creation. Use this method only if you are sure that there are no errors in the view creation statement.</p>
<p>Also, if errors prevent the views from being recompiled upon use, you must recompile them manually using the <code>ALTER</code> <code>VIEW</code> <code>COMPILE</code> command.</p>
<p>Perform the setup described next before attempting to use either method of creating circular view references.</p>
<a id="CHDBFEGC"></a>
<div id="ADOBJ7331" class="sect2">
<h3 class="sect2">Tables and Types to Demonstrate Circular View References<a id="sthref557"></a></h3>
<p>First, you need set up some relational tables and associated object types. Although the tables contain some objects, they are not object tables. To access the data objects, you will create object views later.</p>
<p>The <code>emp</code> table stores the employee information:</p>
<div id="ADOBJ7332" class="example">
<p class="titleinexample"><a id="CHDBBAGE"></a>Example 6-10 Creating emp table to demonstrate circular references</p>
<pre>CREATE TABLE emp
(  empno    NUMBER PRIMARY KEY,
   empname  VARCHAR2(20),
   salary   NUMBER,
   deptno   NUMBER );

-- first create a dummy, that is, incomplete, department type, so emp_t type
-- created later will succeed 

CREATE TYPE dept_t;
/

-- Create the employee type with a reference to the department, dept_t:
CREATE TYPE emp_t AS OBJECT
( eno NUMBER,
  ename VARCHAR2(20),
  salary  NUMBER,
  deptref REF dept_t );
/

-- Represent the list of references to employees as a nested table:
CREATE TYPE employee_list_ref_t AS TABLE OF REF emp_t;
/

-- Create the department table as a relational table
CREATE TABLE dept
(   deptno        NUMBER PRIMARY KEY,
    deptname      VARCHAR2(20),
    deptstreet    VARCHAR2(20),
    deptcity      VARCHAR2(10),
    deptstate     CHAR(2),
    deptzip       VARCHAR2(10) );

-- Create object types that map to columns from the relational tables:
CREATE TYPE address_t AS OBJECT 
( street        VARCHAR2(20),
   city         VARCHAR2(10),
   state        CHAR(2),
   zip          VARCHAR2(10));
/

-- Fill in the definition for dept_t, the incomplete type you previously created:
CREATE OR REPLACE TYPE dept_t AS OBJECT
( dno           NUMBER,
  dname         VARCHAR2(20),
  deptaddr      address_t,
  empreflist    employee_list_ref_t);
/
</pre></div>
<!-- class="example" -->
<p>As <a href="#CHDBBAGE">Example 6-10</a> indicates, you must create the <code>emp</code> table, then create a dummy department type, <code>dept_t</code> which will enable the <code>emp_t</code> type to succeed once you create it. After that, create <code>emp_t</code> with a reference to <code>dept_t</code>. Create a list of references to employees as a nested table, <code>employee_list_ref_t</code> and create the department table, <code>dept</code>. Then create an object type, <code>address_t</code> that has columns mapping to the relational tables, and finally fill in the definition for the incomplete <code>dept_t</code>.</p>
<p>The following is example data you could use:</p>
<pre>insert into emp values(1,&#39;John&#39;,&#39;900&#39;,100);
insert into emp values(2,&#39;james&#39;,&#39;1000&#39;,100);
insert into emp values(3,&#39;jack&#39;,2000,200);
</pre></div>
<!-- class="sect2" -->
<div id="ADOBJ7333" class="sect2"><a id="sthref558"></a>
<h3 class="sect2">Creating Object Views with Circular References</h3>
<p>Now that you have established the underlying relational table definitions, in the previous section, create the object views on top of them.</p>
<p class="subhead1"><a id="i438039"></a><a id="ADOBJ7334"></a>Method 1: Re-create First View After Creating Second View</p>
<p>First create the employee view with a null in the <code>deptref</code> column. Later, you can turn that column into a reference.</p>
<p>Next, create the department view, which includes references to the employee objects. This creates a list of references to employee objects, instead of including the entire employee object.</p>
<p>Next, re-create the employee view with the reference to the department view.</p>
<div id="ADOBJ7335" class="example">
<p class="titleinexample"><a id="CHDHCJJJ"></a>Example 6-11 Creating an Object View with a Circular Reference, Method 1</p>
<pre>-- Requires Ex. 6-10 
CREATE VIEW emp_view OF emp_t WITH OBJECT IDENTIFIER(eno)
   AS SELECT e.empno, e.empname, e.salary, NULL
         FROM emp e;

-- create department view, including references to the employee objects
CREATE VIEW dept_view OF dept_t WITH OBJECT IDENTIFIER(dno) 
   AS SELECT d.deptno, d.deptname, 
                address_t(d.deptstreet,d.deptcity,d.deptstate,d.deptzip),
                CAST( MULTISET (
                           SELECT MAKE_REF(emp_view, e.empno)
                           FROM emp e 
                           WHERE e.deptno = d.deptno) 
                        AS employee_list_ref_t)
   FROM dept d; 

CREATE OR REPLACE VIEW emp_view OF emp_t WITH OBJECT IDENTIFIER(eno)
   AS SELECT e.empno, e.empname, e.salary, 
                       MAKE_REF(dept_view, e.deptno)
         FROM emp e;
</pre></div>
<!-- class="example" -->
<p>This creates the views.</p>
<p class="subhead1"><a id="i438056"></a><a id="ADOBJ7336"></a>Method 2: Create First View Using FORCE Keyword<a id="sthref559"></a></p>
<p>If you are sure that the view creation statement has no syntax errors, you can use the <code>FORCE</code> keyword to force the creation of the first view without the other view being present.</p>
<p>First, create an employee view that includes a reference to the department view, which does not exist at this point. This view cannot be queried until the department view is created properly.</p>
<p>Next, create a department view that includes references to the employee objects. You do not have to use the <code>FORCE</code> keyword here, because <code>emp_view</code> already exists. This allows you to query the department view, getting the employee object by dereferencing the employee reference from the nested table <code>empreflist</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you previously ran <a href="#CHDHCJJJ">Example 6-11</a>, remove the views you created before running <a href="#CHDDJHAG">Example 6-12</a>.</div>
<div id="ADOBJ7337" class="example">
<p class="titleinexample"><a id="CHDDJHAG"></a>Example 6-12 Creating view with FORCE Method 2</p>
<pre>-- Requires Ex. 6-10
-- create employee view
CREATE OR REPLACE FORCE VIEW emp_view OF emp_t WITH OBJECT IDENTIFIER(eno)
   AS SELECT e.empno, e.empname, e.salary, 
                       MAKE_REF(dept_view, e.deptno)
         FROM emp e;

-- create a department view that includes references to the employee objects
CREATE OR REPLACE VIEW dept_view OF dept_t WITH OBJECT IDENTIFIER(dno) 
   AS SELECT d.deptno, d.deptname, 
                address_t(d.deptstreet,d.deptcity,d.deptstate,d.deptzip),
                CAST( MULTISET (
                           SELECT MAKE_REF(emp_view, e.empno)
                           FROM emp e 
                           WHERE e.deptno = d.deptno) 
                        AS employee_list_ref_t)
   FROM   dept d; 

-- Querying with DEREF method 
SELECT DEREF(e.COLUMN_VALUE)
  FROM TABLE( SELECT e.empreflist FROM dept_view e WHERE e.dno = 100) e;
</pre></div>
<!-- class="example" -->
<p><code>COLUMN_VALUE</code> is a special name that represents the scalar value in a scalar nested table. In this case, <code>COLUMN_VALUE</code> denotes the reference to the employee objects in the nested table <code>empreflist</code>.</p>
<p>You can also access the employee number only, for all those employees whose name begins with <code>John</code>.</p>
<div id="ADOBJ7338" class="example">
<p class="titleinexample"><a id="sthref560"></a>Example 6-13 Querying with COLUMN_VALUE</p>
<pre>-- Requires Ex. 6-10 and 6-12
SELECT e.COLUMN_VALUE.eno
  FROM TABLE(SELECT e.empreflist FROM dept_view e WHERE e.dno = 100) e
 WHERE e.COLUMN_VALUE.ename like &#39;John%&#39;;
</pre></div>
<!-- class="example" -->
<p>To get a tabular output, unnest the list of references by joining the department table with the items in its nested table:</p>
<div id="ADOBJ7339" class="example">
<p class="titleinexample"><a id="sthref561"></a>Example 6-14 Querying with COLUMN_VALUE, Unnesting References</p>
<pre>-- Requires Ex. 6-10 and 6-12SELECT d.dno, e.COLUMN_VALUE.eno, e.COLUMN_VALUE.ename
  FROM dept_view d, TABLE(d.empreflist) e
 WHERE e.COLUMN_VALUE.ename like &#39;John%&#39; 
  AND d.dno = 100;
</pre></div>
<!-- class="example" -->
<p>Finally, you can rewrite the preceding query to use the <code>emp_view</code> instead of the <code>dept_view</code> to show how to navigate from one view to the other:</p>
<div id="ADOBJ7340" class="example">
<p class="titleinexample"><a id="sthref562"></a>Example 6-15 Querying with COLUMN_VALUE, Querying emp_view</p>
<pre>-- Requires Ex. 6-10 and 6-12
SELECT e.deptref.dno, DEREF(f.COLUMN_VALUE)
  FROM emp_view e, TABLE(e.deptref.empreflist) f
 WHERE e.deptref.dno = 100 
  AND f.COLUMN_VALUE.ename like &#39;John%&#39;;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i436788"></a>
<div id="ADOBJ00527" class="sect1">
<h2 class="sect1">Object View Hierarchies<a id="sthref563"></a></h2>
<p>An object view hierarchy is a set of object views each of which is based on a different type in a type hierarchy. Subviews in a view hierarchy are created under a superview, analogously to the way subtypes in a type hierarchy are created under a supertype.</p>
<p>Each object view in a view hierarchy is populated with objects of a single type, but queries on a given view implicitly address its subviews as well. Thus an object view hierarchy gives you a simple way to frame queries that can return a polymorphic set of objects of a given level of specialization or greater.</p>
<p>For example, suppose you have the following type hierarchy, with <code>person_typ</code> as the root:</p>
<div id="ADOBJ7341" class="figure">
<p class="titleinfigure"><a id="sthref564"></a>Figure 6-1 Object Type Hierarchy</p>
<img width="315" height="157" src="img/adobj028.gif" alt="Description of Figure 6-1 follows"/><br/>
<a id="sthref565" href="img_text/adobj028.htm">Description of &#34;Figure 6-1 Object Type Hierarchy&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>If you have created an object view hierarchy based on this type hierarchy, with an object view built on each type, you can query the object view that corresponds to the level of specialization you are interested in. For instance, you can query the view of <code>student_typ</code> to get a result set that contains only students, including part-time students.</p>
<p>You can base the root view of an object view hierarchy on any type in a type hierarchy: you do not need to start the object view hierarchy at the root type. Nor do you need to extend an object view hierarchy to every leaf of a type hierarchy or cover every branch. However, you cannot skip intervening subtypes in the line of descent. Any subview must be based on a direct subtype of the type of its direct superview.</p>
<p>Just as a type can have multiple sibling subtypes, an object view can have multiple sibling subviews. However, a subview based on a given type can participate in only one object view hierarchy: two different object view hierarchies cannot each have a subview based on the same subtype.</p>
<p>A subview inherits the object identifier (OID) from its superview. An OID cannot be explicitly specified in any subview.</p>
<p>A root view can explicitly specify an object identifier using the <code>WITH OBJECT ID</code> clause. If the OID is system-generated or the clause is not specified in the root view, then subviews can be created only if the root view is based on a table or view that also uses a system-generated OID.</p>
<p>The query underlying a view determines whether or not the view is updatable. For a view to be updatable, its query must contain no joins, set operators, aggregate functions, <code>GROUP</code> <code>BY</code> clause, <code>DISTINCT</code> clause, pseudocolumns, or expressions. The same applies to subviews.</p>
<p>If a view is not updatable, you can define <code>INSTEAD</code> <code>OF</code> triggers to perform appropriate DML actions. Note that <code>INSTEAD</code> <code>OF</code> triggers are not inherited by subviews.</p>
<p>All views in a view hierarchy must be in the same schema.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
You can create views of types that are non-instantiable. A non-instantiable type cannot have instances, so ordinarily there would be no point in creating an object view of such a type. However, a non-instantiable type can have subtypes that <span class="italic">are</span> instantiable. The ability to create object views of non-instantiable types enables you to base an object view hierarchy on a type hierarchy that contains a non-instantiable type.</div>
<div id="ADOBJ7342" class="sect2"><a id="sthref566"></a>
<h3 class="sect2">Creating an Object View Hierarchy</h3>
<p>You build an object view hierarchy by creating subviews under a root view. You do this by using the <code>UNDER</code> keyword in the <code>CREATE</code> <code>VIEW</code> statement, as show in <a href="#CEGDGAHE">Example 6-17</a>.</p>
<p>The same object view hierarchy can be based on different underlying storage models. In other words, a variety of layouts or designs of underlying tables can produce the same object view hierarchy. The design of the underlying storage model affects the performance and updatability of the object view hierarchy.</p>
<p>This section describes three possible storage models. In the first, a flat model, all views in the object view hierarchy are based on the same table. In the second, a horizontal model, each view has a one-to-one correspondence with a different table. And in the third, a vertical model, the views are constructed using joins.</p>
<p>To execute any of these storage models, first create types shown in <a href="#CHDEABCA">Example 6-16</a>.</p>
<div id="ADOBJ7343" class="example">
<p class="titleinexample"><a id="CHDEABCA"></a>Example 6-16 Creating Types for Storage Model Examples</p>
<pre>CREATE TYPE person_typ AS OBJECT
( ssn NUMBER,
  name VARCHAR2(30),
  address VARCHAR2(100)) NOT FINAL;/

CREATE TYPE student_typ UNDER person_typ 
( deptid NUMBER,
   major VARCHAR2(30)) NOT FINAL;/

CREATE TYPE employee_typ UNDER person_typ
( empid NUMBER, 
  mgr VARCHAR2(30));/
</pre></div>
<!-- class="example" -->
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDHHIEH">The Flat Model</a></p>
</li>
<li>
<p><a href="#CHDBIJGH">The Horizontal Model</a></p>
</li>
<li>
<p><a href="#CHDBHJAC">The Vertical Model</a></p>
</li>
</ul>
<a id="CHDHHIEH"></a>
<div id="ADOBJ7344" class="sect3">
<h4 class="sect3">The Flat Model</h4>
<p>In the flat model, all the views in the hierarchy are based on the same table. In the following example, the single table <code>AllPersons</code> contains columns for all the attributes of <code>person_typ</code>, <code>student_typ</code>, and <code>employee_typ</code>.</p>
<div id="ADOBJ7345" class="figure">
<p class="titleinfigure"><a id="sthref567"></a>Figure 6-2 Flat Storage Model for Object View Hierarchy</p>
<img width="394" height="228" src="img/adobj030.gif" alt="Description of Figure 6-2 follows"/><br/>
<a id="sthref568" href="img_text/adobj030.htm">Description of &#34;Figure 6-2 Flat Storage Model for Object View Hierarchy&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The <code>typeid</code> column identifies the type of each row. These possible values are the types created in <a href="#CHDEABCA">Example 6-16</a>, 1 = <code>person_typ</code>, 2 = <code>student_typ, and</code> 3 = <code>employee_typ</code>:</p>
<p><a href="#CEGDGAHE">Example 6-17</a> creates the table <code>AllPersons</code> and then the views that make up the object view hierarchy:</p>
<div id="ADOBJ7346" class="example">
<p class="titleinexample"><a id="CEGDGAHE"></a>Example 6-17 Creating an Object View Hierarchy</p>
<pre>-- Requires Ex. 6-16
CREATE TABLE AllPersons
( typeid NUMBER(1), 
  ssn NUMBER, 
  name VARCHAR2(30), 
  address VARCHAR2(100),
  deptid NUMBER,
  major VARCHAR2(30),
  empid NUMBER, 
  mgr VARCHAR2(30));

CREATE VIEW Person_v OF person_typ
  WITH OBJECT OID(ssn) AS
  SELECT ssn, name, address 
  FROM AllPersons 
  WHERE typeid = 1;

CREATE VIEW Student_v OF student_typ UNDER Person_v
  AS 
  SELECT ssn, name, address, deptid, major
  FROM AllPersons
  WHERE typeid = 2;

CREATE VIEW Employee_v OF employee_typ UNDER Person_v
  AS
  SELECT ssn, name, address, empid, mgr
  FROM AllPersons
  WHERE typeid = 3;
</pre></div>
<!-- class="example" -->
<p>The flat model has the advantage of simplicity and poses no obstacles to supporting indexes and constraints. Its drawbacks are:</p>
<ul>
<li>
<p>A single table cannot contain more than 1000 columns, so the flat model imposes a 1000-column limit on the total number of columns that the object view hierarchy can contain.</p>
</li>
<li>
<p>Each row of the table will have NULLs for all the attributes not belonging to its type. Such non-trailing NULLs can adversely affect performance.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDBIJGH"></a>
<div id="ADOBJ7347" class="sect3">
<h4 class="sect3">The Horizontal Model</h4>
<p>On the horizontal model, each view or subview is based on a different table. In the example, the tables are relational, but they could just as well be object tables for which column substitutability is turned off.</p>
<div id="ADOBJ7348" class="figure">
<p class="titleinfigure"><a id="sthref569"></a>Figure 6-3 Horizontal Storage Model for Object View Hierarchy</p>
<img width="506" height="162" src="img/adobj031.gif" alt="Description of Figure 6-3 follows"/><br/>
<a id="sthref570" href="img_text/adobj031.htm">Description of &#34;Figure 6-3 Horizontal Storage Model for Object View Hierarchy&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#CHDGFFGA">Example 6-18</a> creates tables and then views based on these tables.</p>
<div id="ADOBJ7349" class="example">
<p class="titleinexample"><a id="CHDGFFGA"></a>Example 6-18 -- Creating Table Horizontal Model</p>
<pre>-- Requires Ex. 6-16 and Ex. 6-17
CREATE TABLE only_persons
( ssn NUMBER,
  name VARCHAR2(30),
  address VARCHAR2(100));

CREATE TABLE only_students
( ssn NUMBER, 
  name VARCHAR2(30),
  address VARCHAR2(100), 
  deptid NUMBER,  
  major VARCHAR2(30));

CREATE TABLE only_employees
( ssn NUMBER, 
  name VARCHAR2(30),
  address VARCHAR2(100), 
  empid NUMBER, 
  mgr VARCHAR2(30));

CREATE OR REPLACE VIEW Person_v OF person_typ
  WITH OBJECT OID(ssn) AS
  SELECT * 
  FROM only_persons; 

CREATE OR REPLACE VIEW Student_v OF student_typ UNDER Person_v
  AS 
  SELECT *
  FROM only_students;

CREATE OR REPlACE VIEW Employee_v OF employee_typ UNDER Person_v
  AS
  SELECT * 
  FROM only_employees;
</pre></div>
<!-- class="example" -->
<p>The horizontal model is very efficient at processing queries of the form:</p>
<div id="ADOBJ7350" class="example">
<p class="titleinexample"><a id="sthref571"></a>Example 6-19 -- Querying views horizontal model</p>
<pre>-- Requires Ex. 6-16 and Ex. 6-17
-- add the following data
insert into only_persons values(1234,&#39;John&#39;,&#39;abc&#39;);
insert into only_students values(1111,&#39;James&#39;,&#39;abc&#39;,100,&#39;CS&#39;);
insert into only_employees values(2222,&#39;jack&#39;,&#39;abc&#39;,400,&#39;Juliet&#39;);

SELECT VALUE(p) FROM Person_v p
  WHERE VALUE(p) IS OF (ONLY student_typ);

OUTPUT:
VALUE(P)(SSN, NAME, ADDRESS)
--------------------------------------------------------------------------------
STUDENT_TYP(1111, &#39;James&#39;, &#39;abc&#39;, 100, &#39;CS&#39;)
</pre></div>
<!-- class="example" -->
<p>Such queries only need to access a single physical table to get all the objects of the specific type. The drawbacks of this model are that queries such as <code>SELECT * FROM</code> <code><span class="codeinlineitalic">view</span></code> require performing a <code>UNION</code> over all the underlying tables and projecting the rows over just the columns in the specified view. (See <a href="#i437393">&#34;Querying a View in a Hierarchy&#34;</a>.) Also, indexes on attributes (and unique constraints) must span multiple tables, and support for this does not currently exist.</p>
</div>
<!-- class="sect3" -->
<a id="CHDBHJAC"></a>
<div id="ADOBJ7351" class="sect3">
<h4 class="sect3">The Vertical Model</h4>
<p>In the vertical model, there is a physical table corresponding to each view in the hierarchy, but the physical tables store only those attributes that are unique to their corresponding subtypes.</p>
<div id="ADOBJ7352" class="figure">
<p class="titleinfigure"><a id="sthref572"></a>Figure 6-4 Vertical Storage Model for Object View Hierarchy</p>
<img width="419" height="234" src="img/adobj032.gif" alt="Description of Figure 6-4 follows"/><br/>
<a id="sthref573" href="img_text/adobj032.htm">Description of &#34;Figure 6-4 Vertical Storage Model for Object View Hierarchy&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#CHDHHCBA">Example 6-20</a> creates tables and then corresponding views.</p>
<div id="ADOBJ7353" class="example">
<p class="titleinexample"><a id="CHDHHCBA"></a>Example 6-20 Creating table, views vertical model</p>
<pre>CREATE TABLE all_personattrs 
( typeid NUMBER,
  ssn NUMBER,  
  name VARCHAR2(30),
  address VARCHAR2(100));

CREATE TABLE all_studentattrs
( ssn NUMBER, 
  deptid NUMBER, 
  major VARCHAR2(30));

CREATE TABLE all_employeeattrs
( ssn NUMBER,
  empid NUMBER, 
  mgr VARCHAR2(30));

CREATE OR REPLACE VIEW Person_v OF person_typ 
WITH OBJECT OID(ssn) AS
  SELECT ssn, name, address 
  FROM all_personattrs 
  WHERE typeid = 1;

CREATE OR REPLACE VIEW Student_v OF student_typ UNDER Person_v
  AS 
  SELECT x.ssn, x.name, x.address, y.deptid, y.major
  FROM all_personattrs x, all_studentattrs y
  WHERE x.typeid = 2 AND x.ssn = y.ssn;

CREATE OR REPLACE VIEW Employee_v OF employee_typ UNDER Person_v
  AS
  SELECT x.ssn, x.name, x.address, y.empid, y.mgr
  FROM all_personattrs x, all_employeeattrs y
  WHERE x.typeid = 3 AND x.ssn = y.ssn;
</pre></div>
<!-- class="example" -->
<p>The vertical model can efficiently process queries of the kind <code>SELECT * FROM</code> <code><span class="codeinlineitalic">root_view</span></code>, and it is possible to index individual attributes and impose unique constraints on them. However, to re-create an instance of a type, a join over object identifiers (OIDs) must be performed for each level that the type is removed from the root in the hierarchy.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i437393"></a>
<div id="ADOBJ7354" class="sect2">
<h3 class="sect2">Querying a View in a Hierarchy<a id="sthref574"></a></h3>
<p>You can query any view or subview in an object view hierarchy; rows are returned for the declared type of the view that you query and for any of the subtypes of that type. So, for instance, in an object view hierarchy based on the <code>person_typ</code> type hierarchy, you can query the view of <code>person_typ</code> to get a result set that contains all persons, including students and employees; or you can query the view of <code>student_typ</code> to get a result set that contains only students, including part-time students.</p>
<p>In the <code>SELECT</code> list of a query, you can include either functions such as <code>REF()</code> and <code>VALUE()</code> that return an object instance, or you can specify object attributes of the declared type of the view, such as the <code>name</code> and <code>ssn</code> attributes of <code>person_typ</code>.</p>
<p>If you specify functions, to return object instances, the query returns a polymorphic result set: that is, it returns instances of both the declared type of the view and any subtypes of that type.</p>
<p>For example, the following query returns instances of persons, employees, and students of all types, as well as <code>REF</code>s to those instances.</p>
<div id="ADOBJ7355" class="example">
<p class="titleinexample"><a id="sthref575"></a>Example 6-21 Query with REF and Value</p>
<pre>-- Requires Ex. 6-20
insert into all_personattrs values(1,1111,&#39;John&#39;,&#39;abc&#39;);
insert into all_personattrs values(2,2222,&#39;Jack&#39;,&#39;def&#39;);
insert into all_personattrs values(3,3333,&#39;James&#39;,&#39;ghi&#39;);
insert into all_studentattrs values(2222,100,&#39;CS&#39;);
insert into all_employeeattrs values(3333,444,&#39;Julia&#39;);
SELECT REF(p), VALUE(p) FROM Person_v p;

OUTPUT:
REF(P)
--------------------------------------------------------------------------------
VALUE(P)(SSN, NAME, ADDRESS)
--------------------------------------------------------------------------------
00004A038A00465A6E6E779EC1F25FE040578CE70A447E0000001426010001000100290000000000
090600812A00078401FE0000000B03C20C0C00000000000000000000000000000000000000
PERSON_TYP(1111, &#39;John&#39;, &#39;abc&#39;)
 
00004A038A00465A6E6E779EC1F25FE040578CE70A447E0000001426010001000100290000000000
090600812A00078401FE0000000B03C2222200000000000000000000000000000000000000
EMPLOYEE_TYP(3333, &#39;James&#39;, &#39;ghi&#39;, 444, &#39;Julia&#39;)
 
00004A038A00465A6E6E779EC1F25FE040578CE70A447E0000001426010001000100290000000000
 
REF(P)
--------------------------------------------------------------------------------
VALUE(P)(SSN, NAME, ADDRESS)
--------------------------------------------------------------------------------
090600812A00078401FE0000000B03C2171700000000000000000000000000000000000000
STUDENT_TYP(2222, &#39;Jack&#39;, &#39;def&#39;, 100, &#39;CS&#39;)
</pre></div>
<!-- class="example" -->
<p>If you specify individual attributes of the declared type of the view in the <code>SELECT</code> list or do a <code>SELECT</code> <code>*</code>, again the query returns rows for the declared type of the view and any subtypes of that type, but these rows are projected over columns for the attributes of the declared type of the view, and only those columns are used. In other words, the subtypes are represented only with respect to the attributes they inherit from and share with the declared type of the view.</p>
<p>For example, the following query returns rows for all persons and rows for employees and students of all types, but the result uses only the columns for the attributes of <code>person_typ</code>&mdash;namely, <code>name</code>, <code>ssn</code>, and <code>address</code>. It does not show rows for attributes added in the subtypes, such as the <code>deptid</code> attribute of <code>student_typ</code>.</p>
<pre>SELECT * FROM Person_v;
</pre>
<p>To exclude subviews from the result, use the <code>ONLY</code> keyword. The <code>ONLY</code> keyword confines the selection to the declared type of the view that you are querying:</p>
<pre>SELECT VALUE(p) FROM ONLY(Person_v) p;
</pre></div>
<!-- class="sect2" -->
<div id="ADOBJ7356" class="sect2"><a id="sthref576"></a>
<h3 class="sect2">Privileges for Operations on View Hierarchies<a id="sthref577"></a></h3>
<p>Generally, a query on a view with subviews requires only the <code>SELECT</code> privilege on the view being referenced and does not require any explicit privileges on subviews. For example, the following query requires only <code>SELECT</code> privileges on <code>Person_v</code> but not on any of its subviews.</p>
<pre>SELECT * FROM Person_v;
</pre>
<p>However, a query that selects for any attributes added in subtypes but not used by the root type requires the <code>SELECT</code> privilege on all subviews as well. Such subtype attributes may hold sensitive information that should reasonably require additional privileges to access.</p>
<p>The following query, for example, requires <code>SELECT</code> privileges on <code>Person_v</code> and also on <code>Student_v</code>, <code>Employee_v</code> (and on any other subview of <code>Person_v</code>) because the query selects object instances and thus gets all the attributes of the subtypes.</p>
<pre>SELECT VALUE(p) FROM Person_v p;
</pre>
<p>To simplify the process of granting <code>SELECT</code> privileges on an entire view hierarchy, you can use the <code>HIERARCHY</code> option. Specifying the <code>HIERARCHY</code> option when granting a user <code>SELECT</code> privileges on a view implicitly grants <code>SELECT</code> privileges on all current and future subviews of the view as well. For example:</p>
<pre>GRANT SELECT ON Person_v TO <span class="italic">user</span> WITH HIERARCHY OPTION;
</pre>
<p>A query that excludes rows belonging to subviews also requires <code>SELECT</code> privileges on all subviews. The reason is that information about which rows belong exclusively to the most specific type of an instance may be sensitive, so the system requires <code>SELECT</code> privileges on subviews for queries (such as the following one) that exclude all rows from subviews.</p>
<pre>SELECT * FROM ONLY(Person_v);
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3980">
<tr>
<td class="cellalignment3987">
<table class="cellalignment3985">
<tr>
<td class="cellalignment3984"><a href="adobjcol.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3984"><a href="adobjmng.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3989">
<table class="cellalignment3983">
<tr>
<td class="cellalignment3984"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3984"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3984"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3984"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3984"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3984"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>