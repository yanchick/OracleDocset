<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-745"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Introduction%20to%20Oracle%20Objects"></a><title>Introduction to Oracle Objects</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-08-06T13:19:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Object-Relational Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53277-02"/>
<meta name="dcterms.isVersionOf" content="ADOBJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="release_changes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adobjbas.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53277-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">5/16</span> <!-- End Header -->
<div id="ADOBJ001" class="chapter"><a id="g463368"></a> <a id="i453257"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction to Oracle Objects</h1>
<p>This chapter describes the advantages and key features of the Oracle object-relational model. The chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i457391">About Oracle Objects</a></p>
</li>
<li>
<p><a href="#i457396">Advantages of Objects</a></p>
</li>
<li>
<p><a href="#i457401">Key Features of the Object-Relational Model</a></p>
</li>
</ul>
<a id="i457391"></a>
<div id="ADOBJ00101" class="sect1">
<h2 class="sect1">About Oracle Objects<a id="sthref8"></a><a id="sthref9"></a></h2>
<p>Oracle object types are user-defined types that make it possible to model real-world entities, such as customers and purchase orders, as objects in the database.</p>
<p>New object types can be created from any built-in database types and any previously created object types, object references, and collection types. Object types can work with complex data, such as images, audio, and video. Oracle Database stores metadata for user-defined types in a schema that is available to SQL, PL/SQL, Java, and other languages.</p>
<p>Object types and related object-oriented features, such as varrays and nested tables, provide higher-level ways to organize and access data in the database. Underneath the object layer, data is still stored in columns and tables, but you can work with the data in terms of the real-world entities that make the data meaningful. Instead of thinking in terms of columns and tables when you query the database, you can simply select entities that you have created, such as customers and purchase orders.</p>
<p>You can begin to use object-oriented features while continuing to work with most of your data relationally, or you use to an object-oriented approach entirely.</p>
<p>Object types are also known as user-defined types or ADTs. <a class="olink LNPLS163" href="../LNPLS/overview.htm#LNPLS163"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> generally refers to them as ADTs.</p>
</div>
<!-- class="sect1" -->
<a id="i457396"></a>
<div id="ADOBJ00105" class="sect1">
<h2 class="sect1">Advantages of Objects<a id="sthref10"></a><a id="sthref11"></a></h2>
<p>In general, the object-type model is similar to the class mechanism found in C++ and Java. Like classes, the reusability of objects makes it possible to develop database applications faster and more efficiently. By natively supporting object types in the database, Oracle Database enables application developers to directly access the data structures used by their applications.</p>
<p>Objects offer other advantages over a purely relational approach, such as:</p>
<ul>
<li>
<p><a href="#CHDIEDCE">Objects Can Encapsulate Operations Along with Data</a></p>
</li>
<li>
<p><a href="#CHDCHDHB">Objects Are Efficient</a></p>
</li>
<li>
<p><a href="#CHDDCDBF">Objects Can Represent Part-Whole Relationships</a></p>
</li>
</ul>
<p class="subhead1"><a id="CHDIEDCE"></a><a id="ADOBJ7022"></a>Objects Can Encapsulate Operations Along with Data</p>
<p>Database tables contain only data. Objects can include the ability to perform operations that are likely to be performed on that data. Thus, a purchase order object might include a method to calculate the cost of all the items purchased. Or a customer object might have methods to return the customer&#39;s buying history and payment pattern. An application can simply call the methods to retrieve the information.</p>
<p class="subhead1"><a id="CHDCHDHB"></a><a id="ADOBJ7023"></a>Objects Are Efficient</p>
<p>Using object types allows for greater efficiency:</p>
<ul>
<li>
<p>Object types and their methods are stored with the data in the database, so they are available for any application to use. Developers do not need to re-create similar structures and methods in every application. This also ensures that developers are using consistent standards.</p>
</li>
<li>
<p>You can fetch and manipulate a set of related objects as a single unit. A single request to fetch an object from the server can retrieve other objects that are connected to it. When you reference a column of a SQL object type, you retrieve the whole object.</p>
</li>
</ul>
<p class="subhead1"><a id="CHDDCDBF"></a><a id="ADOBJ7024"></a>Objects Can Represent Part-Whole Relationships</p>
<p>Object types allow you to represent part-whole relationships. For example: in a relational table for stock items, a piston and an engine may have the same status. Using objects can reduce the need to represent pistons as parts of engines with complicated schemas of multiple tables with primary key-foreign key relationships. An object can have other objects as attributes, and the attribute objects can have their own object attributes too. An entire parts-list hierarchy can be built up in this way from interlocking object types.</p>
</div>
<!-- class="sect1" -->
<a id="i457401"></a>
<div id="ADOBJ00107" class="sect1">
<h2 class="sect1">Key Features of the Object-Relational Model<a id="sthref12"></a><a id="sthref13"></a></h2>
<p>Oracle Database implements the object-type model as an extension of the relational model, while continuing to support standard relational database functionality, such as queries, fast commits, backup and recovery, scalable connectivity, row-level locking, read consistency, and more.</p>
<p>SQL and various programmatic interfaces and languages, including PL/SQL, Java, Oracle Call Interface, Pro*C/C++, and C# have been enhanced with extensions to support Oracle objects. The result is an object-relational model that offers the intuitiveness and economy of an object interface while preserving the high concurrency and throughput of a relational database.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CHDBCFAJ">Database Features of Oracle Objects</a></p>
</li>
<li>
<p><a href="#CHDIBDIB">Language Binding Features of Oracle Objects</a></p>
</li>
</ul>
<a id="CHDBCFAJ"></a>
<div id="ADOBJ7025" class="sect2">
<h3 class="sect2">Database Features of Oracle Objects<a id="sthref14"></a><a id="sthref15"></a></h3>
<p>This section describes features and concepts of the object-relational model that are related to the database.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i458117">About Object Types</a></p>
</li>
<li>
<p><a href="#CHDJECHD">About Object Instances</a></p>
</li>
<li>
<p><a href="#CHDDICDE">About Object Methods</a></p>
</li>
<li>
<p><a href="#i458240">How Objects are Stored in Tables</a></p>
</li>
<li>
<p><a href="#CHDCAIAF">Using Object Identifiers to Identify Row Objects</a></p>
</li>
<li>
<p><a href="#i458258">Using References to Row Objects</a></p>
</li>
<li>
<p><a href="#CHDIBIIA">Using Oracle Collections</a></p>
</li>
<li>
<p><a href="#CHDIAAHA">Using Object Views to Access Relational Data</a></p>
</li>
<li>
<p><a href="#CHDHECFC">Using Type Inheritance</a></p>
</li>
<li>
<p><a href="#CHDHGCFG">Using Type Evolution to Change an Existing Object Type</a></p>
</li>
</ul>
<a id="i458117"></a>
<div id="ADOBJ7026" class="sect3">
<h4 class="sect3">About Object Types<a id="sthref16"></a><a id="sthref17"></a><a id="sthref18"></a><a id="sthref19"></a><a id="sthref20"></a><a id="sthref21"></a><a id="sthref22"></a><a id="sthref23"></a><a id="sthref24"></a></h4>
<p>An object type is a kind of data type. You can use it in the same ways that you use standard data types such as <code>NUMBER</code> or <code>VARCHAR2</code>. For example, you can specify an object type as the data type of a column in a relational table, and you can declare variables of an object type. The value is a variable or an instance of that type. An object instance is also called an object.</p>
<p><a href="#CIHCDEGE">Figure 1-1</a> shows an object type, <code>person_typ</code>, and two instances of the object type.</p>
<div id="ADOBJ7027" class="figure">
<p class="titleinfigure"><a id="CIHCDEGE"></a>Figure 1-1 An Object Type and Object Instances</p>
<img width="438" height="318" src="img/adobj036.gif" alt="Description of Figure 1-1 follows"/><br/>
<a id="sthref25" href="img_text/adobj036.htm">Description of &#34;Figure 1-1 An Object Type and Object Instances&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Object types serve as blueprints or templates that define both structure and behavior. Object types are database schema objects, subject to the same kinds of administrative control as other schema objects. Application code can retrieve and manipulate these objects. See <a href="adobjmng.htm#g1012556">Chapter 7, &#34;Managing Oracle Objects&#34;</a>.</p>
<p>You use the <code>CREATE</code> <code>TYPE</code> SQL statement to define object types.</p>
<p><a href="#CHDFBGII">Example 1-1</a> shows how to create an object type named <code>person_typ</code>. In the example, an object specification and object body are defined. For information on the <code>CREATE</code> <code>TYPE</code> SQL statement and on the <code>CREATE</code> <code>TYPE</code> <code>BODY</code> SQL statement, see <a class="olink LNPLS01375" href="../LNPLS/create_type.htm#LNPLS01375"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note<a id="sthref26"></a><a id="sthref27"></a>:</p>
<span class="bold">Running Examples:</span> Many examples in this guide can be run using the <code>HR</code> sample schema. Comments at the beginning of most examples indicate if any previous example code is required.
<p>Refer to <a class="olink COMSC" href="../COMSC/toc.htm"><span class="italic">Oracle Database Sample Schemas</span></a> for information on how these schemas were created and how you can use them yourself.</p>
</div>
<div id="ADOBJ7028" class="example">
<p class="titleinexample"><a id="CHDFBGII"></a>Example 1-1 Creating the person_typ Object Type</p>
<pre><span class="bold">CREATE</span> <span class="bold">TYPE</span> person_typ <span class="bold">AS</span> <span class="bold">OBJECT</span> (
  idno           NUMBER,
  first_name     VARCHAR2(20),
  last_name      VARCHAR2(25),
  email          VARCHAR2(25),
  phone          VARCHAR2(20),
  MAP MEMBER FUNCTION get_idno RETURN NUMBER, 
  MEMBER PROCEDURE display_details ( SELF IN OUT NOCOPY person_typ ));
/

CREATE TYPE BODY person_typ AS
  MAP MEMBER FUNCTION get_idno RETURN NUMBER IS
  BEGIN
    RETURN idno;
  END;
  MEMBER PROCEDURE display_details ( SELF IN OUT NOCOPY person_typ ) IS
  BEGIN
    -- use the PUT_LINE procedure of the DBMS_OUTPUT package to display details
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(idno) || &#39; &#39; || first_name || &#39; &#39; || last_name);
    DBMS_OUTPUT.PUT_LINE(email || &#39; &#39;  || phone);
  END;
END;
/
</pre></div>
<!-- class="example" -->
<p>Object types differ from the standard data types that are native to a relational database:</p>
<ul>
<li>
<p>Oracle Database does not supply predefined object types. You define the object types you want by combining built-in types with user-defined ones as shown in <a href="#CHDFBGII">Example 1-1</a>.</p>
</li>
<li>
<p>Object types are composed of attributes and methods as illustrated in <a href="#CIHBHACJ">Figure 1-2</a>.</p>
<ul>
<li>
<p>Attributes hold the data about an object. Attributes have declared data types which can, in turn, be other object types.</p>
</li>
<li>
<p>Methods are procedures or functions that applications can use to perform operations on the attributes of the object type. Methods are optional. They define the behavior of objects of that type.</p>
</li>
</ul>
</li>
</ul>
<div id="ADOBJ7029" class="figure">
<p class="titleinfigure"><a id="CIHBHACJ"></a>Figure 1-2 Object Attributes and Methods</p>
<img width="299" height="153" src="img/adobj035.gif" alt="Description of Figure 1-2 follows"/><br/>
<a id="sthref28" href="img_text/adobj035.htm">Description of &#34;Figure 1-2 Object Attributes and Methods&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="CHDJECHD"></a>
<div id="ADOBJ7030" class="sect3">
<h4 class="sect3">About Object Instances<a id="sthref29"></a><a id="sthref30"></a><a id="sthref31"></a></h4>
<p>A variable of an object type is an instance of the type, or an object. An object has the attributes and methods defined for its type. Because an object instance is a concrete thing, you can assign values to its attributes and call its methods.</p>
<p>Defining an object type does not allocate any storage. After they are defined, object types can be used in SQL statements in most of the same places you use types such as <code>NUMBER</code> or <code>VARCHAR2</code>. Storage is allocated once you create an instance of the object type.</p>
<p><a href="#CIHCBDHG">Example 1-2</a> shows how to create object instances of the <code>person_typ</code> created in <a href="#CHDFBGII">Example 1-1</a>, and define a relational table to keep track of these instances as contacts.</p>
<div id="ADOBJ7031" class="example">
<p class="titleinexample"><a id="CIHCBDHG"></a>Example 1-2 Creating the contacts Table with an Object Type Column</p>
<pre>-- requires existing person_typ fr. Ex 1-1
CREATE TABLE contacts (
  <span class="bold">contact</span>         <span class="bold">person_typ</span>,
  contact_date    DATE );

INSERT INTO <span class="bold">contacts</span> VALUES (
  person_typ (65, &#39;Verna&#39;, &#39;Mills&#39;, &#39;vmills@example.com&#39;, &#39;1-650-555-0125&#39;), 
  to_date(&#39;24 Jun 2003&#39;, &#39;dd Mon YYYY&#39;));
</pre></div>
<!-- class="example" -->
<p>The <code>contacts</code> table is a relational table with an object type as the data type of its contact column. Objects that occupy columns of relational tables are called <a href="glossary.htm#CHDGJBJH">column object</a>s. See <a href="#i458240">&#34;How Objects are Stored in Tables&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDDICDE"></a>
<div id="ADOBJ7032" class="sect3">
<h4 class="sect3">About Object Methods<a id="sthref32"></a><a id="sthref33"></a><a id="sthref34"></a><a id="sthref35"></a><a id="sthref36"></a><a id="sthref37"></a><a id="sthref38"></a><a id="sthref39"></a><a id="sthref40"></a><a id="sthref41"></a> <a id="sthref42"></a></h4>
<p>Object methods are functions or procedures that you can declare in an object type definition to implement behavior that you want objects of that type to perform.</p>
<p>The general kinds of methods that can be declared in a type definition are:</p>
<ul>
<li>
<p>Member Methods</p>
<p>Using member methods, you can provide access to the data of an object, and otherwise define operations that an application performs on the data. To perform an operation, the application calls the appropriate method on the appropriate object.</p>
</li>
<li>
<p>Static Methods</p>
<p>Static methods compare object instances and perform operations that do not use the data of any particular object, but, instead, are global to an object type.</p>
</li>
<li>
<p>Constructor Methods</p>
<p>A default constructor method is implicitly defined for every object type, unless it is overwritten with a user-defined constructor. A constructor method is called on a type to construct or create an object instance of the type.</p>
</li>
</ul>
<p><a href="#CIHFJFDJ">Example 1-3</a> show the <code>get_idno()</code> method, created in <a href="#CHDFBGII">Example 1-1</a>, to display the Id number of persons in the <code>contacts</code> table:</p>
<div id="ADOBJ7033" class="example">
<p class="titleinexample"><a id="CIHFJFDJ"></a>Example 1-3 Using the get_idno Object Method</p>
<pre>-- requires Ex 1-1 and Ex 1-2 
SELECT c.contact.get_idno() FROM contacts c;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjbas.htm#i463694">&#34;Object Methods&#34;</a> for detailed information</div>
</div>
<!-- class="sect3" -->
<a id="i458240"></a>
<div id="ADOBJ7034" class="sect3">
<h4 class="sect3">How Objects are Stored in Tables<a id="sthref43"></a><a id="sthref44"></a><a id="sthref45"></a><a id="sthref46"></a><a id="sthref47"></a><a id="sthref48"></a><a id="sthref49"></a></h4>
<p>Objects can be stored in two types of tables:</p>
<ul>
<li>
<p>Object tables: store only objects</p>
<p>In an object table, each row represents an object, which is referred to as a <a href="glossary.htm#CHDCGBAB"><span class="xrefglossterm">row object</span></a>. See <a href="#CHDHIEFH">&#34;Creating and Using Object Tables&#34;</a></p>
</li>
<li>
<p>Relational tables: store objects with other table data</p>
<p>Objects that are stored as columns of a relational table, or are attributes of other objects, are called <a href="glossary.htm#CHDGJBJH"><span class="xrefglossterm">column object</span></a>s. <a href="#CIHCBDHG">Example 1-2</a> shows the <code>contacts</code> table which stores an instance of the <code>person_typ</code> object.</p>
</li>
</ul>
<p>Objects that have meaning outside of the relational database in which they are contained, or objects that are shared among more than one relational database object, should be made referenceable as row objects. That is, such objects should be stored as a row object in an object table instead of in a column of a relational table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjdes.htm#i443356">&#34;Storing Objects as Columns or Rows&#34;</a></div>
<a id="CHDHIEFH"></a>
<div id="ADOBJ7035" class="sect4">
<h5 class="sect4">Creating and Using Object Tables</h5>
<p><a href="#CIHCBIDH">Example 1-4</a> shows a <code>CREATE</code> <code>TABLE</code> statement that creates an object table for <code>person_typ</code> objects.</p>
<div id="ADOBJ7036" class="example">
<p class="titleinexample"><a id="CIHCBIDH"></a>Example 1-4 Creating the person_obj_table Object Table</p>
<pre>-- requires Ex. 1-1
CREATE TABLE person_obj_table OF person_typ;
</pre></div>
<!-- class="example" -->
<p>You can view this table in two ways:</p>
<ul>
<li>
<p>As a single-column table, in which each row is a <code>person_typ</code> object, allowing you to perform object-oriented operations.</p>
</li>
<li>
<p>As a multi-column table, in which each attribute of the object type <code>person_typ</code> such as <code>idno</code>, <code>first_name</code>, <code>last_name</code>, and so on, occupies a column, allowing you to perform relational operations.</p>
</li>
</ul>
<p><a href="#CIHCDHGJ">Example 1-5</a> illustrates several operations on an object table.</p>
<div id="ADOBJ7037" class="example">
<p class="titleinexample"><a id="CIHCDHGJ"></a>Example 1-5 Operations on the person_obj_table Object Table</p>
<pre>-- requires Ex. 1-1 and 1-4
INSERT INTO person_obj_table VALUES (
       person_typ(101, &#39;John&#39;, &#39;Smith&#39;, &#39;jsmith@example.com&#39;, &#39;1-650-555-0135&#39;) );

SELECT VALUE(p) FROM person_obj_table p
        WHERE p.last_name = &#39;Smith&#39;;

DECLARE
  person person_typ;
BEGIN -- PL/SQL block for selecting a person and displaying details
  SELECT VALUE(p) INTO person FROM person_obj_table p WHERE p.idno = 101;
  person.display_details();
END;
/
</pre></div>
<!-- class="example" -->
<p>The <code>INSERT</code> <code>INTO</code> SQL statement in <a href="#CIHCDHGJ">Example 1-5</a> inserts a <code>person_typ</code> object into <code>person_obj_table</code>, treating <code>person_obj_table</code> as a multi-column table.</p>
<p>The <code>SELECT</code> SQL statement selects from <code>person_obj_table</code> as a single-column table, using the <code>VALUE</code> function to return rows as object instances. See <a href="adobjbas.htm#i479050">&#34;VALUE&#34;</a> for information on the <code>VALUE</code> function.</p>
<p>The PL/SQL block selects a specific person and executes a member function of <code>person_typ</code> to display details about the specified person. For more information about using PL/SQL with objects, see <a href="adobjplsql.htm#CHDEFBEA">Chapter 3, &#34;Using PL/SQL With Object Types&#34;</a>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDCAIAF"></a>
<div id="ADOBJ7038" class="sect3">
<h4 class="sect3">Using Object Identifiers to Identify Row Objects<a id="sthref50"></a></h4>
<p>Object identifiers (OIDs) uniquely identify row objects in object tables. You cannot directly access object identifiers, but you can make references (<code>REF</code>s) to the object identifiers and directly access the <code>REF</code>s, as discussed in <a href="#i458258">&#34;Using References to Row Objects&#34;</a>.</p>
<p>There are two types of <a href="glossary.htm#CHDHFGCI"><span class="xrefglossterm">object identifier</span></a>s.</p>
<ul>
<li>
<p>System-Generated Object Identifiers (default)</p>
<p>Oracle automatically creates system-generated object identifiers for row objects in object tables unless you choose the primary-key based option.</p>
</li>
<li>
<p>Primary-Key Based Object Identifiers</p>
<p>You have the option to create primary-key based OIDs when you create the table using the <code>CREATE</code> <code>TABLE</code> statement.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Column objects are identified by the primary key of the row, and, therefore, do not need a specific object identifier.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adobjvew.htm#i434777">&#34;Specifying Object Identifiers for Object Views&#34;</a></p>
</li>
<li>
<p><a href="adobjdes.htm#i443361">&#34;Storage Considerations for Object Identifiers (OIDs)&#34;</a></p>
</li>
<li>
<p><a href="adobjxmp.htm#CHDGGDIF">&#34;Object Identifiers and References&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i458258"></a>
<div id="ADOBJ7039" class="sect3">
<h4 class="sect3">Using References to Row Objects<a id="sthref51"></a><a id="sthref52"></a></h4>
<p>A <code>REF</code> is a logical pointer or reference to a row object that you can construct from an object identifier (OID). You can use the <code>REF</code> to obtain, examine, or update the object. You can change a <code>REF</code> so that it points to a different object of the same object type hierarchy or assign it a null value.</p>
<p><code>REF</code>s are Oracle Database built-in data types. <code>REF</code>s and collections of <code>REF</code>s model associations among objects, particularly many-to-one relationships, thus reducing the need for foreign keys. <code>REF</code>s provide an easy mechanism for navigating between objects.</p>
<p><a href="#CIHCBCIC">Example 1-6</a> illustrates a simple use of a <code>REF</code>.</p>
<div id="ADOBJ7040" class="example">
<p class="titleinexample"><a id="CIHCBCIC"></a>Example 1-6 Using a REF to the emp_person_typ Object</p>
<pre>CREATE TYPE emp_person_typ AS OBJECT (
  name     VARCHAR2(30),
  manager  <span class="bold">REF emp_person_typ</span> );
/
CREATE TABLE emp_person_obj_table OF emp_person_typ;

INSERT INTO emp_person_obj_table VALUES (
   emp_person_typ (&#39;John Smith&#39;, NULL));
   
INSERT INTO emp_person_obj_table
  SELECT emp_person_typ (&#39;Bob Jones&#39;, REF(e))
    FROM emp_person_obj_table e
    WHERE e.name = &#39;John Smith&#39;;
</pre></div>
<!-- class="example" -->
<p>This example first creates the <code>emp_person_typ</code> John Smith, with <code>NULL</code> value for a manager. Then it adds the <code>emp_person_typ</code> Bob Jones as John Smith&#39;s supervisee.</p>
<p>The following query and its output show the effect:</p>
<pre>COLUMN name FORMAT A10
COLUMN manager FORMAT A50
select * from emp_person_obj_table e;
</pre>
<br/>
<code>NAME MANAGER</code><br/>
<code>---------- --------------------------------------------------</code><br/>
<code>John Smith</code><br/>
<code>Bob Jones 0000220208424E801067C2EABBE040578CE70A0707424E8010</code><br/>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;67C1EABBE040578CE70A0707</code>
<p><a href="#CHDHFDCB">Example 1-10</a> shows how to dereference the object, so that <code>Manager</code> appears as a name rather than an object identifier.</p>
<p>See <a href="adobjbas.htm#i454824">&#34;Rules for REF Columns and Attributes&#34;</a> and <a href="adobjdes.htm#i453869">&#34;Design Considerations for REFs&#34;</a>.</p>
<div id="ADOBJ7041" class="sect4"><a id="i458265"></a>
<h5 class="sect4">Using Scoped REFs<a id="sthref53"></a><a id="sthref54"></a></h5>
<p>You can constrain a column type, collection element, or object type attribute to reference a specified object table by using the SQL constraint subclause <code>SCOPE</code> <code>IS</code> when you declare the <code>REF</code>. Scoped <code>REF</code> types require less storage space and allow more efficient access than unscoped <code>REF</code> types.</p>
<p><a href="#CIHGBJGD">Example 1-7</a> shows <code>REF</code> column <code>contact_ref</code> scoped to <code>person_obj_table</code> which is an object table of type <code>person_typ</code>.</p>
<div id="ADOBJ7042" class="example">
<p class="titleinexample"><a id="CIHGBJGD"></a>Example 1-7 Creating the contacts_ref Table Using a Scoped REF</p>
<pre>-- requires Ex. 1-1, 1-4, and 1-5
CREATE TABLE contacts_ref (
  contact_ref   REF person_typ <span class="bold">SCOPE IS</span> person_obj_table,
  contact_date  DATE );
</pre></div>
<!-- class="example" -->
<p>To insert a row in the table, you could issue the following:</p>
<pre>INSERT INTO contacts_ref
  SELECT REF(p), &#39;26 Jun 2003&#39;
    FROM person_obj_table p
    WHERE p.idno = 101;
</pre>
<p>A <code>REF</code> can be scoped to an object table of the declared type (<code>person_typ</code> in the example) or of any subtype of the declared type. If a <code>REF</code> is scoped to an object table of a subtype, the <code>REF</code> column is effectively constrained to hold only references to instances of the subtype (and its subtypes, if any) in the table. See <a href="adobjbas.htm#i456228">&#34;Inheritance in SQL Object Types&#34;</a>.</p>
</div>
<!-- class="sect4" -->
<div id="ADOBJ7043" class="sect4"><a id="sthref55"></a>
<h5 class="sect4">Checking for Dangling REFs<a id="sthref56"></a><a id="sthref57"></a></h5>
<p>It is possible for the object identified by a <code>REF</code> to become unavailable if the object has been deleted or some necessary privilege has been deleted. This is a dangling <code>REF</code>. You can use the Oracle Database SQL predicate <code>IS</code> <code>DANGLING</code> to test <code>REF</code>s for this condition.</p>
<p>Dangling <code>REF</code>s can be avoided by defining referential integrity constraints. See <a href="adobjbas.htm#i454824">&#34;Rules for REF Columns and Attributes&#34;</a>.</p>
</div>
<!-- class="sect4" -->
<a id="CHDGGIFD"></a>
<div id="ADOBJ7044" class="sect4">
<h5 class="sect4">Dereferencing REFs<a id="sthref58"></a><a id="sthref59"></a><a id="sthref60"></a><a id="sthref61"></a><a id="sthref62"></a><a id="sthref63"></a><a id="sthref64"></a></h5>
<p>Accessing the object that the <code>REF</code> refers to is called dereferencing the <code>REF</code>. Oracle Database provides the <code>DEREF</code> operator to do this.</p>
<div id="ADOBJ7045" class="example">
<p class="titleinexample"><a id="CHDFIJEC"></a>Example 1-8 Using DEREF to Dereference a REF</p>
<pre>-- requires Ex. 1-6
SELECT DEREF(e.manager) FROM emp_person_obj_table e;
</pre></div>
<!-- class="example" -->
<br/>
<code>DEREF(E.MANAGER)(NAME, MANAGER)</code><br/>
<code>----------------------------------------------------------------</code><br/>
<code>EMP_PERSON_TYP(&#39;John Smith&#39;, NULL)</code>
<p><a href="#CHDHFADD">Example 1-9</a> shows that dereferencing a dangling <code>REF</code> returns a null object.</p>
<div id="ADOBJ7046" class="example">
<p class="titleinexample"><a id="CHDHFADD"></a>Example 1-9 Dereferencing a Dangling Ref</p>
<pre>--requires Ex. 1-1, 1-4, 1-5, and 1-7
-- DELETE command needed to cause dangling refDELETE from person_obj_table WHERE idno = 101;/
SELECT DEREF(c.contact_ref), c.contact_date FROM contacts_ref c;
</pre></div>
<!-- class="example" -->
<p>Oracle Database also provides implicit dereferencing of <code>REF</code>s. For example, to access the manager&#39;s name for an employee, you can use a <code>SELECT</code> statement.</p>
<p><a href="#CHDHFDCB">Example 1-10</a> follows the pointer from the person&#39;s name and retrieves the manager&#39;s name <code>e.manager.name</code>.</p>
<div id="ADOBJ7047" class="example">
<p class="titleinexample"><a id="CHDHFDCB"></a>Example 1-10 Implicitly Dereferencing a REF</p>
<pre>-- requires Ex. 1-6
SELECT e.name, e.manager.name FROM emp_person_obj_table e
  WHERE e.name = &#39;Bob Jones&#39;;
</pre></div>
<!-- class="example" -->
<p>Following the <code>REF</code> in this manner is allowed in SQL, but PL/SQL requires the <code>DEREF</code> keyword as in <a href="#CHDFIJEC">Example 1-8</a>.</p>
</div>
<!-- class="sect4" -->
<div id="ADOBJ7048" class="sect4"><a id="sthref65"></a>
<h5 class="sect4">Obtaining a REF to a Row Object<a id="sthref66"></a></h5>
<p>You can obtain a <code>REF</code> to a row object by selecting the object from its object table and applying the <code>REF</code> operator.</p>
<p><a href="#CHDHGBBH">Example 1-11</a> shows how to obtain a <code>REF</code> to the person with an <code>idno</code> equal to <code>101</code>.</p>
<div id="ADOBJ7049" class="example">
<p class="titleinexample"><a id="CHDHGBBH"></a>Example 1-11 Obtaining a REF to a Row Object</p>
<pre>-- requires Ex. 1-1, 1-4, and 1-5
DECLARE 
  person_ref REF person_typ;
  person person_typ;
BEGIN 
 
  SELECT REF(p) INTO person_ref
    FROM person_obj_table p 
    WHERE p.idno = 101;    
 
   select deref(person_ref) into person from dual;
   person.display_details();
 
END;
/
</pre></div>
<!-- class="example" -->
<p>The query returns exactly one row. See <a href="adobjdes.htm#i452226">&#34;Storage Size of REFs&#34;</a>.</p>
</div>
<!-- class="sect4" -->
<div id="ADOBJ7050" class="sect4"><a id="sthref67"></a>
<h5 class="sect4">Comparing REF Variables<a id="sthref68"></a></h5>
<p>Two <code>REF</code> variables can be compared if, and only if, the targets that they reference are both of the same declared type, or one is a subtype of the other. They can only be compared for equality.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDIBIIA"></a>
<div id="ADOBJ7051" class="sect3">
<h4 class="sect3">Using Oracle Collections<a id="sthref69"></a><a id="sthref70"></a><a id="sthref71"></a></h4>
<p>For modeling multi-valued attributes and many-to-many relationships, Oracle Database supports two collection data types: varrays and nested tables. You can use collection types anywhere other data types are used. You can have object attributes of a collection type in addition to columns of a collection type. For example, a purchase order object type might contain a nested table attribute that holds the collection of line items for the purchase order.</p>
<p>To define a collection type, use the <code>CREATE</code> <code>TYPE</code> <code>.</code> <code>.</code> <code>.</code> <code>AS</code> <code>TABLE</code> <code>OF</code> statement.</p>
<p><a href="#i458348">Example 1-12</a> shows <code>CREATE</code> <code>TYPE</code> statements that define a collection and an object type.</p>
<div id="ADOBJ7052" class="example">
<p class="titleinexample"><a id="i458348"></a>Example 1-12 Creating the people_typ Collection Data Type</p>
<pre>-- requires Ex. 1-1
<span class="bold">CREATE</span> <span class="bold">TYPE</span> people_typ <span class="bold">AS TABLE</span> <span class="bold">OF</span> person_typ;
/

CREATE TYPE dept_persons_typ AS OBJECT (
  dept_no    CHAR(5),
  dept_name  CHAR(20),
  dept_mgr   person_typ,
  dept_emps  people_typ);
/
</pre></div>
<!-- class="example" -->
<p><span class="bold">Note the following about this example:</span></p>
<ul>
<li>
<p>The collection type, <code>people_typ</code>, is specifically a nested table type.</p>
</li>
<li>
<p>The <code>dept_persons_typ</code> object type has an attribute <code>dept_emps</code> of <code>people_typ</code>. Each row in the <code>dept_emps</code> nested table is an object of type <code>person_typ</code> which was defined in <a href="#CHDFBGII">Example 1-1</a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjcol.htm#i467558">&#34;Collection Data Types&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="CHDIAAHA"></a>
<div id="ADOBJ7053" class="sect3">
<h4 class="sect3">Using Object Views to Access Relational Data<a id="sthref72"></a><a id="sthref73"></a><a id="sthref74"></a><a id="sthref75"></a><a id="sthref76"></a></h4>
<p>An object view is a way to access relational data using object-relational features. It lets you develop object-oriented applications without changing the underlying relational schema.</p>
<p>You can access objects that belong to an object view in the same way that you access row objects in an object table. Oracle Database also supports <a href="glossary.htm#CHDBCHJD"><span class="xrefglossterm">materialized view</span></a> objects of user-defined types from data stored in relational schemas and tables.</p>
<p>Object views let you exploit the <a href="glossary.htm#CHDCBDIB"><span class="xrefglossterm">polymorphism</span></a> that a type hierarchy makes possible. A polymorphic expression takes a value of the expression&#39;s declared type or any of that type&#39;s subtypes. If you construct a hierarchy of object views that mirrors some or all of the structure of a type hierarchy, you can query any view in the hierarchy to access data at just the level of specialization you are interested in. If you query an object view that has subviews, you can get back polymorphic data&mdash;rows for both the type of the view and for its subtypes. See <a href="adobjvew.htm#g444865">Chapter 6, &#34;Applying an Object Model to Relational Data&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHECFC"></a>
<div id="ADOBJ7054" class="sect3">
<h4 class="sect3">Using Type Inheritance<a id="sthref77"></a><a id="sthref78"></a></h4>
<p>Type inheritance enables you to create type hierarchies. A type hierarchy is a set of successive levels of increasingly specialized subtypes that derive from a common ancestor object type, which is called a supertype. Derived subtypes inherit the features of the parent object type and can extend the parent type definition. The specialized types can add new attributes or methods, or redefine methods inherited from the parent. The resulting type hierarchy provides a higher level of abstraction for managing the complexity of an application model. For example, specialized types of persons, such as a student type or a part-time student type with additional attributes or methods, might be derived from a general person object type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjbas.htm#i456228">&#34;Inheritance in SQL Object Types&#34;</a></div>
<p><a href="#CHDDGFCA">Figure 1-3</a> illustrates two subtypes, <code>Student_t</code> and <code>Employee_t</code>, created under <code>Person_t</code>, and the <code>PartTimeStudent_t</code>, a subtype under <code>Student_t</code>.</p>
<div id="ADOBJ7055" class="figure">
<p class="titleinfigure"><a id="CHDDGFCA"></a>Figure 1-3 A Type Hierarchy</p>
<img width="260" height="98" src="img/adobj037.gif" alt="Description of Figure 1-3 follows"/><br/>
<a id="sthref79" href="img_text/adobj037.htm">Description of &#34;Figure 1-3 A Type Hierarchy&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="CHDHGCFG"></a>
<div id="ADOBJ7056" class="sect3">
<h4 class="sect3">Using Type Evolution to Change an Existing Object Type<a id="sthref80"></a><a id="sthref81"></a><a id="sthref82"></a></h4>
<p>Type evolution enables you to modify, or evolve, an existing object type, even those already used in tables. Type evolution works through the <code>ALTER</code> <code>TYPE</code> statement, enabling you to propagate changes through all instances of the object type.</p>
<p>The <code>ALTER</code> <code>TYPE</code> statement checks for dependencies of the type to be altered, using essentially the same validations as a <code>CREATE</code> <code>TYPE</code> statement. If a type or any of its dependent types fails the type validations, the <code>ALTER</code> <code>TYPE</code> statement rolls back.</p>
<p>Metadata for all tables and columns that use an altered type are updated for the new type definition so that data can be stored in the new format. Existing data can be converted to the new format either all at once or piecemeal, as it is updated. In either case, data is always presented in the new type definition even if it is still stored in the format of the older one.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adobjadv.htm#i1006726">&#34;Type Evolution&#34;</a></p>
</li>
<li>
<p><a href="adobjdes.htm#i452646">&#34;Considerations Related to Type Evolution&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDIBDIB"></a>
<div id="ADOBJ7057" class="sect2">
<h3 class="sect2">Language Binding Features of Oracle Objects</h3>
<p>This section lists the key features of the object-relational model that are related to languages and application programming interfaces (APIs).</p>
<p class="subhead1"><a id="ADOBJ7058"></a>SQL Object Extensions</p>
<p>To support object-related features, Oracle Database provides SQL extensions, including DDL, to create, alter, or drop object types; to store object types in tables; and to create, alter, or drop object views. There are DML and query extensions to support object types, references, and collections. See <a href="adobjenv.htm#i452002">&#34;SQL and Object Types&#34;</a>.</p>
<p class="subhead1"><a id="ADOBJ7059"></a>PL/SQL Object Extensions</p>
<p>PL/SQL can operate on object types seamlessly. Thus, application developers can use PL/SQL to implement logic and operations on user-defined types that execute in the database server. See <a href="adobjplsql.htm#CHDEFBEA">Chapter 3, &#34;Using PL/SQL With Object Types&#34;</a>.</p>
<p class="subhead1"><a id="ADOBJ7060"></a>Java Support for Oracle Objects</p>
<p>Oracle Java VM is tightly integrated with Oracle Database and supports access to Oracle Objects through object extensions to Java Database Connectivity (JDBC). This provides dynamic SQL, and SQLJ, which provides static SQL. Thus, application developers can use Java to implement logic and operations on object types that execute in the database. You can map SQL types to existing Java classes to provide persistent storage for Java objects. See <a href="adobjenv.htm#CHDGGAIF">&#34;Java Object Storage&#34;</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC28567" href="../JJDBC/oraoor.htm#JJDBC28567"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a></div>
<p class="subhead1"><a id="ADOBJ7061"></a>External Procedures</p>
<p>You can implement database functions, procedures, or member methods of an object type in PL/SQL, Java, C, or .NET as external procedures. External procedures are best suited for tasks that are more quickly or easily done in a low-level language such as C. External procedures are always run in a safe mode outside the address space of the database. Generic external procedures can be written that declare one or more parameters to be of a system-defined generic type. Thus, an external procedure can use the system-defined generic type to work with data of any built-in or user-defined type.</p>
<p class="subhead1"><a id="ADOBJ7062"></a>Object Type Translator/JPublisher</p>
<p>Object Type Translator (OTT) and Oracle JPublisher provide client-side mappings to object type schemas by using schema information from the Oracle data dictionary to generate header files containing Java classes and C structures and indicators. You can use these generated header files in host-language applications for transparent access to database objects.</p>
<p class="subhead1"><a id="ADOBJ7063"></a>Client-Side Cache</p>
<p>Oracle Database provides an object cache for efficient access to persistent objects stored in the database. Copies of objects can be brought into the object cache. Once the data has been cached in the client, the application can traverse through these at memory speed. Any changes made to objects in the cache can be committed to the database by using the object extensions to Oracle Call Interface programmatic interfaces.</p>
<p class="subhead1"><a id="ADOBJ7064"></a>Oracle Call Interface and Oracle C++ Call Interface</p>
<p>Oracle Call Interface (OCI) and Oracle C++ Call Interface provide a comprehensive application programming interface for application and tool developers. Oracle Call Interface provides a run-time environment with functions to connect to an Oracle Database, and control transactions that access objects in the database. It allows application developers to access and manipulate objects and their attributes in the client-side object cache either navigationally, by traversing a graph of inter-connected objects, or associatively by specifying the nature of the data through declarative SQL DML. Oracle Call Interface provides a number of functions to access metadata about object types defined in the database at run-time. See <a href="adobjenv.htm#i452824">&#34;Oracle Call Interface (OCI)&#34;</a> and <a href="adobjenv.htm#i457214">&#34;Oracle C++ Call Interface (OCCI)&#34;</a>.</p>
<p class="subhead1"><a id="ADOBJ7065"></a>Pro*C/C++ Object Extensions</p>
<p>The Oracle Pro*C/C++ precompiler provides an embedded SQL application programming interface and offers a higher level of abstraction than Oracle Call Interface. Like Oracle Call Interface, the Pro*C/C++ precompiler allows application developers to use the Oracle client-side object cache and the Object Type Translator Utility. Pro*C/C++ supports the use of C bind variables for Oracle object types. Pro*C/C++ also provides simplified syntax to allocate and free objects of SQL types and access them using SQL DML or the navigational interface. See <a href="adobjenv.htm#i452824">&#34;Oracle Call Interface (OCI)&#34;</a>.</p>
<p class="subhead2"><a id="ADOBJ7067"></a>.NET Object Extensions<a id="sthref83"></a><a id="sthref84"></a><a id="sthref85"></a><a id="sthref86"></a><a id="sthref87"></a></p>
<p>Oracle Developer Tools for Visual Studio (ODT) and Oracle Data Provider for .NET (ODP.NET) support .NET custom objects that map to Oracle object-relational data types, collections, and REFs. ODT is a set of tools incorporated into a Visual Studio integrated development environment, which allow managing these data types inside the Oracle database. Through the ODT Custom Class Wizard, Oracle objects can be automatically mapped to .NET custom types to ease data sharing between Oracle databases and .NET applications. Data access to these .NET custom types occur through ODP.NET.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CLRNT" href="../CLRNT/toc.htm"><span class="italic">Oracle Database Extensions for .NET Developer&#39;s Guide for Microsoft Windows</span></a></p>
</li>
<li>
<p><a class="olink ODPNT" href="../ODPNT/toc.htm"><span class="italic">Oracle Data Provider for .NET Developer&#39;s Guide for Microsoft Windows</span></a></p>
</li>
<li>
<p><span class="italic">Oracle Developer Tools for Visual Studio Help</span></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3980">
<tr>
<td class="cellalignment3987">
<table class="cellalignment3985">
<tr>
<td class="cellalignment3984"><a href="release_changes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3984"><a href="adobjbas.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3989">
<table class="cellalignment3983">
<tr>
<td class="cellalignment3984"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3984"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3984"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3984"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3984"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3984"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>