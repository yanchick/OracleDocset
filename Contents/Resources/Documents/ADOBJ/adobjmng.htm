<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-746"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Managing%20Oracle%20Objects"></a><title>Managing Oracle Objects</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-08-06T13:19:6Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Object-Relational Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53277-02"/>
<meta name="dcterms.isVersionOf" content="ADOBJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adobjvew.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adobjadv.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53277-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/16</span> <!-- End Header -->
<div id="ADOBJ004" class="chapter"><a id="g1012556"></a> <a id="i1004449"></a>
<h1 class="chapter"><span class="secnum">7</span> Managing Oracle Objects</h1>
<p><a id="sthref578"></a><a id="sthref579"></a>This chapter explains how Oracle objects work in combination with the rest of the database, and how to perform DML and DDL operations on them. It contains the following major sections:</p>
<ul>
<li>
<p><a href="#i1004947">Privileges on Object Types and Their Methods</a></p>
</li>
<li>
<p><a href="#i1003083">Type Dependencies</a></p>
</li>
<li>
<p><a href="#i1004952">Synonyms for Object Types</a></p>
</li>
<li>
<p><a href="#i1005631">Performance Tuning</a></p>
</li>
</ul>
<a id="i1004947"></a>
<div id="ADOBJ00401" class="sect1">
<h2 class="sect1">Privileges on Object Types and Their Methods<a id="sthref580"></a><a id="sthref581"></a></h2>
<p>Privileges for object types exist at the system level and the schema object level.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDDHFBF">System Privileges for Object Types</a></p>
</li>
<li>
<p><a href="#CHDHEDDG">Schema Object Privileges</a></p>
</li>
<li>
<p><a href="#CHDIGFCF">Using Types in New Types or Tables</a></p>
</li>
<li>
<p><a href="#BCGFHJJJ">Example: Privileges on Object Types</a></p>
</li>
<li>
<p><a href="#CHDGCDFD">Access Privileges on Objects, Types, and Tables</a></p>
</li>
</ul>
<a id="CHDDHFBF"></a>
<div id="ADOBJ7357" class="sect2">
<h3 class="sect2">System Privileges for Object Types<a id="sthref582"></a><a id="sthref583"></a><a id="sthref584"></a><a id="sthref585"></a><a id="sthref586"></a><a id="sthref587"></a><a id="sthref588"></a><a id="sthref589"></a><a id="sthref590"></a><a id="sthref591"></a><a id="sthref592"></a><a id="sthref593"></a><a id="sthref594"></a><a id="sthref595"></a><a id="sthref596"></a><a id="sthref597"></a><a id="sthref598"></a><a id="sthref599"></a><a id="sthref600"></a><a id="sthref601"></a><a id="sthref602"></a><a id="sthref603"></a></h3>
<p>Oracle database defines the following system privileges for object types:</p>
<ul>
<li>
<p><code>CREATE</code> <code>TYPE</code> enables you to create object types in your own schema</p>
</li>
<li>
<p><code>CREATE</code> <code>ANY</code> <code>TYPE</code> enables you to create object types in any schema</p>
</li>
<li>
<p><code>ALTER</code> <code>ANY</code> <code>TYPE</code> enables you to alter object types in any schema</p>
</li>
<li>
<p><code>DROP</code> <code>ANY</code> <code>TYPE</code> enables you to drop named types in any schema</p>
</li>
<li>
<p><code>EXECUTE</code> <code>ANY</code> <code>TYPE</code> enables you to use and reference named types in any schema</p>
</li>
<li>
<p><code>UNDER</code> <code>ANY</code> <code>TYPE</code> enables you to create subtypes under any non-final object types</p>
</li>
<li>
<p><code>UNDER</code> <code>ANY</code> <code>VIEW</code> enables you to create subviews under any object view</p>
</li>
</ul>
<p>The following roles are helpful:</p>
<ul>
<li>
<p>The <code>RESOURCE</code> role includes the <code>CREATE</code> <code>TYPE</code> system privilege.</p>
</li>
<li>
<p>The DBA role includes all of these privileges.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDHEDDG"></a>
<div id="ADOBJ7358" class="sect2">
<h3 class="sect2">Schema Object Privileges<a id="sthref604"></a><a id="sthref605"></a></h3>
<p>Two schema object privileges apply to object types:</p>
<ul>
<li>
<p><code>EXECUTE</code> enables you to use the type to:</p>
<ul>
<li>
<p>Define a table.</p>
</li>
<li>
<p>Define a column in a relational table.</p>
</li>
<li>
<p>Declare a variable or parameter of the named type.</p>
</li>
</ul>
<p><code>EXECUTE</code> lets you invoke the methods of a type, including the constructor.</p>
<p>Method execution and the associated permissions are the same as for stored PL/SQL procedures.</p>
</li>
<li>
<p><code>UNDER</code> enables you to create a subtype or subview under the type or view on which the privilege is granted.</p>
<p>Only a grantor with the <code>UNDER</code> privilege <code>WITH</code> <code>GRANT</code> <code>OPTION</code> on the direct supertype or superview can grant the <code>UNDER</code> privilege on a subtype or subview.</p>
</li>
</ul>
<p>The phrase <code>WITH</code> <code>HIERARCHY</code> <code>OPTION</code> grants a specified object privilege on all subtypes of the object. This option is meaningful only with the <code>SELECT</code> object privilege granted on an object view in an object view hierarchy. In this case, the privilege applies to all subviews of the view on which the privilege is granted.</p>
</div>
<!-- class="sect2" -->
<a id="CHDIGFCF"></a>
<div id="ADOBJ7359" class="sect2">
<h3 class="sect2">Using Types in New Types or Tables<a id="sthref606"></a><a id="sthref607"></a><a id="sthref608"></a><a id="sthref609"></a><a id="sthref610"></a><a id="sthref611"></a><a id="sthref612"></a><a id="sthref613"></a></h3>
<p>In addition to the permissions detailed in the previous sections, you need specific privileges to:</p>
<ul>
<li>
<p>Create types or tables that use types created by other users.</p>
</li>
<li>
<p>Grant use of your new types or tables to other users.</p>
</li>
</ul>
<p>You must have either the <code>EXECUTE</code> <code>ANY</code> <code>TYPE</code> system privilege or the <code>EXECUTE</code> object privilege for any type used to define a new type or table. You must have been granted these privileges explicitly, and not through a role.</p>
<p>To grant access to your new type or table to other users, you must have either the required <code>EXECUTE</code> object privileges with the <code>GRANT</code> option or the <code>EXECUTE</code> <code>ANY</code> <code>TYPE</code> system privilege with the option <code>WITH</code> <code>ADMIN</code> <code>OPTION</code>. You must have been granted these privileges explicitly, not through a role.</p>
</div>
<!-- class="sect2" -->
<a id="BCGFHJJJ"></a>
<div id="ADOBJ7360" class="sect2">
<h3 class="sect2">Example: Privileges on Object Types<a id="sthref614"></a></h3>
<p><a href="#CHDJEHJI">Example 7-1</a> creates three users or schemas, <code>USER1</code>, <code>USER2</code>, and <code>USER3</code>, and grants them the <code>CREATE</code> <code>SESSION</code> and <code>RESOURCE</code> roles. Some of the subsequent examples in this chapter use these schemas.</p>
<p>This example requires you to create and use several passwords. If you plan to run the example, make these changes to your SQL code first.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For simplicity, this example does not perform the password management techniques that a deployed system normally uses. In a production environment, follow the Oracle Database password management guidelines, and disable any sample accounts. See <a class="olink DBSEG50053" href="../DBSEG/app_devs.htm#DBSEG50053"><span class="italic">Oracle Database Security Guide</span></a> for password management guidelines and other security recommendations.</div>
<div id="ADOBJ7646" class="example">
<p class="titleinexample"><a id="CHDJEHJI"></a>Example 7-1 Creating User Schemas</p>
<pre>-- Requires passwords
CONNECT SYSTEM
-- Enter <span class="italic">password</span>
CREATE USER user1 PROFILE default 
   IDENTIFIED BY password DEFAULT TABLESPACE example ACCOUNT UNLOCK;
GRANT CREATE SESSION TO user1;
GRANT RESOURCE TO user1;
GRANT CREATE SYNONYM TO user1;
GRANT CREATE PUBLIC SYNONYM TO user1;
GRANT DROP PUBLIC SYNONYM TO user1;
CREATE USER user2 PROFILE default 
   IDENTIFIED BY password DEFAULT TABLESPACE example ACCOUNT UNLOCK;
GRANT CREATE SESSION TO user2;
GRANT RESOURCE TO user2;
CREATE USER user3  PROFILE default 
   IDENTIFIED BY password DEFAULT TABLESPACE example ACCOUNT UNLOCK;
GRANT CREATE SESSION TO user3;
GRANT RESOURCE TO user3;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFGCDJ">Example 7-2</a> requires the input of a password, <code>USER1</code> performs the <code>CREATE</code> and <code>GRANT</code> Data Definition Language (DDL) statements in the <code>USER1</code> schema:</p>
<div id="ADOBJ7647" class="example">
<p class="titleinexample"><a id="CHDFGCDJ"></a>Example 7-2 Granting Privileges on Object Types</p>
<pre>-- Requires Ex. 7-1 and the input of a password
CONNECT user1
-- Enter <span class="italic">password</span>
</pre></div>
<!-- class="example" -->
<pre>CREATE TYPE type1 AS OBJECT ( attr1 NUMBER );
/
CREATE TYPE type2 AS OBJECT ( attr2 NUMBER );
/
GRANT EXECUTE ON type1 TO user2;
<span class="bold">GRANT EXECUTE ON type2 TO user2 WITH GRANT OPTION;</span>
</pre>
<p>In <a href="#CHDBCCFJ">Example 7-3</a>, <code>USER2</code> performs the <code>CREATE</code> DDL statement in the <code>USER2</code> schema:</p>
<div id="ADOBJ7648" class="example">
<p class="titleinexample"><a id="CHDBCCFJ"></a>Example 7-3 Performing DDL Statements in USER2 Schema</p>
<pre>-- Requires Ex. 7-1, 7-2 and password input
CONNECT user2
-- Enter <span class="italic">password</span>
CREATE TABLE tab1 OF user1.type1;
<span class="bold">CREATE TYPE type3 AS OBJECT ( attr3 user1.type2 );</span>
/
CREATE TABLE tab2 (col1 user1.type2 );
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDIJDIH">Example 7-4</a>, the first two statements succeed because <code>USER2</code> was granted the <code>EXECUTE</code> privilege with the <code>GRANT</code> option on <code>USER1</code>&#39;s <code>TYPE2</code> in the last line of <a href="#CHDFGCDJ">Example 7-2</a> and <a href="#CHDBCCFJ">Example 7-3</a> created <code>type3</code> as an object using <code>attr3</code> <code>user1.type2</code>.</p>
<p>However, the last grant <a href="#CHDIJDIH">Example 7-4</a> fails because <code>USER2</code> has not been granted the <code>EXECUTE</code> privilege with the <code>GRANT</code> option on <code>USER1.TYPE1</code>.</p>
<div id="ADOBJ7649" class="example">
<p class="titleinexample"><a id="CHDIJDIH"></a>Example 7-4 Performing Grants to USER3</p>
<pre>-- Requires Ex. 7-1, 7-2, and 7-3
GRANT EXECUTE ON type3 TO user3;
GRANT SELECT ON tab2 TO user3;

-- Privileges on Object Types
GRANT SELECT ON tab1 TO user3 -- incorrect statement;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDBBJCG">Example 7-5</a>, <code>USER3</code> has the necessary privileges to perform the following actions:</p>
<div id="ADOBJ7650" class="example">
<p class="titleinexample"><a id="CHDBBJCG"></a>Example 7-5 Creating Tables and Types</p>
<pre>-- Requires Ex. 7-1, 7-2, 7-3, and 7-4
CONNECT user3
-- Enter <span class="italic">password</span>
CREATE TYPE type4 AS OBJECT (attr4 user2.type3);
/
CREATE TABLE tab3 OF type4;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDGCDFD"></a>
<div id="ADOBJ7361" class="sect2">
<h3 class="sect2">Access Privileges on Objects, Types, and Tables<a id="sthref615"></a><a id="sthref616"></a><a id="sthref617"></a><a id="sthref618"></a><a id="sthref619"></a><a id="sthref620"></a><a id="sthref621"></a><a id="sthref622"></a><a id="sthref623"></a><a id="sthref624"></a></h3>
<p>Object types only make use of the <code>EXECUTE</code> privilege, but object tables use all the same privileges as relational tables:</p>
<ul>
<li>
<p><code>READ</code> or <code>SELECT</code> lets you access an object and its attributes from the table.</p>
</li>
<li>
<p><code>UPDATE</code> lets you modify attributes of objects in the table.</p>
</li>
<li>
<p><code>INSERT</code> lets you add new objects to the table.</p>
</li>
<li>
<p><code>DELETE</code> lets you delete objects from the table.</p>
</li>
</ul>
<p>Similar table and column privileges regulate the use of table columns of object types.</p>
<p>Selecting columns of an object table does not require privileges on the type of the object table. Selecting the entire <a href="glossary.htm#CHDCGBAB"><span class="xrefglossterm">row object</span></a>, however, does.</p>
<p>Consider the following schema and queries in <a href="#BCGEGCAH">Example 7-6</a>:</p>
<div id="ADOBJ7362" class="example">
<p class="titleinexample"><a id="BCGEGCAH"></a>Example 7-6 SELECT Privileges on Type Access</p>
<pre>-- Requires Ex. 7-1, 7-2, 7-3, 7-4, and 7-5
CREATE TYPE emp_type AS OBJECT (
  eno     NUMBER,
  ename   VARCHAR2(36));
/
CREATE TABLE emp OF emp_type; // an object table
GRANT SELECT on emp TO user1;
SELECT VALUE(e) FROM emp e;
SELECT eno, ename FROM emp;
</pre></div>
<!-- class="example" -->
<p>For both queries, Oracle database checks the user&#39;s <code>SELECT</code> privilege for the object table <code>emp</code>. For the first query, the user needs to obtain the <code>emp_type</code> type information to interpret the data. When the query accesses the <code>emp_type</code> type, the database checks the user&#39;s <code>EXECUTE</code> privilege.</p>
<p>The second query, however, does not involve named types, so the database does not check type privileges.</p>
<p>Additionally, <code>USER3</code> can perform queries such as these:</p>
<pre>SELECT t.col1.attr2 from user2.tab2 t;
SELECT t.attr4.attr3.attr2 FROM tab3 t;
</pre>
<p>Note that in both queries, <code>USER3</code> does not have explicit privileges on the underlying type. However, the statement succeeds because the type and table owners have the necessary privileges with the <code>GRANT</code> option.</p>
<p>Oracle database checks privileges on the following requests and returns an error if the requestor does not have the privilege for the action:</p>
<ul>
<li>
<p><a id="sthref625"></a><a id="sthref626"></a><a id="sthref627"></a><a id="sthref628"></a>Pinning an object in the object cache using its <code>REF</code> value causes the database to check the <code>READ</code> or <code>SELECT</code> privilege on the object table containing the object and the <code>EXECUTE</code> privilege on the object type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI100" href="../LNOCI/oci11obj.htm#LNOCI100"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for tips and techniques for using OCI program effectively with objects</div>
</li>
<li>
<p><a id="sthref629"></a><a id="sthref630"></a><a id="sthref631"></a><a id="sthref632"></a>Modifying an existing object or flushing an object from the object cache causes the database to check the <code>UPDATE</code> privilege on the destination object table. Flushing a new object causes the database to check the <code>INSERT</code> privilege on the destination object table.</p>
</li>
<li>
<p><a id="sthref633"></a><a id="sthref634"></a>Deleting an object causes the database to check the <code>DELETE</code> privilege on the destination table.</p>
</li>
<li>
<p>Invoking a method causes the database to check the <code>EXECUTE</code> privilege on the corresponding object type.</p>
</li>
</ul>
<p><a id="sthref635"></a>Oracle database does not provide column level privileges for object tables.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1003083"></a>
<div id="ADOBJ00402" class="sect1">
<h2 class="sect1">Type Dependencies<a id="sthref636"></a><a id="sthref637"></a></h2>
<p>This section discusses type dependencies in two broad categories:</p>
<ul>
<li>
<p>Situations where types depend upon each other for their definitions, where one type might be part of the definition of another type.</p>
</li>
<li>
<p>Situations where creating or dropping types is complicated by dependencies that the type has such, as tables or types.</p>
</li>
</ul>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDDBCEA">Creating Incomplete Types</a></p>
</li>
<li>
<p><a href="#CHDIEDAF">Completing Incomplete Types</a></p>
</li>
<li>
<p><a href="#CHDDEBEE">Manually Recompiling a Type</a></p>
</li>
<li>
<p><a href="#CHDBAEHJ">Using CREATE OR REPLACE TYPE with Type and Table Dependencies</a></p>
</li>
<li>
<p><a href="#CHDECAEB">Type Dependencies of Substitutable Tables and Columns</a></p>
</li>
<li>
<p><a href="#CHDFDBEE">The DROP TYPE FORCE Option</a></p>
</li>
<li>
<p><a href="#CHDGJIDF">Creating a Type Synonym</a></p>
</li>
<li>
<p><a href="#CHDCIJBE">Using a Type Synonym</a></p>
</li>
</ul>
<a id="CHDDBCEA"></a>
<div id="ADOBJ7651" class="sect2">
<h3 class="sect2">Creating Incomplete Types<a id="sthref638"></a><a id="sthref639"></a><a id="sthref640"></a><a id="sthref641"></a><a id="sthref642"></a><a id="sthref643"></a></h3>
<p>Types that depend on each other for their definitions, either directly or through intermediate types, are called mutually dependent. For example, you might want to define object types <code>employee</code> and <code>department</code> in such a way that one attribute of <code>employee</code> is the department the employee belongs to and one attribute of <code>department</code> is the employee who manages the department.</p>
<p>If you visualize a diagram with arrows showing the relationships among a set of mutually dependent types, the connections form a loop. To define such a circular dependency, you must use <code>REF</code>s for at least one segment of the circle.</p>
<p>For example, you can define the types show in <a href="#BCGHICIC">Example 7-7</a>.</p>
<div id="ADOBJ7363" class="example">
<p class="titleinexample"><a id="BCGHICIC"></a>Example 7-7 Creating Dependent Object Types</p>
<pre>-- Requires Ex. 7-1 and password
CONNECT user1
-- Enter password
ALTER SESSION SET PLSQL_WARNINGS = &#39;enable:all&#39;;

<span class="bold">CREATE TYPE department; // a placeholder</span>
/

CREATE TYPE employee AS OBJECT (
  name    VARCHAR2(30),
  dept    REF department,
  supv    REF employee );
/

CREATE TYPE emp_list AS TABLE OF employee;
/

<span class="bold">CREATE TYPE department AS OBJECT</span> (
  name    VARCHAR2(30),
  mgr     REF employee,
  staff   emp_list );
/
</pre></div>
<!-- class="example" -->
<p>This is a legal set of mutually dependent types and a legal sequence of SQL DDL statements. Oracle database compiles it without errors.</p>
<p>Notice that the code in <a href="#BCGHICIC">Example 7-7</a> creates the type <code>department</code> twice. The first statement is an optional, incomplete declaration of <code>department</code> that serves as a placeholder for the <code>REF</code> attribute of <code>employee</code> to point to. The declaration is incomplete in that it omits the <code>AS</code> <code>OBJECT</code> phrase and lists no attributes or methods. These are specified later in the full declaration that completes the type. In the meantime, <code>department</code> is created as an incomplete object type. This enables the compilation of <code>employee</code> to proceed without errors.</p>
<p>If you do not create incomplete types as placeholders, types that refer to the missing types still compile, but the compilation proceeds with errors. For example, if <code>department</code> did not exist at all, Oracle database would create it as an incomplete type and compile <code>employee</code> with errors. Then <code>employee</code> would be recompiled the next time that some operation accesses it. This time, if all the types it depends on have been created and its dependencies are satisfied, it compiles without errors.</p>
<p>Incomplete types also enable you to create types that contain <code>REF</code> attributes to a subtype that has not yet been created. To create such a supertype, first create an incomplete type of the subtype to be referenced. Create the complete subtype after you create the supertype.</p>
</div>
<!-- class="sect2" -->
<a id="CHDIEDAF"></a>
<div id="ADOBJ7364" class="sect2">
<h3 class="sect2">Completing Incomplete Types<a id="sthref644"></a></h3>
<p>When you have created all the types referenced by an incomplete type, complete the declaration of the incomplete type, because there is no longer any need for it to remain incomplete. Completing the type recompiles it and enables the system to release various locks.</p>
<p>To complete an incomplete type, you execute a <code>CREATE</code> <code>TYPE</code> statement that specifies the attributes and methods of the type, as shown at the end of <a href="#BCGHICIC">Example 7-7</a>.</p>
<p>Also, you must complete any incomplete types that the database creates for you. If, as discussed in the preceding section, you did not explicitly create <code>department</code> as an incomplete type, then the database did. In this case, you still need to complete it.</p>
<p>You must complete an incomplete object type as an object type: you cannot complete an object type as a collection type (a nested table type or an array type). The only alternative is to drop the type.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDEBEE"></a>
<div id="ADOBJ7368" class="sect2">
<h3 class="sect2">Manually Recompiling a Type<a id="sthref645"></a><a id="sthref646"></a></h3>
<p>If a type was created with compilation errors, and you attempt an operation on it, such as creating tables or inserting rows, you may receive an error. You need to recompile the type before attempting the operation. To manually recompile a type, execute an <code>ALTER</code> <code>TYPE</code> <code><span class="codeinlineitalic">typename</span></code> <code>COMPILE</code> statement. After you have successfully compiled the type, attempt the operation again.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBAEHJ"></a>
<div id="ADOBJ7365" class="sect2">
<h3 class="sect2">Using CREATE OR REPLACE TYPE with Type and Table Dependencies<a id="sthref647"></a><a id="sthref648"></a><a id="sthref649"></a><a id="sthref650"></a><a id="sthref651"></a></h3>
<p>The <code>CREATE</code> <code>OR</code> <code>REPLACE</code> <code>TYPE</code> statement throws an error if the type being replaced has table or type dependencies. This applies to objects, varrays, and nested table types. This also applies to type dependencies involving either inheritance or type composition (embedding one type into another). The latter might be a situation where one type is attribute of another.</p>
<p>Using the <code>FORCE</code> option with a <code>CREATE</code> <code>OR</code> <code>REPLACE</code> <code>TYPE</code> statement enables you to replace a type if it has type dependencies, but not table dependencies. Table dependencies still cause errors.</p>
<p><a href="#CHDHAAFE">Example 7-8</a> shows a <code>CREATE</code> <code>OR</code> <code>REPLACE</code> statement (second statement) that fails due to a type dependency.</p>
<div id="ADOBJ7366" class="example">
<p class="titleinexample"><a id="CHDHAAFE"></a>Example 7-8 CREATE OR REPLACE Type and Table Failure</p>
<pre>SQL&gt; CREATE type t1 AS OBJECT (a number) not final;
  2  /
Type created.
 
SQL&gt; CREATE TYPE t2 <span class="bold">UNDER t1</span> (b varchar(10));
  2  /
Type created.
 
SQL&gt; CREATE OR REPLACE TYPE t1 AS OBJECT (c varchar(20));
  2  /
CREATE OR REPLACE TYPE t1 AS OBJECT (c varchar(20));
*
ERROR at line 1:
ORA-02303: cannot drop or replace a type with type or table dependents
</pre></div>
<!-- class="example" -->
<p><a href="#CHDGIJHC">Example 7-9</a> shows code in which a <code>CREATE</code> <code>OR</code> <code>REPLACE</code> <code>FORCE</code> statement succeeds in replacing a type that has a type dependency and then creates a table using the parent type. However, the final <code>CREATE</code> <code>OR</code> <code>REPLACE</code> <code>FORCE</code> statement fails because the type now has a table dependency and even with the <code>FORCE</code> option, a type with a table dependency cannot be replaced.</p>
<div id="ADOBJ7367" class="example">
<p class="titleinexample"><a id="CHDGIJHC"></a>Example 7-9 CREATE OR REPLACE with FORCE</p>
<pre>SQL&gt; CREATE OR REPLACE TYPE t1 FORCE AS OBJECT (c varchar(20));
  2  /
Type created.
 
SQL&gt; CREATE TABLE tb1 (c1 t1);
Table created.
 
SQL&gt; CREATE OR REPLACE TYPE t1 FORCE AS OBJECT (d number);
  2  /
CREATE OR REPLACE TYPE t1 FORCE AS OBJECT (d number);
*
ERROR at line 1:
ORA-22866: cannot replace a type with table dependents
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS01375" href="../LNPLS/create_type.htm#LNPLS01375"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for details of the <code>CREATE</code> <code>OR REPLACE TYPE</code> SQL statement</div>
</div>
<!-- class="sect2" -->
<a id="CHDECAEB"></a>
<div id="ADOBJ7369" class="sect2">
<h3 class="sect2">Type Dependencies of Substitutable Tables and Columns<a id="sthref652"></a><a id="sthref653"></a></h3>
<p>A substitutable table or column of a specific type is dependent not only on that type but on all subtypes of the type as well. This is because a hidden column is added to the table for each attribute added in a subtype of the type. The hidden columns are added even if the substitutable table or column contains no data of that subtype.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adobjbas.htm#CIHEJHJJ">&#34;Substituting Types in a Type Hierarchy&#34;</a> for further explanation of substitutability</div>
<p>In <a href="#CHDCAFBG">Example 7-10</a>, a <code>persons</code> table of type <code>person_typ</code> is dependent not only on <code>person_typ</code> but also on the <code>person_typ</code> subtypes <code>student_typ</code> and <code>part_time_student_typ</code>.</p>
<p>If you attempt to drop a subtype that has a dependent type, table, or column, the <code>DROP</code> <code>TYPE</code> statement returns an error and aborts. Consequently, trying to drop a <code>part_time_student_typ</code> raises an error because of the dependent <code>persons</code> table.</p>
<p>If dependent tables or columns exist but contain no data of the type being dropped, you can use the <code>VALIDATE</code> keyword to drop the type. The <code>VALIDATE</code> keyword causes Oracle database to check for actual stored instances of the specified type and to drop the type if none are found. This also removes hidden columns associated with attributes unique to the type.</p>
<p>In <a href="#CHDCAFBG">Example 7-10</a>, the first <code>DROP</code> <code>TYPE</code> statement fails because <code>part_time_student_typ</code> has a dependent table (<code>persons</code>). But if <code>persons</code> contains no instances of <code>part_time_student_typ</code> (nor does any other dependent table or column), the <code>VALIDATE</code> keyword causes the second <code>DROP</code> <code>TYPE</code> statement to succeed.</p>
<div id="ADOBJ7652" class="example">
<p class="titleinexample"><a id="CHDCAFBG"></a>Example 7-10 DROP TYPE with and without VALIDATE</p>
<pre>CREATE TYPE person_typ AS OBJECT (
  idno           NUMBER,
  name           VARCHAR2(30),
  phone          VARCHAR2(20))
  NOT FINAL;
/
CREATE TYPE student_typ UNDER person_typ (
    dept_id NUMBER,
    major VARCHAR2(30))
NOT FINAL;
/
CREATE TYPE part_time_student_typ UNDER student_typ (number_hours NUMBER);
/
CREATE TABLE persons OF person_typ;
-- Following generates an error due to presence of Persons table 
<span class="bold">DROP</span> <span class="bold">TYPE</span> part_time_student_typ -- incorrect statement;
-- Following succeeds if there are no stored instances of part_time_student_typ
<span class="bold">DROP</span> <span class="bold">TYPE</span> part_time_student_typ <span class="bold">VALIDATE</span>;
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you always use the <code>VALIDATE</code> option while dropping subtypes.</div>
</div>
<!-- class="sect2" -->
<a id="CHDFDBEE"></a>
<div id="ADOBJ7370" class="sect2">
<h3 class="sect2">The DROP TYPE FORCE Option<a id="sthref654"></a></h3>
<p>The <code>DROP</code> <code>TYPE</code> statement also has a <code>FORCE</code> option that causes the type to be dropped even though it may have dependent types or tables. Use the <code>FORCE</code> option with great care, because any dependent types or tables that do exist are marked invalid and become inaccessible when the type is dropped. Data in a table that is marked invalid for this reason can never be accessed again. The only action that can be performed on such a table is to drop it.</p>
<p>See <a href="adobjadv.htm#i1006726">&#34;Type Evolution&#34;</a> for information about how to alter a type.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1004952"></a>
<div id="ADOBJ00404" class="sect1">
<h2 class="sect1">Synonyms for Object Types<a id="sthref655"></a><a id="sthref656"></a></h2>
<p>Just as you can create synonyms for tables, views, and various other schema objects, you can also define synonyms for object types.</p>
<p>Synonyms for types have the same advantages as synonyms for other kinds of schema objects: they provide a location-independent way to reference the underlying schema object. An application that uses public type synonyms can be deployed unaltered, in any schema of a database, without requiring a qualified type name with the schema name.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11805" href="../ADMIN/views.htm#ADMIN11805"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information on synonyms in general</div>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDGJIDF">Creating a Type Synonym</a></p>
</li>
<li>
<p><a href="#CHDCIJBE">Using a Type Synonym</a></p>
</li>
</ul>
<a id="CHDGJIDF"></a>
<div id="ADOBJ7371" class="sect2">
<h3 class="sect2">Creating a Type Synonym</h3>
<p>You create a type synonym with a <code>CREATE</code> <code>SYNONYM</code> statement. The user must have been granted <code>CREATE</code> <code>SYNONYM</code> and <code>CREATE</code> <code>PUBLIC SYNONYM</code> privileges.</p>
<p>For example, these statements create a type <code>typ1</code> and then create a synonym for it:</p>
<div id="ADOBJ7653" class="example">
<p class="titleinexample"><a id="sthref657"></a>Example 7-11 CREATE TYPE / SYNONYM for user1</p>
<pre>-- Example requires Ex.7-1 which created user1 and granted it the CREATE SYNONYM
-- and CREATE PUBLIC SYNONYM privileges
-- connect as user1 if not already connected.

CREATE TYPE typ1 AS OBJECT (x number);
/
<span class="bold">CREATE SYNONYM</span> syn1 FOR typ1;
</pre></div>
<!-- class="example" -->
<p>Synonyms can be created for collection types, too. The following example creates a synonym for a nested table type:</p>
<pre>CREATE TYPE typ2 AS TABLE OF NUMBER;
/
<span class="bold">CREATE SYNONYM</span> syn2 FOR typ2;
</pre>
<p>You create a public synonym by using the <code>PUBLIC</code> keyword:</p>
<pre>CREATE TYPE shape AS OBJECT ( name VARCHAR2(10) );
/
CREATE <span class="bold">PUBLIC</span> SYNONYM pub_shape FOR shape;
</pre>
<p>With the <code>REPLACE</code> option you can make the synonym point to a different underlying type. For example, the following statement causes <code>syn1</code> to point to type <code>typ2</code> instead of the type it formerly pointed to:</p>
<pre>CREATE OR <span class="bold">REPLACE</span> SYNONYM syn1 FOR typ2;
</pre></div>
<!-- class="sect2" -->
<a id="CHDCIJBE"></a>
<div id="ADOBJ7372" class="sect2">
<h3 class="sect2">Using a Type Synonym</h3>
<p>You can use a type synonym anywhere that you can refer to a type. For instance, you can use a type synonym in a DDL statement to name the type of a table column or type attribute.</p>
<p><a href="#BCGHHBJD">Example 7-12</a> uses synonym <code>syn1</code> to specify the type of an attribute in type <code>typ3</code>:</p>
<div id="ADOBJ7373" class="example">
<p class="titleinexample"><a id="BCGHHBJD"></a>Example 7-12 Using a Type Synonym in a Create Statement</p>
<pre>-- Requires Ex 7-1 and connection as user1
-- drop syn1 and typ1 if created for Ex. 7-12
CREATE TYPE typ1 AS OBJECT (x number);
/
CREATE SYNONYM syn1 FOR typ1;

CREATE TYPE typ3 AS OBJECT ( a syn1 );
/
</pre></div>
<!-- class="example" -->
<p>In the next statement, the type synonym <code>syn1</code> calls the constructor of the object type <code>typ1</code>, for which <code>syn1</code> is a synonym. The statement returns an object instance of <code>typ1</code>:</p>
<pre>SELECT syn1(0) FROM dual;
</pre>
<p>In the following, <code>syn2</code> is a synonym for a nested table type. The synonym replaces the actual type name in a <code>CAST</code> expression.</p>
<pre>SELECT <span class="bold">CAST</span>(MULTISET(SELECT eno FROM USER3.EMP) AS syn2) FROM dual;
</pre>
<p>This code returns the following output:</p>
<br/>
<code>SQL&gt; -- Type synonym used to call a constructor / nested table</code><br/>
<code>SELECT syn1(0) FROM dual;</code><br/>
<code>SELECT CAST(MULTISET(SELECT eno FROM USER3.EMP) AS syn2) FROM</code><br/>
<code>dual;</code><br/>
<br/>
<code>SQL&gt; SYN1(0)(X)</code><br/>
<code>----------------------------------------------------------------</code><br/>
<code>TYP1(0)</code><br/>
<br/>
<code>SQL&gt;</code><br/>
<code>CAST(MULTISET(SELECTENOFROMUSER3.EMP)ASSYN2)</code><br/>
<code>----------------------------------------------------------------</code><br/>
<code>TYP2()</code><br/>
<p>Type synonyms can be used in the following kinds of statements:</p>
<ul>
<li>
<p>DML statements: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>FLASHBACK</code> <code>TABLE</code>, <code>EXPLAIN</code> <code>PLAN</code>, and <code>LOCK</code> <code>TABLE</code></p>
</li>
<li>
<p>DDL statements: <code>AUDIT</code>, <code>NOAUDIT</code>, <code>GRANT</code>, <code>REVOKE</code>, and <code>COMMENT</code></p>
</li>
</ul>
<div id="ADOBJ7374" class="sect3"><a id="sthref658"></a>
<h4 class="sect3">Describing Schema Objects That Use Synonyms</h4>
<p>If a type or table has been created using type synonyms, the <code>DESCRIBE</code> command shows the synonyms in place of the types they represent. Similarly, catalog views, which show type names, such as <code>USER_TYPE_ATTRS</code>, show the type synonym names in their place.</p>
<p>You can query the catalog view <code>USER_SYNONYMS</code> to find out the underlying type of a type synonym.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Chapter 2 of <a class="olink REFRN002" href="../REFRN/GUID-8865F65B-EF6D-44A5-B0A1-3179EFF0C36A.htm#REFRN002"><span class="italic">Oracle Database Reference</span></a> for a complete list of the data dictionary catalog views</div>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7375" class="sect3"><a id="sthref659"></a>
<h4 class="sect3">Dependents of Type Synonyms</h4>
<p>A type that directly or indirectly references a synonym in its type declaration is a dependent of that synonym. Thus, in the following line from <a href="#BCGHHBJD">Example 7-12</a>, type <code>typ3</code> is a dependent type of synonym <code>syn1</code>.</p>
<pre>CREATE TYPE typ3 AS OBJECT ( a syn1 );
/
</pre>
<p>Other kinds of schema objects that reference synonyms in their DDL statements also become dependents of those synonyms. An object that depends on a type synonym depends on both the synonym and the underlying type of the synonym.</p>
<p>The dependency relationships of a synonym affect your ability to drop or rename the synonym. Dependent schema objects are also affected by some operations on synonyms. The following sections describe these various ramifications.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7376" class="sect3"><a id="sthref660"></a>
<h4 class="sect3">Restriction on Replacing a Type Synonym</h4>
<p>You can replace a synonym only if it has no dependent tables or valid user-defined types. Replacing a synonym is equivalent to dropping it and then re-creating a new synonym with the same name.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7377" class="sect3"><a id="sthref661"></a>
<h4 class="sect3">Dropping Type Synonyms</h4>
<p>You drop a synonym with the <code>DROP</code> <code>SYNONYM</code> statement as shown in <a href="#BCGHBDAB">Example 7-13</a>.</p>
<div id="ADOBJ7378" class="example">
<p class="titleinexample"><a id="BCGHBDAB"></a>Example 7-13 Dropping Type Synonyms</p>
<pre>CREATE SYNONYM syn4 FOR typ1;

DROP SYNONYM syn4;
</pre></div>
<!-- class="example" -->
<p>You cannot drop a type synonym if it has table or valid object types as dependents unless you use the <code>FORCE</code> option. The <code>FORCE</code> option causes any columns that directly or indirectly depend on the synonym to be marked unused, just as if the actual types of the columns were dropped. (A column indirectly depends on a synonym if, for instance, the synonym is used to specify the type of an attribute of the declared type of the column.)</p>
<p>Any dependent schema objects of a dropped synonym are invalidated. They can be revalidated by creating a local object or a new public synonym with the same name as the dropped synonym.</p>
<p>Dropping the underlying base type of a type synonym has the same effect on dependent objects as dropping the synonym.</p>
</div>
<!-- class="sect3" -->
<div id="ADOBJ7379" class="sect3"><a id="sthref662"></a>
<h4 class="sect3">Renaming Type Synonyms</h4>
<p>You can rename a type synonym with the <code>RENAME</code> statement. Renaming a synonym is equivalent to dropping it and then re-creating it with a new name. You cannot rename a type synonym if it has dependent tables or valid object types. The following example fails because synonym <code>syn1</code> has a dependent object type:</p>
<pre>RENAME syn1 TO syn3 -- invalid statement;
</pre></div>
<!-- class="sect3" -->
<div id="ADOBJ7380" class="sect3"><a id="sthref663"></a>
<h4 class="sect3">Public Type Synonyms and Local Schema Objects</h4>
<p>You cannot create a local schema object that has the same name as a public synonym if the public synonym has a dependent table or valid object type in the local schema that will hold the new schema object. Nor can you create a local schema object that has the same name as a private synonym in the same schema.</p>
<p>For instance, in the following example, table <code>shape_tab</code> is a dependent table of public synonym <code>pub_shape</code> because the table has a column that uses the synonym in its type definition. Consequently, the attempt to create a table that has the same name as public synonym <code>pub_shape</code>, in the same schema as the dependent table, fails:</p>
<pre>-- Following uses public synonym pub_shape
CREATE TABLE shape_tab ( c1 pub_shape );
-- Following is not allowed
CREATE TABLE pub_shape ( c1 NUMBER ) -- invalid statement;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005631"></a>
<div id="ADOBJ00405" class="sect1">
<h2 class="sect1">Performance Tuning<a id="sthref664"></a></h2>
<p>When tuning objects, the following items need to be addressed:</p>
<ul>
<li>
<p>How objects and object views consume CPU and memory resources during runtime</p>
</li>
<li>
<p>How to monitor memory and CPU resources during runtime</p>
</li>
<li>
<p>How to manage large numbers of objects</p>
</li>
</ul>
<p>Some of the key performance factors are the following:</p>
<ul>
<li>
<p><code>DBMS_STATS</code> package to collect statistics</p>
</li>
<li>
<p><code>tkprof</code> to profile execution of SQL commands</p>
</li>
<li>
<p><code>EXPLAIN</code> <code>PLAN</code> to generate the query plans</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TGSQL" href="../TGSQL/toc.htm"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for details on measuring and tuning the performance of your application</div>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3980">
<tr>
<td class="cellalignment3987">
<table class="cellalignment3985">
<tr>
<td class="cellalignment3984"><a href="adobjvew.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3984"><a href="adobjadv.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3989">
<table class="cellalignment3983">
<tr>
<td class="cellalignment3984"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3984"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3984"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3984"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3984"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3984"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>