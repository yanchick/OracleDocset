<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-114715"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/XStream%20In%20Concepts"></a><title>XStream In Concepts</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="Become familiar with the concepts related to XStream In."/>
<meta name="keywords" content="XStream In, apply handlers, conflict resolution, rules, rule-based transformations, XStream, inbound servers, triggers, SET_TRIGGER_FIRING_PROPERTY procedure, spill position, applied high position, processed low position, applied low position, positions, eager_size apply parameter, max_parallelism apply parameter, large transactions, security, apply user, component-level, interoperation with Oracle Real Application Clusters, Oracle Real Application Clusters, interoperation with XStream In, flashback data archive, interoperation with transportable tablespaces, transportable tablespaces, CDBs, PDBs, multitenant architecture"/>
<meta name="dcterms.created" content="2017-06-13T10:02:49Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database XStream Guide"/>
<meta name="dcterms.identifier" content="E53119-03"/>
<meta name="dcterms.isVersionOf" content="XSTRM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2009, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xstrm_pt_xin.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xstrm_xin_config.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53119-03.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-D2C787E8-E16F-4286-921E-93195265E4F7"></a> <span id="PAGE" style="display:none;">15/24</span> <!-- End Header -->
<a id="XSTRM72696"></a>
<h1 id="XSTRM-GUID-D2C787E8-E16F-4286-921E-93195265E4F7" class="sect1"><span class="enumeration_chapter">8</span> XStream In Concepts</h1>
<p>Become familiar with the concepts related to XStream In.</p>
<div>
<ul class="ullinks">
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-E69A3573-0460-454F-91E5-2DD91E3C1AA0">Introduction to XStream In</a></strong><br/>
XStream In enables a remote client application to send information into an Oracle database from another system, such as a non-Oracle database or a file system.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-B02EE427-CCBB-408C-9907-3B54E9A45D1C">The Inbound Server</a></strong><br/>
With XStream In, an inbound server receives database changes from a client application.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-25617A91-D3E3-4848-9B28-90F5C00743C9">Position of LCRs and XStream In</a></strong><br/>
A client application streams LCRs to an XStream In inbound server.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-C2804BE9-6FDD-4024-910D-1B17176CA655">XStream In and Performance Considerations</a></strong><br/>
There are considerations for XStream In and performance.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-7020188C-8108-44E6-B6EF-9AFA035786C7">XStream In and Security</a></strong><br/>
Understand security related to the client application and XStream components, as well as the privileges required by the apply user for an inbound server.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-B2EF8B86-FFF0-4251-9FE3-577BF3F214CE">XStream In and Other Oracle Database Components</a></strong><br/>
XStream In can work with other Oracle Database components.</li>
</ul>
</div>
<a id="XSTRM1099"></a>
<div class="props_rev_3"><a id="GUID-E69A3573-0460-454F-91E5-2DD91E3C1AA0"></a>
<h2 id="XSTRM-GUID-E69A3573-0460-454F-91E5-2DD91E3C1AA0" class="sect2"><span class="enumeration_section">8.1</span> Introduction to XStream In</h2>
<div>
<p>XStream In enables a remote client application to send information into an Oracle database from another system, such as a non-Oracle database or a file system.</p>
<p>XStream In provides an efficient, transaction-based interface for sending information to an Oracle database from client applications. XStream In can consume the information coming into the Oracle database in several ways, including data replication, auditing, and change data capture. XStream In supports both OCI and Java interfaces.</p>
<p>When compared with OCI client applications that make DML changes to an Oracle database directly, XStream In is more efficient for near real-time, transaction-based, heterogeneous DML changes to Oracle databases.</p>
<p>XStream In uses the following features of Oracle Streams:</p>
<ul style="list-style-type: disc;">
<li>
<p>High performance processing of DML changes, optionally with parallelism</p>
</li>
<li>
<p>Apply process features such as SQL generation, conflict detection and resolution, error handling, and customized processing with apply handlers</p>
</li>
<li>
<p>Streaming network transmission of information with minimal network round-trips</p>
</li>
<li>
<p>Rules, rule sets, and rule-based transformations</p>
<p>When a custom rule-based transformation is specified on a rule used by an inbound server, the user who calls the transformation function is the apply user for the inbound server.</p>
</li>
</ul>
<p>XStream In supports all of the data types that are supported by Oracle Streams, including LOBs, <code class="codeph">LONG</code>, <code class="codeph">LONG</code> <code class="codeph">RAW</code>, and <code class="codeph">XMLType</code>. A client application sends LOB and <code class="codeph">XMLType</code> data to the inbound server in chunks. Several chunks comprise a single column value of LOB, <code class="codeph">LONG</code>, <code class="codeph">LONG</code> <code class="codeph">RAW</code>, or <code class="codeph">XMLType</code> data type.</p>
<div class="infoboxnotealso" id="GUID-E69A3573-0460-454F-91E5-2DD91E3C1AA0__GUID-539E171C-BEDC-4AEE-88EB-3D39166B9FEB">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink LNOCI72903" target="_blank" href="../LNOCI/oci25xstrmint.htm#LNOCI72903"><span><cite>Oracle Call Interface Programmer&#39;s Guide</cite></span></a></p>
</li>
<li>
<p><a class="olink STXJV" target="_blank" href="../STXJV/toc.htm"><span><cite>Oracle Database XStream Java API Reference</cite></span></a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="XSTRM1100"></a>
<div class="props_rev_3"><a id="GUID-B02EE427-CCBB-408C-9907-3B54E9A45D1C"></a>
<h2 id="XSTRM-GUID-B02EE427-CCBB-408C-9907-3B54E9A45D1C" class="sect2"><span class="enumeration_section">8.2</span> The Inbound Server</h2>
<p>With XStream In, an inbound server receives database changes from a client application.</p>
<div>
<ul class="ullinks">
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-6698E43D-F4E3-492E-A166-13F49DDB5201">Overview of Inbound Servers</a></strong><br/>
An <span class="bold">inbound server</span> is an optional Oracle background process that receives LCRs from a client application.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-84AE0643-6175-4C06-ACA9-DBF52BB29CFB">Data Types Applied by Inbound Servers</a></strong><br/>
Inbound servers support most data types.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-B075A397-158F-4187-A9EB-6AEA14BB9755">LCR Processing Options for Inbound Servers</a></strong><br/>
An inbound server can either apply LCRs directly or send LCRs to an apply handler for processing. Your options for LCR processing depend on whether the LCR received by an inbound server is a row LCR or a DDL LCR.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-26C60FD5-EC75-412D-9134-CA8D62EF2980">Inbound Servers and RESTRICTED SESSION</a></strong><br/>
Enabling and disabling restricted session affects inbound servers.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-ECE67E2D-FC0E-4897-A9AE-709F25705B27">Inbound Server Components</a></strong><br/>
An inbound server consists of the following subcomponents: a reader server, a coordinator process, and one or more apply servers.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-9AF938AA-3035-4D9B-9D7E-A8768D2364CB">Considerations for Inbound Servers</a></strong><br/>
There are several considerations for inbound servers.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-5602248A-8DE3-495B-B1E9-F1F61CC798C3">The Error Queue for an Inbound Server</a></strong><br/>
The error queue contains all of the current apply errors for a database. If there are multiple inbound servers in a database, then the error queue contains the apply errors for each inbound server.</li>
</ul>
</div>
<a id="XSTRM1425"></a><a id="XSTRM72863"></a>
<div class="props_rev_3"><a id="GUID-6698E43D-F4E3-492E-A166-13F49DDB5201"></a>
<h3 id="XSTRM-GUID-6698E43D-F4E3-492E-A166-13F49DDB5201" class="sect3"><span class="enumeration_section">8.2.1</span> Overview of Inbound Servers</h3>
<div>
<p>An <span class="bold">inbound server</span> is an optional Oracle background process that receives LCRs from a client application.</p>
<p>Specifically, a client application can attach to an inbound server and send row changes, DDL changes, and procedure calls encapsulated in LCRs.</p>
<p>An external client application connects to the inbound server using the OCI or the Java interface. After the connection is established, the client application acts as the capture agent for the inbound server by streaming LCRs to it.</p>
<p>A client application can create multiple sessions. Each session can attach to only one inbound server, and each inbound server can serve only one session at a time. However, different client application sessions can connect to different inbound servers or outbound servers. A client application can detach from the inbound server whenever necessary.</p>
<p><a href="xstrm_xin_cncpt.htm#GUID-6698E43D-F4E3-492E-A166-13F49DDB5201__BCEFBCGA">Figure 8-1</a> shows an inbound server configuration.</p>
<div class="figure" id="GUID-6698E43D-F4E3-492E-A166-13F49DDB5201__BCEFBCGA">
<p class="titleinfigure">Figure 8-1 XStream In Inbound Server</p>
<img width="606" height="246" src="img/GUID-B1925706-CE99-4577-86C3-4F5D5F560F1B-default.gif" alt="Description of Figure 8-1 follows" title="Description of Figure 8-1 follows"/><br/>
<a href="img_text/GUID-B1925706-CE99-4577-86C3-4F5D5F560F1B-print.htm">Description of &#34;Figure 8-1 XStream In Inbound Server&#34;</a></div>
<!-- class="figure" -->
<div class="infobox-note" id="GUID-6698E43D-F4E3-492E-A166-13F49DDB5201__GUID-D86CA7E5-7DD4-4D65-A119-77AAD6C21BA7">
<p class="notep1">Note:</p>
<p>An inbound server uses a queue that is not shown in <a href="xstrm_xin_cncpt.htm#GUID-6698E43D-F4E3-492E-A166-13F49DDB5201__BCEFBCGA">Figure 8-1</a>. An inbound server&#39;s queue is only used to store error transactions.</p>
</div>
</div>
</div>
<a id="XSTRM72697"></a>
<div class="props_rev_3"><a id="GUID-84AE0643-6175-4C06-ACA9-DBF52BB29CFB"></a>
<h3 id="XSTRM-GUID-84AE0643-6175-4C06-ACA9-DBF52BB29CFB" class="sect3"><span class="enumeration_section">8.2.2</span> Data Types Applied by Inbound Servers</h3>
<div>
<p>Inbound servers support most data types.</p>
<p>When applying row LCRs resulting from DML changes to tables, an inbound server applies changes made to columns of the following data types:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">VARCHAR2</code></p>
</li>
<li>
<p><code class="codeph">NVARCHAR2</code></p>
</li>
<li>
<p><code class="codeph">NUMBER</code></p>
</li>
<li>
<p><code class="codeph">FLOAT</code></p>
</li>
<li>
<p><code class="codeph">LONG</code></p>
</li>
<li>
<p><code class="codeph">DATE</code></p>
</li>
<li>
<p><code class="codeph">BINARY_FLOAT</code></p>
</li>
<li>
<p><code class="codeph">BINARY_DOUBLE</code></p>
</li>
<li>
<p><code class="codeph">TIMESTAMP</code></p>
</li>
<li>
<p><code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code></p>
</li>
<li>
<p><code class="codeph">TIMESTAMP</code> <code class="codeph">WITH</code> <code class="codeph">LOCAL</code> <code class="codeph">TIME</code> <code class="codeph">ZONE</code></p>
</li>
<li>
<p><code class="codeph">INTERVAL</code> <code class="codeph">YEAR</code> <code class="codeph">TO</code> <code class="codeph">MONTH</code></p>
</li>
<li>
<p><code class="codeph">INTERVAL</code> <code class="codeph">DAY</code> <code class="codeph">TO</code> <code class="codeph">SECOND</code></p>
</li>
<li>
<p><code class="codeph">RAW</code></p>
</li>
<li>
<p><code class="codeph">LONG</code> <code class="codeph">RAW</code></p>
</li>
<li>
<p><code class="codeph">UROWID</code></p>
</li>
<li>
<p><code class="codeph">CHAR</code></p>
</li>
<li>
<p><code class="codeph">NCHAR</code></p>
</li>
<li>
<p><code class="codeph">CLOB</code> with <code class="codeph">BASICFILE</code> or <code class="codeph">SECUREFILE</code> storage</p>
</li>
<li>
<p><code class="codeph">NCLOB</code> with <code class="codeph">BASICFILE</code> or <code class="codeph">SECUREFILE</code> storage</p>
</li>
<li>
<p><code class="codeph">BLOB</code> with <code class="codeph">BASICFILE</code> or <code class="codeph">SECUREFILE</code> storage</p>
</li>
<li>
<p><code class="codeph">XMLType</code> stored as <code class="codeph">CLOB</code>, object relational, or as binary XML</p>
</li>
<li>
<p>Object types</p>
</li>
<li>
<p>The following Oracle-supplied types: <code class="codeph">ANYDATA</code>, <code class="codeph">SDO_GEOMETRY</code>, and media types</p>
</li>
</ul>
<p>If XStream is replicating data for an object type, then the replication must be unidirectional, and all replication sites must agree on the names and data types of the attributes in the object type. You establish the names and data types of the attributes when you create the object type. For example, consider the following object type:</p>
<pre dir="ltr">CREATE TYPE cust_address_typ AS OBJECT
     (street_address     VARCHAR2(40), 
      postal_code        VARCHAR2(10), 
      city               VARCHAR2(30), 
      state_province     VARCHAR2(10), 
      country_id         CHAR(2));
/
</pre>
<p>At all replication sites, <code class="codeph">street_address</code> must be <code class="codeph">VARCHAR2(40)</code>, <code class="codeph">postal_code</code> must be <code class="codeph">VARCHAR2(10)</code>, <code class="codeph">city</code> must be <code class="codeph">VARCHAR2(30)</code>, and so on.</p>
<div class="infobox-note" id="GUID-84AE0643-6175-4C06-ACA9-DBF52BB29CFB__GUID-703D58E3-B6C9-4748-84CE-5259FEA12835">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>The maximum size of the <code class="codeph">VARCHAR2</code>, <code class="codeph">NVARCHAR2</code>, and <code class="codeph">RAW</code> data types has been increased in Oracle Database 12<span class="italic">c</span> when the <code class="codeph">COMPATIBLE</code> initialization parameter is set to <code class="codeph">12.0.0</code> and the <code class="codeph">MAX_STRING_SIZE</code> initialization parameter is set to <code class="codeph">EXTENDED</code>.</p>
</li>
<li>
<p>Varrays are not supported, but object type attributes can include varrays. However, primary keys cannot contain object type attributes.</p>
</li>
<li>
<p><code class="codeph">XMLType</code> stored as a <code class="codeph">CLOB</code> is deprecated in this release.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-84AE0643-6175-4C06-ACA9-DBF52BB29CFB__GUID-3A9CA1DD-C9AA-447E-BF2F-81105DFAD6A0">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF0021" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF0021"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for information about data types</p>
</div>
</div>
</div>
<a id="XSTRM72699"></a><a id="XSTRM72698"></a>
<div class="props_rev_3"><a id="GUID-B075A397-158F-4187-A9EB-6AEA14BB9755"></a>
<h3 id="XSTRM-GUID-B075A397-158F-4187-A9EB-6AEA14BB9755" class="sect3"><span class="enumeration_section">8.2.3</span> LCR Processing Options for Inbound Servers</h3>
<div>
<p>An inbound server can either apply LCRs directly or send LCRs to an apply handler for processing. Your options for LCR processing depend on whether the LCR received by an inbound server is a row LCR or a DDL LCR.</p>
<p>By default, an inbound server applies LCRs directly. The inbound server executes the change in the LCR on the database object identified in the LCR. The inbound server either successfully applies the change in the LCR or, if a conflict or an apply error is encountered, tries to resolve the error with a conflict handler or a user-specified procedure called an error handler.</p>
<p>If a conflict handler can resolve the conflict, then it either applies the LCR or it discards the change in the LCR. If an error handler can resolve the error, then it should apply the LCR, if appropriate. An error handler can resolve an error by modifying the LCR before applying it. If the conflict handler or error handler cannot resolve the error, then the inbound server places the transaction, and all LCRs associated with the transaction, into the error queue.</p>
<p>Instead of applying LCRs directly, you can process LCRs in a customized way with apply handlers. When you use an apply handler, an inbound server passes an LCR to a collection of SQL statements or to a user-defined PL/SQL procedure for processing. An apply handler can process the LCR in a customized way.</p>
<p>There are several types of apply handlers. This section uses the following categories to describe apply handlers:</p>
<div class="tblformal" id="GUID-B075A397-158F-4187-A9EB-6AEA14BB9755__GUID-3F5E52EC-7260-4E89-B59A-533210F39519">
<p class="titleintable">Table 8-1 Characteristics of Apply Handlers</p>
<table class="cellalignment5158" title="Characteristics of Apply Handlers" summary="This table lists the category for apply handlers and a description for each category.">
<thead>
<tr class="cellalignment5144">
<th class="cellalignment5154" id="d40209e888">Category</th>
<th class="cellalignment5188" id="d40209e891">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5144">
<td class="cellalignment5156" id="d40209e896" headers="d40209e888">
<p>Mechanism</p>
</td>
<td class="cellalignment5189" headers="d40209e896 d40209e891">
<p>The means by which the apply handler processes LCRs. The mechanism for an apply handler is either SQL statements or a user-defined PL/SQL procedure.</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5156" id="d40209e903" headers="d40209e888">
<p>Type of LCR</p>
</td>
<td class="cellalignment5189" headers="d40209e903 d40209e891">
<p>The type of LCR processed by the apply handler. The LCR type is either row LCR, DDL LCR, or transaction control directive.</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5156" id="d40209e910" headers="d40209e888">
<p>Scope</p>
</td>
<td class="cellalignment5189" headers="d40209e910 d40209e891">
<p>The level at which the apply handler is set. The scope is either one operation on one table or all operations on all database objects.</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5156" id="d40209e917" headers="d40209e888">
<p>Number allowed for each inbound server</p>
</td>
<td class="cellalignment5189" headers="d40209e917 d40209e891">
<p>The number of apply handlers of a specific type allowed for each inbound server. The number allowed is either one or many.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note" id="GUID-B075A397-158F-4187-A9EB-6AEA14BB9755__GUID-985E43D4-7BD1-4F56-BBD9-2D03EDF6E80E">
<p class="notep1">Note:</p>
<p><a class="olink STRMS175" target="_blank" href="../STRMS/strms_apply.htm#STRMS175"><span><cite>Oracle Streams Concepts and Administration</cite></span></a> for more information about these handlers and for instructions about using them</p>
</div>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-EC23A03E-22BE-41A7-8347-68CF2E507E1A">DML Handlers</a></strong><br/>
DML handlers process row LCRs received by an inbound server.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-B3A9E840-E0FE-416F-80FC-4B2EA1A04E81">Error Handlers</a></strong><br/>
An error handler is similar to a procedure DML handler. The difference between the two is that an error handler is invoked only if an apply error results when an inbound server tries to apply a row LCR for the specified operation on the specified table.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-8F42E223-F90F-4126-ACBA-56C55D0CBECD">DDL Handlers</a></strong><br/>
A <span class="bold">DDL handler</span> uses a PL/SQL procedure to process DDL LCRs.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-FC9D03AC-28FB-49C6-9D36-D92B3CF31B89">Precommit Handlers</a></strong><br/>
A <span class="bold">precommit handler</span> uses a PL/SQL procedure to process commit directive for transactions that include row LCRs.</li>
</ul>
</div>
<a id="XSTRM72700"></a>
<div class="props_rev_3"><a id="GUID-EC23A03E-22BE-41A7-8347-68CF2E507E1A"></a>
<h4 id="XSTRM-GUID-EC23A03E-22BE-41A7-8347-68CF2E507E1A" class="sect4"><span class="enumeration_section">8.2.3.1</span> DML Handlers</h4>
<div>
<p>DML handlers process row LCRs received by an inbound server.</p>
<p>There are two types of DML handlers: statement DML handlers and procedure DML handlers. A statement DML handler uses a collection of SQL statements to process row LCRs, while a procedure DML handler uses a PL/SQL procedure to process row LCRs.</p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-20BF2527-F4E5-4ECA-8BA7-D20BAE352D1A">Statement DML Handlers</a></strong><br/>
A <span class="bold">statement DML handler</span> uses a collection of SQL statements to process row LCRs.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-7A1AB243-D559-49C6-B9FD-858CCC6B66C3">Procedure DML Handlers</a></strong><br/>
A <span class="bold">procedure DML handler</span> uses a PL/SQL procedure to process row LCRs.</li>
</ul>
</div>
<a id="XSTRM72701"></a>
<div class="props_rev_3"><a id="GUID-20BF2527-F4E5-4ECA-8BA7-D20BAE352D1A"></a>
<h5 id="XSTRM-GUID-20BF2527-F4E5-4ECA-8BA7-D20BAE352D1A" class="sect5"><span class="enumeration_section">8.2.3.1.1</span> Statement DML Handlers</h5>
<div>
<p>A <span class="bold">statement DML handler</span> uses a collection of SQL statements to process row LCRs.</p>
<p>A statement DML handler has the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>Mechanism: A collection of SQL statements</p>
</li>
<li>
<p>Type of LCR: Row LCR</p>
</li>
<li>
<p>Scope: One operation on one table</p>
</li>
<li>
<p>Number allowed for each inbound server: Many, and many can be specified for the same operation on the same table</p>
</li>
</ul>
<p>Each SQL statement included in a statement DML handler has a unique execution sequence number. When a statement DML handler is invoked, it executes its statements in order from the statement with the lowest execution sequence number to the statement with the highest execution sequence number. An execution sequence number can be a positive number, a negative number, or a decimal number.</p>
<p>For each table associated with an inbound server, you can set a separate statement DML handler to process each of the following types of operations in row LCRs:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">INSERT</code></p>
</li>
<li>
<p><code class="codeph">UPDATE</code></p>
</li>
<li>
<p><code class="codeph">DELETE</code></p>
</li>
</ul>
<p>A statement DML handler is invoked when the inbound server receives a row LCR that performs the specified operation on the specified table. For example, the <code class="codeph">hr.employees</code> table can have one statement DML handler to process <code class="codeph">INSERT</code> operations and a different statement DML handler to process <code class="codeph">UPDATE</code> operations. Alternatively, the <code class="codeph">hr.employees</code> table can use the same statement DML handler for each type of operation.</p>
<p>You can specify multiple statement DML handlers for the same operation on the same table. In this case, these statement DML handlers can execute in any order, and each statement DML handler receives a copy of the original row LCR that was received by the inbound server.</p>
</div>
</div>
<a id="XSTRM72702"></a>
<div class="props_rev_3"><a id="GUID-7A1AB243-D559-49C6-B9FD-858CCC6B66C3"></a>
<h5 id="XSTRM-GUID-7A1AB243-D559-49C6-B9FD-858CCC6B66C3" class="sect5"><span class="enumeration_section">8.2.3.1.2</span> Procedure DML Handlers</h5>
<div>
<p>A <span class="bold">procedure DML handler</span> uses a PL/SQL procedure to process row LCRs.</p>
<p>A procedure DML handler has the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>Mechanism: A user-defined PL/SQL procedure</p>
</li>
<li>
<p>Type of LCR: Row LCR</p>
</li>
<li>
<p>Scope: One operation on one table</p>
</li>
<li>
<p>Number allowed for each inbound server: Many, but only one can be specified for the same operation on the same table</p>
</li>
</ul>
<p>For each table associated with an inbound server, you can set a separate procedure DML handler to process each of the following types of operations in row LCRs:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">INSERT</code></p>
</li>
<li>
<p><code class="codeph">UPDATE</code></p>
</li>
<li>
<p><code class="codeph">DELETE</code></p>
</li>
<li>
<p><code class="codeph">LOB_UPDATE</code></p>
</li>
</ul>
<p>A procedure DML handler is invoked when the inbound server receives a row LCR that performs the specified operation on the specified table. For example, the <code class="codeph">hr.employees</code> table can have one procedure DML handler to process <code class="codeph">INSERT</code> operations and a different procedure DML handler to process <code class="codeph">UPDATE</code> operations. Alternatively, the <code class="codeph">hr.employees</code> table can use the same procedure DML handler for each type of operation.</p>
<p>The PL/SQL procedure can perform any customized processing of row LCRs. For example, if you want each insert into a particular table at the source database to result in inserts into multiple tables at the destination database, then you can create a user-defined PL/SQL procedure that processes <code class="codeph">INSERT</code> operations on the table to accomplish this. Unlike statement DML handlers, procedure DML handlers can modify the column values in row LCRs.</p>
</div>
</div>
</div>
<a id="XSTRM72703"></a>
<div class="props_rev_3"><a id="GUID-B3A9E840-E0FE-416F-80FC-4B2EA1A04E81"></a>
<h4 id="XSTRM-GUID-B3A9E840-E0FE-416F-80FC-4B2EA1A04E81" class="sect4"><span class="enumeration_section">8.2.3.2</span> Error Handlers</h4>
<div>
<p>An error handler is similar to a procedure DML handler. The difference between the two is that an error handler is invoked only if an apply error results when an inbound server tries to apply a row LCR for the specified operation on the specified table.</p>
<p>An <span class="bold">error handler</span> has the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>Mechanism: A user-defined PL/SQL procedure</p>
</li>
<li>
<p>Type of LCR: Row LCR</p>
</li>
<li>
<p>Scope: One operation on one table</p>
</li>
<li>
<p>Number allowed for each inbound server: Many, but only one can be specified for the same operation on the same table</p>
</li>
</ul>
<div class="infobox-note" id="GUID-B3A9E840-E0FE-416F-80FC-4B2EA1A04E81__GUID-F514FB90-5C8A-4F7B-9BAD-2DCAC88C6C36">
<p class="notep1">Note:</p>
<p>Statement DML handlers cannot be used as error handlers.</p>
</div>
<div class="infoboxnotealso" id="GUID-B3A9E840-E0FE-416F-80FC-4B2EA1A04E81__GUID-DE7B8F93-BED2-41C8-943F-737DEF024D81">
<p class="notep1">See Also:</p>
<span class="q">&#34;<a href="xstrm_xin_cncpt.htm#GUID-7A1AB243-D559-49C6-B9FD-858CCC6B66C3" title="A procedure DML handler uses a PL/SQL procedure to process row LCRs.">Procedure DML Handlers</a>&#34;</span></div>
</div>
</div>
<a id="XSTRM72704"></a>
<div class="props_rev_3"><a id="GUID-8F42E223-F90F-4126-ACBA-56C55D0CBECD"></a>
<h4 id="XSTRM-GUID-8F42E223-F90F-4126-ACBA-56C55D0CBECD" class="sect4"><span class="enumeration_section">8.2.3.3</span> DDL Handlers</h4>
<div>
<p>A <span class="bold">DDL handler</span> uses a PL/SQL procedure to process DDL LCRs.</p>
<p>A DDL handler has the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>Mechanism: A user-defined PL/SQL procedure</p>
</li>
<li>
<p>Type of LCR: DDL LCR</p>
</li>
<li>
<p>Scope: All DDL LCRs received by the inbound server</p>
</li>
<li>
<p>Number allowed for each inbound server: One</p>
</li>
</ul>
<p>The user-defined PL/SQL procedure can perform any customized processing of DDL LCRs. For example, to log DDL changes before applying them, you can create a procedure that processes DDL operations to accomplish this.</p>
</div>
</div>
<a id="XSTRM72705"></a>
<div class="props_rev_3"><a id="GUID-FC9D03AC-28FB-49C6-9D36-D92B3CF31B89"></a>
<h4 id="XSTRM-GUID-FC9D03AC-28FB-49C6-9D36-D92B3CF31B89" class="sect4"><span class="enumeration_section">8.2.3.4</span> Precommit Handlers</h4>
<div>
<p>A <span class="bold">precommit handler</span> uses a PL/SQL procedure to process commit directive for transactions that include row LCRs.</p>
<p>A precommit handler has the following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>Mechanism: A user-defined PL/SQL procedure</p>
</li>
<li>
<p>Type of LCR: Commit directive for transactions that include row LCRs</p>
</li>
<li>
<p>Scope: All row LCRs with commit directives received by the inbound server</p>
</li>
<li>
<p>Number allowed for each inbound server: One</p>
</li>
</ul>
<p>You can use a precommit handler to audit commit directives for LCRs. A commit directive is a transaction control directive that contains a <code class="codeph">COMMIT</code>. A precommit handler is a user-defined PL/SQL procedure that can receive the commit information for a transaction and process the commit information in any customized way. A precommit handler can work with a statement DML handler or procedure DML handler.</p>
<p>For example, a precommit handler can improve performance by caching data for the length of a transaction. This data can include cursors, temporary LOBs, data from a message, and so on. The precommit handler can release or execute the objects cached by the handler when a transaction completes.</p>
</div>
</div>
</div>
<a id="XSTRM72709"></a>
<div class="props_rev_3"><a id="GUID-26C60FD5-EC75-412D-9134-CA8D62EF2980"></a>
<h3 id="XSTRM-GUID-26C60FD5-EC75-412D-9134-CA8D62EF2980" class="sect3"><span class="enumeration_section">8.2.4</span> Inbound Servers and RESTRICTED SESSION</h3>
<div>
<p>Enabling and disabling restricted session affects inbound servers.</p>
<p>When restricted session is enabled during system startup by issuing a <code class="codeph">STARTUP</code> <code class="codeph">RESTRICT</code> statement, inbound servers do not start, even if they were running when the database shut down. When the restricted session is disabled, each inbound server that was not stopped is started.</p>
<p>When restricted session is enabled in a running database by the SQL statement <code class="codeph">ALTER</code> <code class="codeph">SYSTEM</code> <code class="codeph">ENABLE</code> <code class="codeph">RESTRICTED</code> <code class="codeph">SESSION</code>, it does not affect any running inbound servers. These inbound servers continue to run and send LCRs to an XStream client application. If a stopped inbound server is started in a restricted session, then the inbound server does not actually start until the restricted session is disabled.</p>
</div>
</div>
<a id="XSTRM72711"></a>
<div class="props_rev_3"><a id="GUID-ECE67E2D-FC0E-4897-A9AE-709F25705B27"></a>
<h3 id="XSTRM-GUID-ECE67E2D-FC0E-4897-A9AE-709F25705B27" class="sect3"><span class="enumeration_section">8.2.5</span> Inbound Server Components</h3>
<div>
<p>An inbound server consists of the following subcomponents: a reader server, a coordinator process, and one or more apply servers.</p>
<p>An inbound server consists of the following subcomponents:</p>
<ul style="list-style-type: disc;">
<li>
<p>A <span class="bold">reader server</span> that receives LCRs from an XStream client application. The reader server is a process that computes dependencies between logical change records (LCRs) and assembles LCRs into transactions. The reader server then returns the assembled transactions to the coordinator process.</p>
<p>You can view the state of the reader server for an inbound server by querying the <code class="codeph">V$XSTREAM_APPLY_READER</code> dynamic performance view. See <a class="olink REFRN30267" target="_blank" href="../REFRN/GUID-EDE8FD49-7F56-46D5-A4BC-A08FCD683B30.htm#REFRN30267"><span><cite>Oracle Database Reference</cite></span></a>.</p>
</li>
<li>
<p>A <span class="bold">coordinator process</span> that gets transactions from the reader server and passes them to apply servers. The coordinator process name is <code class="codeph">AP</code><span class="italic"><code class="codeph">nn</code></span>, where <span class="italic"><code class="codeph">nn</code></span> can include letters and numbers. The coordinator process is an Oracle background process.</p>
<p>You can view the state of a coordinator process by querying the <code class="codeph">V$XSTREAM_APPLY_COORDINATOR</code> dynamic performance view. See <a class="olink REFRN30266" target="_blank" href="../REFRN/GUID-8089B39B-D60F-4DF0-99B7-03C64DD0434C.htm#REFRN30266"><span><cite>Oracle Database Reference</cite></span></a>.</p>
</li>
<li>
<p>One or more <span class="bold">apply servers</span> that apply LCRs to database objects as DML or DDL statements or that pass the LCRs to their appropriate apply handlers. Apply servers can also enqueue LCRs into the persistent queue portion of a queue specified by the <code class="codeph">DBMS_APPLY_ADM.SET_ENQUEUE_DESTINATION</code> procedure. Each apply server is a process. If an apply server encounters an error, then it then tries to resolve the error with a user-specified conflict handler or error handler. If an apply server cannot resolve an error, then it rolls back the transaction and places the entire transaction, including all of its LCRs, in the error queue.</p>
<p>When an apply server commits a completed transaction, this transaction has been applied. When an apply server places a transaction in the error queue and commits, this transaction also has been applied.</p>
<p>You can view the state of each apply server for an inbound server by querying the <code class="codeph">V$XSTREAM_APPLY_SERVER</code> dynamic performance view. See <a class="olink REFRN30268" target="_blank" href="../REFRN/GUID-699AB907-9FE5-42CC-B2BD-B9492323F0FB.htm#REFRN30268"><span><cite>Oracle Database Reference</cite></span></a>.</p>
</li>
</ul>
<p>The reader server and the apply server process names are <code class="codeph">AS</code><span class="italic"><code class="codeph">nn</code></span>, where <span class="italic"><code class="codeph">nn</code></span> can include letters and numbers. If a transaction being handled by an apply server has a dependency on another transaction that is not known to have been applied, then the apply server contacts the coordinator process and waits for instructions. The coordinator process monitors all of the apply servers to ensure that transactions are applied and committed in the correct order.</p>
</div>
</div>
<a id="XSTRM1633"></a>
<div class="props_rev_3"><a id="GUID-9AF938AA-3035-4D9B-9D7E-A8768D2364CB"></a>
<h3 id="XSTRM-GUID-9AF938AA-3035-4D9B-9D7E-A8768D2364CB" class="sect3"><span class="enumeration_section">8.2.6</span> Considerations for Inbound Servers</h3>
<div>
<p>There are several considerations for inbound servers.</p>
<p>The following are considerations for XStream inbound servers:</p>
<ul style="list-style-type: disc;">
<li>
<p>You can control a DML or DDL trigger&#39;s firing property using the <code class="codeph">SET_TRIGGER_FIRING_PROPERTY</code> procedure in the <code class="codeph">DBMS_DDL</code> package. This procedure lets you specify whether a trigger always fires, fires once, or fires for inbound server changes only. When a trigger is set to fire once, it fires for changes made by a user process, but it does not fire for changes made by an inbound server. A trigger&#39;s firing property works the same for apply processes and inbound servers. See <a class="olink STRMS215" target="_blank" href="../STRMS/strms_adapply.htm#STRMS215"><span><cite>Oracle Streams Concepts and Administration</cite></span></a>.</p>
</li>
<li>
<p>An inbound server ignores the setting for the <code class="codeph">ignore_transaction</code> apply parameter because LCRs sent to the inbound server by the client application might not have transaction ID values.</p>
</li>
<li>
<p>An inbound server ignores the setting for the <code class="codeph">maximum_scn</code> apply parameter because LCRs sent to the inbound server by the client application might not have SCN values.</p>
<div class="infoboxnotealso" id="GUID-9AF938AA-3035-4D9B-9D7E-A8768D2364CB__GUID-1162B42C-6E67-4994-8509-D683B92ADBB9">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS314" target="_blank" href="../ARPLS/d_apply.htm#ARPLS314"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a> for more information about apply parameters</p>
</div>
</li>
</ul>
</div>
</div>
<a id="XSTRM72712"></a>
<div class="props_rev_3"><a id="GUID-5602248A-8DE3-495B-B1E9-F1F61CC798C3"></a>
<h3 id="XSTRM-GUID-5602248A-8DE3-495B-B1E9-F1F61CC798C3" class="sect3"><span class="enumeration_section">8.2.7</span> The Error Queue for an Inbound Server</h3>
<div>
<p>The error queue contains all of the current apply errors for a database. If there are multiple inbound servers in a database, then the error queue contains the apply errors for each inbound server.</p>
<p>Trusted users can view apply errors by querying the <code class="codeph">DBA_APPLY_ERROR</code> data dictionary view or by using Oracle Enterprise Manager Cloud Control. The <code class="codeph">DBA_APPLY_ERROR</code> data dictionary view enables the trusted user to see information about apply errors for other users. Untrusted users can view apply errors by querying the <code class="codeph">ALL_APPLY_ERROR</code> data dictionary view. This view shows only apply errors for the untrusted user.</p>
<p>Also, trusted users can view more detailed information about apply errors by querying the <code class="codeph">DBA_APPLY_ERROR_MESSAGES</code> data dictionary view. Untrusted users can view more detailed information about apply errors by querying the <code class="codeph">ALL_APPLY_ERROR_MESSAGES</code> data dictionary view. These views include information about the row that caused the error in an error transaction.</p>
<p>The error queue stores information about transactions that could not be applied successfully by the inbound server running in a database. A transaction can include many LCRs. When an unhandled error occurs during apply, an inbound server automatically moves all of the LCRs in the transaction that satisfy the inbound server&#39;s rule sets to the error queue.</p>
<p>You can correct the condition that caused an error and then reexecute the transaction that caused the error. For example, you might modify a row in a table to correct the condition that caused an error.</p>
<p>When the condition that caused the error has been corrected, you can either reexecute the transaction in the error queue using the <code class="codeph">EXECUTE_ERROR</code> or <code class="codeph">EXECUTE_ALL_ERRORS</code> procedure, or you can delete the transaction from the error queue using the <code class="codeph">DELETE_ERROR</code> or <code class="codeph">DELETE_ALL_ERRORS</code> procedure. These procedures are in the <code class="codeph">DBMS_APPLY_ADM</code> package.</p>
<p>When you reexecute a transaction in the error queue, you can specify that the transaction be executed either by the user who originally placed the error in the error queue or by the user who is reexecuting the transaction. Also, the current tag for the inbound server is used when you reexecute a transaction in the error queue.</p>
<p>A reexecuted transaction uses any relevant apply handlers and conflict resolution handlers. If, to resolve the error, a row LCR in an error queue must be modified before it is executed, then you can configure a procedure DML handler to process the row LCR that caused the error in the error queue. In this case, the DML handler can modify the row LCR to avoid a repetition of the same error. The row LCR is passed to the DML handler when you reexecute the error containing the row LCR. For example, a statement DML handler might insert different values than the ones present in an insert row LCR, while a procedure DML handler might modify one or more columns in the row LCR to avoid a repetition of the same error.</p>
</div>
</div>
</div>
<a id="XSTRM1487"></a><a id="XSTRM1102"></a>
<div class="props_rev_3"><a id="GUID-25617A91-D3E3-4848-9B28-90F5C00743C9"></a>
<h2 id="XSTRM-GUID-25617A91-D3E3-4848-9B28-90F5C00743C9" class="sect2"><span class="enumeration_section">8.3</span> Position of LCRs and XStream In</h2>
<div>
<p>A client application streams LCRs to an XStream In inbound server.</p>
<p>This section describes concepts related to the LCR positions for an inbound server.</p>
<p>Each position must be encoded in a format (such as base-16 encoding) that supports byte comparison. The position is essential to the total order of the transaction stream sent by client applications using the XStream In interface.</p>
<p>The following positions are important for inbound servers:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <span class="bold">applied low position</span> indicates that the LCRs less than or equal to this value have been applied.</p>
<p>An LCR is applied by an inbound server when the LCR has either been executed, sent to an apply handler, or moved to the error queue.</p>
</li>
<li>
<p>The <span class="bold">spill position</span> indicates that the LCRs with positions less than or equal to this value have either been applied or spilled from memory to hard disk.</p>
</li>
<li>
<p>The <span class="bold">applied high position</span> indicates the highest position of an LCR that has been applied.</p>
<p>When the <code class="codeph">commit_serialization</code> apply parameter is set to <code class="codeph">DEPENDENT_TRANSACTIONS</code> for an inbound server, an LCR with a higher commit position might be applied before an LCR with a lower commit position. When this happens, the applied high position is different from the applied low position.</p>
</li>
<li>
<p>The processed low position is the higher value of either the applied low position or the spill position.</p>
<p>The processed low position is the position below which the inbound server no longer requires any LCRs. This position corresponds with the oldest SCN for an Oracle Streams apply process that applies changes captured by a capture process.</p>
<p>The processed low position indicates that the LCRs with positions less than or equal to this position have been processed by the inbound server. If the client re-attaches to the inbound server, then it must send only LCRs with positions greater than the processed low position because the inbound server discards any LCRs with positions less than or equal to the processed low position.</p>
</li>
</ul>
<p>If the client application stops abnormally, then the connection between the client application and the inbound server is automatically broken. Upon restart, the client application retrieves the processed low position from the inbound server and instructs its capture agent to retrieve changes starting from this processed low position.</p>
<p>To limit the recovery time of a client application using the XStream In interface, the client application can send activity, such as empty transactions, periodically to the inbound server. Row LCRs can include commit transaction control directives. When there are no LCRs to send to the server, the client application can send a row LCR with a commit directive to advance the inbound server&#39;s processed low position. This activity acts as an acknowledgment so that the inbound server&#39;s processed low position is advanced.</p>
<p>After position 3, there are no relevant changes to send to the inbound server. If the inbound server restarts when the client application has processed all the changes up to position 101, then, after restarting, the client application must recheck all of the external database changes from position 4 forward. The rechecks are required because the inbound server&#39;s processed low position is 3.</p>
<p>Instead, assume that the client application sends commits to the inbound server periodically, even when there are no relevant changes to the <code class="codeph">hr.employees</code> table:</p>
<div class="tblformal" id="GUID-25617A91-D3E3-4848-9B28-90F5C00743C9__GUID-637D4986-A16D-4797-A2D0-1C845488D3B8">
<table class="cellalignment5158" summary="This table illustrates several changes to the external data source and the position for each change.">
<thead>
<tr class="cellalignment5144">
<th class="cellalignment5184" id="d40209e2251">Position</th>
<th class="cellalignment5190" id="d40209e2254">Change</th>
<th class="cellalignment5180" id="d40209e2257">Client Application Activity</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2262" headers="d40209e2251">
<p>1</p>
</td>
<td class="cellalignment5191" headers="d40209e2262 d40209e2254">
<p>Insert into the <code class="codeph">hr.employees</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2262 d40209e2257">
<p>Send row LCR including the change to the inbound server</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2275" headers="d40209e2251">
<p>2</p>
</td>
<td class="cellalignment5191" headers="d40209e2275 d40209e2254">
<p>Insert into the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2275 d40209e2257">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2288" headers="d40209e2251">
<p>3</p>
</td>
<td class="cellalignment5191" headers="d40209e2288 d40209e2254">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2288 d40209e2257">
<p>Send a row LCR with a commit directive to inbound server</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2298" headers="d40209e2251">
<p>4</p>
</td>
<td class="cellalignment5191" headers="d40209e2298 d40209e2254">
<p>Insert into the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2298 d40209e2257">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2311" headers="d40209e2251">
<p>5</p>
</td>
<td class="cellalignment5191" headers="d40209e2311 d40209e2254">
<p>Update the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2311 d40209e2257">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2324" headers="d40209e2251">
<p>6</p>
</td>
<td class="cellalignment5191" headers="d40209e2324 d40209e2254">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2324 d40209e2257">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2334" headers="d40209e2251">
<p>7</p>
</td>
<td class="cellalignment5191" headers="d40209e2334 d40209e2254">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2334 d40209e2257">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2344" headers="d40209e2251">
<p>...</p>
</td>
<td class="cellalignment5191" headers="d40209e2344 d40209e2254">
<p>... (Activity on the external data source, but no changes to the <code class="codeph">hr.employees</code> table)</p>
</td>
<td class="cellalignment5181" headers="d40209e2344 d40209e2257">
<p>Send several row LCRs, each one with a commit directive, to the inbound server</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2357" headers="d40209e2251">
<p>100</p>
</td>
<td class="cellalignment5191" headers="d40209e2357 d40209e2254">
<p>Insert into the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2357 d40209e2257">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2370" headers="d40209e2251">
<p>101</p>
</td>
<td class="cellalignment5191" headers="d40209e2370 d40209e2254">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2370 d40209e2257">
<p>Send a row LCR with a commit directive to the inbound server</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>In this case, the inbound server moves its processed low position to 101 when it has processed all of the row LCRs sent by the client application. If the inbound server restarts, its processed low position is 101, and the client application does not need to check all of the changes back to position 3.</p>
<p>The sample applications in <a href="xstrm_ap_sample_appl.htm#GUID-B914FF75-92AA-4270-BF71-E9A5AA9228F8" title="Examples illustrate how to configure the Oracle Database components that are used by XStream. The examples configure sample client applications that communicate with an XStream outbound server and inbound server.">Sample XStream Client Application</a> include code that sends a row LCR with a commit directive to an inbound server. These commit directives are sometimes called &#34;ping LCRs.&#34; Search for the word &#34;ping&#34; in the sample XStream client applications to find the parts of the applications that include this code.</p>
<div class="example" id="GUID-25617A91-D3E3-4848-9B28-90F5C00743C9__GUID-699FC33A-6DAE-4AE4-84A4-3A5B1AA2A8ED">
<p class="titleinexample">Example 8-1 Advancing the Processed Low Position of an Inbound Server</p>
<p>Consider a client application and an external data source. The client application sends changes made to the <code class="codeph">hr.employees</code> table to the inbound server for processing, but the external data source includes many other tables, including the <code class="codeph">oe.orders</code> table.</p>
<p>Assume that the following changes are made to the external data source:</p>
<div class="tblformal" id="GUID-25617A91-D3E3-4848-9B28-90F5C00743C9__GUID-817B0D93-9326-4D36-ABE7-134E0E10514A">
<table class="cellalignment5158" summary="This table illustrates several changes to the external data source and the position for each change.">
<thead>
<tr class="cellalignment5144">
<th class="cellalignment5184" id="d40209e2412">Position</th>
<th class="cellalignment5190" id="d40209e2415">Change</th>
<th class="cellalignment5180" id="d40209e2418">Client Application Activity</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2423" headers="d40209e2412">
<p>1</p>
</td>
<td class="cellalignment5191" headers="d40209e2423 d40209e2415">
<p>Insert into the <code class="codeph">hr.employees</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2423 d40209e2418">
<p>Send row LCR including the change to the inbound server</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2436" headers="d40209e2412">
<p>2</p>
</td>
<td class="cellalignment5191" headers="d40209e2436 d40209e2415">
<p>Insert into the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2436 d40209e2418">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2449" headers="d40209e2412">
<p>3</p>
</td>
<td class="cellalignment5191" headers="d40209e2449 d40209e2415">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2449 d40209e2418">
<p>Send a row LCR with a commit directive to inbound server</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2459" headers="d40209e2412">
<p>4</p>
</td>
<td class="cellalignment5191" headers="d40209e2459 d40209e2415">
<p>Insert into the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2459 d40209e2418">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2472" headers="d40209e2412">
<p>5</p>
</td>
<td class="cellalignment5191" headers="d40209e2472 d40209e2415">
<p>Update the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2472 d40209e2418">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2485" headers="d40209e2412">
<p>6</p>
</td>
<td class="cellalignment5191" headers="d40209e2485 d40209e2415">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2485 d40209e2418">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2495" headers="d40209e2412">
<p>7</p>
</td>
<td class="cellalignment5191" headers="d40209e2495 d40209e2415">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2495 d40209e2418">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2505" headers="d40209e2412">
<p>...</p>
</td>
<td class="cellalignment5191" headers="d40209e2505 d40209e2415">
<p>... (Activity on the external data source, but no changes to the <code class="codeph">hr.employees</code> table)</p>
</td>
<td class="cellalignment5181" headers="d40209e2505 d40209e2418">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2518" headers="d40209e2412">
<p>100</p>
</td>
<td class="cellalignment5191" headers="d40209e2518 d40209e2415">
<p>Insert into the <code class="codeph">oe.orders</code> table</p>
</td>
<td class="cellalignment5181" headers="d40209e2518 d40209e2418">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5144">
<td class="cellalignment5187" id="d40209e2531" headers="d40209e2412">
<p>101</p>
</td>
<td class="cellalignment5191" headers="d40209e2531 d40209e2415">
<p>Commit</p>
</td>
<td class="cellalignment5181" headers="d40209e2531 d40209e2418">
<p>None</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The client application gets the changes from the external data source, generates appropriate LCRs, and sends the LCRs to the inbound server. Therefore, the inbound server receives the following LCRs:</p>
<ul style="list-style-type: disc;">
<li>
<p>Row LCR for position 1</p>
</li>
<li>
<p>Row LCR for position 3</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-25617A91-D3E3-4848-9B28-90F5C00743C9__GUID-A5E33DDE-9182-4506-8E6E-D599C2EBA2D7">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xstrm_gen_cncpt.htm#GUID-077AAE24-54CF-4102-9969-9540608FFB65" title="Each LCR has a position attribute. The position of an LCR identifies its placement in the stream of LCRs in a transaction.">Position Order in an LCR Stream</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xstrm_xin_mon.htm#GUID-00B0D22F-CD20-4404-AE18-5E7FB6E972BF" title="An example illustrates displaying the position information for an inbound server.">Displaying the Position Information for an Inbound Server</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
<!-- class="example" --></div>
</div>
<a id="XSTRM72954"></a>
<div class="props_rev_3"><a id="GUID-C2804BE9-6FDD-4024-910D-1B17176CA655"></a>
<h2 id="XSTRM-GUID-C2804BE9-6FDD-4024-910D-1B17176CA655" class="sect2"><span class="enumeration_section">8.4</span> XStream In and Performance Considerations</h2>
<p>There are considerations for XStream In and performance.</p>
<div>
<ul class="ullinks">
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-F4C53B30-8D18-4E52-BC9A-91F5A4A422A8">Optimizing XStream In Performance for Large Transactions</a></strong><br/>
For small transactions, XStream In does not begin to apply the logical change records (LCRs) until the inbound server receives a commit LCR for the transaction from the source. As a performance optimization, an inbound server can use eager apply to begin to apply large transactions before it receives the commit LCR.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-CEDD3CA1-3361-462C-A02C-27AD81A225EE">Avoiding Potential Bottlenecks in Transaction Tracking</a></strong><br/>
XStream In keeps track of the changes it is applying to the database to avoid reapplying transactions when an inbound server is restarted.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-81DB9E3D-8528-4E08-8572-F2B4C16DD0EC">Optimizing Transaction Apply Scheduling</a></strong><br/>
When the constraints on the target tables match the constraints on the source tables, you can optimize dependency computation by setting the <code class="codeph">compute_lcr_dep_on_arrival</code> apply parameter for an inbound server to <code class="codeph">Y</code>.</li>
</ul>
</div>
<a id="XSTRM72982"></a>
<div class="props_rev_3"><a id="GUID-F4C53B30-8D18-4E52-BC9A-91F5A4A422A8"></a>
<h3 id="XSTRM-GUID-F4C53B30-8D18-4E52-BC9A-91F5A4A422A8" class="sect3"><span class="enumeration_section">8.4.1</span> Optimizing XStream In Performance for Large Transactions</h3>
<div>
<p>For small transactions, XStream In does not begin to apply the logical change records (LCRs) until the inbound server receives a commit LCR for the transaction from the source. As a performance optimization, an inbound server can use eager apply to begin to apply large transactions before it receives the commit LCR.</p>
<p>The <code class="codeph">eager_size</code> apply parameter controls the minimum number of LCRs received by the inbound server before eager apply begins. When the number of LCRs in a transaction exceeds the value of the <code class="codeph">eager_size</code> apply parameter, the inbound server begins to apply the LCRs. The default value for this parameter is 9500. You can modify the parameter value to optimize XStream In performance in your environment.</p>
<p>Large transactions may require additional apply servers to apply the LCRs. After eager apply starts for a transaction, an inbound server can automatically create additional apply servers to apply the LCRs. The <code class="codeph">max_parallelism</code> apply parameter controls the maximum number of apply servers for an inbound server.</p>
<p>If an inbound server automatically creates additional apply servers, and some of them are idle for a period of time, then XStream In determines that they are no longer necessary and removes them automatically. However, the number of apply servers never goes below the value specified by the <code class="codeph">parallelism</code> apply parameter. Any statistics for these apply servers are aggregated as apply server 0 (zero).</p>
<p>For an inbound server to use eager apply for large transactions, the value of the <code class="codeph">eager_size</code> apply parameter must be less than the value of the <code class="codeph">txn_lcr_spill_threshold</code> apply parameter. When the value of <code class="codeph">txn_lcr_spill_threshold</code> is lower than <code class="codeph">eager_size</code>, a transaction spills to disk before eager apply begins, and a an inbound server cannot use eager apply for a transaction that has spilled to disk.</p>
<div class="infoboxnotealso" id="GUID-F4C53B30-8D18-4E52-BC9A-91F5A4A422A8__GUID-B3ECCA50-374E-4164-8C6D-36FBC2CB638E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ARPLS314" target="_blank" href="../ARPLS/d_apply.htm#ARPLS314"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a></p>
</li>
<li>
<p><span class="q">&#34;<a href="xstrm_xin_man.htm#GUID-0C9A2E32-C6CF-4EBD-AF77-254043F82024" title="As a performance optimization, an inbound server can use eager apply to begin to apply large transactions before it receives the commit LCR.">Managing Eager Errors Encountered by an Inbound Server</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
</div>
<a id="XSTRM72955"></a>
<div class="props_rev_3"><a id="GUID-CEDD3CA1-3361-462C-A02C-27AD81A225EE"></a>
<h3 id="XSTRM-GUID-CEDD3CA1-3361-462C-A02C-27AD81A225EE" class="sect3"><span class="enumeration_section">8.4.2</span> Avoiding Potential Bottlenecks in Transaction Tracking</h3>
<div>
<p>XStream In keeps track of the changes it is applying to the database to avoid reapplying transactions when an inbound server is restarted.</p>
<p>When the <code class="codeph">optimize_progress_table</code> apply parameter is set to <code class="codeph">TRUE</code>, the default, XStream In tracks its progress in the redo log. Use of the redo log avoids the potential bottleneck and contention caused by DML changes in the progress table.</p>
<p>When the <code class="codeph">optimize_progress_table</code> parameter is set to <code class="codeph">FALSE</code>, XStream In uses a table for tracking. In high volume environments, this table can be a potential bottleneck.</p>
<p>The apply database must be in archive log mode before apply tracking can be done in the redo log. If the <code class="codeph">optimize_progress_table</code> parameter is set to <code class="codeph">TRUE</code> but the apply database is not in archive log mode, then the setting of <code class="codeph">optimize_progress_table</code> is ignored and XStream In uses a table for tracking.</p>
<div class="infoboxnotealso" id="GUID-CEDD3CA1-3361-462C-A02C-27AD81A225EE__GUID-1C73C36F-F431-4F22-A3DB-4FCDFB990569">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS314" target="_blank" href="../ARPLS/d_apply.htm#ARPLS314"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a></p>
</div>
</div>
</div>
<a id="XSTRM72956"></a>
<div class="props_rev_3"><a id="GUID-81DB9E3D-8528-4E08-8572-F2B4C16DD0EC"></a>
<h3 id="XSTRM-GUID-81DB9E3D-8528-4E08-8572-F2B4C16DD0EC" class="sect3"><span class="enumeration_section">8.4.3</span> Optimizing Transaction Apply Scheduling</h3>
<div>
<p>When the constraints on the target tables match the constraints on the source tables, you can optimize dependency computation by setting the <code class="codeph">compute_lcr_dep_on_arrival</code> apply parameter for an inbound server to <code class="codeph">Y</code>.</p>
<p>If the constraints do not match, then set this apply parameter to <code class="codeph">N</code>, the default.</p>
<p>If this apply parameter is set to <code class="codeph">Y</code>, then the dependencies are computed as the LCRs for the transaction are received. If this apply parameter is set to <code class="codeph">N</code>, then the dependencies are computed only after all the LCRs for a committed transaction are received.</p>
<p>Regardless of <code class="codeph">compute_lcr_dep_on_arrival</code> apply parameter setting, the before image of the key columns must be available in the LCRs received by the inbound server. Key columns include primary key columns, foreign key column, and unique constraint columns. In an XStream configuration in which an inbound server applies changes captured by a capture process in an XStream Out configuration, supplemental logging ensures that the required information is in the LCRs.</p>
<div class="infoboxnotealso" id="GUID-81DB9E3D-8528-4E08-8572-F2B4C16DD0EC__GUID-3970ED1E-E809-41EB-AAF7-867FCE565B26">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xstrm_xout_config.htm#GUID-56F322CB-1598-4FC8-92D9-A14CD4F7971B" title="When you use a capture process to capture changes, supplemental logging must be specified for certain columns at a source database for changes to the columns to be applied successfully at a destination database.">If Required, Configure Supplemental Logging</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ARPLS314" target="_blank" href="../ARPLS/d_apply.htm#ARPLS314"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="XSTRM72864"></a>
<div class="props_rev_3"><a id="GUID-7020188C-8108-44E6-B6EF-9AFA035786C7"></a>
<h2 id="XSTRM-GUID-7020188C-8108-44E6-B6EF-9AFA035786C7" class="sect2"><span class="enumeration_section">8.5</span> XStream In and Security</h2>
<div>
<p>Understand security related to the client application and XStream components, as well as the privileges required by the apply user for an inbound server.</p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-EB226929-CEA5-4223-889F-554B4CF1D1F7">The XStream In Client Application and Security</a></strong><br/>
XStream In allows an application to send LCRs to an inbound server, and an inbound server can apply the database changes in the LCRs to the database.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-3853F5E6-981B-4094-A9B8-EFC65BE0D666">XStream In Component-Level Security</a></strong><br/>
All the components of the XStream In configuration run as the same user. This user is the apply user for the inbound server. This user can be either a trusted user with a high level of privileges or it can be an untrusted user that has only the privileges necessary for performing certain tasks.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-4CA7A498-B5C1-4B02-9296-1D0BD66CE9E9">Privileges Required by the Apply User for an Inbound Server</a></strong><br/>
An inbound server applies LCRs in the security domain of its apply user.</li>
</ul>
<div class="infoboxnotealso" id="GUID-7020188C-8108-44E6-B6EF-9AFA035786C7__GUID-B3077B77-91F4-46E9-958F-6B0A266AC543">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xstrm_intro.htm#GUID-E7C2EC43-186F-4163-AAEB-1D119C9D1DF1" title="With XStream, you can implement the security model that best fits with your organization&#39;s requirements.">XStream Security Models</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ARPLS70185" target="_blank" href="../ARPLS/d_xstrm_adm.htm#ARPLS70185"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a></p>
</li>
</ul>
</div>
</div>
<a id="XSTRM72929"></a>
<div class="props_rev_3"><a id="GUID-EB226929-CEA5-4223-889F-554B4CF1D1F7"></a>
<h3 id="XSTRM-GUID-EB226929-CEA5-4223-889F-554B4CF1D1F7" class="sect3"><span class="enumeration_section">8.5.1</span> The XStream In Client Application and Security</h3>
<div>
<p>XStream In allows an application to send LCRs to an inbound server, and an inbound server can apply the database changes in the LCRs to the database.</p>
<p>Java and OCI client applications must connect to an Oracle database before attaching to an XStream inbound server created on that database. The connected user must be the same as the apply user configured for the inbound server. Otherwise, an error is raised.</p>
<p>The XStream Java layer API relies on Oracle JDBC security because XStream accepts the Oracle JDBC connection instance created by client applications in the XStream <code class="codeph">attach</code> method in the <code class="codeph">XStreamIn</code> class. The connected user is validated as an XStream user.</p>
<div class="infoboxnotealso" id="GUID-EB226929-CEA5-4223-889F-554B4CF1D1F7__GUID-DCF3B387-0C86-46A2-932E-DD89E0FB68E1">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink LNOCI72903" target="_blank" href="../LNOCI/oci25xstrmint.htm#LNOCI72903"><span><cite>Oracle Call Interface Programmer&#39;s Guide</cite></span></a> for information about the OCI interface for XStream</p>
</li>
<li>
<p><a class="olink STXJV" target="_blank" href="../STXJV/toc.htm"><span><cite>Oracle Database XStream Java API Reference</cite></span></a> for information about the Java interface for XStream</p>
</li>
</ul>
</div>
</div>
</div>
<a id="XSTRM72930"></a>
<div class="props_rev_3"><a id="GUID-3853F5E6-981B-4094-A9B8-EFC65BE0D666"></a>
<h3 id="XSTRM-GUID-3853F5E6-981B-4094-A9B8-EFC65BE0D666" class="sect3"><span class="enumeration_section">8.5.2</span> XStream In Component-Level Security</h3>
<div>
<p>All the components of the XStream In configuration run as the same user. This user is the apply user for the inbound server. This user can be either a trusted user with a high level of privileges or it can be an untrusted user that has only the privileges necessary for performing certain tasks.</p>
<p>The security model of the XStream administrator also determines the data dictionary views that this user can query to monitor the XStream configuration. The trusted administrator can monitor XStream with <code class="codeph">DBA_</code> views. The untrusted administrator can monitor XStream with <code class="codeph">ALL_</code> views.</p>
<p>You create an XStream administrator using the <code class="codeph">GRANT_ADMIN_PRIVILEGE</code> procedure in the <code class="codeph">DBMS_XSTREAM_AUTH</code> package. When you run this procedure to create an XStream administrator for XStream In, the <code class="codeph">privilege_type</code> parameter determines the type of privileges granted to the user:</p>
<ul style="list-style-type: disc;">
<li>
<p>Specify <code class="codeph">APPLY</code> for the <code class="codeph">privilege_type</code> parameter if the XStream administrator manages only an XStream In configuration on the database.</p>
</li>
<li>
<p>Specify <code class="codeph">*</code> for the <code class="codeph">privilege_type</code> parameter if the XStream administrator manages both an XStream Out and an XStream In configuration on the database.</p>
</li>
</ul>
<p>The <code class="codeph">GRANT_ADMIN_PRIVILEGE</code> procedure grants privileges for Oracle-supplied views and packages that are required to run components in an XStream In or XStream Out configuration. This procedure does not grant privileges on database objects owned by users. If such privileges are required, then they must be granted separately.</p>
<div class="infoboxnotealso" id="GUID-3853F5E6-981B-4094-A9B8-EFC65BE0D666__GUID-E9A231E2-C655-4108-B6DA-B888EF991FF0">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xstrm_xin_config.htm#GUID-445DEEE0-6449-490B-8264-87CDB0183E1F" title="An XStream administrator configures and manages XStream components in an XStream In environment.">Configure an XStream Administrator</a>&#34;</span> for detailed information about configuring an XStream administrator</p>
</div>
</div>
</div>
<a id="XSTRM72710"></a>
<div class="props_rev_3"><a id="GUID-4CA7A498-B5C1-4B02-9296-1D0BD66CE9E9"></a>
<h3 id="XSTRM-GUID-4CA7A498-B5C1-4B02-9296-1D0BD66CE9E9" class="sect3"><span class="enumeration_section">8.5.3</span> Privileges Required by the Apply User for an Inbound Server</h3>
<div>
<p>An inbound server applies LCRs in the security domain of its apply user.</p>
<p>The inbound server receives LCRs from an XStream client application and applies the LCRs that satisfy the inbound server&#39;s rule sets. The apply user can apply LCRs directly to database objects. In addition, the apply user runs all custom rule-based transformations specified by the rules in these rule sets. The apply user also runs user-defined apply handlers. XStream In does not assume that the apply user for the inbound server is trusted.</p>
<p>The apply user must have the necessary privileges to apply changes, including the following privileges:</p>
<ul style="list-style-type: disc;">
<li>
<p>The required privileges to apply data manipulation language (DML) changes to tables in other schemas (when the inbound server receives DML changes to tables in other schemas)</p>
</li>
<li>
<p>The required privileges to apply data definition language (DDL) changes to the database (when the inbound server receives DDL changes)</p>
</li>
<li>
<p><code class="codeph">EXECUTE</code> privilege on the rule sets used by the inbound server</p>
</li>
<li>
<p><code class="codeph">EXECUTE</code> privilege on all custom rule-based transformation functions specified for rules in the positive rule set</p>
</li>
<li>
<p><code class="codeph">EXECUTE</code> privilege on any apply handlers</p>
</li>
</ul>
<p>An inbound server can be associated with only one user, but one user can be associated with many inbound servers.</p>
<p>Grant privileges to the apply user with the <code class="codeph">DBMS_XSTREAM_AUTH</code> package by specifying <code class="codeph">APPLY</code> for the <code class="codeph">privilege_type</code> parameter in the <code class="codeph">GRANT_ADMIN_PRIVILEGE</code> procedure.</p>
<div class="infoboxnotealso" id="GUID-4CA7A498-B5C1-4B02-9296-1D0BD66CE9E9__GUID-8D91CA08-3E13-49ED-BC3B-AE4B9C0B79F4">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xstrm_xin_config.htm#GUID-445DEEE0-6449-490B-8264-87CDB0183E1F" title="An XStream administrator configures and manages XStream components in an XStream In environment.">Configure an XStream Administrator</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xstrm_xin_man.htm#GUID-C34DBCAC-F217-4752-856B-F4811BEA81F4" title="An inbound server applies LCRs in the security domain of its apply user, and the client application must attach to the inbound server as the apply user. You can change the apply user for an inbound server with the ALTER_INBOUND procedure in the DBMS_XSTREAM_ADM package.">Changing the Apply User for an Inbound Server</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ARPLS73653" target="_blank" href="../ARPLS/d_xstrm_auth.htm#ARPLS73653"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a> for more information about the <code class="codeph">GRANT_ADMIN_PRIVILEGE</code> procedure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="XSTRM72865"></a>
<div class="props_rev_3"><a id="GUID-B2EF8B86-FFF0-4251-9FE3-577BF3F214CE"></a>
<h2 id="XSTRM-GUID-B2EF8B86-FFF0-4251-9FE3-577BF3F214CE" class="sect2"><span class="enumeration_section">8.6</span> XStream In and Other Oracle Database Components</h2>
<p>XStream In can work with other Oracle Database components.</p>
<div>
<ul class="ullinks">
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-C1C9C821-B69B-47A0-BD00-6E160792EE82">XStream In and Oracle Real Application Clusters</a></strong><br/>
You can configure an inbound server to apply changes in an Oracle Real Application Clusters (Oracle RAC) environment.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-A1327AD6-ADB5-4B4B-9855-43B31FBB509C">XStream In and Flashback Data Archive</a></strong><br/>
Inbound servers can apply changes encapsulated in logical change records (LCRs) to tables in a flashback data archive.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-4D586440-012D-4BA5-A2ED-D7A17C87978E">XStream In and Transportable Tablespaces</a></strong><br/>
You can import data into databases involved in an XStream replication environment using transportable tablespaces.</li>
<li class="ulchildlink"><strong><a href="xstrm_xin_cncpt.htm#GUID-4E7FDA7C-002C-41D3-8E7C-2918913C2B13">XStream In and a Multitenant Environment</a></strong><br/>
A multitenant environment enables an Oracle database to contain a portable set of schemas, objects, and related structures that appears logically to an application as a separate database.</li>
</ul>
</div>
<a id="XSTRM72866"></a>
<div class="props_rev_3"><a id="GUID-C1C9C821-B69B-47A0-BD00-6E160792EE82"></a>
<h3 id="XSTRM-GUID-C1C9C821-B69B-47A0-BD00-6E160792EE82" class="sect3"><span class="enumeration_section">8.6.1</span> XStream In and Oracle Real Application Clusters</h3>
<div>
<p>You can configure an inbound server to apply changes in an Oracle Real Application Clusters (Oracle RAC) environment.</p>
<p>The inbound server runs in the Oracle RAC instance where you connected. In the event that this instance fails, you can connect to a surviving instance and start the inbound server again.</p>
<div class="infoboxnotealso" id="GUID-C1C9C821-B69B-47A0-BD00-6E160792EE82__GUID-163F5076-F671-4105-BEF5-EA88D9B72E9A">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xstrm_xin_cncpt.htm#GUID-B02EE427-CCBB-408C-9907-3B54E9A45D1C" title="With XStream In, an inbound server receives database changes from a client application.">The Inbound Server</a></p>
</li>
<li>
<p><a class="olink RACAD" target="_blank" href="../RACAD/toc.htm"><span><cite>Oracle Real Application Clusters Administration and Deployment Guide</cite></span></a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="XSTRM72867"></a>
<div class="props_rev_3"><a id="GUID-A1327AD6-ADB5-4B4B-9855-43B31FBB509C"></a>
<h3 id="XSTRM-GUID-A1327AD6-ADB5-4B4B-9855-43B31FBB509C" class="sect3"><span class="enumeration_section">8.6.2</span> XStream In and Flashback Data Archive</h3>
<div>
<p>Inbound servers can apply changes encapsulated in logical change records (LCRs) to tables in a flashback data archive.</p>
<p>Inbound servers also support the following DDL statements:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CREATE</code> <code class="codeph">FLASHBACK</code> <code class="codeph">ARCHIVE</code></p>
</li>
<li>
<p><code class="codeph">ALTER</code> <code class="codeph">FLASHBACK</code> <code class="codeph">ARCHIVE</code></p>
</li>
<li>
<p><code class="codeph">DROP</code> <code class="codeph">FLASHBACK</code> <code class="codeph">ARCHIVE</code></p>
</li>
<li>
<p><code class="codeph">CREATE</code> <code class="codeph">TABLE</code> with a <code class="codeph">FLASHBACK</code> <code class="codeph">ARCHIVE</code> clause</p>
</li>
<li>
<p><code class="codeph">ALTER</code> <code class="codeph">TABLE</code> with a <code class="codeph">FLASHBACK</code> <code class="codeph">ARCHIVE</code> clause</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-A1327AD6-ADB5-4B4B-9855-43B31FBB509C__GUID-2AF3EF4A-E31B-4368-A922-3BA05E7D8FED">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xstrm_xin_cncpt.htm#GUID-B02EE427-CCBB-408C-9907-3B54E9A45D1C" title="With XStream In, an inbound server receives database changes from a client application.">The Inbound Server</a></p>
</li>
<li>
<p><a class="olink ADFNS01011" target="_blank" href="../ADFNS/adfns_flashback.htm#ADFNS01011"><span><cite>Oracle Database Development Guide</cite></span></a> for information about flashback data archive</p>
</li>
</ul>
</div>
</div>
</div>
<a id="XSTRM73033"></a>
<div class="props_rev_3"><a id="GUID-4D586440-012D-4BA5-A2ED-D7A17C87978E"></a>
<h3 id="XSTRM-GUID-4D586440-012D-4BA5-A2ED-D7A17C87978E" class="sect3"><span class="enumeration_section">8.6.3</span> XStream In and Transportable Tablespaces</h3>
<div>
<p>You can import data into databases involved in an XStream replication environment using transportable tablespaces.</p>
<div class="section">
<p>The instructions in this section apply when the following conditions are met:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The replication configuration is one in which an inbound server applies changes captured by a capture process in an XStream Out configuration.</p>
</li>
<li>
<p>The data being imported with transportable tablespaces must be included in each database in the replication environment.</p>
</li>
<li>
<p>After the import operation is complete, changes to the imported data will be replicated.</p>
</li>
</ul>
<p>In addition, the rules should instruct the replication environment to avoid replicating tagged LCRs.</p>
<p>When these conditions are met, complete the following steps:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Stop replication.</span></li>
<li><span>Use transportable tablespaces to import the data into each database in the replication environment.</span></li>
<li><span>Restart replication.</span></li>
</ol>
<div class="section">
<div class="infoboxnotealso" id="GUID-4D586440-012D-4BA5-A2ED-D7A17C87978E__GUID-48E0D91E-5958-4FAF-8289-06607E7E2E50">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ADMIN11394" target="_blank" href="../ADMIN/transport.htm#ADMIN11394"><span><cite>Oracle Database Administrator&rsquo;s Guide</cite></span></a> for more information about transportable tablespaces</p>
</li>
<li>
<p><a class="olink STREP008" target="_blank" href="../STREP/rep_tags.htm#STREP008"><span><cite>Oracle Streams Replication Administrator&#39;s Guide</cite></span></a> for information about tagged LCRs</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="XSTRM72931"></a>
<div class="props_rev_3"><a id="GUID-4E7FDA7C-002C-41D3-8E7C-2918913C2B13"></a>
<h3 id="XSTRM-GUID-4E7FDA7C-002C-41D3-8E7C-2918913C2B13" class="sect3"><span class="enumeration_section">8.6.4</span> XStream In and a Multitenant Environment</h3>
<div>
<p>A multitenant environment enables an Oracle database to contain a portable set of schemas, objects, and related structures that appears logically to an application as a separate database.</p>
<p>This self-contained collection is called a pluggable database (PDB). A multitenant container database (CDB) contains PDBs. This section assumes that you understand multitenant architecture concepts. See <a class="olink CNCPT89233" target="_blank" href="../CNCPT/part_consol.htm#CNCPT89233"><span><cite>Oracle Database Concepts</cite></span></a> for information.</p>
<p>In a CDB, the inbound server is restricted to receiving LCRs from one source database and only executing changes in the current container (one PDB or the root). A single inbound server cannot apply changes to more than one container in a CDB.</p>
<p>When the inbound server is in the root, the apply user must be a common user. When the inbound server is in a PDB, the apply user can be a common user or a local user.</p>
<div class="infoboxnotealso" id="GUID-4E7FDA7C-002C-41D3-8E7C-2918913C2B13__GUID-75B61770-7AB9-43AA-96BB-1C0DC4B19733">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xstrm_gen_cncpt.htm#GUID-CBD258F9-D53D-4DA8-98CE-D87232D06655" title="A multitenant environment enables an Oracle database to contain a portable set of schemas, objects, and related structures that appears logically to an application as a separate database. This self-contained collection is called a pluggable database (PDB). A CDB contains PDBs.">System-Created Rules and a Multitenant Environment</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ADMIN13506" target="_blank" href="../ADMIN/part_cdb.htm#ADMIN13506"><span><cite>Oracle Database Administrator&rsquo;s Guide</cite></span></a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5143">
<tr>
<td class="cellalignment5150">
<table class="cellalignment5148">
<tr>
<td class="cellalignment5147"><a href="xstrm_pt_xin.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5147"><a href="xstrm_xin_config.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2009, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5152">
<table class="cellalignment5146">
<tr>
<td class="cellalignment5147"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5147"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5147"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5147"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5147"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5147"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>