<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-104443"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Advanced%20Rule%20Concepts"></a><title>Advanced Rule Concepts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032"/>
<meta name="dcterms.created" content="2014-12-23T13:28:6Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Streams Concepts and Administration"/>
<meta name="dcterms.identifier" content="E53116-02"/>
<meta name="dcterms.isVersionOf" content="STRMS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="strms_glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="strms_adapply.htm" title="Previous" type="text/html"/>
<link rel="Next" href="strms_adcca.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53116-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/57</span> <!-- End Header -->
<div id="STRMS005" class="chapter"><a id="BABEBHGC"></a>
<h1 class="chapter"><span class="secnum">11</span> Advanced Rule Concepts</h1>
<p><a id="sthref520"></a>The following topics contain information about rules.</p>
<ul>
<li>
<p><a href="#i1006119">The Components of a Rule</a></p>
</li>
<li>
<p><a href="#i1006392">Rule Set Evaluation</a></p>
</li>
<li>
<p><a href="#i1006478">Database Objects and Privileges Related to Rules</a></p>
</li>
<li>
<p><a href="#i1006719">Evaluation Contexts Used in Oracle Streams</a></p>
</li>
<li>
<p><a href="#i1006787">Oracle Streams and Event Contexts</a></p>
</li>
<li>
<p><a href="#i1006830">Oracle Streams and Action Contexts</a></p>
</li>
<li>
<p><a href="#i1006868">User-Created Rules, Rule Sets, and Evaluation Contexts</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a href="strms_rules.htm#g1049257">Chapter 5, &#34;How Rules Are Used in Oracle Streams&#34;</a></p>
</li>
<li>
<p><a href="strms_mrules.htm#BABBBAIA">Chapter 18, &#34;Managing Rules&#34;</a></p>
</li>
<li>
<p><a class="olink STREX017" href="../STREX/rulesdemo.htm#STREX017"><span class="italic">Oracle Streams Extended Examples</span></a></p>
</li>
</ul>
</div>
<a id="i1006119"></a>
<div id="STRMS526" class="sect1">
<h2 class="sect1">The Components of a Rule<a id="sthref521"></a><a id="sthref522"></a></h2>
<p>A <span class="bold">rule</span> is a database object that enables a client to perform an action when an event occurs and a condition is satisfied. A rule consists of the following components:</p>
<ul>
<li>
<p><a href="#i1006145">Rule Condition</a></p>
</li>
<li>
<p><a href="#i1006223">Rule Evaluation Context</a> (optional)</p>
</li>
<li>
<p><a href="#i1006303">Rule Action Context</a> (optional)</p>
</li>
</ul>
<p>Each rule is specified as a condition that is similar to the condition in the <code dir="ltr">WHERE</code> clause of a SQL query. You can group related rules together into <span class="bold">rule sets</span>. A single rule can be in one rule set, multiple rule sets, or no rule sets.</p>
<p>Rule sets are evaluated by a <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a>, which is a built-in part of Oracle. Both user-created applications and Oracle features, such as Oracle Streams, can be clients of the rules engine.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A rule must be in a rule set for it to be evaluated.</div>
<a id="i1006145"></a>
<div id="STRMS527" class="sect2">
<h3 class="sect2">Rule Condition<a id="sthref523"></a><a id="sthref524"></a></h3>
<p>A <span class="bold">rule condition</span> combines one or more <a href="strms_glossary.htm#CHDHGHGJ"><span class="xrefglossterm">expression</span></a>s and conditions and returns a Boolean value, which is a value of <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code> (unknown). An <span class="bold">expression</span> is a combination of one or more values and operators that evaluate to a value. A value can be data in a table, data in variables, or data returned by a SQL function or a PL/SQL function. For example, the following expression includes only a single value:</p>
<pre dir="ltr">salary
</pre>
<p>The following expression includes two values (<code dir="ltr">salary</code> and <code dir="ltr">.1</code>) and an operator (<code dir="ltr">*</code>):</p>
<pre dir="ltr">salary * .1
</pre>
<p>The following condition consists of two expressions (<code dir="ltr">salary</code> and <code dir="ltr">3800</code>) and a condition (<code dir="ltr">=</code>):</p>
<pre dir="ltr">salary = 3800
</pre>
<p>This logical condition evaluates to <code dir="ltr">TRUE</code> for a given row when the <code dir="ltr">salary</code> column is <code dir="ltr">3800</code>. Here, the value is data in the <code dir="ltr">salary</code> column of a table.</p>
<p>A single rule condition can include more than one condition combined with the <code dir="ltr">AND</code>, <code dir="ltr">OR</code>, and <code dir="ltr">NOT</code> logical conditions to a form compound condition. A logical condition combines the results of two component conditions to produce a single result based on them or to invert the result of a single condition. For example, consider the following compound condition:</p>
<pre dir="ltr">salary = 3800 OR job_title = &#39;Programmer&#39; 
</pre>
<p>This rule condition contains two conditions joined by the <code dir="ltr">OR</code> logical condition. If either condition evaluates to <code dir="ltr">TRUE</code>, then the rule condition evaluates to <code dir="ltr">TRUE</code>. If the logical condition were <code dir="ltr">AND</code> instead of <code dir="ltr">OR</code>, then both conditions must evaluate to <code dir="ltr">TRUE</code> for the entire rule condition to evaluate to <code dir="ltr">TRUE</code>.</p>
<div id="STRMS528" class="sect3"><a id="sthref525"></a>
<h4 class="sect3">Variables in Rule Conditions</h4>
<p>Rule conditions can contain variables. When you use variables in rule conditions, precede each variable with a colon (:). The following is an example of a variable used in a rule condition:</p>
<pre dir="ltr">:x = 55
</pre>
<p>Variables let you refer to data that is not stored in a table. A variable can also improve performance by replacing a commonly occurring expression. Performance can improve because, instead of evaluating the same expression multiple times, the variable is evaluated once.</p>
<p>A rule condition can also contain an evaluation of a call to a subprogram. Such a condition is evaluated in the same way as other conditions. That is, it evaluates to a value of <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code> (unknown). The following is an example of a condition that contains a call to a simple function named <code dir="ltr">is_manager</code> that determines whether an employee is a manager:</p>
<pre dir="ltr">is_manager(employee_id) = &#39;Y&#39;
</pre>
<p>Here, the value of <code dir="ltr">employee_id</code> is determined by data in a table where <code dir="ltr">employee_id</code> is a column.</p>
<p>You can use user-defined types for variables. Therefore, variables can have attributes. When a variable has attributes, each attribute contains partial data for the variable. In rule conditions, you specify attributes using dot notation. For example, the following condition evaluates to <code dir="ltr">TRUE</code> if the value of attribute <code dir="ltr">z</code> in variable <code dir="ltr">y</code>&nbsp;is&nbsp;<code dir="ltr">9</code>:</p>
<pre dir="ltr">:y.z = 9
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
A rule cannot have a <code dir="ltr">NULL</code> (or empty) rule condition.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about conditions, expressions, and operators</p>
</li>
<li>
<p><a class="olink ADOBJ" href="../ADOBJ/toc.htm"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about user-defined types</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1006177"></a>
<div id="STRMS529" class="sect3">
<h4 class="sect3">Simple Rule Conditions<a id="sthref526"></a></h4>
<p>A simple rule condition is a condition that has one of the following forms:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">simple_rule_expression condition constant</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">constant condition simple_rule_expression</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">constant condition constant</span></code></p>
</li>
</ul>
<div id="STRMS530" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref527"></a>
<h5 class="sect4">Simple Rule Expressions</h5>
<p>In a simple rule condition, a <code dir="ltr"><span class="codeinlineitalic">simple_rule_expression</span></code> is one of the following:</p>
<ul>
<li>
<p>Table column.</p>
</li>
<li>
<p>Variable.</p>
</li>
<li>
<p>Variable attribute.</p>
</li>
<li>
<p>Method result where the method either takes no arguments or constant arguments and the method result can be returned by the variable method function, so that the expression is one of the data types supported for simple rules. Such methods include LCR member subprograms that meet these requirements, such as <code dir="ltr">GET_TAG</code>, <code dir="ltr">GET_VALUE</code>, <code dir="ltr">GET_COMPATIBLE</code>, <code dir="ltr">GET_EXTRA_ATTRIBUTE</code>, and so on.</p>
</li>
</ul>
<p>For table columns, variables, variable attributes, and method results, the following data types can be used in simple rule conditions:</p>
<ul>
<li>
<p><code dir="ltr">VARCHAR2</code></p>
</li>
<li>
<p><code dir="ltr">NVARCHAR2</code></p>
</li>
<li>
<p><code dir="ltr">NUMBER</code></p>
</li>
<li>
<p><code dir="ltr">DATE</code></p>
</li>
<li>
<p><code dir="ltr">BINARY_FLOAT</code></p>
</li>
<li>
<p><code dir="ltr">BINARY_DOUBLE</code></p>
</li>
<li>
<p><code dir="ltr">TIMESTAMP</code></p>
</li>
<li>
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</li>
<li>
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</li>
<li>
<p><code dir="ltr">RAW</code></p>
</li>
<li>
<p><code dir="ltr">CHAR</code></p>
</li>
</ul>
<p>Use of other data types in expressions results in nonsimple rule conditions.</p>
</div>
<!-- class="sect4" -->
<div id="STRMS531" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref528"></a>
<h5 class="sect4">Conditions</h5>
<p>In a simple rule condition, a <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is one of the following:</p>
<ul>
<li>
<p><code dir="ltr">&lt;=</code></p>
</li>
<li>
<p><code dir="ltr">&lt;</code></p>
</li>
<li>
<p><code dir="ltr">=</code></p>
</li>
<li>
<p><code dir="ltr">&gt;</code></p>
</li>
<li>
<p><code dir="ltr">&gt;=</code></p>
</li>
<li>
<p><code dir="ltr">!=</code></p>
</li>
<li>
<p><code dir="ltr">IS NULL</code></p>
</li>
<li>
<p><code dir="ltr">IS NOT NULL</code></p>
</li>
</ul>
<p>Use of other conditions results in nonsimple rule conditions.</p>
</div>
<!-- class="sect4" -->
<div id="STRMS532" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref529"></a>
<h5 class="sect4">Constants</h5>
<p>A <code dir="ltr"><span class="codeinlineitalic">constant</span></code> is a fixed value. A constant can be:</p>
<ul>
<li>
<p>A number, such as <code dir="ltr">12</code> or <code dir="ltr">5.4</code></p>
</li>
<li>
<p>A character, such as <code dir="ltr">x</code> or <code dir="ltr">$</code></p>
</li>
<li>
<p>A character string, such as <code dir="ltr">&#34;this</code> <code dir="ltr">is</code> <code dir="ltr">a</code> <code dir="ltr">string&#34;</code></p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<div id="STRMS533" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref530"></a>
<h5 class="sect4">Examples of Simple Rule Conditions</h5>
<p>The following conditions are simple rule conditions, assuming the data types used in expressions are supported in simple rule conditions:</p>
<ul>
<li>
<p><code dir="ltr">tab1.col = 5</code></p>
</li>
<li>
<p><code dir="ltr">tab2.col != 5</code></p>
</li>
<li>
<p><code dir="ltr">:v1 &gt; &#39;aaa&#39;</code></p>
</li>
<li>
<p><code dir="ltr">:v2.a1 &lt; 10.01</code></p>
</li>
<li>
<p><code dir="ltr">:v3.m() = 10</code></p>
</li>
<li>
<p><code dir="ltr">:v4 IS NOT NULL</code></p>
</li>
<li>
<p><code dir="ltr">1 = 1</code></p>
</li>
<li>
<p><code dir="ltr">&#39;abc&#39; &gt; &#39;AB&#39;</code></p>
</li>
<li>
<p><code dir="ltr">:date_var &lt; to_date(&#39;04-01-2004, 14:20:17&#39;, &#39;mm-dd-yyyy, hh24:mi:ss&#39;)</code></p>
</li>
<li>
<p><code dir="ltr">:adt_var.ts_attribute &gt;= to_timestamp(&#39;04-01-2004, 14:20:17 PST&#39;, &#39;mm-dd-yyyy, hh24:mi:ss TZR&#39;)</code></p>
</li>
<li>
<p><code dir="ltr">:my_var.my_to_upper(&#39;abc&#39;) = &#39;ABC&#39;</code></p>
</li>
</ul>
<p>Rules with simple rule conditions are called simple rules. You can combine two or more simple conditions with the logical conditions <code dir="ltr">AND</code> and <code dir="ltr">OR</code> for a rule, and the rule remains simple. For example, rules with the following conditions are simple rules:</p>
<ul>
<li>
<p><code dir="ltr">tab1.col = 5 AND :v1 &gt; &#39;aaa&#39;</code></p>
</li>
<li>
<p><code dir="ltr">tab1.col = 5 OR :v1 &gt; &#39;aaa&#39;</code></p>
</li>
</ul>
<p>However, using the <code dir="ltr">NOT</code> logical condition in a rule condition causes the rule to be nonsimple.</p>
</div>
<!-- class="sect4" -->
<div id="STRMS534" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref531"></a>
<h5 class="sect4">Benefits of Simple Rules</h5>
<p>Simple rules are important for the following reasons:</p>
<ul>
<li>
<p>Simple rules are indexed by the <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a> internally.</p>
</li>
<li>
<p>Simple rules can be evaluated without executing SQL.</p>
</li>
<li>
<p>Simple rules can be evaluated with partial data.</p>
</li>
</ul>
<p>When a client uses the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure to evaluate an event, the client can specify that only simple rules should be evaluated by specifying <code dir="ltr">TRUE</code> for the <code dir="ltr">simple_rules_only</code> parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF005" href="../SQLRF/conditions.htm#SQLRF005"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about conditions and logical conditions</p>
</li>
<li>
<p><a class="olink ARPLS307" href="../ARPLS/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about LCR types and their member subprograms</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006223"></a>
<div id="STRMS535" class="sect2">
<h3 class="sect2">Rule Evaluation Context<a id="sthref532"></a><a id="sthref533"></a></h3>
<p>An <span class="bold">evaluation context</span> is a database object that defines external data that can be referenced in <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a>s. The external data can exist as variables, table data, or both. The following analogy might be helpful: If the rule condition were the <code dir="ltr">WHERE</code> clause in a SQL query, then the external data in the evaluation context would be the tables and bind variables referenced in the <code dir="ltr">FROM</code> clause of the query. That is, the <a href="strms_glossary.htm#CHDHGHGJ"><span class="xrefglossterm">expression</span></a>s in the rule condition should reference the tables, table aliases, and variables in the evaluation context to make a valid <code dir="ltr">WHERE</code> clause.</p>
<p>A rule evaluation context provides the necessary information for interpreting and evaluating the rule conditions that reference external data. For example, if a rule refers to a variable, then the information in the rule evaluation context must contain the variable type. Or, if a rule refers to a table alias, then the information in the evaluation context must define the table alias.</p>
<p>The objects referenced by a rule are determined by the rule evaluation context associated with it. The rule owner must have the necessary privileges to access these objects, such as <code dir="ltr">READ</code> or <code dir="ltr">SELECT</code> privilege on tables, <code dir="ltr">EXECUTE</code> privilege on types, and so on. The rule condition is resolved in the schema that owns the evaluation context.</p>
<p>For example, consider a rule evaluation context named <code dir="ltr">hr_evaluation_context</code> that contains the following information:</p>
<ul>
<li>
<p>Table alias <code dir="ltr">dep</code> corresponds to the <code dir="ltr">hr.departments</code> table.</p>
</li>
<li>
<p>Variables <code dir="ltr">loc_id1</code> and <code dir="ltr">loc_id2</code> are both of type <code dir="ltr">NUMBER</code>.</p>
</li>
</ul>
<p>The <code dir="ltr">hr_evaluation_context</code> rule evaluation context provides the necessary information for evaluating the following rule condition:</p>
<pre dir="ltr">dep.location_id IN (:loc_id1, :loc_id2)
</pre>
<p>In this case, the rule condition evaluates to <code dir="ltr">TRUE</code> for a row in the <code dir="ltr">hr.departments</code> table if that row has a value in the <code dir="ltr">location_id</code> column that corresponds to either of the values passed in by the <code dir="ltr">loc_id1</code> or <code dir="ltr">loc_id2</code> variables. The rule cannot be interpreted or evaluated properly without the information in the <code dir="ltr">hr_evaluation_context</code> rule evaluation context. Also, notice that dot notation is used to specify the column <code dir="ltr">location_id</code> in the <code dir="ltr">dep</code> table alias.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Views are not supported as base tables in evaluation contexts.</div>
<a id="CIHDIEHD"></a>
<div id="STRMS536" class="sect3">
<h4 class="sect3">Explicit and Implicit Variables<a id="sthref534"></a><a id="sthref535"></a><a id="sthref536"></a><a id="sthref537"></a><a id="sthref538"></a><a id="sthref539"></a><a id="sthref540"></a></h4>
<p>The value of a variable referenced in a rule condition can be explicitly specified when the rule is evaluated, or the value of a variable can be implicitly available given the event.</p>
<p>Explicit variables are supplied by the caller at evaluation time. These values are specified by the <code dir="ltr">variable_values</code> parameter when the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure is run.</p>
<p>Implicit variables are not given a value supplied by the caller at evaluation time. The value of an implicit variable is obtained by calling the variable value function. You define this function when you specify the <code dir="ltr">variable_types</code> list during the creation of an evaluation context using the <code dir="ltr">CREATE_EVALUATION_CONTEXT</code> procedure in the <code dir="ltr">DBMS_RULE_ADM</code> package. If the value for an implicit variable is specified during evaluation, then the specified value overrides the value returned by the variable value function.</p>
<p>Specifically, the <code dir="ltr">variable_types</code> list is of type <code dir="ltr">SYS.RE$VARIABLE_TYPE_LIST</code>, which is a list of variables of type <code dir="ltr">SYS.RE$VARIABLE_TYPE</code>. Within each instance of <code dir="ltr">SYS.RE$VARIABLE_TYPE</code> in the list, the function used to determine the value of an implicit variable is specified as the <code dir="ltr">variable_value_function</code> attribute.</p>
<p>Whether variables are explicit or implicit is the choice of the designer of the application using the <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a>. The following are reasons for using an implicit variable:</p>
<ul>
<li>
<p>The caller of the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure does not need to know anything about the variable, which can reduce the complexity of the application using the rules engine. For example, a variable can call a function that returns a value based on the data being evaluated.</p>
</li>
<li>
<p>The caller might not have <code dir="ltr">EXECUTE</code> privileges on the variable value function.</p>
</li>
<li>
<p>The caller of the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure does not know the variable value based on the event, which can improve security if the variable value contains confidential information.</p>
</li>
<li>
<p>The variable will be used infrequently, and the variable&#39;s value always can be derived if necessary. Making such variables implicit means that the caller of the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure does not need to specify many uncommon variables.</p>
</li>
</ul>
<p>For example, in the following rule condition, the values of variable <code dir="ltr">x</code> and variable <code dir="ltr">y</code> could be specified explicitly, but the value of the variable <code dir="ltr">max</code> could be returned by running the <code dir="ltr">max</code> function:</p>
<pre dir="ltr">:x = 4 AND :y &lt; :max
</pre>
<p>Alternatively, variable <code dir="ltr">x</code> and <code dir="ltr">y</code> could be implicit variables, and variable <code dir="ltr">max</code> could be an explicit variable. So, there is no syntactic difference between explicit and implicit variables in the rule condition. You can determine whether a variable is explicit or implicit by querying the <code dir="ltr">DBA_EVALUATION_CONTEXT_VARS</code> data dictionary view. For explicit variables, the <code dir="ltr">VARIABLE_VALUE_FUNCTION</code> field is <code dir="ltr">NULL</code>. For implicit variables, this field contains the name of the function called by the implicit variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_RULE</code> and <code dir="ltr">DBMS_RULE_ADM</code> packages, and for more information about the Oracle-supplied rule types</p>
</li>
<li>
<p><a class="olink REFRN" href="../REFRN/toc.htm"><span class="italic">Oracle Database Reference</span></a> for more information about the <code dir="ltr">DBA_EVALUATION_CONTEXT_VARS</code> data dictionary view</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="STRMS537" class="sect3"><a id="sthref541"></a>
<h4 class="sect3">Evaluation Context Association with Rule Sets and Rules<a id="sthref542"></a><a id="sthref543"></a><a id="sthref544"></a><a id="sthref545"></a></h4>
<p>To be evaluated, each rule must be associated with an evaluation context or must be part of a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> that is associated with an evaluation context. A single evaluation context can be associated with multiple rules or rule sets. The following list describes which evaluation context is used when a rule is evaluated:</p>
<ul>
<li>
<p>If an evaluation context is associated with a rule, then it is used for the rule whenever the rule is evaluated, and any evaluation context associated with the rule set being evaluated is ignored.</p>
</li>
<li>
<p>If a rule does not have an evaluation context, but an evaluation context was specified for the rule when it was added to a rule set using the <code dir="ltr">ADD_RULE</code> procedure in the <code dir="ltr">DBMS_RULE_ADM</code> package, then the evaluation context specified in the <code dir="ltr">ADD_RULE</code> procedure is used for the rule when the rule set is evaluated.</p>
</li>
<li>
<p>If no rule evaluation context is associated with a rule and none was specified by the <code dir="ltr">ADD_RULE</code> procedure, then the evaluation context of the rule set is used for the rule when the rule set is evaluated.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If a rule does not have an evaluation context, and you try to add it to a rule set that does not have an evaluation context, then an error is raised, unless you specify an evaluation context when you run the <code dir="ltr">ADD_RULE</code> procedure.</div>
</div>
<!-- class="sect3" -->
<a id="i1006280"></a>
<div id="STRMS538" class="sect3">
<h4 class="sect3">Evaluation Function<a id="sthref546"></a><a id="sthref547"></a></h4>
<p>You have the option of creating an evaluation function to be run with a rule evaluation context. You can use an evaluation function for the following reasons:</p>
<ul>
<li>
<p>You want to bypass the rules engine and instead evaluate events using the evaluation function.</p>
</li>
<li>
<p>You want to filter events so that some events are evaluated by the evaluation function and other events are evaluated by the rules engine.</p>
</li>
</ul>
<p>You associate a function with a rule evaluation context by specifying the function name for the <code dir="ltr">evaluation_function</code> parameter when you create the rule evaluation context with the <code dir="ltr">CREATE_EVALUATION_CONTEXT</code> procedure in the <code dir="ltr">DBMS_RULE_ADM</code> package. The rules engine invokes the evaluation function during the evaluation of any rule set that uses the evaluation context.</p>
<p>The <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure is overloaded. The function must have each parameter in one of the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedures, and the type of each parameter must be same as the type of the corresponding parameter in the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure, but the names of the parameters can be different.</p>
<p>An evaluation function has the following return values:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_RULE_ADM.EVALUATION_SUCCESS</code>: The user specified evaluation function completed the rule set evaluation successfully. The rules engine returns the results of the evaluation obtained by the evaluation function to the rules engine client using the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">DBMS_RULE_ADM.EVALUATION_CONTINUE</code>: The rules engine evaluates the rule set as if there were no evaluation function. The evaluation function is not used, and any results returned by the evaluation function are ignored.</p>
</li>
<li>
<p><code dir="ltr">DBMS_RULE_ADM.EVALUATION_FAILURE</code>: The user-specified evaluation function failed. Rule set evaluation stops, and an error is raised.</p>
</li>
</ul>
<p>If you always want to bypass the rules engine, then the evaluation function should return either <code dir="ltr">EVALUATION_SUCCESS</code> or <code dir="ltr">EVALUATION_FAILURE</code>. However, if you want to filter events so that some events are evaluated by the evaluation function and other events are evaluated by the rules engine, then the evaluation function can return all three return values, and it returns <code dir="ltr">EVALUATION_CONTINUE</code> when the rules engine should be used for evaluation.</p>
<p>If you specify an evaluation function for an evaluation context, then the evaluation function is run during evaluation when the evaluation context is used by a rule set or rule.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the evaluation function specified in the <a class="olink ARPLS327" href="../ARPLS/d_rule_a.htm#ARPLS327"><code dir="ltr">DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT</code></a> procedure and for more information about the overloaded <a class="olink ARPLS558" href="../ARPLS/d_rule.htm#ARPLS558"><code dir="ltr">DBMS_RULE.EVALUATE</code></a> procedure</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006303"></a>
<div id="STRMS539" class="sect2">
<h3 class="sect2">Rule Action Context<a id="sthref548"></a><a id="sthref549"></a></h3>
<p>An <span class="bold">action context</span> contains optional information associated with a rule that is interpreted by the client of the <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a> when the rule is evaluated for an event. The client of the rules engine can be a user-created application or an internal feature of Oracle, such as Oracle Streams. Each rule has only one action context. The information in an action context is of type <code dir="ltr">SYS.RE$NV_LIST</code>, which is a type that contains an array of name-value pairs.</p>
<p>The rule action context information provides a context for the action taken by a client of the rules engine when a rule evaluates to <code dir="ltr">TRUE</code> or <code dir="ltr">MAYBE</code>. The rules engine does not interpret the action context. Instead, it returns the action context, and a client of the rules engine can interpret the action context information.</p>
<p>For example, suppose an event is defined as the addition of a new employee to a company. If the employee information is stored in the <code dir="ltr">hr.employees</code> table, then the event occurs whenever a row is inserted into this table. The company wants to specify that several actions are taken when a new employee is added, but the actions depend on which department the employee joins. One of these actions is that the employee is registered for a course relating to the department.</p>
<p>In this scenario, the company can create a rule for each department with an appropriate action context. Here, an action context returned when a rule evaluates to <code dir="ltr">TRUE</code> specifies the number of a course that an employee should take. Here are parts of the <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a>s and the action contexts for three departments:</p>
<div class="inftblruleinformal">
<table class="cellalignment5973" title="Department Rules" summary="This table lists the rule condition and action context for each of three rules described in the text preceeding the table." dir="ltr">
<thead>
<tr class="cellalignment5964">
<th class="cellalignment5974" id="r1c1-t11">Rule Name</th>
<th class="cellalignment5974" id="r1c2-t11">Part of the Rule Condition</th>
<th class="cellalignment5974" id="r1c3-t11">Action Context Name-Value Pair</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5964">
<td class="cellalignment5970" id="r2c1-t11" headers="r1c1-t11"><code dir="ltr">rule_dep_10</code></td>
<td class="cellalignment5970" headers="r2c1-t11 r1c2-t11"><code dir="ltr">department_id = 10</code></td>
<td class="cellalignment5970" headers="r2c1-t11 r1c3-t11"><code dir="ltr">course_number</code>, <code dir="ltr">1057</code></td>
</tr>
<tr class="cellalignment5964">
<td class="cellalignment5970" id="r3c1-t11" headers="r1c1-t11"><code dir="ltr">rule_dep_20</code></td>
<td class="cellalignment5970" headers="r3c1-t11 r1c2-t11"><code dir="ltr">department_id = 20</code></td>
<td class="cellalignment5970" headers="r3c1-t11 r1c3-t11"><code dir="ltr">course_number</code>, <code dir="ltr">1215</code></td>
</tr>
<tr class="cellalignment5964">
<td class="cellalignment5970" id="r4c1-t11" headers="r1c1-t11"><code dir="ltr">rule_dep_30</code></td>
<td class="cellalignment5970" headers="r4c1-t11 r1c2-t11"><code dir="ltr">department_id = 30</code></td>
<td class="cellalignment5970" headers="r4c1-t11 r1c3-t11"><code dir="ltr">NULL</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblruleinformal" -->
<p>These action contexts return the following instructions to the client application:</p>
<ul>
<li>
<p>The action context for the <code dir="ltr">rule_dep_10</code> rule instructs the client application to enroll the new employee in course number <code dir="ltr">1057</code>.</p>
</li>
<li>
<p>The action context for the <code dir="ltr">rule_dep_20</code> rule instructs the client application to enroll the new employee in course number <code dir="ltr">1215</code>.</p>
</li>
<li>
<p>The <code dir="ltr">NULL</code> action context for the <code dir="ltr">rule_dep_30</code> rule instructs the client application not to enroll the new employee in any course.</p>
</li>
</ul>
<p>Each action context can contain zero or more name-value pairs. If an action context contains more than one name-value pair, then each name in the list must be unique. In this example, the client application to which the rules engine returns the action context registers the new employee in the course with the returned course number. The client application does not register the employee for a course if a <code dir="ltr">NULL</code> action context is returned or if the action context does not contain a course number.</p>
<p>If multiple clients use the same rule, or if you want an action context to return more than one name-value pair, then you can list more than one name-value pair in an action context. For example, suppose the company also adds a new employee to a department electronic mailing list. In this case, the action context for the <code dir="ltr">rule_dep_10</code> rule might contain two name-value pairs:</p>
<div class="inftblruleinformal">
<table class="cellalignment5973" title="Action Context with Two Name-Value Pairs" summary="This table lists two name-value pairs in a single action context." dir="ltr">
<thead>
<tr class="cellalignment5964">
<th class="cellalignment5974" id="r1c1-t12">Name</th>
<th class="cellalignment5974" id="r1c2-t12">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5964">
<td class="cellalignment5970" id="r2c1-t12" headers="r1c1-t12"><code dir="ltr">course_number</code></td>
<td class="cellalignment5970" headers="r2c1-t12 r1c2-t12"><code dir="ltr">1057</code></td>
</tr>
<tr class="cellalignment5964">
<td class="cellalignment5970" id="r3c1-t12" headers="r1c1-t12"><code dir="ltr">dist_list</code></td>
<td class="cellalignment5970" headers="r3c1-t12 r1c2-t12"><code dir="ltr">admin_list</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblruleinformal" -->
<p>The following are considerations for names in name-value pairs:</p>
<ul>
<li>
<p>If different applications use the same action context, then use different names or prefixes of names to avoid naming conflicts.</p>
</li>
<li>
<p>Do not use $ and # in names because they can cause conflicts with Oracle-supplied action context names.</p>
</li>
</ul>
<p>You add a name-value pair to an action context using the <code dir="ltr">ADD_PAIR</code> member procedure of the <code dir="ltr">RE$NV_LIST</code> type. You remove a name-value pair from an action context using the <code dir="ltr">REMOVE_PAIR</code> member procedure of the <code dir="ltr">RE$NV_LIST</code> type. If you want to modify an existing name-value pair in an action context, then you should first remove it using the <code dir="ltr">REMOVE_PAIR</code> member procedure and then add an appropriate name-value pair using the <code dir="ltr">ADD_PAIR</code> member procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Streams uses action contexts for <a href="strms_glossary.htm#CHDDGIFE"><span class="xrefglossterm">custom rule-based transformation</span></a>s and, when <a href="strms_glossary.htm#CHDBCGAG"><span class="xrefglossterm">subset rule</span></a>s are specified, for internal transformations that might be required on LCRs containing <code dir="ltr">UPDATE</code> operations. Oracle Streams also uses action contexts to specify a <a href="strms_glossary.htm#CHDHJHJD"><span class="xrefglossterm">destination queue</span></a> into which an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> enqueues <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s that satisfy the rule. In addition, Oracle Streams uses action contexts to specify whether a message that satisfies an apply process rule is executed by the apply process.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1006830">&#34;Oracle Streams and Action Contexts&#34;</a></p>
</li>
<li>
<p><a href="ap_restrictions.htm#CIHIAIIE">&#34;Restrictions for Action Contexts&#34;</a></p>
</li>
<li>
<p><a href="strms_mrules.htm#BABFAEAA">&#34;Creating a Rule with an Action Context&#34;</a> and <a href="strms_mrules.htm#i1006320">&#34;Altering a Rule&#34;</a> for examples that add and modify name-value pairs</p>
</li>
<li>
<p><a class="olink ARPLS319" href="../ARPLS/t_rule.htm#ARPLS319"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">RE$NV_LIST</code> type</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006392"></a>
<div id="STRMS540" class="sect1">
<h2 class="sect1">Rule Set Evaluation<a id="sthref550"></a><a id="sthref551"></a><a id="sthref552"></a><a id="sthref553"></a><a id="sthref554"></a><a id="sthref555"></a><a id="sthref556"></a><a id="sthref557"></a><a id="sthref558"></a><a id="sthref559"></a><a id="sthref560"></a><a id="sthref561"></a></h2>
<p>The <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a> evaluates <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>s against an event. An event is an occurrence that is defined by the client of the rules engine. The client initiates evaluation of an event by calling the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure. This procedure enables the client to send some information about the event to the rules engine for evaluation against a rule set. The event itself can have more information than the information that the client sends to the rules engine.</p>
<p>The following information is specified by the client when it calls the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure:</p>
<ul>
<li>
<p>The name of the rule set that contains the rules to use to evaluate the event.</p>
</li>
<li>
<p>The <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a> to use for evaluation. Only rules that use the specified evaluation context are evaluated.</p>
</li>
<li>
<p>Table values and variable values. The table values contain rowids that refer to the data in table rows, and the variable values contain the data for explicit variables. Values specified for implicit variables override the values that might be obtained using a variable value function. If a specified variable has attributes, then the client can send a value for the entire variable, or the client can send values for any number of the attributes of the variable. However, clients cannot specify attribute values if the value of the entire variable is specified.</p>
</li>
<li>
<p>An optional <span class="bold">event context</span>. An event context is a varray of type <code dir="ltr">SYS.RE$NV_LIST</code> that contains name-value pairs that contain information about the event. This optional information is not used directly or interpreted by the rules engine. Instead, it is passed to client callbacks, such as an evaluation function, a variable value function (for implicit variables), and a variable method function.</p>
</li>
</ul>
<p>The client can also send other information about how to evaluate an event against the rule set using the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure. For example, the caller can specify if evaluation must stop as soon as the first <code dir="ltr">TRUE</code> rule or the first <code dir="ltr">MAYBE</code> rule (if there are no <code dir="ltr">TRUE</code> rules) is found.</p>
<p><a id="sthref562"></a><a id="sthref563"></a>If the client wants all of the rules that evaluate to <code dir="ltr">TRUE</code> or <code dir="ltr">MAYBE</code> returned to it, then the client can specify whether evaluation results should be sent back in a complete list of the rules that evaluated to <code dir="ltr">TRUE</code> or <code dir="ltr">MAYBE</code>, or evaluation results should be sent back iteratively. When evaluation results are sent iteratively to the client, the client can retrieve each rule that evaluated to <code dir="ltr">TRUE</code> or <code dir="ltr">MAYBE</code> one by one using the <code dir="ltr">GET_NEXT_HIT</code> function in the <code dir="ltr">DBMS_RULE</code> package.</p>
<p>The rules engine uses the rules in the specified rule set for evaluation and returns the results to the client. The rules engine returns rules using two <code dir="ltr">OUT</code> parameters in the <code dir="ltr">EVALUATE</code> procedure. This procedure is overloaded and the two <code dir="ltr">OUT</code> parameters are different in each version of the procedure:</p>
<ul>
<li>
<p>One version of the procedure returns all of the rules that evaluate to <code dir="ltr">TRUE</code> in one list or all of the rules that evaluate to <code dir="ltr">MAYBE</code> in one list, and the two <code dir="ltr">OUT</code> parameters for this version of the procedure are <code dir="ltr">true_rules</code> and <code dir="ltr">maybe_rules</code>. That is, the <code dir="ltr">true_rules</code> parameter returns rules in one list that evaluate to <code dir="ltr">TRUE</code>, and the <code dir="ltr">maybe_rules</code> parameter returns rules in one list that might evaluate to <code dir="ltr">TRUE</code> given more information.</p>
</li>
<li>
<p>The other version of the procedure returns all of the rules that evaluate to <code dir="ltr">TRUE</code> or <code dir="ltr">MAYBE</code> iteratively at the request of the client, and the two <code dir="ltr">OUT</code> parameters for this version of the procedure are <code dir="ltr">true_rules_iterator</code> and <code dir="ltr">maybe_rules_iterator</code>. That is, the <code dir="ltr">true_rules_iterator</code> parameter returns rules that evaluate to <code dir="ltr">TRUE</code> one by one, and the <code dir="ltr">maybe_rules_iterator</code> parameter returns rules one by one that might evaluate to <code dir="ltr">TRUE</code> given more information.</p>
</li>
</ul>
<div id="STRMS541" class="sect2"><a id="sthref564"></a>
<h3 class="sect2">Rule Set Evaluation Process</h3>
<p><a href="#i1006414">Figure 11-1</a> shows the <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> evaluation process:</p>
<ol>
<li>
<p>A client-defined event occurs.</p>
</li>
<li>
<p>The client initiates evaluation of a rule set by sending information about an event to the <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a> using the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure.</p>
</li>
<li>
<p>The rules engine evaluates the rule set for the event using the relevant <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>. The client specifies both the rule set and the evaluation context in the call to the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure. Only rules that are in the specified rule set, and use the specified evaluation context, are used for evaluation.</p>
</li>
<li>
<p>The rules engine obtains the results of the evaluation. Each rule evaluates to either <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code> (unknown).</p>
</li>
<li>
<p>The rules engine returns rules that evaluated to <code dir="ltr">TRUE</code> to the client, either in a complete list or one by one. Each returned rule is returned with its entire <a href="strms_glossary.htm#CBACHAJI"><span class="xrefglossterm">action context</span></a>, which can contain information or can be <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>The client performs actions based on the results returned by the rules engine. The rules engine does not perform actions based on rule evaluations.</p>
</li>
</ol>
<div id="STRMS542" class="figure">
<p class="titleinfigure"><a id="i1006414"></a>Figure 11-1 Rule Set Evaluation</p>
<img width="437" height="233" src="img/strms017.gif" alt="Description of Figure 11-1 follows"/><br/>
<a id="sthref565" href="img_text/strms017.htm">Description of &#34;Figure 11-1 Rule Set Evaluation&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS303" href="../ARPLS/d_rule.htm#ARPLS303"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure</p>
</li>
<li>
<p><a href="#CJAIACEI">&#34;Rule Conditions with Undefined Variables that Evaluate to NULL&#34;</a> for information about <a href="strms_glossary.htm#CHDDDJGJ"><span class="xrefglossterm">Oracle Streams client</span></a>s and <code dir="ltr">maybe_rules</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="STRMS543" class="sect2"><a id="sthref566"></a>
<h3 class="sect2">Partial Evaluation<a id="sthref567"></a><a id="sthref568"></a><a id="sthref569"></a></h3>
<p>Partial evaluation occurs when the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure is run without data for all the tables and variables in the specified <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>. During partial evaluation, some rules can reference columns, variables, or attributes that are unavailable, while some other rules can reference only available data.</p>
<p>For example, consider a scenario where only the following data is available during evaluation:</p>
<ul>
<li>
<p>Column <code dir="ltr">tab1.col</code> <code dir="ltr">=</code> <code dir="ltr">7</code></p>
</li>
<li>
<p>Attribute <code dir="ltr">v1.a1</code> <code dir="ltr">=</code> <code dir="ltr">&#39;ABC&#39;</code></p>
</li>
</ul>
<p>The following rules are used for evaluation:</p>
<ul>
<li>
<p>Rule <code dir="ltr">R1</code> has the following condition:</p>
<pre dir="ltr">(tab1.col = 5)
</pre></li>
<li>
<p>Rule <code dir="ltr">R2</code> has the following condition:</p>
<pre dir="ltr">(:v1.a2 &gt; &#39;aaa&#39;)
</pre></li>
<li>
<p>Rule <code dir="ltr">R3</code> has the following condition:</p>
<pre dir="ltr">(:v1.a1 = &#39;ABC&#39;) OR (:v2 = 5)
</pre></li>
<li>
<p>Rule <code dir="ltr">R4</code> has the following condition:</p>
<pre dir="ltr">(:v1.a1 = UPPER(&#39;abc&#39;))
</pre></li>
</ul>
<p>Given this scenario, <code dir="ltr">R1</code> and <code dir="ltr">R4</code> reference available data, <code dir="ltr">R2</code> references unavailable data, and <code dir="ltr">R3</code> references available data and unavailable data.</p>
<p>Partial evaluation always evaluates only simple conditions within a rule. If the <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a> has parts which are not simple, then the rule might or might not be evaluated completely, depending on the extent to which data is available. If a rule is not completely evaluated, then it can be returned as a <code dir="ltr">MAYBE</code> rule.</p>
<p>Given the rules in this scenario, <code dir="ltr">R1</code> and the first part of <code dir="ltr">R3</code> are evaluated, but <code dir="ltr">R2</code> and <code dir="ltr">R4</code> are not evaluated. The following results are returned to the client:</p>
<ul>
<li>
<p><code dir="ltr">R1</code> evaluates to <code dir="ltr">FALSE</code>, and so is not returned.</p>
</li>
<li>
<p><code dir="ltr">R2</code> is returned as <code dir="ltr">MAYBE</code> because information about attribute <code dir="ltr">v1.a2</code> is not available.</p>
</li>
<li>
<p><code dir="ltr">R3</code> is returned as <code dir="ltr">TRUE</code> because <code dir="ltr">R3</code> is a simple rule and the value of <code dir="ltr">v1.a1</code> matches the first part of the rule condition.</p>
</li>
<li>
<p><code dir="ltr">R4</code> is returned as <code dir="ltr">MAYBE</code> because the rule condition is not simple. The client must supply the value of variable <code dir="ltr">v1</code> for this rule to evaluate to <code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006177">&#34;Simple Rule Conditions&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006478"></a>
<div id="STRMS544" class="sect1">
<h2 class="sect1">Database Objects and Privileges Related to Rules<a id="sthref570"></a><a id="sthref571"></a><a id="sthref572"></a><a id="sthref573"></a><a id="sthref574"></a><a id="sthref575"></a></h2>
<p>You can create the following types of database objects directly using the <code dir="ltr">DBMS_RULE_ADM</code> package:</p>
<ul>
<li>
<p>Evaluation contexts</p>
</li>
<li>
<p>Rules</p>
</li>
<li>
<p>Rule sets</p>
</li>
</ul>
<p>You can create rules and <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>s indirectly using the <code dir="ltr">DBMS_STREAMS_ADM</code> package. You control the privileges for these database objects using the following procedures in the <code dir="ltr">DBMS_RULE_ADM</code> package:</p>
<ul>
<li>
<p><code dir="ltr">GRANT_OBJECT_PRIVILEGE</code></p>
</li>
<li>
<p><code dir="ltr">GRANT_SYSTEM_PRIVILEGE</code></p>
</li>
<li>
<p><code dir="ltr">REVOKE_OBJECT_PRIVILEGE</code></p>
</li>
<li>
<p><code dir="ltr">REVOKE_SYSTEM_PRIVILEGE</code></p>
</li>
</ul>
<p>To allow a user to create rule sets, rules, and <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>s in the user&#39;s own schema, grant the user the following system privileges:</p>
<ul>
<li>
<p><code dir="ltr">CREATE_RULE_SET_OBJ</code></p>
</li>
<li>
<p><code dir="ltr">CREATE_RULE_OBJ</code></p>
</li>
<li>
<p><code dir="ltr">CREATE_EVALUATION_CONTEXT_OBJ</code></p>
</li>
</ul>
<p>These privileges, and the privileges discussed in the following sections, can be granted to the user directly or through a role.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1006534">Privileges for Creating Database Objects Related to Rules</a></p>
</li>
<li>
<p><a href="#CIHIGFIE">Privileges for Altering Database Objects Related to Rules</a></p>
</li>
<li>
<p><a href="#i1006550">Privileges for Dropping Database Objects Related to Rules</a></p>
</li>
<li>
<p><a href="#i1006555">Privileges for Placing Rules in a Rule Set</a></p>
</li>
<li>
<p><a href="#i1006566">Privileges for Evaluating a Rule Set</a></p>
</li>
<li>
<p><a href="#i1006573">Privileges for Using an Evaluation Context</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you grant a privilege on <code dir="ltr">&#34;ANY&#34;</code> object (for example, <code dir="ltr">ALTER_ANY_RULE</code>), and the initialization parameter <code dir="ltr">O7_DICTIONARY_ACCESSIBILITY</code> is set to <code dir="ltr">FALSE</code>, you give the user access to that type of object in all schemas except the <code dir="ltr">SYS</code> schema. By default, the initialization parameter <code dir="ltr">O7_DICTIONARY_ACCESSIBILITY</code> is set to <code dir="ltr">FALSE</code>.
<p>If you want to grant access to an object in the <code dir="ltr">SYS</code> schema, then you can grant object privileges explicitly on the object. Alternatively, you can set the <code dir="ltr">O7_DICTIONARY_ACCESSIBILITY</code> initialization parameter to <code dir="ltr">TRUE</code>. Then privileges granted on <code dir="ltr">&#34;ANY&#34;</code> object will allow access to any schema, including&nbsp;<code dir="ltr">SYS</code>.</p>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1006119">&#34;The Components of a Rule&#34;</a> for more information about these database objects</p>
</li>
<li>
<p><a class="olink ARPLS304" href="../ARPLS/d_rule_a.htm#ARPLS304"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the system and object privileges for these database objects</p>
</li>
<li>
<p><a class="olink CNCPT123" href="../CNCPT/cmntopc.htm#CNCPT123"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink DBSEG004" href="../DBSEG/authorization.htm#DBSEG004"><span class="italic">Oracle Database Security Guide</span></a> for general information about user privileges</p>
</li>
<li>
<p><a href="strms_rules.htm#g1049257">Chapter 5, &#34;How Rules Are Used in Oracle Streams&#34;</a> for more information about creating rules and rule sets indirectly using the <code dir="ltr">DBMS_STREAMS_ADM</code> package</p>
</li>
</ul>
</div>
<a id="i1006534"></a>
<div id="STRMS545" class="sect2">
<h3 class="sect2">Privileges for Creating Database Objects Related to Rules</h3>
<p>To create an <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>, rule, or <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> in a schema, a user must meet at least one of the following conditions:</p>
<ul>
<li>
<p>The schema must be the user&#39;s own schema, and the user must be granted the create system privilege for the type of database object being created. For example, to create a rule set in the user&#39;s own schema, a user must be granted the <code dir="ltr">CREATE_RULE_SET_OBJ</code> system privilege.</p>
</li>
<li>
<p>The user must be granted the create any system privilege for the type of database object being created. For example, to create an evaluation context in any schema, a user must be granted the <code dir="ltr">CREATE_ANY_EVALUATION_CONTEXT</code> system privilege.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When creating a rule with an evaluation context, the rule owner must have privileges on all objects accessed by the evaluation context.</div>
</div>
<!-- class="sect2" -->
<a id="CIHIGFIE"></a>
<div id="STRMS546" class="sect2">
<h3 class="sect2">Privileges for Altering Database Objects Related to Rules</h3>
<p>To alter an <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>, rule, or <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>, a user must meet at least one of the following conditions:</p>
<ul>
<li>
<p>The user must own the database object.</p>
</li>
<li>
<p>The user must be granted the alter object privilege for the database object if it is in another user&#39;s schema. For example, to alter a rule set in another user&#39;s schema, a user must be granted the <code dir="ltr">ALTER_ON_RULE_SET</code> object privilege on the rule set.</p>
</li>
<li>
<p>The user must be granted the alter any system privilege for the database object. For example, to alter a rule in any schema, a user must be granted the <code dir="ltr">ALTER_ANY_RULE</code> system privilege.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006550"></a>
<div id="STRMS547" class="sect2">
<h3 class="sect2">Privileges for Dropping Database Objects Related to Rules</h3>
<p>To drop an <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>, rule, or <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>, a user must meet at least one of the following conditions:</p>
<ul>
<li>
<p>The user must own the database object.</p>
</li>
<li>
<p>The user must be granted the drop any system privilege for the database object. For example, to drop a rule set in any schema, a user must be granted the <code dir="ltr">DROP_ANY_RULE_SET</code> system privilege.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006555"></a>
<div id="STRMS548" class="sect2">
<h3 class="sect2">Privileges for Placing Rules in a Rule Set</h3>
<p>This section describes the privileges required to place a rule in a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>. The user must meet at least one of the following conditions for the rule:</p>
<ul>
<li>
<p>The user must own the rule.</p>
</li>
<li>
<p>The user must be granted the execute object privilege on the rule if the rule is in another user&#39;s schema. For example, to place a rule named <code dir="ltr">depts</code> in the <code dir="ltr">hr</code> schema in a rule set, a user must be granted the <code dir="ltr">EXECUTE_ON_RULE</code> privilege for the <code dir="ltr">hr.depts</code> rule.</p>
</li>
<li>
<p>The user must be granted the execute any system privilege for rules. For example, to place any rule in a rule set, a user must be granted the <code dir="ltr">EXECUTE_ANY_RULE</code> system privilege.</p>
</li>
</ul>
<p>The user also must meet at least one of the following conditions for the rule set:</p>
<ul>
<li>
<p>The user must own the rule set.</p>
</li>
<li>
<p>The user must be granted the alter object privilege on the rule set if the rule set is in another user&#39;s schema. For example, to place a rule in the <code dir="ltr">human_resources</code> rule set in the <code dir="ltr">hr</code> schema, a user must be granted the <code dir="ltr">ALTER_ON_RULE_SET</code> privilege for the <code dir="ltr">hr.human_resources</code> rule set.</p>
</li>
<li>
<p>The user must be granted the alter any system privilege for rule sets. For example, to place a rule in any rule set, a user must be granted the <code dir="ltr">ALTER_ANY_RULE_SET</code> system privilege.</p>
</li>
</ul>
<p>In addition, the rule owner must have privileges on all objects referenced by the rule. These privileges are important when the rule does not have an <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a> associated with it.</p>
</div>
<!-- class="sect2" -->
<a id="i1006566"></a>
<div id="STRMS549" class="sect2">
<h3 class="sect2">Privileges for Evaluating a Rule Set</h3>
<p>To evaluate a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>, a user must meet at least one of the following conditions:</p>
<ul>
<li>
<p>The user must own the rule set.</p>
</li>
<li>
<p>The user must be granted the execute object privilege on the rule set if it is in another user&#39;s schema. For example, to evaluate a rule set named <code dir="ltr">human_resources</code> in the <code dir="ltr">hr</code> schema, a user must be granted the <code dir="ltr">EXECUTE_ON_RULE_SET</code> privilege for the <code dir="ltr">hr.human_resources</code> rule set.</p>
</li>
<li>
<p>The user must be granted the execute any system privilege for rule sets. For example, to evaluate any rule set, a user must be granted the <code dir="ltr">EXECUTE_ANY_RULE_SET</code> system privilege.</p>
</li>
</ul>
<p>Granting <code dir="ltr">EXECUTE</code> object privilege on a rule set requires that the grantor have the <code dir="ltr">EXECUTE</code> privilege specified <code dir="ltr">WITH</code> <code dir="ltr">GRANT</code> <code dir="ltr">OPTION</code> on all rules currently in the rule set.</p>
</div>
<!-- class="sect2" -->
<a id="i1006573"></a>
<div id="STRMS550" class="sect2">
<h3 class="sect2">Privileges for Using an Evaluation Context</h3>
<p>To use an <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a> in a rule or a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>, the user who owns the rule or rule set must meet at least one of the following conditions for the evaluation context:</p>
<ul>
<li>
<p>The user must own the evaluation context.</p>
</li>
<li>
<p>The user must be granted the <code dir="ltr">EXECUTE_ON_EVALUATION_CONTEXT</code> privilege on the evaluation context, if it is in another user&#39;s schema.</p>
</li>
<li>
<p>The user must be granted the <code dir="ltr">EXECUTE_ANY_EVALUATION_CONTEXT</code> system privilege for evaluation contexts.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006719"></a>
<div id="STRMS185" class="sect1">
<h2 class="sect1">Evaluation Contexts Used in Oracle Streams<a id="sthref576"></a><a id="sthref577"></a><a id="sthref578"></a><a id="sthref579"></a></h2>
<p>The following sections describe the system-created <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>s used in Oracle Streams.</p>
<ul>
<li>
<p><a href="#i1014515">Evaluation Context for Global, Schema, Table, and Subset Rules</a></p>
</li>
<li>
<p><a href="#i1016657">Evaluation Contexts for Message Rules</a></p>
</li>
</ul>
<a id="i1014515"></a>
<div id="STRMS551" class="sect2">
<h3 class="sect2">Evaluation Context for Global, Schema, Table, and Subset Rules</h3>
<p>When you create global, schema, table, and subset rules, the system-created <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>s and rules use a built-in <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a> in the <code dir="ltr">SYS</code> schema named <code dir="ltr">STREAMS$_EVALUATION_CONTEXT</code>. <code dir="ltr">PUBLIC</code> is granted the <code dir="ltr">EXECUTE</code> privilege on this evaluation context. Global, schema, table, and subset rules can be used by <a href="strms_glossary.htm#CHDBHECD"><span class="xrefglossterm">capture process</span></a>es, <a href="strms_glossary.htm#CBACHEDJ"><span class="xrefglossterm">synchronous capture</span></a>s, <a href="strms_glossary.htm#CHDEICIC"><span class="xrefglossterm">propagation</span></a>s, <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>es, and <a href="strms_glossary.htm#CHDDGHHB"><span class="xrefglossterm">messaging client</span></a>s.</p>
<p>During Oracle installation, the following statement creates the Oracle Streams evaluation context:</p>
<pre dir="ltr">DECLARE
  vt  SYS.RE$VARIABLE_TYPE_LIST;
BEGIN
  vt := SYS.RE$VARIABLE_TYPE_LIST(
    SYS.RE$VARIABLE_TYPE(&#39;DML&#39;, &#39;SYS.LCR$_ROW_RECORD&#39;, 
       &#39;SYS.DBMS_STREAMS_INTERNAL.ROW_VARIABLE_VALUE_FUNCTION&#39;,
       &#39;SYS.DBMS_STREAMS_INTERNAL.ROW_FAST_EVALUATION_FUNCTION&#39;),
    SYS.RE$VARIABLE_TYPE(&#39;DDL&#39;, &#39;SYS.LCR$_DDL_RECORD&#39;,
       &#39;SYS.DBMS_STREAMS_INTERNAL.DDL_VARIABLE_VALUE_FUNCTION&#39;,
       &#39;SYS.DBMS_STREAMS_INTERNAL.DDL_FAST_EVALUATION_FUNCTION&#39;));
    SYS.RE$VARIABLE_TYPE(NULL, &#39;SYS.ANYDATA&#39;, 
       NULL,
       &#39;SYS.DBMS_STREAMS_INTERNAL.ANYDATA_FAST_EVAL_FUNCTION&#39;));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;,
    variable_types          =&gt; vt,
    evaluation_function     =&gt;
                       &#39;SYS.DBMS_STREAMS_INTERNAL.EVALUATION_CONTEXT_FUNCTION&#39;);
END;
/
</pre>
<p>This statement includes references to the following internal functions in the <code dir="ltr">SYS.DBMS_STREAM_INTERNAL</code> package:</p>
<ul>
<li>
<p><code dir="ltr">ROW_VARIABLE_VALUE_FUNCTION</code></p>
</li>
<li>
<p><code dir="ltr">DDL_VARIABLE_VALUE_FUNCTION</code></p>
</li>
<li>
<p><code dir="ltr">EVALUATION_CONTEXT_FUNCTION</code></p>
</li>
<li>
<p><code dir="ltr">ROW_FAST_EVALUATION_FUNCTION</code></p>
</li>
<li>
<p><code dir="ltr">DDL_FAST_EVALUATION_FUNCTION</code></p>
</li>
<li>
<p><code dir="ltr">ANYDATA_FAST_EVAL_FUNCTION</code></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Information about these internal functions is provided for reference purposes only. You should never run any of these functions directly.</div>
<p>The <code dir="ltr">ROW_VARIABLE_VALUE_FUNCTION</code> converts an <code dir="ltr">ANYDATA</code> payload, which encapsulates a <code dir="ltr">SYS.LCR$_ROW_RECORD</code> instance, into a <code dir="ltr">SYS.LCR$_ROW_RECORD</code> instance before evaluating rules on the data.</p>
<p>The <code dir="ltr">DDL_VARIABLE_VALUE_FUNCTION</code> converts an <code dir="ltr">ANYDATA</code> payload, which encapsulates a <code dir="ltr">SYS.LCR$_DDL_RECORD</code> instance, into a <code dir="ltr">SYS.LCR$_DDL_RECORD</code> instance before evaluating rules on the data.</p>
<p>The <code dir="ltr">EVALUATION_CONTEXT_FUNCTION</code> is specified as an <code dir="ltr">evaluation_function</code> in the call to the <code dir="ltr">CREATE_EVALUATION_CONTEXT</code> procedure. This function supplements normal rule evaluation for <a href="strms_glossary.htm#CHDCHEJI"><span class="xrefglossterm">captured LCR</span></a>s. A capture process enqueues row LCRs and DDL LCRs into its <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a>, and this function enables it to enqueue other internal <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s into the queue, such as commits, rollbacks, and data dictionary changes. This information that is enqueued by capture processes is also used during rule evaluation for a propagation or apply process. Synchronous captures do not use the <code dir="ltr">EVALUATION_CONTEXT_FUNCTION</code>.</p>
<p><code dir="ltr">ROW_FAST_EVALUATION_FUNCTION</code> improves performance by optimizing access to the following <code dir="ltr">LCR$_ROW_RECORD</code> member functions during rule evaluation:</p>
<ul>
<li>
<p><code dir="ltr">GET_OBJECT_OWNER</code></p>
</li>
<li>
<p><code dir="ltr">GET_OBJECT_NAME</code></p>
</li>
<li>
<p><code dir="ltr">IS_NULL_TAG</code></p>
</li>
<li>
<p><code dir="ltr">GET_SOURCE_DATABASE_NAME</code></p>
</li>
<li>
<p><code dir="ltr">GET_COMMAND_TYPE</code></p>
</li>
</ul>
<p><code dir="ltr">DDL_FAST_EVALUATION_FUNCTION</code> improves performance by optimizing access to the following <code dir="ltr">LCR$_DDL_RECORD</code> member functions during rule evaluation if the condition is <code dir="ltr">&lt;</code>, <code dir="ltr">&lt;=</code>, <code dir="ltr">=</code>, <code dir="ltr">&gt;=</code>, or <code dir="ltr">&gt;</code> and the other operand is a constant:</p>
<ul>
<li>
<p><code dir="ltr">GET_OBJECT_OWNER</code></p>
</li>
<li>
<p><code dir="ltr">GET_OBJECT_NAME</code></p>
</li>
<li>
<p><code dir="ltr">IS_NULL_TAG</code></p>
</li>
<li>
<p><code dir="ltr">GET_SOURCE_DATABASE_NAME</code></p>
</li>
<li>
<p><code dir="ltr">GET_COMMAND_TYPE</code></p>
</li>
<li>
<p><code dir="ltr">GET_BASE_TABLE_NAME</code></p>
</li>
<li>
<p><code dir="ltr">GET_BASE_TABLE_OWNER</code></p>
</li>
</ul>
<p><code dir="ltr">ANYDATA_FAST_EVAL_FUNCTION</code> improves performance by optimizing access to values inside an <code dir="ltr">ANYDATA</code> object.</p>
<p>Rules created using the <code dir="ltr">DBMS_STREAMS_ADM</code> package use <code dir="ltr">ROW_FAST_EVALUATION_FUNCTION</code> or <code dir="ltr">DDL_FAST_EVALUATION_FUNCTION</code>, except for subset rules created using the <code dir="ltr">ADD_SUBSET_RULES</code> or <code dir="ltr">ADD_SUBSET_PROPAGATION_RULES</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS307" href="../ARPLS/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about LCRs and their member functions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1016657"></a>
<div id="STRMS552" class="sect2">
<h3 class="sect2">Evaluation Contexts for Message Rules</h3>
<p>When you use either the <code dir="ltr">ADD_MESSAGE_RULE</code> procedure or the <code dir="ltr">ADD_MESSAGE_PROPAGATION_RULE</code> procedure to create a <a href="strms_glossary.htm#CHDBEIAE"><span class="xrefglossterm">message rule</span></a>, the message rule uses a user-defined <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a> type that you specify when you create the rule. Such a system-created message rule uses a system-created <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>. The name of the system-created evaluation context is different for each message type used to create message rules. Such an evaluation context has a system-generated name and is created in the schema that owns the rule. Only the user who owns this evaluation context is granted the <code dir="ltr">EXECUTE</code> privilege on it.</p>
<p>The evaluation context for this type of message rule contains a variable that is the same type as the message type. The name of this variable is in the form <code dir="ltr">VAR$_</code><span class="italic">number</span>, where <span class="italic">number</span> is a system-generated number. For example, if you specify <code dir="ltr">strmadmin.region_pri_msg</code> as the message type when you create a message rule, then the system-created evaluation context has a variable of this type, and the variable is used in the <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a>. Assume that the following statement created the <code dir="ltr">strmadmin.region_pri_msg</code> type:</p>
<pre dir="ltr">CREATE TYPE strmadmin.region_pri_msg AS OBJECT(
  region         VARCHAR2(100),
  priority       NUMBER,
  message        VARCHAR2(3000))
/
</pre>
<p>When you create a message rule using this type, you can specify the following rule condition:</p>
<pre dir="ltr">:msg.region = &#39;EUROPE&#39; AND :msg.priority = &#39;1&#39;
</pre>
<p>The system-created message rule replaces <code dir="ltr">:msg</code> in the rule condition you specify with the name of the variable. The following is an example of a message rule condition that might result:</p>
<pre dir="ltr">:VAR$_52.region = &#39;EUROPE&#39; AND  :VAR$_52.priority = &#39;1&#39;
</pre>
<p>In this case, <code dir="ltr">VAR$_52</code> is the variable name, the type of the <code dir="ltr">VAR$_52</code> variable is <code dir="ltr">strmadmin.region_pri_msg</code>, and the evaluation context for the rule contains this variable.</p>
<p>The message rule itself has an evaluation context. A statement similar to the following creates an evaluation context for a message rule:</p>
<pre dir="ltr">DECLARE
  vt  SYS.RE$VARIABLE_TYPE_LIST;
BEGIN
  vt := SYS.RE$VARIABLE_TYPE_LIST(
    SYS.RE$VARIABLE_TYPE(&#39;VAR$_52&#39;, &#39;STRMADMIN.REGION_PRI_MSG&#39;, 
       &#39;SYS.DBMS_STREAMS_INTERNAL.MSG_VARIABLE_VALUE_FUNCTION&#39;, NULL));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name =&gt; &#39;STRMADMIN.EVAL_CTX$_99&#39;,
    variable_types          =&gt; vt,
    evaluation_function     =&gt; NULL);
END;
/
</pre>
<p>The name of the evaluation context is in the form <code dir="ltr">EVAL_CTX$_</code><span class="italic">number</span>, where <span class="italic">number</span> is a system-generated number. In this example, the name of the evaluation context is <code dir="ltr">EVAL_CTX$_99</code>.</p>
<p>This statement also includes a reference to the <code dir="ltr">MSG_VARIABLE_VALUE_FUNCTION</code> internal function in the <code dir="ltr">SYS.DBMS_STREAM_INTERNAL</code> package. This function converts an <code dir="ltr">ANYDATA</code> payload, which encapsulates a message instance, into an instance of the same type as the variable before evaluating rules on the data. For example, if the variable type is <code dir="ltr">strmadmin.region_pri_msg</code>, then the <code dir="ltr">MSG_VARIABLE_VALUE_FUNCTION</code> converts the message payload from an <code dir="ltr">ANYDATA</code> payload to a <code dir="ltr">strmadmin.region_pri_msg</code> payload.</p>
<p>If you create rules for different message types, then Oracle creates a different evaluation context for each message type. If you create a rule with the same message type as an existing rule, then the new rule uses the evaluation context for the existing rule. When you use the <code dir="ltr">ADD_MESSAGE_RULE</code> or <code dir="ltr">ADD_MESSAGE_PROPAGATION_RULE</code> to create a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> for a <a href="strms_glossary.htm#CHDDGHHB"><span class="xrefglossterm">messaging client</span></a> or <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>, the new rule set does not have an evaluation context.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_rules.htm#i1013864">&#34;Message Rules&#34;</a></p>
</li>
<li>
<p><a href="#i1014515">&#34;Evaluation Context for Global, Schema, Table, and Subset Rules&#34;</a></p>
</li>
<li>
<p><a href="strms_rumon.htm#i1008150">&#34;Displaying the Oracle Streams Rules Used by a Specific Oracle Streams Client&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006787"></a>
<div id="STRMS553" class="sect1">
<h2 class="sect1">Oracle Streams and Event Contexts<a id="sthref580"></a><a id="sthref581"></a><a id="sthref582"></a></h2>
<p>In Oracle Streams, <a href="strms_glossary.htm#CHDBHECD"><span class="xrefglossterm">capture process</span></a>es, <a href="strms_glossary.htm#CBACHEDJ"><span class="xrefglossterm">synchronous capture</span></a>s, and <a href="strms_glossary.htm#CHDDGHHB"><span class="xrefglossterm">messaging client</span></a>s do not use event contexts, but <a href="strms_glossary.htm#CHDEICIC"><span class="xrefglossterm">propagation</span></a>s and <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>es do. The following types of <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s can be staged in a <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a>: <a href="strms_glossary.htm#CHDCHEJI"><span class="xrefglossterm">captured LCR</span></a>s, <a href="strms_glossary.htm#CBABHDGA"><span class="xrefglossterm">buffered LCR</span></a>s, <a href="strms_glossary.htm#CBAGGFJH"><span class="xrefglossterm">buffered user message</span></a>s, <a href="strms_glossary.htm#CBAGDEIH"><span class="xrefglossterm">persistent LCR</span></a>s, and <a href="strms_glossary.htm#CBAGGIDA"><span class="xrefglossterm">persistent user message</span></a>s. When a message is staged in a queue, a propagation or apply process can send the message, along with an event context, to the <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a> for evaluation. An event context always has the following name-value pair: <code dir="ltr">AQ$_MESSAGE</code> as the name and the message as the value.</p>
<p>If you create a custom <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a>, then you can create propagation and apply process <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>s that refer to Oracle Streams events using implicit variables. The variable value function for each implicit variable can check for event contexts with the name <code dir="ltr">AQ$_MESSAGE</code>. If an event context with this name is found, then the variable value function returns a value based on a message. You can also pass the event context to an evaluation function and a variable method function.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1006392">&#34;Rule Set Evaluation&#34;</a> for more information about event contexts</p>
</li>
<li>
<p><a href="#CIHDIEHD">&#34;Explicit and Implicit Variables&#34;</a> for more information about variable value functions</p>
</li>
<li>
<p><a href="#i1006280">&#34;Evaluation Function&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006830"></a>
<div id="STRMS554" class="sect1">
<h2 class="sect1">Oracle Streams and Action Contexts<a id="sthref583"></a><a id="sthref584"></a><a id="sthref585"></a></h2>
<p>The following sections describe the purposes of <a href="strms_glossary.htm#CBACHAJI"><span class="xrefglossterm">action context</span></a>s in Oracle Streams and the importance of ensuring that only one <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a> in a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> can evaluate to <code dir="ltr">TRUE</code> for a particular <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a>.</p>
<div id="STRMS555" class="sect2"><a id="sthref586"></a>
<h3 class="sect2">Purposes of Action Contexts in Oracle Streams</h3>
<p>In Oracle Streams, an <a href="strms_glossary.htm#CBACHAJI"><span class="xrefglossterm">action context</span></a> serves the following purposes:</p>
<ul>
<li>
<p><a href="#i1010148">Internal LCR Transformations in Subset Rules</a></p>
</li>
<li>
<p><a href="#CJABCIEG">Information About Declarative Rule-Based Transformations</a></p>
</li>
<li>
<p><a href="#i1010176">Custom Rule-Based Transformations</a></p>
</li>
<li>
<p><a href="#i1021609">Execution Directives for Messages During Apply</a></p>
</li>
<li>
<p><a href="#i1010177">Enqueue Destinations for Messages During Apply</a></p>
</li>
</ul>
<p>A different name-value pair can exist in the action context of a <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a> for each of these purposes. If an action context for a rule contains more than one of these name-value pairs, then the actions specified or described by the name-value pairs are performed in the following order:</p>
<ol>
<li>
<p>Perform subset transformation.</p>
</li>
<li>
<p>Display information about <a href="strms_glossary.htm#CHDBDEJG"><span class="xrefglossterm">declarative rule-based transformation</span></a>.</p>
</li>
<li>
<p>Perform <a href="strms_glossary.htm#CHDDGIFE"><span class="xrefglossterm">custom rule-based transformation</span></a>.</p>
</li>
<li>
<p>Follow execution directive and perform execution if directed to do so (apply only).</p>
</li>
<li>
<p>Enqueue into a <a href="strms_glossary.htm#CHDHJHJD"><span class="xrefglossterm">destination queue</span></a> (apply only).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The actions specified in the action context for a rule are performed only if the rule is in the <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> for a <a href="strms_glossary.htm#CHDBHECD"><span class="xrefglossterm">capture process</span></a>, <a href="strms_glossary.htm#CBACHEDJ"><span class="xrefglossterm">synchronous capture</span></a>, <a href="strms_glossary.htm#CHDEICIC"><span class="xrefglossterm">propagation</span></a>, <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>, or <a href="strms_glossary.htm#CHDDGHHB"><span class="xrefglossterm">messaging client</span></a>. If a rule is in a <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a>, then these <a href="strms_glossary.htm#CHDDDJGJ"><span class="xrefglossterm">Oracle Streams client</span></a>s ignore the action context of the rule.</div>
</li>
</ol>
<a id="i1010148"></a>
<div id="STRMS556" class="sect3">
<h4 class="sect3">Internal LCR Transformations in Subset Rules</h4>
<p>When you use <a href="strms_glossary.htm#CHDBCGAG"><span class="xrefglossterm">subset rule</span></a>s, an update operation can be converted into an insert or delete operation when it is captured, propagated, applied, or dequeued. This automatic conversion is called <a href="strms_glossary.htm#CHDJICJC"><span class="xrefglossterm">row migration</span></a> and is performed by an internal transformation specified in the action context when the subset rule evaluates to <code dir="ltr">TRUE</code>. The name-value pair for a subset transformation has <code dir="ltr">STREAMS$_ROW_SUBSET</code> for the name and either <code dir="ltr">INSERT</code> or <code dir="ltr">DELETE</code> for the value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_rules.htm#i1009452">&#34;Subset Rules&#34;</a></p>
</li>
<li>
<p><a href="strms_mtransform.htm#CHDGDHDE">Chapter 19, &#34;Managing Rule-Based Transformations&#34;</a> for information about using rule-based transformation with subset rules</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CJABCIEG"></a>
<div id="STRMS557" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Information About Declarative Rule-Based Transformations</h4>
<p>A declarative rule-based transformation is an internal modification of a row LCR that results when a rule evaluates to <code dir="ltr">TRUE</code>. The name-value pair for a declarative rule-based transformation has <code dir="ltr">STREAMS$_INTERNAL_TRANFORM</code> for the name and the name of a data dictionary view that provides additional information about the transformation for the value.</p>
<p>The name-value pair added for a declarative rule-based transformation is for information purposes only. These name-value pairs are not used by Oracle Streams clients. However, the declarative rule-based transformations described in an action context are performed internally before any custom rule-based transformations specified in the same action context.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_transform.htm#CJADBDFH">&#34;Declarative Rule-Based Transformations&#34;</a></p>
</li>
<li>
<p><a href="strms_mtransform.htm#BABDFDEA">&#34;Managing Declarative Rule-Based Transformations&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1010176"></a>
<div id="STRMS558" class="sect3">
<h4 class="sect3">Custom Rule-Based Transformations</h4>
<p>A custom rule-based transformation is any modification made by a user-defined function to a <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a> when a rule evaluates to <code dir="ltr">TRUE</code>. The name-value pair for a custom rule-based transformation has <code dir="ltr">STREAMS$_TRANSFORM_FUNCTION</code> for the name and the name of the transformation function for the value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_transform.htm#CJAFFDEE">&#34;Custom Rule-Based Transformations&#34;</a></p>
</li>
<li>
<p><a href="strms_mtransform.htm#BABDDFEC">&#34;Managing Custom Rule-Based Transformations&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1021609"></a>
<div id="STRMS559" class="sect3">
<h4 class="sect3">Execution Directives for Messages During Apply</h4>
<p>The <code dir="ltr">SET_EXECUTE</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package specifies whether a message that satisfies the specified rule is executed by an apply process. The name-value pair for an execution directive has <code dir="ltr">APPLY$_EXECUTE</code> for the name and <code dir="ltr">NO</code> for the value if the apply process should not execute the message. If a message that satisfies a rule should be executed by an apply process, then this name-value pair is not present in the action context of the rule.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_mapply.htm#i1008467">&#34;Specifying Execute Directives for Apply Processes&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="i1010177"></a>
<div id="STRMS560" class="sect3">
<h4 class="sect3">Enqueue Destinations for Messages During Apply</h4>
<p>The <code dir="ltr">SET_ENQUEUE_DESTINATION</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package sets the <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> where a message that satisfies the specified rule is enqueued automatically by an apply process. The name-value pair for an enqueue destination has <code dir="ltr">APPLY$_ENQUEUE</code> for the name and the name of the destination queue for the value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_mapply.htm#i1008466">&#34;Specifying That Apply Processes Enqueue Messages&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="STRMS561" class="sect2"><a id="sthref587"></a>
<h3 class="sect2">Ensure That Only One Rule Can Evaluate to TRUE for a Particular Rule Condition</h3>
<p>If you use a non-<code dir="ltr">NULL</code> <a href="strms_glossary.htm#CBACHAJI"><span class="xrefglossterm">action context</span></a> for one or more <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>s in a <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a>, then ensure that only one rule can evaluate to <code dir="ltr">TRUE</code> for a particular <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a>. If more than one rule evaluates to <code dir="ltr">TRUE</code> for a particular condition, then only one of the rules is returned, which can lead to unpredictable results.</p>
<p>For example, suppose two rules evaluate to <code dir="ltr">TRUE</code> if an LCR contains a DML change to the <code dir="ltr">hr.employees</code> table. The first rule has a <code dir="ltr">NULL</code> action context. The second rule has an action context that specifies a <a href="strms_glossary.htm#CHDDGIFE"><span class="xrefglossterm">custom rule-based transformation</span></a>. If there is a DML change to the <code dir="ltr">hr.employees</code> table, then both rules evaluate to <code dir="ltr">TRUE</code> for the change, but only one rule is returned. In this case, the transformation might or might not occur, depending on which rule is returned.</p>
<p>You might want to ensure that only one rule in a positive rule set can evaluate to <code dir="ltr">TRUE</code> for any condition, regardless of whether any of the rules have a non-<code dir="ltr">NULL</code> action context. By following this guideline, you can avoid unpredictable results if, for example, a non-<code dir="ltr">NULL</code> action context is added to a rule in the future.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_transform.htm#CACIIJHJ">Chapter 6, &#34;Rule-Based Transformations&#34;</a></div>
</div>
<!-- class="sect2" -->
<div id="STRMS562" class="sect2"><a id="sthref588"></a>
<h3 class="sect2">Action Context Considerations for Schema and Global Rules</h3>
<p>If you use an <a href="strms_glossary.htm#CBACHAJI"><span class="xrefglossterm">action context</span></a> for a <a href="strms_glossary.htm#CHDDGIFE"><span class="xrefglossterm">custom rule-based transformation</span></a>, enqueue destination, or execute directive with a <a href="strms_glossary.htm#CHDFAGCF"><span class="xrefglossterm">schema rule</span></a> or <a href="strms_glossary.htm#CHDEJCHD"><span class="xrefglossterm">global rule</span></a>, then the action specified by the action context is carried out on a <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a> if the message causes the schema or global rule to evaluate to <code dir="ltr">TRUE</code>. For example, if a <a href="strms_glossary.htm#CHDFAGCF"><span class="xrefglossterm">schema rule</span></a> has an action context that specifies a custom rule-based transformation, then the transformation is performed on LCRs for the tables in the schema.</p>
<p>You might want to use an action context with a schema or global rule but exclude a subset of LCRs from the action performed by the action context. For example, if you want to perform a custom rule-based transformation on all of the tables in the <code dir="ltr">hr</code> schema except for the <code dir="ltr">job_history</code> table, then ensure that the transformation function returns the original LCR if the table is <code dir="ltr">job_history</code>.</p>
<p>If you want to set an enqueue destination or an execute directive for all of the tables in the <code dir="ltr">hr</code> schema except for the <code dir="ltr">job_history</code> table, then you can use a schema rule and add the following condition to it:</p>
<pre dir="ltr">:dml.get_object_name() != &#39;JOB_HISTORY&#39;
</pre>
<p>In this case, if you want LCRs for the <code dir="ltr">job_history</code> table to evaluate to <code dir="ltr">TRUE</code>, but you do not want to perform the enqueue or execute directive, then you can add a <a href="strms_glossary.htm#CHDEGGGH"><span class="xrefglossterm">table rule</span></a> for the table to a <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a>. That is, the schema rule would have the enqueue destination or execute directive, but the table rule would not.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_rules.htm#i1006169">&#34;System-Created Rules&#34;</a> for more information about schema and global rules</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006868"></a>
<div id="STRMS158" class="sect1">
<h2 class="sect1">User-Created Rules, Rule Sets, and Evaluation Contexts<a id="sthref589"></a><a id="sthref590"></a></h2>
<p>The <code dir="ltr">DBMS_STREAMS_ADM</code> package generates system-created <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>s and <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>s, and it can specify an Oracle-supplied <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a> for rules and rule sets or generate system-created evaluation contexts. If you must create rules, rule sets, or evaluation contexts that cannot be created using the <code dir="ltr">DBMS_STREAMS_ADM</code> package, then you can use the <code dir="ltr">DBMS_RULE_ADM</code> package to create them.</p>
<p>Use the <code dir="ltr">DBMS_RULE_ADM</code> package for the following reasons:</p>
<ul>
<li>
<p>You must create rules with <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a>s that cannot be created using the <code dir="ltr">DBMS_STREAMS_ADM</code> package, such as rule conditions for specific types of operations, or rule conditions that use the <code dir="ltr">LIKE</code> condition.</p>
</li>
<li>
<p>You must create custom evaluation contexts for the rules in your Oracle Streams environment.</p>
</li>
</ul>
<p>You can create a rule set using the <code dir="ltr">DBMS_RULE_ADM</code> package, and you can associate it with a <a href="strms_glossary.htm#CHDBHECD"><span class="xrefglossterm">capture process</span></a>, <a href="strms_glossary.htm#CBACHEDJ"><span class="xrefglossterm">synchronous capture</span></a>, <a href="strms_glossary.htm#CHDEICIC"><span class="xrefglossterm">propagation</span></a>, <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>, or <a href="strms_glossary.htm#CHDDGHHB"><span class="xrefglossterm">messaging client</span></a>. Such a rule set can be a <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> or <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for an <a href="strms_glossary.htm#CHDDDJGJ"><span class="xrefglossterm">Oracle Streams client</span></a>, and a rule set can be a positive rule set for one Oracle Streams client and a negative rule set for another.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1017376">User-Created Rules and Rule Sets</a></p>
</li>
<li>
<p><a href="#i1019483">User-Created Evaluation Contexts</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_mcap.htm#i1006305">&#34;Specifying a Rule Set for a Capture Process&#34;</a></p>
</li>
<li>
<p><a href="strms_mprop.htm#i1006737">&#34;Specifying the Rule Set for a Propagation&#34;</a></p>
</li>
<li>
<p><a href="strms_mapply.htm#i1006437">&#34;Specifying the Rule Set for an Apply Process&#34;</a></p>
</li>
</ul>
</div>
</li>
</ul>
<a id="i1017376"></a>
<div id="STRMS563" class="sect2">
<h3 class="sect2">User-Created Rules and Rule Sets</h3>
<p>The following sections describe some of the types of <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>s and <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>s that you can create using the <code dir="ltr">DBMS_RULE_ADM</code> package:</p>
<ul>
<li>
<p><a href="#i1017274">Rule Conditions for Specific Types of Operations</a></p>
</li>
<li>
<p><a href="#i1016342">Rule Conditions that Instruct Oracle Streams Clients to Discard Unsupported LCRs</a></p>
</li>
<li>
<p><a href="#i1017158">Complex Rule Conditions</a></p>
</li>
<li>
<p><a href="#CJAIACEI">Rule Conditions with Undefined Variables that Evaluate to NULL</a></p>
</li>
<li>
<p><a href="#i1017314">Variables as Function Parameters in Rule Conditions</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can add user-defined conditions to a <a href="strms_glossary.htm#CHDIJACJ"><span class="xrefglossterm">system-created rule</span></a> by using the <code dir="ltr">and_condition</code> parameter that is available in some of the procedures in the <code dir="ltr">DBMS_STREAMS_ADM</code> package. Using the <code dir="ltr">and_condition</code> parameter is sometimes easier than creating rules with the <code dir="ltr">DBMS_RULE_ADM</code> package.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_rules.htm#i1019153">&#34;System-Created Rules with Added User-Defined Conditions&#34;</a> for more information about the <code dir="ltr">and_condition</code> parameter</div>
</li>
</ul>
<a id="i1017274"></a>
<div id="STRMS564" class="sect3">
<h4 class="sect3">Rule Conditions for Specific Types of Operations<a id="sthref591"></a></h4>
<p>In some cases, you might want to capture, propagate, apply, or dequeue only changes that contain specific types of operations. For example, you might want to apply changes containing only insert operations for a particular table, but not other operations, such as update and delete.</p>
<p>Suppose you want to specify a <a href="strms_glossary.htm#CHDGDCFJ"><span class="xrefglossterm">rule condition</span></a> that evaluates to <code dir="ltr">TRUE</code> only for <code dir="ltr">INSERT</code> operations on the <code dir="ltr">hr.employees</code> table. You can accomplish this by specifying the <code dir="ltr">INSERT</code> command type in the rule condition:</p>
<pre dir="ltr">:dml.get_command_type() = &#39;INSERT&#39; AND :dml.get_object_owner() = &#39;HR&#39; 
AND :dml.get_object_name() = &#39;EMPLOYEES&#39; AND :dml.is_null_tag() = &#39;Y&#39;
</pre>
<p>Similarly, suppose you want to specify a rule condition that evaluates to <code dir="ltr">TRUE</code> for all DML operations on the <code dir="ltr">hr.departments</code> table, except <code dir="ltr">DELETE</code> operations. You can accomplish this by specifying the following rule condition:</p>
<pre dir="ltr">:dml.get_object_owner() = &#39;HR&#39; AND :dml.get_object_name() = &#39;DEPARTMENTS&#39; AND
:dml.is_null_tag() = &#39;Y&#39; AND (:dml.get_command_type() = &#39;INSERT&#39; OR
:dml.get_command_type() = &#39;UPDATE&#39;)
</pre>
<p>This rule condition evaluates to <code dir="ltr">TRUE</code> for <code dir="ltr">INSERT</code> and <code dir="ltr">UPDATE</code> operations on the <code dir="ltr">hr.departments</code> table, but not for <code dir="ltr">DELETE</code> operations. Because the <code dir="ltr">hr.departments</code> table does not include any LOB columns, you do not need to specify the LOB command types for DML operations (<code dir="ltr">LOB</code> <code dir="ltr">ERASE</code>, <code dir="ltr">LOB</code>&nbsp;<code dir="ltr">WRITE</code>, and <code dir="ltr">LOB</code>&nbsp;<code dir="ltr">TRIM</code>), but these command types should be specified in such a rule condition for a table that contains one or more LOB columns.</p>
<p>The following rule condition accomplishes the same behavior for the <code dir="ltr">hr.departments</code> table. That is, the following rule condition evaluates to <code dir="ltr">TRUE</code> for all DML operations on the <code dir="ltr">hr.departments</code> table, except <code dir="ltr">DELETE</code> operations:</p>
<pre dir="ltr">:dml.get_object_owner() = &#39;HR&#39; AND :dml.get_object_name() = &#39;DEPARTMENTS&#39; AND
:dml.is_null_tag() = &#39;Y&#39; AND :dml.get_command_type() != &#39;DELETE&#39;
</pre>
<p>The example rule conditions described previously in this section are all simple rule conditions. However, when you add custom conditions to system-created rule conditions, the entire condition might not be a simple rule condition, and nonsimple rules might not evaluate efficiently. In general, you should use simple rule conditions whenever possible to improve rule evaluation performance. Rule conditions created using the <code dir="ltr">DBMS_STREAMS_ADM</code> package, without custom conditions added, are always simple.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1006177">&#34;Simple Rule Conditions&#34;</a></p>
</li>
<li>
<p><a href="#i1017158">&#34;Complex Rule Conditions&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1016342"></a>
<div id="STRMS135" class="sect3">
<h4 class="sect3">Rule Conditions that Instruct Oracle Streams Clients to Discard Unsupported LCRs<a id="sthref592"></a><a id="sthref593"></a><a id="sthref594"></a><a id="sthref595"></a><a id="sthref596"></a><a id="sthref597"></a><a id="sthref598"></a><a id="sthref599"></a><a id="sthref600"></a><a id="sthref601"></a></h4>
<p>You can use the following functions in rule conditions to instruct an <a href="strms_glossary.htm#CHDDDJGJ"><span class="xrefglossterm">Oracle Streams client</span></a> to discard LCRs that encapsulate unsupported changes:</p>
<ul>
<li>
<p>The <code dir="ltr">GET_COMPATIBLE</code> member function for LCRs. This function returns the minimal database compatibility required to support an LCR.</p>
</li>
<li>
<p>The <code dir="ltr">COMPATIBLE_9_2</code> function, <code dir="ltr">COMPATIBLE_10_1</code> function, <code dir="ltr">COMPATIBLE_10_2</code> function, <code dir="ltr">COMPATIBLE_11_1</code> function, <code dir="ltr">COMPATIBLE_11_2</code> function, <code dir="ltr">COMPATIBLE_12_1</code> function, and <code dir="ltr">MAX_COMPATIBLE</code> function in the <code dir="ltr">DBMS_STREAMS</code> package. These functions return constant values that correspond to 9.2.0, 10.1.0, 10.2.0, 11.1.0, 11.2.0, 12.1.0, and maximum compatibility in a database, respectively. You control the compatibility of an Oracle database using the <code dir="ltr">COMPATIBLE</code> initialization parameter.</p>
</li>
</ul>
<p>For example, consider the following rule:</p>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name =&gt; &#39;strmadmin.dml_compat_9_2&#39;,
    condition =&gt; &#39;:dml.GET_COMPATIBLE() &gt; DBMS_STREAMS.COMPATIBLE_9_2()&#39;);
END;
/
</pre>
<p>If this rule is in the <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for an Oracle Streams client, such as a <a href="strms_glossary.htm#CHDBHECD"><span class="xrefglossterm">capture process</span></a>, a <a href="strms_glossary.htm#CHDEICIC"><span class="xrefglossterm">propagation</span></a>, or an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>, then the Oracle Streams client discards any row LCR that is not compatible with Oracle9<span class="italic">i</span> Release 2 (9.2).</p>
<p>The following is an example that is more appropriate for a <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a>:</p>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name =&gt; &#39;strmadmin.dml_compat_9_2&#39;,
    condition =&gt; &#39;:dml.GET_COMPATIBLE() &lt;= DBMS_STREAMS.COMPATIBLE_10_1()&#39;);
END;
/
</pre>
<p>If this rule is in the positive rule set for an Oracle Streams client, then the Oracle Streams client discards any row LCR that is not compatible with Oracle Database 10<span class="italic">g</span> Release 1 or earlier. That is, the Oracle Streams client processes any row LCR that is compatible with Oracle9<span class="italic">i</span> Release 2 (9.2) or Oracle Database 10<span class="italic">g</span> Release 1 (10.1) and satisfies the other rules in its rule sets, but it discards any row LCR that is not compatible with these releases.</p>
<p>You can add the following rule to a positive rule set to discard row LCRs that are not supported by Oracle Streams in your current release of Oracle Database:</p>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name =&gt; &#39;strmadmin.dml_compat_max&#39;,
    condition =&gt; &#39;:dml.GET_COMPATIBLE() &lt; DBMS_STREAMS.MAX_COMPATIBLE()&#39;);
END;
/
</pre>
<p>The <code dir="ltr">MAX_COMPATIBLE</code> function always returns the maximum compatibility, which is greater than the compatibility constants returned by the <code dir="ltr">DBMS_STREAMS</code> package. Therefore, when you use this function in rule conditions, the rule conditions do not need to be changed when you upgrade to a later release of Oracle Database. Newly supported changes in a later release will automatically be captured and LCRs containing newly supported changes will not be discarded.</p>
<p>The rules in the previous examples evaluate efficiently. If you use <a href="strms_glossary.htm#CHDFAGCF"><span class="xrefglossterm">schema rule</span></a>s or <a href="strms_glossary.htm#CHDEJCHD"><span class="xrefglossterm">global rule</span></a>s created by the <code dir="ltr">DBMS_STREAMS_ADM</code> package to capture, propagate, apply, or dequeue LCRs, then you can use rules such as these to discard LCRs that are not supported by a particular database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You can determine which database objects in a database are not supported by Oracle Streams by querying the <code dir="ltr">DBA_STREAMS_UNSUPPORTED</code> and <code dir="ltr">DBA_STREAMS_COLUMNS</code> data dictionary views.</p>
</li>
<li>
<p>Instead of using the <code dir="ltr">DBMS_RULE_ADM</code> package to create rules with <code dir="ltr">GET_COMPATIBLE</code> conditions, you can use one of the procedures in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to create such rules by specifying the <code dir="ltr">GET_COMPATIBLE</code> condition in the <code dir="ltr">AND_CONDITION</code> parameter.</p>
</li>
<li>
<p>DDL LCRs always return <code dir="ltr">DBMS_STREAMS.COMPATIBLE_9_2</code>.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_otmon.htm#i1014369">&#34;Monitoring Compatibility in an Oracle Streams Environment&#34;</a></p>
</li>
<li>
<p><a href="strms_rules.htm#i1016311">&#34;Global Rules Example&#34;</a>, <a href="strms_rules.htm#i1016333">&#34;Schema Rule Example&#34;</a>, and <a href="strms_rules.htm#i1019153">&#34;System-Created Rules with Added User-Defined Conditions&#34;</a></p>
</li>
<li>
<p><a class="olink REFRN10019" href="../REFRN/GUID-6C57EE11-BD06-4BB8-A0F7-D6CDDD086FA9.htm#REFRN10019"><span class="italic">Oracle Database Reference</span></a> and <a class="olink UPGRD005" href="../UPGRD/intro.htm#UPGRD005"><span class="italic">Oracle Database Upgrade Guide</span></a> for more information about the <code dir="ltr">COMPATIBLE</code> initialization parameter</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1017158"></a>
<div id="STRMS565" class="sect3">
<h4 class="sect3">Complex Rule Conditions<a id="sthref602"></a></h4>
<p>Complex rule conditions are rule conditions that do not meet the requirements for simple rule conditions described in <a href="#i1006177">&#34;Simple Rule Conditions&#34;</a>. In an Oracle Streams environment, the <code dir="ltr">DBMS_STREAMS_ADM</code> package creates rules with simple rule conditions only, assuming no custom conditions are added to the system-created rules.</p>
<p><a href="strms_rules.htm#g1030936">Table 5-3</a> describes the types of system-created rule conditions that you can create with the <code dir="ltr">DBMS_STREAMS_ADM</code> package. If you must create rules with complex conditions, then you can use the <code dir="ltr">DBMS_RULE_ADM</code> package.</p>
<p>There is a wide range of complex rule conditions. The following sections contain some examples of complex rule conditions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Complex rule conditions can degrade rule evaluation performance.</p>
</li>
<li>
<p>In rule conditions, if you specify the name of a database, then ensure that you include the full database name, including the domain name.</p>
</li>
</ul>
</div>
<div id="STRMS566" class="sect4"><a id="sthref603"></a>
<h5 class="sect4">Rule Conditions Using the NOT Logical Condition to Exclude Objects<a id="sthref604"></a></h5>
<p>You can use the <code dir="ltr">NOT</code> logical condition to exclude certain changes from being captured, propagated, applied, or dequeued in an Oracle Streams environment.</p>
<p>For example, suppose you want to specify rule conditions that evaluate to <code dir="ltr">TRUE</code> for all DML and DDL changes to all database objects in the <code dir="ltr">hr</code> schema, except for changes to the <code dir="ltr">hr.regions</code> table. You can use the <code dir="ltr">NOT</code> logical condition to accomplish this with two rules: one for DML changes and one for DDL changes. Here are the rule conditions for these rules:</p>
<pre dir="ltr">(:dml.get_object_owner() = &#39;HR&#39; AND NOT :dml.get_object_name() = &#39;REGIONS&#39;)
AND :dml.is_null_tag() = &#39;Y&#39; ((:ddl.get_object_owner() = &#39;HR&#39; OR :ddl.get_base_
table_owner() =   &#39;HR&#39;) AND NOT :ddl.get_object_name() = &#39;REGIONS&#39;) AND :ddl.is_
null_tag() = &#39;Y&#39;
</pre>
<p>Notice that object names, such as <code dir="ltr">HR</code> and <code dir="ltr">REGIONS</code> are specified in all uppercase characters in these examples. For rules to evaluate properly, the case of the characters in object names, such as tables and users, must match the case of the characters in the data dictionary. Therefore, if no case was specified for an object when the object was created, then specify the object name in all uppercase in rule conditions. However, if a particular case was specified with double quotation marks when the objects was created, then specify the object name in the same case in rule conditions. However, the object name cannot be enclosed in double quotes in rule conditions.</p>
<p>For example, if the <code dir="ltr">REGIONS</code> table in the <code dir="ltr">HR</code> schema was actually created as <code dir="ltr">&#34;Regions&#34;</code>, then specify <code dir="ltr">Regions</code> in rule conditions that involve this table, as in the following example:</p>
<pre dir="ltr">:dml.get_object_name() = &#39;Regions&#39;
</pre>
<p>You can use the Oracle Streams <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a> when you create these rules using the <code dir="ltr">DBMS_RULE_ADM</code> package. The following example creates a rule set to hold the complex rules, creates rules with the previous conditions, and adds the rules to the rule set:</p>
<pre dir="ltr">BEGIN
  -- Create the rule set
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name       =&gt; &#39;strmadmin.complex_rules&#39;,
    evaluation_context  =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
  -- Create the complex rules
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.hr_not_regions_dml&#39;,
    condition  =&gt; &#39; (:dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND NOT &#39; ||
                  &#39; :dml.get_object_name() = &#39;&#39;REGIONS&#39;&#39;) AND &#39; ||
                  &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.hr_not_regions_ddl&#39;,
    condition  =&gt; &#39; ((:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                  &#39; :ddl.get_base_table_owner() =   &#39;&#39;HR&#39;&#39;) AND NOT &#39; ||
                  &#39; :ddl.get_object_name() = &#39;&#39;REGIONS&#39;&#39;) AND &#39; ||
                  &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; &#39;);
  --  Add the rules to the rule set
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.hr_not_regions_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.complex_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.hr_not_regions_ddl&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.complex_rules&#39;);
END;
/
</pre>
<p>In this case, the rules inherit the Oracle Streams evaluation context from the rule set.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In most cases, you can avoid using complex rules with the <code dir="ltr">NOT</code> logical condition by using the <code dir="ltr">DBMS_STREAMS_ADM</code> package to add rules to the negative rule set for an Oracle Streams client</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_rules.htm#i1011897">&#34;System-Created Rules and Negative Rule Sets&#34;</a></div>
</div>
<!-- class="sect4" -->
<div id="STRMS567" class="sect4"><a id="sthref605"></a>
<h5 class="sect4">Rule Conditions Using the LIKE Condition</h5>
<p>You can use the <code dir="ltr">LIKE</code> condition to create complex rules that evaluate to <code dir="ltr">TRUE</code> when a condition in the rule matches a specified pattern. For example, suppose you want to specify rule conditions that evaluate to <code dir="ltr">TRUE</code> for all DML and DDL changes to all database objects in the <code dir="ltr">hr</code> schema that begin with the pattern <code dir="ltr">JOB</code>. You can use the <code dir="ltr">LIKE</code> condition to accomplish this with two rules: one for DML changes and one for DDL changes. Here are the rule conditions for these rules:</p>
<pre dir="ltr">(:dml.get_object_owner() = &#39;HR&#39; AND :dml.get_object_name() LIKE &#39;JOB%&#39;)
AND :dml.is_null_tag() = &#39;Y&#39;

((:ddl.get_object_owner() = &#39;HR&#39; OR :ddl.get_base_table_owner() =      &#39;HR&#39;) 
AND :ddl.get_object_name() LIKE &#39;JOB%&#39;) AND :ddl.is_null_tag() = &#39;Y&#39;
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CJAIACEI"></a>
<div id="STRMS568" class="sect3">
<h4 class="sect3">Rule Conditions with Undefined Variables that Evaluate to NULL<a id="sthref606"></a></h4>
<p>During evaluation, an implicit variable in a rule condition is undefined if the variable value function for the variable returns <code dir="ltr">NULL</code>. An explicit variable without any attributes in a rule condition is undefined if the client does not send the value of the variable to the <a href="strms_glossary.htm#CHDIIIDH"><span class="xrefglossterm">rules engine</span></a> when it runs the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure.</p>
<p>Regarding variables with attributes, a variable is undefined if the client does not send the value of the variable, or any of its attributes, to the rules engine when it runs the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure. For example, if variable <code dir="ltr">x</code> has attributes <code dir="ltr">a</code> and <code dir="ltr">b</code>, then the variable is undefined if the client does not send the value of <code dir="ltr">x</code> and does not send the value of <code dir="ltr">a</code> and <code dir="ltr">b</code>. However, if the client sends the value of at least one attribute, then the variable is defined. In this case, if the client sends the value of <code dir="ltr">a</code>, but not <code dir="ltr">b</code>, then the variable is defined.</p>
<p>An undefined variable in a rule condition evaluates to <code dir="ltr">NULL</code> for Oracle Streams clients of the rules engine, which include capture processes, synchronous captures, propagations, apply processes, and messaging clients. In contrast, for non-Oracle Streams clients of the rules engine, an undefined variable in a rule condition can cause the rules engine to return <code dir="ltr">maybe_rules</code> to the client. When a rule set is evaluated, <code dir="ltr">maybe_rules</code> are rules that might evaluate to <code dir="ltr">TRUE</code> given more information.</p>
<p>The number of <code dir="ltr">maybe_rules</code> returned to Oracle Streams clients is reduced by treating each undefined variable as <code dir="ltr">NULL</code>. Reducing the number of <code dir="ltr">maybe_rules</code> can improve performance if the reduction results in more efficient evaluation of a rule set when a message occurs. Rules that would result in <code dir="ltr">maybe_rules</code> for non-Oracle Streams clients can result in <code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code> rules for Oracle Streams clients, as the following examples illustrate.</p>
<div id="STRMS569" class="sect4"><a id="sthref607"></a>
<h5 class="sect4">Examples of Undefined Variables that Result in TRUE Rules for Oracle Streams Clients</h5>
<p>Consider the following user-defined rule condition:</p>
<pre dir="ltr">:m IS NULL
</pre>
<p>If the value of the variable <code dir="ltr">m</code> is undefined during evaluation, then a maybe rule results for non-Oracle Streams clients of the rules engine. However, for Oracle Streams clients, this condition evaluates to <code dir="ltr">TRUE</code> because the undefined variable <code dir="ltr">m</code> is treated as a <code dir="ltr">NULL</code>. You should avoid adding rules such as this to rule sets for Oracle Streams clients, because such rules will evaluate to <code dir="ltr">TRUE</code> for every message. So, for example, if the positive rule set for a capture process has such a rule, then the capture process might capture messages that you did not intend to capture.</p>
<p>Here is another user-specified rule condition that uses an Oracle Streams <code dir="ltr">:dml</code> variable:</p>
<pre dir="ltr">:dml.get_object_owner() = &#39;HR&#39; AND :m IS NULL
</pre>
<p>For Oracle Streams clients, if a message consists of a row change to a table in the <code dir="ltr">hr</code> schema, and the value of the variable <code dir="ltr">m</code> is not known during evaluation, then this condition evaluates to <code dir="ltr">TRUE</code> because the undefined variable <code dir="ltr">m</code> is treated as a <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="sect4" -->
<div id="STRMS570" class="sect4"><a id="sthref608"></a>
<h5 class="sect4">Examples of Undefined Variables that Result in FALSE Rules for Oracle Streams Clients</h5>
<p>Consider the following user-defined rule condition:</p>
<pre dir="ltr">:m = 5
</pre>
<p>If the value of the variable <code dir="ltr">m</code> is undefined during evaluation, then a maybe rule results for non-Oracle Streams clients of the rules engine. However, for Oracle Streams clients, this condition evaluates to <code dir="ltr">FALSE</code> because the undefined variable <code dir="ltr">m</code> is treated as a <code dir="ltr">NULL</code>.</p>
<p>Consider another user-specified rule condition that uses an Oracle Streams <code dir="ltr">:dml</code> variable:</p>
<pre dir="ltr">:dml.get_object_owner() = &#39;HR&#39; AND :m = 5
</pre>
<p>For Oracle Streams clients, if a message consists of a row change to a table in the <code dir="ltr">hr</code> schema, and the value of the variable <code dir="ltr">m</code> is not known during evaluation, then this condition evaluates to <code dir="ltr">FALSE</code> because the undefined variable <code dir="ltr">m</code> is treated as a <code dir="ltr">NULL</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006392">&#34;Rule Set Evaluation&#34;</a></div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="i1017314"></a>
<div id="STRMS571" class="sect3">
<h4 class="sect3">Variables as Function Parameters in Rule Conditions</h4>
<p>Oracle recommends that you avoid using <code dir="ltr">:dml</code> and <code dir="ltr">:ddl</code> variables as function parameters for rule conditions. The following example uses the <code dir="ltr">:dml</code> variable as a parameter to a function named <code dir="ltr">my_function</code>:</p>
<pre dir="ltr">my_function(:dml) = &#39;Y&#39;
</pre>
<p>Rule conditions such as these can degrade rule evaluation performance and can result in the capture or propagation of extraneous <a href="strms_glossary.htm#CBAGCBCJ"><span class="xrefglossterm">Oracle Streams data dictionary</span></a> information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_adcapture.htm#i1010145">&#34;The Oracle Streams Data Dictionary&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1019483"></a>
<div id="STRMS572" class="sect2">
<h3 class="sect2">User-Created Evaluation Contexts<a id="sthref609"></a><a id="sthref610"></a></h3>
<p>You can use a custom <a href="strms_glossary.htm#CHDDECEH"><span class="xrefglossterm">evaluation context</span></a> in an Oracle Streams environment. Any user-defined evaluation context involving LCRs must include all the variables in <code dir="ltr">SYS.STREAMS$_EVALUATION_CONTEXT</code>. The type of each variable and its variable value function must be the same for each variable as the ones defined in <code dir="ltr">SYS.STREAMS$_EVALUATION_CONTEXT</code>. In addition, when creating the evaluation context using <code dir="ltr">DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT</code>, the <code dir="ltr">SYS.DBMS_STREAMS_INTERNAL.EVALUATION_CONTEXT_FUNCTION</code> must be specified for the <code dir="ltr">evaluation_function</code> parameter. You can alter an existing evaluation context using the <code dir="ltr">DBMS_RULE_ADM.ALTER_EVALUATION_CONTEXT</code> procedure.</p>
<p>You can find information about an evaluation context in the following data dictionary views:</p>
<ul>
<li>
<p><a class="olink REFRN20066" href="../REFRN/GUID-E33FBA3A-D58B-499D-BFD6-37A013A6D682.htm#REFRN20066"><code dir="ltr">ALL_EVALUATION_CONTEXT_TABLES</code></a></p>
</li>
<li>
<p><a class="olink REFRN20067" href="../REFRN/GUID-957C5B5A-BCBD-47D1-88BF-AFD66E8A2301.htm#REFRN20067"><code dir="ltr">ALL_EVALUATION_CONTEXT_VARS</code></a></p>
</li>
<li>
<p><a class="olink REFRN20068" href="../REFRN/GUID-D77D52EB-C211-4B9E-8D63-D224DE970778.htm#REFRN20068"><code dir="ltr">ALL_EVALUATION_CONTEXTS</code></a></p>
</li>
</ul>
<p>If necessary, you can use the information in these data dictionary views to build a new evaluation context based on the <code dir="ltr">SYS.STREAMS$_EVALUATION_CONTEXT</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Avoid using variable names with special characters, such as $ and #, to ensure that there are no conflicts with Oracle-supplied evaluation context variables.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN" href="../REFRN/toc.htm"><span class="italic">Oracle Database Reference</span></a> for more information about these data dictionary views</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5963">
<tr>
<td class="cellalignment5970">
<table class="cellalignment5968">
<tr>
<td class="cellalignment5967"><a href="strms_adapply.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5967"><a href="strms_adcca.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5972">
<table class="cellalignment5966">
<tr>
<td class="cellalignment5967"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5967"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5967"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5967"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5967"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5967"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>