<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-70979"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/JDBC%20Client-Side%20Security%20Features"></a><title>JDBC Client-Side Security Features</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:36Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="urls.htm" title="Previous" type="text/html"/>
<link rel="Next" href="proxya.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/55</span> <!-- End Header -->
<div id="JJDBC28295" class="chapter"><a id="CIHBIEHA"></a>
<h1 class="chapter"><span class="secnum">9</span> JDBC Client-Side Security Features</h1>
<p>This chapter discusses support in the Oracle Java Database Connectivity (JDBC) Oracle Call Interface (OCI) and JDBC Thin drivers for login authentication, data encryption, and data integrity, particularly, with respect to features of the Oracle Advanced Security option.</p>
<p>Oracle Advanced Security, previously known as the Advanced Networking Option (ANO) or Advanced Security Option (ASO), provides industry standards-based data encryption, data integrity, third-party authentication, single sign-on, and access authorization. Starting from Oracle Database 11g Release 1, both the JDBC OCI and JDBC Thin drivers support all the Oracle Advanced Security features.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This discussion is not relevant to the server-side internal driver because all communication through server-side internal driver is completely internal to the server.</div>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#EHAEFBJJ">Support for Oracle Advanced Security</a></p>
</li>
<li>
<p><a href="#EHACDDCI">Support for Login Authentication</a></p>
</li>
<li>
<p><a href="#CIHFGGBA">Support for Strong Authentication</a></p>
</li>
<li>
<p><a href="#CIHCBCBC">Support for OS Authentication</a></p>
</li>
<li>
<p><a href="#EHAFHEIG">Support for Data Encryption and Integrity</a></p>
</li>
<li>
<p><a href="#CIHIBEDB">Support for SSL</a></p>
</li>
<li>
<p><a href="#CIHCIDHF">Support for Kerberos</a></p>
</li>
<li>
<p><a href="#CIHEAJII">Support for RADIUS</a></p>
</li>
<li>
<p><a href="#CHDIJDBB">Secure External Password Store</a></p>
</li>
</ul>
<a id="EHAEFBJJ"></a>
<div id="JJDBC28296" class="sect1">
<h2 class="sect1">Support f<a id="sthref360"></a><a id="sthref361"></a>or Oracle Advanced Security</h2>
<p>Oracle Advanced Security provides the following security features:</p>
<ul>
<li>
<p>Data Encryption</p>
<p>Sensitive information communicated over enterprise networks and the Internet can be protected by using encryption algorithms, which transform information into a form that can be deciphered only with a decryption key. Some of the supported encryption algorithms are RC4, DES, 3DES, and AES.</p>
<p>To ensure data integrity during transmission, Oracle Advanced Security generates a cryptographically secure message digest. Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the SHA-2 list of hashing algorithms are also supported and Oracle Advanced Security uses the following hashing algorithms to generate the secure message digest and includes it with each message sent across a network:</p>
<ul>
<li>
<p>MD5</p>
</li>
<li>
<p>SHA1</p>
</li>
<li>
<p>SHA256</p>
</li>
<li>
<p>SHA384</p>
</li>
<li>
<p>SHA512</p>
</li>
</ul>
<p>This protects the communicated data from attacks, such as data modification, deleted packets, and replay attacks.</p>
<p>The following code snippet shows how to calculate the checksum using any of the algorithms mentioned previously:</p>
<pre>prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CHECKSUM_TYPES, &#34;( MD5, SHA1, SHA256, SHA384 or SHA512 )&#34;);
prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CHECKSUM_LEVEL, &#34;REQUIRED&#34;);
</pre></li>
<li>
<p>Strong Authentication</p>
<p>To ensure network security in distributed environments, it is necessary to authenticate the user and check his credentials. Password authentication is the most common means of authentication. Oracle Database enables strong authentication with Oracle authentication adapters, which support various third-party authentication services, including SSL with digital certificates. Oracle Database supports the following industry-standard authentication methods:</p>
<ul>
<li>
<p>Kerberos</p>
</li>
<li>
<p>Remote Authentication Dial-In User Service (RADIUS)</p>
</li>
<li>
<p>Secure Sockets Layer (SSL)</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBSEG001" href="../DBSEG/intro.htm#DBSEG001"><span class="italic">Oracle Database Security Guide</span></a></div>
<p class="subhead2"><a id="CHDCFIEI"></a><a id="JJDBC28297"></a>JDBC OCI Dr<a id="sthref362"></a>iver Support for Oracle Advanced Security</p>
<p>If you are using the JDBC OCI driver, which presumes that you are running from a computer with an Oracle client installation, then support for Oracle Advanced Security and incorporated third-party features is fairly similar to the support provided by in any Oracle client situation. Your use of Advanced Security features is determined by related settings in the <code>sqlnet.ora</code> file on the client computer.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), Oracle recommends you to use the configuration parameters present in the new XML configuration file <code>oraaccess.xml</code> instead of the OCI-specific configuration parameters present in the <code>sqlnet.ora</code> file. However, the configuration parameters present in the <code>sqlnet.ora</code> file are still supported. For more information about the <code>oraaccess.xml</code> file, see <a class="olink LNOCI73054" href="../LNOCI/oci10new.htm#LNOCI73054"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>.</div>
<p>Starting from Oracle Database 11<span class="italic">g</span> Release 1, the JDBC OCI driver attempts to use external authentication if you try connecting to a database without providing a password. The following are some examples using the JDBC OCI driver to connect to a database without providing a password:</p>
<p class="subhead2"><a id="JJDBC28298"></a>SSL Authentication</p>
<p><a href="#CIHDEFCI">Example 9-1</a> Using SSL authentication to connect to the database.</p>
<div id="JJDBC28299" class="example">
<p class="titleinexample"><a id="CIHDEFCI"></a>Example 9-1 Using SSL Authentication to Connect to the Database</p>
<pre>import java.sql.*;
import java.util.Properties;
 
public class test
{
    public static void main( String [] args ) throws Exception
    {
        String url = &#34;jdbc:oracle:oci:@&#34;
         +&#34;(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=localhost)(PORT=5221))&#34;
         +&#34;(CONNECT_DATA=(SERVICE_NAME=orcl)))&#34;;
        Driver driver = new oracle.jdbc.OracleDriver();
        Properties props = new Properties();
        Connection conn = driver.connect( url, props );
        conn.close();
    }
}
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="JJDBC28300"></a>Using Data Source</p>
<p><a href="#CIHHIJEA">Example 9-2</a> uses a data source to connect to the database.</p>
<div id="JJDBC28301" class="example">
<p class="titleinexample"><a id="CIHHIJEA"></a>Example 9-2 Using a Data Source to Connect to the Database</p>
<pre>import java.sql.*; 
import javax.sql.*; 
import java.util.Properties; 
import oracle.jdbc.pool.*; 
 
public class testpool { 
    public static void main( String args ) throws Exception 
    { String url = &#34;jdbc:oracle:oci:@&#34; +&#34;(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=localhost)(PORT=5221))&#34;
 +&#34;(CONNECT_DATA=(SERVICE_NAME=orcl)))&#34;; 
    OracleConnectionPoolDataSource ocpds = new OracleConnectionPoolDataSource(); 
    ocpds.setURL(url); 
    PooledConnection pc = ocpds.getPooledConnection(); 
    Connection conn = pc.getConnection(); 
    } 
    }
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="CHDHCDFD"></a><a id="JJDBC28302"></a>JDBC Thin Dr<a id="sthref363"></a>iver Support for Oracle Advanced Security</p>
<p>The JDBC Thin driver cannot assume the existence of an Oracle client installation or the presence of the <code>sqlnet.ora</code> file. Therefore, it uses a Java approach to support Oracle Advanced Security. Java classes that implement Oracle Advanced Security are included in the <code>ojdbc6.jar</code> and <code>ojdbc7.jar</code> files. Security parameters for encryption and integrity, usually set in the <code>sqlnet.ora</code> file, are set using a Java <code>Properties</code> object or through system properties.</p>
</div>
<!-- class="sect1" -->
<a id="EHACDDCI"></a>
<div id="JJDBC28303" class="sect1">
<h2 class="sect1">Support for Login A<a id="sthref364"></a><a id="sthref365"></a>uthentication</h2>
<p>Basic login authentication through JDBC consists of user names and passwords, as with any other means of logging in to an Oracle server. Specify the user name and password through a Java properties object or directly through the <code>getConnection</code> method call. This applies regardless of which client-side Oracle JDBC driver you are using, but is irrelevant if you are using the server-side internal driver, which uses a special direct connection and does not require a user name or password.</p>
<p>Starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2), the Oracle JDBC Thin driver supports the <code>O7L_MR</code> client ability when you are running your application with a JDK such as JDK 8, which supports the <code>PBKDF2-SHA2</code> algorithm. If you are running an application with JDK 7, then you must add a third-party security provider that supports the <code>PBKDF2-SHA2</code> algorithm, otherwise the driver will not support the new <code>12a</code> password verifier that requires the <code>O7L_MR</code> client ability.</p>
<p>If you are using Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2) with the <code>SQLNET.ALLOWED_LOGON_VERSION_SERVER</code> parameter set to <code>12a</code>, then keep the following points in mind:</p>
<ul>
<li>
<p>You must also use the 12.1.0.2 Oracle JDBC Thin driver and JDK 8 or JDK 7 with a third-party security provider that supports the <code>PBKDF2-SHA2</code> algorithm</p>
</li>
<li>
<p>If you use an earlier version of Oracle JDBC Thin driver, then you will get the following error:</p>
<pre>ORA-28040: No matching authentication protocol
</pre></li>
<li>
<p>If you use the 12.1.0.2 Oracle JDBC Thin driver with JDK 7, then also you will get the same error, if you do not add a third-party security provider that supports the <code>PBKDF2-SHA2</code> algorithm.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHFGGBA"></a>
<div id="JJDBC28304" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Support for Strong Authentication</h2>
<p>Oracle Advanced Security enables Oracle Database users to authenticate externally. External authentication can be with RADIUS, Kerberos, Certificate-Based Authentication, Token Cards, and Smart Cards. This is called strong authentication. Oracle JDBC drivers provide support for the following strong authentication methods:</p>
<ul>
<li>
<p>Kerberos</p>
</li>
<li>
<p>RADIUS</p>
</li>
<li>
<p>SSL (certificate-based authentication)</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NETRF" href="../NETRF/toc.htm"><span class="italic">Oracle Database Net Services Reference</span></a> for more information about the <code>SQLNET.ALLOWED_LOGON_VERSION_SERVER</code> parameter</div>
</div>
<!-- class="sect1" -->
<a id="CIHCBCBC"></a>
<div id="JJDBC28305" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Support for OS Authentication</h2>
<p>Operating System (OS) authentication feature enables Oracle server to pass control of user authentication to the operating system. Using this feature, you can connect to the database by authenticating the OS user name in the database. There is no password for the account associated with the OS user name because it is assumed that OS authentication is sufficient. In this case, the server delegates the authentication to the client OS. You must perform the following steps to use this feature:</p>
<ul>
<li>
<p>Use the following command to check the value of the Oracle <code>OS_AUTHENT_PREFIX</code> initialization parameter:</p>
<pre><span class="bold">SQL&gt; SHOW PARAMETER os_authent_prefix</span>
NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
os_authent_prefix                    string      ops$
SQL&gt;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Remember the OS authentication prefix because you must create a database user to enable an OS authenticated connection, where the user name must be the prefix value concatenated to the OS user name.</div>
</li>
<li>
<p>Add the following line in the <code>t_init1.ora</code> file:</p>
<pre>REMOTE_OS_AUTHENT = TRUE
</pre></li>
</ul>
<p>When a connection is attempted from the local database server, then the OS user name is passed to the Oracle server. If the user name is recognized, then the connection is accepted, otherwise the connection is rejected.</p>
<div id="JJDBC28306" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref366"></a>
<h3 class="sect2">Configuration Steps for Linux</h3>
<p>Perform the following steps to set up OS authentication on Linux:</p>
<ol>
<li>
<p>Use the following commands to create an OS user <code>w_smith</code>:</p>
<pre># <span class="bold">useradd w_smith</span>
# <span class="bold">passwd w_smith</span>
Changing password for w_smith
New password: <span class="italic">password</span>
Retype new password: <span class="italic">password</span>
</pre></li>
<li>
<p>Use the following command to create a database user who can use an OS authenticated connection:</p>
<pre>CREATE USER ops$w_smith IDENTIFIED EXTERNALLY;
GRANT CONNECT TO ops$w_smith;
</pre></li>
<li>
<p>Use the following commands to test the OS authentication connection:</p>
<pre>su - w_smith
export ORACLE_HOME=/u01/app/oracle/product/12.1.0/db_1
export PATH=$PATH:$ORACLE_HOME/bin
export ORACLE_SID=orcl
sqlplus /
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div id="JJDBC28307" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref367"></a>
<h3 class="sect2">Configuration Steps for Windows</h3>
<p>Perform the following steps to set up OS authentication on Windows:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle JDBC Thin drivers do not support NTS.</div>
<ol>
<li>
<p>Use the following steps to create a local user, say, <code>w_smith</code>, using the Computer Management window:</p>
<ol>
<li>
<p>Click <span class="bold">Start.</span></p>
</li>
<li>
<p>From the Start menu, select <span class="bold">Programs,</span> then select <span class="bold">Administrative Tools</span> and then select <span class="bold">Computer Management.</span></p>
</li>
<li>
<p>Clicking on the preceding Plus (&#34;+&#34;) sign to expand <span class="bold">Local Users and Groups</span> on the left pane.</p>
</li>
<li>
<p>Click <span class="bold">Users.</span></p>
</li>
<li>
<p>Select <span class="bold">New User</span> from the Action menu.</p>
</li>
<li>
<p>Enter details of the user in the New User dialog box and click <span class="bold">Create.</span></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
The preceding steps are only for creating a local user. Domain users can be created in Active Directory.</div>
</li>
<li>
<p>Use the following command to create a database user who can use an OS authenticated connection:</p>
<pre>CREATE USER &#34;OPS$yourdomain.com\w_smith&#34; IDENTIFIED EXTERNALLY;
GRANT CONNECT TO &#34;OPS$yourdomain.com\w_smith&#34;;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you create the database user in Windows environment, the user name should be in the following format:
<pre>&lt;OS_authentication_prefix_parameter&gt;$&lt;DOMAIN&gt;\&lt;OS_user_name&gt;
</pre></div>
<p>When using a Windows server, there is an additional consideration. The following option must be set in the <code>%ORACLE_HOME%\network\admin\sqlnet.ora</code> file:</p>
<pre>sqlnet.authentication_services= (nts)
</pre></li>
<li>
<p>Use the following commands to test the OS authentication connection:</p>
<pre>C:\&gt; set ORACLE_SID=orcl
C:\&gt; sqlplus /
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div id="JJDBC28308" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref368"></a>
<h3 class="sect2">JDBC Code Using OS Authentication</h3>
<p>Now that you have set up OS authentication to connect to the database, you can use the following JDBC code for connecting to the database:</p>
<pre>String url = &#34;jdbc:oracle:thin:@oracleserver.mydomain.com:5521:orcl&#34;
Properties props = new Properties();
Connection conn = DriverManager.getConnection( url, props);
</pre>
<p>The preceding code assumes that it is executed by <code>w_smith</code> on the client machine. The JDBC drivers retrieve the OS user name from the <code>user.name</code> system property that is set by the JVM. As a result, the following thin driver-specific error no longer exists:</p>
<pre>ORA-17443=Null user or password not supported in THIN driver
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
By default, the JDBC driver retrieves the OS user name from the <code>user.name</code> system property, which is set by the JVM. If the JDBC driver is unable to retrieve this system property or if you want to override the value of this system property, then you can use the <code>OracleConnection.CONNECTION_PROPERTY_THIN_VSESSION_OSUSER</code> connection property. For more information, refer to <a class="olink JAJDB" href="../JAJDB/toc.htm"><span class="italic">Oracle Database JDBC Java API Reference</span></a>.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="EHAFHEIG"></a>
<div id="JJDBC28309" class="sect1">
<h2 class="sect1">Support for Data En<a id="sthref369"></a><a id="sthref370"></a><a id="sthref371"></a><a id="sthref372"></a>cryption and Integrity</h2>
<p>You can use Oracle Database and Oracle Advanced Security data encryption and integrity features in your Java database applications, depending on related settings in the server. When using the JDBC OCI driver, set parameters as you would in any Oracle client situation. When using the Thin driver, set parameters through a Java properties object.</p>
<p>Encryption is enabled or disabled based on a combination of the client-side encryption-level setting and the server-side encryption-level setting. Similarly, integrity is enabled or disabled based on a combination of the client-side integrity-level setting and the server-side integrity-level setting.</p>
<p>Encryption and integrity support the same setting levels, <code>REJECTED</code>, <code>ACCEPTED</code>, <code>REQUESTED</code>, and <code>REQUIRED</code>. <a href="#g1029740">Table 9-1</a> shows how these possible settings on the client-side and server-side combine to either enable or disable the feature. By default, remote OS authentication (through TCP) is disabled in the database for security reasons.</p>
<div id="JJDBC28310" class="tblformal">
<p class="titleintable"><a id="sthref373"></a><a id="g1029740"></a>Table 9-1 Client/Server Negotiations for Encryption or Integrity</p>
<table class="cellalignment2244" title="Client/Server Negotiations for Encryption or Integrity" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t11"><br/></th>
<th class="cellalignment2245" id="r1c2-t11">Client Rejected</th>
<th class="cellalignment2245" id="r1c3-t11">Client Accepted (default)</th>
<th class="cellalignment2245" id="r1c4-t11">Client Requested</th>
<th class="cellalignment2245" id="r1c5-t11">Client Required</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t11" headers="r1c1-t11">
<p><span class="bold">Server Rejected</span></p>
</td>
<td class="cellalignment2246" headers="r2c1-t11 r1c2-t11">
<p>OFF</p>
</td>
<td class="cellalignment2246" headers="r2c1-t11 r1c3-t11">
<p>OFF</p>
</td>
<td class="cellalignment2246" headers="r2c1-t11 r1c4-t11">
<p>OFF</p>
</td>
<td class="cellalignment2246" headers="r2c1-t11 r1c5-t11">
<p>connection fails</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t11" headers="r1c1-t11">
<p><span class="bold">Server Accepted (default)</span></p>
</td>
<td class="cellalignment2246" headers="r3c1-t11 r1c2-t11">
<p>OFF</p>
</td>
<td class="cellalignment2246" headers="r3c1-t11 r1c3-t11">
<p>OFF</p>
</td>
<td class="cellalignment2246" headers="r3c1-t11 r1c4-t11">
<p>ON</p>
</td>
<td class="cellalignment2246" headers="r3c1-t11 r1c5-t11">
<p>ON</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r4c1-t11" headers="r1c1-t11">
<p><span class="bold">Server Requested</span></p>
</td>
<td class="cellalignment2246" headers="r4c1-t11 r1c2-t11">
<p>OFF</p>
</td>
<td class="cellalignment2246" headers="r4c1-t11 r1c3-t11">
<p>ON</p>
</td>
<td class="cellalignment2246" headers="r4c1-t11 r1c4-t11">
<p>ON</p>
</td>
<td class="cellalignment2246" headers="r4c1-t11 r1c5-t11">
<p>ON</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r5c1-t11" headers="r1c1-t11">
<p><span class="bold">Server Required</span></p>
</td>
<td class="cellalignment2246" headers="r5c1-t11 r1c2-t11">
<p>connection fails</p>
</td>
<td class="cellalignment2246" headers="r5c1-t11 r1c3-t11">
<p>ON</p>
</td>
<td class="cellalignment2246" headers="r5c1-t11 r1c4-t11">
<p>ON</p>
</td>
<td class="cellalignment2246" headers="r5c1-t11 r1c5-t11">
<p>ON</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#g1029740">Table 9-1</a> shows, for example, that if encryption is requested by the client, but rejected by the server, it is disabled. The same is true for integrity. As another example, if encryption is accepted by the client and requested by the server, it is enabled. The same is also true for integrity.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ASOAG600" href="../ASOAG/asopart1.htm#ASOAG600"><span class="italic">Oracle Database Advanced Security Guide</span></a> for more information about Transparent Data Encryption (TDE)</p>
</li>
<li>
<p><a class="olink DBSEG008" href="../DBSEG/data_encryption.htm#DBSEG008"><span class="italic">Oracle Database Security Guide</span></a> for more information about data encryption and integrity features, except TDE</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The term checksum still appears in integrity parameter names, but is no longer used otherwise. For all intents and purposes, checksum and integrity are synonymous.</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDIIAGE">JDBC OCI Driver Support for Encryption and Integrity</a></p>
</li>
<li>
<p><a href="#i1022564">JDBC Thin Driver Support for Encryption and Integrity</a></p>
</li>
<li>
<p><a href="#CHDFDDFG">Setting Encryption and Integrity Parameters in Java</a></p>
</li>
</ul>
<a id="CHDIIAGE"></a>
<div id="JJDBC28311" class="sect2">
<h3 class="sect2">JDBC OCI Driv<a id="sthref374"></a><a id="sthref375"></a><a id="sthref376"></a>er Support for Encryption and Integrity</h3>
<p>If you are using the JDBC OCI driver, which presumes an Oracle-client setting with an Oracle client installation, then you can enable or disable data encryption or integrity and set related parameters as you would in any Oracle client situation, through settings in the <code>sqlnet.ora</code> file on the client.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), Oracle recommends you to use the configuration parameters present in the new XML configuration file <code>oraaccess.xml</code> instead of the OCI-specific configuration parameters present in the <code>sqlnet.ora</code> file. However, the configuration parameters present in the <code>sqlnet.ora</code> file are still supported. For more information about the <code>oraaccess.xml</code> file, see <a class="olink LNOCI73054" href="../LNOCI/oci10new.htm#LNOCI73054"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>.</div>
<p>To summarize, the client parameters are shown in <a href="#g1029876">Table 9-2</a>:</p>
<div id="JJDBC28312" class="tblformalwide">
<p class="titleintable"><a id="sthref377"></a><a id="g1029876"></a>Table 9-2 OCI Driver Client Parameters for Encryption and Integrity</p>
<table class="cellalignment2247" title="OCI Driver Client Parameters for Encryption and Integrity" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t15">Parameter Description</th>
<th class="cellalignment2245" id="r1c2-t15">Parameter Name</th>
<th class="cellalignment2245" id="r1c3-t15">Possible Settings</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t15" headers="r1c1-t15">
<p>Client encryption level</p>
</td>
<td class="cellalignment2246" headers="r2c1-t15 r1c2-t15">
<p><code>SQLNET.ENCRYPTION_CLIENT</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t15 r1c3-t15">
<p><code>REJECTED<br/>
ACCEPTED<br/>
REQUESTED<br/>
REQUIRED</code></p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t15" headers="r1c1-t15">
<p>Client encryption selected list</p>
</td>
<td class="cellalignment2246" headers="r3c1-t15 r1c2-t15">
<p><code>SQLNET.ENCRYPTION_TYPES_CLIENT</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t15 r1c3-t15">
<p><code>RC4_40</code>, <code>RC4_56</code>, <code>DES</code>, <code>DES40</code>, <code>AES128</code>, <code>AES192</code>, <code>AES256</code>, <code>3DES112</code>, <code>3DES168</code></p>
<p>(see Note)</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r4c1-t15" headers="r1c1-t15">
<p>Client integrity level</p>
</td>
<td class="cellalignment2246" headers="r4c1-t15 r1c2-t15">
<p><code>SQLNET.CRYPTO_CHECKSUM_CLIENT</code></p>
</td>
<td class="cellalignment2246" headers="r4c1-t15 r1c3-t15">
<p><code>REJECTED<br/>
ACCEPTED<br/>
REQUESTED<br/>
REQUIRED</code></p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r5c1-t15" headers="r1c1-t15">
<p>Client integrity selected list</p>
</td>
<td class="cellalignment2246" headers="r5c1-t15 r1c2-t15">
<p><code>SQLNET.CRYPTO_CHECKSUM_TYPES_CLIENT</code></p>
</td>
<td class="cellalignment2246" headers="r5c1-t15 r1c3-t15">
<p><code>MD5</code>, <code>SHA-1</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
For the Oracle Advanced Security domestic edition only, settings of <code>RC4_128</code> and <code>RC4_256</code> are also possible.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBSEG020" href="../DBSEG/asoconfg.htm#DBSEG020"><span class="italic">Oracle Database Security Guide</span></a> for more information about configuring network data encryption and integrity</div>
</div>
<!-- class="sect2" -->
<a id="i1022564"></a>
<div id="JJDBC28313" class="sect2">
<h3 class="sect2">JDBC Thin Dri<a id="sthref378"></a><a id="sthref379"></a><a id="sthref380"></a>ver Support for Encryption and Integrity</h3>
<p>The JDBC Thin driver support for data encryption and integrity parameter settings parallels the JDBC OCI driver support discussed in the preceding section. You can set the corresponding parameters through a Java properties object that you can use while opening a database connection.</p>
<p>The default value for the encryption and integrity level is <code>ACCEPTED</code> for both the server side and the client side. This enables you to achieve the desired security level for a connection pair by configuring only one side of a connection, either the server side or the client side. This increases the efficiency of your program because if there are multiple Oracle clients connecting to an Oracle Server, then you need to change the encryption and integrity level to <code>REQUESTED</code> in the <code>sqlnet.ora</code> file only on the server side to turn on encryption or integrity for all connections. This saves time and effort because you do not have to change the settings for each client separately.</p>
<p><a href="#g1029900">Table 9-3</a> lists the parameter information for the JDBC Thin driver. These parameters are defined in the <code>oracle.jdbc.OracleConnection</code> interface.</p>
<div id="JJDBC28314" class="tblformalwide">
<p class="titleintable"><a id="sthref381"></a><a id="g1029900"></a>Table 9-3 Thin Driver Client Parameters for Encryption and Integrity</p>
<table class="cellalignment2247" title="Thin Driver Client Parameters for Encryption and Integrity" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t18">Parameter Name</th>
<th class="cellalignment2245" id="r1c2-t18">Parameter Type</th>
<th class="cellalignment2245" id="r1c3-t18">Possible Settings</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t18" headers="r1c1-t18">
<p><code>CONNECTION_PROPERTY_THIN_NET_ENCRYPTION_LEVEL</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t18 r1c2-t18">
<p><code>String</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t18 r1c3-t18">
<p><code>REJECTED<br/>
ACCEPTED<br/>
REQUESTED<br/>
REQUIRED</code></p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t18" headers="r1c1-t18">
<p><code>CONNECTION_PROPERTY_THIN_NET_ENCRYPTION_TYPES</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t18 r1c2-t18">
<p><code>String</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t18 r1c3-t18">
<p><code>AES256</code>, <code>AES192</code>, <code>AES128</code>, <code>3DES168</code>, <code>3DES112</code>, <code>DES56C</code>, <code>DES40C</code>, <code>RC4_256</code>, <code>RC4_128</code>, <code>RC4_40</code>, <code>RC4_56</code></p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r4c1-t18" headers="r1c1-t18">
<p><code>CONNECTION_PROPERTY_THIN_NET_CHECKSUM_LEVEL</code></p>
</td>
<td class="cellalignment2246" headers="r4c1-t18 r1c2-t18">
<p><code>String</code></p>
</td>
<td class="cellalignment2246" headers="r4c1-t18 r1c3-t18">
<p><code>REJECTED<br/>
ACCEPTED<br/>
REQUESTED<br/>
REQUIRED</code></p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r5c1-t18" headers="r1c1-t18">
<p><code>CONNECTION_PROPERTY_THIN_NET_CHECKSUM_TYPES</code></p>
</td>
<td class="cellalignment2246" headers="r5c1-t18 r1c2-t18">
<p><code>String</code></p>
</td>
<td class="cellalignment2246" headers="r5c1-t18 r1c3-t18">
<p><code>MD5</code>, <code>SHA1</code>, SHA256, SHA384, SHA512</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Oracle Advanced Security support for the Thin driver is incorporated directly into the JDBC classes JAR file. So, there is no separate version for domestic and export editions. Only parameter settings that are suitable for an export edition are possible.</p>
</li>
<li>
<p>The letter C in <code>DES40C</code> and <code>DES56C</code> refers to Cipher Block Chaining (CBC) mode.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDFDDFG"></a>
<div id="JJDBC28315" class="sect2">
<h3 class="sect2">Setting E<a id="sthref382"></a><a id="sthref383"></a><a id="sthref384"></a>ncryption and Integrity Parameters in Java</h3>
<p>Use a Java properties object, that is, an instance of <code>java.util.Properties</code>, to set the data encryption and integrity parameters supported by the JDBC Thin driver.</p>
<p>The following example instantiates a Java properties object, uses it to set each of the parameters in <a href="#g1029900">Table 9-3</a>, and then uses the properties object in opening a connection to the database:</p>
<pre>...
Properties prop = new Properties();
prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_ENCRYPTION_LEVEL, &#34;REQUIRED&#34;);
prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_ENCRYPTION_TYPES, &#34;( DES40C )&#34;);
prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CHECKSUM_LEVEL, &#34;REQUESTED&#34;);
prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CHECKSUM_TYPES, &#34;( MD5 )&#34;);

OracleDataSource ods = new OracleDataSource();
ods.setProperties(prop);
ods.setURL(&#34;jdbc:oracle:thin:@localhost:5221:main&#34;);
Connection conn = ods.getConnection();
...
</pre>
<p>The parentheses around the values encryption type and checksum type allow for lists of values. When multiple values are supplied, the server and the client negotiate to determine which value is to be actually used.</p>
<p class="subhead2"><a id="JJDBC28316"></a>E<a id="sthref385"></a><a id="sthref386"></a><a id="sthref387"></a>xample</p>
<p><a href="#BABGGGEC">Example 9-3</a> is a complete class that sets data encryption and integrity parameters before connecting to a database to perform a query.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the example, the string <code>REQUIRED</code> is retrieved dynamically through functionality of the <code>AnoServices</code> and <code>Service</code> classes. You have the option of retrieving the strings in this manner or including them in the software code as shown in the previous examples</div>
<p>Before running this example, you must turn on encryption in the <code>sqlnet.ora</code> file. For example, the following lines will turn on AES256, AES192, and AES128 for the encryption and MD5 and SHA1 for the checksum:</p>
<pre>  SQLNET.ENCRYPTION_SERVER = ACCEPTED 
  SQLNET.CRYPTO_CHECKSUM_SERVER = ACCEPTED 
  SQLNET.CRYPTO_CHECKSUM_TYPES_SERVER = (MD5, SHA1) 
  SQLNET.ENCRYPTION_TYPES_SERVER = (AES256, AES192, AES128)
  SQLNET.CRYPTO_SEED = 2z0hslkdharUJCFtkwbjOLbgwsj7vkqt3bGoUylihnvkhgkdsbdskkKGhdk
</pre>
<div id="JJDBC28317" class="example">
<p class="titleinexample"><a id="BABGGGEC"></a>Example 9-3 Setting Data Encryption and Integrity Parameters</p>
<pre>import java.sql.*;
import java.util.Properties;
import oracle.net.ano.AnoServices;
import oracle.jdbc.*;
 
public class DemoAESAndSHA1
{
  static final String USERNAME= &#34;HR&#34;;
  static final String PASSWORD= &#34;hr&#34;;
  static final String URL = &#34;jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=5221))&#34;
  +&#34;(CONNECT_DATA=(SERVICE_NAME=orcl)))&#34;;
 
  public static final void main(String[] argv)
  {
    DemoAESAndSHA1 demo = new DemoAESAndSHA1();
    try
    {
      demo.run();
    }catch(SQLException ex)
    {
      ex.printStackTrace();
    }
  }
 
  void run() throws SQLException
  {
    OracleDriver dr = new OracleDriver();
    Properties prop = new Properties();
 
    // We require the connection to be encrypted with either AES256 or AES192.
    // If the database doesn&#39;t accept such a security level, then the connection attempt will fail.
    
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_ENCRYPTION_LEVEL,AnoServices.ANO_REQUIRED);
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_ENCRYPTION_TYPES,&#34;( &#34; + AnoServices.ENCRYPTION_AES256
     + &#34;,&#34; + AnoServices.ENCRYPTION_AES192 + &#34;)&#34;);
 
    // We also require the use of the SHA1 algorithm for data integrity checking.
    
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CHECKSUM_LEVEL,AnoServices.ANO_REQUIRED);
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CHECKSUM_TYPES,
&#34;( &#34; + AnoServices.CHECKSUM_SHA1 + &#34; )&#34;);
    prop.setProperty(&#34;user&#34;,DemoAESAndSHA1.USERNAME);
    prop.setProperty(&#34;password&#34;,DemoAESAndSHA1.PASSWORD);
    OracleConnection oraConn = (OracleConnection)dr.connect(DemoAESAndSHA1.URL,prop);
    System.out.println(&#34;Connection created! Encryption algorithm is: &#34; + oraConn.getEncryptionAlgorithmName() + &#34;, data 
    integrity algorithm is: &#34; + oraConn.getDataIntegrityAlgorithmName());    
    oraConn.close();
  }
  
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIBEDB"></a>
<div id="JJDBC28318" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Support for SSL</h2>
<p>Oracle Database 12<span class="italic">c</span> provides support for the Secure Sockets Layer (SSL) protocol. SSL is a widely used industry standard protocol that provides secure communication over a network. SSL provides authentication, data encryption, and data integrity. It provides a secure enhancement to the standard TCP/IP protocol, which is used for Internet communication.</p>
<p>SSL uses digital certificates that comply with the X.509v3 standard for authentication and a public and private key pair for encryption. SSL also uses secret key cryptography and digital signatures to ensure privacy and integrity of data. When a network connection over SSL is initiated, the client and server perform an SSL handshake that includes the following steps:</p>
<ul>
<li>
<p>Client and server negotiate about the cipher suites to use. This includes deciding on the encryption algorithms to be used for data transfer.</p>
</li>
<li>
<p>Server sends its certificate to the client, and the client verifies that the certificate was signed by a trusted certification authority (CA). This step verifies the identity of the server.</p>
</li>
<li>
<p>If client authentication is required, the client sends its own certificate to the server, and the server verifies that the certificate was signed by a trusted CA.</p>
</li>
<li>
<p>Client and server exchange key information using public key cryptography. Based on this information, each generates a session key. All subsequent communications between the client and the server is encrypted and decrypted by using this set of session keys and the negotiated cipher suite.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
In Oracle Database 11<span class="italic">g</span> Release 1 (11.1), SSL authentication is supported in the thin driver. So, you do not need to provide a user name/password pair if you are using SSL authentication.</div>
<p class="subhead2"><a id="JJDBC28319"></a>SSL Terminology</p>
<p>The following terms are commonly used in the SSL context:</p>
<ul>
<li>
<p><span class="bold">certificate</span>: A certificate is a digitally signed document that binds a public key with an entity. The certificate can be used to verify that the public key belongs to that individual.</p>
</li>
<li>
<p><span class="bold">certification authority</span>: A certification authority (CA), also known as certificate authority, is an entity which issues digitally signed certificates for use by other parties.</p>
</li>
<li>
<p><span class="bold">cipher suite</span>: A cipher suite is a set of cryptographic algorithms and key sizes used to encrypt data sent over an SSL-enabled network.</p>
</li>
<li>
<p><span class="bold">private key</span>: A private key is a secret key, which is never transmitted over a network. The private key is used to decrypt a message that has been encrypted using the corresponding public key. It is also used to sign certificates. The certificate is verified using the corresponding public key.</p>
</li>
<li>
<p><span class="bold">public key</span>: A public key is an encryption key that can be made public or sent by ordinary means such as an e-mail message. The public key is used for encrypting the message sent over SSL. It is also used to verify a certificate signed by the corresponding private key.</p>
</li>
<li>
<p><span class="bold">wallet</span>: A wallet is a password-protected container that is used to store authentication and signing credentials, including private keys, certificates, and trusted certificates required by SSL.</p>
</li>
</ul>
<p class="subhead2"><a id="JJDBC28320"></a>Java Version of SSL</p>
<p>The Java Secure Socket Extension (JSSE) provides a framework and an implementation for a Java version of the SSL and TLS protocols. JSSE provides support for data encryption, server and client authentication, and message integrity. It abstracts the complex security algorithms and handshaking mechanisms and simplifies application development by providing a building block for application developers, which they can directly integrate into their applications. JSSE is integrated into Java Development Kit (JDK) 1.4 and later, and supports SSL version 2.0 and 3.0.</p>
<p>Oracle strongly recommends that you have a clear understanding of the JavaTM Secure Socket Extension (JSSE) framework before using SSL in the Oracle JDBC drivers.</p>
<p>The JSSE standard application programming interface (API) is available in the <code>javax.net</code>, <code>javax.net.ssl</code>, and <code>javax.security.cert</code> packages. These packages provide classes for creating and configuring sockets, server sockets, SSL sockets, and SSL server sockets. The packages also provide a class for secure HTTP connections, a public key certificate API compatible with JDK1.1-based platforms, and interfaces for key and trust managers.</p>
<p>SSL works the same way, as in any networking environment, in Oracle Database 12<span class="italic">c</span> Release 1 (12.1). This section covers the following:</p>
<ul>
<li>
<p><a href="#CIHIDIFG">Managing Certificates and Wallets</a></p>
</li>
<li>
<p><a href="#CIHCGCCH">Keys and certificates containers</a></p>
</li>
</ul>
<a id="CIHIDIFG"></a>
<div id="JJDBC28321" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Managing Certificates and Wallets</h3>
<p>To establish an SSL connection with a JDBC client, Thin or OCI, Oracle database server sends its certificate, which is stored in its wallet. The client may or may not need a certificate or wallet depending on the server configuration.</p>
<p>The Oracle JDBC Thin driver uses the JSSE framework to create an SSL connection. It uses the default provider (<span class="italic">SunJSSE</span>) to create an SSL context. However you can provide your own provider.</p>
<p>You do not need a certificate for the client, unless the <code>SSL_CLIENT_AUTHENTICATION</code> parameter is set on the server.</p>
</div>
<!-- class="sect2" -->
<a id="CIHCGCCH"></a>
<div id="JJDBC28328" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Keys and certificates containers</h3>
<p>Java clients can use multiple types of containers such as Oracle wallets, JKS, PKCS12, and so on, as long as a provider is available. For Oracle wallets, <span class="italic">OraclePKI</span> provider must be used because the PKCS12 support provided by <span class="italic">SunJSSE</span> provider does not support all the features of PKCS12. In order to use <span class="italic">OraclePKI</span> provider, the following JARs are required:</p>
<ul>
<li>
<p><code>oraclepki.jar</code></p>
</li>
<li>
<p><code>osdt_cert.jar</code></p>
</li>
<li>
<p><code>osdt_core.jar</code></p>
</li>
</ul>
<p>All these JAR files should be under <code>$ORACLE_HOME/jlib directory</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHCIDHF"></a>
<div id="JJDBC28339" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Support for Kerberos</h2>
<p>Kerberos is a network authentication protocol that provides the tools of authentication and strong cryptography over the network. Kerberos helps you secure your information systems across your entire enterprise by using secret-key cryptography. The Kerberos protocol uses strong cryptography so that a client or a server can prove its identity to its server or client across an insecure network connection. After a client and server have used Kerberos to prove their identity, they can also encrypt all of their communications to assure privacy and data integrity as they go about their business.</p>
<p>The Kerberos architecture is centered around a trusted authentication service called the key distribution center, or KDC. Users and services in a Kerberos environment are referred to as principals; each principal shares a secret, such as a password, with the KDC. A principal can be a user such as <code>HR</code> or a database server instance.</p>
<p>Starting from 12c Release 1, Oracle Database also supports cross-realm authentication for Kerberos. If you add the referred realm appropriately in the <code>domain_realms</code> section of the kerberos configuration file, then being in one particular realm, you can access the services of another realm.</p>
<p>This section contains the following subsections:</p>
<ul>
<li>
<p><a href="#BABIDFID">Configuring Windows to Use Kerberos</a></p>
</li>
<li>
<p><a href="#BABGGCAD">Configuring Oracle Database to Use Kerberos</a></p>
</li>
</ul>
<a id="BABIDFID"></a>
<div id="JJDBC28342" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring Windows to Use Kerberos</h3>
<p>A good Kerberos client providing <code>klist, kinit,</code> and other tools, can be found at the following link:</p>
<pre><a href="http://web.mit.edu/kerberos/dist/index.html">http://web.mit.edu/kerberos/dist/index.html</a>
</pre>
<p>This client also provides a nice GUI.</p>
<p>You need to make the following changes to configure Kerberos on your Windows machine:</p>
<ol>
<li>
<p>Right-click the <span class="bold">My Computer</span> icon on your desktop.</p>
</li>
<li>
<p>Select <span class="bold">Properties</span>. The System Properties dialog box is displayed.</p>
</li>
<li>
<p>Select the <span class="bold">Advanced</span> tab.</p>
</li>
<li>
<p>Click <span class="bold">Environment Variables</span>. The Environment Variables dialog box is displayed.</p>
</li>
<li>
<p>Click <span class="bold">New</span> to add a new user variable. The New User Variable dialog box is displayed.</p>
</li>
<li>
<p>Enter <code>KRB5CCNAME</code> in the Variable name field.</p>
</li>
<li>
<p>Enter <code>FILE:C:\Documents and Settings\</code><code><span class="codeinlineitalic">&lt;user_name&gt;</span></code><code>\krb5cc</code> in the Variable value field.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the New User Variable dialog box.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Environment Variables dialog box.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the System Properties dialog box.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>C:\WINDOWS\krb5.ini</code> file has the same content as <code>krb5.conf</code> file.</div>
</div>
<!-- class="sect2" -->
<a id="BABGGCAD"></a>
<div id="JJDBC28343" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring Oracle Database to Use Kerberos</h3>
<p>Perform the following steps to configure Oracle Database to use Kerberos:</p>
<ol>
<li>
<p>Use the following command to connect to the database:</p>
<pre>SQL&gt; connect system
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Use the following commands to create a user <code>CLIENT@US.ORACLE.COM</code> that is identified externally:</p>
<pre>SQL&gt; create user &#34;CLIENT@US.ORACLE.COM&#34; identified externally;
SQL&gt; grant create session to &#34;CLIENT@US.ORACLE.COM&#34;;
</pre></li>
<li>
<p>Use the following commands to connect to the database as <code>sysdba</code> and dismount it:</p>
<pre>SQL&gt; connect / as sysdba
SQL&gt; shutdown immediate;

</pre></li>
<li>
<p>Add the following line to <code>$T_WORK/t_init1.ora</code> file:</p>
<pre>OS_AUTHENT_PREFIX=&#34;&#34;
</pre></li>
<li>
<p>Use the following command to restart the database:</p>
<pre>SQL&gt; startup pfile=t_init1.ora
</pre></li>
<li>
<p>Modify the <code>sqlnet.ora</code> file to include the following lines:</p>
<pre>names.directory_path = (tnsnames)
#Kerberos
sqlnet.authentication_services = (beq,kerberos5)
sqlnet.authentication_kerberos5_service = dbji
sqlnet.kerberos5_conf = /home/Jdbc/Security/kerberos/krb5.conf
sqlnet.kerberos5_keytab = /home/Jdbc/Security/kerberos/dbji.oracleserver
sqlnet.kerberos5_conf_mit = true
sqlnet.kerberos_cc_name = /tmp/krb5cc_5088
# logging (optional):
trace_level_server=16 
trace_directory_server=/scratch/sqlnet/
</pre></li>
<li>
<p>Use the following commands to verify that you can connect through SQL*Plus:</p>
<pre><span class="bold">&gt; kinit client</span>
<span class="bold">&gt; klist</span>
     Ticket cache: FILE:/tmp/krb5cc_5088
     Default principal: client@US.ORACLE.COM
    
     Valid starting     Expires            Service principal
     06/22/06 07:13:29  06/22/06 17:13:29  krbtgt/US.ORACLE.COM@US.ORACLE.COM
    
    
     Kerberos 4 ticket cache: /tmp/tkt5088
     klist: You have no tickets cached
&gt; <span class="bold">sqlplus</span> <span class="bold">&#39;/@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oracleserver.mydomain.com)(PORT=5221))</span>
<span class="bold">(CONNECT_DATA=(SERVICE_NAME=orcl)))&#39;</span>
</pre></li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
For information about using Kerberos, refer to the following web sites
<pre><a href="http://technet.microsoft.com/en-us/windowsserver/bb512919">http://technet.microsoft.com/en-us/windowsserver/bb512919</a>
<a href="http://access.redhat.com/knowledge/docs/">http://access.redhat.com/knowledge/docs/</a>
</pre></div>
</div>
<!-- class="sect2" -->
<div id="JJDBC28344" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref388"></a>
<h3 class="sect2">Code Example</h3>
<p>This following example demonstrates the new Kerberos authentication feature that is part of Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC thin driver. This demo covers two scenarios:</p>
<ul>
<li>
<p>In the first scenario, the OS maintains the user name and credentials. The credentials are stored in the cache and the driver retrieves the credentials before trying to authenticate to the server. This scenario is in the module <code>connectWithDefaultUser()</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ol>
<li>
<p>Before you run this part of the demo, use the following command to verify that you have valid credentials:</p>
<pre>&gt; /usr/kerberos/bin/kinit client
where, the password is <span class="italic">welcome</span>.
</pre></li>
<li>
<p>Use the following command to list your tickets:</p>
<pre>&gt; /usr/kerberos/bin/klist
</pre></li>
</ol>
</div>
</li>
<li>
<p>The second scenario covers the case where the application wants to control the user credentials. This is the case of the application server where multiple web users have their own credentials. This scenario is in the module <code>connectWithSpecificUser().</code></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To run this demo, you need to have a working setup, that is, a Kerberos server up and running, and an Oracle database server that is configured to use Kerberos authentication. You then need to change the URLs used in the example to compile and run it.</div>
</li>
</ul>
<div id="JJDBC28345" class="example">
<p class="titleinexample"><a id="sthref389"></a>Example 9-4 Using Kerberos Authentication to Connect to the Database</p>
<pre>import com.sun.security.auth.module.Krb5LoginModule;
import java.io.IOException;
 
import java.security.PrivilegedExceptionAction;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
import java.util.HashMap;
import java.util.Properties;
import javax.security.auth.Subject;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;
 
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleDriver;
import oracle.net.ano.AnoServices;
public class KerberosJdbcDemo
{
  String url =&#34;jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)&#34;+
    &#34;(HOST=oracleserver.mydomain.com)(PORT=5221))(CONNECT_DATA=&#34; +
    &#34;(SERVICE_NAME=orcl)))&#34;;
 
  public static void main(String[] arv)
  {
    /* If you see the following error message [Mechanism level: Could not load
     * configuration file c:\winnt\krb5.ini (The system cannot find the path 
     * specified] it&#39;s because the JVM cannot locate your kerberos config file.
     * You have to provide the location of the file. For example, on Windows,
     * the MIT Kerberos client uses the config file: C\WINDOWS\krb5.ini:
     */
    // System.setProperty(&#34;java.security.krb5.conf&#34;,&#34;C:\\WINDOWS\\krb5.ini&#34;);
    System.setProperty(&#34;java.security.krb5.conf&#34;,&#34;/home/Jdbc/Security/kerberos/krb5.conf&#34;);
    
    KerberosJdbcDemo kerberosDemo = new KerberosJdbcDemo();
    try
    {
      System.out.println(&#34;Attempt to connect with the default user:&#34;);
      kerberosDemo.connectWithDefaultUser();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    try
    {
      System.out.println(&#34;Attempt to connect with a specific user:&#34;);
      kerberosDemo.connectWithSpecificUser();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
 
  void connectWithDefaultUser() throws SQLException
  {
    OracleDriver driver = new OracleDriver();
    Properties prop = new Properties();
    
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_AUTHENTICATION_SERVICES,
      &#34;(&#34;+AnoServices.AUTHENTICATION_KERBEROS5+&#34;)&#34;);  
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_AUTHENTICATION_KRB5_MUTUAL,
      &#34;true&#34;);    
 
    /* If you get the following error [Unable to obtain Princpal Name for 
     * authentication] although you know that you have the right TGT in your
     * credential cache, then it&#39;s probably because the JVM can&#39;t locate your
     * cache.
     *
     * Note that the default location on windows is &#34;C:\Documents and Settings\krb5cc_username&#34;.
     */
 
    // prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_AUTHENTICATION_KRB5_CC_NAME,
    /*
      On linux:
         &gt; which kinit
         /usr/kerberos/bin/kinit
         &gt; ls -l /etc/krb5.conf 
         lrwxrwxrwx    1 root  root   47 Jun 22 06:56 /etc/krb5.conf -&gt; /home/Jdbc/Security/kerberos/krb5.conf
    
         &gt; kinit client
         Password for client@US.ORACLE.COM: 
         &gt; klist
         Ticket cache: FILE:/tmp/krb5cc_5088
         Default principal: client@US.ORACLE.COM
 
         Valid starting     Expires            Service principal
         11/02/06 09:25:11  11/02/06 19:25:11  krbtgt/US.ORACLE.COM@US.ORACLE.COM
 
 
         Kerberos 4 ticket cache: /tmp/tkt5088
         klist: You have no tickets cached
    */
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_AUTHENTICATION_KRB5_CC_NAME,
                     &#34;/tmp/krb5cc_5088&#34;);
    Connection conn  = driver.connect(url,prop);
    String auth = ((OracleConnection)conn).getAuthenticationAdaptorName();
    System.out.println(&#34;Authentication adaptor=&#34;+auth);
    printUserName(conn);
    conn.close();
  }
 
  
  void connectWithSpecificUser() throws Exception
  {
    Subject specificSubject = new Subject();
    
    // This first part isn&#39;t really meaningful to the sake of this demo. In
    // a real world scenario, you have a valid &#34;specificSubject&#34; Subject that
    // represents a web user that has valid Kerberos credentials.
    Krb5LoginModule krb5Module = new Krb5LoginModule();
    HashMap sharedState = new HashMap();
    HashMap options = new HashMap();
    options.put(&#34;doNotPrompt&#34;,&#34;false&#34;);
    options.put(&#34;useTicketCache&#34;,&#34;false&#34;);
    options.put(&#34;principal&#34;,&#34;client@US.ORACLE.COM&#34;);
    
    krb5Module.initialize(specificSubject,newKrbCallbackHandler(),sharedState,options);
    boolean retLogin = krb5Module.login();
    krb5Module.commit();
    if(!retLogin)
      throw new Exception(&#34;Kerberos5 adaptor couldn&#39;t retrieve credentials (TGT) from the cache&#34;); 
      
    // to use the TGT from the cache:   
    // options.put(&#34;useTicketCache&#34;,&#34;true&#34;);
    // options.put(&#34;doNotPrompt&#34;,&#34;true&#34;);
    // options.put(&#34;ticketCache&#34;,&#34;C:\\Documents and Settings\\user\\krb5cc&#34;);
    // krb5Module.initialize(specificSubject,null,sharedState,options);
 
 
    // Now we have a valid Subject with Kerberos credentials. The second scenario
    // really starts here:
    // execute driver.connect(...) on behalf of the Subject &#39;specificSubject&#39;:
    Connection conn = 
      (Connection)Subject.doAs(specificSubject, new PrivilegedExceptionAction()
        {
          public Object run()
          {
            Connection con = null;
            Properties prop = new Properties();
            prop.setProperty(AnoServices.AUTHENTICATION_PROPERTY_SERVICES, 
                             &#34;(&#34; + AnoServices.AUTHENTICATION_KERBEROS5 + &#34;)&#34;);
            try
            {
              OracleDriver driver = new OracleDriver();
              con = driver.connect(url, prop);
 
            } catch (Exception except)
            {
              except.printStackTrace();
            }
            return con;
          }
        });
 
    String auth = ((OracleConnection)conn).getAuthenticationAdaptorName();
    System.out.println(&#34;Authentication adaptor=&#34;+auth);
    printUserName(conn);
    conn.close();
  }
  
  void printUserName(Connection conn) throws SQLException
  {
    Statement stmt = null;
    try
    {
      stmt = conn.createStatement();
      ResultSet rs = stmt.executeQuery(&#34;select user from dual&#34;);
      while(rs.next())
        System.out.println(&#34;User is:&#34;+rs.getString(1));
      rs.close();
    }
    finally
    {
      if(stmt != null)
        stmt.close();
    }
  }
}
 
class KrbCallbackHandler implements CallbackHandler
{
 public void handle(Callback[] callbacks) throws IOException, 
                                                 UnsupportedCallbackException
 {
   for (int i = 0; i &lt; callbacks.length; i++)
   {
     if (callbacks[i] instanceof PasswordCallback)
     {
       PasswordCallback pc = (PasswordCallback)callbacks[i];
       System.out.println(&#34;set password to &#39;welcome&#39;&#34;);
       pc.setPassword((new String(&#34;welcome&#34;)).toCharArray());
     } else
     {
       throw new UnsupportedCallbackException(callbacks[i], 
                                              &#34;Unrecognized Callback&#34;);
     }
   }
 }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHEAJII"></a>
<div id="JJDBC28346" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Support for RADIUS</h2>
<p>Oracle Database 11<span class="italic">g</span> Release 1 introduced support for Remote Authentication Dial-In User Service (RADIUS). RADIUS is a client/server security protocol that is most widely known for enabling remote authentication and access. Oracle Advanced Security uses this standard in a client/server network environment to enable use of any authentication method that supports the RADIUS protocol. RADIUS can be used with a variety of authentication mechanisms, including token cards and smart cards.</p>
<ul>
<li>
<p><a href="#CIHGJEEE">Configuring Oracle Database to Use RADIUS</a></p>
</li>
<li>
<p><a href="#CIHBFJCC">Code Example</a></p>
</li>
</ul>
<a id="CIHGJEEE"></a>
<div id="JJDBC28348" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring Oracle Database to Use RADIUS</h3>
<p>Perform the following steps to configure Oracle Database to use RADIUS:</p>
<ol>
<li>
<p>Use the following command to connect to the database:</p>
<pre>SQL&gt; connect system
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Use the following commands to create a new user <code>aso</code> from within a database:</p>
<pre>SQL&gt; create user aso identified externally;
SQL&gt; grant create session to aso;
</pre></li>
<li>
<p>Use the following commands to connect to the database as <code>sysdba</code> and dismount it:</p>
<pre>SQL&gt; connect / as sysdba
SQL&gt; shutdown immediate;
</pre></li>
<li>
<p>Add the following lines to the <code>t_init1.ora</code> file:</p>
<pre>os_authent_prefix = &#34;&#34;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Once the test is over, you need to revert the preceding changes made to the t_init1.ora file.</div>
</li>
<li>
<p>Use the following command to restart the database:</p>
<pre>SQL&gt; startup pfile=?/work/t_init1.ora
</pre></li>
<li>
<p>Modify the <code>sqlnet.ora</code> file so that it contains only these lines:</p>
<pre>sqlnet.authentication_services = ( beq, radius)
sqlnet.radius_authentication = &lt;RADUIUS_SERVER_HOST_NAME&gt;
sqlnet.radius_authentication_port = 1812
sqlnet.radius_authentication_timeout = 120
sqlnet.radius_secret=/home/Jdbc/Security/radius/radius_key
# logging (optional):
trace_level_server=16
trace_directory_server=/scratch/sqlnet/
</pre></li>
<li>
<p>Use the following command to verify that you can connect through SQL*Plus:</p>
<pre>&gt;sqlplus &#39;aso/1234@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oracleserver.mydomain.com)(PORT=5221))
(CONNECT_DATA=(SERVICE_NAME=orcl)))&#39;
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHBFJCC"></a>
<div id="JJDBC28349" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Code Example</h3>
<p>This example demonstrates the new RADIUS authentication feature that is a part of Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC thin driver. You need to have a working setup, that is, a RADIUS server up and running, and an Oracle database server that is configured to use RADIUS authentication. You then need to change the URLs given in the example to compile and run it.</p>
<div id="JJDBC28350" class="example">
<p class="titleinexample"><a id="sthref390"></a>Example 9-5 Using RADIUS Authentication to Connect to the Database</p>
<pre>import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleDriver;
import oracle.net.ano.AnoServices;
public class RadiusJdbcDemo
{  
  String url =&#34;jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)&#34;+
    &#34;(HOST=oracleserver.mydomain.com)(PORT=5221))(CONNECT_DATA=&#34; +
    &#34;(SERVICE_NAME=orcl)))&#34;;
 
  public static void main(String[] arv)
  {
    RadiusJdbcDemo radiusDemo = new RadiusJdbcDemo();
    try
    {
      radiusDemo.connect();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  /*
   * This method attempts to logon to the database using the RADIUS
   * authentication protocol.
   * 
   * It should print the following output to stdout:
   * -----------------------------------------------------
   * Authentication adaptor=RADIUS
   * User is:ASO
   * -----------------------------------------------------
   */
  void connect() throws SQLException
  {
    OracleDriver driver = new OracleDriver();
    Properties prop = new Properties();
    
    prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_AUTHENTICATION_SERVICES,
      &#34;(&#34;+AnoServices.AUTHENTICATION_RADIUS+&#34;)&#34;);
    // The user &#34;aso&#34; needs to be properly setup on the radius server with
    // password &#34;1234&#34;.
    prop.setProperty(&#34;user&#34;,&#34;aso&#34;);
    prop.setProperty(&#34;password&#34;,&#34;1234&#34;);
    
    Connection conn  = driver.connect(url,prop);
    String auth = ((OracleConnection)conn).getAuthenticationAdaptorName();
    System.out.println(&#34;Authentication adaptor=&#34;+auth);
    printUserName(conn);
    conn.close();
  }
 
  
  void printUserName(Connection conn) throws SQLException
  {
    Statement stmt = null;
    try
    {
      stmt = conn.createStatement();
      ResultSet rs = stmt.executeQuery(&#34;select user from dual&#34;);
      while(rs.next())
        System.out.println(&#34;User is:&#34;+rs.getString(1));
      rs.close();
    }
    finally
    {
      if(stmt != null)
        stmt.close();
    }
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDIJDBB"></a>
<div id="JJDBC28351" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref391"></a>Secure External Password Store</h2>
<p>As an alternative for large-scale deployments where applications use password credentials to connect to databases, it is possible to store such credentials in a client-side Oracle wallet. An Oracle wallet is a secure software container that is used to store authentication and signing credentials.</p>
<p>Storing database password credentials in a client-side Oracle wallet eliminates the need to embed user names and passwords in application code, <a id="sthref392"></a>batch jobs, or <a id="sthref393"></a>scripts. This reduces the risk of exposing passwords in the scripts and application code, and simplifies maintenance because you do not need to change your code each time user names and passwords change. In addition, if you do not have to change the application code, then it also becomes easier to enforce password management policies for these user accounts.</p>
<p>You can set the <code>oracle.net.wallet_location</code> connection property to specify the wallet location. The JDBC driver can then retrieve the user name and password pair from this wallet.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN11133" href="../ADMIN/create.htm#ADMIN11133"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about configuring your client to use secure external password store and for information about managing credentials in it</p>
</li>
<li>
<p><a class="olink DBSEG99815" href="../DBSEG/authentication.htm#DBSEG99815"><span class="italic">Oracle Database Security Guide</span></a> for more information about managing the secure external password store for password credentials</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="urls.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="proxya.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>