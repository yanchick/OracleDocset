<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71026"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Advanced%20Queuing"></a><title>Oracle Advanced Queuing</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:37Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="drcp.htm" title="Previous" type="text/html"/>
<link rel="Next" href="dbchgnf.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">36/55</span> <!-- End Header -->
<div id="JJDBC28801" class="chapter"><a id="BABBIAAC"></a>
<h1 class="chapter"><span class="secnum">24</span> Oracle Advanced Queuing</h1>
<p>Oracle Advanced Queuing (AQ) provides database-integrated message queuing functionality. It is built on top of Oracle Streams and optimizes the functions of Oracle Database so that messages can be stored persistently, propagated between queues on different computers and databases, and transmitted using Oracle Net Services, HTTP, and HTTPS. Because Oracle AQ is implemented in database tables, all operational benefits of high availability, scalability, and reliability are also applicable to queue data. This chapter provides information about the Java interface to Oracle AQ.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Oracle Advanced Queuing (AQ) is a feature of the Oracle JDBC Thin driver and is not supported by JDBC OCI driver.</p>
</li>
<li>
<p>In Oracle Database 12<span class="italic">c</span> Release 1 (12.1), support for <code>XMLType</code> queues has been added. Till Oracle Database 11<span class="italic">g</span> Release 1, supported queue types were <code>RAW</code>, <code>ADT</code>, and <code>ANYDATA</code> queue types.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADQUE" href="../ADQUE/toc.htm"><span class="italic">Oracle Database Advanced Queuing User&#39;s Guide</span></a></div>
<p>This chapters covers the following topics:</p>
<ul>
<li>
<p><a href="#BABCGHHB">Functionality and Framework of Oracle Advanced Queuing</a></p>
</li>
<li>
<p><a href="#BABDAGFI">Making Changes to the Database</a></p>
</li>
<li>
<p><a href="#BABGFDCJ">AQ Asynchronous Event Notification</a></p>
</li>
<li>
<p><a href="#BABEAEJB">Creating Messages</a></p>
</li>
<li>
<p><a href="#BGBJEFFB">Enqueuing Messages</a></p>
</li>
<li>
<p><a href="#BABJGBBA">Dequeuing Messages</a></p>
</li>
<li>
<p><a href="#BGBFDDCE">Examples: Enqueuing and Dequeuing</a></p>
</li>
</ul>
<a id="BABCGHHB"></a>
<div id="JJDBC28802" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Functionality and Framework of Oracle Advanced Queuing</h2>
<p>The Oracle JDBC package <code>oracle.jdbc.aq</code> provides a fast Java interface to AQ. This package contains the following:</p>
<ul>
<li>
<p>Classes</p>
<ul>
<li>
<p><code>AQDequeueOptions</code></p>
<p>Specifies the options available for the dequeue operation</p>
</li>
<li>
<p><code>AQEnqueueOptions</code></p>
<p>Specifies the options available for the enqueue operation</p>
</li>
<li>
<p><code>AQFactory</code></p>
<p>Is a factory class for AQ</p>
</li>
<li>
<p><code>AQNotificationEvent</code></p>
<p>Is created whenever a new message is enqueued in a queue for which you have registered your interest</p>
</li>
</ul>
</li>
<li>
<p>Interfaces</p>
<ul>
<li>
<p><code>AQAgent</code></p>
<p>Used to represent and identify a user of the queue or a producer or consumer of the message</p>
</li>
<li>
<p><code>AQMessage</code></p>
<p>Represents a message that is enqueued or dequeued</p>
</li>
<li>
<p><code>AQMessageProperties</code></p>
<p>Contains message properties such as Correlation, Sender, Delay and Expiration, Recipients, and Priority and Ordering</p>
</li>
<li>
<p><code>AQNotificationListener</code></p>
<p>Is a listener interface for receiving AQ notification events</p>
</li>
<li>
<p><code>AQNotificationRegistration</code></p>
<p>Represents your interest in being notified when a new message is enqueued in a particular queue</p>
</li>
</ul>
</li>
</ul>
<p>These classes and interfaces enable you to access an existing queue, create messages, and enqueue and dequeue messages.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle JDBC drivers do <span class="italic">not</span> provide any API to create a queue. Queues must be created through the <code>DBMS_AQADM</code> PL/SQL package.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about the APIs, refer to <a class="olink JAJDB" href="../JAJDB/toc.htm"><span class="italic">Oracle Database JDBC Java API Reference</span></a>.</div>
</div>
<!-- class="sect1" -->
<a id="BABDAGFI"></a>
<div id="JJDBC28803" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Making Changes to the Database</h2>
<p>The code snippets used in this chapter assume that user <code>HR</code> is connecting to the database. Therefore, in the database, you must grant the following privileges to <code>HR</code>:</p>
<pre>GRANT EXECUTE ON DBMS_AQ to HR;
GRANT EXECUTE ON DBMS_AQADM to HR;
GRANT AQ_ADMINISTRATOR_ROLE TO HR;
GRANT ADMINISTER DATABASE TRIGGER TO HR;
</pre>
<p>Before you start enqueuing and dequeuing messages, you must have queues in the Database. For this, you must perform the following:</p>
<ol>
<li>
<p>Create a queue table in the following way:</p>
<pre>BEGIN
    DBMS_AQADM.CREATE_QUEUE_TABLE(
            QUEUE_TABLE =&gt;&#39;HR.RAW_SINGLE_QUEUE_TABLE&#39;,
            QUEUE_PAYLOAD_TYPE =&gt;&#39;RAW&#39;,
            COMPATIBLE =&gt; &#39;10.0&#39;);
END;
</pre></li>
<li>
<p>Create a queue in the following way:</p>
<pre>BEGIN
    DBMS_AQADM.CREATE_QUEUE(
            QUEUE_NAME =&gt;&#39;HR.RAW_SINGLE_QUEUE&#39;,
            QUEUE_TABLE =&gt;&#39;HR.RAW_SINGLE_QUEUE_TABLE&#39;,
END;
</pre></li>
<li>
<p>Start the queue in the following way:</p>
<pre>BEGIN
    DBMS_AQADM.START_QUEUE(
 &#39;HR.RAW_SINGLE_QUEUE&#39;,
END;
</pre></li>
</ol>
<p>It is a good practice to stop the queue and remove the queue tables from the database. You can perform this in the following way:</p>
<ol>
<li>
<p>Stop the queue in the following way:</p>
<pre>BEGIN
    DBMS_AQADM.STOP_QUEUE(
 HR.RAW_SINGLE_QUEUE&#39;,
END;
</pre></li>
<li>
<p>Remove the queue tables from the database in the following way:</p>
<pre>BEGIN
    DBMS_AQADM.DROP_QUEUE_TABLE(
            QUEUE_TABLE =&gt;&#39;HR.RAW_SINGLE_QUEUE_TABLE&#39;,
            FORCE =&gt; TRUE
END;
</pre></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BABGFDCJ"></a>
<div id="JJDBC28804" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">AQ Asynchronous Event Notification</h2>
<p>A JDBC application can do the following:</p>
<ul>
<li>
<p>Register to the AQ namespace and receive notification when an enqueue occurs. This can be performed in the following way:</p>
<pre> public AQNotificationRegistration registerForAQEvents(
    OracleConnection conn,
    String queueName) throws SQLException
  {
    Properties globalOptions = new Properties();
    String[] queueNameArr = new String[1];
    queueNameArr[0] = queueName;
    Properties[] opt = new Properties[1];
    opt[0] = new Properties();
    opt[0].setProperty(OracleConnection.NTF_AQ_PAYLOAD,&#34;true&#34;);
    AQNotificationRegistration[] regArr = conn.registerAQNotification(queueNameArr,opt,globalOptions);
    AQNotificationRegistration reg = regArr[0];
    return reg;
  }
</pre></li>
<li>
<p>Register subscriptions to database events and receive notifications when the events are triggered</p>
<p>Registered clients are notified asynchronously when events are triggered or on an explicit AQ enqueue (or a new message is enqueued in a queue for which you have registered your interest). Clients do not need to be connected to a database.</p>
<p>The following code snippet shows how to subscribe to database events and receive notifications when the events are triggered:</p>
<pre>class DemoAQRawQueueListener implements AQNotificationListener
{
  OracleConnection conn;
  String queueName;
  String typeName;
  int eventsCount = 0;
  
  public DemoAQRawQueueListener(String _queueName, String _typeName)
   throws SQLException
  {
   queueName = _queueName;
   typeName = _typeName;
   conn = (OracleConnection)DriverManager.getConnection 
     (DemoAQRawQueue.URL, DemoAQRawQueue.USERNAME, DemoAQRawQueue.PASSWORD);
  }
  
  public void onAQNotification(AQNotificationEvent e)
  {
    try
    {
     AQDequeueOptions deqopt = new AQDequeueOptions();
     deqopt.setRetrieveMessageId(true);
     if(e.getConsumerName() != null)
       deqopt.setConsumerName(e.getConsumerName());
     if((e.getMessageProperties()).getDeliveryMode() 
        == AQMessageProperties.DeliveryMode.BUFFERED)
     {
       deqopt.setDeliveryMode(AQDequeueOptions.DEQUEUE_BUFFERED);
       deqopt.setVisibility(AQDequeueOptions.DEQUEUE_IMMEDIATE);
     }
     AQMessage msg = conn.dequeue(queueName,deqopt,typeName);
     byte[] msgId = msg.getMessageId();
     if(msgId != null)
     {
       String mesgIdStr = DemoAQRawQueue.byteBufferToHexString(msgId,20);
       System.out.println(&#34;ID of message dequeued = &#34;+mesgIdStr);
     }
     System.out.println(msg.getMessageProperties().toString());
     byte[] payload = msg.getPayload();
     if(typeName.equals(&#34;RAW&#34;))
     {
       String payloadStr = new String(payload,0,10);
       System.out.println(&#34;payload.length=&#34;+payload.length+&#34;, value=&#34;+payloadStr);
     }
    }
    catch(SQLException sqlex)
    {
     System.out.println(sqlex.getMessage());
    }
    eventsCount++; 
  }
  public int getEventsCount()
  {
    return eventsCount;
  }
  public void closeConnection() throws SQLException
  {
    conn.close();
  }
}
</pre></li>
<li>
<p>Register to the listener in the following way:</p>
<pre>AQNotificationRegistration reg = registerForAQEvents(conn,queueName+&#34;:BLUE&#34;);
DemoAQRawQueueListener demo_li = new DemoAQRawQueueListener(queueName,queueType);
reg.addListener(demo_li);
</pre></li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABEAEJB"></a>
<div id="JJDBC28805" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating Messages</h2>
<p>Before you enqueue a message, you must create the message. An instance of a class implementing the <code>AQMessage</code> interface represents an AQ message. An AQ message contains properties (metadata) and a payload (data). Perform the following to create an AQ message:</p>
<ol>
<li>
<p>Create an instance of <code>AQMessageProperties</code> in the following way:</p>
<pre>AQMessageProperties msgprop = AQFactory.createAQMessageProperties();
</pre></li>
<li>
<p>Set the property attributes in the following way:</p>
<pre>msgprop.setCorrelation(&#34;mycorrelation&#34;);
msgprop.setExceptionQueue(&#34;MY_EXCEPTION_QUEUE&#34;);
msgprop.setExpiration(0);
msgprop.setPriority(1);
</pre></li>
<li>
<p>Create the AQ message using the <code>AQMessageProperties</code> object in the following way:</p>
<pre>AQMessage mesg = AQFactory.createAQMessage(msgprop);
</pre></li>
<li>
<p>Set the payload in the following way:</p>
<pre>byte[] rawPayload = &#34;Example_Payload&#34;.getBytes();
mesg.setPayload(new oracle.sql.RAW(rawPayload));
</pre></li>
</ol>
<p class="subhead2"><a id="JJDBC28806"></a>AQ Message Properties</p>
<p>The properties of the AQ message are represented by an instance of the <code>AQMessageProperties</code> interface. You can set or get the following message properties:</p>
<ul>
<li>
<p>Dequeue Attempts Count: Specifies the number of attempts that have been made to dequeue the message. This property cannot be set.</p>
</li>
<li>
<p>Correlation: Is an identifier supplied by the producer of the message at the time of enqueuing the message.</p>
</li>
<li>
<p>Delay: Is the number of seconds for which the message is in the <code>WAITING</code> state. After the specified delay, the message is in the <code>READY</code> state and available for dequeuing. Dequeuing a message by using the message ID (msgid) overrides the delay specification.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Delay is not supported with buffered messaging.</div>
</li>
<li>
<p>Delivery Mode: Specifies whether the message is a buffered message or a persistent message. This property cannot be set.</p>
</li>
<li>
<p>Enqueue Time: Specifies the time at which the message was enqueued. This value is determined by the system and cannot be set by the user.</p>
</li>
<li>
<p>Exception Queue: Specifies the name of the queue into which the message is moved if it cannot be processed successfully. Messages are moved in two cases:</p>
<ul>
<li>
<p>The number of unsuccessful dequeue attempts has exceeded <code>max_retries</code>.</p>
</li>
<li>
<p>The message has expired.</p>
</li>
</ul>
</li>
<li>
<p>Expiration: Is the number of seconds during which the message is available for dequeuing, starting from when the message reaches the <code>READY</code> state. If the message is not dequeued before it expires, then it is moved to the exception queue in the <code>EXPIRED</code> state.</p>
</li>
<li>
<p>Message State: Specifies the state of the message at the time of dequeuing the message. This property cannot be set.</p>
</li>
<li>
<p>Previous Queue Message ID: Is the ID of the message in the last queue that generated the current message. When a message is propagated from one queue to another, this attribute identifies the ID of the queue from which it was last propagated. This property cannot be set.</p>
</li>
<li>
<p>Priority: Specifies the priority of the message. It can be any integer including negative integers; the smaller the value, the higher the priority.</p>
</li>
<li>
<p>Recipient list: Is a list of <code>AQAgent</code> objects that represent the recipients. The default recipients are the queue subscribers. This parameter is valid only for multiple-consumer queues.</p>
</li>
<li>
<p>Sender: Is an identifier specified by the producer at the time of enqueuing the message. It is an instance of <code>AQAgent</code>.</p>
</li>
<li>
<p>Transaction group: Specifies the transaction group of the message for transaction-grouped queues. It is set after a successful call to the <code>dequeueArray</code> method.</p>
</li>
</ul>
<p class="subhead2"><a id="JJDBC28807"></a>AQ Message Payload</p>
<p>Depending on the type of the queue, the payload of the AQ message can be specified using the <code>setPayload</code> method of the <code>AQMessage</code> interface. The following code snippet illustrates how to set the payload:</p>
<pre>...
byte[] rawPayload = &#34;Example_Payload&#34;.getBytes();
mesg.setPayload(new oracle.sql.RAW(rawPayload));
...
</pre>
<p>You can retrieve the payload of an AQ message using the <code>getPayload</code> method or the appropriate <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>Payload</code> method in the following way:</p>
<pre>byte[] payload = mesg.getPayload();
</pre>
<p>These methods are defined in the <code>AQMessage</code> interface.</p>
</div>
<!-- class="sect1" -->
<div id="JJDBC28808" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref851"></a>
<h2 class="sect1">Example: Creating a Message and Setting a Payload</h2>
<p>This section provides an example that illustrates how to create a message and set a payload.</p>
<div id="JJDBC28809" class="example">
<p class="titleinexample"><a id="sthref852"></a>Example 24-1 Creating a Message and Setting a Payload</p>
<p>This example shows how to Create an instance of <code>AQMessageProperties</code>, set the property attributes, create the AQ message, and set the payload.</p>
<pre> AQMessageProperties msgprop = AQFactory.createAQMessageProperties();
    msgprop.setCorrelation(&#34;mycorrelation&#34;);
    msgprop.setExceptionQueue(&#34;MY_EXCEPTION_QUEUE&#34;);
    AQAgent ag = AQFactory.createAQAgent();
    ag.setName(&#34;MY_SENDER_AGENT_NAME&#34;);
    ag.setAddress(&#34;MY_SENDER_AGENT_ADDRESS&#34;);
    msgprop.setSender(ag);
    <span class="bold">// handle multi consumer case:</span>
    if(recipients != null)
      msgprop.setRecipientList(recipients);
    System.out.println(msgprop.toString());
    AQMessage mesg = AQFactory.createAQMessage(msgprop);
byte[] rawPayload = &#34;Example_Payload&#34;.getBytes();
mesg.setPayload(new oracle.sql.RAW(rawPayload));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BGBJEFFB"></a>
<div id="JJDBC28810" class="sect1">
<h2 class="sect1">Enqueuing Messages</h2>
<p>After you create a message and set the message properties and payload, you can enqueue the message using the <code>enqueue</code> method of the <code>OracleConnection</code> interface. Before you enqueue the message, you can specify some enqueue options. The <code>AQEnqueueOptions</code> class enables you to specify the following enqueue options:</p>
<ul>
<li>
<p>Delivery mode: Specifies the delivery mode. Delivery mode can be set to either persistent (<code>ENQUEUE_PERSISTENT</code>) or buffered (<code>ENQUEUE_BUFFERED</code>).</p>
</li>
<li>
<p>Retrieve Message ID: Specifies whether or not the message ID has to be retrieved from the server when the message has been enqueued. By default, the message ID is not retrieved.</p>
</li>
<li>
<p>Transformation: Specifies a transformation that will be applied before enqueuing the message. The return type of the transformation function must match the type of the queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Transformations must be created in PL/SQL using <code>DBMS_TRANSFORM.CREATE_TRANSFORMATION(...)</code>.</div>
</li>
<li>
<p>Visibility: Specifies the transactional behavior of the enqueue request. The default value for this option is <code>ENQUEUE_ON_COMMIT</code>. It indicates that the enqueue operation is part of the current transaction. <code>ENQUEUE_IMMEDIATE</code> indicates that the enqueue operation is an autonomous transaction, which commits at the end of the operation. For buffered messaging, you must use <code>ENQUEUE_IMMEDIATE</code>.</p>
</li>
</ul>
<p>The following code snippet illustrates how to set the enqueue options and enqueue the message:</p>
<pre>...
AQEnqueueOptions opt = new AQEnqueueOptions();opt.setRetrieveMessageId(true);
conn.enqueue(queueName, opt, mesg);
...
</pre></div>
<!-- class="sect1" -->
<a id="BABJGBBA"></a>
<div id="JJDBC28811" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Dequeuing Messages</h2>
<p>Enqueued messages can be dequeued using the <code>dequeue</code> method of the <code>OracleConnection</code> interface. Before you dequeue a message you must set the dequeue options. The <code>AQDequeueOptions</code> class enables you to specify the following dequeue options:</p>
<ul>
<li>
<p>Condition: Specifies a conditional expression based on the message properties, the message data properties, and PL/SQL functions. A dequeue condition is specified as a <code>Boolean</code> expression using syntax similar to the <code>WHERE</code> clause of a SQL query.</p>
</li>
<li>
<p>Consumer name: If specified, only the messages matching the consumer name are accessed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the queue is a single-consumer queue, do <span class="italic">not</span> set this option.</div>
</li>
<li>
<p>Correlation: Specifies a correlation criterion (or search criterion) for the dequeue operation.</p>
</li>
<li>
<p>Delivery Filter: Specifies the type of message to be dequeued. You dequeue buffered messages only (<code>DEQUEUE_BUFFERED</code>) or persistent messages only (<code>DEQUEUE_PERSISTENT</code>), which is the default, or both (<code>DEQUEUE_PERSISTENT_OR_BUFFERED</code>).</p>
</li>
<li>
<p>Dequeue Message ID: Specifies the message identifier of the message to be dequeued. This can be used to dequeue a unique message whose ID is known.</p>
</li>
<li>
<p>Dequeue mode: Specifies the locking behavior associated with the dequeue operation. It can take one of the following values:</p>
<ul>
<li>
<p><code>DequeueMode.BROWSE</code>: Message is dequeued without acquiring any lock.</p>
</li>
<li>
<p><code>DequeueMode.LOCKED</code>: Message is dequeued with a write lock that lasts for the duration of the transaction.</p>
</li>
<li>
<p><code>DequeueMode.REMOVE</code>: (default) Message is dequeued and deleted. The message can be retained in the queue based on the retention properties.</p>
</li>
<li>
<p><code>DequeueMode.REMOVE_NO_DATA</code>: Message is marked as updated or deleted.</p>
</li>
</ul>
</li>
<li>
<p>Maximum Buffer Length: Specifies the maximum number of bytes that will be allocated when dequeuing a message from a <code>RAW</code> queue. The default maximum is <code>DEFAULT_MAX_PAYLOAD_LENGTH</code> but it can be changed to any other nonzero value. If the buffer is not large enough to contain the entire message, then the exceeding bytes will be silently ignored.</p>
</li>
<li>
<p>Navigation: Specifies the position of the message that will be retrieved. It can take one of the following values:</p>
<ul>
<li>
<p><code>NavigationOption.FIRST_MESSAGE</code>: The first available message matching the search criteria is dequeued.</p>
</li>
<li>
<p><code>NavigationOption.NEXT_MESSAGE</code>: (default) The next available message matching the search criteria is dequeued. If the previous message belongs to a message group, then the next available message matching the search criteria in the message group is dequeued.</p>
</li>
<li>
<p><code>NavigationOption.NEXT_TRANSACTION</code>: Messages in the current transaction group are skipped, and the first message of the next transaction group is dequeued. This setting can be used <span class="italic">only</span> if message grouping is enabled for the queue.</p>
</li>
</ul>
</li>
<li>
<p>Retrieve Message ID: Specifies whether or not the message identifier of the dequeued message needs to be retrieved. By default, it is not retrieved.</p>
</li>
<li>
<p>Transformation: Specifies a transformation that will be applied after dequeuing the message. The source type of the transformation must match the type of the queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Transformations must be created in PL/SQL using <code>DBMS_TRANSFORM.CREATE_TRANSFORMATION(...)</code>.</div>
</li>
<li>
<p>Visibility: Specifies whether or not the message is dequeued as part of the current transaction. It can take one of the following values:</p>
<ul>
<li>
<p><code>VisibilityOption.ON_COMMIT</code>: (default) The dequeue operation is part of the current transaction.</p>
</li>
<li>
<p><code>VisibilityOption.IMMEDIATE</code>: The dequeue operation is an autonomous transaction that commits at the end of the operation.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Visibility option is ignored in the <code>DequeueMode.BROWSE</code> dequeue mode. If the delivery filter is <code>DEQUEUE_BUFFERED</code> or <code>DEQUEUE_PERSISTENT_OR_BUFFERED</code>, then this option <span class="italic">must</span> be set to <code>VisibilityOption.IMMEDIATE</code>.</div>
</li>
<li>
<p>Wait: Specifies the wait time for the dequeue operation, if none of the messages matches the search criteria. The default value is <code>DEQUEUE_WAIT_FOREVER</code> indicating that the operation waits forever. If set to <code>DEQUEUE_NO_WAIT</code>, then the operation does not wait. If a number is specified, then the dequeue operation waits for the specified number of seconds.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use <code>DEQUEUE_WAIT_FOREVER</code>, then the dequeue operation will not return until a message that matches the search criterion is available in the queue. However, you can interrupt the dequeue operation by calling the <code>cancel</code> method on the <code>OracleConnection</code> object.</div>
</li>
</ul>
<p>The following code snippet illustrates how to set the dequeue options and dequeue the message:</p>
<pre>...
AQDequeueOptions deqopt = new AQDequeueOptions();
deqopt.setRetrieveMessageId(true);
deqopt.setConsumerName(consumerName);
AQMessage msg = conn.dequeue(queueName,deqopt,queueType);
</pre></div>
<!-- class="sect1" -->
<a id="BGBFDDCE"></a>
<div id="JJDBC28812" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Examples: Enqueuing and Dequeuing</h2>
<p>This section provides a few examples that illustrate how to enqueue and dequeue messages.</p>
<p><a href="#BABJCHGG">Example 24-2</a> illustrates how to enqueue a message, and <a href="#BABGEEGE">Example 24-3</a> illustrates how to dequeue a message.</p>
<div id="JJDBC28813" class="example">
<p class="titleinexample"><a id="BABJCHGG"></a>Example 24-2 Enqueuing a Single Message</p>
<p>This example illustrates how to obtain access to a queue, create a message, and enqueue it.</p>
<pre>AQMessageProperties msgprop = AQFactory.createAQMessageProperties();
msgprop.setPriority(1);
msgprop.setExceptionQueue(&#34;EXCEPTION_QUEUE&#34;);
msgprop.setExpiration(0);
AQAgent agent = AQFactory.createAQAgent();
agent.setName(&#34;AGENTNAME&#34;);
agent.setAddress(&#34;AGENTADDRESS&#34;);
msgprop.setSender(agent);
AQMessage mesg = AQFactory.createAQMessage(msgprop);
mesg.setPayload(buffer); // where buffer is a byte array (for a RAW queue)
AQEnqueueOptions options = new AQEnqueueOptions();
conn.enqueue(&#34;HR.MY_QUEUE&#34;, options, mesg);
</pre></div>
<!-- class="example" -->
<div id="JJDBC28814" class="example">
<p class="titleinexample"><a id="BABGEEGE"></a>Example 24-3 Dequeuing a Single Message</p>
<p>This example illustrates how to obtain access to a queue, set the dequeue options, and dequeue the message.</p>
<pre>AQDequeueOptions options = new AQDequeueOptions();
options.setDeliveryFilter(AQDequeueOptions.DeliveryFilter.BUFFERED);
AQMessage mesg = conn.dequeue(&#34;HR.MY_QUEUE&#34;, options, &#34;RAW&#34;);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="drcp.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="dbchgnf.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>