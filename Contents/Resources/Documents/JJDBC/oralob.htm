<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71005"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Working%20with%20LOBs%20and%20BFILEs"></a><title>Working with LOBs and BFILEs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:37Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oraoot.htm" title="Previous" type="text/html"/>
<link rel="Next" href="oraoor.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/55</span> <!-- End Header -->
<div id="JJDBC15000" class="chapter"><a id="g1070326"></a>
<h1 class="chapter"><span class="secnum">14</span> Working with LOBs and BFILEs</h1>
<p><a id="i1024175"></a>This chapter describes how to use Java Database Connectivity (JDBC) to access and manipulate large objects (LOB) using either the data interface or the locator interface.</p>
<p>In previous releases, Oracle JDBC drivers required Oracle extensions to standard JDBC types to perform many operations in the Oracle Database. JDBC 3.0 reduced the requirement of using Oracle extensions and JDBC 4.0 nearly eliminated this limitation. Refer to the Javasoft Javadoc for the <code>java.sql</code> and <code>javax.sql</code> packages, and to the Oracle JDBC Javadoc for details on Oracle extensions.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CHDHIBFF">The LOB Data Types</a></p>
</li>
<li>
<p><a href="#CHDDGGJD">Oracle SecureFiles</a></p>
</li>
<li>
<p><a href="#CHDGJJDD">Data Interface for LOBs</a></p>
</li>
<li>
<p><a href="#CHDCDAJH">LOB Locator Interface</a></p>
</li>
<li>
<p><a href="#i1060097">Working With Temporary LOBs</a></p>
</li>
<li>
<p><a href="#CHDEHFFH">Opening Persistent LOBs with the Open and Close Methods</a></p>
</li>
<li>
<p><a href="#CHDDFJEE">Working with BFILEs</a></p>
</li>
</ul>
<a id="CHDHIBFF"></a>
<div id="JJDBC28530" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">The LOB Data Types</h2>
<p>Prior to Oracle Database 10<span class="italic">g</span>, the maximum size of a LOB was 2^32 bytes. This restriction has been removed since Oracle Database 10<span class="italic">g</span>, and the maximum size is limited to the size of available physical storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB45125" href="../ADLOB/adlob_intro.htm#ADLOB45125"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a></div>
<p>The Oracle database supports the following four LOB data types:</p>
<ul>
<li>
<p>Binary large object (BLOB)</p>
<p>This data type is used for unstructured binary data.</p>
</li>
<li>
<p>Character large object (CLOB)</p>
<p>This data type is used for character data.</p>
</li>
<li>
<p>National character large object (NCLOB)</p>
<p>This data type is used for national character data.</p>
</li>
<li>
<p>BFILE</p>
<p>This data type is used for large binary data objects stored in operating system files, outside of database tablespaces.</p>
</li>
</ul>
<p>BLOBs, CLOBs, and NCLOBs are stored persistently in a database tablespace and all operations performed on these data types are under transaction control.</p>
<p>BFILE is an Oracle proprietary data type that provides read-only access to data located outside the database tablespaces on tertiary storage devices, such as hard disks, network mounted files systems, CD-ROMs, PhotoCDs, and DVDs. BFILE data is not under transaction control and is not stored by database backups.</p>
<p>The PL/SQL language supports the LOB data types and the JDBC interface allows passing IN parameters to PL/SQL procedures or functions, and retrieval of OUT parameters or returns. PL/SQL uses value semantics for all data types including LOBs, but reference semantics only for BFILE.</p>
</div>
<!-- class="sect1" -->
<a id="CHDDGGJD"></a>
<div id="JJDBC28531" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle SecureFiles</h2>
<p>Oracle Database 11<span class="italic">g</span> Release 1 (11.1) introduced Oracle SecureFiles, a completely new storage for LOBs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../ADLOB/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a></div>
<p>Following Features of Oracle SecureFiles are transparently available to JDBC programs through the existing APIs:</p>
<ul>
<li>
<p>SecureFile compression enables users to compress data to save disk space.</p>
</li>
<li>
<p>SecureFile encryption introduces a new encryption facility that allows for random reads and writes of the encrypted data.</p>
</li>
<li>
<p>Deduplication enables Oracle database to automatically detect duplicate LOB data and conserve space by storing only one copy of data.</p>
</li>
<li>
<p>LOB data path optimization includes logical cache above storage layer and new caching modes.</p>
</li>
<li>
<p>High performance space management.</p>
</li>
</ul>
<p>The <code>setLobOptions</code> and <code>getLobOptions</code> APIs are described in the PL/SQL Packages and Types Reference, and may be accessed from JDBC through callable statements.</p>
<p>Following Oracle SecureFiles features are implemented in the database through updates to the existing APIs:</p>
<ul>
<li>
<p><a href="#CHDGFDFC">isSecureFile Method</a></p>
</li>
<li>
<p><a href="#CHDFEBJD">Zero-Copy I/O for Oracle SecureFiles</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDGFDFC"></a><a id="JJDBC28532"></a>isSecureFile Method</p>
<p>You can check whether or not your <code>BLOB</code> or <code>CLOB</code> data uses Oracle SecureFile storage. To achieve this, use the following method from <code>oracle.jdbc.OracleBlob</code> or <code>oracle.jdbc.OracleClob</code> class:</p>
<pre>public boolean isSecureFile() throws SQLException
</pre>
<p>If this method returns <code>true</code>, then your data uses SecureFile storage.</p>
<p class="subhead2"><a id="CHDFEBJD"></a><a id="JJDBC28533"></a>Zero-Copy I/O for Oracle SecureFiles</p>
<p>With the release of Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC Drivers, the performance of Oracle SecureFiles operations is greatly improved because Oracle Net Services now uses zero-copy I/O framework for better buffer management.</p>
<p>Oracle Database 11<span class="italic">g</span> Release 2 introduced a new connection property <code>oracle.net.useZeroCopyIO</code>. This property can be used to enable or disable the zero-copy I/O protocol. This connection property is defined as the following constant: <code>OracleConnection.CONNECTION_PROPERTY_THIN_NET_USE_ZERO_COPY_IO</code>. If you want to disable the zero-copy I/O framework, then set the value of this connection property to <code>false</code>. By default, the value of this connection property is <code>true</code>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDGJJDD"></a>
<div id="JJDBC28534" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Data Interface for LOBs</h2>
<p>This section describes the following topics:</p>
<ul>
<li>
<p><a href="#CHDIGHBF">Streamlined Mechanism</a></p>
</li>
<li>
<p><a href="#CHDGEIHF">Input</a></p>
</li>
<li>
<p><a href="#CHDCDFAC">Output</a></p>
</li>
<li>
<p><a href="#CHDEAACE">CallableSatement and IN OUT Parameter</a></p>
</li>
<li>
<p><a href="#CHDHHHEG">Size Limitations</a></p>
</li>
</ul>
<a id="CHDIGHBF"></a>
<div id="JJDBC28535" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Streamlined Mechanism</h3>
<p>The Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC drivers provide a streamlined mechanism for writing and reading the entire LOB contents. This is referred to as the data interface. The data interface uses standard JDBC methods such as <code>getString</code> and <code>setBytes</code> to read and write LOB data. It is simpler to code and faster in many cases. Unlike the standard <code>java.sql.Blob</code>, <code>java.sql.Clob</code> and <code>java.sql.NClob</code> interfaces, it does not provide random access capability, that is, it does not use LOB locator and cannot access data beyond 2147483648 elements.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGEIHF"></a>
<div id="JJDBC28536" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Input</h3>
<p>In Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the <code>setBytes</code>, <code>setBinaryStream</code>, <code>setString</code>, <code>setCharacterStream</code>, and <code>setAsciiStream</code> methods of <code>PreparedStatement</code> are extended to enhance the ability to work with <code>BLOB</code>, <code>CLOB</code>, and <code>NCLOB</code> target columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This enhancement does not affect the <code>BFILE</code> data because it is read-only.</div>
<p>For the JDBC Oracle Call Interface (OCI) and Thin drivers, there is no limitation on the size of the <code>byte</code> array or <code>String</code>, and no limitation on the length specified for the stream functions, except the limits imposed by the Java language.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In Java, the array size is limited to positive Java <code>int</code> or 2147483648 elements.</div>
<p>For the server-side internal driver, currently there is a limitation of 32767 bytes for operations on SQL statements, such as an <code>INSERT</code> statement. This limitation does not apply for PL/SQL statements. There is a simple workaround for an <code>INSERT</code> statement, where it is wrapped in a PL/SQL block in the following way:</p>
<pre>BEGIN
 INSERT id, c INTO clob_tab VALUES(?,?);
END;
</pre>
<p>You must bear in mind the following automatic switching of the input mode for large data:</p>
<ul>
<li>
<p>There are three input modes as follows:</p>
<ul>
<li>
<p>Direct binding</p>
<p>This binding is limited in size but most efficient. It places the data for all input columns inline in the block of data sent to the server. All data, including multiple executions of a batch, is sent in a single network operation.</p>
</li>
<li>
<p>Stream binding</p>
<p>This binding places data at the end. It limits batch size to one and may require multiple round trips to complete.</p>
</li>
<li>
<p>LOB binding</p>
<p>This binding creates a temporary LOB, copies data to the LOB, and binds the LOB locator. The temporary LOB is automatically freed after execution. The operation to create the temporary LOB and then to writing to the LOB requires multiple round trips. The input of the locators may be batched.</p>
</li>
</ul>
</li>
<li>
<p>For SQL statements:</p>
<ul>
<li>
<p>The <code>setBytes</code> and <code>setBinaryStream</code> methods use direct binding for data less than 32767 bytes.</p>
</li>
<li>
<p>The <code>setBytes</code> and <code>setBinaryStream</code> methods use stream binding for data larger than 32767 bytes.</p>
</li>
<li>
<p>In JDBC 4.0 has introduced new forms of the <code>setAsciiStream</code>, <code>setBinaryStream</code>, and <code>setCharacterStream</code> methods. The form, where the methods take a long argument as length, uses LOB binding for length larger than 2147483648. The form, where the length is not specified, always uses LOB binding.</p>
</li>
<li>
<p>The <code>setString</code>, <code>setCharacterStream</code>, and <code>setAsciiStream</code> methods use direct binding for data smaller than 32767 characters.</p>
</li>
<li>
<p>The <code>setString</code>, <code>setCharacterStream</code>, and <code>setAsciiStream</code> methods use stream binding for data larger than 32766 characters.</p>
</li>
<li>
<p>The new form of <code>setCharacterStream</code> method, which takes a <code>long</code> argument for length, uses LOB binding for length larger than 2147483647, in JDBC 4.0. The form, where the length is not specified, always uses LOB binding.</p>
</li>
</ul>
</li>
<li>
<p>PL/SQL statements</p>
<ul>
<li>
<p>The <code>setBytes</code> and <code>setBinary</code> stream methods use direct binding for data less than 32767 bytes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the underlying Database is Oracle Database release 10.x, then this data size limit is 32512 bytes, though you are working with Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC drivers.</div>
</li>
<li>
<p>The <code>setBytes</code> and <code>setBinaryStream</code> methods use LOB binding for data larger than 32766 bytes.</p>
</li>
<li>
<p>The <code>setString</code>, <code>setCharacterStream</code>, and <code>setAsciiStream</code> methods use direct binding for data smaller than 32767 bytes in the database character set.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the underlying Database is Oracle Database release 10.x, then this data size limit is 32512 bytes, though you are working with Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC drivers.</div>
</li>
<li>
<p>The <code>setString</code>, <code>setCharacterStream</code>, and <code>setAsciiStream</code> methods use LOB binding for data larger than 32766 bytes in the database character set.</p>
</li>
</ul>
</li>
</ul>
<p>The automatic switching of the input mode for large data has impact on certain programs. Previously, you used to get <code>ORA-17157</code> errors for attempts to use <code>setString</code> method for <code>String</code> values larger than 32766 characters. Now, depending on the type of the target parameter, an error may occur while the statement is executed or the operation may succeed.</p>
<p>Another impact is that the automatic switching may result in additional server-side parsing to adapt to the change in the parameter type. This would result in a performance effect, if the data sizes vary above and below the limit for repeated executions of the statement. Switching to the stream modes will effect batching as well.</p>
<p class="subhead2"><a id="JJDBC28537"></a>Forcing conversion to LOB</p>
<p>The <code>setBytesForBlob</code> and <code>setStringForClob</code> methods, present in the <code>oracle.jdbc.OraclePreparedStatement</code> interface, use LOB binding for any data size.</p>
<p>The <code>SetBigStringTryClob</code> connection property of Oracle Database 10<span class="italic">g</span> Release 1 is no longer used or needed.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCDFAC"></a>
<div id="JJDBC28538" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Output</h3>
<p>The <code>getBytes</code>, <code>getBinaryStream</code>, <code>getString</code>, <code>getCharacterStream</code>, and <code>getAsciiStream</code> methods of <code>ResultSet</code> and <code>CallableStatement</code> are extended to work with <code>BLOB</code>, <code>CLOB</code>, and <code>BFILE</code> columns or <code>OUT</code> parameters. These methods work for any <code>LOB</code> of length less than 2147483648.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>getString</code> and <code>getNString</code> methods cannot be used for retrieving BLOB column values. For more information about <code>getNString</code> method, refer to <a href="global.htm#BABJFAGA">New Methods for National Character Set Type Data in JDK 6</a>.</div>
<p>The data interface operates by accessing the <code>LOB</code> locators within the driver and is transparent to application programming. It works with any supported version of the database, that is, Oracle Database 10.1.x and later. For Oracle Database 11<span class="italic">g</span> Release 1 or later versions, LOB prefetching may be used to reduce or eliminate any additional database round trips required. For more information, refer to <a href="#CHDGDGBA">LOB prefetching</a>.</p>
<p>You can read <code>BFILE</code> data and read and write <code>BLOB</code> or <code>CLOB</code> data using the <code>defineColumnType</code> method. To read, use <code>defineColumnType(nn,</code> <code>Types.LONGVARBINARY)</code> or <code>defineColumnType(nn,Types.LONGVARCHAR)</code> method on the column. This produces a direct stream on the data as if it were a <code>LONG RAW</code> or <code>LONG</code> column. This technique is limited to Oracle Database 10<span class="italic">g</span> release 1 (10.1) and later.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEAACE"></a>
<div id="JJDBC28539" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">CallableSatement and IN OUT Parameter</h3>
<p>It is a PL/SQL requirement that the Java types used as input and output for an IN OUT parameter must be the same. The automatic switching of types done by the extensions described in this chapter may cause problems with this.</p>
<p>Consider that you have an <code>IN</code> <code>OUT</code> <code>CLOB</code> parameter of a stored procedure and you wish to use <code>setString</code> method for setting the value for this parameter. For any <code>IN</code> and <code>OUT</code> parameter, the binds must be of the same type. The automatic switching of the input mode will cause problems unless you are sure of the data sizes. For example, if it is known that neither the input nor output data will ever be larger than 32766 bytes, then you could use <code>setString</code> method for the input parameter and register the <code>OUT</code> parameter as <code>Types.VARCHAR</code> and use <code>getString</code> method for the output parameter.</p>
<p>A better solution is to change the stored procedure to have separate <code>IN</code> and <code>OUT</code> parameters. That is, if you have:</p>
<pre>CREATE PROCEDURE clob_proc( c IN OUT CLOB );
</pre>
<p>then, change it to:</p>
<pre>CREATE PROCEDURE clob_proc( c_in IN CLOB, c_out OUT CLOB );
</pre>
<p>Another workaround is to use a container block to make the call. The <code>clob_proc</code> procedure can be wrapped with a Java String to use for the <code>prepareCall</code> statement, as follows:</p>
<pre>&#34;DECLARE c_temp; BEGIN c_temp := ?; clob_proc( c_temp); ? := c_temp; END;&#34;
</pre>
<p>In either case, you may use the <code>setString</code> method on the first parameter and the <code>registerOutParameter</code> method with <code>Types.CLOB</code> on the second.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHHHEG"></a>
<div id="JJDBC28540" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Size Limitations</h3>
<p>Be aware of the effect on the performance of the Java memory management system due to creation of very large <code>byte</code> array or <code>String</code>. Read the information provided by your Java virtual machine (JVM) vendor about the impact of very large data elements on memory management, and consider using the stream interfaces instead.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCDAJH"></a>
<div id="JJDBC28541" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">LOB Locator Interface</h2>
<p>Locators are small data structures, which contain information that may be used to access the actual data of the LOB. In a database table, the locator is stored directly in the table, while the data may be in the table or in separate storage. It is common to use separate tablespaces for large LOBs.</p>
<p>In JDBC 4.0, LOBs should be read or written using the interfaces <code>java.sql.Blob</code>, <code>java.sql.Clob</code>, and <code>java.sql.NClob</code>. These provide random access to the data in the LOB.</p>
<p>The Oracle implementation classes <code>oracle.sql.BLOB</code>, <code>oracle.sql.CLOB</code>, and <code>oracle.sql.NCLOB</code> store the locator and access the data with it. The <code>oracle.sql.BLOB</code> and <code>oracle.sql.CLOB</code> classes implement the <code>java.sql.Blob</code> and <code>java.sql.Clob</code> interfaces respectively. In <code>ojdbc6.jar</code>, <code>oracle.sql.NCLOB</code> implements <code>java.sql.NClob</code>, but in <code>ojdbc5.jar</code>, it implements the <code>java.sql.Clob</code> interface.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the <code>oracle.sql.BLOB</code> and <code>oracle.sql.CLOB</code> classes are deprecated and replaced with the <code>oracle.jdbc.OracleBlob</code> and <code>oracle.jdbc.OracleClob</code> interfaces. Oracle recommends you to use the methods available in the <code>java.sql</code> package, where possible, for standard compatibility and methods available in the <code>oracle.jdbc</code> package for Oracle specific extensions. Refer to MoS Note 1364193.1 for more information about these interface.</div>
<p>In Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the Oracle JDBC drivers support the JDBC 4.0 <code>java.sql.NClob</code> interface in <code>ojdbc6.jar</code> and <code>ojdbc7.jar</code>, which are compiled with JDK 6 (must be used with JRE 6) and JDK 7 (must be used with JRE 7) respectively.</p>
<p>In contrast, <code>oracle.sql.BFILE</code> is an Oracle extension, without a corresponding <code>java.sql</code> interface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The JDBC Javadoc for more details.</div>
<p class="subhead2"><a id="CHDGDGBA"></a><a id="JJDBC28542"></a>LOB prefetching</p>
<p>For Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC drivers, the number of round trips is reduced by prefetching the metadata such as the LOB length and the chunk size as well as the beginning of the LOB data along with the locator during regular fetch operations. If you select LOB columns into a result set, some or all of the data is prefetched to the client, when the locator is fetched. It saves the first roundtrip to retrieve data by deferring all preceding operations until fetching from the locator.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
LOB Prefetching is inversely proportional to the size of the LOB data, that is, the benefits of prefetching are more for small LOBs and less for larger LOBs.</div>
<p>The prefetch size is specified in bytes for BLOBs and in characters for CLOBs. It can be specified by setting the connection property <code>oracle.jdbc.defaultLobPrefetchSize</code>. The value of this property can be overridden in the following two ways:</p>
<ul>
<li>
<p>At the statement level: By using the <code>oracle.jdbc.OracleStatement.setLobPrefetchSize(int)</code> method</p>
</li>
<li>
<p>At the column level: By using the form of <code>defineColumnType</code> method that takes length as argument</p>
</li>
</ul>
<p>The default prefetch size is 4000.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware of the possible memory consumption while setting large LOB prefetch sizes in combination with a large row prefetch size and a large number of LOB columns.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The JDBC Javadoc for more details</div>
<p class="subhead2"><a id="JJDBC28543"></a>New LOB APIs in JDBC 4.0</p>
<p>Oracle Database 11<span class="italic">g</span> Release 1 introduced the <code>java.sql.NClob</code> interface. The Oracle drivers implement the <code>oracle.sql.NCLOB</code> and <code>java.sql.NCLOB</code> interface in both <code>ojdbc6.jar</code> and <code>ojdbc7.jar</code>.</p>
<p>The Oracle drivers implement the new factory methods, <code>createBlob</code>, <code>createClob</code>, and <code>createNClob</code> in the <code>java.sql.Connection</code> interface to create temporary LOBs.</p>
<p>Starting from JDK 6, the <code>java.sql.Blob</code>, <code>java.sql.Clob</code>, and <code>java.sql.NClob</code> interfaces have a new method <code>free</code> to free an LOB and release the associated resources. The Oracle drivers use this method to free an LOB, if it is a temporary LOB.</p>
</div>
<!-- class="sect1" -->
<a id="i1060097"></a>
<div id="JJDBC28544" class="sect1">
<h2 class="sect1">Working With Temporary LOBs</h2>
<p>You can use temporary LOBs to store transient data. The data is stored in temporary table space rather than regular table space. You should free temporary LOBs after you no longer need them. If you do not, then the space the LOB consumes in temporary table space will not be reclaimed.</p>
<p>You can insert temporary LOBs into a table. When you do this, a permanent copy of the LOB is created and stored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Inserting a temporary LOB may be preferable in some situations. For example, when the LOB data is relatively small and the overhead of copying the data is less than the cost of a database round trip to retrieve the empty locator. Remember that the data is initially stored in the temporary table space on the server and then moved into permanent storage.</div>
<p>You create a temporary LOB with the <code>static</code> method <code><a id="sthref568"></a>createTemporary</code>, defined in both the <code>oracle.sql.BLOB</code> and <code>oracle.sql.CLOB</code> classes. You free a temporary LOB with the <code><a id="sthref569"></a>freeTemporary</code> method.</p>
<p>You can also create a temporary LOB/CLOB or NCLOB by using the connection factory methods available in JDBC 4.0. For more information, refer to <a href="jdbcvers.htm#BCFIDIEH">&#34;LOB Creation&#34;</a>.</p>
<p>You can test whether a LOB is temporary or not by calling the <code><a id="sthref570"></a>isTemporary</code> method. If the LOB was created by calling the <code>createTemporary</code> method, then the <code><a id="sthref571"></a>isTemporary</code> method returns <code>true</code>, else it returns <code>false</code>.</p>
<p>You can free a temporary LOB by calling the <code><a id="sthref572"></a>freeTemporary</code> method. Free any temporary LOBs before ending the session or call.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>If you do not free a temporary LOB, then it will make the storage used by that LOB in the database unavailable. Frequent failure to free temporary LOBs will result in filling up temporary table space with unavailable LOB storage.</p>
</li>
<li>
<p>When fetching data from a <code>ReultSet</code> with columns that are temporary LOBs, use <code>getClob</code> or <code>getBlob</code> methods instead of <code>getString</code> or <code>getBytes</code>.</p>
</li>
<li>
<p>The JDBC 4.0 method <code>free</code>, present in <code>java.sql.Blob</code>, <code>java.sql.Clob</code>, and <code>java.sql.NClob</code> interfaces, supercedes the <code>freeTemporary</code> method.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CHDEHFFH"></a>
<div id="JJDBC28547" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Opening Persistent LOBs with the Open and Close Methods</h2>
<p>This section discusses how to open and close your LOBs. The JDBC implementation of this functionality is provided using the following methods of <code>oracle.sql.BLOB</code> and <code>oracle.sql.CLOB</code> interfaces:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the <code>oracle.sql.BLOB</code> and <code>oracle.sql.CLOB</code> classes are deprecated and replaced with the <code>oracle.jdbc.OracleBlob</code> and <code>oracle.jdbc.OracleClob</code> interfaces. Oracle recommends you to use the methods available in the <code>java.sql</code> package, where possible, for standard compatibility and methods available in the <code>oracle.jdbc</code> package for Oracle specific extensions. Refer to MoS Note 1364193.1 for more information about these interface.</p>
</li>
<li>
<p>You do not have to necessarily open and close your LOBs. You may choose to open and close them for performance reasons.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1002" href="../ADLOB/adlob_design.htm#ADLOB1002"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a></div>
<ul>
<li>
<p><code>void open (int mode)</code></p>
</li>
<li>
<p><code>void close()</code></p>
</li>
<li>
<p><code>boolean isOpen()</code></p>
</li>
</ul>
<p>If you do not wrap LOB operations inside an <code>Open/Close</code> call operation, then each modification to the LOB will implicitly open and close the LOB, thereby firing any triggers on a domain index. Note that in this case, any domain indexes on the LOB will become updated as soon as LOB modifications are made. Therefore, domain LOB indexes are always valid and may be used at any time within the same transaction.</p>
<p>If you wrap your LOB operations inside the <code>Open/Close</code> call operation, then triggers will not be fired for each LOB modification. Instead, the trigger on domain indexes will be fired at the <code>Close</code> call. For example, you might design your application so that domain indexes are not be updated until you call the <code>close</code> method. However, this means that any domain indexes on the LOB will not be valid in-between the <code>Open/Close</code> calls.</p>
<p>You open a LOB by calling the <code>open</code> or <code>open(int)</code> method. You may then read and write the LOB without any triggers associated with that LOB firing. When you finish accessing the LOB, close the LOB by calling the <code>close</code> method. When you close the LOB, any triggers associated with the LOB will fire.</p>
<p>You can check if a LOB is open or closed by calling the <code>isOpen</code> method. If you open the LOB by calling the <code>open(int)</code> method, then the value of the argument must be either <code>MODE_READONLY</code> or <code>MODE_READWRITE</code>, as defined in the <code>oracle.sql.BLOB</code> and <code>oracle.sql.CLOB</code> classes. If you open the LOB with <code>MODE_READONLY</code>, then any attempt to write to the LOB will result in a SQL exception.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>An error occurs if you commit the transaction before closing all LOBs that were opened by the transaction. The openness of the open LOBs is discarded, but the transaction is successfully committed. Hence, all the changes made to the LOB and non-LOB data in the transaction are committed, but the triggers for domain indexing are not fixed.</p>
</li>
<li>
<p>The <code>open</code> and <code>close</code> methods apply only to persistent LOBs. The <code>close</code> method is not similar to the <code>free</code> or <code>freeTemporary</code> methods used for temporary LOBs. The <code>free</code> and <code>freeTemporary</code> methods release storage and make a LOB unusable. On the other hand, the <code>close</code> method indicates to the database that a modification on a LOB is complete, and triggers should be fired and indexes should be updated. A LOB is still usable after a call to the <code>close</code> method.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CHDDFJEE"></a>
<div id="JJDBC28549" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Working with BFILEs</h2>
<p>This section describes how to read data from BFILEs, using file locators. This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDDGECF">Retrieving BFILE Locators</a></p>
</li>
<li>
<p><a href="#CHDGDGEI">Writing to BFILES</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDDGECF"></a><a id="JJDBC28550"></a>Retrieving BFILE Locators</p>
<p>The BFILE data type and <code>oracle.sql.BFILE</code> classes are Oracle proprietary. So, there is no standard interface for them. You must use Oracle extensions for this type of data.</p>
<p>If you have a standard JDBC result set or callable statement object that includes BFILE locators, then you can access the locators by using the standard result set <code>getObject</code> method. This method returns an <code>oracle.sql.BFILE</code> object.</p>
<p>You can also access the locators by casting your result set to <code>OracleResultSet</code> or your callable statement to <code>OracleCallableStatement</code> and using the <code>getOracleObject</code> or <code>getBFILE</code> method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are using <code>getObject</code> or <code>getOracleObject</code> methods, then remember to cast the output, as necessary.</div>
<p>Once you have a locator, you can access the BFILE data via the API in <code>oracle.sql.BFILE</code>. These APIs are similar to the read methods of the <code>java.sql.BLOB</code> interface.</p>
<p class="subhead2"><a id="CHDGDGEI"></a><a id="JJDBC28551"></a>Writing to BFILES</p>
<p>You cannot write data to the contents of the BFILE, but you can use an instance of <code>oracle.sql.BFILE</code> as input to a SQL statement or to a PL/SQL procedure. You can achieve this by performing one of the following:</p>
<ul>
<li>
<p>Use the standard <code>setObject</code> method.</p>
</li>
<li>
<p>Cast the statement to <code>OraclePreparedStatement</code> or <code>OracleCallableStatement</code>, and use the <code>setOracleObject</code> or <code>setBFILE</code> method. These methods take the parameter index and an <code>oracle.sql.BFILE</code> object as input.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>There is no standard <code>java.sql</code> interface for BFILEs.</p>
</li>
<li>
<p>Use the <code>getBFILE</code> methods in the <code>OracleResultSet</code> and <code>OracleCallableStatement</code> interfaces to retrieve an <code>oracle.sql.BFILE</code> object. The <code>setBFILE</code> methods in <code>OraclePreparedStatement</code> and <code>OracleCallableStatement</code> interfaces accept <code>oracle.sql.BFILE</code> object as an argument. Use these methods to write to a BFILE.</p>
</li>
<li>
<p>Oracle recommends that you use the <code>getBFILE</code>, <code>setBFILE</code>, and <code>updateBFILE</code> methods instead of the <code>getBfile</code>, <code>setBfile</code>, and <code>updateBfile</code> methods. For example, use the <code>setBFILE</code> method instead of the <code>setBfile</code> method.</p>
</li>
</ul>
</div>
</li>
</ul>
<p>BFILEs are read-only. The body of the data resides in the operating system (OS) file system and can be written to using only OS tools and commands. You can create a BFILE for an existing external file by executing the appropriate SQL statement either from JDBC or by using any other way to execute SQL. However, you cannot create an OS file that a BFILE would refer to by SQL or JDBC. Those are created only externally by a process that has access to server file systems.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The code examples present in this chapter, in the earlier versions of this guide, have been removed in favor of references to the sample code available for download on OTN.</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="oraoot.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="oraoor.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>