<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71025"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Statement%20and%20Result%20Set%20Caching"></a><title>Statement and Result Set Caching</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:37Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="part5.htm" title="Previous" type="text/html"/>
<link rel="Next" href="oraperf.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">32/55</span> <!-- End Header -->
<div id="JJDBC28649" class="chapter"><a id="g1079466"></a>
<h1 class="chapter"><span class="secnum">20</span> Statement and Result Set Caching</h1>
<p>This chapter describes the benefits and use of Statement caching, an Oracle Java Database Connectivity (JDBC) extension.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Use statement caching only when you are sure that the table structure remains the same in the database. If you alter the table structure and then reuse a statement that was created and executed before changing the table structure, then you may get an error.</div>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i1069942">About Statement Caching</a></p>
</li>
<li>
<p><a href="#i1070438">Using Statement Caching</a></p>
</li>
<li>
<p><a href="#CBHGDGFD">Reusing Statements Objects</a></p>
</li>
<li>
<p><a href="#CBHFBIDB">Result Set Caching</a></p>
</li>
</ul>
<a id="i1069942"></a>
<div id="JJDBC28650" class="sect1">
<h2 class="sect1">About Statement Caching</h2>
<p>Statement caching improves performance by caching executable statements that are used repeatedly, such as in a loop or in a method that is called repeatedly. Starting from JDBC 3.0, JDBC standards define a statement-caching interface.</p>
<p>Statement caching can do the following:</p>
<ul>
<li>
<p>Prevent the overhead of repeated cursor creation</p>
</li>
<li>
<p>Prevent repeated statement parsing and creation</p>
</li>
<li>
<p>Reuse data structures in the client</p>
</li>
</ul>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1070862">Basics of Statement Caching</a></p>
</li>
<li>
<p><a href="#i1071993">Implicit Statement Caching</a></p>
</li>
<li>
<p><a href="#i1072466">Explicit Statement Caching</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle strongly recommends you use the implicit Statement cache. Oracle JDBC drivers are designed on the assumption that the implicit Statement cache is enabled. So, not using the Statement cache will have a negative impact on performance.</div>
<a id="i1070862"></a>
<div id="JJDBC28651" class="sect2">
<h3 class="sect2">Basics of Statement Caching</h3>
<p>Applications use the Statement cache to cache statements associated with a particular physical connection. The cache is associated with an <code><a id="sthref693"></a>OracleConnection</code> object. <code>OracleConnection</code> includes methods to enable Statement caching. When you enable Statement caching, a statement object is cached when you call the <code>close</code> method.</p>
<p>Because each physical connection has its own cache, multiple caches can exist if you enable Statement caching for multiple physical connections. When you enable Statement caching on a connection cache, the logical connections benefit from the Statement caching that is enabled on the underlying physical connection. If you try to enable Statement caching on a logical connection held by a connection cache, then this will throw an exception.</p>
<p>There are two types of Statement caching: implicit and explicit. Each type of Statement cache can be enabled or disabled independent of the other. You can have either, neither, or both in effect. Both types of Statement caching share a single cache per connection.</p>
</div>
<!-- class="sect2" -->
<a id="i1071993"></a>
<div id="JJDBC28652" class="sect2">
<h3 class="sect2">Implicit Statement Caching</h3>
<p>When you enable implicit Statement caching<a id="sthref694"></a><a id="sthref695"></a>, JDBC automatically caches the prepared or callable statement when you call the <code>close</code> method of this statement object. The prepared and callable statements are cached and retrieved using standard connection object and statement object methods.</p>
<p>Plain statements are not implicitly cached, because implicit Statement caching uses a SQL string as a key and plain statements are created without a SQL string. Therefore, implicit Statement caching applies only to the <a id="sthref696"></a><code>OraclePreparedStatement</code> and <code>OracleCallableStatement</code><a id="sthref697"></a> objects, which are created with a SQL string. You <span class="italic">cannot</span> use implicit Statement caching with <code>OracleStatement</code>. When you create an <code>OraclePreparedStatement</code> or <code>OracleCallableStatement</code>, the JDBC driver automatically searches the cache for a matching statement. The match criteria are the following:</p>
<ul>
<li>
<p>The SQL string in the statement must be identical to one in the cache.</p>
</li>
<li>
<p>The statement type must be the same, that is, prepared or callable.</p>
</li>
<li>
<p>The scrollable type of result sets produced by the statement must be the same, that is, forward-only or scrollable.</p>
</li>
</ul>
<p>If a match is found during the cache search, then the cached statement is returned. If a match is not found, then a new statement is created and returned. In either case, the statement, along with its cursor and state are cached when you call the <code>close</code> method of the statement object.</p>
<p>When a cached <a id="sthref698"></a><code>OraclePreparedStatement</code> or <code>OracleCallableStatement</code><a id="sthref699"></a> object is retrieved, the state and data information are automatically reinitialized and reset to default values, while metadata is saved. Statements are removed from the cache to conform to the maximum size using a <a id="sthref700"></a><a id="sthref701"></a><a id="sthref702"></a><a id="sthref703"></a>Least Recently Used (LRU) algorithm.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JDBC driver does not clear metadata. However, although metadata is saved for performance reasons, it has no semantic impact. A statement that comes from the implicit cache appears as if it were newly created.</div>
<p>You can prevent a particular statement from being implicitly cached.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1072689">&#34;Disabling Implicit Statement Caching for a Particular Statement&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1072466"></a>
<div id="JJDBC28653" class="sect2">
<h3 class="sect2">Explicit Statement Caching</h3>
<p><a id="sthref704"></a><a id="sthref705"></a>Explicit Statement caching enables you to cache and retrieve selected prepared and callable statements. Explicit Statement caching relies on a key, an arbitrary Java <code>String</code> that you provide.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Plain statements cannot be cached.</div>
<p>Because explicit Statement caching retains statement data and state as well as metadata, it has a performance edge over implicit Statement caching, which retains only metadata. However, you must be cautious when using this type of caching, because explicit Statement caching saves all three types of information for reuse and you may not be aware of what data and state are retained from prior use of the statements.</p>
<p>Implicit and explicit Statement caching can be differentiated on the following points:</p>
<ul>
<li>
<p>Retrieving statements</p>
<p>In the case of implicit Statement caching, you take no special action to retrieve statements from a cache. Instead, whenever you call <code>prepareStatement</code> or <code>prepareCall</code>, JDBC automatically checks the cache for a matching statement and returns it if found. However, in the case of explicit Statement caching, you use specialized Oracle <code>WithKey</code> methods to cache and retrieve statement objects.</p>
</li>
<li>
<p>Providing key</p>
<p>Implicit Statement caching uses the SQL string of a prepared or callable statement as the key, requiring no action on your part. In contrast, explicit Statement caching requires you to provide a Java <code>String</code>, which it uses as the key.</p>
</li>
<li>
<p>Returning statements</p>
<p>During implicit Statement caching, if the JDBC driver cannot find a statement in cache, then it will automatically create one. However, during explicit Statement caching, if the JDBC driver cannot find a matching statement in cache, then it will return a <code>null</code> value.</p>
</li>
</ul>
<p><a href="#g1076722">Table 20-1</a> compares the different methods employed in implicit and explicit Statement caching.</p>
<div id="JJDBC28654" class="tblformalwide">
<p class="titleintable"><a id="sthref706"></a><a id="g1076722"></a>Table 20-1 Comparing Methods Used in Statement Caching</p>
<table class="cellalignment2247" title="Comparing Methods Used in Statement Caching" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t7"><br/></th>
<th class="cellalignment2245" id="r1c2-t7">Allocate</th>
<th class="cellalignment2245" id="r1c3-t7">Insert Into Cache</th>
<th class="cellalignment2245" id="r1c4-t7">Retrieve From Cache</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t7" headers="r1c1-t7">
<p>Implicit</p>
</td>
<td class="cellalignment2246" headers="r2c1-t7 r1c2-t7">
<p><code><a id="sthref707"></a>prepareStatement<br/>
<a id="sthref708"></a>prepareCall</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t7 r1c3-t7">
<p><code><a id="sthref709"></a>close</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t7 r1c4-t7">
<p><code>prepareStatement<br/>
prepareCall</code></p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t7" headers="r1c1-t7">
<p>Explicit</p>
</td>
<td class="cellalignment2246" headers="r3c1-t7 r1c2-t7">
<p><code><a id="sthref710"></a>createStatement<br/>
prepareStatement<br/>
prepareCall</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t7 r1c3-t7">
<p><code><a id="sthref711"></a>closeWithKey</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t7 r1c4-t7">
<p><code><a id="sthref712"></a>getStatementWithKey<br/>
<a id="sthref713"></a>getCallWithKey</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1070438"></a>
<div id="JJDBC28655" class="sect1">
<h2 class="sect1">Using Statement Caching</h2>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1072607">Enabling and Disabling Statement Caching</a></p>
</li>
<li>
<p><a href="#i1075261">Closing a Cached Statement</a></p>
</li>
<li>
<p><a href="#i1070890">Using Implicit Statement Caching</a></p>
</li>
<li>
<p><a href="#i1070895">Using Explicit Statement Caching</a></p>
</li>
</ul>
<a id="i1072607"></a>
<div id="JJDBC28656" class="sect2">
<h3 class="sect2">Enabling and Disabling Statement Caching</h3>
<p>When using the <code>OracleConnection</code> API, implicit and explicit Statement caching can be enabled or disabled independent of one other. You can have either, neither, or both of them in effect.</p>
<p class="subhead2"><a id="i1076331"></a><a id="JJDBC28657"></a>Enabling Implicit Statement Caching</p>
<p>There are two ways to enable implicit Statement caching. The first method enables Statement caching on a nonpooled physical connection, where you need to explicitly specify the Statement size for every connection, using the <code>setStatementCacheSize</code> method. The second method enables Statement caching on a pooled logical connection. Each connection in the pool has its own Statement cache with the same maximum size that can be specified by setting the <code>MaxStatementsLimit</code> property.</p>
<p class="subhead2"><a id="JJDBC28658"></a>Method 1</p>
<p>Perform the following steps:</p>
<ul>
<li>
<p>Call the <code>OracleDataSource.setImplicitCachingEnabled(true)</code> method on the connection to set the <code>OracleDataSource</code> property <code>implicitCachingEnabled</code> to <code>true</code>. For example:</p>
<pre>OracleDataSource ods =  new OracleDataSource();
...
ods.setImplicitCachingEnabled(true);
...
</pre></li>
<li>
<p>Call the <code>OracleConnection.setStatementCacheSize</code> method on the physical connection. The argument you supply is the maximum number of statements in the cache. For example, the following code specifies a cache size of ten statements:</p>
<pre>((OracleConnection)conn).setStatementCacheSize(10);
</pre></li>
</ul>
<p class="subhead2"><a id="JJDBC28659"></a>Method 2</p>
<p>Perform the following steps:</p>
<ul>
<li>
<p>Set the <code>OracleDataSource</code> properties <code>implicitCachingEnabled</code> and <code>connectionCachingEnabled</code> to <code>true</code>. For example:</p>
<pre>OracleDataSource ods =  new OracleDataSource();
...
ods.setConnectionCachingEnabled( true );
ods.setImplicitCachingEnabled( true );
...
</pre></li>
<li>
<p>Set the <code>MaxStatementsLimit</code> property to a positive integer on the connection cache, when using the connection cache. For example:</p>
<pre>Properties cacheProps = new Properties();
...
cacheProps.put( &#34;MaxStatementsLimit&#34;, &#34;50&#34; );
</pre></li>
</ul>
<p>To determine whether implicit caching is enabled, call <code>getImplicitCachingEnabled</code>, which returns <code>true</code> if implicit caching is enabled, <code>false</code> otherwise.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Enabling Statement caching enables both implicit and explicit Statement caching.</div>
<p class="subhead2"><a id="JJDBC28660"></a>Disabling Implicit Statement Caching</p>
<p>Disable implicit Statement caching by calling <code>setImplicitCachingEnabled(false)</code> on the connection or by setting the <code>ImplicitCachingEnabled</code> property to <code>false</code>.</p>
<p class="subhead2"><a id="JJDBC28661"></a>Enabling Explicit Statement Caching</p>
<p>To enable explicit Statement caching you must first set the Statement cache size. For setting the cache size, call <code>OracleConnection.setStatementCacheSize</code> method on the physical connection. The argument you supply is the maximum number of statements in the cache. An argument of <code>0</code> specifies no caching. To check the cache size, use the <code>getStatementCacheSize</code> method in the following way:</p>
<pre>System.out.println(&#34;Stmt Cache size is &#34; +
   ((OracleConnection)conn).getStatementCacheSize());
</pre>
<p>The following code specifies a cache size of ten statements:</p>
<pre>((OracleConnection)conn).setStatementCacheSize(10);
</pre>
<p>Enable explicit Statement caching by calling <code>setExplicitCachingEnabled(true)</code> on the connection.</p>
<p>To determine whether explicit caching is enabled, call <code>getExplicitCachingEnabled</code>, which returns <code>true</code> if explicit caching is enabled, <code>false</code> otherwise.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
<ul>
<li>
<p>You enable implicit and explicit caching for a particular physical connection independently. Therefore, it is possible to do Statement caching both implicitly and explicitly during the same session.</p>
</li>
<li>
<p>Implicit and explicit Statement caching share the <span class="italic">same</span> cache. Remember this when you set the statement cache size.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="JJDBC28662"></a>Disabling Explicit Statement Caching</p>
<p>Disable explicit Statement caching by calling <code>setExplicitCachingEnabled(false)</code>. Disabling caching or closing the cache purges the cache. The following example disables explicit Statement caching:<a id="sthref714"></a></p>
<pre>((OracleConnection)conn).setExplicitCachingEnabled(false);
</pre></div>
<!-- class="sect2" -->
<a id="i1075261"></a>
<div id="JJDBC28663" class="sect2">
<h3 class="sect2">Closing a Cached Statement</h3>
<p>Perform the following to close a Statement and assure that it is not returned to the cache:</p>
<p class="subhead2"><a id="JJDBC28664"></a>In J2SE 5.0</p>
<ul>
<li>
<p>Disable caching for that statement</p>
<pre>stmt.setDisableStmtCaching(true);
</pre></li>
<li>
<p>Call the <code>close</code> method of the statement object</p>
<pre>stmt.close();
</pre></li>
</ul>
<p class="subhead2"><a id="JJDBC28665"></a>In JSE 6.0</p>
<pre>stmt.setPoolable(false);
stmt.close();
</pre>
<p class="subhead2"><a id="JJDBC28666"></a>Physically Closing a Cached Statement</p>
<p>With implicit Statement caching enabled, you cannot physically close statements manually. The <code><a id="sthref715"></a>close</code> method of a statement object caches the statement instead of closing it. The statement is physically closed automatically under one of following three conditions:</p>
<ul>
<li>
<p>When the associated connection is closed</p>
</li>
<li>
<p>When the cache reaches its size limit and the least recently used statement object is preempted from cache by the LRU algorithm</p>
</li>
<li>
<p>If you call the <code>close</code> method on a statement for which Statement caching is disabled</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1070890"></a>
<div id="JJDBC28667" class="sect2">
<h3 class="sect2">Using Implicit Statement Caching</h3>
<p>Once you enable implicit Statement caching, by default, all prepared and callable statements are automatically cached. Implicit Statement caching includes the following steps:</p>
<ol>
<li>
<p>Enable implicit Statement caching.</p>
</li>
<li>
<p>Allocate a statement using one of the standard methods.</p>
</li>
<li>
<p>Disable implicit Statement caching for any particular statement you do not want to cache. This is an optional step.</p>
</li>
<li>
<p>Cache the statement using the <code>close</code> method.</p>
</li>
<li>
<p>Retrieve the implicitly cached statement by calling the appropriate standard prepare method.</p>
</li>
</ol>
<p class="subhead2"><a id="JJDBC28668"></a>Allocating a Statement for Implicit Caching</p>
<p>To allocate a statement for implicit Statement caching, use either the <code><a id="sthref716"></a>prepareStatement</code> or <code><a id="sthref717"></a>prepareCall</code> method as you would typically.</p>
<p>The following code allocates a new statement object called <code>pstmt</code>:</p>
<pre>PreparedStatement pstmt = conn.prepareStatement
   (&#34;UPDATE emp SET ename = ? WHERE rowid = ?&#34;);
</pre>
<p class="subhead2"><a id="i1072689"></a><a id="JJDBC28669"></a>Disabling Implicit Statement Caching for a Particular Statement</p>
<p>With implicit Statement caching enabled for a connection, by default, all callable and prepared statements of that connection are automatically cached. To prevent a particular callable or prepared statement from being implicitly cached, use the <a id="sthref718"></a><code>setDisableStmtCaching</code> method of the statement object. You can manage cache space by calling the <code>setDisableStmtCaching</code> method on any infrequently used statement.</p>
<p>The following code disables implicit Statement caching for <code>pstmt</code>:<code><a id="sthref719"></a></code></p>
<pre>PreparedStatement pstmt = conn.prepareStatement(&#34;SELECT 1 from DUAL&#34;);
((OraclePreparedStatement)pstmt).setDisableStmtCaching(true);
pstmt.close ();
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are using JSE 6, then you can disable Statement caching by using the standard JDBC 4.0 method <code>setPoolable</code>:
<pre>PreparedStatement.setPoolable(false);
</pre>
<p>Use the following to check whether the <code>Statement</code> object is poolable:</p>
<pre>Statement.isPoolable();
</pre></div>
<p class="subhead2"><a id="JJDBC28670"></a>Implicitly Caching a Statement</p>
<p>To cache an allocated statement, call the <code>close</code> method of the statement object. When you call the <code><a id="sthref720"></a>close</code> method on an <code>OraclePreparedStatement</code> or <code>OracleCallableStatement</code> object, the JDBC driver automatically puts this statement in cache, unless you have disabled caching for this statement.</p>
<p>The following code caches the <code>pstmt</code> statement:</p>
<pre>pstmt.close ();
</pre>
<p class="subhead2"><a id="JJDBC28671"></a>Retrieving an Implicitly Cached Statement</p>
<p>To retrieve an implicitly cached statement, call either the <code><a id="sthref721"></a>prepareStatement</code> or <code><a id="sthref722"></a>prepareCall</code> method, depending on the statement type.</p>
<p>The following code retrieves <code>pstmt</code> from cache using the <code>prepareStatement</code> method:</p>
<pre>pstmt = conn.prepareStatement (&#34;UPDATE emp SET ename = ? WHERE rowid = ?&#34;);
</pre>
<p><a href="#g1076757">Table 20-2</a> describes the methods used to allocate statements and retrieve implicitly cached statements.</p>
<div id="JJDBC28672" class="tblformal">
<p class="titleintable"><a id="sthref723"></a><a id="g1076757"></a>Table 20-2 Methods Used in Statement Allocation and Implicit Statement Caching</p>
<table class="cellalignment2244" title="Methods Used in Statement Allocation and Implicit Statement Caching" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t11">Method</th>
<th class="cellalignment2245" id="r1c2-t11">Functionality for Implicit Statement Caching</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t11" headers="r1c1-t11">
<p><code><a id="sthref724"></a>prepareStatement</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t11 r1c2-t11">
<p>Performs a cache search that either finds and returns the desired cached <code>OraclePreparedStatement</code> object or allocates a new <code>OraclePreparedStatement</code> object if a match is not found</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t11" headers="r1c1-t11">
<p><code><a id="sthref725"></a>prepareCall</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t11 r1c2-t11">
<p>Performs a cache search that either finds and returns the desired cached <code>OracleCallableStatement</code> object or allocates a new <code>OracleCallableStatement</code> object if a match is not found</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#CBHBFBAF">Example 20-1</a> provides a sample code that shows how to enable implicit statement caching.</p>
<div id="JJDBC28673" class="example">
<p class="titleinexample"><a id="CBHBFBAF"></a>Example 20-1 Using Implicit Statement Cache</p>
<pre>import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import javax.sql.DataSource;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.pool.OracleDataSource;
public class TestJdbc
{
  /**
   * Get a Connection, prepare a statement, execute a query, fetch the results, close the connection.
   * @param ods the DataSource used to get the connection.
   */
  private static void doSQL( DataSource ods ) throws SQLException
  {
    final String SQL = &#34;select username from all_users&#34;;
    OracleConnection  conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    try
    {
      conn = (OracleConnection) ods.getConnection();
      System.out.println( &#34;Connection:&#34; + conn );
      System.out.println( &#34;Connection getImplicitCachingEnabled:&#34; + conn.getImplicitCachingEnabled() );
      System.out.println( &#34;Connection getStatementCacheSize:&#34; + conn.getStatementCacheSize() );
      ps = conn.prepareStatement( SQL );
      System.out.println( &#34;PreparedStatement:&#34; + ps );
      rs = ps.executeQuery();
      while ( rs.next() )
      {
        String owner = rs.getString( 1 );
        System.out.println( owner );
      }
    }
    finally
    {
      if ( rs != null )
      {
        rs.close();
      }
      if ( ps != null )
      {
        ps.close();
      conn.close();
    }
  }
  }
  public static void main( String[] args )
  {
    try
    {
      OracleDataSource ods =  new OracleDataSource();
      ods.setDriverType( &#34;thin&#34; );
      ods.setServerName( &#34;localhost&#34; );
      ods.setPortNumber( 5221 );
      ods.setServiceName( &#34;orcl&#34; );
      ods.setUser( &#34;HR&#34; );
      ods.setPassword( &#34;hr&#34; );
      ods.setConnectionCachingEnabled( true );
      ods.setImplicitCachingEnabled( true );
      Properties cacheProps = new Properties();
      cacheProps.put( &#34;InitialLimit&#34;, &#34;1&#34; );
      cacheProps.put( &#34;MinLimit&#34;, &#34;1&#34; );
      cacheProps.put( &#34;MaxLimit&#34;, &#34;5&#34; );
      cacheProps.put( &#34;MaxStatementsLimit&#34;, &#34;50&#34; );
      ods.setConnectionCacheProperties( cacheProps );
      System.out.println( &#34;DataSource getImplicitCachingEnabled: &#34; + ods.getImplicitCachingEnabled() );
      for ( int i = 0; i &lt; 5; i++ )
      {
        doSQL( ods );
      }
    }
    catch ( Exception ex )
    {
      ex.printStackTrace();
    }
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1070895"></a>
<div id="JJDBC28674" class="sect2">
<h3 class="sect2">Using Explicit Statement Caching</h3>
<p>A prepared or callable statement can be explicitly cached when you enable explicit Statement caching. Explicit Statement caching includes the following steps:</p>
<ol>
<li>
<p>Enable explicit Statement caching.</p>
</li>
<li>
<p>Allocate a statement using one of the standard methods.</p>
</li>
<li>
<p>Explicitly cache the statement by closing it with a key, using the <code><a id="sthref726"></a>closeWithKey</code> method.</p>
</li>
<li>
<p>Retrieve the explicitly cached statement by calling the appropriate Oracle WithKey method, specifying the appropriate key.</p>
</li>
<li>
<p>Re-cache an open, explicitly cached statement by closing it again with the <code>closeWithKey</code> method. Each time a cached statement is closed, it is re-cached with its key.</p>
</li>
</ol>
<p class="subhead2"><a id="JJDBC28675"></a>Allocating a Statement for Explicit Caching</p>
<p>To allocate a statement for explicit Statement caching, use either the <code><a id="sthref727"></a>createStatement</code>, <code><a id="sthref728"></a>prepareStatement</code>, or <code><a id="sthref729"></a>prepareCall</code> method as you would typically.</p>
<p>The following code allocates a new statement object called <code>pstmt</code>:</p>
<pre>PreparedStatement pstmt =
   conn.prepareStatement (&#34;UPDATE emp SET ename = ? WHERE rowid = ?&#34;);
</pre>
<p class="subhead2"><a id="JJDBC28676"></a>Explicitly Caching a Statement</p>
<p>To explicitly cache an allocated statement, call the <code>closeWithKey</code> method of the statement object, specifying a key. The key is an arbitrary Java <code>String</code> that you provide. The <code><a id="sthref730"></a>closeWithKey</code> method caches a statement as is. This means the data, state, and metadata are retained and not cleared.</p>
<p>The following code caches the <code>pstmt</code> statement with the key <code>&#34;mykey&#34;</code>:</p>
<pre>((OraclePreparedStatement)pstmt).closeWithKey (&#34;mykey&#34;);
</pre>
<p class="subhead2"><a id="JJDBC28677"></a>Retrieving an Explicitly Cached Statement</p>
<p>To recall an explicitly cached statement, call either the <code><a id="sthref731"></a>getStatementWithKey</code> or <code><a id="sthref732"></a>getCallWithKey</code> methods depending on the statement type.</p>
<p>If you retrieve a statement with a specified key, then the JDBC driver searches the cache for the statement, based on the specified key. If a match is found, then the matching statement is returned along with its state, data, and metadata. This information is as it was when the statement was last closed. If a match is not found, then the JDBC driver returns <code><a id="sthref733"></a><a id="sthref734"></a><a id="sthref735"></a>null</code>.</p>
<p>The following code recalls <code>pstmt</code> from cache using the <code>&#34;mykey&#34;</code> key with the <code>getStatementWithKey</code> method. Recall that the <code>pstmt</code> statement object was cached with the <code>&#34;mykey&#34;</code> key.</p>
<pre>pstmt = ((OracleConnection)conn).getStatementWithKey (&#34;mykey&#34;);
</pre>
<p>If you call the <code>creationState</code> method on the <code>pstmt</code> statement object, then the method returns <code>EXPLICIT</code>.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
When you retrieve an explicitly cached statement, ensure that you use the method that is appropriate for your statement type when specifying the key. For example, if you used the <code>prepareStatement</code> method to allocate a statement, then use the <code>getStatementWithKey</code> method to retrieve that statement from cache. The JDBC driver does <span class="italic">not</span> verify the type of statement it is returning.</div>
<p><a href="#g1076741">Table 20-3</a> describes the methods used to retrieve explicitly cached statements.</p>
<div id="JJDBC28678" class="tblformal">
<p class="titleintable"><a id="sthref736"></a><a id="g1076741"></a>Table 20-3 Methods Used to Retrieve Explicitly Cached Statements</p>
<table class="cellalignment2244" title="Methods Used to Retrieve Explicitly Cached Statements" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t13">Method</th>
<th class="cellalignment2245" id="r1c2-t13">Functionality for Explicit Statement Caching</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t13" headers="r1c1-t13">
<p><code><a id="sthref737"></a>getStatementWithKey</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t13 r1c2-t13">
<p>Specifies the key needed to retrieve a prepared statement from cache</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t13" headers="r1c1-t13">
<p><code><a id="sthref738"></a>getCallWithKey</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t13 r1c2-t13">
<p>Specifies the key needed to retrieve a callable statement from cache</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBHGDGFD"></a>
<div id="JJDBC28679" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Reusing Statements Objects</h2>
<p>The JDBC 3.0 specification introduces the feature of statement pooling that enables an application to reuse a <code>PreparedStatement</code> object in the same way as it uses a <code>Connection</code> object. The <code>PreparedStatement</code> objects can be reused by multiple logical connections in a transparent manner.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CBHHIIDC">Using a Pooled Statement</a></p>
</li>
<li>
<p><a href="#CBHCGBCJ">Closing a Pooled Statement</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Oracle JDBC Drivers use implicit statement caching to support statement pooling.</div>
<a id="CBHHIIDC"></a>
<div id="JJDBC28680" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using a Pooled Statement</h3>
<p>An application can find out whether a data source supports statement pooling by calling the <code>isPoolable</code> method from the <code>Statement</code> interface. If the return value is <code>true</code>, then the application knows that the <code>PreparedStatement</code> object is being pooled. The application can also request a statement to be pooled or not pooled by using the <code>setPoolable</code> method from the <code>Statement</code> interface.</p>
<p>Reusing of pooled statement should be completely transparent to the application, that is, the application code should remain the same whether a <code>PreparedStatement</code> object participates in statement pooling or not. If an application closes a <code>PreparedStatement</code> object, it must still call <code>Connection.prepareStatement</code> method in order to reuse it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An application has no direct control over how statements are pooled. A pool of statements is associated with a <code>PooledConnection</code> object, whose behavior is determined by the properties of the <code>ConnectionPoolDataSource</code> object that produced it.</div>
</div>
<!-- class="sect2" -->
<a id="CBHCGBCJ"></a>
<div id="JJDBC28681" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Closing a Pooled Statement</h3>
<p>An application closes a pooled statement exactly the same way it closes a nonpooled statement. Once a statement is closed, whether is it pooled or nonpooled, it is no longer available for use by the application and an attempt to reuse it causes an exception to be thrown. The only difference visible is that an application cannot directly close a physical statement that is being pooled. This is done by the pool manager. The method <code>PooledConnection.closeAll</code> closes all of the statements open on a given physical connection, which releases the resources associated with those statements.</p>
<p>The following methods can close a pooled statement:</p>
<ul>
<li>
<p><a id="sthref739"></a><a id="sthref740"></a><code>close</code></p>
<p>This <code>java.sql.Statement</code> interface method is called by an application. If the statement is being pooled, then it closes the logical statement used by the application but does not close the physical statement being pooled.</p>
</li>
<li>
<p><a id="sthref741"></a><a id="sthref742"></a><code>close</code></p>
<p>This <code>java.sql.Connection</code> interface method is called by an application. This method acts differently depending upon whether the connection using the statement is being pooled or not:</p>
<ul>
<li>
<p>Nonpooled connection</p>
<p>This method closes the physical connection and all statements created by that connection. This is necessary because the garbage collection mechanism is unable to detect when externally managed resources can be released.</p>
</li>
<li>
<p>Pooled connection</p>
<p>This method closes the logical connection and the logical statements it returned, but leaves open the underlying <code>PooledConnection</code> object and any associated pooled statements</p>
</li>
</ul>
</li>
<li>
<p><code>PooledConnection.closeAll</code></p>
<p>This method is called by the connection pool manager to close all of the physical statements being pooled by the <code>PooledConnection</code> object</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBHFBIDB"></a>
<div id="JJDBC28682" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Result Set Caching</h2>
<p>Your applications sometime send repetitive queries to the database. To improve the response time of repetitive queries, results of queries, query fragments, and PL/SQL functions can be cached in memory. A result cache stores the results of queries shared across all sessions. When these queries are executed repeatedly, the results are retrieved directly from the cache memory.</p>
<p>You must annotate a query or query fragment with a result cache hint to indicate that results are to be stored in the query result cache.</p>
<p>The query result set can be cached in the following ways:</p>
<ul>
<li>
<p><a href="#CBHHAEJC">Server-side Cache</a></p>
</li>
<li>
<p><a href="#CHDGEDHH">Client Result Cache</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The server-side and client result set caches are most useful for read-only or read-mostly data. They may reduce performance for queries with highly dynamic results.</p>
</li>
<li>
<p>Both server-side and client result set caches use memory. So, caching very large result sets can cause performance problems.</p>
</li>
</ul>
</div>
<a id="CBHHAEJC"></a>
<div id="JJDBC28683" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Server-side Cache</h3>
<p>Support for server-side Result Set caching has been introduced for both JDBC Thin and JDBC Oracle Call Interface (OCI) drivers since Oracle Database 11<span class="italic">g</span> Release 1. The server-side result cache is used to cache the results of the current queries, query fragments, and PL/SQL functions in memory and then to use the cached results in future executions of the query, query fragment, or PL/SQL function. The cached results reside in the result cache memory portion of the SGA. A cached result is automatically invalidated whenever a database object used in its creation is successfully modified. The server-side caching can be of the following two types:</p>
<ul>
<li>
<p>SQL Query Result Cache</p>
</li>
<li>
<p>PL/SQL Function Result Cache</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TGDBA631" href="../TGDBA/tune_result_cache.htm#TGDBA631"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about SQL Query Result Cache</p>
</li>
<li>
<p><a class="olink LNPLS00817" href="../LNPLS/subprograms.htm#LNPLS00817"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about PL/SQL Function Result Cache</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDGEDHH"></a>
<div id="JJDBC28684" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Client Result Cache</h3>
<p>Since Oracle Database 11<span class="italic">g</span> Release 1, support for client result cache has been introduced for JDBC OCI driver. The client result cache improves performance of applications by caching query result sets in a way that subsequent query executions can access the cached result set without fetching rows from the server. This eliminates many round-trips to the server for cached results and reduces CPU usage on the server. The client cache transparently keeps the result set consistent with any session state or database changes that can affect its cached result sets. This allows significant improvements in response time for frequent client SQL query executions and for fetching rows. The scalability on the server is increased since it expends less CPU time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="instclnt.htm#BABEDHFF">Client Result Cache</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="part5.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="oraperf.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>