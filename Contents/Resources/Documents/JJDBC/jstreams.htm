<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-70997"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Java%20Streams%20in%20JDBC"></a><title>Java Streams in JDBC</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:36Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="datacc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="oraoot.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">23/55</span> <!-- End Header -->
<div id="JJDBC28409" class="chapter"><a id="BABGCHDI"></a>
<h1 class="chapter"><span class="secnum">12</span> Java Streams in JDBC</h1>
<p>This <a id="sthref462"></a><a id="sthref463"></a>chapter describes how the Oracle Java Database Connectivity (JDBC) drivers handle Java streams for several data types. Data streams enable you to read <code>LONG</code> column data of up to 2 gigabytes (GB).</p>
<p>This chapter covers the following topics:</p>
<ul>
<li>
<p><a href="#CJAJGJBA">Overview of Java Streams</a></p>
</li>
<li>
<p><a href="#i1014085">Streaming LONG or LONG RAW Columns</a></p>
</li>
<li>
<p><a href="#i1014090">Streaming CHAR, VARCHAR, or RAW Columns</a></p>
</li>
<li>
<p><a href="#i1014109">Streaming LOBs and External Files</a></p>
</li>
<li>
<p><a href="#i1007581">Data Streaming and Multiple Columns</a></p>
</li>
<li>
<p><a href="#i1021889">Streaming and Row Prefetching</a></p>
</li>
<li>
<p><a href="#i1021820">Closing a Stream</a></p>
</li>
<li>
<p><a href="#BHCDJAGI">Notes and Precautions on Streams</a></p>
</li>
</ul>
<a id="CJAJGJBA"></a>
<div id="JJDBC28410" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of Java Streams</h2>
<p>Oracle JDBC drivers support the manipulation of data streams in either direction between server and client. The drivers support all stream conversions: binary, ASCII, and Unicode. Following is a brief description of each type of stream:</p>
<ul>
<li>
<p>Binary</p>
<p>Used for <code>RAW</code> bytes of data, and corresponds to the <code>getBinaryStream</code> method</p>
</li>
<li>
<p>ASCII</p>
<p>Used for ASCII bytes in ISO-Latin-1 encoding, and corresponds to the <code>getAsciiStream</code> method</p>
</li>
<li>
<p>Unicode</p>
<p>Used for Unicode bytes with the <code>UTF-16</code> encoding, and corresponds to the <code>getUnicodeStream</code> method</p>
</li>
</ul>
<p>The <code>getBinaryStream</code>, <code>getAsciiStream</code>, and <code>getUnicodeStream</code> methods return the bytes of data in an <code>InputStream</code> object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the <code>CONNECTION_PROPERTY_STREAM_CHUNK_SIZE</code> is deprecated and the driver does not use it internally for setting the stream chunk size.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oralob.htm#g1070326">Chapter 14, &#34;Working with LOBs and BFILEs&#34;</a></div>
</div>
<!-- class="sect1" -->
<a id="i1014085"></a>
<div id="JJDBC28411" class="sect1">
<h2 class="sect1">Streaming LONG or LONG RAW Columns</h2>
<p><a id="sthref464"></a><a id="sthref465"></a>When a query selects one or more <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns, the JDBC driver transfers these columns to the client in streaming mode. In streaming mode, the JDBC driver does not read the column data from the network for <code>LONG</code> or <code>LONG RAW</code> columns, until required. The column data remains in the network communications channel until your code calls a <code>getXXX</code> method to read the column data. Even after the call, the column data is read only as needed to populate return value from the getXXX call. Because the column data remains in the communications channel, the streaming mode interferes with all other use of the connection. Any use of the connection, other than reading the column data, will discard the column data from the channel. While the streaming mode makes efficient use of memory and minimizes network round trips, it interferes with many other database operations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends avoiding <code>LONG</code> and <code>LONG RAW</code> columns. Use <code>LOB</code> instead.</div>
<p>To access the data in a <code>LONG</code> column, you can get the column as a Java <code>InputStream</code> object and use the <code>read</code> method of the <code>InputStream</code> object. As an alternative, you can get the data as a <code>String</code> or <code>byte</code> array. In this case, the driver will do the streaming for you.</p>
<p>You can get <code>LONG</code> and <code>LONG</code> <code>RAW</code> data with any of the three stream types. The driver performs conversions for you, depending on the character set of the database and the driver.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not create tables with <code>LONG</code> columns. Use large object (LOB) columns, <code>CLOB</code>, <code>NCLOB</code>, and <code>BLOB</code>, instead. <code>LONG</code> columns are supported only for backward compatibility. Oracle recommends that you convert existing <code>LONG</code> columns to <code>LOB</code> columns. <code>LOB</code> columns are subject to far fewer restrictions than <code>LONG</code> columns.</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1014085">Streaming LONG or LONG RAW Columns</a></p>
</li>
<li>
<p><a href="#i1014090">Streaming CHAR, VARCHAR, or RAW Columns</a></p>
</li>
<li>
<p><a href="#i1014109">Streaming LOBs and External Files</a></p>
</li>
<li>
<p><a href="#i1007581">Data Streaming and Multiple Columns</a></p>
</li>
<li>
<p><a href="#i1021820">Closing a Stream</a></p>
</li>
<li>
<p><a href="#BHCDJAGI">Notes and Precautions on Streams</a></p>
</li>
</ul>
<div id="JJDBC28412" class="sect2"><a id="sthref466"></a>
<h3 class="sect2">LONG RAW Data Conversions</h3>
<p><a id="sthref467"></a><a id="sthref468"></a>A call to <code>getBinaryStream</code> returns <code>RAW</code> data. A call to <code>getAsciiStream</code> converts the <code>RAW</code> data to hexadecimal and returns the ASCII representation. A call to <code>getUnicodeStream</code> converts the <code>RAW</code> data to hexadecimal and returns the Unicode characters.</p>
</div>
<!-- class="sect2" -->
<div id="JJDBC28413" class="sect2"><a id="sthref469"></a>
<h3 class="sect2">LONG Data Conversions</h3>
<p><a id="sthref470"></a><a id="sthref471"></a>When you get <code>LONG</code> data with <code>getAsciiStream</code>, the drivers assume that the underlying data in the database uses an <code>US7ASCII</code> or <code>WE8ISO8859P1</code> character set. If the assumption is true, then the drivers return bytes corresponding to ASCII characters. If the database is not using an <code>US7ASCII</code> or <code>WE8ISO8859P1</code> character set, a call to <code>getAsciiStream</code> returns meaningless information.</p>
<p>When you get <code>LONG</code> data with <code>getUnicodeStream</code>, you get a stream of Unicode characters in the <code>UTF-16</code> encoding. This applies to all underlying database character sets that Oracle supports.</p>
<p>When you get <code>LONG</code> data with <code>getBinaryStream</code>, there are two possible cases:</p>
<ul>
<li>
<p>If the driver is JDBC OCI and the <span class="italic">client</span> character set is <span class="italic">not</span> <code>US7ASCII</code> or <code>WE8ISO8859P1</code>, then a call to <code>getBinaryStream</code> returns <code>UTF-8</code>. If the <span class="italic">client</span> character set is <code>US7ASCII</code> or <code>WE8ISO8859P1</code>, then the call returns a <code>US7ASCII</code> stream of bytes.</p>
</li>
<li>
<p>If the driver is JDBC Thin and the <span class="italic">database</span> character set is <span class="italic">not</span> <code>US7ASCII</code> or <code>WE8ISO8859P1</code>, then a call to <code>getBinaryStream</code> returns <code>UTF-8</code>. If the server-side character set is <code>US7ASCII</code> or <code>WE8ISO8859P1</code>, then the call returns a <code>US7ASCII</code> stream of bytes.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="global.htm#CHDGGECB">Chapter 19, &#34;Globalization Support&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Receiving <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns as a stream requires you to pay special attention to the order in which you retrieve columns from the database. For more information, see <a href="#i1007581">&#34;Data Streaming and Multiple Columns&#34;</a>.</div>
<p><a href="#g1028088">Table 12-1</a> summarizes <code>LONG</code> and <code>LONG</code> <code>RAW</code> data conversions for each stream type.</p>
<div id="JJDBC28414" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref472"></a><a id="g1028088"></a>Table 12-1 LONG and LONG RAW Data Conversions</p>
<table class="cellalignment2247" title="LONG and LONG RAW Data Conversions" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t8">Data type</th>
<th class="cellalignment2245" id="r1c2-t8">BinaryStream</th>
<th class="cellalignment2245" id="r1c3-t8">AsciiStream</th>
<th class="cellalignment2245" id="r1c4-t8">UnicodeStream</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t8" headers="r1c1-t8">
<p><span class="bold">LONG</span></p>
</td>
<td class="cellalignment2246" headers="r2c1-t8 r1c2-t8">
<p>Bytes representing characters in Unicode <code>UTF-8</code>. The bytes can represent characters in <code>US7ASCII</code> or <code>WE8ISO8859P1</code> if the database character set is <code>US7ASCII</code> or <code>WE8ISO8859P1</code>.</p>
</td>
<td class="cellalignment2246" headers="r2c1-t8 r1c3-t8">
<p>Bytes representing characters in ISO-Latin-1 (<code>WE8ISO8859P1</code>) encoding</p>
</td>
<td class="cellalignment2246" headers="r2c1-t8 r1c4-t8">
<p>Bytes representing characters in Unicode <code>UTF-16</code> encoding</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t8" headers="r1c1-t8">
<p><span class="bold">LONG RAW</span></p>
</td>
<td class="cellalignment2246" headers="r3c1-t8 r1c2-t8">
<p>unchanged data</p>
</td>
<td class="cellalignment2246" headers="r3c1-t8 r1c3-t8">
<p>ASCII representation of hexadecimal bytes</p>
</td>
<td class="cellalignment2246" headers="r3c1-t8 r1c4-t8">
<p>Unicode representation of hexadecimal bytes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect2" -->
<div id="JJDBC28415" class="sect2"><a id="sthref473"></a>
<h3 class="sect2">Streaming Example for LONG RAW Data</h3>
<p>One of the features of a <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>Stream</code> method is that it enables you to fetch data incrementally. In contrast, <code>getBytes</code> fetches all the data in one call. <a id="sthref474"></a>This section contains two examples of getting a stream of binary data. The first version uses the <code>getBinaryStream</code> method to obtain <code>LONG</code> <code>RAW</code> data, and the second version uses the <code>getBytes</code> method.</p>
<p class="subhead2"><a id="JJDBC28416"></a>Getting a LONG RAW Data Column with getBinaryStream</p>
<p>This <a id="sthref475"></a>example writes the contents of a <code>LONG</code> <code>RAW</code> column to a file on the local file system. In this case, the driver fetches the data incrementally.</p>
<p>The following code creates the table that stores a column of <code>LONG</code> <code>RAW</code> data associated with the name LESLIE:</p>
<pre>-- SQL code:
create table streamexample (NAME varchar2 (256), GIFDATA long raw);
insert into streamexample values (&#39;LESLIE&#39;, &#39;00010203040506070809&#39;);
</pre>
<p>The following Java code snippet writes the data from the <code>LONG</code> <code>RAW</code> column into a file called <code>leslie.gif:</code></p>
<pre>ResultSet rset = stmt.executeQuery 
                 (&#34;select GIFDATA from streamexample where NAME=&#39;LESLIE&#39;&#34;);

// get first row
if (rset.next())
{
    // Get the GIF data as a stream from Oracle to the client
    InputStream gif_data = rset.getBinaryStream (1);
   try
   {
      FileOutputStream file = null;
      file = new FileOutputStream (&#34;leslie.gif&#34;);
      int chunk;
      while ((chunk = gif_data.read()) != -1)
         file.write(chunk);
   }
   catch (Exception e)
   {
      String err = e.toString();
      System.out.println(err);
   }
   finally
   {
      if file != null()
         file.close();
   }
} 
</pre>
<p>In this example, the <code>InputStream</code> object returned by the call to <code>getBinaryStream</code> reads the data directly from the database connection.</p>
<p class="subhead2"><a id="JJDBC28417"></a>Getting a LONG RAW Data Column with getBytes</p>
<p>This <a id="sthref476"></a>example gets the content of the <code>GIFDATA</code> column with <code>getBytes</code> instead of <code>getBinaryStream</code>. In this case, the driver fetches all the data in one call and stores it in a byte array. The code snippet is as follows:</p>
<pre>ResultSet rset2 = stmt.executeQuery 
                  (&#34;select GIFDATA from streamexample where NAME=&#39;LESLIE&#39;&#34;); 

// get first row
if (rset2.next())
{
   // Get the GIF data as a stream from Oracle to the client
   byte[] bytes = rset2.getBytes(1);
   try
   {
      FileOutputStream file = null;
      file = new FileOutputStream (&#34;leslie2.gif&#34;);
      file.write(bytes);
   }
   catch (Exception e)
   {
      String err = e.toString();
      System.out.println(err);
   }
   finally
   {
      if file != null()
         file.close();
   }
}
</pre>
<p>Because a <code>LONG RAW</code> column can contain up to 2 gigabytes of data, the <code>getBytes</code> example can use much more memory than the <code>getBinaryStream</code> example. Use streams if you do not know the maximum size of the data in your <code>LONG</code> or <code>LONG RAW</code> columns.</p>
</div>
<!-- class="sect2" -->
<div id="JJDBC28418" class="sect2"><a id="sthref477"></a>
<h3 class="sect2">Avoiding Streaming for LONG or LONG RAW</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), this method is deprecated. For more information, refer to <a href="release_changes.htm#BABFIJJJ">&#34;Deprecated Features&#34;</a>.</div>
<p><a id="sthref478"></a>The JDBC driver automatically streams any <code>LONG</code> and <code>LONG RAW</code> columns. However, there may be situations where you want to avoid data streaming. For example, if you have a very small <code>LONG</code> column, then you may want to avoid returning the data incrementally and, instead, return the data in one call.</p>
<p>To avoid streaming, use the <code><a id="sthref479"></a>defineColumnType</code> method to redefine the type of the <code>LONG</code> column. For example, if you redefine the <code>LONG</code> or <code>LONG RAW</code> column as <code>VARCHAR</code> or <code>VARBINARY</code> type, then the driver will not automatically stream the data.</p>
<p>If you redefine column types with <code>defineColumnType</code>, then you must declare the types of the columns in the query. If you do not declare the types of the columns, then <code>executeQuery</code> will fail. In addition, you must cast the <code>Statement</code> object to <code>oracle.jdbc.OracleStatement</code>.</p>
<p>As an added benefit, using <code>defineColumnType</code> saves the OCI driver a database round-trip when running the query. Without <code>defineColumnType</code>, these JDBC drivers must request the data types of the column types. The JDBC Thin driver derives no benefit from <code>defineColumnType</code>, because it always uses the minimum number of round-trips.</p>
<p>Using the example from the previous section, the <code>Statement</code> object <code>stmt</code> is cast to <code>OracleStatement</code> and the column containing <code>LONG RAW</code> data is redefined to be of the type <code>VARBINARAY</code>. The data is not streamed. Instead, it is returned in a byte array. The code snippet is as follows:</p>
<pre>//cast the statement stmt to an OracleStatement
oracle.jdbc.OracleStatement ostmt = 
   (oracle.jdbc.OracleStatement)stmt;

//redefine the LONG column at index position 1 to VARBINARY
ostmt.defineColumnType(1, Types.VARBINARY);

// Do a query to get the images named &#39;LESLIE&#39;
ResultSet rset = ostmt.executeQuery
         (&#34;select GIFDATA from streamexample where NAME=&#39;LESLIE&#39;&#34;);

// The data is not streamed here
rset.next();
byte [] bytes = rset.getBytes(1);
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1014090"></a>
<div id="JJDBC28419" class="sect1">
<h2 class="sect1">Streaming CHAR, VARCHAR, or RAW Columns</h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), this method is deprecated. For more information, refer to <a href="release_changes.htm#BABFIJJJ">&#34;Deprecated Features&#34;</a>.</div>
<p><a id="sthref480"></a><a id="sthref481"></a><a id="sthref482"></a>If you use the <code>defineColumnType</code> Oracle extension to redefine a <code>CHAR</code>, <code>VARCHAR</code>, or <code>RAW</code> column as a <code>LONGVARCHAR</code> or <code>LONGVARBINARY</code>, then you can get the column as a stream. The program will behave as if the column were actually of type <code>LONG</code> or <code>LONG RAW</code>. Note that there is not much point to this, because these columns are usually short.</p>
<p>If you try to get a <code>CHAR</code>, <code>VARCHAR</code>, or <code>RAW</code> column as a data stream without redefining the column type, then the JDBC driver will return a Java <code>InputStream</code>, but no real streaming occurs. In the case of these data types, the JDBC driver fully fetches the data into an in-memory buffer during a call to the <code>executeQuery</code> method or the <code>next</code> method. The <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>Stream</code> entry points return a stream that reads data from this buffer.</p>
</div>
<!-- class="sect1" -->
<a id="i1014109"></a>
<div id="JJDBC28420" class="sect1">
<h2 class="sect1">Streaming LOBs and External Files</h2>
<p><a id="sthref483"></a>The term large object (LOB) refers to a data item that is too large to be stored directly in a database table. Instead, a locator is stored in the database table, which points to the location of the actual data. External files are managed similarly. The JDBC drivers can support the following types through the use of strea<a id="sthref484"></a><a id="sthref485"></a>ms:</p>
<ul>
<li>
<p>Binary large object (BLOB)</p>
<p>For unstructured binary data</p>
</li>
<li>
<p>Character large object (CLOB)</p>
<p>For character data</p>
</li>
<li>
<p>National Character large object (NCLOB)</p>
<p>For national character data</p>
</li>
<li>
<p>Binary file (BFILE)</p>
<p>For external files</p>
</li>
</ul>
<p>LOBs and BFILEs behave differently from the other types of streaming data described in this chapter. Instead of storing the actual data in the table, a locator is stored. The actual data can be manipulated using this locator, including reading and writing the data as a stream. Even when streaming, only the chunk of data (defined by a size) is streamed across the network. By contrast, when streaming a <code>LONG</code> or <code>LONG</code> <code>RAW</code>, the entire data is streamed across the network.</p>
<p class="subhead2"><a id="JJDBC28421"></a>Streaming BLOBs, CLOBs, and NCLOBs</p>
<p>When a query fetches one or more <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code> columns, the JDBC driver transfers the data to the client. This data can be accessed as a stream. To manipulate <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code> data from JDBC, use methods in the Oracle extension classes <code>oracle.sql.BLOB</code>, <code>oracle.sql.CLOB</code> and <code>oracle.sql.NCLOB</code>. These classes provide specific functionality, such as reading from the <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code> into an input stream, writing from an output stream into a <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code>, determining the length of a <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code>, and closing a <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the concrete classes in the <code>oracle.sql</code> package are deprecated and replaced with the interfaces in the <code>oracle.jdbc</code> package. Oracle recommends you to use the methods available in the <code>java.sql</code> package, where possible, for standard compatibility and methods available in the <code>oracle.jdbc</code> package for Oracle specific extensions. Refer to MoS Note 1364193.1 for more information about these interfaces.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oralob.htm#CHDGJJDD">&#34;Data Interface for LOBs&#34;</a></div>
<p class="subhead2"><a id="JJDBC28422"></a>Streaming BFILEs</p>
<p><a id="sthref486"></a><a id="sthref487"></a>An external file, or BFILE, is used to store a locator to a file outside the database. The file can be stored somewhere on the file system of the data server. The locator points to the actual location of the file.</p>
<p>When a query fetches one or more <code>BFILE</code> columns, the JDBC driver transfers the file to the client as required. The data can be accessed as a stream To manipulate BFILE data from JDBC, use methods in the Oracle extension class <code>oracle.sql.BFILE</code>. This class provides specific functionality, such as reading from the BFILE into an input stream, writing from an output stream into a BFILE, determining the length of a BFILE, and closing a BFILE.</p>
</div>
<!-- class="sect1" -->
<a id="i1007581"></a>
<div id="JJDBC28423" class="sect1">
<h2 class="sect1">Data Streaming and Multiple Columns</h2>
<p><a id="sthref488"></a>If a query fetches multiple columns and one of the columns contains a data stream, then the contents of the columns following the stream column are not available until the stream has been read, and the stream column is no longer available once any following column is read. Any attempt to read a column beyond a streaming column closes the streaming column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1021779">&#34;Streaming Data Precautions&#34;</a></div>
<p class="subhead2"><a id="JJDBC28424"></a>Streaming Example with Multiple Columns</p>
<p>Consider the following code:</p>
<pre>ResultSet rset = stmt.executeQuery
        (&#34;select DATECOL, LONGCOL, NUMBERCOL from TABLE&#34;);
while rset.next()
{
   //get the date data
   java.sql.Date date = rset.getDate(1);

   // get the streaming data
   InputStream is = rset.getAsciiStream(2); 

   // Open a file to store the gif data
   FileOutputStream file = new FileOutputStream (&#34;ascii.dat&#34;);

   // Loop, reading from the ascii stream and 
   // write to the file
   int chunk;
   while ((chunk = is.read ()) != -1)
      file.write(chunk);
   // Close the file
   file.close();

   //get the number column data
   int n = rset.getInt(3);  
}
</pre>
<p>The incoming data for each row has the following shape:</p>
<pre>&lt;a date&gt;&lt;the characters of the long column&gt;&lt;a number&gt;
</pre>
<p>As you process each row of the result set, you must complete any processing of the stream column before reading the number column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014109">&#34;Streaming LOBs and External Files&#34;</a></div>
<p class="subhead2"><a id="i1014850"></a><a id="JJDBC28425"></a>Bypassing Streaming Data Columns</p>
<p>There may be situations where you want to avoid reading a column that contains streaming data. If you <a id="sthref489"></a>do not want to read such data, then call the <code>close</code> method of the stream object. This method discards the stream data and enables the driver to continue reading data from all the columns that contain non-streaming data and follow the column containing streaming data. Even though you are intentionally discarding the stream, it is a good programming practice to retrieve the columns in the same order as in the <code>SELECT</code> statement.</p>
<p>In the following example, the stream data in the <code>LONG</code> column is discarded and the data from only the <code>DATE</code> and <code>NUMBER</code> column is recovered:</p>
<pre>ResultSet rset = stmt.executeQuery
        (&#34;select DATECOL, LONGCOL, NUMBERCOL from TABLE&#34;);

while rset.next()
{
   //get the date
   java.sql.Date date = rset.getDate(1);
   
   // access the stream data and discard it with close()
   InputStream is = rset.getAsciiStream(2);
   is.close();   
   
   // get the number column data
   int n = rset.getInt(3); 
}
</pre></div>
<!-- class="sect1" -->
<a id="i1021820"></a>
<div id="JJDBC28426" class="sect1">
<h2 class="sect1">Closing a Stream</h2>
<p><a id="sthref490"></a>You can discard the data from a stream at any time by calling the <code>close</code> method. It is a good programming practice to close the stream when you no longer need it. For example:</p>
<pre>   ...
   InputStream is = rset.getAsciiStream(2);
   is.close();   
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014850">&#34;Bypassing Streaming Data Columns&#34;</a> and <a href="#i1021779">&#34;Streaming Data Precautions&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Closing a stream has little performance effect on a LONG or LONG RAW column. All of the data still move across the network and the driver must read the bits from the network.</div>
</div>
<!-- class="sect1" -->
<a id="BHCDJAGI"></a>
<div id="JJDBC28427" class="sect1">
<h2 class="sect1">Notes and Precautions on Streams</h2>
<p>This section discusses several cautionary issues regarding the use of streams:</p>
<ul>
<li>
<p><a href="#i1021779">Streaming Data Precautions</a></p>
</li>
<li>
<p><a href="#i1022067">Using Streams to Avoid Limits on setBytes and setString</a></p>
</li>
<li>
<p><a href="#i1021889">Streaming and Row Prefetching</a></p>
</li>
</ul>
<a id="i1021779"></a>
<div id="JJDBC28428" class="sect2">
<h3 class="sect2">Stream<a id="sthref491"></a>ing Data Precautions</h3>
<p>This section describes some of the precautions you must take to ensure that you do not accidentally discard or lose your stream data. The drivers automatically discard stream data if you perform any JDBC operation that communicates with the database, other than reading the current stream. Two common precautions are:</p>
<a id="i1021782"></a>
<ul>
<li>
<p>Use the stream data after you access it.</p>
<p>To recover the data from a column containing a data stream, it is not enough to fetch the column. You must immediately process the contents of the column. Otherwise, the contents will be discarded when you fetch the next column.</p>
</li>
<li id="i1021785">
<p>Call the stream column in the same order as in the <code>SELECT</code> statement.</p>
<p>If your query fetches multiple columns, the database sends each row as a set of bytes representing the columns in the <code>SELECT</code> order. If one of the columns contains stream data, then the database sends the entire data stream before proceeding to the next column.</p>
<p>If you do not use the order as in the <code>SELECT</code> statement to access data, then you can lose the stream data. That is, if you bypass the stream data column and access data in a column that follows it, then the stream data will be lost. For example, if you try to access the data for the <code>NUMBER</code> column <span class="italic">before</span> reading the data from the stream data column, then the JDBC driver first reads then discards the streaming data automatically. This can be very inefficient if the <code>LONG</code> column contains a large amount of data.</p>
<p>If you try to access the <code>LONG</code> column later in the program, then the data will not be available and the driver will return a &#34;<code>Stream Closed</code>&#34; error.</p>
</li>
</ul>
<p>The later point is illustrated in the following example:</p>
<pre>ResultSet rset = stmt.executeQuery
        (&#34;select DATECOL, LONGCOL, NUMBERCOL from TABLE&#34;);
while rset.next()
{
   int n = rset.getInt(3);  // This discards the streaming data
   InputStream is = rset.getAsciiStream(2);
                            // Raises an error: stream closed.
}
</pre>
<p>If you get the stream but do not use it <span class="italic">before</span> you get the <code>NUMBER</code> column, then the stream still closes automatically:</p>
<pre>ResultSet rset = stmt.executeQuery
                 (&#34;select DATECOL, LONGCOL, NUMBERCOL from TABLE&#34;);
while rset.next()
{
   InputStream is = rset.getAsciiStream(2); // Get the stream
   int n = rset.getInt(3);
   // Discards streaming data and closes the stream
}
int c = is.read(); // c is -1: no more characters to read-stream closed
</pre></div>
<!-- class="sect2" -->
<a id="i1022067"></a>
<div id="JJDBC28429" class="sect2">
<h3 class="sect2">Using Stre<a id="sthref492"></a><a id="sthref493"></a><a id="sthref494"></a><a id="sthref495"></a>ams to Avoid Limits on setBytes and setString</h3>
<p>Starting from Oracle Database 12<span class="italic">c</span>, the size limit of the data that is used with the <code>setBytes</code> and <code>setString</code> methods, have been increased significantly. Any Java <code>byte</code> array can be passed to <code>setBytes</code>, and any Java <code>String</code> can be passed to <code>setString</code>. The JDBC driver automatically switches to using <code>setBinaryStream</code> or <code>setCharacterStream</code> or to using <code>setBytesForBlob</code> or <code>setStringForClob</code>, depending on the size of the data, whether the statement is SQL or PL/SQL, and the driver used.</p>
<p>There are some limitation with earlier versions of Oracle Database and in the server-side internal driver.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oralob.htm#CHDGJJDD">&#34;Data Interface for LOBs&#34;</a> and release notes for details</div>
</div>
<!-- class="sect2" -->
<a id="i1021889"></a>
<div id="JJDBC28430" class="sect2">
<h3 class="sect2">Streaming and Row Prefetching</h3>
<p>If the JDBC driver encounters a<a id="sthref496"></a><a id="sthref497"></a> column containing a data stream, then row fetch size is set back to one. Row fetch size is an Oracle performance enhancement that enables multiple rows of data to be retrieved with each trip to the database.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="datacc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="oraoot.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>