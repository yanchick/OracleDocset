<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-70995"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Features%20Specific%20to%20JDBC%20Thin"></a><title>Features Specific to JDBC Thin</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:36Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oraint.htm" title="Previous" type="text/html"/>
<link rel="Next" href="instclnt.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/55</span> <!-- End Header -->
<div id="JJDBC28195" class="chapter"><a id="CACCHECD"></a>
<h1 class="chapter"><span class="secnum">5</span> Features Specific to JDBC Thin</h1>
<p>This chapter introduces the Java Database Connectivity (JDBC) Thin client and covers the features supported only by the JDBC Thin driver. It also provides basic information about working with Oracle JDBC applets. This following topics are covered in this chapter:</p>
<ul>
<li>
<p><a href="#CACGGDCE">Overview of JDBC Thin Client</a></p>
</li>
<li>
<p><a href="#CACBBEDB">Additional Features Supported</a></p>
</li>
<li>
<p><a href="#CACJHJAE">JDBC in Applets</a></p>
</li>
</ul>
<a id="CACGGDCE"></a>
<div id="JJDBC28196" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of JDBC Thin Client</h2>
<p>The JDBC Thin client is a pure Java, Type IV driver. It is lightweight and easy to install. It provides high performance, comparable to the performance provided by the JDBC Oracle Call Interface (OCI) driver. The JDBC Thin driver is written entirely in Java, and therefore, it is platform-independent. Also, this driver does not require any additional Oracle software on the client-side.</p>
<p>The JDBC Thin driver communicates with the server using TTC, a protocol developed by Oracle to access data from Oracle Database. It can be used for application servers as well as for applets. The driver allows a direct connection to the database by providing an implementation of TCP/IP that implements Oracle Net and TTC on top of Java sockets. Both of these protocols are lightweight implementation versions of their counterparts on the server. The Oracle Net protocol runs over TCP/IP only.</p>
<p>The JDBC Thin driver can be used on both the client-side and the server-side. On the client-side, drivers can be used in Java applications or Java applets that run either on the client or in the middle tier of a three-tier configuration. On the server-side, this driver is used to access a remote Oracle Database instance or another session on the same database.</p>
</div>
<!-- class="sect1" -->
<a id="CACBBEDB"></a>
<div id="JJDBC28197" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Additional Features Supported</h2>
<p>The JDBC Thin driver supports all standard JDBC features. The JDBC Thin driver also provides support for the following additional features:</p>
<ul>
<li>
<p><a href="#CACJHGIA">Default Support for Native XA</a></p>
</li>
<li>
<p><a href="#CHDFEIHB">Support for Transaction Guard</a></p>
</li>
<li>
<p><a href="#CHDFIEII">Support for Application Continuity</a></p>
</li>
<li>
<p><a href="#CACCJIAB">Support for Applets</a></p>
</li>
</ul>
<a id="CACJHGIA"></a>
<div id="JJDBC28199" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Default Support for Native XA</h3>
<p>Similar to the JDBC OCI driver, the JDBC Thin driver also provides support for Native XA. However, the JDBC Thin driver provides support for Native XA by default. This is unlike the case of the JDBC OCI driver, in which the support for Native XA is not enabled by default.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xadistra.htm#BGBIDIGD">&#34;Native-XA in Oracle JDBC Drivers&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDFEIHB"></a>
<div id="JJDBC29148" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Support for Transaction Guard</h3>
<p>Transaction Guard feature provides a generic infrastructure for at-most-once execution during planned and unplanned outages and duplicate submissions. Transaction Guard feature (along with Application Continuity feature) provides transparent session recovery and replay of SQL statements (queries and DMLs) since the beginning of the in-flight transaction.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transactionguard.htm#CIHCDEHC">Chapter 26, &#34;Transaction Guard for Java&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDFIEII"></a>
<div id="JJDBC29112" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Support for Application Continuity</h3>
<p>Application Continuity provides a general purpose, application-independent infrastructure that enables recovery of work from an application perspective, after the occurrence of a planned or unplanned outage. It provides the following benefits:</p>
<ul>
<li>
<p>Masking of outages from the end user</p>
</li>
<li>
<p>Recovery of user environments, in-flight transactions, and lost outcome</p>
</li>
<li>
<p>A single, easy, and foolproof method for applications to recover</p>
</li>
<li>
<p>A definite target response time for applications, regardless of outages</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="appcontnew.htm#CJADIIJJ">Chapter 27, &#34;Application Continuity for Java&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="CACCJIAB"></a>
<div id="JJDBC28198" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Support for Applets</h3>
<p>The JDBC Thin driver is the only Oracle JDBC driver that provides support for applets. This driver can be downloaded along with the Java applet that is being run in a browser.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the JDBC Thin driver is used with an applet, the browser used on the client-side must have the capability to support Java sockets.</div>
<p>The HTTP protocol, which is usually used for communication over a network, is stateless. However, the JDBC Thin driver is not stateless. Therefore, the initial HTTP request to download the applet and the JDBC Thin driver is stateless. After the JDBC Thin driver establishes the database connection, the communication between the browser and the database is stateful and in a two-tier configuration.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACJHJAE">&#34;JDBC in Applets&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACJHJAE"></a>
<div id="JJDBC28200" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">JDBC in Applets<a id="sthref269"></a></h2>
<p>You can use only the Oracle <a id="sthref270"></a>JDBC Thin driver for an applet. This section describes what you must do to connect an applet to a database. This description includes how to use the Connection Manager feature of Oracle Database, or signed applets if you are connecting to a database that is running on a different host from the Web server. It also describes how your applet can connect to a database through a firewall. The section concludes with how to package and deploy the applet.</p>
<p>The following topics are covered:</p>
<ul>
<li>
<p><a href="#i1004498">Connecting to the Database Through the Applet</a></p>
</li>
<li>
<p><a href="#i1025242">Connecting to a Database on a Different Host Than the Web Server</a></p>
</li>
<li>
<p><a href="#i1003919">Using Applets with Firewalls</a></p>
</li>
<li>
<p><a href="#i1003943">Packaging Applets</a></p>
</li>
<li>
<p><a href="#i1004507">Specifying an Applet in an HTML Page</a></p>
</li>
</ul>
<a id="i1004498"></a>
<div id="JJDBC28201" class="sect2">
<h3 class="sect2">Connect<a id="sthref271"></a>ing to the Database Through the Applet</h3>
<p><a id="sthref272"></a>The most common task of an applet using the JDBC driver is to connect to and query a database. Because of applet security restrictions, unless particular steps are taken, an applet can open TCP/IP sockets only to the host from which it was downloaded. This is the host on which the Web server is running. This means that without these steps, your applet can connect only to a database that is running on the same host as the Web server.</p>
<p>If your database and Web server are running on the same host, then there is no issue and no special steps are required. You can connect to the database as you would from an application.</p>
<p>As with connecting from an application, there are two ways in which you can specify the connection information to the driver. You can provide it in the form of <code>host:port:service_name</code> or in the form of TNS keyword-value syntax.</p>
<p>For example, if the database to which you want to connect resides on the <code>localost</code>, at port <code>5221</code>, and service name <code>orcl</code>, and you want to connect with user name <code>HR</code> and password <code>hr</code>, then use either of the two following connection strings:</p>
<ul>
<li>
<p>Using <code>host:port:service_name</code> syntax:</p>
<pre>String connString=&#34;jdbc:oracle:thin:@localhost:5221:orcl&#34;;

OracleDataSource ods = new OracleDataSource();
ods.setURL(connString);
ods.setUser(&#34;HR&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();
</pre></li>
<li>
<p>Using TNS keyword-value syntax:</p>
<pre>String connString = &#34;jdbc:oracle:thin:@(description=(address_list=(address=(protocol=tcp)
(port=5221)(host=localHost)))(connect_data=(INSTANCE_NAME=orcl)))&#34;;
OracleDataSource ods = new OracleDataSource();

ods.setURL(connString);
ods.setUser(&#34;HR&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();
</pre></li>
</ul>
<p>If you use the TNS keyword-value pair to specify the connection information to the JDBC Thin driver, then you must declare the protocol as TCP.</p>
<p>However, a Web server and database server both require many resources. You seldom find both servers running on the same computer. Usually, your applet connects to a database on a host other than the one on which the Web server runs. If you want your applet to connect to a database running on a different computer, then you have the following options:</p>
<ul>
<li>
<p>Use the <a id="sthref273"></a>Oracle Connection Manager on the host computer. The applet can connect to the Connection Manager, which connects to a database on another computer.</p>
</li>
</ul>
<ul>
<li>
<p>Use <a id="sthref274"></a>signed applets, which can request socket connection privileges to other computers.</p>
</li>
</ul>
<p>Your applet can also take advantage of the data encryption and integrity checksum features of the Advanced Security option of Oracle Database.</p>
</div>
<!-- class="sect2" -->
<a id="i1025242"></a>
<div id="JJDBC28202" class="sect2">
<h3 class="sect2">Connecting to a Database on a Different Host Than the Web Server</h3>
<p>If you are connecting to a database on a host other than the one on which the Web server is running, then you must overcome applet security restrictions. You can do this in the following ways:</p>
<ul>
<li>
<p><a href="#i1004541">Using the Oracle Connection Manager</a></p>
</li>
<li>
<p><a href="#i1026015">Using Signed Applets</a></p>
</li>
</ul>
<a id="i1004541"></a>
<div id="JJDBC28203" class="sect3">
<h4 class="sect3">Using the Oracle Connection Manager</h4>
<p>The Oracle <a id="sthref275"></a>Connection Manager is a lightweight, highly scalable program that can receive Oracle Net packets and retransmit them to a different server. To a client running Oracle Net, the Connection Manager looks exactly like a database server. An applet that uses the JDBC Thin driver can connect to a Connection Manager running on the Web server host and have the Connection Manager redirect the Oracle Net packets to an Oracle server running on a different host.</p>
<p><a href="#i1012428">Figure 5-1</a> illustrates the relationship between the applet, the Oracle Connection Manager, and the database.</p>
<div id="JJDBC28204" class="figure">
<p class="titleinfigure"><a id="i1012428"></a>Figure 5-1 Applet, Connection Manager, and Database Relationship</p>
<img width="396" height="106" src="img/applcon.gif" alt="Description of Figure 5-1 follows"/><br/>
<a id="sthref276" href="img_text/applcon.htm">Description of &#34;Figure 5-1 Applet, Connection Manager, and Database Relationship &#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Using the Oracle Connection Manager requires two steps:</p>
<ul>
<li>
<p>Install and run the Connection Manager.</p>
</li>
<li>
<p>Write the connection string that targets the Connection Manager.</p>
</li>
</ul>
<p class="subhead2"><a id="i1014677"></a><a id="JJDBC28205"></a>Installing and Running the Oracle Connection Manager</p>
<p>You must install the <a id="sthref277"></a>Connection Manager, available on the Oracle distribution media, onto the Web server host.</p>
<p>On the Web server host, create a <code><a id="sthref278"></a>CMAN.ORA</code> file in the <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/NET8/ADMIN</code> directory. The options you can declare in a <code>CMAN.ORA</code> file include firewall and connection pooling support.</p>
<p>Here is an example of a very simple <code>CMAN.ORA</code> file. Replace <code><span class="codeinlineitalic">web-server-host</span></code> with the name of your Web server host. The fourth line in the file indicates that the Connection Manager is listening on port <code>1610</code>. You must use the same port number in your connection string for JDBC.</p>
<pre>cman = (ADDRESS_LIST = 
       (ADDRESS = (PROTOCOL=TCP) 
       (HOST=<span class="italic">web-server-host</span>)
       (PORT=1610)))

cman_profile = (parameter_list = 
       (MAXIMUM_RELAYS=512) 
       (LOG_LEVEL=1) 
   (TRACING=YES) 
       (RELAY_STATISTICS=YES) 
       (SHOW_TNS_INFO=YES) 
       (USE_ASYNC_CALL=YES) 
       (AUTHENTICATION_LEVEL=0)
       )
</pre>
<p>After you create the file, start the <a id="sthref279"></a>Connection Manager at the operating system prompt with the following command:</p>
<pre>cmctl start
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
While installing Oracle Connection Manager, if you choose to run Oracle Connection Manager services as an authenticated user, then the <code>cmctl</code> command asks for a password. But, if you choose to run Oracle Connection Manager services as a local service account, then the <code>cmctl</code> command does not ask for a password.</div>
<p>To use your applet, you must now write the connection string for it.</p>
<p class="subhead2"><a id="i1015991"></a><a id="JJDBC28206"></a>Writing the URL that Targets the Connection Manager</p>
<p>The following text describes how to write the URL in your applet, so that the applet connects to the <a id="sthref280"></a><a id="sthref281"></a>Connection Manager and the Connection Manager connects with the database. In the URL, you specify an address list that lists the protocol, port, and name of the Web server host on which the Connection Manager is running, followed by the protocol, port, and name of the host on which the database is running.</p>
<p>The following example describes the configuration illustrated in <a href="#i1012428">Figure 5-1</a>. The Web server on which the Connection Manager is running is on host <code>webHost</code> and is listening on port <code>1610</code>. The database to which you want to connect is running on host <code>oraHost</code>, listening on port <code>5221</code>, and service name <code>orcl</code>. You write the URL in TNS keyword-value format:</p>
<pre>String myURL = 
   &#34;jdbc:oracle:thin:@(description=(address_list=
   (address=(protocol=tcp)(port=1610)(host=webHost))
   (address=(protocol=tcp)(port=5221)(host=oraHost)))
   (connect_data=(INSTANCE_NAME=orcl))
   (source_route=yes))&#34;;
  OracleDataSource ods = new OracleDataSource();
  ods.setURL(myURL);
  ods.setUser(&#34;HR&#34;);
  ods.setPassword(&#34;hr&#34;);
  Connection conn = ods.getConnection();
</pre>
<p>The first element in the <code>address_list</code> entry represents the connection to the Connection Manager. The second element represents the database to which you want to connect. The order in which you list the addresses is important.</p>
<p>When your applet uses a URL, such as the preceding one, it will function exactly as if it were connected directly to the database on the host <code>oraHost</code>.</p>
<p class="subhead2"><a id="JJDBC28207"></a>Connecting Through Multiple Connection Managers</p>
<p>Your applet <a id="sthref282"></a><a id="sthref283"></a>can reach its target database even if it first has to go through multiple Connection Managers. For example, if the Connection Managers form a proxy chain. To do this, add the addresses of the Connection Managers to the address list, in the order that you plan to access them. The database listener should be the last address on this list.</p>
</div>
<!-- class="sect3" -->
<a id="i1026015"></a>
<div id="JJDBC28208" class="sect3">
<h4 class="sect3">Using Sig<a id="sthref284"></a>ned Applets</h4>
<p>In a Java Development Kit (JDK) 1.2.x-based or later browser, an applet can request socket connection privileges and connect to a database running on a different host than the Web server host. Starting from Netscape 4.0, you perform this by <a id="sthref285"></a>signing your applet, that is, writing a signed applet. You must follow these steps:</p>
<ol>
<li>
<p>Sign the applet. For information about the steps you must follow to sign an applet, refer to</p>
<p><code><a href="http://www.oracle.com/technetwork/java/index.htm">http://www.oracle.com/technetwork/java/index.htm</a></code></p>
</li>
<li>
<p>Include applet code that asks for appropriate privileges before opening a socket.</p>
<p>If you are using Netscape, then your code would include a statement like this:</p>
<pre>netscape.security.PrivilegeManager.enablePrivilege(&#34;UniversalConnect&#34;); 
OracleDataSource ods = new OracleDataSource();
ods.setURL(&#34;jdbc:oracle:thin:HR/hr@localhost:5221:orcl&#34;);
Connection conn = ods.getConnection();
</pre></li>
<li>
<p>You must obtain an <a id="sthref286"></a>object-signing certificate. Refer to a site that provides information about obtaining and installing a certificate.</p>
</li>
</ol>
<p>For information about the Java Security API, including signed applet examples, see the following site:</p>
<p><code><a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a></code></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1003919"></a>
<div id="JJDBC28209" class="sect2">
<h3 class="sect2">Using Applets with Firewalls</h3>
<p>Under <a id="sthref287"></a><a id="sthref288"></a>standard circumstances, an applet that uses the JDBC Thin driver cannot access the database through a firewall. In general, the purpose of a firewall is to prevent unauthorized clients from reaching the server. In the case of applets trying to connect to the database, the firewall prevents the opening of a TCP/IP socket to the database.</p>
<p><a id="sthref289"></a>In general, firewalls are rule-based. They have a list of rules that define which clients can connect, and which cannot. Firewalls compare the host name of the client with the rules and, based on this comparison, either grant the client access or deny access. If the host name lookup fails, then the firewall tries again. This time, the firewall extracts the IP address of the client and compares it to the rules. The firewall is designed to do this so that users can specify rules that include host names as well as IP addresses.</p>
<p>You can solve the firewall issue by using an Oracle Net-compliant firewall and connection strings that comply with the firewall configuration. Oracle Net-compliant firewalls are available from many leading vendors.</p>
<p>An unsigned applet can access only the same host from which it is downloaded. In this case, the Oracle Net-compliant firewall must be installed on that host. In contrast, a signed applet can connect to any host. In this case, the firewall on the target host controls the access.</p>
<p>Connecting through a firewall requires two steps, as described in the following sections:</p>
<ul>
<li>
<p><a href="#i1004269">Configuring a Firewall for Applets that use the JDBC Thin Driver</a></p>
</li>
<li>
<p><a href="#i1004276">Writing a URL to Connect Through a Firewall</a></p>
</li>
</ul>
<a id="i1004269"></a>
<div id="JJDBC28210" class="sect3">
<h4 class="sect3">Configuring a Firewall for Applets that use the JDBC Thin Driver</h4>
<p>The <a id="sthref290"></a>instructions in this section assume that you are running an Oracle Net-compliant firewall.</p>
<p>Java applets do not have access to the local system. Because of the security limitations, applets cannot access the host name or environment variables on the local system. As a result, the JDBC Thin driver cannot access the host name on which it is running. The firewall cannot be provided with the host name. To allow requests from JDBC Thin clients to go through the firewall, you must do the following to the <a id="sthref291"></a>list of firewall rules:</p>
<ul>
<li>
<p>Add the IP address, and not the host name, of the host on which the JDBC applet is running.</p>
</li>
<li>
<p>Ensure that the host name, &#34;<code>__jdbc__</code>&#34;, never appears in the firewall rules. This host name has been hard-coded as a false host name inside the driver to force an IP address lookup. If you do enter this host name in the list of rules, then every applet using the JDBC Thin driver will be able to go through your firewall.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1004276"></a>
<div id="JJDBC28211" class="sect3">
<h4 class="sect3">Writing a URL to Connect Through a Firewall</h4>
<p>To <a id="sthref292"></a>write a URL that enables you to connect through a firewall, you must specify the name of the firewall host and the name of the database host to which you want to connect.</p>
<p>For example, if you want to connect to a database on host <code>oraHost</code>, listening on port <code>5221</code>, with service name <code>orcl</code>, and you are going though a firewall on host <code>fireWallHost</code>, listening on port <code>1610</code>, then use the following URL:</p>
<pre>OracleDataSource ods = new OracleDataSource();
ods.setURL(&#34;jdbc:oracle:thin:&#34; +
      &#34;@(description=(address_list=&#34; +
      (address=(protocol=tcp)(host=&lt;firewall-host&gt;)(port=1610))&#34; +
      &#34;(address=(protocol=tcp)(host=oraHost)(port=5221)))&#34; +
      &#34;(source_route=yes)&#34; +
      &#34;(connect_data=(service_name=orcl)))&#34;);
);
ods.setUser(&#34;HR&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
To connect through a firewall, you cannot specify the URL in <code>host:port:service_name</code> syntax. For example, a URL specified as follows will <span class="italic">not</span> work:
<pre>String connString =
   &#34;jdbc:oracle:thin:@example.us.oracle.com:5221:orcl&#34;;

OracleDataSource ods = new OracleDataSource();
ods.setURL(connString);
ods.setUser(&#34;HR&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();
</pre></div>
<p>The first element in the <code>address_list</code> represents the connection to the firewall. The second element represents the database to which you want to connect. Note that the order in which you specify the addresses is important.</p>
<p>You can also write the preceding URL in the following format:</p>
<pre>String connString = 
      &#34;jdbc:oracle:thin:@(description=(address_list=
      (address=(protocol=tcp)(port=1600)(host=fireWallHost))
      (address=(protocol=tcp)(port=5221)(host=oraHost)))
      (connect_data=(INSTANCE_NAME=orcl))
      (source_route=yes))&#34;;
OracleDataSource ods = new OracleDataSource();
ods.setURL(connString);
ods.setUser(&#34;HR&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();
</pre>
<p>When your applet uses a URL similar to the preceding URL, it will act as if it were connected to the database on host <code>oraHost</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All the parameters shown in the preceding example are required. In <code>address_list</code>, the firewall address must precede the database server address.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1003943"></a>
<div id="JJDBC28212" class="sect2">
<h3 class="sect2">Packaging Applets</h3>
<p><a id="sthref293"></a>After you have coded your applet, you must package it and make it available to users. To package an applet, you will need your applet class files and the JDBC driver class files contained in the <code>ojdbc6.jar</code> or <code>ojdbc7.jar</code> files.</p>
<p>Follow these steps:</p>
<ol>
<li>
<p>Move the JDBC driver classes file <code>ojdbc6.jar</code> or <code>ojdbc7.jar</code> to an empty directory.</p>
<p>If your applet connects to a database with a non-<code>US7ASCII</code> and non-<code>WE8ISO8859P1</code> character set and uses Oracle object types, then also move the <code>orai18n.jar</code> file to the same directory.</p>
</li>
<li>
<p>Add your applet classes files to the directory and any other files that the applet may require.</p>
</li>
<li>
<p>Zip the ap<a id="sthref294"></a>plet classes and driver classes together into a single ZIP or Java Archive (JAR) file. The single ZIP file should contain the following:</p>
<ul>
<li>
<p>Class files from the <code>ojdbc6.jar</code> or <code>ojdbc7.jar</code> files and required class files from the <code>orai18n.jar</code> files, if the applet requires Globalization Support</p>
</li>
<li>
<p>Your applet classes</p>
</li>
</ul>
</li>
<li>
<p>Ensure that the ZIP or JAR file is <span class="italic">not</span> compressed.</p>
</li>
</ol>
<p>You can now make the applet available to users. One way to do this is to add the <code>APPLET</code> tag to the HTML page from which the applet will be run. For example:</p>
<pre>&lt;APPLET WIDTH=500 HEIGHT=200 CODE=JdbcApplet ARCHIVE=JdbcApplet.zip 
      CODEBASE=Applet_Samples 
&lt;/APPLET&gt;
</pre></div>
<!-- class="sect2" -->
<a id="i1004507"></a>
<div id="JJDBC28213" class="sect2">
<h3 class="sect2">Specifying an Applet in an HTML Page</h3>
<p>The <code>APPLET</code> tag <a id="sthref295"></a><a id="sthref296"></a>specifies an applet that runs in the context of an HTML page. The <code>APPLET</code> tag can have the following attributes: <code>CODE</code>, <code>ARCHIVE</code>, <code>CODEBASE</code>, <code>WIDTH</code>, and <code>HEIGHT</code>. These attributes are described in the following sections:</p>
<ul>
<li>
<p><a href="#CACJCDJJ">CODE, HEIGHT, and WIDTH</a></p>
</li>
<li>
<p><a href="#CACJDBAA">CODEBASE</a></p>
</li>
<li>
<p><a href="#CACIACAI">ARCHIVE</a></p>
</li>
</ul>
<a id="CACJCDJJ"></a>
<div id="JJDBC28214" class="sect3">
<h4 class="sect3">CODE, HEIGHT, and WIDTH</h4>
<p>The HTML page that runs the applet must have an <code><a id="sthref297"></a><a id="sthref298"></a><a id="sthref299"></a><a id="sthref300"></a>APPLET</code> tag with an initial width and height to specify the size of the applet display area. You use the <code>HEIGHT</code> and <code>WIDTH</code> attributes to specify the size, measured in pixels. This size should not count any windows or dialog boxes that the applet opens.</p>
<p>The <code>APPLET</code> tag must also specify the name of the file that contains the compiled applet. Specify the file name with the <code>CODE</code> attribute. Any path specified must be relative to the base URL of the applet. The path cannot be absolute.</p>
<p>In the following example, <code>JdbcApplet.class</code> is the name of the compiled applet:</p>
<pre>&lt;APPLET CODE=&#34;JdbcApplet&#34; WIDTH=500 HEIGHT=200&gt; 
&lt;/APPLET&gt;
</pre>
<p>If you use this form of the <code>CODE</code> attribute, then the classes for the applet and the JDBC Thin driver must be in the same directory as the HTML page.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not include the file name extension, <code>.class</code>, in the <code>CODE</code> attribute.</div>
</div>
<!-- class="sect3" -->
<a id="CACJDBAA"></a>
<div id="JJDBC28215" class="sect3">
<h4 class="sect3">CODEBASE</h4>
<p>The <code><a id="sthref301"></a>CODEBASE</code> attribute is optional. It specifies the base URL of the applet, that is, the name of the directory that contains the code of the applet. If it is not specified, then the URL of the document is used. This means that the classes for the applet and the JDBC Thin driver must be in the same directory as the HTML page. For example, if the current directory is <code>my_Dir</code>:</p>
<pre>&lt;APPLET WIDTH=500 HEIGHT=200 CODE=JdbcApplet CODEBASE=&#34;.&#34;
&lt;/APPLET&gt;
</pre>
<p>The attribute, <code>CODEBASE=&#34;.&#34;</code>, indicates that the applet resides in the current directory, <code>my_Dir</code>.</p>
<p>Now, consider that the value of <code>CODEBASE</code> is set to <code>Applet_Samples</code>, as follows:</p>
<pre>&lt;APPLET WIDTH=500 HEIGHT=200 CODE=JdbcApplet CODEBASE=&#34;Applet_Samples&#34;
&lt;/APPLET&gt;
</pre>
<p>This would indicate that the applet resides in the <code>my_Dir</code>/<code>Applet_Samples</code> directory.</p>
</div>
<!-- class="sect3" -->
<a id="CACIACAI"></a>
<div id="JJDBC28216" class="sect3">
<h4 class="sect3">ARCHIVE</h4>
<p>The <code><a id="sthref302"></a>ARCHIVE</code> attribute is optional. It specifies the name of the archive file that contains the applet classes and resources the applet needs. Oracle recommends using an archive file, which saves many extra round-trips to the server.</p>
<p>The archive file will be preloaded. If you have more than one archive file in the list, separate them with commas. In the following example, the class files are stored in the archive file, <code>JdbcApplet.zip</code>:</p>
<pre>&lt;APPLET CODE=&#34;JdbcApplet&#34; ARCHIVE=&#34;JdbcApplet.zip&#34; WIDTH=500 HEIGHT=200&gt;
&lt;/APPLET&gt;
</pre>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Version 3.0 browsers do not support the <code>ARCHIVE</code> attribute.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="oraint.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="instclnt.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>