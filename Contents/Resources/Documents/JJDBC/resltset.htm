<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71022"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Result%20Set"></a><title>Result Set</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:37Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oraarr.htm" title="Previous" type="text/html"/>
<link rel="Next" href="jcrowset.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">28/55</span> <!-- End Header -->
<div id="JJDBC28611" class="chapter"><a id="g1036317"></a>
<h1 class="chapter"><span class="secnum">17</span> Result Set</h1>
<p>Standard Java Database Connectivity (JDBC) features in Java Development Kit (JDK) include enhancements to result set functionality, such as processing forward or backward, positioning relatively or absolutely, seeing changes to the database made internally or externally, and updating result set data and then copying the changes to the database.</p>
<p>This chapter discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABBCECI">Oracle JDBC Implementation Overview for Result Set Support</a></p>
</li>
<li>
<p><a href="#BABJHACF">Resultset Limitations and Downgrade Rules</a></p>
</li>
<li>
<p><a href="#BABGDAFI">Avoiding Update Conflicts</a></p>
</li>
<li>
<p><a href="#i1023619">Fetch Size</a></p>
</li>
<li>
<p><a href="#i1022334">Refetching Rows</a></p>
</li>
<li>
<p><a href="#i1024538">Viewing Database Changes Made Internally and Externally</a></p>
</li>
</ul>
<a id="BABBCECI"></a>
<div id="JJDBC28612" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle JDBC Implementation Overview for Result Set Support</h2>
<p>This section discusses key aspects of the Oracle JDBC implementation of result set support for scrollability, through use of a client-side cache, and for updatability, through use of <code>ROWID</code>s.</p>
<p>It is permissible for customers to implement their own client-side caching mechanism, and Oracle provides an interface to use in doing so.</p>
<p class="subhead2"><a id="JJDBC28613"></a>Oracle JDBC Im<a id="sthref636"></a><a id="sthref637"></a>plementation for Result Set Scrollability</p>
<p>Because the underlying server does <span class="italic">not</span> support scrollable cursors, Oracle JDBC must implement scrollability in a separate layer.</p>
<p>It is important to be aware that this is accomplished by using a client-side memory cache to store rows of a scrollable result set.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
Because all rows of any scrollable result set are stored in the client-side cache, a situation, where the result set contains many rows, many columns, or very large columns, might cause the client-side Java Virtual Machine (JVM) to fail. Do not specify scrollability for a large result set.</div>
<p class="subhead2"><a id="JJDBC28614"></a>Oracle JDBC Im<a id="sthref638"></a><a id="sthref639"></a>plementation for Result Set Updatability</p>
<p>To support updatability, Oracle JDBC uses <code>ROWID</code> to uniquely identify database rows that appear in a result set. For every query into an updatable result set, Oracle JDBC driver automatically retrieves the <code>ROWID</code> along with the columns you select.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Client-side caching is not required by updatability in and of itself. In particular, a forward-only updatable result set will not require a client-side cache.</div>
</div>
<!-- class="sect1" -->
<a id="BABJHACF"></a>
<div id="JJDBC28615" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Resultset Limitations and Downgrade Rules</h2>
<p>Some types of result sets are not feasible for certain kinds of queries. If you specify an unfeasible result set type or concurrency type for the query you run, then the JDBC driver follows a set of rules to determine the best feasible types to use instead.</p>
<p>The actual result set type and concurrency type are determined when the statement is run, with the driver issuing a <code>SQLWarning</code> on the statement object if the desired result set type or concurrency type is not feasible. The <code>SQLWarning</code> object will contain the reason why the requested type was not feasible. Check for warnings to verify whether you received the type of result set that you requested.</p>
<p class="subhead2"><a id="JJDBC28616"></a>Result Set Limit<a id="sthref640"></a>ations</p>
<p>The following limitations are placed on queries for enhanced result sets. Failure to follow these guidelines results in the JDBC driver choosing an alternative result set type or concurrency type.</p>
<p>To produce an upd<a id="sthref641"></a>atable result set:</p>
<ul>
<li>
<p>A query can select from only a single table and cannot contain any join operations.</p>
<p>In addition, for inserts to be feasible, the query must select all non-nullable columns and all columns that do not have a default value.</p>
</li>
<li>
<p>A query cannot use <code>SELECT *</code> .</p>
<p>However, there is a workaround for this.</p>
</li>
<li>
<p>A query must select table columns only.</p>
<p>It cannot select derived columns or aggregates, such as the <code>SUM</code> or <code>MAX</code> of a set of columns.</p>
</li>
</ul>
<p>To produce a scr<a id="sthref642"></a>oll-sensitive result set:</p>
<ul>
<li>
<p>A query cannot use <code>SELECT *</code> .</p>
<p>However, there is a workaround for this.</p>
</li>
<li>
<p>A query can select from only a single table.</p>
</li>
</ul>
<p>Scrollable and updatable result sets cannot have any column as <code>Stream</code>. When the server has to fetch a <code>Stream</code> column, it reduces the fetch size to one and blocks all columns following the <code>Stream</code> column until the <code>Stream</code> column is read. As a result, columns cannot be fetched in bulk and scrolled through.</p>
<p class="subhead2"><a id="JJDBC28617"></a>Workaround</p>
<p>As a workaround for the <code>SELECT *</code> limitation, you can use table aliases, as shown in the following example:</p>
<pre>SELECT t.* FROM TABLE t ...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
There is a simple way to determine if your query will probably produce a scroll-sensitive or updatable result set: If you can legally add a <code>ROWID</code> column to the query list, then the query is probably suitable for either a scroll-sensitive or an updatable result set.</div>
<p class="subhead2"><a id="JJDBC28618"></a>Result Set Dow<a id="sthref643"></a>ngrade Rules</p>
<p>If the specified result set type or concurrency type is not feasible, then Oracle JDBC driver uses the following rules in choosing alternate types:</p>
<ul>
<li>
<p>If the specified result set type is <code>TYPE_SCROLL_SENSITIVE</code>, but the JDBC driver cannot fulfill that request, then the driver attempts a downgrade to <code>TYPE_SCROLL_INSENSITIVE</code>.</p>
</li>
<li>
<p>If the specified or downgraded result set type is <code>TYPE_SCROLL_INSENSITIVE</code>, but the JDBC driver cannot fulfill that request, then the driver attempts a downgrade to <code>TYPE_FORWARD_ONLY</code>.</p>
</li>
<li>
<p>If the specified concurrency type is <code>CONCUR_UPDATABLE</code>, but the JDBC driver cannot fulfill that request, then the JDBC driver attempts a downgrade to <code>CONCUR_READ_ONLY</code>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Any manipulations of the result set type and concurrency type by the JDBC driver are independent of each other.</div>
<p class="subhead2"><a id="JJDBC28619"></a>Verifying Result Set Type and Concurrency Type</p>
<p>After a query has been run, you can verify the result set type and concurrency type that the JDBC driver actually used, by calling methods on the result set object.</p>
<ul>
<li>
<p><code>int get<a id="sthref644"></a>Type() throws SQLException</code></p>
<p>This method returns an <code>int</code> value for the result set type used for the query. <code>ResultSet.TYPE_FORWARD_ONLY</code>, <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>, or <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> are the possible values.</p>
</li>
<li>
<p><code>int get<a id="sthref645"></a>Concurrency() throws SQLException</code></p>
<p>This method returns an <code>int</code> value for the concurrency type used for the query. <code>ResultSet.CONCUR_READ_ONLY</code> or <code>ResultSet.CONCUR_UPDATABLE</code> are the possible values.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABGDAFI"></a>
<div id="JJDBC28620" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Avoiding <a id="sthref646"></a><a id="sthref647"></a>Update Conflicts</h2>
<p>It is important to be aware of the following facts regarding updatable result sets with the JDBC drivers:</p>
<ul>
<li>
<p>The drivers do not enforce write locks for an updatable result set.</p>
</li>
<li>
<p>The drivers do not check for conflicts with a result set <code>DELETE</code> or <code>UPDATE</code> operation.</p>
</li>
</ul>
<p>A conflict will occur if you try to perform a <code>DELETE</code> or <code>UPDATE</code> operation on a row updated by another committed transaction.</p>
<p>Oracle JDBC drivers use the <code>ROWID</code> to uniquely identify a row in a database table. As long as the <code>ROWID</code> is valid when a driver tries to send an <code>UPDATE</code> or <code>DELETE</code> operation to the database, the operation will be run.</p>
<p>The driver will not report any changes made by another committed transaction. Any conflicts are silently ignored and your changes will overwrite the previous changes.</p>
<p>To avoid such conflicts, use the Oracle <code>FOR UPDATE</code> feature when running the query that produces the result set. This will avoid conflicts, but will also prevent simultaneous access to the data. Only a single write lock can be held concurrently on a data item.</p>
</div>
<!-- class="sect1" -->
<a id="i1023619"></a>
<div id="JJDBC28621" class="sect1">
<h2 class="sect1">Fetch S<a id="sthref648"></a><a id="sthref649"></a><a id="sthref650"></a>ize</h2>
<p>By default, when Oracle JDBC runs a query, it retrieves a result set of 10 rows at a time from the database cursor. This is the default Oracle row fetch size value. You can change the number of rows retrieved with each trip to the database cursor by changing the row fetch size value.</p>
<p>Standard JDBC also enables you to specify the number of rows fetched with each database round-trip for a query, and this number is referred to as the fetch size. In Oracle JDBC, the row-prefetch value is used as the default fetch size in a statement object. Setting the fetch size overrides the row-prefetch setting and affects subsequent queries run through that statement object.</p>
<p>Fetch size is also used in a result set. When the statement object run a query, the fetch size of the statement object is passed to the result set object produced by the query. However, you can also set the fetch size in the result set object to override the statement fetch size that was passed to it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Changes made to the fetch size of a statement object after a result set is produced will have no affect on that result set.</div>
<p>The result set fetch size, either set explicitly, or by default equal to the statement fetch size that was passed to it, determines the number of rows that are retrieved in any subsequent trips to the database for that result set. This includes any trips that are still required to complete the original query, as well as any refetching of data into the result set. Data can be refetched, either explicitly or implicitly, to update a scroll-sensitive or scroll-insensitive/updatable result set.</p>
<a id="CIHIGIFF"></a>
<div id="JJDBC28622" class="sect2">
<h3 class="sect2">Setting the Fetch Size</h3>
<p>The following methods are available in all <code>Statement</code>, <code>PreparedStatement</code>, <code>CallableStatement</code>, and <code>ResultSet</code> objects for setting and getting the fetch size:</p>
<ul>
<li>
<p><code>void set<a id="sthref651"></a>FetchSize(int rows) throws SQLException</code></p>
</li>
<li>
<p><code>int get<a id="sthref652"></a>FetchSize() throws SQLException</code></p>
</li>
</ul>
<p>To set the fetch size for a query, call <code>setFetchSize</code> on the statement object prior to running the query. If you set the fetch size to N, then N rows are fetched with each trip to the database.</p>
<p>After you have run the query, you can call <code>setFetchSize</code> on the result set object to override the statement object fetch size that was passed to it. This will affect any subsequent trips to the database to get more rows for the original query, as well as affecting any later refetching of rows.</p>
</div>
<!-- class="sect2" -->
<div id="JJDBC28623" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref653"></a>
<h3 class="sect2">Pres<a id="sthref654"></a><a id="sthref655"></a>etting the Fetch Direction</h3>
<p>The standard JDBC enables to pre-specify the direction, known as the fetch direction, for use in processing a result set. This allows the JDBC driver to optimize its processing. The following result set methods are specified:</p>
<ul>
<li>
<p><code>void setFetchDirection(int direction) throws SQLException</code></p>
</li>
<li>
<p><code>int getFetchDirection() throws SQLException</code></p>
</li>
</ul>
<p>Oracle JDBC drivers support only the forward preset value, which you can specify by entering the <code>ResultSet.FETCH_FORWARD</code> static constant value.</p>
<p>The values <code>ResultSet.FETCH_REVERSE</code> and <code>ResultSet.FETCH_UNKNOWN</code> are not supported. Attempting to specify them causes a SQL warning, and the settings are ignored.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1022334"></a>
<div id="JJDBC28624" class="sect1">
<h2 class="sect1">Refet<a id="sthref656"></a><a id="sthref657"></a><a id="sthref658"></a><a id="sthref659"></a>ching Rows</h2>
<p>The result set <code>ref<a id="sthref660"></a>reshRow</code> method is supported for some types of result sets for refetching data. This consists of going back to the database to re-obtain the database rows that correspond to <span class="italic">n</span> rows in the result set, starting with the current row, where <span class="italic">n</span> is the fetch size. This lets you see the latest updates to the database that were made outside of your result set, subject to the isolation level of the enclosing transaction.</p>
<p>Because refetching re-obtains only rows that correspond to rows already in your result set, it does nothing about rows that have been inserted or deleted in the database since the original query. It ignores rows that have been inserted, and rows will remain in your result set even after the corresponding rows have been deleted from the database. When there is an attempt to refetch a row that has been deleted in the database, the corresponding row in the result set will maintain its original values.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you declare a <code>TYPE_SCROLL_SENSITIVE</code> Result Set based on a query with certain criteria and then externally update the row so that the column values no longer match the query criteria, the driver behaves as if the row has been deleted from the database and the row is not retrieved by the query issued. So, you do not see the updates to the particular row when you call the <code>refreshRow</code> method.</div>
<p>Following is the signature of the <code>refreshRow</code> method:</p>
<pre>void refreshRow() throws SQLException
</pre>
<p>You must be at a valid current row when you call this method, not outside the row bounds and not at the insert-row.</p>
<p>The <code>refreshRow</code> method is supported for the following result set categories:</p>
<ul>
<li>
<p>scroll-sensitive/read-only</p>
</li>
<li>
<p>scroll-sensitive/updatable</p>
</li>
<li>
<p>scroll-insensitive/updatable</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Scroll-sensitive result set functionality is implemented through implicit calls to <code>refreshRow</code>.</div>
</div>
<!-- class="sect1" -->
<a id="i1024538"></a>
<div id="JJDBC28625" class="sect1">
<h2 class="sect1">Viewing Database Changes Made Internally and Externally</h2>
<p>This section discusses the ability of a result set to view the following:</p>
<ul>
<li>
<p>Own changes of the result set, referred to as inter<a id="sthref661"></a>nal changes</p>
</li>
<li>
<p>Changes made from elsewhere, either from your own transaction outside the result set, or from other committed transactions, referred to as exter<a id="sthref662"></a>nal changes</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
External changes are referred to as other&#39;s changes in the standard JDBC specification.</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1022484">Visibility versus Detection of External Changes</a></p>
</li>
<li>
<p><a href="#i1023566">Summary of Visibility of Internal and External Changes</a></p>
</li>
<li>
<p><a href="#i1024192">Oracle Implementation of Scroll-Sensitive Result Sets</a></p>
</li>
</ul>
<a id="i1022484"></a>
<div id="JJDBC28626" class="sect2">
<h3 class="sect2">Visibility versus <a id="sthref663"></a><a id="sthref664"></a><a id="sthref665"></a>Detection of External Changes</h3>
<p>Regarding the changes made to an underlying database by external sources, there are two similar but distinct concepts with respect to visibility of the changes from your local result set:</p>
<ul>
<li>
<p>Visibility of changes</p>
</li>
<li>
<p>Detection of changes</p>
</li>
</ul>
<p>A &#34;visible&#34; change means that when you look at a row in the result set, you can see new data values from changes made by external sources, to the corresponding row in the database.</p>
<p>A &#34;detected&#34; change, however, means that the result set is aware that this is a new value since the result set was first populated.</p>
<p>Even when an Oracle result set sees new data, as with an external <code>UPDATE</code> in a scroll-sensitive result set, it has no awareness that this data has changed since the result set was populated. Such changes are not detected.</p>
</div>
<!-- class="sect2" -->
<a id="i1023566"></a>
<div id="JJDBC28627" class="sect2">
<h3 class="sect2">Summary of Vis<a id="sthref666"></a>ibility of Internal and External Changes</h3>
<p><a href="#g1026797">Table 17-1</a> summarizes how a result set object in the Oracle JDBC implementation can see changes made internally through the result set itself, and changes made externally to the underlying database from elsewhere in your transaction or from other committed transactions.</p>
<div id="JJDBC28628" class="tblformal">
<p class="titleintable"><a id="sthref667"></a><a id="g1026797"></a>Table 17-1 Visibility of Internal and External Changes for Oracle JDBC</p>
<table class="cellalignment2244" title="Visibility of Internal and External Changes for Oracle JDBC" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t10">Result Set Type</th>
<th class="cellalignment2245" id="r1c2-t10">Can See Internal DELETE?</th>
<th class="cellalignment2245" id="r1c3-t10">Can See Internal UPDATE?</th>
<th class="cellalignment2245" id="r1c4-t10">Can See Internal INSERT?</th>
<th class="cellalignment2245" id="r1c5-t10">Can See External DELETE?</th>
<th class="cellalignment2245" id="r1c6-t10">Can See External UPDATE?</th>
<th class="cellalignment2245" id="r1c7-t10">Can See External INSERT?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t10" headers="r1c1-t10">
<p>forward-only</p>
</td>
<td class="cellalignment2246" headers="r2c1-t10 r1c2-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r2c1-t10 r1c3-t10">
<p>yes</p>
</td>
<td class="cellalignment2246" headers="r2c1-t10 r1c4-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r2c1-t10 r1c5-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r2c1-t10 r1c6-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r2c1-t10 r1c7-t10">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t10" headers="r1c1-t10">
<p>scroll-sensitive</p>
</td>
<td class="cellalignment2246" headers="r3c1-t10 r1c2-t10">
<p>yes</p>
</td>
<td class="cellalignment2246" headers="r3c1-t10 r1c3-t10">
<p>yes</p>
</td>
<td class="cellalignment2246" headers="r3c1-t10 r1c4-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r3c1-t10 r1c5-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r3c1-t10 r1c6-t10">
<p>yes</p>
</td>
<td class="cellalignment2246" headers="r3c1-t10 r1c7-t10">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r4c1-t10" headers="r1c1-t10">
<p>scroll-insensitive</p>
</td>
<td class="cellalignment2246" headers="r4c1-t10 r1c2-t10">
<p>yes</p>
</td>
<td class="cellalignment2246" headers="r4c1-t10 r1c3-t10">
<p>yes</p>
</td>
<td class="cellalignment2246" headers="r4c1-t10 r1c4-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r4c1-t10 r1c5-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r4c1-t10 r1c6-t10">
<p>no</p>
</td>
<td class="cellalignment2246" headers="r4c1-t10 r1c7-t10">
<p>no</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Remember that explicit use of the <code>refreshRow</code> method, is distinct from the concept of visibility of external changes.</p>
</li>
<li>
<p>Remember that even when external changes are visible, as with <code>UPDATE</code> operations underlying a scroll-sensitive result set, they are not detected. The result set <code>rowDeleted</code>, <code>rowUpdated</code>, and <code>rowInserted</code> methods always return <code>false</code>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1024192"></a>
<div id="JJDBC28629" class="sect2">
<h3 class="sect2">Oracle Implementa<a id="sthref668"></a>tion of Scroll-Sensitive Result Sets</h3>
<p>The Oracle implementation of scroll-sensitive result sets involves the concept of a wind<a id="sthref669"></a>ow, with a window size that is based on the fetch size. The window size affects how often rows are updated in the result set.</p>
<p>Once you establish a current row by moving to a specified row, the window consists of the <span class="italic">n</span> rows in the result set starting with that row, where <span class="italic">n</span> is the fetch size being used by the result set. Note that there is no current row, and therefore no window, when a result set is first created. The default position is before the first row, which is not a valid current row.</p>
<p>As you move from row to row, the window remains unchanged as long as the current row stays within that window. However, once you move to a new current row outside the window, you redefine the window to be the N rows starting with the new current row.</p>
<p>Whenever the window is redefined, the N rows in the database corresponding to the rows in the new window are automatically refetched through an implicit call to the <code>refreshRow</code> method, thereby updating the data throughout the new window.</p>
<p>So external updates are not instantaneously visible in a scroll-sensitive result set. They are only visible after the automatic refetches just described.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This kind of refetching is not a highly efficient or optimized methodology and it has significant performance concerns. Consider carefully before using scroll-sensitive result sets as currently implemented. There is also a significant trade-off between sensitivity and performance. The most sensitive result set is one with a fetch size of 1, which would result in the new current row being refetched every time you move between rows. However, this would have a significant impact on the performance of your application.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="oraarr.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="jcrowset.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>