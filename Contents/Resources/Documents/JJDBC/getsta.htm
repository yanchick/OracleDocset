<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-70986"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Getting%20Started"></a><title>Getting Started</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to use Oracle JDBC drivers to develop powerful Java database applications."/>
<meta name="dcterms.created" content="2014-06-30T1:22:36Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JDBC Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49300-05"/>
<meta name="dcterms.isVersionOf" content="JJDBC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="overvw.htm" title="Previous" type="text/html"/>
<link rel="Next" href="part2.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49300-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/55</span> <!-- End Header -->
<div id="JJDBC20000" class="chapter"><a id="g1011912"></a>
<h1 class="chapter"><span class="secnum">2</span> Getting Started</h1>
<p>This chapter discusses the compatibility of Oracle Java Database Connectivity (JDBC) driver versions, database versions, and Java Development Kit (JDK) versions. It also describes the basics of testing a client installation and configuration and running a simple application. This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i1008205">Version Compatibility for Oracle JDBC Drivers</a></p>
</li>
<li>
<p><a href="#i1007825">Verifying a JDBC Client Installation</a></p>
</li>
<li>
<p><a href="#i1008330">Basic Steps in JDBC</a></p>
</li>
<li>
<p><a href="#i1008334">Sample: Connecting, Querying, and Processing the Results</a></p>
</li>
<li>
<p><a href="#i1008346">Stored Procedure Calls in JDBC Programs</a></p>
</li>
<li>
<p><a href="#i1018335">Processing SQL Exceptions</a></p>
</li>
</ul>
<a id="i1008205"></a>
<div id="JJDBC28046" class="sect1">
<h2 class="sect1">Version Compatibility for Oracle JDBC Drivers</h2>
<p>This section discusses the general JDBC version compatibility issues.</p>
<p class="subhead2"><a id="JJDBC28047"></a>Backward Compatibility</p>
<p>Oracle Database 12<span class="italic">c</span> Release 1 (12.1) JDBC drivers are certified with supported Oracle Database releases (11.x.0.x). However, they are not certified to work with older, unsupported database releases, such as 10.2.x, 10.1.x, 9.2.x, and 9.0.1.x.</p>
<p class="subhead2"><a id="JJDBC28048"></a>Forward Compatibility</p>
<p>Existing and supported JDBC drivers are certified to work with Oracle Database 12<span class="italic">c</span> Release 1 (12.1).</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
<ul>
<li>
<p>In Oracle Database 12<span class="italic">c</span> Release 1 (12.1), Oracle JDBC drivers no longer support JDK 1.4.x or earlier versions.</p>
</li>
<li>
<p>You can find a complete, up-to-date list of supported databases at <code><a href="http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-faq-090281.html">http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-faq-090281.html</a></code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1007825"></a>
<div id="JJDBC28049" class="sect1">
<h2 class="sect1">Verifying a JDBC Client Installation</h2>
<p>To <a id="sthref30"></a>verify a JDBC client installation, you must do all of the following:</p>
<ul>
<li>
<p><a href="#i1005373">Check the Installed Directories and Files</a></p>
</li>
<li>
<p><a href="#i1005378">Check the Environment Variables</a></p>
</li>
<li>
<p><a href="#i1005383">Ensure that the Java Code Can Be Compiled and Run</a></p>
</li>
<li>
<p><a href="#i1008663">Determine the Version of the JDBC Driver</a></p>
</li>
<li>
<p><a href="#i1003811">Test JDBC and the Database Connection</a></p>
</li>
</ul>
<p>This section describes the steps for verifying an Oracle client installation of the JDBC drivers, assuming that you have already installed the driver of your choice. Installation of an Oracle JDBC driver is platform-specific. You must follow the installation instructions for the driver you want to install in your platform-specific documentation.</p>
<p>If you use the JDBC Thin driver, then there is no additional installation on the client computer. If you use the JDBC Oracle Call Interface (OCI) driver, then you must also install the Oracle client software. This includes Oracle Net and the OCI libraries.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JDBC Thin driver requires a TCP/IP listener to be running on the computer where the database is installed.</div>
<a id="i1005373"></a>
<div id="JJDBC28050" class="sect2">
<h3 class="sect2">Check the Installed <a id="sthref31"></a>Directories and Files</h3>
<p>Installing the Oracle Java products creates, among other things, the following directories:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/jdbc</code></p>
</li>
<li>
<p><code><span class="codeinlineitalic">ORACLE_HOME</span></code> <code>/jlib</code></p>
</li>
</ul>
<p>Check whether or not the following directories and files have been created and populated in the <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/jdbc</code> directory:</p>
<ul>
<li>
<p><code>demo</code></p>
<p>This directory contains a compressed file, <code>demo.zip</code> or <code>demo.tar</code>. When you uncompress this compressed file, the <code>samples</code> directory and the <code>Samples-Readme.txt</code> file are created. The <code>samples</code> directory contains sample programs, including examples of how to use JDBC escape syntax and Oracle SQL syntax, PL/SQL blocks, streams, user-defined types, additional Oracle type extensions, and Oracle performance extensions.</p>
</li>
<li>
<p><code>doc</code></p>
<p>This directory contains the <code>javadoc.zip</code> file, which is the Oracle JDBC application programming interface (API) documentation.</p>
</li>
<li>
<p><code>lib</code></p>
<p>The <code>lib</code> directory contains the following required Java classes:</p>
<ul>
<li>
<p><code>orai18n.jar</code> and <code>orai18n-mapping.jar</code></p>
<p>Contain classes for globalization and multibyte character sets support</p>
</li>
<li>
<p><code>ojdbc6.jar</code>, <code>ojdbc6_g.jar</code>, <code>ojdbc7.jar</code>, and <code>ojdbc7_g.jar</code></p>
<p>Contain the JDBC driver classes for use with JDK 6 and JDK 7</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Since Oracle Database 11<span class="italic">g</span> Release 1, support for a version of JDK earlier than version 5.0 has been removed. Also, the <code>ojdbc14.jar</code>, <code>ojdbc5.jar</code> and <code>classes12.jar</code> files are no longer shipped. Instead, you can use the <code>ojdbc6.jar</code> and <code>ojdbc7.jar</code> files, which are shipped with Oracle Database 12<span class="italic">c</span>.</p>
</li>
<li>
<p>If you are using JSE 6 and later, then there is <span class="italic">no</span> need to explicitly load the JDBC driver. This means that the Java run-time loads the driver when needed and you need <span class="italic">not</span> include <code>Class.forName(&#34;oracle.jdbc.OracleDriver&#34;)</code> or <code>new oracle.jdbc.OracleDriver()</code> in your code. But if you are using J2SE 5.0, then you need to load the JDBC driver explicitly.</p>
</li>
</ul>
</div>
</li>
</ul>
</li>
</ul>
<ul>
<li>
<p><code>Readme.txt</code></p>
<p>This file contains late-breaking and release-specific information about the drivers, which may not have been included in other documentation on the product.</p>
</li>
</ul>
<p>Check whether or not the following directories have been created and populated in the <code><span class="codeinlineitalic">ORACLE_HOME</span></code> <code>/jlib</code> directory:</p>
<ul>
<li>
<p><code>jta.jar</code> and <code>jndi.jar</code></p>
<p>These files contain classes for the Java Transaction API (JTA) and the Java Naming and Directory Interface (JNDI). These are required only if you are using JTA features for distributed transaction management or JNDI features for naming services.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more information about these files, visit the following sites
<p><code><a href="http://www.oracle.com/technetwork/java/javaee/jta/index.html">http://www.oracle.com/technetwork/java/javaee/jta/index.html</a></code></p>
<p><code><a href="http://www.oracle.com/technetwork/java/jndi/index.html">http://www.oracle.com/technetwork/java/jndi/index.html</a></code></p>
</div>
</li>
<li>
<p><code>ons.jar</code></p>
<p>This JAR file contains classes for Oracle RAC Fast Application Notification. It is also required for Universal Connection Pool (UCP) features like Fast Connection Failover, Run-time Load Balancing, Web Session Affinity, and Transaction Affinity.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apxracfan.htm#CDCBIDHF">Appendix B, &#34;Oracle RAC Fast Application Notification&#34;</a> and <a class="olink JJUCP8197" href="../JJUCP/rac.htm#JJUCP8197"><span class="italic">Oracle Universal Connection Pool for JDBC Developer&#39;s Guide</span></a> for more information about Oracle RAC Fast Application Notification and UCP respectively</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1005378"></a>
<div id="JJDBC28051" class="sect2">
<h3 class="sect2">Check the Environment Variables</h3>
<p>This section describes the <a id="sthref32"></a>environment variables that must be set for the JDBC OCI driver and the JDBC Thin driver, focusing on Solaris, Linux, and Microsoft Windows platforms.</p>
<p>You must set the <code><a id="sthref33"></a>CLASSPATH</code> environment variable for JDBC OCI or Thin driver. Include the following in the <code>CLASSPATH</code> environment variable:</p>
<pre><span class="italic">ORACLE_HOME</span>/jdbc/lib/ojdbc6.jar
<span class="italic">ORACLE_HOME</span>/jlib/orai18n.jar
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the JTA features and the JNDI features, then you must specify <code>jta.jar</code> and <code>jndi.jar</code> in your <code>CLASSPATH</code> environment variable.</div>
<p class="subhead2"><a id="JJDBC28052"></a>JDBC OCI Driver</p>
<p>To use the JDBC OCI driver, you must also set the following value for the library path environment variable:</p>
<ul>
<li>
<p>On Solaris or Linux, set the <code><a id="sthref34"></a>LD_LIBRARY_PATH</code> environment variable as follows:</p>
<pre><span class="italic">ORACLE_HOME</span>/lib
</pre>
<p>This directory contains the <code>libocijdbc11.so</code> shared object library.</p>
</li>
<li>
<p>On Microsoft Windows, set the <code><a id="sthref35"></a>PATH</code> environment variable as follows:</p>
<pre><span class="italic">ORACLE_HOME</span>\bin
</pre>
<p>This directory contains the <code>ocijdbc11.dll</code> dynamic link library.</p>
</li>
</ul>
<p>All of the JDBC OCI demonstration programs can be run in the Instant Client mode by including the JDBC OCI Instant Client data shared library on the library path environment variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="instclnt.htm#CHDCJEDD">Chapter 6, &#34;Features Specific to JDBC OCI Driver&#34;</a></div>
<p class="subhead2"><a id="JJDBC28053"></a>JDBC Thin Driver</p>
<p>To use the JDBC Thin driver, you do not have to set any other environment variables. However, to use the JDBC server-side Thin driver, you need to set permission.</p>
<p class="subhead2"><a id="JJDBC28054"></a>Setting Permission for the Server-Side Thin Driver</p>
<p>The JDBC server-side Thin driver opens a socket for its connection to the database. Because Oracle Database enforces the Java security model, a check is performed for a <code>SocketPermission</code> object.</p>
<p>To use the JDBC server-side Thin driver, the connecting user must be granted the appropriate permission. The following is an example of how the permission can be granted for the user <code>HR</code>:</p>
<pre>CREATE ROLE jdbcthin;
CALL dbms_java.grant_permission(&#39;JDBCTHIN&#39;, &#39;java.net.SocketPermission&#39;, &#39;*&#39;, &#39;connect&#39;);
GRANT jdbcthin TO HR;
</pre>
<p>Note that <code>JDBCTHIN</code> in the <code>grant_permission</code> call must be in uppercase. The asterisk (<code>*</code>) is a pattern. You can restrict the user by granting permission to connect to only specific computers or ports.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDEV02000" href="../JJDEV/chtwo.htm#JJDEV02000"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1005383"></a>
<div id="JJDBC28055" class="sect2">
<h3 class="sect2">Ensure that the Java Code Can Be Compiled and Run</h3>
<p><a id="sthref36"></a><a id="sthref37"></a>To further ensure that Java is set up properly on your client system, go to the <code>samples</code> directory under the <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/jdbc/demo</code> directory. Now, type the following commands on the command line, one after the other, to see if the Java compiler and the Java interpreter run without error:</p>
<pre>javac

java
</pre>
<p>Each of the preceding commands should display a list of options and parameters and then exit. Ideally, verify that you can compile and run a simple test program, such as <code>jdbc/demo/samples/generic/SelectExample</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i1008663"></a>
<div id="JJDBC28056" class="sect2">
<h3 class="sect2">Determine<a id="sthref38"></a> the Version of the JDBC Driver</h3>
<p>To determine the version of the JDBC driver, call the <code>getDriverVersion</code> method of the <code>OracleDatabaseMetaData</code> class as shown in the following sample code:</p>
<pre>import java.sql.*;
import oracle.jdbc.*;
import oracle.jdbc.pool.OracleDataSource;

class JDBCVersion
{
  public static void main (String args[]) throws SQLException
  {
    OracleDataSource ods = new OracleDataSource();
    ods.setURL(&#34;jdbc:oracle:thin:HR/hr@&lt;host&gt;:&lt;port&gt;:&lt;service&gt;&#34;);
    Connection conn = ods.getConnection();

    // Create Oracle DatabaseMetaData object
    DatabaseMetaData meta = conn.getMetaData();

    // gets driver info:
    System.out.println(&#34;JDBC driver version is &#34; + meta.getDriverVersion());
  }
}
</pre>
<p>You can also determine the version of the JDBC driver by executing the following commands:</p>
<ul>
<li>
<p><code>java -jar ojdbc6.jar</code></p>
</li>
<li>
<p><code>java -jar ojdbc7.jar</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1003811"></a>
<div id="JJDBC28057" class="sect2">
<h3 class="sect2">Test JDBC and the Database Connection</h3>
<p>The <code>samples</code> <a id="sthref39"></a><a id="sthref40"></a><a id="sthref41"></a>directory contains sample programs for a particular Oracle JDBC driver. One of the programs, <code>JdbcCheckup.java</code>, is designed to test JDBC and the database connection. The program queries for the user name, password, and the name of the database to which you want to connect. The program connects to the database, queries for the string &#34;<code>Hello World</code>&#34;, and prints it to the screen.</p>
<p>Go to the <code>samples</code> directory, and compile and run the <code>JdbcCheckup.java</code> program. If the results of the query print without error, then your Java and JDBC installations are correct.</p>
<p>Although <code>JdbcCheckup.java</code> is a simple program, it demonstrates several important functions by performing the following:</p>
<ul>
<li>
<p>Imports the necessary Java classes, including JDBC classes</p>
</li>
<li>
<p>Creates a <code>DataSource</code> instance</p>
</li>
<li>
<p>Connects to the database</p>
</li>
<li>
<p>Runs a simple query</p>
</li>
<li>
<p>Prints the query results to your screen</p>
</li>
</ul>
<p>The <code>JdbcCheckup.java</code> program, which uses the JDBC OCI driver, is as follows:</p>
<pre>/*
 * This sample can be used to check the JDBC installation.
 * Just run it and provide the connect information. It will select
 * &#34;Hello World&#34; from the database.
 */

// You need to import the java.sql and JDBC packages to use JDBC
import java.sql.*;
import oracle.jdbc.*;
import oracle.jdbc.pool.OracleDataSource;

// We import java.io to be able to read from the command line
import java.io.*;

class JdbcCheckup
{
  public static void main(String args[]) throws SQLException, IOException
  {

    // Prompt the user for connect information
    System.out.println(&#34;Please enter information to test connection to 
                          the database&#34;);
    String user;
    String password;
    String database;

    user = readEntry(&#34;user: &#34;);
    int slash_index = user.indexOf(&#39;/&#39;);
    if (slash_index != -1)
    {
      password = user.substring(slash_index + 1);
      user = user.substring(0, slash_index);
    }
    else
      password = readEntry(&#34;password: &#34;);
    database = readEntry(&#34;database(a TNSNAME entry): &#34;);

    System.out.print(&#34;Connecting to the database...&#34;);
    System.out.flush();
    System.out.println(&#34;Connecting...&#34;);
    // Open an OracleDataSource and get a connection
    OracleDataSource ods = new OracleDataSource();
    ods.setURL(&#34;jdbc:oracle:oci:@&#34; + database);
    ods.setUser(user);
    ods.setPassword(password);
    Connection conn = ods.getConnection();
    System.out.println(&#34;connected.&#34;);

    // Create a statement
    Statement stmt = conn.createStatement();

    // Do the SQL &#34;Hello World&#34; thing
    ResultSet rset = stmt.executeQuery(&#34;select &#39;Hello World&#39; from dual&#34;);

    while (rset.next())
      System.out.println(rset.getString(1));
    // close the result set, the statement and the connection
    rset.close();
    stmt.close();
    conn.close();
    System.out.println(&#34;Your JDBC installation is correct.&#34;);
  }

  // Utility function to read a line from standard input
  static String readEntry(String prompt)
  {
    try
    {
      StringBuffer buffer = new StringBuffer();
      System.out.print(prompt);
      System.out.flush();
      int c = System.in.read();
      while (c != &#39;\n&#39; &amp;&amp; c != -1)
      {
        buffer.append((char)c);
        c = System.in.read();
      }
      return buffer.toString().trim();
    }
    catch(IOException e)
    {
      return &#34;&#34;;
    }
  }
}
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008330"></a>
<div id="JJDBC28058" class="sect1">
<h2 class="sect1">Basic Steps in JDBC</h2>
<p>After verifying the JDBC client installation, you can start creating your JDBC applications. <a id="sthref42"></a>When using Oracle JDBC drivers, you must include certain driver-specific information in your programs. This section describes, in the form of a tutorial, where and how to add the information. The tutorial guides you through the steps to create code that connects to and queries a database from the client.</p>
<p>You must write code to perform the following tasks:</p>
<ol>
<li>
<p><a href="#i1006642">Importing Packages</a></p>
</li>
<li>
<p><a href="#i1006650">Opening a Connection to a Database</a></p>
</li>
<li>
<p><a href="#i1006663">Creating a Statement Object</a></p>
</li>
<li>
<p><a href="#i1006667">Running a Query and Retrieving a Result Set Object</a></p>
</li>
<li>
<p><a href="#i1006671">Processing the Result Set Object</a></p>
</li>
<li>
<p><a href="#i1006632">Closing the Result Set and Statement Objects</a></p>
</li>
<li>
<p><a href="#i1019399">Making Changes to the Database</a></p>
</li>
<li>
<p><a href="#i1019153">Committing Changes</a></p>
</li>
<li>
<p><a href="#i1006638">Closing the Connection</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must supply Oracle driver-specific information for the first three tasks that enable your program to use the JDBC application programming interface (API) to access a database. For the other tasks, you can use standard JDBC Java code, as you would for any Java application.</div>
<a id="i1006642"></a>
<div id="JJDBC28059" class="sect2">
<h3 class="sect2">Importing Packages</h3>
<p>Regardless of which Oracle <a id="sthref43"></a>JDBC driver you use, include the <a id="CIHDFIAA"></a><code>import</code> statements shown in <a href="#CIHBBIEG">Table 2-1</a> at the beginning of your program.</p>
<div id="JJDBC28060" class="tblformal">
<p class="titleintable"><a id="sthref44"></a><a id="CIHBBIEG"></a>Table 2-1 Import Statements for JDBC Driver</p>
<table class="cellalignment2244" title="Import Statements for JDBC Driver" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t11">Import statement</th>
<th class="cellalignment2245" id="r1c2-t11">Provides</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t11" headers="r1c1-t11">
<p><code>import <a id="sthref45"></a>java.sql.*;</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t11 r1c2-t11">
<p>Standard JDBC packages.</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t11" headers="r1c1-t11">
<p><code>import <a id="sthref46"></a>java.math.*;</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t11 r1c2-t11">
<p>The <code>BigDecimal</code> and <code>BigInteger</code> classes. You can omit this package if you are not going to use these classes in your application.</p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r4c1-t11" headers="r1c1-t11">
<p><a id="sthref47"></a><code>import oracle.jdbc.*;</code></p>
<p><code>import oracle.jdbc.pool.*;</code></p>
<p><code>import oracle.sql.*;</code></p>
</td>
<td class="cellalignment2246" headers="r4c1-t11 r1c2-t11">
<p>Oracle extensions to JDBC. This is optional.</p>
<p><code>OracleDataSource</code>.</p>
<p>Oracle type extensions. This is optional.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The Oracle packages listed as optional provide access to the extended functionality provided by Oracle JDBC drivers, but are not required for the example presented in this section.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is better to import only the classes your application needs, rather than using the wildcard asterisk (<code>*</code>). This guide uses the asterisk (*) for simplicity, but this is not the recommended way of importing classes and interfaces.</div>
</div>
<!-- class="sect2" -->
<a id="i1006650"></a>
<div id="JJDBC28061" class="sect2">
<h3 class="sect2">O<a id="sthref48"></a>pening a Connection to a Database</h3>
<p>First, you must create an <code>OracleDataSource</code> instance. Then, open a connection to the database using the <code>OracleDataSource.getConnection</code> method. The properties of the retrieved connection are derived from the <code>OracleDataSource</code> instance. If you set the URL connection property, then all other properties, including <code>TNSEntryName</code>, <code>DatabaseName</code>, <code>ServiceName</code>, <code>ServerName</code>, <code>PortNumber</code>, <code>Network Protocol</code>, and driver type are ignored.</p>
<p class="subhead2"><a id="i1006352"></a><a id="JJDBC28062"></a>Specifying a <a id="sthref49"></a><a id="sthref50"></a><a id="sthref51"></a>Database URL, User Name, and Password</p>
<p>The following code sets the URL, user name, and password for a data source:</p>
<pre>OracleDataSource ods = new OracleDataSource();
ods.setURL(<span class="italic">url</span>);
ods.setUser(<span class="italic">user</span>);
ods.setPassword(<span class="italic">password</span>);
</pre>
<p>The following example connects user <code>HR</code> with password <code>hr</code> to a database with service <code>orcl</code> through port 5221 of the host <code>myhost</code>, using the JDBC Thin driver:</p>
<pre>OracleDataSource ods = new OracleDataSource();
String url = &#34;jdbc:oracle:thin:@//myhost:5221/orcl&#34;;
ods.setURL(url);
ods.setUser(&#34;HR&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The user name and password specified in the arguments override any user name and password specified in the URL.</div>
<p class="subhead2"><a id="i1026017"></a><a id="JJDBC28063"></a>Specifying a <a id="sthref52"></a>Database URL that Includes User Name and Password</p>
<p>The following example connects user <code>HR</code> with password <code>hr</code> to a database host whose Transparent Network Substrate (TNS) entry is <code>myTNSEntry</code>, using the JDBC Oracle Call Interface (OCI) driver. In this case, the URL includes the user name and password and is the only input parameter.</p>
<pre>String url = &#34;jdbc:oracle:oci:HR/hr@myTNSEntry&#34;);
ods.setURL(url);
Connection conn = ods.getConnection();
</pre>
<p>If you want to connect using the Thin driver, then you must specify the port number. For example, if you want to connect to the database on the host <code>myhost</code> that has a TCP/IP listener on port 5221 and the service identifier is <code>orcl</code>, then provide the following code:</p>
<pre>String URL = &#34;jdbc:oracle:thin:HR/hr@//myhost:5221/orcl&#34;);
ods.setURL(URL);
Connection conn = ods.getConnection();
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="urls.htm#BEIDBFDF">Chapter 8, &#34;Data Sources and URLs&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1006663"></a>
<div id="JJDBC28064" class="sect2">
<h3 class="sect2">Creating a Statement Object</h3>
<p>Once you connect to the database and, in the process, create a <code>Connection</code> object, the next step is to create a <code><a id="sthref53"></a>Statement</code> object. The <code>createStatement</code> method of the JDBC <code>Connection</code> object returns an object of the JDBC <code>Statement</code> type. To continue the example from the previous section, where the <code>Connection</code> object <code>conn</code> was created, here is an example of how to create the <code>Statement</code> object:</p>
<pre>Statement stmt = conn.createStatement();
</pre></div>
<!-- class="sect2" -->
<a id="i1006667"></a>
<div id="JJDBC28065" class="sect2">
<h3 class="sect2">Running a Query and Retrieving a Result Set Object</h3>
<p>To query the database, use the <code>executeQuery</code> method of the <code>Statement</code> object. This method takes a SQL statement as input and returns a JDBC <code><a id="sthref54"></a><a id="sthref55"></a>ResultSet</code> object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The method used to execute a <code>Statement</code> object depends on the type of SQL statement being executed. If the <code>Statement</code> object represents a SQL query returning a <code>ResultSet</code> object, the <code>executeQuery</code> method should be used. If the SQL is known to be a DDL statement or a DML statement returning an update count, the <code>executeUpdate</code> method should be used. If the type of the SQL statement is not known, the <code>execute</code> method should be used.</p>
</li>
<li>
<p>In case of a standard JDBC driver, if the SQL string being executed does not return a <code>ResultSet</code> object, then the <code>executeQuery</code> method throws a <code>SQLException</code> exception. In case of an Oracle JDBC driver, the <code>executeQuery</code> method does not throw a <code>SQLException</code> exception even if the SQL string being executed does not return a <code>ResultSet</code> object.</p>
</li>
</ul>
</div>
<p>To continue the example, once you create the <code>Statement</code> object <code>stmt</code>, the next step is to run a query that returns a <code>ResultSet</code> object with the contents of the <code>first_name</code> column of a table of employees named <code>EMPLOYEES</code>:</p>
<pre>ResultSet rset = stmt.executeQuery (&#34;SELECT first_name FROM employees&#34;);
</pre></div>
<!-- class="sect2" -->
<a id="i1006671"></a>
<div id="JJDBC28066" class="sect2">
<h3 class="sect2">Processing the Result Set Object</h3>
<p>Once <a id="sthref56"></a>you run your query, use the <code>next()</code> method of the <code>ResultSet</code> object to iterate through the results. This method steps through the result set row by row, detecting the end of the result set when it is reached.</p>
<p>To pull data out of the result set as you iterate through it, use the appropriate <code>get</code><code><span class="codeinlineitalic">XXX</span></code> methods of the <code>ResultSet</code> object, where <code><span class="codeinlineitalic">XXX</span></code> corresponds to a Java data type.</p>
<p>For example, the following code will iterate through the <code>ResultSet</code> object, <code>rset</code>, from the previous section and will retrieve and print each employee name:</p>
<pre>while (rset.next())
   System.out.println (rset.getString(1));
</pre>
<p>The <code>next()</code> method returns <code>false</code> when it reaches the end of the result set. The employee names are materialized as Java <code>String</code> values.</p>
</div>
<!-- class="sect2" -->
<a id="i1006632"></a>
<div id="JJDBC28067" class="sect2">
<h3 class="sect2">Closing the Result Set and Statement Objects</h3>
<p>You <a id="sthref57"></a><a id="sthref58"></a>must explicitly close the <code>ResultSet</code> and <code>Statement</code> objects after you finish using them. This applies to all <code>ResultSet</code> and <code>Statement</code> objects you create when using Oracle JDBC drivers. The drivers do not have finalizer methods. The cleanup routines are performed by the <code>close</code> method of the <code>ResultSet</code> and <code>Statement</code> classes. If you do not explicitly close the <code>ResultSet</code> and <code>Statement</code> objects, serious memory leaks could occur. You could also run out of cursors in the database. Closing both the result set and the statement releases the corresponding cursor in the database. If you close only the result set, then the cursor is not released.</p>
<p>For example, if your <code>ResultSet</code> object is <code>rset</code> and your <code>Statement</code> object is <code>stmt</code>, then close the result set and statement with the following lines of code:</p>
<pre>rset.close();
stmt.close();
</pre>
<p>When you close a <code>Statement</code> object that a given <code>Connection</code> object creates, the connection itself remains open.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Typically, you should put <code>close</code> statements in a <code>finally</code> clause.</div>
</div>
<!-- class="sect2" -->
<a id="i1019399"></a>
<div id="JJDBC28068" class="sect2">
<h3 class="sect2">Making Changes to the Database</h3>
<p class="subhead2"><a id="JJDBC28069"></a>DML Operations</p>
<p>To perform DML (Data Manipulation Language) operations, such as INSERT or UPDATE operations, you can create either a <code>Statement</code> object or a <code><a id="sthref59"></a>PreparedStatement</code> object. <code>PreparedStatement</code> objects enable you to run a statement with varying sets of input parameters. The <code>prepareStatement</code> method of the JDBC <code>Connection</code> object lets you define a statement that takes variable bind parameters and returns a JDBC <code>PreparedStatement</code> object with your statement definition.</p>
<p>Use the <code>set</code><code><span class="codeinlineitalic">XXX</span></code> methods on the <code>PreparedStatement</code> object to bind data to the prepared statement to be sent to the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datacc.htm#i1059382">&#34;The setObject and setOracleObject Methods&#34;</a> and <a href="datacc.htm#i1058921">&#34;Other setXXX Methods&#34;</a></div>
<p>The following example shows how to use a prepared statement to run <code>INSERT</code> operations that add two rows to the <code>EMPLOYEES</code> table.</p>
<pre>    // Prepare to insert new names in the EMPLOYEES table
PreparedStatement pstmt = null;
try{
    pstmt = conn.prepareStatement (&#34;insert into EMPLOYEES (EMPLOYEE_ID, FIRST_NAME) values (?, ?)&#34;);

    // Add LESLIE as employee number 1500
    pstmt.setInt (1, 1500);          // The first ? is for EMPLOYEE_ID
    pstmt.setString (2, &#34;LESLIE&#34;);   // The second ? is for FIRST_NAME
    // Do the insertion
    pstmt.execute();

    // Add MARSHA as employee number 507
    pstmt.setInt (1, 507);           // The first ? is for EMPLOYEE_ID
    pstmt.setString (2, &#34;MARSHA&#34;);   // The second ? is for FIRST_NAME
    // Do the insertion
    pstmt.execute();
}

finally{
                if(pstmt!=null)

    // Close the statement
    pstmt.close();
}
</pre>
<p class="subhead2"><a id="JJDBC28070"></a>DDL Operations</p>
<p>To perform data definition language (DDL) operations, you must create a <code>Statement</code> object. The following example shows how to create a table in the database:</p>
<pre>//create table EMPLOYEES with columns EMPLOYEE_ID and FIRST_NAME
String query;
Statement stmt=null;

try{
    query=&#34;create table EMPLOYEES &#34; +
          &#34;(EMPLOYEE_ID int, &#34; +
          &#34;FIRST_NAME varchar(50))&#34;;
    stmt = conn.createStatement();
    stmt.executeUpdate(query);
    }
finally{
     //close the Statement object
     stmt.close();
    }
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also use a <code>PreparedStatement</code> object to perform DDL operations. However, you should not use a <code>PreparedStatement</code> object because the useful part of such an object is that it can have parameters and a DDL operation does not have any parameters.
<p>Also, due to a Database limitation, if you use a <code>PreparedStatement</code> object for a DDL operation, then it only works for the first time it is executed. So, you should use only <code>Statement</code> objects for DDL operations.</p>
</div>
<p>The following example shows how to prepare your DDL statements before any reexecution:</p>
<pre>//
Statement stmt = null;
PreparedStatement pstmt = null;
try{
    pstmt = conn.prepareStatement (&#34;insert into EMPLOYEES (EMPLOYEE_ID, FIRST_NAME) values (?, ?)&#34;);
    stmt = conn.createStatement(&#34;truncate table EMPLOYEES&#34;); 
 
    // Add LESLIE as employee number 1500
    pstmt.setInt (1, 1500);          // The first ? is for EMPLOYEE_ID
    pstmt.setString (2, &#34;LESLIE&#34;);   // The second ? is for FIRST_NAME
    pstmt.execute();
    stmt.executeUpdate();
 
    // Add MARSHA as employee number 507
    pstmt.setInt (1, 507);           // The first ? is for EMPLOYEE_ID
    pstmt.setString (2, &#34;MARSHA&#34;);   // The second ? is for FIRST_NAME
    pstmt.execute();
    stmt.executeUpdate();
    }
finally{
if(pstmt!=null)
 
    // Close the statement
     pstmt.close();
}
</pre></div>
<!-- class="sect2" -->
<a id="i1019153"></a>
<div id="JJDBC28071" class="sect2">
<h3 class="sect2">Com<a id="sthref60"></a><a id="sthref61"></a>mitting Changes</h3>
<p>By default, data manipulation language (DML) operations are committed automatically as soon as they are run. This is known as the <a id="sthref62"></a>auto-commit mode. If auto-commit mode is on and you perform a <code>COMMIT</code> or <code>ROLLBACK</code> operation using the <code>commit</code> or <code>rollback</code> method on a connection object, then you get the following error messages:</p>
<div id="JJDBC29017" class="tblhruleformal">
<p class="titleintable"><a id="sthref63"></a><a id="CIAEFJEH"></a>Table 2-2 Error Messages for Operations Performed When Auto-Commit Mode is ON</p>
<table class="cellalignment2247" title="Error Messages for Operations Performed When Auto-Commit Mode is ON" summary="Error Messages" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t19">Operation</th>
<th class="cellalignment2245" id="r1c2-t19">Error Messages</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t19" headers="r1c1-t19">
<p><code>COMMIT</code></p>
</td>
<td class="cellalignment2246" headers="r2c1-t19 r1c2-t19">
<p><code>Could not commit with auto-commit set on</code></p>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t19" headers="r1c1-t19">
<p><code>ROLLBACK</code></p>
</td>
<td class="cellalignment2246" headers="r3c1-t19 r1c2-t19">
<p><code>Could not rollback with auto-commit set on</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>If a SQLException is raised during a <code>COMMIT</code> or <code>ROLLBACK</code> operation with the error messages as mentioned in <a href="#CIAEFJEH">Table 2-2</a>, then check the auto-commit status of the connection because you get an exception when these operations are performed on a connection that has auto-commit value set to <code>true</code>.</p>
<p>This exception is raised for any one of the following cases:</p>
<ul>
<li>
<p>When auto-commit status is set to <code>true</code> and <code>commit</code> or <code>rollback</code> method is called</p>
</li>
<li>
<p>When the default status of auto-commit is not changed and <code>commit</code> or <code>rollback</code> method is called</p>
</li>
<li>
<p>When the value of the <code>COMMIT_ON_ACCEPT_CHANGES</code> property is <code>true</code> and <code>commit</code> or <code>rollback</code> method is called after calling the <code>acceptChanges</code> method on a rowset</p>
</li>
</ul>
<p>However, you can disable auto-commit mode with the following method call on the <code>Connection</code> object:</p>
<pre>conn.setAutoCommit(false);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apxtips.htm#i1001932">&#34;Disabling Auto-Commit Mode&#34;</a>.</div>
<p>If you disable the auto-commit mode, then you must manually commit or roll back changes with the appropriate method call on the <code>Connection</code> object:</p>
<pre>conn.commit();
</pre>
<p>or:</p>
<pre>conn.rollback();
</pre>
<p>A <code>COMMIT</code> or <code>ROLLBACK</code> operation affects all DML statements run since the last <code>COMMIT</code> or <code>ROLLBACK</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If the auto-commit mode is disabled and you close the connection without explicitly committing or rolling back your last changes, then an implicit <code>COMMIT</code> operation is run.</p>
</li>
<li>
<p>Any data definition language (DDL) operation always causes an implicit <code>COMMIT</code>. If the auto-commit mode is disabled, then this implicit <code>COMMIT</code> will commit any pending DML operations that had not yet been explicitly committed or rolled back.</p>
</li>
</ul>
</div>
<div id="JJDBC28072" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref64"></a>
<h4 class="sect3">Changing Commit Behavior</h4>
<p>When a transaction updates the database, it generates a redo entry corresponding to this update. Oracle Database buffers this redo in memory until the completion of the transaction. When you commit the transaction, the Log Writer (LGWR) process writes the redo entry for the commit to disk, along with the accumulated redo entries of all changes in the transaction. By default, Oracle Database writes the redo to disk before the call returns to the client. This behavior introduces latency in the commit because the application must wait for the redo entry to be persisted on disk.</p>
<p>If your application requires very high transaction throughput and you are willing to trade commit durability for lower commit latency, then you can change the behavior of the default <code>COMMIT</code> operation, depending on the needs of your application. You can change the behavior of the <code>COMMIT</code> operation with the following options:</p>
<ul>
<li>
<p><code>WAIT</code></p>
</li>
<li>
<p><code>NOWAIT</code></p>
</li>
<li>
<p><code>WRITEBATCH</code></p>
</li>
<li>
<p><code>WRITEIMMED</code></p>
</li>
</ul>
<p>These options let you control two different aspects of the commit phase:</p>
<ul>
<li>
<p>Whether the <code>COMMIT</code> call should wait for the server to process it or not. This is achieved by using the <code>WAIT</code> or <code>NOWAIT</code> option.</p>
</li>
<li>
<p>Whether the Log Writer should batch the call or not. This is achieved by using the <code>WRITEIMMED</code> or <code>WRITEBATCH</code> option.</p>
</li>
</ul>
<p>You can also combine different options together. For example, if you want the <code>COMMIT</code> call to return without waiting for the server to process it and also the log writer to process the commits in batch, then you can use the <code>NOWAIT</code> and <code>WRITEBATCH</code> options together. For example:</p>
<pre>((OracleConnection)conn).commit(
    EnumSet.of(
      OracleConnection.CommitOption.WRITEBATCH,
      OracleConnection.CommitOption.NOWAIT));
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
you cannot use the <code>WAIT</code> and <code>NOWAIT</code> options together because they have opposite meanings. If you do so, then the JDBC driver will throw an exception. The same applies to the <code>WRITEIMMED</code> and <code>WRITEBATCH</code> options.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIACFDBB"></a>
<div id="JJDBC29003" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref65"></a>Working with Invisible Columns</h3>
<p>Starting from this release, Oracle Database supports invisible columns. Using this feature, you can add a column to the table in hidden mode and make it visible later. JDBC provides APIs to retrieve information about invisible columns. To get information about whether a column is invisible or not, you can use the <a id="sthref66"></a><code>isColumnInvisible</code> method available in the <code>oracle.jdbc.OracleResultSetMetaData</code> interface in the following way:</p>
<p class="subhead2"><a id="JJDBC29018"></a>Example</p>
<pre>...
Connection conn = DriverManager.getConnection(jdbcURL, user, password);
Statement stmt = conn.createStatement ();
stmt.executeQuery (&#34;create table hiddenColsTable (a varchar(20), b int invisible)&#34;);
stmt.executeUpdate(&#34;insert into hiddenColsTable (a,b ) values(&#39;somedata&#39;,1)&#34;);
stmt.executeUpdate(&#34;insert into hiddenColsTable (a,b) values(&#39;newdata&#39;,2)&#34;);
 
System.out.println (&#34;Invisible columns information&#34;);
try 
{
      ResultSet rset = stmt.executeQuery(&#34;SELECT a, b FROM hiddenColsTable&#34;);
      OracleResultSetMetaData rsmd = (OracleResultSetMetaData)rset.getMetaData();
      while (rset.next())
      {
        System.out.println(&#34;column1 value:&#34; + rset.getString(1));
        System.out.println(&#34;Visibility:&#34; + rsmd.isColumnInvisible(1));
        System.out.println(&#34;column2 value:&#34; + rset.getInt(2));
        System.out.println(&#34;Visibility:&#34; + rsmd.isColumnInvisible(2));
      }
}
catch (Exception ex)
{
       System.out.println(&#34;Exception :&#34; + ex);
       ex.printStackTrace();
}
</pre>
<p>Alternatively, you can also use the <a id="sthref67"></a><code>getColumns</code> method available in the <code>oracle.jdbc.OracleDatabaseMetaData</code> class to retrieve information about invisible columns.</p>
<p class="subhead2"><a id="JJDBC29019"></a>Example</p>
<pre>...
Connection conn = DriverManager.getConnection(jdbcURL, user, password);
Statement stmt = conn.createStatement ();
stmt.executeQuery (&#34;create table hiddenColsTable (a varchar(20), b int invisible)&#34;);
stmt.executeUpdate(&#34;insert into hiddenColsTable (a,b ) values(&#39;somedata&#39;,1)&#34;);
stmt.executeUpdate(&#34;insert into hiddenColsTable (a,b) values(&#39;newdata&#39;,2)&#34;);
 
 System.out.println (&#34;getColumns for table with invisible columns&#34;);
 try
 {
      DatabaseMetaData dbmd = conn.getMetaData();
      ResultSet rs = dbmd.getColumns(null, &#34;HR&#34;, &#34;hiddenColsTable&#34;, null);
      OracleResultSetMetaData rsmd = (OracleResultSetMetaData)rs.getMetaData();
      int colCount = rsmd.getColumnCount();
      System.out.println(&#34;colCount: &#34; + colCount);
      String[] columnNames = new String [colCount];
 
      for (int i = 0; i &lt; colCount; ++i)
      {
        columnNames[i] = rsmd.getColumnName (i + 1);
      }
 
      while (rs.next())
      {
        for (int i = 0; i &lt; colCount; ++i)
           System.out.println(columnNames[i] +&#34;:&#34; +rs.getString (columnNames[i]));
      }
 }
 catch (Exception ex)
 {
      System.out.println(&#34;Exception: &#34; + ex);
      ex.printStackTrace();
 }
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The server-side internal driver, <code>kprb</code> does not support fetching information about invisible columns.</div>
</div>
<!-- class="sect2" -->
<a id="i1006638"></a>
<div id="JJDBC28073" class="sect2">
<h3 class="sect2">Closing the Connection</h3>
<p>You <a id="sthref68"></a>must close the connection to the database after you have performed all the required operations and no longer require the connection. You can close the connection by using the <code>close</code> method of the <code>Connection</code> object, as follows:</p>
<pre>conn.close();
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Typically, you should put <code>close</code> statements in a <code>finally</code> clause.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008334"></a>
<div id="JJDBC28074" class="sect1">
<h2 class="sect1">Sample: Connecting, Querying, and Processing the Results</h2>
<p>The steps in the preceding sections are illustrated in the following example, which uses the Oracle JDBC Thin driver to create a data source, connects to the database, creates a <code>Statement</code> object, runs a query, and processes the result set.</p>
<p>Note that the code for creating the <code>Statement</code> object, running the query, returning and processing the <code>ResultSet</code> object, and closing the statement and connection uses the standard JDBC API.</p>
<pre>import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import oracle.jdbc.pool.OracleDataSource;

class JdbcTest
{
   public static void main (String args []) throws SQLException
   {

OracleDataSource ods = null;
Connection conn = null;
Statement stmt = null;
ResultSet rset = null;

      // Create DataSource and connect to the local database
      ods = new OracleDataSource();
      ods.setURL(&#34;jdbc:oracle:thin:@//localhost:5221/orcl&#34;);
      ods.setUser(&#34;HR&#34;);
      ods.setPassword(&#34;hr&#34;);
      conn = ods.getConnection();

try
{
      // Query the employee names 
      stmt = conn.createStatement (); 
      rset = stmt.executeQuery (&#34;SELECT first_name FROM employees&#34;);

      // Print the name out 
      while (rset.next ())
         System.out.println (rset.getString (1));
    }

      //Close the result set, statement, and the connection

finally{
      if(rset!=null) rset.close();
      if(stmt!=null) stmt.close();
      if(conn!=null) conn.close();
}
   } 
} 
</pre>
<p>If you want to adapt the code for the OCI driver, then replace the call to the <code>OracleDataSource.setURL</code> method with the following:</p>
<pre>ods.setURL(&#34;jdbc:oracle:oci:@MyHostString&#34;);
</pre>
<p>where, <code>MyHostString</code> is an entry in the <code>TNSNAMES.ORA</code> file.</p>
</div>
<!-- class="sect1" -->
<a id="i1008346"></a>
<div id="JJDBC28075" class="sect1">
<h2 class="sect1">Stored Procedure Calls in JDBC Programs</h2>
<p>This section describes how Oracle JDBC drivers support the following kinds of stored procedures:</p>
<ul>
<li>
<p><a href="#i1014127">PL/SQL Stored Procedures</a></p>
</li>
<li>
<p><a href="#i1014132">Java Stored Procedures</a></p>
</li>
<li>
<p><a href="#CIAHIECC">Support for Implicit Results</a></p>
</li>
</ul>
<a id="i1014127"></a>
<div id="JJDBC28076" class="sect2">
<h3 class="sect2"><a id="sthref69"></a><a id="sthref70"></a>PL/SQL Stored Procedures</h3>
<p>JDBC supports the invocation of PL/SQL procedures/functions and anonymous blocks, using either JDBC escape syntax or PL/SQL block syntax. The following PL/SQL calls would work with any Oracle JDBC driver:</p>
<pre>// JDBC escape syntax
CallableStatement cs1 = conn.prepareCall
                       ( &#34;{call proc (?,?)}&#34; ) ; // stored proc
CallableStatement cs2 = conn.prepareCall
                       ( &#34;{? = call func (?,?)}&#34; ) ; // stored func
// PL/SQL block syntax
CallableStatement cs3 = conn.prepareCall
                       ( &#34;begin proc (?,?); end;&#34; ) ; // stored proc
CallableStatement cs4 = conn.prepareCall
                       ( &#34;begin ? := func(?,?); end;&#34; ) ; // stored func
</pre>
<p>As an example of using the Oracle syntax, here is a PL/SQL code snippet that creates a stored function. The PL/SQL function gets a character sequence and concatenates a suffix to it:</p>
<pre>create or replace function foo (val1 char)
return char as
begin
   return val1 || &#39;suffix&#39;;
end;
</pre>
<p>The function invocation in your JDBC program should look like the following:</p>
<pre>OracleDataSource ods = new OracleDataSource();
ods.setURL(&#34;jdbc:oracle:oci:@&lt;hoststring&gt;&#34;);
ods.setUser(&#34;HR&#34;);
ods.setPassword(&#34;hr&#34;);
Connection conn = ods.getConnection();

CallableStatement cs = conn.prepareCall (&#34;begin ? := foo(?); end;&#34;);
cs.registerOutParameter(1,Types.CHAR);
cs.setString(2, &#34;aa&#34;);
cs.execute();
String result = cs.getString(1);
</pre></div>
<!-- class="sect2" -->
<a id="i1014132"></a>
<div id="JJDBC28077" class="sect2">
<h3 class="sect2">Java Stored Procedures</h3>
<p><a id="sthref71"></a><a id="sthref72"></a>You can use JDBC to call Java stored procedures through the SQL interface. The syntax for calling Java stored procedures is the same as the syntax for calling PL/SQL stored procedures, presuming they have been properly published. That is, you have written call specifications to publish them to the Oracle data dictionary. Applications can call Java stored procedures using the Native Java Interface for direct invocation of <code>static</code> Java methods.</p>
</div>
<!-- class="sect2" -->
<a id="CIAHIECC"></a>
<div id="JJDBC29004" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref73"></a>Support for Implicit Results</h3>
<p>Starting from this release, Oracle Database supports results of SQL statements executed in a stored procedure to be returned implicitly to the client applications without the need to explicitly use a <code>REF CURSOR</code>. You can use the following methods to retrieve and process the implicit results returned by PL/SQL procedures or blocks:</p>
<div class="inftblinformal">
<table class="cellalignment2247" summary="This table describes the methods to work with implicit cursors" dir="ltr">
<thead>
<tr class="cellalignment2238">
<th class="cellalignment2245" id="r1c1-t25">Method</th>
<th class="cellalignment2245" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r2c1-t25" headers="r1c1-t25"><code><a id="sthref74"></a>getMoreResults</code></td>
<td class="cellalignment2246" headers="r2c1-t25 r1c2-t25">Checks if there are more results available in the result set</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r3c1-t25" headers="r1c1-t25"><a id="sthref75"></a><code>getMoreResults(int)</code></td>
<td class="cellalignment2246" headers="r3c1-t25 r1c2-t25">Checks if there are more results available in the result set, like the overloaded method. This method accepts an <code>int</code> parameter that can have one of the following values:
<ul>
<li>
<p><code>KEEP_CURRENT_RESULT</code></p>
</li>
<li>
<p><code>CLOSE_ALL_RESULTS</code></p>
</li>
<li>
<p><code>CLOSE_CURRENT_RESULT</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2238">
<td class="cellalignment2246" id="r4c1-t25" headers="r1c1-t25"><code><a id="sthref76"></a>getResultSet</code></td>
<td class="cellalignment2246" headers="r4c1-t25 r1c2-t25">Iteratively retrieves each implicit result from an executed PL/SQL statement</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The server-side internal driver, <code>kprb</code> does not support fetching information about implicit results.</p>
</li>
<li>
<p>Only SELECT queries can be returned implicitly.</p>
</li>
<li>
<p>Applications retrieve each result set sequentially, but can fetch rows from any result set independent of the sequence.</p>
</li>
</ul>
</div>
<p>Suppose you have a procedure called <code>foo</code> as the following:</p>
<pre> create procedure foo as
  c1 sys_refcursor;
  c2 sys_refcursor;
begin
  open c1 for select * from hr.employees;
  dbms_sql.return_result(c1); --return to client
  -- open 1 more cursor
  open c2 for select * from hr.departments;
  dbms_sql.return_result (c2); --return to client
end;
 
</pre>
<p>The following code snippet demonstrates how to retrieve the implicit results returned by PL/SQL procedures using the <code>getMoreResults</code> methods:</p>
<p class="subhead2"><a id="JJDBC29005"></a>Example 1</p>
<pre>String sql = &#34;begin foo; end;&#34;;
...
Connection conn = DriverManager.getConnection(jdbcURL, user, password);
 try {
        Statement stmt = conn.createStatement (); 
        stmt.executeQuery (sql);
 
        while (stmt.getMoreResults())
        {
              ResultSet rs = stmt.getResultSet();
              System.out.println(&#34;ResultSet&#34;);
              while (rs.next())
             {   
                   /* get results */
             }
         }
      }
</pre>
<p>Suppose you have another procedure called <code>foo</code> as the following:</p>
<pre>create or replace procedure foo asc1 sys_refcursor; c2 sys_refcursor; c3 sys_refcursor; begin   open c1 for &#39;select * from hr.employees&#39;;
dbms_sql.return_result (c1);-- cursor 2open c2 for &#39;select * from hr.departments&#39;;
dbms_sql.return_result (c2);-- cursor 3open c3 for &#39;select first_name from hr.employees&#39;;
dbms_sql.return_result (c3); end;
</pre>
<p>The following code snippet demonstrates how to retrieve the implicit results returned by PL/SQL procedures using the <code>getMoreResults(int)</code> methods:</p>
<p class="subhead2"><a id="JJDBC29020"></a>Example 2</p>
<pre>String sql = &#34;begin foo; end;&#34;;
...
Connection conn = DriverManager.getConnection(jdbcURL, <span class="italic">user</span>, <span class="italic">password</span>);
 
try {
        Statement stmt = conn.createStatement (); 
        stmt.executeQuery (sql);
        ResultSet rs = null; 
     
        boolean retval = stmt.getMoreResults(Statement.KEEP_CURRENT_RESULT))
        if (retval)
        {
            rs = stmt.getResultSet();
            System.out.println(&#34;ResultSet&#34;);
            while (rs.next())
            {   
                /* get results */
            }
        }
 
        /* closes open results */
        retval = stmt.getMoreResults(Statement.CLOSE_ALL_RESULTS);
 
        if (retval) 
        {
            System.out.println(&#34;More ResultSet available&#34;);
            rs = stmt.getResultSet();
            System.out.println(&#34;ResultSet&#34;);
            while (rs.next())
            {   
                /* get results */
            }
        }
  
        /* close current result set */
        retval = stmt.getMoreResults(Statement.CLOSE_CURRENT_RESULT);
        
        if(retval)
        {
            System.out.println(&#34;More ResultSet available&#34;);
            rs = stmt.getResultSet();
            while (rs.next())
            {
                /* get Results */
        
            }
        }
    }
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1018335"></a>
<div id="JJDBC28078" class="sect1">
<h2 class="sect1">Processing SQL Exceptions</h2>
<p><a id="sthref77"></a>To handle error conditions, Oracle JDBC drivers throw SQL exceptions, producing instances of the <code><a id="sthref78"></a>java.sql.SQLException</code> class or its subclass. Errors can originate either in the JDBC driver or in the database itself. Resulting messages describe the error and identify the method that threw the error. Additional run-time information can also be appended.</p>
<p>JDBC 3.0 defines only a single exception, <code>SQLException</code>. However, there are large categories of errors and it is useful to distinguish them. Therefore, in JDBC 4.0, a set of subclasses of the <code>SQLException</code> exception is introduced to identify the different categories of errors. To know more about this feature, see <a href="jdbcvers.htm#BCFFIFAD">Support for JDBC 4.0 Standard</a>.</p>
<p>Basic exception handling can include retrieving the error message, retrieving the error code, retrieving the SQL state, and printing the stack trace. The <code>SQLException</code> class includes functionality to retrieve all of this information, when available.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="apxermsg.htm#CEGGHJGF">Appendix D, &#34;JDBC Error Messages&#34;</a></p>
</li>
<li>
<p><a class="olink ERRMG" href="../ERRMG/toc.htm"><span class="italic">Oracle Database Error Messages</span></a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="JJDBC28079"></a>Retrieving Error Information</p>
<p>You can retrieve basic error information with the following methods of the <code>SQLException</code> class:</p>
<ul>
<li>
<p><code>get<a id="sthref79"></a><a id="sthref80"></a>Message</code></p>
</li>
<li>
<p><code>get<a id="sthref81"></a><a id="sthref82"></a>ErrorCode</code></p>
</li>
<li>
<p><code>get<a id="sthref83"></a><a id="sthref84"></a>SQLState</code></p>
</li>
</ul>
<p>The following example prints output from a <code>getMessage</code> method call:</p>
<pre>catch(SQLException e)
{
   System.out.println(&#34;exception: &#34; + e.getMessage());
}
</pre>
<p>This would print the output, such as the following, for an error originating in the JDBC driver:</p>
<pre>exception: Invalid column type
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Error message text is available in alternative languages and character sets supported by Oracle.</div>
<p class="subhead2"><a id="JJDBC28080"></a>Printing the Stack Trace</p>
<p>The <code>SQLException</code> class provides the <code>printStackTrace()</code> method for printing a stack trace. This method prints the stack trace of the <code>Throwable</code> object to the standard error stream. You can also specify a <code>java.io.PrintStream</code> object or <code>java.io.PrintWriter</code> object for output.</p>
<p>The following code fragment illustrates how you can catch SQL exceptions and print the stack trace.</p>
<pre>try { &lt;<span class="italic">some code&gt;</span> } 
catch(SQLException e) { e.printStackTrace (); } 
 
</pre>
<p>To illustrate how the JDBC drivers handle errors, assume the following code uses an incorrect column index:</p>
<pre>// Iterate through the result and print the employee names 
// of the code 
 
try { 
  while (rset.next ()) 
      System.out.println (rset.getString (5));  // incorrect column index
}
catch(SQLException e) { e.printStackTrace (); } 
 
</pre>
<p>Assuming the column index is incorrect, running the program would produce the following error text:</p>
<pre>java.sql.SQLException: Invalid column index
at oracle.jdbc.OracleDriver.OracleResultSetImpl.getDate(OracleResultSetImpl.java:1556)
at Employee.main(Employee.java:41)
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2237">
<tr>
<td class="cellalignment2246">
<table class="cellalignment2242">
<tr>
<td class="cellalignment2241"><a href="overvw.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2241"><a href="part2.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2249">
<table class="cellalignment2240">
<tr>
<td class="cellalignment2241"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2241"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2241"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2241"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2241"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2241"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>