<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114729"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Error%20Handling%20and%20Diagnostics"></a><title>Error Handling and Diagnostics</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2013-04-08T7:43:56Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Pro*FORTRAN&reg; Supplement to the Oracle Precompilers Guide"/>
<meta name="dcterms.identifier" content="E18411-05"/>
<meta name="dcterms.isVersionOf" content="ZZFOR"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Prev" href="ch_one.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_three.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E18411-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">5/8</span> <!-- End Header -->
<div id="ZZFOR201" class="chapter"><a id="CFADJFHD"></a>
<h1 class="chapter"><span class="secnum">2</span> Error Handling and Diagnostics</h1>
<p>This chapter discusses error reporting and recovery as it applies to Pro*FORTRAN. It supplements Chapter 8 of the <a class="olink ZZPRE" href="../ZZPRE/toc.htm"><span class="italic">Programmer&#39;s Guide to the Oracle Precompilers</span></a>.</p>
<p>You learn how to declare and use the SQLSTA status variable and the SQLCOD status variable, and how to include the SQL Communications Area (SQLCA). You also learn how to declare and enable the Oracle Communications Area (ORACA).</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CHDFAFEH">Error Handling Alternatives</a></p>
</li>
<li>
<p><a href="#BABHDBDB">Using Status Variables when MODE={ANSI|ANSI14}</a></p>
</li>
<li>
<p><a href="#BABIBIGG">Using the SQL Communications Area</a></p>
</li>
<li>
<p><a href="#BABDHCEC">Using the Oracle Communications Area</a></p>
</li>
</ul>
<a id="CHDFAFEH"></a>
<div id="ZZFOR202" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Error Handling Alternatives</h2>
<p>The Pro*FORTRAN Precompiler supports four status variables that serve as error handling mechanisms:</p>
<ul>
<li>
<p>SQLCOD</p>
</li>
<li>
<p>SQLSTA</p>
</li>
<li>
<p>SQLCA (using the WHENEVER statement)</p>
</li>
<li>
<p>ORACA</p>
</li>
</ul>
<p>The precompiler MODE option governs ANSI/ISO compliance. The availability of the SQLCOD, SQLSTA, and SQLCA variables depends on the MODE setting. You can declare and use the ORACA variable regardless of the MODE setting. For more information, see <a href="#BABDHCEC">&#34;Using the Oracle Communications Area&#34;</a>.</p>
<p>When MODE={ORACLE|ANSI13}, you must declare the SQLCA status variable. SQLCOD and SQLSTA declarations are accepted (not recommended) but are not recognized as status variables. For more information, see <a href="#BABIBIGG">&#34;Using the SQL Communications Area&#34;</a>.</p>
<p>When MODE={ANSI|ANSI14}, you can use any one, two, or all three of the SQLCOD, SQLSTA, and SQLCA variables. To determine which variable (or variable combination) is best for your application, see <a href="#BABHDBDB">&#34;Using Status Variables when MODE={ANSI|ANSI14}&#34;</a>.</p>
<div id="ZZFOR203" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref81"></a>
<h3 class="sect2">SQLCOD and SQLSTA</h3>
<p>SQLCOD stores error codes and the &#34;not found&#34; condition. It is retained only for compatibility with SQL-89 and has been removed in SQL:1999 and subsequent versions of the standard.</p>
<p>Unlike SQLCOD, SQLSTA stores error and warning codes and uses a standardized coding scheme. After executing a SQL statement, the Oracle server returns a status code to the SQLSTA variable currently in scope. The status code indicates whether a SQL statement executed successfully or raised an exception (error or warning condition). To promote <span class="italic">interoperability</span> (the ability of systems to exchange information easily), the SQL standard predefines all the common SQL exceptions.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR204" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref82"></a>
<h3 class="sect2">SQLCA</h3>
<p>The SQLCA is a record-like, host-language data structure. Oracle updates the SQLCA after every <span class="italic">executable</span> SQL statement. (SQLCA values are undefined after a declarative statement.) By checking Oracle return codes stored in the SQLCA, your program can determine the outcome of a SQL statement. This can be done in two ways:</p>
<ul>
<li>
<p>implicit checking with the WHENEVER statement</p>
</li>
<li>
<p>explicit checking of SQLCA variables</p>
</li>
</ul>
<p>You can use WHENEVER statements, code explicit checks on SQLCA variables, or do both. Generally, using WHENEVER statements is preferable because it is easier, more portable, and ANSI-compliant.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR205" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref83"></a>
<h3 class="sect2">ORACA</h3>
<p>When more information is needed about runtime errors than the SQLCA provides, you can use the ORACA, which contains cursor statistics, SQL statement data, option settings, and system statistics.</p>
<p>The ORACA is optional and can be declared regardless of the MODE setting. For more information about the ORACA status variable, see <a href="#BABDHCEC">&#34;Using the Oracle Communications Area&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHDBDB"></a>
<div id="ZZFOR206" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Status Variables when MODE={ANSI|ANSI14}</h2>
<p>When MODE={ANSI|ANSI14}, you must declare at least one -- you may declare two or all three -- of the following status variables:</p>
<ul>
<li>
<p>SQLCOD</p>
</li>
<li>
<p>SQLSTA</p>
</li>
<li>
<p>SQLCA</p>
</li>
</ul>
<p>Your program can retrieve the outcome of the most recent executable SQL statement by checking SQLCOD or SQLSTA explicitly with your own code after checking executable SQL and PL/SQL statements. Your program can also check SQLCA implicitly (with the WHENEVER SQLERROR and WHENEVER SQLWARNING statements) or it can check the SQLCA variables explicitly.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When MODE={ORACLE|ANSI13}, you must declare the SQLCA status variable. For more information, see Using the SQL Communications Area.</div>
<div id="ZZFOR207" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref84"></a>
<h3 class="sect2">Some Historical Information</h3>
<p>The treatment of status variables and variable combinations by the Oracle Pro*FORTRAN Precompiler has evolved beginning with Release 1.5.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR208" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref85"></a>
<h3 class="sect2">Release 1.5</h3>
<p>Pro*FORTRAN Release 1.5 presumed that there was a status variable SQLCOD whether or not it was declared in a Declare Section; in fact, the precompiler never noted whether SQLCOD was declared or not -- it just presumed it was. SQLCA would be used as a status variable only if there was an INCLUDE of the SQLCA.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR209" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref86"></a>
<h3 class="sect2">Release 1.6</h3>
<p>Beginning with Pro*FORTRAN Release 1.6, the precompiler no longer presumes that there is a SQLCOD status variable and it is not required. The precompiler requires that <span class="italic">at least</span> one of SQLCA, SQLCOD, or SQLSTA be declared.</p>
<p>SQLCOD is recognized as a status variable if and only if at least one of the following criteria is satisfied:</p>
<ul>
<li>
<p>It is declared in a Declare Section with <span class="italic">exactly</span> the right datatype.</p>
</li>
<li>
<p>The precompiler finds no other status variable.</p>
</li>
</ul>
<p>If the precompiler finds a SQLSTA declaration (of <span class="italic">exactly</span> the right type of course) in a Declare Section or finds an INCLUDE of the SQLCA, it will <span class="italic">not</span> presume SQLCOD is declared.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR210" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref87"></a>
<h3 class="sect2">Release 1.7</h3>
<p>Because Pro*FORTRAN Release 1.5 allowed the SQLCOD variable to be declared outside of a Declare Section while also declaring SQLCA, Pro*FORTRAN Release 1.6 and greater is presented with a compatibility problem. A new option, ASSUME_SQLCODE={YES|NO} (default NO), was added to fix this in Release 1.6.7 and is documented as a new feature in Release 1.7.</p>
<p>When ASSUME_SQLCODE=YES, and when SQLSTA and/or SQLCA are declared as a status variables, the precompiler presumes SQLCOD is declared whether or not it is declared in a Declare Section or of the proper type. This causes Releases 1.6.7 and later to act like Release 1.5 in this regard. For information about the precompiler option ASSUME_SQLCODE, see Chapter 6 in the <a class="olink ZZPRE" href="../ZZPRE/toc.htm"><span class="italic">Programmer&#39;s Guide to the Oracle Precompilers</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR211" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref88"></a>
<h3 class="sect2">Declaring Status Variables</h3>
<p>This section describes how to declare SQLCOD and SQLSTA. For information about declaring the SQLCA status variable, see <a href="#BABIDHIA">&#34;Declaring the SQLCA&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR212" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref89"></a>
<h3 class="sect2">Declaring SQLCOD</h3>
<p>SQLCOD must be declared as a 4-byte integer variable either <span class="italic">inside</span> or <span class="italic">outside</span> the Declare Section, In the following example, SQLCOD is declared outside the Declare Section:</p>
<pre>* Declare host and indicator variables.
 EXEC SQL BEGIN DECLARE SECTION
 ...
 EXEC SQL END DECLARE SECTION
* Declare status variable.
 INTEGER*4 SQLCOD
</pre>
<p>If declared outside the Declare Section, SQLCOD is recognized as a status variable only if ASSUME_SQLCODE=YES. When MODE={ORACLE|ANSI13|ANSI14}, declarations of the SQLCOD variable are ignored.</p>
<p>Access to a local SQLCOD is limited by its scope within your program. After every SQL operation, Oracle returns a status code to the SQLCOD currently in scope. So, your program can learn the outcome of the most recent SQL operation by checking SQLCOD explicitly, or implicitly with the WHENEVER statement.</p>
<p>When you declare SQLCOD instead of the SQLCA in a particular compilation unit, the precompiler allocates an internal SQLCA for that unit. Your host program cannot access the internal SQLCA.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR213" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref90"></a>
<h3 class="sect2">Declaring SQLSTA</h3>
<p>SQLSTA <span class="italic">must</span> be declared as a <span class="italic">five</span>-character alphanumeric string <span class="italic">inside</span> the Declare Section, as shown in the following example:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION
 ...
 CHARACTER*5 SQLSTA
 ...
 EXEC SQL END DECLARE SECTION
</pre>
<p>When MODE={ORACLE|ANSI13}, SQLSTA declarations are ignored. Declaring the SQLCA is optional.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR214" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref91"></a>
<h3 class="sect2">Status Variable Combinations</h3>
<p>When MODE={ANSI|ANSI14}, the behavior of the status variables depends on the following:</p>
<ul>
<li>
<p>which variables are declared</p>
</li>
<li>
<p>declaration placement (<span class="italic">inside</span> or <span class="italic">outside</span> the Declare Section)</p>
</li>
<li>
<p>ASSUME_SQLCODE setting</p>
</li>
</ul>
<p>The following tables describe the resulting behavior of each status variable combination when ASSUME_SQLCODE=NO and when ASSUME_SQLCODE=YES, respectively.</p>
<div class="inftblinformal">
<table class="cellalignment1638" title="resulting behavior of status variable" summary="resulting behavior of status variable" dir="ltr">
<thead>
<tr class="cellalignment1627">
<th class="cellalignment1639" id="r1c1-t3">Declare Section (IN/OUT/ --) SQLCODE SQLSTA SQLCA</th>
<th class="cellalignment1639" id="r1c2-t3"><br/></th>
<th class="cellalignment1639" id="r1c3-t3"><br/></th>
<th class="cellalignment1639" id="r1c4-t3">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r2c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r2c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r2c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r2c1-t3 r1c4-t3">SQLCOD is declared and is presumed to be a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r3c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r3c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r3c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r3c1-t3 r1c4-t3">SQLCA is declared as a status variable, and SQLCOD is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r4c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r4c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r4c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r4c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r5c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r5c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r5c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r5c1-t3 r1c4-t3">SQLCOD is declared and is presumed to be a status variable, and SQLSTA is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r6c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r6c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r6c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r6c1-t3 r1c4-t3">SQLCA is declared as a status variable, and SQLCOD and SQLSTA are declared but are not recognized as status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r7c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r7c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r7c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r7c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r8c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r8c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r8c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r8c1-t3 r1c4-t3">SQLSTA is declared as a status variable, and SQLCOD is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r9c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r9c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r9c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r9c1-t3 r1c4-t3">SQLSTA and SQLCA are declared as status variables, and SQLCOD is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r10c1-t3" headers="r1c1-t3">OUT</td>
<td class="cellalignment1633" headers="r10c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r10c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r10c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r11c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r11c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r11c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r11c1-t3 r1c4-t3">SQLCOD is declared as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r12c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r12c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r12c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r12c1-t3 r1c4-t3">SQLCOD and SQLCA are declared as a status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r13c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r13c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r13c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r13c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r14c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r14c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r14c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r14c1-t3 r1c4-t3">SQLCOD is declared as a status variable, and SQLSTA is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r15c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r15c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r15c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r15c1-t3 r1c4-t3">SQLCOD and SQLCA are declared as a status variables, and SQLSTA is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r16c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r16c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r16c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r16c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r17c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r17c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r17c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r17c1-t3 r1c4-t3">SQLCOD and SQLSTA are declared as a status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r18c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r18c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r18c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r18c1-t3 r1c4-t3">SQLCOD, SQLSTA, and SQLCA are declared as a status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r19c1-t3" headers="r1c1-t3">IN</td>
<td class="cellalignment1633" headers="r19c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r19c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r19c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r20c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r20c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r20c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r20c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r21c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r21c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r21c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r21c1-t3 r1c4-t3">SQLCA is declared as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r22c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r22c1-t3 r1c2-t3">--</td>
<td class="cellalignment1633" headers="r22c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r22c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r23c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r23c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r23c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r23c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r24c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r24c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r24c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r24c1-t3 r1c4-t3">SQLCA is declared as a status variable, and SQLSTA is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r25c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r25c1-t3 r1c2-t3">OUT</td>
<td class="cellalignment1633" headers="r25c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r25c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r26c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r26c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r26c1-t3 r1c3-t3">--</td>
<td class="cellalignment1633" headers="r26c1-t3 r1c4-t3">SQLSTA is declared as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r27c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r27c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r27c1-t3 r1c3-t3">OUT</td>
<td class="cellalignment1633" headers="r27c1-t3 r1c4-t3">SQLSTA and SQLCA are declared as status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r28c1-t3" headers="r1c1-t3">--</td>
<td class="cellalignment1633" headers="r28c1-t3 r1c2-t3">IN</td>
<td class="cellalignment1633" headers="r28c1-t3 r1c3-t3">IN</td>
<td class="cellalignment1633" headers="r28c1-t3 r1c4-t3">This status variable configuration is not supported.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1638" title="status variable behavior" summary="status variable behavior" dir="ltr">
<thead>
<tr class="cellalignment1627">
<th class="cellalignment1639" id="r1c1-t4">Declare Section (IN/OUT/ --) SQLCODE SQLSTA SQLCA</th>
<th class="cellalignment1639" id="r1c2-t4"><br/></th>
<th class="cellalignment1639" id="r1c3-t4"><br/></th>
<th class="cellalignment1639" id="r1c4-t4">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r2c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r2c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r2c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r2c1-t4 r1c4-t4">SQLCODE is declared and is presumed to be a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r3c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r3c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r3c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r3c1-t4 r1c4-t4">SQLCA is declared as a status variable, and SQLCODE is declared and is presumed to be a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r4c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r4c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r4c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r4c1-t4 r1c4-t4">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r5c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r5c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r5c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r5c1-t4 r1c4-t4">SQLCODE is declared and is presumed to be a status variable, and SQLSTA is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r6c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r6c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r6c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r6c1-t4 r1c4-t4">SQLCA is declared as a status variable, SQLCODE is declared and is presumed to be a status variable, and SQLSTA is declared but is not recognized as status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r7c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r7c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r7c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r7c1-t4 r1c4-t4">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r8c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r8c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r8c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r8c1-t4 r1c4-t4">SQLSTA is declared as a status variable, and SQLCODE is declared and is presumed to be a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r9c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r9c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r9c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r9c1-t4 r1c4-t4">SQLSTA and SQLCA are declared as status variables, and SQLCODE is declared and is presumed to be a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r10c1-t4" headers="r1c1-t4">OUT</td>
<td class="cellalignment1633" headers="r10c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r10c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r10c1-t4 r1c4-t4">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r11c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r11c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r11c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r11c1-t4 r1c4-t4">SQLCODE is declared as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r12c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r12c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r12c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r12c1-t4 r1c4-t4">SQLCODE and SQLCA are declared as a status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r13c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r13c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r13c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r13c1-t4 r1c4-t4">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r14c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r14c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r14c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r14c1-t4 r1c4-t4">SQLCODE is declared as a status variable, and SQLSTA is declared but not as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r15c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r15c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r15c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r15c1-t4 r1c4-t4">SQLCODE and SQLCA are declared as a status variables, and SQLSTA is declared but is not recognized as a status variable.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r16c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r16c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r16c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r16c1-t4 r1c4-t4">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r17c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r17c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r17c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r17c1-t4 r1c4-t4">SQLCODE and SQLSTA are declared as a status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r18c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r18c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r18c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r18c1-t4 r1c4-t4">SQLCODE, SQLSTA, and SQLCA are declared as a status variables.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r19c1-t4" headers="r1c1-t4">IN</td>
<td class="cellalignment1633" headers="r19c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r19c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r19c1-t4 r1c4-t4">This status variable configuration is not supported.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r20c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r20c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r20c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r20c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r21c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r21c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r21c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r21c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r22c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r22c1-t4 r1c2-t4">--</td>
<td class="cellalignment1633" headers="r22c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r22c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r23c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r23c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r23c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r23c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r24c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r24c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r24c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r24c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r25c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r25c1-t4 r1c2-t4">OUT</td>
<td class="cellalignment1633" headers="r25c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r25c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r26c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r26c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r26c1-t4 r1c3-t4">--</td>
<td class="cellalignment1633" headers="r26c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r27c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r27c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r27c1-t4 r1c3-t4">OUT</td>
<td class="cellalignment1633" headers="r27c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
<tr class="cellalignment1627">
<td class="cellalignment1633" id="r28c1-t4" headers="r1c1-t4">--</td>
<td class="cellalignment1633" headers="r28c1-t4 r1c2-t4">IN</td>
<td class="cellalignment1633" headers="r28c1-t4 r1c3-t4">IN</td>
<td class="cellalignment1633" headers="r28c1-t4 r1c4-t4">This status variable configuration is not supported. SQLCODE must be declared either inside or outside the Declare Section when ASSUME_SQLCODE=YES.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIBIGG"></a>
<div id="ZZFOR215" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the SQL Communications Area</h2>
<p>Oracle uses the SQL Communications Area (SQLCA) to store status information passed to your program at run time. The SQLCA is a record-like, FORTRAN data structure that is updated after each executable SQL statement, so it always reflects the outcome of the most recent SQL operation. To determine that outcome, you can check variables in the SQLCA explicitly with your own FORTRAN code or implicitly with the WHENEVER statement.</p>
<p>When MODE={ORACLE|ANSI13}, the SQLCA is required; if the SQLCA is not declared, compile-time errors will occur. The SQLCA is optional when MODE={ANSI|ANSI14}, but you cannot use the WHENEVER SQLWARNING statement without the SQLCA. So, if you want to use the WHENEVER SQLWARNING statement, you must declare the SQLCA.</p>
<p>When MODE={ANSI|ANSI14}, you must declare either SQLSTA (see &#34;Declaring SQLSTA&#34;) or SQLCOD (see &#34;Declaring SQLCOD&#34;) or both. The SQLSTA status variable supports the SQLSTA status variable specified by the SQL standard. You can use the SQLSTA status variable with or without SQLCOD. For more information see Chapter 8 of the <a class="olink ZZPRE" href="../ZZPRE/toc.htm"><span class="italic">Programmer&#39;s Guide to the Oracle Precompilers</span></a>.</p>
<div id="ZZFOR216" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref92"></a>
<h3 class="sect2">What&#39;s in the SQLCA?</h3>
<p>The SQLCA contains runtime information about the execution of SQL statements, such as Oracle error codes, warning flags, event information, rows-processed count, and diagnostics.</p>
<p><a href="#CHDGDAHH">Figure 2-1</a> shows all the variables in the SQLCA. However, SQLWN2, SQLWN5, SQLWN6, SQLWN7, and SQLEXT are not currently in use.</p>
<div id="ZZFOR217" class="figure">
<p class="titleinfigure"><a id="CHDGDAHH"></a>Figure 2-1 SQLCA Variable Declarations for Pro*FORTRAN</p>
<img width="536" height="623" src="img/image002.gif" alt="SQLCA Variable Declarations"/><br/>
<a id="sthref93" href="img_text/image002.htm">Description of &#34;Figure 2-1 SQLCA Variable Declarations for Pro*FORTRAN&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>To ensure portability, LOGICAL variables are used in the SQLCA instead of CHARACTER variables. For a full description of the SQLCA, its fields, and the values its fields can store, see Chapter 8 of the <a class="olink ZZPRE" href="../ZZPRE/toc.htm"><span class="italic">Programmer&#39;s Guide to the Oracle Precompilers</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABIDHIA"></a>
<div id="ZZFOR218" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Declaring the SQLCA</h3>
<p>To declare the SQLCA, simply include it (using an EXEC SQL INCLUDE statement) in your Pro*FORTRAN source file outside the Declare Section as follows:</p>
<pre>* Include the SQL Communications Area (SQLCA).
 EXEC SQL INCLUDE SQLCA
</pre>
<p>Because it is a COMMON block, the SQLCA must be declared <span class="italic">outside</span> the Declare Section. Furthermore, the SQLCA must come before the CONNECT statement and the first executable FORTRAN statement.</p>
<p>You must declare the SQLCA in each subroutine and function that contains SQL statements. Every time a SQL statement in one of the subroutines or functions is executed, Oracle updates the SQLCA held in the COMMON block.</p>
<p>Ordinarily, only the order and datatypes of variables in a COMMON-list matter, not their names. However, you cannot rename the SQLCA variables because the precompiler generates code that refers to them. Thus, all declarations of the SQLCA must be identical.</p>
<p>When you precompile your program, the INCLUDE SQLCA statement is replaced by several variable declarations that allow Oracle to communicate with the program.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR219" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref94"></a>
<h3 class="sect2">Key Components of Error Reporting</h3>
<p>The key components of Pro*FORTRAN error reporting depend on several fields in the SQLCA.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR220" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref95"></a>
<h3 class="sect2">Status Codes</h3>
<p>Every executable SQL statement returns a status code in the SQLCA variable SQLCDE, which you can check implicitly with WHENEVER SQLERROR or explicitly with your own FORTRAN code.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR221" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref96"></a>
<h3 class="sect2">Warning Flags</h3>
<p>Warning flags are returned in the SQLCA variables SQLWN0 through SQLWN7, which you can check with WHENEVER SQLWARNING or with your own FORTRAN code. These warning flags are useful for detecting runtime conditions that are not considered errors by Oracle.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR222" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref97"></a>
<h3 class="sect2">Rows-Processed Count</h3>
<p>The number of rows processed by the most recently executed SQL statement is recorded in the SQLCA variable SQLERD(3). For repeated FETCHes on an OPEN cursor, SQLERD(3) keeps a running total of the number of rows fetched.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR223" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref98"></a>
<h3 class="sect2">Parse Error Offset</h3>
<p>Before executing a SQL statement, Oracle must parse it; that is, examine it to make sure it follows syntax rules and refers to valid database objects. If Oracle finds an error, an offset is stored in the SQLCA variable SQLERD(5), which you can check explicitly. The offset specifies the character position in the SQL statement at which the parse error begins. The first character occupies position zero. For example, if the offset is 9, the parse error begins at the tenth character.</p>
<p>If your SQL statement does not cause a parse error, Oracle sets SQLERD(5) to zero. Oracle also sets SQLERD(5) to zero if a parse error begins at the first character, which occupies position zero. So, check SQLERD(5) only if SQLCDE is negative, which means that an error has occurred.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR224" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref99"></a>
<h3 class="sect2">Error Message Text</h3>
<p>The error code and message for Oracle errors are available in the SQLCA variable SQLEMC. For example, you might place the following statements in an error-handling routine:</p>
<pre>Handle SQL execution errors.
 WRITE (*, 10000) SQLEMC
10000 FORMAT (1X, 70A1)
 EXEC SQL WHENEVER SQLERROR CONTINUE
 EXEC SQL ROLLBACK WORK RELEASE
 ...
</pre>
<p>At most, the first 70 characters of message text are stored. For messages longer than 70 characters, you must call the SQLGLM function, which is discussed next.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR225" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref100"></a>
<h3 class="sect2">Getting the Full Text of Error Messages</h3>
<p>The SQLCA can accommodate error messages of up to 70 characters in length. To get the full text of longer (or nested) error messages, you need the SQLGLM function. If connected to Oracle, you can call SQLGLM using the syntax</p>
<pre>CALL SQLGLM (MSGBUF, BUFLEN, MSGLEN)
</pre>
<p>where:</p>
<pre>MSGBUF
</pre>
<p>Is the buffer in which you want Oracle to store the error message. Oracle blank-pads to the end of this buffer.</p>
<pre>BUFLEN
</pre>
<p>Is an integer variable that specifies the maximum length of MSGBUF in bytes.</p>
<pre>MSGLEN
</pre>
<p>Is an integer variable in which Oracle stores the actual length of the error message.</p>
<p>The maximum length of an Oracle error message is 512 characters including the error code, nested messages, and message inserts such as table and column names. The maximum length of an error message returned by SQLGLM depends on the value you specify for BUFLEN. In the following example, you use SQLGLM to get an error message of up to 200 characters in length:</p>
<pre>* Declare variables for function call.
 LOGICAL*1 MSGBUF(200)
 INTEGER*4 BUFLEN
 INTEGER*4 MSGLEN
 DATA BUFLEN /200/
 EXEC SQL WHENEVER SQLERROR GO TO 9000
 ...
* Handle SQL execution errors.
 9000 WRITE (*,9100)
 9100 FORMAT (1X, &#39; &gt;&gt;&gt; Oracle error detected&#39;, /)
* Get and display the full text of the error message.
 CALL SQLGLM (MSGBUF, BUFLEN, MSGLEN)
 WRITE (*, 9200) (MSGBUF(J), J = 1, MSGLEN)
 9200 FORMAT (1X, 200A1, /)
 ...
</pre>
<p>In the example, SQLGLM is called only when a SQL error has occurred. Always make sure SQLCOD is negative <span class="italic">before</span> calling SQLGLM. If you call SQLGLM when SQLCOD is zero, you get the message text associated with a prior SQL statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR226" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref101"></a>
<h3 class="sect2">Using the WHENEVER Statement</h3>
<p>By default, the Pro*FORTRAN Precompiler ignores Oracle error and warning conditions and continues processing (if possible). To do automatic condition checking and error handling, you need the WHENEVER statement.</p>
<p>With the WHENEVER statement you can specify actions to be taken when Oracle detects an error, warning condition, or &#34;not found&#34; condition. These actions include continuing with the next statement, calling a subroutine, branching to a labeled statement, or stopping.</p>
<p>Code the WHENEVER statement using the following syntax:</p>
<pre>EXEC SQL WHENEVER &lt;condition&gt; &lt;action&gt;
</pre>
<p>You can have Oracle automatically check the SQLCA for any of the following conditions, which are described in the <a class="olink ZZPRE" href="../ZZPRE/toc.htm"><span class="italic">Programmer&#39;s Guide to the Oracle Precompilers</span></a>:</p>
<ul>
<li>
<p>SQLWARNING</p>
</li>
<li>
<p>SQLERROR</p>
</li>
<li>
<p>NOT FOUND</p>
</li>
</ul>
<p>When Oracle detects one of the preceding conditions, you can have your program take any of the following actions:</p>
<ul>
<li>
<p>CONTINUE</p>
</li>
<li>
<p>DO <span class="italic">subroutine_call</span></p>
</li>
<li>
<p>GOTO <span class="italic">statement_label</span></p>
</li>
<li>
<p>STOP</p>
</li>
</ul>
<p>When using the WHENEVER ... DO statement, the usual rules for entering and exiting a subroutine apply. However, passing parameters to the subroutine is <span class="italic">not</span> allowed. Furthermore, the subroutine must <span class="italic">not</span> return a value.</p>
<p>In the following example, WHENEVER SQLERROR DO statements are used to handle specific errors:</p>
<pre>EXEC SQL WHENEVER SQLERROR DO CALL INSERR
 EXEC SQL INSERT INTO EMP (EMPNO, ENAME, DEPTNO)
 VALUES (:MYEMPNO, :MYENAME, :MYDEPTNO)
 EXEC SQL WHENEVER SQLERROR DO CALL DELERR
 EXEC SQL DELETE FROM DEPT
 WHERE DEPTNO = :MYDEPTNO
 ...
* Error-handling subroutines
 SUBROUTINE INSERR
* Check for &#34;duplicate key value&#34; Oracle error.
 IF (SQLCDE .EQ. -1) THEN
 ...
* Check for &#34;value too large&#34; Oracle error.
 ELSE IF (SQLCDE .EQ. -1401) THEN
 ...
 ELSE
 ...
 END IF
 ...
 SUBROUTINE DELERR
* Check for the number of rows processed.
 IF (SQLERD(3) .EQ. 0) THEN
 ...
 ELSE
 ...
 END IF
 ...
</pre>
<p>Notice how the subroutines check variables in the SQLCA to determine a course of action. For more information about the WHENEVER conditions and actions, see Chapter 8 of the <a class="olink ZZPRE" href="../ZZPRE/toc.htm"><span class="italic">Programmer&#39;s Guide to the Oracle Precompilers</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR227" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref102"></a>
<h3 class="sect2">Scope</h3>
<p>Because WHENEVER is a declarative statement, its scope is positional, not logical. It tests all executable SQL statements that follow it in the source file, not in the flow of program logic. So, code the WHENEVER statement before the first executable SQL statement you want to test.</p>
<p>A WHENEVER statement stays in effect until superseded by another WHENEVER statement checking for the same condition.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
You might want to place WHENEVER statements at the beginning of each program unit that contains SQL statements. That way, SQL statements in one program unit will not reference WHENEVER actions in another program unit, causing errors at compile or run time.</div>
</div>
<!-- class="sect2" -->
<div id="ZZFOR228" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref103"></a>
<h3 class="sect2">Careless Usage: Examples</h3>
<p>Careless use of the WHENEVER statement can cause problems. For example, the following code enters an infinite loop if the DELETE statement sets the NOT FOUND condition, because no rows meet the search condition:</p>
<pre>* Improper use of WHENEVER
 EXEC SQL WHENEVER NOT FOUND GOTO 7000
 6000 EXEC SQL FETCH EMPCUR INTO :MYENAME, :MYSAL
 ...
 GOTO 6000
 7000 EXEC SQL DELETE FROM EMP WHERE EMPNO = :MYEMPNO
 ...
</pre>
<p>In the next example, you handle the NOT FOUND condition properly by resetting the GOTO target:</p>
<pre>* Proper use of WHENEVER
 EXEC SQL WHENEVER NOT FOUND GOTO 7000
 6000 EXEC SQL FETCH EMPCUR INTO :MYENAME, :MYSAL
 ...
 GOTO 6000
 7000 EXEC SQL WHENEVER NOT FOUND GOTO 8000
 EXEC SQL DELETE FROM EMP WHERE EMPNO = :MYEMPNO
 ...
 8000 CONTINUE
</pre>
<p>Verify that all SQL statements governed by a WHENEVER ... GOTO statement can branch to the GOTO label. The following code results in a compilation error because the label 5000 in subroutine DELROW is not within the scope of the INSERT statement in subroutine INSROW:</p>
<pre>SUBROUTINE DELROW
 ...
 EXEC SQL WHENEVER SQLERROR GOTO 5000
 EXEC SQL DELETE FROM EMP WHERE DEPTNO = :MYDEPTNO
 ...
 5000 WRITE (*, 10000) SQLEMC
10000 FORMAT (1X, 70A1)
 RETURN
 END
 SUBROUTINE INSROW
 ...
 EXEC SQL INSERT INTO EMP (EMPNO, ENAME, DEPTNO)
 VALUES (:MYEMPNO, :MYENAME, :MYDEPTNO)
 ... 
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDHCEC"></a>
<div id="ZZFOR229" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the Oracle Communications Area</h2>
<p>The SQLCA handles standard SQL communications. The Oracle Communications Area (ORACA) is a similar structure that you can include in your program to handle Oracle-specific communications. When you need more runtime information than the SQLCA provides, use the ORACA.</p>
<p>Besides helping you to diagnose problems, the ORACA lets you monitor your program&#39;s use of Oracle resources such as the SQL Statement Executor and the <span class="italic">cursor cache</span>, an area of memory reserved for cursor management.</p>
<div id="ZZFOR230" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref104"></a>
<h3 class="sect2">What&#39;s in the ORACA?</h3>
<p>The ORACA contains option settings, system statistics, and extended diagnostics. <a href="#CFAJJEEJ">Figure 2-2</a> shows all the variables in the ORACA.</p>
<div id="ZZFOR231" class="figure">
<p class="titleinfigure"><a id="CFAJJEEJ"></a>Figure 2-2 ORACA Variable Declarations for Pro*FORTRAN</p>
<img width="536" height="375" src="img/image003.gif" alt="ORACA Variable Declarations"/><br/>
<a id="sthref105" href="img_text/image003.htm">Description of &#34;Figure 2-2 ORACA Variable Declarations for Pro*FORTRAN&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>To ensure portability, LOGICAL variables are used in the ORACA instead of CHARACTER variables. For a full description of the ORACA, its fields, and the values its fields can store, see Chapter 8 of the <a class="olink ZZPRE" href="../ZZPRE/toc.htm"><span class="italic">Programmer&#39;s Guide to the Oracle Precompilers</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR232" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref106"></a>
<h3 class="sect2">Declaring the ORACA</h3>
<p>To declare the ORACA, simply include it (using an EXEC SQL INCLUDE statement) in your Pro*FORTRAN source file outside the Declare Section as follows:</p>
<pre>* Include the Oracle Communications Area (ORACA).
 EXEC SQL INCLUDE ORACA
</pre>
<p>Because it is a COMMON block, the ORACA must be declared <span class="italic">outside</span> the Declare Section. Furthermore, the ORACA must come before the CONNECT statement and the first executable FORTRAN statement.</p>
<p>You can redeclare the ORACA in any subroutine or function that contains SQL statements. Every time a SQL statement in the subroutine or function is executed, Oracle updates the ORACA held in COMMON.</p>
<p>Ordinarily, only the order and datatypes of variables in a COMMON-list matter, not their names. However, you <span class="italic">cannot</span> rename the ORACA variables because the precompiler generates code that refers to them. Thus, all declarations of the ORACA must be identical.</p>
</div>
<!-- class="sect2" -->
<div id="ZZFOR233" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref107"></a>
<h3 class="sect2">Enabling the ORACA</h3>
<p>To enable the ORACA, you must set the ORACA precompiler option to YES on the command line or in a configuration file with</p>
<pre>ORACA=YES
</pre>
<p>or inline with</p>
<pre>* Enable the ORACA.
 EXEC ORACLE OPTION (ORACA=YES)
</pre>
<p>Then, you must choose appropriate runtime options by setting flags in the ORACA. Enabling the ORACA is optional because it adds to runtime overhead. The default setting is ORACA=NO.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1626">
<tr>
<td class="cellalignment1633">
<table class="cellalignment1637">
<tr>
<td class="cellalignment1630"><a href="ch_one.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1630"><a href="ch_three.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1635">
<table class="cellalignment1636">
<tr>
<td class="cellalignment1630"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1630"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1630"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1630"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1630"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>