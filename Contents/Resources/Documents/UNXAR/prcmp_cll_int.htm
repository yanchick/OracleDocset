<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114111"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Oracle%20Precompilers%20and%20the%20Oracle%20Call%20Interface"></a><title>Using Oracle Precompilers and the Oracle Call Interface</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093"/>
<meta name="dcterms.created" content="2017-07-25T3:25:32Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Administrator&#39;s Reference"/>
<meta name="dcterms.identifier" content="E10638-27"/>
<meta name="dcterms.isVersionOf" content="UNXAR"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="cnfg_net_srv.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ldr_demo.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E10638-27.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/20</span> <!-- End Header -->
<div id="UNXAR006" class="chapter"><a id="CFAEAGDD"></a>
<h1 class="chapter"><span class="secnum">6</span> Using Oracle Precompilers and the Oracle Call Interface</h1>
<p>This chapter describes how to use Oracle precompilers and the Oracle Call Interface. It contains the following sections:</p>
<ul>
<li>
<p><a href="#i33304">Overview of Oracle Precompilers</a></p>
</li>
<li>
<p><a href="#CHDHBDBF">Bit-Length Support for Client Applications</a></p>
</li>
<li>
<p><a href="#i33246">Pro*C/C++ Precompiler</a></p>
</li>
<li>
<p><a href="#i36455">Pro*COBOL Precompiler</a></p>
</li>
<li>
<p><a href="#i28565">Pro*FORTRAN Precompiler</a></p>
</li>
<li>
<p><a href="#CFAJDECA">SQL*Module for ADA</a></p>
</li>
<li>
<p><a href="#i37921">OCI and OCCI</a></p>
</li>
<li>
<p><a href="#CACCDAFI">Running Oracle JDBC/OCI Programs with a 64-Bit Driver</a></p>
</li>
<li>
<p><a href="#i26133">Custom Make Files</a></p>
</li>
<li>
<p><a href="#i26152">Correcting Undefined Symbols</a></p>
</li>
<li>
<p><a href="#i26193">Multithreaded Applications</a></p>
</li>
<li>
<p><a href="#i26199">Using Signal Handlers</a></p>
</li>
<li>
<p><a href="#i26396">XA Functionality</a></p>
</li>
</ul>
<a id="i33304"></a>
<div id="UNXAR186" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.1</span> Overview of Oracle Precompilers<a id="sthref169"></a></h2>
<p>Oracle precompilers are application development tools that are used to combine SQL statements for an Oracle Database with programs written in a high-level language. Oracle precompilers are compatible with ANSI SQL and are used to develop and open customized applications that run with Oracle Database or any other ANSI SQL database management system.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHCDHAF">Precompiler Configuration Files</a></p>
</li>
<li>
<p><a href="#BABFEJHA">Relinking Precompiler Executables</a></p>
</li>
<li>
<p><a href="#CIHIIGEG">Issues Common to All Precompilers</a></p>
</li>
<li>
<p><a href="#CIHEFGAC">Static and Dynamic Linking</a></p>
</li>
<li>
<p><a href="#CACDIFAD">Client Shared and Static Libraries</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">ORACLE_HOME</code> in this section refers to <code dir="ltr">ORACLE_HOME</code> that is created while installing Oracle Database Client 12<span class="italic">c</span> by using the Administrator Install type.</div>
<a id="CIHCDHAF"></a>
<div id="UNXAR187" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.1</span> Precompiler Configuration Files<a id="sthref170"></a></h3>
<p>Configuration files for the Oracle precompilers are located in the <code dir="ltr">$ORACLE_HOME/precomp/admin</code> directory.</p>
<p><a href="#g40004">Table 6-1</a> lists the names of the configuration files for each precompiler.</p>
<div id="UNXAR188" class="tblformal">
<p class="titleintable"><a id="sthref171"></a><a id="g40004"></a>Table 6-1 System Configuration Files for Oracle Precompilers</p>
<table class="cellalignment5723" title="System Configuration Files for Oracle Precompilers" summary="This table lists the system configuration files for Oracle Precompilers" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t3">Product</th>
<th class="cellalignment5722" id="r1c2-t3">Configuration File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t3" headers="r1c1-t3">
<p>Pro*C/C++</p>
</td>
<td class="cellalignment5718" headers="r2c1-t3 r1c2-t3">
<p><code dir="ltr">pcscfg.cfg</code><a id="sthref172"></a><a id="sthref173"></a><a id="sthref174"></a></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t3" headers="r1c1-t3">
<p>Pro*COBOL</p>
</td>
<td class="cellalignment5718" headers="r3c1-t3 r1c2-t3">
<p><code dir="ltr">pcbcfg.cfg</code><a id="sthref175"></a><a id="sthref176"></a><a id="sthref177"></a></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r4c1-t3" headers="r1c1-t3">
<p>Pro*FORTRAN (IBM AIX on POWER Systems (64-Bit), HP-UX, and Oracle Solaris)</p>
</td>
<td class="cellalignment5718" headers="r4c1-t3 r1c2-t3">
<p><code dir="ltr">pccfor.cfg</code><a id="sthref178"></a><a id="sthref179"></a><a id="sthref180"></a></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r5c1-t3" headers="r1c1-t3">
<p>Object Type Translator</p>
</td>
<td class="cellalignment5718" headers="r5c1-t3 r1c2-t3">
<p><code dir="ltr">ottcfg.cfg</code><a id="sthref181"></a><a id="sthref182"></a><a id="sthref183"></a></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r6c1-t3" headers="r1c1-t3">
<p>SQL*Module for Ada (IBM AIX on POWER Systems (64-Bit))</p>
</td>
<td class="cellalignment5718" headers="r6c1-t3 r1c2-t3">
<p><code dir="ltr">pmscfg.cfg</code><a id="sthref184"></a><a id="sthref185"></a><a id="sthref186"></a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABFEJHA"></a>
<div id="UNXAR189" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.2</span> Relinking Precompiler Executables<a id="sthref187"></a><a id="sthref188"></a></h3>
<p>Use the <code dir="ltr">$ORACLE_HOME/precomp/lib/ins_precomp.mk</code> <a id="sthref189"></a><a id="sthref190"></a><a id="sthref191"></a>make file to relink all precompiler executables. To manually relink a particular precompiler executable, enter the following command:</p>
<pre dir="ltr">$ make -f ins_precomp.mk relink exename = <span class="italic">executable_name</span>
</pre>
<p>This command creates the new executable in the <code dir="ltr">$ORACLE_HOME/precomp/lib</code> directory, and then moves it to the <code dir="ltr">$ORACLE_HOME/bin</code> directory.</p>
<p>In the preceding example, replace <code dir="ltr"><span class="codeinlineitalic">executable</span></code> with one of the product executables listed in <a href="#g39923">Table 6-2</a>.<a id="sthref192"></a><a id="sthref193"></a></p>
<p><a href="#g39923">Table 6-2</a> lists the executables for Oracle Precompilers.</p>
<div id="UNXAR190" class="tblformal">
<p class="titleintable"><a id="sthref194"></a><a id="g39923"></a>Table 6-2 Executables for Oracle Precompilers</p>
<table class="cellalignment5723" title="Executables for Oracle Precompilers" summary="This table lists products and the names of their corresponding executables" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t4">Product</th>
<th class="cellalignment5722" id="r1c2-t4">Executable</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t4" headers="r1c1-t4">
<p>Pro*FORTRAN 32-bit (Oracle Solaris, HP-UX and IBM AIX on POWER Systems (64-Bit))</p>
</td>
<td class="cellalignment5718" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">profor</code></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t4" headers="r1c1-t4">
<p>Pro*COBOL 32-bit (Oracle Solaris, HP-UX, and IBM AIX on POWER Systems (64-Bit))</p>
</td>
<td class="cellalignment5718" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr">procob</code></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r4c1-t4" headers="r1c1-t4">
<p>Pro*COBOL (Oracle Solaris, HP-UX, and IBM AIX on POWER Systems (64-Bit))</p>
</td>
<td class="cellalignment5718" headers="r4c1-t4 r1c2-t4">
<p><code dir="ltr">procob</code> or <code dir="ltr">rtsora</code></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r5c1-t4" headers="r1c1-t4">
<p>Pro*C/C++ 32 bit (HP-UX)</p>
</td>
<td class="cellalignment5718" headers="r5c1-t4 r1c2-t4">
<p><code dir="ltr">proc</code></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r6c1-t4" headers="r1c1-t4">
<p>Pro*FORTRAN (HP-UX)</p>
</td>
<td class="cellalignment5718" headers="r6c1-t4 r1c2-t4">
<p><code dir="ltr">profor</code></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r7c1-t4" headers="r1c1-t4">
<p>SQL*Module for Ada (IBM AIX on POWER Systems (64-Bit))</p>
</td>
<td class="cellalignment5718" headers="r7c1-t4 r1c2-t4">
<p><code dir="ltr">modada</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="CIHIIGEG"></a>
<div id="UNXAR193" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.3</span> Issues Common to All Precompilers</h3>
<p>The following issues are common to all precompilers:</p>
<ul>
<li>
<p>Uppercase to Lowercase Conversion<a id="sthref195"></a></p>
<p>In languages other than C, the compiler converts an uppercase function or subprogram name to lowercase. This can cause a <code dir="ltr">No such user exists</code> error message. If you receive this error message, then verify that the case of the function or subprogram name in the option file matches the case used in the IAPXTB table.</p>
</li>
<li>
<p>Vendor Debugger Programs<a id="sthref196"></a><a id="sthref197"></a></p>
<p>Precompilers and vendor-supplied debuggers can be incompatible. Oracle does not guarantee that a program run using a debugger performs the same way when it is run without the debugger.</p>
</li>
<li>
<p>Value of <code dir="ltr">IRECLEN</code> and <code dir="ltr">ORECLEN</code> parameters<a id="sthref198"></a><a id="sthref199"></a><a id="sthref200"></a></p>
<p>The <code dir="ltr">IRECLEN</code> and <code dir="ltr">ORECLEN</code> parameters do not have maximum values.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHEFGAC"></a>
<div id="UNXAR194" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.4</span> Static and Dynamic Linking<a id="sthref201"></a><a id="sthref202"></a></h3>
<p>You can statically or dynamically link Oracle libraries with precompiler and OCI or OCCI applications. With static linking, the libraries and objects of the whole application are linked into a single executable program. As a result, application executables can become very large.</p>
<p>With dynamic linking, the executing code is partly stored in the executable program and partly stored in libraries that are linked dynamically by the application at run time. Libraries that are linked at run time are called dynamic or shared libraries. The benefits of dynamic linking are:</p>
<ul>
<li>
<p>Reduced disk space requirements: Multiple applications or calls to the same application can use the same dynamic libraries.</p>
</li>
</ul>
<ul>
<li>
<p>Reduced main memory requirements: The same dynamic library image is loaded into main memory only once, and it can be shared by multiple application.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CACDIFAD"></a>
<div id="UNXAR195" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.5</span> Client Shared and Static Libraries<a id="sthref203"></a><a id="sthref204"></a><a id="sthref205"></a></h3>
<p>The client shared and static libraries are located in <code dir="ltr">$ORACLE_HOME/lib.</code> If you use the Oracle-provided <code dir="ltr">demo_</code><code dir="ltr"><span class="codeinlineitalic">product</span></code><code dir="ltr">.mk</code> file to link an application, then the client shared library is linked by default.</p>
<p>If the shared library path environment variable setting does not include the directory that contains the client shared library, then you may see an error message similar to one of the following lines when starting an executable:</p>
<pre dir="ltr">Cannot load library libclntsh.a
cannot open shared library: .../libclntsh.sl.10.1
libclntsh.so.10.1: can&#39;t open file: errno=2 
can&#39;t open library: .../libclntsh.dylib.10.1  
Cannot map libclntsh.so
</pre>
<p>To avoid this error, set the shared library path environment variable to specify the appropriate directory. The following table shows sample settings for this environment variable name. If the platform supports both 32-bit and 64-bit applications, then ensure that you specify the correct directory, depending on the application that you want to run.</p>
<div class="inftblinformal">
<table class="cellalignment5721" title="Shared Library Path Environment Variable Settings" summary="This table lists sample settings for the shared library path environment variable" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t5">Platform</th>
<th class="cellalignment5722" id="r1c2-t5">Environment Variable</th>
<th class="cellalignment5722" id="r1c3-t5">Sample Setting</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t5" headers="r1c1-t5">Oracle Solaris (32-bit and 64-bit applications) and Linux</td>
<td class="cellalignment5718" headers="r2c1-t5 r1c2-t5"><code dir="ltr">LD_LIBRARY_PATH</code></td>
<td class="cellalignment5718" headers="r2c1-t5 r1c3-t5"><code dir="ltr">$ORACLE_HOME/lib</code></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t5" headers="r1c1-t5">IBM AIX on POWER Systems (32-bit and 64-bit applications)</td>
<td class="cellalignment5718" headers="r3c1-t5 r1c2-t5"><code dir="ltr">LIBPATH</code></td>
<td class="cellalignment5718" headers="r3c1-t5 r1c3-t5"><code dir="ltr">$ORACLE_HOME/lib</code></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r4c1-t5" headers="r1c1-t5">HP-UX (32-bit applications)</td>
<td class="cellalignment5718" headers="r4c1-t5 r1c2-t5"><code dir="ltr">SHLIB_PATH</code></td>
<td class="cellalignment5718" headers="r4c1-t5 r1c3-t5"><code dir="ltr">$ORACLE_HOME/lib</code></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r5c1-t5" headers="r1c1-t5">HP-UX (64-bit applications)</td>
<td class="cellalignment5718" headers="r5c1-t5 r1c2-t5"><code dir="ltr">LD_LIBRARY_PATH</code></td>
<td class="cellalignment5718" headers="r5c1-t5 r1c3-t5"><code dir="ltr">$ORACLE_HOME/lib</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>The client shared library is created automatically during installation. If you must re-create it, then complete the following procedure:</p>
<ol>
<li>
<p>Quit all client applications that use the client shared library, including all Oracle client applications such as SQL*Plus and Oracle Recovery Manager.</p>
</li>
<li>
<p>Log in as the <code dir="ltr">oracle</code> user, and run the following command:</p>
<pre dir="ltr">$ $ORACLE_HOME/bin/genclntsh
</pre></li>
</ol>
<p class="subhead2"><a id="UNXAR418"></a>Nonthreaded Client Shared Library</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The information in this section applies to HP-UX systems.</div>
<p>On HP-UX, you can use a non-threaded client shared library. However, you cannot use this library with any OCI application that uses or has a dependency on threads.</p>
<p>To use this library for applications that do not use threads, run the following command to build the OCI application for 32 and 64-bit:</p>
<pre dir="ltr">$ make -f demo_rdbms.mk build_nopthread EXE=oci02 OBJS=oci02.o
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHBDBF"></a>
<div id="UNXAR197" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.2</span> Bit-Length Support for Client Applications<a id="sthref206"></a></h2>
<p>The client application type (32-bit or 64-bit) is supported on the following platforms:</p>
<ul>
<li>
<p>Oracle Solaris</p>
</li>
<li>
<p>Linux x86-64</p>
</li>
<li>
<p>IBM: Linux on System z</p>
</li>
<li>
<p>IBM AIX on POWER Systems (64-Bit)</p>
</li>
<li>
<p>HP-UX Itanium</p>
</li>
</ul>
<p>The following table lists the 32-bit and 64-bit client shared libraries:</p>
<div class="inftblinformalmax">
<table class="cellalignment5721" title="32-Bit and 64-Bit Client Shared Libraries" summary="This table lists the 32-bit and 64-bit client shared libraries" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t7">Platform</th>
<th class="cellalignment5722" id="r1c2-t7">32-Bit Client Shared Library</th>
<th class="cellalignment5722" id="r1c3-t7">64-Bit Client Shared Library</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t7" headers="r1c1-t7">Oracle Solaris, Linux x86-64, and IBM: Linux on System z</td>
<td class="cellalignment5718" headers="r2c1-t7 r1c2-t7">
<pre dir="ltr">$ORACLE_HOME/lib/libclntsh.so
</pre></td>
<td class="cellalignment5718" headers="r2c1-t7 r1c3-t7">
<pre dir="ltr">$ORACLE_HOME/lib/libclntsh.so
</pre></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t7" headers="r1c1-t7">IBM AIX on POWER Systems (64-Bit)</td>
<td class="cellalignment5718" headers="r3c1-t7 r1c2-t7">
<pre dir="ltr">$ORACLE_HOME/lib/libclntsh.a
$ORACLE_HOME/lib/libclntsh.so
</pre></td>
<td class="cellalignment5718" headers="r3c1-t7 r1c3-t7">
<pre dir="ltr">$ORACLE_HOME/lib/libclntsh.a
$ORACLE_HOME/lib/libclntsh.so
</pre></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r4c1-t7" headers="r1c1-t7">HP-UX Itanium</td>
<td class="cellalignment5718" headers="r4c1-t7 r1c2-t7"><code dir="ltr">$ORACLE_HOME/lib/libclntsh.sl</code></td>
<td class="cellalignment5718" headers="r4c1-t7 r1c3-t7"><code dir="ltr">$ORACLE_HOME/lib/libclntsh.sl</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformalmax" -->
<p>To implement a mixed word-size installation:</p>
<ol>
<li>
<p>Run the following command to generate the 32-bit and 64-bit client shared libraries:</p>
<pre dir="ltr">$ $ORACLE_HOME/bin/genclntsh
</pre></li>
<li>
<p>Include the paths of the required 32-bit and 64-bit client shared libraries in one of the following environment variables, depending on the platform:</p>
<div class="inftblinformal">
<table class="cellalignment5721" title="Path Environment Variables" summary="This table lists the path environment variables" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t8">Platform</th>
<th class="cellalignment5722" id="r1c2-t8">Environment Variable</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t8" headers="r1c1-t8">Oracle Solaris, Linux x86-64, IBM: Linux on System z, and HP-UX</td>
<td class="cellalignment5718" headers="r2c1-t8 r1c2-t8"><code dir="ltr">LD_LIBRARY_PATH</code></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t8" headers="r1c1-t8">IBM AIX on POWER Systems (64-Bit)</td>
<td class="cellalignment5718" headers="r3c1-t8 r1c2-t8"><code dir="ltr">LIBPATH</code></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r4c1-t8" headers="r1c1-t8">HP-UX (32-bit client applications)</td>
<td class="cellalignment5718" headers="r4c1-t8 r1c2-t8"><code dir="ltr">SHLIB_PATH</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></li>
</ol>
<p class="subhead2"><a id="UNXAR198"></a>Building 32-Bit Pro*C and OCI Customer Applications</p>
<p>If the operating system supports both 32-bit and 64-bit Pro*C and Oracle Call Interface (OCI) customer applications, then you can find more information about building 32-bit Pro*C and OCI applications in the following files:</p>
<div class="inftblinformal">
<table class="cellalignment5721" title="Make Files for Pro*C and OCI Applications" summary="This table lists the make files for Pro*C and OCI applications" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t9">For Information About. . .</th>
<th class="cellalignment5722" id="r1c2-t9">Refer to the Following Make Files. . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t9" headers="r1c1-t9">Building 32-bit Pro*C applications</td>
<td class="cellalignment5718" headers="r2c1-t9 r1c2-t9"><code dir="ltr">$ORACLE_HOME/precomp/demo/proc/demo_proc32.mk</code></td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t9" headers="r1c1-t9">Building 32-bit OCI applications</td>
<td class="cellalignment5718" headers="r3c1-t9 r1c2-t9"><code dir="ltr">$ORACLE_HOME/rdbms/demo/demo_rdbms32.mk</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect1" -->
<a id="i33246"></a>
<div id="UNXAR199" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.3</span> Pro*C/C++ Precompiler<a id="sthref207"></a><a id="sthref208"></a></h2>
<p>Before you use the Pro*C/C++ precompiler, verify that the correct version of the operating system compiler is properly installed.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink GINST" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=GINST"><span class="italic">Oracle Database Installation Guide</span></a> for information about supported compiler versions</p>
</li>
<li>
<p><a class="olink LNPCC" href="../LNPCC/toc.htm"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a> for information about the Pro*C/C++ precompiler and interface features</p>
</li>
</ul>
</div>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABCAJHH">Pro*C/C++ Demonstration Programs</a></p>
</li>
<li>
<p><a href="#BABFHEGJ">Pro*C/C++ User Programs</a></p>
</li>
</ul>
<a id="BABCAJHH"></a>
<div id="UNXAR200" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.3.1</span> Pro*C/C++ Demonstration Programs<a id="sthref209"></a><a id="sthref210"></a></h3>
<p>Demonstration programs are provided to show the features of the Pro*C/C++ precompiler. There are three types of demonstration programs: C, C++, and Object programs. All demonstration programs are located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/proc</code> directory. By default, all programs are dynamically linked with the client shared library.</p>
<p>To run the demonstration programs, the programs require the demonstration tables created by the <code dir="ltr">$ORACLE_HOME/sqlplus/demo/demobld.sql</code> script to exist in the JONES schema with a password.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the JONES account and set the password before creating the demonstrations.</div>
<p>Use the <code dir="ltr">demo_proc.mk</code> <a id="sthref211"></a>make file, which is located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/proc/</code> directory, to create the demonstration programs. For example, to precompile, compile, and link the <code dir="ltr">sample1</code> demonstration program, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk sample1
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
On IBM AIX on POWER Systems (64-Bit), to ensure that the demonstration programs compile correctly, include the <code dir="ltr">-r</code> option of the <code dir="ltr">make</code> command in the following examples. For example:
<pre dir="ltr">$ make -r -f demo_proc.mk sample1
</pre></div>
<p>To create all the C demonstration programs for Pro*C/C++, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk samples
</pre>
<p>To create all the C++ demonstration programs for Pro*C/C++, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk cppsamples
</pre>
<p>To create all the Object demonstration programs for Pro*C/C++, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk object_samples
</pre>
<p>Some demonstration programs require you to run a SQL script, located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/sql</code> directory. If you do not run the script, then a message prompting you to run it is displayed.</p>
<p>To build a demonstration program and run the corresponding SQL script, include the <code dir="ltr">make</code> macro argument <code dir="ltr">RUNSQL=run</code> at the command line. For example, to create the <code dir="ltr">sample9</code> demonstration program and run the required <code dir="ltr">$ORACLE_HOME/precomp/demo/sql/sample9.sql</code> script, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk sample9 RUNSQL=run
</pre>
<p>To create all the Object demonstration programs and run all the required SQL scripts, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk object_samples RUNSQL=run
</pre></div>
<!-- class="sect2" -->
<a id="BABFHEGJ"></a>
<div id="UNXAR201" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.3.2</span> Pro*C/C++ User Programs<a id="sthref212"></a><a id="sthref213"></a><a id="sthref214"></a></h3>
<p>You can use the <code dir="ltr">$ORACLE_HOME/precomp/demo/proc/demo_proc.mk</code> make file to create user programs. This make file builds either 32-bit or 64-bit user programs. You can also use the <code dir="ltr">demo_proc32.mk</code> <a id="sthref215"></a><a id="sthref216"></a>make file to build 32-bit user programs. The following table shows the make files that you can use to build 32-bit and 64-bit user programs with Pro*C/C++:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5721" title="Make Files for Use with Pro*C/C++" summary="This table lists the make files that you can use with Pro*C/C++ to build 31-bit, 32-bit, or 64-bit user programs" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t13">Platform</th>
<th class="cellalignment5722" id="r1c2-t13">64-bit Make File</th>
<th class="cellalignment5722" id="r1c3-t13">32-Bit Make File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t13" headers="r1c1-t13">Oracle Solaris, Linux x86-64, IBM: Linux on System z, IBM AIX on POWER Systems (64-Bit), and HP-UX</td>
<td class="cellalignment5718" headers="r2c1-t13 r1c2-t13"><code dir="ltr">demo_proc.mk</code></td>
<td class="cellalignment5718" headers="r2c1-t13 r1c3-t13"><code dir="ltr">demo_proc32.mk</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The make file for more information about creating user programs</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
On IBM AIX on POWER Systems (64-Bit), to ensure that the programs compile correctly, specify the <code dir="ltr">-r</code> option for the <code dir="ltr">make</code> command used in the following examples.</div>
<p>To create a program by using the <code dir="ltr">demo_proc.mk</code> make file, run a command similar to the following:</p>
<pre dir="ltr">$ make -f demo_proc.mk <span class="italic">target</span> OBJS=&#34;<span class="italic">objfile1</span> <span class="italic">objfile2</span> ...&#34; EXE=<span class="italic">exename</span>
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">target</span></code> is the make file target that you want to use</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">objfilen</span></code> is the object file to link the program</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">exename</span></code> is the executable program</p>
</li>
</ul>
<p>For example, to create the program <code dir="ltr">myprog</code> from the Pro*C/C++ source file <code dir="ltr">myprog.pc</code>, run one of the following commands, depending on the source and the type of executable that you want to create:</p>
<ul>
<li>
<p>For C source dynamically linked with the client shared library, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk build OBJS=myprog.o EXE=myprog
</pre></li>
<li>
<p>For C source statically linked with the client shared library, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk build_static OBJS=myprog.o EXE=myprog
</pre></li>
<li>
<p>For C++ source dynamically linked with the client shared library, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk cppbuild OBJS=myprog.o EXE=myprog
</pre></li>
<li>
<p>For C++ source statically linked with the client shared library, run the following command:</p>
<pre dir="ltr">$ make -f demo_proc.mk cppbuild_static OBJS=myprog.o EXE=myprog
</pre></li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i36455"></a>
<div id="UNXAR202" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.4</span> Pro*COBOL Precompiler<a id="sthref217"></a></h2>
<p><a href="#BABBJHHC">Table 6-3</a> shows the naming conventions for the Pro*COBOL precompiler.</p>
<div id="UNXAR203" class="tblformal">
<p class="titleintable"><a id="sthref218"></a><a id="BABBJHHC"></a>Table 6-3 Pro*COBOL Naming Conventions <a id="sthref219"></a></p>
<table class="cellalignment5723" title="Pro*COBOL Naming Conventions " summary="This table shows Pro*COBOL naming conventions" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t16">Item</th>
<th class="cellalignment5722" id="r1c2-t16">Naming Convention</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t16" headers="r1c1-t16">
<p>Executable</p>
</td>
<td class="cellalignment5718" headers="r2c1-t16 r1c2-t16">
<p><code dir="ltr">procob</code></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t16" headers="r1c1-t16">
<p>Demonstration directory</p>
</td>
<td class="cellalignment5718" headers="r3c1-t16 r1c2-t16">
<p><code dir="ltr">procob2</code></p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r4c1-t16" headers="r1c1-t16">
<p>Make file</p>
</td>
<td class="cellalignment5718" headers="r4c1-t16 r1c2-t16">
<p><code dir="ltr">demo_procob.mk</code> or <code dir="ltr">demo_procob_32.mk</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Pro*COBOL supports statically linked, dynamically linked, or dynamically loadable programs. Dynamically linked programs use the client shared library. Dynamically loadable programs use the <code dir="ltr">rtsora</code> executable located in the <code dir="ltr">$ORACLE_HOME/bin</code> directory.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABDBGFF">Pro*COBOL Environment Variables</a></p>
</li>
<li>
<p><a href="#BABFCGAG">Pro*COBOL Oracle Runtime System</a></p>
</li>
<li>
<p><a href="#BABFIABE">Pro*COBOL Demonstration Programs</a></p>
</li>
<li>
<p><a href="#BABFFFGC">Pro*COBOL User Programs</a></p>
</li>
<li>
<p><a href="#BABJAFHH">FORMAT Precompiler Option</a></p>
</li>
</ul>
<a id="BABDBGFF"></a>
<div id="UNXAR204" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.4.1</span> Pro*COBOL Environment Variables<a id="sthref220"></a><a id="sthref221"></a></h3>
<p>This section describes the environment variables required by Pro*COBOL:</p>
<ul>
<li>
<p><a href="#BABCBAIB">Micro Focus Server Express COBOL Compiler</a></p>
</li>
<li>
<p><a href="#BABDIIDC">Acucorp ACUCOBOL-GT COBOL Compiler</a></p>
</li>
</ul>
<a id="BABCBAIB"></a>
<div id="UNXAR205" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">6.4.1.1</span> Micro Focus Server Express COBOL Compiler<a id="sthref222"></a><a id="sthref223"></a><a id="sthref224"></a></h4>
<p>To use the Micro Focus Server Express COBOL compiler, you must set the <code dir="ltr">COBDIR</code> and <code dir="ltr">PATH</code> environment variables and the shared library path environment variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <a href="#CACDIFAD">&#34;Client Shared and Static Libraries&#34;</a> section for information about the shared library path environment variable</div>
<p class="subhead2"><a id="UNXAR206"></a>COBDIR<a id="sthref225"></a><a id="sthref226"></a></p>
<p>Set the <code dir="ltr">COBDIR</code> environment variable to the directory where the compiler is installed. For example, if the compiler is installed in the <code dir="ltr">/opt/lib/cobol</code> directory, then run the following command:</p>
<ul>
<li>
<p>Bourne, Bash, or Korn shell:</p>
<pre dir="ltr">$ COBDIR=/opt/lib/cobol
$ export COBDIR
</pre></li>
<li>
<p>C shell:</p>
<pre dir="ltr">% setenv COBDIR /opt/lib/cobol
</pre></li>
</ul>
<p class="subhead2"><a id="UNXAR207"></a>PATH<a id="sthref227"></a><a id="sthref228"></a></p>
<p>Set the <code dir="ltr">PATH</code> environment variable to include the <code dir="ltr">$COBDIR/bin</code> directory:</p>
<ul>
<li>
<p>Bourne, Bash, or Korn shell:</p>
<pre dir="ltr">$ PATH=$COBDIR/bin:$PATH
$ export PATH
</pre></li>
<li>
<p>C shell:</p>
<pre dir="ltr">% setenv PATH ${COBDIR}/bin:${PATH}
</pre></li>
</ul>
<p class="subhead2"><a id="UNXAR208"></a>Shared Library Path<a id="sthref229"></a><a id="sthref230"></a><a id="sthref231"></a><a id="sthref232"></a><a id="sthref233"></a><a id="sthref234"></a></p>
<p>Set the <code dir="ltr">LIBPATH</code>, <code dir="ltr">LD_LIBRARY_PATH</code>, or <code dir="ltr">SHLIB_PATH</code> environment variable to the directory where the compiler library is installed. For example, if the platform uses the <code dir="ltr">LD_LIBRARY_PATH</code> environment variable and the compiler library is installed in the <code dir="ltr">$COBDIR/coblib</code> directory, then run the following command:</p>
<ul>
<li>
<p>Bourne, Bash, or Korn shell:</p>
<pre dir="ltr">$ LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$COBDIR/coblib
$ export LD_LIBRARY_PATH
</pre></li>
<li>
<p>C shell:</p>
<pre dir="ltr">% setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:$COBDIR/coblib
</pre></li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABDIIDC"></a>
<div id="UNXAR209" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">6.4.1.2</span> Acucorp ACUCOBOL-GT COBOL Compiler</h4>
<p>To use the Acucorp ACUCOBOL-GT COBOL compiler, you must set the <code dir="ltr">A_TERMCAP</code>, <code dir="ltr">A_TERM</code>, <code dir="ltr">PATH</code>, and <code dir="ltr">LD_LIBRARY_PATH</code> environment variables. If the <code dir="ltr">LD_LIBRARY_PATH</code> environment variable setting does not include the correct directory, then an error message similar to the following is displayed when you compile or run a program:</p>
<pre dir="ltr">runcbl: error while loading shared libraries: libclntsh.so: 
cannot open shared object file: No such file or directory
</pre>
<p class="subhead2"><a id="UNXAR210"></a>A_TERMCAP and A_TERM<a id="sthref235"></a><a id="sthref236"></a><a id="sthref237"></a><a id="sthref238"></a></p>
<p>Set the <code dir="ltr">A_TERMCAP</code> environment variable to specify the location of the <code dir="ltr">a_termcap</code> file and set the <code dir="ltr">A_TERM</code> environment variable to specify a supported terminal from that file. For example:</p>
<ul>
<li>
<p>Bourne, Bash, or Korn shell:</p>
<pre dir="ltr">$ A_TERMCAP=/opt/COBOL/etc/a_termcap
$ A_TERM=vt100
$ export A_TERMCAP A_TERM
</pre></li>
<li>
<p>C shell:</p>
<pre dir="ltr">% setenv A_TERMCAP /opt/COBOL/etc/a_termcap
% setenv A_TERM vt100
</pre></li>
</ul>
<p class="subhead2"><a id="UNXAR211"></a>PATH<a id="sthref239"></a><a id="sthref240"></a></p>
<p>Set the <code dir="ltr">PATH</code> environment variable to include the <code dir="ltr">/opt/COBOL/bin</code> directory:</p>
<ul>
<li>
<p>Bourne, Bash, or Korn shell:</p>
<pre dir="ltr">$ PATH=/opt/COBOL/bin:$PATH
$ export PATH
</pre></li>
<li>
<p>C shell:</p>
<pre dir="ltr">% setenv PATH opt/COBOL/bin:${PATH}
</pre></li>
</ul>
<p class="subhead2"><a id="UNXAR212"></a>LD_LIBRARY_PATH<a id="sthref241"></a><a id="sthref242"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
On IBM AIX on POWER Systems (64-Bit), the <code dir="ltr">LIBPATH</code> variable is the <code dir="ltr">LD_LIBRARY_PATH</code> variable equivalent. You must use the <code dir="ltr">LIBPATH</code> variable on IBM AIX on POWER Systems (64-Bit) instead of the <code dir="ltr">LD_LIBRARY_PATH</code> variable in the following commands.</div>
<p>Set the <code dir="ltr">LD_LIBRARY_PATH</code> environment variable to the directory where the compiler library is installed. For example, if the compiler library is installed in the <code dir="ltr">/opt/COBOL/lib</code> directory, then run the following command:</p>
<ul>
<li>
<p>Bourne, Bash, or Korn shell:</p>
<pre dir="ltr">$ LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/COBOL/lib
$ export LD_LIBRARY_PATH
</pre></li>
<li>
<p>C shell:</p>
<pre dir="ltr">% setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/opt/COBOL/lib
</pre></li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFCGAG"></a>
<div id="UNXAR213" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.4.2</span> Pro*COBOL Oracle Runtime System<a id="sthref243"></a></h3>
<p>Oracle provides its own complete run-time system, called <code dir="ltr">rtsora</code>, to run dynamically loadable Pro*COBOL programs. Use the <code dir="ltr">rtsora</code> run-time system instead of the <code dir="ltr">cobrun</code> run-time system to run dynamically loadable Pro*COBOL programs. If you attempt to run a Pro*COBOL program with <code dir="ltr">cobrun</code>, then an error message similar to the following is displayed:</p>
<pre dir="ltr">$ cobrun sample1.gnt
Load error : file &#39;SQLADR&#39;
error code: 173, pc=0, call=1, seg=0
173     Called program file not found in drive/directory
</pre></div>
<!-- class="sect2" -->
<a id="BABFIABE"></a>
<div id="UNXAR214" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.4.3</span> Pro*COBOL Demonstration Programs<a id="sthref244"></a><a id="sthref245"></a></h3>
<p>Demonstration programs are provided to show the features of the Pro*COBOL precompiler. The demonstration programs are located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/procob2</code> directory. By default, all programs are dynamically linked with the client shared library.</p>
<p>To run the demonstration programs, the programs require the demonstration tables created by the <code dir="ltr">$ORACLE_HOME/sqlplus/demo/demobld.sql</code> script to exist in the JONES schema with a password.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the JONES account and set the password before creating the demonstrations.</div>
<p>Use the following make file to create the demonstration programs:</p>
<pre dir="ltr">$ORACLE_HOME/precomp/demo/procob2/demo_procob.mk
</pre>
<p>To precompile, compile, and link the <code dir="ltr">sample1</code> demonstration program for Pro*COBOL, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk sample1
</pre>
<p>To create the Pro*COBOL demonstration programs, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk samples
</pre>
<p>To create and run a dynamically loadable <code dir="ltr">sample1.gnt</code> program to be used with the <code dir="ltr">rtsora</code> run-time system, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk sample1.gnt
$ rtsora sample1.gnt
</pre>
<p>Some demonstration programs require you to run a SQL script, which is located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/sql</code> directory. If you do not run the script, then a message requesting you to run it is displayed.</p>
<p>To build a demonstration program and run the corresponding SQL script, include the <code dir="ltr">make</code> macro argument <code dir="ltr">RUNSQL=run</code> in the command. For example, to create the <code dir="ltr">sample9</code> demonstration program and run the required <code dir="ltr">$ORACLE_HOME/precomp/demo/sql/sample9.sql</code> script, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk sample9 RUNSQL=run
</pre>
<p>To create the Pro*COBOL demonstration programs and run all required SQL scripts, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk samples RUNSQL=run
</pre></div>
<!-- class="sect2" -->
<a id="BABFFFGC"></a>
<div id="UNXAR215" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.4.4</span> Pro*COBOL User Programs<a id="sthref246"></a><a id="sthref247"></a><a id="sthref248"></a><a id="sthref249"></a></h3>
<p>You can use the<a id="sthref250"></a><a id="sthref251"></a><a id="sthref252"></a> <code dir="ltr">$ORACLE_HOME/precomp/demo/procob2/demo_procob.mk</code> make file to create user programs. This make file builds either 32-bit or 64-bit user programs. You can also use the <code dir="ltr">demo_procob_32.mk</code> make file to build 32-bit user programs. The following table shows the make files that you can use to build 32-bit and 64-bit user programs with Pro*COBOL:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5721" title="Make Files for Use with Pro*COBOL" summary="This table lists the make files that you can use with Pro*C/C++ to build 31-bit, 32-bit, or 64-bit user programs" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t20">Platform</th>
<th class="cellalignment5722" id="r1c2-t20">64-bit Make File</th>
<th class="cellalignment5722" id="r1c3-t20">32-Bit Make File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t20" headers="r1c1-t20">Oracle Solaris, Linux x86-64, IBM: Linux on System z, IBM AIX on POWER Systems (64-Bit), and HP-UX</td>
<td class="cellalignment5718" headers="r2c1-t20 r1c2-t20"><code dir="ltr">demo_procob.mk</code></td>
<td class="cellalignment5718" headers="r2c1-t20 r1c3-t20"><code dir="ltr">demo_procob_32.mk</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The make file for more information about creating user programs</div>
<p>To create a program using the <code dir="ltr">demo_procob.mk</code> make file, run a command similar to the following:</p>
<pre dir="ltr">$ make -f demo_procob.mk <span class="italic">target</span> COBS=&#34;<span class="italic">cobfile1</span> <span class="italic">cobfile2</span> ...&#34; EXE=<span class="italic">exename</span>
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">target</span></code> is the make file target that you want to use</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">cobfilen</span></code> is the COBOL source file for the program</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">exename</span></code> is the executable program</p>
</li>
</ul>
<p>For example, to create the program <code dir="ltr">myprog</code>, run one of the following commands, depending on the source and type of executable that you want to create:</p>
<ul>
<li>
<p>For COBOL source, dynamically linked with the client shared library, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk build COBS=myprog.cob EXE=myprog
</pre></li>
<li>
<p>For COBOL source, statically linked, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk build_static COBS=myprog.cob EXE=myprog
</pre></li>
<li>
<p>For COBOL source, dynamically loadable for use with <code dir="ltr">rtsora</code>, run the following command:</p>
<pre dir="ltr">$ make -f demo_procob.mk myprog.gnt
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABJAFHH"></a>
<div id="UNXAR216" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.4.5</span> FORMAT Precompiler Option<a id="sthref253"></a><a id="sthref254"></a></h3>
<p>The FORMAT precompiler option specifies the format of input lines for COBOL. If you specify the default value <code dir="ltr">ANSI</code>, then columns 1 to 6 contain an optional sequence number, column 7 indicates comments or continuation lines, paragraph names begin in columns 8 to 11, and statements begin in columns 12 to 72.</p>
<p>If you specify the value <code dir="ltr">TERMINAL</code>, then columns 1 to 6 are dropped, making column 7 the left most column.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i28565"></a>
<div id="UNXAR217" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.5</span> Pro*FORTRAN Precompiler</h2>
<p>Before you use the Pro*FORTRAN precompiler, verify that the correct version of the compiler is installed. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i28568">Pro*FORTRAN Demonstration Programs</a></p>
</li>
<li>
<p><a href="#i28599">Pro*FORTRAN User Programs</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink GINST" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=GINST"><span class="italic">Oracle Database Installation Guide</span></a> for information about supported compiler versions</p>
</li>
<li>
<p><a class="olink ZZFOR" href="../ZZFOR/toc.htm"><span class="italic">Pro*FORTRAN Supplement to the Oracle Precompilers Guide</span></a> for information about the Pro*FORTRAN precompiler and interface features</p>
</li>
</ul>
</div>
<a id="i28568"></a>
<div id="UNXAR218" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.5.1</span> Pro*FORTRAN Demonstration Programs<a id="sthref255"></a><a id="sthref256"></a></h3>
<p>Demonstration programs are provided to show the features of the Pro*FORTRAN precompiler. All demonstration programs are located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/profor</code> directory. By default, all programs are dynamically linked with the client shared library.</p>
<p>To run the demonstration programs, the demonstration tables created by the <code dir="ltr">$ORACLE_HOME/sqlplus/demo/demobld.sql</code> script must exist in the JONES schema with a password.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the JONES account and set the password before creating the demonstrations.</div>
<p>To create the demonstration programs, use the <code dir="ltr">demo_profor.mk</code> make file, located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/profor</code> directory. For example, to precompile, compile, and link the <code dir="ltr">sample1</code> demonstration program, run the following command:</p>
<pre dir="ltr">$ make -f demo_profor.mk sample1
</pre>
<p>To create the Pro*FORTRAN demonstration programs, run the following command:</p>
<pre dir="ltr">$ make -f demo_profor.mk samples
</pre>
<p>Some demonstration programs require you to run a SQL script that is located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/sql</code> directory. If you do not run the script, then a message prompting you to run it is displayed.</p>
<p>To build a demonstration program and run the corresponding SQL script, include the <code dir="ltr">make</code> macro argument <code dir="ltr">RUNSQL=run</code> on the command line. For example, to create the <code dir="ltr">sample11</code> demonstration program and run the required <code dir="ltr">$ORACLE_HOME/precomp/demo/sql/sample11.sql</code> script, run the following command:</p>
<pre dir="ltr">$ make -f demo_profor.mk sample11 RUNSQL=run
</pre>
<p>To create the Pro*FORTRAN demonstration programs and run all the required SQL scripts, run the following command:</p>
<pre dir="ltr">$ make -f demo_profor.mk samples RUNSQL=run
</pre></div>
<!-- class="sect2" -->
<a id="i28599"></a>
<div id="UNXAR219" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.5.2</span> Pro*FORTRAN User Programs</h3>
<p>You can use the <code dir="ltr">$ORACLE_HOME/precomp/demo/profor/demo_profor.mk</code> make file to create user programs. This make file builds either 32-bit or 64-bit user programs. You can also use the <code dir="ltr">demo_profor_32.mk</code> make file to build 32-bit user programs. The following table shows the make files that you can use to build 32-bit and 64-bit user programs with Pro*FORTRAN:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5721" title="Make Files for Use with Pro*FORTRAN" summary="This table lists the make files that you can use with Pro*C/C++ to build 31-bit, 32-bit, or 64-bit user programs" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t24">Platform</th>
<th class="cellalignment5722" id="r1c2-t24">64-bit Make File</th>
<th class="cellalignment5722" id="r1c3-t24">32-Bit Make File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t24" headers="r1c1-t24">Oracle Solaris, IBM AIX on POWER Systems (64-Bit), and HP-UX</td>
<td class="cellalignment5718" headers="r2c1-t24 r1c2-t24"><code dir="ltr">demo_profor.mk</code></td>
<td class="cellalignment5718" headers="r2c1-t24 r1c3-t24"><code dir="ltr">demo_profor_32.mk</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The make file for more information about creating user programs</div>
<p>To create a program using the <code dir="ltr">demo_proc.mk</code> make file, run a command similar to the following:</p>
<pre dir="ltr">$ make -f demo_profor.mk <span class="italic">target</span> FORS=&#34;<span class="italic">forfile1</span> <span class="italic">forfile2</span> ...&#34; EXE=<span class="italic">exename</span>
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">target</span></code> is the make file target that you want to use</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">forfilen</span></code> is the FORTRAN source for the program</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">exename</span></code> is the executable program</p>
</li>
</ul>
<p>For example, to create the program <code dir="ltr">myprog</code> from the Pro*FORTRAN source file <code dir="ltr">myprog.pfo</code>, run one of the following commands, depending on the type of executable that you want to create:</p>
<ul>
<li>
<p>For an executable dynamically linked with the client shared library, run the following command:</p>
<pre dir="ltr">$ make -f demo_profor.mk build FORS=myprog.f EXE=myprog
</pre></li>
<li>
<p>For an executable statically linked with the client shared library, run the following command:</p>
<pre dir="ltr">$ make -f demo_profor.mk build_static FORS=myprog.f EXE=myprog
</pre></li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFAJDECA"></a>
<div id="UNXAR220" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.6</span> SQL*Module for ADA<a id="sthref257"></a></h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
The information in this section applies to the IBM AIX on POWER Systems (64-Bit) platform.</div>
<p>Before using SQL*Module for Ada, verify that the correct version of the compiler is installed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink GINST" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=GINST"><span class="italic">Oracle Database Installation Guide</span></a> for information about required compiler versions</p>
</li>
<li>
<p><a class="olink ZZMOD" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ZZMOD"><span class="italic">Oracle SQL*Module for Ada Programmer&#39;s Guide</span></a> for information about SQL*Module for Ada</p>
</li>
</ul>
</div>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABCDFFD">SQL*Module for Ada Demonstration Programs</a></p>
</li>
<li>
<p><a href="#BABEJAFG">SQL*Module for Ada User Programs</a></p>
</li>
</ul>
<a id="BABCDFFD"></a>
<div id="UNXAR221" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.6.1</span> SQL*Module for Ada Demonstration Programs<a id="sthref258"></a><a id="sthref259"></a></h3>
<p>Demonstration programs are provided to show the features of SQL*Module for Ada. All demonstration programs are located in the <code dir="ltr">$ORACLE_HOME/precomp/demo/modada</code> directory. By default, all programs are dynamically linked with the client shared library.</p>
<p>To run the <code dir="ltr">ch1_drv</code> demonstration program, the demonstration tables created by the <code dir="ltr">$ORACLE_HOME/sqlplus/demo/demobld.sql</code> script must exist in the <code dir="ltr">JONES</code> schema with a password.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the JONES account and set the password before creating the demonstrations.</div>
<p>The <code dir="ltr">demcalsp</code> and <code dir="ltr">demohost</code> demonstration programs require that the sample college database exists in the <code dir="ltr">MODTEST</code> schema. You can use the appropriate <code dir="ltr">make</code> command to create the <code dir="ltr">MODTEST</code> schema and load the sample college database.</p>
<p>Run the following command to create the SQL*Module for Ada demonstration programs, run the necessary SQL scripts to create the <code dir="ltr">MODTEST</code> user, and create the sample college database:</p>
<pre dir="ltr">$ make -f demo_modada.mk all RUNSQL=run
</pre>
<p>To create a single demonstration program (<code dir="ltr">demohost</code>) and run the necessary SQL scripts to create the <code dir="ltr">MODTEST</code> user, and create the sample college database, run the following command:</p>
<pre dir="ltr">$ make -f demo_modada.mk makeuser loaddb demohost RUNSQL=run
</pre>
<p>To create the SQL*Module for Ada demonstration programs, without re-creating the sample college database, run the following command:</p>
<pre dir="ltr">$ make -f demo_modada.mk samples
</pre>
<p>To create a single demonstration program (<code dir="ltr">demohost</code>), without re-creating the sample college database, run the following command:</p>
<pre dir="ltr">$ make -f demo_modada.mk demohost
</pre>
<p>To run the programs, you must define an Oracle Net connect string or alias named INST1_ALIAS that is used to connect to the database where the appropriate tables exist.</p>
</div>
<!-- class="sect2" -->
<a id="BABEJAFG"></a>
<div id="UNXAR222" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.6.2</span> SQL*Module for Ada User Programs<a id="sthref260"></a><a id="sthref261"></a></h3>
<p>You can use the <code dir="ltr">$ORACLE_HOME/precomp/demo/modada/demo_modada.mk</code> make file to create user programs. To create a user program with the <code dir="ltr">demo_modada.mk</code> make file, run a command similar to the following:</p>
<pre dir="ltr">$ make -f demo_modada.mk ada OBJS=&#34;<span class="italic">module1</span> <span class="italic">module2</span> ...&#34; \
EXE=<span class="italic">exename</span> MODARGS=<span class="italic">SQL_Module_arguments</span>
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">modulen</span></code> is a compiled Ada object</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">exename</span></code> is the executable program</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">SQL_Module_arguments</span></code> are the command-line arguments to be passed to the SQL*Module</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ZZMOD" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ZZMOD"><span class="italic">Oracle SQL*Module for Ada Programmer&#39;s Guide</span></a> for information about SQL*Module for Ada</div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i37921"></a>
<div id="UNXAR223" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.7</span> OCI and OCCI<a id="sthref262"></a><a id="sthref263"></a><a id="sthref264"></a><a id="sthref265"></a></h2>
<p>Before you use the Oracle Call Interface (OCI) or Oracle C++ Call Interface (OCCI), verify that the correct version of C or C++ is installed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink GINST" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=GINST"><span class="italic">Oracle Database Installation Guide</span></a> for information about supported compiler versions</p>
</li>
<li>
<p><a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> or <a class="olink LNCPP" href="../LNCPP/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer&#39;s Guide</span></a> for information about OCI and OCCI</p>
</li>
</ul>
</div>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABIHHFH">OCI and OCCI Demonstration Programs</a></p>
</li>
<li>
<p><a href="#BABDGIDJ">OCI and OCCI User Programs</a></p>
</li>
</ul>
<a id="BABIHHFH"></a>
<div id="UNXAR224" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.7.1</span> OCI and OCCI Demonstration Programs<a id="sthref266"></a><a id="sthref267"></a><a id="sthref268"></a></h3>
<p>Demonstration programs that show the features of OCI and OCCI are provided with the Oracle Database 12<span class="italic">c</span> Examples software. There are two types of demonstration programs: C and C++. All demonstration programs are located in the <code dir="ltr">$ORACLE_HOME/rdbms/demo</code> directory. By default, all programs are dynamically linked with the client shared library.</p>
<p>To run the demonstration programs, the programs require the demonstration tables created by the <code dir="ltr">$ORACLE_HOME/sqlplus/demo/demobld.sql</code> script to exist in the JONES schema with a password. Some demonstration programs require specific .sql files to be run, as mentioned in the demonstration source files. OCCI demonstration programs require occidemo.sql to be run.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the JONES account and set the password before creating the demonstrations.</div>
<p>Use the <code dir="ltr">demo_rdbms.mk</code> make file, which is located in the <code dir="ltr">$ORACLE_HOME/rdbms/demo</code> directory, to create the demonstration programs. For example, to compile and link the <code dir="ltr">cdemo1</code> demonstration program, run the following command:</p>
<pre dir="ltr">$ make -f demo_rdbms.mk cdemo1
</pre>
<p>To create the C demonstration programs for OCI, run the following command:</p>
<pre dir="ltr">$ make -f demo_rdbms.mk demos
</pre>
<p>To create the C++ demonstration programs for OCCI, run the following command:</p>
<pre dir="ltr">$ make -f demo_rdbms.mk occidemos
</pre></div>
<!-- class="sect2" -->
<a id="BABDGIDJ"></a>
<div id="UNXAR225" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.7.2</span> OCI and OCCI User Programs<a id="sthref269"></a><a id="sthref270"></a><a id="sthref271"></a><a id="sthref272"></a></h3>
<p>You can use the <code dir="ltr">$ORACLE_HOME/rdbms/demo/demo_rdbms.mk</code> make file to build user programs. This make file builds either 32-bit or 64-bit user programs. You can also use the <code dir="ltr">demo_rdbms32.mk</code> to build 32-bit user programs on a 64-bit operating system. The following table shows the make files that you can use to build 32-bit and 64-bit user programs with Pro*FORTRAN:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5721" title="Make Files for Use with Pro*FORTRAN" summary="This table lists the make files that you can use with Pro*C/C++ to build 31-bit, 32-bit, or 64-bit user programs" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t32">Platform</th>
<th class="cellalignment5722" id="r1c2-t32">64-bit Make File</th>
<th class="cellalignment5722" id="r1c3-t32">32-Bit Make File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t32" headers="r1c1-t32">Oracle Solaris, Linux x86-64, IBM AIX on POWER Systems (64-Bit), and HP-UX</td>
<td class="cellalignment5718" headers="r2c1-t32 r1c2-t32"><code dir="ltr">demo_rdbms.mk</code></td>
<td class="cellalignment5718" headers="r2c1-t32 r1c3-t32"><code dir="ltr">demo_rdbms32.mk</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The make file for more information about building user programs</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACCDAFI"></a>
<div id="UNXAR226" class="sect1">
<h2 class="sect1"><span class="secnum">6.8</span> Running Oracle JDBC/OCI Programs with a 64-Bit Driver<a id="sthref273"></a><a id="sthref274"></a></h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The information in this section applies to Oracle Solaris, Linux x86-64, IBM: Linux on System z, IBM AIX on POWER Systems (64-Bit), and HP-UX platforms.</p>
</li>
<li>
<p>You can use the instructions and make files described in this section to create JDBC/OCI user programs that use a 64-bit driver.</p>
</li>
</ul>
</div>
<p>To run JDBC/OCI demonstration programs with a 64-bit driver:</p>
<ol>
<li>
<p>Add <code dir="ltr">$ORACLE_HOME/jdbc/lib/ojdbc5.jar</code> to the start of the <code dir="ltr">CLASSPATH</code> environment variable value for each of the following files:</p>
<pre dir="ltr">jdbc/demo/samples/jdbcoci/Makefile
jdbc/demo/samples/generic/Inheritance/Inheritance1/Makefile
jdbc/demo/samples/generic/Inheritance/Inheritance2/Makefile
jdbc/demo/samples/generic/Inheritance/Inheritance3/Makefile
jdbc/demo/samples/generic/JavaObject1/Makefile
jdbc/demo/samples/generic/NestedCollection/Makefile
</pre></li>
<li>
<p>Modify the JAVA and JAVAC variables in the <code dir="ltr">$ORACLE_HOME/jdbc/demo/samples/generic/Makefile</code> file to specify the JDK location and the <code dir="ltr">-d64</code> flag, as follows:</p>
<pre dir="ltr">JAVA=${ORACLE_HOME}/java/bin/java -d64
JAVAC=${ORACLE_HOME}/java/bin/javac -d64
</pre></li>
<li>
<p>Set the <code dir="ltr">LD_LIBRARY_PATH_64</code> environment variable to include the <code dir="ltr">$ORACLE_HOME/lib</code> directory.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
On IBM AIX on POWER Systems (64-Bit), the <code dir="ltr">LIBPATH</code> variable is the <code dir="ltr">LD_LIBRARY_PATH_64</code> variable equivalent. You must use the <code dir="ltr">LIBPATH</code> variable on IBM AIX on POWER Systems (64-Bit) instead of the <code dir="ltr">LD_LIBRARY_PATH_64</code> variable.</div>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i26133"></a>
<div id="UNXAR227" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.9</span> Custom Make Files<a id="sthref275"></a></h2>
<p>Oracle recommends that you use the <code dir="ltr">demo_</code><code dir="ltr"><span class="codeinlineitalic">product</span></code><code dir="ltr">.mk</code> make files provided with the software to create user programs as described in the product-specific sections of this chapter. If you modify the provided make file or if you choose to use a custom-written make file, then remember that the following restrictions apply:</p>
<ul>
<li>
<p>Do not modify the order of the Oracle libraries. Oracle libraries are included on the link line more than once so that all the symbols are resolved during linking.</p>
<p>Except for IBM AIX on POWER Systems (64-Bit), the order of the Oracle libraries is essential on all platforms for the following reasons:</p>
<ul>
<li>
<p>Oracle libraries are mutually referential. For example, functions in library A call functions in library B, and functions in library B call functions in library A.</p>
</li>
<li>
<p>The HP-UX linkers are one-pass linkers. The IBM AIX on POWER Systems (64-Bit), Linux, and Oracle Solaris linkers are two-pass linkers.</p>
</li>
</ul>
</li>
<li>
<p>Add the library to the beginning or to the end of the link line. Do not place user libraries between the Oracle libraries.</p>
</li>
<li>
<p>If you choose to use a <code dir="ltr">make</code> utility such as <code dir="ltr">nmake</code> or GNU <code dir="ltr">make</code>, then you must be aware of how macro and suffix processing differs from the <code dir="ltr">make</code> utility provided with the operating system. Oracle make files are tested and supported with the <code dir="ltr">make</code> utility.</p>
</li>
<li>
<p>Oracle library names and the contents of Oracle libraries are subject to change between releases. Always use the <code dir="ltr">demo_</code><code dir="ltr"><span class="codeinlineitalic">product</span></code><code dir="ltr">.mk</code> make file that ships with the current release as a guide to determine the required libraries.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i26152"></a>
<div id="UNXAR228" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.10</span> Correcting Undefined Symbols<a id="sthref276"></a></h2>
<p>Oracle provides the<a id="sthref277"></a><a id="sthref278"></a> <code dir="ltr">symfind</code> utility to assist you in locating a library or object file where a symbol is defined. When linking a program, undefined symbols are a common error that produce an error message similar to the following:</p>
<pre dir="ltr">$ make -f demo_proc.mk sample1
Undefined                       first referenced
 symbol                             in file
sqlcex                              sample1.o
sqlglm                              sample1.o
ld: irrecoverable: Symbol referencing errors. No output written to sample1
</pre>
<p>The error occurs when the linker cannot find a definition for a referenced symbol. If this error message is displayed, then verify that the library or object file containing the definition exists on the link line and that the linker is searching the correct directories for the file.</p>
<p>The following example shows the output from the <code dir="ltr">symfind</code> utility, which is used to locate the <code dir="ltr">sqlcex</code> symbol:</p>
<pre dir="ltr">$ symfind sqlcex

SymFind - Find Symbol &lt;sqlcex&gt; in &lt;**&gt;.a, .o, .so
------------------------------------------------------
Command:         /u01/app/oracle/product/12.1.0/bin/symfind sqlcex
Local Directory: /u01/app/oracle/product/12.1.0
Output File:     (none)
Note:            I do not traverse symbolic links
                 Use &#39;-v&#39; option to show any symbolic links

Locating Archive and Object files ...
[11645] |    467572|      44|FUNC |GLOB |0    |8      |sqlcex
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ./lib/libclntsh.sl
[35]    |         0|      44|FUNC |GLOB |0    |5      |sqlcex
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ./lib/libsql.a
</pre></div>
<!-- class="sect1" -->
<a id="i26193"></a>
<div id="UNXAR229" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.11</span> Multithreaded Applications<a id="sthref279"></a><a id="sthref280"></a></h2>
<p>The Oracle libraries provided with this release are thread-safe, they support multithreaded applications.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPCC3942" href="../LNPCC/pc_11thr.htm#LNPCC3942"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a> for more information on Multithreaded Applications.</div>
</div>
<!-- class="sect1" -->
<a id="i26199"></a>
<div id="UNXAR230" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.12</span> Using Signal Handlers<a id="sthref281"></a></h2>
<p>Oracle Database uses signals for two-task communication. Signals are installed in a user process when the process connects to the database and are removed when it disconnects.</p>
<p><a href="#g39972">Table 6-4</a> describes the signals that Oracle Database uses for two-task communication.</p>
<div id="UNXAR231" class="tblformal">
<p class="titleintable"><a id="sthref282"></a><a id="g39972"></a>Table 6-4 Signals for Two-Task Communication</p>
<table class="cellalignment5723" title="Signals for Two-Task Communication" summary="This table describes the signals for two-task communication" dir="ltr">
<thead>
<tr class="cellalignment5712">
<th class="cellalignment5722" id="r1c1-t37">Signal</th>
<th class="cellalignment5722" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r2c1-t37" headers="r1c1-t37">
<p>SIGCLD<a id="sthref283"></a><a id="sthref284"></a></p>
</td>
<td class="cellalignment5718" headers="r2c1-t37 r1c2-t37">
<p>The pipe driver uses SIGCLD, also referred to as SIGCHLD, when an Oracle process terminates. The operating system kernel sends a SIGCLD signal to the user process. The signal handler uses the <code dir="ltr">wait()</code> routine to determine if a server process died. The Oracle process does not catch SIGCLD; the user process catches it.</p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r3c1-t37" headers="r1c1-t37">
<p>SIGCONT<a id="sthref285"></a><a id="sthref286"></a></p>
</td>
<td class="cellalignment5718" headers="r3c1-t37 r1c2-t37">
<p>The pipe two-task driver uses SIGCONT to send out-of-band breaks from the user process to the Oracle process.</p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r4c1-t37" headers="r1c1-t37">
<p>SIGINT<a id="sthref287"></a><a id="sthref288"></a></p>
</td>
<td class="cellalignment5718" headers="r4c1-t37 r1c2-t37">
<p>Two-task drivers use SIGINT to detect user interrupt requests. The Oracle process does not catch SIGINT; the user process catches it.</p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r5c1-t37" headers="r1c1-t37">
<p>SIGIO<a id="sthref289"></a><a id="sthref290"></a></p>
</td>
<td class="cellalignment5718" headers="r5c1-t37 r1c2-t37">
<p>Oracle Net protocols use SIGIO to indicate incoming networking events.</p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r6c1-t37" headers="r1c1-t37">
<p>SIGPIPE<a id="sthref291"></a><a id="sthref292"></a></p>
</td>
<td class="cellalignment5718" headers="r6c1-t37 r1c2-t37">
<p>The pipe driver uses SIGPIPE to detect end-of-file on the communications channel. When writing to the pipe, if no reading process exists, then a SIGPIPE signal is sent to the writing process. Both the Oracle process and the user process catch SIGPIPE. SIGCLD is similar to SIGPIPE, but it applies only to user processes, not to Oracle processes.</p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r7c1-t37" headers="r1c1-t37">
<p>SIGTERM<a id="sthref293"></a><a id="sthref294"></a></p>
</td>
<td class="cellalignment5718" headers="r7c1-t37 r1c2-t37">
<p>The pipe driver uses SIGTERM to signal interrupts from the user to the Oracle process. This occurs when the user presses the interrupt key, <span class="bold">Ctrl+C</span>. The user process does not catch SIGTERM; the Oracle process catches it.</p>
</td>
</tr>
<tr class="cellalignment5712">
<td class="cellalignment5718" id="r8c1-t37" headers="r1c1-t37">
<p>SIGURG<a id="sthref295"></a><a id="sthref296"></a></p>
</td>
<td class="cellalignment5718" headers="r8c1-t37 r1c2-t37">
<p>Oracle Net TCP/IP drivers use SIGURG to send out-of-band breaks from the user process to the Oracle process.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The listed signals affect all precompiler applications. You can install one signal handler for SIGCLD (or SIGCHLD) and SIGPIPE when connected to the Oracle process. If you call the <code dir="ltr">osnsui()</code> routine to set it up, then you can have multiple signal handles for SIGINT. For SIGINT, use <code dir="ltr">osnsui()</code> and <code dir="ltr">osncui()</code> to register and delete signal-catching routines.</p>
<p>You can also install as many signal handlers as you want for other signals. If you are not connected to the Oracle process, then you can have multiple signal handlers.<a id="sthref297"></a><a id="sthref298"></a><a id="sthref299"></a></p>
<p><a href="#i36231">Example 6-1</a> shows how to set up a signal routine and a catching routine<a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a><a id="sthref303"></a><a id="sthref304"></a>.</p>
<div id="UNXAR232" class="example">
<p class="titleinexample"><a id="i36231"></a>Example 6-1 Signal Routine and Catching Routine</p>
<pre dir="ltr">/* user side interrupt set */
word osnsui( /*_ word *handlp, void (*astp), char * ctx, _*/)
/*
** osnsui: Operating System dependent Network Set User-side Interrupt. Add an 
** interrupt handling procedure astp. Whenever a user interrupt(such as a ^C)
** occurs, call astp with argument ctx. Put in *handlp handle for this 
** handler so that it may be cleared with osncui. Note that there may be many
** handlers; each should be cleared using osncui. An error code is returned if
** an error occurs.
*/

/* user side interrupt clear */
word osncui( /*_ word handle _*/ );
/*
** osncui: Operating System dependent Clear User-side Interrupt. Clear the
** specified handler. The argument is the handle obtained from osnsui. An error
** code is returned if an error occurs.
*/
</pre>
<p><a href="#i36265">Example 6-2</a> shows how to use the <code dir="ltr">osnsui()</code> and the <code dir="ltr">osncui()</code> routines in an application program.</p>
</div>
<!-- class="example" -->
<div id="UNXAR233" class="example">
<p class="titleinexample"><a id="i36265"></a>Example 6-2 osnsui() and osncui() Routine Template</p>
<pre dir="ltr">/*
** User interrupt handler template.
*/
void sig_handler()
{
...
}

main(argc, argv)
int arc;
char **argv; 
{

        int handle, err;
        ...

        /* Set up the user interrupt handler */
        if (err = osnsui(&amp;handle, sig_handler, (char *) 0))
        {
                /* If the return value is nonzero, then an error has occurred
                   Take appropriate action for the error. */
                ...
        }

        ...

        /* Clear the interrupt handler */
        if (err = osncui(handle))
        {
                /* If the return value is nonzero, then an error has occurred
                   Take appropriate action for the error. */
                ...
        }
        ...
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i26396"></a>
<div id="UNXAR234" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.13</span> XA Functionality<a id="sthref305"></a></h2>
<p>Oracle XA is the Oracle implementation of the<a id="sthref306"></a> X/Open Distributed Transaction Processing XA interface. The XA standard specifies a bidirectional interface between resource managers that provide access to shared resources within transactions, and between a transaction service that monitors and resolves transactions.</p>
<p>Oracle Call Interface has XA functionality. When building a TP-monitor XA application, ensure that the TP-monitor libraries (that define the symbols <code dir="ltr">ax_reg</code> and <code dir="ltr">ax_unreg</code>) are placed in the link line before the Oracle client shared library. This link restriction is required when using the XA dynamic registration (Oracle XA switch <code dir="ltr">xaoswd</code>).</p>
<p>Oracle Database XA calls are defined in both the client shared library (<code dir="ltr">libclntsh.a</code>, <code dir="ltr">libclntsh.sl</code>, <code dir="ltr">libclntsh.so</code>, or <code dir="ltr">libclntsh.dylib</code> depending on the platform) and the client static library (<code dir="ltr">libclntst11.a</code>). These libraries are located in the <code dir="ltr">$ORACLE_HOME/lib</code> directory.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5711">
<tr>
<td class="cellalignment5718">
<table class="cellalignment5716">
<tr>
<td class="cellalignment5715"><a href="cnfg_net_srv.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5715"><a href="ldr_demo.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5720">
<table class="cellalignment5714">
<tr>
<td class="cellalignment5715"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5715"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5715"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5715"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5715"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5715"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>