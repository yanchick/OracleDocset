<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114057"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Administering%20an%20Active%20Standby%20Pair%20without%20Cache%20Groups"></a><title>Administering an Active Standby Pair without Cache Groups</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2014-09-29T11:11:55Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Replication Guide"/>
<meta name="dcterms.identifier" content="E21635-11"/>
<meta name="dcterms.isVersionOf" content="TTREP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="attrib.htm" title="Previous" type="text/html"/>
<link rel="Next" href="standbycache.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21635-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/21</span> <!-- End Header -->
<div id="TTREP210" class="chapter"><a id="BGBGICDA"></a>
<h1 class="chapter"><span class="secnum">5</span> Administering an Active Standby Pair without Cache Groups</h1>
<p>This chapter describes how to administer an active standby pair that does not replicate cache groups. For information about administering active standby pairs that replicate cache groups, see <a href="standbycache.htm#BABHBJDG">Chapter 6, &#34;Administering an Active Standby Pair with Cache Groups&#34;</a>.</p>
<p>For information about managing failover and recovery automatically, see <a href="cluster.htm#CCHCFAAD">Chapter 8, &#34;Using Oracle Clusterware to Manage Active Standby Pairs&#34;</a>.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#BABGCHBJ">Setting up an active standby pair with no cache groups</a></p>
</li>
<li>
<p><a href="#BABJIBAB">Recovering from a failure of the active database</a></p>
</li>
<li>
<p><a href="#BABEHEII">Recovering from a failure of the standby database</a></p>
</li>
<li>
<p><a href="#BABHHBID">Recovering after a dual failure of both active and standby databases</a></p>
</li>
<li>
<p><a href="#BABJIFGD">Recovering from the failure of a subscriber database</a></p>
</li>
<li>
<p><a href="#BABCFAEI">Reversing the roles of the active and standby databases</a></p>
</li>
<li>
<p><a href="#CBAFFJDA">Detection of dual active databases</a></p>
</li>
</ul>
<a id="BABGCHBJ"></a>
<div id="TTREP213" class="sect1">
<h2 class="sect1">Setting up an <a id="sthref294"></a>active standby pair with no cache groups</h2>
<p>To set up an active standby pair, complete the tasks in this section. See <a href="gettingstarted.htm#CHDFACGC">&#34;Configuring an active standby pair with one subscriber&#34;</a> for an example.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you intend to replicate read-only cache groups or asynchronous writethrough (AWT) cache groups, see <a href="standbycache.htm#BABHBJDG">Chapter 6, &#34;Administering an Active Standby Pair with Cache Groups&#34;</a>.</div>
<p>Before you create a database, see the information in these sections:</p>
<ul>
<li>
<p><a href="attrib.htm#CEGDGAAD">&#34;Configuring the network&#34;</a></p>
</li>
<li>
<p><a href="setup.htm#CHDGICJC">&#34;Connection attributes for replicated databases&#34;</a></p>
</li>
<li>
<p><a href="setup.htm#CEGHFHJH">&#34;Managing the transaction log on a replicated database&#34;</a></p>
</li>
</ul>
<ol>
<li>
<p>Create a database. See <a class="olink TTOPR120" href="../TTOPR/using.htm#TTOPR120">&#34;Managing TimesTen Databases&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
<li>
<p>Create the replication scheme using the<a id="sthref295"></a> <code>CREATE ACTIVE STANDBY PAIR</code> statement. See <a href="definepair.htm#CHDJBJAI">Chapter 3, &#34;Defining an Active Standby Pair Replication Scheme&#34;</a>.</p>
</li>
<li>
<p>Call <code>ttRepStateSet</code><code>(&#39;ACTIVE&#39;)</code> on the active database.</p>
</li>
<li>
<p>Start the replication agent. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>Create a user on the active database and grant the <code>ADMIN</code> privilege to the user.</p>
</li>
<li>
<p>Duplicate the active database to the standby database.</p>
</li>
<li>
<p>Start the replication agent on the standby database. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>Wait for the standby database to enter the <code>STANDBY</code> state. Use the <code>ttRepStateGet</code> built-in procedure to check the state of the standby database.</p>
</li>
<li>
<p>Duplicate all of the subscribers from the standby database. See <a href="setup.htm#BABFEEFF">&#34;Duplicating a master database to a subscriber&#34;</a>.</p>
</li>
<li>
<p>Set up the replication agent policy and start the replication agent on each of the subscriber databases. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BABJIBAB"></a>
<div id="TTREP214" class="sect1">
<h2 class="sect1">Recovering from a failure of the <a id="sthref296"></a>active database</h2>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BABBAJAA">Recovering when the standby database is ready</a></p>
</li>
<li>
<p><a href="#BABCDCAE">Failing back to the original nodes</a></p>
</li>
</ul>
<a id="BABBAJAA"></a>
<div id="TTREP215" class="sect2">
<h3 class="sect2">Recovering when the standby database is ready</h3>
<p>This section describes how to recover the active database when the standby database is available and synchronized with the active database. It includes the following topics:</p>
<ul>
<li>
<p><a href="#BABCGCCH">When replication is return receipt or asynchronous</a></p>
</li>
<li>
<p><a href="#BABJDAEI">When replication is return twosafe</a></p>
</li>
</ul>
<a id="BABCGCCH"></a>
<div id="TTREP216" class="sect3">
<h4 class="sect3">When replication is return receipt or asynchronous</h4>
<p>Complete the following tasks:</p>
<ol>
<li>
<p>Stop the replication agent on the failed database if it has not already been stopped.</p>
</li>
<li>
<p>On the standby database, call <code>ttRepStateSet</code><code>(&#39;ACTIVE&#39;)</code>. This changes the role of the database from <code>STANDBY</code> to <code>ACTIVE</code>.</p>
</li>
<li>
<p>On the new active database, call <code>ttRepStateSave</code><code>(&#39;FAILED&#39;, &#39;</code><code><span class="codeinlineitalic">failed_database</span></code><code>&#39;,&#39;</code><code><span class="codeinlineitalic">host_name</span></code><code>&#39;)</code>, where <code><span class="codeinlineitalic">failed_database</span></code> is the former active database that failed. This step is necessary for the new active database to replicate directly to the subscriber databases. During normal operation, only the standby database replicates to the subscribers.</p>
</li>
<li>
<p>Destroy the failed database.</p>
</li>
<li>
<p>Duplicate the new active database to the new standby database.</p>
</li>
<li>
<p>Set up the replication agent policy and start the replication agent on the new standby database. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
</ol>
<p>The standby database contacts the active database. The active database stops sending updates to the subscribers. When the standby database is fully synchronized with the active database, then the standby database enters the <code>STANDBY</code> state and starts sending updates to the subscribers.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can verify that the standby database has entered the <code>STANDBY</code> state by using the <code>ttRepStateGet</code> built-in procedure.</div>
</div>
<!-- class="sect3" -->
<a id="BABJDAEI"></a>
<div id="TTREP217" class="sect3">
<h4 class="sect3">When replication is return twosafe</h4>
<p>Complete the following tasks:</p>
<ol>
<li>
<p>On the standby database, call <code>ttRepStateSet</code><code>(&#39;ACTIVE&#39;)</code>. This changes the role of the database from <code>STANDBY</code> to <code>ACTIVE</code>.</p>
</li>
<li>
<p>On the new active database, call <code>ttRepStateSave</code><code>(&#39;FAILED&#39;, &#39;</code><code><span class="codeinlineitalic">failed_database</span></code><code>&#39;,&#39;</code><code><span class="codeinlineitalic">host_name</span></code><code>&#39;)</code>, where <code><span class="codeinlineitalic">failed_database</span></code> is the former active database that failed. This step is necessary for the new active database to replicate directly to the subscriber databases. During normal operation, only the standby database replicates to the subscribers.</p>
</li>
<li>
<p>Connect to the failed database. This triggers recovery from the local transaction logs. If database recovery fails, you must continue from Step 5 of the procedure for recovering when replication is return receipt or asynchronous. See <a href="#BABCGCCH">&#34;When replication is return receipt or asynchronous&#34;</a>.</p>
</li>
<li>
<p>Verify that the replication agent for the failed database has restarted. If it has not restarted, then start the replication agent. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
</ol>
<p>When the active database determines that it is fully synchronized with the standby database, then the standby database enters the <code>STANDBY</code> state and starts sending updates to the subscribers.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can verify that the standby database has entered the <code>STANDBY</code> state by using the <code>ttRepStateSet</code> built-in procedure.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABCDCAE"></a>
<div id="TTREP221" class="sect2">
<h3 class="sect2">Failing back to the original nodes<a id="sthref297"></a><a id="sthref298"></a></h3>
<p>After a successful failover, you may want to fail back so that the active database and the standby database are on their original nodes. See <a href="#BABCFAEI">&#34;Reversing the roles of the active and standby databases&#34;</a> for instructions.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEHEII"></a>
<div id="TTREP222" class="sect1">
<h2 class="sect1">Recovering from a failure of the standby database<a id="sthref299"></a></h2>
<p>To recover from a failure of the standby database, complete the following tasks:</p>
<ol>
<li>
<p>Detect the standby database failure.</p>
</li>
<li>
<p>If return twosafe service is enabled, the failure of the standby database may prevent a transaction in progress from being committed on the active database, resulting in error 8170, &#34;Receipt or commit acknowledgement not returned in the specified timeout interval&#34;. If so, then call the <code>ttRepSyncSet</code> built-in procedure with a <code><span class="codeinlineitalic">localAction</span></code> parameter of <code>2</code> (<code>COMMIT</code>) and commit the transaction again. For example:</p>
<pre>Command&gt; call ttRepSyncSet( null, null, 2);
Command&gt; commit;
</pre></li>
<li>
<p>Call <code>ttRepStateSave</code><code>(&#39;FAILED&#39;,&#39;</code><code><span class="codeinlineitalic">standby_database</span></code><code>&#39;,&#39;</code><code><span class="codeinlineitalic">host_name</span></code><code>&#39;)</code> on the active database. Afterwards, as long as the standby database is unavailable, updates to the active database are replicated directly to the subscriber databases. Subscriber databases may also be duplicated directly from the active.</p>
</li>
<li>
<p>If the replication agent for the standby database has automatically restarted, stop the replication agent. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>Recover the standby database in one of the following ways:</p>
<ul>
<li>
<p>Connect to the standby database. This triggers recovery from the local transaction logs.</p>
</li>
<li>
<p>Duplicate the standby database from the active database.</p>
</li>
</ul>
<p>The amount of time that the standby database has been down and the amount of transaction logs that need to be applied from the active database determine the method of recovery that you should use.</p>
</li>
<li>
<p>Set up the replication agent policy and start the replication agent on the new standby database. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
</ol>
<p>The standby database enters the <code>STANDBY</code> state and starts sending updates to the subscribers after the active database determines that the two master databases have been synchronized and stops sending updates to the subscribers.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can verify that the standby database has entered the <code>STANDBY</code> state by using the <code>ttRepStateGet</code> built-in procedure.</div>
</div>
<!-- class="sect1" -->
<a id="BABHHBID"></a>
<div id="TTREP218" class="sect1">
<h2 class="sect1">Recovering after a dual failure of both active and standby databases<a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a></h2>
<p>Consider the following scenarios:</p>
<ul>
<li>
<p>The standby database fails. Then, the active database fails before the standby comes back up or before the standby has been synchronized with the active database.</p>
</li>
<li>
<p>The active database fails. The standby database becomes <code>ACTIVE</code>, and the rest of the recovery process begins. (See <a href="#BABJIBAB">&#34;Recovering from a failure of the active database&#34;</a>.) The new active database fails before the new standby database is fully synchronized with it.</p>
</li>
</ul>
<p>In both scenarios, the subscribers may have had more changes applied than the standby database.</p>
<p>When the active database fails and the standby database has not applied all of the changes that were last sent from the active database, there are two choices for recovery:</p>
<ul>
<li>
<p>Recover the <span class="italic">active</span> database from the local transaction logs.</p>
</li>
<li>
<p>Recover the <span class="italic">standby</span> database from the local transaction logs.</p>
</li>
</ul>
<p>The choice depends on which database is available and which is more up to date.</p>
<div id="TTREP219" class="sect2"><a id="sthref303"></a>
<h3 class="sect2">Recover the active database</h3>
<ol>
<li>
<p>Connect to the failed active database. This triggers recovery from the local transaction logs.</p>
</li>
<li>
<p>Verify that the replication agent for the failed active database has restarted. If it has not restarted, then start the replication agent. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>Call <code>ttRepStateSet</code><code>(&#39;ACTIVE&#39;)</code> on the newly recovered database.</p>
</li>
<li>
<p>Continue with Step 6 in <a href="#BABGCHBJ">&#34;Setting up an active standby pair with no cache groups&#34;</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="TTREP220" class="sect2"><a id="sthref304"></a>
<h3 class="sect2">Recover the standby database</h3>
<ol>
<li>
<p>Connect to the failed standby database. This triggers recovery from the local transaction logs.</p>
</li>
<li>
<p>If the replication agent for the standby database has automatically restarted, you must stop the replication agent. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>Drop the replication configuration using the <code>DROP ACTIVE STANDBY PAIR</code> statement.</p>
</li>
<li>
<p>Re-create the replication configuration using the <code>CREATE ACTIVE STANDBY PAIR</code> statement.</p>
</li>
<li>
<p>Call <code>ttRepStateSet</code><code>(&#39;ACTIVE&#39;)</code> on the master database, giving it the <code>ACTIVE</code> role.</p>
</li>
<li>
<p>Set up the replication agent policy and start the replication agent on the new standby database. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>Continue from Step 6 in <a href="#BABGCHBJ">&#34;Setting up an active standby pair with no cache groups&#34;</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJIFGD"></a>
<div id="TTREP223" class="sect1">
<h2 class="sect1">Recovering from the <a id="sthref305"></a><a id="sthref306"></a><a id="sthref307"></a>failure of a subscriber database</h2>
<p>If a subscriber database fails, then you can recover it by one of the following methods:</p>
<ul>
<li>
<p>Connect to the failed subscriber. This triggers recovery from the local transaction logs. Start the replication agent and let the subscriber catch up.</p>
</li>
<li>
<p>Duplicate the subscriber from the standby database.</p>
</li>
</ul>
<p>If the standby database is down or in recovery, then duplicate the subscriber from the active database.</p>
<p>After the subscriber database has been recovered, then set up the replication agent policy and start the replication agent. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABCFAEI"></a>
<div id="TTREP224" class="sect1">
<h2 class="sect1">Reversing the roles of the active and standby databases<a id="sthref308"></a><a id="sthref309"></a><a id="sthref310"></a><a id="sthref311"></a></h2>
<p>To change the role of the active database to standby and vice versa:</p>
<ol>
<li>
<p>Pause any applications that are generating updates on the current active database.</p>
</li>
<li>
<p>Call <code>ttRepSubscriberWait</code> on the active database, with the DSN and host of the current standby database as input parameters. It must return success (<code>&lt;00&gt;</code>). This ensures that all updates have been transmitted to the current standby database.</p>
</li>
<li>
<p>Stop the replication agent on the current active database. See <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>Call <code>ttRepDeactivate</code> on the current active database. This puts the database in the <code>IDLE</code> state.</p>
</li>
<li>
<p>Call <code>ttRepStateSet</code><code>(&#39;ACTIVE&#39;)</code> on the current standby database. This database now acts as the active database in the active standby pair.</p>
</li>
<li>
<p>Set up the replication agent policy and start the replication agent on the old active database.</p>
</li>
<li>
<p>Use the <code>ttRepStateGet</code> built-in procedure to determine when the database&#39;s state has changed from <code>IDLE</code> to <code>STANDBY</code>. The database now acts as the standby database in the active standby pair.</p>
</li>
<li>
<p>Resume any applications that were paused in Step 1.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CBAFFJDA"></a>
<div id="TTREP225" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Detection of dual active databases<a id="sthref312"></a><a id="sthref313"></a></h2>
<p>Ordinarily, the designation of the active and standby databases in an active standby pair is explicitly controlled by the user. However, in some circumstances the user may not have the ability to modify both the active and standby databases when changing the role of the standby database to active.</p>
<p>For example, if network communication to the site of an active database is interrupted, the user may need the standby database at a different site to take over the role of the active, but cannot stop replication on the current active or change its role manually. Changing the standby database to active without first stopping replication on the active leads to a situation where both masters are in the <code>ACTIVE</code> state and accepting transactions. In such a scenario, TimesTen can automatically negotiate the active/standby role of the master databases when network communication between the databases is restored.</p>
<p>If, during the initial handshake between the databases, TimesTen determines that the master databases in an active standby pair replication scheme are both in the <code>ACTIVE</code> state, TimesTen performs the following operations automatically:</p>
<ul>
<li>
<p>The database which was set to the <code>ACTIVE</code> state most recently is left in the <code>ACTIVE</code> state and may continue to be connected to and updated by applications.</p>
</li>
<li>
<p>The database which was set to the <code>ACTIVE</code> state least recently is invalidated. All applications are disconnected.</p>
</li>
<li>
<p>When the invalidated database comes back up, TimesTen determines whether any transactions have occurred on the database that have not yet been replicated to the other master database. If such transactions have occurred, they are now trapped, and the database is left in the <code>IDLE</code> state. The database needs to be duplicated from the active in order to become a standby. If there are no trapped transactions, the database is safe to use as a standby database and is automatically set to the <code>STANDBY</code> state.</p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5803">
<tr>
<td class="cellalignment5812">
<table class="cellalignment5808">
<tr>
<td class="cellalignment5807"><a href="attrib.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5807"><a href="standbycache.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5814">
<table class="cellalignment5806">
<tr>
<td class="cellalignment5807"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5807"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5807"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5807"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5807"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5807"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>