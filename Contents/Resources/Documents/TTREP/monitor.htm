<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114052"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Monitoring%20Replication"></a><title>Monitoring Replication</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2014-09-29T11:11:56Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Replication Guide"/>
<meta name="dcterms.identifier" content="E21635-11"/>
<meta name="dcterms.isVersionOf" content="TTREP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="setup.htm" title="Previous" type="text/html"/>
<link rel="Next" href="conflict.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21635-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/21</span> <!-- End Header -->
<div id="TTREP440" class="chapter"><a id="CHDFJDCJ"></a>
<h1 class="chapter"><span class="secnum">12</span> Monitoring Replication</h1>
<p>This <a id="sthref761"></a><a id="sthref762"></a>chapter describes some of the TimesTen utilities and built-in procedures you can use to monitor the replication status of your databases.</p>
<p>You can monitor replication from both the command line and within your programs. The <code>ttStatus</code> and <code>ttRepAdmin</code> utilities described in this chapter are useful for command line queries. To monitor replication from your programs, you can use the TimesTen built-in procedures described in <a class="olink TTREF" href="../TTREF/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database Reference</span></a> or create your own SQL <code>SELECT</code> statements to query the replication tables described in <a class="olink TTSYS" href="../TTSYS/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can only access the TimesTen <code>SYS</code> and <code>TTREP</code> tables for queries. Do not try to alter the contents of these tables.</div>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#CFAIGJIF">Show state of replication agents</a></p>
</li>
<li>
<p><a href="#CFABDGDI">Show master database information</a></p>
</li>
<li>
<p><a href="#CFADACJJ">Show subscriber database information</a></p>
</li>
<li>
<p><a href="#CFAIFDHF">Show the configuration of replicated databases</a></p>
</li>
<li>
<p><a href="#CFAHCFEC">Show replicated log records</a></p>
</li>
<li>
<p><a href="#CFACCDGJ">Use ttRepAdmin to show replication status</a></p>
</li>
<li>
<p><a href="#CFAJDGFG">Check the status of return service transactions</a></p>
</li>
<li>
<p><a href="#CFAFGJJA">Analyze outstanding transactions in the replication log</a></p>
</li>
</ul>
<a id="CFAIGJIF"></a>
<div id="TTREP441" class="sect1">
<h2 class="sect1">Show state of replication agents</h2>
<p>You can display information about the current state of the replication agents:</p>
<ul>
<li>
<p><a href="#CFAEAFIF">Using ttStatus to obtain replication agent status</a></p>
</li>
<li>
<p><a href="#CFADHCHD">Using ttAdmin -query to confirm policy settings</a></p>
</li>
<li>
<p><a href="#CFAEDFDD">Using ttDataStoreStatus to obtain replication agent status</a></p>
</li>
</ul>
<p>You can also obtain the state of specific replicated databases as described in <a href="#CFADACJJ">&#34;Show subscriber database information&#34;</a> and <a href="#CFAIFDHF">&#34;Show the configuration of replicated databases&#34;</a>.</p>
<a id="CFAEAFIF"></a>
<div id="TTREP442" class="sect2">
<h3 class="sect2">Using ttStatus to obtain replication agent status</h3>
<p>Use the <code>ttStatus</code> utility to confirm that the replication agent is started for the master database.</p>
<div id="TTREP443" class="example">
<p class="titleinexample"><a id="CFAIBEAI"></a>Example 12-1 Using ttStatus to obtain replication agent status</p>
<pre>&gt; ttStatus
TimesTen status report as of Thu Aug 11 17:05:23 2011
Daemon pid 18373 port 4134 instance ttuser
TimesTen server pid 18381 started on port 4136
------------------------------------------------------------------------
Data store /tmp/masterds
There are 16 connections to the data store
Shared Memory KEY 0x0201ab43 ID 5242889
PL/SQL Memory KEY 0x0301ab43 ID 5275658 Address 0x10000000
Type            PID     Context     Connection Name              ConnID
Process         20564   0x081338c0  masterds                          1
Replication     20676   0x08996738  LOGFORCE                          5
Replication     20676   0x089b69a0  REPHOLD                           2
Replication     20676   0x08a11a58  FAILOVER                          3
Replication     20676   0x08a7cd70  REPLISTENER                       4
Replication     20676   0x08ad7e28  TRANSMITTER                       6
Subdaemon       18379   0x080a11f0  Manager                        2032
Subdaemon       18379   0x080fe258  Rollback                       2033
Subdaemon       18379   0x081cb818  Checkpoint                     2036
Subdaemon       18379   0x081e6940  Log Marker                     2035
Subdaemon       18379   0x08261e70  Deadlock Detector              2038
Subdaemon       18379   0xae100470  AsyncMV                        2040
Subdaemon       18379   0xae11b508  HistGC                         2041
Subdaemon       18379   0xae300470  Aging                          2039
Subdaemon       18379   0xae500470  Flusher                        2034
Subdaemon       18379   0xae55b738  Monitor                        2037
Replication policy  : Manual
Replication agent is running.
Cache Agent policy  : Manual
PL/SQL enabled.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CFADHCHD"></a>
<div id="TTREP444" class="sect2">
<h3 class="sect2">Using ttAdmin -query to confirm policy settings</h3>
<p>Use the <code>ttAdmin</code> utility with the <code>-query</code> option to confirm the policy settings for a database, including the replication restart policy described in <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
<div id="TTREP445" class="example">
<p class="titleinexample"><a id="sthref763"></a>Example 12-2 Using ttAdmin to confirm policy settings</p>
<pre>&gt; ttAdmin -query masterDSN
RAM Residence Policy : inUse
Manually Loaded In Ram : False
Replication Agent Policy : manual
Replication Manually Started : True
Cache Agent Policy : manual
Cache Agent Manually Started : False
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CFAEDFDD"></a>
<div id="TTREP446" class="sect2">
<h3 class="sect2">Using ttDataStoreStatus to obtain replication agent status</h3>
<p>To obtain the status of the replication agents from a program, use the <code>ttDataStoreStatus</code> built-in procedure.</p>
<div id="TTREP447" class="example">
<p class="titleinexample"><a id="sthref764"></a>Example 12-3 Calling ttDataStoreStatus</p>
<p>Call the <code>ttDataStoreStatus</code> built-in procedure to obtain the status of the replication agents for the <code>masterds</code> databases:</p>
<pre>&gt; ttIsql masterds
Command&gt; CALL ttDataStoreStatus(&#39;/tmp/masterds&#39;);
&lt; /tmp/masterds, 964, 00000000005D8150, subdaemon, Global\DBI3b3234c0.0.SHM.35 &gt;
&lt; /tmp/masterds, 1712, 00000000016A72E0, replication, Global\DBI3b3234c0.0.SHM.35 &gt;
&lt; /tmp/masterds, 1712, 0000000001683DE8, replication, Global\DBI3b3234c0.0.SHM.35 &gt;
&lt; /tmp/masterds, 1620, 0000000000608128, application, Global\DBI3b3234c0.0.SHM.35 &gt;
4 rows found.
</pre>
<p>The output from <code>ttDataStoreStatus</code> is similar to that shown for the <code>ttStatus</code> utility in <a href="#CFAEAFIF">&#34;Using ttStatus to obtain replication agent status&#34;</a>.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFABDGDI"></a>
<div id="TTREP449" class="sect1">
<h2 class="sect1">Show master database information</h2>
<p>You can display information for a master database:</p>
<ul>
<li>
<p><a href="#CFADAJEJ">Using ttRepAdmin to display information about the master database</a></p>
</li>
<li>
<p><a href="#CFAHJCJF">Querying replication tables to obtain information about a master database</a></p>
</li>
</ul>
<a id="CFADAJEJ"></a>
<div id="TTREP450" class="sect2">
<h3 class="sect2">Using ttRepAdmin to display information about the master database<a id="sthref765"></a></h3>
<p>Use the <code>ttRepAdmin</code> utility with the <code>-self -list</code> options to display information about the master database:</p>
<pre>ttRepAdmin -dsn masterDSN -self -list
</pre>
<div id="TTREP451" class="example">
<p class="titleinexample"><a id="sthref766"></a>Example 12-4 Using ttRepAdmin to display information about a master database</p>
<p>This example shows the output for the master database described in <a href="design.htm#CHDBEIBI">&#34;Multiple subscriber classic replication schemes with return services and a log failure threshold&#34;</a>.</p>
<pre>&gt; ttRepAdmin -dsn masterds -self -list
Self host &#34;server1&#34;, port auto, name &#34;masterds&#34;, LSN 0/2114272
</pre></div>
<!-- class="example" -->
<p>The following table describes the fields.</p>
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="Fields" summary="This table contains descriptions of the fields in ttBookmark output." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t3">Field</th>
<th class="cellalignment5811" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t3" headers="r1c1-t3"><code>host</code></td>
<td class="cellalignment5812" headers="r2c1-t3 r1c2-t3">The name of the host for the database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t3" headers="r1c1-t3"><code>port</code></td>
<td class="cellalignment5812" headers="r3c1-t3 r1c2-t3">TCP/IP port used by a replication agent of another database to receive updates from this database. A value of 0 (zero) indicates replication has automatically assigned the port.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t3" headers="r1c1-t3"><code>name</code></td>
<td class="cellalignment5812" headers="r4c1-t3 r1c2-t3">Name of the database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t3" headers="r1c1-t3"><code>Log file/Replication hold LSN</code></td>
<td class="cellalignment5812" headers="r5c1-t3 r1c2-t3">Indicates the oldest location in the transaction log that is held for possible transmission to the subscriber. A value of <code>-1/-1</code> indicates replication is in the <code>stop</code> state with respect to all subscribers.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" -->
<a id="CFAHJCJF"></a>
<div id="TTREP452" class="sect2">
<h3 class="sect2">Querying replication tables to obtain information about a master database</h3>
<p>Use the following <code>SELECT</code> statement to query the <code>TTREP.TTSTORES</code> and <code>TTREP.REPSTORES</code> replication tables to obtain information about a master database:</p>
<pre>SELECT t.host_name, t.rep_port_number, t.tt_store_name
  FROM ttrep.ttstores t, ttrep.repstores s
    WHERE t.is_local_store = 0x01
      AND t.tt_store_id = s.tt_store_id;
</pre>
<p>This is the output of the <code>SELECT</code> statement for the master database described in <a href="design.htm#CHDBEIBI">&#34;Multiple subscriber classic replication schemes with return services and a log failure threshold&#34;</a>. The fields are the host name, the replication port number, and the database name.</p>
<pre>&lt; server1, 0, masterds&gt;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFADACJJ"></a>
<div id="TTREP454" class="sect1">
<h2 class="sect1">Show <a id="sthref767"></a><a id="sthref768"></a>subscriber database information</h2>
<p>Replication uses the TimesTen transaction log to retain information that must be transmitted to subscriber sites. When communication to subscriber databases is interrupted or the subscriber sites are down, the transaction log data accumulates. Part of the output from the queries described in this section enables you to see how much transaction log data has accumulated on behalf of each subscriber database and the amount of time since the last successful communication with each subscriber database.</p>
<p>Use the following methods to display information for subscriber databases:</p>
<ul>
<li>
<p><a href="#CFAGEHEI">Display subscriber status with the ttRepAdmin utility</a></p>
</li>
<li>
<p><a href="#CFAGJAFB">Display subscriber status with the ttReplicationStatus built-in procedure</a></p>
</li>
<li>
<p><a href="#CFAGDAFC">Display information about subscribers through querying replication tables</a></p>
</li>
</ul>
<a id="CFAGEHEI"></a>
<div id="TTREP455" class="sect2">
<h3 class="sect2">Display subscriber status with the ttRepAdmin utility<a id="sthref769"></a><a id="sthref770"></a></h3>
<p>To display information about subscribers, use the <code>ttRepAdmin</code> utility with the <code>-receiver -list</code> options:</p>
<pre>ttRepAdmin -dsn <span class="codeinlineitalic">masterDSN</span> -receiver -list
</pre>
<div id="TTREP456" class="example">
<p class="titleinexample"><a id="sthref771"></a>Example 12-5 Using ttRepAdmin to display information about subscribers</p>
<p>This example shows the output for the subscribers described in <a href="design.htm#CHDBEIBI">&#34;Multiple subscriber classic replication schemes with return services and a log failure threshold&#34;</a>.</p>
<pre>&gt; ttRepAdmin -dsn masterds -receiver -list
Peer name        Host name                Port   State   Proto
---------------- ------------------------ ------ ------- -----
subscriber1ds    server2                  Auto   Start      10

Last Msg Sent Last Msg Recv Latency TPS     RecordsPS Logs
------------- ------------- ------- ------- --------- ----
0:01:12       -             19.41 5       5        52    2

Peer name        Host name                Port   State   Proto
---------------- ------------------------ ------ ------- -----
subscriber2ds    server3                  Auto   Start      10

Last Msg Sent Last Msg Recv Latency TPS     RecordsPS Logs
------------- ------------- ------- ------- --------- ----
0:01:04       -             20.94         4        48    2
</pre>
<p>The first line of the display contains the subscriber definition. The following row of the display contains latency and rate information, as well as the number of transaction log files being retained on behalf of this subscriber. The latency for <code>subscriber1ds</code> is 19.41 seconds, and it is 2 logs behind the master. This is a high latency, indicating a problem if it continues to be high and the number of logs continues to increase.</p>
</div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="#CFAHEHGF">&#34;Subscriber information&#34;</a> for details on the subscriber information displayed.</div>
<p>If you have more than one scheme specified in the <code>TTREP.REPLICATIONS</code> table, you must use the <code>-scheme</code> option to specify which scheme you want to list. Otherwise you receive the following error:</p>
<pre>Must specify -scheme to identify which replication scheme to use
</pre>
<p>For more information, see <a class="olink TTREF353" href="../TTREF/util.htm#TTREF353">&#34;ttRepAdmin&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference.</span></p>
</div>
<!-- class="sect2" -->
<a id="CFAGJAFB"></a>
<div id="TTREP457" class="sect2">
<h3 class="sect2"><a id="sthref772"></a>Display subscriber status with the ttReplicationStatus built-in procedure</h3>
<p>Within ttIsql, you can display status for a one or more subscriber databases by using the <code>ttReplicationStatus</code> built-in procedure, which reports only on the status of the subscribers for the master database on which this built-in procedure is called.</p>
<div id="TTREP814" class="example">
<p class="titleinexample"><a id="sthref773"></a>Example 12-6 Display status of a single subscriber of this master</p>
<p>The following retrieves status for the subscriber <code>master2</code> that is located on <code>host1</code>. If the host name is excluded, the subscriber is located solely on its name.</p>
<pre>Command&gt; call ttReplicationStatus(&#39;master2&#39;, &#39;host1&#39;);
&lt; MASTER2, HOST1, 0, start, 1, 26, _ACTIVESTANDBY , TTREP &gt;
1 row found. 
</pre></div>
<!-- class="example" -->
<p>The information shown is that the subscriber <code>master2</code> located on <code>host1</code> that is listening on an automatically assigned port. The TCP/IP port is used by the subscriber agent to receive updates from the master. However, since the value is zero, this indicates replication has automatically assigned the port.</p>
<p>This subscriber is in the start state. There is only one transaction log being held for this peer and 26 seconds have passed since the last replication. The name of the replication scheme is <code>_ACTIVESTANDBY</code> and the owner is <code>TTREP</code>.</p>
<div id="TTREP815" class="example">
<p class="titleinexample"><a id="sthref774"></a>Example 12-7 Display status for all subscribers of this master</p>
<p>If you do not provide either a subscriber or the subscriber host names, then the status for all subscribers of this master are returned. The following shows the same status as above, since there is only one subscriber set up for this master.</p>
<pre>Command&gt; call ttReplicationStatus();
&lt; MASTER2, HOST1, 0, start, 1, 26, _ACTIVESTANDBY , TTREP &gt;
1 row found. 
</pre></div>
<!-- class="example" -->
<p>For more information, see <a class="olink TTREF284" href="../TTREF/proced.htm#TTREF284">&#34;ttReplicationStatus&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference.</span></p>
</div>
<!-- class="sect2" -->
<a id="CFAGDAFC"></a>
<div id="TTREP460" class="sect2">
<h3 class="sect2">Display information about subscribers through querying replication tables</h3>
<p>You can obtain the same information about a master&#39;s subscribers from a program by querying the <code>TTREP.REPPEERS</code>, <code>TTREP.TTSTORES</code>, and <code>SYS.MONITOR</code> tables with the following <code>SELECT</code> statement:</p>
<pre>SELECT t1.tt_store_name, t1.host_name, t1.rep_port_number,
p.state, p.protocol, p.timesend, p.timerecv, p.latency,
p.tps, p.recspersec, t3.last_log_file - p.sendlsnhigh + 1
  FROM ttrep.reppeers p, ttrep.ttstores t1, ttrep.ttstores t2, sys.monitor t3
  WHERE p.tt_store_id = t1.tt_store_id
    AND t2.is_local_store = 0X01
    AND p.subscriber_id = t2.tt_store_id
    AND p.replication_name = &#39;repscheme&#39;
    AND p.replication_owner = &#39;repl&#39;
    AND (p.state = 0 OR p.state = 1);
</pre>
<p>The following is sample output from the 3 statement above:</p>
<pre>&lt; subscriber1ds, server2, 0, 0, 7, 1003941635, 0, -1.00000000000000, -1, -1, 1 &gt;
&lt; subscriber2ds, server3, 0, 0, 7, 1003941635, 0, -1.00000000000000, -1, -1, 1 &gt;
</pre>
<p>See <a href="#CFAHEHGF">&#34;Subscriber information&#34;</a> for details on the subscriber information displayed.</p>
<a id="CFAHEHGF"></a>
<div id="TTREP816" class="sect3">
<h4 class="sect3">Subscriber information</h4>
<p>The output from either the <code>ttRepAdmin</code> utility or the <code>SELECT</code> statement contains the following fields:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="Fields" summary="This table contains descriptions of the output from ttRepAdmin or the equivalent SQL statement." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t5">Field</th>
<th class="cellalignment5811" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t5" headers="r1c1-t5"><code>Peer name</code></td>
<td class="cellalignment5812" headers="r2c1-t5 r1c2-t5">Name of the subscriber database</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t5" headers="r1c1-t5"><code>Host name</code></td>
<td class="cellalignment5812" headers="r3c1-t5 r1c2-t5">Name of the machine that hosts the subscriber</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t5" headers="r1c1-t5"><code>Port</code></td>
<td class="cellalignment5812" headers="r4c1-t5 r1c2-t5">TCP/IP port used by the subscriber agent to receive updates from the master. A value of 0 indicates replication has automatically assigned the port.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t5" headers="r1c1-t5"><code>State</code></td>
<td class="cellalignment5812" headers="r5c1-t5 r1c2-t5">Current replication state of the subscriber with respect to its master database (see <a href="#CFADACJJ">&#34;Show subscriber database information&#34;</a> for information).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r6c1-t5" headers="r1c1-t5"><code>Protocol</code></td>
<td class="cellalignment5812" headers="r6c1-t5 r1c2-t5">Internal protocol used by replication to communicate between this master and its subscribers. You can ignore this value.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r7c1-t5" headers="r1c1-t5"><code>Last message sent</code></td>
<td class="cellalignment5812" headers="r7c1-t5 r1c2-t5">Time (in seconds) since the master sent the last message to the subscriber. This includes the &#34;heartbeat&#34; messages sent between the databases.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r8c1-t5" headers="r1c1-t5"><code>Last message received</code></td>
<td class="cellalignment5812" headers="r8c1-t5 r1c2-t5">Time (in seconds) since this subscriber received the last message from the master.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r9c1-t5" headers="r1c1-t5"><code>Latency</code></td>
<td class="cellalignment5812" headers="r9c1-t5 r1c2-t5">The average latency time (in seconds) between when the master sends a message and when it receives the final acknowledgement from the subscriber. (See note below.)</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r10c1-t5" headers="r1c1-t5"><code>Transactions per second</code></td>
<td class="cellalignment5812" headers="r10c1-t5 r1c2-t5">The average number of transactions per second that are committed on the master and processed by the subscriber. (See note below.)</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r11c1-t5" headers="r1c1-t5"><code>Records per second</code></td>
<td class="cellalignment5812" headers="r11c1-t5 r1c2-t5">The average number of transmitted records per second. (See note below.)</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r12c1-t5" headers="r1c1-t5"><code>Logs</code></td>
<td class="cellalignment5812" headers="r12c1-t5 r1c2-t5">Number of transaction log files the master database is retaining for a subscriber.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>Latency</code>, <code>TPS</code>, and <code>RecordsPS</code> report averages detected while replicating a batch of records. These values can be unstable if the workload is not relatively constant. A value of -1 indicates the master&#39;s replication agent has not yet established communication with its subscriber replication agents or sent data to them.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFAIFDHF"></a>
<div id="TTREP461" class="sect1">
<h2 class="sect1">Show the configuration of replicated databases</h2>
<p>You can display the configuration of your replicated databases:</p>
<ul>
<li>
<p><a href="#CFAFDEDC">Display configuration information with the ttIsql repschemes command</a></p>
</li>
<li>
<p><a href="#CFADGFFI">Display configuration information with the ttRepAdmin utility</a></p>
</li>
<li>
<p><a href="#CFAIFHJJ">Display configuration information through querying replication tables</a></p>
</li>
</ul>
<a id="CFAFDEDC"></a>
<div id="TTREP462" class="sect2">
<h3 class="sect2">Display configuration information with the ttIsql <a id="sthref775"></a><a id="sthref776"></a><a id="sthref777"></a>repschemes command</h3>
<p>To display the configuration of your replicated databases from the <code>ttIsql</code> prompt, use the <code>repschemes</code> command:</p>
<pre>Command&gt; repschemes;
</pre>
<p><a href="#CFACCFJA">Example 12-8</a> shows the configuration output from the replication scheme shown in <a href="design.htm#CHDCHGCC">&#34;Propagation scheme&#34;</a>.</p>
<div id="TTREP463" class="example">
<p class="titleinexample"><a id="CFACCFJA"></a>Example 12-8 Output from ttIsql repschemes command</p>
<pre>Replication Scheme PROPAGATOR:

  Element: A
    Type: Table TAB
    Master Store: CENTRALDS on FINANCE Transmit Durable
    Subscriber Store: PROPDS on NETHANDLER

  Element: B
    Type: Table TAB
    Propagator Store: PROPDS on NETHANDLER Transmit Durable
    Subscriber Store: BACKUP1DS on BACKUPSYSTEM1
    Subscriber Store: BACKUP2DS on BACKUPSYSTEM2

Store: BACKUP1DS on BACKUPSYSTEM1
  Port: (auto)
  Log Fail Threshold: (none)
  Retry Timeout: 120 seconds
  Compress Traffic: Disabled

Store: BACKUP2DS on BACKUPSYSTEM2
  Port: (auto)
  Log Fail Threshold: (none)
  Retry Timeout: 120 seconds
  Compress Traffic: Disabled

Store: CENTRALDS on FINANCE
  Port: (auto)
  Log Fail Threshold: (none)
  Retry Timeout: 120 seconds
  Compress Traffic: Disabled

Store: PROPDS on NETHANDLER
  Port: (auto)
  Log Fail Threshold: (none)
  Retry Timeout: 120 seconds
  Compress Traffic: Disabled
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CFADGFFI"></a>
<div id="TTREP464" class="sect2">
<h3 class="sect2">Display configuration information with the <a id="sthref778"></a>ttRepAdmin utility</h3>
<p>To display the configuration of your replicated databases, use the <code>ttRepAdmin</code> utility with the <code>-showconfig</code> option:</p>
<pre>ttRepAdmin -showconfig -dsn <span class="italic">masterDSN</span>
</pre>
<p><a href="#CFADGEFC">Example 12-9</a> shows the configuration output from the propagated databases configured by the replication scheme shown in <a href="design.htm#CHDCHGCC">&#34;Propagation scheme&#34;</a>. The <code>propds</code> propagator shows a latency of 19.41 seconds and is 2 logs behind the master.</p>
<div id="TTREP465" class="example">
<p class="titleinexample"><a id="CFADGEFC"></a>Example 12-9 ttRepAdmin output</p>
<pre>&gt; ttRepAdmin -showconfig -dsn centralds
Self host &#34;finance&#34;, port auto, name &#34;centralds&#34;, LSN 0/155656, timeout 120, 
threshold 0

List of subscribers
-----------------
Peer name        Host name                Port   State   Proto
---------------- ------------------------ ------ ------- -----
propds           nethandler               Auto   Start      10

Last Msg Sent Last Msg Recv Latency TPS     RecordsPS Logs
------------- ------------- ------- ------- --------- ----
0:01:12       -             19.41         5        52    2

List of tables and subscriptions
--------------------------------
Table details
-------------
Table : tab          Timestamp updates : -

Master Name                 Subscriber Name
-----------                 -------------
centralds                   propds

Table details
-------------
Table : tab          Timestamp updates : -

Master Name                 Subscriber name
-----------                 -------------
propds                      backup1ds
propds                      backup2ds
</pre>
<p>See <a href="#CFAGDAFC">&#34;Display information about subscribers through querying replication tables&#34;</a> for the meaning of the &#34;List of subscribers&#34; fields. The &#34;Table details&#34; fields list the table and the names of its master (Sender) and subscriber databases.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CFAIFHJJ"></a>
<div id="TTREP466" class="sect2">
<h3 class="sect2">Display configuration information through querying replication tables</h3>
<p>Use the following <code>SELECT</code> statements to query the <code>TTREP.TTSTORES</code>, <code>TTREP.REPSTORES</code>, <code>TTREP.REPPEERS</code>, <code>SYS.MONITOR</code>, <code>TTREP.REPELEMENTS</code>, and <code>TTREP.REPSUBSCRIPTIONS</code> tables for configuration information:</p>
<pre>SELECT t.host_name, t.rep_port_number, t.tt_store_name, s.peer_timeout, 
s.fail_threshold
  FROM ttrep.ttstores t, ttrep.repstores s
    WHERE t.is_local_store = 0X01
      AND t.tt_store_id = s.tt_store_id;

SELECT t1.tt_store_name, t1.host_name, t1.rep_port_number,
       p.state, p.protocol, p.timesend, p.timerecv, p.latency,
       p.tps, p.recspersec, t3.last_log_file - p.sendlsnhigh + 1
  FROM ttrep.reppeers p, ttrep.ttstores t1, ttrep.ttstores t2, sys.monitor t3
    WHERE p.tt_store_id = t2.tt_store_id
      AND t2.is_local_store = 0X01
      AND p.subscriber_id = t1.tt_store_id
      AND (p.state = 0 OR p.states = 1);

SELECT ds_obj_owner, DS_OBJ_NAME, t1.tt_store_name,t2.tt_store_name
  FROM ttrep.repelements e, ttrep.repsubscriptions s, 
      ttrep.ttstores t1, ttrep.ttstores t2
    WHERE s.element_name = e.element_name
      AND e.master_id = t1.tt_store_id
      AND s.subscriber_id = t2.tt_store_id
    ORDER BY ds_obj_owner, ds_obj_name;
</pre>
<div id="TTREP467" class="example">
<p class="titleinexample"><a id="sthref779"></a>Example 12-10 Output from queries</p>
<p>The output from the queries refer to the databases configured by the replication scheme shown in <a href="design.htm#CHDCHGCC">&#34;Propagation scheme&#34;</a>.</p>
<p>The output from the first query might be:</p>
<pre>&lt; finance, 0, centralds, 120, 0 &gt;
</pre>
<p>It shows the host name, port number and the database name. The fourth value (120) is the <code>TIMEOUT</code> value that defines the amount of time a database waits for a response from another database before resending a message. The last value (0) is the log failure threshold value described in <a href="attrib.htm#CHDBACFH">&#34;Setting the transaction log failure threshold&#34;</a>.</p>
<p>The output from the second query might be:</p>
<pre>&lt; propds, nethandler, 0, 0, 7, 1004378953, 0, -1.00000000000000, -1, -1, 1 &gt;
</pre>
<p>See <a href="#CFAGDAFC">&#34;Display information about subscribers through querying replication tables&#34;</a> for a description of the fields.</p>
<p>The output from the last query might be:</p>
<pre>&lt; repl, tab, centralds, propds &gt;
&lt; repl, tab, propds, backup1ds &gt;
&lt; repl, tab, propds, backup2ds &gt;
</pre>
<p>The rows show the replicated table and the names of its master (sender) and subscriber (receiver) databases.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFAHCFEC"></a>
<div id="TTREP468" class="sect1">
<h2 class="sect1">Show replicated log records<a id="sthref780"></a><a id="sthref781"></a><a id="sthref782"></a></h2>
<p>In a replicated database, transactions remain in the transaction log buffer and transaction log files until the master replication agent confirms they have been fully processed by the subscriber. In an active standby pair replication scheme that contains subscribers, transactions remain in the transaction logs until the active master confirms that they are processed by both the standby master and any subscribers. Only then can the active master consider purging them from the log buffer and transaction log files. When the log space is exhausted, subsequent updates on the master database are aborted.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more information about transaction log growth, see <a class="olink TTOPR711" href="../TTOPR/trans.htm#TTOPR711">&#34;Monitoring accumulation of transaction log files&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</div>
<p>Transactions are stored in the log in the form of <span class="italic">log records</span>. You can use <span class="italic">bookmarks</span> to detect which log records have or have not been replicated by a master database. A bookmark consists of <span class="italic"><a id="sthref783"></a><a id="sthref784"></a>log sequence numbers</span> (LSNs) that identify the location of particular records in the transaction log that you can use to gauge replication performance. The LSNs associated with a bookmark are: <span class="italic">hold LSN</span>, <span class="italic">last written LSN</span>, and <span class="italic">last LSN forced to disk</span>. The hold LSN describes the location of the lowest (or oldest) record held in the log for possible transmission to a subscriber. You can compare the hold LSN with the last written LSN to determine the amount of data in the transaction log that have not yet been transmitted to the subscribers. The last LSN forced to disk describes the last records saved in a transaction log file on disk.</p>
<p>You can monitor replication through bookmarks and the log sequence numbers with the following tools:</p>
<ul>
<li>
<p><a href="#CFACFJFC">Monitor replication with the TTREP.REPPEERS table</a></p>
</li>
<li>
<p><a href="#CFAIEAII">Monitor replication with the ttLogHolds built-in procedure</a></p>
</li>
<li>
<p><a href="#CFACCAGB">Monitor replication with the ttRepAdmin utility</a></p>
</li>
<li>
<p><a href="#CFABFGHF">Monitor replication with the ttBookMark built-in procedure</a></p>
</li>
</ul>
<a id="CFACFJFC"></a>
<div id="TTREP830" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Monitor replication with the TTREP.REPPEERS table</h3>
<p>An accurate way to monitor replication to a particular subscriber is to look at the send LSN for the subscriber, which consists of the <code>SENDLSNHIGH</code> and <code>SENDLSNLOW</code> fields in the <code>TTREP.REPPEERS</code> table. In contrast to the send LSN value, the hold LSN returned in a bookmark is computed every 10 seconds to describe the minimum send LSN for all the subscribers, so it provides a more general view of replication progress that does not account for the progress of replication to the individual subscribers. Because replication acknowledgements are asynchronous for better performance, the send LSN can also be some distance behind. Nonetheless, the send LSN for a subscriber is the most accurate value available and is always ahead of the hold LSN.</p>
</div>
<!-- class="sect2" -->
<a id="CFAIEAII"></a>
<div id="TTREP831" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Monitor replication with the ttLogHolds built-in procedure</h3>
<p>Use the <a class="olink TTREF261" href="../TTREF/proced.htm#TTREF261"><code>ttLogHolds</code></a> built-in procedure to get information about replication log holds.</p>
<p>The following example shows the output of <code>ttLogHolds</code> built-in procedure for an active standby pair replication scheme, where the active master is <code>master1</code> and the standby master is <code>master2</code>, with a single subscriber, <code>subscriber1</code>. All transactions are replicated from the active master first to the standby master who then propagates the transactions to the subscriber. Thus, the subscriber&#39;s progress is slightly behind the standby master&#39;s progress.</p>
<p>The active master monitors the progress of both the standby master and the subscriber; therefore, if the standby master goes down for any reason, the active master can take over the replication to the subscriber. The active master receives acknowledgements when transactions are applied on the subscriber so the active master knows when it can release pertinent log records that might be needed if the standby master fails (upon which the active master switches to replicate directly to the subscribers). The transactions remain in the transaction logs until they are processed on both the standby master and the subscriber.</p>
<pre>Command&gt; call ttLogHolds;
&lt; 0, 3569664, Checkpoint                    , master1.ds0 &gt;
&lt; 0, 15742976, Checkpoint                    , master1.ds1 &gt;
&lt; 0, 16351496, Replication                   , ADC6160529:SUBSCRIBER1 &gt;
&lt; 0, 16351640, Replication                   , ADC6160529:MASTER2 &gt;
4 rows found.
</pre>
<p>If you are using an AWT cache group, it uses the replication agent to asynchronously propagate transactions to the Oracle database. When you call the <code>ttLogHolds</code> built-in procedure, the description field contains &#34;<code>_ORACLE</code>&#34; to identify the transaction log hold for the AWT cache group propagation.</p>
<pre>Command&gt; call ttLogHolds();
&lt; 0, 18958336, Checkpoint                    , cachealone1.ds0 &gt;
&lt; 0, 19048448, Checkpoint                    , cachealone1.ds1 &gt;
&lt; 0, 19050904, Replication                   , ADC6160529:_ORACLE &gt;
3 rows found.
</pre>
<p>For more details on the <code>ttLogHolds</code> built-in procedure, see <a class="olink TTREF261" href="../TTREF/proced.htm#TTREF261">&#34;ttLogHolds&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</div>
<!-- class="sect2" -->
<a id="CFACCAGB"></a>
<div id="TTREP469" class="sect2">
<h3 class="sect2">Monitor replication with the <a id="sthref785"></a>ttRepAdmin utility</h3>
<p>Use the <code>ttRepAdmin</code> utility with the <code>-bookmark</code> option to display the location of bookmarks:</p>
<pre>&gt; ttRepAdmin -dsn masterds -bookmark
Replication hold LSN ...... 10/927692
Last written LSN .......... 10/928908
Last LSN forced to disk ... 10/280540
Each LSN is defined by two values:
Log file number / Offset in log file
</pre>
<p>The LSNs output from <code>ttRepAdmin</code> <code>-bookmark</code> are:</p>
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="Line descriptions" summary="This table contains descriptions of the LSNs in ttRepAdmin -bookmark output." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t8">Line</th>
<th class="cellalignment5811" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t8" headers="r1c1-t8"><code>Replication hold LSN</code></td>
<td class="cellalignment5812" headers="r2c1-t8 r1c2-t8">The location of the lowest (or oldest) record held in the log for possible transmission to a subscriber. A value of -1/-1 indicates replication is in the <code>stop</code> state with respect to all subscribers (or the queried database is not a master database).
<p>If you are monitoring an active standby pair with one or more subscribers, then this value denotes the oldest record held for all nodes involved in the replication scheme. For example, in an active standby pair with subscribers, the oldest record could be held in the log for the standby master or any of the subscribers.</p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t8" headers="r1c1-t8"><code>Last written LSN</code></td>
<td class="cellalignment5812" headers="r3c1-t8 r1c2-t8">The location of the most recently generated transaction log record for the database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t8" headers="r1c1-t8"><code>Last LSN forced to disk</code></td>
<td class="cellalignment5812" headers="r4c1-t8 r1c2-t8">The location of the most recent transaction log record written to the disk.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" -->
<a id="CFABFGHF"></a>
<div id="TTREP470" class="sect2">
<h3 class="sect2">Monitor replication with the ttBookMark built-in procedure</h3>
<p>Use the <code>ttBookmark</code> built-in procedure to display the location of bookmarks.</p>
<div id="TTREP471" class="example">
<p class="titleinexample"><a id="CFACDFEA"></a>Example 12-11 Using ttBookmark to display bookmark location</p>
<pre>&gt; ttIsql masterds

Command&gt; call ttBookMark();
&lt; 10, 928908, 10, 280540, 10, 927692 &gt;
1 row found.
</pre>
<p>The first two columns in the returned row define the &#34;Last written LSN,&#34; the next two columns define the &#34;Last LSN forced to disk,&#34; and the last two columns define the &#34;Replication hold LSN.&#34;</p>
<p>If you are monitoring an active standby pair with one or more subscribers, then the &#34;Replication hold LSN&#34; denotes the oldest record held for all nodes involved in the replication scheme. For example, in an active standby pair with subscribers, the oldest record could be held in the log for the standby master or any of the subscribers.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFACCDGJ"></a>
<div id="TTREP472" class="sect1">
<h2 class="sect1">Use ttRepAdmin to show replication status</h2>
<p>You can use the <code>ttRepAdmin</code> utility with the <code>-showstatus</code> option to display the current status of the replication agent. The status output includes the bookmark locations, port numbers, and communication protocols used by the replication agent for the queried database.</p>
<p>The output from <code>ttRepAdmin</code> <code>-showstatus</code> includes the status of the main thread and the <code>TRANSMITTER</code> and <code>RECEIVER</code> threads used by the replication agent. A master database has a <code>TRANSMITTER</code> thread and a subscriber database has a <code>RECEIVER</code> thread. A database that serves a master/subscriber role in a bidirectional replication scheme has both a <code>TRANSMITTER</code> and a <code>RECEIVER</code> thread.</p>
<p>Each replication agent has a single <code>REPLISTENER</code> thread that listens on a port for peer connections. On a master database, the <code>REPLISTENER</code> thread starts a separate <code>TRANSMITTER</code> thread for each subscriber database. On a subscriber database, the <code>REPLISTENER</code> thread starts a separate <code>RECEIVER</code> thread for each connection from a master.</p>
<p>If the TimesTen daemon requests that the replication agent stop or if a fatal error occurs in any of the other threads used by the replication agent, the main thread waits for the other threads to gracefully terminate. The TimesTen daemon may or may not restart the replication agent, depending upon certain fatal errors. The <code>REPLISTENER</code> thread never terminates during the lifetime of the replication agent. A <code>TRANSMITTER</code> or <code>RECEIVER</code> thread may stop but the replication agent may restart it. The <code>RECEIVER</code> thread terminates on errors from which it cannot recover or when the master disconnects.</p>
<p><a href="#CFACDFEA">Example 12-11</a> shows <code>ttRepAdmin</code> <code>-showstatus</code> output for a unidirectional replication scheme in which the <code>rep1</code> database is the master and <code>rep2</code> database is the subscriber. The first <code>ttRepAdmin</code> <code>-showstatus</code> output shows the status of the <code>rep1</code> database and its <code>TRANSMITTER</code> thread. The second output shows the status of the <code>rep2</code> database and its <code>RECEIVER</code> thread.</p>
<p>Following the example are sections that describe the meaning of each field in the <code>ttRepAdmin</code> <code>-showstatus</code> output:</p>
<ul>
<li>
<p><a href="#CFAEDCIC">MAIN thread status fields</a></p>
</li>
<li>
<p><a href="#CFAGFBEI">Replication peer status fields</a></p>
</li>
<li>
<p><a href="#CFAHAHCJ">TRANSMITTER thread status fields</a></p>
</li>
<li>
<p><a href="#CFAFCIAI">RECEIVER thread status fields</a></p>
</li>
</ul>
<div id="TTREP473" class="example">
<p class="titleinexample"><a id="sthref786"></a>Example 12-12 Unidirectional replication scheme</p>
<p>Consider the unidirectional replication scheme from the <code>rep1</code> database to the <code>rep2</code> database:</p>
<pre>CREATE REPLICATION r
ELEMENT e1 TABLE t
  MASTER rep1
  SUBSCRIBER rep2;
</pre>
<p>The replication status for the <code>rep1</code> database should look similar to the following:</p>
<pre>&gt; ttRepAdmin -showstatus rep1

DSN                      : rep1
Process ID               : 1980
Replication Agent Policy : MANUAL
Host                     : MYHOST
RepListener Port         : 1113 (AUTO)
Last write LSN           : 0.1487928
Last LSN forced to disk  : 0.1487928
Replication hold LSN     : 0.1486640

Replication Peers:
  Name                   : rep2
  Host                   : MYHOST
  Port                   : 1154 (AUTO)
  Replication State      : STARTED
  Communication Protocol : 12

TRANSMITTER thread(s):
  For                     : rep2
    Start/Restart count   : 2
    Send LSN              : 0.1485960
    Transactions sent     : 3
    Total packets sent    : 10
    Tick packets sent     : 3
    MIN sent packet size  : 48
    MAX sent packet size  : 460
    AVG sent packet size  : 167
    Last packet sent at   : 17:41:05
    Total Packets received: 9
    MIN rcvd packet size  : 48
    MAX rcvd packet size  : 68
    AVG rcvd packet size  : 59
    Last packet rcvd&#39;d at : 17:41:05
    Earlier errors (max 5):
    TT16060 in transmitter.c (line 3590) at 17:40:41 on 08-25-2004
    TT16122 in transmitter.c (line 2424) at 17:40:41 on 08-25-2004
</pre>
<p>Note that the <code>Replication hold LSN</code>, the <code>Last write LSN</code> and the <code>Last LSN</code> forced to disk are very close, which indicates that replication is operating satisfactorily. If the <code>Replication hold LSN</code> falls behind the <code>Last write LSN</code> and the <code>Last LSN</code>, then replication is not keeping up with updates to the master.</p>
<p>The replication status for the <code>rep2</code> database should look similar to the following:</p>
<pre>&gt; ttRepAdmin -showstatus rep2

DSN                      : rep2
Process ID               : 2192
Replication Agent Policy : MANUAL
Host                     : MYHOST
RepListener Port         : 1154 (AUTO)
Last write LSN           : 0.416464
Last LSN forced to disk  : 0.416464
Replication hold LSN     : -1.-1

Replication Peers:
  Name              : rep1
  Host              : MYHOST
  Port              : 0 (AUTO)
  Replication State : STARTED
  Communication Protocol : 12

RECEIVER thread(s):
  For                   : rep1
  Start/Restart count   : 1
  Transactions received : 0
  Total packets sent    : 20
  Tick packets sent     : 0
  MIN sent packet size  : 48
  MAX sent packet size  : 68
  AVG sent packet size  : 66
  Last packet sent at   : 17:49:51
  Total Packets received: 20
  MIN rcvd packet size  : 48
  MAX rcvd packet size  : 125
  AVG rcvd packet size  : 52
  Last packet rcvd&#39;d at : 17:49:51
</pre></div>
<!-- class="example" -->
<a id="CFAEDCIC"></a>
<div id="TTREP474" class="sect2">
<h3 class="sect2">MAIN thread status fields</h3>
<p>The following fields are output for the <code>MAIN</code> thread in the replication agent for the queried database.</p>
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="MAIN thread fields" summary="This table contains descriptions of the fields in output for the MAIN thread in the replication agent." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t9">MAIN Thread</th>
<th class="cellalignment5811" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t9" headers="r1c1-t9"><code>DSN</code></td>
<td class="cellalignment5812" headers="r2c1-t9 r1c2-t9">Name of the database to be queried.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t9" headers="r1c1-t9"><code>Process ID</code></td>
<td class="cellalignment5812" headers="r3c1-t9 r1c2-t9">Process Id of the replication agent.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t9" headers="r1c1-t9"><code>Replication Agent Policy</code></td>
<td class="cellalignment5812" headers="r4c1-t9 r1c2-t9">The restart policy, as described in <a href="setup.htm#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a></td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t9" headers="r1c1-t9"><code>Host</code></td>
<td class="cellalignment5812" headers="r5c1-t9 r1c2-t9">Name of the machine that hosts this database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r6c1-t9" headers="r1c1-t9"><code>RepListener Port</code></td>
<td class="cellalignment5812" headers="r6c1-t9 r1c2-t9">TCP/IP port used by the replication agent to listen for connections from the <code>TRANSMITTER</code> threads of remote replication agents. A value of 0 indicates that this port has been assigned automatically to the replication agent (the default), rather than being specified as part of a replication scheme.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r7c1-t9" headers="r1c1-t9"><code>Last write LSN</code></td>
<td class="cellalignment5812" headers="r7c1-t9 r1c2-t9">The location of the most recently generated transaction log record for the database. See <a href="#CFAHCFEC">&#34;Show replicated log records&#34;</a> for more information.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r8c1-t9" headers="r1c1-t9"><code>Last LSN forced to disk</code></td>
<td class="cellalignment5812" headers="r8c1-t9 r1c2-t9">The location of the most recent transaction log record written to the disk. See <a href="#CFAHCFEC">&#34;Show replicated log records&#34;</a> for more information.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r9c1-t9" headers="r1c1-t9"><code>Replication hold LSN</code></td>
<td class="cellalignment5812" headers="r9c1-t9 r1c2-t9">The location of the lowest (or oldest) record held in the log for possible transmission to a subscriber. A value of -1/-1 indicates replication is in the <code>stop</code> state with respect to all subscribers. See <a href="#CFAHCFEC">&#34;Show replicated log records&#34;</a> for more information.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" -->
<a id="CFAGFBEI"></a>
<div id="TTREP475" class="sect2">
<h3 class="sect2">Replication peer status fields</h3>
<p>The following fields are output for each replication peer that participates in the replication scheme with the queried database. A &#34;peer&#34; could play the role of master, subscriber, propagator or both master and subscriber in a bidirectional replication scheme.</p>
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="Replication peers" summary="This table contains descriptions of the fields in output for each replication peer." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t10">Replication Peers</th>
<th class="cellalignment5811" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t10" headers="r1c1-t10"><code>Name</code></td>
<td class="cellalignment5812" headers="r2c1-t10 r1c2-t10">Name of a database that is a replication peer to this database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t10" headers="r1c1-t10"><code>Host</code></td>
<td class="cellalignment5812" headers="r3c1-t10 r1c2-t10">Host of the peer database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t10" headers="r1c1-t10"><code>Port</code></td>
<td class="cellalignment5812" headers="r4c1-t10 r1c2-t10">TCP/IP port used by the replication agent for the peer database. A value of 0 indicates this port has been assigned automatically to the replication agent (the default), rather than being specified as part of a replication scheme.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t10" headers="r1c1-t10"><code>Replication State</code></td>
<td class="cellalignment5812" headers="r5c1-t10 r1c2-t10">Current replication state of the replication peer with respect to the queried database (see <a href="#CFADACJJ">&#34;Show subscriber database information&#34;</a> for information).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r6c1-t10" headers="r1c1-t10"><code>Communication Protocol</code></td>
<td class="cellalignment5812" headers="r6c1-t10 r1c2-t10">Internal protocol used by replication to communicate between the peers. (For internal use only.)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" -->
<a id="CFAHAHCJ"></a>
<div id="TTREP476" class="sect2">
<h3 class="sect2">TRANSMITTER thread status fields</h3>
<p>The following fields are output for each <code>TRANSMITTER</code> thread used by a master replication agent to send transaction updates to a subscriber. A master with multiple subscribers has multiple <code>TRANSMITTER</code> threads.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The counts in the <code>TRANSMITTER</code> output begin to accumulate when the replication agent is started. These counters are reset to 0 only when the replication agent is started or restarted.</div>
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="Transmitter threads" summary="This table contains descriptions of fields in output for each TRANSMITTER thread." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t12">TRANSMITTER Thread</th>
<th class="cellalignment5811" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t12" headers="r1c1-t12"><code>For</code></td>
<td class="cellalignment5812" headers="r2c1-t12 r1c2-t12">Name of the subscriber database that is receiving replicated data from this database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t12" headers="r1c1-t12"><code>Start/Restart count</code></td>
<td class="cellalignment5812" headers="r3c1-t12 r1c2-t12">Number of times this <code>TRANSMITTER</code> thread was started or restarted by the replication agent due to a temporary error, such as operation timeout, network failure, and so on.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t12" headers="r1c1-t12"><code>Send LSN</code></td>
<td class="cellalignment5812" headers="r4c1-t12 r1c2-t12">The last LSN transmitted to this peer. See <a href="#CFAHCFEC">&#34;Show replicated log records&#34;</a> for more information.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t12" headers="r1c1-t12"><code>Transactions sent</code></td>
<td class="cellalignment5812" headers="r5c1-t12 r1c2-t12">Total number of transactions sent to the subscriber.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r6c1-t12" headers="r1c1-t12"><code>Total packets sent</code></td>
<td class="cellalignment5812" headers="r6c1-t12 r1c2-t12">Total number of packets sent to the subscriber (including tick packets).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r7c1-t12" headers="r1c1-t12"><code>Tick packets sent</code></td>
<td class="cellalignment5812" headers="r7c1-t12 r1c2-t12">Total number of tick packets sent. Tick packets are used to maintain a &#34;heartbeat&#34; between the master and subscriber. You can use this value to determine how many of the &#39;Total packets sent&#39; packets are not related to replicated data.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r8c1-t12" headers="r1c1-t12"><code>MIN sent packet size</code></td>
<td class="cellalignment5812" headers="r8c1-t12 r1c2-t12">Size of the smallest packet sent to the subscriber.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r9c1-t12" headers="r1c1-t12"><code>MAX sent packet size</code></td>
<td class="cellalignment5812" headers="r9c1-t12 r1c2-t12">Size of the largest packet sent to the subscriber.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r10c1-t12" headers="r1c1-t12"><code>AVG sent packet size</code></td>
<td class="cellalignment5812" headers="r10c1-t12 r1c2-t12">Average size of the packets sent to the subscriber.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r11c1-t12" headers="r1c1-t12"><code>Last packet sent at</code></td>
<td class="cellalignment5812" headers="r11c1-t12 r1c2-t12">Time of day last packet was sent (24-hour clock time).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r12c1-t12" headers="r1c1-t12"><code>Total packets received</code></td>
<td class="cellalignment5812" headers="r12c1-t12 r1c2-t12">Total packets received from the subscriber (tick packets and acknowledgement data).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r13c1-t12" headers="r1c1-t12"><code>MIN rcvd packet size</code></td>
<td class="cellalignment5812" headers="r13c1-t12 r1c2-t12">Size of the smallest packet received.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r14c1-t12" headers="r1c1-t12"><code>MAX rcvd packet size</code></td>
<td class="cellalignment5812" headers="r14c1-t12 r1c2-t12">Size of the largest packet received.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r15c1-t12" headers="r1c1-t12"><code>AVG rcvd packet size</code></td>
<td class="cellalignment5812" headers="r15c1-t12 r1c2-t12">Average size of the packets received.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r16c1-t12" headers="r1c1-t12"><code>Last packet rcvd at</code></td>
<td class="cellalignment5812" headers="r16c1-t12 r1c2-t12">Time of day last packet was received (24-hour clock time).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r17c1-t12" headers="r1c1-t12"><code>Earlier errors (max 5)</code></td>
<td class="cellalignment5812" headers="r17c1-t12 r1c2-t12">Last five errors generated by this thread.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" -->
<a id="CFAFCIAI"></a>
<div id="TTREP477" class="sect2">
<h3 class="sect2">RECEIVER thread status fields</h3>
<p>The following fields are output for each <code>RECEIVER</code> thread used by a subscriber replication agent to receive transaction updates from a master. A subscriber that is updated by multiple masters has multiple <code>RECEIVER</code> threads.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The counts in the <code>RECEIVER</code> output begin to accumulate when the replication agent is started. These counters are reset to 0 only when the replication agent is started or restarted.</div>
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="Receiver threads" summary="This table contains descriptions of fields in output for each RECEIVER thread." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t14">RECEIVER Thread</th>
<th class="cellalignment5811" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t14" headers="r1c1-t14"><code>For</code></td>
<td class="cellalignment5812" headers="r2c1-t14 r1c2-t14">Name of the master database that is sending replicated data from this database.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t14" headers="r1c1-t14"><code>Start/Restart count</code></td>
<td class="cellalignment5812" headers="r3c1-t14 r1c2-t14">Number of times this <code>RECEIVER</code> thread was started or restarted by the replication agent due to a temporary error, such as operation timeout, network failure, and so on.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t14" headers="r1c1-t14"><code>Transactions received</code></td>
<td class="cellalignment5812" headers="r4c1-t14 r1c2-t14">Total number of transactions received from the master.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t14" headers="r1c1-t14"><code>Total packets sent</code></td>
<td class="cellalignment5812" headers="r5c1-t14 r1c2-t14">Total number of packets sent to the master (tick packets and acknowledgement data).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r6c1-t14" headers="r1c1-t14"><code>Tick packets sent</code></td>
<td class="cellalignment5812" headers="r6c1-t14 r1c2-t14">Total number of tick packets sent to the master. Tick packets are used to maintain a &#34;heartbeat&#34; between the master and subscriber. You can use this value to determine how many of the &#39;Total packets sent&#39; packets are not related to acknowledgement data.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r7c1-t14" headers="r1c1-t14"><code>MIN sent packet size</code></td>
<td class="cellalignment5812" headers="r7c1-t14 r1c2-t14">Size of the smallest packet sent to the master.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r8c1-t14" headers="r1c1-t14"><code>MAX sent packet size</code></td>
<td class="cellalignment5812" headers="r8c1-t14 r1c2-t14">Size of the largest packet sent to the master.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r9c1-t14" headers="r1c1-t14"><code>AVG sent packet size</code></td>
<td class="cellalignment5812" headers="r9c1-t14 r1c2-t14">Average size of the packets sent to the master.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r10c1-t14" headers="r1c1-t14"><code>Last packet sent at</code></td>
<td class="cellalignment5812" headers="r10c1-t14 r1c2-t14">Time of day last packet was sent to the master (24-hour clock time).</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r11c1-t14" headers="r1c1-t14"><code>Total packets received</code></td>
<td class="cellalignment5812" headers="r11c1-t14 r1c2-t14">Total packets of acknowledgement data received from the master.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r12c1-t14" headers="r1c1-t14"><code>MIN rcvd packet size</code></td>
<td class="cellalignment5812" headers="r12c1-t14 r1c2-t14">Size of the smallest packet received.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r13c1-t14" headers="r1c1-t14"><code>MAX rcvd packet size</code></td>
<td class="cellalignment5812" headers="r13c1-t14 r1c2-t14">Size of the largest packet received.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r14c1-t14" headers="r1c1-t14"><code>AVG rcvd packet size</code></td>
<td class="cellalignment5812" headers="r14c1-t14 r1c2-t14">Average size of the packets received.</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r15c1-t14" headers="r1c1-t14"><code>Last packet rcvd at</code></td>
<td class="cellalignment5812" headers="r15c1-t14 r1c2-t14">Time of day last packet was received (24-hour clock time).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFAJDGFG"></a>
<div id="TTREP478" class="sect1">
<h2 class="sect1">Check the status of return service transactions</h2>
<p>The following sections describe how to determine status of a return service or to find out what the last returned status was:</p>
<ul>
<li>
<p><a href="#CFAGGCFH">Determine if return service is disabled</a></p>
</li>
<li>
<p><a href="#CFABGIJA">Check last returned status for a return service</a></p>
</li>
</ul>
<a id="CFAGGCFH"></a>
<div id="TTREP776" class="sect2">
<h3 class="sect2">Determine if return service is disabled</h3>
<p>You can determine whether the return service for a particular subscriber has been disabled by the <code>DISABLE RETURN</code> failure policy by calling the <a id="sthref787"></a><code>ttRepSyncSubscriberStatus</code> built-in procedure or by means of the SNMP trap, <code>ttRepReturnTransitionTrap</code>. The <code>ttRepSyncSubscriberStatus</code> built-in procedure returns a value of &#39;1&#39; to indicate the return service has been disabled for the subscriber, or a value of &#39;0&#39; to indicate that the return service is still enabled.</p>
<div id="TTREP479" class="example">
<p class="titleinexample"><a id="sthref788"></a>Example 12-13 Using ttRepSyncSubscriberStatus to obtain return receipt status</p>
<p>To use <code>ttRepSyncSubscriberStatus</code> to obtain the return receipt status of the <code>subscriberds</code> database with respect to its master database, <code>masterDSN</code>, enter:</p>
<pre>&gt; ttIsql masterDSN

Command&gt; CALL ttRepSyncSubscriberStatus (&#39;subscriberds&#39;);
&lt; 0 &gt;
1 row found.
</pre>
<p>This result indicates that the return service is still enabled.</p>
<p>For information on how to enable or disable the return service, see <a href="attrib.htm#BGBHEHFB">&#34;Managing return service timeout errors and replication state changes&#34;</a>.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CFABGIJA"></a>
<div id="TTREP777" class="sect2">
<h3 class="sect2">Check last returned status for a return service</h3>
<p>You can check the status of the last return receipt or return twosafe transaction executed on the connection handle by calling the <a id="sthref789"></a><code>ttRepXactTokenGet</code> and <a id="sthref790"></a><code>ttRepXactStatus</code> built-in procedures.</p>
<p>First, call the <code>ttRepXactTokenGet</code> built-in procedure to get a unique token for the last return service transaction. If you are using return receipt, the token identifies the last return receipt transaction committed on the master database. If you are using return twosafe, the token identifies the last twosafe transaction on the master that, in the event of a successful commit on the subscriber, is committed by the replication agent on the master. However, in the event of a timeout or other error, the twosafe transaction identified by the token is not committed by the replication agent on the master.</p>
<p>Next, pass the token returned by <code>ttRepXactTokenGet</code> to the <code>ttRepXactStatus</code> built-in procedure to obtain the return service status. The output of the <code>ttRepXactStatus</code> built-in procedure reports which subscriber or subscribers are configured to receive the replicated data and the current status of the transaction (not sent, received, committed) with respect to each subscriber. If the subscriber replication agent encountered a problem applying the transaction to the subscriber database, the <code>ttRepXactStatus</code> built-in procedure also includes the error string. If you are using return twosafe and receive a timeout or other error, you can then decide whether to unconditionally commit or retry the commit. This is described in <a href="attrib.htm#CHDHCDCB">&#34;Using a return service&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code>ttRepXactStatus</code> is called without a token from <code>ttRepXactTokenGet</code>, it returns the status of the most recent transaction on the connection which was committed with the return receipt or return twosafe replication service.</div>
<p>The <code>ttRepXactStatus</code> built-in procedure returns the return service status for each subscriber as a set of rows formatted as:</p>
<pre><span class="italic">subscriberName</span>, <span class="italic">status</span>, <span class="italic">error</span>
</pre>
<div id="TTREP480" class="example">
<p class="titleinexample"><a id="sthref791"></a>Example 12-14 Reporting the status of each subscriber</p>
<p>You can call the <code>ttRepXactTokenGet</code> and <code>ttRepXactStatus</code> built-in procedures in a <code>GetRSXactStatus</code> function to report the status of each subscriber in your replicated system:</p>
<pre>SQLRETURN GetRSXactStatus (HDBC hdbc)
{
  SQLRETURN rc = SQL_SUCCESS;
  HSTMT hstmt = SQL_NULL_HSTMT;
  char xactId [4001] = &#34;&#34;;
  char subscriber [62] = &#34;&#34;;
  char state [3] = &#34;&#34;;

  /* get the last RS xact id executed on this connection */
  SQLAllocStmt (hdbc, &amp;hstmt);
  SQLExecDirect (hstmt, &#34;CALL ttRepXactTokenGet (&#39;R2&#39;)&#34;, SQL_NTS);

  /* bind the xact id result as a null terminated hex string */
  SQLBindCol (hstmt, 1, SQL_C_CHAR, (SQLPOINTER) xactId,
    sizeof (xactId), NULL);

  /* fetch the first and only row */
  rc = SQLFetch (hstmt);

  /* close the cursor */
  SQLFreeStmt (hstmt, SQL_CLOSE);

  if (rc != SQL_ERROR &amp;&amp; rc != SQL_NO_DATA_FOUND)
  {
    /* display the xact id */
    printf (&#34;\nRS Xact ID: 0x%s\n\n&#34;, xactId);

    /* get the status of this xact id for every subscriber */
    SQLBindParameter (hstmt, 1, SQL_PARAM_INPUT, SQL_C_CHAR,
      SQL_VARBINARY, 0, 0,
     (SQLPOINTER) xactId, strlen (xactId), NULL);

    /* execute */
    SQLExecDirect (hstmt, &#34;CALL ttRepXactStatus (?)&#34;, SQL_NTS);

   /* bind the result columns */
   SQLBindCol (hstmt, 1, SQL_C_CHAR, (SQLPOINTER) subscriber,
     sizeof (subscriber), NULL);

   SQLBindCol (hstmt, 2, SQL_C_CHAR, (SQLPOINTER) state,
     sizeof (state), NULL);

   /* fetch the first row */
   rc = SQLFetch (hstmt);

   while (rc != SQL_ERROR &amp;&amp; rc != SQL_NO_DATA_FOUND)
   {
     /* report the status of this subscriber */
     printf (&#34;\n\nSubscriber: %s&#34;, subscriber);
     printf (&#34;\nState: %s&#34;, state);

     /* are there more rows to fetch? */
     rc = SQLFetch (hstmt);
     }
  }

  /* close the statement */
  SQLFreeStmt (hstmt, SQL_DROP);

  return rc;
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CFAFGJJA"></a>
<div id="TTREP758" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Analyze outstanding transactions in the replication log<a id="sthref792"></a><a id="sthref793"></a><a id="sthref794"></a></h2>
<p>You can use the <code>-logAnalyze</code> command in the <code>ttXactLog</code> utility to analyze the replication logs and determine the following:</p>
<ul>
<li>
<p>Measure how much is left to replicate from a master to any subscribers at the current time. When replication seems to be taking longer than expected, you can determine how many transactions are left to replicate or if replication is processing a long-running transaction.</p>
</li>
<li>
<p>Measure if the current configuration distributes the load appropriately across all manual and automatic tracks for parallel replication.</p>
</li>
</ul>
<p>Execute the log analyze command against a particular data store to generate the following information:</p>
<ul>
<li>
<p>The number of transactions that are waiting to be replicated. For each transaction that has not been replicated, the information collected includes the number of operations for each transaction and the total size of each transaction (including partial rollbacks).</p>
</li>
<li>
<p>The amount of operations left in each transaction including its specific type (either DDL or DML) and how many of each statement type are in each transaction. The tool also generates the total size of every operation left to replicate.</p>
</li>
<li>
<p>Retrieves information on how the workload is split across tracks. When you use manual parallel replication, you can use <code>-logAnalyze</code> to monitor whether the application is distributing work evenly across the replication tracks.</p>
</li>
<li>
<p>Returns the largest transaction left to replicate.</p>
</li>
<li>
<p>Returns the start and end LSN. The start LSN is the starting point in the transaction log where the transmitter starts reading; the end LSN is the end of the transaction log.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the transaction log analysis output, transactions are shown in commit order.</div>
<p>You can specify how much information is displayed with the verbose command. For example, when you set verbose to 1, the following is displayed:</p>
<pre>$ ttXactLog -v1 -logAnalyze rep1
Summary:
Total transactions left to replicate: 4
Total rows left to replicate: 4
Size of transactions left to replicate: 1.86 KiB
Size of rows left to replicate: 488.00 B
Total inserts remaining: 4
Total partial rollbacks: 5
Total rollbacks: 3

Start LSN = 0.3793736
End LSN = 0.18769920 
</pre>
<p>If a subscriber is specified, then the summary displays only for that particular subscriber. However, by default, the summary is displayed for all subscribers.</p>
<p>When you specify verbose to 2, then the information includes both a summary of each parallel track in addition to the overall summary information.</p>
<pre>$ ttXactLog -v2 -logAnalyze rep1

Track analysis for track number: 0
Transactions left to replicate: 2
Rows left to replicate: 2
Size of transactions left to replicate: 880.00 B
Size of rows left to replicate: 312.00 B
Total inserts remaining: 1
Total partial rollbacks: 4

Track analysis for track number: 1
Transactions left to replicate: 2
Rows left to replicate: 2
Size of transactions left to replicate: 1.14 KiB
Size of rows left to replicate: 244.00 B
Total inserts remaining: 2
Total partial rollbacks: 1
Total rollbacks: 3

Summary:
Total transactions left to replicate: 4
Total rows left to replicate: 4
Size of transactions left to replicate: 2.00 KiB
Size of rows left to replicate: 556.00 B
Total inserts remaining: 3
Total partial rollbacks: 5
Total rollbacks: 3

Start LSN = 0.3793736
End LSN = 0.20506624
</pre>
<p>When you provide the verbose level 3, the information generated includes a transaction analysis that includes a description of the contents of every transaction in every track:</p>
<pre>$ ttXactLog -v3 -logAnalyze rep1

Transaction id:    3.10
Track for this xid: 1
Logmarker before this xid: 275
Rows left to replicate: 1
Transaction size: 800.00 B
Size of rows left: 122.00 B
Total inserts remaining: 1
 
Transaction id:    2.1
Track for this xid: 0
Logmarker before this xid: 276
Rows left to replicate: 1
Transaction size: 368.00 B
Size of rows left: 122.00 B
Total inserts remaining: 1
 
Transaction id:    2.19
Track for this xid: 1
Logmarker before this xid: 823
Rows left to replicate: 1
Transaction size: 368.00 B
Size of rows left: 122.00 B
Total inserts remaining: 1
 
Transaction id:    3.2
Track for this xid: 0
Logmarker before this xid: 842
Rows left to replicate: 1
Transaction size: 368.00 B
Size of rows left: 122.00 B
Total inserts remaining: 1
 
Track analysis for track number: 0
Transactions left to replicate: 2
Rows left to replicate: 2
Size of transactions left to replicate: 736.00 B
Size of rows left to replicate: 244.00 B
Total inserts remaining: 2
Total partial rollbacks: 4
 
Track analysis for track number: 1
Transactions left to replicate: 2
Rows left to replicate: 2
Size of transactions left to replicate: 1.14 KiB
Size of rows left to replicate: 244.00 B
Total inserts remaining: 2
Total partial rollbacks: 1
Total rollbacks: 3
 
Summary:
Total transactions left to replicate: 4
Total rows left to replicate: 4
Size of transactions left to replicate: 1.86 KiB
Size of rows left to replicate: 488.00 B
Total inserts remaining: 4
Total partial rollbacks: 5
Total rollbacks: 3
 
Start LSN = 0.3793736
End LSN = 0.21444608
</pre>
<p>When you specify the XID, the tool displays verbose level 3 output where the transaction analysis is based on the XID. If an XID is used by two separate transactions, the report shows with the <code>LogMarker</code> entry the nearest point in the transaction log just before the start of each transaction.</p>
<pre>$ ttXactLog -logAnalyze -xid 2.19 rep1;

Transaction id:    2.19
Track for this xid: 1
Logmarker before this xid: 823
Rows left to replicate: 1
Transaction size: 368.00 B
Size of rows left: 122.00 B
Total inserts remaining: 1
 
Track analysis for track number: 0
Transactions left to replicate: 0
Rows left to replicate: 0
Size of transactions left to replicate: 0.00 B
Size of rows left to replicate: 0.00 B
 
Track analysis for track number: 1
Transactions left to replicate: 1
Rows left to replicate: 1
Size of transactions left to replicate: 368.00 B
Size of rows left to replicate: 122.00 B
Total inserts remaining: 1
 
Summary:
Total transactions left to replicate: 1
Total rows left to replicate: 1
Size of transactions left to replicate: 368.00 B
Size of rows left to replicate: 122.00 B
Total inserts remaining: 1
 
Start LSN = 0.3793736
End LSN = 0.20514816 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more details, see <a class="olink TTREF377" href="../TTREF/util.htm#TTREF377">&#34;ttXactLog&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5803">
<tr>
<td class="cellalignment5812">
<table class="cellalignment5808">
<tr>
<td class="cellalignment5807"><a href="setup.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5807"><a href="conflict.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5814">
<table class="cellalignment5806">
<tr>
<td class="cellalignment5807"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5807"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5807"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5807"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5807"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5807"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>