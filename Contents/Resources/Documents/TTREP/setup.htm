<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114056"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Setting%20Up%20a%20Replicated%20System"></a><title>Setting Up a Replicated System</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2014-09-29T11:11:56Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Replication Guide"/>
<meta name="dcterms.identifier" content="E21635-11"/>
<meta name="dcterms.isVersionOf" content="TTREP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="alter.htm" title="Previous" type="text/html"/>
<link rel="Next" href="monitor.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21635-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/21</span> <!-- End Header -->
<div id="TTREP400" class="chapter"><a id="BABJJEIH"></a>
<h1 class="chapter"><span class="secnum">11</span> Setting Up a Replicated System</h1>
<p>This chapter describes how to set up and start replication.</p>
<ul>
<li>
<p><a href="#CEGJJDEG">Setting up the replication environment</a></p>
</li>
<li>
<p><a href="#BABFEEFF">Duplicating a master database to a subscriber</a></p>
</li>
<li>
<p><a href="#CHDBACGE">Configuring a large number of subscribers</a></p>
</li>
<li>
<p><a href="#CHDCFBCH">Replicating databases across releases</a></p>
</li>
<li>
<p><a href="#CEGIIJEB">Starting and stopping the replication agents</a></p>
</li>
<li>
<p><a href="#CEGFHBDD">Setting the replication state of subscribers</a></p>
</li>
</ul>
<a id="CEGJJDEG"></a>
<div id="TTREP410" class="sect1">
<h2 class="sect1">Setting up the replication environment</h2>
<p>The following sections describe how to set up your replication environment:</p>
<ul>
<li>
<p><a href="#CEGDIDIA">Establishing the databases</a></p>
</li>
<li>
<p><a href="#CHDGICJC">Connection attributes for replicated databases</a></p>
</li>
<li>
<p><a href="#CHDGDCFF">Configuring parallel replication</a></p>
</li>
<li>
<p><a href="#CEGHFHJH">Managing the transaction log on a replicated database</a></p>
</li>
</ul>
<a id="CEGDIDIA"></a>
<div id="TTREP411" class="sect2">
<h3 class="sect2"><a id="sthref676"></a>Establishing the databases<a id="sthref677"></a></h3>
<p>You can replicate one or more tables on any existing database. If the database you want to replicate does not yet exist, you must first create one, as described in <a class="olink TTOPR120" href="../TTOPR/using.htm#TTOPR120">&#34;Managing TimesTen Databases&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<p>After you have identified or created the master database, create a DSN definition for the subscriber database on the target host. Set the connection attributes for the master and subscriber databases as described in <a href="#CHDGICJC">&#34;Connection attributes for replicated databases&#34;</a>.</p>
<p>After you have defined the DSN for the subscriber, you can populate the subscriber database with the tables to be replicated from the master in one of two ways:</p>
<ul>
<li>
<p>Connect to the database and use SQL statements to create new tables in the subscriber database that match those to be replicated from the master.</p>
</li>
<li>
<p>Use the <code>ttRepAdmin</code> <code>-duplicate</code> utility to copy the entire contents of the master database to the subscriber. See <a href="#BABFEEFF">&#34;Duplicating a master database to a subscriber&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDGICJC"></a>
<div id="TTREP412" class="sect2">
<h3 class="sect2">Connection attributes<a id="sthref678"></a><a id="sthref679"></a> for replicated databases</h3>
<p>Databases that replicate to each other must have the same <code><a id="sthref680"></a>DatabaseCharacterSet</code> data store attribute. TimesTen does not perform any character set conversion between replicated databases.</p>
<p>If you want to configure parallel replication, see <a href="#CHDGDCFF">&#34;Configuring parallel replication&#34;</a> for information about setting the <code><a id="sthref681"></a><a id="sthref682"></a><a id="sthref683"></a>ReplicationParallelism</code> and <code>ReplicationApplyOrdering</code> data store attributes.</p>
<p>See <a href="#CEGGAFHB">&#34;Setting connection attributes for logging&#34;</a> for recommendations for managing the replication log files.</p>
<p>It is possible to replicate between databases with different settings for the <code><a id="sthref684"></a>TypeMode</code> data store attribute. However, you must make sure that the underlying data type for each replicated column is the same on each node. See <a class="olink TTREF134" href="../TTREF/attribute.htm#TTREF134">&#34;TypeMode&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for more information.</p>
<p>In an active standby pair, use the <a id="sthref685"></a><code>ReceiverThreads</code> first connection attribute to increase the number of threads that apply changes from the active database to the standby database from 1 to 2. If you set <code>ReceiverThreads</code> to 2 on the standby, you should also set it to 2 on the active to maintain increased throughput if there is a failover.</p>
<p>You can also set <code>ReceiverThreads</code> to 2 on one or more read-only subscribers in an active standby pair to increase replication throughput from the standby database.</p>
<p>Databases must be hosted on systems that have two or more CPUs to take advantage of setting this attribute to 2.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGDCFF"></a>
<div id="TTREP423" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring <a id="sthref686"></a>parallel replication</h3>
<p>By default, replication is performed with a single thread where the nodes in a replication scheme have one log reader, or transmitter thread, on the source database, and one applier, or receiving thread, on the target database. You can increase your performance by configuring parallel replication, which configures multiple threads for sending updates from the source database to the target database and for applying the updates on the target database. <a id="sthref687"></a>These threads act in parallel to replicate and apply transactional changes to nodes in a replication scheme. By default, parallel replication enforces transactional dependencies and applies changes in commit order; however, you can disable enforcement of the commit order.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you enable <a id="sthref688"></a><a id="sthref689"></a>parallel replication, you cannot execute both DDL and DML statements in the same transaction.</div>
<p>Parallel replication options:</p>
<ul>
<li>
<p>Automatic parallel replication: Parallel replication over multiple threads that automatically enforces transactional dependencies and all changes applied in commit order. This is the default.</p>
</li>
<li>
<p>Automatic parallel replication with disabled commit dependencies: Parallel replication over multiple threads that automatically enforces transactional dependencies, but does not enforce transactions to be committed in the same order on the subscriber database as on the master database.</p>
</li>
<li>
<p>User-defined parallel replication: For applications that use a classic replication scheme, have very predictable transactional dependencies, and do not require that the commit order on the receiver is the same as that on the originating database. You can specify the number of transaction tracks and apply specific transactions to each track. All tracks are read, transmitted and applied in parallel.</p>
</li>
</ul>
<p>These options are configured with the <code>ReplicationApplyOrdering</code> and <code>ReplicationParallelism</code> data store creation attributes, which must be set when the database is created.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All databases within the replication scheme that use parallel replication must be configured identically with the same type of parallel replication and the same number of threads or tracks.
<p>The only time you can have different values for parallel replication attributes is during an upgrade. For details, see <a class="olink TTINS305" href="../TTINS/upgrade.htm#TTINS305">&#34;Upgrades when using parallel replication&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span>.</p>
</div>
<p>The following sections describe the options for parallel replication:</p>
<ul>
<li>
<p><a href="#CHDCBDGI">Configuring automatic parallel replication</a></p>
</li>
<li>
<p><a href="#CHDIDAAG">Configuring automatic parallel replication with disabled commit dependencies</a></p>
</li>
<li>
<p><a href="#CHDEDEJJ">Configuring user-defined parallel replication for classic replication schemes</a></p>
</li>
</ul>
<a id="CHDCBDGI"></a>
<div id="TTREP747" class="sect3">
<h4 class="sect3">Configuring <a id="sthref690"></a>automatic parallel replication</h4>
<p>Automatic parallel replication enables you to configure multiple threads that act in parallel to replicate and apply transactional changes to nodes in either a classic or an active standby pair replication scheme. Automatic parallel replication enforces transactional dependencies and applies changes in commit order.</p>
<p>Enable automatic parallel replication by setting these data store attributes at database creation time:</p>
<ul>
<li>
<p>Set <a id="sthref691"></a><code>ReplicationApplyOrdering</code>=0, which is also the default.</p>
</li>
<li>
<p>Set <code><a id="sthref692"></a>ReplicationParallelism</code> to a number from 2 to 32. The number cannot exceed half the value of <code>LogBufParallelism</code>. This number indicates the number of transmitter threads on the source database and the number of receiver threads on the target database. However, if you are using single-threaded replication, set <code>ReplicationParallelism</code> to 1, which is also the default.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code>ReplicationParallelism</code> is greater than 1, the <code><a id="sthref693"></a>LogBufParallelism</code> first connection attribute must be an integral multiple of <code>ReplicationParallelism</code>.</div>
<p>If the replication scheme is an active standby pair that<a id="sthref694"></a><a id="sthref695"></a><a id="sthref696"></a><a id="sthref697"></a><a id="sthref698"></a> replicates AWT cache groups, the settings for <code>ReplicationApplyOrdering</code>, <code>ReplicationParallelism</code>, and the <code>CacheAWTParallelism</code> data store attributes determine how many threads are used to apply changes in the TimesTen cache tables to the corresponding Oracle database tables. See <a class="olink TTCAC448" href="../TTCAC/define.htm#TTCAC448">&#34;Configuring parallel propagation to the Oracle database tables&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span> for more information.</p>
<p>For more information on these data store attributes, see <a class="olink TTREF133" href="../TTREF/attribute.htm#TTREF133">&#34;ReplicationParallelism&#34;</a>, <a class="olink TTREF750" href="../TTREF/attribute.htm#TTREF750">&#34;ReplicationApplyOrdering&#34;</a>, and <a class="olink TTREF144" href="../TTREF/attribute.htm#TTREF144">&#34;LogBufParallelism&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDIDAAG"></a>
<div id="TTREP835" class="sect3">
<h4 class="sect3">Configuring automatic parallel replication with disabled commit dependencies</h4>
<p>In order to enforce transactional dependencies and ensure that changes are applied in commit order, automatic parallel replication normally tracks:</p>
<ul>
<li>
<p>Begin dependencies: Operations that force one transaction to execute before another, such as an insert of a row followed by a delete of that same row.</p>
</li>
<li>
<p>Commit dependencies: Order in which transactions are committed so that they are committed on a subscriber in the same order as on the master database.</p>
</li>
</ul>
<p>While parallel replication improves performance by utilizing multiple threads, you can further increase throughput performance when using automatic parallel replication if the transactions do not require enforcement of commit dependencies. That is, if your application has predictable transactional dependencies and does not require the commit order on the target database be the same as the order on the source database, you can relax the enforcement of the commit dependencies and still maintain transactional correctness. For example, if separate transactions are working on separate tables, you do not need to enforce commit dependencies.</p>
<p>By relaxing the requirement for tracking commit dependencies, you can improve the performance for automatic parallel replication. When you do not enforce commit dependencies, all non-DDL transactions may commit on the subscribers in a different order than how they were originally executed on the master. Begin dependencies are always enforced to prevent apply order anomalies.</p>
<p>You can only disable commit dependencies for automatic parallel replication for an active standby pair that uses asynchronous replication and does not contain cache groups. You can set the following data store attributes at database creation time:</p>
<ul>
<li>
<p>Set the <code>ReplicationApplyOrdering=2</code> before you create the TimesTen database.</p>
</li>
<li>
<p>Set <code><a id="sthref699"></a>ReplicationParallelism</code> to a number from 2 to 32. The number cannot exceed half the value of <code>LogBufParallelism</code>. This number indicates the number of transmitter threads on the source database and the number of receiver threads on the target database. However, if you are using single-threaded replication, set <code>ReplicationParallelism</code> to 1, which is also the default.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code>ReplicationParallelism</code> is greater than 1, the <code><a id="sthref700"></a>LogBufParallelism</code> first connection attribute must be an integral multiple of <code>ReplicationParallelism</code>.</div>
<p>However, while your performance improves, this option requires the use of additional space in the temporary region of 16 MB plus an additional 16 MB for each configured replication track (<code>ReplicationParallelism</code> connection attribute setting). For example, if the <code>ReplicationParallism</code> connection attribute is set to 10, then this feature requires 16 MB + 160 MB = 176 MB of additional temporary region space.</p>
<p>When you use automatic parallel replication and disable commit dependencies, some of the tracks may move ahead of the others. This is known as a drift between the parallel replication tracks. You can limit the amount of drift between the replication tracks by setting the <code>ParReplMaxDrift</code> configuration parameter within the <code>ttDbConfig</code> built-in procedure.</p>
<pre>Call ttDbConfig(&#34;ParReplMaxDrift&#34;, &#34;30&#34;);
</pre>
<p>The example sets the allowed drift to 30 seconds between the replication tracks, after which TimesTen causes all replication tracks to catch up to each other. For more details, see <a class="olink TTREF795" href="../TTREF/proced.htm#TTREF795">&#34;ttDBConfig&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<a id="CHDEAAGE"></a>
<div id="TTREP837" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Specifying replication tracks within an automatic parallel replication environment</h5>
<p>In general, automatic parallel replication decides over which thread (track) to replicate each transaction from the master to the subscriber. Thus, you do not have to manually decide how to divide work across different tracks.</p>
<p>However, with dependent transactions, you may achieve better performance by manually assigning them to the same track. Thus, the application has the option to specify which track a transaction belongs to when the transaction starts on the source database with either the <code>ReplicationTrack</code> connection attribute or the <code>ALTER SESSION SET REPLICATION_TRACK</code> statement. After which, all transactions for this connection use this track. The transactions for this track are applied in the order in which they are received on the target database, but commit order is not maintained for transactions across the different tracks. If you decide to specify the track for a transaction, then make sure that you distribute the workload evenly across the tracks.</p>
<p>Updates that should be applied in order on the receiving side should use the same track. You can spread operations on a table across separate tracks based on key values. For example, if you have a telecom billing application, you can use hash of the account number to set the track and send all transactions for each account on a separate track.</p>
<p>TimesTen still computes and enforces dependencies to make sure that dependent transactions are applied in the correct order on the receiving side.</p>
<p>The application <a id="sthref701"></a>assigns transactions to tracks by one of these methods:</p>
<ul>
<li>
<p>Set the <code>ReplicationTrack</code> general connection attribute to a nonzero number. All transactions issued by the connection are assigned to this track. The value can be any number. TimesTen maps the <code>ReplicationTrack</code> number for this connection to one of the available parallel replication threads. Thus, the application can use any number to group transactions that should be applied in order. See <a class="olink TTREF752" href="../TTREF/attribute.htm#TTREF752">&#34;ReplicationTrack&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</li>
<li>
<p>Use the <code>ALTER SESSION</code> SQL statement to set the replication track number for the current connection. See <a class="olink TTSQL285" href="../TTSQL/state.htm#TTSQL285">&#34;ALTER SESSION&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span>.</p>
</li>
<li>
<p>Use the <code>TT_REPLICATION_TRACK</code> ODBC connection option for the <code>SQLSetConnectOption</code> ODBC function. See <a class="olink TTCDV502" href="../TTCDV/writing_app.htm#TTCDV502">&#34;Features for use with replication&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span></p>
</li>
<li>
<p>Use the <code>setReplicationTrack()</code> method of the <code>TimesTenConnection</code> JDBC class. See <a class="olink TTJDV321" href="../TTJDV/writing_app.htm#TTJDV321">&#34;Features for use with replication&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Java Developer&#39;s Guide</span></p>
</li>
</ul>
<p>Use the <code>ttConfiguration</code> built-in procedure to return the replication track number for the current connection. Use the <code>ttLogHolds</code> built-in procedure to verify that multiple tracks are being used.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDEDEJJ"></a>
<div id="TTREP748" class="sect3">
<h4 class="sect3">Configuring user-defined parallel replication for classic replication schemes</h4>
<p>If your application uses a classic replication scheme, has predictable transactional dependencies, and does not require the commit order on the target database be the same as the order on the source database, then you can increase replication throughput by using user-defined parallel replication to manually divide work across different tracks.</p>
<p>User-defined parallel replication configures multiple threads for sending updates from the source database to the target database and for applying the updates on the target database. The application always assigns transactions to tracks. The application specifies which track a transaction belongs to when the transaction starts on the source database. The transactions in each track are applied in the order in which they are received on the target database, but commit order is not maintained for transactions across the different tracks.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Use caution in assigning tracks to transactions that affect tables with foreign key relationships. If transactions on related tables are assigned to different tracks, one of the transactions can be lost because the transactions may be applied out of commit order.</div>
<p>In general, transactions that modify the same table should be assigned to the same replication track. In addition, updates that should be applied in order on the receiving side should use the same track. However, if all transactions insert to a particular table, they can be assigned to different tracks to increase replication throughput. You can split the workload for a table across multiple tracks with a key that ties a row to the same track.</p>
<p>User-defined parallel replication is used only for classic replication schemes.</p>
<p>Enable user-defined parallel replication by setting these data store attributes at database creation time:</p>
<ul>
<li>
<p>Set <code>ReplicationApplyOrdering</code> to 1.</p>
</li>
<li>
<p>Set <code>ReplicationParallelism</code> to a number from 1 to 64. This number indicates the number of transmitter threads on the source database and the number of receiver threads on the target database. For single threaded replication, set to 1 (the default). To use parallel replication, set to a number from 2 to 64.</p>
</li>
</ul>
<p>In addition, the application needs to<a id="sthref702"></a> assign transactions to tracks with the same method as described in <a href="#CHDEAAGE">&#34;Specifying replication tracks within an automatic parallel replication environment&#34;</a>. The only difference is that a user-defined parallel replication scheme always specifies the track to use for the transactions of the connection.</p>
<div id="TTREP670" class="sect4"><a id="sthref703"></a>
<h5 class="sect4">Restrictions on user-defined parallel replication</h5>
<ul>
<li>
<p>Do not configure user-defined parallel replication for tables that have an aging policy defined.</p>
</li>
<li>
<p>Databases configured for user-defined parallel replication cannot contain cache groups.</p>
</li>
<li>
<p>A database cannot be defined as a propagator when user-defined parallel replication is configured.</p>
</li>
<li>
<p>User-defined parallel replication is not supported for use within an active standby pair replication scheme.</p>
</li>
<li>
<p>User-defined parallel replication is not supported for synchronous replication, including databases with the <code>RETURN RECEIPT</code> and <code>RETURN TWOSAFE</code> attributes.</p>
</li>
<li>
<p>Cross-release replication and migration from a database that does not have user-defined parallel replication enabled to a database that does have user-defined parallel replication enabled is not supported from release 11.2.1.6.0 until 11.2.1.8.0. It is supported from releases earlier than 11.2.1.6.0 and from 11.2.1.8.0 and later. Users of releases from 11.2.1.6.0 to 11.2.1.8.0 can perform an upgrade by first applying an in-place patch release upgrade to 11.2.1.8.0. For details, see <a class="olink TTINS305" href="../TTINS/upgrade.htm#TTINS305">&#34;Upgrades when using parallel replication&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span>.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CEGHFHJH"></a>
<div id="TTREP417" class="sect2">
<h3 class="sect2">Managing the transaction log on a replicated database<a id="sthref704"></a><a id="sthref705"></a></h3>
<p>This section includes these topics:</p>
<ul>
<li>
<p><a href="#CEGFGCIA">About log buffer flushing</a></p>
</li>
<li>
<p><a href="#CEGJFFJC">About transaction log growth on a master database</a></p>
</li>
<li>
<p><a href="#CEGGAFHB">Setting connection attributes for logging</a></p>
</li>
</ul>
<a id="CEGFGCIA"></a>
<div id="TTREP418" class="sect3">
<h4 class="sect3">About log buffer flushing<a id="sthref706"></a></h4>
<p>A dedicated subdaemon thread writes the contents of the log buffer to disk periodically. These writes may be synchronous or buffered. The subdaemon thread ensures that the system I/O buffer never fills up with more transaction log data than the value of the <code>LogFileSize</code> first connection attribute without being synchronized to the log buffer.</p>
<p>If the database is configured with <code>LogFlushMethod=2</code>, then all writes to the disk are synchronous writes and the data is durably written to disk before the write call returns. If the database is configured with <code>LogFlushMethod=1</code>, then the writes are buffered unless there is a specific request from an application for synchronous writes.</p>
<p>In addition to the periodic writes, an application can also trigger the subdaemon thread to write the buffer contents to disk. The following are cases where the application triggers a synchronous write to the disk:</p>
<ul>
<li>
<p>When a transaction that requested a durable commit is committed. A transaction can request a durable commit by calling the <code>ttDurableCommit</code> built-in procedure or by having the <code>DurableCommits</code> connection attribute set to 1.</p>
</li>
<li>
<p>When the replication agent sends a batch of transactions to a subscriber and the master has been configured for replication with the <code>TRANSMIT DURABLE</code> attribute (the default).</p>
</li>
<li>
<p>When the replication agent periodically executes a durable commit, whether the master database is configured with <code>TRANSMIT DURABLE</code> or not.</p>
</li>
</ul>
<p>Transactions are also written to disk durably when durable commits are configured as part of the return service failure policies and a failure has occurred.</p>
<p>The size of the log buffer has no influence on the ability of TimesTen to write data to disk under any of the circumstances listed above.</p>
</div>
<!-- class="sect3" -->
<a id="CEGJFFJC"></a>
<div id="TTREP419" class="sect3">
<h4 class="sect3">About transaction log growth on a master database</h4>
<p>In databases that do not use replication, Transaction Log API (XLA), cache groups or incremental backup, unneeded records in the log buffer and unneeded transaction log files are purged each time a checkpoint is initiated, either by the automatic background checkpointing thread or by an application&#39;s call to the <a id="sthref707"></a><code>ttCkpt</code> or <a id="sthref708"></a><code>ttCkptBlocking</code> built-in procedures. In a replicated database, transactions remain in the log buffer and transaction log files until the master replication agent confirms they have been fully processed by the subscriber. Only then can the master consider purging them from the log buffer and transaction log files.</p>
<p>A master database transaction log can grow much larger than it would on an unreplicated database if there are changes to its subscriber state. When the subscriber is in the <code>start</code> state, the master can purge logged data after it receives confirmation that the information has been received by the subscriber. However, if a subscriber becomes unavailable or is in the <code>pause</code> state, the log on the master database cannot be flushed and the space used for logging can be exhausted. When the log space is exhausted, subsequent updates on the master database are aborted. Use the <code>ttLogHolds</code> built-in procedure to get information about replication log holds.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more information about transaction log growth, see <a class="olink TTOPR711" href="../TTOPR/trans.htm#TTOPR711">&#34;Monitoring accumulation of transaction log files&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>. For more details on the <code>ttLogHolds</code> built-in procedure, see <a href="monitor.htm#CFAIEAII">&#34;Monitor replication with the ttLogHolds built-in procedure&#34;</a> or &#34;<a class="olink TTREF261" href="../TTREF/proced.htm#TTREF261">ttLogHolds</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
</div>
<!-- class="sect3" -->
<a id="CEGGAFHB"></a>
<div id="TTREP421" class="sect3">
<h4 class="sect3">Setting connection attributes for logging<a id="sthref709"></a><a id="sthref710"></a></h4>
<p><a id="sthref711"></a><code>LogBufMB</code> specifies the maximum size of the in-memory log buffer in megabytes. This buffer is flushed to a transaction log file on the disk when it becomes full. The minimum size for <code>LogBufMB</code> is 8 times the value of <code>LogBufParallelism</code>.</p>
<p>You need to establish enough disk space for the transaction log files. There are two settings that control the amount of disk space used by the log:</p>
<ul>
<li>
<p>The <a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a><code>LogFileSize</code> setting in the DSN specifies the maximum size of a transaction log file. If logging requirements exceed this value, additional transaction log files with the same maximum size are created. For best performance, set <code>LogBufMB</code> and <code>LogFileSize</code> to their maximum values.</p>
</li>
<li>
<p><a id="sthref715"></a><a id="sthref716"></a><a id="sthref717"></a>The <span class="italic">log failure threshold</span> setting specifies the maximum number of transaction log files allowed to accumulate before the master assumes a subscriber has failed. The threshold value is the number of transaction log files between the most recently written to transaction log file and the earliest transaction log file being held for the subscriber. For example, if the last record successfully received by all subscribers was in Log File 1 and the last log record written to disk is at the beginning of Log File 4, then replication is at least 2 transaction log files behind (the contents of Log Files 2 and 3). If the threshold value is 2, then the master sets the subscriber to the <code>failed</code> state after detecting the threshold value had been exceeded. This may take up to 10 seconds. See <a href="attrib.htm#CHDBACFH">&#34;Setting the transaction log failure threshold&#34;</a> for more information.</p>
</li>
</ul>
<p>Because transactions are logged to disk, you can use bookmarks to detect the log record identifiers of the update records that have been replicated to subscribers and those that have been written to disk. To view the location of the <a id="sthref718"></a><a id="sthref719"></a>bookmarks for the subscribers associated with <code>masterDSN</code>, use the <code>ttBookmark</code> built-in procedure, as described in <a href="monitor.htm#CFAHCFEC">&#34;Show replicated log records&#34;</a>.</p>
<p>If a subscriber goes down and then comes back up before the threshold is reached, then replication automatically &#34;catches up&#34; as the committed transactions in the transaction log files following the bookmark are automatically transmitted. However, if the threshold is exceeded, the master sets the subscriber to the <code>failed</code> state. A failed subscriber must use <code>ttRepAdmin</code> <code>-duplicate</code> to copy the master database and start over, as described in <a href="failure.htm#CFHGEGCJ">Chapter 15, &#34;Managing Database Failover and Recovery&#34;</a>.</p>
<p>See <a class="olink TTREF" href="../TTREF/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database Reference</span></a> for more information about TimesTen connection attributes, built-in procedures and utilities.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFEEFF"></a>
<div id="TTREP414" class="sect1">
<h2 class="sect1">Duplicating a master database to a subscriber<a id="sthref720"></a><a id="sthref721"></a><a id="sthref722"></a><a id="sthref723"></a></h2>
<p>The simplest method for populating a subscriber database is to duplicate the contents of the master database. Duplicating a database in this manner is also essential when recovering a failed database, as described in <a href="failure.htm#CFHGEGCJ">Chapter 15, &#34;Managing Database Failover and Recovery&#34;</a>. You can use the <code>ttRepAdmin</code> <code>-duplicate</code> utility or the <code>ttRepDuplicateEx</code> C function to duplicate a database.</p>
<p>To duplicate a database, these conditions must be fulfilled:</p>
<ul>
<li>
<p>The instance administrator performs the duplicate operation.</p>
</li>
<li>
<p>The instance administrator user name must be the same on both instances involved in the duplication.</p>
</li>
<li>
<p>You must provide the user name and password for a user with the <code>ADMIN</code> privilege on the source database.</p>
</li>
<li>
<p>The target DSN cannot include client/server attributes.</p>
</li>
</ul>
<p>To duplicate the contents of a master database to a subscriber database, complete these tasks:</p>
<ol>
<li>
<p>Create or alter a replication scheme to include the new subscriber database and its host. See <a href="design.htm#CACCEDBC">&#34;Defining a classic replication scheme&#34;</a> or <a href="alter.htm#BGBGJHGE">&#34;Creating and adding a subscriber database to a classic replication scheme&#34;</a>.</p>
</li>
<li>
<p>Apply the replication scheme to the master database. See <a href="design.htm#CEGFEEHD">&#34;Applying a classic replication scheme to a database&#34;</a>.</p>
</li>
<li>
<p>Start the replication agent for the master database. See <a href="#CEGIIJEB">&#34;Starting and stopping the replication agents&#34;</a>.</p>
</li>
<li>
<p>On the source database (the master), create a user and grant the <code>ADMIN</code> privilege to the user:</p>
<pre>CREATE USER ttuser IDENTIFIED BY ttuser;
User created.

GRANT admin TO ttuser;
</pre></li>
<li>
<p>Assume the user name of the instance administrator is <code>timesten</code>. Logged in as <code>timesten</code> on the target host (the subscriber), duplicate database <code>masterDSN</code> on <code>host1</code> to <code>subscriber1DSN</code>:</p>
<pre>ttRepAdmin -duplicate -from masterDSN -host host1 subscriber1DSN

Enter internal UID at the remote datastore with ADMIN privileges: ttuser 
Enter password of the internal Uid at the remote datastore:
</pre>
<p>Enter <code>ttuser</code> when prompted for the password of the internal user at the remote database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The host entry can be identified with either the name of the remote host or its TCP/IP address. If you identify hosts using TCP/IP addresses, you must identify the address of the local host (<code>host1</code> in this example) by using the <code>-localhost</code> option.
<p>You can specify the local and remote network interfaces for the source and target hosts by using the <code>-localIP</code> and <code>-remoteIP</code> options of <code>ttRepAdmin -duplicate</code>. If you do not specify one or both network interfaces, TimesTen chooses them.</p>
<p>For details, see <a class="olink TTREF353" href="../TTREF/util.htm#TTREF353">&#34;ttRepAdmin&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</div>
</li>
<li>
<p>Start the replication agent on the subscriber database.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CHDBACGE"></a>
<div id="TTREP422" class="sect1">
<h2 class="sect1">Configuring a large number of subscribers</h2>
<p>A replication scheme can include up to 128 subscribers. A replication scheme with propagator databases can have up to 128 propagators, and each propagator can have up to 128 subscribers. An active standby pair replication scheme can include up to 127 read-only subscribers. If you are planning a replication scheme that includes a large number of subscribers, then ensure the following:</p>
<ul>
<li>
<p>The log buffer size should result in the value of <code>LOG_FS_READS</code> in the <code>SYS.MONITOR</code> table being 0 or close to 0. This ensures that the replication agent does not have to read any log records from disk. If the value of <code>LOG_FS_READS</code> is increasing, then increase the log buffer size.</p>
</li>
<li>
<p>CPU resources are adequate. The replication agent on the master database spawns a thread for every subscriber database. Each thread reads and processes the log independently and needs adequate CPU resources to transmit to the subscriber database.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CHDCFBCH"></a>
<div id="TTREP424" class="sect1">
<h2 class="sect1">Replicating databases across releases<a id="sthref724"></a></h2>
<p>Replication functions across releases only if the database of the more recent version of TimesTen was upgraded using <code>ttMigrate</code> from a database of the older version of TimesTen. A database created in the current version of TimesTen is not guaranteed to replicate correctly with the older version.</p>
<p>For example, replication between a database created in TimesTen release 6.0 and a database created in TimesTen release 11.2.1 is not supported. However, if one database was created in TimesTen release 6.0, and the peer database was created in TimesTen release 6.0 and then upgraded to TimesTen release 11.2.1, replication between them is supported.</p>
<p>See <a class="olink TTINS199" href="../TTINS/upgrade.htm#TTINS199">&#34;TimesTen Upgrades&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span>.</p>
</div>
<!-- class="sect1" -->
<a id="CEGIIJEB"></a>
<div id="TTREP428" class="sect1">
<h2 class="sect1">Starting and stopping the replication <a id="sthref725"></a><a id="sthref726"></a><a id="sthref727"></a><a id="sthref728"></a><a id="sthref729"></a><a id="sthref730"></a><a id="sthref731"></a><a id="sthref732"></a>agents</h2>
<p>After you have defined a replication scheme, you can start the replication agents for each database involved in the replication scheme. You must have the <code>ADMIN</code> privilege to start or stop a replication agent.</p>
<p>You can start and stop a replication agent by using the <code>ttAdmin</code> utility with the <code>-repStart</code> or <code>-repStop</code> option. You can also use the <a id="sthref733"></a><code>ttRepStart</code> and <a id="sthref734"></a><code>ttRepStop</code> built-in procedures to start and stop a replication agent from the <code>ttIsql</code> command line.</p>
<div id="TTREP430" class="example">
<p class="titleinexample"><a id="sthref735"></a>Example 11-1 Starting and stopping the replication agent with ttAdmin<a id="sthref736"></a><a id="sthref737"></a></p>
<p>To start the replication agents for the DSNs named <code>masterDSN</code> and <code>subscriberDSN</code>, enter:</p>
<pre>ttAdmin -repStart masterDSN
ttAdmin -repStart subscriberDSN
</pre>
<p>To stop the replication agents, enter:</p>
<pre><a id="sthref738"></a>ttAdmin -repStop masterDSN
ttAdmin -repStop subscriberDSN
</pre></div>
<!-- class="example" -->
<div id="TTREP431" class="example">
<p class="titleinexample"><a id="sthref739"></a>Example 11-2 Starting and stopping the replication agent from ttIsql</p>
<p>To start and stop the replication agent for the DSN named <code>masterDSN</code>, enter:</p>
<pre>&gt; ttIsql masterDSN
Command&gt; call ttRepStart;
Command&gt; call ttRepStop;
</pre>
<p>You can also use the <code>ttAdmin</code> utility to set the <a id="sthref740"></a><a id="sthref741"></a>replication restart policy. By default the policy is <code>manual</code>, which enables you to start and stop the replication agents as described above. Alternatively, you can set the replication restart policy for a database to <code>always</code> or <code>norestart</code>.</p>
</div>
<!-- class="example" -->
<div class="inftblhruleinformal">
<table class="cellalignment5810" title="Restart policies" summary="This table describes replication restart policies." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t9">Restart Policy</th>
<th class="cellalignment5811" id="r1c2-t9">Start replication agent when the TimesTen daemon starts</th>
<th class="cellalignment5811" id="r1c3-t9">Restart replication agent on errors or invalidation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t9" headers="r1c1-t9"><code>always</code></td>
<td class="cellalignment5812" headers="r2c1-t9 r1c2-t9">Yes</td>
<td class="cellalignment5812" headers="r2c1-t9 r1c3-t9">Yes</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t9" headers="r1c1-t9"><code>manual</code></td>
<td class="cellalignment5812" headers="r3c1-t9 r1c2-t9">No</td>
<td class="cellalignment5812" headers="r3c1-t9 r1c3-t9">Yes</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t9" headers="r1c1-t9"><code>norestart</code></td>
<td class="cellalignment5812" headers="r4c1-t9 r1c2-t9">No</td>
<td class="cellalignment5812" headers="r4c1-t9 r1c3-t9">No</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The TimesTen daemon manages the replication agents. It must be running to start or stop the replication agents.</div>
<p>When the restart policy is <code>always</code>, the replication agent is automatically started when the database is loaded into memory. See <a class="olink TTOPR728" href="../TTOPR/using.htm#TTOPR728">&#34;Specifying a RAM policy&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> to determine when a database is loaded into memory.</p>
<div id="TTREP432" class="example">
<p class="titleinexample"><a id="sthref742"></a>Example 11-3 Using ttAdmin to set the restart policy</p>
<p>To use <code>ttAdmin</code> to set the replication restart policy to <code>always</code>, enter:</p>
<pre><a id="sthref743"></a>ttAdmin -repPolicy always <span class="italic">DSN</span>
</pre>
<p>To reset the policy back to manual, enter:</p>
<pre>ttAdmin -repPolicy manual <span class="italic">DSN</span>
</pre>
<p>Following a database invalidation, both <code>manual</code> and <code>always</code> policies cause the replication agent to be automatically restarted. When the agent restarts automatically, it is often the first connection to the database. This happens after a fatal error that, for example, requires all applications to disconnect. The first connection to a database usually has to load the most recent checkpoint file and often needs to do recovery. For a very large database, this process may take several minutes. During this period, all activity on the database is blocked so that new connections cannot take place and any old connections cannot finish disconnecting. This may also result in two copies of the database existing at the same time because the old one stays around until all applications have disconnected. For very large databases for which the first-connect time may be significant, you may want to wait for the old database to become inactive first before starting up the new one. You can do this by setting the restart policy to <code>norestart</code> to specify that the replication agent is not to be automatically restarted. For more information on setting policies that would prevent the database from being reloaded, see <a class="olink TTOPR728" href="../TTOPR/using.htm#TTOPR728">&#34;Specifying a RAM policy&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> to determine when a database is loaded into memory.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CEGFHBDD"></a>
<div id="TTREP436" class="sect1">
<h2 class="sect1"><a id="sthref744"></a><a id="sthref745"></a>Setting the replication state of subscribers<a id="sthref746"></a><a id="sthref747"></a><a id="sthref748"></a><a id="sthref749"></a><a id="sthref750"></a><a id="sthref751"></a><a id="sthref752"></a><a id="sthref753"></a><a id="sthref754"></a><a id="sthref755"></a></h2>
<p>The state of a subscriber replication agent is described by its master database. When recovering a failed subscriber database, you must reset the replication state of the subscriber database with respect to the master database it communicates with in a replication scheme. You can reset the state of a subscriber database from either the command line or your program:</p>
<ul>
<li>
<p>From the command line, use <a id="sthref756"></a><code>ttRepAdmin</code> <code>-state</code> to direct a master database to reset the replication state of one of its subscriber databases.</p>
</li>
<li>
<p>From ttIsql, call the <a id="sthref757"></a><code>ttRepSubscriberStateSet</code> built-in procedure to direct a master database to reset the replication state of one or all of its subscriber databases.</p>
</li>
</ul>
<p>See <a href="monitor.htm#CHDFJDCJ">Chapter 12, &#34;Monitoring Replication&#34;</a> for information about querying the state of a database.</p>
<p>A master database can set a subscriber database to either the <code>start</code>, <code>pause</code>, or <code>stop</code> states. The database state appears as an integer value in the <code>STATE</code> column in the <code>TTREP.REPPEERS</code> table, as shown in <a href="#BABIDAHI">Table 11-1</a>.</p>
<div id="TTREP749" class="tblhruleformal">
<p class="titleintable"><a id="sthref758"></a><a id="BABIDAHI"></a>Table 11-1 Database states</p>
<table class="cellalignment5810" title="Database states" summary="This table contains descriptions of subscriber database states." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t11">State</th>
<th class="cellalignment5811" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t11" headers="r1c1-t11">
<p><code>start</code></p>
<p><code>STATE</code> value: 0</p>
</td>
<td class="cellalignment5812" headers="r2c1-t11 r1c2-t11">
<p>Replication updates are collected and transmitted to the subscriber database as soon as possible. If replication for the subscriber database is not operational, the updates are saved in the transaction log files until they can be sent.</p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t11" headers="r1c1-t11">
<p><code>pause</code></p>
<p><code>STATE</code> value: 1</p>
</td>
<td class="cellalignment5812" headers="r3c1-t11 r1c2-t11">
<p>Replication updates are retained in the log with no attempt to transmit them. Transmission begins when the state is changed to <code>start</code>.</p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t11" headers="r1c1-t11">
<p><code>stop</code></p>
<p><code>STATE</code> value: 2</p>
</td>
<td class="cellalignment5812" headers="r4c1-t11 r1c2-t11">
<p>Replication updates are discarded without being sent to the subscriber database. Placing a subscriber database in the <code>stop</code> state discards any pending updates from the master&#39;s transaction log.</p>
<p><span class="bold">WARNING:</span> If you are planning on restarting this subscriber, updates are not stored between the stop and the restart. Therefore, when you restart, the subscriber does not contain all of the updates from the master. If you are planning to restart, pause the subscriber instead of stopping it.</p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t11" headers="r1c1-t11">
<p><code>failed</code></p>
<p><code>STATE</code> value: 4</p>
</td>
<td class="cellalignment5812" headers="r5c1-t11 r1c2-t11">
<p>Replication to a subscriber is considered failed because the threshold limit (log data) has been exceeded. This state is set by the system is a transitional state before the system sets the state to <code>stop</code>. Applications that connect to a <code>failed</code> database receive a warning. See <a href="failure.htm#CFHHAHJG">&#34;General failover and recovery procedures&#34;</a> for more information.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>When a master database sets one of its subscribers to the <code>start</code> state, updates for the subscriber are retained in the master&#39;s log. When a subscriber is in the <code>stop</code> state, updates intended for it are discarded.</p>
<p>When a subscriber is in the <code>pause</code> state, updates for it are retained in the master&#39;s log, but are not transmitted to the subscriber database. When a master transitions a subscriber from <code>pause</code> to <code>start</code>, the backlog of updates stored in the master&#39;s log is transmitted to the subscriber. (There is an exception to this, which is described in <a href="failure.htm#CFHGEGCJ">Chapter 15, &#34;Managing Database Failover and Recovery&#34;</a>.) If a master database is unable to establish a connection to a stated subscriber, the master periodically attempts to establish a connection until successful.</p>
<div id="TTREP437" class="example">
<p class="titleinexample"><a id="sthref759"></a>Example 11-4 Using ttRepAdmin to set the subscriber state</p>
<p>To use <code>ttRepAdmin</code> from the command line to direct the <code>masterds</code> master database to set the state of the <code>subscriberds</code> subscriber database to <code>stop</code>:</p>
<pre>ttRepAdmin -dsn masterds -receiver -name subscriberds -state stop
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have multiple subscribers with the same name on different hosts, use the <code>-host</code> option of the <code>ttRepAdmin</code> utility to identify the host for the subscriber that you want to modify.</div>
<div id="TTREP438" class="example">
<p class="titleinexample"><a id="sthref760"></a>Example 11-5 Using ttRepSubscriberStateSet to set the subscriber state</p>
<p>On the master database, call the <code>ttRepSubscriberStateSet</code> built-in procedure to set the state of the subscriber database (<code>subscriberds ON system1</code>) in the <code>repscheme</code> replication scheme to <code>stop</code>:</p>
<pre>Command&gt; CALL ttRepSubscriberStateSet(&#39;repscheme&#39;, &#39;repl&#39;,
          &#39;subscriberds&#39;, &#39;system1&#39;, 2);
</pre>
<p>Only <code>ttRepSubscriberStateSet</code> can be used to set all of the subscribers of a master to a particular state.The <code>ttRepAdmin</code> utility does not have any equivalent functionality.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5803">
<tr>
<td class="cellalignment5812">
<table class="cellalignment5808">
<tr>
<td class="cellalignment5807"><a href="alter.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5807"><a href="monitor.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5814">
<table class="cellalignment5806">
<tr>
<td class="cellalignment5807"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5807"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5807"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5807"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5807"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5807"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>