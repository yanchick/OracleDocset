<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114053"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Overview%20of%20TimesTen%20Replication"></a><title>Overview of TimesTen Replication</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2014-09-29T11:11:54Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Replication Guide"/>
<meta name="dcterms.identifier" content="E21635-11"/>
<meta name="dcterms.isVersionOf" content="TTREP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="whatsnew.htm" title="Previous" type="text/html"/>
<link rel="Next" href="gettingstarted.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21635-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">5/21</span> <!-- End Header -->
<div id="TTREP115" class="chapter"><a id="CJAIDEED"></a>
<h1 class="chapter"><span class="secnum">1</span> Overview of TimesTen Replication</h1>
<p>The following sections provide an overview of TimesTen replication:</p>
<ul>
<li>
<p><a href="#CJAGECCA">What is replication?</a></p>
</li>
<li>
<p><a href="#CJAFEGHJ">Requirements for replication compatibility</a></p>
</li>
<li>
<p><a href="#CJABHCDF">Replication agents</a></p>
</li>
<li>
<p><a href="#CJAFADFC">Copying updates between databases</a></p>
</li>
<li>
<p><a href="#CJAFDCIH">Types of replication schemes</a></p>
</li>
<li>
<p><a href="#CJADCGFA">Cache groups and replication</a></p>
</li>
<li>
<p><a href="#CJAIEHDI">Sequences and replication</a></p>
</li>
<li>
<p><a href="#CJAGHIHI">Foreign keys and replication</a></p>
</li>
<li>
<p><a href="#CJAHFFJB">Aging and replication</a></p>
</li>
</ul>
<a id="CJAGECCA"></a>
<div id="TTREP116" class="sect1">
<h2 class="sect1">What is replication?<a id="sthref18"></a></h2>
<p><span class="italic">Replication</span> is the process of maintaining copies of data in multiple databases. The purpose of replication is to make data highly available to applications with minimal performance impact. In addition to providing recovery from failures, replication schemes can also distribute application workloads across multiple databases for maximum performance and facilitate online upgrades and maintenance.</p>
<p>Replication is the process of copying data from a <span class="italic">master</span> database to a <span class="italic">subscriber</span> database. Replication is controlled by <span class="italic">replication</span> <span class="italic">agents</span> for each database. The replication agent on the master database reads the records from the transaction log for the master database. It forwards changes to replicated elements to the replication agent on the subscriber database. The replication agent on the subscriber database then applies the updates to its database. If the subscriber replication agent is not running when the updates are forwarded by the master, the master retains the updates in its transaction log until they can be applied at the subscriber database.</p>
<p>TimesTen recommends the <span class="italic">active standby pair</span> configuration for highest availability. In an active standby pair replication scheme, the data is copied from the active database to the standby database before being copied to read-only subscribers.</p>
<p>An entity that is replicated with all of its contents between databases is called a <span class="italic">replication <a id="sthref19"></a><a id="sthref20"></a>element</span>. TimesTen supports databases, cache groups, tables and sequences as replication elements. TimesTen also replicates XLA bookmarks. An active standby pair is the only supported replication scheme for databases with cache groups.</p>
<p>In addition, when you execute certain DDL statements in an active standby pair, some statements are replicated against the other nodes in the replication scheme. For more details, see <a href="alterpair.htm#BABCAHEB">&#34;Making DDL changes in an active standby pair&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CJAFEGHJ"></a>
<div id="TTREP117" class="sect1">
<h2 class="sect1">Requirements for replication compatibility</h2>
<p>TimesTen replication is supported only between identical platforms and bit-levels. Although you can replicate between databases that reside on the same host, replication is generally used for copying updates into a database that resides on another host. This helps prevent data loss from host failure.</p>
<p>The databases must have DSNs with identical <code>DatabaseCharacterSet</code> and <code>TypeMode</code> database attributes.</p>
</div>
<!-- class="sect1" -->
<a id="CJABHCDF"></a>
<div id="TTREP118" class="sect1">
<h2 class="sect1">Replication agents<a id="sthref21"></a></h2>
<p>Replication between databases is controlled by a replication agent. Each database is identified by:</p>
<ul>
<li>
<p>A database name derived from the file system&#39;s path name for the database</p>
</li>
<li>
<p>A host name</p>
</li>
</ul>
<p>The replication agent on the master database reads the records from the transaction log and forwards any detected changes to replicated elements to the replication agent on the subscriber database. The replication agent on the subscriber database then applies the updates to its database. If the subscriber agent is not running when the updates are forwarded by the master, the master retains the updates in the transaction log until they can be transmitted.</p>
<p>The replication agents communicate through TCP/IP stream sockets. The replication agents obtain the TCP/IP address, host name, and other configuration information from the replication tables described in <a class="olink TTSYS" href="../TTSYS/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="CJAFADFC"></a>
<div id="TTREP119" class="sect1">
<h2 class="sect1">Copying updates between databases</h2>
<p>By default, updates are copied between databases asynchronously. While asynchronous replication provides the best performance, it does not provide the application with confirmation that the replicated updates were committed on subscriber databases. For applications that need higher levels of confidence that the replicated data is consistent between the master and subscriber databases, you can enable either <span class="italic">return receipt</span> or <span class="italic">return twosafe</span> service.</p>
<ul>
<li>
<p>The <span class="italic"><a id="sthref22"></a>return receipt</span> service loosely synchronizes the application with the replication mechanism by blocking the application until replication confirms that the update has been received by the subscriber.</p>
</li>
<li>
<p>The <span class="italic"><a id="sthref23"></a>return twosafe</span> service provides a fully synchronous option by blocking the application until replication confirms that the update has been both received and committed on the subscriber.</p>
</li>
</ul>
<p>Return receipt replication impacts performance less than return twosafe, but at the expense of less synchronization. The operational details for asynchronous, return receipt, and return twosafe replication are discussed in these sections:</p>
<ul>
<li>
<p><a href="#CJAFDJHI">Default replication</a></p>
</li>
<li>
<p><a href="#CJAIEAAG">Return receipt replication</a></p>
</li>
<li>
<p><a href="#CJABAJBB">Return twosafe replication</a></p>
</li>
</ul>
<a id="CJAFDJHI"></a>
<div id="TTREP120" class="sect2">
<h3 class="sect2">Default replication</h3>
<p>When using default TimesTen replication, an application updates a master database and continues working without waiting for the updates to be received and applied by the subscribers. The master and subscriber databases have internal mechanisms to confirm that the updates have been successfully received and committed by the subscriber. These mechanisms ensure that updates are applied at a subscriber only once, but they are completely independent of the application.</p>
<p>Default TimesTen replication provides maximum performance, but the application is completely decoupled from the receipt process of the replicated elements on the subscriber.</p>
<div id="TTREP121" class="figure">
<p class="titleinfigure"><a id="CJAIBAGI"></a>Figure 1-1 Basic asynchronous replication cycle</p>
<img width="689" height="390" src="img/async_cycle.gif" alt="Description of Figure 1-1 follows"/><br/>
<a id="sthref24" href="img_text/async_cycle.htm">Description of &#34;Figure 1-1 Basic asynchronous replication cycle&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The default TimesTen replication cycle is:</p>
<ol>
<li>
<p>The application commits a local transaction to the master database and is free to continue with other transactions.</p>
</li>
<li>
<p>During the commit, the TimesTen daemon writes the transaction update records to the transaction log buffer.</p>
</li>
<li>
<p>The replication agent on the master database directs the daemon to flush a batch of update records for the committed transactions from the log buffer to a transaction log file. This step ensures that, if the master fails and you need to recover the database from the checkpoint and transaction log files, the recovered master contains all the data it replicated to the subscriber.</p>
</li>
<li>
<p>The master replication agent forwards the batch of transaction update records to the subscriber replication agent, which applies them to the subscriber database. Update records are flushed to disk and forwarded to the subscriber in batches of 256K or less, depending on the master database&#39;s transaction load. A batch is created when there is no more log data in the transaction log buffer or when the current batch is roughly 256K bytes.</p>
</li>
<li>
<p>The subscriber replication agent sends an acknowledgement back to the master replication agent that the batch of update records was received. The acknowledgement includes information on which batch of records the subscriber last flushed to disk. The master replication agent is now free to purge from the transaction log the update records that have been received, applied, and flushed to disk by all subscribers and to forward another batch of update records, while the subscriber replication agent asynchronously continues on to Step 6.</p>
</li>
<li>
<p>The replication agent at the subscriber updates the database and directs the daemon to write the transaction update records to the transaction log buffer.</p>
</li>
<li>
<p>The replication agent at the subscriber database uses a separate thread to direct the daemon to flush the update records to a transaction log file.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CJAIEAAG"></a>
<div id="TTREP122" class="sect2">
<h3 class="sect2">Return receipt replication<a id="sthref25"></a></h3>
<p>The return <a id="sthref26"></a>receipt service provides a level of synchronization between the master and a subscriber database by blocking the application after commit on the master until the updates of the committed transaction have been received by the subscriber.</p>
<p>An application requesting return receipt updates the master database in the same manner as in the basic asynchronous case. However, when the application commits a transaction that updates a replicated element, the master database blocks the application until it receives confirmation that the updates for the completed transaction have been received by the subscriber.</p>
<p>Return receipt replication trades some performance in order to provide applications with the ability to ensure higher levels of data integrity and consistency between the master and subscriber databases. In the event of a master failure, the application has a high degree of confidence that a transaction committed at the master persists in the subscribing database.</p>
<div id="TTREP123" class="figure">
<p class="titleinfigure"><a id="CJAFIFAD"></a>Figure 1-2 Return receipt replication</p>
<img width="665" height="446" src="img/return_receipt.gif" alt="Description of Figure 1-2 follows"/><br/>
<a id="sthref27" href="img_text/return_receipt.htm">Description of &#34;Figure 1-2 Return receipt replication&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#CJAFIFAD">Figure 1-2</a> shows that the return receipt replication cycle is the same as shown for the basic asynchronous cycle in <a href="#CJAIBAGI">Figure 1-1</a>, only the master replication agent blocks the application thread after it commits a transaction (Step 1) and retains control of the thread until the subscriber acknowledges receipt of the update batch (Step 5). Upon receiving the return receipt acknowledgement from the subscriber, the master replication agent returns control of the thread to the application (Step 6), freeing it to continue executing transactions.</p>
<p><a id="sthref28"></a>If the subscriber is unable to acknowledge receipt of the transaction within a configurable timeout period (default is 10 seconds), the master replication agent returns a warning stating that it did not receive acknowledgement of the update from the subscriber and returns control of the thread to the application. The application is then free to commit another transaction to the master, which continues replication to the subscriber as before.</p>
<p>Return receipt transactions may time out for many reasons. The most likely causes for timeout are the network, a failed replication agent, or the master replication agent may be so far behind with respect to the transaction load that it cannot replicate the return receipt transaction before its timeout expires. For information on how to manage return-receipt timeouts, see <a href="attrib.htm#BGBHEHFB">&#34;Managing return service timeout errors and replication state changes&#34;</a>.</p>
<p>See <a href="attrib.htm#CHDFFDBE">&#34;RETURN RECEIPT&#34;</a> for information on how to configure replication for return receipt.</p>
</div>
<!-- class="sect2" -->
<a id="CJABAJBB"></a>
<div id="TTREP124" class="sect2">
<h3 class="sect2">Return twosafe replication</h3>
<p>The return twosafe service provides fully synchronous replication between the master and subscriber. Unlike the previously described replication modes, where transactions are transmitted to the subscriber after being committed on the master, transactions in twosafe mode are first committed on the subscriber before they are committed on the master.</p>
<div id="TTREP125" class="figure">
<p class="titleinfigure"><a id="CJAGJGGJ"></a>Figure 1-3 Return twosafe replication</p>
<img width="602" height="411" src="img/return_2safe.gif" alt="Description of Figure 1-3 follows"/><br/>
<a id="sthref29" href="img_text/return_2safe.htm">Description of &#34;Figure 1-3 Return twosafe replication&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The following describes the replication behavior between a master and subscriber configured for return twosafe replication:</p>
<ol>
<li>
<p>The application commits the transaction on the master database.</p>
</li>
<li>
<p>The master replication agent writes the transaction records to the log and inserts a special precommit log record before the commit record. This precommit record acts as a place holder in the log until the master replication receives an acknowledgement that indicates the status of the commit on the subscriber.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Transmission of return twosafe transactions is nondurable, so the master replication agent does not flush the log records to disk before sending them to the subscriber, as it does by default when replication is configured for asynchronous or return receipt replication.</div>
</li>
<li>
<p>The master replication agent transmits the batch of update records to the subscriber.</p>
</li>
<li>
<p>The subscriber replication agent commits the transaction on the subscriber database.</p>
</li>
<li>
<p>The subscriber replication agent returns an acknowledgement back to the master replication agent with notification of whether the transaction was committed on the subscriber and whether the commit was successful.</p>
</li>
<li>
<p>If the commit on the subscriber was successful, the master replication agent commits the transaction on the master database.</p>
</li>
<li>
<p>The master replication agent returns control to the application.</p>
<p>If the subscriber is unable to acknowledge commit of the transaction within a configurable timeout period (default is 10 seconds) or if the acknowledgement from the subscriber indicates the commit was unsuccessful, the replication agent returns control to the application without committing the transaction on the master database. The application can then to decide whether to unconditionally commit or retry the commit. You can optionally configure your replication scheme to direct the master replication agent to commit all transactions that time out.</p>
<p>See <a href="attrib.htm#CHDHIGDF">&#34;RETURN TWOSAFE&#34;</a> for information on how to configure replication for return twosafe.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJAFDCIH"></a>
<div id="TTREP126" class="sect1">
<h2 class="sect1">Types of replication schemes<a id="sthref30"></a></h2>
<p>You create a replication scheme to define a specific configuration of master and subscriber databases. This section describes the possible relationships you can define between master and subscriber databases when creating a replication scheme.</p>
<p>When defining a relationship between a master and subscriber, consider these replication schemes:</p>
<ul>
<li>
<p><a href="#CJAEBHCB">Active standby pair with read-only subscribers</a></p>
</li>
<li>
<p><a href="#CJAEBADE">Classic replication</a></p>
</li>
</ul>
<a id="CJAEBHCB"></a>
<div id="TTREP127" class="sect2">
<h3 class="sect2">Active standby pair <a id="sthref31"></a><a id="sthref32"></a><a id="sthref33"></a>with read-only subscribers</h3>
<p><a href="#CJAJJBDB">Figure 1-4</a> shows an active standby pair replication scheme with an active master, a standby master, and four read-only subscriber databases.</p>
<div id="TTREP128" class="figure">
<p class="titleinfigure"><a id="CJAJJBDB"></a>Figure 1-4 Active standby pair</p>
<img width="292" height="516" src="img/active_standby.gif" alt="Description of Figure 1-4 follows"/><br/>
<a id="sthref34" href="img_text/active_standby.htm">Description of &#34;Figure 1-4 Active standby pair&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The active standby pair can replicate a whole database or select elements like tables and cache groups.</p>
<p>In an active standby pair, two databases are defined as masters. One is an active master, and the other is a standby master. The application updates the active master directly. Applications cannot update the standby master. It receives the updates from the active master and propagates the changes to as many as 127 read-only subscriber databases. This arrangement ensures that the standby master is always ahead of the subscriber databases and enables rapid failover to the standby master if the active master fails.</p>
<p>Only one of the master databases can function as an active master at a specific time. You can manage failover and recovery of an active standby pair with Oracle Clusterware. See <a href="cluster.htm#CCHCFAAD">Chapter 8, &#34;Using Oracle Clusterware to Manage Active Standby Pairs&#34;</a>. You can also manage failover and recovery manually. See <a href="standby.htm#BGBGICDA">Chapter 5, &#34;Administering an Active Standby Pair without Cache Groups&#34;</a> or <a href="standbycache.htm#BABHBJDG">Chapter 6, &#34;Administering an Active Standby Pair with Cache Groups.&#34;</a></p>
<p>If the standby master fails, the active master can replicate changes directly to the read-only subscribers. After the standby database has been recovered, it contacts the active master to receive any updates that have been sent to the subscribers while the standby master was down or was recovering. When the active master and the standby master have been synchronized, then the standby master resumes propagating changes to the subscribers.</p>
<p>For details about setting up an active standby pair, see <a href="standby.htm#BABGCHBJ">&#34;Setting up an active standby pair with no cache groups&#34;</a>, <a href="standbycache.htm#BABFGFBH">&#34;Setting up an active standby pair with a read-only cache group&#34;</a>, or <a href="standbycache.htm#BABHABAJ">&#34;Setting up an active standby pair with an AWT cache group.&#34;</a></p>
</div>
<!-- class="sect2" -->
<a id="CJAEBADE"></a>
<div id="TTREP811" class="sect2">
<h3 class="sect2">Classic <a id="sthref35"></a>replication</h3>
<p>Classic replication schemes enable you to design relationships between masters and subscribers. The following sections describe classic replication schemes:</p>
<ul>
<li>
<p><a href="#CJABEBAB">Full database replication or selective replication</a></p>
</li>
<li>
<p><a href="#CJABGGBC">Unidirectional or bidirectional replication</a></p>
</li>
<li>
<p><a href="#CJAHHHAD">Direct replication or propagation</a></p>
</li>
</ul>
<a id="CJABEBAB"></a>
<div id="TTREP129" class="sect3">
<h4 class="sect3">Full database replication or selective replication<a id="sthref36"></a><a id="sthref37"></a><a id="sthref38"></a><a id="sthref39"></a></h4>
<p><a href="#CJAIIJAD">Figure 1-5</a> illustrates a full replication scheme in which the entire master database is replicated to the subscriber.</p>
<div id="TTREP130" class="figure">
<p class="titleinfigure"><a id="CJAIIJAD"></a>Figure 1-5 Replicating the entire master database</p>
<img width="310" height="261" src="img/simplerep.gif" alt="Description of Figure 1-5 follows"/><br/>
<a id="sthref40" href="img_text/simplerep.htm">Description of &#34;Figure 1-5 Replicating the entire master database&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>You can also configure your master and subscriber databases to selectively replicate some elements in a master database to subscribers. <a href="#CJACCEBD">Figure 1-6</a> shows examples of selective replication. The left side of the figure shows a master database that replicates the same selected elements to multiple subscribers, while the right side shows a master that replicates different elements to each subscriber.</p>
<div id="TTREP131" class="figure">
<p class="titleinfigure"><a id="CJACCEBD"></a>Figure 1-6 Replicating selected elements to multiple subscribers</p>
<img width="667" height="368" src="img/simplerep2.gif" alt="Description of Figure 1-6 follows"/><br/>
<a id="sthref41" href="img_text/simplerep2.htm">Description of &#34;Figure 1-6 Replicating selected elements to multiple subscribers&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="CJABGGBC"></a>
<div id="TTREP132" class="sect3">
<h4 class="sect3">Unidirectional or b<a id="sthref42"></a><a id="sthref43"></a><a id="sthref44"></a><a id="sthref45"></a>idirectional replication</h4>
<p>Unidirectional replication is where a master database sends updates to one or more subscriber databases. Bidirectional replication is where there are two databases that operate bidirectionally, where each database is both a master and a subscriber.</p>
<p>These are basic ways to use bidirectional replication:</p>
<ul>
<li>
<p><a href="#CJACAICD">Split workload configuration</a></p>
</li>
<li>
<p><a href="#CJAEIFBA">Distributed workload</a></p>
</li>
</ul>
<a id="CJACAICD"></a>
<div id="TTREP133" class="sect4">
<h5 class="sect4">Split workload configuration<a id="sthref46"></a><a id="sthref47"></a></h5>
<p>In a <span class="italic">split workload</span> configuration, each database serves as a master for some elements and a subscriber for others.</p>
<p>Consider the example shown in <a href="#CJAHIGCH">Figure 1-7</a>, where the accounts for Chicago are processed on database A while the accounts for New York are processed on database B.</p>
<div id="TTREP134" class="figure">
<p class="titleinfigure"><a id="CJAHIGCH"></a>Figure 1-7 Split workload bidirectional replication</p>
<img width="320" height="287" src="img/split_wkload.gif" alt="Description of Figure 1-7 follows"/><br/>
<a id="sthref48" href="img_text/split_wkload.htm">Description of &#34;Figure 1-7 Split workload bidirectional replication&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect4" -->
<a id="CJAEIFBA"></a>
<div id="TTREP137" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Distributed workload<a id="sthref49"></a><a id="sthref50"></a></h5>
<p>In a distributed workload replication scheme, user access is distributed across duplicate application/database combinations that replicate any update on any element to each other. In the event of a failure, the affected users can be quickly shifted to any application/database combination.The distributed workload configuration is shown in <a href="#CJAHIGDA">Figure 1-8</a>. Users access duplicate applications on each database, which serves as both master and subscriber for the other database.</p>
<div id="TTREP138" class="figure">
<p class="titleinfigure"><a id="CJAHIGDA"></a>Figure 1-8 Distributed workload configuration</p>
<img width="322" height="282" src="img/genwkload.gif" alt="Description of Figure 1-8 follows"/><br/>
<a id="sthref51" href="img_text/genwkload.htm">Description of &#34;Figure 1-8 Distributed workload configuration&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>When databases are replicated in a distributed workload configuration, it is possible for separate users to concurrently update the same rows and replicate the updates to one another. Your application should ensure that such conflicts cannot occur, that they be acceptable if they do occur, or that they can be successfully resolved using the conflict resolution mechanism described in <a href="conflict.htm#BABGABJH">Chapter 13, &#34;Resolving Replication Conflicts&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not use a distributed workload configuration with the return twosafe return service.</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CJAHHHAD"></a>
<div id="TTREP139" class="sect3">
<h4 class="sect3">Direct replication or p<a id="sthref52"></a><a id="sthref53"></a>ropagation</h4>
<p>You can define a subscriber to serve as a <a id="sthref54"></a>propagator that receives replicated updates from a master and passes them on to subscribers of its own.</p>
<p><a id="sthref55"></a>Propagators are useful for optimizing replication performance over lower-bandwidth network connections, such as those between servers in an intranet. For example, consider the direct replication configuration illustrated in <a href="#CJAJHHAI">Figure 1-9</a>, where a master directly replicates to four subscribers over an intranet connection. Replicating to each subscriber over a network connection in this manner is an inefficient use of network bandwidth.</p>
<div id="TTREP140" class="figure">
<p class="titleinfigure"><a id="CJAJHHAI"></a>Figure 1-9 Master replicating directly to multiple subscribers over a network</p>
<img width="408" height="352" src="img/propagation1.gif" alt="Description of Figure 1-9 follows"/><br/>
<a id="sthref56" href="img_text/propagation1.htm">Description of &#34;Figure 1-9 Master replicating directly to multiple subscribers over a network&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>For optimum performance, consider the configuration shown in <a href="#CJAHJCDG">Figure 1-10</a>, where the master replicates to a single propagator over the network connection. The propagator in turn forwards the updates to each subscriber on its local area network.</p>
<div id="TTREP141" class="figure">
<p class="titleinfigure"><a id="CJAHJCDG"></a>Figure 1-10 Master replicating to a single propagator over a network</p>
<img width="420" height="508" src="img/propagation2.gif" alt="Description of Figure 1-10 follows"/><br/>
<a id="sthref57" href="img_text/propagation2.htm">Description of &#34;Figure 1-10 Master replicating to a single propagator over a network&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Propagators are also useful for distributing replication loads in configurations that involve a master database that must replicate to a large number of subscribers. For example, it is more efficient for the master to replicate to three propagators, rather than directly to the 12 subscribers as shown in <a href="#CJADGCHB">Figure 1-11</a>.</p>
<div id="TTREP142" class="figure">
<p class="titleinfigure"><a id="CJADGCHB"></a>Figure 1-11 Using propagators to replicate to many subscribers</p>
<img width="670" height="401" src="img/propagation_tree.gif" alt="Description of Figure 1-11 follows"/><br/>
<a id="sthref58" href="img_text/propagation_tree.htm">Description of &#34;Figure 1-11 Using propagators to replicate to many subscribers&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Each propagator is one-hop, which means that you can forward an update only once. You cannot have a hierarchy of propagators where propagators forward updates to other propagators.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJADCGFA"></a>
<div id="TTREP143" class="sect1">
<h2 class="sect1">Cache groups and replication<a id="sthref59"></a><a id="sthref60"></a><a id="sthref61"></a></h2>
<p>As described in <a class="olink TTCAC" href="../TTCAC/toc.htm"><span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span></a>, a cache group is a group of tables stored in a central Oracle database that are cached in a local TimesTen Application-Tier Database Cache (TimesTen Cache). This section describes how cache groups can be replicated between TimesTen databases. You can achieve high availability by using an active standby pair to replicate asynchronous writethrough cache groups or read-only cache groups.</p>
<p>This section describes the following ways to replicate cache groups:</p>
<ul>
<li>
<p><a href="#CACJJCGG">Replicating an AWT cache group</a></p>
</li>
<li>
<p><a href="#CACBBGHD">Replicating an AWT cache group with a subscriber propagating to an Oracle database</a></p>
</li>
<li>
<p><a href="#CACGFDAI">Replicating a read-only cache group</a></p>
</li>
</ul>
<p>See <a href="standbycache.htm#BABHBJDG">Chapter 6, &#34;Administering an Active Standby Pair with Cache Groups&#34;</a> for details about configuring replication of cache groups.</p>
<a id="CACJJCGG"></a>
<div id="TTREP144" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Replicating an AWT cache group<a id="sthref62"></a><a id="sthref63"></a><a id="sthref64"></a></h3>
<p>An asynchronous writethrough (AWT) cache group can be configured as part of an active standby pair with optional read-only subscribers to ensure high availability and to distribute the application workload. <a href="#CACFJFCH">Figure 1-12</a> shows this configuration.</p>
<div id="TTREP145" class="figure">
<p class="titleinfigure"><a id="CACFJFCH"></a>Figure 1-12 AWT cache group replicated by an active standby pair</p>
<img width="614" height="373" src="img/as_awt.gif" alt="Description of Figure 1-12 follows"/><br/>
<a id="sthref65" href="img_text/as_awt.htm">Description of &#34;Figure 1-12 AWT cache group replicated by an active standby pair&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Application updates are made to the active database, the updates are replicated to the standby database, and then the updates are asynchronously written to the Oracle database by the standby. At the same time, the updates are also replicated from the standby to the read-only subscribers, which may be used to distribute the load from reading applications. The tables on the read-only subscribers are not in cache groups.</p>
<p>When there is no standby database, the active database both accepts application updates and writes the updates asynchronously to the Oracle database and the read-only subscribers. This situation can occur when the standby has not yet been created, or when the active fails and the standby becomes the new active. TimesTen reconfigures the AWT cache group when the standby becomes the new active.</p>
<p>If a failure occurs on the node where the active database resides, the standby node becomes the new active node. TimesTen automatically reconfigures the AWT cache group so that it can be updated directly by the application and continue to propagate the updates to the Oracle database asynchronously.</p>
</div>
<!-- class="sect2" -->
<a id="CACBBGHD"></a>
<div id="TTREP146" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Replicating an AWT cache group with a subscriber propagating to an Oracle database<a id="sthref66"></a><a id="sthref67"></a></h3>
<p>You can recover from a complete failure of a site by creating a special disaster recovery read-only subscriber on a remote site as part of the active standby pair replication configuration. <a href="#CACICBEG">Figure 1-13</a> shows this configuration.</p>
<div id="TTREP147" class="figure">
<p class="titleinfigure"><a id="CACICBEG"></a>Figure 1-13 Disaster recovery configuration with active standby pair</p>
<img width="604" height="431" src="img/as_awt_dr.gif" alt="Description of Figure 1-13 follows"/><br/>
<a id="sthref68" href="img_text/as_awt_dr.htm">Description of &#34;Figure 1-13 Disaster recovery configuration with active standby pair&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The standby database sends updates to cache group tables on the read-only subscriber. This special subscriber is located at a remote disaster recovery site and can propagate updates to a second Oracle database, also located at the disaster recovery site. You can set up more than one disaster recovery site with read-only subscribers and Oracle databases. See <a href="standbycache.htm#CBAJDJBD">&#34;Using a disaster recovery subscriber in an active standby pair&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CACGFDAI"></a>
<div id="TTREP148" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Replicating a read-only cache group<a id="sthref69"></a></h3>
<p>A read-only cache group enforces caching behavior in which committed updates on the Oracle database tables are automatically refreshed to the corresponding TimesTen cache tables. <a href="#CJACEJIA">Figure 1-14</a> shows a read-only cache group replicated by an active standby pair.</p>
<div id="TTREP149" class="figure">
<p class="titleinfigure"><a id="CJACEJIA"></a>Figure 1-14 Read-only cache group replicated by an active standby pair</p>
<img width="579" height="441" src="img/as_readonly.gif" alt="Description of Figure 1-14 follows"/><br/>
<a id="sthref70" href="img_text/as_readonly.htm">Description of &#34;Figure 1-14 Read-only cache group replicated by an active standby pair&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>When the read-only cache group is replicated by an active standby pair, the cache group on the active database is autorefreshed from the Oracle database and replicates the updates to the standby, where <code>AUTOREFRESH</code> is also configured on the cache group but is in the <code>PAUSED</code> state. In the event of a failure of the active, TimesTen automatically reconfigures the standby to be autorefreshed when it takes over for the failed master database by setting the <code>AUTOREFRESH STATE</code> to <code>ON</code>.TimesTen also tracks whether updates that have been autorefreshed from the Oracle database to the active database have been replicated to the standby. This ensures that the autorefresh process picks up from the correct point after the active fails, and no autorefreshed updates are lost.This configuration may also include read-only subscriber databases.This enables the read workload to be distributed across many databases. The cache groups on the standby database replicate to regular (non-cache) tables on the subscribers.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJAIEHDI"></a>
<div id="TTREP150" class="sect1">
<h2 class="sect1">Sequences and replication<a id="sthref71"></a></h2>
<p>In some replication configurations, you may need to keep sequences synchronized between two or more databases. For example, you may have a master database containing a replicated table that uses a sequence to fill in the primary key value for each row. The subscriber database is used as a hot backup for the master database. If updates to the sequence&#39;s current value are not replicated, insertions of new rows on the subscriber after the master has failed could conflict with rows that were originally inserted on the master.</p>
<p>TimesTen replication allows the incremented sequence value to be replicated to subscriber databases, ensuring that rows in this configuration inserted on either database does not conflict. See <a href="design.htm#CHDCEHDB">&#34;Replicating sequences&#34;</a> for details on writing a replication scheme to replicate sequences.</p>
</div>
<!-- class="sect1" -->
<a id="CJAGHIHI"></a>
<div id="TTREP151" class="sect1">
<h2 class="sect1">Foreign keys and replication<a id="sthref72"></a><a id="sthref73"></a><a id="sthref74"></a><a id="sthref75"></a></h2>
<p>You may choose to replicate all or a subset of tables that have foreign key relationships with one another. However, the method for how to replicate the tables involved in the relationship differ according to the type of replication scheme. See the following for details:</p>
<ul>
<li>
<p><a href="definepair.htm#CHDHDDDF">&#34;Replicating tables with foreign key relationships in an active standby pair&#34;</a></p>
</li>
<li>
<p><a href="design.htm#CHDCAFHJ">&#34;Replicating tables with foreign key relationships in a classic replication scheme&#34;</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CJAHFFJB"></a>
<div id="TTREP152" class="sect1">
<h2 class="sect1">Aging and replication<a id="sthref76"></a><a id="sthref77"></a></h2>
<p>When a table or cache group is configured with least recently used (LRU) or time-based aging, the following rules apply to the interaction with replication:</p>
<ul>
<li>
<p>The aging configuration on replicated tables and cache groups must be identical on every peer database.</p>
</li>
<li>
<p>If the replication scheme is an active standby pair, then aging is performed only on the active database. Deletes that result from aging are then replicated to the standby database. The aging configuration must be set to <code>ON</code> on both the active and standby databases. TimesTen automatically determines which database is actually performing the aging based on its current role as active or standby.</p>
</li>
<li>
<p>In a replication scheme that is not an active standby pair, aging is performed individually in each database. Deletes performed by aging are not replicated to other databases.</p>
</li>
<li>
<p>When an asynchronous writethrough cache group is in a database that is replicated by an active standby pair, delete operations that result from aging are not propagated to the Oracle database.</p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5803">
<tr>
<td class="cellalignment5812">
<table class="cellalignment5808">
<tr>
<td class="cellalignment5807"><a href="whatsnew.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5807"><a href="gettingstarted.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5814">
<table class="cellalignment5806">
<tr>
<td class="cellalignment5807"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5807"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5807"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5807"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5807"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5807"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>