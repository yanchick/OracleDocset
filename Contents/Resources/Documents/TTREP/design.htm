<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114019"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Defining%20Classic%20Replication%20Schemes"></a><title>Defining Classic Replication Schemes</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2014-09-29T11:11:56Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Replication Guide"/>
<meta name="dcterms.identifier" content="E21635-11"/>
<meta name="dcterms.isVersionOf" content="TTREP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="cluster.htm" title="Previous" type="text/html"/>
<link rel="Next" href="alter.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21635-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/21</span> <!-- End Header -->
<div id="TTREP306" class="chapter"><a id="CACDEIBF"></a>
<h1 class="chapter"><span class="secnum">9</span> Defining <a id="sthref522"></a>Classic Replication Schemes</h1>
<p>This chapter describes how to define classic replication schemes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For information about defining active standby pair replication schemes, see <a href="definepair.htm#CHDJBJAI">Chapter 3, &#34;Defining an Active Standby Pair Replication Scheme&#34;</a>. If you want to replicate a database that has cache groups, see <a href="standbycache.htm#BABHBJDG">Chapter 6, &#34;Administering an Active Standby Pair with Cache Groups&#34;</a>.</div>
<p>This chapter includes these topics:</p>
<ul>
<li>
<p><a href="#CHDDHEHJ">Designing a highly available system</a></p>
</li>
<li>
<p><a href="#CACCEDBC">Defining a classic replication scheme</a></p>
</li>
<li>
<p><a href="#CHDBJBBB">Table requirements and restrictions for classic replication schemes</a></p>
</li>
<li>
<p><a href="#CACHDEEJ">Restrictions for classic replication schemes involving multiple masters</a></p>
</li>
<li>
<p><a href="#CHDFFAII">Defining replication elements</a></p>
</li>
<li>
<p><a href="#CHDHACHH">Checking for replication conflicts on table elements</a></p>
</li>
<li>
<p><a href="#CHDIAFIE">Setting transmit durability on DATASTORE element</a></p>
</li>
<li>
<p><a href="#CACGACAG">Using a return service in a classic replication scheme</a></p>
</li>
<li>
<p><a href="#CACDBEJD">Setting STORE attributes in a classic replication scheme</a></p>
</li>
<li>
<p><a href="#CACBGCGA">Configuring network operations for a classic replication scheme</a></p>
</li>
<li>
<p><a href="#CHDJCADB">Classic replication scheme syntax examples</a></p>
</li>
<li>
<p><a href="#CEGFEEHD">Applying a classic replication scheme to a database</a></p>
</li>
<li>
<p><a href="#CHDDBIGC">Creating classic replication schemes with scripts</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
To reduce the amount of bandwidth required for replication, see <a href="attrib.htm#CHDBEDCC">&#34;Compressing replicated traffic&#34;</a>.
<p>To replicate tables with columns in a different order or with a different number of partitions, see <a href="attrib.htm#CHDFABDJ">&#34;Column definition options for replicated tables&#34;</a>.</p>
</div>
<a id="CHDDHEHJ"></a>
<div id="TTREP307" class="sect1">
<h2 class="sect1">Designing a highly available system<a id="sthref523"></a><a id="sthref524"></a><a id="sthref525"></a><a id="sthref526"></a></h2>
<p>These are the primary objectives of any replication scheme:</p>
<ul>
<li>
<p>Provide one or more backup databases to ensure that the data is always available to applications</p>
</li>
<li>
<p>Provide a means to recover failed databases from their backup databases</p>
</li>
<li>
<p>Distribute workloads efficiently to provide applications with the quickest possible access to the data</p>
</li>
<li>
<p>Enable software upgrades and maintenance without disrupting service to users</p>
</li>
</ul>
<p>In a highly available system, a subscriber database must be able to survive failures that may affect the master. At a minimum, the master and subscriber need to be on separate hosts. For some applications, you may want to place the subscriber in an environment that has a separate power supply. In certain cases, you may need to place a subscriber at an entirely separate site.</p>
<p>You can configure the following classic replication schemes (as described in <a href="overview.htm#CJAFDCIH">&#34;Types of replication schemes&#34;</a>):</p>
<ul>
<li>
<p>Unidirectional</p>
</li>
<li>
<p>Bidirectional split workload</p>
</li>
<li>
<p>Bidirectional distributed workload</p>
</li>
<li>
<p>Propagation</p>
</li>
</ul>
<p>In addition, consider whether you want to replicate a whole database or selected elements of the database. Also, consider the number of subscribers in the replication scheme. Unidirectional and propagation replication schemes enable you to choose the number of subscribers.</p>
<p>The rest of this section includes these topics:</p>
<ul>
<li>
<p><a href="#CACEJAFE">Considering failover and recovery scenarios</a></p>
</li>
<li>
<p><a href="#CACDAGDH">Making decisions about performance and recovery tradeoffs</a></p>
</li>
<li>
<p><a href="#CACJGJBH">Distributing workloads</a></p>
</li>
</ul>
<p>For more information about using classic replication to facilitate online upgrades, see <a class="olink TTINS226" href="../TTINS/upgrade.htm#TTINS226">&#34;Performing an online upgrade with replication&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span>.</p>
<a id="CACEJAFE"></a>
<div id="TTREP308" class="sect2">
<h3 class="sect2">Considering failover and recovery<a id="sthref527"></a><a id="sthref528"></a><a id="sthref529"></a> scenarios</h3>
<p>As you plan a replication scheme, consider every failover and recovery scenario. For example, subscriber failures generally have no impact on the applications connected to the master databases. Their recovery does not disrupt user service. If a failure occurs on a master database, you should have a means to redirect the application load to a subscriber and continue service with no or minimal interruption. This process is typically handled by a <a id="sthref530"></a>cluster manager or custom software designed to detect failures, redirect users or applications from the failed database to one of its subscribers, and manage recovery of the failed database. See <a href="failure.htm#CFHGEGCJ">Chapter 15, &#34;Managing Database Failover and Recovery&#34;</a>.</p>
<p>When planning failover strategies, consider which subscribers are to take on the role of the master and for which users or applications. Also, consider recovery factors. For example, a failed master must be able to recover its database from its most up-to-date subscriber, and any subscriber must be able to recover from its master. A bidirectional scheme that replicates the entire database can take advantage of automatic restoration of a failed master. See <a href="failure.htm#CFHHHGGG">&#34;Automatic catch-up of a failed master database&#34;</a>.</p>
<p>Consider the failure scenario for the unidirectionally replicated database shown in <a href="#CHDHEBCA">Figure 9-1</a>. In the case of a master failure, the application cannot access the database until it is recovered from the subscriber. You cannot switch the application connection or user load to the subscriber unless you use an <code>ALTER REPLICATION</code> statement to redefine the subscriber database as the master. See <a href="alter.htm#BGBIAADA">&#34;Replacing a master database in a classic replication scheme&#34;</a>.</p>
<div id="TTREP309" class="figure">
<p class="titleinfigure"><a id="CHDHEBCA"></a>Figure 9-1 Recovering a master in a unidirectional scheme</p>
<img width="676" height="247" src="img/config_scenarios1.gif" alt="Description of Figure 9-1 follows"/><br/>
<a id="sthref531" href="img_text/config_scenarios1.htm">Description of &#34;Figure 9-1 Recovering a master in a unidirectional scheme&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#CHDGBDGC">Figure 9-2</a> shows a <a id="sthref532"></a><a id="sthref533"></a>bidirectional distributed workload scheme in which the entire database is replicated. Failover in this type of replication scheme involves shifting the users of the application on the failed database to the application on the surviving database. Upon recovery, the workload can be redistributed to the application on the recovered database.</p>
<div id="TTREP311" class="figure">
<p class="titleinfigure"><a id="CHDGBDGC"></a>Figure 9-2 Recovering a master in a distributed workload scheme</p>
<img width="669" height="257" src="img/config_scenario3.gif" alt="Description of Figure 9-2 follows"/><br/>
<a id="sthref534" href="img_text/config_scenario3.htm">Description of &#34;Figure 9-2 Recovering a master in a distributed workload scheme&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Similarly, the users in a <a id="sthref535"></a>split workload scheme must be shifted from the failed database to the surviving database. Because replication in a split workload scheme is not at the database level, you must use an <code>ALTER REPLICATION</code> statement to set a new master database. See <a href="alter.htm#BGBIAADA">&#34;Replacing a master database in a classic replication scheme&#34;</a>. Upon recovery, the users can be moved back to the recovered master database.</p>
<p>Propagation replication schemes also require the use of the <code>ALTER REPLICATION</code> statement to set a new master or a new propagator if the master or propagator fails. Higher availability is achieved if two propagators are defined in the replication scheme. See <a href="overview.htm#CJADGCHB">Figure 1-11</a> for an example of a propagation replication scheme with two propagators.</p>
</div>
<!-- class="sect2" -->
<a id="CACDAGDH"></a>
<div id="TTREP312" class="sect2">
<h3 class="sect2">Making decisions about performance and recovery <a id="sthref536"></a>tradeoffs</h3>
<p>When you design a replication scheme, weigh operational efficiencies against the complexities of failover and recovery. Factors that may complicate failover and recovery include the network topology that connects a master with its subscribers and the complexity of the replication scheme. For example, it is easier to recover a master that has been fully replicated to a single subscriber than recover a master that has selected elements replicated to different subscribers.</p>
<p>You can configure replication to work asynchronously (the default), &#34;semi-synchronously&#34; with return receipt service, or fully synchronously with return twosafe service. Selecting a return service provides greater confidence that your data is consistent on the master and subscriber databases. Your decision to use default asynchronous replication or to configure return receipt or return twosafe mode depends on the degree of confidence you require and the performance tradeoff you are willing to make in exchange.</p>
<p><a href="#CACEIDBI">Table 9-1</a> summarizes the performance and recover tradeoffs of asynchronous replication, return receipt service and return twosafe service.</p>
<div id="TTREP313" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref537"></a><a id="CACEIDBI"></a>Table 9-1 Performance and recovery tradeoffs</p>
<table class="cellalignment5810" title="Performance and recovery tradeoffs" summary="Performance and recovery tradeoffs" dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t4">Type of behavior</th>
<th class="cellalignment5811" id="r1c2-t4">Asynchronous replication (default)</th>
<th class="cellalignment5811" id="r1c3-t4">Return receipt</th>
<th class="cellalignment5811" id="r1c4-t4">Return twosafe</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t4" headers="r1c1-t4">
<p>Commit sequence</p>
</td>
<td class="cellalignment5812" headers="r2c1-t4 r1c2-t4">
<p>Each transaction is committed first on the master database.</p>
</td>
<td class="cellalignment5812" headers="r2c1-t4 r1c3-t4">
<p>Each transaction is committed first on the master database</p>
</td>
<td class="cellalignment5812" headers="r2c1-t4 r1c4-t4">
<p>Each transaction is committed first on the subscriber database.</p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t4" headers="r1c1-t4">
<p>Performance on master</p>
</td>
<td class="cellalignment5812" headers="r3c1-t4 r1c2-t4">
<p>Shortest response time and best throughput because there is no log wait between transactions or before the commit on the master.</p>
</td>
<td class="cellalignment5812" headers="r3c1-t4 r1c3-t4">
<p>Longer response time and less throughput than asynchronous.</p>
<p>The application is blocked for the duration of the network round-trip after commit. Replicated transactions are more serialized than with asynchronous replication, which results in less throughput.</p>
</td>
<td class="cellalignment5812" headers="r3c1-t4 r1c4-t4">
<p>Longest response time and least throughput.</p>
<p>The application is blocked for the duration of the network round-trip and remote commit on the subscriber before the commit on the master. Transactions are fully serialized, which results in the least throughput.</p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t4" headers="r1c1-t4">
<p>Effect of a runtime error</p>
</td>
<td class="cellalignment5812" headers="r4c1-t4 r1c2-t4">
<p>Because the transaction is first committed on the master database, errors that occur when committing on a subscriber require the subscriber to be either manually corrected or destroyed and then recovered from the master database.</p>
</td>
<td class="cellalignment5812" headers="r4c1-t4 r1c3-t4">
<p>Because the transaction is first committed on the master database, errors that occur when committing on a subscriber require the subscriber to be either manually corrected or destroyed and then recovered from the master database.</p>
</td>
<td class="cellalignment5812" headers="r4c1-t4 r1c4-t4">
<p>Because the transaction is first committed on the subscriber database, errors that occur when committing on the master require the master to be either manually corrected or destroyed and then recovered from the subscriber database.</p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t4" headers="r1c1-t4">
<p>Failover after failure of master</p>
</td>
<td class="cellalignment5812" headers="r5c1-t4 r1c2-t4">
<p>If the master fails and the subscriber takes over, the subscriber may be behind the master and must reprocess data feeds and be able to remove duplicates.</p>
</td>
<td class="cellalignment5812" headers="r5c1-t4 r1c3-t4">
<p>If the master fails and the subscriber takes over, the subscriber may be behind the master and must reprocess data feeds and be able to remove duplicates.</p>
</td>
<td class="cellalignment5812" headers="r5c1-t4 r1c4-t4">
<p>If the master fails and the subscriber takes over, the subscriber is at least up to date with the master. It is also possible for the subscriber to be ahead of the master if the master fails before committing a transaction it had replicated to the subscriber.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" -->
<p>In addition to the performance and recovery tradeoffs between the two return services, you should also consider the following:</p>
<ul>
<li>
<p>Return receipt can be used in more configurations, whereas return twosafe can only be used in a bidirectional configuration or an active standby pair.</p>
</li>
<li>
<p>Return twosafe enables you to specify a &#34;local action&#34; to be taken on the master database in the event of a timeout or other error encountered when replicating a transaction to the subscriber database.</p>
</li>
</ul>
<p>A transaction is classified as return receipt or return twosafe when the application updates a table that is configured for either return receipt or return twosafe. Once a transaction is classified as either return receipt or return twosafe, it remains so, even if the replication scheme is altered before the transaction completes.</p>
<p>For more information about return services, see <a href="#CACGACAG">&#34;Using a return service in a classic replication scheme&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CACJGJBH"></a>
<div id="TTREP650" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Distributing workloads</h3>
<p>Consider configuring the databases to distribute application workloads and make the best use of a limited number of servers. For example, it may be efficient and economical to configure the databases in a bidirectional distributed workload replication scheme so that each serves as both master and subscriber, rather than as separate master and subscriber databases. However, a distributed workload scheme works best with applications that primarily read from the databases. Implementing a distributed workload scheme for applications that frequently write to the same elements in a database may diminish performance and require that you implement a solution to prevent or manage update conflicts, as described in <a href="conflict.htm#BABGABJH">Chapter 13, &#34;Resolving Replication Conflicts&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACCEDBC"></a>
<div id="TTREP314" class="sect1">
<h2 class="sect1">Defining a classic replication scheme<a id="sthref538"></a></h2>
<p>After you have designed a classic replication scheme, use the <a id="sthref539"></a><code>CREATE REPLICATION</code> SQL statement to apply the scheme to your databases. You must have the <a id="sthref540"></a><a id="sthref541"></a><code>ADMIN</code> privilege to use the <code>CREATE REPLICATION</code> statement.</p>
<p><a href="#CACCDBFG">Table 9-2</a> shows the components of a replication scheme and identifies the clauses associated with the topics in this chapter. The complete syntax for the <code>CREATE REPLICATION</code> statement is provided in <a class="olink TTSQL" href="../TTSQL/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span></a>.</p>
<div id="TTREP315" class="tblhruleformal">
<p class="titleintable"><a id="sthref542"></a><a id="CACCDBFG"></a>Table 9-2 Components of a replication scheme</p>
<table class="cellalignment5810" title="Components of a replication scheme" summary="This table provides references to information about the components of a replication scheme." dir="ltr">
<thead>
<tr class="cellalignment5804">
<th class="cellalignment5811" id="r1c1-t5">Component</th>
<th class="cellalignment5811" id="r1c2-t5">See...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r2c1-t5" headers="r1c1-t5">
<p><code>CREATE REPLICATION</code> <code><span class="codeinlineitalic">Owner.SchemeName</span></code></p>
</td>
<td class="cellalignment5812" headers="r2c1-t5 r1c2-t5">
<p><a href="#CHDFDBIA">&#34;Owner of the replication scheme and replicated objects&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r3c1-t5" headers="r1c1-t5">
<p><code>ELEMENT</code> <code><span class="codeinlineitalic">ElementName</span></code> <code><span class="codeinlineitalic">ElementType</span></code></p>
</td>
<td class="cellalignment5812" headers="r3c1-t5 r1c2-t5">
<p><a href="#CHDFFAII">&#34;Defining replication elements&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r4c1-t5" headers="r1c1-t5">
<p><code>[</code><code><span class="codeinlineitalic">CheckConflicts</span></code><code>]</code></p>
</td>
<td class="cellalignment5812" headers="r4c1-t5 r1c2-t5">
<p><a href="#CHDHACHH">&#34;Checking for replication conflicts on table elements&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r5c1-t5" headers="r1c1-t5">
<p><code>{MASTER|PROPAGATOR}</code> <code><span class="codeinlineitalic">DatabaseName</span></code> <code>ON</code> <code><span class="codeinlineitalic">&#34;HostName&#34;</span></code></p>
</td>
<td class="cellalignment5812" headers="r5c1-t5 r1c2-t5">
<p><a href="#CACEIBHB">&#34;Database names&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r6c1-t5" headers="r1c1-t5">
<p><code>[TRANSMIT {NONDURABLE|DURABLE}]</code></p>
</td>
<td class="cellalignment5812" headers="r6c1-t5 r1c2-t5">
<p><a href="#CHDIAFIE">&#34;Setting transmit durability on DATASTORE element&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r7c1-t5" headers="r1c1-t5">
<p><code>SUBSCRIBER</code> <code><span class="codeinlineitalic">DatabaseName</span></code> <code>ON</code> <code><span class="codeinlineitalic">&#34;HostName&#34;</span></code></p>
</td>
<td class="cellalignment5812" headers="r7c1-t5 r1c2-t5">
<p><a href="#CACEIBHB">&#34;Database names&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r8c1-t5" headers="r1c1-t5">
<p><code>[</code><code><span class="codeinlineitalic">ReturnServiceAttribute</span></code><code>]</code></p>
</td>
<td class="cellalignment5812" headers="r8c1-t5 r1c2-t5">
<p><a href="#CACGACAG">&#34;Using a return service in a classic replication scheme&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r9c1-t5" headers="r1c1-t5">
<p><code>INCLUDE|EXCLUDE</code></p>
</td>
<td class="cellalignment5812" headers="r9c1-t5 r1c2-t5">
<p><a href="#CHDECAJF">&#34;Defining the DATASTORE element&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r10c1-t5" headers="r1c1-t5">
<p><code>STORE</code> <code><span class="codeinlineitalic">DatabaseName</span></code> <code><span class="codeinlineitalic">DataStoreAttributes</span></code></p>
</td>
<td class="cellalignment5812" headers="r10c1-t5 r1c2-t5">
<p><a href="#CACDBEJD">&#34;Setting STORE attributes in a classic replication scheme&#34;</a></p>
</td>
</tr>
<tr class="cellalignment5804">
<td class="cellalignment5812" id="r11c1-t5" headers="r1c1-t5">
<p><code>[</code><code><span class="codeinlineitalic">NetworkOperation</span></code><code>]</code></p>
</td>
<td class="cellalignment5812" headers="r11c1-t5 r1c2-t5">
<p><a href="#CACBGCGA">&#34;Configuring network operations for a classic replication scheme&#34;</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Naming errors in your <code>CREATE REPLICATION</code> statement are often hard to troubleshoot, so take the time to check and double-check the element, database, and host names for mistakes.</div>
<p>The replication scheme used by a database persists across system reboots. Modify a replication scheme by using the <code>ALTER REPLICATION</code> statement. See <a href="alter.htm#BABDFABA">Chapter 10, &#34;Altering a Classic Replication Scheme&#34;</a>.</p>
<a id="CHDFDBIA"></a>
<div id="TTREP316" class="sect2">
<h3 class="sect2">Owner of the replication scheme and replicated objects<a id="sthref543"></a><a id="sthref544"></a><a id="sthref545"></a></h3>
<p>The replication scheme and the replicated objects must be owned by the same user on every database in a replication scheme. To ensure that there is a common owner across all databases, you should explicitly specify the user and replication scheme in the <code>CREATE REPLICATION</code> statement.</p>
<p>For example, create a replication scheme named <code>repscheme</code> owned by user <code>repl</code>. The first line of the <code>CREATE REPLICATION</code> statement for <code>repscheme</code> is:</p>
<pre>CREATE REPLICATION rep1.repscheme
</pre></div>
<!-- class="sect2" -->
<a id="CACEIBHB"></a>
<div id="TTREP317" class="sect2">
<h3 class="sect2">Database names</h3>
<p>These are the <a id="sthref546"></a><a id="sthref547"></a><a id="sthref548"></a>roles of the databases in a replication scheme:</p>
<ul>
<li>
<p><span class="italic"><a id="sthref549"></a>Master</span>: Applications update the master database. The master sends the updates to the propagator or to the subscribers directly.</p>
</li>
<li>
<p><span class="italic"><a id="sthref550"></a>Propagator</span>: The propagator database receives updates from the master database and sends them to subscriber databases.</p>
</li>
<li>
<p><span class="italic"><a id="sthref551"></a>Subscriber</span>: Subscribers receive updates from the propagator or the master.</p>
</li>
</ul>
<p>Before you define the replication scheme, you need to define the data source names (DSNs) for the databases in the replication scheme. On UNIX platforms, create an <code>odbc.ini</code> file. On Windows, use the ODBC Administrator to name the databases and set connection attributes. See <a href="gettingstarted.htm#CHDIECBB">&#34;Step 1: Create the DSNs for the master and the subscriber&#34;</a> for an example.</p>
<p>Each database &#34;name&#34; specified in a replication scheme must match the prefix of the database file name without the path specified for the <code>DataStore</code> data store attribute in the DSN definition. Use the same name for both the <code>DataStore</code> and <code>Data Source Name</code> data store attributes in each DSN definition. If the database path is <code><span class="codeinlineitalic">directory</span></code><code>/</code><code><span class="codeinlineitalic">subdirectory</span></code><code>/foo.ds0</code>, then <code>foo</code> is the database name that you should use. For example, this entry in an <code>odbc.ini</code> file shows a <code>Data Source Name</code> (DSN) of <code>masterds</code>, while the <code>DataStore</code> value shows the path for <code>masterds</code>:</p>
<pre>[masterds]
DataStore=/tmp/masterds
DatabaseCharacterSet=AL32UTF8
ConnectionCharacterSet=AL32UTF8
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBJBBB"></a>
<div id="TTREP413" class="sect1">
<h2 class="sect1">Table requirements<a id="sthref552"></a><a id="sthref553"></a> and restrictions for classic replication schemes</h2>
<p>The name and owner of replicated tables participating in the replication scheme must be identical on the master and subscriber databases. However, the definition for the columns of replicated tables participating in the replication scheme do not necessarily need to be identical. For more information on the column definition options, see <a href="attrib.htm#CHDFABDJ">&#34;Column definition options for replicated tables&#34;</a>.</p>
<p>Replicated tables must have one of the following:</p>
<ul>
<li>
<p>A primary key</p>
</li>
<li>
<p>A unique index over non-nullable columns</p>
</li>
</ul>
<p>Replication uses the primary key or unique index to uniquely identify each row in the replicated table. Replication always selects the first usable index that turns up in a sequential check of the table&#39;s index array. If there is no primary key, replication selects the first unique index without <code>NULL</code> columns it encounters. The selected index on the replicated table in the master database must also exist on its counterpart table in the subscriber.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The keys on replicated tables are transmitted in each update record to the subscribers. Smaller keys are transmitted more efficiently.</div>
<p>Replicated tables have these data type restrictions:</p>
<ul>
<li>
<p><a id="sthref554"></a><a id="sthref555"></a><a id="sthref556"></a><a id="sthref557"></a><a id="sthref558"></a><a id="sthref559"></a><a id="sthref560"></a><code>VARCHAR2</code>, <code>NVARCHAR2</code>, <code>VARBINARY</code> and <code>TT_VARCHAR</code> columns in replicated tables is limited to a size of 4 megabytes. For a <code>VARCHAR2</code> column, the maximum length when using character length semantics depends on the number of bytes each character occupies when using a particular database character set. For example, if the character set requires four bytes for each character, the maximum possible length is one million characters. For an <code>NVARCHAR2</code> column, which requires two bytes for each character, the maximum length when using character length semantics is two million characters.</p>
</li>
<li>
<p><a id="sthref561"></a>Columns with the <code>BLOB</code> data type in replicated tables are limited to a size of 16 megabytes. Columns with the <code>CLOB</code> or <code>NCLOB</code> data type in replicated tables are limited to a size of 4 megabytes.</p>
</li>
<li>
<p>A primary key column cannot have a LOB data type.</p>
</li>
</ul>
<p>You cannot replicate tables with <a id="sthref562"></a><a id="sthref563"></a>compressed columns.</p>
<p>If these requirements and restrictions present difficulties, you may want to consider using the Transaction Log API (XLA) as a replication mechanism. See <a class="olink TTCDV307" href="../TTCDV/xla_event.htm#TTCDV307">&#34;Using XLA as a replication mechanism&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
</div>
<!-- class="sect1" -->
<a id="CACHDEEJ"></a>
<div id="TTREP813" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Restrictions for classic replication schemes involving multiple masters</h2>
<p>Designing bidirectional replication schemes are a commonly used design for classic replication. The original design for bidirectional replication was to include only two masters. However, you are not restricted in limiting your design to only two masters in your bidirectional replication design.</p>
<p>If you decide to use more than two masters (a multi-master topology) and if you decide to use <code>ttRepAdmin -duplicate</code> to duplicate another store, you must reset the replication states for the duplicated stores subscribers with the <code>ttRepSubscriberStateSet</code> built-in procedure to set all subscribers to the appropriate state.</p>
<p>As shown in <a href="#CACBFEJJ">Figure 9-3</a>, you have three masters (<code>master1</code>, <code>master2</code>, and <code>master3</code>) each configured with a bidirectional replication scheme with each other. If you decide to re-create <code>master2</code> from <code>master1</code> by executing <code>ttRepAdmin -duplicate</code> on <code>master1</code>, then you must call the <code>ttRepSubscriberStateSet</code> built-in procedure on <code>master2</code> to set the replication states for <code>master3</code>.</p>
<div id="TTREP818" class="figure">
<p class="titleinfigure"><a id="CACBFEJJ"></a>Figure 9-3 Multiple masters involved in bidirectional replication scheme</p>
<img width="340" height="227" src="img/multimaster.gif" alt="Description of Figure 9-3 follows"/><br/>
<a id="sthref564" href="img_text/multimaster.htm">Description of &#34;Figure 9-3 Multiple masters involved in bidirectional replication scheme&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="CHDFFAII"></a>
<div id="TTREP318" class="sect1">
<h2 class="sect1">Defining replication elements<a id="sthref565"></a></h2>
<p>A classic replication scheme consists of one or more <a id="sthref566"></a><a id="sthref567"></a><a id="sthref568"></a><code>ELEMENT</code> <a id="sthref569"></a>descriptions that contain the name of the element, its type (<code>DATASTORE</code>, <code>TABLE</code>, or <code>SEQUENCE</code>), the master database on which it is updated, and the subscriber databases to which the updates are replicated.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you want to replicate a database with cache groups, see <a href="standbycache.htm#BABHBJDG">Chapter 6, &#34;Administering an Active Standby Pair with Cache Groups&#34;</a>.</div>
<p>These are restrictions on elements:</p>
<ul>
<li>
<p>Do not include a specific object (table, sequence or database) in more than one element description.</p>
</li>
<li>
<p>Do not define the same element in the role of both master and propagator.</p>
</li>
<li>
<p>An element must include the database on the current host as either the master, subscriber or propagator.</p>
</li>
<li>
<p>Element names must be unique within a replication scheme.</p>
</li>
</ul>
<p>The correct way to define elements in a multiple subscriber scheme is described in <a href="#CHDBEIBI">&#34;Multiple subscriber classic replication schemes with return services and a log failure threshold&#34;</a>. The correct way to propagate elements is described in <a href="#CHDCHGCC">&#34;Propagation scheme&#34;</a>.</p>
<p>The name of each element in a scheme can be used to identify the element if you decide later to drop or modify the element by using the <code>ALTER REPLICATION</code> statement.</p>
<p>You can add tables, sequences, and databases to an existing replication scheme. See <a href="alter.htm#BGBIIDIG">&#34;Altering a classic replication scheme&#34;</a>. You can drop a table or sequence from a database that is part of a replication scheme after you exclude the table or sequence from the replication scheme. See <a href="alter.htm#BGBBECJH">&#34;Dropping a table or sequence from a classic replication scheme&#34;</a>.</p>
<p>The rest of this section includes the following topics:</p>
<ul>
<li>
<p><a href="#CHDECAJF">Defining the DATASTORE element</a></p>
</li>
<li>
<p><a href="#CHDHCJHF">Defining table elements</a></p>
</li>
<li>
<p><a href="#CHDCAFHJ">Replicating tables with foreign key relationships in a classic replication scheme</a></p>
</li>
<li>
<p><a href="#CHDCEHDB">Replicating sequences</a></p>
</li>
<li>
<p><a href="#CHDHCAHD">Views and materialized views in a replicated database</a></p>
</li>
</ul>
<a id="CHDECAJF"></a>
<div id="TTREP319" class="sect2">
<h3 class="sect2">Defining the DATASTORE <a id="sthref570"></a><a id="sthref571"></a><a id="sthref572"></a>element</h3>
<p>To replicate the entire contents of the master database (<code>masterds</code>) to the subscriber database (<code>subscriberds</code>), the <code>ELEMENT</code> description (named <code>ds1</code>) might look like the following:</p>
<pre>ELEMENT ds1 DATASTORE
  MASTER masterds ON &#34;system1&#34;
  SUBSCRIBER subscriberds ON &#34;system2&#34;
</pre>
<p>Identify a database host using the host name returned by the <code><a id="sthref573"></a><a id="sthref574"></a>hostname</code> operating system command. It is good practice to surround a host name with double quotes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot replicate a temporary <a id="sthref575"></a>database.</div>
<p>You can choose to exclude certain tables and sequences from the <code>DATASTORE</code> element by using the <a id="sthref576"></a><code>EXCLUDE TABLE</code> and <a id="sthref577"></a><code>EXCLUDE SEQUENCE</code> clauses of the <code>CREATE REPLICATION</code> statement. When you use the <code>EXCLUDE</code> clauses, the entire database is replicated to all subscribers in the element <span class="italic">except</span> for the objects that are specified in the <code>EXCLUDE</code> clauses. Use only one <code>EXCLUDE TABLE</code> and one <code>EXCLUDE SEQUENCE</code> clause in an element description. For example, this element description excludes two tables and one sequence:</p>
<pre>ELEMENT ds1 DATASTORE
  MASTER masterds ON &#34;system1&#34;
  SUBSCRIBER subscriberds ON &#34;system2&#34;
  EXCLUDE TABLE ttuser.tab1, ttuser.tab2
  EXCLUDE SEQUENCE ttuser.seq1
</pre>
<p>You can choose to include only certain tables and sequences in the database by using the <a id="sthref578"></a><code>INCLUDE TABLE</code> and <a id="sthref579"></a><code>INCLUDE SEQUENCE</code> clauses of the <code>CREATE REPLICATION</code> statement. When you use the <code>INCLUDE</code> clauses, <span class="italic">only</span> the objects that are specified in the <code>INCLUDE</code> clauses are replicated to each subscriber in the element. Use only one <code>INCLUDE TABLE</code> and one <code>INCLUDE SEQUENCE</code> clause in an element description. For example, this element description includes one table and two sequences:</p>
<pre>ELEMENT ds1 DATASTORE
  MASTER masterds ON &#34;system1&#34;
  SUBSCRIBER subscriberds ON &#34;system2&#34;
  INCLUDE TABLE ttuser.tab3
  INCLUDE SEQUENCE ttuser.seq2, ttuser.seq3
</pre></div>
<!-- class="sect2" -->
<a id="CHDHCJHF"></a>
<div id="TTREP320" class="sect2">
<h3 class="sect2">Defining <a id="sthref580"></a><a id="sthref581"></a>table elements</h3>
<p>To replicate the <code>ttuser.tab1</code> and <code>ttuser.tab2</code> tables from a master database (named <code>masterds</code> and located on a host named <code>system1</code>) to a subscriber database (named <code>subscriberds</code> on a host named <code>system2</code>), the <code>ELEMENT</code> descriptions (named <code>a</code> and <code>b</code>) might look like the following:</p>
<pre>ELEMENT a TABLE ttuser.tab1
  MASTER masterds ON &#34;system1&#34;
 SUBSCRIBER subscriberds ON &#34;system2&#34;
ELEMENT b TABLE ttuser.tab2
  MASTER masterds ON &#34;system1&#34;
  SUBSCRIBER subscriberds ON &#34;system2&#34;
</pre>
<p>For requirements for tables in classic replication schemes, see <a href="#CHDBJBBB">&#34;Table requirements and restrictions for classic replication schemes&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCAFHJ"></a>
<div id="TTREP366" class="sect2">
<h3 class="sect2">Replicating tables with <a id="sthref582"></a><a id="sthref583"></a><a id="sthref584"></a><a id="sthref585"></a>foreign key relationships in a classic replication scheme</h3>
<p>In a classic replication scheme, you may choose to replicate all or a subset of tables that have foreign key relationships with one another. To do so, create the tables and the foreign key relationship on each master and subscriber. Then, add the tables to the replication scheme with the <code><a id="sthref586"></a>ALTER REPLICATION ADD ELEMENT</code> statement on each master and subscriber.</p>
<p>However, if the foreign key relationships have been configured with <code>ON DELETE CASCADE</code>, then you must create all of the tables before the replication scheme is created. Then, configure the replication scheme with the <code><a id="sthref587"></a>CREATE REPLICATION</code> statment to include all tables with either the <code>DATASTORE</code> element (that does not exclude any of the tables) or the <code>TABLE</code> element for every table that is involved in the relationship.</p>
<p>You cannot add a table with a foreign key relationship configured with <code>ON DELETE CASCADE</code> to the replication scheme after the replication scheme is created with the <code>ALTER REPLICATION</code> statement. Instead, you must drop the replication scheme, create the new table with the foreign key relationship with <code>ON DELETE CASCADE</code>, and then create a new replication scheme that includes all of the related tables.</p>
<p>If a table with a foreign key configured with <code>ON DELETE CASCADE</code> is replicated, then the matching foreign key on the subscriber must also be configured with <code>ON DELETE CASCADE</code>. In addition, you must replicate any other table with a foreign key relationship to that table. This requirement prevents foreign key conflicts from occurring on subscriber tables when a cascade deletion occurs on the master database.</p>
<p>TimesTen replicates a cascade deletion as a single operation, rather than replicating to the subscriber each individual row deletion which occurs on the child table when a row is deleted on the parent. As a result, any row on the child table on the subscriber database, which contains the foreign key value that was deleted on the parent table, is also deleted, even if that row did not exist on the child table on the master database.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCEHDB"></a>
<div id="TTREP368" class="sect2">
<h3 class="sect2">Replicating sequences<a id="sthref588"></a><a id="sthref589"></a></h3>
<p>Sequences are replicated unless you exclude them from the replication scheme or unless they have the <code>CYCLE</code> attribute. Replication of sequences is optimized by reserving a range of sequence numbers on the standby database each time a sequence is updated on the active database. Reserving a range of sequence numbers reduces the number of updates to the transaction log. The range of sequence numbers is called a <span class="italic">cache</span>. Sequence updates on the active database are replicated only when they are followed by or used in replicated transactions.</p>
<p>Consider a sequence <code>my.seq</code> with a <code>MINVALUE</code> of 1, an <code>INCREMENT</code> of 1 and the default <code><span class="codeinlineitalic">Cache</span></code> of 20. The very first time that you use <code>my.seq.NEXTVAL</code>, the current value of the sequence on the master database is changed to 2, and a new current value of 21 (20+1) is replicated to the subscriber. The next 19 references to <code>my.seq.NEXTVAL</code> on the master database result in no new current value being replicated, because the current value of 21 on the subscriber database is still ahead of the current value on the master. On the twenty-first reference to <code>my.seq.NEXTVAL</code>, a new current value of 41 (21+20) is transmitted to the subscriber database because the subscriber&#39;s previous current value of 21 is now behind the value of 22 on the master.</p>
<p>Sequence replication has these restrictions:</p>
<ul>
<li>
<p>Sequences with the <code>CYCLE</code> attribute cannot be replicated.</p>
</li>
<li>
<p>The definition of the replicated sequence on each peer database must be identical.</p>
</li>
<li>
<p>No conflict checking is performed on sequences. If you make updates to sequences in both databases in a bidirectional replication configuration without using the <code>RETURN TWOSAFE</code> service, it is possible for both sequences to return the identical <code>NEXTVAL</code>.</p>
</li>
</ul>
<p>If you need to use sequences in a bidirectional replication scheme where updates may occur on either peer, you may instead use a <span class="italic">nonreplicated</span> sequence with different <code>MINVALUE</code> and <code>MAXVALUE</code> attributes on each database to avoid conflicts. For example, you may create sequence <code>my.seq</code> on database <code>DS1</code> with a <code>MINVALUE</code> of 1 and a <code>MAXVALUE</code> of 100, and the same sequence on <code>DS2</code> with a <code>MINVALUE</code> of 101 and a <code>MAXVALUE</code> of 200. Then, if you configure <code>DS1</code> and <code>DS2</code> with a bidirectional replication scheme, you can make updates to either database using the sequence <code>my.seq</code> with the guarantee that the sequence values never conflict. Be aware that if you are planning to use <code>ttRepAdmin</code> <code>-duplicate</code> to recover from a failure in this configuration, you must drop and then re-create the sequence with a new <code>MINVALUE</code> and <code>MAXVALUE</code> after you have performed the duplicate operation.</p>
<p>Operations on sequences such as <code>SELECT my.seq.NEXTVAL FROM sys.dual</code>, while incrementing the sequence value, are not replicated until they are followed by transactions on replicated tables. A side effect of this behavior is that these sequence updates are not purged from the log until followed by transactions on replicated tables. This causes <a id="sthref590"></a><code>ttRepSubscriberWait</code> and <code>ttRepAdmin</code> <code>-wait</code> to fail when only these sequence updates are present at the end of the log.</p>
<p>To replicate the <code>ttuser.seq</code> sequence from a master database (named <code>masterds</code> and located on a host named <code>system1</code>) to a subscriber database (named <code>subscriberds</code> on a host named <code>system2</code>), the element description (named <code>a</code>) might look like the following:</p>
<pre>ELEMENT a SEQUENCE ttuser.seq
  MASTER masterds ON &#34;system1&#34;
  SUBSCRIBER subscriberds ON &#34;system2&#34;
</pre></div>
<!-- class="sect2" -->
<a id="CHDHCAHD"></a>
<div id="TTREP367" class="sect2">
<h3 class="sect2">Views and materialized views<a id="sthref591"></a><a id="sthref592"></a> in a replicated database</h3>
<p>A materialized view is a summary of data selected from one or more TimesTen tables, called detail tables. Although you cannot replicate materialized views directly, you can replicate their underlying detail tables in the same manner as you would replicate regular TimesTen tables.</p>
<p>The detail tables on the master and subscriber databases can be referenced by materialized views. However, TimesTen replication verifies only that the replicated detail tables have the same structure on both the master and subscriber. It does not enforce that the materialized views are the same on each database.</p>
<p>If you replicate an entire database containing a materialized or non-materialized view as a <a id="sthref593"></a><a id="sthref594"></a><code>DATASTORE</code> element, only the detail tables associated with the view are replicated. The view itself is not replicated. A matching view can be defined on the subscriber database, but is not required. If detail tables are replicated, TimesTen automatically updates the corresponding view.</p>
<p>Materialized views defined on replicated tables may result in replication failures or inconsistencies if the materialized view is specified so that overflow or underflow conditions occur when the materialized view is updated.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHACHH"></a>
<div id="TTREP322" class="sect1">
<h2 class="sect1">Checking for replication conflicts on table elements<a id="sthref595"></a></h2>
<p>When databases are configured for bidirectional replication, there is a potential for replication conflicts to occur if the same table row in two or more databases is independently updated at the same time.</p>
<p>Such conflicts can be detected and resolved on a table-by-table basis by including timestamps in the replicated tables and configuring the replication scheme with the optional <code>CHECK CONFLICTS</code> clause in each table&#39;s element description.</p>
<p>See <a href="conflict.htm#BABGABJH">Chapter 13, &#34;Resolving Replication Conflicts&#34;</a> for a complete discussion on replication conflicts and how to configure the <code>CHECK CONFLICTS</code> clause in the <code>CREATE REPLICATION</code> statement.</p>
</div>
<!-- class="sect1" -->
<a id="CHDIAFIE"></a>
<div id="TTREP323" class="sect1">
<h2 class="sect1">Setting transmit durability on DATASTORE element<a id="sthref596"></a><a id="sthref597"></a></h2>
<p>A master database configured for asynchronous or return receipt replication is durable by default. This means that log records are committed to disk when transactions are committed. The master database can be set to nondurable by including the <code>TRANSMIT NONDURABLE</code> clause in the element description.</p>
<p>Transaction records in the master database log buffer are, by default, flushed to disk before they are forwarded to subscribers. If the entire master database is replicated (<code>ELEMENT</code> is of type <code>DATASTORE</code>), you can improve replication performance by eliminating the master&#39;s flush-log-to-disk operation from the replication cycle. This is done by including a <code>TRANSMIT NONDURABLE</code> clause in the element description. The <code>TRANSMIT</code> setting has no effect on the subscriber. The transaction records on the subscriber database are always flushed to disk.</p>
<p>Master databases configured for return twosafe replication are nondurable by default and cannot be made durable. Setting <code>TRANSMIT DURABLE</code> on a database that is configured for return twosafe replication has no effect on return twosafe transactions.</p>
<div id="TTREP324" class="example">
<p class="titleinexample"><a id="sthref598"></a>Example 9-1 Replicating the entire master database with TRANSMIT NONDURABLE</p>
<p>To replicate the entire contents of the master database (<code>masterds</code>) to the subscriber database (<code>subscriberds</code>) and to eliminate the flush-log-to-disk operation, your element description (named <code>a</code>) might look like the following:</p>
<pre>ELEMENT a DATASTORE
  MASTER masterds ON &#34;system1&#34;
  TRANSMIT NONDURABLE
  SUBSCRIBER subscriberds ON &#34;system2&#34;
</pre></div>
<!-- class="example" -->
<p>In general, if a master database fails, you have to initiate the <a id="sthref599"></a><code>ttRepAdmin</code> <code>-duplicate</code> operation described in <a href="failure.htm#CFHBBHBH">&#34;Recovering a failed database&#34;</a> to recover the failed master from the subscriber database. This is always true for a master database configured with <code>TRANSMIT DURABLE</code>.</p>
<p>A database configured as <code>TRANSMIT NONDURABLE</code> is recovered automatically by the subscriber replication agent if it is configured in the specific type of bidirectional scheme described in <a href="failure.htm#CFHHHGGG">&#34;Automatic catch-up of a failed master database&#34;</a>. Otherwise, you must follow the procedures described in <a href="failure.htm#CACIBCCA">&#34;Recovering nondurable databases&#34;</a> to recover a failed nondurable database.</p>
</div>
<!-- class="sect1" -->
<a id="CACGACAG"></a>
<div id="TTREP325" class="sect1">
<h2 class="sect1">Using a return service<a id="sthref600"></a><a id="sthref601"></a> in a classic replication scheme</h2>
<p>You can configure your replication scheme with a return service to ensure a higher level of confidence that replicated data is consistent on both the master and subscriber databases. This section describes how to configure and manage the return receipt and return twosafe services.</p>
<p>You can specify a return service for table elements and database elements for any subscriber defined in a <code>CREATE REPLICATION</code> or <code>ALTER REPLICATION</code> statement.</p>
<p>For full details on how to configure a return service for your master and subscribers, see <a href="attrib.htm#CHDHCDCB">&#34;Using a return service&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CACDBEJD"></a>
<div id="TTREP337" class="sect1">
<h2 class="sect1">Setting STORE attribute<a id="sthref602"></a>s in a classic replication scheme</h2>
<p>The <code>STORE</code> attributes clause in either the <code>CREATE REPLICATION</code> and <code>ALTER REPLICATION</code> statements are used to set optional behavior for return services, compression, timeouts, durable commit behavior, conflict reporting, and table definition checking. For full details on how to use and configure the <code>STORE</code> attributes for a classic replication scheme, see <a href="attrib.htm#CHDFAGAB">&#34;Setting STORE attributes&#34;</a>. See <a class="olink TTSQL289" href="../TTSQL/state.htm#TTSQL289">&#34;CREATE ACTIVE STANDBY PAIR&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for a description of all <code>STORE</code> attributes.</p>
</div>
<!-- class="sect1" -->
<a id="CACBGCGA"></a>
<div id="TTREP362" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Configuring network operations<a id="sthref603"></a> for a classic replication scheme</h2>
<p>If your replication host has more than one network interface, you may want to configure replication to use an interface other than the default interface. For full details on how to configure more than one network interface for a classic replication scheme, see <a href="attrib.htm#CHDBICJF">&#34;Configuring network interfaces with the ROUTE clause&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDJCADB"></a>
<div id="TTREP369" class="sect1">
<h2 class="sect1">Classic replication scheme syntax examples<a id="sthref604"></a></h2>
<p>The following examples in this section illustrate how to configure a variety of classic replication schemes:</p>
<ul>
<li>
<p><a href="#CHDEJAEA">Single classic subscriber schemes</a></p>
</li>
<li>
<p><a href="#CHDBEIBI">Multiple subscriber classic replication schemes with return services and a log failure threshold</a></p>
</li>
<li>
<p><a href="#CHDGGGCC">Replicating tables to different subscribers</a></p>
</li>
<li>
<p><a href="#CHDCHGCC">Propagation scheme</a></p>
</li>
<li>
<p><a href="#CHDFIGGC">Bidirectional split workload schemes</a></p>
</li>
<li>
<p><a href="#CHDBDHCI">Bidirectional distributed workload scheme</a></p>
</li>
</ul>
<a id="CHDEJAEA"></a>
<div id="TTREP370" class="sect2">
<h3 class="sect2">Single classic subscriber schemes</h3>
<p>The classic replication scheme shown in <a href="#CACHIFBF">Example 9-2</a> is a single master and subscriber unidirectional replication scheme. The two databases are located on separate hosts, <code>system1</code> and <code>system2</code>. We use the <a id="sthref605"></a><code><a href="attrib.htm#CHDFFDBE">RETURN RECEIPT</a></code> service to confirm that all transactions committed on the <code>ttuser.tab</code> table in the master database are received by the subscriber.</p>
<div id="TTREP372" class="example">
<p class="titleinexample"><a id="CACHIFBF"></a>Example 9-2 Replicating one table</p>
<pre>CREATE REPLICATION repscheme
 ELEMENT e TABLE ttuser.tab
    MASTER masterds ON &#34;system1&#34;
    SUBSCRIBER subscriberds ON &#34;system2&#34;
      RETURN RECEIPT;
</pre>
<p>The scheme shown in <a href="#CHDHHAGA">Example 9-3</a> is a single master and subscriber unidirectional replication scheme. The two databases are located on separate hosts, <code>server1</code> and <code>server2</code>. The master database, named <code>masterds</code>, replicates its entire contents to the subscriber database, named <code>subscriberds</code>.</p>
</div>
<!-- class="example" -->
<div id="TTREP374" class="example">
<p class="titleinexample"><a id="CHDHHAGA"></a>Example 9-3 Replicating entire database</p>
<pre>CREATE REPLICATION repscheme
 ELEMENT e DATASTORE
    MASTER masterds ON &#34;server1&#34;
    SUBSCRIBER subscriberds ON &#34;server2&#34;;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDBEIBI"></a>
<div id="TTREP375" class="sect2">
<h3 class="sect2">Multiple subscriber classic replication schemes with return services and a log failure threshold</h3>
<p>You can create a classic replication scheme that includes up to <a id="sthref606"></a>128 subscriber databases. If you are configuring propagator databases, you can configure up to 128 propagators. Each propagator can have up to 128 subscriber databases. See <a href="#CHDCHGCC">&#34;Propagation scheme&#34;</a> for an example of a classic replication scheme with propagator databases.</p>
<div id="TTREP377" class="example">
<p class="titleinexample"><a id="CHDBDHCB"></a>Example 9-4 Replicating to two subscribers</p>
<p>This example establishes a master database, named <code>masterds</code>, that replicates the <code>ttuser.tab</code> table to two subscriber databases, <code>subscriber1ds</code> and <code>subscriber2ds</code>, located on <code>server2</code> and <code>server3</code>, respectively. The name of the classic replication scheme is <code>twosubscribers</code>. The name of the replication element is <code>e</code>.</p>
<pre>CREATE REPLICATION twosubscribers
 ELEMENT e TABLE ttuser.tab
    MASTER masterds ON &#34;server1&#34;
    SUBSCRIBER subscriber1ds ON &#34;server2&#34;,
               subscriber2ds ON &#34;server3&#34;;
</pre></div>
<!-- class="example" -->
<div id="TTREP378" class="example">
<p class="titleinexample"><a id="CHDDHFIC"></a>Example 9-5 Replicating to two subscribers with RETURN RECEIPT</p>
<p>This example uses the basic example in <a href="#CHDBDHCB">Example 9-4</a> and adds a <code><a href="attrib.htm#CHDFFDBE">RETURN RECEIPT</a></code> attribute and a <code>STORE</code> parameter. <code><a href="attrib.htm#CHDFFDBE">RETURN RECEIPT</a></code> enables the <a id="sthref607"></a>return receipt service for both databases. The <code>STORE</code> parameter sets a <a id="sthref608"></a><a id="sthref609"></a><code>FAILTHRESHOLD</code> value of 10 to establish the maximum number of transaction log files that can accumulate on <code>masterds</code> for a subscriber before it assumes the subscriber has failed.</p>
<pre>CREATE REPLICATION twosubscribers
 ELEMENT e TABLE ttuser.tab
  MASTER masterds ON &#34;server1&#34;
  SUBSCRIBER subscriber1ds ON &#34;server2&#34;,
             subscriber2ds ON &#34;server3&#34;
  RETURN RECEIPT
 STORE masterds FAILTHRESHOLD 10;
</pre></div>
<!-- class="example" -->
<div id="TTREP379" class="example">
<p class="titleinexample"><a id="CACHEHJC"></a>Example 9-6 Enabling RETURN RECEIPT for only one subscriber</p>
<p>This <a id="sthref610"></a>example shows how to enable <code><a href="attrib.htm#CHDFFDBE">RETURN RECEIPT</a></code> for only <code>subscriber2ds</code>. Note that there is no comma after the <code>subscriber1ds</code> definition.</p>
<pre>CREATE REPLICATION twosubscribers
 ELEMENT e TABLE ttuser.tab
    MASTER masterds ON &#34;server1&#34;
    SUBSCRIBER subscriber1ds ON &#34;server2&#34;
    SUBSCRIBER subscriber2ds ON &#34;server3&#34; RETURN RECEIPT
 STORE masterds FAILTHRESHOLD 10;
</pre></div>
<!-- class="example" -->
<div id="TTREP380" class="example">
<p class="titleinexample"><a id="sthref611"></a>Example 9-7 Enabling different return services for subscribers</p>
<p>This example shows how to apply <a id="sthref612"></a><code><a href="attrib.htm#CHDFFEBC">RETURN RECEIPT BY REQUEST</a></code> to <code>subscriber1ds</code> and <code><a href="attrib.htm#CHDFFDBE">RETURN RECEIPT</a></code> to <code>subscriber2ds</code>. In this classic replication scheme, applications accessing <code>subscriber1ds</code> must use the <a id="sthref613"></a><code>ttRepSyncSet</code> procedure to enable the return services for a transaction, while <code>subscriber2ds</code> unconditionally provides return services for all transactions.</p>
<pre>CREATE REPLICATION twosubscribers
 ELEMENT e TABLE ttuser.tab
    MASTER masterds ON &#34;server1&#34;
    SUBSCRIBER subscriberds1 ON &#34;server2&#34; RETURN RECEIPT BY REQUEST
    SUBSCRIBER subscriber2ds ON &#34;server3&#34; RETURN RECEIPT
 STORE masterds FAILTHRESHOLD 10;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDGGGCC"></a>
<div id="TTREP381" class="sect2">
<h3 class="sect2">Replicating tables to different subscribers</h3>
<p>The classic replication scheme shown in <a href="#CACJEGDE">Example 9-8</a> establishes a master database, named <code>centralds</code>, that replicates four tables. <code>ttuser.tab1</code> and <code>ttuser.tab2</code> are replicated to the subscriber <code>backup1ds</code>. <code>ttuser.tab3</code> and <code>ttuser.tab4</code> are replicated to <code>backup2ds</code>. The master database is located on the <code>finance</code> server. <a id="sthref614"></a>Both subscribers are located on the <code>backupsystem</code> server.</p>
<div id="TTREP383" class="example">
<p class="titleinexample"><a id="CACJEGDE"></a>Example 9-8 Replicating tables to different subscribers</p>
<pre>CREATE REPLICATION twobackups
 ELEMENT a TABLE ttuser.tab1
  MASTER centralds ON &#34;finance&#34;
  SUBSCRIBER backup1ds ON &#34;backupsystem&#34;
 ELEMENT b TABLE ttuser.tab2
  MASTER centralds ON &#34;finance&#34;
  SUBSCRIBER backup1ds ON &#34;backupsystem&#34;
 ELEMENT d TABLE ttuser.tab3
  MASTER centralds ON &#34;finance&#34;
  SUBSCRIBER backup2ds ON &#34;backupsystem&#34;
 ELEMENT d TABLE ttuser.tab4
  MASTER centralds ON &#34;finance&#34;
  SUBSCRIBER backup2ds ON &#34;backupsystem&#34;;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDCHGCC"></a>
<div id="TTREP384" class="sect2">
<h3 class="sect2">Propagation scheme</h3>
<p>In <a href="#CHDDHDAD">Example 9-9</a>, t<a id="sthref615"></a><a id="sthref616"></a>he master database sends updates on a table to a propagator that forwards the changes to two subscribers. The master database is <code>centralds</code> on the <code>finance</code> host. The propagator database is <code>propds</code> on the <code>nethandler</code> host. The subscribers are <code>backup1ds</code> on <code>backupsystem1</code> and <code>backup2ds</code> on <code>backupsystem2</code>.</p>
<p>The classic replication scheme has two elements. For element <code>a</code>, the changes to the <code>tab</code> table on <code>centralds</code> are replicated to the <code>propds</code> propagator database. For element <code>b</code>, the changes to the <code>tab</code> table received by <code>propds</code> are replicated to the two subscribers, <code>backup1ds</code> and <code>backup2ds</code>.</p>
<div id="TTREP386" class="example">
<p class="titleinexample"><a id="CHDDHDAD"></a>Example 9-9 Propagation</p>
<pre>CREATE REPLICATION propagator
 ELEMENT a TABLE ttuser.tab
  MASTER centralds ON &#34;finance&#34;
  SUBSCRIBER propds ON &#34;nethandler&#34;
 ELEMENT b TABLE ttuser.tab
  PROPAGATOR propds ON &#34;nethandler&#34;
  SUBSCRIBER backup1ds ON &#34;backupsystem1&#34;,
             backup2ds ON &#34;backupsystem2&#34;;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDFIGGC"></a>
<div id="TTREP388" class="sect2">
<h3 class="sect2">Bidirectional split workload schemes</h3>
<p>In <a href="#CHDGIFDF">Example 9-10</a>, <a id="sthref617"></a><a id="sthref618"></a>there are two databases, <code>westds</code> on the <code>westcoast</code> host and <code>eastds</code> on the <code>eastcoast</code> host. Customers are represented in two tables: <code>waccounts</code> contains data for customers in the Western region and <code>eaccounts</code> has data for customers from the Eastern region. The <code>westds</code> database updates the <code>waccounts</code> table and replicates it to the <code>eastds</code> database. The <code>eaccounts</code> table is owned by the <code>eastds</code> database and is replicated to the <code>westds</code> database. The <code><a href="attrib.htm#CHDFFDBE">RETURN RECEIPT</a></code> attribute enables the return receipt service to guarantee that transactions on either master table are received by their subscriber.</p>
<div id="TTREP390" class="example">
<p class="titleinexample"><a id="CHDGIFDF"></a>Example 9-10 Bidirectional split workload</p>
<pre>CREATE REPLICATION r1
 ELEMENT elem_waccounts TABLE ttuser.waccounts
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34; RETURN RECEIPT
 ELEMENT elem_eaccounts TABLE ttuser.eaccounts
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34; RETURN RECEIPT;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDBDHCI"></a>
<div id="TTREP392" class="sect2">
<h3 class="sect2">Bidirectional distributed workload scheme</h3>
<p><a href="#CACHGCCH">Example 9-11</a> shows a <a id="sthref619"></a><a id="sthref620"></a>bidirectional general workload classic replication scheme in which the <code>ttuser.accounts</code> table can be updated on either the <code>eastds</code> or <code>westds</code> database. Each database is both a master and a subscriber for the <code>accounts</code> table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not use a bidirectional distributed workload replication scheme with return twosafe return service.</div>
<div id="TTREP394" class="example">
<p class="titleinexample"><a id="CACHGCCH"></a>Example 9-11 Bidirectional distributed workload scheme</p>
<pre>CREATE REPLICATION r1
 ELEMENT elem_accounts_1 TABLE ttuser.accounts
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34;
 ELEMENT elem_accounts_2 TABLE ttuser.accounts
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34;;
</pre></div>
<!-- class="example" -->
<p>When elements are replicated in this manner, the applications should write to each database in a coordinated manner to avoid simultaneous updates on the same data. To manage <a id="sthref621"></a>update conflicts, include a timestamp column of type <code>BINARY(8)</code> in the replicated table and enable timestamp comparison by including the <code>CHECK CONFLICTS</code> clause in the <code>CREATE REPLICATION</code> statement. See <a href="conflict.htm#BABGABJH">Chapter 13, &#34;Resolving Replication Conflicts&#34;</a> for a complete discussion on how to manage update conflicts.</p>
<p><a href="#CHDDGHIA">Example 9-12</a> shows that the <code>tstamp</code> timestamp <a id="sthref622"></a><a id="sthref623"></a>column is included in the <code>ttuser.accounts</code> table. The <code>CREATE REPLICATION</code> statement has been modified to include the <code>CHECK CONFLICTS</code> clause.</p>
<div id="TTREP395" class="example">
<p class="titleinexample"><a id="CHDDGHIA"></a>Example 9-12 Managing update conflicts</p>
<pre>CREATE TABLE ttuser.accounts (custname VARCHAR2(30) NOT NULL,
                       address VARCHAR2(80),
                       curbalance DEC(15,2),
                       tstamp BINARY(8),
                       PRIMARY KEY (custname));

CREATE REPLICATION r1
 ELEMENT elem_accounts_1 TABLE ttuser.accounts
  CHECK CONFLICTS BY ROW TIMESTAMP
    COLUMN tstamp
    UPDATE BY SYSTEM
    ON EXCEPTION ROLLBACK WORK
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34;
 ELEMENT elem_accounts_2 TABLE ttuser.accounts
  CHECK CONFLICTS BY ROW TIMESTAMP
    COLUMN tstamp
    UPDATE BY SYSTEM
    ON EXCEPTION ROLLBACK WORK
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34;;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGFEEHD"></a>
<div id="TTREP425" class="sect1">
<h2 class="sect1">Applying a classic replication scheme to a database<a id="sthref624"></a></h2>
<p>When you define the classic replication scheme, save the <code>CREATE REPLICATION</code> statement in a SQL file. After you have described the classic replication scheme in a SQL file, you can execute the SQL on the database using the <code>-f</code> option to the <code>ttIsql</code> utility. The syntax is:</p>
<pre><a id="sthref625"></a>ttIsql -f <span class="italic">schemefile</span>.sql -connstr &#34;dsn=<span class="italic">DSN</span>&#34;
</pre>
<div id="TTREP426" class="example">
<p class="titleinexample"><a id="sthref626"></a>Example 9-13 Creating a classic replication scheme by executing a SQL file</p>
<p>If your classic replication scheme is described in a file called <code>repscheme.sql</code>, you can execute the file on a DSN, called <code>masterDSN</code>, by entering:</p>
<pre>&gt; ttIsql -f repscheme.sql -connstr &#34;dsn=masterDSN&#34;
</pre>
<p>Under most circumstances, you should apply the same scheme to all of the replicated databases. You must invoke a separate <code>ttIsql</code> command on each host to apply the classic replication scheme.</p>
</div>
<!-- class="example" -->
<div id="TTREP427" class="example">
<p class="titleinexample"><a id="sthref627"></a>Example 9-14 Executing a SQL file on each host</p>
<p>If your classic replication scheme includes the databases <code>masterDSN</code> on host <code>S1</code>, <code>subscriber1DSN</code> on host <code>S2</code>, and <code>subscriber2DSN</code> on host <code>S3</code>, do the following:</p>
<p>On host <code>S1</code>, enter:</p>
<pre>&gt; ttIsql -f repscheme.sql -connstr &#34;dsn=masterDSN&#34;
</pre>
<p>On host <code>S2</code>, enter:</p>
<pre>&gt; ttIsql -f repscheme.sql -connstr &#34;dsn=subscriber1DSN&#34;
</pre>
<p>On host <code>S3</code>, enter:</p>
<pre>&gt; ttIsql -f repscheme.sql -connstr &#34;dsn=subscriber2DSN&#34;
</pre>
<p>You can also execute the SQL file containing your classic replication scheme from the <code>ttIsql</code> command line after connecting to a database. For example:</p>
<pre>Command&gt; run repscheme.sql;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDDBIGC"></a>
<div id="TTREP396" class="sect1">
<h2 class="sect1">Creating classic replication schemes with scripts</h2>
<p>Creating your classic replication schemes with scripts can save you time and help you avoid mistakes. This section provides some suggestions for automating the creation of replication schemes using Perl.</p>
<p>Consider the general workload bidirectional scheme shown in <a href="#CHDDFDBH">Example 9-15</a>. Entering the element description for the five tables, <code>ttuser.accounts</code>, <code>ttuser.sales</code>, <code>ttuser.orders</code>, <code>ttuser.inventory</code>, and <code>ttuser.customers</code>, would be tedious and error-prone if done manually.</p>
<div id="TTREP397" class="example">
<p class="titleinexample"><a id="CHDDFDBH"></a>Example 9-15 General workload bidirectional replication scheme</p>
<pre>CREATE REPLICATION bigscheme
 ELEMENT elem_accounts_1 TABLE ttuser.accounts
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34;
 ELEMENT elem_accounts_2 TABLE ttuser.accounts
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34;
 ELEMENT elem_sales_1 TABLE ttuser.sales
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34;
 ELEMENT elem_sales_2 TABLE ttuser.sales
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34;
 ELEMENT elem_orders_1 TABLE ttuser.orders
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34;
 ELEMENT elem_orders_2 TABLE ttuser.orders
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34;
 ELEMENT elem_inventory_1 TABLE ttuser.inventory
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34;
 ELEMENT elem_inventory_2 TABLE ttuser.inventory
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34;
 ELEMENT elem_customers_1 TABLE ttuser.customers
  MASTER westds ON &#34;westcoast&#34;
  SUBSCRIBER eastds ON &#34;eastcoast&#34;
 ELEMENT elem_customers_2 TABLE ttuser.customers
  MASTER eastds ON &#34;eastcoast&#34;
  SUBSCRIBER westds ON &#34;westcoast&#34;;
</pre>
<p>It is often more convenient to automate the process of writing a classic replication scheme with scripting. For example, the perl script shown in <a href="#CHDFHGHH">Example 9-16</a> can be used to build the scheme shown in <a href="#CHDDFDBH">Example 9-15</a>.</p>
</div>
<!-- class="example" -->
<div id="TTREP398" class="example">
<p class="titleinexample"><a id="CHDFHGHH"></a>Example 9-16 Using a Perl script to create a replication scheme</p>
<pre>@tables = qw(
  ttuser.accounts
  ttuser.sales
  ttuser.orders
  ttuser.inventory
  ttuser.customers
);

print &#34;CREATE REPLICATION bigscheme&#34;;

foreach $table (@tables) {
  $element = $table;
  $element =~ s/repl\./elem\_/;

  print &#34;\n&#34;;
  print &#34; ELEMENT $element\_1 TABLE $table\n&#34;;
  print &#34; MASTER westds ON \&#34;westcoast\&#34;\n&#34;;
  print &#34; SUBSCRIBER eastds ON \&#34;eastcoast\&#34;\n&#34;;
  print &#34; ELEMENT $element\_2 TABLE $table\n&#34;;
  print &#34; MASTER eastds ON \&#34;eastcoast\&#34;\n&#34;;
  print &#34; SUBSCRIBER westds ON \&#34;westcoast\&#34;&#34;;
 }
print &#34;;\n&#34;;
</pre>
<p>The <code>@tables</code> array shown in <a href="#CHDFHGHH">Example 9-16</a> can be obtained from some other source, such as a database. For example, you can use <code>ttIsql</code> and <code>f</code> in a Perl statement to generate a <code>@tables</code> array for all of the tables in the <code>WestDSN</code> database with the owner name <code>repl</code>:</p>
<pre>@tables = &#39;ttIsql -e &#34;tables; quit&#34; WestDSN
           | grep &#34; REPL\.&#34;&#39;;
</pre>
<p><a href="#CHDJGAHJ">Example 9-17</a> shows a modified version of the script in <a href="#CHDFHGHH">Example 9-16</a> that creates a classic replication scheme for all of the <code>repl</code> tables in the <code>WestDSN</code> database. (Note that some substitution may be necessary to remove extra spaces and line feeds from the <code>grep</code> output.)</p>
</div>
<!-- class="example" -->
<div id="TTREP399" class="example">
<p class="titleinexample"><a id="CHDJGAHJ"></a>Example 9-17 Perl script to create a replication scheme for all tables in WestDSN</p>
<pre>@tables = &#39;ttIsql -e &#34;tables; quit&#34; WestDSN
           | grep &#34; REPL\.&#34;&#39;;

print &#34;CREATE REPLICATION bigscheme&#34;;

foreach $table (@tables) {
  $table =~ s/^\s*//; # Remove extra spaces
  $table =~ s/\n//; # Remove line feeds
  $element = $table;
  $element =~ s/repl\./elem\_/;

  print &#34;\n&#34;;
  print &#34; ELEMENT $element\_1 TABLE $table\n&#34;;
  print &#34; MASTER westds ON \&#34;westcoast\&#34;\n&#34;;
  print &#34; SUBSCRIBER eastds ON \&#34;eastcoast\&#34;\n&#34;;
  print &#34; ELEMENT $element\_2 TABLE $table\n&#34;;
  print &#34; MASTER eastds ON \&#34;eastcoast\&#34;\n&#34;;
  print &#34; SUBSCRIBER westds ON \&#34;westcoast\&#34;&#34;;
 }
print &#34;;\n&#34;;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5803">
<tr>
<td class="cellalignment5812">
<table class="cellalignment5808">
<tr>
<td class="cellalignment5807"><a href="cluster.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5807"><a href="alter.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5814">
<table class="cellalignment5806">
<tr>
<td class="cellalignment5807"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5807"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5807"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5807"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5807"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5807"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>