<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-3"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Building%20Domain%20Indexes"></a><title>Building Domain Indexes</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="indextype, local domain indexes"/>
<meta name="dcterms.created" content="2017-06-09T01:57:02Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Data Cartridge Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E15882-06"/>
<meta name="dcterms.isVersionOf" content="ADDCI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ext_idx_frmwork.htm" title="Previous" type="text/html"/>
<link rel="Next" href="operators.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E15882-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-E370B5E4-BAC0-49C6-B17D-830B3A507FB4"></a> <span id="PAGE" style="display:none;">15/33</span> <!-- End Header -->
<a id="ADDCI290"></a>
<h1 id="ADDCI-GUID-E370B5E4-BAC0-49C6-B17D-830B3A507FB4" class="sect1"><span class="enumeration_chapter">8</span> Building Domain Indexes</h1>
<div>
<p>Consider domain indexes and the <code class="codeph">ODCIIndex</code> interface: how to use of domain indexes, their partitioning, applicable restrictions, and migration procedures.</p>
<p>If you use user-managed domain indexes, the information specific to their implementation is in <a href="user_man_idx_apnd.htm#GUID-D6B24522-6E9F-421D-92A9-8416E25BF04F">User-Managed Local Domain Indexes</a></p>
</div>
<a id="ADDCI4409"></a>
<div class="props_rev_3"><a id="GUID-3D75C913-57D6-4C65-9517-2814A53BB3B5"></a>
<h2 id="ADDCI-GUID-3D75C913-57D6-4C65-9517-2814A53BB3B5" class="sect2">Overview of Indextypes and Domain Indexes</h2>
<div>
<p>A <a id="d21453e116" class="indexterm-anchor"></a><strong class="term">domain index</strong> is an index designed for a specialized domain, such as spatial or image processing. Users can build a domain index of a given type after the designer creates the <strong class="term">indextype</strong>. The behavior of domain indexes is specific to an industry, a business function, or some other special purpose; you must specify it during cartridge development.</p>
<p>The system-managed approach to domain indexes, new in the Oracle Database 11g Release 1, requires less programmatic overhead and delivers better performance than the earlier user-managed domain indexes. It addresses the limitations of the user-managed approach, and has the following benefits:</p>
<ul style="list-style-type: disc;">
<li>
<p>Because the kernel performs many more maintenance tasks on behalf of the user, there is no need for programmatic support for table and partition maintenance operations. These operations are implemented by taking actions in the server, thus requiring a very minimal set of user-defined interface routines to be coded by the user. The cartridge code can then be relatively unaware of partition issues.</p>
</li>
<li>
<p>The number of objects that must be managed to support local partitioned domain indexes is identical to identical to those for non-partitioned domain indexes. For local partitioned indexes, the domain index storage tables are equipartitioned with respect to the base tables (using system-partitioned tables); therefore, the number of domain index storage tables does not increase with an increase in the number of partitions.</p>
</li>
<li>
<p>A single set of query and DML statements can now access and manipulate the system-partitioned storage tables, facilitating cursor sharing and enhancing performance.</p>
</li>
</ul>
<p>Oracle recommends that you develop new applications with system-managed domain indexes instead of user-managed domain indexes.</p>
<p>Indextypes encapsulate search and retrieval methods for complex domains such as text, spatial, and image processing. An indextype is similar to the indexes that are supplied with the Oracle Database. The difference is that you provide the application software that implements the indextype.</p>
<p>An indextype has two major components:</p>
<ul style="list-style-type: disc;">
<li>
<p>The methods that implement the behavior of the indextype, such as creating and scanning the index</p>
</li>
<li>
<p>The operators that the indextype supports, such as <code class="codeph">Contains()</code> or <code class="codeph">Overlaps()</code></p>
</li>
</ul>
<p>To create an indextype, you must perform the following steps:</p>
<ul style="list-style-type: disc;">
<li>
<p>Define the supported operators and create the functions that implement them</p>
</li>
<li>
<p>Create the methods that implement the <code class="codeph">ODCIIndex</code> interface, and define the type that encapsulates them, called the <a id="d21453e166" class="indexterm-anchor"></a><strong class="term">implementation type</strong></p>
</li>
<li>
<p>Create the indextype, specifying the implementation type and listing the operators with their <a id="d21453e173" class="indexterm-anchor"></a>bindings</p>
</li>
</ul>
<p>In this context:</p>
<ul style="list-style-type: disc;">
<li>
<p>Interface means a logical set of documented method specifications (not a separate schema object)</p>
</li>
<li>
<p><code class="codeph">ODCIIndex</code> interface means a set of index definition, maintenance, and scan routine specifications</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-3D75C913-57D6-4C65-9517-2814A53BB3B5__GUID-DAD8CA42-72D6-4F63-B1CB-925B67752C31">
<p class="notep1">See Also:</p>
<p><a href="operators.htm#GUID-E10C1C49-E5DA-45E9-959D-E203DD964FBF">Defining Operators</a></p>
</div>
</div>
</div>
<a id="ADDCI4410"></a>
<div class="props_rev_3"><a id="GUID-7E2F4550-36F8-4417-9983-B4DE8277BB89"></a>
<h2 id="ADDCI-GUID-7E2F4550-36F8-4417-9983-B4DE8277BB89" class="sect2">ODCIIndex Interface</h2>
<div>
<p>The <code class="codeph">ODCIIndex</code> interface specifies all the routines you must supply to implement an indextype. The routines must be implemented as type methods.</p>
<p>The <code class="codeph">ODCIIndex</code> interface comprises the following method classes:</p>
<ul style="list-style-type: disc;">
<li>
<p>Index definition methods</p>
</li>
<li>
<p>Index maintenance methods</p>
</li>
<li>
<p>Index scan methods</p>
</li>
<li>
<p>Index metadata method</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-7E2F4550-36F8-4417-9983-B4DE8277BB89__GUID-DA714F91-7C72-4473-9EA6-339AF4760F23">
<p class="notep1">See Also:</p>
<p><a href="ext_idx_ref.htm#GUID-78B9066F-6262-447D-80C1-EFB39C6930F1">Extensible Indexing Interface</a> for method signatures and parameter descriptions</p>
</div>
</div>
<a id="ADDCI4411"></a>
<div class="props_rev_3"><a id="GUID-CDFB6CDB-22E7-4B2B-9588-F52A45777705"></a>
<h3 id="ADDCI-GUID-CDFB6CDB-22E7-4B2B-9588-F52A45777705" class="sect3">Index Definition Methods</h3>
<div>
<p>The application calls index definition methods when a user issues a <code class="codeph">CREATE</code>, <code class="codeph">ALTER</code>, <code class="codeph">DROP</code>, or <code class="codeph">TRUNCATE</code> statement on an index of indextype.</p>
</div>
<a id="ADDCI4412"></a>
<div class="props_rev_3"><a id="GUID-13E708DB-ACD1-4154-8D1C-796915300A08"></a>
<h4 id="ADDCI-GUID-13E708DB-ACD1-4154-8D1C-796915300A08" class="sect4">ODCIIndexCreate()</h4>
<div>
<div class="section">
<p>When a user issues a <code class="codeph">CREATE INDEX</code> statement that references the indextype, Oracle calls your <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> method, passing it any parameters specified as part of the <code class="codeph">CREATE</code> <code class="codeph">INDEX</code>... <code class="codeph">PARAMETERS</code> (...) statement, plus the description of the index.</p>
<p>Typically, this method creates the tables or files in which you plan to store index data. Unless the base table is empty, the method should also build the index.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4413"></a>
<div class="props_rev_3"><a id="GUID-B1AEC202-33E1-46A7-93A3-F7BD66C15F14"></a>
<h4 id="ADDCI-GUID-B1AEC202-33E1-46A7-93A3-F7BD66C15F14" class="sect4">ODCIIndexAlter()</h4>
<div>
<div class="section">
<p>When a user issues an <code class="codeph">ALTER INDEX</code> statement referencing your indextype, Oracle calls your <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> method, passing it the description of the domain index to be altered along with any specified parameters. This method is also called to handle an <code class="codeph">ALTER INDEX</code> with the <code class="codeph">REBUILD</code> or <code class="codeph">RENAME</code> options. What your method must do depends on the nature of your domain index, so the details are left to you as the designer of the indextype.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4414"></a>
<div class="props_rev_3"><a id="GUID-2D19D9BF-04A5-48A1-AA01-6B9A1FDCDC96"></a>
<h4 id="ADDCI-GUID-2D19D9BF-04A5-48A1-AA01-6B9A1FDCDC96" class="sect4">ODCIIndexDrop()</h4>
<div>
<div class="section">
<p>When a user destroys an index of your indextype by issuing a <code class="codeph">DROP</code> <code class="codeph">INDEX</code> statement, Oracle calls your <a href="ext_idx_ref.htm#GUID-F128CB3B-6B3E-41C3-A623-67BCB5BC9292">ODCIIndexDrop()</a> method.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADDCI4415"></a>
<div class="props_rev_3"><a id="GUID-5402BC29-7F7A-4908-A488-626F63804292"></a>
<h3 id="ADDCI-GUID-5402BC29-7F7A-4908-A488-626F63804292" class="sect3">Index Maintenance Methods</h3>
<div>
<p>Your index maintenance methods are called when users issue <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code> statements on tables with columns or object type attributes indexed by your indextype.</p>
</div>
<a id="ADDCI4416"></a>
<div class="props_rev_3"><a id="GUID-AC74B2D7-C821-47D6-B282-774A15F91066"></a>
<h4 id="ADDCI-GUID-AC74B2D7-C821-47D6-B282-774A15F91066" class="sect4">ODCIIndexInsert()</h4>
<div>
<div class="section">
<p>When a user inserts a record, Oracle calls your <a href="ext_idx_ref.htm#GUID-EF42025B-6DE2-4F2A-90EF-62775EE0EED6">ODCIIndexInsert()</a> method, passing it the new values in the indexed columns and the corresponding row identifier.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4417"></a>
<div class="props_rev_3"><a id="GUID-40DC06A1-8E70-49F1-BE7F-330784902FDA"></a>
<h4 id="ADDCI-GUID-40DC06A1-8E70-49F1-BE7F-330784902FDA" class="sect4">ODCIIndexDelete()</h4>
<div>
<div class="section">
<p>When a user deletes a record, Oracle calls your <a href="ext_idx_ref.htm#GUID-4B2E080D-FE8B-4598-9084-56FBE255196B">ODCIIndexDelete()</a> method, passing it the old values in the indexed columns and the corresponding row identifier.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4418"></a>
<div class="props_rev_3"><a id="GUID-DE21E865-5E38-4CC5-BA9F-CB47A92BAEA6"></a>
<h4 id="ADDCI-GUID-DE21E865-5E38-4CC5-BA9F-CB47A92BAEA6" class="sect4">ODCIIndexUpdate()</h4>
<div>
<div class="section">
<p>When a user updates a record, Oracle calls your <a href="ext_idx_ref.htm#GUID-CB42E738-EFD1-4053-9DDF-BEF455F92815">ODCIIndexUpdate()</a> method, passing it the old and new values in the indexed columns and the corresponding row identifier.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADDCI4419"></a>
<div class="props_rev_3"><a id="GUID-F75A0756-63B6-44D1-8C7F-8863557B542E"></a>
<h3 id="ADDCI-GUID-F75A0756-63B6-44D1-8C7F-8863557B542E" class="sect3">Index Scan Methods</h3>
<div>
<p>Your index scan methods specify the index-based implementation for evaluating predicates containing the operators supported by your indextype. Index scans involve methods for initialization, fetching rows or row identifiers, and cleaning up after all rows are returned.</p>
<p>There are two modes of evaluating the operator predicate and returning the resulting set of rows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Precompute All</span>: Compute the entire result set in <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a>. Iterate over the results returning a batch of rows from each call to <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a>. This mode is applicable to operators that must look at the entire result set to compute ranking, relevance, and so on for each candidate row. It is also possible to return one row at a time if your application requires that.</p>
</li>
<li>
<p><span class="bold">Incremental Computation</span>: Compute a batch of result rows in each call to <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a>. This mode is applicable to operators that can determine the candidate rows one at a time without having to look at the entire result set. It is also possible to return one row at a time if your application requires that.</p>
</li>
</ul>
</div>
<a id="ADDCI4420"></a>
<div class="props_rev_3"><a id="GUID-332D6989-8D16-4A3F-A678-EC02C2F9FAAF"></a>
<h4 id="ADDCI-GUID-332D6989-8D16-4A3F-A678-EC02C2F9FAAF" class="sect4">ODCIIndexStart()</h4>
<div>
<div class="section">
<p>Oracle calls your <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a> method at the beginning of an index scan, passing it information on the index and the operator. Typically, this method:</p>
<ul style="list-style-type: disc;">
<li>
<p>Initializes data structures used in the scan</p>
</li>
<li>
<p>Parses and executes SQL statements that query the tables storing the index data</p>
</li>
<li>
<p>Saves any state information required by the fetch and cleanup methods, and returns the state or a handle to it</p>
</li>
<li>
<p>Sometimes generates a set of result rows to be returned at the first invocation of <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a></p>
</li>
</ul>
<p>The information on the index and the operator is not passed to the fetch and cleanup methods. Thus, <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a> must save <strong class="term">state</strong> data that must be shared among the index scan routines and return it through an output <code class="codeph">sctx</code> parameter. To share large amounts of state data, allocate cursor-duration memory and return a handle to the memory in the <code class="codeph">sctx</code> parameter.</p>
<p>As member methods, <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a> and <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a> are passed the built-in <code class="codeph">SELF</code> parameter, through which they can access the state data.</p>
<div class="infoboxnotealso" id="GUID-332D6989-8D16-4A3F-A678-EC02C2F9FAAF__GUID-5EC34315-6754-4607-BBD2-31930A3E0CB8">
<p class="notep1">See Also:</p>
<p><a class="olink LNOCI190" target="_blank" href="../LNOCI/oci20ext.htm#LNOCI190"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for information on memory services and maintaining context</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4421"></a>
<div class="props_rev_3"><a id="GUID-FF098D3E-BA59-41ED-BA00-0D8D9352AA03"></a>
<h4 id="ADDCI-GUID-FF098D3E-BA59-41ED-BA00-0D8D9352AA03" class="sect4">ODCIIndexFetch()</h4>
<div>
<div class="section">
<p>Oracle calls your <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a> method to return the row identifiers of the next batch of rows that satisfies the operator predicate, passing it the state data returned by <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a> or the previous <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a> call. The operator predicate is specified in terms of the operator expression (name and arguments) and a lower and upper bound on the operator return values. Thus, <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a> must return the row identifiers of the rows for which the operator return value falls within the specified bounds. To indicate the end of index scan, return a <code class="codeph">NULL</code>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4422"></a>
<div class="props_rev_3"><a id="GUID-49422598-FA3C-467F-9A16-58F6A4489F80"></a>
<h4 id="ADDCI-GUID-49422598-FA3C-467F-9A16-58F6A4489F80" class="sect4">ODCIIndexClose()</h4>
<div>
<div class="section">
<p>Oracle calls your <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a> method when the cursor is closed or reused, passing it the current state. <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a> should perform whatever cleanup or closure operations your indextype requires.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADDCI4423"></a>
<div class="props_rev_3"><a id="GUID-DDB221CF-5DB5-4E0B-92A8-839146FD78B7"></a>
<h3 id="ADDCI-GUID-DDB221CF-5DB5-4E0B-92A8-839146FD78B7" class="sect3">Index Metadata Method</h3>
<div>
<p>The <a href="ext_idx_ref.htm#GUID-B4A15D4C-A136-494E-BA05-4E8DD776C118">ODCIIndexGetMetadata()</a> method is optional. If you implement it, the Export utility calls it to write implementation-specific metadata into the Export dump file. This metadata might be policy information, version information, individual user settings, and so on, which are not stored in the system catalogs. The metadata is written to the dump files as anonymous PL/SQL blocks that are executed at import time immediately before the creation of the associated index.</p>
</div>
</div>
<a id="ADDCI4424"></a>
<div class="props_rev_3"><a id="GUID-477F9559-FC49-438A-B779-B3925C194125"></a>
<h3 id="ADDCI-GUID-477F9559-FC49-438A-B779-B3925C194125" class="sect3">Transaction Semantics During Index Method Execution</h3>
<div>
<p>The index interface methods (with the exception of the index definition methods, <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a>, <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a>, and <a href="ext_idx_ref.htm#GUID-F128CB3B-6B3E-41C3-A623-67BCB5BC9292">ODCIIndexDrop()</a>) are invoked under the same transaction that triggered these actions. Thus, the changes made by these routines are atomic and are committed or aborted based on the parent transaction. To achieve this, there are certain restrictions on the nature of the actions that you can perform in the different indextype routines:</p>
<ul style="list-style-type: disc;">
<li>
<p>Index definition routines have no restrictions.</p>
</li>
<li>
<p>Index maintenance routines can only execute Data Manipulation Language statements. These DML statements cannot update the base table on which the domain index is created.</p>
</li>
<li>
<p>Index scan routines can only execute SQL query statements.</p>
</li>
</ul>
<p>For example, if an <code class="codeph">INSERT</code> statement caused the <a href="ext_idx_ref.htm#GUID-EF42025B-6DE2-4F2A-90EF-62775EE0EED6">ODCIIndexInsert()</a> routine to be invoked, <a href="ext_idx_ref.htm#GUID-EF42025B-6DE2-4F2A-90EF-62775EE0EED6">ODCIIndexInsert()</a> runs under the same transaction as <code class="codeph">INSERT</code>. The <a href="ext_idx_ref.htm#GUID-EF42025B-6DE2-4F2A-90EF-62775EE0EED6">ODCIIndexInsert()</a> routine can execute any number of DML statements (for example, insert into index-organized tables). If the original transaction aborts, all the changes made by the indextype routines are rolled back.</p>
<p>However, if the indextype routines cause changes external to the database (like writing to external files), transaction semantics are not assured.</p>
</div>
</div>
<a id="ADDCI4425"></a>
<div class="props_rev_3"><a id="GUID-EC8910C7-C3D0-4ABB-8076-627AD2532E65"></a>
<h3 id="ADDCI-GUID-EC8910C7-C3D0-4ABB-8076-627AD2532E65" class="sect3">Transaction Semantics for Index Definition Routines</h3>
<div>
<p>The index definition routines do not have any restrictions on the nature of actions within them. Consider <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> to understand this difference. A typical set of actions to be performed in <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> could be:</p>
<ol>
<li>
<p>Create an index-organized table.</p>
</li>
<li>
<p>Insert data into the index-organized table.</p>
</li>
<li>
<p>Create a secondary index on a column of the index-organized table.</p>
</li>
</ol>
<p>To allow <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> to execute an arbitrary sequence of DDL and DML statements, each statement is considered to be an independent operation. Consequently, the changes made by <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> are not guaranteed to be atomic. The same is true for other index-definition routines.</p>
</div>
</div>
<a id="ADDCI4426"></a>
<div class="props_rev_3"><a id="GUID-DDD76B82-64AC-444D-AB0E-70E2E002F6A2"></a>
<h3 id="ADDCI-GUID-DDD76B82-64AC-444D-AB0E-70E2E002F6A2" class="sect3">Consistency Semantics during Index Method Execution</h3>
<div>
<p>The index maintenance (and scan routines) execute with the same snapshot as the top level SQL statement performing the DML (or query) operation. This keeps the index data processed by the index method consistent with the data in the base tables.</p>
</div>
</div>
<a id="ADDCI4427"></a>
<div class="props_rev_3"><a id="GUID-EDB4CEED-46AD-45F3-99F7-6BC7D806BFEB"></a>
<h3 id="ADDCI-GUID-EDB4CEED-46AD-45F3-99F7-6BC7D806BFEB" class="sect3">Privileges During Index Method Execution</h3>
<div>
<p>Indextype routines always execute as the owner of the index. To support this, the index access driver dynamically changes user mode to index owner before invoking the indextype routines.</p>
<p>For certain operations, indextype routines store information in tables owned by the indextype designer. The indextype implementation must perform those actions in a separate routine, which is executed using the definer&#39;s privileges.</p>
<div class="infoboxnotealso" id="GUID-EDB4CEED-46AD-45F3-99F7-6BC7D806BFEB__GUID-2ACA2413-D377-499F-A851-0E5FD3D06409">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF" target="_blank" href="../SQLRF/toc.htm"><span class="variable">Oracle Database SQL Language Reference</span></a> for details on <code class="codeph">CREATE TYPE</code></p>
</div>
</div>
</div>
</div>
<a id="ADDCI4428"></a>
<div class="props_rev_3"><a id="GUID-F4914337-6E63-4008-BAB0-72AA1E9FA4E6"></a>
<h2 id="ADDCI-GUID-F4914337-6E63-4008-BAB0-72AA1E9FA4E6" class="sect2">Creating, Dropping, and Commenting Indextypes</h2>
<div>
<p>Consider the SQL statements that manipulate indextypes.</p>
<div class="infoboxnotealso" id="GUID-F4914337-6E63-4008-BAB0-72AA1E9FA4E6__GUID-8C98C494-8F13-48F1-A13C-357BC0BF72A7">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF" target="_blank" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for complete descriptions of these SQL statements</p>
</div>
</div>
<a id="ADDCI4430"></a><a id="ADDCI4429"></a>
<div class="props_rev_3"><a id="GUID-082C7D3C-541E-44D8-93F0-9E6EDC779820"></a>
<h3 id="ADDCI-GUID-082C7D3C-541E-44D8-93F0-9E6EDC779820" class="sect3">Creating Indextypes</h3>
<div>
<div class="section">
<p>When you have implemented the <code class="codeph">ODCIIndex</code> interface and defined the implementation type, you can create a new indextype by specifying the list of operators supported by the indextype and referring to the type that implements the index interface. Using the information retrieval example, the DDL statement for defining the new indextype <code class="codeph">TextIndexType</code>, which supports the <code class="codeph">Contains</code> operator and whose implementation is provided by the type <code class="codeph">TextIndexMethods</code>, as demonstrated by <a href="dom_idx.htm#GUID-082C7D3C-541E-44D8-93F0-9E6EDC779820__BHABFJIG">Example 8-1</a>.</p>
<p>In addition to the <code class="codeph">ODCIIndex</code> interface routines, the implementation type must implement the <a href="ext_idx_ref.htm#GUID-28AC1C1B-6B6B-446F-A6C9-EEF4A4842D5F">ODCIGetInterfaces()</a> routine. This routine returns the version of the interface implemented by the implementation type. Oracle invokes the <a href="ext_idx_ref.htm#GUID-28AC1C1B-6B6B-446F-A6C9-EEF4A4842D5F">ODCIGetInterfaces()</a> routine when executing <code class="codeph">CREATE INDEXTYPE</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-082C7D3C-541E-44D8-93F0-9E6EDC779820__BHABFJIG">
<p class="titleinexample">Example 8-1 Creating an Indextype</p>
<pre dir="ltr">CREATE INDEXTYPE TextIndexType
FOR Contains (VARCHAR2, VARCHAR2)
USING TextIndexMethods
WITH SYSTEM MANAGED STORAGE TABLES;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4432"></a><a id="ADDCI4431"></a>
<div class="props_rev_3"><a id="GUID-C71605E0-F955-4439-B8BB-F896C2393E01"></a>
<h3 id="ADDCI-GUID-C71605E0-F955-4439-B8BB-F896C2393E01" class="sect3">Dropping Indextypes</h3>
<div>
<div class="section">
<p>To remove the definition of an indextype, use the <code class="codeph">DROP</code> statement, as in <a href="dom_idx.htm#GUID-C71605E0-F955-4439-B8BB-F896C2393E01__BHAGCEBA">Example 8-2</a>:</p>
<p>The default <code class="codeph">DROP</code> behavior is <code class="codeph">DROP RESTRICT</code> semantics, that is, if one or more domain indexes exist that uses the indextype then the <code class="codeph">DROP</code> operation is disallowed. Users can override the default behavior with the <code class="codeph">FORCE</code> option, which drops the indextype and marks any dependent domain indexes invalid.</p>
<div class="infoboxnotealso" id="GUID-C71605E0-F955-4439-B8BB-F896C2393E01__GUID-B06FBF18-57F1-44EC-B80F-5D1C00B4BC5B">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="dom_idx.htm#GUID-F667736E-0314-4A65-970F-0A3A580DEF6F">Object Dependencies_ Drop Semantics_ and Validation</a>&#34;</span> for details on object dependencies and drop semantics</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-C71605E0-F955-4439-B8BB-F896C2393E01__BHAGCEBA">
<p class="titleinexample">Example 8-2 Dropping an IndexType</p>
<pre dir="ltr">DROP INDEXTYPE TextIndexType;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4434"></a><a id="ADDCI4433"></a>
<div class="props_rev_3"><a id="GUID-F023C435-364B-4F2C-BC75-449F46904C17"></a>
<h3 id="ADDCI-GUID-F023C435-364B-4F2C-BC75-449F46904C17" class="sect3">Commenting Indextypes</h3>
<div>
<div class="section">
<p>Use the <code class="codeph">COMMENT</code> statement to supply information about an indextype or operator, as shown in <a href="dom_idx.htm#GUID-F023C435-364B-4F2C-BC75-449F46904C17__BHACJDCF">Example 8-3</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p>To place a comment on an indextype, the indextype must be in your own schema, or you must have the <code class="codeph">COMMENT ANY INDEXTYPE</code> privilege.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-F023C435-364B-4F2C-BC75-449F46904C17__BHACJDCF">
<p class="titleinexample">Example 8-3 Commenting an INDEXTYPE</p>
<pre dir="ltr">COMMENT ON INDEXTYPE
TextIndexType IS &#39;implemented by the type TextIndexMethods to support the Contains operator&#39;;
</pre></div>
<!-- class="example" --></div>
<a id="ADDCI4435"></a>
<div class="props_rev_3"><a id="GUID-A07C5527-C08F-4837-82DA-60042E2FFEED"></a>
<h4 id="ADDCI-GUID-A07C5527-C08F-4837-82DA-60042E2FFEED" class="sect4">INDEXTYPE Comments</h4>
<div>
<div class="section">
<p>Comments on indextypes can be viewed in these data dictionary views:</p>
<ul style="list-style-type: disc;">
<li>
<p><a id="d21453e1827" class="indexterm-anchor"></a><a id="d21453e1829" class="indexterm-anchor"></a><code class="codeph">ALL_INDEXTYPE_COMMENTS</code> displays comments for the user-defined indextypes accessible to the current user.</p>
</li>
<li>
<p><a id="d21453e1838" class="indexterm-anchor"></a><a id="d21453e1840" class="indexterm-anchor"></a><code class="codeph">DBA_INDEXTYPE_COMMENTS</code> displays comments for all user-defined indextypes in the database.</p>
</li>
<li>
<p><a id="d21453e1849" class="indexterm-anchor"></a><a id="d21453e1851" class="indexterm-anchor"></a><code class="codeph">USER_INDEXTYPE_COMMENTS</code> displays comments for the user-defined indextypes owned by the current user.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-A07C5527-C08F-4837-82DA-60042E2FFEED__GUID-BD830CD6-009E-4D61-BBFE-81167876D28A">
<p class="titleintable">Table 8-1 Views *_INDEXTYPE_COMMENTS</p>
<table class="cellalignment5987" title="Views *_INDEXTYPE_COMMENTS" summary="Column 1 lists the view column; column 2 shows the datatype used; column 3 indicates if a value is required, and column 4 gives the description">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6016" id="d21453e1870">Column</th>
<th class="cellalignment6034" id="d21453e1873">Data Type</th>
<th class="cellalignment6046" id="d21453e1876">Required</th>
<th class="cellalignment6064" id="d21453e1879">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6019" id="d21453e1884" headers="d21453e1870">
<pre dir="ltr">OWNER
</pre></td>
<td class="cellalignment6036" headers="d21453e1884 d21453e1873">
<pre dir="ltr">VARCHAR2(30)
</pre></td>
<td class="cellalignment6048" headers="d21453e1884 d21453e1876">
<pre dir="ltr">NOT NULL
</pre></td>
<td class="cellalignment6065" headers="d21453e1884 d21453e1879">
<p>Owner of the user-defined indextype</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6019" id="d21453e1897" headers="d21453e1870">
<pre dir="ltr">INDEXTYPE_NAME
</pre></td>
<td class="cellalignment6036" headers="d21453e1897 d21453e1873">
<pre dir="ltr">VARCHAR2(30)
</pre></td>
<td class="cellalignment6048" headers="d21453e1897 d21453e1876">
<pre dir="ltr">NOT NULL
</pre></td>
<td class="cellalignment6065" headers="d21453e1897 d21453e1879">
<p>Name of the user-defined indextype</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6019" id="d21453e1910" headers="d21453e1870">
<pre dir="ltr">COMMENT
</pre></td>
<td class="cellalignment6036" headers="d21453e1910 d21453e1873">
<pre dir="ltr">VARCHAR2(4000)
</pre></td>
<td class="cellalignment6048" headers="d21453e1910 d21453e1876">
<pre dir="ltr"> 
</pre></td>
<td class="cellalignment6065" headers="d21453e1910 d21453e1879">
<p>Comment for the user-defined indextype</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
</div>
<a id="ADDCI4436"></a>
<div class="props_rev_3"><a id="GUID-4807B405-8378-4E55-AC23-B74F1637847E"></a>
<h2 id="ADDCI-GUID-4807B405-8378-4E55-AC23-B74F1637847E" class="sect2">Domain Indexes</h2>
<div>
<p>Consider <a id="d21453e1975" class="indexterm-anchor"></a>domain index operations and how metadata associated with the domain index may be obtained.</p>
</div>
<a id="ADDCI4437"></a>
<div class="props_rev_3"><a id="GUID-859B8368-01EA-4AB9-8CEB-74FA433E0219"></a>
<h3 id="ADDCI-GUID-859B8368-01EA-4AB9-8CEB-74FA433E0219" class="sect3">Domain Index Operations</h3>
<div>
<p>Consider how to create, alter, truncate, and drop domain indexes.</p>
</div>
<a id="ADDCI4439"></a><a id="ADDCI4438"></a>
<div class="props_rev_3"><a id="GUID-61F6BF76-10A4-458F-B1EE-4EA8990B43DF"></a>
<h4 id="ADDCI-GUID-61F6BF76-10A4-458F-B1EE-4EA8990B43DF" class="sect4">Creating a Domain Index</h4>
<div>
<div class="section">
<p>A domain index can be created on a column of a table, just like a B-tree index. However, an indextype must be explicitly specified. <a href="dom_idx.htm#GUID-61F6BF76-10A4-458F-B1EE-4EA8990B43DF__BHAFCECC">Example 8-4</a> shows how to specify an indextype on the <code class="codeph">MyEmployees</code> table that was declared in <a href="ext_idx_frmwork.htm#GUID-1522A7C4-F4B7-4D98-A1FF-3A0295915A56__BHCBEFIG">Example 7-1</a>.</p>
<p>The <code class="codeph">INDEXTYPE</code> clause specifies the indextype to be used. The <code class="codeph">PARAMETERS</code> clause identifies any parameters for the domain index, specified as a string. This string is passed uninterpreted to the <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> routine for creating the domain index. In the preceding example, the parameters string identifies the language of the text document (thus identifying the lexical analyzer to use) and the list of stop words which are to be ignored while creating the text index.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-61F6BF76-10A4-458F-B1EE-4EA8990B43DF__BHAFCECC">
<p class="titleinexample">Example 8-4 Creating a Domain Index</p>
<pre dir="ltr">CREATE INDEX ResumeTextIndex ON MyEmployees(resume)
INDEXTYPE IS TextIndexType
PARAMETERS (&#39;:Language English :Ignore the a an&#39;);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4441"></a><a id="ADDCI4440"></a>
<div class="props_rev_3"><a id="GUID-017533B1-AF4C-4989-AC90-6DE86C1FF9A3"></a>
<h4 id="ADDCI-GUID-017533B1-AF4C-4989-AC90-6DE86C1FF9A3" class="sect4">Changing a Domain Index</h4>
<div>
<div class="section">
<p>The parameter string is passed uninterpreted to <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> routine, which takes appropriate actions to alter the domain index. This example specifies an additional stop word to ignore in the text index.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-017533B1-AF4C-4989-AC90-6DE86C1FF9A3__BHAHFCDB">
<p class="titleinexample">Example 8-5 Changing a Domain Index</p>
<pre dir="ltr">ALTER INDEX ResumeTextIndex PARAMETERS (&#39;:Ignore on&#39;);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4442"></a>
<div class="props_rev_3"><a id="GUID-29012430-B29A-4CC0-B7B0-FF663C57BDDE"></a>
<h4 id="ADDCI-GUID-29012430-B29A-4CC0-B7B0-FF663C57BDDE" class="sect4">Renaming a Domain Index</h4>
<div>
<div class="section">
<p>The <code class="codeph">ALTER</code> statement can be used to rename a domain index, as shown in <a href="dom_idx.htm#GUID-29012430-B29A-4CC0-B7B0-FF663C57BDDE__BHAEBCFC">Example 8-6</a>.</p>
<p>A statement of this form causes Oracle to invoke the <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> method, which takes appropriate actions to rename the domain index.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-29012430-B29A-4CC0-B7B0-FF663C57BDDE__BHAEBCFC">
<p class="titleinexample">Example 8-6 Renaming a Domain Index</p>
<pre dir="ltr">ALTER INDEX ResumeTextIndex RENAME TO ResumeTIdx;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4443"></a>
<div class="props_rev_3"><a id="GUID-D2229050-C73B-4E87-B8C1-659B6848D93B"></a>
<h4 id="ADDCI-GUID-D2229050-C73B-4E87-B8C1-659B6848D93B" class="sect4">Rebuilding a Domain Index</h4>
<div>
<div class="section">
<p>The <code class="codeph">ALTER</code> statement can be used to rebuild a domain index.</p>
<p>The same <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> routine is called as before, but with additional information about the <code class="codeph">ALTER</code> option.</p>
<p>When the end user executes an <code class="codeph">ALTER INDEX</code> <span class="italic">domain_index</span> <code class="codeph">UPDATE BLOCK REFERENCES</code> for a domain index on an index-organized table (IOT), <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> is called with the <code class="codeph">AlterIndexUpdBlockRefs</code> bit set. This gives you the opportunity to update guesses as to the block locations of rows that are stored in the domain index in logical rowids.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-D2229050-C73B-4E87-B8C1-659B6848D93B__BHAEEHBB">
<p class="titleinexample">Example 8-7 Rebuilding a Domain Index</p>
<pre dir="ltr">ALTER INDEX ResumeTextIndex REBUILD PARAMETERS (&#39;:Ignore off&#39;);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4445"></a><a id="ADDCI4444"></a>
<div class="props_rev_3"><a id="GUID-9BD8B279-C8B3-4563-ADF1-6D8AD1AEBBFE"></a>
<h4 id="ADDCI-GUID-9BD8B279-C8B3-4563-ADF1-6D8AD1AEBBFE" class="sect4">Truncating a Domain Index</h4>
<div>
<div class="section">
<p>There is no explicit statement for truncating a domain index. However, when the corresponding base table is truncated, the underlying storage table for the domain indexes are also truncated. Additionally, <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> is invoked by the command in <a href="dom_idx.htm#GUID-9BD8B279-C8B3-4563-ADF1-6D8AD1AEBBFE__BHAGEEBA">Example 8-8</a>, and it truncates <code class="codeph">ResumeTextIndex</code> because its <code class="codeph">alter_option</code> is set to <code class="codeph">AlterIndexRebuild</code>:</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-9BD8B279-C8B3-4563-ADF1-6D8AD1AEBBFE__BHAGEEBA">
<p class="titleinexample">Example 8-8 Truncating a Domain Index</p>
<pre dir="ltr">TRUNCATE TABLE MyEmployees;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4447"></a><a id="ADDCI4446"></a>
<div class="props_rev_3"><a id="GUID-9162DE23-C070-4EDD-8A93-EF0687C5BBF9"></a>
<h4 id="ADDCI-GUID-9162DE23-C070-4EDD-8A93-EF0687C5BBF9" class="sect4">Dropping a Domain Index</h4>
<div>
<div class="section">
<p>To drop an instance of a domain index, use the <code class="codeph">DROP</code> <code class="codeph">INDEX</code> statement, shown in <a href="dom_idx.htm#GUID-9162DE23-C070-4EDD-8A93-EF0687C5BBF9__BHAFBGDD">Example 8-9</a>:</p>
<p>This results in Oracle calling the <a href="ext_idx_ref.htm#GUID-F128CB3B-6B3E-41C3-A623-67BCB5BC9292">ODCIIndexDrop()</a> method, passing it information about the index.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-9162DE23-C070-4EDD-8A93-EF0687C5BBF9__BHAFBGDD">
<p class="titleinexample">Example 8-9 Dropping a Domain Index</p>
<pre dir="ltr">DROP INDEX ResumeTextIndex;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADDCI4448"></a>
<div class="props_rev_3"><a id="GUID-1247C418-BA99-44B8-862F-E0DA58E239F7"></a>
<h3 id="ADDCI-GUID-1247C418-BA99-44B8-862F-E0DA58E239F7" class="sect3">Domain Indexes on Index-Organized Tables</h3>
<div>
<p>Consider some issues that arise when an indextype creates domain indexes on index-organized tables. You can use the <code class="codeph">IndexOnIOT</code> bit of <code class="codeph">IndexInfoFlags</code> in the <code class="codeph">ODCIIndexInfo</code> structure to determine if the base table is an IOT.</p>
</div>
<a id="ADDCI4449"></a>
<div class="props_rev_3"><a id="GUID-64F30413-AD9F-42A6-9E8D-0DA733787EE7"></a>
<h4 id="ADDCI-GUID-64F30413-AD9F-42A6-9E8D-0DA733787EE7" class="sect4">About Rowid Storage in a UROWID Column</h4>
<div>
<p>When the base table of a domain index is an index-organized table, and you want to store rowids for the base table in a table of your own, you should store the rowids in a <code class="codeph">UROWID</code> (universal rowid) column if you are testing rowids for equality.</p>
<p>If the rowids are stored in a <code class="codeph">VARCHAR</code> column instead, comparisons for textual equality of a rowid from the base table and a rowid from your own table fail in some cases where the rowids pick out the same row. This is because index-organized tables use logical instead of physical rowids, and, unlike physical rowids, logical rowids for the same row can have different textual representations. Two logical rowids are equivalent when they have the same primary key, regardless of the guess data block addresses stored with them.</p>
<p>A <code class="codeph">UROWID</code> column can contain both physical and logical rowids. Storing rowids for an IOT in a <code class="codeph">UROWID</code> column ensures that the equality operator succeeds on two logical rowids that have the same primary key information but different guess DBAs.</p>
<p>If you create an index storage table with a rowid column by performing a <code class="codeph">CREATE TABLE AS SELECT</code> from the IOT base table, then a <code class="codeph">UROWID</code> column of the correct size is created for you in your index table. If you create a table with a rowid column, then you must explicitly declare your rowid column to be of type <code class="codeph">UROWID(x)</code>, where <code class="codeph">x</code> is the size of the <code class="codeph">UROWID</code> column. The size chosen should be large enough to hold any rowid from the base table; thus, it should be a function of the primary key from the base table. Use the query demonstrated by <a href="dom_idx.htm#GUID-41BE2AF6-9AA5-46FC-9DBC-3C54A508C370__BHADEBHA">Example 8-10</a> to determine a suitable size for the <code class="codeph">UROWID</code> column.</p>
<p>Doing an <code class="codeph">ALTER INDEX REBUILD</code> on index storage tables raises the same issues as doing a <code class="codeph">CREATE TABLE</code> if you drop your storage tables and re-create them. If, on the other hand, you reuse your storage tables, no additional work should be necessary if your base table is an IOT.</p>
</div>
</div>
<a id="ADDCI4450"></a>
<div class="props_rev_3"><a id="GUID-41BE2AF6-9AA5-46FC-9DBC-3C54A508C370"></a>
<h4 id="ADDCI-GUID-41BE2AF6-9AA5-46FC-9DBC-3C54A508C370" class="sect4">Determining the Size of a UROWID Column</h4>
<div>
<div class="example" id="GUID-41BE2AF6-9AA5-46FC-9DBC-3C54A508C370__BHADEBHA">
<p class="titleinexample">Example 8-10 Getting the Size of a UROWID Column</p>
<pre dir="ltr">SELECT (SUM(column_length + 3) + 7) 
FROM user_ind_columns ic, user_indexes i 
WHERE ic.index_name = i.index_name 
AND i.index_type = &#39;IOT - TOP&#39;
AND ic.table_ name = <span class="italic">base_table</span>;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4451"></a>
<div class="props_rev_3"><a id="GUID-FF0CB200-C688-49B5-B78B-4E204172A940"></a>
<h4 id="ADDCI-GUID-FF0CB200-C688-49B5-B78B-4E204172A940" class="sect4">DML on Index Storage Tables</h4>
<div>
<p>If you maintain a <code class="codeph">UROWID</code> column in the index storage table, then you must change the type of the rowid bind variable in DML <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code> statements so that it works for all kinds of rowids. Converting the rowid argument passed in to a text string and then binding it as a text string works well for both physical and universal rowids. This strategy may help you to code your indextype to work with both regular tables and IOTs.</p>
</div>
</div>
<a id="ADDCI4452"></a>
<div class="props_rev_3"><a id="GUID-FC074240-3C24-46EE-AEF7-72E6E5E073C9"></a>
<h4 id="ADDCI-GUID-FC074240-3C24-46EE-AEF7-72E6E5E073C9" class="sect4">Start, Fetch, and Close Operations on Index Storage Tables</h4>
<div>
<p>If you use an index scan-context structure to pass context between <code class="codeph">Start</code>, <code class="codeph">Fetch</code>, and <code class="codeph">Close</code>, you must alter this structure. In particular, if you store the rowid define variable for the query in a buffer in this structure, then you must allocate the maximum size for a <code class="codeph">UROWID</code> in this buffer (3800 bytes for universal rowids in byte format, 5072 for universal rowids in character format) unless you know the size of the primary key of the base table in advance or wish to determine it at run time. You must also store a bit in the context to indicate if the base table is an IOT, since <code class="codeph">ODCIIndexInfo</code> is not available in <code class="codeph">Fetch</code>.</p>
<p>As with DML operations, setting up the define variable as a text string works well for both physical and universal rowids. When physical rowids are fetched from the index table, you can be sure that their length is 18 characters. Universal rowids, however, may be up to 5072 characters long, so a string length function must be used to determine the actual length of a fetched universal rowid.</p>
</div>
</div>
<a id="ADDCI4453"></a>
<div class="props_rev_3"><a id="GUID-4AAEF06B-7AA6-4236-85F7-0E14554DB47B"></a>
<h4 id="ADDCI-GUID-4AAEF06B-7AA6-4236-85F7-0E14554DB47B" class="sect4">Indexes on Non-Unique Columns</h4>
<div>
<p>All values of a primary key column must be unique, so a domain index defined upon a non-unique column of a table cannot use this column as the primary key of an underlying IOT used to store the index. To work around this, you can add a column in the IOT, holding the index data, to hold a unique sequence number. When a column value is inserted in the table, generate a unique sequence number to go with it; you can then use the indexed column with the sequence number as the primary key of the IOT. (Note that the sequence-number column cannot be a <code class="codeph">UROWID</code> because <code class="codeph">UROWID</code> columns cannot be part of a primary key for an IOT.) This approach also preserves the fast access to primary key column values that is a major benefit of IOTs.</p>
</div>
</div>
</div>
<a id="ADDCI4454"></a>
<div class="props_rev_3"><a id="GUID-CC1F41CA-F5D7-436E-92AE-7060D713DAA2"></a>
<h3 id="ADDCI-GUID-CC1F41CA-F5D7-436E-92AE-7060D713DAA2" class="sect3">Domain Index Metadata</h3>
<div>
<p>For B-tree indexes, users can query the <code class="codeph">USER_INDEXES</code> view to get index information. To provide similar support for domain indexes, you can provide domain-specific metadata in the following manner:</p>
<ul style="list-style-type: disc;">
<li>
<p>Define one or more tables that contain this meta information. The key column of this table must be a unique identifier for the index. This unique key could be the index name (<code class="codeph">schema.index</code>). The remainder of the columns can contain your metadata.</p>
</li>
<li>
<p>Create views that join the system-defined metadata tables with the index meta tables to provide a comprehensive set of information for each instance of a domain index. It is your responsibility as the indextype designer to provide the view definitions.</p>
</li>
</ul>
</div>
</div>
<a id="ADDCI4455"></a>
<div class="props_rev_3"><a id="GUID-68FDFF89-D571-425D-8E29-340631996F19"></a>
<h3 id="ADDCI-GUID-68FDFF89-D571-425D-8E29-340631996F19" class="sect3">Moving Domain Indexes Using Export/Import</h3>
<div>
<p>Like B-tree and bitmap indexes, domain indexes are <a id="d21453e3022" class="indexterm-anchor"></a>exported and subsequently imported when their base tables are exported. However, domain indexes can have implementation-specific metadata associated with them that is not stored in the system catalogs. For example, a text domain index can have associated policy information, a list of irrelevant words, and so on. The export/import mechanism moves this metadata from the source platform to the target platform.</p>
<p>To move the domain index metadata, the indextype must implement the <a href="ext_idx_ref.htm#GUID-B4A15D4C-A136-494E-BA05-4E8DD776C118">ODCIIndexGetMetadata()</a> interface method. When a domain index is being exported, this method is invoked and passes the domain index information. It can return any number of anonymous PL/SQL blocks that are written into the dump file and executed on import. If present, these anonymous PL/SQL blocks are executed immediately before the creation of the associated domain index.</p>
<p>By default, secondary objects of the domain are not imported or exported. However, if the interfaces <a href="ext_idx_ref.htm#GUID-8AE43690-9A7F-480E-A304-A28687197205">ODCIIndexUtilGetTableNames()</a> and <a href="ext_idx_ref.htm#GUID-246BE6AB-72DE-4549-9B92-20F2106DEBE2">ODCIIndexUtilCleanup()</a> are present, the system invokes them to determine if the secondary objects associated with the domain indexes are part of the export/import operation.</p>
<div class="infoboxnotealso" id="GUID-68FDFF89-D571-425D-8E29-340631996F19__GUID-A4960C2B-834E-4B44-B568-B70E51866B89">
<p class="notep1">See Also:</p>
<p><a class="olink SUTIL" target="_blank" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about using Export/Import</p>
</div>
</div>
</div>
<a id="ADDCI4456"></a>
<div class="props_rev_3"><a id="GUID-73E11A66-3497-4C87-AD8F-7737AFF837C3"></a>
<h3 id="ADDCI-GUID-73E11A66-3497-4C87-AD8F-7737AFF837C3" class="sect3">Moving Domain Indexes Using Transportable Tablespaces</h3>
<div>
<p>The <span class="bold">transportable tablespaces</span> feature lets you <a id="d21453e3106" class="indexterm-anchor"></a>move tablespaces from one Oracle database into another. You can use transportable tablespaces to move domain index data as an alternative to exporting and importing it.</p>
<p>Moving data using transportable tablespaces can be much faster than performing either an export and import, or unload and load of the data because transporting a tablespace only requires copying datafiles and integrating tablespace structural information. Also, you do not have to rebuild the index afterward as you do when loading or importing. You can check for the presence of the <code class="codeph">TransTblspc</code> flag in <code class="codeph">ODCIIndexInfo</code> to determine whether the <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> call is the result of an imported domain index.</p>
<p>To use transportable tablespace for the secondary tables of a domain index, you must provide two additional ODCI interfaces, <a href="ext_idx_ref.htm#GUID-8AE43690-9A7F-480E-A304-A28687197205">ODCIIndexUtilGetTableNames()</a> and <a href="ext_idx_ref.htm#GUID-246BE6AB-72DE-4549-9B92-20F2106DEBE2">ODCIIndexUtilCleanup()</a>, in the implementation type.</p>
<div class="infoboxnotealso" id="GUID-73E11A66-3497-4C87-AD8F-7737AFF837C3__GUID-FDDBEDCC-A966-4D38-AE86-8460DE3BAD88">
<p class="notep1">See Also:</p>
<p><a class="olink ADMIN" target="_blank" href="../ADMIN/toc.htm"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about using transportable tablespaces</p>
</div>
</div>
</div>
<a id="ADDCI4458"></a><a id="ADDCI4459"></a><a id="ADDCI4457"></a>
<div class="props_rev_3"><a id="GUID-CB11A76D-0298-419D-93D6-4BB759467DA1"></a>
<h3 id="ADDCI-GUID-CB11A76D-0298-419D-93D6-4BB759467DA1" class="sect3">Domain Index Views</h3>
<div>
<div class="section">
<p>The following views provide information about secondary objects associated with domain indexes accessible to the user; they are only relevant for domain indexes.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">ALL_SECONDARY_OBJECTS</code> provide information about secondary objects associated with domain indexes accessible to the user.</p>
</li>
<li>
<p><a id="d21453e3205" class="indexterm-anchor"></a><a id="d21453e3207" class="indexterm-anchor"></a><code class="codeph">DBA_SECONDARY_OBJECTS</code> provides information about all secondary objects that are associated with domain indexes in the database.</p>
</li>
<li>
<p><code class="codeph">USER_SECONDARY_OBJECTS</code> provides information about secondary objects associated with domain indexes owned by the current user.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-CB11A76D-0298-419D-93D6-4BB759467DA1__GUID-E18707C3-16F0-466A-A357-5DADD622B0D0">
<p class="titleintable">Table 8-2 Views *_SECONDARY_OBJECTS</p>
<table class="cellalignment5987" title="Views *_SECONDARY_OBJECTS" summary="Column 1 lists the view column; column 2 shows the datatype used; column 3 indicates if a value is required, and column 4 gives the description">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6000" id="d21453e3231">Column</th>
<th class="cellalignment6052" id="d21453e3234">Data Type</th>
<th class="cellalignment6066" id="d21453e3237">Required</th>
<th class="cellalignment6064" id="d21453e3240">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e3245" headers="d21453e3231">
<pre dir="ltr">INDEX_OWNER
</pre></td>
<td class="cellalignment6053" headers="d21453e3245 d21453e3234">
<pre dir="ltr">VARCHAR2(30)
</pre></td>
<td class="cellalignment6068" headers="d21453e3245 d21453e3237">
<pre dir="ltr">NOT NULL
</pre></td>
<td class="cellalignment6065" headers="d21453e3245 d21453e3240">
<p>Name of the domain index owner</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e3258" headers="d21453e3231">
<pre dir="ltr">INDEX_NAME
</pre></td>
<td class="cellalignment6053" headers="d21453e3258 d21453e3234">
<pre dir="ltr">VARCHAR2(30)
</pre></td>
<td class="cellalignment6068" headers="d21453e3258 d21453e3237">
<pre dir="ltr">NOT NULL
</pre></td>
<td class="cellalignment6065" headers="d21453e3258 d21453e3240">
<p>Name of the domain index</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e3271" headers="d21453e3231">
<pre dir="ltr">SECONDARY_INDEX_OWNER
</pre></td>
<td class="cellalignment6053" headers="d21453e3271 d21453e3234">
<pre dir="ltr">VARCHAR2(30)
</pre></td>
<td class="cellalignment6068" headers="d21453e3271 d21453e3237">
<pre dir="ltr">NOT NULL
</pre></td>
<td class="cellalignment6065" headers="d21453e3271 d21453e3240">
<p>Owner of the secondary object created by the domain index</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e3284" headers="d21453e3231">
<pre dir="ltr">SECONDARY_INDEX_NAME
</pre></td>
<td class="cellalignment6053" headers="d21453e3284 d21453e3234">
<pre dir="ltr">VARCHAR2(30)
</pre></td>
<td class="cellalignment6068" headers="d21453e3284 d21453e3237">
<pre dir="ltr">NOT NULL
</pre></td>
<td class="cellalignment6065" headers="d21453e3284 d21453e3240">
<p>Name of the secondary object created by the domain index</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e3297" headers="d21453e3231">
<pre dir="ltr">SECONDARY_OBJDATA_TYPE
</pre></td>
<td class="cellalignment6053" headers="d21453e3297 d21453e3234">
<pre dir="ltr">VARCHAR2(20)
</pre></td>
<td class="cellalignment6068" headers="d21453e3297 d21453e3237">
<pre dir="ltr">NOT NULL
</pre></td>
<td class="cellalignment6065" headers="d21453e3297 d21453e3240">
<p>Specifies if a secondary object is created by either indextype or statistics type</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<p><a href="dom_idx.htm#GUID-CB11A76D-0298-419D-93D6-4BB759467DA1__BHAEIECJ">Example 8-11</a> demonstrates how the <code class="codeph">USER_SECONDARY_OBJECTS</code> view may be used to obtain information on the <code class="codeph">ResumeTextIndex</code> that was created in <a href="dom_idx.htm#GUID-61F6BF76-10A4-458F-B1EE-4EA8990B43DF__BHAFCECC">Example 8-4</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-CB11A76D-0298-419D-93D6-4BB759467DA1__BHAEIECJ">
<p class="titleinexample">Example 8-11 Using *_SECONDARY_OBJECTS Views</p>
<pre dir="ltr">SELECT SECONDARY_OBJECT_OWNER, SECONDARY_OBJECT_NAME 
  FROM USER_SECONDARY_OBJECTS 
  WHERE INDEX_OWNER = USER and INDEX_NAME = &#39;ResumeTextIndex&#39; 
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADDCI4460"></a>
<div class="props_rev_3"><a id="GUID-F667736E-0314-4A65-970F-0A3A580DEF6F"></a>
<h2 id="ADDCI-GUID-F667736E-0314-4A65-970F-0A3A580DEF6F" class="sect2">Object Dependencies, Drop Semantics, and Validation</h2>
<div>
<p>Consider issues that affect objects used in domain indexes.</p>
</div>
<a id="ADDCI4461"></a>
<div class="props_rev_3"><a id="GUID-8099282B-3723-42D6-80D3-92781F171F36"></a>
<h3 id="ADDCI-GUID-8099282B-3723-42D6-80D3-92781F171F36" class="sect3">Object Dependencies</h3>
<div>
<p>The dependencies among various objects are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Functions, Packages, and Object Types:</span> referenced by operators and indextypes</p>
</li>
<li>
<p><span class="bold">Operators:</span> referenced by indextypes, DML, and query SQL Statements</p>
</li>
<li>
<p><span class="bold">Indextypes:</span> referenced by domain indexes</p>
</li>
<li>
<p><span class="bold">Domain Indexes:</span> referenced (used implicitly) by DML and query SQL statements</p>
</li>
</ul>
<p>Thus, the order in which these objects must be created, or their definitions exported for future import, is:</p>
<ol>
<li>
<p>Functions, packages, and object types</p>
</li>
<li>
<p>Operators</p>
</li>
<li>
<p>Indextypes</p>
</li>
</ol>
</div>
</div>
<a id="ADDCI4463"></a><a id="ADDCI4462"></a>
<div class="props_rev_3"><a id="GUID-7D6B37FB-01F5-4CA5-A678-A8895037E587"></a>
<h3 id="ADDCI-GUID-7D6B37FB-01F5-4CA5-A678-A8895037E587" class="sect3">Object Drop Semantics</h3>
<div>
<div class="section">
<p>The drop behavior for an object is as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code class="codeph">RESTRICT</code></span> <span class="bold">semantics:</span> if there are any dependent objects the drop operation is disallowed.</p>
</li>
<li>
<p><span class="bold"><code class="codeph">FORCE</code></span> <span class="bold">semantics:</span> the object is dropped even in the presence of dependent objects; any dependent objects are recursively marked invalid.</p>
</li>
</ul>
<p><a href="dom_idx.htm#GUID-7D6B37FB-01F5-4CA5-A678-A8895037E587__BABGBEBF" title="Schema Object, Default Drop Behavior, and Supported Explicit Options">Table 8-3</a> shows the default and explicit drop options supported for operators and indextypes. The other schema objects are included for completeness and context.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-7D6B37FB-01F5-4CA5-A678-A8895037E587__BABGBEBF">
<p class="titleintable">Table 8-3 Default and Explicit Drop Options for Operators and Index Types</p>
<table class="cellalignment5987" title="Default and Explicit Drop Options for Operators and Index Types" summary="Schema Object, Default Drop Behavior, and Supported Explicit Options">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6004" id="d21453e3554">Schema Object</th>
<th class="cellalignment6012" id="d21453e3557">Default Drop Behavior</th>
<th class="cellalignment6092" id="d21453e3560">Explicit Options Supported</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e3565" headers="d21453e3554">
<p>Function</p>
</td>
<td class="cellalignment6014" headers="d21453e3565 d21453e3557">
<p><code class="codeph">FORCE</code></p>
</td>
<td class="cellalignment6093" headers="d21453e3565 d21453e3560">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e3576" headers="d21453e3554">
<p>Package</p>
</td>
<td class="cellalignment6014" headers="d21453e3576 d21453e3557">
<p><code class="codeph">FORCE</code></p>
</td>
<td class="cellalignment6093" headers="d21453e3576 d21453e3560">
<p>None</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e3587" headers="d21453e3554">
<p>Object Types</p>
</td>
<td class="cellalignment6014" headers="d21453e3587 d21453e3557">
<p><code class="codeph">RESTRICT</code></p>
</td>
<td class="cellalignment6093" headers="d21453e3587 d21453e3560">
<p><code class="codeph">FORCE</code></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e3599" headers="d21453e3554">
<p>Operator</p>
</td>
<td class="cellalignment6014" headers="d21453e3599 d21453e3557">
<p><code class="codeph">RESTRICT</code></p>
</td>
<td class="cellalignment6093" headers="d21453e3599 d21453e3560">
<p><code class="codeph">FORCE</code></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e3611" headers="d21453e3554">
<p>Indextype</p>
</td>
<td class="cellalignment6014" headers="d21453e3611 d21453e3557">
<p><code class="codeph">RESTRICT</code></p>
</td>
<td class="cellalignment6093" headers="d21453e3611 d21453e3560">
<p><code class="codeph">FORCE</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADDCI4464"></a>
<div class="props_rev_3"><a id="GUID-FB00AE3E-3D5B-4888-89F4-F0D6CCE99657"></a>
<h3 id="ADDCI-GUID-FB00AE3E-3D5B-4888-89F4-F0D6CCE99657" class="sect3">Object Validation</h3>
<div>
<div class="section">
<p>Invalid objects are automatically validated, if possible, the next time they are referenced.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADDCI4465"></a>
<div class="props_rev_3"><a id="GUID-CCFB5777-807D-4DEA-B3EC-B7327BF83378"></a>
<h2 id="ADDCI-GUID-CCFB5777-807D-4DEA-B3EC-B7327BF83378" class="sect2">Indextype, Domain Index, and Operator Privileges</h2>
<div>
<ul style="list-style-type: disc;">
<li>
<p>To create an operator and its bindings, you must have <code class="codeph">EXECUTE</code> privilege on the function, operator, package, or the type referenced in addition to <code class="codeph">CREATE</code> <code class="codeph">OPERATOR</code> or <code class="codeph">CREATE</code> <code class="codeph">ANY</code> <code class="codeph">OPERATOR</code> privilege.</p>
</li>
<li>
<p>To create an indextype, you must have <code class="codeph">EXECUTE</code> privilege on the type that implements the indextype in addition to <code class="codeph">CREATE</code> <code class="codeph">INDEXTYPE</code> or <code class="codeph">CREATE</code> <code class="codeph">ANY</code> <code class="codeph">INDEXTYPE</code> privilege. Also, you must have <code class="codeph">EXECUTE</code> privileges on the operators that the indextype supports.</p>
</li>
<li>
<p>To alter an indextype in your own schema, you must have <code class="codeph">CREATE INDEXTYPE</code> system privilege.</p>
</li>
<li>
<p>To alter an indextype or operator in another user&#39;s schema, you must have the <code class="codeph">ALTER ANY INDEXTYPE</code> or <code class="codeph">ALTER ANY OPERATOR</code> system privilege.</p>
</li>
<li>
<p>To create a domain index, you must have <code class="codeph">EXECUTE</code> privilege on the indextype in addition to <code class="codeph">CREATE</code> <code class="codeph">INDEX</code> or <code class="codeph">CREATE</code> <code class="codeph">ANY</code> <code class="codeph">INDEX</code> privileges.</p>
</li>
<li>
<p>To alter a domain index, you must have <code class="codeph">EXECUTE</code> privilege on the indextype.</p>
</li>
<li>
<p>To use the operators in queries or DML statements, you must have <code class="codeph">EXECUTE</code> privilege on the operator and the associated function, package, and indextype.</p>
</li>
<li>
<p>To change the implementation type, you must have <code class="codeph">EXECUTE</code> privilege on the new implementation type.</p>
</li>
</ul>
</div>
</div>
<a id="ADDCI4466"></a>
<div class="props_rev_3"><a id="GUID-AB4774C6-DA5C-4EA8-B30A-5022BDD41117"></a>
<h2 id="ADDCI-GUID-AB4774C6-DA5C-4EA8-B30A-5022BDD41117" class="sect2">Partitioned Domain Indexes</h2>
<div>
<p>A domain index can be built to have discrete index partitions that correspond to the partitions of a range-, list-, hash-, or interval-partitioned table. Such an index is called a <span class="bold">local domain index</span>, as opposed to a <span class="italic">global</span> domain index, which has no index partitions. Local domain index refers to a partitioned index as a whole, not to the partitions that compose a local domain index.</p>
</div>
<a id="ADDCI4467"></a>
<div class="props_rev_3"><a id="GUID-C92D9B1E-4883-47A0-A134-9990EB4DCB4D"></a>
<h3 id="ADDCI-GUID-C92D9B1E-4883-47A0-A134-9990EB4DCB4D" class="sect3">Using Local Domain Index Methods</h3>
<div>
<div class="section">
<p>A local domain index is equipartitioned with the underlying table: all keys in a local domain index refer to rows stored in its corresponding table partition; none refer to rows in other partitions. Provide for using local domain indexes in the indextype by calling the <code class="codeph">CREATE INDEXTYPE</code> statement, as demonstrated in <a href="dom_idx.htm#GUID-C92D9B1E-4883-47A0-A134-9990EB4DCB4D__BHAECEIJ">Example 8-12</a>.</p>
<p>This statement specifies that the implementation type <code class="codeph">TextIndexMethods</code> is capable of creating and maintaining local domain indexes.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-C92D9B1E-4883-47A0-A134-9990EB4DCB4D__BHAECEIJ">
<p class="titleinexample">Example 8-12 Using Local Domain Index Methods Within an Indextype</p>
<pre dir="ltr">CREATE INDEXTYPE TextIndexType
  FOR Contains (VARCHAR2, VARCHAR2)
  USING TextIndexMethods
  WITH LOCAL PARTITION
  WITH SYSTEM MANAGED STORAGE TABLES;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4468"></a>
<div class="props_rev_3"><a id="GUID-67607D3C-59DA-4A71-B32C-E1DBE86DFE67"></a>
<h3 id="ADDCI-GUID-67607D3C-59DA-4A71-B32C-E1DBE86DFE67" class="sect3">About Partitioned Indexes</h3>
<div>
<div class="section">
<p>The <code class="codeph">CREATE INDEX</code> statement creates and partitions the index, as demonstrated by <a href="dom_idx.htm#GUID-67607D3C-59DA-4A71-B32C-E1DBE86DFE67__BHABAHED">Example 8-13</a>.</p>
<p>The <code class="codeph">LOCAL [PARTITION]</code> clause indicates that the index is a local index on a partitioned table. You can specify partition names or allow Oracle to generate them.</p>
<p>The <code class="codeph">PARALLEL</code> clause specifies that the index partitions are to be created in parallel. The <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> routines, which correspond to index partition create, rebuild, or populate, are called in parallel.</p>
<p>In the <code class="codeph">PARAMETERS</code> clause, specify the parameter string that is passed uninterpreted to the appropriate ODCI indextype routine. The maximum length of the parameter string is <code class="codeph">1000</code> characters.</p>
<p>When you specify this clause at the top level of the syntax, the parameters become the default parameters for the index partitions. If you specify this clause as part of the <code class="codeph">LOCAL [PARTITION]</code> clause, you override any default parameters with parameters for the individual partition. The <code class="codeph">LOCAL [PARTITION]</code> clause can specify multiple partitions.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-67607D3C-59DA-4A71-B32C-E1DBE86DFE67__BHABAHED">
<p class="titleinexample">Example 8-13 Creating and Partitioning an Index</p>
<pre dir="ltr">CREATE INDEX [schema.]index 
  ON [schema.]table [t.alias] (indexed_column)
  INDEXTYPE IS indextype
  [LOCAL [PARTITION [partition [PARAMETERS (&#39;string&#39;)]]] [...] ]
  [PARALLEL parallel_degree]
  [PARAMETERS (&#39;string&#39;)];
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4469"></a>
<div class="props_rev_3"><a id="GUID-59867CC0-FA8B-4380-878D-432FFB7FFAAD"></a>
<h3 id="ADDCI-GUID-59867CC0-FA8B-4380-878D-432FFB7FFAAD" class="sect3">Creating a Local Domain Index</h3>
<div>
<div class="section">
<p>When the domain index is created, Oracle invokes the appropriate ODCI routine. If the routine does not return successfully, the domain index is marked <code class="codeph">FAILED</code>. The only operations supported on an failed domain index are <code class="codeph">DROP INDEX</code> and (for non-local indexes) <code class="codeph">REBUILD INDEX</code>. <a href="dom_idx.htm#GUID-59867CC0-FA8B-4380-878D-432FFB7FFAAD__BHAIIDIB">Example 8-14</a> creates a local domain index <code class="codeph">ResumeIndex</code>, shown in <a href="dom_idx.htm#GUID-59867CC0-FA8B-4380-878D-432FFB7FFAAD__BHAIIDIB">Example 8-14</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-59867CC0-FA8B-4380-878D-432FFB7FFAAD__BHAIIDIB">
<p class="titleinexample">Example 8-14 Creating a Local Domain Index</p>
<pre dir="ltr">CREATE INDEX ResumeIndex ON MyEmployees(Resume)
  INDEXTYPE IS TextIndexType LOCAL;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4471"></a><a id="ADDCI4470"></a>
<div class="props_rev_3"><a id="GUID-FC9F22F7-EE51-4774-B373-8A174A07C5C8"></a>
<h3 id="ADDCI-GUID-FC9F22F7-EE51-4774-B373-8A174A07C5C8" class="sect3">Dropping a Local Domain Index</h3>
<div>
<div class="section">
<p>A specified index partition cannot be dropped explicitly. To drop a local index partition, you must drop the entire local domain index:</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-FC9F22F7-EE51-4774-B373-8A174A07C5C8__GUID-6C2A229C-3796-47AB-9FCA-40D782E00E17">
<p class="titleinexample">Example 8-15 Dropping a Local Index Partition</p>
<pre dir="ltr">DROP INDEX ResumeIndex;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4472"></a>
<div class="props_rev_3"><a id="GUID-7834D2C2-6E64-438F-A9F7-D5E8311BC495"></a>
<h3 id="ADDCI-GUID-7834D2C2-6E64-438F-A9F7-D5E8311BC495" class="sect3">Altering a Local Domain Index</h3>
<div>
<div class="section">
<p>The <code class="codeph">ALTER INDEXTYPE</code> statement lets you change properties and the implementation type of an indextype without having to drop and re-create the indextype, then rebuild all dependent indexes.</p>
<p>Use the <code class="codeph">ALTER INDEX</code> statement to perform the following operations on a local domain index:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Rename the top level index.</p>
</li>
<li>
<p>Modify the default parameter string for all the index partitions.</p>
</li>
<li>
<p>Modify the parameter string associated with a specific partition.</p>
</li>
<li>
<p>Rename an index partition.</p>
</li>
<li>
<p>Rebuild an index partition.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-7834D2C2-6E64-438F-A9F7-D5E8311BC495__GUID-4950CAAA-84DC-4155-96CB-BC8C3FD70386">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF" target="_blank" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for complete syntax of SQL statements.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4474"></a><a id="ADDCI4473"></a>
<div class="props_rev_3"><a id="GUID-F3F30EDF-9470-4168-8F7E-999E1B2F4497"></a>
<h3 id="ADDCI-GUID-F3F30EDF-9470-4168-8F7E-999E1B2F4497" class="sect3">Summary of Index States</h3>
<div>
<div class="section">
<p>Like a domain index, a partition of a local domain index can be in one or more of several states, listed in <a href="dom_idx.htm#GUID-F3F30EDF-9470-4168-8F7E-999E1B2F4497__BABHBHHJ" title="Desciption of possible states">Table 8-4</a>.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-F3F30EDF-9470-4168-8F7E-999E1B2F4497__BABHBHHJ">
<p class="titleintable">Table 8-4 Summary of Index States</p>
<table class="cellalignment5987" title="Summary of Index States" summary="Desciption of possible states">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6004" id="d21453e4352">State</th>
<th class="cellalignment6005" id="d21453e4355">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4360" headers="d21453e4352">
<p><code class="codeph">IN_PROGRESS</code></p>
</td>
<td class="cellalignment6007" headers="d21453e4360 d21453e4355">
<p>The index or the index partition is in this state before and during the execution of the <code class="codeph">ODCIIndex</code> DDL interface routines. The state is generally transitional and temporary. However, if the routine ends prematurely, the index could remain marked <code class="codeph">IN_PROGRESS</code>.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4374" headers="d21453e4352">
<p><code class="codeph">FAILED</code></p>
</td>
<td class="cellalignment6007" headers="d21453e4374 d21453e4355">
<p>If the <code class="codeph">ODCIIndex</code> interface routine doing DDL operations on the index returns an error, the index or index partition is marked <code class="codeph">FAILED</code>.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4388" headers="d21453e4352">
<p><code class="codeph">UNUSABLE</code></p>
</td>
<td class="cellalignment6007" headers="d21453e4388 d21453e4355">
<p>Same as for regular indexes: An index on a partitioned table is marked <code class="codeph">UNUSABLE</code> as a result of certain partition maintenance operations. Note that, for partitioned indexes, <code class="codeph">UNUSABLE</code> is associated only with an index partition, not with the index as a whole.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4402" headers="d21453e4352">
<p><code class="codeph">VALID</code></p>
</td>
<td class="cellalignment6007" headers="d21453e4402 d21453e4355">
<p>An index is marked <code class="codeph">VALID</code> if an object that the index directly or indirectly depends upon is exists and is valid. This property is associated only with an index, never with an index partition.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4413" headers="d21453e4352">
<p><code class="codeph">INVALID</code></p>
</td>
<td class="cellalignment6007" headers="d21453e4413 d21453e4355">
<p>An index is marked <code class="codeph">INVALID</code> if an object that the index directly or indirectly depends upon is dropped or invalidated. This property is associated only with an index, never with an index partition.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADDCI4475"></a>
<div class="props_rev_3"><a id="GUID-EF90BF39-654B-41AC-90FC-81AD730DC296"></a>
<h3 id="ADDCI-GUID-EF90BF39-654B-41AC-90FC-81AD730DC296" class="sect3">DML Operations with Local Domain Indexes</h3>
<div>
<p>DML operations cannot be performed on the underlying table if an index partition of a local domain index is in any of these states: <code class="codeph">IN_PROGRESS</code>, <code class="codeph">FAILED</code>, or <code class="codeph">UNUSABLE</code>. However, if the index is marked <code class="codeph">UNUSABLE</code>, and <code class="codeph">SKIP_UNUSABLE_INDEXES = true</code>, then index maintenance is not performed.</p>
</div>
</div>
<a id="ADDCI4477"></a><a id="ADDCI4478"></a><a id="ADDCI4476"></a>
<div class="props_rev_3"><a id="GUID-B0B1897A-87E1-46E3-9E12-C342AD354B26"></a>
<h3 id="ADDCI-GUID-B0B1897A-87E1-46E3-9E12-C342AD354B26" class="sect3">Table Operations that Affect Indexes</h3>
<div>
<p>The following tables list operations that may be performed on the underlying table of an inde,x and describe the effect, if any, on the index. <a href="dom_idx.htm#GUID-B0B1897A-87E1-46E3-9E12-C342AD354B26__BHAFHAFH" title="Table operations">Table 8-5</a> lists TABLE operations, while <a href="dom_idx.htm#GUID-B0B1897A-87E1-46E3-9E12-C342AD354B26__BABDJCCI" title="Operations">Table 8-6</a> lists <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> operations.</p>
<div class="tblformal" id="GUID-B0B1897A-87E1-46E3-9E12-C342AD354B26__BHAFHAFH">
<p class="titleintable">Table 8-5 Summary of Table Operations</p>
<table class="cellalignment5987" title="Summary of Table Operations" summary="Table operations">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6034" id="d21453e4573">Table Operation</th>
<th class="cellalignment6106" id="d21453e4576">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6036" id="d21453e4581" headers="d21453e4573">
<p><code class="codeph">DROP</code> <span class="italic"><code class="codeph">table</code></span></p>
</td>
<td class="cellalignment6107" headers="d21453e4581 d21453e4576">
<p>Drops the table. Drops all the indexes and their corresponding partitions</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6036" id="d21453e4593" headers="d21453e4573">
<p><code class="codeph">TRUNCATE</code> <span class="italic"><code class="codeph">table</code></span></p>
</td>
<td class="cellalignment6107" headers="d21453e4593 d21453e4576">
<p>Truncates the table. Truncates all the indexes and the index partitions</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformal" id="GUID-B0B1897A-87E1-46E3-9E12-C342AD354B26__BABDJCCI">
<p class="titleintable">Table 8-6 Summary of ALTER TABLE Operations with Partition Maintenance</p>
<table class="cellalignment5987" title="Summary of ALTER TABLE Operations with Partition Maintenance" summary="Operations">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6004" id="d21453e4614">ALTER TABLE Operation</th>
<th class="cellalignment6005" id="d21453e4617">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4622" headers="d21453e4614">
<p>Modify Partition Unusable local indexes</p>
</td>
<td class="cellalignment6007" headers="d21453e4622 d21453e4617">
<p>Marks the local index partition associated with the table partition as <code class="codeph">UNUSABLE</code></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4631" headers="d21453e4614">
<p>Modify Partition Rebuild Unusable local indexes</p>
</td>
<td class="cellalignment6007" headers="d21453e4631 d21453e4617">
<p>Rebuilds the local index partitions that are marked <code class="codeph">UNUSABLE</code> and are associated with this table partition</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4641" headers="d21453e4614">
<p>Add Partition</p>
</td>
<td class="cellalignment6007" headers="d21453e4641 d21453e4617">
<p>Adds a new table partition. Also adds a new local index partition.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4648" headers="d21453e4614">
<p>Coalesce Partition</p>
</td>
<td class="cellalignment6007" headers="d21453e4648 d21453e4617">
<p>Applicable to only hash partitioned tables. Drops a base table partition. Also drops the associated local index partition.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4655" headers="d21453e4614">
<p>Drop Partition</p>
</td>
<td class="cellalignment6007" headers="d21453e4655 d21453e4617">
<p>Drops a base table partition. Also drops the associated local index partition</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4662" headers="d21453e4614">
<p>Truncate Partition</p>
</td>
<td class="cellalignment6007" headers="d21453e4662 d21453e4617">
<p>Truncate the table partition. Also truncates the associated local index partition</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4669" headers="d21453e4614">
<p>Move Partition</p>
</td>
<td class="cellalignment6007" headers="d21453e4669 d21453e4617">
<p>Moves the base table partition to another tablespace. Corresponding local index partitions are marked <code class="codeph">UNUSABLE</code>.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4679" headers="d21453e4614">
<p>Split Partition</p>
</td>
<td class="cellalignment6007" headers="d21453e4679 d21453e4617">
<p>Splits a table partition into two partitions. Corresponding local index partition is also split. If the resulting partitions are non-empty, the index partitions are marked <code class="codeph">UNUSABLE</code>.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4689" headers="d21453e4614">
<p>Merge Partition</p>
</td>
<td class="cellalignment6007" headers="d21453e4689 d21453e4617">
<p>Merges two table partitions into one partition. Corresponding local index partitions should also merge. If the resulting partition contains data, the index partition is marked <code class="codeph">UNUSABLE</code>.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4699" headers="d21453e4614">
<p>Exchange Partition Excluding Indexes</p>
</td>
<td class="cellalignment6007" headers="d21453e4699 d21453e4617">
<p>Exchanges a table partition with a non-partitioned table. Local index partitions and global indexes are marked <code class="codeph">UNUSABLE</code>.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6006" id="d21453e4709" headers="d21453e4614">
<p>Exchange Partition Including Indexes</p>
</td>
<td class="cellalignment6007" headers="d21453e4709 d21453e4617">
<p>Exchanges a table partition with a non-partitioned table. Local index partition is exchanged with global index on the non-partitioned table. Index partitions remain <code class="codeph">USABLE</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADDCI4479"></a>
<div class="props_rev_3"><a id="GUID-319EBA4E-5783-43B8-AAA5-73A954F55994"></a>
<h3 id="ADDCI-GUID-319EBA4E-5783-43B8-AAA5-73A954F55994" class="sect3">ODCIIndex Interfaces for Partitioning Domain Indexes</h3>
<div>
<p>To support local domain indexes, you must implement the standard <code class="codeph">ODCIIndex</code> methods, plus two additional methods that are specific to local domain indexes:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="ext_idx_ref.htm#GUID-7914F874-620F-48F1-ADDC-040CC82D46ED">ODCIIndexExchangePartition()</a></p>
</li>
<li>
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a></p>
</li>
</ul>
</div>
</div>
<a id="ADDCI4480"></a>
<div class="props_rev_3"><a id="GUID-2F997407-8633-45F4-9646-D96D40ECEC7C"></a>
<h3 id="ADDCI-GUID-2F997407-8633-45F4-9646-D96D40ECEC7C" class="sect3">Using SQL*Loader for Domain Indexes</h3>
<div>
<div class="section">
<p><a id="d21453e4839" class="indexterm-anchor"></a>SQL*Loader conventional path loads and direct path loads are supported for tables on which domain indexes are defined, with this limitation: The table must be heap-organized.</p>
<p>To do a direct path load on a domain index defined on an <code class="codeph">IOT</code> or on a <code class="codeph">LOB</code> column, perform these tasks:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Drop the domain index</span></li>
<li><span>Do the direct path load in SQL*Loader.</span></li>
<li><span>Re-create the domain indexes.</span></li>
</ol>
</div>
</div>
</div>
<a id="ADDCI2801"></a>
<div class="props_rev_3"><a id="GUID-032AAB4D-3AEA-4CB3-92F4-C30A3AD59656"></a>
<h2 id="ADDCI-GUID-032AAB4D-3AEA-4CB3-92F4-C30A3AD59656" class="sect2">Using System Partitioning</h2>
<div>
<p>System Partitioning enables you to create a single table consisting of multiple physical partitions. System partitioning does not use partitioning keys. Instead, it creates the number of partitions specified. Therefore, the resulting partitions have no bounds (range), values (list), or a partitioning method.</p>
<p>Because there are no partitioning keys, you must explicitly map the distributed table rows to the destination partition. When inserting a row, for example, you must use the partition extended syntax to specify the partition to which a row must be mapped.</p>
<div class="infoboxnotealso" id="GUID-032AAB4D-3AEA-4CB3-92F4-C30A3AD59656__GUID-6C6831CD-8B27-4FD2-ADBD-D6C371AE5DB0">
<p class="notep1">See Also:</p>
<p>Supporting SQL syntax in the <a class="olink SQLRF01402" target="_blank" href="../SQLRF/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</div>
</div>
<a id="ADDCI4481"></a>
<div class="props_rev_3"><a id="GUID-2BA9646E-6A4E-4C49-B902-42F45EDBF34A"></a>
<h3 id="ADDCI-GUID-2BA9646E-6A4E-4C49-B902-42F45EDBF34A" class="sect3">Advantages of System Partitioned Tables</h3>
<div>
<p>The main advantages of system-partitioned tables is that it can be used to create and maintain tables that are equipartitioned with respect to another table. For example, this means that a dependent table could be created as a system-partitioned table, with the same number of partitions as the base table. It follows that such a system-partitioned table can be used to store index data for a domain index, with the following implications:</p>
<ul style="list-style-type: disc;">
<li>
<p>Pruning follows the base table pruning rules: when a partition is accessed in the base table, the corresponding partition can be accessed in the system-partitioned table.</p>
</li>
<li>
<p>DDLs of the base table can be duplicated on the system-partitioned table. Therefore, if a partition is dropped on the base table, the corresponding partition on the system-partitioned table is dropped automatically.</p>
</li>
</ul>
</div>
</div>
<a id="ADDCI4482"></a>
<div class="props_rev_3"><a id="GUID-DEB47AB5-FB01-4A7A-A93B-671D9EDE7D9C"></a>
<h3 id="ADDCI-GUID-DEB47AB5-FB01-4A7A-A93B-671D9EDE7D9C" class="sect3">Implementing System Partitioning</h3>
<div>
<div class="section">
<p>Consider how to implement system partitioning.</p>
</div>
<!-- class="section" --></div>
<a id="ADDCI4484"></a><a id="ADDCI4483"></a>
<div class="props_rev_3"><a id="GUID-2D94CE13-B343-450E-9678-704D35435FB0"></a>
<h4 id="ADDCI-GUID-2D94CE13-B343-450E-9678-704D35435FB0" class="sect4">Creating a System-Partitioned Table</h4>
<div>
<div class="section">
<p><a href="dom_idx.htm#GUID-2D94CE13-B343-450E-9678-704D35435FB0__BHAFECIE">Example 8-16</a> describes how to create a system-partitioned table with four partitions. Each partition can have different physical attributes.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-2D94CE13-B343-450E-9678-704D35435FB0__BHAFECIE">
<p class="titleinexample">Example 8-16 Creating System-Partitioned Tables</p>
<pre dir="ltr">CREATE TABLE SystemPartitionedTable (c1 integer, c2 integer)
PARTITION BY SYSTEM
(
  PARTITION p1 TABLESPACE tbs_1,
  PARTITION p2 TABLESPACE tbs_2,
  PARTITION p3 TABLESPACE tbs_3,
  PARTITION p4 TABLESPACE tbs_4
);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4486"></a><a id="ADDCI4487"></a><a id="ADDCI5186"></a><a id="ADDCI4485"></a>
<div class="props_rev_3"><a id="GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34"></a>
<h4 id="ADDCI-GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34" class="sect4">Inserting Data into a System-Partitioned Table</h4>
<div>
<div class="section">
<p><a href="dom_idx.htm#GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__BHAGFFGA">Example 8-17</a> demonstrates how to insert data into a system-partitioned table. Both <code class="codeph">INSERT</code> and <code class="codeph">MERGE</code> statements (not shown here) must use the partition extended syntax to identify the partition to which the row should be added. The tuple <code class="codeph">(4,5)</code> could have been inserted into any of the four partitions created in <a href="dom_idx.htm#GUID-2D94CE13-B343-450E-9678-704D35435FB0__BHAFECIE">Example 8-16</a>. <code class="codeph">DATAOBJ_TO_PARTITION</code> can also be used, as demonstrated by <a href="dom_idx.htm#GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__BHACBCJE">Example 8-18</a>.</p>
<p>Starting with Oracle Database 12<span class="italic">c</span>, Oracle recommends using <code class="codeph">DATAOBJ_TO_MAT_PARTITION</code>, as demonstrated in <a href="dom_idx.htm#GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__CHDEHHFD">Example 8-19</a>, instead of the <code class="codeph">DATAOBJ_TO_PARTITION</code> function. The <code class="codeph">DATAOBJ_TO_MAT_PARTITION</code> function supports local domain indexes on interval partitioned tables.</p>
<p>Note that the first line of code shows how to insert data into a named partition, while the second line of code shows that data can also be inserted into a partition based on the partition&#39;s order. The support for bind variables, illustrated on the third code line, is important because it allows cursor sharing between <code class="codeph">INSERT</code> statements.</p>
<p>The <code class="codeph">DATAOBJ_TO_PARTITION</code> function shown in <a href="dom_idx.htm#GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__BHACBCJE">Example 8-18</a> determines the absolute partition number, given the physical partition identifier. However, if the base table is interval partitioned, then there might be holes in the partition numbers corresponding to unmaterialized partitions. Because the system partitioned table only has materialized partitions, <code class="codeph">DATAOBJ_TO_PARTITION</code> numbers can cause a mis-match between the partitions of the base table and the partitions of the underlying system partitioned index storage tables.</p>
<p>The new function, <code class="codeph">DATAOBJ_TO_MAT_PARTITION</code>, shown in <a href="dom_idx.htm#GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__CHDEHHFD">Example 8-19</a>, returns the materialized partition number (as opposed to the absolute partition number) and helps keep the two tables in sync. Indextypes planning to support local domain indexes on interval partitioned tables should migrate to the use of this function.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__BHAGFFGA">
<p class="titleinexample">Example 8-17 Inserting Data into System-Partitioned Tables</p>
<pre dir="ltr">INSERT INTO SystemPartitionedTable PARTITION (p1) VALUES (4,5);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__BHACBCJE">
<p class="titleinexample">Example 8-18 Inserting Data into System-Partitioned Tables; DATAOBJ_TO_PARTITION</p>
<pre dir="ltr">INSERT INTO SystemPartitionedTable PARTITION 
  (DATAOBJ_TO_PARTITION (<span class="italic">base_table</span>, :<span class="italic">physical_partid</span>))
  VALUES (...);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5A178C16-6B3F-4DC0-8C4D-E2C22A0A5A34__CHDEHHFD">
<p class="titleinexample">Example 8-19 Inserting Data into System-Partitioned Tables; DATAOBJ_TO_MAT_PARTITION</p>
<pre dir="ltr">INSERT INTO SystemPartitionedTable PARTITION 
  (DATAOBJ_TO_MAT_PARTITION (base_table, :physical_partid)) 
  VALUES (...);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4488"></a>
<div class="props_rev_3"><a id="GUID-479314EF-CC8B-4FB2-9DB5-168B9171D3D9"></a>
<h4 id="ADDCI-GUID-479314EF-CC8B-4FB2-9DB5-168B9171D3D9" class="sect4">Deleting and Updating Data in a System-Partitioned Table</h4>
<div>
<div class="section">
<p>While delete and update operations do not require the partition extended syntax, Oracle recommends that you use it if at all possible. Because there is no partition pruning, the entire table is scanned to execute the operation if the partition-extended syntax is omitted. This highlights the fact that there is no implicit mapping between the rows and the partitions.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADDCI4489"></a>
<div class="props_rev_3"><a id="GUID-C672215F-7608-4267-A9BC-BBA10AEAAB4C"></a>
<h3 id="ADDCI-GUID-C672215F-7608-4267-A9BC-BBA10AEAAB4C" class="sect3">Supporting Operations with System-Partitioned Tables</h3>
<div>
<p>The following operations continue to be supported by system partitioning:</p>
<ul style="list-style-type: disc;">
<li>
<p>Partition maintenance operations and other DDLs, with the exception of:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">ALTER INDEX SPLIT PARTITION</code></p>
</li>
<li>
<p><code class="codeph">ALTER TABLE SPLIT PARTITION</code></p>
</li>
<li>
<p><code class="codeph">CREATE TABLE</code> (as <code class="codeph">SELECT</code>)</p>
</li>
</ul>
</li>
<li>
<p>Creation of local indexes, with the exception of unique local indexes because they require a partitioning key</p>
</li>
<li>
<p>Creation of local bitmapped indexes</p>
</li>
<li>
<p>Creation of global indexes</p>
</li>
<li>
<p>All DML operations</p>
</li>
<li>
<p><code class="codeph">INSERT AS SELECT</code> operations with partition extended syntax, as shown in the following code example:</p>
<p>Inserting Data into a Particular Partition of a Table</p>
<pre dir="ltr">INSERT INTO <span class="italic">TableName</span> 
  PARTITION (
    <span class="italic">PartitionName</span>|
    DATAOBJ_TO_MAT_PARTITION(<span class="italic">base_table</span>, :<span class="italic">physical_partid</span>))
  AS <span class="italic">SubQuery</span>
</pre></li>
</ul>
<p>The following operations are no longer supported by system partitioning because system partitioning does not use a partitioning method, and therefore does not distribute rows to partitions.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CREATE TABLE AS SELECT</code> An alternative approach is to first create the table, and then insert rows into each partition.</p>
</li>
<li>
<p><code class="codeph">INSERT INTO</code> <span class="italic"><code class="codeph">TableName</code></span> <code class="codeph">AS</code> <span class="italic"><code class="codeph">SubQuery</code></span></p>
</li>
</ul>
</div>
</div>
<a id="ADDCI4491"></a>
<div class="props_rev_3"><a id="GUID-8CB25092-9CB4-4196-965A-F01BFFDDDB79"></a>
<h3 id="ADDCI-GUID-8CB25092-9CB4-4196-965A-F01BFFDDDB79" class="sect3">Running Partition Maintenance Operations</h3>
<div>
<div class="section">
<p>As an example, consider an <code class="codeph">ALTER TABLE SPLIT PARTITION</code> routine issued for the base table of a domain index.</p>
</div>
<!-- class="section" -->
<ol>
<li><span>The system invokes the <a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a> method using the information about the partition being added or dropped; remember that a 1:2 split involves dropping of one partition and adding two new partitions.</span></li>
<li><span>The system invokes the <a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> on the affected partitions.</span></li>
<li><span>The system drops the partition that has been split from all system-partition index and statistics storage tables.</span></li>
<li><span>The system adds two new partitions to the system-partitioned tables.</span></li>
<li><span>If the partition that is being split is empty, then one call to <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> rebuilds the split partition, and a second call to <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> rebuilds the newly added partition.</span></li>
</ol>
</div>
</div>
<a id="ADDCI4492"></a>
<div class="props_rev_3"><a id="GUID-79187E7B-E909-4764-A73D-EC72E15037B3"></a>
<h3 id="ADDCI-GUID-79187E7B-E909-4764-A73D-EC72E15037B3" class="sect3">Altering Table Exchange Partitions with Indexes</h3>
<div>
<div class="section">
<p>The <code class="codeph">ALTER TABLE EXCHANGE PARTITION</code> command is allowed for tables with domain indexes only under the following circumstances:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>a domain index is defined on both the non-partitioned table, and the partitioned table</p>
</li>
<li>
<p>both the non-partitioned table and the partitioned table have the same associated indextype</p>
</li>
</ul>
<p>The <code class="codeph">ALTER TABLE EXCHANGE PARTITION</code> routine invokes the following user-implemented methods:</p>
</div>
<!-- class="section" -->
<ol>
<li><span><a href="ext_idx_ref.htm#GUID-7914F874-620F-48F1-ADDC-040CC82D46ED">ODCIIndexExchangePartition()</a> for the affected partition and index</span></li>
<li><span><a href="ext_opt_ref.htm#GUID-6FE88952-A3B9-40B3-8A49-BF0D548C7EE6">ODCIStatsExchangePartition()</a> for the affected partition and index if statistics are collected for them</span></li>
</ol>
</div>
</div>
</div>
<a id="ADDCI4494"></a><a id="ADDCI4496"></a><a id="ADDCI4495"></a><a id="ADDCI4493"></a>
<div class="props_rev_3"><a id="GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9"></a>
<h2 id="ADDCI-GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9" class="sect2">Using System-Managed Domain Indexes</h2>
<div>
<p>Consider how system-managed domain indexes work, how to collect and store statistics for them, and restrictions on their use.</p>
<p>Let us examine how system-managed domain indexes work.</p>
<p><a href="dom_idx.htm#GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9__BHABCBAB">Figure 8-1</a> illustrates the initial setup of a base table <code class="codeph">T1</code>. <code class="codeph">T1</code> has the following elements:</p>
<ul style="list-style-type: disc;">
<li>
<p>three partitions</p>
</li>
<li>
<p>a local domain index on one of its columns, <code class="codeph">IT1</code></p>
</li>
<li>
<p>a table of corresponding metadata objects, <code class="codeph">MT1</code>, which is the optional metadata table created by the indextype to store information specific to each partition of the local domain index</p>
</li>
<li>
<p>a system-partitioned table, <code class="codeph">SPT1</code>, created by the indextype to store index data</p>
</li>
</ul>
<p>The structures shown in these tables (table <code class="codeph">T1</code>, index <code class="codeph">IT1</code> and the system partitioned table <code class="codeph">SPT1</code>) have the same number of partitions, in a one-to-one relationship. The metadata table <code class="codeph">MT1</code> has as many rows as the number of partitions in these tables.</p>
<div class="figure" id="GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9__BHABCBAB">
<p class="titleinfigure">Figure 8-1 Three-Partition Table with a Local Domain Index, and Associated Structures</p>
<img width="488" height="452" src="img/GUID-55EEE71E-18D0-4C35-8CDD-EFCBF4E68227-default.gif" alt="Description of Figure 8-1 follows" title="Description of Figure 8-1 follows"/><br/>
<a href="img_text/GUID-55EEE71E-18D0-4C35-8CDD-EFCBF4E68227-print.htm">Description of &#34;Figure 8-1 Three-Partition Table with a Local Domain Index, and Associated Structures&#34;</a></div>
<!-- class="figure" -->
<p><a href="dom_idx.htm#GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9__BHAHBFAI">Figure 8-2</a> illustrates what happens to T1 and its related structures after splitting one of its partitions with the operation in <a href="dom_idx.htm#GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9__BHABABIF">Example 8-20</a>:</p>
<ul style="list-style-type: disc;">
<li>
<p>the partition <code class="codeph">P2</code> in the base table <code class="codeph">T1</code> splits into <code class="codeph">P21</code> and <code class="codeph">P22</code></p>
</li>
<li>
<p>in the local domain index, partition <code class="codeph">IP2</code> is dropped and two new partitions, <code class="codeph">IP21</code> and <code class="codeph">IP22</code>, are created</p>
</li>
<li>
<p>the indextype invokes the <a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a> method that makes the necessary updates to the metadata table <code class="codeph">MT1</code></p>
</li>
<li>
<p>in the system partitioned table <code class="codeph">SPT1</code>, the partition that corresponds to partition <code class="codeph">IP2</code> is dropped and two new partitions are created</p>
</li>
<li>
<p>index partitions are marked <code class="codeph">UNUSABLE</code> as a result of the split operation; they must be rebuilt to make them <code class="codeph">USABLE</code></p>
</li>
</ul>
<div class="figure" id="GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9__BHAHBFAI">
<p class="titleinfigure">Figure 8-2 A Three-Partition Table after ALTER TABLE SPLIT PARTITION</p>
<img width="480" height="518" src="img/GUID-389D24E6-62B0-494D-80F3-CFEB5808F92B-default.gif" alt="Description of Figure 8-2 follows" title="Description of Figure 8-2 follows"/><br/>
<a href="img_text/GUID-389D24E6-62B0-494D-80F3-CFEB5808F92B-print.htm">Description of &#34;Figure 8-2 A Three-Partition Table after ALTER TABLE SPLIT PARTITION &#34;</a></div>
<!-- class="figure" -->
<div class="example" id="GUID-4D38D618-33FD-466F-B320-EEA3AD0F96B9__BHABABIF">
<p class="titleinexample">Example 8-20 Splitting an Existing Table Partition</p>
<pre dir="ltr">ALTER TABLE T1 SPLIT PARTITION P2 INTO P21, P22
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4497"></a>
<div class="props_rev_3"><a id="GUID-779002A2-CAE8-401D-9F45-16C7CEFF0F30"></a>
<h2 id="ADDCI-GUID-779002A2-CAE8-401D-9F45-16C7CEFF0F30" class="sect2">Designing System-Managed Domain Indexes</h2>
<div>
<p>When a top-level DDL that affects a non-partitioned domain index is called, the system invokes user-implemented <code class="codeph">ODCIIndex</code><span class="italic"><code class="codeph">XXX</code></span><code class="codeph">()</code> and <code class="codeph">ODCIStats</code><span class="italic"><code class="codeph">XXX</code></span><code class="codeph">()</code> methods. <a href="dom_idx.htm#GUID-CE176112-3B49-461D-946F-E5D9DCB70586__BHACDBCG" title="Mapping between DDLs and various ODCI methods used for non-partitioned domain indexes">Table 8-7</a> shows these methods.</p>
<p>When a top-level DDL that affects a local system managed domain index is called, the system invokes user-implemented <code class="codeph">ODCIIndex</code><span class="italic"><code class="codeph">XXX</code></span><code class="codeph">()</code> and <code class="codeph">ODCIStats</code><span class="italic"><code class="codeph">XXX</code></span><code class="codeph">()</code> methods. <a href="dom_idx.htm#GUID-7A8DBC97-AE74-42E2-8C44-C6456957B72D__BHAIGBIH" title="Mapping between DDLs and various ODCI methods used for local system-managed domain indexes">Table 8-8</a> shows these methods. In summary, the following rules apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>For <code class="codeph">ODCIIndex</code><span class="italic"><code class="codeph">XXX</code></span> <code class="codeph">()</code> DMLs and queries, both the index partition object identifier (<code class="codeph">ODCIIndexInfo.IndexPartitionIden</code>) and a base table partition physical identifier (<code class="codeph">ODIIndexInfo.IndexCols(1).TablePartitionIden</code>) are required. For <code class="codeph">ODCIIndex</code><span class="italic"><code class="codeph">XXX</code></span> <code class="codeph">()</code> DDL routines, both the index partition object identifier and the index partition name are supplied.</p>
</li>
<li>
<p>The <code class="codeph">CREATE INDEX</code> routine uses two calls to <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> (one at the beginning and one at the end), and as many calls to <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code> as there are partitions.</p>
</li>
<li>
<p>The <code class="codeph">TRUNCATE TABLE</code> routine uses as many calls to <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code> as there are partitions.</p>
</li>
<li>
<p>All partition maintenance operations invoke <a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a> so that the indextype correctly updates its partition metadata table. The list of index partitions is specified by the index partition name and the index partition object identifier, and is supplied with information regarding addition or dropping of the partition. No DDLs are allowed in these calls.With each partition maintenance operation, the system implicitly transforms the system-partitioned storage tables that were created using domain indexes. The names of the newly generated partitions correspond to the index partition names.</p>
</li>
<li>
<p>If the system-partitioned tables are used to store partition-level statistics, then the tables and indexes created by <a href="ext_opt_ref.htm#GUID-227ABB3C-6218-4AA9-BC1C-D963EE800D87">ODCIStatsCollect()</a> and dropped by <a href="ext_opt_ref.htm#GUID-294738F4-65B1-4272-BBD6-686F2E38B9C2">ODCIStatsDelete()</a> are tracked by the system to ensure that they remain equipartitioned.</p>
</li>
<li>
<p>If the application implements user-defined partition-level statistics, the system invokes <a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> with every partition maintenance operation. This ensure that the statistics type updates its partition-level statistics, and (optionally) its aggregate global statistics. No DDLs are allowed in these calls. If <a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> is not implemented, the system does not raise an exception but proceeds to the next programmatic step.</p>
</li>
</ul>
</div>
<a id="ADDCI4498"></a>
<div class="props_rev_3"><a id="GUID-CE176112-3B49-461D-946F-E5D9DCB70586"></a>
<h3 id="ADDCI-GUID-CE176112-3B49-461D-946F-E5D9DCB70586" class="sect3">Methods for Non-Partitioned Domain Indexes</h3>
<div>
<div class="tblformal" id="GUID-CE176112-3B49-461D-946F-E5D9DCB70586__BHACDBCG">
<p class="titleintable">Table 8-7 ODCI<span class="italic">XXX</span>() Methods for Non-Partitioned Domain Indexes</p>
<table class="cellalignment5987" title="ODCIXXX() Methods for Non-Partitioned Domain Indexes" summary="Mapping between DDLs and various ODCI methods used for non-partitioned domain indexes">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6000" id="d21453e6020">DDL</th>
<th class="cellalignment6001" id="d21453e6023">ODCIXXX() Method Used in System-Managed Approach</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6031" headers="d21453e6020">
<pre dir="ltr">CREATE INDEXTYPE
</pre></td>
<td class="cellalignment6003" headers="d21453e6031 d21453e6023">
<p>Specify the system-managed approach</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6038" headers="d21453e6020">
<pre dir="ltr">CREATE INDEX
</pre></td>
<td class="cellalignment6003" headers="d21453e6038 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6047" headers="d21453e6020">
<pre dir="ltr">TRUNCATE TABLE
</pre></td>
<td class="cellalignment6003" headers="d21453e6047 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a>,</p>
<p>with the <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6063" headers="d21453e6020">
<pre dir="ltr">ALTER INDEX
</pre></td>
<td class="cellalignment6003" headers="d21453e6063 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6072" headers="d21453e6020">
<pre dir="ltr">GATHER_INDEX_STATS()
</pre>
<p>in <code class="codeph">DBMS_STATS</code></p>
</td>
<td class="cellalignment6003" headers="d21453e6072 d21453e6023">
<p><a href="ext_opt_ref.htm#GUID-227ABB3C-6218-4AA9-BC1C-D963EE800D87">ODCIStatsCollect()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6085" headers="d21453e6020">
<pre dir="ltr">DELETE_INDEX_STATS()
</pre>
<p>in <code class="codeph">DBMS_STATS</code></p>
</td>
<td class="cellalignment6003" headers="d21453e6085 d21453e6023">
<p><a href="ext_opt_ref.htm#GUID-294738F4-65B1-4272-BBD6-686F2E38B9C2">ODCIStatsDelete()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6098" headers="d21453e6020">
<pre dir="ltr">DROP INDEX
</pre>
<p>(Force)</p>
</td>
<td class="cellalignment6003" headers="d21453e6098 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-F128CB3B-6B3E-41C3-A623-67BCB5BC9292">ODCIIndexDrop()</a> and <a href="ext_opt_ref.htm#GUID-294738F4-65B1-4272-BBD6-686F2E38B9C2">ODCIStatsDelete()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6113" headers="d21453e6020">
<pre dir="ltr">INSERT
</pre></td>
<td class="cellalignment6003" headers="d21453e6113 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-EF42025B-6DE2-4F2A-90EF-62775EE0EED6">ODCIIndexInsert()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6122" headers="d21453e6020">
<pre dir="ltr">DELETE
</pre></td>
<td class="cellalignment6003" headers="d21453e6122 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-4B2E080D-FE8B-4598-9084-56FBE255196B">ODCIIndexDelete()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6131" headers="d21453e6020">
<pre dir="ltr">UPDATE
</pre></td>
<td class="cellalignment6003" headers="d21453e6131 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-CB42E738-EFD1-4053-9DDF-BEF455F92815">ODCIIndexUpdate()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6002" id="d21453e6140" headers="d21453e6020">
<pre dir="ltr">QUERY
</pre></td>
<td class="cellalignment6003" headers="d21453e6140 d21453e6023">
<p><a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a>, <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a> and <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADDCI4499"></a>
<div class="props_rev_3"><a id="GUID-7A8DBC97-AE74-42E2-8C44-C6456957B72D"></a>
<h3 id="ADDCI-GUID-7A8DBC97-AE74-42E2-8C44-C6456957B72D" class="sect3">Methods for Local System-Managed Domain Indexes</h3>
<div>
<div class="tblformal" id="GUID-7A8DBC97-AE74-42E2-8C44-C6456957B72D__BHAIGBIH">
<p class="titleintable">Table 8-8 ODCI<span class="italic">XXX</span>() Methods for Local System-Managed Domain Indexes</p>
<table class="cellalignment5987" title="ODCIXXX() Methods for Local System-Managed Domain Indexes" summary="Mapping between DDLs and various ODCI methods used for local system-managed domain indexes">
<thead>
<tr class="cellalignment5978">
<th class="cellalignment6017" id="d21453e6220">DDL</th>
<th class="cellalignment6070" id="d21453e6223">ODCIXXX() Method Used in System-Managed Approach</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6231" headers="d21453e6220">
<pre dir="ltr">CREATE INDEXTYPE
</pre></td>
<td class="cellalignment6071" headers="d21453e6231 d21453e6223">
<p>Specify the system-managed approach</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6238" headers="d21453e6220">
<pre dir="ltr">CREATE INDEX
</pre></td>
<td class="cellalignment6071" headers="d21453e6238 d21453e6223">
<p>One call to <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a>, one <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> call for each partition, with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code>, and then a final call to <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6261" headers="d21453e6220">
<pre dir="ltr">TRUNCATE TABLE
</pre></td>
<td class="cellalignment6071" headers="d21453e6261 d21453e6223">
<p>One call for each partition: <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a>, with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6276" headers="d21453e6220">
<pre dir="ltr">ALTER INDEX
</pre></td>
<td class="cellalignment6071" headers="d21453e6276 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6285" headers="d21453e6220">
<pre dir="ltr">GATHER_INDEX_STATS()
</pre>
<p>in <code class="codeph">DBMS_STATS</code></p>
</td>
<td class="cellalignment6071" headers="d21453e6285 d21453e6223">
<p>One call to <a href="ext_opt_ref.htm#GUID-227ABB3C-6218-4AA9-BC1C-D963EE800D87">ODCIStatsCollect()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6299" headers="d21453e6220">
<pre dir="ltr">DELETE_INDEX_STATS()
</pre>
<p>in <code class="codeph">DBMS_STATS</code></p>
</td>
<td class="cellalignment6071" headers="d21453e6299 d21453e6223">
<p>One call to <a href="ext_opt_ref.htm#GUID-294738F4-65B1-4272-BBD6-686F2E38B9C2">ODCIStatsDelete()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6313" headers="d21453e6220">
<pre dir="ltr">DROP INDEX
</pre>
<p>(Force)</p>
</td>
<td class="cellalignment6071" headers="d21453e6313 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-F128CB3B-6B3E-41C3-A623-67BCB5BC9292">ODCIIndexDrop()</a>, and if user-defined statistics have been collected then <a href="ext_opt_ref.htm#GUID-294738F4-65B1-4272-BBD6-686F2E38B9C2">ODCIStatsDelete()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6328" headers="d21453e6220">
<pre dir="ltr">ALTER TABLE ADD PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6328 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a>, <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6346" headers="d21453e6220">
<p><code class="codeph">ALTER TABLE COALESCE PARTITION</code></p>
</td>
<td class="cellalignment6071" headers="d21453e6346 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a>;</p>
<p><a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> if statistics are collected</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6362" headers="d21453e6220">
<pre dir="ltr">ALTER TABLE  DROP PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6362 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a>; <a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> if statistics are collected</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6376" headers="d21453e6220">
<pre dir="ltr">ALTER TABLE  TRUNCATE PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6376 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a>; <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code>; <a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> if a statistics type is associated with the indextype and if user-defined statistics have been collected</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6400" headers="d21453e6220">
<pre dir="ltr">ALTER TABLE  SPLIT PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6400 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a>; <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code> only if the result partitions are empty; <a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> if a statistics type is associated with the indextype and if user-defined statistics have been collected</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6423" headers="d21453e6220">
<pre dir="ltr">ALTER TABLE  MERGE PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6423 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a>; <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> with <code class="codeph">alter_option=</code><code class="codeph">AlterIndexRebuild</code> only if the result partitions are empty; <a href="ext_opt_ref.htm#GUID-E3185A04-24BD-43C8-A2EC-76DDF78188A2">ODCIStatsUpdPartStatistics()</a> if a statistics type is associated with the indextype and if user-defined statistics have been collected</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6446" headers="d21453e6220">
<pre dir="ltr">ALTER TABLE  EXCHANGE PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6446 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-7914F874-620F-48F1-ADDC-040CC82D46ED">ODCIIndexExchangePartition()</a>; if a statistics type is associated with the indextype, and if user-defined statistics have been collected, also <a href="ext_opt_ref.htm#GUID-6FE88952-A3B9-40B3-8A49-BF0D548C7EE6">ODCIStatsExchangePartition()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6459" headers="d21453e6220">
<pre dir="ltr">ALTER TABLE  MOVE PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6459 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-C2C4DB40-106A-491C-B241-985B69DC2FE1">ODCIIndexUpdPartMetadata()</a> if a partitioned table has a valid system-managed local domain index that has been updated as part of a partition <code class="codeph">MOVE</code> and rename operation. If a partition is moved without updating the system-managed indexes, the index partition is marked <code class="codeph">UNUSABLE</code>.</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6475" headers="d21453e6220">
<pre dir="ltr">GATHER_TABLE_STATS()
</pre>
<p>in <code class="codeph">DBMS_STATS</code></p>
</td>
<td class="cellalignment6071" headers="d21453e6475 d21453e6223">
<p>One call to <a href="ext_opt_ref.htm#GUID-227ABB3C-6218-4AA9-BC1C-D963EE800D87">ODCIStatsCollect()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6489" headers="d21453e6220">
<pre dir="ltr">DELETE_TABLE_STATS()
</pre>
<p>in <code class="codeph">DBMS_STATS</code></p>
</td>
<td class="cellalignment6071" headers="d21453e6489 d21453e6223">
<p>One call to <a href="ext_opt_ref.htm#GUID-294738F4-65B1-4272-BBD6-686F2E38B9C2">ODCIStatsDelete()</a>, if a statistics type is associated with the indextype, and if user-defined statistics have been collected</p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6504" headers="d21453e6220">
<pre dir="ltr">ALTER INDEX PARTITION
</pre></td>
<td class="cellalignment6071" headers="d21453e6504 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6513" headers="d21453e6220">
<pre dir="ltr">INSERT
</pre></td>
<td class="cellalignment6071" headers="d21453e6513 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-EF42025B-6DE2-4F2A-90EF-62775EE0EED6">ODCIIndexInsert()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6522" headers="d21453e6220">
<pre dir="ltr">DELETE
</pre></td>
<td class="cellalignment6071" headers="d21453e6522 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-4B2E080D-FE8B-4598-9084-56FBE255196B">ODCIIndexDelete()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6531" headers="d21453e6220">
<pre dir="ltr">UPDATE
</pre></td>
<td class="cellalignment6071" headers="d21453e6531 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-CB42E738-EFD1-4053-9DDF-BEF455F92815">ODCIIndexUpdate()</a></p>
</td>
</tr>
<tr class="cellalignment5978">
<td class="cellalignment6020" id="d21453e6540" headers="d21453e6220">
<pre dir="ltr">QUERY
</pre></td>
<td class="cellalignment6071" headers="d21453e6540 d21453e6223">
<p><a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a>, <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a> and <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
<a id="ADDCI4500"></a>
<div class="props_rev_3"><a id="GUID-FE6EAE94-F2DA-495F-80E7-58B7605C60C2"></a>
<h2 id="ADDCI-GUID-FE6EAE94-F2DA-495F-80E7-58B7605C60C2" class="sect2">Creating Local Domain Indexes</h2>
<div>
<div class="section">
<p>The <code class="codeph">CREATE INDEX</code> routine implements the following steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>To create system-partitioned storage tables, the system calls <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> with index information. The number of partitions is supplied in the <code class="codeph">ODCIIndexInfo.IndexPartitionTotal</code> attribute. Note that all the partitioned storage tables should be system-partitioned.</span>
<div>
<p>The object-level <code class="codeph">CREATE</code> routine passes in only the object-level parameter string. To construct the storage attributes for all partitions, the indextype needs partition-level parameter strings. To obtain these, the cartridge must programmatically query the <span class="italic"><code class="codeph">XXX</code></span><code class="codeph">_IND_PARTITIONS</code> views on the dictionary tables.</p>
<p>Oracle recommends that the indextype assign names to the storage tables and its partitions using the index partition name. Note that you must also obtain index partition names programmatically, from the <span class="italic"><code class="codeph">XXX</code></span><code class="codeph">_IND_PARTITIONS</code> views.</p>
</div>
</li>
<li class="stepexpand"><span>For each partition, the system calls the <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> method with <code class="codeph">alter_option=AlterIndexRebuild</code>.</span>
<div>
<p>You can verify if this <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> call has been made as part of a <code class="codeph">CREATE INDEX</code> call by checking whether the <code class="codeph">ODICEnv.IntermediateCall</code> bit was set.</p>
<p>Programatically select the index column values for each partition from the base table partition, transform them, and store the transformed data in the corresponding system-partitioned table.</p>
<p>During DML or query operations, if the indextype must refer to the metadata table, it should be programmed to insert the index partition object identifier into the corresponding row of the metadata table.</p>
<p>To store values in non-partitioned tables, you can program the cartridge either at the level of the initial <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> call, or at the level of the <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> calls made for each partition.</p>
</div>
</li>
<li class="stepexpand"><span>The system makes a final call to the <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> method so that the indextype can create any necessary indexes on the storage tables.</span>
<div>
<p>The <code class="codeph">CREATE</code> routine may use temporary storage tables for intermediate data. As an option, you can programmatically instruct your application to use external files; it is then the application&#39;s responsibility to manage these files.</p>
<p>After this <a href="ext_idx_ref.htm#GUID-C14A0478-6EA1-4EAE-BAA6-AA59EE5D300C">ODCIIndexCreate()</a> call completes, all partitioned tables created and not dropped by this call are managed by the system.</p>
</div>
</li>
</ol>
<div class="section">
<p>Note that creation of global indexes of any type on a system-partitioned index storage table is flagged as an error.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4501"></a>
<div class="props_rev_3"><a id="GUID-D488CADE-C5CB-461E-8F83-48ACE4296920"></a>
<h2 id="ADDCI-GUID-D488CADE-C5CB-461E-8F83-48ACE4296920" class="sect2">Maintaining Local Domain Indexes with INSERT, DELETE, and UPDATE</h2>
<div>
<div class="section">
<p>DML operations should be implemented in the following manner:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>One of <a href="ext_idx_ref.htm#GUID-EF42025B-6DE2-4F2A-90EF-62775EE0EED6">ODCIIndexInsert()</a>, <a href="ext_idx_ref.htm#GUID-4B2E080D-FE8B-4598-9084-56FBE255196B">ODCIIndexDelete()</a>, or <a href="ext_idx_ref.htm#GUID-CB42E738-EFD1-4053-9DDF-BEF455F92815">ODCIIndexUpdate()</a> is invoked. Both the index partition object identifier (for accessing the metadata table) and the base table partition physical identifier (for performing DMLs in the corresponding partition) are supplied as part of the <code class="codeph">ODICIndexInfo</code> structure.</span></li>
<li class="stepexpand"><span>To implement DMLs on a system-partitioned table, the cartridge code must include the syntax in the following code example. The <code class="codeph">DATAOBJ_TO_MAT_PARTITION()</code> function is provided by the system.</span>
<div>
<p>Calling DML Operations on System-Partitioned Tables</p>
<pre dir="ltr">INSERT INTO SP PARTITION
   (DATAOBJ_TO_MAT_PARTITION(<span class="italic">base_table</span>, :<span class="italic">physical_partid</span>)) VALUES(...)
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADDCI4503"></a>
<div class="props_rev_3"><a id="GUID-FE8F8F47-74EF-44A1-900C-0701569213EC"></a>
<h2 id="ADDCI-GUID-FE8F8F47-74EF-44A1-900C-0701569213EC" class="sect2">Querying Local Domain Indexes</h2>
<div>
<div class="section">
<p>Follow these steps to query local domain indexes:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>When the optimizer receives a query that has a user-defined operator, if it determines to use a domain index scan for evaluation, <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a>, <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a>, or <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a> is invoked.</span></li>
<li class="stepexpand"><span>The index partition object identifier and the base table partition physical identifier are passed in as part of <code class="codeph">ODCIIndexInfo</code> structure.</span></li>
<li class="stepexpand"><span>The index partition object identifier can be used to look up the metadata table, if necessary.</span></li>
<li class="stepexpand"><span>And the base table physical partition identifier can be used to query the corresponding partition of the system partitioned table.</span></li>
<li class="stepexpand"><span>The cartridge code must use the syntax as shown in the following code example and the provided function <code class="codeph">DATAOBJ_TO_MAT_PARTITION()</code>, for querying the system partitioned table.</span>
<div>
<p>Querying a System-Partitioned Table</p>
<pre dir="ltr">SELECT FROM SP PARTITION
   (DATAOBJ_TO_MAT_PARTITION(<span class="italic">base_table</span>, <span class="italic">:physical_partid</span>)) WHERE &lt;..&gt;;
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADDCI4505"></a>
<div class="props_rev_3"><a id="GUID-3B22385A-6858-4E6B-B803-8BD74F093474"></a>
<h2 id="ADDCI-GUID-3B22385A-6858-4E6B-B803-8BD74F093474" class="sect2">Restrictions of System-Managed Domain Indexing</h2>
<div>
<div class="section">
<p>The system-managed domain indexing approach supports the following structures:</p>
<ul style="list-style-type: disc;">
<li>
<p>Non-partitioned system managed domain indexes</p>
</li>
<li>
<p>Local system managed domain indexes on range-partitioned, list-partitioned, hash-partitioned, and interval-partitioned tables</p>
</li>
<li>
<p>Local domain indexes can be created only for range-partitioned, list-partitioned, hash-partitioned, and interval-partitioned heap-organized tables. Local domain indexes cannot be built for <code class="codeph">REF</code>-partitioned tables or <code class="codeph">IOT</code>s.</p>
</li>
<li>
<p>Local domain indexes are not supported on composite partitioned tables.</p>
</li>
<li>
<p>A system-managed domain index can index only a single column.</p>
</li>
<li>
<p>You cannot specify a bitmap or unique domain index.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4506"></a>
<div class="props_rev_3"><a id="GUID-E6FE5E3F-A5ED-405D-83AC-16E705885B10"></a>
<h2 id="ADDCI-GUID-E6FE5E3F-A5ED-405D-83AC-16E705885B10" class="sect2">Migrating Non-Partitioned Indexes</h2>
<div>
<div class="section">
<p>The following steps show how to migrate non-partitioned user-managed domain indexes into system-managed domain indexes.</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Modify metadata: issue an <code class="codeph">ALTER INDEXTYPE</code> command to register the property of the indextype with the system. This disassociates the statistics type.</span></li>
<li><span>The index is marked as <code class="codeph">INVALID</code>. You must implicitly issue an <code class="codeph">ALTER INDEX ... COMPILE</code> command to validate the index again. This calls the <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> method with <code class="codeph">alter_option=AlterIndexMigrate</code>.</span></li>
<li><span>Issue an <code class="codeph">ASSOCIATE STATISTICS</code> command to associate a system-managed statistics type with the system-managed indextype.</span></li>
</ol>
</div>
</div>
<a id="ADDCI4507"></a>
<div class="props_rev_3"><a id="GUID-15CE9E6B-5F9D-45DD-8A6C-9E54ADCB711D"></a>
<h2 id="ADDCI-GUID-15CE9E6B-5F9D-45DD-8A6C-9E54ADCB711D" class="sect2">Migrating Local Partitioned Indexes</h2>
<div>
<div class="section">
<p>The following steps show how to migrate local partitioned user-managed domain indexes into system-managed equi-partitioned domain indexes.</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Modify metadata: issue an <code class="codeph">ALTER INDEXTYPE</code> command to register the new index routines and the property of the indextype so it can be managed by the system. All indexes of this indextype are marked <code class="codeph">INVALID</code>, and cannot be used until after the completion of the next step. This disassociates the statistics type and erases the old statistics.</span></li>
<li class="stepexpand"><span>Modify index data: invoke the <code class="codeph">ALTER INDEX ... COMPILE</code> command for the new indextype of each index. This calls the <a href="ext_idx_ref.htm#GUID-9DB1D609-69C3-483B-AA77-087AD51A3A55">ODCIIndexAlter()</a> method with <code class="codeph">alter_option=AlterIndexMigrate</code>. You must implement this method to transform groups on non-partitioned tables into system-partitioned tables. For each set of <span class="italic"><code class="codeph">n</code></span> tables that represent a partitioned table, the cartridge code should perform the following actions. Note that the migration does not require re-generation of index data, but involves only exchange operations.</span>
<div>
<ul style="list-style-type: disc;">
<li>
<p>Create a system-partitioned table.</p>
</li>
<li>
<p>For each of the <span class="italic"><code class="codeph">n</code></span> non-partitioned tables, call the <code class="codeph">ALTER TABLE EXCHANGE PARTITION [INCLUDING INDEXES]</code> routine to exchange a non-partitioned table for a partition of the system-partitioned table.</p>
</li>
<li>
<p>Drop all <span class="italic"><code class="codeph">n</code></span> non-partitioned tables.</p>
</li>
</ul>
</div>
</li>
<li class="stepexpand"><span>Issue an <code class="codeph">ASSOCIATE STATISTICS</code> command to associate a system-managed statistics type with the system-managed indextype.</span></li>
</ol>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5977">
<tr>
<td class="cellalignment5984">
<table class="cellalignment5982">
<tr>
<td class="cellalignment5981"><a href="ext_idx_frmwork.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5981"><a href="operators.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5986">
<table class="cellalignment5980">
<tr>
<td class="cellalignment5981"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5981"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5981"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5981"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5981"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5981"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>