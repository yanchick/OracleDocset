<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-42"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Defining%20Operators"></a><title>Defining Operators</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="binding, signature"/>
<meta name="dcterms.created" content="2017-06-09T01:57:02Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Data Cartridge Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E15882-06"/>
<meta name="dcterms.isVersionOf" content="ADDCI"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="dom_idx.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ext_optimizer.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E15882-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-E10C1C49-E5DA-45E9-959D-E203DD964FBF"></a> <span id="PAGE" style="display:none;">16/33</span> <!-- End Header -->
<a id="ADDCI2100"></a>
<h1 id="ADDCI-GUID-E10C1C49-E5DA-45E9-959D-E203DD964FBF" class="sect1"><span class="enumeration_chapter">9</span> Defining Operators</h1>
<div>
<p>Consider user-defined operators and how to use them, both with and without indextypes.</p>
</div>
<a id="ADDCI4508"></a>
<div class="props_rev_3"><a id="GUID-D5B0203B-F2E2-4A42-8D03-E29CC9727616"></a>
<h2 id="ADDCI-GUID-D5B0203B-F2E2-4A42-8D03-E29CC9727616" class="sect2">User-Defined Operators</h2>
<div>
<p>A <a id="d29692e104" class="indexterm-anchor"></a><strong class="term">user-defined operator</strong> is a top-level schema object. In many ways, user-defined operators act like the built-in operators such as &lt;, &gt;, and =; for instance, they can be invoked in all the same situations. They contribute to ease of use by simplifying SQL statements, making them shorter and more readable.</p>
<p>User-defined operators are:</p>
<ul style="list-style-type: disc;">
<li>
<p>Identified by names, which are in the same namespace as tables, views, types, and standalone functions</p>
</li>
<li>
<p>Bound to functions, which define operator behavior in specified contexts</p>
</li>
<li>
<p>Controlled by privileges, which indicate the circumstances in which each operator can be used</p>
</li>
<li>
<p>Often associated with indextypes, which can be used to define indexes that are not built into the database</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-D5B0203B-F2E2-4A42-8D03-E29CC9727616__GUID-007E69AB-7B7C-4F21-8355-9EAD7ACACB99">
<p class="notep1">See Also:</p>
<p><span class="italic">Oracle Database SQL Language Reference</span> for detailed information on syntax and privileges</p>
</div>
</div>
<a id="ADDCI4509"></a>
<div class="props_rev_3"><a id="GUID-D491F7E8-F700-4592-99A1-15E42C9E6D29"></a>
<h3 id="ADDCI-GUID-D491F7E8-F700-4592-99A1-15E42C9E6D29" class="sect3">Operator Bindings</h3>
<div>
<p>An operator <strong class="term">binding</strong> associates the operator with the <strong class="term">signature</strong> of a function that implements the operator. A signature consists of a list of the data types of the arguments of the function, in order of occurrence, and the function&#39;s return type. Operator bindings tell Oracle which function to execute when the operator is invoked. An operator can be bound to several functions if each function has a different signature. To be considered different, functions must have different argument lists. Functions whose argument lists match, but whose return data types do not match, are not considered different and cannot be bound to the same operator.</p>
<p>Operators can be bound to:</p>
<ul style="list-style-type: disc;">
<li>
<p>Standalone functions</p>
</li>
<li>
<p>Package functions</p>
</li>
<li>
<p>User-defined type member methods</p>
</li>
</ul>
<p>Operators can be bound to functions and methods in any accessible schema. Each operator must have at least one binding when you create it. If you attempt to specify non-unique operator bindings, the Oracle server raises an error.</p>
</div>
</div>
<a id="ADDCI4510"></a>
<div class="props_rev_3"><a id="GUID-F7BECA82-B1F8-4F6E-88E3-8DD5DBD3547E"></a>
<h3 id="ADDCI-GUID-F7BECA82-B1F8-4F6E-88E3-8DD5DBD3547E" class="sect3">Operator Privileges</h3>
<div>
<p>To create an operator and its bindings, you must have:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CREATE</code> <code class="codeph">OPERATOR</code> or <code class="codeph">CREATE</code> <code class="codeph">ANY</code> <code class="codeph">OPERATOR</code> privilege</p>
</li>
<li>
<p><code class="codeph">EXECUTE</code> privilege on the function, operator, package, or type referenced</p>
</li>
</ul>
<p>To drop a user-defined operator, you must own the operator or have the <code class="codeph">DROP</code> <code class="codeph">ANY</code> <code class="codeph">OPERATOR</code> privilege.</p>
<p>To invoke a user-defined operator in an expression, you must own the operator or have <code class="codeph">EXECUTE</code> privilege on it.</p>
</div>
</div>
<a id="ADDCI4512"></a><a id="ADDCI4511"></a>
<div class="props_rev_3"><a id="GUID-E59706C5-6BD4-43CB-9731-047984EB4278"></a>
<h3 id="ADDCI-GUID-E59706C5-6BD4-43CB-9731-047984EB4278" class="sect3">Creating Operators</h3>
<div>
<div class="section">
<p>To create an operator, specify its name and its bindings with the <code class="codeph">CREATE OPERATOR</code> statement. <a href="operators.htm#GUID-E59706C5-6BD4-43CB-9731-047984EB4278__CHDCGBDC">Example 9-1</a> creates the operator <code class="codeph">Contains()</code>, binding it to functions that provide implementations in the Text and Spatial domains.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E59706C5-6BD4-43CB-9731-047984EB4278__CHDCGBDC">
<p class="titleinexample">Example 9-1 Creating an Operator</p>
<pre dir="ltr">CREATE OPERATOR Contains
BINDING
(VARCHAR2, VARCHAR2) RETURN NUMBER USING text.contains,
(Spatial.Geo, Spatial.Geo) RETURN NUMBER USING Spatial.contains;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4514"></a><a id="ADDCI4515"></a><a id="ADDCI4513"></a>
<div class="props_rev_3"><a id="GUID-4BF1D52C-13FB-4E5B-9ACE-E23BA28A183A"></a>
<h3 id="ADDCI-GUID-4BF1D52C-13FB-4E5B-9ACE-E23BA28A183A" class="sect3">Dropping Operators</h3>
<div>
<div class="section">
<p>To drop an operator and all its bindings, specify its name with the <code class="codeph">DROP</code> <code class="codeph">OPERATOR</code> statement. <a href="operators.htm#GUID-4BF1D52C-13FB-4E5B-9ACE-E23BA28A183A__CHDIFGFI">Example 9-2</a> drops the operator <code class="codeph">Contains()</code>.</p>
<p>The default <code class="codeph">DROP</code> behavior is <code class="codeph">DROP</code> <code class="codeph">RESTRICT</code>: if there are dependent indextypes or ancillary operators for any of the operator bindings, then the <code class="codeph">DROP</code> operation is disallowed.</p>
<p>To override the default behavior, use the <code class="codeph">FORCE</code> option. <a href="operators.htm#GUID-4BF1D52C-13FB-4E5B-9ACE-E23BA28A183A__CHDCDEBA">Example 9-3</a> drops the operator and all its bindings and marks any dependent indextype objects and dependent ancillary operators invalid.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-4BF1D52C-13FB-4E5B-9ACE-E23BA28A183A__CHDIFGFI">
<p class="titleinexample">Example 9-2 Dropping an Operator; RESTRICT Option</p>
<pre dir="ltr">DROP OPERATOR Contains;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4BF1D52C-13FB-4E5B-9ACE-E23BA28A183A__CHDCDEBA">
<p class="titleinexample">Example 9-3 Dropping an Operator; FORCE Option</p>
<pre dir="ltr">DROP OPERATOR Contains FORCE;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4517"></a><a id="ADDCI4516"></a>
<div class="props_rev_3"><a id="GUID-CBDCD80C-E171-424D-9040-AA3CD755F594"></a>
<h3 id="ADDCI-GUID-CBDCD80C-E171-424D-9040-AA3CD755F594" class="sect3">Altering Operators</h3>
<div>
<div class="section">
<p>You can add bindings to or drop bindings from an existing operator with the <code class="codeph">ALTER OPERATOR</code> statement. <a href="operators.htm#GUID-CBDCD80C-E171-424D-9040-AA3CD755F594__CHDCBJJE">Example 9-4</a> adds a binding to the operator <code class="codeph">Contains().</code></p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-CBDCD80C-E171-424D-9040-AA3CD755F594__CHDCBJJE">
<p class="titleinexample">Example 9-4 Adding a Binding to an Operator</p>
<pre dir="ltr">ALTER OPERATOR Contains
  ADD BINDING (music.artist, music.artist) RETURN NUMBER
  USING music.contains;
</pre></div>
<!-- class="example" --></div>
<div class="props_rev_3"><a id="GUID-ADF5C920-B3AC-4A85-B79C-1D43886EDA43"></a>
<h4 id="ADDCI-GUID-ADF5C920-B3AC-4A85-B79C-1D43886EDA43" class="sect4">Necessary Privileges for ALTER OPERATOR</h4>
<div>
<div class="section">
<p>To alter an operator, the operator must be in your own schema, or you must have the <code class="codeph">ALTER ANY OPERATOR</code> privilege. You must also have <code class="codeph">EXECUTE</code> privileges on the operators and functions referenced.</p>
</div>
<!-- class="section" --></div>
</div>
<div class="props_rev_3"><a id="GUID-302F97DB-4007-4294-AA89-E926A4603339"></a>
<h4 id="ADDCI-GUID-302F97DB-4007-4294-AA89-E926A4603339" class="sect4">Restrictions of ALTER OPERATOR</h4>
<div>
<div class="section">
<p>The following restrictions apply to the <code class="codeph">ALTER OPERATOR</code> statement:</p>
<ul style="list-style-type: disc;">
<li>
<p>You can only issue <code class="codeph">ALTER OPERATOR</code> statements that relate to existing operators.</p>
</li>
<li>
<p>You can only add or drop one binding in each <code class="codeph">ALTER OPERATOR</code> statement.</p>
</li>
<li>
<p>You cannot drop an operator&#39;s only binding with <code class="codeph">ALTER OPERATOR</code>; use the <code class="codeph">DROP OPERATOR</code> statement to drop the operator. An operator cannot exist without any bindings.</p>
</li>
<li>
<p>If you add a binding to an operator associated with an indextype, the binding is not associated to the indextype unless you also issue the <code class="codeph">ALTER INDEXTYPE ADD OPERATOR</code> statement</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADDCI4519"></a><a id="ADDCI4518"></a>
<div class="props_rev_3"><a id="GUID-126833A5-8CCD-47B3-989E-7919B808ED30"></a>
<h3 id="ADDCI-GUID-126833A5-8CCD-47B3-989E-7919B808ED30" class="sect3">Commenting Operators</h3>
<div>
<div class="section">
<p>To add comment text to an operator, specify the name and text with the <code class="codeph">COMMENT</code> statement. <a href="operators.htm#GUID-126833A5-8CCD-47B3-989E-7919B808ED30__CHDBGIBB">Example 9-5</a> supplies information about the <code class="codeph">Contains()</code> operator:</p>
<p>Comments on operators are available in the data dictionary through these views:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">USER_OPERATOR_COMMENTS</code></p>
</li>
<li>
<p><code class="codeph">ALL_OPERATOR_COMMENTS</code></p>
</li>
<li>
<p><code class="codeph">DBA_OPERATOR_COMMENTS</code></p>
</li>
</ul>
<p>You can only comment operators in your own schema unless you have the <code class="codeph">COMMENT ANY OPERATOR</code> privilege.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-126833A5-8CCD-47B3-989E-7919B808ED30__CHDBGIBB">
<p class="titleinexample">Example 9-5 Adding COMMENTs to an Operator</p>
<pre dir="ltr">COMMENT ON OPERATOR
Contains IS &#39;a number that indicates if the text contains the key&#39;;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4520"></a>
<div class="props_rev_3"><a id="GUID-B4A841A6-3251-478B-9805-2CB8FF75D5F4"></a>
<h3 id="ADDCI-GUID-B4A841A6-3251-478B-9805-2CB8FF75D5F4" class="sect3">About Invoking Operators</h3>
<div>
<p>Like built-in operators, user-defined operators can be invoked wherever expressions can occur. For example, user-defined operators can be used in:</p>
<ul style="list-style-type: disc;">
<li>
<p>The select list of a <code class="codeph">SELECT</code> command.</p>
</li>
<li>
<p>The condition of a <code class="codeph">WHERE</code> clause.</p>
</li>
<li>
<p>The <code class="codeph">ORDER</code> <code class="codeph">BY</code> and <code class="codeph">GROUP</code> <code class="codeph">BY</code> clauses.</p>
</li>
</ul>
<p>When an operator is invoked, Oracle evaluates the operator by executing a function bound to it. When several functions are bound to the operator, Oracle executes the function whose argument data types match those of the invocation (after any implicit type conversions). Invoking an operator with an argument list that does not match the signature of any function bound to that operator causes an error to be raised. Because user-defined operators can have multiple bindings, they can be used as overloaded functions.</p>
<p>Assume that <a href="operators.htm#GUID-402BA522-4394-4B6E-AAD3-AF51305A4A97__CHDEFCGA">Example 9-6</a> creates the operator <code class="codeph">Contains()</code>.</p>
<p>If <code class="codeph">Contains()</code> is used in <a href="operators.htm#GUID-1E5DCD14-40EE-4BF1-BE5A-0E836CB5DFDF__CHDFIEGI">Example 9-7</a>, the operator invocation <code class="codeph">Contains(resume,</code> <code class="codeph">&#39;Oracle&#39;)</code> causes Oracle to execute the function <code class="codeph">text.contains(resume,</code> <code class="codeph">&#39;Oracle&#39;)</code> because the signature of the function matches the data types of the operator arguments. Similarly, the operator invocation <code class="codeph">Contains(location</code><span class="italic">,</span> <code class="codeph">:bay_area)</code> executes the function <code class="codeph">spatial.contains(location</code><span class="italic">,</span> <code class="codeph">:bay_area)</code>.</p>
<p>Executing the statement in <a href="operators.htm#GUID-1556E7BD-1B14-4FE4-897B-0471202712A6__CHDIHJFG">Example 9-8</a> raises an error because none of the operator bindings satisfy the argument data types.</p>
</div>
<a id="ADDCI4521"></a>
<div class="props_rev_3"><a id="GUID-402BA522-4394-4B6E-AAD3-AF51305A4A97"></a>
<h4 id="ADDCI-GUID-402BA522-4394-4B6E-AAD3-AF51305A4A97" class="sect4">Creating Contains() Operator</h4>
<div>
<div class="example" id="GUID-402BA522-4394-4B6E-AAD3-AF51305A4A97__CHDEFCGA">
<p class="titleinexample">Example 9-6 Creating the Contains() Operator</p>
<pre dir="ltr">CREATE OPERATOR Contains
BINDING 
(VARCHAR2, VARCHAR2) RETURN NUMBER 
USING text.contains, 
(spatial.geo, spatial.geo) RETURN NUMBER 
USING spatial.contains;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4522"></a>
<div class="props_rev_3"><a id="GUID-1E5DCD14-40EE-4BF1-BE5A-0E836CB5DFDF"></a>
<h4 id="ADDCI-GUID-1E5DCD14-40EE-4BF1-BE5A-0E836CB5DFDF" class="sect4">Using Contains() Operator in a Query</h4>
<div>
<div class="example" id="GUID-1E5DCD14-40EE-4BF1-BE5A-0E836CB5DFDF__CHDFIEGI">
<p class="titleinexample">Example 9-7 Using the Operator Contains() in a Query</p>
<pre dir="ltr">SELECT * FROM MyEmployees
WHERE Contains(resume, &#39;Oracle&#39;)=1 AND Contains(location, :bay_area)=1;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4523"></a>
<div class="props_rev_3"><a id="GUID-1556E7BD-1B14-4FE4-897B-0471202712A6"></a>
<h4 id="ADDCI-GUID-1556E7BD-1B14-4FE4-897B-0471202712A6" class="sect4">Using Contains() Operator Incorrectly</h4>
<div>
<div class="example" id="GUID-1556E7BD-1B14-4FE4-897B-0471202712A6__CHDIHJFG">
<p class="titleinexample">Example 9-8 An Incorrect Use of the Operator Contains()</p>
<pre dir="ltr">SELECT * FROM MyEmployees
WHERE Contains(address, employee_addr_type(&#39;123 Main Street&#39;, &#39;Anytown&#39;, &#39;CA&#39;,
  &#39;90001&#39;))=1; 
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADDCI4524"></a>
<div class="props_rev_3"><a id="GUID-CAD6F288-5E9F-4385-8627-0D29F8B9CCE8"></a>
<h2 id="ADDCI-GUID-CAD6F288-5E9F-4385-8627-0D29F8B9CCE8" class="sect2">Operators and Indextypes</h2>
<div>
<p>Operators are often defined in connection with <a id="d29692e1118" class="indexterm-anchor"></a>indextypes. After creating the operators with their functional implementations, you can create an indextype that supports evaluations of these operators using an index scan.</p>
<p>Operators that occur outside <code class="codeph">WHERE</code> clauses are essentially stand-ins for the functions that implement them; the meaning of such an operator is determined by its functional implementation. Operators that occur in <code class="codeph">WHERE</code> clauses are sometimes evaluated using functional implementations; at other times they are evaluated by index scans.</p>
</div>
<a id="ADDCI4525"></a>
<div class="props_rev_3"><a id="GUID-D374E180-CEBA-4A95-866E-34B4F88E04E2"></a>
<h3 id="ADDCI-GUID-D374E180-CEBA-4A95-866E-34B4F88E04E2" class="sect3">Operators in the WHERE Clause</h3>
<div>
<p>Operators appearing in the <code class="codeph">WHERE</code> clause can be evaluated efficiently by an index scan using the scan methods provided by the indextype. This process involves the following steps.</p>
<ol>
<li>
<p>Creating an indextype that supports the evaluation of the operator</p>
</li>
<li>
<p>Recognizing operator predicates of a certain form</p>
</li>
<li>
<p>Selecting a domain index</p>
</li>
<li>
<p>Setting up an appropriate index scan</p>
</li>
<li>
<p>Executing the index scan methods</p>
</li>
</ol>
</div>
<a id="ADDCI4527"></a><a id="ADDCI4526"></a>
<div class="props_rev_3"><a id="GUID-B3F6B9FC-3A36-48C5-BD5A-229610708FA1"></a>
<h4 id="ADDCI-GUID-B3F6B9FC-3A36-48C5-BD5A-229610708FA1" class="sect4">Using Operator Predicates</h4>
<div>
<div class="section">
<p>An indextype supports efficient evaluation of operator predicates that can be represented by a range of lower and upper bounds on the operator return values. Specifically, predicates of the forms listed in <a href="operators.htm#GUID-B3F6B9FC-3A36-48C5-BD5A-229610708FA1__CHDFDBCI">Example 9-9</a> are candidates for index scan-based evaluation.</p>
<p>Operator predicates that Oracle can convert internally into one of the forms in <a href="operators.htm#GUID-B3F6B9FC-3A36-48C5-BD5A-229610708FA1__CHDFDBCI">Example 9-9</a> can also make use of the index scan-based evaluation.</p>
<p>Using the operators in expressions, such as <code class="codeph">op(...) + 2 = 3</code>, precludes index scan-based evaluation.</p>
<p>Predicates of the form <code class="codeph">op() is NULL</code> are evaluated using the functional implementation.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B3F6B9FC-3A36-48C5-BD5A-229610708FA1__CHDFDBCI">
<p class="titleinexample">Example 9-9 Operator Predicates</p>
<pre dir="ltr">op(...) LIKE <span class="italic">value_expression</span>
op(...) <span class="italic">relop</span> <span class="italic">value_expression</span>
</pre>
<p>&nbsp;&nbsp;&nbsp;where <span class="italic"><code class="codeph">value_expression</code></span> must evaluated to a constant (not a column) that can be used as a domain index key, and <span class="italic"><code class="codeph">relop</code></span> is one of <code class="codeph">&lt;</code>, <code class="codeph">&lt;=</code>, <code class="codeph">=</code>, <code class="codeph">&gt;=</code>, or <code class="codeph">&gt;</code></p>
</div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4529"></a><a id="ADDCI4530"></a><a id="ADDCI4528"></a>
<div class="props_rev_3"><a id="GUID-FA782F59-86A5-4B78-9F4E-0036AA0E68BA"></a>
<h4 id="ADDCI-GUID-FA782F59-86A5-4B78-9F4E-0036AA0E68BA" class="sect4">Resolving Query Results with the Contains() Operator</h4>
<div>
<div class="section">
<p>An index scan-based evaluation of an operator is only possible if the operator applies to a column or object attribute indexed by an indextype. The optimizer makes the final decision between the indexed implementation and the functional implementation, taking into account the selectivity and cost while generating the query execution plan.</p>
<p>Consider the query in <a href="operators.htm#GUID-FA782F59-86A5-4B78-9F4E-0036AA0E68BA__CHDFDCBC">Example 9-10</a>.</p>
<p>The optimizer can choose to use a domain index in evaluating the <code class="codeph">Contains()</code> operator if</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">resume</code> column has a defined index.</p>
</li>
<li>
<p>The index is of type <code class="codeph">TextIndexType</code>.</p>
</li>
<li>
<p><code class="codeph">TextIndexType</code> supports the appropriate <code class="codeph">Contains()</code> operator.</p>
</li>
</ul>
<p>If any of these conditions do not hold, Oracle performs a complete scan of the <code class="codeph">MyEmployees</code> table and applies the functional implementation of <code class="codeph">Contains()</code> as a post-filter. However, if all these conditions are met, the optimizer uses selectivity and cost functions to compare the cost of index-based evaluation with the full table scan and generates the appropriate execution plan.</p>
<p>Consider a slightly different query in <a href="operators.htm#GUID-FA782F59-86A5-4B78-9F4E-0036AA0E68BA__CHDCEIDE">Example 9-11</a>.</p>
<p>Here, you can access the <code class="codeph">MyEmployees</code> table through an index on the <code class="codeph">id</code> column, one on the <code class="codeph">resume</code> column, or a bitmap merge of the two. The optimizer estimates the costs of the three plans and picks the least expensive variant one, which could be to use the index on <code class="codeph">id</code> and apply the <code class="codeph">Contains()</code> operator on the resulting rows. In that case, Oracle would use the functional implementation of <code class="codeph">Contains()</code> rather than the domain index.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-FA782F59-86A5-4B78-9F4E-0036AA0E68BA__CHDFDCBC">
<p class="titleinexample">Example 9-10 Using the Contains() Operator in a Simple Query</p>
<pre dir="ltr">SELECT * FROM MyEmployees WHERE Contains(resume, &#39;Oracle&#39;) = 1;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-FA782F59-86A5-4B78-9F4E-0036AA0E68BA__CHDCEIDE">
<p class="titleinexample">Example 9-11 Using the Contains() Operator in a Complex Query</p>
<pre dir="ltr">SELECT * FROM MyEmployees WHERE Contains(resume, &#39;Oracle&#39;) =1 AND id =100;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4531"></a>
<div class="props_rev_3"><a id="GUID-D0B58284-7999-44BF-BE99-A3A9F9D4CC61"></a>
<h4 id="ADDCI-GUID-D0B58284-7999-44BF-BE99-A3A9F9D4CC61" class="sect4">Setting Up an Index Scan</h4>
<div>
<div class="section">
<p>If a domain index is selected for the evaluation of an operator predicate, an index <a id="d29692e1497" class="indexterm-anchor"></a>scan is set up. The index scan is performed by the scan methods <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a>, <a href="ext_idx_ref.htm#GUID-BB601420-A858-46E3-A9AC-3433220D4F82">ODCIIndexFetch()</a>, and <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a>, specified as part of the corresponding indextype implementation. The <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a> method is invoked with the operator-related information, including name and arguments and the lower and upper bounds describing the predicate. After the <a href="ext_idx_ref.htm#GUID-53F2321C-B0F8-4783-AC1B-056372A0C073">ODCIIndexStart()</a> call, a series of fetches are performed to obtain row identifiers of rows satisfying the predicate, and finally the <a href="ext_idx_ref.htm#GUID-2F49CDE4-C064-4644-948C-BBF014FDD8C8">ODCIIndexClose()</a> is called when the SQL cursor is destroyed.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4532"></a>
<div class="props_rev_3"><a id="GUID-BDBC368B-0329-49AF-838C-93A2EA5FCF8E"></a>
<h4 id="ADDCI-GUID-BDBC368B-0329-49AF-838C-93A2EA5FCF8E" class="sect4">Execution Model for Index Scan Methods</h4>
<div>
<div class="section">
<p>To implement index scan routines, you must understand how they are invoked and how multiple sets of invocations may be combined.</p>
<p>As an example, consider the query in <a href="operators.htm#GUID-DBDC35BB-8EAB-4DF4-A345-56B8FD524455__CHDBBGGJ">Example 9-12</a>.</p>
<p>If the optimizer chooses to use the domain indexes on the <code class="codeph">resume</code> columns of both tables, the indextype routines might be invoked in the sequence demonstrated in <a href="operators.htm#GUID-2F7E1E8C-7E95-4C2B-8229-E3DE4A3F1680__CHDDDGFD">Example 9-13</a>.</p>
<p>In this example, a single indextype routine is invoked several times for different instances of the <code class="codeph">Contains()</code> operator. It is possible that many operators are being evaluated concurrently through the same indextype routines. A routine that gets all the information it needs through its parameters, such as the <code class="codeph">CREATE</code> routine, does not maintain any state across calls, so evaluating multiple operators concurrently is not a problem. Other routines that must maintain state across calls, like the <code class="codeph">FETCH</code> routine, must know which row to return next. These routines should maintain state information in the <code class="codeph">SELF</code> parameter that is passed in to each call. The <code class="codeph">SELF</code> parameter, an instance of the implementation type, can be used to store either the entire state or a handle to the cursor-duration memory that stores the state (if the state information is large).</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADDCI4533"></a>
<div class="props_rev_3"><a id="GUID-DBDC35BB-8EAB-4DF4-A345-56B8FD524455"></a>
<h4 id="ADDCI-GUID-DBDC35BB-8EAB-4DF4-A345-56B8FD524455" class="sect4">Filtering Multiple Table Queries with Contains() Operator</h4>
<div>
<div class="example" id="GUID-DBDC35BB-8EAB-4DF4-A345-56B8FD524455__CHDBBGGJ">
<p class="titleinexample">Example 9-12 Using the Contains() Operator in a Multiple Table Query</p>
<pre dir="ltr">SELECT * FROM MyEmployees1, MyEmployees2 
WHERE 
  Contains(MyEmployees1.resume, &#39;Oracle&#39;) =1 AND 
  Contains(MyEmployees2.resume, &#39;UNIX&#39;) =1 AND 
  MyEmployees1.employee_id = MyEmployees2.employee_id;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4534"></a>
<div class="props_rev_3"><a id="GUID-2F7E1E8C-7E95-4C2B-8229-E3DE4A3F1680"></a>
<h4 id="ADDCI-GUID-2F7E1E8C-7E95-4C2B-8229-E3DE4A3F1680" class="sect4">Invoking Indextrype Routines for the Contains() Operator</h4>
<div>
<div class="example" id="GUID-2F7E1E8C-7E95-4C2B-8229-E3DE4A3F1680__CHDDDGFD">
<p class="titleinexample">Example 9-13 Invoking Indextype Routines for the Contains() Operator Query</p>
<pre dir="ltr">start(ctx1, ...); /* corr. to Contains(MyEmployees1.resume, &#39;Oracle&#39;) */
start(ctx2, ...); /* corr. to Contains(MyEmployees2.resume, &#39;UNIX&#39;);
fetch(ctx1, ...);
fetch(ctx2, ...);
fetch(ctx1, ...);
...
close(ctx1);
close(ctx2);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADDCI4536"></a><a id="ADDCI4535"></a>
<div class="props_rev_3"><a id="GUID-52B70980-69B5-4636-B551-E808481DF702"></a>
<h3 id="ADDCI-GUID-52B70980-69B5-4636-B551-E808481DF702" class="sect3">Using Operators Outside the WHERE Clause</h3>
<div>
<p>Operators that are used outside the <code class="codeph">WHERE</code> clause are evaluated using the functional implementation. To execute the statement in <a href="operators.htm#GUID-52B70980-69B5-4636-B551-E808481DF702__CHDEJFJD">Example 9-14</a>, Oracle scans the <code class="codeph">MyEmployees</code> table and invokes the functional implementation for <code class="codeph">Contains()</code> on each instance of <code class="codeph">resume</code>, passing it the actual value of the <code class="codeph">resume</code>, the text data, in the current row. Note that this function would not make use of any domain indexes built on the <code class="codeph">resume</code> column.</p>
<p>Because functional implementations can make use of domain indexes, consider how to write functions that use domain indexes and how they are invoked by the system.</p>
<div class="example" id="GUID-52B70980-69B5-4636-B551-E808481DF702__CHDEJFJD">
<p class="titleinexample">Example 9-14 Using Operators Outside the WHERE Clause</p>
<pre dir="ltr">SELECT Contains(resume, &#39;Oracle&#39;) FROM MyEmployees;
</pre></div>
<!-- class="example" --></div>
<a id="ADDCI4537"></a>
<div class="props_rev_3"><a id="GUID-478436F7-A7CC-4594-B60E-0379A8AAA8F0"></a>
<h4 id="ADDCI-GUID-478436F7-A7CC-4594-B60E-0379A8AAA8F0" class="sect4">Creating Index-based Functional Implementations</h4>
<div>
<p>For many domain-specific operators, such as <code class="codeph">Contains()</code>, the functional implementation has two options:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the operator is operating on a column or <code class="codeph">OBJECT</code> attribute that has a domain index, the function can evaluate the operator by looking at the index data rather than the actual argument value.</p>
<p>For example, when <code class="codeph">Contains(resume</code>, <code class="codeph">&#39;Oracle&#39;)</code> is invoked on a particular row of the <code class="codeph">MyEmployees</code> table, it is easier for the function to look up the text domain index defined on the <code class="codeph">resume</code> column and evaluate the operator based on the row identifier for the row containing the <code class="codeph">resume</code> than to work on the <code class="codeph">resume</code> text data argument.</p>
</li>
<li>
<p>If the operator is operating on a column that does not have an appropriate domain index defined on it or if the operator is invoked with literal values (non-columns), the functional implementation evaluates the operator based on the argument values. This is the default behavior for all operator bindings.</p>
</li>
</ul>
<p>To make your operator handle both options, provide a functional implementation that has three arguments in addition to the original arguments to the operator:</p>
<ul style="list-style-type: disc;">
<li>
<p>Index context: domain index information and the row identifier of the row on which the operator is being evaluated</p>
</li>
<li>
<p>Scan context: a context value to share state with subsequent invocations of the same operator operating on other rows of the table</p>
</li>
<li>
<p>Scan flag: indicates whether the current call is the last invocation during which all cleanup operations should be performed</p>
</li>
</ul>
<p>The function <code class="codeph">TextContains()</code> in <a href="operators.htm#GUID-4A0BCE7E-7CA2-4CFA-951B-77B2C62A1765__CHDHHDDI">Example 9-15</a> provides the index-based functional implementation for the <code class="codeph">Contains()</code> operator.</p>
<p>The <code class="codeph">Contains()</code> operator is bound to the functional implementation, as demonstrated in <a href="operators.htm#GUID-D6AC4B25-2A23-4920-BA74-E3E452F7C765__CHDBFEHA">Example 9-16</a>.</p>
<p>The <code class="codeph">WITH INDEX CONTEXT</code> clause specifies that the functional implementation can make use of any applicable domain indexes. The <code class="codeph">SCAN CONTEXT</code> specifies the data type of the scan context argument, which must be identical to the implementation type of the indextype that supports this operator.</p>
</div>
</div>
<a id="ADDCI4538"></a>
<div class="props_rev_3"><a id="GUID-4A0BCE7E-7CA2-4CFA-951B-77B2C62A1765"></a>
<h4 id="ADDCI-GUID-4A0BCE7E-7CA2-4CFA-951B-77B2C62A1765" class="sect4">Implementing the Contains() Operator in Index-Based Functions</h4>
<div>
<div class="example" id="GUID-4A0BCE7E-7CA2-4CFA-951B-77B2C62A1765__CHDHHDDI">
<p class="titleinexample">Example 9-15 Implementing the Contains() Operator in Index-Based Functions</p>
<pre dir="ltr">CREATE FUNCTION TextContains (Text IN VARCHAR2, Key IN VARCHAR2,
indexctx IN ODCIIndexCtx, scanctx IN OUT TextIndexMethods, scanflg IN NUMBER)
RETURN NUMBER AS
BEGIN
.......
END TextContains;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4539"></a>
<div class="props_rev_3"><a id="GUID-D6AC4B25-2A23-4920-BA74-E3E452F7C765"></a>
<h4 id="ADDCI-GUID-D6AC4B25-2A23-4920-BA74-E3E452F7C765" class="sect4">Binding the Contains() Operator to the Functional Implementation</h4>
<div>
<div class="example" id="GUID-D6AC4B25-2A23-4920-BA74-E3E452F7C765__CHDBFEHA">
<p class="titleinexample">Example 9-16 Binding the Contains() Operator to the Functional Implementation</p>
<pre dir="ltr">CREATE OPERATOR Contains
BINDING (VARCHAR2, VARCHAR2) RETURN NUMBER 
WITH INDEX CONTEXT, SCAN CONTEXT TextIndexMethods
USING TextContains;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4540"></a>
<div class="props_rev_3"><a id="GUID-CDFA26DA-2481-4D9B-9467-4EEC8D6A1ABC"></a>
<h4 id="ADDCI-GUID-CDFA26DA-2481-4D9B-9467-4EEC8D6A1ABC" class="sect4">Operator Resolution</h4>
<div>
<p>Oracle invokes the functional implementation for the operator if the operator appears outside the <code class="codeph">WHERE</code> clause. If the functional implementation is index-based, or defined to use an indextype, the additional index information is passed in as arguments, but only if the operator&#39;s first argument is a column or object attribute with a domain index of the appropriate indextype.</p>
<p>For example, in the query <code class="codeph">SELECT Contains(resume, &#39;Oracle &amp; Unix&#39;) FROM MyEmployees</code>, Oracle evaluates the operator <code class="codeph">Contains()</code> using the index-based functional implementation, passing it the index information about the domain index on the <code class="codeph">resume</code> column instead of the <code class="codeph">resume</code> data.</p>
</div>
</div>
<a id="ADDCI4541"></a>
<div class="props_rev_3"><a id="GUID-1C024DAF-5C6D-4D12-AF38-3DCD89B8FCF3"></a>
<h4 id="ADDCI-GUID-1C024DAF-5C6D-4D12-AF38-3DCD89B8FCF3" class="sect4">Operator Execution</h4>
<div>
<p>To execute the index-based functional implementation, Oracle sets up the arguments in the following manner:</p>
<ul style="list-style-type: disc;">
<li>
<p>The initial set of arguments is identical to those specified by the user for the operator.</p>
</li>
<li>
<p>If the first argument is not a column, the <code class="codeph">ODCIIndexCtx</code> attributes are set to <code class="codeph">NULL</code>.</p>
</li>
<li>
<p>If the first argument is a column, the <code class="codeph">ODCIIndexCtx</code> attributes are set up as follows.</p>
<ul style="list-style-type: disc;">
<li>
<p>If there is an applicable domain index, the <code class="codeph">ODCIIndexInfo</code> attribute contains information about it; otherwise the attribute is set to <code class="codeph">NULL</code>.</p>
</li>
<li>
<p>The <code class="codeph">rowid</code> attribute holds the row identifier of the row being operated on.</p>
</li>
</ul>
</li>
<li>
<p>The scan context is set to <code class="codeph">NULL</code> on the first invocation of the operator. Because it is an <code class="codeph">IN</code>/<code class="codeph">OUT</code> parameter, the return value from the first invocation is passed in to the second invocation and so on.</p>
</li>
<li>
<p>The scan flag is set to <code class="codeph">RegularCall</code> for all normal invocations of the operator. After the last invocation, the functional implementation is invoked one more time, at which time any cleanup actions can be performed. During this call, the scan flag is set to <code class="codeph">CleanupCall</code> and all other arguments except the scan context are set to <code class="codeph">NULL</code>.</p>
</li>
</ul>
<p>When index information is passed in, the implementation can compute the operator value with a domain index lookup using the row identifier as key. The index metadata is used to identify the index structures associated with the domain index. The scan context is typically used to share state with the subsequent invocations of the same operator.</p>
<p>If there is no indextype that supports the operator, or if there is no domain index on the column passed to the operator as its first argument, then the index context argument is null. However, the scan context argument is still available, Thus, the operator can maintain state between invocations even if no index is used by the query.</p>
</div>
</div>
</div>
<a id="ADDCI4543"></a><a id="ADDCI4542"></a>
<div class="props_rev_3"><a id="GUID-86CBAE69-64D2-4A2D-944F-67388FFD1DF8"></a>
<h3 id="ADDCI-GUID-86CBAE69-64D2-4A2D-944F-67388FFD1DF8" class="sect3">Operators that Return Ancillary Data</h3>
<div>
<p>In addition to filtering rows, operators in <code class="codeph">WHERE</code> clauses sometimes must return ancillary data. Ancillary data is modeled as one or more operators, each of which has</p>
<ul style="list-style-type: disc;">
<li>
<p>A single literal number argument, which ties it to the corresponding primary operator</p>
</li>
<li>
<p>A functional implementation with access to state generated by the index scan-based implementation of the primary operator</p>
</li>
</ul>
<p>In the query in <a href="operators.htm#GUID-86CBAE69-64D2-4A2D-944F-67388FFD1DF8__CHDIFCGD">Example 9-17</a>, the primary operator, <code class="codeph">Contains()</code>, can be evaluated using an index scan that determines which rows satisfy the predicate, and computes a score value for each row. The functional implementation for the <code class="codeph">Score</code> operator accesses the state generated by the index scan to obtain the score for a given row identified by its row identifier. The literal argument <code class="codeph">1</code> associates the ancillary operator <code class="codeph">Score</code> to the primary operator <code class="codeph">Contains()</code>, which generates the ancillary data.</p>
<p>The functional implementation of an ancillary operator can use either the domain index or the state generated by the primary operator. When invoked, the functional implementation is passed three extra arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p>The index context, which contains the domain index information</p>
</li>
<li>
<p>The scan context, which provides access to the state generated by the primary operator</p>
</li>
<li>
<p>A scan flag to indicate whether the functional implementation is being invoked for the last time</p>
</li>
</ul>
<p>Consider how to define and invoke operators that modeling ancillary data.</p>
<div class="example" id="GUID-86CBAE69-64D2-4A2D-944F-67388FFD1DF8__CHDIFCGD">
<p class="titleinexample">Example 9-17 Accessing Ancillary Data with the Contains() Operator</p>
<pre dir="ltr">SELECT Score(1) FROM MyEmployees 
WHERE Contains(resume, &#39;OCI &amp; UNIX&#39;, 1) =1;
</pre></div>
<!-- class="example" --></div>
<a id="ADDCI4545"></a><a id="ADDCI4546"></a><a id="ADDCI4544"></a>
<div class="props_rev_3"><a id="GUID-4477D845-0029-4E2B-B369-F2934E43F220"></a>
<h4 id="ADDCI-GUID-4477D845-0029-4E2B-B369-F2934E43F220" class="sect4">Operator Bindings that Compute Ancillary Data</h4>
<div>
<p>An operator binding that computes ancillary data is called a <a id="d29692e2384" class="indexterm-anchor"></a><strong class="term">primary binding</strong>. <a href="operators.htm#GUID-4477D845-0029-4E2B-B369-F2934E43F220__CHDHBIBJ">Example 9-18</a> defines a primary binding for the operator <code class="codeph">Contains()</code>.</p>
<p>This definition registers two bindings for <code class="codeph">Contains()</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CONTAINS(VARCHAR2</code>, <code class="codeph">VARCHAR2)</code>, used when ancillary data is not required</p>
</li>
<li>
<p><code class="codeph">CONTAINS(VARCHAR2</code>, <code class="codeph">VARCHAR2</code>, <code class="codeph">NUMBER)</code>, used when ancillary data is required (the <code class="codeph">NUMBER</code> argument associates this binding with the ancillary operator binding)</p>
</li>
</ul>
<p>The two bindings have a single functional implementation, as shown in <a href="operators.htm#GUID-4477D845-0029-4E2B-B369-F2934E43F220__CHDGEJDJ">Example 9-19</a>:</p>
<div class="example" id="GUID-4477D845-0029-4E2B-B369-F2934E43F220__CHDHBIBJ">
<p class="titleinexample">Example 9-18 Comparing Ancillary Data with the Contains() Operator</p>
<pre dir="ltr">CREATE OPERATOR Contains
BINDING (VARCHAR2, VARCHAR2) RETURN NUMBER
WITH INDEX CONTEXT, SCAN CONTEXT TextIndexMethods COMPUTE ANCILLARY DATA
USING TextContains;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4477D845-0029-4E2B-B369-F2934E43F220__CHDGEJDJ">
<p class="titleinexample">Example 9-19 Implementing Bindings for Computations</p>
<pre dir="ltr">TextContains(VARCHAR2, VARCHAR2, ODCIIndexCtx, TextIndexMethods, NUMBER).
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4548"></a><a id="ADDCI4549"></a><a id="ADDCI4547"></a>
<div class="props_rev_3"><a id="GUID-857F0B5F-CDA7-4CD7-823E-FD0B23E67BA1"></a>
<h4 id="ADDCI-GUID-857F0B5F-CDA7-4CD7-823E-FD0B23E67BA1" class="sect4">Operator Bindings That Model Ancillary Data</h4>
<div>
<p>An operator binding that models ancillary data is called an <a id="d29692e2502" class="indexterm-anchor"></a><strong class="term">ancillary binding</strong>. Functional implementations for ancillary data operators are similar to index-based functional implementations. When you have defined the function, you bind it to the operator with an additional <code class="codeph">ANCILLARY</code> <code class="codeph">TO</code> attribute, indicating that the functional implementation must share its state with the primary operator binding.</p>
<p>Note that the functional implementation for the ancillary operator binding must have the same signature as the functional implementation for the primary operator binding.</p>
<p><a href="operators.htm#GUID-857F0B5F-CDA7-4CD7-823E-FD0B23E67BA1__CHDHHHCD">Example 9-20</a> demonstrates how to evaluate the ancillary operator inside a <code class="codeph">TextScore</code>() function.</p>
<p>Using the <code class="codeph">TextScore()</code> definition, you could create an ancillary binding, as in <a href="operators.htm#GUID-857F0B5F-CDA7-4CD7-823E-FD0B23E67BA1__CHDCJEBH">Example 9-21</a>.</p>
<p>The <code class="codeph">ANCILLARY</code> <code class="codeph">TO</code> clause specifies that <code class="codeph">Score</code> shares state with the primary operator binding <code class="codeph">CONTAINS(VARCHAR2</code>, <code class="codeph">VARCHAR2)</code>.</p>
<p>The ancillary operator binding is invoked with a single literal number argument, such as <code class="codeph">Score</code>(1), <code class="codeph">Score</code>(2), and so on.</p>
<div class="example" id="GUID-857F0B5F-CDA7-4CD7-823E-FD0B23E67BA1__CHDHHHCD">
<p class="titleinexample">Example 9-20 Evaluating an Ancillary Operator</p>
<pre dir="ltr">CREATE FUNCTION TextScore (Text IN VARCHAR2, Key IN VARCHAR2,
  indexctx IN ODCIIndexCtx, scanctx IN OUT TextIndexMethods, scanflg IN NUMBER)
RETURN NUMBER AS
BEGIN
.......
END TextScore;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-857F0B5F-CDA7-4CD7-823E-FD0B23E67BA1__CHDCJEBH">
<p class="titleinexample">Example 9-21 Creating an Ancillary Operator Binding</p>
<pre dir="ltr">CREATE OPERATOR Score
BINDING (NUMBER) RETURN NUMBER
ANCILLARY TO Contains(VARCHAR2, VARCHAR2) 
USING TextScore;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADDCI4550"></a>
<div class="props_rev_3"><a id="GUID-1505D347-6D21-47A4-8870-ED57BF845AFF"></a>
<h4 id="ADDCI-GUID-1505D347-6D21-47A4-8870-ED57BF845AFF" class="sect4">Operator Resolution</h4>
<div>
<p>The operators corresponding to ancillary data are invoked by the user with a single number argument. This number argument must be a literal in both the ancillary operation, and in the primary operator invocation, so that the operator association can be done at query compilation time.</p>
<p>To determine the corresponding primary operator, Oracle matches the number passed to the ancillary operator with the number passed as the last argument to the primary operator. It is an error to find zero or more than one matching primary operator invocation. After the matching primary operator invocation is found,</p>
<ul style="list-style-type: disc;">
<li>
<p>The arguments to the primary operator become operands of the ancillary operator.</p>
</li>
<li>
<p>The ancillary and primary operator executions are passed the same scan context.</p>
</li>
</ul>
<p>For example, in the <a href="operators.htm#GUID-86CBAE69-64D2-4A2D-944F-67388FFD1DF8__CHDIFCGD">Example 9-17</a> query, the invocation of <code class="codeph">Score</code> is determined to be ancillary to <code class="codeph">Contains()</code> based on the number argument <code class="codeph">1</code>, and the functional implementation for <code class="codeph">Score</code> gets the operands <code class="codeph">(resume</code>, <code class="codeph">&#39;Oracle&amp;Unix&#39;</code>, <code class="codeph">indexctx</code>, <code class="codeph">scanctx, scanflg)</code>, where <code class="codeph">scanctx</code> is shared with the invocation of <code class="codeph">Contains()</code>.</p>
</div>
</div>
<a id="ADDCI4551"></a>
<div class="props_rev_3"><a id="GUID-70701FED-2C43-4E38-A6D4-7F330284A21C"></a>
<h4 id="ADDCI-GUID-70701FED-2C43-4E38-A6D4-7F330284A21C" class="sect4">Operator Execution</h4>
<div>
<p>Operator execution uses an index scan to process the <code class="codeph">Contains()</code> operator. For each of the rows returned by the <code class="codeph">fetch()</code> call of the index scan, the functional implementation of <code class="codeph">Score</code> is invoked by passing to it the <code class="codeph">ODCIIndexCtx</code> argument, which contains the index information, row identifier, and a handle to the index scan state. The functional implementation can use the handle to the index scan state to compute the score.</p>
</div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5977">
<tr>
<td class="cellalignment5984">
<table class="cellalignment5982">
<tr>
<td class="cellalignment5981"><a href="dom_idx.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5981"><a href="ext_optimizer.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5986">
<table class="cellalignment5980">
<tr>
<td class="cellalignment5981"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5981"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5981"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5981"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5981"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5981"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>