<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-46673"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Implementing%20Dynamic%20Actions"></a><title>Implementing Dynamic Actions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737"/>
<meta name="dcterms.created" content="2014-07-11T14:38:39Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Application Express Application Builder User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17961-11"/>
<meta name="dcterms.isVersionOf" content="HTMDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="advnc_plugins.htm" title="Previous" type="text/html"/>
<link rel="Next" href="advnc_blob.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17961-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">152/182</span> <!-- End Header --><a id="CIHCFDGB"></a>
<div id="HTMDB27020" class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><span class="secnum">17.9</span> Implementing <a id="sthref2845"></a>Dynamic Actions</h1>
<p>This section provides an overview of dynamic actions and explains how to create and modify them.</p>
<p class="subhead2"><a id="HTMDB28603"></a>Topics:</p>
<ul>
<li>
<p><a href="#CIHJHECJ">Understanding Dynamic Actions</a></p>
</li>
<li>
<p><a href="#CIHBBGIH">Creating a Dynamic Action</a></p>
</li>
<li>
<p><a href="#CIHGGGID">Editing Dynamic Actions</a></p>
</li>
<li>
<p><a href="#CIHDABAD">Adding Additional True Actions</a></p>
</li>
<li>
<p><a href="#CIHGAFFI">Defining the Frequency and Scope</a></p>
</li>
<li>
<p><a href="#CIHGCIBJ">Debugging Dynamic Actions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="bldr_app_rpt.htm#CHDBIEIH">&#34;About Page Specific Utilities&#34;</a></div>
<a id="CIHJHECJ"></a>
<div id="HTMDB28002" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">17.9.1</span> Understanding <a id="sthref2846"></a>Dynamic Actions</h2>
<p>Dynamic actions provide a way to define complex client-side behavior declaratively without the need for JavaScript. Using the Dynamic Action Create wizard, you specify an action that is performed when a defined set of conditions occur. You can also specify which elements are affected by the action, and when and how they are affected.</p>
<p>When working with dynamic actions, you should be mindful of the fact that the more dynamic actions you add to a page, the greater your overall page size. This is because the dynamic action framework emits additional code to the client for each dynamic action defined, which then also must be downloaded and executed by the framework in the client. See <a href="#CIHGCIBJ">&#34;Debugging Dynamic Actions&#34;</a> for information on how to debug problems.</p>
<p>The process of implementing a dynamic action involves the following:</p>
<ol>
<li>
<p>Edit or create an item, button, region, DOM object, or jQuery selector on a page. This component is referenced within the dynamic action in defining when it fires.</p>
</li>
<li>
<p>Create a dynamic action from the application page that invokes the action.</p>
</li>
<li>
<p>Run your application to test the dynamic action.</p>
</li>
</ol>
<p>For Dynamic Action implementation examples, go to the Learning Library at the following location, click the <span class="bold">All Content</span> tab and enter search criteria for Application Express (APEX) Product OBEs:</p>
<p><code><a href="http://www.oracle.com/technetwork/tutorials/index.html">http://www.oracle.com/technetwork/tutorials/index.html</a></code></p>
</div>
<!-- class="sect2" -->
<a id="CIHBBGIH"></a>
<div id="HTMDB28003" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">17.9.2</span> Creating a <a id="sthref2847"></a>Dynamic Action</h2>
<p>Creating a Dynamic Action involves specifying when the action happens (with optional conditions), what action or actions are performed, and what elements are affected by the action.</p>
<ol>
<li>
<p>Navigate to the appropriate Page Definition. See <a href="bldr_pg_def_about.htm#BABJAICG">&#34;Accessing the Page Definition&#34;</a>.</p>
</li>
<li>
<p>Under Page Rendering, scroll down to Dynamic Actions and click the Create icon.</p>
<p>The Dynamic Action wizard appears.</p>
</li>
<li>
<p>For Identification, enter the following and click <span class="bold">Next</span>.</p>
<ul>
<li>
<p>Name - Enter the name of the dynamic action.</p>
</li>
<li>
<p>Sequence - Enter the sequence of this component. The sequence determines the order of execution.</p>
</li>
</ul>
</li>
<li>
<p>For When, specify when the action is performed and click <span class="bold">Next</span>. Available options include:</p>
<ol>
<li>
<p>Event - Dynamic actions can be defined to fire based on events that happen on the page. There are four different categories of events that can be utilized, Browser events, Framework events, Component events and Custom events. Here are the details of all the supported events, including the internal JavaScript event name in brackets.</p>
<p>Browser Events</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The events displayed differ according to the page&#39;s current User Interface type. If you want to select an event that corresponds to a different type, then you have the option of selecting Show unsupported, which displays all events including those that do not correspond to the current type.</div>
<ul>
<li>
<p>Change (<code>change</code>) - Fires when a control loses the input focus and its value has been modified since gaining focus. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Click (<code>click</code>) - Fires when the pointing device button is clicked over the triggering element. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Double Click (<code>dblclick</code>) - Fires when the pointing device button is double clicked over the triggering element. Supported User Interface Types: Desktop.</p>
</li>
<li>
<p>Get Focus (<code>focusing</code>) - Fires when the triggering element receives focus by either a pointing device or by tabbing into the element. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Key Down (<code>keydown</code>) - Fires when a key on the keyboard is pressed. Use this event when you want to capture special keystrokes such as arrow keys, after a key has been pressed. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Key Press (<code>keypress</code>) - Fires when a key on the keyboard is pressed resulting in text being entered. Use this event when you want to capture actual text entry. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Key Release (<code>keyup</code>) - Fires when a key on the keyboard is released. Use this event when you want to capture special keystrokes such as arrow keys, after a key has been released. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Lose Focus (<code>focusout</code>) - Fires when the triggering element loses focus either by the pointing device or by tabbing out of the element. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Mouse Button Press (<code>mousedown</code>) - Fires when the pointing device button is pressed over the triggering element. Supported User Interface Types: Desktop.</p>
</li>
<li>
<p>Mouse Button Release (<code>mouseup</code>) - Fires when the pointing device button is released over the triggering element. Supported User Interface Types: Desktop.</p>
</li>
<li>
<p>Mouse Enter (<code>mouseenter</code>) - Fires once when the pointing device is moved into the triggering element. Supported User Interface Types: Desktop.</p>
</li>
<li>
<p>Mouse Leave (<code>mouseleave</code>) - Fires once when the pointing device is moved away from the triggering element. Supported User Interface Types: Desktop.</p>
</li>
<li>
<p>Mouse Move (<code>mousemove</code>) - Fires when the pointing device is moved while it is over the triggering element. Supported User Interface Types: Desktop.</p>
</li>
<li>
<p>Orientation Change (<code>orientationchange</code>) - Fires when a device&#39;s orientation changes (by turning it horizontally or vertically). The &#39;this.browserEvent&#39; JavaScript object contains an &#39;orientation&#39; property that will equal either &#39;portrait&#39; or &#39;landscape&#39;. Supported User Interface Type: &#39;jQuery Mobile Smartphone&#39;.</p>
</li>
<li>
<p>Page Load (Desktop User Interface uses <code>ready</code>, jQuery Mobile Smartphone User Interface uses <code>pageint</code>) &ndash; Fires when the page loads. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Page Unload (<code>unload</code>) - Fires when a page is unloaded. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Resize (<code>resize</code>) - Fires when the browser window is resized. Supported User Interface Types: Desktop.</p>
</li>
<li>
<p>Resource Load (<code>load</code>) - When the triggering element is the window element (using a DOM Object value of <code>window</code> in the When attributes), the event fires when the browser finishes loading all content within a document, including window, frames, objects and images. For other elements, it fires when the target element and all of its content has finished loading. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Scroll (<code>scroll</code>) - Fires when a scrollable triggering element is scrolled. This could be the browser window (using a DOM Object value of <code>window</code> in the When attributes), scrollable frames or elements with the <code>overflow</code> CSS property set to <code>scroll</code> (or <code>auto</code> when the element&#39;s explicit height is less than the height of its contents). Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Scroll Start (<code>scrollstart</code>) - Fires when a scroll begins. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Scroll Stop (<code>scrollstop</code>) - Fires when a scroll ends. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Select (<code>select</code>) - Fires when a user selects some text in a text field. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Swipe (<code>swipe</code>) - Fires when a horizontal drag of 30px or more (and less than 75px vertically) occurs, within a 1 second duration. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Swipe Left (<code>swipeleft</code>) - Fires when a swipe event occurs moving in the left direction. Supported User. Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Swipe Right (<code>swiperight</code>) - Fires when a swipe event occurs moving in the right direction. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Tap (<code>tap</code>) - Fires after a quick touch event. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Tap and Hold (<code>taphold</code>) - Fires after a held touch event (held for close to 1 second). Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Touch Cancel (<code>vmousecancel</code>) - Normalized event for handling touch or mousecancel events. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Touch End (<code>vmouseup</code>) - Normalized event for handling touchend or mouseup events. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Touch Move (<code>vmousemove</code>) - Normalized event for handling touchmove or mousemove events. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Touch Start (<code>vmousedown</code>) - Normalized event for handling touchstart or mousedown events. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Virtual Click (<code>vclick</code>) - Normalized event for handling touchend or mouse click events. On touch devices, this event is dispatched after Touch End. Supported User Interface Type: jQuery Mobile Smartphone.</p>
</li>
</ul>
<p>Framework Events</p>
<ul>
<li>
<p>After Refresh (<code>apexafterrefresh</code>) - Fires after the triggering element has been refreshed. The event is only valid for triggering elements that perform Partial Page Refresh and fire this event. The native components that support this are Interactive Reports, Classic Reports, Charts, List View and all item types with cascading LOV support. Plug-ins might support this event as well. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Before Page Submit (<code>apexbeforepagesubmit</code>) - Fires before a page being submitted. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Before Refresh (<code>apexbeforerefresh</code>) - Fires before the triggering element has been refreshed. The event is only valid for triggering elements that perform Partial Page Refresh and fire this event. The native components that support this are Interactive Reports, Classic Reports, Charts, List View and all item types with cascading LOV support. Plug-ins might support this event as well. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
</ul>
<p>Component Events</p>
<p>These events are available when there is a component (either an item, region, or dynamic action) available to your application that triggers a custom event. These events appear in the following format Event name [Component Name], for example the Change Order event triggered by the Shuttle native item type appears as Change Order [Shuttle]. Component events are either triggered from native components shipped with Oracle Application Express, or from plug-in components you have installed into your application.</p>
<ul>
<li>
<p>Events triggered by native components:</p>
<p>Change Order [Shuttle] (<code>shuttlechangeorder</code>) &ndash; Fires when the order of a value in the right hand select list is changed (either using Move Top, Move Up, Move Down, or Move Bottom). There are currently no other events triggered by native components in Oracle Application Express. Supported User Interface Types: Desktop and jQuery Mobile Smartphone.</p>
</li>
<li>
<p>Events triggered by plug-in components:</p>
<p>These will be available when added to your current application and will be in the format Event name [Component Name]. For help related to events raised by plug-ins, refer to Help text on the plug-in configuration page, by navigating to Shared Components, Plug-ins, <span class="italic">plug-in name</span>, Help Text, where the plug-in author may have included documentation. Supported User Interface Types: Determined by the plug-in&#39;s User Interfaces &gt; Supported for settings.</p>
</li>
</ul>
<ul>
<li>
<p>Custom Event:</p>
<p>By selecting Custom an additional field displays enabling you to define of a custom event. This is useful when the native or plug-in provided events are insufficient.</p>
</li>
</ul>
</li>
<li>
<p>Selection Type - Select the type of page element that triggers the dynamic action. A corresponding name field displays to specify the name of the page element.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only available if the event selected supports definition of a page element. Selecting any of the following events hides this field: Page Load, Page Unload, Resize, Before Page Submit, Orientation Change. All other event types show this field.</div>
</li>
<li>
<p>Item(s), Button, Region, DOM Object, or jQuery Selector - Specify the name of the page element as follows:</p>
<ul>
<li>
<p>Item(s) - Enter or select one or more page item names that trigger the dynamic action. For multiple items, separate page items with a comma.</p>
</li>
<li>
<p>Button - Select the button that triggers the dynamic action. If the button is a Template button, the button selected must use a button template that includes an ID attribute set to <code>#BUTTON_ID#</code>. The dynamic action framework relies on this ID value to reference the button.</p>
</li>
<li>
<p>Region - Select the region name that triggers the dynamic action. The region selected must use a region template that includes a container element with an ID attribute set to <code>#REGION_STATIC_ID#</code>. The dynamic action framework relies on this ID value to reference the region.</p>
<p>The region can fire the event itself, for example, Before Refresh or After Refresh events, or can be a container to catch events that fire on items or other elements in the region. Only the following subset of events support this: Change (<code>change</code>), Click (<code>click</code>), Double Click (<code>dblclick</code>), Get Focus (<code>focus</code>), Key Down (<code>keydown</code>), Key Press, Key Release (<code>keyup</code>), Lose Focus (<code>blur</code>), Mouse Button Press (<code>mousedown</code>), Mouse Button Release (<code>mouseup</code>), Mouse Move (<code>mousemove</code>).</p>
</li>
<li>
<p>DOM Object - Enter either a Document Object Model (DOM) object constant (for example, document or window), or the ID of a DOM object that triggers the dynamic action.</p>
</li>
<li>
<p>jQuery Selector - Enter the jQuery selector syntax to return one or more page elements that trigger the dynamic action.</p>
</li>
</ul>
</li>
<li>
<p>Condition - To provide a condition, make a selection from the Condition list. Depending on the condition type, you may be required to enter a Value to test the condition against. If no condition is specified, only True Actions fire. If a condition is specified, the True Action fires when the condition is met, the False Action fires when it is not.</p>
</li>
</ol>
</li>
<li>
<p>Specify the action that is performed when the previously specified event occurs and conditions are satisfied and then click <span class="bold">Next</span>.</p>
<ul>
<li>
<p>For True Actions - Depending on the selected action, additional options display. Use these options to specify additional settings and values required to perform the action.</p>
<p>Component</p>
<ul>
<li>
<p>Clear - Clears the affected elements.</p>
</li>
<li>
<p>Disable - Disables the affected elements. By disabling the affected elements, the page item will be non-editable and will not retain the item&#39;s value when the page is submitted.</p>
</li>
<li>
<p>Enable - Enables the affected elements.</p>
</li>
<li>
<p>Hide - Hides the affected elements. Also has the option to Hide all page items on the same line.</p>
</li>
<li>
<p>Refresh - Triggers a refresh of the affected elements. Note that not all elements support a refresh, you can use it for interactive reports, classic reports, charts, list view and all item types with cascading LOV support. Plug-ins might support this action as well.</p>
</li>
<li>
<p>Set Focus - Sets the focus to the affected elements. This defaults to the first of the affected elements if there are multiple. This can be especially useful when used with the Show and Enable actions to take the user straight to the appropriate item.</p>
</li>
<li>
<p>Set Value - Sets the value of the affected elements. This supports the following Set Types: Static Assignment, JavaScript Expression, SQL Statement, PL/SQL Expression, PL/SQL Function Body. SQL Statement Set Type supports setting between 1 and 100 page item values, by selecting between 1 and 100 columns in the query. All other Set Types only support setting 1 page item. See the Execute PL/SQL Code action for an alternative way to set multiple values on the page.</p>
</li>
<li>
<p>Show - Shows the affected elements. Also has the option to Show all the page items on the same line.</p>
</li>
</ul>
<p>Execute</p>
<ul>
<li>
<p>Execute JavaScript Code - Enables you to define or call custom, page specific JavaScript code to use within the dynamic action framework. If you are defining JavaScript code that is specific to just one page, you can also make use of the new page level attribute Function and Global Variable Declaration to define this. Functions and variables defined here can subsequently be referenced from this action.</p>
</li>
<li>
<p>Execute PL/SQL Code - Executes some PL/SQL code on the server. If an error occurs during execution, the user is alerted. To specify page items that are set on the page when the call to the server returns, based on their values in session state, define <span class="bold">Page Items to Return</span>. When the <span class="bold">Page Items to Return</span> option is used, and you want to prevent subsequent Change based dynamic actions from firing for the Page Items to Return, set <span class="bold">Suppress Change Event</span> to <code>Yes</code>.</p>
</li>
</ul>
<p>Notification</p>
<ul>
<li>
<p>Alert - Displays an Alert.</p>
</li>
<li>
<p>Confirm - Displays a confirmation dialog. If the user chooses Cancel then the proceeding actions are not executed and the current event is canceled.</p>
</li>
</ul>
<p>Style</p>
<ul>
<li>
<p>Add Class - Adds 1 or more CSS classes to the affected elements.</p>
</li>
<li>
<p>Remove Class - Removes one, more or all classes from the affected elements.</p>
</li>
<li>
<p>Set Style - Sets any style, CSS, property to the affected elements.</p>
</li>
</ul>
<p>Miscellaneous</p>
<ul>
<li>
<p>Cancel Event - Cancels subsequent dynamic actions or events from firing, based on certain conditions. This could be useful in the following situations:</p>
<p>If you have multiple dynamic actions on a page that are based on the same event (such as Click) and they refer to the same element on the page, you can use the Cancel Event action to prevent subsequent dynamic actions from firing, conditionally based on its When Condition.</p>
<p>If a dynamic action has many true actions, you can use Cancel Event to halt subsequent actions from being processed. Currently this has limited value as it is not possible to define a dynamic action&#39;s actions to fire conditionally, so this would just always prevent subsequent actions being processed, which could be useful in debugging.</p>
<p>Used to cancel page submission, when used with the Before Page Submit event of dynamic actions. For example, suppose you define a dynamic action that fires on the Before Page Submit even. For the Condition, you define JavaScript Expression and in the Value enter an expression such as <code>$v(&#39;P2_ENAME&#39;) == &#39;DO NOT SUBMIT</code>&#39;. Then, if you define a True Action that uses the Cancel Event action, the page is not submitted when the ENAME field is equal to DO NOT SUBMIT.</p>
</li>
<li>
<p>Submit Page - Submits the page. Also, has the option to disable the current page during page submission and display a processing style GIF.</p>
</li>
</ul>
<p>Plug-ins</p>
<ul>
<li>
<p>my_plugin_action[Plug-in] - Depending on your application configuration, you may also have additional plug-in dynamic actions available here. These are displayed as <code>my_plugin_action [Plug-in]</code>. Plug-in dynamic actions are installed within the application&#39;s shared components. The plug-in developer must assign an appropriate category for the action (Component, Execute and so forth).</p>
</li>
</ul>
</li>
<li>
<p>Fire On Page Load - Select this option to also trigger this action when the page loads. This may or may not be checked by default, depending on the type of Action selected.</p>
</li>
<li>
<p>Generate Opposite False Action - Select this option to also generate the opposite false action. Actions treated as opposite are Show / Hide, Enable / Disable and Add Class / Remove Class. This option only displays if one of the above actions are selected, and a When Condition has been specified.</p>
</li>
</ul>
</li>
<li>
<p>For Affected Elements (available only for actions that support affected elements), specify the elements affected by this dynamic action and how they are affected then click <span class="bold">Next</span>.</p>
<p>The final step in creating the dynamic action is different depending on whether the action you have selected supports selection of affected elements. Some actions, such as Submit Page, do not require affected elements to be selected. Other actions, such as Show, do. If the action selected does not support the selection of affected elements, the last page will be a Confirm page where you can review details of the dynamic action. If the action selected does support selection of affected elements, options on this page include:</p>
<ul>
<li>
<p>Selection Type - Select the type of page element that is affected by the dynamic action. Depending on the selected type, additional options display. Use these options to specify additional settings and values required to specify how the element is affected.</p>
</li>
<li>
<p>Item(s), Button, Region, DOM Object, or jQuery Selector - Specify the name of the page element as follows:</p>
<ul>
<li>
<p>Item(s) - Select the item name that is affected by the dynamic action.</p>
</li>
<li>
<p>Button - Select the button that is affected by the dynamic action. If the button is a Template button, the button selected must use a button template that includes an ID attribute set to #BUTTON_ID#. The dynamic action framework relies on this ID value to reference the button.</p>
</li>
<li>
<p>Region - Enter or select the region name that is affected by the dynamic action. The region selected must use a region template that includes a container element with an ID attribute set to <code>#REGION_STATIC_ID#</code>. The dynamic action framework relies on this ID value to reference the region.</p>
</li>
<li>
<p>DOM Object - Enter either a Document Object Model (DOM) object constant (for example, document or window), or the ID of a DOM object that is affected by the dynamic action.</p>
</li>
<li>
<p>jQuery Selector - Enter the jQuery selector syntax to return one or more page elements that is affected by the dynamic action.</p>
</li>
<li>
<p>Triggering Element - Provides access to the page element defined in the &#39;When&#39; of the dynamic action.</p>
</li>
<li>
<p>Event Source - Provides access to the page element where the event originated, which could be different from the Triggering Element in some cases. For example, if the When element is some container element (such as a region) that has been defined to handle events raised by its sub-elements (such as page items in that region), you can use the Event Source to easily act upon the sub-element that triggered the event.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Create Dynamic Action</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHGGGID"></a>
<div id="HTMDB28004" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">17.9.3</span> Editing <a id="sthref2848"></a>Dynamic Actions</h2>
<p>Once you create a dynamic action, you can modify attributes defined during the creation process, specify attributes not available during the process (such as specifying an Authorization Scheme) and add additional true actions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHBBGIH">&#34;Creating a Dynamic Action&#34;</a>, <a href="#CIHDABAD">&#34;Adding Additional True Actions&#34;</a>, <a href="#CIHGAFFI">&#34;Defining the Frequency and Scope&#34;</a></div>
<p>To edit a dynamic action:</p>
<ol>
<li>
<p>Navigate to the appropriate Page Definition. See <a href="bldr_pg_def_about.htm#BABJAICG">&#34;Accessing the Page Definition&#34;</a>.</p>
</li>
<li>
<p>Under Page Rendering, scroll down to Dynamic Actions and click the dynamic action you want to modify.</p>
<p>The Edit Dynamic Action page appears.</p>
</li>
<li>
<p>Make changes and click Apply.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHDABAD"></a>
<div id="HTMDB28005" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">17.9.4</span> Adding <a id="sthref2849"></a>Additional True Actions</h2>
<p>Dynamic actions contain a condition that can be specified to control when True actions fire. For example, consider an application that displays employee information to managers. If the employee is exempt, their salary displays, otherwise their hourly wage displays.</p>
<p>The Dynamic Action creation wizard allows only one true action to be specified. To add more than one action you must use the create wizard to create the dynamic action and then edit the action to add additional true actions.</p>
<p>To add an action:</p>
<ol>
<li>
<p>Navigate to the appropriate Page Definition. See <a href="bldr_pg_def_about.htm#BABJAICG">&#34;Accessing the Page Definition&#34;</a>.</p>
</li>
<li>
<p>Under Page Rendering, scroll down to Dynamic Actions and click the dynamic action you want to modify.</p>
<p>The Edit Dynamic Action page appears.</p>
</li>
<li>
<p>To add an action that executes when the conditions are met or when no condition is specified, scroll down to True Actions and click <span class="bold">Add True Action</span>.</p>
<p>The Create/Edit Action page appears.</p>
</li>
<li>
<p>Under Identification:</p>
<ol>
<li>
<p>Sequence - Enter the sequence for this component. This indicates the execution order.</p>
</li>
<li>
<p>Action - Select the action that triggers when the condition is true.</p>
</li>
</ol>
</li>
<li>
<p>Under Execution Options:</p>
<ol>
<li>
<p>Fire on Page Load - Select if you want the action to also trigger when the page loads.</p>
</li>
<li>
<p>Stop Execution on Error - Specify whether any proceeding actions should be executed, if an error occurs while executing the current action. Only available when the selected Action has been defined to expose this attribute, for example Execute PL/SQL Code.</p>
</li>
<li>
<p>Wait for Result - Specify whether any proceeding actions should wait for the result of the current action (if they are dependent on the result), or whether they can just execute without waiting. Only available when the selected Action has been defined to expose this attribute, for example Execute PL/SQL Code.</p>
</li>
</ol>
</li>
<li>
<p>For Affected Elements (only available if the selected action supports definition of affected elements):</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some or all of these fields may not be available to select, depending on the type of action selected. For example the Disable action does not support selecting a Region as the affected element.</div>
<ol>
<li>
<p>Selection Type - Select the type of page element that is affected by the dynamic action. A corresponding name field displays to specify the name of the page element.</p>
</li>
<li>
<p>Item(s), Button, Region, DOM Object, or jQuery Selector - Specify the name of the page element as follows:</p>
<ul>
<li>
<p>Item(s) - Enter or select the item name that is affected by the dynamic action.</p>
</li>
<li>
<p>Button - Select the button that is affected by the dynamic action. If the button is a Template button, the button selected must use a button template that includes an ID attribute set to #BUTTON_ID#. The dynamic action framework relies on this ID value to reference the button</p>
</li>
<li>
<p>Region - Enter or select the region name that is affected by the dynamic action. The region selected must use a region template that includes a container element with an ID attribute set to <code>#REGION_STATIC_ID#</code>. The dynamic action framework relies on this ID value to reference the region.</p>
</li>
<li>
<p>DOM Object - Enter either the Document Object Model (DOM) object or the ID of a DOM object that is affected by the dynamic action.</p>
</li>
<li>
<p>jQuery Selector - Enter the jQuery selector syntax to return one or more page elements that is affected by the dynamic action.</p>
</li>
</ul>
</li>
</ol>
</li>
<li>
<p>For Comments, enter developer comments or notes. These comments never display when the application is running.</p>
</li>
<li>
<p>Click <span class="bold">Create</span>.</p>
<p>The Edit Dynamic Action page displays with the added action listed under True Actions.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHGAFFI"></a>
<div id="HTMDB28006" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">17.9.5</span> Defining the <a id="sthref2850"></a>Frequency and Scope</h2>
<p>After creating the dynamic action, the scope of the action can be modified to trigger only once, for the lifetime of the current page, or until triggering elements are updated by a Partial Page Refresh (PPR).</p>
<p>To specify scope:</p>
<ol>
<li>
<p>Navigate to the appropriate Page Definition. See <a href="bldr_pg_def_about.htm#BABJAICG">&#34;Accessing the Page Definition&#34;</a>.</p>
</li>
<li>
<p>Under Page Rendering, scroll down to Dynamic Actions and click the dynamic action you want to modify.</p>
<p>The Edit Dynamic Action page appears.</p>
</li>
<li>
<p>Scroll down to Advanced and for Event Scope make one of the following selections:</p>
<ol>
<li>
<p>Static (default) - Binds the event handler to the triggering elements for the lifetime of the current page, but will no longer be bound if the triggering elements are updated by Partial Page Refresh (PPR).</p>
</li>
<li>
<p>Dynamic - Binds the event handler to the triggering elements for the lifetime of the current page, including any elements that are updated by Partial Page Refresh (PPR). Specifying Dynamic causes an additional field Static Container (jQuery Selector) to be displayed. Specifying a Static Container can help improve the performance of the way events are handled with a Dynamic Event Scope. This should be an element on the page that itself does not get re-created, but contains the triggering elements that are re-created using Partial Page Refresh (PPR). This element reference must be defined as a jQuery selector. For example if you have a dynamic action that does something to the rows of an interactive report region (which is re-created by PPR), this would need an Event Scope of Dynamic, in order for the dynamic action to still work after the report has been refreshed. And here, the Static Container value could be set to a jQuery selector selecting the region&#39;s Static ID value, for example: &#39;#my_region&#39;.</p>
</li>
<li>
<p>Once - Binds the event handler to the triggering elements for a once only event.</p>
</li>
</ol>
</li>
<li>
<p>Click <span class="bold">Apply Changes</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHGCIBJ"></a>
<div id="HTMDB28007" class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">17.9.6</span> Debugging <a id="sthref2851"></a>Dynamic Actions</h2>
<p>Debugging dynamic actions in Oracle Application Express is slightly different than other debugging, because much of the processing done with the dynamic action framework is done on the client, not on the server. To debug dynamic actions, Oracle Application Express outputs debug information to the browser&#39;s JavaScript console if your browser supports it (for example Firefox with Firebug installed shows the debug information in its Console pane). The debug information tells you when a dynamic action fires, the name of the dynamic action and also the Action JavaScript Object, which contains all the information needed by the client to execute the action (for example, event name, when details, action, affected elements and so on).</p>
<p>To debug a dynamic action:</p>
<ol>
<li>
<p>Ensure the application containing the dynamic action has Debugging enabled. See <a href="debug_mode.htm#BABJEJGI">&#34;Accessing Debugging Mode&#34;</a>.</p>
</li>
<li>
<p>Run the page containing the dynamic action.</p>
</li>
<li>
<p>Open the browser&#39;s JavaScript console.</p>
</li>
<li>
<p>From the Developer toolbar, click <span class="bold">Debug</span>.</p>
<p>The page refreshes. If you have any dynamic actions that are set to fire on page load, you see the following text output to the console:</p>
<p><code>Dynamic Action Fired: [</code><code><span class="codeinlineitalic">Dynamic action name</span></code><code>] ({JavaScript Object containing all Dynamic Action information})</code></p>
<p>Since debug information is only output when running in Debug mode, leaving Debug mode switched on enables you to further test if dynamic actions are firing when you expect them to. For example if you have defined a dynamic action that fires when a certain item&#39;s value changes, change that item&#39;s value and the console shows the debug output if the dynamic action fires.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4579">
<tr>
<td class="cellalignment4588">
<table class="cellalignment4584">
<tr>
<td class="cellalignment4583"><a href="advnc_plugins.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4583"><a href="advnc_blob.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4590">
<table class="cellalignment4582">
<tr>
<td class="cellalignment4583"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4583"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4583"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4583"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4583"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4583"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>