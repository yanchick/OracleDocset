<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-4128"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Package%20Dom%20APIs%20for%20C%2B%2B"></a><title>Package Dom APIs for C++</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 730"/>
<meta name="dcterms.created" content="2013-04-23T9:16:4Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database XML C++ API Reference"/>
<meta name="dcterms.identifier" content="E15977-04"/>
<meta name="dcterms.isVersionOf" content="CPXML"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ctx.htm" title="Previous" type="text/html"/>
<link rel="Next" href="io.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E15977-04.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/15</span> <!-- End Header -->
<div id="CPXML01100" class="chapter"><a id="CDEEBHGH"></a>
<h1 class="chapter"><span class="secnum">2</span> Package Dom APIs for C++<a id="sthref42"></a><a id="sthref43"></a><a id="sthref44"></a></h1>
<p>Interfaces in this package represent DOM level 2 Core interfaces according to <code><a href="http://www.w3.org/TR/DOM-Level-2-Core/">http://www.w3.org/TR/DOM-Level-2-Core/</a></code>.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CACHDGAI">Using Dom</a></p>
</li>
<li>
<p><a href="#CDECFCCA">Dom Datatypes</a></p>
</li>
<li>
<p><a href="#CACGIIEJ">AttrRef Interface</a></p>
</li>
<li>
<p><a href="#CACFIICH">CDATASectionRef Interface</a></p>
</li>
<li>
<p><a href="#CACHDHEE">CharacterDataRef Interface</a></p>
</li>
<li>
<p><a href="#CACHDHBA">CommentRef Interface</a></p>
</li>
<li>
<p><a href="#CEGFDDFA">DOMException Interface</a></p>
</li>
<li>
<p><a href="#CACHBAJC">DOMImplRef Interface</a></p>
</li>
<li>
<p><a href="#CACDFGIA">DOMImplementation Interface</a></p>
</li>
<li>
<p><a href="#CACCIAFA">DocumentFragmentRef Interface</a></p>
</li>
<li>
<p><a href="#CACHCFGE">DocumentRange Interface</a></p>
</li>
<li>
<p><a href="#CACGGDFE">DocumentRef Interface</a></p>
</li>
<li>
<p><a href="#CACCCDAC">DocumentTraversal Interface</a></p>
</li>
<li>
<p><a href="#CACEHHDI">DocumentTypeRef Interface</a></p>
</li>
<li>
<p><a href="#CACIABHC">ElementRef Interface</a></p>
</li>
<li>
<p><a href="#CACEFEEC">EntityRef Interface</a></p>
</li>
<li>
<p><a href="#CACJFJIJ">EntityReferenceRef Interface</a></p>
</li>
<li>
<p><a href="#CACFHHEI">NamedNodeMapRef Interface</a></p>
</li>
<li>
<p><a href="#CACJHHEJ">NodeFilter Interface</a></p>
</li>
<li>
<p><a href="#CACBADBJ">NodeIterator Interface</a></p>
</li>
<li>
<p><a href="#CACEBFHB">NodeListRef Interface</a></p>
</li>
<li>
<p><a href="#CACEDAEE">NodeRef Interface</a></p>
</li>
<li>
<p><a href="#CACDHFJG">NotationRef Interface</a></p>
</li>
<li>
<p><a href="#CACDHCIB">ProcessingInstructionRef Interface</a></p>
</li>
<li>
<p><a href="#CACEGDFA">Range Interface</a></p>
</li>
<li>
<p><a href="#CACHGBCA">RangeException Interface</a></p>
</li>
<li>
<p><a href="#CACEAJAH">TextRef Interface</a></p>
</li>
<li>
<p><a href="#CDEICDEI">TreeWalker Interface</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDK" href="../ADXDK/toc.htm"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
<div class="refentry"><a id="CACHDGAI"></a>
<hr/>
<div id="CPXML2171" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref45"></a>Using Dom</h2>
<p>DOM interfaces are represented as generic references to different implementations of the DOM specifications. They are parameterized by Node, which supports various specializations and instantiations. Of them, the most important is <code>xmlnode</code> that corresponds to the current C implementation.</p>
<p>These generic references do not have a <code>NULL</code>-like value. Any implementation should never create a stateless reference. If there is need to signal that something has no state, an exception should be thrown.</p>
<p>Many methods might throw the <code>SYNTAX_ERR</code> exception, if the DOM tree is incorrectly formed, or <code>UNDEFINED_ERR</code>, in the case of wrong parameters or unexpected <code>NULL</code> pointers. If these are the only errors that a particular method might throw, it is not reflected in the method signature.</p>
<p>Actual DOM trees do not dependent on the context (<code>TCtx</code>). However, manipulations on DOM trees in the current, <code>xmlctx</code> based implementation require access to the current context (<code>TCtx</code>). This is accomplished by passing the context pointer to the constructor of DOMImplRef. In multithreaded environment <code>DOMImplRef</code> is always created in the thread context and, so, has the pointer to the right context.</p>
<p><code>DOMImplRef</code> providea a way to create DOM trees. DomImplRef is a reference to the actual <code>DOMImplementation</code> object that is created when a regular, non-copy constructor of <code>DomImplRef</code> is invoked. This works well in multithreaded environment where DOM trees need to be shared, and each thread has a separate TCtx associated with it. This works equally well in a single threaded environment.</p>
<p><code>DOMString</code> is only one of encodings supported by Oracle implementations. The support of other encodings is Oracle&#39;s extension. The <code>oratext*</code> data type is used for all encodings.</p>
</div>
<!-- class="refsect1" -->
<a id="CDECFCCA"></a>
<hr/>
<div id="CPXML01110" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Dom Datatypes</h2>
<p><a href="#CACCGIHB">Table 2-1</a> summarizes the datatypes of the Dom package.</p>
<div id="CPXML2172" class="tblformal">
<p class="titleintable"><a id="sthref46"></a><a id="CACCGIHB"></a>Table 2-1 Summary of Datatypes; Dom Package</p>
<table class="cellalignment1809" title="Summary of Datatypes; Dom Package" summary="Column one lists datatypes; column 2 has descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t3">Datatype</th>
<th class="cellalignment1810" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#CACJCIJD">AcceptNodeCodes</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t3 r1c2-t3">
<p>Defines values returned by node filters.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#CACCDBBJ">CompareHowCode</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t3 r1c2-t3">
<p>Defines type of comparison.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#CACHJDCE">DOMNodeType</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t3 r1c2-t3">
<p>Defines type of node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#CDECJEEJ">DOMExceptionCode</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t3 r1c2-t3">
<p>Defines codes for DOM exception.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#CDEGAEEE">WhatToShowCode</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t3 r1c2-t3">
<p>Defines codes for filtering.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#CDEEHECD">RangeExceptionCode</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t3 r1c2-t3">
<p>Codes for DOM Range exceptions.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2173" class="refsect2"><a id="CACJCIJD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref47"></a><a id="sthref48"></a>AcceptNodeCodes</h3>
<p>Defines values returned by node filters. Used by node iterators and tree walkers.</p>
<p class="subhead2"><a id="CPXML2174"></a>Definition</p>
<pre>typedef enum AcceptNodeCode {
   FILTER_ACCEPT   = 1,
   FILTER_REJECT   = 2,
   FILTER_SKIP     = 3
    } AcceptNodeCode;
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2175" class="refsect2"><a id="CACCDBBJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref49"></a><a id="sthref50"></a>CompareHowCode</h3>
<p>Defines type of comparison.</p>
<p class="subhead2"><a id="CPXML2176"></a>Definition</p>
<pre>typedef enum CompareHowCode {
   START_TO_START = 0,
   START_TO_END = 1, 
   END_TO_END = 2, 
   END_TO_START = 3 }
CompareHowCode;
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2177" class="refsect2"><a id="CACHJDCE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref51"></a><a id="sthref52"></a>DOMNodeType</h3>
<p>Defines type of node.</p>
<p class="subhead2"><a id="CPXML2178"></a>Definition</p>
<pre>typedef enum DOMNodeType {
   UNDEFINED_NODE = 0,
   ELEMENT_NODE = 1, 
   ATTRIBUTE_NODE = 2, 
   TEXT_NODE = 3, 
   CDATA_SECTION_NODE = 4, 
   ENTITY_REFERENCE_NODE = 5, 
   ENTITY_NODE = 6, 
   PROCESSING_INSTRUCTION_NODE = 7, 
   COMMENT_NODE = 8, 
   DOCUMENT_NODE = 9, 
   DOCUMENT_TYPE_NODE = 10, 
   DOCUMENT_FRAGMENT_NODE = 11, 
   NOTATION_NODE = 12 
} DOMNodeType;
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2179" class="refsect2"><a id="CDECJEEJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref53"></a><a id="sthref54"></a>DOMExceptionCode</h3>
<p>Defines codes for DOM exception.</p>
<p class="subhead2"><a id="CPXML2180"></a>Definition</p>
<pre>typedef enum DOMExceptionCode {
   UNDEFINED_ERR               = 0,
   INDEX_SIZE_ERR              = 1,
   DOMSTRING_SIZE_ERR          = 2,
   HIERARCHY_REQUEST_ERR       = 3,
   WRONG_DOCUMENT_ERR          = 4,
   INVALID_CHARACTER_ERR       = 5,
   NO_DATA_ALLOWED_ERR         = 6,
   NO_MODIFICATION_ALLOWED_ERR = 7,
   NOT_FOUND_ERR               = 8,
   NOT_SUPPORTED_ERR           = 9,
   INUSE_ATTRIBUTE_ERR         = 10,
   INVALID_STATE_ERR           = 11,
   SYNTAX_ERR                  = 12,
   INVALID_MODIFICATION_ERR    = 13,
   NAMESPACE_ERR               = 14,
   INVALID_ACCESS_ERR          = 15
} DOMExceptionCode;
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2181" class="refsect2"><a id="CDEGAEEE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref55"></a><a id="sthref56"></a>WhatToShowCode</h3>
<p>Defines codes for filtering.</p>
<p class="subhead2"><a id="CPXML2182"></a>Definition</p>
<pre>typedef unsigned long WhatToShowCode; 
   const unsigned long SHOW_ALL = 0xFFFFFFFF; c
   onst unsigned long SHOW_ELEMENT = 0x00000001; 
   const unsigned long SHOW_ATTRIBUTE = 0x00000002; 
   const unsigned long SHOW_TEXT = 0x00000004; 
   const unsigned long SHOW_CDATA_SECTION = 0x00000008; 
   const unsigned long SHOW_ENTITY_REFERENCE = 0x00000010; 
   const unsigned long SHOW_ENTITY = 0x00000020; 
   const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x00000040; 
   const unsigned long SHOW_COMMENT = 0x00000080; 
   const unsigned long SHOW_DOCUMENT = 0x00000100; 
   const unsigned long SHOW_DOCUMENT_TYPE = 0x00000200; 
   const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x00000400; 
   const unsigned long SHOW_NOTATION = 0x00000800;
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2183" class="refsect2"><a id="CDEEHECD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref57"></a><a id="sthref58"></a>RangeExceptionCode</h3>
<p>Codes for DOM Range exceptions.</p>
<p class="subhead2"><a id="CPXML2184"></a>Definition</p>
<pre>typedef enum RangeExceptionCode {
   RANGE_UNDEFINED_ERR         = 0,
   BAD_BOUNDARYPOINTS_ERR      = 1,
   INVALID_NODE_TYPE_ERR       = 2
} RangeExceptionCode;
 
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACGIIEJ"></a>
<hr/>
<div id="CPXML01120" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref59"></a>AttrRef Interface</h2>
<p><a href="#CEGDJABA">Table 2-2</a> summarizes the methods available through <code>AttrRef</code> interface.</p>
<div id="CPXML2185" class="tblformal">
<p class="titleintable"><a id="sthref60"></a><a id="CEGDJABA"></a>Table 2-2 Summary of AttrRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of AttrRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t4">Function</th>
<th class="cellalignment1810" id="r1c2-t4">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t4" headers="r1c1-t4">
<p><a href="#CACIBEHF">AttrRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t4 r1c2-t4">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t4" headers="r1c1-t4">
<p><a href="#CACBFBIH">getName()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t4 r1c2-t4">
<p>Return attribute&#39;s name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t4" headers="r1c1-t4">
<p><a href="#CACBBHED">getOwnerElement()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t4 r1c2-t4">
<p>Return attribute&#39;s owning element.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t4" headers="r1c1-t4">
<p><a href="#CACIFGCF">getSpecified()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t4 r1c2-t4">
<p>Return boolean indicating if an attribute was explicitly created.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t4" headers="r1c1-t4">
<p><a href="#CACDJAIJ">getValue()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t4 r1c2-t4">
<p>Return attribute&#39;s value.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t4" headers="r1c1-t4">
<p><a href="#CACGHHDF">setValue()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t4 r1c2-t4">
<p>Set attribute&#39;s value.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t4" headers="r1c1-t4">
<p><a href="#CACIACDJ">~AttrRef()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t4 r1c2-t4">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2186" class="refsect2"><a id="CACIBEHF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref61"></a><a id="sthref62"></a>AttrRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t5">Syntax</th>
<th class="cellalignment1810" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t5" headers="r1c1-t5">
<pre>AttrRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t5 r1c2-t5">Used to create references to a given attribute node after a call to <code>createAttribute</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t5" headers="r1c1-t5">
<pre>AttrRef(
   const AttrRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t5 r1c2-t5">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t6">Parameter</th>
<th class="cellalignment1810" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t6" headers="r1c1-t6">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t6 r1c2-t6">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t6" headers="r1c1-t6">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t6 r1c2-t6">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2187"></a>Returns</p>
<p><code>(AttrRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2188" class="refsect2"><a id="CACBFBIH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref63"></a><a id="sthref64"></a>getName()</h3>
<p>Returns the fully-qualified name of an attribute (in the data encoding) as a <code>NULL</code>-terminated string.</p>
<p class="subhead1"><a id="CPXML2189"></a>Syntax</p>
<pre> oratext* getName() const;
</pre>
<p class="subhead1"><a id="CPXML2190"></a>Returns</p>
<p><code>(oratext *)</code> name of attribute</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2191" class="refsect2"><a id="CACBBHED"></a>
<hr/>
<h3 class="refsect2"><a id="sthref65"></a>getOwnerElement()</h3>
<p>Returns attribute&#39;s owning element</p>
<p class="subhead1"><a id="CPXML2192"></a>Syntax</p>
<pre>Node* getOwnerElement();
</pre>
<p class="subhead1"><a id="CPXML2193"></a>Returns</p>
<p><code>(Node*)</code> attribute&#39;s owning element node.</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2194" class="refsect2"><a id="CACIFGCF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref66"></a><a id="sthref67"></a>getSpecified()</h3>
<p>Returns the &#39;specified&#39; value for an attribute. If the attribute was explicitly given a value in the original document, it is <code>TRUE</code>; otherwise, it is <code>FALSE</code>. If the node is not an attribute, returns <code>FALSE</code>. If the user sets attribute&#39;s value through DOM, its &#39;specified&#39; value will be <code>TRUE</code>.</p>
<p class="subhead1"><a id="CPXML2195"></a>Syntax</p>
<pre>boolean getSpecified() const;
</pre>
<p class="subhead1"><a id="CPXML2196"></a>Returns</p>
<p><code>(boolean)</code> attribute&#39;s &#34;specified&#34; value</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2197" class="refsect2"><a id="CACDJAIJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref68"></a><a id="sthref69"></a>getValue()</h3>
<p>Returns the &#34;value&#34; (character data) of an attribute (in the data encoding) as <code>NULL</code>-terminated string. Character and general entities will have been replaced.</p>
<p class="subhead1"><a id="CPXML2198"></a>Syntax</p>
<pre>oratext* getValue() const;
</pre>
<p class="subhead1"><a id="CPXML2199"></a>Returns</p>
<p><code>(oratext*)</code> attribute&#39;s value</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2200" class="refsect2"><a id="CACGHHDF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref70"></a><a id="sthref71"></a>setValue()</h3>
<p>Sets the given attribute&#39;s value to data. The new value must be in the data encoding. It is not verified, converted, or checked. The attribute&#39;s &#39;specified&#39; flag will be <code>TRUE</code> after setting a new value.</p>
<p class="subhead1"><a id="CPXML2201"></a>Syntax</p>
<pre>void setValue(
   oratext* data) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t7">Parameter</th>
<th class="cellalignment1810" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t7" headers="r1c1-t7">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t7 r1c2-t7">new value of attribute</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2202" class="refsect2"><a id="CACIACDJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref72"></a><a id="sthref73"></a>~AttrRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2203"></a>Syntax</p>
<pre>~AttrRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACFIICH"></a>
<hr/>
<div id="CPXML01130" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref74"></a>CDATASectionRef Interface</h2>
<p><a href="#CACCAIBH">Table 2-3</a> summarizes the methods available through CDATASectionRef interface.</p>
<div id="CPXML2204" class="tblformal">
<p class="titleintable"><a id="sthref75"></a><a id="CACCAIBH"></a>Table 2-3 Summary of CDATASectionRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of CDATASectionRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t8">Function</th>
<th class="cellalignment1810" id="r1c2-t8">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t8" headers="r1c1-t8">
<p><a href="#CACJFAAI">CDATASectionRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t8 r1c2-t8">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t8" headers="r1c1-t8">
<p><a href="#CACIIHAB">~CDATASectionRef()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t8 r1c2-t8">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2205" class="refsect2"><a id="CACJFAAI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref76"></a><a id="sthref77"></a>CDATASectionRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t9">Syntax</th>
<th class="cellalignment1810" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t9" headers="r1c1-t9">
<pre>CDATASectionRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t9 r1c2-t9">Used to create references to a given CDATA node after a call to <code>createCDATASection</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t9" headers="r1c1-t9">
<pre>CDATASectionRef(
   const CDATASectionRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t9 r1c2-t9">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t10">Parameter</th>
<th class="cellalignment1810" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t10" headers="r1c1-t10">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t10 r1c2-t10">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t10" headers="r1c1-t10">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t10 r1c2-t10">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2206"></a>Returns</p>
<p><code>(CDATASectionRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2207" class="refsect2"><a id="CACIIHAB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref78"></a><a id="sthref79"></a>~CDATASectionRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2208"></a>Syntax</p>
<pre>~CDATASectionRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACHDHEE"></a>
<hr/>
<div id="CPXML01140" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref80"></a>CharacterDataRef Interface</h2>
<p><a href="#CACJJJIA">Table 2-4</a> summarizes the methods available through <code>CharacterDataRef</code> interface.</p>
<div id="CPXML2209" class="tblformal">
<p class="titleintable"><a id="sthref81"></a><a id="CACJJJIA"></a>Table 2-4 Summary of CharacterDataRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of CharacterDataRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t11">Function</th>
<th class="cellalignment1810" id="r1c2-t11">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t11" headers="r1c1-t11">
<p><a href="#CACDIJHH">appendData()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t11 r1c2-t11">
<p>Append data to end of node&#39;s current data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t11" headers="r1c1-t11">
<p><a href="#CACCHHJC">deleteData()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t11 r1c2-t11">
<p>Remove part of node&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t11" headers="r1c1-t11">
<p><a href="#CACIDCJJ">freeString()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t11 r1c2-t11">
<p>Deallocate the string allocated by <code>substringData</code>.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t11" headers="r1c1-t11">
<p><a href="#CACEIHHJ">getData()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t11 r1c2-t11">
<p>Return node&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t11" headers="r1c1-t11">
<p><a href="#CACECEAH">getLength()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t11 r1c2-t11">
<p>Return length of node&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t11" headers="r1c1-t11">
<p><a href="#CACBBEBG">insertData()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t11 r1c2-t11">
<p>Insert string into node&#39;s current data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t11" headers="r1c1-t11">
<p><a href="#CACHFJJG">replaceData()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t11 r1c2-t11">
<p>Replace part of node&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t11" headers="r1c1-t11">
<p><a href="#CACHBHCD">setData()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t11 r1c2-t11">
<p>Set node&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r10c1-t11" headers="r1c1-t11">
<p><a href="#CACIDCGF">substringData()</a></p>
</td>
<td class="cellalignment1804" headers="r10c1-t11 r1c2-t11">
<p>Get substring of node&#39;s data.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2210" class="refsect2"><a id="CACDIJHH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref82"></a><a id="sthref83"></a>appendData()</h3>
<p>Append a string to the end of a <code>CharacterData</code> node&#39;s data. The appended data should be in the data encoding. It will not be verified, converted, or checked.</p>
<p class="subhead1"><a id="CPXML2211"></a>Syntax</p>
<pre>void appendData( 
   oratext* data) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t12">Parameter</th>
<th class="cellalignment1810" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t12" headers="r1c1-t12">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t12 r1c2-t12">data to append</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2212" class="refsect2"><a id="CACCHHJC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref84"></a><a id="sthref85"></a>deleteData()</h3>
<p>Remove a range of characters from a <code>CharacterData</code> node&#39;s data. The offset is zero-based, so offset zero refers to the start of the data. Both offset and count are in characters, not bytes. If the sum of offset and count exceeds the data length then all characters from offset to the end of the data are deleted.</p>
<p class="subhead1"><a id="CPXML2213"></a>Syntax</p>
<pre>void deleteData( 
   ub4 offset, 
   ub4 count) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t13">Parameter</th>
<th class="cellalignment1810" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t13" headers="r1c1-t13">
<pre>offset
</pre></td>
<td class="cellalignment1804" headers="r2c1-t13 r1c2-t13">character offset where deletion starts</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t13" headers="r1c1-t13">
<pre>count
</pre></td>
<td class="cellalignment1804" headers="r3c1-t13 r1c2-t13">number of characters to delete</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2214" class="refsect2"><a id="CACIDCJJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref86"></a><a id="sthref87"></a>freeString()</h3>
<p>Deallocates the string allocated by substringData(). It is Oracle&#39;s extension.</p>
<p class="subhead1"><a id="CPXML2215"></a>Syntax</p>
<pre>void freeString( 
   oratext* str);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t14">Parameter</th>
<th class="cellalignment1810" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t14" headers="r1c1-t14">
<pre>str
</pre></td>
<td class="cellalignment1804" headers="r2c1-t14 r1c2-t14">string</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2216" class="refsect2"><a id="CACEIHHJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref88"></a><a id="sthref89"></a>getData()</h3>
<p>Returns the data for a <code>CharacterData</code> node (type text, comment or CDATA) in the data encoding.</p>
<p class="subhead1"><a id="CPXML2217"></a>Syntax</p>
<pre>oratext* getData() const;
</pre>
<p class="subhead1"><a id="CPXML2218"></a>Returns</p>
<p><code>(oratext*)</code> node&#39;s data</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2219" class="refsect2"><a id="CACECEAH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref90"></a><a id="sthref91"></a>getLength()</h3>
<p>Returns the length of the data for a <code>CharacterData</code> node (type <code>Text</code>, <code>Comment</code> or <code>CDATA</code>) in characters (not bytes).</p>
<p class="subhead1"><a id="CPXML2220"></a>Syntax</p>
<pre>ub4 getLength() const;
</pre>
<p class="subhead1"><a id="CPXML2221"></a>Returns</p>
<p><code>(ub4)</code> length in characters (not bytes!) of node&#39;s data</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2222" class="refsect2"><a id="CACBBEBG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref92"></a><a id="sthref93"></a>insertData()</h3>
<p>Insert a string into a <code>CharacterData</code> node&#39;s data at the specified position. The inserted data must be in the data encoding. It will not be verified, converted, or checked. The offset is specified as characters, not bytes. The offset is zero-based, so inserting at offset zero prepends the data.</p>
<p class="subhead1"><a id="CPXML2223"></a>Syntax</p>
<pre>void insertData( 
   ub4 offset,
   oratext* data) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t15">Parameter</th>
<th class="cellalignment1810" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t15" headers="r1c1-t15">
<pre>offset
</pre></td>
<td class="cellalignment1804" headers="r2c1-t15 r1c2-t15">character offset where insertion starts</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t15" headers="r1c1-t15">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r3c1-t15 r1c2-t15">data to insert</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2224" class="refsect2"><a id="CACHFJJG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref94"></a><a id="sthref95"></a>replaceData()</h3>
<p>Replaces a range of characters in a <code>CharacterData</code> node&#39;s data with a new string. The offset is zero-based, so offset zero refers to the start of the data. The replacement data must be in the data encoding. It will not be verified, converted, or checked. The offset and count are both in characters, not bytes. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced.</p>
<p class="subhead1"><a id="CPXML2225"></a>Syntax</p>
<pre>void replaceData( 
   ub4 offset, 
   ub4 count, 
   oratext* data)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t16">Parameter</th>
<th class="cellalignment1810" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t16" headers="r1c1-t16">
<pre>offset
</pre></td>
<td class="cellalignment1804" headers="r2c1-t16 r1c2-t16">offset</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t16" headers="r1c1-t16">
<pre>count
</pre></td>
<td class="cellalignment1804" headers="r3c1-t16 r1c2-t16">number of characters to replace</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t16" headers="r1c1-t16">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r4c1-t16 r1c2-t16">data</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2226" class="refsect2"><a id="CACHBHCD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref96"></a><a id="sthref97"></a>setData()</h3>
<p>Sets data for a <code>CharacterData</code> node (type text, comment or CDATA), replacing the old data. The new data is not verified, converted, or checked -- it should be in the data encoding.</p>
<p class="subhead1"><a id="CPXML2227"></a>Syntax</p>
<pre>void setData( 
   oratext* data) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t17">Parameter</th>
<th class="cellalignment1810" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t17" headers="r1c1-t17">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t17 r1c2-t17">data</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2228" class="refsect2"><a id="CACIDCGF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref98"></a><a id="sthref99"></a>substringData()</h3>
<p>Returns a range of character data from a <code>CharacterData</code> node (type <code>Text</code>, <code>Comment</code> or <code>CDATA</code>). Since the data is in the data encoding, offset and count are in characters, not bytes. The beginning of the string is offset 0. If the sum of offset and count exceeds the length, then all characters to the end of the data are returned. The substring is permanently allocated in the context managed memory and should be explicitly deallocated by <code>freeString</code></p>
<p class="subhead1"><a id="CPXML2229"></a>Syntax</p>
<pre>oratext* substringData( 
   ub4 offset, 
   ub4 count) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t18">Parameter</th>
<th class="cellalignment1810" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t18" headers="r1c1-t18">
<pre>offset
</pre></td>
<td class="cellalignment1804" headers="r2c1-t18 r1c2-t18">offset</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t18" headers="r1c1-t18">
<pre>count
</pre></td>
<td class="cellalignment1804" headers="r3c1-t18 r1c2-t18">number of characters to extract</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2230"></a>Returns</p>
<p><code>(oratext *)</code> specified substring</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACHDHBA"></a>
<hr/>
<div id="CPXML01150" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref100"></a>CommentRef Interface</h2>
<p><a href="#CACDCEHB">Table 2-5</a> summarizes the methods available through <code>CommentRef</code> interface.</p>
<div id="CPXML2231" class="tblformal">
<p class="titleintable"><a id="sthref101"></a><a id="CACDCEHB"></a>Table 2-5 Summary of CommentRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of CommentRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t19">Function</th>
<th class="cellalignment1810" id="r1c2-t19">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t19" headers="r1c1-t19">
<p><a href="#CACGFBIA">CommentRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t19 r1c2-t19">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t19" headers="r1c1-t19">
<p><a href="#CACGBBEB">~CommentRef()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t19 r1c2-t19">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2232" class="refsect2"><a id="CACGFBIA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref102"></a><a id="sthref103"></a>CommentRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t20">Syntax</th>
<th class="cellalignment1810" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t20" headers="r1c1-t20">
<pre>CommentRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t20 r1c2-t20">Used to create references to a given comment node after a call to createComment.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t20" headers="r1c1-t20">
<pre>CommentRef(
   const CommentRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t20 r1c2-t20">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t21">Parameter</th>
<th class="cellalignment1810" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t21" headers="r1c1-t21">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t21 r1c2-t21">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t21" headers="r1c1-t21">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t21 r1c2-t21">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2233"></a>Returns</p>
<p><code>(CommentRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2234" class="refsect2"><a id="CACGBBEB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref104"></a><a id="sthref105"></a>~CommentRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2235"></a>Syntax</p>
<pre>~CommentRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CEGFDDFA"></a>
<hr/>
<div id="CPXML01160" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref106"></a>DOMException Interface</h2>
<p><a href="#CACJGHAF">Table 2-6</a> summarizes the methods available through the <code>DOMException</code> interface.</p>
<div id="CPXML2236" class="tblformal">
<p class="titleintable"><a id="sthref107"></a><a id="CACJGHAF"></a>Table 2-6 Summary of DOMException Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DOMException Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t22">Function</th>
<th class="cellalignment1810" id="r1c2-t22">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t22" headers="r1c1-t22">
<p><a href="#CEGIFIHA">getDOMCode()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t22 r1c2-t22">
<p>Get DOM exception code embedded in the exception.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t22" headers="r1c1-t22">
<p><a href="#CEGJEAID">getMesLang()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t22 r1c2-t22">
<p>Get current language encoding of error messages.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t22" headers="r1c1-t22">
<p><a href="#CEGBHHDH">getMessage()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t22 r1c2-t22">
<p>Get Oracle XML error message.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2237" class="refsect2"><a id="CEGIFIHA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref108"></a><a id="sthref109"></a>getDOMCode()</h3>
<p>This is a virtual member function that defines a prototype for implementation defined member functions returning DOM exception codes, defined in <code>DOMExceptionCode</code>, of the exceptional situations during execution</p>
<p class="subhead1"><a id="CPXML2238"></a>Syntax</p>
<pre>virtual DOMExceptionCode getDOMCode() const = 0;
</pre>
<p class="subhead1"><a id="CPXML2239"></a>Returns</p>
<p><code>(DOMExceptionCode)</code> exception code</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2240" class="refsect2"><a id="CEGJEAID"></a>
<hr/>
<h3 class="refsect2"><a id="sthref110"></a><a id="sthref111"></a>getMesLang()</h3>
<p>Virtual member function inherited from <code>XmlException</code></p>
<p class="subhead1"><a id="CPXML2241"></a>Syntax</p>
<pre>virtual oratext* getMesLang() const = 0;
</pre>
<p class="subhead1"><a id="CPXML2242"></a>Returns</p>
<p><code>(oratext*)</code> Current language (encoding) of error messages</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2243" class="refsect2"><a id="CEGBHHDH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref112"></a><a id="sthref113"></a>getMessage()</h3>
<p>Virtual member function inherited from <code>XmlException</code></p>
<p class="subhead1"><a id="CPXML2244"></a>Syntax</p>
<pre>virtual oratext* getMessage() const = 0;
</pre>
<p class="subhead1"><a id="CPXML2245"></a>Returns</p>
<p><code>(oratext *)</code> Error message</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACHBAJC"></a>
<hr/>
<div id="CPXML01170" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref114"></a>DOMImplRef Interface</h2>
<p><a href="#CACIJFJA">Table 2-7</a> summarizes the methods available through <code>DOMImplRef</code> interface.</p>
<div id="CPXML2246" class="tblformal">
<p class="titleintable"><a id="sthref115"></a><a id="CACIJFJA"></a>Table 2-7 Summary of DOMImplRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DOMImplRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t23">Function</th>
<th class="cellalignment1810" id="r1c2-t23">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t23" headers="r1c1-t23">
<p><a href="#CACHCIDH">DOMImplRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t23 r1c2-t23">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t23" headers="r1c1-t23">
<p><a href="#CACIJFEG">createDocument()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t23 r1c2-t23">
<p>Create document reference.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t23" headers="r1c1-t23">
<p><a href="#CACHEIHI">createDocumentType()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t23 r1c2-t23">
<p>Create DTD reference.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t23" headers="r1c1-t23">
<p><a href="#CDEHFIJD">formDocument()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t23 r1c2-t23">
<p>Forms document reference given a document pointer.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t23" headers="r1c1-t23">
<p><a href="#CACIEFAD">getImplementation()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t23 r1c2-t23">
<p>Get <code>DOMImplementation</code> object associated with the document.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t23" headers="r1c1-t23">
<p><a href="#CACBAADE">getNoMod()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t23 r1c2-t23">
<p>Get the &#39;no modification allowed&#39; flag value.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t23" headers="r1c1-t23">
<p><a href="#CACIJACI">hasFeature()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t23 r1c2-t23">
<p>Determine if DOM feature is implemented.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t23" headers="r1c1-t23">
<p><a href="#CACCCAGJ">setContext()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t23 r1c2-t23">
<p>Set another context to a node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r10c1-t23" headers="r1c1-t23">
<p><a href="#CACBACIC">~DOMImplRef()</a></p>
</td>
<td class="cellalignment1804" headers="r10c1-t23 r1c2-t23">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2247" class="refsect2"><a id="CACHCIDH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref116"></a><a id="sthref117"></a>DOMImplRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t24">Syntax</th>
<th class="cellalignment1810" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t24" headers="r1c1-t24">
<pre>DOMImplRef(
   Context* ctx_ptr,
   DOMImplementation&lt; Node&gt;* impl_ptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t24 r1c2-t24">Creates reference object to <code>DOMImplementation</code> object in a given context. Returns reference to the implementation object.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t24" headers="r1c1-t24">
<pre>DOMImplRef(
   const DOMImplRef&lt; Context, Node&gt;&amp; iref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t24 r1c2-t24">It is needed to create other references to the implementation object; deletion flags are not copied.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t24" headers="r1c1-t24">
<pre>DOMImplRef(
   const DOMImplRef&lt; Context, Node&gt;&amp; iref,
   Context* ctx_ptr);
</pre></td>
<td class="cellalignment1804" headers="r4c1-t24 r1c2-t24">It is needed to create references to the implementation object in a different context; deletion flags are not copied.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t25">Parameter</th>
<th class="cellalignment1810" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t25" headers="r1c1-t25">
<pre>ctx_ptr
</pre></td>
<td class="cellalignment1804" headers="r2c1-t25 r1c2-t25">context pointer</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t25" headers="r1c1-t25">
<pre>impl_ptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t25 r1c2-t25">implementation</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2248"></a>Returns</p>
<p><code>(DOMImplRef)</code> reference to the implementation object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2249" class="refsect2"><a id="CACIJFEG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref118"></a><a id="sthref119"></a>createDocument()</h3>
<p>Creates document reference</p>
<p class="subhead1"><a id="CPXML2250"></a>Syntax</p>
<pre>DocumentRef&lt; Node&gt;* createDocument(
   oratext* namespaceURI,
   oratext* qualifiedName,
   DocumentTypeRef&lt; Node&gt;&amp; doctype)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t26">Parameter</th>
<th class="cellalignment1810" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t26" headers="r1c1-t26">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t26 r1c2-t26">namespace URI of root element</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t26" headers="r1c1-t26">
<pre>qualifiedName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t26 r1c2-t26">qualified name of root element</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t26" headers="r1c1-t26">
<pre>doctype
</pre></td>
<td class="cellalignment1804" headers="r4c1-t26 r1c2-t26">associated DTD node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2251"></a>Returns</p>
<p><code>(DocumentRef&lt; Node&gt;*)</code> document reference</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2252" class="refsect2"><a id="CACHEIHI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref120"></a><a id="sthref121"></a>createDocumentType()</h3>
<p>Creates DTD reference</p>
<p class="subhead1"><a id="CPXML2253"></a>Syntax</p>
<pre>DocumentTypeRef&lt; Node&gt;* createDocumentType(
   oratext* qualifiedName,
   oratext* publicId,
   oratext* systemId)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t27">Parameter</th>
<th class="cellalignment1810" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t27" headers="r1c1-t27">
<pre>qualifiedName
</pre></td>
<td class="cellalignment1804" headers="r2c1-t27 r1c2-t27">qualified name</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t27" headers="r1c1-t27">
<pre>publicId
</pre></td>
<td class="cellalignment1804" headers="r3c1-t27 r1c2-t27">external subset public Id</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t27" headers="r1c1-t27">
<pre>systemId
</pre></td>
<td class="cellalignment1804" headers="r4c1-t27 r1c2-t27">external subset system Id</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2254"></a>Returns</p>
<p><code>(DocumentTypeRef&lt; Node&gt;*)</code> DTD reference</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2255" class="refsect2"><a id="CDEHFIJD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref122"></a><a id="sthref123"></a>formDocument()</h3>
<p>Forms a document reference given a document pointer.</p>
<p class="subhead1"><a id="CPXML2256"></a>Syntax</p>
<pre>DocumentRef&lt; Node&gt;* formDocument( Node* node);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t28">Parameter</th>
<th class="cellalignment1810" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t28" headers="r1c1-t28">
<pre>node
</pre></td>
<td class="cellalignment1804" headers="r2c1-t28 r1c2-t28">pointer to the document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2257"></a>Returns</p>
<p>(DocumentRef&lt; Node&gt;*) pointer to the document reference</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2258" class="refsect2"><a id="CACIEFAD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref124"></a><a id="sthref125"></a>getImplementation()</h3>
<p>Returns <code>DOMImplementation</code> object that was used to create this document. When the <code>DOMImplementation</code> object is destructed, all document trees associated with it are also destructed.</p>
<p class="subhead1"><a id="CPXML2259"></a>Syntax</p>
<pre>DOMImplementation&lt; Node&gt;* getImplementation() const;
</pre>
<p class="subhead1"><a id="CPXML2260"></a>Returns</p>
<p><code>(DOMImplementation)</code> <code>DOMImplementation</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2261" class="refsect2"><a id="CACBAADE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref126"></a><a id="sthref127"></a>getNoMod()</h3>
<p>Get the &#39;no modification allowed&#39; flag value. This is an Oracle extension.</p>
<p class="subhead1"><a id="CPXML2262"></a>Syntax</p>
<pre>boolean getNoMod() const;
</pre>
<p class="subhead1"><a id="CPXML2263"></a>Returns</p>
<p><code>TRUE</code> if flag&#39;s value is <code>TRUE</code>, <code>FALSE</code> otherwise</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2264" class="refsect2"><a id="CACIJACI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref128"></a><a id="sthref129"></a>hasFeature()</h3>
<p>Determine if a DOM feature is implemented. Returns <code>TRUE</code> if the feature is implemented in the specified version, <code>FALSE</code> otherwise.</p>
<p>In level 1, the legal values for package are &#39;HTML&#39; and &#39;XML&#39; (case-insensitive), and the version is the string &#34;1.0&#34;. If the version is not specified, supporting any version of the feature will cause the method to return <code>TRUE</code>.</p>
<p>DOM 1.0 features are &#34;XML&#34; and &#34;HTML&#34;.</p>
<p>DOM 2.0 features are &#34;Core&#34;, &#34;XML&#34;, &#34;HTML&#34;, &#34;Views&#34;, &#34;StyleSheets&#34;, &#34;CSS&#34;, &#34;CSS2&#34;, &#34;Events&#34;, &#34;UIEvents&#34;, &#34;MouseEvents&#34;, &#34;MutationEvents&#34;, &#34;HTMLEvents&#34;, &#34;Range&#34;, &#34;Traversal&#34;</p>
<p class="subhead1"><a id="CPXML2265"></a>Syntax</p>
<pre>boolean hasFeature(
   oratext* feature, 
   oratext* version);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t29">Parameter</th>
<th class="cellalignment1810" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t29" headers="r1c1-t29">
<pre>feature
</pre></td>
<td class="cellalignment1804" headers="r2c1-t29 r1c2-t29">package name of feature</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t29" headers="r1c1-t29">
<pre>version
</pre></td>
<td class="cellalignment1804" headers="r3c1-t29 r1c2-t29">version of package</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2266"></a>Returns</p>
<p><code>(boolean)</code> is feature implemented?</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2267" class="refsect2"><a id="CACCCAGJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref130"></a><a id="sthref131"></a>setContext()</h3>
<p>It is needed to create node references in a different context</p>
<p class="subhead1"><a id="CPXML2268"></a>Syntax</p>
<pre>void setContext(
   NodeRef&lt; Node&gt;&amp; nref, 
   Context* ctx_ptr);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t30">Parameter</th>
<th class="cellalignment1810" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t30" headers="r1c1-t30">
<pre>nref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t30 r1c2-t30">reference node</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t30" headers="r1c1-t30">
<pre>ctx_ptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t30 r1c2-t30">context pointer</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2269" class="refsect2"><a id="CACBACIC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref132"></a><a id="sthref133"></a>~DOMImplRef()</h3>
<p>This is the default destructor. It cleans the reference to the implementation object. It is usually called by the environment. But it can be called by the user directly if necessary.</p>
<p class="subhead1"><a id="CPXML2270"></a>Syntax</p>
<pre>~DOMImplRef(); 
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACDFGIA"></a>
<hr/>
<div id="CPXML01180" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref134"></a>DOMImplementation Interface</h2>
<p><a href="#CACCBGCI">Table 2-8</a> summarizes the methods available through <code>DOMImplementation</code> interface.</p>
<div id="CPXML2271" class="tblformal">
<p class="titleintable"><a id="sthref135"></a><a id="CACCBGCI"></a>Table 2-8 Summary of DOMImplementation Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DOMImplementation Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t31">Function</th>
<th class="cellalignment1810" id="r1c2-t31">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t31" headers="r1c1-t31">
<p><a href="#CACICCDJ">DOMImplementation()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t31 r1c2-t31">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t31" headers="r1c1-t31">
<p><a href="#CACJDAHF">getNoMod()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t31 r1c2-t31">
<p>Get the &#39;nomodificationallowed&#39; flag value.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t31" headers="r1c1-t31">
<p><a href="#CACIEAHC">~DOMImplementation()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t31 r1c2-t31">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2272" class="refsect2"><a id="CACICCDJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref136"></a><a id="sthref137"></a>DOMImplementation()</h3>
<p>Creates <code>DOMImplementation</code> object. Sets the &#39;no modifications allowed&#39; flag to the parameter value.</p>
<p class="subhead1"><a id="CPXML2273"></a>Syntax</p>
<pre>DOMImplementation( 
   boolean no_mod);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t32">Parameter</th>
<th class="cellalignment1810" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t32" headers="r1c1-t32">
<pre>no_mod
</pre></td>
<td class="cellalignment1804" headers="r2c1-t32 r1c2-t32">whether modifications are allowed (<code>FALSE</code>) or not allowed (<code>TRUE</code>)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2274"></a>Returns</p>
<p><code>(DOMImplementation)</code> implementation object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2275" class="refsect2"><a id="CACJDAHF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref138"></a><a id="sthref139"></a>getNoMod()</h3>
<p>Get the &#39;no modification allowed&#39; flag value. This is an Oracle extension.</p>
<p class="subhead1"><a id="CPXML2276"></a>Syntax</p>
<pre>boolean getNoMod() const; 
</pre>
<p class="subhead1"><a id="CPXML2277"></a>Returns</p>
<p><code>TRUE</code> if flag&#39;s value is <code>TRUE</code>, <code>FALSE</code> otherwise</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2278" class="refsect2"><a id="CACIEAHC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref140"></a><a id="sthref141"></a>~DOMImplementation()</h3>
<p>This is the default destructor. It removes all DOM trees associated with this object.</p>
<p class="subhead1"><a id="CPXML2279"></a>Syntax</p>
<pre>~DOMImplementation(); 
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACCIAFA"></a>
<hr/>
<div id="CPXML01190" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref142"></a>DocumentFragmentRef Interface</h2>
<p><a href="#CACBDDCB">Table 2-9</a> summarizes the methods available through <code>DocumentFragmentRef</code> interface.</p>
<div id="CPXML2280" class="tblformal">
<p class="titleintable"><a id="sthref143"></a><a id="CACBDDCB"></a>Table 2-9 Summary of DocumentFragmentRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DocumentFragmentRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t33">Function</th>
<th class="cellalignment1810" id="r1c2-t33">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t33" headers="r1c1-t33">
<p><a href="#CACFCJHI">DocumentFragmentRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t33 r1c2-t33">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t33" headers="r1c1-t33">
<p><a href="#CACDGGEC">~DocumentFragmentRef()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t33 r1c2-t33">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2281" class="refsect2"><a id="CACFCJHI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref144"></a><a id="sthref145"></a>DocumentFragmentRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t34">Syntax</th>
<th class="cellalignment1810" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t34" headers="r1c1-t34">
<pre>DocumentFragmentRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t34 r1c2-t34">Used to create references to a given fragment node after a call to <code>createDocumentFragment</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t34" headers="r1c1-t34">
<pre>DocumentFragmentRef(
   const DocumentFragmentRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t34 r1c2-t34">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t35">Parameter</th>
<th class="cellalignment1810" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t35" headers="r1c1-t35">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t35 r1c2-t35">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t35" headers="r1c1-t35">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t35 r1c2-t35">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2282"></a>Returns</p>
<p><code>(DocumentFragmentRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2283" class="refsect2"><a id="CACDGGEC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref146"></a><a id="sthref147"></a>~DocumentFragmentRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2284"></a>Syntax</p>
<pre>~DocumentFragmentRef() {}
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACHCFGE"></a>
<hr/>
<div id="CPXML01200" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref148"></a>DocumentRange Interface</h2>
<p><a href="#CACEHBJD">Table 2-10</a> summarizes the methods available through <code>DocumentRange</code> interface.</p>
<div id="CPXML2285" class="tblformal">
<p class="titleintable"><a id="sthref149"></a><a id="CACEHBJD"></a>Table 2-10 Summary of DocumentRange Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DocumentRange Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t36">Function</th>
<th class="cellalignment1810" id="r1c2-t36">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t36" headers="r1c1-t36">
<p><a href="#CACCBFIF">DocumentRange()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t36 r1c2-t36">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t36" headers="r1c1-t36">
<p><a href="#CACDJADG">createRange()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t36 r1c2-t36">
<p>Create new range object.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t36" headers="r1c1-t36">
<p><a href="#CACICJEA">destroyRange()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t36 r1c2-t36">
<p>Destroys Range object.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t36" headers="r1c1-t36">
<p><a href="#CACCCCGG">~DocumentRange()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t36 r1c2-t36">
<p>Default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2286" class="refsect2"><a id="CACCBFIF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref150"></a><a id="sthref151"></a>DocumentRange()</h3>
<p>Constructs the factory.</p>
<p class="subhead1"><a id="CPXML2287"></a>Syntax</p>
<pre>DocumentRange();
</pre>
<p class="subhead1"><a id="CPXML2288"></a>Returns</p>
<p><code>(DocumentRange)</code> new factory object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2289" class="refsect2"><a id="CACDJADG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref152"></a><a id="sthref153"></a>createRange()</h3>
<p>Create new range object.</p>
<p class="subhead1"><a id="CPXML2290"></a>Syntax</p>
<pre>Range&lt; Node&gt;* createRange( 
   DocumentRef&lt; Node&gt;&amp; doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t37">Parameter</th>
<th class="cellalignment1810" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t37" headers="r1c1-t37">
<pre>doc
</pre></td>
<td class="cellalignment1804" headers="r2c1-t37 r1c2-t37">reference to document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2291"></a>Returns</p>
<p><code>(Range*)</code> Pointer to new range</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2292" class="refsect2"><a id="CACICJEA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref154"></a><a id="sthref155"></a>destroyRange()</h3>
<p>Destroys range object.</p>
<p class="subhead1"><a id="CPXML2293"></a>Syntax</p>
<pre>void destroyRange( 
   Range&lt; Node&gt;* range)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t38">Parameter</th>
<th class="cellalignment1810" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t38" headers="r1c1-t38">
<pre>range
</pre></td>
<td class="cellalignment1804" headers="r2c1-t38 r1c2-t38">range</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2294" class="refsect2"><a id="CACCCCGG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref156"></a><a id="sthref157"></a>~DocumentRange()</h3>
<p>Default destructor.</p>
<p class="subhead1"><a id="CPXML2295"></a>Syntax</p>
<pre>~DocumentRange();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACGGDFE"></a>
<hr/>
<div id="CPXML01210" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref158"></a>DocumentRef Interface</h2>
<p><a href="#CACEGDJG">Table 2-11</a> summarizes the methods available through DocumentRef interface.</p>
<div id="CPXML2296" class="tblformal">
<p class="titleintable"><a id="sthref159"></a><a id="CACEGDJG"></a>Table 2-11 Summary of DocumentRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DocumentRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t39">Function</th>
<th class="cellalignment1810" id="r1c2-t39">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t39" headers="r1c1-t39">
<p><a href="#CACIGFFD">DocumentRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t39 r1c2-t39">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t39" headers="r1c1-t39">
<p><a href="#CACGIECF">createAttribute()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t39 r1c2-t39">
<p>Create an attribute node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t39" headers="r1c1-t39">
<p><a href="#CACDFICC">createAttributeNS()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t39 r1c2-t39">
<p>Create an attribute node with namespace information.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t39" headers="r1c1-t39">
<p><a href="#CACIIADC">createCDATASection()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t39 r1c2-t39">
<p>Create a CDATA node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t39" headers="r1c1-t39">
<p><a href="#CACHGDCE">createComment()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t39 r1c2-t39">
<p>Create a comment node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t39" headers="r1c1-t39">
<p><a href="#CACHDIDE">createDocumentFragment()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t39 r1c2-t39">
<p>Create a document fragment.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t39" headers="r1c1-t39">
<p><a href="#CACDBDCB">createElement()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t39 r1c2-t39">
<p>Create an element node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t39" headers="r1c1-t39">
<p><a href="#CACEJBBD">createElementNS()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t39 r1c2-t39">
<p>Create an element node with names pace information.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r10c1-t39" headers="r1c1-t39">
<p><a href="#CACHECII">createEntityReference()</a></p>
</td>
<td class="cellalignment1804" headers="r10c1-t39 r1c2-t39">
<p>Create an entity reference node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r11c1-t39" headers="r1c1-t39">
<p><a href="#CACHFBCB">createProcessingInstruction()</a></p>
</td>
<td class="cellalignment1804" headers="r11c1-t39 r1c2-t39">
<p>Create a <code>ProcessingInstruction</code> node</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r12c1-t39" headers="r1c1-t39">
<p><a href="#CACGGBIH">createTextNode()</a></p>
</td>
<td class="cellalignment1804" headers="r12c1-t39 r1c2-t39">
<p>Create a text node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r13c1-t39" headers="r1c1-t39">
<p><a href="#CACGECID">getDoctype()</a></p>
</td>
<td class="cellalignment1804" headers="r13c1-t39 r1c2-t39">
<p>Get DTD associated with the document.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r14c1-t39" headers="r1c1-t39">
<p><a href="#CACBFBCD">getDocumentElement()</a></p>
</td>
<td class="cellalignment1804" headers="r14c1-t39 r1c2-t39">
<p>Get top-level element of this document.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r15c1-t39" headers="r1c1-t39">
<p><a href="#CACJGCFJ">getElementById()</a></p>
</td>
<td class="cellalignment1804" headers="r15c1-t39 r1c2-t39">
<p>Get an element given its ID.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r16c1-t39" headers="r1c1-t39">
<p><a href="#CACFHGCH">getElementsByTagName()</a></p>
</td>
<td class="cellalignment1804" headers="r16c1-t39 r1c2-t39">
<p>Get elements in the document by tag name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r17c1-t39" headers="r1c1-t39">
<p><a href="#CACECADJ">getElementsByTagNameNS()</a></p>
</td>
<td class="cellalignment1804" headers="r17c1-t39 r1c2-t39">
<p>Get elements in the document by tag name (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r18c1-t39" headers="r1c1-t39">
<p><a href="#CACBBHCJ">getImplementation()</a></p>
</td>
<td class="cellalignment1804" headers="r18c1-t39 r1c2-t39">
<p>Get <code>DOMImplementation</code> object associated with the document.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r19c1-t39" headers="r1c1-t39">
<p><a href="#CACBCDCJ">importNode()</a></p>
</td>
<td class="cellalignment1804" headers="r19c1-t39 r1c2-t39">
<p>Import a node from another DOM.s</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r20c1-t39" headers="r1c1-t39">
<p><a href="#CACDCFFI">~DocumentRef()</a></p>
</td>
<td class="cellalignment1804" headers="r20c1-t39 r1c2-t39">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2297" class="refsect2"><a id="CACIGFFD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref160"></a><a id="sthref161"></a>DocumentRef()</h3>
<p>This is a constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t40">Syntax</th>
<th class="cellalignment1810" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t40" headers="r1c1-t40">
<pre>DocumentRef(
   const NodeRef&lt; Node&gt;&amp; nref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t40 r1c2-t40">Default constructor.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t40" headers="r1c1-t40">
<pre>DocumentRef(
   const DocumentRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t40 r1c2-t40">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t41">Parameter</th>
<th class="cellalignment1810" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t41" headers="r1c1-t41">
<pre>nref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t41 r1c2-t41">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t41" headers="r1c1-t41">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t41 r1c2-t41">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2298"></a>Returns</p>
<p><code>(DocumentRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2299" class="refsect2"><a id="CACGIECF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref162"></a><a id="sthref163"></a>createAttribute()</h3>
<p>Creates an attribute node with the given name. This is the non-namespace aware function. The new attribute will have <code>NULL</code> namespace URI and prefix, and its local name will be the same as its name, even if the name specified is a qualified name. The new node is an orphan with no parent. The name is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CPXML2300"></a>Syntax</p>
<pre>Node* createAttribute( 
   oratext* name) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t42">Parameter</th>
<th class="cellalignment1810" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t42" headers="r1c1-t42">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t42 r1c2-t42">name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2301"></a>Returns</p>
<p><code>(Node*)</code> New attribute node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2302" class="refsect2"><a id="CACDFICC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref164"></a><a id="sthref165"></a>createAttributeNS()</h3>
<p>Creates an attribute node with the given namespace URI and qualified name. The new node is an orphan with no parent. The URI and qualified name are not copied, their pointers are just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CPXML2303"></a>Syntax</p>
<pre>Node* createAttributeNS( 
   oratext* namespaceURI,
   oratext* qualifiedName)
   throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t43">Parameter</th>
<th class="cellalignment1810" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t43" headers="r1c1-t43">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t43 r1c2-t43">namespace URI</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t43" headers="r1c1-t43">
<pre>qualifiedName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t43 r1c2-t43">qualified name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2304"></a>Returns</p>
<p><code>(Node*)</code> New attribute node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2305" class="refsect2"><a id="CACIIADC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref166"></a><a id="sthref167"></a>createCDATASection()</h3>
<p>Creates a <code>CDATA</code> section node with the given initial data (which should be in the data encoding). A <code>CDATA</code> section is considered verbatim and is never parsed; it will not be joined with adjacent text nodes by the normalize operation. The initial data may be <code>NULL</code>, if provided; it is not verified, converted, or checked. The name of a <code>CDATA</code> node is always &#34;<code>#cdata-section</code>&#34;. The new node is an orphan with no parent. The <code>CDATA</code> is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CPXML2306"></a>Syntax</p>
<pre>Node* createCDATASection(
   oratext* data)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t44">Parameter</th>
<th class="cellalignment1810" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t44" headers="r1c1-t44">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t44 r1c2-t44">data for new node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2307"></a>Returns</p>
<p><code>(Node*)</code> New CDATA node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2308" class="refsect2"><a id="CACHGDCE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref168"></a><a id="sthref169"></a>createComment()</h3>
<p>Creates a comment node with the given initial data (which must be in the data encoding). The data may be <code>NULL</code>, if provided; it is not verified, converted, or checked. The name of the comment node is always &#34;<code>#comment</code>&#34;. The new node is an orphan with no parent. The comment data is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CPXML2309"></a>Syntax</p>
<pre>Node* createComment( 
   oratext* data)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t45">Parameter</th>
<th class="cellalignment1810" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t45" headers="r1c1-t45">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t45 r1c2-t45">data for new node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2310"></a>Returns</p>
<p><code>(Node*)</code> New comment node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2311" class="refsect2"><a id="CACHDIDE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref170"></a><a id="sthref171"></a>createDocumentFragment()</h3>
<p>Creates an empty Document Fragment node. A document fragment is treated specially when it is inserted into a DOM tree: the children of the fragment are inserted in order instead of the fragment node itself. After insertion, the fragment node will still exist, but have no children. The name of a fragment node is always &#34;<code>#document-fragment</code>&#34;.</p>
<p class="subhead1"><a id="CPXML2312"></a>Syntax</p>
<pre>Node* createDocumentFragment()
throw (DOMException);
</pre>
<p class="subhead1"><a id="CPXML2313"></a>Returns</p>
<p><code>(Node*)</code> new document fragment node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2314" class="refsect2"><a id="CACDBDCB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref172"></a><a id="sthref173"></a>createElement()</h3>
<p>Creates an element node with the given tag name (which should be in the data encoding). The new node is an orphan with no parent. The <code>tagname</code> is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p>Note that the tag name of an element is case sensitive. This is the non-namespace aware function: the new node will have <code>NULL</code> namespace URI and prefix, and its local name will be the same as its tag name, even if the tag name specified is a qualified name.</p>
<p class="subhead1"><a id="CPXML2315"></a>Syntax</p>
<pre>Node* createElement(
   oratext* tagname)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t46">Parameter</th>
<th class="cellalignment1810" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t46" headers="r1c1-t46">
<pre>tagname
</pre></td>
<td class="cellalignment1804" headers="r2c1-t46 r1c2-t46">tag name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2316"></a>Returns</p>
<p><code>(Node*)</code> New element node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2317" class="refsect2"><a id="CACEJBBD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref174"></a><a id="sthref175"></a>createElementNS()</h3>
<p>Creates an element with the given namespace URI and qualified name. The new node is an orphan with no parent. The URI and qualified name are not copied, their pointers are just stored. The user is responsible for persistence and freeing of that data.</p>
<p>Note that element names are case sensitive, and the qualified name is required though the URI may be <code>NULL</code>. The qualified name will be split into prefix and local parts. The tagName will be the full qualified name.</p>
<p class="subhead1"><a id="CPXML2318"></a>Syntax</p>
<pre>Node* createElementNS(
   oratext* namespaceURI,
   oratext* qualifiedName)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t47">Parameter</th>
<th class="cellalignment1810" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t47" headers="r1c1-t47">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t47 r1c2-t47">namespace URI</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t47" headers="r1c1-t47">
<pre>qualifiedName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t47 r1c2-t47">qualified name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2319"></a>Returns</p>
<p><code>(Node*)</code> New element node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2320" class="refsect2"><a id="CACHECII"></a>
<hr/>
<h3 class="refsect2"><a id="sthref176"></a><a id="sthref177"></a>createEntityReference()</h3>
<p>Creates an entity reference node; the name (which should be in the data encoding) is the name of the entity to be referenced. The named entity does not have to exist. The name is not verified, converted, or checked. The new node is an orphan with no parent. The entity reference name is not copied; its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p>Note that entity reference nodes are never generated by the parser; instead, entity references are expanded as encountered. On output, an entity reference node will turn into a &#34;&amp;name;&#34; style reference.</p>
<p class="subhead1"><a id="CPXML2321"></a>Syntax</p>
<pre>Node* createEntityReference(
   oratext* name)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t48">Parameter</th>
<th class="cellalignment1810" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t48" headers="r1c1-t48">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t48 r1c2-t48">name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2322"></a>Returns</p>
<p><code>(Node*)</code> New entity reference node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2323" class="refsect2"><a id="CACHFBCB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref178"></a><a id="sthref179"></a>createProcessingInstruction()</h3>
<p>Creates a processing instruction node with the given target and data (which should be in the data encoding). The data may be <code>NULL</code>, but the target is required and cannot be changed. The target and data are not verified, converted, or checked. The name of the node is the same as the target. The new node is an orphan with no parent. The target and data are not copied; their pointers are just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CPXML2324"></a>Syntax</p>
<pre>Node* createProcessingInstruction(
   oratext* target,
   oratext* data)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t49">Parameter</th>
<th class="cellalignment1810" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t49" headers="r1c1-t49">
<pre>target
</pre></td>
<td class="cellalignment1804" headers="r2c1-t49 r1c2-t49">target</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t49" headers="r1c1-t49">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r3c1-t49 r1c2-t49">data for new node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2325"></a>Returns</p>
<p><code>(Node*)</code> New PI node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2326" class="refsect2"><a id="CACGGBIH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref180"></a><a id="sthref181"></a>createTextNode()</h3>
<p>Creates a text node with the given initial data (which must be non-<code>NULL</code> and in the data encoding). The data may be <code>NULL</code>; if provided, it is not verified, converted, checked, or parsed (entities will not be expanded). The name of the node is always &#34;<code>#text</code>&#34;. The new node is an orphan with no parent. The text data is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CPXML2327"></a>Syntax</p>
<pre>Node* createTextNode(
   oratext* data)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t50">Parameter</th>
<th class="cellalignment1810" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t50" headers="r1c1-t50">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t50 r1c2-t50">data for new text node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2328"></a>Returns</p>
<p><code>(Node*)</code> new text node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2329" class="refsect2"><a id="CACGECID"></a>
<hr/>
<h3 class="refsect2"><a id="sthref182"></a><a id="sthref183"></a>getDoctype()</h3>
<p>Returns the DTD node associated with this document. After this call, a <code>DocumentType</code>Ref object needs to be created with an appropriate constructor in order to call its member functions. The DTD tree cannot be edited.</p>
<p class="subhead1"><a id="CPXML2330"></a>Syntax</p>
<pre>Node* getDoctype() const;
</pre>
<p class="subhead1"><a id="CPXML2331"></a>Returns</p>
<p><code>(Node*)</code> DTD node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2332" class="refsect2"><a id="CACBFBCD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref184"></a><a id="sthref185"></a>getDocumentElement()</h3>
<p>Returns the root element (node) of the DOM tree. Each document has only one uppermost Element node, called the root element. If there is no root element, <code>NULL</code> is returned. This can happen when the document tree is being constructed.</p>
<p class="subhead1"><a id="CPXML2333"></a>Syntax</p>
<pre>Node* getDocumentElement() const;
</pre>
<p class="subhead1"><a id="CPXML2334"></a>Returns</p>
<p><code>(Node*)</code> Root element</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2335" class="refsect2"><a id="CACJGCFJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref186"></a><a id="sthref187"></a>getElementById()</h3>
<p>Returns the element node which has the given ID. Throws <code>NOT_FOUND_ERR</code> if no element is found. The given ID should be in the data encoding or it might not match.</p>
<p>Note that attributes named &#34;<code>ID</code>&#34; are not automatically of type ID; ID attributes (which can have any name) must be declared as type ID in the DTD or XML schema associated with the document.</p>
<p class="subhead1"><a id="CPXML2336"></a>Syntax</p>
<pre>Node* getElementById(
   oratext* elementId);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t51">Parameter</th>
<th class="cellalignment1810" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t51" headers="r1c1-t51">
<pre>elementId
</pre></td>
<td class="cellalignment1804" headers="r2c1-t51 r1c2-t51">element id</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2337"></a>Returns</p>
<p><code>(Node*)</code><code>Element</code> node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2338" class="refsect2"><a id="CACFHGCH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref188"></a>getElementsByTagName()</h3>
<p>Returns a list of all elements in the document with a given tag name, in document order (the order in which they would be encountered in a preorder traversal of the tree). The list should be freed by the user when it is no longer needed. The list is not live, it is a snapshot. That is, if a new node which matched the tag name were added to the DOM after the list was returned, the list would not automatically be updated to include the node.</p>
<p>The special name &#34;*&#34; matches all tag names; a <code>NULL</code> name matches nothing. Note that tag names are case sensitive, and should be in the data encoding or a mismatch might occur.</p>
<p>This function is not namespace aware; the full tag names are compared. If two qualified names with two different prefixes both of which map to the same URI are compared, the comparison will fail.</p>
<p class="subhead1"><a id="CPXML2339"></a>Syntax</p>
<pre>NodeList&lt; Node&gt;* getElementsByTagName( 
   oratext* tagname) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t52">Parameter</th>
<th class="cellalignment1810" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t52" headers="r1c1-t52">
<pre>tagname
</pre></td>
<td class="cellalignment1804" headers="r2c1-t52 r1c2-t52">tag name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2340"></a>Returns</p>
<p><code>(NodeList&lt; Node&gt;*)</code> List of nodes</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2341" class="refsect2"><a id="CACECADJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref189"></a><a id="sthref190"></a>getElementsByTagNameNS()</h3>
<p>Returns a list of all elements in the document with a given namespace URI and local name, in document order (the order in which they would be encountered in a preorder traversal of the tree). The list should be freed by the user when it is no longer needed. The list is not live, it is a snapshot. That is, if a new node which matches the URI and local name were added to the DOM after the list was returned, the list would not automatically be updated to include the node.</p>
<p>The URI and local name should be in the data encoding. The special name &#34;*&#34; matches all local names; a <code>NULL</code> local name matches nothing. Namespace URIs must always match, however, no wildcard is allowed. Note that comparisons are case sensitive.</p>
<p class="subhead1"><a id="CPXML2342"></a>Syntax</p>
<pre>NodeList&lt; Node&gt;* getElementsByTagNameNS(
   oratext* namespaceURI,
   oratext* localName);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t53">Parameter</th>
<th class="cellalignment1810" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t53" headers="r1c1-t53">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t53 r1c2-t53">namespace URI to match</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t53" headers="r1c1-t53">
<pre>localName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t53 r1c2-t53">local name to match</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2343"></a>Returns</p>
<p><code>(NodeList&lt; Node&gt;*)</code> List of nodes</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2344" class="refsect2"><a id="CACBBHCJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref191"></a><a id="sthref192"></a>getImplementation()</h3>
<p>Returns DOMImplementation object that was used to create this document. When the DOMImplementation object is destructed, all document trees associated with it are also destructed.</p>
<p class="subhead1"><a id="CPXML2345"></a>Syntax</p>
<pre>DOMImplementation&lt; Node&gt;* getImplementation() const;
</pre>
<p class="subhead1"><a id="CPXML2346"></a>Returns</p>
<p><code>(DOMImplementation)</code> DOMImplementation reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2347" class="refsect2"><a id="CACBCDCJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref193"></a><a id="sthref194"></a>importNode()</h3>
<p>Imports a node from one Document to another. The new node is an orphan and has no parent. The original node is not modified in any way or removed from its document; instead, a new node is created with copies of all the original node&#39;s qualified name, prefix, namespace URI, and local name.</p>
<p>The <code>deep</code> parameter controls whether the children of the node are recursively imported. If <code>FALSE</code>, only the node itself is imported, and it will have no children. If <code>TRUE</code>, all descendents of the node will be imported as well, and an entire new subtree created. Elements will have only their specified attributes imported; non-specified (default) attributes are omitted. New default attributes (for the destination document) are then added. Document and <code>DocumentType</code> nodes cannot be imported.</p>
<p class="subhead1"><a id="CPXML2348"></a>Syntax</p>
<pre>Node* importNode( 
   NodeRef&lt; Node&gt;&amp; importedNode,
   boolean deep) const
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t54">Parameter</th>
<th class="cellalignment1810" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t54" headers="r1c1-t54">
<pre>importedNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t54 r1c2-t54">node to import</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t54" headers="r1c1-t54">
<pre>deep
</pre></td>
<td class="cellalignment1804" headers="r3c1-t54 r1c2-t54">indicator for recursively importing the subtree</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2349"></a>Returns</p>
<p><code>(Node*)</code> New imported node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2350" class="refsect2"><a id="CACDCFFI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref195"></a><a id="sthref196"></a>~DocumentRef()</h3>
<p>This is the default destructor. It cleans the reference to the node. If the document node is marked for deletion, the destructor deletes the node and the tree under it. It is always deep deletion in the case of a document node. The destructor can be called by the environment or by the user directly.</p>
<p class="subhead1"><a id="CPXML2351"></a>Syntax</p>
<pre>~DocumentRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACCCDAC"></a>
<hr/>
<div id="CPXML01220" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref197"></a>DocumentTraversal Interface</h2>
<p><a href="#CACJHEEF">Table 2-12</a> summarizes the methods available through DocumentTraversal interface.</p>
<div id="CPXML2352" class="tblformal">
<p class="titleintable"><a id="sthref198"></a><a id="CACJHEEF"></a>Table 2-12 Summary of DocumentTraversal Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DocumentTraversal Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t55">Function</th>
<th class="cellalignment1810" id="r1c2-t55">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t55" headers="r1c1-t55">
<p><a href="#CACHDAFE">DocumentTraversal()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t55 r1c2-t55">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t55" headers="r1c1-t55">
<p><a href="#CACDIGGD">createNodeIterator()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t55 r1c2-t55">
<p>Create new <code>NodeIterator</code> object.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t55" headers="r1c1-t55">
<p><a href="#CACEIGJE">createTreeWalker()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t55 r1c2-t55">
<p>Create new <code>TreeWalker</code> object.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t55" headers="r1c1-t55">
<p><a href="#CACCEDCB">destroyNodeIterator()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t55 r1c2-t55">
<p>Destroys <code>NodeIterator</code> object.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t55" headers="r1c1-t55">
<p><a href="#CACGEEFE">destroyTreeWalker()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t55 r1c2-t55">
<p>Destroys <code>TreeWalker</code> object.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t55" headers="r1c1-t55">
<p><a href="#CACJIADB">~DocumentTraversal()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t55 r1c2-t55">
<p>Default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2353" class="refsect2"><a id="CACHDAFE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref199"></a><a id="sthref200"></a>DocumentTraversal()</h3>
<p>Constructs the factory.</p>
<p class="subhead1"><a id="CPXML2354"></a>Syntax</p>
<pre>DocumentTraversal();
</pre>
<p class="subhead1"><a id="CPXML2355"></a>Returns</p>
<p><code>(DocumentTraversal)</code> new factory object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2356" class="refsect2"><a id="CACDIGGD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref201"></a><a id="sthref202"></a>createNodeIterator()</h3>
<p>Create new iterator object.</p>
<p class="subhead1"><a id="CPXML2357"></a>Syntax</p>
<pre>NodeIterator&lt; Node&gt;* createNodeIterator(
   NodeRef&lt; Node&gt;&amp; root,
   WhatToShowCode whatToShow,
   boolean entityReferenceExpansion)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t56">Parameter</th>
<th class="cellalignment1810" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t56" headers="r1c1-t56">
<pre>root
</pre></td>
<td class="cellalignment1804" headers="r2c1-t56 r1c2-t56">root of subtree, for iteration</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t56" headers="r1c1-t56">
<pre>whatToShow
</pre></td>
<td class="cellalignment1804" headers="r3c1-t56 r1c2-t56">node types filter</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t56" headers="r1c1-t56">
<pre>entityReferenceExpansion
</pre></td>
<td class="cellalignment1804" headers="r4c1-t56 r1c2-t56">if <code>TRUE</code>, expand entity references</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2358"></a>Returns</p>
<p><code>(NodeIterator*)</code> Pointer to new iterator</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2359" class="refsect2"><a id="CACEIGJE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref203"></a><a id="sthref204"></a>createTreeWalker()</h3>
<p>Create new <code>TreeWalker</code> object.</p>
<p class="subhead1"><a id="CPXML2360"></a>Syntax</p>
<pre>TreeWalker&lt; Node&gt;* createTreeWalker(
   NodeRef&lt; Node&gt;&amp; root,
   WhatToShowCode whatToShow,
   boolean entityReferenceExpansion)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t57">Parameter</th>
<th class="cellalignment1810" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t57" headers="r1c1-t57">
<pre>root
</pre></td>
<td class="cellalignment1804" headers="r2c1-t57 r1c2-t57">root of subtree, for traversal</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t57" headers="r1c1-t57">
<pre>whatToShow
</pre></td>
<td class="cellalignment1804" headers="r3c1-t57 r1c2-t57">node types filter</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t57" headers="r1c1-t57">
<pre>entityReferenceExpansion
</pre></td>
<td class="cellalignment1804" headers="r4c1-t57 r1c2-t57">if <code>TRUE</code>, expand entity references</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2361"></a>Returns</p>
<p><code>(TreeWalker*)</code> Pointer to new tree walker</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2362" class="refsect2"><a id="CACCEDCB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref205"></a>destroyNodeIterator()</h3>
<p>Destroys node iterator object.</p>
<p class="subhead1"><a id="CPXML2363"></a>Syntax</p>
<pre>void destroyNodeIterator(
   NodeIterator&lt; Node&gt;* iter)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t58">Parameter</th>
<th class="cellalignment1810" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t58" headers="r1c1-t58">
<pre>iter
</pre></td>
<td class="cellalignment1804" headers="r2c1-t58 r1c2-t58">iterator</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2364" class="refsect2"><a id="CACGEEFE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref206"></a>destroyTreeWalker()</h3>
<p>Destroys <code>TreeWalker</code> object.</p>
<p class="subhead1"><a id="CPXML2365"></a>Syntax</p>
<pre>void destroyTreeWalker(
   TreeWalker&lt; Node&gt;* walker)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t59">Parameter</th>
<th class="cellalignment1810" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t59" headers="r1c1-t59">
<pre>walker
</pre></td>
<td class="cellalignment1804" headers="r2c1-t59 r1c2-t59"><code>TreeWalker</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2366" class="refsect2"><a id="CACJIADB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref207"></a>~DocumentTraversal()</h3>
<p>Default destructor.</p>
<p class="subhead1"><a id="CPXML2367"></a>Syntax</p>
<pre>~DocumentTraversal();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEHHDI"></a>
<hr/>
<div id="CPXML01230" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref208"></a>DocumentTypeRef Interface</h2>
<p><a href="#CACJJDIA">Table 2-13</a> summarizes the methods available through DocumentTypeRef interface.</p>
<div id="CPXML2368" class="tblformal">
<p class="titleintable"><a id="sthref209"></a><a id="CACJJDIA"></a>Table 2-13 Summary of DocumentTypeRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of DocumentTypeRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t60">Function</th>
<th class="cellalignment1810" id="r1c2-t60">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t60" headers="r1c1-t60">
<p><a href="#CACFIIEF">DocumentTypeRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t60 r1c2-t60">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t60" headers="r1c1-t60">
<p><a href="#CACJGICA">getEntities()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t60 r1c2-t60">
<p>Get DTD&#39;s entities.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t60" headers="r1c1-t60">
<p><a href="#CACFGADB">getInternalSubset()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t60 r1c2-t60">
<p>Get DTD&#39;s internal subset.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t60" headers="r1c1-t60">
<p><a href="#CACIEBIJ">getName()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t60 r1c2-t60">
<p>Get name of DTD.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t60" headers="r1c1-t60">
<p><a href="#CACGHGCJ">getNotations()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t60 r1c2-t60">
<p>Get DTD&#39;s notations.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t60" headers="r1c1-t60">
<p><a href="#CACHCBBF">getPublicId()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t60 r1c2-t60">
<p>Get DTD&#39;s public ID.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t60" headers="r1c1-t60">
<p><a href="#CACFJEBF">getSystemId()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t60 r1c2-t60">
<p>Get DTD&#39;s system ID.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t60" headers="r1c1-t60">
<p><a href="#CACBBDHA">~DocumentTypeRef()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t60 r1c2-t60">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2369" class="refsect2"><a id="CACFIIEF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref210"></a><a id="sthref211"></a>DocumentTypeRef()</h3>
<p>This is a constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t61">Syntax</th>
<th class="cellalignment1810" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t61" headers="r1c1-t61">
<pre>DocumentTypeRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t61 r1c2-t61">Default constructor.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t61" headers="r1c1-t61">
<pre>DocumentTypeRef(
   const DocumentTypeRef&lt; Node&gt;&amp; node_ref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t61 r1c2-t61">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t62">Parameter</th>
<th class="cellalignment1810" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t62" headers="r1c1-t62">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t62 r1c2-t62">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t62" headers="r1c1-t62">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t62 r1c2-t62">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2370"></a>Returns</p>
<p><code>(DocumentTypeRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2371" class="refsect2"><a id="CACJGICA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref212"></a><a id="sthref213"></a>getEntities()</h3>
<p>Returns a named node map of general entities defined by the DTD.</p>
<p class="subhead1"><a id="CPXML2372"></a>Syntax</p>
<pre>NamedNodeMap&lt; Node&gt;* getEntities() const;
</pre>
<p class="subhead1"><a id="CPXML2373"></a>Returns</p>
<p><code>(NamedNodeMap&lt; Node&gt;*)</code> map containing entities</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2374" class="refsect2"><a id="CACFGADB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref214"></a><a id="sthref215"></a>getInternalSubset()</h3>
<p>Returns the content model for an element. If there is no DTD, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CPXML2375"></a>Syntax</p>
<pre>Node* getInternalSubset( 
   oratext* name);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t63">Parameter</th>
<th class="cellalignment1810" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t63" headers="r1c1-t63">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t63 r1c2-t63">name of element</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2376"></a>Returns</p>
<p><code>(xmlnode*)</code> content model subtree</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2377" class="refsect2"><a id="CACIEBIJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref216"></a><a id="sthref217"></a>getName()</h3>
<p>Returns DTD&#39;s name (specified immediately after the <code>DOCTYPE</code> keyword)</p>
<p class="subhead1"><a id="CPXML2378"></a>Syntax</p>
<pre>oratext* getName() const;
</pre>
<p class="subhead1"><a id="CPXML2379"></a>Returns</p>
<p><code>(oratext*)</code> name of DTD</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2380" class="refsect2"><a id="CACGHGCJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref218"></a><a id="sthref219"></a>getNotations()</h3>
<p>Returns a named node map of notations declared by the DTD.</p>
<p class="subhead1"><a id="CPXML2381"></a>Syntax</p>
<pre>NamedNodeMap&lt; Node&gt;* getNotations() const;
</pre>
<p class="subhead1"><a id="CPXML2382"></a>Returns</p>
<p><code>(NamedNodeMap&lt; Node&gt;*)</code> map containing notations</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2383" class="refsect2"><a id="CACHCBBF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref220"></a><a id="sthref221"></a>getPublicId()</h3>
<p>Returns DTD&#39;s public identifier</p>
<p class="subhead1"><a id="CPXML2384"></a>Syntax</p>
<pre>oratext* getPublicId() const;
</pre>
<p class="subhead1"><a id="CPXML2385"></a>Returns</p>
<p><code>(oratext*)</code> DTD&#39;s public identifier</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2386" class="refsect2"><a id="CACFJEBF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref222"></a><a id="sthref223"></a>getSystemId()</h3>
<p>Returns DTD&#39;s system identifier</p>
<p class="subhead1"><a id="CPXML2387"></a>Syntax</p>
<pre>oratext* getSystemId() const;
</pre>
<p class="subhead1"><a id="CPXML2388"></a>Returns</p>
<p><code>(oratext*)</code> DTD&#39;s system identifier</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2389" class="refsect2"><a id="CACBBDHA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref224"></a><a id="sthref225"></a>~DocumentTypeRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2390"></a>Syntax</p>
<pre>~DocumentTypeRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACIABHC"></a>
<hr/>
<div id="CPXML01240" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref226"></a>ElementRef Interface</h2>
<p><a href="#CACCGFEI">Table 2-14</a> summarizes the methods available through <code>ElementRef</code> interface.</p>
<div id="CPXML2391" class="tblformal">
<p class="titleintable"><a id="sthref227"></a><a id="CACCGFEI"></a>Table 2-14 Summary of ElementRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of ElementRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t64">Function</th>
<th class="cellalignment1810" id="r1c2-t64">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t64" headers="r1c1-t64">
<p><a href="#CACHAIHJ">ElementRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t64 r1c2-t64">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t64" headers="r1c1-t64">
<p><a href="#CACIJCJG">getAttribute()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t64 r1c2-t64">
<p>Get attribute&#39;s value given its name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t64" headers="r1c1-t64">
<p><a href="#CACFBIJD">getAttributeNS()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t64 r1c2-t64">
<p>Get attribute&#39;s value given its URI and local name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t64" headers="r1c1-t64">
<p><a href="#CACEBADG">getAttributeNode()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t64 r1c2-t64">
<p>Get the attribute node given its name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t64" headers="r1c1-t64">
<p><a href="#CACDECDC">getElementsByTagName()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t64 r1c2-t64">
<p>Get elements with given tag name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t64" headers="r1c1-t64">
<p><a href="#CACJAJFA">getTagName()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t64 r1c2-t64">
<p>Get element&#39;s tag name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t64" headers="r1c1-t64">
<p><a href="#CACFBJAC">hasAttribute()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t64 r1c2-t64">
<p>Check if named attribute exists.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t64" headers="r1c1-t64">
<p><a href="#CACIEEJE">hasAttributeNS()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t64 r1c2-t64">
<p>Check if named attribute exists (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r10c1-t64" headers="r1c1-t64">
<p><a href="#CACCGGGF">removeAttribute()</a></p>
</td>
<td class="cellalignment1804" headers="r10c1-t64 r1c2-t64">
<p>Remove attribute with specified name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r11c1-t64" headers="r1c1-t64">
<p><a href="#CACEBADJ">removeAttributeNS()</a></p>
</td>
<td class="cellalignment1804" headers="r11c1-t64 r1c2-t64">
<p>Remove attribute with specified URI and local name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r12c1-t64" headers="r1c1-t64">
<p><a href="#CACBFHAH">removeAttributeNode()</a></p>
</td>
<td class="cellalignment1804" headers="r12c1-t64 r1c2-t64">
<p>Remove attribute node</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r13c1-t64" headers="r1c1-t64">
<p><a href="#CACHCCHI">setAttribute()</a></p>
</td>
<td class="cellalignment1804" headers="r13c1-t64 r1c2-t64">
<p>Set new attribute for this element and/or new value.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r14c1-t64" headers="r1c1-t64">
<p><a href="#CACFAIHI">setAttributeNS()</a></p>
</td>
<td class="cellalignment1804" headers="r14c1-t64 r1c2-t64">
<p>Set new attribute for the element and/or new value.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r15c1-t64" headers="r1c1-t64">
<p><a href="#CACHIJIG">setAttributeNode()</a></p>
</td>
<td class="cellalignment1804" headers="r15c1-t64 r1c2-t64">
<p>Set attribute node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r16c1-t64" headers="r1c1-t64">
<p><a href="#CACCIEGA">~ElementRef()</a></p>
</td>
<td class="cellalignment1804" headers="r16c1-t64 r1c2-t64">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2392" class="refsect2"><a id="CACHAIHJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref228"></a><a id="sthref229"></a>ElementRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t65">Syntax</th>
<th class="cellalignment1810" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t65" headers="r1c1-t65">
<pre>ElementRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t65 r1c2-t65">Used to create references to a given element node after a call to createElement.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t65" headers="r1c1-t65">
<pre>ElementRef(
   const ElementRef&lt; Node&gt;&amp; node_ref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t65 r1c2-t65">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t66">Parameter</th>
<th class="cellalignment1810" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t66" headers="r1c1-t66">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t66 r1c2-t66">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t66" headers="r1c1-t66">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t66 r1c2-t66">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2393"></a>Returns</p>
<p><code>(ElementRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2394" class="refsect2"><a id="CACIJCJG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref230"></a>getAttribute()</h3>
<p>Returns the value of an element&#39;s attribute (specified by name). Note that an attribute may have the empty string as its value, but cannot be <code>NULL</code>.</p>
<p class="subhead1"><a id="CPXML2395"></a>Syntax</p>
<pre>oratext* getAttribute(
   oratext* name) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t67">Parameter</th>
<th class="cellalignment1810" id="r1c2-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t67" headers="r1c1-t67">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t67 r1c2-t67">name of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2396"></a>Returns</p>
<p><code>(oratext*)</code> named attribute&#39;s value (in data encoding)</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2397" class="refsect2"><a id="CACFBIJD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref231"></a><a id="sthref232"></a>getAttributeNS()</h3>
<p>Returns the value of an element&#39;s attribute (specified by URI and local name). Note that an attribute may have the empty string as its value, but cannot be <code>NULL</code>.</p>
<p class="subhead1"><a id="CPXML2398"></a>Syntax</p>
<pre>oratext* getAttributeNS(
   oratext* namespaceURI,
   oratext* localName);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t68">Parameter</th>
<th class="cellalignment1810" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t68" headers="r1c1-t68">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t68 r1c2-t68">namespace URI of attribute (data encoding)</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t68" headers="r1c1-t68">
<pre>localName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t68 r1c2-t68">local name of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2399"></a>Returns</p>
<p><code>(oratext *)</code> named attribute&#39;s value (in data encoding)</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2400" class="refsect2"><a id="CACEBADG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref233"></a><a id="sthref234"></a>getAttributeNode()</h3>
<p>Returns the attribute node given its name.</p>
<p class="subhead1"><a id="CPXML2401"></a>Syntax</p>
<pre>Node* getAttributeNode(
   oratext* name) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t69">Parameter</th>
<th class="cellalignment1810" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t69" headers="r1c1-t69">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t69 r1c2-t69">name of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2402"></a>Returns</p>
<p><code>(Node*)</code> the attribute node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2403" class="refsect2"><a id="CACDECDC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref235"></a><a id="sthref236"></a>getElementsByTagName()</h3>
<p>Returns a list of all elements with a given tag name, in the order in which they would be encountered in a preorder traversal of the subtree. The tag name should be in the data encoding. The special name &#34;<code>*</code>&#34; matches all tag names; a <code>NULL</code> name matches nothing. Tag names are case sensitive. This function is not namespace aware; the full tag names are compared. The returned list should be freed by the user.</p>
<p class="subhead1"><a id="CPXML2404"></a>Syntax</p>
<pre>NodeList&lt; Node&gt;* getElementsByTagName(
   oratext* name);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t70">Parameter</th>
<th class="cellalignment1810" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t70" headers="r1c1-t70">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t70 r1c2-t70">tag name to match (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2405"></a>Returns</p>
<p><code>(NodeList&lt; Node&gt;*)</code> the list of elements</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2406" class="refsect2"><a id="CACJAJFA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref237"></a><a id="sthref238"></a>getTagName()</h3>
<p>Returns the tag name of an element node which is supposed to have the same value as the node name from the node interface</p>
<p class="subhead1"><a id="CPXML2407"></a>Syntax</p>
<pre>oratext* getTagName() const;
</pre>
<p class="subhead1"><a id="CPXML2408"></a>Returns</p>
<p><code>(oratext*)</code> element&#39;s name [in data encoding]</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2409" class="refsect2"><a id="CACFBJAC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref239"></a><a id="sthref240"></a>hasAttribute()</h3>
<p>Determines if an element has a attribute with the given name</p>
<p class="subhead1"><a id="CPXML2410"></a>Syntax</p>
<pre>boolean hasAttribute(
   oratext* name);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t71">Parameter</th>
<th class="cellalignment1810" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t71" headers="r1c1-t71">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t71 r1c2-t71">name of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2411"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if element has attribute with given name</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2412" class="refsect2"><a id="CACIEEJE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref241"></a><a id="sthref242"></a>hasAttributeNS()</h3>
<p>Determines if an element has a attribute with the given URI and local name</p>
<p class="subhead1"><a id="CPXML2413"></a>Syntax</p>
<pre>boolean hasAttributeNS(
   oratext* namespaceURI,
   oratext* localName);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t72">Parameter</th>
<th class="cellalignment1810" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t72" headers="r1c1-t72">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t72 r1c2-t72">namespace URI of attribute (data encoding)</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t72" headers="r1c1-t72">
<pre>localName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t72 r1c2-t72">local name of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2414"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if element has such attribute</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2415" class="refsect2"><a id="CACCGGGF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref243"></a><a id="sthref244"></a>removeAttribute()</h3>
<p>Removes an attribute specified by name. The attribute is removed from the element&#39;s list of attributes, but the attribute node itself is not destroyed.</p>
<p class="subhead1"><a id="CPXML2416"></a>Syntax</p>
<pre>void removeAttribute(
   oratext* name) throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t73">Parameter</th>
<th class="cellalignment1810" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t73" headers="r1c1-t73">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t73 r1c2-t73">name of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2417" class="refsect2"><a id="CACEBADJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref245"></a><a id="sthref246"></a>removeAttributeNS()</h3>
<p>Removes an attribute specified by URI and local name. The attribute is removed from the element&#39;s list of attributes, but the attribute node itself is not destroyed.</p>
<p class="subhead1"><a id="CPXML2418"></a>Syntax</p>
<pre>void removeAttributeNS(
   oratext* namespaceURI,
   oratext* localName)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t74">Parameter</th>
<th class="cellalignment1810" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t74" headers="r1c1-t74">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t74 r1c2-t74">namespace URI of attribute (data encoding)</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t74" headers="r1c1-t74">
<pre>localName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t74 r1c2-t74">local name of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2419" class="refsect2"><a id="CACBFHAH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref247"></a><a id="sthref248"></a>removeAttributeNode()</h3>
<p>Removes an attribute from an element. Returns a pointer to the removed attribute or <code>NULL</code></p>
<p class="subhead1"><a id="CPXML2420"></a>Syntax</p>
<pre>Node* removeAttributeNode(
   AttrRef&lt; Node&gt;&amp; oldAttr)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t75">Parameter</th>
<th class="cellalignment1810" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t75" headers="r1c1-t75">
<pre>oldAttr
</pre></td>
<td class="cellalignment1804" headers="r2c1-t75 r1c2-t75">old attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2421"></a>Returns</p>
<p><code>(Node*)</code> the attribute node (old) or <code>NULL</code></p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2422" class="refsect2"><a id="CACHCCHI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref249"></a><a id="sthref250"></a>setAttribute()</h3>
<p>Creates a new attribute for an element with the given name and value (which should be in the data encoding). If the named attribute already exists, its value is simply replaced. The name and value are not verified, converted, or checked. The value is not parsed, so entity references will not be expanded.</p>
<p class="subhead1"><a id="CPXML2423"></a>Syntax</p>
<pre>void setAttribute( 
   oratext* name, 
   oratext* value)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t76">Parameter</th>
<th class="cellalignment1810" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t76" headers="r1c1-t76">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t76 r1c2-t76">names of attribute (data encoding)</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t76" headers="r1c1-t76">
<pre>value
</pre></td>
<td class="cellalignment1804" headers="r3c1-t76 r1c2-t76">value of attribute (data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2424" class="refsect2"><a id="CACFAIHI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref251"></a><a id="sthref252"></a>setAttributeNS()</h3>
<p>Creates a new attribute for an element with the given URI, local name and value (which should be in the data encoding). If the named attribute already exists, its value is simply replaced. The name and value are not verified, converted, or checked. The value is not parsed, so entity references will not be expanded.</p>
<p class="subhead1"><a id="CPXML2425"></a>Syntax</p>
<pre>void setAttributeNS( 
   oratext* namespaceURI,
   oratext* qualifiedName, 
   oratext* value)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t77">Parameter</th>
<th class="cellalignment1810" id="r1c2-t77">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t77" headers="r1c1-t77">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t77 r1c2-t77">namespace URI of attribute (data encoding)</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t77" headers="r1c1-t77">
<pre>qualifiedName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t77 r1c2-t77">qualified name of attribute(data encoding)</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t77" headers="r1c1-t77">
<pre>value
</pre></td>
<td class="cellalignment1804" headers="r4c1-t77 r1c2-t77">value of attribute(data encoding)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2426" class="refsect2"><a id="CACHIJIG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref253"></a><a id="sthref254"></a>setAttributeNode()</h3>
<p>Adds a new attribute to an element. If an attribute with the given name already exists, it is replaced and a pointer to the old attribute returned. If the attribute is new, it is added to the element&#39;s list and a pointer to the new attribute is returned.</p>
<p class="subhead1"><a id="CPXML2427"></a>Syntax</p>
<pre>Node* setAttributeNode( 
   AttrRef&lt; Node&gt;&amp; newAttr)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t78">Parameter</th>
<th class="cellalignment1810" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t78" headers="r1c1-t78">
<pre>newAttr
</pre></td>
<td class="cellalignment1804" headers="r2c1-t78 r1c2-t78">new node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2428"></a>Returns</p>
<p><code>(Node*)</code> the attribute node (old or new)</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2429" class="refsect2"><a id="CACCIEGA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref255"></a><a id="sthref256"></a>~ElementRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2430"></a>Syntax</p>
<pre>~ElementRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEFEEC"></a>
<hr/>
<div id="CPXML01250" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref257"></a>EntityRef Interface</h2>
<p><a href="#CACEGIHA">Table 2-15</a> summarizes the methods available through <code>EntityRef</code> interface.</p>
<div id="CPXML2431" class="tblformal">
<p class="titleintable"><a id="sthref258"></a><a id="CACEGIHA"></a>Table 2-15 Summary of EntityRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of EntityRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t79">Function</th>
<th class="cellalignment1810" id="r1c2-t79">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t79" headers="r1c1-t79">
<p><a href="#CACFDICF">EntityRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t79 r1c2-t79">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t79" headers="r1c1-t79">
<p><a href="#CACCBIFE">getNotationName()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t79 r1c2-t79">
<p>Get entity&#39;s notation.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t79" headers="r1c1-t79">
<p><a href="#CACHEGHD">getPublicId()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t79 r1c2-t79">
<p>Get entity&#39;s public ID.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t79" headers="r1c1-t79">
<p><a href="#CACDCHHF">getSystemId()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t79 r1c2-t79">
<p>Get entity&#39;s system ID.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t79" headers="r1c1-t79">
<p><a href="#CACBEIJH">getType()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t79 r1c2-t79">
<p>Get entity&#39;s type.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t79" headers="r1c1-t79">
<p><a href="#CACHJCGI">~EntityRef()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t79 r1c2-t79">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2432" class="refsect2"><a id="CACFDICF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref259"></a><a id="sthref260"></a>EntityRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t80">Syntax</th>
<th class="cellalignment1810" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t80" headers="r1c1-t80">
<pre>EntityRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t80 r1c2-t80">Used to create references to a given entity node after a call to create <code>Entity</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t80" headers="r1c1-t80">
<pre>EntityRef(
   const EntityRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t80 r1c2-t80">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t81">Parameter</th>
<th class="cellalignment1810" id="r1c2-t81">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t81" headers="r1c1-t81">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t81 r1c2-t81">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t81" headers="r1c1-t81">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t81 r1c2-t81">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2433"></a>Returns</p>
<p><code>(EntityRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2434" class="refsect2"><a id="CACCBIFE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref261"></a><a id="sthref262"></a>getNotationName()</h3>
<p>For unparsed entities, returns the name of its notation (in the data encoding). For parsed entities and other node types, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CPXML2435"></a>Syntax</p>
<pre>oratext* getNotationName() const;
</pre>
<p class="subhead1"><a id="CPXML2436"></a>Returns</p>
<p><code>(oratext*)</code> entity&#39;s notation</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2437" class="refsect2"><a id="CACHEGHD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref263"></a><a id="sthref264"></a>getPublicId()</h3>
<p>Returns an entity&#39;s public identifier (in the data encoding).</p>
<p class="subhead1"><a id="CPXML2438"></a>Syntax</p>
<pre>oratext* getPublicId() const;
</pre>
<p class="subhead1"><a id="CPXML2439"></a>Returns</p>
<p><code>(oratext*)</code> entity&#39;s public identifier</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2440" class="refsect2"><a id="CACDCHHF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref265"></a><a id="sthref266"></a>getSystemId()</h3>
<p>Returns an entity&#39;s system identifier (in the data encoding).</p>
<p class="subhead1"><a id="CPXML2441"></a>Syntax</p>
<pre>oratext* getSystemId() const;
</pre>
<p class="subhead1"><a id="CPXML2442"></a>Returns</p>
<p><code>(oratext*)</code> entity&#39;s system identifier</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2443" class="refsect2"><a id="CACBEIJH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref267"></a><a id="sthref268"></a>getType()</h3>
<p>Returns a boolean for an entity describing whether it is general (<code>TRUE</code>) or parameter (<code>FALSE</code>).</p>
<p class="subhead1"><a id="CPXML2444"></a>Syntax</p>
<pre>boolean getType() const;
</pre>
<p class="subhead1"><a id="CPXML2445"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> for general entity, <code>FALSE</code> for parameter entity</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2446" class="refsect2"><a id="CACHJCGI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref269"></a><a id="sthref270"></a>~EntityRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2447"></a>Syntax</p>
<pre>~EntityRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACJFJIJ"></a>
<hr/>
<div id="CPXML01260" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref271"></a>EntityReferenceRef Interface</h2>
<p><a href="#CACHAGFA">Table 2-16</a> summarizes the methods available through <code>EntityReferenceRef</code> interface.</p>
<div id="CPXML2448" class="tblformal">
<p class="titleintable"><a id="sthref272"></a><a id="CACHAGFA"></a>Table 2-16 Summary of EntityReferenceRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of EntityReferenceRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t82">Function</th>
<th class="cellalignment1810" id="r1c2-t82">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t82" headers="r1c1-t82">
<p><a href="#CACEFDBE">EntityReferenceRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t82 r1c2-t82">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t82" headers="r1c1-t82">
<p><a href="#CACCDEBG">~EntityReferenceRef()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t82 r1c2-t82">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2449" class="refsect2"><a id="CACEFDBE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref273"></a><a id="sthref274"></a>EntityReferenceRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t83">Syntax</th>
<th class="cellalignment1810" id="r1c2-t83">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t83" headers="r1c1-t83">
<pre>EntityReferenceRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t83 r1c2-t83">Used to create references to a given entity reference node after a call to create <code>EntityReference</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t83" headers="r1c1-t83">
<pre>EntityReferenceRef(
   const EntityReferenceRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t83 r1c2-t83">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t84">Parameter</th>
<th class="cellalignment1810" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t84" headers="r1c1-t84">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t84 r1c2-t84">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t84" headers="r1c1-t84">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t84 r1c2-t84">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2450"></a>Returns</p>
<p><code>(EntityReferenceRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2451" class="refsect2"><a id="CACCDEBG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref275"></a><a id="sthref276"></a>~EntityReferenceRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2452"></a>Syntax</p>
<pre>~EntityReferenceRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACFHHEI"></a>
<hr/>
<div id="CPXML01270" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref277"></a>NamedNodeMapRef Interface</h2>
<p><a href="#CACIHEEJ">Table 2-17</a> summarizes the methods available through <code>NamedNodeMapRef</code> interface.</p>
<div id="CPXML2453" class="tblformal">
<p class="titleintable"><a id="sthref278"></a><a id="CACIHEEJ"></a>Table 2-17 Summary of NamedNodeMapRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of NamedNodeMapRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t85">Function</th>
<th class="cellalignment1810" id="r1c2-t85">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t85" headers="r1c1-t85">
<p><a href="#CACIGHAI">NamedNodeMapRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t85 r1c2-t85">
<p>Constructor</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t85" headers="r1c1-t85">
<p><a href="#CACJHBDF">getLength()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t85 r1c2-t85">
<p>Get map&#39;s length</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t85" headers="r1c1-t85">
<p><a href="#CACHBBDG">getNamedItem()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t85 r1c2-t85">
<p>Get item given its name</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t85" headers="r1c1-t85">
<p><a href="#CACFFBHB">getNamedItemNS()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t85 r1c2-t85">
<p>Get item given its namespace URI and local name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t85" headers="r1c1-t85">
<p><a href="#CACDCBJD">item()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t85 r1c2-t85">
<p>Get item given its index.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t85" headers="r1c1-t85">
<p><a href="#CACHGGEE">removeNamedItem()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t85 r1c2-t85">
<p>Remove an item given its name.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t85" headers="r1c1-t85">
<p><a href="#CACECACH">removeNamedItemNS()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t85 r1c2-t85">
<p>Remove the item from the map.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t85" headers="r1c1-t85">
<p><a href="#CACDEICI">setNamedItem()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t85 r1c2-t85">
<p>Add new item to the map.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r10c1-t85" headers="r1c1-t85">
<p><a href="#CACIDBFH">setNamedItemNS()</a></p>
</td>
<td class="cellalignment1804" headers="r10c1-t85 r1c2-t85">
<p>Set named item to the map.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r11c1-t85" headers="r1c1-t85">
<p><a href="#CACJDFEF">~NamedNodeMapRef()</a></p>
</td>
<td class="cellalignment1804" headers="r11c1-t85 r1c2-t85">
<p>Default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2454" class="refsect2"><a id="CACIGHAI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref279"></a><a id="sthref280"></a>NamedNodeMapRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t86">Syntax</th>
<th class="cellalignment1810" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t86" headers="r1c1-t86">
<pre>NamedNodeMapRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   NamedNodeMap&lt; Node&gt;* mptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t86 r1c2-t86">Used to create references to a given <code>NamedNodeMap</code> node.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t86" headers="r1c1-t86">
<pre>NamedNodeMapRef(
   const NamedNodeMapRef&lt; Node&gt;&amp; mref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t86 r1c2-t86">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t87">Parameter</th>
<th class="cellalignment1810" id="r1c2-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t87" headers="r1c1-t87">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t87 r1c2-t87">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t87" headers="r1c1-t87">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t87 r1c2-t87">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2455"></a>Returns</p>
<p><code>(NamedNodeMapRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2456" class="refsect2"><a id="CACJHBDF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref281"></a><a id="sthref282"></a>getLength()</h3>
<p>Get the length of the map.</p>
<p class="subhead1"><a id="CPXML2457"></a>Syntax</p>
<pre>ub4 getLength() const;
</pre>
<p class="subhead1"><a id="CPXML2458"></a>Returns</p>
<p><code>(ub4)</code> map&#39;s length</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2459" class="refsect2"><a id="CACHBBDG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref283"></a><a id="sthref284"></a>getNamedItem()</h3>
<p>Get the name of the item, given its name.</p>
<p class="subhead1"><a id="CPXML2460"></a>Syntax</p>
<pre>Node* getNamedItem( oratext* name) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t88">Parameter</th>
<th class="cellalignment1810" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t88" headers="r1c1-t88">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t88 r1c2-t88">name of item</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2461"></a>Returns</p>
<p><code>(Node*)</code> pointer to the item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2462" class="refsect2"><a id="CACFFBHB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref285"></a><a id="sthref286"></a>getNamedItemNS()</h3>
<p>Get the name of the item, given its namespace URI and local name.</p>
<p class="subhead1"><a id="CPXML2463"></a>Syntax</p>
<pre>Node* getNamedItemNS( 
   oratext* namespaceURI,
   oratext* localName) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t89">Parameter</th>
<th class="cellalignment1810" id="r1c2-t89">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t89" headers="r1c1-t89">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t89 r1c2-t89">namespace URI of item</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t89" headers="r1c1-t89">
<pre>localName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t89 r1c2-t89">local name of item</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2464"></a>Returns</p>
<p><code>(Node*)</code> pointer to the item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2465" class="refsect2"><a id="CACDCBJD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref287"></a><a id="sthref288"></a>item()</h3>
<p>Get item, given its index.</p>
<p class="subhead1"><a id="CPXML2466"></a>Syntax</p>
<pre>Node* item( 
   ub4 index) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t90">Parameter</th>
<th class="cellalignment1810" id="r1c2-t90">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t90" headers="r1c1-t90">
<pre>index
</pre></td>
<td class="cellalignment1804" headers="r2c1-t90 r1c2-t90">index of item</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2467"></a>Returns</p>
<p><code>(Node*)</code> pointer to the item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2468" class="refsect2"><a id="CACHGGEE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref289"></a><a id="sthref290"></a>removeNamedItem()</h3>
<p>Remove the item from the map, given its name.</p>
<p class="subhead1"><a id="CPXML2469"></a>Syntax</p>
<pre>Node* removeNamedItem( 
   oratext* name) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t91">Parameter</th>
<th class="cellalignment1810" id="r1c2-t91">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t91" headers="r1c1-t91">
<pre>name
</pre></td>
<td class="cellalignment1804" headers="r2c1-t91 r1c2-t91">name of item</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2470"></a>Returns</p>
<p><code>(Node*)</code> pointer to the removed item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2471" class="refsect2"><a id="CACECACH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref291"></a><a id="sthref292"></a>removeNamedItemNS()</h3>
<p>Remove the item from the map, given its namespace URI and local name.</p>
<p class="subhead1"><a id="CPXML2472"></a>Syntax</p>
<pre>Node* removeNamedItemNS( 
   oratext* namespaceURI,
   oratext* localName)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t92">Parameter</th>
<th class="cellalignment1810" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t92" headers="r1c1-t92">
<pre>namespaceURI
</pre></td>
<td class="cellalignment1804" headers="r2c1-t92 r1c2-t92">namespace URI of item</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t92" headers="r1c1-t92">
<pre>localName
</pre></td>
<td class="cellalignment1804" headers="r3c1-t92 r1c2-t92">local name of item</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2473"></a>Returns</p>
<p><code>(Node*)</code> pointer to the removed item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2474" class="refsect2"><a id="CACDEICI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref293"></a><a id="sthref294"></a>setNamedItem()</h3>
<p>Add new item to the map.</p>
<p class="subhead1"><a id="CPXML2475"></a>Syntax</p>
<pre>Node* setNamedItem(
   NodeRef&lt; Node&gt;&amp; newItem)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t93">Parameter</th>
<th class="cellalignment1810" id="r1c2-t93">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t93" headers="r1c1-t93">
<pre>newItem
</pre></td>
<td class="cellalignment1804" headers="r2c1-t93 r1c2-t93">item set to the map</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2476"></a>Returns</p>
<p><code>(Node*)</code> pointer to new item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2477" class="refsect2"><a id="CACIDBFH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref295"></a><a id="sthref296"></a>setNamedItemNS()</h3>
<p>Set named item, which is namespace aware, to the map.</p>
<p class="subhead1"><a id="CPXML2478"></a>Syntax</p>
<pre>Node* setNamedItemNS(
   NodeRef&lt; Node&gt;&amp; newItem)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t94">Parameter</th>
<th class="cellalignment1810" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t94" headers="r1c1-t94">
<pre>newItem
</pre></td>
<td class="cellalignment1804" headers="r2c1-t94 r1c2-t94">item set to the map</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2479"></a>Returns</p>
<p><code>(Node*)</code> pointer to the item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2480" class="refsect2"><a id="CACJDFEF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref297"></a><a id="sthref298"></a>~NamedNodeMapRef()</h3>
<p>Default destructor.</p>
<p class="subhead1"><a id="CPXML2481"></a>Syntax</p>
<pre>~NamedNodeMapRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACJHHEJ"></a>
<hr/>
<div id="CPXML01271" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref299"></a>NodeFilter Interface</h2>
<p><a href="#CEGJHEIA">Table 2-18</a> summarizes the methods available through NodeFilter interface.</p>
<div id="CPXML2482" class="tblformal">
<p class="titleintable"><a id="sthref300"></a><a id="CEGJHEIA"></a>Table 2-18 Summary of NodeFilter Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of NodeFilter Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t95">Function</th>
<th class="cellalignment1810" id="r1c2-t95">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t95" headers="r1c1-t95">
<p><a href="#CACGACEJ">acceptNode()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t95 r1c2-t95">
<p>Execute it for a given node and use its return value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2483" class="refsect2"><a id="CACGACEJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref301"></a><a id="sthref302"></a>acceptNode()</h3>
<p>This function is used as a test by NodeIterator and <code>TreeWalker</code>.</p>
<p class="subhead1"><a id="CPXML2484"></a>Syntax</p>
<pre>template&lt; typename Node&gt; AcceptNodeCode AcceptNode(
   NodeRef&lt; Node&gt;&amp; nref);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t96">Parameter</th>
<th class="cellalignment1810" id="r1c2-t96">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t96" headers="r1c1-t96">
<pre>nref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t96 r1c2-t96">reference to the node to be tested.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2485"></a>Returns</p>
<p><code>(AcceptNodeCode)</code> result returned by the filter function</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACBADBJ"></a>
<hr/>
<div id="CPXML01290" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref303"></a>NodeIterator Interface</h2>
<p><a href="#CACCJCDF">Table 2-19</a> summarizes the methods available through <code>NodeIterator</code> interface.</p>
<div id="CPXML2486" class="tblformal">
<p class="titleintable"><a id="sthref304"></a><a id="CACCJCDF"></a>Table 2-19 Summary of NodeIterator Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of NodeIterator Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t97">Function</th>
<th class="cellalignment1810" id="r1c2-t97">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t97" headers="r1c1-t97">
<p><a href="#CACHJGHH">adjustCtx()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t97 r1c2-t97">
<p>Attach this iterator to the another context.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t97" headers="r1c1-t97">
<p><a href="#CACEAJJC">detach()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t97 r1c2-t97">
<p>Invalidate the iterator.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t97" headers="r1c1-t97">
<p><a href="#CACJFDED">nextNode()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t97 r1c2-t97">
<p>Go to the next node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t97" headers="r1c1-t97">
<p><a href="#CACHAEJG">previousNode()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t97 r1c2-t97">
<p>Go to the previous node.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2487" class="refsect2"><a id="CACHJGHH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref305"></a><a id="sthref306"></a>adjustCtx()</h3>
<p>Attaches this iterator to the context associated with a given node reference</p>
<p class="subhead1"><a id="CPXML2488"></a>Syntax</p>
<pre>void adjustCtx( 
   NodeRef&lt; Node&gt;&amp; nref);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t98">Parameter</th>
<th class="cellalignment1810" id="r1c2-t98">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t98" headers="r1c1-t98">
<pre>nref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t98 r1c2-t98">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2489" class="refsect2"><a id="CACEAJJC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref307"></a><a id="sthref308"></a>detach()</h3>
<p>Invalidates the iterator.</p>
<p class="subhead1"><a id="CPXML2490"></a>Syntax</p>
<pre>void detach();
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2491" class="refsect2"><a id="CACJFDED"></a>
<hr/>
<h3 class="refsect2"><a id="sthref309"></a><a id="sthref310"></a>nextNode()</h3>
<p>Go to the next node.</p>
<p class="subhead1"><a id="CPXML2492"></a>Syntax</p>
<pre>Node* nextNode() throw (DOMException);
</pre>
<p class="subhead1"><a id="CPXML2493"></a>Returns</p>
<p><code>(Node*)</code> pointer to the next node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2494" class="refsect2"><a id="CACHAEJG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref311"></a><a id="sthref312"></a>previousNode()</h3>
<p>Go to the previous node.</p>
<p class="subhead1"><a id="CPXML2495"></a>Syntax</p>
<pre>Node* previousNode() throw (DOMException);
</pre>
<p class="subhead1"><a id="CPXML2496"></a>Returns</p>
<p><code>(Node*)</code> pointer to the previous node</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEBFHB"></a>
<hr/>
<div id="CPXML01300" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref313"></a>NodeListRef Interface</h2>
<p><a href="#CEGCGJGF">Table 2-20</a> summarizes the methods available through NodeListRef interface.</p>
<div id="CPXML2497" class="tblformal">
<p class="titleintable"><a id="sthref314"></a><a id="CEGCGJGF"></a>Table 2-20 Summary of NodeListRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of NodeListRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t99">Function</th>
<th class="cellalignment1810" id="r1c2-t99">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t99" headers="r1c1-t99">
<p><a href="#CACIDDEC">NodeListRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t99 r1c2-t99">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t99" headers="r1c1-t99">
<p><a href="#CACHHAFH">getLength()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t99 r1c2-t99">
<p>Get list&#39;s length.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t99" headers="r1c1-t99">
<p><a href="#CACDHEIH">item()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t99 r1c2-t99">
<p>Get item given its index.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t99" headers="r1c1-t99">
<p><a href="#CACGAGGE">~NodeListRef()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t99 r1c2-t99">
<p>Default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2498" class="refsect2"><a id="CACIDDEC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref315"></a><a id="sthref316"></a>NodeListRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t100">Syntax</th>
<th class="cellalignment1810" id="r1c2-t100">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t100" headers="r1c1-t100">
<pre>NodeListRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   NodeList&lt; Node&gt;* lptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t100 r1c2-t100">Used to create references to a given <code>NodeList</code> node.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t100" headers="r1c1-t100">
<pre>NodeListRef(
   const NodeListRef&lt; Node&gt;&amp; lref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t100 r1c2-t100">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t101">Parameter</th>
<th class="cellalignment1810" id="r1c2-t101">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t101" headers="r1c1-t101">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t101 r1c2-t101">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t101" headers="r1c1-t101">
<pre>lptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t101 r1c2-t101">referenced list</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2499"></a>Returns</p>
<p><code>(NodeListRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2500" class="refsect2"><a id="CACHHAFH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref317"></a><a id="sthref318"></a>getLength()</h3>
<p>Get the length of the list.</p>
<p class="subhead1"><a id="CPXML2501"></a>Syntax</p>
<pre>ub4 getLength() const;
</pre>
<p class="subhead1"><a id="CPXML2502"></a>Returns</p>
<p><code>(ub4)</code> list&#39;s length</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2503" class="refsect2"><a id="CACDHEIH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref319"></a><a id="sthref320"></a>item()</h3>
<p>Get the item, given its index.</p>
<p class="subhead1"><a id="CPXML2504"></a>Syntax</p>
<pre>Node* item( 
   ub4 index) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t102">Parameter</th>
<th class="cellalignment1810" id="r1c2-t102">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t102" headers="r1c1-t102">
<pre>index
</pre></td>
<td class="cellalignment1804" headers="r2c1-t102 r1c2-t102">index of item</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2505"></a>Returns</p>
<p><code>(Node*)</code> pointer to the item</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2506" class="refsect2"><a id="CACGAGGE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref321"></a><a id="sthref322"></a>~NodeListRef()</h3>
<p>Destructs the object.</p>
<p class="subhead1"><a id="CPXML2507"></a>Syntax</p>
<pre>~NodeListRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEDAEE"></a>
<hr/>
<div id="CPXML01310" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref323"></a>NodeRef Interface</h2>
<p><a href="#CEGCJDBI">Table 2-21</a> summarizes the methods available through <code>NodeRef</code> interface.</p>
<div id="CPXML2508" class="tblformal">
<p class="titleintable"><a id="sthref324"></a><a id="CEGCJDBI"></a>Table 2-21 Summary of NodeRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of NodeRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t103">Function</th>
<th class="cellalignment1810" id="r1c2-t103">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t103" headers="r1c1-t103">
<p><a href="#CACHHFGE">NodeRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t103 r1c2-t103">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t103" headers="r1c1-t103">
<p><a href="#CACEDHJJ">appendChild()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t103 r1c2-t103">
<p>Append new child to node&#39;s list of children.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t103" headers="r1c1-t103">
<p><a href="#CACGCDFB">cloneNode()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t103 r1c2-t103">
<p>Clone this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t103" headers="r1c1-t103">
<p><a href="#CACHEAGF">getAttributes()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t103 r1c2-t103">
<p>Get attributes of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t103" headers="r1c1-t103">
<p><a href="#CACBDJCC">getChildNodes()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t103 r1c2-t103">
<p>Get children of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t103" headers="r1c1-t103">
<p><a href="#CACHGFFA">getFirstChild()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t103 r1c2-t103">
<p>Get the first child node of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t103" headers="r1c1-t103">
<p><a href="#CACHJDIJ">getLastChild()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t103 r1c2-t103">
<p>Get the last child node of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t103" headers="r1c1-t103">
<p><a href="#CACHGIIA">getLocalName()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t103 r1c2-t103">
<p>Get local name of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r10c1-t103" headers="r1c1-t103">
<p><a href="#CACGEJBG">getNamespaceURI()</a></p>
</td>
<td class="cellalignment1804" headers="r10c1-t103 r1c2-t103">
<p>Get namespace URI of this node as a <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r11c1-t103" headers="r1c1-t103">
<p><a href="#CACGFFAH">getNextSibling()</a></p>
</td>
<td class="cellalignment1804" headers="r11c1-t103 r1c2-t103">
<p>Get the next sibling node of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r12c1-t103" headers="r1c1-t103">
<p><a href="#CACJHDCF">getNoMod()</a></p>
</td>
<td class="cellalignment1804" headers="r12c1-t103 r1c2-t103">
<p>Tests if no modifications are allowed for this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r13c1-t103" headers="r1c1-t103">
<p><a href="#CACEAJGJ">getNodeName()</a></p>
</td>
<td class="cellalignment1804" headers="r13c1-t103 r1c2-t103">
<p>Get node&#39;s name as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r14c1-t103" headers="r1c1-t103">
<p><a href="#CACIJDAF">getNodeType()</a></p>
</td>
<td class="cellalignment1804" headers="r14c1-t103 r1c2-t103">
<p>Get DOMNodeType of the node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r15c1-t103" headers="r1c1-t103">
<p><a href="#CACCIAEJ">getNodeValue()</a></p>
</td>
<td class="cellalignment1804" headers="r15c1-t103 r1c2-t103">
<p>Get node&#39;s value as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r16c1-t103" headers="r1c1-t103">
<p><a href="#CACGDIFI">getOwnerDocument()</a></p>
</td>
<td class="cellalignment1804" headers="r16c1-t103 r1c2-t103">
<p>Get the owner document of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r17c1-t103" headers="r1c1-t103">
<p><a href="#CACGJEDH">getParentNode()</a></p>
</td>
<td class="cellalignment1804" headers="r17c1-t103 r1c2-t103">
<p>Get parent node of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r18c1-t103" headers="r1c1-t103">
<p><a href="#CACHFDBD">getPrefix()</a></p>
</td>
<td class="cellalignment1804" headers="r18c1-t103 r1c2-t103">
<p>Get namespace prefix of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r19c1-t103" headers="r1c1-t103">
<p><a href="#CACIIJEA">getPreviousSibling()</a></p>
</td>
<td class="cellalignment1804" headers="r19c1-t103 r1c2-t103">
<p>Get the previous sibling node of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r20c1-t103" headers="r1c1-t103">
<p><a href="#CACHEJDG">hasAttributes()</a></p>
</td>
<td class="cellalignment1804" headers="r20c1-t103 r1c2-t103">
<p>Tests if this node has attributes.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r21c1-t103" headers="r1c1-t103">
<p><a href="#CACDJDEF">hasChildNodes()</a></p>
</td>
<td class="cellalignment1804" headers="r21c1-t103 r1c2-t103">
<p>Test if this node has children.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r22c1-t103" headers="r1c1-t103">
<p><a href="#CACCCDDH">insertBefore()</a></p>
</td>
<td class="cellalignment1804" headers="r22c1-t103 r1c2-t103">
<p>Insert new child into node&#39;s list of children.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r23c1-t103" headers="r1c1-t103">
<p><a href="#CACEFAGH">isSupported()</a></p>
</td>
<td class="cellalignment1804" headers="r23c1-t103 r1c2-t103">
<p>Tests if specified feature is supported by the implementation.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r24c1-t103" headers="r1c1-t103">
<p><a href="#CACHFHDH">markToDelete()</a></p>
</td>
<td class="cellalignment1804" headers="r24c1-t103 r1c2-t103">
<p>Sets the mark to delete the referenced node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r25c1-t103" headers="r1c1-t103">
<p><a href="#CACCCFBA">normalize()</a></p>
</td>
<td class="cellalignment1804" headers="r25c1-t103 r1c2-t103">
<p>Merge adjacent text nodes.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r26c1-t103" headers="r1c1-t103">
<p><a href="#CACBDACG">removeChild()</a></p>
</td>
<td class="cellalignment1804" headers="r26c1-t103 r1c2-t103">
<p>Remove an existing child node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r27c1-t103" headers="r1c1-t103">
<p><a href="#CACBGDJD">replaceChild()</a></p>
</td>
<td class="cellalignment1804" headers="r27c1-t103 r1c2-t103">
<p>Replace an existing child of a node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r28c1-t103" headers="r1c1-t103">
<p><a href="#CACCFHBG">resetNode()</a></p>
</td>
<td class="cellalignment1804" headers="r28c1-t103 r1c2-t103">
<p>Reset NodeRef to reference another node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r29c1-t103" headers="r1c1-t103">
<p><a href="#CACCICDC">setNodeValue()</a></p>
</td>
<td class="cellalignment1804" headers="r29c1-t103 r1c2-t103">
<p>Set node&#39;s value as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r30c1-t103" headers="r1c1-t103">
<p><a href="#CACHHJHG">setPrefix()</a></p>
</td>
<td class="cellalignment1804" headers="r30c1-t103 r1c2-t103">
<p>Set namespace prefix of this node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r31c1-t103" headers="r1c1-t103">
<p><a href="#CACDGCHJ">~NodeRef()</a></p>
</td>
<td class="cellalignment1804" headers="r31c1-t103 r1c2-t103">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2509" class="refsect2"><a id="CACHHFGE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref325"></a><a id="sthref326"></a>NodeRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t104">Syntax</th>
<th class="cellalignment1810" id="r1c2-t104">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t104" headers="r1c1-t104">
<pre>NodeRef(
   const NodeRef&lt; Node&gt;&amp; nref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t104 r1c2-t104">Used to create references to a given node when at least one reference to this node or another node is already available. The node deletion flag is not copied and is set to <code>FALSE</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t104" headers="r1c1-t104">
<pre>NodeRef(
   const NodeRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t104 r1c2-t104">Copy constructor. Used to create additional references to the node when at least one reference is already available. The node deletion flag is not copied and is set to <code>FALSE</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t105">Parameter</th>
<th class="cellalignment1810" id="r1c2-t105">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t105" headers="r1c1-t105">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t105 r1c2-t105">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t105" headers="r1c1-t105">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t105 r1c2-t105">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2510"></a>Returns</p>
<p><code>(NodeRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2511" class="refsect2"><a id="CACEDHJJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref327"></a><a id="sthref328"></a><a id="sthref329"></a>appendChild()</h3>
<p>Appends the node to the end of this node&#39;s list of children and returns the new node. If <code>newChild</code> is a <code>DocumentFragment</code>, all of its children are appended in original order; the <code>DocumentFragment</code> node itself is not. If <code>newChild</code> is already in the DOM tree, it is first removed from its current position.</p>
<p class="subhead1"><a id="CPXML2512"></a>Syntax</p>
<pre>Node* appendChild( 
   NodeRef&amp; newChild) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t106">Parameter</th>
<th class="cellalignment1810" id="r1c2-t106">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t106" headers="r1c1-t106">
<pre>newChild
</pre></td>
<td class="cellalignment1804" headers="r2c1-t106 r1c2-t106">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2513"></a>Returns</p>
<p><code>(Node*)</code> the node appended</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2514" class="refsect2"><a id="CACGCDFB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref330"></a><a id="sthref331"></a><a id="sthref332"></a>cloneNode()</h3>
<p>Creates and returns a duplicate of this node. The duplicate node has no parent. Cloning an Element copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes, but it does not copy any text it contains unless it is a deep clone, since the text is contained in a child <code>Text</code> node. Cloning any other type of node simply returns a copy of the node. If deep is <code>TRUE</code>, all children of the node are recursively cloned, and the cloned node will have cloned children; a non-deep clone will have no children. If the cloned node is not inserted into another tree or fragment, it probably should be marked, through its reference, for deletion (by the user).</p>
<p class="subhead1"><a id="CPXML2515"></a>Syntax</p>
<pre>Node* cloneNode( 
   boolean deep);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t107">Parameter</th>
<th class="cellalignment1810" id="r1c2-t107">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t107" headers="r1c1-t107">
<pre>deep
</pre></td>
<td class="cellalignment1804" headers="r2c1-t107 r1c2-t107">whether to clone the entire node hierarchy beneath the node (<code>TRUE</code>), or just the node itself (<code>FALSE</code>)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2516"></a>Returns</p>
<p><code>(Node*)</code> duplicate (cloned) node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2517" class="refsect2"><a id="CACHEAGF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref333"></a><a id="sthref334"></a><a id="sthref335"></a>getAttributes()</h3>
<p>Returns <code>NamedNodeMap</code> of attributes of this node, or <code>NULL</code> if it has no attributes. Only element nodes can have attribute nodes. For other node kinds, <code>NULL</code> is always returned. In the current implementation, the node map of child nodes is live; all changes in the original node are reflected immediately. Because of this, side effects can be present for some DOM tree manipulation styles, in particular, in multithreaded environments.</p>
<p class="subhead1"><a id="CPXML2518"></a>Syntax</p>
<pre>NamedNodeMap&lt; Node&gt;* getAttributes() const;
</pre>
<p class="subhead1"><a id="CPXML2519"></a>Returns</p>
<p><code>(NamedNodeMap*)</code> <code>NamedNodeMap</code> of attributes</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2520" class="refsect2"><a id="CACBDJCC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref336"></a><a id="sthref337"></a>getChildNodes()</h3>
<p>Returns the list of child nodes, or <code>NULL</code> if this node has no children. Only Element, Document, DTD, and DocumentFragment nodes may have children; all other types will return <code>NULL</code>. In the current implementation, the list of child nodes is live; all changes in the original node are reflected immediately. Because of this, side effects can be present for some DOM tree manipulation styles, in particular, in multithreaded environments.</p>
<p class="subhead1"><a id="CPXML2521"></a>Syntax</p>
<pre>NodeList&lt; Node&gt;* getChildNodes() const;
</pre>
<p class="subhead1"><a id="CPXML2522"></a>Returns</p>
<p><code>(NodeList*)</code> the list of child nodes</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2523" class="refsect2"><a id="CACHGFFA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref338"></a><a id="sthref339"></a>getFirstChild()</h3>
<p>Returns the first child node, or <code>NULL</code>, if this node has no children</p>
<p class="subhead1"><a id="CPXML2524"></a>Syntax</p>
<pre>Node* getFirstChild() const;
</pre>
<p class="subhead1"><a id="CPXML2525"></a>Returns</p>
<p><code>(Node*)</code> the first child node, or <code>NULL</code></p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2526" class="refsect2"><a id="CACHJDIJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref340"></a><a id="sthref341"></a>getLastChild()</h3>
<p>Returns the last child node, or <code>NULL</code>, if this node has no children</p>
<p class="subhead1"><a id="CPXML2527"></a>Syntax</p>
<pre>Node* getLastChild() const;
</pre>
<p class="subhead1"><a id="CPXML2528"></a>Returns</p>
<p><code>(Node*)</code> the last child node, or <code>NULL</code></p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2529" class="refsect2"><a id="CACHGIIA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref342"></a>getLocalName()</h3>
<p>Returns local name (local part of the qualified name) of this node (in the data encoding) as a <code>NULL</code>-terminated string. If this node&#39;s name is not fully qualified (has no prefix), then the local name is the same as the name.</p>
<p class="subhead1"><a id="CPXML2530"></a>Syntax</p>
<pre>oratext* getLocalName() const;
</pre>
<p class="subhead1"><a id="CPXML2531"></a>Returns</p>
<p><code>(oratext*)</code> local name of this node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2532" class="refsect2"><a id="CACGEJBG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref343"></a><a id="sthref344"></a>getNamespaceURI()</h3>
<p>Returns the namespace URI of this node (in the data encoding) as a <code>NULL</code>-terminated string. If the node&#39;s name is not qualified (does not contain a namespace prefix), it will have the default namespace in effect when the node was created (which may be <code>NULL</code>).</p>
<p class="subhead1"><a id="CPXML2533"></a>Syntax</p>
<pre>oratext* getNamespaceURI() const;
</pre>
<p class="subhead1"><a id="CPXML2534"></a>Returns</p>
<p><code>(oratext*)</code> namespace URI of this node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2535" class="refsect2"><a id="CACGFFAH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref345"></a><a id="sthref346"></a>getNextSibling()</h3>
<p>Returns the next sibling node, or <code>NULL</code>, if this node has no next sibling</p>
<p class="subhead1"><a id="CPXML2536"></a>Syntax</p>
<pre>Node* getNextSibling() const;
</pre>
<p class="subhead1"><a id="CPXML2537"></a>Returns</p>
<p><code>(Node*)</code> the next sibling node, or <code>NULL</code></p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2538" class="refsect2"><a id="CACJHDCF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref347"></a><a id="sthref348"></a>getNoMod()</h3>
<p>Tests if no modifications are allowed for this node and the DOM tree it belongs to. This member function is Oracle extension.</p>
<p class="subhead1"><a id="CPXML2539"></a>Syntax</p>
<pre>boolean getNoMod() const;
</pre>
<p class="subhead1"><a id="CPXML2540"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if no modifications are allowed</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2541" class="refsect2"><a id="CACEAJGJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref349"></a><a id="sthref350"></a>getNodeName()</h3>
<p>Returns the (fully-qualified) name of the node (in the data encoding) as a <code>NULL</code>-terminated string, for example &#34;bar\0&#34; or &#34;foo:bar\0&#34;. Some node kinds have fixed names: &#34;<code>#text</code>&#34;, &#34;<code>#cdata-section</code>&#34;, &#34;<code>#comment</code>&#34;, &#34;<code>#document</code>&#34;, &#34;<code>#document-fragment</code>&#34;. The name of a node cannot changed once it is created.</p>
<p class="subhead1"><a id="CPXML2542"></a>Syntax</p>
<pre>oratext* getNodeName() const;
</pre>
<p class="subhead1"><a id="CPXML2543"></a>Returns</p>
<p><code>(oratext*)</code> name of node in data encoding</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2544" class="refsect2"><a id="CACIJDAF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref351"></a><a id="sthref352"></a>getNodeType()</h3>
<p>Returns DOMNodeType of the node</p>
<p class="subhead1"><a id="CPXML2545"></a>Syntax</p>
<pre>DOMNodeType getNodeType() const;
</pre>
<p class="subhead1"><a id="CPXML2546"></a>Returns</p>
<p><code>(DOMNodeType)</code> of the node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2547" class="refsect2"><a id="CACCIAEJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref353"></a><a id="sthref354"></a>getNodeValue()</h3>
<p>Returns the &#34;value&#34; (associated character data) for a node as a <code>NULL</code>-terminated string. Character and general entities will have been replaced. Only <code>Attr</code>, <code>CDATA</code>, <code>Comment</code>, <code>ProcessingInstruction</code> and <code>Text</code> nodes have values, all other node types have <code>NULL</code> value.</p>
<p class="subhead1"><a id="CPXML2548"></a>Syntax</p>
<pre>oratext* getNodeValue() const;
</pre>
<p class="subhead1"><a id="CPXML2549"></a>Returns</p>
<p><code>(oratext *)</code> value of node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2550" class="refsect2"><a id="CACGDIFI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref355"></a><a id="sthref356"></a>getOwnerDocument()</h3>
<p>Returns the document node associated with this node. It is assumed that the document node type is derived from the node type. Each node may belong to only one document, or may not be associated with any document at all, such as immediately after it was created on user&#39;s request. The &#34;owning&#34; document [node] is returned, or the WRONG_DOCUMENT_ERR exception is thrown.</p>
<p class="subhead1"><a id="CPXML2551"></a>Syntax</p>
<pre>Node* getOwnerDocument() const throw (DOMException);
</pre>
<p class="subhead1"><a id="CPXML2552"></a>Returns</p>
<p><code>(Node*)</code> the owning document node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2553" class="refsect2"><a id="CACGJEDH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref357"></a><a id="sthref358"></a>getParentNode()</h3>
<p>Returns the parent node, or <code>NULL</code>, if this node has no parent</p>
<p class="subhead1"><a id="CPXML2554"></a>Syntax</p>
<pre>Node* getParentNode() const;
</pre>
<p class="subhead1"><a id="CPXML2555"></a>Returns</p>
<p><code>(Node*)</code> the parent node, or <code>NULL</code></p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2556" class="refsect2"><a id="CACHFDBD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref359"></a><a id="sthref360"></a>getPrefix()</h3>
<p>Returns the namespace prefix of this node (in the data encoding) (as a <code>NULL</code>-terminated string). If this node&#39;s name is not fully qualified (has no prefix), <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CPXML2557"></a>Syntax</p>
<pre>oratext* getPrefix() const;
</pre>
<p class="subhead1"><a id="CPXML2558"></a>Returns</p>
<p><code>(oratext*)</code> namespace prefix of this node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2559" class="refsect2"><a id="CACIIJEA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref361"></a><a id="sthref362"></a>getPreviousSibling()</h3>
<p>Returns the previous sibling node, or <code>NULL</code>, if this node has no previous siblings</p>
<p class="subhead1"><a id="CPXML2560"></a>Syntax</p>
<pre>Node* getPreviousSibling() const;
</pre>
<p class="subhead1"><a id="CPXML2561"></a>Returns</p>
<p><code>(Node*)</code> the previous sibling node, or <code>NULL</code></p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2562" class="refsect2"><a id="CACHEJDG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref363"></a><a id="sthref364"></a>hasAttributes()</h3>
<p>Returns <code>TRUE</code> if this node has attributes, if it is an element. Otherwise, it returns <code>FALSE</code>. Note that for nodes that are not elements, it always returns <code>FALSE</code>.</p>
<p class="subhead1"><a id="CPXML2563"></a>Syntax</p>
<pre>boolean hasAttributes() const;
</pre>
<p class="subhead1"><a id="CPXML2564"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> is this node is an element and has attributes</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2565" class="refsect2"><a id="CACDJDEF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref365"></a><a id="sthref366"></a>hasChildNodes()</h3>
<p>Tests if this node has children. Only <code>Element</code>, <code>Document</code>, <code>DTD</code>, and <code>DocumentFragment</code> nodes may have children.</p>
<p class="subhead1"><a id="CPXML2566"></a>Syntax</p>
<pre>boolean hasChildNodes() const;
</pre>
<p class="subhead1"><a id="CPXML2567"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if this node has any children</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2568" class="refsect2"><a id="CACCCDDH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref367"></a><a id="sthref368"></a>insertBefore()</h3>
<p>Inserts the node <code>newChild</code> before the existing child node <code>refChild</code> in this node. <code>refChild</code> must be a child of this node. If <code>newChild</code> is a <code>DocumentFragment</code>, all of its children are inserted (in the same order) before <code>refChild</code>; the <code>DocumentFragment</code> node itself is not. If <code>newChild</code> is already in the DOM tree, it is first removed from its current position.</p>
<p class="subhead1"><a id="CPXML2569"></a>Syntax</p>
<pre>Node* insertBefore( 
   NodeRef&amp; newChild, 
   NodeRef&amp; refChild)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t108">Parameter</th>
<th class="cellalignment1810" id="r1c2-t108">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t108" headers="r1c1-t108">
<pre>newChild
</pre></td>
<td class="cellalignment1804" headers="r2c1-t108 r1c2-t108">new node</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t108" headers="r1c1-t108">
<pre>refChild
</pre></td>
<td class="cellalignment1804" headers="r3c1-t108 r1c2-t108">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2570"></a>Returns</p>
<p><code>(Node*)</code> the node being inserted</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2571" class="refsect2"><a id="CACEFAGH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref369"></a><a id="sthref370"></a>isSupported()</h3>
<p>Tests if the feature, specified by the arguments, is supported by the DOM implementation of this node.</p>
<p class="subhead1"><a id="CPXML2572"></a>Syntax</p>
<pre>boolean isSupported( 
   oratext* feature, 
   oratext* version) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t109">Parameter</th>
<th class="cellalignment1810" id="r1c2-t109">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t109" headers="r1c1-t109">
<pre>feature
</pre></td>
<td class="cellalignment1804" headers="r2c1-t109 r1c2-t109">package name of feature</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t109" headers="r1c1-t109">
<pre>version
</pre></td>
<td class="cellalignment1804" headers="r3c1-t109 r1c2-t109">version of package</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2573"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> is specified feature is supported</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2574" class="refsect2"><a id="CACHFHDH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref371"></a><a id="sthref372"></a>markToDelete()</h3>
<p>Sets the mark indicating that the referenced node should be deleted at the time when destructor of this reference is called. All other references to the node become invalid. This behavior is inherited by all other reference classes. This member function is Oracle extension.</p>
<p class="subhead1"><a id="CPXML2575"></a>Syntax</p>
<pre>void markToDelete();
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2576" class="refsect2"><a id="CACCCFBA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref373"></a><a id="sthref374"></a>normalize()</h3>
<p>&#34;Normalizes&#34; the subtree rooted at an element, merges adjacent <code>Text</code> nodes children of elements. Note that adjacent <code>Text</code> nodes will never be created during a normal parse, only after manipulation of the document with DOM calls.</p>
<p class="subhead1"><a id="CPXML2577"></a>Syntax</p>
<pre>void normalize();
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2578" class="refsect2"><a id="CACBDACG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref375"></a><a id="sthref376"></a>removeChild()</h3>
<p>Removes the node from this node&#39;s list of children and returns it. The node is orphaned; its parent will be <code>NULL</code> after removal.</p>
<p class="subhead1"><a id="CPXML2579"></a>Syntax</p>
<pre>Node* removeChild( 
   NodeRef&amp; oldChild) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t110">Parameter</th>
<th class="cellalignment1810" id="r1c2-t110">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t110" headers="r1c1-t110">
<pre>oldChild
</pre></td>
<td class="cellalignment1804" headers="r2c1-t110 r1c2-t110">old node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2580"></a>Returns</p>
<p><code>(Node*)</code> node removed</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2581" class="refsect2"><a id="CACBGDJD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref377"></a><a id="sthref378"></a>replaceChild()</h3>
<p>Replaces the child node <code>oldChild</code> with the new node <code>newChild</code> in this node&#39;s children list, and returns <code>oldChild</code> (which is now orphaned, with a <code>NULL</code> parent). If <code>newChild</code> is a <code>DocumentFragment</code>, all of its children are inserted in place of <code>oldChild</code>; the <code>DocumentFragment</code> node itself is not. If <code>newChild</code> is already in the DOM tree, it is first removed from its current position.</p>
<p class="subhead1"><a id="CPXML2582"></a>Syntax</p>
<pre>Node* replaceChild( 
   NodeRef&amp; newChild, 
   NodeRef&amp; oldChild)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t111">Parameter</th>
<th class="cellalignment1810" id="r1c2-t111">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t111" headers="r1c1-t111">
<pre>newChild
</pre></td>
<td class="cellalignment1804" headers="r2c1-t111 r1c2-t111">new node</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t111" headers="r1c1-t111">
<pre>oldChild
</pre></td>
<td class="cellalignment1804" headers="r3c1-t111 r1c2-t111">old node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2583"></a>Returns</p>
<p><code>(Node*)</code> the node replaced</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2584" class="refsect2"><a id="CACCFHBG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref379"></a><a id="sthref380"></a>resetNode()</h3>
<p>This function resets <code>NodeRef</code> to reference <code>Node</code> given as an argument</p>
<p class="subhead1"><a id="CPXML2585"></a>Syntax</p>
<pre>void resetNode( 
   Node* nptr);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t112">Parameter</th>
<th class="cellalignment1810" id="r1c2-t112">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t112" headers="r1c1-t112">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r2c1-t112 r1c2-t112">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2586" class="refsect2"><a id="CACCICDC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref381"></a><a id="sthref382"></a>setNodeValue()</h3>
<p>Sets a node&#39;s value (character data) as a <code>NULL</code>-terminated string. Does not allow setting the value to <code>NULL</code>. Only <code>Attr</code>, <code>CDATA</code>, <code>Comment</code>, <code>ProcessingInstruction</code>, and <code>Text</code> nodes have values. Trying to set the value of another kind of node is a no-op. The new value must be in the data encoding! It is not verified, converted, or checked. The value is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p>It throws the <code>NO_MODIFICATION_ALLOWED_ERR</code> exception, if no modifications are allowed, or <code>UNDEFINED_ERR</code>, with an appropriate Oracle XML error code (see xml.h), in the case of an implementation defined error.</p>
<p class="subhead1"><a id="CPXML2587"></a>Syntax</p>
<pre>void setNodeValue( 
   oratext* data) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t113">Parameter</th>
<th class="cellalignment1810" id="r1c2-t113">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t113" headers="r1c1-t113">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t113 r1c2-t113">new value for node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2588" class="refsect2"><a id="CACHHJHG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref383"></a><a id="sthref384"></a>setPrefix()</h3>
<p>Sets the namespace prefix of this node (as <code>NULL</code>-terminated string). Does not verify the prefix is defined! And does not verify that the prefix is in the current data encoding. Just causes a new qualified name to be formed from the new prefix and the old local name.</p>
<p>It throws the <code>NO_MODIFICATION_ALLOWED_ERR</code> exception, if no modifications are allowed. Or it throws <code>NAMESPACE_ERR</code> if the <code>namespaceURI</code> of this node is <code>NULL</code>, or if the specified prefix is &#34;xml&#34; and the namespaceURI of this node is different from &#34;http://www.w3.org/XML/1998/namespace&#34;, or if this node is an attribute and the specified prefix is &#34;xmlns&#34; and the namespaceURI of this node is different from &#34;http://www.w3.org/2000/xmlns/&#34;. Note that the <code>INVALID_CHARACTER_ERR</code> exception is never thrown since it is not checked how the prefix is formed</p>
<p class="subhead1"><a id="CPXML2589"></a>Syntax</p>
<pre>void setPrefix( 
   oratext* prefix) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t114">Parameter</th>
<th class="cellalignment1810" id="r1c2-t114">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t114" headers="r1c1-t114">
<pre>prefix
</pre></td>
<td class="cellalignment1804" headers="r2c1-t114 r1c2-t114">new namespace prefix</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2590" class="refsect2"><a id="CACDGCHJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref385"></a><a id="sthref386"></a>~NodeRef()</h3>
<p>This is the default destructor. It cleans the reference to the node and, if the node is marked for deletion, deletes the node. If the node was marked for deep deletion, the tree under the node is also deleted (deallocated). It is usually called by the environment. But it can be called by the user directly if necessary.</p>
<p class="subhead1"><a id="CPXML2591"></a>Syntax</p>
<pre>~NodeRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACDHFJG"></a>
<hr/>
<div id="CPXML01320" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref387"></a>NotationRef Interface</h2>
<p><a href="#CEGBEEGJ">Table 2-22</a> summarizes the methods available through <code>NotationRef</code> interface.</p>
<div id="CPXML2592" class="tblformal">
<p class="titleintable"><a id="sthref388"></a><a id="CEGBEEGJ"></a>Table 2-22 Summary of NotationRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of NotationRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t115">Function</th>
<th class="cellalignment1810" id="r1c2-t115">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t115" headers="r1c1-t115">
<p><a href="#CACCHFGH">NotationRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t115 r1c2-t115">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t115" headers="r1c1-t115">
<p><a href="#CACCAJEF">getPublicId()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t115 r1c2-t115">
<p>Get public ID.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t115" headers="r1c1-t115">
<p><a href="#CACEFFGB">getSystemId()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t115 r1c2-t115">
<p>Get system ID.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t115" headers="r1c1-t115">
<p><a href="#CACHCIFC">~NotationRef()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t115 r1c2-t115">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2593" class="refsect2"><a id="CACCHFGH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref389"></a><a id="sthref390"></a>NotationRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t116">Syntax</th>
<th class="cellalignment1810" id="r1c2-t116">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t116" headers="r1c1-t116">
<pre>NotationRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t116 r1c2-t116">Used to create references to a given notation node after a call to create <code>Notation</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t116" headers="r1c1-t116">
<pre>NotationRef(
   const NotationRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t116 r1c2-t116">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t117">Parameter</th>
<th class="cellalignment1810" id="r1c2-t117">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t117" headers="r1c1-t117">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t117 r1c2-t117">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t117" headers="r1c1-t117">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t117 r1c2-t117">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2594"></a>Returns</p>
<p><code>(NotationRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2595" class="refsect2"><a id="CACCAJEF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref391"></a><a id="sthref392"></a>getPublicId()</h3>
<p>Get public id.</p>
<p class="subhead1"><a id="CPXML2596"></a>Syntax</p>
<pre>oratext* getPublicId() const;
</pre>
<p class="subhead1"><a id="CPXML2597"></a>Returns</p>
<p><code>(oratext*)</code> public ID</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2598" class="refsect2"><a id="CACEFFGB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref393"></a><a id="sthref394"></a>getSystemId()</h3>
<p>Get system id.</p>
<p class="subhead1"><a id="CPXML2599"></a>Syntax</p>
<pre>oratext* getSystemId() const;
</pre>
<p class="subhead1"><a id="CPXML2600"></a>Returns</p>
<p><code>(oratext*)</code> system ID</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2601" class="refsect2"><a id="CACHCIFC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref395"></a><a id="sthref396"></a>~NotationRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2602"></a>Syntax</p>
<pre>~NotationRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACDHCIB"></a>
<hr/>
<div id="CPXML01330" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref397"></a>ProcessingInstructionRef Interface</h2>
<p><a href="#CACGCGAF">Table 2-23</a> summarizes the methods available through <code>ProcessingInstructionRef</code> interface.</p>
<div id="CPXML2603" class="tblformal">
<p class="titleintable"><a id="sthref398"></a><a id="CACGCGAF"></a>Table 2-23 Summary of ProcessingInstructionRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of ProcessingInstructionRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t118">Function</th>
<th class="cellalignment1810" id="r1c2-t118">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t118" headers="r1c1-t118">
<p><a href="#CACHJGAE">ProcessingInstructionRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t118 r1c2-t118">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t118" headers="r1c1-t118">
<p><a href="#CACGIBBE">getData()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t118 r1c2-t118">
<p>Get processing instruction&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t118" headers="r1c1-t118">
<p><a href="#CACDHEFJ">getTarget()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t118 r1c2-t118">
<p>Get processing instruction&#39;s target.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t118" headers="r1c1-t118">
<p><a href="#CACGDCFA">setData()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t118 r1c2-t118">
<p>Set processing instruction&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t118" headers="r1c1-t118">
<p><a href="#CACICEGC">~ProcessingInstructionRef()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t118 r1c2-t118">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2604" class="refsect2"><a id="CACHJGAE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref399"></a><a id="sthref400"></a>ProcessingInstructionRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t119">Syntax</th>
<th class="cellalignment1810" id="r1c2-t119">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t119" headers="r1c1-t119">
<pre>ProcessingInstructionRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t119 r1c2-t119">Used to create references to a given <code>ProcessingInstruction</code> node after a call to create <code>ProcessingInstruction</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t119" headers="r1c1-t119">
<pre>ProcessingInstructionRef(
   const ProcessingInstructionRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t119 r1c2-t119">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t120">Parameter</th>
<th class="cellalignment1810" id="r1c2-t120">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t120" headers="r1c1-t120">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t120 r1c2-t120">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t120" headers="r1c1-t120">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t120 r1c2-t120">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2605"></a>Returns</p>
<p><code>(ProcessingInstructionRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2606" class="refsect2"><a id="CACGIBBE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref401"></a><a id="sthref402"></a>getData()</h3>
<p>Returns the content (data) of a processing instruction (in the data encoding). The content is the part from the first non-whitespace character after the target until the ending &#34;<code>?&gt;</code>&#34;.</p>
<p class="subhead1"><a id="CPXML2607"></a>Syntax</p>
<pre>oratext* getData() const;
</pre>
<p class="subhead1"><a id="CPXML2608"></a>Returns</p>
<p><code>(oratext*)</code> processing instruction&#39;s data</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2609" class="refsect2"><a id="CACDHEFJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref403"></a><a id="sthref404"></a>getTarget()</h3>
<p>Returns a processing instruction&#39;s target string. The target is the first token following the markup that begins the <code>ProcessingInstruction</code>. All <code>ProcessingInstruction</code>s must have a target, though the data part is optional.</p>
<p class="subhead1"><a id="CPXML2610"></a>Syntax</p>
<pre>oratext* getTarget() const;
</pre>
<p class="subhead1"><a id="CPXML2611"></a>Returns</p>
<p><code>(oratext*)</code> processing instruction&#39;s target</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2612" class="refsect2"><a id="CACGDCFA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref405"></a><a id="sthref406"></a>setData()</h3>
<p>Sets processing instruction&#39;s data (content), which must be in the data encoding. It is not permitted to set the data to <code>NULL</code>. The new data is not verified, converted, or checked.</p>
<p class="subhead1"><a id="CPXML2613"></a>Syntax</p>
<pre>void setData( 
   oratext* data) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t121">Parameter</th>
<th class="cellalignment1810" id="r1c2-t121">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t121" headers="r1c1-t121">
<pre>data
</pre></td>
<td class="cellalignment1804" headers="r2c1-t121 r1c2-t121">new data</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2614" class="refsect2"><a id="CACICEGC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref407"></a><a id="sthref408"></a>~ProcessingInstructionRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2615"></a>Syntax</p>
<pre>~ProcessingInstructionRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEGDFA"></a>
<hr/>
<div id="CPXML01340" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref409"></a>Range Interface</h2>
<p><a href="#CEGGECGB">Table 2-24</a> summarizes the methods available through Range interface.</p>
<div id="CPXML2616" class="tblformal">
<p class="titleintable"><a id="sthref410"></a><a id="CEGGECGB"></a>Table 2-24 Summary of Range Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of Range Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t122">Function</th>
<th class="cellalignment1810" id="r1c2-t122">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t122" headers="r1c1-t122">
<p><a href="#CACICFGB">CompareBoundaryPoints()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t122" headers="r1c1-t122">
<p><a href="#CACFEFGC">cloneContent()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t122" headers="r1c1-t122">
<p><a href="#CACGEIBI">cloneRange()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t122" headers="r1c1-t122">
<p><a href="#CACDCCCF">deleteContents()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t122" headers="r1c1-t122">
<p><a href="#CACCJBDE">detach()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t122 r1c2-t122">
<p>Invalidate the range.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t122" headers="r1c1-t122">
<p><a href="#CACHFIDC">extractContent()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t122" headers="r1c1-t122">
<p><a href="#CACJDHJF">getCollapsed()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t122 r1c2-t122">
<p>Check if the range is collapsed.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t122" headers="r1c1-t122">
<p><a href="#CACIHJFG">getCommonAncestorContainer()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t122 r1c2-t122">
<p>Get the deepest common ancestor node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r10c1-t122" headers="r1c1-t122">
<p><a href="#CACICJHG">getEndContainer()</a></p>
</td>
<td class="cellalignment1804" headers="r10c1-t122 r1c2-t122">
<p>Get end container node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r11c1-t122" headers="r1c1-t122">
<p><a href="#CACCAAIF">getEndOffset()</a></p>
</td>
<td class="cellalignment1804" headers="r11c1-t122 r1c2-t122">
<p>Get offset of the end point.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r12c1-t122" headers="r1c1-t122">
<p><a href="#CACHEFBI">getStartContainer()</a></p>
</td>
<td class="cellalignment1804" headers="r12c1-t122 r1c2-t122">
<p>Get start container node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r13c1-t122" headers="r1c1-t122">
<p><a href="#CACFDFEH">getStartOffset()</a></p>
</td>
<td class="cellalignment1804" headers="r13c1-t122 r1c2-t122">
<p>Get offset of the start point.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r14c1-t122" headers="r1c1-t122">
<p><a href="#CACIEBIC">insertNode()</a></p>
</td>
<td class="cellalignment1804" headers="r14c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r15c1-t122" headers="r1c1-t122">
<p><a href="#CACEAEEB">selectNodeContent()</a></p>
</td>
<td class="cellalignment1804" headers="r15c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r16c1-t122" headers="r1c1-t122">
<p><a href="#CACEADAI">selectNode()</a></p>
</td>
<td class="cellalignment1804" headers="r16c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r17c1-t122" headers="r1c1-t122">
<p><a href="#CACIDHCB">setEnd()</a></p>
</td>
<td class="cellalignment1804" headers="r17c1-t122 r1c2-t122">
<p>Set end point.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r18c1-t122" headers="r1c1-t122">
<p><a href="#CACIIDEF">setEndAfter()</a></p>
</td>
<td class="cellalignment1804" headers="r18c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r19c1-t122" headers="r1c1-t122">
<p><a href="#CACEEDJJ">setEndBefore()</a></p>
</td>
<td class="cellalignment1804" headers="r19c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r20c1-t122" headers="r1c1-t122">
<p><a href="#CACJBEEB">setStart()</a></p>
</td>
<td class="cellalignment1804" headers="r20c1-t122 r1c2-t122">
<p>Set start point.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r21c1-t122" headers="r1c1-t122">
<p><a href="#CACIFGDB">setStartAfter()</a></p>
</td>
<td class="cellalignment1804" headers="r21c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r22c1-t122" headers="r1c1-t122">
<p><a href="#CACIGBGE">setStartBefore()</a></p>
</td>
<td class="cellalignment1804" headers="r22c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r23c1-t122" headers="r1c1-t122">
<p><a href="#CACJBAIF">surroundContents()</a></p>
</td>
<td class="cellalignment1804" headers="r23c1-t122 r1c2-t122">&nbsp;</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r24c1-t122" headers="r1c1-t122">
<p><a href="#CACDIAGF">toString()</a></p>
</td>
<td class="cellalignment1804" headers="r24c1-t122 r1c2-t122">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2617" class="refsect2"><a id="CACICFGB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref411"></a><a id="sthref412"></a>CompareBoundaryPoints()</h3>
<p>Compares boundary points.</p>
<p class="subhead1"><a id="CPXML2618"></a>Syntax</p>
<pre>CompareHowCode compareBoundaryPoints( 
   unsigned short how,
   Range&lt; Node&gt;* sourceRange)
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t123">Parameter</th>
<th class="cellalignment1810" id="r1c2-t123">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t123" headers="r1c1-t123">
<pre>how
</pre></td>
<td class="cellalignment1804" headers="r2c1-t123 r1c2-t123">how to compare</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t123" headers="r1c1-t123">
<pre>sourceRange
</pre></td>
<td class="cellalignment1804" headers="r3c1-t123 r1c2-t123">range of comparison</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2619"></a>Returns</p>
<p><code>(CompareHowCode)</code> result of comparison</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2620" class="refsect2"><a id="CACFEFGC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref413"></a><a id="sthref414"></a>cloneContent()</h3>
<p>Makes a clone of the node, including its children.</p>
<p class="subhead1"><a id="CPXML2621"></a>Syntax</p>
<pre>Node* cloneContents() throw (DOMException);
</pre>
<p class="subhead1"><a id="CPXML2622"></a>Returns</p>
<p><code>(Node*)</code> subtree cloned</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2623" class="refsect2"><a id="CACGEIBI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref415"></a><a id="sthref416"></a>cloneRange()</h3>
<p>Clones a range of nodes.</p>
<p class="subhead1"><a id="CPXML2624"></a>Syntax</p>
<pre>Range&lt; Node&gt;* cloneRange();
</pre>
<p class="subhead1"><a id="CPXML2625"></a>Returns</p>
<p><code>(Range&lt; Node&gt;*)</code> new cloned range</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2626" class="refsect2"><a id="CACDCCCF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref417"></a><a id="sthref418"></a>deleteContents()</h3>
<p>Deletes contents of the node.</p>
<p class="subhead1"><a id="CPXML2627"></a>Syntax</p>
<pre>void deleteContents() throw (DOMException);
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2628" class="refsect2"><a id="CACCJBDE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref419"></a><a id="sthref420"></a>detach()</h3>
<p>Invalidates the range. It is not recommended to use this method since it leaves the object in invalid state. The preferable way is to call the destructor.</p>
<p class="subhead1"><a id="CPXML2629"></a>Syntax</p>
<pre>void detach();
</pre></div>
<!-- class="refsect2" -->
<div id="CPXML2630" class="refsect2"><a id="CACHFIDC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref421"></a><a id="sthref422"></a>extractContent()</h3>
<p>Extract the node.</p>
<p class="subhead1"><a id="CPXML2631"></a>Syntax</p>
<pre>Node* extractContents() throw (DOMException);
</pre>
<p class="subhead1"><a id="CPXML2632"></a>Returns</p>
<p><code>(Node*)</code> subtree extracted</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2633" class="refsect2"><a id="CACJDHJF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref423"></a><a id="sthref424"></a>getCollapsed()</h3>
<p>Checks if the range is collapsed.</p>
<p class="subhead1"><a id="CPXML2634"></a>Syntax</p>
<pre>boolean getCollapsed() const;
</pre>
<p class="subhead1"><a id="CPXML2635"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if the range is collapsed, <code>FALSE</code> otherwise</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2636" class="refsect2"><a id="CACIHJFG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref425"></a><a id="sthref426"></a>getCommonAncestorContainer()</h3>
<p>Get the deepest common ancestor of the node.</p>
<p class="subhead1"><a id="CPXML2637"></a>Syntax</p>
<pre>Node* getCommonAncestorContainer() const;
</pre>
<p class="subhead1"><a id="CPXML2638"></a>Returns</p>
<p><code>(Node*)</code> common ancestor node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2639" class="refsect2"><a id="CACICJHG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref427"></a><a id="sthref428"></a>getEndContainer()</h3>
<p>Gets the container node.</p>
<p class="subhead1"><a id="CPXML2640"></a>Syntax</p>
<pre>Node* getEndContainer() const;
</pre>
<p class="subhead1"><a id="CPXML2641"></a>Returns</p>
<p><code>(Node*)</code> end container node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2642" class="refsect2"><a id="CACCAAIF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref429"></a><a id="sthref430"></a>getEndOffset()</h3>
<p>Get offset of the end point.</p>
<p class="subhead1"><a id="CPXML2643"></a>Syntax</p>
<pre>long getEndOffset() const;
</pre>
<p class="subhead1"><a id="CPXML2644"></a>Returns</p>
<p><code>(long)</code> offset</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2645" class="refsect2"><a id="CACHEFBI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref431"></a><a id="sthref432"></a>getStartContainer()</h3>
<p>Get start container node.</p>
<p class="subhead1"><a id="CPXML2646"></a>Syntax</p>
<pre>Node* getStartContainer() const;
</pre>
<p class="subhead1"><a id="CPXML2647"></a>Returns</p>
<p><code>(Node*)</code> start container node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2648" class="refsect2"><a id="CACFDFEH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref433"></a><a id="sthref434"></a>getStartOffset()</h3>
<p>Get offset of the start point.</p>
<p class="subhead1"><a id="CPXML2649"></a>Syntax</p>
<pre>long getStartOffset() const;
</pre>
<p class="subhead1"><a id="CPXML2650"></a>Returns</p>
<p><code>(long)</code> offset</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2651" class="refsect2"><a id="CACIEBIC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref435"></a><a id="sthref436"></a>insertNode()</h3>
<p>Inserts a node.</p>
<p class="subhead1"><a id="CPXML2652"></a>Syntax</p>
<pre>void insertNode( 
   NodeRef&lt; Node&gt;&amp; newNode)
throw (RangeException, DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t124">Parameter</th>
<th class="cellalignment1810" id="r1c2-t124">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t124" headers="r1c1-t124">
<pre>newNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t124 r1c2-t124">inserted node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2653" class="refsect2"><a id="CACEAEEB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref437"></a><a id="sthref438"></a>selectNodeContent()</h3>
<p>Selects node content by its reference.</p>
<p class="subhead1"><a id="CPXML2654"></a>Syntax</p>
<pre>void selectNodeContent( 
   NodeRef&lt; Node&gt;&amp; refNode)
throw (RangeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t125">Parameter</th>
<th class="cellalignment1810" id="r1c2-t125">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t125" headers="r1c1-t125">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t125 r1c2-t125">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2655" class="refsect2"><a id="CACEADAI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref439"></a><a id="sthref440"></a>selectNode()</h3>
<p>Selects a node.</p>
<p class="subhead1"><a id="CPXML2656"></a>Syntax</p>
<pre>void selectNode( 
   NodeRef&lt; Node&gt;&amp; refNode)
throw (RangeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t126">Parameter</th>
<th class="cellalignment1810" id="r1c2-t126">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t126" headers="r1c1-t126">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t126 r1c2-t126">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2657" class="refsect2"><a id="CACIDHCB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref441"></a><a id="sthref442"></a>setEnd()</h3>
<p>Sets an end point.</p>
<p class="subhead1"><a id="CPXML2658"></a>Syntax</p>
<pre>void setEnd( 
   NodeRef&lt; Node&gt;&amp; refNode, 
   long offset)
throw (RangeException, DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t127">Parameter</th>
<th class="cellalignment1810" id="r1c2-t127">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t127" headers="r1c1-t127">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t127 r1c2-t127">reference node</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t127" headers="r1c1-t127">
<pre>offset
</pre></td>
<td class="cellalignment1804" headers="r3c1-t127 r1c2-t127">offset</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2659" class="refsect2"><a id="CACIIDEF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref443"></a><a id="sthref444"></a>setEndAfter()</h3>
<p>Sets the end pointer after a specified node.</p>
<p class="subhead1"><a id="CPXML2660"></a>Syntax</p>
<pre>void setEndAfter( 
   NodeRef&lt; Node&gt;&amp; refNode)
throw (RangeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t128">Parameter</th>
<th class="cellalignment1810" id="r1c2-t128">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t128" headers="r1c1-t128">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t128 r1c2-t128">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2661" class="refsect2"><a id="CACEEDJJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref445"></a><a id="sthref446"></a>setEndBefore()</h3>
<p>Set the end before a specified node.</p>
<p class="subhead1"><a id="CPXML2662"></a>Syntax</p>
<pre>void setEndBefore( 
   NodeRef&lt; Node&gt;&amp; refNode)
throw (RangeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t129">Parameter</th>
<th class="cellalignment1810" id="r1c2-t129">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t129" headers="r1c1-t129">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t129 r1c2-t129">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2663" class="refsect2"><a id="CACJBEEB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref447"></a><a id="sthref448"></a>setStart()</h3>
<p>Sets start point.</p>
<p class="subhead1"><a id="CPXML2664"></a>Syntax</p>
<pre>void setStart( 
   NodeRef&lt; Node&gt;&amp; refNode, 
   long offset)
throw (RangeException, DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t130">Parameter</th>
<th class="cellalignment1810" id="r1c2-t130">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t130" headers="r1c1-t130">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t130 r1c2-t130">reference node</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t130" headers="r1c1-t130">
<pre>offset
</pre></td>
<td class="cellalignment1804" headers="r3c1-t130 r1c2-t130">offset</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2665" class="refsect2"><a id="CACIFGDB"></a>
<hr/>
<h3 class="refsect2"><a id="sthref449"></a><a id="sthref450"></a>setStartAfter()</h3>
<p>Sets start pointer after a specified node.</p>
<p class="subhead1"><a id="CPXML2666"></a>Syntax</p>
<pre>void setStartAfter( 
   NodeRef&lt; Node&gt;&amp; refNode)
throw (RangeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t131">Parameter</th>
<th class="cellalignment1810" id="r1c2-t131">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t131" headers="r1c1-t131">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t131 r1c2-t131">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2667" class="refsect2"><a id="CACIGBGE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref451"></a><a id="sthref452"></a>setStartBefore()</h3>
<p>Sets start pointer before a specified node.</p>
<p class="subhead1"><a id="CPXML2668"></a>Syntax</p>
<pre>void setStartBefore( 
   NodeRef&lt; Node&gt;&amp; refNode)
throw (RangeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t132">Parameter</th>
<th class="cellalignment1810" id="r1c2-t132">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t132" headers="r1c1-t132">
<pre>refNode
</pre></td>
<td class="cellalignment1804" headers="r2c1-t132 r1c2-t132">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2669" class="refsect2"><a id="CACJBAIF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref453"></a><a id="sthref454"></a>surroundContents()</h3>
<p>Makes a node into a child of the specified node.</p>
<p class="subhead1"><a id="CPXML2670"></a>Syntax</p>
<pre>void surroundContents( 
   NodeRef&lt; Node&gt;&amp; newParent)
throw (RangeException, DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t133">Parameter</th>
<th class="cellalignment1810" id="r1c2-t133">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t133" headers="r1c1-t133">
<pre>newParent
</pre></td>
<td class="cellalignment1804" headers="r2c1-t133 r1c2-t133">parent node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2671" class="refsect2"><a id="CACDIAGF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref455"></a><a id="sthref456"></a>toString()</h3>
<p>Converts an item into a string.</p>
<p class="subhead1"><a id="CPXML2672"></a>Syntax</p>
<pre>oratext* toString();
</pre>
<p class="subhead1"><a id="CPXML2673"></a>Returns</p>
<p><code>(oratext*)</code> string representation of the range</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACHGBCA"></a>
<hr/>
<div id="CPXML01350" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref457"></a>RangeException Interface</h2>
<p><a href="#CEGEAICD">Table 2-25</a> summarizes the methods available through <code>RangeException</code> interface.</p>
<div id="CPXML2674" class="tblformal">
<p class="titleintable"><a id="sthref458"></a><a id="CEGEAICD"></a>Table 2-25 Summary of RangeException Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of RangeException Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t134">Function</th>
<th class="cellalignment1810" id="r1c2-t134">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t134" headers="r1c1-t134">
<p><a href="#CACJCFEH">getCode()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t134 r1c2-t134">
<p>Get Oracle XML error code embedded in the exception.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t134" headers="r1c1-t134">
<p><a href="#CACFHEBJ">getMesLang()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t134 r1c2-t134">
<p>Get current language (encoding) of error messages.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t134" headers="r1c1-t134">
<p><a href="#CACGIFCF">getMessage()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t134 r1c2-t134">
<p>Get Oracle XML error message.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t134" headers="r1c1-t134">
<p><a href="#CACIBBED">getRangeCode()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t134 r1c2-t134">
<p>Get Range exception code embedded in the exception.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2675" class="refsect2"><a id="CACJCFEH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref459"></a><a id="sthref460"></a>getCode()</h3>
<p>Gets Oracle XML error code embedded in the exception. Virtual member function inherited from <code>XmlException</code>.</p>
<p class="subhead1"><a id="CPXML2676"></a>Syntax</p>
<pre>virtual unsigned getCode() const = 0;
</pre>
<p class="subhead1"><a id="CPXML2677"></a>Returns</p>
<p><code>(unsigned)</code> numeric error code (0 on success)</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2678" class="refsect2"><a id="CACFHEBJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref461"></a><a id="sthref462"></a>getMesLang()</h3>
<p>Gets the current language encoding of error messages. Virtual member function inherited from <code>XmlException</code>.</p>
<p class="subhead1"><a id="CPXML2679"></a>Syntax</p>
<pre>virtual oratext* getMesLang() const = 0;
</pre>
<p class="subhead1"><a id="CPXML2680"></a>Returns</p>
<p><code>(oratext*)</code> Current language (encoding) of error messages</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2681" class="refsect2"><a id="CACGIFCF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref463"></a><a id="sthref464"></a>getMessage()</h3>
<p>Get XML error message. Virtual member function inherited from <code>XmlException</code>.</p>
<p class="subhead1"><a id="CPXML2682"></a>Syntax</p>
<pre>virtual oratext* getMessage() const = 0;
</pre>
<p class="subhead1"><a id="CPXML2683"></a>Returns</p>
<p><code>(oratext *)</code> Error message</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2684" class="refsect2"><a id="CACIBBED"></a>
<hr/>
<h3 class="refsect2"><a id="sthref465"></a><a id="sthref466"></a>getRangeCode()</h3>
<p>This is a virtual member function that defines a prototype for implementation defined member functions returning Range exception codes, defined in <code>RangeExceptionCode</code>, of the exceptional situations during execution.</p>
<p class="subhead1"><a id="CPXML2685"></a>Syntax</p>
<pre>virtual RangeExceptionCode getRangeCode() const = 0;
</pre>
<p class="subhead1"><a id="CPXML2686"></a>Returns</p>
<p><code>(RangeExceptionCode)</code> exception code</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEAJAH"></a>
<hr/>
<div id="CPXML01360" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref467"></a>TextRef Interface</h2>
<p><a href="#CEGBICHB">Table 2-26</a> summarizes the methods available through <code>TextRef</code> interface.</p>
<div id="CPXML2687" class="tblformal">
<p class="titleintable"><a id="sthref468"></a><a id="CEGBICHB"></a>Table 2-26 Summary of TextRef Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of TextRef Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t135">Function</th>
<th class="cellalignment1810" id="r1c2-t135">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t135" headers="r1c1-t135">
<p><a href="#CACJBDAF">TextRef()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t135 r1c2-t135">
<p>Constructor.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t135" headers="r1c1-t135">
<p><a href="#CACBDECD">splitText()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t135 r1c2-t135">
<p>Split text node into two.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t135" headers="r1c1-t135">
<p><a href="#CACFAHAH">~TextRef()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t135 r1c2-t135">
<p>Public default destructor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2688" class="refsect2"><a id="CACJBDAF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref469"></a><a id="sthref470"></a>TextRef()</h3>
<p>Class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1811" title="Syntax" summary="First column has different versions of the method, the second column describes how each is used." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t136">Syntax</th>
<th class="cellalignment1810" id="r1c2-t136">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t136" headers="r1c1-t136">
<pre>TextRef(
   const NodeRef&lt; Node&gt;&amp; node_ref,
   Node* nptr);
</pre></td>
<td class="cellalignment1804" headers="r2c1-t136 r1c2-t136">Used to create references to a given text node after a call to <code>createtext</code>.</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t136" headers="r1c1-t136">
<pre>TextRef(
   const TextRef&lt; Node&gt;&amp; nref);
</pre></td>
<td class="cellalignment1804" headers="r3c1-t136 r1c2-t136">Copy constructor.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t137">Parameter</th>
<th class="cellalignment1810" id="r1c2-t137">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t137" headers="r1c1-t137">
<pre>node_ref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t137 r1c2-t137">reference to provide the context</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t137" headers="r1c1-t137">
<pre>nptr
</pre></td>
<td class="cellalignment1804" headers="r3c1-t137 r1c2-t137">referenced node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2689"></a>Returns</p>
<p><code>(TextRef)</code> <code>Node</code> reference object</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2690" class="refsect2"><a id="CACBDECD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref471"></a><a id="sthref472"></a>splitText()</h3>
<p>Splits a single text node into two text nodes; the original data is split between them. The offset is zero-based, and is in characters, not bytes. The original node is retained, its data is just truncated. A new text node is created which contains the remainder of the original data, and is inserted as the next sibling of the original. The new text node is returned.</p>
<p class="subhead1"><a id="CPXML2691"></a>Syntax</p>
<pre>Node* splitText( 
   ub4 offset) 
throw (DOMException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t138">Parameter</th>
<th class="cellalignment1810" id="r1c2-t138">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t138" headers="r1c1-t138">
<pre>offset
</pre></td>
<td class="cellalignment1804" headers="r2c1-t138 r1c2-t138">character offset where to split text</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CPXML2692"></a>Returns</p>
<p><code>(Node*)</code> new node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2693" class="refsect2"><a id="CACFAHAH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref473"></a><a id="sthref474"></a>~TextRef()</h3>
<p>This is the default destructor.</p>
<p class="subhead1"><a id="CPXML2694"></a>Syntax</p>
<pre>~TextRef();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CDEICDEI"></a>
<hr/>
<div id="CPXML01370" class="refsect1">
<h2 class="refsect1"><a id="sthref475"></a>TreeWalker Interface</h2>
<p><a href="#CACFJCJF">Table 2-27</a> summarizes the methods available through <code>TreeWalker</code> interface.</p>
<div id="CPXML2695" class="tblformal">
<p class="titleintable"><a id="sthref476"></a><a id="CACFJCJF"></a>Table 2-27 Summary of TreeWalker Methods; Dom Package</p>
<table class="cellalignment1809" title="Summary of TreeWalker Methods; Dom Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t139">Function</th>
<th class="cellalignment1810" id="r1c2-t139">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t139" headers="r1c1-t139">
<p><a href="#CACGGJEJ">adjustCtx()</a></p>
</td>
<td class="cellalignment1804" headers="r2c1-t139 r1c2-t139">
<p>Attach this tree walker to another context.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r3c1-t139" headers="r1c1-t139">
<p><a href="#CACFEHJI">firstChild()</a></p>
</td>
<td class="cellalignment1804" headers="r3c1-t139 r1c2-t139">
<p>Get the first child of the current node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r4c1-t139" headers="r1c1-t139">
<p><a href="#CACIADFE">lastChild()</a></p>
</td>
<td class="cellalignment1804" headers="r4c1-t139 r1c2-t139">
<p>Get the last child of the current node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r5c1-t139" headers="r1c1-t139">
<p><a href="#CACDHJBG">nextNode()</a></p>
</td>
<td class="cellalignment1804" headers="r5c1-t139 r1c2-t139">
<p>Get the next node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r6c1-t139" headers="r1c1-t139">
<p><a href="#CACBCBAE">nextSibling()</a></p>
</td>
<td class="cellalignment1804" headers="r6c1-t139 r1c2-t139">
<p>Get the next sibling node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r7c1-t139" headers="r1c1-t139">
<p><a href="#CACJBHBC">parentNode()</a></p>
</td>
<td class="cellalignment1804" headers="r7c1-t139 r1c2-t139">
<p>Get the parent of the current node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r8c1-t139" headers="r1c1-t139">
<p><a href="#CACIBBGD">previousNode()</a></p>
</td>
<td class="cellalignment1804" headers="r8c1-t139 r1c2-t139">
<p>Get the previous node.</p>
</td>
</tr>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r9c1-t139" headers="r1c1-t139">
<p><a href="#CACEFCBF">previousSibling()</a></p>
</td>
<td class="cellalignment1804" headers="r9c1-t139 r1c2-t139">
<p>Get the previous sibling node.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CPXML2696" class="refsect2"><a id="CACGGJEJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref477"></a><a id="sthref478"></a>adjustCtx()</h3>
<p>Attaches this tree walker to the context associated with a given node reference</p>
<p class="subhead1"><a id="CPXML2697"></a>Syntax</p>
<pre>void adjustCtx( 
   NodeRef&lt; Node&gt;&amp; nref);
</pre>
<div class="inftblinformal">
<table class="cellalignment1811" title="Paramter(s)" summary="Parameter Table; column 1 has parameters and column 2 has their descriptions." dir="ltr">
<thead>
<tr class="cellalignment1798">
<th class="cellalignment1810" id="r1c1-t140">Parameter</th>
<th class="cellalignment1810" id="r1c2-t140">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1798">
<td class="cellalignment1804" id="r2c1-t140" headers="r1c1-t140">
<pre>nref
</pre></td>
<td class="cellalignment1804" headers="r2c1-t140 r1c2-t140">reference to provide the context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CPXML2698" class="refsect2"><a id="CACFEHJI"></a>
<hr/>
<h3 class="refsect2"><a id="sthref479"></a><a id="sthref480"></a>firstChild()</h3>
<p>Get the first child of the current node.</p>
<p class="subhead1"><a id="CPXML2699"></a>Syntax</p>
<pre>Node* firstChild();
</pre>
<p class="subhead1"><a id="CPXML2700"></a>Returns</p>
<p><code>(Node*)</code> pointer to first child node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2701" class="refsect2"><a id="CACIADFE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref481"></a><a id="sthref482"></a>lastChild()</h3>
<p>Get the last child of the current node.</p>
<p class="subhead1"><a id="CPXML2702"></a>Syntax</p>
<pre>Node* lastChild();
</pre>
<p class="subhead1"><a id="CPXML2703"></a>Returns</p>
<p><code>(Node*)</code> pointer to last child node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2704" class="refsect2"><a id="CACDHJBG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref483"></a><a id="sthref484"></a>nextNode()</h3>
<p>Get the next node.</p>
<p class="subhead1"><a id="CPXML2705"></a>Syntax</p>
<pre>Node* nextNode();
</pre>
<p class="subhead1"><a id="CPXML2706"></a>Returns</p>
<p><code>(Node*)</code> pointer to the next node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2707" class="refsect2"><a id="CACBCBAE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref485"></a><a id="sthref486"></a>nextSibling()</h3>
<p>Get the next sibling node.</p>
<p class="subhead1"><a id="CPXML2708"></a>Syntax</p>
<pre>Node* nextSibling();
</pre>
<p class="subhead1"><a id="CPXML2709"></a>Returns</p>
<p><code>(Node*)</code> pointer to the next sibling node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2710" class="refsect2"><a id="CACJBHBC"></a>
<hr/>
<h3 class="refsect2"><a id="sthref487"></a><a id="sthref488"></a>parentNode()</h3>
<p>Get the parent of the current node.</p>
<p class="subhead1"><a id="CPXML2711"></a>Syntax</p>
<pre>Node* parentNode();
</pre>
<p class="subhead1"><a id="CPXML2712"></a>Returns</p>
<p><code>(Node*)</code> pointer to the parent node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2713" class="refsect2"><a id="CACIBBGD"></a>
<hr/>
<h3 class="refsect2"><a id="sthref489"></a><a id="sthref490"></a>previousNode()</h3>
<p>Get the previous node.</p>
<p class="subhead1"><a id="CPXML2714"></a>Syntax</p>
<pre>Node* previousNode();
</pre>
<p class="subhead1"><a id="CPXML2715"></a>Returns</p>
<p><code>(Node*)</code> pointer to previous node</p>
</div>
<!-- class="refsect2" -->
<div id="CPXML2716" class="refsect2"><a id="CACEFCBF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref491"></a><a id="sthref492"></a>previousSibling()</h3>
<p>Get the previous sibling node.</p>
<p class="subhead1"><a id="CPXML2717"></a>Syntax</p>
<pre>Node* previousSibling();
</pre>
<p class="subhead1"><a id="CPXML2718"></a>Returns</p>
<p><code>(Node*)</code> pointer to the previous sibling node</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1797">
<tr>
<td class="cellalignment1804">
<table class="cellalignment1808">
<tr>
<td class="cellalignment1801"><a href="ctx.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1801"><a href="io.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1806">
<table class="cellalignment1807">
<tr>
<td class="cellalignment1801"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1801"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1801"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1801"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1801"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1801"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>