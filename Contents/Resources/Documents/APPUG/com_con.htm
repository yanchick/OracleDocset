<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2132"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Implementing%20Commit-Confirm%20%28SNA%20Only%29"></a><title>Implementing Commit-Confirm (SNA Only)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1090"/>
<meta name="dcterms.created" content="2017-06-08T15:9:57Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Gateway for APPC User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17931-04"/>
<meta name="dcterms.isVersionOf" content="APPUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="app_sna.htm" title="Previous" type="text/html"/>
<link rel="Next" href="tcpmap.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17931-04.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/20</span> <!-- End Header -->
<div id="APPUG500" class="chapter"><a id="i1007119"></a>
<h1 class="chapter"><span class="secnum">5</span> Implementing Commit-Confirm (SNA Only)</h1>
<p><a id="sthref729"></a><a id="sthref730"></a>Commit-confirm allows the updating of local Oracle resources to occur in the same Oracle transaction as the updating of non-Oracle resources accessed through the Oracle Database Gateway for APPC.</p>
<p>Read this chapter to familiarize yourself with the elements and functions of commit-confirm.</p>
<p>You will find instructions for configuring gateway components for commit-confirm on an SNA environment in the <a class="olink APPCI" href="../APPCI/toc.htm"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for IBM AIX on POWER Systems (64-Bit), Linux x86-64, Oracle Solaris on SPARC (64-Bit), and HP-UX Itanium</span></a> or <a class="olink APPCW" href="../APPCW/toc.htm"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for Microsoft Windows</span></a>. Refer to Chapter&nbsp;5, &#34;Configuring Your Network&#34; and Chapter&nbsp;6, &#34;Gateway Configuration Using the SNA Communications Protocol&#34; of the installation and configuration guides for specific information.</p>
<p>This chapter includes the following sections:</p>
<ul>
<li>
<p><a href="#i1007031">&#34;Overview of Commit-Confirm&#34;</a></p>
</li>
<li>
<p><a href="#i1007450">&#34;Supported OLTPs&#34;</a></p>
</li>
<li>
<p><a href="#i1006575">&#34;Components Required to Support Commit-Confirm&#34;</a></p>
</li>
<li>
<p><a href="#i1006698">&#34;Application Design Requirements&#34;</a></p>
</li>
<li>
<p><a href="#i1006717">&#34;Commit-Confirm Architecture&#34;</a></p>
</li>
<li>
<p><a href="#i1007098">&#34;Commit-Confirm Flow&#34;</a></p>
</li>
</ul>
<a id="i1007031"></a>
<div id="APPUG1007" class="sect1">
<h2 class="sect1">Overview of Commit-Confirm</h2>
<div class="infobox-note">
<p class="notep1"><span class="bold">Important</span>:</p>
If you are planning to implement commit-confirm, then you should already have configured the components. Depending on your platform, refer to Chapter&nbsp;12 of the <a class="olink APPCI216" href="../APPCI/ch12.htm#APPCI216"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for IBM AIX on POWER Systems (64-Bit), Linux x86-64, Oracle Solaris on SPARC (64-Bit), and HP-UX Itanium</span></a> or Chapter 9 of the <a class="olink APPCW192" href="../APPCW/ch9.htm#APPCW192"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for Microsoft Windows</span></a> for instructions on its configuration.</div>
<p><a id="sthref731"></a>Commit-confirm is a special implementation of two-phase commit that allows a database or gateway that does not support full two-phase commit to participate in distributed update transactions with other databases or gateways that do support full two-phase commit. In this implementation, the commit-confirm site is always the first to be committed, after all other sites have been prepared. This allows all sites to be kept in sync, because if the commit-confirm site fails to commit successfully, all other sites can be rolled back.<a id="sthref732"></a></p>
<p>Within an Oracle distributed transaction, all work associated with that transaction is assigned a common identifier, known as the <a id="sthref733"></a>Oracle Global Transaction ID. This identifier is guaranteed to be unique, so that it can be used to exclusively identify a particular distributed transaction. The key requirement for commit-confirm support is the ability for the commit-confirm site (in this case, the Oracle Database Gateway for APPC) to be able to log the Oracle Global Transaction ID as part of its unit of work, so that if a failure occurs, the gateway&#39;s recovery processing can determine the status of a particular Oracle Global Transaction ID by the presence or absence of a log entry for that transaction. A new Oracle Global Transaction ID is generated after every commit or rollback operation.<a id="sthref734"></a> <a id="sthref735"></a></p>
<p>The Oracle Database Gateway for APPC implements commit-confirm using LU6.2 <code dir="ltr">SYNCLEVEL 1</code>. This is similar to the implementation of single-site update, with the added advantage that resources on both the Oracle site and the <a id="sthref736"></a>OLTP being accessed by the gateway can be updated and kept in sync. The main difference is that the commit-confirm implementation requires some additional programming in the OLTP transaction to perform the transaction logging necessary for recovery support.</p>
</div>
<!-- class="sect1" -->
<a id="i1007450"></a>
<div id="APPUG1008" class="sect1">
<h2 class="sect1">Supported OLTPs</h2>
<p>Since commit-confirm uses LU6.2 <code dir="ltr">SYNCLEVEL 1</code>, it can be supported by any OLTP that supports APPC, including CICS Transaction Server for z/OS and IMS/TM. The Oracle Database Gateway for APPC provides sample commit-confirm applications for both CICS Transaction Server for z/OS and IMS/TM.<a id="sthref737"></a></p>
<p>With CICS Transaction Server for z/OS, the standard command-level EXEC CICS interface can be used for all APPC communications. In addition, the CPI-C interface can be used if it is preferred. A sample DB2 update transaction written in COBOL using the EXEC CICS interface is provided with the gateway. Any language supported by CICS Transaction Server for z/OS can be used for writing commit-confirm transactions.</p>
<p>With IMS/TM, the CPI-C interface must be used, making the IMS transaction an &#34;explicit APPC transaction,&#34; as referred to in the IBM IMSCICS Transaction Server for z/OS manuals. This is necessary because it is the only way that the LU6.2 <code dir="ltr">SYNCLEVEL 1</code> control flows are accessible to the IMS transaction. When using &#34;implied APPC&#34; where &#34;GU&#34; from the IOPCB and &#34;ISRT&#34; to the IOPCB are used for receiving and sending data, there is no way for the IMS transaction to access the LU6.2 <code dir="ltr">SYNCLEVEL 1</code> control flow, making it impossible to use this method for commit-confirm. A sample DLI database update transaction written in COBOL using the CPI-C APPC interface is provided with the gateway. Any language supported by IMS and CPI-C can be used for writing commit-confirm transactions.</p>
</div>
<!-- class="sect1" -->
<a id="i1006575"></a>
<div id="APPUG1009" class="sect1">
<h2 class="sect1">Components Required to Support Commit-Confirm</h2>
<p>The following components are required to support commit-confirm:<a id="sthref738"></a></p>
<ul>
<li>
<p>Oracle Database Gateway for APPC Server</p>
<p>The gateway server supports commit-confirm when <code dir="ltr">PGA_CAPABILITY=COMMIT_CONFIRM</code> is specified in the gateway initialization file. When the gateway server is running with commit-confirm enabled, it will connect to a local Oracle database where it maintains a commit-confirm transaction log, similar to the Oracle two-phase commit log stored in the <code dir="ltr">DBA_2PC_PENDING</code> table. The gateway&#39;s transaction log is stored in the <code dir="ltr">PGA_CC_PENDING</code> table. A row is stored in this table for each in-flight transaction and remains there until the transaction has completed. The life span of rows in <code dir="ltr">PGA_CC_PENDING</code> is normally quite short, lasting only from the time the commit is received by the gateway until the time the Oracle database completes all commit processing and tells the gateway to forget the transaction.</p>
<p>The commit-confirm gateway SID should be reserved for use only to invoke update transactions that implement commit-confirm. There is some extra overhead involved in the setup for logging when <code dir="ltr">PGA_CAPABILITY</code> is set to <code dir="ltr">COMMIT_CONFIRM</code>. Read-only transactions should be invoked through a separate gateway SID with <code dir="ltr">PGA_CAPABILITY</code> set to <code dir="ltr">READ_ONLY</code> so that they will not incur the extra overhead.</p>
</li>
<li>
<p>Logging Server<a id="sthref739"></a><a id="sthref740"></a></p>
<p>An Oracle database must be available for use by the gateway server for storing the <code dir="ltr">PGA_CC_PENDING</code> table. For maximum performance and reliability, Oracle recommends that this Oracle database reside on the same system as the gateway server.</p>
</li>
<li>
<p>OLTP Commit-Confirm Transaction Log<a id="sthref741"></a><a id="sthref742"></a></p>
<p>A commit-confirm transaction log database must be defined to the OLTP system being accessed. This database must be recoverable and must be accessible by the OLTP as part of the same unit of work as the OLTP application&#39;s databases, so that updates to the transaction log database will be kept in sync with updates to the application&#39;s databases in a single unit of work.</p>
<p>The commit-confirm transaction log database need contain only the <a id="sthref743"></a>Oracle Global Transaction ID and a date/time stamp. The Oracle Global Transaction ID is 169 bytes long and must be the key field. The date/time stamp is used for purging old entries that can be left in the log after certain failure scenarios.</p>
<p>For simplicity, all commit-confirm applications under a particular OLTP should share the same commit-confirm transaction log.</p>
</li>
<li>
<p>OLTP Transaction Logging Code<a id="sthref744"></a><a id="sthref745"></a></p>
<p>Code must be added to each OLTP transaction invoked by a commit-confirm gateway to perform the transaction logging required by the gateway&#39;s commit-confirm implementation. This code must receive the Oracle Global Transaction ID from the gateway and write that information into the OLTP commit-confirm transaction log database. For maximum flexibility and ease of use, this code can be written as a subroutine callable from any commit-confirm transaction on your OLTP system.</p>
<p>This code must be executed at the beginning of each commit-confirm transaction prior to the first APPC receive and then immediately after each <code dir="ltr">COMMIT</code> or <code dir="ltr">ROLLBACK</code> in the transaction. This ensures that the logging is done at the beginning of each unit of work.</p>
</li>
<li>
<p>OLTP Forget/Recovery Transaction<a id="sthref746"></a><a id="sthref747"></a></p>
<p>A separate APPC transaction must be created on the OLTP system that can be started by the gateway to forget a transaction once it has been successfully committed and to query a transaction&#39;s state during recovery processing. This transaction deletes the entry for a particular Oracle Global Transaction ID from the OLTP commit-confirm transaction log database during forget processing and queries the entry for a particular Oracle Global Transaction ID from the OLTP commit-confirm transaction log database during recovery processing.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Make sure that the gateway initialization parameters and the OLTP parameters are properly configured, as described in Chapter&nbsp;11 of the <a class="olink APPCI210" href="../APPCI/ch11.htm#APPCI210"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for IBM AIX on POWER Systems (64-Bit), Linux x86-64, Oracle Solaris on SPARC (64-Bit), and HP-UX Itanium</span></a> or Chapter 8 of the <a class="olink APPCW189" href="../APPCW/ch8.htm#APPCW189"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for Microsoft Windows</span></a> depending on your platform.</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1006698"></a>
<div id="APPUG1010" class="sect1">
<h2 class="sect1">Application Design Requirements<a id="sthref748"></a><a id="sthref749"></a></h2>
<p>When designing commit-confirm applications for use with the Oracle Database Gateway for APPC, there are some requirements you must meet to provide the ability for the gateway to determine the state of a transaction in the event of a failure. If these requirements are not met, attempting to use an application with a commit-confirm gateway will produce unpredictable results.</p>
<p>The first thing that must be done by an OLTP transaction invoked by a commit-confirm gateway is to receive the O<a id="sthref750"></a>racle Global Transaction ID from the gateway and log it into the OLTP commit-confirm transaction log database. This must be done before the normal data flow between the OLTP transaction and the Oracle application begins. The gateway always sends the Oracle Global Transaction ID as the very first data item.</p>
<p>If the OLTP transaction is a <a id="sthref751"></a>one-shot transaction, this is the only change needed. If the transaction is a <a id="sthref752"></a>persistent transaction that performs more than one unit of work (issues more than one commit or rollback), then a new Oracle Global Transaction ID must be received and logged after every <code dir="ltr">COMMIT</code> or <code dir="ltr">ROLLBACK</code>.</p>
<p>The Oracle Global Transaction ID is sent by the gateway in a variable-length record with a maximum length of 202 bytes. The first 32 bytes contain a special binary string used to verify that the data came from the gateway and not from some other application. The next 1 byte is a reserved field. The Oracle Global Transaction ID is next, with a maximum length of 169 bytes. You must log the reserved field and the Oracle Global Transaction ID, as well as a date/time stamp and any other information you wish to log. Note that the Oracle Global Transaction ID must be the key field for the log database so that the forget/recovery transaction can use the Oracle Global Transaction ID to directly access a log entry.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your OLTP is IMS/TM, you must add a PCB for the commit-confirm transaction log database to the PSB for each transaction that you will use with a commit-confirm gateway. This PCB must be the first PCB in the PSB.</div>
</div>
<!-- class="sect1" -->
<a id="i1006717"></a>
<div id="APPUG1011" class="sect1">
<h2 class="sect1">Commit-Confirm Architecture</h2>
<p>The architecture of the commit-confirm implementation in the Oracle Database Gateway for APPC consists of three main components: <a id="sthref753"></a><a id="sthref754"></a></p>
<ul>
<li>
<p>Oracle database</p>
</li>
<li>
<p>Oracle Database Gateway for APPC server (gateway server)</p>
</li>
<li>
<p>Logging server (an Oracle database holding the tables <code dir="ltr">PGA_CC_PENDING</code> and <code dir="ltr">PGA_CC_LOG</code>)</p>
</li>
</ul>
<p>This section describes the role each component plays in the operation of commit-confirm and how these components interact.</p>
<div id="APPUG1012" class="sect2"><a id="sthref755"></a>
<h3 class="sect2">Components</h3>
<p>The <a id="sthref756"></a>Oracle database is the controlling component in the commit-confirm architecture. It tells the gateway server when to commit a transaction and when to rollback a transaction. It does the same with all other servers participating in a distributed transaction. When a failure has occurred, it is the Oracle database acting as the integrating server which drives the recovery process in each participating server, including the gateway server. <a id="sthref757"></a></p>
<p>The <a id="sthref758"></a>gateway server performs the task of converting instructions from the Oracle database into LU6.2 operations and then logs the transaction into the logging server. The gateway server stores the log information in a table called <code dir="ltr">PGA_CC_PENDING</code> on the logging server. If a failure occurs during transaction processing, the gateway server determines which error should be returned to the Oracle database.</p>
<p>The <a id="sthref759"></a> logging server is an Oracle database available to the <a id="sthref760"></a>gateway server for storing and accessing its commit-confirm log information. The logging server need not be the same Oracle database which acts as the integrating server. Because the logging server is an integral component of gateway commit-confirm operations, the best place for it to reside is on the same system as the gateway server. This allows the communication between the gateway server and the logging server to use interprocess communications, providing a high-speed, low overhead, local connection between the components.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1013" class="sect2"><a id="sthref761"></a>
<h3 class="sect2">Interactions</h3>
<p>There is a specific set of interactions that occur between the components. They are: <a id="sthref762"></a></p>
<ul>
<li>
<p><a id="sthref763"></a>Oracle Database &lt;--&gt; Gateway Server</p>
<p>The Oracle database drives all actions by the gateway server. At the request of the Oracle application, the integrating server can instruct the gateway server to begin a new Oracle transaction, start a commit sequence, start a rollback sequence, or start a forget sequence. It can also call gateway remote procedural call (RPC) functions (<a id="sthref764"></a><code dir="ltr">PGAINIT</code>, <code dir="ltr">PGAXFER</code>, <code dir="ltr">PGATERM</code>) on behalf of the Oracle application.</p>
</li>
<li>
<p><a id="sthref765"></a>Gateway Server &lt;--&gt; Logging Server</p>
<p>The gateway server calls the<a id="sthref766"></a> logging server to insert and delete rows from its <code dir="ltr">PGA_CC_PENDING</code> table. This is actually done by calling a <a id="sthref767"></a>PL/SQL stored procedure, <code dir="ltr">PGA_CC_LOG</code>, in the logging server to reduce the number of open cursors required by the gateway server for performing its logging. Only a single cursor is needed by the gateway server for logging.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007098"></a>
<div id="APPUG1014" class="sect1">
<h2 class="sect1">Commit-Confirm Flow</h2>
<p>The flow of control for a successful commit between an Oracle application and an <a id="sthref768"></a>OLTP transaction is described in the following section and illustrated in <a href="#i1007167">Figure 5-1, &#34;Commit-Confirm Flow with Synclevel 1&#34;</a>. The figure assumes that both Oracle and OLTP resources have been updated.<a id="sthref769"></a> The following steps in <a href="#i1007152">Commit-Confirm Logic Flow, Step by Step</a> outline the commit-confirm logic flow.</p>
<a id="i1007152"></a>
<div id="APPUG1015" class="sect2">
<h3 class="sect2"><a id="sthref770"></a>Commit-Confirm Logic Flow, Step by Step</h3>
<ol>
<li>
<p>The application issues a <code dir="ltr">COMMIT</code> to the Oracle database.</p>
</li>
<li>
<p>The Oracle database sends <code dir="ltr">PREPARE</code> to each participant in the distributed transaction other than the gateway.</p>
</li>
<li>
<p>Each participant prepares its database updates and responds <code dir="ltr">PREPARE OK</code> to the Oracle database.</p>
</li>
<li>
<p>The Oracle database sends <code dir="ltr">COMMIT</code> to the gateway. The gateway receives the <code dir="ltr">COMMIT</code> from the Oracle database and inserts a new pending transaction row into the <code dir="ltr">PGA_CC_PENDING</code> table.</p>
</li>
<li>
<p>The gateway sends an APPC <code dir="ltr">CONFIRM</code> to the OLTP application. The OLTP application receives the <code dir="ltr">CONFIRM</code> request in the form of a status from the last APPC <code dir="ltr">RECEIVE</code>.</p>
</li>
<li>
<p>The OLTP application issues a <code dir="ltr">COMMIT</code> using an appropriate OLTP function. The OLTP commits all database updates made by the application since the last <code dir="ltr">COMMIT</code>, including the commit-confirm transaction log update.</p>
</li>
<li>
<p>Once the database updates have been committed, the OLTP returns control to the application with a return code indicating the status of the <code dir="ltr">COMMIT</code>.</p>
</li>
<li>
<p>The OLTP application sends an APPC <code dir="ltr">CONFIRMED</code> to the gateway.</p>
</li>
<li>
<p>The gateway receives the <code dir="ltr">CONFIRMED</code> and returns <code dir="ltr">COMMIT OK</code> to the Oracle database.</p>
</li>
<li>
<p>The Oracle database sends <code dir="ltr">COMMIT</code> to each participant in the distributed transaction other than the gateway.</p>
</li>
<li>
<p>Each participant commits its database updates and responds <code dir="ltr">COMMIT OK</code> to the Oracle database.</p>
</li>
<li>
<p>The Oracle database sends a <code dir="ltr">FORGET</code> to the gateway.</p>
</li>
<li>
<p>The gateway receives the <code dir="ltr">FORGET</code> and starts a new APPC conversation with the <code dir="ltr">FORGET/RECOVERY</code> transaction at the OLTP, sends it a <code dir="ltr">FORGET</code> request and an APPC <code dir="ltr">CONFIRM</code>. The <code dir="ltr">FORGET/RECOVERY</code> transaction receives the <code dir="ltr">FORGET</code> request and deletes the entry from the commit-confirm transaction log for the current Oracle transaction, and commits the delete.</p>
</li>
<li>
<p>The <code dir="ltr">FORGET/RECOVERY</code> transaction sends an APPC <code dir="ltr">CONFIRMED</code> to the gateway to indicate that the <code dir="ltr">FORGET</code> was processed, and then terminates. The gateway receives the <code dir="ltr">CONFIRMED</code> and deletes the pending transaction row from the <code dir="ltr">PGA_CC_PENDING</code> table.</p>
</li>
<li>
<p>The gateway returns <code dir="ltr">FORGET OK</code> to the Oracle database.</p>
</li>
<li>
<p>The Oracle database returns control to the Oracle application.</p>
</li>
</ol>
<p><a href="#i1007167">Figure 5-1, &#34;Commit-Confirm Flow with Synclevel 1&#34;</a> illustrates the Commit-Confirm logic flow described in the previous section.</p>
<div id="APPUG1310" class="figure">
<p class="titleinfigure"><a id="i1007167"></a>Figure 5-1 Commit-Confirm Flow with Synclevel 1</p>
<img width="606" height="464" src="img/comm5_1.gif" alt="Description of Figure 5-1 follows"/><br/>
<a id="sthref771" href="img_text/comm5_1.htm">Description of &#39;&#39;Figure 5-1 Commit-Confirm Flow with Synclevel 1&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div id="APPUG1016" class="sect2"><a id="sthref772"></a>
<h3 class="sect2">Gateway Server Commit-Confirm Transaction Log<a id="sthref773"></a></h3>
<p>The commit-confirm transaction log consists of a single table, <a id="sthref774"></a><code dir="ltr">PGA_CC_PENDING</code>. This table contains a row for each in-flight Oracle transaction that includes the commit-confirm gateway. The table is maintained by the <a id="sthref775"></a>gateway server and is similar in function to the Oracle database&#39;s <code dir="ltr">DBA_2PC_PENDING</code> table. Note that a row is not inserted into this table until a <code dir="ltr">COMMIT</code> is received by the gateway and the row is deleted when a <code dir="ltr">FORGET</code> is received by the gateway. There is no involvement by the gateway during the <code dir="ltr">PREPARE</code> phase.</p>
<p>The <code dir="ltr">PGA_CC_PENDING</code> table contains the following columns:</p>
<ul>
<li>
<p><a id="sthref776"></a><code dir="ltr">GLOBAL_TRAN_ID</code></p>
<p>This is the <a id="sthref777"></a>Oracle Global Transaction ID for the transaction. It is identical to the corresponding column in the <code dir="ltr">DBA_2PC_PENDING</code> table.</p>
</li>
<li>
<p><a id="sthref778"></a><code dir="ltr">SIDE_NAME</code></p>
<p>This is the Side Information Profile name that was used by the gateway to allocate the APPC conversation with the target LU. It corresponds to the <code dir="ltr">SIDENAME</code> parameter passed to the <code dir="ltr">PGAINIT</code> gateway function.</p>
</li>
<li>
<p><a id="sthref779"></a><code dir="ltr">LU_NAME</code></p>
<p>This is the fully-qualified partner LU name of the target LU. This value is either the LU name from the Side Information Profile or the <code dir="ltr">LUNAME</code> parameter passed to the <code dir="ltr">PGAINIT</code> gateway function. This name fully identifies the OLTP system on which the transaction was executed.</p>
</li>
<li>
<p><a id="sthref780"></a><code dir="ltr">MODE_NAME</code></p>
<p>This is the Mode name that was used by the gateway to allocate the APPC conversation with the target LU. The value is either the Mode name from the Side Information Profile or the <code dir="ltr">MODENAME</code> parameter passed to the <code dir="ltr">PGAINIT</code> gateway function.</p>
</li>
<li>
<p><a id="sthref781"></a><code dir="ltr">TP_NAME</code></p>
<p>This is the transaction program name executed at the target LU. The value is either the TP name from the Side Information Profile or the <code dir="ltr">TPNAME</code> parameter passed to the <code dir="ltr">PGAINIT</code> gateway function. This name fully identifies the OLTP transaction program that was executed.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6308">
<tr>
<td class="cellalignment6317">
<table class="cellalignment6313">
<tr>
<td class="cellalignment6312"><a href="app_sna.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6312"><a href="tcpmap.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6320">
<table class="cellalignment6311">
<tr>
<td class="cellalignment6312"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6312"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6312"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6312"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6312"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6312"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>