<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2127"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Datatype%20Conversions"></a><title>Datatype Conversions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1090"/>
<meta name="dcterms.created" content="2017-06-08T15:9:57Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Gateway for APPC User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17931-04"/>
<meta name="dcterms.isVersionOf" content="APPUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="apc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="apf.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17931-04.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">17/20</span> <!-- End Header -->
<div id="APPUG1113" class="appendix"><a id="g640607"></a>
<h1 class="appendix"><span class="secnum">D</span> Datatype Conversions</h1>
<p>You must convert <a id="sthref1229"></a>datatypes and <a id="sthref1230"></a>data formats properly when you are using the PGAU tool to generate TIPs and when you are developing a custom TIP using <a id="sthref1231"></a>PL/SQL and the <code dir="ltr">UTL_RAW</code> and <code dir="ltr">UTL_PG</code> functions.</p>
<p>Read this appendix to learn about datatype conversion as it relates to TIPs.</p>
<p>This appendix contains the following sections:</p>
<ul>
<li>
<p><a href="#i634289">Length Checking</a></p>
</li>
<li>
<p><a href="#i635226">Conversion</a></p>
</li>
</ul>
<a id="i634289"></a>
<div id="APPUG1114" class="sect1">
<h2 class="sect1">Length Checking</h2>
<p>PGAU-generated TIPs perform length checking at the end of every parameter sent and received.</p>
<p><a href="#CHDCAECJ">Table D-1</a> provides a list of length parameters generated by PGAU:</p>
<div id="APPUG1401" class="tblformal">
<p class="titleintable"><a id="sthref1232"></a><a id="CHDCAECJ"></a>Table D-1 Length Parameters</p>
<table class="cellalignment6315" title="Length Parameters" summary="provides a list of length parameters generated by PGAU" dir="ltr">
<thead>
<tr class="cellalignment6309">
<th class="cellalignment6316" id="r1c1-t2">Parameter</th>
<th class="cellalignment6316" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r2c1-t2" headers="r1c1-t2">
<p><a id="sthref1233"></a>expected length</p>
</td>
<td class="cellalignment6317" headers="r2c1-t2 r1c2-t2">
<p>Is computed by PGAU when the TIP is generated.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r3c1-t2" headers="r1c1-t2">
<p><a id="sthref1234"></a>convert length</p>
</td>
<td class="cellalignment6317" headers="r3c1-t2 r1c2-t2">
<p>Is summed by the TIP from each converted field.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r4c1-t2" headers="r1c1-t2">
<p><a id="sthref1235"></a>send length</p>
</td>
<td class="cellalignment6317" headers="r4c1-t2 r1c2-t2">
<p>Is the transmitted send data length and is also equal to the actual length for send parameters.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r5c1-t2" headers="r1c1-t2">
<p><a id="sthref1236"></a>receive length</p>
</td>
<td class="cellalignment6317" headers="r5c1-t2 r1c2-t2">
<p>Is the transmitted receive data length.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>An exception is raised when the convert length of a sent parameter does not equal its expected length. This occurs if too many or too few send field conversions are performed.</p>
<p>An exception is raised when the convert length of a received parameter does not equal its received length. These length exceptions result when too few or too many conversions are performed.</p>
<p>A warning is issued when the expected length of a received parameter does not equal its convert or received length and data conversion tracing is enabled. This occurs when a maximum length record is expected, but a shorter record is transmitted and correctly converted.</p>
<div id="APPUG1115" class="sect2"><a id="sthref1237"></a>
<h3 class="sect2">Parameters Over 32K in Length<a id="sthref1238"></a></h3>
<p>PGAU generates TIPs that support transmission of individual data parameters which exceed 32K bytes.</p>
<p>PGAU includes this support automatically when <a id="sthref1239"></a>PGAU <code dir="ltr">GENERATE</code> processing detects the maximum length of a data parameter exceeding 32K.</p>
<p>This support is driven by the data definitions placed in the <a id="sthref1240"></a>PG DD and cannot be selected by the user. To include the support, the data definition must actually or possible exceed 32K. <a id="sthref1241"></a>To remove the support, you must decrease the parameter length to less than 32K, <code dir="ltr">REDEFINE</code> the data, and <code dir="ltr">GENERATE</code> the TIP again.</p>
<p>This support tests for field positions crossing the 32K buffer boundaries before and after conversion of those fields which lie across such boundaries. In the case of repeating groups, This can be many fields, for repeating groups, or few fields in the case of simple linear records.</p>
<p>Each test and the corresponding buffer management logic adds overhead.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
The target of a <code dir="ltr">REDEFINE</code> clause cannot reside in a previously processed buffer. Run-time TIP processing of the fields containing such <code dir="ltr">REDEFINE</code> clauses get unpredictable results.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i635226"></a>
<div id="APPUG1116" class="sect1">
<h2 class="sect1">Conversion</h2>
<p>The <a id="sthref1242"></a>PG DD and <a id="sthref1243"></a>TIPs generated by PGAU support <a id="sthref1244"></a><a id="sthref1245"></a>COBOL, specified as <code dir="ltr">IBMVSCOBOLII</code> when defining data.</p>
<a id="g640399"></a>
<div id="APPUG1117" class="sect2">
<h3 class="sect2">USAGE(PASS)<a id="sthref1246"></a></h3>
<p>When <code dir="ltr">USAGE(PASS)</code> has been specified on the <a id="sthref1247"></a>PGAU <code dir="ltr">DEFINE DATA</code> statement, the following datatype and format conversions are supported:</p>
<ul>
<li>
<p><code dir="ltr"><a id="sthref1248"></a>PIC X</code><a id="sthref1249"></a></p>
</li>
<li>
<p><a id="sthref1250"></a><code dir="ltr">PIC G</code></p>
</li>
</ul>
<p class="subhead1"><a id="i635836"></a><a id="APPUG1402"></a>PIC X Datatype Conversions <a id="sthref1251"></a></p>
<p>PGAU TIPs convert the COBOL <code dir="ltr">X</code> datatype to a PL/SQL <code dir="ltr">CHAR</code> datatype of the same character length. Globalization Support character set translation is also performed.</p>
<p><span class="bold">Note</span>: <a id="sthref1252"></a>COBOL lacks a datatype specifically designated for variable length data. It is represented in COBOL as a subgroup containing a <code dir="ltr">PIC 9</code> length field followed by a <code dir="ltr">PIC X</code> character field. For example:</p>
<p><code dir="ltr">10 NAME</code>.</p>
<p><code dir="ltr">1</code><code dir="ltr">5 LENGTH PIC S9(4)</code>.</p>
<p><code dir="ltr">15 LETTERS PIC X(30)</code>.</p>
<p>Given this context, it cannot be guaranteed that all instances of an <code dir="ltr">S9(4)</code> field followed by an <code dir="ltr">X</code> field are always variable length data. Rather than PGAU TIPs converting the above COBOL group <code dir="ltr">NAME</code> to a <code dir="ltr">VARCHAR</code>, the TIPs instead construct a nested PL/SQL record as follows:</p>
<pre dir="ltr">TYPE NAME_typ is RECORD (
  LENGTH NUMBER(4,0),
  LETTERS CHAR(30));
</pre>
<pre dir="ltr"></pre>
<pre dir="ltr">TYPE ... is RECORD(
  ...
  NAME NAME_typ,
  ...
</pre>
<p>It is the client application&#39;s responsibility (based upon specific knowledge of the remote host data) to extract <code dir="ltr">NAME.LENGTH</code> characters from <code dir="ltr">NAME.LETTERS</code> and assign the result to a PL/SQL <code dir="ltr">VARCHAR</code>, if a <code dir="ltr">VARCHAR</code> is desired.</p>
<p><a id="i634376"></a>Character set conversion is performed for single byte encoded:</p>
<ul>
<li>
<p>remote host character data, using either:</p>
<ul>
<li>
<p><code dir="ltr">DEFINE TRANSACTION NLS_LANGUAGE</code> character set for an entire transaction, or</p>
</li>
<li>
<p><code dir="ltr">REDEFINE DATA REMOTE_LANGUAGE</code> character set for a single field, if specified.</p>
</li>
</ul>
</li>
<li>
<p>local Oracle character data, using either:</p>
<ul>
<li>
<p><code dir="ltr">LANGUAGE</code> character set of integrating server for an entire transaction, or</p>
</li>
<li>
<p><code dir="ltr">REDEFINE DATA LOCAL_LANGUAGE</code> character set for a single field, if specified.</p>
</li>
</ul>
</li>
</ul>
<p class="subhead1"><a id="APPUG1403"></a>PIC G Datatype Conversions</p>
<p><a id="sthref1253"></a><a id="sthref1254"></a>PGAU generated TIPs convert the COBOL <code dir="ltr">G</code> datatype to a PL/SQL <code dir="ltr">VARCHAR2</code> datatype of the same length, allowing 2 bytes for every character position.</p>
<p>Character set conversion is performed for double-byte and multi-byte encoded:</p>
<ul>
<li>
<p>remote host character data, using either:</p>
<ul>
<li>
<p><code dir="ltr">DEFINE TRANSACTION REMOTE_MBCS</code> character set for an entire transaction, or</p>
</li>
<li>
<p><code dir="ltr">REDEFINE DATA REMOTE_LANGUAGE</code> character set for a single field, if specified.</p>
</li>
</ul>
</li>
<li>
<p>local Oracle character data, using either:</p>
<ul>
<li>
<p><code dir="ltr">DEFINE TRANSACTION LOCAL_MBCS</code> character set for an entire transaction, or</p>
</li>
<li>
<p><code dir="ltr">REDEFINE DATA LOCAL_LANGUAGE</code> character set for a single field, if specified.</p>
</li>
</ul>
</li>
</ul>
<p class="subhead1"><a id="i634399"></a><a id="APPUG1404"></a>Alphanumeric and DBCS Editing Field Positions</p>
<p><a href="#g638227">Table D-2</a> illustrates how <a id="sthref1255"></a><a id="sthref1256"></a>PGAU interprets <a id="sthref1257"></a><a id="sthref1258"></a>COBOL symbols in datatype conversions, by providing the definitions for the symbols.</p>
<div id="APPUG1405" class="tblformal">
<p class="titleintable"><a id="sthref1259"></a><a id="g638227"></a>Table D-2 COBOL Symbol Definitions</p>
<table class="cellalignment6315" title="COBOL Symbol Definitions" summary="illustrates how PGAU interprets COBOL symbols in datatype conversions, by providing the definitions for the symbols" dir="ltr">
<thead>
<tr class="cellalignment6309">
<th class="cellalignment6316" id="r1c1-t4">COBOL Symbols</th>
<th class="cellalignment6316" id="r1c2-t4">Oracle Definition of COBOL Symbols - Data Content</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r2c1-t4" headers="r1c1-t4">
<p>&#39;B&#39;</p>
</td>
<td class="cellalignment6317" headers="r2c1-t4 r1c2-t4">
<p>blank (1 byte SBCS or 2 bytes DBCS depending on USAGE)</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r3c1-t4" headers="r1c1-t4">
<p>&#39;0&#39;</p>
</td>
<td class="cellalignment6317" headers="r3c1-t4 r1c2-t4">
<p>zero (1 byte SBCS)</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r4c1-t4" headers="r1c1-t4">
<p>&#39;/&#39;</p>
</td>
<td class="cellalignment6317" headers="r4c1-t4 r1c2-t4">
<p>forward slash (1 byte SBCS)</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r5c1-t4" headers="r1c1-t4">
<p>&#39;G&#39;</p>
</td>
<td class="cellalignment6317" headers="r5c1-t4 r1c2-t4">
<p>double byte</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Edited positions in COBOL statement data received from the remote host are converted by PGAU along with the entire field and passed to the client application in the corresponding PL/SQL <code dir="ltr">VARCHAR2</code> output variable.</p>
<p>When editing symbols are present, they are interpreted to mean the remote host field contains the COBOL data content and length indicated. The editing positions are included in the length of the data field, but conversion of all field positions is processed by PGAU as a single string and no special scanning or translation is done for edited byte positions.</p>
<p>Edited positions in COBOL statement data sent to the remote host are converted by PGAU along with the entire PL/SQL <code dir="ltr">VARCHAR2</code> input variable passed from the client application.</p>
<p><a href="#g638174">Table D-3</a> provides an example of how PGAU converts COBOL datatypes:</p>
<div id="APPUG1406" class="tblformal">
<p class="titleintable"><a id="sthref1260"></a><a id="g638174"></a>Table D-3 COBOL-PGAU Conversion</p>
<table class="cellalignment6315" title="COBOL-PGAU Conversion" summary="provides an example of how PGAU converts COBOL datatypes" dir="ltr">
<thead>
<tr class="cellalignment6309">
<th class="cellalignment6316" id="r1c1-t5">COBOL Datatype</th>
<th class="cellalignment6316" id="r1c2-t5">Description of Conversion by PGAU</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PIC XXXBBXX</code></p>
</td>
<td class="cellalignment6317" headers="r2c1-t5 r1c2-t5">
<p>Is an alphanumeric field 7 bytes in length and would be converted in a single <code dir="ltr">UTL_RAW.CONVERT</code> call. No testing or translation is done on the contents of the byte positions indicated by &#39;B&#39;. While COBOL language rules indicate that these positions contain &#34;<code dir="ltr">blank</code>&#34; in the character set specified for the remote host, what data is actually present is the user&#39;s responsibility.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PIC GGBGGG</code></p>
</td>
<td class="cellalignment6317" headers="r3c1-t5 r1c2-t5">
<p>Is a DBCS field 12 bytes in length and would be converted in a single <code dir="ltr">UTL_RAW.CONVERT</code> call. No testing or translation is done on the contents of the byte positions indicated by &#39;B&#39;. While COBOL language rules indicate that these positions contain &#34;<code dir="ltr">blank</code>&#34; in the character set specified for the remote host, what data is actually present is the user&#39;s responsibility.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PIC 9<a id="sthref1261"></a><a id="sthref1262"></a></code></p>
</td>
<td class="cellalignment6317" headers="r4c1-t5 r1c2-t5">
<p>PGAU TIPs convert the COBOL <code dir="ltr">9</code> datatype to a PL/SQL <code dir="ltr">NUMBER</code> datatype of the same precision and scale. Globalization Support character set translation is also performed on signs, currency symbols, and spaces.</p>
<p>The following are supported:</p>
<ul>
<li>
<p><code dir="ltr">COMPUTATIONAL</code> (binary)</p>
</li>
<li>
<p><code dir="ltr">COMPUTATIONAL-3</code> (packed decimal)</p>
</li>
<li>
<p><code dir="ltr">COMPUTATIONAL-4</code> (binary)</p>
</li>
<li>
<p><code dir="ltr">DISPLAY</code> (zoned decimal)</p>
</li>
</ul>
<p>For <code dir="ltr">DISPLAY</code> datatypes, the following sign specifications are supported:</p>
<ul>
<li>
<p><code dir="ltr">SEPARATE [CHARACTER]</code></p>
</li>
<li>
<p><code dir="ltr">LEADING</code></p>
</li>
<li>
<p><code dir="ltr">TRAILING</code></p>
</li>
</ul>
<p>Refer to <a href="apc.htm#i635625">&#34;NUMBER_TO_RAW and RAW_TO_NUMBER Argument Values&#34;</a> in <a href="apc.htm#g656113">Appendix C, &#34;The UTL_PG Interface&#34;</a> for more information about numeric datatype conversions.</p>
<p><code dir="ltr">COMPUTATIONAL-1</code> and <code dir="ltr">COMPUTATIONAL-2</code> (floating point) datatypes are not supported.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">FILLER</code><a id="sthref1263"></a></p>
</td>
<td class="cellalignment6317" headers="r5c1-t5 r1c2-t5">
<p>COBOL <code dir="ltr">FILLER</code> fields are recognized by PGAU by the spelling of the element name <code dir="ltr">FILLER</code>. PGAU does not generate any data conversion for such elements, but does require their space be properly allocated to preserve offsets within the records exchanged with the remote host transaction.</p>
<p>If a <code dir="ltr">RENAMES</code> or <code dir="ltr">REDEFINES</code> definition covers a <code dir="ltr">FILLER</code> element, PGAU generates data conversion statements for the same area when it is referenced as a component of the <code dir="ltr">RENAMES</code> or <code dir="ltr">REDEFINES</code> variable. Such data conversion reflects only the format of the <code dir="ltr">RENAMES</code> or <code dir="ltr">REDEFINES</code> definition and not the bounds of the <code dir="ltr">FILLER</code> definition.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead1"><a id="i634474"></a><a id="APPUG1407"></a>Format Conversion<a id="sthref1264"></a><a id="sthref1265"></a></p>
<p><a href="#g638193">Table D-4</a> describes format conversion:</p>
<div id="APPUG1408" class="tblformal">
<p class="titleintable"><a id="sthref1266"></a><a id="g638193"></a>Table D-4 Format Conversion Descriptions</p>
<table class="cellalignment6315" title="Format Conversion Descriptions" summary="describes format conversion" dir="ltr">
<thead>
<tr class="cellalignment6309">
<th class="cellalignment6316" id="r1c1-t6">Item</th>
<th class="cellalignment6316" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">JUSTIFIED |<a id="sthref1267"></a></code><br/>
<code dir="ltr">JUSTIFIED RIGHT<a id="sthref1268"></a></code></p>
</td>
<td class="cellalignment6317" headers="r2c1-t6 r1c2-t6">
<p>This causes remote host transaction data to be converted as a PL/SQL <code dir="ltr">CHAR</code> datatype according to character datatype, as discussed in <a href="#i635836">&#34;PIC X Datatype Conversions&#34;</a>, for both <code dir="ltr">IN</code> and <code dir="ltr">OUT</code> parameters.</p>
<p><code dir="ltr">IN</code> parameter data passed from the application is stripped of its rightmost blanks and left padded as required. Then it is sent to the remote host.</p>
<p><code dir="ltr">OUT</code> parameter data is aligned as it is received from the remote host and padded with blanks as required on the left. Then it is passed to the application.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">JUSTIFIED LEFT</code><a id="sthref1269"></a></p>
</td>
<td class="cellalignment6317" headers="r3c1-t6 r1c2-t6">
<p>This causes warnings to be issued during TIP generation. No alignment is performed. This is treated as documentation.</p>
<p>The remote host transaction data is converted as a PL/SQL <code dir="ltr">CHAR</code> datatype according to character datatype, as discussed in <a href="#i635836">&#34;PIC X Datatype Conversions&#34;</a>, for both <code dir="ltr">IN</code> and <code dir="ltr">OUT</code> parameters.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">LENGTH IS field-2</code> <a id="sthref1270"></a></p>
</td>
<td class="cellalignment6317" headers="r4c1-t6 r1c2-t6">
<p>This is an Oracle extension to the data definition as stored in the PG DD. This extension exists only in the PGAU context and is not valid COBOL syntax.</p>
<p>The purpose of this extension is to provide a means for variable-length character data to be processed more efficiently by the TIP conversion logic. This is an alternative to defining a variable-length PIC X field as <code dir="ltr">PIC X(1) OCCURS DEPENDING ON</code> <code dir="ltr"><span class="codeinlineitalic">field-2</span></code>, where <code dir="ltr"><span class="codeinlineitalic">field-2</span></code> is the length of the field. With this extension, the same field could be defined as <code dir="ltr">PIC X(5000) LENGTH IS</code> <code dir="ltr"><span class="codeinlineitalic">field-2</span></code>, where <code dir="ltr"><span class="codeinlineitalic">field -2</span></code> is the length of the field. The TIP is able to pick up the length and do the character set conversion on the field with a single <code dir="ltr">UTL_RAW.CONVERT</code> call instead of using a loop to do the conversion one character at a time.</p>
<p>Note that the use of this construct does not affect the COBOL program. The <code dir="ltr">PIC X</code> (or <code dir="ltr">PIC G</code>) field is still fixed-length as far as COBOL is concerned, so the position of the data does not change, nor does the amount of data that is transferred between the gateway and the OLTP. However, if the field is the last field in a COBOL definition, then the COBOL program could be modified to send only the number of bytes required to satisfy the length set in the <code dir="ltr"><span class="codeinlineitalic">field-2</span></code> field referenced by the <code dir="ltr">LENGTH IS</code> clause.</p>
<p>The <code dir="ltr">LENGTH IS</code> clause can be specified only for <code dir="ltr">PIC X</code> and <code dir="ltr">PIC G</code> fields, and the picture mask for those fields cannot contain editing characters.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">OCCURS n TIMES<a id="sthref1271"></a><a id="sthref1272"></a></code></p>
</td>
<td class="cellalignment6317" headers="r5c1-t6 r1c2-t6">
<p>This causes conversion of exactly &#39;<code dir="ltr">n</code>&#39; instances of a set of <a id="sthref1273"></a>PL/SQL variables to or from a repeating group area within the remote host record, the size of which area equals the group length times &#39;<code dir="ltr">n</code>&#39; repetitions. PGAU generated TIPs employ PL/SQL <code dir="ltr">RECORD</code>s of <code dir="ltr">TABLE</code>s to implement an array-like subscript on fields within a repeating group. PL/SQL supports a single dimension <code dir="ltr">TABLE</code>, and consequently PGAU supports only a single level of an <code dir="ltr">OCCURS</code> group. Nested <code dir="ltr">OCCURS</code> groups are not supported. The conversion and formatting performed are dictated by the COBOL datatype of each subfield defined within the repeating group, as documented in <a href="#i635836">&#34;PIC X Datatype Conversions&#34;</a> and <a href="#i634474">&#34;Format Conversion&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">OCCURS m</code> <code dir="ltr">TO n</code> <code dir="ltr">TIMES DEPENDING ON</code><a id="sthref1274"></a><a id="sthref1275"></a> <code dir="ltr"><span class="codeinlineitalic">field-2</span></code></p>
</td>
<td class="cellalignment6317" headers="r6c1-t6 r1c2-t6">
<p>This causes conversion of at least &#39;<code dir="ltr">m</code>&#39; and not over &#39;<code dir="ltr">n</code>&#39; instances of a set of <a id="sthref1276"></a>PL/SQL variables to or from a repeating group area within the remote host record, the size of which area equals the group length times the repetition count contained in the named field. PGAU generated TIPs employ PL/SQL <code dir="ltr">RECORD</code>s of <code dir="ltr">TABLE</code>s to implement an array-like subscript on fields within a repeating group. PL/SQL supports a single dimension <code dir="ltr">TABLE</code>, and consequently PGAU supports only a single level of an <code dir="ltr">OCCURS DEPENDING ON</code> group. Nested <code dir="ltr">OCCURS DEPENDING ON</code> groups are not supported. The conversion and formatting performed are dictated by the COBOL datatype of each subfield defined within the repeating group, as documented in <a href="#i635836">&#34;PIC X Datatype Conversions&#34;</a> and <a href="#i634474">&#34;Format Conversion&#34;</a>.</p>
<p>Range conversion: PGAU-generated TIPs use a &#39;<code dir="ltr">FOR ... LOOP</code>&#39; algorithm with a range of 1 to whatever <code dir="ltr">TIMES</code> upper limit was specified. When the TIP has been generated with the <code dir="ltr">DIAGNOSE(PKGEX(DC))</code> option, the PL/SQL FOR statement which iterates an <code dir="ltr">OCCURS DEPENDING ON</code> repeating group is preceded by an <code dir="ltr">IF</code> test to ensure at TIP runtime that the <code dir="ltr">DEPENDING ON</code> field contains a number which lies within the specified range for which the lower limit need not be 1. An exception is raised if this test fails.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">RENAMES<a id="sthref1277"></a> item-2 THRU item-3</code></p>
</td>
<td class="cellalignment6317" headers="r7c1-t6 r1c2-t6">
<p>A single <a id="sthref1278"></a>PL/SQL variable declaration corresponds to a <code dir="ltr">RENAMES</code> definition. If all the subfields covered by a <code dir="ltr">RENAMES</code> definition are <code dir="ltr">PIC X</code>, then the PL/SQL variable is a <code dir="ltr">VARCHAR2</code>. Otherwise any non-PIC X subfield causes the PL/SQL variable datatype to be RAW.</p>
<p>Lengths of renamed fields do not contribute to the overall parameter data length because the original fields dictate the lengths.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">REDEFINES<a id="sthref1279"></a> item-2 WHEN item-3=value</code></p>
</td>
<td class="cellalignment6317" headers="r8c1-t6 r1c2-t6">
<p>The &#39;<code dir="ltr">WHEN item-3=value</code>&#39; is an Oracle extension to the data definition as stored in the PG DD. This extension exists only in the PGA context and is not valid COBOL syntax.</p>
<p>The purpose of this extension is to provide a means for the gateway administrator or application developer to specify the criteria by which the redefinition is to be applied. For example, a record type field is often present in a record and different record formats apply depending on which record type is being processed. The specification of which type value applies to which redefinition is typically buried in the transaction programming logic, not in the data definition. To specify which conversion to perform on redefined formats in the TIP, the <code dir="ltr">WHEN</code> criteria was added to PGA data definitions.</p>
<p>PGAU generates PL/SQL nested record declarations which correspond in name and datatype to the subordinate elements covered by the <code dir="ltr">REDEFINES</code> definition. The standard PGAU datatype determination described in <a href="#i635836">&#34;PIC X Datatype Conversions&#34;</a>.</p>
<p><code dir="ltr">LEVEL 01</code> <code dir="ltr">REDEFINE</code> is ignored:</p>
<p>This permits remote host copybooks to include definitions which <code dir="ltr">REDEFINE</code> other transaction working storage buffers without having to define such buffers in the TIP or alter the copybook used as input for the definition.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">SYNCHRONIZED |<a id="sthref1280"></a></code><br/>
<code dir="ltr">SYNCHRONIZED<a id="sthref1281"></a> RIGHT</code></p>
</td>
<td class="cellalignment6317" headers="r9c1-t6 r1c2-t6">
<p>This causes the numeric field to be aligned on boundaries as dictated by the remote host environment, compiler language, and datatype.</p>
<p>Numeric conversion is performed on the aligned data fields according to numeric datatype, as discussed in <a href="#i635836">&#34;PIC X Datatype Conversions&#34;</a>, for both <code dir="ltr">IN</code> and <code dir="ltr">OUT</code> parameters.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">SYNCHRONIZED LEFT</code><a id="sthref1282"></a></p>
</td>
<td class="cellalignment6317" headers="r10c1-t6 r1c2-t6">
<p>This causes warnings to be issued during TIP generation and no realignment is performed. This is treated as documentation.</p>
<p>Numeric conversion is performed on the aligned data fields according to numeric datatype, as discussed in <a href="#i635836">&#34;PIC X Datatype Conversions&#34;</a>, for both <code dir="ltr">IN</code> and <code dir="ltr">OUT</code> parameters.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="APPUG1118" class="sect2"><a id="sthref1283"></a>
<h3 class="sect2">USAGE(ASIS)<a id="sthref1284"></a></h3>
<p><a id="sthref1285"></a>When <code dir="ltr">USAGE(ASIS)</code> is specified on the PGAU <code dir="ltr">DEFINE DATA</code> statement, no conversion is performed. Consequently, each such field is simply copied to a PL/SQL RAW of the same byte length. No conversion, translation, or reformatting is done.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1119" class="sect2"><a id="sthref1286"></a>
<h3 class="sect2">USAGE(SKIP)<a id="sthref1287"></a></h3>
<p>When <a id="sthref1288"></a><code dir="ltr">USAGE(SKIP)</code> is specified on the PGAU <code dir="ltr">DEFINE DATA</code> statement, no data exchange is performed. The data is skipped as if it did not exist. Consequently, such fields are not selected from the <a id="sthref1289"></a>PG DD, not reflected in the TIP logic, and presumed absent from the data streams exchanged with the remote host. The purpose of &#34;<code dir="ltr">SKIP</code>&#34; is to have definitions in the PG DD, but not active, perhaps because a remote host has either removed the field or has yet to include the field. <code dir="ltr">SKIP</code> allows an existing data definition to be used even though some fields do not exist at the remote host.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1120" class="sect2"><a id="sthref1290"></a>
<h3 class="sect2">PL/SQL Naming Algorithms<a id="sthref1291"></a><a id="sthref1292"></a></h3>
<p class="subhead1"><a id="APPUG1409"></a>Delimiters<a id="sthref1293"></a></p>
<p><a id="sthref1294"></a>COBOL special characters in record, group, and element names are translated when PGAU <code dir="ltr">DEFINE</code> inserts definitions into the PG DD, and by PGAU <code dir="ltr">GENERATE</code> when definitions are selected from the PG DD. Special characters are translated as follows:</p>
<ul>
<li>
<p>hyphen is translated to underscore (_)</p>
</li>
<li>
<p>period is deleted</p>
</li>
</ul>
<p class="subhead1"><a id="APPUG1410"></a>Qualified Compound Names<a id="sthref1295"></a></p>
<p><a id="sthref1296"></a><a id="sthref1297"></a>PL/SQL variable names are fully qualified and composed from:</p>
<ul>
<li>
<p>PL/SQL record name as the leftmost qualifier corresponding to level 01 or 77 COBOL record name.</p>
</li>
<li>
<p>PL/SQL nested record names corresponding to COBOL group names.</p>
</li>
<li>
<p>PL/SQL nested fields corresponding to COBOL elements of datatype:</p>
<ul>
<li>
<p><code dir="ltr">CHAR</code> or <code dir="ltr">NUMBER</code> corresponding to non-repeating COBOL elements.</p>
</li>
<li>
<p><code dir="ltr">TABLE</code> corresponding to COBOL elements which fall within an <code dir="ltr">OCCURS</code> or <code dir="ltr">OCCURS DEPENDING ON</code> group (COBOL repeating fields correspond to PL/SQL nested <code dir="ltr">RECORD</code>s of <code dir="ltr">TABLE</code>&#39;s).</p>
</li>
</ul>
</li>
</ul>
<p>Note that when referencing <a id="sthref1298"></a>PL/SQL variables from calling applications, the TIP package name must be prefixed as the leftmost qualifier. Thus the fully qualified reference to the PL/SQL variable which corresponds to:</p>
<ul>
<li>
<p><code dir="ltr">SKILL</code> is:</p>
</li>
</ul>
<pre dir="ltr">tipname.EMPREC_Typ.SKILL(SKILL_Key)
</pre>
<ul>
<li>
<p><code dir="ltr">HOME_ADDRESS</code> <code dir="ltr">ZIP</code> is:</p>
</li>
</ul>
<pre dir="ltr">tipname.EMPREC_Typ.HOME_ADDRESS.ZIP.FIRST_FIVE
tipname.EMPREC_Typ.HOME_ADDRESS.ZIP.LAST_FOUR 
</pre>
<p class="subhead1"><a id="APPUG1411"></a>Truncated and Non-Unique Names</p>
<p><a id="sthref1299"></a><a id="sthref1300"></a>PGAU truncates field names and corresponding PL/SQL variable names when the name exceeds:</p>
<ul>
<li>
<p>26 bytes for fields within an aggregate record or group</p>
<p>This is due to the need to suffix each field or PL/SQL variable name with:</p>
<ul>
<li>
<p>&#34;<code dir="ltr">_Typ</code>&#34; for group names</p>
</li>
<li>
<p>&#34;<code dir="ltr">_Tbl</code>&#34; for element names with a repeating group</p>
</li>
</ul>
<p>or</p>
</li>
<li>
<p>30 bytes due to the PL/SQL limitation of 30 bytes for any name</p>
<p>The rightmost four characters are truncated. This imposes the restriction that names be unique to <code dir="ltr">26</code> characters.</p>
</li>
</ul>
<p class="subhead1"><a id="APPUG1412"></a>Duplicate Names<a id="sthref1301"></a><a id="sthref1302"></a></p>
<p>COBOL allows repetitive definition of the same group or element names within a record, and the context of the higher level groups serves to uniquely qualify names. However, because PGAU-generated TIPs declare PL/SQL record variables which reference nested PL/SQL records for subordinate groups and fields, such nested PL/SQL record types can have duplicate names.</p>
<p>Given the following COBOL definition, note that ZIP is uniquely qualified in COBOL, but the corresponding PL/SQL declaration would have a duplicate nested record type for ZIP.</p>
<pre dir="ltr">01  EMPREC.     
    05 HIREDATE             PIC X(8).   
    05 BIRTHDATE            PIC X(8). 
    05 SKILL                PIC X(12) OCCURS 4.  
    05 EMPNO                PIC 9(4).
    05 EMPNAME.  
       10 FIRST-NAME        PIC X(10).
       10 LAST-NAME         PIC X(15).   
    05 HOME-ADDRESS. 
       10 STREET            PIC X(20).  
       10 CITY              PIC X(15). 
       10 STATE             PIC XX. 
       10 ZIP.   
          15 FIRST-FIVE     PIC X(5).  
          15 LAST-FOUR      PIC X(4).   
    05 DEPT                 PIC X(45).    
    05 OFFICE-ADDRESS.          
       10 STREET            PIC X(20).  
       10 CITY              PIC X(15).
       10 STATE             PIC XX. 
       10 ZIP.                         
          15 FIRST-FIVE     PIC X(5).     
          15 LAST-FOUR      PIC X(4).  
    05 JOBTITLE             PIC X(20).
</pre>
<p>PGAU avoids declaring duplicate nested record types, and generates the following PL/SQL:</p>
<pre dir="ltr">SKILL_Key BINARY_INTEGER;                                                                                 
TYPE SKILL_Tbl is TABLE of CHAR(12) 
                     INDEX by BINARY_INTEGER;                                                                                           
      TYPE EMPNAME_Typ is RECORD (   
           FIRST_NAME            CHAR(10),   
                       LAST_NAME                           CHAR(15));                                                                                    
      TYPE ZIP_Typ is RECORD (  
           FIRST_FIVE            CHAR(5), 
                     LAST_FOUR                         CHAR(4));                                                                               
      TYPE HOME_ADDRESS_Typ is RECORD (
           STREET                CHAR(20), 
           CITY                  CHAR(15),  
           STATE                 CHAR(2), 
                      ZIP                                     ZIP_Typ);                                                                                 
      TYPE OFFICE_ADDRESS_Typ is RECORD (   
           STREET                CHAR(20),
           CITY                  CHAR(15),  
           STATE                 CHAR(2),   
           ZIP                   ZIP_Typ); 
                                                                                       
      TYPE EMPREC_Typ is RECORD (  
           HIREDATE              CHAR(8), 
           BIRTHDATE             CHAR(8),  
           SKILL                 SKILL_Tbl, 
           EMPNO                 NUMBER(4,0),   
           EMPNAME               EMPNAME_Typ, 
           HOME_ADDRESS          HOME_ADDRESS_Typ,
           DEPT                  CHAR(45),
           OFFICE_ADDRESS        OFFICE_ADDRESS_Typ,
           JOBTITLE              CHAR(20));
</pre>
<p>However, in the case where multiple nested groups have the same name but have different subfields (see <code dir="ltr">ZIP</code> following):</p>
<pre dir="ltr">05 HOME-ADDRESS.   
      10 STREET             PIC X(20). 
      10 CITY               PIC X(15).   
      10 STATE              PIC XX. 
      10 ZIP.                     
         15 LEFTMOST-FOUR   PIC X(4).
         15 RIGHMOST-FIVE   PIC X(5).    
05 DEPT                     PIC X(45).   
05 OFFICE-ADDRESS.  
   10 STREET                 PIC X(20). 
   10 CITY                   PIC X(15). 
   10 STATE                  PIC XX.  
   10 ZIP.                     
      15 FIRST-FIVE          PIC X(5). 
      15 LAST-FOUR           PIC X(4).  
05 JOBTITLE                  PIC X(20).   
         
</pre>
<p>PGAU alters the name of the PL/SQL nested record type for each declaration in which the subfields differ in name, datatype, or options. Note the &#34;<code dir="ltr">02</code>&#34; appended to the second declaration (<code dir="ltr">ZIP_Typ02</code>), and its reference in <code dir="ltr">OFFICE_ADDRESS</code>.</p>
<pre dir="ltr">TYPE EMPNAME_Typ is RECORD (    
    FIRST_NAME              CHAR(10),
      LAST_NAME                       CHAR(15));                                                                                 
TYPE ZIP_Typ is RECORD (
    LEFTMOST_FOUR         CHAR(4),  
     RIGHTMOST_FIVE        CHAR(5));                                                                 
    TYPE HOME_ADDRESS_Typ is RECORD (    
    STREET                CHAR(20), 
    CITY                  CHAR(15),
    STATE                 CHAR(2),
       ZIP                                  ZIP_Typ);                                                                                  
TYPE ZIP_Typ02 is RECORD ( 
    FIRST_FIVE            CHAR(5), 
       LAST_FOUR                       CHAR(4));                                                                                 
TYPE OFFICE_ADDRESS_Typ is RECORD ( 
    STREET                CHAR(20),   
    CITY                  CHAR(15),   
    STATE                 CHAR(2), 
       ZIP                                  ZIP_Typ02);                                                                                
TYPE EMPREC_Typ is RECORD (
    HIREDATE              CHAR(8), 
    BIRTHDATE             CHAR(8),  
    SKILL                 SKILL_Tbl,   
    EMPNO                 NUMBER(4,0),  
    EMPNAME               EMPNAME_Typ, 
    HOME_ADDRESS          HOME_ADDRESS_Typ, 
    DEPT                  CHAR(45),    
    OFFICE_ADDRESS        OFFICE_ADDRESS_Typ,   
    JOBTITLE               CHAR(20));  
</pre>
<p>And the fully qualified reference to the PL/SQL variable which corresponds to:</p>
<ul>
<li>
<p><code dir="ltr">HOME_ADDRESS.ZIP</code> is:</p>
<pre dir="ltr">tipname.EMPREC_Typ.HOME_ADDRESS.ZIP.LEFTMOST_FOUR
tipname.EMPREC_Typ.HOME_ADDRESS.ZIP.RIGHTMOST_FIVE 
</pre></li>
<li>
<p><code dir="ltr">OFFICE_ADDRESS.ZIP</code> is:</p>
<pre dir="ltr">tipname.EMPREC_Typ.OFFICE_ADDRESS.ZIP.FIRST_FIVE
tipname.EMPREC_Typ.OFFICE_ADDRESS.ZIP.LAST_FOUR
</pre></li>
</ul>
<p>Note that the nested record type name <code dir="ltr">ZIP_Typ02</code> is not used in the reference, but is implicit within PL/SQL&#39;s association of the nested records.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6308">
<tr>
<td class="cellalignment6317">
<table class="cellalignment6313">
<tr>
<td class="cellalignment6312"><a href="apc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6312"><a href="apf.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6320">
<table class="cellalignment6311">
<tr>
<td class="cellalignment6312"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6312"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6312"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6312"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6312"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6312"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>