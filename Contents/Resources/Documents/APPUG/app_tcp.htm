<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2131"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Client%20Application%20Development%20%28TCP%2FIP%20Only%29"></a><title>Client Application Development (TCP/IP Only)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1090"/>
<meta name="dcterms.created" content="2017-06-08T15:9:57Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Gateway for APPC User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17931-04"/>
<meta name="dcterms.isVersionOf" content="APPUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="tcpmap.htm" title="Previous" type="text/html"/>
<link rel="Next" href="pro_det.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17931-04.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/20</span> <!-- End Header -->
<div id="APPUG700" class="chapter"><a id="g1017213"></a>
<h1 class="chapter"><span class="secnum">7</span> Client Application Development (TCP/IP Only)</h1>
<p>This <a id="sthref807"></a><a id="sthref808"></a><a id="sthref809"></a>chapter discusses how you will call a TIP and control a remote host transaction if your gateway uses TCP/IP support for IMS Connect. It also provides you with the steps for preparing and executing a gateway transaction.</p>
<p>This chapter assumes:</p>
<ul>
<li>
<p>a remote host transaction (RHT) has already been written</p>
</li>
<li>
<p>a TIP corresponding to the RHT has already been defined using the steps described in <a href="tip.htm#g1011602">Chapter 3, &#34;Creating a TIP&#34;</a>.</p>
</li>
<li>
<p>the <a id="sthref810"></a><code dir="ltr">PGA_TCP_IMSC</code> mapping table has been populated, using the <a id="sthref811"></a><code dir="ltr">pg4tcpmap</code> tool, with the <code dir="ltr">SIDE PROFILE</code> name, TCP/IP hostname, port number and other IMS Connect parameters.</p>
</li>
</ul>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i1006668">&#34;Overview of Client Application&#34;</a></p>
</li>
<li>
<p><a href="#i1006741">&#34;Preparing the Client Application&#34;</a></p>
</li>
<li>
<p><a href="#i1007019">&#34;Ensuring TIP and Remote Transaction Program Correspondence&#34;</a></p>
</li>
<li>
<p><a href="#i1007187">&#34;Calling the TIP from the Client Application&#34;</a></p>
</li>
<li>
<p><a href="#i1007411">&#34;Exchanging Data&#34;</a></p>
</li>
<li>
<p><a href="#i1010080">&#34;Calling PG4TCPMAP&#34;</a></p>
</li>
<li>
<p><a href="#i1007456">&#34;Executing the Application&#34;</a></p>
</li>
<li>
<p><a href="#i1009917">&#34;Application Development with Multi-Byte Character Set Support&#34;</a></p>
</li>
<li>
<p><a href="#i1007662">&#34;Privileges Needed to Use TIPs&#34;</a></p>
</li>
</ul>
<a id="i1006668"></a>
<div id="APPUG1025" class="sect1">
<h2 class="sect1">Overview of Client Application <a id="sthref812"></a><a id="sthref813"></a><a id="sthref814"></a></h2>
<p>The Procedural Gateway Administration Utility (<a id="sthref815"></a>PGAU) generates a complete TIP using definitions you provide. The client application can then call the TIP to access the remote host transaction. <a href="admin_util.htm#g1029659">Chapter 2, &#34;Procedural Gateway Administration Utility&#34;</a>, discusses the use of PGAU in detail.</p>
<p>This overview explains what you must do in order to call a TIP and control a remote host transaction.</p>
<p>The gateway receives PL/SQL calls from the <a id="sthref816"></a>Oracle database and issues TCP/IP calls to communicate with a remote transaction program.</p>
<p>The following application programs make this possible:</p>
<ol>
<li>
<p>an I<a id="sthref817"></a>/O PCB-enabled remote host transaction program</p>
</li>
<li>
<p>the <a id="sthref818"></a><code dir="ltr">PGA_TCP_IMSC</code> mapping table that has been populated, using the pg4tcpmap tool, with the <code dir="ltr">SIDE PROFILE</code> name as well as the TCP/IP hostname, port number and other IMS Connect parameters.</p>
</li>
<li>
<p>a <a id="sthref819"></a>Transaction Interface Package (TIP). A TIP is a P<a id="sthref820"></a>L/SQL package that handles communication between the client and the gateway and performs datatype conversions between COBOL and PL/SQL.</p>
</li>
<li>
<p>PGAU generates the TIP specification for you. In the shipped samples, the PGAU-generated package is called <code dir="ltr"><a id="sthref821"></a><a id="sthref822"></a>pgtflip.pkb</code>. This generated TIP includes at least three function calls that map to the remote transaction program:</p>
<ul>
<li>
<p><code dir="ltr">pgtflip_init</code> initializes the conversation with the remote transaction program</p>
</li>
<li>
<p><code dir="ltr">pgtflip_main</code> exchanges application data with the remote transaction program</p>
</li>
<li>
<p><code dir="ltr">pgtflip_term</code> terminates the conversation with the remote transaction program</p>
</li>
</ul>
<p>Refer to <a href="apf.htm#g638154">Appendix E, &#34;Tip Internals&#34;</a> for more information about TIPs, if you are writing your own TIP or debugging.</p>
</li>
<li>
<p>a client application that calls the TIP</p>
<p>The client application calls the three TIP functions with input and output arguments. In the example, the client application passes an input and the remote transaction and the remote transaction sends back the flipped input as an output.</p>
</li>
</ol>
<p><a href="#g1012955">Table 7-1</a> demonstrates the logic flow between the PL/SQL driver, the TIP, and the gateway using the example IMS Connect-IMS transaction.</p>
<div id="APPUG1314" class="tblhruleformal">
<p class="titleintable"><a id="sthref823"></a><a id="g1012955"></a>Table 7-1 Logic Flow of IMS Connect-IMS Example</p>
<table class="cellalignment6318" title="Logic Flow of IMS Connect-IMS Example" summary="demonstrates the logic flow between the PL/SQL driver, the TIP, and the gateway using the example IMS Connect-IMS transaction" dir="ltr">
<thead>
<tr class="cellalignment6309">
<th class="cellalignment6316" id="r1c1-t2">Client Application</th>
<th class="cellalignment6316" id="r1c2-t2">Oracle TIP</th>
<th class="cellalignment6316" id="r1c3-t2">Procedures Established Between the Gateway and the Remote Transaction (mainframe IMS)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r2c1-t2" headers="r1c1-t2">
<p>calls tip_init</p>
</td>
<td class="cellalignment6317" headers="r2c1-t2 r1c2-t2">
<p>Calls <code dir="ltr">PGAINIT</code></p>
</td>
<td class="cellalignment6317" headers="r2c1-t2 r1c3-t2">
<p>Gateway issues TCP/IP socket and connect to initiate the conversation with IMS Connect.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r3c1-t2" headers="r1c1-t2">
<p>calls tip_main</p>
</td>
<td class="cellalignment6317" headers="r3c1-t2 r1c2-t2">
<p>Calls <code dir="ltr">PGAXFER</code> to send the input and receive the output</p>
</td>
<td class="cellalignment6317" headers="r3c1-t2 r1c3-t2">
<p>Gateway issues TCP/IP send() to IMS Connect. IMS Connect, through OTMA and XCF, talks to the IMS instance. IMS <code dir="ltr">RECEIVE</code> completes. IMS performs application logic and issues <code dir="ltr">SEND</code> back to gateway. The gateway issues TCP/IP receive(); receive completes.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r4c1-t2" headers="r1c1-t2">
<p>calls tip_term</p>
</td>
<td class="cellalignment6317" headers="r4c1-t2 r1c2-t2">
<p>Call <code dir="ltr">PGATERM</code></p>
</td>
<td class="cellalignment6317" headers="r4c1-t2 r1c3-t2">
<p>Gateway issues TCP/IP close().</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>A client application which utilizes the gateway to exchange data with a remote host transaction performs some tasks for itself and instructs the TIP to perform other tasks on its behalf. The client application designer must consequently know the behavior of the remote transaction and how the TIP facilitates the exchange.</p>
<p>The following sections provide an overview of remote host transaction behavior, how this behavior is controlled by the client application and how TIP function calls and data declarations support the client application to control the remote host transaction. These sections also provide background information about what the TIP does for the client application and how the TIP calls exchange data with the remote host transaction.</p>
</div>
<!-- class="sect1" -->
<a id="i1006741"></a>
<div id="APPUG1026" class="sect1">
<h2 class="sect1">Preparing the Client Application<a id="sthref824"></a></h2>
<p>To prepare the client application for execution you must understand the remote host transaction requirements and then perform these steps:</p>
<ol>
<li>
<p>Make sure that the pg4tcpmap tool has been used to map the <code dir="ltr">SIDEPROFILE</code> name, defined in the <code dir="ltr">.ctl</code> file for the PGAU utility, to TCP/IP and IMS Connect attributes.</p>
<p>Refer to <a href="tcpmap.htm#g1011686">Chapter 6, &#34;PG4TCPMAP Commands (TCP/IP Only)&#34;</a> in this guide for detailed information about mapping parameters.</p>
</li>
<li>
<p>Make certain that you have identified the remote host transaction program facilities to be called.</p>
</li>
<li>
<p>Move relevant <a id="sthref825"></a>COBOL records layout (copybooks) to the gateway system for input to PGAU.</p>
</li>
<li>
<p>Describe the remote host transaction data and calls to the <a id="sthref826"></a>PG Data Dictionary (PG DD) with <code dir="ltr">DEFINE DATA</code>, <code dir="ltr">DEFINE CALL</code>, and <code dir="ltr">DEFINE TRANSACTION</code> statements.</p>
</li>
<li>
<p>Generate the TIP in the Oracle database, using <code dir="ltr">GENERATE</code>.</p>
</li>
<li>
<p>Create the client application that calls the TIP public functions.</p>
</li>
<li>
<p>Grant privileges on the newly created package.</p>
</li>
</ol>
<div id="APPUG1027" class="sect2"><a id="sthref827"></a>
<h3 class="sect2">TIP Content and Purpose <a id="sthref828"></a></h3>
<p>The content of a PGAU-generated TIP reflects the calls available to the remote host transaction and the data that has been exchanged. Understanding this content helps when designing and debugging client applications that call the TIP.</p>
<p>A TIP is a <a id="sthref829"></a>PL/SQL package, and accordingly has <a id="sthref830"></a><a id="sthref831"></a>two sections:</p>
<ol>
<li>
<p>A Package Specification containing:</p>
<ul>
<li>
<p>Public function prototypes and parameters, and</p>
</li>
</ul>
</li>
<li>
<p>A Package Body containing:</p>
<ul>
<li>
<p>Private functions and internal control variables</p>
</li>
<li>
<p>Public functions</p>
</li>
<li>
<p>Package initialization following the last public function.</p>
</li>
</ul>
</li>
</ol>
<p>The purpose of the TIP is to provide a PL/SQL callable public function for every allowed remote transaction program interaction. A <a id="sthref832"></a>remote transaction program interaction is a logically related group of data exchanges through one or more <a id="sthref833"></a><a id="sthref834"></a><code dir="ltr">PGAXFER</code> RPC calls. This is conceptually similar to a screen or menu interaction in which several fields are filled in, the enter key is pressed, and several fields are returned to the user. Carrying the analogy further:</p>
<ul>
<li>
<p>the user might be likened to the TIP or client application</p>
</li>
<li>
<p>fields to be filled in are <code dir="ltr">IN</code> parameters on the TIP function call</p>
</li>
<li>
<p>fields returned are <code dir="ltr">OUT</code> parameters on the TIP function call</p>
</li>
<li>
<p>screen or menu is the group of <code dir="ltr">IN</code> and <code dir="ltr">OUT</code> parameters combined</p>
</li>
<li>
<p>a pressed enter key is likened to the <code dir="ltr">PGAXFER</code> remote procedural call (RPC)</p>
</li>
</ul>
<p>The actual grouping of parameters that constitute a transaction call is defined by the user. The gateway places no restrictions on how a remote transaction program might correspond to a collection of TIP function calls, each call having many <code dir="ltr">IN</code> and <code dir="ltr">OUT</code> parameters.</p>
<p>PGA users typically have one TIP per remote transaction program. How the TIP function calls are grouped and what data parameters are exchanged on each call depends on the size, complexity and behavior of the remote transaction program.</p>
<p>Refer to Oracle&#39;s <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for a discussion of how PL/SQL packages work. The following discussion covers the logic that must be performed within a TIP. Refer to the sample TIP and driver supplied in the <code dir="ltr">%ORACLE_HOME%\dg4appc\demo\IMS</code> directory on Microsoft Windows and in <code dir="ltr">$ORACLE_HOME/dg4appc/demo/IMS</code> directory on UNIX based systems, in files<a id="sthref835"></a><a id="sthref836"></a> <code dir="ltr">pgtflip.pkh</code>, <a id="sthref837"></a><a id="sthref838"></a><code dir="ltr">pgtflip.pkb</code>, and<a id="sthref839"></a> <code dir="ltr">pgtflipd.sql</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i1006798"></a>
<div id="APPUG1028" class="sect2">
<h3 class="sect2">Remote Host Transaction Types<a id="sthref840"></a></h3>
<p>From a database gateway application perspective, there are three main types of remote host transactions:</p>
<ul>
<li>
<p>transaction socket</p>
</li>
<li>
<p>persistent socket</p>
</li>
<li>
<p>non-persistent socket</p>
</li>
</ul>
<p>You should be familiar with the remote host transaction types. Refer to the IBM <span class="italic">IMS Connect Guide and Reference</span> for a full description of these transaction types.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007019"></a>
<div id="APPUG1029" class="sect1">
<h2 class="sect1">Ensuring TIP and Remote Transaction Program Correspondence<a id="sthref841"></a><a id="sthref842"></a><a id="sthref843"></a></h2>
<p>A remote host transaction program and its related TIP with client application must correspond on <a id="sthref844"></a>two key requirements:</p>
<ul>
<li>
<p>Parameter datatype conversion, which results from the way in which transaction DATA is defined. Refer to <a href="apd.htm#g640607">Appendix D, &#34;Datatype Conversions&#34;</a> for a discussion of how PGAU-generated TIPs convert data based on the data definitions.</p>
</li>
<li>
<p>TCP/IP send/receive synchronization, which results from the way in which transaction <code dir="ltr">CALL</code>s are defined</p>
</li>
</ul>
<p>These <code dir="ltr">DATA</code> and <code dir="ltr">CALL</code> definitions are then included by reference in a <code dir="ltr">TRANSACTION</code> definition.</p>
<p>Make certain that the <code dir="ltr">SIDEPROFILE</code> name has been mapped to TCP/IP and IMS Connect attributes, using the <code dir="ltr">pg4tcpmap</code> tool.</p>
<div id="APPUG1030" class="sect2"><a id="sthref845"></a>
<h3 class="sect2">DATA Correspondence<a id="sthref846"></a><a id="sthref847"></a><a id="sthref848"></a></h3>
<p>Using data definitions programmed in the language of the remote host transaction, the <a id="sthref849"></a><a id="sthref850"></a>PGAU <code dir="ltr">DEFINE DATA</code> command stores in the <a id="sthref851"></a>PG DD the information needed for <a id="sthref852"></a><a id="sthref853"></a>PGAU <code dir="ltr">GENERATE</code> to create the TIP function logic to perform:</p>
<ul>
<li>
<p>all data conversion from PL/SQL <code dir="ltr">IN</code> parameters supplied by the receiving remote host transaction</p>
</li>
<li>
<p>all buffering into the format expected by the receiving remote host transaction</p>
</li>
<li>
<p>all data unbuffering from the format supplied by the sending remote host transaction</p>
</li>
<li>
<p>all data conversion to PL/SQL <code dir="ltr">OUT</code> parameters supplied by the sending remote host transaction</p>
</li>
</ul>
<p>PGAU determines the information needed to generate the conversion and buffering logic from the data definitions included in the remote host transaction program. PGAU <code dir="ltr">DEFINE DATA</code> reads this information from files, such as COBOL copy books, or in-stream from scripts and saves it in the PG DD for repeated use. The Gateway Administrator needs to transfer these definition files from the remote host to the Oracle host where PGAU runs.</p>
<p>From the data definitions stored in the PG DD, PGAU <code dir="ltr">GENERATE</code> determines the remote host datatype and matches it to an appropriate PL/SQL datatype. It also determines data lengths and offsets within records and buffers and generates the needed PL/SQL logic into the TIP. Refer to the PGAU <a href="admin_util.htm#i1006776">&#34;DEFINE DATA&#34;</a> statement in <a href="admin_util.htm#g1029659">Chapter 2, &#34;Procedural Gateway Administration Utility&#34;</a> and <a href="apg.htm#i635215">&#34;Sample PGAU DEFINE DATA Statements&#34;</a> in <a href="apg.htm#g644868">Appendix F, &#34;Administration Utility Samples&#34;</a> for more information.</p>
<p>All data that are referenced as parameters by subsequent calls must first be defined using PGAU <code dir="ltr">DEFINE DATA</code>. Simple data items, such as single numbers or character strings, and complex multi-field data aggregates, such as records or structures, can be defined. PGAU automatically generates equivalent PL/SQL variables and records of fields or tables for the client application to reference in its calls to the generated TIP.</p>
<p>As discussed, a parameter might be a simple data item, such as an employee number, or a complex item, such as an employee record. PGAU <code dir="ltr">DEFINE DATA</code> automatically extracts the datatype information it needs from the input program data definition files.</p>
<p>In this example, <code dir="ltr">FLIPIN</code> and <code dir="ltr">FLIPOUT</code> are the arguments to be exchanged.</p>
<pre dir="ltr">PGTFLIP_MAIN(trannum,FLIPIN,FLIPOUT)
</pre>
<p>A PGAU <code dir="ltr">DEFINE DATA</code> statement must therefore be issued for each of these parameters:</p>
<pre dir="ltr">DEFINE DATA FLIPIN
       PLSDNAME (FLIPIN)
       USAGE (PASS)
       LANGUAGE (IBMVSCOBOLII)
       (
       01 MSGIN PIC X(20).
       ); 

DEFINE DATA FLIPOUT
       PLSDNAME (flipout)
       USAGE (PASS)
       LANGUAGE (IBMVSCOBOLII)
       (
       01 MSGOUT PIC X(20).
       );
</pre>
<p>Note that a definition is not required for the <code dir="ltr">trannum</code> argument. This is the APPC conversation identifier and does not require a definition in PGAU.</p>
</div>
<!-- class="sect2" -->
<a id="i1007082"></a>
<div id="APPUG1031" class="sect2">
<h3 class="sect2">CALL Correspondence<a id="sthref854"></a><a id="sthref855"></a><a id="sthref856"></a></h3>
<p>The requirement to synchronize <a id="sthref857"></a>TCP/IP send() and receive() means that when the remote transaction program expects data parameters to be input, it issues TCP/IP receive() to read the data parameters. Accordingly, the TIP must cause the gateway to issue TCP/IP send() to write the data parameters to the remote transaction program. The TIP must also cause the gateway to issue TCP/IP receive() when the remote transaction program issues TCP/IP send().</p>
<p>The PGAU <code dir="ltr">DEFINE CALL</code> statement specifies how the generated TIP is to be called by the client application and which data parameters are to be exchanged with the remote host transaction for that call. Each PGAU <code dir="ltr">DEFINE CALL</code> statement might specify the name of the TIP function, one or more data parameters, and the <code dir="ltr">IN/OUT</code> mode of each data parameter. Data parameters must have been previously defined with PGAU <code dir="ltr">DEFINE DATA</code> statements. Refer to <a href="admin_util.htm#i1006743">&#34;DEFINE CALL&#34;</a> in <a href="admin_util.htm#g1029659">Chapter 2, &#34;Procedural Gateway Administration Utility&#34;</a> and <a href="apg.htm#i634298">&#34;Sample PGAU DEFINE CALL Statements&#34;</a> in <a href="apg.htm#g644868">Appendix F</a> for more information.</p>
<p>PGAU <code dir="ltr">DEFINE CALL</code> processing stores the specified information in the PG DD for later use by PGAU <code dir="ltr">GENERATE</code>. PGAU <code dir="ltr">GENERATE</code> then creates the following in the TIP package specification:</p>
<ul>
<li>
<p>declarations of public PL/SQL functions for each <code dir="ltr">CALL</code> defined with PL/SQL parameters for each <code dir="ltr">DATA</code> definition specified on the <code dir="ltr">CALL</code></p>
</li>
<li>
<p>declarations of the public PL/SQL data parameters</p>
</li>
</ul>
<p>The client application calls the TIP public function as a PL/SQL function call, using the function name and parameter list specified in the PGAU <code dir="ltr">DEFINE CALL</code> statement. The client application might also declare, by reference, private variables of the same datatype as the TIP public data parameters to facilitate data passing and handling within the client application, thus sharing the declarations created by PGAU <code dir="ltr">GENERATE</code>.</p>
<p>In this example, the following PGAU <code dir="ltr">DEFINE CALL</code> statement must be issued to define the TIP public function:</p>
<pre dir="ltr">DEFINE CALL FLIPMAIN
       PKGCALL (pgtflip_main)
       PARMS ((FLIPIN IN),(FLIPOUT OUT));
</pre>
<a id="i1009532"></a>
<div id="APPUG1032" class="sect3">
<h4 class="sect3">Flexible Call Sequence<a id="sthref858"></a></h4>
<p>The number of data parameters exchanged between the TIP and the gateway on each call can vary at the user&#39;s discretion, as long as the remote transaction program&#39;s <code dir="ltr">SEND/RECEIVE</code> requests are satisfied. For example, the remote transaction program data exchange sequence might be:</p>
<pre dir="ltr">TCP/IP SEND      5 fields (field1-field5)
TCP/IP RECEIVE   1 fields (field6)
TCP/IP SEND      1 field (field7)
TCP/IP RECEIVE   3 fields (field8 - field10)
</pre>
<p>The resulting TIP/application call sequence could be:</p>
<pre dir="ltr">tip_call1(parm1 OUT, &lt;-- TCP/IP SEND field1 from remote TP
          parm2 OUT, &lt;-- TCP/IP SEND field2 from remote TP
          parm3 OUT); &lt;-- TCP/IP SEND field3 from remote TP

tip_call2(parm4 OUT, &lt;-- TCP/IP SEND field4 from remote TP
          parm5 OUT); &lt;-- TCP/IP SEND field5 from remote TP
tip_call3(parm6 IN OUT); --&gt; TCP/IP RECEIVE field6 in remote TP
                        &lt;-- TCP/IP SEND field7 from remote TP

tip_call4(parm8 IN, --&gt; TCP/IP RECEIVE field8 into remote TP
          parm9 IN, --&gt; TCP/IP RECEIVE field9 into remote TP
          parm10 IN); --&gt; TCP/IP RECEIVE field10 into remote TP
</pre>
<p>To define these four public functions to the TIP, four PGAU <code dir="ltr">DEFINE CALL</code> statements must be issued, each specifying its unique public function name (<code dir="ltr">tip_callx</code>) and the data parameter list to be exchanged. Once a data item is defined using <code dir="ltr">DEFINE DATA</code>, it can be referenced in multiple calls in any mode (<code dir="ltr">IN</code>, <code dir="ltr">OUT</code>, or <code dir="ltr">IN OUT</code>). For example, <code dir="ltr">parm5</code> could be used a second time in place of <code dir="ltr">parm6</code> This implies the same data is being exchanged in both instances, received into the TIP and application on <code dir="ltr">tip_call2</code> and returned, possibly updated, to the remote host in <code dir="ltr">tip_call4</code>.</p>
<p>Notice also that the remote transaction program&#39;s first five written fields are read by two separate TIP function calls, <code dir="ltr">tip_call1</code> and <code dir="ltr">tip_call2</code>. This could also have been equivalently accomplished with five TIP function calls of one <code dir="ltr">OUT</code> parameter each or a single TIP function call with five <code dir="ltr">OUT</code> parameters. Then the remote transaction program&#39;s first read field (<code dir="ltr">field6</code>) and subsequent written field (<code dir="ltr">field7</code>) correspond to a single TIP function call (<code dir="ltr">tip_call3</code>) with a single <code dir="ltr">IN OUT</code> parameter (<code dir="ltr">parm6</code>).</p>
<p>This use of a single <code dir="ltr">IN OUT</code> parameter implies that the remote transaction program&#39;s datatype for <code dir="ltr">field6</code> and <code dir="ltr">field7</code> are both the same and correspond to the conversion performed for the datatype of <code dir="ltr">parm6</code>. If <code dir="ltr">field6</code> and <code dir="ltr">field7</code> were of different datatypes, then they have to correspond to different PL/SQL parameters (for example, <code dir="ltr">parm6 IN</code> and <code dir="ltr">parm7 OUT</code>). They could still be exchanged as two parameters on a single TIP call or one parameter each on two TIP calls, however.</p>
<p>Lastly, the remote transaction program&#39;s remaining three <code dir="ltr">RECEIVE</code> fields are supplied by <code dir="ltr">tip_call4</code> parameters 8-10. They also could have been done with three TIP calls passing one parameter each or two TIP calls passing one parameter on one call and two parameters on the other, in either order. This flexibility permits the user to define the correspondence between the remote transaction program&#39;s operation and the TIP function calls in whatever manner best suits the user.</p>
</div>
<!-- class="sect3" -->
<div id="APPUG1033" class="sect3"><a id="sthref859"></a>
<h4 class="sect3">Call Correspondence Order Restrictions</h4>
<p>Each TIP public function first sends all <code dir="ltr">IN</code> parameters, before it receives any <code dir="ltr">OUT</code> p<a id="sthref860"></a>arameters. Thus, a remote transaction program expecting to send one field and then receive one field must correspond to separate TIP calls.</p>
<p>For example:</p>
<pre dir="ltr">tip_callO( parmO OUT); &lt;-- TCP/IP SEND outfield from remote TP
</pre>
<p><code dir="ltr">PGAXFER</code> RPC checks first for parameters to send, but finds none and proceeds to receive parameters:</p>
<pre dir="ltr">tip_callI( parmI IN); --&gt; TCP/IP RECEIVE infield to remote TP
</pre>
<p><a id="sthref861"></a><code dir="ltr">PGAXFER</code> RPC processes parameters to send and then checks for parameters to receive, but finds none and completes; therefore, a single TIP public function with an <code dir="ltr">OUT</code> parameter followed by an <code dir="ltr">IN</code> parameter does not work, because the <code dir="ltr">IN</code> parameter is processed first--regardless of its position in the parameter list.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007147"></a>
<div id="APPUG1034" class="sect2">
<h3 class="sect2">TRANSACTION Correspondence<a id="sthref862"></a><a id="sthref863"></a><a id="sthref864"></a><a id="sthref865"></a></h3>
<p>The <a id="sthref866"></a>remote host transaction is defined with the PGAU <code dir="ltr">DEFINE TRANSACTION</code> statement with additional references to prior definitions of <code dir="ltr">CALL</code>s that the transaction supports.</p>
<p>You specify the <a id="sthref867"></a>remote host transaction attributes, such as:</p>
<ul>
<li>
<p>transaction ID or name</p>
</li>
<li>
<p>network address or location</p>
</li>
<li>
<p>system type (such as IBM370)</p>
</li>
<li>
<p>Oracle National Language of the remote host</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <a id="sthref868"></a>PL/SQL package name is specified when the transaction is defined; this is the name by which the TIP is referenced and which the public function calls to be included within the TIP. Each public function must have been previously defined with a PGAU <code dir="ltr">DEFINE CALL</code> statement, which has been stored in the PG DD. If you do not specify a package name (TIP name) in the <code dir="ltr">GENERATE</code> statement, the transaction name you specified will become the package name by default. In that case, the transaction name (<code dir="ltr"><span class="codeinlineitalic">tname)</span></code> must be unique and must be in valid PL/SQL syntax within the database containing the PL/SQL packages.
<p>For more information, refer to <a href="admin_util.htm#i1006863">&#34;DEFINE TRANSACTION&#34;</a> in <a href="admin_util.htm#g1029659">Chapter 2, &#34;Procedural Gateway Administration Utility&#34;</a> and <a href="apg.htm#i634308">&#34;Sample PGAU DEFINE TRANSACTION Statement&#34;</a> in <a href="apg.htm#g644868">Appendix F, &#34;Administration Utility Samples&#34;</a>.</p>
</div>
</li>
</ul>
<p>In this example, the following <code dir="ltr">DEFINE TRANSACTION</code> statement is used to match this information with the inserted row in the <a id="sthref869"></a><code dir="ltr">PGA_TCP_IMSC</code> table.</p>
<pre dir="ltr">DEFINE TRANSACTION IMSFLIP
   CALL (FLIPMAIN)
   SIDEPROFILE(PGATCP)
   TPNAME(FLIP)
   NLS_LANGUAGE(&#34;american_america.us7ascii&#34;);
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007187"></a>
<div id="APPUG1035" class="sect1">
<h2 class="sect1">Calling the TIP from the Client Application<a id="sthref870"></a><a id="sthref871"></a></h2>
<p>Once a TIP is created, a client application must be written to interface with the TIP. A client application that calls the TIP functions must include five logical sections:</p>
<ul>
<li>
<p>declaring TIP variables</p>
</li>
<li>
<p>initializing the conversation</p>
</li>
<li>
<p>exchanging data</p>
</li>
<li>
<p>terminating the conversation</p>
</li>
<li>
<p>error handling</p>
</li>
</ul>
<a id="i1007197"></a>
<div id="APPUG1036" class="sect2">
<h3 class="sect2">Declaring TIP Variables<a id="sthref872"></a><a id="sthref873"></a></h3>
<p>The user declarations section of the <a id="sthref874"></a><a id="sthref875"></a><code dir="ltr"><span class="codeinlineitalic">tipname</span></code>.<code dir="ltr">doc</code> file documents the required declarations.</p>
<p>When passing <a id="sthref876"></a>PL/SQL parameters on calls to TIP functions, the client application must use the exact same PL/SQL datatypes for TIP function arguments as are defined by the TIP in its specification section. Assume, for example, the following is in the TIP specification, or <code dir="ltr"><span class="codeinlineitalic">tipname</span></code><code dir="ltr">.doc</code>:</p>
<pre dir="ltr">FUNCTION <span class="italic">tip_call1</span>    <span class="italic">tranuse</span>,   IN      BINARY_INTEGER, 
                      <span class="italic">tip_var1   io_mode pls_type1,</span> 
                      <span class="italic">tip_record io_mode tran_rectype)</span> 
RETURN INTEGER;

TYPE  <span class="italic">tran_rectype</span> is RECORD
      <span class="italic">(rec_field1 pls_type1</span>,
      ...
      <span class="italic">rec_fieldN pls_typeN)</span>;
</pre>
<p>Where <a href="#CHDBDDDG">Table 7-2</a> provides a description of each of the parameters:</p>
<div id="APPUG1315" class="tblformal">
<p class="titleintable"><a id="sthref877"></a><a id="CHDBDDDG"></a>Table 7-2 Function Declarations</p>
<table class="cellalignment6315" title="Function Declarations" summary="provides a description of each of the parameters" dir="ltr">
<thead>
<tr class="cellalignment6309">
<th class="cellalignment6316" id="r1c1-t4">Parameter</th>
<th class="cellalignment6316" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">tip_call1</span></code></p>
</td>
<td class="cellalignment6317" headers="r2c1-t4 r1c2-t4">
<p>The TIP function name as defined in the package specification.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">tranuse</span></code></p>
</td>
<td class="cellalignment6317" headers="r3c1-t4 r1c2-t4">
<p>The remote transaction instance parameter returned from the TIP init function identifying the conversation on which this TIP call is to exchange data.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">tran_rectype</span></code></p>
</td>
<td class="cellalignment6317" headers="r4c1-t4 r1c2-t4">
<p>The PL/SQL record datatype declared in the <code dir="ltr">tipname</code> TIP specification. This is the same value as in the <code dir="ltr">TYPE</code> <code dir="ltr"><span class="codeinlineitalic">tran_rectype</span></code> <code dir="ltr">is RECORD</code> statement.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">pls_typeN</span></code></p>
</td>
<td class="cellalignment6317" headers="r5c1-t4 r1c2-t4">
<p>Is a PL/SQL atomic datatype.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">rec_fieldN</span></code></p>
</td>
<td class="cellalignment6317" headers="r6c1-t4 r1c2-t4">
<p>Is a PL/SQL record field corresponding to a remote transaction program record field.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>In the client application PL/SQL atomic datatypes should be defined as the exact same datatype of their corresponding arguments in the TIP function definition. The following should be coded in the client application before the <code dir="ltr">BEGIN</code> command:</p>
<pre dir="ltr"><span class="italic">appl_var  pls_type1</span>;    /* declare appl variable for ....  */
</pre>
<p>TIP datatypes need not be redefined. They must be declared locally within the client application, appearing in the client application before the <code dir="ltr">BEGIN</code>:</p>
<pre dir="ltr"><span class="italic">appl_record tipname.tran_rectype;</span>  /* declare appl record */
</pre>
<p><a href="#g1012979">Table 7-3</a> describes the meaning of each procedure declaration:</p>
<div id="APPUG1316" class="tblformal">
<p class="titleintable"><a id="sthref878"></a><a id="g1012979"></a>Table 7-3 Procedure Declarations</p>
<table class="cellalignment6315" title="Procedure Declarations" summary="describes the meaning of each procedure declaration" dir="ltr">
<thead>
<tr class="cellalignment6309">
<th class="cellalignment6316" id="r1c1-t5">Item</th>
<th class="cellalignment6316" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr"><span class="codeinlineitalic">appl_record</span></code></p>
</td>
<td class="cellalignment6317" headers="r2c1-t5 r1c2-t5">
<p>Is a PL/SQL record exchanged with the TIP and used within the client application.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr"><span class="codeinlineitalic">tipname</span></code></p>
</td>
<td class="cellalignment6317" headers="r3c1-t5 r1c2-t5">
<p>Is the PL/SQL package (TIP) name as stored in Oracle database. This is the same value as in the statement <code dir="ltr">CREATE</code> or <code dir="ltr">REPLACE PACKAGE</code> <code dir="ltr"><span class="codeinlineitalic">tipname</span></code> in the TIP specification.</p>
</td>
</tr>
<tr class="cellalignment6309">
<td class="cellalignment6317" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr"><span class="codeinlineitalic">tran_rectype</span></code></p>
</td>
<td class="cellalignment6317" headers="r4c1-t5 r1c2-t5">
<p>Is the PL/SQL record datatype declared in the <code dir="ltr"><span class="codeinlineitalic">tipname</span></code> TIP specification. This is the same value as in the <code dir="ltr">TYPE</code> <code dir="ltr"><span class="codeinlineitalic">tran_rectype</span></code> is <code dir="ltr">RECORD</code> statement.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Refer to the <code dir="ltr"><span class="codeinlineitalic">tipname</span></code><code dir="ltr">.doc</code> content file for a complete description of the user declarations you can reference.</p>
<p>The client application calls the TIP public function as if it were any local PL/SQL function:</p>
<pre dir="ltr">rc = tip_call1( tranuse,
                appl_var,
                appl_record);
</pre>
<p>In the TCP/IP IMS Connect example, the PL/SQL driver <a id="sthref879"></a><code dir="ltr">pgtflipd.sql</code>, which is located in <code dir="ltr">%ORACLE_HOME%\dg4appc\demo\IMS</code> directory on Microsoft Windows and in <code dir="ltr">$ORACLE_HOME/dg4appc/demo/IMS</code> directory on UNIX based systems, is the client application and includes the following declaration:</p>
<pre dir="ltr">...
...
CREATE or REPLACE PROCEDURE pgtflipd(mesgin IN CHAR) IS
trannum INTEGER :=0               /* transaction usage number     */
mesgout VARCHAR2(254);            /* the output parameter       */
rc INTEGER :=0                    /* PGA RPC return codes         */
term INTEGER :=0;                 /* 1 if pgtflip_term called     */
...
...
</pre></div>
<!-- class="sect2" -->
<a id="i1007289"></a>
<div id="APPUG1037" class="sect2">
<h3 class="sect2">Initializing the Conversation</h3>
<p>The call to <a id="sthref880"></a>initialize the conversation serves several purposes:</p>
<ul>
<li>
<p>To cause the PL/SQL package, the TIP, to be loaded and to perform the initialization logic programmed in the TIP initialization section.</p>
</li>
<li>
<p>To cause the TIP init function to call the <code dir="ltr">PGAINIT</code> remote procedural call (RPC), which in turn establishes communication with the remote transaction program (RTP), and returns a transaction instance number to the application.</p>
</li>
</ul>
<p>Optionally, calls to initialize the conversation can be used to:</p>
<ul>
<li>
<p>Override default RHT/OLTP identification, network address attributes, and conversation security user&nbsp;ID and password.</p>
</li>
<li>
<p>Specify what diagnostic <a id="sthref881"></a>traces the TIP is to produce. Refer to <a href="pro_det.htm#g1026955">Chapter 8, &#34;Troubleshooting&#34;</a> for more information about diagnostic traces.</p>
</li>
</ul>
<p>PGAU-generated TIPs provide four different initialization functions that client applications can call. These are overloaded functions which all have the same name, but vary in the types of parameters passed.</p>
<p>Three initialization parameters are passed:</p>
<ul>
<li>
<p>The transaction instance number for RHT socket file descriptor. The <code dir="ltr">tranuse</code> parameter is required on all TIP initializations.</p>
</li>
<li>
<p>TIP diagnostic flags for TIP runtime diagnostic controls. The <code dir="ltr">tipdiag</code> parameter is optional. Refer to <a href="pro_det.htm#g1026955">Chapter 8, &#34;Troubleshooting&#34;</a> for a discussion of TIP diagnostics.</p>
</li>
<li>
<p>TIP default overrides for overriding OLTP and network attributes. The <code dir="ltr">override</code> parameter is optional.</p>
</li>
</ul>
<p>The following four functions are shown as they might appear in the TIP Content documentation file. Examples of client application use are provided later.</p>
<pre dir="ltr">TYPE override_Typ IS RECORD (
        tranname  VARCHAR2(2000),  /* Transaction Program     */
        transync  BINARY_INTEGER, /* RESERVED                */
        trannls   VARCHAR2(50),   /* RESERVED                */
        oltpname  VARCHAR2(2000),  /* Logical Unit            */
        oltpmode  VARCHAR2(2000),  /* LOG Mode Entry          */
        netaddr   VARCHAR2(2000),  /* Side Profile            */
        tracetag  VARCHAR2(2000),    /* gateway trace idtag  */
        
FUNCTION pgtflip_init(                /* init standard */
           tranuse IN OUT BINARY_INTEGER)
           RETURN INTEGER;

FUNCTION pgtflip_init(                /* init override */
           tranuse IN OUT BINARY_INTEGER,
           override IN override_Typ)
           RETURN INTEGER;

FUNCTION pgtflip_init(               /* init diagnostic */
           tranuse IN OUT BNARY_INTEGER,
           tipdiag IN CHAR)
           RETURN INTEGER;

FUNCTION pgtflip_init(                /* init over-diag */
           tranuse IN OUT BINARY_INTEGER,
           override IN override_Typ,
           tipdiag IN CHAR)
           RETURN INTEGER;
</pre>
<div id="APPUG1038" class="sect3"><a id="sthref882"></a>
<h4 class="sect3">Transaction Instance Parameter</h4>
<p>This <a id="sthref883"></a><a id="sthref884"></a>transaction instance number (shown in examples as <code dir="ltr">tranuse</code>) must be passed to subsequent TIP exchange and terminate functions. It identifies to the gateway on which <a id="sthref885"></a>TCP/IP conversation--and therefore which iteration of a remote transaction program--the data is to be transmitted or communication terminated.</p>
<p>A single client application might control multiple instances of the same remote transaction program or multiple different remote transaction programs, all concurrently. The transaction instance number is the TIP&amp;rsquor;s mechanism for routing the client application call through the gateway to the intended remote transaction program.</p>
<p>It is the responsibility of the client application to save the transaction instance number of each active transaction and pass the correct one to each TIP function called for that transaction.</p>
<p>The client application calls the TIP initialization function as if it were any local PL/SQL function. For example:</p>
<pre dir="ltr">...
...
trannum INTEGER := 0;/* transaction usage number*/
...
...
BEGIN
 rc := pgtflip.pgtflip_init(trannum);
...
...
</pre></div>
<!-- class="sect3" -->
<a id="i1007355"></a>
<div id="APPUG1039" class="sect3">
<h4 class="sect3">Overriding TIP Initializations<a id="sthref886"></a><a id="sthref887"></a></h4>
<p>Note that in the preceding example the client application did not specify any remote transaction program name, network connection, or security information. The TIP has such information internally coded as defaults and the client application simply calls the appropriate TIP for the chosen remote transaction program. The client application can, however, optionally override some TIP defaults and supply security information.</p>
<p>You do not need to change any client applications that do not require overrides.</p>
<p><a id="i1007360"></a>When the remote host transaction was defined in the PG DD, the <code dir="ltr">DEFINE TRANSACTION</code> statement specified certain default OLTP and network identification attributes which can be overridden:<a id="sthref888"></a><a id="sthref889"></a><a id="sthref890"></a><a id="sthref891"></a></p>
<ul>
<li>
<p>TPname</p>
</li>
<li>
<p>Side Profile</p>
</li>
</ul>
<p>Refer to <a href="admin_util.htm#i1006863">&#34;DEFINE TRANSACTION&#34;</a> in <a href="admin_util.htm#g1029659">Chapter 2, &#34;Procedural Gateway Administration Utility&#34;</a> for more information about the <code dir="ltr">DEFINE TRANSACTION</code> statement.</p>
<p>These PG DD-defined transaction attributes are generated into TIPs as defaults and can be overridden at <a id="sthref892"></a>TIP initialization time. This facilitates the use of one TIP, which can be used with a test transaction or system, and can later be used with a production transaction or system, without having to regenerate the TIP.</p>
<p>The <code dir="ltr">override_Typ</code> record datatype describes the various transaction attributes that can be overridden by the client application. The following o<a id="sthref893"></a><a id="sthref894"></a>verrides are currently supported:</p>
<ul>
<li>
<p><code dir="ltr">tranname</code> can be set to override the value that was specified by the <code dir="ltr">TPNAME</code> parameter of the <code dir="ltr">DEFINE TRANSACTION</code> statement</p>
</li>
<li>
<p><code dir="ltr">netaddr</code> can be set to override the value that was specified by the <code dir="ltr">SIDEPROFILE</code> parameter of the <code dir="ltr">DEFINE TRANSACTION</code> statement</p>
</li>
</ul>
<p>In addition to the transaction attributes defined in the <a id="sthref895"></a>PG DD, there are two security-related parameters, conversation security user&nbsp;ID and conversation security password, that can be overridden at TIP initialization time. The values for these parameters normally come from either the database link used to access the gateway or the Oracle database session. There are cases when the Oracle database user&nbsp;ID is not sufficient for accessing the OLTP system. The user&nbsp;ID and password overrides provide a way to specify those parameters to the OLTP system.</p>
<p>The following overrides are currently supported:</p>
<ul>
<li>
<p><code dir="ltr">oltpuser</code> can be set to override the user&nbsp;ID used to initialize the conversation with the OLTP</p>
</li>
<li>
<p><code dir="ltr">oltppass</code> can be set to override the password used to initialize the conversation with the OLTP</p>
</li>
</ul>
<p>The security overrides have an effect only if <code dir="ltr">PGA_SECURITY_TYPE=PROGRAM</code> is specified in the gateway initialization file, and the OLTP system is configured to accept a user&nbsp;ID and password on incoming conversation requests.</p>
<p>The <code dir="ltr">transync</code> (IMS Connect <code dir="ltr">SYNCLEVEL</code>) and <code dir="ltr">trannls</code> (Globalization Support character set) are defined in the override record datatype, but are reserved for future use. The RHT <code dir="ltr">SYNCLEVEL</code> and Globalization Support name cannot be overridden.</p>
<p>The client application might override the default attributes at TIP initialization for the following reasons:</p>
<ul>
<li>
<p>to start a different version of the RHT (such as production instead of test)</p>
</li>
<li>
<p>to change the location of the OLTP containing the RHT (if the OLTP was moved due to migration or a switch to backup configuration)</p>
</li>
</ul>
<p>Client applications requiring overrides can use any combination of override and initialization parameters and might alter the combination at any time without regenerating the TIP or affecting applications that do not override parameters.</p>
<p>To override the TIP defaults, an additional client application record variable must be declared as <code dir="ltr">override_Typ</code> datatype, values must be assigned to the override subfields, and the override record variable must be passed on the TIP initialization call from the client application. For example:</p>
<pre dir="ltr">   ...
   ...
   my_overrides pgtflip.override_Typ;   -- declaration
   ...
   ...
   my_overrides.oltpname := &#39;IVTNO&#39;; -- swap to production IMS
   my_overrides.tranname := &#39;IVTNV&#39;;     -- new transaction name

BEGIN
   rc := pgtflip.pgtflip_init(trannum,my_overrides); -- init
   ...
   ...
</pre>
<p>Within the TIP, override attributes are checked for syntax problems and passed to the gateway server.</p>
</div>
<!-- class="sect3" -->
<div id="APPUG1040" class="sect3"><a id="sthref896"></a>
<h4 class="sect3">Security Considerations</h4>
<p>The <a id="sthref897"></a><a id="sthref898"></a>security requirements of the default and overridden OLTPs must be the same because the same gateway server is used in either conversation, as dictated by the database link names in the PGA RPC calls. The gateway server startup security mode is set at gateway server initialization time and passed unchanged to the OLTP at TIP or conversation initialization time.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007411"></a>
<div id="APPUG1041" class="sect1">
<h2 class="sect1">Exchanging Data<a id="sthref899"></a></h2>
<p>The client application should pass the transaction instance number, returned from a previous <code dir="ltr">tip_init</code> call, to identify which remote transaction program is affected and to identify any client application data parameters to be exchanged with the remote transaction program.</p>
<p>In this IMS Connect inquiry example, we pass an employee number and receive an employee record back:</p>
<pre dir="ltr">rc = pgtflip.pgtflip_main(trannum, /* transfer data         */
                           mesgin,   /* input parameter       */
                           mesgout); /* output parameter*/
</pre>
<a id="i1007419"></a>
<div id="APPUG1042" class="sect2">
<h3 class="sect2"><a id="sthref900"></a><a id="sthref901"></a><a id="sthref902"></a>Terminating the Conversation</h3>
<p>The client application calls the TIP termination function as if it were any local PL/SQL function. For example:</p>
<pre dir="ltr">...
...
term := 1;    /* indicate term called */
 rc := pgtflip.pgtflip_term(trannum,0); /* terminate normally  */
...
...
</pre>
<p>After a transaction instance number has been passed on a TIP terminate call to terminate the transaction, or after the remote transaction program has abended, that particular transaction instance number might be forgotten.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1043" class="sect2"><a id="sthref903"></a>
<h3 class="sect2"><a id="sthref904"></a><a id="sthref905"></a>Error Handling</h3>
<p>The client application should include an exception handler that can clean up any active TCP/IP conversations before the client application terminates. The sample client application provided in <code dir="ltr"><a id="sthref906"></a><a id="sthref907"></a>pgtflipd.sql</code> contains an example of exception handling.</p>
<p>Gateway exceptions are reported in the range <code dir="ltr">PGA-20900</code> to <code dir="ltr">PGA-20999</code> and <code dir="ltr">PGA-22000</code> to <code dir="ltr">PGA 22099</code>. When an exception occurs, the TIP termination function should be called for any active conversations that have been started by prior calls to the TIP initialization function.</p>
<p>For example:</p>
<pre dir="ltr">EXCEPTION
 WHEN OTHERS THEN
  IF term = 0 THEN         /* terminate function not called yet */
   rc := pgtflip.pgtflip_term(trannum,1); /*terminate abnormally*/
  END IF;
 RAISE;
</pre>
<p>The remote transaction should also include provisions for error handling and debugging, such as writing debugging information to the IMS temporary storage queue area. Refer to the <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for a discussion of how to intercept and handle Oracle exceptions.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1044" class="sect2"><a id="sthref908"></a>
<h3 class="sect2"><a id="sthref909"></a>Granting Execute Authority</h3>
<p>The TIP is a standard <a id="sthref910"></a>PL/SQL package and execute authority must be granted to users who call the TIP from their client application. In this example, we grant execute on the <code dir="ltr"><a id="sthref911"></a>pgtflip</code> package to user <code dir="ltr">SCOTT</code>:</p>
<pre dir="ltr">GRANT EXECUTE ON PGTFLIP TO SCOTT
</pre>
<p>Refer to the <a class="olink ADMIN" href="../ADMIN/toc.htm"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for further information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010080"></a>
<div id="APPUG1045" class="sect1">
<h2 class="sect1">Calling PG4TCPMAP</h2>
<p>PGAU need not be modified in order to have a conversation on a gateway using TCP/IP. You use the APPC format of PGAU, but you will map parameters to TCP/IP using the <code dir="ltr">pg4tcpmap</code> tool.</p>
<p>To map the <code dir="ltr">DEFINE TRANSACTION</code> parameters using <a id="sthref912"></a><a id="sthref913"></a>TCP/IP, you must have a valid input within the <code dir="ltr">PGA_TCP_IMSC</code> table before executing the application. Refer to <a href="tcpmap.htm#g1011686">Chapter 6, &#34;PG4TCPMAP Commands (TCP/IP Only)&#34;</a> for information about setting up and using the mapping tool.</p>
</div>
<!-- class="sect1" -->
<a id="i1007456"></a>
<div id="APPUG1046" class="sect1">
<h2 class="sect1">Executing the Application<a id="sthref914"></a><a id="sthref915"></a></h2>
<p>Before executing the client application, ensure that a connection to the host is established and that the receiving partner is available. In this example we use PL/SQL driver <code dir="ltr">PGTFLIPD</code> to execute the IMS/IMS Connect inquiry. To execute this client application, enter from SQL*Plus:</p>
<pre dir="ltr">set serveroutput on
execute pgtflipd(&#39;hello&#39;);
</pre></div>
<!-- class="sect1" -->
<a id="i1009917"></a>
<div id="APPUG1047" class="sect1">
<h2 class="sect1">Application Development with <a id="sthref916"></a><a id="sthref917"></a><a id="sthref918"></a>Multi-Byte Character Set Support</h2>
<p><a id="sthref919"></a>COBOL presently only supports <a id="sthref920"></a>double byte character sets (DBCS) for <a id="sthref921"></a>PIC G datatypes.</p>
<p>PGAU processes IBM VS COBOLII <code dir="ltr">PIC G</code> datatypes as PL/SQL <code dir="ltr">VARCHAR2</code> variables and generates TIPs which automatically convert the data according to the Oracle <code dir="ltr">NLS_LANGUAGE</code>s specified for the remote host data and the local Oracle data.</p>
<p>These Oracle <code dir="ltr">NLS_LANGUAGE</code>s can be specified as defaults for all <code dir="ltr">PIC G</code> data exchanged by the TIP with the remote transaction (see <code dir="ltr">DEFINE TRANSACTION ... REMOTE_MBCS</code> or <code dir="ltr">LOCAL_MBCS</code>). The Oracle <code dir="ltr">NLS_LANGUAGE</code>s for any individual <code dir="ltr">PIC G</code> data item can be further overridden (see <code dir="ltr">REDEFINE DATA ... REMOTE</code> or <code dir="ltr">LOCAL_LANGUAGE</code>).</p>
<p>DBCS data can be encoded in any combination of supported DBCS character sets. For example, a remote host application which allows different codepages for each field of data in a record is supported by the Oracle Database Gateway MBCS<a id="sthref922"></a> support.</p>
<p>Use of <code dir="ltr">REDEFINE DATA ... REMOTE_LANGUAGE</code> or <code dir="ltr">LOCAL_LANGUAGE</code> on <code dir="ltr">PIC X</code> items is also supported. Thus a TIP can perform DBCS or MBCS conversions for specified <code dir="ltr">PIC X</code> data fields, in addition to SBCS conversions by default for the remaining <code dir="ltr">PIC X</code> data fields. Default SBCS conversion is according to the <code dir="ltr">DEFINE TRANSACTION... NLS_LANGUAGE</code> and local Oracle default <code dir="ltr">LANGUAGE</code> environment values.</p>
<p>When PGAU is generating a TIP, the <code dir="ltr">PIC G</code> datatypes are converted to PL/SQL <code dir="ltr">VARCHAR2</code> datatypes. After conversion by the TIP, received <code dir="ltr">&#39;PIC G&#39; VARCHAR2s</code> can have a length less then the maximum due to deletion of shift-out and shift-in meta characters, and sent <code dir="ltr">&#39;PIC G&#39;</code> RAW datatypes will have the shift-out and shift-in characters inserted as required by the remote host character set specified.</p>
<p>This is different from the conversions performed for <code dir="ltr">PIC X</code> data which is always a known fixed-length and hence <code dir="ltr">CHAR</code> datatypes are used in TIPs for <code dir="ltr">PIC X</code> data fields. However, even when the <code dir="ltr">PIC X</code> field contains DBCS or MBCS data, a <code dir="ltr">CHAR</code> variable is still used and padded with blanks if needed.</p>
<p>Some remote host applications bracket a <code dir="ltr">PIC G</code> field with <code dir="ltr">PIC X</code> bytes used for shift-out, shift-in meta-character insertion. Such a COBOL definition might look like:</p>
<pre dir="ltr">01 MY_RECORD. 
   05 SO PIC X. 
   05 MY_MBCS_DATA PIC G(50). 
   05 SI PIC X. 
</pre>
<p>This is not processed correctly by PGAU, because all three fields are defined, and consequently treated, as separate data items when conversion is performed.</p>
<p>To be properly processed, the definition input to PGAU should be:</p>
<pre dir="ltr">01 MY_RECORD. 
   05 MY_MBCS_DATA PIC G(51).
</pre>
<p>The PGAU <code dir="ltr">REDEFINE DATA</code> statement can redefine the 3-field definition to the 1-field definition by specifying <code dir="ltr">USAGE(SKIP)</code> on fields <code dir="ltr">SO</code> and <code dir="ltr">SI</code>, and <code dir="ltr">&#39;05 MY_MBCS_DATA PIC G(51).&#39;</code> to redefine <code dir="ltr">MY_MBCS_DATA</code>. The three <code dir="ltr">REDEFINE</code> statements can be placed in the PGAU input control file, and thus the remote host definition need not be altered.</p>
</div>
<!-- class="sect1" -->
<a id="i1007662"></a>
<div id="APPUG1048" class="sect1">
<h2 class="sect1">Privileges Needed to Use TIPs<a id="sthref923"></a><a id="sthref924"></a><a id="sthref925"></a></h2>
<p>Execute privileges must be explicitly granted to callers of TIPs or procedures. This privilege cannot be granted through a role.</p>
<p>Any TIP user wanting to trace a TIP must be granted execute privileges on the rtrace and ptrace procedures. Refer to the &#34;Configuring PGAU&#34; chapter appropriate for your communications protocol in the <a class="olink APPCI" href="../APPCI/toc.htm"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for IBM AIX on POWER Systems (64-Bit), Linux x86-64, Oracle Solaris on SPARC (64-Bit), and HP-UX Itanium</span></a>, <a class="olink APPCW" href="../APPCW/toc.htm"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for Microsoft Windows</span></a> ,and the <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Development Guide</span></a> for more information.</p>
<p>For example:</p>
<p>On Microsoft Windows:</p>
<pre dir="ltr">C:\&gt; sqlplus pgaadmin\<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on pgaadmin.purge_trace to <span class="italic">tip_user_userid</span>;
SQL&gt; grant execute on pgaadmin.read_trace to <span class="italic">tip_user_userid;</span> 
</pre>
<p>On UNIX based systems:</p>
<pre dir="ltr">$ sqlplus pgaadmin/<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on pgaadmin.purge_trace to <span class="italic">tip_user_userid</span>;
SQL&gt; grant execute on pgaadmin.read_trace to <span class="italic">tip_user_userid;</span> 
</pre>
<p>After a TIP has been developed, the TIP user must be granted execute privileges on the TIP by the TIP owner. The TIP owner is usually <code dir="ltr">PGAADMIN</code>, but can be another user who has been granted either the <code dir="ltr">PGDDDEF</code> or <code dir="ltr">PGDDGEN</code> roles. For example:</p>
<p>For Microsoft Windows:</p>
<pre dir="ltr">C:\&gt; sqlplus tip_owner\<span class="italic">pw@database_specification_string</span>
SQL&gt; grant execute on tipname to <span class="italic">tip_user_userid</span>;
</pre>
<p>For UNIX based systems:</p>
<pre dir="ltr">$ sqlplus tip_owner/<span class="italic">pw@database_specification_string</span>
SQL&gt; grant execute on tipname to <span class="italic">tip_user_userid</span>;
</pre>
<p>where <code dir="ltr"><span class="codeinlineitalic">database_specification_string</span></code> is the <a id="sthref926"></a>Oracle Net identifier for the Oracle database where the gateway <code dir="ltr">UTL_RAW</code> and <code dir="ltr">UTL_PG</code> components were installed. This is the same Oracle database where the TIPs are executed and where grants on the TIPs are performed from the TIP owner user&nbsp;ID.</p>
<p>A SQL script for performing these grants is provided in the <code dir="ltr">%ORACLE_HOME%\\dg4appc\\admin</code> directory for Microsoft Windows and <code dir="ltr">$ORACLE_HOME/dg4appc/admin</code> in the directory for UNIX based systems. The<a id="sthref927"></a><a id="sthref928"></a> <code dir="ltr">pgddausr.sql</code> script performs the grants for private access to the packages by a single TIP user. If private grants are to be used, the <code dir="ltr">pgddausr.sql</code> script must be run once for each TIP user&#39;s user&nbsp;ID.</p>
<p>To run these scripts, use SQL*Plus to connect to the Oracle database as user <code dir="ltr">PGAADMIN</code>. From SQL*Plus, run the <code dir="ltr">pgddausr.sql</code> script from the <code dir="ltr">%ORACLE_HOME%\\dg4appc\\admin</code> directory on Microsoft Windows or <code dir="ltr">$ORACLE_HOME/dg4appc/admin</code> directory on UNIX based systems. The script performs the necessary grants as previously described. You are prompted for the required user&nbsp;IDs, passwords, and database specification strings. If you are using private grants, repeat this step for each user&nbsp;ID requiring access to the packages.</p>
<p>No script has been provided to perform public grants. To do this, issue the following commands:</p>
<p>For Microsoft Windows:</p>
<pre dir="ltr">C:\&gt; sqlplus tip_owner\<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on tipname to PUBLIC;  
</pre>
<p>For UNIX based systems:</p>
<pre dir="ltr">$ sqlplus tip_owner/<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on tipname to PUBLIC;  
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6308">
<tr>
<td class="cellalignment6317">
<table class="cellalignment6313">
<tr>
<td class="cellalignment6312"><a href="tcpmap.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6312"><a href="pro_det.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6320">
<table class="cellalignment6311">
<tr>
<td class="cellalignment6312"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6312"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6312"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6312"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6312"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6312"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>