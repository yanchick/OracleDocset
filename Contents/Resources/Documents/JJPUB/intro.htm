<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71106"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Introduction%20to%20JPublisher"></a><title>Introduction to JPublisher</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-07T6:1:45Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JPublisher User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49873-02"/>
<meta name="dcterms.isVersionOf" content="JJPUB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="preface.htm" title="Previous" type="text/html"/>
<link rel="Next" href="usejpub.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49873-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/14</span> <!-- End Header -->
<div id="JJPUB24018" class="chapter"><a id="g1020900"></a> <a id="i1009268"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction to JPublisher</h1>
<p>This chapter provides an overview of the JPublisher utility, a summary of JPublisher operations, and a sample translation. It covers the following topics:</p>
<ul>
<li>
<p><a href="#i1008445">Overview of JPublisher</a></p>
</li>
<li>
<p><a href="#i1005576">JPublisher Initial Considerations</a></p>
</li>
<li>
<p><a href="#i1007904">What JPublisher Can Publish</a></p>
</li>
<li>
<p><a href="#i1005791">JPublisher Mappings and Mapping Categories</a></p>
</li>
<li>
<p><a href="#i1008224">JPublisher Input and Output</a></p>
</li>
<li>
<p><a href="#i1006024">JPublisher Operation</a></p>
</li>
</ul>
<a id="i1008445"></a>
<div id="JJPUB24019" class="sect1">
<h2 class="sect1">Overview of JPublisher</h2>
<p>JPublisher is a utility that generates Java classes to represent database entities, such as SQL objects and PL/SQL packages, in a Java client program. It also provides support for publishing from SQL, PL/SQL, and server-side Java to Web services and enabling the invocation of external Web services from inside the database. JPublisher is written in Java.</p>
<p>JPublisher can create classes to represent the following database entities types:</p>
<ul>
<li>
<p>User-defined SQL objects</p>
</li>
<li>
<p>Object references</p>
</li>
<li>
<p>User-defined SQL collections</p>
</li>
<li>
<p>PL/SQL packages</p>
</li>
<li>
<p>Server-side Java classes</p>
</li>
<li>
<p>SQL queries and data manipulation language (DML) statements</p>
</li>
</ul>
<p>JPublisher enables you to specify and customize the mapping of these entities to Java classes in a <a id="sthref12"></a>strongly typed paradigm.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The term, <span class="bold">strongly typed</span>, indicates that a particular Java type is associated with a particular user-defined SQL type, such as an object type. For example, a <code>Person</code> class is associated with a corresponding <code>PERSON</code> SQL type. In addition, there is a corresponding Java type for each attribute of the SQL object type.</div>
<p>The utility generates the accessor methods, <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> and <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code>, for each attribute of an object type. If the object type has stored procedures, then JPublisher can generate wrapper methods to invoke the stored procedures. In this scenario, a wr<a id="sthref13"></a>apper method is a Java method that invokes a stored procedure, which runs in Oracle Database.</p>
<p>JPublisher can also generate classes for PL/SQL packages. These classes have wrapper methods to call the stored procedures in a PL/SQL package.</p>
<p>Instead of directly using JPublisher-generated classes, you can:</p>
<ul>
<li>
<p>Extend the generated classes. This process is straightforward. JPublisher generates initial versions of the subclasses, to which you can add any desired functionality.</p>
</li>
<li>
<p>Write your own Java classes. This approach is flexible, but time-consuming and error-prone.</p>
</li>
<li>
<p>Use generic, weakly typed classes of the <code>oracle.sql</code> package to represent object, object reference, and collection types. If these classes meet your requirements, then you do not need JPublisher. Use this approach if you need to generically process any SQL object, collection, reference, or <code>OPAQUE</code> type.</p>
</li>
</ul>
<p>In addition, JPublisher simplifies access to PL/SQL types from Java. You can use predefined or user-defined mappings between PL/SQL and SQL types, as well as use PL/SQL conversion functions between such types. With these mappings in place, JPublisher can automatically generate all the required Java and PL/SQL code. It also enables you to publish server-side Java classes to client-side Java classes, allowing your application to make direct calls to Java classes in the database.</p>
<p>Several features enable the exposure of Java classes, which are generated from publishing SQL, PL/SQL, or server-side Java entities, as Web services.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adfeacon.htm#i1008667">&#34;Summary of JPublisher Support for Web Services&#34;</a></div>
</div>
<!-- class="sect1" -->
<a id="i1005576"></a>
<div id="JJPUB24020" class="sect1">
<h2 class="sect1">JPublisher Initial Considerations</h2>
<p>The following sections provide an overview of JPublisher features and requirements. It also describes and how JPublisher uses SQLJ in its code generation:</p>
<ul>
<li>
<p><a href="#BHCIBBIH">New Features in Oracle Database 12c Release 1(12.1.0.2) JPublisher</a></p>
</li>
<li>
<p><a href="#i1009893">General Requirements for JPublisher</a></p>
</li>
<li>
<p><a href="#BABDBHGE">Installing JPublisher</a></p>
</li>
<li>
<p><a href="#i1010637">Verifying JPublisher Installation</a></p>
</li>
<li>
<p><a href="#BHCCICEJ">JPublisher Usage of the SQLJ Implementation</a></p>
</li>
<li>
<p><a href="#BABHEAJG">Situations for Reduced Requirements</a></p>
</li>
<li>
<p><a href="#BHCBJBAH">JPublisher Limitations</a></p>
</li>
</ul>
<a id="BHCIBBIH"></a>
<div id="JJPUB24021" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">New Features in Oracle Database 12c Release 1(12.1.0.2) JPublisher</h3>
<p>There are no new features in this release of JPublisher.</p>
</div>
<!-- class="sect2" -->
<a id="i1009893"></a>
<div id="JJPUB02220" class="sect2">
<h3 class="sect2">General Re<a id="sthref14"></a>quirements for JPublisher</h3>
<p>This section describes the basic requirements for JPublisher. It also discusses situations with less stringent requirements.</p>
<p>When you use the JPublisher utility, you must also have classes for the Oracle SQLJ implementation, the Oracle JDBC implementation, and a Sun Microsystems JDK, among other things.</p>
<p>To use all features of JPublisher, you must have the following installed and set in the appropriate environment variables, as applicable:</p>
<ul>
<li>
<p>Oracle Database 12<span class="italic">c</span></p>
</li>
<li>
<p>JPublisher invocation script or executable</p>
<p>The <code>jpub</code> script for UNIX systems or the <code>jpub.exe</code> program for Microsoft Windows must be in your file path. These are typically in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/bin</code>, or <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/bin</code> for manual downloads. With proper setup, if you type just <code>jpub</code> on the command line, you will see information about common JPublisher options and input settings.</p>
</li>
<li>
<p>JPublisher and SQLJ translator classes</p>
<p>These classes are in the <code>translator.jar</code> library, typically in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/lib</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The translator library is also automatically loaded into the database in <code>translator-jserver.jar</code>.</div>
</li>
<li>
<p>SQLJ run time classes</p>
<p>The SQLJ run-time library is <code>runtime12.jar</code> for JDK 1.5 and later. It is typically located in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/lib</code>. It includes JPublisher client-side run-time classes, particularly <code>oracle.jpub.reflect.Client</code>, and JPublisher server-side run-time classes, particularly <code>oracle.jpub.reflect.Server</code>. These classes are used for Java call-ins to the database.</p>
</li>
<li>
<p>Oracle Database 12<span class="italic">c</span> or Oracle Database 11<span class="italic">g</span> JDBC drivers</p>
<p>If you are using JPublisher 12<span class="italic">c</span> with Oracle 12<span class="italic">c</span> JDBC, then the supported JDK versions are only JDK 6 and JDK 7. However, if you are using JPublisher 12<span class="italic">c</span> with Oracle JDBC 11<span class="italic">g</span> driver, then you can also use JDK version 1.5. Oracle JDBC library is typically located in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/jdbc/lib</code>. Each JDBC library also includes the JPublisher run-time classes in the <code>oracle.jpub.runtime</code> package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a></div>
</li>
<li>
<p>Web services classes</p>
<p>These classes are included in the <code>dbwsa.jar</code> and <code>dbwsclient.jar</code> libraries, which are typically located in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/lib</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
These <code>.jar</code> files are not included in JPublisher distribution, but are included in the database Web services call-out utility, which can be downloaded from <code><a href="http://download.oracle.com/technology/sample_code/tech/java/jsp/dbws-callout-utility-10131.zip">http://download.oracle.com/technology/sample_code/tech/java/jsp/dbws-callout-utility-10131.zip</a></code></div>
</li>
<li>
<p>Additional PL/SQL packages and Java Archive (JAR) files in the database, as needed</p>
<p>There are packages and JAR files that must be in the database if you use JPublisher features for Web services call-ins, Web services call-outs, support for PL/SQL types, or support for invocation of server-side Java classes. Some of these packages and files are preloaded, but some must be loaded manually.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1010637">&#34;Verifying JPublisher Installation&#34;</a></div>
</li>
<li>
<p><code>aurora.zip</code></p>
<p>When publishing a Web services client using <code>-proxywsdl</code> or publishing server-side Java classes using <code>-dbjava</code>, JPublisher may load generated Java wrapper into the database. In this case, the <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/lib/aurora.zip</code> file is required. On Microsoft Windows, add this file to <code>CLASSPATH</code>. On Unix systems, the <code>jpub</code> script picks up <code>aurora.zip</code> automatically. If the <code>aurora.zip</code> file is not available, then you can turn off the JPublisher loading behavior by specifying <code>-proxyopt=noload</code> on the command line.</p>
</li>
<li>
<p>JDK version 1.4 or later</p>
<p>For Web services call-outs or to map <code>SYS.XMLType</code> for Web services, you need JDK 1.4 or later.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#CIHBFGJG">&#34;Java Environment Options&#34;</a></div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABDBHGE"></a>
<div id="JJPUB24022" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Installing JPublisher</h3>
<p>In order to install JPublisher, you must install SQLJ in your system. Perform the following steps to install SQLJ:</p>
<ol>
<li>
<p>Download and unzip the Oracle Database 12<span class="italic">c</span> Client CD.</p>
</li>
<li>
<p>Execute Oracle Universal Installer by running the <code>setup.exe</code> file.</p>
<p>The Welcome window appears as shown in <a href="#CEGGIEBA">Figure 1-1</a>.</p>
<div id="JJPUB24023" class="figure">
<p class="titleinfigure"><a id="CEGGIEBA"></a>Figure 1-1 Oracle Universal Installer Welcome Screen</p>
<img width="646" height="508" src="img/welcome.gif" alt="Description of Figure 1-1 follows"/><br/>
<a id="sthref15" href="img_text/welcome.htm">Description of &#34;Figure 1-1 Oracle Universal Installer Welcome Screen&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Click <span class="bold">Next</span>.</p>
<p>The Select Installation Type window appears as shown in <a href="#BABECJHB">Figure 1-2</a>.</p>
<div id="JJPUB24024" class="figure">
<p class="titleinfigure"><a id="BABECJHB"></a>Figure 1-2 Oracle Universal Installer Select Installation Type Screen</p>
<img width="646" height="508" src="img/installation_type.gif" alt="Description of Figure 1-2 follows"/><br/>
<a id="sthref16" href="img_text/installation_type.htm">Description of &#34;Figure 1-2 Oracle Universal Installer Select Installation Type Screen&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select Custom as the installation type and click <span class="bold">Next</span>.</p>
<p>The Install Location window appears as shown in <a href="#BABIEIDD">Figure 1-3</a>.</p>
<div id="JJPUB24025" class="figure">
<p class="titleinfigure"><a id="BABIEIDD"></a>Figure 1-3 Oracle Universal Installer Install Location Screen</p>
<img width="646" height="508" src="img/install_location.gif" alt="Description of Figure 1-3 follows"/><br/>
<a id="sthref17" href="img_text/install_location.htm">Description of &#34;Figure 1-3 Oracle Universal Installer Install Location Screen&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Verfiy if your Oracle Database home is correct, and click <span class="bold">Next</span>.</p>
<p>The Available Product Components window appears as shown in <a href="#BABDBEFF">Figure 1-4</a>.</p>
<div id="JJPUB24027" class="figure">
<p class="titleinfigure"><a id="BABDBEFF"></a>Figure 1-4 Oracle Universal Installer Available Product Components Screen</p>
<img width="646" height="508" src="img/components.gif" alt="Description of Figure 1-4 follows"/><br/>
<a id="sthref18" href="img_text/components.htm">Description of &#34;Figure 1-4 Oracle Universal Installer Available Product Components Screen&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select Oracle SQLJ from the Components column in the Oracle Client section and click <span class="bold">Next</span>.</p>
<p>The Summary window appears.</p>
<div id="JJPUB24028" class="figure">
<p class="titleinfigure"><a id="sthref19"></a>Figure 1-5 Oracle Universal Installer Summary Screen</p>
<img width="646" height="508" src="img/summary.gif" alt="Description of Figure 1-5 follows"/><br/>
<a id="sthref20" href="img_text/summary.htm">Description of &#34;Figure 1-5 Oracle Universal Installer Summary Screen&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Review your selections, and then click Install.</p>
<p>The Install window appears displaying the progress.</p>
<div id="JJPUB24029" class="figure">
<p class="titleinfigure"><a id="sthref21"></a>Figure 1-6 Oracle Universal Installer Install Screen</p>
<img width="646" height="508" src="img/install.gif" alt="Description of Figure 1-6 follows"/><br/>
<a id="sthref22" href="img_text/install.htm">Description of &#34;Figure 1-6 Oracle Universal Installer Install Screen&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Click <span class="bold">Exit</span> and then click <span class="bold">Yes</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1010637"></a>
<div id="JJPUB24030" class="sect2">
<h3 class="sect2">Verifying JPublisher Installation</h3>
<p>Depending on the JPublisher features that you need to use, some or all of the following PL/SQL packages and JAR files must be present in the database:</p>
<ul>
<li>
<p>The <code>SQLJUTL</code> package, to support PL/SQL types</p>
</li>
<li>
<p>The <code>SQLJUTL2</code> package, to support invocation of server-side Java classes</p>
</li>
<li>
<p>The <code>UTL_DBWS</code> package, to support Web services call-outs</p>
</li>
<li>
<p>The <code>dbwsclient.jar</code> file, to support the Java API for XML-based Remote Procedure Call (JAX-RPC) or Simple Object Access Protocol (SOAP) client proxy classes for Web services call-outs from Oracle Database 12<span class="italic">c</span> or Oracle Database 11g.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1011069">&#34;Options to Facilitate Web Services Call-Outs&#34;</a></div>
</li>
<li>
<p>JAR files to support SOAP client proxy classes for Web services call-outs from Oracle9<span class="italic">i</span> or Oracle8<span class="italic">i</span> Database</p>
<p>For Web services call-outs from Oracle9<span class="italic">i</span> Database or Oracle8<span class="italic">i</span> Database, there is no JAR file similar to <code>dbwsclient.jar</code>. You must load several JAR files instead. Also note that JPublisher does not yet support JAX-RPC client proxy classes in Oracle9<span class="italic">i</span> or Oracle8<span class="italic">i</span>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Starting from Oracle Database 10<span class="italic">g</span>, the <code><a id="sthref23"></a>sqljutl.jar</code> is preloaded in the database and you get built-in support for Web services call-ins. The <code>sqljutl.jar</code> file that was required to load manually in Oracle9<span class="italic">i</span> Database and Oracle8<span class="italic">i</span> Database, is not shipped anymore.</p>
</li>
<li>
<p>The <code>UTL_DBWS</code> package and the <code>dbwsclient.jar</code> file are associated with each other, and both support the same set of features.</p>
</li>
</ul>
</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#BHCDBCDI">Verifying or Installing the SQLJUTL and SQLJUTL2 Packages</a></p>
</li>
<li>
<p><a href="#BHCIBFGJ">Verifying or Installing the UTL_DBWS Package</a></p>
</li>
<li>
<p><a href="#BHCBACII">Verifying or Loading the dbwsclient.jar File</a></p>
</li>
<li>
<p><a href="#BHCJBJIG">Loading JAR Files For Web Services Call-Outs in Oracle9<span class="italic">i</span> or Oracle8<span class="italic">i</span></a></p>
</li>
<li>
<p><a href="#BHCGEEAF">Setting Up Password File for Remote SYS Login</a></p>
</li>
</ul>
<a id="BHCDBCDI"></a>
<div id="JJPUB24031" class="sect3">
<h4 class="sect3">Verifying or Installing the SQLJUTL and SQLJUTL2 Packages</h4>
<p>In Oracle Database 12<span class="italic">c</span>, the PL/SQL packages <code>SQLJUTL</code> and <code>SQLJUTL2</code> are automatically installed in the database <code>SYS</code> schema. To verify the installation, try to describe the packages as follows:</p>
<pre>SQL&gt; describe sys.sqljutl
SQL&gt; describe sys.sqljutl2
</pre>
<p>If JPublisher displays a message similar to the following, then the packages are missing:</p>
<pre>Warning: Cannot determine what kind of type is &lt;schema&gt;.&lt;type.&gt; You likely need
to install SYS.SQLJUTL. The database returns: ORA-06550: line 1, column 7:
PLS-00201: identifier &#39;SYS.SQLJUTL&#39; must be declared
</pre>
<p>To install the <code>SQLJUTL</code> and <code>SQLJUTL2</code> packages, you must install one of the following files in the <code>SYS</code> schema:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/lib/sqljutl.sql</code> for Oracle9<span class="italic">i</span>, Oracle Database 10<span class="italic">g</span>, or Oracle Database 12<span class="italic">c</span></p>
</li>
<li>
<p><code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/lib/sqljutl8.sql</code> for Oracle8<span class="italic">i</span></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BHCIBFGJ"></a>
<div id="JJPUB24033" class="sect3">
<h4 class="sect3">Verifying or Installing the UTL_DBWS Package</h4>
<p>In Oracle Database 12<span class="italic">c</span> release, the <code>UTL_DBWS</code> PL/SQL package is not automatically installed in the database <code>SYS</code> schema due to security reasons. You must install this package by running the <code>utl_dbws_decl.sql</code> and <code>utl_dbws_body.sql</code> scripts into the user schema included as callout utilities available on the following OTN page:</p>
<p><code><a href="http://download.oracle.com/technology/sample_code/tech/java/jsp/dbws-callout-utility-10131.zip">http://download.oracle.com/technology/sample_code/tech/java/jsp/dbws-callout-utility-10131.zip</a></code></p>
<p>To verify the installation, try to describe the package as follows:</p>
<pre>SQL&gt; describe hr.utl_dbws
</pre></div>
<!-- class="sect3" -->
<a id="BHCBACII"></a>
<div id="JJPUB24034" class="sect3">
<h4 class="sect3">Verifying or Loading the dbwsclient.jar File</h4>
<p>In Oracle Database 12<span class="italic">c</span>, the following file must be loaded into the database for Web services call-outs:</p>
<p><code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/lib/dbwsclient.jar</code></p>
<p>It is not preloaded, but you can verify whether it is already loaded by running the following query in the user schema:</p>
<pre>SQL&gt;  select status, object_type from all_objects where
      dbms_java.longname(object_name)=&#39;oracle/jpub/runtime/dbws/DbwsProxy$1&#39;;
</pre>
<p>The following result indicates that the file is already loaded:</p>
<pre>STATUS  OBJECT_TYPE
------- -------------------
VALID   JAVA CLASS
VALID   SYNONYM
</pre>
<p>If it not loaded, then you can use the <code>loadjava</code> utility to load it as shown in the following example:</p>
<pre>% loadjava -oci8 -u sys -r -v -f -s 
           -grant public dbwsclient.jar
Password: <span class="italic">password</span>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Before loading this file, verify that <code>java_pool_size</code> is set to at least 80 MB and <code>shared_pool_size</code> is set to at least 96 MB.</div>
</div>
<!-- class="sect3" -->
<a id="BHCJBJIG"></a>
<div id="JJPUB24035" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Loading JAR Files For Web Services Call-Outs in Oracle9<span class="italic">i</span> or Oracle8<span class="italic">i</span></h4>
<p>For Web services call-outs from an Oracle9<span class="italic">i</span> or Oracle8<span class="italic">i</span> database, use SOAP client proxy classes. For this, you must load a number of JAR files into the database. This can be accomplished with the following command:</p>
<pre>% loadjava -u sys -r -v -s -f -grant public 
           <span class="italic">ORACLE_HOME</span>/soap/lib/soap.jar 
           <span class="italic">ORACLE_HOME</span>/dms/lib/dms.jar 
           <span class="italic">J2EE_HOME</span>/lib/servlet.jar 
           <span class="italic">J2EE_HOME</span>/lib/ejb.jar 
           <span class="italic">J2EE_HOME</span>/lib/mail.jar
Password: <span class="italic">password</span>
</pre>
<p>You can obtain these files from an Oracle Application Server installation. You would presumably run Web services in conjunction with Oracle Application Server Containers for J2EE (OC4J).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The JAX-RPC client proxy classes are not yet supported in Oracle9<span class="italic">i</span> or Oracle8<span class="italic">i</span>.</p>
</li>
<li>
<p>Before loading this file, verify that <code>java_pool_size</code> is set to at least 80 MB and <code>shared_pool_size</code> is set to at least 96 MB.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BHCGEEAF"></a>
<div id="JJPUB24036" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting Up Password File for Remote SYS Login</h4>
<p>By default, if the <code>-user</code> and <code>-sysuser</code> options are set while publishing Web services client using <code>-proxywsdl</code> or publishing server-side Java classes using <code>-dbjava</code>, then JPublisher will load the generated Java and PL/SQL wrappers into the database. When the <code>-url</code> setting specifies a JDBC Thin driver, the loading process requires the database password file to be set up properly. You can set up the password file by performing the following steps:</p>
<ol>
<li>
<p>On the command line, enter the following command:</p>
<pre>orapwd file=$ORACLE_HOME/dbs/orapw entries=5
Enter password: <span class="italic">password</span>
</pre>
<p>In the preceding command, <code><span class="codeinlineitalic">yourpass</span></code> is the password of your choice.</p>
</li>
<li>
<p>From SQL*Plus, connect to the database as <code>SYSDBA</code>, as follows:</p>
<pre>CONNECT / AS SYSDBA
</pre>
<p>Change the password of <code>SYS</code> to the password set in the previous step, as follows:</p>
<pre>PASSWORD SYS
       Changing password for SYS
       New password: <span class="italic">password</span>
       Retype new password: <span class="italic">password</span>
</pre></li>
<li>
<p>Edit the <code>init.ora</code> file and add the following line to it:</p>
<pre>REMOTE_LOGIN_PASSWORDFILE=EXCLUSIVE
</pre>
<p>This enables remote login as <code>SYSDBA</code>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a></div>
<p>Alternatively, with the password file set up, you can manually load JPublisher generated PL/SQL wrapper and Java wrapper into the database. To turn off automatic loading by JPublisher, specify <code>-proxyopt=noload</code> on the command line.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BHCCICEJ"></a>
<div id="JJPUB24037" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JPublisher Usage of the SQLJ Implementation</h3>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#BHCICDHD">Overview of SQLJ Usage</a></p>
</li>
<li>
<p><a href="#BHCGGFBE">Overview of SQLJ Concepts</a></p>
</li>
<li>
<p><a href="#BHCBCHDJ">Backward-Compatibility Modes Affecting SQLJ Source Files</a></p>
</li>
</ul>
<a id="BHCICDHD"></a>
<div id="JJPUB24038" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Overvi<a id="sthref24"></a>ew of SQLJ Usage</h4>
<p>Oracle SQLJ translator and run-time libraries are supplied with the JPublisher product. The JPublisher utility uses the Oracle SQLJ implementation by generating SQLJ code as an intermediate step in most circumstances, such as the creation of wrapper methods. The wrapper methods are created either for classes representing PL/SQL packages or for classes representing SQL object types that define PL/SQL stored procedures. In these cases, JPublisher uses Oracle SQLJ translator during compilation and Oracle SQLJ run time during program execution.</p>
<p>In Oracle Database 12<span class="italic">c</span>, <a id="sthref25"></a><a id="sthref26"></a>the usage of SQLJ by JPublisher is transparent by default. SQLJ source files that JPublisher generates are automatically translated and deleted, unless you specify otherwise in the JPublisher settings. This automatic translation saves you the effort of explicitly translating the files. The resulting <code>.java</code> files, which use the SQLJ functionality, and the associated <code>.class</code> files produced by compilation, define the <span class="bold">SQLJ classes</span>. These classes use the Oracle SQLJ run-time application programming interfaces (APIs) while running. Generated classes that do not use the SQLJ run time are referred to as <span class="bold">non-SQLJ classes</span>. Non-SQLJ classes are generated when JPublisher creates classes for SQL types that do not have stored procedures or when JPublisher is specifically set to not generate wrapper methods.</p>
<p>In Oracle Database 12<span class="italic">c</span>, it is possible to pass options to the SQLJ translator through the JPublisher <code>-sqlj</code> option.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#CIHFCJHC">&#34;Option to Access SQLJ Functionality&#34;</a></div>
<p>JPublisher is included in <code>translator.jar</code>, which also contains the SQLJ translator library. JPublisher generated classes may rely on <code>runtime12.jar</code>, which is the SQLJ run-time library for Java Development Kit (JDK) 1.5 and later.</p>
</div>
<!-- class="sect3" -->
<a id="BHCGGFBE"></a>
<div id="JJPUB24039" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Overview of SQLJ Concepts</h4>
<p>A SQLJ program is a Java program containing embedded SQL statements that comply with the International Standardization Organization (ISO) standard SQLJ Language Reference syntax. SQLJ source code contains a mixture of standard Java source, SQLJ class declarations, and SQLJ executable statements with embedded SQL operations.</p>
<p>SQLJ was chosen because it uses simplified code for database access as compared to JDBC code. In SQLJ, a SQL statement is embedded in a single <code>#sql</code> statement, but several JDBC statements may be required for the same operation.</p>
<p>This section briefly defines the following key concepts of SQLJ:</p>
<ul>
<li>
<p>Connection contexts</p>
<p>A SQLJ <span class="bold">connec<a id="sthref27"></a><a id="sthref28"></a>tion context</span> object is a strongly typed database connection object. You can use each connection context class for a particular set of interrelated SQL entities. This means that all the connections you define using a particular connection context class will use tables, views, and stored procedures that have names and data types in common. In theory, the advantage in tailoring connection context classes to sets of SQL entities is in the degree of online semantics-checking that is permitted during SQLJ translation. JPublisher does not use online semantics-checking when it invokes the SQLJ translator, but you can use this feature if you choose to work with <code>.sqlj</code> files directly.</p>
<p>The <code>sqlj.runtime.ref.DefaultContext</code> connection context class is used by def<a id="sthref29"></a><a id="sthref30"></a>ault. The SQLJ <span class="bold">default context</span> is a default connection object and an instance of this class. The <code>DefaultContext</code> class or any custom connection context class implements the standard <code>sqlj.runtime.ConnectionContext</code> interface. You can use the JPublisher <code>-context</code> option to specify the connection context class that JPublisher instantiates for database connections.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#CIHEAGEA">&#34;SQLJ Connection Context Classes&#34;</a></div>
</li>
<li>
<p>Iterators</p>
<p>A SQLJ <span class="bold">ite<a id="sthref31"></a><a id="sthref32"></a>rator</span> is a strongly typed version of a JDBC result set and is associated with the underlying database cursor. SQLJ iterators are used for taking query results from a <code>SELECT</code> statement. The strong typing is based on the data type of each query column.</p>
</li>
<li>
<p>Execution contexts</p>
<p>A SQLJ <span class="bold">execu<a id="sthref33"></a><a id="sthref34"></a>tion context</span> is an instance of the standard <code>sqlj.runtime.ExecutionContext</code> class and provides a context in which SQL operations are run. An execution context instance is associated either implicitly or explicitly with each SQL operation that is run through SQLJ code.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BHCBCHDJ"></a>
<div id="JJPUB24040" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Back<a id="sthref35"></a>ward-Compatibility Modes Affecting SQLJ Source Files</h4>
<p>In Oracle8<span class="italic">i</span> Database and Oracle9<span class="italic">i</span> Database, JPublisher produces <code>.sqlj</code> source files as visible output, which you can translate by using the SQLJ command-line interface.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
On UNIX systems, you can access the SQLJ command-line interface by running the <code>sqlj</code> script. In Microsoft Windows, you use <code>sqlj.exe</code>.</div>
<p>In Oracle Database 12<span class="italic">c</span>, JPublisher supports several backward-compatibility settings through the <code>-compatible</code> option. This option enables you to work with generated <code>.sqlj</code> files in a similar fashion. Some of the <code>-compatible</code> option settings are as follows:</p>
<ul>
<li>
<p><code>-compatible=sqlj</code></p>
<p>This forces JPublisher skip the step of translating <code>.sqlj</code> files. You must translate the <code>.sqlj</code> files explicitly. To translate the files, you can either run JPublisher using only the <code>-sqlj</code> option or you can run the SQLJ translator directly through its own command-line interface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#CIHFCJHC">&#34;Option to Access SQLJ Functionality&#34;</a></div>
</li>
<li>
<p><code>-compatible=9i</code></p>
<p>This sets JPublisher to Oracle9<span class="italic">i</span> compatibility mode. In this mode, JPublisher generates <code>.sqlj</code> files with the same code as in Oracle9<span class="italic">i</span> versions. This enables you to work directly with <code>.sqlj</code> files.</p>
</li>
<li>
<p><code>-compatible=8i</code> or <code>-compatible=both8i</code></p>
<p>This sets JPublisher to Oracle8<span class="italic">i</span> compatibility mode. JPublisher then generates <code>.sqlj</code> files with the same code as in Oracle8<span class="italic">i</span> versions. As with Oracle9<span class="italic">i</span> compatibility mode, this mode enables you to work directly with <code>.sqlj</code> files.</p>
</li>
</ul>
<p>Oracle8<span class="italic">i</span> and Oracle9<span class="italic">i</span> compatibility modes, particularly the former, result in significant differences in the code that JPublisher generates. If your only goal is to work directly with the <code>.sqlj</code> files, then use the <code>sqlj</code> setting.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adfeacon.htm#i1009130">&#34;Backward Compatibility and Migration&#34;</a> and <a href="optinfil.htm#i1010532">&#34;Backward Compatibility Option&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABHEAJG"></a>
<div id="JJPUB24041" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Situations for Reduced Requirements</h3>
<p>If you do not use certain features of JPublisher, then your requirements may be less stringent. Some of the situations for reduced requirements are as follows:</p>
<ul>
<li>
<p>If you never generate classes that implement the Oracle-specific <code>oracle.sql.ORAData</code> interface or the deprecated <code>oracle.sql.CustomDatum</code> interface, then you can use a non-Oracle JDBC driver and connect to a non-Oracle Database. However, JPublisher must be able to connect to Oracle Database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle does not test or support configurations that use non-Oracle components.</div>
</li>
<li>
<p>If you instruct JPublisher to <span class="italic">not</span> generate wrapper methods by setting <code>-methods=false</code>, or if your object types do not define any methods, then JPublisher will not generate wrapper methods or produce any SQLJ classes. In these circumstances, there is no SQLJ translation step and the SQLJ translator is not required.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1009664">&#34;Generation of Package Classes and Wrapper Methods&#34;</a></div>
</li>
<li>
<p>If you do not use JPublisher functionality to enable Web services call-outs, then you do not need <code>dbwsa.jar</code> or <code>dbwsclient.jar</code> to be loaded in the database.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BHCBJBAH"></a>
<div id="JJPUB24042" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JPublisher Li<a id="sthref36"></a>mitations</h3>
<p>You must be aware of the following limitations when you use JPublisher:</p>
<ul>
<li>
<p>JPublisher support for PL/SQL <code>RECORD</code> and indexed-by table types is limited. An intermediate wrapper layer is used to map a <code>RECORD</code> or an indexed-by-table argument to a SQL type that JDBC supports. In addition, JPublisher cannot fully support the semantics of indexed-by tables. An indexed-by table is similar in structure to a Java hashtable, but information is lost when JPublisher maps this to a SQL <code>TABLE</code> type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1010202">&#34;Type Mapping Support for PL/SQL RECORD and Index-By Table Types&#34;</a></div>
</li>
<li>
<p>If you use an <code>INPUT</code> file to specify type mappings, then note that some potentially disruptive error conditions do not result in error or warning messages from JPublisher. Additionally, there are reserved terms that you are not permitted to use as SQL or Java identifiers.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#CIHGIAJB">&#34;INPUT File Precautions&#34;</a></div>
</li>
<li>
<p>The <code>-omit_schema_names</code> JPublisher option has a boolean logic, but does not use the same syntax as other boolean options. You can use this option to instruct JPublisher to <span class="italic">not</span> use schema names to qualify SQL names that are referenced in wrapper classes. By default, JPublisher uses schema names to qualify SQL names. To disable the use of schema names, enter the <code>-omit_schema_names</code> option on the command line, but do <span class="italic">not</span> attempt to set <code>-omit_schema_names=true</code> or <code>-omit_schema_names=false</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1009676">&#34;Omission of Schema Name from Name References&#34;</a></div>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
This chapter refers to the input file specified by the <code>-input</code> option as the <code>INPUT</code> file to distinguish from any other kinds of input files.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007904"></a>
<div id="JJPUB24043" class="sect1">
<h2 class="sect1">What JPublisher Can Publish</h2>
<p>You can use JPublisher to publish:</p>
<ul>
<li>
<p>SQL user-defined types</p>
</li>
<li>
<p>PL/SQL packages</p>
</li>
<li>
<p>Server-side Java classes</p>
</li>
<li>
<p>SQL queries or DML statements</p>
</li>
<li>
<p>Proxy classes and wrappers for Web services call-outs</p>
</li>
<li>
<p>Oracle Streams AQ</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="usejpub.htm#CHDJFBEC">Chapter 2, &#34;Using JPublisher&#34;</a></div>
</div>
<!-- class="sect1" -->
<a id="i1005791"></a>
<div id="JJPUB24044" class="sect1">
<h2 class="sect1">JPublisher Mappings and Mapping Categories</h2>
<p>The following sections provide a basic overview of JPublisher mappings and mapping categories:</p>
<ul>
<li>
<p><a href="#i1005822">JPublisher Mappings for User-Defined Types and PL/SQL Types</a></p>
</li>
<li>
<p><a href="#i1008144">JPublisher Mapping Categories</a></p>
</li>
</ul>
<a id="i1005822"></a>
<div id="JJPUB24045" class="sect2">
<h3 class="sect2">JPublisher Mappings for User-Defined Types and PL/SQL Types</h3>
<p>JPublisher provides mappings from the following to Java classes:</p>
<ul>
<li>
<p>User-defined SQL types</p>
</li>
<li>
<p>PL/SQL types</p>
</li>
</ul>
<a id="i1008057"></a>
<div id="JJPUB24046" class="sect3">
<h4 class="sect3">Represent<a id="sthref37"></a><a id="sthref38"></a><a id="sthref39"></a>ing User-Defined SQL Types Through JPublisher</h4>
<p>You can use an Oracle-specific implementation, a standard implementation, or a generic implementation in representing user-defined SQL types, such as objects, collections, object references, and <code>OPAQUE</code> types, in your Java program.</p>
<p>Following is a summary of these three approaches:</p>
<ul>
<li>
<p>Use classes that implement the Oracle-specific <code>ORA<a id="sthref40"></a>Data</code> interface.</p>
<p>JPublisher generates classes that implement the <code>oracle.sql.ORAData</code> interface. The <code>ORAData</code> interface supports SQL objects, object references, collections, and <code>OPAQUE</code> types in a strongly typed way. That is, for each specific object, object reference, collection, or <code>OPAQUE</code> type in the database, there is a corresponding Java type.</p>
</li>
<li>
<p>Use classes that implement the standard <code>SQL<a id="sthref41"></a>Data</code> interface, as described in the JDBC specification.</p>
<p>JPublisher generates classes for SQL object types that implement the <code>java.sql.SQLData</code> interface. When you use the <code>SQLData</code> interface, all object reference types are represented generically as <code>java.sql.Ref</code> and all collection types are represented generically as <code>java.sql.Array</code>. In addition, when using <code>SQLData</code>, there is no mechanism for representing <code>OPAQUE</code> types.</p>
</li>
<li>
<p>Use <code>oracle.sql.*</code> classes.</p>
<p>You can use the <code>oracle.sql.*</code> classes to represent user-defined types generically. The <code>oracle.sql.STRUCT</code> class represents all object types, the <code>oracle.sql.ARRAY</code> class represents all the variable array (VARRAY) and nested table types, the <code>oracle.sql.REF</code> class represents all the object reference types, and the <code>oracle.sql.OPAQUE</code> class represents all <code>OPAQUE</code> types. These classes are immutable in the same way that <code>java.lang.String</code> is.</p>
<p>Choose this option for code that processes objects, collections, references, or <code>OPAQUE</code> types in a generic way. Unlike classes implementing <code>ORAData</code> or <code>SQLData</code>, <code>oracle.sql.*</code> classes are not strongly typed.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can create your own classes, but this is not recommended. If you create your own classes or generate classes for an inheritance hierarchy of object types, then your classes must be registered using a type map.</div>
<p>In addition to strong typing, JPublisher-generated classes that implement <code>ORAData</code> or <code>SQLData</code> have the following advantages:</p>
<ul>
<li>
<p>The classes are customized, rather than generic. You access attributes of an object using <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> and <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods named after the particular attributes of the object. Note that you must explicitly update the object in the database if there are any changes to its data.</p>
</li>
<li>
<p>The classes are mutable. You can modify attributes of an object or elements of a collection. An exception is that <code>ORAData</code> classes representing object reference types are not mutable, because an object reference does not have any subcomponents that can be modified. You can, however, use the <code>setValue()</code> method of a reference object to change the database value that the reference points to.</p>
</li>
<li>
<p>You can generate Java wrapper classes that are serializable or that have the <code>toString()</code> method to print out the object along with its attribute values.</p>
</li>
</ul>
<p>Compared to classes that implement <code>SQLData</code>, classes that implement <code>ORAData</code> are fundamentally more efficient, because <code>ORAData</code> classes avoid unnecessary conversions to native Java types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a>.</div>
</div>
<!-- class="sect3" -->
<a id="i1008116"></a>
<div id="JJPUB24047" class="sect3">
<h4 class="sect3">Using Strongly Typed Ob<a id="sthref42"></a><a id="sthref43"></a>ject References for ORAData Implementations</h4>
<p>For Oracle <code>ORAData</code> implementations, JPublisher always generates strongly typed object reference classes, in contrast to using the weakly typed <code>oracle.sql.REF</code> class. This is to provide greater type safety and to mirror the behavior in SQL, in which object references are strongly typed. The strongly typed classes, for example, the <code>PersonRef</code> class for references to the <code>PERSON</code> object, are wrappers for the <code>oracle.sql.REF</code> class.</p>
<p>In these strongly typed <code>REF</code> wrappers, a <code>getValue()</code> method produces an instance of the SQL object that is referenced as of an instance of the corresponding Java class. In the case of inheritance, the method produces an instance of a subclass of the corresponding Java class.</p>
<p>For example, if there is a <code>PERSON</code> object type in the database with a corresponding <code>Person</code> Java class, then there will also be a <code>PersonRef</code> Java class. The <code>getValue()</code> method of the <code>PersonRef</code> class would return a <code>Person</code> instance containing the data for a <code>PERSON</code> object in the database. In addition, JPublisher also generates a static <code>cast()</code> method on the <code>PersonRef</code> class. This permits you to convert other typed references to a <code>PersonRef</code> instance.</p>
<p>Whenever a SQL object type has an attribute that is an object reference, the Java class corresponding to the object type would have an attribute that is an instance of a Java class corresponding to the appropriate reference type. For example, if there is a <code>PERSON</code> object with a <code>MANAGER REF</code> attribute, then the corresponding <code>Person</code> Java class will have a <code>ManagerRef</code> attribute.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24048" class="sect3"><a id="sthref44"></a>
<h4 class="sect3">Using PL/S<a id="sthref45"></a>QL Types Through JPublisher</h4>
<p>JDBC does not support PL/SQL-specific types, such as the <code>BOOLEAN</code> type and PL/SQL <code>RECORD</code> types that are used in stored procedures or functions. JPublisher provides the following workarounds for PL/SQL types:</p>
<ul>
<li>
<p>JPublisher has a type map that you can use to specify the mapping for a PL/SQL type unsupported by JDBC.</p>
</li>
</ul>
<ul>
<li>
<p>For PL/SQL <code>RECORD</code> types or indexed-by tables types, you have the choice of JPublisher automatically creating a SQL object type or SQL collection type, respectively, as an intermediate step in the mapping.</p>
</li>
</ul>
<p>With either workaround, JPublisher creates PL/SQL conversion functions or uses predefined conversion functions that are typically found in the <code>SYS.SQLJUTL</code> package to convert between a PL/SQL type and a corresponding SQL type. The conversion functions can be used in generated Java code that calls a stored procedure directly, or JPublisher can create a wrapper function around the PL/SQL stored procedure, where the generated Java code calls the wrapper function, which calls the conversion functions. Either way, only SQL types are exposed to JDBC.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1011295">&#34;JPublisher User Type Map and Default Type Map&#34;</a> and <a href="datamap.htm#i1005880">&#34;Support for PL/SQL Data Types&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1008144"></a>
<div id="JJPUB24049" class="sect2">
<h3 class="sect2">JPublisher Ma<a id="sthref46"></a>pping Categories</h3>
<p>JPublisher offers different categories of data type mappings from SQL to Java. Each type mapping option has at least two possible values: <code>jdbc</code> or <code>oracle</code>. The <code>-numbertypes</code> option has two additional alternatives: <code>objectjdbc</code> and <code>bigdecimal</code>. The following sections describe these mappings categories.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#g1018224">Chapter 3, &#34;Data Type and Java-to-Java Type Mappings&#34;</a></div>
<div id="JJPUB24050" class="sect3"><a id="sthref47"></a>
<h4 class="sect3">JDBC Ma<a id="sthref48"></a><a id="sthref49"></a>pping</h4>
<p>In JDBC mapping:</p>
<ul>
<li>
<p>Most numeric data types are mapped to Java primitive types, such as <code>int</code> and <code>float</code>.</p>
</li>
<li>
<p>The <code>DECIMAL</code> and <code>NUMBER</code> type are mapped to the <code>java.math.BigDecimal</code>.</p>
</li>
<li>
<p>Large object (LOB) type and other non-numeric built-in types are mapped to the standard JDBC types, such as <code>java.sql.Blob</code> and <code>java.sql.Timestamp</code>.</p>
</li>
</ul>
<p>For object types, JPublisher generates <code>SQLData</code> classes. Because predefined data types that are Oracle extensions, such as <code>BFILE</code> and <code>ROWID</code>, do not have JDBC mappings, only the <code>oracle.sql.*</code> mapping is supported for these types.</p>
<p>The Java primitive types used in the JDBC mapping do not support <code>NULL</code> values and do not guard against integer overflow or floating-point loss of precision. If you are using the JDBC mapping and you attempt to call an accessor method to get an attribute of a primitive type whose value is <code>NULL</code>, then an exception is thrown. If the primitive type is <code>short</code> or <code>int</code>, then an exception is thrown if the value is too large to fit in a <code>short</code> or <code>int</code> variable.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24051" class="sect3"><a id="sthref50"></a>
<h4 class="sect3">Objec<a id="sthref51"></a><a id="sthref52"></a>t JDBC Mapping</h4>
<p>In Object JDBC mapping, most numeric data types are mapped to Java wrapper classes, such as <code>java.lang.Integer</code> and <code>java.lang.Float</code>, and <code>DECIMAL</code> and <code>NUMBER</code> are mapped to <code>java.math.BigDecimal</code>. This differs from the JDBC mapping, which does not use primitive types.</p>
<p>Object JDBC is the default mapping for numeric types. When you use the Object JDBC mapping, all your returned values are objects. If you attempt to get an attribute whose value is <code>NULL</code>, then a <code>NULL</code> object is returned. The Java wrapper classes used in the Object JDBC mapping do not guard against integer overflow or floating-point loss of precision. If you call an accessor method to get an attribute that maps to <code>java.lang.Integer</code>, then an exception is thrown if the value is too large to fit.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24052" class="sect3"><a id="sthref53"></a>
<h4 class="sect3">BigDe<a id="sthref54"></a><a id="sthref55"></a>cimal Mapping</h4>
<p>In <code>BigDecimal</code> mapping, all numeric data types are mapped to <code>java.math.BigDecimal</code>. This supports <code>NULL</code> values and large values.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24053" class="sect3"><a id="sthref56"></a>
<h4 class="sect3">Oracle Ma<a id="sthref57"></a><a id="sthref58"></a>pping</h4>
<p>In Oracle mapping, the numeric, LOB, or other built-in types are mapped to classes in the <code>oracle.sql</code> package. For example, the <code>DATE</code> type is mapped to <code>oracle.sql.DATE</code> and all numeric types are mapped to <code>oracle.sql.NUMBER</code>. For object, collection, and object reference types, JPublisher generates <code>ORAData</code> classes.</p>
<p>Because the Oracle mapping uses no primitive types, it can represent a <code>NULL</code> value as a Java <code>null</code> in all cases. Also, it can represent the largest numeric values that can be stored in the database, because it uses the <code>oracle.sql.NUMBER</code> class for all numeric types.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008224"></a>
<div id="JJPUB24054" class="sect1">
<h2 class="sect1">JPublisher Input and Output</h2>
<p>To publish database entities, JPublisher connects to the database and retrieves descriptions of SQL types, PL/SQL packages, or server-side Java classes that you specify on the command line or in an <code>INPUT</code> file. By default, JPublisher connects to the database by using the JDBC Oracle Call Interface (OCI) driver, which requires an Oracle client installation, including Oracle Net Services and required support files. If you do not have an Oracle client installation, then JPublisher can use Oracle JDBC Thin driver.</p>
<p>JPublisher generates a Java class for each SQL type or PL/SQL package that it translates and each server-side Java class that it processes. Generated classes include code required to read and write objects in the database. When you deploy the generated JPublisher classes, your JDBC driver installation includes all the necessary run-time files. If JPublisher generates wrapper methods for stored procedures, then the classes that it produces use the SQLJ run time during execution. In this case, you must also have the SQLJ run-time library <code>runtime12.jar</code>.</p>
<p>When you call a wrapper method on an instance of a class that was generated for a SQL object, the SQL value for the corresponding object is sent to the server along with any <code>IN</code> or <code>IN OUT</code> arguments. Then the method is invoked, and the new object value is returned to the client along with any <code>OUT</code> or <code>IN OUT</code> arguments. Note that this results in a database round trip. If the method call only performs a simple state change on the object, then there will be better performance if you write and use equivalent Java that affects the state change locally.</p>
<p>The number of classes that JPublisher produces depends on whether you request <code>ORAData</code> classes or <code>SQLData</code> classes.</p>
<p>To publish external Web services for access from inside a database, JPublisher accesses a specified Web Service Description Language (WSDL) document and directs the generation of appropriate client proxy classes. It then generates wrapper classes, as necessary, and PL/SQL wrappers to allow Web services call-outs from PL/SQL.</p>
<p>The following subsections provide more detail:</p>
<ul>
<li>
<p><a href="#BHCIJAAA">Input to JPublisher</a></p>
</li>
<li>
<p><a href="#BHCBJAHE">Output from JPublisher</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006047">&#34;Overview of the Publishing Process: Generation and Use of Output&#34;</a></div>
<a id="BHCIJAAA"></a>
<div id="JJPUB24055" class="sect2">
<h3 class="sect2">Inp<a id="sthref59"></a><a id="sthref60"></a><a id="sthref61"></a>ut to JPublisher</h3>
<p>You can specify input options on the command line and in a JPublisher properties file. In addition to producing Java classes for the translated entities, JPublisher writes the names of the translated objects and packages to the standard output.</p>
<p>You can use a file known as the JPublisher <code>INPUT</code> file to specify the SQL types, PL/SQL packages, or server-side Java classes that JPublisher should publish. It also controls the naming of the generated packages and classes.</p>
<p>To use a properties file to specify option settings, specify the name of the properties file on the command line by using the <code>-props</code> option. JPublisher processes a properties file as if its contents were inserted in sequence on the command line at the point of the <code>-props</code> option. For additional flexibility, properties files can also be SQL script files in which the JPublisher directives are embedded in SQL comments.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1005559">&#34;JPublisher Options&#34;</a>, <a href="optinfil.htm#i1007010">&#34;INPUT File Structure and Syntax&#34;</a>, and <a href="optinfil.htm#i1006954">&#34;Properties File Structure and Syntax&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BHCBJAHE"></a>
<div id="JJPUB24056" class="sect2">
<h3 class="sect2">Output fro<a id="sthref62"></a><a id="sthref63"></a>m JPublisher</h3>
<p>This section describes JPublisher output for user-defined object types, user-defined collection types, <code>OPAQUE</code> types, PL/SQL packages, server-side Java classes, SQL queries or DML statements, and AQs and streams.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware that when JPublisher publishes a database entity, such as a SQL type or PL/SQL package, it also generates classes for any types that are referenced by the entity. For example, if a stored procedure in a PL/SQL package that is being published uses a SQL object type as an argument, then a class will be generated to map to that SQL object type.</div>
<div id="JJPUB24057" class="sect3"><a id="sthref64"></a>
<h4 class="sect3">Java Output for User-Defined Object Types</h4>
<p>For a user-defined object type, when you run JPublisher and request <code>ORAData</code> classes, JPublisher creates the following:</p>
<ul>
<li>
<p>An object class that represents instances of Oracle object type in your Java program</p>
<p>For each object type, JPublisher generates a <code><span class="codeinlineitalic">type</span></code><code>.java</code> file for the class code. For example, JPublisher generates <code>Employee.java</code> for Oracle object type <code>EMPLOYEE</code>.</p>
</li>
<li>
<p>A stub subclass (optional)</p>
<p>It is named as specified in your JPublisher settings. You can modify the generated stub subclass for custom functionality.</p>
</li>
<li>
<p>An interface for the generated class or subclass to implement (optional)</p>
</li>
<li>
<p>A related reference class for object references</p>
<p>JPublisher generates a <code><span class="codeinlineitalic">type</span></code><code>Ref.java</code> file for the <code>REF</code> class associated with the object type. For example, JPublisher generates the <code>EmployeeRef.java</code> file for references of Oracle object type <code>EMPLOYEE</code>.</p>
</li>
<li>
<p>Java classes for any object or collection or <code>OPAQUE</code> attributes nested directly or indirectly within the top-level object</p>
<p>This is necessary so that attributes can be materialized in Java whenever an instance of the top-level class is materialized. If an attribute type, such as a SQL <code>OPAQUE</code> type or a PL/SQL type, has been premapped, then JPublisher uses the target Java type from the map.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
For <code>ORAData</code> implementations, a strongly typed reference class is always generated, regardless of whether the SQL object type uses references.</div>
<p>If you request <code>SQLData</code> classes, then JPublisher does not generate the object reference class and classes for nested collection attributes or <code>OPAQUE</code> attributes.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24058" class="sect3"><a id="sthref65"></a>
<h4 class="sect3">Java Output for User-Defined Collection Types</h4>
<p>When you run JPublisher for a user-defined collection type, you must request <code>ORAData</code> classes. JPublisher creates the following:</p>
<ul>
<li>
<p>A collection class to act as a type definition that corresponds to Oracle collection type</p>
<p>For each <a id="sthref66"></a>collection type JPublisher translates, it generates a <code><span class="codeinlineitalic">type</span></code><code>.java</code> file. For <a id="sthref67"></a>nested tables, the generated class has methods to get and set the nested table as an entire array and to get and set individual elements of the table. JPublisher translates collection types when generating <code>ORAData</code> classes, but not when generating <code>SQLData</code> classes.</p>
</li>
<li>
<p>If the elements of the collection are objects, then a Java class for the element type and Java classes for any object or collection attributes nested directly or indirectly within the element type</p>
<p>This is necessary so that object elements can be materialized in Java whenever an instance of the collection is materialized.</p>
</li>
<li>
<p>An interface that is implemented by the generated type (optional)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Unlike for object types, you do not have the option of generating user subclasses for collection types.</div>
</div>
<!-- class="sect3" -->
<div id="JJPUB24059" class="sect3"><a id="sthref68"></a>
<h4 class="sect3">Java Output for OPAQUE Types</h4>
<p>When you run JPublisher for an <code>OPAQUE</code> type, you must request <code>ORAData</code> classes. JPublisher creates a Java class that acts as a wrapper for the <code>OPAQUE</code> type, providing Java versions of the <code>OPAQUE</code> type methods as well as protected APIs to access the representation of the <code>OPAQUE</code> type in a subclass.</p>
<p>However, in most cases, Java wrapper classes for the SQL <code>OPAQUE</code> types are furnished by the provider of the <code>OPAQUE</code> types. For example, the <code>oracle.xdb.XMLType</code> class for the <code>SYS.XMLTYPE</code> SQL <code>OPAQUE</code> type. In such cases, ensure that the correspondence between the SQL type and the Java type is predefined to JPublisher through the type map.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24060" class="sect3"><a id="sthref69"></a>
<h4 class="sect3">Java Output for PL/SQL Packages</h4>
<p>When you run JPublisher for a PL/SQL package, it creates a Java class with wrapper methods that invoke the stored procedures of the package on the server. <code>IN</code> arguments for the methods are transmitted from the client to the server, and <code>OUT</code> arguments and results are returned from the server to the client.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24061" class="sect3"><a id="sthref70"></a>
<h4 class="sect3">Java Output for Server-Side Java Classes and Web Services Call-Outs</h4>
<p>When you run JPublisher for a server-side Java class used for general purposes, it creates the source code, <code><span class="codeinlineitalic">type</span></code><code>.java</code>, for a client-side stub class that mirrors the server class. When you call the client-side methods, the corresponding server-side methods are called transparently.</p>
<p>For Web services call-outs, JPublisher typically generates wrapper classes for the server-side client proxy classes. These wrapper classes act as bridges to the corresponding PL/SQL wrappers. This is necessary to publish any proxy class instance method as a static method, because PL/SQL does not support instance methods.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24062" class="sect3"><a id="sthref71"></a>
<h4 class="sect3">Java Output for SQL Queries or DML Statements</h4>
<p>When you run JPublisher for a SQL query or DML statement, it creates the following:</p>
<ul>
<li>
<p>A Java class that implements the method that runs the SQL statement</p>
</li>
<li>
<p>A Java stub subclass, named as specified in your JPublisher settings (optional)</p>
<p>You can modify this stub subclass for custom functionality.</p>
</li>
<li>
<p>A Java interface for the generated class or subclass to implement (optional)</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="JJPUB24063" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref72"></a>
<h4 class="sect3">J<a id="sthref73"></a>ava Output for AQs and Streams</h4>
<p>When you run JPublisher for an AQ or a topic, it creates the following:</p>
<ul>
<li>
<p>A Java class for the queue or topic</p>
</li>
<li>
<p>A Java class for the payload type of the queue or topic</p>
</li>
</ul>
<p>In the case of a stream, JPublisher generates a Java class for the stream. The payload is always <code>SYS.ANYDATA</code>, which is mapped to <code>java.lang.Object</code>.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24064" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref74"></a>
<h4 class="sect3">PL/SQL Output</h4>
<p>Depending on your usage, JPublisher may generate a PL/SQL package and associated PL/SQL scripts.</p>
<p class="subhead2"><a id="JJPUB24065"></a>PL/SQL Package</p>
<p>JPublisher typically generates a PL/SQL package with PL/SQL code for any of the following:</p>
<ul>
<li>
<p>PL/SQL call specifications for generated Java methods</p>
</li>
<li>
<p>PL/SQL conversion functions and wrapper functions to support PL/SQL types</p>
</li>
<li>
<p>PL/SQL table functions</p>
</li>
</ul>
<p>Conversion functions, and optionally wrapper functions, are employed to map PL/SQL types used in the calling sequences of any stored procedures that JPublisher translates. The functions convert between PL/SQL types and corresponding SQL types, given that JDBC does not generally support PL/SQL types.</p>
<p class="subhead2"><a id="JJPUB24066"></a>PL/SQL Scripts</p>
<p>JPublisher generates the following PL/SQL scripts:</p>
<ul>
<li>
<p>A wrapper script to create the PL/SQL package and any necessary SQL types</p>
</li>
<li>
<p>A script to grant permission to run the wrapper script</p>
</li>
<li>
<p>A script to revoke permission to run the wrapper script</p>
</li>
<li>
<p>A script to drop the package and types created by the wrapper script</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006024"></a>
<div id="JJPUB24067" class="sect1">
<h2 class="sect1">JPublisher Operation</h2>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1006047">Overview of the Publishing Process: Generation and Use of Output</a></p>
</li>
<li>
<p><a href="#i1006097">JPublisher Command-Line Syntax</a></p>
</li>
<li>
<p><a href="#i1006123">Sample JPublisher Translation</a></p>
</li>
</ul>
<a id="i1006047"></a>
<div id="JJPUB24068" class="sect2">
<h3 class="sect2">Overview of the Publishing Process: Generation and Use of Output</h3>
<p><a href="#i1006060">Figure 1-7</a> illustrates the basic steps for publishing specified SQL types, PL/SQL packages, or server-side Java classes. The steps are as follows:</p>
<ol>
<li>
<p>Run JPublisher with input from the command line, properties file, and <code>INPUT</code> file, as desired.</p>
</li>
<li>
<p>JPublisher accesses the database to which it is attached to obtain definitions of SQL or PL/SQL entities that you specify for publishing.</p>
</li>
<li>
<p>JPublisher generates <code>.java</code> or <code>.sqlj</code> source files, as appropriate, depending on whether wrapper methods are created for stored procedures.</p>
</li>
<li>
<p>By default, JPublisher invokes the SQLJ translator, which is provided as part of JPublisher, to translate <code>.sqlj</code> files into <code>.java</code> files.</p>
</li>
<li>
<p>For SQLJ classes, by default, the SQLJ translator invokes the Java compiler to compile<code>.java</code> files into<code>.class</code> files. For non-SQLJ classes, JPublisher invokes the Java compiler.</p>
</li>
<li>
<p>JPublisher generates PL/SQL wrappers and scripts, as appropriate, in addition to the <code>.class</code> files. There is a script to create the PL/SQL wrapper package and any necessary SQL types, such as types to map to PL/SQL types, a script to drop these entities, and scripts to grant or revoke required privileges.</p>
</li>
<li>
<p>In the case of proxy class generation through the <code>-proxywsdl</code> or <code>-proxyclasses</code> option, JPublisher can load generated PL/SQL wrappers and scripts into the database to which it is connected for execution in the database PL/SQL engine.</p>
</li>
<li>
<p>By default, JPublisher loads generated Java classes for Web services call-outs into the database to which it is connected, for execution in Oracle JVM. JPublisher-generated classes other than those for Web services call-outs typically execute in a client or middle-tier JVM. You may also have your own classes, such as subclasses of JPublisher-generated classes, that would typically execute in a client or middle-tier JVM.</p>
</li>
</ol>
<div id="JJPUB24069" class="figure">
<p class="titleinfigure"><a id="i1006060"></a>Figure 1-7 Translating and Using JPublisher-Generated Code</p>
<img width="376" height="381" src="img/jpub01094.gif" alt="Description of Figure 1-7 follows"/><br/>
<a id="sthref75" href="img_text/jpub01094.htm">Description of &#34;Figure 1-7 Translating and Using JPublisher-Generated Code&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="i1006097"></a>
<div id="JJPUB24070" class="sect2">
<h3 class="sect2">JPublisher C<a id="sthref76"></a><a id="sthref77"></a><a id="sthref78"></a>ommand-Line Syntax</h3>
<p>On most operating systems, you can start JPublisher from the command line by typing <code>jpub</code> followed by a series of option settings, as follows:</p>
<pre>% jpub -<span class="italic">option1</span>=<span class="italic">value1</span> -<span class="italic">option2</span>=<span class="italic">value2</span> ...
</pre>
<p>JPublisher responds by connecting to the database and obtaining the declarations of the types or packages you specify. It then generates one or more custom Java classes and writes the names of the translated object types or PL/SQL packages to the standard output.</p>
<p>Here is an example of a single wraparound command that invokes JPublisher:</p>
<pre>% jpub -user=hr -input=demoin -numbertypes=oracle -usertypes=oracle -dir=demo -d=demo -package=corp
Enter hr password: <span class="italic">password</span>
</pre>
<p>Enter the command on the command line, allowing it to wrap as necessary. This command directs JPublisher to connect to the database with the user name <code>hr</code> and password <code>hr</code> and to translate data types to Java classes, based on instructions in the <code>INPUT</code> file <code>demoin</code>. The <code>-numbertypes=oracle</code> option directs JPublisher to map object attribute types to Java classes supplied by Oracle, and the <code>-usertypes=oracle</code> option directs JPublisher to generate Oracle-specific <code>ORAData</code> classes. JPublisher places the classes that it generates in the <code>corp</code> package under the <code>demo</code> directory.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This chapter refers to the input file specified by the <code>-input</code> option as the <code>INPUT</code> file to distinguish from any other kinds of input files.</div>
<p>JPublisher also supports specification of <code>.java</code> files, or <code>.sqlj</code> files, if you are using SQLJ source files directly, on the JPublisher command line. In addition to any JPublisher-generated files, the specified files are translated and compiled. For example:</p>
<pre>% jpub ...<span class="italic">options</span>... Myclass.java
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>No spaces are permitted around the equal sign (<code>=</code>) on the JPublisher command line.</p>
</li>
<li>
<p>If you run JPublisher without any command-line input, then it displays an option list and then terminates.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1006123"></a>
<div id="JJPUB24071" class="sect2">
<h3 class="sect2">Sample JP<a id="sthref79"></a>ublisher Translation</h3>
<p>This section provides a sample JPublisher translation of a user-defined object type. At this point, do not worry about the details of the code JPublisher generates. You can find more information about JPublisher input and output files, options, data type mappings, and translation later in this manual.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
For more examples, go to <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sqlj/demo/jpub</code> in your Oracle Database installation.</div>
<p>Create the object type <code>EMPLOYEE</code>:</p>
<pre>CREATE TYPE employee AS OBJECT
(
    name       VARCHAR2(30),
    empno      INTEGER,
    deptno     NUMBER,
    hiredate   DATE,
    salary     REAL
);
</pre>
<p>The <code>INTEGER</code>, <code>NUMBER</code>, and <code>REAL</code> types are all stored in the database as <code>NUMBER</code> types, but after translation they have different representations in the Java program, based on your setting of the <code>-numbertypes</code> option.</p>
<p>Assume JPublisher translates the types according to the following command entered on the command line:</p>
<pre>% jpub -user=hr -dir=demo -numbertypes=objectjdbc -builtintypes=jdbc -package=corp -case=mixed -sql=Employee
Enter hr password: <span class="italic">password</span>
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1005559">&#34;JPublisher Options&#34;</a></div>
<p>Note that JPublisher generates a non-SQLJ class, because the <code>EMPLOYEE</code> object type does not define any methods.</p>
<p>Because -<code>dir=demo</code> and <code>-package=corp</code> are specified on the JPublisher command line, the translated class <code>Employee</code> is written to <code>Employee.java</code> at the following location:</p>
<pre>./demo/corp/Employee.java
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This location is specific for a UNIX system.</div>
<p>The <code>Employee.java</code> class file would contain the code shown in the following example.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The details of the code JPublisher generates are subject to change. In particular, non-public methods, non-public fields, and all method bodies may be generated differently.</div>
<pre>package corp;

import java.sql.SQLException;
import java.sql.Connection;
import oracle.jdbc.OracleTypes;
import oracle.sql.ORAData;
import oracle.sql.ORADataFactory;
import oracle.sql.Datum;
import oracle.sql.STRUCT;
import oracle.jpub.runtime.MutableStruct;

public class Employee implements ORAData, ORADataFactory
{
  public static final String _SQL_NAME = &#34;HR.EMPLOYEE&#34;;
  public static final int _SQL_TYPECODE = OracleTypes.STRUCT;

  protected MutableStruct _struct;

  private static int[] _sqlType =  { 12,4,2,91,7 };
  private static ORADataFactory[] _factory = new ORADataFactory[5];
  protected static final Employee _EmployeeFactory = new Employee(false);

  public static ORADataFactory getORADataFactory()
  { return _EmployeeFactory; }

  /* constructor */
  protected Employee(boolean init)
  { if(init) _struct = new MutableStruct(new Object[5], _sqlType, _factory); }
  public Employee()
  { this(true); }
  public Employee(String name, Integer empno, java.math.BigDecimal deptno,
                  java.sql.Timestamp hiredate, Float salary) 
   throws SQLException
  { this(true);
    setName(name);
    setEmpno(empno);
    setDeptno(deptno);
    setHiredate(hiredate);
    setSalary(salary);
  }

  /* ORAData interface */
  public Datum toDatum(Connection c) throws SQLException
  {
    return _struct.toDatum(c, _SQL_NAME);
  }

  /* ORADataFactory interface */
  public ORAData create(Datum d, int sqlType) throws SQLException
  { return create(null, d, sqlType); }
  protected ORAData create(Employee o, Datum d, int sqlType) throws SQLException
  {
    if (d == null) return null; 
    if (o == null) o = new Employee(false);
    o._struct = new MutableStruct((STRUCT) d, _sqlType, _factory);
    return o;
  }
  /* accessor methods */
  public String getName() throws SQLException
  { return (String) _struct.getAttribute(0); }

  public void setName(String name) throws SQLException
  { _struct.setAttribute(0, name); }

  public Integer getEmpno() throws SQLException
  { return (Integer) _struct.getAttribute(1); }

  public void setEmpno(Integer empno) throws SQLException
  { _struct.setAttribute(1, empno); }

  public java.math.BigDecimal getDeptno() throws SQLException
  { return (java.math.BigDecimal) _struct.getAttribute(2); }

  public void setDeptno(java.math.BigDecimal deptno) throws SQLException
  { _struct.setAttribute(2, deptno); }

  public java.sql.Timestamp getHiredate() throws SQLException
  { return (java.sql.Timestamp) _struct.getAttribute(3); }

  public void setHiredate(java.sql.Timestamp hiredate) throws SQLException
  { _struct.setAttribute(3, hiredate); }

  public Float getSalary() throws SQLException
  { return (Float) _struct.getAttribute(4); }

  public void setSalary(Float salary) throws SQLException
  { _struct.setAttribute(4, salary); }

}
</pre>
<p><a id="JJPUB24072"></a><span class="subhead3">Code Generation Notes&nbsp;</span></p>
<ul>
<li>
<p>JPublisher also generates object constructors based on the object attributes.</p>
</li>
<li>
<p>Additional private or public methods may be generated with other option settings. For example, the <code>-serializable=true</code> setting results in the object wrapper class implementing the interface <code>java.io.Serializable</code> and in the generation of private <code>writeObject()</code> and <code>readObject()</code> methods. In addition, the <code>-tostring=true</code> setting results in the generation of a public <code>toString()</code> method.</p>
</li>
<li>
<p>There is a protected <code>_struct</code> field in JPublisher-generated code for SQL object types. This is an instance of the <code>oracle.jpub.runtime.MutableStruct</code> internal class. It contains the data in original SQL format. In general, you should never reference this field directly. Instead, use the <code>-methods=always</code> or <code>-methods=named</code> setting, as necessary, to ensure that JPublisher produces <code>setFrom()</code> and <code>setValueFrom()</code> methods, and then use these methods when extending a class.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="genclint.htm#i1006769">&#34;The setFrom(), setValueFrom(), and setContextFrom() Methods&#34;</a></div>
</li>
<li>
<p>JPublisher generates SQLJ classes instead of non-SQLJ classes in the following circumstances:</p>
<ul>
<li>
<p>The SQL object being published has methods, and the <code>-methods=false</code> setting is not specified.</p>
</li>
<li>
<p>A PL/SQL package, stored procedure, query, or DML statement is published, and the <code>-methods=false</code> setting is not specified.</p>
</li>
</ul>
<p>In addition:</p>
<ul>
<li>
<p>If a SQLJ class is created for a type definition, then a SQLJ class is also created for the corresponding REF definition.</p>
</li>
<li>
<p>If a SQLJ class is created for a base class, then SQLJ classes are also created for any subclasses.</p>
</li>
</ul>
<p>This means that, in a backward-compatibility mode, JPublisher generates <code>.sqlj</code> files instead of <code>.java</code> files.</p>
</li>
</ul>
<p>JPublisher also generates an <code>EmployeeRef.java</code> class. The source code is as follows:</p>
<pre>package corp;

import java.sql.SQLException;
import java.sql.Connection;
import oracle.jdbc.OracleTypes;
import oracle.sql.ORAData;
import oracle.sql.ORADataFactory;
import oracle.sql.Datum;
import oracle.sql.REF;
import oracle.sql.STRUCT;

public class EmployeeRef implements ORAData, ORADataFactory
{
  public static final String _SQL_BASETYPE = &#34;HR.EMPLOYEE&#34;;
  public static final int _SQL_TYPECODE = OracleTypes.REF;

  REF _ref;

private static final EmployeeRef _EmployeeRefFactory = new EmployeeRef();

  public static ORADataFactory getORADataFactory()
  { return _EmployeeRefFactory; }
  /* constructor */
  public EmployeeRef()
  {
  }

  /* ORAData interface */
  public Datum toDatum(Connection c) throws SQLException
  {
    return _ref;
  }

  /* ORADataFactory interface */
  public ORAData create(Datum d, int sqlType) throws SQLException
  {
    if (d == null) return null;
    EmployeeRef r = new EmployeeRef();
    r._ref = (REF) d;
    return r;
  }

  public static EmployeeRef cast(ORAData o) throws SQLException
  {
     if (o == null) return null;
     try { return (EmployeeRef) getORADataFactory().create(o.toDatum(null),
           OracleTypes.REF); }
     catch (Exception exn)
     { throw new SQLException(&#34;Unable to convert &#34;+o.getClass().getName()+&#34; to
             EmployeeRef: &#34;+exn.toString()); }
  }

  public Employee getValue() throws SQLException
  {
     return (Employee) Employee.getORADataFactory().create(
       _ref.getSTRUCT(), OracleTypes.REF);
  }

  public void setValue(Employee c) throws SQLException
  {
    _ref.setValue((STRUCT) c.toDatum(_ref.getJavaSqlConnection()));
  }
}
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
JPublisher also generates a public static <code>cast()</code> method to cast from other strongly typed references into a strongly typed reference instance.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5684">
<tr>
<td class="cellalignment5693">
<table class="cellalignment5689">
<tr>
<td class="cellalignment5688"><a href="preface.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5688"><a href="usejpub.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5696">
<table class="cellalignment5687">
<tr>
<td class="cellalignment5688"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5688"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5688"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5688"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5688"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5688"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>