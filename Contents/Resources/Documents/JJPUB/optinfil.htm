<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71109"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Command-Line%20Options%20and%20Input%20Files"></a><title>Command-Line Options and Input Files</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-07T6:1:46Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JPublisher User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49873-02"/>
<meta name="dcterms.isVersionOf" content="JJPUB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="genclint.htm" title="Previous" type="text/html"/>
<link rel="Next" href="codeex.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49873-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/14</span> <!-- End Header -->
<div id="JJPUB24171" class="chapter"><a id="g1044306"></a> <a id="i1012635"></a>
<h1 class="chapter"><span class="secnum">6</span> Command-Line Options and Input Files</h1>
<p>This chapter describes the usage and syntax details of JPublisher option settings and input files to specify program behavior. It is organized into the following sections:</p>
<ul>
<li>
<p><a href="#i1005559">JPublisher Options</a></p>
</li>
<li>
<p><a href="#i1006938">JPublisher Input Files</a></p>
</li>
</ul>
<a id="i1005559"></a>
<div id="JJPUB24172" class="sect1">
<h2 class="sect1">JPublish<a id="sthref199"></a>er Options</h2>
<p>The following sections list and discuss JPublisher command-line options:</p>
<ul>
<li>
<p><a href="#i1010444">JPublisher Option Summary</a></p>
</li>
<li>
<p><a href="#i1005844">JPublisher Option Tips</a></p>
</li>
<li>
<p><a href="#i1005872">Notational Conventions</a></p>
</li>
<li>
<p><a href="#i1010406">Options for Input Files and Items to Publish</a></p>
</li>
<li>
<p><a href="#i1010409">Connection Options</a></p>
</li>
<li>
<p><a href="#CIHCAADI">Options for Data Type Mappings</a></p>
</li>
<li>
<p><a href="#CIHIFGIB">Type Map Options</a></p>
</li>
<li>
<p><a href="#i1010523">Java Code-Generation Options</a></p>
</li>
<li>
<p><a href="#CIHFGBHH">PL/SQL Code Generation Options</a></p>
</li>
<li>
<p><a href="#i1010527">Input/Output Options</a></p>
</li>
<li>
<p><a href="#i1011069">Options to Facilitate Web Services Call-Outs</a></p>
</li>
<li>
<p><a href="#CIHFCJHC">Option to Access SQLJ Functionality</a></p>
</li>
<li>
<p><a href="#i1010532">Backward Compatibility Option</a></p>
</li>
<li>
<p><a href="#CIHBFGJG">Java Environment Options</a></p>
</li>
<li>
<p><a href="#CIHFJBGI">SQLJ Migration Options</a></p>
</li>
</ul>
<a id="i1010444"></a>
<div id="JJPUB24173" class="sect2">
<h3 class="sect2">JPublisher Option Summary</h3>
<p><a href="#CIHEAFJD">Table 6-1</a> summarizes JPublisher options. For default values, the abbreviation, NA, means not applicable. The Category column refers to the corresponding conceptual area, indicating the section of this chapter where the option is discussed.</p>
<div id="JJPUB24174" class="tblformalwide">
<p class="titleintable"><a id="sthref200"></a><a id="CIHEAFJD"></a>Table 6-1 Summary of JPublisher Options</p>
<table class="cellalignment5691" title="Summary of JPublisher Options " summary="Summary of JPublisher options, including a brief description and the default value (if any)." dir="ltr">
<thead>
<tr class="cellalignment5685">
<th class="cellalignment5692" id="r1c1-t2">Option Name</th>
<th class="cellalignment5692" id="r1c2-t2">Description</th>
<th class="cellalignment5692" id="r1c3-t2">Default Value</th>
<th class="cellalignment5692" id="r1c4-t2">Category</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r2c1-t2" headers="r1c1-t2">
<p><code>-access</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t2 r1c2-t2">
<p>Determines the access modifiers that JPublisher includes in generated method definitions.</p>
</td>
<td class="cellalignment5693" headers="r2c1-t2 r1c3-t2">
<p><code>public</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r3c1-t2" headers="r1c1-t2">
<p><code>-adddefaulttypemap</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t2 r1c2-t2">
<p>Appends an entry to the JPublisher default type map.</p>
</td>
<td class="cellalignment5693" headers="r3c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r3c1-t2 r1c4-t2">
<p>Type maps</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r4c1-t2" headers="r1c1-t2">
<p><code>-addtypemap</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t2 r1c2-t2">
<p>Appends an entry to the JPublisher user type map.</p>
</td>
<td class="cellalignment5693" headers="r4c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r4c1-t2 r1c4-t2">
<p>Type maps</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r5c1-t2" headers="r1c1-t2">
<p><code>-builtintypes</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t2 r1c2-t2">
<p>Specifies the data type mappings, <code>jdbc</code> or <code>oracle</code>, for built-in data types that are not numeric or large object (LOB).</p>
</td>
<td class="cellalignment5693" headers="r5c1-t2 r1c3-t2">
<p><code>jdbc</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t2 r1c4-t2">
<p>Data type mappings</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r6c1-t2" headers="r1c1-t2">
<p><code>-case</code></p>
</td>
<td class="cellalignment5693" headers="r6c1-t2 r1c2-t2">
<p>Specifies the case of Java identifiers that JPublisher generates.</p>
</td>
<td class="cellalignment5693" headers="r6c1-t2 r1c3-t2">
<p><code>mixed</code></p>
</td>
<td class="cellalignment5693" headers="r6c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r7c1-t2" headers="r1c1-t2">
<p><code>-classpath</code></p>
</td>
<td class="cellalignment5693" headers="r7c1-t2 r1c2-t2">
<p>Adds to the Java classpath for JPublisher to resolve Java source and classes during translation and compilation.</p>
</td>
<td class="cellalignment5693" headers="r7c1-t2 r1c3-t2">
<p>Empty</p>
</td>
<td class="cellalignment5693" headers="r7c1-t2 r1c4-t2">
<p>Java environment</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r8c1-t2" headers="r1c1-t2">
<p><code>-compatible</code></p>
</td>
<td class="cellalignment5693" headers="r8c1-t2 r1c2-t2">
<p>Specifies a compatibility mode and modifies the behavior of <code>-usertypes=oracle</code>.</p>
<p><span class="bold">See Also:</span> <a href="adfeacon.htm#CHDEFFJJ">&#34;JPublisher Backward-Compatibility Modes and Settings&#34;</a></p>
</td>
<td class="cellalignment5693" headers="r8c1-t2 r1c3-t2">
<p><code>oradata</code></p>
</td>
<td class="cellalignment5693" headers="r8c1-t2 r1c4-t2">
<p>Backward compatibility</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r9c1-t2" headers="r1c1-t2">
<p><code>-compile</code></p>
</td>
<td class="cellalignment5693" headers="r9c1-t2 r1c2-t2">
<p>Determines whether to proceed with Java compilation or suppress it. This option also affects SQLJ translation for backward-compatibility modes.</p>
</td>
<td class="cellalignment5693" headers="r9c1-t2 r1c3-t2">
<p><code>true</code></p>
</td>
<td class="cellalignment5693" headers="r9c1-t2 r1c4-t2">
<p>Input/output</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r10c1-t2" headers="r1c1-t2">
<p><code>-compiler-executable</code></p>
</td>
<td class="cellalignment5693" headers="r10c1-t2 r1c2-t2">
<p>Specifies a Java compiler version, in case you want a version other than the default.</p>
</td>
<td class="cellalignment5693" headers="r10c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r10c1-t2 r1c4-t2">
<p>Java environment</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r11c1-t2" headers="r1c1-t2">
<p><code>-context</code></p>
</td>
<td class="cellalignment5693" headers="r11c1-t2 r1c2-t2">
<p>Specifies the class that JPublisher uses for SQLJ connection contexts. This can be the <code>DefaultContext</code> class, a user-specified class, or a JPublisher-generated inner class.</p>
</td>
<td class="cellalignment5693" headers="r11c1-t2 r1c3-t2">
<p><code>DefaultContext</code></p>
</td>
<td class="cellalignment5693" headers="r11c1-t2 r1c4-t2">
<p>Connection</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r12c1-t2" headers="r1c1-t2">
<p><code>-defaulttypemap</code></p>
</td>
<td class="cellalignment5693" headers="r12c1-t2 r1c2-t2">
<p>Sets the default type map that JPublisher uses.</p>
</td>
<td class="cellalignment5693" headers="r12c1-t2 r1c3-t2">
<p>Refer to <a href="datamap.htm#i1011295">&#34;JPublisher User Type Map and Default Type Map&#34;</a>.</p>
</td>
<td class="cellalignment5693" headers="r12c1-t2 r1c4-t2">
<p>Type maps</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r13c1-t2" headers="r1c1-t2">
<p><code>-d</code></p>
</td>
<td class="cellalignment5693" headers="r13c1-t2 r1c2-t2">
<p>Specifies the root directory for placement of compiled class files.</p>
</td>
<td class="cellalignment5693" headers="r13c1-t2 r1c3-t2">
<p>Empty (all files directly present in the current directory)</p>
</td>
<td class="cellalignment5693" headers="r13c1-t2 r1c4-t2">
<p>Input/output</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r14c1-t2" headers="r1c1-t2">
<p><code>-dir</code></p>
</td>
<td class="cellalignment5693" headers="r14c1-t2 r1c2-t2">
<p>Specifies the root directory for placement of generated source files.</p>
</td>
<td class="cellalignment5693" headers="r14c1-t2 r1c3-t2">
<p>Empty (all files directly present in the current directory)</p>
</td>
<td class="cellalignment5693" headers="r14c1-t2 r1c4-t2">
<p>Input/output</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r15c1-t2" headers="r1c1-t2">
<p><code>-driver</code></p>
</td>
<td class="cellalignment5693" headers="r15c1-t2 r1c2-t2">
<p>Specifies the driver class that JPublisher uses for Java Database Connectivity (JDBC) connections to the database.</p>
</td>
<td class="cellalignment5693" headers="r15c1-t2 r1c3-t2">
<p><code>oracle.jdbc.<br/>
OracleDriver</code></p>
</td>
<td class="cellalignment5693" headers="r15c1-t2 r1c4-t2">
<p>Connection</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r16c1-t2" headers="r1c1-t2">
<p><code>-encoding</code></p>
</td>
<td class="cellalignment5693" headers="r16c1-t2 r1c2-t2">
<p>Specifies the Java encoding of JPublisher input and output files.</p>
</td>
<td class="cellalignment5693" headers="r16c1-t2 r1c3-t2">
<p>The value of the system property <code>file.encoding</code></p>
</td>
<td class="cellalignment5693" headers="r16c1-t2 r1c4-t2">
<p>Input/output</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r17c1-t2" headers="r1c1-t2">
<p><code>-endpoint</code></p>
</td>
<td class="cellalignment5693" headers="r17c1-t2 r1c2-t2">
<p>Specifies a Web service endpoint. This option is used in conjunction with the <code>-proxywsdl</code> option.</p>
</td>
<td class="cellalignment5693" headers="r17c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r17c1-t2 r1c4-t2">
<p>Web services</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r18c1-t2" headers="r1c1-t2">
<p><code>-filtermodes</code></p>
</td>
<td class="cellalignment5693" headers="r18c1-t2 r1c2-t2">
<p>Filters code generation according to specified parameter modes.</p>
</td>
<td class="cellalignment5693" headers="r18c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r18c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r19c1-t2" headers="r1c1-t2">
<p><code>-filtertypes</code></p>
</td>
<td class="cellalignment5693" headers="r19c1-t2 r1c2-t2">
<p>Filters code generation according to specified parameter types.</p>
</td>
<td class="cellalignment5693" headers="r19c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r19c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r20c1-t2" headers="r1c1-t2">
<p><code>-generatebean</code></p>
</td>
<td class="cellalignment5693" headers="r20c1-t2 r1c2-t2">
<p>Ensures that generated code conforms to the JavaBeans specification.</p>
</td>
<td class="cellalignment5693" headers="r20c1-t2 r1c3-t2">
<p><code>false</code></p>
</td>
<td class="cellalignment5693" headers="r20c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r21c1-t2" headers="r1c1-t2">
<p><code>-genpattern</code></p>
</td>
<td class="cellalignment5693" headers="r21c1-t2 r1c2-t2">
<p>Defines naming patterns for generated code.</p>
</td>
<td class="cellalignment5693" headers="r21c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r21c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r22c1-t2" headers="r1c1-t2">
<p><code>-gensubclass</code></p>
</td>
<td class="cellalignment5693" headers="r22c1-t2 r1c2-t2">
<p>Specifies whether and how to generate stub code for user subclasses.</p>
</td>
<td class="cellalignment5693" headers="r22c1-t2 r1c3-t2">
<p><code>true</code></p>
</td>
<td class="cellalignment5693" headers="r22c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r23c1-t2" headers="r1c1-t2">
<p><code>-httpproxy</code></p>
</td>
<td class="cellalignment5693" headers="r23c1-t2 r1c2-t2">
<p>Specifies a proxy URL to resolve the URL of a Web Services Description Language (WSDL) document for access through a firewall. This option is used in conjunction with the <code>-proxywsdl</code> option.</p>
</td>
<td class="cellalignment5693" headers="r23c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r23c1-t2 r1c4-t2">
<p>Web services</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r24c1-t2" headers="r1c1-t2">
<p><code>-input</code> or <code>-i</code></p>
</td>
<td class="cellalignment5693" headers="r24c1-t2 r1c2-t2">
<p>Specifies a file that lists the types and packages that JPublisher translates.</p>
</td>
<td class="cellalignment5693" headers="r24c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r24c1-t2 r1c4-t2">
<p>Input files/items</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r25c1-t2" headers="r1c1-t2">
<p><code>-java</code></p>
</td>
<td class="cellalignment5693" headers="r25c1-t2 r1c2-t2">
<p>Specifies server-side Java classes for which JPublisher generates client-side classes.</p>
</td>
<td class="cellalignment5693" headers="r25c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r25c1-t2 r1c4-t2">
<p>Input files/items</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r26c1-t2" headers="r1c1-t2">
<p><code>-lobtypes</code></p>
</td>
<td class="cellalignment5693" headers="r26c1-t2 r1c2-t2">
<p>Specifies the <code>jdbc</code> or <code>oracle</code> data type mapping that JPublisher uses for <code>BLOB</code> and <code>CLOB</code> types.</p>
</td>
<td class="cellalignment5693" headers="r26c1-t2 r1c3-t2">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r26c1-t2 r1c4-t2">
<p>Data type mappings</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r27c1-t2" headers="r1c1-t2">
<p><code>-mapping</code></p>
</td>
<td class="cellalignment5693" headers="r27c1-t2 r1c2-t2">
<p>Specifies the mapping that generated methods support for object attribute types and method argument types.</p>
<p><span class="bold">Note</span>: This option is deprecated in favor of the &#34;<code><span class="codeinlineitalic">XXX</span></code><code>types</code>&#34; mapping options, but is supported for backward compatibility.</p>
</td>
<td class="cellalignment5693" headers="r27c1-t2 r1c3-t2">
<p><code>objectjdbc</code></p>
</td>
<td class="cellalignment5693" headers="r27c1-t2 r1c4-t2">
<p>Data type mappings</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r28c1-t2" headers="r1c1-t2">
<p><code>-methods</code></p>
</td>
<td class="cellalignment5693" headers="r28c1-t2 r1c2-t2">
<p>Determines whether JPublisher generates wrapper methods for stored procedures of translated SQL objects and PL/SQL packages. This option also determines whether JPublisher generates SQLJ classes or non-SQLJ classes, and whether it generates PL/SQL wrapper classes at all. There are settings to specify whether overloaded methods are allowed.</p>
</td>
<td class="cellalignment5693" headers="r28c1-t2 r1c3-t2">
<p><code>all</code></p>
</td>
<td class="cellalignment5693" headers="r28c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r29c1-t2" headers="r1c1-t2">
<p><code>-numbertypes</code></p>
</td>
<td class="cellalignment5693" headers="r29c1-t2 r1c2-t2">
<p>Specifies the data type mappings, such as <code>jdbc</code>, <code>objectjdbc</code>, <code>bigdecimal</code>, or <code>oracle</code>, that JPublisher uses for numeric data types.</p>
</td>
<td class="cellalignment5693" headers="r29c1-t2 r1c3-t2">
<p><code>objectjdbc</code></p>
</td>
<td class="cellalignment5693" headers="r29c1-t2 r1c4-t2">
<p>Data type mappings</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r30c1-t2" headers="r1c1-t2">
<p><code>-omit_schema_names</code></p>
</td>
<td class="cellalignment5693" headers="r30c1-t2 r1c2-t2">
<p>Instructs JPublisher not to include the schema in SQL type name references in generated code.</p>
</td>
<td class="cellalignment5693" headers="r30c1-t2 r1c3-t2">
<p>Disabled (schema included in type names)</p>
</td>
<td class="cellalignment5693" headers="r30c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r31c1-t2" headers="r1c1-t2">
<p><code>-outarguments</code></p>
</td>
<td class="cellalignment5693" headers="r31c1-t2 r1c2-t2">
<p>Specifies the holder type, such as arrays, Java API for XML-based Remote Procedure Call (JAX-RPC) holders, or function returns, for Java implementation of PL/SQL output parameters.</p>
</td>
<td class="cellalignment5693" headers="r31c1-t2 r1c3-t2">
<p><code>array</code></p>
</td>
<td class="cellalignment5693" headers="r31c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r32c1-t2" headers="r1c1-t2">
<p><code>-overwritedbtypes</code></p>
</td>
<td class="cellalignment5693" headers="r32c1-t2 r1c2-t2">
<p>Specifies whether to ignore naming conflicts when creating SQL types.</p>
</td>
<td class="cellalignment5693" headers="r32c1-t2 r1c3-t2">
<p><code>true</code></p>
</td>
<td class="cellalignment5693" headers="r32c1-t2 r1c4-t2">
<p>PL/SQL code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r33c1-t2" headers="r1c1-t2">
<p><code>-package</code></p>
</td>
<td class="cellalignment5693" headers="r33c1-t2 r1c2-t2">
<p>Specifies the name of the Java package into which JPublisher generates Java wrapper classes.</p>
</td>
<td class="cellalignment5693" headers="r33c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r33c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r34c1-t2" headers="r1c1-t2">
<p><code>-plsqlfile</code></p>
</td>
<td class="cellalignment5693" headers="r34c1-t2 r1c2-t2">
<p>Specifies a wrapper script to create and a dropper script to drop SQL conversion types for PL/SQL types and the PL/SQL package that JPublisher will use for generated PL/SQL code.</p>
</td>
<td class="cellalignment5693" headers="r34c1-t2 r1c3-t2">
<p><code>plsql_wrapper.sql</code>, <code>plsql_dropper.sql</code></p>
</td>
<td class="cellalignment5693" headers="r34c1-t2 r1c4-t2">
<p>PL/SQL code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r35c1-t2" headers="r1c1-t2">
<p><code>-plsqlmap</code></p>
</td>
<td class="cellalignment5693" headers="r35c1-t2 r1c2-t2">
<p>Specifies whether to generate PL/SQL wrapper functions for stored procedures that use PL/SQL types.</p>
</td>
<td class="cellalignment5693" headers="r35c1-t2 r1c3-t2">
<p><code>true</code></p>
</td>
<td class="cellalignment5693" headers="r35c1-t2 r1c4-t2">
<p>PL/SQL code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r36c1-t2" headers="r1c1-t2">
<p><code>-plsqlpackage</code></p>
</td>
<td class="cellalignment5693" headers="r36c1-t2 r1c2-t2">
<p>Specifies the PL/SQL package into which JPublisher generates PL/SQL code, such as call specifications, conversion functions, and wrapper functions.</p>
</td>
<td class="cellalignment5693" headers="r36c1-t2 r1c3-t2">
<p><code>JPUB_PLSQL_WRAPPER</code></p>
</td>
<td class="cellalignment5693" headers="r36c1-t2 r1c4-t2">
<p>PL/SQL code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r37c1-t2" headers="r1c1-t2">
<p><code>-props</code> or <code>-p</code></p>
</td>
<td class="cellalignment5693" headers="r37c1-t2 r1c2-t2">
<p>Specifies a file that contains JPublisher options in addition to those listed on the command line.</p>
</td>
<td class="cellalignment5693" headers="r37c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r37c1-t2 r1c4-t2">
<p>Input files/items</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r38c1-t2" headers="r1c1-t2">
<p><code>-proxyclasses</code></p>
</td>
<td class="cellalignment5693" headers="r38c1-t2 r1c2-t2">
<p>Specifies Java classes for which JPublisher generates wrapper classes and PL/SQL wrappers according to the <code>-proxyopts</code> setting. For Web services, you will typically use <code>-proxywsdl</code> instead, which uses <code>-proxyclasses</code> behind the scenes.</p>
</td>
<td class="cellalignment5693" headers="r38c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r38c1-t2 r1c4-t2">
<p>Web services</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r39c1-t2" headers="r1c1-t2">
<p><code>-proxyopts</code></p>
</td>
<td class="cellalignment5693" headers="r39c1-t2 r1c2-t2">
<p>Specifies required layers of Java and PL/SQL wrappers and additional related settings.</p>
<p>Is used as input for the <code>-proxywsdl</code> and <code>-proxyclasses</code> options.</p>
</td>
<td class="cellalignment5693" headers="r39c1-t2 r1c3-t2">
<p><code>jaxrpc</code></p>
</td>
<td class="cellalignment5693" headers="r39c1-t2 r1c4-t2">
<p>Web services</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r40c1-t2" headers="r1c1-t2">
<p><code>-proxywsdl</code></p>
</td>
<td class="cellalignment5693" headers="r40c1-t2 r1c2-t2">
<p>Specifies the URL of a WSDL document for which Web services client proxy classes and associated Java wrapper classes are generated along with PL/SQL wrappers.</p>
</td>
<td class="cellalignment5693" headers="r40c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r40c1-t2 r1c4-t2">
<p>Web services</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r41c1-t2" headers="r1c1-t2">
<p><code>-serializable</code></p>
</td>
<td class="cellalignment5693" headers="r41c1-t2 r1c2-t2">
<p>Specifies whether the code generated for object types implements the <code>java.io.Serializable</code> interface.</p>
</td>
<td class="cellalignment5693" headers="r41c1-t2 r1c3-t2">
<p><code>false</code></p>
</td>
<td class="cellalignment5693" headers="r41c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r42c1-t2" headers="r1c1-t2">
<p><code>-sql</code> or <code>-s</code></p>
</td>
<td class="cellalignment5693" headers="r42c1-t2 r1c2-t2">
<p>Specifies object types and packages, or subsets of packages, for which JPublisher generates Java classes, and optionally subclasses and interfaces.</p>
</td>
<td class="cellalignment5693" headers="r42c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r42c1-t2 r1c4-t2">
<p>Input files/items</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r43c1-t2" headers="r1c1-t2">
<p><code>-sqlj</code></p>
</td>
<td class="cellalignment5693" headers="r43c1-t2 r1c2-t2">
<p>Specifies SQLJ option settings for the JPublisher invocation of the SQLJ translator.</p>
</td>
<td class="cellalignment5693" headers="r43c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r43c1-t2 r1c4-t2">
<p>SQLJ</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r44c1-t2" headers="r1c1-t2">
<p><code>-sqlstatement</code></p>
</td>
<td class="cellalignment5693" headers="r44c1-t2 r1c2-t2">
<p>Specifies SQL queries or data manipulation language (DML) statements for which JPublisher generates Java classes, and optionally subclasses and interfaces, with appropriate methods.</p>
</td>
<td class="cellalignment5693" headers="r44c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r44c1-t2 r1c4-t2">
<p>Input files/items</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r45c1-t2" headers="r1c1-t2">
<p><code>-style</code></p>
</td>
<td class="cellalignment5693" headers="r45c1-t2 r1c2-t2">
<p>Specifies the name of a &#34;style file&#34; for Java-to-Java type mappings.</p>
</td>
<td class="cellalignment5693" headers="r45c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r45c1-t2 r1c4-t2">
<p>Data type mappings</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r46c1-t2" headers="r1c1-t2">
<p><code>-sysuser</code></p>
</td>
<td class="cellalignment5693" headers="r46c1-t2 r1c2-t2">
<p>Specifies the name and password for a superuser account that can be used to grant permissions to execute wrappers that access Web services client proxy classes in the database.</p>
</td>
<td class="cellalignment5693" headers="r46c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r46c1-t2 r1c4-t2">
<p>Web services</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r47c1-t2" headers="r1c1-t2">
<p><code>-tostring</code></p>
</td>
<td class="cellalignment5693" headers="r47c1-t2 r1c2-t2">
<p>Specifies whether to generate a <code>toString()</code> method for object types.</p>
</td>
<td class="cellalignment5693" headers="r47c1-t2 r1c3-t2">
<p><code>false</code></p>
</td>
<td class="cellalignment5693" headers="r47c1-t2 r1c4-t2">
<p>Java code generation</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r48c1-t2" headers="r1c1-t2">
<p><code>-typemap</code></p>
</td>
<td class="cellalignment5693" headers="r48c1-t2 r1c2-t2">
<p>Specifies the JPublisher type map.</p>
</td>
<td class="cellalignment5693" headers="r48c1-t2 r1c3-t2">
<p>Empty</p>
</td>
<td class="cellalignment5693" headers="r48c1-t2 r1c4-t2">
<p>Type maps</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r49c1-t2" headers="r1c1-t2">
<p><code>-types</code></p>
</td>
<td class="cellalignment5693" headers="r49c1-t2 r1c2-t2">
<p>Specifies object types for which JPublisher generates code.</p>
<p><span class="bold">Note</span>: This option is deprecated in favor of <code>-sql</code>, but is supported for backward compatibility.</p>
</td>
<td class="cellalignment5693" headers="r49c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r49c1-t2 r1c4-t2">
<p>Input files/items</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r50c1-t2" headers="r1c1-t2">
<p><code>-url</code></p>
</td>
<td class="cellalignment5693" headers="r50c1-t2 r1c2-t2">
<p>Specifies the URL that JPublisher uses to connect to the database.</p>
</td>
<td class="cellalignment5693" headers="r50c1-t2 r1c3-t2">
<p><code>jdbc:oracle:oci:@</code></p>
</td>
<td class="cellalignment5693" headers="r50c1-t2 r1c4-t2">
<p>Connection</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r51c1-t2" headers="r1c1-t2">
<p><code>-user</code> or <code>-u</code></p>
</td>
<td class="cellalignment5693" headers="r51c1-t2 r1c2-t2">
<p>Specifies an Oracle user name and password for connection.</p>
</td>
<td class="cellalignment5693" headers="r51c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r51c1-t2 r1c4-t2">
<p>Connection</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r52c1-t2" headers="r1c1-t2">
<p><code>-usertypes</code></p>
</td>
<td class="cellalignment5693" headers="r52c1-t2 r1c2-t2">
<p>Specifies the <code>jdbc</code> or <code>oracle</code> type mapping that JPublisher uses for user-defined SQL types.</p>
</td>
<td class="cellalignment5693" headers="r52c1-t2 r1c3-t2">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r52c1-t2 r1c4-t2">
<p>Data type mappings</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r53c1-t2" headers="r1c1-t2">
<p><code>-vm</code></p>
</td>
<td class="cellalignment5693" headers="r53c1-t2 r1c2-t2">
<p>Specifies a Java version, in case you want a version other than the default.</p>
</td>
<td class="cellalignment5693" headers="r53c1-t2 r1c3-t2">
<p>NA</p>
</td>
<td class="cellalignment5693" headers="r53c1-t2 r1c4-t2">
<p>Java environment</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i1005844"></a>
<div id="JJPUB24175" class="sect2">
<h3 class="sect2">JPublisher O<a id="sthref201"></a>ption Tips</h3>
<p>Be aware of the following usage notes for JPublisher options:</p>
<ul>
<li>
<p>JPublisher always requires the <code>-user</code> option or its shorthand equivalent <code>-u</code>.</p>
</li>
<li>
<p>Options are processed in the order in which they appear. Options from an <code>INPUT</code> file are processed at the point where the <code>-input</code> or <code>-i</code> option occurs. Similarly, options from a properties file are processed at the point where the <code>-props</code> or <code>-p</code> option occurs.</p>
</li>
<li>
<p>As a rule, if a particular option appears more than once, JPublisher uses the value from the last occurrence. However, this is <span class="italic">not</span> true for the following options, which are cumulative:</p>
<p><code>-sql</code></p>
<p><code>-types</code>, which is deprecated</p>
<p><code>-java</code></p>
<p><code>-addtypemap</code> or <code>-adddefaulttypemap</code></p>
<p><code>-style</code></p>
</li>
<li>
<p>In general, separate options and corresponding option values by an equal sign (<code>=</code>). However, when the following options appear on the command line, you can also use a space as a separator:</p>
<p><code>-sql</code> or <code>-s</code>, <code>-user</code> or <code>-u</code>, <code>-props</code> or <code>-p</code>, and <code>-input</code> or <code>-i</code></p>
</li>
<li>
<p>With the <code>-sqlj</code> option, you <span class="italic">must</span> use a space instead of an equal sign, because SQLJ settings following the <code>-sqlj</code> option use equal signs. Consider the following example, where each entry after &#34;<code>-sqlj</code>&#34; is a SQLJ option:</p>
<pre>% jpub -user=hr -sql=PERSON:Person -sqlj -optcols=true
 -optparams=true -optparamdefaults=<span class="italic">datatype1</span>(<span class="italic">size1</span>),<span class="italic">datatype2</span>(<span class="italic">size</span>)
Enter hr password: <span class="italic">password</span>
</pre></li>
<li>
<p>It is advisable to specify a Java package for generated classes with the <code>-package</code> option, either on the command line or in a properties file. For example, you could enter the following on the command line:</p>
<pre>% jpub -sql=Person -package=e.f ...
</pre>
<p>Alternatively, you could enter the following in the properties file:</p>
<pre>jpub.sql=Person
jpub.package=e.f
...
</pre>
<p>These statements direct JPublisher to create the class <code>Person</code> in the Java package <code>e.f</code>, that is, to create the class <code>e.f.Person</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006954">&#34;Properties File Structure and Syntax&#34;</a></div>
</li>
<li>
<p>If you do not specify a type or package in the <code>INPUT</code> file or on the command line, then JPublisher translates all types and packages in the user schema according to the options specified on the command line or in the properties file.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1005872"></a>
<div id="JJPUB24176" class="sect2">
<h3 class="sect2">Notational Con<a id="sthref202"></a><a id="sthref203"></a>ventions</h3>
<p>The JPublisher option syntax used in the following sections uses the following notational conventions:</p>
<ul>
<li>
<p>Braces <code>{...}</code> enclose a list of possible values. Specify only one of the values within the braces.</p>
</li>
<li>
<p>A vertical bar <code>|</code> separates alternatives within braces.</p>
</li>
<li>
<p>Terms in <code><span class="codeinlineitalic">italics</span></code> are for user input. Specify an actual value or string.</p>
</li>
<li>
<p>Terms in <span class="bold">boldface</span> indicate default values.</p>
</li>
<li>
<p>Square brackets <code>[...]</code> enclose optional items. In some cases, however, square brackets or parentheses are part of the syntax and must be entered verbatim. In this case, this manual uses boldface: <code><span class="codeinlinebold">[</span></code>...<code><span class="codeinlinebold">]</span></code> or <code><span class="codeinlinebold">(</span></code>...<code><span class="codeinlinebold">)</span></code>.</p>
</li>
<li>
<p>Ellipsis points <code>...</code> immediately following an item, or items enclosed in brackets, mean that you can repeat the item any number of times.</p>
</li>
<li>
<p>Punctuation symbols other than those described in this section are entered as shown in this manual. These include &#34;<code>.</code>&#34; and &#34;<code>@</code>&#34;, for example.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1010406"></a>
<div id="JJPUB24177" class="sect2">
<h3 class="sect2">Options for Input Files and Items to Publish</h3>
<p>This section documents the following JPublisher options that specify key input, either JPublisher input files, such as <code>INPUT</code> files or properties files, or items to publish, such as SQL objects, PL/SQL packages, SQL queries, SQL DML statements, or server-side Java classes:</p>
<ul>
<li>
<p>Options for input files: <code>-input</code>, <code>-props</code></p>
</li>
<li>
<p>Options for items to publish: <code>-java</code>, <code>-sql</code>, <code>-sqlstatement</code>, <code>-types</code></p>
</li>
</ul>
<p>These options are discussed in alphabetic order.</p>
<div id="JJPUB24178" class="sect3"><a id="sthref204"></a>
<h4 class="sect3">File Cont<a id="sthref205"></a><a id="sthref206"></a><a id="sthref207"></a><a id="sthref208"></a><a id="sthref209"></a>aining Names of Objects and Packages to Translate</h4>
<p>The <code>-input</code> option specifies the name of a file from which JPublisher reads the names of SQL or PL/SQL entities or server-side Java classes to publish, along with any related information or instructions. JPublisher publishes each item in the list. You can think of the <code>INPUT</code> file as a makefile for type declarations, which lists the types that need Java class definitions.</p>
<p>The syntax of the <code>-input</code> option is as follows:</p>
<pre>-input=<span class="italic">filename</span>
-i <span class="italic">filename</span>
</pre>
<p>Both formats are synonymous. The second one is a convenient command-line shortcut.</p>
<p>In some cases, JPublisher may find it necessary to translate some additional classes that do not appear in the <code>INPUT</code> file. This is because JPublisher analyzes the types in the <code>INPUT</code> file for dependencies before performing the translation and translates other types as necessary.</p>
<p>If you do not specify any items to publish in an <code>INPUT</code> file or on the command line, then JPublisher translates all user-defined SQL types and PL/SQL packages declared in the database schema to which it is connected.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007142">&#34;Translating Additional Types&#34;</a> and <a href="#i1007010">&#34;INPUT File Structure and Syntax&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="i1012848"></a>
<div id="JJPUB24179" class="sect3">
<h4 class="sect3">Decla<a id="sthref210"></a><a id="sthref211"></a><a id="sthref212"></a>ration of Server-Side Java Classes to Publish</h4>
<p>The <code>-java</code> option enables you to create client-side stub classes to access server-side classes. This is an improvement over earlier JPublisher releases in which calling Java stored procedures and functions from a database client required JDBC calls to associated PL/SQL wrappers.</p>
<p>The syntax of the <code>-java</code> option is as follows:</p>
<pre>-java=<span class="italic">class_or_package_list</span>
</pre>
<p>The functionality of the <code>-java</code> option mirrors that of the <code>-sql</code> option. It creates a client-side Java stub class to access a server-side Java class, in contrast to creating a client-side Java class to access a server-side SQL object or PL/SQL package.</p>
<p>When using the <code>-java</code> option, specify a comma-delimited list of server-side Java classes or packages.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>To use the <code>-java</code> option, you must also specify the <code>-user</code> and <code>-url</code> settings for a database connection.</p>
</li>
<li>
<p>It is advisable to use the same Java Development Kit (JDK) on the client as on the server.</p>
</li>
</ul>
</div>
<p>For example:</p>
<pre>-java=foo.bar.Baz,foo.baz.*
</pre>
<p>Or, to specify the client-side class name corresponding to <code>Baz</code>, instead of using the server-side name by default:</p>
<pre>-java=foo.bar.Baz:MyBaz,foo.baz.*
</pre>
<p>This setting creates <code>MyBaz</code> and not <code>foo.bar.MyBaz</code>.</p>
<p>or:</p>
<pre>-java=foo.bar.Baz:foo.bar.MyBaz,foo.baz.*
</pre>
<p>You can also specify a schema:</p>
<pre>-java=foo.bar.Baz@HR
</pre>
<p>If you specify the schema, then only that schema is searched. If you do not specify a schema, then the schema of the logged-in user, according to the <code>-user</code> option setting, is searched. This is the most likely scenario.</p>
<p>As an example, assume that you want to call the following method on the server:</p>
<pre>public String oracle.sqlj.checker.JdbcVersion.to_string();
</pre>
<p>Use the following <code>-java</code> setting:</p>
<pre>-java=oracle.sqlj.checker.JdbcVersion
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If JPublisher cannot find a specified class in the schema, a specified schema or the schema of the logged-in user, then it uses the <code>Class.forName()</code> method to search for the class among system classes in the Java Virtual Machine (JVM), typically Java run-time environment (JRE) or JDK classes.</div>
<p><a id="JJPUB24180"></a><span class="subhead3">Code Generation for -java Option&nbsp;</span>When you use the <code>-java</code> option, generated code uses the following API:</p>
<pre>public class Client
{
   public static String getSignature(Class[]);
   public static Object invoke(Connection, String, String, 
                               String, Object[]);
   public static Object invoke(Connection, String, String, 
                               Class[], Object[]);
}
</pre>
<p>Classes for the API are located in the <code>oracle.jpub.reflect</code> package, so client applications must import this package.</p>
<p>For a setting of <code>-java=oracle.sqlj.checker.JdbcVersion</code>, JPublisher-generated code includes the following call:</p>
<pre>Connection conn = ...;
String serverSqljVersion = (String)
           Client.invoke(conn, &#34;oracle.sqlj.checker.JdbcVersion&#34;,
           &#34;to_string&#34;, new Class[]{}, new Object[]{});
</pre>
<p>The <code>Class[]</code> array is for the method parameter types, and the <code>Object[]</code> array is for the parameter values. In this case, because <code>to_string</code> has no parameters, the arrays are empty.</p>
<p>Note the following:</p>
<ul>
<li>
<p>Any serializable type, such as <code>int[]</code> or <code>String[]</code>, can be passed as an argument.</p>
</li>
<li>
<p>The semantics of this API are different from the semantics for invoking Java stored procedures or functions through a PL/SQL wrapper, in the following ways:</p>
<ul>
<li>
<p>Arguments cannot be <code>OUT</code> or <code>IN OUT</code>. Returned values must be part of the function result.</p>
</li>
<li>
<p>Exceptions are properly returned.</p>
</li>
<li>
<p>Method invocation uses invoker&#39;s rights. There is no tuning to obtain definer&#39;s rights.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDEV" href="../JJDEV/toc.htm"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> for information about invoker&#39;s rights and definer&#39;s rights</div>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="JJPUB24181" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref213"></a>
<h4 class="sect3">Declaration of Server-Side Java Classes to Publish</h4>
<p>The related options for publishing a server-side Java class are:</p>
<ul>
<li>
<pre>-dbajva=class_list
</pre></li>
<li>
<pre>-proxyopts=single|multiple|static|arrayin|arrayout|arrayinout
|arrayall|noload
</pre></li>
<li>
<pre>-compatible=10.1
</pre></li>
<li>
<pre>-sysuser=<span class="italic">user</span>/<span class="italic">password</span>
</pre></li>
<li>
<pre>-plsqlfile=wrapper[,dropper]
</pre></li>
<li>
<pre>-plsqlpackage=<span class="italic">name</span>
</pre></li>
</ul>
<p>Oracle Database 10<span class="italic">g</span> release 1 (10.1) introduced the <code>-java</code> option to publish server-side Java classes. Oracle Database 10<span class="italic">g</span> release 2 (10.2) introduced a new approach toward server-side Java class publishing. The <code>-dbjava</code> option publishes a server-side Java class into PL/SQL, or into client-side Java class. The <code>class_list</code> specification is a comma-delimited list of server-side classes at the specified server. The <code>class_list</code> item is of the form <code>classname[:name[#interface]]</code>. It can also be a package name. Consider the option:</p>
<pre>-dbajva=classname[:name[#interface]]
</pre>
<p>If <code>name</code> is not specified, then the server-side Java class, <code>classname</code>, is published into PL/SQL, else into the client-side Java class, <code>name</code>. If <code>interface</code> is specified, then the interface file is generated for the client-side Java class.</p>
<p>When used with <code>-dbjava</code>, the <code>-proxyopts</code> option indicates whether to map instance methods using a singleton instance or using multiple instances, and also whether to map methods with array parameters assuming arrays as <code>IN</code>, <code>OUT</code>, <code>IN OUT</code>, or all the modes. The <code>-proxyopts=static</code> setting specifies that only static methods should be published. The default setting, <code>-proxyopts=single,arrayin</code>, indicates that instance methods are called using a singleton instance and array parameters are considered as input. The <code>-proxyopts=noload</code> setting forbids JPublisher from loading the generated PL/SQL and Java stored procedure wrappers.</p>
<p>The <code>-compatible=10.1</code> option makes <code>-dbjava</code> equivalent to <code>-java</code>.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24182" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref214"></a>
<h4 class="sect3">Declaration of Server-Side Java Classes to Publish</h4>
<p>The related options for publishing server-side Java class are:</p>
<ul>
<li>
<pre>-proxyclasses=class_or_jar_list
</pre></li>
<li>
<pre>-proxyopts=single|multiple|static|arrayin|arrayout|arrayinout
|arrayall
</pre></li>
<li>
<pre>-plsqlfile=wrapper[,dropper]
</pre></li>
<li>
<pre>-plsqlpackage=<span class="italic">name</span>
</pre></li>
</ul>
<p>The <code>-proxyclasses</code> option is similar to <code>-dbjava</code>. While <code>-dbjava</code> requires that the classes to be published exist in the database, <code>-proxyclasses</code> requires that the classes appear in the classpath. Typically, by using <code>-proxyclasses</code>, you can load the exposed classes and the generated wrappers into the database later.</p>
<p>The <code>-proxyclasses</code> option generates only a PL/SQL wrapper. Unlike <code>-dbjava</code>, it will not generate client-side Java code for a server-side Java class. Also, unlike <code>-dbjava</code>, <code>-proxyclasses</code> does not load the generated Java stored procedure into the database.</p>
<p>You can use the <code>-proxyclasses</code> option to specify a comma-delimited list of Java classes, either loose classes or Java Archive (JAR) files, for which JPublisher creates PL/SQL wrappers. Depending on the situation, JPublisher can also create Java wrapper classes to afford access from PL/SQL. Each of the classes processed must have either public, static methods or, for classes in which you want to publish instance methods, a <code>public</code> zero-argument constructor.</p>
<p>To summarize, the following are generated for each class being processed, depending on the <code>-proxyopts</code> option settings:</p>
<ul>
<li>
<p>A PL/SQL wrapper to allow access from PL/SQL. This is always generated.</p>
</li>
<li>
<p>A wrapper class to expose Java instance methods as static methods, if there are any instance methods to publish.</p>
</li>
</ul>
<p>Instance methods must be exposed as static methods to allow access from PL/SQL. A wrapper class is also necessary if the wrapped class uses anything other than Java primitive types in the method calling sequences.</p>
<p>While using the <code>-proxyclasses</code> option directly, you can specify JAR files and Java classes that exist in the classpath. Classes and JAR files can be specified as follows:</p>
<ul>
<li>
<p>Class name, such as <code>foo.bar.Baz</code> or <code>foo.bar.Baz.class</code></p>
</li>
<li>
<p>Package name, such as <code>foo.bar.*</code>, for <code>@</code><code><span class="codeinlineitalic">server</span></code> mode only</p>
</li>
<li>
<p>JAR or ZIP file name, such as <code>foo/bar/baz.jar</code> or <code>Baz.zip</code></p>
</li>
<li>
<p>JAR or ZIP file name followed by parenthesized list of classes or packages, such as <code>baz.jar (foo.MyClass1, foo.bar.MyClass2, foo1.*)</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="JJPUB24183" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref215"></a>
<h4 class="sect3">Settings for Java and PL/SQL Wrapper Generation</h4>
<p>The <code>-proxyopts</code> option is used as input by the <code>-dbjava</code>, <code>-proxywsdl</code>, and <code>-proxyclasses</code> options and specifies JPublisher behavior in generating wrapper classes and PL/SQL wrappers for server-side Java classes.</p>
<p>The syntax of the <code>-proxyopts</code> option is as follows:</p>
<pre>-proxyopts=<span class="italic">setting1,setting2,...</span>
</pre>
<p>This option uses the basic settings, which can be used individually or in combinations. In this discussion, processed classes are the classes that are wrapped by using the <code>-dbjava</code>, <code>-proxywsdl</code>, or <code>-proxyclasses</code> options.</p>
<p>Where Java wrapper classes are generated, the wrapper class for a class <code>foo.bar.MyClass</code> would be <code>foo.bar.MyClassJPub</code>, unless the package is overridden by a setting of the <code>-package</code> option.</p>
<p>You can use the basic <code>-proxyopts</code> settings as follows:</p>
<ul>
<li>
<p>Use the <code>static</code> setting to specify the treatment of static methods of processed classes.</p>
<p>With this setting, in the PL/SQL wrap<a id="sthref216"></a>per, a wrapper procedure is generated for each static method. Without this setting, static methods are ignored. For classes with only static methods, wrapper classes are not required for processed classes that use only Java primitive types in their method calling sequences.</p>
</li>
<li>
<p>Use the <code>multiple</code> or <code>single</code> setting to specify treatment of instance methods of processed classes, where you want instance methods exposed as static methods. In either case, for each processed class, JPublisher generates an intermediate Java class that wraps instance methods with static methods, in addition to generating a PL/SQL wrapper.</p>
<p>Use the <code>instance</code> setting to specify treatment of instance methods of processed classes, where you want instance methods maintained as instance methods.</p>
<p>These settings function as follows:</p>
<ul>
<li>
<p><code>multiple</code></p>
<p>For each processed class, the Java wrapper class has a static equivalent for each instance method through the use of handles, which identify instances of wrapped classes.</p>
</li>
<li>
<p><code>single</code></p>
<p>Only a single default instance of each wrapped class is used during run time. For each processed class, the Java wrapper class has static wrapper methods for instance methods without requiring the use of handles. This is the singleton mechanism.</p>
</li>
<li>
<p><code>instance</code></p>
<p>Instance methods are wrapped as instance methods in the Java wrapper class.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>instance</code> setting is not appropriate for Web services.</div>
</li>
</ul>
<p>The instance methods are ignored if one of these settings or a <code>jaxrpc</code> or <code>soap</code> setting, which implies <code>single</code>, is not specified. For either of these settings, only classes that provide a public zero-argument constructor are processed. You can use both settings to generate wrapper classes of both styles.</p>
</li>
<li>
<p>Use the <code>jaxrpc</code> or <code>soap</code> setting to publish instance methods of Web services client proxy classes. These settings function as follows:</p>
<ul>
<li>
<p><code>jaxrpc</code></p>
<p>This is the default setting. It is a convenient setting for wrapping JAX-RPC client proxy classes, which is appropriate for use with Oracle Application Server 10<span class="italic">g</span> 10.0.1 and later releases. JPublisher creates a Java wrapper class for each processed class and also creates the PL/SQL wrapper. Client proxy classes do not have static methods to be published, and instance methods are published using the singleton mechanism by default. Therefore, when processing JAX-RPC client proxy classes, <code>-proxyopts=jaxrpc</code> implies <code>-proxyopts=single</code>. The <code>jaxrpc</code> setting also results in generation of special code that is specific to JAX-RPC clients.</p>
</li>
<li>
<p><code>soap</code></p>
<p>This setting is equivalent to the <code>jaxrpc</code> setting, but is used for wrapping SOAP client proxy classes instead of JAX-RPC client proxy classes. This is appropriate for use with Oracle Application Server 10<span class="italic">g</span> 9.0.4 and earlier releases.</p>
</li>
</ul>
</li>
</ul>
<p>Here are some basic uses of the <code>-proxyopts</code> option:</p>
<pre>-proxyopts=jaxrpc

-proxyopts=soap

-proxyopts=static

-proxyopts=static,instance

-proxyopts=single

-proxyopts=single,multiple

-proxyopts=static,multiple
</pre>
<p>The <code>static,instance</code> setting publishes static and instance methods. The <code>single,multiple</code> setting publishes only instance methods, using both the singleton mechanism and the handle mechanism. The <code>static,multiple</code> setting publishes static and instance methods, using the handle mechanism to expose instance methods as static methods.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is typical to explicitly use the <code>-proxyopts</code> option with the <code>-proxyclasses</code> option than with the <code>-proxywsdl</code> option. For the use of <code>-proxywsdl</code> with 10.0.x releases of Oracle Application Server 10<span class="italic">g</span>, the default <code>-proxyopts=jaxrpc</code> setting is sufficient.</div>
<p>There are additional, advanced <code>-proxyopts</code> settings as well. The functionality of each setting is as follows:</p>
<ul>
<li>
<p><code>noload</code></p>
<p>Use this to indicate that the generated code need not be loaded into the database. By default, the generated code is loaded.</p>
</li>
<li>
<p><code>recursive</code></p>
<p>Use this to indicate that when processing a class that extends another class, also create PL/SQL and Java wrappers, if appropriate, for inherited methods.</p>
</li>
<li>
<p><code>tabfun</code></p>
<p>U<a id="sthref217"></a>se this with the <code>jaxrpc</code> or <code>soap</code> setting for JPublisher to generate PL/SQL table functions for the PL/SQL package for each of the wrapped Web services operations. This exposes data through database tables rather than stored procedures or functions.</p>
<p>Do not use the <code>-proxyopts=tabfun</code> setting when the Web service operation contains array types as parameter types. In such cases, JPublisher generates PL/SQL stored procedure with SQL tables as parameter types. So, setting the <code>-proxyopts=tabfun</code> setting will result in compilation error for the generated PL/SQL wrapper.</p>
</li>
<li>
<p><code>deterministic</code></p>
<p>Use this to indicate in the generated PL/SQL wrapper that the wrapped methods are deterministic. This would typically be used with the <code>tabfun</code> setting. Deterministic is a PL/SQL annotation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01208" href="../SQLRF/statements_5012.htm#SQLRF01208"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about <code>DETERMINISTIC</code> functions</div>
</li>
<li>
<p><code>main(0,...)</code></p>
<p>Use this with the <code>static</code> setting to define the wrapper methods to be generated if there is a <code>public void String main(String[])</code> method in the class. A separate method is generated for each number of arguments that you want to support. You can use commas or hyphens when indicating the number of arguments, as in the following examples:</p>
<ul>
<li>
<p><code>main</code> or <code>main(0)</code> produces a wrapper method only for zero arguments.</p>
</li>
<li>
<p><code>main(0,1)</code> produces wrapper methods for zero arguments and one argument. This is the default setting.</p>
</li>
<li>
<p><code>main(0-3)</code> produces wrapper methods for zero, one, two, and three arguments.</p>
</li>
<li>
<p><code>main(0,2-4)</code> produces wrapper methods for zero, two, three, and four arguments.</p>
</li>
</ul>
<p>The maximum number of arguments in the wrapper method for the <code>main()</code> method is according to PL/SQL limitations.</p>
</li>
</ul>
<p>The following example uses the <code>jaxrpc</code> basic setting by default. It also uses table functions and indicates that wrapped methods are deterministic:</p>
<pre>-proxyopts=tabfun,deterministic
</pre>
<p>The following example explicitly sets the <code>static</code> mode, processing classes that are not client proxy classes, and specifies that the generated code should not be loaded into the database:</p>
<pre>-proxyopts=static,noload
</pre></div>
<!-- class="sect3" -->
<div id="JJPUB24184" class="sect3"><a id="sthref218"></a>
<h4 class="sect3">Input Pro<a id="sthref219"></a><a id="sthref220"></a><a id="sthref221"></a><a id="sthref222"></a><a id="sthref223"></a>perties File</h4>
<p>The <code>-props</code> option specifies the name of a JPublisher properties file that specifies JPublisher option settings. JPublisher processes the properties file as if its contents were inserted in sequence on the command line where the <code>-props</code> option is specified.</p>
<p>The syntax of the <code>-props</code> option is as follows:</p>
<pre>-props=<span class="italic">filename</span>
-p <span class="italic">filename</span>
</pre>
<p>Both formats are synonymous. The second one is provided as a convenient command-line shortcut.</p>
<p>If more than one properties file appears on the command line, then JPublisher processes them with the other command-line options, in the order in which they appear.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006954">&#34;Properties File Structure and Syntax&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Encoding settings, either set through the JPublisher <code>-encoding</code> option or the Java <code>file.encoding</code> setting, do not apply to Java properties files. Properties files always use the <code>8859_1</code> encoding. This is a feature of Java in general, and not of JPublisher in particular. However, you can use Unicode escape sequences in a properties file.</div>
</div>
<!-- class="sect3" -->
<a id="i1009889"></a>
<div id="JJPUB24185" class="sect3">
<h4 class="sect3">Dec<a id="sthref224"></a><a id="sthref225"></a><a id="sthref226"></a><a id="sthref227"></a><a id="sthref228"></a>laration of Object Types and Packages to Translate</h4>
<p>The <code>-sql</code> option is used to specify the user-defined SQL types, such as objects or collections, or the PL/SQL packages that need to be published. Optionally, you can specify the user subclasses or interfaces that should be generated. You can publish all or a specific subset of a PL/SQL package.</p>
<p>The syntax of the <code>-sql</code> option is as follows:</p>
<pre>-sql={toplevel|<span class="italic">object_type_and_package_translation_syntax</span>}
-s {toplevel|<span class="italic">object_type_and_package_translation_syntax</span>}
</pre>
<p>The two formats of this option, <code>-sql</code> and <code>-s</code>, are synonymous. The <code>-s</code> format is provided as a convenient command-line shortcut.</p>
<p>You can use the <code>-sql</code> option when you do not need the generality of an <code>INPUT</code> file. The <code>-sql</code> option lets you list one or more database entities declared in SQL that you want JPublisher to translate. Alternatively, you can use several <code>-sql</code> options in the same command line, or several <code>jpub.sql</code> options in a properties file.</p>
<p>You can mix user-defined type names and package names in the same <code>-sql</code> declaration. JPublisher can detect whether each item is an object type or a package. You can also use the <code>-sql</code> option with the keyword <code><a id="sthref229"></a><a id="sthref230"></a>toplevel</code> to translate all top-level PL/SQL subprograms in a schema. The <code>toplevel</code> keyword is not case-sensitive.</p>
<p>If you do not specify any types or packages to translate in the <code>INPUT</code> file or on the command line, then JPublisher translates all the types and packages in the schema to which you are connected. In this section, the <code>-sql</code> option is explained in terms of the equivalent <code>INPUT</code> file syntax.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007015">&#34;Understanding the Translation Statement&#34;</a></div>
<p>Yo<a id="sthref231"></a>u can use the any of the following syntax modes:</p>
<ul>
<li>
<p><code>-sql=</code><code><span class="codeinlineitalic">name_a</span></code></p>
<p>JPublisher publishes <code><span class="codeinlineitalic">name_a</span></code>, naming the generated class according to the default settings. In an <code>INPUT</code> file, you specify this options as follows:</p>
<pre>SQL <span class="italic">name_a</span>
</pre></li>
<li>
<p><code>-sql=</code><code><span class="codeinlineitalic">name_a:class_c</span></code></p>
<p>JPublisher publishes <code><span class="codeinlineitalic">name_a</span></code> as the generated Java class <code><span class="codeinlineitalic">class_c</span></code>. In an <code>INPUT</code> file, you specify this options as follows:</p>
<pre>SQL <span class="italic">name_a</span> AS <span class="italic">class_c</span>
</pre></li>
<li>
<p><code>-sql=</code><code><span class="codeinlineitalic">name_a</span></code><code>:</code><code><span class="codeinlineitalic">class_b</span></code><code>:</code><code><span class="codeinlineitalic">class_c</span></code></p>
<p>In this case, <code><span class="codeinlineitalic">name_a</span></code> must represent an object type. JPublisher generates the Java class, <code><span class="codeinlineitalic">class_b</span></code>, and a stub class, <code><span class="codeinlineitalic">class_c</span></code>, that extends <code><span class="codeinlineitalic">class_b</span></code>. You provide the code for <code><span class="codeinlineitalic">class_c</span></code>, which is used to represent <code><span class="codeinlineitalic">name_a</span></code> in your Java code. In an <code>INPUT</code> file, you specify this options as follows:</p>
<pre>SQL <span class="italic">name_a</span> GENERATE <span class="italic">class_b</span> AS <span class="italic">class_c</span>
</pre></li>
</ul>
<ul>
<li>
<p><code>-sql=</code><code><span class="codeinlineitalic">name_a</span></code><code>:</code><code><span class="codeinlineitalic">class_b</span></code><code>#</code><code><span class="codeinlineitalic">intfc_b</span></code></p>
</li>
<li>
<p><code>-sql=</code><code><span class="codeinlineitalic">name_a</span></code><code>:</code><code><span class="codeinlineitalic">class_b</span></code><code>:</code><code><span class="codeinlineitalic">class_c</span></code><code>#</code><code><span class="codeinlineitalic">intfc_c</span></code></p>
<p>You can use either of these syntax formats to have JPublisher generate a Java interface. This feature is particularly useful for Web services. In the first case, <code><span class="codeinlineitalic">class_b</span></code> represents <code><span class="codeinlineitalic">name_a</span></code> and implements <code><span class="codeinlineitalic">intfc_b</span></code>. In the second case, <code><span class="codeinlineitalic">class_c</span></code> represents <code><span class="codeinlineitalic">name_a</span></code>, extends <code><span class="codeinlineitalic">class_b</span></code>, and implements <code><span class="codeinlineitalic">intfc_c</span></code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="genclint.htm#i1009070">&#34;Generation of Java Interfaces&#34;</a></div>
<p>Specify an interface for either the generated class or the user subclass, but not both. In an <code>INPUT</code> file, this syntax is as follows:</p>
<pre>  SQL <span class="italic">name_a</span>
    [GENERATE  <span class="italic">class_b</span>
               [ implements <span class="italic">intfc_b</span>] ]
    [AS        class_c
               [ implements <span class="italic">intfc_c</span> ] ]
    ...
</pre></li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Only SQL names that are not case-<a id="sthref232"></a>sensitive are supported on the JPublisher command line. If a user-defined type was defined in a case-sensitive way in SQL, using quotes, then you must specify the name in the JPublisher <code>INPUT</code> file instead of specifying the user-defined type, in quotes, on the command line.</p>
</li>
<li>
<p>If your desired class and interface names follow a pattern, you can use the <code>-genpattern</code> command-line option for convenience.</p>
</li>
</ul>
</div>
<p>If you enter more than one item for translation, then the items must be separated by commas, without any white space. This example assumes that <code>CORPORATION</code> is a package and that <code>EMPLOYEE</code> and <code>ADDRESS</code> are object types:</p>
<pre>-sql=CORPORATION,EMPLOYEE:OracleEmployee,ADDRESS:JAddress:MyAddress
</pre>
<p>JPublisher interprets this command as follows:</p>
<pre>SQL CORPORATION 
SQL EMPLOYEE AS OracleEmployee 
SQL ADDRESS GENERATE JAddress AS MyAddress
</pre>
<p>JPublisher performs the following actions:</p>
<ul>
<li>
<p>Creates a wrapper class for the <code>CORPORATION</code> package.</p>
</li>
<li>
<p>Translates the <code>EMPLOYEE</code> object type as <code>OracleEmployee</code>.</p>
</li>
<li>
<p>Generates an object reference class, <code>OracleEmployeeRef</code>.</p>
</li>
<li>
<p>Translates <code>ADDRESS</code> as <code>JAddress</code>, but generates code and references so that <code>ADDRESS</code> objects will be represented by the <code>MyAddress</code> class.</p>
</li>
<li>
<p>Generates a <code>MyAddress</code> stub, which extends <code>JAddress</code>, where you can write your custom code.</p>
</li>
<li>
<p>Generates an object reference class <code>MyAddressRef</code>.</p>
</li>
</ul>
<p>If you want JPublisher to translate all the top-level PL/SQL subprograms in the schema to which JPublisher is connected, then enter the keyword <code>toplevel</code> following the <code>-sql</code> option. JPublisher treats the top-level PL/SQL subprograms as if they were in a package. For example:</p>
<pre>-sql=toplevel
</pre>
<p>JPublisher generates a wrapper class, <code>toplevel</code>, for the top-level subprograms. If you want the class to be generated with a different name, you can declare the name as follows:</p>
<pre>-sql=toplevel:MyClass 
</pre>
<p>Note that this is synonymous with the following <code>INPUT</code> file syntax:</p>
<pre>SQL toplevel AS MyClass
</pre>
<p>Similarly, if you want JPublisher to translate all the top-level PL/SQL subprograms in some other schema, then enter:</p>
<pre>-sql=<span class="italic">schema_name</span>.toplevel
</pre>
<p>In this example, <code><span class="codeinlineitalic">schema_name</span></code> is the name of the schema containing the top-level subprograms. In addition, th<a id="sthref233"></a>ere are features to publish only a subset of stored procedures in a PL/SQL package or at the top level, using the following syntax:</p>
<pre>-sql=<span class="italic">plsql_package</span>(<span class="italic">proc1</span>+<span class="italic">proc2</span>+<span class="italic">proc3</span>+...)
</pre>
<p>Use a plus sign (<code>+</code>) between stored procedure names. Alternatively, for the SQL top level, use:</p>
<pre>-sql=toplevel(<span class="italic">proc1</span>+<span class="italic">proc2</span>+<span class="italic">proc3</span>+...)
</pre>
<p>The following syntax is for a JPublisher <code>INPUT</code> file, where commas are used between stored procedure names:</p>
<pre>SQL <span class="italic">plsql_package</span> (<span class="italic">proc1</span>, <span class="italic">proc2</span>, <span class="italic">proc3</span>, ...) AS ...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>In an <code>INPUT</code> file, put a stored procedure name in quotes if it is case-sensitive. For example, &#34;<code><span class="codeinlineitalic">proc1</span></code>&#34;. JPublisher assumes that names that are not in quotes are not case-sensitive.</p>
</li>
<li>
<p>Case-sensitive names are not supported on the JPublisher command line.</p>
</li>
<li>
<p>Specified stored procedure names can end in the wildcard character, &#34;<code>%</code>&#34;. The specification &#34;<code>myfunc%</code>&#34;, for example, matches all stored procedures that have their name starting with <code>myfunc</code>, such as <code>myfunc1</code>.</p>
</li>
</ul>
</div>
<p>You can also specify the subset according to stored procedure names and argument types by using the following syntax:</p>
<pre>myfunc(<span class="italic">sqltype1</span>, <span class="italic">sqltype2</span>, ...)
</pre>
<p>In this case, only those stored procedures that match in name and the number and types of arguments will be published. For example:</p>
<pre>-sql=mypackage(myfunc1(NUMBER, CHAR)+myfunc2(VARCHAR2))
</pre></div>
<!-- class="sect3" -->
<a id="i1013104"></a>
<div id="JJPUB24186" class="sect3">
<h4 class="sect3">Declar<a id="sthref234"></a><a id="sthref235"></a><a id="sthref236"></a>ation of SQL Statements to Translate</h4>
<p>The <code>-sqlstatement</code> option enables you to publish <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statements as Java methods. JPublisher generates SQLJ classes for this functionality.</p>
<p>The syntax of the <code>-sqlstatement</code> option is as follows:</p>
<pre>-sqlstatement.class=<span class="italic">ClassName</span>:<span class="italic">UserClassName</span>#<span class="italic">UserInterfaceName</span>
-sqlstatement.<span class="italic">methodName</span>=<span class="italic">sqlStatement</span>
-sqlstatement.return={both|resultset|beans}
</pre>
<p>Use <code>-sqlstatement.class</code> to specify the Java class in which the method will be published. In addition to the JPublisher-generated class, you can optionally specify a user subclass of the generated class, a user interface for the generated class or subclass, or both. Functionality for subclasses and interfaces is the same as for the <code>-sql</code> option. If you also use the JPublisher <code>-package</code> option, then the class you specify will be in the specified package. The default class is <code>SQLStatements</code>.</p>
<p>Use <code>-sqlstatement.</code><code><span class="codeinlineitalic">methodName</span></code> to specify the desired Java method name and the SQL statement. For a <code>SELECT</code> statement, use <code>-sqlstatement.return</code> to specify whether JPublisher should generate a method that returns a generic <code>java.sql.ResultSet</code> instance, a method that returns an array of JavaBeans, or both. <span class="italic">Generic</span> implies that the column types of the result set are unknown or unspecified.</p>
<p>For queries, however, the column types are actually known. This provides the option of returning specific results through an array of beans. The name of the method returning <code>ResultSet</code> will be <code><span class="codeinlineitalic">methodName</span></code><code>()</code>. The name of the method returning JavaBeans will be <code><span class="codeinlineitalic">methodName</span></code><code>Beans()</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your desired class and interface names follow a pattern, then you can use the <code>-genpattern</code> option for convenience.</div>
<p>JPublisher <code>INPUT</code> file syntax is as follows:</p>
<pre>SQLSTATEMENTS_TYPE <span class="italic">ClassName</span> AS <span class="italic">UserClassName</span>
                             IMPLEMENTS <span class="italic">UserInterfaceName</span>
SQLSTATEMENTS_METHOD <span class="italic">aSqlStatement</span> AS <span class="italic">methodName</span>
</pre>
<p>Here is a set of sample settings:</p>
<pre>-sqlstatement.class=MySqlStatements
-sqlstatement.getEmp=&#34;select ename from emp
                      where ename=:{myname VARCHAR}&#34;
-sqlstatement.return=both
</pre>
<p>These settings result in the generated code shown in <a href="codeex.htm#CCJJAFHA">&#34;Generated Code: SQL Statement&#34;</a>.</p>
<p>In addition, be aware that a style file specified through the <code>-style</code> option is relevant to the <code>-sqlstatement</code> option. If a SQL statement uses an Oracle data type <code>X</code>, which corresponds to a Java type <code>Y</code>, and type <code>Y</code> is mapped to a Java type <code>Z</code> in the style file, then methods generated as a result of the <code>-sqlstatement</code> option will use <code>Z</code>, and not <code>Y</code>.</p>
<p>For <code>SELECT</code> or DML statement results, you can use a style file to map the results to <code>javax.xml.transform.Source</code>, <code>oracle.jdbc.rowset.OracleWebRowSet</code>, or <code>org.w3c.dom.Document</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1010336">&#34;JPublisher Styles and Style Files&#34;</a> and <a href="datamap.htm#CHDIGIHC">&#34;REF CURSOR Types and Result Sets Mapping&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="i1010318"></a>
<div id="JJPUB24188" class="sect3">
<h4 class="sect3">Decla<a id="sthref237"></a><a id="sthref238"></a>ration of Object Types to Translate</h4>
<p>The <code>-types</code> option lets you list one or more individual object types that you want JPublisher to translate. The syntax of the <code>-types</code> option is as follows:</p>
<pre>-types=<span class="italic">type_translation_syntax</span>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>-types</code> option is currently supported for compatibility, but it is deprecated. Use the <code>-sql</code> option instead.</div>
<p>You can use the <code>-types</code> option, for SQL object types only and when you do not need the generality of an <code>INPUT</code> file. Except for the fact that the <code>-types</code> option does not support PL/SQL packages, it is identical to the <code>-sql</code> option.</p>
<p>If you do not enter any types or packages to translate in the <code>INPUT</code> file or on the command line, then JPublisher translates all the types and packages in the schema to which you are connected. The command-line syntax lets you indicate three possible type translations.</p>
<ul>
<li>
<p><code>-types=</code><code><span class="codeinlineitalic">name_a</span></code></p>
<p>JPublisher interprets this syntax as:</p>
<pre>TYPE <span class="italic">name_a</span>
</pre></li>
<li>
<p><code>-types=</code><code><span class="codeinlineitalic">name_a</span></code><code>:</code><code><span class="codeinlineitalic">name_b</span></code></p>
<p>JPublisher interprets this syntax as:</p>
<pre>TYPE <span class="italic">name_a</span> AS <span class="italic">name_b</span>
</pre></li>
<li>
<p><code>-types=</code><code><span class="codeinlineitalic">name_a</span></code><code>:</code><code><span class="codeinlineitalic">name_b</span></code><code>:</code><code><span class="codeinlineitalic">name_c</span></code></p>
<p>JPublisher interprets this syntax as:</p>
<pre>TYPE <span class="italic">name_a</span> GENERATE <span class="italic">name_b</span> AS <span class="italic">name_c</span>
</pre></li>
</ul>
<p><code>TYPE</code>, <code>TYPE...AS</code>, and <code>TYPE...GENERATE...AS</code> commands have the same functionality as <code>SQL</code>, <code>SQL...AS</code>, and <code>SQL...GENERATE...AS</code> syntax.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007015">&#34;Understanding the Translation Statement&#34;</a></div>
<p>Enter <code>-types=...</code> on the command line, followed by one or more object type translations that you want JPublisher to perform. If you enter more than one item, then the items must be separated by commas without any white space. For example, if you enter:</p>
<pre>-types=CORPORATION,EMPLOYEE:OracleEmployee,ADDRESS:JAddress:MyAddress
</pre>
<p>JPublisher interprets this command as:</p>
<pre>TYPE CORPORATION
TYPE EMPLOYEE AS OracleEmployee
TYPE ADDRESS GENERATE JAddress AS MyAddress
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010409"></a>
<div id="JJPUB24189" class="sect2">
<h3 class="sect2">Connection Options</h3>
<p>This section documents options related to the database connection that JPublisher uses. The options are discussed in the alphabetic order.</p>
<a id="CIHEAGEA"></a>
<div id="JJPUB24190" class="sect3">
<h4 class="sect3">SQLJ Con<a id="sthref239"></a><a id="sthref240"></a>nection Context Classes</h4>
<p>The <code>-context</code> option specifies the connection context class that JPublisher uses, and possibly declares, for SQLJ classes that JPublisher produces. The syntax of the <code>-context</code> option is as follows:</p>
<pre>-context={generated|<span class="bold">DefaultContext</span>|<span class="italic">user_defined</span>}
</pre>
<p>The <code>-context=DefaultContext</code> setting is the default and results in any JPublisher-generated SQLJ classes using the SQLJ default connection context class, <code>sqlj.runtime.ref.DefaultContext</code>, for all connection contexts. This is sufficient for most uses.</p>
<p>Alternatively, you can specify any user-defined class that implements the standard <code>sqlj.runtime.ConnectionContext</code> interface and exists in the classpath. The specified class will be used for all connection contexts.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
With a user-defined class, instances of that class must be used for output from the <code>getConnectionContext()</code> method or for input to the <code>setConnectionContext()</code> method. Refer to <a href="genclint.htm#i1006511">&#34;Connection Contexts and Instances in SQLJ Classes&#34;</a>, for information about these methods.</div>
<p>The <code>-context=generated</code> setting results in an inner class declaration for the <code>_Ctx</code> connection context class in all SQLJ classes generated by JPublisher. So, each class uses its own SQLJ connection context class. This setting may be appropriate for Oracle8<span class="italic">i</span> compatibility mode, but it is otherwise not recommended. Using the <code>DefaultContext</code> class or a user-defined class avoids the generation of additional connection context classes. You can specify the <code>-context</code> option on the command line or in a properties file.</p>
<p class="subhead2"><a id="JJPUB24191"></a>Notes for -context Usage in Backward-Compatibility Modes</p>
<p>If you use a backward-compatibility mode and use <code>.sqlj</code> files and the SQLJ translator directly, then a <code>-context=DefaultContext</code> setting gives you greater flexibility if you translate and compile your <code>.sqlj</code> files in separate steps, translating with the SQLJ <code>-compile=false</code> setting. If you are not using JDK 1.2-specific types, such as <code>java.sql.BLOB</code>, <code>CLOB</code>, <code>Struct</code>, <code>Ref</code>, or <code>Array</code>, then you can compile the resulting <code>.java</code> files under JDK 1.1, JDK 1.2, or later. This is <span class="italic">not</span> the case with the <code>-context=generated</code> setting, because SQLJ connection context classes in JDK 1.1 use <code>java.util.Dictionary</code> instances for object type maps, while SQLJ connection context classes in JDK 1.2 or later use <code>java.util.Map</code> instances.</p>
<p>A benefit of using the <code>-context=generated</code> setting, if you are directly manipulating <code>.sqlj</code> files, is that it permits full control over the way the SQLJ translator performs online checking. Specifically, you can check SQL user-defined types and PL/SQL packages against an appropriate exemplar database schema. However, because JPublisher generates <code>.sqlj</code> files from an existing schema, the generated code is already verified as correct through construction from that schema.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24192" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref241"></a>
<h4 class="sect3">The Default datasource Option</h4>
<p>You can use <code>-datasource</code> to specify the default data source for publishing SQL, PL/SQL, AQ, and server-side Java classes. With <code>-datasource</code> set, if the JDBC connection is not explicitly set by the application at run time, then the generated code will look up the specified Java Naming and Directory Interface (JNDI) location to get the data source and further get the JDBC connection from that data source.</p>
<p>The syntax of the <code>-datasource</code> option is as follows:</p>
<pre>-datasource=<span class="italic">jndi_location</span>
</pre></div>
<!-- class="sect3" -->
<a id="i1009538"></a>
<div id="JJPUB24193" class="sect3">
<h4 class="sect3">JDBC Driver Class for Database Connection</h4>
<p>The <code>-driver</code> option specifies the driver class that JPublisher uses for JDBC connections to the database. The syntax of this option is as follows:</p>
<pre>-driver=<span class="italic">driver_class_name</span>
</pre>
<p>The default setting is:</p>
<pre>-driver=oracle.jdbc.OracleDriver
</pre>
<p>This setting is appropriate for any Oracle JDBC driver.</p>
</div>
<!-- class="sect3" -->
<a id="i1010362"></a>
<div id="JJPUB24194" class="sect3">
<h4 class="sect3">Connection URL for Target Database</h4>
<p>You can use the <code>-url</code> option to specify the URL of the database to which you want to connect. The syntax of the <code>-url</code> option is as follows:</p>
<pre>-url=<span class="italic">URL</span>
</pre>
<p>The default setting is:</p>
<pre>-url=jdbc:oracle:oci:@
</pre>
<p>To specify the JDBC Thin driver, use a setting of the following form:</p>
<pre>-url=jdbc:oracle:thin:@<span class="italic">host</span>:<span class="italic">port</span>/<span class="italic">servicename</span>
</pre>
<p>In this syntax, <code><span class="codeinlineitalic">host</span></code> is the name of the host on which the database is running, <code><span class="codeinlineitalic">port</span></code> is the port number, and <code><span class="codeinlineitalic">servicename</span></code> is the name of the database service.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The use of system identifiers (SIDs) has been deprecated since Oracle Database 10<span class="italic">g</span>, but it is still supported for backward compatibility. Their use is of the form <code><span class="codeinlineitalic">host</span></code><code>:</code><code><span class="codeinlineitalic">port</span></code><code>:</code><code><span class="codeinlineitalic">sid</span></code>.
<p>For Oracle JDBC Oracle Call Interface (OCI) driver, use <code>oci</code> in the connection string in any new code. For backward compatibility, however, <code>oci8</code> is still accepted for Oracle8<span class="italic">i</span> drivers.</p>
</div>
</div>
<!-- class="sect3" -->
<a id="i1010379"></a>
<div id="JJPUB24195" class="sect3">
<h4 class="sect3">User Na<a id="sthref242"></a><a id="sthref243"></a><a id="sthref244"></a><a id="sthref245"></a>me and Password for Database Connection</h4>
<p>JPublisher requires the <code>-user</code> option, which specifies an Oracle user name and password, so that it can connect to the database. If you do not enter the <code>-user</code> option, then JPublisher prints an error message and stops execution.</p>
<p>The syntax of the <code>-user</code> option is as follows:</p>
<pre>-user=<span class="italic">username</span>/<span class="italic">password</span>
-u <span class="italic">username</span>/<span class="italic">password</span>
</pre>
<p>Both formats are equivalent. The second one is provided as a convenient command-line shortcut.</p>
<p>For example, the following command directs JPublisher to connect to the database with the user name <code>hr</code>:</p>
<pre>% jpub -user=hr -input=demoin -dir=demo -mapping=oracle -package=corp
Enter hr password: <span class="italic">password</span>
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHCAADI"></a>
<div id="JJPUB24196" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Optio<a id="sthref246"></a><a id="sthref247"></a>ns for Data Type Mappings</h3>
<p>The following options control the data type mappings that JPublisher uses to translate object types, collection types, object reference types, and PL/SQL packages to Java classes:</p>
<ul>
<li>
<p>The <code>-usertypes</code> option controls JPublisher behavior for user-defined types, in conjunction with the <code>-compatible</code> option for <code>oracle</code> mapping. Specifically, it controls whether JPublisher implements the Oracle <code>ORAData</code> interface or the standard <code>SQLData</code> interface in generated classes, and whether JPublisher generates code for collection and object reference types.</p>
</li>
<li>
<p>The <code>-numbertypes</code> option controls data type mappings for numeric types.</p>
</li>
<li>
<p>The <code>-lobtypes</code> option controls data type mappings for the <code>BLOB</code>, <code>CLOB</code>, and <code>BFILE</code> types.</p>
</li>
<li>
<p>The <code>-builtintypes</code> option controls data type mappings for non-numeric, non-LOB, and predefined SQL and PL/SQL types.</p>
</li>
</ul>
<p>These four options are known as the type-mapping options.</p>
<p>For an object type, JPublisher applies the mappings specified by the type-mapping options to the object attributes and the arguments and results of any methods included with the object. The mappings control the types that the generated accessor methods support. For example, they support the types the <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods return and the <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods take.</p>
<p>For a PL/SQL package, JPublisher applies the mappings to the arguments and results of the methods in the package. For a collection type, JPublisher applies the mappings to the element type of the collection.</p>
<p>In addition, there is a subsection here for the <code>-style</code> option, which you can use to specify Java-to-Java type mappings, typically to support Web services. This involves an extra JPublisher step. A SQL type is mapped to a Java type that is not supported by Web services, in the JPublisher-generated base class. Then this Java type is mapped to a Java type that <span class="italic">is</span> supported by Web services, in the JPublisher-generated user subclass.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1010336">&#34;JPublisher Styles and Style Files&#34;</a></div>
<div id="JJPUB24197" class="sect3"><a id="sthref248"></a>
<h4 class="sect3">Map<a id="sthref249"></a><a id="sthref250"></a><a id="sthref251"></a>pings for Built-In Types</h4>
<p>The <code>-builtintypes</code> option controls data type mappings for all the built-in data types except the LOB types, which are controlled by the <code>-lobtypes</code> option, and the different numeric types, which are controlled by the <code>-numbertypes</code> option. The syntax of the <code>-builtintypes</code> option is as follows:</p>
<pre>-builtintypes={<span class="bold">jdbc</span>|oracle}
</pre>
<p><a href="#g1019977">Table 6-2</a> lists the data types affected by the <code>-builtintypes</code> option and shows their Java type mappings for <code>-builtintypes=oracle</code> and <code>-builtintypes=jdbc</code>, which is the default.</p>
<div id="JJPUB24198" class="tblformal">
<p class="titleintable"><a id="sthref252"></a><a id="g1019977"></a>Table 6-2 Mappings for Types Affected by the -builtintypes Option</p>
<table class="cellalignment5694" title="Mappings for Types Affected by the -builtintypes Option " summary="This table lists the Oracle mapping type and the JDBC mapping type for each SQL and PL/SQL datatype relevant to the -builtintypes option." dir="ltr">
<thead>
<tr class="cellalignment5685">
<th class="cellalignment5692" id="r1c1-t24">SQL Data Type</th>
<th class="cellalignment5692" id="r1c2-t24">Oracle Mapping Type</th>
<th class="cellalignment5692" id="r1c3-t24">JDBC Mapping Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r2c1-t24" headers="r1c1-t24">
<p><code>CHAR</code>, <code>CHARACTER</code>, <code>LONG</code>, <code>STRING</code>, <code>VARCHAR</code>, <code>VARCHAR2</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t24 r1c2-t24">
<p><code>oracle.sql.CHAR</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t24 r1c3-t24">
<p><code>java.lang.String</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r3c1-t24" headers="r1c1-t24">
<p><code>RAW</code>, <code>LONG RAW</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t24 r1c2-t24">
<p><code>oracle.sql.RAW</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t24 r1c3-t24">
<p><code>byte[]</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r4c1-t24" headers="r1c1-t24">
<p><code>DATE</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t24 r1c2-t24">
<p><code>oracle.sql.DATE</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t24 r1c3-t24">
<p><code>java.sql.Timestamp</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r5c1-t24" headers="r1c1-t24">
<p><code>TIMESTAMP</code></p>
<p><code>TIMESTAMP WITH TZ</code></p>
<p><code>TIMESTAMP WITH LOCAL TZ</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t24 r1c2-t24">
<p><code>oracle.sql.TIMESTAMP</code></p>
<p><code>oracle.sql.TIMESTAMPTZ</code></p>
<p><code>oracle.sql.TIMESTAMPLTZ</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t24 r1c3-t24">
<p><code>java.sql.Timestamp</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<div id="JJPUB24199" class="sect3"><a id="sthref253"></a>
<h4 class="sect3">Map<a id="sthref254"></a><a id="sthref255"></a><a id="sthref256"></a>pings for LOB Types</h4>
<p>The <code>-lobtypes</code> option controls data type mappings for LOB types. The syntax of the <code>-lobtypes</code> option is as follows:</p>
<pre>-lobtypes={jdbc|<span class="bold">oracle</span>}
</pre>
<p><a href="#BJEBIBHC">Table 6-3</a> shows how these types are mapped for <code>-lobtypes=oracle</code>, which is the default, and for <code>-lobtypes=jdbc</code>.</p>
<div id="JJPUB24200" class="tblhruleformal">
<p class="titleintable"><a id="sthref257"></a><a id="BJEBIBHC"></a>Table 6-3 Mappings for Types Affected by the -lobtypes Option</p>
<table class="cellalignment5691" title="Mappings for Types Affected by the -lobtypes Option" summary="Mapping for LOB Types" dir="ltr">
<thead>
<tr class="cellalignment5685">
<th class="cellalignment5692" id="r1c1-t25">SQL Data Type</th>
<th class="cellalignment5692" id="r1c2-t25">Oracle Mapping Type</th>
<th class="cellalignment5692" id="r1c3-t25">JDBC Mapping Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r2c1-t25" headers="r1c1-t25">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t25 r1c2-t25">
<p><code>oracle.sql.CLOB</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t25 r1c3-t25">
<p><code>java.sql.Clob</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r3c1-t25" headers="r1c1-t25">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t25 r1c2-t25">
<p><code>oracle.sql.BLOB</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t25 r1c3-t25">
<p><code>java.sql.Blob</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r4c1-t25" headers="r1c1-t25">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t25 r1c2-t25">
<p><code>oracle.sql.BFILE</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t25 r1c3-t25">
<p><code>oracle.sql.BFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p><code>BFILE</code> is an Oracle-specific SQL type, so there is no standard <code>java.sql.Bfile</code> Java type.</p>
</li>
<li>
<p><code>NCLOB</code> is an Oracle-specific SQL type. It denotes an <code>NCHAR</code> form of use of a <code>CLOB</code> and is represented as an instance of <code>oracle.sql.NCLOB</code> in Java.</p>
</li>
<li>
<p>The <code>java.sql.Clob</code> and <code>java.sql.Blob</code> interfaces were introduced in the JDK 1.2 versions.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1010729"></a>
<div id="JJPUB24201" class="sect3">
<h4 class="sect3">Map<a id="sthref258"></a><a id="sthref259"></a><a id="sthref260"></a>pings for Numeric Types</h4>
<p>The <code>-numbertypes</code> option controls data type mappings for numeric SQL and PL/SQL types. The syntax of the <code>-numbertypes</code> option is as follows:</p>
<pre>-numbertypes={jdbc|<span class="bold">objectjdbc</span>|bigdecimal|oracle}
</pre>
<p>The following choices are available:</p>
<ul>
<li>
<p>In JDBC mapping, most numeric data types are mapped to Java primitive types, such as <code>int</code> and <code>float</code>, and <code>DECIMAL</code> and <code>NUMBER</code> are mapped to <code>java.math.BigDecimal</code>.</p>
</li>
<li>
<p>In Object JDBC mapping, which is the default, most numeric data types are mapped to Java wrapper classes, such as <code>java.lang.Integer</code> and <code>java.lang.Float</code>. <code>DECIMAL</code> and <code>NUMBER</code> are mapped to <code>java.math.BigDecimal</code>.</p>
</li>
<li>
<p>In <code>BigDec<a id="sthref261"></a>imal</code> mapping, all numeric data types are mapped to <code>java.math.BigDecimal</code>.</p>
</li>
<li>
<p>In Oracle mapping, all numeric data types are mapped to <code>oracle.sql.NUMBER</code>.</p>
</li>
</ul>
<p><a href="#g1020025">Table 6-4</a> lists the data types affected by the <code>-numbertypes</code> option and shows their Java type mappings for <code>-numbertypes=jdbc</code> and <code>-numbertypes=objectjdbc</code>, which is the default.</p>
<div id="JJPUB24202" class="tblformal">
<p class="titleintable"><a id="sthref262"></a><a id="g1020025"></a>Table 6-4 Mappings for Types Affe<a id="sthref263"></a><a id="sthref264"></a>cted by the -numbertypes Option</p>
<table class="cellalignment5694" title="Mappings for Types Affected by the -numbertypes Option " summary="This table lists the JDBC mapping type and the Object JDBC mapping type for each SQL and PL/SQL datatype relevant to the -numbertypes option." dir="ltr">
<thead>
<tr class="cellalignment5685">
<th class="cellalignment5692" id="r1c1-t27">SQL Data Type</th>
<th class="cellalignment5692" id="r1c2-t27">JDBC Mapping Type</th>
<th class="cellalignment5692" id="r1c3-t27">Object JDBC Mapping Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r2c1-t27" headers="r1c1-t27">
<p><code>BINARY_INTEGER</code>, <code>INT</code>, <code>INTEGER</code>, <code>NATURAL</code>, <code>NATURALN</code>, <code>PLS_INTEGER</code>, <code>POSITIVE</code>, <code>POSITIVEN</code>, <code>SIGNTYPE</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t27 r1c2-t27">
<p><code>int</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t27 r1c3-t27">
<p><code>java.lang.Integer</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r3c1-t27" headers="r1c1-t27">
<p><code>SMALLINT</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t27 r1c2-t27">
<p><code>int</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t27 r1c3-t27">
<p><code>java.lang.Integer</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r4c1-t27" headers="r1c1-t27">
<p><code>REAL</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t27 r1c2-t27">
<p><code>float</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t27 r1c3-t27">
<p><code>java.lang.Float</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r5c1-t27" headers="r1c1-t27">
<p><code>DOUBLE PRECISION</code>, <code>FLOAT</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t27 r1c2-t27">
<p><code>double</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t27 r1c3-t27">
<p><code>java.lang.Double</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r6c1-t27" headers="r1c1-t27">
<p><code>DEC</code>, <code>DECIMAL</code>, <code>NUMBER</code>, <code>NUMERIC</code></p>
</td>
<td class="cellalignment5693" headers="r6c1-t27 r1c2-t27">
<p><code>java.math.BigDecimal</code></p>
</td>
<td class="cellalignment5693" headers="r6c1-t27 r1c3-t27">
<p><code>java.math.BigDecimal</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<div id="JJPUB24203" class="sect3"><a id="sthref265"></a>
<h4 class="sect3">Map<a id="sthref266"></a><a id="sthref267"></a><a id="sthref268"></a>pings for User-Defined Types</h4>
<p>The <code>-usertypes</code> option controls whether JPublisher implements the Oracle <code>ORAData</code> interface or the standard <code>SQLData</code> interface in generated classes for user-defined types. The syntax of the <code>-usertypes</code> option is as follows:</p>
<pre>-usertypes={<span class="bold">oracle</span>|jdbc}
</pre>
<p>When <code>-usertypes=oracle</code>, which is the default, JPublisher generates <code>ORAData</code> classes for object, collection, and object reference types.</p>
<p>When <code>-usertypes=jdbc</code>, JPublisher generates <code>SQLData</code> classes for object types. JPublisher does not generate classes for collection or object reference types in this case. You must use <code>java.sql.Array</code> for all collection types and <code>java.sql.Ref</code> for all object reference types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code>-usertypes=jdbc</code> setting requires JDK 1.2 or later, because the <code>SQLData</code> interface is a JDBC 2.0 feature.</p>
</li>
<li>
<p>With certain settings of the <code>-compatible</code> option, a <code>-usertypes=oracle</code> setting results in classes that implement the deprecated <code>CustomDatum</code> interface instead of <code>ORAData</code>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1006122"></a>
<div id="JJPUB24204" class="sect3">
<h4 class="sect3">Map<a id="sthref269"></a><a id="sthref270"></a><a id="sthref271"></a>pings for All Types</h4>
<p>The <code>-mapping</code> option specifies mapping for all data types, so offers little flexibility between types. The syntax of the <code>-mapping</code> option is as follows:</p>
<pre>-mapping={jdbc|<span class="bold">objectjdbc</span>|bigdecimal|oracle}
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This option is deprecated in favor of the more specific type mapping options: <code>-usertypes</code>, <code>-numbertypes</code>, <code>-builtintypes</code>, and <code>-lobtypes</code>. However, it is still supported for backward compatibility.</div>
<p>The <code>-mapping=oracle</code> setting is equivalent to setting all the type mapping options to <code>oracle</code>. The other <code>-mapping</code> settings are equivalent to setting <code>-numbertypes</code> equal to the value of <code>-mapping</code> and setting the other type mapping options to their defaults. This is summarized in <a href="#g1020057">Table 6-5</a>.</p>
<div id="JJPUB24205" class="tblformal">
<p class="titleintable"><a id="sthref272"></a><a id="g1020057"></a>Table 6-5 Relation of -mapping Settings to Other Mapping Option Settings</p>
<table class="cellalignment5694" title="Relation of -mapping Settings to Other Mapping Option Settings" summary="For each setting of the deprecated -mapping option, this table shows the equivalent combination of settings for the -builtintypes, -numbertypes, -lobtypes, and -usertypes options." dir="ltr">
<thead>
<tr class="cellalignment5685">
<th class="cellalignment5692" id="r1c1-t30">-mapping Setting</th>
<th class="cellalignment5692" id="r1c2-t30">-builtintypes=</th>
<th class="cellalignment5692" id="r1c3-t30">-numbertypes=</th>
<th class="cellalignment5692" id="r1c4-t30">-lobtypes=</th>
<th class="cellalignment5692" id="r1c5-t30">-usertypes=</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r2c1-t30" headers="r1c1-t30">
<p><code>-mapping=oracle</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t30 r1c2-t30">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t30 r1c3-t30">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t30 r1c4-t30">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t30 r1c5-t30">
<p><code>oracle</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r3c1-t30" headers="r1c1-t30">
<p><code>-mapping=jdbc</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t30 r1c2-t30">
<p><code>jdbc</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t30 r1c3-t30">
<p><code>jdbc</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t30 r1c4-t30">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t30 r1c5-t30">
<p><code>oracle</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r4c1-t30" headers="r1c1-t30">
<p><code>-mapping=objectjdbc</code> (default)</p>
</td>
<td class="cellalignment5693" headers="r4c1-t30 r1c2-t30">
<p><code>jdbc</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t30 r1c3-t30">
<p><code>objectjdbc</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t30 r1c4-t30">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t30 r1c5-t30">
<p><code>oracle</code></p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r5c1-t30" headers="r1c1-t30">
<p><code>-mapping=bigdecimal</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t30 r1c2-t30">
<p><code>jdbc</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t30 r1c3-t30">
<p><code>bigdecimal</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t30 r1c4-t30">
<p><code>oracle</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t30 r1c5-t30">
<p><code>oracle</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Options are processed in the order in which they appear on the command line. Therefore, if the <code>-mapping</code> option precedes one of the specific type mapping options, <code>-builtintypes</code>, <code>-lobtypes</code>, <code>-numbertypes</code>, or <code>-usertypes</code>, then the specific type mapping option overrides the <code>-mapping</code> option for the relevant types. If the <code>-mapping</code> option follows one of the specific type mapping options, then the specific type mapping option is ignored.</div>
</div>
<!-- class="sect3" -->
<a id="CIHCHICI"></a>
<div id="JJPUB24206" class="sect3">
<h4 class="sect3">Sty<a id="sthref273"></a><a id="sthref274"></a><a id="sthref275"></a><a id="sthref276"></a>le File for Java-to-Java Type Mappings</h4>
<p>JPublisher style files allow you to specify Java-to-Java type mappings. One use for this is to ensure that generated classes can be used in Web services. You use the <code>-style</code> option to specify the name of a style file. You can use the <code>-style</code> option multiple times. The settings accumulate in order. The syntax of the <code>-style</code> option is as follows:</p>
<pre>-style=<span class="italic">stylename</span>
</pre>
<p>Typically, Oracle supplies the style files, but there may be situations in which you would edit or create your own. To use the Oracle style file for Web services in Oracle Database 12<span class="italic">c</span>, for example, use the following setting:</p>
<pre>-style=webservices10
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1010336">&#34;JPublisher Styles and Style Files&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIFGIB"></a>
<div id="JJPUB24207" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Type Map Optio<a id="sthref277"></a><a id="sthref278"></a>ns</h3>
<p>JPublisher code generation is influenced by entries in the JPublisher user type map or default type map, primarily to make signatures with PL/SQL types accessible to JDBC. A type map entry has one of the following formats:</p>
<pre>-<span class="italic">type_map_option</span>=<span class="italic">opaque_sql_type</span>:<span class="italic">java_type</span>
-<span class="italic">type_map_option</span>=<span class="italic">numeric_indexed_by_table</span>:<span class="italic">java_numeric_type</span><span class="bold">[</span><span class="italic">max_length</span><span class="bold">]</span> 
-<span class="italic">type_map_option</span>=<span class="italic">char_indexed_by_table</span>:<span class="italic">java_char_type</span><span class="bold">[</span><span class="italic">max_length</span><span class="bold">](</span><span class="italic">elem_size</span><span class="bold">)</span> 
-<span class="italic">type_map_option</span>=<span class="italic">plsql_type</span>:<span class="italic">java_type</span>:<span class="italic">sql_type</span>:<span class="italic">sql_to_plsql_func</span>:<span class="italic">plsql_to_sql_func</span>
</pre>
<p>In the type map syntax, <code><span class="codeinlineitalic">sql_to_plsql_func</span></code> and <code><span class="codeinlineitalic">plsql_to_sql_func</span></code> are for functions that convert between SQL and PL/SQL. Note that <code><span class="codeinlinebold">[</span></code>...<code><span class="codeinlinebold">]</span></code> and <code><span class="codeinlinebold">(</span></code>...<code><span class="codeinlinebold">)</span></code> are part of the syntax. Also note that some operating systems require you to quote command-line options that contain special characters.</p>
<p>The related options, which are discussed in alphabetic order in the following sections, are <code>-addtypemap</code>, <code>-adddefaulttypemap</code>, <code>-defaulttypemap</code>, and <code>-typemap</code>. The difference between <code>-addtypemap</code> and <code>-typemap</code> is that <code>-addtypemap</code> appends entries to the user type map, while <code>-typemap</code> replaces the existing user type map with the specified entries. Similarly, <code>-adddefaulttypemap</code> appends entries to the default type map, while <code>-defaulttypemap</code> replaces the existing default type map with the specified entries.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1005908">&#34;Type Mapping Support for OPAQUE Types&#34;</a>, <a href="datamap.htm#i1005939">&#34;Type Mapping Support for Scalar Index-by Tables&#34;</a>, and <a href="datamap.htm#i1006009">&#34;Type Mapping Support Through PL/SQL Conversion Functions&#34;</a></div>
<p>Here are some sample type map settings, from a properties file that uses the <code>-defaulttypemap</code> and <code>-adddefaulttypemap</code> options:</p>
<pre>jpub.defaulttypemap=SYS.XMLTYPE:oracle.xdb.XMLType
jpub.adddefaulttypemap=BOOLEAN:boolean:INTEGER:
SYS.SQLJUTL.INT2BOOL:SYS.SQLJUTL.BOOL2INT
jpub.adddefaulttypemap=INTERVAL DAY TO SECOND:String:CHAR:
SYS.SQLJUTL.CHAR2IDS:SYS.SQLJUTL.IDS2CHAR
jpub.adddefaulttypemap=INTERVAL YEAR TO MONTH:String:CHAR:
SYS.SQLJUTL.CHAR2IYM:SYS.SQLJUTL.IYM2CHAR
</pre>
<p>Be aware that you must avoid conflicts between the default type map and user type map.</p>
<div id="JJPUB24208" class="sect3"><a id="sthref279"></a>
<h4 class="sect3">Addi<a id="sthref280"></a><a id="sthref281"></a><a id="sthref282"></a>ng an Entry to the Default Type Map</h4>
<p>Use the <code>-adddefaulttypemap</code> option to append an entry or a comma-delimited list of entries to the JPublisher default type map. In addition, JPublisher uses this option internally. The syntax of this option is:</p>
<pre>-adddefaulttypemap=<span class="italic">list_of_typemap_entries</span>
</pre></div>
<!-- class="sect3" -->
<a id="i1010260"></a>
<div id="JJPUB24209" class="sect3">
<h4 class="sect3">Additio<a id="sthref283"></a><a id="sthref284"></a><a id="sthref285"></a>nal Entry to the User Type Map</h4>
<p>Use the <code>-addtypemap</code> option to append an entry or a comma-delimited list of entries to the JPublisher user type map. The syntax of this option is:</p>
<pre>-addtypemap=<span class="italic">list_of_typemap_entries</span>
</pre></div>
<!-- class="sect3" -->
<div id="JJPUB24210" class="sect3"><a id="sthref286"></a>
<h4 class="sect3">Defa<a id="sthref287"></a><a id="sthref288"></a><a id="sthref289"></a>ult Type Map for JPublisher</h4>
<p>JPublisher uses the <code>-defaulttypemap</code> option internally to set up predefined type map entries in the default type map. The syntax of this option is:</p>
<pre>-defaulttypemap=<span class="italic">list_of_typemap_entries</span>
</pre>
<p>The difference between the <code>-adddefaulttypemap</code> option and the <code>-defaulttypemap</code> option is that <code>-adddefaulttypemap</code> appends entries to the default type map, while <code>-defaulttypemap</code> replaces the existing default type map with the specified entries. To clear the default type map, use the following setting:</p>
<pre>-defaulttypemap=
</pre>
<p>You may want to do this to avoid conflicts between the default type map and the user type map, for example.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1011295">&#34;JPublisher User Type Map and Default Type Map&#34;</a> for additional information, including a caution about conflicts between the type maps.</div>
</div>
<!-- class="sect3" -->
<a id="i1010210"></a>
<div id="JJPUB24211" class="sect3">
<h4 class="sect3">Replac<a id="sthref290"></a><a id="sthref291"></a><a id="sthref292"></a>ement of the JPublisher Type Map</h4>
<p>Use the <code>-typemap</code> option to specify an entry or a comma-delimited list of entries to set up the user type map. The syntax of this option is:</p>
<pre>-typemap=<span class="italic">list_of_typemap_entries</span>
</pre>
<p>The difference between the <code>-typemap</code> option and the <code>-addtypemap</code> option is that <code>-typemap</code> replaces the existing user type map with the specified entries and <code>-addtypemap</code> appends entries to the user type map. To clear the user type map, use the following setting.</p>
<pre>-typemap=
</pre>
<p>You may want to do this to avoid conflicts between the default type map and the user type map, for example.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010523"></a>
<div id="JJPUB24212" class="sect2">
<h3 class="sect2">Java Code-Ge<a id="sthref293"></a><a id="sthref294"></a>neration Options</h3>
<p>This section documents options that specify JPublisher characteristics and behavior for Java code generation. For example, there are options to accomplish the following:</p>
<ul>
<li>
<p>Filter generated code according to parameter modes or parameter types</p>
</li>
<li>
<p>Ensure that generated code conforms to the JavaBeans specification</p>
</li>
<li>
<p>Specify naming patterns</p>
</li>
<li>
<p>Specify how stubs are generated for user subclasses</p>
</li>
<li>
<p>Specify whether generated code is serializable</p>
</li>
</ul>
<p>The following options are described in alphabetical order: <code>-access</code>, <code>-case</code>, <code>-codegen,</code> <code>-filtermodes</code>, <code>-filtertypes</code>, <code>-generatebean</code>, <code>-genpattern</code>, <code>-gensubclass</code>, <code>-methods</code>, <code>-omit_schema_names</code>, <code>-outarguments</code>, <code>-package</code>, <code>-serializable</code>, and <code>-tostring</code>.</p>
<div id="JJPUB24213" class="sect3"><a id="sthref295"></a>
<h4 class="sect3">Metho<a id="sthref296"></a><a id="sthref297"></a><a id="sthref298"></a>d Access</h4>
<p>The <code>-access</code> option determines the access modifier that JPublisher includes in generated constructors, attribute setter and getter methods, member methods on object wrapper classes, and methods on PL/SQL packages. The syntax of this option is:</p>
<pre>-access={<span class="bold">public</span>|protected|package}
</pre>
<p>JPublisher uses the possible option settings as follows:</p>
<ul>
<li>
<p><code>public</code></p>
<p>Methods are generated with the <code>public</code> access modifier. This is the default option setting.</p>
</li>
<li>
<p><code>protected</code></p>
<p>Methods are generated with the <code>protected</code> access modifier.</p>
</li>
<li>
<p><code>package</code></p>
<p>The access modifier is omitted, so generated methods are local to the package.</p>
</li>
</ul>
<p>You may want to use a setting of <code>-access=protected</code> or <code>-access=package</code> if you want to control the usage of the generated JPublisher wrapper classes. For example, when you provide customized versions of the wrapper classes as subclasses of the JPublisher-generated classes, but do not want to provide access to the generated superclasses.</p>
<p>You can specify the <code>-access</code> option on the command line or in a properties file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Wrapper classes for object references and <code>VARRAY</code> and nested table types are not affected by the value of the <code>-access</code> option.</div>
</div>
<!-- class="sect3" -->
<a id="i1009279"></a>
<div id="JJPUB24214" class="sect3">
<h4 class="sect3">Case of Ja<a id="sthref299"></a><a id="sthref300"></a>va Identifiers</h4>
<p>For class or attribute names that you do not specify in an <code>INPUT</code> file or on the command line, the <code>-case</code> option affects the case of Java identifiers that JPublisher generates, including class names, method names, attribute names embedded within <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> and <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> method names, and arguments of generated method names. The syntax of this option is:</p>
<pre>-case={<span class="bold">mixed</span>|same|lower|upper}
</pre>
<p><a href="#g1020107">Table 6-6</a> describes the possible values for the <code>-case</code> option.</p>
<div id="JJPUB24215" class="tblformal">
<p class="titleintable"><a id="sthref301"></a><a id="g1020107"></a>Table 6-6 Values for the -case Option</p>
<table class="cellalignment5694" title="Values for the -case Option " summary="Descriptions of the results of each possible setting of the -case option." dir="ltr">
<thead>
<tr class="cellalignment5685">
<th class="cellalignment5692" id="r1c1-t36">-case Option Value</th>
<th class="cellalignment5692" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r2c1-t36" headers="r1c1-t36">
<p><code>mixed</code> (default)</p>
</td>
<td class="cellalignment5693" headers="r2c1-t36 r1c2-t36">
<p>The first letter of every word unit of a class name or of every word unit after the first word unit of a method name is in uppercase. All other characters are in lowercase. An underscore (_), a dollar sign ($), or any character illegal in Java constitutes a word unit boundary and is removed without warning. A word unit boundary also occurs after <code>get</code> or <code>set</code> in a method name.</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r3c1-t36" headers="r1c1-t36">
<p><code>same</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t36 r1c2-t36">
<p>JPublisher does not change the case of letters from the way they are represented in the database. Underscores and dollar signs are retained. JPublisher removes any other character illegal in Java and issues a warning message.</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r4c1-t36" headers="r1c1-t36">
<p><code>upper</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t36 r1c2-t36">
<p>JPublisher converts lowercase letters to uppercase and retains underscores and dollar signs. It removes any other character illegal in Java and issues a warning message.</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r5c1-t36" headers="r1c1-t36">
<p><code>lower</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t36 r1c2-t36">
<p>JPublisher converts uppercase letters to lowercase and retains underscores and dollar signs. It removes any other character illegal in Java and issues a warning message.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>For class or attribute names that you specify through JPublisher options or the <code>INPUT</code> file, JPublisher retains the case of the letters in the specified name and overrides the <code>-case</code> option.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHBBFC"></a>
<div id="JJPUB24216" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Code Generation Type</h4>
<p>The <code>-codegen</code> option determines whether the generated Java code uses SQLJ runtime or JDBC runtime. The syntax of this option is:</p>
<pre>-codegen=jdbc|sqlj
</pre>
<p>The default value is <code>sqlj.</code></p>
<p>The setting <code>-codegen=jdbc</code> indicates that JPublisher generates Java code using JDBC runtime. Generation of Java code purely relying on JDBC runtime was introduced in JPublisher 11<span class="italic">g</span> release. The setting <code>-codegen=sqlj</code> indicates that JPublisher generates Java code using SQLJ runtime. This is the default behavior of JPublisher 12<span class="italic">c</span> release. All the earlier JPublisher releases use only SQLJ runtime to generate Java code.</p>
</div>
<!-- class="sect3" -->
<a id="i1012471"></a>
<div id="JJPUB24217" class="sect3">
<h4 class="sect3">Meth<a id="sthref302"></a><a id="sthref303"></a>od Filte<a id="sthref304"></a>ring According to Parameter Modes</h4>
<p>In some cases, particularly for generating code for Web services, not all parameter modes are supported in method signatures or attributes for the target usage of your code. The <code>-filtermodes</code> option enables you to filter generated code according to parameter modes. The syntax of this option is:</p>
<pre>-filtermodes=<span class="italic">list_of_modes_to_filter_out_or_filter_in</span>
</pre>
<p>You can specify the following for the <code>-filtermodes</code> option:</p>
<ul>
<li>
<p><code>in</code></p>
</li>
<li>
<p><code>out</code></p>
</li>
<li>
<p><code>inout</code></p>
</li>
<li>
<p><code>return</code></p>
</li>
</ul>
<p>Start the option setting with a <code>1</code> to include all possibilities by default, which would mean no filtering. Then list specific modes or types each followed by a minus sign (<code>-</code>), indicating that the mode or type should be excluded. Alternatively, start with a <code>0</code> to include no possibilities by default, which would mean total filtering, then list specific modes or types each followed by a plus sign (<code>+</code>), indicating that the mode or type should be allowed.</p>
<p>The following examples would have the same result, allowing only methods that have parameters of the <code>in</code> or <code>return</code> mode. Separate the entries by commas.</p>
<pre>-filtermodes=0,in+,return+

-filtermodes=1,out-,inout-
</pre></div>
<!-- class="sect3" -->
<a id="i1012472"></a>
<div id="JJPUB24218" class="sect3">
<h4 class="sect3">Meth<a id="sthref305"></a><a id="sthref306"></a>od Filte<a id="sthref307"></a>ring According to Parameter Types</h4>
<p>In some cases, particularly for generating code for Web services, not all parameter types are supported in method signatures or attributes for the target usage of your code. The <code>-filtertypes</code> option enables you to filter generated code according to parameter types. The syntax of this option is:</p>
<pre>-filtertypes=<span class="italic">list_of_types_to_filter_out_or_filter_in</span>
</pre>
<p>You can specify the following settings for the <code>-filtertypes</code> option:</p>
<ul>
<li>
<p>Any qualified Java type name</p>
<p>Specify package and class, such as <code>java.sql.SQLData</code>, <code>oracle.sql.ORAData</code>.</p>
</li>
<li>
<p><code>.ORADATA</code></p>
<p>This setting indicates any <code>ORAData</code> or <code>SQLData</code> implementations.</p>
</li>
<li>
<p><code>.STRUCT</code>, <code>.ARRAY</code>, <code>.OPAQUE</code>, <code>.REF</code></p>
<p>Each of these settings indicates any types that implement <code>ORAData</code> or <code>SQLData</code> with the corresponding <code>_SQL_TYPECODE</code> specification.</p>
</li>
<li>
<p><code>.CURSOR</code></p>
<p>This setting indicates any SQLJ iterator types and <code>java.sql.ResultSet</code>.</p>
</li>
<li>
<p><code>.INDEXBY</code></p>
<p>This setting indicates any indexed-by table types.</p>
</li>
<li>
<p><code>.ORACLESQL</code></p>
<p>This setting indicates all <code>oracle.sql.</code><code><span class="codeinlineitalic">XXX</span></code> types.</p>
</li>
</ul>
<p>Start the option setting with a <code>1</code> to include all possibilities by default, indicating no filtering, then list specific modes or types each followed by a minus sign (<code>-</code>), indicating that the mode or type should be excluded. Alternatively, start with a <code>0</code> to include no possibilities by default, indicating total filtering, then list specific modes or types each followed by a plus sign (<code>+</code>), indicating that the mode or type should be allowed.</p>
<p>This first example filters out only <code>.ORADATA</code> and <code>.ORACLESQL</code>. The second example filters everything except <code>.CURSOR</code> and <code>.INDEXBY</code>:</p>
<pre>-filtertypes=1,.ORADATA-,.ORACLESQL-

-filtertypes=0,.CURSOR+,.INDEXBY+
</pre>
<p>The <code>.STRUCT</code>, <code>.ARRAY</code>, <code>.OPAQUE</code>, and <code>.REF</code> settings are subcategories of the <code>.ORADATA</code> setting. Therefore, you can have specifications, such as the following, which filters out all <code>ORAData</code> and <code>SQLData</code> types except those with a typecode of <code>STRUCT</code>:</p>
<pre>-filtertypes=1,.ORADATA-,.STRUCT+
</pre>
<p>Alternatively, to allow <code>ORAData</code> or <code>SQLData</code> types in general, with the exception of those with a typecode of <code>ARRAY</code> or <code>REF</code>:</p>
<pre>-filtertypes=0,.ORADATA+,.ARRAY-,.REF-
</pre></div>
<!-- class="sect3" -->
<a id="i1012629"></a>
<div id="JJPUB24219" class="sect3">
<h4 class="sect3">Code Gen<a id="sthref308"></a><a id="sthref309"></a><a id="sthref310"></a>eration Adhe<a id="sthref311"></a><a id="sthref312"></a>rence to the JavaBeans Specification</h4>
<p>The <code>-generatebean</code> option is a flag that you can use to ensure that generated classes follow the JavaBeans specification. The syntax of this option is:</p>
<pre>-generatebean={true|<span class="bold">false</span>}
</pre>
<p>The default setting is <code>-generatebean=false</code>. With the <code>-generatebean=true</code> setting, some generated methods are renamed so that they are not assumed to be JavaBean property getter or setter methods. This is accomplished by prefixing the method names with an underscore (<code>_</code>). For example, for classes generated from SQL table types, <code>VARRAY</code>, or indexed-by table, method names are changed as follows.</p>
<p>Method names are changed from:</p>
<pre>public int getBaseType() throws SQLException;
public int getBaseTypeName() throws SQLException;
public int getDescriptor() throws SQLException;
</pre>
<p>to:</p>
<pre>public int _getBaseType() throws SQLException;
public String _getBaseTypeName() throws SQLException; 
public ArrayDecscriptor _getDescriptor() throws SQLException; 
</pre>
<p>The changes in return types are necessary because the JavaBeans specification says that a getter method must return a bean property, but <code>getBaseType()</code>, <code>getBaseTypeName()</code>, and <code>getDescriptor()</code> do <span class="italic">not</span> return a bean property.</p>
</div>
<!-- class="sect3" -->
<a id="i1013163"></a>
<div id="JJPUB24220" class="sect3">
<h4 class="sect3">Class a<a id="sthref313"></a><a id="sthref314"></a>nd Interface Naming Pattern</h4>
<p>It is often desirable to follow a certain naming pattern for Java classes, user subclasses, and interfaces generated for user-defined SQL types or packages. The <code>-genpattern</code> option, which you can use in conjunction with the <code>-sql</code> or <code>-sqlstatement</code> option, enables you to define such patterns conveniently and generically. The syntax of this option is:</p>
<pre>-genpattern=<span class="italic">pattern_specifications</span>
</pre>
<p>Consider the following explicit command-line options:</p>
<pre>-sql=PERSON:PersonBase:PersonUser#Person
-sql=STUDENT:StudentBase:StudentUser#Student
-sql=GRAD_STUDENT:GradStudentBase:GradStudentUser#GradStudent
</pre>
<p>The following pair of options is equivalent to the preceding set of options:</p>
<pre>-genpattern=%1Base:%1User#%1
-sql=PERSON,STUDENT,GRAD_STUDENT
</pre>
<p>By definition, <code>%1</code> refers to the default base names that JPublisher would create for each SQL type. By default, JPublisher would create the <code>Person</code> Java type for the <code>PERSON</code> SQL type, the <code>Student</code> Java type for the <code>STUDENT</code> SQL type, and the <code>GradStudent</code> Java type for the <code>GRAD_STUDENT</code> SQL type. So <code>%1Base</code> becomes <code>PersonBase</code>, <code>StudentBase</code>, and <code>GradStudentBase</code>, respectively. Similar results are produced for <code>%1User</code>.</p>
<p>If the <code>-sql</code> option specifies the output names, then <code>%2</code>, by definition, refers to the specified names. For example, the following pair of options has the same effect as the earlier pair:</p>
<pre>-genpattern=%2Base:%2User#%2
-sql=PERSON:Person,STUDENT:Student,GRAD_STUDENT:GradStudent
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This is the pattern expected for Web services. Specify an output name and use that as the interface name, and append <code>Base</code> for the generated class and <code>User</code> for the user subclass.</div>
<p>The following example combines the <code>-genpattern</code> option with the <code>-sqlstatement</code> option:</p>
<pre>-sqlstatement.class=SqlStmts -genpattern=%2Base:%2User:%2
</pre>
<p>These settings are equivalent to the following:</p>
<pre>-sqlstatement.class=SqlStmtsBase:SqlStmtsUser#SqlStmts
</pre></div>
<!-- class="sect3" -->
<div id="JJPUB24221" class="sect3"><a id="sthref315"></a>
<h4 class="sect3">Gene<a id="sthref316"></a><a id="sthref317"></a><a id="sthref318"></a>ration of User Subclasses</h4>
<p>The value of the <code>-gensubclass</code> option determines whether JPublisher generates initial source files for user-provided subclasses and, if so, what format these subclasses should have. The syntax of this option is:</p>
<pre>-gensubclass={<span class="bold">true</span>|false|force|call-super}
</pre>
<p>For <code>-gensubclass=true</code>, which is the default, JPublisher generates code for the subclass only if it finds that no source file is present for the user subclass. The <code>-gensubclass=false</code> setting results in JPublisher not generating any code for user subclasses.</p>
<p>For <code>-gensubclass=force</code>, JPublisher always generates code for user subclasses. It overwrites any existing content in the corresponding <code>.java</code> and <code>.class</code> files if they already exist. Use this setting with caution.</p>
<p>The setting <code>-gensubclass=call-super</code> is equivalent to <code>-gensubclass=true</code>, except that JPublisher generates slightly different code. By default, JPublisher generates only constructors and methods necessary for implementing an interface, for example, the <code>ORAData</code> interface. JPublisher indicates how superclass methods or attribute setter and getter methods can be called, but places this code inside comments. With the <code>call-super</code> setting, all getters, setters, and other methods are generated.</p>
<p>The idea is that you can specify this setting if you use Java development tools based on class introspection. Only methods relating to SQL object attributes and SQL object methods are of interest, and JPublisher implementation details remain hidden. In this case you can point the tool at the generated user subclass.</p>
<p>You can specify the <code>-gensubclass</code> option on the command line or in a properties file.</p>
</div>
<!-- class="sect3" -->
<a id="i1009664"></a>
<div id="JJPUB24222" class="sect3">
<h4 class="sect3">Gen<a id="sthref319"></a><a id="sthref320"></a><a id="sthref321"></a>eration of Package Classes and Wrapper Methods</h4>
<p>The <code>-methods</code> option determines whether:</p>
<ul>
<li>
<p>JPublisher generates wrapper methods for methods, or stored procedures in SQL object types and PL/SQL packages.</p>
</li>
<li>
<p>Overloaded method names are allowed.</p>
</li>
<li>
<p>Methods will attempt to reestablish a JDBC connection if an <code>SQLException</code> is caught.</p>
</li>
</ul>
<p>The syntax for the <code>-methods</code> option is:</p>
<pre>-methods={<span class="bold">all</span>|none|named|always,<span class="bold">overload</span>|unique,<span class="bold">noretry</span>|retry}
</pre>
<p>For <code>-methods=all</code>, which is the default setting among the first group of settings, JPublisher generates wrapper methods for all the methods in the SQL object types and PL/SQL packages it processes. This results in generation of a SQLJ class if the underlying SQL object or package actually defines methods and if not, a non-SQLJ class. Prior to Oracle Database 10<span class="italic">g</span>, SQLJ classes were always generated for the <code>all</code> setting.</p>
<p>For <code>-methods=none</code>, JPublisher does not generate wrapper methods. In this case, JPublisher does not generate classes for PL/SQL packages, because they would not be useful without wrapper methods.</p>
<p>For <code>-methods=named</code>, JPublisher generates wrapper methods only for the methods explicitly named in the <code>INPUT</code> file.</p>
<p>The <code>-methods=always</code> setting also results in wrapper methods being generated. However, for backward compatibility with Oracle8<span class="italic">i</span> and Oracle9<span class="italic">i</span> JPublisher versions, this setting always results in SQLJ classes being generated for all SQL object types, regardless of whether the types define methods.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For backward compatibility, JPublisher also supports the setting <code>true</code> as equivalent to <code>all</code>, the setting <code>false</code> as equivalent to <code>none</code>, and the setting <code>some</code> as equivalent to <code>named</code>.</div>
<p>Among the <code>overload</code> and <code>unique</code> settings, <code>-methods=overload</code> is the default and specifies that method names in the generated code can be overloaded, such as the following:</p>
<pre>int foo(int);
int foo(String);
</pre>
<p>Alternatively, the <code>-methods=unique</code> setting specifies that all method names must be unique. This is required for Web services. Consider the following functions:</p>
<pre>function foo (a VARCHAR2(40)) return VARCHAR2;
function foo ( x int, y int) return int;
</pre>
<p>With the default <code>-methods=overload</code> setting, these functions are published as follows:</p>
<pre>String foo(String a);
java.math.BigDecimal foo(java.math.BigDecimal x, java.math.BigDecimal y);
</pre>
<p>With the <code>-methods=unique</code> setting, these functions are published using a method-renaming mechanism based on the first letter of the return type and argument types, as shown in the following example:</p>
<pre>String foo(String a);
java.math.BigDecimal fooBBB(java.math.BigDecimal x, java.math.BigDecimal y);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="genclint.htm#i1009182">&#34;Translation of Overloaded Methods&#34;</a></div>
<p>With the <code>-methods=retry</code> setting, JPublisher generates constructors with <code>DataSource</code> arguments and extra code for each method published. A JDBC operation in a method is enclosed within a <code>try...catch</code> block. If an <code>SQLException</code> is raised when the method is processed, then the extra code will attempt to reestablish the JDBC connection and process the SQL operation again. If the attempt to reconnect fails, then the original <code>SQLException</code> is thrown again.</p>
<p>For <code>-methods=retry</code>, JPublisher generates code different from that generated for <code>-methods=noretry</code>, in two respects:</p>
<ul>
<li>
<p>An additional constructor, which takes a <code>DataSource</code> object as parameter, is generated. The <code>DataSource</code> object is used to get a new connection at operation invocation time.</p>
</li>
<li>
<p>A new JDBC connection is requested if an <code>SQLException</code> is thrown.</p>
</li>
</ul>
<p>The <code>-methods=retry</code> setting takes effect only for PL/SQL stored procedures, SQL statements, AQ, and Web services call-ins for Java classes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The use of <code>oracle.jdbc.pool.OracleDataSource</code> requires JDK 1.3 or later.</div>
<p>To specify a setting of <code>all</code>, <code>none</code>, <code>named</code>, or <code>always</code> at the same time as you specify a setting of <code>overload</code> or <code>unique</code> and a setting for <code>retry</code> or <code>noretry</code>, use a comma to separate the settings. This is shown in the following example:</p>
<pre>-methods=always,unique,retry
</pre>
<p>You can specify the <code>-methods</code> option on the command line or in a properties file.</p>
</div>
<!-- class="sect3" -->
<a id="i1009676"></a>
<div id="JJPUB24223" class="sect3">
<h4 class="sect3">Omission of Sche<a id="sthref322"></a><a id="sthref323"></a><a id="sthref324"></a>ma Name from Name References</h4>
<p>In publishing user-defined SQL types, such as objects and collections, when JPublisher references the type names in Java wrapper classes, it generally qualifies the type names with the database schema name, such as <code>HR.EMPLOYEE</code> for the <code>EMPLOYEE</code> type in the <code>HR</code> schema.</p>
<p>However, by specifying the <code>-omit_schema_names</code> option, you instruct JPublisher <span class="italic">not</span> to qualify SQL type names with schema names. The syntax of this option is:</p>
<pre>-omit_schema_names
</pre>
<p>When this option is specified, names are qualified with a schema name only under the following circumstances:</p>
<ul>
<li>
<p>You declare the user-defined SQL type in a schema other than the one to which JPublisher is connected. A type from another schema always requires a schema name to identify it.</p>
</li>
<li>
<p>You declare the user-defined SQL type with a schema name on the command line or in an <code>INPUT</code> file. The use of a schema name with the type name on the command line or <code>INPUT</code> file overrides the <code>-omit_schema_names</code> option.</p>
</li>
</ul>
<p>Omitting the schema name makes it possible for you to use classes generated by JPublisher when you connect to a schema other than the one used when JPublisher is invoked, as long as the SQL types that you use are declared identically in the two schemas.</p>
<p><code>ORAData</code> and <code>SQLData</code> classes generated by JPublisher include a <code>static final String</code> field that names the user-defined SQL type matching the generated class. When the code generated by JPublisher is processed, the SQL type name in the generated code is used to locate the SQL type in the database. If the SQL type name does not include the schema name, then the type is looked up in the schema associated with the current connection when the code generated by JPublisher is processed. If the SQL type name includes the schema name, then the type is looked up in that schema.</p>
<p>When the <code>-omit_schema_names</code> option is enabled, JPublisher generates the following code in the Java wrapper class for a SQL object type and similar code to wrap a collection type:</p>
<pre> public Datum toDatum(Connection c) throws SQLException
    {
      if (__schemaName != null)
      {
        return _struct.toDatum(c, __schemaName + &#34;.&#34; + _SQL_NAME);
      }
      return _struct.toDatum(c, typeName);
    }
    private String __schemaName = null;
    public void __setSchemaName(String schemaName) { __schemaName = schemaName; }
  }
  
</pre>
<p>The <code>__setSchemaName()</code> method enables you to explicitly set the schema name at run time so that SQL type names can be qualified by schema even if JPublisher was run with the <code>-omit_schema_names</code> option enabled. Being qualified by schema is necessary if a SQL type needs to be accessed from another schema.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Although this option acts as a boolean option, you cannot specify <code>-omit_schema_names=true</code> or <code>-omit_schema_names=false</code>. Specify <code>-omit_schema_names</code> to enable it, and do nothing to leave it disabled.</div>
</div>
<!-- class="sect3" -->
<a id="i1016801"></a>
<div id="JJPUB24224" class="sect3">
<h4 class="sect3">Holde<a id="sthref325"></a><a id="sthref326"></a><a id="sthref327"></a>r Types for Output Arguments</h4>
<p>There are no <code>OUT</code> or <code>IN OUT</code> designations in Java, but values can be returned through holders. In JPublisher, you can specify one of three alternatives for holders:</p>
<ul>
<li>
<p>Arrays, which is the default</p>
</li>
<li>
<p>JAX-RPC holder types</p>
</li>
<li>
<p>Function returns</p>
</li>
</ul>
<p>The <code>-outarguments</code> option enables you to specify the mechanism to use, through a setting of <code>array</code>, <code>holder</code>, or <code>return</code>, respectively. This feature is particularly useful for Web services. The syntax of this option is:</p>
<pre>-outarguments={<span class="bold">array</span>|holder|return}
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="genclint.htm#i1009229">&#34;Treatment of Output Parameters&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="i1018414"></a>
<div id="JJPUB24225" class="sect3">
<h4 class="sect3">Name for Ge<a id="sthref328"></a><a id="sthref329"></a>nerated Java Package</h4>
<p>The <code>-package</code> option specifies the name of the Java package that JPublisher generates. The name appears in a package declaration in each generated class. The syntax for this option is:</p>
<pre>-package=<span class="italic">package_name</span>
</pre>
<p>If you use the <code>-dir</code> and <code>-d</code> options, the directory structure in which JPublisher places the generated files reflects the package name as well as the <code>-dir</code> and <code>-d</code> settings.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If there are conflicting package settings between a <code>-package</code> option setting and a package setting in the <code>INPUT</code> file, the precedence depends on the order in which the <code>-input</code> and <code>-package</code> options appear on the command line. The <code>-package</code> setting takes precedence if that option is after the <code>-input</code> option. Otherwise, the <code>INPUT</code> file setting takes precedence.</p>
</li>
<li>
<p>If you do not use the <code>-dir</code> and <code>-d</code> options, or if you explicitly give them empty settings, then JPublisher places all generated files directly in the current directory, with no package hierarchy, regardless of the <code>-package</code> setting.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHJCACI">&#34;Output Directories for Generated Source and Class Files&#34;</a></div>
<p><a id="JJPUB24226"></a><span class="subhead3">Example 1 &nbsp;</span>Consider the following command:</p>
<pre>% jpub -dir=/a/b -d=/a/b -package=c.d -sql=PERSON:Person ...
</pre>
<p>JPublisher generates the files <code>/a/b/c/d/Person.java</code> and <code>/a/b/c/d/Person.class</code>.</p>
<p>In addition, the <code>Person</code> class includes the following package declaration:</p>
<pre>package c.d;
</pre>
<p><a id="JJPUB24227"></a><span class="subhead3">Example 2&nbsp;</span>Now consider the following command:</p>
<pre>% jpub -dir=/a/b -d=/a/b -package=c.d -sql=PERSON:Person -input=myinputfile
</pre>
<p>Assume that <code>myinputfile</code> includes the following:</p>
<pre>SQL PERSON AS e.f.Person
</pre>
<p>In this case, the package information in the <code>INPUT</code> file overrides the <code>-package</code> option on the command line. JPublisher generates the files <code>/a/b/e/f/Person.java</code> and <code>/a/b/e/f/Person.class</code>, with the <code>Person</code> class including the following package declaration:</p>
<pre>package e.f;
</pre>
<p>If you do not specify a package name, then JPublisher does not generate any package declaration. The output <code>.java</code> files are placed directly into the directory specified by the <code>-dir</code> option or into the current directory by default. The output <code>.class</code> files are placed directly into the directory specified by the <code>-d</code> option or into the current directory.</p>
<p>Sometimes JPublisher translates a type that you do not explicitly request, because the type is required by another type that is translated. For example, it may be an attribute of the requested type. In this case, the <code>.java</code> and <code>.class</code> files declaring the required type are also placed into the package specified on the command line, in a properties file or the <code>INPUT</code> file.</p>
<p>By contrast, JPublisher never translates packages or stored procedures that you do not explicitly request, because packages or stored procedures are never strictly required by SQL types or by other packages or stored procedures.</p>
</div>
<!-- class="sect3" -->
<a id="i1009870"></a>
<div id="JJPUB24228" class="sect3">
<h4 class="sect3">Serializ<a id="sthref330"></a><a id="sthref331"></a><a id="sthref332"></a>ability of Generated Object Wrapper Classes</h4>
<p>The <code>-serializable</code> option specifies whether the Java classes that JPublisher generates for SQL object types implement the <code>java.io.Serializable</code> interface. The default setting is <code>-serializable=false</code>. The syntax for this option is:</p>
<pre>-serializable={true|<span class="bold">false</span>}
</pre>
<p>Please note the following if you choose to set <code>-serializable=true</code>:</p>
<ul>
<li>
<p>Not all object attributes are serializable. In particular, none of Oracle LOB types, such as <code>oracle.sql.BLOB</code>, <code>oracle.sql.CLOB</code>, or <code>oracle.sql.BFILE</code>, can be serialized. Whenever you serialize objects with such attributes, the corresponding attribute values are initialized to <code>null</code> after deserialization.</p>
</li>
<li>
<p>If you use object attributes of type <code>java.sql.Blob</code> or <code>java.sql.Clob</code>, then the code generated by JPublisher requires that the Oracle JDBC rowset implementation be available in the classpath. This is provided in the <code>ocrs12.jar</code> library at <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/jdbc/lib</code>. In this case, the underlying value of <code>Clob</code> and <code>Blob</code> objects is materialized, serialized, and subsequently retrieved.</p>
</li>
<li>
<p>Whenever you deserialize objects containing attributes that are object references, the underlying connection is lost, and you cannot issue <code>setValue()</code> or <code>getValue()</code> calls on the reference. For this reason, JPublisher generates the following method into your Java classes whenever you specify <code>-serializable=true</code>:</p>
<pre>void restoreConnection(Connection)
</pre>
<p>After deserialization, call this method once for a given object or object reference to restore the current connection into the reference or, respectively, into all transitively embedded references.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1010198"></a>
<div id="JJPUB24229" class="sect3">
<h4 class="sect3">Gener<a id="sthref333"></a><a id="sthref334"></a><a id="sthref335"></a>ation of toString() Method on Object Wrapper Classes</h4>
<p>You can use the <code>-tostring</code> flag to tell JPublisher to generate an additional <code>toString()</code> method for printing out an object value. The output resembles SQL code you would use to construct the object. The default setting is <code>false</code>. The syntax for this option is:</p>
<pre>-tostring={true|<span class="bold">false</span>}
</pre></div>
<!-- class="sect3" -->
<div id="JJPUB24230" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref336"></a>
<h4 class="sect3">Rename main Method</h4>
<p>You can use <code>-nomain=true</code> to avoid generating Java methods with the signature <code>main(String[])</code>. This option applies to SQL publishing and server-side Java class publishing. The syntax for this option is:</p>
<pre>-nomain[=true|false]
</pre>
<p>The <code>-dbjava</code> option automatically sets <code>-nomain=true</code> because of Java stored procedure limitation. In case a method with the signature <code>main(String[])</code> is to be generated with the <code>-nomain=true</code> setting, then JPublisher will rename the method, for example, into <code>main0(Stringp[])</code>.</p>
<p>The default setting is:</p>
<pre>-nomain=false
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFGBHH"></a>
<div id="JJPUB24231" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">PL/SQL Co<a id="sthref337"></a>de Generation Options</h3>
<p>This section documents the following options that specify JPublisher behavior in generating PL/SQL code:</p>
<ul>
<li>
<p><code>-overwritedbtypes</code></p>
<p>Specifies whether naming conflicts are checked before creating SQL types.</p>
</li>
<li>
<p><code>-plsqlfile</code></p>
<p>Specifies scripts to use in creating and dropping SQL types and PL/SQL packages.</p>
</li>
<li>
<p><code>-plsqlmap</code></p>
<p>Specifies whether PL/SQL wrapper functions are generated</p>
</li>
<li>
<p><code>-plsqlpackage</code></p>
<p>Specifies the name of the PL/SQL package in which JPublisher generates PL/SQL call specs, conversion functions, wrapper functions, and table functions.</p>
</li>
</ul>
<p>These options are mostly used to support Java calls to stored procedures that use PL/SQL types. The options specify the creation and use of corresponding SQL types and the creation and use of PL/SQL conversion functions and PL/SQL wrapper functions that use the corresponding SQL types for input or output. This enables access through JDBC.</p>
<div id="JJPUB24232" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref338"></a>
<h4 class="sect3">Generation of SQL types</h4>
<p>JPublisher may generate new SQL types when publishing PL/SQL types and generating PL/SQL wrappers for server-side Java classes. The <code>-overwritedbtypes</code> option determines how JPublisher names the generated SQL types. The syntax for this option is:</p>
<pre>-overwritedbtypes={<span class="bold">true</span>|false}
</pre>
<p>Prior to Oracle Database 10<span class="italic">g</span> release 2 (10.2), JPublisher checked the database for naming conflicts and chose a name, which was not already in use, for the generated SQL type. Since Oracle Database 10<span class="italic">g</span> release 2 (10.2), JPublisher generates SQL type names by default, regardless of the existing type names in the database. The <code>-overwritedbtypes=true</code> setting, which is the default, overwrites the existing types if the type name is the same as that of the generated SQL type. This enables JPublisher to generate exactly the same PL/SQL wrappers over different runs.</p>
<p>To ensure that JPublisher does not overwrite any type inside the database while executing the generated PL/SQL wrapper, you must explicitly specify <code>-overwritedbtypes=false</code>.</p>
<p>A frequently reported problem in releases prior to Oracle Database 10<span class="italic">g</span> release 2 (10.2) is that after the generated PL/SQL wrapper is processed, rerunning the JPublisher command generates a different set of SQL types. A workaround for this problem is to run the PL/SQL dropper script before the JPublisher command is rerun.</p>
</div>
<!-- class="sect3" -->
<a id="i1009756"></a>
<div id="JJPUB24233" class="sect3">
<h4 class="sect3">File Nam<a id="sthref339"></a><a id="sthref340"></a><a id="sthref341"></a>es for PL/SQL Scripts</h4>
<p>The <code>-plsqlfile</code> option specifies the name of a wrapper script and a dropper script generated by JPublisher. The syntax for this option is:</p>
<pre>-plsqlfile=<span class="italic">plsql_wrapper_script</span>,<span class="italic">plsql_dropper_script</span>
</pre>
<p>The wrapper script contains instructions to create SQL types to map to PL/SQL types and instructions to create the PL/SQL package that JPublisher uses for any PL/SQL wrappers or call specs, conversion functions, wrapper functions, and table functions. The dropper script contains instructions to drop these entities.</p>
<p>You must load the generated files into the database, using SQL*Plus, for example, and run the wrapper script to install the types and package in the database.</p>
<p>If the files already exist, then they are overwritten. If no file names are specified, then JPublisher writes to files named <code>plsql_wrapper.sql</code> and <code>plsql_dropper.sql</code>.</p>
<p>JPublisher writes a note about the generated scripts, such as the following:</p>
<pre>J2T-138, NOTE: Wrote PL/SQL package JPUB_PLSQL_WRAPPER to
file plsql_wrapper.sql. Wrote the dropping script to file plsql_dropper.sql.
</pre></div>
<!-- class="sect3" -->
<a id="CIHHGFEC"></a>
<div id="JJPUB24234" class="sect3">
<h4 class="sect3">Gener<a id="sthref342"></a><a id="sthref343"></a><a id="sthref344"></a><a id="sthref345"></a>ation of PL/SQL Wrapper Functions</h4>
<p>The <code>-plsqlmap</code> option specifies whether JPublisher generates wrapper functions for stored procedures that use PL/SQL types. Each wrapper function calls the corresponding stored procedure and invokes the appropriate PL/SQL conversion functions for PL/SQL input or output of the stored procedure. Only the corresponding SQL types are exposed to Java. The syntax for this option is:</p>
<pre>-plsqlmap={<span class="bold">true</span>|false|always}
</pre>
<p>The setting can be any of the following:</p>
<ul>
<li>
<p><code>true</code></p>
<p>This is the default. JPublisher generates PL/SQL wrapper functions only as needed. For any given stored procedure, if the Java code to call it and convert its PL/SQL types directly is simple enough and the PL/SQL types are used only as <code>IN</code> parameters or for the function return, then the generated code calls the stored procedure directly. It processes the PL/SQL input or output through the appropriate conversion functions.</p>
</li>
<li>
<p><code>false</code></p>
<p>JPublisher does not generate PL/SQL wrapper functions. If it encounters a PL/SQL type in a signature that cannot be supported by direct call and conversion, then it skips generation of Java code for the particular stored procedure.</p>
</li>
<li>
<p><code>always</code></p>
<p>JPublisher generates a PL/SQL wrapper function for every stored procedure that uses a PL/SQL type. This is useful for generating a proxy PL/SQL package that complements an original PL/SQL package, providing Java-accessible signatures for those functions or procedures that are inaccessible from Java in the original package.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1006009">&#34;Type Mapping Support Through PL/SQL Conversion Functions&#34;</a> and <a href="datamap.htm#CHDDCADC">&#34;Direct Use of PL/SQL Conversion Functions Versus Use of Wrapper Functions&#34;</a></div>
</div>
<!-- class="sect3" -->
<div id="JJPUB24235" class="sect3"><a id="sthref346"></a>
<h4 class="sect3">Packa<a id="sthref347"></a><a id="sthref348"></a><a id="sthref349"></a>ge for Generated PL/SQL Code</h4>
<p>The <code>-plsqlpackage</code> option specifies the name of the PL/SQL package into which JPublisher places any generated PL/SQL code. This includes PL/SQL wrappers or call specifications, conversion functions to convert between PL/SQL and SQL types, wrapper functions to wrap stored procedures that use PL/SQL types, and table functions. The syntax for this option is:</p>
<pre>-plsqlpackage=<span class="italic">name_of_PLSQL_package</span>
</pre>
<p>By default, JPublisher uses the package <code>JPUB_PLSQL_WRAPPER</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must create this package in the database by running the SQL script generated by JPublisher.</div>
</div>
<!-- class="sect3" -->
<div id="JJPUB24236" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref350"></a>
<h4 class="sect3">Package for PL/SQL Index-By Tables</h4>
<p>Use <code>-plsqlindextable=array</code> or <code>-plsqlindextable=</code><code><span class="codeinlineitalic">int</span></code> to specify that PL/SQL index-by table of numeric and character types be mapped to Java array. The syntax for this option is:</p>
<pre>-plsqlindextable=array|custom|<span class="italic">int</span>
</pre>
<p>The <code><span class="codeinlineitalic">int</span></code> specification defines the capacity of the Java array. The default capacity is 32768. The <code>-plsqlindextable=custom</code> setting specifies that PL/SQL index-by table be mapped to custom JDBC types, such as a class implementing <code>ORAData</code>.</p>
<p>The default setting is:</p>
<pre>-plsqlindextable=custom
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010527"></a>
<div id="JJPUB24237" class="sect2">
<h3 class="sect2">Input/Outp<a id="sthref351"></a><a id="sthref352"></a><a id="sthref353"></a>ut Options</h3>
<p>This section documents options related to JPublisher input and output files and locations. These are listed in the order in which they are discussed:</p>
<ul>
<li>
<p><code>-compile</code></p>
<p>Use this option if you want to suppress compilation, and optionally, SQLJ translation, if JPublisher is in a backward-compatibility mode.</p>
</li>
<li>
<p><code>-dir</code></p>
<p>Use this option to specify where the generated source files are placed.</p>
</li>
<li>
<p><code>-d</code></p>
<p>Use this option to specify where the compiled class files are placed.</p>
</li>
<li>
<p><code>-encoding</code></p>
<p>Use this option to specify the Java character encoding of the <code>INPUT</code> file that JPublisher reads and the <code>.sqlj</code> and <code>.java</code> files that JPublisher writes.</p>
</li>
</ul>
<div id="JJPUB24238" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref354"></a>
<h4 class="sect3">No Com<a id="sthref355"></a><a id="sthref356"></a><a id="sthref357"></a>pilation or Translation</h4>
<p>Use the <code>-compile</code> option to suppress the compilation of the generated <code>.java</code> files and, for backward-compatibility modes, to optionally suppress the translation of generated <code>.sqlj</code> files. The syntax for this option is:</p>
<pre>-compile={<span class="bold">true</span>|false|notranslate}
</pre>
<p>With the default <code>true</code> setting, all generated classes are compiled into <code>.class</code> files. If you are in a backward-compatibility mode, then you can use the <code>-compile=notranslate</code> setting to suppress SQLJ translation and Java compilation of generated source files. This leaves you with <code>.sqlj</code> output from JPublisher, which you can translate and compile manually by using either the JPublisher <code>-sqlj</code> option or the SQLJ command-line utility directly. You can also use the <code>-compile=false</code> setting to proceed with SQLJ translation, but skip Java compilation. This leaves you with <code>.java</code> output from JPublisher, which you can compile manually.</p>
<p>If you are not in a backward-compatibility mode, such as if you use the default <code>-compatible=oradata</code> setting, then you can use a setting of <code>-compile=false</code> to skip compilation. In this scenario, the <code>notranslate</code> setting is not supported, because visible <code>.sqlj</code> files are not produced if you are not in a backward-compatibility mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1010532">&#34;Backward Compatibility Option&#34;</a> and <a href="#CIHFCJHC">&#34;Option to Access SQLJ Functionality&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="CIHJCACI"></a>
<div id="JJPUB24239" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Output Dir<a id="sthref358"></a><a id="sthref359"></a><a id="sthref360"></a><a id="sthref361"></a><a id="sthref362"></a><a id="sthref363"></a>ectories for Generated Source and Class Files</h4>
<p>Use the <code>-dir</code> option to specify the root of the directory tree within which JPublisher places the <code>.java</code> source files or the <code>.sqlj</code> source files for backward-compatibility modes. The syntax for this option is:</p>
<pre>-dir=<span class="italic">directory_path</span>
-d=<span class="italic">directory_path</span>
</pre>
<p>A setting of a period (<code>.</code>) explicitly specifies the current directory as the root of the directory tree. Similarly, use the <code>-d</code> option to specify the root of the directory tree within which JPublisher places compiled <code>.class</code> files, with the same functionality for a period (<code>.</code>) setting.</p>
<p>For each option with any nonempty setting, JPublisher also uses package information from the <code>-package</code> option or any package name included in an <code>SQL</code> option setting in the <code>INPUT</code> file. This information is used to determine the complete directory hierarchy for generated files.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1018414">&#34;Name for Generated Java Package&#34;</a></div>
<p>For example, consider the following JPublisher command:</p>
<pre>% jpub -user=hr -d=myclasses -dir=mysource -package=a.b.c  -sql=PERSON:Person,STUDENT:Student
Enter hr password: <span class="italic">password</span>
</pre>
<p>This results in the following output, relative to the current directory:</p>
<pre>mysource/a/b/c/Person.java
mysource/a/b/c/PersonRef.java
mysource/a/b/c/Student.java
mysource/a/b/c/StudentRef.java

myclasses/a/b/c/Person.class
myclasses/a/b/c/PersonRef.class
myclasses/a/b/c/Student.class
myclasses/a/b/c/StudentRef.class
</pre>
<p>By default, source and class files are placed directly into the current directory, with no package hierarchy, regardless of the <code>-package</code> setting or any package specification in the <code>INPUT</code> file.</p>
<p>You can also explicitly specify this behavior with empty settings:</p>
<pre>%jpub ... -d= -dir=
</pre>
<p>You can set these options on the command line or in a properties file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
SQLJ has <code>-dir</code> and <code>-d</code> options as well, with the same functionality. However, when you use the JPublisher <code>-sqlj</code> option to specify SQLJ settings, use the JPublisher <code>-dir</code> and <code>-d</code> options, which take precedence over any SQLJ <code>-dir</code> and <code>-d</code> settings.</div>
</div>
<!-- class="sect3" -->
<a id="i1009554"></a>
<div id="JJPUB24240" class="sect3">
<h4 class="sect3">Java Character Encoding</h4>
<p>The <code>-encoding</code> option specifies the Java character encoding of the <code>INPUT</code> file that JPublisher reads and the source files that JPublisher writes. The default encoding is the value of the <code>file.encoding</code> system property or <code>8859_1</code> (ISO Latin-1), if this property is not set. The syntax for this option is:</p>
<pre>-encoding=<span class="italic">name_of_character_encoding</span>
</pre>
<p>As a general rule, you do not have to set this option unless you specify an encoding for the SQLJ translator and Java compiler, which you can do with a SQLJ <code>-encoding</code> setting through the JPublisher <code>-sqlj</code> option. In this scenario, you should specify the same encoding for JPublisher as for SQLJ and the compiler.</p>
<p>You can use the <code>-encoding</code> option to specify any character encoding supported by your Java environment. If you are using the Sun Microsystems JDK, these options are listed in the <code>native2ascii</code> documentation, which you can find at the following URL:</p>
<p><code><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/native2ascii.html">http://docs.oracle.com/javase/7/docs/technotes/tools/windows/native2ascii.html</a></code></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Encoding settings, either set through the JPublisher <code>-encoding</code> option or the Java <code>file.encoding</code> setting, do not apply to Java properties files, including those specified through the JPublisher <code>-props</code> option. Properties files always use the <code>8859_1</code> encoding. This is a feature of Java in general and not JPublisher in particular. However, you can use Unicode escape sequences in a properties file.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1011069"></a>
<div id="JJPUB24241" class="sect2">
<h3 class="sect2">Optio<a id="sthref364"></a><a id="sthref365"></a><a id="sthref366"></a>ns to Facilitate Web Services Call-Outs</h3>
<p>This section documents options and related concepts for accessing Java classes from server-side Java or PL/SQL. In particular, these options may be used to access Web services client code from inside the database, referred to as Web services call-outs. This section comprises the following topics:</p>
<ul>
<li>
<p><a href="#CIHJDHJE">WSDL Document for Java and PL/SQL Wrapper Generation</a></p>
</li>
<li>
<p><a href="#CIHBCECC">Web Services Endpoint</a></p>
</li>
<li>
<p><a href="#CIHHGCEI">Proxy URL for WSDL</a></p>
</li>
<li>
<p><a href="#CIHFDDGE">Superuser for Permissions to Run Client Proxies</a></p>
</li>
</ul>
<p>The following list is a summary of the options relevant to Web services call-outs and how they relate to each other:</p>
<ul>
<li>
<p><code>-proxyclasses=</code><code><span class="codeinlineitalic">class1,class2,...,classN</span></code></p>
<p>This option specifies Java classes for which Java and PL/SQL wrappers will be generated. For Web services, this option is used behind the scenes by the <code>-proxywsdl</code> option and is set automatically to process generated client proxy classes.</p>
<p>Alternatively, you can use this option directly, for general purposes, when you want to create Java and PL/SQL wrappers for Java classes.</p>
<p>The <code>-proxyclasses</code> option takes the <code>-proxyopts</code> setting as input.</p>
</li>
<li>
<p><code>-proxyopts=</code><code><span class="codeinlineitalic">setting1,setting2,...</span></code></p>
<p>This option specifies JPublisher behavior in generating wrapper classes and PL/SQL wrappers. This is usually, but not necessarily, for Web services. For typical usage of the <code>-proxywsdl</code> option, the <code>-proxyopts</code> default setting is sufficient. If you directly use the <code>-proxyclasses</code> option, then you may want specific <code>-proxyopts</code> settings.</p>
</li>
<li>
<p><code>-proxywsdl=</code><code><span class="codeinlineitalic">WSDL_URL</span></code></p>
<p>Use this option to generate Web services client proxy classes and appropriate Java and PL/SQL wrappers, given the WSDL document at the specified URL.</p>
<p>The <code>-proxywsdl</code> option uses the <code>-proxyclasses</code> option behind the scenes and takes the <code>-proxyopts</code> setting as input.</p>
</li>
<li>
<p><code>-endpoint=</code><code><span class="codeinlineitalic">Web_services_endpoint</span></code></p>
<p>Use this option in conjunction with the <code>-proxywsdl</code> option to specify the Web services endpoint.</p>
</li>
<li>
<p><code>-httpproxy=</code><code><span class="codeinlineitalic">proxy_URL</span></code></p>
<p>Where the WSDL document is accessed through a firewall, use this option to specify a proxy URL to use in resolving the URL of the WSDL document.</p>
</li>
<li>
<p><code>-sysuser=</code><code><span class="codeinlineitalic">superuser_name/superuser_password</span></code></p>
<p>Use this option to specify the name and password for the superuser account used to grant permissions for the client proxy classes to access Web services using HTTP.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The features described here require the <code>dbwsclient.jar</code> library to be installed in Oracle Database 12<span class="italic">c</span>.</p>
</li>
<li>
<p>Several previously existing JPublisher options are used in conjunction with wrapper generation as discussed here: <code>-dir</code>, <code>-d</code>, <code>-plsqlmap</code>, <code>-plsqlfile</code>, <code>-plsqlpackage</code>, and <code>-package</code>. You can also specify a database connection through the <code>-user</code> and <code>-url</code> options so that JPublisher can load generated entities into the database.</p>
</li>
</ul>
</div>
<a id="CIHJDHJE"></a>
<div id="JJPUB24242" class="sect3">
<h4 class="sect3">WS<a id="sthref367"></a><a id="sthref368"></a>DL Document for Java and PL/SQL Wrapper Generation</h4>
<p>The syntax for the <code>-proxywsdl</code> option is:</p>
<pre>-proxywsdl=<span class="italic">WSDL_URL</span>
</pre>
<p>This option is used as follows:</p>
<pre>% jpub -proxywsdl=META-INF/HelloService.wsdl ...
</pre>
<p>Given the Web services WSDL document at the specified URL, JPublisher directs the generation of Web services client proxy classes and generates appropriate Java and PL/SQL wrappers for Web services call-outs from the database. Classes to generate and process are determined from the WSDL document. JPublisher automatically sets the <code>-proxyclasses</code> option, uses the <code>-proxyopts</code> setting as input, and executes the following steps:</p>
<ol>
<li>
<p>Invokes Oracle Database Web services assembler tool to produce Web services client proxy classes based on the WSDL document. These classes use Oracle Database Web services client run time to access the Web services specified in the WSDL document.</p>
</li>
<li>
<p>Creates Java wrapper classes for the Web services client proxy classes as appropriate or necessary. For each proxy class that has instance methods, a wrapper class is necessary to expose the instance methods as static methods. Even if there are no instance methods, a wrapper class is necessary if methods of the proxy class use anything other than Java primitive types in their calling sequences.</p>
</li>
<li>
<p>Creates PL/SQL wrappers for the generated classes, to make them accessible from PL/SQL. PL/SQL supports only static methods, so this step requires the wrapping of instance methods by static methods, This is performed in the previous step.</p>
</li>
<li>
<p>Loads generated code into the database assuming you have specified <code>-user</code> and <code>-url</code> settings and JPublisher has established a connection, unless you specifically bypass loading through the <code>-proxyopts=noload</code> setting.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
When using <code>-proxywsdl</code>:
<ul>
<li>
<p>You must use the <code>-package</code> option to determine the package for generated Java classes.</p>
</li>
<li>
<p>For <code>-proxyopts</code>, the default <code>jaxrpc</code> setting is sufficient for use with 10.0.x releases of Oracle Application Server 10<span class="italic">g</span>. This setting uses the singleton mechanism for publishing instance methods of the Web services client proxy classes. For use with the 9.0.4 release of Oracle Application Server 10<span class="italic">g</span> or with earlier releases, set <code>-proxyopts=soap</code>.</p>
</li>
</ul>
</div>
<p>The <code>-endpoint</code> option is typically used in conjunction with the <code>-proxywsdl</code> option.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBCECC"></a>
<div id="JJPUB24243" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Web Ser<a id="sthref369"></a><a id="sthref370"></a>vices Endpoint</h4>
<p>You can use the <code>-endpoint</code> option in conjunction with the <code>-proxywsdl</code> option to specify the Web services endpoint. The endpoint is the URL to which the Web service is deployed and from which the client accesses it. The syntax for this option is:</p>
<pre>-endpoint=<span class="italic">Web_services_endpoint</span>
</pre>
<p>Use this option as follows:</p>
<pre>% jpub -proxywsdl=META-INF/HelloService.wsdl ...
       -endpoint=http://localhost:8888/javacallout/javacallout
</pre>
<p>With this command, the Java wrapper class generated by JPublisher includes the following code:</p>
<pre>      ((Stub)m_port0)._setProperty(Stub.ENDPOINT_ADDRESS_PROPERTY, 
                     &#34;http://localhost:8888/javacallout/javacallout&#34;);
</pre>
<p>Without the <code>-endpoint</code> option, there would instead be the following commented code:</p>
<pre>      // Specify the endpoint and then uncomment the following statement:
      // ((Stub)m_port0)._setProperty(Stub.ENDPOINT_ADDRESS_PROPERTY, 
      //                &#34;&lt;endpoint not provided&gt;&#34;);
</pre>
<p>If you do not specify the endpoint in the JPublisher command line, then you must manually alter the generated wrapper class to uncomment this code and specify the appropriate endpoint.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHGCEI"></a>
<div id="JJPUB24244" class="sect3">
<h4 class="sect3">Pro<a id="sthref371"></a><a id="sthref372"></a>xy URL for WSDL</h4>
<p>If a WSDL document used for Web services call-outs is accessed through a firewall, use the <code>-httpproxy</code> option in conjunction with the <code>-proxywsdl</code> option to specify a proxy URL to use in resolving the URL of the WSDL document. The syntax for this option is:</p>
<pre>-httpproxy=<span class="italic">proxy_URL</span>
</pre>
<p>For example:</p>
<pre>% jpub ... -httpproxy=http://www-proxy.oracle.com:80
</pre></div>
<!-- class="sect3" -->
<a id="CIHFDDGE"></a>
<div id="JJPUB24245" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Super<a id="sthref373"></a><a id="sthref374"></a><a id="sthref375"></a>user for Permissions to Run Client Proxies</h4>
<p>Use the <code>-sysuser</code> option to specify the name and password of a superuser account. This account is used in running the JPublisher-generated PL/SQL script that grants permissions that allow client proxy classes to access Web services using HTTP. The syntax for this option is:</p>
<pre>-sysuser=<span class="italic">superuser_name/superuser_password</span>
</pre>
<p>For example:</p>
<pre>-sysuser=sys/change_on_install
</pre>
<p>Without a <code>-sysuser</code> setting, JPublisher does not load the generated script granting permissions. Instead, it asks you to execute the script separately.</p>
<p>If the <code>-url</code> setting specifies a thin driver, then you must set up a password file for <code>SYS</code>, which authorizes logon as <code>SYS</code>, through the thin driver. To set up a password file, you must:</p>
<ol>
<li>
<p>Add the <code>remote_login_passwordfile</code> option to the database parameter file. You must use either of the following settings:</p>
<pre>remote_login_passwordfile=shared

remote_login_passwordfile=exclusive
</pre></li>
<li>
<p>Create a password file, if you have not already created one. You can do this by running the following command, where <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/dbs/</code> is an existing directory:</p>
<pre>orapwd file=&#34;<span class="italic">ORACLE_HOME</span>/dbs/orapwlsqlj1&#34; entries=100 force=y
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Grant remote logon privileges to a user. This can be done as follows:</p>
<pre>% sqlplus /nolog
SQL&gt; CONN / AS sysdba
Connected.
SQL&gt; GRANT sysdba TO hr;
Grant succeeded.
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for details of setting up a remote <code>SYS</code> logon</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFCJHC"></a>
<div id="JJPUB24246" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Option to Ac<a id="sthref376"></a><a id="sthref377"></a>cess SQLJ Functionality</h3>
<p>This section documents the <code>-sqlj</code> option, which you can use to pass SQLJ options to the SQLJ translator through the JPublisher command line.</p>
<div id="JJPUB24247" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref378"></a>
<h4 class="sect3">Set<a id="sthref379"></a><a id="sthref380"></a>tings for the SQLJ Translator</h4>
<p>In Oracle Database 12<span class="italic">c</span>, SQLJ translation is automatic by default when you run JPublisher. Translation is transparent, with no visible <code>.sqlj</code> files resulting from JPublisher code generation.</p>
<p>However, you can still specify SQLJ settings for the JPublisher invocation of the SQLJ translator by using the JPublisher <code>-sqlj</code> option. The syntax for this option is:</p>
<pre>-sqlj=<span class="italic">sqlj_options</span>
</pre>
<p>For example:</p>
<pre>% jpub -user=hr -sqlj -optcols=true -optparams=true -optparamdefaults=<span class="italic">datatype1</span>(<span class="italic">size1</span>),<span class="italic">datatype2</span>(<span class="italic">size</span>)
Enter hr password: <span class="italic">password</span>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>There is no equal sign (<code>=</code>) following <code>-sqlj</code>.</p>
</li>
<li>
<p>All other JPublisher options must precede the <code>-sqlj</code> option. Any option setting following <code>-sqlj</code> is taken to be a SQLJ option and is passed to the SQLJ translator. In the preceding example, <code>-optcols</code>, <code>-optparams</code>, and <code>-optparamdefaults</code> are SQLJ options.</p>
</li>
</ul>
</div>
<p>You can also run JPublisher solely to translate <code>.sqlj</code> files that have already been produced explicitly, such as if you run JPublisher with the <code>-compatible=sqlj</code> setting, which skips the automatic SQLJ translation step and results in <code>.sqlj</code> output files from JPublisher. In this case, use no JPublisher options other than <code>-sqlj</code>. This is a way to accomplish manual SQLJ translation if the <code>sqlj</code> front-end script or executable is unavailable.</p>
<p>The commands following <code>-sqlj</code> are equivalent to the command you would give to the SQLJ translator utility directly. Here is an example:</p>
<pre>% jpub -sqlj -d=outclasses -warn=none -encoding=SJIS Foo.sqlj
</pre>
<p>This is equivalent to the following, if the SQLJ command-line translator is available:</p>
<pre>% sqlj -d=outclasses -warn=none -encoding=SJIS Foo.sqlj
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>As an alternative to specifying SQLJ option settings through the <code>-sqlj</code> option, you can specify them in the <code>sqlj.properties</code> file that JPublisher supports.</p>
</li>
<li>
<p>The <code>-compiler-executable</code> option, if set, is passed to the SQLJ translator to specify the Java compiler that the translator will use to compile Java code.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010532"></a>
<div id="JJPUB24248" class="sect2">
<h3 class="sect2">Back<a id="sthref381"></a><a id="sthref382"></a>ward Compatibility Option</h3>
<p>This section documents the <code>-compatible</code> option, which you can use to specify any of the following:</p>
<ul>
<li>
<p>The interface for JPublisher to implement in generated classes</p>
</li>
<li>
<p>Whether JPublisher should skip SQLJ translation, resulting in visible <code>.sqlj</code> output files</p>
</li>
<li>
<p>A backward-compatibility mode to use JPublisher output in an Oracle9<span class="italic">i</span> or Oracle8<span class="italic">i</span> environment</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adfeacon.htm#i1009130">&#34;Backward Compatibility and Migration&#34;</a></div>
<a id="i1010458"></a>
<div id="JJPUB24249" class="sect3">
<h4 class="sect3">Backw<a id="sthref383"></a><a id="sthref384"></a><a id="sthref385"></a>ard-Compatible Oracle Mapping for User-Defined Types</h4>
<p>The <code>-compatible</code> option has two modes of operation:</p>
<ul>
<li>
<p>Through a setting of <code>oradata</code> or <code>customdatum</code>, you can explicitly specify an interface to be implemented by JPublisher-generated custom Java classes.</p>
</li>
<li>
<p>Through a setting of <code>sqlj</code>, <code>8i</code>, <code>both8i</code>, or <code>9i</code>, you can specify a backward-compatibility mode.</p>
</li>
</ul>
<p>You can select either of the two modes, but not both.</p>
<p>The syntax for this option is:</p>
<pre>-compatible={<span class="bold">oradata</span>|customdatum|both8i|8i|9i|10.1|sqlj}
</pre>
<p class="subhead2"><a id="JJPUB24250"></a>Using -compatible to Specify an Interface</p>
<p>If <code>-usertypes=oracle</code>, then you have the option of setting <code>-compatible=customdatum</code>, to implement the deprecated <code>CustomDatum</code> interface in your generated classes for user-defined types, instead of the default <code>ORAData</code> interface. <code>CustomDatum</code> was replaced by <code>ORAData</code> in Oracle9<span class="italic">i</span> Database, but is still supported for backward compatibility.</p>
<p>The default setting to use the <code>ORAData</code> interface is <code>oradata</code>. If you set <code>-usertypes=jdbc</code>, then a <code>-compatible</code> setting of <code>customdatum</code> or <code>oradata</code> is ignored.</p>
<p>If you use JPublisher in a pre-Oracle9<span class="italic">i</span> Database environment, in which the <code>ORAData</code> interface is not supported, then the <code>CustomDatum</code> interface is used automatically if <code>-usertypes=oracle</code>. You will receive an informational warning if <code>-compatible=oradata</code>, but the generation will take place.</p>
<p class="subhead2"><a id="JJPUB24251"></a>Using -compatible to Specify a Backward-Compatibility Mode</p>
<p>Use the <code>sqlj</code>, <code>10.1</code>, <code>9i</code>, <code>8i</code>, or <code>both8i</code> setting to specify a backward-compatibility mode.</p>
<p>The <code>-compatible=sqlj</code> setting instructs JPublisher to skip SQLJ translation and instead produce <code>.sqlj</code> files that you can work with directly. The <code>sqlj</code> setting has no effect on the generated code itself. To translate the resulting <code>.sqlj</code> files, you can use the SQLJ translator directly, if available, or use the JPublisher <code>-sqlj</code> option.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHFCJHC">&#34;Option to Access SQLJ Functionality&#34;</a></div>
<p>The <code>-compatibility=10.1</code> setting specifies Oracle Database 10<span class="italic">g</span> release 1 (10.1) compatibility mode. In this mode, the JPublisher option <code>-dbjava</code> acts the same as <code>-java</code> in Oracle Database 10<span class="italic">g</span> release 1 (10.1).</p>
<p>The <code>-compatibility=9i</code> setting specifies Oracle9<span class="italic">i</span> compatibility mode. In this mode, JPublisher generates <code>.sqlj</code> files with the same code as would be generated by Oracle9<span class="italic">i</span> version.</p>
<p>The <code>-compatible=8i</code> setting specifies Oracle8<span class="italic">i</span> compatibility mode. This mode uses the <code>CustomDatum</code> interface, generating <code>.sqlj</code> files with the same code that would be generated by Oracle8<span class="italic">i</span> versions of JPublisher. The <code>8i</code> setting is equivalent to setting several individual JPublisher options for backward compatibility to Oracle8<span class="italic">i</span>. For example, behavior of method generation is equivalent to that for <code>-methods=always</code>, and generation of connection context declarations is equivalent to that for <code>-context=generated</code>.</p>
<p>The <code>-compatible=both8i</code> setting is for an alternative Oracle8<span class="italic">i</span> compatibility mode. With this setting, wrapper classes are generated to implement both the <code>ORAData</code> and <code>CustomDatum</code> interfaces. Code is generated as it would have been by Oracle8<span class="italic">i</span> version of JPublisher. This setting is generally preferred over the <code>-compatible=8i</code> setting, because support for <code>ORAData</code> is required for programs running in the middle tier, such as in Oracle Application Server. However, using <code>ORAData</code> requires an Oracle9<span class="italic">i</span> release 1 (9.0.1) or later JDBC driver.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In any compatibility mode that results in the generation of visible <code>.sqlj</code> files, remember that if you are generating Java wrapper classes for a SQL type hierarchy and any of the types contains stored procedures, then, by default, JPublisher generates <code>.sqlj</code> files for all the SQL types, and not just the types that have stored procedures.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHBFGJG"></a>
<div id="JJPUB24252" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Java Enviro<a id="sthref386"></a><a id="sthref387"></a>nment Options</h3>
<p>This section discusses JPublisher options that you can use to determine the Java environment:</p>
<ul>
<li>
<p>The <code>-classpath</code> option specifies the Java classpath that JPublisher and SQLJ use to resolve classes during translation and compilation.</p>
</li>
<li>
<p>The <code>-compiler-executable</code> option specifies the Java compiler for compiling the code generated by JPublisher.</p>
</li>
<li>
<p>The <code>-vm</code> option specifies the JVM through which JPublisher is invoked.</p>
</li>
</ul>
<p>In a UNIX environment, the <code>jpub</code> script specifies the location of the Java executable that runs JPublisher. This script is generated at the time you install your database or application server instance. If the <code>jpub</code> script uses a Java version prior to JDK 1.4, then some JPublisher functionality for Web services, such as call-outs and mapping to the <code>SYS.XMLType</code>, are unavailable.</p>
<div id="JJPUB24253" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref388"></a>
<h4 class="sect3">Class<a id="sthref389"></a><a id="sthref390"></a>path for Translation and Compilation</h4>
<p>Use the <code>-classpath</code> option to specify the Java classpath for JPublisher to use in resolving Java source and classes during translation and compilation. The syntax for this option is:</p>
<pre>-classpath=<span class="italic">path1</span>:<span class="italic">path2</span>:...:<span class="italic">pathN</span>
</pre>
<p>The following command shows an example of its usage, adding new paths to the existing classpath:</p>
<pre>% jpub -user=hr -sql=PERSON:Person,STUDENT:Student -classpath=.:$ORACLE_HOME/jdbc/lib/ocrs12.jar:$CLASSPATH
Enter hr password: <span class="italic">password</span>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
SQLJ also has a <code>-classpath</code> option. If you use the SQLJ <code>-classpath</code> option, following the JPublisher <code>-sqlj</code> option, then that setting is used for the classpath for translation and compilation, and any JPublisher <code>-classpath</code> option setting is ignored. It is more straightforward to use only the JPublisher <code>-classpath</code> option.</div>
</div>
<!-- class="sect3" -->
<div id="JJPUB24254" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref391"></a>
<h4 class="sect3">Jav<a id="sthref392"></a><a id="sthref393"></a><a id="sthref394"></a>a Compiler</h4>
<p>Use the <code>-compiler-executable</code> option if you want Java code generated by JPublisher to be compiled by anything other than the compiler that JPublisher would use by default on your system. Specify the path to an alternative compiler executable file. The syntax for this option is:</p>
<pre>-compiler-executable=<span class="italic">path_to_compiler_executable</span>
</pre></div>
<!-- class="sect3" -->
<a id="CIHBJGBI"></a>
<div id="JJPUB24255" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Jav<a id="sthref395"></a><a id="sthref396"></a><a id="sthref397"></a>a Version</h4>
<p>Use the <code>-vm</code> option if you want to use a JVM other than the JVM that JPublisher would use by default on your system. Specify the path to an alternative Java executable file. The syntax for this option is:</p>
<pre>-vm=<span class="italic">path_to_JVM_executable</span>
</pre>
<p>As an example, assume that JDK 1.4 is installed on a UNIX system at the location <code>JDK14</code>, relative to the current directory. Run JPublisher with the following command to use the JDK 1.4 JVM and compiler when publishing Web services client proxy classes:</p>
<pre>% jpub -vm=JDK14/bin/java -compiler-executable=JDK14/bin/java -proxywsdl=hello.wsdl
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFJBGI"></a>
<div id="JJPUB24256" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SQLJ <a id="sthref398"></a>Migration Options</h3>
<p>Starting from Oracle Database 10<span class="italic">g</span> release 2 (10.2), JPublisher provides the following command-line options to support migrating SQLJ to JDBC applications:</p>
<ul>
<li>
<p><code>-migrate</code></p>
<p>This option enables you to turn on SQLJ migration. The syntax for setting this option is as follows:</p>
<pre>-migrate[=true|false]
</pre>
<p>The <code>-migrate</code> and <code>-migrate=true</code> settings are equivalent. Both these settings indicate that JPublisher should migrate SQLJ programs specified on the command line to JDBC programs. The <code>-migrate=false</code> turns off the migration mode, and SQLJ programs are translated and compiled into a Java program that possibly depends on the SQLJ run time. By default, if this option is not specified, then JPublisher acts like <code>-migrate=false</code>.</p>
</li>
<li>
<p><code>-migconn</code></p>
<p>This option enables you to specify the default JDBC connection used by the migrated code. The default JDBC connection replaces the default <code>DefaultContext</code> instance in the SQLJ run time. The syntax for setting this option is as follows:</p>
<pre>-migconn=getter:<span class="italic">getter</span>,setter:<span class="italic">setter</span>
-migconn=<span class="italic">name</span>[[:<span class="italic">datasource</span>|<span class="italic">modifier</span>][,<span class="italic">modifier</span>]*]
</pre>
<p>In the first syntax, the <code>getter</code> and <code>setter</code> settings specify the getter and setter methods for the default connection. For example:</p>
<pre>-migconn=getter:Test.getDefConn,setter:Test.setDefConn
</pre>
<p>In the second syntax, the <code><span class="codeinlineitalic">name</span></code> setting specifies the default JDBC connection. The optional <code><span class="codeinlineitalic">datasource</span></code> setting provides a JNDI data source location for initializing the default JDBC connection. The <code><span class="codeinlineitalic">modifier</span></code> settings add the modifiers for the default connection variable. You can specify more than one modifier by using multiple <code><span class="codeinlineitalic">modifier</span></code> settings. Examples of the usage of the second syntax are as follows:</p>
<pre>-migconn=_defaultConn:public,static
-migconn=Test._defaultConn
-migconn=Test._defaultConn:jdbc/MyDataSource
-migconn=_defaultConn:public,static,final
</pre></li>
<li>
<p><code>-migrsi</code></p>
<p>This option enables you to specify an interface for all <code>ResultSet</code> iterator classes. The syntax for setting this option is as follows:</p>
<pre>-migrsi=<span class="italic">java_interface_name</span>
</pre>
<p>For example:</p>
<pre>-migrsi=ResultSetInterface
</pre></li>
<li>
<p><code>-migsync</code></p>
<p>This option enables you to mark static variables as <code>synchronized</code>. The syntax for setting this option is as follows:</p>
<pre>-migsync[=true|false]
</pre>
<p>The <code>-migsync</code> and <code>-migsync=true</code> settings mark static variables generated for migration purpose as synchronized. If you do not want the variables to be marked as synchronized, then set <code>-migsync=false</code>. By default, JPublisher acts like <code>-migsync=true</code>.</p>
</li>
<li>
<p><code>-migdriver</code></p>
<p>This option enables you to specify the JDBC driver registered by the migrated code. The syntax for setting this option is as follows:</p>
<pre>-migdriver=<span class="italic">class_name</span>|no
</pre>
<p>For example:</p>
<pre>-migdriver=oracle.jdbc.driver.OracleDriver
</pre>
<p>By default, JPublisher acts like <code>-migdriver=oracle.jdbc.driver.OracleDriver</code>. If you do not want the driver registration code to be generated during migration, then set this option as follows:</p>
<pre>-migdriver=no
</pre></li>
<li>
<p><code>-migcodegen</code></p>
<p>This option enables you to specify whether the migrated code depends on an Oracle JDBC driver or a generic JDBC driver. The syntax for setting this option is as follows:</p>
<pre>-migcodegen=oracle|jdbc
</pre>
<p>The default behavior is <code>-migcodegen=oracle</code>, indicating that Oracle-specific JDBC APIs are used in the migrated code.</p>
</li>
<li>
<p><code>-migserver</code></p>
<p>This option enables you to specify whether to migrate the program to be used on the server. The syntax for setting this option is as follows:</p>
<pre>-migserver
</pre></li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://www.oracle.com/technology/tech/java/sqlj_jdbc/pdf/oracle_sqlj_roadmap.pdf">http://www.oracle.com/technology/tech/java/sqlj_jdbc/pdf/oracle_sqlj_roadmap.pdf</a></code></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006938"></a>
<div id="JJPUB24257" class="sect1">
<h2 class="sect1">JPublis<a id="sthref399"></a>her Input Files</h2>
<p>The following sections describe the structure and contents of JPublisher input files:</p>
<ul>
<li>
<p><a href="#i1006954">Properties File Structure and Syntax</a></p>
</li>
<li>
<p><a href="#i1007010">INPUT File Structure and Syntax</a></p>
</li>
<li>
<p><a href="#CIHGIAJB">INPUT File Precautions</a></p>
</li>
</ul>
<a id="i1006954"></a>
<div id="JJPUB24258" class="sect2">
<h3 class="sect2">Prope<a id="sthref400"></a>rties File Structure and Syntax</h3>
<p>A properties file is an optional text file in which you can specify frequently used options. Specify the name of the properties file on the JPublisher command line with the <code>-props</code> option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>-props</code> is the only option that you cannot specify in a properties file.</div>
<p>On each line in a properties file, enter only one option with its associated value. Enter each option setting with the following prefix, including the period:</p>
<pre>jpub.
</pre>
<p>The <code>jpub.</code> prefix is case-sensitive. White space is permitted only directly in front of <code>jpub.</code>. Any other white space within the option line is significant.</p>
<p>Alternatively, JPublisher permits you to specify options with a double-dash (<code>--</code>), which is the syntax for SQL comments, as part of the prefix:</p>
<pre>-- jpub.
</pre>
<p>A line that does not start with either of the prefixes shown is simply ignored by JPublisher.</p>
<p>In addition, you can use line continuation to spread a JPublisher option over several lines in the properties file. A line to be continued must have a backslash character (<code>\</code>) as the last character, immediately after the text of the line. Any leading space or double dash (<code>--</code>) on the line that follows the backslash is ignored. Consider the following sample entries:</p>
<pre>/* The next three lines represent a JPublisher option
   jpub.sql=SQL_TYPE:JPubJavaType:MyJavaType,\
            OTHER_SQL_TYPE:OtherJPubType:MyOtherJavaType,\
            LAST_SQL_TYPE:My:LastType
*/
-- The next two lines represent another JPublisher option
-- jpub.addtypemap=PLSQL_TYPE:JavaType:SQL TYPE\
--                :SQL_TO_PLSQL_FUNCTION:PLSQL_TO_SQL_FUNCTION
</pre>
<p>Using this functionality, you can embed JPublisher options in SQL scripts, which may be useful when setting up PL/SQL-to-SQL type mappings.</p>
<p>JPublisher reads the options in the properties file in order, as if its contents were inserted on the command line at the point where the <code>-props</code> option is located. If you specify an option more than once, then the last value encountered by JPublisher overrides previous values, except for the following options, which are cumulative:</p>
<ul>
<li>
<p><code>jpub.sql</code> (or the deprecated <code>jpub.types</code>)</p>
</li>
<li>
<p><code>jpub.java</code></p>
</li>
<li>
<p><code>jpub.style</code></p>
</li>
<li>
<p><code>jpub.addtypemap</code></p>
</li>
<li>
<p><code>jpub.adddefaulttypemap</code></p>
</li>
</ul>
<p>For example, consider the following command:</p>
<pre>% jpub -user=hr -sql=employee -mapping=oracle -case=lower -package=corp -dir=demo
Enter hr password: <span class="italic">password</span>
</pre>
<p>Now consider the following:</p>
<pre>% jpub -props=my_properties
</pre>
<p>This command is equivalent to the first example if you assume that <code>my_properties</code> has a definition such as the following:</p>
<pre>-- jpub.user=hr/hr
// jpub.user=cannot_use/java_line_comments
jpub.sql=employee
/*
jpub.mapping=oracle
*/
Jpub.notreally=a jpub option
   jpub.case=lower
jpub.package=corp
    jpub.dir=demo
</pre>
<p>You must include the <code>jpub.</code> prefix at the beginning of each option name. If you enter anything other than white space or double dash (<code>--</code>) before the option name, then JPublisher ignores the entire line.</p>
<p>The preceding example illustrates that white space before <code>jpub.</code> is okay. It also shows that the <code>jpub.</code> prefix must be all lowercase, otherwise it is ignored. Therefore the following line from the preceding example will be ignored:</p>
<pre>Jpub.notreally=a jpub option
</pre></div>
<!-- class="sect2" -->
<a id="i1007010"></a>
<div id="JJPUB24259" class="sect2">
<h3 class="sect2">INPUT File Stru<a id="sthref401"></a>cture and Syntax</h3>
<p>Specify the name of the <code>INPUT</code> file on the JPublisher command line with the <code>-input</code> option. This file identifies SQL user-defined types and PL/SQL packages that JPublisher should translate. It also controls the naming of the generated classes and packages. Although you can use the <code>-sql</code> command-line option to specify user-defined types and packages, an <code>INPUT</code> file allows you a finer degree of control over how JPublisher translates them.</p>
<p>If you do not specify types or packages to translate in an <code>INPUT</code> file or on the command line, then JPublisher translates all user-defined types and PL/SQL packages in the schema to which it connects.</p>
<a id="i1007015"></a>
<div id="JJPUB24260" class="sect3">
<h4 class="sect3">Understan<a id="sthref402"></a><a id="sthref403"></a>ding the Translation Statement</h4>
<p>The translation statement in the <code>INPUT</code> file identifies the names of the user-defined types and PL/SQL packages that you want JPublisher to translate. Optionally, the translation statement can also specify a Java name for the type or package, a Java name for attribute identifiers, and whether there are any extended classes.</p>
<p>One or more translation statements can appear in the <code>INPUT</code> file. The structure of a translation statement is as follows:</p>
<pre>( SQL <span class="italic">name</span>
| SQL [<span class="italic">schema_name</span>.]toplevel  [<span class="bold">(</span><span class="italic">name_list</span><span class="bold">)</span>]
| TYPE <span class="italic">type_name</span>)
[GENERATE <span class="italic">java_name_1</span>]
[AS <span class="italic">java_name_2</span>] 
[TRANSLATE  
     <span class="italic">database_member_name</span> AS <span class="italic">simple_java_name</span>
 { , <span class="italic">database_member_name</span> AS <span class="italic">simple_java_name</span>}* 
]
</pre>
<p>The following sections describe the components of the translation statement.</p>
<p><a id="JJPUB24261"></a><span class="subhead3">SQL <span class="italic">name</span> | TY<a id="sthref404"></a>PE <span class="italic">type_name</span>&nbsp;</span>Enter <code>SQL</code> <code><span class="codeinlineitalic">name</span></code> to identify a SQL type or a PL/SQL package that you want JPublisher to translate. JPublisher examines the <code><span class="codeinlineitalic">name</span></code>, determines whether it is for a user-defined type or a PL/SQL package, and processes it appropriately. If you use the reserved word <code>toplevel</code> in place of <code><span class="codeinlineitalic">name</span></code>, JPublisher translates the top-level subprograms in the schema to which JPublisher is connected.</p>
<p>Instead of <code>SQL</code>, it is permissible to enter <code>TYPE</code> <code><span class="codeinlineitalic">type_name</span></code> if you are specifying only object types. However, the <code>TYPE</code> syntax is deprecated.</p>
<p>You can enter <code><span class="codeinlineitalic">name</span></code> as <code><span class="codeinlineitalic">schema_name</span></code>.<code><span class="codeinlineitalic">name</span></code> to specify the schema to which the SQL type or package belongs. If you enter <code><span class="codeinlineitalic">schema_name</span></code>.<code>toplevel</code>, JPublisher translates the top-level subprograms in schema <code><span class="codeinlineitalic">schema_name</span></code>. In conjunction with <code>TOPLEVEL</code>, you can also supply <code><span class="codeinlineitalic">name_list</span></code>, which is a comma-delimited list of names to be published, enclosed in parentheses. JPublisher considers only top-level functions and procedures that match this list. If you do not specify this list, JPublisher generates code for all top-level subprograms.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If a user-defined type is defined in a case-s<a id="sthref405"></a>ensitive way in SQL, then you must specify the name in quotes. For example:
<pre>SQL &#34;CaseSenstiveType&#34; AS CaseSensitiveType
</pre>
<p>Alternatively, you can also specify a schema name that is not case-sensitive:</p>
<pre>SQL HR.&#34;CaseSensitiveType&#34; AS CaseSensitiveType
</pre>
<p>You can also specify a case-sensitive schema name:</p>
<pre>SQL &#34;Hr&#34;.&#34;CaseSensitiveType&#34; AS CaseSensitiveType
</pre>
<p>The <code>AS</code> clause is optional.</p>
<p>Avoid situations where a period (&#34;.&#34;) is part of the schema name or the type name itself.</p>
</div>
<p><a id="JJPUB24262"></a><span class="subhead3">GENE<a id="sthref406"></a><a id="sthref407"></a>RATE <span class="italic">java_name_1</span> AS <span class="italic">java_name_2</span>&nbsp;</span>The <code>AS</code> clause specifies the name of the Java class that represents the SQL user-defined type or PL/SQL package being translated.</p>
<p>When you use the <code>AS</code> clause without a <code>GENERATE</code> clause, JPublisher generates the class in the <code>AS</code> clause and maps it to the SQL type or PL/SQL package.</p>
<p>When you use both the <code>GENERATE</code> clause and the <code>AS</code> clause for a SQL user-defined type, the <code>GENERATE</code> clause specifies the name of the Java class that JPublisher generates, which is referred to as the base class. The <code>AS</code> clause specifies the name of a Java class that extends the generated base class, which is referred to as the user subclass. JPublisher produces an initial version of the user subclass, and you will typically add code for your desired functionality. JPublisher maps the SQL type to the user subclass, and not to the base class. If you later run the same JPublisher command to republish the SQL type, then the generated class is overwritten, but the user subclass is not.</p>
<p>The <code><span class="codeinlineitalic">java_name_1</span></code> and <code><span class="codeinlineitalic">java_name_2</span></code> can be any legal Java names and can include package identifiers. The case of the Java names overrides the <code>-case</code> option.</p>
<p><a id="i1007091"></a><a id="JJPUB24263"></a><span class="subhead3">TRA<a id="sthref408"></a>NSLATE <span class="italic">database_member_name</span> AS <span class="italic">simple_java_name</span>&nbsp;</span>This clause optionally specifies a different name for an attribute or method. The <code><span class="codeinlineitalic">database_member_name</span></code> is the name of an attribute of a SQL object type or the name of a method of an object type or PL/SQL package. The attribute or method is to be translated to <code><span class="codeinlineitalic">simple_java_name</span></code>, which can be any legal Java name. The case of the Java name overrides the <code>-case</code> option. This name cannot have a package name.</p>
<p>If you do not use <code>TRANSLATE...AS</code> to rename an attribute or method, or if JPublisher translates an object type not listed in the <code>INPUT</code> file, then JPublisher uses the database name of the attribute or method as the Java name. If applicable, the Java name is modified according to the setting of the <code>-case</code> option. Reasons why you may want to rename an attribute or method include:</p>
<ul>
<li>
<p>The name contains characters other than letters, digits, and underscores.</p>
</li>
<li>
<p>The name conflicts with a Java keyword.</p>
</li>
<li>
<p>The type name conflicts with another name in the same scope. This can happen, for example, if the program uses two types with the same name from different schemas.</p>
</li>
</ul>
<p>Remember that your attribute names will appear embedded within <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> and <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> method names, so you may want to capitalize the first letter of your attribute names. For example, if you enter:</p>
<pre>TRANSLATE FIRSTNAME AS FirstName
</pre>
<p>JPublisher generates a <code>getFirstName()</code> method and a <code>setFirstName()</code> method. In contrast, if you enter:</p>
<pre>TRANSLATE FIRSTNAME AS firstName
</pre>
<p>JPublisher generates a <code>getfirstName()</code> method and a <code>setfirstName()</code> method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Java keyword <code>null</code> has special meaning when used as the target Java name for an attribute or method, such as in the following example:
<pre>TRANSLATE FIRSTNAME AS null
</pre>
<p>When you map a SQL method to <code>null</code>, JPublisher does not generate a corresponding Java method in the mapped Java class. When you map a SQL object attribute to <code>null</code>, JPublisher does not generate the getter and setter methods for the attribute in the mapped Java class.</p>
</div>
<p><a id="i1007113"></a><a id="JJPUB24264"></a><span class="subhead3">Package Na<a id="sthref409"></a><a id="sthref410"></a>ming Rules in the INPUT File &nbsp;</span>You can specify a package name by using a fully qualified class name in the <code>INPUT</code> file. If you use a simple, unqualified class name in the <code>INPUT</code> file, then the fully qualified class name includes the package name from the <code>-package</code> option. This is demonstrated in the following examples:</p>
<ul>
<li>
<p>Assume the following in the <code>INPUT</code> file:</p>
<pre>SQL A AS B
</pre>
<p>And assume the setting <code>-package=a.b</code>. In this case, <code>a.b</code> is the package and <code>a.b.B</code> is the fully qualified class name.</p>
</li>
<li>
<p>Assume that you enter the following in the <code>INPUT</code> file and there is no <code>-package</code> setting:</p>
<pre>SQL A AS b.C
</pre>
<p>The package is <code>b</code>, and <code>b.C</code> is the fully qualified class name.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1018414">&#34;Name for Generated Java Package&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
If there are conflicting package settings between a <code>-package</code> option setting and a package setting in the <code>INPUT</code> file, then the precedence depends on the order in which the <code>-input</code> and <code>-package</code> options appear on the command line. The <code>-package</code> setting takes precedence if that option is after the <code>-input</code> option, else the <code>INPUT</code> file setting takes precedence.</div>
<p><a id="i1007142"></a><a id="JJPUB24265"></a><span class="subhead3">Translating Additional Types&nbsp;</span>It may be necessary for JPublisher to translate additional types that are not listed in the <code>INPUT</code> file. This is because JPublisher analyzes the types in the <code>INPUT</code> file for dependencies before performing the translation and translates any additional required types.</p>
<p>Consider the example in <a href="intro.htm#i1006123">&#34;Sample JPublisher Translation&#34;</a>. Assume that the object type definition for <code>EMPLOYEE</code> includes an attribute called <code>ADDRESS</code>, and <code>ADDRESS</code> is an object with the following definition:</p>
<pre>CREATE OR REPLACE TYPE address AS OBJECT
(
    street     VARCHAR2(50),
    city       VARCHAR2(50),
    state      VARCHAR2(30),
    zip        NUMBER
);
</pre>
<p>In this case, JPublisher would first translate <code>ADDRESS,</code> because that would be necessary to define the <code>EMPLOYEE</code> type. In addition, <code>ADDRESS</code> and its attributes would all be translated in the same case, because they are not specifically mentioned in the <code>INPUT</code> file. A class file would be generated for <code>Address.java</code>, which would be included in the package specified on the command line.</p>
<p>JPublisher does not translate PL/SQL packages you do not request, because user-defined types or other PL/SQL packages cannot have dependencies on PL/SQL packages.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24266" class="sect3"><a id="sthref411"></a>
<h4 class="sect3">Sample Tran<a id="sthref412"></a>slation Statement</h4>
<p>To better illustrate the function of the <code>INPUT</code> file, consider an updated version of the example in <a href="intro.htm#i1006123">&#34;Sample JPublisher Translation&#34;</a>.</p>
<p>Consider the following command:</p>
<pre>% jpub -user=hr -input=demoin -numbertypes=oracle -usertypes=oracle -dir=demo -d=demo -package=corp -case=same
Enter hr password: <span class="italic">password</span>
</pre>
<p>And assume that the <code>INPUT</code> file <code>demoin</code> contains the following:</p>
<pre>SQL employee AS Employee 
TRANSLATE NAME AS Name HIRE_DATE AS HireDate
</pre>
<p>The <code>-case=same</code> option specifies that generated Java identifiers maintain the same case as in the database, except where you specify otherwise. Any identifier in a <code>CREATE TYPE</code> or <code>CREATE PACKAGE</code> declaration is stored in uppercase in the database unless it is quoted. In this example, the <code>-case</code> option does not apply to the <code>EMPLOYEE</code> type, because <code>EMPLOYEE</code> is specified to be translated as the Java class <code>Employee</code>.</p>
<p>For attributes, attribute identifiers not specifically mentioned in the <code>INPUT</code> file remain in uppercase, but JPublisher translates <code>NAME</code> and <code>HIRE_DATE</code> as <code>Name</code> and <code>HireDate</code>, as specified.</p>
<p>The translated <code>EMPLOYEE</code> type is written to the following files, relative to the current directory, for UNIX systems in this example, reflecting the <code>-package</code>, <code>-dir</code>, and <code>-d</code> settings:</p>
<pre>demo/corp/Employee.java
demo/corp/Employee.class
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGIAJB"></a>
<div id="JJPUB24267" class="sect2">
<h3 class="sect2">INPUT File Pre<a id="sthref413"></a>cautions</h3>
<p>This section describes possible <code>INPUT</code> file error conditions that JPublisher will currently <span class="italic">not</span> report. There is also a section for reserved terms.</p>
<div id="JJPUB24268" class="sect3"><a id="sthref414"></a>
<h4 class="sect3">Requesting the Same Java Class Name for Different Object Types</h4>
<p>If you request the same Java class name for two different object types, the second class overwrites the first without warning. Consider that the <code>INPUT</code> file contains:</p>
<pre>type PERSON1 as Person
type PERSON2 as Person
</pre>
<p>JPublisher creates the <code>Person.java</code> file for <code>PERSON1</code> and then overwrites it for the <code>PERSON2</code> type.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24269" class="sect3"><a id="sthref415"></a>
<h4 class="sect3">Requesting the Same Attribute Name for Different Object Attributes</h4>
<p>If you request the same attribute name for two different object attributes, JPublisher generates <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> and <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods for both attributes without issuing a warning message. The question of whether the generated class is valid in Java depends on whether the two <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods with the same name and the two <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods with the same name have different argument types so that they may be unambiguously overloaded.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24270" class="sect3"><a id="sthref416"></a>
<h4 class="sect3">Specifying Nonexistent Attributes</h4>
<p>If you specify a nonexistent object attribute in the <code>TRANSLATE</code> clause, then JPublisher ignores it without issuing a warning message.</p>
<p>Consider the following example from an <code>INPUT</code> file:</p>
<pre>type PERSON translate X as attr1
</pre>
<p>A situation in which <code>X</code> is not an attribute of <code>PERSON</code> does not cause JPublisher to issue a warning message.</p>
</div>
<!-- class="sect3" -->
<div id="JJPUB24271" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref417"></a>
<h4 class="sect3">JPublisher Reserved Terms</h4>
<p>Do not use any of the following reserved terms as SQL or Java identifiers in the <code>INPUT</code> file.</p>
<pre>AS 
GENERATE 
IMPLEMENTS 
SQLSTATEMENTS_TYPE 
SQLSTATEMENTS_METHOD 
SQL 
TRANSLATE 
TOPLEVEL 
TYPE 
VERSION
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5684">
<tr>
<td class="cellalignment5693">
<table class="cellalignment5689">
<tr>
<td class="cellalignment5688"><a href="genclint.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5688"><a href="codeex.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5696">
<table class="cellalignment5687">
<tr>
<td class="cellalignment5688"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5688"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5688"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5688"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5688"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5688"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>