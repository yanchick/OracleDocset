<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71093"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Additional%20Features%20and%20Considerations"></a><title>Additional Features and Considerations</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-07T6:1:46Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database JPublisher User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49873-02"/>
<meta name="dcterms.isVersionOf" content="JJPUB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="datamap.htm" title="Previous" type="text/html"/>
<link rel="Next" href="genclint.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49873-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/14</span> <!-- End Header -->
<div id="JJPUB05000" class="chapter"><a id="g1022163"></a> <a id="i1010200"></a>
<h1 class="chapter"><span class="secnum">4</span> Additional Features and Considerations</h1>
<p>This chapter covers additional features and considerations for your use of JPublisher:</p>
<ul>
<li>
<p><a href="#i1008667">Summary of JPublisher Support for Web Services</a></p>
</li>
<li>
<p><a href="#i1009518">Features to Filter JPublisher Output</a></p>
</li>
<li>
<p><a href="#i1009130">Backward Compatibility and Migration</a></p>
</li>
</ul>
<a id="i1008667"></a>
<div id="JJPUB05100" class="sect1">
<h2 class="sect1">Sum<a id="sthref134"></a>mary of JPublisher Support for Web Services</h2>
<p>The following sections summarize key JPublisher features for Web services. Most features relate to Web services call-ins to the database, covering JPublisher features that make SQL, PL/SQL, and server-side Java classes accessible to Web services clients. There are also features and options to support Web services call-outs from the database.</p>
<ul>
<li>
<p><a href="#i1008943">Summary of Support for Web Services Call-Ins to the Database</a></p>
</li>
<li>
<p><a href="#i1009150">Support for Web Services Call-Outs from the Database</a></p>
</li>
<li>
<p><a href="#CHDIJACG">Server-Side Java Invocation (Call-in)</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JJDEV" href="../JJDEV/toc.htm"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> for additional information about Oracle Database Web services</p>
</li>
<li>
<p><a class="olink ASWSV" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ASWSV"><span class="italic"><span class="italic">Oracle Application Server Web Services Developer&#39;s Guide</span></span></a> for general information about Oracle features for Web services</p>
</li>
<li>
<p><a class="olink WSRPA" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=WSRPA"><span class="italic">Oracle Fusion Middleware Programming Advanced Features of JAX-RPC Web Services for Oracle WebLogic Server</span></a> for a complete list of Database objects or functions that can be published as web services</p>
</li>
</ul>
</div>
<a id="i1008943"></a>
<div id="JJPUB05110" class="sect2">
<h3 class="sect2">Sum<a id="sthref135"></a>mary of Support for Web Services Call-Ins to the Database</h3>
<p>The following JPublisher features support Web services call-ins to code running in Oracle Database. The generated Java class can then be deployed in Oracle Application Server, using the Java EE container. For example, a Java class representing a PL/SQL package can be deployed as a PL/SQL Web Service.</p>
<ul>
<li>
<p>Generation of Java interfaces</p>
<p>By using extended functionality of the <code>-sql</code> option, JPublisher can generate Java interfaces. This functionality eliminates the necessity to manually generate Java interfaces that represent the application programming interface (API) from which Web Services Description Language (WSDL) content is to be generated. Prior to Oracle Database 10<span class="italic">g</span>, JPublisher could generate classes but not interfaces.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="genclint.htm#i1009070">&#34;Generation of Java Interfaces&#34;</a></div>
</li>
<li>
<p>JPublisher styles and style files</p>
<p>Style files, along with the related <code>-style</code> option, enable Java-to-Java type mappings that ensure that generated classes can be used in Web services. In particular, Oracle provides the following style files to support Web services:</p>
<pre>/oracle/jpub/mesg/webservices-common.properties
/oracle/jpub/mesg/webservices10.properties
/oracle/jpub/mesg/webservices9.properties
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1010336">&#34;JPublisher Styles and Style Files&#34;</a></div>
</li>
<li>
<p><code>REF CURSOR</code> returning and result set mapping</p>
<p>The <code>java.sql.ResultSet</code> type is not supported by Web services, which affects stored procedures and functions that return <code>REF CURSOR</code> types. JPublisher supports alternative mappings that allow the use of query results with Web services.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#CHDIGIHC">&#34;REF CURSOR Types and Result Sets Mapping&#34;</a></div>
</li>
<li>
<p>Options to filter what JPublisher publishes</p>
<p>There are several features for specifying or filtering JPublisher output, particularly to ensure that JPublisher-generated code can be exposed as Web services. By using the extended functionality of the <code>-sql</code> option, you can publish a specific subset of stored procedures. Using the <code>-filtertypes</code> and <code>-filtermodes</code> options, you can publish stored procedures based on the modes or types of parameters or return values. Using the <code>-generatebean</code> option, you can specify that generated methods satisfy the JavaBeans specification.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1009518">&#34;Features to Filter JPublisher Output&#34;</a></div>
</li>
<li>
<p>Support for calling Java classes in the database</p>
<p>JPublisher uses the native Java interface for calls directly from a client-side Java stub, generated by JPublisher through the <code>-java</code> option, to the server-side Java code. Prior to Oracle Database 10<span class="italic">g</span>, server-side Java code could be called only through a PL/SQL wrapper that had to be created manually. This PL/SQL wrapper was also known as a call spec. Since Oracle Database 10<span class="italic">g</span> release 2 (10.2), Web services call-ins of Java classes are supported in two modes, dynamic invocation mode and PL/SQL wrapper mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="usejpub.htm#i1008686">&#34;Publishing Server-Side Java Classes Through Native Java Interface&#34;</a> and <a href="#CHDIJACG">&#34;Server-Side Java Invocation (Call-in)&#34;</a></div>
</li>
<li>
<p>Support for publishing SQL queries or DML statements</p>
<p>JPublisher provides the <code>-sqlstatement</code> option to take a particular <code>SELECT</code>, <code>UPDATE</code>, <code>INSERT</code>, or <code>DELETE</code> statement and publish it as a method on a Java class that can be published as a Web service.</p>
</li>
<li>
<p>Support for unique method names</p>
<p>To meet Web services requirements, you can instruct JPublisher to disallow overloaded methods and always use unique method names instead.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1009664">&#34;Generation of Package Classes and Wrapper Methods&#34;</a></div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1009150"></a>
<div id="JJPUB05120" class="sect2">
<h3 class="sect2">Sup<a id="sthref136"></a><a id="sthref137"></a>port for Web Services Call-Outs from the Database</h3>
<p>JPublisher supports Web services call-outs from Oracle Database. The Web services client code is written in SQL, PL/SQL, or Java and it runs on the database and invokes Web services elsewhere. This support is provided through the <code>-proxywsdl</code> and <code>-httpproxy</code> options. In addition, the <code>-proxyopts</code> and <code>-proxyclasses</code> options may possibly be relevant, but typically do not require any special settings for Web services.</p>
<p>Here is a summary of the key options:</p>
<ul>
<li>
<p><code>-proxywsdl=</code><code><span class="codeinlineitalic">URL</span></code></p>
<p>Use this option to generate Web services client proxy classes, given the WSDL document at the specified URL. This option also generates additional wrapper classes to expose instance methods as static methods and generates PL/SQL wrappers.</p>
</li>
<li>
<p><code>-httpproxy=</code><code><span class="codeinlineitalic">proxy_URL</span></code></p>
<p>Where, a WSDL document is accessed through a firewall. Use this option to specify a proxy URL to use in resolving the URL of the WSDL document.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1011069">&#34;Options to Facilitate Web Services Call-Outs&#34;</a></div>
<a id="CJAJBHFC"></a>
<div id="JJPUB24119" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">How to Perform Web Services Call-Out using Static Proxy and JPublisher</h4>
<p>The Oracle JPublisher command line option <code>-proxywsdl</code> can be used to generate database-side Java and PL/SQL wrappers from the WSDL file of a Web service. To allow JPublisher to generate and load wrappers for Web service clients into the database, the <code>dbwsa.jar</code> and <code>dbwsclient.jar</code> files must be present in the classpath and inside the database respectively.</p>
<p>The following procedure sets up the environment and the database for Oracle JPublisher-supported Web service call-out. This procedure needs to be performed only once.</p>
<ol>
<li>
<p>Download and install Oracle JPublisher 12<span class="italic">c</span> Release 1, if it is not already present on your system. Oracle JPublisher is installed as part of Oracle SQLJ installation. You can install Oracle SQLJ from the Database Client CD or from the Database Client download available at</p>
<p><code><a href="http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html">http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html</a></code></p>
</li>
<li>
<p>Add the <code>dbwsa.jar</code> to the directory <code>ORACLE_HOME\sqlj\lib</code> (Microsoft Windows) or <code>ORACLE_HOME/sqlj/lib</code> (Solaris).</p>
</li>
<li>
<p>Set up the appropriate JDK as the Java VM and Java compiler.</p>
<p>The version of the JDK must be the same as the Java VM in the target database:</p>
<ul>
<li>
<p>Use JDK 6 and JDK 7 for Oracle Database 12<span class="italic">c</span></p>
</li>
<li>
<p>Use JDK 1.5 and JDK 6 for Oracle Database 11<span class="italic">g</span></p>
</li>
</ul>
</li>
<li>
<p>Add <code>dbwsa.jar</code> file to the classpath environment variable.</p>
</li>
<li>
<p>Load the <code>dbwsclient.jar</code> file either into the <code>SYS</code> schema or into the schema where the Web service client will be invoked.</p>
<p>For example, the following <code>loadjava</code> command will load the <code>dbwsclient.jar</code> file into the <code>SYS</code> schema.</p>
<pre>%loadjava -u sys -r -v -f -s -grant public -noverify -genmissing dbwsclient.jar
Password: <span class="italic">password</span>
</pre>
<p>The following <code>loadjava</code> command illustrates how to load the <code>dbwsclient.jar</code> file into a specific schema.</p>
<pre>% loadjava -u hr -r -v -f -noverify -genmissing dbwsclient.jar
Password: <span class="italic">password</span>
</pre></li>
</ol>
<p class="subhead2"><a id="JJPUB24120"></a>Example</p>
<p>The following example illustrates how to generate Java and PL/SQL wrappers for a Web service client and then invoke it by using SQL statements. The example follows these general steps:</p>
<ol>
<li>
<p>Identify the Web service you want to invoke.</p>
</li>
<li>
<p>Call Oracle JPublisher with the appropriate options to generate the client proxy, the PL/SQL and Java wrappers, and load them into the database.</p>
<p>An Oracle JPublisher command to do this would include the required <code>-proxywsdl</code> and <code>-user</code> options. The command could also include the optional <code>-endpoint</code>, <code>-httpproxy</code>, <code>-sysuser</code>, <code>-dir</code>, and <code>-proxyopts</code> options. For example:</p>
<pre>% jpub -user=<span class="italic">username</span> -sysuser=<span class="italic">sysuser_name</span>/<span class="italic">sysuser_password</span> -proxywsdl=<span class="italic">WSDL_URL</span> -endpoint=<span class="italic">Web_services_endpoint</span>
</pre>
<p>It is assumed that the Web service has been previously deployed at <code>http://localhost:8888/javacallout/javacallout</code></p>
<p>The following command creates the Web service client and its Java and PL/SQL wrappers in the subdirectory <code>tmp</code>, then loads the wrappers into the database.</p>
<pre>% jpub -user hr -sysuser sys/<span class="italic">sys_password</span> -proxywsdl=sample/javacallout.wsdl
   -endpoint=http://localhost:8888/javacallout/javacallout -dir=tmp
Enter hr password: <span class="italic">password</span>
</pre>
<p>This command produces the following output:</p>
<pre>tmp/HelloServiceEJBJPub.java
tmp/plsql_wrapper.sql
tmp/plsql_dropper.sql
tmp/plsql_grant.sql
tmp/plsql_revoke.sql
Executing tmp/plsql_dropper.sql
Executing tmp/plsql_wrapper.sql
Executing tmp/plsql_grant.sql
Loading tmp/plsql_proxy.jar
</pre></li>
<li>
<p>Invoke the Web service from inside the database.</p>
<p>You can invoke the PL/SQL functions provided in <code>tmp/plsql_wrapper.sql</code>. Each PL/SQL function corresponds to an operation in the Web service. For example, if your Web service is available at the following endpoint:</p>
<pre>http://localhost:8888/javacallout/javacallout
</pre>
<p>Then you can issue the following SQL command.</p>
<pre>SQL&gt; select jpub_plsql_wrapper.sayhello(&#39;hello&#39;) from dual;
</pre>
<p>The command will return the following output.</p>
<pre>JPUB_PLSQL_WRAPPER.SAYHELLO(&#39;HELLO&#39;)
-----------------------------------
HELLO!! You just said :hello
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDIJACG"></a>
<div id="JJPUB24121" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Server-Side Java Invocation (Call-in)</h3>
<p>The server-side Java call-in functionality allows JPublisher to publish Java classes in the database for client-side invocation. JPublisher generates Java clients to invoke server-side Java.</p>
<p>In Oracle Database 10<span class="italic">g</span> release 1 (10.1), the JPublisher option for server-side call-in is <code>-java</code>. JPublisher generates a Java client that uses the dynamic invocation interface, <code>oracle.jpub.runtime.Client</code>, that is provided in the JPublisher run time, to invoke the <code>oracle.jpub.runtime.Server</code> server-side class, which in turn calls the desired Java stored procedure. The <code>Client</code> and <code>Server</code> interfaces are a part of the JPublisher run time. Only static methods with serializable parameters and return types are supported. Beginning with Oracle Database 10<span class="italic">g</span> release 1 (10.1), <code>oracle.jpub.runtime.Server</code> is located in the database.</p>
<p>In Oracle Database 10<span class="italic">g</span> release 2 (10.2), for server-side call-ins, JPublisher generates a PL/SQL wrapper for the stored procedure and the Java client that calls this PL/SQL wrapper. It supports both static and instance methods. The parameter and return types supported are primitive types, Java Beans, Serializable objects, and Oracle Java Database Connectivity (JDBC) types, typically those with the package name <code>oracle.sql</code>.</p>
<p>In Oracle Database 10<span class="italic">g</span> release 2 (10.2), the <code>-java</code> option is deprecated and the JPublisher option for server-side call-in is <code>-dbjava</code>. However, the <code>-java</code> option is still supported for backward compatibility. When the <code>-compatible</code> option is set to <code>10.1</code>, <code>-dbjava</code> acts same as <code>-java</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="codeex.htm#CCJFFHAG">&#34;Generated Code: Server-Side Java Call-in&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009518"></a>
<div id="JJPUB24122" class="sect1">
<h2 class="sect1">Featur<a id="sthref138"></a>es to Filter JPublisher Output</h2>
<p>JPublisher provides some options that allow you to filter what JPublisher produces. For example, publishing just a subset of stored procedures from a package, filtering generated code according to parameter modes or parameter types, and ensuring that generated classes follow the JavaBeans specification.</p>
<p>The following sections provide details:</p>
<ul>
<li>
<p><a href="#i1009722">Publishing a Specified Subset of Functions or Procedures</a></p>
</li>
<li>
<p><a href="#i1009727">Publishing Functions or Procedures According to Parameter Modes or Types</a></p>
</li>
<li>
<p><a href="#i1009732">Ensuring that Generated Methods Adhere to the JavaBeans Specification</a></p>
</li>
</ul>
<a id="i1009722"></a>
<div id="JJPUB24123" class="sect2">
<h3 class="sect2">Publishing a Specified Subs<a id="sthref139"></a>et of Functions or Procedures</h3>
<p>Extended functionality of the <code>-sql</code> option enables you to publish just a subset of the stored functions or procedures from a package or from the SQL top level.</p>
<p>Recall that the following syntax results in publication of all the stored procedures of a package:</p>
<pre>-sql=<span class="italic">plsql_package</span>
</pre>
<p>To publish only a subset of the stored procedures of the package, use the following syntax:</p>
<pre>-sql=<span class="italic">plsql_package</span>(<span class="italic">proc1</span>+<span class="italic">proc2</span>+<span class="italic">proc3</span>+...)
</pre>
<p>You can also specify the subset according to stored procedure names and argument types. Instead of just specifying <code>proc1</code>, you can specify the following:</p>
<pre>proc1(<span class="italic">sqltype1</span>, <span class="italic">sqltype2</span>, ...)
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1009889">&#34;Declaration of Object Types and Packages to Translate&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1009727"></a>
<div id="JJPUB24124" class="sect2">
<h3 class="sect2">Publishing Fu<a id="sthref140"></a><a id="sthref141"></a>nctions or Procedures According to Parameter Modes or Types</h3>
<p>In some cases, particularly for code generation for Web services, not all parameter modes or types are supported in method signatures or attributes for the target usage of your code. The <code>-filtermodes</code> and <code>-filtertypes</code> options are introduced to allow you to filter generated code as needed, according to parameter modes, parameter types, or both.</p>
<p>For each option setting, start with a 1 to include all possibilities by default, that is no filtering is done. Then list specific modes or types that you want to exclude each followed by a minus sign (<code>-</code>). For example:</p>
<pre>-filtertypes=1,.ORADATA-,.ORACLESQL-

-filtermodes=1,out-,inout-
</pre>
<p>Alternatively, you can start with a 0 to filter everything out. Then list specific modes or types that you want to allow each followed by a plus sign (<code>+</code>). For example:</p>
<pre>-filtertypes=0,.CURSOR+,.INDEXBY+

-filtermodes=0,in+,return+
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1012471">&#34;Method Filtering According to Parameter Modes&#34;</a> and <a href="optinfil.htm#i1012472">&#34;Method Filtering According to Parameter Types&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1009732"></a>
<div id="JJPUB24125" class="sect2">
<h3 class="sect2">Ens<a id="sthref142"></a><a id="sthref143"></a>uring that Generated Methods Adhere to the JavaBeans Specification</h3>
<p>The <code>-generatebean</code> option is a flag that you can use to ensure that generated classes follow the JavaBeans specification. The default setting is <code>-generatebean=false</code>.</p>
<p>With the <code>-generatebean=true</code> setting, some generated methods are renamed so that they are not assumed to be JavaBean property getter or setter methods. This is accomplished by prefixing the method names with an underscore (<code>_</code>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1012629">&#34;Code Generation Adherence to the JavaBeans Specification&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009130"></a>
<div id="JJPUB24126" class="sect1">
<h2 class="sect1">Backward Compatibility and Migration</h2>
<p>This section discusses issues of backward compatibility, compatibility between Java Development Kit (JDK) versions, and migration between Oracle8<span class="italic">i</span>, Oracle9<span class="italic">i</span>, Oracle Database 10<span class="italic">g</span>, and Oracle Database 12<span class="italic">c</span> releases of the JPublisher utility.</p>
<p>Default option settings and some features of the generated code changed in Oracle9<span class="italic">i</span>. If you have created an application using an Oracle8<span class="italic">i</span> implementation of JPublisher, you probably will not be able to rerun JPublisher in Oracle Database 10<span class="italic">g</span> (or Oracle9<span class="italic">i</span>) and have the generated classes still work within your application. In addition, there were changes in JPublisher functionality between Oracle9<span class="italic">i</span> and Oracle Database 10<span class="italic">g</span>, although to a lesser degree. The main difference is that <code>.sqlj</code> files are no longer visibly generated by default, but you can change this behavior through a JPublisher setting.</p>
<p>The following subsections cover the details:</p>
<ul>
<li>
<p><a href="#CHDFBCDG">JPublisher Backward Compatibility</a></p>
</li>
<li>
<p><a href="#CHDCFABE">Changes in JPublisher Behavior Between Oracle Database 10g Release 1 and Release 2</a></p>
</li>
<li>
<p><a href="#i1009965">Changes in JPublisher Behavior Between Oracle9i Database and Oracle Database 10g</a></p>
</li>
<li>
<p><a href="#CHDGBIEF">Changes in JPublisher Behavior Between Oracle8<span class="italic">i</span> Database and Oracle9<span class="italic">i</span> Database</a></p>
</li>
<li>
<p><a href="#CHDEFFJJ">JPublisher Backward-Compatibility Modes and Settings</a></p>
</li>
</ul>
<a id="CHDFBCDG"></a>
<div id="JJPUB24127" class="sect2">
<h3 class="sect2">JPublisher Ba<a id="sthref144"></a><a id="sthref145"></a>ckward Compatibility</h3>
<p>The JPublisher run time is packaged with JDBC in the <code>ojdbc14.jar</code>, <code>ojdbc5.8.jar,</code> or <code>ojdbc6*.jar</code> library. Code generated by an earlier version of JPublisher is compatible as follows:</p>
<ul>
<li>
<p>It can continue to run with the current release of the JPublisher run time.</p>
</li>
<li>
<p>It can continue to compile against the current release of the JPublisher run time.</p>
</li>
</ul>
<p>If you use an earlier release of the JPublisher run time and Oracle JDBC drivers in generating code, then you can compile the code against that version of the JPublisher run time.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCFABE"></a>
<div id="JJPUB24128" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changes in JPublisher Behavior Between Oracle Database 10g Release 1 and Release 2<a id="sthref146"></a><a id="sthref147"></a><a id="sthref148"></a></h3>
<p>Since Oracle Database 10<span class="italic">g</span> release 2 (10.2), JPublisher adds the following new APIs for Java classes generated for PL/SQL:</p>
<ul>
<li>
<p>&lt;init&gt;<code>(javax.sql.DataSource)</code></p>
<p>A constructor that takes a <code>java.sql.DataSource</code> object as argument</p>
</li>
<li>
<p><code>setDataSource(javax.sql.DataSource)</code></p>
<p>A method to set the data source that takes a <code>java.sql.DataSource</code> object as argument</p>
</li>
</ul>
<p>These methods allow the Java wrapper to acquire a JDBC connection from the data source provided as argument.</p>
<p>JPublisher supports the use of SQL URI types that store URLs, referred to as data links. In Oracle Database 10<span class="italic">g</span> release 1 (10.1), JPublisher maps the SQL URI type, <code>SYS.URITYPE</code>, and the subtypes, <code>SYS.DBURITYPE</code>, <code>SYS.XDBURITYPE</code>, and <code>SYS.HTTPURITYPE</code>, to <code>java.net.URL</code>. When SQL URI types are used as PL/SQL stored procedures or SQL statement parameter and return types, this mapping works. However, when a SQL URI type is used as an attribute of a SQL type or element of a SQL array type, the mapping raises <code>ClassCastException</code> at run time.</p>
<p>To overcome this issue, in Oracle Database 10<span class="italic">g</span> release 2 (10.2), the SQL URI types are mapped to the <code>ORAData</code> subclasses that are generated by JPublisher. This is similar to the mapping used for user-defined SQL object types. You can also force JPublisher to map a SQL URI type to <code>java.net.URL</code> by specifying the following:</p>
<pre>-adddefaulttypemap=
SYS.URITYPE:java.net.URL:VARCHAR2:SYS.URIFACTORY.GETURI:SYS.SQLJUTL.URI2VCHAR
-adddefaulttypemap=
SYS.DBURITYPE:java.net.URL:VARCHAR2:SYS.DBURITYPE.CREATEURI:SYS.SQLJUTL.URI2VCHAR
-adddefaulttypemap=
SYS.XDBURITYPE:java.net.URL:VARCHAR2:SYS.XDBURITYPE.CREATEURI:SYS.SQLJUTL.URI2VCHAR
-adddefaulttypemap=
SYS.HTTPURITYPE:java.net.URL:VARCHAR2:SYS.HTTPURITYPE.CREATEURI:SYS.SQLJUTL.URI2VCHAR
</pre>
<p>This includes the specification of data conversion functions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datamap.htm#i1006009">&#34;Type Mapping Support Through PL/SQL Conversion Functions&#34;</a> and <a href="optinfil.htm#CIHIFGIB">&#34;Type Map Options&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1009965"></a>
<div id="JJPUB24129" class="sect2">
<h3 class="sect2">Changes in JPublisher Behavior Between Oracle9i Database and Oracle Database 10g</h3>
<p>Regarding backward compatibility, a key difference in JPublisher behavior between Oracle9<span class="italic">i</span> Database and Oracle Database 10<span class="italic">g</span> is that now, by default, SQLJ source code is translated automatically and the <code>.sqlj</code> source files are invisible to the user.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="intro.htm#BHCCICEJ">&#34;JPublisher Usage of the SQLJ Implementation&#34;</a></div>
<p>In addition, note the following changes in JPublisher behavior in Oracle Database 10<span class="italic">g</span>:</p>
<ul>
<li>
<p>In Oracle9<span class="italic">i</span> Database, JPublisher generates SQLJ classes with a <code>protected</code> constructor with a boolean argument to specify whether the object must be initialized. For example:</p>
<pre>protected BaseClass(boolean init) { ... }
</pre>
<p>This constructor is removed in Oracle Database 10<span class="italic">g</span> because it conflicts with the constructor generation for a SQL object type with <code>BOOLEAN</code> attributes.</p>
</li>
<li>
<p>In Oracle Database 10<span class="italic">g</span>, <code>SMALLINT</code> is mapped to <code>int</code> instead of <code>short</code> in Java.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDGBIEF"></a>
<div id="JJPUB24130" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changes in JPublisher Behavior Between Oracle8<span class="italic">i</span> Database and Oracle9<span class="italic">i</span> Database</h3>
<p>Note the following changes in JPublisher behavior, beginning with Oracle9<span class="italic">i</span> Database:</p>
<ul>
<li>
<p>By default, JPublisher does not declare the inner SQLJ connection context class <code>_Ctx</code> for every object type. Instead, it uses the <code>sqlj.runtime.ref.DefaultContext</code> connection context class throughout.</p>
<p>In addition, user-written code must call the <code>getConnectionContext()</code> method to have a connection context instance, instead of using the <code>_ctx</code> connection context field declared in code generated by Oracle8<span class="italic">i</span> versions of JPublisher.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="genclint.htm#i1006511">&#34;Connection Contexts and Instances in SQLJ Classes&#34;</a></div>
</li>
<li>
<p>Even with the <code>-methods=true</code> setting, non-SQLJ classes are generated if the underlying SQL object type or PL/SQL package does not define any methods. However, a setting of <code>-methods=always</code> always results in SQLJ classes being produced.</p>
</li>
<li>
<p>By default, JPublisher generates code that implements the <code>oracle.sql.ORAData</code> interface instead of the deprecated <code>oracle.sql.CustomDatum</code> interface.</p>
</li>
<li>
<p>By default, JPublisher places generated code into the current directory, rather than into a package/directory hierarchy under the current directory.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDCJEJG"></a><a id="JJPUB24131"></a>Changes in User-Written Sub<a id="sthref149"></a>classes of JPublisher-Generated Classes</p>
<p>If you provided user-written subclasses for classes generated by an Oracle8<span class="italic">i</span> version of JPublisher, then you must be aware that several relevant changes were introduced in Oracle9<span class="italic">i</span> Database related to JPublisher code generation. You must make changes in any applications that have Oracle8<span class="italic">i</span> functionality if you want to use them in Oracle9<span class="italic">i</span> Database, Oracle Database 10<span class="italic">g</span>, or Oracle Database 12<span class="italic">c</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the <code>-compatible=8i</code> or <code>-compatible=both8i</code> option setting, then you will not see the changes discussed here and your application will continue to build and work as before. For more information, refer to <a href="optinfil.htm#i1010532">&#34;Backward Compatibility Option&#34;</a>.
<p>However, it is advised that you make the transition to Oracle Database 12<span class="italic">c</span> or Oracle Database 10<span class="italic">g</span> JPublisher functionality, which insulates your user code from implementation details of JPublisher-generated classes.</p>
</div>
<p>You must make the following changes to use your code in Oracle9<span class="italic">i</span> Database, Oracle Database 10<span class="italic">g</span>, or Oracle Database 12<span class="italic">c</span>:</p>
<ul>
<li>
<p>Replace any use of the declared <code>_ctx</code> connection context field with use of the provided <code>getConnectionContext()</code> method. The <code>_ctx</code> field is no longer supported.</p>
</li>
<li>
<p>Replace the explicit implementation of the <code>create()</code> method with a call to a superclass <code>create()</code> method, and use <code>ORAData</code> instead of <code>CustomDatum</code> as the return type.</p>
<p>In the example that follows, assume that <code>UserClass</code> extends <code>BaseClass</code>. Instead of writing the following method in <code>UserClass</code>:</p>
<pre>public CustomDatum create(Datum d, int sqlType) throws SQLException
{
  if (d == null) return null;
  UserClass o = new UserClass();
  o._struct = new MutableStruct((STRUCT) d, _sqlType, _factory);
  o._ctx = new _Ctx(((STRUCT) d).getConnection());
  return o;
}
</pre>
<p>Supply the following:</p>
<pre>public ORAData create(Datum d, int sqlType) throws SQLException
{
  return create(new UserClass(),d,sqlType);
}
</pre>
<p>Alternatively, if the class is part of an inheritance hierarchy, then write the following:</p>
<pre>protected ORAData createExact(Datum d, int sqlType) throws SQLException
{
  return create(new UserClass(),d,sqlType);
}
</pre></li>
<li>
<p>In addition to the <code>getConnectionContext()</code> method, JPublisher provides a <code>getConnection()</code> method that can be used to obtain the JDBC connection instance associated with the object.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDEFFJJ"></a>
<div id="JJPUB24132" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JPublisher Backward-Compatibility Modes and Settings</h3>
<p>JPublisher supports settings for backward-compatibility modes through the <code>-compatible</code> option. At the most elementary level, this includes a setting to explicitly generate <code>.sqlj</code> files, which are transparent to users in Oracle Database 12<span class="italic">c</span> and Oracle Database 10<span class="italic">g</span> by default. There are also Oracle9<span class="italic">i</span> and Oracle8<span class="italic">i</span> compatibility modes, involving differences in the generated code itself as well as the creation of visible <code>.sqlj</code> files. The following topics are discussed:</p>
<ul>
<li>
<p><a href="#CHDBIDIH">Explicit Generation of .sqlj Files</a></p>
</li>
<li>
<p><a href="#CHDFIFAH">Oracle9<span class="italic">i</span> Compatibility Mode</a></p>
</li>
<li>
<p><a href="#CHDDJHAC">Oracle8<span class="italic">i</span> Compatibility Mode</a></p>
</li>
<li>
<p><a href="#CHDIBICF">Individual Settings to Force Oracle8<span class="italic">i</span> JPublisher Behavior</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#i1010532">&#34;Backward Compatibility Option&#34;</a></div>
<a id="CHDBIDIH"></a>
<div id="JJPUB24133" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Explicit Generation of .sqlj Files</h4>
<p>In Oracle Database 12<span class="italic">c</span>, if you want to avoid automatic SQLJ translation so that JPublisher generates <code>.sqlj</code> files that you can work with directly, then you can use the <code>-compatible=sqlj</code> JPublisher setting.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In Oracle Database 12<span class="italic">c</span>, you do not have to invoke the SQLJ translator directly to explicitly translate <code>.sqlj</code> files. You can use the JPublisher <code>-sqlj</code> option instead.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optinfil.htm#CIHFCJHC">&#34;Option to Access SQLJ Functionality&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="CHDFIFAH"></a>
<div id="JJPUB24134" class="sect3">
<h4 class="sect3">Ora<a id="sthref150"></a><a id="sthref151"></a>cle9<span class="italic">i</span> Compatibility Mode</h4>
<p>The <code>-compatible=9i</code> JPublisher option setting enables Oracle9<span class="italic">i</span> compatibility mode. In this mode, JPublisher generates code that is compatible with Oracle9<span class="italic">i</span> SQLJ and JDBC releases. In addition, JPublisher typically produces <code>.sqlj</code> files that are visible to the user, as is the case with Oracle9<span class="italic">i</span> JPublisher.</p>
<p>JPublisher has the following functionality in Oracle9<span class="italic">i</span> compatibility mode:</p>
<ul>
<li>
<p>In SQLJ classes, JPublisher generates a <code>protected</code> constructor with a <code>boolean</code> argument that specifies whether the object must be initialized, as it does in Oracle9<span class="italic">i</span>:</p>
<pre>protected BaseClass(boolean init) { ... }
</pre>
<p>This constructor has neen removed since Oracle Database 10<span class="italic">g</span></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1009965">&#34;Changes in JPublisher Behavior Between Oracle9i Database and Oracle Database 10g&#34;</a></div>
</li>
<li>
<p>The mapping in Java from <code>SMALLINT</code> reverts from <code>int</code>, which is the mapping in Oracle Database 12<span class="italic">c</span>, to <code>short</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDDJHAC"></a>
<div id="JJPUB24135" class="sect3">
<h4 class="sect3">Oracle8<span class="italic">i</span> Comp<a id="sthref152"></a><a id="sthref153"></a>atibility Mode</h4>
<p>Either the <code>-compatible=both8i</code> or <code>-compatible=8i</code> JPublisher setting enables Oracle8<span class="italic">i</span> compatibility mode. In this mode, JPublisher generates code that is compatible with Oracle8<span class="italic">i</span> SQLJ and JDBC releases. In addition, JPublisher typically produces <code>.sqlj</code> files visible to the user, as is the case with Oracle8<span class="italic">i</span> JPublisher.</p>
<p>However, for the use of this mode to be permissible, at least one of the following circumstances must hold:</p>
<ul>
<li>
<p>You translate JPublisher-generated <code>.sqlj</code> files with the default SQLJ <code>-codegen=oracle</code> setting.</p>
</li>
<li>
<p>The JPublisher-generated code runs under JDK 1.5 or later and uses the SQLJ <code>runtime12.jar</code> library or runs in the Oracle Database 12<span class="italic">c</span> release of the server-side Oracle JVM.</p>
</li>
<li>
<p>You run JPublisher with the <code>-methods=false</code> or <code>-methods=none</code> setting.</p>
</li>
</ul>
<p>Note the following functionality in Oracle8<span class="italic">i</span> compatibility mode:</p>
<ul>
<li>
<p>JPublisher generates code that implements the deprecated <code>CustomDatum</code> and <code>CustomDatumFactory</code> interfaces instead of the <code>ORAData</code> and <code>ORADataFactory</code> interfaces, as with the <code>-compatible=customdatum</code> setting. In addition, if you choose the <code>-compatible=both8i</code> setting, then the generated code also implements the <code>ORAData</code> interface, though not <code>ORADataFactory</code>.</p>
</li>
<li>
<p>With the <code>-methods=true</code> setting, JPublisher always generates a SQLJ class for a SQL object type, even if the object type does not define any methods. This is the same as using the <code>-methods=always</code> setting.</p>
</li>
<li>
<p>JPublisher generates connection context declarations and connection context instances on every object wrapper class, as follows:</p>
<pre>#sql static context _Ctx;
protected _Ctx _ctx;
</pre>
<p>This is the same as the <code>-context=generated</code> setting.</p>
</li>
<li>
<p>JPublisher provides a constructor in the wrapper class that takes a generic <code>ConnectionContext</code> instance, which is an instance of any class implementing the standard <code>sqlj.runtime.ConnectionContext</code> interface, as input. In Oracle Database 12<span class="italic">c</span>, the constructor accepts only a <code>DefaultContext</code> instance or an instance of the class specified through the <code>-context</code> option when JPublisher was run.</p>
</li>
<li>
<p>JPublisher does not provide an API for releasing a connection context instance that has been created implicitly on a JPublisher object.</p>
<p>By contrast, the JPublisher utility in Oracle Database 12<span class="italic">c</span> provides both a <code>setConnectionContext()</code> method for explicitly setting the connection context instance for an object, and a <code>release()</code> method for releasing an implicitly created connection context instance of an object.</p>
</li>
</ul>
<p>If you must choose Oracle8<span class="italic">i</span> compatibility mode, then it is advisable to use the <code>-compatible=both8i</code> setting. This permits your application to work in a middle-tier environment, such as Oracle Application Server, in which JDBC connections are obtained through data sources and will likely be wrapped using <code>oracle.jdbc.Oracle</code><code><span class="codeinlineitalic">Xxxx</span></code> interfaces. <code>CustomDatum</code> implementations do not support such wrapped connections.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>-compatible=both8i</code> setting requires a JDBC implementation from Oracle9<span class="italic">i</span> release 1 (9.0.1) or later.</div>
<p>Oracle8<span class="italic">i</span> compatibility mode is now the only way for a <code>_ctx</code> connection context instance to be declared in JPublisher-generated code. No other option setting accomplishes this particular Oracle8<span class="italic">i</span> behavior. The <code>_ctx</code> instance may be useful if you have legacy code that depends on it, but otherwise you should obtain connection context instances through the <code>getConnectionContext()</code> method.</p>
</div>
<!-- class="sect3" -->
<a id="CHDIBICF"></a>
<div id="JJPUB24136" class="sect3">
<h4 class="sect3">Individual Settings to Force Oracle8<span class="italic">i</span> JPublisher Behavior</h4>
<p>The individual option settings detailed in <a href="#CHDEEHID">Table 4-1</a> will produce results, most of which are similar to those produced when using JPublisher in Oracle8<span class="italic">i</span> compatibility mode.</p>
<div id="JJPUB24137" class="tblformal">
<p class="titleintable"><a id="sthref154"></a><a id="CHDEEHID"></a>Table 4-1 JPublisher Backward Compatibility Options</p>
<table class="cellalignment5694" title="JPublisher Backward Compatibility Options" summary="This table notes the behavior of option settings related to JPublisher backward compatibility." dir="ltr">
<thead>
<tr class="cellalignment5685">
<th class="cellalignment5692" id="r1c1-t23">Option Setting</th>
<th class="cellalignment5692" id="r1c2-t23">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r2c1-t23" headers="r1c1-t23">
<p><code>-context=generated</code></p>
</td>
<td class="cellalignment5693" headers="r2c1-t23 r1c2-t23">
<p>This setting results in the declaration of an inner class, <code>_Ctx</code>, for SQLJ connection contexts. This is used instead of the default <code>DefaultContext</code> class or user-specified connection context classes.</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r3c1-t23" headers="r1c1-t23">
<p><code>-methods=always</code></p>
</td>
<td class="cellalignment5693" headers="r3c1-t23 r1c2-t23">
<p>This setting forces generation of SQLJ classes, in contrast to non-SQLJ classes, for all JPublisher-generated classes, whether or not the underlying SQL objects or packages define any methods.</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r4c1-t23" headers="r1c1-t23">
<p><code>-compatible=customdatum</code></p>
</td>
<td class="cellalignment5693" headers="r4c1-t23 r1c2-t23">
<p>For Oracle-specific wrapper classes, this setting results in JPublisher implementing the deprecated <code>oracle.sql.CustomDatum</code> and <code>CustomDatumFactory</code> interfaces instead of the <code>oracle.sql.ORAData</code> and <code>ORADataFactory</code> interfaces.</p>
</td>
</tr>
<tr class="cellalignment5685">
<td class="cellalignment5693" id="r5c1-t23" headers="r1c1-t23">
<p><code>-dir=.</code></p>
</td>
<td class="cellalignment5693" headers="r5c1-t23 r1c2-t23">
<p>Setting this option to a period (<code>.</code>), results in the generation of output files into a hierarchy under the current directory, as was the default behavior in Oracle8<span class="italic">i</span>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>For detailed descriptions of these options, refer to the following:</p>
<ul>
<li>
<p><a href="optinfil.htm#CIHEAGEA">&#34;SQLJ Connection Context Classes&#34;</a></p>
</li>
<li>
<p><a href="optinfil.htm#i1009664">&#34;Generation of Package Classes and Wrapper Methods&#34;</a></p>
</li>
<li>
<p><a href="optinfil.htm#i1010458">&#34;Backward-Compatible Oracle Mapping for User-Defined Types&#34;</a></p>
</li>
<li>
<p><a href="optinfil.htm#CIHJCACI">&#34;Output Directories for Generated Source and Class Files&#34;</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDJHAC">&#34;Oracle8<span class="italic">i</span> Compatibility Mode&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5684">
<tr>
<td class="cellalignment5693">
<table class="cellalignment5689">
<tr>
<td class="cellalignment5688"><a href="datamap.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5688"><a href="genclint.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5696">
<table class="cellalignment5687">
<tr>
<td class="cellalignment5688"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5688"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5688"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5688"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5688"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5688"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>