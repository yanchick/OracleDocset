<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113749"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20JMS%2FXLA%20for%20Event%20Management"></a><title>Using JMS/XLA for Event Management</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1033"/>
<meta name="dcterms.created" content="2015-03-16T15:41:24Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E21638-10"/>
<meta name="dcterms.isVersionOf" content="TTJDV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="writing_app.htm" title="Previous" type="text/html"/>
<link rel="Next" href="jta.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21638-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/11</span> <!-- End Header -->
<div id="TTJDV199" class="chapter"><a id="BABBCEGF"></a>
<h1 class="chapter"><span class="secnum">3</span> Using JMS/XLA for Event Management</h1>
<p>You can use the TimesTen JMS/XLA API to monitor TimesTen for changes to specified tables in a local database and receive real-time notification of these changes. The primary purpose of JMS/XLA is as a high-performance, asynchronous alternative to triggers.</p>
<p>JMS/XLA implements Java Message Service (JMS) interfaces to make the functionality of the TimesTen Transaction Log API (XLA) available to Java applications. JMS information and resources are available at the following location:</p>
<p><code dir="ltr"><a href="http://www.oracle.com/technetwork/java/jms/index.html">http://www.oracle.com/technetwork/java/jms/index.html</a></code></p>
<p>In addition, the standard JMS API documentation is installed with the TimesTen at the following location:</p>
<p><code dir="ltr"><span class="codeinlineitalic">install_dir</span></code><code dir="ltr">/3rdparty/jms1.1/doc/api/index.html</code></p>
<p>For information about tuning TimesTen JMS/XLA applications for improved performance, see <a href="tuning.htm#BCGJCADH">&#34;Tuning JMS/XLA applications&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the unlikely event that the TimesTen replication solutions described in <a class="olink TTREP" href="../TTREP/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span></a> do not meet your needs, it is possible to use JMS/XLA to build a custom data replication solution.</div>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#BABJGHJB">JMS/XLA concepts</a></p>
</li>
<li>
<p><a href="#BABDGIAE">JMS/XLA and Oracle GDK dependency</a></p>
</li>
<li>
<p><a href="#BABDIBHC">Connecting to XLA</a></p>
</li>
<li>
<p><a href="#BABBBFGC">Monitoring tables for updates</a></p>
</li>
<li>
<p><a href="#BABGIJHJ">Receiving and processing updates</a></p>
</li>
<li>
<p><a href="#BABDFHCC">Terminating a JMS/XLA application</a></p>
</li>
<li>
<p><a href="#BABCJCDB">Using JMS/XLA as a replication mechanism</a></p>
</li>
</ul>
<a id="BABJGHJB"></a>
<div id="TTJDV200" class="sect1">
<h2 class="sect1">JM<a id="sthref206"></a>S/XLA concepts</h2>
<p>Java applications can use the JMS/XLA API to receive event notifications from TimesTen. JMS/XLA uses the JMS publish-subscribe interface to provide access to XLA updates.</p>
<p>Subscribe to updates by establishing a JMS <code dir="ltr">Session</code> instance that provides a connection to XLA and then creating a durable subscriber (<code dir="ltr">TopicSubscriber</code>). You can receive and process messages synchronously through the subscriber, or you can implement a listener (<code dir="ltr">MessageListener</code>) to process the updates asynchronously.</p>
<p>JMS/XLA is designed for applications that want to monitor a local database. TimesTen and the application receiving the notifications must reside on the same system.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JMS/XLA API is a wrapper for XLA. XLA obtains update records directly from the transaction log buffer or transaction log files, so the records are available until they are read. XLA also allows multiple readers to access transaction log updates simultaneously.
<p>See <a class="olink TTCDV246" href="../TTCDV/xla_event.htm#TTCDV246">&#34;XLA and TimesTen Event Management&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span> for information about XLA.</p>
</div>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BABFJHJF">How XLA reads records from the transaction log</a></p>
</li>
<li>
<p><a href="#BABGAFJE">XLA and materialized views</a></p>
</li>
<li>
<p><a href="#BABCGBIH">XLA bookmarks</a></p>
</li>
<li>
<p><a href="#BABIIIFH">JMS/XLA configuration file and topics</a></p>
</li>
<li>
<p><a href="#BABDIFCG">XLA updates</a></p>
</li>
<li>
<p><a href="#BABFJDBJ">XLA acknowledgment modes</a></p>
</li>
<li>
<p><a href="#CIHIDBJJ">Access control impact on XLA</a></p>
</li>
<li>
<p><a href="#BABIGFDG">XLA limitations</a></p>
</li>
</ul>
<a id="BABFJHJF"></a>
<div id="TTJDV201" class="sect2">
<h3 class="sect2">How XLA reads records from the transaction log</h3>
<p>As applications modify a database, TimesTen generates transaction log records that describe the changes made to the data and other events such as transaction commits.</p>
<p>New transaction log records are always written to the end of the transaction log buffer as they are generated. Transaction log records are periodically flushed in batches from the log buffer in memory to transaction log files on disk.</p>
<p>Applications can use XLA to monitor the transaction log for changes to the database. XLA reads through the transaction log, filters the log records, and delivers XLA applications with a list of transaction records that contain the changes to the tables and columns of interest.</p>
<p>XLA sorts the records into discrete transactions. If multiple applications are updating the database simultaneously, transaction log records from the different applications are interleaved in the transaction log.</p>
<p>XLA transparently extracts all transaction log records associated with a particular transaction and delivers them in a contiguous list to the application.</p>
<p>Only the records for committed transactions are returned. They are returned in the order in which their final commit record appears in the transaction log. XLA filters out records associated with changes to the database that have not yet committed.</p>
<p>If a change is made but then rolled back, XLA does not deliver the records for the aborted transaction to the application.</p>
<p>Consider the example transaction log illustrated in <a href="#BABHAJAB">Figure 3-1</a> and <a href="#BABECDJD">Example 3-1</a> that follow, which illustrate most of these basic XLA concepts.</p>
<div id="TTJDV202" class="figure">
<p class="titleinfigure"><a id="BABHAJAB"></a>Figure 3-1 Records extracted from the transaction log</p>
<img width="626" height="166" src="img/transactionlog.gif" alt="Description of Figure 3-1 follows"/><br/>
<a id="sthref207" href="img_text/transactionlog.htm">Description of &#34;Figure 3-1 Records extracted from the transaction log&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div id="TTJDV203" class="example">
<p class="titleinexample"><a id="BABECDJD"></a>Example 3-1 Reading transaction log records</p>
<p>In this example, the transaction log contains the following records:</p>
<br/>
<code dir="ltr">CT1</code> - Application <code dir="ltr">C</code> updates row 1 of table <code dir="ltr">W</code> with value 7.7.<br/>
<code dir="ltr">BT1</code> - Application <code dir="ltr">B</code> updates row 3 of table <code dir="ltr">X</code> with value 2.<br/>
<code dir="ltr">CT2</code> - Application <code dir="ltr">C</code> updates row 9 of table <code dir="ltr">W</code> with value 5.6.<br/>
<code dir="ltr">BT2</code> - Application <code dir="ltr">B</code> updates row 2 of table <code dir="ltr">Y</code> with value &#34;XYZ&#34;.<br/>
<code dir="ltr">AT1</code> - Application <code dir="ltr">A</code> updates row 1 of table <code dir="ltr">Z</code> with value 3.<br/>
<code dir="ltr">AT2</code> - Application <code dir="ltr">A</code> updates row 3 of table <code dir="ltr">Z</code> with value 4.<br/>
<code dir="ltr">BT3</code> - Application <code dir="ltr">B</code> commits its transaction.<br/>
<code dir="ltr">AT3</code> - Application <code dir="ltr">A</code> rolls back its transaction.<br/>
<code dir="ltr">CT3</code> - Application <code dir="ltr">C</code> commits its transaction.<br/>
<p>An XLA application that is set up to detect changes to tables <code dir="ltr">W</code>, <code dir="ltr">Y</code>, and <code dir="ltr">Z</code> would see the following:</p>
<br/>
<code dir="ltr">BT2</code> and <code dir="ltr">BT3</code> - Update row 2 of table <code dir="ltr">Y</code> with value &#34;XYZ&#34; and commit.<br/>
<code dir="ltr">CT1</code> - Update row 1 of table <code dir="ltr">W</code> with value 7.7.<br/>
<code dir="ltr">CT2</code> and <code dir="ltr">CT3</code> - Update row 9 of table <code dir="ltr">W</code> with value 5.6 and commit.<br/>
<p>This example demonstrates the following:</p>
<ul>
<li>
<p>Transaction records for application <code dir="ltr">B</code> and application <code dir="ltr">C</code> all appear.</p>
</li>
<li>
<p>Though the records for application <code dir="ltr">C</code> begin to appear in the transaction log before those for application <code dir="ltr">B</code>, the commit for application <code dir="ltr">B</code> (<code dir="ltr">BT3</code>) appears in the transaction log before the commit for application <code dir="ltr">C</code> (<code dir="ltr">CT3</code>). As a result, the records for application <code dir="ltr">B</code> are returned to the XLA application ahead of those for application <code dir="ltr">C</code>.</p>
</li>
<li>
<p>The application <code dir="ltr">B</code> update to table <code dir="ltr">X</code> (<code dir="ltr">BT1</code>) is not presented because XLA is not set up to detect changes to table <code dir="ltr">X</code>.</p>
</li>
<li>
<p>The application <code dir="ltr">A</code> updates to table <code dir="ltr">Z</code> (<code dir="ltr">AT1</code> and <code dir="ltr">AT2</code>) are never presented because it did not commit and was rolled back (<code dir="ltr">AT3</code>).</p>
</li>
</ul>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABGAFJE"></a>
<div id="TTJDV204" class="sect2">
<h3 class="sect2">XL<a id="sthref208"></a><a id="sthref209"></a>A and materialized views</h3>
<p>You can use XLA to track changes to both tables and materialized views. A materialized view provides a single source from which you can track changes to selected rows and columns in multiple detail tables. Without a materialized view, the XLA application would have to monitor and filter the update records from all of the detail tables, including records reflecting updates to rows and columns of no interest to the application.</p>
<p>In general, there are no operational differences between the XLA mechanisms used to track changes to a table or a materialized view. However, for asynchronous materialized views, be aware that the order of XLA notifications for an asynchronous view is not necessarily the same as it would be for the associated detail tables, or the same as it would be for a synchronous view. For example, if there are two inserts to a detail table, they may be done in the opposite order in the asynchronous materialized view. Furthermore, updates may be reported by XLA as a delete followed by an insert, and multiple operations (such as multiple inserts or multiple deletes) may be combined into a single operation. Applications that depend on precise ordering should not use asynchronous materialized views.</p>
<p>For more information about materialized views, see the following:</p>
<ul>
<li>
<p><a class="olink TTSQL293" href="../TTSQL/state.htm#TTSQL293">&#34;CREATE MATERIALIZED VIEW&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span></p>
</li>
<li>
<p><a class="olink TTOPR359" href="../TTOPR/comp.htm#TTOPR359">&#34;Understanding materialized views&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCGBIH"></a>
<div id="TTJDV205" class="sect2">
<h3 class="sect2">XLA bookm<a id="sthref210"></a>arks</h3>
<p>An XLA bookmark marks the read position of an XLA subscriber application in the transaction log. Bookmarks facilitate durable subscriptions, enabling an application to disconnect from a topic and then reconnect to continue receiving updates where it left off.</p>
<p>The rest of this section covers the following:</p>
<ul>
<li>
<p><a href="#BABHGFCJ">How bookmarks work</a></p>
</li>
<li>
<p><a href="#BABCAFDB">Replicated bookmarks</a></p>
</li>
<li>
<p><a href="#BABIEDID">XLA bookmarks and transaction log holds</a></p>
</li>
</ul>
<a id="BABHGFCJ"></a>
<div id="TTJDV206" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">How bookmarks work</h4>
<p>When you create a message consumer for XLA, you always use a durable <code dir="ltr">TopicSubscriber</code>. The subscription identifier you specify when you create the subscriber is used as the XLA bookmark name. When you use the <code dir="ltr">ttXlaSubscribe</code> and <code dir="ltr">ttXlaUnsubscribe</code> built-in procedures through JDBC to start and stop the XLA subscription for a table, you explicitly specify the name of the bookmark to be used.</p>
<p>Bookmarks are reset to the last read position whenever an acknowledgment is received. For more information about how update messages are acknowledged, see the <a href="#BABFJDBJ">&#34;XLA acknowledgment modes&#34;</a>.</p>
<p>You can remove a durable subscription by calling <code dir="ltr">unsubscribe()</code> on the JMS <code dir="ltr">Session</code> object. This deletes the corresponding XLA bookmark and forces a new subscription to be created when you reconnect. For more information see <a href="#BABBEDIH">&#34;Deleting bookmarks&#34;</a>.</p>
<p>A bookmark subscription cannot be altered when it is in use. To alter a subscription, you must close the message consumer, alter the subscription using <code dir="ltr">ttXlaSubscribe</code> and <code dir="ltr">ttXlaUnsubscribe</code>, and open the message consumer.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also use the <code dir="ltr">ttXlaBookmarkCreate</code> TimesTen built-in procedure to create bookmarks. See <a class="olink TTREF312" href="../TTREF/proced.htm#TTREF312">&#34;ttXlaBookmarkCreate&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for information about that function.</div>
</div>
<!-- class="sect3" -->
<a id="BABCAFDB"></a>
<div id="TTJDV207" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Repl<a id="sthref211"></a><a id="sthref212"></a>icated bookmarks</h4>
<p>If you are using an active standby pair replication scheme, you have the option of using <span class="italic">replicated bookmarks</span>, according to the <code dir="ltr">replicatedBookmark</code> attribute of the <code dir="ltr">&lt;topic&gt;</code> element in the <code dir="ltr">jmsxla.xml</code> file as discussed in <a href="#BABIIIFH">&#34;JMS/XLA configuration file and topics&#34;</a>. For a replicated bookmark, operations on the bookmark are replicated to the standby database as appropriate, assuming there is suitable write privilege for the standby. This allows more efficient recovery of your bookmark positions if a failover occurs.</p>
<p>When you use replicated bookmarks, steps must be taken in the following order:</p>
<ol>
<li>
<p>Create the active standby pair replication scheme. (This is accomplished by the <code dir="ltr">create active standby pair</code> operation, or by the <code dir="ltr">ttCWAdmin -create</code> command in a Clusterware-managed environment.)</p>
</li>
<li>
<p>Create the bookmarks.</p>
</li>
<li>
<p>Subscribe the bookmarks.</p>
</li>
<li>
<p>Start the active standby pair, at which time duplication to the standby occurs and replication begins. (This is accomplished by the <code dir="ltr">ttRepAdmin -duplicate</code> command, or by the <code dir="ltr">ttCWAdmin -start</code> command in a Clusterware-managed environment.)</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>Alternatively, if you use <code dir="ltr">ttXlaBookmarkCreate</code> to create a bookmark, that function has a parameter for specifying a replicated bookmark.</p>
</li>
<li>
<p>If you specify replicated bookmarks in the JMS/XLA configuration file, JMS/XLA will create and subscribe to the bookmarks when the application is started. (Also see <a href="#BABIIIFH">&#34;JMS/XLA configuration file and topics&#34;</a>.)</p>
</li>
</ul>
</div>
<p>Be aware of the following usage notes:</p>
<ul>
<li>
<p>The position of the bookmark in the standby database is very close to that of the bookmark in the active database; however, because the replication of acknowledge operations is asynchronous, you may see a small window of duplicate updates when there is a failover, depending on how often acknowledge operations are performed.</p>
</li>
<li>
<p>It is permissible to drop the active standby pair scheme while replicated bookmarks exist. The bookmarks of course cease to be replicated at that point, but are not deleted. If you subsequently re-enable the active standby pair scheme, these bookmarks are automatically added to the scheme.</p>
</li>
<li>
<p>You cannot delete replicated bookmarks while the replication agent is running.</p>
</li>
<li>
<p>You can only read and acknowledge a replicated bookmark in the active database. Each time you acknowledge a replicated bookmark, the acknowledge operation is asynchronously replicated to the standby database.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABIEDID"></a>
<div id="TTJDV343" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">XLA bookmarks and transaction log holds</h4>
<p>You should be aware that when XLA is in use, there is a hold on TimesTen transaction log files until the XLA bookmark advances. The hold prevents transaction log files from being purged until XLA can confirm it no longer needs them. If a bookmark becomes stuck, which can occur if an XLA application terminates unexpectedly or disconnects without first deleting its bookmark or disabling change tracking, the log hold persists and there may be an excessive accumulation of transaction log files. This accumulation may result in disk space being filled.</p>
<p>For information about monitoring and addressing this situation, see <a class="olink TTOPR711" href="../TTOPR/trans.htm#TTOPR711">&#34;Monitoring accumulation of transaction log files&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABIIIFH"></a>
<div id="TTJDV208" class="sect2">
<h3 class="sect2">JMS/<a id="sthref213"></a><a id="sthref214"></a><a id="sthref215"></a><a id="sthref216"></a>XLA configuration file and topics</h3>
<p>To connect to XLA, establish a connection to a JMS <code dir="ltr">Topic</code> object that corresponds to a particular database. The JMS/XLA configuration file provides the mapping between topic names and databases.</p>
<p>You can specify a replicated bookmark by setting <code dir="ltr">replicatedBookmark=&#34;yes&#34;</code> in the <code dir="ltr">&lt;topic&gt;</code> element when you specify the topic. The default setting is <code dir="ltr">&#34;no&#34;</code>. Also see <a href="#BABCGBIH">&#34;XLA bookmarks&#34;</a>.</p>
<p>By default, JMS/XLA looks for a configuration file named <code dir="ltr">jmsxla.xml</code> in the current working directory. If you want to use another name or location for the file, you must specify it as part of the environment variable in the <code dir="ltr">InitialContext</code> class and add the location to the classpath.</p>
<div id="TTJDV209" class="example">
<p class="titleinexample"><a id="BABBGFHH"></a>Example 3-2 Specifying the JMS/XLA configuration file</p>
<p>The following code specifies the configuration file as part of the environment variable in the <code dir="ltr">InitialContext</code> class.</p>
<pre dir="ltr">Hashtable env = new Hashtable();
env.put(Context.INITIAL_CONTEXT_FACTORY,
  &#34;com.timesten.dataserver.jmsxla.SimpleInitialContextFactory&#34;);
env.put(XlaConstants.CONFIG_FILE_NAME, &#34;/newlocation.xml&#34;);
InitialContext ic = new InitialContext(env);
</pre>
<p>The JMS/XLA API uses the class loader to locate the JMS/XLA configuration file if <code dir="ltr">XlaConstants.CONFIG_FILE_NAME</code> is set. In this example, the JMS/XLA API searches for the <code dir="ltr">newlocation.xml</code> file in the top directory in both the location specified in the <code dir="ltr">CLASSPATH</code> environment variable and in the JAR files specified in the <code dir="ltr">CLASSPATH</code> variable.</p>
<p>The JMS/XLA configuration file can also be located in subdirectories, as follows:</p>
<pre dir="ltr">env.put(XlaConstants.CONFIG_FILE_NAME,
&#34;/com/mycompany/myapplication/deepinside.xml&#34;);
</pre>
<p>In this case, the JMS/XLA API searches for the <code dir="ltr">deepinside.xml</code> file in the <code dir="ltr">com/mycompany/myapplication</code> subdirectory in both the location specified in the <code dir="ltr">CLASSPATH</code> environment variable and in the JAR files specified in the <code dir="ltr">CLASSPATH</code> variable.</p>
<p>The JMS/XLA API uses the first configuration file that it finds.</p>
</div>
<!-- class="example" -->
<div id="TTJDV210" class="example">
<p class="titleinexample"><a id="BABEEDBI"></a>Example 3-3 Defining a topic in the configuration file</p>
<p>A topic definition in the configuration file consists of a name, a connection string, and a prefetch value that specifies how many updates to retrieve at a time.</p>
<p>For example, this configuration maps the <code dir="ltr">DemoDataStore</code> topic to the <code dir="ltr">TestDB</code> DSN:</p>
<pre dir="ltr">&lt;xlaconfig&gt;
  &lt;topics&gt;
    &lt;topic name=&#34;DemoDataStore&#34;
      connectionString=&#34;DSN=TestDB&#34;
      xlaPrefetch=&#34;100&#34; /&gt;
  &lt;/topics&gt;
&lt;/xlaconfig&gt;
</pre></div>
<!-- class="example" -->
<div id="TTJDV211" class="example">
<p class="titleinexample"><a id="sthref217"></a>Example 3-4 Defining a topic to use replicated bookmarks</p>
<p>A topic definition can also specify whether a replicated bookmark should be used. The following repeats the preceding example, but with a replicated bookmark.</p>
<pre dir="ltr">&lt;xlaconfig&gt;
  &lt;topics&gt;
    &lt;topic name=&#34;DemoDataStore&#34;
      connectionString=&#34;DSN=TestDB&#34;
      xlaPrefetch=&#34;100&#34; replicatedBookmark=&#34;yes&#34; /&gt;
  &lt;/topics&gt;
&lt;/xlaconfig&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABDIFCG"></a>
<div id="TTJDV212" class="sect2">
<h3 class="sect2">XL<a id="sthref218"></a><a id="sthref219"></a><a id="sthref220"></a>A updates</h3>
<p>Applications receive XLA updates as JMS <code dir="ltr">MapMessage</code> objects. A <code dir="ltr">MapMessage</code> object contains a set of typed name and value pairs that correspond to the fields in an XLA update header.</p>
<p>You can access the message fields using the <code dir="ltr">MapMessage</code> getter methods. The <code dir="ltr">getMapNames()</code> method returns an <code dir="ltr">Enumeration</code> object that contains the names of all of the fields in the message. You can retrieve individual fields from the message by name. All reserved field names begin with two underscores, for example <code dir="ltr">__TYPE</code>.</p>
<p>All update messages have a <code dir="ltr">__TYPE</code> field that indicates what type of update the message contains. The types are specified as integer values. As a convenience, you can use the constants defined in <code dir="ltr">com.timesten.dataserver.jmsxla.XlaConstants</code> to compare against the integer types. The supported types are described in <a href="#BABIEHJH">Table 3-1</a>.</p>
<div id="TTJDV213" class="tblhruleformal">
<p class="titleintable"><a id="sthref221"></a><a id="BABIEHJH"></a>Table 3-1 XLA update types</p>
<table class="cellalignment6143" title="XLA update types" summary="This table contains descriptions of XLA update types." dir="ltr">
<thead>
<tr class="cellalignment6137">
<th class="cellalignment6144" id="r1c1-t6">Update type</th>
<th class="cellalignment6144" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">INSERT</code></p>
</td>
<td class="cellalignment6145" headers="r2c1-t6 r1c2-t6">
<p>A row has been added.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">UPDATE</code></p>
</td>
<td class="cellalignment6145" headers="r3c1-t6 r1c2-t6">
<p>A row has been modified.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DELETE</code></p>
</td>
<td class="cellalignment6145" headers="r4c1-t6 r1c2-t6">
<p>A row has been removed.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">COMMIT_ONLY</code></p>
</td>
<td class="cellalignment6145" headers="r5c1-t6 r1c2-t6">
<p>A transaction has been committed.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">CREATE_TABLE</code></p>
</td>
<td class="cellalignment6145" headers="r6c1-t6 r1c2-t6">
<p>A table has been created.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DROP_TABLE</code></p>
</td>
<td class="cellalignment6145" headers="r7c1-t6 r1c2-t6">
<p>A table has been dropped.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">CREATE_INDEX</code></p>
</td>
<td class="cellalignment6145" headers="r8c1-t6 r1c2-t6">
<p>An index has been created.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DROP_INDEX</code></p>
</td>
<td class="cellalignment6145" headers="r9c1-t6 r1c2-t6">
<p>An index has been dropped.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">ADD_COLUMNS</code></p>
</td>
<td class="cellalignment6145" headers="r10c1-t6 r1c2-t6">
<p>New columns have been added to the table.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r11c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DROP_COLUMNS</code></p>
</td>
<td class="cellalignment6145" headers="r11c1-t6 r1c2-t6">
<p>Columns have been removed from the table.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r12c1-t6" headers="r1c1-t6">
<p><code dir="ltr">CREATE_VIEW</code></p>
</td>
<td class="cellalignment6145" headers="r12c1-t6 r1c2-t6">
<p>A materialized view has been created.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r13c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DROP_VIEW</code></p>
</td>
<td class="cellalignment6145" headers="r13c1-t6 r1c2-t6">
<p>A materialized view has been dropped.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r14c1-t6" headers="r1c1-t6">
<p><code dir="ltr">CREATE_SEQ</code></p>
</td>
<td class="cellalignment6145" headers="r14c1-t6 r1c2-t6">
<p>A sequence has been created.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r15c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DROP_SEQ</code></p>
</td>
<td class="cellalignment6145" headers="r15c1-t6 r1c2-t6">
<p>A sequence has been dropped.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r16c1-t6" headers="r1c1-t6">
<p><code dir="ltr">CREATE_SYNONYM</code></p>
</td>
<td class="cellalignment6145" headers="r16c1-t6 r1c2-t6">
<p>A synonym has been created.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r17c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DROP_SYNONYM</code></p>
</td>
<td class="cellalignment6145" headers="r17c1-t6 r1c2-t6">
<p>A synonym has been dropped.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r18c1-t6" headers="r1c1-t6">
<p><code dir="ltr">TRUNCATE</code></p>
</td>
<td class="cellalignment6145" headers="r18c1-t6 r1c2-t6">
<p>All rows in the table have been deleted.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>For more information about the contents of an XLA update message, see <a href="jmsxla_ref.htm#CHEGCFEC">&#34;JMS/XLA MapMessage contents&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABFJDBJ"></a>
<div id="TTJDV214" class="sect2">
<h3 class="sect2">XL<a id="sthref222"></a><a id="sthref223"></a>A acknowledgment modes</h3>
<p>The XLA acknowledgment mechanism is designed to ensure that an application has not only received a message, but has successfully processed it. Acknowledging an update permanently resets the application XLA bookmark to the last record that was read. This prevents previously returned records from being reread, ensuring that an application receives only new batches of records if the bookmark is reused when an application reconnects to XLA.</p>
<p>JMS/XLA can automatically acknowledge XLA update messages, or applications can choose to acknowledge messages explicitly. You specify how updates are to be acknowledged when you create the <code dir="ltr">Session</code> object.</p>
<p>JMS/XLA supports three acknowledgment modes:</p>
<ul>
<li>
<p><code dir="ltr">AUTO_ACKNOWLEDGE</code>: In this mode, updates are automatically acknowledged as you receive them. Each message is delivered only once. Duplicate messages are not sent, so messages might be lost if there is an application failure. Messages are always delivered and acknowledged individually, so JMS/XLA does not prefetch multiple records. The <code dir="ltr">xlaprefetch</code> attribute in the topic is ignored.</p>
</li>
<li>
<p><code dir="ltr">DUPS_OK_ACKNOWLEDGE</code>: In this mode, updates are automatically acknowledged, but duplicate messages might be delivered when there is an application failure. JMS/XLA prefetches records according to the <code dir="ltr">xlaprefetch</code> attribute specified for the topic and sends an acknowledgment when the last record in a prefetched block is read. If the application fails before reading all of the prefetched records, all of the records in the block are presented to the application it restarts.</p>
<p>See <a href="#BABIIIFH">&#34;JMS/XLA configuration file and topics&#34;</a> for examples setting <code dir="ltr">xlaprefetch</code>.</p>
</li>
<li>
<p><code dir="ltr">CLIENT_ACKNOWLEDGE</code>: In this mode, applications are responsible for acknowledging receipt of update messages by calling <code dir="ltr">acknowledge()</code> on the <code dir="ltr">MapMessage</code> instance. JMS/XLA prefetches records according to the <code dir="ltr">xlaprefetch</code> attribute specified for the topic.</p>
</li>
</ul>
<p>The following example sets the acknowledgment mode:</p>
<pre dir="ltr">Session session = connection.createSession (false, Session.CLIENT_ACKNOWLEDGE);
</pre>
<p>Also see <a href="tuning.htm#BCGIJJCF">&#34;Reduce frequency of update acknowledgments&#34;</a>.</p>
<div id="TTJDV215" class="sect3"><a id="sthref224"></a>
<h4 class="sect3">Prefetching updates</h4>
<p>Prefetching multiple update records at a time is more efficient than obtaining each update record from XLA individually. Because updates are not prefetched when you use <code dir="ltr">AUTO_ACKNOWLEDGE</code> mode, it can be slower than the other modes. If possible, you should design your application to tolerate duplicate updates so you can use <code dir="ltr">DUPS_OK_ACKNOWLEDGE</code>, or explicitly acknowledge updates. Explicitly acknowledging updates usually yields the best performance, as long as you can avoid acknowledging each message individually.</p>
</div>
<!-- class="sect3" -->
<div id="TTJDV216" class="sect3"><a id="sthref225"></a>
<h4 class="sect3">Acknowledging updates</h4>
<p>To explicitly acknowledge an XLA update, call <code dir="ltr">acknowledge()</code> on the update message. Acknowledging a message implicitly acknowledges all previous messages. Typically, you receive and process multiple update messages between acknowledgments. If you are using the <code dir="ltr">CLIENT_ACKNOWLEDGE</code> mode and intend to reuse a durable subscription in the future, you should call <code dir="ltr">acknowledge()</code> to reset the bookmark to the last-read position before exiting.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIDBJJ"></a>
<div id="TTJDV217" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ac<a id="sthref226"></a><a id="sthref227"></a>cess control impact on XLA</h3>
<p><a href="writing_app.htm#BABFJBFE">&#34;Considering TimesTen features for access control&#34;</a> provides a brief overview of how TimesTen access control affects operations in the database. Access control impacts XLA, as follows:</p>
<ul>
<li>
<p>Any XLA functionality requires the system privilege <code dir="ltr">XLA</code>. This includes connecting to TimesTen (which also requires the <code dir="ltr">CREATE SESSION</code> privilege) as an XLA reader and executing the TimesTen XLA built-in procedures <code dir="ltr">ttXlaBookmarkCreate</code>, <code dir="ltr">ttXlaBookmarkDelete</code>, <code dir="ltr">ttXlaSubscribe</code>, and <code dir="ltr">ttXlaUnsubscribe</code>, all of which are documented in <a class="olink TTREF213" href="../TTREF/proced.htm#TTREF213">&#34;Built-In Procedures&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</li>
<li>
<p>A user with the <code dir="ltr">XLA</code> privilege has capabilities equivalent to the <code dir="ltr">SELECT ANY TABLE</code>, <code dir="ltr">SELECT ANY VIEW</code>, and <code dir="ltr">SELECT ANY SEQUENCE</code> system privileges.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABIGFDG"></a>
<div id="TTJDV341" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XLA limitations</h3>
<p>Be aware of the following XLA limitations when you use TimesTen JMS/XLA:</p>
<ul>
<li>
<p>JMS/XLA is available on all platforms supported by TimesTen. However, XLA does not support data transfer between different platforms or between 32-bit and 64-bit versions of the same platform.</p>
</li>
<li>
<p>JMS/XLA support for LOBs is limited. See <a href="#BABBBFGC">&#34;Monitoring tables for updates&#34;</a> for information.</p>
</li>
<li>
<p>JMS/XLA does not support applications linked with a driver manager library or the client/server library.</p>
</li>
<li>
<p>An XLA reader cannot subscribe to a table that uses in-memory columnar compression.</p>
</li>
<li>
<p>Fo<a id="sthref228"></a>r autorefresh cache groups, the change-tracking trigger on Oracle Database does not have column-level resolution. (To have that would be very expensive.) Therefore the autorefresh feature updates all the columns in the row, and XLA can only report that all the columns have changed, even if data did not actually change in all columns.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDGIAE"></a>
<div id="TTJDV218" class="sect1">
<h2 class="sect1">JM<a id="sthref229"></a><a id="sthref230"></a><a id="sthref231"></a><a id="sthref232"></a><a id="sthref233"></a>S/XLA and Oracle GDK dependency</h2>
<p>The JMS/XLA API uses <code dir="ltr">orai18n.jar</code>, part of the Oracle Globalization Development Kit (GDK) for translating from the database character set specified by the <code dir="ltr">DatabaseCharacterSet</code> attribute to UTF-16 encoding. The JMS/XLA API supports a specific version of the GDK with each TimesTen release. If JMS/XLA finds other versions of the GDK loaded in the JVM, it displays a severe warning and continues processing. You can find out the GDK version supported by JMS/XLA by entering the following commands:</p>
<pre dir="ltr">$ cd <span class="italic">install_dir</span>/lib
$ java -cp ./orai18n.jar oracle.i18n.util.GDKOracleMetaData -version
</pre>
<p>Also see <a href="env_setup.htm#CHDBGHCA">&#34;Compiling Java applications&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABDIBHC"></a>
<div id="TTJDV219" class="sect1">
<h2 class="sect1">Con<a id="sthref234"></a><a id="sthref235"></a>necting to XLA</h2>
<p>To connect to XLA so you can receive updates, use a JMS connection factory to create a connection. Then use the connection to establish a session. When you are ready to start processing updates, call <code dir="ltr">start()</code> on the connection to enable message dispatching. This is shown in <a href="#BABEFIIJ">Example 3-5</a> that follows, from the <code dir="ltr">syncJMS</code> Quick Start demo.</p>
<div id="TTJDV220" class="example">
<p class="titleinexample"><a id="BABEFIIJ"></a>Example 3-5 Connecting to XLA</p>
<pre dir="ltr">/* JMS connection */
private javax.jms.TopicConnection connection; 
/* JMS session */
private TopicSession session; 
...
// get Connection
Context messaging = new InitialContext(); 
TopicConnectionFactory connectionFactory =
        (TopicConnectionFactory)messaging.lookup(&#34;TopicConnectionFactory&#34;); 
connection = connectionFactory.createTopicConnection(); 
connection.start(); 
...
// get Session
session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABBBFGC"></a>
<div id="TTJDV221" class="sect1">
<h2 class="sect1">Monit<a id="sthref236"></a><a id="sthref237"></a><a id="sthref238"></a><a id="sthref239"></a>oring tables for updates</h2>
<p>Before you can start receiving updates, you must inform XLA which tables you want to monitor for changes.</p>
<p>To subscribe to changes and turn on XLA publishing for a table, call the <code dir="ltr">ttXlaSubscribe</code> built-in procedure through JDBC.</p>
<p>When you use <code dir="ltr">ttXlaSubscribe</code> to enable XLA publishing for a table, you must specify parameters for the name of the table and the name of the bookmark that are used to track the table:</p>
<pre dir="ltr">ttXlaSubscribe(<span class="italic">user.table</span>, <span class="italic">mybookmark</span>)
</pre>
<p>For example, call <code dir="ltr">ttXlaSubscribe</code> by the JDBC <code dir="ltr">CallableStatement</code> interface:</p>
<pre dir="ltr">Connection con;

CallableStatement cStmt;
...
cStmt = con.prepareCall(&#34;{call ttXlaSubscribe(user.table, mybookmark)}&#34;);
cStmt.execute();
</pre>
<p>Use <code dir="ltr">ttXlaUnsubscribe</code> to unsubscribe from the table during shutdown. For more information, see <a href="#BABGBEAD">&#34;Unsubscribing from a table&#34;</a>.</p>
<p>The application can verify <a id="sthref240"></a><a id="sthref241"></a><a id="sthref242"></a>table subscriptions by checking the <code dir="ltr">SYS.XLASUBSCRIPTIONS</code> system table.</p>
<p>For more information about using TimesTen built-in procedures in a Java application, see <a href="writing_app.htm#BABIJJHA">&#34;Using CALL to execute procedures and functions&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">No<a id="sthref243"></a><a id="sthref244"></a>te:</p>
LOB support in JMS/XLA is limited, as follows:
<ul>
<li>
<p>You can subscribe to tables containing LOB columns, but information about the LOB value itself is unavailable.</p>
</li>
<li>
<p>Columns containing LOBs are reported as empty (zero length) or null (if the value is actually <code dir="ltr">NULL</code>). In this way, you can tell the difference between a null column and a non-null column.</p>
</li>
</ul>
<p>See the next section, <a href="#BABGIJHJ">&#34;Receiving and processing updates&#34;</a>, for additional notes.</p>
</div>
</div>
<!-- class="sect1" -->
<a id="BABGIJHJ"></a>
<div id="TTJDV222" class="sect1">
<h2 class="sect1">Rec<a id="sthref245"></a><a id="sthref246"></a>eiving and processing updates</h2>
<p>You can receive XLA updates either synchronously or asynchronously.</p>
<p>To rec<a id="sthref247"></a><a id="sthref248"></a>eive and process updates for a topic synchronously, perform the following tasks.</p>
<ol>
<li>
<p>Create a durable <code dir="ltr">TopicSubscriber</code> instance to subscribe to a topic.</p>
</li>
<li>
<p>Call <code dir="ltr">receive()</code> or <code dir="ltr">receiveNoWait()</code> on your subscriber to get the next available update.</p>
</li>
<li>
<p>Process the returned <code dir="ltr">MapMessage</code> instance.</p>
</li>
</ol>
<p>To receive and <a id="sthref249"></a><a id="sthref250"></a>process updates for a topic asynchronously, perform the following tasks.</p>
<ol>
<li>
<p>Create a <code dir="ltr">MessageListener</code> instance to process the updates.</p>
</li>
<li>
<p>Create a durable <code dir="ltr">TopicSubscriber</code> instance to subscribe to a topic.</p>
</li>
<li>
<p>Register the <code dir="ltr">MessageListener</code> with the <code dir="ltr">TopicSubscriber</code>.</p>
</li>
<li>
<p>Start the connection.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You may miss messages if you do not register the <code dir="ltr">MessageListener</code> before you start the connection. If the connection is already started, stop the connection, register the <code dir="ltr">MessageListener</code>, then start the connection.</div>
</li>
<li>
<p>Wait for messages to arrive. You can call the <code dir="ltr">Object</code> method <code dir="ltr">wait()</code> to wait for messages if your application does not have to do anything else in its main thread.</p>
</li>
</ol>
<p>When an update is published, the <code dir="ltr">MessageListener</code> method <code dir="ltr">onMessage()</code> is called and the message is passed in as a <code dir="ltr">MapMessage</code> instance.</p>
<p>The application can verify table subscriptions by checking the <code dir="ltr">SYS.XLASUBSCRIPTIONS</code> system table.</p>
<div class="infobox-note">
<p class="notep1">No<a id="sthref251"></a><a id="sthref252"></a>te:</p>
LOB support in XLA is limited. You can access LOB fields in update messages using the <code dir="ltr">MapMessage</code> method <code dir="ltr">getBytes()</code> for BLOB fields or <code dir="ltr">getString()</code> for CLOB or NCLOB fields; however, these fields contain zero-length data (or null data if the value is actually <code dir="ltr">NULL</code>).</div>
<p><a href="#BABJJABI">Example 3-6</a>, from the <code dir="ltr">asyncJMS</code> Quick Start demo, uses a listener to process updates asynchronously.</p>
<div id="TTJDV223" class="example">
<p class="titleinexample"><a id="BABJJABI"></a>Example 3-6 Using a listener to process updates asynchronously</p>
<pre dir="ltr">MyListener myListener = new MyListener(outStream);

outStream.println(&#34;Creating consumer for topic &#34; + topic);
Topic xlaTopic = session.createTopic(topic);
bookmark = &#34;bookmark&#34;;
TopicSubscriber subscriber = session.createDurableSubscriber(xlaTopic, bookmark);

// After setMessageListener() has been called, myListener&#39;s onMessage
// method is called for each message received.
subscriber.setMessageListener(myListener);
</pre>
<p>N<a id="sthref253"></a><a id="sthref254"></a>ote that <code dir="ltr">bookmark</code> must already exist. You can use JDBC and the <code dir="ltr">ttXlaBookmarkCreate</code> built-in procedure to create a bookmark. Also, the <code dir="ltr">TopicSubscriber</code> must be a durable subscriber. XLA connections are designed to be durable. XLA bookmarks make it possible to disconnect from a topic and then reconnect to start receiving updates where you left off. The string you pass in as the subscription identifier when you create a durable subscriber is used as the XLA bookmark name.</p>
</div>
<!-- class="example" -->
<p>You can call <code dir="ltr">unsubscribe()</code> on the JMS <code dir="ltr">TopicSession</code> to delete the XLA bookmark used by the subscriber when the application shuts down. This causes a new bookmark to be created when the application is restarted.</p>
<p>When you receive an update, you can use the <code dir="ltr">MapMessage</code> getter methods to extract information from the message and then perform whatever processing your application requires. The TimesTen <code dir="ltr">XlaConstants</code> class defines constants for the update types and special message fields for use in processing XLA update messages.</p>
<p>The first step is typically to determine what type of update the message contains. You can use the <code dir="ltr">MapMessage</code> method <code dir="ltr">getInt()</code> to get the contents of the <code dir="ltr">__TYPE</code> field, and compare the value against the numeric constants defined in the <code dir="ltr">XlaConstants</code> class.</p>
<p>In <a href="#BABDAEIC">Example 3-7</a>, from the <code dir="ltr">asyncJMS</code> Quick Start demo, the method <code dir="ltr">onMessage()</code> extracts the update type from the <code dir="ltr">MapMessage</code> object and displays the action that the update signifies.</p>
<div id="TTJDV224" class="example">
<p class="titleinexample"><a id="BABDAEIC"></a>Example 3-7 Determining the update type</p>
<pre dir="ltr">public void onMessage(Message message)
{
  MapMessage mapMessage = (MapMessage)message;
  String messageType = null;
  /* Standard output stream */
  private static PrintStream outStream = System.out;
 
  if (message == null)
  {
    errStream.println(&#34;MyListener: update message is null&#34;);
    return ;
  }
 
  try
  {
    outStream.println();
    outStream.println(&#34;onMessage: got a &#34; + mapMessage.getJMSType() + &#34; message&#34;);
 
    // Get the type of event (insert, update, delete, drop table, etc.).
    int type = mapMessage.getInt(XlaConstants.TYPE_FIELD);
    if (type == XlaConstants.INSERT)
    {
      outStream.println(&#34;A row was inserted.&#34;);
    }
    else if (type == XlaConstants.UPDATE)
    {
      outStream.println(&#34;A row was updated.&#34;);
    }
    else if (type == XlaConstants.DELETE)
    {
      outStream.println(&#34;A row was deleted.&#34;);
    }
    else
    {
 
      // Messages are also received for DDL events such as CREATE TABLE.
      // This program processes INSERT, UPDATE, and DELETE events,
      // and ignores the DDL events.
      return ;
    }    
  ...
  }
...
}
</pre>
<p>When you know what type of message you have received, you can process the message according to the application&#39;s needs. To get a list of all of the fields in a message, you can call the <code dir="ltr">MapMessage</code> method <code dir="ltr">getMapNames()</code>. You can retrieve individual fields from the message by name.</p>
<p><a href="#BABGICIF">Example 3-8</a>, from the <code dir="ltr">asyncJMS</code> Quick Start demo, extracts the column values from insert, update, and delete messages using the column names.</p>
</div>
<!-- class="example" -->
<div id="TTJDV225" class="example">
<p class="titleinexample"><a id="BABGICIF"></a>Example 3-8 Extracting column values</p>
<pre dir="ltr">/* Standard output stream */
private static PrintStream outStream = System.out;
...
if (type == XlaConstants.INSERT 
 || type == XlaConstants.UPDATE 
 || type == XlaConstants.DELETE)
{
 
  // Get the column values from the message.
  int cust_num = mapMessage.getInt(&#34;cust_num&#34;);
  String region = mapMessage.getString(&#34;region&#34;);
  String name = mapMessage.getString(&#34;name&#34;);
  String address = mapMessage.getString(&#34;address&#34;);
 
  outStream.println(&#34;New Column Values:&#34;);
  outStream.println(&#34;cust_num=&#34; + cust_num);
  outStream.println(&#34;region=&#34; + region);
  outStream.println(&#34;name=&#34; + name);
  outStream.println(&#34;address=&#34; + address);
}
</pre></div>
<!-- class="example" -->
<p>For detailed information about the contents of XLA update messages, see <a href="jmsxla_ref.htm#CHEGCFEC">&#34;JMS/XLA MapMessage contents&#34;</a>. For information about how TimesTen column types map to JMS data types and the getter methods used to retrieve the column values, see <a href="jmsxla_ref.htm#CHEFFJCG">&#34;Data type support&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABDFHCC"></a>
<div id="TTJDV226" class="sect1">
<h2 class="sect1">Ter<a id="sthref255"></a><a id="sthref256"></a>minating a JMS/XLA application</h2>
<p>When the XLA application has finished reading from the transaction log, it should gracefully exit by closing the XLA connection, deleting any unneeded bookmarks, and unsubscribing from any tables to which you explicitly subscribed.</p>
<div id="TTJDV227" class="sect2"><a id="sthref257"></a>
<h3 class="sect2">Clo<a id="sthref258"></a>sing the connection</h3>
<p>To close the connection to XLA, call <code dir="ltr">close()</code> on the <code dir="ltr">Connection</code> object.</p>
<p>After a connection has been closed, any attempt to use it, its sessions, or its subscribers results in an <code dir="ltr">IllegalStateException</code> error. You can continue to use messages received through the connection, but you cannot call the <code dir="ltr">acknowledge()</code> method on the received message after the connection is closed.</p>
</div>
<!-- class="sect2" -->
<a id="BABBEDIH"></a>
<div id="TTJDV228" class="sect2">
<h3 class="sect2">Dele<a id="sthref259"></a>ting bookmarks</h3>
<p>Deleting XLA bookmarks during shutdown is optional. Deleting a bookmark enables the disk space associated with any unread update records in the transaction log to be freed.</p>
<p>If you do not delete the bookmark, it can be reused by a durable subscriber. If the bookmark is available when a durable subscriber reconnects, the subscriber receives all unacknowledged updates published since the previous connection was terminated. Keep in mind that when a bookmark exists with no application reading from it, the transaction log continues to grow and the amount of disk space consumed by your database increases.</p>
<p>To de<a id="sthref260"></a><a id="sthref261"></a>lete a bookmark, you can simply call <code dir="ltr">unsubscribe()</code> on the JMS Session, which invokes the <code dir="ltr">ttXlaBookmarkDelete</code> built-in procedure to remove the XLA bookmark.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot delete replicated bookmarks while the replication agent is running.</div>
</div>
<!-- class="sect2" -->
<a id="BABGBEAD"></a>
<div id="TTJDV229" class="sect2">
<h3 class="sect2">Unsub<a id="sthref262"></a><a id="sthref263"></a><a id="sthref264"></a><a id="sthref265"></a>scribing from a table</h3>
<p>To turn off XLA publishing for a table, use the <code dir="ltr">ttXlaUnsubscribe</code> built-in procedure. If you use <code dir="ltr">ttXlaSubscribe</code> to enable XLA publishing for a table, use <code dir="ltr">ttXlaUnsubscribe</code> to unsubscribe from the table when shutting down your application.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you want to <a id="sthref266"></a><a id="sthref267"></a>drop a table, you must unsubscribe from it first.</div>
<p>When you unsubscribe from a table, specify the name of the table and the name of the bookmark used to track the table:</p>
<pre dir="ltr">ttXlaUnsubscribe(<span class="italic">user.table</span>, <span class="italic">mybookmark</span>)
</pre>
<p>The following example calls <code dir="ltr">ttXlaUnSubscribe</code> through a <code dir="ltr">CallableStatement</code> object.</p>
<div id="TTJDV230" class="example">
<p class="titleinexample"><a id="sthref268"></a>Example 3-9 Unsubscribing from a table</p>
<pre dir="ltr">Connection con;
CallableStatement cStmt;
...
cStmt = con.prepareCall(&#34;{call ttXlaUnSubscribe(user.table, mybookmark)}&#34;);
cStmt.execute();
</pre></div>
<!-- class="example" -->
<p>For more information about using TimesTen built-in procedures in a Java application, see <a href="writing_app.htm#BABIJJHA">&#34;Using CALL to execute procedures and functions&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCJCDB"></a>
<div id="TTJDV231" class="sect1">
<h2 class="sect1">Using JM<a id="sthref269"></a><a id="sthref270"></a>S/XLA as a replication mechanism</h2>
<p>TimesTen replication as described in <a class="olink TTREP" href="../TTREP/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span></a> is sufficient for most customer needs; however, it is also possible to use JMS/XLA to replicate updates from one database to another. Implementing your own replication scheme on top of JMS/XLA in this way is fairly complicated, but can be considered if TimesTen replication is not feasible for some reason.</p>
<div id="TTJDV232" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref271"></a>
<h3 class="sect2">Applying JMS/XLA messages to a target database</h3>
<p>The source database generates JMS/XLA messages. To apply the messages to a target database, you must extract the XLA descriptor from them. Use the <code dir="ltr">MapMessage</code> interface to extract the update descriptor:</p>
<pre dir="ltr">MapMessage message;
/*
 *...other code
 */
try {
  byte[]updateMessage=
    mapMessage.getBytes(XlaConstants.UPDATE_DESCRIPTOR_FIELD);
}
catch (JMSException jex){
/*
 *...other code
 */
}
</pre>
<p>The target database may reside on a different system from the source database. The update descriptor is returned as a byte array and can be serialized for network transmission.</p>
<p>You must <a id="sthref272"></a>create a target database object that represents the target database so you can apply the objects from the source database. You can create a target database object named <code dir="ltr">myTargetDataStore</code> as an instance of the <code dir="ltr">TargetDataStoreImpl</code> class. For example:</p>
<pre dir="ltr">TargetDataStore myTargetDataStore=
   new TargetDataStoreImpl(&#34;DSN=sampleDSN&#34;);
</pre>
<p>Apply messages to <code dir="ltr">myTargetDataStore</code><a id="sthref273"></a> by using the <code dir="ltr">TargetDataStore</code> method <code dir="ltr">apply()</code>. For example:</p>
<pre dir="ltr">myTargetDataStore.apply(updateDescriptor);
</pre>
<p>By default, TimesTen checks for <a id="sthref274"></a>conflicts on the target database before applying the update. If the target database has information that is later than the update, <code dir="ltr">TargetDataStore</code> throws an exception. If you do not want TimesTen to check for conflicts, use the <code dir="ltr">TargetDataStore</code> method <code dir="ltr">setUpdateConflictCheckFlag()</code> to change the behavior.</p>
<p>By default, TimesTen commits the update to the database based on commit flags and transaction boundaries contained in the update descriptor. If you want the application to perform <a id="sthref275"></a>manual commits instead, use the <code dir="ltr">setAutoCommitFlag()</code> method to change the autocommit flag. To perform a manual commit on <code dir="ltr">myTargetDataStore</code>, use the following command:</p>
<pre dir="ltr">myTargetDataStore.commit();
</pre>
<p>You can perform a <a id="sthref276"></a>rollback if errors occur during the application of the update. Use the following command for <code dir="ltr">myTargetDataStore</code>:</p>
<pre dir="ltr">myTargetDataStore.rollback();
</pre>
<p>Close <code dir="ltr">myTargetDataStore</code> by using the following command:</p>
<pre dir="ltr">myTargetDataStore.close();
</pre>
<p>See <a href="jmsxla_ref.htm#CHEJHGHG">&#34;JMS/XLA replication API&#34;</a> for more information about the <code dir="ltr">TargetDataStore</code> interface.</p>
</div>
<!-- class="sect2" -->
<div id="TTJDV233" class="sect2"><a id="sthref277"></a>
<h3 class="sect2">Target<a id="sthref278"></a>DataStore error recovery</h3>
<p>Invoking <code dir="ltr">TargetDataStore</code> can yield transient and permanent errors.</p>
<p><code dir="ltr">TargetDataStore</code> methods return a nonzero value when transient errors occur. The application can retry the operation and is responsible for monitoring update descriptors that must be reapplied. For more information about transient XLA errors, see <a class="olink TTCDV298" href="../TTCDV/xla_event.htm#TTCDV298">&#34;Handling XLA errors&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
<p><code dir="ltr">TargetDataStore</code> methods return a <code dir="ltr">JMSException</code> object for permanent errors. If the application receives a permanent error, it should verify that the database is valid. If the database is invalid, the target database object should be closed and a new one should be created. Other types of permanent errors may require manual intervention.</p>
<p>The following example shows how to recover errors from a <code dir="ltr">TargetDataStore</code> object.</p>
<div id="TTJDV234" class="example">
<p class="titleinexample"><a id="sthref279"></a>Example 3-10 Recovering errors</p>
<pre dir="ltr">TargetDataStore theTargetDataStore;
byte[] updateDescriptor;
int rc;

// Other code
try {
  ...
  if ( (rc = theTargetDataStore.apply(updateDescriptor) ) == 0 ) {
    // Apply successful.
  }
  else {
    // Transient error. Retry later.
  }
 }
catch (JMSException jex) {
  if (theTargetDataStore.isDataStoreValid() ) {
    // Database valid; permanent error that may need Administrator intervention.
  }
  else {
    try {
      theTargetDataStore.close();
  }
  catch (JMSException closeEx) {
    // Close errors are not usual. This may need Administrator intervention.
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6136">
<tr>
<td class="cellalignment6145">
<table class="cellalignment6141">
<tr>
<td class="cellalignment6140"><a href="writing_app.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6140"><a href="jta.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6147">
<table class="cellalignment6139">
<tr>
<td class="cellalignment6140"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6140"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6140"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6140"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6140"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6140"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>