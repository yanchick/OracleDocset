<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113755"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Java%20Application%20Tuning"></a><title>Java Application Tuning</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1033"/>
<meta name="dcterms.created" content="2015-03-16T15:41:24Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E21638-10"/>
<meta name="dcterms.isVersionOf" content="TTJDV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="jta.htm" title="Previous" type="text/html"/>
<link rel="Next" href="jmsxla_ref.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21638-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/11</span> <!-- End Header -->
<div id="TTJDV251" class="chapter"><a id="BCGEDIGJ"></a>
<h1 class="chapter"><span class="secnum">5</span> Java Application Tuning</h1>
<p>This chapter provides tips on how to tune a Java application to run optimally on a TimesTen database. See <a class="olink TTOPR411" href="../TTOPR/perform.htm#TTOPR411">&#34;TimesTen Database Performance Tuning&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for more general tuning tips.</p>
<p>This chapter is organized as follows:</p>
<ul>
<li>
<p><a href="#BCGHHIFF">Tuning JDBC applications</a></p>
</li>
<li>
<p><a href="#BCGJCADH">Tuning JMS/XLA applications</a></p>
</li>
</ul>
<a id="BCGHHIFF"></a>
<div id="TTJDV252" class="sect1">
<h2 class="sect1">Tun<a id="sthref315"></a><a id="sthref316"></a>ing JDBC applications</h2>
<p>This section describes general principles to consider when tuning JDBC applications for TimesTen. It includes the following topics:</p>
<ul>
<li>
<p><a href="#BCGCAAHE">Use prepared statement pooling</a></p>
</li>
<li>
<p><a href="#BCGIDCIJ">Use arrays of parameters for batch execution</a></p>
</li>
<li>
<p><a href="#BCGCIHBI">Bulk fetch rows of TimesTen data</a></p>
</li>
<li>
<p><a href="#BCGCDBHE">Use the ResultSet method getString() sparingly</a></p>
</li>
<li>
<p><a href="#BCGFFEGI">Avoid data type conversions</a></p>
</li>
<li>
<p><a href="#BCGGBIEC">Close connections, statements, and result sets</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="writing_app.htm#BABCAAAB">&#34;Working with TimesTen result sets: hints and restrictions&#34;</a> and the notes in <a href="writing_app.htm#BABHCBDF">&#34;Binding parameters and executing statements&#34;</a>.</div>
<a id="BCGCAAHE"></a>
<div id="TTJDV253" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Use pre<a id="sthref317"></a><a id="sthref318"></a><a id="sthref319"></a>pared statement pooling</h3>
<p>TimesTen supports prepared statement pooling for pooled connections, as discussed in the JDBC 3.0 specification, through the TimesTen <code dir="ltr">ObservableConnectionDS</code> class. This is the TimesTen implementation of <code dir="ltr">ConnectionPoolDataSource</code>. Note that statement pooling is transparent to an application. Use of the <code dir="ltr">PreparedStatement</code> object, including preparing and closing the statement, is no different.</p>
<p>Enable prepared statement pooling and specify the maximum number of statements in the pool by calling the <code dir="ltr">ObservableConnectionDS</code> method <code dir="ltr">setMaxStatements()</code>. A value of 0, the default, disables prepared statement pooling. Any integer value greater than 0 enables prepared statement pooling with the value taken as the maximum number of statements. Once set, this value should not be changed.</p>
<p>Prepared statements or callable statements are pooled at the time of creation if the pool has not reached its capacity. In Java 6, you can remove a prepared statement or callable statement from the pool by calling <code dir="ltr">setPoolable(false)</code> on the statement object. After the statement is closed, it is removed from the pool.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
With prepared statement pooling, JDBC considers two statements to be identical if their SQL (including comments) is identical, regardless of other considerations such as optimizer settings. Do not use prepared statement pooling in a scenario where different optimizer hints may be applied to statements that are otherwise identical. In this scenario, a statement execution may result in the use of an identical statement from the pool with an unpredictable optimizer setting.</div>
</div>
<!-- class="sect2" -->
<a id="BCGIDCIJ"></a>
<div id="TTJDV254" class="sect2">
<h3 class="sect2">Us<a id="sthref320"></a><a id="sthref321"></a><a id="sthref322"></a>e arrays of parameters for batch execution</h3>
<p>You can improve performance by using groups, referred to as <span class="italic">batches</span>, of statement executions, calling the <code dir="ltr">addBatch()</code> and <code dir="ltr">executeBatch()</code> methods for <code dir="ltr">Statement</code> or <code dir="ltr">PreparedStatement</code> objects.</p>
<p>A batch can consist of a set of <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, or <code dir="ltr">MERGE</code> statements. Statements that return result sets, such as <code dir="ltr">SELECT</code> statements, are not allowed in a batch. A SQL statement is added to a batch by calling <code dir="ltr">addBatch()</code> on the statement object. The set of SQL statements associated with a batch are executed through the <code dir="ltr">executeBatch()</code> method.</p>
<p>For <code dir="ltr">PreparedStatement</code> objects, the batch consists of repeated executions of a statement using different input parameter values. For each set of input values, create the batch by using appropriate <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> calls followed by the <code dir="ltr">addBatch()</code> call. The batch is executed by the <code dir="ltr">executeBatch()</code> method.</p>
<p>TimesTen recommends the following batch sizes for TimesTen 11<span class="italic">g</span> Release 2 (11.2.2):</p>
<ul>
<li>
<p>256 for <code dir="ltr">INSERT</code> statements</p>
</li>
<li>
<p>31 for <code dir="ltr">UPDATE</code> statements</p>
</li>
<li>
<p>31 for <code dir="ltr">DELETE</code> statements</p>
</li>
<li>
<p>31 for <code dir="ltr">MERGE</code> statements</p>
</li>
</ul>
<div id="TTJDV255" class="example">
<p class="titleinexample"><a id="BCGEBJJC"></a>Example 5-1 Batching statements</p>
<pre dir="ltr">// turn off autocommit
conn.setAutoCommit(false);

Statement stmt = conn.createStatement();
stmt.addBatch(&#34;INSERT INTO employees VALUES (1000, &#39;Joe Jones&#39;)&#34;);
stmt.addBatch(&#34;INSERT INTO departments VALUES (260, &#39;Shoe&#39;)&#34;);
stmt.addBatch(&#34;INSERT INTO emp_dept VALUES (1000, 260)&#34;);

// submit a batch of update commands for execution
int[] updateCounts = stmt.executeBatch();
conn.commit ();
</pre></div>
<!-- class="example" -->
<div id="TTJDV256" class="example">
<p class="titleinexample"><a id="BCGBJHBJ"></a>Example 5-2 Batching prepared statements</p>
<pre dir="ltr">// turn off autocommit
conn.setAutoCommit(false);
// prepare the statement
PreparedStatement stmt = conn.prepareStatement
                         (&#34;INSERT INTO employees VALUES (?, ?)&#34;);

// first set of parameters
stmt.setInt(1, 2000);
stmt.setString(2, &#34;Kelly Kaufmann&#34;);
stmt.addBatch();

// second set of parameters
stmt.setInt(1, 3000);
stmt.setString(2, &#34;Bill Barnes&#34;);
stmt.addBatch();

// submit the batch for execution. Check update counts
int[] updateCounts = stmt.executeBatch();
conn.commit ();
</pre></div>
<!-- class="example" -->
<p>For either a <code dir="ltr">Statement</code> or <code dir="ltr">PreparedStatement</code> object, the <code dir="ltr">executeBatch()</code> method returns an array of update counts (<code dir="ltr">updateCounts[]</code> in <a href="#BCGEBJJC">Example 5-1</a> and <a href="#BCGBJHBJ">Example 5-2</a> above), with one element in the array for each statement execution. The value of each element can be any of the following:</p>
<ul>
<li>
<p>A number indicating how many rows in the database were affected by the corresponding statement execution</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_NO_INFO</code>, indicating the corresponding statement execution was successful, but the number of affected rows is unknown</p>
</li>
<li>
<p><code dir="ltr">EXECUTE_FAILED</code>, indicating the corresponding statement execution failed</p>
<p>Once there is a statement execution with <code dir="ltr">EXECUTE_FAILED</code> status, no further statement executions are attempted.</p>
</li>
</ul>
<p>For more information about using the JDBC batch update facility, refer to the Javadoc for the <code dir="ltr">java.sql.Statement</code> interface, particularly information about the <code dir="ltr">executeBatch()</code> method, at the following locations (the first for Java 6, the second for Java 5.0):</p>
<pre dir="ltr"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/package-summary.html">http://docs.oracle.com/javase/6/docs/api/java/sql/package-summary.html</a>
<a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/sql/package-summary.html">http://docs.oracle.com/javase/1.5.0/docs/api/java/sql/package-summary.html</a>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Associative array parameters are not supported with JDBC batch execution. (See <a href="writing_app.htm#BABCDJAD">&#34;Binding associative arrays&#34;</a>.)</div>
</div>
<!-- class="sect2" -->
<a id="BCGCIHBI"></a>
<div id="TTJDV257" class="sect2">
<h3 class="sect2"><a id="sthref323"></a><a id="sthref324"></a>Bulk fetch rows of TimesTen data</h3>
<p>TimesTen provides an extension that allows an application to fetch multiple rows of data. For applications that retrieve large amounts of TimesTen data, fetching multiple rows can increase performance greatly. However, when using Read Committed isolation level, locks are held on all rows being retrieved until the application has received all the data, decreasing concurrency. For more information on this feature, see <a href="writing_app.htm#BABIFHFA">&#34;Fetching multiple rows of data&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BCGCDBHE"></a>
<div id="TTJDV258" class="sect2">
<h3 class="sect2">Use the ResultSet method get<a id="sthref325"></a><a id="sthref326"></a>String() sparingly</h3>
<p>Because Java strings are immutable, the <code dir="ltr">ResultSet</code> method <code dir="ltr">getString()</code> must allocate space for a new string in addition to translating the underlying C string to a Unicode string, making it a costly call.</p>
<p>In addition, you should not call <code dir="ltr">getString()</code> on primitive numeric types, like <code dir="ltr">byte</code> or <code dir="ltr">int</code>, unless it is absolutely necessary. It is much faster to call <code dir="ltr">getInt()</code> on an integer column, for example.</p>
</div>
<!-- class="sect2" -->
<a id="BCGFFEGI"></a>
<div id="TTJDV259" class="sect2">
<h3 class="sect2">Avoid data type <a id="sthref327"></a><a id="sthref328"></a>conversions</h3>
<p>TimesTen instruction paths are so short that even small delays due to data conversion can cause a relatively large percentage increase in transaction time.</p>
<p>Use the appropriate <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> method on a <code dir="ltr">ResultSet</code> object for the data type of the data in the underlying database. For example, if the data type of the data is <code dir="ltr">DOUBLE</code>, to avoid data conversion in the JDBC driver you should call <code dir="ltr">getDouble()</code>. Similarly, use the appropriate <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> method on the <code dir="ltr">PreparedStatement</code> object for the input parameter in an SQL statement. For example, if you are inserting data into a <code dir="ltr">CHAR</code> column using a <code dir="ltr">PreparedStatement</code>, you should use <code dir="ltr">setString()</code>.</p>
</div>
<!-- class="sect2" -->
<a id="BCGGBIEC"></a>
<div id="TTJDV344" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Close connections, statements, and result sets</h3>
<p>For better performance, always close JDBC objects such as connection, statement, and result set instances when finished using them. <a href="#BCGHICII">Example 5-3</a> shows typical usage.</p>
<div id="TTJDV345" class="example">
<p class="titleinexample"><a id="BCGHICII"></a>Example 5-3 Closing connection, statement, and result set</p>
<pre dir="ltr">    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;
    try {
      // create connections, execute statements, etc.
      // Handle any errors
    } catch (SQLException ex) {
      // See <a href="writing_app.htm#BABHGDGE">&#34;Handling errors&#34;</a>.
    }
    finally {
      // Close JDBC objects such as connections, statements, result sets, etc.
      if (rs != null) {
        try {
          rs.close();
        }
        catch(SQLException finalex) {
          // See <a href="writing_app.htm#BABHGDGE">&#34;Handling errors&#34;</a>.
        }        
      }
      if (stmt != null) {
        try {
          stmt.close();
        }
        catch(SQLException finalex) {
          // See <a href="writing_app.htm#BABHGDGE">&#34;Handling errors&#34;</a>.
        }
      }
      // Always, close the connection to TimesTen
      if (conn != null) {
        try {
          conn.close();
        }
        catch(SQLException finalex) {
       // See <a href="writing_app.htm#BABHGDGE">&#34;Handling errors&#34;</a>.
        }
      }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCGJCADH"></a>
<div id="TTJDV260" class="sect1">
<h2 class="sect1">Tun<a id="sthref329"></a><a id="sthref330"></a><a id="sthref331"></a>ing JMS/XLA applications</h2>
<p>This section contains specific performance tuning tips for applications that use the JMS/XLA API. JMS/XLA has some overhead that makes it slower than using the C XLA API. In the C API, records are returned to the user in a batch. In the JMS model an object is instantiated and each record is presented one at a time in a callback to the <code dir="ltr">MessageListener</code> method <code dir="ltr">onMessage()</code>. High performance applications can use some tuning to overcome some of this overhead.</p>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BCGBBDCH">Configure xlaPrefetch parameter</a></p>
</li>
<li>
<p><a href="#BCGIJJCF">Reduce frequency of update acknowledgments</a></p>
</li>
<li>
<p><a href="#BCGEGCDJ">Handling high event rates</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="jmsxla_event.htm#CIHIDBJJ">&#34;Access control impact on XLA&#34;</a> for access control considerations relevant to JMS/XLA.</div>
<a id="BCGBBDCH"></a>
<div id="TTJDV261" class="sect2">
<h3 class="sect2">Configure xla<a id="sthref332"></a><a id="sthref333"></a><a id="sthref334"></a>Prefetch parameter</h3>
<p>The code underlying the JMS layer that reads the transaction log is more efficient if it can fetch as many rows as possible before presenting the object/rows to the user. The amount of prefetching is controlled in the <code dir="ltr">jmsxla.xml</code> configuration file with the <code dir="ltr">xlaPrefetch</code> parameter. Set the prefetch count to a large value like 100 or 1000.</p>
</div>
<!-- class="sect2" -->
<a id="BCGIJJCF"></a>
<div id="TTJDV262" class="sect2">
<h3 class="sect2">Re<a id="sthref335"></a><a id="sthref336"></a>duce frequency of update acknowledgments</h3>
<p>In JMS/XLA, acknowledging updates moves the bookmark and results in updates to system tables. You can typically improve application performance by waiting until several updates have been detected before issuing the acknowledgment. You can control the acknowledgment frequency in either of the following modes. (See <a href="jmsxla_event.htm#BABFJDBJ">&#34;XLA acknowledgment modes&#34;</a> for related information.)</p>
<ul>
<li>
<p><code dir="ltr">DUPS_OK_ACKNOWLEDGE</code>, where JMS/XLA prefetches records according to the <code dir="ltr">xlaprefetch</code> setting, and an acknowledgment is automatically sent when the last record in the prefetched block is read.</p>
</li>
<li>
<p><code dir="ltr">CLIENT_ACKNOWLEDGE</code>, where you manually call the <code dir="ltr">acknowledge()</code> method on the <code dir="ltr">MapMessage</code> instance as desired.</p>
</li>
</ul>
<p>The appropriate choice for acknowledgment frequency depends on your application logic. Acknowledging after every 100 updates, for example, has been used successfully. Be aware, however, that there is a trade-off. Acknowledgments affect XLA log holds, and acknowledging too infrequently may result in undesirable log file accumulation. (Also see <a href="jmsxla_event.htm#BABIEDID">&#34;XLA bookmarks and transaction log holds&#34;</a>.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In <code dir="ltr">DUPS_OK_ACKNOWLEDGE</code> or <code dir="ltr">CLIENT_ACKNOWLEDGE</code> mode, the reader application must have some tolerance for seeing the same set of records more than once.</div>
</div>
<!-- class="sect2" -->
<a id="BCGEGCDJ"></a>
<div id="TTJDV263" class="sect2">
<h3 class="sect2">Han<a id="sthref337"></a><a id="sthref338"></a>dling high event rates</h3>
<p>The synchronous interface is suitable only for applications with low event rates and for which <code dir="ltr">AUTO_ACKNOWLEDGE</code> or <code dir="ltr">DUPS_OK_ACKNOWLEDGE</code> acknowledgment modes are acceptable. Applications that require <code dir="ltr">CLIENT_ACKNOWLEDGE</code> acknowledgment mode and applications with high event rates should use the asynchronous interface for receiving updates. They should acknowledge the messages on the callback thread itself if they are using <code dir="ltr">CLIENT_ACKNOWLEDGE</code> as acknowledgment mode. See <a href="jmsxla_event.htm#BABGIJHJ">&#34;Receiving and processing updates&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6136">
<tr>
<td class="cellalignment6145">
<table class="cellalignment6141">
<tr>
<td class="cellalignment6140"><a href="jta.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6140"><a href="jmsxla_ref.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6147">
<table class="cellalignment6139">
<tr>
<td class="cellalignment6140"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6140"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6140"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6140"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6140"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6140"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>