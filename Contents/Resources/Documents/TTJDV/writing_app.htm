<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113757"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Working%20with%20TimesTen%20Databases%20in%20JDBC"></a><title>Working with TimesTen Databases in JDBC</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1033"/>
<meta name="dcterms.created" content="2015-03-16T15:41:24Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E21638-10"/>
<meta name="dcterms.isVersionOf" content="TTJDV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="env_setup.htm" title="Previous" type="text/html"/>
<link rel="Next" href="jmsxla_event.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21638-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/11</span> <!-- End Header -->
<div id="TTJDV116" class="chapter"><a id="BABDDBGD"></a>
<h1 class="chapter"><span class="secnum">2</span> Working with TimesTen Databases in JDBC</h1>
<p>This chapter describes the basic procedures for writing a Java application to access data. Before attempting to write a TimesTen application, be sure you have completed the following prerequisite tasks:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6143" title="Prerequisites for working with TimesTen" summary="This table lists prerequisite tasks and provides references to more information." dir="ltr">
<thead>
<tr class="cellalignment6137">
<th class="cellalignment6144" id="r1c1-t2">Prerequisite task</th>
<th class="cellalignment6144" id="r1c2-t2">What you do</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r2c1-t2" headers="r1c1-t2">Create a database.</td>
<td class="cellalignment6145" headers="r2c1-t2 r1c2-t2">Follow the procedures described in <a class="olink TTOPR120" href="../TTOPR/using.htm#TTOPR120">&#34;Managing TimesTen Databases&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r3c1-t2" headers="r1c1-t2">Configure the Java environment.</td>
<td class="cellalignment6145" headers="r3c1-t2 r1c2-t2">Follow the procedures described in <a href="env_setup.htm#CHDJIBEI">&#34;Setting the environment for Java development&#34;</a>.</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r4c1-t2" headers="r1c1-t2">Compile and execute the TimesTen Java demos.</td>
<td class="cellalignment6145" headers="r4c1-t2 r1c2-t2">Follow the procedures described in <a href="env_setup.htm#CHDEEGIC">&#34;About the TimesTen Java demos&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>After you have successfully executed the TimesTen Java demos, your development environment is set up correctly and ready for you to create applications that access a database.</p>
<p>The following topics are covered in this chapter:</p>
<ul>
<li>
<p><a href="#BABBECEI">Key JDBC classes and interfaces</a></p>
</li>
<li>
<p><a href="#BABJIJHI">Managing TimesTen database connections</a></p>
</li>
<li>
<p><a href="#BABHIBAD">Managing TimesTen data</a></p>
</li>
<li>
<p><a href="#BABCEJHC">Using additional TimesTen data management features</a></p>
</li>
<li>
<p><a href="#BABFJBFE">Considering TimesTen features for access control</a></p>
</li>
<li>
<p><a href="#BABHGDGE">Handling errors</a></p>
</li>
<li>
<p><a href="#BABDIJGC">JDBC support for automatic client failover</a></p>
</li>
</ul>
<a id="BABBECEI"></a>
<div id="TTJDV117" class="sect1">
<h2 class="sect1">Key JD<a id="sthref17"></a>BC classes and interfaces</h2>
<p>This section discusses important standard and TimesTen-specific JDBC packages, classes, and interfaces. The following topics are covered:</p>
<ul>
<li>
<p><a href="#BABJDBIC">Package imports</a></p>
</li>
<li>
<p><a href="#BABBFAHC">Support for interfaces in the java.sql package</a></p>
</li>
<li>
<p><a href="#BABEFHFJ">Support for classes in the java.sql package</a></p>
</li>
<li>
<p><a href="#BABHAFGG">Support for interfaces and classes in the javax.sql package</a></p>
</li>
<li>
<p><a href="#BABEFBBI">TimesTen JDBC extensions</a></p>
</li>
<li>
<p><a href="#BABHFAAF">Additional TimesTen classes and interfaces</a></p>
</li>
</ul>
<p>For reference information on standard JDBC, see the following for information about the <code dir="ltr">java.sql</code> package (the first for Java 6, the second for Java 5.0):</p>
<pre dir="ltr"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/package-summary.html">http://docs.oracle.com/javase/6/docs/api/java/sql/package-summary.html</a>
<a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/sql/package-summary.html">http://docs.oracle.com/javase/1.5.0/docs/api/java/sql/package-summary.html</a>
</pre>
<p>For reference information on TimesTen JDBC extensions, refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is recommended that you use Java 6 with TimesTen. Java 6 is a more capable API, especially for handling LOBs.</div>
<a id="BABJDBIC"></a>
<div id="TTJDV118" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Pack<a id="sthref18"></a><a id="sthref19"></a>age imports</h3>
<p>You must import the standard JDBC package in any Java program that uses JDBC:</p>
<pre dir="ltr">import java.sql.*;
</pre>
<p>If you are going to use data sources or pooled connections, you must also import the standard extended JDBC package:</p>
<pre dir="ltr">import javax.sql.*;
</pre>
<p>You must import the TimesTen JDBC package:</p>
<pre dir="ltr">import com.timesten.jdbc.*;
</pre>
<p>To use XA data sources for JTA, you must also import the following TimesTen package:</p>
<pre dir="ltr">import com.timesten.jdbc.xa.*;
</pre></div>
<!-- class="sect2" -->
<a id="BABBFAHC"></a>
<div id="TTJDV119" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Sup<a id="sthref20"></a><a id="sthref21"></a>port for interfaces in the java.sql package</h3>
<p>TimesTen supports the <code dir="ltr">java.sql</code> interfaces as indicated in <a href="#CHEIIHAJ">Table 2-1</a>, with TimesTen-specific support and restrictions noted.</p>
<p>Also see <a href="#BABEFBBI">&#34;TimesTen JDBC extensions&#34;</a>.</p>
<div id="TTJDV120" class="tblhruleformal">
<p class="titleintable"><a id="sthref22"></a><a id="CHEIIHAJ"></a>Table 2-1 Supported java.sql interfaces</p>
<table class="cellalignment6143" title="Supported java.sql interfaces" summary="This table contains notes and restrictions on java.sql interfaces supported by TimesTen." dir="ltr">
<thead>
<tr class="cellalignment6137">
<th class="cellalignment6144" id="r1c1-t4">Interface in java.sql</th>
<th class="cellalignment6144" id="r1c2-t4">Remarks on TimesTen support</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Bl<a id="sthref23"></a>ob</code></p>
</td>
<td class="cellalignment6145" headers="r2c1-t4 r1c2-t4">
<ul>
<li>
<p>The <code dir="ltr">position()</code> method, which returns the position where a specified byte pattern or BLOB pattern begins, is not supported.</p>
</li>
<li>
<p>Java 5.0 does not support <code dir="ltr">free()</code> or <code dir="ltr">getBinaryStream(pos,length)</code>, but TimesTen provides them as extensions. They are standard in Java 6.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Cal<a id="sthref24"></a>lableStatement</code></p>
</td>
<td class="cellalignment6145" headers="r3c1-t4 r1c2-t4">
<ul>
<li>
<p>You must pass parameters to <code dir="ltr">CallableStatement</code> by position, not by name.</p>
</li>
<li>
<p>You cannot use SQL escape syntax.</p>
</li>
<li>
<p>There is no support for <code dir="ltr">Array</code>, <code dir="ltr">Struct</code>, or <code dir="ltr">Ref</code>.</p>
</li>
<li>
<p>There is no support for <code dir="ltr">Calendar</code> for <code dir="ltr">setDate()</code>, <code dir="ltr">getDate()</code>, <code dir="ltr">setTime()</code>, or <code dir="ltr">getTime()</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Cl<a id="sthref25"></a>ob</code></p>
</td>
<td class="cellalignment6145" headers="r4c1-t4 r1c2-t4">
<ul>
<li>
<p>The <code dir="ltr">position()</code> method, which returns the position where a specified character pattern or CLOB pattern begins, is not supported.</p>
</li>
<li>
<p>Java 5.0 does not support <code dir="ltr">free()</code> or <code dir="ltr">getCharacterStream(pos,length)</code>, but TimesTen provides them as extensions. They are standard in Java 6.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Con<a id="sthref26"></a>nection</code></p>
</td>
<td class="cellalignment6145" headers="r5c1-t4 r1c2-t4">
<ul>
<li>
<p>There is no support for savepoints.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Data<a id="sthref27"></a>baseMetaData</code></p>
</td>
<td class="cellalignment6145" headers="r6c1-t4 r1c2-t4">
<ul>
<li>
<p>There are no restrictions.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">NC<a id="sthref28"></a>lob</code></p>
</td>
<td class="cellalignment6145" headers="r7c1-t4 r1c2-t4">
<ul>
<li>
<p><code dir="ltr">NClob</code> support applies only for Java 6 (<code dir="ltr">ttjdbc6.jar</code>).</p>
</li>
<li>
<p>The <code dir="ltr">position()</code> method, which returns the position where a specified character pattern or NCLOB pattern begins, is not supported.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r8c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Pa<a id="sthref29"></a>rameterMetaData</code></p>
</td>
<td class="cellalignment6145" headers="r8c1-t4 r1c2-t4">
<ul>
<li>
<p>The JDBC driver cannot determine whether a column is nullable and always returns <code dir="ltr">parameterNullableUnknown</code> from calls to <code dir="ltr">isNullable()</code>.</p>
</li>
<li>
<p>The <code dir="ltr">getScale()</code> method returns 1 for <code dir="ltr">VARCHAR</code>, <code dir="ltr">NVARCHAR</code>, and <code dir="ltr">VARBINARY</code> data types if they are <code dir="ltr">INLINE</code>. (Scale is of no significance to these data types.)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r9c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Prepared<a id="sthref30"></a>Statement</code></p>
</td>
<td class="cellalignment6145" headers="r9c1-t4 r1c2-t4">
<ul>
<li>
<p>There is no support for <code dir="ltr">getMetaData()</code> in <code dir="ltr">PreparedStatement</code>.</p>
</li>
<li>
<p>There is no support for <code dir="ltr">Array</code>, <code dir="ltr">Struct</code>, or <code dir="ltr">Ref</code>.</p>
</li>
<li>
<p>There is no support for the <code dir="ltr">Calendar</code> type in <code dir="ltr">setDate()</code>, <code dir="ltr">getDate()</code>, <code dir="ltr">setTime()</code>, or <code dir="ltr">getTime()</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r10c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Result<a id="sthref31"></a>Set</code></p>
</td>
<td class="cellalignment6145" headers="r10c1-t4 r1c2-t4">
<ul>
<li>
<p>There <span class="italic">is</span> support for <code dir="ltr">getMetaData()</code> in <code dir="ltr">ResultSet</code>.</p>
</li>
<li>
<p>You cannot have multiple open <code dir="ltr">ResultSet</code> objects per statement.</p>
</li>
<li>
<p>You cannot specify the holdability of a result set, so a cursor cannot remain open after it has been committed.</p>
</li>
<li>
<p>There is no support for scrollable or updatable result sets.</p>
</li>
<li>
<p>There is no support for <code dir="ltr">Array</code>, <code dir="ltr">Struct</code>, or <code dir="ltr">Ref</code>.</p>
</li>
<li>
<p>There is no support for the <code dir="ltr">Calendar</code> type in <code dir="ltr">setDate()</code>, <code dir="ltr">getDate()</code>, <code dir="ltr">setTime()</code>, or <code dir="ltr">getTime()</code>.</p>
</li>
<li>
<p>See <a href="#BABCAAAB">&#34;Working with TimesTen result sets: hints and restrictions&#34;</a>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r11c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Result<a id="sthref32"></a>SetMetaData</code></p>
</td>
<td class="cellalignment6145" headers="r11c1-t4 r1c2-t4">
<ul>
<li>
<p>The <code dir="ltr">getPrecision()</code> method returns 0 for undefined precision.</p>
</li>
<li>
<p>The <code dir="ltr">getScale()</code> method returns -127 for undefined scale.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r12c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Row<a id="sthref33"></a><a id="sthref34"></a>Id</code></p>
</td>
<td class="cellalignment6145" headers="r12c1-t4 r1c2-t4">
<ul>
<li>
<p><code dir="ltr">RowId</code> support applies only for Java 6 (<code dir="ltr">ttjdbc6.jar</code>).</p>
</li>
<li>
<p>The <code dir="ltr">ROWID</code> data type can be accessed using the <code dir="ltr">RowId</code> interface.</p>
</li>
<li>
<p>Output and input/output rowids can be registered as <code dir="ltr">Types.ROWID</code>.</p>
</li>
<li>
<p>Metadata methods return <code dir="ltr">Types.ROWID</code> and <code dir="ltr">RowId</code> as applicable.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r13c1-t4" headers="r1c1-t4">
<p><code dir="ltr">Stat<a id="sthref35"></a><a id="sthref36"></a><a id="sthref37"></a>ement</code></p>
</td>
<td class="cellalignment6145" headers="r13c1-t4 r1c2-t4">
<ul>
<li>
<p>There are no restrictions.</p>
</li>
<li>
<p>In TimesTen, the <code dir="ltr">cancel()</code> method delegates to the ODBC function <code dir="ltr">SQLCancel</code>. For details about the TimesTen implementation of that function, see <a class="olink TTCDV474" href="../TTCDV/odbc_supported.htm#TTCDV474">&#34;Supported ODBC functions&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
</li>
<li>
<p>See <a href="#BABCADBC">&#34;Managing cache groups&#34;</a> for special TimesTen functionality of the <code dir="ltr">getUpdateCount()</code> method with cache groups.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="BABEFHFJ"></a>
<div id="TTJDV121" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Sup<a id="sthref38"></a><a id="sthref39"></a>port for classes in the java.sql package</h3>
<p>TimesTen supports the following <code dir="ltr">java.sql</code> classes.</p>
<ul>
<li>
<p><code dir="ltr">DataTruncation</code></p>
</li>
<li>
<p><code dir="ltr">Date</code></p>
</li>
<li>
<p><code dir="ltr">DriverManager</code></p>
</li>
<li>
<p><code dir="ltr">DriverPropertyInfo</code></p>
</li>
<li>
<p><code dir="ltr">Time</code></p>
</li>
<li>
<p><code dir="ltr">Timestamp</code></p>
</li>
<li>
<p><code dir="ltr">Types</code></p>
</li>
<li>
<p><code dir="ltr">SQLException</code></p>
</li>
<li>
<p><code dir="ltr">SQLWarning</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABHAFGG"></a>
<div id="TTJDV122" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Sup<a id="sthref40"></a>port for interfaces and classes in the javax.sql package</h3>
<p>TimesTen supports the following <code dir="ltr">javax.sql</code> interfaces:</p>
<ul>
<li>
<p><code dir="ltr"><a id="sthref41"></a>DataSource</code> is implemented by <code dir="ltr">TimesTenDataSource</code>.</p>
</li>
<li>
<p><code dir="ltr"><a id="sthref42"></a>PooledConnection</code> is implemented by <code dir="ltr"><a id="sthref43"></a><a id="sthref44"></a>ObservableConnection</code>.</p>
</li>
<li>
<p><code dir="ltr"><a id="sthref45"></a>ConnectionPoolDataSource</code> is implemented by <code dir="ltr">ObservableConnectionDS</code>.</p>
</li>
<li>
<p><code dir="ltr"><a id="sthref46"></a>XADataSource</code> is implemented by <code dir="ltr">TimesTenXADataSource</code> (in package <code dir="ltr">com.timesten.jdbc.xa</code>).</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Important:</p>
Th<a id="sthref47"></a>e TimesTen JDBC driver itself does not implement a database connection pool. The <code dir="ltr">ObservableConnection</code> and <code dir="ltr">ObservableConnectionDS</code> classes simply implement standard Java EE interfaces, facilitating the creation and management of database connection pools according to the Java EE standard.
<p>A sample TimesTen connection pool package is shipped as part of the Quick Start demos. This is located in the following directory:</p>
<pre dir="ltr"><span class="italic">install_dir</span>/quickstart/sample_code/jdbc/connectionpool
</pre></div>
<p>TimesTen supports the following <code dir="ltr">javax.sql</code> event and listener:</p>
<ul>
<li>
<p><a id="sthref48"></a>When using a <code dir="ltr">PooledConnection</code> instance, you can register a <code dir="ltr">ConnectionEventListener</code> instance to listen for <code dir="ltr">ConnectionEvent</code> occurrences.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can register a <code dir="ltr">StatementEventListener</code> instance in TimesTen; however, <code dir="ltr">StatementEvent</code> instances are not supported.</div>
</div>
<!-- class="sect2" -->
<a id="BABEFBBI"></a>
<div id="TTJDV123" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">TimesTen JD<a id="sthref49"></a><a id="sthref50"></a>BC extensions</h3>
<p>For most scenarios, you can use standard JDBC functionality as supported by TimesTen.</p>
<p>TimesTen also provides the following extensions in the <code dir="ltr">com.timesten.jdbc</code> package for TimesTen-specific features.</p>
<div id="TTJDV124" class="tblhruleformal">
<p class="titleintable"><a id="sthref51"></a><a id="sthref52"></a>Table 2-2 Ti<a id="sthref53"></a><a id="sthref54"></a><a id="sthref55"></a><a id="sthref56"></a>mesTen JDBC extensions</p>
<table class="cellalignment6143" title="TimesTen JDBC extensions" summary="Summary of TimesTen JDBC extensions" dir="ltr">
<thead>
<tr class="cellalignment6137">
<th class="cellalignment6144" id="r1c1-t7">Interface</th>
<th class="cellalignment6144" id="r1c2-t7">Extends</th>
<th class="cellalignment6144" id="r1c3-t7">Remarks</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">Times<a id="sthref57"></a>TenBlob</code></p>
</td>
<td class="cellalignment6145" headers="r2c1-t7 r1c2-t7">
<p><code dir="ltr">Blob</code></p>
</td>
<td class="cellalignment6145" headers="r2c1-t7 r1c3-t7">
<p>You can cast <code dir="ltr">Blob</code> instances to <code dir="ltr">TimesTenBlob</code>. This includes features to indicate whether a LOB is an Oracle Database passthrough LOB, free LOB resources (absent in Java 5.0), and get a binary stream with position and length specifications (a signature absent in Java 5.0).</p>
<p>See <a href="#BABIFCDH">&#34;Working with LOBs&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">TimesTen<a id="sthref58"></a>CallableStatement</code></p>
</td>
<td class="cellalignment6145" headers="r3c1-t7 r1c2-t7">
<p><code dir="ltr">CallableStatement</code></p>
</td>
<td class="cellalignment6145" headers="r3c1-t7 r1c3-t7">
<p>Supports PL/SQL REF CURSORs. See <a href="#BABBIBIF">&#34;Working with REF CURSORs&#34;</a>.</p>
<p>Supports associative array binds with methods to set input parameters and to register and get output parameters. See <a href="#BABCDJAD">&#34;Binding associative arrays&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">Times<a id="sthref59"></a>TenClob</code></p>
</td>
<td class="cellalignment6145" headers="r4c1-t7 r1c2-t7">
<p><code dir="ltr">Clob</code></p>
</td>
<td class="cellalignment6145" headers="r4c1-t7 r1c3-t7">
<p>You can cast <code dir="ltr">Clob</code> instances to <code dir="ltr">TimesTenClob</code>. This includes features to indicate whether a LOB is an Oracle Database passthrough LOB, free LOB resources (absent in Java 5.0), and get a character stream with position and length specifications (a signature absent in Java 5.0).</p>
<p>See <a href="#BABIFCDH">&#34;Working with LOBs&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">Times<a id="sthref60"></a>TenConnection</code></p>
</td>
<td class="cellalignment6145" headers="r5c1-t7 r1c2-t7">
<p><code dir="ltr">Connection</code></p>
</td>
<td class="cellalignment6145" headers="r5c1-t7 r1c3-t7">
<p>Provides capabilities such as prefetching rows to improve performance, listening to events for automatic client failover, setting the track number for parallel replication schemes where you specify replication tracks, and checking database validity.</p>
<p>See <a href="#BABIFHFA">&#34;Fetching multiple rows of data&#34;</a>, <a href="#BABDDAFH">&#34;General Client Failover Features&#34;</a>, <a href="#BABJCEHE">&#34;Features for use with replication&#34;</a>, and <a href="#BABDBDJE">&#34;Check database validity&#34;</a>.</p>
<p>Supplies factory methods <code dir="ltr">createBLOB()</code> and <code dir="ltr">createCLOB()</code> for Java 5.0. (LOB factory methods are absent in Java 5.0.) See <a href="#BABIFCDH">&#34;Working with LOBs&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">TimesTenNClob</code></p>
</td>
<td class="cellalignment6145" headers="r6c1-t7 r1c2-t7">
<p><code dir="ltr">NClob</code></p>
</td>
<td class="cellalignment6145" headers="r6c1-t7 r1c3-t7">
<p>You can cast <code dir="ltr">NClob</code> instances to <code dir="ltr">TimesTenNClob</code> (Java 6 only). This includes features to indicate whether a LOB is an Oracle Database passthrough LOB.</p>
<p>See <a href="#BABIFCDH">&#34;Working with LOBs&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r7c1-t7" headers="r1c1-t7">
<p><code dir="ltr">TimesTen<a id="sthref61"></a>PreparedStatement</code></p>
</td>
<td class="cellalignment6145" headers="r7c1-t7 r1c2-t7">
<p><code dir="ltr">PreparedStatement</code></p>
</td>
<td class="cellalignment6145" headers="r7c1-t7 r1c3-t7">
<p>Supports DML returning. See <a href="#BABCBBAC">&#34;Working with DML returning (RETURNING INTO clause)&#34;</a>.</p>
<p>Supports associative array binds with a method to set input parameters. See <a href="#BABCDJAD">&#34;Binding associative arrays&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r8c1-t7" headers="r1c1-t7">
<p><code dir="ltr">TimesTen<a id="sthref62"></a>Statement</code></p>
</td>
<td class="cellalignment6145" headers="r8c1-t7 r1c2-t7">
<p><code dir="ltr">Statement</code></p>
</td>
<td class="cellalignment6145" headers="r8c1-t7 r1c3-t7">
<p>Provides capabilities for specifying a query threshold. See <a href="#BABJCEJH">&#34;Setting a threshold duration for SQL statements&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="BABHFAAF"></a>
<div id="TTJDV125" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ad<a id="sthref63"></a>ditional TimesTen classes and interfaces</h3>
<p>In addition to implementations discussed previously, TimesTen provides the following classes and interfaces in the <code dir="ltr">com.timesten.jdbc</code> package. Features supported by these classes and interfaces are discussed later in this chapter.</p>
<p class="subhead2"><a id="TTJDV126"></a>Ad<a id="sthref64"></a><a id="sthref65"></a><a id="sthref66"></a>ditional TimesTen Interfaces</p>
<ul>
<li>
<p>Use <code dir="ltr">TimesTenTypes</code> for TimesTen type extensions (for REF CURSORs).</p>
</li>
<li>
<p>Use <code dir="ltr">ClientFailoverEventListener</code> (and also the <code dir="ltr">ClientFailoverEvent</code> class below) for automatic client failover features. See <a href="#BABDIJGC">&#34;JDBC support for automatic client failover&#34;</a>.</p>
</li>
<li>
<p>Use <code dir="ltr">TimesTenVendorCode</code> for vendor codes used in SQL exceptions.</p>
</li>
</ul>
<p class="subhead2"><a id="TTJDV127"></a>Ad<a id="sthref67"></a>ditional TimesTen Classes</p>
<ul>
<li>
<p>Use <code dir="ltr">ClientFailoverEvent</code> (and also the <code dir="ltr">ClientFailoverEventListener</code> interface above) for automatic client failover features.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJIJHI"></a>
<div id="TTJDV128" class="sect1">
<h2 class="sect1">Managing TimesTen database con<a id="sthref68"></a>nections</h2>
<p>The type of DSN you create depends on whether your application connects directly to the database or connects by a client. If you intend to connect directly to the database, create a DSN as described in <a class="olink TTOPR139" href="../TTOPR/using.htm#TTOPR139">&#34;Creating a Data Manager DSN on UNIX&#34;</a> or <a class="olink TTOPR129" href="../TTOPR/using.htm#TTOPR129">&#34;Creating a Data Manager DSN on Windows&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>. If you intend to create a client connection to the database, create a DSN as described in <a class="olink TTOPR190" href="../TTOPR/client_server.htm#TTOPR190">&#34;Creating and configuring client DSNs on Windows&#34;</a> or <a class="olink TTOPR198" href="../TTOPR/client_server.htm#TTOPR198">&#34;Creating and configuring client DSNs on UNIX&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<p>After you have created a DSN, your application can connect to the database. This section describes how to create a JDBC connection to a database using either the JDBC direct driver or the JDBC client driver.</p>
<p>The operations described in this section are based on the <code dir="ltr">level1</code> demo. Refer to <a href="env_setup.htm#CHDEEGIC">&#34;About the TimesTen Java demos&#34;</a>.</p>
<p>This following topics are covered here:</p>
<ul>
<li>
<p><a href="#BABHFAHE">Create a connection URL for the database and specify connection attributes</a></p>
</li>
<li>
<p><a href="#BABHCGHC">Connect to the database</a></p>
</li>
<li>
<p><a href="#BABJECBB">Disconnect from the database</a></p>
</li>
<li>
<p><a href="#BABGGGBE">Open and close a direct connection</a></p>
</li>
<li>
<p><a href="#BABHAGHD">Access control for connections</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Lo<a id="sthref69"></a><a id="sthref70"></a><a id="sthref71"></a>ading the TimesTen driver (Java 5.0):
<p>It is recommended that you use Java 6 with TimesTen. If you use Java 5.0, however, you must explicitly load the TimesTen driver so that it is available for making database connections (otherwise TimesTen returns an error when the application attempts to connect). This step is not required with Java 6.</p>
<p>The following are the TimesTen JDBC drivers (for direct and client/server connections, respectively):</p>
<pre dir="ltr">com.timesten.jdbc.TimesTenDriver
com.timesten.jdbc.TimesTenClientDriver
</pre>
<p>If you are using the <code dir="ltr">DriverManager</code> interface to connect to TimesTen with Java 5.0, call the <code dir="ltr">Class.forName()</code> method to load the TimesTen JDBC driver. This method creates an instance of the TimesTen driver and registers it with the driver manager. If you are using the <code dir="ltr">TimesTenDataSource</code> interface, you are not required to call <code dir="ltr">Class.forName()</code>.</p>
<p>To identify and load the TimesTen direct driver, for example:</p>
<pre dir="ltr">Class.forName(&#34;com.timesten.jdbc.TimesTenDriver&#34;);
</pre></div>
<a id="BABHFAHE"></a>
<div id="TTJDV130" class="sect2">
<h3 class="sect2">Create a co<a id="sthref72"></a><a id="sthref73"></a><a id="sthref74"></a>nnection URL for the database and specify connection attributes</h3>
<p>To create a JDBC connection, you must specify a TimesTen connection URL for the database. The format of a TimesTen connection URL is as follows:</p>
<pre dir="ltr">jdbc:timesten:{direct|client}:dsn=DSNname;[DSNattributes;]
</pre>
<p>The default is <code dir="ltr">direct</code>.</p>
<p>For example, the following creates a direct connection to the sample database:</p>
<pre dir="ltr">String URL = &#34;jdbc:timesten:direct:dsn=sampledb_1122&#34;;
</pre>
<p>You can programmatically set or override the connection attributes in the DSN description by specifying attributes in the connection URL.</p>
<p>Re<a id="sthref75"></a><a id="sthref76"></a><a id="sthref77"></a><a id="sthref78"></a><a id="sthref79"></a>fer to <a class="olink TTOPR127" href="../TTOPR/using.htm#TTOPR127">&#34;Connection attributes for Data Manager DSNs or server DSNs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for introductory information about connection attributes. General connection attributes require no special privilege. First connection attributes are set when the database is first loaded, and persist for all connections. Only the instance administrator can load a database with changes to first connection attribute settings. Refer to <a class="olink TTREF114" href="../TTREF/attribute.htm#TTREF114">&#34;Connection Attributes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for specific information about any particular connection attribute, including required privilege.</p>
<p>For example, to set the <code dir="ltr">LockLevel</code> general connection attribute to 1, create a URL as follows:</p>
<pre dir="ltr">String URL = &#34;jdbc:timesten:direct:dsn=sampledb_1122;LockLevel=1&#34;;
</pre></div>
<!-- class="sect2" -->
<a id="BABHCGHC"></a>
<div id="TTJDV131" class="sect2">
<h3 class="sect2">Connect to the database</h3>
<p>After you have defined a URL, you can use the <code dir="ltr">getConnection()</code> method of either <code dir="ltr">DriverManager</code> or <code dir="ltr">TimesTenDataSource</code> to connect to the database.</p>
<p>If you use the <code dir="ltr">DriverManager.getConnection()</code> method, specify the driver URL to connect to the database.</p>
<pre dir="ltr">import java.sql.*;
...
Connection conn = DriverManager.getConnection(URL);
</pre>
<p>To use the <code dir="ltr">TimesTenDataSource</code> method <code dir="ltr">getConnection()</code>, first create a data source. Then use the <code dir="ltr">TimesTenDataSource</code> method <code dir="ltr">setUrl()</code> to set the URL and <code dir="ltr">getConnection()</code> to connect:</p>
<pre dir="ltr">import com.timesten.jdbc.TimesTenDataSource;
import java.sql.*;
...

TimesTenDataSource ds = new TimesTenDataSource();
ds.setUrl(&#34;jdbc:timesten:direct:&lt;<span class="italic">dsn</span>&gt;&#34;);
Connection conn = ds.getConnection();
</pre>
<p>T<a id="sthref80"></a><a id="sthref81"></a><a id="sthref82"></a>he TimesTen user name and password can be set in the DSN within the URL in the <code dir="ltr">setUrl()</code> call, but there are also <code dir="ltr">TimesTenDataSource</code> methods to set them separately, as well as to set the Oracle Database password (as applicable):</p>
<pre dir="ltr">TimesTenDataSource ds = new TimesTenDataSource();
ds.setUser(myttusername);                    // User name to log in to TimesTen
ds.setPassword(myttpwd);                     // Password to log in to TimesTen
ds.setUrl(&#34;jdbc:timesten:direct:&lt;<span class="italic">dsn</span>&gt;&#34;);
ds.setOraclePassword(myorapwd);              // Password to log in to Oracle DB
Connection conn = ds.getConnection();
</pre>
<p>Either the <code dir="ltr">DriverManager.getConnection()</code> method or the <code dir="ltr">ds.getConnection()</code> method returns a <code dir="ltr">Connection</code> object (<code dir="ltr">conn</code> in this example) that you can use as a handle to the database. See the <code dir="ltr">level1</code> demo for an example on how to use the <code dir="ltr">DriverManager</code> method <code dir="ltr">getConnection()</code>, and the <code dir="ltr">level2</code> and <code dir="ltr">level3</code> demos for examples of using the <code dir="ltr">TimesTenDataSource</code> method <code dir="ltr">getConnection()</code>. Refer to <a href="env_setup.htm#CHDEEGIC">&#34;About the TimesTen Java demos&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABJECBB"></a>
<div id="TTJDV132" class="sect2">
<h3 class="sect2">Discon<a id="sthref83"></a>nect from the database</h3>
<p>When you are finished accessing the database, call the <code dir="ltr">Connection</code> method <code dir="ltr">close()</code> to close the connection to the database.</p>
<p>If an error has occurred, you may want to roll back the transaction before disconnecting from the database. See <a href="#CEGFBDJI">&#34;Handling non-fatal errors&#34;</a> and <a href="#BABDCCBC">&#34;Rolling back failed transactions&#34;</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="BABGGGBE"></a>
<div id="TTJDV133" class="sect2">
<h3 class="sect2">Ope<a id="sthref84"></a><a id="sthref85"></a>n and close a direct connection</h3>
<p><a href="#BABHCCJC">Example 2-1</a> shows the general framework for an application that uses the <code dir="ltr">DriverManager</code> class to create a direct connection to the sample database, execute some SQL, and then close the connection. See the <code dir="ltr">level1</code> demo for a working example. (See <a href="env_setup.htm#CHDEEGIC">&#34;About the TimesTen Java demos&#34;</a> regarding the demos.)</p>
<div id="TTJDV134" class="example">
<p class="titleinexample"><a id="BABHCCJC"></a>Example 2-1 Con<a id="sthref86"></a>necting, executing SQL, and disconnecting</p>
<pre dir="ltr">String URL = &#34;jdbc:timesten:dsn=sampledb_1122&#34;;
Connection conn = null;

try {
     Class.forName(&#34;com.timesten.jdbc.TimesTenDriver&#34;);
} catch (ClassNotFoundException ex) {
      // See <a href="#BABHGDGE">&#34;Handling errors&#34;</a>
}

try {
    // Open a connection to TimesTen
    conn = DriverManager.getConnection(URL);

    // Report any SQLWarnings on the connection
    // See <a href="#BABEBGEE">&#34;Reporting errors and warnings&#34;</a>

    // Do SQL operations
    // See <a href="#BABHIBAD">&#34;Managing TimesTen data&#34;</a> below

    // Close the connection to TimesTen
    conn.close();

// Handle any errors
} catch (SQLException ex) {
    // See <a href="#BABHGDGE">&#34;Handling errors&#34;</a>
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABDBDJE"></a>
<div id="TTJDV349" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Che<a id="sthref87"></a><a id="sthref88"></a>ck database validity</h3>
<p>Applications can call the following <code dir="ltr">TimesTenConnection</code> method to detect whether the database is valid:</p>
<pre dir="ltr">boolean isDataStoreValid() throws java.sql.SQLException
</pre>
<p>It returns <code dir="ltr">true</code> if the database is valid, or <code dir="ltr">false</code> if the database is in an invalid state, such as due to system or application failure.</p>
</div>
<!-- class="sect2" -->
<a id="BABHAGHD"></a>
<div id="TTJDV135" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ac<a id="sthref89"></a>cess control for connections</h3>
<p>In order for any user (other than the instance administrator) to connect to a database, the <code dir="ltr">CREATE SESSION</code> privilege must be granted. This is a system privilege so must be granted to the user by the instance administrator or someone with <code dir="ltr">ADMIN</code> privilege, either directly or through the <code dir="ltr">PUBLIC</code> role. Refer to <a class="olink TTOPR236" href="../TTOPR/accesscontrol.htm#TTOPR236">&#34;Managing Access Control&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for additional information and examples.</p>
<p>To create a JMS/XLA connection and execute JMS/XLA functionality, a user must be granted the <code dir="ltr">XLA</code> privilege, discussed in <a href="jmsxla_event.htm#CIHIDBJJ">&#34;Access control impact on XLA&#34;</a>, in addition to the <code dir="ltr">CREATE SESSION</code> privilege.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHIBAD"></a>
<div id="TTJDV136" class="sect1">
<h2 class="sect1">Managing TimesTen data</h2>
<p>This section provides detailed information on working with data in a TimesTen database. It includes the following topics:</p>
<ul>
<li>
<p><a href="#BABIBADD">Executing simple SQL statements</a></p>
</li>
<li>
<p><a href="#BABCAAAB">Working with TimesTen result sets: hints and restrictions</a></p>
</li>
<li>
<p><a href="#BABIFHFA">Fetching multiple rows of data</a></p>
</li>
<li>
<p><a href="#BABHCBDF">Binding parameters and executing statements</a></p>
</li>
<li>
<p><a href="#BABBIBIF">Working with REF CURSORs</a></p>
</li>
<li>
<p><a href="#BABCBBAC">Working with DML returning (RETURNING INTO clause)</a></p>
</li>
<li>
<p><a href="#BABGCJEA">Working with rowids</a></p>
</li>
<li>
<p><a href="#BABIFCDH">Working with LOBs</a></p>
</li>
<li>
<p><a href="#BABEJEJC">Committing or rolling back changes to the database</a></p>
</li>
<li>
<p><a href="#BABDIIEC">Managing multiple threads</a></p>
</li>
<li>
<p><a href="#BABFACEI">Java escape syntax and SQL functions</a></p>
</li>
</ul>
<a id="BABIBADD"></a>
<div id="TTJDV137" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ex<a id="sthref90"></a><a id="sthref91"></a>ecuting simple SQL statements</h3>
<p><a class="olink TTOPR327" href="../TTOPR/comp.htm#TTOPR327">&#34;Working with Data in a TimesTen Database&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> describes how to use SQL to manage data. This section describes how to use the <code dir="ltr">createStatement()</code> method of a <code dir="ltr">Connection</code> instance, and the <code dir="ltr">executeUpdate()</code> or <code dir="ltr">executeQuery()</code> method of a <code dir="ltr">Statement</code> instance, to execute a SQL statement within a Java application.</p>
<p>Unless statements are prepared in advance, use the execution methods of a <code dir="ltr">Statement</code> object, such as <code dir="ltr">execute()</code>, <code dir="ltr">executeUpdate()</code> or <code dir="ltr">executeQuery()</code>, depending on the nature of the SQL statement and any returned result set.</p>
<p>For SQL statements that are prepared in advance, use the same execution methods of a <code dir="ltr">PreparedStatement</code> object.</p>
<p>The <code dir="ltr">execute()</code> method returns <code dir="ltr">true</code> if there is a result set (for example, on a <code dir="ltr">SELECT</code>) or <code dir="ltr">false</code> if there is no result set (for example, on an <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, or <code dir="ltr">DELETE</code>). The <code dir="ltr">executeUpdate()</code> method returns the number of rows affected. For example, when executing an <code dir="ltr">INSERT</code> statement, the <code dir="ltr">executeUpdate()</code> method returns the number of rows inserted. The <code dir="ltr">executeQuery()</code> method returns a result set, so it should only be called when a result set is expected (for example, when executing a <code dir="ltr">SELECT</code> statement).</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>See <a href="#BABCAAAB">&#34;Working with TimesTen result sets: hints and restrictions&#34;</a> for details about what you should know when working with result sets generated by TimesTen.</p>
</li>
<li>
<p>Access control privileges are checked both when SQL is prepared and when it is executed in the database. Refer to <a href="#BABFJBFE">&#34;Considering TimesTen features for access control&#34;</a> for related information.</p>
</li>
</ul>
</div>
<div id="TTJDV138" class="example">
<p class="titleinexample"><a id="sthref92"></a>Example 2-2 Ex<a id="sthref93"></a>ecuting an update</p>
<p>This example uses the <code dir="ltr">executeUpdate()</code> method on the <code dir="ltr">Statement</code> object to execute an <code dir="ltr">INSERT</code> statement to insert data into the <code dir="ltr">customer</code> table in the current schema. The connection must have been opened, which is not shown.</p>
<pre dir="ltr">Connection conn = null;
Statement stmt = null;
...
// [Code to open connection. See <a href="#BABHCGHC">&#34;Connect to the database&#34;</a>...] 
...
try {
    stmt = conn.createStatement();
    int numRows = stmt.executeUpdate(&#34;insert into customer values&#34; 
                  + &#34;(40, &#39;West&#39;, &#39;Big Dish&#39;, &#39;123 Signal St.&#39;)&#34;);
}
catch (SQLException ex) {
    ...
}
</pre></div>
<!-- class="example" -->
<div id="TTJDV139" class="example">
<p class="titleinexample"><a id="sthref94"></a>Example 2-3 Exe<a id="sthref95"></a><a id="sthref96"></a>cuting a query</p>
<p>This example uses an <code dir="ltr">executeQuery()</code> call on the <code dir="ltr">Statement</code> object to execute a <code dir="ltr">SELECT</code> statement on the <code dir="ltr">customer</code> table in the current schema and display the returned <code dir="ltr">java.sql.ResultSet</code> instance:</p>
<pre dir="ltr">Statement stmt = null;
. . . . . .
try {
  ResultSet rs = stmt.executeQuery(&#34;select cust_num, region, &#34; +
                      &#34;name, address from customer&#34;);
  System.out.println(&#34;Fetching result set...&#34;);
  while (rs.next()) {
    System.out.println(&#34;\n Customer number: &#34; + rs.getInt(1));
    System.out.println(&#34; Region: &#34; + rs.getString(2));
    System.out.println(&#34; Name: &#34; + rs.getString(3));
    System.out.println(&#34; Address: &#34; + rs.getString(4));
    }
  } 
catch (SQLException ex) {
  ex.printStackTrace();
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABCAAAB"></a>
<div id="TTJDV140" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Wo<a id="sthref97"></a><a id="sthref98"></a>rking with TimesTen result sets: hints and restrictions</h3>
<p>Use <code dir="ltr">ResultSet</code> objects to process query results. In addition, some methods and built-in procedures return TimesTen data in the form of a <code dir="ltr">ResultSet</code> object. This section describes what you should know when using <code dir="ltr">ResultSet</code> objects from TimesTen.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
In TimesTen, any operation that ends your transaction, such as a commit or rollback, closes all cursors associated with the connection.</div>
<ul>
<li>
<p>TimesTen does not support multiple open <code dir="ltr">ResultSet</code> objects per statement. TimesTen cannot return multiple <code dir="ltr">ResultSet</code> objects from a single <code dir="ltr">Statement</code> object without first closing the current result set.</p>
</li>
<li>
<p>TimesTen does not support holdable cursors. You cannot specify the holdability of a result set, essentially whether a cursor can remain open after it has been committed.</p>
</li>
<li>
<p><code dir="ltr">ResultSet</code> objects are not scrollable or updatable, so you cannot specify <code dir="ltr">ResultSet.TYPE_SCROLL_SENSITIVE</code> or <code dir="ltr">ResultSet.CONCUR_UPDATABLE</code>.</p>
</li>
<li>
<p>Use the <code dir="ltr">ResultSet</code> method <code dir="ltr">close()</code> to close a result set as soon as you are done with it. For performance reasons, this is especially important for result sets used for both read and update operations and for result sets used in pooled connections.</p>
</li>
<li>
<p>Calling the <code dir="ltr">ResultSet</code> method <code dir="ltr">getString()</code> is more costly in terms of performance if the underlying data type is not a string. Because Java strings are immutable, <code dir="ltr">getString()</code> must allocate space for a new string each time it is called. Do not use <code dir="ltr">getString()</code> to retrieve primitive numeric types, like <code dir="ltr">byte</code> or <code dir="ltr">int</code>, unless it is absolutely necessary. For example, it is much faster to call <code dir="ltr">getInt()</code> on an integer column. Also see <a href="tuning.htm#BCGCDBHE">&#34;Use the ResultSet method getString() sparingly&#34;</a>.</p>
<p>In addition, for dates and timestamps, the <code dir="ltr">ResultSet</code> native methods <code dir="ltr">getDate()</code> and <code dir="ltr">getTimestamp()</code> have better performance than <code dir="ltr">getString()</code>.</p>
</li>
<li>
<p>Application performance is affected by the choice of <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> calls and by any required data transformations after invocation.</p>
</li>
<li>
<p>JDBC ignores the setting for the <code dir="ltr">ConnectionCharacterSet</code> attribute. It returns data in UTF-16 encoding.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABIFHFA"></a>
<div id="TTJDV162" class="sect2">
<h3 class="sect2">F<a id="sthref99"></a><a id="sthref100"></a>etching multiple rows of data</h3>
<p>Fetching multiple rows of data can increase the performance of a client/server application that connects to a database set with Read Committed isolation level.</p>
<p>You can specify the number of rows to be prefetched as follows.</p>
<ul>
<li>
<p>Call the <code dir="ltr">Statement</code> or <code dir="ltr">ResultSet</code> method <code dir="ltr">setFetchSize()</code>. These are the standard JDBC calls, but the limitation is that they only affect one statement at a time.</p>
</li>
<li>
<p>Call the <code dir="ltr">TimesTenConnection</code> method <code dir="ltr">setTtPrefetchCount()</code>. This enables a TimesTen extension that establishes prefetch at the connection level so that all of the statements on the connection use the same prefetch setting.</p>
</li>
</ul>
<p>This section describes the connection-level prefetch implemented in TimesTen.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The TimesTen prefetch count extension provides no benefit for an application using a direct connection to the database.</div>
<p>When you set the prefetch count to 0, TimesTen uses a default prefetch count according to the isolation level you have set for the database, and sets the prefetch count to that value. With Read Committed isolation level, the default prefetch value is 5. With Serializable isolation level, the default is 128. The default prefetch value is a good setting for most applications. Generally, a higher value may result in better performance for larger result sets, at the expense of slightly higher resource use.</p>
<p>To disable prefetch, set the prefetch count to 1.</p>
<p>Call the <code dir="ltr">TimesTenConnection</code> method <code dir="ltr">getTtPrefetchCount()</code> to check the current prefetch value.</p>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
<div id="TTJDV163" class="example">
<p class="titleinexample"><a id="sthref101"></a>Example 2-4 Setting a prefetch count</p>
<p>The following code uses a <code dir="ltr">setTtPrefetchCount()</code> call to set the prefetch count to 10, then uses a <code dir="ltr">getTtPrefetchCount()</code> call to return the prefetch count in the count variable.</p>
<pre dir="ltr">TimesTenConnection conn =
    (TimesTenConnection) DriverManager.getConnection(url);

// set prefetch count to 10 for this connection
conn.setTtPrefetchCount(10);

// Return the prefetch count to the &#39;count&#39; variable.
int count = conn.getTtPrefetchCount();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABHCBDF"></a>
<div id="TTJDV308" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Binding parameters and executing statements</h3>
<p>This sections discusses how to bind input or output parameters for SQL statements. The following topics are covered.</p>
<ul>
<li>
<p><a href="#BABHDAHH">Preparing SQL statements and setting input parameters</a></p>
</li>
<li>
<p><a href="#BABEFDDD">Working with output and input/output parameters</a></p>
</li>
<li>
<p><a href="#BABEBDHF">Binding duplicate parameters in SQL statements</a></p>
</li>
<li>
<p><a href="#BABDAEAB">Binding duplicate parameters in PL/SQL</a></p>
</li>
<li>
<p><a href="#BABCDJAD">Binding associative arrays</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>Use the <code dir="ltr">Statement</code>, <code dir="ltr">PreparedStatement</code>, or <code dir="ltr">CallableStatement</code> method <code dir="ltr">close()</code> to close a statement you have finished using it.</p>
</li>
<li>
<p>The term &#34;bind parameter&#34; as used in TimesTen developer guides (in keeping with ODBC terminology) is equivalent to the term &#34;bind variable&#34; as used in TimesTen PL/SQL documents (in keeping with Oracle Database PL/SQL terminology).</p>
</li>
</ul>
</div>
<a id="BABHDAHH"></a>
<div id="TTJDV141" class="sect3">
<h4 class="sect3">Prep<a id="sthref102"></a><a id="sthref103"></a><a id="sthref104"></a><a id="sthref105"></a><a id="sthref106"></a><a id="sthref107"></a><a id="sthref108"></a><a id="sthref109"></a>aring SQL statements and setting input parameters</h4>
<p>SQL statements that are to be executed more than once should be prepared in advance by calling the <code dir="ltr">Connection</code> method <code dir="ltr">prepareStatement()</code>. For maximum performance, prepare parameterized statements.</p>
<p>Be aware of the following:</p>
<ul>
<li>
<p>The TimesTen binding mechanism (early binding) differs from that of Oracle Database (late binding). TimesTen requires the data types before preparing queries. As a result, there will be an error if the data type of each bind parameter is not specified or cannot be inferred from the SQL statement. This would apply, for example, to the following statement:</p>
<pre dir="ltr">SELECT &#39;x&#39; FROM DUAL WHERE ? = ?;
</pre>
<p>You could address the issue as follows, for example.</p>
<pre dir="ltr">SELECT &#39;x&#39; from DUAL WHERE CAST(? as VARCHAR2(10)) = CAST(? as VARCHAR2(10));
</pre></li>
<li>
<p>By default (when connection attribute <code dir="ltr">PrivateCommands=0</code>), TimesTen shares prepared statements between connections, so subsequent prepares of the same statement on different connections execute very quickly.</p>
</li>
<li>
<p>Application performance is influenced by the choice of <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> calls and by any required data transformations before invocation. For example, for time, dates, and timestamps, the <code dir="ltr">PreparedStatement</code> native methods <code dir="ltr">setTime()</code>, <code dir="ltr">setDate()</code> and <code dir="ltr">setTimestamp()</code> have better performance than <code dir="ltr">setString()</code>.</p>
</li>
<li>
<p>Access control privileges are checked both when SQL is prepared and when it is executed in the database. Refer to <a href="#BABFJBFE">&#34;Considering TimesTen features for access control&#34;</a> for related information.</p>
</li>
<li>
<p>For <code dir="ltr">TT_TINYINT</code> columns, use <code dir="ltr">setShort()</code> or <code dir="ltr">setInt()</code> instead of <code dir="ltr">setByte()</code> to utilize the full range of <code dir="ltr">TT_TINYINT</code> (0-255).</p>
</li>
</ul>
<div id="TTJDV142" class="example">
<p class="titleinexample"><a id="sthref110"></a>Example 2-5 Prepared statement for querying</p>
<p>This example shows the basics of an <code dir="ltr">executeQuery()</code> call on a <code dir="ltr">PreparedStatement</code> object. It executes a prepared <code dir="ltr">SELECT</code> statement and displays the returned result set.</p>
<pre dir="ltr">PreparedStatement pSel = conn.prepareStatement(&#34;select cust_num, &#34; +
                         &#34;region, name, address &#34; +
                         &#34;from customer&#34; +
                         &#34;where region = ?&#34;);
pSel.setInt(1,1);

try {
  ResultSet rs = pSel.executeQuery();

  while (rs.next()) {
    System.out.println(&#34;\n Customer number: &#34; + rs.getInt(1));
    System.out.println(&#34; Region: &#34; + rs.getString(2));
    System.out.println(&#34; Name: &#34; + rs.getString(3));
    System.out.println(&#34; Address: &#34; + rs.getString(4));
  }
} 
catch (SQLException ex) {
   ex.printStackTrace();
}
</pre></div>
<!-- class="example" -->
<div id="TTJDV143" class="example">
<p class="titleinexample"><a id="BABDFGDC"></a>Example 2-6 Prepared statement for updating</p>
<p>This example shows how a single parameterized statement can be substituted for four separate statements.</p>
<p>Rather than execute a similar <code dir="ltr">INSERT</code> statement with different values:</p>
<pre dir="ltr">Statement.execute(&#34;insert into t1 values (1, 2)&#34;);
Statement.execute(&#34;insert into t1 values (3, 4)&#34;);
Statement.execute(&#34;insert into t1 values (5, 6)&#34;);
Statement.execute(&#34;insert into t1 values (7, 8)&#34;);
</pre>
<p>It is much more efficient to prepare a single parameterized <code dir="ltr">INSERT</code> statement and use <code dir="ltr">PreparedStatement</code> methods <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> to set the row values before each execute.</p>
<pre dir="ltr">PreparedStatement pIns = conn.PreparedStatement(&#34;insert into t1 values (?,?)&#34;);

pIns.setInt(1, 1);
pIns.setInt(2, 2);
pIns.executeUpdate();

pIns.setInt(1, 3);
pIns.setInt(2, 4);
pIns.executeUpdate();

pIns.setInt(1, 5);
pIns.setInt(2, 6);
pIns.executeUpdate();

pIns.setInt(1, 7);
pIns.setInt(2, 8);
pIns.executeUpdate();

conn.commit();
pIns.close();
</pre></div>
<!-- class="example" -->
<p>TimesTen shares <a id="sthref111"></a>prepared statements automatically after they have been committed. For example, if two or more separate connections to the database each prepare the same statement, then the second, third, ... , <code dir="ltr"><span class="codeinlineitalic">n</span></code>th prepared statements return very quickly because TimesTen remembers the first prepared statement.</p>
<div id="TTJDV151" class="example">
<p class="titleinexample"><a id="sthref112"></a>Example 2-7 Prepared statements for updating and querying</p>
<p>This example prepares <code dir="ltr">INSERT</code> and <code dir="ltr">SELECT</code> statements, executes the <code dir="ltr">INSERT</code> twice, executes the <code dir="ltr">SELECT</code>, and prints the returned result set. For a working example, see the <code dir="ltr">level1</code> demo. (Refer to <a href="env_setup.htm#CHDEEGIC">&#34;About the TimesTen Java demos&#34;</a> regarding the demos.)</p>
<pre dir="ltr">Connection conn = null;
...
// [Code to open connection. See <a href="#BABHCGHC">&#34;Connect to the database&#34;</a>...]
...

// Disable auto-commit
conn.setAutoCommit(false);

    // Report any SQLWarnings on the connection
    // See <a href="#BABEBGEE">&#34;Reporting errors and warnings&#34;</a>

// Prepare a parameterized INSERT and a SELECT Statement
PreparedStatement pIns = 
                  conn.prepareStatement(&#34;insert into customer values (?,?,?,?)&#34;);

PreparedStatement pSel = conn.prepareStatement
    (&#34;select cust_num, region, name, &#34; +
    &#34;address from customer&#34;);

// Data for first INSERT statement
pIns.setInt(1, 100);
pIns.setString(2, &#34;N&#34;);
pIns.setString(3, &#34;Fiberifics&#34;);
pIns.setString(4, &#34;123 any street&#34;);

// Execute the INSERT statement
pIns.executeUpdate();

// Data for second INSERT statement
pIns.setInt(1, 101);
pIns.setString(2, &#34;N&#34;);
pIns.setString(3, &#34;Natural Foods Co.&#34;);
pIns.setString(4, &#34;5150 Johnson Rd&#34;);

// Execute the INSERT statement
pIns.executeUpdate();

// Commit the inserts
conn.commit();

// Done with INSERTs, so close the prepared statement
pIns.close();

// Report any SQLWarnings on the connection. 
reportSQLWarnings(conn.getWarnings());

// Execute the prepared SELECT statement
ResultSet rs = pSel.executeQuery();

System.out.println(&#34;Fetching result set...&#34;);
while (rs.next()) {
    System.out.println(&#34;\n Customer number: &#34; + rs.getInt(1));
    System.out.println(&#34; Region: &#34; + rs.getString(2));
    System.out.println(&#34; Name: &#34; + rs.getString(3));
    System.out.println(&#34; Address: &#34; + rs.getString(4));
}

// Close the result set.
rs.close();

// Commit the select - yes selects must be committed too
conn.commit();

// Close the select statement - we&#39;re done with it
pSel.close();
</pre></div>
<!-- class="example" -->
<div id="TTJDV144" class="example">
<p class="titleinexample"><a id="sthref113"></a>Example 2-8 Prepared statements for multiple connections</p>
<p>This example, prepares three identical parameterized <code dir="ltr">INSERT</code> statements for three separate connections. The first prepared <code dir="ltr">INSERT</code> for connection <code dir="ltr">conn1</code> is shared (inside the TimesTen internal prepared statement cache) with the <code dir="ltr">conn2</code> and <code dir="ltr">conn3</code> connections, speeding up the prepare operations for <code dir="ltr">pIns2</code> and <code dir="ltr">pIns3</code>:</p>
<pre dir="ltr">Connection conn1 = null;
Connection conn2 = null;
Connection conn3 = null;
.....
PreparedStatement pIns1 = conn1.prepareStatement
                  (&#34;insert into t1 values (?,?)&#34;);

PreparedStatement pIns2 = conn2.prepareStatement
                  (&#34;insert into t1 values (?,?)&#34;);

PreparedStatement pIns3 = conn3.prepareStatement
                  (&#34;insert into t1 values (?,?)&#34;);
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
All optimizer hints, such as join ordering, indexes and locks, must match for the statement to be shared in the internal TimesTen prepared statement cache. Also, if the prepared statement references a temp table, it is only shared within a single connection.</div>
</div>
<!-- class="sect3" -->
<a id="BABEFDDD"></a>
<div id="TTJDV155" class="sect3">
<h4 class="sect3">Working w<a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a><a id="sthref117"></a>ith output and input/output parameters</h4>
<p><a href="#BABHDAHH">&#34;Preparing SQL statements and setting input parameters&#34;</a> shows how to prepare a statement and set input parameters using <code dir="ltr">PreparedStatement</code> methods. TimesTen also supports output and input/output parameters, for which you use <code dir="ltr">java.sql.CallableStatement</code> instead of <code dir="ltr">PreparedStatement</code>, as follows.</p>
<ol>
<li>
<p>Use the method <code dir="ltr">registerOutParameter()</code> to register an output or input/output parameter, specifying the parameter position (position in the statement) and data type.</p>
<p>This is the standard method as specified in the <code dir="ltr">CallableStatement</code> interface:</p>
<pre dir="ltr">void registerOutParameter(int <span class="italic">parameterIndex</span>, int <span class="italic">sqlType</span>, int <span class="italic">scale</span>)
</pre>
<p>Be aware, however, that if you use this standard version for <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR</code>, <code dir="ltr">BINARY</code>, or <code dir="ltr">VARBINARY</code> data, TimesTen allocates memory to hold the largest possible value. In many cases this is wasteful.</p>
<p>Instead, you can use the TimesTen extended interface <code dir="ltr">TimesTenCallableStatement</code>, which has a <code dir="ltr">registerOutParameter()</code> signature that enables you to specify the maximum data length. For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NCHAR</code>, and <code dir="ltr">NVARCHAR</code>, the unit of length is number of characters. For <code dir="ltr">BINARY</code> and <code dir="ltr">VARBINARY</code>, it is bytes.</p>
<pre dir="ltr">void registerOutParameter(int <span class="italic">paramIndex</span>,
                          int <span class="italic">sqlType</span>,
                          int <span class="italic">ignore</span>, //This parameter is ignored by TimesTen.
                          int <span class="italic">maxLength</span>)
</pre></li>
<li>
<p>Use the appropriate <code dir="ltr">CallableStatement</code> method <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code>, where <code dir="ltr"><span class="codeinlineitalic">XXX</span></code> indicates the data type, to set the input value of an input/output parameter. Specify the parameter position and data value.</p>
</li>
<li>
<p>Use the appropriate <code dir="ltr">CallableStatement</code> method <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> to get the output value of an output or input/output parameter, specifying the parameter position.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Important:</p>
Check for SQL warnings before processing output parameters. In the event of a warning, output parameters are undefined. See <a href="#BABHGDGE">&#34;Handling errors&#34;</a> for general information about errors and warnings.</div>
<div class="infobox-note">
<p class="notep1">Notes:</p>
In TimesTen:
<ul>
<li>
<p>You cannot pass parameters to a <code dir="ltr">CallableStatement</code> object by name. You must set parameters by position. You cannot use the SQL escape syntax.</p>
</li>
<li>
<p>The <code dir="ltr">registerOutParameter()</code> signatures specifying the parameter by name are not supported. You must specify the parameter by position.</p>
</li>
<li>
<p>SQL structured types are not supported.</p>
</li>
</ul>
</div>
<div id="TTJDV156" class="example">
<p class="titleinexample"><a id="sthref118"></a>Example 2-9 Using an output parameter in a callable statement</p>
<p>This example shows how to use a callable statement with an output parameter. In the <code dir="ltr">TimesTenCallableStatement</code> instance, a PL/SQL block calls a function <code dir="ltr">RAISE_SALARY</code> that calculates a new salary and returns it as an integer. Assume a <code dir="ltr">Connection</code> instance <code dir="ltr">conn</code>. (Refer to <a class="olink TTPLS" href="../TTPLS/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span></a> for information about PL/SQL.)</p>
<pre dir="ltr">import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import com.timesten.jdbc.TimesTenCallableStatement;
...
// Prepare to call a PL/SQL stored procedure RAISE_SALARY
CallableStatement cstmt = conn.prepareCall
                          (&#34;BEGIN :newSalary := RAISE_SALARY(:name, :inc); end;&#34;);
      
// Declare that the first param (newSalary) is a return (output) value of type int
cstmt.registerOutParameter(1, Types.INTEGER);
 
// Raise Leslie&#39;s salary by $2000 (she wanted $3000 but we held firm)
cstmt.setString(2, &#34;LESLIE&#34;); // name argument (type String) is the second param
cstmt.setInt(3, 2000); // raise argument (type int) is the third param
 
// Do the raise
cstmt.execute();

// Check warnings. If there are warnings, output parameter values are undefined.
SQLWarning wn;
boolean warningFlag = false;
if ((wn = cstmt.getWarnings() ) != null) {
   do {
        warningFlag = true;
        System.out.println(wn);
        wn = wn.getNextWarning();
   } while(wn != null);
}      
      
// Get the new salary back
if (!warningFlag) {
   int new_salary = cstmt.getInt(1);
   System.out.println(&#34;The new salary is: &#34; + new_salary);
}

// Close the statement and connection
cstmt.close();
conn.close();
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABEBDHF"></a>
<div id="TTJDV146" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Bin<a id="sthref119"></a><a id="sthref120"></a>ding duplicate parameters in SQL statements</h4>
<p>TimesTen supports two distinct modes for binding duplicate parameters in a SQL statement:</p>
<ul>
<li>
<p>Oracle mode: Multiple occurrences of the same parameter name are considered to be distinct parameters.</p>
</li>
<li>
<p>Traditional TimesTen mode, as in earlier releases: Multiple occurrences of the same parameter name are considered to be multiple occurrences of the same parameter.</p>
</li>
</ul>
<p>Yo<a id="sthref121"></a>u can choose the desired mode through the <code dir="ltr">DuplicateBindMode</code> TimesTen general connection attribute. <code dir="ltr">DuplicateBindMode=0</code> (the default) is for the Oracle mode, and <code dir="ltr">DuplicateBindMode=1</code> is for the TimesTen mode. Because this is a general connection attribute, different connections to the same database can use different values. Refer to <a class="olink TTREF161" href="../TTREF/attribute.htm#TTREF161">&#34;DuplicateBindMode&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for additional information about this attribute.</p>
<p>The rest of this section provides details for each mode, considering the following query:</p>
<pre dir="ltr">SELECT * FROM employees
  WHERE employee_id &lt; :a AND manager_id &gt; :a AND salary &lt; :b;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This discussion applies only to SQL statements issued directly from JDBC (not through PL/SQL, for example).</div>
<div id="TTJDV147" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref122"></a>
<h5 class="sect4">Oracle mode for duplicate parameters</h5>
<p>In the Oracle mode, where <code dir="ltr">DuplicateBindMode=0</code>, multiple occurrences of the same parameter name in a SQL statement are considered to be different parameters. When parameter position numbers are assigned, a number is given to each parameter occurrence without regard to name duplication. The application must, at a minimum, bind a value for the first occurrence of each parameter name. For any subsequent occurrence of a given parameter name, the application has the following choices.</p>
<ul>
<li>
<p>It can bind a different value for the occurrence.</p>
</li>
<li>
<p>It can leave the parameter occurrence unbound, in which case it takes the same value as the first occurrence.</p>
</li>
</ul>
<p>In either case, each occurrence still has a distinct parameter position number.</p>
<p>To use a different value for the second occurrence of <code dir="ltr">a</code> in the SQL statement above:</p>
<pre dir="ltr">pstmt.set<span class="italic">XXX</span>(1, ...); /* first occurrence of :a */
pstmt.set<span class="italic">XXX</span>(2, ...); /* second occurrence of :a */
pstmt.set<span class="italic">XXX</span>(3, ...); /* occurrence of :b */
</pre>
<p>To use the same value for both occurrences of <code dir="ltr">a</code>:</p>
<pre dir="ltr">pstmt.set<span class="italic">XXX</span>(1, ...); /* both occurrences of :a */
pstmt.set<span class="italic">XXX</span>(3, ...); /* occurrence of :b */
</pre>
<p>Parameter <code dir="ltr">b</code> is considered to be in position 3 regardless.</p>
</div>
<!-- class="sect4" -->
<div id="TTJDV148" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref123"></a>
<h5 class="sect4">TimesTen mode for duplicate parameters</h5>
<p>In the TimesTen mode, where <code dir="ltr">DuplicateBindMode=1</code>, SQL statements containing duplicate parameters are parsed such that only distinct parameter names are considered as separate parameters. The application binds a value only for each unique parameter, and no unique parameter can be left unbound.</p>
<p>Binding is based on the position of the first occurrence of a parameter name. Subsequent occurrences of the parameter name are bound to the same value, and are not given parameter position numbers.</p>
<p>For the SQL statement above, the two occurrences of <code dir="ltr">a</code> are considered to be a single parameter, so cannot be bound separately:</p>
<pre dir="ltr">pstmt.set<span class="italic">XXX</span>(1, ...); /* both occurrences of :a */
pstmt.set<span class="italic">XXX</span>(2, ...); /* occurrence of :b */
</pre>
<p>Note that in the TimesTen mode, parameter <code dir="ltr">b</code> is considered to be in position 2, not position 3.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BABDAEAB"></a>
<div id="TTJDV149" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Bin<a id="sthref124"></a><a id="sthref125"></a>ding duplicate parameters in PL/SQL</h4>
<p>The preceding discussion does not apply to PL/SQL, which has its own semantics. In PL/SQL, you bind a value for each unique parameter name. An application executing the following block, for example, would bind only one parameter, corresponding to <code dir="ltr">:a</code>.</p>
<pre dir="ltr">DECLARE
   x NUMBER;
   y NUMBER;
BEGIN
   x:=:a;
   y:=:a;
END;
</pre>
<p>An application executing the following block would also bind only one parameter:</p>
<pre dir="ltr">BEGIN
   INSERT INTO tab1 VALUES(:a, :a);
END
</pre>
<p>And the same for the following <code dir="ltr">CALL</code> statement:</p>
<pre dir="ltr">...CALL proc(:a, :a)...
</pre>
<p>An application executing the following block would bind two parameters, with <code dir="ltr">:a</code> as parameter #1 and <code dir="ltr">:b</code> as parameter #2. The second parameter in each <code dir="ltr">INSERT</code> statement would take the same value as the first parameter in the first <code dir="ltr">INSERT</code> statement, as follows.</p>
<pre dir="ltr">BEGIN
   INSERT INTO tab1 VALUES(:a, :a);
   INSERT INTO tab1 VALUES(:b, :a);
END
</pre></div>
<!-- class="sect3" -->
<a id="BABCDJAD"></a>
<div id="TTJDV328" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Binding assoc<a id="sthref126"></a><a id="sthref127"></a><a id="sthref128"></a>iative arrays</h4>
<p>TimesTen JDBC supports associative arrays, formerly known as index-by tables or PL/SQL tables, as <code dir="ltr">IN</code>, <code dir="ltr">OUT</code>, or <code dir="ltr">IN OUT</code> bind parameters to TimesTen PL/SQL. Associative arrays enable arrays of data to be passed efficiently between a JDBC application and the database.</p>
<p>An associative array is a set of key-value pairs. In TimesTen, for associative array binding (but not for use of associative arrays only within PL/SQL), the keys, or indexes, must be integers (<code dir="ltr">BINARY_INTEGER</code> or <code dir="ltr">PLS_INTEGER</code>). The values must be simple scalar values of the same data type. For example, there could be an array of department managers indexed by department numbers. Indexes are stored in sort order, not creation order.</p>
<p>You can declare an associative array type and then an associative array from PL/SQL as in the following example (note the <code dir="ltr">INDEX BY</code>):</p>
<pre dir="ltr">declare
   TYPE VARCHARARRTYP IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
   x VARCHARARRTYP;
   ...
</pre>
<p>Also see <a class="olink TTPLS378" href="../TTPLS/dtypesfunc.htm#TTPLS378">&#34;Using associative arrays from applications&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</p>
<p>When you bind an associative array in Java, match the Java type as closely as possible with the array type for optimal performance. TimesTen does, however, support some simple input conversions:</p>
<ul>
<li>
<p>Strings can be converted to integers or floating point numbers.</p>
</li>
<li>
<p>Strings can be converted to <code dir="ltr">DATE</code> data if the strings are in TimesTen <code dir="ltr">DATE</code> format (<code dir="ltr"><span class="codeinlineitalic">YYYY-MM-DD HH:MI:SS</span></code>).</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Notes:</p>
Note the following restrictions in TimesTen:
<ul>
<li>
<p>The following types are not supported in binding associative arrays: LOBs, REF CURSORs, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">ROWID</code>.</p>
</li>
<li>
<p>Associative array binding is not allowed in passthrough statements.</p>
</li>
<li>
<p>General bulk binding of arrays is not supported in TimesTen JDBC. Varrays and nested tables are not supported as bind parameters.</p>
</li>
<li>
<p>Associative array parameters are not supported with JDBC batch execution. (See <a href="tuning.htm#BCGIDCIJ">&#34;Use arrays of parameters for batch execution&#34;</a>.)</p>
</li>
</ul>
</div>
<p>TimesTen provides extensions, described below, through the interfaces <code dir="ltr">TimesTenPreparedStatement</code> and <code dir="ltr">TimesTenCallableStatement</code> to support associative array binds. Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information about any of the methods described here.</p>
<p>For an associative array that is a PL/SQL <code dir="ltr">IN</code> or <code dir="ltr">IN OUT</code> parameter, TimesTen provides the <code dir="ltr">setPlsqlIndexTable()</code> method in the <code dir="ltr">TimesTenPreparedStatement</code> interface (for an <code dir="ltr">IN</code> parameter) and in the <code dir="ltr">TimesTenCallableStatement</code> interface (for an <code dir="ltr">IN OUT</code> parameter) to set the input associative array.</p>
<ul>
<li>
<p><code dir="ltr">void setPlsqlIndexTable(int</code> <code dir="ltr"><span class="codeinlineitalic">paramIndex</span></code><code dir="ltr">, java.lang.Object</code> <code dir="ltr"><span class="codeinlineitalic">arrayData</span></code><code dir="ltr">, int</code> <code dir="ltr"><span class="codeinlineitalic">maxLen</span></code><code dir="ltr">, int</code> <code dir="ltr"><span class="codeinlineitalic">curLen</span></code><code dir="ltr">, int</code> <code dir="ltr"><span class="codeinlineitalic">elemSqlType</span></code><code dir="ltr">, int</code> <code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code><code dir="ltr">)</code></p>
<p>Specify the following:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">paramIndex</span></code>: Parameter position within the PL/SQL statement (starting with 1)</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">arrayData</span></code>: Array of values to be bound (which can be an array of primitive types such as <code dir="ltr">int[]</code> or an array of object types such as <code dir="ltr">BigDecimal[]</code>)</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">maxLen</span></code>: Maximum number of elements in the associative array (in TimesTen must be same as <code dir="ltr"><span class="codeinlineitalic">curLen</span></code>)</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">curLen</span></code>: Actual current number of elements in the associative array (in TimesTen must be same as <code dir="ltr"><span class="codeinlineitalic">maxLen</span></code>)</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">elemSqlType</span></code>: Type of the associative array elements according to <code dir="ltr">java.sql.Types</code> (such as <code dir="ltr">Types.DOUBLE</code>)</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code>: For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">BINARY</code>, or <code dir="ltr">VARBINARY</code> associative arrays, the maximum length of each element (in characters for <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR</code> associative arrays, or in bytes for <code dir="ltr">BINARY</code> or <code dir="ltr">VARBINARY</code> associative arrays)</p>
</li>
</ul>
<p>For example (assuming a <code dir="ltr">TimesTenPreparedStatement</code> instance <code dir="ltr">pstmt</code>):</p>
<pre dir="ltr">int maxLen = 3;
int curLen = 3;
// Numeric field can be set with int, float, double types.
// elemMaxLen is set to 0 for numeric types and is ignored.
// elemMaxLen is specified for VARCHAR types.
pstmt.setPlsqlIndexTable
      (1, new int[]{4, 5, 6}, maxLen, curLen, Types.NUMERIC, 0);
pstmt.setPlsqlIndexTable
      (2, new String[]{&#34;Batch1234567890&#34;, &#34;2&#34;, &#34;3&#34;}, maxLen, curLen,
       Types.VARCHAR, 15);
pstmt.execute();
</pre></li>
</ul>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code> parameter is ignored for types other than <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">BINARY</code>, or <code dir="ltr">VARBINARY</code>. For any of those types, you can use a value of 0 to instruct the driver to set the maximum length of each element based on the actual length of data that is bound. If <code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code> is set to a positive value, then wherever the actual data length is greater than <code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code>, the data is truncated to a length of <code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">curLen</span></code> is smaller than the actual number of elements in the associative array, only <code dir="ltr"><span class="codeinlineitalic">curLen</span></code> elements are bound.</p>
</li>
</ul>
</div>
<p>For an associative array that is a PL/SQL <code dir="ltr">OUT</code> or <code dir="ltr">IN OUT</code> parameter, TimesTen provides two methods in the <code dir="ltr">TimesTenCallableStatement</code> interface: <code dir="ltr">registerIndexTableOutParameter()</code> to register an output associative array, and <code dir="ltr">getPlsqlIndexTable()</code> to retrieve an output associative array. There are two signatures for <code dir="ltr">getPlsqlIndexTable()</code>, one to use the JDBC default Java object type given the associative array element SQL type, and one to specify the type.</p>
<ul>
<li>
<p><code dir="ltr">void registerIndexTableOutParameter(int</code> <code dir="ltr"><span class="codeinlineitalic">paramIndex</span></code><code dir="ltr">, int</code> <code dir="ltr"><span class="codeinlineitalic">maxLen</span></code><code dir="ltr">, int</code> <code dir="ltr"><span class="codeinlineitalic">elemSqlType</span></code><code dir="ltr">, int</code> <code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code><code dir="ltr">)</code></p>
<p>Specify the following:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">paramIndex</span></code>: Parameter position within the PL/SQL statement (starting with 1)</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">maxLen</span></code>: Maximum possible number of elements in the associative array</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">elemSqlType</span></code>: Type of the associative array elements according to <code dir="ltr">java.sql.Types</code> (such as <code dir="ltr">Types.DOUBLE</code>)</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code>: For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">BINARY</code>, or <code dir="ltr">VARBINARY</code> associative arrays, the maximum length of each element (in characters for <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR</code> associative arrays, or in bytes for <code dir="ltr">BINARY</code> or <code dir="ltr">VARBINARY</code> associative arrays)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code dir="ltr"><span class="codeinlineitalic">elemMaxLen</span></code> has a value of 0 or less, the maximum length for the data type is used.</div>
</li>
<li>
<p><code dir="ltr">java.lang.Object getPlsqlIndexTable(int</code> <code dir="ltr"><span class="codeinlineitalic">paramIndex</span></code><code dir="ltr">)</code></p>
<p>With this method signature, the type of the returned associative array is the JDBC default mapping for the SQL type of the data retrieved. Specify the parameter position within the PL/SQL statement (starting with 1). See <a href="#BABHAIIH">Table 2-3</a> for the default mappings.</p>
</li>
<li>
<p><code dir="ltr">java.lang.Object getPlsqlIndexTable(int</code> <code dir="ltr"><span class="codeinlineitalic">paramIndex</span></code><code dir="ltr">, java.lang.Class</code> <code dir="ltr"><span class="codeinlineitalic">primitiveType</span></code><code dir="ltr">)</code></p>
<p>With this method signature, in addition to specifying the parameter position, specify the desired type of the returned associative array according to <code dir="ltr">java.sql.Types</code> (such as <code dir="ltr">Types.DOUBLE</code>). It must be a primitive type.</p>
</li>
</ul>
<div id="TTJDV339" class="tblhruleformal">
<p class="titleintable"><a id="sthref129"></a><a id="BABHAIIH"></a>Table 2-3 JDBC default mappings for associative array elements</p>
<table class="cellalignment6143" title="JDBC default mappings for associative array elements" summary="JDBC default mappings for associative array elements" dir="ltr">
<thead>
<tr class="cellalignment6137">
<th class="cellalignment6144" id="r1c1-t20">Return type</th>
<th class="cellalignment6144" id="r1c2-t20">SQL type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">Integer[]</code></p>
</td>
<td class="cellalignment6145" headers="r2c1-t20 r1c2-t20">
<p><code dir="ltr">TINYINT</code>, <code dir="ltr">SMALLINT</code>, <code dir="ltr">TT_INTEGER</code></p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">Long[]</code></p>
</td>
<td class="cellalignment6145" headers="r3c1-t20 r1c2-t20">
<p><code dir="ltr">BIGINT</code></p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">BigDecimal[]</code></p>
</td>
<td class="cellalignment6145" headers="r4c1-t20 r1c2-t20">
<p><code dir="ltr">NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r5c1-t20" headers="r1c1-t20">
<p><code dir="ltr">Float[]</code></p>
</td>
<td class="cellalignment6145" headers="r5c1-t20 r1c2-t20">
<p><code dir="ltr">BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r6c1-t20" headers="r1c1-t20">
<p><code dir="ltr">Double[]</code></p>
</td>
<td class="cellalignment6145" headers="r6c1-t20 r1c2-t20">
<p><code dir="ltr">BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r7c1-t20" headers="r1c1-t20">
<p><code dir="ltr">String[]</code></p>
</td>
<td class="cellalignment6145" headers="r7c1-t20 r1c2-t20">
<p><code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR</code></p>
</td>
</tr>
<tr class="cellalignment6137">
<td class="cellalignment6145" id="r8c1-t20" headers="r1c1-t20">
<p><code dir="ltr">Timestamp[]</code></p>
</td>
<td class="cellalignment6145" headers="r8c1-t20 r1c2-t20">
<p><code dir="ltr">DATE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>The following code fragment illustrates how to set, register, and retrieve the contents of an <code dir="ltr">IN OUT</code> parameter (assuming a connection <code dir="ltr">conn</code> and <code dir="ltr">TimesTenCallableStatement</code> instance <code dir="ltr">cstmt</code>):</p>
<pre dir="ltr">int maxLen = 3;
int curLen = 3;
anonBlock = &#34;begin AssocArrayEx_inoutproc(:o1); end;&#34;;
cstmt = (TimesTenCallableStatement) conn.prepareCall(anonBlock); 
cstmt.setPlsqlIndexTable
     (1, new Integer[] {1,2,3}, maxLen, curLen, Types.NUMERIC, 0);
cstmt.registerIndexTableOutParameter(1, maxLen, Types.NUMERIC, 0);
cstmt.execute();
 
int[]  ret = (int [])cstmt.getPlsqlIndexTable(1, Integer.TYPE);
cstmt.execute();
</pre>
<div id="TTJDV342" class="example">
<p class="titleinexample"><a id="sthref130"></a>Example 2-10 Binding an associative array</p>
<p>This is a more complete example showing the mechanism for binding an associative array.</p>
<pre dir="ltr">    TimesTenCallableStatement cstmt = null;
    try {
      // Prepare procedure with associative array in parameter
      cstmt = (TimesTenCallableStatement) 
               conn.prepareCall(&#34;begin AssociativeArray_proc(:name, :inc); end;&#34;);
      
      // Set up input array and length
      String[] name = {&#34;George&#34;, &#34;John&#34;, &#34;Thomas&#34;, &#34;James&#34;, &#34;Bill&#34;};
      Integer[] salaryInc = {10000, null, 5000, 8000, 9007};
      int currentLen = name.length;
      int maxLen = currentLen;
 
      
      // Use elemMaxLen for variable length data types such as 
      // Types.VARCHAR, Types.CHAR.
      int elemMaxLen = 32; 
      
      // set input parameter, name as a VARCHAR
      cstmt.setPlsqlIndexTable 
            (1, name, maxLen, currentLen, Types.VARCHAR, elemMaxLen);
      // set input parameter, salaryInc as a number
      cstmt.setPlsqlIndexTable 
            (2, salaryInc, maxLen, currentLen, Types.NUMERIC, 0);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABBIBIF"></a>
<div id="TTJDV159" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Working with R<a id="sthref131"></a><a id="sthref132"></a>EF CURSORs</h3>
<p><span class="italic">REF CURSOR</span> is a PL/SQL concept, a handle to a cursor over a SQL result set that can be passed between PL/SQL and an application. In TimesTen, the cursor can be opened in PL/SQL, then the REF CURSOR can be passed to the application for processing of the result set.</p>
<p>An application can receive a REF CURSOR <code dir="ltr">OUT</code> parameter as follows:</p>
<ol>
<li>
<p>Register the REF CURSOR <code dir="ltr">OUT</code> parameter as type <code dir="ltr">TimesTenTypes.CURSOR</code> (a TimesTen type extension), also specifying the parameter position of the REF CURSOR (position in the statement).</p>
</li>
<li>
<p>Retrieve the REF CURSOR using the <code dir="ltr">getCursor()</code> method defined by the <code dir="ltr">TimesTenCallableStatement</code> interface (a TimesTen JDBC extension), specifying the parameter position of the REF CURSOR. The <code dir="ltr">getCursor()</code> method is used like other <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> methods and returns a <code dir="ltr">ResultSet</code> instance.</p>
</li>
</ol>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information about these APIs. See <a class="olink TTPLS176" href="../TTPLS/dtypesfunc.htm#TTPLS176">&#34;PL/SQL REF CURSORs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span> for additional information about REF CURSORs.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
For passing REF CURSORs between PL/SQL and an application, TimesTen supports only <code dir="ltr">OUT</code> REF CURSORs, from PL/SQL to the application, and supports a statement returning only a single REF CURSOR.</div>
<p>The following example demonstrates this usage.</p>
<div id="TTJDV160" class="example">
<p class="titleinexample"><a id="sthref133"></a>Example 2-11 Using a REF CURSOR</p>
<p>This example shows how to use a callable statement with a REF CURSOR. In the <code dir="ltr">CallableStatement</code> instance, a PL/SQL block opens a cursor and executes a query. The <code dir="ltr">TimesTenCallableStatement</code> method <code dir="ltr">getCursor()</code> is used to return the cursor, which is registered as <code dir="ltr">TimesTenTypes.CURSOR</code>.</p>
<pre dir="ltr">import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import com.timesten.jdbc.TimesTenCallableStatement;
import com.timesten.jdbc.TimesTenTypes;
...
Connection conn = null;
CallableStatement cstmt = null;
ResultSet cursor;
...
// Use a PL/SQL block to open the cursor.
cstmt = conn.prepareCall
             (&#34; begin open :x for select tblname,tblowner from tables; end;&#34;);
cstmt.registerOutParameter(1, TimesTenTypes.CURSOR);
cstmt.execute();
cursor = ((TimesTenCallableStatement)cstmt).getCursor(1);

// Use the cursor as you would any other ResultSet object.
while(cursor.next()){
  System.out.println(cursor.getString(1));
}

// Close the cursor, statement, and connection.
cursor.close();
cstmt.close();
conn.close();
...
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are evaluating the callable statement with different parameter values in a loop, close the cursor each time at the end of the loop. The typical use case is to prepare the statement, then, in the loop, set parameters, execute the statement, process the cursor, and close the cursor.</div>
</div>
<!-- class="sect2" -->
<a id="BABCBBAC"></a>
<div id="TTJDV157" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Working with D<a id="sthref134"></a><a id="sthref135"></a>ML returning (RETURNING INTO clause)</h3>
<p>You can use a RETURNING INTO clause, referred to as <span class="italic">DML returning</span>, with an <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, or <code dir="ltr">DELETE</code> statement to return specified items from a row that was affected by the action. This eliminates the need for a subsequent <code dir="ltr">SELECT</code> statement and separate round trip, in case, for example, you want to confirm what was affected by the action.</p>
<p>With TimesTen, DML returning is limited to returning items from a single-row operation. The clause returns the items into a list of output parameters.</p>
<p><code dir="ltr">TimesTenPreparedStatement</code>, an extension of the standard <code dir="ltr">PreparedStatement</code> interface, supports DML returning. Use the <code dir="ltr">TimesTenPreparedStatement</code> method <code dir="ltr">registerReturnParameter()</code> to register the return parameters.</p>
<pre dir="ltr">void registerReturnParameter(int <span class="italic">paramIndex</span>, int <span class="italic">sqlType</span>)
</pre>
<p>As with the <code dir="ltr">registerOutParameter()</code> method discussed in <a href="#BABEFDDD">&#34;Working with output and input/output parameters&#34;</a>, this method has a signature that enables you to optionally specify a maximum size for <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR</code>, <code dir="ltr">BINARY</code>, or <code dir="ltr">VARBINARY</code> data. This avoids possible inefficiency where TimesTen would otherwise allocate memory to hold the largest possible value. For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">NCHAR</code>, and <code dir="ltr">NVARCHAR</code>, the unit of size is number of characters. For <code dir="ltr">BINARY</code> and <code dir="ltr">VARBINARY</code>, it is bytes.</p>
<pre dir="ltr">void registerReturnParameter(int <span class="italic">paramIndex</span>, int <span class="italic">sqlType</span>, int <span class="italic">maxSize</span>)
</pre>
<p>Use the <code dir="ltr">TimesTenPreparedStatement</code> method <code dir="ltr">getReturnResultSet()</code> to retrieve the return parameters, returning a <code dir="ltr">ResultSet</code> instance.</p>
<p>Be aware of the following restrictions when using <code dir="ltr">RETURNING INTO</code> in TimesTen JDBC.</p>
<ul>
<li>
<p>The <code dir="ltr">getReturnResultSet()</code> method must not be invoked more than once. Otherwise, the behavior is indeterminate.</p>
</li>
<li>
<p><code dir="ltr">ResultSetMetaData</code> is not supported for the result set returned by <code dir="ltr">getReturnResultSet()</code>.</p>
</li>
<li>
<p>Streaming methods such as <code dir="ltr">getCharacterStream()</code> are not supported for the result set returned by <code dir="ltr">getReturnResultSet()</code>.</p>
</li>
<li>
<p>There is no batch support for DML returning.</p>
</li>
</ul>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information about the TimesTen JDBC classes, interfaces, and methods discussed here.</p>
<p>SQL syntax and restrictions for the <code dir="ltr">RETURNING INTO</code> clause in TimesTen are documented as part of the <a class="olink TTSQL321" href="../TTSQL/state.htm#TTSQL321">&#34;INSERT&#34;</a>, <a class="olink TTSQL336" href="../TTSQL/state.htm#TTSQL336">&#34;UPDATE&#34;</a>, and <a class="olink TTSQL306" href="../TTSQL/state.htm#TTSQL306">&#34;DELETE&#34;</a> documentation in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span>.</p>
<p>Refer to <a class="olink LNPLS01354" href="../LNPLS/returninginto_clause.htm#LNPLS01354">&#34;RETURNING INTO Clause&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span> for general information about DML returning.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
Check for SQL warnings after executing the TimesTen prepared statement. In the event of a warning, output parameters are undefined. See <a href="#BABHGDGE">&#34;Handling errors&#34;</a> for general information about errors and warnings.</div>
<div id="TTJDV158" class="example">
<p class="titleinexample"><a id="sthref136"></a>Example 2-12 DML returning</p>
<p>This example shows how to use DML returning with a <code dir="ltr">TimesTenPreparedStatement</code> instance, returning the name and age for a row that is inserted.</p>
<pre dir="ltr">      import java.sql.ResultSet;
      import java.sql.SQLException;
      import java.sql.SQLWarning;
      import java.sql.Types;
      import com.timesten.jdbc.TimesTenPreparedStatement;
 
      Connection conn = null;
      ...
 
      // Insert into a table and return results
      TimesTenPreparedStatement pstmt =
        (TimesTenPreparedStatement)conn.prepareStatement
        (&#34;insert into tab1 values(?,?) returning name, age into ?,?&#34;);
 
      // Populate table
      pstmt.setString(1,&#34;John Doe&#34;);
      pstmt.setInt(2, 65);
 
      /* register returned parameter
       * in this case the maximum size of name is 100 chars
       */
      pstmt.registerReturnParameter(3, Types.VARCHAR, 100);
      pstmt.registerReturnParameter(4, Types.INTEGER);
 
      // process the DML returning statement
      int count = pstmt.executeUpdate();
 
      /* Check warnings; if there are warnings, values of DML RETURNING INTO
         parameters are undefined. */
      SQLWarning wn;
      boolean warningFlag = false;
      if ((wn = pstmt.getWarnings() ) != null) {
        do {
          warningFlag = true;
          System.out.println(wn);
          wn = wn.getNextWarning();
        } while(wn != null);
      }
 
      if (!warningFlag) {
        if (count&gt;0)
        {
          ResultSet rset = pstmt.getReturnResultSet(); //rset not null, not empty
          while(rset.next())
          {
            String name = rset.getString(1);
            int age = rset.getInt(2);
            System.out.println(&#34;Name &#34; + name + &#34; age &#34; + age);
          }
        }
      }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABGCJEA"></a>
<div id="TTJDV161" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Worki<a id="sthref137"></a><a id="sthref138"></a><a id="sthref139"></a><a id="sthref140"></a><a id="sthref141"></a>ng with rowids</h3>
<p>Each row in a table has a unique identifier known as its <span class="italic">rowid</span>. An application can retrieve the rowid of a row from the <code dir="ltr">ROWID</code> pseudocolumn. A rowid value can be represented in either binary or character format, with the binary format taking 12 bytes and the character format 18 bytes.</p>
<p>For Java 6, TimesTen supports the <code dir="ltr">java.sql.RowId</code> interface and <code dir="ltr">Types.ROWID</code> type.</p>
<p>You can use any of the following <code dir="ltr">ResultSet</code> methods to retrieve a rowid:</p>
<ul>
<li>
<p><code dir="ltr">byte[] getBytes(int</code> <code dir="ltr"><span class="codeinlineitalic">columnIndex</span></code><code dir="ltr">)</code></p>
</li>
<li>
<p><code dir="ltr">String getString(int</code> <code dir="ltr"><span class="codeinlineitalic">columnIndex</span></code><code dir="ltr">)</code></p>
</li>
<li>
<p><code dir="ltr">Object getObject(int</code> <code dir="ltr"><span class="codeinlineitalic">columnIndex</span></code><code dir="ltr">)</code></p>
<p>Returns a <code dir="ltr">String</code> object in Java 5.0. Returns a <code dir="ltr">RowId</code> object in Java 6.</p>
</li>
</ul>
<p>You can use any of the following <code dir="ltr">PreparedStatement</code> methods to set a rowid:</p>
<ul>
<li>
<p><code dir="ltr">setBytes(int</code> <code dir="ltr"><span class="codeinlineitalic">parameterIndex</span></code><code dir="ltr">, byte[]</code> <code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">)</code></p>
</li>
<li>
<p><code dir="ltr">setString(int</code> <code dir="ltr"><span class="codeinlineitalic">parameterIndex</span></code><code dir="ltr">, String</code> <code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">)</code></p>
</li>
<li>
<p><code dir="ltr">setRowId(int</code> <code dir="ltr"><span class="codeinlineitalic">parameterIndex</span></code><code dir="ltr">, RowId</code> <code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">)</code> (Java 6 only)</p>
</li>
<li>
<p><code dir="ltr">setObject(int</code> <code dir="ltr"><span class="codeinlineitalic">parameterIndex</span></code><code dir="ltr">, Object</code> <code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">)</code></p>
<p>Takes a <code dir="ltr">String</code> object in Java 5.0. Takes a <code dir="ltr">String</code> or <code dir="ltr">RowId</code> object in Java 6.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use <code dir="ltr">getBytes()</code> or <code dir="ltr">setBytes()</code> for <code dir="ltr">ROWID</code> parameters that are PL/SQL parameters or passthrough parameters (parameters passed to Oracle Database when using the TimesTen Application-Tier Database Cache). Use <code dir="ltr">getString()</code> and <code dir="ltr">setString()</code>, or use <code dir="ltr">getObject()</code> and <code dir="ltr">setObject()</code> with a <code dir="ltr">RowId</code> object (Java 6 only) or <code dir="ltr">String</code> object.</div>
<p>An application can specify literal rowid values in SQL statements, such as in <code dir="ltr">WHERE</code> clauses, as <code dir="ltr">CHAR</code> constants enclosed in single quotes.</p>
<p>Refer to <a class="olink TTSQL150" href="../TTSQL/types.htm#TTSQL150">&#34;ROWID data type&#34;</a> and <a class="olink TTSQL195" href="../TTSQL/express.htm#TTSQL195">&#34;ROWID&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for additional information about rowids and the <code dir="ltr">ROWID</code> data type, including usage and lifecycle.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen does not support the PL/SQL type <code dir="ltr">UROWID</code>.</div>
</div>
<!-- class="sect2" -->
<a id="BABIFCDH"></a>
<div id="TTJDV329" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Wo<a id="sthref142"></a><a id="sthref143"></a>rking with LOBs</h3>
<p>TimesTen supports LOBs (large objects), specifically CLOBs (character LOBs), NCLOBs (national character LOBs, Java 6 only), and BLOBs (binary LOBs).</p>
<p>This section provides a brief overview of LOBs and discusses their use in JDBC, covering the following topics:</p>
<ul>
<li>
<p><a href="#BABGCHGG">About LOBs</a></p>
</li>
<li>
<p><a href="#BABEEEBA">LOB objects in JDBC</a></p>
</li>
<li>
<p><a href="#BABECDHC">Differences between TimesTen LOBs and Oracle Database LOBs</a></p>
</li>
<li>
<p><a href="#BABGGCAD">LOB factory methods</a></p>
</li>
<li>
<p><a href="#BABEFDFJ">LOB getter and setter methods</a></p>
</li>
<li>
<p><a href="#BABGJFCA">TimesTen LOB interface methods</a></p>
</li>
<li>
<p><a href="#BABHDJHG">LOB prefetching</a></p>
</li>
<li>
<p><a href="#BABDJCGC">Passthrough LOBs</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>TimesTen does not support CLOBs if the database character set is <code dir="ltr">TIMESTEN8</code>.</p>
</li>
<li>
<p>This section discusses LOB support in both Java 5.0 and Java 6. It is recommended, however, that you use Java 6 with TimesTen. This is a more standard and complete implementation. In particular, Java 5.0 does not support NCLOBs.</p>
</li>
</ul>
</div>
<p>You can also refer to the following.</p>
<ul>
<li>
<p><a class="olink TTSQL481" href="../TTSQL/types.htm#TTSQL481">&#34;LOB data types&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for additional information about LOBs in TimesTen</p>
</li>
<li>
<p><a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for general information about programming with LOBs (but not specific to TimesTen functionality)</p>
</li>
</ul>
<a id="BABGCHGG"></a>
<div id="TTJDV330" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About LOBs</h4>
<p>A LOB is a large binary object (BLOB) or character object (CLOB or NCLOB). In TimesTen, a BLOB can be up to 16 MB in size and a CLOB or NCLOB up to 4 MB. LOBs in TimesTen have essentially the same functionality as in Oracle Database, except as noted otherwise. (See <a href="#BABECDHC">&#34;Differences between TimesTen LOBs and Oracle Database LOBs&#34;</a>.)</p>
<p>LOBs may be either persistent or temporary. A persistent LOB exists in a LOB column in the database. A temporary LOB exists only within an application. There are also circumstances where a temporary LOB is created implicitly by TimesTen. For example, if a <code dir="ltr">SELECT</code> statement selects a LOB concatenated with an additional string of characters, TimesTen creates a temporary LOB to contain the concatenated data.</p>
</div>
<!-- class="sect3" -->
<a id="BABEEEBA"></a>
<div id="TTJDV340" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">LOB objects in JDBC</h4>
<p>In JDBC, a LOB object&mdash;<code dir="ltr">Blob</code>, <code dir="ltr">Clob</code>, or <code dir="ltr">NClob</code> instance&mdash;is implemented using a SQL LOB locator (<code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code>), which means that a LOB object contains a logical pointer to the LOB data rather than the data itself.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
<ul>
<li>
<p>Because LOB objects do not remain valid past the end of the transaction in TimesTen, it is not feasible to use them with autocommit enabled. You would receive errors about LOBs being invalidated.</p>
</li>
<li>
<p>LOB manipulations through APIs that use LOB locators result in usage of TimesTen temporary space. Any significant number of such manipulations may necessitate a size increase for the TimesTen temporary data region. See <a class="olink TTREF154" href="../TTREF/attribute.htm#TTREF154">&#34;TempSize&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</li>
</ul>
</div>
<p>An application can use the JDBC API to instantiate a temporary LOB explicitly, for use within the application, then to free the LOB when done with it. Temporary LOBs are stored in the TimesTen temporary data region.</p>
<p>To update a persistent LOB, your transaction must have an exclusive lock on the row containing the LOB. You can accomplish this by selecting the LOB with a <code dir="ltr">SELECT ... FOR UPDATE</code> statement. This results in a writable locator. With a simple <code dir="ltr">SELECT</code> statement, the locator is read-only. Read-only and writable locators behave as follows:</p>
<ul>
<li>
<p>A read-only locator is <span class="italic">read consistent</span>, meaning that throughout its lifetime, it sees only the contents of the LOB as of the time it was selected. Note that this would include any uncommitted updates made to the LOB within the same transaction prior to when the LOB was selected.</p>
</li>
<li>
<p>A writable locator is updated with the latest data from the database each time a write is made through the locator. So each write is made to the most current data of the LOB, including updates that have been made through other locators.</p>
</li>
</ul>
<p>The following example details behavior for two writable locators for the same LOB.</p>
<ol>
<li>
<p>The LOB column contains &#34;XY&#34;.</p>
</li>
<li>
<p>Select locator <code dir="ltr">L1</code> for update.</p>
</li>
<li>
<p>Select locator <code dir="ltr">L2</code> for update.</p>
</li>
<li>
<p>Write &#34;Z&#34; through <code dir="ltr">L1</code> at offset 1.</p>
</li>
<li>
<p>Read through locator <code dir="ltr">L1</code>. This would return &#34;ZY&#34;.</p>
</li>
<li>
<p>Read through locator <code dir="ltr">L2</code>. This would return &#34;XY&#34;, because <code dir="ltr">L2</code> remains read-consistent until it is used for a write.</p>
</li>
<li>
<p>Write &#34;W&#34; through <code dir="ltr">L2</code> at offset 2.</p>
</li>
<li>
<p>Read through locator <code dir="ltr">L2</code>. This would return &#34;ZW&#34;. Prior to the write in the preceding step, the locator was updated with the latest data (&#34;ZY&#34;).</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BABECDHC"></a>
<div id="TTJDV331" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Differences between TimesTen LOBs and Oracle Database LOBs</h4>
<p>Be aware of the following:</p>
<ul>
<li>
<p>A key difference between the TimesTen LOB implementation and the Oracle Database implementation is that in TimesTen, LOB objects do not remain valid past the end of the transaction. All LOB objects are invalidated after a commit or rollback, whether explicit or implicit. This includes after any autocommit, or after any DDL statement if TimesTen <code dir="ltr">DDLCommitBehavior</code> is set to 0 (the default), for Oracle Database behavior.</p>
</li>
<li>
<p>TimesTen does not support BFILEs, SecureFiles, reads and writes for arrays of LOBs, or callback functions for LOBs.</p>
</li>
<li>
<p>TimesTen does not support binding associative arrays of LOBs.</p>
</li>
<li>
<p>TimesTen does not support batch processing of LOBs.</p>
</li>
<li>
<p>Relevant to BLOBs, there are differences in the usage of hexadecimal literals in TimesTen. see the description of <code dir="ltr"><span class="codeinlineitalic">HexadecimalLiteral</span></code> in <a class="olink TTSQL202" href="../TTSQL/express.htm#TTSQL202">&#34;Constants&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABGGCAD"></a>
<div id="TTJDV332" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">LOB factory methods</h4>
<p>TimesTen supports the standard Java 6 <code dir="ltr">Connection</code> methods <code dir="ltr">createBlob()</code>, <code dir="ltr">createClob()</code>, and <code dir="ltr">createNClob()</code>.</p>
<p>For a Java 5.0 environment (not recommended), where there are no standard LOB factory methods, the following are specified by the TimesTen extension <code dir="ltr">TimesTenConnection</code> interface.</p>
<ul>
<li>
<p><code dir="ltr">createBLOB()</code></p>
</li>
<li>
<p><code dir="ltr">createCLOB()</code></p>
</li>
</ul>
<p>Java 5.0 does not support NCLOBs.</p>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
In TimesTen, creation of a LOB object results in creation of a database transaction if one is not already in progress. You must execute a commit or rollback to close the transaction.</div>
</div>
<!-- class="sect3" -->
<a id="BABEFDFJ"></a>
<div id="TTJDV333" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">LOB getter and setter methods</h4>
<p>You can access LOBs through getter and setter methods that are defined by the standard <code dir="ltr">java.sql.ResultSet</code>, <code dir="ltr">PreparedStatement</code>, and <code dir="ltr">CallableStatement</code> interfaces, just as they are for other data types. Use the appropriate <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> method to retrieve a LOB result or output parameter or <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> method to bind a LOB input parameter:</p>
<ul>
<li>
<p><code dir="ltr">ResultSet</code> getter methods: There are <code dir="ltr">getBlob()</code> methods, <code dir="ltr">getClob()</code> methods, and <code dir="ltr">getNClob()</code> methods (Java 6 only) where you can specify the LOB to retrieve according to either column name or column index.</p>
<p>You can also use <code dir="ltr">getObject()</code> to retrieve a <code dir="ltr">Blob</code>, <code dir="ltr">Clob</code>, or <code dir="ltr">NClob</code> (Java 6 only) object.</p>
</li>
<li>
<p><code dir="ltr">PreparedStatement</code> setter methods: There is a <code dir="ltr">setBlob()</code> method, <code dir="ltr">setClob()</code> method, and <code dir="ltr">setNClob()</code> method (Java 6 only) where you can input the <code dir="ltr">Blob</code>, <code dir="ltr">Clob</code>, or <code dir="ltr">NClob</code> instance and the parameter index to bind an input parameter.</p>
<p>You can also use <code dir="ltr">setObject()</code> to bind a <code dir="ltr">Blob</code>, <code dir="ltr">Clob</code>, or <code dir="ltr">NClob</code> input parameter.</p>
<p>There are also <code dir="ltr">setBlob()</code> methods where instead of a <code dir="ltr">Blob</code> instance, you specify an <code dir="ltr">InputStream</code> instance, or an <code dir="ltr">InputStream</code> instance and length.</p>
<p>There are <code dir="ltr">setClob()</code> and <code dir="ltr">setNClob()</code> methods where instead of a <code dir="ltr">Clob</code> or <code dir="ltr">NClob</code> instance, you specify a <code dir="ltr">Reader</code> instance, or a <code dir="ltr">Reader</code> instance and length.</p>
</li>
<li>
<p><code dir="ltr">CallableStatement</code> getter methods: There are <code dir="ltr">getBlob()</code> methods, <code dir="ltr">getClob()</code> methods, and <code dir="ltr">getNClob()</code> methods (Java 6 only) where you can retrieve the LOB output parameter according to either parameter name or parameter index.</p>
<p>You can also use <code dir="ltr">getObject()</code> to retrieve a <code dir="ltr">Blob</code>, <code dir="ltr">Clob</code>, or <code dir="ltr">NClob</code> (Java 6 only) output parameter.</p>
<p>You must also register an output parameter from a <code dir="ltr">CallableStatement</code> object. The <code dir="ltr">registerOutParameter()</code> method takes the parameter index along with the SQL type: <code dir="ltr">Types.BLOB</code>, <code dir="ltr">Types.CLOB</code>, or <code dir="ltr">Types.NCLOB</code>.</p>
</li>
<li>
<p><code dir="ltr">CallableStatement</code> setter methods: These are identical to (inherited from) <code dir="ltr">PreparedStatement</code> setter methods.</p>
</li>
</ul>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
</div>
<!-- class="sect3" -->
<a id="BABGJFCA"></a>
<div id="TTJDV334" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">TimesTen LOB interface methods</h4>
<p>You can cast a <code dir="ltr">Blob</code> instance to <code dir="ltr">com.timesten.jdbc.TimesTenBlob</code>, a <code dir="ltr">Clob</code> instance to <code dir="ltr">com.timesten.jdbc.TimesTenClob</code>, and an <code dir="ltr">NClob</code> instance to <code dir="ltr">com.timesten.jdbc.TimesTenNClob</code>. These interfaces support methods specified by the <code dir="ltr">java.sql.Blob</code>, <code dir="ltr">Clob</code>, and <code dir="ltr">NClob</code> interfaces.</p>
<p>The following list summarizes <code dir="ltr">Blob</code> features.</p>
<ul>
<li>
<p>The <code dir="ltr">isPassthrough()</code> method, a TimesTen extension, indicates whether the BLOB is a passthrough LOB from Oracle Database.</p>
</li>
<li>
<p>Free <code dir="ltr">Blob</code> resources when the application is done with it.</p>
<p><span class="bold">Note</span>: The <code dir="ltr">free()</code> method does not exist in Java 5.0 but is provided as a TimesTen extension. It is standard in Java 6.</p>
</li>
<li>
<p>Retrieve the BLOB value as a binary stream. There are methods to retrieve it in whole or in part.</p>
<p><span class="bold">Note</span>: The <code dir="ltr">getBinaryStream(</code><code dir="ltr"><span class="codeinlineitalic">pos,length</span></code><code dir="ltr">)</code> signature does not exist in Java 5.0 but is provided as a TimesTen extension. It is standard in Java 6.</p>
</li>
<li>
<p>Retrieve all or part of the BLOB value as a byte array.</p>
</li>
<li>
<p>Return the number of bytes in the BLOB.</p>
</li>
<li>
<p>Retrieve a stream to be used to write binary data to the BLOB, beginning at the specified position. This overwrites existing data.</p>
</li>
<li>
<p>Specify an array of bytes to write to the BLOB, beginning at the specified position, and return the number of bytes written. This overwrites existing data. There are methods to write either all or part of the array.</p>
</li>
<li>
<p>Truncate the BLOB to the specified length.</p>
</li>
</ul>
<p>The following list summarizes <code dir="ltr">Clob</code> and <code dir="ltr">NClob</code> (Java 6 only) features.</p>
<ul>
<li>
<p>The <code dir="ltr">isPassthrough()</code> method, a TimesTen extension, indicates whether the CLOB or NCLOB is a passthrough LOB from Oracle Database.</p>
</li>
<li>
<p>Free <code dir="ltr">Clob</code> or <code dir="ltr">NClob</code> resources when the application is done with it.</p>
<p><span class="bold">Note</span>: The <code dir="ltr">free()</code> method does not exist in Java 5.0 but is provided as a TimesTen extension. It is standard in Java 6.</p>
</li>
<li>
<p>Retrieve the CLOB or NCLOB as an ASCII stream.</p>
<p><span class="bold">Note</span>: The <code dir="ltr">getCharacterStream(</code><code dir="ltr"><span class="codeinlineitalic">pos,length</span></code><code dir="ltr">)</code> signature does not exist in Java 5.0 but is provided as a TimesTen extension. It is standard in Java 6.</p>
</li>
<li>
<p>Retrieve the CLOB or NCLOB as a <code dir="ltr">java.io.Reader</code> object (or as a stream of characters). There are methods to retrieve it in whole or in part.</p>
</li>
<li>
<p>Retrieve a copy of the specified substring in the CLOB or NCLOB, beginning at the specified position for up to the specified length.</p>
</li>
<li>
<p>Return the number of characters in the CLOB or NCLOB.</p>
</li>
<li>
<p>Retrieve a stream to be used to write ASCII characters to the CLOB or NCLOB, beginning at the specified position. This overwrites existing data.</p>
</li>
<li>
<p>Specify a Java <code dir="ltr">String</code> value to write to the CLOB or NCLOB, beginning at the specified position. This overwrites existing data. There are methods to write either all or part of the <code dir="ltr">String</code> value.</p>
</li>
<li>
<p>Truncate the CLOB or NCLOB to the specified length.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>For methods that write data to a LOB, the size of the LOB does not change other than in the circumstance where from the specified position there is less space available in the LOB than there is data to write. In that case, the LOB size increases enough to accommodate the data.</p>
</li>
<li>
<p>If the value specified for the position at which to write to a LOB is greater than LOB length + 1, the behavior is undefined.</p>
</li>
<li>
<p>The <code dir="ltr">read()</code> method of an <code dir="ltr">InputStream</code> or <code dir="ltr">Reader</code> object returns 0 (zero) if the length of the buffer used in the method call is 0, regardless of the amount of data in the <code dir="ltr">InputStream</code> or <code dir="ltr">Reader</code> object. Therefore, usage such as the following is problematic if the CLOB length may be 0, such as if it were populated using the SQL <code dir="ltr">EMPTY_CLOB()</code> function:</p>
<pre dir="ltr">java.io.Reader r = myclob.getCharacterStream();
char[] buf = new char[myclob.length()]; //buf for r.read() call
</pre>
<p>Normally when you call <code dir="ltr">read()</code>, -1 is returned if the end of the stream is reached. But in the preceding case, -1 is never returned. Be aware of this when you use streams returned by the BLOB <code dir="ltr">getBinaryStream()</code> method, which returns <code dir="ltr">InputStream</code>, the CLOB <code dir="ltr">getAsciiStream()</code> method, which returns <code dir="ltr">InputStream</code>, or the CLOB <code dir="ltr">getCharacterStream()</code> method, which returns <code dir="ltr">Reader</code>.</p>
</li>
</ul>
</div>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
</div>
<!-- class="sect3" -->
<a id="BABHDJHG"></a>
<div id="TTJDV335" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">LOB prefetching</h4>
<p>To reduce round trips to the server in client/server connections, LOB prefetching is enabled by default when you fetch a LOB from the database. The default prefetch size is 4000 bytes for BLOBs or 4000 characters for CLOBs or NCLOBs.</p>
<p>You can use the <code dir="ltr">TimesTenConnection</code> property <code dir="ltr">CONNECTION_PROPERTY_DEFAULT_LOB_PREFETCH_SIZE</code> to set a different default value that applies to any statement in the connection. Use a value of -1 to disable LOB prefetching by default for the connection, 0 (zero) to enable LOB prefetching for only metadata by default, or any value greater than 0 to specify the number of bytes for BLOBs or characters for CLOBs and NCLOBs to be prefetched by default along with the LOB locator during fetch operations.</p>
<p>At the statement level, you can use the following <code dir="ltr">TimesTenStatement</code> methods to manipulate the prefetch size and override the default value from the connection:</p>
<ul>
<li>
<p><code dir="ltr">setLobPrefetchSize(int)</code>: Set a new LOB prefetch value for the statement.</p>
</li>
<li>
<p><code dir="ltr">int getLobPrefetchSize()</code>: Return the current LOB prefetch value that applies to the statement (either a value set in the statement itself or the default value from the connection, as applicable).</p>
</li>
</ul>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
</div>
<!-- class="sect3" -->
<a id="BABDJCGC"></a>
<div id="TTJDV336" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Passthrough LOBs</h4>
<p>Passthrough LOBs, which are LOBs in Oracle Database accessed through TimesTen, are exposed as TimesTen LOBs and are supported by TimesTen in much the same way that any TimesTen LOB is supported, but note the following:</p>
<ul>
<li>
<p>As noted in <a href="#BABGJFCA">&#34;TimesTen LOB interface methods&#34;</a>, the <code dir="ltr">TimesTenBlob</code>, <code dir="ltr">TimesTenClob</code>, and <code dir="ltr">TimesTenNClob</code> interfaces specify the following method to indicate whether the LOB is a passthrough LOB:</p>
<p><code dir="ltr">boolean isPassthrough()</code></p>
</li>
<li>
<p>TimesTen LOB size limitations do not apply to storage of LOBs in the Oracle database through passthrough.</p>
</li>
<li>
<p>As with TimesTen local LOBs, a passthrough LOB object does not remain valid past the end of the transaction.</p>
</li>
</ul>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEJEJC"></a>
<div id="TTJDV169" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Com<a id="sthref144"></a>mitting or rolling back changes to the database</h3>
<p>This section discusses autocommit and manual commits or rollbacks, assuming a JDBC <code dir="ltr">Connection</code> object <code dir="ltr">myconn</code> and <code dir="ltr">Statement</code> object <code dir="ltr">mystmt</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All open cu<a id="sthref145"></a>rsors on the connection are closed upon transaction commit or rollback in TimesTen.</div>
<p>You can refer to <a class="olink TTOPR678" href="../TTOPR/trans.htm#TTOPR678">&#34;Transaction overview&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for additional information about transactions.</p>
<div id="TTJDV170" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref146"></a>
<h4 class="sect3">Set<a id="sthref147"></a><a id="sthref148"></a>ting autocommit</h4>
<p>A TimesTen connection has autocommit enabled by default, but for performance reasons it is recommended that you disable it. You can use the <code dir="ltr">Connection</code> method <code dir="ltr">setAutoCommit()</code> to enable or disable autocommit.</p>
<p>Disable autocommit as follows:</p>
<pre dir="ltr">myconn.setAutoCommit(false);
// Report any SQLWarnings on the connection.
// See <a href="#BABEBGEE">&#34;Reporting errors and warnings&#34;</a>.
</pre></div>
<!-- class="sect3" -->
<div id="TTJDV171" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref149"></a>
<h4 class="sect3">Ma<a id="sthref150"></a><a id="sthref151"></a><a id="sthref152"></a>nually committing or rolling back changes</h4>
<p>If autocommit is disabled, you must use the <code dir="ltr">Connection</code> method <code dir="ltr">commit()</code> to manually commit transactions, or the <code dir="ltr">rollback()</code> method to roll back changes. Consider the following example.</p>
<pre dir="ltr">myconn.commit();
</pre>
<p>Or:</p>
<pre dir="ltr">myconn.rollback();
</pre></div>
<!-- class="sect3" -->
<div id="TTJDV172" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref153"></a>
<h4 class="sect3">Using COM<a id="sthref154"></a><a id="sthref155"></a>MIT and ROLLBACK SQL statements</h4>
<p>You can prepare and execute <code dir="ltr">COMMIT</code> and <code dir="ltr">ROLLBACK</code> SQL statements the same way as other SQL statements. Using <code dir="ltr">COMMIT</code> and <code dir="ltr">ROLLBACK</code> statements has the same effect as using the <code dir="ltr">Connection</code> methods <code dir="ltr">commit()</code> and <code dir="ltr">rollback()</code>. For example:</p>
<pre dir="ltr">mystmt.execute(&#34;COMMIT&#34;);
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDIIEC"></a>
<div id="TTJDV173" class="sect2">
<h3 class="sect2">Man<a id="sthref156"></a><a id="sthref157"></a>aging multiple threads</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
On some UNIX platforms it is necessary to set <code dir="ltr">THREADS_FLAG</code>, as described in <a class="olink TTINS189" href="../TTINS/install.htm#TTINS189">&#34;Set the THREADS_FLAG variable (UNIX only)&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span>.</div>
<p>The <code dir="ltr">level4</code> demo demonstrates the use of multiple threads. Refer to <a href="env_setup.htm#CHDEEGIC">&#34;About the TimesTen Java demos&#34;</a>.</p>
<p>When your application has a direct connection to the database, TimesTen functions share stack space with your application. In multithreaded environments it is important to avoid overrunning the stack allocated to each thread, as this can cause a program to crash in unpredictable ways that are difficult to debug. The amount of stack space consumed by TimesTen calls varies depending on the SQL functionality used. Most applications should set thread stack space to at least 16 KB on 32-bit systems and between 34 KB to 72 KB on 64-bit systems.</p>
<p>The amount of stack space allocated for each thread is specified by the operating system when threads are created. On Windows, you can use the TimesTen debug driver and link your application against the Visual C++ debug C library to enable stack probes that raise an identifiable exception if a thread attempts to grow its stack beyond the amount allocated.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In multithreaded applications, a thread that issues requests on different connection handles to the same database may encounter lock conflicts with itself. TimesTen returns lock timeout and deadlock errors in this situation.</div>
</div>
<!-- class="sect2" -->
<a id="BABFACEI"></a>
<div id="TTJDV167" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Java esc<a id="sthref158"></a>ape syntax and SQL functions</h3>
<p>When using SQL in JDBC, pay special attention to Java escape syntax. SQL functions such as <code dir="ltr">UNISTR</code> use the backslash (\) character. You should escape the backslash character. For example, using the following SQL syntax in a Java application may not produce the intended results:</p>
<pre dir="ltr">INSERT INTO table1 SELECT UNISTR(&#39;\00E4&#39;) FROM dual;
</pre>
<p>Escape the backslash character as follows:</p>
<pre dir="ltr">INSERT INTO table1 SELECT UNISTR(&#39;\\00E4&#39;) FROM dual;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCEJHC"></a>
<div id="TTJDV309" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using additional TimesTen data management features</h2>
<p>Preceding sections discussed key features for managing TimesTen data. This section covers the following additional features:</p>
<ul>
<li>
<p><a href="#BABIJJHA">Using CALL to execute procedures and functions</a></p>
</li>
<li>
<p><a href="#BABEBCHC">Setting a timeout or threshold for executing SQL statements</a></p>
</li>
<li>
<p><a href="#BABICJHA">Features for use with TimesTen Cache</a></p>
</li>
<li>
<p><a href="#BABJCEHE">Features for use with replication</a></p>
</li>
</ul>
<a id="BABIJJHA"></a>
<div id="TTJDV152" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using CALL to execute pro<a id="sthref159"></a><a id="sthref160"></a><a id="sthref161"></a><a id="sthref162"></a>cedures and functions</h3>
<p>TimesTen supports each of the following syntax formats from any of its programming interfaces to call PL/SQL procedures (<code dir="ltr"><span class="codeinlineitalic">procname</span></code>) or PL/SQL functions (<code dir="ltr"><span class="codeinlineitalic">funcname</span></code>) that are standalone or part of a package, or to call TimesTen built-in procedures (<code dir="ltr"><span class="codeinlineitalic">procname</span></code>):</p>
<pre dir="ltr">CALL <span class="italic">procname</span>[(<span class="italic">argumentlist</span>)]

CALL <span class="italic">funcname</span>[(<span class="italic">argumentlist</span>)] INTO :<span class="italic">returnparam</span>

CALL <span class="italic">funcname</span>[(<span class="italic">argumentlist</span>)] INTO ?
</pre>
<p>TimesTen JDBC also supports each of the following syntax formats:</p>
<pre dir="ltr">{ CALL <span class="italic">procname</span>[(<span class="italic">argumentlist</span>)] }

{ ? = [CALL] <span class="italic">funcname</span>[(<span class="italic">argumentlist</span>)] }

{ :<span class="italic">returnparam</span> = [CALL] <span class="italic">funcname</span>[(<span class="italic">argumentlist</span>)] }
</pre>
<p>You can execute procedures and functions through the <code dir="ltr">CallableStatement</code> interface, with a prepare step first when appropriate (such as when a result set is returned).</p>
<p>The following example calls the TimesTen built-in procedure <code dir="ltr">ttCkpt</code>. (Also see <a href="#BABIIBJG">Example 2-13</a> below for a more complete example with JDBC syntax.)</p>
<pre dir="ltr">CallableStatement.execute(&#34;call ttCkpt&#34;)
</pre>
<p>The following example calls the TimesTen built-in procedure <code dir="ltr">ttDataStoreStatus</code>. A prepare call is used because this procedure produces a result set. (Also see <a href="#BABGHFDJ">Example 2-14</a> below for a more complete example with JDBC syntax.)</p>
<pre dir="ltr">CallableStatement cStmt = null;
cStmt = conn.prepareCall(&#34;call ttDataStoreStatus&#34;);
cStmt.execute();
</pre>
<p>The following examples call a PL/SQL procedure <code dir="ltr">myproc</code> with two parameters.</p>
<pre dir="ltr">cStmt.execute(&#34;{ call myproc(:param1, :param2) }&#34;);

cStmt.execute(&#34;{ call myproc(?, ?) }&#34;);
</pre>
<p>The following shows several ways to call a PL/SQL function <code dir="ltr">myfunc</code>.</p>
<pre dir="ltr">cStmt.execute(&#34;CALL myfunc() INTO :retparam&#34;);

cStmt.execute(&#34;CALL myfunc() INTO ?&#34;);

cStmt.execute(&#34;{ :retparam = myfunc() }&#34;);

cStmt.execute(&#34;{ ? = myfunc() }&#34;);
</pre>
<p>See <a class="olink TTSQL443" href="../TTSQL/state.htm#TTSQL443">&#34;CALL&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for details about <code dir="ltr">CALL</code> syntax.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A user&#39;s own procedure takes precedence over a TimesTen built-in procedure with the same name, but it is best to avoid such naming conflicts.</div>
<div id="TTJDV153" class="example">
<p class="titleinexample"><a id="BABIIBJG"></a>Example 2-13 Ex<a id="sthref163"></a><a id="sthref164"></a>ecuting a ttCkpt call</p>
<p>This example calls the <code dir="ltr">ttCkpt</code> procedure to initiate a fuzzy checkpoint.</p>
<pre dir="ltr">Connection conn = null;
CallableStatement cStmt = null;
.......
cStmt = conn.prepareCall(&#34;{ Call ttCkpt }&#34;);
cStmt.execute();
conn.commit();           // commit the transaction
</pre>
<p>Be aware that the <code dir="ltr">ttCkpt</code> built-in procedure requires <code dir="ltr">ADMIN</code> privilege. Refer to <a class="olink TTREF238" href="../TTREF/proced.htm#TTREF238">&#34;ttCkpt&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for additional information.</p>
</div>
<!-- class="example" -->
<div id="TTJDV154" class="example">
<p class="titleinexample"><a id="BABGHFDJ"></a>Example 2-14 Exec<a id="sthref165"></a><a id="sthref166"></a>uting a ttDataStoreStatus call</p>
<p>This example calls the <code dir="ltr">ttDataStoreStatus</code> procedure and prints out the returned result set.</p>
<p>For built-in procedures that return results, you can use the <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">()</code> methods of the <code dir="ltr">ResultSet</code> interface to retrieve the data, as shown.</p>
<p>Contrary to the advice given in <a href="#BABCAAAB">&#34;Working with TimesTen result sets: hints and restrictions&#34;</a>, this example uses a <code dir="ltr">getString()</code> call on the <code dir="ltr">ResultSet</code> object to retrieve the <code dir="ltr">Context</code> field, which is a binary. This is because the output is printed, rather than used for processing. If you do not want to print the <code dir="ltr">Context</code> value, you can achieve better performance by using the <code dir="ltr">getBytes()</code> method instead.</p>
<pre dir="ltr">ResultSet rs;

CallableStatement cStmt = conn.prepareCall(&#34;{ Call ttDataStoreStatus }&#34;);

if (cStmt.execute() == true) {
    rs = cStmt.getResultSet();
    System.out.println(&#34;Fetching result set...&#34;);
    while (rs.next()) {
      System.out.println(&#34;\n Database: &#34; + rs.getString(1));
      System.out.println(&#34; PID: &#34; + rs.getInt(2));
      System.out.println(&#34; Context: &#34; + rs.getString(3));
      System.out.println(&#34; ConType: &#34; + rs.getString(4));
      System.out.println(&#34; memoryID: &#34; + rs.getString(5));
      }
    rs.close();
  }
cStmt.close();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABEBCHC"></a>
<div id="TTJDV164" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting a timeout or threshold for executing SQL statements</h3>
<p>TimesTen offers two ways to limit the time for SQL statements to execute, applying to any <code dir="ltr">execute()</code>, <code dir="ltr">executeBatch()</code>, <code dir="ltr">executeQuery()</code>, <code dir="ltr">executeUpdate()</code>, or <code dir="ltr">next()</code> call.</p>
<ul>
<li>
<p><a href="#BABFAIEC">Setting a timeout duration for SQL statements</a></p>
</li>
<li>
<p><a href="#BABJCEJH">Setting a threshold duration for SQL statements</a></p>
</li>
</ul>
<p>The former is to set a timeout, where if the timeout duration is reached, the statement stops executing and an error is thrown. The latter is to set a threshold, where if the threshold is reached, an SNMP trap is thrown but execution continues.</p>
<a id="BABFAIEC"></a>
<div id="TTJDV165" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Set<a id="sthref167"></a><a id="sthref168"></a>ting a timeout duration for SQL statements</h4>
<p>In TimesTen you can set the <code dir="ltr">SqlQueryTimeout</code> general connection attribute to specify the timeout period (in seconds) for the connection, and therefore any statement on the connection. (Also see <a class="olink TTREF171" href="../TTREF/attribute.htm#TTREF171">&#34;SqlQueryTimeout&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.) A value of 0 indicates no timeout. Despite the name, this timeout value applies to any executable SQL statement, not just queries.</p>
<p>For a particular statement, you can override the <code dir="ltr">SqlQueryTimeout</code> setting by calling the <code dir="ltr">Statement</code> method <code dir="ltr">setQueryTimeout()</code>.</p>
<p>The query timeout limit has effect only when the SQL statement is actively executing. A timeout does not occur during the commit or rollback phase of an operation. For those transactions that update, insert or delete a large number of rows, the commit or rollback phases may take a long time to complete. During that time the timeout value is ignored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If both a lock timeout value and a SQL query timeout value are specified, the lesser of the two values causes a timeout first. Regarding lock timeouts, you can refer to <a class="olink TTREF260" href="../TTREF/proced.htm#TTREF260">&#34;ttLockWait&#34;</a> (built-in procedure) or <a class="olink TTREF165" href="../TTREF/attribute.htm#TTREF165">&#34;LockWait&#34;</a> (general connection attribute) in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>, or to <a class="olink TTTRB200" href="../TTTRB/datastore_trouble.htm#TTTRB200">&#34;Check for deadlocks and timeouts&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Troubleshooting Guide</span>.</div>
</div>
<!-- class="sect3" -->
<a id="BABJCEJH"></a>
<div id="TTJDV166" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Set<a id="sthref169"></a><a id="sthref170"></a>ting a threshold duration for SQL statements</h4>
<p>You can configure TimesTen to write a warning to the support log and throw an SNMP trap when the execution of a SQL statement exceeds a specified time duration, in seconds. Execution continues and is not affected by the threshold.</p>
<p>The name of the SNMP trap is <code dir="ltr">ttQueryThresholdWarnTrap</code>. See <a class="olink TTERR" href="../TTERR/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database Error Messages and SNMP Traps</span></a> for information about configuring SNMP traps.</p>
<p>Despite the name, this threshold applies to any JDBC call executing a SQL statement, not just queries.</p>
<p>By default, the application obtains the threshold value from the <code dir="ltr">QueryThreshold</code> general connection attribute setting. You can override the threshold for a JDBC <code dir="ltr">Connection</code> object by including the <code dir="ltr">QueryThreshold</code> attribute in the connection URL for the database. For example, to set <code dir="ltr">QueryThreshold</code> to a value of 5 seconds for the <code dir="ltr">myDSN</code> database:</p>
<pre dir="ltr">jdbc:timesten:direct:dsn=myDSN;QueryThreshold=5
</pre>
<p>You can also use the <code dir="ltr">setQueryTimeThreshold()</code> method of a <code dir="ltr">TimesTenStatement</code> object to set the threshold. This overrides the connection attribute setting and the <code dir="ltr">Connection</code> object setting.</p>
<p>You can retrieve the current threshold value by using the <code dir="ltr">getQueryTimeThreshold()</code> method of the <code dir="ltr">TimesTenStatement</code> object.</p>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABICJHA"></a>
<div id="TTJDV325" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Features for use with TimesTen Cache</h3>
<p>This section discusses features related to the use of TimesTen Application-Tier Database Cache (TimesTen Cache):</p>
<ul>
<li>
<p><a href="#BABGDIJH">Setting temporary passthrough level with the ttOptSetFlag built-in procedure</a></p>
</li>
<li>
<p><a href="#BABCADBC">Managing cache groups</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Th<a id="sthref171"></a><a id="sthref172"></a>e <code dir="ltr">OraclePassword</code> attribute maps to the Oracle Database password. You can use the <code dir="ltr">TimesTenDataSource</code> method <code dir="ltr">setOraclePassword()</code> to set the Oracle Database password. See <a href="#BABHCGHC">&#34;Connect to the database&#34;</a> for an example.</div>
<a id="BABGDIJH"></a>
<div id="TTJDV326" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Set<a id="sthref173"></a><a id="sthref174"></a>ting temporary passthrough level with the ttOptSetFlag built-in procedure</h4>
<p>TimesTen provides the <code dir="ltr">ttOptSetFlag</code> built-in procedure for setting various flags, including the <code dir="ltr">PassThrough</code> flag to temporarily set the passthrough level. You can use <code dir="ltr">ttOptSetFlag</code> to set <code dir="ltr">PassThrough</code> in a JDBC application as in the following sample statement, which sets the passthrough level to 1. The setting affects all statements that are prepared until the end of the transaction.</p>
<pre dir="ltr">pstmt = conn.prepareStatement(&#34;call ttoptsetflag(&#39;PassThrough&#39;, 1)&#34;);
</pre>
<p>The example that follows has samples of code that accomplish these steps:</p>
<ol>
<li>
<p>Create a prepared statement (a <code dir="ltr">PreparedStatement</code> instance <code dir="ltr">thePassThroughStatement</code>) that calls <code dir="ltr">ttOptSetFlag</code> using a bind parameter for passthrough level.</p>
</li>
<li>
<p>Define a method <code dir="ltr">setPassthrough()</code> that takes a specified passthrough setting, binds it to the prepared statement, then executes the prepared statement to call <code dir="ltr">ttOptSetFlag</code> to set the passthrough level.</p>
</li>
</ol>
<pre dir="ltr">  thePassThroughStatement = 
         theConnection.prepareStatement(&#34;call ttoptsetflag(&#39;PassThrough&#39;, ?)&#34;);
  ...
  private void setPassthrough(int level) throws SQLException{
    thePassThroughStatement.setInt(1, level);
    thePassThroughStatement.execute();
  }
</pre>
<p>See <a class="olink TTREF271" href="../TTREF/proced.htm#TTREF271">&#34;ttOptSetFlag&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for more information about this built-in procedure.</p>
<p>See <a class="olink TTREF211" href="../TTREF/attribute.htm#TTREF211">&#34;PassThrough&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for information about that general connection attribute. See <a class="olink TTCAC291" href="../TTCAC/operations.htm#TTCAC291">&#34;Setting a passthrough level&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span> for information about passthrough settings.</p>
</div>
<!-- class="sect3" -->
<a id="BABCADBC"></a>
<div id="TTJDV168" class="sect3">
<h4 class="sect3">Ma<a id="sthref175"></a>naging cache groups</h4>
<p>In TimesTen, following the execution of a <code dir="ltr">FLUSH CACHE GROUP</code>, <code dir="ltr">LOAD CACHE GROUP</code>, <code dir="ltr">REFRESH CACHE GROUP</code>, or <code dir="ltr">UNLOAD CACHE GROUP</code> statement, the <code dir="ltr">Statement</code> method <code dir="ltr">getUpdateCount()</code> returns the number of cache instances that were flushed, loaded, refreshed, or unloaded.</p>
<p>For related information, see <a class="olink TTCAC290" href="../TTCAC/operations.htm#TTCAC290">&#34;Determining the number of cache instances affected by an operation&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJCEHE"></a>
<div id="TTJDV321" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Features for use with replic<a id="sthref176"></a>ation</h3>
<p>For applications that employ replication, you can improve performance by using <span class="italic">parallel replication</span>, which uses multiple threads acting in parallel to replicate and apply transactional changes to nodes in a replication scheme. TimesTen supports the following types of parallel replication:</p>
<ul>
<li>
<p>Automatic parallel replication (<code dir="ltr">ReplicationApplyOrdering=0</code>): Parallel replication over multiple threads that automatically enforces transactional dependencies and all changes applied in commit order. This is the default.</p>
</li>
<li>
<p>Automatic parallel replication with disabled commit dependencies (<code dir="ltr">ReplicationApplyOrdering=2</code>): Parallel replication over multiple threads that automatically enforces transactional dependencies, but does not enforce transactions to be committed in the same order on the subscriber database as on the master database. In this mode, you can optionally specify replication tracks.</p>
</li>
<li>
<p>User-defined parallel replication (<code dir="ltr">ReplicationApplyOrdering=1</code>): For applications that use a classic replication scheme, have very predictable transactional dependencies, and do not require that the commit order on the receiver is the same as that on the originating database. You can specify the number of transaction tracks and apply specific transactions to each track. All tracks are read, transmitted and applied in parallel.</p>
</li>
</ul>
<p>See <a class="olink TTREP423" href="../TTREP/setup.htm#TTREP423">&#34;Configuring parallel replication&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for additional information and usage scenarios.</p>
<p>For JDBC applications that use parallel replication and specify replication tracks, you can specify the track number for transactions on a connection through the following <code dir="ltr">TimesTenConnection</code> method. (Alternatively, use the general connection attribute <code dir="ltr">ReplicationTrack</code> or the <code dir="ltr">ALTER SESSION</code> parameter <code dir="ltr">REPLICATION_TRACK</code>.)</p>
<ul>
<li>
<p><code dir="ltr">void setReplicationTrack(int</code> <code dir="ltr"><span class="codeinlineitalic">track</span></code><code dir="ltr">)</code></p>
</li>
</ul>
<p><code dir="ltr">TimesTenConnection</code> also has the corresponding getter method:</p>
<ul>
<li>
<p><code dir="ltr">int getReplicationTrack()</code></p>
</li>
</ul>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
User-defined parallel replication is generally not advisable, because special care must be taken to avoid data divergence between replication nodes.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFJBFE"></a>
<div id="TTJDV174" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Consider<a id="sthref177"></a>ing TimesTen features for access control</h2>
<p>TimesTen has features to control database access with object-level resolution for database objects such as tables, views, materialized views, sequences, and synonyms. You can refer to <a class="olink TTOPR236" href="../TTOPR/accesscontrol.htm#TTOPR236">&#34;Managing Access Control&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for introductory information about TimesTen access control.</p>
<p>This section introduces access control as it relates to SQL operations, database connections, and JMS/XLA.</p>
<p>For any query or SQL DML or DDL statement discussed in this document or used in an example, it is assumed that the user has appropriate privileges to execute the statement. For example, a <code dir="ltr">SELECT</code> statement on a table requires ownership of the table, <code dir="ltr">SELECT</code> privilege granted for the table, or the <code dir="ltr">SELECT ANY TABLE</code> system privilege. Similarly, any DML statement requires table ownership, the applicable DML privilege (such as <code dir="ltr">UPDATE</code>) granted for the table, or the applicable <code dir="ltr">ANY TABLE</code> privilege (such as <code dir="ltr">UPDATE ANY TABLE</code>).</p>
<p>For DDL statements, <code dir="ltr">CREATE TABLE</code> requires the <code dir="ltr">CREATE TABLE</code> privilege in the user&#39;s schema, or <code dir="ltr">CREATE ANY TABLE</code> in any other schema. <code dir="ltr">ALTER TABLE</code> requires ownership or the <code dir="ltr">ALTER ANY TABLE</code> system privilege. <code dir="ltr">DROP TABLE</code> requires ownership or the <code dir="ltr">DROP ANY TABLE</code> system privilege. There are no object-level <code dir="ltr">ALTER</code> or <code dir="ltr">DROP</code> privileges.</p>
<p>Refer to <a class="olink TTSQL277" href="../TTSQL/state.htm#TTSQL277">&#34;SQL Statements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for a list of access control privileges and the privilege required for any given SQL statement.</p>
<p>Privileges are granted through the SQL statement <code dir="ltr">GRANT</code> and revoked through the statement <code dir="ltr">REVOKE</code>. Some privileges are automatically granted to all users through the <code dir="ltr">PUBLIC</code> role, of which all users are a member. Refer to <a class="olink TTSQL345" href="../TTSQL/privileges.htm#TTSQL345">&#34;The PUBLIC role&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for information about this role.</p>
<p>In addition, access control affects the following topics covered in this document:</p>
<ul>
<li>
<p>Connecting to a database: Refer to <a href="#BABHAGHD">&#34;Access control for connections&#34;</a>.</p>
</li>
<li>
<p>Setting connection attributes: Refer to <a href="#BABHFAHE">&#34;Create a connection URL for the database and specify connection attributes&#34;</a>.</p>
</li>
<li>
<p>Configuring and managing JMS/XLA. Refer to <a href="jmsxla_event.htm#CIHIDBJJ">&#34;Access control impact on XLA&#34;</a>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>Access control cannot be disabled.</p>
</li>
<li>
<p>Access control privileges are checked both when SQL is prepared and when it is executed in the database, with most of the performance cost coming at prepare time.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABHGDGE"></a>
<div id="TTJDV175" class="sect1">
<h2 class="sect1">Handling <a id="sthref178"></a>errors</h2>
<p>This section discusses how to check for, identify, and handle errors in a TimesTen Java application.</p>
<p>For a list of the errors that TimesTen returns and what to do if the error is encountered, see <a class="olink TTERR110" href="../TTERR/error.htm#TTERR110">&#34;Warnings and Errors&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Error Messages and SNMP Traps</span>.</p>
<p>This section includes the following topics.</p>
<ul>
<li>
<p><a href="#BABHDIGG">About fatal errors, non-fatal errors, and warnings</a></p>
</li>
<li>
<p><a href="#BABEBGEE">Reporting errors and warnings</a></p>
</li>
<li>
<p><a href="#BABHCDCC">Catching and responding to specific errors</a></p>
</li>
<li>
<p><a href="#BABDCCBC">Rolling back failed transactions</a></p>
</li>
</ul>
<a id="BABHDIGG"></a>
<div id="TTJDV176" class="sect2">
<h3 class="sect2">Ab<a id="sthref179"></a>out fatal errors, non-fatal errors, and warnings</h3>
<p>When operations are not completely successful, TimesTen can return a fatal error, a non-fatal error, or a warning.</p>
<div id="TTJDV177" class="sect3"><a id="sthref180"></a>
<h4 class="sect3">Han<a id="sthref181"></a><a id="sthref182"></a>dling fatal errors</h4>
<p>Fatal errors make the database inaccessible until it can be recovered. When a fatal error occurs, all database connections are required to disconnect. No further operations may complete. Fatal errors are indicated by TimesTen error codes 846 and 994. Error handling for these errors should be different from standard error handling. In particular, the code should roll back the current transaction and, to avoid out-of-memory conditions in the server, disconnect from the database. Shared memory from the old TimesTen instance is not freed until all connections that were active at the time of the error have disconnected. Inactive applications still connected to the old TimesTen instance may have to be manually terminated.</p>
<p>When fatal errors occur, TimesTen performs the full cleanup and recovery procedure:</p>
<ul>
<li>
<p>Every connection to the database is invalidated, a new memory segment is allocated and applications are required to disconnect.</p>
</li>
<li>
<p>The database is recovered from the checkpoint and transaction log files upon the first subsequent initial connection.</p>
<ul>
<li>
<p>The recovered database reflects the state of all durably committed transactions and possibly some transactions that were committed non-durably.</p>
</li>
<li>
<p>No uncommitted or rolled back transactions are reflected.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CEGFBDJI"></a>
<div id="TTJDV178" class="sect3">
<h4 class="sect3">Han<a id="sthref183"></a>dling non-fatal errors</h4>
<p>Non-fatal errors include simple errors such as an <code dir="ltr">INSERT</code> statement that violates unique constraints. This category also includes some classes of application and process failures.</p>
<p>TimesTen returns non-fatal errors through the normal error-handling process. Application should check for errors and appropriately handle them.</p>
<p>When a database is affected by a non-fatal error, an error may be returned and the application should take appropriate action.</p>
<p>An application can handle non-fatal errors by modifying its actions or, in some cases, by rolling back one or more offending transactions, as described in <a href="#BABDCCBC">&#34;Rolling back failed transactions&#34;</a>.</p>
<p>Also see <a href="#BABEBGEE">&#34;Reporting errors and warnings&#34;</a>, which follows shortly.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If a <code dir="ltr">ResultSet</code>, <code dir="ltr">Statement</code>, <code dir="ltr">PreparedStatement</code>, <code dir="ltr">CallableStatement</code> or <code dir="ltr">Connection</code> operation results in a database error, it is a good practice to call the <code dir="ltr">close()</code> method for that object.</div>
</div>
<!-- class="sect3" -->
<div id="TTJDV179" class="sect3"><a id="sthref184"></a>
<h4 class="sect3">Ab<a id="sthref185"></a><a id="sthref186"></a>out warnings</h4>
<p>TimesTen returns warnings when something unexpected occurs. Here are some examples of events that cause TimesTen to issue a warning:</p>
<ul>
<li>
<p>A checkpoint failure</p>
</li>
<li>
<p>Use of a deprecated TimesTen feature</p>
</li>
<li>
<p>Truncation of some data</p>
</li>
<li>
<p>Execution of a recovery process upon connect</p>
</li>
<li>
<p>Replication return receipt timeout</p>
</li>
</ul>
<p>You should always have code that checks for warnings, as they can indicate application problems.</p>
<p>Also see <a href="#BABEBGEE">&#34;Reporting errors and warnings&#34;</a> immediately below.</p>
</div>
<!-- class="sect3" -->
<div id="TTJDV346" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref187"></a>
<h4 class="sect3">Abnormal termination</h4>
<p>In some cases, such as with a process failure, an error cannot be returned, so TimesTen automatically rolls back the transactions of the failed process.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEBGEE"></a>
<div id="TTJDV180" class="sect2">
<h3 class="sect2">Rep<a id="sthref188"></a>orting errors and warnings</h3>
<p>You should check for and report all errors and warnings that can be returned on every call. This saves considerable time and effort during development and debugging. A <code dir="ltr">SQLException</code> object is generated if there are one or more database access errors and a <code dir="ltr">SQLWarning</code> object is generated if there are one or more warning messages. A single call may return multiple errors or warnings or both, so your application should report all errors or warnings in the returned <code dir="ltr">SQLException</code> or <code dir="ltr">SQLWarning</code> objects.</p>
<p>Multiple errors or warnings are returned in linked chains of <code dir="ltr">SQLException</code> or <code dir="ltr">SQLWarning</code> objects. <a href="#CEGIGGDJ">Example 2-15</a> and <a href="#CEGHAIHF">Example 2-16</a> demonstrate how you might iterate through the lists of returned <code dir="ltr">SQLException</code> and <code dir="ltr">SQLWarning</code> objects to report all of the errors and warnings, respectively.</p>
<div id="TTJDV181" class="example">
<p class="titleinexample"><a id="CEGIGGDJ"></a>Example 2-15 Printing exceptions</p>
<p>The following method prints out the content of all exceptions in the linked <code dir="ltr">SQLException</code> objects.</p>
<pre dir="ltr">static int reportSQLExceptions(SQLException ex)
  {
    int errCount = 0;
    if (ex != null) {
      errStream.println(&#34;\n--- SQLException caught ---&#34;);
      ex.printStackTrace();

      while (ex != null) {
        errStream.println(&#34;SQL State: &#34; + ex.getSQLState());
        errStream.println(&#34;Message: &#34; + ex.getMessage());
        errStream.println(&#34;Error Code: &#34; + ex.getErrorCode());
        errCount ++;
        ex = ex.getNextException();
        errStream.println();
      }
    }

    return errCount;
}
</pre></div>
<!-- class="example" -->
<div id="TTJDV182" class="example">
<p class="titleinexample"><a id="CEGHAIHF"></a>Example 2-16 Printing warnings</p>
<p>This method prints out the content of all warning in the linked <code dir="ltr">SQLWarning</code> objects.</p>
<pre dir="ltr">static int reportSQLWarnings(SQLWarning wn)
{
    int warnCount = 0;

    while (wn != null) {
      errStream.println(&#34;\n--- SQL Warning ---&#34;);
      errStream.println(&#34;SQL State: &#34; + wn.getSQLState());
      errStream.println(&#34;Message: &#34; + wn.getMessage());
      errStream.println(&#34;Error Code: &#34; + wn.getErrorCode());

      // is this a SQLWarning object or a DataTruncation object?
      if (wn instanceof DataTruncation) {
        DataTruncation trn = (DataTruncation) wn;
        errStream.println(&#34;Truncation error in column: &#34; +
          trn.getIndex());
      }
      warnCount++;
      wn = wn.getNextWarning();
      errStream.println();
    }
    return warnCount;
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABHCDCC"></a>
<div id="TTJDV183" class="sect2">
<h3 class="sect2">Catching and re<a id="sthref189"></a><a id="sthref190"></a>sponding to specific errors</h3>
<p>In some situations it may be desirable to respond to a specific SQL state or TimesTen error code. You can use the <code dir="ltr">SQLException</code> method <code dir="ltr">getSQLState()</code> to return the SQL state and the <code dir="ltr">getErrorCode()</code> method to return TimesTen error codes, as shown in <a href="#CEGBEHDI">Example 2-17</a>.</p>
<p>Also refer to the entry for <code dir="ltr">TimesTenVendorCode</code> in <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for error information.</p>
<div id="TTJDV184" class="example">
<p class="titleinexample"><a id="CEGBEHDI"></a>Example 2-17 Catching an error</p>
<p>The TimesTen demos require that you load the demo schema before they are executed. The following <code dir="ltr">catch</code> statement alerts the user that <code dir="ltr">appuser</code> has not been loaded or has not been refreshed by detecting ODBC error <code dir="ltr">S0002</code> and TimesTen error 907:</p>
<pre dir="ltr">catch (SQLException ex) {
  if (ex.getSQLState().equalsIgnoreCase(&#34;S0002&#34;)) {
    errStream.println(&#34;\nError: The table appuser.customer &#34; +
      &#34;does not exist.\n\t Please reinitialize the database.&#34;);
  } else if (ex.getErrorCode() == 907) {
    errStream.println(&#34;\nError: Attempting to insert a row &#34; +
      &#34;with a duplicate primary key.\n\tPlease reinitialize the database.&#34;);
}
</pre>
<p>You can use the <a id="sthref191"></a><code dir="ltr">TimesTenVendorCode</code> interface to detect the errors by their name, rather than their number.</p>
<p>Consider this example:</p>
<pre dir="ltr">ex.getErrorCode() == com.timesten.jdbc.TimesTenVendorCode.TT_ERR_KEYEXISTS
</pre>
<p>The following is equivalent:</p>
<pre dir="ltr">ex.getErrorCode() == 907
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABDCCBC"></a>
<div id="TTJDV185" class="sect2">
<h3 class="sect2">Rol<a id="sthref192"></a><a id="sthref193"></a>ling back failed transactions</h3>
<p>In some situations, such as recovering from a deadlock or lock timeout, you should explicitly roll back the transaction using the <code dir="ltr">Connection</code> method <code dir="ltr">rollback()</code>, as in the following example.</p>
<div id="TTJDV186" class="example">
<p class="titleinexample"><a id="sthref194"></a>Example 2-18 Rolling back a transaction</p>
<pre dir="ltr">try {
  if (conn != null &amp;&amp; !conn.isClosed()) {
    // Rollback any transactions in case of errors
      if (retcode != 0) {
        try {
          System.out.println(&#34;\nEncountered error. Rolling back transaction&#34;);
          conn.rollback();
        } catch (SQLException ex) {
          reportSQLExceptions(ex);
        }
      }
   }

    System.out.println(&#34;\nClosing the connection\n&#34;);
    conn.close();
} catch (SQLException ex) {

  reportSQLExceptions(ex);
}
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">XACT_ROLLBACKS</code> column of the <code dir="ltr">SYS.MONITOR</code> table indicates the number of transactions that were rolled back. Refer to <a class="olink TTSYS372" href="../TTSYS/systemtables.htm#TTSYS372">&#34;SYS.MONITOR&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span> for additional information.</p>
<p>A transaction rollback consumes resources and the entire transaction is in effect wasted. To avoid unnecessary rollbacks, design your application to avoid contention and check the application or input data for potential errors before submitting it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your application aborts, crashes, or disconnects in the middle of an active transaction, TimesTen automatically rolls back the transaction.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDIJGC"></a>
<div id="TTJDV187" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">JDBC support for automatic client failover</h2>
<p>Automatic client failover is for use in High Availability scenarios with a TimesTen active standby pair replication configuration. If there is a failure of the active node, failover (transfer) to the new active (original standby) node occurs, and applications are automatically reconnected to the new active node. TimesTen provides features that allow applications to be alerted when this happens, so they can take any appropriate action.</p>
<p>This section discusses TimesTen JDBC extensions related to automatic client failover, covering the following topics:</p>
<ul>
<li>
<p><a href="#BABJBFAG">Features and functionality of JDBC support for automatic client failover</a></p>
</li>
<li>
<p><a href="#BABDEEJF">Configuration of automatic client failover</a></p>
</li>
<li>
<p><a href="#BABFHEBE">Synchronous detection of automatic client failover</a></p>
</li>
<li>
<p><a href="#BABJAJIA">Asynchronous detection of automatic client failover</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Automatic client failover applies only to client/server connections. The functionality described here does not apply to a direct connection.</div>
<p>Automatic client failover is complementary to Oracle Clusterware in situations where Oracle Clusterware is used, though the two features are not dependent on each other.</p>
<p>See <a class="olink TTOPR736" href="../TTOPR/client_server.htm#TTOPR736">&#34;Using automatic client failover&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for general information about automatic client failover, and <a class="olink TTCDV174" href="../TTCDV/writing_app.htm#TTCDV174">&#34;Using automatic client failover in your application&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span> for related information for developers.</p>
<p>You can also refer to <a class="olink TTREP257" href="../TTREP/cluster.htm#TTREP257">&#34;Using Oracle Clusterware to Manage Active Standby Pairs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for information about Oracle Clusterware.</p>
<a id="BABJBFAG"></a>
<div id="TTJDV188" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Feat<a id="sthref195"></a>ures and functionality of JDBC support for automatic client failover</h3>
<p>This section discusses general TimesTen JDBC features related to client failover, and functionality relating specifically to pooled connections.</p>
<p>Refer to <a class="olink TTJDB" href="../TTJDB/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database JDBC Extensions Java API Reference</span></a> for additional information about the TimesTen JDBC classes, interfaces, and methods discussed here.</p>
<a id="BABDDAFH"></a>
<div id="TTJDV189" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">General Client Failover Features</h4>
<p>TimesTen JDBC support for automatic client failover provides two mechanisms for detecting a failover:</p>
<ul>
<li>
<p><span class="italic">Synchronous detection</span>, through a SQL exception: After an automatic client failover, JDBC objects created on the failed connection&mdash;such as statements, prepared statements, callable statements, and result sets&mdash;can no longer be used. A Java SQL exception is thrown if an application attempts to access any such object. By examining the SQL state and error code of the exception, you can determine whether the exception is the result of a failover situation.</p>
</li>
<li>
<p><span class="italic">Asynchronous detection</span>, through an event listener: An application can register a user-defined client failover event listener, which is notified of each event that occurs during the process of a failover.</p>
</li>
</ul>
<p>TimesTen JDBC provides the following features, in package <code dir="ltr">com.timesten.jdbc</code>, to support automatic client failover.</p>
<ul>
<li>
<p><code dir="ltr">ClientFailoverEvent</code> class</p>
<p>This class is used to represent events that occur during a client failover: begin, end, abort, or retry.</p>
</li>
<li>
<p><code dir="ltr">ClientFailoverEventListener</code> interface</p>
<p>An application interested in client failover events must have a class that implements this interface, which is the mechanism to listen for client failover events. At runtime, the application must register <code dir="ltr">ClientFailoverEventListener</code> instances through the TimesTen connection (see immediately below).</p>
<p>You can use a listener to proactively react to failure detection, such as by refreshing connection pool statement caches, for example.</p>
</li>
<li>
<p>New methods in the <code dir="ltr">TimesTenConnection</code> interface</p>
<p>This interface specifies the methods <code dir="ltr">addConnectionEventListener()</code> and <code dir="ltr">removeConnectionEventListener()</code> to register or remove, respectively, a client failover event listener.</p>
</li>
<li>
<p>A new constant, <code dir="ltr">TT_ERR_FAILOVERINVALIDATION</code>, in the <code dir="ltr">TimesTenVendorCode</code> interface</p>
<p>This enables you to identify an event as a failover event.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="TTJDV190" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref196"></a>
<h4 class="sect3">Client fa<a id="sthref197"></a>ilover features for pooled connections</h4>
<p>TimesTen recommends that applications using pooled connections (<code dir="ltr">javax.sql.PooledConnection</code>) or connection pool data sources (<code dir="ltr">javax.sql.ConnectionPoolDataSource</code>) use the synchronous mechanism noted previously to handle stale objects on the failed connection. Java EE application servers manage pooled connections, so applications are not able to listen for events on pooled connections. And application servers do not implement and register an instance of <code dir="ltr">ClientFailoverEventListener</code>, because this is a TimesTen extension.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDEEJF"></a>
<div id="TTJDV347" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configur<a id="sthref198"></a>ation of automatic client failover</h3>
<p>Refer to <a class="olink TTOPR193" href="../TTOPR/client_server.htm#TTOPR193">&#34;Configuring automatic client failover&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Setting any of <code dir="ltr">TTC_Server2</code>, <code dir="ltr">TTC_Server_DSN2</code>, or <code dir="ltr">TCP_Port2</code> implies the following:
<ul>
<li>
<p>You intend to use automatic client failover.</p>
</li>
<li>
<p>You understand that a new thread is created for your application to support the failover mechanism.</p>
</li>
<li>
<p>You have linked your application with a thread library (pthreads on UNIX systems).</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABFHEBE"></a>
<div id="TTJDV191" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Syn<a id="sthref199"></a><a id="sthref200"></a>chronous detection of automatic client failover</h3>
<p>If, in a failover situation, an application attempts to use objects created on the failed connection, then JDBC throws a SQL exception. The vendor-specific exception code is set to <code dir="ltr">TimesTenVendorCode.TT_ERR_FAILOVERINVALIDATION</code>.</p>
<p>Detecting a failover through this mechanism is referred to as synchronous detection. The following example demonstrates this.</p>
<div id="TTJDV192" class="example">
<p class="titleinexample"><a id="sthref201"></a>Example 2-19 Synchronous detection of automatic client failover</p>
<pre dir="ltr">try {
   // ...
   // Execute a query on a previously prepared statement.
   ResultSet theResultSet = theStatement.executeQuery(&#34;select * from dual&#34;);
   // ...

} catch (SQLException sqlex) {
   sqlex.printStackTrace();
   if (sqlex.getErrorCode() == TimesTenVendorCode.TT_ERR_FAILOVERINVALIDATION) {
   // Automatic client failover has taken place; discontinue use of this object.
   }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABJAJIA"></a>
<div id="TTJDV193" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Asy<a id="sthref202"></a><a id="sthref203"></a>nchronous detection of automatic client failover</h3>
<p>Asynchronous failover detection requires an application to implement a client failover event listener and register an instance of it on the TimesTen connection. This section describes the steps involved:</p>
<ol>
<li>
<p><a href="#BABJBBCI">Implement a client failover event listener</a>.</p>
</li>
<li>
<p><a href="#BABJFIGG">Register the client failover listener instance</a>.</p>
</li>
<li>
<p><a href="#BABJGCDB">Remove the client failover listener instance</a>.</p>
</li>
</ol>
<a id="BABJBBCI"></a>
<div id="TTJDV194" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Implement a client failover event listener</h4>
<p>TimesTen JDBC provides the <code dir="ltr">com.timesten.jdbc.ClientFailoverEventListener</code> interface for use in listening for events, highlighted by the following method:</p>
<ul>
<li>
<p><code dir="ltr">void notify(ClientFailoverEvent</code> <code dir="ltr"><span class="codeinlineitalic">event</span></code><code dir="ltr">)</code></p>
</li>
</ul>
<p>To use asynchronous failover detection, you must create a class that implements this interface, then register an instance of the class at runtime on the TimesTen connection (discussed shortly).</p>
<p>When a failover event occurs, TimesTen calls the <code dir="ltr">notify()</code> method of the listener instance you registered, providing a <code dir="ltr">ClientFailoverEvent</code> instance that you can then examine for information about the event.</p>
<p>The following example shows the basic form of a <code dir="ltr">ClientFailoverEventListener</code> implementation.</p>
<div id="TTJDV195" class="example">
<p class="titleinexample"><a id="sthref204"></a>Example 2-20 Asynchronous detection of automatic client failover</p>
<pre dir="ltr">   private class MyCFListener implements ClientFailoverEventListener {
      /* Applications can build state system to track states during failover.
         You may want to add methods that talks about readiness of this Connection
         for processing. 
      */
      public void notify(ClientFailoverEvent event) {
         
         /* Process connection failover type */
         switch(event.getTheFailoverType()) {
         case TT_FO_CONNECTION:
            /* Process session fail over */
            System.out.println(&#34;This should be a connection failover type &#34; +
                                event.getTheFailoverType());
            break;
            
         default:
            break;
         }
         /* Process connection failover events */
         switch(event.getTheFailoverEvent()) {
         case BEGIN:
            System.out.println(&#34;This should be a BEGIN event &#34; +
                                event.getTheFailoverEvent());
            /* Applications cannot use Statement, PreparedStatement, ResultSet,
               etc. created on the failed Connection any longer.
            */
            break;
            
         case END:
            System.out.println(&#34;This should be an END event &#34; +
                                event.getTheFailoverEvent());
            
            /* Applications may want to re-create Statement and PreparedStatement
               objects at this point as needed.
            */
            break;
         
         case ABORT:
            System.out.println(&#34;This should be an ABORT event &#34; +
                                event.getTheFailoverEvent());
            break;
            
         case ERROR:
            System.out.println(&#34;This should be an ERROR event &#34; +
                                event.getTheFailoverEvent());
            break;
            
         default:
            break;
         }
      }
   }
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">event.getTheFailoverType()</code> call returns an instance of the nested class <code dir="ltr">ClientFailoverEvent.FailoverType</code>, which is an enumeration type. In TimesTen, the only supported value is <code dir="ltr">TT_FO_CONNECTION</code>, indicating a connection failover.</p>
<p>The <code dir="ltr">event.getTheFailoverEvent()</code> call returns an instance of the nested class <code dir="ltr">ClientFailoverEvent.FailoverEvent</code>, which is an enumeration type where the value can be one of the following:</p>
<ul>
<li>
<p><code dir="ltr">BEGIN</code>, if the client failover has begun</p>
</li>
<li>
<p><code dir="ltr">END</code>, if the client failover has completed successfully</p>
</li>
<li>
<p><code dir="ltr">ERROR</code>, if the client failover failed but will be retried</p>
</li>
<li>
<p><code dir="ltr">ABORT</code>, if the client failover has aborted</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABJFIGG"></a>
<div id="TTJDV196" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Register the client failover listener instance</h4>
<p>At runtime you must register an instance of your failover event listener class with the TimesTen connection object, so that TimesTen is able to call the <code dir="ltr">notify()</code> method of the listener class as needed for failover events.</p>
<p><code dir="ltr">TimesTenConnection</code> provides the following method for this.</p>
<ul>
<li>
<p><code dir="ltr">void addConnectionEventListener (ClientFailoverEventListener</code> <code dir="ltr"><span class="codeinlineitalic">listener</span></code><code dir="ltr">)</code></p>
</li>
</ul>
<p>Create an instance of your listener class, then register it using this method. The following example establishes the connection and registers the listener. Assume <code dir="ltr">theDsn</code> is the JDBC URL for a TimesTen Client/Server database and <code dir="ltr">theCFListener</code> is an instance of your failover event listener class.</p>
<div id="TTJDV197" class="example">
<p class="titleinexample"><a id="sthref205"></a>Example 2-21 Registering the client failover listener</p>
<pre dir="ltr">      try {
         /* Assume this is a client/server conn; register for conn failover. */
         Class.forName(&#34;com.timesten.jdbc.TimesTenClientDriver&#34;);
         String url = &#34;jdbc:timesten:client:&#34; + theDsn;
         theConnection = (TimesTenConnection)DriverManager.getConnection(url);
         theConnection.addConnectionEventListener(theCFListener);
         /* Additional logic goes here; connection failover listener is
            called if there is a fail over.
         */
      }
      catch (ClassNotFoundException cnfex) {
         cnfex.printStackTrace();
      }
      catch (SQLException sqlex) {
         sqlex.printStackTrace();
      }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABJGCDB"></a>
<div id="TTJDV198" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Remove the client failover listener instance</h4>
<p>The <code dir="ltr">TimesTenConnection</code> interface defines the following method to deregister a failover event listener:</p>
<ul>
<li>
<p><code dir="ltr">void removeConnectionEventListener (ClientFailoverEventListener</code> <code dir="ltr"><span class="codeinlineitalic">listener</span></code><code dir="ltr">)</code></p>
</li>
</ul>
<p>Use this method to deregister a listener instance.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6136">
<tr>
<td class="cellalignment6145">
<table class="cellalignment6141">
<tr>
<td class="cellalignment6140"><a href="env_setup.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6140"><a href="jmsxla_event.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6147">
<table class="cellalignment6139">
<tr>
<td class="cellalignment6140"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6140"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6140"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6140"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6140"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6140"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>