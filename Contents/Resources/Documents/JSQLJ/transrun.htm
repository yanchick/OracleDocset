<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-72380"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Translator%20and%20Run-Time%20Functionality"></a><title>Translator and Run-Time Functionality</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743"/>
<meta name="dcterms.created" content="2013-12-02T6:55:15Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQLJ Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17660-12"/>
<meta name="dcterms.isVersionOf" content="JSQLJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="transopt.htm" title="Previous" type="text/html"/>
<link rel="Next" href="apppfdbg.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17660-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/20</span> <!-- End Header -->
<div id="JSQLJ700" class="chapter"><a id="CHEDFEFI"></a> <a id="i1007339"></a>
<h1 class="chapter"><span class="secnum">9</span> Translator and Run-Time Functionality</h1>
<p>This chapter discusses internal operations and functionality of Oracle SQLJ translator and run time.</p>
<p>The following topics are covered:</p>
<ul>
<li>
<p><a href="#CHEJGJAB">Internal Translator Operations</a></p>
</li>
<li>
<p><a href="#i1005946">Functionality of Translator Errors, Messages, and Exit Codes</a></p>
</li>
<li>
<p><a href="#i1006090">SQLJ Run Time</a></p>
</li>
<li>
<p><a href="#i1006168">Globalization Support in the Translator and Run Time</a></p>
</li>
</ul>
<a id="CHEJGJAB"></a>
<div id="JSQLJ701" class="sect1">
<h2 class="sect1">Internal <a id="sthref773"></a>Translator Operations</h2>
<p>The following topics summarize the operations executed by the SQLJ translator during a translation:</p>
<ul>
<li>
<p><a href="#i1005592">Java and SQLJ Code-Parsing and Syntax-Checking</a></p>
</li>
<li>
<p><a href="#i1009059">SQL Semantics-Checking and Offline Parsing</a></p>
</li>
<li>
<p><a href="#i1005656">Code Generation</a></p>
</li>
<li>
<p><a href="#i1005790">Java Compilation</a></p>
</li>
<li>
<p><a href="#i1005877">Profile Customization (ISO Code Generation)</a></p>
</li>
</ul>
<a id="i1005592"></a>
<div id="JSQLJ702" class="sect2">
<h3 class="sect2">Java and SQLJ Code-<a id="sthref774"></a>Parsing and Syntax-Checking</h3>
<p>In this first phase of SQLJ translation, a SQLJ parser and a Java parser are used to process all the source code and check syntax. As the SQLJ translator parses the <code>.sqlj</code> file, it invokes a Java parser to check the syntax of Java statements and a SQLJ parser to check the syntax of SQLJ constructs (anything preceded by <code>#sql</code>). The SQLJ parser also invokes the Java parser to check the syntax of Java host variables and expressions within SQLJ executable statements.</p>
<p>The SQLJ parser checks the grammar of SQLJ constructs according to the SQLJ language specification. However, it does <span class="italic">not</span> check the grammar of the embedded SQL operations. SQL syntax is not checked until the semantics-checking or offline parsing step.</p>
<p>This syntax-check will look for errors like missing semi-colons, mismatched curly braces, and obvious type mismatches, such as multiplying a number by a string. If the parsers find any syntax errors or type mismatches during this phase, then the translation is aborted and the errors are reported to the user.</p>
</div>
<!-- class="sect2" -->
<a id="i1009059"></a>
<div id="JSQLJ703" class="sect2">
<h3 class="sect2">SQL Semantics-<a id="sthref775"></a><a id="sthref776"></a><a id="sthref777"></a>Checking and Offline Parsing</h3>
<p>Once the SQLJ and Java application source code is verified as syntactically correct, the translator enters into the semantics-checking phase and invokes a SQL semantics-checker or a SQL offline parser or both, according to SQLJ option settings.</p>
<p>Setting the <code>-user</code> option enables online checking, and setting the <code>-password</code> and <code>-url</code> options specifies the database connection, if the password and URL were not specified in the <code>-user</code> option. The <code>-offline</code> or <code>-online</code> option specifies which checker to use. The default, typically sufficient, is a checker front end called <code>OracleChecker</code> that chooses the most appropriate checker, according to whether you have enabled online checking and which Java Database Connectivity (JDBC) driver you are using.</p>
<p>The <code>-parse</code> option, <code>true</code> by default, is for enabling the offline parser, which offers a way to verify SQL and PL/SQL syntax (but not data types against database columns) without necessitating a database connection during translation. Note that some settings of the <code>-parse</code> option will override the <code>-user</code> option and disable online checking.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1006917">&#34;Connection Options&#34;</a> and <a href="transopt.htm#i1008060">&#34;Semantics-Checking and Offline-Parsing Options&#34;</a></div>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
For ISO code generation, semantics-checking can also be performed on a profile that was produced during a previous execution of the SQLJ translator. Refer to <a href="profcust.htm#i635420">&#34;SQLCheckerCustomizer for Profile Semantics-Checking&#34;</a>.</div>
<p>The following tasks are always performed during semantics-checking, regardless of the status of online checking or offline parsing:</p>
<ol>
<li>
<p>SQLJ analyzes the types of Java expressions in your SQLJ executable statements.</p>
<p>This includes examining the SQLJ source files being translated, any <code>.java</code> files entered on the command line, and any imported Java classes whose <code>.class</code> files or <code>.java</code> files can be found through the classpath. SQLJ examines whether and how stream types are used in <code>SELECT</code> or <code>CAST</code> statements, what Java types are used in iterator columns or <code>INTO</code>-lists, what Java types are used as input host variables, and what Java types are used as output host variables.</p>
<p>SQLJ also processes <code>FETCH</code>, <code>CAST</code>, <code>CALL</code>, <code>SET TRANSACTION</code>, <code>VALUES</code>, and <code>SET</code> statements syntactically.</p>
<p>Any Java expression in a SQLJ executable statement must have a Java type valid for the given situation and usage. For example, consider the following statement:</p>
<pre>#sql [myCtx] { UPDATE ... };
</pre>
<p>The <code>myCtx</code> variable, which might be used to specify a connection context instance or execution context instance for this statement, must actually resolve to a SQLJ connection context type or execution context type.</p>
<p>Now consider the following example:</p>
<pre>#sql { UPDATE employees SET salary = :newSal };
</pre>
<p>If <code>newSal</code> is a variable, as opposed to a field, then an error is generated if <code>newSal</code> was not previously declared. In any case, an error is generated if it cannot be assigned to a valid Java type or its Java type cannot be used in a SQL statement (for example, <code>java.util.Vector</code>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Semantics-checking of Java types is performed only for Java expressions within SQLJ executable statements. Such errors in your standard Java statements will <span class="italic">not</span> be detected until compilation by the Java compiler.</div>
</li>
<li>
<p>SQLJ tries to categorize your embedded SQL operations. Each operation must have a recognizable keyword, such as <code>SELECT</code> or <code>INSERT</code>, so that SQLJ knows what kind of operation it is. For example, the following statement will generate an error:</p>
<pre>#sql { foo };
</pre></li>
<li>
<p>If either online checking or offline parsing (or both) is enabled, then SQLJ analyzes and verifies the syntax of embedded SQL and PL/SQL operations.</p>
</li>
<li>
<p>If either online checking or offline parsing (or both) is enabled, then SQLJ checks the types of Java expressions in SQLJ executable statements against SQL types of corresponding columns in the database and SQL types of corresponding arguments and return variables of stored procedures and functions.</p>
<p>In the process of doing this, SQLJ verifies that the SQL entities used in your SQLJ executable statements, such as tables, views, and stored procedures, actually exist in the database. SQLJ also checks nullability of database columns whose data is being selected into iterator columns of Java primitive types, which cannot process null data. However, nullability is not checked for stored procedure and function output parameters and return values.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1005656"></a>
<div id="JSQLJ704" class="sect2">
<h3 class="sect2">Code <a id="sthref778"></a><a id="sthref779"></a>Generation</h3>
<p>For the <code>.sqlj</code> application source file, the SQLJ translator generates a <code>.java</code> file and, for ISO standard SQLJ code generation, at least one profile (either in <code>.ser</code> or <code>.class</code> files). The <code>.java</code> contains your translated application source code, class definitions for any private iterators and connection contexts you declared, and, for ISO code, a profile-keys class definition generated and used internally by SQLJ.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
No profiles or profile-keys class are generated if you use the default Oracle-specific code generation mode.
<p>With ISO code generation, there are no profiles or profile-keys class if you do not use any SQLJ executable statements in your code.</p>
</div>
<p class="subhead2"><a id="JSQLJ705"></a>Generated Application Code in .java File</p>
<p>For the default Oracle-specific code generation, the generated <code>.java</code> file for your application contains direct calls to Oracle JDBC driver in place of the original SQLJ executable statements. There are also calls to an Oracle-specific SQLJ run time. For ISO standard SQLJ code generation, SQLJ executable statements are replaced by calls to the SQLJ run time, which in turn contains calls to the JDBC driver.</p>
<p>For convenience, generated <code>.java</code> files also include a comment for each of your <code>#sql</code> statements, repeating the statement in its entirety for reference. The generated <code>.java</code> file will have the same base name as the input <code>.sqlj</code> file, which would be the name of the public class defined in the <code>.sqlj</code> file or the first class defined if there are no public classes. For example, <code>Foo.sqlj</code> defines the <code>Foo</code> class. The <code>Foo.java</code> source file will be generated by the translator.</p>
<p>The location of the generated <code>.java</code> file depends on whether and how you set the SQLJ <code>-dir</code> option. By default, the <code>.java</code> file will be placed in the directory of the <code>.sqlj</code> input file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1006879">&#34;Output Directory for Generated .java Files (-dir)&#34;</a></div>
<p class="subhead2"><a id="JSQLJ706"></a>Generated <a id="sthref780"></a>Profile-Keys Class in .java File (ISO Code Generation)</p>
<p>If you use ISO standard SQLJ code generation, SQLJ generates a profile-keys class that it uses internally during run time to load and access the serialized profile. This class contains mapping information between the SQLJ run time calls in your translated application and the SQL operations placed in the serialized profile. It also contains methods to access the serialized profile.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the default Oracle-specific code generation, no profiles or profile-keys classes are generated.</div>
<p>The profile-keys class is defined in the same <code>.java</code> output file that has your translated application source code, with a class name based on the base name of your <code>.sqlj</code> source file as follows:</p>
<pre>Basename_SJProfileKeys
</pre>
<p>For example, translating <code>Foo.sqlj</code> defines the following profile-keys class in the generated <code>.java</code> file:</p>
<pre>Foo_SJProfileKeys
</pre>
<p>If your application is in a package, this is reflected appropriately. For example, translating <code>Foo.sqlj</code> in the <code>a.b</code> package defines the following class:</p>
<pre>a.b.Foo_SJProfileKeys
</pre>
<p class="subhead2"><a id="JSQLJ707"></a>Generated <a id="sthref781"></a><a id="sthref782"></a>Profiles in .ser or .class Files (ISO Code Generation)</p>
<p>If you use ISO standard SQLJ code generation, SQLJ generates profiles that it uses to store information about the SQL operations found in the input file. A profile is generated for each connection context class that you use in your application. It describes the operations to be performed using instances of the associated connection context class, such as SQL operations to execute, tables to access, and stored procedures and functions to call.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the default Oracle-specific code generation, then information about the SQL operations is embedded in the generated code, which calls Oracle JDBC driver directly. In this case, SQLJ does not generate profiles.</div>
<p>Profiles are generated in <code>.ser</code> serialized resource files. However, if you enable the SQLJ <code>-ser2class</code> option, then the profiles are automatically converted to <code>.class</code> files as part of the translation. In this case, no further customization of the profile is possible. You would have to delete the <code>.class</code> file and rerun the SQLJ translator to regenerate the profile.</p>
<p>Profile base names are generated similarly to the profile-keys class name. They are fully qualified with the package name, followed by the <code>.sqlj</code> file base name, followed by the string:</p>
<pre>_SJProfile<span class="italic">n</span>
</pre>
<p>Where <code><span class="codeinlineitalic">n</span></code> is a unique number, starting with 0, for each profile generated for a particular <code>.sqlj</code> input file.</p>
<p>Again using the example of the <code>Foo.sqlj</code> input file, if two profiles are generated, then they will have the following base names (presuming no package):</p>
<pre>Foo_SJProfile0
Foo_SJProfile1
</pre>
<p>If <code>Foo.sqlj</code> is in the <code>a.b</code> package, then the profile base names will be:</p>
<pre>a.b.Foo_SJProfile0
a.b.Foo_SJProfile1
</pre>
<p>Physically, a profile exists as a Java serialized object contained within a resource file. Resource files containing profiles use the <code>.ser</code> extension and are named according to the base name of the profile (excluding package names). Resource files for the two previously mentioned profiles will be named as follows:</p>
<pre>Foo_SJProfile0.ser
Foo_SJProfile1.ser
</pre>
<p>Or, they will be named <code>Foo_SJProfile0.class</code> and <code>Foo_SJProfile1.class</code> if you enable the <code>-ser2class</code> option. If you choose this option, then the conversion to <code>.class</code> takes place <span class="italic">after</span> the customization step.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1007976">&#34;Conversion of .ser File to .class File (-ser2class)&#34;</a></div>
<p>The location of these files depends on how the SQLJ <code>-d</code> option is set, which determines where all generated <code>.ser</code> and <code>.class</code> files are placed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1006835">&#34;Output Directory for Generated .ser and .class Files (-d)&#34;</a></div>
<p class="subhead2"><a id="JSQLJ708"></a>More <a id="sthref783"></a><a id="sthref784"></a>About Generated Calls to SQLJ Run Time</p>
<p>When <code>#sql</code> statements are replaced by calls to the JDBC driver (for Oracle-specific code generation) or to the SQLJ run time (for ISO standard SQLJ code generation), these calls implement the steps in <a href="#CHEFIGGA">Table 9-1</a>.</p>
<div id="JSQLJ709" class="tblhruleformal">
<p class="titleintable"><a id="sthref785"></a><a id="CHEFIGGA"></a>Table 9-1 Steps for Generated Calls, ISO Standard Versus Oracle-Specific</p>
<table class="cellalignment4024" title="Steps for Generated Calls, ISO Standard Versus Oracle-Specific " summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t11">Steps for ISO Standard Code Generation</th>
<th class="cellalignment4021" id="r1c2-t11">Steps for Oracle Code Generation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t11" headers="r1c1-t11">
<p>Get a SQLJ statement object, using information stored in the associated profile entry.</p>
</td>
<td class="cellalignment4017" headers="r2c1-t11 r1c2-t11">
<p>Get an Oracle JDBC statement object.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r3c1-t11" headers="r1c1-t11">
<p>Bind inputs into the statement, using <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods of the statement object.</p>
</td>
<td class="cellalignment4017" headers="r3c1-t11 r1c2-t11">
<p>Bind inputs using Oracle JDBC statement methods and, if necessary, register output parameters.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r4c1-t11" headers="r1c1-t11">
<p>Execute the statement, using the <code>executeUpdate()</code> or <code>executeQuery()</code> method of the statement object.</p>
</td>
<td class="cellalignment4017" headers="r4c1-t11 r1c2-t11">
<p>Execute the Oracle statement.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r5c1-t11" headers="r1c1-t11">
<p>Create iterator instances, if applicable.</p>
</td>
<td class="cellalignment4017" headers="r5c1-t11 r1c2-t11">
<p>Create iterator instances, if applicable.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r6c1-t11" headers="r1c1-t11">
<p>Retrieve outputs from the statement, using <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods of the statement object.</p>
</td>
<td class="cellalignment4017" headers="r6c1-t11 r1c2-t11">
<p>Retrieve outputs from the statement using appropriate JDBC getter methods.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r7c1-t11" headers="r1c1-t11">
<p>Close the SQLJ statement object (by default, recycling it through the SQLJ statement cache).</p>
</td>
<td class="cellalignment4017" headers="r7c1-t11 r1c2-t11">
<p>Close the JDBC statement object (by default, recycling it through the JDBC statement cache).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>A SQLJ run time uses SQLJ statement objects that are similar to JDBC statement objects, although a particular implementation of SQLJ might or might not use JDBC statement classes directly. SQLJ statement classes add functionality particular to SQLJ. For example:</p>
<ul>
<li>
<p>Standard SQLJ statement objects raise a SQL exception if a null value from the database is to be output to a primitive Java type, such as <code>int</code> or <code>float</code>, which cannot take null values.</p>
</li>
<li>
<p>Oracle SQLJ statement objects allow user-defined object and collection types to be passed to or retrieved from Oracle Database.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1005790"></a>
<div id="JSQLJ710" class="sect2">
<h3 class="sect2">Java <a id="sthref786"></a><a id="sthref787"></a>Compilation</h3>
<p>After code generation, SQLJ invokes the Java compiler to compile the generated <code>.java</code> file. This produces a <code>.class</code> file for each class you defined in your application, including iterator and connection context declarations, as well as a <code>.class</code> file for the generated profile-keys class if you use ISO code generation (and presuming your application uses SQLJ executable statements). Any <code>.java</code> files you specified directly on the SQLJ command line (for type-resolution, for example) are compiled at this time as well.</p>
<p>In the example used in <a href="#i1005656">&#34;Code Generation&#34;</a>, the following <code>.class</code> files would be produced in the appropriate directory (given package information in the source code):</p>
<ul>
<li>
<p><code>Foo.class</code></p>
</li>
<li>
<p><code>Foo_SJProfileKeys.class</code> (ISO code generation only)</p>
</li>
<li>
<p>A <code>.class</code> file for each additional class you defined in <code>Foo.sqlj</code></p>
</li>
<li>
<p>A <code>.class</code> file for each iterator and connection context class you declared in <code>Foo.sqlj</code> (whether public or private)</p>
</li>
</ul>
<p>To ensure that <code>.class</code> files and profiles (if any, whether <code>.ser</code> or <code>.class</code>) will be located in the same directory, SQLJ passes its <code>-d</code> option to the Java compiler. If the <code>-d</code> option is not set, then <code>.class</code> files and profiles are placed in the same directory as the generated <code>.java</code> file, which is placed according to the <code>-dir</code> option setting.</p>
<p>In addition, so that SQLJ and the Java compiler will use the same encoding, SQLJ passes its <code>-encoding</code> option to the Java compiler unless the SQLJ <code>-compiler-encoding-flag</code> is turned off. If the <code>-encoding</code> option is not set, then SQLJ and the compiler will use the setting in the Java virtual machine (JVM) <code>file.encoding</code> property.</p>
<p>By default, SQLJ invokes the standard <code>javac</code> compiler of the Sun Microsystems Java Development Kit (JDK), but other compilers can be used instead. You can request that an alternative Java compiler be used by setting the SQLJ <code>-compiler-executable</code> option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are using the SQLJ <code>-encoding</code> option but using a compiler that does not have an <code>-encoding</code> option, then turn off the SQLJ <code>-compiler-encoding-flag</code>. Otherwise, SQLJ will attempt to pass the <code>-encoding</code> option to the compiler.</div>
<p>For information about SQLJ support for compiler options and compiler-related SQLJ options, refer to the following:</p>
<ul>
<li>
<p><a href="transopt.htm#i1006141">&#34;Option Support for javac&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1006835">&#34;Output Directory for Generated .ser and .class Files (-d)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1006799">&#34;Encoding for Input and Output Source Files (-encoding)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1007817">&#34;Options to Pass to the Java Compiler (-C)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1007924">&#34;Compilation Flag (-compile)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1008581">&#34;Compiler Encoding Support (-compiler-encoding-flag)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1008540">&#34;Name of the Java Compiler (-compiler-executable)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1008601">&#34;Compiler Output File (-compiler-output-file)&#34;</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1005877"></a>
<div id="JSQLJ711" class="sect2">
<h3 class="sect2">Profile <a id="sthref788"></a><a id="sthref789"></a><a id="sthref790"></a>Customization (ISO Code Generation)</h3>
<p>After Java compilation, if you are using ISO standard code generation, then the generated profiles containing information about your embedded SQL instructions are customized, so that your application can work efficiently with your database and use vendor-specific extensions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the default Oracle-specific code generation, then SQLJ produces no profiles and skips the customization step. Your code will support Oracle-specific features through direct calls to Oracle JDBC application programming interfaces (APIs).</div>
<p>If you want to check for the options already set on the customizer, then you can make use of the following command:</p>
<pre>% sqlj -P-print *.ser
</pre>
<p>For more information about profile print option, refer to <a href="profcust.htm#CHDBGFEF">&#34;Specialized Customizer: Profile Print Option (print)&#34;</a>.</p>
<p>To accomplish customization, SQLJ invokes a front end called the customizer harness, which is a Java class that functions as a command-line utility. The harness, in turn, invokes a particular customizer, either the default Oracle customizer or a customizer that you specify through SQLJ option settings.</p>
<p>During customization, profiles are updated in the following ways:</p>
<ul>
<li>
<p>To enable your application to use any vendor-specific database types or features, if applicable</p>
</li>
<li>
<p>To tailor the profiles so that your application is as efficient as possible in using features of the relevant database environment</p>
</li>
</ul>
<p>Without customization, you can access and use only standard JDBC types.</p>
<p>For example, Oracle customizer can update a profile to support a SQL <code>PERSON</code> type that you had defined. You could then use <code>PERSON</code> as you would any other supported data type.</p>
<p>You must also customize with Oracle customizer to use any of the <code>oracle.sql</code> type extensions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware of the following regarding profile customization:
<ul>
<li>
<p>Oracle SQLJ run time and an Oracle JDBC driver will be required by your application whenever you use Oracle customizer during translation, even if you do not use Oracle extensions in your code.</p>
</li>
<li>
<p>The generic SQLJ run time will be used if your application has no customizations, or none suitable for the connection.</p>
</li>
<li>
<p>You can customize previously created profiles by specifying <code>.ser</code> files, or <code>.jar</code> files containing <code>.ser</code> files, on the command line. But you cannot do this in the same running of SQLJ where translations are taking place. You can specify <code>.ser</code>/<code>.jar</code> files to be customized or <code>.sqlj</code>/<code>.java</code> files to be translated, compiled, and customized, but not both categories. For more information about how <code>.jar</code> files are used, refer to <a href="profcust.htm#i635377">&#34;JAR Files for Profiles&#34;</a>.</p>
</li>
</ul>
</div>
<p>For more information about profile customization, refer to <a href="profcust.htm#BHAECCFI">Appendix A, &#34;Customization and Specialized Customizers&#34;</a>.</p>
<p>Also see the following for information about SQLJ options related to profile customization:</p>
<ul>
<li>
<p><a href="transopt.htm#i1008714">&#34;Default Profile Customizer (-default-customizer)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1007864">&#34;Options to Pass to the Profile Customizer (-P)&#34;</a></p>
</li>
<li>
<p><a href="transopt.htm#i1007952">&#34;Profile Customization Flag (-profile)&#34;</a></p>
</li>
<li>
<p><a href="profcust.htm#i634421">&#34;Customization Options and Choosing a Customizer&#34;</a></p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005946"></a>
<div id="JSQLJ712" class="sect1">
<h2 class="sect1">Functionality of Translator Errors, Messages, and Exit Codes</h2>
<p>This section provides an overview of SQLJ translator messages and exit codes. It covers the following topics:</p>
<ul>
<li>
<p><a href="#i1005949">Translator Error, Warning, and Information Messages</a></p>
</li>
<li>
<p><a href="#CHDHGIIE">Translator Status Messages</a></p>
</li>
<li>
<p><a href="#CHDDACDE">Translator Exit Codes</a></p>
</li>
</ul>
<a id="i1005949"></a>
<div id="JSQLJ713" class="sect2">
<h3 class="sect2">Translator <a id="sthref791"></a><a id="sthref792"></a><a id="sthref793"></a><a id="sthref794"></a>Error, Warning, and Information Messages</h3>
<p>There are three major levels of SQLJ messages that you may encounter during the translation phase: error, warning, and information. Warning messages can be further broken down into two levels: nonsuppressible and suppressible. Therefore, there are four message categories (in order of seriousness):</p>
<ol>
<li>
<p>Errors</p>
</li>
<li>
<p>Nonsuppressible warnings</p>
</li>
<li>
<p>Suppressible warnings</p>
</li>
<li>
<p>Information</p>
</li>
</ol>
<p>You can control suppressible warnings and information by using the SQLJ <code>-warn</code> option.</p>
<p>Error messages, prefixed by <code>Error:</code>, indicate that one of the following has been encountered:</p>
<ul>
<li>
<p>A condition that would prevent compilation (for example, the source file contains a public class whose name does not match the base file name)</p>
</li>
<li>
<p>A condition that would result in a run-time error if the code were executed (for example, the code attempts to fetch a <code>VARCHAR</code> into a <code>java.util.Vector</code>, using an Oracle JDBC driver)</p>
</li>
</ul>
<p>If errors are encountered during SQLJ translation, then no output is produced and compilation and customization are not executed.</p>
<p>Nonsuppressible warning messages, prefixed by <code>Warning:</code>, indicate that one of the following has been encountered:</p>
<ul>
<li>
<p>A condition that would probably, but not necessarily, result in a run-time error if the code were executed (for example, a <code>SELECT</code> statement whose output is not assigned to anything)</p>
</li>
<li>
<p>A condition that compromises the ability of SQLJ to verify run-time aspects of your source code (for example, not being able to connect to the database you specify for online checking)</p>
</li>
<li>
<p>A condition that presumably resulted from a coding error or oversight</p>
</li>
</ul>
<p>SQLJ translation will complete if a nonsuppressible warning is encountered, but you should analyze the problem and determine if it should be fixed before running the application. If online checking is specified but cannot be completed, then offline checking is performed instead.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For logistical reasons, the parser that the SQLJ translator uses to analyze SQL operations is not the same top-level SQL parser that will be used at run time. Therefore, errors might occasionally be detected during translation that will not actually cause problems when your application runs. Accordingly, such errors are reported as nonsuppressible warnings, rather than fatal errors.</div>
<p>Suppressible warning messages, also prefixed by <code>Warning:</code>, indicate that there is a problem with a particular aspect of your application, such as portability. An example of this is using an Oracle-specific type, such as <code>oracle.sql.NUMBER</code>, to read from or write to Oracle Database 12<span class="italic">c</span> Release 1 (12.1).</p>
<p>Informational or status messages prefixed by <code>Info:</code> do not indicate an error condition. They merely provide additional information about what occurred during the translation phase.</p>
<p>Suppressible warning and status messages can be suppressed by using the various <code>-warn</code> option flags:</p>
<ul>
<li>
<p><code>cast/nocast</code>: The <code>nocast</code> setting suppresses warnings about possible run-time errors when trying to cast an object type instance to an instance of a subtype.</p>
</li>
<li>
<p><code>precision/noprecision</code>: The <code>noprecision</code> setting suppresses warnings regarding possible loss of data precision during conversion.</p>
</li>
<li>
<p><code>nulls/nonulls</code>: The <code>nonulls</code> setting suppresses warnings about possible run-time errors due to nullable columns or types.</p>
</li>
<li>
<p><code>portable/noportable</code>: The <code>noportable</code> setting suppresses warnings regarding SQLJ code that uses Oracle-specific features or might otherwise be nonstandard and, therefore, not portable to other environments.</p>
</li>
<li>
<p><code>strict/nostrict</code>: The <code>nostrict</code> setting suppresses warnings issued if there are fewer columns in a named iterator than in the selected data that is to populate the iterator.</p>
</li>
<li>
<p><code>verbose/noverbose</code>: The <code>noverbose</code> setting suppresses status messages that are merely informational and do not indicate error or warning conditions.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1007284">&#34;Translator Warnings (-warn)&#34;</a></div>
<p>If you receive warnings during your SQLJ translation, then you can try running the translator again with <code>-warn=none</code> to see if any of the warnings are of the more serious (nonsuppressible) variety.</p>
<p><a href="#CHEFFDGC">Table 9-2</a> summarizes the categories of error and status messages generated by the SQLJ translator.</p>
<div id="JSQLJ714" class="tblhruleformal">
<p class="titleintable"><a id="sthref795"></a><a id="CHEFFDGC"></a>Table 9-2 SQLJ Translator Error Message Categories</p>
<table class="cellalignment4024" title="SQLJ Translator Error Message Categories " summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t17">Message Category</th>
<th class="cellalignment4021" id="r1c2-t17">Prefix</th>
<th class="cellalignment4021" id="r1c3-t17">Indicates</th>
<th class="cellalignment4021" id="r1c4-t17">Suppressed By</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t17" headers="r1c1-t17">
<p>Error</p>
</td>
<td class="cellalignment4017" headers="r2c1-t17 r1c2-t17">
<p><code>Error:</code></p>
</td>
<td class="cellalignment4017" headers="r2c1-t17 r1c3-t17">
<p>Fatal error that will cause compilation failure or run-time failure (translation aborted)</p>
</td>
<td class="cellalignment4017" headers="r2c1-t17 r1c4-t17">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r3c1-t17" headers="r1c1-t17">
<p>Nonsuppressible warning</p>
</td>
<td class="cellalignment4017" headers="r3c1-t17 r1c2-t17">
<p><code>Warning</code>:</p>
</td>
<td class="cellalignment4017" headers="r3c1-t17 r1c3-t17">
<p>Condition that prevents proper translation or might cause run-time failure (translation completed)</p>
</td>
<td class="cellalignment4017" headers="r3c1-t17 r1c4-t17">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r4c1-t17" headers="r1c1-t17">
<p>Suppressible warning</p>
</td>
<td class="cellalignment4017" headers="r4c1-t17 r1c2-t17">
<p><code>Warning</code>:</p>
</td>
<td class="cellalignment4017" headers="r4c1-t17 r1c3-t17">
<p>Problem regarding a particular aspect of your application (translation completed)</p>
</td>
<td class="cellalignment4017" headers="r4c1-t17 r1c4-t17">
<p><code>-warn</code> option flags: <code>nocast noprecision nonulls noportable nostrict</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r5c1-t17" headers="r1c1-t17">
<p>Informational/status message</p>
</td>
<td class="cellalignment4017" headers="r5c1-t17 r1c2-t17">
<p><code>Info</code>:</p>
</td>
<td class="cellalignment4017" headers="r5c1-t17 r1c3-t17">
<p>Information regarding the translation process</p>
</td>
<td class="cellalignment4017" headers="r5c1-t17 r1c4-t17">
<p><code>-warn</code> option flag: <code>noverbose</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="CHDHGIIE"></a>
<div id="JSQLJ715" class="sect2">
<h3 class="sect2">Translator <a id="sthref796"></a><a id="sthref797"></a>Status Messages</h3>
<p>In addition to the error, warning, and information messages, SQLJ can produce status messages throughout all phases of SQLJ operation: translation, compilation, and customization. Status messages are produced as each file is processed and at each phase of SQLJ operation.</p>
<p>You can control status messages by using the SQLJ <code>-status</code> option.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1007388">&#34;Real-Time Status Messages (-status)&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDDACDE"></a>
<div id="JSQLJ716" class="sect2">
<h3 class="sect2">Translator <a id="sthref798"></a><a id="sthref799"></a>Exit Codes</h3>
<p>The following exit codes are returned by the SQLJ translator to the operating system upon completion:</p>
<ul>
<li>
<p><code>0</code>: No error in execution</p>
</li>
<li>
<p><code>1</code>: Error in SQLJ execution</p>
</li>
<li>
<p><code>2</code>: Error in Java compilation</p>
</li>
<li>
<p><code>3</code>: Error in profile customization</p>
</li>
<li>
<p><code>4</code>: Error in class instrumentation, the optional mapping of line numbers from your <code>.sqlj</code> source file to the resulting <code>.class</code> file</p>
</li>
<li>
<p><code>5</code>: Error in <code>ser2class</code> conversion, the optional conversion of profile files from <code>.ser</code> files to <code>.class</code> files</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If you issue the <code>-help</code> or <code>-version</code> option, then the SQLJ exit code is <code>0</code>.</p>
</li>
<li>
<p>If you run SQLJ without specifying any files to process, then SQLJ issues help output and returns exit code <code>1</code>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006090"></a>
<div id="JSQLJ717" class="sect1">
<h2 class="sect1">SQLJ <a id="sthref800"></a>Run Time</h2>
<p>This section presents information about Oracle SQLJ run time, which is a thin layer of pure Java code that runs above the JDBC driver.</p>
<p>If you use the default Oracle-specific code generation, then the SQLJ run-time layer becomes even thinner, with a run time subset being used in conjunction with an Oracle JDBC driver. Most of the run-time functionality is compiled directly into Oracle JDBC calls. You cannot use a non-Oracle JDBC driver.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="keyprog.htm#i1006746">&#34;Oracle-Specific Code Generation (No Profiles)&#34;</a></div>
<p>When SQLJ translates SQLJ source code using ISO standard code generation, embedded SQL commands in your Java application are replaced by calls to the SQLJ run time. Run-time classes act as wrappers for equivalent JDBC classes, providing special SQLJ functionality. When the end user runs the application, the SQLJ run time acts as an intermediary, reading information about your SQL operations from your profile and passing instructions along to the JDBC driver.</p>
<p>Generally speaking, however, a SQLJ run time can be implemented to use any JDBC driver or vendor-proprietary means of accessing the database. Oracle SQLJ run time requires a JDBC driver, but can use any standard JDBC driver. To use Oracle-specific data types and features, however, you must use an Oracle JDBC driver. For the purposes of this document, it is generally assumed that you are using Oracle Database and one of Oracle JDBC drivers.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For ISO standard SQLJ code generation, Oracle SQLJ run time and an Oracle JDBC driver will be required by your application whenever you use Oracle customizer during translation, even if you do not use Oracle extensions in your code. The generic SQLJ run time will be used if your application has no customizations, or none suitable for the connection.</div>
<div id="JSQLJ718" class="sect2"><a id="sthref801"></a>
<h3 class="sect2">SQLJ Run Time <a id="sthref802"></a>Packages</h3>
<p>Oracle SQLJ run time includes packages you will likely import and use directly, and others that are used only indirectly.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
These packages are included in the run-time libraries <code>runtime12</code>, <code>runtime12ee</code>, and <code>runtime</code>.</div>
<p class="subhead2"><a id="JSQLJ719"></a>Packages Used Directly</p>
<p>The packages containing classes that you can import and use directly in your application are:</p>
<ul>
<li>
<p><code>sqlj.runtime</code></p>
<p>This package includes the <code>ExecutionContext</code> class, <code>ConnectionContext</code> interface, <code>ConnectionContextFactory</code> interface, <code>ResultSetIterator</code> interface, <code>ScrollableResultSetIterator</code> interface, and wrapper classes for streams (<code>BinaryStream</code> and <code>CharacterStream</code>, as well as the deprecated <code>AsciiStream</code> and <code>UnicodeStream</code>).</p>
<p>Interfaces and abstract classes in this package are implemented by classes in the <code>sqlj.runtime.ref</code> or <code>oracle.sqlj.runtime</code> package or by classes generated by the SQLJ translator.</p>
</li>
<li>
<p><code>sqlj.runtime.ref</code></p>
<p>The classes in this package implement interfaces and abstract classes in the <code>sqlj.runtime</code> package. You will likely use the <code>sqlj.runtime.ref.DefaultContext</code> class, which is used to specify your default connection and create default connection context instances. The other classes in this package are used internally by SQLJ in defining classes during code generation, such as iterator classes and connection context classes that you declare in your SQLJ code.</p>
</li>
<li>
<p><code>oracle.sqlj.runtime</code></p>
<p>This package contains the <code>Oracle</code> class that you can use to instantiate the <code>DefaultContext</code> class and establish your default connection. It also contains Oracle-specific run-time classes used by the Oracle implementation of SQLJ, including functionality to convert to and from Oracle type extensions.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Packages whose names begin with <code>oracle</code> are for Oracle-specific SQLJ features.</div>
<p class="subhead2"><a id="JSQLJ720"></a>Packages Used Indirectly</p>
<p>The packages containing classes that are for internal use by SQLJ are:</p>
<ul>
<li>
<p><code>sqlj.runtime.profile</code></p>
<p>This package contains interfaces and abstract classes that define what SQLJ profiles look like (applicable only for ISO standard code generation). This includes the <code>EntryInfo</code> and <code>TypeInfo</code> classes. Each entry in a profile is described by an <code>EntryInfo</code> object, where a profile entry corresponds to a SQL operation in your application. Each parameter in a profile entry is described by a <code>TypeInfo</code> object.</p>
<p>The interfaces and classes in this package are implemented by classes in the <code>sqlj.runtime.profile.ref</code> package.</p>
</li>
<li>
<p><code>sqlj.runtime.profile.ref</code></p>
<p>This package contains classes that implement the interfaces and abstract classes of the <code>sqlj.runtime.profile</code> package and are used internally by the SQLJ translator in defining profiles (for ISO standard code generation only). It also provides the default JDBC-based run-time implementation.</p>
</li>
<li>
<p><code>sqlj.runtime.error</code></p>
<p>This package, used internally by SQLJ, contains resource files for all generic (not Oracle-specific) error messages that can be generated by the SQLJ translator.</p>
</li>
<li>
<p><code>oracle.sqlj.runtime.error</code></p>
<p>This package, used internally by SQLJ, contains resource files for all Oracle-specific error messages that can be generated by the SQLJ translator.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="JSQLJ721" class="sect2"><a id="sthref803"></a>
<h3 class="sect2">Categories <a id="sthref804"></a><a id="sthref805"></a>of Run-Time Errors</h3>
<p>Run-time errors can be generated by any of the following:</p>
<ul>
<li>
<p>SQLJ run time</p>
</li>
<li>
<p>JDBC driver</p>
</li>
<li>
<p>RDBMS</p>
</li>
</ul>
<p>In any of these cases, a SQL exception is generated as an instance of the <code>java.sql.SQLException</code> class, or as a subclass, such as <code>sqlj.runtime.SQLNullException</code>.</p>
<p>Depending on where the error came from, there might be meaningful information you can retrieve from an exception using the <code>getSQLState()</code>, <code>getErrorCode()</code>, and <code>getMessage()</code> methods. SQLJ errors, for example, include meaningful SQL states and messages.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="keyprog.htm#i1006260">&#34;Retrieving SQL States and Error Codes&#34;</a></div>
<p>If errors are generated by Oracle JDBC driver or RDBMS at run time, look at the prefix and consult the appropriate documentation:</p>
<ul>
<li>
<p><a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for JDBC errors</p>
</li>
<li>
<p>Oracle error message documentation for RDBMS errors (see <a href="preface.htm#i970619">&#34;Related Documents&#34;</a>)</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006168"></a>
<div id="JSQLJ722" class="sect1">
<h2 class="sect1">Globalization <a id="sthref806"></a><a id="sthref807"></a>Support in the Translator and Run Time</h2>
<p>The Oracle SQLJ implementation uses the Java built-in capabilities for globalization support. This section discusses the following:</p>
<ul>
<li>
<p>Basics of SQLJ support for globalization and native character encoding, starting with background information covering some of the implementation details of character encoding and language support in the Oracle implementation</p>
</li>
<li>
<p>Options available through the SQLJ command line that enable you to adjust your Oracle Globalization Support configuration</p>
</li>
<li>
<p>Extended Oracle globalization support</p>
</li>
<li>
<p>Relevant manipulation outside of SQLJ for globalization support</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some prior knowledge of Oracle Globalization Support is assumed, particularly regarding character encoding and locales. For information, refer to the <a class="olink NLSPG" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDECGHJ">Character Encoding and Language Support</a></p>
</li>
<li>
<p><a href="#CHDCBDIH">SQLJ and Java Settings for Character Encoding and Language Support</a></p>
</li>
<li>
<p><a href="#i1007311">SQLJ Extended Globalization Support</a></p>
</li>
<li>
<p><a href="#CHDBHEHI">Manipulation Outside of SQLJ for Globalization Support</a></p>
</li>
</ul>
<a id="CHDECGHJ"></a>
<div id="JSQLJ723" class="sect2">
<h3 class="sect2">Character E<a id="sthref808"></a>ncoding and Language Support</h3>
<p>There are two main areas of SQLJ globalization support:</p>
<ul>
<li>
<p>Character encoding</p>
<p>There are three parts to this:</p>
<ul>
<li>
<p>Character encoding for reading and generating source files during SQLJ translation</p>
</li>
<li>
<p>Character encoding for generating error and status messages during SQLJ translation</p>
</li>
<li>
<p>Character encoding for generating error and status messages when the application runs</p>
</li>
</ul>
</li>
<li>
<p>Language support</p>
<p>This determines which translations of error and status message lists are used when SQLJ outputs messages to the user, either during SQLJ translation or at SQLJ run time.</p>
</li>
</ul>
<p>Globalization support at run time is transparent to the user, presuming your SQLJ source code and SQL character data use only characters that are within the database character set. SQL character data is transparently mapped into and out of Unicode.</p>
<p>Note that for multi-language applications, it is advisable to use one of the following options:</p>
<ul>
<li>
<p>Use a database whose character set supports Unicode.</p>
</li>
<li>
<p>Even if your database character set does not support Unicode, specify that the national language character set supports Unicode. (Refer to the <a class="olink NLSPG" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a>.) In this case, you will typically use the SQLJ Unicode character types described in <a href="#i1007311">&#34;SQLJ Extended Globalization Support&#34;</a>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The SQLJ translator fully supports Unicode 2.0 and Java Unicode escape sequences. However, the SQLJ command-line utility does not support Unicode escape sequences. You can use only native characters supported by the operating system. Command-line options requiring Unicode escape sequences can be entered in a SQLJ properties file instead, because properties files do support Unicode escape sequences.</p>
</li>
<li>
<p>Encoding and conversion of characters in your embedded SQL operations and characters read or written to the database, are handled by JDBC directly. SQLJ does not play a role in this. If online semantics-checking is enabled during translation, however, then you will be warned if there are characters within the text of your SQL data manipulation language (DML) operations that might not be convertible to the database character set.</p>
</li>
<li>
<p>For information about JDBC globalization support functionality, refer to the <a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a>.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="JSQLJ724"></a>Overview of <a id="sthref809"></a><a id="sthref810"></a>Character Encoding</p>
<p>The character encoding setting for source files tells SQLJ two things:</p>
<ul>
<li>
<p>How source code is represented in <code>.sqlj</code> and <code>.java</code> input files that the SQLJ translator must read</p>
</li>
<li>
<p>How SQLJ should represent source code in <code>.java</code> output files that it generates</p>
</li>
</ul>
<p>By default, SQLJ uses the encoding indicated by the JVM <code>file.encoding</code> property. If your source files use other encodings, then you must indicate this to SQLJ so that appropriate conversion can be performed.</p>
<p>Use the SQLJ <code>-encoding</code> option to accomplish this. SQLJ also passes the <code>-encoding</code> setting to the compiler for it to use in reading <code>.java</code> files, unless the SQLJ <code>-compiler-encoding-flag</code> is off.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not alter the <code>file.encoding</code> system property to specify encodings for source files. This might impact other aspects of your Java operation and might offer only a limited number of encodings, depending on platform or operating system considerations.</div>
<p>The system character-encoding setting also determines how SQLJ error and status messages are represented when output to the user, either during translation or during run time when the end user is running the application. This is set according to the <code>file.encoding</code> property and is unaffected by the SQLJ <code>-encoding</code> option.</p>
<p>For source file encoding, you can use the <code>-encoding</code> option to specify any character encoding supported by your Java environment. If you are using the Sun Microsystems JDK, then these are listed in the <code>native2ascii</code> documentation, which you can find at the following Web site:</p>
<pre><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/native2ascii.html">http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/native2ascii.html</a>
</pre>
<p>Dozens of encodings are supported by the Sun Microsystems JDK. These include <code>8859_1</code> through <code>8859_9</code> (ISO Latin-1 through ISO Latin-9), <code>JIS</code> (Japanese), <code>SJIS</code> (shift-JIS, Japanese), and <code>UTF8</code>.</p>
<p class="subhead2"><a id="JSQLJ725"></a>Character Encoding Notes</p>
<p>Be aware of the following:</p>
<ul>
<li>
<p>A character that is not representable in the encoding used, for either messages or source files, can always be represented as a Java Unicode escape sequence. This is of the form <code>\uHHHH</code>, where each H is a hexadecimal digit.</p>
</li>
<li>
<p>As a <code>.sqlj</code> source file is read and processed during translation, error messages quote source locations based on character position (not byte position) in the input encoding.</p>
</li>
<li>
<p>Encoding settings, either set through the SQLJ <code>-encoding</code> option or the Java <code>file.encoding</code> setting, do not apply to Java properties files, such as <code>sqlj.properties</code> and <code>connect.properties</code>. Properties files always use the encoding <code>8859_1</code>. This is a feature of Java in general, not SQLJ in particular. However, you can use Unicode escape sequences in a properties file. You can use the <code>native2ascii</code> utility to determine escape sequences.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006518">&#34;Using native2ascii for Source File Encoding&#34;</a></div>
</li>
</ul>
<p class="subhead2"><a id="JSQLJ726"></a>Overview of <a id="sthref811"></a>Language Support</p>
<p>SQLJ error and status reporting, either during translation or during run time, uses the Java locale setting in the JVM <code>user.language</code> property. Users typically do not have to alter this setting.</p>
<p>Language support is implemented through message resources that use key/value pairs. For example, where an English-language resource has a key/value pair of <code>&#34;OkKey&#34;, &#34;Okay&#34;</code>, a German-language resource has a key/value pair of <code>&#34;OkKey&#34;, &#34;Gut&#34;</code>. The locale setting determines the message resources used.</p>
<p>SQLJ supports locale settings of <code>en</code> (English), <code>de</code> (German), <code>fr</code> (French), and <code>ja</code> (Japanese).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Java locale settings can support country and variant extensions in addition to language extensions. For example, consider <code>ErrorMessages_de_CH_var1</code>, where <code>CH</code> is the Swiss country extension of German and <code>var1</code> is an additional variant. SQLJ, however, currently supports only language extensions (<code>de</code> in this example), ignoring country and variant extensions.</div>
</div>
<!-- class="sect2" -->
<a id="CHDCBDIH"></a>
<div id="JSQLJ727" class="sect2">
<h3 class="sect2">SQLJ and Ja<a id="sthref812"></a>va Settings for Character Encoding and Language Support</h3>
<p>The Oracle SQLJ implementation provides syntax that enables you to set the following:</p>
<ul>
<li>
<p>The character encoding used by the SQLJ translator and Java compiler in representing source code</p>
<p>Use the SQLJ <code>-encoding</code> option.</p>
</li>
<li>
<p>The character encoding used by the SQLJ translator and run time in representing error and status messages</p>
<p>Use the SQLJ <code>-J</code> prefix to set the Java <code>file.encoding</code> property.</p>
</li>
<li>
<p>The locale used by the SQLJ translator and run time for error and status messages</p>
<p>Use the SQLJ <code>-J</code> prefix to set the Java <code>user.language</code> property.</p>
</li>
</ul>
<p class="subhead2"><a id="JSQLJ728"></a>Setting <a id="sthref813"></a><a id="sthref814"></a>Character Encoding for Source Code</p>
<p>Use the SQLJ <code>-encoding</code> option to determine the character encoding used in representing <code>.sqlj</code> files read by the translator, <code>.java</code> files generated by the translator, and <code>.java</code> files read by the compiler. The option setting is passed by SQLJ to the compiler, unless the SQLJ <code>-compiler-encoding-flag</code> is off.</p>
<p>This option can be set on the command line or <code>SQLJ_OPTIONS</code> environment variable, as in the following example:</p>
<pre>-encoding=SJIS
</pre>
<p>Alternatively, you can set it in a SQLJ properties file, as follows:</p>
<pre>sqlj.encoding=SJIS
</pre>
<p>If the encoding option is not set, then both the translator and compiler will use the encoding specified in the JVM <code>file.encoding</code> property. This can also be set through the SQLJ command line.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1006799">&#34;Encoding for Input and Output Source Files (-encoding)&#34;</a> and <a href="transopt.htm#i1008581">&#34;Compiler Encoding Support (-compiler-encoding-flag)&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your <code>-encoding</code> is to be set routinely to the same value, then it is most convenient to specify it in a properties file, as in the second example.</div>
<p class="subhead2"><a id="i1006306"></a><a id="JSQLJ729"></a>Setting <a id="sthref815"></a><a id="sthref816"></a><a id="sthref817"></a><a id="sthref818"></a>Character Encoding and Locale for SQLJ Messages</p>
<p>Character encoding and locale for SQLJ error and status messages produced, during both translation and run time, are determined by the Java <code>file.encoding</code> and <code>user.language</code> properties. Although it is typically not necessary, you can set these and other JVM properties in the SQLJ command line by using the SQLJ <code>-J</code> prefix. Options marked by this prefix are passed to the JVM.</p>
<p>Set the character encoding as in the following example, which specifies shift-JIS Japanese character encoding:</p>
<pre>-J-Dfile.encoding=SJIS
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only a limited number of encodings might be available, depending on platform or operating system considerations.</div>
<p>Set the locale as in the following example (which specifies Japanese locale):</p>
<pre>-J-Duser.language=ja
</pre>
<p>The <code>-J</code> prefix can be used on the command line or <code>SQLJ_OPTIONS</code> environment variable only. It cannot be used in a properties file, because properties files are read after the JVM is invoked.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If your <code>file.encoding</code>, <code>user.language</code>, or any other Java property is to be set routinely to the same value, it is most convenient to specify <code>-J</code> settings in the <code>SQLJ_OPTIONS</code> environment variable. This way, you do not have to repeatedly specify them on the command line. The syntax is essentially the same as on the command line. For more information, refer to <a href="transopt.htm#i1006487">&#34;SQLJ_OPTIONS Environment Variable for Option Settings&#34;</a>.</p>
</li>
<li>
<p>Remember that if you do not set the SQLJ <code>-encoding</code> option, then setting <code>file.encoding</code> will affect encoding for source files as well as error and status messages.</p>
</li>
<li>
<p>Be aware that altering the <code>file.encoding</code> property might have unforeseen consequences on other aspects of your Java operations. Also, any new setting must be compatible with your operating system.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#BCEHDFAE">&#34;Command-Line Syntax and Operations&#34;</a> and <a href="transopt.htm#i1007773">&#34;Options to Pass to the Java Virtual Machine (-J)&#34;</a></div>
<p class="subhead2"><a id="JSQLJ730"></a>SQLJ <a id="sthref819"></a><a id="sthref820"></a><a id="sthref821"></a>Command-Line Example: Setting Encoding and Locale</p>
<p>Following is a complete SQLJ command line, including JVM <code>file.encoding</code> and <code>user.language</code> settings:</p>
<pre>% sqlj -encoding=8859_1 -J-Dfile.encoding=SJIS -J-Duser.language=ja Foo.sqlj
</pre>
<p>This example uses the SQLJ <code>-encoding</code> option to specify <code>8859_1</code> (Latin-1) for source code representation during SQLJ translation. This encoding is used by the translator in reading the <code>.sqlj</code> input file and in generating the <code>.java</code> output file. The encoding is then passed to the Java compiler to be used in reading the generated <code>.java</code> file. The <code>-encoding</code> option, when specified, is always passed to the Java compiler unless the SQLJ <code>-compiler-encoding-flag</code> is disabled.</p>
<p>For error and status messages output during translation of <code>Foo.sqlj</code>, the SQLJ translator uses the <code>SJIS</code> encoding and the <code>ja</code> locale.</p>
</div>
<!-- class="sect2" -->
<a id="i1007311"></a>
<div id="JSQLJ731" class="sect2">
<h3 class="sect2">SQLJ Extended Globalization Sup<a id="sthref822"></a>port</h3>
<p>The Oracle SQLJ implementation includes support for Java types (Unicode character types) derived from existing character and stream types that convey expected usage for globalization. In SQLJ it is not possible to use JDBC statement or result set methods directly that otherwise serve the purpose of globalization support. If you are interested in information about those methods, refer to the <a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a></p>
<p>If the database natively supports Unicode, then the types described in <a href="#CHEBDEFG">&#34;Java Types for Globalization Support&#34;</a> are unnecessary. In this case, globalization support will be handled transparently. It is when the database does not natively support Unicode, but has a national language character set that does support Unicode, that you will typically use these types (for columns that use the national language character set).</p>
<p class="subhead2"><a id="CHEBDEFG"></a><a id="JSQLJ732"></a>Java Types for Globaliza<a id="sthref823"></a><a id="sthref824"></a><a id="sthref825"></a><a id="sthref826"></a><a id="sthref827"></a>tion Support</p>
<p>The Oracle SQLJ implementation provides a number of Java types for globalization support. <a href="#CHEBEAGE">Table 9-3</a> notes the correspondence between these globalization support types and general-use JDBC and SQLJ character and stream types. Each globalization support type, except for <code>NString</code>, is a subclass of its corresponding JDBC or SQLJ type.</p>
<div id="JSQLJ733" class="tblformal">
<p class="titleintable"><a id="sthref828"></a><a id="CHEBEAGE"></a>Table 9-3 JDBC and SQLJ Types and Corresponding Globalization Types</p>
<table class="cellalignment4020" title="JDBC and SQLJ Types and Corresponding Globalization Types " summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t35">JDBC and SQLJ Types</th>
<th class="cellalignment4021" id="r1c2-t35">Globali<a id="sthref829"></a>zation Support Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t35" headers="r1c1-t35">
<p><span class="bold">JDBC types:</span></p>
</td>
<td class="cellalignment4017" headers="r2c1-t35 r1c2-t35">
<p>&nbsp;</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r3c1-t35" headers="r1c1-t35">
<p><code>oracle.sql.CHAR</code></p>
</td>
<td class="cellalignment4017" headers="r3c1-t35 r1c2-t35">
<p><code>oracle.sql.NCHAR</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r4c1-t35" headers="r1c1-t35">
<p><code>java.lang.String</code></p>
</td>
<td class="cellalignment4017" headers="r4c1-t35 r1c2-t35">
<p><code>oracle.sql.NString</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r5c1-t35" headers="r1c1-t35">
<p><code>oracle.sql.CLOB</code></p>
</td>
<td class="cellalignment4017" headers="r5c1-t35 r1c2-t35">
<p><code>oracle.sql.NCLOB</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r6c1-t35" headers="r1c1-t35">
<p><span class="bold">SQLJ types:</span></p>
</td>
<td class="cellalignment4017" headers="r6c1-t35 r1c2-t35">
<p>&nbsp;</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r7c1-t35" headers="r1c1-t35">
<p><code>sqlj.runtime.CharacterStream</code></p>
</td>
<td class="cellalignment4017" headers="r7c1-t35 r1c2-t35">
<p><code>oracle.sqlj.runtime.NcharCharacterStream</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r8c1-t35" headers="r1c1-t35">
<p><code>sqlj.runtime.AsciiStream</code></p>
<p>(Deprecated; use <code>CharacterStream</code>.)</p>
</td>
<td class="cellalignment4017" headers="r8c1-t35 r1c2-t35">
<p><code>oracle.sqlj.runtime.NcharAsciiStream</code></p>
<p>(Deprecated; use <code>NcharCharacterStream</code>.)</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r9c1-t35" headers="r1c1-t35">
<p><code>sqlj.runtime.UnicodeStream</code></p>
<p>(Deprecated; use <code>CharacterStream</code>.)</p>
</td>
<td class="cellalignment4017" headers="r9c1-t35 r1c2-t35">
<p><code>oracle.sqlj.runtime.NcharUnicodeStream</code></p>
<p>(Deprecated; use <code>NcharCharacterStream</code>.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>In situations where your application must handle national language character strings, either inserting them into or selecting them from national language character set columns, use the globalization support types instead of the corresponding general-use types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>All globalization support types add automatic registration of intended usage for <code>IN</code> and <code>OUT</code> parameters, but are otherwise identical in usage to the corresponding JDBC or SQLJ type (including constructors).</p>
</li>
<li>
<p>Use of globalization support types is unnecessary in iterator columns, because the underlying network protocol supports national language characters implicitly for the underlying result sets.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="JSQLJ734"></a><a id="sthref830"></a>NString Class Usage and Notes</p>
<p>The <code>oracle.sql.CHAR</code> class, and therefore its <code>NCHAR</code> subclass, provides only constructors that require explicit knowledge of the database character set. Therefore, the <code>oracle.sql.NString</code> class, a wrapper for <code>java.lang.String</code>, is preferable in most circumstances. The <code>NString</code> class provides simpler constructors and ensures that the national language character form of use is registered with the JDBC driver.</p>
<p>Following are the key <code>NString</code> methods:</p>
<ul>
<li>
<p><code>NString(String)</code>: This constructor creates an <code>NString</code> instance from an existing <code>String</code> instance.</p>
</li>
<li>
<p><code>String toString()</code>: This method returns the underlying <code>String</code> instance.</p>
</li>
<li>
<p><code>String getString()</code>: This method also returns the underlying <code>String</code> instance.</p>
</li>
</ul>
<p>The <code>toString()</code> method enables you to use the <code>NString</code> instance in string concatenation expressions (such as <code>&#34;a&#34;+b</code>, where <code>b</code> is a string). The <code>getString()</code> method, provided in the <code>CHAR</code> superclass, is supported as well for uniformity. In addition, the member methods of the <code>String</code> class are carried over to the <code>NString</code> wrapper class to enable you to write more concise code.</p>
<p>In SQLJ applications, for versions prior to Oracle Database 11<span class="italic">g</span>, you must use host variables of the <code>NString</code> type to bind columns of the <code>NCHAR</code> type. For example, consider the following table:</p>
<pre>CREATE TABLE Tbl1 (
       ColA  CHAR
       NColB NCHAR
)
</pre>
<p>To insert a row in this table through a SQLJ application, use a code similar to the following:</p>
<pre>...
String v_a = &#34;\uFF5E&#34;;
NString v_nb = &#34;\uFF5E&#34;;
#sql {INSERT INTO Tbl1 (ColA, NColB) VALUES (:v_a, :v_nb)};
...
</pre>
<p>Since Oracle Database 11<span class="italic">g</span> Release 1, SQLJ applications can use <code>String</code> variables to bind <code>NCHAR</code> columns. Therefore, the preceding example can be rewritten as follows:</p>
<pre>...
String v_a = &#34;\uFF5E&#34;;
String v_nb = &#34;\uFF5E&#34;;
#sql {INSERT INTO Tbl1 (ColA, NColB) VALUES (:v_a, :v_nb)};
...
</pre>
<p>However, if you want to use <code>String</code> host variable to bind to <code>NCHAR</code> columns, then you must translate the SQLJ file with the <code>-<a id="sthref831"></a>ncharconv</code> SQLJ translator option, as follows:</p>
<pre>sqlj -ncharconv [-<span class="italic">options</span>] app.sqlj
</pre>
<p>In the preceding command, <code><span class="codeinlineitalic">options</span></code> can be other SQLJ options and <code>app.sqlj</code> is the SQLJ file that contains the code.</p>
<p>When this option is used, the <a id="sthref832"></a><code>setFormOfUse</code> method will be generated for all binds to character columns, that is, <code>CHAR</code> or <code>NCHAR</code> columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the SQLJ file is compiled with the <code>-ncharconv</code> option, the <code>setFormOfUse</code> method is used in the generated code for <code>codegen=oracle</code>. For <code>codegen=iso</code>, this option information is passed to Oracle SQLJ run time, which internally uses <code>SetFormOfUse</code> for bind at run time.</div>
<p>The SQLJ application can use <code>String</code> host variable to retrieve data from the server without using the <code>-ncharconv</code> option, because the information about the column type is fetched at the client-side and JDBC internally sets the form for the appropriate columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
There may be a small difference in the performance when using the <code>-ncharconv</code> option, depending on the database character set and national charster set and the number of character columns in the table.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#CHDCBDCA">&#34;NCHAR Bind (-ncharconv)&#34;</a></div>
<p class="subhead2"><a id="JSQLJ735"></a>Globalization Support Examples</p>
<p>The following examples show use of the <code>NString</code> class:</p>
<ul>
<li>
<p><code>NString</code> as <code>IN</code> argument</p>
<p>This example uses an <code>NString</code> instance as an input parameter to the database.</p>
<pre>import oracle.sql.NString;
...
NString nc_name = new NString(&#34;Name with strange characters&#34;);
#sql { update PEOPLE
       set city = :(new NString(&#34;\ufff2&#34;)), name = :nc_name
       where num= :n };
...
</pre></li>
<li>
<p><a id="i1006452"></a><code>NString</code> as <code>OUT</code> argument</p>
<p>This example uses an <code>NString</code> instance as an output parameter from the database.</p>
<pre>import oracle.sql.NString;
...
NString nstr;
#sql { call foo(:out nstr) };
System.out.println(&#34;Result is: &#34;+nstr);
// or, explicitly: System.out.println(&#34;Result is: &#34;+nstr.toString());
...
</pre></li>
<li>
<p><code>NString</code> as <code>Result Set</code> column</p>
<p>This example uses the <code>NString</code> type for an iterator column. Such usage is superfluous, given that the underlying network protocol supports national language characters implicitly, but harmless. This example also shows use of one of the <code>String</code> methods, <code>substring()</code>, that is carried over to <code>NString</code>.</p>
<pre>import oracle.sql.NString;
import oracle.sql.NCLOB;
...
#sql iterator NIter(NString title, NCLOB article);

NIter nit;
#sql nit = { SELECT article, title FROM page_table };
while (nit.next())
{
  System.out.println(&#34;&lt;TITLE&gt;&#34;+nit.title()+&#34;&lt;/TITLE&gt;&#34;);
  ...
  nit.article().substring(0, 1000); ...
}
</pre></li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using the <code>NCHAR</code> type instead of the <code>NString</code> type for the preceding examples requires the following changes:
<ul>
<li>
<p>Use the appropriate <code>NCHAR</code> constructor. <code>NCHAR</code> constructors mirror <code>CHAR</code> constructors, such as the following:</p>
<pre>NCHAR(String str, oracle.sql.CharacterSet charset)
</pre></li>
<li>
<p>Although you have the option of using either <code>toString()</code> or <code>getString()</code> to retrieve the underlying <code>String</code> instance from an <code>NString</code> instance, for an <code>NCHAR</code> instance you must use the <code>getString()</code> method. When using the <code>NString</code> type, the <code>toString()</code> method is used automatically for string concatenation, such as in <a href="#i1006452">&#34;<code>NString</code> as <code>OUT</code> argument&#34;</a>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDBHEHI"></a>
<div id="JSQLJ736" class="sect2">
<h3 class="sect2">Mani<a id="sthref833"></a>pulation Outside of SQLJ for Globalization Support</h3>
<p>This section discusses ways to manipulate your Oracle Globalization Support configuration outside of SQLJ.</p>
<p class="subhead2"><a id="JSQLJ737"></a>Setting <a id="sthref834"></a><a id="sthref835"></a><a id="sthref836"></a>Encoding and Locale at Application Run Time</p>
<p>As with any end user running any Java application, those running your SQLJ application can specify JVM properties, such as <code>file.encoding</code> and <code>user.language</code> directly, as they invoke the JVM to run your application. This determines the encoding and locale used for message output as your application executes.</p>
<p>They can accomplish this as in the following example:</p>
<pre>% java -Dfile.encoding=SJIS -Duser.language=ja Foo
</pre>
<p>This will use <code>SJIS</code> encoding and Japanese locale.</p>
<p class="subhead2"><a id="JSQLJ738"></a>Using API to <a id="sthref837"></a><a id="sthref838"></a>Determine Java Properties</p>
<p>In Java code, you can determine values of Java properties by using the <code>java.lang.System.getProperty()</code> method, specifying the appropriate property. For example:</p>
<pre>public class Settings
{
   public static void main (String[] args)
   {
      System.out.println(&#34;Encoding: &#34; + System.getProperty(&#34;file.encoding&#34;)
                       + &#34;, Language: &#34; + System.getProperty(&#34;user.language&#34;));
   }
}
</pre>
<p>You can compile this and run it as a standalone utility.</p>
<p>There is also a <code>getProperties()</code> method that returns the values of all properties, but this will raise a security exception if you try to use it in code that runs in the server.</p>
<p class="subhead2"><a id="i1006518"></a><a id="JSQLJ739"></a>Using <a id="sthref839"></a><a id="sthref840"></a><a id="sthref841"></a>native2ascii for Source File Encoding</p>
<p>If you are using a Sun Microsystems JDK, then there is an alternative to having SQLJ do the character encoding for your source files. You can use the <code>native2ascii</code> utility to convert sources with native encoding to sources in 7-bit ASCII with Unicode escape sequences.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To use SQLJ to translate source created by <code>native2ascii</code>, ensure that the JVM that invokes SQLJ has a <code>file.encoding</code> setting that supports some superset of 7-bit ASCII. This is not the case with settings for EBCDIC or Unicode encoding.</div>
<p>Run <code>native2ascii</code> as follows:</p>
<pre>% native2ascii &lt;<span class="italic">options</span>&gt; &lt;<span class="italic">inputfile</span>&gt; &lt;<span class="italic">outputfile</span>&gt;
</pre>
<p>Standard input or standard output are used if you omit the input file or output file. Two options are supported:</p>
<ul>
<li>
<p><code>-reverse</code> (Reverse the conversion. Convert from Latin-1 or Unicode to native encoding)</p>
</li>
<li>
<p><code>-encoding &lt;</code><code><span class="codeinlineitalic">encoding</span></code><code>&gt;</code></p>
</li>
</ul>
<p>For example:</p>
<pre>% native2ascii -encoding SJIS Foo.sqlj Temp.sqlj
</pre>
<p>For more information, see the following Web site:</p>
<pre><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/native2ascii.html">http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/native2ascii.html</a>
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4010">
<tr>
<td class="cellalignment4017">
<table class="cellalignment4015">
<tr>
<td class="cellalignment4014"><a href="transopt.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4014"><a href="apppfdbg.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4019">
<table class="cellalignment4013">
<tr>
<td class="cellalignment4014"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4014"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4014"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4014"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4014"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4014"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>