<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-72379"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Translator%20Command%20Line%20and%20Options"></a><title>Translator Command Line and Options</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743"/>
<meta name="dcterms.created" content="2013-12-02T6:55:14Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQLJ Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17660-12"/>
<meta name="dcterms.isVersionOf" content="JSQLJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="alangfea.htm" title="Previous" type="text/html"/>
<link rel="Next" href="transrun.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17660-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/20</span> <!-- End Header -->
<div id="JSQLJ602" class="chapter"><a id="BCEDIABI"></a> <a id="i1012456"></a>
<h1 class="chapter"><span class="secnum">8</span> Translator Command Line and Options</h1>
<p>Once you have written your source code, you must translate it using the SQLJ translator. This chapter covers the SQLJ translator command line options and properties files. The following topics are covered:</p>
<ul>
<li>
<p><a href="#i1005569">Translator Command Line and Properties Files</a></p>
</li>
<li>
<p><a href="#i1006528">Basic Translator Options</a></p>
</li>
<li>
<p><a href="#i1007731">Advanced Translator Options</a></p>
</li>
<li>
<p><a href="#i1008460">Translator Support and Options for Alternative Environments</a></p>
</li>
</ul>
<a id="i1005569"></a>
<div id="JSQLJ603" class="sect1">
<h2 class="sect1">Translator <a id="sthref591"></a>Command Line and Properties Files</h2>
<p>The <code>sqlj</code> script invokes a Java virtual machine (JVM) and passes the class name of the SQLJ translator, <code>sqlj</code>.<code>tools</code>.<code>Sqlj</code>, to the JVM. The JVM invokes the translator and performs operations such as parsing the command line and properties files. For simplicity, running the script is referred to as running SQLJ, and its command line is referred to as the SQLJ command line.</p>
<p>The typical general syntax for the command line is as follows:</p>
<pre>% sqlj &lt;<span class="italic">optionlist</span>&gt; <span class="italic">filelist</span>
</pre>
<p>The <code><span class="codeinlineitalic">optionlist</span></code> is a list of SQLJ option settings separated by spaces. There are also prefixes to mark options to pass to the Java interpreter, compiler, and customizer.</p>
<p>The <code><span class="codeinlineitalic">filelist</span></code> is the list of files, delimited by spaces, to be processed by the SQLJ translator. The files can be .<code>sqlj</code>, <code>.java</code>, <code>.ser</code>, or <code>.jar</code> files. The <code>*</code> wildcard entry can be used in file names. For example, <code>Foo*.sqlj</code> would find <code>Foo1.sqlj</code>, <code>Foo2.sqlj,</code> and <code>Foobar.sqlj</code>.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
<ul>
<li>
<p>All options need <span class="italic">not</span> precede the file list. Options may appear anywhere in the command line and are processed in order.</p>
</li>
<li>
<p>All command-line options apply to all files being translated. It is not possible to have file-specific option settings.</p>
</li>
</ul>
</div>
<p>Do <span class="italic">not</span> include <code>.class</code> files in the file list, but ensure that your classpath is set so that the SQLJ translator can find any classes it must have for type resolution of variables in your SQLJ source files. If the -<code>checksource</code> flag is enabled, which is the default setting, then the SQLJ translator can also find classes it needs in uncompiled <code>.java</code> files in the classpath.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1008013">&#34;Source Check for Type Resolution (-checksource)&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you run the script by entering only <code>sqlj</code>, you will receive a synopsis of the most frequently used SQLJ options. In fact, this is true whenever you run the script without specifying any files to process. This is equivalent to using the -<code>help</code> flag setting.</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDCECCB">SQLJ Options, Flags, and Prefixes</a></p>
</li>
<li>
<p><a href="#BCEHDFAE">Command-Line Syntax and Operations</a></p>
</li>
<li>
<p><a href="#BCEDBIHH">Properties Files for Option Settings</a></p>
</li>
<li>
<p><a href="#i1006487">SQLJ_OPTIONS Environment Variable for Option Settings</a></p>
</li>
<li>
<p><a href="#BCEJEEEF">Order of Precedence of Option Settings</a></p>
</li>
</ul>
<a id="CHDCECCB"></a>
<div id="JSQLJ604" class="sect2">
<h3 class="sect2">SQLJ <a id="sthref592"></a>Options, Flags, and Prefixes</h3>
<p>This section discusses options supported by the SQLJ translator. Boolean options are referred to as flags. Prefixes used to pass options to the JVM, which the SQLJ script invokes, and to the Java compiler and SQLJ profile customizer, which the JVM invokes, are also listed.</p>
<p class="subhead2"><a id="JSQLJ605"></a>Summary <a id="sthref593"></a>of SQLJ Options</p>
<p><a href="#BCEJFCEC">Table 8-1</a> lists options supported by the SQLJ translator, categorized as follows:</p>
<ul>
<li>
<p>Flags and options listed as Basic are discussed in <a href="#i1006528">&#34;Basic Translator Options&#34;</a>.</p>
</li>
<li>
<p>Flags, options, and prefixes listed as Advanced are discussed in <a href="#i1007731">&#34;Advanced Translator Options&#34;</a>.</p>
</li>
<li>
<p>Flags and options listed as Environment are discussed in <a href="#i1008460">&#34;Translator Support and Options for Alternative Environments&#34;</a>. These flags and options are for use of a nonstandard JVM, compiler, or customizer.</p>
</li>
<li>
<p>Options with a category of <code>javac</code> are <code>javac</code> compiler options that SQLJ recognizes directly, without the compiler prefix. They are passed to the Java compiler, typically <code>javac</code>, and some also affect SQLJ translator settings. These options are discussed in <a href="#i1006141">&#34;Option Support for javac&#34;</a>.</p>
</li>
</ul>
<div id="JSQLJ606" class="tblformalwide">
<p class="titleintable"><a id="sthref594"></a><a id="BCEJFCEC"></a>Table 8-1 SQLJ Translator Options</p>
<table class="cellalignment4024" title="SQLJ Translator Options " summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t5">Option</th>
<th class="cellalignment4021" id="r1c2-t5">Description</th>
<th class="cellalignment4021" id="r1c3-t5">Default</th>
<th class="cellalignment4021" id="r1c4-t5">Category</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t5" headers="r1c1-t5">
<p><code>-bind-by-identifier</code></p>
</td>
<td class="cellalignment4017" headers="r2c1-t5 r1c2-t5">
<p>Flag to treat multiple appearances of the same host variable in a given SQLJ statement as a single bind occurrence.</p>
</td>
<td class="cellalignment4017" headers="r2c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r2c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r3c1-t5" headers="r1c1-t5">
<p><code>-C</code></p>
</td>
<td class="cellalignment4017" headers="r3c1-t5 r1c2-t5">
<p>Prefix that marks options to pass to the Java compiler.</p>
</td>
<td class="cellalignment4017" headers="r3c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r3c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r4c1-t5" headers="r1c1-t5">
<p><code>-cache</code></p>
</td>
<td class="cellalignment4017" headers="r4c1-t5 r1c2-t5">
<p>Enables caching of online semantics-checking results (to reduce trips to database).</p>
</td>
<td class="cellalignment4017" headers="r4c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r4c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r5c1-t5" headers="r1c1-t5">
<p><code>-checkfilename</code></p>
</td>
<td class="cellalignment4017" headers="r5c1-t5 r1c2-t5">
<p>Specifies whether a warning is issued during translation if a source file name does not correspond to the name of the public class (if any) defined there.</p>
</td>
<td class="cellalignment4017" headers="r5c1-t5 r1c3-t5">
<p><code>true</code></p>
</td>
<td class="cellalignment4017" headers="r5c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r6c1-t5" headers="r1c1-t5">
<p><code>-checksource</code></p>
</td>
<td class="cellalignment4017" headers="r6c1-t5 r1c2-t5">
<p>Instructs SQLJ type resolution to examine source files in addition to class files in certain circumstances.</p>
</td>
<td class="cellalignment4017" headers="r6c1-t5 r1c3-t5">
<p><code>true</code></p>
</td>
<td class="cellalignment4017" headers="r6c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r7c1-t5" headers="r1c1-t5">
<p><code>-classpath</code></p>
</td>
<td class="cellalignment4017" headers="r7c1-t5 r1c2-t5">
<p>Specifies the classpath to the JVM and Java compiler; also passed to <code>javac</code>. Use this on the command line only.</p>
</td>
<td class="cellalignment4017" headers="r7c1-t5 r1c3-t5">
<p>None</p>
</td>
<td class="cellalignment4017" headers="r7c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r8c1-t5" headers="r1c1-t5">
<p><code>-codegen</code></p>
</td>
<td class="cellalignment4017" headers="r8c1-t5 r1c2-t5">
<p>Specifies mode of code generation: <code>oracle</code> for Oracle-specific code generation with direct Oracle Java Database Connectivity (JDBC) calls; <code>iso</code> for ISO standard SQLJ code generation.</p>
</td>
<td class="cellalignment4017" headers="r8c1-t5 r1c3-t5">
<p><code>oracle</code></p>
</td>
<td class="cellalignment4017" headers="r8c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r9c1-t5" headers="r1c1-t5">
<p><code>-compile</code></p>
</td>
<td class="cellalignment4017" headers="r9c1-t5 r1c2-t5">
<p>Enables or disables the Java compilation step, either for <code>.java</code> files generated during the current SQLJ run or for previously generated or other <code>.java</code> files specified on the command line.</p>
</td>
<td class="cellalignment4017" headers="r9c1-t5 r1c3-t5">
<p><code>true</code></p>
</td>
<td class="cellalignment4017" headers="r9c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r10c1-t5" headers="r1c1-t5">
<p><code>-compiler-executable</code></p>
</td>
<td class="cellalignment4017" headers="r10c1-t5 r1c2-t5">
<p>Specifies the Java compiler to use.</p>
</td>
<td class="cellalignment4017" headers="r10c1-t5 r1c3-t5">
<p><code>javac</code></p>
</td>
<td class="cellalignment4017" headers="r10c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r11c1-t5" headers="r1c1-t5">
<p><code>-compiler-encoding- flag</code></p>
</td>
<td class="cellalignment4017" headers="r11c1-t5 r1c2-t5">
<p>Instructs SQLJ whether to pass the -<code>encoding</code> setting, if set, to the Java compiler.</p>
</td>
<td class="cellalignment4017" headers="r11c1-t5 r1c3-t5">
<p><code>true</code></p>
</td>
<td class="cellalignment4017" headers="r11c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r12c1-t5" headers="r1c1-t5">
<p><code>-compiler-output-file</code></p>
</td>
<td class="cellalignment4017" headers="r12c1-t5 r1c2-t5">
<p>Specifies a file to which the Java compiler output should be written. If this option is not set, then SQLJ assumes that compiler output goes to standard output.</p>
</td>
<td class="cellalignment4017" headers="r12c1-t5 r1c3-t5">
<p>None</p>
</td>
<td class="cellalignment4017" headers="r12c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r13c1-t5" headers="r1c1-t5">
<p><code>-compiler-pipe-output-flag</code></p>
</td>
<td class="cellalignment4017" headers="r13c1-t5 r1c2-t5">
<p>Instructs SQLJ whether to set the <code>javac.pipe.output</code> system property, which determines whether the Java compiler prints errors and messages to <code>STDOUT</code> instead of <code>STDERR</code>.</p>
</td>
<td class="cellalignment4017" headers="r13c1-t5 r1c3-t5">
<p><code>true</code></p>
</td>
<td class="cellalignment4017" headers="r13c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r14c1-t5" headers="r1c1-t5">
<p><code>-components</code></p>
</td>
<td class="cellalignment4017" headers="r14c1-t5 r1c2-t5">
<p>Specifies the components (packages and classes) to instrument for use with Oracle Dynamic Monitoring Service (DMS). This assumes instrumentation is enabled through the -<code>instrument</code> option. Use <code>all</code> to instrument all components being translated.</p>
</td>
<td class="cellalignment4017" headers="r14c1-t5 r1c3-t5">
<p><code>all</code></p>
</td>
<td class="cellalignment4017" headers="r14c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r15c1-t5" headers="r1c1-t5">
<p><code>-d</code></p>
</td>
<td class="cellalignment4017" headers="r15c1-t5 r1c2-t5">
<p>Specifies the output directory for <code>.ser</code> profile files, if applicable, generated by SQLJ, and <code>.class</code> files generated by the compiler; also passed to <code>javac</code>.</p>
</td>
<td class="cellalignment4017" headers="r15c1-t5 r1c3-t5">
<p>Empty</p>
<p>(Use directory of <code>.java</code> files to place generated <code>.class</code> files; use directory of <code>.sqlj</code> files to place generated <code>.ser</code> files.)</p>
</td>
<td class="cellalignment4017" headers="r15c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r16c1-t5" headers="r1c1-t5">
<p><code>-default-customizer</code></p>
</td>
<td class="cellalignment4017" headers="r16c1-t5 r1c2-t5">
<p>Determines the profile customizer to use. Specify a class name.</p>
</td>
<td class="cellalignment4017" headers="r16c1-t5 r1c3-t5">
<p><code>oracle.sqlj. runtime.util. OraCustomizer</code></p>
</td>
<td class="cellalignment4017" headers="r16c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r17c1-t5" headers="r1c1-t5">
<p><code>-default-url-prefix</code></p>
</td>
<td class="cellalignment4017" headers="r17c1-t5 r1c2-t5">
<p>Sets the default prefix for URL settings.</p>
</td>
<td class="cellalignment4017" headers="r17c1-t5 r1c3-t5">
<p><code>jdbc:oracle:thin:</code></p>
</td>
<td class="cellalignment4017" headers="r17c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r18c1-t5" headers="r1c1-t5">
<p><code>-depend</code></p>
</td>
<td class="cellalignment4017" headers="r18c1-t5 r1c2-t5">
<p>Passed to <code>javac</code>; enables -<code>checksource</code>. This option requires the -<code>C</code> compiler prefix if set in a properties file.</p>
</td>
<td class="cellalignment4017" headers="r18c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r18c1-t5 r1c4-t5">
<p><code>javac</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r19c1-t5" headers="r1c1-t5">
<p><code>-deprecation</code></p>
</td>
<td class="cellalignment4017" headers="r19c1-t5 r1c2-t5">
<p>Passed to <code>javac</code> only. This option requires the -<code>C</code> compiler prefix if set in a properties file.</p>
</td>
<td class="cellalignment4017" headers="r19c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r19c1-t5 r1c4-t5">
<p><code>javac</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r20c1-t5" headers="r1c1-t5">
<p><code>-dir</code></p>
</td>
<td class="cellalignment4017" headers="r20c1-t5 r1c2-t5">
<p>Sets the output directory for SQLJ-generated <code>.java</code> files.</p>
</td>
<td class="cellalignment4017" headers="r20c1-t5 r1c3-t5">
<p>Empty</p>
<p>(Use directory of <code>.sqlj</code> input file.)</p>
</td>
<td class="cellalignment4017" headers="r20c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r21c1-t5" headers="r1c1-t5">
<p><code>-driver</code></p>
</td>
<td class="cellalignment4017" headers="r21c1-t5 r1c2-t5">
<p>Determines the JDBC driver class to register. Specify a class name or comma-delimited list of class names.</p>
</td>
<td class="cellalignment4017" headers="r21c1-t5 r1c3-t5">
<p>oracle.jdbc.OracleDriver</p>
</td>
<td class="cellalignment4017" headers="r21c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r22c1-t5" headers="r1c1-t5">
<p><code>-encoding</code></p>
</td>
<td class="cellalignment4017" headers="r22c1-t5 r1c2-t5">
<p>Specifies the encoding that SQLJ and the compiler will use in globalization support; also passed to <code>javac</code>. You can use -<code>e</code> on the command line.</p>
</td>
<td class="cellalignment4017" headers="r22c1-t5 r1c3-t5">
<p>JVM <code>file.encoding</code> setting</p>
</td>
<td class="cellalignment4017" headers="r22c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r23c1-t5" headers="r1c1-t5">
<p><code>-explain</code></p>
</td>
<td class="cellalignment4017" headers="r23c1-t5 r1c2-t5">
<p>Flag to request cause and action information to be displayed with translator error messages.</p>
</td>
<td class="cellalignment4017" headers="r23c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r23c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r24c1-t5" headers="r1c1-t5">
<p><code>-fixedchar</code></p>
</td>
<td class="cellalignment4017" headers="r24c1-t5 r1c2-t5">
<p>Flag to account for blank padding when binding a string into a <code>WHERE</code> clause for comparison with <code>CHAR</code> data.</p>
</td>
<td class="cellalignment4017" headers="r24c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r24c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r25c1-t5" headers="r1c1-t5">
<p><code>-g</code></p>
</td>
<td class="cellalignment4017" headers="r25c1-t5 r1c2-t5">
<p>Passed to <code>javac</code>; enables -<code>linemap</code>. This option requires the -<code>C</code> compiler prefix if set in a properties file.</p>
</td>
<td class="cellalignment4017" headers="r25c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r25c1-t5 r1c4-t5">
<p><code>javac</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r26c1-t5" headers="r1c1-t5">
<p><code>-help</code><code>-help-long</code><code>-help-alias</code></p>
</td>
<td class="cellalignment4017" headers="r26c1-t5 r1c2-t5">
<p>Flags to display different levels of information about SQLJ option names, descriptions, and current values. Use these on the command line only. You can use -<code>h</code> instead of -<code>help</code>.</p>
</td>
<td class="cellalignment4017" headers="r26c1-t5 r1c3-t5">
<p>Disabled</p>
</td>
<td class="cellalignment4017" headers="r26c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r27c1-t5" headers="r1c1-t5">
<p><code>-instrument</code></p>
</td>
<td class="cellalignment4017" headers="r27c1-t5 r1c2-t5">
<p>Specifies whether to instrument translated files for use with Oracle DMS.</p>
</td>
<td class="cellalignment4017" headers="r27c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r27c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r28c1-t5" headers="r1c1-t5">
<p><code>-jdblinemap</code></p>
</td>
<td class="cellalignment4017" headers="r28c1-t5 r1c2-t5">
<p>Variant of -<code>linemap</code> option for use with the Sun Microsystems <code>jdb</code> debugger.</p>
</td>
<td class="cellalignment4017" headers="r28c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r28c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r29c1-t5" headers="r1c1-t5">
<p><code>-J</code></p>
</td>
<td class="cellalignment4017" headers="r29c1-t5 r1c2-t5">
<p>Prefix that marks options to pass to the JVM. Use this on the command line only.</p>
</td>
<td class="cellalignment4017" headers="r29c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r29c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r30c1-t5" headers="r1c1-t5">
<p><code>-linemap</code></p>
</td>
<td class="cellalignment4017" headers="r30c1-t5 r1c2-t5">
<p>Enables mapping of line numbers between the generated Java class file and the original SQLJ code.</p>
</td>
<td class="cellalignment4017" headers="r30c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r30c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r31c1-t5" headers="r1c1-t5">
<p><code>-n</code></p>
</td>
<td class="cellalignment4017" headers="r31c1-t5 r1c2-t5">
<p>Instructs the <code>sqlj</code> script to echo the full command line as it would be passed to the SQLJ translator, including settings in <code>SQLJ_OPTIONS</code>, without having the translator execute it. This is equivalent to <code>-vm=echo</code>. Use this on the command line only.</p>
</td>
<td class="cellalignment4017" headers="r31c1-t5 r1c3-t5">
<p>Disabled</p>
</td>
<td class="cellalignment4017" headers="r31c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r32c1-t5" headers="r1c1-t5">
<p><code>-<a id="sthref595"></a>ncharconv</code></p>
</td>
<td class="cellalignment4017" headers="r32c1-t5 r1c2-t5">
<p>Performs bind to <code>NCHAR</code> columns for <code>String</code> host variables.</p>
</td>
<td class="cellalignment4017" headers="r32c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r32c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r33c1-t5" headers="r1c1-t5">
<p><code>-nowarn</code></p>
</td>
<td class="cellalignment4017" headers="r33c1-t5 r1c2-t5">
<p>Passed to <code>javac</code>; sets <code>-warn=none</code>. This option requires the -<code>C</code> compiler prefix if set in a properties file.</p>
</td>
<td class="cellalignment4017" headers="r33c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r33c1-t5 r1c4-t5">
<p><code>javac</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r34c1-t5" headers="r1c1-t5">
<p><code>-O</code></p>
</td>
<td class="cellalignment4017" headers="r34c1-t5 r1c2-t5">
<p>Passed to <code>javac</code>; disables -<code>linemap</code>. This option requires the -<code>C</code> compiler prefix if set in a properties file.</p>
</td>
<td class="cellalignment4017" headers="r34c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r34c1-t5 r1c4-t5">
<p><code>javac</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r35c1-t5" headers="r1c1-t5">
<p><code>-offline</code></p>
</td>
<td class="cellalignment4017" headers="r35c1-t5 r1c2-t5">
<p>Determines the offline checker to use for semantics-checking. Specify a list of fully qualified class names.</p>
</td>
<td class="cellalignment4017" headers="r35c1-t5 r1c3-t5">
<p>oracle.sqlj.checker. OracleChecker</p>
</td>
<td class="cellalignment4017" headers="r35c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r36c1-t5" headers="r1c1-t5">
<p><code>-online</code></p>
</td>
<td class="cellalignment4017" headers="r36c1-t5 r1c2-t5">
<p>Determines the online checker to use for semantics-checking. Specify a fully qualified class name. (You must also set -<code>user</code> to enable online checking.)</p>
</td>
<td class="cellalignment4017" headers="r36c1-t5 r1c3-t5">
<p>oracle.sqlj.checker. OracleChecker</p>
</td>
<td class="cellalignment4017" headers="r36c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r37c1-t5" headers="r1c1-t5">
<p><code>-optcols</code></p>
</td>
<td class="cellalignment4017" headers="r37c1-t5 r1c2-t5">
<p>Enables iterator column type and size definitions to optimize performance. It is used directly by the translator for Oracle-specific code generation, or forwarded to Oracle customizer along with user, password, and URL settings for ISO code generation.</p>
</td>
<td class="cellalignment4017" headers="r37c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r37c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r38c1-t5" headers="r1c1-t5">
<p><code>-optparams</code></p>
</td>
<td class="cellalignment4017" headers="r38c1-t5 r1c2-t5">
<p>Enables parameter size definitions to optimize JDBC resource allocation (used with -<code>optparamdefaults</code>). This is used directly by the translator for Oracle-specific code generation, or forwarded to Oracle customizer for ISO code generation.</p>
</td>
<td class="cellalignment4017" headers="r38c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r38c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r39c1-t5" headers="r1c1-t5">
<p><code>-optparamdefaults</code></p>
</td>
<td class="cellalignment4017" headers="r39c1-t5 r1c2-t5">
<p>Sets parameter size defaults for particular data types (used with -<code>optparams</code>). This is used directly by the translator for Oracle-specific code generation, or forwarded to Oracle customizer for ISO code generation.</p>
</td>
<td class="cellalignment4017" headers="r39c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r39c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r40c1-t5" headers="r1c1-t5">
<p><code>-P</code></p>
</td>
<td class="cellalignment4017" headers="r40c1-t5 r1c2-t5">
<p>Prefix that marks options to pass to the SQLJ profile customizer.</p>
</td>
<td class="cellalignment4017" headers="r40c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r40c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r41c1-t5" headers="r1c1-t5">
<p><code>-parse</code></p>
</td>
<td class="cellalignment4017" headers="r41c1-t5 r1c2-t5">
<p>Option to enable the offline SQL parser. Possible settings: <code>both</code>, <code>online</code>-<code>only</code>, <code>offline</code>-<code>only</code>, <code>none</code>, or the name of a Java class that implements an alternative parser.</p>
<p><span class="bold">Note</span>: Some settings for this option will also disable online semantics-checking, overriding the effect of the -<code>user</code> option.</p>
</td>
<td class="cellalignment4017" headers="r41c1-t5 r1c3-t5">
<p><code>both</code></p>
</td>
<td class="cellalignment4017" headers="r41c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r42c1-t5" headers="r1c1-t5">
<p><code>-passes</code></p>
</td>
<td class="cellalignment4017" headers="r42c1-t5 r1c2-t5">
<p>Instructs the <code>sqlj</code> script to run SQLJ in two separate passes, with compilation in between. Use this on the command line only.</p>
</td>
<td class="cellalignment4017" headers="r42c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r42c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r43c1-t5" headers="r1c1-t5">
<p><code>-password</code></p>
</td>
<td class="cellalignment4017" headers="r43c1-t5 r1c2-t5">
<p>Sets the user password for the database connection for online semantics-checking. You can use -<code>p</code> on the command line.</p>
</td>
<td class="cellalignment4017" headers="r43c1-t5 r1c3-t5">
<p>None</p>
</td>
<td class="cellalignment4017" headers="r43c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r44c1-t5" headers="r1c1-t5">
<p><code>-profile</code></p>
</td>
<td class="cellalignment4017" headers="r44c1-t5 r1c2-t5">
<p>For ISO code generation, enables or disables the profile customization step for profile files generated during the current SQLJ run.</p>
</td>
<td class="cellalignment4017" headers="r44c1-t5 r1c3-t5">
<p><code>true</code></p>
</td>
<td class="cellalignment4017" headers="r44c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r45c1-t5" headers="r1c1-t5">
<p><code>-props</code></p>
</td>
<td class="cellalignment4017" headers="r45c1-t5 r1c2-t5">
<p>Specifies a properties file, an alternative to the command line for setting options. (The <code>sqlj</code>.<code>properties</code> is also still read.) Use this on the command line only.</p>
</td>
<td class="cellalignment4017" headers="r45c1-t5 r1c3-t5">
<p>None</p>
</td>
<td class="cellalignment4017" headers="r45c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r46c1-t5" headers="r1c1-t5">
<p><code>-ser2class</code></p>
</td>
<td class="cellalignment4017" headers="r46c1-t5 r1c2-t5">
<p>For ISO code generation, instructs SQLJ to translate generated <code>.ser</code> profiles to <code>.class</code> files.</p>
</td>
<td class="cellalignment4017" headers="r46c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r46c1-t5 r1c4-t5">
<p>Advanced</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r47c1-t5" headers="r1c1-t5">
<p><code>-status</code></p>
</td>
<td class="cellalignment4017" headers="r47c1-t5 r1c2-t5">
<p>Requests SQLJ to display status messages as it runs. Instead of -<code>status</code>, you can use -<code>v</code> on the command line.</p>
</td>
<td class="cellalignment4017" headers="r47c1-t5 r1c3-t5">
<p><code>false</code></p>
</td>
<td class="cellalignment4017" headers="r47c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r48c1-t5" headers="r1c1-t5">
<p><code>-url</code></p>
</td>
<td class="cellalignment4017" headers="r48c1-t5 r1c2-t5">
<p>Sets the URL for the database connection for online semantics-checking.</p>
</td>
<td class="cellalignment4017" headers="r48c1-t5 r1c3-t5">
<p><code>jdbc:oracle:oci:@</code></p>
</td>
<td class="cellalignment4017" headers="r48c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r49c1-t5" headers="r1c1-t5">
<p><code>-user</code></p>
</td>
<td class="cellalignment4017" headers="r49c1-t5 r1c2-t5">
<p>Enables online semantics-checking and sets the user name (and optionally password and URL) for the database connection. You can use -<code>u</code> on the command line.</p>
</td>
<td class="cellalignment4017" headers="r49c1-t5 r1c3-t5">
<p>None (no online semantics-checking)</p>
</td>
<td class="cellalignment4017" headers="r49c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r50c1-t5" headers="r1c1-t5">
<p><code>-verbose</code></p>
</td>
<td class="cellalignment4017" headers="r50c1-t5 r1c2-t5">
<p>Passed to <code>javac</code>; enables -<code>status</code>. This requires the -<code>C</code> compiler prefix if set in a properties file.</p>
</td>
<td class="cellalignment4017" headers="r50c1-t5 r1c3-t5">
<p>NA</p>
</td>
<td class="cellalignment4017" headers="r50c1-t5 r1c4-t5">
<p><code>javac</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r51c1-t5" headers="r1c1-t5">
<p><code>-version</code><code>-version-long</code></p>
</td>
<td class="cellalignment4017" headers="r51c1-t5 r1c2-t5">
<p>Flag to display different levels of SQLJ and JDBC driver version information. Use these settings on the command line only.</p>
</td>
<td class="cellalignment4017" headers="r51c1-t5 r1c3-t5">
<p>Disabled</p>
</td>
<td class="cellalignment4017" headers="r51c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r52c1-t5" headers="r1c1-t5">
<p><code>-vm</code></p>
</td>
<td class="cellalignment4017" headers="r52c1-t5 r1c2-t5">
<p>Specifies the JVM to use for running the SQLJ translator. Use this on the command line only.</p>
</td>
<td class="cellalignment4017" headers="r52c1-t5 r1c3-t5">
<p><code>java</code></p>
</td>
<td class="cellalignment4017" headers="r52c1-t5 r1c4-t5">
<p>Environment</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r53c1-t5" headers="r1c1-t5">
<p><code>-warn</code></p>
</td>
<td class="cellalignment4017" headers="r53c1-t5 r1c2-t5">
<p>Comma-delimited list of flags to enable or disable different SQLJ warnings. Individual flags are <code>cast</code>/<code>nocast</code> <code>precision</code>/<code>noprecision</code>, <code>nulls</code>/<code>nonulls</code>, <code>portable</code>/<code>noportable</code>, <code>strict</code>/<code>nostrict</code>, and <code>verbose</code>/<code>noverbose</code>. The global flag is <code>all</code>/<code>none</code>.</p>
</td>
<td class="cellalignment4017" headers="r53c1-t5 r1c3-t5">
<p><code>cast precision nulls noportable strict noverbose</code></p>
</td>
<td class="cellalignment4017" headers="r53c1-t5 r1c4-t5">
<p>Basic</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" -->
<p class="subhead2"><a id="JSQLJ607"></a>Notes Regarding Options, Flags, and Prefixes</p>
<p>Keep the following in mind:</p>
<ul>
<li>
<p>Flags, options, and prefixes listed as command line only in the Description column of the preceding table <span class="italic">cannot</span> be set in a properties file.</p>
</li>
<li>
<p>The names of command-line options, including options passed elsewhere, are case-sensitive and usually all lowercase. Option values are usually case-sensitive as well.</p>
</li>
<li>
<p>Several options, as indicated in <a href="#BCEJFCEC">Table 8-1</a>, accept alternative syntax if specified on the command line, to support compatibility with the Oracle <code>loadjava</code> utility.</p>
</li>
<li>
<p>Most SQLJ options can also be set in a properties file.</p>
</li>
<li>
<p>The <code>SQLJ_OPTIONS</code> environment variable can be used in addition to, or instead of, the command line for setting options.</p>
</li>
<li>
<p>In this document, boolean flags are usually discussed as being <code>true</code> or <code>false</code>, but they can also be enabled or disabled by setting them to <code>yes</code>/<code>no</code>, <code>on</code>/<code>off</code>, or <code>1</code>/<code>0</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BCEHDFAE">&#34;Command-Line Syntax and Operations&#34;</a></div>
<p class="subhead2"><a id="JSQLJ608"></a>Notes Regarding the -password Option</p>
<p>You can choose one of the following ways to provide the password, ensuring that it is not being intercepted by other users through utilities such as <code>ps</code>:</p>
<ul>
<li>
<p>Omit the <code>-password</code> argument. In this case, you will be prompted on the command line to enter the password. Then the password argument will not be visible to the operating system.</p>
</li>
<li>
<p>Place the password setting into a properties file, and instruct the SQLJ translator to use this properties file. Thus it is possible to script SQLJ translation without exposing the password to the operating system.</p>
</li>
<li>
<p>Use SQLJ under JDeveloper. This does not expose the password to the operating system.</p>
</li>
</ul>
<p class="subhead2"><a id="i1006115"></a><a id="JSQLJ609"></a>Options for <a id="sthref596"></a><a id="sthref597"></a>loadjava Compatibility</p>
<p>For compatibility with the <code>loadjava</code> utility used to load Java and SQLJ applications into an Oracle Database 12<span class="italic">c</span> Release 1 (12.1) instance, the following alternative syntax is recognized for the indicated options when specified on the command line:</p>
<ul>
<li>
<p>-<code>e</code> (for <code>-encoding</code>)</p>
</li>
<li>
<p>-<code>h</code> (for -<code>help</code>)</p>
</li>
<li>
<p>-<code>p</code> (for -<code>password</code>)</p>
</li>
<li>
<p>-<code>u</code> (for -<code>user</code>)</p>
</li>
<li>
<p>-<code>v</code> (for verbose message output; equivalent to -<code>status</code>)</p>
</li>
</ul>
<p>To maintain full consistency with <code>loadjava</code> syntax, you can use a space instead of equal sign (=) in setting these options, as in the following example:</p>
<pre>-u HR -v -e SJIS
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This alternative option syntax is recognized only on the command line or in the <code>SQLJ_OPTIONS</code> environment variable, not in properties files.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDEV10060" href="../JJDEV/cheleven.htm#JJDEV10060"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> for general information about the <code>loadjava</code> utility</div>
<p class="subhead2"><a id="i1006141"></a><a id="JSQLJ610"></a>Option Support <a id="sthref598"></a><a id="sthref599"></a><a id="sthref600"></a>for javac</p>
<p>SQLJ supports option settings for <code>javac</code>, the Java compiler supplied with the Sun Microsystems Java Development Kit (JDK), in the following ways:</p>
<ul>
<li>
<p>Some <code>javac</code> options that take values are combined into SQLJ options (<code>-classpath</code>, <code>-d</code>, <code>-encoding</code>).</p>
</li>
<li>
<p>For other <code>javac</code> options that take values, special processing has been implemented to correctly pass the value to the compiler (<code>-bootclasspath</code>, <code>-extdirs</code>, <code>-target</code>). These require a compiler prefix. They have no effect on SQLJ operation.</p>
</li>
<li>
<p>Flags for <code>javac</code> are recognized on the command line without a <code>compiler</code> prefix (<code>-depend</code>, <code>-deprecation</code>, <code>-g</code>, <code>-nowarn</code>, <code>-O</code>, <code>-verbose</code>). Some of these flags affect SQLJ translator flag settings as well.</p>
</li>
</ul>
<p>This is summarized in <a href="#BCEBBIGH">Table 8-2</a>. All of these options can be set on the SQLJ command line or in a properties file, though sometimes a compiler prefix is required, as noted in the table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>By default, <code>javac</code> compiles classes against the bootstrap and extension classes of the platform with which it was shipped. But <code>javac</code> also supports cross-compiling classes against bootstrap and extension classes of a different Java platform. The <code>javac</code> <code>-bootclasspath</code> and <code>-extdirs</code> options are for use in cross-compiling (JDK 6).</p>
</li>
<li>
<p>By default, <code>javac</code> generates <code>.class</code> files that are compatible with the JDK version from which <code>javac</code> was obtained. Use the <code>-target</code> option to alter this.</p>
</li>
</ul>
</div>
<div id="JSQLJ611" class="tblformal">
<p class="titleintable"><a id="sthref601"></a><a id="BCEBBIGH"></a>Table 8-2 SQLJ Support for javac Options</p>
<table class="cellalignment4020" title="SQLJ Support for javac Options " summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t10">Command-Line Option (with -C Prefix if Noted)</th>
<th class="cellalignment4021" id="r1c2-t10">Description</th>
<th class="cellalignment4021" id="r1c3-t10">Relationship to SQLJ</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t10" headers="r1c1-t10">
<p><code>-C-bootclasspath</code></p>
</td>
<td class="cellalignment4017" headers="r2c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to cross-compile against the specified set of bootstrap classes.</p>
</td>
<td class="cellalignment4017" headers="r2c1-t10 r1c3-t10">
<p>None</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r3c1-t10" headers="r1c1-t10">
<p><code>-classpath</code></p>
</td>
<td class="cellalignment4017" headers="r3c1-t10 r1c2-t10">
<p>Sets the classpath for <code>javac</code> and the JVM.</p>
</td>
<td class="cellalignment4017" headers="r3c1-t10 r1c3-t10">
<p>This is also a SQLJ option.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r4c1-t10" headers="r1c1-t10">
<p><code>-d</code></p>
</td>
<td class="cellalignment4017" headers="r4c1-t10 r1c2-t10">
<p>Sets the output directory for <code>.class</code> files and SQLJ profile files.</p>
</td>
<td class="cellalignment4017" headers="r4c1-t10 r1c3-t10">
<p>This is also a SQLJ option</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r5c1-t10" headers="r1c1-t10">
<p><code>-depend</code></p>
</td>
<td class="cellalignment4017" headers="r5c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to compile out-of-date files recursively.</p>
</td>
<td class="cellalignment4017" headers="r5c1-t10 r1c3-t10">
<p>Enables the SQLJ <code>-checksource</code> option.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r6c1-t10" headers="r1c1-t10">
<p><code>-deprecation</code></p>
</td>
<td class="cellalignment4017" headers="r6c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to output source locations where deprecated APIs are used.</p>
</td>
<td class="cellalignment4017" headers="r6c1-t10 r1c3-t10">
<p>None</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r7c1-t10" headers="r1c1-t10">
<p><code>-encoding</code></p>
</td>
<td class="cellalignment4017" headers="r7c1-t10 r1c2-t10">
<p>Sets the encoding for both <code>SQLJ</code> and <code>javac</code>.</p>
</td>
<td class="cellalignment4017" headers="r7c1-t10 r1c3-t10">
<p>This is also a SQLJ option.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r8c1-t10" headers="r1c1-t10">
<p><code>-C-extdirs</code></p>
</td>
<td class="cellalignment4017" headers="r8c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to cross-compile against the specified extension directories.</p>
</td>
<td class="cellalignment4017" headers="r8c1-t10 r1c3-t10">
<p>None</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r9c1-t10" headers="r1c1-t10">
<p><code>-g</code></p>
</td>
<td class="cellalignment4017" headers="r9c1-t10 r1c2-t10">
<p>Generates <code>javac</code> debugging information.</p>
</td>
<td class="cellalignment4017" headers="r9c1-t10 r1c3-t10">
<p>Enables the <code>SQLJ</code> <code>-linemap</code> option.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r10c1-t10" headers="r1c1-t10">
<p><code>-nowarn</code></p>
</td>
<td class="cellalignment4017" headers="r10c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to generate no warnings.</p>
</td>
<td class="cellalignment4017" headers="r10c1-t10 r1c3-t10">
<p>Sets the <code>SQLJ</code> option <code>-warn=none</code>.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r11c1-t10" headers="r1c1-t10">
<p><code>-O</code></p>
</td>
<td class="cellalignment4017" headers="r11c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to optimize.</p>
</td>
<td class="cellalignment4017" headers="r11c1-t10 r1c3-t10">
<p>Disables the <code>SQLJ</code> <code>-linemap</code> option.</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r12c1-t10" headers="r1c1-t10">
<p><code>-C-target</code></p>
</td>
<td class="cellalignment4017" headers="r12c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to generate <code>.class</code> files to work only on JVMs of the specified JDK version level or higher.</p>
</td>
<td class="cellalignment4017" headers="r12c1-t10 r1c3-t10">
<p>None</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r13c1-t10" headers="r1c1-t10">
<p><code>-verbose</code></p>
</td>
<td class="cellalignment4017" headers="r13c1-t10 r1c2-t10">
<p>Instructs <code>javac</code> to produce real-time status messages.</p>
</td>
<td class="cellalignment4017" headers="r13c1-t10 r1c3-t10">
<p>Enables the <code>SQLJ</code> <code>-status</code> option.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Refer to <code>javac</code> documentation for additional information about <code>javac</code> option settings and functionality.</p>
<p class="subhead2"><a id="JSQLJ612"></a>Syntax Notes for javac Options</p>
<p>Keep the following in mind regarding the <code>javac</code> options syntax:</p>
<ul>
<li>
<p>If you want to set different classpath values for the Java compiler and for the JVM that runs SQLJ, then you must use separate settings, one with a <code>-C</code> prefix and one with a <code>-J</code> prefix. Otherwise, no prefix is required.</p>
</li>
<li>
<p>Do not use the <code>-C</code> prefix to specify the <code>-d</code> or <code>-encoding</code> compiler options. Note that this also means that SQLJ and the compiler use the same settings for <code>-d</code> and <code>-encoding</code>.</p>
</li>
<li>
<p>You can optionally use the <code>-C</code> prefix for <code>-depend</code>, <code>-deprecation</code>, <code>-g</code>, <code>-nowarn</code>, <code>-O</code>, and <code>-verbose</code>.</p>
</li>
<li>
<p>All <code>javac</code> options, aside from those that are also SQLJ options (<code>-classpath</code>, <code>-d</code>, and <code>-encoding</code>) require the <code>compile.</code> prefix if you set them in a properties file.</p>
</li>
<li>
<p>For consistency, it is advisable to use an equal sign (=) for options that take values, but a space also works when using a compiler prefix (<code>-C</code> on the command line or <code>compile.</code> in a properties file).</p>
</li>
</ul>
<p class="subhead2"><a id="JSQLJ613"></a>Example</p>
<p>The following example, which is a single wraparound command line, uses the <code>-C-bootclasspath</code>, <code>-C-extdirs</code>, and <code>-C-target options</code>.</p>
<pre>% sqlj -vm=/usr/local/packages/jdk6/bin/java
       -compiler-executable=/usr/local/packages/jdk6/bin/javac
       -C-bootclasspath=/usr/local/packages/jdk6/jre/lib/rt.jar
       -C-extdirs=&#34;&#34; -C-target=1.1.8 Demo.sqlj
</pre>
<p class="subhead2"><a id="JSQLJ614"></a>Profile Customizer Options</p>
<p>Profile customizer options, that is, options for the customizer harness front end, the default Oracle customizer, and special customizers for debugging and deployment-time semantics-checking, are documented in <a href="profcust.htm#BHAECCFI">&#34;Customization and Specialized Customizers&#34;</a>. This is relevant for ISO standard code generation only (<code>-codegen</code>=<code>iso</code>).</p>
</div>
<!-- class="sect2" -->
<a id="BCEHDFAE"></a>
<div id="JSQLJ615" class="sect2">
<h3 class="sect2">Command-Line Syntax and Operations</h3>
<p>The general sequence of events triggered by running the script <code>sqlj</code> was discussed in <a href="overview.htm#i1005841">&#34;SQLJ Translation Steps&#34;</a>. This section will add some operational details to that discussion, as part of this overview of the command line.</p>
<p class="subhead2"><a id="i1006280"></a><a id="JSQLJ616"></a>Use of <a id="sthref602"></a><a id="sthref603"></a>Command-Line Arguments</p>
<p>Recall the typical general syntax for the command line:</p>
<pre>% sqlj &lt;<span class="italic">optionlist</span>&gt; <span class="italic">filelist</span>
</pre>
<p>When the <code>sqlj</code> script invokes a JVM, it passes all of its command-line arguments to the JVM, which later passes them elsewhere, such as to the Java compiler or profile customizer, as appropriate.</p>
<p>Use an equal sign (=) to specify option and flag settings, although for simplicity you do not have to specify <code>=true</code> to turn on a flag. Typing the flag name alone will suffice. However, you must specify <code>=false</code> to turn a flag off. A flag will not toggle from its previous value. For example:</p>
<p><code>-linemap=true</code> or just <code>-linemap</code> to enable line-mapping</p>
<p><code>-linemap=false</code> to disable line-mapping</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the same option appears more than once on the command line or in the properties file, then the last value is used.</div>
<p class="subhead2"><a id="JSQLJ617"></a>Arguments from the Option List</p>
<p>Option list arguments are used in the following ways:</p>
<ul>
<li>
<p>Options not designated by the <code>-J</code>, <code>-C</code>, or <code>-P</code> prefixes are SQLJ options (except for directly supported compiler options) and are passed to the SQLJ translator as the JVM invokes it.</p>
</li>
<li>
<p>Options designated by the <code>-J</code> prefix are JVM options and are used by the JVM directly. Such options must be specified on the command line or in the <code>SQLJ_OPTIONS</code> environment variable. As with translator options, use an equal sign (=) in setting the option, such as:</p>
<pre>-J-Djavac.pipe.output=true
</pre>
<p>If you want to set different classpath values for the Java compiler and for the JVM that runs SQLJ, you must use separate settings, one with a <code>-C</code> prefix and one with a <code>-J</code> prefix.</p>
</li>
<li>
<p>Options designated by the <code>-C</code> prefix are Java compiler options and are passed to the compiler as the JVM invokes it. Compiler options taking values require special support, which has been implemented for <code>javac</code> options. You can use an equal sign for these, as follows (though a space also works):</p>
<pre>-C-bootclasspath=/usr/local/packages/jdk6/jre/lib/rt.jar
</pre></li>
<li>
<p>Options designated by the <code>-P</code> prefix are SQLJ profile customizer options and are passed to the customizer as the JVM invokes it (relevant only for ISO standard code generation, <code>-codegen</code><code>=</code><code>iso</code>). As with translator options, use an equal sign (=) in setting the option, such as:</p>
<pre>-P-user=HR
</pre>
<p>Any profile customization other than what SQLJ performs automatically is considered an advanced feature.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="profcust.htm#BHAECCFI">Appendix A, &#34;Customization and Specialized Customizers&#34;</a></div>
</li>
</ul>
<p class="subhead2"><a id="JSQLJ618"></a>Arguments from the File List</p>
<p>The SQLJ front end parses the file list, processes wildcard characters, and expands file names. By default, files are processed as follows:</p>
<ul>
<li>
<p>The <code>.sqlj</code> files are processed by the SQLJ translator, Java compiler, and SQLJ profile customizer (profile customizer for <code>-codegen</code><code>=</code><code>iso</code> only).</p>
</li>
<li>
<p>The <code>.java</code> files are processed by the Java compiler and are also used by the SQLJ translator for type resolution.</p>
</li>
<li>
<p>The <code>.ser</code> profiles and <code>.jar</code> files are processed only by the profile customizer (relevant only for <code>-codegen</code><code>=</code><code>iso</code>).</p>
</li>
</ul>
<p>Note that you can specify <code>.sqlj</code> files together with <code>.java</code> files on the command line, or you can specify <code>.ser</code> files together with <code>.jar</code> files, but you cannot mix the two categories. If you have <code>.sqlj</code> files and <code>.java</code> files with interdependencies, each requiring access to code in the others, then enter them all on the command line for a single execution of SQLJ. You <span class="italic">cannot</span> specify them for separate executions of SQLJ, because then SQLJ would be unable to resolve all the types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
As an alternative to entering <code>.java</code> file names on the command line, you can enable the <code>-checksource</code> option and then ensure that the <code>.java</code> files are in the classpath.</div>
<p class="subhead2"><a id="JSQLJ619"></a>Processing to Avoid Source Conflicts</p>
<p>The SQLJ translator takes steps to try to prevent having multiple source files define the same class in the same location. If your command-line file list includes multiple references to the same <code>.sqlj</code> or <code>.java</code> file, then all but the first reference are discarded from the command line. In addition, if you list a <code>.java</code> and <code>.sqlj</code> file with the same base name and in the same location without using the <code>-dir</code> option, then only the <code>.sqlj</code> file is processed. This processing also applies to wildcard characters.</p>
<p>Consider the following command-line examples, where <code>%</code> is the system prompt. Assume that your current directory is <code>/myhome/mypackage</code>, which contains the files <code>Foo.sqlj</code> and <code>Foo.java</code>:</p>
<pre>% sqlj Foo.sqlj /myhome/mypackage/Foo.sqlj
</pre>
<p>These both refer to the same file, so the translator discards <code>/myhome/mypackage/Foo.sqlj</code> from the command line.</p>
<pre>% sqlj Foo.sqlj Foo.java
</pre>
<p>The translator discards <code>Foo.java</code> from the command line. Otherwise, this command line would result in the translator writing and reading from <code>Foo.java</code> in the same execution.</p>
<pre>% sqlj Foo.*
</pre>
<p>Again, the translator discards <code>Foo.java</code> from the command line. Otherwise, the translator would find both <code>Foo.sqlj</code> and <code>Foo.java</code>, which again would cause it to write and read from <code>Foo.java</code> in the same execution.</p>
<pre>% sqlj -dir=outdir -d=outclasses Foo.sqlj Foo.java
</pre>
<p>This is fine, because the generated <code>Foo.java</code> will be in the <code>outdir</code> subdirectory, while the <code>Foo.java</code> being read is in the <code>/myhome/mypackage</code> directory. Presuming that <code>Foo.java</code> and <code>Foo.sqlj</code> define classes in different packages, the <code>.class</code> files created by Java compilation will be placed in different subdirectories under the <code>outclasses</code> directory hierarchy.</p>
<p>This processing of the command line means that you can, for example, type the following command and have it execute without difficulty (with file references being automatically discarded as necessary):</p>
<pre>% sqlj *.sqlj *.java
</pre>
<p>This is convenient in many situations.</p>
<p class="subhead2"><a id="JSQLJ620"></a>Command-<a id="sthref604"></a>Line Example and Results</p>
<p>The following is a sample command line, where <code>%</code> is the system prompt. This example uses some advanced concepts more fully explained later in this chapter, but is presented in the interest of showing a complete example of command-line syntax.</p>
<pre>% sqlj -J-Duser.language=ja  -warn=none -J-prof -encoding=SJIS *Bar.sqlj Foo*.java
</pre>
<p>The <code>sqlj</code> script invokes a JVM, passes it the class name of the SQLJ translator, then passes it the command-line arguments. The JVM passes the SQLJ options to the translator and compiler. If there are any options for the JVM, as designated by <code>-J</code>, then the script passes them to the JVM ahead of the translator class file name (just as you would type Java options prior to typing the class file name if you were invoking Java manually). There is no customization in this example, because it uses the default Oracle-specific code generation.</p>
<p>After these steps are completed, the results are equivalent to the user having typed the following (presuming <code>SushiBar.sqlj</code>, <code>DiveBar.sqlj</code>, <code>FooBar.java</code>, and <code>FooBaz.java</code> were all in the current directory):</p>
<pre>% java -Duser.language=ja -prof sqlj.tools.Sqlj -warn=none -encoding=SJIS SushiBar.sqlj DiveBar.sqlj FooBar.java FooBaz.java
</pre>
<p>Note that this is one wraparound command line.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007773">&#34;Options to Pass to the Java Virtual Machine (-J)&#34;</a></div>
<p class="subhead2"><a id="JSQLJ621"></a>Echoing the <a id="sthref605"></a><a id="sthref606"></a>Command Line without Executing</p>
<p>You can use the SQLJ <code>-n</code> option (or, alternatively, <code>-vm</code>=<code>echo</code>) to echo the command line that the <code>sqlj</code> script would construct and pass to the SQLJ translator, without executing it. This includes settings in the <code>SQLJ_OPTIONS</code> environment variable as well as on the command line, but does not include settings in properties files.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006747">&#34;Command Line Echo without Execution (-n)&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BCEDBIHH"></a>
<div id="JSQLJ622" class="sect2">
<h3 class="sect2">Properties <a id="sthref607"></a>Files for Option Settings</h3>
<p>You can use properties files, instead of the command line, to set options for the SQLJ translator, Java compiler, and SQLJ profile customizer.</p>
<p>In addition, if your Java compiler will be running in a separate JVM and you want to specify options to this JVM regarding operation of the compiler, then you can use properties files to supply such options. Such options are passed to the JVM at the time the compiler is run, after the SQLJ translation step. However, it is typical to pass options to the JVM of the compiler by using the command-line <code>-C-J</code> prefix.</p>
<p>You <span class="italic">cannot</span> use properties files to set the following SQLJ options, flags, and prefixes:</p>
<ul>
<li>
<p><code>-classpath</code></p>
</li>
<li>
<p><code>-help</code>, <code>-help-long</code>, <code>-help-alias</code>, <code>-C-help</code>, <code>-P-help</code></p>
</li>
<li>
<p><code>-J</code></p>
</li>
<li>
<p><code>-n</code></p>
</li>
<li>
<p><code>-passes</code></p>
</li>
<li>
<p><code>-props</code></p>
</li>
<li>
<p><code>-version</code>, <code>-version-long</code></p>
</li>
<li>
<p><code>-vm</code></p>
</li>
</ul>
<p>It is not possible to use properties files to specify options to the JVM, for example, because properties files are read after the JVM is invoked.</p>
<p>Also note that in properties files you cannot use option abbreviations recognized on the command line for compatibility with <code>loadjava</code> (<code>-e</code>, <code>-h</code>, <code>-p</code>, <code>-u</code>, <code>-v</code>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Discussion of SQLJ properties files applies only to client-side SQLJ, not server-side SQLJ. There is a different mechanism for specifying options to SQLJ in the server, and only a small subset of options are supported. For information, refer to <a href="inserver.htm#CCHBGEBD">&#34;Option Support in the Server Embedded Translator&#34;</a>.</div>
<p class="subhead2"><a id="i1006412"></a><a id="JSQLJ623"></a>Properties <a id="sthref608"></a><a id="sthref609"></a>File Syntax</p>
<p>Option settings in a properties file are placed one per line. Lines with SQLJ options, compiler options, and customizer options can be interspersed. They are parsed by the SQLJ front end and processed appropriately.</p>
<p>Syntax for the different kinds of options is as follows:</p>
<ul>
<li>
<p>Each SQLJ option is prefixed by <code>sqlj.</code> (including the period) instead of an initial hyphen. Only options that start with this prefix are passed to the SQLJ translator. For example:</p>
<pre>sqlj.warn=none
sqlj.linemap=true
</pre></li>
<li>
<p>Each Java compiler option is prefixed by <code>compile.</code> (including the period) instead of <code>-C-</code>. Options that start with this prefix are passed to the Java compiler. For example:</p>
<pre>compile.verbose
compile.bootclasspath=/usr/local/packages/jdk6/jre/lib/rt.jar
</pre></li>
<li>
<p>General profile customization options, which apply regardless of the particular customizer you are using, are prefixed by <code>profile.</code> (including the period) instead of <code>-P-</code>. Only options that start with this prefix are passed to the profile customizer. For example:</p>
<pre>profile.backup
profile.user=HR/hr
</pre>
<p>You can also specify options to a particular customizer by using <code>profile.C</code> as follows:</p>
<pre>profile.Csummary
profile.Coptparamdefaults=VAR%(50),LONG%(500),RAW_TYPE()
</pre>
<p>Any profile customization other than the default Oracle customization is considered an advanced feature.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="profcust.htm#BHAECCFI">Appendix A, &#34;Customization and Specialized Customizers&#34;</a></div>
</li>
<li>
<p>Comment lines start with a pound sign (<code>#</code>). For example:</p>
<pre># Comment line.
</pre></li>
<li>
<p>Blank lines are also permitted.</p>
</li>
</ul>
<p>As on the command line, a flag can be enabled or disabled in a properties file with <code>true</code>/<code>false</code>, <code>on</code>/<code>off</code>, <code>1</code>/<code>0</code>, or <code>yes</code>/<code>no</code>. A flag can also be enabled simply by entering it without a setting, such as the following:</p>
<pre>sqlj.linemap
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For consistency, it is best to always use the equal sign (=) in a properties file for options that take values, even though there are some circumstances where a space also works.</div>
<p class="subhead2"><a id="JSQLJ624"></a>Properties File: Simple Example</p>
<p>The following are sample properties file entries:</p>
<pre># Set user and JDBC driver
sqlj.user=HR
sqlj.driver=oracle.jdbc.OracleDriver 

# Turn on the compiler verbose option
compile.verbose
</pre>
<p>These entries are equivalent to having the following on the SQLJ command line:</p>
<pre>% sqlj -user=HR -driver=oracle.jdbc.OracleDriver -C-verbose
</pre>
<p class="subhead2"><a id="JSQLJ625"></a>Properties File: Nondefault Connection Context Classes</p>
<p>Following is a sample properties file that specifies settings for a connection context class, <code>SourceContext</code>, that you declared:</p>
<pre># JDBC driver
sqlj.driver=oracle.jdbc.OracleDriver

# Oracle 9.2 on spock.natdecsys.com
sqlj.user@SourceContext=sde
sqlj.password@SourceContext=fornow
sqlj.url@SourceContext=jdbc:oracle:thin:@localhost:5221/myservice

# Warning settings
sqlj.warn=all

# Cache
sqlj.cache=on
</pre>
<p class="subhead2"><a id="JSQLJ626"></a>Default <a id="sthref610"></a><a id="sthref611"></a>Properties Files</p>
<p>Regardless of whether a properties file is specified on the SQLJ command line, the SQLJ front end looks for files named <code>sqlj.properties</code>. It looks for them in the Java home directory, the user home directory, and the current directory, in that order. It processes each <code>sqlj.properties</code> file it finds, overriding previously set options as it encounters new ones. Thus, options set in the <code>sqlj.properties</code> file in the current directory override those set in the <code>sqlj.properties</code> file in the user home directory or Java home directory.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BCEJEEEF">&#34;Order of Precedence of Option Settings&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1006487"></a>
<div id="JSQLJ627" class="sect2">
<h3 class="sect2">SQLJ_OPTIONS <a id="sthref612"></a><a id="sthref613"></a>Environment Variable for Option Settings</h3>
<p>The Oracle SQLJ implementation supports an environment variable called <code>SQLJ_OPTIONS</code> as an alternative to the command line for setting SQLJ options. Any option referred to as command line only, meaning it cannot be set in a properties file, can also be set using the <code>SQLJ_OPTIONS</code> variable.</p>
<p>You can use the <code>SQLJ_OPTIONS</code> variable to set any SQLJ option, but it is intended especially for option settings to be passed to the JVM. And it is particularly useful for command-line-only options, such as <code>-classpath</code>, that you use repeatedly with the same setting.</p>
<p>Following is an example of a <code>SQLJ_OPTIONS</code> setting:</p>
<pre>-vm=jview -J-verbose
</pre>
<p>When you use <code>SQLJ_OPTIONS</code>, SQLJ effectively inserts the <code>SQLJ_OPTIONS</code> settings, in order, at the beginning of the SQLJ command line, prior to any other command-line option settings.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Generally, syntax in <code>SQLJ_OPTIONS</code> is the same as on the command line, but this may depend on your operating system. There can be operating system specific restrictions. For example, on Microsoft Windows 95 you use the <code>Environment</code> tab in the <code>System</code> control panel. Additionally, because Windows 95 does not support the equal sign (=) in variable settings, SQLJ supports the use of <code>#</code> instead of <code>=</code> in setting <code>SQLJ_OPTIONS</code>. Refer to your operating system documentation.</div>
</div>
<!-- class="sect2" -->
<a id="BCEJEEEF"></a>
<div id="JSQLJ628" class="sect2">
<h3 class="sect2">Order of <a id="sthref614"></a>Precedence of Option Settings</h3>
<p>SQLJ takes option settings in the following order:</p>
<ol>
<li>
<p>Sets options to default settings, where applicable.</p>
</li>
<li>
<p>Looks for a <code>sqlj.properties</code> file in the Java home directory. If it finds one, it sets options as specified there.</p>
</li>
<li>
<p>Looks for a <code>sqlj.properties</code> file in the user home directory. If it finds one, it sets options as specified there.</p>
</li>
<li>
<p>Looks for a <code>sqlj.properties</code> file in the current directory. If it finds one, it sets options as specified there.</p>
</li>
<li>
<p>It looks for option settings in the <code>SQLJ_OPTIONS</code> environment variable and effectively prepends them to the beginning of the command line. It sets options as specified in <code>SQLJ_OPTIONS</code>.</p>
</li>
<li>
<p>It looks for option settings on the command line and sets options as specified there. As SQLJ processes the command line, it looks in any file specified by the <code>-props</code> option and sets options as specified there.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>At each step, SQLJ overrides any previous settings for any given option.</p>
</li>
<li>
<p>In the <code>sqlj.properties</code> files, SQLJ reads option settings from top to bottom, with later entries taking precedence over earlier entries.</p>
</li>
<li>
<p>If there is a properties file specified by the <code>-props</code> option on the command line, SQLJ effectively inserts the option settings of the file into the position on the command line where the <code>-props</code> option was specified.</p>
</li>
<li>
<p>SQLJ reads options on the command line, with options from a <code>-props</code> file inserted, in order from left to right. Any later (right-hand) setting takes precedence over earlier (left-hand) settings.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="JSQLJ629"></a>Example</p>
<p>Presume SQLJ is run as follows:</p>
<pre>% sqlj -user=HR -props=myprops.properties -dir=/home/java
</pre>
<p>And presume the file <code>myprops.properties</code> is in the current directory and contains the following entries:</p>
<pre>sqlj.user=tony
sqlj.dir=/home/myjava
</pre>
<p>These settings are processed as if they were inserted into the command line where the <code>-props</code> option was specified. Therefore, the <code>tony</code> entry takes precedence over the <code>HR</code> entry for the <code>user</code> option, but the <code>/home/java</code> entry takes precedence over the <code>/home/myjava</code> entry for the <code>dir</code> option.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006528"></a>
<div id="JSQLJ630" class="sect1">
<h2 class="sect1">Basic Translator Options</h2>
<p>This section documents the syntax and functionality of the basic flags and options you can specify in running SQLJ. These options enable you to run in a fairly standard mode of operation. For options that can also be specified in a properties file, that syntax is noted as well.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1006571">Basic Options for the Command Line Only</a></p>
</li>
<li>
<p><a href="#i1006791">Options for Output Files and Directories</a></p>
</li>
<li>
<p><a href="#i1006917">Connection Options</a></p>
</li>
<li>
<p><a href="#i1007274">Options for Reporting and Line-Mapping</a></p>
</li>
<li>
<p><a href="#i1011783">Options for DMS</a></p>
</li>
<li>
<p><a href="#BCEGHEDB">Options for Code Generation, Optimizations, and CHAR Comparisons</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BCEDBIHH">&#34;Properties Files for Option Settings&#34;</a></p>
</li>
<li>
<p><a href="#i1007731">&#34;Advanced Translator Options&#34;</a></p>
</li>
<li>
<p><a href="#i1008460">&#34;Translator Support and Options for Alternative Environments&#34;</a></p>
</li>
</ul>
</div>
<a id="i1006571"></a>
<div id="JSQLJ631" class="sect2">
<h3 class="sect2">Basic <a id="sthref615"></a>Options for the Command Line Only</h3>
<p>The following basic options can be specified only on the SQLJ command line or, equivalently, in the <code>SQLJ_OPTIONS</code> environment variable:</p>
<ul>
<li>
<p><code>-props</code></p>
</li>
<li>
<p><code>-classpath</code></p>
</li>
<li>
<p><code>-help</code>, <code>-help-long</code>, <code>-help-alias</code>, <code>-P-help</code>, <code>-C-help</code></p>
</li>
<li>
<p><code>-version</code>, <code>-version-long</code></p>
</li>
<li>
<p><code>-n</code></p>
</li>
</ul>
<p>These options <span class="italic">cannot</span> be specified in properties files. The command-line-only flags (<code>-help</code>, <code>-version</code>, and <code>-n</code>) do <span class="italic">not</span> support <code>=</code><code>true</code> syntax. Enable them by typing only the flag name, as follows:</p>
<pre>sqlj -version-long
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Additionally, there are advanced options, flags, and prefixes that can be set only on the command line or in <code>SQLJ_OPTIONS</code>: <code>-J</code>, <code>-passes</code>, and <code>-vm</code>.</div>
<p class="subhead2"><a id="JSQLJ632"></a>Input <a id="sthref616"></a><a id="sthref617"></a>Properties File (-props)</p>
<p>The <code>-props</code> option specifies a properties file from which SQLJ can read option settings. The command-line syntax is as follows:</p>
<pre>-props=<span class="italic">filename</span>
</pre>
<p>For example:</p>
<pre>-props=myprops.properties
</pre>
<p class="subhead2"><a id="i1006608"></a><a id="JSQLJ633"></a>Classpath for <a id="sthref618"></a><a id="sthref619"></a><a id="sthref620"></a><a id="sthref621"></a>Java Virtual Machine and Compiler (-classpath)</p>
<p>For compatibility with the syntax of most JVMs and compilers, SQLJ recognizes the <code>-classpath</code> option if it is specified on the command line. In setting this option, you can use either a space, as with most JVMs or compilers, or the equal sign (=), as with other SQLJ options. The following examples (both for a UNIX environment) demonstrate this:</p>
<pre>-classpath .:$ORACLE_HOME/jdbc/lib/ojdbc6.jar:$ORACLE_HOME/sqlj/lib/translator.jar:$ORACLE_HOME/sqlj/lib/runtime12.jar

-classpath= .:$ORACLE_HOME/jdbc/lib/ojdbc6.jar:$ORACLE_HOME/sqlj/lib/translator.jar:$ORACLE_HOME/sqlj/lib/runtime12.jar
</pre>
<p>The <code>-classpath</code> option sets the Java classpath for both the JVM and the Java compiler. If you do not want to use the same classpath for both, then set them separately using the SQLJ <code>-J</code> and <code>-C</code> prefixes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007766">&#34;Prefixes that Pass Option Settings to Other Executables&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
As with other options described in this chapter, if you use <code>=</code> in setting the <code>-classpath</code> option, then it is stripped out when the option string is passed to the JVM and compiler, because JVMs and compilers do not support the <code>=</code> syntax in their option settings.</div>
<p>The command-line syntax is as follows</p>
<pre>sqlj -classpath=<span class="italic">class_path</span>
</pre>
<p>For example:</p>
<pre>sqlj -classpath=$ORACLE_HOME/jdbc/lib/ojdbc6.jar:$ORACLE_HOME/sqlj/lib/translator.jar:$ORACLE_HOME/sqlj/lib/runtime12.jar
</pre>
<p class="subhead2"><a id="i1006639"></a><a id="JSQLJ634"></a>SQLJ <a id="sthref622"></a><a id="sthref623"></a>Option Information (-help)</p>
<p>The following settings of the <code>-help</code> flag, specified on the command line, instruct SQLJ to display varying levels of information about SQLJ options:</p>
<ul>
<li>
<p><code>-help</code></p>
</li>
<li>
<p><code>-help-long</code></p>
</li>
<li>
<p><code>-help-alias</code></p>
</li>
</ul>
<p>You can enable this option by typing the desired setting on the command line as in the following examples:</p>
<pre>% sqlj -help
</pre>
<pre>% sqlj -help-long
</pre>
<pre>% sqlj -help-alias
</pre>
<p>No input-file translation is performed when you use the <code>-help</code> flag in any of these forms, even if you include file names and other options on the command line as well. SQLJ assumes that you either want to run the translator or you want help, but not both.</p>
<p>You can also receive information about the profile customizer or Java compiler, requesting help through the <code>-P</code> and <code>-C</code> prefixes, as in the following examples. As with the <code>-help</code> flag, no translation is performed if you request customizer or compiler help.</p>
<pre>% sqlj -P-help

% sqlj -C-help
</pre>
<p>As with other command-line-only flags, <code>-help</code> (as well as <code>-P-help</code> and <code>-C-help</code>) does <span class="italic">not</span> support <code>=true</code> syntax. Enable it by typing only the desired flag setting.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>For compatibility with the <code>loadjava</code> utility, <code>-h</code> is recognized as equivalent to <code>-help</code> when specified on the command line.</p>
</li>
<li>
<p>You can use multiple <code>-help</code> flag settings on the same command line, including <code>-P-help</code> and <code>-C-help</code>.</p>
</li>
<li>
<p>Although <code>-P</code> and <code>-C</code> settings can generally be set in properties files, <code>-P-help</code> and <code>-C-help</code> are for only the command line.</p>
</li>
<li>
<p>Help is also provided if you run SQLJ without specifying any files to process. This is equivalent to using the <code>-help</code> setting.</p>
</li>
</ul>
</div>
<p>The most basic level of help is achieved by specifying the <code>-help</code> setting. This provides the following:</p>
<ul>
<li>
<p>A synopsis of the most frequently used SQLJ options</p>
</li>
<li>
<p>A listing of the additional <code>-help</code> flag settings available</p>
</li>
</ul>
<p>The <code>-help-long</code> setting provides a complete list of SQLJ option information, including the following for each option:</p>
<ul>
<li>
<p>Option name</p>
</li>
<li>
<p>Option type (the Java type that the option takes as input, such as <code>int</code> or <code>String</code>)</p>
</li>
<li>
<p>Description</p>
</li>
<li>
<p>Current value</p>
</li>
<li>
<p>How the current value was set (from the command line, from a properties file, or by default)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is often useful to include other option settings on the command line with a <code>-help-long</code> option, especially with complex options, such as <code>-warn</code>, or combinations of options, so that you can see what option settings resulted from your actions.</div>
<p>The <code>-help-alias</code> setting provides a synopsis of the command-line abbreviations supported for compatibility with the <code>loadjava</code> utility.</p>
<p>The command-line syntax is as follows:</p>
<pre>sqlj <span class="italic">help_flag_settings</span>
</pre>
<p>For example:</p>
<pre>sqlj -help
sqlj -help -help-alias
sqlj -help-long
sqlj -warn=none,null -help-long
sqlj -help-alias
</pre>
<p>By default, these settings are disabled.</p>
<p class="subhead2"><a id="JSQLJ635"></a>SQLJ <a id="sthref624"></a>Version Number (-version)</p>
<p>The following settings of the <code>-version</code> flag, specified on the command line, instruct SQLJ to display varying levels of information about SQLJ and JDBC driver versions:</p>
<ul>
<li>
<p><code>-version</code></p>
</li>
<li>
<p><code>-version-long</code></p>
</li>
</ul>
<p>You can enable this option by typing the desired setting on the command line as in the following examples:</p>
<pre>% sqlj -version
</pre>
<pre>% sqlj -version-long
</pre>
<p>No input-file translation is performed when you use the <code>-version</code> option, even if you include file names and other options on the command line. SQLJ assumes that you either want to run the translator or you want version information, but not both. Properties files and anything else you type on the command line are ignored. As with other command-line-only flags, <code>-version</code> does <span class="italic">not</span> support the <code>=true</code> syntax. Enable it by typing only the flag name.</p>
<p>The <code>-version</code> setting displays the SQLJ release number, as follows:</p>
<pre>sqlj -version
Oracle SQLJ Release 12.1.0.1.0 Production
Copyright &copy; 1997, 2012, Oracle Corporation. All Rights Reserved.
</pre>
<p>The <code>-version-long</code> setting displays information about the SQLJ and SQLJ run-time library release, the JDBC driver release number if one can be found, and the Java environment. For example, if an Oracle JDBC driver is used, this option would display something as follows:</p>
<pre>sqlj -version-long
Oracle SQLJ Release 12.1.0.1.0 Production
Copyright &copy; 1997, 2012, Oracle Corporation. All Rights Reserved.
JDBC version: Oracle JDBC driver version 12.1 (12.1.0.1.0)
Java version: 1.6 (1.6.0_04)
</pre>
<p>This flag offers a good way to check your SQLJ installation and the JDBC and JDK versions you are using. The command-line syntax is as follows:</p>
<pre>sqlj <span class="italic">version_flag_settings</span>
</pre>
<p>For example:</p>
<pre>sqlj -version
sqlj -version -version-long
sqlj -version-long
</pre>
<p>By default, these settings are disabled.</p>
<p class="subhead2"><a id="i1006747"></a><a id="JSQLJ636"></a>Comm<a id="sthref625"></a><a id="sthref626"></a>and Line Echo without Execution (-n)</p>
<p>The <code>-n</code> flag, specified on the command line, instructs the <code>sqlj</code> script to construct the full command line that would be passed to the SQLJ translator, including any <code>SQLJ_OPTIONS</code> settings, and echo it to the user without having the SQLJ translator execute it. This includes capturing and echoing the name of the JVM that would be launched to execute the SQLJ translator and echoing the full class name of the translator. This does <span class="italic">not</span> include settings from properties files.</p>
<p>This is useful in displaying the following:</p>
<ul>
<li>
<p>The fully expanded form of any options you abbreviated, such as <code>-u</code> and other abbreviations supported for <code>loadjava</code> compatibility.</p>
</li>
<li>
<p>The order in which options would be placed when the overall command string is constructed and passed to the translator.</p>
</li>
<li>
<p>Possible conflicts between <code>SQLJ_OPTIONS</code> settings and command-line settings.</p>
</li>
</ul>
<p>The <code>-n</code> option can appear anywhere on the command line or in the <code>SQLJ_OPTIONS</code> variable. As with other command-line-only flags, <code>-n</code> does <span class="italic">not</span> support the <code>=true</code> syntax. Enable it by typing only the flag name.</p>
<p>Consider a sample scenario. You have the following setting for <code>SQLJ_OPTIONS</code>:</p>
<pre>-user=HR/hr@jdbc:oracle:thin:@ -classpath=/myclasses/bin
</pre>
<p>You enter the following command line:</p>
<pre>% sqlj -n -e SJIS myapp.sqlj
</pre>
<p>You would see the following echo:</p>
<pre>java -classpath /myclasses/bin sqlj.tools.Sqlj -user=HR/hr@jdbc:oracle:thin:@ -C-classpath=/myclasses/bin 
-encoding=SJIS myapp.sqlj
</pre>
<p>Note that this is all one wraparound line.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Echoing your password at the command-line is not a secure practice.</p>
</li>
<li>
<p>As an alternative to <code>-n</code>, you can use the <code>-vm</code>=<code>echo</code> setting.</p>
</li>
<li>
<p>Another effective way to check option settings is to use the <code>-help-long</code> flag. This displays current settings for all options, including other options you set on the command line as well as settings in properties files and in <code>SQLJ_OPTIONS</code>.</p>
</li>
</ul>
</div>
<p>The command-line syntax is as follows:</p>
<pre>-n
</pre>
<p>For example:</p>
<pre>-n
</pre>
<p>By default, this setting is disabled.</p>
</div>
<!-- class="sect2" -->
<a id="i1006791"></a>
<div id="JSQLJ637" class="sect2">
<h3 class="sect2">Options <a id="sthref627"></a><a id="sthref628"></a>for Output Files and Directories</h3>
<p>The <code>-encoding</code> option specifies encoding for SQLJ input and output source files. The following options specify where SQLJ output files are placed:</p>
<ul>
<li>
<p><code>-d</code></p>
</li>
<li>
<p><code>-dir</code></p>
</li>
</ul>
<p class="subhead2"><a id="i1006799"></a><a id="JSQLJ638"></a>Encoding for <a id="sthref629"></a><a id="sthref630"></a>Input and Output Source Files (-encoding)</p>
<p>The <code>-encoding</code> option specifies the encoding to be applied to <code>.sqlj</code> and <code>.java</code> input files and <code>.java</code> generated files for globalization support. For compatibility with <code>javac</code>, you can use either a space or equal sign (=) in setting this option on the command line, as in the following examples:</p>
<pre>-encoding=SJIS

-encoding SJIS
</pre>
<p>However, if setting <code>sqlj.encoding</code> in a properties file, then use <code>=</code>, not a space.</p>
<p>When this option is specified, it is also passed to the Java compiler, unless the <code>-compiler-encoding-flag</code> is off, which uses it to specify encoding for <code>.java</code> files processed by the compiler.</p>
<p>Note the following:</p>
<ul>
<li>
<p>As with the <code>-classpath</code> and <code>-d</code> options, if you do use an <code>=</code> in setting the <code>-encoding</code> option, then it is stripped out when the option string is passed to the JVM and compiler. This is because JVMs and compilers do not support the <code>=</code> syntax in their option settings.</p>
</li>
<li>
<p>For compatibility with the <code>loadjava</code> utility, <code>-e</code> is recognized as equivalent to <code>-encoding</code> when specified on the command line.</p>
</li>
<li>
<p>The <code>-encoding</code> option does not apply to Java properties files, such as <code>sqlj.properties</code> and <code>connect.properties</code>. Properties files always use the encoding <code>8859_1</code>. This is a feature of Java in general, not SQLJ in particular. However, you can use Unicode escape sequences in a properties file. You can use the <code>native2ascii</code> utility to create escape sequences for a natively encoded file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transrun.htm#i1006518">&#34;Using native2ascii for Source File Encoding&#34;</a></div>
</li>
</ul>
<p>The command-line syntax is as follows:</p>
<pre>-encoding=<span class="italic">Java_character_encoding</span>
</pre>
<p>For example:</p>
<pre>-encoding=SJIS
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.encoding=<span class="italic">Java_character_encoding</span>
</pre>
<p>For example</p>
<pre>sqlj.encoding=SJIS
</pre>
<p>By default, this option is set to the JVM system property <code>file.encoding</code>.</p>
<p class="subhead2"><a id="i1006835"></a><a id="JSQLJ639"></a>Output <a id="sthref631"></a><a id="sthref632"></a><a id="sthref633"></a>Directory for Generated .ser and .class Files (-d)</p>
<p>The <code>-d</code> option specifies the root output directory for profiles generated by the SQLJ translator (relevant for ISO standard code generation, <code>-codegen</code>=<code>iso</code>), and is also passed to the Java compiler to specify the root output directory for <code>.class</code> files generated by the compiler. Whether profiles are generated as <code>.ser</code> files (default) or <code>.class</code> files (if the <code>-ser2class</code> option is enabled) is irrelevant for placement through the <code>-d</code> option.</p>
<p>Whenever a directory is specified, the output files are generated under this directory according to the package name, if applicable. For example, if you have source files in the <code>a.b.c</code> package and specify directory, <code>/mydir</code>, output files will be placed in the <code>/mydir/a/b/c</code> directory. If you specify a relative directory path, then this will be from your current directory.</p>
<p>For compatibility with <code>javac</code>, you can use either a space or <code>=</code> in setting this option on the command line, as in the following examples (both of which make <code>/root</code> the root directory for generated profile files):</p>
<pre>-d=/root

-d /root
</pre>
<p>However, if setting <code>-d</code> in a properties file, then use <code>=</code>, not a space. For example:</p>
<pre>sqlj.d=/root
</pre>
<p>If your current directory is <code>/root/home/mydir</code> and you set the <code>-d</code> option to the relative directory path, <code>mysubdir/myothersubdir</code>, as follows, then <code>/root/home/mydir/mysubdir/myothersubdir</code> will be the root directory for the generated profile files:</p>
<pre>-d=mysubdir/myothersubdir
</pre>
<p>You can also use standard syntax, such as a period for the current directory or two periods to go up a level, as follows:</p>
<pre>-d=.

-d=../paralleldir
</pre>
<p>If the <code>-d</code> option is empty or not specified, then a generated <code>.class</code> file is placed in the same directory as the corresponding <code>.java</code> file, which is according to the <code>-dir</code> option for a <code>.java</code> file generated by SQLJ, and a generated <code>.ser</code> file is placed in the same directory as the corresponding <code>.sqlj</code> file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You can specifically set <code>-d</code> to be empty (to override settings in a properties file, for example) as follows:</p>
<pre>-d=
</pre></li>
<li>
<p>Throughout this discussion, slash (/) was used as the file separator. However, it is important to note that in specifying this, or similar options, you must actually use the file separator of your operating system, as specified in the <code>file.separator</code> system property of your JVM.</p>
</li>
<li>
<p>As with the <code>-classpath</code> and <code>-encoding</code> options, if you do use an equal sign (=) in setting the <code>-d</code> option, then it is stripped out when the option string is passed to the JVM and compiler. This is because JVMs and compilers do not support the <code>=</code> syntax in their option settings.</p>
</li>
</ul>
</div>
<p>The command-line syntax is as follows:</p>
<pre>-d=<span class="italic">directory_path</span>
</pre>
<p>For example:</p>
<pre>-d=/topleveldir/mydir
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.d=<span class="italic">directory_path</span>
</pre>
<p>For example:</p>
<pre>sqlj.d=/topleveldir/mydir
</pre>
<p>This option does not have any default value.</p>
<p class="subhead2"><a id="i1006879"></a><a id="JSQLJ640"></a>Output <a id="sthref634"></a><a id="sthref635"></a><a id="sthref636"></a>Directory for Generated .java Files (-dir)</p>
<p>The <code>-dir</code> option specifies the root directory for <code>.java</code> files generated by the SQLJ translator. Whenever a directory is specified, the output files are generated under this directory according to the package name, if applicable. For example, if you have source files in the <code>a.b.c</code> package and specify directory, <code>/mydir</code>, then output files will be placed in the <code>/mydir/a/b/c</code> directory. If you specify a relative directory path, then it will be from your current directory.</p>
<p>A simple example is as follows, which will make <code>/root</code> the root directory for generated <code>.java</code> files:</p>
<pre>-dir=/root
</pre>
<p>Consider that your current directory is <code>/root/home/mydir</code> and you set the <code>-dir</code> option to the relative directory path <code>mysubdir/myothersubdir</code> as follows:</p>
<pre>-dir=mysubdir/myothersubdir
</pre>
<p>Then <code>/root/home/mydir/mysubdir/myothersubdir</code> will be the root directory for generated <code>.java</code> files.</p>
<p>You can also use standard syntax, such as a period for the current directory or two periods to go up a level, as follows:</p>
<pre>-dir=.

-dir=../paralleldir
</pre>
<p>If the <code>-dir</code> option is not specified, then files are generated under the same directory as the original <code>.sqlj</code> source file (<span class="italic">not</span> under the current directory). If you specifically want the output directory to be the same as your <code>.sqlj</code> source directory (perhaps overriding other <code>-dir</code> settings, such as in properties files), then you can use the <code>-dir</code> option as follows:</p>
<pre>-dir=
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you specify the <code>-dir</code> option but not the <code>-d</code> option, then generated <code>.class</code> files will also be placed in the directory specified by <code>-dir</code>, but generated <code>.ser</code> files will be placed in the directory of the <code>.sqlj</code> file.</div>
<p>The command-line syntax is as follows:</p>
<pre>-dir=<span class="italic">directory_path</span>
</pre>
<p>For example:</p>
<pre>-dir=/topleveldir/mydir
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.dir=<span class="italic">directory_path</span>
</pre>
<p>For example:</p>
<pre>sqlj.dir=/topleveldir/mydir
</pre>
<p>This option does not have any default value.</p>
</div>
<!-- class="sect2" -->
<a id="i1006917"></a>
<div id="JSQLJ641" class="sect2">
<h3 class="sect2">Connection <a id="sthref637"></a><a id="sthref638"></a>Options</h3>
<p>You can use the following options for the database connection for online semantics-checking:</p>
<ul>
<li>
<p><code>-user</code></p>
</li>
<li>
<p><code>-password</code></p>
</li>
<li>
<p><code>-url</code></p>
</li>
<li>
<p><code>-default-url-prefix</code></p>
</li>
<li>
<p><code>-driver</code></p>
</li>
<li>
<p><code>driver_name</code></p>
</li>
</ul>
<p>There is no requirement for the SQLJ translator to connect to the same database or schema as the application does at run time. The connection information in application source code can be independent of the connection information in the SQLJ options. In fact, the deployment environment might be unavailable during development and testing.</p>
<p class="subhead2"><a id="i1006927"></a><a id="JSQLJ642"></a>Online <a id="sthref639"></a><a id="sthref640"></a><a id="sthref641"></a>Semantics-Checking and User Name (-user)</p>
<p>Simple semantics-checking not involving a database connection is referred to as offline checking. The more thorough semantics-checking requiring a connection is referred to as online checking. Online checking offers one of the prime advantages of the SQLJ strong-typing paradigm, namely that type incompatibilities that would usually result in run-time SQL exceptions are caught during translation, before users ever run the application.</p>
<p>The <code>-user</code> option enables online semantics-checking and specifies the user name (schema name) for the exemplar schema, which is the sample database schema that you provide to the translator for it to use in performing the checking. You can also use the <code>-user</code> option to specify the password and URL, as opposed to using the <code>-password</code> and <code>-url</code> options separately.</p>
<p>Note that there is no other flag to enable or disable online semantics-checking. SQLJ enables or disables it according to the presence or absence of the <code>-user</code> option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Some settings of the SQLJ <code>-parse</code> option will disable online semantics-checking, overriding the effect of the <code>-user</code> option.</p>
</li>
<li>
<p>For compatibility with the <code>loadjava</code> utility, <code>-u</code> is recognized as equivalent to <code>-user</code> when specified on the command line.</p>
</li>
<li>
<p>User names cannot contain the characters <code>/</code> or <code>@</code>.</p>
</li>
<li>
<p>You are allowed to use a space instead of <code>=</code> in a user name setting on the command line, as in the following examples:</p>
<pre>-user HR/<span class="italic">password</span>
-user@CtxClass HR/<span class="italic">password</span>
-u HR/<span class="italic">password</span>
-u@CtxClass HR/<span class="italic">password</span>
</pre></li>
<li>
<p>If a password contains the character <code>@</code>, then you cannot set the password through the <code>-user</code> option. You must use separate <code>-user</code> and <code>-password</code> settings.</p>
</li>
<li>
<p>If your login name is a member of the <code>DBA</code> group, you may have special privilege to connect as <code>SYSDBA</code> to the <code>SYS</code> schema. In this case, you can specify the user name <code>SYS</code> or <code>INTERNAL</code>.</p>
</li>
<li>
<p>For ISO code generation, the translator <code>-user</code> setting is forwarded to the profile customizer, but can be overridden by the customizer <code>user</code> setting.</p>
</li>
</ul>
</div>
<p>The most basic usage of the <code>-user</code> option is as follows:</p>
<pre>-user=HR
</pre>
<p>When you are using only the default connection or other instances of the <code>DefaultContext</code> class, such a setting will apply to all your SQLJ executable statements. This example results in online checking against the <code>HR</code> schema.</p>
<p>You can also specify the password, URL, or both along with the user name, using syntax as in the following examples (with <code>/</code> preceding the password and <code>@</code> preceding the URL):</p>
<pre>-user=HR/<span class="italic">password</span>
</pre>
<pre>-user=HR@jdbc:oracle:oci:@
</pre>
<pre>-user=HR/<span class="italic">password</span>@jdbc:oracle:oci:@
</pre>
<p>Otherwise, the URL can be specified through the <code>-url</code> option, and the password can be specified interactively or through the <code>-password</code> option.</p>
<p>You can disable online semantics-checking by setting the <code>-user</code> option to an empty string, as follows:</p>
<pre>-user=
</pre>
<p>Again, when you are using only the default connection or other instances of the <code>DefaultContext</code> class, this will apply to all your SQLJ executable statements.</p>
<p>Disabling online semantics-checking is useful, for example, if you have online checking enabled in a properties file but want to override that on the command line, or have it enabled in the default properties file but want to override that in a user-specified properties file, specified using the <code>-props</code> option.</p>
<p>There is also a special user name, <code>URL.CONNECT</code>, which you can use when the URL specifies the user and password as well as the other details of the connection.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007137">&#34;Connection URL for Online Semantics-Checking (-url)&#34;</a></div>
<p>If you declare and use additional connection context classes in your application, then you can specify <code>-user</code> settings for the testing of SQLJ executable statements that use instances of those classes. Specify a user name for online checking against a particular connection context class, for example, <code>CtxClass</code>, as follows:</p>
<pre>-user@CtxClass=HR
</pre>
<p>This results in online checking against the <code>HR</code> schema for any of your SQLJ executable statements that specify a connection context instance of <code>CtxClass</code>.</p>
<p>As with the default connection context class, you can also specify the password or URL in your -<code>user</code> setting for a particular connection context class, as in the following example:</p>
<pre>-user@CtxClass=HR/<span class="italic">password</span>@jdbc:oracle:oci:@
</pre>
<p>The <code>CtxClass</code> connection context class must be declared in your source code or previously compiled into a <code>.class</code> file.</p>
<p>Use the -<code>user</code> option separately for each connection context class for which you want to enable online checking and set a user name. These settings have no influence on each other. For example:</p>
<pre>-user@CtxClass1=user1 -user@CtxClass2=user2 -user@CtxClass3=user3
</pre>
<p>When you are using multiple connection context classes in your application, a -<code>user</code> setting that does not specify a class will apply to the <code>DefaultContext</code> class as well as to all classes for which you do not otherwise specify a -<code>user</code> setting. Presumably, though, you will specify a -<code>user</code> setting for each connection context class, given that different connection context classes are typically intended for use with different sets of SQL objects.</p>
<p>Consider a situation where you have declared connection context classes <code>CtxClass1</code>, <code>CtxClass2</code>, and <code>CtxClass3</code> and you set -<code>user</code> as follows:</p>
<pre>-user@CtxClass2=HR/<span class="italic">password</span> -user=bill/lion
</pre>
<p>Any statement in your application that uses an instance of <code>CtxClass2</code> will be checked against the <code>HR</code> schema. Any statement that uses an instance of <code>DefaultContext</code>, <code>CtxClass1</code>, or <code>CtxClass3</code> will be checked against the <code>bill</code> schema.</p>
<p>In addition, once you enable online checking by setting the -<code>user</code> option, you can disable online checking for a particular connection context by setting the -<code>user</code> option again with an empty user name for that connection context. For example, consider the following setting:</p>
<pre>-user@CtxClass2=
</pre>
<p>This disables online semantics-checking for any SQLJ executable statements that specify a connection object that is an instance of <code>CtxClass2</code>.</p>
<p>You can disable online semantics-checking for the default connection context class and any other connection context classes for which you do not specify a user name as follows:</p>
<pre>-user=
</pre>
<p>The general command-line syntax for this option is as follows:</p>
<pre>-user&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">username</span>&lt;/<span class="italic">password</span>&gt;&lt;@<span class="italic">url</span>&gt;
</pre>
<p>For example:</p>
<pre>-user=HR
-user=HR/<span class="italic">password</span>
-user=HR@jdbc:oracle:oci:@
-user=HR/<span class="italic">password</span>@jdbc:oracle:oci:@
-user=
-user=URL.CONNECT
-user@CtxClass=HR/<span class="italic">password</span>
-user@CtxClass=
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.user&lt;@<span class="italic">conn _context_class</span>&gt;=<span class="italic">username</span>&lt;/<span class="italic">password</span>&gt;&lt;@<span class="italic">url</span>&gt;
</pre>
<p>For example:</p>
<pre>sqlj.user=HR
sqlj.user=HR/<span class="italic">password</span>
sqlj.user=HR@jdbc:oracle:oci:@
sqlj.user=HR/<span class="italic">password</span>@jdbc:oracle:oci:@
sqlj.user=
sqlj.user=URL.CONNECT
sqlj.user@CtxClass=HR/<span class="italic">password</span>
sqlj.user@CtxClass=
</pre>
<p>This option does not have a default value. By default, there is no online-semantics checking.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware of the difference in format between specifying user, password, and URL in the <code>user</code> option and specifying them in the -<code>url</code> option. In the -<code>url</code> option, the user name and password are included in the URL, immediately following the JDBC driver type. In the -<code>user</code> option they precede the URL.</div>
<p class="subhead2"><a id="JSQLJ643"></a>User <a id="sthref642"></a><a id="sthref643"></a><a id="sthref644"></a>Password for Online Semantics-Checking (-password)</p>
<p>The -<code>password</code> option specifies the user password for the database connection for online semantics-checking. For the -<code>password</code> setting to be meaningful, the -<code>user</code> option must also be set.</p>
<p>You can also specify the password as part of the -<code>user</code> option setting. Do not use the -<code>password</code> option for a connection context class if you have already set its password in the -<code>user</code> option, which takes precedence.</p>
<p>For the most part, functionality of the <code>-password</code> option parallels that of the <code>-user</code> option. That is, if your application uses only the default connection or other instances of <code>DefaultContext</code>, then the following will set the password for the schema to be used in checking all of your SQLJ statements:</p>
<pre>-password=<span class="italic">password</span>
</pre>
<p>If you declare and use additional connection context classes, <code>CtxClass1</code> for example, then you will presumably use the -<code>user</code> option to specify additional exemplar schemas to use in testing statements that use those connection context classes. Similarly, use the -<code>password</code> option to specify passwords for those schemas, as in the following example:</p>
<pre>-password@CtxClass1=<span class="italic">password</span>
</pre>
<p>A connection context class without a password setting, either through the -<code>password</code> setting or the -<code>user</code> setting, uses the password setting for the default connection context class. If you set no password for the default connection context class, then SQLJ prompts you interactively for that password. If you also set no password for a user-defined connection context class, then SQLJ prompts you interactively for that password as well. An exception to this discussion is where user name <code>URL.CONNECT</code> is used. In this case, user name and password are determined from the string specified in the -<code>url</code> setting and any setting of the -<code>password</code> option is ignored.</p>
<p>You can specifically set an empty password to override other settings of the -<code>password</code> option, such as in a properties file, and be prompted interactively. You can do this for the <code>DefaultContext</code> class or any particular connection context class, as in the following examples:</p>
<pre>-password=
</pre>
<pre>-password@CtxClass1=
</pre>
<p>If you actually want to use an empty password to log in, specify <code>EMPTY.PASSWORD</code> as in the following examples:</p>
<pre>-password=EMPTY.PASSWORD
</pre>
<pre>-password@CtxClass2=EMPTY.PASSWORD
</pre>
<p>However, Oracle Database 12<span class="italic">c</span> Release 1 (12.1) does not permit an empty password.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>When specified on the command line, -<code>p</code> is recognized as equivalent to -<code>password</code>.</p>
</li>
<li>
<p>You are allowed to use a space instead of <code>=</code> in a password setting on the command line, as in the following examples:</p>
<pre>-password <span class="italic">password</span>
-password@CtxClass <span class="italic">password</span>
-p <span class="italic">password</span>
-p@CtxClass <span class="italic">password</span>
</pre></li>
<li>
<p>For ISO code generation, the translator -<code>password</code> setting is forwarded to the profile customizer, but can be overridden by the customizer <code>password</code> setting.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-password&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">user</span>_<span class="italic">password</span>
</pre>
<p>For example:</p>
<pre>-password=<span class="italic">password</span>
-password=
-password=EMPTY.PASSWORD
-password@CtxClass=<span class="italic">password</span>
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.password&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">user</span>_<span class="italic">password</span>
</pre>
<p>For example:</p>
<pre>sqlj.password=hr
sqlj.password=
sqlj.password=EMPTY.PASSWORD
sqlj.password@CtxClass=hr
</pre>
<p>This option does not have a default value. Either the password for <code>DefaultContext</code> is used or the user is prompted.</p>
<p class="subhead2"><a id="i1007137"></a><a id="JSQLJ644"></a>Connection <a id="sthref645"></a><a id="sthref646"></a><a id="sthref647"></a>URL for Online Semantics-Checking (-url)</p>
<p>The -<code>url</code> option specifies a URL for establishing a database connection for online semantics-checking. As necessary, the URL can include a host name, port number, and database service name (or SID, which is deprecated in Oracle Database 12<span class="italic">c</span> Release 1 (12.1)).</p>
<p>You can also specify the URL as part of the -<code>user</code> option setting. Do not use the -<code>url</code> option for a connection context class if you have already set its URL in the -<code>user</code> option, which takes precedence.</p>
<p>For the most part, functionality of the -<code>url</code> option parallels that of the -<code>user</code> option. That is, if your application uses only the default connection or other instances of <code>DefaultContext</code>, then the following example would set the URL to use for the connection for checking all your SQLJ statements:</p>
<pre>-url=jdbc:oracle:oci:@
</pre>
<p>Alternatively, to include the host name, port number, and service name:</p>
<pre>-url=jdbc:oracle:thin:@myhost:5221/myservice
</pre>
<p>If you do not begin a URL setting with <code>jdbc:</code>, then the setting is assumed to be of the form <code><span class="codeinlineitalic">host</span></code><code>:</code><code><span class="codeinlineitalic">port</span></code><code>/</code><code><span class="codeinlineitalic">servicename</span></code> and, by default, is automatically prefixed with the following:</p>
<pre>jdbc:oracle:thin:@
</pre>
<p>A -<code>url</code> setting of <code>localhost:5221/myservice</code> would result in the following URL:</p>
<pre>jdbc:oracle:thin:@localhost:5221/myservice
</pre>
<p>You can remove or alter this default prefix with the -<code>default</code>-<code>url</code>-<code>prefix</code> option.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007216">&#34;Default URL Prefix (-default-url-prefix)&#34;</a></div>
<p>You can specify the user and password in the <code>-url</code> setting, instead of in the -<code>user</code> and -<code>password</code> settings. In such a case, set -<code>user</code> to <code>URL.CONNECT</code>, as follows:</p>
<pre>-url=jdbc:oracle:oci:HR/hr@ -user=URL.CONNECT
</pre>
<p>If you declare and use additional connection context classes, <code>CtxClass1</code> for example, you will presumably specify additional exemplar schemas to use in testing statements that use those connection context classes. You can use the -<code>url</code> option to specify URLs for those schemas, as in the following example:</p>
<pre>-url@CtxClass1=jdbc:oracle:oci:@
</pre>
<p>Any connection context class without a URL setting, either through the -<code>url</code> setting or the -<code>user</code> setting, uses the URL setting for the default connection context class, presuming a URL has been set for the default context class.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Remember that any connection context class with a URL setting must also have a user name setting for online checking to occur.</p>
</li>
<li>
<p>You are allowed to use a space instead of <code>=</code> in a URL setting on the command line, as in the following examples:</p>
<pre>-url jdbc:oracle:oci:@
-url@CtxClass jdbc:oracle:oci:@
</pre></li>
<li>
<p>For ISO code generation, the translator -<code>url</code> setting is forwarded to the profile customizer, but can be overridden by the customizer <code>url</code> setting.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-url&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">URL</span>
</pre>
<p>For example:</p>
<pre>-url=jdbc:oracle:oci:@
-url=jdbc:oracle:thin:@hostname:5221/myservice
-url=jdbc:oracle:oci:HR/<span class="italic">password</span>@
-url=hostname:5221/myservice
-url@CtxClass=jdbc:oracle:oci:@
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.url&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">URL</span>
</pre>
<p>For example:</p>
<pre>sqlj.url=jdbc:oracle:oci:@
sqlj.url=jdbc:oracle:thin:@hostname:5221/myservice
sqlj.url=jdbc:oracle:oci:HR/hr@
sqlj.url=hostname:5221/myservice
sqlj.url@CtxClass=jdbc:oracle:oci:@
</pre>
<p>The default value for this option is:</p>
<pre>jdbc:oracle:oci:@
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware of the difference in format between specifying user, password, and URL in the -<code>user</code> option and specifying them in the -<code>url</code> option. In the -<code>url</code> option, the user name and password are included in the URL, immediately following the JDBC driver type. In the -<code>user</code> option, they precede the URL.</div>
<p class="subhead2"><a id="i1007216"></a><a id="JSQLJ645"></a>Default <a id="sthref648"></a><a id="sthref649"></a><a id="sthref650"></a><a id="sthref651"></a><a id="sthref652"></a>URL Prefix (-default-url-prefix)</p>
<p>Use the -<code>default-url-prefix</code> option to alter or remove the default prefix. The following is the default prefix for any URL setting you specify that does not already start with <code>jdbc:</code></p>
<pre>jdbc:oracle:thin:@
</pre>
<p>This enables you to use a shorthand in specifying a URL setting, either in the -<code>user</code> option or the <code>-url</code> option. It is permissible to specify only the host, port, and service name (or SID, which is deprecated) of the database. As an example, presume you set a URL as follows:</p>
<pre>-url=myhost:5221/myservice
</pre>
<pre>-user=HR/hr@myhost:5221/myservice
</pre>
<p>By default, the URL will be interpreted to be the following:</p>
<pre>jdbc:oracle:thin:@myhost:5221/myservice
</pre>
<p>If you specify a full URL that starts with <code>jdbc:</code>, then the default prefix will not be used.</p>
<p>However, if you want your URL settings to default to the JDBC Oracle Call Interface (OCI) driver, for example, instead of the JDBC Thin driver, then set the default prefix as follows:</p>
<pre>-default-url-prefix=jdbc:oracle:oci:@
</pre>
<p>If you do not want any prefix, then set the -<code>default</code>-<code>url-prefix</code> option to an empty string, as follows:</p>
<pre>-default-url-prefix=
</pre>
<p>The command-line syntax for this option is as follows:</p>
<pre>-default-url-prefix=<span class="italic">url_prefix</span>
</pre>
<p>For example</p>
<pre>-default-url-prefix=jdbc:oracle:oci:@
-default-url-prefix=
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.default-url-prefix=<span class="italic">url_prefix</span>
</pre>
<p>For example:</p>
<pre>sqlj.default-url-prefix=jdbc:oracle:oci:@
sqlj.default-url-prefix=
</pre>
<p>The default value for this option is:</p>
<pre>jdbc:oracle:thin:@
</pre>
<p class="subhead2"><a id="JSQLJ646"></a>JDBC <a id="sthref653"></a><a id="sthref654"></a><a id="sthref655"></a><a id="sthref656"></a><a id="sthref657"></a>Drivers to Register for Online Semantics-Checking (-driver)</p>
<p>The <code>-driver</code> option specifies the JDBC driver class to register for interpreting JDBC connection URLs for online semantics-checking. Use this option to specify a driver class or comma-delimited list of classes. The default, <code>OracleDriver</code>, supports Oracle JDBC OCI, JDBC Thin, and server-side JDBC drivers for use with Oracle Database 12<span class="italic">c</span> Release 1 (12.1).</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-driver=<span class="italic">driver1&lt;</span>,<span class="italic">driver2</span>,<span class="italic">driver3</span>,...&gt;
</pre>
<p>For example:</p>
<pre>-driver=oracle.jdbc.OracleDriver
-driver=oracle.jdbc.OracleDriver,sun.jdbc.odbc.JdbcOdbcDriver
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.driver=<span class="italic">driver1&lt;</span>,<span class="italic">driver2</span>,<span class="italic">driver3</span>,...&gt;
</pre>
<p>For example:</p>
<pre>sqlj.driver=oracle.jdbc.OracleDriver
sqlj.driver=oracle.jdbc.OracleDriver,sun.jdbc.odbc.JdbcOdbcDriver
</pre>
<p>The default value for this option is:</p>
<pre>oracle.jdbc.OracleDriver
</pre>
<p class="subhead2"><a id="JSQLJ647"></a>Driver Name (sqlj.driver_name)</p>
<p>Use the <code>sqlj.driver_name</code> option in the properties file to set the driver name. You can set the <code>driver_name</code> attribute for end-to-end diagnosis. The value of this attribute is not validated. This value is passed directly to the server and is displayed as the value of the <code>CLIENT_DRIVER</code> column of the <code>V$SESSION_CONNECT_INFO</code> view and the <code>GV$SESSION_CONNECT_INFO</code> view. The maximum length of this value is 8 characters.</p>
<p>If you do not set this property in the properties file, then the default value for this property is &#34;SQLJ&#34;. You can set this property in the following way:</p>
<pre>sqlj.driver_name=MYDRIVER
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This attribute can be set only through the properties file and does not have an equivalent command-line option.</div>
</div>
<!-- class="sect2" -->
<a id="i1007274"></a>
<div id="JSQLJ648" class="sect2">
<h3 class="sect2">Options for Reporting and <a id="sthref658"></a><a id="sthref659"></a>Line-Mapping</h3>
<p>The following options specify what types of conditions SQLJ should monitor, whether to generate real-time error and status messages and whether to include cause and action information with translator error messages:</p>
<ul>
<li>
<p><code>-warn</code></p>
</li>
<li>
<p><code>-status</code></p>
</li>
<li>
<p><code>-explain</code></p>
</li>
</ul>
<p>The following options enable line-mapping from the generated Java <code>.class</code> file back to the <code>.sqlj</code> source file, so that you can trace run-time errors back to the appropriate location in your original source code:</p>
<ul>
<li>
<p><code>-linemap</code></p>
</li>
<li>
<p><code>-jdblinemap</code></p>
</li>
</ul>
<p>Use <code>-jdblinemap</code> in conjunction with the Sun Microsystems <code>jdb</code> debugger. Otherwise, use <code>-linemap</code>.</p>
<p class="subhead2"><a id="i1007284"></a><a id="JSQLJ649"></a>Translator <a id="sthref660"></a><a id="sthref661"></a>Warnings (-warn)</p>
<p>There are various warnings and informational messages that the SQLJ translator can display as dictated by conditions it encounters during the translation. The <code>-warn</code> option consists of a set of flags that specify which of those warnings and messages should be displayed, in other words, which conditions should be monitored and which should be ignored. All the flags for this option must be combined into a single, comma-delimited string.</p>
<p><a href="#CHDDADCE">Table 8-3</a> lists the conditions that can be tested, what the <code>true</code> and <code>false</code> flag values are for each condition, what a <code>true</code> flag value means, and which value is the default.</p>
<div id="JSQLJ650" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref662"></a><a id="CHDDADCE"></a>Table 8-3 Tests and Flags for SQLJ Warnings</p>
<table class="cellalignment4024" title="Tests and Flags for SQLJ Warnings" summary="table" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t40">Test and Flag Functions</th>
<th class="cellalignment4021" id="r1c2-t40">TRUE/FALSE Values</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t40" headers="r1c1-t40">
<p>Test for requirement of subtypes of declared object type in an inheritance hierarchy: Enable <code>cast</code> to receive warnings when usage of SQL object types in a SQL inheritance hierarchy requires that subtypes of a declared type must be passed at run time.</p>
</td>
<td class="cellalignment4017" headers="r2c1-t40 r1c2-t40">
<p><code>cast</code> (default)</p>
<p><code>nocast</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r3c1-t40" headers="r1c1-t40">
<p>Data precision test: Enable <code>precision</code> to receive warnings if there was a possible loss of precision when moving values from database columns to Java host variables.</p>
</td>
<td class="cellalignment4017" headers="r3c1-t40 r1c2-t40">
<p><code>precision</code> (default)</p>
<p><code>noprecision</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r4c1-t40" headers="r1c1-t40">
<p>Conversion loss test for nullable data: Enable <code>nulls</code> to receive warnings if there was possible conversion loss when moving nullable columns or nullable Java types from database columns to Java host variables.</p>
</td>
<td class="cellalignment4017" headers="r4c1-t40 r1c2-t40">
<p><code>nulls</code> (default)</p>
<p><code>nonulls</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r5c1-t40" headers="r1c1-t40">
<p>Portability test: Enable <code>portable</code> to check SQLJ clauses for portability and receive warnings if there are nonportable clauses. (Where nonportable refers to the use of extensions to the SQLJ standard, such as vendor-specific types or features.)</p>
</td>
<td class="cellalignment4017" headers="r5c1-t40 r1c2-t40">
<p><code>portable</code></p>
<p><code>noportable</code> (default)</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r6c1-t40" headers="r1c1-t40">
<p>Strict matching test for named iterators: Enable <code>strict</code> to instruct SQLJ to require that the number of columns selected from the database must equal the number of columns in the named iterator being populated. A warning is issued for any column in the database cursor for which there is no corresponding column in the iterator. The <code>nostrict</code> setting allows more (but not fewer) columns in the database cursor. Unmatched columns are ignored.</p>
</td>
<td class="cellalignment4017" headers="r6c1-t40 r1c2-t40">
<p><code>strict</code> (default)</p>
<p><code>nostrict</code></p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r7c1-t40" headers="r1c1-t40">
<p>Translation-time informational messages: Enable <code>verbose</code> to provide additional informational messages about the translation process, such as what database connections were made for online checking.</p>
</td>
<td class="cellalignment4017" headers="r7c1-t40 r1c2-t40">
<p><code>verbose</code></p>
<p><code>noverbose</code> (default)</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r8c1-t40" headers="r1c1-t40">
<p>Global enabling or disabling of warnings: Use <code>all</code> or <code>none</code> to enable or disable all warnings.</p>
</td>
<td class="cellalignment4017" headers="r8c1-t40 r1c2-t40">
<p><code>all</code></p>
<p><code>none</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwidemax" -->
<p>The <code>verbose/noverbose</code> flag works differently from the others. It does not enable a particular test but enables output of general informational messages about the semantics-checking.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not confuse <code>-warn</code><code>=</code><code>verbose</code> with the <code>-status</code> flag. The <code>-status</code> flag provides real-time informational messages about all aspects of SQLJ translation: translation, semantics-checking, compilation, and profile customization, if applicable. The <code>-warn</code><code>=</code><code>verbose</code> flag results in additional reporting about the translation phase only.</div>
<p>The global <code>all</code>/<code>none</code> flag takes priority over default settings. You can use it to enable or disable all flags, or to serve as an initialization to ensure that all flags are off before you turn selected flags on, or all flags are on before you turn selected flags off.</p>
<p>The <code>all</code> setting is equivalent to the following:</p>
<pre>cast,precision,nulls,portable,strict,verbose
</pre>
<p>And the <code>none</code> setting is equivalent to the following:</p>
<pre>nocast,noprecision,nonulls,noportable,nostrict,noverbose
</pre>
<p>There is no default for <code>all</code>/<code>none</code>. There are only defaults for individual flags.</p>
<p>Following are some examples:</p>
<ul>
<li>
<p>Use the following sequence to ensure that only the <code>nulls</code> flag is on:</p>
<pre>-warn=none,nulls
</pre></li>
<li>
<p>The following sequence will have the same result, because the <code>verbose</code> setting will be overridden:</p>
<pre>-warn=verbose,none,nulls
</pre></li>
<li>
<p>Use the following to ensure that everything except the portability flag is on:</p>
<pre>-warn=all,noportable
</pre></li>
<li>
<p>This sequence will have the same result, because the <code>nonulls</code> setting will be overridden:</p>
<pre>-warn=nonulls,all,noportable
</pre></li>
</ul>
<p>Other than placement of the <code>all</code>/<code>none</code> flag, the order in which flags appear in a <code>-warn</code> setting is unimportant, except in the case of conflicting settings. If there are conflicts, such as in <code>-warn</code><code>=</code><code>portable,noportable</code>, then the last (right-most) setting is used.</p>
<p>Separate settings of the <code>-warn</code> option in properties files and on the command line are <span class="italic">not</span> cumulative. Only the last setting is processed. In the following example, the <code>-warn</code><code>=</code><code>portable</code> setting is ignored. That flag and all other flags besides <code>nulls/nonulls</code> are set according to their defaults:</p>
<pre>-warn=portable -warn=nonulls
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The cast, precision, nullability, and strictness tests are part of online semantics-checking and require a database connection.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-warn=<span class="italic">comma-delimited_list_of_flags</span>
</pre>
<p>For example:</p>
<pre>-warn=none,nulls,precision
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.warn=<span class="italic">comma-delimited_list_of_flags</span>
</pre>
<p>For example:</p>
<pre>sqlj.warn=none,nulls,precision
</pre>
<p>The default value for this option is as follows:</p>
<pre>cast,precision,nulls,noportable,strict,noverbose
</pre>
<p class="subhead2"><a id="i1007388"></a><a id="JSQLJ651"></a>Real-Time<a id="sthref663"></a><a id="sthref664"></a> Status Messages (-status)</p>
<p>The <code>-status</code> flag instructs SQLJ to display additional status messages throughout all aspects of the SQLJ process: translation, semantics-checking, compilation, and customization. Messages are displayed as each file is processed and at each stage of the SQLJ operation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Do not confuse <code>-warn</code><code>=</code><code>verbose</code> with the <code>-status</code> flag. The <code>-status</code> flag provides real-time informational messages about all aspects of SQLJ translation. The <code>-warn</code><code>=</code><code>verbose</code> flag results in additional reporting about the translation phase only.</p>
</li>
<li>
<p>For compatibility with the <code>loadjava</code> utility, <code>-v</code> is recognized as equivalent to <code>-status</code> when specified on the command line.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-status&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-status
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.status&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.status
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1007415"></a><a id="JSQLJ652"></a>Cause and <a id="sthref665"></a><a id="sthref666"></a><a id="sthref667"></a>Action for Translator Errors (-explain)</p>
<p>The <code>-explain</code> flag instructs the SQLJ translator to include cause and action information, as available, with translator error message output for the first occurrence of each error.</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-explain&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-explain
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.explain&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.explain
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1007436"></a><a id="JSQLJ653"></a>Line-Mapping <a id="sthref668"></a><a id="sthref669"></a><a id="sthref670"></a><a id="sthref671"></a>to SQLJ Source File (-linemap)</p>
<p>The <code>-linemap</code> flag instructs SQLJ to map line numbers from a SQLJ source code file to locations in the corresponding <code>.class</code> file. This will be the <code>.class</code> file created during compilation of the <code>.java</code> file generated by the SQLJ translator. As a result, when Java run-time errors occur, the line number reported by the JVM is the line number in the SQLJ source code, making it much easier to debug.</p>
<p>Usually, the instructions in a <code>.class</code> file map to source code lines in the corresponding <code>.java</code> file. This would be of limited use to SQLJ developers, though, as they would still need to map line numbers in the generated <code>.java</code> file to line numbers in their original <code>.sqlj</code> file.</p>
<p>The SQLJ translator modifies the <code>.class</code> file to implement the <code>-linemap</code> option, replacing line numbers and the file name from the generated <code>.java</code> file with corresponding line numbers and the file name from the original <code>.sqlj</code> file. This process is known as <a id="sthref672"></a>instrumenting the class file.</p>
<p>In performing this, SQLJ takes the following into account:</p>
<ul>
<li>
<p>The <code>-d</code> option setting, which determines the root directory for <code>.class</code> files</p>
</li>
<li>
<p>The <code>-dir</code> option setting, which determines the root directory for generated <code>.java</code> files</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If you are processing a <code>.sqlj</code> file and the compilation step is skipped due to error, then no line-mapping can be performed either, because no <code>.class</code> file is available for mapping.</p>
</li>
<li>
<p>When the Java compiler is invoked from SQLJ, it always reports compilation errors using line numbers of the original <code>.sqlj</code> source file, not the generated <code>.java</code> file. No option needs to be set for this mapping.</p>
</li>
<li>
<p>Anonymous classes in a <code>.sqlj</code> file will not be instrumented.</p>
</li>
<li>
<p>If you are using the Sun Microsystems <code>jdb</code> debugger, then use the <code>-jdblinemap</code> option instead of the <code>-linemap</code> option.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-linemap&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-linemap
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.linemap&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.linemap
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1007465"></a><a id="JSQLJ654"></a>Line-Map<a id="sthref673"></a><a id="sthref674"></a><a id="sthref675"></a><a id="sthref676"></a>ping to SQLJ Source File for jdb Debugger (-jdblinemap)</p>
<p>This option is equivalent to the <code>-linemap</code> option, but you should use it instead of <code>-linemap</code> if you are using the Sun Microsystems <code>jdb</code> debugger. This is because <code>jdb</code> can access only source files with a <code>.java</code> file name extension.</p>
<p>With the <code>-jdblinemap</code> setting, SQLJ does the following:</p>
<ul>
<li>
<p>Overwrites the contents of the <code>.java</code> file generated by the translator with the contents of the original <code>.sqlj</code> file</p>
</li>
<li>
<p>Preserves the <code>.java</code> file name, instead of the <code>.sqlj</code> file name, in the generated <code>.class</code> file</p>
</li>
</ul>
<p>In this way, the SQLJ source code is accessible to <code>jdb</code>.</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-jdblinemap&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-jdblinemap
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.jdblinemap&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.jdblinemap
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre></div>
<!-- class="sect2" -->
<a id="i1011783"></a>
<div id="JSQLJ655" class="sect2">
<h3 class="sect2">Optio<a id="sthref677"></a>ns for DMS</h3>
<p>The Oracle SQLJ implementation provides translator front-end options to support DMS:</p>
<ul>
<li>
<p><code>-instrument</code>: Enable instrumentation and designate a name for the application (the collective of the components being translated).</p>
</li>
<li>
<p><code>-components</code>: Specify the components (packages and classes) to be instrumented.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apppfdbg.htm#i1007063">&#34;SQLJ Support for Oracle Performance Monitoring&#34;</a></div>
<p class="subhead2"><a id="i1011944"></a><a id="JSQLJ656"></a>Instrum<a id="sthref678"></a>entation for DMS (-instrument)</p>
<p>Use the SQLJ <code>-instrument</code> option to enable instrumentation and specify an application name. In this context, the term application refers to all the SQLJ and Java components specified for translation in the SQLJ command line.</p>
<p>Possible settings of the <code>-instrument</code> option are as follows:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">application_name</span></code>: To enable instrumentation and use the specified application name, optionally prefixed with a package name in the standard Java dot syntax. Use a slash (/), with no spaces, between the package name and the application name.</p>
</li>
<li>
<p><code>true</code>: To enable instrumentation and use the default application name, <code>defaultApp</code>.</p>
</li>
<li>
<p><code>false</code> (default): To disable instrumentation.</p>
</li>
</ul>
<p>If instrumentation is enabled, a SQLJ DMS properties file is created. Its name and location are according to the <code>-instrument</code> setting, starting from the current directory, according to the package name and also according to any setting of the SQLJ <code>-d</code> option. If no application name is specified, as is the case with the setting <code>true</code>, then the properties file is named <code>sqlmonitor.properties</code> in the current directory.</p>
<p>As a simple example, a setting of <code>-instrument</code><code>=</code><code>myapp</code> will result in creation of the properties file, <code>myapp.properties</code>, in the current directory.</p>
<p>Now consider the following example, for an application name of <code>stock</code> and the package <code>com.acme</code>:</p>
<pre>% sqlj -instrument=com.acme/stock Stock.sqlj Trading.sqlj
</pre>
<p>In this case, the properties file <code>./com/acme/stock.properties</code> is created.</p>
<p>Now consider the following example:</p>
<pre>% sqlj -instrument=com.acme/stock -d /home Stock.sqlj Trading.sqlj
</pre>
<p>In this case, because of the <code>-d</code> option, the file <code>/home/com/acme/stock.properties</code> is created.</p>
<p>You can also set the <code>-instrument</code> option in <code>sqlj.properties</code> as follows:</p>
<pre>sqlj.instrument=com.acme/stock
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
A setting of <code>-instrument</code> is equivalent to <code>-instrument</code><code>=</code><code>true</code>.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-instrument&lt;=true|false|<span class="italic">application_name</span>&gt;
</pre>
<p>For example:</p>
<pre>-instrument=com.acme/stock
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.instrument&lt;=true|false|<span class="italic">application_name</span>&gt;
</pre>
<p>For example:</p>
<pre>sqlj.instrument=com.acme/stock
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1011945"></a><a id="JSQLJ657"></a>Compo<a id="sthref679"></a>nents to Instrument for DMS (-components)</p>
<p>When instrumentation is enabled through the <code>-instrument</code> option, use the <code>-components</code> option to specify the components to be instrumented for DMS monitoring. This is a subset of the components being translated, typically most or all of them to allow flexibility in what you can monitor during run time. At run time, instrumented components are monitored according to what is specified in the SQLJ DMS properties file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apppfdbg.htm#i1007498">&#34;SQLJ Run-Time Commands and Properties File Settings for DMS&#34;</a></div>
<p>Note that any components that are not instrumented during translation cannot be monitored during run time, regardless of what is specified in the properties file.</p>
<p>The <code>-components</code> option supports either of the following settings:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">list_of_components</span></code>: A comma-delimited list of packages or classes to instrument</p>
</li>
<li>
<p><code>all</code> (default): Specification to instrument all components being translated</p>
</li>
</ul>
<p>For the list of components, you can specify fully qualified class names, using the standard Java dot syntax, or you can specify package names to instrument all classes in the packages.</p>
<p>For example, to instrument the <code>Stock</code> and <code>Trading</code> classes:</p>
<pre>% sqlj ... -components=com.acme.Stock,com.acme.Trading
</pre>
<p>Alternatively, here is an equivalent specification in the <code>sqlj.properties</code> file:</p>
<pre>sqlj.components=com.acme.Stock,com.acme.Trading
</pre>
<p>The command-line syntax for this option is as follows:</p>
<pre>-components=all|<span class="italic">list_of_components</span>
</pre>
<p>For example:</p>
<pre>-components=com.acme.Stock,com.acme.Trading
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.components=all|<span class="italic">list_of_components</span>
</pre>
<p>For example:</p>
<pre>sqlj.components=com.acme.Stock,com.acme.Trading
</pre>
<p>The default value for this option is:</p>
<pre>all
</pre></div>
<!-- class="sect2" -->
<a id="BCEGHEDB"></a>
<div id="JSQLJ658" class="sect2">
<h3 class="sect2">Options for Code Generation, Optimizations, and CHAR Comparisons</h3>
<p>By default, the Oracle SQLJ implementation uses Oracle-specific code generation, which generates Oracle JDBC code directly, as an alternative to ISO standard code generation. With Oracle-specific code generation, no profiles are generated, and the SQLJ run time is largely bypassed during code execution.</p>
<p>Because profile customization is not applicable with Oracle-specific code generation, some generally useful optimization options, formerly available only through Oracle customizer, are now available directly through the SQLJ translator.</p>
<p>There is also an option for <code>CHAR</code> comparisons in a <code>WHERE</code> clause, accounting for any blank padding in the column. This option is also available as either a translator option (for Oracle-specific code generation) or an Oracle customizer option (for ISO standard code generation).</p>
<p>This section describes the following code generation, optimization, and <code>CHAR</code> comparison and bind options:</p>
<ul>
<li>
<p><code>-codegen</code></p>
</li>
<li>
<p><code>-optcols</code></p>
</li>
<li>
<p><code>-optparams</code></p>
</li>
<li>
<p><code>-optparamdefaults</code></p>
</li>
<li>
<p><code>-fixedchar</code></p>
</li>
<li>
<p><code>-ncharconv</code></p>
</li>
</ul>
<p class="subhead2"><a id="i1007494"></a><a id="JSQLJ659"></a>Code Gen<a id="sthref680"></a><a id="sthref681"></a>eration (-codegen)</p>
<p>The Oracle SQLJ implementation can either generate Oracle-specific JDBC code directly or generate ISO standard code that calls the SQLJ run time, which in turn calls JDBC. With Oracle-specific code generation, there are no profile files and the SQLJ run time is largely bypassed during program execution.</p>
<p>If you want to specify code generation according to the ISO standard, then use the SQLJ translator <code>-codegen</code> option as follows:</p>
<pre>-codegen=iso
</pre>
<p>The default is Oracle-specific SQLJ code generation, but you can also explicitly specify this as follows:</p>
<pre>-codegen=oracle
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
When <code>codegen</code>=<code>iso</code>, translator settings for <code>-user</code>, <code>-password</code>, <code>-url</code>, <code>-optparams</code>, <code>-optparamdefaults</code>, and <code>-fixedchar</code> are forwarded to the profile customizer as well. However, if you want to override these settings for customization, particularly for <code>-user</code>, <code>-password</code>, and <code>-url</code>, then you can do so by setting the customizer options directly.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-codegen=iso|oracle
</pre>
<p>For example:</p>
<pre>-codegen=iso
</pre>
<p>The syntax for as properties file entry for this option is as follows:</p>
<pre>sqlj.codegen=iso|oracle
</pre>
<p>For example:</p>
<pre>sqlj.codegen=iso
</pre>
<p>The default value for this option is:</p>
<pre>oracle
</pre>
<p class="subhead2"><a id="i1007528"></a><a id="JSQLJ660"></a>Colu<a id="sthref682"></a><a id="sthref683"></a>mn Definitions (-optcols)</p>
<p>Use the SQLJ translator <code>-optcols</code> flag to instruct the translator to determine types and sizes of iterator or result set columns. This enables registration of the columns with Oracle JDBC driver when your application runs, saving round trips to the database, depending on the particular driver implementation. Specifically, this is effective for the JDBC Thin driver and positional iterators.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apppfdbg.htm#i1006199">&#34;Column Definitions&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
This translator option is equivalent to the <code>optcols</code> Oracle customizer option and was created for the default Oracle-specific code generation scenario, where there are no profiles. But it is also applicable for ISO standard code generation. In this case, setting the translator option will automatically set the customizer option as well.</div>
<p>You can enable or disable this flag on the SQLJ command line or in a properties file.</p>
<p>Enable it on the command line as follows:</p>
<pre>-optcols
</pre>
<p>or:</p>
<pre>-optcols=true
</pre>
<p>This flag is disabled by default, but you can also disable it explicitly. Disable it on the command line as follows:</p>
<pre>-optcols=false
</pre>
<p>Column definitions require a database connection for examination of the columns of tables being queried, so the SQLJ translator <code>-user</code>, <code>-password</code>, and <code>-url</code> options must also be set appropriately. For example:</p>
<pre>% sqlj -user=HR@jdbc:oracle:oci:@ -optcols MyApp.sqlj
Password: <span class="italic">password</span>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Because definitions are created for all columns that you select, it is advisable in your SQL operations to explicitly select the columns you will use, rather than using the <code>SELECT *</code> syntax, if you may not actually use all the columns selected. A situation where you select more than you need exposes you to a greater risk of run-time errors, if any changes were made to the table between customization and run time, especially when you have customized with column definitions. You may want to translate with the SQLJ <code>-warn</code>=<code>strict</code> flag set, which will warn you if additional (unwanted) columns will be selected by your query.</p>
</li>
<li>
<p>Column definitions are not possible for any iterator or result set that includes one or more object or collection columns.</p>
</li>
<li>
<p>An error will be generated if you enable the <code>-optcols</code> option without setting the user name, password, and URL for a database connection.</p>
</li>
<li>
<p>The translator does not have to connect to the same schema or even the same database that your application will connect to at run time, but the relevant columns will have to be in the same order and of identical types and sizes to avoid run-time errors.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-optcols&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-optcols
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.optcols&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.optcols
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1007582"></a><a id="JSQLJ661"></a>Para<a id="sthref684"></a><a id="sthref685"></a>meter Definitions (-optparams)</p>
<p>Use the SQLJ translator <code>-optparams</code> flag to enable parameter size definitions. If this flag is enabled, SQLJ will register your input and output parameters to optimize JDBC resource allocations according to sizes you specify, with the following precedence:</p>
<ol>
<li>
<p>Size specified in a source code hint, if any</p>
</li>
<li>
<p>Default size, if any, specified for the corresponding data type in the <code>-optparamdefaults</code> option setting</p>
</li>
</ol>
<p>If there is no source code hint or default data type size for a given host variable, then resource allocation is left to JDBC.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apppfdbg.htm#i1006199">&#34;Column Definitions&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
This translator option is equivalent to the <code>optparams</code> Oracle customizer option. It was created for the default Oracle-specific code generation scenario, where there are no profiles. But it is also applicable for ISO standard code generation. In this case, setting the translator option will automatically set the customizer option as well.</div>
<p>You can enable or disable the <code>-optparams</code> flag on the command line or in a SQLJ properties file.</p>
<p>Enable it on the command line as follows:</p>
<pre>-optparams
</pre>
<p>or:</p>
<pre>-optparams=true
</pre>
<p>This flag is disabled by default, but you can also disable it explicitly. Disable it on the command line as follows:</p>
<pre>-optparams=false
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Unlike the <code>-optcols</code> option, the <code>-optparams</code> option does not require a database connection, because you are providing the size specifications yourself.</div>
<p>Following is a command-line example (omitting a setting for the <code>-optparamdefaults</code> option):</p>
<pre>% sqlj -optparams -optparamdefaults=<span class="italic">defaults_string</span> MyApp.sqlj
</pre>
<p>The command-line syntax for this option is as follows:</p>
<pre>-optparams&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-optparams
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.optparams&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.optparams
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1007635"></a><a id="JSQLJ662"></a>Para<a id="sthref686"></a><a id="sthref687"></a>meter Default Size (-optparamdefaults)</p>
<p>If you enable the <code>-optparams</code> option to set parameter sizes, then use the <code>-optparamdefaults</code> option as desired to set default sizes for specified data types. If <code>-optparams</code> is <span class="italic">not</span> enabled, then any <code>-optparamdefaults</code> setting is ignored.</p>
<p>If a host variable has a source code hint to specify its size, then that takes precedence over the corresponding data type default size set with this option. If there is no source code hint or corresponding data type default size for a particular host variable, then resource allocation for that variable is determined by the JDBC driver, just as it would be if <code>-optparams</code> were not enabled.</p>
<p>There is no requirement to use the <code>-optparamdefaults</code> option, although it is typically used whenever <code>-optparams</code> is enabled. If <code>-optparams</code> is enabled and there are no default size settings, then resources are allocated either according to source code hints, if any, or according to the JDBC driver.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apppfdbg.htm#i1006237">&#34;Parameter Size Definitions&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
This translator option is equivalent to the <code>optparamdefaults</code> Oracle customizer option. It was created for the default Oracle-specific code generation scenario, where there are no profiles. But it is also applicable for ISO standard code generation. In this case, setting the translator option will automatically set the customizer option as well.</div>
<p>You can set the <code>-optparamdefaults</code> flag on the command line or in a SQLJ properties file.</p>
<p>Set it on the command line as follows:</p>
<pre>-optparamdefaults=<span class="italic">datatype1</span>(<span class="italic">size1</span>),<span class="italic">datatype2</span>(<span class="italic">size2</span>),...
</pre>
<p>All sizes are in bytes. Do not include any white space. Use empty parentheses for a null setting.</p>
<p>For example, the following will set sizes of 30 bytes for <code>VARCHAR2</code> and 1000 bytes for <code>RAW</code>, and will specify a null size setting for <code>CHAR</code>. So, for any host variable corresponding to the <code>CHAR</code> data type, if there is no source code hint, then the JDBC driver is left to allocate the resources.</p>
<pre>-optparamdefaults=VARCHAR2(30),RAW(1000),CHAR()
</pre>
<p>The <code>-optparamdefaults</code> option recognizes the following data type names:</p>
<ul>
<li>
<p><code>CHAR</code></p>
</li>
<li>
<p><code>VARCHAR</code>, <code>VARCHAR2</code> (synonymous)</p>
</li>
<li>
<p><code>LONG</code>, <code>LONGVARCHAR</code> (synonymous)</p>
</li>
<li>
<p><code>BINARY</code>, <code>RAW</code> (synonymous)</p>
</li>
<li>
<p><code>VARBINARY</code></p>
</li>
<li>
<p><code>LONGVARBINARY</code>, <code>LONGRAW</code> (synonymous)</p>
</li>
</ul>
<p>The <code>-optparamdefaults</code> option also recognizes group names and wildcards, as follows:</p>
<ul>
<li>
<p><code>CHAR_TYPE</code> covers <code>CHAR</code>, <code>VARCHAR</code>/<code>VARCHAR2</code>, and <code>LONG</code>/<code>LONGVARCHAR</code>.</p>
</li>
<li>
<p><code>RAW_TYPE</code> covers <code>BINARY</code>/<code>RAW</code>, <code>VARBINARY</code>, and <code>LONGVARBINARY</code>/<code>LONGRAW</code>.</p>
</li>
<li>
<p>A percent sign (<code>%</code>) by itself covers all recognized data types or appended to a partial name, covers a subset of data types. For example, <code>VAR%</code> includes all data types that start with &#34;VAR&#34;.</p>
</li>
</ul>
<p>The <code>-optparamdefaults</code> setting is processed from left to right. When using group names or wildcards, you can override a group setting for particular data types.</p>
<p>The following example sets a general default size of 50 bytes, overrides that with a setting of 500 bytes for raw types, then overrides the raw type group setting with a null setting for <code>VARBINARY</code> (leaving that to JDBC for corresponding host variables with no source code hints):</p>
<pre>-optparamdefaults=%(50),RAW_TYPE(500),VARBINARY()
</pre>
<p>Following is a command-line example, including the <code>-optparams</code> setting as well:</p>
<pre>% sqlj -optparams -optparamdefaults=CHAR_TYPE(50),RAW_TYPE(500),CHAR(10)<span class="italic"> </span>MyApp.sqlj
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If at run time the actual size exceeds the registered size of any parameter, then run-time errors will occur.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-optparamdefaults=<span class="italic">defaults_string</span>
</pre>
<p>For example:</p>
<pre>-optparamdefaults=VAR%(50),LONG%(500),RAW_TYPE()
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.optparamdefaults=<span class="italic">defaults_string</span>
</pre>
<p>For example</p>
<pre>sqlj.optparamdefaults=VAR%(50),LONG%(500),RAW_TYPE()
</pre>
<p>The default value for this option is:</p>
<pre>null
</pre>
<p class="subhead2"><a id="i1007700"></a><a id="JSQLJ663"></a>CHAR Co<a id="sthref688"></a><a id="sthref689"></a>mparisons with Blank Padding (-fixedchar)</p>
<p>Set this flag to <code>true</code> to account for blank padding in <code>CHAR</code> database columns when binding character strings for <code>WHERE</code> clause comparisons. This way, for example, &#34;mystring&#34; would compare positively against &#34;mystring &#34;.</p>
<p>This functionality uses the JDBC <code>setFixedCHAR()</code> method, an Oracle extension to take padding into account. The standard JDBC <code>setString()</code> method does not account for blank padding.</p>
<p>Following is an example of <code>-fixedchar</code> usage:</p>
<pre>% sqlj -fixedchar MyProgram.sqlj AnotherProg.java ...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>This translator option is equivalent to the <code>fixedchar</code> Oracle customizer option. It was created for the default Oracle-specific code generation scenario, where there are no profiles. But it is also applicable for ISO standard code generation. In this case, setting the translator option will automatically set the customizer option as well.</p>
</li>
<li>
<p>In <code>CHAR</code> or <code>VARCHAR2</code> columns, the Oracle SQL implementation treats the values <code>NULL</code> and &#39;&#39;&#34; (empty string) synonymously. Unfortunately, however, while you can insert the string &#34;&#34;, you cannot successfully compare against it without using <code>IS NULL</code> syntax. Using <code>-fixedchar</code> functionality does not resolve this issue.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-fixedchar&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-fixedchar
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.fixedchar&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.fixedchar
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="CHDCBDCA"></a><a id="JSQLJ664"></a>NCHAR Bind (-ncharconv)</p>
<p>Set this option if you want to use <code>String</code> host variables to bind to <code>NCHAR</code> columns. This option specifies that the <code>SetFormOfUse</code> method should be used in the generated code for all binds to character columns. You need to translate the SQLJ file with is option as follows:</p>
<pre>% sqlj -ncharconv MyApp.sqlj AnotherApp.java ...
</pre>
<p>This option is supported by both <code>codegen=oracle</code> and <code>codegen=iso</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>When the SQLJ file is compiled with the <code>-ncharconv</code> option, the <code>setFormOfUse</code> method is used in the generated code for <code>codegen=oracle</code>. For <code>codegen=iso</code>, this option information is passed to Oracle SQLJ run time, which internally uses <code>SetFormOfUse</code> for bind at run time.</p>
</li>
<li>
<p>This translator option is <span class="italic">not</span> available in database releases prior to Oracle Database 10<span class="italic">g</span> Release 2 (10.2).</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-ncharconv&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-ncharconv
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.ncharconv&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.ncharconv
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007731"></a>
<div id="JSQLJ665" class="sect1">
<h2 class="sect1">Advanced Translator Options</h2>
<p>This section documents the syntax and functionality of the advanced flags and options you can specify in running SQLJ, as well as prefixes used to pass options to the JVM, Java compiler, or SQLJ profile customizer. These options enable you to exercise any of the specialized features of the Oracle SQLJ implementation. For options that can also be specified in a properties file, that syntax is noted as well.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1007766">Prefixes that Pass Option Settings to Other Executables</a></p>
</li>
<li>
<p><a href="#i1007912">Flags for Special Processing</a></p>
</li>
<li>
<p><a href="#i1008060">Semantics-Checking and Offline-Parsing Options</a></p>
</li>
</ul>
<a id="i1007766"></a>
<div id="JSQLJ666" class="sect2">
<h3 class="sect2">Prefixes <a id="sthref690"></a><a id="sthref691"></a>that Pass Option Settings to Other Executables</h3>
<p>The following flags mark options to be passed to the Java interpreter, Java compiler, and SQLJ profile customizer:</p>
<ul>
<li>
<p><code>-J</code> (mark options for the Java interpreter)</p>
</li>
<li>
<p><code>-C</code> (mark options for the Java compiler)</p>
</li>
<li>
<p><code>-P</code> (mark options for the profile customizer, for ISO code generation only)</p>
</li>
</ul>
<p class="subhead2"><a id="i1007773"></a><a id="JSQLJ667"></a>Options to <a id="sthref692"></a><a id="sthref693"></a><a id="sthref694"></a><a id="sthref695"></a>Pass to the Java Virtual Machine (-J)</p>
<p>The <code>-J</code> prefix, specified on the command line, marks options to be passed to the JVM from which SQLJ was invoked. This prefix immediately precedes a JVM option, with no spaces in between. After stripping off the <code>-J</code> prefix, the <code>sqlj</code> script passes the Java option to the JVM. For example:</p>
<pre>-J-Duser.language=ja
</pre>
<p>After stripping the <code>-J</code> prefix, the <code>sqlj</code> script passes the <code>-Duser.language=ja</code> argument as is to the JVM. In the Sun Microsystems JDK, the</p>
<p><code>-Duser.language=ja</code> flag sets the <code>user.language</code> system property to the value <code>ja</code> (Japanese), but specific flags are dependent on the actual Java executable you are using and are not interpreted or acted upon by the <code>sqlj</code> script in any way.</p>
<p>You cannot pass options to the JVM from a properties file, because properties files are read after the JVM is invoked.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>While it is not possible to use a properties file to pass options directly to the JVM in which the SQLJ translator runs, it <span class="italic">is</span> possible to use the <code>SQLJ_OPTIONS</code> environment variable for this purpose. It is also possible, if applicable, to use a properties file to pass options to the JVM in which the Java compiler runs.</p>
</li>
<li>
<p>The JVM <code>file.encoding</code> setting does not apply to Java properties files. Properties files always use the encoding <code>8859_1</code>. This is a feature of Java in general, not SQLJ in particular. However, you can use Unicode escape sequences in a properties file. You can use the <code>native2ascii</code> utility to determine escape sequences.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-J-<span class="italic">Java_option</span>
</pre>
<p>For example:</p>
<pre>-J-Duser.language=ja
</pre>
<p class="subhead2"><a id="i1007817"></a><a id="JSQLJ668"></a>Options <a id="sthref696"></a><a id="sthref697"></a><a id="sthref698"></a>to Pass to the Java Compiler (-C)</p>
<p>The <code>-C</code> prefix marks options to pass to the Java compiler invoked from the <code>sqlj</code> script. This prefix immediately precedes a Java compiler option, with no spaces in between. After stripping off the <code>-C</code> prefix, the <code>sqlj</code> script passes the compiler option to the Java compiler. For example:</p>
<pre>-C-nowarn
</pre>
<p>After stripping the <code>-C</code> prefix, the <code>sqlj</code> script passes the <code>-nowarn</code> argument as is to the compiler.</p>
<p>Generally, compiler options are passed without change, but when you use an equal sign (=) to set a compiler option that takes a value, such as for <code>-bootclasspath</code>,</p>
<p><code>-extdirs</code>, or <code>-target</code>, the equal sign is stripped out when the option is passed to the compiler. Consider the following example:</p>
<pre>% sqlj -C-bootclasspath=/usr/local/packages/jdk6/jre/lib/rt.jar myfile.sqlj
</pre>
<p>Also note that if the Java compiler runs in its own JVM, then you can pass options to that JVM through the compiler. Accomplish this by prefixing the JVM option with</p>
<p><code>-C-J</code> with no spaces between this prefix combination and the option. For example:</p>
<pre>-C-J-Duser.language=de
</pre>
<p>Observe the following restrictions in using the <code>-C</code> prefix:</p>
<ul>
<li>
<p>Do not use <code>-C-encoding</code> to specify encoding of <code>.java</code> files processed by the Java compiler. Instead, use the SQLJ <code>-encoding</code> option, which specifies encoding of <code>.sqlj</code> files processed by SQLJ and <code>.java</code> files generated by SQLJ, and is also passed to the compiler. This ensures that <code>.sqlj</code> files and<code>.java</code> files receive the same encoding.</p>
</li>
<li>
<p>Do not use <code>-C-d</code> to specify an output directory for <code>.class</code> files. Instead, use the SQLJ <code>-d</code> option, which specifies the output directory for generated profile files (<code>.ser</code>), and is also passed to the Java compiler. This will ensure that <code>.class</code> files and <code>.ser</code> files are in the same directory.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If you specify compiler options but disable compilation (<code>-compile=false</code>), then the compiler options are silently ignored.</p>
</li>
<li>
<p>The compiler help option (<code>-C-help</code>, presuming your compiler supports <code>-help</code>) can be specified only on the command line or in the <code>SQLJ_OPTIONS</code> variable, not in a properties file. As with the SQLJ <code>-help</code> option, no translation will be done. This is true even if you also specify files to process. SQLJ assumes that you want help or you want translation, but not both.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-C-<span class="italic">Java_compiler_option</span>
</pre>
<p>For example:</p>
<pre>-C-nowarn
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>compile.<span class="italic">Java_compiler_option</span>
</pre>
<p>For example:</p>
<pre>compile.nowarn
</pre>
<p class="subhead2"><a id="i1007864"></a><a id="JSQLJ669"></a>Options to <a id="sthref699"></a><a id="sthref700"></a><a id="sthref701"></a>Pass to the Profile Customizer (-P)</p>
<p>During the customization phase (relevant only for ISO standard code generation), the <code>sqlj</code> script invokes a front-end customizer harness, which coordinates the customization and runs your particular customizer. The <code>-P</code> prefix marks options for customization, as follows:</p>
<ul>
<li>
<p>Use <code>-P</code> by itself to pass generic options to the customizer harness that apply regardless of the customizer.</p>
</li>
<li>
<p>Use <code>-P-C</code> to pass vendor-specific options to the particular customizer you are using.</p>
</li>
</ul>
<p>The <code>-P</code> and <code>-P-C</code> prefixes immediately precede a customizer option, with no spaces in between. After stripping off the prefix, the <code>sqlj</code> script passes the customizer option as is to the profile customizer.</p>
<p>One use of the <code>-P</code> prefix is to override the default customizer determined by the SQLJ <code>-default-customizer</code> option, as follows:</p>
<pre>-P-customizer=<span class="italic">your_customizer_class</span>
</pre>
<p>Example of a generic customizer option:</p>
<pre>-P-backup
</pre>
<p>The <code>-backup</code> flag is a generic customizer option to backup the previous customization before generating a new one.</p>
<p>Following is an example of a vendor-specific customizer option (in this case, Oracle-specific):</p>
<pre>-P-Csummary
</pre>
<p>The <code>summary</code> flag is an Oracle customizer option that prints a summary of the customizations performed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>There is no hyphen between <code>-P-C</code> and a vendor-specific customizer option. With other prefixes and prefix combinations, there <span class="italic">is</span> a hyphen between the prefix and the option.</p>
</li>
<li>
<p>The customizer help option (<code>-P-help</code>) can be specified only on the command line or in the <code>SQLJ_OPTIONS</code> variable, not in a properties file. As with the SQLJ <code>-help</code> option, no translation will be done. This is true even if you also specify files to process. SQLJ assumes that you want help or you want translation, but not both.</p>
</li>
<li>
<p>For ISO code generation, if you specify customization options but turn off customization for <code>.sqlj</code> files (and have no <code>.ser</code> files on the command line), then the customization options are silently ignored.</p>
</li>
<li>
<p>The <code>-P</code> prefix is not applicable for the default Oracle-specific code generation, where no profiles are produced and so no customization is performed.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-P-&lt;C&gt;<span class="italic">profile_customizer_option</span>
</pre>
<p>For example:</p>
<pre>-P-driver=oracle.jdbc.OracleDriver
-P-Csummary
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>profile.&lt;C&gt;<span class="italic">profile_customizer_option</span>
</pre>
<p>For example:</p>
<pre>profile.driver=oracle.jdbc.OracleDriver
profile.Csummary
</pre></div>
<!-- class="sect2" -->
<a id="i1007912"></a>
<div id="JSQLJ670" class="sect2">
<h3 class="sect2">Flags <a id="sthref702"></a><a id="sthref703"></a>for Special Processing</h3>
<p>The <code>.sqlj</code> files are typically processed by the SQLJ translator, the Java compiler, and, for ISO code generation, the SQLJ profile customizer. The following flags limit this processing, directing the SQLJ startup script to skip the indicated process:</p>
<ul>
<li>
<p><code>-compile</code></p>
</li>
<li>
<p><code>-profile</code></p>
</li>
</ul>
<p>The <code>-ser2class</code> flag, for ISO code generation, directs SQLJ to convert profiles from serialized resource (<code>.ser</code>) files to class files after customization.</p>
<p>The <code>-checksource</code> flag instructs SQLJ type resolution, in certain circumstances, to examine source files as well as class files or files specified on the SQLJ command line.</p>
<p>The <code>-bind-by-identifier</code> flag specifies that SQLJ treat multiple appearances of the same host variable in a given SQLJ statement as a single bind occurrence.</p>
<p class="subhead2"><a id="i1007924"></a><a id="JSQLJ671"></a>Compilation <a id="sthref704"></a><a id="sthref705"></a>Flag (-compile)</p>
<p>The <code>-compile</code> flag enables or disables processing of <code>.java</code> files by the compiler. This applies both to generated <code>.java</code> files and to <code>.java</code> files specified on the command line. This flag is useful, for example, if you want to compile <code>.java</code> files later using a compiler other than <code>javac</code>. The flag is <code>true</code> by default. Setting it to <code>false</code> disables compilation.</p>
<p>When you process a <code>.sqlj</code> file with <code>-compile=false</code>, you are responsible for compiling and customizing it later as necessary.</p>
<p>Setting <code>-compile=false</code> also implicitly sets <code>-profile=false</code>. In other words, whenever <code>-compile</code> is <code>false</code>, both compilation and customization are skipped. If you set <code>-compile=false</code> and <code>-profile=true</code>, then your <code>-profile</code> setting is ignored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
There are situations where it is sensible for <code>-compile</code> to be set to <code>false</code> even when <code>.java</code> files must be accessed for type resolution. You may do this, for example, if you are translating a <code>.sqlj</code> file and want to specify one or more <code>.java</code> files on the command line for type resolution during translation, but want to compile all your <code>.java</code> files later using a particular compiler.
<p>Note, however, that the <code>-checksource</code> option can simplify the type resolution process by eliminating the need to enter <code>.java</code> files for resolution on the SQLJ command line.</p>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-compile&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-compile=false
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.compile&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.compile=false
</pre>
<p>The default value for this option is:</p>
<pre>true
</pre>
<p class="subhead2"><a id="i1007952"></a><a id="JSQLJ672"></a>Profile <a id="sthref706"></a><a id="sthref707"></a>Customization Flag (-profile)</p>
<p>For ISO code generation, the <code>-profile</code> flag enables or disables processing of generated profile files (<code>.ser</code>) by the SQLJ profile customizer. However, this applies only to <code>.ser</code> files generated by the SQLJ translator from <code>.sqlj</code> files that you specify on the current command line. It does not apply to previously generated <code>.ser</code> files (or to <code>.jar</code> files) that you specify on the command line. The flag is <code>true</code> by default. Setting it to <code>false</code> disables customization.</p>
<p>This option acts differently than the <code>-compile</code> option for files specified on the command line. Any <code>.ser</code> and <code>.jar</code> files specified on the command line are still customized if <code>-profile=false</code>. However, <code>.java</code> files specified on the command line are <span class="italic">not</span> compiled if <code>-compile=false</code>. The reason for this is that you may want other operations, such as line mapping, to be performed on a <code>.java</code> file. There are, however, no other operations that can be performed on a <code>.ser</code> or <code>.jar</code> file specified on the command line.</p>
<p>When you process a <code>.sqlj</code> file with <code>-profile=false</code>, you are responsible for customizing it later, as necessary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Set this option to <code>false</code> if you do not want your application to require Oracle SQLJ run time and an Oracle JDBC driver when it runs. Or accomplish this by specifying a nondefault customizer, using the <code>-default-customizer</code> option. If no customization is performed, then the generic SQLJ run time will be used when your application runs.</p>
</li>
<li>
<p>Setting <code>-compile=false</code> also implicitly sets <code>-profile=false</code>. In other words, whenever <code>-compile</code> is <code>false</code>, both compilation and customization are skipped. If you set <code>-compile=false</code> and <code>-profile=true</code>, then your <code>-profile</code> setting is ignored.</p>
</li>
<li>
<p>This option is not applicable for the default Oracle-specific code generation, where no profiles are produced and so no customization is performed.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-profile&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-profile=false
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.profile&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.profile=false
</pre>
<p>The default value for this option is:</p>
<pre>true
</pre>
<p class="subhead2"><a id="i1007976"></a><a id="JSQLJ673"></a>Conversion<a id="sthref708"></a><a id="sthref709"></a><a id="sthref710"></a><a id="sthref711"></a> of .ser File to .class File (-ser2class)</p>
<p>With ISO standard SQLJ code generation, the <code>-ser2class</code> flag instructs SQLJ to convert generated <code>.ser</code> files to <code>.class</code> files. This is necessary if you are using SQLJ to create an applet that will be run from a browser that does not support resource file names with the <code>.ser</code> suffix.</p>
<p>This also simplifies the naming of schema objects for your profiles in situations where you are translating a SQLJ program on a client and then loading classes and resource files into the server. Loaded class schema objects have a simpler naming convention than loaded resource schema objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="inserver.htm#i1005791">&#34;Naming of Loaded Class and Resource Schema Objects&#34;</a></div>
<p>The conversion is performed after profile customization so that it includes your customizations. The base names of converted files are identical to those of the original files. The only difference in the file name is <code>.ser</code> being replaced by <code>.class</code>. For example, consider the following:</p>
<pre>Foo_SJProfile0.ser
</pre>
<p>This is converted to:</p>
<pre>Foo_SJProfile0.class
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The original <code>.ser</code> file is not saved.</p>
</li>
<li>
<p>Once a profile has been converted to a <code>.class</code> file, it cannot be further customized. You would have to delete the <code>.class</code> file and rerun SQLJ to recreate the profile.</p>
</li>
<li>
<p>Where encoding is necessary, the <code>-ser2class</code> option always uses <code>8859_1</code> encoding, ignoring the SQLJ <code>-encoding</code> setting.</p>
</li>
<li>
<p>If you use the default Oracle-specific code generation, then no profiles are produced and the <code>-ser2class</code> option does not apply.</p>
</li>
</ul>
</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-ser2class&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-ser2class
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.ser2class&lt;=true|false&gt;
</pre>
<p>For example</p>
<pre>sqlj.ser2class
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1008013"></a><a id="JSQLJ674"></a>Source C<a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a><a id="sthref715"></a>heck for Type Resolution (-checksource)</p>
<p>It may not be sufficient for the SQLJ type resolution process to examine only class files in the classpath and class or source files specified on the SQLJ command line. The <code>-checksource</code> flag instructs SQLJ to also examine source files in the classpath under the following circumstances:</p>
<ul>
<li>
<p>If a class file cannot be found for a required class, but a source file can be found</p>
</li>
<li>
<p>If a source file has a more recent modification date than its corresponding class file</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
This applies only to Java types that appear in <code>#sql</code> statements, not elsewhere in your Java code. Therefore, you should always explicitly provide the names of any required <code>.sqlj</code> files on the SQLJ command line.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-checksource&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-checksource=false
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.checksource=&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.checksource=false
</pre>
<p>The default value for this option is:</p>
<pre>true
</pre>
<p class="subhead2"><a id="i1008034"></a><a id="JSQLJ675"></a>Binding Host Expr<a id="sthref716"></a><a id="sthref717"></a>essions by Identifier (-bind-by-identifier)</p>
<p>In keeping with the SQLJ standard, the Oracle implementation by default creates a unique name for each host-variable bind reference in a statement, even if there are multiple occurrences of the same host variable. The SQLJ standard is based on JDBC, and JDBC does not make provisions for binding the same variable into different positions. Instead, each bind position (identified by <code>?</code>) is bound to an individual value.</p>
<p>In some situations this causes errors, such as in the following example:</p>
<pre>#sql emps = { SELECT substr(first_name, 1, :bind_var), sum(salary) FROM employees
              GROUP BY substr(first_name, 1, :bind_var) };
</pre>
<p>Because separate bind reference names are created for the two occurrences of <code>bind_var</code>, this results in a SQL exception at run time. When the differing bind names are detected, the SQL engine concludes that the <code>GROUP BY</code> clause is not part of the <code>SELECT</code>-list.</p>
<p>To avoid such problems, Oracle extends standard functionality with the <code>-bind-by-identifier</code> flag. A setting of <code>true</code> results in all bind occurrences of the same identifier in a given SQLJ statement or PL/SQL block being treated as a single bind occurrence. A SQLJ statement with four bind operations, <code>:x</code>, <code>:x</code>, <code>:y</code>, <code>:x</code>, would be bound as <code>:1</code>, <code>:1</code>, <code>:2</code>, <code>:1</code> instead of <code>:1</code>, <code>:2</code>, <code>:3</code>, <code>:4</code>.</p>
<p>In the preceding example, both bindings would be as <code>substr(ename, 1, :1)</code> instead of as <code>substr(ename, 1, :1)</code> and <code>substr(ename, 1, :2)</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>-bind-by-identifier</code> flag applies only to host expressions that are simple host variables.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-bind-by-identifier&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-bind-by-identifier
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.bind-by-identifier=&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.bind-by-identifier
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre></div>
<!-- class="sect2" -->
<a id="i1008060"></a>
<div id="JSQLJ676" class="sect2">
<h3 class="sect2">Semantics-<a id="sthref718"></a><a id="sthref719"></a>Checking and Offline-Parsing Options</h3>
<p>The following options specify characteristics of online and offline semantics-checking and offline parsing:</p>
<ul>
<li>
<p><code>-offline</code></p>
</li>
<li>
<p><code>-online</code></p>
</li>
<li>
<p><code>-cache</code></p>
</li>
<li>
<p><code>-parse</code></p>
</li>
</ul>
<p>Description of these options is preceded by two introductory discussions:</p>
<ul>
<li>
<p>A discussion of <code>OracleChecker</code> (the default front-end class for semantics-checking) and an introduction to Oracle semantics-checkers</p>
</li>
<li>
<p>A comparison of online semantics-checking versus offline parsing</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
As described in <a href="#i1006927">&#34;Online Semantics-Checking and User Name (-user)&#34;</a>, online semantics-checking is enabled by setting the translator <code>-user</code> option. However, the setting of the <code>-parse</code> option, which is used to enable or disable offline parsing, can override this. See <a href="#i1008427">&#34;Offline Parser (-parse)&#34;</a>.</div>
<p class="subhead2"><a id="i1008088"></a><a id="JSQLJ677"></a>Semantics-<a id="sthref720"></a><a id="sthref721"></a><a id="sthref722"></a><a id="sthref723"></a><a id="sthref724"></a>Checkers and OracleChecker Front End (default checker)</p>
<p>Oracle supplies Oracle-specific offline checkers, a generic offline checker, Oracle-specific online checkers, and a generic online checker. The generic checkers assume you use only Entry Level of SQL-92 and standard JDBC features. Oracle recommends that you use Oracle-specific checkers when using Oracle Database.</p>
<p>The default checker, which is satisfactory in the great majority of circumstances, is <code>oracle.sqlj.checker.OracleChecker</code> for both online and offline checking. This class acts as a front end and runs the appropriate semantics-checker, depending on your environment and whether you choose offline or online checking.</p>
<p>For Oracle, there is Oracle8 checker for Oracle 10<span class="italic">g</span>, Oracle9<span class="italic">i</span>, and Oracle8<span class="italic">i</span> types, for both online and offline checking (as used in the corresponding JDBC implementations).</p>
<p class="subhead2"><a id="JSQLJ678"></a>Online Checking with Oracle Database and JDBC Driver</p>
<p>If you are using Oracle Database and Oracle JDBC driver with online checking, then <code>OracleChecker</code> will choose a checker based on the lower of your database version and JDBC driver version. <a href="#BCEDEICF">Table 8-4</a> summarizes the choices for the possible combinations of database version and driver version, and also notes any other Oracle checkers that would be legal.</p>
<div id="JSQLJ679" class="tblformal">
<p class="titleintable"><a id="sthref725"></a><a id="BCEDEICF"></a>Table 8-4 Oracle Online Semantics-Checkers Chosen by OracleChecker</p>
<table class="cellalignment4020" title="Oracle Online Semantics-Checkers Chosen by OracleChecker " summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t70">Database Release</th>
<th class="cellalignment4021" id="r1c2-t70">JDBC Release</th>
<th class="cellalignment4021" id="r1c3-t70">Chosen Online Checker</th>
<th class="cellalignment4021" id="r1c4-t70">Other Legal Online Checkers</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t70" headers="r1c1-t70">
<p>Oracle10<span class="italic">g</span>, 9<span class="italic">i</span>, or 8<span class="italic">i</span></p>
</td>
<td class="cellalignment4017" headers="r2c1-t70 r1c2-t70">
<p>Oracle11<span class="italic">g</span></p>
</td>
<td class="cellalignment4017" headers="r2c1-t70 r1c3-t70">
<p>Oracle8JdbcChecker</p>
</td>
<td class="cellalignment4017" headers="r2c1-t70 r1c4-t70">
<p>Oracle8To7JdbcChecker</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="JSQLJ680"></a>Offline Checking with Oracle JDBC Driver</p>
<p>If you are using an Oracle JDBC driver with offline checking, then <code>OracleChecker</code> chooses a checker based on your JDBC driver version. <a href="#BCEGGHBA">Table 8-5</a> summarizes the possible choices.</p>
<div id="JSQLJ681" class="tblformal">
<p class="titleintable"><a id="sthref726"></a><a id="BCEGGHBA"></a>Table 8-5 Oracle Offline Semantics-Checkers Chosen by OracleChecker</p>
<table class="cellalignment4020" title="Oracle Offline Semantics-Checkers Chosen by OracleChecker " summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t71">JDBC Release</th>
<th class="cellalignment4021" id="r1c2-t71">Chosen Offline Checker</th>
<th class="cellalignment4021" id="r1c3-t71">Other Legal Offline Checkers</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t71" headers="r1c1-t71">
<p>Oracle11<span class="italic">g</span></p>
</td>
<td class="cellalignment4017" headers="r2c1-t71 r1c2-t71">
<p>Oracle8OfflineChecker</p>
</td>
<td class="cellalignment4017" headers="r2c1-t71 r1c3-t71">
<p>No</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="i1008220"></a><a id="JSQLJ682"></a>Online Sem<a id="sthref727"></a><a id="sthref728"></a>antics-Checking Versus Offline Parsing</p>
<p>The Oracle SQLJ implementation supports a feature known as offline parsing that offers a limited alternative to online semantics-checking. Offline parsing does not use a database connection, so cannot perform verification of operations against the database schema, but does offer syntax-checking of all SQL and PL/SQL statements. (Prior to Oracle9<span class="italic">i</span>, syntax-checking was not possible without a database connection.)</p>
<p><a href="#BCEHAHAI">Table 8-6</a> provides a comparative summary of what offline parsing and online semantics-checking offer.</p>
<div id="JSQLJ683" class="tblformal">
<p class="titleintable"><a id="sthref729"></a><a id="BCEHAHAI"></a>Table 8-6 Feature Comparison: Offline Parsing Versus Online Semantics-Checking</p>
<table class="cellalignment4020" title="Feature Comparison: Offline Parsing Versus Online Semantics-Checking" summary="summary" dir="ltr">
<thead>
<tr class="cellalignment4011">
<th class="cellalignment4021" id="r1c1-t72">Feature</th>
<th class="cellalignment4021" id="r1c2-t72">By Offline Parsing?</th>
<th class="cellalignment4021" id="r1c3-t72">By Online Checking?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r2c1-t72" headers="r1c1-t72">
<p>Verify data manipulation language (DML), SELECT, and PL/SQL syntax.</p>
</td>
<td class="cellalignment4017" headers="r2c1-t72 r1c2-t72">
<p>Yes</p>
</td>
<td class="cellalignment4017" headers="r2c1-t72 r1c3-t72">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r3c1-t72" headers="r1c1-t72">
<p>Verify data definition language (DDL) syntax.</p>
</td>
<td class="cellalignment4017" headers="r3c1-t72 r1c2-t72">
<p>Yes</p>
</td>
<td class="cellalignment4017" headers="r3c1-t72 r1c3-t72">
<p>No</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r4c1-t72" headers="r1c1-t72">
<p>Verify DML, SELECT, and PL/SQL semantics (comparison against database schema).</p>
</td>
<td class="cellalignment4017" headers="r4c1-t72 r1c2-t72">
<p>No</p>
</td>
<td class="cellalignment4017" headers="r4c1-t72 r1c3-t72">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment4011">
<td class="cellalignment4017" id="r5c1-t72" headers="r1c1-t72">
<p>Verify DDL semantics (comparison against database schema).</p>
</td>
<td class="cellalignment4017" headers="r5c1-t72 r1c2-t72">
<p>No</p>
</td>
<td class="cellalignment4017" headers="r5c1-t72 r1c3-t72">
<p>No</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Online checking offers the primary advantage of verifying SQL and PL/SQL operations against the database schema. This includes verifying that column types match SQL operations and verifying the existence of called stored procedures. It requires a database connection during translation, however, which may be problematic in some circumstances. It also performs no verification of DDL operations.</p>
<p>Offline parsing offers the advantage of SQL syntax-checking without a database connection during translation, and also includes DDL operations in its syntax verifications.</p>
<p>Note that neither mode performs DDL semantics-checking against the database schema.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If both offline parsing and online checking are enabled, some types of errors will be reported twice.</p>
</li>
<li>
<p>Problems detected by either the offline parser or the online checker are reported at a warning or advisory level, not a fatal level.</p>
</li>
<li>
<p>Do not confuse offline parsing with offline semantics-checking. Offline checking consists of basic semantics-checking steps that always occur, regardless of whether online checking is enabled and regardless of whether offline parsing is enabled: analysis of the types of Java expressions in your SQLJ executable statements, and categorization of embedded SQL operations according to keyword, such as <code>SELECT</code>.</p>
</li>
<li>
<p>Compatibility of data corresponding to weakly typed host expressions is never checked.</p>
</li>
<li>
<p>Mode compatibility of expressions in PL/SQL anonymous blocks is never checked.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="i1008291"></a><a id="JSQLJ684"></a>Offline <a id="sthref730"></a><a id="sthref731"></a><a id="sthref732"></a>Semantics-Checker (-offline)</p>
<p>The <code>-offline</code> option specifies a Java class that implements the semantics-checking component of SQLJ for offline checking. With offline checking, there is no database connection. Only SQL syntax and usage of Java types is checked. Note that offline checking is neither enabled nor disabled by the <code>-offline</code> option. Offline checking runs only when online checking does not, either because online checking is not enabled or because the database connection cannot be established.</p>
<p>You can specify different offline checkers for different connection contexts, with a limit of one checker per context. Do <span class="italic">not</span> list multiple offline checkers for one connection context. The default <code>OracleChecker</code>, a front-end class, will serve your needs unless you want to specify a particular checker that would not be chosen by <code>OracleChecker</code>.</p>
<p>The following example shows how to select Oracle8 offline checker for a particular connection context (<code>CtxClass</code>):</p>
<pre>-offline@CtxClass=oracle.sqlj.checker.Oracle8OfflineChecker
</pre>
<p>This results in SQLJ using <code>oracle.sqlj.checker.Oracle8OfflineChecker</code> for offline checking of any of your SQLJ executable statements that specify a connection object that is a <code>CtxClass</code> instance.</p>
<p>The <code>CtxClass</code> connection context class must be declared in your source code or previously compiled into a <code>.class</code> file. (See <a href="alangfea.htm#i1005583">&#34;Connection Contexts&#34;</a> for more information.)</p>
<p>Use the <code>-offline</code> option separately for each connection context offline checker you want to specify; these settings have no influence on each other. For example:</p>
<pre>-offline@CtxClass2=oracle.sqlj.checker.Oracle8OfflineChecker
-offline@CtxClass3=sqlj.semantics.OfflineChecker
</pre>
<p>To specify the offline checker for the default connection context and any other connection contexts for which you do not specify an offline checker:</p>
<pre>-offline=oracle.sqlj.checker.Oracle8OfflineChecker
</pre>
<p>Any connection context without an offline checker setting uses the offline checker setting of the default connection context, presuming an offline checker has been set for the default context.</p>
<p>The command-line syntax for this option is as follow:</p>
<pre>-offline&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">checker_class</span>
</pre>
<p>For example:</p>
<pre>-offline=oracle.sqlj.checker.Oracle8OfflineChecker
-offline@CtxClass=oracle.sqlj.checker.Oracle8OfflineChecker
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.offline&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">checker_class</span>
</pre>
<p>For example:</p>
<pre>sqlj.offline=oracle.sqlj.checker.Oracle8OfflineChecker
sqlj.offline@CtxClass=oracle.sqlj.checker.Oracle8OfflineChecker
</pre>
<p>The default value for this option is:</p>
<pre>oracle.sqlj.checker.OracleChecker
</pre>
<p class="subhead2"><a id="i1008343"></a><a id="JSQLJ685"></a>Online <a id="sthref733"></a><a id="sthref734"></a><a id="sthref735"></a>Semantics-Checker (-online)</p>
<p>The <code>-online</code> option specifies a Java class or list of classes that implement the online semantics-checking component of SQLJ. This involves connecting to a database. Note that online checking is not enabled by the <code>-online</code> option. You must enable it through the <code>-user</code> option. The <code>-password</code>, <code>-url</code>, and <code>-driver</code> options must be set appropriately as well.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some settings of the SQLJ <code>-parse</code> option will disable online semantics-checking, overriding the effect of the <code>-user</code> option.</div>
<p>You can specify different online checkers for different connection contexts, and you can list multiple checkers (separated by commas) for any given context. In cases where multiple checkers are listed for a single context, SQLJ uses the first checker (reading from left to right in the list) that accepts the database connection established for online checking. At analysis time, a connection is passed to each online checker and the checker decides whether it recognizes the database.</p>
<p>The default <code>OracleChecker</code>, a front-end class, will serve your needs unless you want to specify a particular checker that would not be chosen by <code>OracleChecker</code>.</p>
<p>The following example shows how to select Oracle8 online checker for the <code>DefaultContext</code> class and any other connection context classes without a specified setting:</p>
<pre>-online=oracle.sqlj.checker.Oracle8JdbcChecker
</pre>
<p>To specify a list of drivers and allow the proper class to be selected depending on what kind of database is being accessed:</p>
<pre>-online=oracle.sqlj.checker.Oracle8JdbcChecker,sqlj.semantics.JdbcChecker
</pre>
<p>With this specification, if connection is made to Oracle Database, then SQLJ uses the <code>oracle.sqlj.checker.Oracle8JdbcChecker</code> semantics-checker. If connection is made to any other kind of database, then SQLJ uses the generic <code>sqlj.semantics.JdbcChecker</code> semantics-checker. This is similar functionally to what the default <code>OracleChecker</code>.</p>
<p>To specify the online checker for a particular connection context (<code>CtxClass</code>):</p>
<pre>-online@CtxClass=oracle.sqlj.checker.Oracle8JdbcChecker
</pre>
<p>This results in the use of <code>oracle.sqlj.checker.Oracle8JdbcChecker</code> for online checking of any of your SQLJ executable statements that specify a connection object that is an instance of <code>CtxClass</code>, presuming you enable online checking for <code>CtxClass</code>.</p>
<p>The <code>CtxClass</code> connection context class must be declared in your source code or previously compiled into a <code>.class</code> file.</p>
<p>Use the <code>-online</code> option separately for each connection context online checker you want to specify. These settings have no influence on each other:</p>
<pre>-online@CtxClass2=oracle.sqlj.checker.Oracle8JdbcChecker
-online@CtxClass3=sqlj.semantics.JdbcChecker
</pre>
<p>Any connection context without an online checker setting uses the online checker setting of the default connection context.</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-online&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">checker_class(list)</span>
</pre>
<p>For example:</p>
<pre>-online=oracle.sqlj.checker.Oracle8JdbcChecker
-online=oracle.sqlj.checker.Oracle8JdbcChecker,sqlj.semantics.JdbcChecker
-online@CtxClass=oracle.sqlj.checker.Oracle8JdbcChecker
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.online&lt;@<span class="italic">conn_context_class</span>&gt;=<span class="italic">checker_class(list)</span>
</pre>
<p>For example:</p>
<pre>sqlj.online=oracle.sqlj.checker.Oracle8JdbcChecker
sqlj.online=oracle.sqlj.checker.Oracle8JdbcChecker,sqlj.semantics.JdbcChecker
sqlj.online@CtxClass=oracle.sqlj.checker.Oracle8JdbcChecker
</pre>
<p>The default value for this option is:</p>
<pre>oracle.sqlj.checker.OracleChecker
</pre>
<p class="subhead2"><a id="JSQLJ686"></a>Caching of <a id="sthref736"></a><a id="sthref737"></a><a id="sthref738"></a><a id="sthref739"></a>Online Semantics-Checker Results (-cache)</p>
<p>Use the <code>-cache</code> option to enable caching of the results generated by the online checker. This avoids additional database connections during subsequent SQLJ translation runs. The analysis results are cached in a file, <code>SQLChecker.cache</code>, that is placed in your current directory. The cache contains serialized representations of all SQL statements successfully translated (translated without error or warning messages), including all statement parameters, return types, translator settings, and modes.</p>
<p>The cache is cumulative and continues to grow through successive invocations of the SQLJ translator. Delete the <code>SQLChecker.cache</code> file to empty the cache.</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-cache&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-cache
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.cache&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.cache
</pre>
<p>The default value for this option is:</p>
<pre>false
</pre>
<p class="subhead2"><a id="i1008427"></a><a id="JSQLJ687"></a>Offline <a id="sthref740"></a><a id="sthref741"></a>Parser (-parse)</p>
<p>Use the <code>-parse</code> option to enable offline parsing. This feature is a complement to online semantics-checking, offering SQL and PL/SQL syntax-checking (but not verification against the schema) without a database connection during translation. Offline parsing also checks syntax for DDL statements, which online checking does not.</p>
<p>Also be aware that the setting of the <code>-parse</code> option can override the enabling of online checking by the <code>-user</code> option. Possible <code>-parse</code> settings are as follows:</p>
<ul>
<li>
<p><code>both</code> (default): Enable the offline parser and allow online checking. In this case, online checking is determined by the <code>-user</code> option.</p>
</li>
<li>
<p><code>online-only</code>: Disable the offline parser and allow online checking. Again, online checking is determined by the <code>-user</code> option.</p>
</li>
<li>
<p><code>offline-only</code>: Enable the offline parser and disallow online checking. This overrides any <code>-user</code> option setting that would otherwise enable online checking.</p>
</li>
<li>
<p><code>none</code>: Disable the offline parser and disallow online checking, Again, this overrides any <code>-user</code> option setting that would otherwise enable online checking.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">parserclassname</span></code>: Specify the name of a Java class that implements an alternative SQL parser. The class must implement the <code>sqlj.framework.checker.SimpleChecker</code> interface. This setting enables the specified parser, and only that parser is used for SQL-checking. The standard offline parser and online checking are both disabled.</p>
</li>
</ul>
<p>The <code>offline-only</code> and <code>none</code> settings are offered for completeness, but are not typical modes of operation. It is best to let the <code>-user</code> option determine online checking. It is also not typical to specify your own parser.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In modes where both offline parsing and online checking are enabled, there may be duplicate reporting of some problems.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-parse=both|online-only|offline-only|none|<span class="italic">parserclassname</span>
</pre>
<p>For example:</p>
<pre>-parse=online-only
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.parse=both|online-only|offline-only|none|<span class="italic">parserclassname</span>
</pre>
<p>For example:</p>
<pre>sqlj.parse=online-only
</pre>
<p>The default value for this option is:</p>
<pre>both
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008460"></a>
<div id="JSQLJ688" class="sect1">
<h2 class="sect1">Translator <a id="sthref742"></a><a id="sthref743"></a><a id="sthref744"></a>Support and Options for Alternative Environments</h2>
<p>By default, the Oracle Database 12<span class="italic">c</span> Release 1 (12.1) SQLJ implementation is configured to run under standard JDK 6 and to use the standard compiler <code>javac</code>. These are not requirements, however. You can configure SQLJ to work with alternative JVMs or compilers. To do so, you must supply SQLJ with the following information:</p>
<ul>
<li>
<p>The name of the JVM to use (<code>-vm</code> option)</p>
</li>
<li>
<p>The name of the Java compiler to use (<code>-compiler-executable</code> option)</p>
</li>
<li>
<p>Any settings the compiler requires</p>
</li>
</ul>
<p>A set of SQLJ options enables you to provide this information. SQLJ also defaults to Oracle profile customizer, but can work with alternative customizers as well.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware of the limitations of any operating system and environment you use. In particular, the complete, expanded SQLJ command line must not exceed the maximum command-line size. Consult your operating system documentation.</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1008483">Java and Compiler Options</a></p>
</li>
<li>
<p><a href="#i1008703">Customization Options</a></p>
</li>
</ul>
<a id="i1008483"></a>
<div id="JSQLJ689" class="sect2">
<h3 class="sect2">Java <a id="sthref745"></a><a id="sthref746"></a>and Compiler Options</h3>
<p>The following options relate to the operation of the JVM and Java compiler:</p>
<ul>
<li>
<p><code>-vm</code> (to specify the JVM, on the command line only)</p>
</li>
<li>
<p><code>-compiler-executable</code> (to specify the Java compiler)</p>
</li>
<li>
<p><code>-compiler-encoding-flag</code></p>
</li>
<li>
<p><code>-compiler-output-file</code></p>
</li>
<li>
<p><code>-compiler-pipe-output-flag</code></p>
</li>
</ul>
<p>Some compilers, such as the standard <code>javac</code>, require a Java source file name to match the name of the public class, if any, defined there. Therefore, by default the SQLJ translator verifies that this is true. However, you can use the <code>-checkfilename</code> option to instruct SQLJ not to verify this.</p>
<p>For some JVM and compiler configurations, there may be problems with the way SQLJ usually invokes the compiler. You can use the <code>-passes</code> option to alleviate this by breaking SQLJ processing into a two-pass process. You can also pass options directly to the particular JVM or compiler you use, through the <code>-J</code> and <code>-C</code> prefixes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>-vm</code> option, <code>-passes</code> option, and <code>-J</code> prefix cannot be used in a properties file. You can set them on the command line or, more conveniently, in the <code>SQLJ_OPTIONS</code> environment variable.</div>
<p class="subhead2"><a id="JSQLJ690"></a>Name <a id="sthref747"></a><a id="sthref748"></a><a id="sthref749"></a><a id="sthref750"></a>of the Java Virtual Machine (-vm)</p>
<p>Use the <code>-vm</code> option if you want to specify a particular JVM for SQLJ to use. Otherwise, SQLJ uses the standard <code>java</code> from the Sun Microsystems JDK. You cannot set this option in a properties file, because properties files are read after the JVM is invoked.</p>
<p>If you do not specify a directory path along with the name of the JVM executable file, then SQLJ looks for the executable according to the setting of your operating system <code>PATH</code> variable.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Special functionality of this option, <code>-vm=echo</code>, is supported. This is equivalent to the <code>-n</code> option, instructing the <code>sqlj</code> script to construct the full command line that would be passed to the SQLJ translator, and echo it to the user without having the translator execute it.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-vm=<span class="italic">JVM_path+name </span>
</pre>
<p>For example:</p>
<pre>-vm=/myjavadir/myjavavm
</pre>
<p>The default value is:</p>
<pre>java
</pre>
<p class="subhead2"><a id="i1008540"></a><a id="JSQLJ691"></a>Name of <a id="sthref751"></a><a id="sthref752"></a><a id="sthref753"></a>the Java Compiler (-compiler-executable)</p>
<p>Use the <code>-compiler-executable</code> option if you want to specify a particular Java compiler for SQLJ to use. Otherwise SQLJ, uses the standard <code>javac</code> from the Sun Microsystems JDK.</p>
<p>If you do not specify a directory path along with the name of the compiler executable file, then SQLJ looks for the executable according to the setting of your operating system <code>PATH</code> variable.</p>
<p>The following is req<a id="sthref754"></a>uired of any Java compiler that you use:</p>
<ul>
<li>
<p>It can write error and status information to the standard output device (for example, <code>STDOUT</code> on a UNIX system) or to a file, as directed by the <code>-compiler-output-file</code> option.</p>
</li>
<li>
<p>It will understand the SQLJ <code>-d</code> option, which determines the root directory for class files.</p>
</li>
<li>
<p>It must return a nonzero exit code to the operating system whenever a compilation error occurs.</p>
</li>
<li>
<p>The line information that it provides in any errors or messages must be in one of the following formats (items in <code>&lt;&gt;</code> brackets being optional):</p>
<ul>
<li>
<p>Sun Microsystems <code>javac</code> format</p>
<pre><span class="italic">filename</span>.java:<span class="italic">line</span>&lt;.<span class="italic">column</span>&gt;&lt;-<span class="italic">line</span>&lt;.<span class="italic">column</span>&gt;&gt;
</pre>
<p>Example: <code>myfile.java:15: Illegal character: &#39;\u01234&#39;</code></p>
</li>
<li>
<p>Microsoft <code>jvc</code> format</p>
<pre><span class="italic">filename</span>.java(<span class="italic">line</span>,<span class="italic">column</span>)
</pre>
<p>Example: <code>myfile.java(15,7) Illegal character: &#39;\u01234&#39;</code></p>
</li>
</ul>
</li>
</ul>
<p>As always, SQLJ processes compiler line information so that it refers to line numbers in the original <code>.sqlj</code> file, not in the produced <code>.java</code> file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a compiler that does not support an <code>-encoding</code> option, disable the <code>-compiler-encoding-flag</code>.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-compiler-executable=<span class="italic">Java_compiler_path+name</span>
</pre>
<p>For example:</p>
<pre>-compiler-executable=/myjavadir/myjavac
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.compiler-executable=<span class="italic">Java_compiler_path+name</span>
</pre>
<p>For example:</p>
<pre>sqlj.compiler-executable=myjavac
</pre>
<p>The default value is:</p>
<pre>javac
</pre>
<p class="subhead2"><a id="i1008581"></a><a id="JSQLJ692"></a>Compiler <a id="sthref755"></a><a id="sthref756"></a>Encoding Support (-compiler-encoding-flag)</p>
<p>When you use the <code>-encoding</code> option to specify an encoding character set for SQLJ to use, SQLJ passes this to the Java compiler for the compiler to use as well. Set the <code>-compiler-encoding-flag</code> to <code>false</code> if you do not want SQLJ to pass the character encoding to the compiler. For example, if you are using a compiler other than <code>javac</code> and it does not support an <code>-encoding</code> option by that name.</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-compiler-encoding-flag&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-compiler-encoding-flag=false
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.compiler-encoding-flag&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.compiler-encoding-flag=false
</pre>
<p>The default value is:</p>
<pre>true
</pre>
<p class="subhead2"><a id="i1008601"></a><a id="JSQLJ693"></a>Compiler <a id="sthref757"></a><a id="sthref758"></a>Output File (-compiler-output-file)</p>
<p>If you want the Java compiler to write its results to a file, then use the <code>-compiler-output-file</code> option to make SQLJ aware of the file name. Otherwise, SQLJ assumes that the compiler writes to the standard output device, such as <code>STDOUT</code> on a UNIX system. As appropriate, specify an absolute path or a relative path from the current directory.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use this option if you enable <code>-passes</code>, which requires output to <code>STDOUT</code>.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-compiler-output-file=<span class="italic">output_file_path+name</span>
</pre>
<p>For example:</p>
<pre>-compiler-output-file=/myjavadir/mycmploutput
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.compiler-output-file=<span class="italic">output_file_path+name</span>
</pre>
<p>For example:</p>
<pre>sqlj.compiler-output-file=/myjavadir/mycmploutput
</pre>
<p>This option does not have a default value.</p>
<p class="subhead2"><a id="i1008620"></a><a id="JSQLJ694"></a>Compiler <a id="sthref759"></a><a id="sthref760"></a><a id="sthref761"></a><a id="sthref762"></a>Message Output Pipe (-compiler-pipe-output-flag)</p>
<p>By default, the Java compiler writes errors and message output to <code>STDERR</code>. However, if the error messages from the Java compiler should also be redirected to the same file as specified with the <code>-compiler-output-file</code> option, then set this flag to true. This option is meaningful only if used in conjunction with the <code>-compiler-output-file</code> option.</p>
<p>You can set this flag in a properties file, as well as on the command line or in the <code>SQLJ_OPTIONS</code> environment variable.</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-compiler-pipe-outflag=&lt;true|false&gt;
</pre>
<p>For example, while compiling a file called <code>MyDemo.sqlj</code>, for which the Java compiler messages and error messages are to be redirected to the same file, the following syntax should be used:</p>
<pre>sqlj -compiler-output-file=/myjavadir/mycmploutput
-compiler-pipe-output-flag=true MyDemo.sqlj
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.compiler-pipe-output-flag&lt;=true|false&gt;
</pre>
<p>The default value is:</p>
<pre>true
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If this flag is set to false, then the error messages from the Java compiler will be directed to <code>STDERR</code>.</div>
<p class="subhead2"><a id="BCEIIEAI"></a><a id="JSQLJ695"></a>Sour<a id="sthref763"></a><a id="sthref764"></a><a id="sthref765"></a><a id="sthref766"></a>ce File Name Check (-checkfilename)</p>
<p>It is generally advisable for the source file name to always match the name of the public class defined or, if there is no public class, the name of the first class defined. For example, public class <code>MyPublicClass</code> should be defined in a <code>MyPublicClass.sqlj</code> source file.</p>
<p>The <code>-checkfilename</code> flag instructs SQLJ whether to verify that the SQLJ source file name matches the name of the public class, if any, defined there. Some compilers, such as the standard <code>javac</code>, require this to be the case, while others do not.</p>
<p>To maximize portability of your code, this flag should be enabled, which it is by default.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are translating in the server, where there is no equivalent naming requirement, there is no <code>-checkfilename</code> option and the translator executes no such check.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-checkfilename&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>-checkfilename=false
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.checkfilename&lt;=true|false&gt;
</pre>
<p>For example:</p>
<pre>sqlj.checkfilename=false
</pre>
<p>The default value is:</p>
<pre>true
</pre>
<p class="subhead2"><a id="i1008663"></a><a id="JSQLJ696"></a>SQ<a id="sthref767"></a><a id="sthref768"></a><a id="sthref769"></a>LJ Two-Pass Execution (-passes)</p>
<p>By default, the following occurs when you invoke the <code>sqlj</code> script:</p>
<ol>
<li>
<p>The <code>sqlj</code> script invokes your JVM, which runs the SQLJ translator.</p>
</li>
<li>
<p>The translator completes the semantics-checking and translation of your <code>.sqlj</code> files, generating translated <code>.java</code> files.</p>
</li>
<li>
<p>The translator invokes your Java compiler, which compiles the generated <code>.java</code> files.</p>
</li>
<li>
<p>The translator processes the compiler output.</p>
</li>
<li>
<p>If any profile files were generated, then the translator invokes a profile customizer to customize them.</p>
</li>
</ol>
<p>For some JVM and compiler configurations, however, the compiler invocation in Step 3 might not return, in which case your translation will suspend.</p>
<p>If you encounter this situation, the solution is to instruct SQLJ to run in two passes, with the compilation step in between. To accomplish this, you must enable the two-pass execution flag as follows:</p>
<pre>-passes
</pre>
<p>The <code>-passes</code> option must be specified on the command line or, equivalently, in the <code>SQLJ_OPTIONS</code> environment variable. It cannot be specified in a properties file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If you enable <code>-passes</code>, then compiler output must go to <code>STDOUT</code>. Therefore, leave <code>-compiler-pipe-output-flag</code> enabled, which is its default. In addition, you cannot use the <code>-compiler-output-file</code> option, which would result in writing to a file instead of to <code>STDOUT</code>.</p>
</li>
<li>
<p>Like other command-line-only flags (<code>-help</code>, <code>-version</code>, <code>-n</code>), the <code>-passes</code> flag does not support <code>=true</code> syntax.</p>
</li>
</ul>
</div>
<p>With <code>-passes</code> enabled, the following occurs when you invoke the <code>sqlj</code> script:</p>
<ol>
<li>
<p>The <code>sqlj</code> script invokes your JVM, which runs the SQLJ translator for its first pass.</p>
</li>
<li>
<p>The translator completes the semantics-checking and translation of your <code>.sqlj</code> files, generating translated <code>.java</code> files.</p>
</li>
<li>
<p>The JVM is terminated.</p>
</li>
<li>
<p>The <code>sqlj</code> script invokes the Java compiler, which compiles the generated <code>.java</code> files.</p>
</li>
<li>
<p>The <code>sqlj</code> script invokes your JVM again, which runs the SQLJ translator for its second pass.</p>
</li>
<li>
<p>The translator processes compiler output.</p>
</li>
<li>
<p>If any profile files were generated, the JVM runs your profile customizer to customize them.</p>
</li>
</ol>
<p>With this sequence, you circumvent any problems the JVM might have in invoking the Java compiler.</p>
<p>The command-line syntax for this option is as follows:</p>
<pre>-passes
</pre>
<p>For example:</p>
<pre>-passes
</pre>
<p>The default value is:</p>
<pre>off
</pre></div>
<!-- class="sect2" -->
<a id="i1008703"></a>
<div id="JSQLJ697" class="sect2">
<h3 class="sect2">Customization <a id="sthref770"></a>Options</h3>
<p>The following options relate to the customization of your SQLJ profiles, if applicable:</p>
<ul>
<li>
<p><code>-default-customizer</code></p>
</li>
<li>
<p>Options passed directly to the customizer</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the default Oracle-specific code generation, then SQLJ generates no profiles and, therefore, performs no customization. In that case, these options do not apply.</div>
<p class="subhead2"><a id="i1008714"></a><a id="JSQLJ698"></a>Default <a id="sthref771"></a><a id="sthref772"></a>Profile Customizer (-default-customizer)</p>
<p>Use the <code>-default-customizer</code> option to instruct SQLJ to use a profile customizer other than the default, which is:</p>
<pre>oracle.sqlj.runtime.util.OraCustomizer
</pre>
<p>In particular, use this option if you are not using Oracle Database. This option takes a fully qualified Java class name as its argument.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can override this option with the <code>-P-customizer</code> option in your SQLJ command line or properties file.</div>
<p>The command-line syntax for this option is as follows:</p>
<pre>-default-customizer=<span class="italic">customizer_classname</span>
</pre>
<p>For example:</p>
<pre>-default-customizer=sqlj.myutil.MyCustomizer
</pre>
<p>The syntax for a properties file entry for this option is as follows:</p>
<pre>sqlj.default-customizer=<span class="italic">customizer_classname</span>
</pre>
<p>For example:</p>
<pre>sqlj.default-customizer=sqlj.myutil.MyCustomizer
</pre>
<p>The default value for this option is:</p>
<pre>oracle.sqlj.runtime.util.OraCustomizer
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you use Oracle Database and ISO code generation, Oracle recommends that you use the default <code>OraCustomizer</code> for your profile customization.</div>
<p class="subhead2"><a id="JSQLJ699"></a>Options Passed Directly to the Customizer</p>
<p>As with the JVM and compiler, you can pass options directly to the profile customizer harness using a prefix, in this case <code>-P</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007864">&#34;Options to Pass to the Profile Customizer (-P)&#34;</a></div>
<p>Details about these options, both general customization options and Oracle-specific customizer options, are covered in <a href="profcust.htm#i634421">&#34;Customization Options and Choosing a Customizer&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4010">
<tr>
<td class="cellalignment4017">
<table class="cellalignment4015">
<tr>
<td class="cellalignment4014"><a href="alangfea.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4014"><a href="transrun.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4019">
<table class="cellalignment4013">
<tr>
<td class="cellalignment4014"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4014"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4014"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4014"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4014"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4014"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>