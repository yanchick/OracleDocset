<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-72373"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Introduction%20to%20SQLJ"></a><title>Introduction to SQLJ</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743"/>
<meta name="dcterms.created" content="2013-12-02T6:55:13Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SQLJ Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17660-12"/>
<meta name="dcterms.isVersionOf" content="JSQLJ"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="getstart.htm" title="Previous" type="text/html"/>
<link rel="Next" href="keyprog.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17660-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/20</span> <!-- End Header -->
<div id="JSQLJ136" class="chapter"><a id="BABIAAGF"></a>
<h1 class="chapter"><span class="secnum">2</span> Introduction to SQLJ</h1>
<p>This chapter provides a general overview of SQLJ features and scenarios. The following topics are discussed:</p>
<ul>
<li>
<p><a href="#i1005579">Overview of SQLJ</a></p>
</li>
<li>
<p><a href="#i1009591">Overview of SQLJ Components</a></p>
</li>
<li>
<p><a href="#i1005693">Overview of Oracle Extensions to the SQLJ Standard</a></p>
</li>
<li>
<p><a href="#i1005826">Basic Translation Steps and Run-Time Processing</a></p>
</li>
<li>
<p><a href="#i1006033">SQLJ Sample Code</a></p>
</li>
<li>
<p><a href="#i1006184">Alternative Deployment Scenarios</a></p>
</li>
<li>
<p><a href="#i1006380">Alternative Development Scenarios</a></p>
</li>
</ul>
<a id="i1005579"></a>
<div id="JSQLJ137" class="sect1">
<h2 class="sect1"><a id="sthref37"></a>Overview of SQLJ</h2>
<p>This section introduces the basic concepts of SQLJ and discusses the complementary relationship between Java and PL/SQL in Oracle Database applications.</p>
<p>SQLJ enables applications programmers to embed SQL statements in Java code in a way that is compatible with the Java design philosophy. A SQLJ program is a Java program containing embedded SQL statements that comply with the International Organization for Standardization (ISO) standard SQLJ Language Reference syntax. The Oracle SQLJ implementation supports the ISO SQLJ standard. The standard covers only <span class="bold">stat<a id="sthref38"></a>ic SQL</span> operations, which are predefined SQL operations that do not change in real time while a user runs the application. The Oracle SQLJ implementation also offers extensions to support <span class="bold">dyn<a id="sthref39"></a>amic SQL</span> operations, which are <span class="italic">not</span> predefined and the operations can change in real time. It is also possible to use dynamic SQL operations through Java Database Connectivity (JDBC) code or PL/SQL code within a SQLJ application. Typical applications contain more static SQL operations than dynamic SQL operations.</p>
<p>SQLJ consists of a translator and a run-time component and is smoothly integrated into your development environment. You can run the translator to translate, compile, and customize the code in a single step using the <code>sqlj</code> front-end utility. The translation process replaces embedded SQL statements with calls to the SQLJ run time, which processes the SQL statements. In ISO SQLJ standard this is typically, but not necessarily, performed through calls to a JDBC driver. To access Oracle Database, you would typically use an Oracle JDBC driver. When you run the SQLJ application, the run time is started to handle the SQL operations.</p>
<p>The SQLJ translator is conceptually similar to other Oracle precompilers and enables you to check SQL syntax, verify SQL operations against what is available in the schema, and check the compatibility of Java types with corresponding database types. In this way, you can catch errors during development rather than a user catching the errors at run time. The translator checks the following:</p>
<ul>
<li>
<p>Syntax of the embedded SQL statements</p>
</li>
<li>
<p>SQL constructs, against a specified database schema to ensure consistency within a particular set of SQL entities (optional)</p>
<p>For example, it verifies table names and column names.</p>
</li>
<li>
<p>Data types, to ensure that the data exchanged between Java and SQL have compatible types and proper type conversions</p>
</li>
</ul>
<p>The SQLJ methodology of embedding SQL statements directly in Java code is very convenient and concise in a way that it reduces development and maintenance costs in Java programs that require database connectivity.</p>
<p>Java programs can call PL/SQL stored procedures and anonymous blocks through JDBC or SQLJ. In particular, SQLJ provides syntax for calling stored procedures and functions from within a SQLJ statement and also supports embedded PL/SQL anonymous blocks within a SQLJ statement.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Using PL/SQL anonymous blocks within SQLJ statements is one way to support dynamic SQL operations in a SQLJ application. However, the Oracle SQLJ implementation includes extensions to support dynamic SQL directly.</div>
</div>
<!-- class="sect1" -->
<a id="i1009591"></a>
<div id="JSQLJ138" class="sect1">
<h2 class="sect1">Overview of SQLJ Components</h2>
<p>This section introduces the main two major SQLJ components in Oracle SQLJ implementation. It covers the following topics:</p>
<ul>
<li>
<p><a href="#BABJACEE">SQLJ Translator</a></p>
</li>
<li>
<p><a href="#BABBADJF">SQLJ Run Time</a></p>
</li>
</ul>
<a id="BABJACEE"></a>
<div id="JSQLJ139" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SQLJ <a id="sthref40"></a>Translator</h3>
<p>This component is a precompiler that you run after creating SQLJ source code.</p>
<p>The translator, which is written in pure Java, supports a programming syntax that enables you to embed SQL statements in SQLJ executable statements. SQLJ executable statements and SQLJ declarations are preceded by the <code>#sql</code> token and can be interspersed with Java statements in a SQLJ source code file. SQLJ source code file names must have the <code>.sqlj</code> extension. The following is a sample SQLJ statement:</p>
<pre>#sql { INSERT INTO employees (first_name, salary) VALUES (&#39;Joe&#39;, 43000) };
</pre>
<p>The translator produces a <code>.java</code> file.</p>
<p>You can invoke the translator using the <code>sqlj</code> command-line utility. On the command line, specify the files that need to be translated and any desired SQLJ option settings.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#BCEDIABI">Chapter 8, &#34;Translator Command Line and Options&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BABBADJF"></a>
<div id="JSQLJ140" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SQLJ <a id="sthref41"></a>Run Time</h3>
<p>This component is also written in pure Java and is invoked automatically each time you run a SQLJ application.</p>
<p>Oracle JDBC calls are generated directly into the translated code and the SQLJ run time plays a much smaller role.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transrun.htm#i1006090">&#34;SQLJ Run Time&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Since Oracle Database 10<span class="italic">g</span> Release 1, only Oracle JDBC drivers are supported with SQLJ.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005693"></a>
<div id="JSQLJ142" class="sect1">
<h2 class="sect1">Overview of <a id="sthref42"></a><a id="sthref43"></a>Oracle Extensions to the SQLJ Standard</h2>
<p>The Oracle SQLJ implementation supports the ISO SQLJ standard. Using the ISO SQLJ standard features requires a Java Development Kit (JDK) 6 or later environment that complies with Java2 Platform, Enterprise Edition (J2EE). The SQLJ translator accepts a broader range of SQL syntax than the ISO SQLJ standard specifies.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle SQLJ implementation requires the run-time environment of JDK 6 or JDK 7.</div>
<p>The ISO SQLJ standard addresses not only the SQL-92 Entry level dialect of SQL, but also enables extension beyond that. The Oracle SQLJ implementation supports the Oracle SQL dialect, which is a superset of SQL-92 Entry level. If you need to create SQLJ programs that work with other databases, then avoid using SQL syntax and SQL types that are not in the Entry level of SQL-92 and, therefore, may not be supported in other environments.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CJAHAFIC">SQLJ Type Extensions</a></p>
</li>
<li>
<p><a href="#CJAECFHF">SQLJ Functionality Extensions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="typesupp.htm#BCEIIDCF">Chapter 5, &#34;Type Support&#34;</a>, and <a href="objcoll.htm#CIHEBGGC">Chapter 6, &#34;Objects, Collections, and OPAQUE Types&#34;</a> for information about SQLJ extensions provided by Oracle Database</div>
<a id="CJAHAFIC"></a>
<div id="JSQLJ143" class="sect2">
<h3 class="sect2">SQLJ Type Extensions</h3>
<p>The Oracle SQLJ implementation supports the following Java types as extensions to the SQLJ standard:</p>
<ul>
<li>
<p>Instances of <code>oracle.sql.*</code> classes as wrappers for SQL data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="typesupp.htm#i1006820">&#34;Support for JDBC 2.0 LOB Types and Oracle Type Extensions&#34;</a></div>
</li>
<li>
<p>Custom Java classes, typically produced by the JPublisher utility to correspond to SQL objects, object references, and collections. For example, classes that implement the <code>oracle.sql.ORAData</code> interface or the JDBC standard <code>java.sql.SQLdata</code> interface.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>SQLData</code> interface is standard. Classes that implement it are supported by JDBC drivers and databases of other vendors.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="objcoll.htm#i1005685">&#34;Custom Java Classes&#34;</a></div>
</li>
<li>
<p>Stream instances: <code>BinaryStream</code> and <code>CharacterStream</code>, the latter of which replaces the deprecated <code>AsciiStream</code> and <code>UnicodeStream</code>, used as output parameters.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="typesupp.htm#i1006420">&#34;Support for Streams&#34;</a></div>
</li>
<li>
<p>Iterator and result set instances as input or output parameters. The SQLJ standard specifies them only in result expressions or cast statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="blangfea.htm#i1007245">&#34;Using Iterators and Result Sets as Host Variables&#34;</a> and <a href="blangfea.htm#i1007586">&#34;Using Iterators and Result Sets as Stored Function Returns&#34;</a></div>
</li>
<li>
<p>Unicode character types: <code>NString</code>, <code>NCHAR</code>, <code>NCLOB</code>, and <code>NcharCharacterStream</code>, the latter of which replaces the deprecated <code>NcharAsciiStream</code> and <code>NcharUnicodeStream</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transrun.htm#i1007311">&#34;SQLJ Extended Globalization Support&#34;</a></div>
</li>
</ul>
<p>Using any of these extensions requires Oracle-specific code generation or Oracle customization during translation, as well as Oracle SQLJ run time and an Oracle JDBC driver when your application runs. Do not use these or other types if you want to use your code in other environments. To ensure that your application is portable, use the SQLJ <code>-warn=portable</code> flag.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
See <a href="transopt.htm#BCEDIABI">&#34;Translator Command Line and Options&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="CJAECFHF"></a>
<div id="JSQLJ144" class="sect2">
<h3 class="sect2">SQLJ Functionality Extensions</h3>
<p>The Oracle SQLJ implementation also supports the following extended functionality:</p>
<ul>
<li>
<p>Oracle-specific code generation</p>
<p>This generates JDBC code directly. Much of the SQLJ run-time functionality is bypassed during program execution.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="keyprog.htm#i1006746">&#34;Oracle-Specific Code Generation (No Profiles)&#34;</a></div>
</li>
<li>
<p>Dynamic SQL in SQLJ statements</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="alangfea.htm#i1007348">&#34;Support for Dynamic SQL&#34;</a></div>
</li>
<li>
<p>Scrollable result set iterators with additional navigation methods, and <code>FETCH</code> syntax from result set iterators and scrollable result set iterators</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="alangfea.htm#i1006751">&#34;Scrollable Iterators&#34;</a></div>
</li>
<li>
<p>Optimization flags for column and parameter size definitions</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apppfdbg.htm#i1006199">&#34;Column Definitions&#34;</a>, <a href="apppfdbg.htm#i1006237">&#34;Parameter Size Definitions&#34;</a>, and <a href="transopt.htm#BCEGHEDB">&#34;Options for Code Generation, Optimizations, and CHAR Comparisons&#34;</a></div>
</li>
<li>
<p>Flags for modified translator behavior, such as for binding host expressions by identifier or accounting for blank padding in <code>CHAR</code> comparisons for <code>WHERE</code> clauses</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1008034">&#34;Binding Host Expressions by Identifier (-bind-by-identifier)&#34;</a> and <a href="transopt.htm#i1007700">&#34;CHAR Comparisons with Blank Padding (-fixedchar)&#34;</a></div>
</li>
<li>
<p>SQLJ statement caching on connection contexts</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apppfdbg.htm#i1005618">&#34;Statement Caching&#34;</a></div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005826"></a>
<div id="JSQLJ145" class="sect1">
<h2 class="sect1">Basic Translation Steps and Run-Time Processing</h2>
<p>SQLJ source code contains a mixture of standard Java source together with SQLJ class declarations and SQLJ executable statements containing embedded SQL statements. SQLJ source files have the <code>.sqlj</code> file name extension. The file name must be a legal Java identifier. If the source file declares a public class, then the file name must match the name of this class. If the source file does not declare a public class, then the file name should match the name of the first defined class.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1005841">SQLJ Translation Steps</a></p>
</li>
<li>
<p><a href="#CJAHHIGH">Summary of Translator Input and Output</a></p>
</li>
<li>
<p><a href="#CJADEDHE">SQLJ Run-Time Processing</a></p>
</li>
</ul>
<a id="i1005841"></a>
<div id="JSQLJ146" class="sect2">
<h3 class="sect2">SQLJ Translation <a id="sthref44"></a>Steps</h3>
<p>After you have written your <code>.sqlj</code> file, you must run SQLJ to process the files. The following example shows SQLJ being run in its simplest form with no command-line options for the <code>Foo.sqlj</code> source file with the public class <code>Foo</code>:</p>
<pre>% sqlj Foo.sqlj
</pre>
<p>This command runs a front-end script or utility depending on the platform. The script or utility reads the command line, invokes a Java virtual machine (JVM), and passes arguments to it. The JVM invokes the SQLJ translator and acts as a front end.</p>
<div id="JSQLJ147" class="figure">
<p class="titleinfigure"><a id="sthref45"></a>Figure 2-1 Flow of Control</p>
<img width="640" height="292" src="img/flow_of_control.gif" alt="Description of Figure 2-1 follows"/><br/>
<a id="sthref46" href="img_text/flow_of_control.htm">Description of &#34;Figure 2-1 Flow of Control&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The following sequence of events occurs, presuming each step completes without error:</p>
<ol>
<li>
<p>The JVM invokes the SQLJ translator.</p>
</li>
<li>
<p>The translator parses the SQLJ and Java code in the <code>.sqlj</code> file, checking for proper SQLJ syntax and looking for type mismatches between the declared SQL data types and corresponding Java host variables. <a id="sthref47"></a><span class="bold">Host variables</span> are Java local variables that are used as input or output parameters in SQL operations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="blangfea.htm#i1006176">&#34;Java Host, Context, and Result Expressions&#34;</a></div>
</li>
<li>
<p>Depending on the SQLJ option settings, the translator invokes the online semantics-checker, the offline parser, neither, or both. This is to verify syntax of embedded SQL and PL/SQL statements and to check the use of database elements in the code against an appropriate database schema, for online checking. Even when neither is specified, some basic level of checking is performed.</p>
<p>When online checking is specified, SQLJ will connect to a specified database schema to verify that the database supports all the database tables, stored procedures, and SQL syntax that the application uses. It also verifies that the host variable types in the SQLJ application are compatible with data types of corresponding database columns.</p>
</li>
<li>
<p>For Oracle-specific SQLJ code generation (<code>-codegen=oracle</code>, which is default), SQL operations are converted directly into Oracle JDBC calls.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="keyprog.htm#i1006746">&#34;Oracle-Specific Code Generation (No Profiles)&#34;</a></div>
<p>Generated Java code is put into a <code>.java</code> output file containing the following:</p>
<ul>
<li>
<p>Any class definitions and Java code from the <code>.sqlj</code> source file</p>
</li>
<li>
<p>Class definitions created as a result of the SQLJ iterator and connection context declarations</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="blangfea.htm#i1005585">&#34;Overview of SQLJ Declarations&#34;</a></div>
</li>
<li>
<p>Calls to Oracle JDBC drivers to implement the actions of the embedded SQL operations</p>
</li>
</ul>
</li>
<li>
<p>The JVM invokes the Java compiler, which is usually, but not necessarily, the standard <code>javac</code> provided with the Sun Microsystems JDK.</p>
</li>
<li>
<p>The compiler compiles the Java source file generated in Step 4 and produces Java <code>.class</code> files as appropriate. This will include a <code>.class</code> file for each class that is defined, each of the SQLJ declarations.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transrun.htm#CHEJGJAB">&#34;Internal Translator Operations&#34;</a></div>
<p class="subhead2"><a id="JSQLJ148"></a>General SQLJ Notes</p>
<p>Consider the following when translating and running SQLJ applications:</p>
<ul>
<li>
<p>It is also possible to specify existing <code>.java</code> files on the command line to be compiled and to be available for type resolution as well.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1005569">&#34;Translator Command Line and Properties Files&#34;</a></div>
</li>
<li>
<p>Your application requires an Oracle JDBC driver when it runs, even if your code does not use Oracle-specific features.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CJAHHIGH"></a>
<div id="JSQLJ149" class="sect2">
<h3 class="sect2">Summary of <a id="sthref48"></a><a id="sthref49"></a><a id="sthref50"></a>Translator Input and Output</h3>
<p>This section summarizes what the SQLJ translator takes as input, what it produces as output, and where it places its output. This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CJAFJEAI">Translator Input</a></p>
</li>
<li>
<p><a href="#CJAFHGHG">Translator Output</a></p>
</li>
<li>
<p><a href="#CJACIDFJ">Output File Locations</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
This discussion mentions iterator class and connection context class declarations. Iterators are similar to JDBC result sets and connection contexts are used for database connections.</div>
<a id="CJAFJEAI"></a>
<div id="JSQLJ150" class="sect3">
<h4 class="sect3">Translator Input</h4>
<p>The SQLJ translator takes one or more <code>.sqlj</code> source files as input, which can be specified on the command line. The name of the main <code>.sqlj</code> file is based on the public class it defines, if any, else on the first class it defines.</p>
<p>If the main <code>.sqlj</code> file defines the <code>MyClass</code> class, then the source file name must be:</p>
<pre>MyClass.sqlj
</pre>
<p>This must also be the file name if there are no public class definitions, but <code>MyClass</code> is the first class defined. You must define each public class in separate<code>.sqlj</code> files. When you run SQLJ, you can also specify numerous SQLJ options on the command line or in the properties files.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1005569">&#34;Translator Command Line and Properties Files&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="CJAFHGHG"></a>
<div id="JSQLJ151" class="sect3">
<h4 class="sect3">Translator Output</h4>
<p>The translation step produces a Java source file for each <code>.sqlj</code> file in the application, presuming the source code uses SQLJ executable statements.</p>
<p>SQLJ generates Java source files as follows:</p>
<ul>
<li>
<p>Java source files are <code>.java</code> files with the same base names as the <code>.sqlj</code> files.</p>
<p>For example, the translator produces <code>MyClass.java</code> corresponding to <code>MyClass.sqlj</code>, which defines the <code>MyClass</code> class. The output <code>.java</code> file also contains class definitions for any iterators or connection context classes declared in the <code>.sqlj</code> file.</p>
</li>
</ul>
<p>The compilation step compiles the Java source file into multiple class files. One <code>.class</code> file is generated for each class defined in the <code>.sqlj</code> source file. Additional <code>.class</code> files are produced if you declared any SQLJ iterators or connection contexts. Also, separate <code>.class</code> files will be produced for any inner classes or anonymous classes in the code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="blangfea.htm#i1005585">&#34;Overview of SQLJ Declarations&#34;</a></div>
<p>The <code>.class</code> files are named as follows:</p>
<ul>
<li>
<p>The class file for each class defined consists of the name of the class with the <code>.class</code> extension. For example, the translator output file <code>MyClass.java</code> is compiled into the <code>MyClass.class</code> class file.</p>
</li>
<li>
<p>The translator names iterator classes and connection context classes according to how you declare them. For example, if you declare an iterator <code>MyIter</code>, then the compiler will generate a corresponding <code>MyIter.class</code> class file.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CJACIDFJ"></a>
<div id="JSQLJ152" class="sect3">
<h4 class="sect3">Output File Locations</h4>
<p>By default, SQLJ places the generated <code>.java</code> files in the same directory as the <code>.sqlj</code> file. You can specify a different <code>.java</code> file location using the SQLJ <code>-dir</code> option.</p>
<p>By default, SQLJ places the generated <code>.class</code> and <code>.ser</code> files in the same directory as the generated <code>.java</code> files. You can specify a different location for <code>.class</code> and <code>.ser</code> files using the SQLJ <code>-d</code> option. This option setting is passed to the Java compiler so that <code>.class</code> files and <code>.ser</code> files will be in the same location.</p>
<p>For both the <code>-d</code> and <code>-dir</code> option, you must specify a directory that already exists.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1006791">&#34;Options for Output Files and Directories&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CJADEDHE"></a>
<div id="JSQLJ153" class="sect2">
<h3 class="sect2">SQLJ Run-Time <a id="sthref51"></a>Processing</h3>
<p>This section discusses run-time processing during program execution.</p>
<p>When you translate with the default <code>-codegen=oracle</code> setting, your program performs the following at run time:</p>
<ul>
<li>
<p>Executes Oracle-specific application programming interfaces (APIs) that ensure batching support and proper creation and closing of Oracle JDBC statements</p>
</li>
<li>
<p>Directly calls Oracle JDBC APIs for registering, passing, and retrieving parameters and result sets</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="keyprog.htm#i1006746">&#34;Oracle-Specific Code Generation (No Profiles)&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006033"></a>
<div id="JSQLJ155" class="sect1">
<h2 class="sect1"><a id="sthref52"></a><a id="sthref53"></a><a id="sthref54"></a>SQLJ Sample Code</h2>
<p>This section presents a side-by-side comparison of two versions of the same sample code, where one version is written in SQLJ and the other in JDBC. The objective of this section is to point out the differences in coding requirements between SQLJ and JDBC. This section covers:</p>
<ul>
<li>
<p><a href="#BABJBDBB">SQLJ Version of the Sample Code</a></p>
</li>
<li>
<p><a href="#BABFFGGH">JDBC Version of the Sample Code</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The particulars of SQLJ statements and features used here are described later in this manual, but this example is still useful here to give you a general idea in comparing and contrasting SQLJ and JDBC. You can look at it again when you are more familiar with SQLJ concepts and features.</div>
<p>In the sample, two methods are defined: <code>getEmployeeAddress()</code>, which selects and returns an employee&#39;s address from a table based on the employee&#39;s number, and <code>updateAddress()</code>, which takes the retrieved address, calls a stored procedure, and returns the updated address to the database.</p>
<p>In both versions of the sample code, the following assumptions are made:</p>
<ul>
<li>
<p>A SQL script has been run to create the schema in the database and populate the tables. Both versions of the sample code refer to objects and tables created by this script.</p>
</li>
<li>
<p>The <code>UPDATE_ADDRESS()</code> PL/SQL stored function exists, and it updates a given address.</p>
</li>
<li>
<p>The <code>Connection</code> object (for JDBC) and default connection context (for SQLJ) have been created previously by the caller.</p>
</li>
<li>
<p>Exceptions are handled by the caller.</p>
</li>
<li>
<p>The value of the address argument, <code>addr</code>, passed to the <code>updateAddress()</code> method can be <code>null</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JDBC and SQLJ versions of the sample code are only partial samples and cannot run independently. There is no <code>main()</code> method in either.</div>
</li>
</ul>
<a id="BABJBDBB"></a>
<div id="JSQLJ156" class="sect2">
<h3 class="sect2">SQLJ Version of the Sample Code</h3>
<p>The SQLJ version of the sample code that defines methods to retrieve an employee&#39;s address from the database, update the address, and return it to the database is as follows:</p>
<pre>import java.sql.*;

/**
  This is what you have to do in SQLJ
  **/
public class SimpleDemoSQLJ                                  // line 6
{
  //TO DO: make a main that calls this

  public Address getEmployeeAddress(int empno)              // line 10
    throws SQLException
  {
    Address addr;                                           // line 13
    #sql { SELECT office_addr INTO :addr FROM employees
           WHERE empnumber = :empno };
    return addr;
  }
                                                            // line 18
  public Address updateAddress(Address addr)
    throws SQLException
  {
    #sql addr = { VALUES(UPDATE_ADDRESS(:addr)) };          // line 22
    return addr;
  }
}
</pre>
<p class="subhead2"><a id="JSQLJ157"></a>Line 10</p>
<p>The <code>getEmployeeAddress()</code> method does not require an explicit <code>Connection</code> object. SQLJ can use a default connection context instance, which should be initialized somewhere earlier in the application.</p>
<p class="subhead2"><a id="JSQLJ158"></a>Lines 13-15</p>
<p>The <code>getEmployeeAddress()</code> method retrieves an employee address according to the employee number. Use standard SQLJ <code>SELECT</code> <code>INTO</code> syntax to select an employee&#39;s address from the <code>employee</code> table if the employee number matches the one (<code>empno</code>) passed in to <code>getEmployeeAddress()</code>. This requires a declaration of the <code>Address</code> object (<code>addr</code>) that will receive the data. The <code>empno</code> and <code>addr</code> variables are used as input host variables.</p>
<p class="subhead2"><a id="JSQLJ159"></a>Line 16</p>
<p>The <code>getEmployeeAddress()</code> method returns the <code>addr</code> object.</p>
<p class="subhead2"><a id="JSQLJ160"></a>Line 19</p>
<p>The <code>updateAddress()</code> method also uses the default connection context instance.</p>
<p class="subhead2"><a id="JSQLJ161"></a>Lines 19-22</p>
<p>The address is passed to the <code>updateAddress()</code> method, which passes it to the database. The database updates the address and passes it back. The actual updating of the address is performed by the <code>UPDATE_ADDRESS()</code> stored function. Use standard SQLJ function-call syntax to receive the <code>addr</code> address object returned by <code>UPDATE_ADDRESS()</code>.</p>
<p class="subhead2"><a id="JSQLJ162"></a>Line 23</p>
<p>The <code>updateAddress()</code> method returns the <code>addr</code> object.</p>
<p class="subhead2"><a id="JSQLJ163"></a>Specific Features of the SQLJ Version of the Code</p>
<p>Note the following features of the SQLJ version of the sample code:</p>
<ul>
<li>
<p>An explicit connection is not required. SQLJ can use a default connection context that has been initialized previously in the application.</p>
</li>
<li>
<p>No data type casting is required.</p>
</li>
<li>
<p>SQLJ does not require knowledge of <code>_SQL_TYPECODE</code>, <code>_SQL_NAME</code>, or factories.</p>
</li>
<li>
<p><code>NULL</code> value data is processed implicitly.</p>
</li>
<li>
<p>No explicit code for resource management (for example, closing statements or results sets) is required.</p>
</li>
<li>
<p>SQLJ embeds host variables, in contrast to JDBC, which uses parameter markers.</p>
</li>
<li>
<p>String concatenation for long SQL statements is not required.</p>
</li>
<li>
<p>You do not have to register output parameters.</p>
</li>
<li>
<p>SQLJ syntax is simpler. For example, <code>SELECT INTO</code> statements are supported and ODBC-style escapes are not used.</p>
</li>
<li>
<p>You do not have to implement your own statement cache. By default, SQLJ will automatically cache <code>#sql</code> statements. This results in improved performance, for example, if you repeatedly call <code>getEmployeeAddress()</code> and <code>updateAddress()</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFFGGH"></a>
<div id="JSQLJ164" class="sect2">
<h3 class="sect2">JDBC Version of the Sample Code</h3>
<p>If you are familiar with JDBC, then you can check the following the JDBC version of the sample code, which defines methods to retrieve an employee&#39;s address from the database, update the address, and return it to the database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>TO DO</code> items in the comment lines indicate where you might want to add additional code to increase the usefulness of the code sample.</div>
<pre>import java.sql.*;
import oracle.jdbc.*;

/**
  This is what you have to do in JDBC
  **/
public class SimpleDemoJDBC                                  // line 7
{

//TO DO: make a main that calls this

  public Address getEmployeeAddress(int empno, Connection conn)
    throws SQLException                                     // line 13
  {
    Address addr;
    PreparedStatement pstmt =                               // line 16
      conn.prepareStatement(&#34;SELECT office_addr FROM employees&#34; + 
       &#34; WHERE empnumber = ?&#34;);
    pstmt.setInt(1, empno);
    OracleResultSet rs = (OracleResultSet)pstmt.executeQuery();
    rs.next();                                              // line 21
     //TO DO: what if false (result set contains no data)?
    addr = (Address)rs.getORAData(1, Address.getORADataFactory());
    //TO DO: what if additional rows? 
    rs.close();                                             // line 25
    pstmt.close();
    return addr;                                            // line 27
  }
  public Address updateAddress(Address addr, Connection conn)
    throws SQLException                                     // line 30
                                                           
  {
    OracleCallableStatement cstmt = (OracleCallableStatement)
      conn.prepareCall(&#34;{ ? = call UPDATE_ADDRESS(?) }&#34;);   //line 34
    cstmt.registerOutParameter(1, Address._SQL_TYPECODE, Address._SQL_NAME);
                                                            // line 36
    if (addr == null) {
      cstmt.setNull(2, Address._SQL_TYPECODE, Address._SQL_NAME);
    } else {
      cstmt.setORAData(2, addr);
    } 
    
    cstmt.executeUpdate();                                  // line 43
    addr = (Address)cstmt.getORAData(1, Address.getORADataFactory());
    cstmt.close();                                          // line 45
    return addr;
  }
}
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006184"></a>
<div id="JSQLJ175" class="sect1">
<h2 class="sect1">Alternative Deployment Scenarios</h2>
<p>Although this manual mainly discusses writing for client-side SQLJ applications, you may find it useful to run SQLJ code in the following scenarios:</p>
<ul>
<li>
<p>From an applet</p>
</li>
<li>
<p>In the server (optionally running the SQLJ translator in the server as well)</p>
</li>
</ul>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1006190">Running SQLJ in Applets</a></p>
</li>
<li>
<p><a href="#BABDHIIB">Overview of SQLJ in the Server</a></p>
</li>
</ul>
<a id="i1006190"></a>
<div id="JSQLJ176" class="sect2">
<h3 class="sect2">Running SQLJ in <a id="sthref55"></a>Applets</h3>
<p>Because the SQLJ run time is pure Java, you can use SQLJ source code in applets as well as applications. However, there are a few considerations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for applet issues that apply to Oracle JDBC drivers.</div>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#BABFBGHF">General Development and Deployment Considerations</a></p>
</li>
<li>
<p><a href="#BABGBJED">General End User Considerations</a></p>
</li>
<li>
<p><a href="#BABCCCFD">Java Environment and the Java Plug-In</a></p>
</li>
</ul>
<a id="BABFBGHF"></a>
<div id="JSQLJ177" class="sect3">
<h4 class="sect3">General Development and Deployment Considerations</h4>
<p>The following general considerations apply to the use of SQLJ in applets:</p>
<ul>
<li>
<p>You must package all the SQLJ run-time packages with your applet. The packages are:</p>
<pre>sqlj.runtime
sqlj.runtime.ref
sqlj.runtime.error
</pre>
<p>Also package the following if you used Oracle customization:</p>
<pre>oracle.sqlj.runtime
oracle.sqlj.runtime.error
</pre>
<p>These packages are included with your Oracle installation in one of several run-time libraries in the <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/lib</code> directory.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="getstart.htm#i1005639">&#34;Requirements for Using the Oracle SQLJ Implementation&#34;</a></div>
</li>
<li>
<p>You must specify a pure Java JDBC driver, such as Oracle JDBC Thin driver, for your database connection.</p>
</li>
<li>
<p>You must explicitly specify a connection context instance for each SQLJ executable statement in an applet. This is a requirement because you could conceivably run two SQLJ applets in a single browser and, thus, in the same JVM.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="keyprog.htm#i1005714">&#34;Connection Considerations&#34;</a></div>
</li>
<li>
<p>The default translator setting <code>-codegen=oracle</code> generates Oracle-specific code. This will eliminate the use of Java reflection at run time and, thus, increase portability across different browser environments.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transopt.htm#i1007494">&#34;Code Generation (-codegen)&#34;</a> and <a href="keyprog.htm#i1006746">&#34;Oracle-Specific Code Generation (No Profiles)&#34;</a></div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABGBJED"></a>
<div id="JSQLJ178" class="sect3">
<h4 class="sect3">General End User Considerations</h4>
<p>When end users run your SQLJ applet, classes in their <code>CLASSPATH</code> may conflict with classes that are downloaded with the applet. Therefore, Oracle recommends that end users clear their <code>CLASSPATH</code> before running the applet.</p>
</div>
<!-- class="sect3" -->
<a id="BABCCCFD"></a>
<div id="JSQLJ179" class="sect3">
<h4 class="sect3">Java Environment and the Java Plug-In</h4>
<p>The following are some additional considerations regarding the Java environment and use of Oracle-specific features:</p>
<ul>
<li>
<p>SQLJ requires the run-time environment of JDK 6 or JDK 7. Users cannot run SQLJ applets in browsers using earlier JDK versions, without a plug-in. One option is to use a Java plug-in offered by Sun Microsystems. For information, refer to the following:</p>
<p><code><a href="http://www.oracle.com/technetwork/java/index.html">http://www.oracle.com/technetwork/java/index.html</a></code></p>
</li>
<li>
<p>Applets using Oracle-specific features require Oracle SQLJ run time to work. Oracle SQLJ run time consists of the classes in the SQLJ run-time library file under <code>oracle.sqlj.*</code>. Oracle SQLJ <code>runtime.jar</code> library requires the Java Reflection API, <code>java.lang.reflect.*</code>. Most browsers do not support the Reflection API or impose security restrictions, but the Sun Microsystems Java plug-in provides support for the Reflection API.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The term &#34;Oracle-specific features&#34; refers to the use of Oracle type extensions (discussed in <a href="typesupp.htm#BCEIIDCF">Chapter 5, &#34;Type Support&#34;</a>) and the use of SQLJ features that require Oracle-specific code generation or, for ISO SQLJ standard code generation, require your application to be customized to work against Oracle Database instance. (For example, this is true of the <code>SET</code> statement, discussed in <a href="blangfea.htm#CBBFFFHF">Chapter 4, &#34;Basic Language Features&#34;</a>.)</div>
</li>
</ul>
<p>The preceding issues can be summarized as follows, focusing on users with Internet Explorer and Netscape browsers:</p>
<ul>
<li>
<p>The SQLJ and JDBC versions should match. For example, to use the SQLJ 9.0.0 run time, you must have an Oracle 9.0.0 or earlier JDBC driver.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="getstart.htm#i1005639">&#34;Requirements for Using the Oracle SQLJ Implementation&#34;</a></div>
</li>
<li>
<p>If you use object types, JDBC 2.0 types, REF CURSORs, or the <code>CAST</code> statement in your SQLJ statements, then you must adhere to your choice of the following:</p>
<ul>
<li>
<p>Use the default <code>-codegen=oracle</code> setting when you translate your applet.</p>
</li>
<li>
<p>Ensure that the browser that you use supports JDK 6 and permits reflection.</p>
</li>
<li>
<p>Run your applet through a browser Java plug-in.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDHIIB"></a>
<div id="JSQLJ180" class="sect2">
<h3 class="sect2">Overview of SQLJ in the <a id="sthref56"></a>Server</h3>
<p>In addition to its use in client applications, SQLJ code can run within a target Oracle Database in stored procedures, stored functions, or triggers. Server-side access occurs through an Oracle JDBC driver that runs inside the server itself. Additionally, Oracle Database 12<span class="italic">c</span> Release 1 (12.1) (and preceding versions) has an embedded SQLJ translator so that SQLJ source files for server-side use can optionally be translated directly in the server.</p>
<p>The two main areas to consider are the following:</p>
<ul>
<li>
<p>Creating SQLJ code for use within the server</p>
<p>Coding a SQLJ application for use within the target Oracle Database is similar to coding for client-side use. The issues that exist are due to general JDBC characteristics, as opposed to SQLJ-specific characteristics. The main differences involve connections:</p>
<ul>
<li>
<p>You have only one connection.</p>
</li>
<li>
<p>The connection is to the database in which the code is running.</p>
</li>
<li>
<p>The connection is implicit (does not have to be explicitly initialized, unlike on a client).</p>
</li>
<li>
<p>The connection cannot be closed. Any attempt to close it will be ignored.</p>
</li>
</ul>
<p>Additionally, the JDBC server-side driver used for connections within the server does not support auto-commit mode.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
There is also a server-side Thin driver for connecting to one server from code that runs in another. This case is effectively the same as using a Thin driver from a client and is coded in the same way. Refer <a href="keyprog.htm#i1005595">&#34;Overview of Oracle JDBC Drivers&#34;</a> for further information.</div>
</li>
<li>
<p>Translating and loading SQLJ code for server-side use</p>
<p>You can translate and compile your code either on a client or in the server. If you do this on a client, then you can load the class and resource files into the server from your client, either by pushing them from the client using the Oracle <code>loadjava</code> utility or pulling them in from the server using SQL commands.</p>
<p>Alternatively, you can translate and load in one step using the embedded server-side SQLJ translator. If you load a SQLJ source file instead of class or resource files, then translation and compilation are done automatically. In general, <code>loadjava</code> or SQL commands can be used for class and resource files or for source files. From a user perspective, <code>.sqlj</code> files are treated the same as <code>.java</code> files, with translation taking place implicitly.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="inserver.htm#CHDHEAJC">&#34;Loading SQLJ Source Code into the Server&#34;</a> for information about using the embedded server-side translator</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The server-side translator does not support the SQLJ <code>-codegen</code> option and generates Oracle-specific code. To use ISO SQLJ standard code in the server, you must translate on a client and load the individual components into the server. Also note restrictions on interoperability when running code generated with different settings. For more information, refer to <a href="inserver.htm#i1005719">&#34;Translating SQLJ Source on a Client and Loading Components&#34;</a> and <a href="keyprog.htm#i1006746">&#34;Oracle-Specific Code Generation (No Profiles)&#34;</a>.</div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006380"></a>
<div id="JSQLJ181" class="sect1">
<h2 class="sect1">Alternative Development Scenarios</h2>
<p>The discussion in this book assumes that you are coding manually on a UNIX environment for English-language deployment. However, you can use SQLJ on other platforms and with integrated development environments (IDEs). There is also globalization support for deployment to other languages. This section covers the following topics:</p>
<ul>
<li>
<p><a href="#BABDCAFC">SQLJ Globalization Support</a></p>
</li>
<li>
<p><a href="#i1006397">SQLJ in Oracle JDeveloper 10<span class="italic">g</span> and Other IDEs</a></p>
</li>
<li>
<p><a href="#BABGCJCE">Windows Considerations</a></p>
</li>
</ul>
<a id="BABDCAFC"></a>
<div id="JSQLJ182" class="sect2">
<h3 class="sect2">SQLJ <a id="sthref57"></a>Globalization Support</h3>
<p>Support for native languages and character encodings by the Oracle SQLJ implementation is based on Java built-in globalization support capabilities.</p>
<p>The standard <code>user.language</code> and <code>file.encoding</code> properties of the JVM determine appropriate language and encoding for translator and run-time messages. The SQLJ <code>-encoding</code> option determines encoding for interpreting and generating source files during translation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="transrun.htm#i1006168">&#34;Globalization Support in the Translator and Run Time&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1006397"></a>
<div id="JSQLJ183" class="sect2">
<h3 class="sect2">SQLJ in Oracle <a id="sthref58"></a><a id="sthref59"></a>JDeveloper 10<span class="italic">g</span> and Other IDEs</h3>
<p>The Oracle SQLJ implementation includes a programmatic API so that it can be embedded in IDEs, such as Oracle JDeveloper 10<span class="italic">g</span>. The IDE takes on a role similar to that of the front-end <code>sqlj</code> script, invoking the translator, semantics-checker, compiler, and customizer (as applicable).</p>
<p>JDeveloper is a Jave-based, cross-platform visual development environment for Java programming. The JDeveloper Suite enables developers to build multitier, scalable Internet applications using Java across the Oracle Internet Platform. The core product of the suite, the JDeveloper IDE, excels in creating, debugging, and deploying component-based applications.</p>
<p>Oracle JDBC OCI and Thin drivers are included with JDeveloper. The compilation functionality of JDeveloper includes an integrated SQLJ translator so that your SQLJ application is translated automatically as it is compiled.</p>
<p>Information about JDeveloper is available at the following URL:</p>
<p><code><a href="http://www.oracle.com/technology/products/jdev/index.html">http://www.oracle.com/technology/products/jdev/index.html</a></code></p>
</div>
<!-- class="sect2" -->
<a id="BABGCJCE"></a>
<div id="JSQLJ184" class="sect2">
<h3 class="sect2">Windows <a id="sthref60"></a>Considerations</h3>
<p>Note the following if you are using a Microsoft Windows environment instead of a UNIX environment:</p>
<ul>
<li>
<p>This manual uses UNIX syntax. Use platform-specific file names and directory separators, such as &#34;\&#34; on Microsoft Windows, that are appropriate for your platform, because your JVM expects file names and paths in the platform-specific format. This is true even if you are using a shell, such as <code>ksh</code>, that permits a different file name syntax.</p>
</li>
<li>
<p>For UNIX, the Oracle SQLJ implementation provides a front-end script, <code>sqlj</code>, that you use to invoke the SQLJ translator. On Microsoft Windows, Oracle instead provides an executable file, <code>sqlj.exe</code>. Using a script is not feasible on Microsoft Windows because <code>.bat</code> files on these platforms do not support embedded equals signs (=) in arguments, string operations on arguments, or wildcard characters in file name arguments.</p>
</li>
<li>
<p>How to set environment variables is specific to the operating system. There may also be OS-specific restrictions. In Windows 95, use the <code>Environment</code> tab in the <code>System</code> control panel. Additionally, because Windows 95 does not support the &#34;=&#34; character in variable settings, SQLJ supports the use of &#34;#&#34; instead of &#34;=&#34; in setting <code>SQLJ_OPTIONS</code>, an environment variable that SQLJ can use for option settings. Consult your operating system documentation regarding settings and syntax for environment variables, and be aware of any size limitations.</p>
</li>
<li>
<p>As with any operating system and environment you use, be aware of specific limitations. In particular, the complete, expanded SQLJ command line must not exceed the maximum command-line size, which is 250 characters for Windows 95 and 4000 characters for Windows NT. Consult your operating system documentation.</p>
</li>
</ul>
<p>Refer to the release notes for Windows for additional information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4010">
<tr>
<td class="cellalignment4017">
<table class="cellalignment4015">
<tr>
<td class="cellalignment4014"><a href="getstart.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4014"><a href="keyprog.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4019">
<table class="cellalignment4013">
<tr>
<td class="cellalignment4014"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4014"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4014"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4014"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4014"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4014"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>