<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-91964"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/SQL%20Developer%3A%20Unit%20Testing"></a><title>SQL Developer: Unit Testing</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Note: This book is for an old release of SQL Developer. You are encouraged to use the latest available release. See http://www.oracle.com/technetwork/developer-tools/sql-developer/ for information about downloads and documentation./"/>
<meta name="dcterms.created" content="2014-07-07T8:41:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="SQL Developer User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E35117-06"/>
<meta name="dcterms.isVersionOf" content="RPTUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="migration.htm" title="Previous" type="text/html"/>
<link rel="Next" href="tut_library.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E35117-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/12</span> <!-- End Header -->
<div id="RPTUG45000" class="chapter"><a id="BCGHEHFE"></a>
<h1 class="chapter"><span class="secnum">3</span> <a id="sthref477"></a><a id="sthref478"></a>SQL Developer: Unit Testing</h1>
<p>The SQL Developer <span class="bold">unit testing</span> feature provides a framework for testing PL/SQL objects, such as functions and procedures, and monitoring the results of such objects over time. You create tests, and for each you provide information about what is to be tested and what result is expected. The SQL Developer implementation of unit testing is modeled on the classic and well known xUnit collection of unit test frameworks.</p>
<p>The unit testing feature is part of the support within the SQL Developer family of products for major parts of the life cycle of database system development, from design (provided by Data Modeler) to development to testing.</p>
<p>This chapter contains the following major sections:</p>
<p><a href="#BCGIIIGH">Section 3.1, &#34;Overview of Unit Testing&#34;</a></p>
<p><a href="#BCGIGJFG">Section 3.2, &#34;SQL Developer User Interface for Unit Testing&#34;</a></p>
<p><a href="#BCGBIFGA">Section 3.3, &#34;Unit Test Repository&#34;</a></p>
<p><a href="#BCGJDJDA">Section 3.4, &#34;Editing and Running a Unit Test&#34;</a></p>
<p><a href="#BCGBJIBI">Section 3.5, &#34;Using a Dynamic Value Query to Create a Unit Test&#34;</a></p>
<p><a href="#BCGIFBHH">Section 3.6, &#34;Using Lookups to Simplify Unit Test Creation&#34;</a></p>
<p><a href="#BCGEGDJD">Section 3.7, &#34;Using Variable Substitution in Validation Actions&#34;</a></p>
<p><a href="#BCGICEFH">Section 3.8, &#34;Unit Test Library&#34;</a></p>
<p><a href="#BCGEHDJI">Section 3.9, &#34;Unit Test Reports&#34;</a></p>
<p><a href="#BCGGDJGC">Section 3.10, &#34;Exporting and Importing Unit Test Objects&#34;</a></p>
<p><a href="#BCGFBIDD">Section 3.11, &#34;Command-Line Interface for Unit Testing&#34;</a></p>
<p><a href="#BCGBIHCJ">Section 3.12, &#34;Example of Unit Testing (Tutorial)&#34;</a></p>
<a id="BCGIIIGH"></a>
<div id="RPTUG45040" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.1</span> <a id="sthref479"></a>Overview of Unit Testing</h2>
<p>The SQL Developer unit testing framework involves a set of sequential steps for each test case. The steps are as follows, including the user input for before the step is run and the framework activities for the step while the test is being run.</p>
<ol>
<li>
<p><span class="bold">Identify the object to be tested.</span></p>
<p>User Input: Identify the object, such as a specific PL/SQL procedure or function.</p>
<p>Framework Activities: Select the object for processing.</p>
</li>
<li>
<p><span class="bold">Perform any startup processing.</span></p>
<p>User Input: Enter the PL/SQL block, or enter NULL for no startup processing.</p>
<p>Framework Activities: Execute the block.</p>
</li>
<li>
<p><span class="bold">Run the unit test object.</span></p>
<p>User Input: (None.)</p>
<p>Framework Activities: Execute the unit test.</p>
</li>
<li>
<p><span class="bold">Check and record the results.</span></p>
<p>User Input: Identify the expected return (result), plus any validation rules.</p>
<p>Framework Activities: Check the results, including for any validation, and store the results.</p>
</li>
<li>
<p><span class="bold">Perform any end processing (teardown).</span></p>
<p>User Input: Enter the PL/SQL block, or enter NULL for no teardown activities.</p>
<p>Framework Activities: Execute the block.</p>
</li>
</ol>
<p><a id="sthref480"></a><a id="sthref481"></a>For each test, you enter the information called for in the preceding steps, to create a <span class="bold">test case</span>. A <span class="bold">unit test</span> is a group of test cases (one or more) on a specific PL/SQL object.</p>
<p>Each test case is an <span class="bold">implementation</span>. Each unit test has at least one implementation (named <span class="italic">Default</span> by default); however, you can add one or more other implementations. For example, you can have implementations that test various combinations of parameter values, including those that generate exceptions.</p>
<p>When a unit test is run, each implementation is run one after the other. Each implementation runs the startup action (if any) for the test, then the test implementation itself, and then the teardown action (if any). The difference between implementations is in the values of the calling arguments. Any dynamic value query (explained in <a href="#BCGBJIBI">Section 3.5, &#34;Using a Dynamic Value Query to Create a Unit Test&#34;</a>) is evaluated before the execution of all of the implementations, including before any startup action.</p>
<p><a id="sthref482"></a>You can group unit tests into a <span class="bold">test suite</span> to be run as a grouped item, and the test suite can have its own startup and end processing in addition to any specified for test cases and unit tests.</p>
<p>To learn more about unit testing with SQL Developer, take whichever approach suits your preference:</p>
<ul>
<li>
<p>Go to <a href="#BCGBIHCJ">Section 3.12, &#34;Example of Unit Testing (Tutorial)&#34;</a> and follow the steps, and then return to read the remaining conceptual information under <a href="#BCGHEHFE">SQL Developer: Unit Testing</a>.</p>
</li>
<li>
<p>Read the remaining conceptual information under <a href="#BCGHEHFE">SQL Developer: Unit Testing</a>, finishing with <a href="#BCGBIHCJ">Section 3.12, &#34;Example of Unit Testing (Tutorial)&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BCGIGJFG"></a>
<div id="RPTUG45041" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.2</span> <a id="sthref483"></a><a id="sthref484"></a><a id="sthref485"></a>SQL Developer User Interface for Unit Testing</h2>
<p>The SQL Developer user interface for unit testing includes the Unit Test navigator, the Unit Test submenu, and other features.</p>
<p><a href="#BCGBAGEB">Figure 3-1, &#34;Unit Test Navigator&#34;</a> shows the Unit Test navigator, which includes the top-level nodes Library, Lookups, Reports, Suites, and Tests. (If this navigator is not visible, click <span class="bold">View</span>, then <span class="bold">Unit Test</span>.)</p>
<div id="RPTUG45042" class="figure">
<p class="titleinfigure"><a id="BCGBAGEB"></a>Figure 3-1 Unit Test Navigator</p>
<img width="241" height="253" src="img/ui_unittest_nav.gif" alt="Unit Test navigator, explained in surrounding text"/><br/></div>
<!-- class="figure" -->
<p>In the preceding figure, the top-level repository node shows the name of the connection being used (unit_test_repos) and whether the user associated with that connection has only User access to the repository or both Administrator and User access (here, both). (Administrator and User access are explained in <a href="#BCGBIFGA">Section 3.3</a>.)</p>
<p>The preceding figure also shows the types of actions under the Library node (Startups, Teardowns, Validations), one test suite, and several tests.</p>
<a id="BCGGBCEH"></a>
<div id="RPTUG45044" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.2.1</span> Unit Test Submenu</h3>
<p>To display the Unit Test submenu, click <span class="bold">Tools</span>, then <span class="bold">Unit Test</span>. (The commands on the Unit Test submenu affect the <a href="#BCGBIFGA">Unit Test Repository</a>.)</p>
<p><span class="bold">Select Current Repository</span>: Enables you to select the database connection to use for the unit testing repository, and to create a repository using that connection if no repository exists in the associated schema.</p>
<p><span class="bold">Deselect Current Repository</span>: Disconnects from the current unit testing repository. To connect again to a unit testing repository (the same one or a different one), use Select Current Repository.</p>
<p><span class="bold">Create/Update Repository</span>: Enables you to create a unit resting repository, to hold schema objects associated with the SQL Developer unit testing feature.</p>
<p><span class="bold">Drop Repository</span>: Drops (deletes) the current unit testing repository.</p>
<p><span class="bold">Purge Repository</span>: Deletes the contents of the current unit testing repository, but does not delete the repository metadata.</p>
<p><span class="bold">Manage Users</span>: Enables you to select, add, and modify database connections to be used for the unit testing repository.</p>
<p><span class="bold">Select As Shared Repository</span>: Makes the current repository a shared repository.</p>
<p><span class="bold">Deselect As Shared Repository</span>: Makes the current repository an unshared repository.</p>
</div>
<!-- class="sect2" -->
<a id="BCGJHFBH"></a>
<div id="RPTUG45045" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.2.2</span> Other Menus: Unit Test Items</h3>
<p>The <span class="bold">View</span> menu has the following item related to unit testing:</p>
<ul>
<li>
<p><span class="bold">Unit Test</span>: Toggles the display of the Unit Test navigator.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BCGDAGDG"></a>
<div id="RPTUG45046" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.2.3</span> Unit Test Preferences</h3>
<p>The SQL Developer user preferences window (displayed by clicking <span class="bold">Tools</span>, then <span class="bold">Preferences</span>) contains a <span class="bold">Unit Test Parameters</span> pane.</p>
<p>For information about specific preferences, click Help in the pane or see <a href="intro.htm#CHDBBGIJ">Section 1.18.14</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCGBIFGA"></a>
<div id="RPTUG45047" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.3</span> <a id="sthref486"></a><a id="sthref487"></a>Unit Test Repository</h2>
<p>The unit test <span class="bold">repository</span> is a set of tables, views, indexes, and other schema objects that SQL Developer maintains to manage the use of the unit testing feature. (Most of these objects have <code>UT_</code> in their names.) You can create a separate database user for a repository or use the schema of an existing database user; but for simplicity and convenience in an environment with a single main shared repository, you may want to create a separate database user (as is done in <a href="#BCGBIHCJ">Section 3.12, &#34;Example of Unit Testing (Tutorial)&#34;</a>).</p>
<p>A repository can be unshared or shared, depending on how many and which database users are allowed to perform various types of unit testing operations:</p>
<ul>
<li>
<p>In an <span class="bold">unshared repository</span>, only the database user that owns the unit test repository schema objects can be used for operations than can modify the repository.</p>
<p>There can be multiple unshared repositories, for example, to allow individual developers to create private repositories.</p>
</li>
<li>
<p><a id="sthref488"></a>In a <span class="bold">shared repository</span>, the owner of the repository objects and any other user that has been granted Administrator access to the repository (specifically, UT_REPO_ADMINISTRATOR role) can perform administrative operations, such as managing users.</p>
<p>There can be at most one shared repository, and this is the typical case for a team development environment. A repository administrator can add users (as explained in <a href="#BCGIEECI">Section 3.3.1</a>) and can switch the repository status between shared and unshared. (When a repository is made shared, SQL Developer creates public synonyms for the appropriate repository objects.)</p>
</li>
</ul>
<p>To change an unshared repository to shared, click <span class="bold">Tools</span>, then <span class="bold">Unit Test</span>, then <span class="bold">Repository</span>, then <span class="bold">Select As Shared Repository</span>. To change a shared repository to unshared, click <span class="bold">Tools</span>, then <span class="bold">Unit Test</span>, then <span class="bold">Repository</span>, then <span class="bold">Deselect As Shared Repository</span>.</p>
<a id="BCGIEECI"></a>
<div id="RPTUG45049" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.3.1</span> Managing Repository Users and Administrators</h3>
<p><a id="sthref489"></a><a id="sthref490"></a>To create and run unit tests and suites, you must use a connection for a database user that has been granted User access to the repository (specifically, UT_REPO_USER role). To perform repository administrative operations, such as managing users, you must use a connection for a database user that has been granted Administrator access to the repository (specifically, UT_REPO_ADMINISTRATOR role).</p>
<p>For example, you may want to allow users SCOTT, JONES, and SMITH to use the unit test capabilities and thus have User access to the shared repository, but to allow only SYS and the user that owns the repository objects (such as UNIT_TEST_REPOS in <a href="#BCGBIHCJ">Example of Unit Testing (Tutorial)</a>) to have Administrator access to the shared repository.</p>
<p>To grant either type of access to any database users, click <span class="bold">Tools</span>, then <span class="bold">Unit Test</span>, then <span class="bold">Repository</span>, then <span class="bold">Manage Users</span>. Select the database connection for the owner of the repository objects or for any other user that has been granted Administrator access to the repository. The <a href="dialogs.htm#BACDFIHI">Unit Testing: Manage Users</a> dialog box is displayed.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCGJDJDA"></a>
<div id="RPTUG45050" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.4</span> <a id="sthref491"></a>Editing and Running a Unit Test</h2>
<p>To edit or run a unit test, click the unit test name in the Unit Test navigator and select the desired connection for running the unit test. A pane is displayed with two tabs: Details for the unit test specification, and Results for results if you run or debug the test.</p>
<p>The toolbar under the Details tab for the subprogram name has a toolbar that includes the icons shown in the following figure.</p>
<img width="188" height="47" src="img/ut_edit_toolbar.gif" alt="Toolbar icons for editing or running a unit test"/><br/>
<ul>
<li>
<p><span class="bold">Freeze View</span> (the pin) keeps that pane in the SQL Developer window when you click another unit test in the Unit Test navigator; a separate tab and detail view pane are created for that other unit test. If you click the pin again, the unit test&#39;s detail view pane is available for reuse.</p>
</li>
<li>
<p><span class="bold">Refresh</span> refreshes the display in the pane.</p>
</li>
<li>
<p><span class="bold">Debug</span> starts execution of the first or next implementation of the unit test in debug mode, and displays the results in the Results tab.</p>
</li>
<li>
<p><span class="bold">Run</span> starts normal execution of the unit test, and displays the results in the Results tab. (Before you click Run, you can specify the database user for the run operation by selecting a database connection on the right.)</p>
</li>
<li>
<p><span class="bold">Edit</span> (pencil icon) enables you to edit the unit test specification. (If you cannot modify the unit test, lick the Edit icon.)</p>
</li>
<li>
<p><span class="bold">Commit Changes</span> saves any changes that you have made to the unit test.</p>
</li>
<li>
<p><span class="bold">Rollback Changes</span> discards any unsaved changes that you have made to the unit test.</p>
</li>
</ul>
<p>If you click the Edit icon, you can modify the Startup Process, Teardown Process, and details for each implementation.</p>
<p><a id="sthref492"></a><a id="sthref493"></a>You can also specify <span class="bold">Gather Code Coverage Statistics</span> to have SQL Developer collect statistics related to code coverage. To view any statistics that have been gathered from unit test runs, use the Test Runs Code Coverage report. In that report, you can click a row with summary information to display detailed information in the Code Coverage Details pane.</p>
</div>
<!-- class="sect1" -->
<a id="BCGBJIBI"></a>
<div id="RPTUG45052" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.5</span> Using a Dynamic Value Query to Create a Unit Test</h2>
<p>As an alternative to specifying exact input data when creating a unit test, you can create a dynamic value query to use data from a table as input for the test. The query returns values from specified columns in one or more rows, and all sets of values returned are checked by any process validation that you have specified for the test. One common use of dynamic value queries is to perform &#34;reasonableness&#34; tests, such as checking that each salary or price resulting from a test is within a specified range.</p>
<p>To create a test that uses dynamic value queries, create and populate the table to be used by the query, create the test by specifying the object to be tested and any startup and teardown actions, and specify a validation action (such as a query returning rows or no rows).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A dynamic value query is executed before the execution of all implementations in a test, including any startup action for the test. If you must populate a table before a dynamic value query is evaluated, you can do this is the startup action for a suite that includes the test.</div>
<p>The following example assumes that you done at least the following in <a href="#BCGBIHCJ">Section 3.12, &#34;Example of Unit Testing (Tutorial)&#34;</a>: created the EMPLOYEES table, created the AWARD_BONUS procedure, and created the unit test repository. It creates a unit test that checks to be sure that no salesperson would receive a bonus so large that his or her salary amount would be greater than 20000. Follow these steps:</p>
<ol>
<li>
<p>Create and populate the table for the data by executing the following statements:</p>
<pre>CREATE TABLE award_bonus_dyn_query (emp_id NUMBER PRIMARY KEY, sales_amt NUMBER);
INSERT INTO award_bonus_dyn_query VALUES (1001, 5000);
INSERT INTO award_bonus_dyn_query VALUES (1002, 6000);
INSERT INTO award_bonus_dyn_query VALUES (1003, 2000);
commit;
</pre></li>
<li>
<p>In the Unit Test navigator, right-click the <span class="bold">Tests</span> node and select <span class="bold">Create Test</span>.</p>
<p>The <a href="dialogs.htm#BACEEHIG">Unit Testing: Create Unit Test</a> wizard is displayed. Click <span class="bold">Next</span> to go from each step to the next; and when you are finished specifying the unit test, click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACIEFFC">Select Operation</a>, select the database connection for the schema that you used to create the AWARD_BONUS procedure; then expand the Procedures node and select AWARD_BONUS.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACGJEAI">Specify Test Name</a>, for <span class="bold">Test Name</span> specify AWARD_BONUS_DYN_QUERY (same as the name of the table that you created), and select <span class="bold">Create with single dummy representation</span>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACHHCCI">Specify Startup</a>, select <span class="bold">Table or Row Copy</span> because you want to save the current data values in the EMPLOYEES table before any data is modified by the unit test.</p>
<p>When prompted, for <span class="bold">Source Table</span> specify EMPLOYEES, and for <span class="bold">Target Table</span> accept the default name provided for a temporary table that will be automatically created when it is needed and deleted when it is no longer needed.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACCAEFJ">Specify Parameters</a>, click <span class="bold">Next</span> to go to the next page. (For this example, do not specify the Dynamic Value Query here; instead, you will specify it in later steps.)</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACFCHIH">Specify Validations</a>, click <span class="bold">Next</span> to go to the next page.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACHEAFD">Specify Teardown</a>, select <span class="bold">Table or Row Restore</span> because you want to restore the original data values in the EMPLOYEES table before any data was modified by the unit test. When prompted, accept the supplied values for <span class="bold">Target Table</span> (EMPLOYEES) and <span class="bold">Source Table</span> (the name of the temporary table).</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACDGGII">Summary</a>, review the information. If you need to change anything, click <span class="bold">Back</span> as needed and make the changes, then proceed to this Summary page. When you are ready to complete the unit test definition, click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>In the Unit Test navigator, click the node for AWARD_BONUS_DYN_QUERY under Tests, to display the test in an editing window.</p>
</li>
<li>
<p>In the Details pane, click the pencil icon next to Dynamic Value Query, enter the following, and click OK:</p>
<pre>SELECT emp_id, sales_amt FROM award_bonus_dyn_query;
</pre></li>
<li>
<p>For <span class="bold">Expected Result</span>, leave the value as <code>Success</code>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACFCHIH">Specify Validations</a>, click the plus (<span class="bold">+</span>) icon and select <span class="bold">Query returning no rows</span>.</p>
<p>For the query, replace the SELECT statement in the Process Validation box with the following (any semicolon at the end of the statement is ignored):</p>
<pre>SELECT * FROM employees WHERE salary_amt &gt; 20000
  AND commission_pct IS NOT NULL
</pre>
<p>That is, for all salespersons (employees whose commission percentage is not null), check whether the salary resulting from the unit test run is greater than 20000. If there are no such salespersons (that is, if the query returns no rows), the result of the validation action is success.</p>
</li>
<li>
<p>Run the AWARD_BONUS_DYN_QUERY unit test. (For the basic steps to run a unit test, see <a href="#BCGDIJHD">Section 3.12.5</a>.)</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BCGIFBHH"></a>
<div id="RPTUG45054" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.6</span> Using Lookups to Simplify Unit Test Creation</h2>
<p>A lookup is an object that contains, for one or more data types, data values that can be tested. Lookups are mainly used for the following purposes:</p>
<ul>
<li>
<p>Providing lists of values (dropdown lists) for Input fields, as explained in <a href="#BCGFDAIH">Section 3.6.1</a>.</p>
</li>
<li>
<p>Automatically creating test implementations based on lookup values, as explained in <a href="#BCGEIJDE">Section 3.6.2</a>.</p>
</li>
</ul>
<p>To create a lookup:</p>
<ol>
<li>
<p>In the Unit Test navigator, right-click the <span class="bold">Lookups</span> node and select <span class="bold">Add Category</span>.</p>
</li>
<li>
<p>Specify the category name (for example, EMP_ID_LOOKUP).</p>
</li>
<li>
<p>For each data type for which you want to specify lookup values (that is, valid and invalid data values for possible testing), right-click the category name and select <span class="bold">Add Datatype</span>, select the data type, and use the <span class="bold">+</span> (plus sign) icon to add as many data values as you want.</p>
<p>Note that <code>(null)</code> is automatically included in the list of values for each data type for each lookup that you create.</p>
</li>
</ol>
<p>For example, for the environment described in <a href="#BCGBIHCJ">Section 3.12, &#34;Example of Unit Testing (Tutorial)&#34;</a>, you could create lookups named EMP_ID_LOOKUP and SALES_AMT_LOOKUP. Each would have only one data type: NUMBER. For the NUMBER data for each lookup, use the <span class="bold">+</span> (plus sign) icon to add each of the following values on a separate line, and click the Commit Changes icon or press F11 when you are finished entering the set of numbers for each lookup:</p>
<ul>
<li>
<p>For EMP_ID_LOOKUP: -100, 99, 1001, 1002, 1003, 1004, 2000, 9999</p>
</li>
<li>
<p>For SALES_AMT_LOOKUP: -1000, 0, 1000, 2000, 5000, 6000, 10000, 99999</p>
</li>
</ul>
<p>You can delete and rename lookup categories by using the context (right-click) menu in the Unit Test navigator. You can also delete a data type under a lookup category; however, &#34;deleting&#34; in this case removes any currently specified data values for that type for the lookup category, and it makes the type available for selection in the <a href="dialogs.htm#BACEIEJC">Unit Testing: Add Data Type</a> dialog box.</p>
<a id="BCGFDAIH"></a>
<div id="RPTUG45055" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.6.1</span> Providing Values for Input Fields</h3>
<p>When you are specifying Input parameters for a unit test implementation, you can click the Lookup Category control to select a lookup category. When you then click in a cell under Input, you can click the dropdown arrow to select a value from the specified lookup. (You can also enter a value other than one in the list.)</p>
<p>For example, if you created the EMP_ID_LOOKUP lookup category as explained in <a href="#BCGIFBHH">Section 3.6</a>, and if you select it as the lookup category when specifying parameters, then the values -100, 99, 1001, 1002, 1003, 1004, 2000, 9999, and (null) will be in the dropdown list for the Input cell for the EMP_ID parameter. (For the SALES_AMT parameter, use the SALES_AMT_LOOKUP category.)</p>
</div>
<!-- class="sect2" -->
<a id="BCGEIJDE"></a>
<div id="RPTUG45056" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.6.2</span> Automatically Creating Implementations</h3>
<p>If you know that you want implementations to test certain values for a data type, you can use a lookup category to generate these implementations automatically instead of creating them all manually. To do this, use either the DEFAULT lookup category or a user-created category, specify the values for the desired data type, then specify that lookup category for the <span class="bold">Configuration set to use for lookups</span> preference in the <a href="intro.htm#CHDBBGIJ">Unit Test Parameters</a> preferences.</p>
<p>For example, assume that for NUMBER input parameters, you always want to check for a very high positive number (such as 9999), a very low negative number (such as -9999), 1, -1, and 0 (zero). Follow these steps:</p>
<ol>
<li>
<p>In the Unit Test navigator, expand the <span class="bold">Lookups</span> node.</p>
</li>
<li>
<p>Right-click DEFAULT and select Add Datatype.</p>
</li>
<li>
<p>In the dialog box, specify NUMBER.</p>
</li>
<li>
<p>In the Lookups Editor for the NUMBER type, use the <span class="bold">+</span> (plus sign) icon to add each of the following as a separate item (new line).</p>
<pre>9999
1.0
0
-1.0
-9999
</pre></li>
<li>
<p>Click the Commit Changes icon or press F11.</p>
</li>
<li>
<p>Click <span class="bold">Tools</span>, then <span class="bold">Preferences</span>, then <span class="bold">Unit Test Parameters</span>, and ensure that the configuration set to use for lookups is DEFAULT (the lookup category for which you just specified the values for the NUMBER data type).</p>
</li>
<li>
<p>Create the unit test in the usual way: in the Unit Test navigator, right-click the <span class="bold">Tests</span> node and select <span class="bold">Create Test</span>.</p>
<p>However, in the <a href="dialogs.htm#BACGJEAI">Specify Test Name</a> step, select <span class="bold">Seed/Create implementations using lookup values</span> (that is, <span class="italic">not</span> &#34;Create with single dummy representation&#34;).</p>
<p>For <a href="dialogs.htm#BACHHCCI">Specify Startup</a> and <a href="dialogs.htm#BACHEAFD">Specify Teardown</a>, specify any desired action.</p>
<p>You cannot specify anything for <a href="dialogs.htm#BACCAEFJ">Specify Parameters</a> or <a href="dialogs.htm#BACFCHIH">Specify Validations</a> now. An implementation (with a name in the form <code>Test Implementation</code> <code><span class="codeinlineitalic">n</span></code>) will automatically be created for each possible combination of input parameters of type NUMBER. For any validation actions, you must specify them later by editing each generated implementation.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCGEGDJD"></a>
<div id="RPTUG45247" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.7</span> <a id="sthref494"></a><a id="sthref495"></a>Using Variable Substitution in Validation Actions</h2>
<p>You can use variable substitution in validation actions to write dynamic validations that provide a result based on the values of input and output parameters of a procedure or function, or on the return value of a function. You can specify strings in the following format in validation actions:</p>
<ul>
<li>
<p>For input parameters: <code>{</code><span class="italic">PARAMETER_NAME</span><code>}</code></p>
<p>For example, if an input parameter is named <code>EMP_ID</code>:</p>
<pre>SELECT ... WHERE employee_id = {EMP_ID} AND ...;
</pre></li>
<li>
<p>For output parameters: <code>{</code><span class="italic">PARAMETER_NAME</span><code>$}</code></p>
<p>For example, if an output parameter is named <code>SALARY</code>:</p>
<pre>SELECT ... WHERE {SALARY$} &lt; old_salary;
</pre></li>
<li>
<p>For the return value: <code>{RETURNS$}</code></p>
<p>For example, if a function returns a numeric value:</p>
<pre>SELECT ... WHERE {RETURNS$} &gt; 1;
</pre></li>
</ul>
<p>What is actually substituted is the string representation of the parameter value (for text substitution), or the underlying data value of the parameter (for bind substitution, using the syntax <code>:</code><code><span class="codeinlineitalic">param-name</span></code>). The following example shows both styles of substitution (text style and bind style):</p>
<pre>DECLARE
    l_PARAM1 DATE;
    bad_date EXCEPTION;
BEGIN
    l_PARAM1 := :PARAM1;
    IF &#39;{PARAM1}&#39; &lt;&gt; TO_CHAR(l_PARAM1)
    THEN
        RAISE bad_date;
    END IF;
END;
</pre>
<p>As a simple example of text-style variable substitution:</p>
<ul>
<li>
<p>If P1 is a parameter of type NUMBER and has the value <code>2.1</code>, the string <code>{P1}</code> will be replaced by the string <code>2.1</code>.</p>
</li>
<li>
<p>If P1 is a parameter of type VARCHAR2 and has the value <code>ABC</code>, the string <code>&#39;{P1}&#39;</code> will be replaced by the string <code>&#39;ABC&#39;</code>. (Note the single-quotation marks around {P1} in this example.)</p>
</li>
</ul>
<p>You can use variable substitution for all types of validation actions except Compare Tables. For the applicable validation action types, variable substitution is performed as follows:</p>
<ul>
<li>
<p>For Query Returning Row(s) and Query Returning No Row(s), substitution is performed on the SQL query.</p>
</li>
<li>
<p>For Compare Query Results, substitution is performed on both the source and target SQL queries.</p>
</li>
<li>
<p>For Boolean Function and User PL/SQL Code, substitution is performed on the PL/SQL block.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BCGICEFH"></a>
<div id="RPTUG45058" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.8</span> <a id="sthref496"></a><a id="sthref497"></a>Unit Test Library</h2>
<p>The unit testing library enables you to store actions that you can reuse in the definitions of multiple unit tests. These user-defined actions are displayed under the Library node in the Unit Test navigator (which is explained in <a href="#BCGIGJFG">Section 3.2</a>). You can store the following kinds of actions in the library, in the following categories:</p>
<ul>
<li>
<p>Dynamic value queries</p>
</li>
<li>
<p>Startup actions</p>
</li>
<li>
<p>Teardown actions</p>
</li>
<li>
<p>Validation actions</p>
</li>
</ul>
<p>Most categories have subcategories. For example, the <span class="italic">Startup Actions</span> node has subnodes for <span class="italic">Table or Row Copy</span> and <span class="italic">User PL/SQL Code</span>. You can add an entry to the library in the following ways:</p>
<ul>
<li>
<p>Expand the Library hierarchy to display the relevant lowest-level node (such as <span class="italic">User PL/SQL Code</span> under <span class="italic">Startups</span>); right-click and select <span class="bold">Add [action-type]</span>; specify a name for the action; click the name of the newly created action; and complete the specification.</p>
</li>
<li>
<p>Use the <span class="bold">Publish to Library</span> option when specifying the action when you are creating a unit test: enter a name for the action and click Publish. (The action will be added under the appropriate category and subcategory in the Library display in the Unit Test navigator.)</p>
</li>
</ul>
<p>To use an action from the library when you are creating a unit test, select it from the list under <span class="bold">Library</span> on the appropriate page in the <a href="dialogs.htm#BACEEHIG">Unit Testing: Create Unit Test</a> wizard or when you are editing a unit test. When you select an action from the library, you have the following options for incorporating it into the process (startup, teardown, or validation):</p>
<ul>
<li>
<p><span class="bold">Copy</span>: Uses a copy of the action, which you can then edit (for example, to modify the WHERE clause in a User PL/SQL Code procedure). If the action is later changed in the library, it is <span class="italic">not</span> automatically re-copied into the process.</p>
</li>
<li>
<p><span class="bold">Subscribe</span>: Uses the action as stored in the library. (You cannot edit the action in the process if you use the Subscribe option.) If the action is later changed in the library, the changed version <span class="italic">is</span> automatically used in the process.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BCGEHDJI"></a>
<div id="RPTUG45060" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.9</span> <a id="sthref498"></a><a id="sthref499"></a>Unit Test Reports</h2>
<p>Several SQL Developer reports provide information about operations related to unit testing. These reports are listed in the Unit Test navigator under the Reports node. The available reports include:</p>
<ul>
<li>
<p>All Suite Runs</p>
</li>
<li>
<p>All Test Implementation Runs</p>
</li>
<li>
<p>All Test Runs</p>
</li>
<li>
<p>Suite Runs Code Coverage</p>
</li>
<li>
<p>Suite Test Implementation Runs</p>
</li>
<li>
<p>Suite Test Runs</p>
</li>
<li>
<p>Test Implementation Runs</p>
</li>
<li>
<p>Test Runs Code Coverage</p>
</li>
<li>
<p>User Test Runs (test runs grouped by user)</p>
</li>
</ul>
<p>Each unit testing report contains a top pane with a summary information row for each item. To see detailed information about any item, click in its row to display the information in one or more detail panes below the summary information. For example, if you click in a summary row in the All Test Runs report, details about that test run are displayed under the Test Run Details and Most Recent Code Coverage tabs.</p>
<p>Some reports prompt you for bind variables, where you can accept the default values to display all relevant items or enter bind variables to restrict the display. (For more information, see <a href="intro.htm#CHDHHIHB">Bind Variables for Reports</a>.)</p>
</div>
<!-- class="sect1" -->
<a id="BCGGDJGC"></a>
<div id="RPTUG45248" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.10</span> <a id="sthref500"></a><a id="sthref501"></a><a id="sthref502"></a><a id="sthref503"></a>Exporting and Importing Unit Test Objects</h2>
<p>You can export and import unit tests, suites, and objects that are stored in the library (such as startup, validation, and teardown actions).</p>
<p>Exporting an object causes all dependent objects to be included in the resulting XML file. For example, if you export a suite, the resulting XML file includes all tests in that suite, as well as all startup, validation, and teardown actions within each test in that suite.</p>
<p>To export an object, right-click its name in the Unit Test navigator and select <span class="bold">Export to File</span>; then specify the location and name for the XML file that will include the definitions of the objects.</p>
<p>Importing unit test objects from an XML file causes all objects in the file to be created in the appropriate places in the Unit Test navigator hierarchy. If an object already exists in the repository with the same name as an object of the same type in the XML file, it is replaced (overwritten) by the object definition in the XML file.</p>
<p>To import unit test objects, click <span class="bold">Tools</span>, then <span class="bold">Unit Test</span>, then <span class="bold">Import from File</span>; then specify the XML file to be used for the import operation.</p>
</div>
<!-- class="sect1" -->
<a id="BCGFBIDD"></a>
<div id="RPTUG45062" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.11</span> <a id="sthref504"></a><a id="sthref505"></a>Command-Line Interface for Unit Testing</h2>
<p>In addition to running unit tests and suites, and exporting and importing unit test objects, within the SQL Developer graphical interface, you can use the <code>ututil</code> batch file (Windows) or shell script (Linux) on the operating system command line. <code>ututil</code> is located in the <code>sqldeveloper\sqldeveloper\bin</code> folder or <code>sqldeveloper/sqldeveloper/bin</code> directory under the location where you installed SQL Developer.</p>
<p><code>ututil.bat</code> or <code>ututil.sh</code> accepts these commands: <code>run</code> to run a test or suite, <code>exp</code> to perform an export operation, and <code>imp</code> to perform an import operation. For detailed information about the syntax and options, start by running <code>ututil</code> without any parameters at the system command prompt. For example:</p>
<pre>C:\Program Files\sqldeveloper\sqldeveloper\bin&gt;ututil
 
ututil -run ?
ututil -exp ?
ututil -imp ?
</pre>
<p>Then enter the command for information about the command that you want to use. For example: <code>ututil -run ?</code></p>
<p>The <code>ututil -run</code> command includes the following parameters:</p>
<ul>
<li>
<p><code>-db &lt;connection name&gt;</code> specifies the database connection associated with the database user to be used for running the unit test.</p>
</li>
<li>
<p><code>-repo &lt;connection name&gt;</code> specifies the database connection associated with the unit testing repository to be used for running the unit test.</p>
</li>
<li>
<p><code>{-log &lt;0,1,2,3&gt;}</code> specifies the logging level, where:</p>
<p>0 = No logging (the default).</p>
<p>1 = Report the status.</p>
<p>2 = Report the status and error message.</p>
<p>3 = Report the status, error message, and return ID value.</p>
</li>
<li>
<p><code>{-return &lt;return id&gt;}</code> specifies the return ID value, which is used as the primary key in the results table, and which will allow automation tools to query the results from the database.</p>
</li>
</ul>
<p>The following example runs a unit test named AWARD_BONUS in a Windows environment where SQL Developer is installed under Program Files. (Note that test and suite names are case sensitive for the command-line interface.) This example uses the repository connection for user unit_test_repos and runs the test as user fred.</p>
<pre>&gt; cd c:\Program Files\sqldeveloper\sqldeveloper\bin
&gt; ututil -run -test -name AWARD_BONUS -repo unit_test_repos -db fred
</pre>
<p>The following example exports a unit test named AWARD_BONUS. It uses the repository connection for user unit_test_repos and stores the exported definitions in the file <code>C:\ut_xml\award_bonus_test.xml</code>.</p>
<pre>&gt; ututil -exp -test -name AWARD_BONUS -repo unit_test_repos -file c:\ut_xml\award_bonus_test.xml
</pre>
<p>The following example imports object definitions from the file C:\ut_xml\award_bonus_suite.xml. It uses the repository connection for user unit_test_repos.</p>
<pre>&gt; ututil -imp -repo unit_test_repos -file c:\ut_xml\award_bonus_suite.xml
</pre>
<p>To check the results of any tests or suites that you run from the command line, you can start SQL Developer and view the All Test Runs and All Suite Runs reports (see <a href="#BCGEHDJI">Section 3.9, &#34;Unit Test Reports&#34;</a>).</p>
</div>
<!-- class="sect1" -->
<a id="BCGBIHCJ"></a>
<div id="RPTUG45064" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.12</span> <a id="sthref506"></a><a id="sthref507"></a>Example of Unit Testing (Tutorial)</h2>
<p>This section presents a simplified example in which you create a table and a PL/SQL procedure, create unit tests with test cases for valid and invalid input data, run the unit tests, and create and run a unit test suite. It assumes that you have a table of employee data that includes salary information, and that you need to create a procedure to award bonuses to sales representatives, whose pay consists of a base salary plus a commission-based bonus.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An Oracle By Example (OBE) tutorial, <span class="italic">Performing a Unit Test of Your PL/SQL in Oracle SQL Developer 2.1</span>, is similar to this one, but it uses a copy of the EMPLOYEES table from the Oracle sample HR schema, which includes more columns and rows as well as different data. For information about SQL Developer OBEs, see the Start Page (click <span class="bold">Help</span>, then <span class="bold">Start Page</span>).</div>
<p>The EMPLOYEES table includes the following columns, all of type NUMBER:</p>
<ul>
<li>
<p>EMPLOYEE_ID: Employee identification (badge) number.</p>
</li>
<li>
<p>COMMISSION_PCT: Commission percentage for the employee: a decimal fraction representing the percentage of the amount of sales by the employee, to be used to compute a bonus that will be added to the employee&#39;s base salary to determine the total salary. For example, 0.2 or .2 indicates a 20 percent commission, or 0.2 times the amount of sales.</p>
<p>Only employees in the Sales department have numeric COMMISSION_PCT values. Other employees (not &#34;on commission&#34;) have null COMMISSION_PCT values.</p>
</li>
<li>
<p>SALARY: Salary amount for the employee; includes base salary plus any bonus (which will be calculated by an <code>award_bonus</code> procedure, to be created during this example).</p>
</li>
</ul>
<p>Assume that the following data exists in these columns in the EMPLOYEES table:</p>
<div class="inftblinformal">
<table class="cellalignment326" summary="Data in the EMPLOYEE_ID, COMMISSION_PCT, and SALARY columns for three employees." dir="ltr">
<thead>
<tr class="cellalignment317">
<th class="cellalignment324" id="r1c1-t4">EMPLOYEE_ID</th>
<th class="cellalignment324" id="r1c2-t4">COMMISSION_PCT</th>
<th class="cellalignment324" id="r1c3-t4">SALARY</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment317">
<td class="cellalignment325" id="r2c1-t4" headers="r1c1-t4">1001</td>
<td class="cellalignment325" headers="r2c1-t4 r1c2-t4">0.2</td>
<td class="cellalignment325" headers="r2c1-t4 r1c3-t4">8400</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r3c1-t4" headers="r1c1-t4">1002</td>
<td class="cellalignment325" headers="r3c1-t4 r1c2-t4">0.25</td>
<td class="cellalignment325" headers="r3c1-t4 r1c3-t4">6000</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r4c1-t4" headers="r1c1-t4">1003</td>
<td class="cellalignment325" headers="r4c1-t4 r1c2-t4">0.3</td>
<td class="cellalignment325" headers="r4c1-t4 r1c3-t4">5000</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r5c1-t4" headers="r1c1-t4">1004</td>
<td class="cellalignment325" headers="r5c1-t4 r1c2-t4">(null)</td>
<td class="cellalignment325" headers="r5c1-t4 r1c3-t4">10000</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>You create a procedure named AWARD_BONUS, which has two input parameters:</p>
<ul>
<li>
<p><code>emp_id</code>: The employee ID of an employee.</p>
</li>
<li>
<p><code>sales_amt</code>: The amount of sales with which the employee is credited for the period in question.</p>
<p>This amount is calculated using the COMMISSION_PCT value for the specified employee, and the result is added to the SALARY value for that employee.</p>
<p>If the COMMISSION_PCT is null for the employee, no commission or bonus can be calculated, and an exception is raised. This scenario occurs if an attempt is made to add a commission-based bonus to the salary of an employee who is not in the Sales department.</p>
</li>
</ul>
<p>The rest of this example involves the following major steps:</p>
<ol>
<li>
<p><a href="#BCGDCJCJ">Create the EMPLOYEES Table</a>.</p>
</li>
<li>
<p><a href="#BCGHDFAI">Create the AWARD_BONUS Procedure</a>.</p>
</li>
<li>
<p><a href="#BCGDDGBH">Create the Unit Testing Repository</a>.</p>
</li>
<li>
<p><a href="#BCGICDDG">Create a Unit Test</a>.</p>
</li>
<li>
<p><a href="#BCGDIJHD">Run the Unit Test</a>.</p>
</li>
<li>
<p><a href="#BCGFHIBA">Create and Run an Exception Unit Test</a>.</p>
</li>
<li>
<p><a href="#BCGGFECJ">Create a Unit Test Suite</a>.</p>
</li>
<li>
<p><a href="#BCGGGEEB">Run the Unit Test Suite</a>.</p>
</li>
</ol>
<a id="BCGDCJCJ"></a>
<div id="RPTUG45065" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.1</span> Create the EMPLOYEES Table</h3>
<p>This tutorial uses a table named EMPLOYEES, which must exist before you run any unit tests of the AWARD_BONUS procedure. This table contains some of the columns used in the HR.EMPLOYEES table that is included in the Oracle-supplied sample schemas, but it does not contain all of the columns, and it contains fewer rows and different data.</p>
<p>You can create this EMPLOYEES table in an existing schema and using an existing database connection, or you can create a new schema and connection for the table. To create and populate this table, enter the following statements in a SQL Worksheet or a SQL*Plus command window:</p>
<pre>-- Connect as the database user that will be used to run the unit tests.
-- Then, enter the following statements:
 
CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, commission_pct NUMBER, salary NUMBER);
INSERT INTO employees VALUES (1001, 0.2, 8400);
INSERT INTO employees VALUES (1002, 0.25, 6000);
INSERT INTO employees VALUES (1003, 0.3, 5000);
-- Next employee is not in the Sales department, thus is not on commission.
INSERT INTO employees VALUES (1004, null, 10000);
commit;
</pre></div>
<!-- class="sect2" -->
<a id="BCGHDFAI"></a>
<div id="RPTUG45066" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.2</span> Create the AWARD_BONUS Procedure</h3>
<p>Create the AWARD_BONUS procedure in the same schema as the EMPLOYEES table. In a SQL Worksheet using the appropriate database connection, enter the following text:</p>
<pre>create or replace
PROCEDURE award_bonus (
  emp_id NUMBER, sales_amt NUMBER) AS
  commission    REAL;
  comm_missing  EXCEPTION;
BEGIN
  SELECT commission_pct INTO commission
    FROM employees
      WHERE employee_id = emp_id;
 
  IF commission IS NULL THEN
    RAISE comm_missing;
  ELSE
    UPDATE employees
      SET salary = salary + sales_amt*commission
        WHERE employee_id = emp_id;
  END IF;
END award_bonus;
/
</pre>
<p>Click the Run Script icon (or press F5) to create the AWARD_BONUS procedure.</p>
</div>
<!-- class="sect2" -->
<a id="BCGDDGBH"></a>
<div id="RPTUG45067" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.3</span> Create the Unit Testing Repository</h3>
<p>You will need a unit testing repository in the database to hold schema objects that you create and that SQL Developer will maintain. You can create a separate database user for this repository or use the schema of an existing database user; however, to simplify your learning and any possible debugging you may need to do later, it is recommended that you use a separate schema for the unit testing repository, and the instructions in this section reflect this approach.</p>
<ol>
<li>
<p>Create a database user (for example, UNIT_TEST_REPOS) for the unit testing repository. Using a database connection with DBA privileges, right-click <span class="bold">Other Users</span> in the Connections navigator and select <span class="bold">Create User</span>. Specify UNIT_TEST_REPOS as the user name, and complete any other required information.</p>
<p>For <span class="bold">Default Tablespace</span>, specify USERS; for <span class="bold">Temporary Tablespace</span>, specify TEMP.</p>
<p>For <span class="bold">System Privileges</span>, enable CREATE SESSION; then click <span class="bold">Apply</span>, then <span class="bold">Close</span>.</p>
</li>
<li>
<p>Create a database connection for the unit testing repository user that you created, as follows. Click <span class="bold">Tools</span>, then <span class="bold">Unit Test</span>, then <span class="bold">Manage Users</span>. In the <a href="dialogs.htm#BACCEADJ">Select Connection</a> dialog box, click the plus (+) icon to create a new database connection (for example, unit_test_repos) for the unit testing repository user.</p>
<p>Click <span class="bold">Save</span> to save the connection, then <span class="bold">Cancel</span> to close the dialog box.</p>
</li>
<li>
<p>Create the repository in the schema of the user that you created, as follows. Click <span class="bold">Tools</span>, then <span class="bold">Unit Test</span>, then <span class="bold">Select Current Repository</span>. Specify the database connection (for example, unit_test_repos) for the unit testing repository user. When you see a message that no repository exists for that connection, follow the prompts to create a new repository.</p>
<p>SQL Developer will display several prompts so it can execute commands that grant the necessary privileges to the unit test repository user. In each case, click <span class="bold">Yes</span>, and enter the SYS account password when prompted.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BCGICDDG"></a>
<div id="RPTUG45068" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.4</span> Create a Unit Test</h3>
<p>To create the first unit test, use the Unit Test navigator. If this navigator is not visible on the left side, click <span class="bold">View</span>, then <span class="bold">Unit Test</span>. The Unit Test navigator is described in <a href="#BCGIGJFG">Section 3.2</a>.</p>
<ol>
<li>
<p>In the Unit Test navigator, right-click the <span class="bold">Tests</span> node and select <span class="bold">Create Test</span>.</p>
<p>The <a href="dialogs.htm#BACEEHIG">Unit Testing: Create Unit Test</a> wizard is displayed. In the remaining steps, click <span class="bold">Next</span> to go from each step to the next; and when you are finished specifying the unit test, click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACIEFFC">Select Operation</a>, select the database connection for the schema that you used to create the AWARD_BONUS procedure; then expand the Procedures node and select AWARD_BONUS.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACGJEAI">Specify Test Name</a>, for <span class="bold">Test Name</span> specify AWARD_BONUS (same as the procedure name), and select <span class="bold">Create with single dummy representation</span>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACHHCCI">Specify Startup</a>, click the plus (+) icon to add a startup action; and for the action select <span class="bold">Table or Row Copy</span> because you want to save the current data values in the EMPLOYEES table before any data is modified by the unit test.</p>
<p>When prompted, for <span class="bold">Source Table</span> specify EMPLOYEES, and for <span class="bold">Target Table</span> accept the default name provided for a temporary table that will be automatically created when it is needed and deleted when it is no longer needed. (The target table will be created; and if a table already exists with the name that you specify as the target table, <span class="italic">it will be overwritten</span>.)</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACCAEFJ">Specify Parameters</a>, change the values in the Input column to the following:</p>
<p>For Parameter EMP_ID: 1001</p>
<p>For Parameter SALES_AMT: 5000</p>
<p>For <span class="bold">Expected Result</span>, leave the value as <code>Success</code>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACFCHIH">Specify Validations</a>, click the plus (<span class="bold">+</span>) icon and select <span class="bold">Query returning row(s)</span>.</p>
<p>For the query, replace the SELECT statement in the Process Validation box with the following (any semicolon at the end of the statement is ignored):</p>
<pre>SELECT * FROM employees
  WHERE employee_id = 1001 AND salary = 9400
</pre>
<p>That is, because employee 1001 has a 20 percent (0.2) commission and because the sales amount was specified as 5000, the bonus is 1000 (5000 * 0.2), and the new salary for this employee is 9400 (8400 base salary plus 1000 bonus). In this case, the query returns one row, and therefore the result of the validation action is success.</p>
<p>Note that you could have instead specified the SELECT statement in this step using variable replacement (explained in <a href="#BCGEGDJD">Section 3.7</a>), as follows:</p>
<pre>SELECT * FROM employees
  WHERE employee_id = {EMP_ID} AND salary = 9400
</pre>
<p>However, in this specific example scenario, using variable substitution would provide no significant advantage.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACHEAFD">Specify Teardown</a>, select <span class="bold">Table or Row Restore</span> because you want to restore the original data values in the EMPLOYEES table before any data was modified by the unit test. When prompted, accept the supplied values for <span class="bold">Target Table</span> (EMPLOYEES) and <span class="bold">Source Table</span> (the name of the temporary table).</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACDGGII">Summary</a>, review the information. If you need to change anything, click <span class="bold">Back</span> as needed and make the changes, then proceed to this Summary page. When you are ready to complete the unit test definition, click <span class="bold">Finish</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BCGDIJHD"></a>
<div id="RPTUG45069" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.5</span> Run the Unit Test</h3>
<p>To run the unit test, use the Unit Test navigator. If this navigator is not visible on the left side, click <span class="bold">View</span>, then <span class="bold">Unit Test</span>. The Unit Test navigator is described in <a href="#BCGIGJFG">Section 3.2</a>.</p>
<ol>
<li>
<p>In the Unit Test navigator, expand the <span class="bold">Tests</span> node and click the AWARD_BONUS test.</p>
<p>A pane for the AWARD_BONUS test is displayed, with Details and Results tabs.</p>
</li>
<li>
<p>On the Details tab, near the top-right corner, select the database connection for the schema that you used to create the AWARD_BONUS procedure.</p>
<p>Do not change any other values. (However, if you later want to run the unit test with different specifications or data values, you can click the Edit (pencil) icon in the Code Editor toolbar at the top of the pane.)</p>
</li>
<li>
<p>Click the Run Test (green arrowhead) icon in the Code Editor toolbar (or press F9).</p>
</li>
</ol>
<p>At this point, focus is shifted to the Results tab, where you can soon see that the AWARD_BONUS ran successfully.</p>
<p>If you want to check the EMPLOYEES table data, you will see that the salary for employee 1001 is the same as it was before (8400), because the startup action for the unit test copied the original data to the temporary table and the teardown action restored the original data to the EMPLOYEES table.</p>
</div>
<!-- class="sect2" -->
<a id="BCGFHIBA"></a>
<div id="RPTUG45070" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.6</span> Create and Run an Exception Unit Test</h3>
<p>Create another unit test for the exception condition where the COMMISSSION_PCT value is null for the employee, and therefore no commission or bonus can be calculated. For this tutorial, the test data includes employee 1004 with a null commission percentage. (This condition could result from several possible scenarios, the most likely being an attempt to run the procedure on a salaried employee who is not eligible for commissions.)</p>
<p>The steps for creating this exception unit test are similar to those in <a href="#BCGICDDG">Section 3.12.4</a>, except there are no startup or teardown steps because this test should not modify any table data, and there is no need for any validation action.</p>
<ol>
<li>
<p>In the Unit Test navigator, right-click the <span class="bold">Tests</span> node and select <span class="bold">Create Test</span>.</p>
<p>The <a href="dialogs.htm#BACEEHIG">Unit Testing: Create Unit Test</a> wizard is displayed. Click <span class="bold">Next</span> to go from each step to the next; and when you are finished specifying the unit test, click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACIEFFC">Select Operation</a>, select the database connection for the schema that you used to create the AWARD_BONUS procedure; then expand the Procedures node and select AWARD_BONUS.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACGJEAI">Specify Test Name</a>, for <span class="bold">Test Name</span> specify AWARD_BONUS_NO_COMM_EXC, and select <span class="bold">Create with single dummy representation</span>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACHHCCI">Specify Startup</a>, click <span class="bold">Next</span> to go to the next page.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACCAEFJ">Specify Parameters</a>, change the values in the Input column to the following:</p>
<p>EMP_ID: 1004</p>
<p>SALES_AMT: 5000</p>
<p>For <span class="bold">Expected Result</span>, change the value to <code>Exception</code> and leave the expected error number as <code>ANY</code>.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACFCHIH">Specify Validations</a>, click <span class="bold">Next</span> to go to the next page.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACHEAFD">Specify Teardown</a>, click <span class="bold">Next</span> to go to the next page.</p>
</li>
<li>
<p>In <a href="dialogs.htm#BACDGGII">Summary</a>, review the information. If you need to change anything, click <span class="bold">Back</span> as needed and make the changes, then proceed to this Summary page. When you are ready to complete the unit test definition, click <span class="bold">Finish</span>.</p>
</li>
</ol>
<p>To run this unit test, follow the steps in <a href="#BCGDIJHD">Section 3.12.5</a>, except specify AWARD_BONUS_NO_COMM_EXC instead of AWARD_BONUS.</p>
<p>On the Results tab, you will see that the AWARD_BONUS_NO_COMM_EXC test ran successfully; and if you check the EMPLOYEES table data, you will see that the information for employee 1004 (and all the other employees) was not changed.</p>
<div class="infobox-note">
<p class="notep1">Design Consideration:</p>
As an alternative to creating a separate unit test for the exception condition, you could add it as an <span class="bold">implementation</span> to the AWARD_BONUS test (right-click AWARD_BONUS and select <span class="bold">Add Implementation</span>). Thus, the AWARD_BONUS unit test would have two implementations: the &#34;Default&#34; implementation using employee 1001, and the AWARD_BONUS_NO_COMM_EXC implementation using employee 1004.
<p>The approach in this tutorial enables you to create a simple unit test suite using the two unit tests (see <a href="#BCGGFECJ">Section 3.12.7</a>). However, in more realistic unit testing scenarios, it is probably better to use a unit test for each procedure, add implementations for each test case for a procedure, and group multiple unit tests (for individual procedures) into one or more test suites.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="BCGGFECJ"></a>
<div id="RPTUG45071" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.7</span> Create a Unit Test Suite</h3>
<p>Create a unit test suite that groups together the two unit tests of the AWARD_BONUS procedure. If the Unit Test navigator is not visible on the left side, click <span class="bold">View</span>, then <span class="bold">Unit Test</span>. The Unit Test navigator is described in <a href="#BCGIGJFG">Section 3.2</a>.</p>
<ol>
<li>
<p>In the Unit Test navigator, right-click the <span class="bold">Suites</span> node and select <span class="bold">Add Suite</span>.</p>
</li>
<li>
<p>In the <a href="dialogs.htm#BACJEGGF">Unit Testing: Add Test Suite</a> dialog box, specify <code>AWARD_BONUS_SUITE</code> as the suite name.</p>
</li>
<li>
<p>In the Unit Test navigator, under Suites, click the AWARD_BONUS_SUITE node.</p>
<p>An pane for the AWARD_BONUS_SUITE test suite is displayed.</p>
</li>
<li>
<p>Do not specify a Startup Process or Teardown Process, because neither is needed for this test suite.</p>
</li>
<li>
<p>Click the Add (<span class="bold">+</span>) icon to add the first test to the suite.</p>
</li>
<li>
<p>In the <a href="dialogs.htm#BACHACGG">Unit Testing: Add Tests or Suites to a Suite</a> dialog box, click (select) AWARD_BONUS, check (select) <span class="bold">Run Test Startups</span> and <span class="bold">Run Test Teardowns</span> so that the startup and teardown actions for that unit test will be run, and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Click the Add (<span class="bold">+</span>) icon to add the next test to the suite.</p>
</li>
<li>
<p>In the <a href="dialogs.htm#BACHACGG">Unit Testing: Add Tests or Suites to a Suite</a> dialog box, click (select) AWARD_BONUS_NO_COMM_EXC, and click <span class="bold">OK</span>. (The check <span class="bold">Run Test Startups</span> and <span class="bold">Run Test Teardowns</span> options are irrelevant here because the AWARD_BONUS_NO_COMM_EXC test does not perform any startup and teardown actions.)</p>
</li>
<li>
<p>Click the Commit Changes icon in the Code Editor toolbar at the top of the pane (or press F11).</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BCGGGEEB"></a>
<div id="RPTUG45072" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.12.8</span> Run the Unit Test Suite</h3>
<p>To run the unit test suite, use the Unit Test navigator. If you are in the editing pane for the AWARD_BONUS_SUITE test suite, run the suite by clicking the Run Suite (green arrowhead) icon in the Code Editor toolbar. Otherwise, perform the following steps:</p>
<ol>
<li>
<p>In the Unit Test navigator, expand the <span class="bold">Suites</span> node and click the AWARD_BONUS_SUITE test suite.</p>
<p>A pane for the AWARD_BONUS_SUITE test is displayed, with Details and Results tabs.</p>
</li>
<li>
<p>In the Details tab, near the top-right corner, select the database connection for the schema that you used to create the AWARD_BONUS procedure.</p>
<p>Do not change any other values. (However, if you later want to run the unit test suite with different specifications, you can click the Edit (pencil) icon in the Code Editor toolbar at the top of the pane.)</p>
</li>
<li>
<p>Click the Run Suite (green arrowhead) icon in the Code Editor toolbar (or press F9).</p>
</li>
</ol>
<p>After the suite is run, focus is shifted to the Results tab, where you can soon see that the AWARD_BONUS_SUITE test suite ran successfully.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment316">
<tr>
<td class="cellalignment325">
<table class="cellalignment321">
<tr>
<td class="cellalignment320"><a href="migration.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment320"><a href="tut_library.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment328">
<table class="cellalignment319">
<tr>
<td class="cellalignment320"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment320"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment320"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment320"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment320"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment320"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>