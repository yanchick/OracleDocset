<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-91963"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/SQL%20Developer%20Tutorial%3A%20Creating%20Objects%20for%20a%20Small%20Database"></a><title>SQL Developer Tutorial: Creating Objects for a Small Database</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Note: This book is for an old release of SQL Developer. You are encouraged to use the latest available release. See http://www.oracle.com/technetwork/developer-tools/sql-developer/ for information about downloads and documentation./"/>
<meta name="dcterms.created" content="2014-07-07T8:41:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="SQL Developer User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E35117-06"/>
<meta name="dcterms.isVersionOf" content="RPTUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="unit_testing.htm" title="Previous" type="text/html"/>
<link rel="Next" href="dialogs.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E35117-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/12</span> <!-- End Header -->
<div id="RPTUG20000" class="chapter"><a id="CBAHDFAF"></a>
<h1 class="chapter"><span class="secnum">4</span> <a id="sthref508"></a>SQL Developer Tutorial: Creating Objects for a Small Database</h1>
<p>In this tutorial, you will use SQL Developer to create objects for a simplified library database, which will include tables for books, patrons (people who have library cards), and transactions (checking a book out, returning a book, and so on).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Other SQL Developer tutorials, including Oracle By Example (OBE) lessons, are available from the Start Page. If the tab for that page is not visible, click <span class="bold">Help</span>, then <span class="bold">Start Page</span>.</div>
<p>The tables are deliberately oversimplified for this tutorial. They would not be adequate for any actual public or organizational library. For example, this library contains only books (not magazines, journals, or other document formats), and it can contain no more than one copy of any book.</p>
<p>You will perform the following major steps:</p>
<ol>
<li>
<p><a href="#CBAHGHGF">Create a Table (BOOKS)</a>.</p>
</li>
<li>
<p><a href="#CBAGDDHE">Create a Table (PATRONS)</a>.</p>
</li>
<li>
<p><a href="#CBAEJHJA">Create a Table (TRANSACTIONS)</a>.</p>
</li>
<li>
<p><a href="#CBAJGFHF">Create a Sequence</a>.</p>
</li>
<li>
<p><a href="#CBAFGJBF">Insert Data into the Tables</a>.</p>
</li>
<li>
<p><a href="#CBACFDCH">Create a View</a>.</p>
</li>
<li>
<p><a href="#CBACEAIJ">Create a PL/SQL Procedure</a>.</p>
</li>
<li>
<p><a href="#CBACAEJG">Debug a PL/SQL Procedure</a> (optional).</p>
</li>
<li>
<p><a href="#CBADBDJF">Use the SQL Worksheet for Queries</a> (optional).</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
To delete the objects that you create for this tutorial, you can use the DROP statements at the beginning of the script in <a href="#CBACFFHI">Section 4.10, &#34;Script for Creating and Using the Library Tutorial Objects&#34;</a>.</div>
<p class="subhead2"><a id="RPTUG41551"></a>Related Topics</p>
<p><a href="#CBACFFHI">Section 4.10, &#34;Script for Creating and Using the Library Tutorial Objects&#34;</a></p>
<p><a href="intro.htm#CHDFGBED">Chapter 1, &#34;SQL Developer Concepts and Usage&#34;</a></p>
<p><a href="intro.htm#BHAHIFGB">Section 1.2, &#34;SQL Developer User Interface&#34;</a></p>
<p><a href="intro.htm#BHAJFCIJ">Section 1.3, &#34;Database Objects&#34;</a></p>
<a id="CBAHGHGF"></a>
<div id="RPTUG20100" class="sect1">
<h2 class="sect1"><span class="secnum">4.1</span> Create a Table (BOOKS)</h2>
<p>The BOOKS table contains a row for each book in the library. It includes columns of character and number types, a primary key, a unique constraint, and a check constraint. You will use the Create Table dialog box to create the table declaratively; the table that you create will be essentially the same as if you had entered the following statement using the SQL Worksheet:</p>
<pre>CREATE TABLE books (
   book_id VARCHAR2(20),
   title VARCHAR2(50)
      CONSTRAINT title_not_null NOT NULL,
   author_last_name VARCHAR2(30)
      CONSTRAINT last_name_not_null NOT NULL,
   author_first_name VARCHAR2(30),
   rating NUMBER,
   CONSTRAINT books_pk PRIMARY KEY (book_id),
   CONSTRAINT rating_1_to_10 CHECK (rating IS NULL OR
      (rating &gt;= 1 and rating &lt;= 10)),
   CONSTRAINT author_title_unique UNIQUE (author_last_name, title));
</pre>
<p>To create the BOOKS table, connect to the database as the user in the schema you want to use for this tutorial. Right-click the Tables node in the schema hierarchy on the left side, select <span class="bold">New Table</span>, and enter the following information. (If a tab or field is not mentioned, do not enter anything for it. Be sure that the Advanced box is not checked when you start creating the table.)</p>
<p>For detailed information about the table dialog box and its tabs, see <a href="dialogs.htm#BACCAEJI">Section 5.53, &#34;Create Table (quick creation)&#34;</a> and <a href="dialogs.htm#BACGJDDB">Section 5.54, &#34;Create/Edit Table (with advanced options)&#34;</a>.</p>
<p><span class="bold">Schema</span>: Specify your current schema as the schema in which to create the table.</p>
<p><span class="bold">Name</span>: BOOKS</p>
<p>Create the table columns using the following information. After creating each column except the last one (rating), click <span class="bold">Add Column</span> to add the next column. (If you accidentally click OK instead of Add Column, right-click the BOOKS table in the Connections navigator display, select Edit, and continue to add columns.)</p>
<div class="inftblinformal">
<table class="cellalignment326" title="Information for the columns in the table" summary="Information for the columns in the table" dir="ltr">
<thead>
<tr class="cellalignment317">
<th class="cellalignment324" id="r1c1-t4">Column Name</th>
<th class="cellalignment324" id="r1c2-t4">Type</th>
<th class="cellalignment324" id="r1c3-t4">Size</th>
<th class="cellalignment324" id="r1c4-t4">Other Information and Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment317">
<td class="cellalignment325" id="r2c1-t4" headers="r1c1-t4">book_id</td>
<td class="cellalignment325" headers="r2c1-t4 r1c2-t4">VARCHAR2</td>
<td class="cellalignment325" headers="r2c1-t4 r1c3-t4">20</td>
<td class="cellalignment325" headers="r2c1-t4 r1c4-t4">Primary Key (Automatically checks Not Null; an index is also created on the primary key column. This is the Dewey code or other book identifier.)</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r3c1-t4" headers="r1c1-t4">title</td>
<td class="cellalignment325" headers="r3c1-t4 r1c2-t4">VARCHAR2</td>
<td class="cellalignment325" headers="r3c1-t4 r1c3-t4">50</td>
<td class="cellalignment325" headers="r3c1-t4 r1c4-t4">Not Null</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r4c1-t4" headers="r1c1-t4">author_last_name</td>
<td class="cellalignment325" headers="r4c1-t4 r1c2-t4">VARCHAR2</td>
<td class="cellalignment325" headers="r4c1-t4 r1c3-t4">30</td>
<td class="cellalignment325" headers="r4c1-t4 r1c4-t4">Not Null</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r5c1-t4" headers="r1c1-t4">author_first_name</td>
<td class="cellalignment325" headers="r5c1-t4 r1c2-t4">VARCHAR2</td>
<td class="cellalignment325" headers="r5c1-t4 r1c3-t4">30</td>
<td class="cellalignment325" headers="r5c1-t4 r1c4-t4">&nbsp;</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r6c1-t4" headers="r1c1-t4">rating</td>
<td class="cellalignment325" headers="r6c1-t4 r1c2-t4">NUMBER</td>
<td class="cellalignment325" headers="r6c1-t4 r1c3-t4">&nbsp;</td>
<td class="cellalignment325" headers="r6c1-t4 r1c4-t4">(Librarian&#39;s personal rating of the book, from 1 (poor) to 10 (great))</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>After you have entered the last column (rating), check <span class="bold">Advanced</span> (next to Schema). This displays a pane for more table options. For this table, you will use the Unique Constraints and Check Constraints panes.</p>
<p class="subhead2"><a id="RPTUG41552"></a>Unique Constraints pane</p>
<p>Click <span class="bold">Add</span> to add a unique constraint for the table, namely, that the combination of author_last_name and title must be unique within the table. (This is deliberately oversimplified, since most major libraries will have allow more than one copy of a book in their holdings. Also, the combination of last name and title is not always a &#34;foolproof&#34; check for uniqueness, but it is sufficient for this simple scenario.)</p>
<p><span class="bold">Name</span>: author_title_unique</p>
<p>In <span class="bold">Available Columns</span>, double-click TITLE and then AUTHOR_LAST_NAME to move them to Selected Columns.</p>
<p class="subhead2"><a id="RPTUG41553"></a>Check Constraints pane</p>
<p>Click <span class="bold">Add</span> to add a check constraint for the table, namely, that the rating column value is optional (it can be null), but if a value is specified, it must be a number from 1 through 10. You must enter the condition using SQL syntax that is valid in a CHECK clause (but do not include the CHECK keyword or enclosing parentheses for the entire CHECK clause text).</p>
<p><span class="bold">Name</span>: rating_1_to_10</p>
<p><span class="bold">Condition</span>: rating is null or (rating &gt;= 1 and rating &lt;= 10)</p>
<p>Click <span class="bold">OK</span> to finish creating the table.</p>
<p>Go to <a href="#CBAGDDHE">Section 4.2, &#34;Create a Table (PATRONS)&#34;</a> to create the next table.</p>
</div>
<!-- class="sect1" -->
<a id="CBAGDDHE"></a>
<div id="RPTUG41555" class="sect1">
<h2 class="sect1"><span class="secnum">4.2</span> Create a Table (PATRONS)</h2>
<p>The PATRONS table contains a row for each patron who can check books out of the library (that is, each person who has a library card). It includes an object type (MDSYS.SDO_GEOMETRY) column. You will use the Create Table dialog box to create the table declaratively; the table that you create will be essentially the same as if you had entered the following statement using the SQL Worksheet:</p>
<pre>CREATE TABLE patrons (
   patron_id NUMBER,
   last_name VARCHAR2(30)
      CONSTRAINT patron_last_not_null NOT NULL,
   first_name VARCHAR2(30),
   street_address VARCHAR2(50),
   city_state_zip VARCHAR2(50),
   location MDSYS.SDO_GEOMETRY,
   CONSTRAINT patrons_pk PRIMARY KEY (patron_id));
</pre>
<p>The use of single city_state_zip column for all that information is not good database design; it is done here merely to simplify your work in the tutorial.</p>
<p>The location column (Oracle Spatial geometry representing the patron&#39;s geocoded address) is merely to show the use of a complex (object) type.</p>
<p>To create the PATRONS table, if you are not already connected, connect to the database as the user for the schema you are using for this tutorial. Right-click the Tables node in the schema hierarchy on the left side, select <span class="bold">New Table</span>, and enter the following information. (If a tab or field is not mentioned, do not enter anything for it. Be sure that the Advanced box is not checked when you start creating the table.)</p>
<p><span class="bold">Schema</span>: Specify your current schema as the schema in which to create the table.</p>
<p><span class="bold">Name</span>: PATRONS</p>
<p>Create most of the table columns using the following information. After creating each column except the city_state_zip column, click <span class="bold">Add Column</span> to add the next column. (If you accidentally click OK instead of Add Column, right-click the PATRONS table in the Connections navigator display, select Edit, and continue to add columns.)</p>
<div class="inftblinformal">
<table class="cellalignment326" title="Information for the columns in the table" summary="Information for the columns in the table" dir="ltr">
<thead>
<tr class="cellalignment317">
<th class="cellalignment324" id="r1c1-t5">Column Name</th>
<th class="cellalignment324" id="r1c2-t5">Type</th>
<th class="cellalignment324" id="r1c3-t5">Size</th>
<th class="cellalignment324" id="r1c4-t5">Other Information and Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment317">
<td class="cellalignment325" id="r2c1-t5" headers="r1c1-t5">patron_id</td>
<td class="cellalignment325" headers="r2c1-t5 r1c2-t5">NUMBER</td>
<td class="cellalignment325" headers="r2c1-t5 r1c3-t5">&nbsp;</td>
<td class="cellalignment325" headers="r2c1-t5 r1c4-t5">Primary Key. (Unique patron ID number, with values to be created using a sequence that you will create)</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r3c1-t5" headers="r1c1-t5">last_name</td>
<td class="cellalignment325" headers="r3c1-t5 r1c2-t5">VARCHAR2</td>
<td class="cellalignment325" headers="r3c1-t5 r1c3-t5">30</td>
<td class="cellalignment325" headers="r3c1-t5 r1c4-t5">Not Null</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r4c1-t5" headers="r1c1-t5">first_name</td>
<td class="cellalignment325" headers="r4c1-t5 r1c2-t5">VARCHAR2</td>
<td class="cellalignment325" headers="r4c1-t5 r1c3-t5">30</td>
<td class="cellalignment325" headers="r4c1-t5 r1c4-t5">&nbsp;</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r5c1-t5" headers="r1c1-t5">street_address</td>
<td class="cellalignment325" headers="r5c1-t5 r1c2-t5">VARCHAR2</td>
<td class="cellalignment325" headers="r5c1-t5 r1c3-t5">30</td>
<td class="cellalignment325" headers="r5c1-t5 r1c4-t5">&nbsp;</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r6c1-t5" headers="r1c1-t5">city_state_zip</td>
<td class="cellalignment325" headers="r6c1-t5 r1c2-t5">VARCHAR2</td>
<td class="cellalignment325" headers="r6c1-t5 r1c3-t5">30</td>
<td class="cellalignment325" headers="r6c1-t5 r1c4-t5">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>The last column in the table (location) requires a complex data type, for which you must use the Columns tab with advanced options. Check <span class="bold">Advanced</span> (next to Schema). This displays a pane for selecting more table options.</p>
<p>In the Columns pane, click the city_state_zip column name, and click the Add Column (<span class="bold">+</span>) icon to add the following as the last column in the table.</p>
<div class="inftblinformal">
<table class="cellalignment326" title="Information for the columns in the table" summary="Information for the columns in the table" dir="ltr">
<thead>
<tr class="cellalignment317">
<th class="cellalignment324" id="r1c1-t6">Column Name</th>
<th class="cellalignment324" id="r1c2-t6">Type</th>
<th class="cellalignment324" id="r1c3-t6">Other Information and Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment317">
<td class="cellalignment325" id="r2c1-t6" headers="r1c1-t6">location</td>
<td class="cellalignment325" headers="r2c1-t6 r1c2-t6">Complex type
<p>Schema: MDSYS</p>
<p>Type: SDO_GEOMETRY</p>
</td>
<td class="cellalignment325" headers="r2c1-t6 r1c3-t6">(Oracle Spatial geometry object representing the patron&#39;s geocoded address)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>After you have entered the last column (location), click <span class="bold">OK</span> to finish creating the table.</p>
<p>Go to <a href="#CBAEJHJA">Section 4.3, &#34;Create a Table (TRANSACTIONS)&#34;</a> to create the next table.</p>
</div>
<!-- class="sect1" -->
<a id="CBAEJHJA"></a>
<div id="RPTUG41557" class="sect1">
<h2 class="sect1"><span class="secnum">4.3</span> Create a Table (TRANSACTIONS)</h2>
<p>The TRANSACTIONS table contains a row for each transaction involving a patron and a book (for example, someone checking a book out or returning a book). It includes two foreign key columns. You will use the Create Table dialog box to create the table declaratively; the table that you create will be essentially the same as if you had entered the following statement using the SQL Worksheet:</p>
<pre>CREATE TABLE transactions (
   transaction_id NUMBER,
   patron_id CONSTRAINT for_key_patron_id
      REFERENCES patrons(patron_id),
   book_id CONSTRAINT for_key_book_id
      REFERENCES books(book_id),
   transaction_date DATE
      CONSTRAINT tran_date_not_null NOT NULL,
   transaction_type NUMBER
      CONSTRAINT tran_type_not_null NOT NULL,
   CONSTRAINT transactions_pk PRIMARY KEY (transaction_id));
</pre>
<p>To create the TRANSACTIONS table, if you are not already connected, connect to the database as the user for the schema you are using for this tutorial. Right-click the Tables node in the schema hierarchy on the left side, select <span class="bold">New Table</span>, and enter the following information. (If a tab or field is not mentioned, do not enter anything for it. Be sure that the Advanced box is not checked when you start creating the table.)</p>
<p><span class="bold">Schema</span>: Specify your current schema as the schema in which to create the table.</p>
<p><span class="bold">Name</span>: TRANSACTIONS</p>
<p>Create the table columns using the following information. After creating each column except the last one (transaction_type), click <span class="bold">Add Column</span> to add the next column. (If you accidentally click OK instead of Add Column, right-click the TRANSACTIONS table in the Connections navigator display, select Edit, and continue to add columns.)</p>
<div class="inftblinformal">
<table class="cellalignment326" title="Information for the columns in the table" summary="Information for the columns in the table" dir="ltr">
<thead>
<tr class="cellalignment317">
<th class="cellalignment324" id="r1c1-t7">Column Name</th>
<th class="cellalignment324" id="r1c2-t7">Type</th>
<th class="cellalignment324" id="r1c3-t7">Size</th>
<th class="cellalignment324" id="r1c4-t7">Other Information and Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment317">
<td class="cellalignment325" id="r2c1-t7" headers="r1c1-t7">transaction_id</td>
<td class="cellalignment325" headers="r2c1-t7 r1c2-t7">NUMBER</td>
<td class="cellalignment325" headers="r2c1-t7 r1c3-t7">&nbsp;</td>
<td class="cellalignment325" headers="r2c1-t7 r1c4-t7">Primary Key. (Unique transaction ID number, with values to be created using a trigger and sequence that will be created automatically)</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r3c1-t7" headers="r1c1-t7">patron_id</td>
<td class="cellalignment325" headers="r3c1-t7 r1c2-t7">NUMBER</td>
<td class="cellalignment325" headers="r3c1-t7 r1c3-t7">&nbsp;</td>
<td class="cellalignment325" headers="r3c1-t7 r1c4-t7">(Foreign key; must match a patron_id value in the PATRONS table)</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r4c1-t7" headers="r1c1-t7">book_id</td>
<td class="cellalignment325" headers="r4c1-t7 r1c2-t7">VARCHAR2</td>
<td class="cellalignment325" headers="r4c1-t7 r1c3-t7">20</td>
<td class="cellalignment325" headers="r4c1-t7 r1c4-t7">(Foreign key; must match a book_id value in the BOOKS table)</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r5c1-t7" headers="r1c1-t7">transaction_date</td>
<td class="cellalignment325" headers="r5c1-t7 r1c2-t7">DATE</td>
<td class="cellalignment325" headers="r5c1-t7 r1c3-t7">&nbsp;</td>
<td class="cellalignment325" headers="r5c1-t7 r1c4-t7">(Date and time of the transaction)</td>
</tr>
<tr class="cellalignment317">
<td class="cellalignment325" id="r6c1-t7" headers="r1c1-t7">transaction_type</td>
<td class="cellalignment325" headers="r6c1-t7 r1c2-t7">NUMBER</td>
<td class="cellalignment325" headers="r6c1-t7 r1c3-t7">&nbsp;</td>
<td class="cellalignment325" headers="r6c1-t7 r1c4-t7">(Numeric code indicating the type of transaction, such as 1 for checking out a book)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>After you have entered the last column (transaction_type), check <span class="bold">Advanced</span> (next to Schema). This displays a pane for selecting more table options. For this table, you will use the Column Sequences and Foreign Keys panes.</p>
<p class="subhead2"><a id="RPTUG41558"></a>Column Sequences pane</p>
<p>You have already specified TRANSACTION_ID as the primary key, and you will use this pane only to specify that the primary key column values are to be populated automatically. This convenient approach uses a trigger and a sequence (both created automatically by SQL Developer), and ensures that each transaction ID value is unique.</p>
<p><span class="bold">Column</span>: TRANSACTION_ID</p>
<p><span class="bold">Sequence</span>: New Sequence</p>
<p><span class="bold">Trigger</span>: TRANSACTIONS_TRG (The default; a before-insert trigger with this name will be created automatically.)</p>
<p class="subhead2"><a id="RPTUG41559"></a>Foreign Keys tab</p>
<p>1. Click <span class="bold">Add</span> to create the first of the two foreign keys for the TRANSACTIONS table.</p>
<p><span class="bold">Name</span>: for_key_patron_id</p>
<p><span class="bold">Referenced Schema</span>: Name of the schema containing the table with the primary key or unique constraint to which this foreign key refers. Use the schema you have been using for this tutorial.</p>
<p><span class="bold">Referenced Table</span>: PATRONS</p>
<p><span class="bold">Referenced Constraint</span>: PATRONS_PK (The name of the primary key constraint for the PATRONS table. Be sure that the <span class="bold">Referenced Column on PATRONS</span> displayed value is PATRON_ID.)</p>
<p><span class="bold">Associations: Local Column</span>: PATRON_ID</p>
<p><span class="bold">Associations: Referenced Column on PATRONS</span>: PATRON_ID</p>
<p>2. Click <span class="bold">Add</span> to create the second of the two foreign keys for the TRANSACTIONS table.</p>
<p><span class="bold">Name</span>: for_key_book_id</p>
<p><span class="bold">Referenced Schema</span>: Name of the schema containing the table with the primary key or unique constraint to which this foreign key refers. Use the schema you have been using for this tutorial.</p>
<p><span class="bold">Referenced Table</span>: BOOKS</p>
<p><span class="bold">Referenced Constraint</span>: BOOKS_PK (The name of the primary key constraint for the BOOKS table. Be sure that the <span class="bold">Referenced Column on BOOKS</span> displayed value is BOOK_ID.</p>
<p><span class="bold">Associations: Local Column</span>: BOOK_ID</p>
<p><span class="bold">Associations: Referenced Column on BOOKS</span>: BOOK_ID</p>
<p>3. Click <span class="bold">OK</span> to finish creating the table.</p>
<p>You have finished creating all the tables. To create a sequence for use in generating unique primary key values for the PATRONS table, go to <a href="#CBAJGFHF">Section 4.4, &#34;Create a Sequence&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CBAJGFHF"></a>
<div id="RPTUG20400" class="sect1">
<h2 class="sect1"><span class="secnum">4.4</span> Create a Sequence</h2>
<p>Create one sequence object, which will be used in INSERT statements to generate unique primary key values in the PATRONS table. (You do not need to create a sequence for the primary key in the TRANSACTIONS table, because you used the SQL Developer feature that enables automatic population of primary key values for that table.) You will use the Create Sequence dialog box to create the sequence declaratively; the sequence that you create will be essentially the same as if you had entered the following statements using the SQL Worksheet:</p>
<pre>CREATE SEQUENCE patron_id_seq 
   START WITH 100
   INCREMENT BY 1;
</pre>
<p>After creating the sequence, you can use it in INSERT statements to generate unique numeric values. The following example uses the patron_id_seq sequence in creating a row for a new patron (library user), assigning her a patron ID that is the next available value of the patron_id_seq sequence:</p>
<pre>INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Smith&#39;, &#39;Jane&#39;, &#39;123 Main Street&#39;, &#39;Mytown, MA 01234&#39;, null);
</pre>
<p>To create the sequence, if you are not already connected, connect to the database as the user for the schema you are using for this tutorial. Right-click the Sequences node in the schema hierarchy on the left side, select <span class="bold">New Sequence</span>, and enter information using the Create Sequence dialog box.</p>
<p><span class="bold">Schema</span>: Specify your current schema as the schema in which to create the sequence.</p>
<p><span class="bold">Name</span>: patron_id_seq</p>
<p><span class="bold">Increment</span>: 1</p>
<p><span class="bold">Start wit</span><span class="bold">h</span>: 100</p>
<p><span class="bold">Min value</span>: 100</p>
<p>Click <span class="bold">OK</span> to finish creating the sequence.</p>
<p>To insert sample data into the tables, go to <a href="#CBAFGJBF">Section 4.5, &#34;Insert Data into the Tables&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CBAFGJBF"></a>
<div id="RPTUG41562" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.5</span> Insert Data into the Tables</h2>
<p>For your convenience in using the view and the PL/SQL procedure that you will create, add some sample data to the BOOKS, PATRONS, and TRANSACTIONS tables. (If you do not add sample data, you can still create the remaining objects in this tutorial, but the view and the procedure will not return any results.)</p>
<p>Go to the SQL Worksheet window associated with the database connection you have been using. (For information about using the SQL Worksheet, see <a href="intro.htm#CHDDHAAI">Section 1.7, &#34;Using the SQL Worksheet&#34;</a>.) Copy and paste the following INSERT statements into the <span class="bold">Enter SQL Statement</span> box:</p>
<pre>INSERT INTO books VALUES (&#39;A1111&#39;, &#39;Moby Dick&#39;, &#39;Melville&#39;, &#39;Herman&#39;, 10);
INSERT INTO books VALUES (&#39;A2222&#39;, &#39;Get Rich Really Fast&#39;, &#39;Scammer&#39;, &#39;Ima&#39;, 1);
INSERT INTO books VALUES (&#39;A3333&#39;, &#39;Finding Inner Peace&#39;, &#39;Blissford&#39;, &#39;Serenity&#39;, null);
INSERT INTO books VALUES (&#39;A4444&#39;, &#39;Great Mystery Stories&#39;, &#39;Whodunit&#39;, &#39;Rodney&#39;, 5);
INSERT INTO books VALUES (&#39;A5555&#39;, &#39;Software Wizardry&#39;, &#39;Abugov&#39;, &#39;D.&#39;, 10);
 
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Smith&#39;, &#39;Jane&#39;, &#39;123 Main Street&#39;, &#39;Mytown, MA 01234&#39;, null);
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Chen&#39;, &#39;William&#39;, &#39;16 S. Maple Road&#39;, &#39;Mytown, MA 01234&#39;, null);
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Fernandez&#39;, &#39;Maria&#39;, &#39;502 Harrison Blvd.&#39;, &#39;Sometown, NH 03078&#39;, null);
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Murphy&#39;, &#39;Sam&#39;, &#39;57 Main Street&#39;, &#39;Mytown, MA 01234&#39;, null);
 
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (100, &#39;A1111&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (100, &#39;A2222&#39;, SYSDATE, 2);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (101, &#39;A3333&#39;, SYSDATE, 3);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (101, &#39;A2222&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (102, &#39;A3333&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (103, &#39;A4444&#39;, SYSDATE, 2);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (100, &#39;A4444&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (102, &#39;A2222&#39;, SYSDATE, 2);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (102, &#39;A5555&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (101, &#39;A2222&#39;, SYSDATE, 1);
</pre>
<p>Click the Run Script icon, or press the F5 key.</p>
<p>To create a view, go to <a href="#CBACFDCH">Section 4.6, &#34;Create a View&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CBACFDCH"></a>
<div id="RPTUG20500" class="sect1">
<h2 class="sect1"><span class="secnum">4.6</span> Create a View</h2>
<p>Create a view that returns information about patrons and their transactions. This view queries the PATRONS and TRANSACTIONS tables, and returns rows that contain a patron&#39;s ID, last name, and first name, along with a transaction and the transaction type. The rows are ordered by patron ID, and by transaction type within patron IDs.</p>
<p>To create the patrons_trans_view view, if you are not already connected, connect to the database as the user for the schema you are using for this tutorial. Right-click the Views node in the schema hierarchy on the left side, select <span class="bold">New View</span>, and enter the following information. (If a tab or field is not mentioned, do not enter anything for it.)</p>
<p><span class="bold">Schema</span>: Specify your current schema as the schema in which to create the view.</p>
<p><span class="bold">Name</span>: patrons_trans_view</p>
<p class="subhead2"><a id="RPTUG41564"></a>SQL Query tab</p>
<p>In the SQL Query box, enter (or copy and paste) the following statement:</p>
<pre>SELECT p.patron_id,
       p.last_name,
       p.first_name,
       t.transaction_type,
       t.transaction_date
  FROM patrons p, transactions t
 WHERE p.patron_id = t.patron_id
 ORDER BY p.patron_id, t.transaction_type
</pre>
<p>Then click <span class="bold">Test Syntax,</span> and ensure that you have not made any syntax errors. If you made any errors, correct then and click Test Syntax again.</p>
<p class="subhead2"><a id="RPTUG41565"></a>DDL</p>
<p>Review the SQL statement that SQL Developer will use to create the view. If you want to make any changes, go back to the SQL Query tab and make the changes there.</p>
<p>If you want to save the CREATE VIEW statement to a SQL script file, click <span class="bold">Save</span> and specify the location and file name.</p>
<p>When you are finished, click <span class="bold">OK</span>.</p>
<p>You have finished creating the view. If you inserted data to the underlying tables, as described in <a href="#CBAFGJBF">Section 4.5, &#34;Insert Data into the Tables&#34;</a>, you can see the data returned by this view as follows: in the Connections navigator, expand Views, and select PATRONS_TRANS_VIEW, then click the Data tab.</p>
<p>To create a procedure that lists all books with a specified rating, go to <a href="#CBACEAIJ">Section 4.7, &#34;Create a PL/SQL Procedure&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CBACEAIJ"></a>
<div id="RPTUG20600" class="sect1">
<h2 class="sect1"><span class="secnum">4.7</span> Create a PL/SQL Procedure</h2>
<p>Create a procedure that lists all books with a specified rating. You can then call this procedure with an input parameter (a number from 1 to 10), and the output will be all the titles of all books with that rating.</p>
<p>To create the procedure, if you are not already connected, connect to the database as the user for the schema you are using for this tutorial. Right-click the Procedures node in the schema hierarchy on the left side, select <span class="bold">New Procedure</span>, and enter the following information using the Create PL/SQL Procedure dialog box.</p>
<p><span class="bold">Object Name</span>: list_a_rating</p>
<p>Click <span class="bold">OK</span>. A source window for the new procedure is opened. Enter (or copy and paste) the following procedure text, replacing any existing text:</p>
<pre>CREATE OR REPLACE
PROCEDURE list_a_rating(in_rating IN NUMBER) AS
  matching_title VARCHAR2(50);
  TYPE my_cursor IS REF CURSOR;
  the_cursor my_cursor;
BEGIN
  OPEN the_cursor
    FOR &#39;SELECT title 
           FROM books 
          WHERE rating = :in_rating&#39;
    USING in_rating;
  DBMS_OUTPUT.PUT_LINE(&#39;All books with a rating of &#39; || in_rating || &#39;:&#39;);
  LOOP
    FETCH the_cursor INTO matching_title;
    EXIT WHEN the_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(matching_title);
  END LOOP;
  CLOSE the_cursor;
END list_a_rating;
</pre>
<p>This procedure uses a cursor (named the_cursor) to return only rows where the book has the specified rating (in_rating parameter), and uses a loop to output the title of each book with that rating.</p>
<p>Click the Save icon to save the procedure.</p>
<p>As a usage example, after creating the procedure named LIST_A_RATING, if you have inserted data into the BOOKS table (for example, using the INSERT statements in <a href="#CBAFGJBF">Section 4.5, &#34;Insert Data into the Tables&#34;</a>), you could use the following statement to return all books with a rating of 10:</p>
<pre>CALL list_a_rating(10);
</pre>
<p>To run this procedure within SQL Developer, right-click LIST_A_RATING in the Connections navigator hierarchy display and select <span class="bold">Run</span>. Under <span class="bold">PL/SQL Block</span> in the Run PL/SQL dialog box, change IN_RATING =&gt; IN_RATING to IN_RATING =&gt; <span class="bold">10</span>, and click <span class="bold">OK</span>. The Log window display will now include the following output:</p>
<pre>All books with a rating of 10:                                                  
Moby Dick                                                                       
Software Wizardry
</pre></div>
<!-- class="sect1" -->
<a id="CBACAEJG"></a>
<div id="RPTUG20700" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.8</span> Debug a PL/SQL Procedure</h2>
<p>If you want to practice debugging a PL/SQL procedure with SQL Developer, create a procedure that is like the list_a_rating procedure that you created in <a href="#CBACEAIJ">Section 4.7, &#34;Create a PL/SQL Procedure&#34;</a>, but with a logic error. (The coding is also deliberately inefficient, to allow the display of the rating in a variable.)</p>
<p>Before you can debug the procedure, you must ensure that the user associated with the database connection has the DEBUG CONNECT SESSION and DEBUG ANY PROCEDURE privileges.</p>
<p>To create this procedure, if you are not already connected, connect to the database as the user for the schema you are using for this tutorial. Right-click the Procedures node in the schema hierarchy on the left side, select <span class="bold">New Procedure</span>, and enter the following information using the Create PL/SQL Procedure dialog box.</p>
<p><span class="bold">Object Name</span>: list_a_rating2</p>
<p>Click <span class="bold">OK</span>. A source window for the new procedure is opened. Enter (or copy and paste) the following procedure text, replacing any existing text:</p>
<pre>CREATE OR REPLACE
PROCEDURE  list_a_rating2(in_rating IN NUMBER) AS
  matching_title VARCHAR2(50);
  matching_rating NUMBER;
  TYPE my_cursor IS REF CURSOR;
  the_cursor my_cursor;
  rating_cursor my_cursor;
BEGIN
  OPEN the_cursor 
    FOR &#39;SELECT title 
           FROM books 
          WHERE rating &lt;= :in_rating&#39; 
    USING in_rating;
  OPEN rating_cursor FOR &#39;SELECT rating FROM books WHERE 
    rating &lt;= :in_rating&#39; USING in_rating;
  DBMS_OUTPUT.PUT_LINE(&#39;All books with a rating of &#39; || in_rating || &#39;:&#39;);
  LOOP
    FETCH the_cursor INTO matching_title;
    FETCH rating_cursor INTO matching_rating;
    EXIT WHEN the_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(matching_title);
  END LOOP;
  CLOSE the_cursor;
  CLOSE rating_cursor;
END list_a_rating2;
</pre>
<p>This procedure contains a logic error in the definition of the_cursor: it selects titles where the rating is less than or equal to a specified rating, whereas it should select titles only where the rating is equal to the specified rating.</p>
<p>Click the Save icon to save the procedure.</p>
<p>Assume that you wanted to run this procedure and list all books with a rating of 10. Right-click LIST_A_RATING2 in the Connections navigator hierarchy display and select <span class="bold">Run</span>. Under <span class="bold">PL/SQL Block</span> in the Run PL/SQL dialog box, change, change IN_RATING =&gt; IN_RATING to IN_RATING =&gt; <span class="bold">10</span>, and click <span class="bold">OK</span>. In the Log window, however, you see unexpected output: many titles are listed, including some with ratings other than 10. So, you decide to debug the procedure.</p>
<p>To debug the procedure, follow these steps:</p>
<ol>
<li>
<p>Click the Compile for Debug icon in the toolbar under the LIST_A_RATING2 tab.</p>
</li>
<li>
<p>Set two breakpoints by clicking in the left margin (left of the thin vertical line) beside each of these two lines:</p>
<pre>FETCH the_cursor INTO matching_title;
FETCH rating_cursor INTO matching_rating;
</pre>
<p>Clicking in the left margin toggles the setting and unsetting of breakpoints. Clicking beside these two lines will enable you to see the values of the matching_title and matching_rating variables as execution proceeds in debug mode.</p>
</li>
<li>
<p>Click the Debug icon, and in the Run PL/SQL dialog box change IN_RATING =&gt; IN_RATING to IN_RATING =&gt; <span class="bold">10</span>; then click <span class="bold">OK</span></p>
</li>
<li>
<p>Click <span class="bold">View</span>, then <span class="bold">Debugger</span>, then <span class="bold">Data</span> to display the Data pane. (Tip: Expand the Name column width so that you can see MATCHING_RATING.)</p>
</li>
<li>
<p>Press the <span class="bold">F9</span> key (or click <span class="bold">Debug</span>, then <span class="bold">Resume</span>) to have execution proceed, stopping at the next breakpoint.</p>
</li>
<li>
<p>Repeatedly press the <span class="bold">F9</span> key (or click <span class="bold">Debug</span>, then <span class="bold">Resume</span>), noticing especially the value of MATCHING_RATING as each row is processed. You will notice the first incorrect result when you see that the title <span class="italic">Get Rich Really Fast</span> is included, even though its rating is only 1 (obviously less than 10). (See the screen illustration with debugging information in <a href="intro.htm#CHDGIGHA">Section 1.6, &#34;Running and Debugging Functions and Procedures&#34;</a>.)</p>
</li>
<li>
<p>When you have enough information to fix the problem, you can click the Terminate icon in the debugging toolbar.</p>
</li>
</ol>
<p>From this debugging session, you know that to fix the logic error, you should change <code>rating &lt;= :in_rating</code> to <code>rating = :in_rating</code> in the definition of the_cursor.</p>
</div>
<!-- class="sect1" -->
<a id="CBADBDJF"></a>
<div id="RPTUG20800" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.9</span> Use the SQL Worksheet for Queries</h2>
<p>You can use the SQL Worksheet to test SQL statements using a database connection. To display the worksheet, from the <span class="bold">Tools</span> menu, select <span class="bold">SQL Worksheet</span>. In the Select Connection dialog box, select the database connection that you used to create the BOOKS, PATRONS, and TRANSACTIONS tables for the tutorial in <a href="#CBAHDFAF">Chapter 4, &#34;SQL Developer Tutorial: Creating Objects for a Small Database&#34;</a>.</p>
<p>The SQL Worksheet has the user interface shown in <a href="intro.htm#CHDDHAAI">Section 1.7, &#34;Using the SQL Worksheet&#34;</a>.</p>
<p>In the <span class="bold">Enter SQL Statement</span> box, enter the following statement (the semicolon is optional for the SQL Worksheet):</p>
<pre>SELECT author_last_name, title FROM books;
</pre>
<p>Notice the automatic highlighting of SQL keywords (SELECT and FROM in this example).</p>
<p>Click the Execute SQL Statement icon in the SQL Worksheet toolbar. The results of the query are displayed on the <span class="bold">Results</span> tab under the area in which you entered the SQL statement.</p>
<p>In the <span class="bold">Enter SQL Statement</span> box, enter (or copy and paste) the following statement, which is the same as the SELECT statement in the view you created in <a href="#CBACFDCH">Create a View</a>:</p>
<pre>SELECT p.patron_id,
       p.last_name,
       p.first_name,
       t.transaction_type,
       t.transaction_date
  FROM patrons p, transactions t
 WHERE p.patron_id = t.patron_id
 ORDER BY p.patron_id, t.transaction_type;
</pre>
<p>Click the Execute SQL Statement icon in the SQL Worksheet toolbar, and view the results of the query.</p>
<p>Click the Execute Explain Plan icon in the SQL Worksheet toolbar to see the execution plan (displayed on the Explain tab) that Oracle Database follows to execute the SQL statement. The information includes the optimizer strategy and the cost of executing the statement. (For information about how to generate and interpret execution plans, see <a class="olink TGSQL271" href="../TGSQL/tgsql_genplan.htm#TGSQL271"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.)</p>
</div>
<!-- class="sect1" -->
<a id="CBACFFHI"></a>
<div id="RPTUG20900" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.10</span> Script for Creating and Using the Library Tutorial Objects</h2>
<p>The following statements create and use the database objects that you have created (or will create) for the tutorial in <a href="#CBAHDFAF">Chapter 4, &#34;SQL Developer Tutorial: Creating Objects for a Small Database&#34;</a>. You can view these commands to help you understand the library database objects that are covered in the tutorial.</p>
<pre>-- Clean up from any previous tutorial actions.
DROP TABLE transactions;
DROP TABLE books;
DROP TABLE patrons;
DROP SEQUENCE patron_id_seq;
DROP SEQUENCE transactions_seq;
DROP TRIGGER transactions_trg;
DROP VIEW patrons_trans_view;
DROP PROCEDURE list_a_rating;
DROP PROCEDURE list_a_rating2;
 
set serveroutput on
 
-- Create objects.
 
CREATE TABLE books (
   book_id VARCHAR2(20),
   title VARCHAR2(50)
      CONSTRAINT title_not_null NOT NULL,
   author_last_name VARCHAR2(30)
      CONSTRAINT last_name_not_null NOT NULL,
   author_first_name VARCHAR2(30),
   rating NUMBER,
   CONSTRAINT books_pk PRIMARY KEY (book_id),
   CONSTRAINT rating_1_to_10 CHECK (rating IS NULL OR
      (rating &gt;= 1 and rating &lt;= 10)),
   CONSTRAINT author_title_unique UNIQUE (author_last_name, title));
 
CREATE TABLE patrons (
   patron_id NUMBER,
   last_name VARCHAR2(30)
      CONSTRAINT patron_last_not_null NOT NULL,
   first_name VARCHAR2(30),
   street_address VARCHAR2(50),
   city_state_zip VARCHAR2(50),
   location MDSYS.SDO_GEOMETRY,
   CONSTRAINT patrons_pk PRIMARY KEY (patron_id));
 
CREATE TABLE transactions (
   transaction_id NUMBER,
   patron_id CONSTRAINT for_key_patron_id
      REFERENCES patrons(patron_id),
   book_id CONSTRAINT for_key_book_id
      REFERENCES books(book_id),
   transaction_date DATE
      CONSTRAINT tran_date_not_null NOT NULL,
   transaction_type NUMBER
      CONSTRAINT tran_type_not_null NOT NULL,
   CONSTRAINT transactions_pk PRIMARY KEY (transaction_id));
 
CREATE SEQUENCE patron_id_seq 
   START WITH 100
   INCREMENT BY 1;
 
-- The sequence for the transaction_id 
-- in the tutorial is created automatically,
-- and may have the name TRANSACTIONS_SEQ.
CREATE SEQUENCE transactions_seq 
   START WITH 1
   INCREMENT BY 1;
 
-- The before-insert trigger for transaction ID values
-- in the tutorial is created automatically,
-- and may have the name TRANSACTIONS_TRG.
CREATE OR REPLACE TRIGGER transactions_trg
   BEFORE INSERT ON TRANSACTIONS 
  FOR EACH ROW 
  BEGIN
    SELECT TRANSACTIONS_SEQ.NEXTVAL INTO :NEW.TRANSACTION_ID FROM DUAL;
  END;
/
 
CREATE VIEW patrons_trans_view AS
  SELECT p.patron_id,
         p.last_name,
         p.first_name,
         t.transaction_type,
         t.transaction_date
    FROM patrons p, transactions t
   WHERE p.patron_id = t.patron_id
   ORDER BY p.patron_id, t.transaction_type;
 
-- Procedure: List all books that have a specified rating.
CREATE OR REPLACE PROCEDURE list_a_rating(in_rating IN NUMBER) AS
  matching_title VARCHAR2(50);
  TYPE my_cursor IS REF CURSOR;
  the_cursor my_cursor;
BEGIN
  OPEN the_cursor
    FOR &#39;SELECT title 
           FROM books 
          WHERE rating = :in_rating&#39;
    USING in_rating;
  DBMS_OUTPUT.PUT_LINE(&#39;All books with a rating of &#39; || in_rating || &#39;:&#39;);
  LOOP
    FETCH the_cursor INTO matching_title;
    EXIT WHEN the_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(matching_title);
  END LOOP;
  CLOSE the_cursor;
END;
/
show errors;
 
-- Insert and query data.
 
INSERT INTO books VALUES (&#39;A1111&#39;, &#39;Moby Dick&#39;, &#39;Melville&#39;, &#39;Herman&#39;, 10);
INSERT INTO books VALUES (&#39;A2222&#39;, &#39;Get Rich Really Fast&#39;, &#39;Scammer&#39;, &#39;Ima&#39;, 1);
INSERT INTO books VALUES (&#39;A3333&#39;, &#39;Finding Inner Peace&#39;, &#39;Blissford&#39;, &#39;Serenity&#39;, null);
INSERT INTO books VALUES (&#39;A4444&#39;, &#39;Great Mystery Stories&#39;, &#39;Whodunit&#39;, &#39;Rodney&#39;, 5);
INSERT INTO books VALUES (&#39;A5555&#39;, &#39;Software Wizardry&#39;, &#39;Abugov&#39;, &#39;D.&#39;, 10);
 
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Smith&#39;, &#39;Jane&#39;, &#39;123 Main Street&#39;, &#39;Mytown, MA 01234&#39;, null);
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Chen&#39;, &#39;William&#39;, &#39;16 S. Maple Road&#39;, &#39;Mytown, MA 01234&#39;, null);
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Fernandez&#39;, &#39;Maria&#39;, &#39;502 Harrison Blvd.&#39;, &#39;Sometown, NH 03078&#39;, null);
INSERT INTO patrons VALUES  (patron_id_seq.nextval, 
   &#39;Murphy&#39;, &#39;Sam&#39;, &#39;57 Main Street&#39;, &#39;Mytown, MA 01234&#39;, null);
 
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (100, &#39;A1111&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (100, &#39;A2222&#39;, SYSDATE, 2);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (101, &#39;A3333&#39;, SYSDATE, 3);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (101, &#39;A2222&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (102, &#39;A3333&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (103, &#39;A4444&#39;, SYSDATE, 2);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (100, &#39;A4444&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (102, &#39;A2222&#39;, SYSDATE, 2);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (102, &#39;A5555&#39;, SYSDATE, 1);
INSERT INTO transactions (patron_id, book_id, 
  transaction_date, transaction_type) 
  VALUES (101, &#39;A2222&#39;, SYSDATE, 1);
 
-- Test the view and the procedure.
SELECT * FROM patrons_trans_view;
CALL list_a_rating(10);
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment316">
<tr>
<td class="cellalignment325">
<table class="cellalignment321">
<tr>
<td class="cellalignment320"><a href="unit_testing.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment320"><a href="dialogs.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment328">
<table class="cellalignment319">
<tr>
<td class="cellalignment320"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment320"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment320"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment320"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment320"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment320"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>