<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-78025"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Embedded%20SQL%20Statements%20and%20Directives"></a><title>Embedded SQL Statements and Directives</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-10T8:50:56Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Pro*C/C++ Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53432-01"/>
<meta name="dcterms.isVersionOf" content="LNPCC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="pc_aeops.htm" title="Previous" type="text/html"/>
<link rel="Next" href="pc_agsmp.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53432-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">32/35</span> <!-- End Header -->
<div id="LNPCC020" class="appendix"><a id="CHEJCBII"></a>
<h1 class="appendix"><span class="secnum">E</span> Embedded SQL Statements and Directives</h1>
<p>This appendix contains descriptions of both the SQL standard embedded statements and directives, as well as the Oracle embedded SQL extensions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only statements which differ in syntax from non-embedded SQL are described in this appendix. For details of the non-embedded SQL statements, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></div>
<p>This appendix contains the following topics:</p>
<ul>
<li>
<p><a href="#CHECEDBC">Summary of Precompiler Directives and Embedded SQL Statements</a></p>
</li>
<li>
<p><a href="#CHECJAGI">About The Statement Descriptions</a></p>
</li>
<li>
<p><a href="#CHEIIADA">How to Read Syntax Diagrams</a></p>
</li>
<li>
<p><a href="#CHEHGEEG">ALLOCATE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEJEJEE">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEBFJIE">CACHE FREE ALL (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEGGGJH">CALL (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEEIDAB">COLLECTION APPEND (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEBIIGG">COLLECTION DESCRIBE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEGGDJF">COLLECTION GET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIDAIA">COLLECTION RESET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEHEICB">COLLECTION SET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEHJAHI">COLLECTION TRIM (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEICCDA">COMMIT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEIJAAG">CONNECT (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEFHAGC">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIEGBJ">CONTEXT FREE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEDGBJB">CONTEXT OBJECT OPTION GET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIIBDG">CONTEXT OBJECT OPTION SET (Executable Embedded SQL Ext)</a></p>
</li>
<li>
<p><a href="#CHEGADAI">CONTEXT USE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHEDHGBA">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)</a></p>
</li>
<li>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHEIGHDJ">DECLARE STATEMENT (Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHECADIB">DECLARE TABLE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHEFGAGC">DECLARE TYPE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHEFICFE">DELETE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEGJCHH">DESCRIBE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIBEIJ">DESCRIBE DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEBHDCJ">ENABLE THREADS (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEEEJCC">EXECUTE ... END-EXEC (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEJJDHJ">EXECUTE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEJIIFG">EXECUTE DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEGFGJB">EXECUTE IMMEDIATE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEHIJCA">FETCH (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEFHBDF">FETCH DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEBBHBC">FREE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEEAECI">GET DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEDDEJD">INSERT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEHHABH">LOB APPEND (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEEGJDE">LOB ASSIGN (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHECDJED">LOB CLOSE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEICFGI">LOB COPY (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHECFHIF">LOB CREATE TEMPORARY (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEJAHAC">LOB DESCRIBE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEBDHIE">LOB DISABLE BUFFERING (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEDBAJB">LOB ENABLE BUFFERING (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEEAFJC">LOB ERASE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHECBDAC">LOB FILE CLOSE ALL (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEGHBCH">LOB FILE SET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEGEHIJ">LOB FLUSH BUFFER (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEHFEBJ">LOB FREE TEMPORARY (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIFHBF">LOB LOAD (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHECBFJA">LOB OPEN (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEEDFDI">LOB READ (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIBIAE">LOB TRIM (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEGJHED">LOB WRITE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEFICGC">OBJECT CREATE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEJFEEB">OBJECT DELETE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEGAJID">OBJECT DEREF (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHECGEED">OBJECT FLUSH (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIEBDA">OBJECT GET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEBJBFH">OBJECT RELEASE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEIGJGH">OBJECT SET (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEGFHBB">OBJECT UPDATE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEJCGFH">OPEN (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEEIHEJ">OPEN DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEEBGAG">REGISTER CONNECT (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#CHEFAAED">ROLLBACK (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEDHHAI">SAVEPOINT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEDEAIE">SELECT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEGDJGA">SET DESCRIPTOR (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEJAJGB">TYPE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHEGDJBF">UPDATE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#CHEDHEEB">VAR (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#CHEFBAAC">WHENEVER (Embedded SQL Directive)</a></p>
</li>
</ul>
<a id="CHECEDBC"></a>
<div id="LNPCC4604" class="sect1">
<h2 class="sect1">Summary of Precompiler Directives and Embedded SQL Statements<a id="sthref2448"></a></h2>
<p>Embedded SQL statements place DDL, DML, and Transaction Control statements within a Pro*C/C++ program. <a href="#CHEEDIBH">Table E-1</a> provides a functional summary of the embedded SQL statements and directives.</p>
<p>The <span class="italic">Source/Type</span> column in <a href="#CHEGEHGF">Table E-2</a> is displayed in the format:</p>
<div id="LNPCC4605" class="tblformal">
<p class="titleintable"><a id="sthref2449"></a><a id="CHEEDIBH"></a>Table E-1 Functional Summary of the Embedded SQL Statements and Directives</p>
<table class="cellalignment831" title="Functional Summary of the Embedded SQL Statements and Directives" summary="Functional Summary of the Embedded SQL Statements and Directives" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t3">Source/Type</th>
<th class="cellalignment832" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t3" headers="r1c1-t3">
<p>Source</p>
</td>
<td class="cellalignment833" headers="r2c1-t3 r1c2-t3">
<p>Is either standard SQL (S) or an Oracle extension (O).</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t3" headers="r1c1-t3">
<p>Type</p>
</td>
<td class="cellalignment833" headers="r3c1-t3 r1c2-t3">
<p>Is either an executable (E) statement or a directive (D).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNPCC4606" class="tblformalwide">
<p class="titleintable"><a id="sthref2450"></a><a id="CHEGEHGF"></a>Table E-2 Precompiler Directives and Embedded SQL Statements and Clauses</p>
<table class="cellalignment834" title="Precompiler Directives and Embedded SQL Statements and Clauses " summary="Precompiler Directives and Embedded SQL Statements and Clauses" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t4">EXEC SQL Statement</th>
<th class="cellalignment832" id="r1c2-t4">Source/Type</th>
<th class="cellalignment832" id="r1c3-t4">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t4" headers="r1c1-t4">
<p>ALLOCATE</p>
</td>
<td class="cellalignment833" headers="r2c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r2c1-t4 r1c3-t4">
<p>To allocate memory for a cursor variable or an Object type.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t4" headers="r1c1-t4">
<p>ALLOCATE DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r3c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r3c1-t4 r1c3-t4">
<p>Allocate a descriptor for ANSI dynamic SQL.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t4" headers="r1c1-t4">
<p>CACHE FREE ALL</p>
</td>
<td class="cellalignment833" headers="r4c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r4c1-t4 r1c3-t4">
<p>Frees all allocated object cache memory.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t4" headers="r1c1-t4">
<p>CALL</p>
</td>
<td class="cellalignment833" headers="r5c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r5c1-t4 r1c3-t4">
<p>Call a stored procedure.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t4" headers="r1c1-t4">
<p>CLOSE</p>
</td>
<td class="cellalignment833" headers="r6c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r6c1-t4 r1c3-t4">
<p>To disable a cursor, releasing the resources it holds.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t4" headers="r1c1-t4">
<p>COLLECTION APPEND</p>
</td>
<td class="cellalignment833" headers="r7c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r7c1-t4 r1c3-t4">
<p>To append elements of one collection to the end of another collection.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t4" headers="r1c1-t4">
<p>COLLECTION DESCRIBE</p>
</td>
<td class="cellalignment833" headers="r8c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r8c1-t4 r1c3-t4">
<p>To obtain information about a collection.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t4" headers="r1c1-t4">
<p>COLLECTION GET</p>
</td>
<td class="cellalignment833" headers="r9c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r9c1-t4 r1c3-t4">
<p>To retrieve the elements of a collection.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t4" headers="r1c1-t4">
<p>COLLECTION RESET</p>
</td>
<td class="cellalignment833" headers="r10c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r10c1-t4 r1c3-t4">
<p>To reset the collection slice endpoints back to the beginning of the collection.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t4" headers="r1c1-t4">
<p>COLLECTION SET</p>
</td>
<td class="cellalignment833" headers="r11c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r11c1-t4 r1c3-t4">
<p>To update values of a collection.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t4" headers="r1c1-t4">
<p>COLLECTION TRIM</p>
</td>
<td class="cellalignment833" headers="r12c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r12c1-t4 r1c3-t4">
<p>To remove elements from the end of a collection.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r13c1-t4" headers="r1c1-t4">
<p>COMMIT</p>
</td>
<td class="cellalignment833" headers="r13c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r13c1-t4 r1c3-t4">
<p>To end the current transaction, making all database change permanent (optionally frees resources and disconnects from the database)</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r14c1-t4" headers="r1c1-t4">
<p>CONNECT</p>
</td>
<td class="cellalignment833" headers="r14c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r14c1-t4 r1c3-t4">
<p>To log on to an instance.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r15c1-t4" headers="r1c1-t4">
<p>CONTEXT ALLOCATE</p>
</td>
<td class="cellalignment833" headers="r15c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r15c1-t4 r1c3-t4">
<p>To allocate memory for a SQLLIB runtime context.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r16c1-t4" headers="r1c1-t4">
<p>CONTEXT FREE</p>
</td>
<td class="cellalignment833" headers="r16c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r16c1-t4 r1c3-t4">
<p>To free memory for a SQLLIB runtime context.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r17c1-t4" headers="r1c1-t4">
<p>CONTEXT OBJECT OPTION GET</p>
</td>
<td class="cellalignment833" headers="r17c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r17c1-t4 r1c3-t4">
<p>To determine how options are set.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r18c1-t4" headers="r1c1-t4">
<p>CONTEXT OBJECT OPTION SET</p>
</td>
<td class="cellalignment833" headers="r18c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r18c1-t4 r1c3-t4">
<p>To set options.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r19c1-t4" headers="r1c1-t4">
<p>CONTEXT USE</p>
</td>
<td class="cellalignment833" headers="r19c1-t4 r1c2-t4">
<p>O/D</p>
</td>
<td class="cellalignment833" headers="r19c1-t4 r1c3-t4">
<p>To specify which SQLLIB runtime context to use for subsequent executable SQL statements.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r20c1-t4" headers="r1c1-t4">
<p>DEALLOCATE DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r20c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r20c1-t4 r1c3-t4">
<p>To deallocate a descriptor area to free memory.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r21c1-t4" headers="r1c1-t4">
<p>DECLARE CURSOR</p>
</td>
<td class="cellalignment833" headers="r21c1-t4 r1c2-t4">
<p>S/D</p>
</td>
<td class="cellalignment833" headers="r21c1-t4 r1c3-t4">
<p>To declare a cursor, associating it with a query.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r22c1-t4" headers="r1c1-t4">
<p>DECLARE DATABASE</p>
</td>
<td class="cellalignment833" headers="r22c1-t4 r1c2-t4">
<p>O/D</p>
</td>
<td class="cellalignment833" headers="r22c1-t4 r1c3-t4">
<p>To declare an identifier for a nondefault database to be accessed in subsequent embedded SQL statements.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r23c1-t4" headers="r1c1-t4">
<p>DECLARE STATEMENT</p>
</td>
<td class="cellalignment833" headers="r23c1-t4 r1c2-t4">
<p>S/D</p>
</td>
<td class="cellalignment833" headers="r23c1-t4 r1c3-t4">
<p>To assign a SQL variable name to a SQL statement.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r24c1-t4" headers="r1c1-t4">
<p>DECLARE TABLE</p>
</td>
<td class="cellalignment833" headers="r24c1-t4 r1c2-t4">
<p>O/D</p>
</td>
<td class="cellalignment833" headers="r24c1-t4 r1c3-t4">
<p>To declare the table structure for semantic checking of embedded SQL statements by Pro*C/C++.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r25c1-t4" headers="r1c1-t4">
<p>DECLARE TYPE</p>
</td>
<td class="cellalignment833" headers="r25c1-t4 r1c2-t4">
<p>O/D</p>
</td>
<td class="cellalignment833" headers="r25c1-t4 r1c3-t4">
<p>To declare the type structure for semantic checking of embedded SQL statements by Pro*C/C++.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r26c1-t4" headers="r1c1-t4">
<p>DELETE</p>
</td>
<td class="cellalignment833" headers="r26c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r26c1-t4 r1c3-t4">
<p>To remove rows from a table or from a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r27c1-t4" headers="r1c1-t4">
<p>DESCRIBE</p>
</td>
<td class="cellalignment833" headers="r27c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r27c1-t4 r1c3-t4">
<p>To initialize a descriptor, a structure holding host variable descriptions.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r28c1-t4" headers="r1c1-t4">
<p>DESCRIBE DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r28c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r28c1-t4 r1c3-t4">
<p>Obtain information about the variables in an ANSI SQL statement.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r29c1-t4" headers="r1c1-t4">
<p>ENABLE THREADS</p>
</td>
<td class="cellalignment833" headers="r29c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r29c1-t4 r1c3-t4">
<p>To initialize a process that supports multiple threads.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r30c1-t4" headers="r1c1-t4">
<p>EXECUTE...END-EXEC</p>
</td>
<td class="cellalignment833" headers="r30c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r30c1-t4 r1c3-t4">
<p>To execute an anonymous PL/SQL block.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r31c1-t4" headers="r1c1-t4">
<p>EXECUTE</p>
</td>
<td class="cellalignment833" headers="r31c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r31c1-t4 r1c3-t4">
<p>To execute a prepared dynamic SQL statement.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r32c1-t4" headers="r1c1-t4">
<p>EXECUTE DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r32c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r32c1-t4 r1c3-t4">
<p>To execute an ANSI Method 4 dynamic SQL statement.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r33c1-t4" headers="r1c1-t4">
<p>EXECUTE IMMEDIATE</p>
</td>
<td class="cellalignment833" headers="r33c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r33c1-t4 r1c3-t4">
<p>To prepare and execute a SQL statement with no host variables.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r34c1-t4" headers="r1c1-t4">
<p>FETCH</p>
</td>
<td class="cellalignment833" headers="r34c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r34c1-t4 r1c3-t4">
<p>To retrieve rows selected by a query.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r35c1-t4" headers="r1c1-t4">
<p>FETCH DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r35c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r35c1-t4 r1c3-t4">
<p>To retrieve rows selected using ANSI Method 4 Dynamic SQL.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r36c1-t4" headers="r1c1-t4">
<p>FREE</p>
</td>
<td class="cellalignment833" headers="r36c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r36c1-t4 r1c3-t4">
<p>To free memory allocated in the object cache, or cursor.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r37c1-t4" headers="r1c1-t4">
<p>GET DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r37c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r37c1-t4 r1c3-t4">
<p>To move information from an ANSI SQL descriptor area into host variables.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r38c1-t4" headers="r1c1-t4">
<p>INSERT</p>
</td>
<td class="cellalignment833" headers="r38c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r38c1-t4 r1c3-t4">
<p>To add rows to a table or to a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r39c1-t4" headers="r1c1-t4">
<p>LOB APPEND</p>
</td>
<td class="cellalignment833" headers="r39c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r39c1-t4 r1c3-t4">
<p>To append a LOB to the end of another lOB.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r40c1-t4" headers="r1c1-t4">
<p>LOB ASSIGN</p>
</td>
<td class="cellalignment833" headers="r40c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r40c1-t4 r1c3-t4">
<p>To assign a LOB or BFILE locator to another locator.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r41c1-t4" headers="r1c1-t4">
<p>LOB CLOSE</p>
</td>
<td class="cellalignment833" headers="r41c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r41c1-t4 r1c3-t4">
<p>To close an open LOB or BFILE.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r42c1-t4" headers="r1c1-t4">
<p>LOB COPY</p>
</td>
<td class="cellalignment833" headers="r42c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r42c1-t4 r1c3-t4">
<p>To copy all or part of a LOB value into another LOB.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r43c1-t4" headers="r1c1-t4">
<p>LOB CREATE TEMPORARY</p>
</td>
<td class="cellalignment833" headers="r43c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r43c1-t4 r1c3-t4">
<p>To create a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r44c1-t4" headers="r1c1-t4">
<p>LOB DESCRIBE</p>
</td>
<td class="cellalignment833" headers="r44c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r44c1-t4 r1c3-t4">
<p>To retrieve attributes from a LOB.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r45c1-t4" headers="r1c1-t4">
<p>LOB DISABLE BUFFERING</p>
</td>
<td class="cellalignment833" headers="r45c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r45c1-t4 r1c3-t4">
<p>To disable LOB buffering.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r46c1-t4" headers="r1c1-t4">
<p>LOB ENABLE BUFFERING</p>
</td>
<td class="cellalignment833" headers="r46c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r46c1-t4 r1c3-t4">
<p>To enable LOB buffering.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r47c1-t4" headers="r1c1-t4">
<p>LOB ERASE</p>
</td>
<td class="cellalignment833" headers="r47c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r47c1-t4 r1c3-t4">
<p>To erase a given amount of LOB data starting from a given offset.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r48c1-t4" headers="r1c1-t4">
<p>LOB FILE CLOSE ALL</p>
</td>
<td class="cellalignment833" headers="r48c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r48c1-t4 r1c3-t4">
<p>To close all open BFILEs.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r49c1-t4" headers="r1c1-t4">
<p>LOB FILE SET</p>
</td>
<td class="cellalignment833" headers="r49c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r49c1-t4 r1c3-t4">
<p>To set DIRECTORY and FILENAME in a BFILE locator.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r50c1-t4" headers="r1c1-t4">
<p>LOB FLUSH BUFFER</p>
</td>
<td class="cellalignment833" headers="r50c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r50c1-t4 r1c3-t4">
<p>To write the LOB buffers to the database server.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r51c1-t4" headers="r1c1-t4">
<p>LOB FREE TEMPORARY</p>
</td>
<td class="cellalignment833" headers="r51c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r51c1-t4 r1c3-t4">
<p>To free temporary space for the LOB locator.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r52c1-t4" headers="r1c1-t4">
<p>LOB LOAD</p>
</td>
<td class="cellalignment833" headers="r52c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r52c1-t4 r1c3-t4">
<p>To copy all or part of a BFILE into an internal LOB.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r53c1-t4" headers="r1c1-t4">
<p>LOB OPEN</p>
</td>
<td class="cellalignment833" headers="r53c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r53c1-t4 r1c3-t4">
<p>To open a LOB or BFILE to read or read/write access.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r54c1-t4" headers="r1c1-t4">
<p>LOB READ</p>
</td>
<td class="cellalignment833" headers="r54c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r54c1-t4 r1c3-t4">
<p>To read all or part of a LOB or BFILE into a buffer.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r55c1-t4" headers="r1c1-t4">
<p>LOB TRIM</p>
</td>
<td class="cellalignment833" headers="r55c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r55c1-t4 r1c3-t4">
<p>To truncate a lob value.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r56c1-t4" headers="r1c1-t4">
<p>LOB WRITE</p>
</td>
<td class="cellalignment833" headers="r56c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r56c1-t4 r1c3-t4">
<p>To write the contents of a buffer to a LOB.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r57c1-t4" headers="r1c1-t4">
<p>OBJECT CREATE</p>
</td>
<td class="cellalignment833" headers="r57c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r57c1-t4 r1c3-t4">
<p>To create a referenceable object in the cache.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r58c1-t4" headers="r1c1-t4">
<p>OBJECT DELETE</p>
</td>
<td class="cellalignment833" headers="r58c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r58c1-t4 r1c3-t4">
<p>To mark an object as deleted.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r59c1-t4" headers="r1c1-t4">
<p>OBJECT DEREF</p>
</td>
<td class="cellalignment833" headers="r59c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r59c1-t4 r1c3-t4">
<p>To dereference an object.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r60c1-t4" headers="r1c1-t4">
<p>OBJECT FLUSH</p>
</td>
<td class="cellalignment833" headers="r60c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r60c1-t4 r1c3-t4">
<p>To transmit persistent objects to server.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r61c1-t4" headers="r1c1-t4">
<p>OBJECT GET</p>
</td>
<td class="cellalignment833" headers="r61c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r61c1-t4 r1c3-t4">
<p>To convert an object attribute to a C type.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r62c1-t4" headers="r1c1-t4">
<p>OBJECT RELEASE</p>
</td>
<td class="cellalignment833" headers="r62c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r62c1-t4 r1c3-t4">
<p>To &#34;unpin&#34; an object in the cache.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r63c1-t4" headers="r1c1-t4">
<p>OBJECT SET</p>
</td>
<td class="cellalignment833" headers="r63c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r63c1-t4 r1c3-t4">
<p>To update object attributes in the cache.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r64c1-t4" headers="r1c1-t4">
<p>OBJECT UPDATE</p>
</td>
<td class="cellalignment833" headers="r64c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r64c1-t4 r1c3-t4">
<p>To mark an object in the cache as updated.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r65c1-t4" headers="r1c1-t4">
<p>OPEN</p>
</td>
<td class="cellalignment833" headers="r65c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r65c1-t4 r1c3-t4">
<p>To execute the query associated with a cursor.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r66c1-t4" headers="r1c1-t4">
<p>OPEN DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r66c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r66c1-t4 r1c3-t4">
<p>To execute the query associated with a cursor (ANSI Dynamic SQL Method 4).</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r67c1-t4" headers="r1c1-t4">
<p>PREPARE</p>
</td>
<td class="cellalignment833" headers="r67c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r67c1-t4 r1c3-t4">
<p>To parse a dynamic SQL statement.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r68c1-t4" headers="r1c1-t4">
<p>REGISTER CONNECT</p>
</td>
<td class="cellalignment833" headers="r68c1-t4 r1c2-t4">
<p>O/E</p>
</td>
<td class="cellalignment833" headers="r68c1-t4 r1c3-t4">
<p>To enable a call to an external procedure.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r69c1-t4" headers="r1c1-t4">
<p>ROLLBACK</p>
</td>
<td class="cellalignment833" headers="r69c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r69c1-t4 r1c3-t4">
<p>To end the current transaction, discard all changes in the current transaction, and release all locks (optionally release resources and disconnect from the database).</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r70c1-t4" headers="r1c1-t4">
<p>SAVEPOINT</p>
</td>
<td class="cellalignment833" headers="r70c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r70c1-t4 r1c3-t4">
<p>To identify a point in a transaction to which you can later roll back.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r71c1-t4" headers="r1c1-t4">
<p>SELECT</p>
</td>
<td class="cellalignment833" headers="r71c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r71c1-t4 r1c3-t4">
<p>To retrieve data from one or more tables, views, or snapshots, assigning the selected values to host variables.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r72c1-t4" headers="r1c1-t4">
<p>SET DESCRIPTOR</p>
</td>
<td class="cellalignment833" headers="r72c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r72c1-t4 r1c3-t4">
<p>To set information in the descriptor area from host variables.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r73c1-t4" headers="r1c1-t4">
<p>TYPE</p>
</td>
<td class="cellalignment833" headers="r73c1-t4 r1c2-t4">
<p>O/D</p>
</td>
<td class="cellalignment833" headers="r73c1-t4 r1c3-t4">
<p>To assign an external datatype to a whole class of host variables by equivalencing the external datatype to a user-defined datatype.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r74c1-t4" headers="r1c1-t4">
<p>UPDATE</p>
</td>
<td class="cellalignment833" headers="r74c1-t4 r1c2-t4">
<p>S/E</p>
</td>
<td class="cellalignment833" headers="r74c1-t4 r1c3-t4">
<p>To change existing values in a table or in a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r75c1-t4" headers="r1c1-t4">
<p>VAR</p>
</td>
<td class="cellalignment833" headers="r75c1-t4 r1c2-t4">
<p>O/D</p>
</td>
<td class="cellalignment833" headers="r75c1-t4 r1c3-t4">
<p>To override the default datatype and assign a specific external datatype to a host variable.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r76c1-t4" headers="r1c1-t4">
<p>WHENEVER</p>
</td>
<td class="cellalignment833" headers="r76c1-t4 r1c2-t4">
<p>S/D</p>
</td>
<td class="cellalignment833" headers="r76c1-t4 r1c3-t4">
<p>To specify handling for error and warning conditions.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect1" -->
<a id="CHECJAGI"></a>
<div id="LNPCC4607" class="sect1">
<h2 class="sect1">About The Statement Descriptions</h2>
<p>The directives and statements appear alphabetically. The description of each contains the following sections:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="list of sections included in each statement description in this chapter" summary="Directives and Statements" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t5">Directives and Statements</th>
<th class="cellalignment832" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t5" headers="r1c1-t5">Purpose</td>
<td class="cellalignment833" headers="r2c1-t5 r1c2-t5">Describes the basic uses of the statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t5" headers="r1c1-t5">Prerequisites</td>
<td class="cellalignment833" headers="r3c1-t5 r1c2-t5">Lists privileges you must have and steps that you must take before using the statement. Unless otherwise noted, most statements also require that the database be open by your instance.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t5" headers="r1c1-t5">Syntax</td>
<td class="cellalignment833" headers="r4c1-t5 r1c2-t5">Shows the keywords and parameters of the statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t5" headers="r1c1-t5">Keywords and Parameters</td>
<td class="cellalignment833" headers="r5c1-t5 r1c2-t5">Describes the purpose of each keyword and parameter.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t5" headers="r1c1-t5">Usage Notes</td>
<td class="cellalignment833" headers="r6c1-t5 r1c2-t5">Discusses how and when to use the statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t5" headers="r1c1-t5">Examples</td>
<td class="cellalignment833" headers="r7c1-t5 r1c2-t5">Shows example statements of the statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t5" headers="r1c1-t5">Related Topics</td>
<td class="cellalignment833" headers="r8c1-t5 r1c2-t5">Lists related statements, clauses, and sections of this manual.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect1" -->
<a id="CHEIIADA"></a>
<div id="LNPCC4608" class="sect1">
<h2 class="sect1">How to Read Syntax Diagrams<a id="sthref2451"></a></h2>
<p><span class="italic">Syntax diagrams</span> are used to illustrate embedded SQL syntax. They are drawings that depict valid syntax paths.<a id="sthref2452"></a></p>
<p>Trace each diagram from left to right, in the direction shown by the arrows. <a id="sthref2453"></a><a id="sthref2454"></a></p>
<p>Statements and other keywords appear in UPPER CASE inside rectangles. Type them exactly as shown in the rectangles. Parameters appear in lower case inside ovals. Substitute variables for the parameters in statements you write. Operators, delimiters, and terminators appear in circles. Following the conventions defined in the Preface, a semicolon terminates statements.</p>
<p>If the syntax diagram has more than one path, you can choose any path to travel. If you have the choice of more than one keyword, operator, or parameter, your options appear in a vertical list. In the following example, you can travel down the vertical line as far as you like, then continue along any horizontal line:</p>
<img width="496" height="112" src="img/first.gif" alt="Description of first.gif follows"/><br/>
<a id="sthref2455" href="img_text/first.htm">Description of the illustration first.gif</a><br/>
<br/>
<p>According to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL WHENEVER NOT FOUND ... 
EXEC SQL WHENEVER SQLERROR ... 
EXEC SQL WHENEVER SQLWARNING ... 
</pre>
<div id="LNPCC4609" class="sect2"><a id="sthref2456"></a>
<h3 class="sect2">Required Keywords and Parameters</h3>
<p>Required keywords and parameters can appear singly or in a vertical list of alternatives. Single required keywords and parameters appear on the <span class="italic">main path</span>, that is, on the horizontal line you are currently traveling. In the following example, <span class="italic">cursor</span> is a required parameter:</p>
<img width="496" height="43" src="img/reqp.gif" alt="Description of reqp.gif follows"/><br/>
<a id="sthref2457" href="img_text/reqp.htm">Description of the illustration reqp.gif</a><br/>
<br/>
<p>If there is a cursor named <span class="italic">emp_cursor</span>, then, according to the diagram, the following statement is valid:</p>
<pre>EXEC SQL CLOSE emp_cursor; 
</pre>
<p>If any of the keywords or parameters in a vertical list appears on the main path, one of them is required. That is, you must choose one of the keywords or parameters, but not necessarily the one that appears on the main path. In the following example, you must choose one of the four actions:</p>
<img width="496" height="104" src="img/reqp1.gif" alt="Description of reqp1.gif follows"/><br/>
<a id="sthref2458" href="img_text/reqp1.htm">Description of the illustration reqp1.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="LNPCC4610" class="sect2"><a id="sthref2459"></a>
<h3 class="sect2">Optional Keywords and Parameters</h3>
<p>If keywords and parameters appear in a vertical list in the main path, they are optional. In the following example, AT :db_name and WORK are optional:</p>
<img width="496" height="60" src="img/optional.gif" alt="Description of optional.gif follows"/><br/>
<a id="sthref2460" href="img_text/optional.htm">Description of the illustration optional.gif</a><br/>
<br/>
<p>If there is a database named <span class="italic">oracle2</span>, then, according to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL ROLLBACK; 
EXEC SQL ROLLBACK WORK; 
EXEC SQL AT oracle2 ROLLBACK; 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCC4611" class="sect2"><a id="sthref2461"></a>
<h3 class="sect2">Syntax Loops</h3>
<p>Loops let you repeat the syntax within them as many times as you like. In the following example, <span class="italic">column_name</span> is inside a loop. So, after choosing one column name, you can go back repeatedly to choose another, separating the column names by a comma.</p>
<img width="496" height="58" src="img/syntax.gif" alt="Description of syntax.gif follows"/><br/>
<a id="sthref2462" href="img_text/syntax.htm">Description of the illustration syntax.gif</a><br/>
<br/>
<p>If DEBIT, CREDIT, and BALANCE are column names, then, according to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL SELECT DEBIT INTO ... 
EXEC SQL SELECT CREDIT, BALANCE INTO ... 
EXEC SQL SELECT DEBIT, CREDIT, BALANCE INTO ... 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCC4612" class="sect2"><a id="sthref2463"></a>
<h3 class="sect2">Multipart Diagrams</h3>
<p>Read a multipart diagram as if all the main paths were joined end-to-end. The following example is a two-part diagram:</p>
<img width="496" height="136" src="img/part.gif" alt="Description of part.gif follows"/><br/>
<a id="sthref2464" href="img_text/part.htm">Description of the illustration part.gif</a><br/>
<br/>
<p>According to the diagram, the following statement is valid:</p>
<pre>EXEC SQL PREPARE statement_name FROM string_literal; 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCC4613" class="sect2"><a id="sthref2465"></a>
<h3 class="sect2">Oracle Names</h3>
<p>The names of Oracle database objects, such as tables and columns, must not exceed 30 characters in length. The first character must be a letter, but the rest can be any combination of letters, numerals, dollar signs ($), pound signs (#), and underscores (_).<a id="sthref2466"></a><a id="sthref2467"></a><a id="sthref2468"></a></p>
<p>However, if a name is enclosed by quotation marks (&#34;), it can contain any combination of legal characters, including spaces but excluding quotation marks.</p>
<p>Oracle names are not case-sensitive except when enclosed by quotation marks.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC4614" class="sect2"><a id="sthref2469"></a>
<h3 class="sect2">Statement Terminator</h3>
<p>In all embedded SQL diagrams, each statement is understood to end with the statement terminator &#34;;&#34;.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHEHGEEG"></a>
<div id="LNPCC4615" class="sect1">
<h2 class="sect1">ALLOCATE (Executable Embedded SQL Extension)<a id="sthref2470"></a><a id="sthref2471"></a><a id="sthref2472"></a><a id="sthref2473"></a><a id="sthref2474"></a></h2>
<p class="subhead1"><a id="LNPCC4616"></a>Purpose</p>
<p>To allocate a cursor variable<a id="sthref2475"></a> to be referenced in a PL/SQL block, or to allocate space in the object cache.</p>
<p class="subhead1"><a id="LNPCC4617"></a>Prerequisites</p>
<p>A cursor variable (see <a href="pc_04dat.htm#g52211">Chapter 4, &#34;Datatypes and Host Variables&#34;</a>) of type <a id="sthref2476"></a><code>sql_cursor</code> must be declared before allocating memory for the cursor variable.</p>
<p>Pointers to a host struct and, optionally, an indicator struct must be declared before allocating memory in the object cache.</p>
<p>An active connection to a database is required.</p>
<p class="subhead1"><a id="LNPCC4618"></a>Syntax</p>
<img width="496" height="123" src="img/allocat.gif" alt="Description of allocat.gif follows"/><br/>
<a id="sthref2477" href="img_text/allocat.htm">Description of the illustration allocat.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4619"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for ALLOCATE statement" summary="keywords and parameters for ALLOCATE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t6"><span class="bold">Keywords and Parameters</span></th>
<th class="cellalignment832" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t6" headers="r1c1-t6"><span class="italic">db_name</span></td>
<td class="cellalignment833" headers="r2c1-t6 r1c2-t6">A null-terminated string containing the database connection name, as established previously in a CONNECT statement. If it is omitted, or if it is an empty string, the default database connection is assumed.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t6" headers="r1c1-t6"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r3c1-t6 r1c2-t6">A host variable containing the name of the database connection.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t6" headers="r1c1-t6"><span class="italic">cursor_variable</span></td>
<td class="cellalignment833" headers="r4c1-t6 r1c2-t6">A cursor variable to be allocated.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t6" headers="r1c1-t6"><span class="italic">host_ptr</span></td>
<td class="cellalignment833" headers="r5c1-t6 r1c2-t6">A pointer to a host struct generated by OTT for object types, a context variable of type <code>sql_context</code>, a ROWID variable of type pointer to <code>OCIRowid,</code> or a LOB locator variable corresponding to the type of LOB.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t6" headers="r1c1-t6"><span class="italic">ind_ptr</span></td>
<td class="cellalignment833" headers="r6c1-t6 r1c2-t6">An optional pointer to an indicator struct.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4620"></a>Usage Notes</p>
<p>While a cursor is static, a cursor variable is dynamic because it is not tied to a specific query. You can open a cursor variable for any type-compatible query.</p>
<p>For more information on this statement, see <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> and <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p class="subhead1"><a id="LNPCC4621"></a><span class="italic">Example</span></p>
<p>This partial example illustrates the use of the ALLOCATE statement in a Pro*C/C++ program:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
   SQL_CURSOR emp_cv;
   struct{ ... } emp_rec;
EXEC SQL END DECLARE SECTION;
EXEC SQL ALLOCATE :emp_cv;
EXEC SQL EXECUTE
   BEGIN
      OPEN :emp_cv FOR SELECT * FROM emp;
   END;
END-EXEC;
for (;;)
   {
   EXEC SQL FETCH :emp_cv INTO :emp_rec;
   ...
   }
</pre>
<p class="subhead1"><a id="LNPCC4622"></a>Related Topics</p>
<p><a href="#CHEBFJIE">CACHE FREE ALL (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEJJDHJ">EXECUTE (Executable Embedded SQL)</a> .</p>
<p><a href="#CHEHIJCA">FETCH (Executable Embedded SQL)</a> .</p>
<p><a href="#CHEFHBDF">FETCH DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEBBHBC">FREE (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEJEJEE"></a>
<div id="LNPCC4623" class="sect1">
<h2 class="sect1">ALLOCATE DESCRIPTOR (Executable Embedded SQL)<a id="sthref2478"></a><a id="sthref2479"></a></h2>
<p class="subhead1"><a id="LNPCC4624"></a>Purpose</p>
<p>An ANSI dynamic SQL statement that allocates a descriptor.</p>
<p class="subhead1"><a id="LNPCC4625"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC4626"></a>Syntax</p>
<img width="600" height="128" src="img/alldesc.gif" alt="Description of alldesc.gif follows"/><br/>
<a id="sthref2480" href="img_text/alldesc.htm">Description of the illustration alldesc.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4627"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for ALLOCATE DESCRIPTOR statement" summary="keywords and parameters for ALLOCATE DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t7">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t7" headers="r1c1-t7"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment833" headers="r2c1-t7 r1c2-t7">Host variable containing number of rows to be processed.
<p>Number of rows to be processed</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t7" headers="r1c1-t7"><span class="italic">descriptor_name</span>
<p><span class="italic">descriptor name</span></p>
</td>
<td class="cellalignment833" headers="r3c1-t7 r1c2-t7">Host variable containing the name of the ANSI descriptor.
<p>Name of the ANSI descriptor.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t7" headers="r1c1-t7">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r4c1-t7 r1c2-t7">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t7" headers="r1c1-t7">WITH MAX <span class="italic">integer</span></td>
<td class="cellalignment833" headers="r5c1-t7 r1c2-t7">Maximum number of host variables. The default is 100.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4628"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option. For information on using this statement, see <a href="pc_14ady.htm#i1005236">&#34;ALLOCATE DESCRIPTOR&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4629"></a>Example</p>
<pre>EXEC SQL FOR :batch ALLOCATE DESCRIPTOR GLOBAL :binddes WITH MAX 25 ;
</pre>
<p class="subhead1"><a id="LNPCC4630"></a>Related Topics</p>
<p><a href="#CHEIBEIJ">DESCRIBE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDHGBA">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)</a></p>
<p><a href="#CHEEAECI">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEGDJGA">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEBFJIE"></a>
<div id="LNPCC4631" class="sect1">
<h2 class="sect1">CACHE FREE ALL (Executable Embedded SQL Extension)<a id="sthref2481"></a><a id="sthref2482"></a></h2>
<p class="subhead1"><a id="LNPCC4632"></a>Purpose</p>
<p>To free all memory in the object cache.</p>
<p class="subhead1"><a id="LNPCC4633"></a>Prerequisites</p>
<p>An active database connection must exist.</p>
<p class="subhead1"><a id="LNPCC4634"></a>Syntax</p>
<img width="496" height="120" src="img/cache.gif" alt="Description of cache.gif follows"/><br/>
<a id="sthref2483" href="img_text/cache.htm">Description of the illustration cache.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4635"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CACHE FREE ALL statement" summary="keywords and parameters for CACHE FREE ALL statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t8">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t8" headers="r1c1-t8"><span class="italic">db_name</span></td>
<td class="cellalignment833" headers="r2c1-t8 r1c2-t8">A null-terminated string containing the database connection name, as established previously in a CONNECT statement. If it is omitted, or if it is an empty string, the default database connection is assumed.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t8" headers="r1c1-t8">host_variable</td>
<td class="cellalignment833" headers="r3c1-t8 r1c2-t8">A host variable containing the name of the database connection.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4636"></a>Usage Notes</p>
<p>When the connection count drops to zero, SQLLIB automatically frees all object cache memory. For more information, see <a href="pc_17obj.htm#i449256">&#34;CACHE FREE ALL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4637"></a>Example</p>
<pre>EXEC SQL AT mydb CACHE FREE ALL ;
</pre>
<p class="subhead1"><a id="LNPCC4638"></a>Related Topics</p>
<p><a href="#CHEHGEEG">ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEBBHBC">FREE (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGGGJH"></a>
<div id="LNPCC4639" class="sect1">
<h2 class="sect1">CALL (Executable Embedded SQL)<a id="sthref2484"></a><a id="sthref2485"></a></h2>
<p class="subhead1"><a id="LNPCC4640"></a>Purpose</p>
<p>To call a stored procedure.</p>
<p class="subhead1"><a id="LNPCC4641"></a>Prerequisites</p>
<p>An active database connection must exist.</p>
<p class="subhead1"><a id="LNPCC4642"></a>Syntax</p>
<img width="496" height="120" src="img/call.gif" alt="Description of call.gif follows"/><br/>
<a id="sthref2486" href="img_text/call.htm">Description of the illustration call.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4643"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CALL statement" summary="keywords and parameters for CALL statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t9">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t9" headers="r1c1-t9"><span class="italic">schema</span></td>
<td class="cellalignment833" headers="r2c1-t9 r1c2-t9">Is the schema containing the procedure. If you omit schema, Oracle assumes the procedure is in your own schema.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t9" headers="r1c1-t9"><span class="italic">pkg</span></td>
<td class="cellalignment833" headers="r3c1-t9 r1c2-t9">The package where the procedure is stored.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t9" headers="r1c1-t9"><span class="italic">st_proc</span></td>
<td class="cellalignment833" headers="r4c1-t9 r1c2-t9">The stored procedure to be called.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t9" headers="r1c1-t9"><span class="italic">db_link</span></td>
<td class="cellalignment833" headers="r5c1-t9 r1c2-t9">The complete or partial name of a database link to a remote database where the procedure is located. For information on referring to database links, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t9" headers="r1c1-t9"><span class="italic">expr</span></td>
<td class="cellalignment833" headers="r6c1-t9 r1c2-t9">The list of expressions that are the parameters of the procedure.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t9" headers="r1c1-t9"><span class="italic">ret_var</span></td>
<td class="cellalignment833" headers="r7c1-t9 r1c2-t9">The host variable that receives the returned value of a function.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t9" headers="r1c1-t9"><span class="italic">ret_ind</span></td>
<td class="cellalignment833" headers="r8c1-t9 r1c2-t9">The indicator variable for ret_var.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4644"></a>Usage Notes</p>
<p>For more about this statement, see <a href="pc_07pls.htm#i2113">&#34;Calling a Stored PL/SQL or Java Subprogram&#34;</a>.</p>
<p>For a complete discussion of stored procedures, see <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide, &#34;External Routines&#34;</span></a> chapter.</p>
<p class="subhead1"><a id="LNPCC4645"></a>Example</p>
<pre>int emp_no;
char emp_name[10];
float salary;
char dept_name[20];
...
emp_no = 1325;
EXEC SQL CALL get_sal(:emp_no, :emp_name, :salary) INTO :dept_name ;
/* Print emp_name, salary, dept_name */
...
</pre>
<p class="subhead1"><a id="LNPCC4646"></a>Related Topics</p>
<p>None</p>
</div>
<!-- class="sect1" -->
<a id="CHEIBHJF"></a>
<div id="LNPCC4647" class="sect1">
<h2 class="sect1">CLOSE (Executable Embedded SQL)<a id="sthref2487"></a><a id="sthref2488"></a><a id="sthref2489"></a><a id="sthref2490"></a><a id="sthref2491"></a></h2>
<p class="subhead1"><a id="LNPCC4648"></a>Purpose</p>
<p>To disable a cursor, freeing the resources acquired by opening the cursor, and releasing parse locks.</p>
<p class="subhead1"><a id="LNPCC4649"></a>Prerequisites</p>
<p>The cursor or cursor variable be open if MODE=ANSI.</p>
<p class="subhead1"><a id="LNPCC4650"></a>Syntax</p>
<img width="496" height="72" src="img/close.gif" alt="Description of close.gif follows"/><br/>
<a id="sthref2492" href="img_text/close.htm">Description of the illustration close.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4651"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CLOSE statement" summary="keywords and parameters for CLOSE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t10">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t10" headers="r1c1-t10"><span class="italic">cursor</span></td>
<td class="cellalignment833" headers="r2c1-t10 r1c2-t10">A cursor to be closed.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t10" headers="r1c1-t10"><span class="italic">cursor_variable</span></td>
<td class="cellalignment833" headers="r3c1-t10 r1c2-t10">A cursor variable to be closed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4652"></a>Usage Notes</p>
<p>Rows cannot be fetched from a closed cursor. A cursor need not be closed to be reopened. The HOLD_CURSOR<a id="sthref2493"></a> and RELEASE_CURSOR<a id="sthref2494"></a> precompiler options alter the effect of the CLOSE statement. For information on these options, see <a href="pc_10opt.htm#g30455">Chapter 10, &#34; Precompiler Options&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4653"></a>Example</p>
<p>This example illustrates the use of the CLOSE statement:<a id="sthref2495"></a></p>
<pre>EXEC SQL CLOSE emp_cursor;
</pre>
<p class="subhead1"><a id="LNPCC4654"></a>Related Topics</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEJCGFH">OPEN (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEIDAB"></a>
<div id="LNPCC4655" class="sect1">
<h2 class="sect1"><a id="sthref2496"></a>COLLECTION APPEND<a id="sthref2497"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4656"></a>Purpose</p>
<p>To append elements of one collection to the end of another collection.</p>
<p class="subhead1"><a id="LNPCC4657"></a>Prerequisites</p>
<p>You cannot append to a NULL collection, or append beyond the upper bound of a collection.</p>
<p class="subhead1"><a id="LNPCC4658"></a>Syntax</p>
<img width="496" height="194" src="img/collapp.gif" alt="Description of collapp.gif follows"/><br/>
<a id="sthref2498" href="img_text/collapp.htm">Description of the illustration collapp.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4659"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_18col.htm#i1002285">&#34;COLLECTION APPEND&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4660"></a>Related Topics</p>
<p>See the other COLLECTION statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEBIIGG"></a>
<div id="LNPCC4661" class="sect1">
<h2 class="sect1">COLLECTION DESCRIBE<a id="sthref2499"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4662"></a>Purpose</p>
<p>To obtain information about a collection.</p>
<p class="subhead1"><a id="LNPCC4663"></a>Prerequisites</p>
<p>Use the ALLOCATE and OBJECT GET statements to allocate a descriptor and to store collection attributes in the descriptor.</p>
<p class="subhead1"><a id="LNPCC4664"></a>Syntax</p>
<img width="496" height="210" src="img/colldes.gif" alt="Description of colldes.gif follows"/><br/>
<a id="sthref2500" href="img_text/colldes.htm">Description of the illustration colldes.gif</a><br/>
<br/>
<p>where <code>attrib</code> is:</p>
<img width="496" height="270" src="img/collatt.gif" alt="Description of collatt.gif follows"/><br/>
<a id="sthref2501" href="img_text/collatt.htm">Description of the illustration collatt.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4665"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_18col.htm#i1002286">&#34;COLLECTION DESCRIBE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4666"></a>Related Topics</p>
<p>See the other COLLECTION statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGGDJF"></a>
<div id="LNPCC4667" class="sect1">
<h2 class="sect1">COLLECTION GET<a id="sthref2502"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4668"></a>Purpose</p>
<p>To retrieve the elements of a collection.</p>
<p class="subhead1"><a id="LNPCC4669"></a>Syntax</p>
<img width="1328" height="364" src="img/collget.gif" alt="Description of collget.gif follows"/><br/>
<a id="sthref2503" href="img_text/collget.htm">Description of the illustration collget.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4670"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_18col.htm#i1001404">&#34;Collection Statements&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4671"></a>Related Topics</p>
<p>See the other COLLECTION statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIDAIA"></a>
<div id="LNPCC4672" class="sect1">
<h2 class="sect1">COLLECTION RESET<a id="sthref2504"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4673"></a>Purpose</p>
<p>To reset the collection slice endpoints back to the beginning of the collection.</p>
<p class="subhead1"><a id="LNPCC4674"></a>Syntax</p>
<img width="496" height="130" src="img/collres.gif" alt="Description of collres.gif follows"/><br/>
<a id="sthref2505" href="img_text/collres.htm">Description of the illustration collres.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4675"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_18col.htm#i1002287">&#34;COLLECTION RESET&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4676"></a>Related Topics</p>
<p>See the other COLLECTION statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHEICB"></a>
<div id="LNPCC4677" class="sect1">
<h2 class="sect1">COLLECTION SET<a id="sthref2506"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4678"></a>Purpose</p>
<p>To update element values in the current slice of a collection.</p>
<p class="subhead1"><a id="LNPCC4679"></a>Syntax</p>
<img width="496" height="126" src="img/collset.gif" alt="Description of collset.gif follows"/><br/>
<a id="sthref2507" href="img_text/collset.htm">Description of the illustration collset.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4680"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_18col.htm#i1002288">&#34;COLLECTION SET&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4681"></a>Related Topics</p>
<p>See the other COLLECTION statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHJAHI"></a>
<div id="LNPCC4682" class="sect1">
<h2 class="sect1">COLLECTION TRIM<a id="sthref2508"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4683"></a>Purpose</p>
<p>To remove elements from the end of collection.</p>
<p class="subhead1"><a id="LNPCC4684"></a>Syntax</p>
<img width="496" height="146" src="img/colltr.gif" alt="Description of colltr.gif follows"/><br/>
<a id="sthref2509" href="img_text/colltr.htm">Description of the illustration colltr.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4685"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_18col.htm#i1002289">&#34;COLLECTION TRIM&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4686"></a>Related Topics</p>
<p>See the other COLLECTION statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEICCDA"></a>
<div id="LNPCC4687" class="sect1">
<h2 class="sect1">COMMIT (Executable Embedded SQL)<a id="sthref2510"></a><a id="sthref2511"></a><a id="sthref2512"></a><a id="sthref2513"></a></h2>
<p class="subhead1"><a id="LNPCC4688"></a>Purpose</p>
<p>To end your current transaction, making permanent all its changes to the database and optionally freeing all resources and disconnecting.</p>
<p class="subhead1"><a id="LNPCC4689"></a>Prerequisites</p>
<p>To commit your current transaction, no privileges are necessary.</p>
<p>To manually commit a distributed in-doubt transaction that you originally committed, you must have FORCE TRANSACTION system privilege. To manually commit a distributed in-doubt transaction that was originally committed by another user, you must have FORCE ANY TRANSACTION system privilege.</p>
<p class="subhead1"><a id="LNPCC4690"></a>Syntax</p>
<img width="496" height="159" src="img/commit.gif" alt="Description of commit.gif follows"/><br/>
<a id="sthref2514" href="img_text/commit.htm">Description of the illustration commit.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4691"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for COMMIT statement" summary="keywords and parameters for COMMIT statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t11">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t11" headers="r1c1-t11">AT</td>
<td class="cellalignment833" headers="r2c1-t11 r1c2-t11"><a id="sthref2515"></a>Identifies the database to which the COMMIT statement is issued. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> is a host variable whose value is a db_name. If you omit this clause, Oracle issues the statement to your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t11" headers="r1c1-t11">WORK</td>
<td class="cellalignment833" headers="r3c1-t11 r1c2-t11"><a id="sthref2516"></a>Is supported only for compliance with standard SQL. The statements COMMIT and COMMIT WORK are equivalent.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t11" headers="r1c1-t11">COMMENT</td>
<td class="cellalignment833" headers="r4c1-t11 r1c2-t11"><a id="sthref2517"></a>Specifies a Comment to be associated with the current transaction. The &#39;text&#39; is a quoted literal of up to 50 characters that Oracle stores in the data dictionary view DBA_2PC_PENDING along with the transaction ID if the transaction becomes in-doubt.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t11" headers="r1c1-t11">RELEASE</td>
<td class="cellalignment833" headers="r5c1-t11 r1c2-t11">Frees all resources and disconnects the application from the server.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t11" headers="r1c1-t11">FORCE</td>
<td class="cellalignment833" headers="r6c1-t11 r1c2-t11"><a id="sthref2518"></a>Manually commits an in-doubt distributed transaction. The transaction is identified by the &#39;text&#39; containing its local or global transaction ID. To find the IDs of such transactions, query the data dictionary view DBA_2PC_PENDING. You can also use the optional integer to explicitly assign the transaction a system change number (SCN). If you omit the integer, the transaction is committed using the current SCN.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4692"></a>Usage Notes</p>
<p>Always explicitly commit or rollback the last transaction in your program by using the COMMIT or ROLLBACK statement and the RELEASE option. Oracle automatically rolls back changes if the program terminates abnormally.<a id="sthref2519"></a></p>
<p>The COMMIT statement has no effect on host variables or on the flow of control in the program. For more information on this statement, see <a href="pc_03dbc.htm#g18485">Chapter 3, &#34;Database Concepts&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4693"></a>Example</p>
<p><a id="sthref2520"></a>This example illustrates the use of the embedded SQL COMMIT statement:</p>
<pre>EXEC SQL AT sales_db COMMIT RELEASE;
</pre>
<p class="subhead1"><a id="LNPCC4694"></a>Related Topics</p>
<p><a href="#CHEFAAED">ROLLBACK (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDHHAI">SAVEPOINT (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIJAAG"></a>
<div id="LNPCC4695" class="sect1">
<h2 class="sect1">CONNECT (Executable Embedded SQL Extension)<a id="sthref2521"></a><a id="sthref2522"></a><a id="sthref2523"></a><a id="sthref2524"></a></h2>
<p class="subhead1"><a id="LNPCC4696"></a>Purpose</p>
<p>To log on to a database.</p>
<p class="subhead1"><a id="LNPCC4697"></a>Prerequisites</p>
<p>You must have CREATE SESSION system privilege in the specified database.</p>
<p class="subhead1"><a id="LNPCC4698"></a>Syntax</p>
<img width="496" height="216" src="img/connect.gif" alt="Description of connect.gif follows"/><br/>
<a id="sthref2525" href="img_text/connect.htm">Description of the illustration connect.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4699"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CONNECT statement" summary="keywords and parameters for CONNECT statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t12">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t12" headers="r1c1-t12"><span class="italic">user password</span></td>
<td class="cellalignment833" headers="r2c1-t12 r1c2-t12">Specifies your username and password separately.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t12" headers="r1c1-t12"><span class="italic">user_password</span></td>
<td class="cellalignment833" headers="r3c1-t12 r1c2-t12">A single host variable containing the username and password separated by a slash (/).
<p>To allow Oracle to verify your connection through your operating system, specify &#34;/&#34; as the :<span class="italic">user_password</span> value.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t12" headers="r1c1-t12">AT</td>
<td class="cellalignment833" headers="r4c1-t12 r1c2-t12">Identifies the database to which the connection is made. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> is a host variable whose value is a db_name. If you omit this clause, Oracle issues the statement to your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t12" headers="r1c1-t12">USING</td>
<td class="cellalignment833" headers="r5c1-t12 r1c2-t12"><a id="sthref2526"></a>Uses the Oracle Net database specification string used to connect to a nondefault database. If you omit this clause, you are connected to your default database.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t12" headers="r1c1-t12">ALTER AUTHORIZATION</td>
<td class="cellalignment833" headers="r6c1-t12 r1c2-t12">Change password to the following string.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t12" headers="r1c1-t12"><span class="italic">new_password</span></td>
<td class="cellalignment833" headers="r7c1-t12 r1c2-t12">The new password.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t12" headers="r1c1-t12">IN SYSDBA MODE
<p>IN SYSOPER MODE</p>
</td>
<td class="cellalignment833" headers="r8c1-t12 r1c2-t12">Connect with SYSDBA or SYSOPER system privileges. Not allowed when ALTER AUTHORIZATION is used, or precompiler option AUTO_CONNECT is set to YES.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4700"></a>Usage Notes</p>
<p>A program can have multiple connections, but can only connect once to your default database. For more information on this statement, see <a href="pc_05adv.htm#i421486">&#34;Embedded OCI Release 7 Calls&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4701"></a>Example</p>
<p><a id="sthref2527"></a>The following example illustrate the use of CONNECT:</p>
<pre>EXEC SQL CONNECT :username 
    IDENTIFIED BY :password ;
</pre>
<p>You can also use this statement in which the value of <span class="italic">userid</span> is the value of <span class="italic">username</span> and the value of <span class="italic">password</span> separated by a &#34;/&#34;, such as &#39;SCOTT/TIGER&#39;:</p>
<pre>EXEC SQL CONNECT :userid ;
</pre>
<p class="subhead1"><a id="LNPCC4702"></a>Related Topics</p>
<p><a href="#CHEICCDA">COMMIT (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEFAAED">ROLLBACK (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEFHAGC"></a>
<div id="LNPCC4703" class="sect1">
<h2 class="sect1">CONTEXT ALLOCATE (Executable Embedded SQL Extension)<a id="sthref2528"></a><a id="sthref2529"></a><a id="sthref2530"></a><a id="sthref2531"></a><a id="sthref2532"></a><a id="sthref2533"></a></h2>
<p class="subhead1"><a id="LNPCC4704"></a>Purpose</p>
<p>To initialize a SQLLIB runtime context that is referenced in an EXEC SQL CONTEXT USE statement.<a id="sthref2534"></a></p>
<p class="subhead1"><a id="LNPCC4705"></a>Prerequisites</p>
<p>The runtime context must be declared of type <code>sql_context</code>.</p>
<p class="subhead1"><a id="LNPCC4706"></a>Syntax</p>
<img width="496" height="35" src="img/conall.gif" alt="Description of conall.gif follows"/><br/>
<a id="sthref2535" href="img_text/conall.htm">Description of the illustration conall.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4707"></a>Keyword and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CONTEXT ALLOCATE statement" summary="keywords and parameters for CONTEXT ALLOCATE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t13">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t13" headers="r1c1-t13"><span class="italic">context</span></td>
<td class="cellalignment833" headers="r2c1-t13 r1c2-t13">Is the SQLLIB runtime context for which memory is to be allocated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4708"></a>Usage Notes</p>
<p>In a multithreaded application, execute this function once for each runtime context.</p>
<p>For more information on this statement, see <a href="pc_05adv.htm#i431030">&#34;SQLLIB Extensions for OCI Release 8 Interoperability&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4709"></a>Example</p>
<p>This example illustrates the use of a CONTEXT ALLOCATE statement in a Pro*C/C++ program:</p>
<pre>EXEC SQL CONTEXT ALLOCATE :ctx1;
</pre>
<p class="subhead1"><a id="LNPCC4710"></a>Related Topics</p>
<p><a href="#CHEIEGBJ">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEGADAI">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEBHDCJ">ENABLE THREADS (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIEGBJ"></a>
<div id="LNPCC4711" class="sect1">
<h2 class="sect1">CONTEXT FREE (Executable Embedded SQL Extension)<a id="sthref2536"></a><a id="sthref2537"></a><a id="sthref2538"></a><a id="sthref2539"></a><a id="sthref2540"></a></h2>
<p class="subhead1"><a id="LNPCC4712"></a>Purpose</p>
<p>To free all memory associated with a runtime context and place a null pointer in the host program variable.</p>
<p class="subhead1"><a id="LNPCC4713"></a>Prerequisites</p>
<p>The CONTEXT ALLOCATE statement must be used to allocate memory for the specified runtime context before the CONTEXT FREE statement can free the memory allocated for it.</p>
<p class="subhead1"><a id="LNPCC4714"></a>Syntax</p>
<img width="496" height="30" src="img/confree.gif" alt="Description of confree.gif follows"/><br/>
<a id="sthref2541" href="img_text/confree.htm">Description of the illustration confree.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4715"></a>Keyword and Parameter</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CONTEXT FREE statement" summary="keywords and parameters for CONTEXT FREE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t14">Keyword and Parameter</th>
<th class="cellalignment832" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t14" headers="r1c1-t14">:<span class="italic">context</span></td>
<td class="cellalignment833" headers="r2c1-t14 r1c2-t14">The allocated runtime context for which the memory is to be deallocated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4716"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pc_05adv.htm#i431030">&#34;SQLLIB Extensions for OCI Release 8 Interoperability&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4717"></a>Example</p>
<p>This example illustrates the use of a CONTEXT FREE statement in a Pro*C/C++ program:</p>
<pre>EXEC SQL CONTEXT FREE :ctx1;
</pre>
<p class="subhead1"><a id="LNPCC4718"></a>Related Topics</p>
<p><a href="#CHEFHAGC">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEGADAI">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEBHDCJ">ENABLE THREADS (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDGBJB"></a>
<div id="LNPCC4719" class="sect1">
<h2 class="sect1">CONTEXT OBJECT OPTION GET (Executable Embedded SQL Extension)<a id="sthref2542"></a></h2>
<p class="subhead1"><a id="LNPCC4720"></a>Purpose</p>
<p>To determine the values of options set by CONTEXT OBJECT OPTION SET for the context in use.</p>
<p class="subhead1"><a id="LNPCC4721"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES.</p>
<p class="subhead1"><a id="LNPCC4722"></a>Syntax</p>
<img width="496" height="56" src="img/conobget.gif" alt="Description of conobget.gif follows"/><br/>
<a id="sthref2543" href="img_text/conobget.htm">Description of the illustration conobget.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4723"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CONTEXT OBJECT OPTION GET statement" summary="keywords and parameters for CONTEXT OBJECT OPTION GET statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t15">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t15" headers="r1c1-t15"><span class="italic">option</span></td>
<td class="cellalignment833" headers="r2c1-t15 r1c2-t15">Option values are described in <a href="pc_17obj.htm#g470077">Table 17-1, &#34;Valid Choices for CONTEXT OBJECT OPTION Values&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t15" headers="r1c1-t15"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r3c1-t15 r1c2-t15">Output variable of type STRING, VARCHAR, or CHARZ, in the same order as the <span class="italic">option</span> list.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4724"></a>Usage Notes</p>
<p>See <a href="pc_17obj.htm#i453203">&#34;CONTEXT OBJECT OPTION SET&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4725"></a>Example</p>
<pre>char EuroFormat[50];
...
EXEC SQL CONTEXT OBJECT OPTION GET DATEFORMAT INTO :EuroFormat ;
printf(&#34;Date format is %s\n&#34;, EuroFormat);
</pre>
<p class="subhead1"><a id="LNPCC4726"></a>Related Topics</p>
<p><a href="#CHEFHAGC">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEIEGBJ">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEIIBDG">CONTEXT OBJECT OPTION SET (Executable Embedded SQL Ext)</a> .</p>
<p><a href="#CHEGADAI">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIIBDG"></a>
<div id="LNPCC4727" class="sect1">
<h2 class="sect1">CONTEXT OBJECT OPTION SET (Executable Embedded SQL Ext)<a id="sthref2544"></a></h2>
<p class="subhead1"><a id="LNPCC4728"></a>Purpose</p>
<p>To set options to specified values of Date attributes: DATEFORMAT, DATELANG for the context in use.</p>
<p class="subhead1"><a id="LNPCC4729"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES.</p>
<p class="subhead1"><a id="LNPCC4730"></a>Syntax</p>
<img width="496" height="76" src="img/conobset.gif" alt="Description of conobset.gif follows"/><br/>
<a id="sthref2545" href="img_text/conobset.htm">Description of the illustration conobset.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4731"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CONTEXT OBJECT OPTION SET statement" summary="keywords and parameters for CONTEXT OBJECT OPTION SET statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t16">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t16" headers="r1c1-t16"><span class="italic">option</span></td>
<td class="cellalignment833" headers="r2c1-t16 r1c2-t16">Option values are described in <a href="pc_17obj.htm#g470077">Table 17-1, &#34;Valid Choices for CONTEXT OBJECT OPTION Values&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t16" headers="r1c1-t16"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r3c1-t16 r1c2-t16">Input variable of type STRING, VARCHAR, or CHARZ. In the same order as the <span class="italic">option</span> list.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4732"></a>Usage Notes</p>
<p>See <a href="pc_17obj.htm#i453202">&#34;CONTEXT OBJECT OPTION GET&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4733"></a>Example</p>
<pre>char *new_format = &#34;DD-MM-YYY&#34;;
char *new_lang = &#34;French&#34;;
...
EXEC SQL CONTEXT OBJECT OPTION SET DATEFORMAT, DATELANG TO :new_format, :new_lang;
</pre>
<p class="subhead1"><a id="LNPCC4734"></a>Related Topics</p>
<p><a href="#CHEFHAGC">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEIEGBJ">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEGADAI">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEIIBDG">CONTEXT OBJECT OPTION SET (Executable Embedded SQL Ext)</a> .</p>
</div>
<!-- class="sect1" -->
<a id="CHEGADAI"></a>
<div id="LNPCC4735" class="sect1">
<h2 class="sect1">CONTEXT USE (Oracle Embedded SQL Directive)<a id="sthref2546"></a><a id="sthref2547"></a><a id="sthref2548"></a></h2>
<p class="subhead1"><a id="LNPCC4736"></a>Purpose</p>
<p>To instruct the precompiler to use the specified SQLLIB runtime context on subsequent executable SQL statements.</p>
<p class="subhead1"><a id="LNPCC4737"></a>Prerequisites</p>
<p>The runtime context specified by the CONTEXT USE directive must be previously declared.</p>
<p class="subhead1"><a id="LNPCC4738"></a>Syntax</p>
<img width="496" height="64" src="img/conuse.gif" alt="Description of conuse.gif follows"/><br/>
<a id="sthref2549" href="img_text/conuse.htm">Description of the illustration conuse.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4739"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for CONTEXT USE statement" summary="keywords and parameters for CONTEXT USE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t17">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t17" headers="r1c1-t17"><span class="italic">context</span></td>
<td class="cellalignment833" headers="r2c1-t17 r1c2-t17">The allocated runtime context to use for subsequent executable SQL statements that follow it. For example, after specifying in your source code which context to use (multiple contexts can be allocated), you can connect to the Oracle Server and perform database operations within the scope of that context. DEFAULT indicates that the global context that you worked with is to be used.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t17" headers="r1c1-t17">DEFAULT</td>
<td class="cellalignment833" headers="r3c1-t17 r1c2-t17">Indicates that the global context is to be used.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4740"></a>Usage Notes</p>
<p>This statement has no effect on declarative statements such as EXEC SQL INCLUDE or EXEC ORACLE OPTION. It works similarly to the EXEC SQL WHENEVER directive in that it affects all executable SQL statements which positionally follow it in a given source file without regard to standard C scope rules.</p>
<p>For more information on this statement, see <a href="pc_05adv.htm#i431030">&#34;SQLLIB Extensions for OCI Release 8 Interoperability&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4741"></a>Example</p>
<p>This example illustrates the use of a CONTEXT USE directive in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL CONTEXT USE :ctx1; 
</pre>
<p class="subhead1"><a id="LNPCC4742"></a>Related Topics</p>
<p><a href="#CHEFHAGC">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEIEGBJ">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEBHDCJ">ENABLE THREADS (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDHGBA"></a>
<div id="LNPCC4743" class="sect1">
<h2 class="sect1">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)<a id="sthref2550"></a><a id="sthref2551"></a></h2>
<p class="subhead1"><a id="LNPCC4744"></a>Purpose</p>
<p>An ANSI dynamic SQL statement that deallocates a descriptor area to free memory.</p>
<p class="subhead1"><a id="LNPCC4745"></a>Prerequisites</p>
<p>The descriptor specified by the DEALLOCATE DESCRIPTOR statement must be previously allocated using the ALLOCATE DESCRIPTOR statement.</p>
<p class="subhead1"><a id="LNPCC4746"></a>Syntax</p>
<img width="496" height="86" src="img/dealdesc.gif" alt="Description of dealdesc.gif follows"/><br/>
<a id="sthref2552" href="img_text/dealdesc.htm">Description of the illustration dealdesc.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4747"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DEALLOCATE DESCRIPTOR statement" summary="keywords and parameters for DEALLOCATE DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t18">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t18" headers="r1c1-t18">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r2c1-t18 r1c2-t18">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t18" headers="r1c1-t18"><span class="italic">descriptor_name</span>
<p><span class="italic">&#39;descriptor name&#39;</span></p>
</td>
<td class="cellalignment833" headers="r3c1-t18 r1c2-t18">Host variable containing the name of the allocated ANSI descriptor.
<p>Name of the allocated ANSI descriptor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4748"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option.</p>
<p>For more information on this statement, see <a href="pc_14ady.htm#i1005237">&#34;DEALLOCATE DESCRIPTOR&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4749"></a>Example</p>
<pre>EXEC SQL DEALLOCATE DESCRIPTOR GLOBAL &#39;SELDES&#39; ;
</pre>
<p class="subhead1"><a id="LNPCC4750"></a>Related Topics</p>
<p><a href="#CHEJEJEE">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEGJCHH">DESCRIBE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEEAECI">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEGDJGA">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEADJJ"></a>
<div id="LNPCC4751" class="sect1">
<h2 class="sect1">DECLARE CURSOR (Embedded SQL Directive)</h2>
<p class="subhead1"><a id="LNPCC4752"></a>Purpose</p>
<p>To declare a cursor, giving it a name and associating it with a SQL statement or a PL/SQL block.</p>
<p class="subhead1"><a id="LNPCC4753"></a>Prerequisites</p>
<p>If you associate the cursor with an identifier for a SQL statement or PL/SQL block, you must have declared this identifier in a previous DECLARE STATEMENT statement.</p>
<p class="subhead1"><a id="LNPCC4754"></a>Syntax</p>
<img width="496" height="192" src="img/appedclco.gif" alt="Description of appedclco.gif follows"/><br/>
<a id="sthref2553" href="img_text/appedclco.htm">Description of the illustration appedclco.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4755"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for declare cursor statement" summary="q" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t19">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t19" headers="r1c1-t19">AT</td>
<td class="cellalignment833" headers="r2c1-t19 r1c2-t19"><a id="sthref2554"></a>Identifies the database on which the cursor is declared. The database can be identified by either:</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t19" headers="r1c1-t19"><span class="italic">db_name</span></td>
<td class="cellalignment833" headers="r3c1-t19 r1c2-t19">Database identifier declared in a previous DECLARE DATABASE statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t19" headers="r1c1-t19"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r4c1-t19 r1c2-t19">Host variable whose value is a previously declared <span class="italic">db_name</span>.
<p>If you omit this clause, Oracle declares the cursor on your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t19" headers="r1c1-t19"><span class="italic">cursor</span></td>
<td class="cellalignment833" headers="r5c1-t19 r1c2-t19">Name of the cursor to be declared.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t19" headers="r1c1-t19">WITH HOLD</td>
<td class="cellalignment833" headers="r6c1-t19 r1c2-t19">Cursor remains open after a COMMIT. The cursor must not be declared for UPDATE.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t19" headers="r1c1-t19">SELECT <span class="italic">statement</span></td>
<td class="cellalignment833" headers="r7c1-t19 r1c2-t19">Is a SELECT statement to be associated with the cursor. The following statement cannot contain an INTO clause.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t19" headers="r1c1-t19"><span class="italic">statement_name</span></td>
<td class="cellalignment833" headers="r8c1-t19 r1c2-t19">Identifies a SQL statement or PL/SQL block to be associated with the cursor. The <span class="italic">statement_name</span> or <span class="italic">block_name</span> must be previously declared in a DECLARE STATEMENT statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4756"></a>Usage Notes</p>
<p>You must declare a cursor before referencing it in other embedded SQL statements. The scope of a cursor declaration is global within its precompilation unit and the name of each cursor must be unique in its scope. You cannot declare two cursors with the same name in a single precompilation unit.</p>
<p>You can reference the cursor in the WHERE clause of an UPDATE or DELETE statement using the CURRENT OF syntax if the cursor has been opened with an OPEN statement and positioned on a row with a FETCH statement. For more information on this statement, see <a href="pc_07pls.htm#i2348">&#34;Cursor Usage in Embedded PL/SQL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4757"></a>Example</p>
<p><a id="sthref2555"></a>This example illustrates the use of a DECLARE CURSOR statement:</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR 
    FOR SELECT ename, empno, job, sal 
        FROM emp 
        WHERE deptno = :deptno 
        FOR UPDATE OF sal; 
</pre>
<p class="subhead1"><a id="LNPCC4758"></a>Related Topics</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEIGHDJ">DECLARE STATEMENT (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEFICFE">DELETE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEHIJCA">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEIHEJ">OPEN DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDEAIE">SELECT (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEGDJBF">UPDATE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEFJAIA"></a>
<div id="LNPCC4759" class="sect1">
<h2 class="sect1">DECLARE DATABASE (Oracle Embedded SQL Directive)<a id="sthref2556"></a><a id="sthref2557"></a></h2>
<p class="subhead1"><a id="LNPCC4760"></a>Purpose</p>
<p>To declare an identifier for a nondefault database to be accessed in subsequent embedded SQL statements.<a id="sthref2558"></a></p>
<p class="subhead1"><a id="LNPCC4761"></a>Prerequisites</p>
<p>You must have access to a username on the nondefaultnondefault database.</p>
<p class="subhead1"><a id="LNPCC4762"></a>Syntax</p>
<img width="496" height="68" src="img/dcldbase.gif" alt="Description of dcldbase.gif follows"/><br/>
<a id="sthref2559" href="img_text/dcldbase.htm">Description of the illustration dcldbase.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4763"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DECLARE DATABASE statement" summary="keywords and parameters for DECLARE DATABASE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t20">Keyword and Parameter</th>
<th class="cellalignment832" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t20" headers="r1c1-t20"><span class="italic">db_name</span></td>
<td class="cellalignment833" headers="r2c1-t20 r1c2-t20">Is the identifier established for the nondefault database.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4764"></a>Usage Notes</p>
<p>You declare a <span class="italic">db_name</span> for a nondefault database so that other embedded SQL statements can refer to that database using the AT clause. Before issuing a CONNECT statement with an AT clause, you must declare a <span class="italic">db_name</span> for the nondefault database with a DECLARE DATABASE statement.</p>
<p>For more information on this statement, see <a href="pc_03dbc.htm#i6071">&#34;Single Explicit Connection&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4765"></a>Example</p>
<p>This example illustrates the use of a DECLARE DATABASE directive:</p>
<pre>EXEC SQL DECLARE oracle3 DATABASE ;
</pre>
<p class="subhead1"><a id="LNPCC4766"></a>Related Topics</p>
<p><a href="#CHEICCDA">COMMIT (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEIJAAG">CONNECT (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEIGHDJ">DECLARE STATEMENT (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEFICFE">DELETE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEEJCC">EXECUTE ... END-EXEC (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEGFGJB">EXECUTE IMMEDIATE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDDEJD">INSERT (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDEAIE">SELECT (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEGDJBF">UPDATE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIGHDJ"></a>
<div id="LNPCC4767" class="sect1">
<h2 class="sect1">DECLARE STATEMENT (Embedded SQL Directive)<a id="sthref2560"></a><a id="sthref2561"></a></h2>
<p class="subhead1"><a id="LNPCC4768"></a>Purpose</p>
<p>To declare an identifier for a SQL statement or PL/SQL block to be used in other embedded SQL statements.</p>
<p class="subhead1"><a id="LNPCC4769"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC4770"></a>Syntax</p>
<img width="496" height="79" src="img/dcl_stmt.gif" alt="Description of dcl_stmt.gif follows"/><br/>
<a id="sthref2562" href="img_text/dcl_stmt.htm">Description of the illustration dcl_stmt.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4771"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DECLARE STATEMENT statement" summary="keywords and parameters for DECLARE STATEMENT statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t21">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t21" headers="r1c1-t21">AT</td>
<td class="cellalignment833" headers="r2c1-t21 r1c2-t21">Identifies the database on which the SQL statement or PL/SQL block is declared. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> Is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> Is a host variable whose value is a db_name. If you omit this clause, Oracle declares the SQL statement or PL/SQL block to your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t21" headers="r1c1-t21"><span class="italic">statement_name</span></td>
<td class="cellalignment833" headers="r3c1-t21 r1c2-t21">Is the declared identifier for the statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4772"></a>Usage Notes</p>
<p>You must declare an identifier for a SQL statement or PL/SQL block with a DECLARE STATEMENT statement only if a DECLARE CURSOR statement referencing the identifier appears physically (not logically) in the embedded SQL program before the PREPARE statement that parses the statement or block and associates it with its identifier.</p>
<p>The scope of a statement declaration is global within its precompilation unit, like a cursor declaration.<a id="sthref2563"></a><a id="sthref2564"></a> For more information on this statement, see <a href="pc_04dat.htm#g52211">Chapter 4, &#34;Datatypes and Host Variables&#34;</a> and <a href="pc_13dyn.htm#g19220">Chapter 13, &#34;Oracle Dynamic SQL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4773"></a>Example I</p>
<p><a id="sthref2565"></a>This example illustrates the use of the DECLARE STATEMENT statement:</p>
<pre>EXEC SQL AT remote_db DECLARE my_statement STATEMENT; 
EXEC SQL PREPARE my_statement FROM :my_string; 
EXEC SQL EXECUTE my_statement; 
</pre>
<p class="subhead1"><a id="LNPCC4774"></a>Example II</p>
<p>In this example from a Pro*C/C++ embedded SQL program, the DECLARE STATEMENT statement is required because the DECLARE CURSOR statement precedes the PREPARE statement:</p>
<pre>EXEC SQL DECLARE my_statement STATEMENT; 
EXEC SQL DECLARE emp_cursor CURSOR FOR my_statement; 
EXEC SQL PREPARE my_statement FROM :my_string; 
...
</pre>
<p class="subhead1"><a id="LNPCC4775"></a>Related Topics</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEHIJCA">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEIHEJ">OPEN DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHECADIB"></a>
<div id="LNPCC4776" class="sect1">
<h2 class="sect1">DECLARE TABLE (Oracle Embedded SQL Directive)<a id="sthref2566"></a><a id="sthref2567"></a></h2>
<p class="subhead1"><a id="LNPCC4777"></a>Purpose</p>
<p>To define the structure of a table or view, including each column&#39;s datatype, default value, and NULL or NOT NULL specification for semantic checking by the Oracle Precompilers.</p>
<p class="subhead1"><a id="LNPCC4778"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC4779"></a>Syntax</p>
<p>For relational tables, the syntax is:</p>
<img width="496" height="139" src="img/dcltab.gif" alt="Description of dcltab.gif follows"/><br/>
<a id="sthref2568" href="img_text/dcltab.htm">Description of the illustration dcltab.gif</a><br/>
<br/>
<p>For object tables, the syntax is:.</p>
<img width="496" height="56" src="img/dcltabob.gif" alt="Description of dcltabob.gif follows"/><br/>
<a id="sthref2569" href="img_text/dcltabob.htm">Description of the illustration dcltabob.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4780"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DECLARE TABLE statement" summary="keywords and parameters for DECLARE TABLE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t22">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t22" headers="r1c1-t22"><span class="italic">table</span></td>
<td class="cellalignment833" headers="r2c1-t22 r1c2-t22">Is the name of the declared table.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t22" headers="r1c1-t22"><span class="italic">column</span></td>
<td class="cellalignment833" headers="r3c1-t22 r1c2-t22">Is a column of the table.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t22" headers="r1c1-t22"><span class="italic">datatype</span></td>
<td class="cellalignment833" headers="r4c1-t22 r1c2-t22">Is the datatype of a column. For information on datatypes, see <a href="pc_04dat.htm#i15971">&#34;Oracle Datatypes&#34;</a>.
<p>If the datatype is a user-defined object, a <span class="italic">size</span> may be entered in parentheses. The size cannot be a macro or a complex C expression. The size can be omitted. See examples.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t22" headers="r1c1-t22">NOT NULL</td>
<td class="cellalignment833" headers="r5c1-t22 r1c2-t22">Specifies that a column cannot contain NULLs.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t22" headers="r1c1-t22"><span class="italic">obj_type</span></td>
<td class="cellalignment833" headers="r6c1-t22 r1c2-t22">Is an object type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4781"></a>Usage Notes</p>
<p>For information on using this statement, see <a href="pc_adchk.htm#BEJJDIIH">&#34;Using DECLARE TABLE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4782"></a>Examples</p>
<p><a id="sthref2570"></a>The following statement declares the PARTS table with the PARTNO, BIN, and QTY columns:</p>
<pre>EXEC SQL DECLARE parts TABLE 
     (partno NUMBER  NOT NULL, 
      bin    NUMBER, 
      qty    NUMBER); 
</pre>
<p>Use of an object type:</p>
<pre>EXEC SQL DECLARE person TYPE AS OBJECT (name VARCHAR2(20), age INT);
EXEC SQL DECLARE odjtab1 TABLE OF person;
</pre>
<p class="subhead1"><a id="LNPCC4783"></a>Related Topics</p>
<p><a href="#CHEFGAGC">DECLARE TYPE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEFGAGC"></a>
<div id="LNPCC4784" class="sect1">
<h2 class="sect1">DECLARE TYPE (Oracle Embedded SQL Directive)<a id="sthref2571"></a><a id="sthref2572"></a></h2>
<p class="subhead1"><a id="LNPCC4785"></a>Purpose</p>
<p>To define the attributes of a type for a semantics check by the precompiler.</p>
<p class="subhead1"><a id="LNPCC4786"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC4787"></a>Syntax</p>
<img width="496" height="141" src="img/dcltype.gif" alt="Description of dcltype.gif follows"/><br/>
<a id="sthref2573" href="img_text/dcltype.htm">Description of the illustration dcltype.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4788"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DECLARE TYPE statement" summary="keywords and parameters for DECLARE TYPE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t23">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t23" headers="r1c1-t23"><span class="italic">column</span></td>
<td class="cellalignment833" headers="r2c1-t23 r1c2-t23">Name of column.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t23" headers="r1c1-t23"><span class="italic">datatype</span></td>
<td class="cellalignment833" headers="r3c1-t23 r1c2-t23">The datatype of the column</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t23" headers="r1c1-t23"><span class="italic">size</span></td>
<td class="cellalignment833" headers="r4c1-t23 r1c2-t23">Number of elements in the VARRAY.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t23" headers="r1c1-t23"><span class="italic">element_type</span></td>
<td class="cellalignment833" headers="r5c1-t23 r1c2-t23">Type of element in the VARRAY. It can be an object.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t23" headers="r1c1-t23"><span class="italic">object_type</span></td>
<td class="cellalignment833" headers="r6c1-t23 r1c2-t23">A previously declared object type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4789"></a>Usage Notes</p>
<p>For information on using this statement, see <a href="pc_adchk.htm#BEJJEAJI">&#34;Using DECLARE TYPE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4790"></a>Example</p>
<pre>EXEC SQL DECLARE project_type TYPE AS OBJECT(
              pno           CHAR(5),
              pname         CHAR(20),
              budget        NUMBER);
EXEC SQL DECLARE project_array TYPE as VARRAY(20) OF project_type ;
EXEC SQL DECLARE employees TYPE AS TABLE OF emp_objects ;
</pre>
<p class="subhead1"><a id="LNPCC4791"></a>Related Topics</p>
<p><a href="#CHECADIB">DECLARE TABLE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEFICFE"></a>
<div id="LNPCC4792" class="sect1">
<h2 class="sect1">DELETE (Executable Embedded SQL)<a id="sthref2574"></a><a id="sthref2575"></a></h2>
<p class="subhead1"><a id="LNPCC4793"></a>Purpose</p>
<p>To remove rows from a table or from a view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCC4794"></a>Prerequisites</p>
<p>For you to delete rows from a table, the table must be in your own schema or you must have DELETE privilege on the table.</p>
<p>For you to delete rows from the base table of a view, the owner of the schema containing the view must have DELETE privilege on the base table. Also, if the view is in a schema other than your own, you must be granted DELETE privilege on the view.</p>
<p>The DELETE ANY TABLE system privilege also provides the ability to delete rows from any table or any view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCC4795"></a>Syntax</p>
<img width="496" height="303" src="img/delete.gif" alt="Description of delete.gif follows"/><br/>
<a id="sthref2576" href="img_text/delete.htm">Description of the illustration delete.gif</a><br/>
<br/>
<p>Where the DML returning clause is:</p>
<img width="600" height="96" src="img/return.gif" alt="Description of return.gif follows"/><br/>
<a id="sthref2577" href="img_text/return.htm">Description of the illustration return.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4796"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DELETE statement" summary="keywords and parameters for DELETE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t24">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t24" headers="r1c1-t24">AT</td>
<td class="cellalignment833" headers="r2c1-t24 r1c2-t24">Identifies the database to which the DELETE statement is issued. The database can be identified by either:
<p><span class="italic">db_name:</span> Is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> Is a host variable whose value is a previously declared <span class="italic">db_name.</span> If you omit this clause, the DELETE statement is issued to your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t24" headers="r1c1-t24">FOR <span class="italic">:host_integer</span></td>
<td class="cellalignment833" headers="r3c1-t24 r1c2-t24">Limits the number of times the statement is executed if the WHERE clause contains array host variables. If you omit this clause, Oracle executes the statement once for each component of the smallest array.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t24" headers="r1c1-t24"><span class="italic">subquery</span></td>
<td class="cellalignment833" headers="r4c1-t24 r1c2-t24">Is a subquery that returns new values that are assigned to the corresponding columns. For the syntax of a subquery, see &#34;SELECT&#34; in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t24" headers="r1c1-t24"><span class="italic">schema</span></td>
<td class="cellalignment833" headers="r5c1-t24 r1c2-t24">Is the schema containing the table or view. If you omit schema, Oracle assumes the table or view is in your own schema.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t24" headers="r1c1-t24"><span class="italic">table</span></td>
<td class="cellalignment833" headers="r6c1-t24 r1c2-t24">The name of a table from which the rows are to be deleted.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t24" headers="r1c1-t24">view</td>
<td class="cellalignment833" headers="r7c1-t24 r1c2-t24">The name of a view. Oracle deletes rows from the view&#39;s base table.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t24" headers="r1c1-t24">FOR <span class="italic">:host_integer</span></td>
<td class="cellalignment833" headers="r8c1-t24 r1c2-t24">Limits the number of times the statement is executed if the WHERE clause contains array host variables. If you omit this clause, Oracle executes the statement once for each component of the smallest array.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t24" headers="r1c1-t24"><span class="italic">subquery</span></td>
<td class="cellalignment833" headers="r9c1-t24 r1c2-t24">Is a subquery that returns new values that are assigned to the corresponding columns. For the syntax of a subquery, see &#34;SELECT&#34; in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t24" headers="r1c1-t24"><span class="italic">schema</span></td>
<td class="cellalignment833" headers="r10c1-t24 r1c2-t24">Is the schema containing the table or view. If you omit schema, Oracle assumes the table or view is in your own schema.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t24" headers="r1c1-t24"><span class="italic">table</span></td>
<td class="cellalignment833" headers="r11c1-t24 r1c2-t24">The name of a table from which the rows are to be deleted.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t24" headers="r1c1-t24">view</td>
<td class="cellalignment833" headers="r12c1-t24 r1c2-t24">The name of a view. Oracle deletes rows from the view&#39;s base table.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4797"></a>Usage Notes</p>
<p>The host variables in the WHERE clause must be either all scalars or all arrays. If they are scalars, Oracle executes the DELETE statement only once. If they are arrays, Oracle executes the statement once for each set of array components. Each execution may delete zero, one, or multiple rows.</p>
<p>Array host variables in the WHERE clause can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>The size of the smallest array</p>
</li>
<li>
<p>The value of the :<span class="italic">host_integer</span> in the optional FOR clause</p>
</li>
</ul>
<p>If no rows satisfy the condition, no rows are deleted and the SQLCODE returns a NOT_FOUND condition.</p>
<p>The cumulative number of rows deleted is returned through the SQLCA. If the WHERE clause contains array host variables, this value reflects the total number of rows deleted for all components of the array processed by the DELETE statement.</p>
<p>If no rows satisfy the condition, Oracle returns an error through the SQLCODE of the SQLCA. If you omit the WHERE clause, Oracle raises a warning flag in the fifth component of SQLWARN in the SQLCA. For more information on this statement and the SQLCA, see <a href="pc_09err.htm#g35612">Chapter 9, &#34;Handling Runtime Errors&#34;</a>.</p>
<p>You can use Comments in a DELETE statement to pass instructions, or <span class="italic">hints</span>,<a id="sthref2578"></a> to the optimizer. The optimizer uses hints to choose an execution plan for the statement. For more information on hints, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide.</span></a></p>
<p class="subhead1"><a id="LNPCC4798"></a>Example</p>
<p><a id="sthref2579"></a>This example illustrates the use of the DELETE statement within a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL DELETE FROM emp 
    WHERE deptno = :deptno 
    AND job = :job;

EXEC SQL DECLARE emp_cursor CURSOR 
    FOR SELECT empno, comm 
        FROM emp; 
EXEC SQL OPEN emp_cursor; 
EXEC SQL FETCH c1 
    INTO :emp_number, :commission; 
EXEC SQL DELETE FROM emp 
    WHERE CURRENT OF emp_cursor; 
</pre>
<p class="subhead1"><a id="LNPCC4799"></a>Related Topics</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a> .</p>
<p><a href="#CHEIGHDJ">DECLARE STATEMENT (Embedded SQL Directive)</a> .</p>
</div>
<!-- class="sect1" -->
<a id="CHEGJCHH"></a>
<div id="LNPCC4800" class="sect1">
<h2 class="sect1">DESCRIBE (Executable Embedded SQL Extension)<a id="sthref2580"></a><a id="sthref2581"></a></h2>
<p class="subhead1"><a id="LNPCC4801"></a>Purpose</p>
<p>To populate an Oracle descriptor with information about a dynamic SQL statement or PL/SQL block.<a id="sthref2582"></a></p>
<p class="subhead1"><a id="LNPCC4802"></a>Prerequisites</p>
<p>You must have prepared the SQL statement or PL/SQL block in a previous embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCC4803"></a>Syntax</p>
<img width="496" height="107" src="img/describe.gif" alt="Description of describe.gif follows"/><br/>
<a id="sthref2583" href="img_text/describe.htm">Description of the illustration describe.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4804"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DESCRIBE statement" summary="keywords and parameters for DESCRIBE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t25">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t25" headers="r1c1-t25">BIND VARIABLES FOR</td>
<td class="cellalignment833" headers="r2c1-t25 r1c2-t25">Initializes the descriptor to hold information about the input variables for the SQL statement or PL/SQL block.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t25" headers="r1c1-t25">SELECT LIST FOR</td>
<td class="cellalignment833" headers="r3c1-t25 r1c2-t25">Initializes the descriptor to hold information about the select list of a SELECT statement.
<p>The default is SELECT LIST FOR.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t25" headers="r1c1-t25"><span class="italic">statement_name</span></td>
<td class="cellalignment833" headers="r4c1-t25 r1c2-t25">Identifies a SQL statement or PL/SQL block previously prepared with a PREPARE statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t25" headers="r1c1-t25"><span class="italic">descriptor</span></td>
<td class="cellalignment833" headers="r5c1-t25 r1c2-t25">Is the name of the descriptor to be populated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4805"></a>Usage Notes</p>
<p>You must issue a DESCRIBE statement before manipulating the bind or select descriptor within an embedded SQL program.</p>
<p>You cannot describe both input variables and output variables into the same descriptor.</p>
<p>The number of variables found by a DESCRIBE statement is the total number of place-holders in the prepare SQL statement or PL/SQL block, rather than the total number of uniquely named place-holders. For more information on this statement, see <a href="pc_13dyn.htm#g19220">Chapter 13, &#34;Oracle Dynamic SQL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4806"></a>Example</p>
<p><a id="sthref2584"></a>This example illustrates the use of the DESCRIBE statement in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL PREPARE my_statement FROM :my_string; 
EXEC SQL DECLARE emp_cursor 
    FOR SELECT empno, ename, sal, comm 
            FROM emp 
            WHERE deptno = :dept_number;
EXEC SQL DESCRIBE BIND VARIABLES FOR my_statement 
    INTO bind_descriptor; 
EXEC SQL OPEN emp_cursor 
    USING bind_descriptor; 
EXEC SQL DESCRIBE SELECT LIST FOR my_statement 
    INTO select_descriptor; 
EXEC SQL FETCH emp_cursor 
    INTO select_descriptor; 
</pre>
<p class="subhead1"><a id="LNPCC4807"></a>Related Topics</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIBEIJ"></a>
<div id="LNPCC4808" class="sect1">
<h2 class="sect1">DESCRIBE DESCRIPTOR (Executable Embedded SQL)<a id="sthref2585"></a><a id="sthref2586"></a></h2>
<p class="subhead1"><a id="LNPCC4809"></a>Purpose</p>
<p>An ANSI dynamic SQL statement used to obtain information about a SQL statement, and to store it in a descriptor.</p>
<p class="subhead1"><a id="LNPCC4810"></a>Prerequisites</p>
<p>You must have prepared the SQL statement in a previous embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCC4811"></a>Syntax</p>
<img width="496" height="159" src="img/descans.gif" alt="Description of descans.gif follows"/><br/>
<a id="sthref2587" href="img_text/descans.htm">Description of the illustration descans.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4812"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for DESCRIBE DESCRIPTOR statement" summary="keywords and parameters for DESCRIBE DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t26">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t26" headers="r1c1-t26"><span class="italic">statement_id</span></td>
<td class="cellalignment833" headers="r2c1-t26 r1c2-t26">The name of the previously prepared SQL statement or PL/SQL block. OUTPUT is the default.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t26" headers="r1c1-t26"><span class="italic">desc_name</span></td>
<td class="cellalignment833" headers="r3c1-t26 r1c2-t26">Host variable containing the name of the descriptor that will hold information about the SQL statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t26" headers="r1c1-t26"><span class="italic">&#39;descriptor name&#39;</span></td>
<td class="cellalignment833" headers="r4c1-t26 r1c2-t26">The name of the descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t26" headers="r1c1-t26">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r5c1-t26 r1c2-t26">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4813"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option.</p>
<p>Only COUNT and NAME are implemented for the INPUT descriptor.</p>
<p>The number of variables found by a DESCRIBE statement is the total number of place-holders in the prepare SQL statement or PL/SQL block, rather than the total number of uniquely named place-holders. For more information on this statement, see <a href="pc_14ady.htm#i1009239">&#34;DESCRIBE INPUT&#34;</a> , and <a href="pc_14ady.htm#i1009240">&#34;DESCRIBE OUTPUT&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4814"></a>Example</p>
<pre>EXEC SQL PREPARE s FROM :my_stament; 
EXEC SQL DESCRIBE INPUT s USING DESCRIPTOR &#39;in&#39; ;
</pre>
<p class="subhead1"><a id="LNPCC4815"></a>Related Topics</p>
<p><a href="#CHEJEJEE">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDHGBA">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)</a>.</p>
<p><a href="#CHEEAECI">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEGDJGA">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEBHDCJ"></a>
<div id="LNPCC4816" class="sect1">
<h2 class="sect1">ENABLE THREADS (Executable Embedded SQL Extension)<a id="sthref2588"></a><a id="sthref2589"></a><a id="sthref2590"></a></h2>
<p class="subhead1"><a id="LNPCC4817"></a>Purpose</p>
<p>To initialize a process that supports multiple threads.</p>
<p class="subhead1"><a id="LNPCC4818"></a>Prerequisites</p>
<p>You must be developing a precompiler application for and compiling it on a platform that supports multithreaded applications, and THREADS=YES must be specified on the command line.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When using XA with the Pro*C/C++ Precompiler, you must use multithreaded processing provided by XA. Use of multithreaded processing provided by Pro*C/C++ using the statement <code>EXEC SQL ENABLE THREADS</code> will result in an error.</div>
<p class="subhead1"><a id="LNPCC4819"></a>Syntax</p>
<img width="496" height="42" src="img/enable_t.gif" alt="Description of enable_t.gif follows"/><br/>
<a id="sthref2591" href="img_text/enable_t.htm">Description of the illustration enable_t.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4820"></a>Keywords and Parameters</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC4821"></a>Usage Notes</p>
<p>The ENABLE THREADS statement must be executed before any other executable SQL statement and before spawning any thread. This statement does not require a host-variable specification.</p>
<p>For more information on this statement, see <a href="pc_05adv.htm#i431030">&#34;SQLLIB Extensions for OCI Release 8 Interoperability&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4822"></a>Example</p>
<p>This example illustrates the use of the ENABLE THREADS statement in a Pro*C/C++ program:</p>
<pre>EXEC SQL ENABLE THREADS;
</pre>
<p class="subhead1"><a id="LNPCC4823"></a>Related Topics</p>
<p><a href="#CHEFHAGC">CONTEXT ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEIEGBJ">CONTEXT FREE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEGADAI">CONTEXT USE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEEJCC"></a>
<div id="LNPCC4824" class="sect1">
<h2 class="sect1">EXECUTE ... END-EXEC (Executable Embedded SQL Extension)<a id="sthref2592"></a><a id="sthref2593"></a><a id="sthref2594"></a></h2>
<p class="subhead1"><a id="LNPCC4825"></a>Purpose</p>
<p>To embed an anonymous PL/SQL block into a Pro*C/C++ program.<a id="sthref2595"></a><a id="sthref2596"></a></p>
<p class="subhead1"><a id="LNPCC4826"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC4827"></a>Syntax</p>
<img width="496" height="94" src="img/execeex.gif" alt="Description of execeex.gif follows"/><br/>
<a id="sthref2597" href="img_text/execeex.htm">Description of the illustration execeex.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4828"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for EXECUTE...END-EXEC statement" summary="keywords and parameters for EXECUTE...END-EXEC statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t28">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t28" headers="r1c1-t28">AT</td>
<td class="cellalignment833" headers="r2c1-t28 r1c2-t28"><a id="sthref2598"></a>Identifies the database on which the PL/SQL block is executed. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> Is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> Is a host variable whose value is a previously declared db_name. If you omit this clause, the PL/SQL block is executed on your default database</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t28" headers="r1c1-t28"><span class="italic">pl/sql_block</span></td>
<td class="cellalignment833" headers="r3c1-t28 r1c2-t28">For information on PL/SQL, including how to write PL/SQL blocks, see the <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t28" headers="r1c1-t28">END-EXEC</td>
<td class="cellalignment833" headers="r4c1-t28 r1c2-t28">This keyword must appear after the embedded PL/SQL block, regardless of which programming language your Oracle Precompiler program uses. The keyword END-EXEC must be followed by the C/C++ statement terminator, &#34;;&#34;.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4829"></a>Usage Notes</p>
<p>Since the Pro*C/C++ treats an embedded PL/SQL block like a single embedded SQL statement, you can embed a PL/SQL block anywhere in a program that you can embed a SQL statement. For more information on embedding PL/SQL blocks in Oracle Precompiler programs, see <a href="pc_07pls.htm#g27962">Chapter 7, &#34; Embedded PL/SQL&#34;</a><span class="italic">.</span></p>
<p class="subhead1"><a id="LNPCC4830"></a>Example</p>
<p><a id="sthref2599"></a>Placing this EXECUTE statement in a Pro*C/C++ program embeds a PL/SQL block in the program:</p>
<pre>EXEC SQL EXECUTE 
    BEGIN 
        SELECT ename, job, sal 
            INTO :emp_name:ind_name, :job_title, :salary 
            FROM emp 
            WHERE empno = :emp_number; 
        IF :emp_name:ind_name IS NULL 
            THEN RAISE name_missing; 
        END IF; 
    END; 
END-EXEC; 
</pre>
<p class="subhead1"><a id="LNPCC4831"></a>Related Topics</p>
<p><a href="#CHEGFGJB">EXECUTE IMMEDIATE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEJJDHJ"></a>
<div id="LNPCC4832" class="sect1">
<h2 class="sect1">EXECUTE (Executable Embedded SQL)<a id="sthref2600"></a><a id="sthref2601"></a></h2>
<p class="subhead1"><a id="LNPCC4833"></a>Purpose</p>
<p>In Oracle dynamic SQL, to execute a DELETE, INSERT, or UPDATE statement or a PL/SQL block that has been previously prepared with an embedded SQL PREPARE statement. For ANSI Dynamic SQL Method 4 see <a href="#CHEJIIFG">&#34;EXECUTE DESCRIPTOR (Executable Embedded SQL)&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4834"></a>Prerequisites</p>
<p>You must first prepare the SQL statement or PL/SQL block with an embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCC4835"></a>Syntax</p>
<img width="496" height="199" src="img/execo.gif" alt="Description of execo.gif follows"/><br/>
<a id="sthref2602" href="img_text/execo.htm">Description of the illustration execo.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4836"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for EXECUTE statement" summary="keywords and parameters for EXECUTE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t29">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t29" headers="r1c1-t29">FOR <span class="italic">:array_size</span></td>
<td class="cellalignment833" headers="r2c1-t29 r1c2-t29"><a id="sthref2603"></a>Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t29" headers="r1c1-t29">FOR <span class="italic">integer</span></td>
<td class="cellalignment833" headers="r3c1-t29 r1c2-t29"><a id="sthref2604"></a>Limits the number of times the statement is executed when the USING clause contains array host variables If you omit this clause, Oracle executes the statement once for each component of the smallest array.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t29" headers="r1c1-t29"><span class="italic">statement_id</span></td>
<td class="cellalignment833" headers="r4c1-t29 r1c2-t29">A precompiler identifier associated with the SQL statement or PL/SQL block to be executed. Use the embedded SQL PREPARE statement to associate the precompiler identifier with the statement or PL/SQL block.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t29" headers="r1c1-t29">USING DESCRIPTOR <span class="italic">SQLDA_descriptor</span></td>
<td class="cellalignment833" headers="r5c1-t29 r1c2-t29">Uses an Oracle descriptor. CANNOT be used together with an ANSI descriptor (INTO clause).</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t29" headers="r1c1-t29">USING</td>
<td class="cellalignment833" headers="r6c1-t29 r1c2-t29">Specifies a list of host variables with optional indicator variables that Oracle substitutes as input variables into the statement to be executed. The host and indicator variables must be either all scalars or all arrays.<a id="sthref2605"></a></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t29" headers="r1c1-t29"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r7c1-t29 r1c2-t29">Host variables.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t29" headers="r1c1-t29"><span class="italic">indicator_variable</span></td>
<td class="cellalignment833" headers="r8c1-t29 r1c2-t29">Indicator variables.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4837"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pc_13dyn.htm#g19220">Chapter 13, &#34;Oracle Dynamic SQL&#34;</a> for the Oracle version.</p>
<p class="subhead1"><a id="LNPCC4838"></a>Example</p>
<p><a id="sthref2606"></a>This example illustrates the use of the EXECUTE statement in a Pro*C/C++ program:</p>
<pre>EXEC SQL PREPARE my_statement 
    FROM :my_string; 
EXEC SQL EXECUTE my_statement
    USING :my_var; 
</pre>
<p class="subhead1"><a id="LNPCC4839"></a>Related Topics</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEJIIFG"></a>
<div id="LNPCC4840" class="sect1">
<h2 class="sect1">EXECUTE DESCRIPTOR <a id="sthref2607"></a>(Executable Embedded SQL)</h2>
<p class="subhead1"><a id="LNPCC4841"></a>Purpose</p>
<p>In ANSI SQL Method 4, to execute a DELETE, INSERT, or UPDATE statement or a PL/SQL block that has been previously prepared with an embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCC4842"></a>Prerequisites</p>
<p>You must first prepare the SQL statement or PL/SQL block with an embedded SQL PREPARE statement.</p>
<p class="subhead1"><a id="LNPCC4843"></a>Syntax</p>
<img width="600" height="288" src="img/execa.gif" alt="Description of execa.gif follows"/><br/>
<a id="sthref2608" href="img_text/execa.htm">Description of the illustration execa.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4844"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for EXECUTE DESCRIPTOR statement" summary="keywords and parameters for EXECUTE DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t30">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t30" headers="r1c1-t30">FOR <span class="italic">:array_size</span></td>
<td class="cellalignment833" headers="r2c1-t30 r1c2-t30"><a id="sthref2609"></a>Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t30" headers="r1c1-t30">FOR <span class="italic">integer</span></td>
<td class="cellalignment833" headers="r3c1-t30 r1c2-t30"><a id="sthref2610"></a>Limits the number of times the statement is executed. Oracle executes the statement once for each component of the smallest array.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t30" headers="r1c1-t30"><span class="italic">statement_id</span></td>
<td class="cellalignment833" headers="r4c1-t30 r1c2-t30">A precompiler identifier associated with the SQL statement or PL/SQL block to be executed. Use the embedded SQL PREPARE statement to associate the precompiler identifier with the statement or PL/SQL block.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t30" headers="r1c1-t30">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r5c1-t30 r1c2-t30">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t30" headers="r1c1-t30">USING</td>
<td class="cellalignment833" headers="r6c1-t30 r1c2-t30">An ANSI descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t30" headers="r1c1-t30"><span class="italic">descriptor_nam</span>e</td>
<td class="cellalignment833" headers="r7c1-t30 r1c2-t30">Host variable containing name of the input descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t30" headers="r1c1-t30"><span class="italic">&#39;descriptor name&#39;</span></td>
<td class="cellalignment833" headers="r8c1-t30 r1c2-t30">Name of the input descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t30" headers="r1c1-t30">INTO</td>
<td class="cellalignment833" headers="r9c1-t30 r1c2-t30">An ANSI descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t30" headers="r1c1-t30"><span class="italic">descriptor_name</span></td>
<td class="cellalignment833" headers="r10c1-t30 r1c2-t30">Host variable containing name of the output descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t30" headers="r1c1-t30"><span class="italic">&#39;descriptor name&#39;</span></td>
<td class="cellalignment833" headers="r11c1-t30 r1c2-t30">Name of the output descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t30" headers="r1c1-t30">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r12c1-t30 r1c2-t30">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4845"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pc_14ady.htm#i1011699">Chapter 14, &#34; ANSI Dynamic SQL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4846"></a>Examples</p>
<p>The ANSI dynamic SQL Method 4 allows DML Returning clauses in a SELECT to be supported by the INTO clause in EXECUTE:</p>
<pre>EXEC SQL EXECUTE S2 USING DESCRIPTOR :bv1 INTO DESCRIPTOR &#39;SELDES&#39; ;
</pre>
<p class="subhead1"><a id="LNPCC4847"></a>Related Topics</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGFGJB"></a>
<div id="LNPCC4848" class="sect1">
<h2 class="sect1">EXECUTE IMMEDIATE (Executable Embedded SQL)<a id="sthref2611"></a><a id="sthref2612"></a></h2>
<p class="subhead1"><a id="LNPCC4849"></a>Purpose</p>
<p>To prepare and execute a DELETE, INSERT, or UPDATE statement or a PL/SQL block containing no host variables.</p>
<img width="496" height="160" src="img/execi.gif" alt="Description of execi.gif follows"/><br/>
<a id="sthref2613" href="img_text/execi.htm">Description of the illustration execi.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4850"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC4851"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for EXECUTE IMMEDIATE statement" summary="keywords and parameters for EXECUTE IMMEDIATE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t31">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t31" headers="r1c1-t31">AT</td>
<td class="cellalignment833" headers="r2c1-t31 r1c2-t31"><a id="sthref2614"></a>Identifies the database on which the SQL statement or PL/SQL block is executed. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> Is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> Is a host variable whose value is a previously declared db_name. If you omit this clause, the statement or block is executed on your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t31" headers="r1c1-t31"><span class="italic">text</span></td>
<td class="cellalignment833" headers="r3c1-t31 r1c2-t31">Is a quoted text literal (or a text literal without quotes) containing the SQL statement or PL/SQL block to be executed.
<p>The SQL statement can only be a DELETE, INSERT, or UPDATE statement.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t31" headers="r1c1-t31"><span class="italic">host_string</span></td>
<td class="cellalignment833" headers="r4c1-t31 r1c2-t31">A host variable containing a SQL statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4852"></a>Usage Notes</p>
<p>When you issue an EXECUTE IMMEDIATE statement, Oracle parses the specified SQL statement or PL/SQL block, checking for errors, and executes it. If any errors are encountered, they are returned in the SQLCODE component of the SQLCA.</p>
<p>For more information on this statement, see <a href="pc_13dyn.htm#g19220">Chapter 13, &#34;Oracle Dynamic SQL&#34;</a> and <a href="pc_14ady.htm#i1011699">Chapter 14, &#34; ANSI Dynamic SQL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4853"></a>Example</p>
<p><a id="sthref2615"></a>This example illustrates the use of the EXECUTE IMMEDIATE statement:</p>
<pre>EXEC SQL EXECUTE IMMEDIATE &#39;DELETE FROM emp WHERE empno = 9460&#39; ;
</pre>
<p class="subhead1"><a id="LNPCC4854"></a>Related Topics</p>
<p><a href="#CHEJJDHJ">EXECUTE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHIJCA"></a>
<div id="LNPCC4855" class="sect1">
<h2 class="sect1">FETCH (Executable Embedded SQL)<a id="sthref2616"></a><a id="sthref2617"></a><a id="sthref2618"></a><a id="sthref2619"></a><a id="sthref2620"></a></h2>
<p class="subhead1"><a id="LNPCC4856"></a>Purpose</p>
<p>In Oracle dynamic SQL, to retrieve one or more rows returned by a query, assigning the select list values to host variables. For ANSI Dynamic SQL Method 4 see <a href="#CHEFHBDF">&#34;FETCH DESCRIPTOR (Executable Embedded SQL)&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4857"></a>Prerequisites</p>
<p>You must first open the cursor with an OPEN statement.</p>
<p class="subhead1"><a id="LNPCC4858"></a>Syntax</p>
<img width="496" height="200" src="img/fetcho.gif" alt="Description of fetcho.gif follows"/><br/>
<a id="sthref2621" href="img_text/fetcho.htm">Description of the illustration fetcho.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4859"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for FETCH statement" summary="keywords and parameters for FETCH statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t32">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t32" headers="r1c1-t32"><span class="italic">FOR :array_size</span></td>
<td class="cellalignment833" headers="r2c1-t32 r1c2-t32">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t32" headers="r1c1-t32"><span class="italic">FOR integer</span></td>
<td class="cellalignment833" headers="r3c1-t32 r1c2-t32">Limits the number of rows fetched if you are using array host variables. If you omit this clause, Oracle fetches enough rows to fill the smallest array.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t32" headers="r1c1-t32"><span class="italic">cursor</span></td>
<td class="cellalignment833" headers="r4c1-t32 r1c2-t32">A cursor that is declared by a DECLARE CURSOR statement. The FETCH statement returns one of the rows selected by the query associated with the cursor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t32" headers="r1c1-t32"><span class="italic">cursor_variable</span></td>
<td class="cellalignment833" headers="r5c1-t32 r1c2-t32">A cursor variable is allocated an ALLOCATE statement. The FETCH statement returns one of the rows selected by the query associated with the cursor variable.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t32" headers="r1c1-t32">INTO</td>
<td class="cellalignment833" headers="r6c1-t32 r1c2-t32"><a id="sthref2622"></a>Specifies a list of host variables and optional indicator variables into which data is fetched. These host variables and indicator variables must be declared within the program.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t32" headers="r1c1-t32"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r7c1-t32 r1c2-t32">Host variables to receive data,</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t32" headers="r1c1-t32">i<span class="italic">ndicator_variables</span></td>
<td class="cellalignment833" headers="r8c1-t32 r1c2-t32">Host indicator variables.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t32" headers="r1c1-t32">USING <span class="italic">SQLDA_variable</span></td>
<td class="cellalignment833" headers="r9c1-t32 r1c2-t32"><a id="sthref2623"></a>Specifies the Oracle descriptor referenced in a previous DESCRIBE statement. Only use this clause with dynamic embedded SQL, method 4. The USING clause does not apply when a cursor variable is used.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4860"></a>Usage Notes</p>
<p>The FETCH statement reads the rows of the active set and names the output variables which contain the results. Indicator values are set to -1 if their associated host variable is NULL. The first FETCH statement for a cursor also sorts the rows of the active set, if necessary.</p>
<p>The number of rows retrieved is specified by the size of the output host variables and the value specified in the FOR clause. The host variables to receive the data must be either all scalars or all arrays. If they are scalars, Oracle fetches only one row. If they are arrays, Oracle fetches enough rows to fill the arrays.</p>
<p>Array host variables can have different sizes. In this case, the number of rows Oracle fetches is determined by the smaller of the following values:</p>
<ul>
<li>
<p>The size of the smallest array</p>
</li>
<li>
<p>The value of the :<span class="italic">array_size</span> in the optional FOR clause</p>
</li>
</ul>
<p>Of course, the number of rows fetched can be further limited by the number of rows that actually satisfy the query.</p>
<p>If a FETCH statement does not retrieve all rows returned by the query, the cursor is positioned on the next returned row. When the last row returned by the query has been retrieved, the next FETCH statement results in an error code returned in the SQLCODE element of the SQLCA.</p>
<p>The FETCH statement does not contain an AT clause. You must specify the database accessed by the cursor in the DECLARE CURSOR statement.</p>
<p>You can only move forward through the active set with FETCH statements. If you want to revisit any of the previously fetched rows, you must reopen the cursor and fetch each row in turn. If you want to change the active set, you must assign new values to the input host variables in the cursor&#39;s query and reopen the cursor.</p>
<p>For more information, see <a href="pc_06sql.htm#i2216">&#34;The FETCH Statement&#34;</a> for the Oracle descriptor.</p>
<p class="subhead1"><a id="LNPCC4861"></a>Example</p>
<p><a id="sthref2624"></a>This example illustrates the FETCH statement:</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR FOR 
    SELECT job, sal FROM emp WHERE deptno = 30; 
EXEC SQL OPEN emp_cursor;
... 
EXEC SQL WHENEVER NOT FOUND GOTO ... 
for(;;)
    {
    EXEC SQL FETCH emp_cursor INTO :job_title1, :salary1; 
    ... 
    }
</pre>
<p class="subhead1"><a id="LNPCC4862"></a>Related Topics</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEJCGFH">OPEN (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEFHBDF"></a>
<div id="LNPCC4863" class="sect1">
<h2 class="sect1">FETCH DESCRIPTOR (Executable Embedded SQL)<a id="sthref2625"></a><a id="sthref2626"></a><a id="sthref2627"></a><a id="sthref2628"></a><a id="sthref2629"></a></h2>
<p class="subhead1"><a id="LNPCC4864"></a>Purpose</p>
<p>To retrieve one or more rows returned by a query, assigning the select list values to host variables. Used in ANSI Dynamic SQL Method 4.</p>
<p class="subhead1"><a id="LNPCC4865"></a>Prerequisites</p>
<p>You must first open the cursor with an the OPEN statement.</p>
<p class="subhead1"><a id="LNPCC4866"></a>Syntax</p>
<img width="496" height="178" src="img/fetcha.gif" alt="Description of fetcha.gif follows"/><br/>
<a id="sthref2630" href="img_text/fetcha.htm">Description of the illustration fetcha.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4867"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for FETCH DESCRIPTOR statement" summary="keywords and parameters for FETCH DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t33">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t33" headers="r1c1-t33"><span class="italic">array_size</span></td>
<td class="cellalignment833" headers="r2c1-t33 r1c2-t33">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t33" headers="r1c1-t33"><span class="italic">integer</span></td>
<td class="cellalignment833" headers="r3c1-t33 r1c2-t33">Limits the number of rows fetched if you are using array host variables. If you omit this clause, Oracle fetches enough rows to fill the smallest array.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t33" headers="r1c1-t33"><span class="italic">cursor</span></td>
<td class="cellalignment833" headers="r4c1-t33 r1c2-t33">A cursor that has been declared by a DECLARE CURSOR statement. The FETCH statement returns one of the rows selected by the query associated with the cursor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t33" headers="r1c1-t33"><span class="italic">cursor_variable</span></td>
<td class="cellalignment833" headers="r5c1-t33 r1c2-t33">A cursor variable is allocated an ALLOCATE statement. The FETCH statement returns one of the rows selected by the query associated with the cursor variable.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t33" headers="r1c1-t33">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r6c1-t33 r1c2-t33">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t33" headers="r1c1-t33">INTO</td>
<td class="cellalignment833" headers="r7c1-t33 r1c2-t33"><a id="sthref2631"></a>Specifies a list of host variables and optional indicator variables into which data is fetched. These host variables and indicator variables must be declared within the program.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t33" headers="r1c1-t33"><span class="italic">descriptor name&#39;</span>
<p><span class="italic">:descriptor_name</span></p>
</td>
<td class="cellalignment833" headers="r8c1-t33 r1c2-t33">Name of the output ANSI descriptor.
<p>Host variable containing the name of the output descriptor.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4868"></a>Usage Notes</p>
<p>The number of rows retrieved is specified by the size of the output host variables and the value specified in the FOR clause. The host variables to receive the data must be either all scalars or all arrays. If they are scalars, Oracle fetches only one row. If they are arrays, Oracle fetches enough rows to fill the arrays.</p>
<p>Array host variables can have different sizes. In this case, the number of rows Oracle fetches is determined by the smaller of the following values:</p>
<ul>
<li>
<p>The size of the smallest array.</p>
</li>
<li>
<p>The value of the :<span class="italic">array_size</span> in the optional FOR clause.</p>
</li>
</ul>
<p>Of course, the number of rows fetched can be further limited by the number of rows that actually satisfy the query.</p>
<p>If a FETCH statement does not retrieve all rows returned by the query, the cursor is positioned on the next returned row. When the last row returned by the query has been retrieved, the next FETCH statement results in an error code returned in the SQLCODE element of the SQLCA.</p>
<p>The FETCH statement does not contain an AT clause. You must specify the database accessed by the cursor in the DECLARE CURSOR statement.</p>
<p>You can only move forward through the active set with FETCH statements. If you want to revisit any of the previously fetched rows, you must reopen the cursor and fetch each row in turn. If you want to change the active set, you must assign new values to the input host variables in the cursor&#39;s query and reopen the cursor.</p>
<p>Use DYNAMIC=ANSI precompiler option for the ANSI SQL Method 4 application. For more information, see <a href="pc_14ady.htm#i1007038">&#34;FETCH&#34;</a> for the ANSI SQL Method 4 application.</p>
<p class="subhead1"><a id="LNPCC4869"></a>Example</p>
<pre>...
EXEC SQL ALLOCATE DESCRIPTOR &#39;output_descriptor&#39; ;
...
EXEC SQL PREPARE S FROM :dyn_statement ;
EXEC SQL DECLARE mycursor CURSOR FOR S ;
...
EXEC SQL FETCH mycursor INTO DESCRIPTOR &#39;output_descriptor&#39; ;
...
</pre>
<p class="subhead1"><a id="LNPCC4870"></a>Related Topics</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEEIHEJ">OPEN DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEBBHBC"></a>
<div id="LNPCC4871" class="sect1">
<h2 class="sect1">FREE (Executable Embedded SQL Extension)<a id="sthref2632"></a><a id="sthref2633"></a></h2>
<p class="subhead1"><a id="LNPCC4872"></a>Purpose</p>
<p>To free memory in the object cache.</p>
<p class="subhead1"><a id="LNPCC4873"></a>Prerequisites</p>
<p>The memory has to have been already allocated.</p>
<p>An active database connection must exist.</p>
<p class="subhead1"><a id="LNPCC4874"></a>Syntax</p>
<img width="496" height="125" src="img/free.gif" alt="Description of free.gif follows"/><br/>
<a id="sthref2634" href="img_text/free.htm">Description of the illustration free.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4875"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for FREE statement" summary="keywords and parameters for FREE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t34">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t34" headers="r1c1-t34"><span class="italic">dbname</span></td>
<td class="cellalignment833" headers="r2c1-t34 r1c2-t34">A null-terminated string containing the database connection name, as established previously in a CONNECT statement. If omitted, or if an empty string, the default database connection is assumed.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t34" headers="r1c1-t34"><span class="italic">host_ptr</span></td>
<td class="cellalignment833" headers="r3c1-t34 r1c2-t34">A host-variable pointer that was previously ALLOCATED.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t34" headers="r1c1-t34"><span class="italic">ind_ptr</span></td>
<td class="cellalignment833" headers="r4c1-t34 r1c2-t34">An indicator pointer.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4876"></a>Usage Notes</p>
<p>Any memory in the object cache will be freed automatically when the connection is terminated. See <a href="pc_17obj.htm#i449255">&#34;FREE&#34;</a> for more information.</p>
<p class="subhead1"><a id="LNPCC4877"></a>Example</p>
<pre>EXEC SQL FREE :ptr ;
</pre>
<p class="subhead1"><a id="LNPCC4878"></a>Related Topics</p>
<p><a href="#CHEHGEEG">ALLOCATE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEBFJIE">CACHE FREE ALL (Executable Embedded SQL Extension)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEAECI"></a>
<div id="LNPCC4879" class="sect1">
<h2 class="sect1">GET DESCRIPTOR (Executable Embedded SQL)</h2>
<p class="subhead1"><a id="LNPCC4880"></a>Purpose</p>
<p>To obtain information about host variables from a SQL descriptor area.</p>
<p class="subhead1"><a id="LNPCC4881"></a>Prerequisites</p>
<p>Use only with value semantics.</p>
<p class="subhead1"><a id="LNPCC4882"></a>Syntax</p>
<img width="600" height="160" src="img/getdesc.gif" alt="Description of getdesc.gif follows"/><br/>
<a id="sthref2635" href="img_text/getdesc.htm">Description of the illustration getdesc.gif</a><br/>
<br/>
<p>where <code>item_name</code> can be one of these choices:</p>
<img width="496" height="521" src="img/getdnc.gif" alt="Description of getdnc.gif follows"/><br/>
<a id="sthref2636" href="img_text/getdnc.htm">Description of the illustration getdnc.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4883"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for GET DESCRIPTOR statement" summary="keywords and parameters for GET DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t35">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t35" headers="r1c1-t35"><span class="italic">array_size</span></td>
<td class="cellalignment833" headers="r2c1-t35 r1c2-t35">Host variable containing the number of rows to be processed.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t35" headers="r1c1-t35"><span class="italic">integer</span></td>
<td class="cellalignment833" headers="r3c1-t35 r1c2-t35">Number of rows to be processed.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t35" headers="r1c1-t35"><span class="italic">descriptor_name</span>
<p><span class="italic">&#39;descriptor name&#39;</span></p>
</td>
<td class="cellalignment833" headers="r4c1-t35 r1c2-t35">Host variable containing the name of the allocated ANSI descriptor.
<p>Name of the allocated ANSI descriptor.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t35" headers="r1c1-t35">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r5c1-t35 r1c2-t35">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t35" headers="r1c1-t35"><span class="italic">host_var</span> = COUNT</td>
<td class="cellalignment833" headers="r6c1-t35 r1c2-t35">Host variable containing the total number of input or output variables.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t35" headers="r1c1-t35"><span class="italic">integer</span></td>
<td class="cellalignment833" headers="r7c1-t35 r1c2-t35">Total number of input or output variables.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t35" headers="r1c1-t35">VALUE :<span class="italic">host_integer</span></td>
<td class="cellalignment833" headers="r8c1-t35 r1c2-t35">Host variable containing the position of the referenced input or output variable.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t35" headers="r1c1-t35">VALUE <span class="italic">integer</span></td>
<td class="cellalignment833" headers="r9c1-t35 r1c2-t35">The position of the referenced input or output variable.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t35" headers="r1c1-t35"><span class="italic">host_var</span></td>
<td class="cellalignment833" headers="r10c1-t35 r1c2-t35">Host variable which will receive the item&#39;s value.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t35" headers="r1c1-t35"><span class="italic">item_name</span></td>
<td class="cellalignment833" headers="r11c1-t35 r1c2-t35">Where item_name is found in <a href="pc_14ady.htm#g1022893">Table 14-4, &#34;Definitions of Descriptor Item Names for GET DESCRIPTOR&#34;</a>, and <a href="pc_14ady.htm#g1022973">Table 14-5, &#34;Oracle Extensions to Definitions of Descriptor Item Names for GET DESCRIPTOR&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4884"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option. The array size clause can be used with DATA, RETURNED_LENGTH, and INDICATOR item names. See <a href="pc_14ady.htm#i1007253">GET DESCRIPTOR</a>.</p>
<p class="subhead1"><a id="LNPCC4885"></a>Example</p>
<pre>EXEC SQL GET DESCRIPTOR GLOBAL &#39;mydesc&#39; :mydesc_num_vars = COUNT ;
</pre>
<p class="subhead1"><a id="LNPCC4886"></a>Related Topics</p>
<p><a href="#CHEJEJEE">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDHGBA">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)</a>.</p>
<p><a href="#CHEGDJGA">SET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDDEJD"></a>
<div id="LNPCC02010" class="sect1">
<h2 class="sect1">INSERT (Executable Embedded SQL)<a id="sthref2637"></a><a id="sthref2638"></a><a id="sthref2639"></a><a id="sthref2640"></a><a id="sthref2641"></a><a id="sthref2642"></a></h2>
<p class="subhead1"><a id="LNPCC4887"></a>Purpose</p>
<p>To add rows to a table or to a view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCC4888"></a>Prerequisites</p>
<p>For you to insert rows into a table, the table must be in your own schema or you must have INSERT privilege on the table.</p>
<p>For you to insert rows into the base table of a view, the owner of the schema containing the view must have INSERT privilege on the base table. Also, if the view is in a schema other than your own, you must have INSERT privilege on the view.</p>
<p>The INSERT ANY TABLE system privilege also provides the ability to insert rows into any table or any view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCC4889"></a>Syntax</p>
<img width="600" height="267" src="img/insert.gif" alt="Description of insert.gif follows"/><br/>
<a id="sthref2643" href="img_text/insert.htm">Description of the illustration insert.gif</a><br/>
<br/>
<p>Where the DML returning clause is:</p>
<img width="600" height="96" src="img/return.gif" alt="Description of return.gif follows"/><br/>
<a id="sthref2644" href="img_text/return.htm">Description of the illustration return.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4890"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for INSERT statement" summary="keywords and parameters for INSERT statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t36">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t36" headers="r1c1-t36">AT</td>
<td class="cellalignment833" headers="r2c1-t36 r1c2-t36"><a id="sthref2645"></a>Identifies the database on which the INSERT statement is executed. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> Is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="bolditalic">host_variable</span><span class="bold">:</span> Is a host variable whose value is a db_name. If you omit this clause, the INSERT statement is executed on your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t36" headers="r1c1-t36">FOR :host_integer
<p>integer</p>
</td>
<td class="cellalignment833" headers="r3c1-t36 r1c2-t36">Limits the number of times the statement is executed if the VALUES clause contains array host variables.
<p>If you omit this clause, Oracle executes the statement once for each component in the smallest array.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t36" headers="r1c1-t36"><span class="italic">schema</span></td>
<td class="cellalignment833" headers="r4c1-t36 r1c2-t36">The schema containing the table or view. If you omit schema, Oracle assumes the table or view is in your own schema.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t36" headers="r1c1-t36"><span class="italic">table</span>
<p><span class="italic">view</span></p>
</td>
<td class="cellalignment833" headers="r5c1-t36 r1c2-t36">The name of the table into which rows are to be inserted.
<p>If you specify view, Oracle inserts rows into the view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t36" headers="r1c1-t36"><span class="italic">db_link</span></td>
<td class="cellalignment833" headers="r6c1-t36 r1c2-t36"><a id="sthref2646"></a>A complete or partial name of a database link to a remote database where the table or view is located. For information on referring to database links, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.
<p>You can only insert rows into a remote table or view if you are using Oracle with the distributed option.</p>
<p>If you omit <code>dblink,</code> Oracle assumes that the table or view is on the local database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t36" headers="r1c1-t36"><span class="italic">part_name</span></td>
<td class="cellalignment833" headers="r7c1-t36 r1c2-t36">Is the name of a partition of the table.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t36" headers="r1c1-t36"><span class="italic">column</span></td>
<td class="cellalignment833" headers="r8c1-t36 r1c2-t36">If you omit one of the table&#39;s columns from this list, the column&#39;s value for the inserted row is the column&#39;s default value as specified when the table was created. If you omit the column list altogether, the VALUES clause or query must specify values for all columns in the table.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t36" headers="r1c1-t36">VALUES</td>
<td class="cellalignment833" headers="r9c1-t36 r1c2-t36"><a id="sthref2647"></a>Specifies a row of values to be inserted into the table or view. See the syntax description in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>. The expressions can be host variables with optional indicator variables. You must specify an expression in the VALUES clause for each column in the column list.<a id="sthref2648"></a></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t36" headers="r1c1-t36"><span class="italic">subquery</span></td>
<td class="cellalignment833" headers="r10c1-t36 r1c2-t36">Is a subquery that returns rows that are inserted into the table. The select list of this subquery must have the same number of columns as the column list of the INSERT statement. For the syntax description of a subquery, see &#34;SELECT&#34; in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t36" headers="r1c1-t36"><span class="italic">DML returning clause</span></td>
<td class="cellalignment833" headers="r11c1-t36 r1c2-t36">See <a href="pc_06sql.htm#i5385">&#34;The DML Returning Clause&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC4891"></a>Usage Notes</p>
<p>Any host variables that appear in the WHERE clause must be either all scalars or all arrays. If they are scalars, Oracle executes the INSERT statement once. If they are arrays, Oracle executes the INSERT statement once for each set of array components, inserting one row each time.</p>
<p>Array host variables in the WHERE clause can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>Size of the smallest array</p>
</li>
<li>
<p>The value of the :<span class="italic">host_integer</span> in the optional FOR clause.</p>
</li>
</ul>
<p>For more information on this statement, see <a href="pc_06sql.htm#i2177">&#34;The INSERT Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4892"></a>Example I</p>
<p><a id="sthref2649"></a>This example illustrates the use of the embedded SQL INSERT statement:</p>
<pre>EXEC SQL 
     INSERT INTO emp (ename, empno, sal) 
     VALUES (:ename, :empno, :sal) ; 
</pre>
<p class="subhead1"><a id="LNPCC4893"></a>Example II</p>
<p>This example shows an embedded SQL INSERT statement with a subquery:</p>
<pre>EXEC SQL 
   INSERT INTO new_emp (ename, empno, sal) 
   SELECT ename, empno, sal FROM emp
   WHERE deptno = :deptno ; 
</pre>
<p class="subhead1"><a id="LNPCC4894"></a>Related Topics</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHHABH"></a>
<div id="LNPCC02019" class="sect1">
<h2 class="sect1">LOB APPEND <a id="sthref2650"></a><a id="sthref2651"></a>(Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4895"></a>Purpose</p>
<p>To append a LOB to the end of another LOB.</p>
<p class="subhead1"><a id="LNPCC4896"></a>Prerequisites</p>
<p>LOB buffering must not be enabled.The destination LOB must have been initialized.</p>
<p class="subhead1"><a id="LNPCC4897"></a>Syntax</p>
<img width="496" height="90" src="img/lobapp.gif" alt="Description of lobapp.gif follows"/><br/>
<a id="sthref2652" href="img_text/lobapp.htm">Description of the illustration lobapp.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4898"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005971">&#34;APPEND&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4899"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEGJDE"></a>
<div id="LNPCC02018" class="sect1">
<h2 class="sect1">LOB ASSIGN<a id="sthref2653"></a><a id="sthref2654"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4900"></a>Purpose</p>
<p>To assign a LOB or BFILE locator to another locator.</p>
<p class="subhead1"><a id="LNPCC4901"></a>Syntax</p>
<img width="496" height="66" src="img/lobass.gif" alt="Description of lobass.gif follows"/><br/>
<a id="sthref2655" href="img_text/lobass.htm">Description of the illustration lobass.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4902"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005972">&#34;ASSIGN&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4903"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHECDJED"></a>
<div id="LNPCC02027" class="sect1">
<h2 class="sect1">LOB CLOSE<a id="sthref2656"></a><a id="sthref2657"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4904"></a>Purpose</p>
<p>To close an open LOB or BFILE.</p>
<p class="subhead1"><a id="LNPCC4905"></a>Syntax</p>
<img width="496" height="70" src="img/lobclose.gif" alt="Description of lobclose.gif follows"/><br/>
<a id="sthref2658" href="img_text/lobclose.htm">Description of the illustration lobclose.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4906"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1006635">&#34;CLOSE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4907"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEICFGI"></a>
<div id="LNPCC02016" class="sect1">
<h2 class="sect1">LOB COPY<a id="sthref2659"></a><a id="sthref2660"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4908"></a>Purpose</p>
<p>To copy all or part of a LOB value into another LOB.</p>
<p class="subhead1"><a id="LNPCC4909"></a>Syntax</p>
<img width="496" height="122" src="img/lobcop.gif" alt="Description of lobcop.gif follows"/><br/>
<a id="sthref2661" href="img_text/lobcop.htm">Description of the illustration lobcop.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4910"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005974">&#34;COPY&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4911"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHECFHIF"></a>
<div id="LNPCC02026" class="sect1">
<h2 class="sect1">LOB CREATE<a id="sthref2662"></a><a id="sthref2663"></a> TEMPORARY (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4912"></a>Purpose</p>
<p>To create a temporary LOB.</p>
<p class="subhead1"><a id="LNPCC4913"></a>Syntax</p>
<img width="496" height="82" src="img/lobcreat.gif" alt="Description of lobcreat.gif follows"/><br/>
<a id="sthref2664" href="img_text/lobcreat.htm">Description of the illustration lobcreat.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4914"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005975">&#34;CREATE TEMPORARY&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4915"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEJAHAC"></a>
<div id="LNPCC02012" class="sect1">
<h2 class="sect1">LOB DESCRIBE<a id="sthref2665"></a><a id="sthref2666"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4916"></a>Purpose</p>
<p>To retrieve attributes from a LOB.</p>
<p class="subhead1"><a id="LNPCC4917"></a>Syntax</p>
<img width="496" height="170" src="img/lobdesc.gif" alt="Description of lobdesc.gif follows"/><br/>
<a id="sthref2667" href="img_text/lobdesc.htm">Description of the illustration lobdesc.gif</a><br/>
<br/>
<p>where <code>attrib</code> is:</p>
<img width="496" height="180" src="img/lobatt.gif" alt="Description of lobatt.gif follows"/><br/>
<a id="sthref2668" href="img_text/lobatt.htm">Description of the illustration lobatt.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4918"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1006677">&#34;DESCRIBE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4919"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEBDHIE"></a>
<div id="LNPCC02024" class="sect1">
<h2 class="sect1">LOB DISABLE BUFFERING<a id="sthref2669"></a><a id="sthref2670"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4920"></a>Purpose</p>
<p>To disable LOB buffering.</p>
<p class="subhead1"><a id="LNPCC4921"></a>Syntax</p>
<img width="496" height="69" src="img/lobdisab.gif" alt="Description of lobdisab.gif follows"/><br/>
<a id="sthref2671" href="img_text/lobdisab.htm">Description of the illustration lobdisab.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4922"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005976">&#34;DISABLE BUFFERING&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4923"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDBAJB"></a>
<div id="LNPCC02022" class="sect1">
<h2 class="sect1">LOB ENABLE BUFFERING<a id="sthref2672"></a><a id="sthref2673"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4924"></a>Purpose</p>
<p>To enable LOB buffering.</p>
<p class="subhead1"><a id="LNPCC4925"></a>Syntax</p>
<img width="496" height="75" src="img/lobenab.gif" alt="Description of lobenab.gif follows"/><br/>
<a id="sthref2674" href="img_text/lobenab.htm">Description of the illustration lobenab.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4926"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1007921">&#34;ENABLE BUFFERING&#34;</a></p>
<p class="subhead1"><a id="LNPCC4927"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEAFJC"></a>
<div id="LNPCC02021" class="sect1">
<h2 class="sect1">LOB ERASE<a id="sthref2675"></a><a id="sthref2676"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4928"></a>Purpose</p>
<p>To erase a given amount of LOB data starting from a given offset.</p>
<p class="subhead1"><a id="LNPCC4929"></a>Syntax</p>
<img width="496" height="106" src="img/loberas.gif" alt="Description of loberas.gif follows"/><br/>
<a id="sthref2677" href="img_text/loberas.htm">Description of the illustration loberas.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4930"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1006646">&#34;ERASE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4931"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHECBDAC"></a>
<div id="LNPCC02028" class="sect1">
<h2 class="sect1">LOB FILE CLOSE<a id="sthref2678"></a><a id="sthref2679"></a> ALL (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4932"></a>Purpose</p>
<p>To close all open BFILEs in the current session.</p>
<p class="subhead1"><a id="LNPCC4933"></a>Syntax</p>
<img width="496" height="70" src="img/lobficl.gif" alt="Description of lobficl.gif follows"/><br/>
<a id="sthref2680" href="img_text/lobficl.htm">Description of the illustration lobficl.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4934"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1009092">&#34;FILE CLOSE ALL&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4935"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGHBCH"></a>
<div id="LNPCC02029" class="sect1">
<h2 class="sect1">LOB FILE SET<a id="sthref2681"></a><a id="sthref2682"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4936"></a>Purpose</p>
<p>To set DIRECTORY and FILENAME in a BFILE locator.</p>
<p class="subhead1"><a id="LNPCC4937"></a>Syntax</p>
<img width="496" height="114" src="img/lobfise.gif" alt="Description of lobfise.gif follows"/><br/>
<a id="sthref2683" href="img_text/lobfise.htm">Description of the illustration lobfise.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4938"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005979">&#34;FILE SET&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4939"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGEHIJ"></a>
<div id="LNPCC02023" class="sect1">
<h2 class="sect1">LOB FLUSH BUFFER<a id="sthref2684"></a><a id="sthref2685"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4940"></a>Purpose</p>
<p>To write the LOB buffers to the database server.</p>
<p class="subhead1"><a id="LNPCC4941"></a>Syntax</p>
<img width="600" height="72" src="img/lobflbuf.gif" alt="Description of lobflbuf.gif follows"/><br/>
<a id="sthref2686" href="img_text/lobflbuf.htm">Description of the illustration lobflbuf.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4942"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1006658">&#34;FLUSH BUFFER&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4943"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHFEBJ"></a>
<div id="LNPCC02025" class="sect1">
<h2 class="sect1">LOB FREE TEMPORARY<a id="sthref2687"></a><a id="sthref2688"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4944"></a>Purpose</p>
<p>To free temporary space for the LOB locator.</p>
<p class="subhead1"><a id="LNPCC4945"></a>Syntax</p>
<img width="496" height="80" src="img/lobfrtem.gif" alt="Description of lobfrtem.gif follows"/><br/>
<a id="sthref2689" href="img_text/lobfrtem.htm">Description of the illustration lobfrtem.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4946"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005981">&#34;FREE TEMPORARY&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4947"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIFHBF"></a>
<div id="LNPCC02011" class="sect1">
<h2 class="sect1">LOB LOAD<a id="sthref2690"></a><a id="sthref2691"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4948"></a>Purpose</p>
<p>To copy all or part of a BFILE into an internal LOB.</p>
<p class="subhead1"><a id="LNPCC4949"></a>Syntax</p>
<img width="496" height="131" src="img/loblofr.gif" alt="Description of loblofr.gif follows"/><br/>
<a id="sthref2692" href="img_text/loblofr.htm">Description of the illustration loblofr.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4950"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005982">&#34;LOAD FROM FILE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4951"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHECBFJA"></a>
<div id="LNPCC02013" class="sect1">
<h2 class="sect1">LOB OPEN<a id="sthref2693"></a><a id="sthref2694"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4952"></a>Purpose</p>
<p>To open a LOB or BFILE for read or read/write access.</p>
<p class="subhead1"><a id="LNPCC4953"></a>Syntax</p>
<img width="600" height="72" src="img/lobopen.gif" alt="Description of lobopen.gif follows"/><br/>
<a id="sthref2695" href="img_text/lobopen.htm">Description of the illustration lobopen.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4954"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1005983">&#34;OPEN&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4955"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEDFDI"></a>
<div id="LNPCC02015" class="sect1">
<h2 class="sect1">LOB READ<a id="sthref2696"></a><a id="sthref2697"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4956"></a>Purpose</p>
<p>To read all or part of a LOB or BFILE into a buffer.</p>
<p class="subhead1"><a id="LNPCC4957"></a>Syntax</p>
<img width="600" height="116" src="img/lobread.gif" alt="Description of lobread.gif follows"/><br/>
<a id="sthref2698" href="img_text/lobread.htm">Description of the illustration lobread.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4958"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1006674">&#34;READ&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4959"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIBIAE"></a>
<div id="LNPCC02020" class="sect1">
<h2 class="sect1">LOB TRIM<a id="sthref2699"></a><a id="sthref2700"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4960"></a>Purpose</p>
<p>To truncate a LOB value.</p>
<p class="subhead1"><a id="LNPCC4961"></a>Syntax</p>
<img width="600" height="69" src="img/lobtrim.gif" alt="Description of lobtrim.gif follows"/><br/>
<a id="sthref2701" href="img_text/lobtrim.htm">Description of the illustration lobtrim.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4962"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1006881">&#34;TRIM&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4963"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGJHED"></a>
<div id="LNPCC02014" class="sect1">
<h2 class="sect1">LOB WRITE<a id="sthref2702"></a><a id="sthref2703"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC4964"></a>Purpose</p>
<p>To write the contents of a buffer to a LOB.</p>
<p class="subhead1"><a id="LNPCC4965"></a>Syntax</p>
<img width="496" height="242" src="img/lobwri.gif" alt="Description of lobwri.gif follows"/><br/>
<a id="sthref2704" href="img_text/lobwri.htm">Description of the illustration lobwri.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4966"></a>Usage Notes</p>
<p>For usage notes as well as keywords, parameters, and examples, see <a href="pc_16lob.htm#i1006676">&#34;WRITE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4967"></a>Related Topics</p>
<p>See the other LOB statements.</p>
</div>
<!-- class="sect1" -->
<a id="CHEFICGC"></a>
<div id="LNPCC4968" class="sect1">
<h2 class="sect1">OBJECT CREATE (Executable Embedded SQL Extension)<a id="sthref2705"></a><a id="sthref2706"></a></h2>
<p class="subhead1"><a id="LNPCC4969"></a>Purpose</p>
<p>To create a referenceable object in the object cache.</p>
<p class="subhead1"><a id="LNPCC4970"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC4971"></a>Syntax</p>
<img width="496" height="159" src="img/objcrea.gif" alt="Description of objcrea.gif follows"/><br/>
<a id="sthref2707" href="img_text/objcrea.htm">Description of the illustration objcrea.gif</a><br/>
<br/>
<p>where tab is:</p>
<img width="496" height="76" src="img/objtab.gif" alt="Description of objtab.gif follows"/><br/>
<a id="sthref2708" href="img_text/objtab.htm">Description of the illustration objtab.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4972"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449257">&#34;OBJECT CREATE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4973"></a>Example</p>
<pre>person *pers_p;
person_ind *pers_ind;
person_ref *pers_ref;
...
EXEC SQL OBJECT CREATE :pers_p:pers_ind TABLE PERSON_TAB
          RETURNING REF INTO :pers_ref ;
</pre>
<p class="subhead1"><a id="LNPCC4974"></a>Related Topics</p>
<p>See all other OBJECT statements in this appendix.</p>
</div>
<!-- class="sect1" -->
<a id="CHEJFEEB"></a>
<div id="LNPCC4975" class="sect1">
<h2 class="sect1">OBJECT DELETE (Executable Embedded SQL Extension)<a id="sthref2709"></a><a id="sthref2710"></a></h2>
<p class="subhead1"><a id="LNPCC4976"></a>Purpose</p>
<p>To mark a persistent object or array of objects as deleted in the object cache.</p>
<p class="subhead1"><a id="LNPCC4977"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC4978"></a>Syntax</p>
<img width="496" height="112" src="img/objdel.gif" alt="Description of objdel.gif follows"/><br/>
<a id="sthref2711" href="img_text/objdel.htm">Description of the illustration objdel.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4979"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449259">&#34;OBJECT DELETE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4980"></a>Example</p>
<pre>customer *cust_p;
...
EXEC SQL OBJECT DELETE :cust_p;
</pre>
<p class="subhead1"><a id="LNPCC4981"></a>Related Topics</p>
<p>See all other OBJECT statements in this Appendix.For persistent objects, this statement marks an object or array of objects as deleted in the object cache.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGAJID"></a>
<div id="LNPCC4982" class="sect1">
<h2 class="sect1">OBJECT DEREF (Executable Embedded SQL Extension)<a id="sthref2712"></a><a id="sthref2713"></a></h2>
<p class="subhead1"><a id="LNPCC4983"></a>Purpose</p>
<p>To pin an object or array of objects in the object cache.</p>
<p class="subhead1"><a id="LNPCC4984"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC4985"></a>Syntax</p>
<img width="496" height="192" src="img/objder.gif" alt="Description of objder.gif follows"/><br/>
<a id="sthref2714" href="img_text/objder.htm">Description of the illustration objder.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4986"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449258">&#34;OBJECT DEREF&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4987"></a>Example</p>
<pre>person *pers_p;
person_ref *pers_ref;
...
/* Pin the person REF, returning a pointer to the person object */
EXEC SQL OBJECT DEREF :pers_ref INTO :pers_p;
</pre>
<p class="subhead1"><a id="LNPCC4988"></a>Related Topics</p>
<p>See all other OBJECT statements in this Appendix. See <a href="#CHEHGEEG">&#34;ALLOCATE (Executable Embedded SQL Extension)&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHECGEED"></a>
<div id="LNPCC4989" class="sect1">
<h2 class="sect1">OBJECT FLUSH (Executable Embedded SQL Extension)<a id="sthref2715"></a><a id="sthref2716"></a></h2>
<p class="subhead1"><a id="LNPCC4990"></a>Purpose</p>
<p>To flush persistent objects that have been marked as updated, deleted, or created, to the server.</p>
<p class="subhead1"><a id="LNPCC4991"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC4992"></a>Syntax</p>
<img width="496" height="122" src="img/objflu.gif" alt="Description of objflu.gif follows"/><br/>
<a id="sthref2717" href="img_text/objflu.htm">Description of the illustration objflu.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC4993"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449260">&#34;OBJECT FLUSH&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC4994"></a>Example</p>
<pre>person *pers_p;
...
EXEC SQL OBJECT DELETE :pers_p;
/* Flush the changes, effectively deleting the person object */
EXEC SQL OBJECT FLUSH :pers_p;
/* Finally, free all object cache memory and logoff */
EXEC SQL OBJECT CACHE FREE ALL;
EXEC SQL COMMIT WORK RELEASE;
</pre>
<p class="subhead1"><a id="LNPCC4995"></a>Related Topics</p>
<p>See all other OBJECT statements in this Appendix.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIEBDA"></a>
<div id="LNPCC4996" class="sect1">
<h2 class="sect1">OBJECT GET (Executable Embedded SQL Extension)<a id="sthref2718"></a><a id="sthref2719"></a></h2>
<p class="subhead1"><a id="LNPCC4997"></a>Purpose</p>
<p>To convert attributes of an object type to native C types</p>
<p class="subhead1"><a id="LNPCC4998"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC4999"></a>Syntax</p>
<img width="496" height="279" src="img/objget.gif" alt="Description of objget.gif follows"/><br/>
<a id="sthref2720" href="img_text/objget.htm">Description of the illustration objget.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5000"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449298">&#34;OBJECT GET&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5001"></a>Example</p>
<pre>person *pers_p;
struct { char lname[21], fname[21]; int age; } pers;
...
/* Convert object types to native C types */
EXEC SQL OBJECT GET lastname, firstname, age FROM :pers_p INTO :pers;
printf(&#34;Last Name: %s\nFirstName: %s\nAge: %d\n&#34;,
        pers.lname, pers.fname, pers.age );
</pre>
<p class="subhead1"><a id="LNPCC5002"></a>Related Topics</p>
<p>See all other OBJECT statements in this Appendix.</p>
</div>
<!-- class="sect1" -->
<a id="CHEBJBFH"></a>
<div id="LNPCC5003" class="sect1">
<h2 class="sect1">OBJECT RELEASE (Executable Embedded SQL Extension)<a id="sthref2721"></a><a id="sthref2722"></a></h2>
<p class="subhead1"><a id="LNPCC5004"></a>Purpose</p>
<p>To unpin an object in the object cache. When an object is not pinned and not updated, it is eligible for implicit freeing.</p>
<p class="subhead1"><a id="LNPCC5005"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC5006"></a>Syntax</p>
<img width="496" height="144" src="img/objrel.gif" alt="Description of objrel.gif follows"/><br/>
<a id="sthref2723" href="img_text/objrel.htm">Description of the illustration objrel.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5007"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449262">&#34;OBJECT RELEASE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5008"></a>Example</p>
<pre>person *pers_p;
...
EXEC SQL OBJECT RELEASE :pers_p;
</pre>
<p class="subhead1"><a id="LNPCC5009"></a>Related Topics</p>
<p>See all other OBJECT statements in this Appendix.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIGJGH"></a>
<div id="LNPCC5010" class="sect1">
<h2 class="sect1">OBJECT SET (Executable Embedded SQL Extension)<a id="sthref2724"></a><a id="sthref2725"></a></h2>
<p class="subhead1"><a id="LNPCC5011"></a>Purpose</p>
<p>To update attributes of persistent objects, marking them eligible for writing to the server when the object is flushed or the cache is flushed.</p>
<p>To update the attributes of a transient object.</p>
<p class="subhead1"><a id="LNPCC5012"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC5013"></a>Syntax</p>
<img width="496" height="320" src="img/objset.gif" alt="Description of objset.gif follows"/><br/>
<a id="sthref2726" href="img_text/objset.htm">Description of the illustration objset.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5014"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449260">&#34;OBJECT FLUSH&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5015"></a>Example</p>
<pre>person *pers_p;
struct {int num; char street[61], city[31], state[3], zip[11];} addr1;
...
addr1.num = 500;
strcpy((char *)addr1.street , (char *)&#34;Oracle Parkway&#34;);
strcpy((char *)addr1.city,    (char *)&#34;Redwood Shores&#34;);
strcpy((char *)addr1.state,   (char *)&#34;CA&#34;);
strcpy((char *)addr1.zip,     (char *)&#34;94065&#34;);

/* Convert native C types to object types */
EXEC SQL OBJECT SET :pers_p-&gt;addr TO :addr1;
</pre>
<p class="subhead1"><a id="LNPCC5016"></a>Related Topics</p>
<p>See all other OBJECT statements in this Appendix.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGFHBB"></a>
<div id="LNPCC5017" class="sect1">
<h2 class="sect1">OBJECT UPDATE (Executable Embedded SQL Extension)<a id="sthref2727"></a><a id="sthref2728"></a></h2>
<p class="subhead1"><a id="LNPCC5018"></a>Purpose</p>
<p>To mark a persistent object or array of objects as updated in the object cache.</p>
<p class="subhead1"><a id="LNPCC5019"></a>Prerequisites</p>
<p>Precompiler option OBJECTS must be set to YES. The INTYPE option must specify the OTT-generated type files. Include OTT-generated header files in your program.</p>
<p class="subhead1"><a id="LNPCC5020"></a>Syntax</p>
<img width="496" height="107" src="img/objupd.gif" alt="Description of objupd.gif follows"/><br/>
<a id="sthref2729" href="img_text/objupd.htm">Description of the illustration objupd.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5021"></a>Usage Notes</p>
<p>For usage notes as well as keywords and parameters, see <a href="pc_17obj.htm#i449397">&#34;OBJECT UPDATE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5022"></a>Example</p>
<pre>person *pers_p;
...
/* Mark as updated */
EXEC SQL OBJECT UPDATE :pers_p;
</pre>
<p class="subhead1"><a id="LNPCC5023"></a>Related Topics</p>
<p>See all other OBJECT statements in this Appendix.</p>
</div>
<!-- class="sect1" -->
<a id="CHEJCGFH"></a>
<div id="LNPCC5024" class="sect1">
<h2 class="sect1">OPEN (Executable Embedded SQL)<a id="sthref2730"></a><a id="sthref2731"></a><a id="sthref2732"></a><a id="sthref2733"></a><a id="sthref2734"></a></h2>
<p class="subhead1"><a id="LNPCC5025"></a>Purpose</p>
<p>To open a cursor, evaluating the associated query and substituting the host variable names supplied by the USING clause into the WHERE clause of the query. For the ANSI Dynamic SQL Method 4 version, see <a href="#CHEEIHEJ">&#34;OPEN DESCRIPTOR (Executable Embedded SQL)&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5026"></a>Prerequisites</p>
<p>You must declare the cursor with a DECLARE CURSOR embedded SQL statement before opening it.</p>
<p class="subhead1"><a id="LNPCC5027"></a>Syntax</p>
<img width="496" height="207" src="img/openo.gif" alt="Description of openo.gif follows"/><br/>
<a id="sthref2735" href="img_text/openo.htm">Description of the illustration openo.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5028"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for OPEN statement" summary="keywords and parameters for OPEN statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t37">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t37" headers="r1c1-t37"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment833" headers="r2c1-t37 r1c2-t37">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t37" headers="r1c1-t37"><span class="italic">cursor</span></td>
<td class="cellalignment833" headers="r3c1-t37 r1c2-t37">The (previously declared) cursor to be opened.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t37" headers="r1c1-t37"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r4c1-t37 r1c2-t37">Specifies a host variable<a id="sthref2736"></a> with an optional indicator variable to be substituted into the statement associated with the cursor.
<p><a id="sthref2737"></a>CANNOT be used together with an ANSI descriptor (INTO clause).</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t37" headers="r1c1-t37">DESCRIPTOR <span class="italic">SQLDA_descriptor</span></td>
<td class="cellalignment833" headers="r5c1-t37 r1c2-t37">Specifies an Oracle descriptor that describes the host variables to be substituted into the WHERE clause of the associated query. The descriptor must be initialized in a previous DESCRIBE statement. The substitution is based on position. The host variable names specified in this statement can be different from the variable names in the associated query.
<p>CANNOT be used together with an ANSI descriptor (INTO clause).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5029"></a>Usage Notes</p>
<p>The OPEN statement defines the active set of rows and initializes the cursor just before the first row of the active set. The values of the host variables at the time of the OPEN are substituted in the statement. This statement does not actually retrieve rows; rows are retrieved by the FETCH statement.<a id="sthref2738"></a></p>
<p>Once you have opened a cursor, its input host variables are not reexamined until you reopen the cursor. To change any input host variables and therefore the active set, you must reopen the cursor.</p>
<p>All cursors in a program are in a closed state when the program is initiated or when they have been explicitly closed using the CLOSE statement.</p>
<p>You can reopen a cursor without first closing it. For more information on this statement, see <a href="pc_06sql.htm#i2177">&#34;The INSERT Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5030"></a>Example</p>
<p><a id="sthref2739"></a>This example illustrates the use of the OPEN statement in a Pro*C/C++ program:</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR FOR 
    SELECT ename, empno, job, sal 
    FROM emp 
    WHERE deptno = :deptno; 
EXEC SQL OPEN emp_cursor;
</pre>
<p class="subhead1"><a id="LNPCC5031"></a>Related Topics</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEIGHDJ">DECLARE STATEMENT (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEHIJCA">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEIHEJ"></a>
<div id="LNPCC5032" class="sect1">
<h2 class="sect1">OPEN DESCRIPTOR (Executable Embedded SQL)<a id="sthref2740"></a><a id="sthref2741"></a><a id="sthref2742"></a><a id="sthref2743"></a></h2>
<p class="subhead1"><a id="LNPCC5033"></a>Purpose</p>
<p>To open a cursor (for ANSI Dynamic SQL Method 4), evaluating the associated query and substituting the input host variable names supplied by the USING clause into the WHERE clause of the query. The INTO clause denotes the output descriptor.</p>
<p class="subhead1"><a id="LNPCC5034"></a>Prerequisites</p>
<p>You must declare the cursor with a DECLARE CURSOR embedded SQL statement before opening it.</p>
<p class="subhead1"><a id="LNPCC5035"></a>Syntax</p>
<img width="600" height="308" src="img/opena.gif" alt="Description of opena.gif follows"/><br/>
<a id="sthref2744" href="img_text/opena.htm">Description of the illustration opena.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5036"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for OPEN DESCRIPTOR statement" summary="keywords and parameters for OPEN DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t38">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t38" headers="r1c1-t38"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment833" headers="r2c1-t38 r1c2-t38">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t38" headers="r1c1-t38"><span class="italic">cursor</span></td>
<td class="cellalignment833" headers="r3c1-t38 r1c2-t38">The (previously declared) cursor to be opened.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t38" headers="r1c1-t38">USING DESCRIPTOR</td>
<td class="cellalignment833" headers="r4c1-t38 r1c2-t38">Specifies an ANSI input descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t38" headers="r1c1-t38"><span class="italic">descriptor_name</span></td>
<td class="cellalignment833" headers="r5c1-t38 r1c2-t38">The host variable containing the name of the ANSI descriptor,</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t38" headers="r1c1-t38"><span class="italic">&#39;descriptor name&#39;</span></td>
<td class="cellalignment833" headers="r6c1-t38 r1c2-t38">The name of the ANSI descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t38" headers="r1c1-t38">INTO DESCRIPTOR</td>
<td class="cellalignment833" headers="r7c1-t38 r1c2-t38">Specifies an ANSI output descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t38" headers="r1c1-t38"><span class="italic">descriptor_name</span></td>
<td class="cellalignment833" headers="r8c1-t38 r1c2-t38">The host variable containing the name of the ANSI descriptor,</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t38" headers="r1c1-t38"><span class="italic">&#39;descriptor name&#39;</span></td>
<td class="cellalignment833" headers="r9c1-t38 r1c2-t38">The name of the ANSI descriptor.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t38" headers="r1c1-t38">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r10c1-t38 r1c2-t38">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5037"></a>Usage Notes</p>
<p>Set the precompiler option DYNAMIC to ANSI.</p>
<p>The OPEN statement defines the active set of rows and initializes the cursor just before the first row of the active set. The values of the host variables at the time of the OPEN are substituted in the SQL statement. This statement does not actually retrieve rows; rows are retrieved by the FETCH statement.<a id="sthref2745"></a></p>
<p>Once you have opened a cursor, its input host variables are not reexamined until you reopen the cursor. To change any input host variables and therefore the active set, you must reopen the cursor.</p>
<p>All cursors in a program are in a closed state when the program is initiated or when they have been explicitly closed using the CLOSE statement.</p>
<p>You can reopen a cursor without first closing it. For more information on this statement, see <a href="pc_06sql.htm#i2177">&#34;The INSERT Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5038"></a>Example</p>
<pre>char dyn_statement[1024] ;
...
EXEC SQL ALLOCATE DESCRIPTOR &#39;input_descriptor&#39; ;
EXEC SQL ALLOCATE DESCRIPTOR &#39;output descriptor&#39;
...
EXEC SQL PREPARE S FROM :dyn_statement ;
EXEC SQL DECLARE C CURSOR FOR S ;
...
EXEC SQL OPEN C USING DESCRIPTOR &#39;input_descriptor&#39; ;
...
</pre>
<p class="subhead1"><a id="LNPCC5039"></a>Related Topics</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEFHBDF">FETCH DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDBBAF"></a>
<div id="LNPCC5040" class="sect1">
<h2 class="sect1">PREPARE (Executable Embedded SQL)<a id="sthref2746"></a><a id="sthref2747"></a><a id="sthref2748"></a></h2>
<p class="subhead1"><a id="LNPCC5041"></a>Purpose</p>
<p><a id="sthref2749"></a>To parse a SQL statement or PL/SQL block specified by a host variable and associate it with an identifier.</p>
<p class="subhead1"><a id="LNPCC5042"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC5043"></a>Syntax</p>
<img width="600" height="104" src="img/prepare.gif" alt="Description of prepare.gif follows"/><br/>
<a id="sthref2750" href="img_text/prepare.htm">Description of the illustration prepare.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5044"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for PREPARE statement" summary="keywords and parameters for PREPARE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t39">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t39" headers="r1c1-t39"><span class="italic">statement_id</span></td>
<td class="cellalignment833" headers="r2c1-t39 r1c2-t39">Is the identifier to be associated with the prepared SQL statement or PL/SQL block. If this identifier was previously assigned to another statement or block, the prior assignment is superseded.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t39" headers="r1c1-t39">db_name</td>
<td class="cellalignment833" headers="r3c1-t39 r1c2-t39">A null-terminated string containing the database connection name, as established previously in a CONNECT statement. If it is omitted, or if it is an empty string, the default database connection is assumed.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t39" headers="r1c1-t39"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r4c1-t39 r1c2-t39">A host variable containing the name of the database connection.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t39" headers="r1c1-t39"><span class="italic">text</span></td>
<td class="cellalignment833" headers="r5c1-t39 r1c2-t39">Is a string literal containing a SQL statement or PL/SQL block to be prepared.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t39" headers="r1c1-t39"><span class="italic">select_command</span></td>
<td class="cellalignment833" headers="r6c1-t39 r1c2-t39">Is a select statement</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5045"></a>Usage Notes</p>
<p>Any variables that appear in the <span class="italic">host_string</span> or <span class="italic">text</span> are placeholders. The actual host variable names are assigned in the USING clause of the OPEN statement (input host variables) or in the INTO clause of the FETCH statement (output host variables).</p>
<p>A SQL statement is prepared only once, but can be executed any number of times. For more information, see <a href="pc_13dyn.htm#i2460">&#34;PREPARE&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5046"></a>Example</p>
<p><a id="sthref2751"></a>This example illustrates the use of a PREPARE statement in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL PREPARE my_statement FROM :my_string; 
EXEC SQL EXECUTE my_statement;
</pre>
<p class="subhead1"><a id="LNPCC5047"></a>Related Topics</p>
<p><a href="#CHEIBHJF">CLOSE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEFHBDF">FETCH DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEJCGFH">OPEN (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEEBGAG"></a>
<div id="LNPCC5048" class="sect1">
<h2 class="sect1">REGISTER CONNECT<a id="sthref2752"></a><a id="sthref2753"></a> (Executable Embedded SQL Extension)</h2>
<p class="subhead1"><a id="LNPCC5049"></a>Purpose</p>
<p>To allow an external C procedure to be called from a Pro*C/C++ application.</p>
<p class="subhead1"><a id="LNPCC5050"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC5051"></a>Syntax</p>
<img width="496" height="84" src="img/regconn.gif" alt="Description of regconn.gif follows"/><br/>
<a id="sthref2754" href="img_text/regconn.htm">Description of the illustration regconn.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5052"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for REGISTER CONNECT statement" summary="keywords and parameters for REGISTER CONNECT statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t40">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t40" headers="r1c1-t40"><span class="italic">ext_proc_ctxt</span></td>
<td class="cellalignment833" headers="r2c1-t40 r1c2-t40">The external procedure context passed to the procedure by PL/SQL. It is of type pointer to OCIExtProcContext.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t40" headers="r1c1-t40"><span class="italic">context</span></td>
<td class="cellalignment833" headers="r3c1-t40 r1c2-t40">The runtime context returned. It is of type sql_context. Currently, it is the default (global) context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5053"></a>Usage Notes</p>
<p>For a complete discussion of how to write an external procedure, and the restrictions that are in effect, see <a href="pc_07pls.htm#i8054">External Procedures</a>.</p>
<p class="subhead1"><a id="LNPCC5054"></a>Example</p>
<pre>void myfunction(epctx)
OCIExtProcContext *epctx;
sql_context context;
...
{
EXEC SQL REGISTER CONNECT USING :epctx ;
EXEC SQL USE :context;
...
</pre>
<p class="subhead1"><a id="LNPCC5055"></a>Related Topics</p>
<p>None</p>
</div>
<!-- class="sect1" -->
<a id="CHEFAAED"></a>
<div id="LNPCC5056" class="sect1">
<h2 class="sect1">ROLLBACK (Executable Embedded SQL)<a id="sthref2755"></a><a id="sthref2756"></a></h2>
<p class="subhead1"><a id="LNPCC5057"></a>Purpose</p>
<p>To undo work done in the current transaction.<a id="sthref2757"></a><a id="sthref2758"></a></p>
<p>You can also use this statement to manually undo the work done by an in-doubt distributed transaction.</p>
<p class="subhead1"><a id="LNPCC5058"></a>Prerequisites</p>
<p>To roll back your current transaction, no privileges are necessary.</p>
<p>To manually roll back an in-doubt distributed transaction that you originally committed, you must have FORCE TRANSACTION system privilege. To manually roll back an in-doubt distributed transaction originally committed by another user, you must have FORCE ANY TRANSACTION system privilege.</p>
<p class="subhead1"><a id="LNPCC5059"></a>Syntax</p>
<img width="496" height="224" src="img/rollb.gif" alt="Description of rollb.gif follows"/><br/>
<a id="sthref2759" href="img_text/rollb.htm">Description of the illustration rollb.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5060"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for ROLLBACK statement" summary="keywords and parameters for ROLLBACK statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t41">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t41" headers="r1c1-t41">AT</td>
<td class="cellalignment833" headers="r2c1-t41 r1c2-t41"><a id="sthref2760"></a>Identifies the database on which the savepoint is created. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> A null-terminated string containing the database connection name, as established previously in a CONNECT statement. If it is omitted, or if it is an empty string, the default database connection is assumed.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> A host variable containing the name of the database connection. If you omit this clause, the savepoint is created on your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t41" headers="r1c1-t41">WORK</td>
<td class="cellalignment833" headers="r3c1-t41 r1c2-t41"><a id="sthref2761"></a>Is optional and is provided for ANSI compatibility.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t41" headers="r1c1-t41">TO<a id="sthref2762"></a></td>
<td class="cellalignment833" headers="r4c1-t41 r1c2-t41">Rolls back the current transaction to the specified savepoint. If you omit this clause, the ROLLBACK statement rolls back the entire transaction.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t41" headers="r1c1-t41">FORCE</td>
<td class="cellalignment833" headers="r5c1-t41 r1c2-t41"><a id="sthref2763"></a>Manually rolls back an in-doubt distributed transaction. The transaction is identified by the text containing its local or global transaction ID. To find the IDs of such transactions, query the data dictionary view DBA_2PC_PENDING.
<p>ROLLBACK statements with the FORCE clause are not supported in PL/SQL.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t41" headers="r1c1-t41">RELEASE</td>
<td class="cellalignment833" headers="r6c1-t41 r1c2-t41">Frees all resources and disconnects the application from the database. The RELEASE clause is not allowed with SAVEPOINT and FORCE clauses.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t41" headers="r1c1-t41"><span class="italic">savepoint</span></td>
<td class="cellalignment833" headers="r7c1-t41 r1c2-t41">savepoint to which you roll back</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5061"></a>Usage Notes</p>
<p>A transaction (or a logical unit of work) is a sequence of SQL statements that Oracle treats as a single unit. A transaction begins with the first executable SQL statement after a COMMIT, ROLLBACK or connection to the database. A transaction ends with a COMMIT<a id="sthref2764"></a> statement, a ROLLBACK<a id="sthref2765"></a> statement, or disconnection (intentional or unintentional) from the database. Oracle issues an implicit COMMIT statement before and after processing any data definition language statement.</p>
<p>Using the ROLLBACK statement without the TO SAVEPOINT clause performs the following operations:</p>
<ul>
<li>
<p>Ends the transaction</p>
</li>
<li>
<p>Undoes all changes in the current transaction</p>
</li>
<li>
<p>Erases all savepoints in the transaction</p>
</li>
<li>
<p>Releases the transaction&#39;s<a id="sthref2766"></a> locks</p>
</li>
</ul>
<p>Using the ROLLBACK statement with the TO SAVEPOINT clause performs the following operations:</p>
<ul>
<li>
<p>Rolls back just the portion of the transaction after the savepoint.</p>
</li>
<li>
<p>Loses all savepoints created after that savepoint. The named savepoint is retained, so you can roll back to the same savepoint multiple times<a id="sthref2767"></a>. Prior savepoints are also retained.</p>
</li>
<li>
<p>Releases all table and row locks acquired since the savepoint. Other transactions that have requested access to rows locked after the savepoint must continue to wait until the transaction is committed or rolled back. Other transactions that have not already requested the rows can request and access the rows immediately.</p>
</li>
</ul>
<p>It is recommended that you explicitly end transactions in application programs using either a COMMIT or ROLLBACK statement. If you do not explicitly commit the transaction and the program terminates abnormally, Oracle rolls back the last uncommitted transaction.</p>
<p class="subhead1"><a id="LNPCC5062"></a>Example 1</p>
<p><a id="sthref2768"></a>The following statement rolls back your entire current transaction:</p>
<pre>EXEC SQL ROLLBACK; 
</pre>
<p class="subhead1"><a id="LNPCC5063"></a>Example 2</p>
<p>The following statement rolls back your current transaction to savepoint SP5:</p>
<pre>EXEC SQL ROLLBACK TO SAVEPOINT sp5;
</pre>
<p class="subhead1"><a id="LNPCC5064"></a>Distributed Transactions</p>
<p><a id="sthref2769"></a><a id="sthref2770"></a>Oracle with the distributed option provides the ability to perform distributed transactions, or transactions that modify data on multiple databases. To commit or roll back a distributed transaction, you need only issue a COMMIT or ROLLBACK statement as you would any other transaction.</p>
<p>If there is a network failure during the commit process for a distributed transaction, the state of the transaction may be unknown, or in-doubt. After consultation with the administrators of the other databases involved in the transaction, you may decide to manually commit or roll back the transaction on your local database. You can manually roll back the transaction on your local database by issuing a ROLLBACK statement with the FORCE clause.</p>
<p>You cannot manually roll back an in-doubt transaction to a savepoint.</p>
<p>A ROLLBACK statement with a FORCE clause only rolls back the specified transaction. Such a statement does not affect your current transaction.</p>
<p class="subhead1"><a id="LNPCC5065"></a>Example III</p>
<p>The following statement manually rolls back an in-doubt distributed transaction:</p>
<pre>EXEC SQL
    ROLLBACK WORK
    FORCE &#39;25.32.87&#39; ;
</pre>
<p class="subhead1"><a id="LNPCC5066"></a>Related Topics</p>
<p><a href="#CHEICCDA">COMMIT (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDHHAI">SAVEPOINT (Executable Embedded SQL)</a> .</p>
</div>
<!-- class="sect1" -->
<a id="CHEDHHAI"></a>
<div id="LNPCC5067" class="sect1">
<h2 class="sect1">SAVEPOINT (Executable Embedded SQL)<a id="sthref2771"></a><a id="sthref2772"></a><a id="sthref2773"></a><a id="sthref2774"></a><a id="sthref2775"></a><a id="sthref2776"></a><a id="sthref2777"></a></h2>
<p class="subhead1"><a id="LNPCC5068"></a>Purpose</p>
<p>To identify a point in a transaction to which you can later roll back.<a id="sthref2778"></a></p>
<p class="subhead1"><a id="LNPCC5069"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC5070"></a>Syntax</p>
<img width="496" height="74" src="img/savep.gif" alt="Description of savep.gif follows"/><br/>
<a id="sthref2779" href="img_text/savep.htm">Description of the illustration savep.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5071"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for SAVEPOINT statement" summary="keywords and parameters for SAVEPOINT statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t42">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t42" headers="r1c1-t42">AT</td>
<td class="cellalignment833" headers="r2c1-t42 r1c2-t42"><a id="sthref2780"></a>Identifies the database on which the savepoint is created. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> Is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> Is a host variable whose value is a previously declared db_name.</p>
<p>If you omit this clause, the savepoint is created on your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t42" headers="r1c1-t42"><span class="italic">savepoint</span></td>
<td class="cellalignment833" headers="r3c1-t42 r1c2-t42">Is the name of the savepoint to be created.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5072"></a>Usage Notes</p>
<p>For more information on this statement, see <a href="pc_03dbc.htm#i1522">&#34;Using the SAVEPOINT Statement&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5073"></a>Example</p>
<p><a id="sthref2781"></a>This example illustrates the use of the embedded SQL SAVEPOINT statement:</p>
<pre>EXEC SQL SAVEPOINT save3;
</pre>
<p class="subhead1"><a id="LNPCC5074"></a>Related Topics</p>
<p><a href="#CHEICCDA">COMMIT (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEFAAED">ROLLBACK (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDEAIE"></a>
<div id="LNPCC02017" class="sect1">
<h2 class="sect1">SELECT (Executable Embedded SQL)<a id="sthref2782"></a><a id="sthref2783"></a><a id="sthref2784"></a></h2>
<p class="subhead1"><a id="LNPCC5075"></a>Purpose</p>
<p>To retrieve data from one or more tables, views, or snapshots, assigning the selected values to host variables.<a id="sthref2785"></a></p>
<p class="subhead1"><a id="LNPCC5076"></a>Prerequisites</p>
Edits for 12.1.0.2 Feature 47829-1 - New READ Privilege
<p>For you to select data from a table or snapshot, the table or snapshot must be in your own schema or you must have READ or SELECT privilege on the table or snapshot.</p>
<p>For you to select rows from the base tables of a view, the owner of the schema containing the view must have READ or SELECT privilege on the base tables. Also, if the view is in a schema other than your own, you must have SELECT privilege on the view.</p>
<p>The READ ANY TABLE or SELECT ANY TABLE system privilege also provides the ability to select data from any table or any snapshot or any view&#39;s base table.</p>
<p>The READ privilege cannot be used for SELECT ... FOR UPDATE operations.</p>
<p class="subhead1"><a id="LNPCC5077"></a>Syntax</p>
<img width="600" height="608" src="img/select.gif" alt="Description of select.gif follows"/><br/>
<a id="sthref2786" href="img_text/select.htm">Description of the illustration select.gif</a><br/>
<br/>
<img width="600" height="256" src="img/select_b.gif" alt="Description of select_b.gif follows"/><br/>
<a id="sthref2787" href="img_text/select_b.htm">Description of the illustration select_b.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5078"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for SELECT statement" summary="keywords and parameters for SELECT statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t43">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t43" headers="r1c1-t43">AT</td>
<td class="cellalignment833" headers="r2c1-t43 r1c2-t43"><a id="sthref2788"></a>Identifies the database to which the SELECT statement is issued. The database can be identified by either:
<p><span class="italic">db_name</span><span class="bold">:</span> A database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span>: Host variable whose value is a previously declared db_name. If you omit this clause, the SELECT statement is issued to your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t43" headers="r1c1-t43"><span class="italic">select_list</span></td>
<td class="cellalignment833" headers="r3c1-t43 r1c2-t43">Identical to the non-embedded SELECT statement except that a host variables can be used in place of literals.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t43" headers="r1c1-t43">INTO</td>
<td class="cellalignment833" headers="r4c1-t43 r1c2-t43">Specifies output host variables and optional indicator variables to receive the data returned by the SELECT statement. These variables must be either all scalars or all arrays, but arrays need not have the same size.<a id="sthref2789"></a></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t43" headers="r1c1-t43">WHERE</td>
<td class="cellalignment833" headers="r5c1-t43 r1c2-t43">Restricts the rows returned to those for which the condition is TRUE. See the syntax description of condition in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>. The condition can contain host variables, but cannot contain indicator variables. These host variables should be scalars and cannot be arrays.
<p>All other keywords and parameters are identical to the non-embedded SQL SELECT statement. ASC<span class="italic">, ascending,</span> is the default for the ORDER BY clause.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5079"></a>Usage Notes</p>
<p>If no rows meet the WHERE clause condition, no rows are retrieved and Oracle returns an error code through the SQLCODE component of the SQLCA.</p>
<p>You can use Comments in a SELECT statement to pass instructions, or <span class="italic">hints</span>,<a id="sthref2790"></a> to the optimizer. The optimizer uses hints to choose an execution plan for the statement. For more information on hints, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p class="subhead1"><a id="LNPCC5080"></a>Example</p>
<p><a id="sthref2791"></a>This example illustrates the use of the embedded SQL SELECT statement:</p>
<pre>EXEC SQL SELECT ename, sal + 100, job 
    INTO :ename, :sal, :job 
    FROM emp 
    WHERE empno = :empno; 
</pre>
<p class="subhead1"><a id="LNPCC5081"></a>Related Topics</p>
<p><a href="#CHEEADJJ">DECLARE CURSOR (Embedded SQL Directive)</a>.</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
<p><a href="#CHEJJDHJ">EXECUTE (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEHIJCA">FETCH (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGDJGA"></a>
<div id="LNPCC5082" class="sect1">
<h2 class="sect1">SET DESCRIPTOR<a id="sthref2792"></a><a id="sthref2793"></a> (Executable Embedded SQL)</h2>
<p class="subhead1"><a id="LNPCC5083"></a>Purpose</p>
<p>Use this ANSI dynamic SQL statement to set information in the descriptor area from host variables.</p>
<p class="subhead1"><a id="LNPCC5084"></a>Prerequisites</p>
<p>Use after a DESCRIBE DESCRIPTOR statement.</p>
<p class="subhead1"><a id="LNPCC5085"></a>Syntax</p>
<img width="600" height="178" src="img/setdesc.gif" alt="Description of setdesc.gif follows"/><br/>
<a id="sthref2794" href="img_text/setdesc.htm">Description of the illustration setdesc.gif</a><br/>
<br/>
<p>where <code>item_name</code> can be one of these choices:</p>
<p>where <code>item_name</code> can be one of these choices:</p>
<img width="496" height="395" src="img/setdnc.gif" alt="Description of setdnc.gif follows"/><br/>
<a id="sthref2795" href="img_text/setdnc.htm">Description of the illustration setdnc.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5086"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for SET DESCRIPTOR statement" summary="keywords and parameters for SET DESCRIPTOR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t44">Kewords and Parameters</th>
<th class="cellalignment832" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t44" headers="r1c1-t44"><span class="italic">array_size</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment833" headers="r2c1-t44 r1c2-t44">Host variable containing the number of rows to be processed.
<p>Number of rows to be processed. The array size clause can only be used with DATA, RETURNED_LENGTH and INDICATOR item names.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t44" headers="r1c1-t44">GLOBAL | LOCAL</td>
<td class="cellalignment833" headers="r3c1-t44 r1c2-t44">LOCAL (the default) means file scope, as opposed to GLOBAL, which means application scope.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t44" headers="r1c1-t44"><span class="italic">descriptor_name</span>
<p><span class="italic">&#39;descriptor name&#39;</span></p>
</td>
<td class="cellalignment833" headers="r4c1-t44 r1c2-t44">Host variable containing the name of the allocated ANSI descriptor.
<p>Name of the allocated ANSI descriptor.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t44" headers="r1c1-t44">COUNT</td>
<td class="cellalignment833" headers="r5c1-t44 r1c2-t44">The number of input or output variables.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t44" headers="r1c1-t44">VALUE</td>
<td class="cellalignment833" headers="r6c1-t44 r1c2-t44">The position of the referenced host variable.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t44" headers="r1c1-t44"><span class="italic">item_name</span></td>
<td class="cellalignment833" headers="r7c1-t44 r1c2-t44">See <a href="pc_14ady.htm#g1045758">Table 14-6, &#34;Descriptor Item Names for SET DESCRIPTOR&#34;</a>, and <a href="pc_14ady.htm#g1045970">Table 14-7, &#34;Oracle Extensions to Descriptor Item Names for SET DESCRIPTOR&#34;</a> for lists of the <code>item_names</code>, and their descriptions.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t44" headers="r1c1-t44"><span class="italic">host_integer</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment833" headers="r8c1-t44 r1c2-t44">The host variables used to set the item or the COUNT or VALUE.
<p>An integer used to set the COUNT or VALUE.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t44" headers="r1c1-t44"><span class="italic">host_var</span></td>
<td class="cellalignment833" headers="r9c1-t44 r1c2-t44">The host variables used to set the descriptor item.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t44" headers="r1c1-t44">REF</td>
<td class="cellalignment833" headers="r10c1-t44 r1c2-t44">Reference semantics are to be used. Can be used only with RETURNED_LENGTH, DATA, and INDICATOR item names.
<p>Must be used to set RETURNED_LENGTH.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5087"></a>Usage Notes</p>
<p>Use DYNAMIC=ANSI precompiler option.</p>
<p>Set CHARACTER_SET_NAME to UTF16 for client-side Unicode support.</p>
<p>See <a href="pc_14ady.htm#i1001420">&#34;SET DESCRIPTOR&#34;</a> for complete details, including tables of descriptor item names.</p>
<p class="subhead1"><a id="LNPCC5088"></a>Example</p>
<pre>EXEC SQL SET DESCRIPTOR GLOBAL :mydescr COUNT = 3 ;
</pre>
<p class="subhead1"><a id="LNPCC5089"></a>Related Topics</p>
<p><a href="#CHEJEJEE">ALLOCATE DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDHGBA">DEALLOCATE DESCRIPTOR (Embedded SQL Statement)</a>.</p>
<p><a href="#CHEGJCHH">DESCRIBE (Executable Embedded SQL Extension)</a>.</p>
<p><a href="#CHEEAECI">GET DESCRIPTOR (Executable Embedded SQL)</a>.</p>
<p><a href="#CHEDBBAF">PREPARE (Executable Embedded SQL)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEJAJGB"></a>
<div id="LNPCC5090" class="sect1">
<h2 class="sect1">TYPE (Oracle Embedded SQL Directive)<a id="sthref2796"></a><a id="sthref2797"></a><a id="sthref2798"></a></h2>
<p class="subhead1"><a id="LNPCC5091"></a>Purpose</p>
<p>To perform <span class="italic">user-defined type equivalencing</span><a id="sthref2799"></a><a id="sthref2800"></a><a id="sthref2801"></a>, or to assign an external datatype to a whole class of host variables by equivalencing the external datatype to a user-defined datatype.</p>
<p class="subhead1"><a id="LNPCC5092"></a>Prerequisites</p>
<p>The user-defined datatype must be previously declared in an embedded SQL program.</p>
<p class="subhead1"><a id="LNPCC5093"></a>Syntax</p>
<img width="496" height="60" src="img/type.gif" alt="Description of type.gif follows"/><br/>
<a id="sthref2802" href="img_text/type.htm">Description of the illustration type.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5094"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for TYPE statement" summary="keywords and parameters for TYPE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t45">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t45" headers="r1c1-t45"><span class="italic">type</span></td>
<td class="cellalignment833" headers="r2c1-t45 r1c2-t45">Is the user-defined datatype to be equivalenced with an external datatype.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t45" headers="r1c1-t45"><span class="italic">datatype</span></td>
<td class="cellalignment833" headers="r3c1-t45 r1c2-t45">Is an external datatype recognized by the precompiler (not an internal datatype). The datatype may include a length, precision, or scale. This external datatype is equivalenced to the user-defined type and assigned to all host variables assigned the type. For a list of external datatypes, see <a href="pc_04dat.htm#i15971">&#34;Oracle Datatypes&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t45" headers="r1c1-t45">REFERENCE</td>
<td class="cellalignment833" headers="r4c1-t45 r1c2-t45">Makes the equivalenced type a pointer type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5095"></a>Usage Notes</p>
<p>User-defined type equivalencing is one kind of datatype equivalencing. You can only perform user-defined type equivalencing with the embedded SQL TYPE statement in a Pro*C/C++ program. You may want to use datatype equivalencing for one of the following purposes:</p>
<ul>
<li>
<p>To automatically null-terminate a character host variable</p>
</li>
<li>
<p>To store program data as binary data in the database</p>
</li>
<li>
<p>To override default datatype conversion</p>
</li>
</ul>
<p>Pro*C/C++ expects VARCHAR and VARRAW arrays to be word-aligned. When you equivalence an array type to the VARCHAR or VARRAW datatype, make sure that length+2 is divisible by 4.</p>
<p>Pro*C/C++ also supports the embedded SQL VAR statement for host variable equivalencing. For more information, see <a href="pc_05adv.htm#i430275">&#34;User-Defined Type Equivalencing&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5096"></a>Example I</p>
<p><a id="sthref2803"></a>This example shows an embedded SQL TYPE statement in a Pro*C/C++ Precompiler program:</p>
<pre>struct screen {
    short len; 
    char  buff[4002];
}; 

typedef struct screen graphics; 

    EXEC SQL TYPE graphics IS VARRAW(4002); 
    graphics crt;  -- host variable of type graphics 
    ... 
</pre>
<p class="subhead1"><a id="LNPCC5097"></a>Related Topics</p>
<p><a href="#CHEDHEEB">VAR (Oracle Embedded SQL Directive)</a> .</p>
</div>
<!-- class="sect1" -->
<a id="CHEGDJBF"></a>
<div id="LNPCC5098" class="sect1">
<h2 class="sect1">UPDATE (Executable Embedded SQL)<a id="sthref2804"></a><a id="sthref2805"></a><a id="sthref2806"></a><a id="sthref2807"></a><a id="sthref2808"></a><a id="sthref2809"></a><a id="sthref2810"></a></h2>
<p class="subhead1"><a id="LNPCC5099"></a>Purpose</p>
<p>To change existing values in a table or in a view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCC5100"></a>Prerequisites</p>
<p>For you to update values in a table or snapshot, the table must be in your own schema or you must have UPDATE privilege on the table.</p>
<p>For you to update values in the base table of a view, the owner of the schema containing the view must have UPDATE privilege on the base table. Also, if the view is in a schema other than your own, you must have UPDATE privilege on the view.</p>
<p>The UPDATE ANY TABLE system privilege also provides the ability to update values in any table or any view&#39;s base table.</p>
<p class="subhead1"><a id="LNPCC5101"></a>Syntax</p>
<img width="600" height="364" src="img/update.gif" alt="Description of update.gif follows"/><br/>
<a id="sthref2811" href="img_text/update.htm">Description of the illustration update.gif</a><br/>
<br/>
<p>where the DML returning clause is:</p>
<img width="600" height="96" src="img/return.gif" alt="Description of return.gif follows"/><br/>
<a id="sthref2812" href="img_text/return.htm">Description of the illustration return.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5102"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for UPDATE statement" summary="keywords and parameters for UPDATE statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t46">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t46" headers="r1c1-t46">AT</td>
<td class="cellalignment833" headers="r2c1-t46 r1c2-t46"><a id="sthref2813"></a>Identifies the database to which the UPDATE statement is issued. The database can be identified by either:
<p><span class="italic">dbname</span><span class="bold">:</span> Is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p><span class="italic">host_variable</span><span class="bold">:</span> Is a host variable whose value is a previously declared db_name.</p>
<p>If you omit this clause, the UPDATE statement is issued to your default database.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t46" headers="r1c1-t46">FOR <span class="italic">:host_integer</span>
<p><span class="italic">integer</span></p>
</td>
<td class="cellalignment833" headers="r3c1-t46 r1c2-t46">Limits the number of times the UPDATE statement is executed if the SET and WHERE clauses contain array host variables. If you omit this clause, Oracle executes the statement once for each component of the smallest array.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t46" headers="r1c1-t46"><span class="italic">schema</span></td>
<td class="cellalignment833" headers="r4c1-t46 r1c2-t46">Is the schema containing the table or view. If you omit schema, Oracle assumes the table or view is in your own schema.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t46" headers="r1c1-t46"><span class="italic">table, view</span></td>
<td class="cellalignment833" headers="r5c1-t46 r1c2-t46">Is the name of the table to be updated. If you specify view, Oracle updates the view&#39;s base table.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t46" headers="r1c1-t46"><span class="italic">dblink</span></td>
<td class="cellalignment833" headers="r6c1-t46 r1c2-t46">Is a complete or partial name of a database link to a remote database where the table or view is located. For information on referring to database links, see the <a class="olink REFRN" href="../REFRN/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>You can only use a database link to update a remote table or view if you are using Oracle with the distributed option.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t46" headers="r1c1-t46"><span class="italic">part_name</span></td>
<td class="cellalignment833" headers="r7c1-t46 r1c2-t46">Name of a partition of the table.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t46" headers="r1c1-t46"><span class="italic">column</span></td>
<td class="cellalignment833" headers="r8c1-t46 r1c2-t46">Is the name of a column of the table or view that is to be updated. If you omit a column of the table from the SET clause, that column&#39;s value remains unchanged.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t46" headers="r1c1-t46"><span class="italic">expr</span></td>
<td class="cellalignment833" headers="r9c1-t46 r1c2-t46">Is the new value assigned to the corresponding column. This expression can contain host variables and optional indicator variables. See the syntax of expr in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t46" headers="r1c1-t46"><span class="italic">subquery_1</span></td>
<td class="cellalignment833" headers="r10c1-t46 r1c2-t46">Is a subquery that returns new values that are assigned to the corresponding columns. For the syntax of a subquery, see &#34;SELECT&#34; in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t46" headers="r1c1-t46"><span class="italic">subquery_2</span></td>
<td class="cellalignment833" headers="r11c1-t46 r1c2-t46">Is a subquery that return a new value that is assigned to the corresponding column. For the syntax of a subquery, see &#34;SELECT&#34; in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t46" headers="r1c1-t46">WHERE</td>
<td class="cellalignment833" headers="r12c1-t46 r1c2-t46">Specifies which rows of the table or view are updated:</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r13c1-t46" headers="r1c1-t46"><span class="italic">condition</span>
<p>CURRENT OF</p>
</td>
<td class="cellalignment833" headers="r13c1-t46 r1c2-t46">Updates only rows for which this condition is true. This condition can contain host variables and optional indicator variables. See the syntax of condition in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.
<p>Updates only the row most recently fetched by the cursor. The cursor cannot be associated with a SELECT statement that performs a join unless its FOR UPDATE clause explicitly locks only one table.</p>
<p>If you omit this clause entirely, all rows of the table or view are updated.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r14c1-t46" headers="r1c1-t46"><span class="italic">DML returning clause</span></td>
<td class="cellalignment833" headers="r14c1-t46 r1c2-t46">See <a href="pc_06sql.htm#i5385">&#34;The DML Returning Clause&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5103"></a>Usage Notes</p>
<p>Host variables in the SET and WHERE clauses must be either all scalars or all arrays. If they are scalars, Oracle executes the UPDATE statement only once. If they are arrays, Oracle executes the statement once for each set of array components. Each execution may update zero, one, or multiple rows.</p>
<p>Array host variables can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>The size of the smallest array</p>
</li>
<li>
<p>The value of the :<span class="italic">host_integer</span> in the optional FOR clause</p>
</li>
</ul>
<p>The cumulative number of rows updated is returned through the third element of the SQLERRD component of the SQLCA. When arrays are used as input host variables, this count reflects the total number of updates for all components of the array processed in the UPDATE statement. If no rows satisfy the condition, no rows are updated and Oracle returns an error message through the SQLCODE element of the SQLCA. If you omit the WHERE clause, all rows are updated and Oracle raises a warning flag in the fifth component of the SQLWARN element of the SQLCA.</p>
<p>You can use Comments in an UPDATE statement to pass instructions, or <span class="italic">hints</span>,<a id="sthref2814"></a> to the optimizer. The optimizer uses hints to choose an execution plan for the statement. For more information on hints, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>For more information on this statement, see <a href="pc_06sql.htm#g19457">Chapter 6, &#34;Embedded SQL&#34;</a>, and <a href="pc_03dbc.htm#g18485">Chapter 3, &#34;Database Concepts&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5104"></a>Examples</p>
<p><a id="sthref2815"></a>The following examples illustrate the use of the embedded SQL UPDATE statement:</p>
<pre>EXEC SQL UPDATE emp 
    SET sal = :sal, comm = :comm INDICATOR :comm_ind 
    WHERE ename = :ename; 
 
EXEC SQL UPDATE emp 
    SET (sal, comm) = 
        (SELECT AVG(sal)*1.1, AVG(comm)*1.1 
         FROM emp) 
    WHERE ename = &#39;JONES&#39;; 
</pre>
<p class="subhead1"><a id="LNPCC5105"></a>Related Topics</p>
<p><a href="#CHEFJAIA">DECLARE DATABASE (Oracle Embedded SQL Directive)</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDHEEB"></a>
<div id="LNPCC5106" class="sect1">
<h2 class="sect1">VAR (Oracle Embedded SQL Directive)<a id="sthref2816"></a><a id="sthref2817"></a><a id="sthref2818"></a></h2>
<p class="subhead1"><a id="LNPCC5107"></a>Purpose</p>
<p>To perform <span class="italic">host variable equivalencing<a id="sthref2819"></a><a id="sthref2820"></a></span>, or to assign a specific external datatype to an individual host variable, overriding the default datatype assignment. Also has an optional CONVBUFSZ clause that specifies the size of a buffer for character set conversion.</p>
<p class="subhead1"><a id="LNPCC5108"></a>Prerequisites</p>
<p>The host variable must be previously declared in the Pro*C/C++ program.</p>
<p class="subhead1"><a id="LNPCC5109"></a>Syntax</p>
<img width="600" height="184" src="img/var.gif" alt="Description of var.gif follows"/><br/>
<a id="sthref2821" href="img_text/var.htm">Description of the illustration var.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5110"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for VAR statement" summary="keywords and parameters for VAR statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t47">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t47" headers="r1c1-t47"><span class="italic">host_variable</span></td>
<td class="cellalignment833" headers="r2c1-t47 r1c2-t47">Is an input or output host variable (or host table) declared earlier.
<p>The VARCHAR and VARRAW external datatypes have a 2-byte length field followed by an <span class="italic">n</span>-byte data field, where <span class="italic">n</span> lies in the range 1 .. 65533. So, if <span class="italic">type_name</span> is VARCHAR or VARRAW, <span class="italic">host_variable</span> must be at least 3 bytes long.</p>
<p>The LONG VARCHAR and LONG VARRAW external datatypes have a 4-byte length field followed by an <span class="italic">n</span>-byte data field, where <span class="italic">n</span> lies in the range 1 .. 2147483643. So, if <span class="italic">type_name</span> is LONG VARCHAR or LONG VARRAW, <span class="italic">host_variable</span> must be at least 5 bytes long.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t47" headers="r1c1-t47"><span class="italic">dtyp</span></td>
<td class="cellalignment833" headers="r3c1-t47 r1c2-t47">Is an external datatype recognized by Pro*C/C++ (not an internal datatype). The datatype may include a length, precision, or scale. This external datatype is assigned to the host_variable. For a list of external datatypes, see <a href="pc_04dat.htm#i15640">&#34;External Datatypes&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t47" headers="r1c1-t47"><span class="italic">length</span></td>
<td class="cellalignment833" headers="r4c1-t47 r1c2-t47">Length of the datatype. It is a constant expression or a constant integer specifying a valid length in bytes. The value of length must be large enough to accommodate the external datatype.
<p>When <span class="italic">type_name</span> is ROWID or DATE, you cannot specify <span class="italic">length</span> because it is predefined. For other external datatypes, <span class="italic">length</span> is optional. It defaults to the length of <span class="italic">host_variable</span>.</p>
<p>When specifying <span class="italic">length</span>, if <span class="italic">type_name</span> is VARCHAR, VARRAW, LONG VARCHAR, or LONG VARRAW, use the maximum length of the data field. Pro*C/C++ accounts for the length field. If <span class="italic">type_name</span> is LONG VARCHAR or LONG VARRAW and the data field exceeds 65533 bytes, put &#34;-1&#34; in the <span class="italic">length</span> field.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t47" headers="r1c1-t47"><span class="italic">precision and scale</span></td>
<td class="cellalignment833" headers="r5c1-t47 r1c2-t47">Are constant expressions or constants that represent, respectively, the number of significant digits and the point at which rounding will occur. For example, a scale of 2 means the value is rounded to the nearest hundredth (3.456 becomes 3.46); a scale of -3 means the number is rounded to the nearest thousand (3456 becomes 3000).
<p><a id="sthref2822"></a><a id="sthref2823"></a><a id="sthref2824"></a>You can specify a <span class="italic">precision</span> of 1 .. 99 and a <span class="italic">scale</span> of -84 .. 99. However, the maximum precision and scale of a database column are 38 and 127, respectively. So, if <span class="italic">precision</span> exceeds 38, you cannot insert the value of <span class="italic">host_variable</span> into a database column. On the other hand, if the scale of a column value exceeds 99, you cannot select or fetch the value into <span class="italic">host_variable</span>.</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t47" headers="r1c1-t47"><span class="italic">size</span></td>
<td class="cellalignment833" headers="r6c1-t47 r1c2-t47">The size, in bytes, of a buffer used to perform conversion of the specified host_variable to another character set. A constant or constant expression.
<p>Is the size in bytes of a buffer in the runtime library used to perform conversion between character sets of the host_variable</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5111"></a>Usage Notes</p>
<p><code>length, precision, scale</code> and <code>size</code> can be constant expressions.</p>
<p>Host variable equivalencing is one kind of datatype equivalencing. Datatype equivalencing is useful for any of the following purposes:</p>
<ul>
<li>
<p>To automatically null-terminate a character host variable</p>
</li>
<li>
<p>To store program data as binary data in the database</p>
</li>
<li>
<p>To override default datatype conversion</p>
</li>
</ul>
<p>Note that <span class="italic">size</span>, <span class="italic">length</span>, <span class="italic">precision</span> and <span class="italic">scale</span> can be any arbitrarily complex C constant expression whose value is known when the precompiler is run.</p>
<p>For example:</p>
<pre>#define LENGTH 10
...
char character set is nchar_cs ename[LENGTH+1];
exec sql var ename is string(LENGTH+1) convbufsz is (LENGTH*2);

</pre>
<p>Note also that macros are permitted in this statement.</p>
<p>When you have not used the CONVBUFSZ clause, the Oracle runtime automatically determines a buffer size based on the ratio of the host variable character size (determined by NLS_LANG) and the character size of the database character set. This can sometimes result in the creation of a buffer of LONG size. Database tables are allowed to have only one LONG column. An error is raised if there is more than one LONG value.</p>
<p>To avoid such errors, you use a length shorter than the size of a LONG. If a character set conversion results in a value longer than the length specified by CONVBUFSZ, then an error is returned at runtime. The Pro*C/C++ Precompiler also supports the precompiler TYPE directive for user-defined type equivalencing. See also <a href="pc_05adv.htm#i430184">&#34;Host Variable Equivalencing&#34;</a>.</p>
<p class="subhead1"><a id="LNPCC5112"></a>Example</p>
<p><a id="sthref2825"></a>This example equivalences the host variable DEPT_NAME to the datatype STRING and the host variable BUFFER to the datatype RAW(200):</p>
<pre>EXEC SQL BEGIN DECLARE SECTION; 
    ... 
    char dept_name[15];               -- default datatype is CHAR 
    EXEC SQL VAR dept_name IS STRING; -- reset to STRING 
    ... 
    char buffer[200];                 -- default datatype is CHAR 
    EXEC SQL VAR buffer IS RAW(200); -- refer to RAW 
    ...
EXEC SQL END DECLARE SECTION; 
</pre>
<p class="subhead1"><a id="LNPCC5113"></a>Related Topics</p>
<p><a href="#CHEJAJGB">TYPE (Oracle Embedded SQL Directive)</a> .</p>
</div>
<!-- class="sect1" -->
<a id="CHEFBAAC"></a>
<div id="LNPCC5114" class="sect1">
<h2 class="sect1">WHENEVER (Embedded SQL Directive)<a id="sthref2826"></a><a id="sthref2827"></a><a id="sthref2828"></a></h2>
<p class="subhead1"><a id="LNPCC5115"></a>Purpose</p>
<p>To specify the action to be taken when an error or warning results from executing an embedded SQL statement.</p>
<p class="subhead1"><a id="LNPCC5116"></a>Prerequisites</p>
<p>None.</p>
<p class="subhead1"><a id="LNPCC5117"></a>Syntax</p>
<img width="496" height="176" src="img/whenevrc.gif" alt="Description of whenevrc.gif follows"/><br/>
<a id="sthref2829" href="img_text/whenevrc.htm">Description of the illustration whenevrc.gif</a><br/>
<br/>
<p class="subhead1"><a id="LNPCC5118"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment834" title="keywords and parameters for WHENEVER statement" summary="keywords and parameters for WHENEVER statement" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t48">Keywords and Parameters</th>
<th class="cellalignment832" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t48" headers="r1c1-t48">NOT FOUND</td>
<td class="cellalignment833" headers="r2c1-t48 r1c2-t48"><a id="sthref2830"></a>Identifies any exception condition that returns an error code of +1403 to SQLCODE (or a +100 code when MODE=ANSI).</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t48" headers="r1c1-t48">SQLERROR</td>
<td class="cellalignment833" headers="r3c1-t48 r1c2-t48"><a id="sthref2831"></a>Identifies a condition that results in a negative return code.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t48" headers="r1c1-t48">SQLWARNING</td>
<td class="cellalignment833" headers="r4c1-t48 r1c2-t48"><a id="sthref2832"></a>Identifies a non-fatal warning condition.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t48" headers="r1c1-t48">CONTINUE</td>
<td class="cellalignment833" headers="r5c1-t48 r1c2-t48">Indicates that the program should progress to the next statement.<a id="sthref2833"></a></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t48" headers="r1c1-t48">GOTO <span class="italic">label</span></td>
<td class="cellalignment833" headers="r6c1-t48 r1c2-t48"><a id="sthref2834"></a>Indicates that the program should branch to the statement named by <span class="italic">label</span>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t48" headers="r1c1-t48">STOP</td>
<td class="cellalignment833" headers="r7c1-t48 r1c2-t48"><a id="sthref2835"></a>Stops program execution.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t48" headers="r1c1-t48">DO <span class="italic">routine</span></td>
<td class="cellalignment833" headers="r8c1-t48 r1c2-t48"><a id="sthref2836"></a>Indicates that the program should call a function that is named <span class="italic">routine</span></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t48" headers="r1c1-t48">DO BREAK</td>
<td class="cellalignment833" headers="r9c1-t48 r1c2-t48">Performs a <span class="italic">break<a id="sthref2837"></a></span> statement from a loop when the condition is met.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t48" headers="r1c1-t48">DO CONTINUE</td>
<td class="cellalignment833" headers="r10c1-t48 r1c2-t48">Performs a <span class="italic">continue</span><span class="bold"><a id="sthref2838"></a></span> statement from a loop when the condition is met.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="LNPCC5119"></a>Usage Notes</p>
<p><a id="sthref2839"></a><a id="sthref2840"></a>The WHENEVER directive allows your program to transfer control to an error handling routine in the event an embedded SQ</p>
<p>L statement results in an error or warning.</p>
<p>The scope of a WHENEVER directive is positional, rather than logical. A WHENEVER statement applies to all embedded SQL statements that textually follow it in the source file, not in the flow of the program logic. A WHENEVER directive remains in effect until it is superseded by another WHENEVER directive checking for the same condition.</p>
<p>For more information on this directive, see <a href="pc_09err.htm#i12340">&#34;Using the WHENEVER Directive&#34;</a>.</p>
<p>Do not confuse the WHENEVER embedded SQL directive with the WHENEVER SQL*Plus command.</p>
<p class="subhead1"><a id="LNPCC5120"></a>Examples</p>
<p><a id="sthref2841"></a>The following two examples illustrates the uses of the WHENEVER directive in an embedded SQL program:</p>
<p>Example 1:</p>
<pre>EXEC SQL WHENEVER NOT FOUND CONTINUE;
... 
EXEC SQL WHENEVER SQLERROR GOTO sql_error; 
... 
sql_error: 
    EXEC SQL WHENEVER SQLERROR CONTINUE; 
    EXEC SQL ROLLBACK RELEASE;
... 
</pre>
<p>Example 2:</p>
<pre>EXEC SQL WHENEVER SQLERROR GOTO connect_error; 
... 
connect_error: 
    EXEC SQL WHENEVER SQLERROR CONTINUE; 
    EXEC SQL ROLLBACK RELEASE; 
    printf(&#34;\nInvalid username/password\n&#34;); 
    exit(1); 
</pre>
<p class="subhead1"><a id="LNPCC5121"></a>Related Topics</p>
<p>None</p>
</div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment824">
<tr>
<td class="cellalignment833">
<table class="cellalignment829">
<tr>
<td class="cellalignment828"><a href="pc_aeops.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment828"><a href="pc_agsmp.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment836">
<table class="cellalignment827">
<tr>
<td class="cellalignment828"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment828"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment828"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment828"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment828"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment828"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>