<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-78022"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Performance%20Tuning"></a><title>Performance Tuning</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-10T8:50:55Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Pro*C/C++ Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53432-01"/>
<meta name="dcterms.isVersionOf" content="LNPCC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="pc_abres.htm" title="Previous" type="text/html"/>
<link rel="Next" href="pc_adchk.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53432-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/35</span> <!-- End Header -->
<div id="LNPCC023" class="appendix"><a id="CHEBGDGB"></a>
<h1 class="appendix"><span class="secnum">B</span> Performance Tuning</h1>
<p>This appendix shows you some simple, easy-to-apply methods for improving the performance of your applications. Using these methods, you can often reduce processing time by 25% or more. This appendix contains the following topics:</p>
<ul>
<li>
<p><a href="#CHEBAAIB">What Causes Poor Performance?</a></p>
</li>
<li>
<p><a href="#CHEGDHJJ">How Can Performance Be Improved?</a></p>
</li>
<li>
<p><a href="#CHEBGDAD">Using Host Arrays</a></p>
</li>
<li>
<p><a href="#CHEHBGDI">Using Embedded PL/SQL</a></p>
</li>
<li>
<p><a href="#CHEGHDEG">Optimizing SQL Statements</a></p>
</li>
<li>
<p><a href="#CHEBCICE">Statement Caching</a></p>
</li>
<li>
<p><a href="#CHEDJDBG">Using Indexes</a></p>
</li>
<li>
<p><a href="#CHEGFGAE">Taking Advantage of Row-Level Locking</a></p>
</li>
<li>
<p><a href="#CHEHFAIH">Eliminating Unnecessary Parsing</a></p>
</li>
<li>
<p><a href="#CHEDHBAB">Using Connection Pooling</a></p>
</li>
</ul>
<a id="CHEBAAIB"></a>
<div id="LNPCC4556" class="sect1">
<h2 class="sect1">What Causes Poor Performance?</h2>
<p>One cause of poor performance is high communications overhead. The server must process SQL statements one at a time. Thus, each statement results in another call to single and higher overhead. In a networked environment, SQL statements must be sent over the network, adding to network traffic. Heavy network traffic can slow down your application significantly.<a id="sthref2357"></a><a id="sthref2358"></a></p>
<p>Another cause of poor performance is inefficient SQL statements. Because SQL is so flexible, you can get the same result with two different statements, but one statement might be less efficient. For example, the following two SELECT statements return the same rows (the name and number of every department having at least one employee):</p>
<pre>EXEC SQL SELECT dname, deptno 
    FROM dept 
    WHERE deptno IN (SELECT deptno FROM emp); 
 
EXEC SQL SELECT dname, deptno 
    FROM dept 
    WHERE EXISTS 
    (SELECT deptno FROM emp WHERE dept.deptno = emp.deptno); 
</pre>
<p>However, the first statement is slower because it does a time-consuming full scan of the EMP table for every department number in the DEPT table. Even if the DEPTNO column in EMP is indexed, the index is not used because the subquery lacks a WHERE clause naming DEPTNO.</p>
<p>A third cause of poor performance is unnecessary parsing and binding. Recall that before executing a SQL statement, the server must parse and bind it. Parsing means examining the SQL statement to make sure it follows syntax rules and refers to valid database objects. Binding means associating host variables in the SQL statement with their addresses so that the server can read or write their values.</p>
<p>Many applications manage cursors poorly. This results in unnecessary parsing and binding, which adds noticeably to processing overhead.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGDHJJ"></a>
<div id="LNPCC4557" class="sect1">
<h2 class="sect1">How Can Performance Be Improved?</h2>
<p>If you are unhappy with the performance of your precompiled programs, there are several ways you can reduce overhead.</p>
<p>You can greatly reduce communications overhead, especially in networked environments, by<a id="sthref2359"></a></p>
<ul>
<li>
<p>Using host arrays</p>
</li>
<li>
<p>Using embedded PL/SQL</p>
</li>
</ul>
<p>You can reduce processing overhead&mdash;sometimes dramatically&mdash;by</p>
<ul>
<li>
<p>Optimizing SQL statements</p>
</li>
<li>
<p>Using indexes</p>
</li>
<li>
<p>Taking advantage of row-level locking</p>
</li>
<li>
<p>Eliminating unnecessary parsing</p>
</li>
<li>
<p>Avoiding unnecessary reparsing</p>
</li>
</ul>
<p>The following sections look at each of these ways to cut overhead.</p>
</div>
<!-- class="sect1" -->
<a id="CHEBGDAD"></a>
<div id="LNPCC4558" class="sect1">
<h2 class="sect1">Using Host Arrays</h2>
<p>Host arrays can increase performance because they let you manipulate an entire collection of data with a single SQL statement. For example, suppose you want to INSERT salaries for 300 employees into the EMP table. Without arrays your program must do 300 individual INSERTs&mdash;one for each employee. With arrays, only one INSERT is necessary. Consider the following statement:<a id="sthref2360"></a><a id="sthref2361"></a></p>
<pre>EXEC SQL INSERT INTO emp (sal) VALUES (:salary); 
</pre>
<p>If <span class="italic">salary</span> is a simple host variable, the server executes the INSERT statement once, inserting a single row into the EMP table. In that row, the SAL column has the value of <span class="italic">salary</span>. To insert 300 rows this way, you must execute the INSERT statement 300 times.</p>
<p>However, if <span class="italic">salary</span> is a host array of size 300, all 300 rows are inserted into the EMP table at once. In each row, the SAL column has the value of an element in the <span class="italic">salary</span> array.</p>
<p>For more information, see <a href="pc_08arr.htm#g20885">Chapter 8, &#34;Host Arrays&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHBGDI"></a>
<div id="LNPCC4559" class="sect1">
<h2 class="sect1">Using Embedded PL/SQL</h2>
<p>As <a href="#CHEBHDFF">Figure B-1</a> shows, if your application is database-intensive, you can use control structures to group SQL statements in a PL/SQL block, then send the entire block to the database server. This can drastically reduce communication between your application and the database server.<a id="sthref2362"></a><a id="sthref2363"></a></p>
<p>Also, you can use PL/SQL subprograms to reduce calls from your application to the server. For example, to execute ten individual SQL statements, ten calls are required, but to execute a subprogram containing ten SQL statements, only one call is required.</p>
<div id="LNPCC4560" class="figure">
<p class="titleinfigure"><a id="CHEBHDFF"></a>Figure B-1 PL/SQL Boosts Performance</p>
<img width="496" height="355" src="img/lnpcc019.gif" alt="Description of Figure B-1 follows"/><br/>
<a id="sthref2364" href="img_text/lnpcc019.htm">Description of &#34;Figure B-1 PL/SQL Boosts Performance&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>PL/SQL can also cooperate with Oracle application development tools such as Oracle Forms. By adding procedural processing power to these tools, PL/SQL boosts performance. Using PL/SQL, a tool can do any computation quickly and efficiently without calling on the database server. This saves time and reduces network traffic.<a id="sthref2365"></a></p>
<p>For more information, see <a href="pc_07pls.htm#g27962">Chapter 7, &#34; Embedded PL/SQL&#34;</a>, and the <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGHDEG"></a>
<div id="LNPCC4561" class="sect1">
<h2 class="sect1">Optimizing SQL Statements</h2>
<p>For every SQL statement, the Oracle optimizer generates an <span class="italic">execution plan</span>, which is a series of steps that the server takes to execute the statement. These steps are determined by rules given in Oracle Application Developer&#39;s Guide - Fundamentals. Following these rules will help you write optimal SQL statements.<a id="sthref2366"></a><a id="sthref2367"></a><a id="sthref2368"></a><a id="sthref2369"></a></p>
<div id="LNPCC4562" class="sect2"><a id="sthref2370"></a>
<h3 class="sect2">Optimizer Hints</h3>
<p>In some cases, you can suggest to the server the way to optimize a SQL statement. These suggestions, called <span class="italic">hints</span>, let you influence decisions made by the optimizer.<a id="sthref2371"></a></p>
<p>Hints are not directives; they merely help the optimizer do its job. Some hints limit the scope of information used to optimize a SQL statement, while others suggest overall strategies.</p>
<p>You can use hints to specify the</p>
<ul>
<li>
<p>Optimization approach for a SQL statement</p>
</li>
<li>
<p>Access path for each referenced table</p>
</li>
<li>
<p>Join order for a join</p>
</li>
<li>
<p>Method used to join tables</p>
</li>
</ul>
<p>Hence, hints fall into the following four categories:</p>
<ul>
<li>
<p>Optimization Approach</p>
</li>
<li>
<p>Access Path</p>
</li>
<li>
<p>Join Order</p>
</li>
<li>
<p>Join Operation</p>
</li>
</ul>
<p>For example, the two optimization approach hints, COST and NOCOST, invoke the cost-based optimizer and the rule-based optimizer, respectively.</p>
<p>You give hints to the optimizer by placing them in a C-style comment immediately after the verb in a SELECT, UPDATE, INSERT, or DELETE statement. For instance, the optimizer uses the cost-based approach for the following statement:<a id="sthref2372"></a><a id="sthref2373"></a></p>
<pre>SELECT /*+ COST */ ename, sal INTO ... 
</pre>
<p>For C++ code, optimizer hints in the form //+ are also recognized.</p>
<p>For more information about optimizer hints, see <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC4563" class="sect2"><a id="sthref2374"></a>
<h3 class="sect2">Trace Facility</h3>
<p>You can use the SQL trace facility and the EXPLAIN PLAN statement to identify SQL statements that might be slowing down your application.<a id="sthref2375"></a><a id="sthref2376"></a></p>
<p>The SQL trace facility generates statistics for every SQL statement executed. From these statistics, you can determine which statements take the most time to process. Then, you can concentrate your tuning efforts on those statements.<a id="sthref2377"></a></p>
<p>The EXPLAIN PLAN statement shows the execution plan for each SQL statement in your application. An <span class="italic">execution plan</span> describes the database operations that must be carried out to execute a SQL statement. You can use the execution plan to identify inefficient SQL statements.<a id="sthref2378"></a><a id="sthref2379"></a></p>
<p>For instructions on using these tools and analyzing their output, see <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHEBCICE"></a>
<div id="LNPCC4564" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Statement Caching</h2>
<p>This is a feature that will help in the performance improvement of all the precompiler applications that rely on dynamic SQL statements. The new implementation will remove the overhead of parsing the dynamic statements on reuse. The precompiler application user can obtain this performance improvement using a new command line option (for the statement cache size), which will enable the statement caching of the dynamic statements. By enabling the new option, the statement cache will be created at session creation time. The caching is only applicable for the dynamic statements and the cursor cache for the static statements co-exists with this feature.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDJDBG"></a>
<div id="LNPCC4565" class="sect1">
<h2 class="sect1">Using Indexes</h2>
<p>Using ROWIDs, an <span class="italic">index</span> associates each distinct value in a table column with the rows containing that value. An index is created with the CREATE INDEX statement. For details, see <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a><a id="sthref2380"></a><a id="sthref2381"></a></p>
<p>You can use indexes to boost the performance of queries that return less than 15% of the rows in a table. A query that returns 15% or more of the rows in a table is executed faster by a <span class="italic">full scan</span>, that is, by reading all rows sequentially.<a id="sthref2382"></a></p>
<p>Any query that names an indexed column in its WHERE clause can use the index. For guidelines that help you choose which columns to index, see <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHEGFGAE"></a>
<div id="LNPCC4566" class="sect1">
<h2 class="sect1">Taking Advantage of Row-Level Locking</h2>
<p>By default, data is locked at the row level rather than at the table level. Row-level locking allows multiple users to access different rows in the same table concurrently. The resulting performance gain is significant.</p>
<p>You can specify table-level locking, but it lessens the effectiveness of the transaction processing option. For more information about table locking, see the section <a href="pc_03dbc.htm#i1361">&#34;Using LOCK TABLE&#34;</a>.<a id="sthref2383"></a><a id="sthref2384"></a><a id="sthref2385"></a></p>
<p>Applications that do online transaction processing benefit most from row-level locking. If your application relies on table-level locking, modify it to take advantage of row-level locking. In general, avoid explicit table-level locking.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHFAIH"></a>
<div id="LNPCC4567" class="sect1">
<h2 class="sect1">Eliminating Unnecessary Parsing</h2>
<p>Eliminating unnecessary parsing requires correct handling of cursors and selective use of the following cursor management options:<a id="sthref2386"></a></p>
<ul>
<li>
<p>MAXOPENCURSORS</p>
</li>
<li>
<p>HOLD_CURSOR</p>
</li>
<li>
<p>RELEASE_CURSOR</p>
</li>
</ul>
<p>These options affect implicit and explicit cursors, the cursor cache, and private SQL areas.<a id="sthref2387"></a><a id="sthref2388"></a><a id="sthref2389"></a></p>
<div id="LNPCC4568" class="sect2"><a id="sthref2390"></a>
<h3 class="sect2">Handling Explicit Cursors</h3>
<p>Recall that there are two types of cursors: implicit and explicit. A cursor is implicitly declared for all data definition and data manipulation statements. However, for queries that return more than one row, you must explicitly declare a cursor (or use host arrays). You use the DECLARE CURSOR statement to declare an explicit cursor. The way you handle the opening and closing of explicit cursors affects performance.<a id="sthref2391"></a></p>
<p>If you need to reevaluate the active set, simply reOPEN the cursor. OPEN will use any new host-variable values. You can save processing time if you do not CLOSE the cursor first.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To make performance tuning easier, you can reOPEN an already open cursor. However, this is an ANSI extension. So, when MODE=ANSI, you must CLOSE a cursor before reOPENing it.</div>
<p>Only CLOSE a cursor when you want to free the resources (memory and locks) acquired by OPENing the cursor. For example, your program should CLOSE all cursors before exiting.</p>
<div id="LNPCC4569" class="sect3"><a id="sthref2392"></a>
<h4 class="sect3">Cursor Control</h4>
<p>In general, there are three ways to control an explicitly declared cursor:</p>
<ul>
<li>
<p>Use DECLARE, OPEN, and CLOSE.</p>
</li>
<li>
<p>Use PREPARE, DECLARE, OPEN, and CLOSE.</p>
</li>
<li>
<p>COMMIT closes the cursor when MODE=ANSI.</p>
</li>
</ul>
<p>With the first way, beware of unnecessary parsing. OPEN does the parsing, but only if the parsed statement is unavailable because the cursor was CLOSEd or never OPENed. Your program should DECLARE the cursor, reOPEN it every time the value of a host variable changes, and CLOSE it only when the SQL statement is no longer needed.</p>
<p>With the second way (for dynamic SQL Methods 3 and 4), PREPARE does the parsing, and the parsed statement is available until a CLOSE is executed. Your program should do the following:</p>
<ul>
<li>
<p>PREPARE the SQL statement</p>
</li>
<li>
<p>DECLARE the cursor</p>
</li>
<li>
<p>Again OPEN the cursor every time the value of a host variable changes</p>
</li>
<li>
<p>Again PREPARE the SQL statement</p>
</li>
<li>
<p>Again OPEN the cursor if the SQL statement changes</p>
</li>
<li>
<p>CLOSE the cursor only when the SQL statement is no longer needed.</p>
</li>
</ul>
<p>When possible, avoid placing OPEN and CLOSE statements in a loop; this is a potential cause of unnecessary reparsing of the SQL statement. In the next example, both the OPEN and CLOSE statements are inside the outer <span class="italic">while</span> loop. When MODE=ANSI, the CLOSE statement must be positioned as shown, because ANSI requires a cursor to be CLOSEd before being reOPENed.</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR FOR 
     SELECT ename, sal from emp where sal &gt;  :salary and  
                                      sal &lt;= :salary + 1000; 
salary = 0; 
while (salary &lt; 5000) 
{  
     EXEC SQL OPEN emp_cursor; 
     while (SQLCODE==0) 
     { 
         EXEC SQL FETCH emp_cursor INTO .... 
         ... 
     } 
     salary += 1000; 
     EXEC SQL CLOSE emp_cursor; 
}
</pre>
<p>With MODE=ORACLE, however, a CLOSE statement can execute without the cursor being OPENed. By placing the CLOSE statement outside the outer <span class="italic">while</span> loop, you can avoid possible reparsing at each iteration of the OPEN statement.</p>
<pre>... 
while (salary &lt; 5000) 
{  
     EXEC SQL OPEN emp_cursor; 
     while (sqlca.sqlcode==0) 
     { 
         EXEC SQL FETCH emp_cursor INTO .... 
         ... 
     } 
     salary += 1000; 
} 
EXEC SQL CLOSE emp_cursor;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCC4570" class="sect2"><a id="sthref2393"></a>
<h3 class="sect2">Using the Cursor Management Options</h3>
<p>A SQL statement need be parsed only once unless you change its makeup. For example, you change the makeup of a query by adding a column to its select list or WHERE clause. The HOLD_CURSOR, RELEASE_CURSOR, and MAXOPENCURSORS options give you some control over how the server manages the parsing and reparsing of SQL statements. Declaring an explicit cursor gives you maximum control over parsing.</p>
<div id="LNPCC4571" class="sect3"><a id="sthref2394"></a>
<h4 class="sect3">SQL Areas and Cursor Cache</h4>
<p>When a data manipulation statement is executed, its associated cursor is linked to an entry in the Pro*C/C++ cursor cache. The cursor cache is a continuously updated area of memory used for cursor management. The cursor cache entry is in turn linked to a private SQL area.<a id="sthref2395"></a></p>
<p>The private SQL area, a work area created dynamically at run time, contains the addresses of host variables, and other information needed to process the statement. An explicit cursor lets you name a SQL statement, access the information in its private SQL area, and, to some extent, control its processing.<a id="sthref2396"></a></p>
<p><a href="#CHEGCFFE">Figure B-2</a> represents the cursor cache after your program has done an INSERT and a DELETE.</p>
<div id="LNPCC4572" class="figure">
<p class="titleinfigure"><a id="CHEGCFFE"></a>Figure B-2 Cursors Linked using the Cursor Cache</p>
<img width="496" height="200" src="img/lnpcc020.gif" alt="Description of Figure B-2 follows"/><br/>
<a id="sthref2397" href="img_text/lnpcc020.htm">Description of &#34;Figure B-2 Cursors Linked using the Cursor Cache&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div id="LNPCC4573" class="sect3"><a id="sthref2398"></a>
<h4 class="sect3">Resource Use</h4>
<p>The maximum number of open cursors for each user session is set by the initialization parameter OPEN_CURSORS.</p>
<p>MAXOPENCURSORS specifies the <span class="italic">initial</span> size of the cursor cache. If a new cursor is needed and there are no free cache entries, the server tries to reuse an entry. Its success depends on the values of HOLD_CURSOR and RELEASE_CURSOR and, for explicit cursors, on the status of the cursor itself.</p>
<p>If the value of MAXOPENCURSORS is less than the number of cache entries actually needed, the server uses the first cache entry marked as reusable. For example, suppose an INSERT statement&#39;s cache entry <span class="italic">E</span>(1) is marked as reusable, and the number of cache entries already equals MAXOPENCURSORS. If the program executes a new statement, cache entry <span class="italic">E</span>(1) and its private SQL area might be reassigned to the new statement. To reexecute the INSERT statement, the server would have to reparse it and reassign another cache entry.</p>
<p>The server allocates an additional cache entry if it cannot find one to reuse. For example, if MAXOPENCURSORS=8 and all eight entries are active, a ninth is created. If necessary, the server keeps allocating additional cache entries until it runs out of memory or reaches the limit set by OPEN_CURSORS. This dynamic allocation adds to processing overhead.</p>
<p>Thus, specifying a low value for MAXOPENCURSORS saves memory but causes potentially expensive dynamic allocations and deallocations of new cache entries. Specifying a high value for MAXOPENCURSORS assures speedy execution but uses more memory.<a id="sthref2399"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC4574" class="sect3"><a id="sthref2400"></a>
<h4 class="sect3">Infrequent Execution</h4>
<p>Sometimes, the link between an <span class="italic">infrequently</span> executed SQL statement and its private SQL area should be temporary.</p>
<p>When HOLD_CURSOR=NO (the default), after the server executes the SQL statement and the cursor is closed, the precompiler marks the link between the cursor and cursor cache as reusable. The link is reused as soon as the cursor cache entry to which it points is needed for another SQL statement. This frees memory allocated to the private SQL area and releases parse locks. However, because a PREPAREd cursor must remain active, its link is maintained even when HOLD_CURSOR=NO.</p>
<p>When RELEASE_CURSOR=YES, after the server executes the SQL statement and the cursor is closed, the private SQL area is automatically freed and the parsed statement lost. This might be necessary if, for example, MAXOPENCURSORS is set low at your site to conserve memory.</p>
<p>If a data manipulation statement precedes a data definition statement and they reference the same tables, specify RELEASE_CURSOR=YES for the data manipulation statement. This avoids a conflict between the parse lock obtained by the data manipulation statement and the exclusive lock required by the data definition statement.</p>
<p>When RELEASE_CURSOR=YES, the link between the private SQL area and the cache entry is immediately removed and the private SQL area freed. Even if you specify HOLD_CURSOR=YES, the server must still reallocate memory for a private SQL area and reparse the SQL statement before executing it because RELEASE_CURSOR=YES overrides HOLD_CURSOR=YES.</p>
<p>However, when RELEASE_CURSOR=YES, the reparse might still require no extra processing because the server caches the parsed representations of SQL statements and PL/SQL blocks in its <span class="italic">Shared SQL Cache</span>. Even if its cursor is closed, the parsed representation remains available until it is aged out of the cache.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC4575" class="sect3"><a id="sthref2401"></a>
<h4 class="sect3">Frequent Execution</h4>
<p>The links between a <span class="italic">frequently</span> executed SQL statement and its private SQL area should be maintained because the private SQL area contains all the information needed to execute the statement. Maintaining access to this information makes subsequent execution of the statement much faster.</p>
<p>When HOLD_CURSOR=YES, the link between the cursor and cursor cache is maintained after the server executes the SQL statement. Thus, the parsed statement and allocated memory remain available. This is useful for SQL statements that you want to keep active because it avoids unnecessary reparsing.<a id="sthref2402"></a><a id="sthref2403"></a></p>
<p>When RELEASE_CURSOR=NO (the default), the link between the cache entry and the private SQL area is maintained after the server executes the SQL statement and is not reused unless the number of open cursors exceeds the value of MAXOPENCURSORS. This is useful for SQL statements that are executed often because the parsed statement and allocated memory remain available.<a id="sthref2404"></a><a id="sthref2405"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
With versions of Oracle prior to Oracle8<span class="italic">i</span>, when RELEASE_CURSOR=NO and HOLD_CURSOR=YES, after the server executes a SQL statement, its parsed representation remains available. But with later versions of Oracle, when RELEASE_CURSOR=NO and HOLD_CURSOR=YES, the parsed representation remains available only until it is aged out of the Shared SQL Cache. Normally, this is not a problem, but you might get unexpected results if the definition of a referenced object changes before the SQL statement is reparsed.</div>
</div>
<!-- class="sect3" -->
<a id="CHEGEAFA"></a>
<div id="LNPCC4576" class="sect3">
<h4 class="sect3">Embedded PL/SQL Considerations</h4>
<p>For the purposes of cursor management, an embedded PL/SQL block is treated just like a SQL statement. When an embedded PL/SQL block is executed, a parent cursor is associated with the entire block and a link is created between the cache entry and the private SQL area in the PGA for the embedded PL/SQL block. Be aware that each SQL statement inside the embedded block also requires a private SQL area in the PGA. These SQL statements use child cursors that PL/SQL manages itself. The disposition of the child cursors is determined through its associated parent cursor. That is, the private SQL areas used by the child cursors are freed after the private SQL area for its parent cursor is freed.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC4577" class="sect3"><a id="sthref2406"></a>
<h4 class="sect3">Parameter Interactions</h4>
<p><a href="#CHEBHDFF">Table B-0</a> shows how HOLD_CURSOR and RELEASE_CURSOR interact. Notice that HOLD_CURSOR=NO overrides RELEASE_CURSOR=NO and that RELEASE_CURSOR=YES overrides HOLD_CURSOR=YES.</p>
<div id="LNPCC4578" class="tblformal">
<p class="titleintable"><a id="sthref2407"></a><a id="CHEDAEHH"></a>Table B-1 HOLD_CURSOR and RELEASE _CURSOR Interactions</p>
<table class="cellalignment831" title="HOLD_CURSOR and RELEASE _CURSOR Interactions" summary="HOLD_CURSOR and RELEASE _CURSOR Interactions" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t4">HOLD_CURSOR</th>
<th class="cellalignment832" id="r1c2-t4">RELEASE_CURSOR</th>
<th class="cellalignment832" id="r1c3-t4">Links are ...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t4" headers="r1c1-t4">
<p>NO</p>
</td>
<td class="cellalignment833" headers="r2c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment833" headers="r2c1-t4 r1c3-t4">
<p>marked as reusable</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t4" headers="r1c1-t4">
<p>YES</p>
</td>
<td class="cellalignment833" headers="r3c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment833" headers="r3c1-t4 r1c3-t4">
<p>maintained</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t4" headers="r1c1-t4">
<p>NO</p>
</td>
<td class="cellalignment833" headers="r4c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment833" headers="r4c1-t4 r1c3-t4">
<p>removed immediately</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t4" headers="r1c1-t4">
<p>YES</p>
</td>
<td class="cellalignment833" headers="r5c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment833" headers="r5c1-t4 r1c3-t4">
<p>removed immediately</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div id="LNPCC4579" class="sect1"><a id="sthref2408"></a>
<h2 class="sect1">Avoiding Unnecessary Reparsing</h2>
<p>Avoiding unnecessary reparsing involves eliminating errors encountered during the execute phase of an SQL statement in a loop. When an embedded SQL statement is executed in a loop, the SQL statement is parsed only once. However, if the execution of the SQL statement results in an error, the SQL statement is usually reparsed. In this case, reparsing will occur for all errors encountered, except the following:</p>
<ul>
<li>
<p>ORA-1403 (not found)</p>
</li>
<li>
<p>ORA-1405 (truncation)</p>
</li>
<li>
<p>ORA-1406 (null value)</p>
</li>
</ul>
<p>By eliminating all other errors, you can avoid unnecessary reparsing.</p>
</div>
<!-- class="sect1" -->
<a id="CHEDHBAB"></a>
<div id="LNPCC4580" class="sect1">
<h2 class="sect1">Using Connection Pooling</h2>
<p>This section describes performance tuning using connection pooling. If an application is multithreaded and is performing concurrent operations on the same database, users can use the connection pooling feature to achieve better performance. Users can tune an application&#39;s performance by choosing the appropriate values for parameters used with connection pooling, and can achieve up to three times performance increase, when compared to existing application performance.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="pc_11thr.htm#g1021123">Chapter 11</a>, <a href="pc_11thr.htm#g1021123">Multithreaded Applications</a>, <a href="pc_11thr.htm#i1000292">Connection Pooling</a>.</p>
</li>
<li>
<p><a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment824">
<tr>
<td class="cellalignment833">
<table class="cellalignment829">
<tr>
<td class="cellalignment828"><a href="pc_abres.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment828"><a href="pc_adchk.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment836">
<table class="cellalignment827">
<tr>
<td class="cellalignment828"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment828"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment828"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment828"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment828"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment828"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>