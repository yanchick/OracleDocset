<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-78001"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Introduction"></a><title>Introduction</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-10T8:50:34Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Pro*C/C++ Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53432-01"/>
<meta name="dcterms.isVersionOf" content="LNPCC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="partpage1.htm" title="Previous" type="text/html"/>
<link rel="Next" href="pc_02prc.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53432-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/35</span> <!-- End Header -->
<div id="LNPCC3028" class="chapter"><a id="g10729"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction</h1>
<p>This chapter introduces you to the Oracle Pro*C/C++ Precompiler. You look at its role in developing application programs that manipulate Oracle data and find out what it enables your applications to do. This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#i4196">What is an Oracle Precompiler?</a></p>
</li>
<li>
<p><a href="#i2415">Why Use the Oracle Pro*C/C++ Precompiler</a></p>
</li>
<li>
<p><a href="#i2419">Why Use SQL</a></p>
</li>
<li>
<p><a href="#i2423">Why Use PL/SQL</a></p>
</li>
<li>
<p><a href="#i6032">Pro*C/C++ Precompiler Benefits</a></p>
</li>
<li>
<p><a href="#i5232">Frequently Asked Questions</a></p>
</li>
</ul>
<a id="i4196"></a>
<div id="LNPCC3029" class="sect1">
<h2 class="sect1">What is an Oracle Precompiler?</h2>
<p>An Oracle Precompiler is a programming tool that enables the user to embed SQL statements in a high-level source program. As <a href="#i5359">Figure 1-1</a> shows, the precompiler accepts the source program as input, translates the embedded SQL statements into standard Oracle runtime library calls, and generates a modified source program that you can compile, link, and execute in the usual way.</p>
<div id="LNPCC3030" class="figure">
<p class="titleinfigure"><a id="i5359"></a>Figure 1-1 Embedded SQL Program Development</p>
<img width="600" height="614" src="img/lnpcc001.gif" alt="Description of Figure 1-1 follows"/><br/>
<a id="sthref7" href="img_text/lnpcc001.htm">Description of &#34;Figure 1-1 Embedded SQL Program Development&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="i2415"></a>
<div id="LNPCC3031" class="sect1">
<h2 class="sect1">Why Use the Oracle Pro*C/C++ Precompiler</h2>
<p>The Oracle Pro*C/C++ Precompiler lets you use the power and flexibility of SQL in your application programs. A convenient, easy to use interface lets your application access Oracle directly.</p>
<p>Unlike many application development tools, Pro*C/C++ lets you create highly customized applications. For example, you can create user interfaces that incorporate the latest windowing and mouse technology. You can also create applications that run in the background without the need for user interaction.<a id="sthref8"></a></p>
<p>Furthermore, Pro*C/C++ helps you fine-tune your applications. It allows close monitoring of resource use, SQL statement execution, and various runtime indicators. With this information, you can change program parameters for maximum performance.</p>
<p>Although precompiling adds a step to the application development process, it saves time. The precompiler, not you, translates each embedded SQL statement into calls to the Oracle runtime library (SQLLIB). The Pro*C/C++ precompiler also analyzes host variables, defines mappings of structures into columns, and, with SQLCHECK=FULL, performs semantic analysis of the embedded SQL statements.</p>
</div>
<!-- class="sect1" -->
<a id="i2419"></a>
<div id="LNPCC3032" class="sect1">
<h2 class="sect1">Why Use SQL</h2>
<p>If you want to access and manipulate Oracle data, you need SQL. Whether you use SQL interactively through SQL*Plus or embedded in an application program depends on the job at hand. If the job requires the procedural processing power of C or C++, or must be done on a regular basis, use embedded SQL.<a id="sthref9"></a><a id="sthref10"></a><a id="sthref11"></a><a id="sthref12"></a></p>
<p>SQL has become the database language of choice because it is flexible, powerful, and easy to learn. Being non-procedural, it lets you specify what you want done without specifying how to do it. A few English-like statements make it easy to manipulate Oracle data one row or many rows at a time.<a id="sthref13"></a><a id="sthref14"></a></p>
<p>You can execute any SQL (not SQL*Plus<a id="sthref15"></a>) statement from an application program. For example, you can</p>
<ul>
<li>
<p>CREATE, ALTER, and DROP database tables dynamically</p>
</li>
<li>
<p>SELECT, INSERT, UPDATE, and DELETE rows of data</p>
</li>
<li>
<p>COMMIT or ROLLBACK transactions</p>
</li>
</ul>
<p>Before embedding SQL statements in an application program, you can test them interactively using SQL*Plus. Usually, only minor changes are required to switch from interactive to embedded SQL.<a id="sthref16"></a></p>
</div>
<!-- class="sect1" -->
<a id="i2423"></a>
<div id="LNPCC3033" class="sect1">
<h2 class="sect1">Why Use PL/SQL</h2>
<p>An extension to SQL, PL/SQL is a transaction processing language that supports procedural constructs, variable declarations, and robust error handling. Within the same PL/SQL block, you can use SQL and all the PL/SQL extensions.<a id="sthref17"></a><a id="sthref18"></a><a id="sthref19"></a></p>
<p>The main advantage of embedded PL/SQL is better performance. Unlike SQL, PL/SQL provides the ability to group SQL statements logically and send them to Oracle in a block rather than one by one. This reduces network traffic and processing overhead.<a id="sthref20"></a><a id="sthref21"></a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_07pls.htm#g27962">Chapter 7, &#34; Embedded PL/SQL&#34;</a> for information about embedding PL/SQL in Pro*C/C++ programs.</div>
</div>
<!-- class="sect1" -->
<a id="i6032"></a>
<div id="LNPCC3034" class="sect1">
<h2 class="sect1">Pro*C/C++ Precompiler Benefits</h2>
<p>As <a href="#i5373">Figure 1-2</a> shows, Pro*C/C++ offers many features and benefits, which help you to develop effective, reliable applications.</p>
<div id="LNPCC3035" class="figure">
<p class="titleinfigure"><a id="i5373"></a>Figure 1-2 Features and Benefits</p>
<img width="310" height="310" src="img/lnpcc002.gif" alt="Description of Figure 1-2 follows"/><br/>
<a id="sthref22" href="img_text/lnpcc002.htm">Description of &#34;Figure 1-2 Features and Benefits&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Pro*C/C++ enables:</p>
<ul>
<li>
<p>Writing applications in C or C++.</p>
</li>
<li>
<p>Following the ANSI/ISO standards for embedding SQL statements in a high-level language.</p>
</li>
<li>
<p>Taking advantage of dynamic SQL, an advanced programming technique that lets your Program accept or build any valid SQL statement at runtime.</p>
</li>
<li>
<p>Designing and developing highly customized applications.</p>
</li>
<li>
<p>Writing shared server process applications.</p>
</li>
<li>
<p>Automatically converting between Oracle internal datatypes and high-level language datatypes.</p>
</li>
<li>
<p>Improved performance by embedding PL/SQL transaction processing blocks in your application program.</p>
</li>
<li>
<p>Specifying useful precompiler options inline and on the command line and change their values during precompilation.</p>
</li>
<li>
<p>The use of datatype equivalencing to control the way Oracle interprets input data and formats output data.</p>
</li>
<li>
<p>Separately precompiling several program modules, then link them into one executable Program.</p>
</li>
<li>
<p>Complete checking of the syntax and semantics of embedded SQL data manipulation statements and PL/SQL blocks.</p>
</li>
<li>
<p>Concurrent access to Oracle databases on multiple nodes using Oracle Net.</p>
</li>
<li>
<p>The use of arrays as input and output program variables.</p>
</li>
<li>
<p>Conditionally precompiling sections of code in your host program so that it can run in different environments.</p>
</li>
<li>
<p>Direct interface with SQL*Forms through the use of user exits written in a high-level language.</p>
</li>
<li>
<p>Handling errors and warnings with the SQL Communications Area (SQLCA) and the WHENEVER or DO statement.</p>
</li>
<li>
<p>The use of an enhanced set of diagnostics provided by the Oracle Communications Area (ORACA).</p>
</li>
<li>
<p>Working with user-defined object types in the database.</p>
</li>
<li>
<p>The use of collections (varrays and nested tables) in the database.</p>
</li>
<li>
<p>The use of LOBs (Large Objects) in the database.</p>
</li>
<li>
<p>The use of National Character Set data stored in the database.</p>
</li>
<li>
<p>The use of OCI (Oracle Call Interface) functions in your program.</p>
</li>
<li>
<p>The use of multi-threaded applications.</p>
</li>
<li>
<p>Microsoft Visual Studio .NET 2002/2003 support.</p>
</li>
</ul>
<p>Pro*C/C++ is a full-featured tool that supports a professional approach to embedded SQL programming.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Pro*C/C++ does not support 16-bit code generation.</div>
</div>
<!-- class="sect1" -->
<a id="i1005732"></a>
<div id="LNPCC3036" class="sect1">
<h2 class="sect1">Directory Structure<a id="sthref23"></a></h2>
<p>When you install Oracle software, a directory structure is created on your hard drive for the Oracle products. A main Oracle directory contains the Oracle subdirectories and files that are necessary to run Pro*C/C++.</p>
<p>When you install Pro*C/C++, Oracle Universal Installer creates a directory called <code>\precomp</code> in the <code><span class="codeinlineitalic">ORACLE_BASE</span></code><code>\</code><code><span class="codeinlineitalic">ORACLE_HOME</span></code> directory. <a id="sthref24"></a>This subdirectory contains the Pro*C/C++ executable files, library files, and sample programs listed in <a href="#g1006057">Table 1-1</a>.</p>
<div id="LNPCC3037" class="tblhruleformal">
<p class="titleintable"><a id="sthref25"></a><a id="g1006057"></a>Table 1-1 precomp Directory Structure</p>
<table class="cellalignment834" title="precomp Directory Structure" summary="Precomp directory structure" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t4">Directory Name</th>
<th class="cellalignment832" id="r1c2-t4">Contents</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t4" headers="r1c1-t4">
<p><code>\admin</code></p>
</td>
<td class="cellalignment833" headers="r2c1-t4 r1c2-t4">
<p>Configuration files</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t4" headers="r1c1-t4">
<p><code>\demo<a id="sthref26"></a>\proc</code></p>
</td>
<td class="cellalignment833" headers="r3c1-t4 r1c2-t4">
<p>Sample programs for Pro*C/C++</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t4" headers="r1c1-t4">
<p><code>\demo\sql</code></p>
</td>
<td class="cellalignment833" headers="r4c1-t4 r1c2-t4">
<p>SQL scripts for sample programs</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t4" headers="r1c1-t4">
<p><code>\doc\proc</code></p>
</td>
<td class="cellalignment833" headers="r5c1-t4 r1c2-t4">
<p>Readme files for Pro*C/C++</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t4" headers="r1c1-t4">
<p><code>\lib\msvc</code></p>
</td>
<td class="cellalignment833" headers="r6c1-t4 r1c2-t4">
<p>Library files for Pro*C/C++</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t4" headers="r1c1-t4">
<p><code>\mesg</code></p>
</td>
<td class="cellalignment833" headers="r7c1-t4 r1c2-t4">
<p>Message files</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t4" headers="r1c1-t4">
<p><code>\public</code></p>
</td>
<td class="cellalignment833" headers="r8c1-t4 r1c2-t4">
<p>Header files</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>\precomp</code> directory can contain files for other products, such as Pro*COBOL.</div>
<div id="LNPCC3038" class="sect2"><a id="sthref27"></a>
<h3 class="sect2">Known Problems, Restrictions, and Workarounds</h3>
<p>Although all Windows operating systems allow spaces in file names and directory names, the Oracle Pro*C/C++ and Oracle Pro*COBOL precompilers will not precompile files that include spaces in the filename or directory name. For example, do not use the following formats:</p>
<ul>
<li>
<p><code>proc iname=test one.pc</code></p>
</li>
<li>
<p><code>proc iname=d:\dir1\second dir\sample1.pc</code></p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006081"></a>
<div id="LNPCC3039" class="sect1">
<h2 class="sect1">Library Files<a id="sthref28"></a><a id="sthref29"></a><a id="sthref30"></a><a id="sthref31"></a><a id="sthref32"></a></h2>
<p>When linking Pro*C/C++ applications, you use library files. The Pro*C/C++ library files are installed as follows:</p>
<pre>ORACLE_HOME\precomp\LIB\orasql12.lib
</pre>
<pre>ORACLE_HOME\precomp\LIB\ottclasses.zip
</pre>
<pre>ORACLE_HOME\precomp\LIB\msvc\orasqx12.lib
</pre>
<p>Pro*C/C++ application program interface (API) calls are implemented in DLL files provided with your Pro*C/C++ software. To use the DLLs, you must link your application with the import libraries (.lib files) that correspond to the Pro*C/C++ DLLs. Also, you must ensure that the DLL files are installed on the computer that is running your Pro*C/C++ application.</p>
<p>Microsoft provides you with three libraries: <code>libc.lib</code>, <code>libcmt.lib</code>, and <code>msvcrt.lib</code>. The Oracle DLLs use the <a id="sthref33"></a><code>msvcrt.lib</code> runtime library. You must link the applications with <code>msvcrt.lib</code> instead of the other two Microsoft libraries.</p>
</div>
<!-- class="sect1" -->
<a id="i5232"></a>
<div id="LNPCC3040" class="sect1">
<h2 class="sect1"><a id="sthref34"></a><a id="sthref35"></a>Frequently Asked Questions</h2>
<p>This section presents some questions that are frequently asked about Pro*C/C++, and about Oracle in relation to Pro*C/C++. The answers are more informal than the documentation in the rest of this Guide, but do provide references to places where you can find the reference material.</p>
<div id="LNPCC3041" class="sect2"><a id="sthref36"></a>
<h3 class="sect2">What is a VARCHAR?</h3>
<p>Here is a short description of VARCHARs:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="description of varchar2, varchar, and varchar[n]" summary="VARCHAR" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t6"><span class="bold">VARCHAR</span></th>
<th class="cellalignment832" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t6" headers="r1c1-t6">VARCHAR2</td>
<td class="cellalignment833" headers="r2c1-t6 r1c2-t6">A kind of column in the database that contains variable-length character data. This is what Oracle calls an &#34;internal datatype&#34;, because it is a possible column type.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t6" headers="r1c1-t6">VARCHAR</td>
<td class="cellalignment833" headers="r3c1-t6 r1c2-t6">An Oracle &#34;external datatype&#34; (datatype code 9). You use this only if you are doing dynamic SQL Method 4, or datatype equivalencing.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t6" headers="r1c1-t6">VARCHAR[n]
<p>varchar[n]</p>
</td>
<td class="cellalignment833" headers="r4c1-t6 r1c2-t6">This is a Pro*C/C++ &#34;pseudotype&#34; that you can declare as a host variable in your Pro*C/C++ program. It is actually generated by Pro*C/C++ as a struct, with a 2-byte length element, and a [n]-byte character array.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="pc_04dat.htm#g52211">Chapter 4, &#34;Datatypes and Host Variables&#34;</a></p>
</li>
<li>
<p><a href="pc_14ady.htm#i1011699">Chapter 14, &#34; ANSI Dynamic SQL&#34;</a></p>
</li>
<li>
<p><a href="pc_15ody.htm#i22863">Chapter 15, &#34;Oracle Dynamic SQL: Method 4&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNPCC3042" class="sect2"><a id="sthref37"></a>
<h3 class="sect2">Does Pro*C/C++ Generate Calls to the Oracle Call Interface?</h3>
<p>No. Pro*C/C++ generates data structures and calls to its runtime library: SQLLIB.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3043" class="sect2"><a id="sthref38"></a>
<h3 class="sect2">Why Not Code Using SQLLIB Calls and Not Use Pro*C/C++?</h3>
<p>SQLLIB is not externally documented, is unsupported, and might change from release to release. Also, Pro*C/C++ is an ANSI/ISO compliant product, that follows the standard requirements for embedded SQL.</p>
<p>SQLLIB is not an API. While it has user-callable functions, it is primarily a runtime library for the precompiler suite of languages.</p>
<p>If you need to do API coding for the database, either use the Oracle Call Interface, the client side API for the Oracle RDBMS, or mix OCI and Pro*C/C++.</p>
<p>See <a href="pc_05adv.htm#i431030">&#34;SQLLIB Extensions for OCI Release 8 Interoperability&#34;</a>. <a id="sthref39"></a></p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3044" class="sect2"><a id="sthref40"></a>
<h3 class="sect2">Can I Call A PL/SQL Stored Procedure From a Pro*C/C++ Program?</h3>
<p>Certainly. See <a href="pc_07pls.htm#g27962">Chapter 7, &#34; Embedded PL/SQL&#34;</a>. There is a demo program, <a href="pc_07pls.htm#i2113">&#34;Calling a Stored PL/SQL or Java Subprogram&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3045" class="sect2"><a id="sthref41"></a>
<h3 class="sect2">Can I Write C++ Code, and Precompile It Using Pro*C/C++? <a id="sthref42"></a></h3>
<p>Yes. See <a href="pc_12cpl.htm#g12549">Chapter 12, &#34;C++ Applications&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3046" class="sect2"><a id="sthref43"></a>
<h3 class="sect2">Can I Use Bind Variables Anywhere in a SQL Statement?</h3>
<p>For example, I would d like to be able to input the name of a table in my SQL statements at runtime. But when I use host variables, I get precompiler errors.</p>
<p>In general, you can use host variables at anywhere in a SQL or PL/SQL, statement where expressions are allowed. See <a href="pc_04dat.htm#i8735">&#34;Host Variable Referencing&#34;</a>.</p>
<p>However, the following SQL statement, where <span class="italic">table_name</span> is a host variable, is <span class="italic">illegal</span>:</p>
<pre>EXEC SQL SELECT ename,sal INTO :name, :salary FROM :table_name;
</pre>
<p>To solve your problem, you need to use dynamic SQL. See <a href="pc_13dyn.htm#g19220">Chapter 13, &#34;Oracle Dynamic SQL&#34;</a>. There is a demo program that you can adapt to do this, <a href="pc_13dyn.htm#i1962">&#34;Example Program: Dynamic SQL Method 1&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3047" class="sect2"><a id="sthref44"></a>
<h3 class="sect2">I Am Confused By Character Handling in Pro*C/C++.</h3>
<p>There are many options, but we can simplify. First of all, if you need compatibility with previous precompiler releases, and Oracle7, the safest thing to do is use VARCHAR[n] host variables. See <a href="pc_04dat.htm#i23305">&#34;VARCHAR Variable Declaration&#34;</a>.</p>
<p>The default datatype for all other character variables in Pro*C/C++ is CHARZ; see <a href="pc_04dat.htm#i15909">&#34;CHARZ&#34;</a>. Briefly, this means that you must null-terminate the string on input, and it is both blank-padded and null-terminated on output.</p>
<p>In release 8.0, the CHAR_MAP precompiler option was introduced to specify the default mapping of char variables. See <a href="pc_05adv.htm#i429858">&#34;Precompiler Option CHAR_MAP&#34;</a>.</p>
<p>If neither VARCHAR nor CHARZ works for your application, and you need total C-like behavior (null termination, absolutely no blank-padding), use the TYPE command and the C <code>typedef</code> statement, and use datatype equivalencing to convert your character host variables to STRING. See <a href="pc_05adv.htm#i430275">&#34;User-Defined Type Equivalencing&#34;</a>. There is an example program that shows how to use the TYPE command starting on <a href="pc_04dat.htm#i24296">&#34;Example Program: Using sqlvcp()&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3048" class="sect2"><a id="sthref45"></a>
<h3 class="sect2">Is There Anything Special About Character Pointers?</h3>
<p>Yes. When Pro*C/C++ binds an input or output host variable, it must know the length. When you use VARCHAR[n], or declare a host variable of type char[n], Pro*C/C++ knows the length from your declaration. But when you use a character pointer as a host variable, and use <code>malloc()</code> to define the buffer in your program, Pro*C/C++ has no way of knowing the length.</p>
<p>On output you must not only allocate the buffer, but pad it out with some non-null characters, then null-terminate it. On input or output, Pro*C/C++ calls <code>strlen()</code> for the buffer to get the length. See <a href="pc_04dat.htm#i9172">&#34;Pointer Variables&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3049" class="sect2"><a id="sthref46"></a>
<h3 class="sect2">Why Does SPOOL Not Work in Pro*C/C++?</h3>
<p>SPOOL is a special command used in SQL*Plus. It is not an embedded SQL command. See <a href="pc_02prc.htm#i1838">&#34;Key Concepts of Embedded SQL Programming&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3050" class="sect2"><a id="sthref47"></a>
<h3 class="sect2">Where Can I Find The On-line Versions of the Example Programs?</h3>
<p>Each Oracle installation should have a <code>demo</code> directory. If the directory is not there, or it does not contain the example programs, see your system or database administrator.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3051" class="sect2"><a id="sthref48"></a>
<h3 class="sect2">How Can I Compile and Link My Application?</h3>
<p>Compiling and linking are very platform specific. Your system-specific Oracle documentation has instructions on how to link a Pro*C/C++ application. On UNIX systems, there is a makefile called <code>demo_proc.mk</code> in the <code>demo</code> directory. To link, say, the demo program sample1.pc, you would enter the command line <a id="sthref49"></a><a id="sthref50"></a><a id="sthref51"></a></p>
<pre>make -f demo_proc.mk sample1
</pre>
<p>If you need to use special precompiler options, you can run Pro*C/C++ separately, then do the make. Or, you can create your own custom makefile. For example, if your program contains embedded PL/SQL code, you can enter</p>
<pre>proc cv_demo userid=<span class="italic">username</span>/<span class="italic">password</span> sqlcheck=semantics
make -f demo_proc.mk build OBJS=sample1.o EXE=sample1
</pre>
<p>On VMS systems, there is a script called LNPROC that you use to link your Pro*C/C++ applications. <a id="sthref52"></a><a id="sthref53"></a><a id="sthref54"></a></p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3052" class="sect2"><a id="sthref55"></a>
<h3 class="sect2">Does Pro*C/C++ Now Support Using Structures As Host Variables?</h3>
<p>How does this work with the array interface?</p>
<p>You can use arrays inside a single structure, or an array of structures with the array interface. See <a href="pc_04dat.htm#i12467">&#34;Host Structures&#34;</a> and <a href="pc_04dat.htm#i9172">&#34;Pointer Variables&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3053" class="sect2"><a id="sthref56"></a>
<h3 class="sect2">Is It Possible to Have Recursive Functions In Pro*C/C++ If I Use Embedded SQL In the Function?</h3>
<p>Yes. However, for embedded SQL, you must use cursor variables.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3054" class="sect2"><a id="sthref57"></a>
<h3 class="sect2">Can I Use Any Release of Pro*C/C++ with Any Version of the Oracle Server?</h3>
<p>When you run a precompiler or OCI application against a database server, Oracle recommends that the release of the database server software be equal to or higher than the client software release, but this configuration is not strictly required. For example, if your Oracle Database client software is release 8.1.7, then it is recommended that your Oracle Database server software be release 8.1.7 or higher to run a precompiler application on the client against the server.</p>
<p>More information about upgrading your applications can be found in the <a class="olink UPGRD" href="../UPGRD/toc.htm"><span class="italic">Oracle Database Upgrade Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3055" class="sect2"><a id="sthref58"></a>
<h3 class="sect2">When My Application Runs, I Keep Getting an Ora-1405 Error (Fetched Column Value Is NULL).</h3>
<p>You are selecting a NULL into a host variable that does not have an associated indicator variable. This is not in compliance with the ANSI/ISO standards, and was changed beginning with Oracle7.</p>
<p>If possible, rewrite your program using indicator variables, and use indicators in future development. Indicator variables are described <a href="pc_04dat.htm#i12463">&#34;Indicator Variables&#34;</a>.</p>
<p>Alternatively, if precompiling with MODE=ORACLE and DBMS=V7 or V8, specify UNSAFE_NULL=YES on the command line (see <a href="pc_10opt.htm#i8679">&#34;UNSAFE_NULL&#34;</a> for more information) to disable the ORA-01405 message.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3056" class="sect2"><a id="sthref59"></a>
<h3 class="sect2">Are All SQLLIB Functions Private?</h3>
<p>No. There are some SQLLIB functions that you can call to get information about your program, or its data. The SQLLIB public functions are shown here:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="descriptions of SQLLIB public functions" summary="SQLLIB" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t8">SQLLIB Public Functions</th>
<th class="cellalignment832" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t8" headers="r1c1-t8">SQLSQLDAAlloc()</td>
<td class="cellalignment833" headers="r2c1-t8 r1c2-t8">Used to allocate a SQL descriptor array (SQLDA) for dynamic SQL Method 4. See <a href="pc_15ody.htm#i7161">&#34;How is the SQLDA Referenced?&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t8" headers="r1c1-t8">SQLCDAFromResultSetCursor()</td>
<td class="cellalignment833" headers="r3c1-t8 r1c2-t8">Used to convert a Pro*C/C++ cursor variable to an OCI cursor data area. See <a href="pc_05adv.htm#i426817">&#34;New Names for SQLLIB Public Functions&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t8" headers="r1c1-t8">SQLSQLDAFree()</td>
<td class="cellalignment833" headers="r4c1-t8 r1c2-t8">Used to free a SQLDA allocated using <span class="italic">SQLSQLDAAlloc().</span> See <a href="pc_05adv.htm#i426817">&#34;New Names for SQLLIB Public Functions&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t8" headers="r1c1-t8">SQLCDAToResultSetCursor()</td>
<td class="cellalignment833" headers="r5c1-t8 r1c2-t8">Used to convert an OCI cursor data area to a Pro*C/C++ cursor variable. See <a href="pc_05adv.htm#i426817">&#34;New Names for SQLLIB Public Functions&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t8" headers="r1c1-t8">SQLErrorGetText()</td>
<td class="cellalignment833" headers="r6c1-t8 r1c2-t8">Returns a long error message. See <a href="pc_09err.htm#g30932">&#34;<span class="italic">sqlerrm</span>&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t8" headers="r1c1-t8">SQLStmtGetText()</td>
<td class="cellalignment833" headers="r7c1-t8 r1c2-t8">Used to return the text of the most recently executed SQL statement. See <a href="pc_09err.htm#i6810">&#34;Obtaining the Text of SQL Statements&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t8" headers="r1c1-t8">SQLLDAGetNamed()</td>
<td class="cellalignment833" headers="r8c1-t8 r1c2-t8">Used to obtain a valid Logon Data Area for a named connection, when OCI calls are used in a Pro*C/C++ program. See <a href="pc_05adv.htm#i426817">&#34;New Names for SQLLIB Public Functions&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t8" headers="r1c1-t8">SQLLDAGetCurrent()</td>
<td class="cellalignment833" headers="r9c1-t8 r1c2-t8">Used to obtain a valid Logon Data Area for the most recent connection, when OCI calls are used in a Pro*C/C++ program. See <a href="pc_05adv.htm#i426817">&#34;New Names for SQLLIB Public Functions&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t8" headers="r1c1-t8">SQLColumnNullCheck()</td>
<td class="cellalignment833" headers="r10c1-t8 r1c2-t8">Returns an indication of NULL status for dynamic SQL Method 4. See <a href="pc_15ody.htm#i11254">&#34;Handling NULL/Not NULL Datatypes&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t8" headers="r1c1-t8">SQLNumberPrecV6()</td>
<td class="cellalignment833" headers="r11c1-t8 r1c2-t8">Returns precision and scale of numbers. See <a href="pc_15ody.htm#i6993">&#34;Extracting Precision and Scale&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t8" headers="r1c1-t8">SQLNumberPrecV7()</td>
<td class="cellalignment833" headers="r12c1-t8 r1c2-t8">A variant of <span class="italic">SQLNumberPrecV6()</span>. See <a href="pc_15ody.htm#i6993">&#34;Extracting Precision and Scale&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r13c1-t8" headers="r1c1-t8">SQLVarcharGetLength()</td>
<td class="cellalignment833" headers="r13c1-t8 r1c2-t8">Used for obtaining the padded size of a VARCHAR[n]. See <a href="pc_04dat.htm#i23400">&#34;Find the Length of the VARCHAR Array Component&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r14c1-t8" headers="r1c1-t8">SQLEnvGet()</td>
<td class="cellalignment833" headers="r14c1-t8 r1c2-t8">Returns the OCI environment handle for a given SQLLIB runtime context. See <a href="pc_05adv.htm#i431059">&#34;SQLEnvGet()&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r15c1-t8" headers="r1c1-t8">SQLSvcCtxGet()</td>
<td class="cellalignment833" headers="r15c1-t8 r1c2-t8">Returns the OCI service context for the database connection. See <a href="pc_05adv.htm#i431085">SQLSvcCtxGet()</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r16c1-t8" headers="r1c1-t8">SQLRowidGet()</td>
<td class="cellalignment833" headers="r16c1-t8 r1c2-t8">Returns the universal ROWID of the last row inserted. See <a href="pc_04dat.htm#i24935">&#34;SQLRowidGet()&#34;</a>.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r17c1-t8" headers="r1c1-t8">SQLExtProcError()</td>
<td class="cellalignment833" headers="r17c1-t8 r1c2-t8">Returns control to PL/SQL when an error occurs in an external C procedure. See <a href="pc_07pls.htm#i9112">&#34;SQLExtProcError()&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>In the preceding list, the functions are thread-safe SQLLIB public functions. Use these functions in all new applications. For more information about these thread-safe public functions (including their old names), see the table <a href="pc_05adv.htm#g450022">&#34;SQLLIB Public Functions -- New Names&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3057" class="sect2"><a id="sthref60"></a>
<h3 class="sect2">How Does Oracle Support The New Object Types?</h3>
<p>See the chapters <a href="pc_17obj.htm#g480794">Chapter 17, &#34;Objects&#34;</a> and <a href="pc_19ott.htm#g464850">Chapter 19, &#34;The Object Type Translator&#34;</a> for how to use Object types in Pro*C/C++ applications.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3058" class="sect2"><a id="sthref61"></a>
<h3 class="sect2">Compatibility, Upgrading, and Migration</h3>
<p>Pro*C/C++ adopts a similar compatibility rule to OCI-based applications. This compatibility is subject to the same limitations that OCI imposes on backward compatibility.</p>
<p>The additional &#34;array insert&#34; and &#34;array select&#34; syntax will help migrating DB2 precompiler applications to the Pro*C/C++ application. This is because you will not need to change DB2 array INSERT and SELECT syntax to that of Oracle Pro*C/C++.</p>
<p>The &#34;Implicit Buffered Insert&#34; feature supported by Pro*C/C++ helps you to migrate DB2 precompiler applications to Pro*C/C++ applications without using the array syntax of Pro*C/C++ for better performance.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment824">
<tr>
<td class="cellalignment833">
<table class="cellalignment829">
<tr>
<td class="cellalignment828"><a href="partpage1.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment828"><a href="pc_02prc.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment836">
<table class="cellalignment827">
<tr>
<td class="cellalignment828"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment828"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment828"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment828"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment828"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment828"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>