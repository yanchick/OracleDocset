<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-78009"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Handling%20Runtime%20Errors"></a><title>Handling Runtime Errors</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-10T8:50:40Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Pro*C/C++ Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53432-01"/>
<meta name="dcterms.isVersionOf" content="LNPCC"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="pc_08arr.htm" title="Previous" type="text/html"/>
<link rel="Next" href="pc_10opt.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53432-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/35</span> <!-- End Header -->
<div id="LNPCC3490" class="chapter"><a id="g35612"></a> <a id="i6520"></a>
<h1 class="chapter"><span class="secnum">9</span> Handling Runtime Errors</h1>
<p>An application program must anticipate runtime errors and attempt to recover from them. This chapter provides an in-depth discussion of error reporting and recovery. You learn how to handle errors and status changes using the SQLSTATE status variable, as well as the SQL Communications Area (SQLCA) and the WHENEVER directive. You also learn how to diagnose problems using the Oracle Communications Area (ORACA). This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#i6760">The Need for Error Handling</a></p>
</li>
<li>
<p><a href="#i6764">Error Handling Alternatives</a></p>
</li>
<li>
<p><a href="#i6768">The SQLSTATE Status Variable</a></p>
</li>
<li>
<p><a href="#i6772">Declaring SQLCODE</a></p>
</li>
<li>
<p><a href="#i6796">Key Components of Error Reporting Using the SQLCA</a></p>
</li>
<li>
<p><a href="#i6776">Using the SQL Communications Area (SQLCA)</a></p>
</li>
<li>
<p><a href="#i6805">Getting the Full Text of Error Messages</a></p>
</li>
<li>
<p><a href="#i12340">Using the WHENEVER Directive</a></p>
</li>
<li>
<p><a href="#i6810">Obtaining the Text of SQL Statements</a></p>
</li>
<li>
<p><a href="#i6814">Using the Oracle Communications Area (ORACA)</a></p>
</li>
</ul>
<a id="i6760"></a>
<div id="LNPCC3491" class="sect1">
<h2 class="sect1">The Need for Error Handling</h2>
<p>A significant part of every application program must be devoted to error handling. The main reason for error handling is that it allows your program to continue operating in the presence of errors. Errors arise from design faults, coding mistakes, hardware failures, invalid user input, and many other sources.<a id="sthref1130"></a></p>
<p>You cannot anticipate all possible errors, but you can plan to handle certain kinds of errors that are meaningful to your program. For the Pro*C/C++ Precompiler, error handling means detecting and recovering from SQL statement execution errors. You can also prepare to handle warnings such as &#34;value truncated&#34; and status changes such as &#34;end of data.&#34; It is especially important to check for error and warning conditions after every SQL data manipulation statement, because an INSERT, UPDATE, or DELETE statement might fail before processing all eligible rows in a table.</p>
</div>
<!-- class="sect1" -->
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1131"></a>
<h2 class="sect1">Signal Handler - Known Limitations</h2>
<p>Issuing COMMIT<a id="sthref1132"></a><a id="sthref1133"></a><a id="sthref1134"></a><a id="sthref1135"></a>, ROLLBACK and other SQL in a signal handler in a single thread environment causes an unexpected result ( ORA-1013)</p>
</div>
<!-- class="sect1" -->
<a id="i6764"></a>
<div id="LNPCC3492" class="sect1">
<h2 class="sect1">Error Handling Alternatives<a id="sthref1136"></a></h2>
<p>There are several alternatives that you can use to detect errors and status changes in the application. This chapter describes these alternatives, however, no specific recommendations are made about what method you should use. The method is, after all, dictated by the design of the application program or tool that you are building.</p>
<div id="LNPCC3493" class="sect2"><a id="sthref1137"></a>
<h3 class="sect2">Status Variables</h3>
<p>You can declare a separate status variable, SQLSTATE or SQLCODE, examine its value after each executable SQL statement, and take appropriate action. The action might be calling an error-reporting function, then exiting the program if the error is unrecoverable. Or, you might be able to adjust data or control variables and retry the action.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="#i6768">&#34;The SQLSTATE Status Variable&#34;</a> and <a href="#i6772">&#34;Declaring SQLCODE&#34;</a> for complete information about these status variables. <a id="sthref1138"></a><a id="sthref1139"></a></li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i6825"></a>
<div id="LNPCC3494" class="sect2">
<h3 class="sect2">The SQL Communications Area</h3>
<p>Another alternative that you can use is to include the SQL Communications Area structure (<span class="italic">sqlca</span>) in your program. This structure contains components that are filled in at runtime after the SQL statement is processed by Oracle. <a id="sthref1140"></a><a id="sthref1141"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In this guide, the <span class="italic">sqlca</span> structure is commonly referred to using the acronym for <span class="italic">SQL Communications Area</span> (SQLCA). When this guide refers to a specific component in the C <span class="bold">struct</span>, the structure name (<span class="italic">sqlca</span>) is used.</div>
<p>The SQLCA is defined in the header file <code>sqlca.h</code>, which you include in your program using either of the following statements:</p>
<ul>
<li>
<p>EXEC SQL INCLUDE SQLCA;</p>
</li>
<li>
<p>#include &lt;sqlca.h&gt;</p>
</li>
</ul>
<p>Oracle updates the SQLCA after every <span class="italic">executable</span> SQL statement. (SQLCA values are unchanged after a declarative statement.) By checking Oracle return codes stored in the SQLCA, your program can determine the outcome of a SQL statement. This can be done in the following two ways:<a id="sthref1142"></a><a id="sthref1143"></a></p>
<ul>
<li>
<p>Implicit checking with the WHENEVER directive</p>
</li>
<li>
<p>Explicit checking of SQLCA components</p>
</li>
</ul>
<p>You can use WHENEVER directives, code explicit checks on SQLCA components, or do both.</p>
<p>The most frequently-used components in the SQLCA are the status variable (<span class="italic">sqlca.sqlcode</span>), and the text associated with the error code (<span class="italic">sqlca.sqlerrm.sqlerrmc</span>). Other components contain warning flags and miscellaneous information about the processing of the SQL statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
SQLCODE (upper case) always refers to a separate status variable, not a component of the SQLCA. SQLCODE is declared as a <span class="bold">integer</span>. When referring to the component of the SQLCA named <span class="italic">sqlcode</span>, the fully-qualified name <span class="italic">sqlca.sqlcode</span> is always used.</div>
<p>When more information is needed about runtime errors than the SQLCA provides, you can use the ORACA. The ORACA is a C <span class="bold">struct</span> that handles Oracle communication. It contains cursor statistics, information about the current SQL statement, option settings, and system statistics.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i6776">&#34;Using the SQL Communications Area (SQLCA)&#34;</a><a id="sthref1144"></a><a id="sthref1145"></a> for complete information about the SQLCA structure.</p>
</li>
<li>
<p><a href="#i6814">&#34;Using the Oracle Communications Area (ORACA)&#34;</a> for complete information about the ORACA.<a id="sthref1146"></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i6768"></a>
<div id="LNPCC3495" class="sect1">
<h2 class="sect1">The SQLSTATE Status Variable<a id="sthref1147"></a></h2>
<p>The precompiler command line option MODE governs ANSI/ISO compliance. When MODE=ANSI, declaring the SQLCA data structure is optional. However, you must declare a separate status variable named SQLCODE. The SQL standard specifies a similar status variable named SQLSTATE, which you can use with or without SQLCODE.</p>
<p>After executing a SQL statement, the Oracle Server returns a status code to the SQLSTATE variable currently in scope. The status code indicates whether the SQL statement executed successfully or raised an exception (error or warning condition). To promote <span class="italic">interoperability</span> (the ability of systems to exchange information easily), the SQL standard predefines all the common SQL exceptions.</p>
<p>Unlike SQLCODE, which stores only error codes, SQLSTATE stores error and warning codes. Furthermore, the SQLSTATE reporting mechanism uses a standardized coding scheme. Thus, SQLSTATE is the preferred status variable. SQLCODE was a deprecated feature of SQL-92 that was retained only for compatibility with SQL-89. SQLCODE has been removed from all editions of the SQL standard subsequent to SQL-92.</p>
<div id="LNPCC3496" class="sect2"><a id="sthref1148"></a>
<h3 class="sect2">Declaring SQLSTATE<a id="sthref1149"></a></h3>
<p>When MODE=ANSI, you must declare SQLSTATE or SQLCODE. Declaring the SQLCA is optional. When MODE=ORACLE, if you declare SQLSTATE, it is not used.</p>
<p>Unlike SQLCODE, which stores signed integers and can be declared outside the Declare Section, SQLSTATE stores 5-character null-terminated strings and must be declared inside the Declare Section. You declare SQLSTATE as</p>
<pre>char  SQLSTATE[6];  /* Upper case is required. */ 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
SQLSTATE must be declared with a dimension of <span class="italic">exactly</span> 6 characters.</div>
</div>
<!-- class="sect2" -->
<div id="LNPCC3497" class="sect2"><a id="sthref1150"></a>
<h3 class="sect2">SQLSTATE Values <a id="sthref1151"></a></h3>
<p>SQLSTATE status codes consist of a 2-character <span class="italic">class code</span> immediately followed by a 3-character <span class="italic">subclass code</span>. Aside from class code 00 (&#34;successful completion&#34;,) the class code denotes a category of exceptions. And, aside from subclass code 000 (&#34;not applicable&#34;,) the subclass code denotes a specific exception within that category. For example, the SQLSTATE value &#39;22012&#39; consists of class code 22 (&#34;data exception&#34;) and subclass code 012 (&#34;division by zero&#34;).<a id="sthref1152"></a></p>
<p>Each of the five characters in a SQLSTATE value is a digit (0..9) or an uppercase Latin letter (A..Z). Class codes that begin with a digit in the range 0..4 or a letter in the range A..H are reserved for predefined conditions (those defined in the SQL standard). All other class codes are reserved for implementation-defined conditions. Within predefined classes, subclass codes that begin with a digit in the range 0..4 or a letter in the range A..H are reserved for predefined subconditions. All other subclass codes are reserved for implementation-defined subconditions. <a href="#i6842">Figure 9-1</a> shows the coding scheme.</p>
<div id="LNPCC3498" class="figure">
<p class="titleinfigure"><a id="i6842"></a>Figure 9-1 SQLSTATE Coding Scheme</p>
<img width="605" height="233" src="img/lnpcc008.gif" alt="Description of Figure 9-1 follows"/><br/>
<a id="sthref1153" href="img_text/lnpcc008.htm">Description of &#34;Figure 9-1 SQLSTATE Coding Scheme&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#CHDHFCFB">Table 9-1</a> shows the classes predefined by SQL92.</p>
<div id="LNPCC3499" class="tblformal">
<p class="titleintable"><a id="sthref1154"></a><a id="CHDHFCFB"></a>Table 9-1 Predefined Class Codes</p>
<table class="cellalignment831" title="Predefined Class Codes" summary="Predefined Class Codes" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t7"><span class="bold">Class</span></th>
<th class="cellalignment832" id="r1c2-t7">Condition</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t7" headers="r1c1-t7">
<p>00</p>
</td>
<td class="cellalignment833" headers="r2c1-t7 r1c2-t7">
<p>success completion</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t7" headers="r1c1-t7">
<p>01</p>
</td>
<td class="cellalignment833" headers="r3c1-t7 r1c2-t7">
<p>warning</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t7" headers="r1c1-t7">
<p>02</p>
</td>
<td class="cellalignment833" headers="r4c1-t7 r1c2-t7">
<p>no data</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t7" headers="r1c1-t7">
<p>07</p>
</td>
<td class="cellalignment833" headers="r5c1-t7 r1c2-t7">
<p>dynamic SQL error</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t7" headers="r1c1-t7">
<p>08</p>
</td>
<td class="cellalignment833" headers="r6c1-t7 r1c2-t7">
<p>connection exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t7" headers="r1c1-t7">
<p>09</p>
</td>
<td class="cellalignment833" headers="r7c1-t7 r1c2-t7">
<p>triggered action exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t7" headers="r1c1-t7">
<p>0A</p>
</td>
<td class="cellalignment833" headers="r8c1-t7 r1c2-t7">
<p>feature not supported</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t7" headers="r1c1-t7">
<p>0D</p>
</td>
<td class="cellalignment833" headers="r9c1-t7 r1c2-t7">
<p>invalid target type specification</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t7" headers="r1c1-t7">
<p>0E</p>
</td>
<td class="cellalignment833" headers="r10c1-t7 r1c2-t7">
<p>invalid schema name list specification</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t7" headers="r1c1-t7">
<p>0F</p>
</td>
<td class="cellalignment833" headers="r11c1-t7 r1c2-t7">
<p>locator exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t7" headers="r1c1-t7">
<p>0L</p>
</td>
<td class="cellalignment833" headers="r12c1-t7 r1c2-t7">
<p>invalid grantor</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r13c1-t7" headers="r1c1-t7">
<p>0M</p>
</td>
<td class="cellalignment833" headers="r13c1-t7 r1c2-t7">
<p>invalid SQL-invoked procedure reference</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r14c1-t7" headers="r1c1-t7">
<p>0P</p>
</td>
<td class="cellalignment833" headers="r14c1-t7 r1c2-t7">
<p>invalid role specification</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r15c1-t7" headers="r1c1-t7">
<p>0S</p>
</td>
<td class="cellalignment833" headers="r15c1-t7 r1c2-t7">
<p>invalid transform group name specification</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r16c1-t7" headers="r1c1-t7">
<p>0T</p>
</td>
<td class="cellalignment833" headers="r16c1-t7 r1c2-t7">
<p>target table disagrees with cursor specification</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r17c1-t7" headers="r1c1-t7">
<p>0U</p>
</td>
<td class="cellalignment833" headers="r17c1-t7 r1c2-t7">
<p>attempt to assign to non-updatable column</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r18c1-t7" headers="r1c1-t7">
<p>0V</p>
</td>
<td class="cellalignment833" headers="r18c1-t7 r1c2-t7">
<p>attempt to assign to ordering column</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r19c1-t7" headers="r1c1-t7">
<p>0W</p>
</td>
<td class="cellalignment833" headers="r19c1-t7 r1c2-t7">
<p>prohibited statement encountered during trigger execution</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r20c1-t7" headers="r1c1-t7">
<p>0Z</p>
</td>
<td class="cellalignment833" headers="r20c1-t7 r1c2-t7">
<p>diagnostics exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r21c1-t7" headers="r1c1-t7">
<p>21</p>
</td>
<td class="cellalignment833" headers="r21c1-t7 r1c2-t7">
<p>cardinality violation</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r22c1-t7" headers="r1c1-t7">
<p>22</p>
</td>
<td class="cellalignment833" headers="r22c1-t7 r1c2-t7">
<p>data exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r23c1-t7" headers="r1c1-t7">
<p>23</p>
</td>
<td class="cellalignment833" headers="r23c1-t7 r1c2-t7">
<p>integrity constraint violation</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r24c1-t7" headers="r1c1-t7">
<p>24</p>
</td>
<td class="cellalignment833" headers="r24c1-t7 r1c2-t7">
<p>invalid cursor state</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r25c1-t7" headers="r1c1-t7">
<p>25</p>
</td>
<td class="cellalignment833" headers="r25c1-t7 r1c2-t7">
<p>invalid transaction state</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r26c1-t7" headers="r1c1-t7">
<p>26</p>
</td>
<td class="cellalignment833" headers="r26c1-t7 r1c2-t7">
<p>invalid SQL statement name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r27c1-t7" headers="r1c1-t7">
<p>27</p>
</td>
<td class="cellalignment833" headers="r27c1-t7 r1c2-t7">
<p>triggered data change violation</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r28c1-t7" headers="r1c1-t7">
<p>28</p>
</td>
<td class="cellalignment833" headers="r28c1-t7 r1c2-t7">
<p>invalid authorization specification</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r29c1-t7" headers="r1c1-t7">
<p>2A</p>
</td>
<td class="cellalignment833" headers="r29c1-t7 r1c2-t7">
<p>direct SQL syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r30c1-t7" headers="r1c1-t7">
<p>2B</p>
</td>
<td class="cellalignment833" headers="r30c1-t7 r1c2-t7">
<p>dependent privilege descriptors still exist</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r31c1-t7" headers="r1c1-t7">
<p>2C</p>
</td>
<td class="cellalignment833" headers="r31c1-t7 r1c2-t7">
<p>invalid character set name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r32c1-t7" headers="r1c1-t7">
<p>2D</p>
</td>
<td class="cellalignment833" headers="r32c1-t7 r1c2-t7">
<p>invalid transaction termination</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r33c1-t7" headers="r1c1-t7">
<p>2E</p>
</td>
<td class="cellalignment833" headers="r33c1-t7 r1c2-t7">
<p>invalid connection name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r34c1-t7" headers="r1c1-t7">
<p>2F</p>
</td>
<td class="cellalignment833" headers="r34c1-t7 r1c2-t7">
<p>SQL routine exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r35c1-t7" headers="r1c1-t7">
<p>2H</p>
</td>
<td class="cellalignment833" headers="r35c1-t7 r1c2-t7">
<p>invalid collation name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r36c1-t7" headers="r1c1-t7">
<p>30</p>
</td>
<td class="cellalignment833" headers="r36c1-t7 r1c2-t7">
<p>invalid SQL statement identifier</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r37c1-t7" headers="r1c1-t7">
<p>33</p>
</td>
<td class="cellalignment833" headers="r37c1-t7 r1c2-t7">
<p>invalid SQL descriptor name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r38c1-t7" headers="r1c1-t7">
<p>34</p>
</td>
<td class="cellalignment833" headers="r38c1-t7 r1c2-t7">
<p>invalid cursor name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r39c1-t7" headers="r1c1-t7">
<p>35</p>
</td>
<td class="cellalignment833" headers="r39c1-t7 r1c2-t7">
<p>invalid condition number</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r40c1-t7" headers="r1c1-t7">
<p>36</p>
</td>
<td class="cellalignment833" headers="r40c1-t7 r1c2-t7">
<p>cursor sensitivity exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r41c1-t7" headers="r1c1-t7">
<p>37</p>
</td>
<td class="cellalignment833" headers="r41c1-t7 r1c2-t7">
<p>dynamic SQL syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r42c1-t7" headers="r1c1-t7">
<p>38</p>
</td>
<td class="cellalignment833" headers="r42c1-t7 r1c2-t7">
<p>external routine exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r43c1-t7" headers="r1c1-t7">
<p>39</p>
</td>
<td class="cellalignment833" headers="r43c1-t7 r1c2-t7">
<p>external routine invocation exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r44c1-t7" headers="r1c1-t7">
<p>3B</p>
</td>
<td class="cellalignment833" headers="r44c1-t7 r1c2-t7">
<p>savepoint exception</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r45c1-t7" headers="r1c1-t7">
<p>3C</p>
</td>
<td class="cellalignment833" headers="r45c1-t7 r1c2-t7">
<p>ambiguous cursor name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r46c1-t7" headers="r1c1-t7">
<p>3D</p>
</td>
<td class="cellalignment833" headers="r46c1-t7 r1c2-t7">
<p>invalid catalog name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r47c1-t7" headers="r1c1-t7">
<p>3F</p>
</td>
<td class="cellalignment833" headers="r47c1-t7 r1c2-t7">
<p>invalid schema name</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r48c1-t7" headers="r1c1-t7">
<p>40</p>
</td>
<td class="cellalignment833" headers="r48c1-t7 r1c2-t7">
<p>transaction rollback</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r49c1-t7" headers="r1c1-t7">
<p>42</p>
</td>
<td class="cellalignment833" headers="r49c1-t7 r1c2-t7">
<p>syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r50c1-t7" headers="r1c1-t7">
<p>44</p>
</td>
<td class="cellalignment833" headers="r50c1-t7 r1c2-t7">
<p>with check option violation</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r51c1-t7" headers="r1c1-t7">
<p>HZ</p>
</td>
<td class="cellalignment833" headers="r51c1-t7 r1c2-t7">
<p>remote database access</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The class code HZ is reserved for conditions defined in International Standard ISO/IEC DIS 9579-2, <span class="italic">Remote Database Access</span>.</div>
<p><a href="#g24847">Table 9-2</a> shows how SQLSTATE status codes and conditions are mapped to Oracle errors. Status codes in the range 60000 to 99999 are implementation-defined.<a id="sthref1155"></a><a id="sthref1156"></a></p>
<div id="LNPCC3500" class="tblformal">
<p class="titleintable"><a id="sthref1157"></a><a id="g24847"></a>Table 9-2 SQLSTATE Status Codes</p>
<table class="cellalignment831" title="SQLSTATE Status Codes" summary="SQLSTATE status code" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t9"><span class="bold">Code</span></th>
<th class="cellalignment832" id="r1c2-t9">Condition</th>
<th class="cellalignment832" id="r1c3-t9">Oracle Error(s)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t9" headers="r1c1-t9">
<p>00000</p>
</td>
<td class="cellalignment833" headers="r2c1-t9 r1c2-t9">
<p>successful completion</p>
</td>
<td class="cellalignment833" headers="r2c1-t9 r1c3-t9">
<p>ORA-00000</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t9" headers="r1c1-t9">
<p>01000</p>
</td>
<td class="cellalignment833" headers="r3c1-t9 r1c2-t9">
<p>warning</p>
</td>
<td class="cellalignment833" headers="r3c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t9" headers="r1c1-t9">
<p>01001</p>
</td>
<td class="cellalignment833" headers="r4c1-t9 r1c2-t9">
<p>cursor operation conflict</p>
</td>
<td class="cellalignment833" headers="r4c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t9" headers="r1c1-t9">
<p>01002</p>
</td>
<td class="cellalignment833" headers="r5c1-t9 r1c2-t9">
<p>disconnect error</p>
</td>
<td class="cellalignment833" headers="r5c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t9" headers="r1c1-t9">
<p>01003</p>
</td>
<td class="cellalignment833" headers="r6c1-t9 r1c2-t9">
<p>NULL value eliminated in set function</p>
</td>
<td class="cellalignment833" headers="r6c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t9" headers="r1c1-t9">
<p>01004</p>
</td>
<td class="cellalignment833" headers="r7c1-t9 r1c2-t9">
<p>string data-right truncation</p>
</td>
<td class="cellalignment833" headers="r7c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t9" headers="r1c1-t9">
<p>01005</p>
</td>
<td class="cellalignment833" headers="r8c1-t9 r1c2-t9">
<p>insufficient item descriptor areas</p>
</td>
<td class="cellalignment833" headers="r8c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t9" headers="r1c1-t9">
<p>01006</p>
</td>
<td class="cellalignment833" headers="r9c1-t9 r1c2-t9">
<p>privilege not revoked</p>
</td>
<td class="cellalignment833" headers="r9c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t9" headers="r1c1-t9">
<p>01007</p>
</td>
<td class="cellalignment833" headers="r10c1-t9 r1c2-t9">
<p>privilege not granted</p>
</td>
<td class="cellalignment833" headers="r10c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t9" headers="r1c1-t9">
<p>01008</p>
</td>
<td class="cellalignment833" headers="r11c1-t9 r1c2-t9">
<p>implicit zero-bit padding</p>
</td>
<td class="cellalignment833" headers="r11c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t9" headers="r1c1-t9">
<p>01009</p>
</td>
<td class="cellalignment833" headers="r12c1-t9 r1c2-t9">
<p>search condition too long for info schema</p>
</td>
<td class="cellalignment833" headers="r12c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r13c1-t9" headers="r1c1-t9">
<p>0100A</p>
</td>
<td class="cellalignment833" headers="r13c1-t9 r1c2-t9">
<p>query expression too long for info schema</p>
</td>
<td class="cellalignment833" headers="r13c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r14c1-t9" headers="r1c1-t9">
<p>02000</p>
</td>
<td class="cellalignment833" headers="r14c1-t9 r1c2-t9">
<p>no data</p>
</td>
<td class="cellalignment833" headers="r14c1-t9 r1c3-t9">
<p>ORA-01095</p>
<p>ORA-01403</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r15c1-t9" headers="r1c1-t9">
<p>07000</p>
</td>
<td class="cellalignment833" headers="r15c1-t9 r1c2-t9">
<p>dynamic SQL error</p>
</td>
<td class="cellalignment833" headers="r15c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r16c1-t9" headers="r1c1-t9">
<p>07001</p>
</td>
<td class="cellalignment833" headers="r16c1-t9 r1c2-t9">
<p>using clause does not match parameter specs</p>
</td>
<td class="cellalignment833" headers="r16c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r17c1-t9" headers="r1c1-t9">
<p>07002</p>
</td>
<td class="cellalignment833" headers="r17c1-t9 r1c2-t9">
<p>using clause does not match target specs</p>
</td>
<td class="cellalignment833" headers="r17c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r18c1-t9" headers="r1c1-t9">
<p>07003</p>
</td>
<td class="cellalignment833" headers="r18c1-t9 r1c2-t9">
<p>cursor specification cannot be executed</p>
</td>
<td class="cellalignment833" headers="r18c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r19c1-t9" headers="r1c1-t9">
<p>07004</p>
</td>
<td class="cellalignment833" headers="r19c1-t9 r1c2-t9">
<p>using clause required for dynamic parameters</p>
</td>
<td class="cellalignment833" headers="r19c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r20c1-t9" headers="r1c1-t9">
<p>07005</p>
</td>
<td class="cellalignment833" headers="r20c1-t9 r1c2-t9">
<p>prepared statement not a cursor specification</p>
</td>
<td class="cellalignment833" headers="r20c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r21c1-t9" headers="r1c1-t9">
<p>07006</p>
</td>
<td class="cellalignment833" headers="r21c1-t9 r1c2-t9">
<p>restricted datatype attribute violation</p>
</td>
<td class="cellalignment833" headers="r21c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r22c1-t9" headers="r1c1-t9">
<p>07007</p>
</td>
<td class="cellalignment833" headers="r22c1-t9 r1c2-t9">
<p>using clause required for result components invalid descriptor count</p>
</td>
<td class="cellalignment833" headers="r22c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r23c1-t9" headers="r1c1-t9">
<p>07008</p>
</td>
<td class="cellalignment833" headers="r23c1-t9 r1c2-t9">
<p>invalid descriptor count</p>
</td>
<td class="cellalignment833" headers="r23c1-t9 r1c3-t9">
<p>SQL-02126</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r24c1-t9" headers="r1c1-t9">
<p>07009</p>
</td>
<td class="cellalignment833" headers="r24c1-t9 r1c2-t9">
<p>invalid descriptor index</p>
</td>
<td class="cellalignment833" headers="r24c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r25c1-t9" headers="r1c1-t9">
<p>08000</p>
</td>
<td class="cellalignment833" headers="r25c1-t9 r1c2-t9">
<p>connection exception</p>
</td>
<td class="cellalignment833" headers="r25c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r26c1-t9" headers="r1c1-t9">
<p>08001</p>
</td>
<td class="cellalignment833" headers="r26c1-t9 r1c2-t9">
<p>SQL-client unable to establish SQL-connection</p>
</td>
<td class="cellalignment833" headers="r26c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r27c1-t9" headers="r1c1-t9">
<p>08002</p>
</td>
<td class="cellalignment833" headers="r27c1-t9 r1c2-t9">
<p>connection name is use</p>
</td>
<td class="cellalignment833" headers="r27c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r28c1-t9" headers="r1c1-t9">
<p>08003</p>
</td>
<td class="cellalignment833" headers="r28c1-t9 r1c2-t9">
<p>connection does not exist</p>
</td>
<td class="cellalignment833" headers="r28c1-t9 r1c3-t9">
<p>SQL-02121</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r29c1-t9" headers="r1c1-t9">
<p>08004</p>
</td>
<td class="cellalignment833" headers="r29c1-t9 r1c2-t9">
<p>SQL-server rejected SQL-connection</p>
</td>
<td class="cellalignment833" headers="r29c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r30c1-t9" headers="r1c1-t9">
<p>08006</p>
</td>
<td class="cellalignment833" headers="r30c1-t9 r1c2-t9">
<p>connection failure</p>
</td>
<td class="cellalignment833" headers="r30c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r31c1-t9" headers="r1c1-t9">
<p>08007</p>
</td>
<td class="cellalignment833" headers="r31c1-t9 r1c2-t9">
<p>transaction resolution unknown</p>
</td>
<td class="cellalignment833" headers="r31c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r32c1-t9" headers="r1c1-t9">
<p>0A000</p>
</td>
<td class="cellalignment833" headers="r32c1-t9 r1c2-t9">
<p>feature not supported</p>
</td>
<td class="cellalignment833" headers="r32c1-t9 r1c3-t9">
<p>ORA-03000..03099</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r33c1-t9" headers="r1c1-t9">
<p>0A001</p>
</td>
<td class="cellalignment833" headers="r33c1-t9 r1c2-t9">
<p>multiple server transactions</p>
</td>
<td class="cellalignment833" headers="r33c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r34c1-t9" headers="r1c1-t9">
<p>21000</p>
</td>
<td class="cellalignment833" headers="r34c1-t9 r1c2-t9">
<p>cardinality violation</p>
</td>
<td class="cellalignment833" headers="r34c1-t9 r1c3-t9">
<p>ORA-01427</p>
<p>SQL-02112</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r35c1-t9" headers="r1c1-t9">
<p>22000</p>
</td>
<td class="cellalignment833" headers="r35c1-t9 r1c2-t9">
<p>data exception</p>
</td>
<td class="cellalignment833" headers="r35c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r36c1-t9" headers="r1c1-t9">
<p>22001</p>
</td>
<td class="cellalignment833" headers="r36c1-t9 r1c2-t9">
<p>string data - right truncation</p>
</td>
<td class="cellalignment833" headers="r36c1-t9 r1c3-t9">
<p>ORA-01406</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r37c1-t9" headers="r1c1-t9">
<p>22002</p>
</td>
<td class="cellalignment833" headers="r37c1-t9 r1c2-t9">
<p>NULL value-no indicator parameter</p>
</td>
<td class="cellalignment833" headers="r37c1-t9 r1c3-t9">
<p>SQL-02124</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r38c1-t9" headers="r1c1-t9">
<p>22003</p>
</td>
<td class="cellalignment833" headers="r38c1-t9 r1c2-t9">
<p>numeric value out of range</p>
</td>
<td class="cellalignment833" headers="r38c1-t9 r1c3-t9">
<p>ORA-01426</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r39c1-t9" headers="r1c1-t9">
<p>22005</p>
</td>
<td class="cellalignment833" headers="r39c1-t9 r1c2-t9">
<p>error in assignment</p>
</td>
<td class="cellalignment833" headers="r39c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r40c1-t9" headers="r1c1-t9">
<p>22007</p>
</td>
<td class="cellalignment833" headers="r40c1-t9 r1c2-t9">
<p>invalid datetime format</p>
</td>
<td class="cellalignment833" headers="r40c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r41c1-t9" headers="r1c1-t9">
<p>22008</p>
</td>
<td class="cellalignment833" headers="r41c1-t9 r1c2-t9">
<p>datetime field overflow</p>
</td>
<td class="cellalignment833" headers="r41c1-t9 r1c3-t9">
<p>ORA-01800..01899</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r42c1-t9" headers="r1c1-t9">
<p>22009</p>
</td>
<td class="cellalignment833" headers="r42c1-t9 r1c2-t9">
<p>invalid time zone displacement value</p>
</td>
<td class="cellalignment833" headers="r42c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r43c1-t9" headers="r1c1-t9">
<p>22011</p>
</td>
<td class="cellalignment833" headers="r43c1-t9 r1c2-t9">
<p>substring error</p>
</td>
<td class="cellalignment833" headers="r43c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r44c1-t9" headers="r1c1-t9">
<p>22012</p>
</td>
<td class="cellalignment833" headers="r44c1-t9 r1c2-t9">
<p>division by zero</p>
</td>
<td class="cellalignment833" headers="r44c1-t9 r1c3-t9">
<p>ORA-01476</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r45c1-t9" headers="r1c1-t9">
<p>22015</p>
</td>
<td class="cellalignment833" headers="r45c1-t9 r1c2-t9">
<p>interval field overflow</p>
</td>
<td class="cellalignment833" headers="r45c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r46c1-t9" headers="r1c1-t9">
<p>22018</p>
</td>
<td class="cellalignment833" headers="r46c1-t9 r1c2-t9">
<p>invalid character value for cast</p>
</td>
<td class="cellalignment833" headers="r46c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r47c1-t9" headers="r1c1-t9">
<p>22019</p>
</td>
<td class="cellalignment833" headers="r47c1-t9 r1c2-t9">
<p>invalid escape character</p>
</td>
<td class="cellalignment833" headers="r47c1-t9 r1c3-t9">
<p>ORA-00911</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r48c1-t9" headers="r1c1-t9">
<p>22021</p>
</td>
<td class="cellalignment833" headers="r48c1-t9 r1c2-t9">
<p>character not in repertoire</p>
</td>
<td class="cellalignment833" headers="r48c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r49c1-t9" headers="r1c1-t9">
<p>22022</p>
</td>
<td class="cellalignment833" headers="r49c1-t9 r1c2-t9">
<p>indicator overflow</p>
</td>
<td class="cellalignment833" headers="r49c1-t9 r1c3-t9">
<p>ORA-01411</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r50c1-t9" headers="r1c1-t9">
<p>22023</p>
</td>
<td class="cellalignment833" headers="r50c1-t9 r1c2-t9">
<p>invalid parameter value</p>
</td>
<td class="cellalignment833" headers="r50c1-t9 r1c3-t9">
<p>ORA-01025</p>
<p>ORA-04000..04019</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r51c1-t9" headers="r1c1-t9">
<p>22024</p>
</td>
<td class="cellalignment833" headers="r51c1-t9 r1c2-t9">
<p>unterminated C string</p>
</td>
<td class="cellalignment833" headers="r51c1-t9 r1c3-t9">
<p>ORA-01479</p>
<p>ORA-01480</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r52c1-t9" headers="r1c1-t9">
<p>22025</p>
</td>
<td class="cellalignment833" headers="r52c1-t9 r1c2-t9">
<p>invalid escape sequence</p>
</td>
<td class="cellalignment833" headers="r52c1-t9 r1c3-t9">
<p>ORA-01424</p>
<p>ORA-01425</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r53c1-t9" headers="r1c1-t9">
<p>22026</p>
</td>
<td class="cellalignment833" headers="r53c1-t9 r1c2-t9">
<p>string data-length mismatch</p>
</td>
<td class="cellalignment833" headers="r53c1-t9 r1c3-t9">
<p>ORA-01401</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r54c1-t9" headers="r1c1-t9">
<p>22027</p>
</td>
<td class="cellalignment833" headers="r54c1-t9 r1c2-t9">
<p>trim error</p>
</td>
<td class="cellalignment833" headers="r54c1-t9 r1c3-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r55c1-t9" headers="r1c1-t9">
<p>23000</p>
</td>
<td class="cellalignment833" headers="r55c1-t9 r1c2-t9">
<p>integrity constraint violation</p>
</td>
<td class="cellalignment833" headers="r55c1-t9 r1c3-t9">
<p>ORA-1400, ORA-02290..02299</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r56c1-t9" headers="r1c1-t9">
<p>24000</p>
</td>
<td class="cellalignment833" headers="r56c1-t9 r1c2-t9">
<p>invalid cursor state</p>
</td>
<td class="cellalignment833" headers="r56c1-t9 r1c3-t9">
<p>ORA-001002</p>
<p>ORA-001003</p>
<p>SQL-02114</p>
<p>SQL-02117</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r57c1-t9" headers="r1c1-t9">
<p>25000</p>
</td>
<td class="cellalignment833" headers="r57c1-t9 r1c2-t9">
<p>invalid transaction state</p>
</td>
<td class="cellalignment833" headers="r57c1-t9 r1c3-t9">
<p>SQL-02118</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r58c1-t9" headers="r1c1-t9">
<p>26000</p>
</td>
<td class="cellalignment833" headers="r58c1-t9 r1c2-t9">
<p>invalid SQL statement name</p>
</td>
<td class="cellalignment833" headers="r58c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r59c1-t9" headers="r1c1-t9">
<p>27000</p>
</td>
<td class="cellalignment833" headers="r59c1-t9 r1c2-t9">
<p>triggered data change violation</p>
</td>
<td class="cellalignment833" headers="r59c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r60c1-t9" headers="r1c1-t9">
<p>28000</p>
</td>
<td class="cellalignment833" headers="r60c1-t9 r1c2-t9">
<p>invalid authorization specification</p>
</td>
<td class="cellalignment833" headers="r60c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r61c1-t9" headers="r1c1-t9">
<p>2A000</p>
</td>
<td class="cellalignment833" headers="r61c1-t9 r1c2-t9">
<p>direct SQL syntax error or access rule violation</p>
</td>
<td class="cellalignment833" headers="r61c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r62c1-t9" headers="r1c1-t9">
<p>2B000</p>
</td>
<td class="cellalignment833" headers="r62c1-t9 r1c2-t9">
<p>dependent privilege descriptors still exist</p>
</td>
<td class="cellalignment833" headers="r62c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r63c1-t9" headers="r1c1-t9">
<p>2C000</p>
</td>
<td class="cellalignment833" headers="r63c1-t9 r1c2-t9">
<p>invalid character set name</p>
</td>
<td class="cellalignment833" headers="r63c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r64c1-t9" headers="r1c1-t9">
<p>2D000</p>
</td>
<td class="cellalignment833" headers="r64c1-t9 r1c2-t9">
<p>invalid transaction termination</p>
</td>
<td class="cellalignment833" headers="r64c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r65c1-t9" headers="r1c1-t9">
<p>2E000</p>
</td>
<td class="cellalignment833" headers="r65c1-t9 r1c2-t9">
<p>invalid connection name</p>
</td>
<td class="cellalignment833" headers="r65c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r66c1-t9" headers="r1c1-t9">
<p>33000</p>
</td>
<td class="cellalignment833" headers="r66c1-t9 r1c2-t9">
<p>invalid SQL descriptor name</p>
</td>
<td class="cellalignment833" headers="r66c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r67c1-t9" headers="r1c1-t9">
<p>34000</p>
</td>
<td class="cellalignment833" headers="r67c1-t9 r1c2-t9">
<p>invalid cursor name</p>
</td>
<td class="cellalignment833" headers="r67c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r68c1-t9" headers="r1c1-t9">
<p>35000</p>
</td>
<td class="cellalignment833" headers="r68c1-t9 r1c2-t9">
<p>invalid condition number</p>
</td>
<td class="cellalignment833" headers="r68c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r69c1-t9" headers="r1c1-t9">
<p>37000</p>
</td>
<td class="cellalignment833" headers="r69c1-t9 r1c2-t9">
<p>dynamic SQL syntax error or access rule violation</p>
</td>
<td class="cellalignment833" headers="r69c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r70c1-t9" headers="r1c1-t9">
<p>3C000</p>
</td>
<td class="cellalignment833" headers="r70c1-t9 r1c2-t9">
<p>ambiguous cursor name</p>
</td>
<td class="cellalignment833" headers="r70c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r71c1-t9" headers="r1c1-t9">
<p>3D000</p>
</td>
<td class="cellalignment833" headers="r71c1-t9 r1c2-t9">
<p>invalid catalog name</p>
</td>
<td class="cellalignment833" headers="r71c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r72c1-t9" headers="r1c1-t9">
<p>3F000</p>
</td>
<td class="cellalignment833" headers="r72c1-t9 r1c2-t9">
<p>invalid schema name</p>
</td>
<td class="cellalignment833" headers="r72c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r73c1-t9" headers="r1c1-t9">
<p>40000</p>
</td>
<td class="cellalignment833" headers="r73c1-t9 r1c2-t9">
<p>transaction rollback</p>
</td>
<td class="cellalignment833" headers="r73c1-t9 r1c3-t9">
<p>ORA-02091</p>
<p>ORA-02092</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r74c1-t9" headers="r1c1-t9">
<p>40001</p>
</td>
<td class="cellalignment833" headers="r74c1-t9 r1c2-t9">
<p>serialization failure</p>
</td>
<td class="cellalignment833" headers="r74c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r75c1-t9" headers="r1c1-t9">
<p>40002</p>
</td>
<td class="cellalignment833" headers="r75c1-t9 r1c2-t9">
<p>integrity constraint violation</p>
</td>
<td class="cellalignment833" headers="r75c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r76c1-t9" headers="r1c1-t9">
<p>40003</p>
</td>
<td class="cellalignment833" headers="r76c1-t9 r1c2-t9">
<p>statement completion unknown</p>
</td>
<td class="cellalignment833" headers="r76c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r77c1-t9" headers="r1c1-t9">
<p>42000</p>
</td>
<td class="cellalignment833" headers="r77c1-t9 r1c2-t9">
<p>syntax error or access rule violation</p>
</td>
<td class="cellalignment833" headers="r77c1-t9 r1c3-t9">
<p>ORA-00022</p>
<p>ORA-00251</p>
<p>ORA-00900..00999</p>
<p>ORA-01031</p>
<p>ORA-01490..01493</p>
<p>ORA-01700..01799</p>
<p>ORA-01900..02099</p>
<p>ORA-02140..02289</p>
<p>ORA-02420..02424</p>
<p>ORA-02450..02499</p>
<p>ORA-03276..03299</p>
<p>ORA-04040..04059</p>
<p>ORA-04070..04099</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r78c1-t9" headers="r1c1-t9">
<p>44000</p>
</td>
<td class="cellalignment833" headers="r78c1-t9 r1c2-t9">
<p>with check option violation</p>
</td>
<td class="cellalignment833" headers="r78c1-t9 r1c3-t9">
<p>ORA-01402</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r79c1-t9" headers="r1c1-t9">
<p>60000</p>
</td>
<td class="cellalignment833" headers="r79c1-t9 r1c2-t9">
<p>system error</p>
</td>
<td class="cellalignment833" headers="r79c1-t9 r1c3-t9">
<p>ORA-00370..00429</p>
<p>ORA-00600..00899</p>
<p>ORA-06430..06449</p>
<p>ORA-07200..07999</p>
<p>ORA-09700..09999</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r80c1-t9" headers="r1c1-t9">
<p>61000</p>
</td>
<td class="cellalignment833" headers="r80c1-t9 r1c2-t9">
<p>shared server and detached process errors</p>
</td>
<td class="cellalignment833" headers="r80c1-t9 r1c3-t9">
<p>ORA-00018..00035</p>
<p>ORA-00050..00068</p>
<p>ORA-02376..02399</p>
<p>ORA-04020..04039</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r81c1-t9" headers="r1c1-t9">
<p>62000</p>
</td>
<td class="cellalignment833" headers="r81c1-t9 r1c2-t9">
<p>shared server and detached process errors</p>
</td>
<td class="cellalignment833" headers="r81c1-t9 r1c3-t9">
<p>ORA-00100..00120</p>
<p>ORA-00440..00569</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r82c1-t9" headers="r1c1-t9">
<p>63000</p>
</td>
<td class="cellalignment833" headers="r82c1-t9 r1c2-t9">
<p>Oracle*XA and two-task interface errors</p>
</td>
<td class="cellalignment833" headers="r82c1-t9 r1c3-t9">
<p>ORA-00150..00159</p>
<p>ORA-02700..02899</p>
<p>ORA-03100..03199</p>
<p>ORA-06200..06249</p>
<p>SQL-02128</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r83c1-t9" headers="r1c1-t9">
<p>64000</p>
</td>
<td class="cellalignment833" headers="r83c1-t9 r1c2-t9">
<p>control file, database file, and redo file errors; archival and media recovery errors</p>
</td>
<td class="cellalignment833" headers="r83c1-t9 r1c3-t9">
<p>ORA-00200..00369</p>
<p>ORA-01100..01250</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r84c1-t9" headers="r1c1-t9">
<p>65000</p>
</td>
<td class="cellalignment833" headers="r84c1-t9 r1c2-t9">
<p>PL/SQL errors</p>
</td>
<td class="cellalignment833" headers="r84c1-t9 r1c3-t9">
<p>ORA-06500..06599</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r85c1-t9" headers="r1c1-t9">
<p>66000</p>
</td>
<td class="cellalignment833" headers="r85c1-t9 r1c2-t9">
<p>Oracle Net driver errors</p>
</td>
<td class="cellalignment833" headers="r85c1-t9 r1c3-t9">
<p>ORA-06000..06149</p>
<p>ORA-06250..06429</p>
<p>ORA-06600..06999</p>
<p>ORA-12100..12299</p>
<p>ORA-12500..12599</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r86c1-t9" headers="r1c1-t9">
<p>67000</p>
</td>
<td class="cellalignment833" headers="r86c1-t9 r1c2-t9">
<p>licensing errors</p>
</td>
<td class="cellalignment833" headers="r86c1-t9 r1c3-t9">
<p>ORA-00430..00439</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r87c1-t9" headers="r1c1-t9">
<p>69000</p>
</td>
<td class="cellalignment833" headers="r87c1-t9 r1c2-t9">
<p>SQL*Connect errors</p>
</td>
<td class="cellalignment833" headers="r87c1-t9 r1c3-t9">
<p>ORA-00570..00599</p>
<p>ORA-07000..07199</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r88c1-t9" headers="r1c1-t9">
<p>72000</p>
</td>
<td class="cellalignment833" headers="r88c1-t9 r1c2-t9">
<p>SQL execute phase errors</p>
</td>
<td class="cellalignment833" headers="r88c1-t9 r1c3-t9">
<p>ORA-00001</p>
<p>ORA-01000..01099</p>
<p>ORA-01401..01489</p>
<p>ORA-01495..01499</p>
<p>ORA-01500..01699</p>
<p>ORA-02400..02419</p>
<p>ORA-02425..02449</p>
<p>ORA-04060..04069</p>
<p>ORA-08000..08190</p>
<p>ORA-12000..12019</p>
<p>ORA-12300..12499</p>
<p>ORA-12700..21999</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r89c1-t9" headers="r1c1-t9">
<p>82100</p>
</td>
<td class="cellalignment833" headers="r89c1-t9 r1c2-t9">
<p>out of memory (could not allocate)</p>
</td>
<td class="cellalignment833" headers="r89c1-t9 r1c3-t9">
<p>SQL-02100</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r90c1-t9" headers="r1c1-t9">
<p>82101</p>
</td>
<td class="cellalignment833" headers="r90c1-t9 r1c2-t9">
<p>inconsistent cursor cache (UCE/CUC mismatch)</p>
</td>
<td class="cellalignment833" headers="r90c1-t9 r1c3-t9">
<p>SQL-02101</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r91c1-t9" headers="r1c1-t9">
<p>82102</p>
</td>
<td class="cellalignment833" headers="r91c1-t9 r1c2-t9">
<p>inconsistent cursor cache (no CUC entry for UCE)</p>
</td>
<td class="cellalignment833" headers="r91c1-t9 r1c3-t9">
<p>SQL-02102</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r92c1-t9" headers="r1c1-t9">
<p>82103</p>
</td>
<td class="cellalignment833" headers="r92c1-t9 r1c2-t9">
<p>inconsistent cursor cache (out-or-range CUC ref)</p>
</td>
<td class="cellalignment833" headers="r92c1-t9 r1c3-t9">
<p>SQL-02103</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r93c1-t9" headers="r1c1-t9">
<p>82104</p>
</td>
<td class="cellalignment833" headers="r93c1-t9 r1c2-t9">
<p>inconsistent cursor cache (no CUC available)</p>
</td>
<td class="cellalignment833" headers="r93c1-t9 r1c3-t9">
<p>SQL-02104</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r94c1-t9" headers="r1c1-t9">
<p>82105</p>
</td>
<td class="cellalignment833" headers="r94c1-t9 r1c2-t9">
<p>inconsistent cursor cache (no CUC entry in cache)</p>
</td>
<td class="cellalignment833" headers="r94c1-t9 r1c3-t9">
<p>SQL-02105</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r95c1-t9" headers="r1c1-t9">
<p>82106</p>
</td>
<td class="cellalignment833" headers="r95c1-t9 r1c2-t9">
<p>inconsistent cursor cache (invalid cursor number)</p>
</td>
<td class="cellalignment833" headers="r95c1-t9 r1c3-t9">
<p>SQL-02106</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r96c1-t9" headers="r1c1-t9">
<p>82107</p>
</td>
<td class="cellalignment833" headers="r96c1-t9 r1c2-t9">
<p>program too old for runtime library; re-precompile</p>
</td>
<td class="cellalignment833" headers="r96c1-t9 r1c3-t9">
<p>SQL-02107</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r97c1-t9" headers="r1c1-t9">
<p>82108</p>
</td>
<td class="cellalignment833" headers="r97c1-t9 r1c2-t9">
<p>invalid descriptor passed to runtime library</p>
</td>
<td class="cellalignment833" headers="r97c1-t9 r1c3-t9">
<p>SQL-02108</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r98c1-t9" headers="r1c1-t9">
<p>82109</p>
</td>
<td class="cellalignment833" headers="r98c1-t9 r1c2-t9">
<p>inconsistent host cache (out-or-range SIT ref)</p>
</td>
<td class="cellalignment833" headers="r98c1-t9 r1c3-t9">
<p>SQL-02109</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r99c1-t9" headers="r1c1-t9">
<p>82110</p>
</td>
<td class="cellalignment833" headers="r99c1-t9 r1c2-t9">
<p>inconsistent host cache (invalid SQL type)</p>
</td>
<td class="cellalignment833" headers="r99c1-t9 r1c3-t9">
<p>SQL-02110</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r100c1-t9" headers="r1c1-t9">
<p>82111</p>
</td>
<td class="cellalignment833" headers="r100c1-t9 r1c2-t9">
<p>heap consistency error</p>
</td>
<td class="cellalignment833" headers="r100c1-t9 r1c3-t9">
<p>SQL-02111</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r101c1-t9" headers="r1c1-t9">
<p>82113</p>
</td>
<td class="cellalignment833" headers="r101c1-t9 r1c2-t9">
<p>code generation internal consistency failed</p>
</td>
<td class="cellalignment833" headers="r101c1-t9 r1c3-t9">
<p>SQL-02115</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r102c1-t9" headers="r1c1-t9">
<p>82114</p>
</td>
<td class="cellalignment833" headers="r102c1-t9 r1c2-t9">
<p>reentrant code generator gave invalid context</p>
</td>
<td class="cellalignment833" headers="r102c1-t9 r1c3-t9">
<p>SQL-02116</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r103c1-t9" headers="r1c1-t9">
<p>82117</p>
</td>
<td class="cellalignment833" headers="r103c1-t9 r1c2-t9">
<p>invalid OPEN or PREPARE for this connection</p>
</td>
<td class="cellalignment833" headers="r103c1-t9 r1c3-t9">
<p>SQL-02122</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r104c1-t9" headers="r1c1-t9">
<p>82118</p>
</td>
<td class="cellalignment833" headers="r104c1-t9 r1c2-t9">
<p>application context not found</p>
</td>
<td class="cellalignment833" headers="r104c1-t9 r1c3-t9">
<p>SQL-02123</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r105c1-t9" headers="r1c1-t9">
<p>82119</p>
</td>
<td class="cellalignment833" headers="r105c1-t9 r1c2-t9">
<p>unable to obtain error message text</p>
</td>
<td class="cellalignment833" headers="r105c1-t9 r1c3-t9">
<p>SQL-02125</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r106c1-t9" headers="r1c1-t9">
<p>82120</p>
</td>
<td class="cellalignment833" headers="r106c1-t9 r1c2-t9">
<p>Precompiler/SQLLIB version mismatch</p>
</td>
<td class="cellalignment833" headers="r106c1-t9 r1c3-t9">
<p>SQL-02127</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r107c1-t9" headers="r1c1-t9">
<p>82121</p>
</td>
<td class="cellalignment833" headers="r107c1-t9 r1c2-t9">
<p>NCHAR error; fetched number of bytes is odd</p>
</td>
<td class="cellalignment833" headers="r107c1-t9 r1c3-t9">
<p>SQL-02129</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r108c1-t9" headers="r1c1-t9">
<p>82122</p>
</td>
<td class="cellalignment833" headers="r108c1-t9 r1c2-t9">
<p>EXEC TOOLS interface not available</p>
</td>
<td class="cellalignment833" headers="r108c1-t9 r1c3-t9">
<p>SQL-02130</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r109c1-t9" headers="r1c1-t9">
<p>82123</p>
</td>
<td class="cellalignment833" headers="r109c1-t9 r1c2-t9">
<p>runtime context in use</p>
</td>
<td class="cellalignment833" headers="r109c1-t9 r1c3-t9">
<p>SQL-02131</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r110c1-t9" headers="r1c1-t9">
<p>82124</p>
</td>
<td class="cellalignment833" headers="r110c1-t9 r1c2-t9">
<p>unable to allocate runtime context</p>
</td>
<td class="cellalignment833" headers="r110c1-t9 r1c3-t9">
<p>SQL-02132</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r111c1-t9" headers="r1c1-t9">
<p>82125</p>
</td>
<td class="cellalignment833" headers="r111c1-t9 r1c2-t9">
<p>unable to initialize process for use with threads</p>
</td>
<td class="cellalignment833" headers="r111c1-t9 r1c3-t9">
<p>SQL-02133</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r112c1-t9" headers="r1c1-t9">
<p>82126</p>
</td>
<td class="cellalignment833" headers="r112c1-t9 r1c2-t9">
<p>invalid runtime context</p>
</td>
<td class="cellalignment833" headers="r112c1-t9 r1c3-t9">
<p>SQL-02134</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r113c1-t9" headers="r1c1-t9">
<p>HZ000</p>
</td>
<td class="cellalignment833" headers="r113c1-t9 r1c2-t9">
<p>remote database access</p>
</td>
<td class="cellalignment833" headers="r113c1-t9 r1c3-t9">
<p>--</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="LNPCC3501" class="sect2"><a id="sthref1158"></a>
<h3 class="sect2">Using SQLSTATE<a id="sthref1159"></a></h3>
<p>The following rules apply to using SQLSTATE with SQLCODE or the SQLCA when you precompile with the option setting MODE=ANSI. SQLSTATE must be declared inside a Declare Section; otherwise, it is ignored.</p>
<div id="LNPCC3502" class="sect3"><a id="sthref1160"></a>
<h4 class="sect3">If You Declare SQLSTATE</h4>
<ul>
<li>
<p>Declaring SQLCODE is optional. If you declare SQLCODE inside the Declare Section, the Oracle Server returns status codes to SQLSTATE and SQLCODE after every SQL operation. However, if you declare SQLCODE outside of the Declare Section, Oracle returns a status code only to SQLSTATE.</p>
</li>
<li>
<p>Declaring the SQLCA is optional. If you declare the SQLCA, Oracle returns status codes to SQLSTATE and the SQLCA. In this case, to avoid compilation errors, do <span class="italic">not</span> declare SQLCODE.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="LNPCC3503" class="sect3"><a id="sthref1161"></a>
<h4 class="sect3">If You Do <span class="italic">not</span> Declare SQLSTATE</h4>
<ul>
<li>
<p>You must declare SQLCODE inside or outside the Declare Section. The Oracle Server returns a status code to SQLCODE after every SQL operation.</p>
</li>
<li>
<p>Declaring the SQLCA is optional. If you declare the SQLCA, Oracle returns status codes to SQLCODE and the SQLCA.</p>
</li>
</ul>
<p>You can learn the outcome of the most recent executable SQL statement by checking SQLSTATE explicitly with your own code or implicitly with the WHENEVER SQLERROR directive. Check SQLSTATE only after executable SQL statements and PL/SQL statements.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i6772"></a>
<div id="LNPCC3504" class="sect1">
<h2 class="sect1">Declaring SQLCODE<a id="sthref1162"></a></h2>
<p>When MODE=ANSI, and you have not declared a SQLSTATE status variable, you must declare a <span class="bold">long</span> integer variable named SQLCODE inside or outside the Declare Section. An example follows:</p>
<pre>/* declare host variables */ 
EXEC SQL BEGIN DECLARE SECTION; 
int  emp_number, dept_number; 
char emp_name[20]; 
EXEC SQL END DECLARE SECTION; 
 
/* declare status variable--must be upper case */ 
long SQLCODE; 
</pre>
<p>When MODE=ORACLE, if you declare SQLCODE, it is not used.</p>
<p>You can declare more than one SQLCODE. Access to a local SQLCODE is limited by its scope within your program.<a id="sthref1163"></a></p>
<p>After every SQL operation, Oracle returns a status code to the SQLCODE currently in scope. So, your program can learn the outcome of the most recent SQL operation by checking SQLCODE explicitly, or implicitly with the WHENEVER directive.</p>
<p>When you declare SQLCODE instead of the SQLCA in a particular compilation unit, the precompiler allocates an internal SQLCA for that unit. Your host program cannot access the internal SQLCA. If you declare the SQLCA <span class="italic">and</span> SQLCODE, Oracle returns the same status code to both after every SQL operation.<a id="sthref1164"></a></p>
</div>
<!-- class="sect1" -->
<a id="i6796"></a>
<div id="LNPCC3505" class="sect1">
<h2 class="sect1">Key Components of Error Reporting Using the SQLCA<a id="sthref1165"></a></h2>
<p>Error reporting depends on variables in the SQLCA. This section highlights the key components of error reporting. The next section takes a close look at the SQLCA.<a id="sthref1166"></a></p>
<div id="LNPCC3506" class="sect2"><a id="sthref1167"></a>
<h3 class="sect2">Status Codes</h3>
<p>Every executable SQL statement returns a status code to the SQLCA variable <span class="italic">sqlcode</span>, which you can check implicitly with the WHENEVER directive or explicitly with your own code.<a id="sthref1168"></a></p>
<p>A zero status code means that Oracle executed the statement without detecting an error or exception. A positive status code means that Oracle executed the statement but detected an exception. A negative status code means that Oracle did not execute the SQL statement because of an error.<a id="sthref1169"></a></p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3507" class="sect2"><a id="sthref1170"></a>
<h3 class="sect2">Warning Flags</h3>
<p>Warning flags are returned in the SQLCA variables <code>sqlwarn[0]</code> through <code>sqlwarn[7]</code>, which you can check implicitly or explicitly. These warning flags are useful for runtime conditions not considered errors by Oracle. If no indicator variable is available, Oracle issues an error message.<a id="sthref1171"></a><a id="sthref1172"></a><a id="sthref1173"></a></p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3508" class="sect2"><a id="sthref1174"></a>
<h3 class="sect2">Rows-Processed Count</h3>
<p>The number of rows processed by the most recently executed SQL statement is returned in the SQLCA variable <code>sqlca.sqlerrd[2]</code>, which you can check explicitly.<a id="sthref1175"></a><a id="sthref1176"></a><a id="sthref1177"></a></p>
<p>Strictly speaking, this variable is not for error reporting, but it can help you avoid mistakes. For example, suppose you expect to delete about ten rows from a table. After the deletion, you check <code>sqlca.sqlerrd[2]</code> and find that 75 rows were processed. To be safe, you might want to roll back the deletion and examine your WHERE-clause search condition.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3509" class="sect2"><a id="sthref1178"></a>
<h3 class="sect2">Parse Error Offsets</h3>
<p>Before executing a SQL statement, Oracle must <span class="italic">parse</span> it to make sure it follows syntax rules and refers to valid database objects. If Oracle finds an error, an offset is stored in the SQLCA variable <code>sqlca.sqlerrd[4]</code>, which you can check explicitly. The offset specifies the character position in the SQL statement at which the parse error begins. As in a normal C string, the first character occupies position zero. For example, if the offset is 9, the parse error begins at the 10<span class="italic">th</span> character.<a id="sthref1179"></a><a id="sthref1180"></a><a id="sthref1181"></a><a id="sthref1182"></a></p>
<p>The parse error offset is used for situations where a separate prepare/parse is performed. This is typical for dynamic SQL statements.</p>
<p>Parse errors may arise from missing, misplaced, or misspelled keywords, invalid options, and the like. For example, the dynamic SQL statement:</p>
<pre>&#34;UPDATE emp SET jib = :job_title WHERE empno = :emp_number&#34; 
</pre>
<p>causes the parse error</p>
<pre>ORA-00904: invalid column name 
</pre>
<p>because the column name JOB is misspelled. The value of <code>sqlca.sqlerrd[4]</code> is 15 because the erroneous column name JIB begins at the 16<span class="italic">th</span> character.</p>
<p>If your SQL statement does not cause a parse error, Oracle sets <code>sqlca.sqlerrd[4]</code> to zero. Oracle also sets <code>sqlca.sqlerrd[4]</code> to zero if a parse error begins at the first character (which occupies position zero). So, check <code>sqlca.sqlerrd[4]</code> only if <span class="italic">sqlca.sqlcode</span> is negative, which means that an error has occurred.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3510" class="sect2"><a id="sthref1183"></a>
<h3 class="sect2">Error Message Text</h3>
<p>The error code and message for Oracle errors are available in the SQLCA variable SQLERRMC. At most, the first 70 characters of text are stored. To get the full text of messages longer than 70 characters, you use the <code>sqlglm()</code> function.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i6805">&#34;Getting the Full Text of Error Messages&#34;</a><a id="sthref1184"></a><a id="sthref1185"></a><a id="sthref1186"></a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i6776"></a>
<div id="LNPCC3511" class="sect1">
<h2 class="sect1">Using the SQL Communications Area (SQLCA)</h2>
<p>The SQLCA is a data structure. Its components contain error, warning, and status information updated by Oracle whenever a SQL statement is executed. Thus, the SQLCA always reflects the outcome of the most recent SQL operation. To determine the outcome, you can check variables in the SQLCA.<a id="sthref1187"></a><a id="sthref1188"></a></p>
<p>Your program can have more than one SQLCA. For example, it might have one global SQLCA and several local ones. Access to a local SQLCA is limited by its scope within the program. Oracle returns information only to the SQLCA that is in scope.<a id="sthref1189"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When your application uses Oracle Net to access a combination of local and remote databases concurrently, all the databases write to one SQLCA. There is <span class="italic">not</span> a different SQLCA for each database.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_03dbc.htm#i5996">&#34;Advanced Connection Options&#34;</a><a id="sthref1190"></a></div>
<div id="LNPCC3512" class="sect2"><a id="sthref1191"></a>
<h3 class="sect2">Declaring the SQLCA</h3>
<p>When MODE=ORACLE, declaring the SQLCA is required. To declare the SQLCA, you should copy it into your program with the INCLUDE or <span class="bold">#include</span> statement, as follows:<a id="sthref1192"></a><a id="sthref1193"></a><a id="sthref1194"></a></p>
<pre>EXEC SQL INCLUDE SQLCA; 
</pre>
<p>or</p>
<pre>#include &lt;sqlca.h&gt;
</pre>
<p>If you use a Declare Section, the SQLCA must be declared <span class="italic">outside</span> the Declare Section. Not declaring the SQLCA results in compile-time errors.</p>
<p>When you precompile your program, the INCLUDE SQLCA statement is replaced by several variable declarations that allow Oracle to communicate with the program.</p>
<p>When MODE=ANSI, declaring the SQLCA is optional. But in this case you must declare a SQLCODE or SQLSTATE status variable. The type of SQLCODE (upper case is required) is <span class="bold">int</span>. If you declare SQLCODE or SQLSTATE instead of the SQLCA in a particular compilation unit, the precompiler allocates an internal SQLCA for that unit. Your Pro*C/C++ program cannot access the internal SQLCA. If you declare the SQLCA <span class="italic">and</span> SQLCODE, Oracle returns the same status code to both after every SQL operation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Declaring the SQLCA is optional when MODE=ANSI, but you cannot use the WHENEVER SQLWARNING directive without the SQLCA. So, if you want to use the WHENEVER SQLWARNING directive, you must declare the SQLCA.
<p>This Guide uses SQLCODE when referring to the SQLCODE status variable, and <span class="italic">sqlca.sqlcode</span> when explicitly referring to the component of the SQLCA structure.</p>
</div>
</div>
<!-- class="sect2" -->
<div id="LNPCC3513" class="sect2"><a id="sthref1195"></a>
<h3 class="sect2">SQLCA Contents</h3>
<p>The SQLCA contains the following runtime information about the outcome of SQL statements:</p>
<ul>
<li>
<p>Oracle error codes</p>
</li>
<li>
<p>Warning flags</p>
</li>
<li>
<p>Event information</p>
</li>
<li>
<p>Rows-processed count</p>
</li>
<li>
<p>Diagnostics</p>
</li>
</ul>
<p>The <code>sqlca.h</code> header file is: <a id="sthref1196"></a></p>
<pre>/*
NAME
  SQLCA : SQL Communications Area.
FUNCTION
  Contains no code. Oracle fills in the SQLCA with status info
  during the execution of a SQL stmt.
NOTES
  **************************************************************
  ***                                                        ***
  *** This file is SOSD.  Porters must change the data types ***
  *** appropriately on their platform.  See notes/pcport.doc ***
  *** for more information.                                  ***
  ***                                                        ***
  **************************************************************

  If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
  will be defined to have this storage class. For example:
 
    #define SQLCA_STORAGE_CLASS extern
 
  will define the SQLCA as an extern.
 
  If the symbol SQLCA_INIT is defined, then the SQLCA will be
  statically initialized. Although this is not necessary in order
  to use the SQLCA, it is a good programing practice not to have
  unitialized variables. However, some C compilers/operating systems
  don&#39;t allow automatic variables to be initialized in this manner.
  Therefore, if you are INCLUDE&#39;ing the SQLCA in a place where it
  would be an automatic AND your C compiler/operating system doesn&#39;t
  allow this style of initialization, then SQLCA_INIT should be left
  undefined -- all others can define SQLCA_INIT if they wish.

  If the symbol SQLCA_NONE is defined, then the SQLCA
  variable will not be defined at all.  The symbol SQLCA_NONE
  should not be defined in source modules that have embedded SQL.
  However, source modules that have no embedded SQL, but need to
  manipulate a sqlca struct passed in as a parameter, can set the
  SQLCA_NONE symbol to avoid creation of an extraneous sqlca
  variable. 
*/
#ifndef SQLCA
#define SQLCA 1
struct   sqlca
         {
         /* ub1 */ char    sqlcaid[8];
         /* b4  */ long    sqlabc;
         /* b4  */ long    sqlcode;
         struct
           {
           /* ub2 */ unsigned short sqlerrml;
           /* ub1 */ char           sqlerrmc[70];
           } sqlerrm;
         /* ub1 */ char    sqlerrp[8];
         /* b4  */ long    sqlerrd[6];
         /* ub1 */ char    sqlwarn[8];
         /* ub1 */ char    sqlext[8];
         };
#ifndef SQLCA_NONE 
#ifdef   SQLCA_STORAGE_CLASS
SQLCA_STORAGE_CLASS struct sqlca sqlca
#else
         struct sqlca sqlca
#endif
#ifdef  SQLCA_INIT
         = {
         {&#39;S&#39;, &#39;Q&#39;, &#39;L&#39;, &#39;C&#39;, &#39;A&#39;, &#39; &#39;, &#39; &#39;, &#39; &#39;},
         sizeof(struct sqlca),
         0,
         { 0, {0}},
         {&#39;N&#39;, &#39;O&#39;, &#39;T&#39;, &#39; &#39;, &#39;S&#39;, &#39;E&#39;, &#39;T&#39;, &#39; &#39;},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0}
         }
#endif
         ;
#endif
#endif
</pre></div>
<!-- class="sect2" -->
<a id="i12497"></a>
<div id="LNPCC3514" class="sect2">
<h3 class="sect2">SQLCA Structure</h3>
<p>This section describes the structure of the SQLCA, its components, and the values they can store.<a id="sthref1197"></a></p>
<div id="LNPCC3515" class="sect3"><a id="sthref1198"></a>
<h4 class="sect3"><span class="italic">sqlcaid</span></h4>
<p>This string component is initialized to &#34;SQLCA&#34; to identify the SQL Communications Area.<a id="sthref1199"></a><a id="sthref1200"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3516" class="sect3"><a id="sthref1201"></a>
<h4 class="sect3"><span class="italic">sqlcabc</span></h4>
<p>This integer component holds the length, in bytes, of the SQLCA structure.<a id="sthref1202"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3517" class="sect3"><a id="sthref1203"></a>
<h4 class="sect3"><span class="italic">sqlcode</span></h4>
<p>This integer component holds the status code of the most recently executed SQL statement. The status code, which indicates the outcome of the SQL operation, can be any of the following numbers:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="possible status codes" summary="Status Codes" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t14">Status Codes</th>
<th class="cellalignment832" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t14" headers="r1c1-t14">0</td>
<td class="cellalignment833" headers="r2c1-t14 r1c2-t14">Means that Oracle executed the statement without detecting an error or exception.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t14" headers="r1c1-t14">&gt;0</td>
<td class="cellalignment833" headers="r3c1-t14 r1c2-t14">Means that Oracle executed the statement but detected an exception. This occurs when Oracle cannot find a row that meets your WHERE-clause search condition or when a SELECT INTO or FETCH returns no rows.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>When MODE=ANSI, +100 is returned to <span class="italic">sqlcode</span> after an INSERT of no rows. This can happen when a subquery returns no rows to process.</p>
<ul>
<li>
<p>&lt;0 - Means that Oracle did not execute the statement because of a database, system, network, or application error. Such errors can be fatal. When they occur, the current transaction should, in most cases, be rolled back.</p>
</li>
</ul>
<p>Negative return codes correspond to error codes listed in <a class="olink ERRMG" href="../ERRMG/toc.htm"><span class="italic">Oracle Database Error Messages</span></a></p>
</div>
<!-- class="sect3" -->
<a id="i7148"></a>
<div id="LNPCC3518" class="sect3"><a id="g30932"></a>
<h4 class="sect3"><span class="italic">sqlerrm</span></h4>
<p>This embedded struct contains the following two components:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="embedded struct components of sqlerrm" summary="Components" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t15">Components</th>
<th class="cellalignment832" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t15" headers="r1c1-t15">sqlerrml</td>
<td class="cellalignment833" headers="r2c1-t15 r1c2-t15">This integer component holds the length of the message text stored in sqlerrmc.<a id="sthref1204"></a><a id="sthref1205"></a></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t15" headers="r1c1-t15">sqlerrmc</td>
<td class="cellalignment833" headers="r3c1-t15 r1c2-t15">This string component holds the message text corresponding to the error code stored in sqlcode. The string is not null terminated. Use the sqlerrml component to determine the length.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>This component can store up to 70 characters. To get the full text of messages longer than 70 characters, you must use the <code>sqlglm()</code> function (discussed later).<a id="sthref1206"></a><a id="sthref1207"></a></p>
<p>Make sure <span class="italic">sqlcode</span> is negative <span class="italic">before</span> you reference <span class="italic">sqlerrmc</span>. If you reference <span class="italic">sqlerrmc</span> when <span class="italic">sqlcode</span> is zero, you get the message text associated with a prior SQL statement.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3519" class="sect3"><a id="sthref1208"></a>
<h4 class="sect3"><span class="italic">sqlerrp</span></h4>
<p>This string component is reserved for future use.</p>
</div>
<!-- class="sect3" -->
<a id="i10427"></a>
<div id="LNPCC3520" class="sect3"><a id="g30970"></a>
<h4 class="sect3"><span class="italic">sqlerrd</span></h4>
<p>This array of binary integers has six elements. Descriptions of the components in <span class="italic">sqlerrd</span> follow:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="components of sqlerrd" summary="Components" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t16">Components</th>
<th class="cellalignment832" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t16" headers="r1c1-t16">sqlerrd[0]</td>
<td class="cellalignment833" headers="r2c1-t16 r1c2-t16">This component is reserved for future use.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t16" headers="r1c1-t16">sqlerrd[1]</td>
<td class="cellalignment833" headers="r3c1-t16 r1c2-t16">This component is reserved for future use.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t16" headers="r1c1-t16">sqlerrd[2]</td>
<td class="cellalignment833" headers="r4c1-t16 r1c2-t16">This component holds the number of rows processed by the most recently executed SQL statement. However, if the SQL statement failed, the value of sqlca.sqlerrd[2] is undefined, with one exception. If the error occurred during an array operation, processing stops at the row that caused the error, so sqlca.sqlerrd[2] gives the number of rows processed successfully.<a id="sthref1209"></a><a id="sthref1210"></a></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>The rows-processed count is zeroed after an OPEN statement and incremented after a FETCH statement. For the EXECUTE, INSERT, UPDATE, DELETE, and SELECT INTO statements, the count reflects the number of rows processed successfully. The count does <span class="italic">not</span> include rows processed by an UPDATE or DELETE CASCADE. For example, if 20 rows are deleted because they meet WHERE-clause criteria, and 5 more rows are deleted because they now (after the primary delete) violate column constraints, the count is 20 not 25.</p>
<div class="inftblinformal">
<table class="cellalignment834" title="components of sqlerrd" summary="Components" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t17">Components</th>
<th class="cellalignment832" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t17" headers="r1c1-t17">sqlerrd[3]</td>
<td class="cellalignment833" headers="r2c1-t17 r1c2-t17">This component is reserved for future use.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t17" headers="r1c1-t17">sqlerrd[4]</td>
<td class="cellalignment833" headers="r3c1-t17 r1c2-t17">This component holds an offset that specifies the character position at which a parse error begins in the most recently executed SQL statement. The first character occupies position zero.<a id="sthref1211"></a><a id="sthref1212"></a></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t17" headers="r1c1-t17">sqlerrd[5]</td>
<td class="cellalignment833" headers="r4c1-t17 r1c2-t17">This component is reserved for future use.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCC3521" class="sect3"><a id="sthref1213"></a>
<h4 class="sect3"><span class="italic">sqlwarn</span></h4>
<p>This array of single characters has eight elements. They are used as warning flags. Oracle sets a flag by assigning it a &#34;W&#34; (for warning) character value.</p>
<p>The flags warn of exceptional conditions. For example, a warning flag is set when Oracle assigns a truncated column value to an output host variable.</p>
<p>Descriptions of the components in <span class="italic">sqlwarn</span> follow:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="components of sqlwarn" summary="Components" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t18">Components</th>
<th class="cellalignment832" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t18" headers="r1c1-t18">sqlwarn[0]</td>
<td class="cellalignment833" headers="r2c1-t18 r1c2-t18">This flag is set if another warning flag is set.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t18" headers="r1c1-t18">sqlwarn[1]</td>
<td class="cellalignment833" headers="r3c1-t18 r1c2-t18">This flag is set if a truncated column value was assigned to an output host variable. This applies only to character data. Oracle truncates certain numeric data without setting a warning or returning a negative sqlcode.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>To find out if a column value was truncated and by how much, check the indicator variable associated with the output host variable. The (positive) integer returned by an indicator variable is the original length of the column value. You can increase the length of the host variable accordingly.</p>
<div class="inftblinformal">
<table class="cellalignment834" title="flags of sqlwarn" summary="Flags" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t19">Components</th>
<th class="cellalignment832" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t19" headers="r1c1-t19">sqlwarn[2]</td>
<td class="cellalignment833" headers="r2c1-t19 r1c2-t19">This flag is set if a NULL column is not used in the result of a SQL group function, such as AVG() or SUM().</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t19" headers="r1c1-t19">sqlwarn[3]</td>
<td class="cellalignment833" headers="r3c1-t19 r1c2-t19">This flag is set if the number of columns in a query select list does not equal the number of host variables in the INTO clause of the SELECT or FETCH statement. The number of items returned is the lesser of the two.<a id="sthref1214"></a><a id="sthref1215"></a></td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t19" headers="r1c1-t19">sqlwarn[4]</td>
<td class="cellalignment833" headers="r4c1-t19 r1c2-t19">This flag is no longer in use.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t19" headers="r1c1-t19">sqlwarn[5]</td>
<td class="cellalignment833" headers="r5c1-t19 r1c2-t19">This flag is set when an EXEC SQL CREATE {PROCEDURE | FUNCTION | PACKAGE | PACKAGE BODY} statement fails because of a PL/SQL compilation error.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t19" headers="r1c1-t19">sqlwarn[6]</td>
<td class="cellalignment833" headers="r6c1-t19 r1c2-t19">This flag is no longer in use.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t19" headers="r1c1-t19">sqlwarn[7]</td>
<td class="cellalignment833" headers="r7c1-t19 r1c2-t19">This flag is no longer in use.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<a id="i7149"></a>
<div id="LNPCC3522" class="sect3">
<h4 class="sect3"><span class="italic">sqlext</span></h4>
<p>This string component is reserved for future use.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCC3523" class="sect2"><a id="sthref1216"></a>
<h3 class="sect2">PL/SQL Considerations<a id="sthref1217"></a><a id="sthref1218"></a></h3>
<p>When the precompiler application executes an embedded PL/SQL block, not all components of the SQLCA are set. For example, if the block fetches several rows, the rows-processed count (<code>sqlerrd[2]</code>) is set to only 1. You should depend only on the <span class="italic">sqlcode</span> and <span class="italic">sqlerrm</span> components of the SQLCA after execution of a PL/SQL block.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i6805"></a>
<div id="LNPCC3524" class="sect1">
<h2 class="sect1">Getting the Full Text of Error Messages</h2>
<p>The SQLCA can accommodate error messages up to 70 characters long. To get the full text of longer (or nested) error messages, you need to use the <code>sqlglm()</code> function. The syntax is<a id="sthref1219"></a><a id="sthref1220"></a><a id="sthref1221"></a><a id="sthref1222"></a></p>
<pre>void sqlglm(unsigned char   *message_buffer, 
            size_t *buffer_size,
            size_t *message_length); 
</pre>
<p>where:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="descriptions of message_buffer, buffer_size, and message_length" summary="Syntax" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t20">Syntax</th>
<th class="cellalignment832" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t20" headers="r1c1-t20">message_buffer</td>
<td class="cellalignment833" headers="r2c1-t20 r1c2-t20">Is the text buffer in which you want Oracle to store the error message (Oracle blank-pads to the end of this buffer).</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t20" headers="r1c1-t20">buffer_size</td>
<td class="cellalignment833" headers="r3c1-t20 r1c2-t20">Is a scalar variable that specifies the maximum size of the buffer in bytes.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t20" headers="r1c1-t20">message_length</td>
<td class="cellalignment833" headers="r4c1-t20 r1c2-t20">Is a scalar variable in which Oracle stores the actual length of the error message, if not truncated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The types of the last two arguments for the <code>sqlglm()</code> function are shown here generically as <code>size_t</code> pointers. However on your platform they might have a different type. For example, on many UNIX workstation ports, they are <code>unsigned int *</code><span class="bold">.</span>
<p>You should check the file <code>sqlcpr.h</code>, which is in the standard include directory on your system, to determine the datatype of these parameters. <a id="sthref1223"></a><a id="sthref1224"></a></p>
</div>
<p>The maximum length of an Oracle error message is 512 characters including the error code, nested messages, and message inserts such as table and column names. The maximum length of an error message returned by <code>sqlglm()</code> depends on the value you specify for <span class="italic">buffer_size</span>.</p>
<p>The following example calls <code>sqlglm()</code> to get an error message of up to 200 characters in length:<a id="sthref1225"></a><a id="sthref1226"></a></p>
<pre>EXEC SQL WHENEVER SQLERROR DO sql_error(); 
... 
/* other statements */ 
... 
sql_error() 
{ 
    char msg[200]; 
    size_t buf_len, msg_len; 
 
    buf_len = sizeof (msg); 
    sqlglm(msg, &amp;buf_len, &amp;msg_len);   /* note use of pointers */
    if (msg_len &gt; buf_len)
    msg_len = buf_len;
    printf(&#34;%.*s\n\n&#34;, msg_len, msg); 
    exit(1); 
} 
</pre>
<p>Notice that <code>sqlglm()</code> is called only when a SQL error has occurred. Always make sure SQLCODE (or <span class="italic">sqlca.sqlcode</span>) is nonzero <span class="italic">before</span> calling <span class="italic">sqlglm</span>. If you call <code>sqlglm()</code> when SQLCODE is zero, you get the message text associated with a prior SQL statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In cases where multiple runtime contexts are used, use the version of sqlglmt() that takes a context to get the correct error message.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_11thr.htm#g1021123">Chapter 11, &#34;Multithreaded Applications&#34;</a></div>
</div>
<!-- class="sect1" -->
<a id="i12340"></a>
<div id="LNPCC3525" class="sect1">
<h2 class="sect1">Using the WHENEVER Directive</h2>
<p>By default, precompiled programs ignore Oracle error and warning conditions and continue processing if possible. To do automatic condition checking and error handling, you need the WHENEVER directive.</p>
<p>With the WHENEVER directive you can specify actions to be taken when Oracle detects an error, warning condition, or &#34;not found&#34; condition. These actions include continuing with the next statement, calling a routine, branching to a labeled statement, or stopping.</p>
<p>You code the WHENEVER directive using the following syntax:</p>
<pre>EXEC SQL WHENEVER &lt;condition&gt; &lt;action&gt;; 
</pre>
<div id="LNPCC3526" class="sect2"><a id="sthref1227"></a>
<h3 class="sect2">WHENEVER Conditions</h3>
<p>You can have Oracle automatically check the SQLCA for any of the following conditions.<a id="sthref1228"></a></p>
<div id="LNPCC3527" class="sect3"><a id="sthref1229"></a>
<h4 class="sect3">SQLWARNING</h4>
<p><code>sqlwarn[0]</code> is set because Oracle returned a warning (one of the warning flags, <code>sqlwarn[1]</code> through <code>sqlwarn[7]</code>, is also set) or SQLCODE has a positive value other than +1403. For example, <code>sqlwarn[0]</code> is set when Oracle assigns a truncated column value to an output host variable.<a id="sthref1230"></a><a id="sthref1231"></a><a id="sthref1232"></a></p>
<p>Declaring the SQLCA is optional when MODE=ANSI. To use WHENEVER SQLWARNING, however, you <span class="italic">must</span> declare the SQLCA.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3528" class="sect3"><a id="sthref1233"></a>
<h4 class="sect3">SQLERROR</h4>
<p>SQLCODE has a negative value because Oracle returned an error. <a id="sthref1234"></a><a id="sthref1235"></a><a id="sthref1236"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3529" class="sect3"><a id="sthref1237"></a>
<h4 class="sect3">NOT FOUND</h4>
<p>SQLCODE has a value of +1403 (+100 when MODE=ANSI) because Oracle could not find a row that meets your WHERE-clause search condition, or a SELECT INTO or FETCH returned no rows.</p>
<p>When MODE=ANSI, +100 is returned to SQLCODE after an INSERT of no rows.<a id="sthref1238"></a><a id="sthref1239"></a><a id="sthref1240"></a></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCC3530" class="sect2"><a id="sthref1241"></a>
<h3 class="sect2">WHENEVER Actions</h3>
<p>When Oracle detects one of the preceding <span class="italic">conditions</span>, you can have your program take any of the following actions.</p>
<div id="LNPCC3531" class="sect3"><a id="sthref1242"></a>
<h4 class="sect3">CONTINUE</h4>
<p>Your program continues to run with the next statement if possible. This is the default action, equivalent to not using the WHENEVER directive. You can use it to turn off condition checking.<a id="sthref1243"></a><a id="sthref1244"></a><a id="sthref1245"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3532" class="sect3"><a id="sthref1246"></a>
<h4 class="sect3">DO</h4>
<p>Your program transfers control to an error handling function in the program. When the end of the routine is reached, control transfers to the statement that follows the failed SQL statement.<a id="sthref1247"></a><a id="sthref1248"></a><a id="sthref1249"></a></p>
<p>The usual rules for entering and exiting a function apply. You can pass parameters to the error handler invoked by an EXEC SQL WHENEVER ... DO ... directive, and the function can return a value.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3533" class="sect3"><a id="sthref1250"></a>
<h4 class="sect3">DO BREAK</h4>
<p>An actual &#34;break&#34; statement is placed in your program. Use this action in loops. When the WHENEVER condition is met, your program exits the loop it is inside.<a id="sthref1251"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3534" class="sect3"><a id="sthref1252"></a>
<h4 class="sect3">DO CONTINUE</h4>
<p>An actual &#34;continue&#34; statement is placed in your program. Use this action in loops. When the WHENEVER condition is met, your program continues with the next iteration of the loop it is inside.<a id="sthref1253"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3535" class="sect3"><a id="sthref1254"></a>
<h4 class="sect3">GOTO label_name</h4>
<p>Your program branches to a labeled statement. <a id="sthref1255"></a><a id="sthref1256"></a><a id="sthref1257"></a>Label names can be any length, but only the first 31 characters are significant. Your C compiler might require a different maximum length. Check your C compiler user&#39;s guide.<a id="sthref1258"></a><a id="sthref1259"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3536" class="sect3"><a id="sthref1260"></a>
<h4 class="sect3">STOP</h4>
<p>Your program stops running and uncommitted work is rolled back. <a id="sthref1261"></a> <a id="sthref1262"></a><a id="sthref1263"></a></p>
<p>STOP in effect just generates an <code>exit()</code> call whenever the condition occurs. Be careful. The STOP action displays no messages before disconnecting from Oracle.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCC3537" class="sect2"><a id="sthref1264"></a>
<h3 class="sect2">WHENEVER Examples</h3>
<p>If you want your program to</p>
<ul>
<li>
<p>Go to <span class="italic">close_cursor</span> if a &#34;no data found&#34; condition occurs</p>
</li>
<li>
<p>Continue with the next statement if a warning occurs</p>
</li>
<li>
<p>Go to <span class="italic">error_handler</span> if an error occurs</p>
</li>
</ul>
<p>you must code the following WHENEVER directives before the first executable SQL statement:<a id="sthref1265"></a></p>
<pre>EXEC SQL WHENEVER NOT FOUND GOTO close_cursor; 
EXEC SQL WHENEVER SQLWARNING CONTINUE; 
EXEC SQL WHENEVER SQLERROR GOTO error_handler; 
</pre>
<p>In the following example, you use WHENEVER...DO directives to handle specific errors:</p>
<pre>... 
EXEC SQL WHENEVER SQLERROR DO handle_insert_error(&#34;INSERT error&#34;); 
EXEC SQL INSERT INTO emp (empno, ename, deptno) 
    VALUES (:emp_number, :emp_name, :dept_number); 
EXEC SQL WHENEVER SQLERROR DO handle_delete_error(&#34;DELETE error&#34;); 
EXEC SQL DELETE FROM dept WHERE deptno = :dept_number; 
... 
handle_insert_error(char *stmt) 
{   switch(sqlca.sqlcode) 
    { 
    case -1: 
    /* duplicate key value */ 
        ... 
        break; 
    case -1401: 
    /* value too large */ 
        ... 
        break; 
    default: 
    /* do something here too */ 
        ... 
        break; 
    } 
} 
 
handle_delete_error(char *stmt) 
{ 
    printf(&#34;%s\n\n&#34;, stmt); 
    if (sqlca.sqlerrd[2] == 0) 
    { 
        /* no rows deleted */ 
        ... 
    } 
    else 
    {   ...
    } 
    ... 
} 
</pre>
<p>Notice how the procedures check variables in the SQLCA to determine a course of action.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3538" class="sect2"><a id="sthref1266"></a>
<h3 class="sect2">Use of DO BREAK and DO CONTINUE</h3>
<p>This example illustrates how to display employee name, salary, and commission for only those employees who receive commissions:</p>
<pre>#include &lt;sqlca.h&gt;
#include &lt;stdio.h&gt;

main()
{
    char *uid = &#34;scott/tiger&#34;;
    struct { char ename[12]; float sal; float comm; } emp;

    /* Trap any connection error that might occur. */
    EXEC SQL WHENEVER SQLERROR GOTO whoops;
    EXEC SQL CONNECT :uid;

    EXEC SQL DECLARE c CURSOR FOR
        SELECT ename, sal, comm FROM EMP ORDER BY ENAME ASC;

    EXEC SQL OPEN c;

    /* Set up &#39;BREAK&#39; condition to exit the loop. */
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
   /* The DO CONTINUE makes the loop start at the next iteration when an error occurs.*/
    EXEC SQL WHENEVER SQLERROR DO CONTINUE;

    while (1)
      {
          EXEC SQL FETCH c INTO :emp;
   /* An ORA-1405 would cause the &#39;continue&#39; to occur. So only employees with */
   /* non-NULL commissions will be displayed. */
          printf(&#34;%s  %7.2f  %9.2f\n&#34;, emp.ename, emp.sal, emp.comm);
       }

/* This &#39;CONTINUE&#39; shuts off the &#39;DO CONTINUE&#39; allowing the program to 
   proceed if any further errors do occur, specifically, with the CLOSE */
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    EXEC SQL CLOSE c;

    exit(EXIT_SUCCESS);

whoops:
    printf(&#34;%.*s\n&#34;, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
    exit(EXIT_FAILURE);
}
</pre></div>
<!-- class="sect2" -->
<div id="LNPCC3539" class="sect2"><a id="sthref1267"></a>
<h3 class="sect2">Scope of WHENEVER</h3>
<p>Because WHENEVER is a declarative statement, its scope is positional, not logical. That is, it tests all executable SQL statements that <span class="italic">physically</span> follow it in the source file, not in the flow of program logic. So, code the WHENEVER directive before the first executable SQL statement you want to test.<a id="sthref1268"></a><a id="sthref1269"></a></p>
<p>A WHENEVER directive stays in effect until superseded by another WHENEVER directive checking for the same condition.</p>
<p>In the following example, the first WHENEVER SQLERROR directive is superseded by a second, and so applies only to the CONNECT statement. The second WHENEVER SQLERROR directive applies to both the UPDATE and DROP statements, despite the flow of control from <span class="italic">step1</span> to <span class="italic">step3</span>.</p>
<pre>step1: 
    EXEC SQL WHENEVER SQLERROR STOP; 
    EXEC SQL CONNECT :username IDENTIFIED BY :password; 
    ... 
    goto step3; 
step2: 
    EXEC SQL WHENEVER SQLERROR CONTINUE; 
    EXEC SQL UPDATE emp SET sal = sal * 1.10; 
    ... 
step3: 
    EXEC SQL DROP INDEX emp_index; 
    ... 
</pre></div>
<!-- class="sect2" -->
<div id="LNPCC3540" class="sect2"><a id="sthref1270"></a>
<h3 class="sect2">Guidelines for WHENEVER</h3>
<p>The following guidelines will help you avoid some common pitfalls.<a id="sthref1271"></a><a id="sthref1272"></a></p>
<div id="LNPCC3541" class="sect3"><a id="sthref1273"></a>
<h4 class="sect3">Placing the Statements</h4>
<p>In general, code a WHENEVER directive before the first executable SQL statement in your program. This ensures that all ensuing errors are trapped because WHENEVER directives stay in effect to the end of a file.<a id="sthref1274"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3542" class="sect3"><a id="sthref1275"></a>
<h4 class="sect3">Handling End-of-Data Conditions</h4>
<p>Your program should be prepared to handle an end-of-data condition when using a cursor to fetch rows. If a FETCH returns no data, the program should exit the fetch loop, as follows:<a id="sthref1276"></a></p>
<pre>EXEC SQL WHENEVER NOT FOUND DO break;
for (;;)
{
    EXEC SQL FETCH...
}
EXEC SQL CLOSE my_cursor; 
... 
</pre>
<p>An INSERT can return NOT FOUND if no rows have been inserted. If you do not want to catch that condition, use the EXEC SQL WHENEVER NOT FOUND CONTINUE statement before the INSERT:</p>
<pre>EXEC SQL WHENEVER NOT FOUND DO break;
for(;;)
{
   EXEC SQL FETCH ...
   EXEC SQL WHENEVER NOT FOUND CONTINUE;
   EXEC SQL INSERT INTO ...
}
EXEC SQL CLOSE my_cursor;
...
</pre></div>
<!-- class="sect3" -->
<div id="LNPCC3543" class="sect3"><a id="sthref1277"></a>
<h4 class="sect3">Avoiding Infinite Loops</h4>
<p>If a WHENEVER SQLERROR GOTO directive branches to an error handling routine that includes an executable SQL statement, your program might enter an infinite loop if the SQL statement fails with an error. You can avoid this by coding WHENEVER SQLERROR CONTINUE before the SQL statement, as shown in the following example:<a id="sthref1278"></a></p>
<pre>EXEC SQL WHENEVER SQLERROR GOTO sql_error; 
... 
sql_error: 
    EXEC SQL WHENEVER SQLERROR CONTINUE; 
    EXEC SQL ROLLBACK WORK RELEASE; 
    ... 
</pre>
<p>Without the WHENEVER SQLERROR CONTINUE statement, a ROLLBACK error would invoke the routine again, starting an infinite loop.</p>
<p>Careless use of WHENEVER can cause problems. For example, the following code enters an infinite loop if the DELETE statement sets NOT FOUND because no rows meet the search condition:</p>
<pre>/* improper use of WHENEVER */ 
... 
EXEC SQL WHENEVER NOT FOUND GOTO no_more; 
for (;;) 
{ 
    EXEC SQL FETCH emp_cursor INTO :emp_name, :salary; 
    ... 
} 
 
no_more: 
    EXEC SQL DELETE FROM emp WHERE empno = :emp_number; 
     ... 
</pre>
<p>The next example handles the NOT FOUND condition properly by resetting the GOTO target:</p>
<pre>/* proper use of WHENEVER */ 
... 
EXEC SQL WHENEVER NOT FOUND GOTO no_more; 
for (;;) 
{ 
    EXEC SQL FETCH emp_cursor INTO :emp_name, :salary; 
    ... 
} 
no_more: 
    EXEC SQL WHENEVER NOT FOUND GOTO no_match; 
    EXEC SQL DELETE FROM emp WHERE empno = :emp_number; 
    ... 
no_match: 
    ... 
</pre></div>
<!-- class="sect3" -->
<div id="LNPCC3544" class="sect3"><a id="sthref1279"></a>
<h4 class="sect3">Maintaining Addressability</h4>
<p>Make sure all SQL statements governed by a WHENEVER GOTO directive can branch to the GOTO label. The following code results in a compile-time error because <span class="italic">labelA</span> in <span class="italic">func1</span> is not within the scope of the INSERT statement in <span class="italic">func2</span>:<a id="sthref1280"></a></p>
<pre>func1() 
{ 
  
    EXEC SQL WHENEVER SQLERROR GOTO labelA; 
    EXEC SQL DELETE FROM emp WHERE deptno = :dept_number; 
    ... 
labelA: 
... 
} 
func2() 
{ 
  
    EXEC SQL INSERT INTO emp (job) VALUES (:job_title); 
    ... 
} 
</pre>
<p>The label to which a WHENEVER GOTO directive branches must be in the same precompilation file as the statement.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3545" class="sect3"><a id="sthref1281"></a>
<h4 class="sect3">Returning After an Error</h4>
<p>If your program must return after handling an error, use the DO <span class="italic">routine_call</span> action. Alternatively, you can test the value of <span class="italic">sqlcode</span>, as shown in the following example:</p>
<pre>... 
EXEC SQL UPDATE emp SET sal = sal * 1.10; 
if (sqlca.sqlcode &lt; 0) 
{  /* handle error  */ 
 
EXEC SQL DROP INDEX emp_index;
</pre>
<p>Just make sure no WHENEVER GOTO or WHENEVER STOP directive is active.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i6810"></a>
<div id="LNPCC3546" class="sect1">
<h2 class="sect1">Obtaining the Text of SQL Statements<a id="sthref1282"></a></h2>
<p>In many precompiler applications it is convenient to know the text of the statement being processed, its length, and the SQL command (such as INSERT or SELECT) that it contains. This is especially true for applications that use dynamic SQL.</p>
<p>The <code>SQLStmtGetText()</code> function (old name:<code>sqlgls()</code> function)&mdash;part of the SQLLIB runtime library&mdash;returns the following information:</p>
<ul>
<li>
<p>The text of the most recently parsed SQL statement</p>
</li>
<li>
<p>The effective length of the statement</p>
</li>
<li>
<p>A function code for the SQL command used in the statement</p>
</li>
</ul>
<p><code>SQLStmtGetText()</code> is thread-safe. You can call <code>SQLStmtGetText()</code> after issuing a static SQL statement. For dynamic SQL Method 1, call <code>SQLStmtGetText()</code> after the SQL statement is executed. For dynamic SQL Methods 2, 3, and 4, you can call <code>SQLStmtGetText()</code> as soon as the statement has been PREPAREd.</p>
<p>For the new names of all the SQLLIB functions, see also <a href="pc_05adv.htm#i426817">&#34;New Names for SQLLIB Public Functions&#34;</a>.</p>
<p>The prototype for <code>SQLStmtGetText()</code> is</p>
<pre>void SQLStmtGetText(dvoid *context, char *sqlstm, size_t *stmlen, size_t *sqlfc); 
</pre>
<p>The context parameter is the runtime context. For definition and use of contexts, see <a href="pc_04dat.htm#i24497">&#34;CONTEXT Variables&#34;</a>.</p>
<p>The <span class="italic">sqlstm</span> parameter is a character buffer that holds the returned text of the SQL statement. Your program must statically declare the buffer or dynamically allocate memory for the buffer.</p>
<p>The <span class="italic">stmlen</span> parameter is a size_t variable. Before calling <code>SQLStmtGetText()</code>, set this parameter to the actual size, in bytes, of the <span class="italic">sqlstm</span> buffer. When <code>SQLStmtGetText()</code> returns, the <span class="italic">sqlstm</span> buffer contains the SQL statement text, blank padded to the length of the buffer. The <span class="italic">stmlen</span> parameter returns the actual number of bytes in the returned statement text, not counting blank padding. The maximum value of <span class="italic">stmlen</span> is port-specific and generally will be the maximum integer size.</p>
<p>The <span class="italic">sqlfc</span> parameter is a size_t variable that returns the SQL function code for the SQL command in the statement. <a href="#g25303">Table 9-3</a> shows the SQL function codes for the commands.</p>
<div id="LNPCC3547" class="tblformalwide">
<p class="titleintable"><a id="sthref1283"></a><a id="g25303"></a>Table 9-3 SQL Function Codes</p>
<table class="cellalignment834" title="SQL Function Codes" summary="SQL Function Codes" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t24"><span class="bold">Code</span></th>
<th class="cellalignment832" id="r1c2-t24">SQL Function</th>
<th class="cellalignment832" id="r1c3-t24">Code</th>
<th class="cellalignment832" id="r1c4-t24">SQL Function</th>
<th class="cellalignment832" id="r1c5-t24">Code</th>
<th class="cellalignment832" id="r1c6-t24">SQL Function</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t24" headers="r1c1-t24">
<p>01</p>
</td>
<td class="cellalignment833" headers="r2c1-t24 r1c2-t24">
<p>CREATE TABLE</p>
</td>
<td class="cellalignment833" headers="r2c1-t24 r1c3-t24">
<p>26</p>
</td>
<td class="cellalignment833" headers="r2c1-t24 r1c4-t24">
<p>ALTER TABLE</p>
</td>
<td class="cellalignment833" headers="r2c1-t24 r1c5-t24">
<p>51</p>
</td>
<td class="cellalignment833" headers="r2c1-t24 r1c6-t24">
<p>DROP TABLESPACE</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t24" headers="r1c1-t24">
<p>02</p>
</td>
<td class="cellalignment833" headers="r3c1-t24 r1c2-t24">
<p>SET ROLE</p>
</td>
<td class="cellalignment833" headers="r3c1-t24 r1c3-t24">
<p>27</p>
</td>
<td class="cellalignment833" headers="r3c1-t24 r1c4-t24">
<p>EXPLAIN</p>
</td>
<td class="cellalignment833" headers="r3c1-t24 r1c5-t24">
<p>52</p>
</td>
<td class="cellalignment833" headers="r3c1-t24 r1c6-t24">
<p>ALTER SESSION</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r4c1-t24" headers="r1c1-t24">
<p>03</p>
</td>
<td class="cellalignment833" headers="r4c1-t24 r1c2-t24">
<p>INSERT</p>
</td>
<td class="cellalignment833" headers="r4c1-t24 r1c3-t24">
<p>28</p>
</td>
<td class="cellalignment833" headers="r4c1-t24 r1c4-t24">
<p>GRANT</p>
</td>
<td class="cellalignment833" headers="r4c1-t24 r1c5-t24">
<p>53</p>
</td>
<td class="cellalignment833" headers="r4c1-t24 r1c6-t24">
<p>ALTER USER</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r5c1-t24" headers="r1c1-t24">
<p>04</p>
</td>
<td class="cellalignment833" headers="r5c1-t24 r1c2-t24">
<p>SELECT</p>
</td>
<td class="cellalignment833" headers="r5c1-t24 r1c3-t24">
<p>29</p>
</td>
<td class="cellalignment833" headers="r5c1-t24 r1c4-t24">
<p>REVOKE</p>
</td>
<td class="cellalignment833" headers="r5c1-t24 r1c5-t24">
<p>54</p>
</td>
<td class="cellalignment833" headers="r5c1-t24 r1c6-t24">
<p>COMMIT</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r6c1-t24" headers="r1c1-t24">
<p>05</p>
</td>
<td class="cellalignment833" headers="r6c1-t24 r1c2-t24">
<p>UPDATE</p>
</td>
<td class="cellalignment833" headers="r6c1-t24 r1c3-t24">
<p>30</p>
</td>
<td class="cellalignment833" headers="r6c1-t24 r1c4-t24">
<p>CREATE SYNONYM</p>
</td>
<td class="cellalignment833" headers="r6c1-t24 r1c5-t24">
<p>55</p>
</td>
<td class="cellalignment833" headers="r6c1-t24 r1c6-t24">
<p>ROLLBACK</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r7c1-t24" headers="r1c1-t24">
<p>06</p>
</td>
<td class="cellalignment833" headers="r7c1-t24 r1c2-t24">
<p>DROP ROLE</p>
</td>
<td class="cellalignment833" headers="r7c1-t24 r1c3-t24">
<p>31</p>
</td>
<td class="cellalignment833" headers="r7c1-t24 r1c4-t24">
<p>DROP SYNONYM</p>
</td>
<td class="cellalignment833" headers="r7c1-t24 r1c5-t24">
<p>56</p>
</td>
<td class="cellalignment833" headers="r7c1-t24 r1c6-t24">
<p>SAVEPOINT</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r8c1-t24" headers="r1c1-t24">
<p>07</p>
</td>
<td class="cellalignment833" headers="r8c1-t24 r1c2-t24">
<p>DROP VIEW</p>
</td>
<td class="cellalignment833" headers="r8c1-t24 r1c3-t24">
<p>32</p>
</td>
<td class="cellalignment833" headers="r8c1-t24 r1c4-t24">
<p>ALTER SYSTEM SWITCH LOG</p>
</td>
<td class="cellalignment833" headers="r8c1-t24 r1c5-t24">
<p>57</p>
</td>
<td class="cellalignment833" headers="r8c1-t24 r1c6-t24">
<p>CREATE CONTROL FILE</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r9c1-t24" headers="r1c1-t24">
<p>08</p>
</td>
<td class="cellalignment833" headers="r9c1-t24 r1c2-t24">
<p>DROP TABLE</p>
</td>
<td class="cellalignment833" headers="r9c1-t24 r1c3-t24">
<p>33</p>
</td>
<td class="cellalignment833" headers="r9c1-t24 r1c4-t24">
<p>SET TRANSACTION</p>
</td>
<td class="cellalignment833" headers="r9c1-t24 r1c5-t24">
<p>58</p>
</td>
<td class="cellalignment833" headers="r9c1-t24 r1c6-t24">
<p>ALTER TRACING</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r10c1-t24" headers="r1c1-t24">
<p>09</p>
</td>
<td class="cellalignment833" headers="r10c1-t24 r1c2-t24">
<p>DELETE</p>
</td>
<td class="cellalignment833" headers="r10c1-t24 r1c3-t24">
<p>34</p>
</td>
<td class="cellalignment833" headers="r10c1-t24 r1c4-t24">
<p>PL/SQL EXECUTE</p>
</td>
<td class="cellalignment833" headers="r10c1-t24 r1c5-t24">
<p>59</p>
</td>
<td class="cellalignment833" headers="r10c1-t24 r1c6-t24">
<p>CREATE TRIGGER</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r11c1-t24" headers="r1c1-t24">
<p>10</p>
</td>
<td class="cellalignment833" headers="r11c1-t24 r1c2-t24">
<p>CREATE VIEW</p>
</td>
<td class="cellalignment833" headers="r11c1-t24 r1c3-t24">
<p>35</p>
</td>
<td class="cellalignment833" headers="r11c1-t24 r1c4-t24">
<p>LOCK TABLE</p>
</td>
<td class="cellalignment833" headers="r11c1-t24 r1c5-t24">
<p>60</p>
</td>
<td class="cellalignment833" headers="r11c1-t24 r1c6-t24">
<p>ALTER TRIGGER</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r12c1-t24" headers="r1c1-t24">
<p>11</p>
</td>
<td class="cellalignment833" headers="r12c1-t24 r1c2-t24">
<p>DROP USER</p>
</td>
<td class="cellalignment833" headers="r12c1-t24 r1c3-t24">
<p>36</p>
</td>
<td class="cellalignment833" headers="r12c1-t24 r1c4-t24">
<p>(NOT USED)</p>
</td>
<td class="cellalignment833" headers="r12c1-t24 r1c5-t24">
<p>61</p>
</td>
<td class="cellalignment833" headers="r12c1-t24 r1c6-t24">
<p>DROP TRIGGER</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r13c1-t24" headers="r1c1-t24">
<p>12</p>
</td>
<td class="cellalignment833" headers="r13c1-t24 r1c2-t24">
<p>CREATE ROLE</p>
</td>
<td class="cellalignment833" headers="r13c1-t24 r1c3-t24">
<p>37</p>
</td>
<td class="cellalignment833" headers="r13c1-t24 r1c4-t24">
<p>RENAME</p>
</td>
<td class="cellalignment833" headers="r13c1-t24 r1c5-t24">
<p>62</p>
</td>
<td class="cellalignment833" headers="r13c1-t24 r1c6-t24">
<p>ANALYZE TABLE</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r14c1-t24" headers="r1c1-t24">
<p>13</p>
</td>
<td class="cellalignment833" headers="r14c1-t24 r1c2-t24">
<p>CREATE SEQUENCE</p>
</td>
<td class="cellalignment833" headers="r14c1-t24 r1c3-t24">
<p>38</p>
</td>
<td class="cellalignment833" headers="r14c1-t24 r1c4-t24">
<p>COMMENT</p>
</td>
<td class="cellalignment833" headers="r14c1-t24 r1c5-t24">
<p>63</p>
</td>
<td class="cellalignment833" headers="r14c1-t24 r1c6-t24">
<p>ANALYZE INDEX</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r15c1-t24" headers="r1c1-t24">
<p>14</p>
</td>
<td class="cellalignment833" headers="r15c1-t24 r1c2-t24">
<p>ALTER SEQUENCE</p>
</td>
<td class="cellalignment833" headers="r15c1-t24 r1c3-t24">
<p>39</p>
</td>
<td class="cellalignment833" headers="r15c1-t24 r1c4-t24">
<p>AUDIT</p>
</td>
<td class="cellalignment833" headers="r15c1-t24 r1c5-t24">
<p>64</p>
</td>
<td class="cellalignment833" headers="r15c1-t24 r1c6-t24">
<p>ANALYZE CLUSTER</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r16c1-t24" headers="r1c1-t24">
<p>15</p>
</td>
<td class="cellalignment833" headers="r16c1-t24 r1c2-t24">
<p>(NOT USED)</p>
</td>
<td class="cellalignment833" headers="r16c1-t24 r1c3-t24">
<p>40</p>
</td>
<td class="cellalignment833" headers="r16c1-t24 r1c4-t24">
<p>NOAUDIT</p>
</td>
<td class="cellalignment833" headers="r16c1-t24 r1c5-t24">
<p>65</p>
</td>
<td class="cellalignment833" headers="r16c1-t24 r1c6-t24">
<p>CREATE PROFILE</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r17c1-t24" headers="r1c1-t24">
<p>16</p>
</td>
<td class="cellalignment833" headers="r17c1-t24 r1c2-t24">
<p>DROP SEQUENCE</p>
</td>
<td class="cellalignment833" headers="r17c1-t24 r1c3-t24">
<p>41</p>
</td>
<td class="cellalignment833" headers="r17c1-t24 r1c4-t24">
<p>ALTER INDEX</p>
</td>
<td class="cellalignment833" headers="r17c1-t24 r1c5-t24">
<p>66</p>
</td>
<td class="cellalignment833" headers="r17c1-t24 r1c6-t24">
<p>DROP PROFILE</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r18c1-t24" headers="r1c1-t24">
<p>17</p>
</td>
<td class="cellalignment833" headers="r18c1-t24 r1c2-t24">
<p>CREATE SCHEMA</p>
</td>
<td class="cellalignment833" headers="r18c1-t24 r1c3-t24">
<p>42</p>
</td>
<td class="cellalignment833" headers="r18c1-t24 r1c4-t24">
<p>CREATE EXTERNAL DATABASE</p>
</td>
<td class="cellalignment833" headers="r18c1-t24 r1c5-t24">
<p>67</p>
</td>
<td class="cellalignment833" headers="r18c1-t24 r1c6-t24">
<p>ALTER PROFILE</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r19c1-t24" headers="r1c1-t24">
<p>18</p>
</td>
<td class="cellalignment833" headers="r19c1-t24 r1c2-t24">
<p>CREATE CLUSTER</p>
</td>
<td class="cellalignment833" headers="r19c1-t24 r1c3-t24">
<p>43</p>
</td>
<td class="cellalignment833" headers="r19c1-t24 r1c4-t24">
<p>DROP EXTERNAL DATABASE</p>
</td>
<td class="cellalignment833" headers="r19c1-t24 r1c5-t24">
<p>68</p>
</td>
<td class="cellalignment833" headers="r19c1-t24 r1c6-t24">
<p>DROP PROCEDURE</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r20c1-t24" headers="r1c1-t24">
<p>19</p>
</td>
<td class="cellalignment833" headers="r20c1-t24 r1c2-t24">
<p>CREATE USER</p>
</td>
<td class="cellalignment833" headers="r20c1-t24 r1c3-t24">
<p>44</p>
</td>
<td class="cellalignment833" headers="r20c1-t24 r1c4-t24">
<p>CREATE DATABASE</p>
</td>
<td class="cellalignment833" headers="r20c1-t24 r1c5-t24">
<p>69</p>
</td>
<td class="cellalignment833" headers="r20c1-t24 r1c6-t24">
<p>(NOT USED)</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r21c1-t24" headers="r1c1-t24">
<p>20</p>
</td>
<td class="cellalignment833" headers="r21c1-t24 r1c2-t24">
<p>CREATE INDEX</p>
</td>
<td class="cellalignment833" headers="r21c1-t24 r1c3-t24">
<p>45</p>
</td>
<td class="cellalignment833" headers="r21c1-t24 r1c4-t24">
<p>ALTER DATABASE</p>
</td>
<td class="cellalignment833" headers="r21c1-t24 r1c5-t24">
<p>70</p>
</td>
<td class="cellalignment833" headers="r21c1-t24 r1c6-t24">
<p>ALTER RESOURCE COST</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r22c1-t24" headers="r1c1-t24">
<p>21</p>
</td>
<td class="cellalignment833" headers="r22c1-t24 r1c2-t24">
<p>DROP INDEX</p>
</td>
<td class="cellalignment833" headers="r22c1-t24 r1c3-t24">
<p>46</p>
</td>
<td class="cellalignment833" headers="r22c1-t24 r1c4-t24">
<p>CREATE ROLLBACK SEGMENT</p>
</td>
<td class="cellalignment833" headers="r22c1-t24 r1c5-t24">
<p>71</p>
</td>
<td class="cellalignment833" headers="r22c1-t24 r1c6-t24">
<p>CREATE SNAPSHOT LOG</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r23c1-t24" headers="r1c1-t24">
<p>22</p>
</td>
<td class="cellalignment833" headers="r23c1-t24 r1c2-t24">
<p>DROP CLUSTER</p>
</td>
<td class="cellalignment833" headers="r23c1-t24 r1c3-t24">
<p>47</p>
</td>
<td class="cellalignment833" headers="r23c1-t24 r1c4-t24">
<p>ALTER ROLLBACK SEGMENT</p>
</td>
<td class="cellalignment833" headers="r23c1-t24 r1c5-t24">
<p>72</p>
</td>
<td class="cellalignment833" headers="r23c1-t24 r1c6-t24">
<p>ALTER SNAPSHOT LOG</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r24c1-t24" headers="r1c1-t24">
<p>23</p>
</td>
<td class="cellalignment833" headers="r24c1-t24 r1c2-t24">
<p>VALIDATE INDEX</p>
</td>
<td class="cellalignment833" headers="r24c1-t24 r1c3-t24">
<p>48</p>
</td>
<td class="cellalignment833" headers="r24c1-t24 r1c4-t24">
<p>DROP ROLLBACK SEGMENT</p>
</td>
<td class="cellalignment833" headers="r24c1-t24 r1c5-t24">
<p>73</p>
</td>
<td class="cellalignment833" headers="r24c1-t24 r1c6-t24">
<p>DROP SNAPSHOT LOG</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r25c1-t24" headers="r1c1-t24">
<p>24</p>
</td>
<td class="cellalignment833" headers="r25c1-t24 r1c2-t24">
<p>CREATE PROCEDURE</p>
</td>
<td class="cellalignment833" headers="r25c1-t24 r1c3-t24">
<p>49</p>
</td>
<td class="cellalignment833" headers="r25c1-t24 r1c4-t24">
<p>CREATE TABLESPACE</p>
</td>
<td class="cellalignment833" headers="r25c1-t24 r1c5-t24">
<p>74</p>
</td>
<td class="cellalignment833" headers="r25c1-t24 r1c6-t24">
<p>CREATE SNAPSHOT</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r26c1-t24" headers="r1c1-t24">
<p>25</p>
</td>
<td class="cellalignment833" headers="r26c1-t24 r1c2-t24">
<p>ALTER PROCEDURE</p>
</td>
<td class="cellalignment833" headers="r26c1-t24 r1c3-t24">
<p>50</p>
</td>
<td class="cellalignment833" headers="r26c1-t24 r1c4-t24">
<p>ALTER TABLESPACE</p>
</td>
<td class="cellalignment833" headers="r26c1-t24 r1c5-t24">
<p>75</p>
</td>
<td class="cellalignment833" headers="r26c1-t24 r1c6-t24">
<p>ALTER SNAPSHOT</p>
</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r27c1-t24" headers="r1c1-t24">
<p>--</p>
</td>
<td class="cellalignment833" headers="r27c1-t24 r1c2-t24">
<p>--</p>
</td>
<td class="cellalignment833" headers="r27c1-t24 r1c3-t24">
<p>--</p>
</td>
<td class="cellalignment833" headers="r27c1-t24 r1c4-t24">
<p>--</p>
</td>
<td class="cellalignment833" headers="r27c1-t24 r1c5-t24">
<p>76</p>
</td>
<td class="cellalignment833" headers="r27c1-t24 r1c6-t24">
<p>DROP</p>
<p>SNAPSHOT</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" -->
<p>The length parameter (<span class="italic">stmlen</span>) returns a zero if an error occurred. Possible error conditions are:</p>
<ul>
<li>
<p>No SQL statement has been parsed.</p>
</li>
<li>
<p>You passed an invalid parameter (for example, a negative length parameter).</p>
</li>
<li>
<p>An internal exception occurred in SQLLIB.</p>
</li>
</ul>
<div id="LNPCC3548" class="sect2"><a id="sthref1284"></a>
<h3 class="sect2">Restrictions</h3>
<p><code>SQLStmtGetText()</code> does not return the text for statements that contain the following commands:</p>
<ul>
<li>
<p>CONNECT</p>
</li>
<li>
<p>COMMIT</p>
</li>
<li>
<p>ROLLBACK</p>
</li>
<li>
<p>FETCH</p>
</li>
</ul>
<p>There are no SQL function codes for these commands.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3549" class="sect2"><a id="sthref1285"></a>
<h3 class="sect2">Example Program<a id="sthref1286"></a></h3>
<p>The example program <code>sqlvcp.pc</code>, is available in the <code>demo</code> directory. It demonstrates how you can use the <code>sqlgls()</code> function.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_04dat.htm#g52211">Chapter 4, &#34;Datatypes and Host Variables&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i6814"></a>
<div id="LNPCC3550" class="sect1">
<h2 class="sect1">Using the Oracle Communications Area (ORACA)</h2>
<p>The SQLCA handles standard SQL communications The ORACA handles Oracle communications. When you need more information about runtime errors and status changes than the SQLCA provides, use the ORACA. It contains an extended set of diagnostic tools. However, use of the ORACA is optional because it adds to runtime overhead.<a id="sthref1287"></a></p>
<p>Besides helping you to diagnose problems, the ORACA lets you monitor your program&#39;s use of Oracle resources such as the SQL Statement Executor and the cursor cache.</p>
<p>Your program can have more than one ORACA. For example, it might have one global ORACA and several local ones. Access to a local ORACA is limited by its scope within the program. Oracle returns information only to the ORACA that is in scope.</p>
<div id="LNPCC3551" class="sect2"><a id="sthref1288"></a>
<h3 class="sect2">Declaring the ORACA</h3>
<p>To declare the ORACA, copy it into your program with the INCLUDE statement or the <span class="bold">#include</span> preprocessor directive, as follows:</p>
<pre>EXEC SQL INCLUDE ORACA; 
</pre>
<p>or</p>
<pre>#include &lt;oraca.h&gt; 
</pre>
<p>If your ORACA must be of the <span class="bold">extern</span> storage class, define ORACA_STORAGE_CLASS in your program as follows:</p>
<pre>#define ORACA_STORAGE_CLASS extern
</pre>
<p>If the program uses a Declare Section, the ORACA must be defined <span class="italic">outside</span> it.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3552" class="sect2"><a id="sthref1289"></a>
<h3 class="sect2">Enabling the ORACA</h3>
<p>To enable the ORACA, you must specify the ORACA option, either on the command line with</p>
<pre>ORACA=YES 
</pre>
<p>or inline with</p>
<pre>EXEC ORACLE OPTION (ORACA=YES); 
</pre>
<p>Then, you must choose appropriate runtime options by setting flags in the ORACA.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3553" class="sect2"><a id="sthref1290"></a>
<h3 class="sect2">ORACA Contents</h3>
<p>The ORACA contains option settings, system statistics, and extended diagnostics such as</p>
<ul>
<li>
<p>SQL statement text (you can specify when to save the text)</p>
</li>
<li>
<p>The name of the file in which an error occurred (useful when using subroutines)</p>
</li>
<li>
<p>Location of the error in a file</p>
</li>
<li>
<p>Cursor cache errors and statistics</p>
</li>
</ul>
<p>A partial listing of <code>oraca.h</code> is</p>
<pre>/*
NAME
  ORACA : Oracle Communications Area.

  If the symbol ORACA_NONE is defined, then there will be no ORACA
  *variable*, although there will still be a struct defined.  This
  macro should not normally be defined in application code.

  If the symbol ORACA_INIT is defined, then the ORACA will be
  statically initialized. Although this is not necessary in order
  to use the ORACA, it is a good pgming practice not to have
  unitialized variables. However, some C compilers/operating systems
  don&#39;t allow automatic variables to be init&#39;d in this manner. Therefore,
  if you are INCLUDE&#39;ing the ORACA in a place where it would be
  an automatic AND your C compiler/operating system doesn&#39;t allow this style
  of initialization, then ORACA_INIT should be left undefined --
  all others can define ORACA_INIT if they wish.
*/
 
#ifndef  ORACA
#define  ORACA      1
 
struct    oraca
{
    char oracaid[8];   /* Reserved               */
    long oracabc;      /* Reserved               */
 
/*    Flags which are setable by User. */
 
   long  oracchf;      /* &lt;&gt; 0 if &#34;check cur cache consistncy&#34;*/
   long  oradbgf;      /* &lt;&gt; 0 if &#34;do DEBUG mode checking&#34;    */
   long  orahchf;      /* &lt;&gt; 0 if &#34;do Heap consistency check&#34; */
   long  orastxtf;     /* SQL stmt text flag            */
#define  ORASTFNON 0   /* = don&#39;t save text of SQL stmt       */
#define  ORASTFERR 1   /* = only save on SQLERROR         */
#define  ORASTFWRN 2   /* = only save on SQLWARNING/SQLERROR  */
#define  ORASTFANY 3      /* = always save             */
    struct
      {
  unsigned short orastxtl;
  char  orastxtc[70];
      } orastxt;         /* text of last SQL stmt          */
    struct
      {
  unsigned short orasfnml;
  char      orasfnmc[70];
      } orasfnm;        /* name of file containing SQL stmt    */
  long   oraslnr;        /* line nr-within-file of SQL stmt     */
  long   orahoc;         /* highest max open OraCurs requested  */
  long   oramoc;         /* max open OraCursors required         */
  long   oracoc;         /* current OraCursors open         */
  long   oranor;         /* nr of OraCursor re-assignments      */
  long   oranpr;         /* nr of parses               */
  long   oranex;         /* nr of executes            */
    };

#ifndef ORACA_NONE

#ifdef ORACA_STORAGE_CLASS
ORACA_STORAGE_CLASS struct oraca oraca
#else
struct oraca oraca
#endif
#ifdef ORACA_INIT
    =
    {
    {&#39;O&#39;,&#39;R&#39;,&#39;A&#39;,&#39;C&#39;,&#39;A&#39;,&#39; &#39;,&#39; &#39;,&#39; &#39;},
    sizeof(struct oraca),
    0,0,0,0,
    {0,{0}},
    {0,{0}},
    0,
    0,0,0,0,0,0
    }
#endif
    ;

#endif

#endif
/* end oraca.h */
</pre></div>
<!-- class="sect2" -->
<div id="LNPCC3554" class="sect2"><a id="sthref1291"></a>
<h3 class="sect2">Choosing Runtime Options</h3>
<p>The ORACA includes several option flags. Setting these flags by assigning them nonzero values provides the ability to <a id="sthref1292"></a> <a id="sthref1293"></a></p>
<ul>
<li>
<p>Save the text of SQL statements</p>
</li>
<li>
<p>Enable DEBUG operations</p>
</li>
<li>
<p>Check cursor cache consistency (the <span class="italic">cursor cache</span> is a continuously updated area of memory used for cursor management)</p>
</li>
<li>
<p>Check heap consistency (the <span class="italic">heap</span> is an area of memory reserved for dynamic variables)</p>
</li>
<li>
<p>Gather cursor statistics</p>
</li>
</ul>
<p>The following descriptions will help you choose the options you need.</p>
</div>
<!-- class="sect2" -->
<div id="LNPCC3555" class="sect2"><a id="sthref1294"></a>
<h3 class="sect2">Structure of the ORACA</h3>
<p>This section describes the structure of the ORACA, its components, and the values they can store.</p>
<div id="LNPCC3556" class="sect3"><a id="sthref1295"></a>
<h4 class="sect3"><span class="italic">oracaid</span></h4>
<p>This string component is initialized to &#34;ORACA&#34; to identify the Oracle Communications Area.<a id="sthref1296"></a></p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3557" class="sect3"><a id="sthref1297"></a>
<h4 class="sect3"><span class="italic">oracabc</span></h4>
<p>This integer component holds the length, in bytes, of the ORACA data structure.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3558" class="sect3"><a id="sthref1298"></a>
<h4 class="sect3"><span class="italic">oracchf</span></h4>
<p>If the master DEBUG flag (<span class="italic">oradbgf)</span> is set, this flag enables the gathering of cursor cache statistics and lets you check the cursor cache for consistency before every cursor operation.</p>
<p>The Oracle runtime library does the consistency checking and might issue error messages, which are listed in the manua<a class="olink ERRMG" href="../ERRMG/toc.htm"><span class="italic">l Oracle Database Error Messages</span></a>. They are returned to the SQLCA just like Oracle error messages.</p>
<p>This flag has the following settings:</p>
<ul>
<li>
<p>Disable cache consistency checking (the default).</p>
</li>
<li>
<p>Enable cache consistency checking.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="LNPCC3559" class="sect3"><a id="sthref1299"></a>
<h4 class="sect3"><span class="italic">oradbgf</span></h4>
<p>This master flag lets you choose all the DEBUG options. It has the following settings:</p>
<p>Disable all DEBUG operations (the default).</p>
<p>Enable all DEBUG operations.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3560" class="sect3"><a id="sthref1300"></a>
<h4 class="sect3"><span class="italic">orahchf</span></h4>
<p>If the master DEBUG flag (<span class="italic">oradbgf</span>) is set, this flag tells the Oracle runtime library to check the heap for consistency every time the precompiler dynamically allocates or frees memory. This is useful for detecting program bugs that upset memory.</p>
<p>This flag must be set before the CONNECT command is issued and, once set, cannot be cleared; subsequent change requests are ignored. It has the following settings:</p>
<ul>
<li>
<p>Disable heap consistency checking (the default).</p>
</li>
<li>
<p>Enable heap consistency checking.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="LNPCC3561" class="sect3"><a id="sthref1301"></a>
<h4 class="sect3"><span class="italic">orastxtf</span></h4>
<p>This flag lets you specify when the text of the current SQL statement is saved. It has the following settings:</p>
<ul>
<li>
<p>Never save the SQL statement text (the default).</p>
</li>
<li>
<p>Save the SQL statement text on SQLERROR only.</p>
</li>
<li>
<p>Save the SQL statement text on SQLERROR or SQLWARNING.</p>
</li>
<li>
<p>Always save the SQL statement text.</p>
</li>
</ul>
<p>The SQL statement text is saved in the ORACA embedded struct named <span class="italic">orastxt</span>.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3562" class="sect3"><a id="sthref1302"></a>
<h4 class="sect3">Diagnostics</h4>
<p>The ORACA provides an enhanced set of diagnostics; the following variables help you to locate errors quickly:</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3563" class="sect3"><a id="sthref1303"></a>
<h4 class="sect3"><span class="italic">orastxt</span></h4>
<p>This embedded struct helps you find faulty SQL statements. It lets you save the text of the last SQL statement parsed by Oracle. It contains the following two components:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="components of orastxt" summary="Components" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t26">Components</th>
<th class="cellalignment832" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t26" headers="r1c1-t26">orastxtl</td>
<td class="cellalignment833" headers="r2c1-t26 r1c2-t26">This integer component holds the length of the current SQL statement.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t26" headers="r1c1-t26">orastxtc</td>
<td class="cellalignment833" headers="r3c1-t26 r1c2-t26">This string component holds the text of the current SQL statement. At most, the first 70 characters of text are saved. The string is not null terminated. Use the oratxtl length component when printing the string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Statements parsed by the precompiler, such as CONNECT, FETCH, and COMMIT, are <span class="italic">not</span> saved in the ORACA.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3564" class="sect3"><a id="sthref1304"></a>
<h4 class="sect3"><span class="italic">orasfnm</span></h4>
<p>This embedded struct identifies the file containing the current SQL statement and so helps you find errors when multiple files are precompiled for one application. It contains the following two components:</p>
<div class="inftblinformal">
<table class="cellalignment834" title="components of orasfnm" summary="Components" dir="ltr">
<thead>
<tr class="cellalignment825">
<th class="cellalignment832" id="r1c1-t27">Components</th>
<th class="cellalignment832" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment825">
<td class="cellalignment833" id="r2c1-t27" headers="r1c1-t27">orasfnml</td>
<td class="cellalignment833" headers="r2c1-t27 r1c2-t27">This integer component holds the length of the filename stored in orasfnmc.</td>
</tr>
<tr class="cellalignment825">
<td class="cellalignment833" id="r3c1-t27" headers="r1c1-t27">orasfnmc</td>
<td class="cellalignment833" headers="r3c1-t27 r1c2-t27">This string component holds the filename. At most, the first 70 characters are stored.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNPCC3565" class="sect3"><a id="sthref1305"></a>
<h4 class="sect3"><span class="italic">oraslnr</span></h4>
<p>This integer component identifies the line at (or near) which the current SQL statement can be found.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3566" class="sect3"><a id="sthref1306"></a>
<h4 class="sect3">Cursor Cache Statistics</h4>
<p>If the master DEBUG flag (<span class="italic">oradbgf</span>) and the cursor cache flag (<span class="italic">oracchf</span>) are set, the following variables let you gather cursor cache statistics. They are automatically set by every COMMIT or ROLLBACK command your program issues.<a id="sthref1307"></a></p>
<p>Internally, there is a set of these variables for each CONNECTed database. The current values in the ORACA pertain to the database against which the last COMMIT or ROLLBACK was executed:</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3567" class="sect3"><a id="sthref1308"></a>
<h4 class="sect3"><span class="italic">orahoc</span></h4>
<p>This integer component records the highest value to which MAXOPENCURSORS was set during program execution.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3568" class="sect3"><a id="sthref1309"></a>
<h4 class="sect3"><span class="italic">oramoc</span></h4>
<p>This integer component records the maximum number of open Oracle cursors required by your program. This number can be higher than <span class="italic">orahoc</span> if MAXOPENCURSORS was set too low, which forced the precompiler to extend the cursor cache.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3569" class="sect3"><a id="sthref1310"></a>
<h4 class="sect3"><span class="italic">oracoc</span></h4>
<p>This integer component records the current number of open Oracle cursors required by your program.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3570" class="sect3"><a id="sthref1311"></a>
<h4 class="sect3"><span class="italic">oranor</span></h4>
<p>This integer component records the number of cursor cache reassignments required by your program. This number shows the degree of &#34;thrashing&#34; in the cursor cache and should be kept as low as possible.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3571" class="sect3"><a id="sthref1312"></a>
<h4 class="sect3"><span class="italic">oranpr</span></h4>
<p>This integer component records the number of SQL statement parses required by your program.</p>
</div>
<!-- class="sect3" -->
<div id="LNPCC3572" class="sect3"><a id="sthref1313"></a>
<h4 class="sect3"><span class="italic">oranex</span></h4>
<p>This integer component records the number of SQL statement executions required by your program. The ratio of this number to the <span class="italic">oranpr</span> number should be kept as high as possible. In other words, avoid unnecessary re-parsing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_actun.htm#CHEBGDGB">Appendix B, &#34; Performance Tuning&#34;</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNPCC3573" class="sect2"><a id="sthref1314"></a>
<h3 class="sect2">ORACA Example</h3>
<p>The following program prompts for a department number, inserts the name and salary of each employee in that department into one of two tables, then displays diagnostic information from the ORACA. This program is available online in the <code>demo</code> directory, as <code>oraca.pc</code>.<a id="sthref1315"></a><a id="sthref1316"></a><a id="sthref1317"></a></p>
<pre>/* oraca.pc
 * This sample program demonstrates how to
 * use the ORACA to determine various performance
 * parameters at runtime.
 */
#include &lt;stdio.h&gt; 
#include &lt;string.h&gt;
#include &lt;sqlca.h&gt;
#include &lt;oraca.h&gt; 

EXEC SQL BEGIN DECLARE SECTION;
char *userid = &#34;SCOTT/TIGER&#34;; 
char  emp_name[21];
int   dept_number; 
float salary; 
char SQLSTATE[6];
EXEC SQL END DECLARE SECTION;

void sql_error(); 

main() 
{ 
    char temp_buf[32];

    EXEC SQL WHENEVER SQLERROR DO sql_error(&#34;Oracle error&#34;);
    EXEC SQL CONNECT :userid; 
    
    EXEC ORACLE OPTION (ORACA=YES);

    oraca.oradbgf  = 1;             /* enable debug operations */ 
    oraca.oracchf  = 1;      /* gather cursor cache statistics */ 
    oraca.orastxtf = 3;       /* always save the SQL statement */ 

    printf(&#34;Enter department number: &#34;); 
    gets(temp_buf);
    dept_number = atoi(temp_buf);

    
    EXEC SQL DECLARE emp_cursor CURSOR FOR 
      SELECT ename, sal + NVL(comm,0) AS sal_comm
        FROM emp 
        WHERE deptno = :dept_number
        ORDER BY sal_comm DESC;
    EXEC SQL OPEN emp_cursor; 
    EXEC SQL WHENEVER NOT FOUND DO sql_error(&#34;End of data&#34;);
    
    for (;;) 
    { 
        EXEC SQL FETCH emp_cursor INTO :emp_name, :salary; 
        printf(&#34;%.10s\n&#34;, emp_name);
        if (salary &lt; 2500) 
            EXEC SQL INSERT INTO pay1 VALUES (:emp_name, :salary); 
        else 
            EXEC SQL INSERT INTO pay2 VALUES (:emp_name, :salary);    
    } 
} 

void 
sql_error(errmsg)
char *errmsg;
{ 
    char buf[6];

    strcpy(buf, SQLSTATE);
    EXEC SQL WHENEVER SQLERROR CONTINUE; 
    EXEC SQL COMMIT WORK RELEASE; 
    
    if (strncmp(errmsg, &#34;Oracle error&#34;, 12) == 0)
        printf(&#34;\n%s, sqlstate is %s\n\n&#34;, errmsg, buf);
    else
        printf(&#34;\n%s\n\n&#34;, errmsg);

    printf(&#34;Last SQL statement: %.*s\n&#34;, 
    oraca.orastxt.orastxtl, oraca.orastxt.orastxtc); 
    printf(&#34;\nAt or near line number %d\n&#34;, oraca.oraslnr); 
    printf
(&#34;\nCursor Cache Statistics\n------------------------\n&#34;); 
    printf
(&#34;Maximum value of MAXOPENCURSORS:    %d\n&#34;, oraca.orahoc); 
    printf
(&#34;Maximum open cursors required:      %d\n&#34;, oraca.oramoc); 
    printf
(&#34;Current number of open cursors:     %d\n&#34;, oraca.oracoc); 
    printf
(&#34;Number of cache reassignments:      %d\n&#34;, oraca.oranor); 
    printf
(&#34;Number of SQL statement parses:     %d\n&#34;, oraca.oranpr); 
    printf
(&#34;Number of SQL statement executions: %d\n&#34;, oraca.oranex); 
    exit(1); 
} 
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment824">
<tr>
<td class="cellalignment833">
<table class="cellalignment829">
<tr>
<td class="cellalignment828"><a href="pc_08arr.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment828"><a href="pc_10opt.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment836">
<table class="cellalignment827">
<tr>
<td class="cellalignment828"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment828"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment828"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment828"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment828"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment828"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>