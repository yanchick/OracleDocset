<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-78806"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Programming%20with%20Microsoft%20Transaction%20Server%20and%20an%20Oracle%20Database"></a><title>Programming with Microsoft Transaction Server and an Oracle Database</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-08-21T15:13:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Services for Microsoft Transaction Server Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E18595-03"/>
<meta name="dcterms.isVersionOf" content="NTMTS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="recovery.htm" title="Previous" type="text/html"/>
<link rel="Next" href="perftune.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E18595-03.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/12</span> <!-- End Header -->
<div id="NTMTS005" class="chapter"><a id="BEJCGIDB"></a>
<h1 class="chapter"><span class="secnum">4</span> Programming with Microsoft Transaction Server and an Oracle Database</h1>
<p>This chapter describes how to program with <a href="glossary.htm#CBAIJAFH"><span class="xrefglossterm">Microsoft Transaction Server</span></a> and an Oracle Database.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BEJCGBGG">COM Component Integration in a Transaction</a></p>
</li>
<li>
<p><a href="#i1006362">Microsoft Transaction Server Application Development</a></p>
</li>
<li>
<p><a href="#i1006563">OCI Integration with Microsoft Transaction Server</a></p>
</li>
<li>
<p><a href="#i1007399">ODBC Integration with Microsoft Transaction Server Overview</a></p>
</li>
</ul>
<p>OraMTS also provides integration with Oracle Provider for OLE DB, and Oracle Data Provider for .NET.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink OLEDB" href="../OLEDB/toc.htm"><span class="italic">Oracle Provider for OLE DB Developer&#39;s Guide for Microsoft Windows</span></a> for information on using Oracle Provider for OLE DB with MTS</p>
</li>
<li>
<p><a class="olink ODPNT" href="../ODPNT/toc.htm"><span class="italic">Oracle Data Provider for .NET Developer&#39;s Guide for Microsoft Windows</span></a> for information on using Oracle Data Provider for .NET with MTS</p>
</li>
</ul>
</div>
<a id="BEJCGBGG"></a>
<div id="NTMTS159" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">COM Component Integration in a Transaction</h2>
<p>The focal point of the transaction process is a component of Microsoft Transaction Server called <a href="glossary.htm#CBAFFEFA"><span class="xrefglossterm">Microsoft Distributed Transaction Coordinator (MS DTC)</span></a>. When a client computer starts a business method on a transactional component, Microsoft Transaction Server begins a transaction coordinated by the MS DTC. The Oracle connection pooling layer enables the database to act as a <a href="glossary.htm#CBAGDBEA"><span class="xrefglossterm">resource manager (RM)</span></a> in the MS DTC-coordinated transaction. <a href="#BEJCBEED">Figure 4-1</a> illustrates this transactional model.</p>
<div id="NTMTS160" class="figure">
<p class="titleinfigure"><a id="BEJCBEED"></a>Figure 4-1 Component Integration in a Transaction</p>
<img width="491" height="506" src="img/ntmts011.gif" alt="Description of Figure 4-1 follows"/><br/>
<a id="sthref116" href="img_text/ntmts011.htm">Description of &#34;Figure 4-1 Component Integration in a Transaction&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a id="NTMTS161"></a><a id="sthref117"></a><span class="subhead3">Client Computer&nbsp;</span>The client computer activates the application components on the <a href="#BEJGHEGI">MTS Application Server</a> through a Web browser or through the <a href="glossary.htm#BGBFAAJB"><span class="xrefglossterm">component object model (COM)</span></a> /<a href="glossary.htm#BGBCFDBD"><span class="xrefglossterm">distributed component object model (DCOM)</span></a>.</p>
<p><a id="BEJGHEGI"></a><a id="NTMTS162"></a><span class="subhead3">MTS Application Server&nbsp;</span>The MTS application server consists of the services that the Windows operating service provides to host transactional application components that a client computer can activate, either indirectly through a Web browser or directly through the <a href="glossary.htm#BGBFAAJB"><span class="xrefglossterm">component object model (COM)</span></a> /<a href="glossary.htm#BGBCFDBD"><span class="xrefglossterm">distributed component object model (DCOM)</span></a>. In response to client requests, the application server invokes the COM components. The invocations are performed within the scope of transactions where required</p>
<p><a id="NTMTS163"></a><a id="sthref118"></a><span class="subhead3">Transactional Application Logic COM Components&nbsp;</span>Three primary responsibilities:</p>
<ul>
<li>
<p>Embed the business logic. If a component is transactional, Microsoft Transaction Server starts a transaction for every method invocation on that component.</p>
</li>
<li>
<p>Acquire pooled connections to a Oracle Database through the Oracle resource dispenser and <a href="glossary.htm#CBAEGJCG"><span class="xrefglossterm">Oracle Call Interface (OCI)</span></a>, <a href="glossary.htm#CBACJCBG"><span class="xrefglossterm">Oracle Open Database Connectivity (ODBC) Driver</span></a>, or <a href="glossary.htm#CBAHFGAI"><span class="xrefglossterm">Oracle Provider for OLE DB</span></a>.</p>
</li>
<li>
<p>Decide the outcome of the operation by notifying Microsoft Transaction Server of its decision to commit or terminate the changes to all RMs.</p>
</li>
</ul>
<p><a id="NTMTS164"></a><a id="sthref119"></a><span class="subhead3">Oracle ODBC Driver, Oracle Provider for OLE DB, and OCI&nbsp;</span>Two primary responsibilities:</p>
<ul>
<li>
<p>Obtain a service context to the Oracle Database through the OCI connection pooling component.</p>
</li>
<li>
<p>Provide connection pooling resources, if necessary (through Oracle Provider for OLE DB or Oracle ODBC Driver). The Oracle ODBC Driver provides pooled ODBC connections. Oracle Provider for OLE DB provides pooled data source objects.</p>
</li>
</ul>
<p><a id="NTMTS165"></a><a id="sthref120"></a><span class="subhead3">OCI Connection Pool&nbsp;</span>Three primary responsibilities:</p>
<ul>
<li>
<p>Enlists the RM (Oracle Database) in the component&#39;s Microsoft Transaction Server transaction.</p>
</li>
<li>
<p>Starts an Oracle global transaction corresponding to the Microsoft Transaction Server transaction of which the component is a part.</p>
</li>
<li>
<p>Acts as a resource dispenser to perform client-side connection pooling.</p>
</li>
</ul>
<p><a id="NTMTS166"></a><a id="sthref121"></a><span class="subhead3">Oracle Net&nbsp;</span>Provides connectivity in distributed, heterogeneous computing environments.</p>
<p><a id="NTMTS167"></a><a id="sthref122"></a><span class="subhead3">Oracle MTS Recovery Service&nbsp;</span>Recovers in-doubt Oracle transactions that originated from the host computer and are related to the Microsoft Transaction Server.</p>
<p><a id="NTMTS168"></a><a id="sthref123"></a><span class="subhead3">Database Recovery Job&nbsp;</span>Detects in-doubt DTC transactions. This job extracts the recovery service&#39;s endpoint address in the in-doubt transaction&#39;s XID and then requests the outcome of the Microsoft DTC transaction from the recovery service. Ultimately, the job will commit or terminate the in-doubt transaction when it receives the transaction&#39;s outcome.</p>
<p><a id="NTMTS169"></a><a id="sthref124"></a><span class="subhead3">Microsoft DTC&nbsp;</span>Microsoft Distributed Transaction Coordinator is part of Microsoft Transaction Server and has two primary responsibilities:</p>
<ul>
<li>
<p>Commits and terminates transactions using the two-phase commit protocol.</p>
</li>
<li>
<p>Monitors transactions that require recovery. Multiple MS DTCs can be involved in a single transaction. When a transactional Microsoft Transaction Server component on computer A invokes another transactional Microsoft Transaction Server component on computer B, a connection is opened between the MS DTC on computer A and the MS DTC on computer B. When the root MS DTC commits or terminates a transaction, it sends the request through all involved MS DTCs. The transaction request is then passed to the OCI connection pooling/Microsoft Transaction Server integration, which sends it to the database.</p>
</li>
</ul>
<p><a id="NTMTS170"></a><a id="sthref125"></a><span class="subhead3">Oracle Database&nbsp;</span>Acts as an RM for Microsoft Transaction Server. This is the database on which the client transaction request is performed.</p>
</div>
<!-- class="sect1" -->
<a id="i1006362"></a>
<div id="NTMTS171" class="sect1">
<h2 class="sect1">Microsoft Transaction Server Application Development</h2>
<p><a id="i1006367"></a>OCI connection pooling is used to coordinate a transaction in nearly all application programming interfaces. This sections describes how transactions are registered and how OCI connection pooling coordinates them.</p>
<a id="CEGEGFIJ"></a>
<div id="NTMTS172" class="sect2">
<h3 class="sect2">Microsoft Transaction Server Component Registration<a id="sthref126"></a><a id="sthref127"></a></h3>
<p>Application components that run in the Microsoft Transaction Server environment are created as dynamic link libraries (DLLs). Application components are registered with Microsoft Transaction Server using the Microsoft Transaction Server Explorer graphical user interface (GUI) tool.</p>
<div id="NTMTS173" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref128"></a>
<h4 class="sect3">Types of Registration Components</h4>
<p>When you register the application component, you mark it as one of the following types:</p>
<ul>
<li>
<p><span class="bold">Requires a Transaction</span> The component must run in a transaction. If the transaction does not currently exist, Microsoft Transaction Server automatically creates a new transaction for each method invocation on the component.</p>
</li>
<li>
<p><span class="bold">Supports a Transaction</span> The component can run within the client&#39;s transaction. When a new component is created, its context inherits the transaction from the context of the invoking client. If the client does not have a transaction, the new context is also created without one.</p>
</li>
<li>
<p><span class="bold">Requires a New Transaction</span> The component must run within its own transaction. Microsoft Transaction Server automatically creates a new transaction for each method invocation on the component.</p>
</li>
<li>
<p><span class="bold">Does Not Support Transactions</span> The component does not run within a transaction. Each method invocation on the component is performed without a surrounding transaction, regardless of whether the invoking client includes a transaction.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="NTMTS174" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref129"></a>
<h4 class="sect3">Registration of Components</h4>
<p>How you register an application component determines if it runs in a Microsoft Transaction Server-coordinated transaction.</p>
<ul>
<li>
<p>If the application component <span class="bold">runs</span> in a Microsoft Transaction Server-coordinated transaction, the OCI connection pooling is always used and Microsoft Transaction Server and its MS DTC component coordinate the creation, startup, management, and commitment phases of the transaction. Microsoft Transaction Server ensures that all changes made by the component are committed if the transaction succeeds, or are terminated if the transaction fails.</p>
</li>
<li>
<p>If the application component <span class="bold">does not run</span> in a Microsoft Transaction Server-coordinated transaction, the component runs in a Microsoft Transaction Server environment, but the databases that it accesses may or may not take part in MS DTC-coordinated transactions. If the transaction is not MS DTC-coordinated, the client application must create, start, manage, and commit the transaction. OCI connection pooling may be used, depending upon the interface accessing the database (such as Oracle Provider for OLE DB, Oracle ODBC Driver, or others).</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006502"></a>
<div id="NTMTS175" class="sect2">
<h3 class="sect2">Microsoft Transaction Server-Coordinated Component Transaction<a id="sthref130"></a><a id="sthref131"></a></h3>
<p>This section describes how OCI connection pooling, Microsoft Transaction Server, and MS DTC operate with application components in a Microsoft Transaction Server-coordinated transaction environment.</p>
<ol>
<li>
<p>The client API (one of Oracle ODBC Driver, OCI, ODP.NET or Oracle Provider for OLE DB) calls OCI function <code>OraMTSSvcGet()</code> to obtain a service context from the OCI connection pooling component.</p>
</li>
<li>
<p>The OCI connection pooling component enlists the transaction that will be coordinated by the MS DTC component of Microsoft Transaction Server.</p>
<p>The OCI service and environment handles are returned to client applications.</p>
</li>
<li>
<p>The client application:</p>
<ul>
<li>
<p>Performs the database operations.</p>
</li>
<li>
<p>Calls OCI function <code>OraMTSSvcRel()</code> to release the OCI pooling connection obtained at the beginning of the transaction.</p>
</li>
<li>
<p>Calls <code>SetComplete</code> (to commit database operations) or <code>SetAbort</code> (to terminate database operations) on the Microsoft Transaction Server context object associated with the component.</p>
</li>
</ul>
</li>
<li>
<p>MS DTC performs the two-phase commit protocol to prepare and commit or to terminate the transaction. This notifies the OCI connection pooling component and ends the transaction.</p>
</li>
<li>
<p>OCI connection pooling is notified and performs the necessary steps to complete phase one, the prepare phase, and phase two, the commit or terminate phase.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1006530"></a>
<div id="NTMTS176" class="sect2">
<h3 class="sect2">Microsoft DTC-Coordinated <a id="sthref132"></a>Component Transaction<a id="sthref133"></a><a id="sthref134"></a></h3>
<p>This section describes how OCI connection pooling, Microsoft Transaction Server, and MS DTC operate with application components <span class="bold">not running</span> in a Microsoft Transaction Server-coordinated transaction, but using MS DTC.</p>
<ol>
<li>
<p>The client application starts an MS DTC transaction and connects to the Oracle Database. The connection protocol follows one of the following scenarios:</p>
<ul>
<li>
<p>Nonpooled OCI connections are obtained through OCI logon calls such as <code>OCIServerAttach()</code> and <code>OCISessionBegin()</code>. For these connections, the application calls <code>OraMTSEnlCtxGet()</code> to associate the OCI service context with a Microsoft Transaction Server enlistment context.</p>
</li>
<li>
<p>A connection pool is obtained by calling <code>OraMTSSvcGet(..,..,ORAMTS_CFLG_NOIMPLICIT)</code>.</p>
</li>
</ul>
</li>
<li>
<p>The client handles the context in one of the following scenarios:</p>
<ul>
<li>
<p>For nonpooled connections, the client application passes in the enlistment context to <code>OraMTSJoinTxn()</code>.</p>
</li>
<li>
<p>For pooled connections, the client application passes the OCI service context into <code>OraMTSSvcEnlist()</code>.</p>
</li>
</ul>
</li>
<li>
<p>The OCI connection pooling component enlists the connection, either pooled or nonpooled, in the transaction coordinated by the MS DTC component of Microsoft Transaction Server.</p>
</li>
<li>
<p>The client application then:</p>
<ul>
<li>
<p>Performs database operations.</p>
</li>
<li>
<p>Calls <code>OraMTSSvcEnlist()</code> with a <code>NULL</code> transaction reference to de-enlist from an MS DTC coordinated transaction.</p>
<p>For nonpooled connections, <code>OraMTSTxnJoin()</code> is invoked with a <code>NULL</code> transaction reference to perform the de-enlistment.</p>
</li>
<li>
<p>Calls <code>OraMTSSvcRel()</code> to release a pooled connection back to the pool.</p>
<p>For nonpooled connections, the client calls <code>OraMTSEnlCtxRel()</code> to release the enlistment context and then logs off the database.</p>
</li>
<li>
<p>Calls the commit or terminate method on the MS DTC transaction object, such as <code>pTransaction-&gt;Commit()</code> or <code>pTransaction-&gt;Abort()</code>.</p>
</li>
</ul>
</li>
<li>
<p>MS DTC performs the two-phase commit protocol to commit the transaction.</p>
</li>
<li>
<p>OCI connection pooling is notified and performs the necessary steps to complete phase one, the prepare phase, and phase two, the commit or terminate phase.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006563"></a>
<div id="NTMTS177" class="sect1">
<h2 class="sect1">OCI<a id="sthref135"></a><a id="sthref136"></a><a id="sthref137"></a> Integration with Microsoft Transaction Server</h2>
<p><a href="#BEJGDDFA">Example 4-1</a> illustrates how you can integrate the MTS sever with OCI. The only change in code you must make involves obtaining and releasing the OCI service context handle. Both OCI service context handle and environment handle are acquired when you obtain a pooled OCI connection to the database by calling <code>OraMTSSvcGet()</code>. Include the <code>oramts.h</code> header and link with the <code>oramts.lib</code> library. When you are finished, call OCI function <a id="sthref138"></a><a id="sthref139"></a><code>OraMTSSvcRel()</code> to release the service context handle and environment handle. Using <code>OraMTSSvcGet()</code> enables you to receive connection pooling and implicit transaction support if you registered the application component to run in a Microsoft Transaction Server transaction.</p>
<p><a id="sthref140"></a><a id="sthref141"></a>Ensure that for each process, you call <code>OCIInitialize</code> at least once before executing any other OCI calls. This initializes the OCI process environment. In addition, you must pass it the <code>OCI_THREADED</code> flag. If you are using Microsoft Internet Information Server (IIS) and the components are being called as in-process libraries, then <code>OCIInitialize</code> is already called for you. The registry key <code>ORAMTS_OCI_OBJ_MODE</code> has been added. Set the value to 1 to initialize OCI in Object mode; otherwise OCI will initialize in the threaded mode.</p>
<div id="NTMTS178" class="example">
<p class="titleinexample"><a id="BEJGDDFA"></a>Example 4-1 Integration of MTS and OCI</p>
<pre>#include &lt;oci.h&gt; 
#include  &lt;oramts.h&gt; 
#include  &lt;xolehlp.h&gt; 
// other MTS relevant includes ... 
 
// prototype for the error handler. 
BOOL Chekerr(sword swOCIStat, OCIError *OCIErrh); 
 
// MTS component method 
HRESULT OCITestMethod() 
{ 
 IObjectContext *pObjectContext = NULL; 
 OCIEnv    *myenvh = NULL; 
 OCISvcCtx *mysvch = NULL; 
 OCIError  *myerrh = NULL; 
 OCIStnt   *mystmh = NULL; 
 DWORD      dwStat; 
 HRESULT    hRes = S_OK; 
 sword      swOCIStat; 
 BOOL       bCommit = FALSE; 
 char      *lpzStmt = &#34;UPDATE EMP SET SAL = SAL + 1000&#34;; 
 
 // Initialize the OCI environment first -- request OCI_THREADED 
 OCIInitialize(OCI_THREADED, (dvoid*)NULL,NULL,NULL,NULL);  
 // attempt to get a connection to the database through the resource dispenser 
 OraMTSSvcGet( 
&#34;hr&#34;,&#34;<span class="italic">hr_password</span>&#34;,&#34;finprod_db&#34;,&amp;mysvch, &amp;myenvh, ORAMTS_CFLG_ALLDEFAULT);  
 // validate return status 
 if(dwStat != ORAMTS_ERR_NOERROR) 
 { 
   printf(&#34;error: failed to obtain a connection to the database - %ld&#34;, 
dwStat); 
   goto cleanup; 
 } 
 // successful logon and enlistment in the MTS transaction. allocate statement 
 // handles and other handles using the OCI environment handle myenvh .... 
 swOCIStat = OCIHandleAlloc(myenvh, (void *)&amp;myerrh,OCI_HTYPE_ERROR, 0 , NULL); 
 if (Checkerr(swOCIStat, myerrh)) goto cleanup; 
 swOCIStat = OCIHandleAlloc(myenvh, (dvoid *)&amp;mystmh,OCI_HTYPE_STMT, 0,NULL); 
 if (Checkerr(swOCIStat, myerrh)) goto cleanup;
 // prepare a DML statement 
 OCIStmtPrepare(mystmh, myerrh, lpzStmt, lstrlen(lpzStmt), OCI_NTV_SYNTAX, 
OCI_DEFAULT) 
 Checkerr(swOCIStat, myerrh);  
 // execute the statement -- ensure that AUTOCOMMIT is not requested. 
 OCIStmtExecute(mysvch, mystmh, myerrh, 1, 0, NULL, NULL, OCI_DEFAULT); 
 if (Checkerr(swOCIStat, myerrh)) goto cleanup;  
 // all&#39;s well so far choose to go for a commit 
 bCommit = TRUE;  
cleanup: 
 if (mystmh) OCIHandleFree((void*)mystmh, OCI_HTYPE_STMT); 
 if (myerrh  OCIHandleFree((void*)myerrh, OCI_HTYPE_ERROR); 
 if (mysvch) OraMTSSvcRel(mysvch);  
 if (bCommit)  
     pObjectContext-&gt;SetComplete();  
 else 
     pObjectContext-&gt;Abort();   
 return(bCommit ? S_OK : E_FAIL); 
}
</pre></div>
<!-- class="example" -->
<div id="NTMTS179" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref142"></a>
<h3 class="sect2">Integrating COM Components</h3>
<p>There are several scenarios for integrating COM components. COM applications that are not hosted by the Microsoft Transaction Server environment, also known as standalone applications, cannot use declarative transactions through the Microsoft Transaction Server Explorer Microsoft Management Console, but they can use the last three of the scenario described.</p>
<div id="NTMTS180" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref143"></a>
<h4 class="sect3">COM Components Running in an MTS-Coordinated Transaction</h4>
<p>COM components that are running in an MTS-coordinated transactions use OCI connection pooling to implicitly enlist the database in a transaction. The following pseudo-code listing illustrates the use of OCI functions:</p>
<pre>OCIInitialize(OCI_THREADED, ...)
OraMTSSvcGet(..., &amp;OCISvc, ..., ORAMTS_CFLAG_ALLDEFAULT)
...
OraMTSSvcRel(OCISvc)
</pre></div>
<!-- class="sect3" -->
<div id="NTMTS181" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref144"></a>
<h4 class="sect3">Non-Transactional COM Components Running with OCI Connection Pooling</h4>
<p>COM components that are marked as non-transactional and running in an MTS-coordinated transaction use OCI connection pooling <span class="bold">do not enlist</span> the database in a transaction. The following pseudo-code listing illustrates the use of OCI functions:</p>
<pre>OCIInitialize(OCI_THREADED, ...)
OraMTSSvcGet(..., &amp;OCISvc, ..., ORAMTS_CFLAG_NOIMPLICIT)
...
OraMTSSvcRel(OCISvc)
</pre></div>
<!-- class="sect3" -->
<div id="NTMTS182" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref145"></a>
<h4 class="sect3">COM Components Using MS DTC and OCI Connection Pooling</h4>
<p>COM components that are not running in an MTS-coordinated transaction use MS DTC with OCI connection pooling to explicitly enlist the database in a transaction. The following pseudo-code listing illustrates the use of OCI functions:</p>
<pre>OCIInitialize(OCI_THREADED, ...)
DTCGetTransactionManager(...)
BeginTransaction(..., &amp;transaction)
OraMTSSvcGet(..., &amp;OCISvc, ..., ORAMTS_CFLAG_NOIMPLICIT)
OraMTSSvcEnlist(OCISvc, ..., transaction, ...)
...
OraMTSvcEnlist(OCISvc, ..., NULL, ...)
OraMTSSvcRel(OCISvc)
</pre></div>
<!-- class="sect3" -->
<div id="NTMTS183" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref146"></a>
<h4 class="sect3">COM Components Using MS DTC and Nonpooling OCI Connection</h4>
<p>COM components that are not running in an MTS-coordinated transaction use MS DTC with a non-pooling OCI connection to explicitly enlist the database in a transaction. The following pseudo-code listing illustrates the use of OCI functions:</p>
<pre>OCIInitialize(OCI_THREADED, ...)
OCI to get connected
OraMTSEnlCtxGET
DTCGetTransactionManager(...)
BeginTransaction(..., &amp;transaction)
OraMTSJoinTxn (OCISvc, ..., transaction, ...)
...
OraMTSJoinTxn
...
OraMTSEnlCtxRel()
OCI to logoff
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006616"></a>
<div id="NTMTS184" class="sect2">
<h3 class="sect2">Using OCI Functions</h3>
<p>This section details the OCI functions discussed earlier in this section. <a href="#BEJGEJFD">Table 4-1</a> summarizes these functions.</p>
<div id="NTMTS185" class="tblformal">
<p class="titleintable"><a id="sthref147"></a><a id="BEJGEJFD"></a>Table 4-1 Summary of OCI Functions for Integrating MTS and Oracle Database</p>
<table class="cellalignment2506" title="Summary of OCI Functions for Integrating MTS and Oracle Database" summary="This table lists OCI function in the first column, and provides a brief description of the function in the second column." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t3">OCI Function</th>
<th class="cellalignment2507" id="r1c2-t3">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#i1006742">OraMTSSvcGet()</a></p>
</td>
<td class="cellalignment2503" headers="r2c1-t3 r1c2-t3">
<p>Obtains a pooled connection from the OCI connection pool.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#i1006918">OraMTSSvcRel()</a></p>
</td>
<td class="cellalignment2503" headers="r3c1-t3 r1c2-t3">
<p>Releases a pooled OCI connection, OCI service context, back to the connection pool.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#i1006965">OraMTSSvcEnlist()</a></p>
</td>
<td class="cellalignment2503" headers="r4c1-t3 r1c2-t3">
<p>Enlists or de-enlists an OCI connection in a transaction coordinated by MS DTC.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#i1007043">OraMTSSvcEnlistEx()</a></p>
</td>
<td class="cellalignment2503" headers="r5c1-t3 r1c2-t3">
<p>Enlists an OCI connection or service context in an MS DTC transaction.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#i1007117">OraMTSEnlCtxGet()</a></p>
</td>
<td class="cellalignment2503" headers="r6c1-t3 r1c2-t3">
<p>Creates an enlistment context for a nonpooled OCI connection.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#i1007218">OraMTSEnlCtxRel()</a></p>
</td>
<td class="cellalignment2503" headers="r7c1-t3 r1c2-t3">
<p>Eliminates a previously set up enlistment context for a nonpooled OCI connection.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#i1007259">OraMTSJoinTxn()</a></p>
</td>
<td class="cellalignment2503" headers="r8c1-t3 r1c2-t3">
<p>Enlists a nonpooled OCI connection in an MS DTC transaction.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#i1007305">OraMTSTransTest()</a></p>
</td>
<td class="cellalignment2503" headers="r9c1-t3 r1c2-t3">
<p>Tests if you are running inside a Microsoft Transaction Server-started transaction.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#i1007335">OraMTSOCIErrGet()</a></p>
</td>
<td class="cellalignment2503" headers="r10c1-t3 r1c2-t3">
<p>Retrieves the OCI error code and message text.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i1006742"></a>
<div id="NTMTS186" class="sect2">
<h3 class="sect2">OraMTSSvcGet() <a id="sthref148"></a><a id="sthref149"></a><a id="sthref150"></a><a id="sthref151"></a><a id="sthref152"></a><a id="sthref153"></a></h3>
<p>Obtains a pooled connection, also known as an OCI service context, from the OCI connection pool. The pooled connection includes an OCI service context handle and an OCI environment handle.</p>
<p class="subhead2"><a id="NTMTS187"></a>Syntax<a id="sthref154"></a></p>
<pre>DWORD  OraMTSSvcGet( 
</pre>
<pre>                 text*       lpUname,
                 text*       lpPsswd,
                 text*       lpDbnam,
                 OCISvcCtx** pOCISvc,
                 OCIEnv**    pOCIEnv,
                 ub4         dwConFlgs);
</pre>
<p class="subhead2"><a id="NTMTS188"></a>Parameters<a id="sthref155"></a><a id="sthref156"></a></p>
<div id="NTMTS189" class="tblformal">
<p class="titleintable"><a id="sthref157"></a><a id="g1018785"></a>Table 4-2 OraMTSSvcGet() Parameters</p>
<table class="cellalignment2506" title=" OraMTSSvcGet() Parameters" summary="OraMTSSvcGet() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t4">Parameter</th>
<th class="cellalignment2507" id="r1c2-t4">IN/OUT</th>
<th class="cellalignment2507" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t4" headers="r1c1-t4">
<p><code>lpUname</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2503" headers="r2c1-t4 r1c3-t4">
<p>Username for connecting to the Oracle Database</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r3c1-t4" headers="r1c1-t4">
<p><code>lpPsswd</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2503" headers="r3c1-t4 r1c3-t4">
<p>Password for the username</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r4c1-t4" headers="r1c1-t4">
<p><code>lpDbnam</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2503" headers="r4c1-t4 r1c3-t4">
<p>The <a href="glossary.htm#BGBDDJAE"><span class="xrefglossterm">net service name</span></a> for connecting to the database (created with Oracle Net Manager or Oracle Net Configuration Assistant)</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r5c1-t4" headers="r1c1-t4">
<p><code>pOCISvc</code></p>
</td>
<td class="cellalignment2503" headers="r5c1-t4 r1c2-t4">
<pre>OUT
</pre></td>
<td class="cellalignment2503" headers="r5c1-t4 r1c3-t4">
<p>Pointer to the OCI service context handle</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r6c1-t4" headers="r1c1-t4">
<p><code>pOCIEnv</code></p>
</td>
<td class="cellalignment2503" headers="r6c1-t4 r1c2-t4">
<pre>OUT
</pre></td>
<td class="cellalignment2503" headers="r6c1-t4 r1c3-t4">
<p>Pointer to the OCI environment handle</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r7c1-t4" headers="r1c1-t4">
<p><code>dwConFlgs</code></p>
</td>
<td class="cellalignment2503" headers="r7c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2503" headers="r7c1-t4 r1c3-t4">
<p>Connection flags. Possible values are:</p>
<ul>
<li>
<p><code><a id="sthref158"></a><a id="sthref159"></a>ORAMTS_CFLG_ALLDEFAULT</code></p>
<p>Obtains a pooled connection and enlists the connection in any Microsoft Transaction Server transaction, if one exists. If the component is nontransactional, no enlistment request is dispensed.</p>
</li>
<li>
<p><code>ORAMTS_CFLG_NOIMPLICIT</code></p>
<p>Obtains a pooled connection, but does not enlist the resource in any Microsoft Transaction Server transaction even if the component is transactional. Use this flag if the component enlists the connection resource later using <code>OraMTSSvcEnlist()</code>. Prior to releasing a connection obtained in this fashion, the client must de-enlist the resource if enlisted.</p>
</li>
<li>
<p>ORAMTS_CFLG_UNIQUESRVR</p>
<p>Requests a single OCI session for each OCI Server. In this release, multiplexing is not supported. Therefore, this option is always used.</p>
</li>
<li>
<p><code>ORAMTS_CFLG_SYSDBALOGN<a id="sthref160"></a><a id="sthref161"></a></code></p>
<p>Use this flag if connecting as <code>SYSDBA</code>.</p>
</li>
<li>
<p><code>ORAMTS_CFLG_SYSOPRLOGN<a id="sthref162"></a><a id="sthref163"></a></code></p>
<p>Use this flag if connecting as <code>SYSOPER</code>.</p>
</li>
<li>
<p><code>ORAMTS_CFLG_PRELIMAUTH</code></p>
<p>Use this flag if connecting as the user <code>INTERNAL</code> to pre-Oracle9<span class="italic">i</span> databases. The <code>INTERNAL</code> account is no longer valid as of Oracle9<span class="italic">i</span>. Instead, log on with a <code>SYSDBA</code> or <code>SYSOPER</code> account using the <code>ORAMTS_CFLG_SYSOPRLOGN</code> or <code>ORAMTS_CFLG_SYSDBALOGN</code> flag.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS190"></a>Returns<a id="sthref164"></a><a id="sthref165"></a></p>
<p>Returns <code>ORAMTSERR_NOERROR</code> upon successful acquisition of an OCI pooling connection (OCI service context).</p>
<p class="subhead2"><a id="NTMTS191"></a>Usage Notes</p>
<ul>
<li>
<p><a id="sthref166"></a><a id="sthref167"></a><code>OraMTSSvcGet()</code> returns a pooled OCI connection to the caller, enabling a database transaction using OCI to begin. Use <code>OraMTSSvcGet()</code> to implicitly enlist the OCI connection in a transaction coordinated by Microsoft Transaction Server. In this type of transaction, Microsoft Transaction Server controls the creation, startup, management, and commitment phases of the transaction through its MS DTC component.</p>
</li>
<li>
<p><code>OraMTSSvcGet()</code> also provides connection pooling without enlisting the Oracle Database in a Microsoft Transaction Server transaction. This is done by setting <code>OraMTSSvcGet()</code> as follows:</p>
<pre>OraMTSSvcGet(...,ORAMTS_CFLG_NOIMPLICIT)
</pre></li>
<li>
<p>In all cases where <code>OraMTSSvcGet</code><code>()</code> is used, you must always use <code>OraMTSSvcRel</code><code>()</code> to release the connection when finished.</p>
</li>
<li>
<p>Use the flags <a id="sthref168"></a><a id="sthref169"></a><code>ORAMTS_CFLG_SYSDBALOGN</code> and <code>ORAMTS_CFLG_SYSOPRLOGN</code> when connecting as <code>SYSDBA</code> and <code>SYSOPER</code>, respectively.</p>
</li>
<li>
<p>To obtain a nonenlisted connection using the <code>hr</code>/<code><span class="codeinlineitalic">hr_password</span></code> account, call <code>OraMTSSvcGet()</code> as follows:</p>
<pre>OraMTSSvcGet(&#34;hr&#34;, &#34;<span class="italic">hr_password</span>&#34;, &#34;oracle&#34;, &amp;OCISvc, &amp;OCIEnv, ORAMTS_CFLG_ALLDEFAULT | ORAMTS_CFLG_NOIMPLICIT);
</pre></li>
<li>
<p><code>OraMTSSvcGet()</code> does not support placing the username (<code>lpUname</code>), password (<code>lpPsswd</code>), and net service name syntax (<code>lpDbname</code>) together in the username argument (for example, <code>hr/</code><code><span class="codeinlineitalic">hr_password</span></code><code>@prod_fin</code>). Instead, the caller must fill in <code>lpUname</code>, <code>lpPsswd</code>, and <code>lpDbname</code> separately (as shown in the previous syntax example). Calling <code>OraMTSSvcGet()</code> with the username and password as <code>NULL</code> strings uses external authentication (operating system authentication) for the connection.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006918"></a>
<div id="NTMTS192" class="sect2">
<h3 class="sect2">OraMTSSvcRel()<a id="sthref170"></a><a id="sthref171"></a><a id="sthref172"></a></h3>
<p>Releases a pooled OCI connection, OCI service context, back to the connection pool. Use this function to release connections that were acquired with <code>OraMTSSvcGet()</code>.</p>
<p class="subhead2"><a id="NTMTS193"></a>Syntax<a id="sthref173"></a></p>
<pre>DWORD OraMTSSvcRel(OCISvcCtx* OCISvc);
</pre>
<p class="subhead2"><a id="NTMTS194"></a>Parameters</p>
<div id="NTMTS195" class="tblformal">
<p class="titleintable"><a id="sthref174"></a><a id="g1019881"></a>Table 4-3 OraMTSSvcRel() Parameters</p>
<table class="cellalignment2506" title="OraMTSSvcRel() Parameters" summary="OraMTSSvcRel() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t5">Parameter</th>
<th class="cellalignment2507" id="r1c2-t5">IN/OUT</th>
<th class="cellalignment2507" id="r1c3-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t5" headers="r1c1-t5">
<p><code>OCISvc</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t5 r1c2-t5">
<pre>IN
</pre></td>
<td class="cellalignment2503" headers="r2c1-t5 r1c3-t5">
<p>OCI service context for a pooled connection</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS196"></a>Returns<a id="sthref175"></a><a id="sthref176"></a></p>
<p>Returns <code>ORAMTSERR_NOERROR</code> upon successful release of a pooled OCI connection.</p>
<p class="subhead2"><a id="NTMTS197"></a>Usage Notes</p>
<ul>
<li>
<p><a id="i1006959"></a><a id="sthref177"></a><a id="sthref178"></a><a id="sthref179"></a>An OCI pooled connection obtained through a previous call to <code>OraMTSSvcGet()</code> is released back to the connection pool. Once released back to the connection pool, the OCI service context, its environment handle, and all child handles are invalid.</p>
</li>
<li>
<p>A nontransactional client component must explicitly call <code>OCITransCommit()</code> or <code>OCITransAbort()</code> prior to releasing a connection obtained through <code>OraMTSSvcGet(..., ...,ORAMTS_CFLG_ALLDEFAULT)</code> back to the pool. Otherwise, all changes made in that session are rolled back. A transaction component uses the <code>SetComplete</code> or <code>SetAbort</code> methods on its Microsoft Transaction Server object context.</p>
</li>
<li>
<p>Components that have called <code>OraMTSSvcGet(..., ...,ORAMTS_CFLG_NOIMPLICIT)</code> to obtain a connection resource must first de-enlist the resource if enlisted. If the connection was enlisted explicitly, <code>pTransaction-&gt;Commit()</code> or <code>pTransaction-&gt;Abort()</code> must be called. Otherwise, <code>OCITransCommit()</code> or <code>OCITransAbort()</code> must be called before releasing the connection back to the pool.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006965"></a>
<div id="NTMTS198" class="sect2">
<h3 class="sect2">OraMTSSvcEnlist() <a id="sthref180"></a><a id="sthref181"></a><a id="sthref182"></a><a id="sthref183"></a></h3>
<p>Enlists or de-enlists an OCI connection in a transaction coordinated by MS DTC. Use this call to explicitly enlist pooled connections. Nonpooled connections must enlist with <code>OraMTSJoinTxn()</code>.</p>
<p class="subhead2"><a id="NTMTS199"></a>Syntax<a id="sthref184"></a></p>
<pre>DWORD OraMTSSvcEnlist(
</pre>
<pre>                   OCISvcCtx*  OCISvc, 
                   OCIError*   OCIErr, 
                   void*       lpTrans, 
                   unsigned    dwFlags);
</pre>
<p class="subhead2"><a id="NTMTS200"></a>Parameters<a id="sthref185"></a><a id="sthref186"></a></p>
<div id="NTMTS201" class="tblformal">
<p class="titleintable"><a id="sthref187"></a><a id="g1020053"></a>Table 4-4 OraMTSSvcEnlist() Parameters</p>
<table class="cellalignment2506" title="OraMTSSvcEnlist() Parameters" summary="OraMTSSvcEnlist() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t6">Parameter</th>
<th class="cellalignment2507" id="r1c2-t6">IN/OUT</th>
<th class="cellalignment2507" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t6" headers="r1c1-t6">
<p><code>OCISvc</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t6 r1c2-t6">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t6 r1c3-t6">
<p>OCI service context for pooled connections obtained by calling <code>OraMTSSvcGet()</code></p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r3c1-t6" headers="r1c1-t6">
<p><code>OCIErr</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t6 r1c2-t6">
<p><code>IN/OUT</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t6 r1c3-t6">
<p>OCI error handle (ignored)</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r4c1-t6" headers="r1c1-t6">
<p><code>lpTrans</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t6 r1c2-t6">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t6 r1c3-t6">
<p>Pointer to the MS DTC-controlled transaction in which to enlist. If <code>NULL</code>, the OCI connection is de-enlisted from the MS DTC-controlled transaction.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r5c1-t6" headers="r1c1-t6">
<p><code>dwFlags</code></p>
</td>
<td class="cellalignment2503" headers="r5c1-t6 r1c2-t6">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r5c1-t6 r1c3-t6">
<p>Flag used for enlisting in a transaction. Use the <code>ORAMTS_ENFLG_DEFAULT<a id="sthref188"></a><a id="sthref189"></a></code> value. If enlisting, then start a new Oracle global transaction. If de-enlisting, then detach from any global Oracle transaction and delete the context object if the OCI service context represents a nonpooled connection.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS202"></a>Returns<a id="sthref190"></a><a id="sthref191"></a></p>
<p>Returns <code>ORAMTSERR_NOERROR</code> on success.</p>
<p class="subhead2"><a id="NTMTS203"></a>Usage Notes<a id="sthref192"></a><a id="sthref193"></a></p>
<ul>
<li>
<p>Use this call to explicitly enlist or de-enlist a pooled connection. For enlisting and de-enlisting nonpooled connections, use <code>OraMTSSvcRel()</code>.</p>
</li>
<li>
<p><code>OraMTSSvcEnlist()</code> enlists (or de-enlists) pooled OCI connections obtained previously through <code>OraMTSSvcGet()</code> with the <code>ORAMTS_CFLG_NOIMPLICIT</code> flag and not yet released with <code>OraMTSSvcRel()</code>. The pooled OCI connections must be explicitly enlistable. When the transaction is complete, you must de-enlist <code>OraMTSSvcEnlist()</code>, passing <code>NULL</code> as the transaction pointer as follows:</p>
<pre>OraMTSSvcEnlist (OCISvc, OCIErr, NULL, ORAMTS_ENFLG_DEFAULT)
</pre>
<p>You must use <code>OraMTSSvcRel()</code> to release the connection when done.</p>
</li>
<li>
<p>Callers must allocate a connection, enlist the connection, perform work, de-enlist the connection, release the connection, and then attempt to commit or terminate.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007043"></a>
<div id="NTMTS204" class="sect2">
<h3 class="sect2">OraMTSSvcEnlistEx()<a id="sthref194"></a></h3>
<p>Enlists an OCI connection or service context in an MS DTC transaction. Use this call only to explicitly enlist pooled connections. Nonpooled connections must enlist with <code>OraMTSJoinTxn()</code>.</p>
<p class="subhead2"><a id="NTMTS205"></a>Syntax<a id="sthref195"></a></p>
<pre>DWORD OraMTSSvcEnlistEx(
                     OCISvcCtx* OCISvc, 
</pre>
<pre>                     OCIError*  OCIErr, 
                     void*      lpTrans, 
                     unsigned   dwFlags,
                     char*      lpDBName);
</pre>
<p class="subhead2"><a id="NTMTS206"></a>Parameters</p>
<div id="NTMTS207" class="tblformal">
<p class="titleintable"><a id="sthref196"></a><a id="g1020452"></a>Table 4-5 OraMTSSvcEnlistEx() Parameters</p>
<table class="cellalignment2506" title=" OraMTSSvcEnlistEx() Parameters" summary="OraMTSSvcEnlistEx() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t7">Parameter</th>
<th class="cellalignment2507" id="r1c2-t7">IN/OUT</th>
<th class="cellalignment2507" id="r1c3-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t7" headers="r1c1-t7">
<p><code>OCISvc</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t7 r1c2-t7">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t7 r1c3-t7">
<p>OCI service context for pooled connections obtained by calling <code>OraMTSSvcGet()</code></p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r3c1-t7" headers="r1c1-t7">
<p><code>OCIErr</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t7 r1c2-t7">
<p><code>IN/OUT</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t7 r1c3-t7">
<p>OCI error handle (ignored)</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r4c1-t7" headers="r1c1-t7">
<p><code>lpTrans</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t7 r1c2-t7">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t7 r1c3-t7">
<p>Pointer to the MS DTC-controlled transaction in which to enlist. If <code>NULL</code>, the OCI connection is de-enlisted from the MS DTC-controlled transaction.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r5c1-t7" headers="r1c1-t7">
<p><code>dwFlags</code></p>
</td>
<td class="cellalignment2503" headers="r5c1-t7 r1c2-t7">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r5c1-t7 r1c3-t7">
<p>Flag used for enlisting in a transaction. Use the <code>ORAMTS_ENFLG_DEFAULT<a id="sthref197"></a><a id="sthref198"></a></code> value. If enlisting, then start a new Oracle global transaction. If de-enlisting, then detach from any global Oracle transaction and delete the context object if the OCI service context represents a nonpooled connection.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r6c1-t7" headers="r1c1-t7">
<p><code>lpDBName</code></p>
</td>
<td class="cellalignment2503" headers="r6c1-t7 r1c2-t7">
<p><code>-</code></p>
</td>
<td class="cellalignment2503" headers="r6c1-t7 r1c3-t7">
<p>Net service name for connecting to the database (created with Oracle Net Manager or Oracle Net Configuration Assistant)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS208"></a>Returns<a id="sthref199"></a><a id="sthref200"></a></p>
<p>Returns <code><a id="sthref201"></a>ORAMTSERR_ILLEGAL_OPER</code>.</p>
<p class="subhead2"><a id="NTMTS209"></a>Usage Notes<a id="sthref202"></a></p>
<p>Use <code>OraMTSSvcEnlistEx()</code> for pooled connections or <code>OraMTSJoinTxn()</code> for nonpooled connections.</p>
</div>
<!-- class="sect2" -->
<a id="i1007117"></a>
<div id="NTMTS210" class="sect2">
<h3 class="sect2">OraMTSEnlCtxGet() <a id="sthref203"></a><a id="sthref204"></a></h3>
<p>Creates an enlistment context for a nonpooled OCI connection.</p>
<p class="subhead2"><a id="NTMTS211"></a>Syntax</p>
<pre>DWORD OraMTSEnlCtxGet(
</pre>
<pre>                     text*       lpUname,
                     text*       lpPsswd,
                     text*       lpDbnam,              
                     OCISvcCtx*  pOCISvc,
                     OCIError*   pOCIErr,
                     ub4         dwFlags,
                     void**      pCtxt);
</pre>
<p class="subhead2"><a id="NTMTS212"></a>Parameters<a id="sthref205"></a></p>
<div id="NTMTS213" class="tblformal">
<p class="titleintable"><a id="sthref206"></a><a id="g1020792"></a>Table 4-6 OraMTSEnlCtxGet() Parameters</p>
<table class="cellalignment2506" title="OraMTSEnlCtxGet() Parameters" summary="OraMTSEnlCtxGet() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t8">Parameter</th>
<th class="cellalignment2507" id="r1c2-t8">IN/OUT</th>
<th class="cellalignment2507" id="r1c3-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t8" headers="r1c1-t8">
<p><code>lpUname</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t8 r1c2-t8">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t8 r1c3-t8">
<p>Username for connecting to the Oracle Database</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r3c1-t8" headers="r1c1-t8">
<p><code>lpPsswd</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t8 r1c2-t8">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t8 r1c3-t8">
<p>Password for connecting to the Oracle Database</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r4c1-t8" headers="r1c1-t8">
<p><code>lpDbnam</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t8 r1c2-t8">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t8 r1c3-t8">
<p>Net service name for connecting to a database</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r5c1-t8" headers="r1c1-t8">
<p><code>pOCISvc</code></p>
</td>
<td class="cellalignment2503" headers="r5c1-t8 r1c2-t8">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r5c1-t8 r1c3-t8">
<p>OCI service context for a nonpooled connection</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r6c1-t8" headers="r1c1-t8">
<p><code>pOCIErr</code></p>
</td>
<td class="cellalignment2503" headers="r6c1-t8 r1c2-t8">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r6c1-t8 r1c3-t8">
<p>OCI error handle</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r7c1-t8" headers="r1c1-t8">
<p><code>dwFlags</code></p>
</td>
<td class="cellalignment2503" headers="r7c1-t8 r1c2-t8">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r7c1-t8 r1c3-t8">
<p>Enlistment flags. The only value currently permitted is <code>0</code>.</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r8c1-t8" headers="r1c1-t8">
<p><code>pCtxt</code></p>
</td>
<td class="cellalignment2503" headers="r8c1-t8 r1c2-t8">
<p><code>OUT</code></p>
</td>
<td class="cellalignment2503" headers="r8c1-t8 r1c3-t8">
<p>Enlistment context to be created</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS214"></a>Returns</p>
<p>Returns <code>ORAMTSERR_NOERROR</code> on success.</p>
<p class="subhead2"><a id="NTMTS215"></a>Usage Notes</p>
<ul>
<li>
<p>This call sets up an enlistment context for a nonpooled connection. This call must be started just after the caller establishes the OCI connection to the database. Once created, this context can be passed into <code>OraMTSJoinTxn()</code> calls. Prior to deleting the OCI connection, <code>OraMTSEnlCtxRel()</code> must be called to delete the enlistment context.</p>
</li>
<li>
<p>Callers must:</p>
<ul>
<li>
<p>Allocate a nonpooled connection through OCI.</p>
</li>
<li>
<p>Create an enlistment context by calling <code>OraMTSEnlCtxGet()</code>.</p>
</li>
<li>
<p>Enlist the connection by calling <code>OraMTSJoinTxn()</code>.</p>
</li>
<li>
<p>Perform database work.</p>
</li>
<li>
<p>De-enlist the connection by calling <code>OraMTSJoinTxn()</code> with a <code>NULL</code> transaction pointer.</p>
</li>
<li>
<p>Attempt to commit or terminate work.</p>
</li>
<li>
<p>Release the enlistment context by calling <code>OraMTSEnlCtxRel()</code>.</p>
</li>
<li>
<p>Release the nonpooled OCI connection and delete its associated OCI environment handle.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007218"></a>
<div id="NTMTS216" class="sect2">
<h3 class="sect2">OraMTSEnlCtxRel()<a id="sthref207"></a></h3>
<p>Eliminates a previously set up enlistment context for a nonpooled OCI connection.</p>
<p class="subhead2"><a id="NTMTS217"></a>Syntax<a id="sthref208"></a></p>
<pre>DWORD OraMTSEnlCtxRel(void* pCtxt); 
</pre>
<p class="subhead2"><a id="NTMTS218"></a>Parameters<a id="sthref209"></a></p>
<div id="NTMTS219" class="tblformal">
<p class="titleintable"><a id="sthref210"></a><a id="g1021387"></a>Table 4-7 OraMTSEnlCtxRel() Parameters</p>
<table class="cellalignment2506" title="OraMTSEnlCtxRel() Parameters" summary="OraMTSEnlCtxRel() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t9">Parameter</th>
<th class="cellalignment2507" id="r1c2-t9">IN/OUT</th>
<th class="cellalignment2507" id="r1c3-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t9" headers="r1c1-t9">
<p><code>pCtxt</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t9 r1c2-t9">
<pre>IN
</pre></td>
<td class="cellalignment2503" headers="r2c1-t9 r1c3-t9">
<p>Enlistment context to eliminate</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS220"></a>Returns<a id="sthref211"></a></p>
<p>Returns <code>ORAMTSERR_NOERROR</code> on success.</p>
<p class="subhead2"><a id="NTMTS221"></a>Usage Notes</p>
<ul>
<li>
<p>Before dropping a nonpooled OCI connection, a client must call <code>OraMTSEnlCtxRel()</code> to eliminate any enlistment context it may have created for that connection. The enlistment context can maintain OCI handles allocated off the connection&#39;s OCI environment handle. This makes it imperative that the environment handle is not deleted for the associated enlistment context.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007259"></a>
<div id="NTMTS222" class="sect2">
<h3 class="sect2"><a id="sthref212"></a>OraMTSJoinTxn() <a id="sthref213"></a><a id="sthref214"></a><a id="sthref215"></a></h3>
<p>Enlists a nonpooled OCI connection in an MS DTC transaction.</p>
<p class="subhead2"><a id="NTMTS223"></a>Syntax<a id="sthref216"></a></p>
<pre>DWORD OraMTSJoinTxn(void*  pCtxt, 
                    void*  pTrans);
</pre>
<p class="subhead2"><a id="NTMTS224"></a>Parameters</p>
<div id="NTMTS225" class="tblformal">
<p class="titleintable"><a id="sthref217"></a><a id="g1021533"></a>Table 4-8 OraMTSJoinTxn() Parameters</p>
<table class="cellalignment2506" title="OraMTSJoinTxn() Parameters" summary="OraMTSJoinTxn() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t10">Parameter</th>
<th class="cellalignment2507" id="r1c2-t10">IN</th>
<th class="cellalignment2507" id="r1c3-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t10" headers="r1c1-t10">
<p><code>pCtxt</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t10 r1c2-t10">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t10 r1c3-t10">
<p>Enlistment context for the OCI connection</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r3c1-t10" headers="r1c1-t10">
<p><code>pTrans</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t10 r1c2-t10">
<p><code>IN</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t10 r1c3-t10">
<p>Reference to the MS DTC transaction object</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS226"></a>Returns<a id="sthref218"></a><a id="sthref219"></a></p>
<p>Returns <code>ORAMTSERR_NOERROR</code> on success.</p>
<p class="subhead2"><a id="NTMTS227"></a>Usage Notes</p>
<ul>
<li>
<p>Clients use this call with nonpooled OCI connections to enlist connections in MS DTC-coordinated transactions. The client passes in the wide reference to the enlistment context representing the OCI connection, along with a reference to an MS DTC transaction object. If <code>pTrans</code> is <code>NULL</code>, the OCI connection is de-enlisted from any MS DTC transaction in which it is currently enlisted. You can enlist a previously-enlisted OCI connection in a different MS DTC transaction.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007305"></a>
<div id="NTMTS228" class="sect2">
<h3 class="sect2">OraMTSTransTest()</h3>
<p>Tests if you are running inside a Microsoft Transaction Server-started transaction.</p>
<p class="subhead2"><a id="NTMTS229"></a>Syntax<a id="sthref220"></a></p>
<pre>BOOL OraMTSTransTest();
</pre>
<p class="subhead2"><a id="NTMTS230"></a>Returns</p>
<p>Returns <code>true</code> if running inside a Microsoft Transaction Server transaction.</p>
<p class="subhead2"><a id="NTMTS231"></a>Usage Notes</p>
<p>Microsoft Transaction Server transactional components use <code>OraMTSTransTest()</code> to check if a component is running within the context of a Microsoft Transaction Server transaction. Note that this call can only test Microsoft Transaction Server-started transactions. Transactions started by directly calling the MS DTC are not detected.</p>
</div>
<!-- class="sect2" -->
<a id="i1007335"></a>
<div id="NTMTS232" class="sect2">
<h3 class="sect2">OraMTSOCIErrGet() <a id="sthref221"></a><a id="sthref222"></a></h3>
<p>Retrieves the OCI error code and message text, if any, from the last <code>OraMTS</code> function operation, typically <code>OraMTSSvcGet()</code> or <code>OraMTSJoinTxn()</code>.</p>
<p class="subhead2"><a id="NTMTS233"></a>Syntax<a id="sthref223"></a></p>
<pre>BOOL OraMTSOCIErrGet(DWORD* dwErr, 
                     LPCHAR lpcEMsg, 
                     DWORD* lpdLen);
</pre>
<p class="subhead2"><a id="NTMTS234"></a>Parameters<a id="sthref224"></a><a id="sthref225"></a></p>
<div id="NTMTS235" class="tblformal">
<p class="titleintable"><a id="sthref226"></a><a id="CEGHGCBG"></a>Table 4-9 OraMTSOCIErrGet() Parameters</p>
<table class="cellalignment2506" title="OraMTSOCIErrGet() Parameters" summary="OraMTSOCIErrGet() parameters. Column 1 lists the parameter, column 2 indicates if the parameter has an IN or OUT binding, and column 3 contains a description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment2497">
<th class="cellalignment2507" id="r1c1-t11">Parameter</th>
<th class="cellalignment2507" id="r1c2-t11">IN/OUT</th>
<th class="cellalignment2507" id="r1c3-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r2c1-t11" headers="r1c1-t11">
<p><code>dwErr</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t11 r1c2-t11">
<p><code>-</code></p>
</td>
<td class="cellalignment2503" headers="r2c1-t11 r1c3-t11">
<p>Error code</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r3c1-t11" headers="r1c1-t11">
<p><code>lpcEMsg</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t11 r1c2-t11">
<p><code>-</code></p>
</td>
<td class="cellalignment2503" headers="r3c1-t11 r1c3-t11">
<p>Buffer for the error message, if any</p>
</td>
</tr>
<tr class="cellalignment2497">
<td class="cellalignment2503" id="r4c1-t11" headers="r1c1-t11">
<p><code>lpdLen</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t11 r1c2-t11">
<p><code>-</code></p>
</td>
<td class="cellalignment2503" headers="r4c1-t11 r1c3-t11">
<p>Set to the actual number of message bytes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="NTMTS236"></a>Returns</p>
<p>Returns <code>true</code> if an OCI error is encountered. Otherwise, <code>false</code> is returned. If <code>true</code> is returned and <code>lpcEMsg</code> and <code>lpdLen</code> are valid, and there is a stashed error message, up to <code>lpdLen</code> bytes are copied into <code>lpcEMsg</code>. <code>lpdLen</code> is set to the actual number of message bytes.</p>
<p class="subhead2"><a id="NTMTS237"></a>Usage Notes</p>
<p><a href="#BEJEFACA">Example 4-2</a> illustrates how <code>OraMTSOCIErrGet()</code> retrieves the OCI error code and OCI error message text, if any, from the last <code>OraMTSSvc()</code> operation on this thread.</p>
<div id="NTMTS238" class="example">
<p class="titleinexample"><a id="BEJEFACA"></a>Example 4-2 Retrieving the OCI Error Code and Message Text</p>
<pre>DWORD dwStat = OraMTSSvcGet(&#34;hr&#34;,
                            &#34;invalid_password&#34;,
                            &#34;fin_prod&#34;,
                            &#34;db&#34;,
                            &amp;mysvch,
                            &amp;myenvh, 
                            ORAMTS_CFLG_ALLDEFAULT);

if (dwStat != ORAMTS_ERR_NOERROR)
   {
      DWORD   dwOCIErr;
      char    errBuf[MAX_PATH];
      DWORD   errBufLen = sizeof(effBuf);

      if (OraMTSOCIErrGet(&amp;dwOCIErr, &amp;errBuf, &amp;errBufLen))
            printf(&#34;OCIError %d: %s&#34;\n);
   }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007399"></a>
<div id="NTMTS239" class="sect1">
<h2 class="sect1">ODBC Integration with Microsoft Transaction Server Overview<a id="sthref227"></a><a id="sthref228"></a><a id="sthref229"></a></h2>
<p>This section describes how to use Oracle ODBC Driver with Microsoft Transaction Server and a Oracle Database. No changes to OCI code are necessary for ODBC to operate successfully.</p>
<a id="CEGBEJGA"></a>
<div id="NTMTS240" class="sect2">
<h3 class="sect2">Setting the Connection Attribute<a id="sthref230"></a><a id="sthref231"></a><a id="sthref232"></a><a id="sthref233"></a></h3>
<p>To use Microsoft Transaction Server with either Oracle ODBC Driver 11.1 or Microsoft Oracle ODBC driver, set the connection attribute using the <code>SQLSetConnectAttr</code> function to call the parameter <code>SQL_ATTR_ENLIST_IN_DTC</code> in the ODBC code. This enables you to receive connection pooling and implicit transaction support.</p>
</div>
<!-- class="sect2" -->
<a id="i1007447"></a>
<div id="NTMTS241" class="sect2">
<h3 class="sect2">Using Oracle ODBC Driver<a id="sthref234"></a><a id="sthref235"></a><a id="sthref236"></a></h3>
<p>The ODBC Driver Manager distributed with ODBC 3.0 is a Resource Dispenser that supports connection pooling. Oracle ODBC Driver release 11.1 integrates with the ODBC 3.0 Driver Manager by supporting the <code>SQLSetConnectAttr(...,..., SQL_ATTR_ENLIST_IN_DTC)</code> call to enlist or de-enlist the ODBC connection used in MS DTC-coordinated transactions.</p>
<p>Use the Oracle ODBC Driver 11.1 with:</p>
<ul>
<li>
<p>Applications you develop</p>
</li>
<li>
<p>The sample banking application that Microsoft provides with Microsoft Transaction Server.</p>
</li>
</ul>
<p>To configure Oracle ODBC Driver, follow these steps:<a id="sthref237"></a></p>
<ol>
<li>
<p>Choose <span class="bold">Start</span> &gt; <span class="bold">Settings</span> &gt; <span class="bold">Control Panel</span>.</p>
<p>The Control Panel window appears.</p>
</li>
<li>
<p>Double-click <span class="bold">ODBC</span>.</p>
<p>The ODBC Data Source Administrator dialog box appears.</p>
</li>
<li>
<p>Choose the <span class="bold">File DSN</span> tab.</p>
</li>
<li id="BEJJDHDA">
<p>To make Oracle ODBC Driver work with Microsoft sample banking application demo, follow these steps. Otherwise, skip this step.</p>
<ul>
<li>
<p>Back up Microsoft <code>mtssamples.dsn</code> file. This file is located in <code><span class="codeinlineitalic">ROOTDRIVE</span></code>:\<code>program files\common files\odbc\data sources</code>.</p>
</li>
<li id="i1007495">
<p>Select <a id="sthref238"></a><a id="sthref239"></a><code>mtssamples.dsn</code> and click <span class="bold">Remove</span>.</p>
</li>
<li id="i1007498">
<p>Click <span class="bold">Yes</span> when prompted.</p>
<p>This deletes the configuration file that enables the Microsoft Transaction Server sample application demo to use the Microsoft ODBC driver.</p>
</li>
</ul>
<p>If you don&#39;t intend to use the demo, click <span class="bold">Add to create a new File data source name (DSN)</span>.</p>
<p>The Create New Data Source wizard appears.</p>
</li>
<li>
<p>Select <span class="bold">Oracle</span> in <code><span class="codeinlineitalic">HOME_NAME</span></code>.</p>
</li>
<li>
<p>Click <span class="bold">Advanced</span>.</p>
</li>
<li>
<p>Add the following information in the keywords and values field:</p>
<pre>SERVER=<span class="italic">database_alias</span>
USERNAME=hr 
PASSWORD=<span class="italic">hr_password</span>
</pre>
<p>where:</p>
<ul>
<li>
<p><code>SERVER</code> is the The database alias used by the demo to access the database <code>mtsdemo</code>.</p>
</li>
<li>
<p><code>USERNAME</code> is the database username for this application, such as <code>hr</code>.</p>
</li>
<li>
<p><code>PASSWORD</code> is the database password for username <code>hr</code>.</p>
</li>
</ul>
<p>Verify that the <code>hr</code> schema contains the <code>account</code> and <code>receipt</code> tables.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span> to continue with the Create New Data Source wizard.</p>
</li>
<li>
<p>For the Microsoft sample application, enter <code>mtssamples.dsn</code> (Microsoft ODBC name). This name must exactly match the name you removed in Step <a href="#BEJJDHDA">4</a>.</p>
<p>For applications you develop, enter the name of the DSN file that will be used.</p>
</li>
<li>
<p>Complete the remaining Create New Data Source wizard pages.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to exit the ODBC Data Source Administrator dialog box.</p>
</li>
<li>
<p>Exit the Control Panel window.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p>Microsoft Transaction Server SDK for information</p>
</div>
</div>
<!-- class="sect2" -->
<a id="i1007575"></a>
<div id="NTMTS242" class="sect2">
<h3 class="sect2">Using Microsoft Oracle ODBC Driver<a id="sthref240"></a><a id="sthref241"></a><a id="sthref242"></a></h3>
<p>As an alternative to the Oracle ODBC driver, you can use the Microsoft Oracle ODBC Driver. You should be aware that you would not be able to integrate with Oracle Provider for OLE DB and Oracle Data Provider for .NET if using the Microsoft driver. Also, you will not receive the performance benefits of the Oracle ODBC driver, API support for integration, or Oracle client support services.</p>
<p>After enabling the Microsoft Oracle ODBC Driver, perform these additional steps to configure the Microsoft Oracle ODBC Driver:</p>
<p>To configure the Microsoft Oracle ODBC Driver:<a id="sthref243"></a><a id="sthref244"></a></p>
<ol>
<li>
<p>Install Oracle Required Support Files (RSF) and SQL*Net 2.3 or later on the computer where the Microsoft Oracle ODBC Driver is operating.</p>
</li>
<li>
<p>Run the <code><span class="codeinlineitalic">ORACLE_BASE</span></code><code>\</code><code><span class="codeinlineitalic">ORACLE_HOME</span></code>\<code>oramts\samples\ sql\omtssamp.sql</code> script.</p>
</li>
<li>
<p>Use SQL*Net Easy Config to set up a database alias connection. This alias is used in the <code>mtssamples.dsn</code> file.</p>
</li>
<li>
<p>If you installed the RSFs in a home with Oracle Net installed, be sure to set the following registry parameter at <code>HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE</code>:<a id="sthref245"></a></p>
<pre>ORAOCI = ORA73.DLL
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;Setting Up MTS to Access Oracle&#34; in the Microsoft Transaction Server online Help for instructions on enabling the Microsoft Oracle ODBC Driver</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2496">
<tr>
<td class="cellalignment2503">
<table class="cellalignment2501">
<tr>
<td class="cellalignment2500"><a href="recovery.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2500"><a href="perftune.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2505">
<table class="cellalignment2499">
<tr>
<td class="cellalignment2500"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2500"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2500"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2500"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2500"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2500"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>