<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-135"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DDL%20and%20DML%20Statements%20with%20LOBs"></a><title>DDL and DML Statements with LOBs</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="print_media creation, sample schema for examples, copy semantics, internal LOBs, semantics, copy-based for internal LOBs, reference semantics, inserting, a row by initializing a LOB locator, internal persistent LOBs"/>
<meta name="dcterms.created" content="2017-03-16T22:27:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SecureFiles and Large Objects Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17605-12"/>
<meta name="dcterms.isVersionOf" content="ADLOB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="part_sql.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adlob_sql_semantics.htm" title="Next" type="text/html"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-17F0F935-FD78-4F41-B6DF-86409522D667"></a> <span id="PAGE" style="display:none;">23/34</span> <!-- End Header -->
<a id="ADLOB45560"></a>
<h1 id="ADLOB-GUID-17F0F935-FD78-4F41-B6DF-86409522D667" class="sect1"><span class="enumeration_chapter">15</span> DDL and DML Statements with LOBs</h1>
<div>
<p>DDL and DML statements work with LOBs.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adlob_ddl.htm#GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203">Creating a Table Containing One or More LOB Columns</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-4DB85138-7C86-4085-AA54-D0A40B6DDAC1">Creating a Nested Table Containing a LOB</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-C35F0A08-CF55-4097-9916-00B9CC98C7E3">Inserting a Row by Selecting a LOB From Another Table</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-99294FB3-0AFA-4C33-B9C8-0532ACFE69D9">Inserting a LOB Value Into a Table</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-6DF2E05A-985D-4921-B945-95FF1F85AA8D" title="You can insert a row by initializing a LOB locator bind variable.">Inserting a Row by Initializing a LOB Locator Bind Variable</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-A02B0C82-EC75-4993-BF34-4AE83B07FAA4">Updating a LOB with EMPTY_CLOB() or EMPTY_BLOB()</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-1C2EBE02-C5D6-4C01-AE25-B8AB6687C426">Updating a Row by Selecting a LOB From Another Table</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-17F0F935-FD78-4F41-B6DF-86409522D667__GUID-83F22B7F-F298-4F61-8C77-4839ADB72EE7">
<p class="notep1">See Also:</p>
<p>For guidelines on how to <code class="codeph">INSERT</code> into a LOB when binds of more than 4000 bytes are involved, see the following sections in <span class="q">&#34;<a href="adlob_data_interface.htm#GUID-5E2B4119-184C-4FE9-839D-3619CC23D9B7">Binds of All Sizes in INSERT and UPDATE Operations</a>&#34;</span>.</p>
</div>
</div>
<a id="ADLOB45562"></a><a id="ADLOB45561"></a>
<div class="props_rev_3"><a id="GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203"></a>
<h2 id="ADLOB-GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203" class="sect2">Creating a Table Containing One or More LOB Columns</h2>
<div>
<div class="section">
<p>You can create a table containing one or more LOB columns.</p>
<p>When you use functions, <code class="codeph">EMPTY_BLOB()</code> and <code class="codeph">EMPTY_CLOB()</code>, the resulting LOB is initialized, but not populated with data. Also note that LOBs that are empty are not <code class="codeph">NULL</code>.</p>
<div class="infoboxnotealso" id="GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203__GUID-D98461E0-B97B-4E20-8442-EA0CF3CAA3E5">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF014" target="_blank" href="../SQLRF/statements_7.htm#SQLRF014"><span class="italic">Oracle Database SQL Language Reference</span></a> for a complete specification of syntax for using LOBs in <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> and <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> with:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BLOB</code>, <code class="codeph">CLOB</code>, <code class="codeph">NCLOB</code> and <code class="codeph">BFILE</code> columns</p>
</li>
<li>
<p><code class="codeph">EMPTY_BLOB</code> and <code class="codeph">EMPTY_CLOB</code> functions</p>
</li>
<li>
<p>LOB storage clause for persistent LOB columns, and LOB attributes of embedded objects</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Scenario</p>
</div>
<!-- class="section" -->
<div class="section">
<p>These examples use the following Sample Schemas:</p>
<ul style="list-style-type: disc;">
<li>
<p>Human Resources (<code class="codeph">HR</code>)</p>
</li>
<li>
<p>Order Entry (<code class="codeph">OE</code>)</p>
</li>
<li>
<p>Product Media (<code class="codeph">PM</code>)</p>
</li>
</ul>
<p>Note that the <code class="codeph">HR</code> and <code class="codeph">OE</code> schemas must exist before the <code class="codeph">PM</code> schema is created. For details on these schemas, refer to <a class="olink COMSC" target="_blank" href="../COMSC/toc.htm"><span class="italic">Oracle Database Sample Schemas.</span></a></p>
<div class="infobox-note" id="GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203__GUID-FC880C8C-43DF-4B40-8D84-A06636A33E4F">
<p class="notep1">Note:</p>
<p>Because you can use SQL DDL directly to create a table containing one or more LOB columns, it is not necessary to use the <code class="codeph">DBMS_LOB</code> package.</p>
</div>
<pre dir="ltr">/*  Setup script for creating Print_media, 
    Online_media and associated structures 
*/

DROP USER pm CASCADE;
DROP DIRECTORY ADPHOTO_DIR;
DROP DIRECTORY ADCOMPOSITE_DIR;
DROP DIRECTORY ADGRAPHIC_DIR;
DROP INDEX onlinemedia CASCADE CONSTRAINTS;
DROP INDEX printmedia CASCADE CONSTRAINTS;
DROP TABLE online_media CASCADE CONSTRAINTS;
DROP TABLE print_media CASCADE CONSTRAINTS;
DROP TYPE textdoc_typ;
DROP TYPE textdoc_tab;
DROP TYPE adheader_typ;
DROP TABLE adheader_typ;
CREATE USER pm identified by <span class="italic">password</span>;
GRANT CONNECT, RESOURCE to pm;

CREATE DIRECTORY ADPHOTO_DIR AS &#39;/tmp/&#39;;
CREATE DIRECTORY ADCOMPOSITE_DIR AS &#39;/tmp/&#39;;
CREATE DIRECTORY ADGRAPHIC_DIR AS &#39;/tmp/&#39;;
CREATE DIRECTORY media_dir AS &#39;/tmp/&#39;;
GRANT READ ON DIRECTORY ADPHOTO_DIR to pm;
GRANT READ ON DIRECTORY ADCOMPOSITE_DIR to pm;
GRANT READ ON DIRECTORY ADGRAPHIC_DIR to pm;
GRANT READ ON DIRECTORY media_dir to pm;

CONNECT pm/<span class="italic">password</span>  (or &amp;pass);
COMMIT;

CREATE TABLE a_table (blob_col BLOB); 

CREATE TYPE adheader_typ AS OBJECT ( 
   header_name    VARCHAR2(256),  
   creation_date  DATE,  
   header_text    VARCHAR(1024), 
   logo           BLOB );

CREATE TYPE textdoc_typ AS OBJECT ( 
   document_typ   VARCHAR2(32), 
   formatted_doc  BLOB);

CREATE TYPE Textdoc_ntab AS TABLE of textdoc_typ;

CREATE TABLE adheader_tab of adheader_typ (
Ad_finaltext DEFAULT EMPTY_CLOB(), CONSTRAINT 
Take CHECK (Take IS NOT NULL),  DEFAULT NULL);

CREATE TABLE online_media
( product_id  NUMBER(6),
product_photo ORDSYS.ORDImage,
product_photo_signature ORDSYS.ORDImageSignature,
product_thumbnail ORDSYS.ORDImage, 
product_video ORDSYS.ORDVideo,
product_audio ORDSYS.ORDAudio, 
product_text CLOB,
product_testimonials ORDSYS.ORDDoc);

CREATE UNIQUE INDEX onlinemedia_pk
  ON online_media (product_id);
  
ALTER TABLE online_media
ADD (CONSTRAINT onlinemedia_pk
PRIMARY KEY (product_id), CONSTRAINT loc_c_id_fk
FOREIGN KEY (product_id)  REFERENCES oe.product_information(product_id)
);

CREATE TABLE print_media
(product_id NUMBER(6), 
ad_id NUMBER(6),
ad_composite BLOB,
ad_sourcetext CLOB, 
ad_finaltext CLOB,
ad_fktextn NCLOB,
ad_testdocs_ntab textdoc_tab,
ad_photo BLOB, 
ad_graphic BFILE,
ad_header adheader_typ,
press_release LONG) NESTED TABLE ad_textdocs_ntab STORE AS textdocs_nestedtab;

CREATE UNIQUE INDEX printmedia_pk
  ON print_media (product_id, ad_id);

ALTER TABLE print_media
ADD (CONSTRAINT printmedia_pk
PRIMARY KEY (product_id, ad_id), 
CONSTRAINT printmedia_fk FOREIGN KEY (product_id) 
REFERENCES oe.product_information(product_id)
);
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45563"></a>
<div class="props_rev_3"><a id="GUID-4DB85138-7C86-4085-AA54-D0A40B6DDAC1"></a>
<h2 id="ADLOB-GUID-4DB85138-7C86-4085-AA54-D0A40B6DDAC1" class="sect2">Creating a Nested Table Containing a LOB</h2>
<div>
<div class="section">
<p>You can create a nested table containing a LOB.</p>
<p>You must create the object type that contains the LOB attributes before you create a nested table based on that object type. In the example that follows, table <code class="codeph">Print_media</code> contains nested table <code class="codeph">ad_textdoc_ntab</code> that has type <code class="codeph">textdoc_tab</code>. This type uses two LOB data types:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BFILE</code> - an advertisement graphic</p>
</li>
<li>
<p><code class="codeph">CLOB</code> - an advertisement transcript</p>
</li>
</ul>
<p>The actual embedding of the nested table is accomplished when the structure of the containing table is defined. In our example, this is effected by the <code class="codeph">NESTED TABLE</code> statement when the <code class="codeph">Print_media</code> table is created as shown in the following example:</p>
<pre dir="ltr">/* Create type textdoc_typ as the base type 
   for the nested table textdoc_ntab, 
   where textdoc_ntab contains a LOB: 
*/
CREATE TYPE textdoc_typ AS OBJECT
( 
   document_typ    VARCHAR2(32),  
   formatted_doc   BLOB 
);
/

/* The type has been created. Now you need a */
/* nested table of that type to embed in */
/* table Print_media, so: */
CREATE TYPE textdoc_ntab AS TABLE of textdoc_typ; 
/

CREATE TABLE textdoc_ntable ( 
   id NUMBER, 
   ntab_col textdoc_ntab) 
NESTED TABLE ntab_col STORE AS textdoc_nestedtab;

DROP TYPE textdoc_typ force;
DROP TYPE textdoc_ntab;
DROP TABLE textdoc_ntable;
</pre>
<div class="infoboxnotealso" id="GUID-4DB85138-7C86-4085-AA54-D0A40B6DDAC1__GUID-EDA9DAF6-910F-44C3-8148-AA6007985BA7">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="adlob_ddl.htm#GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203">Creating a Table Containing One or More LOB Columns</a>&#34;</span></p>
</li>
<li>
<p><a class="olink SQLRF01402" target="_blank" href="../SQLRF/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for further information on <code class="codeph">CREATE</code> <code class="codeph">TABLE</code></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45564"></a>
<div class="props_rev_3"><a id="GUID-C35F0A08-CF55-4097-9916-00B9CC98C7E3"></a>
<h2 id="ADLOB-GUID-C35F0A08-CF55-4097-9916-00B9CC98C7E3" class="sect2">Inserting a Row by Selecting a LOB From Another Table</h2>
<div>
<div class="section">
<p>You can insert a row containing a LOB as <code class="codeph">SELECT</code>.</p>
<div class="infobox-note" id="GUID-C35F0A08-CF55-4097-9916-00B9CC98C7E3__GUID-DF8DBEC2-2C7F-457F-AE4A-91EC36CB6B0D">
<p class="notep1">Note:</p>
<p>Persistent LOB types <code class="codeph">BLOB</code>, <code class="codeph">CLOB</code>, and <code class="codeph">NCLOB</code>, use <span class="italic">copy</span> <span class="italic">semantics,</span> as opposed to<a id="d62928e523" class="indexterm-anchor"></a> <span class="italic">reference semantics</span> that apply to <code class="codeph">BFILE</code>s. When a <code class="codeph">BLOB</code>, <code class="codeph">CLOB</code>, or <code class="codeph">NCLOB</code> is copied from one row to another in the same table or a different table, the <span class="italic">actual</span> LOB value is copied, not just the LOB locator.</p>
</div>
<p>For LOBs, one of the advantages of using an object-relational approach is that you can define a type as a common template for related tables. For instance, it makes sense that both the tables that store archival material and working tables that use those libraries, share a common structure.</p>
<p>For example, assuming <code class="codeph">Print_media</code> and <code class="codeph">Online_media</code> have identical schemas. The statement creates a new LOB locator in table <code class="codeph">Print_media. It also</code> copies the LOB data from <code class="codeph">Online_media</code> to the location pointed to by the new LOB locator inserted in table <code class="codeph">Print_media</code>.</p>
<p>The following code fragment is based on the fact that the table <code class="codeph">Online_media</code> is of the same type as <code class="codeph">Print_media</code> referenced by the <code class="codeph">ad_textdocs_ntab</code> column of table <code class="codeph">Print_media</code>. It inserts values into the library table, and then inserts this same data into <code class="codeph">Print_media</code> by means of a <code class="codeph">SELECT</code>.</p>
<pre dir="ltr">/* Store records in the archive table Online_media: */
INSERT INTO Online_media  
   VALUES (3060, NULL, NULL, NULL, NULL, 
           &#39;some text about this CRT Monitor&#39;, NULL);

/* Insert values into Print_media by selecting from Online_media: */
INSERT INTO Print_media (product_id, ad_id, ad_sourcetext)
   (SELECT product_id, 11001, product_text
          FROM Online_media WHERE product_id = 3060);
</pre>
<div class="infoboxnotealso" id="GUID-C35F0A08-CF55-4097-9916-00B9CC98C7E3__GUID-FDECBDB6-00E9-40FB-BA7E-88682CAEA43A">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF01604" target="_blank" href="../SQLRF/statements_9015.htm#SQLRF01604"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information on <code class="codeph">INSERT</code></p>
</li>
<li>
<p><a class="olink COMSC00040" target="_blank" href="../COMSC/overview.htm#COMSC00040"><span class="italic">Oracle Database Sample Schemas</span></a> for a description of the PM Schema and the <code class="codeph">Print_media</code> table used in this example</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45566"></a><a id="ADLOB45567"></a><a id="ADLOB45565"></a>
<div class="props_rev_3"><a id="GUID-99294FB3-0AFA-4C33-B9C8-0532ACFE69D9"></a>
<h2 id="ADLOB-GUID-99294FB3-0AFA-4C33-B9C8-0532ACFE69D9" class="sect2"><span class="bold">Inserting a LOB Value Into a Table</span></h2>
<div>
<div class="section">
<p>You can insert a LOB value using <code class="codeph">EMPTY_CLOB()</code> or <code class="codeph">EMPTY_BLOB()</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Usage Notes</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Here are guidelines for inserting LOBs:</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Before Inserting Make the LOB Column Non-Null</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Before you write data to a persistent LOB, make the LOB column non-<code class="codeph">NULL</code>; that is, the LOB column must contain a locator that points to an empty or populated LOB value. You can initialize a <code class="codeph">BLOB</code> column value by using the function <code class="codeph">EMPTY_BLOB()</code> as a default predicate. Similarly, a <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> column value can be initialized by using the function <code class="codeph">EMPTY_CLOB()</code>.</p>
<p>You can also initialize a LOB column with a character or raw string less than 4000 bytes in size. For example:</p>
<pre dir="ltr">INSERT INTO Print_media (product_id, ad_id, ad_sourcetext)
     VALUES (1, 1, &#39;This is a One Line Advertisement&#39;);
</pre>
<p>Note that you can also perform this <a id="d62928e719" class="indexterm-anchor"></a>initialization during the <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> operation. See <span class="q">&#34;<a href="adlob_ddl.htm#GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203">Creating a Table Containing One or More LOB Columns</a>&#34;</span> for more information.</p>
<p>These functions are special functions in Oracle SQL, and are not part of the <code class="codeph">DBMS_LOB</code> package.</p>
<pre dir="ltr">/* In the new row of table Print_media, 
   the columns ad_sourcetext and ad_fltextn are initialized using EMPTY_CLOB(), 
   the columns ad_composite and ad_photo are initialized using EMPTY_BLOB(),
   the column formatted-doc in the nested table is initialized using
   EMPTY_BLOB(),
   the column logo in the column object is initialized using EMPTY_BLOB(): */   
INSERT INTO Print_media 
   VALUES (3060,11001, EMPTY_BLOB(), EMPTY_CLOB(),EMPTY_CLOB(),EMPTY_CLOB(), 
   textdoc_tab(textdoc_typ (&#39;HTML&#39;, EMPTY_BLOB())), EMPTY_BLOB(), NULL,
   adheader_typ(&#39;any header name&#39;, &lt;any date&gt;, &#39;ad header text goes here&#39;,
   EMPTY_BLOB()),
 &#39;Press release goes here&#39;);
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45568"></a>
<div class="props_rev_3"><a id="GUID-6DF2E05A-985D-4921-B945-95FF1F85AA8D"></a>
<h2 id="ADLOB-GUID-6DF2E05A-985D-4921-B945-95FF1F85AA8D" class="sect2">Inserting a Row by Initializing a LOB Locator Bind Variable</h2>
<div>
<p>You can insert a row by initializing a LOB locator bind variable.</p>
<p>Examples for this use case are provided in several programmatic environments:</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adlob_ddl.htm#GUID-EDA6FBF5-7FF5-4A76-BA22-A36ACFA886BC">About Inserting Rows with LOB Locator Bind Variables</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-A8AF57F8-5F21-4050-A9E0-2438D0F0B75C">PL/SQL: Inserting a Row by Initializing a LOB Locator Bind Variable</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-5E85BE11-51C8-402E-A399-7713129CE099">C (OCI): Inserting a Row by Initializing a LOB Locator Bind Variable</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-10E7C91C-93FC-4CE0-9757-2EFC1DF1F5CC">COBOL (Pro*COBOL): Inserting a Row by Initializing a LOB Locator Bind Variable</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-7D4D5121-4387-4266-9E05-6116DC12BAE2">C/C++ (Pro*C/C++): Inserting a Row by Initializing a LOB Locator Bind Variable</a></p>
</li>
<li>
<p><a href="adlob_ddl.htm#GUID-54C45A10-A803-425E-AE53-4826745C213B">Java (JDBC): Inserting a Row by Initializing a LOB Locator Bind Variable</a></p>
</li>
</ul>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>SQL: <a class="olink SQLRF01604" target="_blank" href="../SQLRF/statements_9015.htm#SQLRF01604"><span class="italic">Oracle Database SQL Language Reference</span></a>, the <code class="codeph">INSERT</code> statement</p>
</li>
<li>
<p>C (OCI): <a class="olink LNOCI17094" target="_blank" href="../LNOCI/oci16rel.htm#LNOCI17094"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> &#34;Relational Functions&#34;</p>
</li>
<li>
<p>C++ (OCCI): <a class="olink LNCPP" target="_blank" href="../LNCPP/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer&#39;s Guide</span></a></p>
</li>
<li>
<p>COBOL (Pro*COBOL) <a class="olink LNPCB" target="_blank" href="../LNPCB/toc.htm"><span class="italic">Pro*COBOL Programmer&#39;s Guide</span></a> for information on LOBs, usage notes on LOB Statements, and embedded SQL and precompiler directives &mdash; <code class="codeph">INSERT</code>.</p>
</li>
<li>
<p>C/C++ (Pro*C/C++): <a class="olink LNPCC020" target="_blank" href="../LNPCC/pc_afemb.htm#LNPCC020"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a> <code class="codeph">INSERT</code></p>
</li>
<li>
<p>Java (JDBC):<a class="olink JJDBC15000" target="_blank" href="../JJDBC/oralob.htm#JJDBC15000"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> &#34;Working With LOBs&#34; &mdash; Creating and Populating a <code class="codeph">BLOB</code> or <code class="codeph">CLOB</code> Colum</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADLOB45570"></a><a id="ADLOB45571"></a><a id="ADLOB45569"></a>
<div class="props_rev_3"><a id="GUID-EDA6FBF5-7FF5-4A76-BA22-A36ACFA886BC"></a>
<h3 id="ADLOB-GUID-EDA6FBF5-7FF5-4A76-BA22-A36ACFA886BC" class="sect3">About Inserting Rows with LOB Locator Bind Variables</h3>
<div>
<p>You need to consider these points.</p>
<div class="section">
<p class="subhead3"><span class="bold">Preconditions</span></p>
<p>Before you can insert a row using this technique, the following conditions must be met:</p>
<ul style="list-style-type: disc;">
<li>
<p>The table containing the source row must exist.</p>
</li>
<li>
<p>The destination table must exist.</p>
</li>
</ul>
<p>For details on creating tables containing LOB columns, see <span class="q">&#34;<a href="adlob_tables.htm#GUID-517E1234-EFCD-4D16-B69B-23F72A18A77D">LOB Storage Parameters</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3"><span class="bold">Usage Notes</span></p>
<p>For guidelines on how to <code class="codeph">INSERT</code> and <code class="codeph">UPDATE</code> a row containing a LOB when binds of more than 4000 bytes are involved, see <span class="q">&#34;<a href="adlob_data_interface.htm#GUID-5E2B4119-184C-4FE9-839D-3619CC23D9B7">Binds of All Sizes in INSERT and UPDATE Operations</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3"><span class="bold">Syntax</span></p>
<p>Review these syntax references for details on using this operation in each programmatic environment:</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45573"></a>
<div class="props_rev_3"><a id="GUID-A8AF57F8-5F21-4050-A9E0-2438D0F0B75C"></a>
<h3 id="ADLOB-GUID-A8AF57F8-5F21-4050-A9E0-2438D0F0B75C" class="sect3">PL/SQL: Inserting a Row by Initializing a LOB Locator Bind Variable</h3>
<div>
<div class="section">
<p>You can insert a row by initializing a LOB locator bind variable in PL/SQL</p>
<pre dir="ltr">/* This file is installed in the following path when you install */
/* the database: $ORACLE_HOME/rdbms/demo/lobs/plsql/linsert.sql */

/* inserting a row through an insert statement */

CREATE OR REPLACE PROCEDURE insertLOB_proc (Lob_loc IN BLOB) IS
BEGIN
  /* Insert the BLOB into the row */
  DBMS_OUTPUT.PUT_LINE(&#39;------------ LOB INSERT EXAMPLE ------------&#39;);
  INSERT INTO print_media (product_id, ad_id, ad_photo) 
        values (3106, 60315, Lob_loc);
END;
/
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45574"></a>
<div class="props_rev_3"><a id="GUID-5E85BE11-51C8-402E-A399-7713129CE099"></a>
<h3 id="ADLOB-GUID-5E85BE11-51C8-402E-A399-7713129CE099" class="sect3">C (OCI): Inserting a Row by Initializing a LOB Locator Bind Variable</h3>
<div>
<div class="section">
<p>You can insert a row by initializing a LOB locator bind variable in C (OCI).</p>
<pre dir="ltr">/* This file is installed in the following path when you install */
/* the database: $ORACLE_HOME/rdbms/demo/lobs/oci/linsert.c */

/* Insert the Locator into table using Bind Variables. */
#include &lt;oratypes.h&gt;
#include &lt;lobdemo.h&gt;
void insertLOB_proc(OCILobLocator *Lob_loc, OCIEnv *envhp,
                    OCIError *errhp, OCISvcCtx *svchp, OCIStmt *stmthp)
{
  int            product_id;
  OCIBind       *bndhp3;
  OCIBind       *bndhp2;
  OCIBind       *bndhp1;
  text          *insstmt = 
   (text *) &#34;INSERT INTO Print_media (product_id, ad_id, ad_sourcetext) \
             VALUES (:1, :2, :3)&#34;;

  printf (&#34;----------- OCI Lob Insert Demo --------------\n&#34;);   
  /* Insert the locator into the Print_media table with product_id=3060 */
  product_id = (int)3060;

  /* Prepare the SQL statement */
  checkerr (errhp, OCIStmtPrepare(stmthp, errhp, insstmt, (ub4) 
                                  strlen((char *) insstmt),
                                  (ub4) OCI_NTV_SYNTAX, (ub4)OCI_DEFAULT));

  /* Binds the bind positions */
  checkerr (errhp, OCIBindByPos(stmthp, &amp;bndhp1, errhp, (ub4) 1,
                                (void *) &amp;product_id, (sb4) sizeof(product_id),
                                SQLT_INT, (void *) 0, (ub2 *)0, (ub2 *)0,
                                (ub4) 0, (ub4 *) 0, (ub4) OCI_DEFAULT));

  checkerr (errhp, OCIBindByPos(stmthp, &amp;bndhp1, errhp, (ub4) 2,
                                (void *) &amp;product_id, (sb4) sizeof(product_id),
                                SQLT_INT, (void *) 0, (ub2 *)0, (ub2 *)0,
                                (ub4) 0, (ub4 *) 0, (ub4) OCI_DEFAULT));

  checkerr (errhp, OCIBindByPos(stmthp, &amp;bndhp2, errhp, (ub4) 3,
                                (void *) &amp;Lob_loc, (sb4) 0,  SQLT_CLOB,
                                (void *) 0, (ub2 *)0, (ub2 *)0,
                                (ub4) 0, (ub4 *) 0, (ub4) OCI_DEFAULT));

  /* Execute the SQL statement */
  checkerr (errhp, OCIStmtExecute(svchp, stmthp, errhp, (ub4) 1, (ub4) 0,
                                  (CONST OCISnapshot*) 0, (OCISnapshot*) 0,  
                                  (ub4) OCI_DEFAULT));
}
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45575"></a>
<div class="props_rev_3"><a id="GUID-10E7C91C-93FC-4CE0-9757-2EFC1DF1F5CC"></a>
<h3 id="ADLOB-GUID-10E7C91C-93FC-4CE0-9757-2EFC1DF1F5CC" class="sect3">COBOL (Pro*COBOL): Inserting a Row by Initializing a LOB Locator Bind Variable</h3>
<div>
<div class="section">
<p>You can insert a row by initializing a LOB locator bind variable in COBOL (Pro*COBOL).</p>
<pre dir="ltr">      * This file is installed in the following path when you install
      * the database: $ORACLE_HOME/rdbms/demo/lobs/procob/linsert.pco

       IDENTIFICATION DIVISION.
       PROGRAM-ID. INSERT-LOB.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 BLOB1 SQL-BLOB.
       01  USERID   PIC X(11) VALUES &#34;PM/<span class="italic">password</span>&#34;.
           EXEC SQL INCLUDE SQLCA END-EXEC.

       PROCEDURE DIVISION.
       INSERT-LOB.
    
           EXEC SQL WHENEVER SQLERROR DO PERFORM SQL-ERROR END-EXEC.
           EXEC SQL CONNECT :USERID END-EXEC.
      * Initialize the BLOB locator
           EXEC SQL ALLOCATE :BLOB1 END-EXEC.
      * Populate the LOB
           EXEC SQL WHENEVER NOT FOUND GOTO END-OF-BLOB END-EXEC.
           EXEC SQL 
              SELECT AD_PHOTO INTO :BLOB1 FROM PRINT_MEDIA
               WHERE PRODUCT_ID = 2268 AND AD_ID = 21001 END-EXEC.
  
      * Insert the value with PRODUCT_ID of 3060
           EXEC SQL 
              INSERT INTO PRINT_MEDIA (PRODUCT_ID, AD_PHOTO)
                 VALUES (3060, 11001, :BLOB1)END-EXEC.

      * Free resources held by locator
       END-OF-BLOB.
           EXEC SQL WHENEVER NOT FOUND CONTINUE END-EXEC.
           EXEC SQL FREE :BLOB1 END-EXEC.
           EXEC SQL ROLLBACK WORK RELEASE END-EXEC.
           STOP RUN.

       SQL-ERROR.
           EXEC SQL WHENEVER SQLERROR CONTINUE END-EXEC.
           DISPLAY &#34; &#34;.
           DISPLAY &#34;ORACLE ERROR DETECTED:&#34;.
           DISPLAY &#34; &#34;.
           DISPLAY SQLERRMC.
           EXEC SQL ROLLBACK WORK RELEASE END-EXEC.
           STOP RUN.
</pre>
<div class="infobox-note" id="GUID-10E7C91C-93FC-4CE0-9757-2EFC1DF1F5CC__GUID-0C239726-24E3-4FE9-B0AE-4DFED0E0795F">
<p class="notep1">Note:</p>
<p>For simplicity in demonstrating this feature, this example does not perform the password management techniques that a deployed system normally uses. In a production environment, follow the Oracle Database password management guidelines, and disable any sample accounts. See <a class="olink DBSEG50053" target="_blank" href="../DBSEG/app_devs.htm#DBSEG50053"><span class="italic">Oracle Database Security Guide</span></a> for password management guidelines and other security recommendations.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45576"></a>
<div class="props_rev_3"><a id="GUID-7D4D5121-4387-4266-9E05-6116DC12BAE2"></a>
<h3 id="ADLOB-GUID-7D4D5121-4387-4266-9E05-6116DC12BAE2" class="sect3">C/C++ (Pro*C/C++): Inserting a Row by Initializing a LOB Locator Bind Variable</h3>
<div>
<div class="section">
<p>You can insert a row by initializing a LOB locator bind variable in C/C++ (Pro*C/C++).</p>
<pre dir="ltr">/* This file is installed in the following path when you install */
/* the database: $ORACLE_HOME/rdbms/demo/lobs/proc/linsert.pc */

#include &lt;oci.h&gt;
#include &lt;stdio.h&gt;
#include &lt;sqlca.h&gt;

void Sample_Error()
{
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   printf(&#34;%.*s\n&#34;, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
   EXEC SQL ROLLBACK WORK RELEASE;
   exit(1);
}

void insertUseBindVariable_proc(Rownum, Lob_loc)
   int Rownum, Rownum2;
   OCIBlobLocator *Lob_loc;
{
   EXEC SQL WHENEVER SQLERROR DO Sample_Error();
   EXEC SQL INSERT INTO Print_media (product_id, ad_id, ad_photo)
      VALUES (:Rownum, :Rownum2, :Lob_loc);
}
void insertBLOB_proc()
{
   OCIBlobLocator *Lob_loc;

   /* Initialize the BLOB Locator: */
   EXEC SQL ALLOCATE :Lob_loc;

   /* Select the LOB from the row where product_id = 2268 and ad_id=21001: */
   EXEC SQL SELECT ad_photo INTO :Lob_loc
      FROM Print_media WHERE product_id = 2268 AND ad_id = 21001;

   /* Insert into the row where product_id = 3106 and ad_id = 13001: */
   insertUseBindVariable_proc(3106, 13001, Lob_loc);

   /* Release resources held by the locator: */
   EXEC SQL FREE :Lob_loc;
}

void main()
{
   char *samp = &#34;pm/<span class="italic">password</span>&#34;;
   EXEC SQL CONNECT :pm;
   insertBLOB_proc();
   EXEC SQL ROLLBACK WORK RELEASE;
}
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45578"></a>
<div class="props_rev_3"><a id="GUID-54C45A10-A803-425E-AE53-4826745C213B"></a>
<h3 id="ADLOB-GUID-54C45A10-A803-425E-AE53-4826745C213B" class="sect3">Java (JDBC): Inserting a Row by Initializing a LOB Locator Bind Variable</h3>
<div>
<div class="section">
<p>You can insert a row by initializing a LOB locator bind variable in Java (JDBC).</p>
<pre dir="ltr">/* This file is installed in the following path when you install */
/* the database: $ORACLE_HOME/rdbms/demo/lobs/java/linsert.java */
 
// Core JDBC classes: 
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
 
// Oracle Specific JDBC classes: 
import oracle.sql.*;
import oracle.jdbc.driver.*;
 
public class linsert
{
  public static void main (String args [])
       throws Exception
  {
    // Load the Oracle JDBC driver
    DriverManager.registerDriver (new oracle.jdbc.driver.OracleDriver ());
    // Connect to the database: 
    Connection conn =
       DriverManager.getConnection (&#34;jdbc:oracle:oci8:@&#34;, &#34;pm&#34;, &#34;<span class="italic">password</span>&#34;);
 
    // It&#39;s faster when auto commit is off: 
    conn.setAutoCommit (false);
 
    // Create a Statement: 
    Statement stmt = conn.createStatement ();
    try
    {
       ResultSet rset = stmt.executeQuery (
  &#34;SELECT ad_photo FROM Print_media WHERE product_id = 3106 AND ad_id = 13001&#34;);
       if (rset.next())
       {
          // retrieve the LOB locator from the ResultSet
          BLOB adphoto_blob = ((OracleResultSet)rset).getBLOB (1);
          OraclePreparedStatement ops = 
          (OraclePreparedStatement) conn.prepareStatement(
&#34;INSERT INTO Print_media (product_id, ad_id, ad_photo) VALUES (2268, &#34;
+ &#34;21001, ?)&#34;);
          ops.setBlob(1, adphoto_blob);
          ops.execute();
          conn.commit();
          conn.close();
       }
    }
    catch (SQLException e)
    {
       e.printStackTrace();
    }
  }
}
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADLOB45580"></a><a id="ADLOB45579"></a>
<div class="props_rev_3"><a id="GUID-A02B0C82-EC75-4993-BF34-4AE83B07FAA4"></a>
<h2 id="ADLOB-GUID-A02B0C82-EC75-4993-BF34-4AE83B07FAA4" class="sect2">Updating a LOB with EMPTY_CLOB() or EMPTY_BLOB()</h2>
<div>
<div class="section">
<p>You can UPDATE a LOB with <code class="codeph">EMPTY_CLOB()</code> or <code class="codeph">EMPTY_BLOB()</code>.</p>
<div class="infobox-note" id="GUID-A02B0C82-EC75-4993-BF34-4AE83B07FAA4__GUID-1A6EA93C-85A4-4091-BF36-8BB327CE53AC">
<p class="notep1">Note:</p>
<p>Performance improves when you update the LOB with the actual value, instead of using <code class="codeph">EMPTY_CLOB()</code> or <code class="codeph">EMPTY_BLOB()</code>.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Preconditions</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Before you write data to a persistent LOB, make the LOB column non-<code class="codeph">NULL</code>; that is, the LOB column must contain a locator that points to an empty or populated LOB value. You can initialize a <code class="codeph">BLOB</code> column value by using the function <code class="codeph">EMPTY_BLOB()</code> as a default predicate. Similarly, a <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> column value can be initialized by using the function <code class="codeph">EMPTY_CLOB()</code>.</p>
<p>You can also initialize a LOB column with a character or raw string less than 4000 bytes in size. For example:</p>
<pre dir="ltr">UPDATE Print_media 
          SET ad_sourcetext = &#39;This is a One Line Story&#39;
          WHERE product_id = 2268;
</pre>
<p>You can perform this initialization during <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> (see <span class="q">&#34;<a href="adlob_ddl.htm#GUID-571A3ACF-DEBF-4C83-B7F9-4F0889B08203">Creating a Table Containing One or More LOB Columns</a>&#34;</span>) or, as in this case, by means of an <code class="codeph">INSERT</code>.</p>
<p>The following example shows a series of updates using the <code class="codeph">EMPTY_CLOB</code> operation to different data types.</p>
<pre dir="ltr">UPDATE Print_media SET ad_sourcetext = EMPTY_CLOB() 
       WHERE product_id = 3060 AND ad_id = 11001;

UPDATE Print_media SET ad_fltextn = EMPTY_CLOB() 
       WHERE product_id = 3060 AND ad_id = 11001;

UPDATE Print_media SET ad_photo = EMPTY_BLOB()
       WHERE product_id = 3060 AND ad_id = 11001;
</pre>
<div class="infoboxnotealso" id="GUID-A02B0C82-EC75-4993-BF34-4AE83B07FAA4__GUID-D98EC283-29BF-4F50-9964-BF8E85B144EC">
<p class="notep1">See Also:</p>
<p>SQL: <a class="olink SQLRF01708" target="_blank" href="../SQLRF/statements_10008.htm#SQLRF01708"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information on <code class="codeph">UPDATE</code></p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45581"></a>
<div class="props_rev_3"><a id="GUID-1C2EBE02-C5D6-4C01-AE25-B8AB6687C426"></a>
<h2 id="ADLOB-GUID-1C2EBE02-C5D6-4C01-AE25-B8AB6687C426" class="sect2">Updating a Row by Selecting a LOB From Another Table</h2>
<div>
<div class="section">
<p>You can use the SQL <code class="codeph">UPDATE AS SELECT</code> statement to update a row containing a LOB column by selecting a LOB from another table.</p>
<p>To use this technique, you must update by means of a reference. For example, the following code updates data from <code class="codeph">online_media</code>:</p>
<pre dir="ltr">Rem Updating a row by selecting a LOB from another table (persistent LOBs)

UPDATE Print_media SET ad_sourcetext = 
   (SELECT * product_text FROM online_media WHERE product_id = 3060);
    WHERE product_id = 3060 AND ad_id = 11001;
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2782">
<tr>
<td class="cellalignment2794">
<table class="cellalignment2787">
<tr>
<td class="cellalignment2786"><a href="part_sql.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2786"><a href="adlob_sql_semantics.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2796">
<table class="cellalignment2785">
<tr>
<td class="cellalignment2786"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2786"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2786"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2786"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2786"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2786"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>