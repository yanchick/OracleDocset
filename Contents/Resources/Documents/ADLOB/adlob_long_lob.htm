<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-142"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Migrating%20Columns%20from%20LONGs%20to%20LOBs"></a><title>Migrating Columns from LONGs to LOBs</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="LONG-to-LOB migration, benefits and concepts, migrating, LONG to LOBs, see LONG-to-LOB, replication, restrictions, LOGGING, migrating LONG-to-LOBs, LONG-to-LOBs, constraints maintained, ALTER TABLE, LONG-to-LOB using ALTER TABLE, parallel LONG-to-LOB migration, migration of LONG to LOB in parallel, Data Pump, data interface for persistent LOBs, clustered tables, triggers, indexes, rebuilding indexes, rebuilding after LONG-to-LOB migration, LONG-to-LOBs, indexing, NULLs"/>
<meta name="dcterms.created" content="2017-03-16T22:27:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SecureFiles and Large Objects Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17605-12"/>
<meta name="dcterms.isVersionOf" content="ADLOB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adlob_plsql_semantics.htm" title="Previous" type="text/html"/>
<link rel="Next" href="part_api.htm" title="Next" type="text/html"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C6FC4583-4E71-4BDA-97CB-709EBC707773"></a> <span id="PAGE" style="display:none;">26/34</span> <!-- End Header -->
<a id="ADLOB008"></a>
<h1 id="ADLOB-GUID-C6FC4583-4E71-4BDA-97CB-709EBC707773" class="sect1"><span class="enumeration_chapter">18</span> Migrating Columns from LONGs to LOBs</h1>
<div>
<p>There are techniques for migrating tables that use <code class="codeph">LONG</code> data types to LOB data types.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adlob_long_lob.htm#GUID-12779894-59F6-4A6E-9089-1526F06396E4">Benefits of Migrating LONG Columns to LOB Columns</a></p>
</li>
<li>
<p><a href="adlob_long_lob.htm#GUID-3D95C1C7-B8FF-4E9A-A94A-41FB93DF3659">Preconditions for Migrating LONG Columns to LOB Columns</a></p>
</li>
<li>
<p><a href="adlob_long_lob.htm#GUID-BF1FDC61-A0A3-4EBC-9C5C-11E0EF7113E2">Determining how to Optimize the Application Using utldtree.sql</a></p>
</li>
<li>
<p><a href="adlob_long_lob.htm#GUID-8636A7D5-1149-40F9-A705-3903B5155D9B">Converting Tables from LONG to LOB Data Types</a></p>
</li>
<li>
<p><a href="adlob_long_lob.htm#GUID-4B971F7F-5D26-4D82-923D-C1DF78B88822">Migrating Applications from LONGs to LOBs</a></p>
<div class="infoboxnotealso" id="GUID-C6FC4583-4E71-4BDA-97CB-709EBC707773__GUID-3015B38F-EDCE-49E7-8372-DFF68F619C9E">
<p class="notep1">See Also:</p>
<p>For support for LOB data types in various programming environments:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adlob_sql_semantics.htm#GUID-47B94072-7782-40DD-BFD7-7D3D8A65B502" title="Various SQL semantics are supported for LOBs.">SQL Semantics and LOBs</a></p>
</li>
<li>
<p><a href="adlob_plsql_semantics.htm#GUID-4147D9E6-173B-4D62-AC0A-C440CCE8A63D">PL/SQL Semantics for LOBs</a></p>
</li>
<li>
<p><a href="adlob_data_interface.htm#GUID-4BFDD493-F3FE-451C-9B03-21669D635586">Data Interface for Persistent LOBs</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<a id="ADLOB45614"></a>
<div class="props_rev_3"><a id="GUID-12779894-59F6-4A6E-9089-1526F06396E4"></a>
<h2 id="ADLOB-GUID-12779894-59F6-4A6E-9089-1526F06396E4" class="sect2">Benefits of Migrating LONG Columns to LOB Columns</h2>
<div>
<p>There are many benefits to migrating table columns from <code class="codeph">LONG</code> data types to LOB data types.</p>
<div class="infobox-note" id="GUID-12779894-59F6-4A6E-9089-1526F06396E4__GUID-16D693A4-AE99-402C-8E94-D1348ECB6F87">
<p class="notep1">Note:</p>
<p>You can use various techniques to do either of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Convert columns of type <code class="codeph">LONG</code> to either <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> columns</p>
</li>
<li>
<p>Convert columns of type <code class="codeph">LONG</code> <code class="codeph">RAW</code> to <code class="codeph">BLOB</code> type columns</p>
</li>
</ul>
<p>Unless otherwise noted, discussions in this chapter regarding LONG to LOB conversions apply to both of these data type conversions.</p>
</div>
<p>These items compare the semantics of <code class="codeph">LONG</code> and LOB data types in various application development scenarios:</p>
<ul style="list-style-type: disc;">
<li>
<p>The number of <code class="codeph">LONG</code> type columns is limited. Any given table can have a maximum of only one <code class="codeph">LONG</code> type column. The number of LOB type columns in a table is not limited.</p>
</li>
<li>
<p>You can use the data interface for LOBs to enable replication of tables that contain <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> columns. Replication is allowed on LOB columns, but is not supported for <code class="codeph">LONG</code> and <code class="codeph">LONG</code> <code class="codeph">RAW</code> columns. The database omits columns containing <code class="codeph">LONG</code> and <code class="codeph">LONG</code> <code class="codeph">RAW</code> data types from replicated tables.</p>
<p>If a table is replicated or has materialized views, and its <code class="codeph">LONG</code> column is changed to LOB, then you may have to manually fix the replicas.</p>
<div class="infoboxnotewarn" id="GUID-12779894-59F6-4A6E-9089-1526F06396E4__GUID-24C463AC-81EC-47CD-BC39-F3C0C020C602">
<p class="notep1">WARNING:</p>
<p>Oracle does not support converting <code class="codeph">LOB</code>s into <code class="codeph">LONG</code>s. Ensure that you have no requirement to maintain any column as a <code class="codeph">LONG</code> before converting it into a <code class="codeph">LOB</code>.</p>
</div>
</li>
</ul>
</div>
</div>
<a id="ADLOB45615"></a>
<div class="props_rev_3"><a id="GUID-3D95C1C7-B8FF-4E9A-A94A-41FB93DF3659"></a>
<h2 id="ADLOB-GUID-3D95C1C7-B8FF-4E9A-A94A-41FB93DF3659" class="sect2">Preconditions for Migrating LONG Columns to LOB Columns</h2>
<div>
<p>Various preconditions must be met before converting a <code class="codeph">LONG</code> column to a LOB column.</p>
<div class="infoboxnotealso" id="GUID-3D95C1C7-B8FF-4E9A-A94A-41FB93DF3659__GUID-504B9059-71EC-45F3-BF33-B4BC8A8F2A0D">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adlob_long_lob.htm#GUID-4B971F7F-5D26-4D82-923D-C1DF78B88822">Migrating Applications from LONGs to LOBs</a>&#34;</span> before converting your table to determine whether any limitations on LOB columns prevent you from converting to LOBs.</p>
</div>
</div>
<a id="ADLOB45616"></a>
<div class="props_rev_3"><a id="GUID-1B767610-36E7-4176-8DDA-CE776DF2B269"></a>
<h3 id="ADLOB-GUID-1B767610-36E7-4176-8DDA-CE776DF2B269" class="sect3">Dropping a Domain Index on a LONG Column Before Converting to a LOB</h3>
<div>
<p>Any domain index on a <code class="codeph">LONG</code> column must be dropped before converting the <code class="codeph">LONG</code> column to LOB column. See <span class="q">&#34;<a href="adlob_long_lob.htm#GUID-24BCAC5D-B4AA-4DDA-865F-CA172ACFBB32">Rebuilding Indexes on Columns Converted from LONG to LOB Data Types</a>&#34;</span> for more information.</p>
</div>
</div>
<a id="ADLOB45617"></a>
<div class="props_rev_3"><a id="GUID-F235CF76-897A-41C8-8875-7D5F5177FD42"></a>
<h3 id="ADLOB-GUID-F235CF76-897A-41C8-8875-7D5F5177FD42" class="sect3">Preventing Generation of Redo Space on Tables Converted to LOB Data Types</h3>
<div>
<div class="section">
<p>Generation of redo space can cause performance problems during the process of converting <code class="codeph">LONG</code> columns. Redo changes for the table are logged during the conversion process only if the table has <code class="codeph">LOGGING</code> on.</p>
<p>Redo changes for the column being converted from <code class="codeph">LONG</code> to LOB are logged only if the storage characteristics of the LOB column indicate <code class="codeph">LOGGING</code>. The logging setting (<code class="codeph">LOGGING</code> or <code class="codeph">NOLOGGING</code>) for the LOB column is inherited from the tablespace in which the LOB is created.</p>
<p>To prevent generation of redo space during migration, do the following before migrating your table (syntax is in BNF):</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span><code class="codeph">ALTER TABLE Long_tab NOLOGGING;</code></span></li>
<li class="stepexpand"><span><code class="codeph">ALTER TABLE Long_tab MODIFY (long_col CLOB [DEFAULT &lt;</code><span class="italic"><code class="codeph">default_val</code></span><code class="codeph">&gt;]) LOB (long_col) STORE AS (NOCACHE NOLOGGING);</code></span>
<div>
<p>Note that you must also specify <code class="codeph">NOCACHE</code> when you specify <code class="codeph">NOLOGGING</code> in the <code class="codeph">STORE AS</code> clause.</p>
</div>
</li>
<li class="stepexpand"><span><code class="codeph">ALTER TABLE Long_tab MODIFY LOB (long_col) (CACHE);</code></span></li>
<li class="stepexpand"><span><code class="codeph">ALTER TABLE Long_tab LOGGING;</code></span></li>
<li class="stepexpand"><span>Make a backup of the tablespaces containing the table and the LOB column.</span></li>
</ol>
</div>
</div>
</div>
<a id="ADLOB45618"></a>
<div class="props_rev_3"><a id="GUID-BF1FDC61-A0A3-4EBC-9C5C-11E0EF7113E2"></a>
<h2 id="ADLOB-GUID-BF1FDC61-A0A3-4EBC-9C5C-11E0EF7113E2" class="sect2">Determining how to Optimize the Application Using utldtree.sql</h2>
<div>
<div class="section">
<p>When you migrate your table from <code class="codeph">LONG</code> to LOB column types, in PL/SQL, certain parts of your application may require rewriting. You can use the utility, <code class="codeph">rdbms/admin/utldtree.sql</code>, to determine which parts.</p>
<p>The <code class="codeph">utldtree.sql</code> utility enables you to recursively see all objects that are dependent on a given object. For example, you can see all objects which depend on a table with a <code class="codeph">LONG</code> column. You can only see objects for which you have permission.</p>
<p>Instructions on how to use <code class="codeph">utldtree.sql</code> are documented in the file itself. Also, <code class="codeph">utldtree.sql</code> is only needed for PL/SQL. For SQL and OCI, you have no requirement to change your applications.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45619"></a>
<div class="props_rev_3"><a id="GUID-8636A7D5-1149-40F9-A705-3903B5155D9B"></a>
<h2 id="ADLOB-GUID-8636A7D5-1149-40F9-A705-3903B5155D9B" class="sect2">Converting Tables from LONG to LOB Data Types</h2>
<div>
<div class="section">
<p>There are various issues and techniques for migrating existing tables from <code class="codeph">LONG</code> to LOB data types.</p>
<p>Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="adlob_long_lob.htm#GUID-C94BB1FB-516F-40E5-B92F-879513A07463">Migration Issues</a></p>
</li>
<li>
<p><span class="q">&#34;<a href="adlob_long_lob.htm#GUID-54020D5A-CF56-4164-8711-68BDE84162EA">Using ALTER TABLE to Convert LONG Columns to LOB Columns</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="adlob_long_lob.htm#GUID-3744A2D0-F410-4DFE-B6DD-2BC6A56738D1">Copying a LONG to a LOB Column Using the TO_LOB Operator</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="adlob_long_lob.htm#GUID-16B65DBF-790B-406F-B905-C0D1A0C38B32">Online Redefinition of Tables with LONG Columns</a>&#34;</span> where high availability is critical</p>
</li>
<li>
<p><span class="q">&#34;<a href="adlob_long_lob.htm#GUID-30082C8B-2780-40E2-BE4F-F27185E7AFCA">Using Oracle Data Pump to Migrate a Database</a>&#34;</span> when you can convert using this utility</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADLOB45621"></a>
<div class="props_rev_3"><a id="GUID-C94BB1FB-516F-40E5-B92F-879513A07463"></a>
<h3 id="ADLOB-GUID-C94BB1FB-516F-40E5-B92F-879513A07463" class="sect3">Migration Issues</h3>
<div>
<p>General issues concerning migration include the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>All constraints of your previous <code class="codeph">LONG</code> columns are maintained for the new LOB columns. The only constraint allowed on <code class="codeph">LONG</code> columns are <code class="codeph">NULL</code> and <code class="codeph">NOT</code> <code class="codeph">NULL</code>. To alter the constraints for these columns, or alter any other columns or properties of this table, you have to do so in a subsequent <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement.</p>
</li>
<li>
<p>If you do not specify a default value, then the default value for the <code class="codeph">LONG</code> column becomes the default value of the LOB column.</p>
</li>
<li>
<p>Most of the existing triggers on your table are still usable, however <code class="codeph">UPDATE OF</code> triggers can cause issues. See <span class="q">&#34;<a href="adlob_long_lob.htm#GUID-4B971F7F-5D26-4D82-923D-C1DF78B88822">Migrating Applications from LONGs to LOBs</a>&#34;</span> for more details.</p>
</li>
</ul>
</div>
</div>
<a id="ADLOB45620"></a>
<div class="props_rev_3"><a id="GUID-54020D5A-CF56-4164-8711-68BDE84162EA"></a>
<h3 id="ADLOB-GUID-54020D5A-CF56-4164-8711-68BDE84162EA" class="sect3">Using ALTER TABLE to Convert LONG Columns to LOB Columns</h3>
<div>
<div class="section">
<p>You can use the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement in SQL to convert a <code class="codeph">LONG</code> column to a LOB column.</p>
<p>To do so, use the following syntax:</p>
<pre dir="ltr">ALTER TABLE [&lt;schema&gt;.]&lt;table_name&gt;
   MODIFY ( &lt;<span class="bold">long_column_name</span>&gt; { CLOB | BLOB | NCLOB } 
<span class="bold">  [DEFAULT &lt;default_value</span>&gt;]) [LOB_storage_clause];
</pre>
<p>For example, if you had a table that was created as follows:</p>
<pre dir="ltr">CREATE TABLE Long_tab (id NUMBER, long_col LONG);
</pre>
<p>then you can change the column <code class="codeph">long_col</code> in table <code class="codeph">Long_tab</code> to data type <code class="codeph">CLOB</code> using following <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement:</p>
<pre dir="ltr">ALTER TABLE Long_tab MODIFY ( long_col CLOB );
</pre>
<div class="infobox-note" id="GUID-54020D5A-CF56-4164-8711-68BDE84162EA__GUID-6587BF67-4154-464E-85EE-0E01F4569DF8">
<p class="notep1">Note:</p>
<p>The <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement copies the contents of the table into a new space, and frees the old space at the end of the operation. This temporarily doubles the space requirements.</p>
</div>
<p>Note that when using the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement to convert a <code class="codeph">LONG</code> column to a LOB column, only the following options are allowed:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">DEFAULT</code> which enables you to specify a default value for the LOB column.</p>
</li>
<li>
<p>The <span class="italic"><code class="codeph">LOB_storage_clause</code></span>, which enables you to specify the LOB storage characteristics for the converted column, can be specified in the <code class="codeph">MODIFY</code> clause.</p>
</li>
</ul>
<p>Other <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> options are not allowed when converting a <code class="codeph">LONG</code> column to a LOB type column.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45622"></a>
<div class="props_rev_3"><a id="GUID-3744A2D0-F410-4DFE-B6DD-2BC6A56738D1"></a>
<h3 id="ADLOB-GUID-3744A2D0-F410-4DFE-B6DD-2BC6A56738D1" class="sect3">Copying a LONG to a LOB Column Using the TO_LOB Operator</h3>
<div>
<div class="section">
<p>If you do not want to use <code class="codeph">ALTER</code> <code class="codeph">TABLE</code>, then you can use the <code class="codeph">TO_LOB</code> operator on a <code class="codeph">LONG</code> column to copy it to a LOB column. You can use the <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> <code class="codeph">AS</code> <code class="codeph">SELECT</code> statement or the <code class="codeph">INSERT</code> <code class="codeph">AS</code> <code class="codeph">SELECT</code> statement with the <code class="codeph">TO_LOB</code> operator to copy data from a <code class="codeph">LONG</code> column to a <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> column, or from a <code class="codeph">LONG</code> <code class="codeph">RAW</code> column to a <code class="codeph">BLOB</code> column. For example, if you have a table with a <code class="codeph">LONG</code> column that was created as follows:</p>
<pre dir="ltr">CREATE TABLE Long_tab (id NUMBER, long_col LONG);  
</pre>
<p>then you can do the following to copy the column to a LOB column:</p>
<pre dir="ltr">CREATE TABLE Lob_tab (id NUMBER, clob_col CLOB);  
INSERT INTO Lob_tab SELECT id, TO_LOB(long_col) FROM long_tab;  
COMMIT;
</pre>
<p>If the <code class="codeph">INSERT</code> returns an error (because of lack of undo space), then you can incrementally migrate <code class="codeph">LONG</code> data to the LOB column using the <code class="codeph">WHERE</code> clause. After you ensure that the data is accurately copied, you can drop the original table and create a view or synonym for the new table using one of the following sequences:</p>
<pre dir="ltr">DROP TABLE Long_tab;  
CREATE VIEW Long_tab (id, long_col) AS SELECT * from Lob_tab; 
</pre>
<p>or</p>
<pre dir="ltr">DROP TABLE Long_tab;  
CREATE SYNONYM Long_tab FOR Lob_tab;
</pre>
<p>This series of operations is equivalent to changing the data type of the column <code class="codeph">Long_col</code> of table <code class="codeph">Long_tab</code> from <code class="codeph">LONG</code> to <code class="codeph">CLOB</code>. With this technique, you have to re-create any constraints, triggers, grants and indexes on the new table.</p>
<p>Use of the <code class="codeph">TO_LOB</code> operator is subject to the following limitations:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>You can use <code class="codeph">TO_LOB</code> to copy data to a LOB column, but not to a LOB attribute of an object type.</p>
</li>
<li>
<p>You cannot use <code class="codeph">TO_LOB</code> with a remote table. For example, the following statements do not work:</p>
<pre dir="ltr">INSERT INTO tb1@dblink (lob_col) SELECT TO_LOB(long_col) FROM tb2; 
INSERT INTO tb1 (lob_col) SELECT TO_LOB(long_col) FROM tb2@dblink; 
CREATE TABLE tb1 AS SELECT TO_LOB(long_col) FROM tb2@dblink; 
</pre></li>
<li>
<p>The <code class="codeph">TO_LOB</code> operator cannot be used in the <code class="codeph">CREATE</code> <code class="codeph">TABLE</code> <code class="codeph">AS</code> <code class="codeph">SELECT</code> statement to convert a <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> column to a LOB column when creating an index organized table.</p>
<p>To work around this limitation, create the index organized table, and then do an <code class="codeph">INSERT</code> <code class="codeph">AS</code> <code class="codeph">SELECT</code> of the <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> column using the <code class="codeph">TO_LOB</code> operator.</p>
</li>
<li>
<p>You cannot use <code class="codeph">TO_LOB</code> inside any PL/SQL block.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45624"></a><a id="ADLOB45625"></a><a id="ADLOB45623"></a>
<div class="props_rev_3"><a id="GUID-16B65DBF-790B-406F-B905-C0D1A0C38B32"></a>
<h3 id="ADLOB-GUID-16B65DBF-790B-406F-B905-C0D1A0C38B32" class="sect3">Online Redefinition of Tables with LONG Columns</h3>
<div>
<p>Tables with <code class="codeph">LONG</code> and <code class="codeph">LONG</code> <code class="codeph">RAW</code> columns can be migrated using online table redefinition. This technique is suitable for migrating LONG columns in database tables where high availability is critical.</p>
<p>To use this technique, you must convert <code class="codeph">LONG</code> columns to LOB types during the redefinition process as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>Any <code class="codeph">LONG</code> column must be converted to a <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> column.</p>
</li>
<li>
<p>Any <code class="codeph">LONG</code> <code class="codeph">RAW</code> column must be converted to a <code class="codeph">BLOB</code> column.</p>
</li>
</ul>
<p>This conversion is performed using the <code class="codeph">TO_LOB()</code> operator in the column mapping of the <code class="codeph">DBMS_REDEFINITION.START_REDEF_TABLE()</code> procedure.</p>
<div class="infobox-note" id="GUID-16B65DBF-790B-406F-B905-C0D1A0C38B32__GUID-BC6686A7-767F-4009-B880-B647DADF63CA">
<p class="notep1">Note:</p>
<p>You cannot perform online redefinition of tables with <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> columns unless you convert the columns to LOB types as described in this section.</p>
</div>
<p>General tasks involved in the online redefinition process are given in the following list. Issues specific to converting <code class="codeph">LONG</code> and <code class="codeph">LONG</code> <code class="codeph">RAW</code> columns are called out. See the related documentation referenced at the end of this section for additional details on the online redefinition process that are not described here.</p>
<ul style="list-style-type: disc;">
<li>
<p>Create an empty interim table. This table holds the migrated data when the redefinition process is done. In the interim table:</p>
<ul style="list-style-type: disc;">
<li>
<p>Define a <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> column for each <code class="codeph">LONG</code> column in the original table that you are migrating.</p>
</li>
<li>
<p>Define a <code class="codeph">BLOB</code> column for each <code class="codeph">LONG</code> <code class="codeph">RAW</code> column in the original table that you are migrating.</p>
</li>
</ul>
</li>
<li>
<p>Start the redefinition process. To do so, call <code class="codeph">DBMS_REDEFINITION.START_REDEF_TABLE</code> and pass the column mapping using the <code class="codeph">TO_LOB</code> operator as follows:</p>
<pre dir="ltr">DBMS_REDEFINITION.START_REDEF_TABLE(
    &#39;schema_name&#39;, 
    &#39;original_table&#39;,
    &#39;interim_table&#39;, 
    &#39;TO_LOB(<span class="italic">long_col_name</span>) <span class="italic">lob_col_name</span>&#39;,
    &#39;options_flag&#39;,
    &#39;orderby_cols&#39;); 
</pre>
<p>where <span class="italic"><code class="codeph">long_col_name</code></span> is the name of the <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> column that you are converting in the original table and <span class="italic"><code class="codeph">lob_col_name</code></span> is the name of the LOB column in the interim table. This LOB column holds the converted data.</p>
</li>
<li>
<p>Call the <code class="codeph">DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS</code> procedure as described in the related documentation.</p>
</li>
<li>
<p>Call the <code class="codeph">DBMS_REDEFINITION.FINISH_REDEF_TABLE</code> procedure as described in the related documentation.</p>
</li>
</ul>
<div class="section">
<p class="subhead3">Parallel Online Redefinition</p>
</div>
<!-- class="section" -->
<div class="section">
<p>On a system with sufficient resources for parallel execution, redefinition of a <code class="codeph">LONG</code> column to a LOB column can be executed in parallel under the following conditions:</p>
<p>In the case where the destination table is non-partitioned:</p>
<ul style="list-style-type: disc;">
<li>
<p>The segment used to store the LOB column in the destination table belongs to a locally managed tablespace with Automatic Segment Space Management (<a id="d73164e1532" class="indexterm-anchor"></a>ASSM) enabled, which is now the default.</p>
</li>
<li>
<p>There is a simple mapping from one <code class="codeph">LONG</code> column to one LOB column, and the destination table has only one LOB column.</p>
</li>
</ul>
<p>In the case where the destination table is partitioned, the normal methods for parallel execution for partitioning apply. When the destination table is partitioned, then online redefinition is executed in parallel.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Example of Online Redefinition</p>
</div>
<!-- class="section" -->
<div class="section">
<p>The following example demonstrates online redefinition with LOB columns.</p>
<pre dir="ltr">REM Grant privileges required for online redefinition.
GRANT execute ON DBMS_REDEFINITION TO pm;
GRANT ALTER ANY TABLE TO pm;
GRANT DROP ANY TABLE TO pm;
GRANT LOCK ANY TABLE TO pm;
GRANT CREATE ANY TABLE TO pm;
GRANT SELECT ANY TABLE TO pm;

REM Privileges required to perform cloning of dependent objects.
GRANT CREATE ANY TRIGGER TO pm;
GRANT CREATE ANY INDEX TO pm;

connect pm/<span class="italic">passwd</span>

drop table cust;
create table cust(c_id   number primary key,
                  c_zip  number,
                  c_name varchar(30) default null,
                  c_long long
                  );
insert into cust values(1, 94065, &#39;hhh&#39;, &#39;ttt&#39;);

-- Creating Interim Table 
-- There is no requirement to specify constraints because they are 
-- copied over from the original table.
create table cust_int(c_id   number not null,
                  c_zip  number,
                  c_name varchar(30) default null,
                  c_long clob
                  );

declare
 col_mapping varchar2(1000);
BEGIN
--  map all the columns in the interim table to the original table
 col_mapping :=
               &#39;c_id             c_id  , &#39;||
               &#39;c_zip            c_zip , &#39;||
               &#39;c_name           c_name, &#39;||
               &#39;to_lob(c_long)   c_long&#39;;

dbms_redefinition.start_redef_table(&#39;pm&#39;, &#39;cust&#39;, &#39;cust_int&#39;, col_mapping);
END;
/

declare
 error_count pls_integer := 0;
BEGIN
  dbms_redefinition.copy_table_dependents(&#39;pm&#39;, &#39;cust&#39;, &#39;cust_int&#39;,
                                          1, true, true, true, false,
                                          error_count);

  dbms_output.put_line(&#39;errors := &#39; || to_char(error_count));
END;
/

exec  dbms_redefinition.finish_redef_table(&#39;pm&#39;, &#39;cust&#39;, &#39;cust_int&#39;);

-- Drop the interim table
drop table cust_int;

desc cust;

-- The following insert statement fails. This illustrates 
-- that the primary key constraint on the c_id column is 
-- preserved after migration. 

insert into cust values(1, 94065, &#39;hhh&#39;, &#39;ttt&#39;);

select * from cust;
</pre>
<div class="infobox-note" id="GUID-16B65DBF-790B-406F-B905-C0D1A0C38B32__GUID-3073BA3C-401B-4AA8-A7D8-24B7D5B22885">
<p class="notep1">Note:</p>
<p>Related documentation provides additional details on the redefinition process:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ADMIN01514" target="_blank" href="../ADMIN/tables.htm#ADMIN01514"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> gives detailed procedures and examples of redefining tables online.</p>
</li>
<li>
<p><a class="olink ARPLS042" target="_blank" href="../ARPLS/d_redefi.htm#ARPLS042"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> includes information on syntax and other details on usage of procedures in the <code class="codeph">DBMS_REDEFINITION</code> package.</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45626"></a>
<div class="props_rev_3"><a id="GUID-30082C8B-2780-40E2-BE4F-F27185E7AFCA"></a>
<h3 id="ADLOB-GUID-30082C8B-2780-40E2-BE4F-F27185E7AFCA" class="sect3">Using Oracle Data Pump to Migrate a Database</h3>
<div>
<div class="section">
<p>If you are exporting data as part of a migration to a new database, create a table on the destination database with LOB columns and Data Pump calls the LONG-to-LOB function implicitly.</p>
<p>For details on using Oracle Data Pump, refer to <a class="olink SUTIL" target="_blank" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="ADLOB45627"></a>
<div class="props_rev_3"><a id="GUID-4B971F7F-5D26-4D82-923D-C1DF78B88822"></a>
<h2 id="ADLOB-GUID-4B971F7F-5D26-4D82-923D-C1DF78B88822" class="sect2">Migrating Applications from LONGs to LOBs</h2>
<div>
<p>There are differences between <code class="codeph">LONG</code> and LOB data types that may impact your application migration plans or require you to modify your application.</p>
</div>
<div class="props_rev_3"><a id="GUID-25C0FCCB-6E55-475A-8BC0-432686B85A5E"></a>
<h3 id="ADLOB-GUID-25C0FCCB-6E55-475A-8BC0-432686B85A5E" class="sect3">About Migrating Applications from Longs to LOBs</h3>
<div>
<p>Most APIs that work with <code class="codeph">LONG</code> data types in the PL/SQL and OCI environments are enhanced to also work with LOB data types.</p>
<p>These APIs are collectively referred to as the <span class="italic">data interface for persistent LOBs</span>, or simply the <span class="italic">data interface</span>. Among other things, the data interface provides the following benefits:</p>
<ul style="list-style-type: disc;">
<li>
<p>Changes needed are minimal in PL/SQL and OCI applications that use tables with columns converted from <code class="codeph">LONG</code> to LOB data types.</p>
</li>
<li>
<p>You can work with LOB data types in your application without having to deal with LOB locators.</p>
<div class="infoboxnotealso" id="GUID-25C0FCCB-6E55-475A-8BC0-432686B85A5E__GUID-A8C291D8-6C12-4400-B978-244B43F1C2B5">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adlob_data_interface.htm#GUID-4BFDD493-F3FE-451C-9B03-21669D635586">Data Interface for Persistent LOBs</a> for details on PL/SQL and OCI APIs included in the data interface.</p>
</li>
<li>
<p><a href="adlob_sql_semantics.htm#GUID-47B94072-7782-40DD-BFD7-7D3D8A65B502" title="Various SQL semantics are supported for LOBs.">SQL Semantics and LOBs</a> for details on SQL syntax supported for LOB data types.</p>
</li>
<li>
<p><a href="adlob_plsql_semantics.htm#GUID-4147D9E6-173B-4D62-AC0A-C440CCE8A63D">PL/SQL Semantics for LOBs</a> for details on PL/SQL syntax supported for LOB data types.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<a id="ADLOB45628"></a>
<div class="props_rev_3"><a id="GUID-81417086-F005-40EA-80A3-44EBE4CAEEEB"></a>
<h3 id="ADLOB-GUID-81417086-F005-40EA-80A3-44EBE4CAEEEB" class="sect3">LOB Columns Are Not Allowed in Clustered Tables</h3>
<div>
<p>LOB columns are not allowed in clustered tables, whereas <code class="codeph">LONG</code>s are allowed. If a table is a part of a cluster, then any <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> column cannot be changed to a LOB column.</p>
</div>
</div>
<a id="ADLOB45629"></a>
<div class="props_rev_3"><a id="GUID-8DB8045E-B8FD-4EAE-BBC7-F37D8A612833"></a>
<h3 id="ADLOB-GUID-8DB8045E-B8FD-4EAE-BBC7-F37D8A612833" class="sect3">LOB Columns Are Not Allowed in AFTER UPDATE OF Triggers</h3>
<div>
<p>You cannot have LOB columns in the <code class="codeph">UPDATE</code> <code class="codeph">OF</code> list of an <code class="codeph">AFTER UPDATE</code> <code class="codeph">OF</code> trigger. <code class="codeph">LONG</code> columns are allowed in such triggers. For example, the following create trigger statement is not valid:</p>
<pre dir="ltr">CREATE TABLE t(lobcol CLOB);
CREATE TRIGGER trig AFTER UPDATE OF lobcol ON t ...;
</pre>
<pre dir="ltr"></pre>
<p>All other triggers work on LOB columns.</p>
</div>
</div>
<a id="ADLOB45630"></a>
<div class="props_rev_3"><a id="GUID-24BCAC5D-B4AA-4DDA-865F-CA172ACFBB32"></a>
<h3 id="ADLOB-GUID-24BCAC5D-B4AA-4DDA-865F-CA172ACFBB32" class="sect3">Rebuilding Indexes on Columns Converted from LONG to LOB Data Types</h3>
<div>
<div class="section">
<p>Indexes on any column of the table being migrated must be manually rebuilt after converting any <code class="codeph">LONG</code> column to a LOB column. This includes function-based indexes.</p>
<p>Any function-based index on a <code class="codeph">LONG</code> column is unusable during the conversion process and must be rebuilt after converting. Application code that uses function-based indexing should work without modification after converting.</p>
<p>Note that, any domain indexes on a <code class="codeph">LONG</code> column must be dropped before converting the <code class="codeph">LONG</code> column to LOB column. You can rebuild the domain index after converting.</p>
<p>To rebuild an index after converting, use the following steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Select the index from your original table as follows:</span>
<div>
<pre dir="ltr">SELECT index_name FROM user_indexes WHERE table_name=&#39;LONG_TAB&#39;; 
</pre>
<div class="infobox-note" id="GUID-24BCAC5D-B4AA-4DDA-865F-CA172ACFBB32__GUID-293FDAA1-90C2-4D17-BF3D-166F7B0ADA4A">
<p class="notep1">Note:</p>
<p>The table name must be capitalized in this query.</p>
</div>
</div>
</li>
<li class="stepexpand"><span>For the selected index, use the command:</span>
<div>
<pre dir="ltr">ALTER INDEX &lt;index&gt; REBUILD
</pre></div>
</li>
</ol>
</div>
</div>
<a id="ADLOB45631"></a>
<div class="props_rev_3"><a id="GUID-9D6A3BE9-05F8-4461-8301-BF37F5C69341"></a>
<h3 id="ADLOB-GUID-9D6A3BE9-05F8-4461-8301-BF37F5C69341" class="sect3">Empty LOBs Compared to NULL and Zero Length LONGs</h3>
<div>
<p>A LOB column can hold an <span class="italic">empty</span> LOB. An empty LOB is a LOB locator that is fully initialized, but not populated with data. Because <code class="codeph">LONG</code> data types do not use locators, the <span class="italic">empty</span> concept does not apply to <code class="codeph">LONG</code> data types.</p>
<p>Both LOB column values and <code class="codeph">LONG</code> column values, inserted with an initial value of <code class="codeph">NULL</code> or an empty string literal, have a <code class="codeph">NULL</code> value. Therefore, application code that uses <code class="codeph">NULL</code> or zero-length values in a <code class="codeph">LONG</code> column functions exactly the same after you convert the column to a LOB type column.</p>
<p>In contrast, a LOB initialized to empty has a non-<code class="codeph">NULL</code> value as illustrated in the following example:</p>
<pre dir="ltr">CREATE TABLE long_tab(id NUMBER, long_col LONG);
CREATE TABLE lob_tab(id NUMBER, lob_col CLOB);

INSERT INTO long_tab values(1, NULL);

REM     A zero length string inserts a NULL into the LONG column:
INSERT INTO long_tab values(1, &#39;&#39;); 

INSERT INTO lob_tab values(1, NULL);

REM     A zero length string inserts a NULL into the LOB column:
INSERT INTO lob_tab values(1, &#39;&#39;);  

REM     Inserting an empty LOB inserts a non-NULL value: 
INSERT INTO lob_tab values(1, empty_clob());  

DROP TABLE long_tab;
DROP TABLE lob_tab;
</pre></div>
</div>
<a id="ADLOB45632"></a>
<div class="props_rev_3"><a id="GUID-4D1CFD16-CCBD-406D-AA98-225D4774BB1C"></a>
<h3 id="ADLOB-GUID-4D1CFD16-CCBD-406D-AA98-225D4774BB1C" class="sect3">Overloading with Anchored Types</h3>
<div>
<div class="section">
<p>For applications using anchored types, some overloaded variables resolve to different targets during the conversion to LOBs. For example, given the procedure <code class="codeph">p</code> overloaded with specifications 1 and 2:</p>
<pre dir="ltr">procedure p(l long) is ...;       -- (specification 1)  
procedure p(c clob) is ...;       -- (specification 2)  
</pre>
<p>and the procedure call:</p>
<pre dir="ltr">declare  
     var  longtab.longcol%type;  
   BEGIN  
     ...  
   p(var);  
     ...  
END;  
</pre>
<p>Prior to migrating from <code class="codeph">LONG</code> to LOB columns, this call would resolve to specification 1. Once <code class="codeph">longtab</code> is migrated to LOB columns this call resolves to specification 2. Note that this would also be true if the parameter type in specification 1 were a <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, <code class="codeph">RAW</code>, <code class="codeph">LONG</code> <code class="codeph">RAW</code>.</p>
<p>If you have migrated you tables from <code class="codeph">LONG</code> columns to LOB columns, then you must manually examine your applications and determine whether overloaded procedures must be changed.</p>
<p>Some applications that included overloaded procedures with LOB arguments before migrating may still break. This includes applications that do not use <code class="codeph">LONG</code> anchored types. For example, given the following specifications (1 and 2) and procedure call for procedure <code class="codeph">p</code>:</p>
<pre dir="ltr">procedure p(n number) is ...;       -- (1)  
procedure p(c clob) is ...;         -- (2)  
  
p(&#39;123&#39;);                 -- procedure call 
</pre>
<p>Before migrating, the only conversion allowed was <code class="codeph">CHAR</code> to <code class="codeph">NUMBER</code>, so specification 1 would be chosen. After migrating, both conversions are allowed, so the call is ambiguous and raises an overloading error.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADLOB45633"></a>
<div class="props_rev_3"><a id="GUID-97D40D64-B271-45F3-96F6-AD1D20B478A9"></a>
<h3 id="ADLOB-GUID-97D40D64-B271-45F3-96F6-AD1D20B478A9" class="sect3">Some Implicit Conversions Are Not Supported for LOB Data Types</h3>
<div>
<p>PL/SQL permits implicit conversion from <code class="codeph">NUMBER</code>, <code class="codeph">DATE</code>, <code class="codeph">ROW_ID</code>, <code class="codeph">BINARY_INTEGER</code>, and <code class="codeph">PLS_INTEGER</code> data types to a <code class="codeph">LONG</code>; however, implicit conversion from these data types to a LOB is not allowed.</p>
<p>If your application uses these implicit conversions, then you have to explicitly convert these types using the <code class="codeph">TO_CHAR</code> operator for character data or the <code class="codeph">TO_RAW</code> operator for binary data. For example, if your application has an assignment operation such as:</p>
<pre dir="ltr">number_var := long_var;  -- The RHS is a LOB variable after converting. 
</pre>
<p>then you must modify your code as follows:</p>
<pre dir="ltr">number_var := TO_CHAR(long_var); 
-- Assuming that long_var is of type CLOB after conversion
</pre>
<p>The following conversions are not supported for LOB types:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BLOB</code> to <code class="codeph">VARCHAR2</code>, <code class="codeph">CHAR</code>, or <code class="codeph">LONG</code></p>
</li>
<li>
<p><code class="codeph">CLOB</code> to <code class="codeph">RAW</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code></p>
</li>
</ul>
<p>This applies to all operations where implicit conversion takes place. For example if you have a <code class="codeph">SELECT</code> statement in your application as follows:</p>
<pre dir="ltr">SELECT long_raw_column INTO my_varchar2 VARIABLE FROM my_table
</pre>
<pre dir="ltr"></pre>
<p>and <code class="codeph">long_raw_column</code> is a <code class="codeph">BLOB</code> after converting your table, then the <code class="codeph">SELECT</code> statement produces an error. To make this conversion work, you must use the <code class="codeph">TO_RAW</code> operator to explicitly convert the <code class="codeph">BLOB</code> to a <code class="codeph">RAW</code> as follows:</p>
<pre dir="ltr">SELECT TO_RAW(long_raw_column) INTO my_varchar2 VARIABLE FROM my_table  
</pre>
<pre dir="ltr"></pre>
<p>The same holds for selecting a <code class="codeph">CLOB</code> into a <code class="codeph">RAW</code> variable, or for assignments of <code class="codeph">CLOB</code> to <code class="codeph">RAW</code> and <code class="codeph">BLOB</code> to <code class="codeph">VARCHAR2</code>.</p>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2782">
<tr>
<td class="cellalignment2794">
<table class="cellalignment2787">
<tr>
<td class="cellalignment2786"><a href="adlob_plsql_semantics.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2786"><a href="part_api.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2796">
<table class="cellalignment2785">
<tr>
<td class="cellalignment2786"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2786"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2786"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2786"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2786"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2786"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>