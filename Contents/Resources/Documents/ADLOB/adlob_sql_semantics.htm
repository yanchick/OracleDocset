<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-148"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/SQL%20Semantics%20and%20LOBs"></a><title>SQL Semantics and LOBs</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="Various SQL semantics are supported for LOBs."/>
<meta name="keywords" content="improved LOB usability, accessing LOBs, using SQL character functions, SQL, character functions, improved, VARCHAR2, using SQL functions and operators with LOBs, SQL semantics supported for use with LOBs, implicit conversion of CLOB to character type, conversion, implicit from CLOB to character type, CLOB, session collation settings, NCLOB, CLOB and NCLOB, UNICODE, VARCHAR2 and CLOBs support, codepoint semantics, SQL functions on LOBs, return type, return value, LENGTH return value for LOBs, DBMS_LOB.GETLENGTH return value, features where LOBs cannot be used, SQL semantics and LOBs, VARCHAR2, also RAW, applied to CLOBs and BLOBs, ISNULL usage with LOBs, IS NULL usage with LOBs, WHERE Clause Usage with LOBs, built-in functions, remote, remote built-in functions"/>
<meta name="dcterms.created" content="2017-03-16T22:27:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database SecureFiles and Large Objects Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17605-12"/>
<meta name="dcterms.isVersionOf" content="ADLOB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="adlob_ddl.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adlob_plsql_semantics.htm" title="Next" type="text/html"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-47B94072-7782-40DD-BFD7-7D3D8A65B502"></a> <span id="PAGE" style="display:none;">24/34</span> <!-- End Header -->
<a id="ADLOB010"></a>
<h1 id="ADLOB-GUID-47B94072-7782-40DD-BFD7-7D3D8A65B502" class="sect1"><span class="enumeration_chapter">16</span> SQL Semantics and LOBs</h1>
<div>
<p>Various SQL semantics are supported for LOBs.</p>
<p>These techniques allow you to use LOBs directly in SQL code and provide an alternative to using LOB-specific APIs for some operations.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="adlob_sql_semantics.htm#GUID-90B2459D-E8B5-499E-A9E7-E1295C8D4B5E">About Using LOBs in SQL</a></p>
</li>
<li>
<p><a href="adlob_sql_semantics.htm#GUID-10C6706D-CE73-4E21-A2B1-55F11A27A6EF" title="Variations on certain functions are provided for Unicode support.">SQL Functions and Operators Supported for Use with LOBs</a></p>
</li>
<li>
<p><a href="adlob_sql_semantics.htm#GUID-AF0A6CE4-2217-489A-AFB4-F66729227A59">Implicit Conversion of LOB Data Types in SQL</a></p>
</li>
<li>
<p><a href="adlob_sql_semantics.htm#GUID-8287AF94-2E69-4BB7-B4EB-0584D10DD144">Unsupported Use of LOBs in SQL</a></p>
</li>
<li>
<p><a href="adlob_sql_semantics.htm#GUID-EF35985B-974B-405A-8C21-58AB04E46404">VARCHAR2 and RAW Semantics for LOBs</a></p>
<div class="infoboxnotealso" id="GUID-47B94072-7782-40DD-BFD7-7D3D8A65B502__GUID-01BD52FC-8E87-41B9-92FB-58BDF70AAD16">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="adlob_performance.htm#GUID-D5560166-21AA-4F37-8DB3-398EEB15F5F8">Performance Considerations for SQL Semantics and LOBs</a>&#34;</span>.</p>
</div>
</li>
<li>
<p><a href="adlob_sql_semantics.htm#GUID-ABE5617D-9DC0-42F1-8475-D5B369A0B3BD">Built-in Functions for Remote LOBs and BFILEs</a></p>
</li>
</ul>
</div>
<a id="ADLOB45582"></a>
<div class="props_rev_3"><a id="GUID-90B2459D-E8B5-499E-A9E7-E1295C8D4B5E"></a>
<h2 id="ADLOB-GUID-90B2459D-E8B5-499E-A9E7-E1295C8D4B5E" class="sect2">About Using LOBs in SQL</h2>
<div>
<p>You can access <code class="codeph">CLOB</code> and <code class="codeph">NCLOB</code> data types using SQL <code class="codeph">VARCHAR2</code> semantics, such as SQL string operators and functions. (<code class="codeph">LENGTH</code> functions can be used with <code class="codeph">BLOB</code> data types and <code class="codeph">CLOB</code> and <code class="codeph">NCLOB</code>s.) These techniques are beneficial in the following situations:</p>
<ul style="list-style-type: disc;">
<li>
<p>When performing operations on LOBs that are relatively small in size (up to about 100K bytes).</p>
</li>
<li>
<p>After migrating your database from <code class="codeph">LONG</code> columns to LOB data types, any SQL string functions, contained in your existing PL/SQL application, continue to work after the migration.</p>
</li>
</ul>
<p>SQL semantics are not recommended in the following situations:</p>
<ul style="list-style-type: disc;">
<li>
<p>When you use advanced features such as random access and piece-wise fetch, you must use LOB APIs.</p>
</li>
<li>
<p>When performing operations on LOBs that are relatively large in size (greater than 1MB) using SQL semantics can impact performance. Using the LOB APIs is recommended in this situation.</p>
<div class="infobox-note" id="GUID-90B2459D-E8B5-499E-A9E7-E1295C8D4B5E__GUID-65FB5561-05F6-4530-B8DE-0D7358918937">
<p class="notep1">Note:</p>
<p>SQL semantics are used with persistent and temporary LOBs. (SQL semantics do not apply to <code class="codeph">BFILE</code> columns because <code class="codeph">BFILE</code> is a read-only data type.)</p>
</div>
</li>
</ul>
</div>
</div>
<a id="ADLOB45583"></a>
<div class="props_rev_3"><a id="GUID-10C6706D-CE73-4E21-A2B1-55F11A27A6EF"></a>
<h2 id="ADLOB-GUID-10C6706D-CE73-4E21-A2B1-55F11A27A6EF" class="sect2">SQL Functions and Operators Supported for Use with LOBs</h2>
<div>
<p>Many SQL operators and functions that take <code class="codeph">VARCHAR2</code> columns as arguments also accept LOB columns.</p>
</div>
<div class="sect3"><a id="GUID-F53377AF-689E-4B95-873D-103206126C3B"></a>
<h3 id="ADLOB-GUID-F53377AF-689E-4B95-873D-103206126C3B" class="sect3">About SQL Functions and Operators for LOBs</h3>
<div>
<p>This list summarizes those categories of SQL functions and operators that are supported for use with LOBs. Details on individual functions and operators are given in <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a>.</p>
<ul style="list-style-type: disc;">
<li>
<p>Concatenation</p>
</li>
<li>
<p>Comparison</p>
<p>(Some comparison functions are not supported for use with LOBs.)</p>
</li>
<li>
<p>Character functions</p>
</li>
<li>
<p>Conversion</p>
<p>(Some conversion functions are not supported for use with LOBs.)</p>
</li>
</ul>
<p>The following categories of functions are not supported for use with LOBs:</p>
<ul style="list-style-type: disc;">
<li>
<p>Aggregate functions</p>
<p>Note that although pre-defined aggregate functions are not supported for use with LOBs, you can create user-defined aggregate functions to use with LOBs. See the <a class="olink ADDCI" target="_blank" href="../ADDCI/toc.htm"><span class="italic">Oracle Database Data Cartridge Developer&#39;s Guide</span></a> for more information on user-defined aggregate functions.</p>
</li>
<li>
<p>Unicode functions</p>
</li>
</ul>
<p>Details on individual functions and operators are in <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a>, which lists SQL operators and functions that take <code class="codeph">VARCHAR2</code> types as operands or arguments, or return a <code class="codeph">VARCHAR2</code> value. The SQL column identifies the functions and operators that are supported for <code class="codeph">CLOB</code> and <code class="codeph">NCLOB</code> data types. (The <code class="codeph">LENGTH</code> function is also supported for the <code class="codeph">BLOB</code> data type.)</p>
<p>The <code class="codeph">DBMS_LOB</code> PL/SQL package supplied with Oracle Database supports using LOBs with most of the functions listed in <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a> as indicated in the PL/SQL column.</p>
<div class="infobox-note" id="GUID-F53377AF-689E-4B95-873D-103206126C3B__GUID-52DADA8F-73AD-45C9-AF48-A432B0E17F03">
<p class="notep1">Note:</p>
<p>Operators and functions with No indicated in the SQL column of <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a> do not work in SQL queries used in PL/SQL blocks - even though some of these operators and functions are supported for use directly in PL/SQL code.</p>
</div>
</div>
</div>
<a id="ADLOB45585"></a><a id="ADLOB45584"></a>
<div class="sect3"><a id="GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D"></a>
<h3 id="ADLOB-GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D" class="sect3">Implicit Conversion of CLOB to CHAR Types</h3>
<div>
<p>Functions designated as CNV in the SQL or PL/SQL column of <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a> are performed by converting the <code class="codeph">CLOB</code> to a character data type, such as <code class="codeph">VARCHAR2</code>. In the SQL environment, only the first 4K bytes of the <code class="codeph">CLOB</code> are converted and used in the operation; in the PL/SQL environment, only the first 32K bytes of the <code class="codeph">CLOB</code> are converted and used in the operation.</p>
<div class="tblformalwide" id="GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221">
<p class="titleintable">Table 16-1 SQL VARCHAR2 Functions and Operators on LOBs</p>
<table class="cellalignment2809" title="SQL VARCHAR2 Functions and Operators on LOBs" summary="This table is described in the preceding text">
<thead>
<tr class="cellalignment2783">
<th class="cellalignment2840" id="d64112e553">Category</th>
<th class="cellalignment2841" id="d64112e556">Operator / Function</th>
<th class="cellalignment2817" id="d64112e559">SQL Example / Comments</th>
<th class="cellalignment2842" id="d64112e562">SQL</th>
<th class="cellalignment2843" id="d64112e565">PL/SQL</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e570" headers="d64112e553">
<p><span class="bold">Concatenation</span></p>
</td>
<td class="cellalignment2845" headers="d64112e570 d64112e556">
<p><code class="codeph">||</code>, <code class="codeph">CONCAT()</code></p>
</td>
<td class="cellalignment2820" headers="d64112e570 d64112e559">
<p><code class="codeph">Select clobCol || clobCol2 from tab;</code></p>
</td>
<td class="cellalignment2846" headers="d64112e570 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e570 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e592" headers="d64112e553">
<p><span class="bold">Comparison</span></p>
</td>
<td class="cellalignment2845" headers="d64112e592 d64112e556">
<p><code class="codeph">=</code> , <code class="codeph">!=</code>, <code class="codeph">&gt;</code>, <code class="codeph">&gt;=</code>, <code class="codeph">&lt;</code>, <code class="codeph">&lt;=</code>, <code class="codeph">&lt;&gt;</code>, <code class="codeph">^=</code></p>
</td>
<td class="cellalignment2820" headers="d64112e592 d64112e559">
<p><code class="codeph">if clobCol=clobCol2 then...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e592 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e592 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e633" headers="d64112e553">
<p><span class="bold">Comparison</span></p>
</td>
<td class="cellalignment2845" headers="d64112e633 d64112e556">
<p><code class="codeph">IN</code>, <code class="codeph">NOT</code> <code class="codeph">IN</code></p>
</td>
<td class="cellalignment2820" headers="d64112e633 d64112e559">
<p><code class="codeph">if clobCol NOT IN (clob1, clob2, clob3) then...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e633 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e633 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e658" headers="d64112e553">
<p><span class="bold">Comparison</span></p>
</td>
<td class="cellalignment2845" headers="d64112e658 d64112e556">
<p><code class="codeph">SOME</code>, <code class="codeph">ANY</code>, <code class="codeph">ALL</code></p>
</td>
<td class="cellalignment2820" headers="d64112e658 d64112e559">
<p><code class="codeph">if clobCol &lt; SOME (select clobCol2 from...) then...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e658 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e658 d64112e565">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e683" headers="d64112e553">
<p><span class="bold">Comparison</span></p>
</td>
<td class="cellalignment2845" headers="d64112e683 d64112e556">
<p><code class="codeph">BETWEEN</code></p>
</td>
<td class="cellalignment2820" headers="d64112e683 d64112e559">
<p><code class="codeph">if clobCol BETWEEN clobCol2 and clobCol3 then...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e683 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e683 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e702" headers="d64112e553">
<p><span class="bold">Comparison</span></p>
</td>
<td class="cellalignment2845" headers="d64112e702 d64112e556">
<p><code class="codeph">LIKE [ESCAPE]</code></p>
</td>
<td class="cellalignment2820" headers="d64112e702 d64112e559">
<p><code class="codeph">if clobCol LIKE &#39;%pattern%&#39; then...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e702 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e702 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e722" headers="d64112e553">
<p><span class="bold">Comparison</span></p>
</td>
<td class="cellalignment2845" headers="d64112e722 d64112e556">
<p><code class="codeph">IS [NOT] NULL</code></p>
</td>
<td class="cellalignment2820" headers="d64112e722 d64112e559">
<p><code class="codeph">where clobCol IS NOT NULL</code></p>
</td>
<td class="cellalignment2846" headers="d64112e722 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e722 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e741" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e741 d64112e556">
<p><code class="codeph">INITCAP</code>, <code class="codeph">NLS_INITCAP</code></p>
</td>
<td class="cellalignment2820" headers="d64112e741 d64112e559">
<p><code class="codeph">select INITCAP(clobCol) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e741 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e741 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e763" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e763 d64112e556">
<p><code class="codeph">LOWER</code>, <code class="codeph">NLS_LOWER</code>, <code class="codeph">UPPER</code>, <code class="codeph">NLS_UPPER</code></p>
</td>
<td class="cellalignment2820" headers="d64112e763 d64112e559">
<p><code class="codeph">...where LOWER(clobCol1) = LOWER(clobCol2)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e763 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e763 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e791" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e791 d64112e556">
<p><code class="codeph">LPAD</code>, <code class="codeph">RPAD</code></p>
</td>
<td class="cellalignment2820" headers="d64112e791 d64112e559">
<p><code class="codeph">select RPAD(clobCol, 20, &#39; La&#39;) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e791 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e791 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e813" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e813 d64112e556">
<p><code class="codeph">TRIM</code>, <code class="codeph">LTRIM</code>, <code class="codeph">RTRIM</code></p>
</td>
<td class="cellalignment2820" headers="d64112e813 d64112e559">
<p><code class="codeph">...where RTRIM(LTRIM(clobCol,&#39;ab&#39;), &#39;xy&#39;) = &#39;cd&#39;</code></p>
</td>
<td class="cellalignment2846" headers="d64112e813 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e813 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e839" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e839 d64112e556">
<p><code class="codeph">REPLACE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e839 d64112e559">
<p><code class="codeph">select REPLACE(clobCol, &#39;orig&#39;,&#39;new&#39;) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e839 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e839 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e858" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e858 d64112e556">
<p><code class="codeph">SOUNDEX</code></p>
</td>
<td class="cellalignment2820" headers="d64112e858 d64112e559">
<p><code class="codeph">...where SOUNDEX(clobCOl) = SOUNDEX(&#39;SMYTHE&#39;)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e858 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e858 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e877" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e877 d64112e556">
<p><code class="codeph">SUBSTR</code></p>
</td>
<td class="cellalignment2820" headers="d64112e877 d64112e559">
<p><code class="codeph">...where substr(clobCol, 1,4) = like &#39;THIS&#39;</code></p>
</td>
<td class="cellalignment2846" headers="d64112e877 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e877 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e897" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e897 d64112e556">
<p><code class="codeph">TRANSLATE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e897 d64112e559">
<p><code class="codeph">select TRANSLATE(clobCol, &#39;123abc&#39;,&#39;NC&#39;) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e897 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e897 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e916" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e916 d64112e556">
<p><code class="codeph">ASCII</code></p>
</td>
<td class="cellalignment2820" headers="d64112e916 d64112e559">
<p><code class="codeph">select ASCII(clobCol) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e916 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e916 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e935" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e935 d64112e556">
<p><code class="codeph">INSTR</code></p>
</td>
<td class="cellalignment2820" headers="d64112e935 d64112e559">
<p><code class="codeph">...where instr(clobCol, &#39;book&#39;) = 11</code></p>
</td>
<td class="cellalignment2846" headers="d64112e935 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e935 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e955" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e955 d64112e556">
<p><code class="codeph">LENGTH</code></p>
</td>
<td class="cellalignment2820" headers="d64112e955 d64112e559">
<p><code class="codeph">...where length(clobCol) != 7;</code></p>
</td>
<td class="cellalignment2846" headers="d64112e955 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e955 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e975" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e975 d64112e556">
<p><code class="codeph">NLSSORT</code></p>
</td>
<td class="cellalignment2820" headers="d64112e975 d64112e559">
<p><code class="codeph">...where NLSSORT (clobCol,&#39;NLS_SORT = German&#39;) &gt; NLSSORT (&#39;S&#39;,&#39;NLS_SORT = German&#39;)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e975 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e975 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e994" headers="d64112e553">
<p><span class="bold">Character Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e994 d64112e556">
<p><code class="codeph">INSTRB</code>, <code class="codeph">SUBSTRB</code>, <code class="codeph">LENGTHB</code></p>
</td>
<td class="cellalignment2820" headers="d64112e994 d64112e559">
<p>These functions are supported only for <code class="codeph">CLOB</code>s that use single-byte character sets. (<code class="codeph">LENGTHB</code> is supported for <code class="codeph">BLOB</code>s and <code class="codeph">CLOB</code>s.)</p>
</td>
<td class="cellalignment2846" headers="d64112e994 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e994 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1030" headers="d64112e553">
<p><span class="bold">Character Functions - Regular Expressions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1030 d64112e556">
<p><code class="codeph">REGEXP_LIKE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1030 d64112e559">
<p>This function searches a character column for a pattern. Use this function in the <code class="codeph">WHERE</code> clause of a query to return rows matching the regular expression you specify.</p>
<p>See the <a class="olink SQLRF00501" target="_blank" href="../SQLRF/conditions007.htm#SQLRF00501"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax details on SQL functions for regular expressions. See the <a class="olink ADFNS1003" target="_blank" href="../ADFNS/adfns_regexp.htm#ADFNS1003"><span class="italic">Oracle Database Development Guide</span></a> for information on using regular expressions with the database.</p>
</td>
<td class="cellalignment2846" headers="d64112e1030 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1030 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1063" headers="d64112e553">
<p><span class="bold">Character Functions - Regular Expressions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1063 d64112e556">
<p><code class="codeph">REGEXP_REPLACE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1063 d64112e559">
<p>This function searches for a pattern in a character column and replaces each occurrence of that pattern with the pattern you specify.</p>
</td>
<td class="cellalignment2846" headers="d64112e1063 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1063 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1082" headers="d64112e553">
<p><span class="bold">Character Functions - Regular Expressions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1082 d64112e556">
<p><code class="codeph">REGEXP_INSTR</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1082 d64112e559">
<p>This function searches a string for a given occurrence of a regular expression pattern. You specify which occurrence you want to find and the start position to search from. This function returns an integer indicating the position in the string where the match is found.</p>
</td>
<td class="cellalignment2846" headers="d64112e1082 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1082 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1100" headers="d64112e553">
<p><span class="bold">Character Functions - Regular Expressions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1100 d64112e556">
<p><code class="codeph">REGEXP_SUBSTR</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1100 d64112e559">
<p>This function returns the actual substring matching the regular expression pattern you specify.</p>
</td>
<td class="cellalignment2846" headers="d64112e1100 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1100 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1118" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1118 d64112e556">
<p><code class="codeph">CHARTOROWID</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1118 d64112e559">
<p><code class="codeph">CHARTOROWID(clobCol)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1118 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e1118 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1137" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1137 d64112e556">
<p><code class="codeph">COMPOSE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1137 d64112e559">
<p><code class="codeph">COMPOSE(&#39;string&#39;)</code></p>
<p>Returns a Unicode string given a string in the data type <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, <code class="codeph">CLOB</code>, <code class="codeph">NCHAR</code>, <code class="codeph">NVARCHAR2</code>, <code class="codeph">NCLOB</code>. An o code point qualified by an umlaut code point is returned as the o-umlaut code point.</p>
</td>
<td class="cellalignment2846" headers="d64112e1137 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e1137 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1177" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1177 d64112e556">
<p><code class="codeph">DECOMPOSE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1177 d64112e559">
<p><code class="codeph">DECOMPOSE(&#39;str&#39; [CANONICAL | COMPATIBILITY] )</code></p>
<p>Valid for Unicode character arguments. Returns a Unicode string after decomposition in the same character set as the input. o-umlaut code point is returned as the o code point followed by the umlaut code point.</p>
</td>
<td class="cellalignment2846" headers="d64112e1177 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e1177 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1198" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1198 d64112e556">
<p><code class="codeph">HEXTORAW</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1198 d64112e559">
<p><code class="codeph">HEXTORAW(CLOB)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1198 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1198 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1217" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1217 d64112e556">
<p><code class="codeph">CONVERT</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1217 d64112e559">
<p><code class="codeph">select CONVERT(clobCol,&#39;WE8DEC&#39;,&#39;WE8HP&#39;) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1217 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1217 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1236" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1236 d64112e556">
<p><code class="codeph">TO_DATE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1236 d64112e559">
<p><code class="codeph">TO_DATE(clobCol)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1236 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e1236 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1255" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1255 d64112e556">
<p><code class="codeph">TO_NUMBER</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1255 d64112e559">
<p><code class="codeph">TO_NUMBER(clobCol)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1255 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e1255 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1274" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1274 d64112e556">
<p><code class="codeph">TO_TIMESTAMP</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1274 d64112e559">
<p><code class="codeph">TO_TIMESTAMP(clobCol)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1274 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1274 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1293" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1293 d64112e556">
<p><code class="codeph">TO_MULTI_BYTE</code></p>
<p><code class="codeph">TO_SINGLE_BYTE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1293 d64112e559">
<p><code class="codeph">TO_MULTI_BYTE(clobCol)</code></p>
<p><code class="codeph">TO_SINGLE_BYTE(clobCol)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1293 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e1293 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1319" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1319 d64112e556">
<p><code class="codeph">TO_CHAR</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1319 d64112e559">
<p><code class="codeph">TO_CHAR(clobCol)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1319 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1319 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1338" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1338 d64112e556">
<p><code class="codeph">TO_NCHAR</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1338 d64112e559">
<p><code class="codeph">TO_NCHAR(clobCol)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1338 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1338 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1357" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1357 d64112e556">
<p><code class="codeph">TO_LOB</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1357 d64112e559">
<p><code class="codeph">INSERT INTO... SELECT TO_LOB(longCol)...</code></p>
<p>Note that <code class="codeph">TO_LOB</code> can only be used to create or insert into a table with LOB columns as <code class="codeph">SELECT</code> <code class="codeph">FROM</code> a table with a <code class="codeph">LONG</code> column.</p>
</td>
<td class="cellalignment2846" headers="d64112e1357 d64112e562">
<p>N/A</p>
</td>
<td class="cellalignment2847" headers="d64112e1357 d64112e565">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1390" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1390 d64112e556">
<p><code class="codeph">TO_CLOB</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1390 d64112e559">
<p><code class="codeph">TO_CLOB(varchar2Col)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1390 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1390 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1409" headers="d64112e553">
<p><span class="bold">Conversion</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1409 d64112e556">
<p><code class="codeph">TO_NCLOB</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1409 d64112e559">
<p><code class="codeph">TO_NCLOB(varchar2Clob)</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1409 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1409 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1428" headers="d64112e553">
<p><span class="bold">Aggregate Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1428 d64112e556">
<p><code class="codeph">COUNT</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1428 d64112e559">
<p><code class="codeph">select count(clobCol) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1428 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1428 d64112e565">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1447" headers="d64112e553">
<p><span class="bold">Aggregate Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1447 d64112e556">
<p><code class="codeph">MAX</code>, <code class="codeph">MIN</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1447 d64112e559">
<p><code class="codeph">select MAX(clobCol) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1447 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1447 d64112e565">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1469" headers="d64112e553">
<p><span class="bold">Aggregate Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1469 d64112e556">
<p><code class="codeph">GROUPING</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1469 d64112e559">
<p><code class="codeph">select grouping(clobCol) from... group by cube (clobCol);</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1469 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1469 d64112e565">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1488" headers="d64112e553">
<p><span class="bold">Other Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1488 d64112e556">
<p><code class="codeph">GREATEST</code>, <code class="codeph">LEAST</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1488 d64112e559">
<p><code class="codeph">select GREATEST (clobCol1, clobCol2) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1488 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1488 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1510" headers="d64112e553">
<p><span class="bold">Other Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1510 d64112e556">
<p><code class="codeph">DECODE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1510 d64112e559">
<p><code class="codeph">select DECODE(clobCol, condition1, value1, defaultValue) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1510 d64112e562">
<p>CNV</p>
</td>
<td class="cellalignment2847" headers="d64112e1510 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1529" headers="d64112e553">
<p><span class="bold">Other Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1529 d64112e556">
<p><code class="codeph">NVL</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1529 d64112e559">
<p><code class="codeph">select NVL(clobCol,&#39;NULL&#39;) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1529 d64112e562">
<p>Yes</p>
</td>
<td class="cellalignment2847" headers="d64112e1529 d64112e565">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1549" headers="d64112e553">
<p><span class="bold">Other Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1549 d64112e556">
<p><code class="codeph">DUMP</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1549 d64112e559">
<p><code class="codeph">select DUMP(clobCol) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1549 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1549 d64112e565">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1568" headers="d64112e553">
<p><span class="bold">Other Functions</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1568 d64112e556">
<p><code class="codeph">VSIZE</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1568 d64112e559">
<p><code class="codeph">select VSIZE(clobCol) from...</code></p>
</td>
<td class="cellalignment2846" headers="d64112e1568 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1568 d64112e565">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1587" headers="d64112e553">
<p><span class="bold">Unicode</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1587 d64112e556">
<p><code class="codeph">INSTR2</code>, <code class="codeph">SUBSTR2</code>, <code class="codeph">LENGTH2</code>, <code class="codeph">LIKE2</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1587 d64112e559">
<p>These functions use UCS2 code point semantics.</p>
</td>
<td class="cellalignment2846" headers="d64112e1587 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1587 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1614" headers="d64112e553">
<p><span class="bold">Unicode</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1614 d64112e556">
<p><code class="codeph">INSTR4</code>, <code class="codeph">SUBSTR4</code>, <code class="codeph">LENGTH4</code>, <code class="codeph">LIKE4</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1614 d64112e559">
<p>These functions use UCS4 code point semantics.</p>
</td>
<td class="cellalignment2846" headers="d64112e1614 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1614 d64112e565">
<p>CNV</p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2844" id="d64112e1641" headers="d64112e553">
<p><span class="bold">Unicode</span></p>
</td>
<td class="cellalignment2845" headers="d64112e1641 d64112e556">
<p><code class="codeph">INSTRC</code>, <code class="codeph">SUBSTRC</code>, <code class="codeph">LENGTHC</code>, <code class="codeph">LIKEC</code></p>
</td>
<td class="cellalignment2820" headers="d64112e1641 d64112e559">
<p>These functions use complete character semantics.</p>
</td>
<td class="cellalignment2846" headers="d64112e1641 d64112e562">
<p>No</p>
</td>
<td class="cellalignment2847" headers="d64112e1641 d64112e565">
<p>CNV</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<div class="props_rev_3"><a id="GUID-F56912CA-03C8-4A1B-81AA-1CB571349FE8"></a>
<h3 id="ADLOB-GUID-F56912CA-03C8-4A1B-81AA-1CB571349FE8" class="sect3">CLOBs and NCLOBs Do Not Follow Session Collation Settings</h3>
<div>
<p>Standard operators that operate on <code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s without first converting them to <code class="codeph">VARCHAR2</code> or <code class="codeph">NVARCHAR2</code>, (those marked Yes in the SQL or PL/SQL columns of <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a>), do not behave linguistically, except for <code class="codeph">REGEXP</code> functions. Binary comparison of the character data is performed irrespective of the <code class="codeph">NLS_COMP</code> and <code class="codeph">NLS_SORT</code> parameter settings.</p>
<p>These <code class="codeph">REGEXP</code> functions are the exceptions, where, if <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> data is passed in, the linguistic comparison is similar to the comparison of <code class="codeph">VARCHAR2</code> and <code class="codeph">NVARCHAR2</code> values.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">REGEXP_LIKE</code></p>
</li>
<li>
<p><code class="codeph">REGEXP_REPLACE</code></p>
</li>
<li>
<p><code class="codeph">REGEXP_INSTR</code></p>
</li>
<li>
<p><code class="codeph">REGEXP_SUBSTR</code></p>
</li>
<li>
<p><code class="codeph">REGEXP_COUNT</code></p>
</li>
</ul>
</div>
</div>
<a id="ADLOB45586"></a>
<div class="props_rev_3"><a id="GUID-E5C23A3D-422E-456F-B889-1B9DD33A56B6"></a>
<h3 id="ADLOB-GUID-E5C23A3D-422E-456F-B889-1B9DD33A56B6" class="sect3">UNICODE Support</h3>
<div>
<p>Variations on certain functions are provided for Unicode support.</p>
<p>Variations on the <code class="codeph">INSTR</code>, <code class="codeph">SUBSTR</code>, <code class="codeph">LENGTH</code>, and <code class="codeph">LIKE</code> functions are provided for Unicode support. (These variations are indicated as Unicode in the Category column of <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a>.)</p>
<div class="infoboxnotealso" id="GUID-E5C23A3D-422E-456F-B889-1B9DD33A56B6__GUID-D0D5E317-45AA-4517-B13D-3D43D3467F42">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink NLSPG" target="_blank" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a></p>
</li>
<li>
<p><a class="olink ADFNS" target="_blank" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Development Guide</span></a></p>
</li>
<li>
<p><a class="olink SQLRF" target="_blank" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink ARPLS" target="_blank" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a detailed description on the usage of UNICODE functions</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADLOB45587"></a>
<div class="props_rev_3"><a id="GUID-C98CE2D7-3947-4A81-8FA3-B170B1A307A6"></a>
<h3 id="ADLOB-GUID-C98CE2D7-3947-4A81-8FA3-B170B1A307A6" class="sect3">Codepoint Semantics</h3>
<div>
<p>Codepoint semantics of the <code class="codeph">INSTR</code>, <code class="codeph">SUBSTR</code>, <code class="codeph">LENGTH</code>, and <code class="codeph">LIKE</code> functions, described in <a href="adlob_sql_semantics.htm#GUID-D8F66A2A-4D17-49C3-ADB2-BE384510DD6D__g1016221" title="This table is described in the preceding text">Table 16-1</a>, differ depending on the data type of the argument passed to the function. These functions use different codepoint semantics depending on whether the argument is a <code class="codeph">VARCHAR2</code> or a <code class="codeph">CLOB</code> type as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>When the argument is a <code class="codeph">CLOB</code>, UCS2 codepoint semantics are used for all character sets.</p>
</li>
<li>
<p>When the argument is a character type, such as <code class="codeph">VARCHAR2</code>, the default codepoint semantics are used for the given character set:</p>
<ul style="list-style-type: disc;">
<li>
<p>UCS2 codepoint semantics are used for AL16UTF16 and UTF8 character sets.</p>
</li>
<li>
<p>UCS4 codepoint semantics are used for all other character sets, such as AL32UTF8.</p>
</li>
</ul>
</li>
<li>
<p>If you are storing character data in a <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code>, then note that the amount and offset parameters for any APIs that read or write data to the <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code> are specified in UCS2 codepoints. In some character sets, a full character consists one or more UCS2 codepoints called a surrogate pair. In this scenario, you must ensure that the amount or offset you specify does not cut into a full character. This avoids reading or writing a partial character.</p>
</li>
<li>
<p>Starting from 10<span class="italic">g</span>, Oracle Database helps to detect half surrogate pair on read/write boundaries in such scenarios. In the case of read, the offset and amount is adjusted accordingly to avoid returning a half character, in which case the amount returned could be less than what is asked for. In the case of write, an error is raised to prevent from corrupting the existing data caused by overwriting a partial character in the destination <code class="codeph">CLOB</code> or <code class="codeph">NCLOB</code>.</p>
</li>
</ul>
</div>
</div>
<a id="ADLOB45588"></a>
<div class="props_rev_3"><a id="GUID-A188EDB1-E3F4-4812-8AB0-D7EF3CC1736E"></a>
<h3 id="ADLOB-GUID-A188EDB1-E3F4-4812-8AB0-D7EF3CC1736E" class="sect3">Return Values for SQL Semantics on LOBs</h3>
<div>
<p>The return type of a function or operator that takes a LOB or <code class="codeph">VARCHAR2</code> is the same as the data type of the argument passed to the function or operator.</p>
<p>Functions that take more than one argument, such as <code class="codeph">CONCAT</code>, return a LOB data type if one or more arguments is a LOB. For example, <code class="codeph">CONCAT(CLOB, VARCHAR2)</code> returns a <code class="codeph">CLOB</code>.</p>
<div class="infoboxnotealso" id="GUID-A188EDB1-E3F4-4812-8AB0-D7EF3CC1736E__GUID-515F81FA-2C6F-422F-91C2-140FBAC217D4">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF00619" target="_blank" href="../SQLRF/functions040.htm#SQLRF00619"><span class="italic">Oracle Database SQL Language Reference</span></a> for details on the CONCAT function and the concatenation operator (||).</p>
</div>
<p>A LOB instance is always accessed and manipulated through a LOB locator. This is also true for return values: SQL functions and operators return a LOB locator when the return value is a LOB instance.</p>
<p>Any LOB instance returned by a <a id="d64112e2165" class="indexterm-anchor"></a><a id="d64112e2169" class="indexterm-anchor"></a>SQL function is a temporary LOB instance. LOB instances in tables (persistent LOBs) are not modified by SQL functions, even when the function is used in the <code class="codeph">SELECT</code> list of a query.</p>
</div>
</div>
<a id="ADLOB45589"></a>
<div class="props_rev_3"><a id="GUID-8D3B7C03-76C4-4934-B64E-9649E5655916"></a>
<h3 id="ADLOB-GUID-8D3B7C03-76C4-4934-B64E-9649E5655916" class="sect3">LENGTH Return Value for LOBs</h3>
<div>
<p>The return value of the <code class="codeph">LENGTH</code> function differs depending on whether the argument passed is a LOB or a character string:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the input is a character string of length zero, then <code class="codeph">LENGTH</code> returns <code class="codeph">NULL</code>.</p>
</li>
<li>
<p>For a <code class="codeph">CLOB</code> of length zero, or an empty locator such as that returned by <code class="codeph">EMPTY_CLOB()</code>, the <code class="codeph">LENGTH</code> and <code class="codeph">DBMS_LOB.GETLENGTH</code> functions return 0.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADLOB45590"></a>
<div class="props_rev_3"><a id="GUID-AF0A6CE4-2217-489A-AFB4-F66729227A59"></a>
<h2 id="ADLOB-GUID-AF0A6CE4-2217-489A-AFB4-F66729227A59" class="sect2">Implicit Conversion of LOB Data Types in SQL</h2>
<div>
<p>Some LOB data types support implicit conversion and can be used in operations such as cross-type assignment and parameter passing. These conversions are processed at the SQL layer and can be performed in all client interfaces that use LOB types.</p>
</div>
<a id="ADLOB45591"></a>
<div class="props_rev_3"><a id="GUID-7EF6DD36-1371-4FBB-92CA-E6651BC4ED31"></a>
<h3 id="ADLOB-GUID-7EF6DD36-1371-4FBB-92CA-E6651BC4ED31" class="sect3">Implicit Conversion Between CLOB and NCLOB Data Types in SQL</h3>
<div>
<p>The database enables you to perform operations such as cross-type assignment and cross-type parameter passing between <code class="codeph">CLOB</code> and <code class="codeph">NCLOB</code> data types. The database performs implicit conversions between these types when necessary to preserve properties such as character set formatting.</p>
<p>Note that, when implicit conversions occur, each character in the source LOB is changed to the character set of the destination LOB, if needed. In this situation, some degradation of performance may occur if the data size is large. When the character set of the destination and the source are the same, there is no degradation of performance.</p>
<p>After an implicit conversion between <code class="codeph">CLOB</code> and <code class="codeph">NCLOB</code> types, the destination LOB is implicitly created as a temporary LOB. This new temporary LOB is independent from the source LOB. If the implicit conversion occurs as part of a define operation in a <code class="codeph">SELECT</code> statement, then any modifications to the destination LOB do not affect the persistent LOB in the table that the LOB was selected from as shown in the following example:</p>
<pre dir="ltr">SQL&gt; -- check lob length before update 
SQL&gt; select dbms_lob.getlength(ad_sourcetext) from Print_media 
  2       where product_id=3106 and ad_id = 13001; 

DBMS_LOB.GETLENGTH(AD_SOURCETEXT) 
--------------------------------- 
         205 

SQL&gt; 
SQL&gt; declare 
  2   clob1 clob; 
  3   amt number:=10; 
  4  BEGIN 
  5    -- select a clob column into a clob, no implicit convesion 
  6    SELECT ad_sourcetext INTO clob1 FROM Print_media 
  7      WHERE product_id=3106 and ad_id=13001 FOR UPDATE; 
  8 
  9    dbms_lob.trim(clob1, amt); -- Trim the selected lob to 10 bytes 
 10  END; 
 11  / 

PL/SQL procedure successfully completed. 

SQL&gt; -- Modification is performed on clob1 which points to the 
SQL&gt; -- clob column in the table 
SQL&gt; select dbms_lob.getlength(ad_sourcetext) from Print_media 
  2       where product_id=3106 and ad_id = 13001; 

DBMS_LOB.GETLENGTH(AD_SOURCETEXT) 
--------------------------------- 
          10 

SQL&gt; 
SQL&gt; rollback; 

Rollback complete. 

SQL&gt; -- check lob length before update 
SQL&gt; select dbms_lob.getlength(ad_sourcetext) from Print_media 
  2       where product_id=3106 and ad_id = 13001; 

DBMS_LOB.GETLENGTH(AD_SOURCETEXT) 
--------------------------------- 
         205 

SQL&gt; 
SQL&gt; declare 
  2   nclob1 nclob; 
  3   amt number:=10; 
  4  BEGIN 
  5 
  6    -- select a clob column into a nclob, implicit conversion occurs 
  7    SELECT ad_sourcetext INTO nclob1 FROM Print_media 
  8      WHERE product_id=3106 and ad_id=13001 FOR UPDATE; 
  9 
 10    dbms_lob.trim(nclob1, amt); -- Trim the selected lob to 10 bytes 
 11  END; 
 12  / 

PL/SQL procedure successfully completed. 

SQL&gt; -- Modification to nclob1 does not affect the clob in the table, 
SQL&gt; -- because nclob1 is a independent temporary LOB 

SQL&gt; select dbms_lob.getlength(ad_sourcetext) from Print_media 
  2       where product_id=3106 and ad_id = 13001; 

DBMS_LOB.GETLENGTH(AD_SOURCETEXT) 
--------------------------------- 
         205 
  
</pre>
<div class="infoboxnotealso" id="GUID-7EF6DD36-1371-4FBB-92CA-E6651BC4ED31__GUID-D0B30A34-432A-4E4C-996A-01906FEB904D">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="adlob_plsql_semantics.htm#GUID-2C214444-948A-4F81-8C89-556CBF094EBF">Implicit Conversions Between CLOB and VARCHAR2</a>&#34;</span> for information on PL/SQL semantics support for implicit conversions between <code class="codeph">CLOB</code> and <code class="codeph">VARCHAR2</code> types.</p>
</li>
<li>
<p><span class="q">&#34;<a href="adlob_tables.htm#GUID-AABE1311-0928-4D4D-9C1C-926EBF977B61">Converting Character Sets Implicitly with LOBs</a>&#34;</span> for more information on implicit character set conversions when loading LOBs from <code class="codeph">BILE</code>s.</p>
</li>
<li>
<p><a class="olink SQLRF00214" target="_blank" href="../SQLRF/sql_elements002.htm#SQLRF00214"><span class="italic">Oracle Database SQL Language Reference</span></a> for details on implicit conversions supported for all data types.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADLOB45593"></a><a id="ADLOB45592"></a>
<div class="props_rev_3"><a id="GUID-8287AF94-2E69-4BB7-B4EB-0584D10DD144"></a>
<h2 id="ADLOB-GUID-8287AF94-2E69-4BB7-B4EB-0584D10DD144" class="sect2">Unsupported Use of LOBs in SQL</h2>
<div>
<p><a href="adlob_sql_semantics.htm#GUID-8287AF94-2E69-4BB7-B4EB-0584D10DD144__g1016525" title="This table is described in the preceding text">Table 16-2</a> lists SQL operations that are not supported on LOB columns.</p>
<div class="tblformalwide" id="GUID-8287AF94-2E69-4BB7-B4EB-0584D10DD144__g1016525">
<p class="titleintable">Table 16-2 Unsupported Usage of LOBs in SQL</p>
<table class="cellalignment2809" title="Unsupported Usage of LOBs in SQL" summary="This table is described in the preceding text">
<thead>
<tr class="cellalignment2783">
<th class="cellalignment2812" id="d64112e2543">SQL Operations Not Supported</th>
<th class="cellalignment2848" id="d64112e2546">Example of unsupported usage</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2783">
<td class="cellalignment2815" id="d64112e2551" headers="d64112e2543">
<p><code class="codeph">SELECT</code> <code class="codeph">DISTINCT</code></p>
</td>
<td class="cellalignment2849" headers="d64112e2551 d64112e2546">
<p><code class="codeph">SELECT DISTINCT clobCol from...</code></p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2815" id="d64112e2563" headers="d64112e2543">
<p><code class="codeph">SELECT</code> clause</p>
<p><code class="codeph">ORDER BY</code></p>
</td>
<td class="cellalignment2849" headers="d64112e2563 d64112e2546">
<p><code class="codeph">SELECT...</code> <code class="codeph">ORDER BY clobCol</code></p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2815" id="d64112e2580" headers="d64112e2543">
<p><code class="codeph">SELECT</code> clause</p>
<p><code class="codeph">GROUP</code> <code class="codeph">BY</code></p>
</td>
<td class="cellalignment2849" headers="d64112e2580 d64112e2546">
<p><code class="codeph">SELECT avg(num) FROM...</code></p>
<p><code class="codeph">GROUP BY clobCol</code></p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2815" id="d64112e2600" headers="d64112e2543">
<p><code class="codeph">UNION</code>, <code class="codeph">INTERSECT</code>, <code class="codeph">MINUS</code></p>
<p>(Note that <code class="codeph">UNION</code> <code class="codeph">ALL</code> works for LOBs.)</p>
</td>
<td class="cellalignment2849" headers="d64112e2600 d64112e2546">
<p><code class="codeph">SELECT clobCol1 from tab1 UNION SELECT clobCol2 from tab2;</code></p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2815" id="d64112e2624" headers="d64112e2543">
<p>Join queries</p>
</td>
<td class="cellalignment2849" headers="d64112e2624 d64112e2546">
<p><code class="codeph">SELECT... FROM... WHERE tab1.clobCol = tab2.clobCol</code></p>
</td>
</tr>
<tr class="cellalignment2783">
<td class="cellalignment2815" id="d64112e2632" headers="d64112e2543">
<p>Index columns</p>
</td>
<td class="cellalignment2849" headers="d64112e2632 d64112e2546">
<p><code class="codeph">CREATE INDEX clobIndx ON tab(clobCol)...</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADLOB45594"></a>
<div class="props_rev_3"><a id="GUID-EF35985B-974B-405A-8C21-58AB04E46404"></a>
<h2 id="ADLOB-GUID-EF35985B-974B-405A-8C21-58AB04E46404" class="sect2">VARCHAR2 and RAW Semantics for LOBs</h2>
<div>
<p>Semantics used with <code class="codeph">VARCHAR2</code> and <code class="codeph">RAW</code> data types also apply to LOBs.</p>
</div>
<div class="props_rev_3"><a id="GUID-42D100A8-69F8-403C-9ABA-D0C24D908A26"></a>
<h3 id="ADLOB-GUID-42D100A8-69F8-403C-9ABA-D0C24D908A26" class="sect3">About VARCHAR2 and RAW Semantics for LOBs</h3>
<div>
<p>These semantics, used with <code class="codeph">VARCHAR2</code> and <code class="codeph">RAW</code> data types, also apply to LOBs:</p>
<ul style="list-style-type: disc;">
<li>
<p>Defining a <code class="codeph">CHAR</code> buffer on a <code class="codeph">CLOB</code></p>
<p>You can define a <code class="codeph">VARCHAR2</code> for a <code class="codeph">CLOB</code> and <code class="codeph">RAW</code> for a <code class="codeph">BLOB</code> column. You can also define <code class="codeph">CLOB</code> and <code class="codeph">BLOB</code> types for <code class="codeph">VARCHAR2</code> and <code class="codeph">RAW</code> columns.</p>
</li>
<li>
<p>Selecting a <code class="codeph">CLOB</code> column into a <code class="codeph">CHAR</code> buffer or <code class="codeph">VARCHAR2</code></p>
<p>If a <code class="codeph">CLOB</code> column is selected into a <code class="codeph">VARCHAR2</code> variable, then data stored in the <code class="codeph">CLOB</code> column is retrieved and put into the <code class="codeph">CHAR</code> buffer. If the buffer is not large enough to contain all the <code class="codeph">CLOB</code> data, then a truncation error is thrown and no data is written to the buffer. After successful completion of the <code class="codeph">SELECT</code> operation, the <code class="codeph">VARCHAR2</code> variable holds as a regular character buffer.</p>
<p>In contrast, when a <code class="codeph">CLOB</code> column is selected into a local <code class="codeph">CLOB</code> variable, the <code class="codeph">CLOB</code> locator is fetched.</p>
</li>
<li>
<p>Selecting a <code class="codeph">BLOB</code> column into a <code class="codeph">RAW</code></p>
<p>When a <code class="codeph">BLOB</code> column is selected into a <code class="codeph">RAW</code> variable, the <code class="codeph">BLOB</code> data is copied into the <code class="codeph">RAW</code> buffer. If the size of the <code class="codeph">BLOB</code> exceeds the size of the buffer, then a truncation error is thrown and no data is written to the buffer.</p>
</li>
</ul>
</div>
</div>
<a id="ADLOB45595"></a>
<div class="props_rev_3"><a id="GUID-58CA6FE9-CCB2-4239-ABDB-46016DD3C7F5"></a>
<h3 id="ADLOB-GUID-58CA6FE9-CCB2-4239-ABDB-46016DD3C7F5" class="sect3">LOBs Returned from SQL Functions</h3>
<div>
<p>When a LOB is returned from a SQL function, the result returned is a temporary LOB.</p>
<p>Your application should view the temporary LOB as local storage for the data returned from the <code class="codeph">SELECT</code> operation as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>In PL/SQL, the temporary LOB has the same lifetime (duration) as other local PL/SQL program variables. It can be passed to subsequent SQL or PL/SQL <code class="codeph">VARCHAR2</code> functions or queries as a PL/SQL local variable. The temporary LOB goes out of scope at the end of the program block at which time, the LOB is freed. These are the same semantics as those for PL/SQL <code class="codeph">VARCHAR2</code> variables. At any time, nonetheless, you can use a <code class="codeph">DBMS_LOB.FREETEMPORARY()</code> call to release the resources taken by the local temporary LOBs.</p>
<div class="infobox-note" id="GUID-58CA6FE9-CCB2-4239-ABDB-46016DD3C7F5__GUID-B88E3007-E5B3-45E6-AE04-E7CEBEDBBB75">
<p class="notep1">Note:</p>
<p>If the SQL statement returns a LOB or a LOB is an <code class="codeph">OUT</code> parameter for a PL/SQL function or procedure, you must test if it is a temporary LOB, and if it is, then free it after you are done with it.</p>
</div>
</li>
<li>
<p>In OCI, the temporary LOBs returned from SQL queries are always in session duration, unless a user-defined duration is present, in which case, the temporary LOBs are in the user-defined duration.</p>
<div class="infoboxnotewarn" id="GUID-58CA6FE9-CCB2-4239-ABDB-46016DD3C7F5__GUID-4C4FA896-CC37-4453-A540-46BC35575349">
<p class="notep1">WARNING:</p>
<p>Ensure that your temporary tablespace is large enough to store all temporary LOB results returned from queries in your program(s).</p>
</div>
</li>
</ul>
<p>The following example illustrates selecting out a <code class="codeph">CLOB</code> column into a <code class="codeph">VARCHAR2</code> and returning the result as a <code class="codeph">CHAR</code> buffer of declared size:</p>
<pre dir="ltr">DECLARE
  vc1 VARCHAR2(32000);
  lb1 CLOB;
  lb2 CLOB;
BEGIN
  SELECT clobCol1 INTO vc1 FROM tab WHERE colID=1;
  -- lb1 is a temporary LOB
  SELECT clobCol2 || clobCol3 INTO lb1 FROM tab WHERE colID=2;

  lb2 := vc1|| lb1;
  -- lb2 is a still temporary LOB, so the persistent data in the database 
  -- is not modified. An update is necessary to modify the table data.
  UPDATE tab SET clobCol1 = lb2 WHERE colID = 1;
  
DBMS_LOB.FREETEMPORARY(lb2); -- Free up the space taken by lb2
</pre>
<pre dir="ltr">&lt;... some more queries ...&gt;
</pre>
<pre dir="ltr">END; -- at the end of the block, lb1 is automatically freed 
</pre></div>
</div>
<a id="ADLOB45596"></a>
<div class="props_rev_3"><a id="GUID-9426FE42-ABC8-4876-8123-43E449544510"></a>
<h3 id="ADLOB-GUID-9426FE42-ABC8-4876-8123-43E449544510" class="sect3">IS NULL and IS NOT NULL Usage with VARCHAR2s and CLOBs</h3>
<div>
<p>You can use the <code class="codeph">IS NULL</code> and <code class="codeph">IS NOT NULL</code> operators with LOB columns.</p>
<p>When used with LOBs, the <code class="codeph">IS NULL</code> and <code class="codeph">IS NOT NULL</code> operators determine whether a LOB locator is stored in the row.</p>
<div class="infobox-note" id="GUID-9426FE42-ABC8-4876-8123-43E449544510__GUID-7D05F72A-F760-4768-AB73-1CE35F796A33">
<p class="notep1">Note:</p>
<p>In the SQL 92 standard, a <a id="d64112e3092" class="indexterm-anchor"></a>character string of length zero is distinct from a <code class="codeph">NULL</code> string. The return value of IS <code class="codeph">NULL</code> differs when you pass a LOB compared to a <code class="codeph">VARCHAR2</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>When you pass an initialized LOB of length zero to the <code class="codeph">IS NULL</code> function, zero (<code class="codeph">FALSE</code>) is returned. These semantics are compliant with the SQL standard.</p>
</li>
<li>
<p>When you pass a <code class="codeph">VARCHAR2</code> of length zero to the <code class="codeph">IS NULL</code> function, <code class="codeph">TRUE</code> is returned.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADLOB45597"></a>
<div class="props_rev_3"><a id="GUID-65D55512-09BB-4E25-A949-12465FCE2997"></a>
<h3 id="ADLOB-GUID-65D55512-09BB-4E25-A949-12465FCE2997" class="sect3">WHERE Clause Usage with LOBs</h3>
<div>
<p>SQL functions with LOBs as arguments, except functions that compare LOB values, are allowed in predicates of the <code class="codeph">WHERE</code> clause.</p>
<p>The <code class="codeph">LENGTH</code> function, for example, can be included in the predicate of the <code class="codeph">WHERE</code> clause:</p>
<pre dir="ltr">CREATE TABLE t (n NUMBER, c CLOB);
INSERT INTO t VALUES (1, &#39;abc&#39;);

SELECT * FROM t WHERE c IS NOT NULL;
SELECT * FROM t WHERE LENGTH(c) &gt; 0;
SELECT * FROM t WHERE c LIKE &#39;%a%&#39;;
SELECT * FROM t WHERE SUBSTR(c, 1, 2) LIKE &#39;%b%&#39;;
SELECT * FROM t WHERE INSTR(c, &#39;b&#39;) = 2;
</pre></div>
</div>
</div>
<a id="ADLOB45598"></a>
<div class="sect2"><a id="GUID-ABE5617D-9DC0-42F1-8475-D5B369A0B3BD"></a>
<h2 id="ADLOB-GUID-ABE5617D-9DC0-42F1-8475-D5B369A0B3BD" class="sect2">Built-in Functions for Remote LOBs and BFILEs</h2>
<div>
<p>Whatever SQL built-in functions and user-defined functions that are supported on local LOBs and <code class="codeph">BFILE</code>s are also supported on remote LOBs and <code class="codeph">BFILE</code>s, as long as the final value returned by nested functions is not a LOB. This includes functions for remote persistent and temporary LOBs and for <code class="codeph">BFILE</code>s.</p>
<p>Built-in SQL functions which are executed on a remote site can be part of any SQL statement, like <code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code>. For example:</p>
<pre dir="ltr">SELECT LENGTH(ad_sourcetext) FROM print_media@remote_site -- CLOB
SELECT LENGTH(ad_fltextn) FROM print_media@remote_site;   -- NCLOB
SELECT LENGTH(ad_composite) FROM print_media@remote_site; -- BLOB
SELECT product_id from print_media@remote_site WHERE LENGTH(ad_sourcetext) &gt; 3;

UPDATE print_media@remote_site SET product_id = 2 WHERE LENGTH(ad_sourcetext) &gt; 3;

SELECT TO_CHAR(foo@dbs2(...)) FROM dual@dbs2;
-- where foo@dbs2 returns a temporary LOB
</pre>
<p>The SQL functions fall under the following (not necessarily exclusive) categories:</p>
<ul style="list-style-type: disc;">
<li>
<p>SQL functions that are not supported on LOBs:</p>
<p>These functions are relevant only for <code class="codeph">CLOB</code>s: an example is <code class="codeph">DECODE</code>.</p>
<p>These functions <span class="bold">cannot be supported</span> on remote LOBs because they are not supported on local LOBs.</p>
</li>
<li>
<p>Functions taking exactly one LOB argument (all other arguments are of other data types) and not returning a LOB:</p>
<p>These functions are relevant only for <code class="codeph">CLOB</code>s, <code class="codeph">NCLOB</code>s, and <code class="codeph">BLOB</code>s: an example is <code class="codeph">LENGTH</code> and <span class="bold">it is supported</span>. For example:</p>
<pre dir="ltr">SELECT LENGTH(ad_composite) FROM print_media@remote_site;
SELECT LENGTH(ad_header.logo) FROM print_media@remote_site; -- LOB in object

SELECT product_id from print_media@remote_site WHERE LENGTH(ad_sourcetext) &gt; 3;
</pre></li>
<li>
<p>Functions that return a LOB:</p>
<p><span class="bold">All these functions are relevant only for CLOBs and NCLOBs.</span> These functions may return the original LOB or produce a temporary LOB. These functions can be performed on the remote site, as long as the result returned to the local site is not a LOB.</p>
<p>Functions returning a temporary LOB are: <code class="codeph">REPLACE</code>, <code class="codeph">SUBSTR</code>, <code class="codeph">CONCAT</code>, ||, <code class="codeph">TRIM</code>, <code class="codeph">LTRIM</code>, <code class="codeph">RTRIM</code>, <code class="codeph">LOWER</code>, <code class="codeph">UPPER</code>, <code class="codeph">NLS_LOWER</code>, <code class="codeph">NLS_UPPER</code>, <code class="codeph">LPAD</code>, and <code class="codeph">RPAD</code>.</p>
<p>Functions returning the original LOB locator are: <code class="codeph">NVL</code>, <code class="codeph">DECODE</code>, and <code class="codeph">CASE</code>. Note that even though <code class="codeph">DECODE</code> and <code class="codeph">CASE</code> are not supported currently to operate on LOBs, they could operate on other data types and return a LOB.</p>
<p>For example, <span class="bold">the following statements are supported:</span></p>
<pre dir="ltr">SELECT TO_CHAR(CONCAT(ad_sourcetext, ad_sourcetext)) FROM
    print_media@remote_site;

SELECT TO_CHAR(SUBSTR(ad_fltextnfs, 1, 3)) FROM
    print_media@remote_site;
</pre>
<p>But the <span class="bold">following statements are not supported:</span></p>
<pre dir="ltr">SELECT CONCAT(ad_sourcetext, ad_sourcetext) FROM
    print_media@remote_site;

SELECT SUBSTR(ad_sourcetext, 1, 3) FROM print_media@remote_site;
</pre></li>
<li>
<p>Functions that take in more than one LOB argument:</p>
<p>These are: <code class="codeph">INSTR</code>, <code class="codeph">LIKE</code>, <code class="codeph">REPLACE</code>, <code class="codeph">CONCAT</code>, ||, <code class="codeph">SUBSTR</code>, <code class="codeph">TRIM</code>, <code class="codeph">LTRIM</code>, <code class="codeph">RTRIM</code>, <code class="codeph">LPAD</code>, and <code class="codeph">RPAD</code>. All these functions are relevant only for <code class="codeph">CLOB</code>s and <code class="codeph">NCLOB</code>s.</p>
<p>These functions are supported only if all the LOB arguments are in the same <code class="codeph">dblink</code>, and the value returned is not a LOB. For example, <span class="bold">the following is supported:</span></p>
<pre dir="ltr">SELECT TO_CHAR(CONCAT(ad_sourcetext, ad_sourcetext)) FROM
print_media@remote_site; -- CLOB

SELECT TO_CHAR(CONCAT(ad_fltextn, ad_fltextn)) FROM
print_media@remote_site; -- NCLOB
</pre>
<p><span class="bold">But the following is not supported:</span></p>
<pre dir="ltr">SELECT TO_CHAR(CONCAT(a.ad_sourcetext, b.ad_sourcetext)) FROM
print_media@db1 a, print_media@db2 b WHERE a.product_id = b.product_id;
</pre></li>
</ul>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2782">
<tr>
<td class="cellalignment2794">
<table class="cellalignment2787">
<tr>
<td class="cellalignment2786"><a href="adlob_ddl.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2786"><a href="adlob_plsql_semantics.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2796">
<table class="cellalignment2785">
<tr>
<td class="cellalignment2786"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2786"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2786"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2786"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2786"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2786"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>