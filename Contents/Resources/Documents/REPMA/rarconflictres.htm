<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-91757"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Configuring%20Conflict%20Resolution"></a><title>Configuring Conflict Resolution</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1042"/>
<meta name="dcterms.created" content="2015-02-06T10:45:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Replication Management API Reference"/>
<meta name="dcterms.identifier" content="E18896-09"/>
<meta name="dcterms.isVersionOf" content="REPMA"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="rarmviewgroup.htm" title="Previous" type="text/html"/>
<link rel="Next" href="rarpart2.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E18896-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/38</span> <!-- End Header -->
<div id="REPMA006" class="chapter"><a id="i21416"></a> <a id="CJAGACFH"></a>
<h1 class="chapter"><span class="secnum">6</span> Configuring Conflict Resolution</h1>
<p><a id="sthref290"></a><a id="sthref291"></a><a id="sthref292"></a>This chapter illustrates how to define conflict resolution methods for your replication environment.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i14783">Preparing for Conflict Resolution</a></p>
</li>
<li>
<p><a href="#i14774">Creating Conflict Resolution Methods for Update Conflicts</a></p>
</li>
<li>
<p><a href="#i17665">Creating Conflict Resolution Methods for Uniqueness Conflicts</a></p>
</li>
<li>
<p><a href="#i14792">Creating Conflict Avoidance Methods for Delete Conflicts</a></p>
</li>
<li>
<p><a href="#i21626">Using Dynamic Ownership Conflict Avoidance</a></p>
</li>
<li>
<p><a href="#i21615">Auditing Successful Conflict Resolution</a></p>
</li>
</ul>
<a id="i14783"></a>
<div id="REPMA353" class="sect1">
<h2 class="sect1">Preparing for Conflict Resolution<a id="sthref293"></a></h2>
<p>Though you might design your database and front-end application to avoid conflicts between multiple sites in a replication environment, you might not be able to eliminate the possibility of conflicts. One of the most important aspects of replication is to ensure data convergence at all sites participating in the replication environment.</p>
<p>When data conflicts occur, you need a mechanism to ensure that the conflict is resolved in accordance with your business rules and that the data converges correctly at all sites.</p>
<p>Advanced Replication lets you define a conflict resolution system for your database that resolves conflicts in accordance with your business rules. If you have a unique situation that Oracle&#39;s prebuilt conflict resolution methods cannot resolve, then you have the option of building and using your own conflict resolution methods.</p>
<p>Before you begin implementing conflict resolution methods for your replicated tables, analyze the data in your system to determine where the most conflicts can occur. For example, static data such as an employee number might change very infrequently and is not subject to a high occurrence of conflicts. An employee&#39;s customer assignments, however, might change often and would therefore be prone to data conflicts.</p>
<p>After you have determined where the conflicts are most likely to occur, you must determine how to resolve the conflict. For example, do you want the latest change to have precedence, or should one site have precedence over another?</p>
<p>As you read each of the sections describing the different conflict resolution methods, you will learn what each method is best suited for. So, read each section and then think about how your business would want to resolve any potential conflicts.</p>
<p>After you have identified the potential problem areas and have determined what business rules would resolve the problem, use Oracle&#39;s conflict resolution methods (or one of your own) to implement a conflict resolution system.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REPLN005" href="../REPLN/repconflicts.htm#REPLN005"><span class="italic">Oracle Database Advanced Replication</span></a> for conceptual information about conflict resolution methods and detailed information about data convergence for each method</div>
</div>
<!-- class="sect1" -->
<a id="i14774"></a>
<div id="REPMA354" class="sect1">
<h2 class="sect1">Creating Conflict Resolution Methods for Update Conflicts</h2>
<p>The most common data conflict occurs when the same row at two or more different sites are updated at nearly the same time, or before the deferred transaction from one site was successfully propagated to the other sites.</p>
<p>One method to avoid update conflicts is to implement a synchronous replication environment, though this solution requires large network resource.</p>
<p>The other solution is to use the Oracle conflict resolution methods to deal with update conflicts that can occur when the same row receives two or more updates.</p>
<div id="REPMA113" class="sect2"><a id="sthref294"></a>
<h3 class="sect2">Overwrite and Discard<a id="sthref295"></a><a id="sthref296"></a> Conflict Resolution Methods</h3>
<p>The overwrite and discard methods ignore the values from either the originating or destination site and therefore can never guarantee convergence with more than one master site. These methods are designed to be used by a single master site and multiple materialized view sites, or with some form of a user-defined notification facility.</p>
<p>The overwrite method replaces the current value at the destination site with the new value from the originating site. Conversely, the discard method ignores the new value from the originating site.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="rarrcatpac.htm#i94790">&#34;ADD_<span class="italic">conflicttype</span>_RESOLUTION Procedure&#34;</a> and <a class="olink REPLN005" href="../REPLN/repconflicts.htm#REPLN005"><span class="variable">Oracle Database Advanced Replication</span></a> for more information about overwrite and discard</div>
<p>Complete the following steps to create an overwrite or discard conflict resolution method. This example illustrates the use of the discard conflict resolution method at the master site. Therefore, in the event of a conflict, the data from a materialized view site is discarded and the master site data remains.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1146"></a><a id="sthref297"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<p>The procedures in the following steps must be executed by the replication administrator.</p>
<pre dir="ltr">*/

SET ECHO ON

SPOOL discard_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1147"></a><a id="sthref298"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<p>Before you define overwrite or discard conflict resolution methods, quiesce the master group that contains the table to which you want to apply the conflict resolution method. In a single master replication environment, quiescing the master group might not be required.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1148"></a><a id="sthref299"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create a column group for your target table.</dt>
<dd>
<p>All Oracle conflict resolution methods are based on logical column groupings called column groups.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i98204">DBMS_REPCAT.MAKE_COLUMN_GROUP (</a><a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a><a id="sthref303"></a><a id="sthref304"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;departments&#39;,
      column_group =&gt; &#39;dep_cg&#39;,
      list_of_column_names =&gt; &#39;manager_id,location_id&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1149"></a><a id="sthref305"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Define the conflict resolution method for a specified table.</dt>
<dd>
<p>This example creates an <code dir="ltr">OVERWRITE</code> conflict resolution method.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a><a id="sthref306"></a><a id="sthref307"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;departments&#39;,
      column_group =&gt; &#39;dep_cg&#39;,
      sequence_no =&gt; 1,
      method =&gt; &#39;DISCARD&#39;,
      parameter_column_name =&gt; &#39;manager_id,location_id&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1150"></a><a id="sthref308"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Regenerate replication support for the table that received the conflict resolution method.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;departments&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1151"></a><a id="sthref309"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Resume master activity after replication support has been regenerated.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i22851"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA115" class="sect2"><a id="sthref310"></a>
<h3 class="sect2">Minimum and Maximum<a id="sthref311"></a><a id="sthref312"></a> Conflict Resolution Methods</h3>
<p>When Advanced Replication detects a conflict with a column group and calls either the minimum or maximum value conflict resolution methods, it compares the new value from the originating site with the current value from the destination site for a designated column in the column group. You must designate this column when you define your conflict resolution method.</p>
<p>If the new value of the designated column is <span class="italic">less than</span> or <span class="italic">greater than</span> (depending on the method used) the current value, then the column group values from the originating site are applied at the destination site, if all other errors were successfully resolved for the row. Otherwise the rows remain unchanged.</p>
<p>Complete the following steps to create an maximum or minimum conflict resolution method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1152"></a><a id="sthref313"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<p>The procedures in the following steps must be executed by the replication administrator.</p>
<pre dir="ltr">*/

SET ECHO ON

SPOOL min_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1153"></a><a id="sthref314"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<p>Before you define maximum or minimum conflict resolution methods, quiesce the master group that contains the table to which you want to apply the conflict resolution method. In a single master replication environment, quiescing the master group might not be required.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1154"></a><a id="sthref315"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create a column group for your target table.</dt>
<dd>
<p>All Oracle conflict resolution methods are based on logical column groupings called column groups.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i98204">DBMS_REPCAT.MAKE_COLUMN_GROUP (</a><a id="sthref316"></a><a id="sthref317"></a><a id="sthref318"></a><a id="sthref319"></a><a id="sthref320"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;jobs&#39;,
      column_group =&gt; &#39;job_minsal_cg&#39;,
      list_of_column_names =&gt; &#39;min_salary&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1155"></a><a id="sthref321"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Define the conflict resolution method for a specified table.</dt>
<dd>
<p>This example creates a <code dir="ltr">MINIMUM</code> conflict resolution method.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a><a id="sthref322"></a><a id="sthref323"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;jobs&#39;,
      column_group =&gt; &#39;job_minsal_cg&#39;,
      sequence_no =&gt; 1,
      method =&gt; &#39;MINIMUM&#39;,
      parameter_column_name =&gt; &#39;min_salary&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1156"></a><a id="sthref324"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Regenerate replication support for the table that received the conflict resolution method.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;jobs&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1157"></a><a id="sthref325"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i22981"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA112" class="sect2"><a id="sthref326"></a>
<h3 class="sect2">Timestamp<a id="sthref327"></a> Conflict Resolution Methods</h3>
<p>The earliest time stamp and latest time stamp methods are variations on the minimum and maximum value methods. To use the time stamp method, you must designate a column in the replicated table of type <code dir="ltr">DATE</code>. When an application updates any column in a column group, the application must also update the value of the designated time stamp column with the local <code dir="ltr">SYSDATE</code>. For a change applied from another site, the time stamp value should be set to the time stamp value from the originating site.</p>
<p>Two elements are needed to make time stamp conflict resolution work well:</p>
<ul>
<li>
<p>Synchronized time settings between computers</p>
</li>
<li>
<p>Timestamp field and trigger to automatically record time stamp</p>
</li>
</ul>
<p>Complete the following steps to create a time stamp conflict resolution method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1158"></a><a id="sthref328"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<p>The procedures in the following steps must be executed by the replication administrator.</p>
<pre dir="ltr">*/

SET ECHO ON

SPOOL timestamp_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1159"></a><a id="sthref329"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<p>Before defining time stamp conflict resolution methods, quiesce the master group that contains the table to which you want to apply the conflict resolution method. In a single master replication environment, quiescing the master group might not be required.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1160"></a><a id="sthref330"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Add a column to your table to record the timestamp value when a row is inserted or updated.</dt>
<dd>
<p>If the target table does not already contain a time stamp field, then add a column to your table to record the time stamp value when a row is inserted or updated. You must use the <code dir="ltr">ALTER_MASTER_REPOBJECT</code> procedure to apply the DDL to the target table. Simply issuing the DDL might cause the replicated object to become invalid.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i95101">DBMS_REPCAT.ALTER_MASTER_REPOBJECT (</a><a id="sthref331"></a><a id="sthref332"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;countries&#39;,
      type =&gt; &#39;TABLE&#39;,
      ddl_text =&gt; &#39;ALTER TABLE hr.countries ADD (timestamp DATE)&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1161"></a><a id="sthref333"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Regenerate replication support for the altered table.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;countries&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1162"></a><a id="sthref334"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create a trigger that records the timestamp when a row is either inserted or updated.</dt>
<dd>
<p>This recorded value is used in the resolution of conflicts based on the Timestamp method. Instead of directly executing the DDL, use the <code dir="ltr">DBMS_REPCAT.CREATE_MASTER_REPOBJECT</code> procedure to create the trigger and add it to your master group.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use columns of <code dir="ltr">datetime</code> and <code dir="ltr">interval</code> data types for priority group conflict resolution.</div>
<pre dir="ltr">*/

<a id="sthref335"></a><a id="sthref336"></a>BEGIN
   <a href="rarrcatpac.htm#i96333">DBMS_REPCAT.CREATE_MASTER_REPOBJECT (</a><a id="sthref337"></a><a id="sthref338"></a>
      gname =&gt; &#39;hr_repg&#39;,
      type =&gt; &#39;TRIGGER&#39;,
      oname =&gt; &#39;insert_time&#39;,
      sname =&gt; &#39;hr&#39;,
      ddl_text =&gt; &#39;CREATE TRIGGER hr.insert_time
                      BEFORE
                         INSERT OR UPDATE ON hr.countries FOR EACH ROW
                      BEGIN
                         IF DBMS_REPUTIL.FROM_REMOTE = FALSE THEN
                            :NEW.TIMESTAMP := SYSDATE;
                         END IF;
                      END;&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1163"></a><a id="sthref339"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create a column group for your target table.</dt>
<dd>
<p>All Oracle conflict resolution methods are based on logical column groupings called column groups.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i98204">DBMS_REPCAT.MAKE_COLUMN_GROUP (</a><a id="sthref340"></a><a id="sthref341"></a><a id="sthref342"></a><a id="sthref343"></a><a id="sthref344"></a><a id="sthref345"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;countries&#39;,
      column_group =&gt; &#39;countries_timestamp_cg&#39;,
      list_of_column_names =&gt; &#39;country_name,region_id,timestamp&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1164"></a><a id="sthref346"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Define the conflict resolution method for a specified table.</dt>
<dd>
<p>This example specifies the <code dir="ltr">LATEST</code> <code dir="ltr">TIMESTAMP</code> conflict resolution method using the <code dir="ltr">timestamp</code> column that you created earlier.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a><a id="sthref347"></a><a id="sthref348"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;countries&#39;,
      column_group =&gt; &#39;countries_timestamp_cg&#39;,
      sequence_no =&gt; 1,
      method =&gt; &#39;LATEST TIMESTAMP&#39;,
      parameter_column_name =&gt; &#39;timestamp&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1165"></a><a id="sthref349"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Regenerate replication support for the table that received the conflict resolution method.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;countries&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1166"></a><a id="sthref350"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i23132"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA114" class="sect2"><a id="sthref351"></a>
<h3 class="sect2">Additive and Average<a id="sthref352"></a><a id="sthref353"></a> Conflict Resolution Methods</h3>
<p>The additive and average methods work with column groups consisting of a single numeric column only. Instead of &#34;accepting&#34; one value over another, this conflict resolution method either adds the two compared values together or takes an average of the two compared values.</p>
<p>Complete the following steps to create an additive or average conflict resolution method. This example averages the commission percentage for an employee in the event of a conflict.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1167"></a><a id="sthref354"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<p>The procedures in the following steps must be executed by the replication administrator.</p>
<pre dir="ltr">*/

SET ECHO ON

SPOOL average_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1168"></a><a id="sthref355"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<p>Before you define additive and average conflict resolution methods, quiesce the master group that contains the table to which you want to apply the conflict resolution method. In a single master replication environment, quiescing the master group might not be required.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1169"></a><a id="sthref356"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create a column group for your target table.</dt>
<dd>
<p>All Oracle conflict resolution methods are based on logical column groupings called column groups.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i98204">DBMS_REPCAT.MAKE_COLUMN_GROUP (</a><a id="sthref357"></a><a id="sthref358"></a><a id="sthref359"></a><a id="sthref360"></a><a id="sthref361"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;,
      column_group =&gt; &#39;commission_average_cg&#39;,
      list_of_column_names =&gt; &#39;commission_pct&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1170"></a><a id="sthref362"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Define the conflict resolution method for a specified table.</dt>
<dd>
<p>This example specifies the <code dir="ltr">AVERAGE</code> conflict resolution method using the <code dir="ltr">sal</code> column.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a><a id="sthref363"></a><a id="sthref364"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;,
      column_group =&gt; &#39;commission_average_cg&#39;,
      sequence_no =&gt; 1,
      method =&gt; &#39;AVERAGE&#39;,
      parameter_column_name =&gt; &#39;commission_pct&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1171"></a><a id="sthref365"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Regenerate replication support for the table that received the conflict resolution method.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1172"></a><a id="sthref366"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i23228"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA116" class="sect2"><a id="sthref367"></a>
<h3 class="sect2">Priority Groups<a id="sthref368"></a> Conflict Resolution Methods</h3>
<p>Priority groups allow you to assign a priority level to each possible value of a particular column. If Oracle detects a conflict, then Oracle updates the table whose &#34;priority&#34; column has a lower value using the data from the table with the higher priority value.</p>
<p>Complete the following steps to create a priority groups conflict resolution method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1173"></a><a id="sthref369"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<p>The procedures in the following steps must be executed by the replication administrator.</p>
<pre dir="ltr">*/

SET ECHO ON

SPOOL priority_groups_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1174"></a><a id="sthref370"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<p>Before you define a priority groups conflict resolution method, quiesce the master group that contains the table to which you want to apply the conflict resolution method. In a single master replication environment, quiescing the master group might not be required.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1175"></a><a id="sthref371"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Ensure that the job_id column is part of the column group for which your site priority conflict resolution mechanism is used.</dt>
<dd>
<p>Use the <code dir="ltr">ADD_GROUPED_COLUMN</code> procedure to add this column to an existing column group. If you do not already have a column group, then you can create a new column group using the <code dir="ltr">DBMS_REPCAT.MAKE_COLUMN_GROUP</code> procedure.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i98204">DBMS_REPCAT.MAKE_COLUMN_GROUP (</a><a id="sthref372"></a><a id="sthref373"></a><a id="sthref374"></a><a id="sthref375"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;,
      column_group =&gt; &#39;employees_priority_cg&#39;,
      list_of_column_names =&gt; &#39;manager_id,hire_date,salary,job_id&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1176"></a><a id="sthref376"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Before you begin assigning a priority value to the values in your table, create a priority group that holds the values you defined.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i96843">DBMS_REPCAT.DEFINE_PRIORITY_GROUP (</a>
      gname =&gt; &#39;hr_repg&#39;,
      pgroup =&gt; &#39;job_pg&#39;,
      datatype =&gt; &#39;VARCHAR2&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1177"></a><a id="sthref377"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Define a priority value for all possible table values.</dt>
<dd>
<p>The <code dir="ltr">DBMS_REPCAT.ADD_PRIORITY_</code><code dir="ltr"><span class="codeinlineitalic">datatype</span></code> procedure is available in several different versions. There is a version for each available data type (<code dir="ltr">NUMBER</code>, <code dir="ltr">VARCHAR2</code>, and so on). Execute this procedure as often as necessary until you have defined a priority value for all possible table values.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="rarrcatpac.htm#i102188">&#34;ADD_PRIORITY_<span class="italic">datatype</span> Procedure&#34;</a> for more information</div>
<pre dir="ltr">*/

BEGIN
   DBMS_REPCAT.ADD_PRIORITY_VARCHAR2(
      gname =&gt; &#39;hr_repg&#39;,
      pgroup =&gt; &#39;job_pg&#39;,
      value =&gt; &#39;ad_pres&#39;,
      priority =&gt; 100);
END;
/

BEGIN
   DBMS_REPCAT.ADD_PRIORITY_VARCHAR2(
      gname =&gt; &#39;hr_repg&#39;,
      pgroup =&gt; &#39;job_pg&#39;,
      value =&gt; &#39;sa_man&#39;,
      priority =&gt; 80);
END;
/

BEGIN
   DBMS_REPCAT.ADD_PRIORITY_VARCHAR2(
      gname =&gt; &#39;hr_repg&#39;,
      pgroup =&gt; &#39;job_pg&#39;,
      value =&gt; &#39;sa_rep&#39;,
      priority =&gt; 60);
END;
/

BEGIN
   DBMS_REPCAT.ADD_PRIORITY_VARCHAR2(
      gname =&gt; &#39;hr_repg&#39;,
      pgroup =&gt; &#39;job_pg&#39;,
      value =&gt; &#39;pu_clerk&#39;,
      priority =&gt; 40);
END;
/

BEGIN
   DBMS_REPCAT.ADD_PRIORITY_VARCHAR2(
      gname =&gt; &#39;hr_repg&#39;,
      pgroup =&gt; &#39;job_pg&#39;,
      value =&gt; &#39;st_clerk&#39;,
      priority =&gt; 20);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1178"></a><a id="sthref378"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Add the PRIORITY GROUP resolution method to your replicated table.</dt>
<dd>
<p>The following example shows that it is the second conflict resolution method for the specified column group (<code dir="ltr">sequence_no</code> parameter).</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a><a id="sthref379"></a><a id="sthref380"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;,
      column_group =&gt; &#39;employees_priority_cg&#39;,
      sequence_no =&gt; 2,
      method =&gt; &#39;PRIORITY GROUP&#39;,
      parameter_column_name =&gt; &#39;job_id&#39;,
      priority_group =&gt; &#39;job_pg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1179"></a><a id="sthref381"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Regenerate replication support for the table that received the conflict resolution method.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1180"></a><a id="sthref382"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i23376"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA117" class="sect2"><a id="sthref383"></a>
<h3 class="sect2">Site Priority<a id="sthref384"></a> Conflict Resolution Methods</h3>
<p>Site priority is a specialized form of a priority group. Therefore, many of the procedures associated with site priority behave similarly to the procedures associated with priority groups. Instead of resolving a conflict based on the priority of a field&#39;s value, the conflict is resolved based on the priority of the sites involved.</p>
<p>For example, if you assign <code dir="ltr">orc2.example.com</code> a higher priority value than <code dir="ltr">orc1.example.com</code> and a conflict arises between these two sites, then the value from <code dir="ltr">orc2.example.com</code> is used.</p>
<p>Complete the following steps to create a site priority conflict resolution method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1181"></a><a id="sthref385"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<p>The procedures in the following steps must be executed by the replication administrator.</p>
<pre dir="ltr">*/

SET ECHO ON

SPOOL site_priority_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1182"></a><a id="sthref386"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<p>Before you define a site priority conflict resolution method, quiesce the master group that contains the table to which you want to apply the conflict resolution method. In a single master replication environment, quiescing the master group might not be required.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1183"></a><a id="sthref387"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Add a site column to your table to store the site value.</dt>
<dd>
<p>Use the <code dir="ltr">DBMS_REPCAT.ALTER_MASTER_REPOBJECT</code> procedure to apply the DDL to the target table. Simply issuing the DDL might cause the replicated object to become invalid.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i95101">DBMS_REPCAT.ALTER_MASTER_REPOBJECT (</a><a id="sthref388"></a><a id="sthref389"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;regions&#39;,
      type =&gt; &#39;TABLE&#39;,
      ddl_text =&gt; &#39;ALTER TABLE hr.regions ADD (site VARCHAR2(20))&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1184"></a><a id="sthref390"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Regenerate replication support for the affected object.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;regions&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1185"></a><a id="sthref391"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create a trigger that records the global name of the site when a row is either inserted or updated.</dt>
<dd>
<p>This recorded value is used in the resolution of conflicts based on the site priority method. Instead of directly executing the DDL, use the <code dir="ltr">DBMS_REPCAT.CREATE_MASTER_REPOBJECT</code> procedure to create the trigger and add it to your master group.</p>
<pre dir="ltr">*/

<a id="sthref392"></a><a id="sthref393"></a>BEGIN
   <a href="rarrcatpac.htm#i96333">DBMS_REPCAT.CREATE_MASTER_REPOBJECT (</a><a id="sthref394"></a><a id="sthref395"></a>
      gname =&gt; &#39;hr_repg&#39;,
      type =&gt; &#39;TRIGGER&#39;,
      oname =&gt; &#39;insert_site&#39;,
      sname =&gt; &#39;hr&#39;,
      ddl_text =&gt; &#39;CREATE TRIGGER hr.insert_site
                     BEFORE
                       INSERT OR UPDATE ON hr.regions FOR EACH ROW
                     BEGIN 
                       IF DBMS_REPUTIL.FROM_REMOTE = FALSE THEN
                         SELECT global_name INTO :NEW.SITE FROM GLOBAL_NAME;
                       END IF;
                     END;&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1186"></a><a id="sthref396"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Ensure that the new column is part of the column group for which your site priority conflict resolution mechanism is used.</dt>
<dd>
<p>Use the <code dir="ltr">ADD_GROUPED_COLUMN</code> procedure to add this column to an existing column group. If you do not already have a column group, then you can create a new column group using the <code dir="ltr">DBMS_REPCAT.MAKE_COLUMN_GROUP</code> procedure.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i98204">DBMS_REPCAT.MAKE_COLUMN_GROUP (</a><a id="sthref397"></a><a id="sthref398"></a><a id="sthref399"></a><a id="sthref400"></a><a id="sthref401"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;regions&#39;,
      column_group =&gt; &#39;regions_sitepriority_cg&#39;,
      list_of_column_names =&gt; &#39;region_id,region_name,site&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1187"></a><a id="sthref402"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Before assigning a site priority value to the sites in your replicated environment, create a site priority group that holds the values you defined.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i96930">DBMS_REPCAT.DEFINE_SITE_PRIORITY (</a><a id="sthref403"></a><a id="sthref404"></a>
      gname =&gt; &#39;hr_repg&#39;,
      name =&gt; &#39;regions_sitepriority_pg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1188"></a><a id="sthref405"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Define the priority value for each of the sites in your replication environment.</dt>
<dd>
<p>Execute this procedure as often as necessary until you have defined a site priority value for each of the sites in our replication environment.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94720">DBMS_REPCAT.ADD_SITE_PRIORITY_SITE (</a><a id="sthref406"></a><a id="sthref407"></a>
      gname =&gt; &#39;hr_repg&#39;,
      name =&gt; &#39;regions_sitepriority_pg&#39;,
      site =&gt; &#39;orc1.example.com&#39;,
      priority =&gt; 100);
END;
/

BEGIN
   <a href="rarrcatpac.htm#i94720">DBMS_REPCAT.ADD_SITE_PRIORITY_SITE (</a>
      gname =&gt; &#39;hr_repg&#39;,
      name =&gt; &#39;regions_sitepriority_pg&#39;,
      site =&gt; &#39;orc2.example.com&#39;,
      priority =&gt; 50);
END;
/

BEGIN
   <a href="rarrcatpac.htm#i94720">DBMS_REPCAT.ADD_SITE_PRIORITY_SITE (</a>
      gname =&gt; &#39;hr_repg&#39;,
      name =&gt; &#39;regions_sitepriority_pg&#39;,
      site =&gt; &#39;orc3.example.com&#39;,
      priority =&gt; 25);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1189"></a><a id="sthref408"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Add the SITE PRIORITY resolution method to your replicated table.</dt>
<dd>
<p>The following example shows that it is the third conflict resolution method for the specified column group (<code dir="ltr">sequence_no</code> parameter).</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a><a id="sthref409"></a><a id="sthref410"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;regions&#39;,
      column_group =&gt; &#39;regions_sitepriority_cg&#39;,
      sequence_no =&gt; 1,
      method =&gt; &#39;SITE PRIORITY&#39;,
      parameter_column_name =&gt; &#39;site&#39;,
      priority_group =&gt; &#39;regions_sitepriority_pg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1190"></a><a id="sthref411"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Regenerate replication support for the table that received the conflict resolution method.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;regions&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1191"></a><a id="sthref412"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i23529"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i17665"></a>
<div id="REPMA355" class="sect1">
<h2 class="sect1">Creating Conflict Resolution Methods for Uniqueness Conflicts<a id="sthref413"></a><a id="sthref414"></a></h2>
<p>In a replication environment, you might have situations where you encounter a conflict on a unique constraint, often resulting from an insert. If your business rules allow you to delete the duplicate row, then you can define a resolution method with Oracle<code dir="ltr">&#39;</code>s prebuilt conflict resolution methods.</p>
<p>More often, however, you probably want to modify the conflicting value so that it no longer violates the unique constraint. Modifying the conflicting value ensures that you do not lose important data. Oracle&#39;s prebuilt uniqueness conflict resolution method can make the conflicting value unique by appending a site name or a sequence number to the value.</p>
<p>An additional component that accompanies the uniqueness conflict resolution method is a notification facility. The conflicting information is modified by Oracle so that it can be inserted into the table, but you should be notified so that you can analyze the conflict to determine whether the record should be deleted, or the data merged into another record, or a completely new value be defined for the conflicting data.</p>
<p>A uniqueness conflict resolution method detects and resolves conflicts encountered on columns with a <code dir="ltr">UNIQUE</code> constraint. The example in this section uses the <code dir="ltr">employees</code> table in the <code dir="ltr">hr</code> sample schema, which has the unique constraint <code dir="ltr">emp_email_uk</code> on the <code dir="ltr">email</code> column.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To add unique conflict resolution method for a column, the name of the unique index on the column must match the name of the unique or primary key constraint.</div>
<p>Complete the following steps to create a uniqueness conflict resolution method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1192"></a><a id="sthref415"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">SET ECHO ON

SPOOL unique_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1193"></a><a id="sthref416"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<p>Before you define a uniqueness conflict resolution method, ensure that the master group that contains the table to which you want to apply the conflict resolution method is quiesced.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1194"></a><a id="CJAFAEGA"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create a table that stores the messages received from your notification facility.</dt>
<dd>
<p>In this example, the table name is <code dir="ltr">conf_report</code>.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i114434">DBMS_REPCAT.EXECUTE_DDL (</a>
      gname =&gt; &#39;hr_repg&#39;,
      ddl_text =&gt; &#39;CREATE TABLE hr.conf_report (
                   line NUMBER(2),
                   txt VARCHAR2(80),
                   timestamp DATE,
                   table_name VARCHAR2(30),
                   table_owner VARCHAR2(30),
                   conflict_type VARCHAR2(7))&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1195"></a><a id="sthref417"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Connect as the owner of the table you created in Step <a class="dashingAutolink" name="autolink-91755"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/3"></a><a href="#CJAFAEGA">3</a>.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT hr@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1196"></a><a id="CJABIBCD"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create a package that sends a notification to the conf_report table when a conflict is detected.</dt>
<dd>
<p>In this example, the package name is <code dir="ltr">notify</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="raruserconflictres.htm#i9602">Appendix B, &#34;User-Defined Conflict Resolution Methods&#34;</a> describes the conflict resolution notification package that is created in this script</div>
<pre dir="ltr">*/

CREATE OR REPLACE PACKAGE notify AS
   FUNCTION emp_unique_violation (email IN OUT VARCHAR2,
      discard_new_values IN OUT BOOLEAN)
   RETURN BOOLEAN;
END notify;
/

CREATE OR REPLACE PACKAGE BODY notify AS
   TYPE message_table IS TABLE OF VARCHAR2(80) INDEX BY BINARY_INTEGER;
   PROCEDURE report_conflict(conflict_report IN MESSAGE_TABLE,
      report_length IN NUMBER,
      conflict_time IN DATE,
      conflict_table IN VARCHAR2,
      table_owner IN VARCHAR2,
      conflict_type IN VARCHAR2) IS
      BEGIN
         FOR idx IN 1..report_length LOOP
            BEGIN
              INSERT INTO hr.conf_report
              (line, txt, timestamp, table_name, table_owner, conflict_type)
              VALUES (idx, SUBSTR(conflict_report(idx),1,80), conflict_time,
              conflict_table, table_owner, conflict_type);
            EXCEPTION WHEN others THEN NULL;
            END;
         END LOOP;
      END report_conflict;
   FUNCTION emp_unique_violation(email IN OUT VARCHAR2,
      discard_new_values IN OUT BOOLEAN)
   RETURN BOOLEAN IS
      local_node VARCHAR2(128);
      conf_report MESSAGE_TABLE;
      conf_time DATE := SYSDATE;
   BEGIN
      BEGIN
         SELECT global_name INTO local_node FROM global_name;
      EXCEPTION WHEN others THEN local_node := &#39;?&#39;;
      END;
      conf_report(1) := &#39;UNIQUENESS CONFLICT DETECTED IN EMPLOYEES ON &#39; ||
         TO_CHAR(conf_time, &#39;MM-DD-YYYY HH24:MI:SS&#39;);
      conf_report(2) := &#39; AT NODE &#39; || local_node;
      conf_report(3) := &#39;ATTEMPTING TO RESOLVE CONFLICT USING&#39; ||
         &#39; APPEND SITE NAME METHOD&#39;;
      conf_report(4) := &#39;EMAIL: &#39; || email;
      conf_report(5) := NULL;
      report_conflict(conf_report,5,conf_time,&#39;employees&#39;,&#39;hr&#39;,&#39;UNIQUE&#39;);
      discard_new_values := FALSE;
      RETURN FALSE;
   END emp_unique_violation;
END notify;
/

/*
</pre></dd>
<dd><a id="REPMA1197"></a><a id="sthref418"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Connect as the replication administrator.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1198"></a><a id="sthref419"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Replicate the package you created in Step <a class="dashingAutolink" name="autolink-91756"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/5"></a><a href="#CJABIBCD">5</a> to all of the master sites in your replication environment.</dt>
<dd>
<p>This step ensures that the notification facility is available at all master sites.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i96333">DBMS_REPCAT.CREATE_MASTER_REPOBJECT (</a>
      gname =&gt; &#39;hr_repg&#39;,
      type =&gt;  &#39;PACKAGE&#39;,
      oname =&gt; &#39;notify&#39;,
      sname =&gt; &#39;hr&#39;);
END;
/

BEGIN
   <a href="rarrcatpac.htm#i96333">DBMS_REPCAT.CREATE_MASTER_REPOBJECT (</a>
      gname =&gt; &#39;hr_repg&#39;,
      type =&gt;  &#39;PACKAGE BODY&#39;,
      oname =&gt; &#39;notify&#39;,
      sname =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1199"></a><a id="sthref420"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Add the notification facility as one of your conflict resolution methods.</dt>
<dd>
<p>Add it even though it only notifies of a conflict. The following example demonstrates adding the notification facility as a <code dir="ltr">USER</code> <code dir="ltr">FUNCTION</code>.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a>
      sname =&gt; &#39;hr&#39;, 
      oname =&gt; &#39;employees&#39;, 
      constraint_name =&gt; &#39;emp_email_uk&#39;,
      sequence_no =&gt; 1, 
      method =&gt; &#39;USER FUNCTION&#39;,
      comment =&gt; &#39;Notify DBA&#39;,
      parameter_column_name =&gt; &#39;email&#39;,
      function_name =&gt; &#39;hr.notify.emp_unique_violation&#39;); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1200"></a><a id="sthref421"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Add the actual conflict resolution method to your table.</dt>
<dd>
<p>The following example demonstrates adding the <code dir="ltr">APPEND</code> <code dir="ltr">SITE</code> <code dir="ltr">NAME</code> uniqueness conflict resolution method to your replicated table.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i94830">DBMS_REPCAT.ADD_UPDATE_RESOLUTION (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;,
      constraint_name =&gt; &#39;emp_email_uk&#39;,
      sequence_no =&gt; 2,
      method =&gt; &#39;APPEND SITE NAME&#39;,
      parameter_column_name =&gt; &#39;email&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1201"></a><a id="sthref422"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Regenerate replication support for the table that received the conflict resolution methods.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1202"></a><a id="sthref423"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i23774"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i14792"></a>
<div id="REPMA111" class="sect1">
<h2 class="sect1">Creating Conflict Avoidance Methods for Delete Conflicts<a id="sthref424"></a></h2>
<p>Unlike update conflicts, where there are two values to compare, simply deleting a row makes the update conflict resolution methods described in the previous section ineffective because only one value would exist.</p>
<p>The best way to deal with deleting rows in a replication environment is to avoid the conflict by marking a row for deletion and periodically purging the table of all marked records. Because you are not physically removing this row, your data can converge at all master sites if a conflict arises because you still have two values to compare, if no other errors have occurred. After you are sure that your data has converged, you can purge marked rows using a replicated purge procedure.</p>
<p>When developing the front-end application for your database, you probably want to filter out the rows that have been marked for deletion, because doing so makes it appear to your users as though the row was physically deleted. Simply exclude the rows that have been marked for deletion in the <code dir="ltr">SELECT</code> statement for your data set.</p>
<p>For example, a select statement for a current employee listing might be similar to the following:</p>
<pre dir="ltr">SELECT * FROM hr.locations WHERE remove_date IS NULL;
</pre>
<p>This section describes how to prepare your replicated table to avoid delete conflicts. You also learn how to use procedural replication to purge those records that have been marked for deletion.</p>
<p>Complete the following steps to create a conflict avoidance method for delete conflicts.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1203"></a><a id="sthref425"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect as the replication administrator at the master definition site.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">SET ECHO ON

SPOOL delete_conflictres.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1204"></a><a id="sthref426"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Quiesce the master group that contains the table to which you want to apply the conflict resolution method.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1205"></a><a id="sthref427"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Add a column to the replicated table that stores the mark for deleted records.</dt>
<dd>
<p>It is advisable to use a time stamp to mark your records for deletion (time stamp reflects when the record was marked for deletion). Because you are using a time stamp, the new column can be a <code dir="ltr">DATE</code> data type. Use the <code dir="ltr">DBMS_REPCAT.ALTER_MASTER_REPOBJECT</code> procedure to add the <code dir="ltr">remove_date</code> column to your existing replicated table.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i95101">DBMS_REPCAT.ALTER_MASTER_REPOBJECT (</a><a id="sthref428"></a><a id="sthref429"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;locations&#39;,
      type =&gt; &#39;TABLE&#39;,
      ddl_text =&gt; &#39;ALTER TABLE hr.locations ADD (remove_date DATE)&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1206"></a><a id="sthref430"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Regenerate replication support for the altered table.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;locations&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1207"></a><a id="sthref431"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create a package that is replicated to all of the master sites in your replication environment.</dt>
<dd>
<p>This package purges all marked records from the specified table.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i96333">DBMS_REPCAT.CREATE_MASTER_REPOBJECT (</a>
      gname =&gt; &#39;hr_repg&#39;,
      type =&gt; &#39;PACKAGE&#39;,
      oname =&gt; &#39;purge&#39;,
      sname =&gt; &#39;hr&#39;,
      ddl_text =&gt; &#39;CREATE OR REPLACE PACKAGE hr.purge AS
                      PROCEDURE remove_locations(purge_date DATE);
                   END;&#39;);
END;
/

BEGIN
   <a href="rarrcatpac.htm#i96333">DBMS_REPCAT.CREATE_MASTER_REPOBJECT (</a>
      gname =&gt; &#39;hr_repg&#39;,
      type =&gt; &#39;PACKAGE BODY&#39;,
      oname =&gt; &#39;purge&#39;,
      sname =&gt; &#39;hr&#39;,
      ddl_text =&gt; &#39;CREATE OR REPLACE PACKAGE BODY hr.purge AS
                      PROCEDURE remove_locations(purge_date IN DATE) IS
                      BEGIN
                         DBMS_REPUTIL.REPLICATION_OFF;
                         LOCK TABLE hr.locations IN EXCLUSIVE MODE;
                         DELETE hr.locations WHERE remove_date IS NOT NULL 
                            AND remove_date &lt; purge_date;
                         DBMS_REPUTIL.REPLICATION_ON;
                      EXCEPTION WHEN others THEN
                         DBMS_REPUTIL.REPLICATION_ON;
                      END;
                   END;&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1208"></a><a id="sthref432"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Generate replication support for each package and package body.</dt>
<dd>
<p>After generating replication support, a synonym is created for you and added to your master group as a replicated object. This synonym is labeled as <code dir="ltr">defer_purge.remove_locations</code>.</p>
<pre dir="ltr">*/

BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;purge&#39;, 
      type =&gt; &#39;PACKAGE&#39;,
      min_communication =&gt; TRUE); 
END;
/

BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;purge&#39;, 
      type =&gt; &#39;PACKAGE BODY&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1209"></a><a id="sthref433"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;In a separate terminal window, manually push any administrative requests at all other master sites.</dt>
<dd>
<p>You might need to execute the <code dir="ltr">DO_DEFERRED_REPCAT_ADMIN</code> procedure in the <code dir="ltr">DBMS_REPCAT</code> package several times, because some administrative operations have multiple steps. The following is an example:</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i96992">DBMS_REPCAT.DO_DEFERRED_REPCAT_ADMIN (</a><a id="sthref434"></a><a id="sthref435"></a>
      gname =&gt; &#39;hr_repg&#39;,
      all_sites =&gt; FALSE);
END;
/

*/

PAUSE Press &lt;RETURN&gt; to continue when you have verified that there are no 
pending administrative requests in the DBA_REPCATLOG data dictionary view.

/*
</pre></dd>
<dd><a id="REPMA1210"></a><a id="sthref436"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i23877"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i21626"></a>
<div id="REPMA110" class="sect1">
<h2 class="sect1">Using Dynamic Ownership Conflict Avoidance<a id="sthref437"></a><a id="sthref438"></a><a id="sthref439"></a></h2>
<p>This section describes a more advanced method of designing your applications to avoid conflicts. This method, known as <span class="glossaryterm">token passing,</span> is similar to the workflow method described in the following sections. Although this section describes how to use this method to control the ownership of an entire row, you can use a modified form of this method to control ownership of the individual column groups within a row.</p>
<p>Both workflow and token passing allow dynamic ownership of data. With dynamic ownership, only one site at a time is allowed to update a row, but ownership of the row can be passed from site to site. Both workflow and token passing use the value of one or more &#34;identifier&#34; columns to determine who is currently allowed to update the row.</p>
<div id="REPMA356" class="sect2"><a id="sthref440"></a>
<h3 class="sect2">Workflow<a id="sthref441"></a><a id="sthref442"></a><a id="sthref443"></a></h3>
<p>With workflow partitioning, you can think of data ownership as being &#34;pushed&#34; from site to site. Only the current owner of the row is allowed to push the ownership of the row to another site, by changing the value of the &#34;identifier&#34; columns.</p>
<p>Take the simple example of separate sites for ordering, shipping, and billing. Here, the identifier columns are used to indicate the status of an order. The status determines which site can update the row. After a user at the ordering site has entered the order, the user updates the status of this row to <code dir="ltr">ship</code>. Users at the ordering site are no longer allowed to modify this row &mdash; ownership has been pushed to the shipping site.</p>
<p>After shipping the order, the user at the shipping site updates the status of this row to <code dir="ltr">bill</code>, thus pushing ownership to the billing site, and so on.</p>
<p>To successfully avoid conflicts, applications implementing dynamic data ownership must ensure that the following conditions are met:</p>
<ul>
<li>
<p>Only the owner of the row can update the row.</p>
</li>
<li>
<p>The row is never owned by more than one site.</p>
</li>
<li>
<p>Ordering conflicts can be successfully resolved at all sites.</p>
</li>
</ul>
<p>With workflow partitioning, only the current owner of the row can push the ownership of the row to the next site by updating the &#34;identifier&#34; columns. No site is given ownership unless another site has given up ownership; thus ensuring there is never more than one owner.</p>
<p>Because the flow of work is ordered, ordering conflicts can be resolved by applying the change from the site that occurs latest in the flow of work. Any ordering conflicts can be resolved using a form of the priority conflict resolution method, where the priority value increases with each step in the work flow process. The priority conflict resolution method successfully converges for more than one master site as long as the priority value is always increasing.</p>
</div>
<!-- class="sect2" -->
<div id="REPMA357" class="sect2"><a id="sthref444"></a>
<h3 class="sect2">Token Passing<a id="sthref445"></a><a id="sthref446"></a></h3>
<p>Token passing uses a more generalized approach to meeting these criteria. To implement token passing, instead of the &#34;identifier&#34; columns, your replicated tables must have owner and epoch columns. The owner column stores the global database name of the site currently believed to own the row.</p>
<p>Once you have designed a token passing mechanism, you can use it to implement a variety of forms of dynamic partitioning of data ownership, including workflow.</p>
<p>You should design your application to implement token passing for you automatically. You should not allow the owner or epoch columns to be updated outside this application.</p>
<p>Whenever you attempt to update a row, your application should:</p>
<ol>
<li>
<p>Locate the current owner of the row.</p>
</li>
<li>
<p>Establish ownership of the row.</p>
</li>
<li>
<p>Lock the row to prevent updates while ownership is changing.</p>
</li>
<li>
<p>Perform the update.</p>
</li>
</ol>
<p>Oracle releases the lock when you commit your transaction.</p>
<p>For example, <a href="#i32577">Figure 6-1</a> illustrates how ownership of employee <code dir="ltr">100</code> passes from the <code dir="ltr">acct_sf</code> database to the <code dir="ltr">acct_ny</code> database.</p>
<div id="REPMA358" class="figure">
<p class="titleinfigure"><a id="i32577"></a>Figure 6-1 Grabbing the Token</p>
<img width="677" height="657" src="img/repma009.gif" alt="Description of Figure 6-1 follows"/><br/>
<a id="sthref447" href="img_text/repma009.htm">Description of &#34;Figure 6-1 Grabbing the Token &#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div id="REPMA359" class="sect2"><a id="sthref448"></a>
<h3 class="sect2">Locating the Owner of a Row<a id="sthref449"></a></h3>
<p>To obtain ownership, the <code dir="ltr">acct_ny</code> database uses a simple recursive algorithm to locate the owner of the row. The sample code for this algorithm is shown as follows:</p>
<pre dir="ltr">-- Sample code for locating the token owner.
-- This is for a table TABLE_NAME with primary key PK.
-- Initial call should initialize loc_epoch to 0 and loc_owner
-- to the local global name.
get_owner(PK IN primary_key_type, loc_epoch IN OUT NUMBER, 
          loc_owner IN OUT VARCHAR2)
{
  -- use dynamic SQL (dbms_sql) to perform a select similar to
  -- the following:
  SELECT owner, epoch into rmt_owner, rmt_epoch
     FROM TABLE_NAME@loc_owner
     WHERE primary_key = PK FOR UPDATE;
  IF rmt_owner = loc_owner AND rmt_epoch &gt;= loc_epoch THEN
   loc_owner := rmt_owner;
   loc_epoch := rmt_epoch;
   RETURN;
  ELSIF rmt_epoch &gt;= loc_epoch THEN 
   get_owner(PK, rmt_epoch, rmt_owner);
   loc_owner := rmt_owner;
   loc_epoch := rmt_epoch;
   RETURN;
  ELSE
   raise_application_error(-20000, &#39;No owner for row&#39;);
  END IF;}
</pre></div>
<!-- class="sect2" -->
<div id="REPMA360" class="sect2"><a id="sthref450"></a>
<h3 class="sect2">Obtaining Ownership<a id="sthref451"></a></h3>
<p>After locating the owner of the row, the <code dir="ltr">acct_ny</code> site gets ownership from the <code dir="ltr">acct_sf</code> site by completing the following steps:</p>
<ol>
<li>
<p>Lock the row at the <code dir="ltr">sf</code> site to prevent any changes from occurring while ownership is being exchanged.</p>
<p>This operation ensures that only one site considers itself to be the owner at all times. The update at the <code dir="ltr">sf</code> site should not be replicated using <code dir="ltr">DBMS_REPUTIL.REPLICATION_OFF</code>. The replicated change of ownership at the <code dir="ltr">ny</code> site in Step&nbsp;<a href="#CJADAJBJ">4</a> will ultimately be propagated to all other sites in the replication environment, including the <code dir="ltr">sf</code> site, where it will have no effect.</p>
</li>
<li id="CJAGAAJE">
<p>Synchronously update the owner information at both the <code dir="ltr">sf</code> and <code dir="ltr">ny</code> sites.</p>
</li>
<li>
<p>Update the row information at the new owner site, <code dir="ltr">ny</code>, with the information from the current owner site, <code dir="ltr">sf</code>.</p>
<p>This data is guaranteed to be the most recent. This time, the change at the <code dir="ltr">ny</code> site should not be replicated. Any queued changes to this data at the <code dir="ltr">sf</code> site are propagated to all other sites in the usual manner. When the <code dir="ltr">sf</code> change is propagated to <code dir="ltr">ny</code>, it is ignored because of the values of the epoch numbers, as described in the next bullet point.</p>
</li>
<li id="CJADAJBJ">
<p>Update the epoch number at the new owner site to be one greater than the value at the previous site.</p>
<p>Perform this update at the new owner only, and then asynchronously propagate this update to the other master sites. Incrementing the epoch number at the new owner site prevents ordering conflicts.</p>
<p>When the <code dir="ltr">sf</code> changes (that were in the deferred queue in Step <a href="#CJAGAAJE">2</a> preceding) are ultimately propagated to the <code dir="ltr">ny</code> site, the <code dir="ltr">ny</code> site ignores them because they have a lower epoch number than the epoch number at the <code dir="ltr">ny</code> site for the same data.</p>
<p>As another example, suppose the <code dir="ltr">hq</code> site received the <code dir="ltr">sf</code> changes after receiving the <code dir="ltr">ny</code> changes, the <code dir="ltr">hq</code> site would ignore the <code dir="ltr">sf</code> changes because the changes applied from the <code dir="ltr">ny</code> site would have the greater epoch number.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="REPMA361" class="sect2"><a id="sthref452"></a>
<h3 class="sect2">Applying the Change</h3>
<p>You should design your application to implement this method of token passing for you automatically whenever you perform an update. You should not allow the owner or epoch columns to be updated outside this application. The lock that you grab when you change ownership is released when you apply your actual update. The changed information, along with the updated owner and epoch information, are asynchronously propagated to the other sites in the usual manner.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i21615"></a>
<div id="REPMA362" class="sect1">
<h2 class="sect1">Auditing Successful Conflict Resolution<a id="sthref453"></a><a id="sthref454"></a><a id="sthref455"></a><a id="sthref456"></a></h2>
<p>Whenever Oracle detects and successfully resolves an update, delete, or uniqueness conflict, you can view information about what method was used to resolve the conflict by querying the <code dir="ltr">ALL_REPRESOLUTION_STATISTICS</code> data dictionary view. This view is updated only if you have enabled conflict resolution statistics gathering for the table involved in the conflict.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
The <a href="rarrcatviews.htm#i37586">ALL_REPRESOLUTION_STATISTICS</a> view for more information</div>
<div id="REPMA363" class="sect2"><a id="sthref457"></a>
<h3 class="sect2">Collecting Conflict Resolution Statistics<a id="sthref458"></a><a id="sthref459"></a><a id="sthref460"></a><a id="sthref461"></a></h3>
<p>Use the <code dir="ltr">REGISTER_STATISTICS</code> procedure in the <code dir="ltr">DBMS_REPCAT</code> package to collect information about the successful resolution of update, delete, and uniqueness conflicts for a table. The following example gathers statistics for the <code dir="ltr">employees</code> table in the <code dir="ltr">hr</code> schema:</p>
<pre dir="ltr">BEGIN
    <a href="rarrcatpac.htm#i114435">DBMS_REPCAT.REGISTER_STATISTICS (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;);
END;
/
</pre></div>
<!-- class="sect2" -->
<div id="REPMA364" class="sect2"><a id="sthref462"></a>
<h3 class="sect2">Viewing Conflict Resolution Statistics<a id="sthref463"></a><a id="sthref464"></a></h3>
<p>After calling <code dir="ltr">REGISTER_STATISTICS</code> for a table, each conflict that is successfully resolved for that table is logged in the <code dir="ltr">ALL_REPRESOLUTION_STATISTICS</code> data dictionary view. Information about unresolved conflicts is always logged in the <code dir="ltr">DEFERROR</code> view, whether the object is registered or not.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <a href="rarrcatviews.htm#i37586">ALL_REPRESOLUTION_STATISTICS</a> view and the <a href="rardeftranviews.htm#i37540">DEFERROR</a> view for more information</div>
</div>
<!-- class="sect2" -->
<a id="i20446"></a>
<div id="REPMA365" class="sect2">
<h3 class="sect2">Canceling Conflict Resolution Statistics<a id="sthref465"></a><a id="sthref466"></a> <a id="sthref467"></a><a id="sthref468"></a></h3>
<p>Use the <code dir="ltr">CANCEL_STATISTICS</code> procedure in the <code dir="ltr">DBMS_REPCAT</code> package if you no longer want to collect information about the successful resolution of update, delete, and uniqueness conflicts for a table. The following example cancels statistics gathering on the <code dir="ltr">employees</code> table in the <code dir="ltr">hr</code> schema:</p>
<pre dir="ltr">BEGIN
    <a href="rarrcatpac.htm#i114436">DBMS_REPCAT.CANCEL_STATISTICS (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;);
END;
/
</pre></div>
<!-- class="sect2" -->
<div id="REPMA366" class="sect2"><a id="sthref469"></a>
<h3 class="sect2">Clearing Statistics Information<span class="bold"><a id="sthref470"></a></span><a id="sthref471"></a><span class="bold"><a id="sthref472"></a><a id="sthref473"></a><a id="sthref474"></a></span></h3>
<p>If you registered a table to log information about the successful resolution of update, delete, and uniqueness conflicts, then you can remove this information from the <code dir="ltr">DBA_REPRESOLUTION_STATISTICS</code> data dictionary view by calling the <code dir="ltr">PURGE_STATISTICS</code> procedure in the <code dir="ltr">DBMS_REPCAT</code> package.</p>
<p>The following example purges the statistics gathered about conflicts resolved due to inserts, updates, and deletes on the <code dir="ltr">employees</code> table between January 1 and March&nbsp;31:</p>
<pre dir="ltr">BEGIN
    <a href="rarrcatpac.htm#i114437">DBMS_REPCAT.PURGE_STATISTICS (</a>
      sname  =&gt; &#39;hr&#39;, 
      oname  =&gt; &#39;employees&#39;, 
      start_date =&gt; &#39;01-JAN-2001&#39;,
      end_date =&gt; &#39;31-MAR-2001&#39;);
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment854">
<tr>
<td class="cellalignment863">
<table class="cellalignment859">
<tr>
<td class="cellalignment858"><a href="rarmviewgroup.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment858"><a href="rarpart2.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment865">
<table class="cellalignment857">
<tr>
<td class="cellalignment858"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment858"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment858"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment858"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment858"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment858"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>