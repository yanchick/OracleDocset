<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-91776"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Managing%20Replication%20Objects%20and%20Queues"></a><title>Managing Replication Objects and Queues</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1042"/>
<meta name="dcterms.created" content="2015-02-06T10:45:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Replication Management API Reference"/>
<meta name="dcterms.identifier" content="E18896-09"/>
<meta name="dcterms.isVersionOf" content="REPMA"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="rarmanmv.htm" title="Previous" type="text/html"/>
<link rel="Next" href="rarmonitor.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E18896-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/38</span> <!-- End Header -->
<div id="REPMA009" class="chapter"><a id="i33478"></a> <a id="CACIHFAC"></a>
<h1 class="chapter"><span class="secnum">9</span> Managing Replication Objects and Queues</h1>
<p><a id="sthref789"></a><a id="sthref790"></a><a id="sthref791"></a><a id="sthref792"></a>This chapter illustrates how to manage the replication objects and queues in your replication environment using the replication management API.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i25931">Altering a Replicated Object in a Quiesced Master Group</a></p>
</li>
<li>
<p><a href="#i22648">Modifying Tables without Replicating the Modifications</a></p>
</li>
<li>
<p><a href="#i31438">Converting a LONG Column to a LOB Column in a Replicated Table</a></p>
</li>
<li>
<p><a href="#g45683">Determining Differences Between Replicated Tables</a></p>
</li>
<li>
<p><a href="#i30343">Managing the Deferred Transactions Queue</a></p>
</li>
<li>
<p><a href="#i30415">Managing the Error Queue</a></p>
</li>
</ul>
<a id="i25931"></a>
<div id="REPMA417" class="sect1">
<h2 class="sect1">Altering a Replicated Object in a Quiesced Master Group<a id="sthref793"></a><a id="sthref794"></a><a id="sthref795"></a><a id="sthref796"></a></h2>
<p>As your database needs change, you might need to modify the characteristics of your replicated objects. It is important that you do not directly execute DDL to alter your replicated objects. Doing so might cause your replication environment to fail.</p>
<p>Use the <code dir="ltr">ALTER_MASTER_REPOBJECT</code> procedure in the <code dir="ltr">DBMS_REPCAT</code> package to alter the characteristics of your replicated objects in a quiesced master group. From the example following, notice that you simply include the necessary DDL within the procedure call (see the <code dir="ltr">ddl_text</code> parameter).</p>
<p>Meet the following requirements to complete these actions:</p>
<p><span class="bold">Executed As</span>: Replication Administrator</p>
<p><span class="bold">Executed At</span>: Master Definition Site</p>
<p><span class="bold">Replication Status</span>: Quiesced</p>
<p>Complete the following steps to alter a replicated object in a quiesced master group.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="REPMA1320"></a><a id="sthref797"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;If you are altering a master table, and there are updatable materialized views based on the master table, then refresh the updatable materialized views.</dt>
<dd>
<p>Refresh the updatable materialized views to push any changes from them to the master table. See <a href="rarmanmv.htm#i34521">&#34;Refreshing Materialized Views&#34;</a> for instructions.</p>
<pre dir="ltr">*/

PAUSE Press &lt;RETURN&gt; to continue when all of the updatable materialized views that are based on the master table have been refreshed.

/*
</pre></dd>
<dd><a id="REPMA1321"></a><a id="sthref798"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Connect to the master definition site as the replication administrator.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">SET ECHO ON

SPOOL alter_rep_object.out

CONNECT repadmin@orc1.example.com

/*
</pre></dd>
<dd><a id="REPMA1322"></a><a id="sthref799"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;If necessary, then quiesce the master group.</dt>
<dd>
<p>See the <a href="rarrcatpac.htm#i95095">&#34;ALTER_MASTER_REPOBJECT Procedure&#34;</a> for information about when quiesce is not required.</p>
<pre dir="ltr">*/

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1323"></a><a id="sthref800"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;In a separate SQL*Plus session, check the status of the master group you are quiescing.</dt>
<dd>
<p>Do not proceed until the group&#39;s status is <code dir="ltr">QUIESCED</code>.</p>
<p>To check the status, run the following query:</p>
<pre dir="ltr">SELECT GNAME, STATUS FROM DBA_REPGROUP;

*/

PAUSE Press &lt;RETURN&gt; to continue when the master group&#39;s status is QUIESCED.

/*
</pre></dd>
<dd><a id="REPMA1324"></a><a id="sthref801"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp; Alter the replicated object.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i95101">DBMS_REPCAT.ALTER_MASTER_REPOBJECT (</a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;,
      type =&gt; &#39;TABLE&#39;,
      ddl_text =&gt; &#39;ALTER TABLE hr.employees ADD (timestamp DATE)&#39;);
END;
/

/*
</pre></dd>
<dd><a id="REPMA1325"></a><a id="sthref802"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Regenerate replication support for the altered object.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN 
    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a><a id="sthref803"></a><a id="sthref804"></a>
      sname =&gt; &#39;hr&#39;,
      oname =&gt; &#39;employees&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/

/*
</pre></dd>
<dd><a id="REPMA1326"></a><a id="sthref805"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;In a separate SQL*Plus session, check if DBA_REPCATLOG is empty.</dt>
<dd>
<p>Do not proceed until this view is empty.</p>
<p>Execute the following <code dir="ltr">SELECT</code> statement in another SQL*Plus session to monitor the <code dir="ltr">DBA_REPCATLOG</code> view:</p>
<pre dir="ltr">SELECT * FROM DBA_REPCATLOG WHERE GNAME = &#39;HR_REPG&#39;;

*/

PAUSE Press &lt;RETURN&gt; to continue when DBA_REPCATLOG is empty.

/*
</pre></dd>
<dd><a id="REPMA1327"></a><a id="sthref806"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Re-create the Materialized View Log for a Master Table, If Necessary</dt>
<dd>
<p>If you altered a master table with fast-refreshable materialized views based on it, then the materialized view log must be dropped and re-created if any of the following conditions are met:</p>
<ul>
<li>
<p>The materialized view log must contain one or more new columns that were added to the master table. In this case, you can choose to alter the materialized view log to add the columns. See <a href="rarmanmv.htm#CCHFFJHG">&#34;Altering a Materialized View Log to Add Columns&#34;</a>.</p>
</li>
<li>
<p>The materialized view log contains one or more columns in the master table that were altered.</p>
</li>
<li>
<p>The materialized view log contains one more columns that were deleted from the master table.</p>
</li>
</ul>
<pre dir="ltr">*/

PAUSE Press &lt;RETURN&gt; to continue after the materialized view logs are re-created.

/*
</pre></dd>
<dd><a id="REPMA1328"></a><a id="sthref807"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Re-create Materialized Views, If Necessary</dt>
<dd>
<p>If you altered a master table with updatable materialized views based on it, then all of these updatable materialized views must be re-created.</p>
<p>If you altered a master table with read-only materialized views based on it, then these read-only materialized views must be re-created if any of the following conditions are met:</p>
<ul>
<li>
<p>The read-only materialized view must reference one or more columns that were added to the master table.</p>
</li>
<li>
<p>The read-only materialized view references one or more columns in the master table that were altered.</p>
</li>
<li>
<p>The read-only materialized view references one or more columns that were deleted from the master table.</p>
</li>
</ul>
<pre dir="ltr">*/

PAUSE Press &lt;RETURN&gt; to continue after the materialized views are re-created.

/*
</pre></dd>
<dd><a id="REPMA1329"></a><a id="sthref808"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Resume replication activity.</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/

SET ECHO OFF

SPOOL OFF

<a id="i30808"></a>/************************* END OF SCRIPT **********************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i22648"></a>
<div id="REPMA109" class="sect1">
<h2 class="sect1">Modifying Tables without Replicating the Modifications<a id="sthref809"></a><a id="sthref810"></a><a id="sthref811"></a><a id="sthref812"></a></h2>
<p>You might have a situation in which you must modify a replicated object, but you do not want this modification replicated to the other sites in the replication environment. For example, you might want to disable replication in the following situations:</p>
<ul>
<li>
<p>When you are using procedural replication to propagate a change, always disable row-level replication at the start of your procedure.</p>
</li>
<li>
<p>You might need to disable replication in triggers defined on replicated tables to avoid replicating trigger actions multiple times. See <a href="#i22702">&#34;Ensuring that Replicated Triggers Fire Only Once&#34;</a>.</p>
</li>
<li>
<p>Sometimes when you manually resolve a conflict, you might not want to replicate this modification to the other copies of the table.</p>
</li>
</ul>
<p>You might need to do this, for example, if you must correct the state of a record at one site so that a conflicting replicated update will succeed when you reexecute the error transaction. Or, you might use an unreplicated modification to undo the effects of a transaction at its origin site because the transaction could not be applied at the destination site. In this example, you can use the Advanced Replication interface in Oracle Enterprise Manager Cloud Control to delete the conflicting transaction from the destination site.</p>
<p>To modify tables without replicating the modifications, use the <code dir="ltr">REPLICATION_ON</code> and <code dir="ltr">REPLICATION_OFF</code> procedures in the <code dir="ltr">DBMS_REPUTIL</code> package. These procedures take no arguments and are used as flags by the generated replication triggers.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
To enable and disable replication, you must have the <code dir="ltr">EXECUTE</code> privilege on the <code dir="ltr">DBMS_REPUTIL</code> package.</div>
<a id="i22669"></a>
<div id="REPMA418" class="sect2">
<h3 class="sect2">Disabling Replication<a id="sthref813"></a><a id="sthref814"></a></h3>
<p>The <code dir="ltr">DBMS_REPUTIL.REPLICATION_OFF</code> procedure sets the state of an internal replication variable for the current session to <code dir="ltr">FALSE</code>. Because all replicated triggers check the state of this variable before queuing any transactions, modifications made to the replicated tables that use row-level replication do not result in any queued deferred transactions.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Turning replication on or off affects only the current session. That is, other users currently connected to the same server are not restricted from placing committed changes in the deferred transaction queue.</div>
<p>If you are using procedural replication, then call <code dir="ltr">REPLICATION_OFF</code> at the start of your procedure, as shown in the following example. This ensures that the replication facility does not attempt to use row-level replication to propagate the changes that you make.</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE update_objects AS
  PROCEDURE update_emp(adjustment IN NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY update_objects AS
  PROCEDURE update_emp(adjustment IN NUMBER) IS
  BEGIN
   --turn off row-level replication for set update
   DBMS_REPUTIL.REPLICATION_OFF;
   UPDATE emp . . .;
   --reenable replication
   DBMS_REPUTIL.REPLICATION_ON;
  EXCEPTION WHEN OTHERS THEN
   . . . 
   DBMS_REPUTIL.REPLICATION_ON;
  END;
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="i22698"></a>
<div id="REPMA419" class="sect2">
<h3 class="sect2">Reenabling Replication<a id="sthref815"></a><a id="sthref816"></a></h3>
<p>After resolving any conflicts, or at the end of your replicated procedure, be certain to call <code dir="ltr">DBMS_REPUTIL.REPLICATION_ON</code> to resume normal replication of changes to your replicated tables or materialized views. This procedure takes no arguments. Calling <code dir="ltr">REPLICATION_ON</code> sets the internal replication variable to <code dir="ltr">TRUE</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i22702"></a>
<div id="REPMA420" class="sect2">
<h3 class="sect2">Ensuring that Replicated Triggers Fire Only Once<a id="sthref817"></a><a id="sthref818"></a></h3>
<p>If you have defined a replicated trigger on a replicated table, then you might need to ensure that the trigger fires only once for each change that you make. Typically, you only want the trigger to fire when the change is first made, and you do not want the remote trigger to fire when the change is replicated to the remote site.</p>
<p>You should check the value of the <code dir="ltr">DBMS_REPUTIL.FROM_REMOTE</code> package variable at the start of your trigger. The trigger should update the table only if the value of this variable is <code dir="ltr">FALSE</code>.</p>
<p>Alternatively, you can disable replication at the start of the trigger and reenable it at the end of the trigger when modifying rows other than the one that caused the trigger to fire. Using this method, only the original change is replicated to the remote sites. Then the replicated trigger fires at each remote site. Any updates performed by the replicated trigger are not pushed to any other sites.</p>
<p>Using this approach, conflict resolution is not invoked. Therefore, you must ensure that the changes resulting from the trigger do not affect the consistency of the data.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i31438"></a>
<div id="REPMA118" class="sect1">
<h2 class="sect1">Converting a LONG Column to a LOB Column in a Replicated Table<a id="sthref819"></a><a id="sthref820"></a></h2>
<p>LOB columns using <code dir="ltr">BASICFILE</code> storage can be replicated, but <code dir="ltr">LONG</code> columns cannot be replicated. You can convert the data type of a <code dir="ltr">LONG</code> column to a <code dir="ltr">CLOB</code> column and the data type of a <code dir="ltr">LONG_RAW</code> column to a <code dir="ltr">BLOB</code> column.</p>
<p>Converting a <code dir="ltr">LONG</code> column to a LOB column can result in increased network bandwidth requirements because the data in such a column is replicated after conversion. Ensure that you have adequate network bandwidth before completing the procedure in this section.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
LOB columns using <code dir="ltr">SECUREFILE</code> storage cannot be replicated.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information about applications and <code dir="ltr">LONG</code> to LOB conversion</div>
<p>Complete the following steps to convert a <code dir="ltr">LONG</code> column to a LOB column in a replicated table:</p>
<dl>
<dd><a id="REPMA1330"></a><a id="sthref821"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Ensure that the data in the LONG column is consistent at all replication sites.</dt>
<dd>
<p>If a table containing a <code dir="ltr">LONG</code> column is configured as a master table, then Oracle does not replicate changes to the data in the <code dir="ltr">LONG</code> column. Therefore, the data in the <code dir="ltr">LONG</code> column might not match at all of your replication sites. You must ensure that the data in the <code dir="ltr">LONG</code> column matches at all master sites before proceeding.</p>
</dd>
<dd><a id="REPMA1331"></a><a id="sthref822"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Connect to the master definition site as the replication administrator.</dt>
<dd>
<pre dir="ltr">CONNECT repadmin@orc1.example.com
</pre></dd>
<dd><a id="REPMA1332"></a><a id="sthref823"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;If the replication status is normal, then change the status to quiesced.</dt>
<dd>
<pre dir="ltr">BEGIN
</pre>
<pre dir="ltr">   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;sales_mg&#39;);
END;
/
</pre></dd>
<dd><a id="REPMA1333"></a><a id="sthref824"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Convert the LONG column to a LOB column.</dt>
<dd>
<pre dir="ltr">BEGIN
</pre>
<pre dir="ltr">   <a href="rarrcatpac.htm#i95101">DBMS_REPCAT.ALTER_MASTER_REPOBJECT (</a>
      sname =&gt; &#39;staff&#39;,
      oname =&gt; &#39;positions&#39;,
      type =&gt; &#39;TABLE&#39;,
      ddl_text =&gt; &#39;ALTER TABLE staff.positions MODIFY (job_desc CLOB)&#39;);
END;
/
</pre>
<p>A <code dir="ltr">LONG_RAW</code> column can be converted to a <code dir="ltr">BLOB</code> column using a similar <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
</dd>
<dd><a id="REPMA1334"></a><a id="sthref825"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Regenerate replication support for the altered master table.</dt>
<dd>
<pre dir="ltr">BEGIN 
</pre>
<pre dir="ltr">    <a href="rarrcatpac.htm#i97987">DBMS_REPCAT.GENERATE_REPLICATION_SUPPORT (</a>
      sname =&gt; &#39;staff&#39;,
      oname =&gt; &#39;positions&#39;, 
      type =&gt; &#39;TABLE&#39;,
      min_communication =&gt; TRUE); 
END;
/
</pre></dd>
<dd><a id="REPMA1335"></a><a id="sthref826"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Resume replication.</dt>
<dd>
<pre dir="ltr">BEGIN
</pre>
<pre dir="ltr">   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;sales_mg&#39;);
END;
/
</pre></dd>
<dd><a id="REPMA1336"></a><a id="sthref827"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;If materialized views are based on the altered table at any of the master sites, then rebuild these materialized views.</dt>
<dd>
<p>Rebuild materialized views if necessary.</p>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="g45683"></a>
<div id="REPMA421" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Determining Differences Between Replicated Tables<a id="sthref828"></a><a id="sthref829"></a><a id="sthref830"></a><a id="sthref831"></a></h2>
<p>It is possible for the differences to arise in replicated tables. When administering a replication environment, you might want to check, periodically, whether the contents of two replicated tables are identical. The following procedures in the <code dir="ltr">DBMS_RECTIFIER_DIFF</code> package let you identify, and optionally rectify, the differences between two tables.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also determine differences between database objects and converge them using the <code dir="ltr">DBMS_COMPARISON</code> package.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS868" href="../ARPLS/d_comparison.htm#ARPLS868"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code dir="ltr">DBMS_COMPARISON</code> package</p>
</li>
<li>
<p><a class="olink STREP146" href="../STREP/man_comp.htm#STREP146"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for information about using the <code dir="ltr">DBMS_COMPARISON</code> package</p>
</li>
</ul>
</div>
<div id="REPMA422" class="sect2"><a id="sthref832"></a>
<h3 class="sect2">Using the DIFFERENCES Procedure<a id="sthref833"></a><a id="sthref834"></a></h3>
<p>The <code dir="ltr">DIFFERENCES</code> procedure compares two replicas of a table, and determines all rows in the first replica that are not in the second and all rows in the second that are not in the first. The output of this procedure is stored in two user-created tables. The first table stores the values of the missing rows, and the second table is used to indicate which site contains each row.</p>
</div>
<!-- class="sect2" -->
<div id="REPMA423" class="sect2"><a id="sthref835"></a>
<h3 class="sect2">Using the RECTIFY Procedure<a id="sthref836"></a><a id="sthref837"></a><a id="sthref838"></a><a id="sthref839"></a></h3>
<p>The <code dir="ltr">RECTIFY</code> procedure uses the information generated by the <code dir="ltr">DIFFERENCES</code> procedure to rectify the two tables. Any rows found in the first table and not in the second are inserted into the second table. Any rows found in the second table and not in the first are deleted from the second table.</p>
<p>To restore equivalency between all copies of a replicated table, complete the following steps:</p>
<dl>
<dd><a id="REPMA1337"></a><a id="CACJEJCH"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Select one copy of the table to be the &#34;reference&#34; table.</dt>
<dd>
<p>This copy will be used to update all other replicas of the table as needed.</p>
</dd>
<dd><a id="REPMA1338"></a><a id="sthref840"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Determine if it is necessary to check all rows and columns in the table for differences, or only a subset.</dt>
<dd>
<p>For example, it might not be necessary to check rows that have not been updated since the last time that you checked for differences. Although it is not necessary to check all columns, your column list must include all columns that comprise the primary key (or that you designated as a substitute identity key) for the table.</p>
</dd>
<dd><a id="REPMA1339"></a><a id="sthref841"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;After determining which columns you will be checking in the table, create two tables to hold the results of the comparison.</dt>
<dd>
<p>You must create one table that can hold the data for the columns being compared. For example, if you decide to compare the <code dir="ltr">employee_id</code>, <code dir="ltr">salary</code>, and <code dir="ltr">department_id</code> columns of the <code dir="ltr">employees</code> table, then your <code dir="ltr">CREATE</code> statement must be similar to the following:</p>
<pre dir="ltr">CREATE TABLE hr.missing_rows_data (
  employee_id     NUMBER(6),
  salary          NUMBER(8,2),
  department_id   NUMBER(4));
</pre>
<p>You must also create a table that indicates where the row is found. This table must contain three columns with the data types shown in the following example:</p>
<pre dir="ltr">CREATE TABLE hr.missing_rows_location (
  present     VARCHAR2(128),
  absent      VARCHAR2(128),
  r_id        ROWID);
</pre></dd>
<dd><a id="REPMA1340"></a><a id="sthref842"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Suspend replication activity for the replication group containing the tables that you want to compare.</dt>
<dd>
<p>Although suspending replication activity for the group is not a requirement, rectifying tables that were not quiesced first can result in inconsistencies in your data.</p>
<pre dir="ltr">CONNECT repadmin

BEGIN
   <a href="rarrcatpac.htm#i99057">DBMS_REPCAT.SUSPEND_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/
</pre></dd>
<dd><a id="REPMA1341"></a><a id="CACJIHAI"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;At the site containing the &#34;reference&#34; table, call the DIFFERENCES procedure.</dt>
<dd>
<p>For example, if you wanted to compare the <code dir="ltr">employees</code> tables at the New York and San Francisco sites, then your procedure call would look similar to the following:</p>
<pre dir="ltr">BEGIN
   <a href="rarrectdifpac.htm#i95034">DBMS_RECTIFIER_DIFF.DIFFERENCES (</a>
      sname1              =&gt;   &#39;hr&#39;,
      oname1              =&gt;   &#39;employees&#39;,
      reference_site      =&gt;   &#39;ny.example.com&#39;,
      sname2              =&gt;   &#39;hr&#39;,
      oname2              =&gt;   &#39;employees&#39;,
      comparison_site     =&gt;   &#39;mv4.example.com&#39;,
      where_clause        =&gt;   &#39;&#39;,
      column_list         =&gt;   &#39;employee_id,salary,department_id&#39;,
      missing_rows_sname  =&gt;   &#39;hr&#39;,
      missing_rows_oname1 =&gt;   &#39;missing_rows_data&#39;,
      missing_rows_oname2 =&gt;   &#39;missing_rows_location&#39;,
      missing_rows_site   =&gt;   &#39;ny.example.com&#39;,
      max_missing         =&gt;    500,
      commit_rows         =&gt;    50);
END;
/
</pre>
<p><a href="#i19548">Figure 9-1</a> shows an example of two replicas of the <code dir="ltr">employees</code> table and what the resulting missing rows tables would look like if you executed the <code dir="ltr">DIFFERENCES</code> procedure on these replicas.</p>
<div id="REPMA424" class="figure">
<p class="titleinfigure"><a id="i19548"></a>Figure 9-1 Determining Differences Between Replicas</p>
<img width="668" height="522" src="img/repma003.gif" alt="Description of Figure 9-1 follows"/><br/>
<a id="sthref843" href="img_text/repma003.htm">Description of &#34;Figure 9-1 Determining Differences Between Replicas&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Notice that the two missing rows tables are related by the <code dir="ltr">ROWID</code> and <code dir="ltr">r_id</code> columns.</p>
</dd>
<dd><a id="REPMA1342"></a><a id="CACFIDIB"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Rectify the table at the &#34;comparison&#34; site to be equivalent to the table at the &#34;reference&#34; site.</dt>
<dd>
<pre dir="ltr">BEGIN
</pre>
<pre dir="ltr">   <a href="rarrectdifpac.htm#i95035">DBMS_RECTIFIER_DIFF.RECTIFY (</a>
      sname1              =&gt;   &#39;hr&#39;,
      oname1              =&gt;   &#39;employees&#39;,
      reference_site      =&gt;   &#39;ny.example.com&#39;,
      sname2              =&gt;   &#39;hr&#39;,
      oname2              =&gt;   &#39;employees&#39;,
      comparison_site     =&gt;   &#39;mv4.example.com&#39;,
      column_list         =&gt;   &#39;employee_id,salary,department_id&#39;,
      missing_rows_sname  =&gt;   &#39;hr&#39;,
      missing_rows_oname1 =&gt;   &#39;missing_rows_data&#39;,
      missing_rows_oname2 =&gt;   &#39;missing_rows_location&#39;,
      missing_rows_site   =&gt;   &#39;ny.example.com&#39;,
      commit_rows         =&gt;    50);
END;
/
</pre>
<p>The <code dir="ltr">RECTIFY</code> procedure temporarily disables replication at the &#34;comparison&#34; site while it performs the necessary insertions and deletions, as you would not want to propagate these changes. <code dir="ltr">RECTIFY</code> first performs all of the necessary <code dir="ltr">DELETE</code> operations and then performs all of the <code dir="ltr">INSERT</code> operations. This ensures that there are no violations of a <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> constraint.</p>
<p>After you have successfully executed the <code dir="ltr">RECTIFY</code> procedure, your missing rows tables should be empty.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Caution</span>:</p>
If you have any additional constraints on the &#34;comparison&#34; table, then you must ensure that they are not violated when you call <code dir="ltr">RECTIFY</code>. You might need to update the table directly using the information in the missing rows table. If so, then be sure to <code dir="ltr">DELETE</code> the appropriate rows from the missing rows tables.</div>
</dd>
<dd><a id="REPMA1343"></a><a id="sthref844"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Repeat Steps <a class="dashingAutolink" name="autolink-91774"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/5"></a><a href="#CACJIHAI">5</a> and <a class="dashingAutolink" name="autolink-91775"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/6"></a><a href="#CACFIDIB">6</a> for the remaining copies of the replicated table.</dt>
<dd>
<p>Remember to use the same &#34;reference&#34; table each time to ensure that all copies are identical when you complete this procedure.</p>
</dd>
<dd><a id="REPMA1344"></a><a id="sthref845"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Resume replication activity for the master group.</dt>
<dd>
<pre dir="ltr">BEGIN
   <a href="rarrcatpac.htm#i98820">DBMS_REPCAT.RESUME_MASTER_ACTIVITY (</a>
      gname =&gt; &#39;hr_repg&#39;);
END;
/
</pre></dd>
</dl>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i30343"></a>
<div id="REPMA425" class="sect1">
<h2 class="sect1">Managing the Deferred Transactions Queue<a id="sthref846"></a><a id="sthref847"></a></h2>
<p>Typically, Advanced Replication is configured to push and purge the deferred transaction queue automatically. At times, however, you might need to push or purge the deferred transaction queue manually. The process for pushing the deferred transaction queue is the same at master sites and materialized view sites.</p>
<a id="i30347"></a>
<div id="REPMA426" class="sect2">
<h3 class="sect2">Pushing the Deferred Transaction Queue<code dir="ltr"><a id="sthref848"></a><a id="sthref849"></a></code><a id="sthref850"></a><a id="sthref851"></a></h3>
<p>Master sites are configured to push the deferred transaction queue automatically at set intervals. At materialized view sites, if you do not automatically propagate the transactions in your deferred transaction queue during the refresh of your materialized view, then you must complete the following steps to propagate changes made to the updatable materialized view to its master table or master materialized view.</p>
<p>This example illustrates pushing the deferred transaction queue at a materialized view site, but the process is the same at master sites and materialized view sites.</p>
<p><span class="bold">Executed As</span>: Materialized View Administrator</p>
<p><span class="bold">Executed At</span>: Materialized View Site</p>
<p>Complete the following steps:</p>
<dl>
<dd><a id="REPMA1345"></a><a id="sthref852"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect to the materialized view site as the materialized view administrator.</dt>
<dd>
<pre dir="ltr">CONNECT mviewadmin@mv1.example.com
</pre></dd>
<dd><a id="REPMA1346"></a><a id="CACFDCAF"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Execute the following SELECT statement to view the deferred transactions and their destinations.</dt>
<dd>
<p>Propagation of the deferred transaction queue is based on the destination of the transaction. Each distinct destination and the number of transactions pending for the destination will be displayed.</p>
<pre dir="ltr">SELECT DISTINCT(dblink), COUNT(deferred_tran_id) 
   FROM deftrandest GROUP BY dblink;
</pre></dd>
<dd><a id="REPMA1347"></a><a id="sthref853"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Execute the DBMS_DEFER_SYS.PUSH function for each site that is listed as a destination for a deferred transaction.</dt>
<dd>
<pre dir="ltr">DECLARE
   temp INTEGER;
BEGIN
   temp := <a href="rardefsyspac.htm#i94501">DBMS_DEFER_SYS.PUSH (</a>
      destination =&gt; &#39;orc1.example.com&#39;,
      stop_on_error =&gt; FALSE,
      delay_seconds =&gt; 0,
      parallelism =&gt; 0);
END;
/
</pre>
<p>Run the <code dir="ltr">PUSH</code> procedure for each destination that was returned in the <code dir="ltr">SELECT</code> statement you ran in Step <a href="#CACFDCAF">2</a>.</p>
</dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA427" class="sect2"><a id="sthref854"></a>
<h3 class="sect2">Purging the Deferred Transaction Queue<a id="sthref855"></a><a id="sthref856"></a><code dir="ltr"><a id="sthref857"></a><a id="sthref858"></a></code></h3>
<p>If your system is not set to automatically purge the successfully propagated transactions in your deferred transaction queue periodically, then you must complete the following steps to purge them manually.</p>
<p>This example illustrates purging the deferred transaction queue at a materialized view site, but the process is the same at master sites and materialized view sites.</p>
<p><span class="bold">Executed As</span>: Materialized View Administrator</p>
<p><span class="bold">Executed At</span>: Materialized View Site</p>
<p>Complete the following steps:</p>
<dl>
<dd><a id="REPMA1348"></a><a id="sthref859"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Connect to the materialized view site as the materialized view administrator.</dt>
<dd>
<pre dir="ltr">CONNECT mviewadmin@mv1.example.com
</pre></dd>
<dd><a id="REPMA1349"></a><a id="sthref860"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Purge the deferred transaction queue.</dt>
<dd>
<pre dir="ltr">DECLARE
</pre>
<pre dir="ltr">   temp INTEGER;
BEGIN
   temp := <a href="rardefsyspac.htm#i94378">DBMS_DEFER_SYS.PURGE (</a>
      purge_method =&gt; DBMS_DEFER_SYS.PURGE_METHOD_QUICK);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the <code dir="ltr">purge_method_quick</code> parameter, deferred transactions and deferred procedure calls that have been successfully pushed can remain in the <code dir="ltr">DEFTRAN</code> and <code dir="ltr">DEFCALL</code> data dictionary views for longer than expected before they are purged. See the <a href="rardefsyspac.htm#i94489">&#34;Usage Notes&#34;</a> for <code dir="ltr">DBMS_DEFER_SYS.PURGE</code> for details.</div>
</dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA428" class="sect2"><a id="sthref861"></a>
<h3 class="sect2">Using the ANYDATA Type to Determine the Value of an Argument in a Deferred Call<a id="sthref862"></a><a id="sthref863"></a><a id="sthref864"></a><a id="sthref865"></a></h3>
<p>If you are using column objects, collections, or <code dir="ltr">REF</code>s in a replicated table, then you can use the <code dir="ltr">GET_ANYDATA_ARG</code> function in the <code dir="ltr">DBMS_DEFER_QUERY</code> package to determine the value of an argument in a deferred call that involves one of these user-defined types.</p>
<p>The following example illustrates how to use the <code dir="ltr">GET_ANYDATA_ARG</code> function. This example uses the following user-defined types in the <code dir="ltr">oe</code> sample schema.</p>
<pre dir="ltr">CREATE TYPE phone_list_typ AS VARRAY(5) OF VARCHAR2(25);
/

CREATE TYPE warehouse_typ AS OBJECT
    (warehouse_id       NUMBER(3), 
     warehouse_name     VARCHAR2(35), 
     location_id        NUMBER(4)
    );
/

CREATE TYPE inventory_typ AS OBJECT
    (product_id          NUMBER(6), 
     warehouse           warehouse_typ,
     quantity_on_hand    NUMBER(8)
    );
/

CREATE TYPE inventory_list_typ AS TABLE OF inventory_typ;
/
</pre>
<p>The following procedure retrieves the argument value for collection, object, and <code dir="ltr">REF</code> instances of calls stored in the deferred transactions queue. This procedure assumes that the call number and transaction id are available.</p>
<p>The user who creates the procedure must have <code dir="ltr">EXECUTE</code> privilege on the <code dir="ltr">DBMS_DEFER_QUERY</code> package and must have <code dir="ltr">CREATE</code> <code dir="ltr">PROCEDURE</code> privilege. This example uses the <code dir="ltr">oe</code> sample schema. Therefore, to run the example, you must grant the <code dir="ltr">oe</code> user these privileges. Connect as an administrative user and enter the following:</p>
<pre dir="ltr">GRANT EXECUTE ON DBMS_DEFER_QUERY TO oe;

GRANT CREATE PROCEDURE TO oe;

CONNECT oe@orc1.example.com

CREATE OR REPLACE PROCEDURE get_userdef_arg AS
  call_no      NUMBER := 0;
  txn_id       VARCHAR2(128) := &#39;xx.xx.xx&#39;;
  anydata_val  ANYDATA;
  t            ANYTYPE;
  data_pl      phone_list_typ;     -- varray
  data_ntt     inventory_list_typ; -- nested table type
  data_p       warehouse_typ;      -- object type
  ref1         REF inventory_typ;  -- REF type
  rval         PLS_INTEGER;        -- return value
  tc           PLS_INTEGER;        -- return value
  prec         PLS_INTEGER;        -- precision
  scale        PLS_INTEGER;        -- scale
  len          PLS_INTEGER;        -- length
  csid         PLS_INTEGER;        -- character set id
  csfrm        PLS_INTEGER;        -- character set form
  cnt          PLS_INTEGER;        -- count of varray elements or number of
                                   -- object attributes
  sname        VARCHAR2(35);       -- schema name
  type_name    VARCHAR2(35);       -- type name
  version      VARCHAR2(35);
BEGIN
   FOR i IN 1 .. 5 LOOP
     anydata_val := DBMS_DEFER_QUERY.GET_ANYDATA_ARG(call_no, i, txn_id);
     -- Get the type information, including type name.
     tc := anydata_val.GetType(t);
     tc := t.GetInfo(prec, scale, len, csid, csfrm, sname, type_name,
                     version, cnt);
     -- Based on the type name, convert the anydata value to the appropriate 
     -- user-defined types.
     IF type_name = &#39;PHONE_LIST_TYP&#39; THEN
       -- The anydata_val contains phone_list_typ varray instance.
       rval := anydata_val.GetCollection(data_pl);
       -- Do something with data_pl.
     ELSIF type_name = &#39;INVENTORY_LIST_TYP&#39; THEN
       -- anydata_val contains inventory_list_typ nested table instance.
       rval := anydata_val.GetCollection(data_ntt);
       -- Do something with data_ntt.
     ELSIF type_name = &#39;WAREHOUSE_TYP&#39; THEN
       -- The anydata_val contains warehouse_typ object instance.
       rval := anydata_val.GetObject(data_p);
       -- Do something with data_p.
     ELSIF type_name = &#39;INVENTORY_TYP&#39; THEN
       -- The anydata_val contains a reference to inventory_typ object instance.
       rval := anydata_val.GetRef(ref1);
       -- Do something with ref1.
     END IF;
   END LOOP;
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="rardefquerypac.htm#i94091">&#34;GET_<span class="italic">datatype</span>_ARG Function&#34;</a></p>
</li>
<li>
<p><a class="olink SQLRF0021" href="../SQLRF/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a>, <a class="olink ADOBJ" href="../ADOBJ/toc.htm"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a>, and <a class="olink ARPLS077" href="../ARPLS/t_anydat.htm#ARPLS077"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">ANYDATA</code> data type</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i30415"></a>
<div id="REPMA429" class="sect1">
<h2 class="sect1">Managing the Error Queue<a id="sthref866"></a><a id="sthref867"></a></h2>
<p>As an administrator of a replication environment, you should regularly monitor the error queue to determine if any deferred transactions were not successfully applied at the target master site.</p>
<p><a id="sthref868"></a><a id="sthref869"></a>To check the error queue, issue the following <code dir="ltr">SELECT</code> statement (as the replication administrator) when connected to the target master site:</p>
<pre dir="ltr">SELECT * FROM deferror;
</pre>
<p>If the error queue contains errors, then you should resolve the error condition and reexecute the deferred transaction. You have two options when reexecuting a deferred transaction: you can reexecute in the security context of the user who received the deferred transaction, or you can reexecute the deferred transaction with an alternate security context.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
If you have multiple error transactions and you want to ensure that they are reexecuted in the correct order, then you can specify <code dir="ltr">NULL</code> for the <code dir="ltr">deferred_tran_id</code> parameter in the procedures in the following sections. If you do not specify <code dir="ltr">NULL</code>, then reexecuting individual transactions in the wrong order can cause conflicts.</div>
<div id="REPMA430" class="sect2"><a id="sthref870"></a>
<h3 class="sect2">Reexecuting Error Transaction as the Receiver<code dir="ltr"><a id="sthref871"></a><a id="sthref872"></a></code><a id="sthref873"></a></h3>
<p>The following procedure reexecutes a specified deferred transaction in the security context of the user who received the deferred transaction. This procedure should not be executed until the error situation has been resolved.</p>
<p>Meet the following requirements to complete these actions:</p>
<p><span class="bold">Executed As</span>: Replication Administrator</p>
<p><span class="bold">Executed At</span>: Site Containing Errors</p>
<p><span class="bold">Replication Status</span>: Normal</p>
<p>Complete the following steps:</p>
<dl>
<dd><a id="REPMA1350"></a><a id="sthref874"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;In SQL*Plus, connect to the master site as the replication administrator.</dt>
<dd>
<p>See <a class="olink ADMIN00102" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ADMIN00102"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</dd>
<dd><a id="REPMA1351"></a><a id="sthref875"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Reexecute the error transaction.</dt>
<dd>
<pre dir="ltr">BEGIN
</pre>
<pre dir="ltr">   <a href="rardefsyspac.htm#i94273">DBMS_DEFER_SYS.EXECUTE_ERROR (</a>
      deferred_tran_id =&gt; &#39;1.12.2904&#39;,
      destination =&gt; &#39;orc2.example.com&#39;);
END;
/
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="REPMA431" class="sect2"><a id="sthref876"></a>
<h3 class="sect2">Reexecuting Error Transaction as Alternate User<a id="sthref877"></a><code dir="ltr"><a id="sthref878"></a><a id="sthref879"></a></code></h3>
<p>The following procedure reexecutes a specified deferred transaction in the security context of the currently connected user. This procedure should not be executed until the error situation has been resolved.</p>
<p>Meet the following requirements to complete these actions:</p>
<p><span class="bold">Executed As</span>: Connected User</p>
<p><span class="bold">Executed At</span>: Site Containing Errors</p>
<p><span class="bold">Replication Status</span>: Normal</p>
<p>Complete the following steps:</p>
<dl>
<dd><a id="REPMA1352"></a><a id="sthref880"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;In SQL*Plus, connect to the master site as the alternate user.</dt>
<dd>
<p>See <a class="olink ADMIN00102" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ADMIN00102"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</dd>
<dd><a id="REPMA1353"></a><a id="sthref881"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Reexecute the error transaction.</dt>
<dd>
<pre dir="ltr">BEGIN
</pre>
<pre dir="ltr">   <a href="rardefsyspac.htm#i94325">DBMS_DEFER_SYS.EXECUTE_ERROR_AS_USER (</a>
      deferred_tran_id =&gt; &#39;1.12.2904&#39;,
      destination =&gt; &#39;orc2.example.com&#39;);
END;
/
</pre></dd>
</dl>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment854">
<tr>
<td class="cellalignment863">
<table class="cellalignment859">
<tr>
<td class="cellalignment858"><a href="rarmanmv.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment858"><a href="rarmonitor.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment865">
<table class="cellalignment857">
<tr>
<td class="cellalignment858"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment858"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment858"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment858"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment858"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment858"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>