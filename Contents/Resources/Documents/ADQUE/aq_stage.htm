<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-962"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20ANYDATA%20Queues%20for%20User%20Messages"></a><title>Using ANYDATA Queues for User Messages</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T0:30:48Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Queuing User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17945-14"/>
<meta name="dcterms.isVersionOf" content="ADQUE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="mg_trble.htm" title="Previous" type="text/html"/>
<link rel="Next" href="aq_demo.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17945-14.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/34</span> <!-- End Header -->
<div id="ADQUE2200" class="chapter"><a id="g1016653"></a> <a id="i1006549"></a>
<h1 class="chapter"><span class="secnum">22</span> Using ANYDATA Queues for User Messages</h1>
<p>This chapter describes how to use and manage Oracle Database Advanced Queuing when enqueuing and propagating. It describes <code>ANYDATA</code> queues and user messages.</p>
<p>Oracle Streams uses queues of type <code>ANYDATA</code> to store three types of messages:</p>
<ul>
<li>
<p>Captured <a href="glossary.htm#CHDHDHDF"><span class="xrefglossterm">logical change record</span></a> (LCR)</p>
<p>This message type, produced by an Oracle Streams capture process, is not discussed in this guide.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;Streams Capture Process&#34; in <a class="olink STRMS002" href="../STRMS/strms_capture.htm#STRMS002"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
</li>
<li>
<p>User-enqueued LCR</p>
<p>This is a message containing an LCR that was enqueued by a user or application.</p>
</li>
<li>
<p>User message</p>
<p>This is a non-LCR message created and enqueued by a user or application.</p>
</li>
</ul>
<p>All three types of messages can be used for information sharing within a single database or between databases.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CACEBHED">ANYDATA Queues and User Messages</a></p>
</li>
<li>
<p><a href="#i1005758">Message Propagation and ANYDATA Queues</a></p>
</li>
<li>
<p><a href="#i1005909">Enqueuing User Messages in ANYDATA Queues</a></p>
</li>
<li>
<p><a href="#CHDCJBFE">Dequeuing User Messages from ANYDATA Queues</a></p>
</li>
<li>
<p><a href="#CACCJJDB">Propagating User Messages from ANYDATA Queues to Typed Queues</a></p>
</li>
<li>
<p><a href="#CHDIEDAI">Propagating User-Enqueued LCRs from ANYDATA Queues to Typed Queues</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS077" href="../ARPLS/t_anydat.htm#ARPLS077"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code>ANYDATA</code> type</div>
<a id="CACEBHED"></a>
<div id="ADQUE3437" class="sect1">
<h2 class="sect1"><a id="sthref2038"></a><a id="sthref2039"></a>ANYDATA Queues and User Messages</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1005615">ANYDATA Wrapper for User Messages Payloads</a></p>
</li>
<li>
<p><a href="#CHDJGBAC">Programmatic Interfaces for Enqueue and Dequeue of User Messages</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
<a id="i1005615"></a>
<div id="ADQUE3438" class="sect2">
<h3 class="sect2"><a id="sthref2040"></a><a id="sthref2041"></a>ANYDATA Wrapper for User Messages Payloads</h3>
<p>You can wrap almost any type of payload in an <code>ANYDATA</code> payload with the <code>Convert</code><code><span class="codeinlineitalic">data_type</span></code> static functions of the <code>ANYDATA</code> type, where <code><span class="codeinlineitalic">data_type</span></code> is the type of object to wrap. These functions take the object as input and return an <code>ANYDATA</code> object.</p>
<p>The following datatypes cannot be wrapped in an <code>ANYDATA</code> wrapper:</p>
<ul>
<li>
<p>Nested table</p>
</li>
<li>
<p><a href="glossary.htm#CBACJADG"><span class="xrefglossterm">NCLOB</span></a></p>
</li>
<li>
<p>ROWID and UROWID</p>
</li>
</ul>
<p>The following datatypes can be directly wrapped in an <code>ANYDATA</code> wrapper, but they cannot be present in a user-defined type payload wrapped in an <code>ANYDATA</code> wrapper:</p>
<ul>
<li>
<p><a href="glossary.htm#CBAEFCCD"><span class="xrefglossterm">CLOB</span></a></p>
</li>
<li>
<p><a href="glossary.htm#CBABJFDH"><span class="xrefglossterm">BLOB</span></a></p>
</li>
<li>
<p><a href="glossary.htm#CBADIIIF"><span class="xrefglossterm">BFILE</span></a></p>
</li>
<li>
<p><a href="glossary.htm#CBAHJGCH"><span class="xrefglossterm">VARRAY</span></a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS077" href="../ARPLS/t_anydat.htm#ARPLS077"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code>ANYDATA</code> type</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDJGBAC"></a>
<div id="ADQUE3439" class="sect2">
<h3 class="sect2"><a id="sthref2042"></a><a id="sthref2043"></a>Programmatic Interfaces for Enqueue and Dequeue of User Messages</h3>
<p>Your applications can use the following programmatic interfaces to enqueue user messages into an <code>ANYDATA</code> queue and dequeue user messages from an <code>ANYDATA</code> queue:</p>
<ul>
<li>
<p>PL/SQL (<code>DBMS_AQ</code> package)</p>
</li>
<li id="i1005643">
<p><a href="glossary.htm#i432286"><span class="xrefglossterm">Java Message Service</span></a> (JMS)</p>
</li>
<li>
<p>OCI</p>
</li>
</ul>
<p>The following sections provide information about using these interfaces to enqueue user messages into and dequeue user messages from an <code>ANYDATA</code> queue.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_envir.htm#g1019073">Chapter 3, &#34;Oracle Database Advanced Queuing: Programmatic Interfaces&#34;</a> for more information about these programmatic interfaces</div>
<div id="ADQUE3440" class="sect3"><a id="sthref2044"></a>
<h4 class="sect3"><a id="sthref2045"></a><a id="sthref2046"></a><a id="sthref2047"></a><a id="sthref2048"></a><a id="sthref2049"></a>Enqueuing User Messages Using PL/SQL</h4>
<p>To enqueue a user message containing an LCR into an <code>ANYDATA</code> queue using PL/SQL, first create the LCR to be enqueued. You use the constructor for the <code>SYS.LCR$_ROW_RECORD</code> type to create a row LCR, and you use the constructor for the <code>SYS.LCR$_DDL_RECORD</code> type to create a DDL LCR. Then you use the <code>ANYDATA.ConvertObject</code> function to convert the LCR into an <code>ANYDATA</code> payload and enqueue it using the <code>DBMS_AQ.ENQUEUE</code> procedure.</p>
<p>To enqueue a user message containing a non-LCR object into an <code>ANYDATA</code> queue using PL/SQL, you use one of the <code>ANYDATA.Convert*</code> functions to convert the object into an <code>ANYDATA</code> payload and enqueue it using the <code>DBMS_AQ.ENQUEUE</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="aq_opers.htm#i1005596">&#34;Enqueuing Messages&#34;</a></p>
</li>
<li>
<p><a href="aq_demo.htm#g1028568">Chapter 23, &#34;Oracle Streams Messaging Examples&#34;</a></p>
</li>
<li>
<p><a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a>, &#34;Managing a Streams Messaging Environment&#34;</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDJAEED"></a>
<div id="ADQUE3441" class="sect3">
<h4 class="sect3"><a id="sthref2050"></a><a id="sthref2051"></a><a id="sthref2052"></a><a id="sthref2053"></a><a id="sthref2054"></a>Enqueuing User Messages Using OCI or JMS<a id="sthref2055"></a><a id="sthref2056"></a></h4>
<p>To enqueue a user message containing an LCR into an <code>ANYDATA</code> queue using JMS or OCI, you must represent the LCR in XML format. To construct an LCR, use the <code>oracle.xdb.XMLType</code> class. LCRs are defined in the <code>SYS</code> <a href="glossary.htm#CBACBEEF"><span class="xrefglossterm">schema</span></a>. The LCR schema must be loaded into the <code>SYS</code> schema using the <code>catxlcr.sql</code> script in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/rdbms/admin</code>.</p>
<p>To enqueue a message using OCI, perform the same actions that you would to enqueue a message into a typed queue. To enqueue a message using JMS, a user must have <code>EXECUTE</code> privilege on the <code>DBMS_AQ</code>, <code>DBMS_AQIN</code> and <code>DBMS_AQJMS</code> packages.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Enqueue of JMS types and XML types does not work with <code>ANYDATA</code> queues unless you call <code>DBMS_AQADM.ENABLE_JMS_TYPES(</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>)</code> after <code>DBMS_STREAMS_ADM.SET_UP_QUEUE(</code><code><span class="codeinlineitalic">queue_name</span></code><code>)</code>. Enabling a queue for these types may affect import/export of the queue table.</div>
<p><a id="sthref2057"></a><a id="sthref2058"></a>A non-LCR user message can be a message of any user-defined type or a JMS type. The JMS types include the following:</p>
<ul>
<li>
<p><code>javax.jms.TextMessage</code></p>
</li>
<li>
<p><code>javax.jms.MapMessage</code></p>
</li>
<li>
<p><code>javax.jms.StreamMessage</code></p>
</li>
<li>
<p><code>javax.jms.ObjectMessage</code></p>
</li>
<li>
<p><code>javax.jms.BytesMessage</code></p>
</li>
</ul>
<p>When using user-defined types, you must generate the Java class for the message using Jpublisher, which implements the <code>ORAData</code> interface. To enqueue a message into an <code>ANYDATA</code> queue, you can use methods <code>QueueSender.send</code> or <code>TopicPublisher.publish</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="aq_demo.htm#i1006898">&#34;Enqueuing and Dequeuing Messages Using JMS&#34;</a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information about representing messages in XML format</p>
</li>
<li>
<p><a class="olink JAJMS" href="../JAJMS/toc.htm"><span class="italic">Oracle Database Advanced Queuing Java API Reference</span></a> for more information about the <code>oracle.jms</code> Java package</p>
</li>
<li>
<p>The <code>OCIAQenq</code> function in the <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for more information about enqueuing messages using&nbsp;OCI</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="ADQUE3442" class="sect3"><a id="sthref2059"></a>
<h4 class="sect3"><a id="sthref2060"></a><a id="sthref2061"></a>Dequeuing User Messages Using PL/SQL</h4>
<p>To dequeue a user message from an <code>ANYDATA</code> queue using PL/SQL, you use the <code>DBMS_AQ.DEQUEUE</code> procedure and specify <code>ANYDATA</code> as the payload. The user message can contain an LCR or another type of object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_opers.htm#i1006951">&#34;Dequeuing Messages&#34;</a></div>
</div>
<!-- class="sect3" -->
<div id="ADQUE3443" class="sect3"><a id="sthref2062"></a>
<h4 class="sect3"><a id="sthref2063"></a><a id="sthref2064"></a><a id="sthref2065"></a><a id="sthref2066"></a><a id="sthref2067"></a>Dequeuing User Messages Using OCI or JMS</h4>
<p>In an <code>ANYDATA</code> queue, user messages containing LCRs in XML format are represented as <code>oracle.xdb.XMLType</code>. Non-LCR messages can be any user-defined type or a JMS type.</p>
<p>To dequeue a message from an <code>ANYDATA</code> queue using JMS, you can use methods <code>QueueReceiver</code>, <code>TopicSubscriber</code>, or <code>TopicReceiver</code>. Because the queue can contain different types of objects wrapped in <code>ANYDATA</code> wrappers, you must register a list of SQL types and their corresponding Java classes in the type map of the <a href="glossary.htm#CBAEAFFH"><span class="xrefglossterm">JMS session</span></a>. JMS types are already preregistered in the type map.</p>
<p>For example, suppose a queue contains user-enqueued LCR messages represented as <code>oracle.xdb.XMLType</code> and non-LCR messages of type <code>person</code> and <code>address</code>. The classes <code>JPerson.java</code> and <code>JAddress.java</code> are the <code>ORAData</code> mappings for <code>person</code> and <code>address</code>, respectively. Before dequeuing the message, the type map must be populated as follows:</p>
<pre>java.util.Map map = ((AQjmsSession)q_sess).getTypeMap();

map.put(&#34;SCOTT.PERSON&#34;, Class.forName(&#34;JPerson&#34;));
map.put(&#34;SCOTT.ADDRESS&#34;, Class.forName(&#34;JAddress&#34;));
map.put(&#34;SYS.XMLTYPE&#34;, Class.forName(&#34;oracle.xdb.XMLType&#34;));  // For LCRs
</pre>
<p>When using a <code>messageSelector</code> with a <code>QueueReceiver</code> or <code>TopicPublisher</code>, the selector can contain any SQL expression that has a combination of one or more of the following:</p>
<ul>
<li>
<p><a href="glossary.htm#CBADEAAI"><span class="xrefglossterm">JMS message</span></a> header fields or properties</p>
<p>These include <code>JMSPriority</code>, <code>JMSCorrelationID</code>, <code>JMSType</code>, <code>JMSXUserI</code>, <code>JMSXAppID</code>, <code>JMSXGroupID</code>, and <code>JMSXGroupSeq</code>. An example of a JMS message field <code>messageSelector</code> is:</p>
<pre>JMSPriority &lt; 3 AND JMSCorrelationID = &#39;Fiction&#39;
</pre></li>
<li>
<p>User-defined message properties</p>
<p>An example of a user-defined message properties <code>messageSelector</code> is:</p>
<pre>color IN (&#39;RED&#39;, &#39;BLUE&#39;, &#39;GREEN&#39;) AND price &lt; 30000
</pre></li>
<li>
<p>PL/SQL functions</p>
<p>An example of a PL/SQL function <code>messageSelector</code> is:</p>
<pre>hr.GET_TYPE(tab.user_data) = &#39;HR.EMPLOYEES&#39;  
</pre></li>
</ul>
<p>To dequeue a message from an <code>ANYDATA</code> queue using OCI, perform the same actions that you would to dequeue a message from a typed queue.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="aq_demo.htm#i1006898">&#34;Enqueuing and Dequeuing Messages Using JMS&#34;</a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information about representing messages in XML format</p>
</li>
<li>
<p><a class="olink JAJMS" href="../JAJMS/toc.htm"><span class="italic">Oracle Database Advanced Queuing Java API Reference</span></a> for more information about the <code>oracle.jms</code> Java package</p>
</li>
<li>
<p>The <code>OCIAQdeq</code> function in the <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for more information about dequeuing messages using&nbsp;OCI</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005758"></a>
<div id="ADQUE3444" class="sect1">
<h2 class="sect1"><a id="sthref2068"></a><a id="sthref2069"></a><a id="sthref2070"></a><a id="sthref2071"></a><a id="sthref2072"></a>Message Propagation and ANYDATA Queues</h2>
<p><code>ANYDATA</code> queues can interoperate with typed queues. <a href="#g1010518">Table 22-1</a> shows the types of propagation possible between queues.</p>
<div id="ADQUE3445" class="tblruleformal">
<p class="titleintable"><a id="sthref2073"></a><a id="g1010518"></a>Table 22-1 Propagation Between Different Types of Queues</p>
<table class="cellalignment1000" title="Propagation Between Different Types of Queues" summary="Rows correspond to propagations. The first column is the source queue, the second column is the destination queue, and the third column describes the transformation involved." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t12">Source Queue</th>
<th class="cellalignment1001" id="r1c2-t12">Destination Queue</th>
<th class="cellalignment1001" id="r1c3-t12">Transformation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t12" headers="r1c1-t12">
<p><code>ANYDATA</code></p>
</td>
<td class="cellalignment1002" headers="r2c1-t12 r1c2-t12">
<p><code>ANYDATA</code></p>
</td>
<td class="cellalignment1002" headers="r2c1-t12 r1c3-t12">
<p>None</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t12" headers="r1c1-t12">
<p>Typed</p>
</td>
<td class="cellalignment1002" headers="r3c1-t12 r1c2-t12">
<p><code>ANYDATA</code></p>
</td>
<td class="cellalignment1002" headers="r3c1-t12 r1c3-t12">
<p>Implicit</p>
<p><span class="bold">Note:</span> Propagation is possible only if the messages in the typed queue meet the restrictions outlined in <a href="aq_intro.htm#CHDEADFG">&#34;Object Type Support&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r4c1-t12" headers="r1c1-t12">
<p><code>ANYDATA</code></p>
</td>
<td class="cellalignment1002" headers="r4c1-t12 r1c2-t12">
<p>Typed</p>
</td>
<td class="cellalignment1002" headers="r4c1-t12 r1c3-t12">
<p>Requires a rule to filter messages and a user-defined <a href="glossary.htm#CBACGHDB"><span class="xrefglossterm">transformation</span></a>. Only messages containing a payload of the same type as the typed queue can be propagated to the typed queue.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r5c1-t12" headers="r1c1-t12">
<p>Typed</p>
</td>
<td class="cellalignment1002" headers="r5c1-t12 r1c2-t12">
<p>Typed</p>
</td>
<td class="cellalignment1002" headers="r5c1-t12 r1c3-t12">
<p>Follows Oracle Database Advanced Queuing rules</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Propagations cannot propagate user-enqueued <code>ANYDATA</code> messages that encapsulate payloads of object types, varrays, or nested tables between databases with different character sets. Propagations can propagate such messages between databases with the same character set.</div>
<p>Although you cannot use <a href="glossary.htm#CBABEDEC"><span class="xrefglossterm">Simple Object Access Protocol</span></a> (SOAP) to interact directly with an <code>ANYDATA</code> queue, you can use SOAP by propagating messages between an <code>ANYDATA</code> queue and a typed queue. If you want to enqueue a message into an <code>ANYDATA</code> queue using SOAP, you must first configure propagation from a typed queue to the <code>ANYDATA</code> queue. Then you can use SOAP to enqueue a message into the typed queue. The message is propagated&nbsp;automatically from the typed queue to the <code>ANYDATA</code> queue.</p>
<p>If you want to use SOAP to dequeue a message that is in an <code>ANYDATA</code> queue, then you can configure propagation from the <code>ANYDATA</code> queue to a typed queue. The message is propagated automatically from the <code>ANYDATA</code> queue to the typed queue, where it is available for access using SOAP.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;Propagating Messages Between an ANYDATA Queue and a Typed Queue&#34; in <a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
</div>
<!-- class="sect1" -->
<a id="i1005909"></a>
<div id="ADQUE3446" class="sect1">
<h2 class="sect1"><a id="sthref2074"></a><a id="sthref2075"></a>Enqueuing User Messages in ANYDATA Queues</h2>
<p>This section provides examples of enqueuing messages into an <code>ANYDATA</code> queue. The examples assume you are in a SQL*Plus testing environment with access to two databases named <code>db01</code> and <code>db02</code>. The first few examples prepare the testing environment for the other examples in this chapter.</p>
<p>In <a href="#CHDDCICA">Example 22-1</a>, you connect as a user with administrative privileges at databases <code>db01</code> and <code>db02</code> to create administrator user <code>strmadmin</code> and to grant <code>EXECUTE</code> privilege on the <code>DBMS_AQ</code> package to sample schema user <code>oe</code>.</p>
<div id="ADQUE3447" class="example">
<p class="titleinexample"><a id="CHDDCICA"></a>Example 22-1 Creating ANYDATA Users</p>
<pre>GRANT EXECUTE ON DBMS_AQ TO oe;
CREATE USER strmadmin IDENTIFIED BY strmadmin DEFAULT TABLESPACE example;
GRANT DBA TO strmadmin; 
GRANT EXECUTE ON DBMS_STREAMS_ADM TO strmadmin;
GRANT EXECUTE ON DBMS_TRANSFORM TO strmadmin;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDHACIF">Example 22-2</a>, you connect to <code>db01</code> as <code>strmadmin</code> to create <code>ANYDATA</code> queue <code>oe_queue_any</code>. The <code>oe</code> user is configured automatically as a secure user of the <code>oe_queue_any</code> queue and is given <code>ENQUEUE</code> and <code>DEQUEUE</code> privileges on the queue.</p>
<div id="ADQUE3448" class="example">
<p class="titleinexample"><a id="CHDHACIF"></a>Example 22-2 Creating an ANYDATA Queue</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>
BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;oe_qtab_any&#39;,
    queue_name   =&gt; &#39;oe_queue_any&#39;,
    queue_user   =&gt; &#39;oe&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDBICIB">Example 22-3</a>, you add a <a href="glossary.htm#CBADJIIA"><span class="xrefglossterm">subscriber</span></a> to the <code>oe_queue_any</code> queue. This subscriber performs explicit dequeues of messages. The <code>ADD_SUBSCRIBER</code> procedure will automatically create an <code>AQ_AGENT</code>.</p>
<div id="ADQUE3449" class="example">
<p class="titleinexample"><a id="CHDBICIB"></a>Example 22-3 Adding a Subscriber to the ANYDATA Queue</p>
<pre>DECLARE
  subscriber SYS.AQ$_AGENT;
BEGIN
  subscriber :=  SYS.AQ$_AGENT(&#39;LOCAL_AGENT&#39;, NULL, NULL);
  SYS.DBMS_AQADM.ADD_SUBSCRIBER(
    queue_name  =&gt;  &#39;strmadmin.oe_queue_any&#39;,
    subscriber  =&gt;  subscriber);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDDGGDG">Example 22-4</a>, you associate the <code>oe</code> user with the <code>local_agent</code> agent.</p>
<div id="ADQUE3450" class="example">
<p class="titleinexample"><a id="CHDDGGDG"></a>Example 22-4 Associating a User with an AQ_AGENT</p>
<pre>BEGIN
  DBMS_AQADM.ENABLE_DB_ACCESS(
    agent_name  =&gt; &#39;local_agent&#39;,
    db_username =&gt; &#39;oe&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDGCGGJ">Example 22-5</a>, you connect to database <code>db01</code> as user <code>oe</code> to create an enqueue procedure. It takes an object of <code>ANYDATA</code> type as an input parameter and enqueues a message containing the payload into an existing <code>ANYDATA</code> queue.</p>
<div id="ADQUE3451" class="example">
<p class="titleinexample"><a id="CHDGCGGJ"></a>Example 22-5 Creating an Enqueue Procedure</p>
<pre>set echo off
set verify off
ACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDE
CONNECT oe/&amp;password@db01;
 
set echo on
CREATE PROCEDURE oe.enq_proc (payload ANYDATA)  IS 
  enqopt     DBMS_AQ.ENQUEUE_OPTIONS_T;
  mprop      DBMS_AQ.MESSAGE_PROPERTIES_T;
  enq_msgid  RAW(16);
BEGIN
  mprop.SENDER_ID := SYS.AQ$_AGENT(&#39;LOCAL_AGENT&#39;, NULL, NULL); 
  DBMS_AQ.ENQUEUE(
    queue_name          =&gt;  &#39;strmadmin.oe_queue_any&#39;,
    enqueue_options     =&gt;  enqopt,
    message_properties  =&gt;  mprop,
    payload             =&gt;  payload,
    msgid               =&gt;  enq_msgid);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDGIIHF">Example 22-6</a>, you use procedure <code>oe.enq_proc</code> to enqueue a message of type <code>VARCHAR2</code> into an <code>ANYDATA</code> queue.</p>
<div id="ADQUE3452" class="example">
<p class="titleinexample"><a id="CHDGIIHF"></a>Example 22-6 Enqueuing a VARCHAR2 Message into an ANYDATA Queue</p>
<pre>EXEC oe.enq_proc(ANYDATA.ConvertVarchar2(&#39;Chemicals - SW&#39;));
COMMIT;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDIHCEB">Example 22-7</a>, you use procedure <code>oe.enq_proc</code> to enqueue a message of type <code>NUMBER</code> into an <code>ANYDATA</code> queue.</p>
<div id="ADQUE3453" class="example">
<p class="titleinexample"><a id="CHDIHCEB"></a>Example 22-7 Enqueuing a NUMBER Message into an ANYDATA Queue</p>
<pre>EXEC oe.enq_proc(ANYDATA.ConvertNumber(&#39;16&#39;));
COMMIT;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDFBHDA">Example 22-8</a>, you use procedure <code>oe.enq_proc</code> to enqueue a user-defined type message into an <code>ANYDATA</code> queue.</p>
<div id="ADQUE3454" class="example">
<p class="titleinexample"><a id="CHDFBHDA"></a>Example 22-8 Enqueuing a User-Defined Type Message into an ANYDATA Queue</p>
<pre>BEGIN
  oe.enq_proc(ANYDATA.ConvertObject(oe.cust_address_typ(
    &#39;1646 Brazil Blvd&#39;,&#39;361168&#39;,&#39;Chennai&#39;,&#39;Tam&#39;, &#39;IN&#39;)));
END;
/
COMMIT;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;Viewing the Contents of User-Enqueued Events in a Queue&#34; in <a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
</div>
<!-- class="sect1" -->
<a id="CHDCJBFE"></a>
<div id="ADQUE3455" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref2076"></a><a id="sthref2077"></a>Dequeuing User Messages from ANYDATA Queues</h2>
<p>This section provides examples of dequeuing messages from an <code>ANYDATA</code> queue. The examples assume that you have completed the examples in <a href="#i1005909">&#34;Enqueuing User Messages in ANYDATA Queues&#34;</a>.</p>
<p>To dequeue messages, you must know the <a href="glossary.htm#CBAJDFJA"><span class="xrefglossterm">consumer</span></a> of the messages. To find the consumer for the messages in a queue, connect as the owner of the queue and query the <code>AQ$</code><code><span class="codeinlineitalic">queue_table_name</span></code> view, where <code><span class="codeinlineitalic">queue_table_name</span></code> is the name of the <a href="glossary.htm#CBAFHDDD"><span class="xrefglossterm">queue table</span></a> containing the queue.</p>
<p>In <a href="#CHDFIEHG">Example 22-9</a>, you connect to database <code>db01</code> as <code>strmadmin</code>, the owner of queue <code>oe_queue_any</code>, and perform a query on the <code>AQ$OE_QTAB_ANY</code> view. The query returns three rows, with <code>LOCAL_AGENT</code> as the <code>CONSUMER_NAME</code> in each row.</p>
<div id="ADQUE3456" class="example">
<p class="titleinexample"><a id="CHDFIEHG"></a>Example 22-9 Determining the Consumer of Messages in a Queue</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>
SELECT MSG_ID, MSG_STATE, CONSUMER_NAME FROM AQ$OE_QTAB_ANY;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDDCGJB">Example 22-10</a>, you connect to database <code>db01</code> as user <code>oe</code> to create a dequeue procedure that takes as an input the consumer of the messages you want to dequeue, dequeues messages of <code>oe.cust_address_typ</code>, and prints the contents of the messages.</p>
<div id="ADQUE3457" class="example">
<p class="titleinexample"><a id="CHDDCGJB"></a>Example 22-10 Creating a Dequeue Procedure for an ANYDATA Queue</p>
<pre>CONNECT oe; -- @db01
Enter password: <span class="italic">password</span>

CREATE PROCEDURE oe.get_cust_address (
consumer IN VARCHAR2) AS
  address         OE.CUST_ADDRESS_TYP;
  deq_address     ANYDATA; 
  msgid           RAW(16); 
  deqopt          DBMS_AQ.DEQUEUE_OPTIONS_T; 
  mprop           DBMS_AQ.MESSAGE_PROPERTIES_T;
  new_addresses   BOOLEAN := TRUE;
  next_trans      EXCEPTION;
  no_messages     EXCEPTION; 
  pragma exception_init (next_trans, -25235);
  pragma exception_init (no_messages, -25228);
  num_var         pls_integer;
BEGIN
  deqopt.consumer_name := consumer;
  deqopt.wait := 1;
  WHILE (new_addresses) LOOP
  BEGIN
    DBMS_AQ.DEQUEUE( 
      queue_name          =&gt;  &#39;strmadmin.oe_queue_any&#39;,
      dequeue_options     =&gt;  deqopt,
      message_properties  =&gt;  mprop,
      payload             =&gt;  deq_address,
      msgid               =&gt;  msgid);
    deqopt.navigation := DBMS_AQ.NEXT;
    DBMS_OUTPUT.PUT_LINE(&#39;****&#39;);
    IF (deq_address.GetTypeName() = &#39;OE.CUST_ADDRESS_TYP&#39;) THEN
       DBMS_OUTPUT.PUT_LINE(&#39;Message TYPE is: &#39; || deq_address.GetTypeName()); 
       num_var := deq_address.GetObject(address);
       DBMS_OUTPUT.PUT_LINE(&#39; **** CUSTOMER ADDRESS **** &#39;);
       DBMS_OUTPUT.PUT_LINE(address.street_address);
       DBMS_OUTPUT.PUT_LINE(address.postal_code);
       DBMS_OUTPUT.PUT_LINE(address.city);
       DBMS_OUTPUT.PUT_LINE(address.state_province);
       DBMS_OUTPUT.PUT_LINE(address.country_id);
    ELSE
       DBMS_OUTPUT.PUT_LINE(&#39;Message TYPE is: &#39; || deq_address.GetTypeName()); 
    END IF;
  COMMIT;
  EXCEPTION
     WHEN next_trans THEN
       deqopt.navigation := DBMS_AQ.NEXT_TRANSACTION;
     WHEN no_messages THEN
       new_addresses := FALSE;
       DBMS_OUTPUT.PUT_LINE(&#39;No more messages&#39;);
  END;
  END LOOP; 
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDEHBGB">Example 22-11</a>, you use procedure <code>oe.get_cust_address</code>, created in <a href="#CHDDCGJB">Example 22-10</a>, specifying <code>LOCAL_AGENT</code> as the consumer.</p>
<div id="ADQUE3458" class="example">
<p class="titleinexample"><a id="CHDEHBGB"></a>Example 22-11 Dequeuing Messages from an ANYDATA Queue</p>
<pre>SET SERVEROUTPUT ON SIZE 100000
EXEC oe.get_cust_address(&#39;LOCAL_AGENT&#39;);
</pre></div>
<!-- class="example" -->
<p>The example returns:</p>
<pre>****
Message TYPE is: SYS.VARCHAR2
****
Message TYPE is: SYS.NUMBER
****
Message TYPE is: OE.CUST_ADDRESS_TYP
**** CUSTOMER ADDRESS ****
1646 Brazil Blvd
361168
Chennai
Tam
IN
No more messages
</pre></div>
<!-- class="sect1" -->
<a id="CACCJJDB"></a>
<div id="ADQUE3459" class="sect1">
<h2 class="sect1"><a id="sthref2078"></a><a id="sthref2079"></a>Propagating User Messages from ANYDATA Queues to Typed Queues</h2>
<p>This section provides examples showing how to propagate non-LCR user messages between an <code>ANYDATA</code> queue and a typed queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The examples in this section assume that you have completed the examples in <a href="#i1005909">&#34;Enqueuing User Messages in ANYDATA Queues&#34;</a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1005758">&#34;Message Propagation and ANYDATA Queues&#34;</a> for more information about propagation between <code>ANYDATA</code> and typed queues</div>
<p>The first few examples set up propagation from the <code>ANYDATA</code> queue <code>oe_queue_any</code>, created in <a href="#CHDHACIF">Example 22-2</a>, to a typed queue in database <code>db02</code>. In <a href="#CHDEFCCJ">Example 22-12</a>, you connect as sample schema user <code>oe</code> to grant <code>EXECUTE</code> privilege on <code>oe.cust_address_typ</code> at databases <code>db01</code> and <code>db02</code> to administrator user <code>strmadmin</code>.</p>
<div id="ADQUE3460" class="example">
<p class="titleinexample"><a id="CHDEFCCJ"></a>Example 22-12 Granting EXECUTE Privilege on a Type</p>
<pre>CONNECT oe; -- @db01
Enter password: <span class="italic">password</span>

GRANT EXECUTE ON oe.cust_address_typ TO strmadmin;
CONNECT oe; -- @db02
Enter password: <span class="italic">password</span>

GRANT EXECUTE ON oe.cust_address_typ TO strmadmin;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDBHAED">Example 22-13</a>, you connect to database <code>db02</code> as administrator user <code>strmadmin</code> and create a destination queue of type <code>oe.cust_address_typ</code>.</p>
<div id="ADQUE3461" class="example">
<p class="titleinexample"><a id="CHDBHAED"></a>Example 22-13 Creating a Typed Destination Queue</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>

BEGIN 
  DBMS_AQADM.CREATE_QUEUE_TABLE(
    queue_table         =&gt; &#39;strmadmin.oe_qtab_address&#39;, 
    queue_payload_type  =&gt; &#39;oe.cust_address_typ&#39;, 
    multiple_consumers  =&gt; true);
  DBMS_AQADM.CREATE_QUEUE(
    queue_name          =&gt; &#39;strmadmin.oe_queue_address&#39;, 
    queue_table         =&gt; &#39;strmadmin.oe_qtab_address&#39;);
  DBMS_AQADM.START_QUEUE(
    queue_name          =&gt; &#39;strmadmin.oe_queue_address&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDJIJFD">Example 22-14</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create a database link from <code>db01</code> to <code>db02</code>.</p>
<div id="ADQUE3462" class="example">
<p class="titleinexample"><a id="CHDJIJFD"></a>Example 22-14 Creating a Database Link</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>

CREATE DATABASE LINK db02 CONNECT TO strmadmin IDENTIFIED BY <span class="italic">password</span> 
  USING &#39;db02&#39;; 
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDFDABE">Example 22-15</a>, you create function <code>any_to_cust_address_typ</code> in the <code>strmadmin</code> schema at <code>db01</code> that takes an <code>ANYDATA</code> payload containing an <code>oe.cust_address_typ</code> object and returns an <code>oe.cust_address_typ</code> object.</p>
<div id="ADQUE3463" class="example">
<p class="titleinexample"><a id="CHDFDABE"></a>Example 22-15 Creating a Function to Extract a Typed Object from an ANYDATA Object</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>

CREATE FUNCTION strmadmin.any_to_cust_address_typ(in_any IN ANYDATA) 
RETURN OE.CUST_ADDRESS_TYP
AS
  address       OE.CUST_ADDRESS_TYP;
  num_var       NUMBER;
  type_name     VARCHAR2(100);
BEGIN
  type_name := in_any.GetTypeName();
  IF (type_name = &#39;OE.CUST_ADDRESS_TYP&#39;) THEN
    num_var := in_any.GetObject(address);
    RETURN address;
  ELSE
    raise_application_error(-20101, &#39;Conversion failed - &#39; || type_name);
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<p><a id="sthref2080"></a>In <a href="#CHDDGCCB">Example 22-16</a>, you create a transformation at <code>db01</code> using the <code>DBMS_TRANSFORM</code> package.</p>
<div id="ADQUE3464" class="example">
<p class="titleinexample"><a id="CHDDGCCB"></a>Example 22-16 Creating an ANYDATA to Typed Object Transformation</p>
<pre>BEGIN
  DBMS_TRANSFORM.CREATE_TRANSFORMATION( 
   schema         =&gt; &#39;strmadmin&#39;, 
   name           =&gt; &#39;anytoaddress&#39;, 
   from_schema    =&gt; &#39;SYS&#39;, 
   from_type      =&gt; &#39;ANYDATA&#39;, 
   to_schema      =&gt; &#39;oe&#39;, 
   to_type        =&gt; &#39;cust_address_typ&#39;, 
   transformation =&gt; &#39;strmadmin.any_to_cust_address_typ(source.user_data)&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDCGFJH">Example 22-17</a>, you create a subscriber for the typed queue. The subscriber must contain a rule that ensures that only messages of the appropriate type are propagated to the destination queue.</p>
<div id="ADQUE3465" class="example">
<p class="titleinexample"><a id="CHDCGFJH"></a>Example 22-17 Creating Subscriber ADDRESS_AGENT_REMOTE</p>
<pre>DECLARE 
  subscriber  SYS.AQ$_AGENT; 
BEGIN 
  subscriber := SYS.AQ$_AGENT (&#39;ADDRESS_AGENT_REMOTE&#39;, 
                               &#39;STRMADMIN.OE_QUEUE_ADDRESS@DB02&#39;, 
                               0); 
  DBMS_AQADM.ADD_SUBSCRIBER(
    queue_name     =&gt; &#39;strmadmin.oe_queue_any&#39;, 
    subscriber     =&gt; subscriber,
    rule           =&gt; &#39;TAB.USER_DATA.GetTypeName()=&#39;&#39;OE.CUST_ADDRESS_TYP&#39;&#39;&#39;,
    transformation =&gt; &#39;strmadmin.anytoaddress&#39;); 
END; 
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDGEDCC">Example 22-18</a>, you schedule propagation between the <code>ANYDATA</code> queue at <code>db01</code> and the typed queue at <code>db02</code>.</p>
<div id="ADQUE3466" class="example">
<p class="titleinexample"><a id="CHDGEDCC"></a>Example 22-18 Scheduling Propagation from an ANYDATA Queue to a Typed Queue</p>
<pre>BEGIN 
  DBMS_AQADM.SCHEDULE_PROPAGATION(
    queue_name   =&gt; &#39;strmadmin.oe_queue_any&#39;, 
    destination  =&gt; &#39;db02&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDGHGJE">Example 22-19</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to enqueue a message of <code>oe.cust_address_typ</code> type wrapped in an <code>ANYDATA</code> wrapper. This example uses the enqueue procedure <code>oe.enq_proc</code> created in <a href="#CHDGCGGJ">Example 22-5</a>.</p>
<div id="ADQUE3467" class="example">
<p class="titleinexample"><a id="CHDGHGJE"></a>Example 22-19 Enqueuing a Typed Message in an ANYDATA Wrapper</p>
<pre>CONNECT oe;
Enter password: <span class="italic">password</span>

BEGIN
  oe.enq_proc(ANYDATA.ConvertObject(oe.cust_address_typ(
    &#39;1668 Chong Tao&#39;,&#39;111181&#39;,&#39;Beijing&#39;,NULL,&#39;CN&#39;)));
END;
/
COMMIT;
</pre></div>
<!-- class="example" -->
<p>After allowing some time for propagation, in <a href="#CHDIACGG">Example 22-20</a> you query queue table <code>AQ$OE_QTAB_ADDRESS</code> at <code>db02</code> to view the propagated message.</p>
<div id="ADQUE3468" class="example">
<p class="titleinexample"><a id="CHDIACGG"></a>Example 22-20 Viewing the Propagated Message</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>

SELECT MSG_ID, MSG_STATE, CONSUMER_NAME FROM AQ$OE_QTAB_ADDRESS;
</pre></div>
<!-- class="example" -->
<p>The example returns one message for <code>ADDRESS_AGENT_REMOTE</code>:</p>
<pre>MSG_ID                           MSG_STATE        CONSUMER_NAME
-------------------------------- ---------------- ------------------------------
EBEF5CACC4665A6FE030578CE70A370D READY            ADDRESS_AGENT_REMOTE
 
1 row selected.
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="mg_trnsfm.htm#g1017953">Chapter 20, &#34;Oracle Messaging Gateway Message Conversion&#34;</a> for more information about transformations during propagation</div>
</div>
<!-- class="sect1" -->
<a id="CHDIEDAI"></a>
<div id="ADQUE3469" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref2081"></a><a id="sthref2082"></a>Propagating User-Enqueued LCRs from ANYDATA Queues to Typed Queues</h2>
<p>You can propagate user-enqueued LCRs to an appropriate typed queue, but propagation of captured LCRs to a typed queue is not supported.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;Streams Capture Process&#34; in <a class="olink STRMS002" href="../STRMS/strms_capture.htm#STRMS002"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information on capture processes</div>
<p>To propagate user-enqueued LCRs from an <code>ANYDATA</code> queue to a typed queue, you complete the same steps as you do for non-LCR messages, but Oracle supplies the transformation functions. You can use the following functions in the <code>DBMS_STREAMS</code> package to transform LCRs in <code>ANYDATA</code> queues to messages in typed queues:</p>
<ul>
<li>
<p><code>CONVERT_ANYDATA_TO_LCR_ROW</code> transforms an <code>ANYDATA</code> payload containing a row LCR into a <code>SYS.LCR$_ROW_RECORD</code> payload.</p>
</li>
<li>
<p><code>CONVERT_ANYDATA_TO_LCR_DDL</code> transforms an <code>ANYDATA</code> payload containing a DDL LCR into a <code>SYS.LCR$_DDL_RECORD</code> payload.</p>
</li>
</ul>
<p>The examples in this section set up propagation of row LCRs from an <code>ANYDATA</code> queue named <code>oe_queue_any</code> to a typed queue of type <code>SYS.LCR$_ROW_RECORD</code> named <code>oe_queue_lcr</code>. The source queue <code>oe_queue_any</code> is at database <code>db01</code>, and the destination queue <code>oe_queue_lcr</code> is created at database <code>db02</code> in <a href="#CHDFFJCE">Example 22-21</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The examples in this section assume you have already run the examples in the preceding sections of this chapter.</div>
<div id="ADQUE3470" class="example">
<p class="titleinexample"><a id="CHDFFJCE"></a>Example 22-21 Creating a Queue of Type LCR$_ROW_RECORD</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>

BEGIN 
  DBMS_AQADM.CREATE_QUEUE_TABLE(
    queue_table         =&gt; &#39;strmadmin.oe_qtab_lcr&#39;, 
    queue_payload_type  =&gt; &#39;SYS.LCR$_ROW_RECORD&#39;, 
    multiple_consumers  =&gt; true);
  DBMS_AQADM.CREATE_QUEUE(
    queue_name   =&gt; &#39;strmadmin.oe_queue_lcr&#39;, 
    queue_table  =&gt; &#39;strmadmin.oe_qtab_lcr&#39;);
  DBMS_AQADM.START_QUEUE(
    queue_name   =&gt; &#39;strmadmin.oe_queue_lcr&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDGDFAJ">Example 22-22</a>, you connect to <code>db01</code> as administrator user <code>strmadmin</code> to create an <code>ANYDATA</code> to <code>LCR$_ROW_RECORD</code> transformation at <code>db01</code> using the <code>DBMS_TRANSFORM</code> package.</p>
<div id="ADQUE3471" class="example">
<p class="titleinexample"><a id="CHDGDFAJ"></a>Example 22-22 Creating an ANYDATA to LCR$_ROW_RECORD Transformation</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>

BEGIN
  DBMS_TRANSFORM.CREATE_TRANSFORMATION( 
    schema         =&gt; &#39;strmadmin&#39;, 
    name           =&gt; &#39;anytolcr&#39;, 
    from_schema    =&gt; &#39;SYS&#39;, 
    from_type      =&gt; &#39;ANYDATA&#39;, 
    to_schema      =&gt; &#39;SYS&#39;, 
    to_type        =&gt; &#39;LCR$_ROW_RECORD&#39;, 
    transformation =&gt;
          &#39;SYS.DBMS_STREAMS.CONVERT_ANYDATA_TO_LCR_ROW(source.user_data)&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDFFIHB">Example 22-23</a>, you create a subscriber at the typed queue. The subscriber specifies the <code>anytolcr</code> transformation created in <a href="#CHDGDFAJ">Example 22-22</a> for the <code>transformation</code> parameter.</p>
<div id="ADQUE3472" class="example">
<p class="titleinexample"><a id="CHDFFIHB"></a>Example 22-23 Creating Subscriber ROW_LCR_AGENT_REMOTE</p>
<pre>DECLARE 
  subscriber  SYS.AQ$_AGENT; 
BEGIN 
  subscriber := SYS.AQ$_AGENT(
    &#39;ROW_LCR_AGENT_REMOTE&#39;, 
    &#39;STRMADMIN.OE_QUEUE_LCR@DB02&#39;, 
    0); 
  DBMS_AQADM.ADD_SUBSCRIBER(
    queue_name     =&gt; &#39;strmadmin.oe_queue_any&#39;,
    subscriber     =&gt; subscriber,
    rule           =&gt; &#39;TAB.USER_DATA.GetTypeName()=&#39;&#39;SYS.LCR$_ROW_RECORD&#39;&#39;&#39;,
    transformation =&gt; &#39;strmadmin.anytolcr&#39;); 
END; 
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDHJHAA">Example 22-24</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a procedure to construct and enqueue a row LCR into the <code>strmadmin.oe_queue_any</code> queue.</p>
<div id="ADQUE3473" class="example">
<p class="titleinexample"><a id="CHDHJHAA"></a>Example 22-24 Creating a Procedure to Construct and Enqueue a Row LCR</p>
<pre>CONNECT oe;
Enter password: <span class="italic">password</span>

CREATE PROCEDURE oe.enq_row_lcr_proc(
  source_dbname  VARCHAR2,
  cmd_type       VARCHAR2,
  obj_owner      VARCHAR2,
  obj_name       VARCHAR2,
  old_vals       SYS.LCR$_ROW_LIST,
  new_vals       SYS.LCR$_ROW_LIST) 
AS
  eopt           DBMS_AQ.ENQUEUE_OPTIONS_T;
  mprop          DBMS_AQ.MESSAGE_PROPERTIES_T;
  enq_msgid      RAW(16);
  row_lcr        SYS.LCR$_ROW_RECORD;
BEGIN
  mprop.SENDER_ID := SYS.AQ$_AGENT(&#39;LOCAL_AGENT&#39;, NULL, NULL); 
  row_lcr := SYS.LCR$_ROW_RECORD.CONSTRUCT(
    source_database_name  =&gt;  source_dbname,
    command_type          =&gt;  cmd_type,
    object_owner          =&gt;  obj_owner,
    object_name           =&gt;  obj_name,
    old_values            =&gt;  old_vals,
    new_values            =&gt;  new_vals);
  DBMS_AQ.ENQUEUE(
    queue_name            =&gt;  &#39;strmadmin.oe_queue_any&#39;, 
    enqueue_options       =&gt;  eopt,
    message_properties    =&gt;  mprop,
    payload               =&gt;  ANYDATA.ConvertObject(row_lcr),
    msgid                 =&gt;  enq_msgid);
END enq_row_lcr_proc;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDFGAFH">Example 22-25</a>, you use the <code>oe.enq_row_lcr_proc</code> procedure first to create a row LCR that inserts a row into the <code>oe.inventories</code> table, and then to enqueue the row LCR into the <code>strmadmin.oe_queue_any</code> queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This example does not insert a new row in the <code>oe.inventories</code> table. The new row is inserted when an Oracle Streams apply process dequeues the row LCR and applies it.</div>
<div id="ADQUE3474" class="example">
<p class="titleinexample"><a id="CHDFGAFH"></a>Example 22-25 Creating and Enqueuing a Row LCR</p>
<pre>DECLARE
  newunit1  SYS.LCR$_ROW_UNIT;
  newunit2  SYS.LCR$_ROW_UNIT;
  newunit3  SYS.LCR$_ROW_UNIT;
  newvals   SYS.LCR$_ROW_LIST;
BEGIN
  newunit1 := SYS.LCR$_ROW_UNIT(
    &#39;PRODUCT_ID&#39;, 
    ANYDATA.ConvertNumber(3503),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newunit2 := SYS.LCR$_ROW_UNIT(
    &#39;WAREHOUSE_ID&#39;, 
    ANYDATA.ConvertNumber(1),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newunit3 := SYS.LCR$_ROW_UNIT(
    &#39;QUANTITY_ON_HAND&#39;, 
    ANYDATA.ConvertNumber(157),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newvals := SYS.LCR$_ROW_LIST(newunit1,newunit2,newunit3);
oe.enq_row_lcr_proc(
  source_dbname  =&gt;  &#39;DB01&#39;,
  cmd_type       =&gt;  &#39;INSERT&#39;,
  obj_owner      =&gt;  &#39;OE&#39;,
  obj_name       =&gt;  &#39;INVENTORIES&#39;,
  old_vals       =&gt;  NULL,
  new_vals       =&gt;  newvals);
END;
/
COMMIT;
</pre></div>
<!-- class="example" -->
<p>The LCR is propagated to database <code>db02</code> by the schedule created in <a href="#CHDGEDCC">Example 22-18</a>. After allowing some time for propagation, in <a href="#CHDEJHGB">Example 22-26</a> you query queue table <code>AQ$OE_QTAB_LCR</code> at <code>db02</code> to view the propagated message.</p>
<div id="ADQUE3475" class="example">
<p class="titleinexample"><a id="CHDEJHGB"></a>Example 22-26 Viewing the Propagated LCR</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>

SELECT MSG_ID, MSG_STATE, CONSUMER_NAME FROM AQ$OE_QTAB_LCR;
</pre></div>
<!-- class="example" -->
<p>The example returns one message for <code>ROW_LCR_AGENT_REMOTE</code>:</p>
<pre>MSG_ID                           MSG_STATE        CONSUMER_NAME
-------------------------------- ---------------- ------------------------------
ECE2B0F912DDFF5EE030578CE70A04BB READY            ROW_LCR_AGENT_REMOTE
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;DBMS_STREAMS&#34; in <a class="olink ARPLS332" href="../ARPLS/d_streams.htm#ARPLS332"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the row LCR and DDL LCR conversion functions</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment993">
<tr>
<td class="cellalignment1002">
<table class="cellalignment998">
<tr>
<td class="cellalignment997"><a href="mg_trble.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment997"><a href="aq_demo.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1004">
<table class="cellalignment996">
<tr>
<td class="cellalignment997"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment997"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment997"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment997"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment997"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment997"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>