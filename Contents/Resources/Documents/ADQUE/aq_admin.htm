<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-957"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Database%20Advanced%20Queuing%20Administrative%20Interface"></a><title>Oracle Database Advanced Queuing Administrative Interface</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T0:30:46Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Queuing User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17945-14"/>
<meta name="dcterms.isVersionOf" content="ADQUE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="aq_trbl.htm" title="Previous" type="text/html"/>
<link rel="Next" href="aq_views.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17945-14.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/34</span> <!-- End Header -->
<div id="ADQUE0800" class="chapter"><a id="g1020486"></a> <a id="i1008878"></a>
<h1 class="chapter"><span class="secnum">8</span> Oracle Database Advanced Queuing Administrative Interface</h1>
<p>This chapter describes the Oracle Database Advanced Queuing (AQ) administrative interface.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1008361">Managing Queue Tables</a></p>
</li>
<li>
<p><a href="#i1008392">Managing Queues</a></p>
</li>
<li>
<p><a href="#BAJJEBFA">Managing Transformations</a></p>
</li>
<li>
<p><a href="#i1008611">Granting and Revoking Privileges</a></p>
</li>
<li>
<p><a href="#i1008642">Managing Subscribers</a></p>
</li>
<li>
<p><a href="#i1008689">Managing Propagations</a></p>
</li>
<li>
<p><a href="#i1008752">Managing Oracle Database Advanced Queuing Agents</a></p>
</li>
<li>
<p><a href="#i1007391">Adding an Alias to the LDAP Server</a></p>
</li>
<li>
<p><a href="#i1007413">Deleting an Alias from the LDAP Server</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a href="aq_envir.htm#g1019073">Chapter 3, &#34;Oracle Database Advanced Queuing: Programmatic Interfaces&#34;</a> for a list of available functions in each programmatic interface</p>
</li>
<li>
<p><a class="olink ARPLS005" href="../ARPLS/d_aqadm.htm#ARPLS005"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information on the DBMS_AQADM Package</p>
</li>
</ul>
</div>
<a id="i1008361"></a>
<div id="ADQUE2657" class="sect1">
<h2 class="sect1"><a id="sthref576"></a><a id="sthref577"></a>Managing Queue Tables</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CACECDGA">Creating a Queue Table</a></p>
</li>
<li>
<p><a href="#i1005956">Altering a Queue Table</a></p>
</li>
<li>
<p><a href="#i1006026">Dropping a Queue Table</a></p>
</li>
<li>
<p><a href="#BAJFEDGG">Purging a Queue Table</a></p>
</li>
<li>
<p><a href="#i1008715">Migrating a Queue Table</a></p>
</li>
</ul>
<a id="CACECDGA"></a>
<div id="ADQUE0801" class="sect2">
<h3 class="sect2"><a id="sthref578"></a><a id="sthref579"></a><a id="sthref580"></a>Creating a Queue Table</h3>
<pre>DBMS_AQADM.CREATE_QUEUE_TABLE(
   queue_table          IN      VARCHAR2,
   queue_payload_type   IN      VARCHAR2,
   [storage_clause      IN      VARCHAR2        DEFAULT NULL,]
   sort_list            IN      VARCHAR2        DEFAULT NULL,
   multiple_consumers   IN      BOOLEAN         DEFAULT FALSE,
   message_grouping     IN      BINARY_INTEGER  DEFAULT NONE,
   comment              IN      VARCHAR2        DEFAULT NULL,
   primary_instance     IN      BINARY_INTEGER  DEFAULT 0, 
   secondary_instance   IN      BINARY_INTEGER  DEFAULT 0,
   compatible           IN      VARCHAR2        DEFAULT NULL,
   secure               IN      BOOLEAN         DEFAULT FALSE);
</pre>
<p>This procedure creates a <a href="glossary.htm#CBAFHDDD"><span class="xrefglossterm">queue table</span></a> for messages of a predefined type. It has the following required and optional parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment1000" title="Parameter Descriptions" summary="The first column is the name of a parameter. The second column describes it." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t3">Parameter</th>
<th class="cellalignment1001" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t3" headers="r1c1-t3"><code>queue_table</code></td>
<td class="cellalignment1002" headers="r2c1-t3 r1c2-t3"><a id="sthref581"></a><a id="sthref582"></a>This required parameter specifies the queue table name.
<p><a id="sthref583"></a><a id="sthref584"></a>Mixed case (upper and lower case together) queue table names are supported if database compatibility is 10.0, but the names must be enclosed in double quote marks. So <code>abc.efg</code> means the schema is <code>ABC</code> and the name is <code>EFG</code>, but <code>&#34;abc&#34;.&#34;efg&#34;</code> means the schema is <code>abc</code> and the name is <code>efg</code>.</p>
<p><a id="sthref585"></a><a id="sthref586"></a>Queue table names must not be longer than 24 characters. If you attempt to create a queue table with a longer name, error ORA-24019 results.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t3" headers="r1c1-t3"><code>queue_payload_type</code></td>
<td class="cellalignment1002" headers="r3c1-t3 r1c2-t3"><a id="sthref587"></a><a id="sthref588"></a>This required parameter specifies the payload type as RAW or an object type. See <a href="#CHDHFDJG">&#34;Payload Type&#34;</a> for more information.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r4c1-t3" headers="r1c1-t3"><code>storage_clause</code></td>
<td class="cellalignment1002" headers="r4c1-t3 r1c2-t3"><a id="sthref589"></a><a id="sthref590"></a>This optional parameter specifies a tablespace for the queue table. See <a href="#CHDFEICD">&#34;Storage Clause&#34;</a> for more information.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r5c1-t3" headers="r1c1-t3"><code>sort_list</code></td>
<td class="cellalignment1002" headers="r5c1-t3 r1c2-t3"><a id="sthref591"></a><a id="sthref592"></a>This optional parameter specifies one or two columns to be used as sort keys in ascending order. It has the format <code><span class="codeinlineitalic">sort_column1,sort_column2</span></code>. See <a href="#CHDFDHBE">&#34;Sort Key&#34;</a> for more information.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r6c1-t3" headers="r1c1-t3"><code>multiple_consumers</code></td>
<td class="cellalignment1002" headers="r6c1-t3 r1c2-t3"><a id="sthref593"></a><a id="sthref594"></a>This optional parameter specifies the queue table as single-consumer or multiconsumer. The default <code>FALSE</code> means queues created in the table can have only one consumer for each message. <code>TRUE</code> means queues created in the table can have multiple consumers for each message.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r7c1-t3" headers="r1c1-t3"><code>message_grouping</code></td>
<td class="cellalignment1002" headers="r7c1-t3 r1c2-t3"><a id="sthref595"></a><a id="sthref596"></a>This optional parameter specifies whether messages are grouped or not. The default <code>NONE</code> means each message is treated individually. <code>TRANSACTIONAL</code> means all messages enqueued in one transaction are considered part of the same group and can be dequeued as a group of related messages.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r8c1-t3" headers="r1c1-t3"><code>comment</code></td>
<td class="cellalignment1002" headers="r8c1-t3 r1c2-t3"><a id="sthref597"></a><a id="sthref598"></a>This optional parameter is a user-specified description of the queue table. This user comment is added to the queue catalog.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r9c1-t3" headers="r1c1-t3"><code>primary_instance</code></td>
<td class="cellalignment1002" headers="r9c1-t3 r1c2-t3"><a id="sthref599"></a><a id="sthref600"></a>This optional parameter specifies the primary owner of the queue table. Queue monitor scheduling and propagation for the queues in the queue table are done in this instance. The default value <code>0</code> means queue monitor scheduling and propagation is done in any available instance.
<p>You can specify and modify this parameter only if <code>compatible</code> is <code>8.1</code> or higher.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r10c1-t3" headers="r1c1-t3"><code>secondary_instance</code></td>
<td class="cellalignment1002" headers="r10c1-t3 r1c2-t3"><a id="sthref601"></a><a id="sthref602"></a>This optional parameter specifies the owner of the queue table if the primary instance is not available. The default value <code>0</code> means that the queue table will fail over to any available instance.
<p>You can specify and modify this parameter only if <code>primary_instance</code> is also specified and <code>compatible</code> is <code>8.1</code> or higher.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r11c1-t3" headers="r1c1-t3"><code>compatible</code></td>
<td class="cellalignment1002" headers="r11c1-t3 r1c2-t3"><a id="sthref603"></a><a id="sthref604"></a>This optional parameter specifies the lowest database version with which the queue table is compatible. The possible values are <code>8.0</code>, <code>8.1</code>, and <code>10.0</code>. If the database is in 10.1-compatible mode, then the default value is <code>10.0</code>. If the database is in 8.1-compatible or 9.2-compatible mode, then the default value is <code>8.1</code>. If the database is in 8.0-compatible mode, then the default value is <code>8.0</code>. The <code>8.0</code> value is deprecated in Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2).
<p>For more information on compatibility, see <a href="manage.htm#BABCGCHJ">&#34;Oracle Database Advanced Queuing Compatibility Parameters&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r12c1-t3" headers="r1c1-t3"><code>secure</code></td>
<td class="cellalignment1002" headers="r12c1-t3 r1c2-t3"><a id="sthref605"></a><a id="sthref606"></a><a id="sthref607"></a><a id="sthref608"></a>This optional parameter must be set to <code>TRUE</code> if you want to use the queue table for secure queues. Secure queues are queues for which AQ agents must be associated explicitly with one or more database users who can perform queue operations, such as enqueue and dequeue. The owner of a secure queue can perform all queue operations on the queue, but other users cannot unless they are configured as secure queue users</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p class="subhead1"><a id="CHDHFDJG"></a><a id="ADQUE2658"></a><a id="sthref609"></a>Payload Type</p>
<p>To specify the payload type as an object type, you must define the object type.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have created synonyms on object types, then you cannot use them in <code>DBMS_AQADM.CREATE_QUEUE_TABLE</code>. Error ORA-24015 results.</div>
<p><a href="glossary.htm#CBAEFCCD"><span class="xrefglossterm">CLOB</span></a>, <a href="glossary.htm#CBABJFDH"><span class="xrefglossterm">BLOB</span></a>, and <a href="glossary.htm#CBADIIIF"><span class="xrefglossterm">BFILE</span></a> objects are valid in an Oracle Database Advanced Queuing <a href="glossary.htm#CBACDHGB"><span class="xrefglossterm">message</span></a>. You can propagate these object types using Oracle Database Advanced Queuing <a href="glossary.htm#CBADIFJC"><span class="xrefglossterm">propagation</span></a> with Oracle software since Oracle8<span class="italic">i</span> release 8.1.x. To <a href="glossary.htm#CBAJCGCH"><span class="xrefglossterm">enqueue</span></a> an <a href="glossary.htm#CBAGCEHG"><span class="xrefglossterm">object type</span></a> that has a <a href="glossary.htm#CBAEGFFF"><span class="xrefglossterm">LOB</span></a>, you must first set the <code>LOB_attribute</code> to <code>EMPTY_BLOB</code>() and perform the enqueue. You can then select the <code>LOB</code> locator that was generated from the queue table&#39;s view and use the standard <code>LOB</code> operations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Payloads containing LOBs require users to grant explicit <code>Select</code>, <code>Insert</code> and <code>Update</code> privileges on the queue table for doing enqueues and dequeues.</div>
<p class="subhead1"><a id="CHDFEICD"></a><a id="ADQUE2659"></a><a id="sthref610"></a>Storage Clause</p>
<p>The <code>storage_clause</code> argument can take any text that can be used in a standard <code>CREATE TABLE</code> <code>storage_clause</code> argument.</p>
<p>Once you pick the tablespace, any <a href="glossary.htm#CBAFGGGG"><span class="xrefglossterm">index-organized table</span></a> (IOT) or index created for that queue table goes to the specified tablespace. You do not currently have a choice to split them between different tablespaces.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The qmon processes in the 11g Release 2 (11.2) perform auto-coalesce of the the dequeue IOT, history IOT, and the time manager IOT. It is not required to manually coalesce AQ IOTs. However, it can be performed as a workaround if a performance degradation is observed.
<p>If you choose to create the queue table in a locally managed tablespace or with freelist groups &gt; 1, then Queue Monitor Coordinator will skip the cleanup of those blocks. This can cause a decline in performance over time.</p>
<p>Coalesce the dequeue IOT by running</p>
<pre>ALTER TABLE AQ$_<span class="italic">queue_table</span>_I COALESCE;
</pre>
<p>You can run this command while there are concurrent dequeuers and enqueuers of the queue, but these concurrent users might see a slight decline in performance while the command is running.</p>
</div>
<p class="subhead1"><a id="CHDFDHBE"></a><a id="ADQUE2660"></a><a id="sthref611"></a>Sort Key</p>
<p>The sort_list parameter determines the order in which messages are dequeued. You cannot change the message sort order after you have created the queue table. Your choices are:</p>
<ul>
<li>
<p><code>ENQ_TIME</code></p>
</li>
<li>
<p><code>ENQ_TIME,PRIORITY</code></p>
</li>
<li>
<p><code>PRIORITY</code></p>
</li>
<li>
<p><code>PRIORITY,ENQ_TIME</code></p>
</li>
<li>
<p><code>PRIORITY,COMMIT_TIME</code></p>
</li>
<li>
<p><code>COMMIT_TIME</code></p>
</li>
</ul>
<p>The <code>COMMIT_TIME</code> choice is a new feature in Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2). If it is specified, then any queue that uses the queue table is a <a href="glossary.htm#CHDDDEGD"><span class="xrefglossterm">commit-time queue</span></a>, and Oracle Database Advanced Queuing computes an <a href="glossary.htm#CHDFDHAF"><span class="xrefglossterm">approximate CSCN</span></a> for each enqueued message when its transaction commits.</p>
<p><a id="sthref612"></a>If you specify <code>COMMIT_TIME</code> as the sort key, then you must also specify the following:</p>
<ul>
<li>
<p><code>multiple_consumers</code> = <code>TRUE</code></p>
</li>
<li>
<p><code>message_grouping</code> = <code>TRANSACTIONAL</code></p>
</li>
<li>
<p><code>compatible</code> = <code>8.1</code> or higher</p>
</li>
</ul>
<p>Commit-time ordering is useful when transactions are interdependent or when browsing the messages in a queue must yield consistent results.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>&#34;Commit-Time Queues&#34; in <a class="olink STRMS003" href="../STRMS/strms_prop.htm#STRMS003"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
<li>
<p><a href="aq_intro.htm#CHDCEDDG">&#34;Dequeue Modes&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead1"><a id="CHDBDFAJ"></a><a id="ADQUE2661"></a><a id="sthref613"></a><a id="sthref614"></a><a id="sthref615"></a><a id="sthref616"></a><a id="sthref617"></a>Other Tables and Views</p>
<p>The following objects are created at table creation time:</p>
<ul>
<li>
<p><code>AQ$</code><code><span class="codeinlineitalic">_queue_table_name</span></code>, a read-only view which is used by Oracle Database Advanced Queuing applications for querying <a href="glossary.htm#CBAHIIAB"><span class="xrefglossterm">queue</span></a> data</p>
</li>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_E</code>, the default <a href="glossary.htm#CBAHHGJI"><span class="xrefglossterm">exception queue</span></a> associated with the queue table</p>
</li>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_I</code>, an index or an <a href="glossary.htm#CBAFGGGG"><span class="xrefglossterm">index-organized table</span></a> (IOT) in the case of multiple <a href="glossary.htm#CBAJDFJA"><span class="xrefglossterm">consumer</span></a> queues for dequeue operations</p>
</li>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_T</code>, an index for the queue monitor operations</p>
</li>
</ul>
<p>The following objects are created only for 8.1-compatible multiconsumer queue tables:</p>
<ul>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_S</code>, a table for storing information about subscribers</p>
</li>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_H</code>, an index organized table (IOT) for storing dequeue history data</p>
</li>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_L</code>, dequeue log table, used for storing message identifiers of committed dequeue operations on the queue</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database Advanced Queuing does not support the use of triggers on these internal AQ queue tables.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a></div>
<p>If you do not specify a schema, then you default to the user&#39;s schema.</p>
<p>If <code>GLOBAL_TOPIC_ENABLED</code> <code>=</code> <code>TRUE</code> when a queue table is created, then a corresponding <a href="glossary.htm#CBAIIHDD"><span class="xrefglossterm">Lightweight Directory Access Protocol</span></a> (LDAP) entry is also created.</p>
<p><a id="sthref618"></a><a id="sthref619"></a><a id="sthref620"></a><a id="sthref621"></a>If the queue type is <code>ANYDATA</code>, then a <a href="glossary.htm#CBAEHBDD"><span class="xrefglossterm">buffered queue</span></a> and two additional objects are created. The buffered queue stores logical change records created by a capture process. The logical change records are staged in a memory buffer associated with the queue; they are not ordinarily written to disk.</p>
<p>If they have been staged in the buffer for a period of time without being dequeued, or if there is not enough space in memory to hold all of the captured events, then they are spilled to:</p>
<ul>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_P</code>, a table for storing the captured events that spill from memory</p>
</li>
<li>
<p><code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_D</code>, a table for storing information about the propagations and apply processes that are eligible for processing each event</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Chapter 3, &#34;Streams Staging and Propagation&#34; in <a class="olink STRMS003" href="../STRMS/strms_prop.htm#STRMS003"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
<p class="subhead1"><a id="ADQUE2662"></a>Examples</p>
<p>The following examples assume you are in a SQL*Plus testing environment. In <a href="#CHDECGGJ">Example 8-1</a>, you create users in preparation for the other examples in this chapter. For this example, you must connect as a user with administrative privileges. For most of the other examples in this chapter, you can connect as user <code>test_adm</code>. A few examples must be run as <code>test</code> with <code>EXECUTE</code> privileges on <code>DBMS_AQADM</code>.</p>
<div id="ADQUE2663" class="example">
<p class="titleinexample"><a id="CHDECGGJ"></a>Example 8-1 Setting Up AQ Administrative Users</p>
<pre>CREATE USER test_adm IDENTIFIED BY test_adm DEFAULT TABLESPACE example;
GRANT DBA, CREATE ANY TYPE TO test_adm; 
GRANT EXECUTE ON DBMS_AQADM TO test_adm;
GRANT aq_administrator_role TO test_adm;
BEGIN
   DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE(
      privilege          =&gt;    &#39;MANAGE_ANY&#39;, 
      grantee            =&gt;    &#39;test_adm&#39;, 
      admin_option       =&gt;     FALSE);
END;
/
CREATE USER test IDENTIFIED BY test;
GRANT DBA TO test; 
GRANT EXECUTE ON dbms_aq TO test;
</pre></div>
<!-- class="example" -->
<div id="ADQUE2664" class="example">
<p class="titleinexample"><a id="CHDJIFCF"></a>Example 8-2 Setting Up AQ Administrative Example Types</p>
<pre>CREATE TYPE test.message_typ AS object(
   sender_id              NUMBER,
   subject                VARCHAR2(30),
   text                   VARCHAR2(1000));
/
CREATE TYPE test.msg_table AS TABLE OF test.message_typ;
/
CREATE TYPE test.order_typ AS object(
   custno                 NUMBER,
   item                   VARCHAR2(30),
   description            VARCHAR2(1000));
/
CREATE TYPE test.lob_typ AS object(
   id                     NUMBER, 
   subject                VARCHAR2(100), 
   data                   BLOB, 
   trailer                NUMBER);
/ 
</pre></div>
<!-- class="example" -->
<div id="ADQUE2665" class="example">
<p class="titleinexample"><a id="CHDCBGCF"></a>Example 8-3 Creating a Queue Table for Messages of Object Type</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE(
      queue_table            =&gt; &#39;test.obj_qtab&#39;,
      queue_payload_type     =&gt; &#39;test.message_typ&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2666" class="example">
<p class="titleinexample"><a id="CHDCIABE"></a>Example 8-4 Creating a Queue Table for Messages of RAW Type</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE( 
      queue_table            =&gt; &#39;test.raw_qtab&#39;, 
      queue_payload_type     =&gt; &#39;RAW&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2667" class="example">
<p class="titleinexample"><a id="CHDBEADD"></a>Example 8-5 Creating a Queue Table for Messages of LOB Type</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE(
      queue_table            =&gt; &#39;test.lob_qtab&#39;,
      queue_payload_type     =&gt; &#39;test.lob_typ&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2668" class="example">
<p class="titleinexample"><a id="sthref622"></a>Example 8-6 Creating a Queue Table for Messages of XMLType</p>
<pre>BEGIN
  DBMS_AQADM.CREATE_QUEUE_TABLE(
     queue_table         =&gt; &#39;test.xml_qtab&#39;, 
     queue_payload_type  =&gt; &#39;SYS.XMLType&#39;,
     multiple_consumers  =&gt; TRUE, 
     compatible          =&gt; &#39;8.1&#39;,
     comment             =&gt; &#39;Overseas Shipping multiconsumer orders queue table&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2669" class="example">
<p class="titleinexample"><a id="CHDEAEID"></a>Example 8-7 Creating a Queue Table for Grouped Messages</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE( 
      queue_table          =&gt; &#39;test.group_qtab&#39;,
      queue_payload_type   =&gt; &#39;test.message_typ&#39;,
      message_grouping     =&gt; DBMS_AQADM.TRANSACTIONAL);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2670" class="example">
<p class="titleinexample"><a id="CHDFEDEC"></a>Example 8-8 Creating Queue Tables for Prioritized Messages and Multiple Consumers</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE(
      queue_table            =&gt; &#39;test.priority_qtab&#39;, 
      queue_payload_type     =&gt; &#39;test.order_typ&#39;,
      sort_list              =&gt; &#39;PRIORITY,ENQ_TIME&#39;, 
      multiple_consumers     =&gt; TRUE);
   DBMS_AQADM.CREATE_QUEUE_TABLE(
      queue_table            =&gt; &#39;test.multiconsumer_qtab&#39;,
      queue_payload_type     =&gt; &#39;test.message_typ&#39;,
      sort_list              =&gt; &#39;PRIORITY,ENQ_TIME&#39;, 
      multiple_consumers     =&gt; TRUE);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2671" class="example">
<p class="titleinexample"><a id="sthref623"></a>Example 8-9 <a id="sthref624"></a>Creating a Queue Table with Commit-Time Ordering</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE(
      queue_table            =&gt; &#39;test.commit_time_qtab&#39;,
      queue_payload_type     =&gt; &#39;test.message_typ&#39;,
      sort_list              =&gt; &#39;COMMIT_TIME&#39;, 
      multiple_consumers     =&gt; TRUE, 
      message_grouping       =&gt; DBMS_AQADM.TRANSACTIONAL,
      compatible             =&gt; &#39;10.0&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2672" class="example">
<p class="titleinexample"><a id="sthref625"></a>Example 8-10 Creating an 8.1-Compatible Queue Table for Multiple Consumers</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE(
      queue_table            =&gt; &#39;test.multiconsumer_81_qtab&#39;,
      queue_payload_type     =&gt; &#39;test.message_typ&#39;,
      multiple_consumers     =&gt;  TRUE,
      compatible             =&gt; &#39;8.1&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2673" class="example">
<p class="titleinexample"><a id="CHDCJJIB"></a>Example 8-11 Creating a Queue Table in a Specified Tablespace</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE( 
      queue_table        =&gt; &#39;test.example_qtab&#39;,
      queue_payload_type =&gt; &#39;test.message_typ&#39;,
      storage_clause     =&gt; &#39;tablespace example&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2674" class="example">
<p class="titleinexample"><a id="CHDJIEHH"></a>Example 8-12 Creating a Queue Table with Freelists or Freelist Groups</p>
<pre>BEGIN 
   DBMS_AQADM.CREATE_QUEUE_TABLE( 
      queue_table            =&gt; &#39;test.freelist_qtab&#39;, 
      queue_payload_type     =&gt; &#39;RAW&#39;, 
      storage_clause         =&gt; &#39;STORAGE (FREELISTS 4 FREELIST GROUPS 2)&#39;,
      compatible             =&gt; &#39;8.1&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1005956"></a>
<div id="ADQUE0802" class="sect2">
<h3 class="sect2"><a id="sthref626"></a><a id="sthref627"></a><a id="sthref628"></a>Altering a Queue Table</h3>
<pre>DBMS_AQADM.ALTER_QUEUE_TABLE (
   queue_table          IN   VARCHAR2, 
   comment              IN   VARCHAR2       DEFAULT NULL,
   primary_instance     IN   BINARY_INTEGER DEFAULT NULL, 
   secondary_instance   IN   BINARY_INTEGER DEFAULT NULL);
</pre>
<p>This procedure alters the existing properties of a queue table.</p>
<div class="inftblhruleinformal">
<table class="cellalignment1000" title="Parameter Descriptions" summary="The first column is the name of a parameter. The second column describes it." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t11">Parameter</th>
<th class="cellalignment1001" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t11" headers="r1c1-t11"><code>queue_table</code></td>
<td class="cellalignment1002" headers="r2c1-t11 r1c2-t11">This required parameter specifies the queue table name.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t11" headers="r1c1-t11"><code>comment</code></td>
<td class="cellalignment1002" headers="r3c1-t11 r1c2-t11">This optional parameter is a user-specified description of the queue table. This user comment is added to the queue catalog.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r4c1-t11" headers="r1c1-t11"><code>primary_instance</code></td>
<td class="cellalignment1002" headers="r4c1-t11 r1c2-t11">This optional parameter specifies the primary owner of the queue table. Queue monitor scheduling and propagation for the queues in the queue table are done in this instance.
<p>You can specify and modify this parameter only if <code>compatible</code> is <code>8.1</code> or higher.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r5c1-t11" headers="r1c1-t11"><code>secondary_instance</code></td>
<td class="cellalignment1002" headers="r5c1-t11 r1c2-t11">This optional parameter specifies the owner of the queue table if the primary instance is not available.
<p>You can specify and modify this parameter only if <code>primary_instance</code> is also specified and <code>compatible</code> is <code>8.1</code> or higher.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
In general, DDL statements are not supported on queue tables and may even render them inoperable. For example, issuing an <code>ALTER TABLE</code> ... <code>SHRINK</code> statement against a queue table results in an internal error, and all subsequent attempts to use the queue table will also result in errors. Oracle recommends that you not use DDL statements on queue tables.</div>
<p>If <code>GLOBAL_TOPIC_ENABLED = TRUE</code> when a queue table is modified, then a corresponding LDAP entry is also altered.</p>
<div id="ADQUE2675" class="example">
<p class="titleinexample"><a id="CHDBCFGC"></a>Example 8-13 Altering a Queue Table by Changing the Primary and Secondary Instances</p>
<pre>BEGIN
   DBMS_AQADM.ALTER_QUEUE_TABLE( 
      queue_table          =&gt; &#39;test.obj_qtab&#39;, 
      primary_instance     =&gt; 3, 
      secondary_instance   =&gt; 2);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2676" class="example">
<p class="titleinexample"><a id="sthref629"></a>Example 8-14 Altering a Queue Table by Changing the Comment</p>
<pre>BEGIN
   DBMS_AQADM.ALTER_QUEUE_TABLE( 
      queue_table          =&gt; &#39;test.obj_qtab&#39;, 
      comment              =&gt; &#39;revised usage for queue table&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006026"></a>
<div id="ADQUE2677" class="sect2">
<h3 class="sect2"><a id="sthref630"></a><a id="sthref631"></a><a id="sthref632"></a>Dropping a Queue Table</h3>
<pre>DBMS_AQADM.DROP_QUEUE_TABLE(
   queue_table       IN    VARCHAR2,
   force             IN    BOOLEAN DEFAULT FALSE,
</pre>
<p>This procedure drops an existing queue table. You must stop and drop all the queues in a queue table before the queue table can be dropped. You must do this explicitly if <code>force</code> is set to <code>FALSE</code>. If <code>force</code> is set to <code>TRUE</code>, then all queues in the queue table and their associated propagation schedules are dropped automatically.</p>
<p>If <code>GLOBAL_TOPIC_ENABLED = TRUE</code> when a queue table is dropped, then a corresponding LDAP entry is also dropped.</p>
<div id="ADQUE2678" class="example">
<p class="titleinexample"><a id="sthref633"></a>Example 8-15 Dropping a Queue Table</p>
<pre>BEGIN
   DBMS_AQADM.DROP_QUEUE_TABLE(
      queue_table        =&gt; &#39;test.obj_qtab&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2679" class="example">
<p class="titleinexample"><a id="sthref634"></a>Example 8-16 Dropping a Queue Table with force Option</p>
<pre>BEGIN
   DBMS_AQADM.DROP_QUEUE_TABLE( 
      queue_table        =&gt; &#39;test.raw_qtab&#39;, 
      force              =&gt; TRUE); 
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BAJFEDGG"></a>
<div id="ADQUE0812" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref635"></a><a id="sthref636"></a><a id="sthref637"></a>Purging a Queue Table</h3>
<pre>DBMS_AQADM.PURGE_QUEUE_TABLE(
   queue_table        IN   VARCHAR2,
   purge_condition    IN   VARCHAR2,
   purge_options      IN   aq$_purge_options_t);
</pre>
<p>This procedure purges messages from a queue table. It has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment1000" title="Parameter Descriptions" summary="The first column is the name of a parameter. The second column describes it." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t13">Parameter</th>
<th class="cellalignment1001" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t13" headers="r1c1-t13"><code>queue_table</code></td>
<td class="cellalignment1002" headers="r2c1-t13 r1c2-t13">This required parameter specifies the queue table name.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t13" headers="r1c1-t13"><code>purge_condition</code></td>
<td class="cellalignment1002" headers="r3c1-t13 r1c2-t13"><a id="sthref638"></a>The purge condition must be in the format of a SQL <code>WHERE</code> clause, and it is case-sensitive. The condition is based on the columns of <code>aq$</code><code><span class="codeinlineitalic">queue_table_name</span></code> view. Each column name in the purge condition must be prefixed with &#34;<code>qtview.</code>&#34;
<p>All purge conditions supported for persistent messages are also supported for buffered messages.</p>
<p>To purge all queues in a queue table, set <code>purge_condition</code> to either <code>NULL</code> (a bare null word, no quotes) or <code>&#39;&#39;</code> (two single quotes).</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r4c1-t13" headers="r1c1-t13"><code>purge_options</code></td>
<td class="cellalignment1002" headers="r4c1-t13 r1c2-t13"><a id="sthref639"></a><a id="sthref640"></a>Type <code>aq$_purge_options_t</code> contains a <code>block</code> parameter. If <code>block</code> is <code>TRUE</code>, then an exclusive lock on all the queues in the queue table is held while purging the queue table. This will cause concurrent enqueuers and dequeuers to block while the queue table is purged. The purge call always succeeds if <code>block</code> is <code>TRUE</code>. The default for <code>block</code> is <code>FALSE</code>. This will not block enqueuers and dequeuers, but it can cause the purge to fail with an error during high concurrency times.
<p>Type <code>aq$_purge_options_t</code> also contains a <code>delivery_mode</code> parameter. If it is the default <code>PERSISTENT</code>, then only persistent messages are purged. If it is set to <code>BUFFERED</code>, then only buffered messages are purged. If it is set to <code>PERSISTENT_OR_BUFFERED</code>, then both types are purged.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>A trace file is generated in the udump destination when you run this procedure. It details what the procedure is doing. The procedure commits after it has processed all the messages.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;DBMS_AQADM&#34; in <a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on <code>DBMS_AQADM.PURGE_QUEUE_TABLE</code></div>
<div id="ADQUE2680" class="example">
<p class="titleinexample"><a id="sthref641"></a>Example 8-17 Purging All Messages in a Queue Table</p>
<pre>DECLARE
po dbms_aqadm.aq$_purge_options_t;
BEGIN
   po.block := FALSE;
   DBMS_AQADM.PURGE_QUEUE_TABLE(
     queue_table     =&gt; &#39;test.obj_qtab&#39;,
     purge_condition =&gt; NULL,
     purge_options   =&gt; po);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2681" class="example">
<p class="titleinexample"><a id="sthref642"></a>Example 8-18 Purging All Messages in a Named Queue</p>
<pre>DECLARE
po dbms_aqadm.aq$_purge_options_t;
BEGIN
   po.block := TRUE;
   DBMS_AQADM.PURGE_QUEUE_TABLE(
     queue_table     =&gt; &#39;test.obj_qtab&#39;,
     purge_condition =&gt; &#39;qtview.queue = &#39;&#39;TEST.OBJ_QUEUE&#39;&#39;&#39;,
     purge_options   =&gt; po);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2682" class="example">
<p class="titleinexample"><a id="sthref643"></a>Example 8-19 Purging All PROCESSED Messages in a Named Queue</p>
<pre>DECLARE
po dbms_aqadm.aq$_purge_options_t;
BEGIN
   po.block := TRUE;
   DBMS_AQADM.PURGE_QUEUE_TABLE(
     queue_table     =&gt; &#39;test.obj_qtab&#39;,
     purge_condition =&gt; &#39;qtview.queue = &#39;&#39;TEST.OBJ_QUEUE&#39;&#39; 
                         and qtview.msg_state = &#39;&#39;PROCESSED&#39;&#39;&#39;,
     purge_options   =&gt; po);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2683" class="example">
<p class="titleinexample"><a id="CHDJJABB"></a>Example 8-20 Purging All Messages in a Named Queue and for a Named Consumer</p>
<pre>DECLARE
po dbms_aqadm.aq$_purge_options_t;
BEGIN
   po.block := TRUE;
   DBMS_AQADM.PURGE_QUEUE_TABLE(
     queue_table     =&gt; &#39;test.multiconsumer_81_qtab&#39;,
     purge_condition =&gt; &#39;qtview.queue = &#39;&#39;TEST.MULTICONSUMER_81_QUEUE&#39;&#39; 
                         and qtview.consumer_name = &#39;&#39;PAYROLL_APP&#39;&#39;&#39;,
     purge_options   =&gt; po);
END;
/
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Some purge conditions, such as <code>consumer_name</code> in <a href="#CHDJJABB">Example 8-20</a> and <code>sender_name</code> in <a href="#CHDCAIGE">Example 8-21</a>, are supported only in 8.1-compatible queue tables. For more information, see <a href="aq_views.htm#g1009814">Table 9-1, &#34;AQ$&lt;Queue_Table_Name&gt; View&#34;</a>.</div>
<div id="ADQUE2684" class="example">
<p class="titleinexample"><a id="CHDCAIGE"></a>Example 8-21 Purging All Messages from a Named Sender</p>
<pre>DECLARE
po dbms_aqadm.aq$_purge_options_t;
BEGIN
   po.block := TRUE;
   DBMS_AQADM.PURGE_QUEUE_TABLE(
     queue_table     =&gt; &#39;test.multiconsumer_81_qtab&#39;,
     purge_condition =&gt; &#39;qtview.sender_name = &#39;&#39;TEST.OBJ_QUEUE&#39;&#39;&#39;,
     purge_options   =&gt; po);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008715"></a>
<div id="ADQUE2685" class="sect2">
<h3 class="sect2"><a id="sthref644"></a><a id="sthref645"></a><a id="sthref646"></a><a id="sthref647"></a>Migrating a Queue Table</h3>
<pre>DBMS_AQADM.MIGRATE_QUEUE_TABLE(
   queue_table   IN   VARCHAR2,
   compatible    IN   VARCHAR2);
</pre>
<p>This procedure migrates a queue table from 8.0, 8.1, or 10.0 to 8.0, 8.1, or 10.0. Only the owner of the queue table can migrate it.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
This procedure requires that the <code>EXECUTE</code> privilege on <code>DBMS_AQADM</code> be granted to the queue table owner, who is probably an ordinary queue user. If you do not want ordinary queue users to be able to create and drop queues and queue tables, add and delete subscribers, and so forth, then you must revoke the <code>EXECUTE</code> privilege as soon as the migration is done.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Queues created in a queue table with <code>compatible</code> set to <code>8.0</code> (referred to in this guide as 8.0-style queues) are deprecated in Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2). Oracle recommends that any new queues you create be 8.1-style or newer and that you migrate existing 8.0-style queues at your earliest convenience.</div>
<p>If a schema was created by an import of an export dump from a lower release or has Oracle Database Advanced Queuing queues upgraded from a lower release, then attempts to drop it with <code>DROP USER CASCADE</code> will fail with ORA-24005. To drop such schemas:</p>
<ol>
<li>
<p>Event 10851 should be set to level 1.</p>
</li>
<li>
<p>Drop all tables of the form <code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_NR</code> from the schema.</p>
</li>
<li>
<p>Turn off event 10851.</p>
</li>
<li>
<p>Drop the schema.</p>
</li>
</ol>
<div id="ADQUE2686" class="example">
<p class="titleinexample"><a id="sthref648"></a>Example 8-22 Upgrading a Queue Table from 8.1-Compatible to 10.0-Compatible</p>
<pre>BEGIN
   DBMS_AQADM.MIGRATE_QUEUE_TABLE (
           queue_table    =&gt; &#39;test.xml_qtab&#39;, 
           compatible     =&gt; &#39;10.0&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008392"></a>
<div id="ADQUE2687" class="sect1">
<h2 class="sect1"><a id="sthref649"></a><a id="sthref650"></a>Managing Queues</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1006091">Creating a Queue</a></p>
</li>
<li>
<p><a href="#i1006297">Altering a Queue</a></p>
</li>
<li>
<p><a href="#i1008469">Starting a Queue</a></p>
</li>
<li>
<p><a href="#i1008523">Stopping a Queue</a></p>
</li>
<li>
<p><a href="#i1006355">Dropping a Queue</a></p>
</li>
</ul>
<a id="i1006091"></a>
<div id="ADQUE0803" class="sect2">
<h3 class="sect2"><a id="sthref651"></a><a id="sthref652"></a><a id="sthref653"></a>Creating a Queue</h3>
<pre>DBMS_AQADM.CREATE_QUEUE(
   queue_name          IN       VARCHAR2,
   queue_table         IN       VARCHAR2,
   queue_type          IN       BINARY_INTEGER DEFAULT NORMAL_QUEUE,
   max_retries         IN       NUMBER         DEFAULT NULL,
   retry_delay         IN       NUMBER         DEFAULT 0,
   retention_time      IN       NUMBER         DEFAULT 0,
   dependency_tracking IN       BOOLEAN        DEFAULT FALSE,
   comment             IN       VARCHAR2       DEFAULT NULL,
</pre>
<p>This procedure creates a queue. It has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment1000" title="Parameter Descriptions" summary="The first column is the name of a parameter. The second column describes it." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t18">Parameter</th>
<th class="cellalignment1001" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t18" headers="r1c1-t18"><code>queue_name</code></td>
<td class="cellalignment1002" headers="r2c1-t18 r1c2-t18"><a id="sthref654"></a><a id="sthref655"></a><a id="sthref656"></a><a id="sthref657"></a><a id="sthref658"></a><a id="sthref659"></a>This required parameter specifies the name of the new queue.
<p>Mixed case (upper and lower case together) queue names are supported if database compatibility is 10.0, but the names must be enclosed in double quote marks. So <code>abc.efg</code> means the schema is <code>ABC</code> and the name is <code>EFG</code>, but <code>&#34;abc&#34;.&#34;efg&#34;</code> means the schema is <code>abc</code> and the name is <code>efg</code>.</p>
<p>User-generated queue names must not be longer than 24 characters. If you attempt to create a queue with a longer name, error ORA-24019 results. Queue names generated by Oracle Database Advanced Queuing, such as those listed in <a href="#CHDBDFAJ">&#34;Other Tables and Views&#34;</a>, cannot be longer than 30 characters.</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t18" headers="r1c1-t18"><code>queue_table</code></td>
<td class="cellalignment1002" headers="r3c1-t18 r1c2-t18"><a id="sthref660"></a><a id="sthref661"></a>This required parameter specifies the queue table in which the queue is created.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r4c1-t18" headers="r1c1-t18"><code>queue_type</code></td>
<td class="cellalignment1002" headers="r4c1-t18 r1c2-t18"><a id="sthref662"></a><a id="sthref663"></a>This parameter specifies what type of queue to create. The default <code>NORMAL_QUEUE</code> produces a normal queue. <code>EXCEPTION_QUEUE</code> produces an exception queue.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r5c1-t18" headers="r1c1-t18"><code>max_retries</code></td>
<td class="cellalignment1002" headers="r5c1-t18 r1c2-t18"><a id="sthref664"></a><a id="sthref665"></a>This parameter limits the number of times a dequeue with the <code>REMOVE</code> mode can be attempted on a message. The maximum value of <code>max_retries</code> is 2**31 -1.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r6c1-t18" headers="r1c1-t18"><code>retry_delay</code></td>
<td class="cellalignment1002" headers="r6c1-t18 r1c2-t18"><a id="sthref666"></a><a id="sthref667"></a>This parameter specifies the number of seconds after which this message is scheduled for processing again after an application rollback. The default is 0, which means the message can be retried as soon as possible. This parameter has no effect if <code>max_retries</code> is set to 0.
<p>This parameter is supported for single-consumer queues and 8.1-style or higher multiconsumer queues but not for 8.0-style multiconsumer queues, which are deprecated in Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2).</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r7c1-t18" headers="r1c1-t18"><code>retention_time</code></td>
<td class="cellalignment1002" headers="r7c1-t18 r1c2-t18"><a id="sthref668"></a><a id="sthref669"></a>This parameter specifies the number of seconds a message is retained in the queue table after being dequeued from the queue. When <code>retention_time</code> expires, messages are removed by the time manager process. <code>INFINITE</code> means the message is retained forever. The default is 0, no retention.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r8c1-t18" headers="r1c1-t18"><code>dependency_tracking</code></td>
<td class="cellalignment1002" headers="r8c1-t18 r1c2-t18">This parameter is reserved for future use. <code>FALSE</code> is the default. <code>TRUE</code> is not permitted in this release.</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r9c1-t18" headers="r1c1-t18"><code>comment</code></td>
<td class="cellalignment1002" headers="r9c1-t18 r1c2-t18"><a id="sthref670"></a><a id="sthref671"></a>This optional parameter is a user-specified description of the queue. This user comment is added to the queue catalog.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>All queue names must be unique within a <a href="glossary.htm#CBACBEEF"><span class="xrefglossterm">schema</span></a>. Once a queue is created with <code>CREATE_QUEUE</code>, it can be enabled by calling <code>START_QUEUE</code>. By default, the queue is created with both enqueue and dequeue disabled. To view retained messages, you can either dequeue by message ID or use SQL. If <code>GLOBAL_TOPIC_ENABLED = TRUE</code> when a queue is created, then a corresponding LDAP entry is also created.</p>
<p>The following examples (<a href="#CHDEFAFG">Example 8-23</a> through <a href="#CHDIDCCG">Example 8-30</a>) use data structures created in <a href="#CHDECGGJ">Example 8-1</a> through <a href="#CHDJIEHH">Example 8-12</a>.</p>
<div id="ADQUE2688" class="example">
<p class="titleinexample"><a id="CHDEFAFG"></a>Example 8-23 Creating a Queue for Messages of Object Type</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE(
      queue_name         =&gt;  &#39;test.obj_queue&#39;,
      queue_table        =&gt;  &#39;test.obj_qtab&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2689" class="example">
<p class="titleinexample"><a id="CHDCAICF"></a>Example 8-24 Creating a Queue for Messages of RAW Type</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE( 
      queue_name          =&gt; &#39;test.raw_queue&#39;, 
      queue_table         =&gt; &#39;test.raw_qtab&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2690" class="example">
<p class="titleinexample"><a id="CHDHEAID"></a>Example 8-25 Creating a Queue for Messages of LOB Type</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE( 
      queue_name          =&gt; &#39;test.lob_queue&#39;, 
      queue_table         =&gt; &#39;test.lob_qtab&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2691" class="example">
<p class="titleinexample"><a id="CHDHEACA"></a>Example 8-26 Creating a Queue for Grouped Messages</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE( 
      queue_name          =&gt; &#39;test.group_queue&#39;, 
      queue_table         =&gt; &#39;test.group_qtab&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2692" class="example">
<p class="titleinexample"><a id="CHDGCFHI"></a>Example 8-27 Creating a Queue for Prioritized Messages</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE(
      queue_name         =&gt; &#39;test.priority_queue&#39;, 
      queue_table        =&gt; &#39;test.priority_qtab&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2693" class="example">
<p class="titleinexample"><a id="CHDIAEEH"></a>Example 8-28 Creating a Queue for Prioritized Messages and Multiple Consumers</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE(
      queue_name         =&gt; &#39;test.multiconsumer_queue&#39;,
      queue_table        =&gt; &#39;test.multiconsumer_qtab&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2694" class="example">
<p class="titleinexample"><a id="CHDCCJEG"></a>Example 8-29 Creating a Queue to Demonstrate Propagation</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE(
      queue_name        =&gt; &#39;test.another_queue&#39;,
      queue_table       =&gt; &#39;test.multiconsumer_qtab&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2695" class="example">
<p class="titleinexample"><a id="CHDIDCCG"></a>Example 8-30 Creating an 8.1-Style Queue for Multiple Consumers</p>
<pre>BEGIN
   DBMS_AQADM.CREATE_QUEUE( 
      queue_name         =&gt; &#39;test.multiconsumer_81_queue&#39;, 
      queue_table        =&gt; &#39;test.multiconsumer_81_qtab&#39;); 
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006297"></a>
<div id="ADQUE0804" class="sect2">
<h3 class="sect2"><a id="sthref672"></a><a id="sthref673"></a><a id="sthref674"></a>Altering a Queue</h3>
<pre>DBMS_AQADM.ALTER_QUEUE(
   queue_name        IN    VARCHAR2,
   max_retries       IN    NUMBER   DEFAULT NULL,
   retry_delay       IN    NUMBER   DEFAULT NULL,
   retention_time    IN    NUMBER   DEFAULT NULL,
   comment           IN    VARCHAR2 DEFAULT NULL);
</pre>
<p>This procedure alters existing properties of a queue.</p>
<p>Only <code>max_retries</code>, <code>comment</code>, <code>retry_delay</code>, and <code>retention_time</code> can be altered. To view retained messages, you can either dequeue by message ID or use SQL. If <code>GLOBAL_TOPIC_ENABLED = TRUE</code> when a queue is modified, then a corresponding LDAP entry is also altered.</p>
<p><a href="#i1006325">Example 8-31</a> changes retention time, saving messages for 1 day after dequeuing.</p>
<div id="ADQUE2696" class="example">
<p class="titleinexample"><a id="i1006325"></a>Example 8-31 Altering a Queue by Changing Retention Time</p>
<pre>BEGIN
   DBMS_AQADM.ALTER_QUEUE( 
      queue_name        =&gt; &#39;test.another_queue&#39;, 
      retention_time    =&gt; 86400);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008469"></a>
<div id="ADQUE0805" class="sect2">
<h3 class="sect2"><a id="sthref675"></a><a id="sthref676"></a><a id="sthref677"></a><a id="sthref678"></a><a id="sthref679"></a><a id="sthref680"></a><a id="sthref681"></a>Starting a Queue</h3>
<pre>DBMS_AQADM.START_QUEUE( 
   queue_name      IN     VARCHAR2,
   enqueue         IN     BOOLEAN DEFAULT TRUE,
   dequeue         IN     BOOLEAN DEFAULT TRUE);
</pre>
<p>This procedure enables the specified queue for enqueuing or dequeuing.</p>
<p>After creating a queue, the administrator must use <code>START_QUEUE</code> to enable the queue. The default is to enable it for both enqueue and dequeue. Only dequeue operations are allowed on an exception queue. This operation takes effect when the call completes and does not have any <a href="glossary.htm#CBACAHAA"><span class="xrefglossterm">transactional</span></a> characteristics.</p>
<div id="ADQUE2697" class="example">
<p class="titleinexample"><a id="i1008481"></a>Example 8-32 Starting a Queue with Both Enqueue and Dequeue Enabled</p>
<pre>BEGIN
   DBMS_AQADM.START_QUEUE (
      queue_name         =&gt; &#39;test.obj_queue&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2698" class="example">
<p class="titleinexample"><a id="sthref682"></a>Example 8-33 Starting a Queue for Dequeue Only</p>
<pre>BEGIN
   DBMS_AQADM.START_QUEUE( 
      queue_name         =&gt; &#39;test.raw_queue&#39;, 
      dequeue            =&gt; TRUE, 
      enqueue            =&gt; FALSE); 
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008523"></a>
<div id="ADQUE0806" class="sect2">
<h3 class="sect2"><a id="sthref683"></a><a id="sthref684"></a><a id="sthref685"></a><a id="sthref686"></a><a id="sthref687"></a><a id="sthref688"></a><a id="sthref689"></a>Stopping a Queue</h3>
<pre>DBMS_AQADM.STOP_QUEUE(
   queue_name      IN   VARCHAR2,
   enqueue         IN   BOOLEAN DEFAULT TRUE,
   dequeue         IN   BOOLEAN DEFAULT TRUE,
   wait            IN   BOOLEAN DEFAULT TRUE);
</pre>
<p>This procedure disables enqueuing, dequeuing, or both on the specified queue.</p>
<p>By default, this call disables both enqueue and dequeue. A queue cannot be stopped if there are outstanding transactions against the queue. This operation takes effect when the call completes and does not have any transactional characteristics.</p>
<div id="ADQUE2699" class="example">
<p class="titleinexample"><a id="i1008540"></a>Example 8-34 Stopping a Queue</p>
<pre>BEGIN
   DBMS_AQADM.STOP_QUEUE(
      queue_name        =&gt; &#39;test.obj_queue&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006355"></a>
<div id="ADQUE2700" class="sect2">
<h3 class="sect2"><a id="sthref690"></a><a id="sthref691"></a><a id="sthref692"></a>Dropping a Queue</h3>
<pre>DBMS_AQADM.DROP_QUEUE(
   queue_name        IN    VARCHAR2,
</pre>
<p>This procedure drops an existing queue. <code>DROP_QUEUE</code> is not allowed unless <code>STOP_QUEUE</code> has been called to disable the queue for both enqueuing and dequeuing. All the queue data is deleted as part of the drop operation.</p>
<p>If <code>GLOBAL_TOPIC_ENABLED = TRUE</code> when a queue is dropped, then a corresponding LDAP entry is also dropped.</p>
<div id="ADQUE2701" class="example">
<p class="titleinexample"><a id="sthref693"></a>Example 8-35 Dropping a Standard Queue</p>
<pre>BEGIN
   DBMS_AQADM.DROP_QUEUE(
      queue_name         =&gt; &#39;test.obj_queue&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BAJJEBFA"></a>
<div id="ADQUE2702" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref694"></a><a id="sthref695"></a>Managing Transformations</h2>
<p>Transformations change the format of a message, so that a message created by one application can be understood by another application. You can use transformations on both persistent and buffered messages.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1006400">Creating a Transformation</a></p>
</li>
<li>
<p><a href="#i1006434">Modifying a Transformation</a></p>
</li>
<li>
<p><a href="#i1006448">Dropping a Transformation</a></p>
</li>
</ul>
<a id="i1006400"></a>
<div id="ADQUE0813" class="sect2">
<h3 class="sect2"><a id="sthref696"></a><a id="sthref697"></a><a id="sthref698"></a><a id="sthref699"></a><a id="sthref700"></a>Creating a Transformation<a id="sthref701"></a><a id="sthref702"></a><a id="sthref703"></a><a id="sthref704"></a><a id="sthref705"></a><a id="sthref706"></a><a id="sthref707"></a><a id="sthref708"></a></h3>
<pre>DBMS_TRANSFORM.CREATE_TRANSFORMATION(
    schema               VARCHAR2(30),
    name                 VARCHAR2(30),
    from_schema          VARCHAR2(30),
    from_type            VARCHAR2(30),
    to_schema            VARCHAR2(30),
    to_type              VARCHAR2(30),
    transformation       VARCHAR2(4000)); 
</pre>
<p>This procedure creates a message format <a href="glossary.htm#CBACGHDB"><span class="xrefglossterm">transformation</span></a>. The transformation must be a SQL function with input type <code>from_type</code>, returning an object of type <code>to_type</code>. It can also be a SQL expression of type <code>to_type</code>, referring to <code>from_type</code>. All references to <code>from_type</code> must be of the form <code>source.user_data</code>.</p>
<p>You must be granted <code>EXECUTE</code> privilege on <code>dbms_transform</code> to use this feature. This privilege is included in the <code>AQ_ADMINISTRATOR_ROLE</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="manage.htm#BABBDECH">&#34;Oracle Database Advanced Queuing Security&#34;</a> for more information on administrator and user roles</div>
<p>You must also have <code>EXECUTE</code> privilege on the user-defined types that are the source and destination types of the transformation, and have <code>EXECUTE</code> privileges on any PL/SQL function being used in the transformation function. The transformation cannot write the database state (that is, perform <a href="glossary.htm#CBAICGCD"><span class="xrefglossterm">DML</span></a> operations) or commit or rollback the current transaction.</p>
<div id="ADQUE2703" class="example">
<p class="titleinexample"><a id="CHDCIADC"></a>Example 8-36 Creating a Transformation</p>
<pre>BEGIN
   DBMS_TRANSFORM.CREATE_TRANSFORMATION(
      schema         =&gt; &#39;test&#39;,
      name           =&gt; &#39;message_order_transform&#39;, 
      from_schema    =&gt; &#39;test&#39;,
      from_type      =&gt; &#39;message_typ&#39;, 
      to_schema      =&gt; &#39;test&#39;,
      to_type        =&gt; &#39;order_typ&#39;,
      transformation =&gt; &#39;test.order_typ(
         source.user_data.sender_id,
         source.user_data.subject,
         source.user_data.text)&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006434"></a>
<div id="ADQUE0814" class="sect2">
<h3 class="sect2"><a id="sthref709"></a><a id="sthref710"></a><a id="sthref711"></a><a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a><a id="sthref715"></a>Modifying a Transformation</h3>
<pre>DBMS_TRANSFORM.MODIFY_TRANSFORMATION(
    schema            VARCHAR2(30),
    name              VARCHAR2(30),
    attribute_number  INTEGER,
    transformation    VARCHAR2(4000));
</pre>
<p>This procedure changes the transformation function and specifies transformations for each attribute of the target type. If the attribute number 0 is specified, then the transformation expression singularly defines the transformation from the source to target types.</p>
<p>All references to <code>from_type</code> must be of the form <code>source.user_data</code>. All references to the attributes of the source type must be prefixed by <code>source.user_data</code>.</p>
<p>You must be granted <code>EXECUTE</code> privileges on <code>dbms_transform</code> to use this feature. You must also have <code>EXECUTE</code> privileges on the user-defined types that are the source and destination types of the transformation, and have <code>EXECUTE</code> privileges on any PL/SQL function being used in the transformation function.</p>
</div>
<!-- class="sect2" -->
<a id="i1006448"></a>
<div id="ADQUE2704" class="sect2">
<h3 class="sect2"><a id="sthref716"></a><a id="sthref717"></a><a id="sthref718"></a>Dropping a Transformation</h3>
<pre>DBMS_TRANSFORM.DROP_TRANSFORMATION (
    schema      VARCHAR2(30),
    name        VARCHAR2(30));
</pre>
<p>This procedure drops a transformation.</p>
<p>You must be granted <code>EXECUTE</code> privileges on <code>dbms_transform</code> to use this feature. You must also have <code>EXECUTE</code> privileges on the user-defined types that are the source and destination types of the transformation, and have <code>EXECUTE</code> privileges on any PL/SQL function being used in the transformation function.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008611"></a>
<div id="ADQUE2705" class="sect1">
<h2 class="sect1">Granting and Revoking Privileges</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1006551">Granting Oracle Database Advanced Queuing System Privileges</a></p>
</li>
<li>
<p><a href="#i1006582">Revoking Oracle Database Advanced Queuing System Privileges</a></p>
</li>
<li>
<p><a href="#i1006599">Granting Queue Privileges</a></p>
</li>
<li>
<p><a href="#BAJGEHFI">Revoking Queue Privileges</a></p>
</li>
</ul>
<a id="i1006551"></a>
<div id="ADQUE2706" class="sect2">
<h3 class="sect2"><a id="sthref719"></a><a id="sthref720"></a><a id="sthref721"></a><a id="sthref722"></a><a id="sthref723"></a>Granting Oracle Database Advanced Queuing System Privileges<a id="sthref724"></a><a id="sthref725"></a><a id="sthref726"></a><a id="sthref727"></a></h3>
<pre>DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE(
   privilege         IN    VARCHAR2,
   grantee           IN    VARCHAR2,
   admin_option      IN    BOOLEAN := FALSE);
</pre>
<p>This procedure grants Oracle Database Advanced Queuing system privileges to users and roles. The privileges are <code>ENQUEUE_ANY</code>, <code>DEQUEUE_ANY</code>, <code>MANAGE_ANY</code>. Initially, only <code>SYS</code> and <code>SYSTEM</code> can use this procedure successfully.</p>
<p>Users granted the <code>ENQUEUE_ANY</code> privilege are allowed to enqueue messages to any queues in the database. Users granted the <code>DEQUEUE_ANY</code> privilege are allowed to dequeue messages from any queues in the database. Users granted the <code>MANAGE_ANY</code> privilege are allowed to run <code>DBMS_AQADM</code> calls on any schemas in the database.</p>
<div id="ADQUE2707" class="example">
<p class="titleinexample"><a id="i1006568"></a>Example 8-37 Granting AQ System Privileges</p>
<pre>BEGIN
   DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE(
      privilege          =&gt;    &#39;ENQUEUE_ANY&#39;, 
      grantee            =&gt;    &#39;test&#39;, 
      admin_option       =&gt;     FALSE);
   DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE(
      privilege          =&gt;     &#39;DEQUEUE_ANY&#39;, 
      grantee            =&gt;     &#39;test&#39;, 
      admin_option       =&gt;      FALSE);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006582"></a>
<div id="ADQUE2708" class="sect2">
<h3 class="sect2"><a id="sthref728"></a><a id="sthref729"></a><a id="sthref730"></a><a id="sthref731"></a><a id="sthref732"></a>Revoking Oracle Database Advanced Queuing System Privileges</h3>
<pre>DBMS_AQADM.REVOKE_SYSTEM_PRIVILEGE(
   privilege         IN   VARCHAR2,
   grantee           IN   VARCHAR2);
</pre>
<p>This procedure revokes Oracle Database Advanced Queuing system privileges from users and roles. The privileges are <code>ENQUEUE_ANY</code>, <code>DEQUEUE_ANY</code> and <code>MANAGE_ANY</code>. The <code>ADMIN</code> option for a system privilege cannot be selectively revoked.</p>
<p>Users granted the <code>ENQUEUE_ANY</code> privilege are allowed to enqueue messages to any queues in the database. Users granted the <code>DEQUEUE_ANY</code> privilege are allowed to dequeue messages from any queues in the database. Users granted the <code>MANAGE_ANY</code> privilege are allowed to run <code>DBMS_AQADM</code> calls on any schemas in the database.</p>
<div id="ADQUE2709" class="example">
<p class="titleinexample"><a id="i1006592"></a>Example 8-38 Revoking AQ System Privileges</p>
<pre>BEGIN
   DBMS_AQADM.REVOKE_SYSTEM_PRIVILEGE(
      privilege          =&gt;    &#39;DEQUEUE_ANY&#39;, 
      grantee            =&gt;    &#39;test&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006599"></a>
<div id="ADQUE2710" class="sect2">
<h3 class="sect2"><a id="sthref733"></a><a id="sthref734"></a><a id="sthref735"></a><a id="sthref736"></a><a id="sthref737"></a><a id="sthref738"></a>Granting Queue Privileges</h3>
<pre>DBMS_AQADM.GRANT_QUEUE_PRIVILEGE(
   privilege        IN    VARCHAR2,
   queue_name       IN    VARCHAR2,
   grantee          IN    VARCHAR2,
   grant_option     IN    BOOLEAN := FALSE);
</pre>
<p>This procedure grants privileges on a queue to users and roles. The privileges are <code>ENQUEUE</code>, <code>DEQUEUE</code>, or <code>ALL</code>. Initially, only the queue table owner can use this procedure to grant privileges on the queues.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
This procedure requires that <code>EXECUTE</code> privileges on <code>DBMS_AQADM</code> be granted to the queue table owner, who is probably an ordinary queue user. If you do not want ordinary queue users to be able to create and drop queues and queue tables, add and delete subscribers, and so forth, then you must revoke the <code>EXECUTE</code> privilege as soon as the initial <code>GRANT_QUEUE_PRIVILEGE</code> is done.</div>
<div id="ADQUE2711" class="example">
<p class="titleinexample"><a id="i1006611"></a>Example 8-39 Granting Queue Privilege</p>
<pre>BEGIN
   DBMS_AQADM.GRANT_QUEUE_PRIVILEGE (
      privilege     =&gt;     &#39;ALL&#39;, 
      queue_name    =&gt;     &#39;test.multiconsumer_81_queue&#39;,
      grantee       =&gt;     &#39;test_adm&#39;, 
      grant_option  =&gt;      TRUE);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BAJGEHFI"></a>
<div id="ADQUE2712" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref739"></a><a id="sthref740"></a><a id="sthref741"></a><a id="sthref742"></a>Revoking Queue Privileges</h3>
<pre>DBMS_AQADM.REVOKE_QUEUE_PRIVILEGE (
   privilege         IN      VARCHAR2,
   queue_name        IN      VARCHAR2,
   grantee           IN      VARCHAR2);
</pre>
<p>This procedure revokes privileges on a queue from users and roles. The privileges are <code>ENQUEUE</code> or <code>DEQUEUE</code>.</p>
<p>To revoke a privilege, the revoker must be the original grantor of the privilege. The privileges propagated through the <code>GRANT</code> option are revoked if the grantor&#39;s privileges are revoked.</p>
<p>You can revoke the dequeue right of a grantee on a specific queue, leaving the grantee with only the enqueue right as in <a href="#i1006646">Example 8-40</a>.</p>
<div id="ADQUE2713" class="example">
<p class="titleinexample"><a id="i1006646"></a>Example 8-40 Revoking Dequeue Privilege</p>
<pre>BEGIN
   DBMS_AQADM.REVOKE_QUEUE_PRIVILEGE(
      privilege     =&gt;     &#39;DEQUEUE&#39;, 
      queue_name    =&gt;     &#39;test.multiconsumer_81_queue&#39;, 
      grantee       =&gt;     &#39;test_adm&#39;);
END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008642"></a>
<div id="ADQUE2714" class="sect1">
<h2 class="sect1"><a id="sthref743"></a><a id="sthref744"></a>Managing Subscribers</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1006671">Adding a Subscriber</a></p>
</li>
<li>
<p><a href="#i1006827">Altering a Subscriber</a></p>
</li>
<li>
<p><a href="#i1006911">Removing a Subscriber</a></p>
</li>
</ul>
<a id="i1006671"></a>
<div id="ADQUE0807" class="sect2">
<h3 class="sect2"><a id="sthref745"></a><a id="sthref746"></a><a id="sthref747"></a><a id="sthref748"></a><a id="sthref749"></a><a id="sthref750"></a><a id="sthref751"></a><a id="sthref752"></a><a id="sthref753"></a>Adding a Subscriber<a id="sthref754"></a><a id="sthref755"></a><a id="sthref756"></a><a id="sthref757"></a></h3>
<pre>DBMS_AQADM.ADD_SUBSCRIBER (
   queue_name     IN    VARCHAR2,
   subscriber     IN    sys.aq$_agent,
   rule           IN    VARCHAR2 DEFAULT NULL,
   transformation IN    VARCHAR2 DEFAULT NULL,
   queue_to_queue IN    BOOLEAN DEFAULT FALSE,
   delivery_mode  IN    PLS_INTEGER DEFAULT PERSISTENT);
</pre>
<p>This procedure adds a default <a href="glossary.htm#CBADJIIA"><span class="xrefglossterm">subscriber</span></a> to a queue.</p>
<p>An application can enqueue messages to a specific list of recipients or to the default list of subscribers. This operation succeeds only on queues that allow multiple consumers, and the total number of subscribers must be 1024 or less. This operation takes effect immediately and the containing transaction is committed. Enqueue requests that are executed after the completion of this call reflect the new action. Any string within the <code>rule</code> must be quoted (with single quotation marks) as follows:</p>
<pre>rule   =&gt; &#39;PRIORITY &lt;= 3 AND CORRID =  &#39;&#39;FROM JAPAN&#39;&#39;&#39;
</pre>
<p>User data properties or attributes apply only to object payloads and must be prefixed with <code>tab.userdata</code> in all cases.</p>
<p>If <code>GLOBAL_TOPIC_ENABLED</code> is set to true when a subscriber is created, then a corresponding LDAP entry is also created.</p>
<p>Specify the name of the transformation to be applied during dequeue or propagation. The transformation must be created using the <code>DBMS_TRANSFORM</code> package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the <code>DBMS_TRANSFORM</code> package</div>
<p>For queues that contain payloads with XMLType attributes, you can specify rules that contain operators such as <code>XMLType.existsNode()</code> and <code>XMLType.extract()</code>.</p>
<p>If parameter <code>queue_to_queue</code> is set to <code>TRUE</code>, then the added subscriber is a queue-to-queue subscriber. When queue-to-queue propagation is set up between a source queue and a destination queue, queue-to-queue subscribers receive messages through that propagation schedule.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006952">&#34;Scheduling a Queue Propagation&#34;</a></div>
<p>If the <code>delivery_mode</code> parameter is the default <code>PERSISTENT</code>, then the subscriber receives only persistent messages. If it is set to <code>BUFFERED</code>, then the subscriber receives only buffered messages. If it is set to <code>PERSISTENT_OR_BUFFERED</code>, then the subscriber receives both types. You cannot alter this parameter with <code>ALTER_SUBSCRIBER</code>.</p>
<p>The agent name should be <code>NULL</code> if the destination queue is a single consumer queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>ADD_SUBSCRIBER</code> is an administrative operation on a queue. Although Oracle Database AQ does not prevent applications from issuing administrative and operational calls concurrently, they are executed serially. <code>ADD_SUBSCRIBER</code> blocks until pending calls that are enqueuing or dequeuing messages complete. It will not wait for the pending transactions to complete.</div>
<div id="ADQUE2715" class="example">
<p class="titleinexample"><a id="i1006707"></a>Example 8-41 Adding a Subscriber at a Designated Queue at a Database Link</p>
<pre>DECLARE 
   subscriber          sys.aq$_agent; 
BEGIN 
   subscriber := sys.aq$_agent(&#39;subscriber1&#39;, &#39;test2.msg_queue2@london&#39;, null); 
   DBMS_AQADM.ADD_SUBSCRIBER(
      queue_name         =&gt; &#39;test.multiconsumer_81_queue&#39;, 
      subscriber         =&gt;  subscriber); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2716" class="example">
<p class="titleinexample"><a id="sthref758"></a>Example 8-42 Adding a Single Consumer Queue at a Dababase Link as a Subscriber</p>
<pre>DECLARE 
   subscriber          sys.aq$_agent; 
BEGIN 
   subscriber := sys.aq$_agent(&#39;subscriber1&#39;, &#39;test2.msg_queue2@london&#39;, null); 
   DBMS_AQADM.ADD_SUBSCRIBER(
      queue_name         =&gt; &#39;test.multiconsumer_81_queue&#39;, 
      subscriber         =&gt;  subscriber); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2717" class="example">
<p class="titleinexample"><a id="CHDGBEDA"></a>Example 8-43 Adding a Subscriber with a Rule</p>
<pre>DECLARE 
   subscriber       sys.aq$_agent; 
BEGIN 
   subscriber := sys.aq$_agent(&#39;subscriber2&#39;, &#39;test2.msg_queue2@london&#39;, null); 
   DBMS_AQADM.ADD_SUBSCRIBER(
      queue_name =&gt;  &#39;test.multiconsumer_81_queue&#39;, 
      subscriber =&gt;   subscriber, 
      rule       =&gt;  &#39;priority &lt; 2&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2718" class="example">
<p class="titleinexample"><a id="i1006733"></a>Example 8-44 Adding a Subscriber and Specifying a Transformation</p>
<pre>DECLARE 
   subscriber       sys.aq$_agent; 
BEGIN 
   subscriber := sys.aq$_agent(&#39;subscriber3&#39;, &#39;test2.msg_queue2@london&#39;, null); 
   DBMS_AQADM.ADD_SUBSCRIBER(
      queue_name     =&gt; &#39;test.multiconsumer_81_queue&#39;, 
      subscriber     =&gt;  subscriber, 
      transformation =&gt; &#39;test.message_order_transform&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2719" class="example">
<p class="titleinexample"><a id="sthref759"></a>Example 8-45 Propagating from a Multiple-Consumer Queue to a Single Consumer Queue</p>
<pre>DECLARE 
   subscriber          SYS.AQ$_AGENT; 
BEGIN 
  subscriber := SYS.AQ$_AGENT(NULL, &#39;test2.single_consumer__queue@london&#39;, 
null); 
  DBMS_AQADM.ADD_SUBSCRIBER( 
      queue_name         =&gt; &#39;test.multiconsumer_81_queue&#39;, 
      subscriber         =&gt;  subscriber); 
END; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006827"></a>
<div id="ADQUE0808" class="sect2">
<h3 class="sect2"><a id="sthref760"></a><a id="sthref761"></a><a id="sthref762"></a>Altering a Subscriber</h3>
<pre>DBMS_AQADM.ALTER_SUBSCRIBER (
   queue_name     IN    VARCHAR2,
   subscriber     IN    sys.aq$_agent,
   rule           IN    VARCHAR2
   transformation IN    VARCHAR2);
</pre>
<p>This procedure alters existing properties of a subscriber to a specified queue.</p>
<p>The rule, the transformation, or both can be altered. If you alter only one of these attributes, then specify the existing value of the other attribute to the alter call. If GLOBAL_TOPIC_ENABLED = TRUE when a subscriber is modified, then a corresponding LDAP entry is created.</p>
<div id="ADQUE2720" class="example">
<p class="titleinexample"><a id="i1006853"></a>Example 8-46 Altering a Subscriber Rule</p>
<pre>DECLARE 
   subscriber       sys.aq$_agent; 
BEGIN 
   subscriber := sys.aq$_agent(&#39;subscriber2&#39;, &#39;test2.msg_queue2@london&#39;, null); 
   DBMS_AQADM.ALTER_SUBSCRIBER(
      queue_name =&gt; &#39;test.multiconsumer_81_queue&#39;, 
      subscriber =&gt;  subscriber, 
      rule       =&gt; &#39;priority = 1&#39;); 
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006911"></a>
<div id="ADQUE2721" class="sect2">
<h3 class="sect2"><a id="sthref763"></a><a id="sthref764"></a>Removing a Subscriber</h3>
<pre>DBMS_AQADM.REMOVE_SUBSCRIBER (
   queue_name         IN         VARCHAR2,
   subscriber         IN         sys.aq$_agent);
</pre>
<p>This procedure removes a default subscriber from a queue.</p>
<p>This operation takes effect immediately and the containing transaction is committed. All references to the subscriber in existing messages are removed as part of the operation. If <code>GLOBAL_TOPIC_ENABLED = TRUE</code> when a subscriber is dropped, then a corresponding LDAP entry is also dropped.</p>
<p>It is not an error to run the <code>REMOVE_SUBSCRIBER</code> procedure even when there are pending messages that are available for dequeue by the consumer. These messages are automatically made unavailable for dequeue when the <code>REMOVE_SUBSCRIBER</code> procedure finishes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>REMOVE_SUBSCRIBER</code> is an administrative operation on a queue. Although Oracle Database AQ does not prevent applications from issuing administrative and operational calls concurrently, they are executed serially. <code>REMOVE_SUBSCRIBER</code> blocks until pending calls that are enqueuing or dequeuing messages complete. It will not wait for the pending transactions to complete.</div>
<div id="ADQUE2722" class="example">
<p class="titleinexample"><a id="i1006923"></a>Example 8-47 Removing a Subscriber</p>
<pre>DECLARE
   subscriber       sys.aq$_agent;
BEGIN
   subscriber := sys.aq$_agent (&#39;subscriber2&#39;, &#39;test2.msg_queue2@london&#39;, null);
   DBMS_AQADM.REMOVE_SUBSCRIBER(
      queue_name =&gt; &#39;test.multiconsumer_81_queue&#39;,
      subscriber =&gt; subscriber);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008689"></a>
<div id="ADQUE2723" class="sect1">
<h2 class="sect1"><a id="sthref765"></a><a id="sthref766"></a>Managing Propagations</h2>
<p>The propagation schedules defined for a queue can be changed or dropped at any time during the life of the queue. You can also temporarily disable a schedule instead of dropping it. All administrative calls can be made irrespective of whether the schedule is active or not. If a schedule is active, then it takes a few seconds for the calls to be processed.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1006952">Scheduling a Queue Propagation</a></p>
</li>
<li>
<p><a href="#i1007087">Verifying Propagation Queue Type</a></p>
</li>
<li>
<p><a href="#i1007127">Altering a Propagation Schedule</a></p>
</li>
<li>
<p><a href="#i1007197">Enabling a Propagation Schedule</a></p>
</li>
<li>
<p><a href="#i1007247">Disabling a Propagation Schedule</a></p>
</li>
<li>
<p><a href="#i1007039">Unscheduling a Queue Propagation</a></p>
</li>
</ul>
<a id="i1006952"></a>
<div id="ADQUE2724" class="sect2">
<h3 class="sect2"><a id="sthref767"></a><a id="sthref768"></a><a id="sthref769"></a><a id="sthref770"></a><a id="sthref771"></a>Scheduling a <a id="sthref772"></a><a id="sthref773"></a><a id="sthref774"></a><a id="sthref775"></a><a id="sthref776"></a><a id="sthref777"></a>Queue <a id="sthref778"></a><a id="sthref779"></a><a id="sthref780"></a><a id="sthref781"></a><a id="sthref782"></a><a id="sthref783"></a>Propagation</h3>
<pre>DBMS_AQADM.SCHEDULE_PROPAGATION (
   queue_name         IN  VARCHAR2,
   destination        IN  VARCHAR2 DEFAULT NULL,
   start_time         IN  DATE     DEFAULT SYSDATE,
   duration           IN  NUMBER   DEFAULT NULL,
   next_time          IN  VARCHAR2 DEFAULT NULL,
   latency            IN  NUMBER   DEFAULT 60,
   destination_queue  IN  VARCHAR2 DEFAULT NULL);
</pre>
<p>This procedure schedules propagation of messages.</p>
<p>The destination can be identified by a database link in the <code>destination</code> parameter, a queue name in the <code>destination_queue</code> parameter, or both. Specifying only a database link results in queue-to-dblink propagation. If you propagate messages to several queues in another database, then all propagations have the same frequency.</p>
<p>If a private database link in the schema of the queue table owner has the same name as a public database link, AQ always uses the private database link.</p>
<p>Specifying the destination queue name results in queue-to-queue propagation was introduce in Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2). If you propagate messages to several queues in another database, queue-to-queue propagation enables you to configure each schedule independently of the others. You can enable or disable individual propagations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you want queue-to-queue propagation to a queue in another database, then you must specify parameters <code>destination</code> and <code>destination_queue</code>.</div>
<p>Queue-to-queue propagation mode supports transparent failover when propagating to a destination Oracle Real Application Clusters (Oracle RAC) system. With queue-to-queue propagation, it is not required to repoint a database link if the owner instance of the queue fails on Oracle RAC.</p>
<p>Messages can also be propagated to other queues in the same database by specifying a <code>NULL</code> destination. If a message has multiple recipients at the same destination in either the same or different queues, then the message is propagated to all of them at the same time.</p>
<p>The source queue must be in a queue table meant for multiple consumers. If you specify a single-consumer queue, than error ORA-24039 results. Oracle Database Advanced Queuing does not support the use of synonyms to refer to queues or database links.</p>
<p>If you specify a propagation <code>next_time</code> and <code>duration</code>, propagation will run periodically for the specified duration.If you specify a latency of zero with no <code>next_time</code> or <code>duration</code>, the resulting propagation will run forever, propagating messages as they appear in the queue, and idling otherwise. If a non-zero latency is specified, with no <code>next_time</code> or <code>duration</code> (default), the propagation schedule will be event-based. It will be scheduled to run when there are messages in the queue to be propagated. When there are no more messages for a system-defined period of time, the job will stop running until there are new messages to be propagated.The time at which the job runs depends on other factors, such as the number of ready jobs and the number of job queue processes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>&#34;Managing Job Queues&#34; in <a class="olink ADMIN" href="../ADMIN/toc.htm"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information on job queues and <a href="glossary.htm#CBAEFDIC"><span class="xrefglossterm">Jnnn</span></a> background processes</p>
</li>
<li>
<p><a href="internet.htm#g1035343">Chapter 6, &#34;Internet Access to Oracle Database Advanced Queuing&#34;</a></p>
</li>
</ul>
</div>
<p>Propagation uses a linear backoff scheme for retrying propagation from a schedule that encountered a failure. If a schedule continuously encounters failures, then the first retry happens after 30 seconds, the second after 60 seconds, the third after 120 seconds and so forth. If the retry time is beyond the expiration time of the current window, then the next retry is attempted at the start time of the next window. A maximum of 16 retry attempts are made after which the schedule is automatically disabled.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Once a retry attempt slips to the next propagation window, it will always do so; the exponential backoff scheme no longer governs retry scheduling. If the date function specified in the <code>next_time</code> parameter of <code>DBMS_AQADM.SCHEDULE_PROPAGATION</code> results in a short interval between windows, then the number of unsuccessful retry attempts can quickly reach 16, disabling the schedule.</div>
<p>If you specify a value for <code>destination</code> that does not exist, then this procedure still runs without throwing an error. You can query runtime propagation errors in the <code>LAST_ERROR_MSG</code> column of the <code>USER_QUEUE_SCHEDULES</code> view.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_views.htm#i1008318">&#34;USER_QUEUE_SCHEDULES: Propagation Schedules in User Schema&#34;</a></div>
<div id="ADQUE2725" class="example">
<p class="titleinexample"><a id="CHDIEJDD"></a>Example 8-48 Scheduling a Propagation to Queues in the Same Database</p>
<pre>BEGIN
   DBMS_AQADM.SCHEDULE_PROPAGATION(
      queue_name    =&gt;    &#39;test.multiconsumer_queue&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2726" class="example">
<p class="titleinexample"><a id="CHDIJJJI"></a>Example 8-49 Scheduling a Propagation to Queues in Another Database</p>
<pre>BEGIN
   DBMS_AQADM.SCHEDULE_PROPAGATION(
      queue_name    =&gt;    &#39;test.multiconsumer_queue&#39;, 
      destination   =&gt;    &#39;another_db.world&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2727" class="example">
<p class="titleinexample"><a id="sthref784"></a>Example 8-50 Scheduling Queue-to-Queue Propagation</p>
<pre>BEGIN
   DBMS_AQADM.SCHEDULE_PROPAGATION(
      queue_name         =&gt;    &#39;test.multiconsumer_queue&#39;, 
      destination        =&gt;    &#39;another_db.world&#39;
      destination_queue  =&gt;    &#39;target_queue&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007087"></a>
<div id="ADQUE2728" class="sect2">
<h3 class="sect2"><a id="sthref785"></a><a id="sthref786"></a><a id="sthref787"></a><a id="sthref788"></a><a id="sthref789"></a><a id="sthref790"></a>Verifying Propagation Queue Type</h3>
<pre>DBMS_AQADM.VERIFY_QUEUE_TYPES(
   src_queue_name    IN    VARCHAR2,
   dest_queue_name   IN    VARCHAR2,
   destination       IN    VARCHAR2 DEFAULT NULL,
   rc                OUT   BINARY_INTEGER);
</pre>
<p>This procedure verifies that the source and destination queues have identical types. The result of the verification is stored in the dictionary table <code>SYS.AQ$_MESSAGE_TYPES</code>, overwriting all previous output of this command.</p>
<p>If the source and destination queues do not have identical types and a transformation was specified, then the transformation must map the source queue type to the destination queue type.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>SYS.AQ$_MESSAGE_TYPES</code> can have multiple entries for the same source queue, destination queue, and database link, but with different transformations.</div>
<div id="ADQUE2729" class="example">
<p class="titleinexample"><a id="i1007110"></a>Example 8-51 Verifying a Queue Type</p>
<pre>SET SERVEROUTPUT ON
DECLARE 
rc      BINARY_INTEGER; 
BEGIN 
   DBMS_AQADM.VERIFY_QUEUE_TYPES(
      src_queue_name  =&gt; &#39;test.multiconsumer_queue&#39;, 
      dest_queue_name =&gt; &#39;test.another_queue&#39;,
      rc              =&gt;  rc); 
   DBMS_OUTPUT.PUT_LINE(&#39;Compatible: &#39;||rc);
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#i1007110">Example 8-51</a> involves two queues of the same type. It returns:</p>
<pre>VQT: new style queue
Compatible: 1
</pre>
<p>If the same example is run with <code>test.raw_queue</code> (a queue of type RAW) in place of <code>test.another_queue</code>, then it returns:</p>
<pre>VQT: new style queue
Compatible: 0
</pre></div>
<!-- class="sect2" -->
<a id="i1007127"></a>
<div id="ADQUE0811" class="sect2">
<h3 class="sect2"><a id="sthref791"></a><a id="sthref792"></a><a id="sthref793"></a>Altering a Propagation Schedule</h3>
<pre>DBMS_AQADM.ALTER_PROPAGATION_SCHEDULE( 
   queue_name         IN  VARCHAR2, 
   destination        IN  VARCHAR2 DEFAULT NULL,
   duration           IN  NUMBER   DEFAULT NULL, 
   next_time          IN  VARCHAR2 DEFAULT NULL, 
   latency            IN  NUMBER   DEFAULT 60,
   destination_queue  IN  VARCHAR2 DEFAULT NULL);
</pre>
<p>This procedure alters parameters for a propagation schedule. The <code>destination_queue</code> parameter for queue-to-queue propagation cannot be altered.</p>
<div id="ADQUE2730" class="example">
<p class="titleinexample"><a id="i1007147"></a>Example 8-52 Altering a Propagation Schedule to Queues in the Same Database</p>
<pre>BEGIN
   DBMS_AQADM.ALTER_PROPAGATION_SCHEDULE(
      queue_name    =&gt;    &#39;test.multiconsumer_queue&#39;, 
      duration      =&gt;    &#39;2000&#39;, 
      next_time     =&gt;    &#39;SYSDATE + 3600/86400&#39;,
      latency       =&gt;    &#39;32&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2731" class="example">
<p class="titleinexample"><a id="i1007155"></a>Example 8-53 Altering a Propagation Schedule to Queues in Another Database</p>
<pre>BEGIN
   DBMS_AQADM.ALTER_PROPAGATION_SCHEDULE(
      queue_name    =&gt;    &#39;test.multiconsumer_queue&#39;, 
      destination   =&gt;    &#39;another_db.world&#39;, 
      duration      =&gt;    &#39;2000&#39;, 
      next_time     =&gt;    &#39;SYSDATE + 3600/86400&#39;,
      latency       =&gt;    &#39;32&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007197"></a>
<div id="ADQUE0809" class="sect2">
<h3 class="sect2"><a id="sthref794"></a><a id="sthref795"></a><a id="sthref796"></a>Enabling a Propagation Schedule</h3>
<pre>DBMS_AQADM.ENABLE_PROPAGATION_SCHEDULE( 
   queue_name        IN   VARCHAR2, 
   destination       IN   VARCHAR2 DEFAULT NULL,
   destination_queue IN   VARCHAR2 DEFAULT NULL);
</pre>
<p>This procedure enables a previously disabled propagation schedule.</p>
<div id="ADQUE2732" class="example">
<p class="titleinexample"><a id="sthref797"></a>Example 8-54 Enabling a Propagation to Queues in the Same Database</p>
<pre>BEGIN
   DBMS_AQADM.ENABLE_PROPAGATION_SCHEDULE(
      queue_name   =&gt;   &#39;test.multiconsumer_queue&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2733" class="example">
<p class="titleinexample"><a id="CHDIGAAG"></a>Example 8-55 Enabling a Propagation to Queues in Another Database</p>
<pre>BEGIN
   DBMS_AQADM.ENABLE_PROPAGATION_SCHEDULE(
      queue_name    =&gt;    &#39;test.multiconsumer_queue&#39;, 
      destination   =&gt;    &#39;another_db.world&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007247"></a>
<div id="ADQUE0810" class="sect2">
<h3 class="sect2"><a id="sthref798"></a><a id="sthref799"></a><a id="sthref800"></a>Disabling a Propagation Schedule</h3>
<pre>DBMS_AQADM.DISABLE_PROPAGATION_SCHEDULE( 
   queue_name        IN   VARCHAR2, 
   destination       IN   VARCHAR2 DEFAULT NULL,
   destination_queue IN   VARCHAR2 DEFAULT NULL);
</pre>
<p>This procedure disables a previously enabled propagation schedule.</p>
<div id="ADQUE2734" class="example">
<p class="titleinexample"><a id="sthref801"></a>Example 8-56 Disabling a Propagation to Queues in the Same Database</p>
<pre>BEGIN
   DBMS_AQADM.DISABLE_PROPAGATION_SCHEDULE(
      queue_name   =&gt;   &#39;test.multiconsumer_queue&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2735" class="example">
<p class="titleinexample"><a id="CHDHCDII"></a>Example 8-57 Disabling a Propagation to Queues in Another Database</p>
<pre>BEGIN
   DBMS_AQADM.DISABLE_PROPAGATION_SCHEDULE(
      queue_name    =&gt;    &#39;test.multiconsumer_queue&#39;, 
      destination   =&gt;    &#39;another_db.world&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007039"></a>
<div id="ADQUE2736" class="sect2">
<h3 class="sect2"><a id="sthref802"></a><a id="sthref803"></a><a id="sthref804"></a><a id="sthref805"></a><a id="sthref806"></a>Unscheduling a Queue Propagation</h3>
<pre>DBMS_AQADM.UNSCHEDULE_PROPAGATION (
   queue_name        IN  VARCHAR2,
   destination       IN  VARCHAR2 DEFAULT NULL,
   destination_queue IN  VARCHAR2 DEFAULT NULL);
</pre>
<p>This procedure unschedules a previously scheduled propagation of messages from a queue to a destination. The destination is identified by a specific database link in the <code>destination</code> parameter or by name in the <code>destination_queue</code> parameter.</p>
<div id="ADQUE2737" class="example">
<p class="titleinexample"><a id="sthref807"></a>Example 8-58 Unscheduling a Propagation to Queues in the Same Database</p>
<pre>BEGIN
   DBMS_AQADM.UNSCHEDULE_PROPAGATION(
      queue_name =&gt; &#39;test.multiconsumer_queue&#39;); 
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2738" class="example">
<p class="titleinexample"><a id="sthref808"></a>Example 8-59 Unscheduling a Propagation to Queues in Another Database</p>
<pre>BEGIN
   DBMS_AQADM.UNSCHEDULE_PROPAGATION(
      queue_name    =&gt;   &#39;test.multiconsumer_queue&#39;, 
      destination   =&gt;   &#39;another_db.world&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008752"></a>
<div id="ADQUE2739" class="sect1">
<h2 class="sect1">Managing Oracle Database Advanced Queuing Agents</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1007303">Creating an Oracle Database Advanced Queuing Agent</a></p>
</li>
<li>
<p><a href="#i1007320">Altering an Oracle Database Advanced Queuing Agent</a></p>
</li>
<li>
<p><a href="#i1007337">Dropping an Oracle Database Advanced Queuing Agent</a></p>
</li>
<li>
<p><a href="#i1007349">Enabling Database Access</a></p>
</li>
<li>
<p><a href="#i1007371">Disabling Database Access</a></p>
</li>
</ul>
<a id="i1007303"></a>
<div id="ADQUE2740" class="sect2">
<h3 class="sect2"><a id="sthref809"></a><a id="sthref810"></a><a id="sthref811"></a>Creating an <a id="sthref812"></a><a id="sthref813"></a><a id="sthref814"></a><a id="sthref815"></a>Oracle Database Advanced Queuing <a id="sthref816"></a><a id="sthref817"></a><a id="sthref818"></a><a id="sthref819"></a>Agent</h3>
<pre>DBMS_AQADM.CREATE_AQ_AGENT (
  agent_name                IN VARCHAR2,
  certificate_location      IN VARCHAR2 DEFAULT NULL,
  enable_http               IN BOOLEAN DEFAULT FALSE,
  enable_anyp               IN BOOLEAN DEFAULT FALSE);
</pre>
<p>This procedure registers an agent for Oracle Database Advanced Queuing Internet access using HTTP protocols.</p>
<p>The <code>SYS.AQ$INTERNET_USERS</code> view has a list of all Oracle Database Advanced Queuing Internet agents. When an agent is created, altered, or dropped, an LDAP entry is created for the agent if the following are true:</p>
<ul>
<li>
<p><code>GLOBAL_TOPIC_ENABLED</code> = <code>TRUE</code></p>
</li>
<li>
<p><code>certificate_location</code> is specified</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007320"></a>
<div id="ADQUE2741" class="sect2">
<h3 class="sect2"><a id="sthref820"></a><a id="sthref821"></a><a id="sthref822"></a>Altering an Oracle Database Advanced Queuing Agent</h3>
<pre>DBMS_AQADM.ALTER_AQ_AGENT (
  agent_name                IN VARCHAR2,
  certificate_location      IN VARCHAR2 DEFAULT NULL,
  enable_http               IN BOOLEAN DEFAULT FALSE,
  enable_anyp               IN BOOLEAN DEFAULT FALSE);
</pre>
<p>This procedure alters an agent registered for Oracle Database Advanced Queuing Internet access.</p>
<p>When an Oracle Database Advanced Queuing agent is created, altered, or dropped, an LDAP entry is created for the agent if the following are true:</p>
<ul>
<li>
<p><code>GLOBAL_TOPIC_ENABLED</code> = <code>TRUE</code></p>
</li>
<li>
<p><code>certificate_location</code> is specified</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007337"></a>
<div id="ADQUE2742" class="sect2">
<h3 class="sect2"><a id="sthref823"></a><a id="sthref824"></a><a id="sthref825"></a>Dropping an Oracle Database Advanced Queuing Agent</h3>
<pre>DBMS_AQADM.DROP_AQ_AGENT (
  agent_name     IN VARCHAR2);
</pre>
<p>This procedure drops an agent that was previously registered for Oracle Database Advanced Queuing Internet access.</p>
<p>When an Oracle Database Advanced Queuing agent is created, altered, or dropped, an LDAP entry is created for the agent if the following are true:</p>
<ul>
<li>
<p><code>GLOBAL_TOPIC_ENABLED</code> = <code>TRUE</code></p>
</li>
<li>
<p><code>certificate_location</code> is specified</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007349"></a>
<div id="ADQUE2743" class="sect2">
<h3 class="sect2"><a id="sthref826"></a><a id="sthref827"></a><a id="sthref828"></a><a id="sthref829"></a><a id="sthref830"></a>Enabling Database Access</h3>
<pre>DBMS_AQADM.ENABLE_DB_ACCESS (
  agent_name                IN VARCHAR2,
  db_username               IN VARCHAR2)
</pre>
<p>This procedure grants an Oracle Database Advanced Queuing Internet agent the privileges of a specific database user. The agent should have been previously created using the <code>CREATE_AQ_AGENT</code> procedure.</p>
<p>The <code>SYS.AQ$INTERNET_USERS</code> view has a list of all Oracle Database Advanced Queuing Internet agents and the names of the database users whose privileges are granted to them.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about secure queues</div>
</div>
<!-- class="sect2" -->
<a id="i1007371"></a>
<div id="ADQUE2744" class="sect2">
<h3 class="sect2"><a id="sthref831"></a><a id="sthref832"></a><a id="sthref833"></a>Disabling Database Access</h3>
<pre>DBMS_AQADM.DISABLE_DB_ACCESS (
  agent_name                IN VARCHAR2,
  db_username               IN VARCHAR2)
</pre>
<p>This procedure revokes the privileges of a specific database user from an Oracle Database Advanced Queuing Internet agent. The agent should have been previously granted those privileges using the <code>ENABLE_DB_ACCESS</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about secure queues</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007391"></a>
<div id="ADQUE2745" class="sect1">
<h2 class="sect1"><a id="sthref834"></a><a id="sthref835"></a><a id="sthref836"></a><a id="sthref837"></a><a id="sthref838"></a><a id="sthref839"></a><a id="sthref840"></a>Adding an Alias to the LDAP Server</h2>
<pre>DBMS_AQADM.ADD_ALIAS_TO_LDAP(
   alias          IN VARCHAR2,
   obj_location   IN VARCHAR2);
</pre>
<p>This procedure adds an alias to the LDAP server.</p>
<p>This call takes the name of an alias and the distinguished name of an Oracle Database Advanced Queuing object in LDAP, and creates the alias that points to the Oracle Database Advanced Queuing object. The alias is placed immediately under the distinguished name of the database server. The object to which the alias points can be a queue, an agent, or a <a href="glossary.htm#CBAHHBDH"><span class="xrefglossterm">ConnectionFactory</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about secure queues</div>
</div>
<!-- class="sect1" -->
<a id="i1007413"></a>
<div id="ADQUE2746" class="sect1">
<h2 class="sect1"><a id="sthref841"></a><a id="sthref842"></a><a id="sthref843"></a>Deleting an Alias from the LDAP Server</h2>
<pre>DBMS_AQADM.DEL_ALIAS_FROM_LDAP(
   alias IN VARCHAR2);
</pre>
<p>This procedure removes an alias from the LDAP server.</p>
<p>This call takes the name of an alias as the argument, and removes the alias entry in the LDAP server. It is assumed that the alias is placed immediately under the database server in the LDAP directory.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment993">
<tr>
<td class="cellalignment1002">
<table class="cellalignment998">
<tr>
<td class="cellalignment997"><a href="aq_trbl.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment997"><a href="aq_views.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1004">
<table class="cellalignment996">
<tr>
<td class="cellalignment997"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment997"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment997"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment997"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment997"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment997"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>