<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-961"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Database%20Advanced%20Queuing%20Operations%20Using%20PL%2FSQL"></a><title>Oracle Database Advanced Queuing Operations Using PL/SQL</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T0:30:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Queuing User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17945-14"/>
<meta name="dcterms.isVersionOf" content="ADQUE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="aq_views.htm" title="Previous" type="text/html"/>
<link rel="Next" href="jm_create.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17945-14.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">17/34</span> <!-- End Header -->
<div id="ADQUE1000" class="chapter"><a id="g1025822"></a> <a id="i1008432"></a>
<h1 class="chapter"><span class="secnum">10</span> Oracle Database Advanced Queuing Operations Using PL/SQL</h1>
<p>This chapter describes the Oracle Database Advanced Queuing (AQ) PL/SQL operational interface.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CHDHAAAF">Using Secure Queues</a></p>
</li>
<li>
<p><a href="#i1005596">Enqueuing Messages</a></p>
</li>
<li>
<p><a href="#BCFCFBJH">Enqueuing an Array of Messages</a></p>
</li>
<li>
<p><a href="#CIHDAEEG">Listening to One or More Queues</a></p>
</li>
<li>
<p><a href="#i1006951">Dequeuing Messages</a></p>
</li>
<li>
<p><a href="#BCFBJHCG">Dequeuing an Array of Messages</a></p>
</li>
<li>
<p><a href="#i1007235">Registering for Notification</a></p>
</li>
<li>
<p><a href="#i1007528">Posting for Subscriber Notification</a></p>
</li>
<li>
<p><a href="#i1007605">Adding an Agent to the LDAP Server</a></p>
</li>
<li>
<p><a href="#i1007640">Removing an Agent from the LDAP Server</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="aq_envir.htm#g1019073">Chapter 3, &#34;Oracle Database Advanced Queuing: Programmatic Interfaces&#34;</a> for a list of available functions in each programmatic interface</p>
</li>
<li>
<p>&#34;DBMS_AQ&#34; in <a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the PL/SQL interface</p>
</li>
<li>
<p><a class="olink JAJMS" href="../JAJMS/toc.htm"><span class="italic">Oracle Database Advanced Queuing Java API Reference</span></a> for more information on the Java interface</p>
</li>
<li>
<p>&#34;More OCI Relational Functions&#34; and &#34;OCI Programming Advanced Topics&#34; in <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for more information on the <a href="glossary.htm#CBAFBDDI"><span class="xrefglossterm">Oracle Call Interface</span></a> (OCI)</p>
</li>
</ul>
</div>
<a id="CHDHAAAF"></a>
<div id="ADQUE2812" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref951"></a><a id="sthref952"></a>Using Secure Queues</h2>
<p>For secure queues, you must specify the <code>sender_id</code> in the <code>messages_properties</code> parameter. See &#34;MESSAGE_PROPERTIES_T Type&#34; in <a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about <code>sender_id</code>.</p>
<p>When you use secure queues, the following are required:</p>
<ul>
<li>
<p>You must have created a valid Oracle Database Advanced Queuing agent using <code>DBMS_AQADM.CREATE_AQ_AGENT</code>.</p>
</li>
<li>
<p>You must map <code>sender_id</code> to a database user with enqueue privileges on the secure queue. Use <code>DBMS_AQADM.ENABLE_DB_ACCESS</code> to do this.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a href="aq_admin.htm#i1007303">&#34;Creating an Oracle Database Advanced Queuing Agent&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#i1007349">&#34;Enabling Database Access&#34;</a></p>
</li>
<li>
<p><a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about secure queues</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1005596"></a>
<div id="ADQUE2813" class="sect1">
<h2 class="sect1"><a id="sthref953"></a><a id="sthref954"></a><a id="sthref955"></a>Enqueuing <a id="sthref956"></a><a id="sthref957"></a><a id="sthref958"></a><a id="sthref959"></a><a id="sthref960"></a><a id="sthref961"></a>Messages</h2>
<pre>DBMS_AQ.ENQUEUE(
   queue_name          IN      VARCHAR2,
   enqueue_options     IN      enqueue_options_t,
   message_properties  IN      message_properties_t,
   payload             IN      &#34;<span class="italic">type_name</span>&#34;,
   msgid               OUT     RAW);
</pre>
<p>This procedure adds a <a href="glossary.htm#CBACDHGB"><span class="xrefglossterm">message</span></a> to the specified <a href="glossary.htm#CBAHIIAB"><span class="xrefglossterm">queue</span></a>.</p>
<p>It is not possible to update the message payload after a message has been enqueued. If you want to change the message payload, then you must dequeue the message and enqueue a new message.</p>
<p>To store a payload of type <code>RAW</code>, Oracle Database Advanced Queuing creates a <a href="glossary.htm#CBAFHDDD"><span class="xrefglossterm">queue table</span></a> with <code>LOB</code> column as the payload repository. The maximum size of the payload is determined by which programmatic interface you use to access Oracle Database Advanced Queuing. For PL/SQL, Java and precompilers the limit is 32K; for the OCI the limit is 4G.</p>
<p>If a message is enqueued to a multiconsumer queue with no <a href="glossary.htm#CBACHAEI"><span class="xrefglossterm">recipient</span></a> and the queue has no subscribers (or rule-based subscribers that match this message), then Oracle error ORA 24033 is raised. This is a warning that the message will be discarded because there are no recipients or subscribers to whom it can be delivered.</p>
<p>If several messages are enqueued in the same second, then they all have the same <code>enq_time</code>. In this case the order in which messages are dequeued depends on <code>step_no</code>, a variable that is monotonically increasing for each message that has the same <code>enq_time</code>. There is no situation when both <code>enq_time</code> and <code>step_no</code> are the same for two messages enqueued in the same session.</p>
<p class="subhead2"><a id="CHDGBIHI"></a><a id="ADQUE2814"></a><a id="sthref962"></a><a id="sthref963"></a><a id="sthref964"></a>Enqueue Options</p>
<p>The <code>enqueue_options</code> parameter specifies the options available for the enqueue operation. It has the following attributes:</p>
<ul>
<li>
<p><a id="sthref965"></a><a id="sthref966"></a><code>visibility</code></p>
<p>The <code>visibility</code> attribute specifies the transactional behavior of the enqueue request. <code>ON_COMMIT</code> (the default) makes the enqueue is part of the current transaction. <code>IMMEDIATE</code> makes the enqueue operation an autonomous transaction which commits at the end of the operation.</p>
<p>Do not use the <code>IMMEDIATE</code> option when you want to use <a href="glossary.htm#CBAEGFFF"><span class="xrefglossterm">LOB</span></a> locators. LOB locators are valid only for the duration of the transaction. Your locator will not be valid, because the <code>immediate</code> option automatically commits the transaction.</p>
<p>You must set the <code>visibility</code> attribute to <code>IMMEDIATE</code> to use buffered messaging.</p>
</li>
<li>
<p><a id="sthref967"></a><code>relative_msgid</code></p>
<p>The <code>relative_msgid</code> attribute specifies the message identifier of the message referenced in the sequence deviation operation. This parameter is ignored unless <code>sequence_deviation</code> is specified with the <code>BEFORE</code> attribute.</p>
</li>
<li>
<p><a id="sthref968"></a><code>sequence_deviation</code></p>
<p>The <code>sequence_deviation</code> attribute specifies when the message should be dequeued, relative to other messages already in the queue. <code>BEFORE</code> puts the message ahead of the message specified by <code>relative_msgid</code>. <code>TOP</code> puts the message ahead of any other messages.</p>
<p>Specifying <code>sequence_deviation</code> for a message introduces some restrictions for the delay and priority values that can be specified for this message. The delay of this message must be less than or equal to the delay of the message before which this message is to be enqueued. The priority of this message must be greater than or equal to the priority of the message before which this message is to be enqueued.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>sequence_deviation</code> attribute has no effect in releases prior to Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 1 (10.1) if <code>message_grouping</code> is set to <code>TRANSACTIONAL</code>.
<p>The sequence deviation feature is deprecated in Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2).</p>
</div>
</li>
<li>
<p><code>transformation</code></p>
<p>The <code>transformation</code> attribute specifies a transformation that will be applied before enqueuing the message. The return type of the transformation function must match the type of the queue.</p>
</li>
<li>
<p><a id="sthref969"></a><code>delivery_mode</code></p>
<p>If the <code>delivery_mode</code> attribute is the default <code>PERSISTENT</code>, then the message is enqueued as a persistent message. If it is set to <code>BUFFERED</code>, then the message is enqueued as an buffered message. Null values are not allowed.</p>
</li>
</ul>
<p class="subhead1"><a id="CHDEHJBH"></a><a id="ADQUE2815"></a><a id="sthref970"></a><a id="sthref971"></a>Message Properties</p>
<p>The <code>message_properties</code> parameter contains the information that Oracle Database Advanced Queuing uses to manage individual messages. It has the following attributes:</p>
<ul>
<li>
<p><a id="sthref972"></a><code>priority</code></p>
<p>The <code>priority</code> attribute specifies the priority of the message. It can be any number, including negative numbers. A smaller number indicates higher priority.</p>
</li>
<li>
<p><a id="sthref973"></a><code>delay</code></p>
<p>The <code>delay</code> attribute specifies the number of seconds during which a message is in the <code>WAITING</code> state. After this number of seconds, the message is in the <code>READY</code> state and available for dequeuing. If you specify <code>NO_DELAY</code>, then the message is available for immediate dequeuing. Dequeuing by <code>msgid</code> overrides the <code>delay</code> specification.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Delay is not supported with buffered messaging.</div>
</li>
<li>
<p><a id="sthref974"></a><code>expiration</code></p>
<p>The <code>expiration</code> attribute specifies the number of seconds during which the message is available for dequeuing, starting from when the message reaches the <code>READY</code> state. If the message is not dequeued before it expires, then it is moved to the exception queue in the <code>EXPIRED</code> state. If you specify <code>NEVER</code>, then the message does not expire.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Message delay and expiration are enforced by the queue monitor (<code>QMN</code>) background processes. You must start the QMN processes for the database if you intend to use the delay and expiration features of Oracle Database Advanced Queuing.</div>
</li>
<li>
<p><a id="sthref975"></a><a id="sthref976"></a><code>correlation</code></p>
<p>The <code>correlation</code> attribute is an identifier supplied by the producer of the message at enqueue time.</p>
</li>
<li>
<p><a id="sthref977"></a><code>attempts</code></p>
<p>The <code>attemps</code> attribute specifies the number of attempts that have been made to dequeue the message. This parameter cannot be set at enqueue time.</p>
</li>
<li>
<p><a id="sthref978"></a><code>recipient_list</code></p>
<p>The <code>recipient_list</code> parameter is valid only for queues that allow multiple consumers. The default recipients are the queue subscribers.</p>
</li>
<li>
<p><a id="sthref979"></a><code>exception_queue</code></p>
<p>The <code>exception_queue</code> attribute specifies the name of the queue into which the message is moved if it cannot be processed successfully. If the exception queue specified does not exist at the time of the move, then the message is moved to the default exception queue associated with the queue table, and a warning is logged in the alert log.</p>
</li>
<li>
<p><a id="sthref980"></a><code>delivery_mode</code></p>
<p>Any value for <code>delivery_mode</code> specified in message properties at enqueue time is ignored. The value specified in enqueue options is used to set the delivery mode of the message. If the delivery mode in enqueue options is left unspecified, then it defaults to persistent.</p>
</li>
<li>
<p><a id="sthref981"></a><code>enqueue_time</code></p>
<p>The <code>enqueue_time</code> attribute specifies the time the message was enqueued. This value is determined by the system and cannot be set by the user at enqueue time.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because information about seasonal changes in the system clock (switching between standard time and daylight-saving time, for example) is stored with each queue table, seasonal changes are automatically reflected in <code>enqueue_time</code>. If the system clock is changed for some other reason, then you must restart the database for Oracle Database Advanced Queuing to pick up the changed time.</div>
</li>
<li>
<p><a id="sthref982"></a><code>state</code></p>
<p>The <code>state</code> attribute specifies the state of the message at the time of the dequeue. This parameter cannot be set at enqueue time.</p>
</li>
<li>
<p><a id="sthref983"></a><code>sender_id</code></p>
<p>The <code>sender_id</code> attribute is an identifier of type <code>aq$_agent</code> specified at enqueue time by the message producer.</p>
</li>
<li>
<p><a id="sthref984"></a><code>original_msgid</code></p>
<p>The original_msgid attribute is used by Oracle Database AQ for propagating messages.</p>
</li>
<li>
<p><a id="sthref985"></a><code>transaction_group</code></p>
<p>The <code>transaction_group</code> attribute specifies the transaction group for the message. This attribute is set only by <code>DBMS_AQ.DEQUEUE_ARRAY</code>. This attribute cannot be used to set the transaction group of a message through <code>DBMS_AQ.ENQUEUE</code> or <code>DBMS_AQ.ENQUEUE_ARRAY</code>.</p>
</li>
<li>
<p><a id="sthref986"></a><code>user_property</code></p>
<p>The <code>user_property</code> attribute is optional. It is used to store additional information about the payload.</p>
</li>
</ul>
<p>The examples in this chapter use the same users, message types, queue tables, and queues as do the examples in <a href="aq_admin.htm#g1020486">Chapter 8, &#34;Oracle Database Advanced Queuing Administrative Interface&#34;</a>. If you have not already created these structures in your test environment, then you must run the following examples:</p>
<ul>
<li>
<p><a href="aq_admin.htm#CHDECGGJ">Example 8-1, &#34;Setting Up AQ Administrative Users&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDJIFCF">Example 8-2, &#34;Setting Up AQ Administrative Example Types&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDCBGCF">Example 8-3, &#34;Creating a Queue Table for Messages of Object Type&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDBEADD">Example 8-5, &#34;Creating a Queue Table for Messages of LOB Type&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDEAEID">Example 8-7, &#34;Creating a Queue Table for Grouped Messages&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDFEDEC">Example 8-8, &#34;Creating Queue Tables for Prioritized Messages and Multiple Consumers&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDEFAFG">Example 8-23, &#34;Creating a Queue for Messages of Object Type&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDHEAID">Example 8-25, &#34;Creating a Queue for Messages of LOB Type&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDHEACA">Example 8-26, &#34;Creating a Queue for Grouped Messages&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDGCFHI">Example 8-27, &#34;Creating a Queue for Prioritized Messages&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDIAEEH">Example 8-28, &#34;Creating a Queue for Prioritized Messages and Multiple Consumers&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#CHDCIADC">Example 8-36, &#34;Creating a Transformation&#34;</a></p>
</li>
</ul>
<p>For <a href="aq_admin.htm#CHDECGGJ">Example 8-1</a>, you must connect as a user with administrative privileges. For the other examples in the preceding list, you can connect as user <code>test_adm</code>. After you have created the queues, you must start them as shown in <a href="aq_admin.htm#i1008469">&#34;Starting a Queue&#34;</a>. Except as noted otherwise, you can connect as ordinary queue user <code>&#39;test&#39;</code> to run all examples appearing in this chapter.</p>
<div id="ADQUE2816" class="example">
<p class="titleinexample"><a id="i1005829"></a>Example 10-1 Enqueuing a Message, Specifying Queue Name and Payload</p>
<pre>DECLARE
   enqueue_options     DBMS_AQ.enqueue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
   message := test.message_typ(001, &#39;TEST MESSAGE&#39;, &#39;First message to obj_queue&#39;);
   DBMS_AQ.ENQUEUE(
      queue_name              =&gt; &#39;test.obj_queue&#39;,
      enqueue_options         =&gt; enqueue_options,
      message_properties      =&gt; message_properties,
      payload                 =&gt; message,
      msgid                   =&gt; message_handle);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2817" class="example">
<p class="titleinexample"><a id="i1005850"></a>Example 10-2 Enqueuing a Message, Specifying Priority</p>
<pre>DECLARE 
   enqueue_options       DBMS_AQ.enqueue_options_t; 
   message_properties    DBMS_AQ.message_properties_t; 
   message_handle        RAW(16); 
   message               test.order_typ; 
BEGIN 
   message := test.order_typ(002, &#39;PRIORITY MESSAGE&#39;, &#39;priority 30&#39;); 
   message_properties.priority := 30; 
   DBMS_AQ.ENQUEUE(
      queue_name              =&gt; &#39;test.priority_queue&#39;, 
      enqueue_options         =&gt; enqueue_options, 
      message_properties      =&gt; message_properties, 
      payload                 =&gt; message, 
      msgid                   =&gt; message_handle); 
   COMMIT; 
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="ADQUE2818"></a>Enqueuing a LOB Type Message</p>
<p><a href="#CHDGJCIG">Example 10-3</a> creates procedure <code>blobenqueue()</code> using the <code>test.lob_type</code> message payload object type created in <a href="aq_admin.htm#CHDECGGJ">Example 8-1</a>. On enqueue, the LOB attribute is set to <code>EMPTY_BLOB</code>. After the enqueue completes, but before the transaction is committed, the LOB attribute is selected from the <code>user_data</code> column of the <code>test.lob_qtab</code> queue table. The LOB data is written to the queue using the <code>LOB</code> interfaces (which are available through both OCI and PL/SQL). The actual enqueue operation is shown in</p>
<p>On dequeue, the message payload will contain the LOB locator. You can use this LOB locator after the dequeue, but before the transaction is committed, to read the LOB data. This is shown in <a href="#CHDGIIIC">Example 10-14</a>.</p>
<div id="ADQUE2819" class="example">
<p class="titleinexample"><a id="CHDGJCIG"></a>Example 10-3 Creating an Enqueue Procedure for LOB Type Messages</p>
<pre>CREATE OR REPLACE PROCEDURE blobenqueue(msgno IN NUMBER) AS
   enq_userdata          test.lob_typ; 
   enq_msgid             RAW(16); 
   enqueue_options       DBMS_AQ.enqueue_options_t; 
   message_properties    DBMS_AQ.message_properties_t; 
   lob_loc               BLOB; 
   buffer                RAW(4096); 
BEGIN 
   buffer       := HEXTORAW(RPAD(&#39;FF&#39;, 4096, &#39;FF&#39;)); 
   enq_userdata := test.lob_typ(msgno, &#39;Large Lob data&#39;, EMPTY_BLOB(), msgno); 
   DBMS_AQ.ENQUEUE(
      queue_name          =&gt; &#39;test.lob_queue&#39;,
      enqueue_options     =&gt; enqueue_options,
      message_properties  =&gt; message_properties,
      payload             =&gt; enq_userdata, 
      msgid               =&gt; enq_msgid); 
   SELECT t.user_data.data INTO lob_loc 
      FROM lob_qtab t 
      WHERE t.msgid = enq_msgid; 
   DBMS_LOB.WRITE(lob_loc, 2000, 1, buffer ); 
   COMMIT; 
END;
/ 
</pre></div>
<!-- class="example" -->
<div id="ADQUE2820" class="example">
<p class="titleinexample"><a id="CHDGECGJ"></a>Example 10-4 Enqueuing a LOB Type Message</p>
<pre>BEGIN 
   FOR i IN 1..5 LOOP 
      blobenqueue(i); 
   END LOOP; 
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="ADQUE2821"></a>Enqueuing Multiple Messages to a Single-Consumer Queue</p>
<p><a href="#CHDGIJGG">Example 10-5</a> enqueues six messages to <code>test.obj_queue</code>. These messages are dequeued in <a href="#CHDIACIJ">Example 10-17</a>.</p>
<div id="ADQUE2822" class="example">
<p class="titleinexample"><a id="CHDGIJGG"></a>Example 10-5 Enqueuing Multiple Messages</p>
<pre>SET SERVEROUTPUT ON
DECLARE
   enqueue_options     DBMS_AQ.enqueue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
   message := test.message_typ(001, &#39;ORANGE&#39;, &#39;ORANGE enqueued first.&#39;);
   DBMS_AQ.ENQUEUE(
         queue_name           =&gt; &#39;test.obj_queue&#39;, 
         enqueue_options      =&gt; enqueue_options,
         message_properties   =&gt; message_properties,
         payload              =&gt; message,
         msgid                =&gt; message_handle);
   message := test.message_typ(001, &#39;ORANGE&#39;, &#39;ORANGE also enqueued second.&#39;);
   DBMS_AQ.ENQUEUE(
         queue_name           =&gt; &#39;test.obj_queue&#39;, 
         enqueue_options      =&gt; enqueue_options,
         message_properties   =&gt; message_properties,
         payload              =&gt; message,
         msgid                =&gt; message_handle);
   message := test.message_typ(001, &#39;YELLOW&#39;, &#39;YELLOW enqueued third.&#39;);
   DBMS_AQ.ENQUEUE(
         queue_name           =&gt; &#39;test.obj_queue&#39;, 
         enqueue_options      =&gt; enqueue_options,
         message_properties   =&gt; message_properties,
         payload              =&gt; message,
         msgid                =&gt; message_handle);
   message := test.message_typ(001, &#39;VIOLET&#39;, &#39;VIOLET enqueued fourth.&#39;);
   DBMS_AQ.ENQUEUE(
         queue_name           =&gt; &#39;test.obj_queue&#39;, 
         enqueue_options      =&gt; enqueue_options,
         message_properties   =&gt; message_properties,
         payload              =&gt; message,
         msgid                =&gt; message_handle);
   message := test.message_typ(001, &#39;PURPLE&#39;, &#39;PURPLE enqueued fifth.&#39;);
   DBMS_AQ.ENQUEUE(
         queue_name           =&gt; &#39;test.obj_queue&#39;, 
         enqueue_options      =&gt; enqueue_options,
         message_properties   =&gt; message_properties,
         payload              =&gt; message,
         msgid                =&gt; message_handle);
   message := test.message_typ(001, &#39;PINK&#39;, &#39;PINK enqueued sixth.&#39;);
   DBMS_AQ.ENQUEUE(
         queue_name           =&gt; &#39;test.obj_queue&#39;, 
         enqueue_options      =&gt; enqueue_options,
         message_properties   =&gt; message_properties,
         payload              =&gt; message,
         msgid                =&gt; message_handle);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead1"><a id="ADQUE2823"></a>Enqueuing Multiple Messages to a Multiconsumer Queue</p>
<p><a href="#CHDBGAFA">Example 10-6</a> requires that you connect as user <code>&#39;test_adm</code>&#39; to add subscribers <code>RED</code> and <code>GREEN</code> to queue <code>test.multiconsumer_queue</code>. The subscribers are required for <a href="#CHDHGEFG">Example 10-7</a>.</p>
<div id="ADQUE2824" class="example">
<p class="titleinexample"><a id="CHDBGAFA"></a>Example 10-6 Adding Subscribers RED and GREEN</p>
<pre>DECLARE
   subscriber         sys.aq$_agent;
BEGIN
   subscriber     :=  sys.aq$_agent(&#39;RED&#39;, NULL, NULL);
   DBMS_AQADM.ADD_SUBSCRIBER(
      queue_name  =&gt;  &#39;test.multiconsumer_queue&#39;,
      subscriber  =&gt;  subscriber);

   subscriber     :=  sys.aq$_agent(&#39;GREEN&#39;, NULL, NULL);
   DBMS_AQADM.ADD_SUBSCRIBER(
      queue_name  =&gt;  &#39;test.multiconsumer_queue&#39;,
      subscriber  =&gt;  subscriber); 
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CHDHGEFG">Example 10-7</a> enqueues multiple messages from sender 001. MESSAGE 1 is intended for all queue subscribers. MESSAGE 2 is intended for RED and BLUE. These messages are dequeued in <a href="#CHDIACIJ">Example 10-17</a>.</p>
<div id="ADQUE2825" class="example">
<p class="titleinexample"><a id="CHDHGEFG"></a>Example 10-7 Enqueuing Multiple Messages to a Multiconsumer Queue</p>
<pre>DECLARE
   enqueue_options     DBMS_AQ.enqueue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   recipients          DBMS_AQ.aq$_recipient_list_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
   message := test.message_typ(001, &#39;MESSAGE 1&#39;,&#39;For queue subscribers&#39;);
   DBMS_AQ.ENQUEUE(
      queue_name          =&gt; &#39;test.multiconsumer_queue&#39;,
      enqueue_options     =&gt; enqueue_options,
      message_properties  =&gt; message_properties,
      payload             =&gt; message,
      msgid               =&gt; message_handle);

   message := test.message_typ(001, &#39;MESSAGE 2&#39;, &#39;For two recipients&#39;);
   recipients(1) := sys.aq$_agent(&#39;RED&#39;, NULL, NULL);
   recipients(2) := sys.aq$_agent(&#39;BLUE&#39;, NULL, NULL);
   message_properties.recipient_list := recipients;
   DBMS_AQ.ENQUEUE(
      queue_name          =&gt; &#39;test.multiconsumer_queue&#39;,
      enqueue_options     =&gt; enqueue_options,
      message_properties  =&gt; message_properties,
      payload             =&gt; message,
      msgid               =&gt; message_handle);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead1"><a id="ADQUE2826"></a>Enqueuing Grouped Messages</p>
<p><a href="#CHDFBDDD">Example 10-8</a> enqueues three groups of messages, with three messages in each group. These messages are dequeued in <a href="#CHDGAIBA">Example 10-16</a>.</p>
<div id="ADQUE2827" class="example">
<p class="titleinexample"><a id="CHDFBDDD"></a>Example 10-8 Enqueuing Grouped Messages</p>
<pre>DECLARE
   enqueue_options     DBMS_AQ.enqueue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
  FOR groupno in 1..3 LOOP
    FOR msgno in 1..3 LOOP
      message := test.message_typ(
               001,
               &#39;GROUP &#39; || groupno, 
               &#39;Message &#39; || msgno || &#39; in group &#39; || groupno);
      DBMS_AQ.ENQUEUE(
         queue_name             =&gt; &#39;test.group_queue&#39;,
         enqueue_options        =&gt; enqueue_options,
         message_properties     =&gt; message_properties,
         payload                =&gt; message,
         msgid                  =&gt; message_handle);
    END LOOP;
    COMMIT; 
  END LOOP;
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead1"><a id="ADQUE2828"></a>Enqueuing a Message with Delay and Expiration</p>
<p>In <a href="#CHDIIGAG">Example 10-9</a>, an application wants a message to be dequeued no earlier than a week from now, but no later than three weeks from now. Because expiration is calculated from the earliest dequeue time, this requires setting the expiration time for two weeks.</p>
<div id="ADQUE2829" class="example">
<p class="titleinexample"><a id="CHDIIGAG"></a>Example 10-9 Enqueuing a Message, Specifying Delay and Expiration</p>
<pre>DECLARE
   enqueue_options     DBMS_AQ.enqueue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
   message := test.message_typ(001, &#39;DELAYED&#39;, &#39;Message is delayed one week.&#39;);
   message_properties.delay      := 7*24*60*60;
   message_properties.expiration := 2*7*24*60*60;
   DBMS_AQ.ENQUEUE(
      queue_name           =&gt; &#39;test.obj_queue&#39;,
      enqueue_options      =&gt; enqueue_options,
      message_properties   =&gt; message_properties,
      payload              =&gt; message,
      msgid                =&gt; message_handle);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2830" class="example">
<p class="titleinexample"><a id="i1005875"></a>Example 10-10 Enqueuing a Message, Specifying a Transformation</p>
<pre>DECLARE
   enqueue_options     DBMS_AQ.enqueue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
   message := test.message_typ(001, &#39;NORMAL MESSAGE&#39;, &#39;enqueued to obj_queue&#39;);
   enqueue_options.transformation := &#39;message_order_transform&#39;;
   DBMS_AQ.ENQUEUE(
      queue_name              =&gt; &#39;test.priority_queue&#39;, 
      enqueue_options         =&gt; enqueue_options,
      message_properties      =&gt; message_properties,
      payload                 =&gt; message,
      msgid                   =&gt; message_handle);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BCFCFBJH"></a>
<div id="ADQUE2831" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref987"></a><a id="sthref988"></a><a id="sthref989"></a><a id="sthref990"></a><a id="sthref991"></a>Enqueuing an <a id="sthref992"></a><a id="sthref993"></a><a id="sthref994"></a><a id="sthref995"></a><a id="sthref996"></a><a id="sthref997"></a><a id="sthref998"></a><a id="sthref999"></a>Array of Messages</h2>
<pre>DBMS_AQ.ENQUEUE_ARRAY(
   queue_name                IN   VARCHAR2,
   enqueue_options           IN   enqueue_options_t,
   array_size                IN   PLS_INTEGER,
   message_properties_array  IN   message_properties_array_t,
   payload_array             IN   VARRAY,
   msid_array                OUT  msgid_array_t)
RETURN PLS_INTEGER;
</pre>
<p>Use the <code>ENQUEUE_ARRAY</code> function to enqueue an array of payloads using a corresponding array of message properties. The output is an array of message identifiers of the enqueued messages. The function returns the number of messages successfully enqueued.</p>
<p>Array enqueuing is not supported for buffered messages, but you can still use <code>DBMS_AQ.ENQUEUE_ARRAY()</code> to enqueue buffered messages by setting <code>array_size</code> to <code>1</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGBIHI">&#34;Enqueue Options&#34;</a></div>
<p><a id="sthref1000"></a>The <code>message_properties_array</code> parameter is an array of message properties. Each element in the payload array must have a corresponding element in this record. All messages in an array have the same delivery mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDEHJBH">&#34;Message Properties&#34;</a></div>
<p>The payload structure can be a VARRAY or nested table. The message IDs are returned into an array of RAW(16) entries of type <code>DBMS_AQ.msgid_array_t</code>.</p>
<p>As with array operations in the relational world, it is not possible to provide a single optimum array size that will be correct in all circumstances. Application developers must experiment with different array sizes to determine the optimal value for their particular applications.</p>
<div id="ADQUE2832" class="example">
<p class="titleinexample"><a id="CHDHAFJA"></a>Example 10-11 Enqueuing an Array of Messages</p>
<pre>DECLARE
  enqueue_options       DBMS_AQ.enqueue_options_t;
  msg_prop_array        DBMS_AQ.message_properties_array_t;
  msg_prop              DBMS_AQ.message_properties_t;
  payload_array         test.msg_table;
  msgid_array           DBMS_AQ.msgid_array_t;
  retval                PLS_INTEGER;
BEGIN
  payload_array  := msg_table(
      message_typ(001, &#39;MESSAGE  1&#39;, &#39;array enqueued to obj_queue&#39;), 
      message_typ(001, &#39;MESSAGE  2&#39;, &#39;array enqueued to obj_queue&#39;));
  msg_prop_array := DBMS_AQ.message_properties_array_t(msg_prop, msg_prop);
 
  retval := DBMS_AQ.ENQUEUE_ARRAY( 
                 queue_name               =&gt; &#39;test.obj_queue&#39;,
                 enqueue_options          =&gt; enqueue_options,
                 array_size               =&gt; 2,
                 message_properties_array =&gt; msg_prop_array,
                 payload_array            =&gt; payload_array,
                 msgid_array              =&gt; msgid_array);
  COMMIT;
END;/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CIHDAEEG"></a>
<div id="ADQUE2833" class="sect1">
<h2 class="sect1"><a id="sthref1001"></a><a id="sthref1002"></a><a id="sthref1003"></a>Listening to <a id="sthref1004"></a><a id="sthref1005"></a><a id="sthref1006"></a><a id="sthref1007"></a><a id="sthref1008"></a><a id="sthref1009"></a>One or More Queues</h2>
<pre>DBMS_AQ.LISTEN(
   agent_list             IN    aq$_agent_list_t,
   wait                   IN    BINARY_INTEGER DEFAULT FOREVER, 
   listen_delivery_mode   IN    PLS_INTEGER DEFAULT PERSISTENT,
   agent                  OUT   sys.aq$_agent
   message_delivery_mode  OUT   PLS_INTEGER);

TYPE aq$_agent_list_t IS TABLE of aq$_agent INDEXED BY BINARY_INTEGER;
</pre>
<p>This procedure specifies which queue or queues to monitor.</p>
<p>This call takes a list of agents as an argument. Each agent is identified by a unique combination of name, address, and protocol.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="componet.htm#i1005687">&#34;AQ Agent Type&#34;</a></div>
<p>You specify the queue to be monitored in the address field of each agent listed. Agents must have dequeue privileges on each monitored queue. You must specify the name of the agent when monitoring multiconsumer queues; but you must not specify an agent name for single-consumer queues. Only local queues are supported as addresses. Protocol is reserved for future use.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Listening to multiconsumer queues is not supported in the Java <a href="glossary.htm#CBAIGGDE"><span class="xrefglossterm">API</span></a>.</div>
<p><a id="sthref1010"></a><a id="sthref1011"></a><a id="sthref1012"></a><a id="sthref1013"></a><a id="sthref1014"></a><a id="sthref1015"></a>The <code>listen_delivery_mode</code> parameter specifies what types of message interest the agent. If it is the default <code>PERSISTENT</code>, then the agent is informed about persistent messages only. If it is set to <code>BUFFERED</code>, then the agent is informed about buffered messages only. If it is set to <code>PERSISTENT_OR_BUFFERED</code>, then the agent is informed about both types.</p>
<p>This is a blocking call that returns the agent and message type when there is a message ready for consumption for an agent in the list. If there are messages for more than one agent, then only the first agent listed is returned. If there are no messages found when the wait time expires, then an error is raised.</p>
<p>A successful return from the <code>listen</code> call is only an indication that there is a message for one of the listed agents in one of the specified queues. The interested agent must still dequeue the relevant message.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot call <code>LISTEN</code> on <a href="glossary.htm#CBAFCHBG"><span class="xrefglossterm">nonpersistent</span></a> queues.</div>
<div id="ADQUE2834" class="example">
<p class="titleinexample"><a id="i1006167"></a>Example 10-12 Listening to a Single-Consumer Queue with Zero Timeout</p>
<pre>SET SERVEROUTPUT ON
DECLARE
   agent            sys.aq$_agent;
   test_agent_list  DBMS_AQ.aq$_agent_list_t;
BEGIN
   test_agent_list(1) := sys.aq$_agent(NULL, &#39;test.obj_queue&#39;,  NULL);
   test_agent_list(2) := sys.aq$_agent(NULL, &#39;test.priority_queue&#39;, NULL);
   DBMS_AQ.LISTEN(
      agent_list   =&gt;   test_agent_list, 
      wait         =&gt;   0, 
      agent        =&gt;   agent);
   DBMS_OUTPUT.PUT_LINE(&#39;Message in Queue: &#39; ||  agent.address);
END;
/
</pre></div>
<!-- class="example" -->
<p>Even though both <code>test.obj_queue</code> and <code>test.priority_queue</code> contain messages (enqueued in <a href="#i1005829">Example 10-1</a> and <a href="#i1005850">Example 10-2</a> respectively) <a href="#i1006167">Example 10-12</a> returns only:</p>
<pre>Message in Queue: &#34;TEST&#34;.&#34;OBJ_QUEUE&#34;
</pre>
<p>If the order of agents in <code>test_agent_list</code> is reversed, so <code>test.priority_queue</code> appears before <code>test.obj_queue</code>, then the example returns:</p>
<pre>Message in Queue: &#34;TEST&#34;.&#34;PRIORITY_QUEUE&#34;
</pre></div>
<!-- class="sect1" -->
<a id="i1006951"></a>
<div id="ADQUE2835" class="sect1">
<h2 class="sect1"><a id="sthref1016"></a><a id="sthref1017"></a><a id="sthref1018"></a><a id="sthref1019"></a><a id="sthref1020"></a>Dequeuing Messages</h2>
<pre>DBMS_AQ.DEQUEUE(
   queue_name          IN      VARCHAR2,
   dequeue_options     IN      dequeue_options_t,
   message_properties  OUT     message_properties_t,
   payload             OUT     &#34;<span class="italic">type_name</span>&#34;,
   msgid               OUT     RAW);
</pre>
<p>This procedure dequeues a message from the specified queue. Beginning with Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2), you can choose to dequeue only persistent messages, only buffered messages, or both. See <code>delivery_mode</code> in the following list of dequeue options.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDEHJBH">&#34;Message Properties&#34;</a></div>
<p class="subhead1"><a id="CHDBBGGE"></a><a id="ADQUE2836"></a><a id="sthref1021"></a><a id="sthref1022"></a>Dequeue Options</p>
<p>The <code>dequeue_options</code> parameter specifies the options available for the dequeue operation. It has the following attributes:</p>
<ul>
<li>
<p><a id="sthref1023"></a><code>consumer_name</code></p>
<p>A consumer can dequeue a message from a queue by supplying the name that was used in the <code>AQ$_AGENT</code> type of the <code>DBMS_AQADM</code>.<code>ADD_SUBSCRIBER</code> procedure or the recipient list of the message properties. If a value is specified, then only those messages matching <code>consumer_name</code> are accessed. If a queue is not set up for multiple consumers, then this field must be set to NULL (the default).</p>
</li>
<li>
<p><a id="sthref1024"></a><code>dequeue_mode</code></p>
<p>The <code>dequeue_mode</code> attribute specifies the locking behavior associated with the dequeue. If <code>BROWSE</code> is specified, then the message is dequeued without acquiring any lock. If <code>LOCKED</code> is specified, then the message is dequeued with a write lock that lasts for the duration of the transaction. If <code>REMOVE</code> is specified, then the message is dequeued and deleted (the default). The message can be retained in the queue table based on the retention properties. If <code>REMOVE_NO_DATA</code> is specified, then the message is marked as updated or deleted.</p>
</li>
<li>
<p><a id="sthref1025"></a><code>navigation</code></p>
<p>The <code>navigation</code> attribute specifies the position of the dequeued message. If <code>FIRST_MESSAGE</code> is specified, then the first available message matching the search criteria is dequeued. If <code>NEXT_MESSAGE</code> is specified, then the next available message matching the search criteria is dequeued (the default). If the previous message belongs to a message group, then the next available message matching the search criteria in the message group is dequeued.</p>
<p>If <code>NEXT_TRANSACTION</code> is specified, then any messages in the current transaction group are skipped and the first message of the next transaction group is dequeued. This setting can only be used if message grouping is enabled for the queue.</p>
</li>
<li>
<p><a id="sthref1026"></a><a id="sthref1027"></a><code>visibility</code></p>
<p>The <code>visibility</code> attribute specifies when the new message is dequeued. If <code>ON_COMMIT</code> is specified, then the dequeue is part of the current transaction (the default). If <code>IMMEDIATE</code> is specified, then the dequeue operation is an autonomous transaction that commits at the end of the operation. The <code>visibility</code> attribute is ignored in <code>BROWSE</code> dequeue mode.</p>
<p>Visibility must always be <code>IMMEDIATE</code> when dequeuing messages with delivery mode <code>DBMS_AQ.BUFFERED</code> or <code>DBMS_AQ.PERSISTENT_OR_BUFFERED</code>.</p>
</li>
<li>
<p><a id="sthref1028"></a><code>wait</code></p>
<p>The <code>wait</code> attribute specifies the wait time if there is currently no message available matching the search criteria. If a number is specified, then the operation waits that number of seconds. If <code>FOREVER</code> is specified, then the operation waits forever (the default). If <code>NO_WAIT</code> is specified, then the operation does not wait.</p>
</li>
<li>
<p><a id="sthref1029"></a><code>msgid</code></p>
<p>The <code>msgid</code> attribute specifies the message identifier of the dequeued message. Only messages in the <code>READY</code> state are dequeued unless <code>msgid</code> is specified.</p>
</li>
<li>
<p><a id="sthref1030"></a><a id="sthref1031"></a><code>correlation</code></p>
<p>The correlation attribute specifies the correlation identifier of the dequeued message. The correlation identifier cannot be changed between successive dequeue calls without specifying the <code>FIRST_MESSAGE</code> navigation option.</p>
<p>Correlation identifiers are application-defined identifiers that are not interpreted by Oracle Database Advanced Queuing. You can use special pattern matching characters, such as the percent sign and the underscore. If more than one message satisfies the pattern, then the order of dequeuing is indeterminate, and the sort order of the queue is not honored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Although dequeue options <code>correlation</code> and <code>deq_condition</code> are both supported for buffered messages, it is not possible to create indexes to optimize these queries.</div>
</li>
<li>
<p><a id="sthref1032"></a><code>deq_condition</code></p>
<p>The <code>deq_condition</code> attribute is a Boolean expression similar to the WHERE clause of a SQL query. This Boolean expression can include conditions on message properties, user data properties (object payloads only), and PL/SQL or SQL functions.</p>
<p>To specify dequeue conditions on a message payload (object payload), use attributes of the object type in clauses. You must prefix each attribute with <code>tab.user_data</code> as a qualifier to indicate the specific column of the queue table that stores the payload.</p>
<p>The <code>deq_condition</code> attribute cannot exceed 4000 characters. If more than one message satisfies the dequeue condition, then the order of dequeuing is indeterminate, and the sort order of the queue is not honored.</p>
</li>
<li>
<p><a id="sthref1033"></a><code>transformation</code></p>
<p>The <code>transformation</code> attribute specifies a transformation that will be applied after the message is dequeued but before returning the message to the caller.</p>
</li>
<li>
<p><a id="sthref1034"></a><code>delivery_mode</code></p>
<p>The <code>delivery_mode</code> attribute specifies what types of messages to dequeue. If it is set to <code>DBMS_AQ.PERSISTENT</code>, then only persistent messages are dequeued. If it is set to <code>DBMS_AQ.BUFFERED</code>, then only buffered messages are dequeued.</p>
<p>If it is the default <code>DBMS_AQ.PERSISTENT_OR_BUFFERED</code>, then both persistent and buffered messages are dequeued. The <code>delivery_mode</code> attribute in the message properties of the dequeued message indicates whether the dequeued message was buffered or persistent.</p>
</li>
</ul>
<p>The dequeue order is determined by the values specified at the time the queue table is created unless overridden by the message identifier and correlation identifier in dequeue options.</p>
<p>The database consistent read mechanism is applicable for queue operations. For example, a <code>BROWSE</code> call may not see a message that is enqueued after the beginning of the browsing transaction.</p>
<p>In a <a href="glossary.htm#CHDBGEHG"><span class="xrefglossterm">commit-time queue</span></a>, a new feature of Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2), messages are not visible to <code>BROWSE</code> or <code>DEQUEUE</code> calls until a deterministic order can be established among them based on an <a href="glossary.htm#CHDJJEDH"><span class="xrefglossterm">approximate CSCN</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>&#34;Commit-Time Queues&#34; in <a class="olink STRMS003" href="../STRMS/strms_prop.htm#STRMS003"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
<li>
<p><a href="aq_intro.htm#CHDCEDDG">&#34;Dequeue Modes&#34;</a></p>
</li>
</ul>
</div>
<p>If the <code>navigation</code> attribute of the <code>dequeue_conditions</code> parameter is <code>NEXT</code>_<code>MESSAGE</code> (the default), then subsequent dequeues retrieve messages from the queue based on the snapshot obtained in the first dequeue. A message enqueued after the first dequeue command, therefore, will be processed only after processing all remaining messages in the queue. This is not a problem if all the messages have already been enqueued or if the queue does not have priority-based ordering. But if an application must process the highest-priority message in the queue, then it must use the <code>FIRST_MESSAGE</code> navigation option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It can also be more efficient to use the <code>FIRST_MESSAGE</code> navigation option when there are messages being concurrently enqueued. If the <code>FIRST_MESSAGE</code> option is not specified, then Oracle Database Advanced Queuing continually generates the snapshot as of the first dequeue command, leading to poor performance. If the <code>FIRST_MESSAGE</code> option is specified, then Oracle Database Advanced Queuing uses a new snapshot for every dequeue command.</div>
<p>Messages enqueued in the same transaction into a queue that has been enabled for message grouping form a group. If only one message is enqueued in the transaction, then this effectively forms a group of one message. There is no upper limit to the number of messages that can be grouped in a single transaction.</p>
<p>In queues that have not been enabled for message grouping, a dequeue in <code>LOCKED</code> or <code>REMOVE</code> mode locks only a single message. By contrast, a dequeue operation that seeks to dequeue a message that is part of a group locks the entire group. This is useful when all the messages in a group must be processed as a unit.</p>
<p>When all the messages in a group have been dequeued, the dequeue returns an error indicating that all messages in the group have been processed. The application can then use <code>NEXT_TRANSACTION</code> to start dequeuing messages from the next available group. In the event that no groups are available, the dequeue times out after the period specified in the <code>wait</code> attribute of <code>dequeue_options</code>.</p>
<p>Typically, you expect the consumer of messages to access messages using the dequeue interface. You can view processed messages or messages still to be processed by browsing by message ID or by using <code>SELECT</code> commands.</p>
<p><a href="#i1007064">Example 10-13</a> returns the message enqueued in <a href="#i1005829">Example 10-1</a>. It returns:</p>
<pre>From Sender No.1
Subject: TEST MESSAGE
Text: First message to obj_queue
</pre>
<div id="ADQUE2837" class="example">
<p class="titleinexample"><a id="i1007064"></a>Example 10-13 Dequeuing Object Type Messages</p>
<pre>SET SERVEROUTPUT ON
DECLARE
dequeue_options     DBMS_AQ.dequeue_options_t;
message_properties  DBMS_AQ.message_properties_t;
message_handle      RAW(16);
message             test.message_typ;
BEGIN
   dequeue_options.navigation := DBMS_AQ.FIRST_MESSAGE;
   DBMS_AQ.DEQUEUE(
      queue_name          =&gt;     &#39;test.obj_queue&#39;,
      dequeue_options     =&gt;     dequeue_options,
      message_properties  =&gt;     message_properties,
      payload             =&gt;     message,
      msgid               =&gt;     message_handle);
   DBMS_OUTPUT.PUT_LINE(&#39;From Sender No.&#39;|| message.sender_id);
   DBMS_OUTPUT.PUT_LINE(&#39;Subject: &#39;||message.subject);
   DBMS_OUTPUT.PUT_LINE(&#39;Text: &#39;||message.text);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="ADQUE2838"></a>Dequeuing LOB Type Messages</p>
<p><a href="#CHDGIIIC">Example 10-14</a> creates procedure <code>blobdequeue()</code> to dequeue the LOB type messages enqueued in <a href="#CHDGECGJ">Example 10-4</a>. The actual dequeue is shown in <a href="#CHDDJJDC">Example 10-15</a>. It returns:</p>
<pre>Amount of data read: 2000
Amount of data read: 2000
Amount of data read: 2000
Amount of data read: 2000
Amount of data read: 2000
</pre>
<div id="ADQUE2839" class="example">
<p class="titleinexample"><a id="CHDGIIIC"></a>Example 10-14 Creating a Dequeue Procedure for LOB Type Messages</p>
<pre>CREATE OR REPLACE PROCEDURE blobdequeue(msgno IN NUMBER) AS
   dequeue_options     DBMS_AQ.dequeue_options_t; 
   message_properties  DBMS_AQ.message_properties_t; 
   msgid               RAW(16); 
   payload             test.lob_typ; 
   lob_loc             BLOB; 
   amount              BINARY_INTEGER; 
   buffer              RAW(4096); 
BEGIN 
   DBMS_AQ.DEQUEUE(
      queue_name          =&gt;  &#39;test.lob_queue&#39;,
      dequeue_options     =&gt;   dequeue_options, 
      message_properties  =&gt;   message_properties, 
      payload             =&gt;   payload,
      msgid               =&gt;   msgid); 
   lob_loc                :=   payload.data;
   amount                 :=   2000; 
   DBMS_LOB.READ(lob_loc, amount, 1, buffer);
   DBMS_OUTPUT.PUT_LINE(&#39;Amount of data read: &#39;|| amount); 
   COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADQUE2840" class="example">
<p class="titleinexample"><a id="CHDDJJDC"></a>Example 10-15 Dequeuing LOB Type Messages</p>
<pre>BEGIN 
   FOR i IN 1..5 LOOP 
     blobdequeue(i); 
   END LOOP; 
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="ADQUE2841"></a>Dequeuing Grouped Messages</p>
<p>You can dequeue the grouped messages enqueued in <a href="#CHDFBDDD">Example 10-8</a> by running <a href="#CHDGAIBA">Example 10-16</a>. It returns:</p>
<pre>GROUP 1: Message 1 in group 1
GROUP 1: Message 2 in group 1
GROUP 1: Message 3 in group 1
Finished GROUP 1
GROUP 2: Message 1 in group 2
GROUP 2: Message 2 in group 2
GROUP 2: Message 3 in group 2
Finished GROUP 2
GROUP 3: Message 1 in group 3
GROUP 3: Message 2 in group 3
GROUP 3: Message 3 in group 3
Finished GROUP 3
No more messages
</pre>
<div id="ADQUE2842" class="example">
<p class="titleinexample"><a id="CHDGAIBA"></a>Example 10-16 Dequeuing Grouped Messages</p>
<pre>SET SERVEROUTPUT ON
DECLARE
   dequeue_options       DBMS_AQ.dequeue_options_t;
   message_properties    DBMS_AQ.message_properties_t;
   message_handle        RAW(16);
   message               test.message_typ;
   no_messages           exception;
   end_of_group          exception;
   PRAGMA EXCEPTION_INIT (no_messages, -25228);
   PRAGMA EXCEPTION_INIT (end_of_group, -25235);
BEGIN
   dequeue_options.wait       := DBMS_AQ.NO_WAIT;
   dequeue_options.navigation := DBMS_AQ.FIRST_MESSAGE;
   LOOP
     BEGIN
     DBMS_AQ.DEQUEUE(
        queue_name         =&gt; &#39;test.group_queue&#39;,
        dequeue_options    =&gt; dequeue_options,
        message_properties =&gt; message_properties,
        payload            =&gt; message,
        msgid              =&gt; message_handle);
     DBMS_OUTPUT.PUT_LINE(message.subject || &#39;: &#39; || message.text );
     dequeue_options.navigation := DBMS_AQ.NEXT_MESSAGE;
     EXCEPTION
       WHEN end_of_group THEN
         DBMS_OUTPUT.PUT_LINE (&#39;Finished &#39; || message.subject);
         COMMIT;
         dequeue_options.navigation := DBMS_AQ.NEXT_TRANSACTION;
     END;
   END LOOP;
   EXCEPTION
     WHEN no_messages THEN
       DBMS_OUTPUT.PUT_LINE (&#39;No more messages&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="ADQUE2843"></a>Dequeuing from a Multiconsumer Queue</p>
<p>You can dequeue the messages enqueued for <code>RED</code> in <a href="#CHDHGEFG">Example 10-7</a> by running <a href="#CHDIACIJ">Example 10-17</a>. If you change <code>RED</code> to <code>GREEN</code> and then to <code>BLUE</code>, you can use it to dequeue their messages as well. The output of the example will be different in each case.</p>
<p><code>RED</code> is a subscriber to the multiconsumer queue and is also a specified recipient of MESSAGE 2, so it gets both messages:</p>
<pre>Message: MESSAGE 1 .. For queue subscribers
Message: MESSAGE 2 .. For two recipients
No more messages for RED
</pre>
<p><code>GREEN</code> is only a subscriber, so it gets only those messages in the queue for which no recipients have been specified (in this case, MESSAGE 1):</p>
<pre>Message: MESSAGE 1 .. For queue subscribers
No more messages for GREEN
</pre>
<p><code>BLUE</code>, while not a subscriber to the queue, is nevertheless specified to receive MESSAGE 2.</p>
<pre>Message: MESSAGE 2 .. For two recipients
No more messages for BLUE
</pre>
<div id="ADQUE2844" class="example">
<p class="titleinexample"><a id="CHDIACIJ"></a>Example 10-17 Dequeuing Messages for RED from a Multiconsumer Queue</p>
<pre>SET SERVEROUTPUT ON
DECLARE
  dequeue_options       DBMS_AQ.dequeue_options_t;
  message_properties    DBMS_AQ.message_properties_t;
  message_handle        RAW(16);
  message               test.message_typ;
  no_messages           exception;
  PRAGMA EXCEPTION_INIT (no_messages, -25228);
BEGIN
  dequeue_options.wait          := DBMS_AQ.NO_WAIT;
  dequeue_options.consumer_name := &#39;RED&#39;;
  dequeue_options.navigation    := DBMS_AQ.FIRST_MESSAGE;
  LOOP
   BEGIN
    DBMS_AQ.DEQUEUE(
      queue_name         =&gt; &#39;test.multiconsumer_queue&#39;,
      dequeue_options    =&gt; dequeue_options,
      message_properties =&gt; message_properties,
      payload            =&gt; message,
      msgid              =&gt; message_handle);
    DBMS_OUTPUT.PUT_LINE(&#39;Message: &#39;|| message.subject ||&#39; .. &#39;|| message.text );
    dequeue_options.navigation := DBMS_AQ.NEXT_MESSAGE;
   END;
  END LOOP;
  EXCEPTION
    WHEN no_messages THEN
    DBMS_OUTPUT.PUT_LINE (&#39;No more messages for RED&#39;);
  COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CHDBJBDB">Example 10-18</a> browses messages enqueued in <a href="#CHDGIJGG">Example 10-5</a> until it finds PINK, which it removes. The example returns:</p>
<pre>Browsed Message Text: ORANGE enqueued first.
Browsed Message Text: ORANGE also enqueued second.
Browsed Message Text: YELLOW enqueued third.
Browsed Message Text: VIOLET enqueued fourth.
Browsed Message Text: PURPLE enqueued fifth.
Browsed Message Text: PINK enqueued sixth.
Removed Message Text: PINK enqueued sixth.
</pre>
<p class="subhead2"><a id="ADQUE2845"></a>Dequeue Modes</p>
<div id="ADQUE2846" class="example">
<p class="titleinexample"><a id="CHDBJBDB"></a>Example 10-18 Dequeue in Browse Mode and Remove Specified Message</p>
<pre>SET SERVEROUTPUT ON
DECLARE
   dequeue_options     DBMS_AQ.dequeue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
   dequeue_options.dequeue_mode := DBMS_AQ.BROWSE;
   LOOP
      DBMS_AQ.DEQUEUE(
        queue_name              =&gt; &#39;test.obj_queue&#39;,
        dequeue_options         =&gt; dequeue_options,
        message_properties      =&gt; message_properties,
        payload                 =&gt; message,
        msgid                   =&gt; message_handle);
      DBMS_OUTPUT.PUT_LINE (&#39;Browsed Message Text: &#39; || message.text);
      EXIT WHEN message.subject = &#39;PINK&#39;;
   END LOOP;
   dequeue_options.dequeue_mode := DBMS_AQ.REMOVE;
   dequeue_options.msgid        := message_handle;
   DBMS_AQ.DEQUEUE(
           queue_name           =&gt; &#39;test.obj_queue&#39;,
           dequeue_options      =&gt; dequeue_options,
           message_properties   =&gt; message_properties,
           payload              =&gt; message,
           msgid                =&gt; message_handle);
   DBMS_OUTPUT.PUT_LINE(&#39;Removed Message Text: &#39; || message.text);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CHDDCJFF">Example 10-19</a> previews in locked mode the messages enqueued in <a href="#CHDGIJGG">Example 10-5</a> until it finds PURPLE, which it removes. The example returns:</p>
<pre>Locked Message Text: ORANGE enqueued first.
Locked Message Text: ORANGE also enqueued second.
Locked Message Text: YELLOW enqueued third.
Locked Message Text: VIOLET enqueued fourth.
Locked Message Text: PURPLE enqueued fifth.
Removed Message Text: PURPLE enqueued fifth.
</pre>
<div id="ADQUE2847" class="example">
<p class="titleinexample"><a id="CHDDCJFF"></a>Example 10-19 Dequeue in Locked Mode and Remove Specified Message</p>
<pre>SET SERVEROUTPUT ON
DECLARE
   dequeue_options     DBMS_AQ.dequeue_options_t;
   message_properties  DBMS_AQ.message_properties_t;
   message_handle      RAW(16);
   message             test.message_typ;
BEGIN
   dequeue_options.dequeue_mode := DBMS_AQ.LOCKED;
   LOOP
      DBMS_AQ.dequeue(
        queue_name         =&gt; &#39;test.obj_queue&#39;,
        dequeue_options    =&gt; dequeue_options,
        message_properties =&gt; message_properties,
        payload            =&gt; message,
        msgid              =&gt; message_handle);
      DBMS_OUTPUT.PUT_LINE(&#39;Locked Message Text: &#39; || message.text);
      EXIT WHEN message.subject = &#39;PURPLE&#39;;
   END LOOP;
   dequeue_options.dequeue_mode := DBMS_AQ.REMOVE;
   dequeue_options.msgid        := message_handle;
   DBMS_AQ.DEQUEUE(
     queue_name           =&gt; &#39;test.obj_queue&#39;,
     dequeue_options      =&gt; dequeue_options,
     message_properties   =&gt; message_properties,
     payload              =&gt; message,
     msgid                =&gt; message_handle);
   DBMS_OUTPUT.PUT_LINE(&#39;Removed Message Text: &#39; || message.text);
   COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BCFBJHCG"></a>
<div id="ADQUE2848" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1035"></a><a id="sthref1036"></a><a id="sthref1037"></a><a id="sthref1038"></a><a id="sthref1039"></a>Dequeuing an <a id="sthref1040"></a><a id="sthref1041"></a><a id="sthref1042"></a><a id="sthref1043"></a>Array of Messages</h2>
<pre>DBMS_AQ.DEQUEUE_ARRAY(
   queue_name                IN      VARCHAR2,
   dequeue_options           IN      dequeue_options_t,
   array_size                IN      PLS_INTEGER, 
   message_properties_array  OUT     message_properties_array_t,
   payload_array             OUT     VARRAY,
   msgid_array               OUT     msgid_array_t)
RETURN PLS_INTEGER;
</pre>
<p>Use the <code>DEQUEUE_ARRAY</code> function to dequeue an array of payloads and a corresponding array of message properties. The output is an array of payloads, message IDs, and message properties of the dequeued messages. The function returns the number of messages successfully dequeued.</p>
<p><a id="sthref1044"></a>Array dequeuing is not supported for buffered messages, but you can still use <code>DBMS_AQ.DEQUEUE_ARRAY()</code> to dequeue buffered messages by setting <code>array_size</code> to <code>1</code>.</p>
<p>The payload structure can be a <code>VARRAY</code> or nested table. The message identifiers are returned into an array of <code>RAW(16)</code> entries of type <code>DBMS_AQ.msgid_array_t</code>. The message properties are returned into an array of type <code>DBMS_AQ.message_properties_array_t</code>.</p>
<p>As with array operations in the relational world, it is not possible to provide a single optimum array size that will be correct in all circumstances. Application developers must experiment with different array sizes to determine the optimal value for their particular applications.</p>
<p>All dequeue options available with <code>DBMS_AQ.DEQUEUE</code> are also available with <code>DBMS_AQ.DEQUEUE_ARRAY</code>. Beginning with Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2), you can choose to dequeue only persistent messages, only buffered messages, or both. In addition, the <code>navigation</code> attribute of <code>dequeue_options</code> offers two options specific to <code>DBMS_AQ.DEQUEUE_ARRAY</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006951">&#34;Dequeuing Messages&#34;</a></div>
<p>When dequeuing messages, you might want to dequeue all the messages for a transaction group with a single call. You might also want to dequeue messages that span multiple transaction groups. You can specify either of these methods by using one of the following navigation methods:</p>
<ul>
<li>
<p><code>NEXT_MESSAGE_ONE_GROUP</code></p>
</li>
<li>
<p><code>FIRST_MESSAGE_ONE_GROUP</code></p>
</li>
<li>
<p><code>NEXT_MESSAGE_MULTI_GROUP</code></p>
</li>
<li>
<p><code>FIRST_MESSAGE_MULTI_GROUP</code></p>
</li>
</ul>
<p>Navigation method <code>NEXT_MESSAGE_ONE_GROUP</code> dequeues messages that match the search criteria from the next available transaction group into an array. Navigation method <code>FIRST_MESSAGE_ONE_GROUP</code> resets the position to the beginning of the queue and dequeues all the messages in a single transaction group that are available and match the search criteria.</p>
<p>The number of messages dequeued is determined by an array size limit. If the number of messages in the transaction group exceeds <code>array_size</code>, then multiple calls to <code>DEQUEUE_ARRAY</code> must be made to dequeue all the messages for the transaction group.</p>
<p>Navigation methods <code>NEXT_MESSAGE_MULTI_GROUP</code> and <code>FIRST_MESSAGE_MULTI_GROUP</code> work like their <code>ONE_GROUP</code> counterparts, but they are not limited to a single transaction group. Each message that is dequeued into the array has an associated set of message properties. Message property <code>transaction_group</code> determines which messages belong to the same transaction group.</p>
<p><a href="#BCFEACBF">Example 10-20</a> dequeues the messages enqueued in <a href="#CHDHAFJA">Example 10-11</a>. It returns:</p>
<pre>Number of messages dequeued: 2
</pre>
<div id="ADQUE2849" class="example">
<p class="titleinexample"><a id="BCFEACBF"></a>Example 10-20 Dequeuing an Array of Messages</p>
<pre>SET SERVEROUTPUT ON
DECLARE
  dequeue_options       DBMS_AQ.dequeue_options_t;
  msg_prop_array        DBMS_AQ.message_properties_array_t := 
                        DBMS_AQ.message_properties_array_t();
  payload_array         test.msg_table;
  msgid_array           DBMS_AQ.msgid_array_t;
  retval                PLS_INTEGER;
BEGIN
  retval := DBMS_AQ.DEQUEUE_ARRAY( 
              queue_name               =&gt; &#39;test.obj_queue&#39;,
              dequeue_options          =&gt; dequeue_options,
              array_size               =&gt; 2,
              message_properties_array =&gt; msg_prop_array,
              payload_array            =&gt; payload_array,
              msgid_array              =&gt; msgid_array);
  DBMS_OUTPUT.PUT_LINE(&#39;Number of messages dequeued: &#39; || retval);
END;/
 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1007235"></a>
<div id="ADQUE2850" class="sect1">
<h2 class="sect1"><a id="sthref1045"></a><a id="sthref1046"></a><a id="sthref1047"></a><a id="sthref1048"></a><a id="sthref1049"></a><a id="sthref1050"></a><a id="sthref1051"></a>Registering for Notification</h2>
<pre>DBMS_AQ.REGISTER(
   reg_list     IN SYS.AQ$_REG_INFO_LIST,
   reg_count    IN NUMBER);
</pre>
<p>This procedure registers an e-mail address, user-defined PL/SQL procedure, or HTTP URL for message notification.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In releases before Oracle Database 10<span class="italic">g</span> Release 2 (10.2), the Oracle Database Advanced Queuing notification feature was not supported for queues with names longer than 30 characters. This restriction no longer applies. The 24-character limit on names of user-generated queues still applies. See <a href="aq_admin.htm#i1006091">&#34;Creating a Queue&#34;</a>.</div>
<p><a id="sthref1052"></a>The <code>reg_list</code> parameter is a list of <code>SYS.AQ$_REG_INFO</code> objects. You can specify notification quality of service, a new feature in Oracle Database Advanced Queuing 10<span class="italic">g</span> Release 2 (10.2), with the <code>qosflags</code> attribute of <code>SYS.AQ$_REG_INFO</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="componet.htm#i1005777">&#34;AQ Registration Information Type&#34;</a> for more information on <code>SYS.AQ$_REG_INFO</code> objects</div>
<p><a id="sthref1053"></a>The <code>reg_count</code> parameter specifies the number of entries in the <code>reg_list</code>. Each subscription requires its own <code>reg_list</code> entry. Interest in several subscriptions can be registered at one time.</p>
<p>When PL/SQL notification is received, the Oracle Database Advanced Queuing message properties descriptor that the callback is invoked with specifies the <code>delivery_mode</code> of the message notified as <code>DBMS_AQ.PERSISTENT</code> or <code>DBMS_AQ.BUFFERED</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="componet.htm#i1006661">&#34;AQ Notification Descriptor Type&#34;</a> for more information on the message properties descriptor</div>
<p>If you register for e-mail notifications, then you must set the host name and port name for the SMTP server that will be used by the database to send e-mail notifications. If required, you should set the send-from e-mail address, which is set by the database as the <code>sent from</code> field. You need a Java-enabled database to use this feature.</p>
<p>If you register for HTTP notifications, then you might want to set the host name and port number for the proxy server and a list of no-proxy domains that will be used by the database to post HTTP notifications.</p>
<p>An internal queue called <code>SYS.AQ_SRVNTFN_TABLE_Q</code> stores the notifications to be processed by the job queue processes. If notification fails, then Oracle Database Advanced Queuing retries the failed notification up to <code>MAX_RETRIES</code> attempts.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can change the <code>MAX_RETRIES</code> and <code>RETRY_DELAY</code> properties of <code>SYS.AQ_SRVNTFN_TABLE_Q</code>. The new settings are applied across all notifications.</div>
<div id="ADQUE2851" class="example">
<p class="titleinexample"><a id="CHDJFCGB"></a>Example 10-21 Registering for Notifications</p>
<pre>DECLARE
  reginfo             sys.aq$_reg_info;
  reg_list            sys.aq$_reg_info_list;
BEGIN
  reginfo := sys.aq$_reg_info(
                      &#39;test.obj_queue&#39;,
                      DBMS_AQ.NAMESPACE_ANONYMOUS,
                      &#39;http://www.company.com:8080&#39;, 
                      HEXTORAW(&#39;FF&#39;));
  reg_list  := sys.aq$_reg_info_list(reginfo);
  DBMS_AQ.REGISTER(
    reg_list     =&gt; reg_list, 
    reg_count    =&gt; 1);
  COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<div id="ADQUE2852" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1054"></a>
<h2 class="sect1"><a id="sthref1055"></a><a id="sthref1056"></a><a id="sthref1057"></a>Unregistering for Notification</h2>
<pre>DBMS_AQ.UNREGISTER(
   reg_list     IN SYS.AQ$_REG_INFO_LIST,
   reg_count    IN NUMBER);
</pre>
<p>This procedure unregisters an e-mail address, user-defined PL/SQL procedure, or HTTP URL for message notification.</p>
</div>
<!-- class="sect1" -->
<a id="i1007528"></a>
<div id="ADQUE2853" class="sect1">
<h2 class="sect1"><a id="sthref1058"></a><a id="sthref1059"></a><a id="sthref1060"></a><a id="sthref1061"></a><a id="sthref1062"></a><a id="sthref1063"></a><a id="sthref1064"></a>Posting for Subscriber Notification</h2>
<pre>DBMS_AQ.POST(
  post_list       IN  SYS.AQ$_POST_INFO_LIST,
  post_count      IN  NUMBER);
</pre>
<p>This procedure posts to a list of anonymous subscriptions, allowing all clients who are registered for the subscriptions to get notifications of persistent messages. This feature is not supported with buffered messages.</p>
<p>The <code>count</code> parameter specifies the number of entries in the <code>post_list</code>. Each posted subscription must have its own entry in the <code>post_list</code>. Several subscriptions can be posted to at one time.</p>
<p>The <code>post_list</code> parameter specifies the list of anonymous subscriptions to which you want to post. It has three attributes:</p>
<ul>
<li>
<p><a id="sthref1065"></a><code>name</code></p>
<p>The <code>name</code> attribute specifies the name of the anonymous subscription to which you want to post.</p>
</li>
<li>
<p><a id="sthref1066"></a><code>namespace</code></p>
<p>The <code>namespace</code> attribute specifies the namespace of the subscription. To receive notifications from other applications through <code>DBMS_AQ.POST</code> the namespace must be <code>DBMS_AQ.NAMESPACE_ANONYMOUS</code>.</p>
</li>
<li>
<p><a id="sthref1067"></a><code>payload</code></p>
<p>The <code>payload</code> attribute specifies the payload to be posted to the anonymous subscription. It is possible for no payload to be associated with this call.</p>
</li>
</ul>
<p>This call provides a best-effort guarantee. A notification goes to registered clients at most once. This call is primarily used for lightweight notification. If an application needs more rigid guarantees, then it can enqueue to a queue.</p>
<div id="ADQUE2854" class="example">
<p class="titleinexample"><a id="sthref1068"></a>Example 10-22 Posting Object-Type Messages</p>
<pre>DECLARE
  postinfo            sys.aq$_post_info;
  post_list           sys.aq$_post_info_list;
BEGIN
  postinfo  := sys.aq$_post_info(&#39;test.obj_queue&#39;,0,HEXTORAW(&#39;FF&#39;)); 
  post_list := sys.aq$_post_info_list(postinfo);
  DBMS_AQ.POST(
    post_list       =&gt; post_list,
    post_count      =&gt; 1);
  COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1007605"></a>
<div id="ADQUE2855" class="sect1">
<h2 class="sect1"><a id="sthref1069"></a><a id="sthref1070"></a><a id="sthref1071"></a><a id="sthref1072"></a>Adding an Agent to the LDAP Server</h2>
<pre>DBMS_AQ.BIND_AGENT(
   agent        IN SYS.AQ$_AGENT,
   certificate  IN VARCHAR2 default NULL);
</pre>
<p>This procedure creates an entry for an Oracle Database Advanced Queuing agent in the <a href="glossary.htm#CBAIIHDD"><span class="xrefglossterm">Lightweight Directory Access Protocol</span></a> (LDAP) server.</p>
<p>The <code>agent</code> parameter specifies the Oracle Database Advanced Queuing Agent that is to be registered in LDAP server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="componet.htm#i1005687">&#34;AQ Agent Type&#34;</a></div>
<p><a id="sthref1073"></a>The <code>certificate</code> parameter specifies the location (LDAP distinguished name) of the <code>OrganizationalPerson</code> entry in LDAP whose digital certificate (attribute <code>usercertificate</code>) is to be used for this agent. For example, &#34;<code>cn=OE, cn=ACME, cn=com</code>&#34; is a distinguished name for a <code>OrganizationalPerson</code> <code>OE</code> whose certificate will be used with the specified agent. If the agent does not have a digital certificate, then this parameter is defaulted to null.</p>
</div>
<!-- class="sect1" -->
<a id="i1007640"></a>
<div id="ADQUE2856" class="sect1">
<h2 class="sect1"><a id="sthref1074"></a><a id="sthref1075"></a><a id="sthref1076"></a>Removing an Agent from the LDAP Server</h2>
<pre>DBMS_AQ.UNBIND_AGENT(
   agent    IN SYS.AQ$_AGENT);
</pre>
<p>This procedure removes the entry for an Oracle Database Advanced Queuing agent from the LDAP server.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment993">
<tr>
<td class="cellalignment1002">
<table class="cellalignment998">
<tr>
<td class="cellalignment997"><a href="aq_views.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment997"><a href="jm_create.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1004">
<table class="cellalignment996">
<tr>
<td class="cellalignment997"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment997"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment997"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment997"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment997"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment997"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>