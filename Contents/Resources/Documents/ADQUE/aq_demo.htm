<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-958"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Streams%20Messaging%20Examples"></a><title>Oracle Streams Messaging Examples</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T0:30:48Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Queuing User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17945-14"/>
<meta name="dcterms.isVersionOf" content="ADQUE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="aq_stage.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ap_nonpers.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17945-14.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">30/34</span> <!-- End Header -->
<div id="ADQUE025" class="chapter"><a id="g1028568"></a> <a id="i1007863"></a>
<h1 class="chapter"><span class="secnum">23</span> Oracle Streams Messaging Examples</h1>
<p>The examples in this chapter illustrate a messaging environment that can be constructed using Oracle Streams. The examples assume you are in a SQL*Plus testing environment with access to a database named <code>db01</code>.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CHDEHIDC">Overview of Messaging Example</a></p>
</li>
<li>
<p><a href="#i1005664">Setting Up Users and Creating an ANYDATA Queue</a></p>
</li>
<li>
<p><a href="#i1005896">Creating Enqueue Procedures</a></p>
</li>
<li>
<p><a href="#CHDDGGHJ">Configuring an Apply Process</a></p>
</li>
<li>
<p><a href="#i1006391">Configuring Explicit Dequeue</a></p>
</li>
<li>
<p><a href="#i1006600">Enqueuing Messages</a></p>
</li>
<li>
<p><a href="#i1006841">Dequeuing Messages Explicitly and Querying for Applied Messages</a></p>
</li>
<li>
<p><a href="#i1006898">Enqueuing and Dequeuing Messages Using JMS</a></p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about messaging and <code>ANYDATA</code> queues</div>
</li>
</ul>
<a id="CHDEHIDC"></a>
<div id="ADQUE3476" class="sect1">
<h2 class="sect1">Overview of Messaging Example</h2>
<p>This example illustrates using a single <code>ANYDATA</code> <a href="glossary.htm#CBAHIIAB"><span class="xrefglossterm">queue</span></a> to create an Oracle Streams messaging environment in which <a href="glossary.htm#CBACDHGB"><span class="xrefglossterm">message</span></a> payloads of different types are stored in the same queue. Specifically, this example illustrates the following messaging features of Oracle Streams:</p>
<ul>
<li>
<p>Enqueuing messages containing order payload as <code>ANYDATA</code> payloads</p>
</li>
<li>
<p>Enqueuing messages containing customer payload as <code>ANYDATA</code> payloads</p>
</li>
<li>
<p>Enqueuing messages containing row LCRs as <code>ANYDATA</code> payloads</p>
</li>
<li>
<p>Creating a rule set for applying the events</p>
</li>
<li>
<p>Creating an evaluation context used by the rule set</p>
</li>
<li>
<p>Creating an Oracle Streams apply process to <a href="glossary.htm#CBAGEGIF"><span class="xrefglossterm">dequeue</span></a> and process the events based on <a href="glossary.htm#CBABGGGG"><span class="xrefglossterm">rules</span></a></p>
</li>
<li>
<p>Creating a message handler and associating it with the apply process</p>
</li>
<li>
<p>Explicitly dequeuing and processing events based on rules without using the apply process</p>
</li>
</ul>
<p><a href="#i1005626">Figure 23-1</a> provides an overview of this environment.</p>
<div id="ADQUE3477" class="figure">
<p class="titleinfigure"><a id="i1005626"></a>Figure 23-1 Example Oracle Streams Messaging Environment</p>
<img width="416" height="456" src="img/strms021.gif" alt="Description of Figure 23-1 follows"/><br/>
<a id="sthref2083" href="img_text/strms021.htm">Description of &#34;Figure 23-1 Example Oracle Streams Messaging Environment&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="i1005664"></a>
<div id="ADQUE3478" class="sect1">
<h2 class="sect1"><a id="sthref2084"></a><a id="sthref2085"></a><a id="sthref2086"></a><a id="sthref2087"></a><a id="sthref2088"></a><a id="sthref2089"></a>Setting Up Users and Creating an ANYDATA Queue</h2>
<p>Because the examples in this chapter use the <code>oe</code> sample <a href="glossary.htm#CBACBEEF"><span class="xrefglossterm">schema</span></a>, the <code>oe</code> user must have privileges to run the subprograms in the <code>DBMS_AQ</code> package. This is accomplished in <a href="#CJFFGEJD">Example 23-1</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>oe</code> user is specified as the queue user when the <code>ANYDATA</code> queue is created in <a href="#CJFJCJJD">Example 23-2</a>. The <code>SET_UP_QUEUE</code> procedure grants the <code>oe</code> user <a href="glossary.htm#CBAJCGCH"><span class="xrefglossterm">enqueue</span></a> and <a href="glossary.htm#CBAGEGIF"><span class="xrefglossterm">dequeue</span></a> privileges on the queue, but the <code>oe</code> user also needs <code>EXECUTE</code> privilege on the <code>DBMS_AQ</code> package to enqueue and dequeue messages.</div>
<p>Most of the configuration and administration actions illustrated in these examples are performed by the Oracle Streams administrator <code>strmadmin</code>. <a href="#CJFFGEJD">Example 23-1</a> also creates this user and grants the necessary privileges. These privileges enable the user to run subprograms in packages related to Oracle Streams, create rule sets, create rules, and monitor the Oracle Streams environment by querying data dictionary views.</p>
<p>In <a href="#CJFFGEJD">Example 23-1</a>, you connect to database <code>db01</code> as a user with administrative privileges.</p>
<div id="ADQUE3479" class="example">
<p class="titleinexample"><a id="CJFFGEJD"></a>Example 23-1 Setting Up ANYDATA Users</p>
<pre>GRANT EXECUTE ON DBMS_AQ TO oe;
CREATE USER strmadmin IDENTIFIED  BY strmadmin DEFAULT TABLESPACE example;
GRANT DBA, SELECT_CATALOG_ROLE    TO strmadmin; 
GRANT EXECUTE ON DBMS_APPLY_ADM   TO strmadmin;
GRANT EXECUTE ON DBMS_AQ          TO strmadmin;
GRANT EXECUTE ON DBMS_AQADM       TO strmadmin;
GRANT EXECUTE ON DBMS_STREAMS_ADM TO strmadmin;
BEGIN 
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_SET_OBJ, 
    grantee      =&gt; &#39;strmadmin&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_OBJ, 
    grantee      =&gt; &#39;strmadmin&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ, 
    grantee      =&gt; &#39;strmadmin&#39;, 
    grant_option =&gt; FALSE);
END;
/
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code>SELECT_CATALOG_ROLE</code> is not required for the Oracle Streams administrator. It is granted in this example so that the Oracle Streams administrator can monitor the environment easily.</p>
</li>
<li>
<p>If you plan to use the Oracle Streams tool in Oracle Enterprise Manager, then grant the Oracle Streams administrator <code>SELECT</code> <code>ANY</code> <code>DICTIONARY</code> privilege, in addition to the privileges shown in this step.</p>
</li>
</ul>
</div>
<p>In <a href="#CJFJCJJD">Example 23-2</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create <code>ANYDATA</code> queue <code>oe_queue</code>. The <code>SET_UP_QUEUE</code> procedure creates a queue table for the queue and then creates and starts the queue.</p>
<div id="ADQUE3480" class="example">
<p class="titleinexample"><a id="CJFJCJJD"></a>Example 23-2 Creating an ANYDATA Queue</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDE
CONNECT strmadmin/&amp;password@db01;
set echo on

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE( 
    queue_table =&gt; &#39;oe_queue_table&#39;, 
    queue_name  =&gt; &#39;oe_queue&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFGGADI">Example 23-3</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to grant the <code>oe</code> user privileges on queue <code>oe_queue</code>, create agent <code>explicit_enq</code> that will be used to perform explicit enqueue operations on the queue, and associate the <code>oe</code> user with the agent.</p>
<p>Queue <code>oe_queue</code> is a secure queue because it was created using <code>SET_UP_QUEUE</code>. For a user to perform enqueue and dequeue operations on a secure queue, the user must be configured as a secure queue user of the queue. Associating the <code>oe</code> user with agent <code>explicit_enq</code> enables the <code>oe</code> user to perform enqueue operations on this queue.</p>
<div id="ADQUE3481" class="example">
<p class="titleinexample"><a id="CJFGGADI"></a>Example 23-3 Enabling Enqueue on the ANYDATA Queue</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDE
CONNECT strmadmin/&amp;password@db01;
set echo on

BEGIN
  SYS.DBMS_AQADM.GRANT_QUEUE_PRIVILEGE(
    privilege  =&gt; &#39;ALL&#39;,
    queue_name =&gt; &#39;strmadmin.oe_queue&#39;,
    grantee    =&gt; &#39;oe&#39;);
  SYS.DBMS_AQADM.CREATE_AQ_AGENT(
    agent_name  =&gt; &#39;explicit_enq&#39;);
  DBMS_AQADM.ENABLE_DB_ACCESS(
    agent_name  =&gt; &#39;explicit_enq&#39;,
    db_username =&gt; &#39;oe&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1005896"></a>
<div id="ADQUE3482" class="sect1">
<h2 class="sect1"><a id="sthref2090"></a><a id="sthref2091"></a>Creating Enqueue Procedures</h2>
<p>The examples in this section create two PL/SQL procedures that enqueue messages into the <code>ANYDATA</code> queue <code>oe_queue</code>. One procedure enqueues non-LCR messages, and the other procedure enqueues row LCR messages.</p>
<p>In <a href="#CJFEHHGC">Example 23-4</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a type to represent orders based on the columns in the <code>oe.orders</code> table. This type is used for messages that are enqueued into the <code>ANYDATA</code> queue <code>oe_queue</code>. The type attributes include the columns in the <code>oe.orders</code> table, along with one extra attribute named <code>action</code>. The value of the <code>action</code> attribute for instances of this type is used to determine the correct action to perform on the instance (either apply process dequeue or explicit dequeue).</p>
<div id="ADQUE3483" class="example">
<p class="titleinexample"><a id="CJFEHHGC"></a>Example 23-4 Creating an Orders Type</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDE
CONNECT oe/&amp;password@db01;
set echo on

CREATE TYPE order_event_typ AS OBJECT(
  order_id       NUMBER(12),
  order_date     TIMESTAMP(6) WITH LOCAL TIME ZONE,
  order_mode     VARCHAR2(8),
  customer_id    NUMBER(6),
  order_status   NUMBER(2),
  order_total    NUMBER(8,2),
  sales_rep_id   NUMBER(6),
  promotion_id   NUMBER(6),
  action         VARCHAR(7));
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFGIFJE">Example 23-5</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a type to represent customers based on the columns in the <code>oe.customers</code> table. This type is used for messages that are enqueued into the <code>ANYDATA</code> queue <code>oe_queue</code>. The type attributes include the columns in the <code>oe.customers</code> table, along with one extra attribute named <code>action</code>. The value of the <code>action</code> attribute for instances of this type is used to determine the correct action to perform on the instance (either apply process dequeue or explicit dequeue).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This example assumes you have dropped the <code>cust_geo_location</code> column from the <code>oe.customers</code> table. This column is useful only with Oracle Spatial.</div>
<div id="ADQUE3484" class="example">
<p class="titleinexample"><a id="CJFGIFJE"></a>Example 23-5 Creating a Customers Type</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

CREATE TYPE customer_event_typ AS OBJECT(
  customer_id         NUMBER(6),
  cust_first_name     VARCHAR2(20),
  cust_last_name      VARCHAR2(20),
  cust_address        CUST_ADDRESS_TYP,
  phone_numbers       PHONE_LIST_TYP,
  nls_language        VARCHAR2(3),
  nls_territory       VARCHAR2(30),
  credit_limit        NUMBER(9,2),
  cust_email          VARCHAR2(30),
  account_mgr_id      NUMBER(6),
  date_of_birth       DATE,
  marital_status      VARCHAR2(20),
  gender              VARCHAR2(1),
  income_level        VARCHAR2(20),
  action              VARCHAR(7));
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFEAHDG">Example 23-6</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a PL/SQL procedure called <code>enq_proc</code> to enqueue non-LCR messages into <code>ANYDATA</code> queue oe_queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A single enqueued message can be dequeued by both an apply process and an explicit dequeue, but the examples in this chapter do not illustrate this capability.</div>
<div id="ADQUE3485" class="example">
<p class="titleinexample"><a id="CJFEAHDG"></a>Example 23-6 Creating a Procedure to Enqueue Non-LCR Messages</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

CREATE PROCEDURE oe.enq_proc (event IN ANYDATA) IS
    enqopt       DBMS_AQ.ENQUEUE_OPTIONS_T;
    mprop        DBMS_AQ.MESSAGE_PROPERTIES_T;
    enq_eventid  RAW(16);
  BEGIN
    mprop.SENDER_ID := SYS.AQ$_AGENT(&#39;explicit_enq&#39;, NULL, NULL);
    DBMS_AQ.ENQUEUE(
      queue_name          =&gt;  &#39;strmadmin.oe_queue&#39;,
      enqueue_options     =&gt;  enqopt,
      message_properties  =&gt;  mprop,
      payload             =&gt;  event,
      msgid               =&gt;  enq_eventid);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFHDGJJ">Example 23-7</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a PL/SQL procedure called <code>enq_row_lcr</code> that constructs a row LCR and then enqueues the row LCR into <code>ANYDATA</code> queue oe_queue.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS307" href="../ARPLS/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about LCR constructors</div>
<div id="ADQUE3486" class="example">
<p class="titleinexample"><a id="CJFHDGJJ"></a>Example 23-7 Creating a Procedure to Construct and Enqueue Row LCR Events</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

CREATE PROCEDURE oe.enq_row_lcr(
  source_dbname  VARCHAR2,
  cmd_type       VARCHAR2,
  obj_owner      VARCHAR2,
  obj_name       VARCHAR2,
  old_vals       SYS.LCR$_ROW_LIST,
  new_vals       SYS.LCR$_ROW_LIST) 
AS
  eopt           DBMS_AQ.ENQUEUE_OPTIONS_T;
  mprop          DBMS_AQ.MESSAGE_PROPERTIES_T;
  enq_msgid      RAW(16);
  row_lcr        SYS.LCR$_ROW_RECORD;
BEGIN
  mprop.SENDER_ID := SYS.AQ$_AGENT(&#39;explicit_enq&#39;, NULL, NULL); 
  row_lcr := SYS.LCR$_ROW_RECORD.CONSTRUCT(
    source_database_name  =&gt;  source_dbname,
    command_type          =&gt;  cmd_type,
    object_owner          =&gt;  obj_owner,
    object_name           =&gt;  obj_name,
    old_values            =&gt;  old_vals,
    new_values            =&gt;  new_vals);
  DBMS_AQ.ENQUEUE(
    queue_name         =&gt;  &#39;strmadmin.oe_queue&#39;, 
    enqueue_options    =&gt;  eopt,
    message_properties =&gt;  mprop,
    payload            =&gt;  ANYDATA.ConvertObject(row_lcr),
    msgid              =&gt;  enq_msgid);
END enq_row_lcr;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDDGGHJ"></a>
<div id="ADQUE3487" class="sect1">
<h2 class="sect1"><a id="sthref2092"></a><a id="sthref2093"></a>Configuring an Apply Process</h2>
<p>The examples in this section configure an apply process to apply the user-enqueued messages in the <code>ANYDATA</code> queue oe_queue.</p>
<p>In <a href="#CJFCCBCI">Example 23-8</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a function called <code>get_oe_action</code> and to grant <code>EXECUTE</code> privilege on the function to administrator user <code>strmadmin</code>.</p>
<p>This function determines the value of the <code>action</code> attribute in the messages in queue <code>oe_queue</code>. It is used in rules later in this chapter to determine the value of the <code>action</code> attribute for an event. Then, the clients of the <a href="glossary.htm#i432853"><span class="xrefglossterm">rules engine</span></a> perform the appropriate action for the event (either dequeue by apply process or explicit dequeue). In this example, the clients of the <a href="glossary.htm#CBADCGED"><span class="xrefglossterm">rules engine</span></a> are the apply process and the <code>oe.explicit_dq</code> PL/SQL procedure.</p>
<div id="ADQUE3488" class="example">
<p class="titleinexample"><a id="CJFCCBCI"></a>Example 23-8 Creating a Function to Determine the Value of the Action Attribute</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

CREATE FUNCTION oe.get_oe_action (event IN ANYDATA) 
RETURN VARCHAR2
IS 
  ord         oe.order_event_typ;
  cust        oe.customer_event_typ;
  num         NUMBER;
  type_name   VARCHAR2(61);
BEGIN
  type_name := event.GETTYPENAME; 
  IF type_name = &#39;OE.ORDER_EVENT_TYP&#39; THEN
    num := event.GETOBJECT(ord);
    RETURN ord.action;  
  ELSIF type_name = &#39;OE.CUSTOMER_EVENT_TYP&#39; THEN
    num := event.GETOBJECT(cust);
    RETURN cust.action; 
  ELSE
    RETURN NULL;
  END IF;
END;
/
GRANT EXECUTE ON get_oe_action TO strmadmin;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFGEEEJ">Example 23-9</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a PL/SQL procedure called <code>mes_handler</code> that is used as a message handler by the apply process. You also grant <code>EXECUTE</code> privilege on this procedure to administrator user <code>strmadmin</code>. This procedure takes the payload in a user-enqueued message of type <code>oe.order_event_typ</code> or <code>oe.customer_event_typ</code> and inserts it as a row in the <code>oe.orders</code> table or <code>oe.customers</code> table, respectively.</p>
<div id="ADQUE3489" class="example">
<p class="titleinexample"><a id="CJFGEEEJ"></a>Example 23-9 Creating a Message Handler</p>
<pre>set echo offset verify offACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

CREATE PROCEDURE oe.mes_handler (event IN ANYDATA) IS
  ord           oe.order_event_typ;
  cust          oe.customer_event_typ;
  num           NUMBER;
  type_name     VARCHAR2(61);
BEGIN
  type_name := event.GETTYPENAME;
  IF type_name = &#39;OE.ORDER_EVENT_TYP&#39; THEN
    num := event.GETOBJECT(ord);
    INSERT INTO oe.orders VALUES (ord.order_id, ord.order_date, 
      ord.order_mode, ord.customer_id, ord.order_status, ord.order_total, 
      ord.sales_rep_id, ord.promotion_id); 
  ELSIF type_name = &#39;OE.CUSTOMER_EVENT_TYP&#39; THEN
    num := event.GETOBJECT(cust);
    INSERT INTO oe.customers VALUES (cust.customer_id, cust.cust_first_name, 
      cust.cust_last_name, cust.cust_address, cust.phone_numbers, 
      cust.nls_language, cust.nls_territory, cust.credit_limit, cust.cust_email, 
      cust.account_mgr_id, cust.date_of_birth, cust.marital_status, 
      cust.gender, cust.income_level); 
  END IF;
END;
/
GRANT EXECUTE ON mes_handler TO strmadmin;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFBCEBJ">Example 23-10</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create an evaluation context for the rule set.</p>
<div id="ADQUE3490" class="example">
<p class="titleinexample"><a id="CJFBCEBJ"></a>Example 23-10 Creating an Evaluation Context for the Rule Set</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDE
CONNECT strmadmin/&amp;password@db01;
set echo on

DECLARE
  table_alias     SYS.RE$TABLE_ALIAS_LIST;
BEGIN
  table_alias := SYS.RE$TABLE_ALIAS_LIST(
    SYS.RE$TABLE_ALIAS(&#39;tab&#39;, &#39;strmadmin.oe_queue_table&#39;));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name  =&gt;  &#39;oe_eval_context&#39;, 
    table_aliases            =&gt;  table_alias);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFHFIFF">Example 23-11</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create a rule set for the apply process.</p>
<div id="ADQUE3491" class="example">
<p class="titleinexample"><a id="CJFHFIFF"></a>Example 23-11 Creating a Rule Set for the Apply Process</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDE
CONNECT strmadmin/&amp;password@db01;
set echo on

BEGIN
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name       =&gt;  &#39;apply_oe_rs&#39;,
    evaluation_context  =&gt;  &#39;strmadmin.oe_eval_context&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFBIHAD">Example 23-12</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create a rule that evaluates to <code>TRUE</code> if the <code>action</code> value of a message is <code>apply</code>. Notice that <code>tab.user_data</code> is passed to the <code>oe.get_oe_action</code> function. The <code>tab.user_data</code> column holds the event payload in a queue table. The table alias for the queue table was specified as <code>tab</code> in <a href="#CJFBCEBJ">Example 23-10</a>.</p>
<div id="ADQUE3492" class="example">
<p class="titleinexample"><a id="CJFBIHAD"></a>Example 23-12 Creating a Rule that Evaluates to TRUE if Action Is Apply</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDE
CONNECT strmadmin/&amp;password@db01; 
set echo on

BEGIN
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name   =&gt; &#39;strmadmin.apply_action&#39;,
    condition   =&gt; &#39;oe.get_oe_action(tab.user_data) = &#39;&#39;APPLY&#39;&#39; &#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFFIBEG">Example 23-13</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create a rule that evaluates to <code>TRUE</code> if the event in the queue is a row LCR that changes either the <code>oe.orders</code> table or the <code>oe.customers</code> table. This rule enables the apply process to apply user-enqueued changes to the tables directly.</p>
<p>For convenience, this rule uses the Oracle-supplied evaluation context <code>SYS.STREAMS$_EVALUATION_CONTEXT</code> because the rule is used to evaluate LCRs. When this rule is added to the rule set, the Oracle-supplied evaluation context is used for the rule during evaluation instead of evaluation context <code>oe_eval_context</code> created in <a href="#CJFBCEBJ">Example 23-10</a>.</p>
<div id="ADQUE3493" class="example">
<p class="titleinexample"><a id="CJFFIBEG"></a>Example 23-13 Creating a Rule that Evaluates to TRUE for Row LCR Events</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDE
CONNECT strmadmin/&amp;password@db01;
set echo on

BEGIN
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name           =&gt;  &#39;apply_lcrs&#39;,
    condition           =&gt;  &#39;:dml.GET_OBJECT_OWNER() = &#39;&#39;OE&#39;&#39; AND &#39; || 
                            &#39; (:dml.GET_OBJECT_NAME() = &#39;&#39;ORDERS&#39;&#39; OR &#39; || 
                            &#39;:dml.GET_OBJECT_NAME() = &#39;&#39;CUSTOMERS&#39;&#39;) &#39;,
    evaluation_context  =&gt;  &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFFECDD">Example 23-14</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to add the <code>apply_action</code> rule created in <a href="#CJFBIHAD">Example 23-12</a> and the <code>apply_lcrs</code> rule created in <a href="#CJFFIBEG">Example 23-13</a> to the <code>apply_oe_rs</code> rule set created in <a href="#CJFHFIFF">Example 23-11</a>.</p>
<div id="ADQUE3494" class="example">
<p class="titleinexample"><a id="CJFFECDD"></a>Example 23-14 Adding Rules to the Rule Set</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDECONNECT strmadmin/&amp;password@db01;set echo on

BEGIN
  DBMS_RULE_ADM.ADD_RULE(
    rule_name          =&gt;  &#39;apply_action&#39;,
    rule_set_name      =&gt;  &#39;apply_oe_rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name          =&gt;  &#39;apply_lcrs&#39;,
    rule_set_name      =&gt;  &#39;apply_oe_rs&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFGABHB">Example 23-15</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create an apply process that is associated with queue <code>oe_queue</code>, that uses the <code>apply_oe_rs</code> rule set, and that uses the <code>mes_handler</code> procedure as a message handler.</p>
<div id="ADQUE3495" class="example">
<p class="titleinexample"><a id="CJFGABHB"></a>Example 23-15 Creating an Apply Process</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDECONNECT strmadmin/&amp;password@db01;set echo on

BEGIN
  DBMS_APPLY_ADM.CREATE_APPLY(
    queue_name       =&gt;  &#39;strmadmin.oe_queue&#39;,
    apply_name       =&gt;  &#39;apply_oe&#39;,
    rule_set_name    =&gt;  &#39;strmadmin.apply_oe_rs&#39;,
    message_handler  =&gt;  &#39;oe.mes_handler&#39;,
    apply_user       =&gt;  &#39;oe&#39;,
    apply_captured   =&gt;  false);
END;
/
</pre></div>
<!-- class="example" -->
<p>Because <code>oe</code> was specified as the apply user when the apply process was created in <a href="#CJFGABHB">Example 23-15</a>, you must grant this user <code>EXECUTE</code> privilege on the <code>strmadmin.apply_oe_rs</code> rule set used by the apply process. You connect to database <code>db01</code> as administrator user <code>strmadmin</code> to accomplish this in <a href="#CJFCCFEB">Example 23-16</a>.</p>
<div id="ADQUE3496" class="example">
<p class="titleinexample"><a id="CJFCCFEB"></a>Example 23-16 Granting EXECUTE Privilege on the Rule Set To oe User</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDECONNECT strmadmin/&amp;password@db01;set echo on

BEGIN 
  DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.EXECUTE_ON_RULE_SET,
    object_name  =&gt; &#39;strmadmin.apply_oe_rs&#39;,
    grantee      =&gt; &#39;oe&#39;, 
    grant_option =&gt; FALSE);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFFAEGI">Example 23-17</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to start the apply process with the <code>disable_on_error</code> parameter set to <code>n</code> so that the apply process is not disabled if it encounters an error.</p>
<div id="ADQUE3497" class="example">
<p class="titleinexample"><a id="CJFFAEGI"></a>Example 23-17 Starting the Apply Process</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDECONNECT strmadmin/&amp;password@db01;set echo on

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply_oe&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;n&#39;);
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt;  &#39;apply_oe&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1006391"></a>
<div id="ADQUE3498" class="sect1">
<h2 class="sect1"><a id="sthref2094"></a>Configuring Explicit Dequeue</h2>
<p>The examples in this section illustrate how to configure explicit dequeue of messages based on message contents.</p>
<p>In <a href="#CJFFDHAJ">Example 23-18</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to create agent <code>explicit_dq</code>. This agent is used to perform explicit dequeue operations on the <code>oe_queue</code> queue.</p>
<div id="ADQUE3499" class="example">
<p class="titleinexample"><a id="CJFFDHAJ"></a>Example 23-18 Creating an Agent for Explicit Dequeue</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDECONNECT strmadmin/&amp;password@db01;set echo on

BEGIN
  SYS.DBMS_AQADM.CREATE_AQ_AGENT(
    agent_name      =&gt; &#39;explicit_dq&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>The <code>oe_queue</code> queue is a secure queue because it was created using <code>SET_UP_QUEUE</code> in <a href="#CJFJCJJD">Example 23-2</a>. For a user to perform enqueue and dequeue operations on a secure queue, the user must be configured as a secure queue user of the queue.</p>
<p>In <a href="#CJFGFEGA">Example 23-19</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to associate the <code>oe</code> user with agent <code>explicit_dq</code>. The <code>oe</code> user can perform dequeue operations on the <code>oe_queue</code> queue when the agent is used to create a <a href="glossary.htm#CBADJIIA"><span class="xrefglossterm">subscriber</span></a> to the queue in <a href="#CJFHDFFJ">Example 23-20</a>.</p>
<div id="ADQUE3500" class="example">
<p class="titleinexample"><a id="CJFGFEGA"></a>Example 23-19 Associating User oe with Agent explicit_dq</p>
<pre>set echo offset verify offACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDECONNECT strmadmin/&amp;password@db01;set echo on

BEGIN
  DBMS_AQADM.ENABLE_DB_ACCESS(
    agent_name  =&gt; &#39;explicit_dq&#39;,
    db_username =&gt; &#39;oe&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFHDFFJ">Example 23-20</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code> to add a subscriber to the <code>oe_queue</code> queue. This subscriber will perform explicit dequeues of messages. A subscriber rule is used to dequeue any messages where the <code>action</code> value is not <code>apply</code>. If the action value is <code>apply</code> for a message, then the message is ignored by the subscriber. Such messages are dequeued and processed by the apply process.</p>
<div id="ADQUE3501" class="example">
<p class="titleinexample"><a id="CJFHDFFJ"></a>Example 23-20 Adding a Subscriber to the oe_queue Queue</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for STRMADMIN: &#39; HIDECONNECT strmadmin/&amp;password@db01;set echo on

DECLARE
  subscriber SYS.AQ$_AGENT;
BEGIN
  subscriber :=  SYS.AQ$_AGENT(&#39;explicit_dq&#39;, NULL, NULL);
  SYS.DBMS_AQADM.ADD_SUBSCRIBER(
    queue_name  =&gt;  &#39;strmadmin.oe_queue&#39;,
    subscriber  =&gt;  subscriber,
    rule        =&gt;  &#39;oe.get_oe_action(tab.user_data) != &#39;&#39;APPLY&#39;&#39;&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFICDJH">Example 23-21</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a PL/SQL procedure called <code>explicit_dq</code> to dequeue messages explicitly using the subscriber created in <a href="#CJFHDFFJ">Example 23-20</a>.</p>
<p>The procedure commits after the dequeue of the messages. The commit informs the queue that the dequeued messages have been consumed successfully by this subscriber.</p>
<p>The procedure can process multiple transactions and uses two exception handlers. Exception handler <code>next_trans</code> moves to the next transaction, and exception handler <code>no_messages</code> exits the loop when there are no more messages.</p>
<div id="ADQUE3502" class="example">
<p class="titleinexample"><a id="CJFICDJH"></a>Example 23-21 Creating a Procedure to Dequeue Messages Explicitly</p>
<pre>SET ECHO OFFSET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

CREATE PROCEDURE oe.explicit_dq (consumer IN VARCHAR2) AS
  deqopt       DBMS_AQ.DEQUEUE_OPTIONS_T;
  mprop        DBMS_AQ.MESSAGE_PROPERTIES_T;
  msgid        RAW(16);
  payload      ANYDATA;
  new_messages BOOLEAN := TRUE;
  ord          oe.order_event_typ;
  cust         oe.customer_event_typ;
  tc           pls_integer;
  next_trans   EXCEPTION;
  no_messages  EXCEPTION; 
  pragma exception_init (next_trans, -25235);
  pragma exception_init (no_messages, -25228);
BEGIN
  deqopt.consumer_name := consumer;
  deqopt.wait := 1;
  WHILE (new_messages) LOOP
    BEGIN
    DBMS_AQ.DEQUEUE(
      queue_name          =&gt;  &#39;strmadmin.oe_queue&#39;,
      dequeue_options     =&gt;  deqopt,
      message_properties  =&gt;  mprop,
      payload             =&gt;  payload,
      msgid               =&gt;  msgid);
    COMMIT;
    deqopt.navigation := DBMS_AQ.NEXT;
    DBMS_OUTPUT.PUT_LINE(&#39;Message Dequeued&#39;);
    DBMS_OUTPUT.PUT_LINE(&#39;Type Name := &#39; || payload.GetTypeName);
    IF (payload.GetTypeName = &#39;OE.ORDER_EVENT_TYP&#39;) THEN
      tc := payload.GetObject(ord); 
      DBMS_OUTPUT.PUT_LINE(&#39;order_id     - &#39; || ord.order_id);
      DBMS_OUTPUT.PUT_LINE(&#39;order_date   - &#39; || ord.order_date);
      DBMS_OUTPUT.PUT_LINE(&#39;order_mode   - &#39; || ord.order_mode);
      DBMS_OUTPUT.PUT_LINE(&#39;customer_id  - &#39; || ord.customer_id);
      DBMS_OUTPUT.PUT_LINE(&#39;order_status - &#39; || ord.order_status);
      DBMS_OUTPUT.PUT_LINE(&#39;order_total  - &#39; || ord.order_total);
      DBMS_OUTPUT.PUT_LINE(&#39;sales_rep_id - &#39; || ord.sales_rep_id);
      DBMS_OUTPUT.PUT_LINE(&#39;promotion_id - &#39; || ord.promotion_id);
    END IF;
    IF (payload.GetTypeName = &#39;OE.CUSTOMER_EVENT_TYP&#39;) THEN
      tc := payload.GetObject(cust);
      DBMS_OUTPUT.PUT_LINE(&#39;customer_id       - &#39; || cust.customer_id);
      DBMS_OUTPUT.PUT_LINE(&#39;cust_first_name   - &#39; || cust.cust_first_name);
      DBMS_OUTPUT.PUT_LINE(&#39;cust_last_name    - &#39; || cust.cust_last_name);
      DBMS_OUTPUT.PUT_LINE(&#39;street_address    - &#39; || 
                              cust.cust_address.street_address);
      DBMS_OUTPUT.PUT_LINE(&#39;postal_code       - &#39; || 
                              cust.cust_address.postal_code);
      DBMS_OUTPUT.PUT_LINE(&#39;city              - &#39; || cust.cust_address.city);
      DBMS_OUTPUT.PUT_LINE(&#39;state_province    - &#39; || 
                              cust.cust_address.state_province);
      DBMS_OUTPUT.PUT_LINE(&#39;country_id        - &#39; || 
                              cust.cust_address.country_id);
      DBMS_OUTPUT.PUT_LINE(&#39;phone_number1     - &#39; || cust.phone_numbers(1));
      DBMS_OUTPUT.PUT_LINE(&#39;phone_number2     - &#39; || cust.phone_numbers(2));
      DBMS_OUTPUT.PUT_LINE(&#39;phone_number3     - &#39; || cust.phone_numbers(3));
      DBMS_OUTPUT.PUT_LINE(&#39;nls_language      - &#39; || cust.nls_language);
      DBMS_OUTPUT.PUT_LINE(&#39;nls_territory     - &#39; || cust.nls_territory);
      DBMS_OUTPUT.PUT_LINE(&#39;credit_limit      - &#39; || cust.credit_limit);
      DBMS_OUTPUT.PUT_LINE(&#39;cust_email        - &#39; || cust.cust_email);
      DBMS_OUTPUT.PUT_LINE(&#39;account_mgr_id    - &#39; || cust.account_mgr_id);
      DBMS_OUTPUT.PUT_LINE(&#39;date_of_birth     - &#39; || cust.date_of_birth);
      DBMS_OUTPUT.PUT_LINE(&#39;marital_status    - &#39; || cust.marital_status);
      DBMS_OUTPUT.PUT_LINE(&#39;gender            - &#39; || cust.gender);
      DBMS_OUTPUT.PUT_LINE(&#39;income_level      - &#39; || cust.income_level);
    END IF;
    EXCEPTION
      WHEN next_trans THEN
      deqopt.navigation := DBMS_AQ.NEXT_TRANSACTION;
      WHEN no_messages THEN
        new_messages  := FALSE;
        DBMS_OUTPUT.PUT_LINE(&#39;No more messagess&#39;);
     END;
  END LOOP; 
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1006600"></a>
<div id="ADQUE3503" class="sect1">
<h2 class="sect1"><a id="sthref2095"></a><a id="sthref2096"></a>Enqueuing Messages</h2>
<p>The examples in this section illustrate how to enqueue non-LCR messages and row LCR messages into a queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is possible to dequeue user-enqueued LCRs explicitly, but these examples do not illustrate this capability.</div>
<p>In <a href="#CJFEIEFA">Example 23-22</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to enqueue two messages with <code>apply</code> for the <code>action</code> value. Based on the apply process rules, the apply process dequeues and processes these messages with the <code>oe.mes_handler</code> message handler procedure created in <a href="#CJFGEEEJ">Example 23-9</a>. The <code>COMMIT</code> after the enqueues makes these two enqueues part of the same transaction. An enqueued message is not visible until the session that enqueued it commits the enqueue.</p>
<div id="ADQUE3504" class="example">
<p class="titleinexample"><a id="CJFEIEFA"></a>Example 23-22 Enqueuing Non-LCR Messages to Be Dequeued by an Apply Process</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

BEGIN
  oe.enq_proc(ANYDATA.convertobject(oe.order_event_typ(
    2500,&#39;05-MAY-01&#39;,&#39;online&#39;,117,3,44699,161,NULL,&#39;APPLY&#39;)));
END;
/
BEGIN
  oe.enq_proc(ANYDATA.convertobject(oe.customer_event_typ(
    990,&#39;Hester&#39;,&#39;Prynne&#39;,oe.cust_address_typ(&#39;555 Beacon Street&#39;,
    &#39;02109&#39;,&#39;Boston&#39;,&#39;MA&#39;,&#39;US&#39;),oe.phone_list_typ(&#39;+1 617 123 4104&#39;,
    &#39;+1 617 083 4381&#39;,&#39;+1 617 742 5813&#39;),&#39;i&#39;,&#39;AMERICA&#39;,5000,
    &#39;a@scarlet_letter.com&#39;,145,NULL,&#39;SINGLE&#39;,&#39;F&#39;,&#39;UNDER 50,000&#39;,&#39;APPLY&#39;)));
END;
/ 
COMMIT;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFDIIEA">Example 23-23</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to enqueue two messages with <code>dequeue</code> for the <code>action</code> value. The <code>oe.explicit_dq</code> procedure created in <a href="#CJFICDJH">Example 23-21</a> dequeues these messages because the <code>action</code> is not <code>apply</code>. Based on the apply process rules, the apply process ignores these messages. The <code>COMMIT</code> after the enqueues makes these two enqueues part of the same transaction.</p>
<div id="ADQUE3505" class="example">
<p class="titleinexample"><a id="CJFDIIEA"></a>Example 23-23 Enqueuing Non-LCR Messages to Be Dequeued Explicitly</p>
<pre>SET ECHO OFFSET VERIFY OFFACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDECONNECT oe/&amp;password@db01;set echo on

BEGIN
  oe.enq_proc(ANYDATA.convertobject(oe.order_event_typ(
    2501,&#39;22-JAN-00&#39;,&#39;direct&#39;,117,3,22788,161,NULL,&#39;DEQUEUE&#39;)));
END;
/
BEGIN
  oe.enq_proc(ANYDATA.convertobject(oe.customer_event_typ(
    991,&#39;Nick&#39;,&#39;Carraway&#39;,oe.cust_address_typ(&#39;10th Street&#39;,
    &#39;11101&#39;,&#39;Long Island&#39;,&#39;NY&#39;,&#39;US&#39;),oe.phone_list_typ(&#39;+1 718 786 2287&#39;, 
    &#39;+1 718 511 9114&#39;, &#39;+1 718 888 4832&#39;),&#39;i&#39;,&#39;AMERICA&#39;,3000,
    &#39;nick@great_gatsby.com&#39;,149,NULL,&#39;MARRIED&#39;,&#39;M&#39;,&#39;OVER 150,000&#39;,&#39;DEQUEUE&#39;)));
END;
/
COMMIT;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFCDCED">Example 23-24</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create a row LCR that inserts a row into the <code>oe.orders</code> table and another LCR that updates that row. The apply process applies these messages directly.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Enqueued LCRs should commit at transaction boundaries. In this example, a <code>COMMIT</code> statement is run after each enqueue, making each enqueue a separate transaction. However, you can perform multiple LCR enqueues before a commit if there is more than one LCR in a transaction.</div>
<div id="ADQUE3506" class="example">
<p class="titleinexample"><a id="CJFCDCED"></a>Example 23-24 Enqueuing Row LCRs to Be Dequeued by an Apply Process</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDE
CONNECT oe/&amp;password@db01;
set echo on

DECLARE
  newunit1  SYS.LCR$_ROW_UNIT;
  newunit2  SYS.LCR$_ROW_UNIT;
  newunit3  SYS.LCR$_ROW_UNIT;
  newunit4  SYS.LCR$_ROW_UNIT;
  newunit5  SYS.LCR$_ROW_UNIT;
  newunit6  SYS.LCR$_ROW_UNIT;
  newunit7  SYS.LCR$_ROW_UNIT;
  newunit8  SYS.LCR$_ROW_UNIT;
  newvals   SYS.LCR$_ROW_LIST;
BEGIN
  newunit1 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_ID&#39;,ANYDATA.ConvertNumber(2502),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newunit2 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_DATE&#39;,ANYDATA.ConvertTimestampLTZ(&#39;04-NOV-00&#39;),DBMS_LCR.NOT_A_LOB,
    NULL,NULL);
  newunit3 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_MODE&#39;,ANYDATA.ConvertVarchar2(&#39;online&#39;),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newunit4 := SYS.LCR$_ROW_UNIT(
    &#39;CUSTOMER_ID&#39;,ANYDATA.ConvertNumber(145),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newunit5 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_STATUS&#39;,ANYDATA.ConvertNumber(3),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newunit6 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_TOTAL&#39;,ANYDATA.ConvertNumber(35199),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newunit7 := SYS.LCR$_ROW_UNIT(
    &#39;SALES_REP_ID&#39;,ANYDATA.ConvertNumber(160),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newunit8 := SYS.LCR$_ROW_UNIT(
    &#39;PROMOTION_ID&#39;,ANYDATA.ConvertNumber(1),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newvals := SYS.LCR$_ROW_LIST(
    newunit1,newunit2,newunit3,newunit4,newunit5,newunit6,newunit7,newunit8);
  oe.enq_row_lcr(&#39;DB01&#39;,&#39;INSERT&#39;,&#39;OE&#39;,&#39;ORDERS&#39;,NULL,newvals);
END;
/
COMMIT;
DECLARE
  oldunit1  SYS.LCR$_ROW_UNIT;
  oldunit2  SYS.LCR$_ROW_UNIT;
  oldvals   SYS.LCR$_ROW_LIST;
  newunit1  SYS.LCR$_ROW_UNIT;
  newvals   SYS.LCR$_ROW_LIST;
BEGIN
  oldunit1 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_ID&#39;,ANYDATA.ConvertNumber(2502),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  oldunit2 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_TOTAL&#39;,ANYDATA.ConvertNumber(35199),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  oldvals := SYS.LCR$_ROW_LIST(oldunit1,oldunit2);
  newunit1 := SYS.LCR$_ROW_UNIT(
    &#39;ORDER_TOTAL&#39;,ANYDATA.ConvertNumber(5235),DBMS_LCR.NOT_A_LOB,NULL,NULL);
  newvals := SYS.LCR$_ROW_LIST(newunit1);
  oe.enq_row_lcr(&#39;DB01&#39;,&#39;UPDATE&#39;,&#39;OE&#39;,&#39;ORDERS&#39;,oldvals,newvals);
END;
/
COMMIT;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1006841"></a>
<div id="ADQUE3507" class="sect1">
<h2 class="sect1"><a id="sthref2097"></a><a id="sthref2098"></a><a id="sthref2099"></a>Dequeuing Messages Explicitly and Querying for Applied Messages</h2>
<p>The examples in this section illustrate how to dequeue messages explicitly and query messages that were applied by the apply process. The examples use messages that were enqueued in the previous section.</p>
<p>In <a href="#CJFHAEAJ">Example 23-25</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to run procedure <code>explicit_dq</code>, created in <a href="#CJFICDJH">Example 23-21</a>. You specify subscriber <code>explicit_dq</code>, added in <a href="#CJFHDFFJ">Example 23-20</a>, as the <a href="glossary.htm#CBAJDFJA"><span class="xrefglossterm">consumer</span></a> of the messages you want to dequeue. In these examples, messages that are not dequeued explicitly by this procedure are dequeued by the apply process.</p>
<div id="ADQUE3508" class="example">
<p class="titleinexample"><a id="CJFHAEAJ"></a>Example 23-25 Dequeuing Messages Explicitly</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDE
CONNECT oe/&amp;password@db01;
set echo on

CREATE PROCEDURE oe.enq_proc (payload ANYDATA)  IS 
SET SERVEROUTPUT ON SIZE 100000;
EXEC oe.explicit_dq(&#39;explicit_dq&#39;);
</pre></div>
<!-- class="example" -->
<p>The example returns the payload of the messages enqueued in <a href="#CJFDIIEA">Example 23-23</a>:</p>
<pre>Message Dequeued
Type Name := OE.ORDER_EVENT_TYP
order_id     - 2501
order_date   - 22-JAN-00 12.00.00.000000 AM
order_mode   - direct
customer_id  - 117
order_status - 3
order_total  - 22788
sales_rep_id - 161
promotion_id -
Message Dequeued
Type Name := OE.CUSTOMER_EVENT_TYP
customer_id       - 991
cust_first_name   - Nick
cust_last_name    - Carraway
street_address    - 10th Street
postal_code       - 11101
city              - Long Island
state_province    - NY
country_id        - US
phone_number1     - +1 718 786 2287
phone_number2     - +1 718 511 9114
phone_number3     - +1 718 888 4832
nls_language      - i
nls_territory     - AMERICA
credit_limit      - 3000
cust_email        - nick@great_gatsby.com
account_mgr_id    - 149
date_of_birth     -
marital_status    - MARRIED
gender            - M
income_level      - OVER 150,000
No more messages
</pre>
<p><a href="#CJFFEJHB">Example 23-26</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to query the <code>oe.orders</code> and <code>oe.customers</code> tables to see the rows corresponding to the messages applied by apply process <code>apply_oe</code>, created in <a href="#CJFGABHB">Example 23-15</a>.</p>
<div id="ADQUE3509" class="example">
<p class="titleinexample"><a id="CJFFEJHB"></a>Example 23-26 Querying for Applied Messages</p>
<pre>SET ECHO OFF
SET VERIFY OFF
ACCEPT password CHAR PROMPT &#39;Enter the password for OE: &#39; HIDE
CONNECT oe/&amp;password@db01; 
set echo on

CREATE PROCEDURE oe.enq_proc (payload ANYDATA)  IS 
SELECT order_id, order_date, customer_id, order_total
  FROM oe.orders WHERE order_id = 2500;
SELECT cust_first_name, cust_last_name, cust_email 
  FROM oe.customers WHERE customer_id = 990;
SELECT order_id, order_date, customer_id, order_total 
  FROM oe.orders WHERE order_id = 2502;
</pre></div>
<!-- class="example" -->
<p>The example returns three rows:</p>
<pre>  ORDER_ID ORDER_DATE                     CUSTOMER_ID ORDER_TOTAL
---------- ------------------------------ ----------- -----------
      2500 05-MAY-01 12.00.00.000000 AM           117       44699
 
1 row selected.

CUST_FIRST_NAME      CUST_LAST_NAME       CUST_EMAIL
-------------------- -------------------- ------------------------------
Hester               Prynne               a@scarlet_letter.com
 
1 row selected.

  ORDER_ID ORDER_DATE                     CUSTOMER_ID ORDER_TOTAL
---------- ------------------------------ ----------- -----------
      2502 04-NOV-00 12.00.00.000000 AM           145        5235
 
1 row selected.
</pre></div>
<!-- class="sect1" -->
<a id="i1006898"></a>
<div id="ADQUE3510" class="sect1">
<h2 class="sect1"><a id="sthref2100"></a><a id="sthref2101"></a><a id="sthref2102"></a><a id="sthref2103"></a><a id="sthref2104"></a><a id="sthref2105"></a>Enqueuing and Dequeuing Messages Using JMS</h2>
<p>The examples in this section illustrate how to enqueue non-LCR messages and row LCRs into a queue and then dequeue them using <a href="glossary.htm#i432286"><span class="xrefglossterm">Java Message Service</span></a> (JMS).</p>
<p>Note that the Oracle Database does not support JDK 1.2, JDK 1.3, JDK 1.4, JDK 5.n, and all classes12*.* files. You need to use the <code>ojdbc6.jar</code> and <code>ojbc7.jar</code> files with JDK 6.n and JDK 7.n, respectively. The following jar and zip files should be in the <code>CLASSPATH</code> based on the release of JDK you are using.</p>
<p>For JDK 6.n, the <code>CLASSPATH</code> must contain:</p>
<pre><span class="italic">ORACLE_HOME</span>/jdbc/lib/ojdbc6.jar
</pre>
<p>For JDK 7.n, the <code>CLASSPATH</code> must contain:</p>
<pre><span class="italic">ORACLE_HOME</span>/jdbc/lib/ojdbc7.jar 
</pre>
<p>The following files are used for either JDK version:</p>
<pre><span class="italic">ORACLE_HOME</span>/lib/jta.jar
<span class="italic">ORACLE_HOME</span>/xdk/lib/xmlparserv2.jar
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/xdb.jar
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/aqapi.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/jmscommon.jar
</pre>
<p>Also, make sure <code>LD_LIBRARY_PATH</code> (Linux and Solaris) or <code>PATH</code> (Windows) includes <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/lib</code>.</p>
<p>These examples show sample schema user <code>oe</code> enqueuing JMS messages into a queue and agent <code>explicit_dq</code> dequeuing them. Agent <code>explicit_dq</code> was created in <a href="#CJFFDHAJ">Example 23-18</a>, associated with sample schema user <code>oe</code> in <a href="#CJFGFEGA">Example 23-19</a>, and made a subscriber to queue <code>oe_queue</code> in <a href="#CJFHDFFJ">Example 23-20</a>.</p>
<p>Sample schema user <code>oe</code> was granted <code>EXECUTE</code> on <code>DBMS_AQ</code> in <a href="#CJFFGEJD">Example 23-1</a>. In order for this user to use the Oracle JMS interface, it must have <code>EXECUTE</code> privilege on <code>DBMS_AQIN</code> as well. In <a href="#CJFEICEJ">Example 23-27</a>, you connect to database <code>db01</code> as a user with administrative privileges to grant the necessary privilege to <code>oe</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_envir.htm#CHDIIIFB">&#34;Accessing Standard and Oracle JMS Applications&#34;</a></div>
<div id="ADQUE3511" class="example">
<p class="titleinexample"><a id="CJFEICEJ"></a>Example 23-27 Granting EXECUTE on DBMS_AQIN to User oe</p>
<pre>GRANT EXECUTE on DBMS_AQIN to oe;
</pre></div>
<!-- class="example" -->
<p>Enqueue of JMS types and XML types does not work with Oracle Streams <code>ANYDATA</code> queues unless you call <code>DBMS_AQADM.ENABLE_JMS_TYPES(</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>)</code> after <code>DBMS_STREAMS_ADM.SET_UP_QUEUE()</code>. In <a href="#CJFHGCDE">Example 23-28</a>, you connect to database <code>db01</code> as administrator user <code>strmadmin</code>, created in <a href="#CJFFGEJD">Example 23-1</a>, to run <code>ENABLE_JMS_TYPES</code> on <code>ANYDATA</code> queue table <code>oe_queue_table</code>, created in <a href="#CJFJCJJD">Example 23-2</a>.</p>
<div id="ADQUE3512" class="example">
<p class="titleinexample"><a id="CJFHGCDE"></a>Example 23-28 Enabling JMS Types on an ANYDATA Queue</p>
<pre>CONNECT strmadmin;
Enter password: <span class="italic">password</span>
BEGIN
  DBMS_AQADM.ENABLE_JMS_TYPES(&#39;oe_queue_table&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Enabling an Oracle Streams queue for these types may affect import/export of the queue table.</div>
<p>In <a href="#CJFGBIIJ">Example 23-29</a>, you connect to database <code>db01</code> as sample schema user <code>oe</code> to create types <code>address</code> and <code>person</code>.</p>
<div id="ADQUE3513" class="example">
<p class="titleinexample"><a id="CJFGBIIJ"></a>Example 23-29 Creating Oracle Object Types address and person</p>
<pre>CONNECT oe;
Enter password: <span class="italic">password</span>
CREATE TYPE address AS OBJECT (street VARCHAR (30), num NUMBER)
/ 
CREATE TYPE person AS OBJECT (name VARCHAR (30), home ADDRESS)
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFBHJEI">Example 23-30</a>, you use JPublisher to generate two Java classes named <code>JPerson</code> and <code>JAddress</code> for the <code>person</code> and <code>address</code> types, respectively. The input to JPublisher is a file called <code>input.typ</code> with the following lines:</p>
<pre>SQL PERSON AS JPerson
SQL ADDRESS AS JAddress
</pre>
<div id="ADQUE3514" class="example">
<p class="titleinexample"><a id="CJFBHJEI"></a>Example 23-30 Creating Java Classes That Map to Oracle Object Types</p>
<pre>jpub -input=input.typ -user=OE/OE
</pre></div>
<!-- class="example" -->
<p><a href="#CJFCBFCH">Example 23-31</a> is the Java code that you use to publish JMS text messages, LCRs, and non-LCR ADT messages into an Oracle Streams topic. It does the following:</p>
<ul>
<li>
<p>Creates a <code>TopicConnectionFactory</code> using the JDBC OCI driver</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JDBC OCI driver is your only choice for accessing Oracle Streams through JMS.</div>
</li>
<li>
<p>Creates a <code>TopicSession</code></p>
</li>
<li>
<p>Starts the connection</p>
</li>
<li>
<p>Creates method <code>publishUserMessages()</code> to publish an ADT message and a JMS text message to an Oracle Streams topic</p>
</li>
<li>
<p>Creates method <code>publishLcrMessages()</code> to publish an XML LCR message to an Oracle Streams topic</p>
</li>
<li>
<p>Publishes three messages, providing feedback as it proceeds</p>
</li>
</ul>
<p>Method <code>publishUserMessages()</code> does the following:</p>
<ul>
<li>
<p>Gets the topic</p>
</li>
<li>
<p>Creates a publisher</p>
</li>
<li>
<p>Specifies agent <code>explicit_enq</code> to access queue <code>oe_queue</code></p>
</li>
<li>
<p>Creates a <code>PERSON</code> ADT message</p>
</li>
<li>
<p>Sets the payload in the message</p>
</li>
<li>
<p>Specifies <code>explicit_dq</code> as the recipient</p>
</li>
<li>
<p>Publishes the <code>PERSON</code> ADT message</p>
</li>
<li>
<p>Creates a JMS Text message</p>
</li>
<li>
<p>Publishes the JMS Text message</p>
</li>
</ul>
<p>Method <code>publishLcrMessages()</code> does the following:</p>
<ul>
<li>
<p>Gets the topic</p>
</li>
<li>
<p>Creates a publisher</p>
</li>
<li>
<p>Gets the JDBC connection</p>
</li>
<li>
<p>Specifies agent <code>explicit_enq</code> to access queue <code>oe_queue</code></p>
</li>
<li>
<p>Creates an ADT message</p>
</li>
<li>
<p>Creates the LCR representation in XML</p>
</li>
<li>
<p>Creates the <code>XMLType</code> containing the LCR</p>
</li>
<li>
<p>Sets the payload in the message</p>
</li>
<li>
<p>Specifies <code>explicit_dq</code> as the recipient</p>
</li>
<li>
<p>Publishes the LCR</p>
</li>
</ul>
<p>The code is compiled in <a href="#CJFFFCFB">Example 23-33</a>. For now, just save it as <code>StreamsEnq.java</code>.</p>
<div id="ADQUE3515" class="example">
<p class="titleinexample"><a id="CJFCBFCH"></a>Example 23-31 Java Code for Enqueuing Messages</p>
<pre>import oracle.AQ.*;
import oracle.jms.*;
import javax.jms.*;
import java.lang.*;
import oracle.xdb.*;
 
public class StreamsEnq
{
  public static void main (String args [])
       throws java.sql.SQLException, ClassNotFoundException, JMSException
  {
     TopicConnectionFactory tc_fact= null;
     TopicConnection        t_conn = null;
     TopicSession           t_sess = null;
 
     try
     {
       if (args.length &lt; 3 )
         System.out.println(&#34;Usage:java filename [SID] [HOST] [PORT]&#34;);
       else 
       {
         tc_fact = AQjmsFactory.getTopicConnectionFactory(
                      args[1], args[0], Integer.parseInt(args[2]), &#34;oci8&#34;);
         t_conn = tc_fact.createTopicConnection( &#34;OE&#34;,&#34;OE&#34;);
         t_sess = t_conn.createTopicSession(true, Session.CLIENT_ACKNOWLEDGE);
         t_conn.start() ;
         publishUserMessages(t_sess);
         publishLcrMessages(t_sess);
         t_sess.close() ;
         t_conn.close() ;
         System.out.println(&#34;End of StreamsEnq Demo&#34;) ;
       }
     }
     catch (Exception ex)
     {
       System.out.println(&#34;Exception-1: &#34; + ex);
       ex.printStackTrace();
     }
  }
 
  public static void publishUserMessages(TopicSession t_sess) throws Exception
  {
    Topic           topic     = null;
    TopicPublisher  t_pub     = null;
    JPerson         pers      = null;
    JAddress        addr      = null;
    TextMessage     t_msg     = null;
    AdtMessage      adt_msg   = null;
    AQjmsAgent      agent     = null;
    AQjmsAgent[]    recipList = null;
 
    try
    {
      topic = ((AQjmsSession)t_sess).getTopic(&#34;strmadmin&#34;, &#34;oe_queue&#34;);
      t_pub = t_sess.createPublisher(topic);
      agent = new AQjmsAgent(&#34;explicit_enq&#34;, null);
      adt_msg = ((AQjmsSession)t_sess).createAdtMessage();
      pers = new JPerson();
      addr = new JAddress();
      addr.setNum(new java.math.BigDecimal(500));
      addr.setStreet(&#34;Oracle Pkwy&#34;);
      pers.setName(&#34;Mark&#34;);
      pers.setHome(addr);
      adt_msg.setAdtPayload(pers);
      ((AQjmsMessage)adt_msg).setSenderID(agent);
      System.out.println(&#34;Publish message 1 -type  PERSON\n&#34;);
      recipList = new AQjmsAgent[1];
      recipList[0] = new AQjmsAgent(&#34;explicit_dq&#34;, null);
      ((AQjmsTopicPublisher)t_pub).publish(topic, adt_msg, recipList);
      t_sess.commit();
 
      t_msg = t_sess.createTextMessage();
      t_msg.setText(&#34;Test message&#34;);
      t_msg.setStringProperty(&#34;color&#34;, &#34;BLUE&#34;);
      t_msg.setIntProperty(&#34;year&#34;, 1999);
      ((AQjmsMessage)t_msg).setSenderID(agent);
      System.out.println(&#34;Publish message 2 -type  JMS TextMessage\n&#34;);
      ((AQjmsTopicPublisher)t_pub).publish(topic, t_msg, recipList);
      t_sess.commit();
 
    }
    catch (JMSException jms_ex)
    {
      System.out.println(&#34;JMS Exception: &#34; + jms_ex);
      if(jms_ex.getLinkedException() != null)
        System.out.println(&#34;Linked Exception: &#34; + jms_ex.getLinkedException());
    }
  }
 
  public static void publishLcrMessages(TopicSession t_sess) throws Exception
  {
    Topic                topic     = null;
    TopicPublisher       t_pub     = null;
    XMLType              xml_lcr   = null;
    AdtMessage           adt_msg   = null;
    AQjmsAgent           agent     = null;
    StringBuffer         lcr_data  = null;
    AQjmsAgent[]         recipList = null;
    java.sql.Connection  db_conn   = null;
 
    try
    {
      topic = ((AQjmsSession)t_sess).getTopic(&#34;strmadmin&#34;, &#34;oe_queue&#34;);
      t_pub = t_sess.createPublisher(topic);
      db_conn = ((AQjmsSession)t_sess).getDBConnection();
      agent = new AQjmsAgent(&#34;explicit_enq&#34;, null);
      adt_msg = ((AQjmsSession)t_sess).createAdtMessage();
      lcr_data = new StringBuffer();
 
      lcr_data.append(&#34;&lt;ROW_LCR &#34;);
      lcr_data.append(&#34;xmlns=&#39;http://xmlns.oracle.com/streams/schemas/lcr&#39; \n&#34;);
      lcr_data.append(&#34;xmlns:xsi=&#39;http://www.w3.org/2001/XMLSchema-instance&#39; \n&#34;);
      lcr_data.append(&#34;xsi:schemaLocation=&#39;http://xmlns.oracle.com/streams/schemas/lcr &#34;); 
      lcr_data.append(&#34;http://xmlns.oracle.com/streams/schemas/lcr/streamslcr.xsd&#39;&#34;);
      lcr_data.append(&#34;&gt; \n&#34;);
      lcr_data.append(&#34;&lt;source_database_name&gt;source_dbname&lt;/source_database_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;command_type&gt;INSERT&lt;/command_type&gt; \n&#34;);
      lcr_data.append(&#34;&lt;object_owner&gt;Ram&lt;/object_owner&gt; \n&#34;);
      lcr_data.append(&#34;&lt;object_name&gt;Emp&lt;/object_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;tag&gt;0ABC&lt;/tag&gt; \n&#34;);
      lcr_data.append(&#34;&lt;transaction_id&gt;0.0.0&lt;/transaction_id&gt; \n&#34;);
      lcr_data.append(&#34;&lt;scn&gt;0&lt;/scn&gt; \n&#34;);
      lcr_data.append(&#34;&lt;old_values&gt; \n&#34;);
      lcr_data.append(&#34;&lt;old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C01&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;varchar2&gt;Clob old&lt;/varchar2&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C02&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;varchar2&gt;A123FF&lt;/varchar2&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C03&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;date&gt;&lt;value&gt;1997-11-24&lt;/value&gt;&lt;format&gt;SYYYY-MM-DD&lt;/format&gt;&lt;/date&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C04&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;timestamp&gt;&lt;value&gt;1999-05-31T13:20:00.000&lt;/value&gt;&#34;);
      lcr_data.append(&#34;&lt;format&gt;SYYYY-MM-DD\&#34;T\&#34;HH24:MI:SS.FF&lt;/format&gt;&lt;/timestamp&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C05&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;raw&gt;ABCDE&lt;/raw&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/old_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/old_values&gt; \n&#34;);
      lcr_data.append(&#34;&lt;new_values&gt; \n&#34;);
      lcr_data.append(&#34;&lt;new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C01&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;varchar2&gt;A123FF&lt;/varchar2&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C02&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;number&gt;35.23&lt;/number&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C03&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;number&gt;-100000&lt;/number&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C04&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;varchar2&gt;Hello&lt;/varchar2&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;column_name&gt;C05&lt;/column_name&gt; \n&#34;);
      lcr_data.append(&#34;&lt;data&gt;&lt;char&gt;world&lt;/char&gt;&lt;/data&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/new_value&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/new_values&gt; \n&#34;);
      lcr_data.append(&#34;&lt;/ROW_LCR&gt;&#34;);
 
      xml_lcr = oracle.xdb.XMLType.createXML(db_conn, lcr_data.toString());
      adt_msg.setAdtPayload(xml_lcr);
      ((AQjmsMessage)adt_msg).setSenderID(agent);
      System.out.println(&#34;Publish message 3 - XMLType containing LCR ROW\n&#34;);
      recipList = new AQjmsAgent[1];
      recipList[0] = new AQjmsAgent(&#34;explicit_dq&#34;, null);
      ((AQjmsTopicPublisher)t_pub).publish(topic, adt_msg, recipList);
      t_sess.commit();
 
    }
    catch (JMSException jms_ex)
    {
      System.out.println(&#34;JMS Exception: &#34; + jms_ex);
      if(jms_ex.getLinkedException() != null)
        System.out.println(&#34;Linked Exception: &#34; + jms_ex.getLinkedException());
    }
  }
}
</pre></div>
<!-- class="example" -->
<p><a href="#CJFDHHAF">Example 23-32</a> is the Java code you use to receive messages from an Oracle Streams topic. It does the following:</p>
<ul>
<li>
<p>Creates a <code>TopicConnectionFactory</code> using the JDBC OCI driver</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JDBC OCI driver is your only choice for accessing Oracle Streams through JMS.</div>
</li>
<li>
<p>Creates a <code>TopicSession</code></p>
</li>
<li>
<p>Starts the connection</p>
</li>
<li>
<p>Creates method <code>receiveMessages()</code> to receive messages from an Oracle Streams topic</p>
</li>
<li>
<p>Receives three messages, providing feedback as it proceeds</p>
</li>
</ul>
<p>Method <code>receiveMessages()</code> does the following:</p>
<ul>
<li>
<p>Gets the topic</p>
</li>
<li>
<p>Creates a <code>TopicReceiver</code> to receive messages for consumer <code>explicit_dq</code></p>
</li>
<li>
<p>Registers mappings for <code>ADDRESS</code> and <code>PERSON</code> in the JMS typemap</p>
</li>
<li>
<p>Registers a mapping for <code>XMLType</code> in the typemap (required for LCRs)</p>
</li>
<li>
<p>Receives the enqueued messages</p>
</li>
</ul>
<p>The code is compiled in <a href="#CJFFFCFB">Example 23-33</a>. For now, just save it as <code>StreamsDeq.java</code>.</p>
<div id="ADQUE3516" class="example">
<p class="titleinexample"><a id="CJFDHHAF"></a>Example 23-32 Java Code for Dequeuing Messages</p>
<pre>import oracle.AQ.*;
import oracle.jms.*;
import javax.jms.*;
import java.lang.*;
import oracle.xdb.*;
import java.sql.SQLException;
 
public class StreamsDeq
{
  public static void main (String args [])
       throws java.sql.SQLException, ClassNotFoundException, JMSException
  {
     TopicConnectionFactory tc_fact= null;
     TopicConnection        t_conn = null;
     TopicSession           t_sess = null;
 
     try
     {
       if (args.length &lt; 3 )
         System.out.println(&#34;Usage:java filename [SID] [HOST] [PORT]&#34;);
       else 
       {
         tc_fact = AQjmsFactory.getTopicConnectionFactory(
                      args[1], args[0], Integer.parseInt(args[2]), &#34;oci8&#34;);
         t_conn = tc_fact.createTopicConnection( &#34;OE&#34;,&#34;OE&#34;);
 
         t_sess = t_conn.createTopicSession(true, Session.CLIENT_ACKNOWLEDGE);
         t_conn.start() ;
 
         receiveMessages(t_sess);
 
         t_sess.close() ;
         t_conn.close() ;
         System.out.println(&#34;\nEnd of StreamsDeq Demo&#34;) ;
       }
     }
     catch (Exception ex)
     {
       System.out.println(&#34;Exception-1: &#34; + ex);
       ex.printStackTrace();
     }
  }
 
  public static void receiveMessages(TopicSession t_sess) throws Exception
  {
    Topic           topic   = null;
    JPerson         pers    = null;
    JAddress        addr    = null;
    XMLType         xtype   = null;
    TextMessage     t_msg   = null;
    AdtMessage      adt_msg = null;
    Message         jms_msg = null;
    TopicReceiver   t_recv  = null;
    int             i       = 0;
    java.util.Map map= null;
 
    try
    {
      topic = ((AQjmsSession)t_sess).getTopic(&#34;strmadmin&#34;, &#34;oe_queue&#34;);
      t_recv = ((AQjmsSession)t_sess).createTopicReceiver(topic, &#34;explicit_dq&#34;, null);
      map = ((AQjmsSession)t_sess).getTypeMap();
      map.put(&#34;OE.PERSON&#34;, Class.forName(&#34;JPerson&#34;));
      map.put(&#34;OE.ADDRESS&#34;, Class.forName(&#34;JAddress&#34;));
      map.put(&#34;SYS.XMLTYPE&#34;, Class.forName(&#34;oracle.xdb.XMLTypeFactory&#34;));
      System.out.println(&#34;Receive messages ...\n&#34;);
      do
      {
        try
        {
          jms_msg = (t_recv.receive(10));
          i++;
 
          ((AQjmsTopicReceiver)t_recv).setNavigationMode(AQjmsConstants.NAVIGATION_NEXT_MESSAGE);
        }
        catch (JMSException jms_ex2)
        {
          if((jms_ex2.getLinkedException() != null) &amp;&amp;
             (jms_ex2.getLinkedException() instanceof SQLException))
          {
            SQLException sql_ex2 =(SQLException)(jms_ex2.getLinkedException());
            if(sql_ex2.getErrorCode() == 25235)
            {
              ((AQjmsTopicReceiver)t_recv).setNavigationMode(
                                                AQjmsConstants.NAVIGATION_NEXT_TRANSACTION);
              continue;
            }
            else
              throw jms_ex2;
          }
          else
            throw jms_ex2;
        }
        if(jms_msg == null)
        {
          System.out.println(&#34;\nNo more messages&#34;);
        }
        else
        {
          if(jms_msg instanceof AdtMessage)
          {
            adt_msg = (AdtMessage)jms_msg;
 
            System.out.println(&#34;Retrieved message &#34; + i + &#34;: &#34; +
                               adt_msg.getAdtPayload());
            if(adt_msg.getAdtPayload() instanceof JPerson)
            {
              pers =(JPerson)( adt_msg.getAdtPayload());
              System.out.println(&#34;PERSON: Name: &#34; + pers.getName());
            }
            else if(adt_msg.getAdtPayload() instanceof JAddress)
            {
              addr =(JAddress)( adt_msg.getAdtPayload());
              System.out.println(&#34;ADDRESS: Street&#34; + addr.getStreet());
            }
            else if(adt_msg.getAdtPayload() instanceof oracle.xdb.XMLType)
            {
              xtype = (XMLType)adt_msg.getAdtPayload();
              System.out.println(&#34;XMLType: Data: \n&#34; + xtype.getStringVal());
            }
            System.out.println(&#34;Msg id: &#34; + adt_msg.getJMSMessageID());
            System.out.println();
          }
          else if(jms_msg instanceof TextMessage)
          {
            t_msg = (TextMessage)jms_msg;
 
            System.out.println(&#34;Retrieved message &#34; + i + &#34;: &#34; +
                               t_msg.getText());
            System.out.println(&#34;Msg id: &#34; + t_msg.getJMSMessageID());
            System.out.println();
          }
          else
            System.out.println(&#34;Invalid message type&#34;);
        }
      } while (jms_msg != null);
      t_sess.commit();
    }
    catch (JMSException jms_ex)
    {
      System.out.println(&#34;JMS Exception: &#34; + jms_ex);
      if(jms_ex.getLinkedException() != null)
        System.out.println(&#34;Linked Exception: &#34; + jms_ex.getLinkedException());
      t_sess.rollback();
    }
    catch (java.sql.SQLException sql_ex)
    {
      System.out.println(&#34;SQL Exception: &#34; + sql_ex);
      sql_ex.printStackTrace();
      t_sess.rollback();
    }
  }
}
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFFFCFB">Example 23-33</a>, you compile the scripts.</p>
<div id="ADQUE3517" class="example">
<p class="titleinexample"><a id="CJFFFCFB"></a>Example 23-33 Compiling StreamsEnq.java and StreamsDeq.java</p>
<pre>javac StreamsEnq.java StreamsDeq.java JPerson.java JAddress.java
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJFEEGJH">Example 23-34</a>, you run the enqueue program, specifying values for <code><span class="codeinlineitalic">ORACLE_SID</span></code>, <code><span class="codeinlineitalic">HOST</span></code>, and <code><span class="codeinlineitalic">PORT</span></code> that are appropriate for your testing environment.</p>
<div id="ADQUE3518" class="example">
<p class="titleinexample"><a id="CJFEEGJH"></a>Example 23-34 Running StreamsEnq</p>
<pre>java StreamsEnq  <span class="italic">ORACLE_SID HOST PORT</span>
</pre></div>
<!-- class="example" -->
<p>The example returns:</p>
<pre>Publish message 1 -type  PERSON
Publish message 2 -type  JMS TextMessage
Publish message 3 - XMLType containing LCR ROW
End of StreamsEnq Demo
</pre>
<p>In <a href="#CJFJEDGC">Example 23-35</a>, you run the dequeue program, specifying values for <code><span class="codeinlineitalic">ORACLE_SID</span></code>, <code><span class="codeinlineitalic">HOST</span></code>, and <code><span class="codeinlineitalic">PORT</span></code> that are appropriate for your testing environment.</p>
<div id="ADQUE3519" class="example">
<p class="titleinexample"><a id="CJFJEDGC"></a>Example 23-35 Running StreamsDeq</p>
<pre>java StreamsDeq  <span class="italic">ORACLE_SID</span> <span class="italic">HOST</span> <span class="italic">PORT</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment993">
<tr>
<td class="cellalignment1002">
<table class="cellalignment998">
<tr>
<td class="cellalignment997"><a href="aq_stage.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment997"><a href="ap_nonpers.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1004">
<table class="cellalignment996">
<tr>
<td class="cellalignment997"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment997"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment997"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment997"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment997"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment997"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>