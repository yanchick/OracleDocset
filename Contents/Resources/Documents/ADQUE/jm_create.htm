<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-989"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Introduction%20to%20Oracle%20Java%20Message%20Service"></a><title>Introduction to Oracle Java Message Service</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T0:30:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Queuing User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17945-14"/>
<meta name="dcterms.isVersionOf" content="ADQUE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="aq_opers.htm" title="Previous" type="text/html"/>
<link rel="Next" href="jm_opers.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17945-14.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">18/34</span> <!-- End Header -->
<div id="ADQUE1100" class="chapter"><a id="i1009488"></a>
<h1 class="chapter"><span class="secnum">11</span> Introduction to Oracle Java Message Service</h1>
<p>This chapter describes the Oracle <a href="glossary.htm#i432286"><span class="xrefglossterm">Java Message Service</span></a> (JMS) interface to Oracle Database Advanced Queuing (AQ).</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1005588">General Features of JMS and Oracle JMS</a></p>
</li>
<li>
<p><a href="#CIAEHGBB">Structured Payload/Message Types in JMS</a></p>
</li>
<li>
<p><a href="#i1007207">JMS Point-to-Point Model Features</a></p>
</li>
<li>
<p><a href="#i1007340">JMS Publish/Subscribe Model Features</a></p>
</li>
<li>
<p><a href="#i1007627">JMS Message Producer Features</a></p>
</li>
<li>
<p><a href="#i1007692">JMS Message Consumer Features</a></p>
</li>
<li>
<p><a href="#i1008071">JMS Propagation</a></p>
</li>
<li>
<p><a href="#i1008327">Message Transformation with JMS AQ</a></p>
</li>
<li>
<p><a href="#BABHCHCH">JMS Sharded Queues</a></p>
</li>
<li>
<p><a href="#CACJGGFC">JMS Streaming</a></p>
</li>
<li>
<p><a href="#CACCJDBI">Java EE Compliance</a></p>
</li>
</ul>
<a id="i1005588"></a>
<div id="ADQUE2858" class="sect1">
<h2 class="sect1"><a id="sthref1077"></a><a id="sthref1078"></a>General Features of JMS and Oracle JMS</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1005706">JMS Connection and Session</a></p>
</li>
<li>
<p><a href="#CIABFDIH">JMS Destination</a></p>
</li>
<li>
<p><a href="#i1006119">System-Level Access Control in JMS</a></p>
</li>
<li>
<p><a href="#i1006141">Destination-Level Access Control in JMS</a></p>
</li>
<li>
<p><a href="#i1006161">Retention and Message History in JMS</a></p>
</li>
<li>
<p><a href="#i1006177">Supporting Oracle Real Application Clusters in JMS</a></p>
</li>
<li>
<p><a href="#i1006202">Supporting Statistics Views in JMS</a></p>
</li>
</ul>
<a id="i1005706"></a>
<div id="ADQUE2859" class="sect2">
<h3 class="sect2"><a id="sthref1079"></a><a id="sthref1080"></a>JMS Connection and Session</h3>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CIADCHBB">ConnectionFactory Objects</a></p>
</li>
<li>
<p><a href="#i1005748">Using AQjmsFactory to Obtain ConnectionFactory Objects</a></p>
</li>
<li>
<p><a href="#i1005764">Using JNDI to Look Up ConnectionFactory Objects</a></p>
</li>
<li>
<p><a href="#i1005860">JMS Connection</a></p>
</li>
<li>
<p><a href="#CIAHHADD">JMS Session</a></p>
</li>
</ul>
<a id="CIADCHBB"></a>
<div id="ADQUE2860" class="sect3">
<h4 class="sect3"><a id="sthref1081"></a>ConnectionFactory Objects</h4>
<p>A <code>ConnectionFactory</code> encapsulates a set of connection configuration parameters that has been defined by an administrator. A client uses it to create a connection with a JMS provider. In this case Oracle JMS, part of Oracle Database, is the JMS provider.</p>
<p>The three types of <code>ConnectionFactory</code> objects are:</p>
<ul>
<li>
<p><code>ConnectionFactory</code></p>
</li>
<li>
<p><code>QueueConnectionFactory</code></p>
</li>
<li>
<p><code>TopicConnectionFactory</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1005748"></a>
<div id="ADQUE2861" class="sect3">
<h4 class="sect3">Using AQjmsFactory to Obtain ConnectionFactory Objects</h4>
<p>You can use the <code>AQjmsFactory</code> class to obtain a handle to a <code>ConnectionFactory</code>, <code>QueueConnectionFactory</code>, or <code>TopicConnectionFactory</code> object.</p>
<p>To obtain a <code>ConnectionFactory</code>, which supports both point-to-point and publish/subscribe operations, use <code>AQjmsFactory.getConnectionFactory()</code>. To obtain a <code>QueueConnectionFactory</code>, use <code>AQjmsFactory.getQueueConnectionFactory()</code>. To obtain a <code>TopicConnectionFactory</code>, use <code>AQjmsFactory.getTopicConnectionFactory()</code>.</p>
<p>The <code>ConnectionFactory</code>, <code>QueueConnectionFactory</code>, or <code>TopicConnectionFactory</code> can be created using hostname, port number, and SID driver or by using JDBC URL and properties.</p>
</div>
<!-- class="sect3" -->
<a id="i1005764"></a>
<div id="ADQUE2862" class="sect3">
<h4 class="sect3"><a id="sthref1082"></a><a id="sthref1083"></a>Using JNDI to Look Up ConnectionFactory Objects</h4>
<p>A JMS administrator can register <code>ConnectionFactory</code> objects in a <a href="glossary.htm#CBAIIHDD"><span class="xrefglossterm">Lightweight Directory Access Protocol</span></a> (LDAP) server. The following setup is required to enable <a href="glossary.htm#CBAIIJJF"><span class="xrefglossterm">Java Naming and Directory Interface</span></a> (JNDI) lookup in JMS:</p>
<ol>
<li>
<p>Register Database</p>
<p>When the Oracle Database server is installed, the database must be registered with the LDAP server. This can be accomplished using the <a href="glossary.htm#CBAGBCEJ"><span class="xrefglossterm">Database Configuration Assistant</span></a> (DBCA). <a href="#CIAIHEII">Figure 11-1</a> shows the structure of Oracle Database Advanced Queuing entries in the LDAP server. <code>ConnectionFactory</code> information is stored under <code>&lt;cn=OracleDBConnections&gt;</code>, while topics and queues are stored under <code>&lt;cn=OracleDBQueues&gt;</code>.</p>
<div id="ADQUE2863" class="figure">
<p class="titleinfigure"><a id="CIAIHEII"></a>Figure 11-1 Structure of Oracle Database Advanced Queuing Entries in LDAP Server</p>
<img width="496" height="224" src="img/adque446.gif" alt="Description of Figure 11-1 follows"/><br/>
<a id="sthref1084" href="img_text/adque446.htm">Description of &#34;Figure 11-1 Structure of Oracle Database Advanced Queuing Entries in LDAP Server&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Set Parameter <code>GLOBAL_TOPIC_ENABLED</code>.</p>
<p>The <code>GLOBAL_TOPIC_ENABLED</code> system parameter for the database must be set to <code>TRUE</code>. This ensures that all queues and topics created in Oracle Database Advanced Queuing are automatically registered with the LDAP server. This parameter can be set by using <code>ALTER SYSTEM SET GLOBAL_TOPIC_ENABLED = TRUE</code>.</p>
</li>
<li>
<p>Register <code>ConnectionFactory</code> Objects</p>
<p>After the database has been set up to use an LDAP server, the JMS administrator can register <code>ConnectionFactory</code>, <code>QueueConnectionFactory</code>, and <code>TopicConnectionFactory</code> objects in LDAP by using <code>AQjmsFactory.registerConnectionFactory()</code>.</p>
<p>The registration can be accomplished in one of the following ways:</p>
<ul>
<li>
<p>Connect directly to the LDAP server</p>
<p><a id="sthref1085"></a><a id="sthref1086"></a>The user must have the <code>GLOBAL_AQ_USER_ROLE</code> to register connection factories in LDAP.</p>
<p>To connect directly to LDAP, the parameters for the <code>registerConnectionFactory</code> method include the LDAP context, the name of the <code>ConnectionFactory</code>, <code>QueueConnectionFactory</code>, or <code>TopicConnectionFactory</code>, hostname, database SID, port number, <a href="glossary.htm#CBAEHGGF"><span class="xrefglossterm">JDBC driver</span></a> (thin or oci8) and factory type (queue or topic).</p>
</li>
<li>
<p>Connect to LDAP through the database server</p>
<p><a id="sthref1087"></a><a id="sthref1088"></a>The user can log on to Oracle Database first and then have the database update the LDAP entry. The user that logs on to the database must have the <code>AQ_ADMINISTRATOR_ROLE</code> to perform this operation.</p>
<p>To connect to LDAP through the database server, the parameters for the <code>registerConnectionFactory</code> method include a JDBC connection (to a user having <code>AQ_ADMINISTRATOR_ROLE</code>), the name of the <code>ConnectionFactory</code>, <code>QueueConnectionFactory</code>, or <code>TopicConnectionFactory</code>, hostname, database SID, port number, JDBC driver (thin or oci8) and factory type (queue or topic).</p>
</li>
</ul>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1005860"></a>
<div id="ADQUE2864" class="sect3">
<h4 class="sect3"><a id="sthref1089"></a>JMS Connection</h4>
<p>A JMS <code>Connection</code> is an active connection between a client and its JMS provider. A JMS <code>Connection</code> performs several critical services:</p>
<ul>
<li>
<p>Encapsulates either an open connection or a pool of connections with a JMS provider</p>
</li>
<li>
<p>Typically represents an open TCP/IP socket (or a set of open sockets) between a client and a provider&#39;s service daemon</p>
</li>
<li>
<p>Provides a structure for authenticating clients at the time of its creation</p>
</li>
<li>
<p>Creates <code>Sessions</code></p>
</li>
<li>
<p>Provides connection metadata</p>
</li>
<li>
<p>Supports an optional <code>ExceptionListener</code></p>
</li>
</ul>
<p>A JMS <code>Connection</code> to the database can be created by invoking <code>createConnection()</code>, <code>createQueueConnection()</code>, or <code>createTopicConnection()</code> and passing the parameters <code>username</code> and <code>password</code> on the <code>ConnectionFactory</code>, <code>QueueConnectionFactory</code>, or <code>TopicConnectionFactory</code> object respectively.</p>
<p>Some of the methods that are supported on the <code>Connection</code> object are</p>
<ul>
<li>
<p><code>start()</code></p>
<p>This method starts or restart delivery of incoming messages.</p>
</li>
<li>
<p><code>stop()</code></p>
<p>This method temporarily stops delivery of incoming messages. When a <code>Connection</code> object is stopped, delivery to all of its message consumers is inhibited. Also, <a href="glossary.htm#CBAIEAHI"><span class="xrefglossterm">synchronous</span></a> receive&#39;s block and messages are not delivered to message listener.</p>
</li>
<li>
<p><code>close()</code></p>
<p>This method closes the <a href="glossary.htm#CBAEAFFH"><span class="xrefglossterm">JMS session</span></a> and releases all associated resources.</p>
</li>
<li>
<p><code>createSession(true, 0)</code></p>
<p>This method creates a JMS <code>Session</code> using a JMS <code>Connection</code> instance.</p>
</li>
<li>
<p><code>createQueueSession(true,</code> <code>0)</code></p>
<p>This method creates a <code>QueueSession</code>.</p>
</li>
<li>
<p><code>createTopicSession(true,</code> <code>0</code>)</p>
<p>This method creates a <code>TopicSession</code>.</p>
</li>
<li>
<p><code>setExceptionListener(ExceptionListener)</code></p>
<p>This method sets an exception listener for the <code>Connection</code>. This allows a client to be notified of a problem asynchronously. If a <code>Connection</code> only consumes messages, then it has no other way to learn it has failed.</p>
</li>
<li>
<p><code>getExceptionListener()</code></p>
<p>This method gets the <code>ExceptionListener</code> for this <code>Connection</code>.</p>
</li>
</ul>
<p>A JMS client typically creates a <code>Connection</code>, a <code>Session</code> and several <code>MessageProducer</code> and <code>MessageConsumer</code> objects. In the current version only one open <code>Session</code> for each <code>Connection</code> is allowed, except in the following cases:</p>
<ul>
<li>
<p>If the JDBC oci8 driver is used to create the <a href="glossary.htm#CBAEACDA"><span class="xrefglossterm">JMS connection</span></a></p>
</li>
<li>
<p>If the user provides an <code>OracleOCIConnectionPool</code> instance during JMS connection creation</p>
</li>
</ul>
<p>When a <code>Connection</code> is created it is in stopped mode. In this state no messages can be delivered to it. It is typical to leave the <code>Connection</code> in stopped mode until setup is complete. At that point the <code>Connection</code> <code>start()</code> method is called and messages begin arriving at the <code>Connection</code> consumers. This setup convention minimizes any client confusion that can result from <a href="glossary.htm#CBABHFEE"><span class="xrefglossterm">asynchronous</span></a> message delivery while the client is still in the process of setup.</p>
<p>It is possible to start a <code>Connection</code> and to perform setup subsequently. Clients that do this must be prepared to handle asynchronous message delivery while they are still in the process of setting up. A <code>MessageProducer</code> can <a href="glossary.htm#CBAFGDEC"><span class="xrefglossterm">send</span></a> messages while a <code>Connection</code> is stopped.</p>
</div>
<!-- class="sect3" -->
<a id="CIAHHADD"></a>
<div id="ADQUE2865" class="sect3">
<h4 class="sect3"><a id="sthref1090"></a>JMS Session</h4>
<p>A JMS <code>Session</code> is a single threaded context for producing and consuming messages. Although it can allocate provider resources outside the <a href="glossary.htm#i432292"><span class="xrefglossterm">Java Virtual Machine</span></a> (JVM), it is considered a lightweight JMS object.</p>
<p>A <code>Session</code> serves several purposes:</p>
<ul>
<li>
<p>Constitutes a factory for <code>MessageProducer</code> and <code>MessageConsumer</code> objects</p>
</li>
<li>
<p>Provides a way to get a handle to destination objects (queues/topics)</p>
</li>
<li>
<p>Supplies provider-optimized message factories</p>
</li>
<li>
<p>Supports a single series of transactions that combines work spanning session <code>MessageProducer</code> and <code>MessageConsumer</code> objects, organizing these into units</p>
</li>
<li>
<p>Defines a serial order for the messages it consumes and the messages it produces</p>
</li>
<li>
<p>Serializes execution of <code>MessageListener</code> objects registered with it</p>
</li>
</ul>
<p>In Oracle Database 10<span class="italic">g</span>, you can create as many JMS <code>Sessions</code> as resources allow using a single JMS <code>Connection</code>, when using either JDBC thin or JDBC thick (OCI) drivers.</p>
<p>Because a provider can allocate some resources on behalf of a <code>Session</code> outside the JVM, clients should close them when they are not needed. Relying on garbage collection to eventually reclaim these resources may not be timely enough. The same is true for <code>MessageProducer</code> and <code>MessageConsumer</code> objects created by a <code>Session</code>.</p>
<p>Methods on the <code>Session</code> object include:</p>
<ul>
<li>
<p><code>commit()</code></p>
<p>This method commits all messages performed in the transaction and releases locks currently held.</p>
</li>
<li>
<p><code>rollback()</code></p>
<p>This method rolls back any messages accomplished in the transaction and release locks currently held.</p>
</li>
<li>
<p><code>close()</code></p>
<p>This method closes the <code>Session</code>.</p>
</li>
<li>
<p><code>getDBConnection()</code></p>
<p>This method gets a handle to the underlying JDBC connection. This handle can be used to perform other SQL <a href="glossary.htm#CBAICGCD"><span class="xrefglossterm">DML</span></a> operations as part of the same <code>Session</code>. The method is specific to Oracle JMS.</p>
</li>
<li>
<p><code>acknowledge()</code></p>
<p>This method acknowledges message receipt in a nontransactional session.</p>
</li>
<li>
<p><code>recover()</code></p>
<p>This method restarts message delivery in a nontransactional session. In effect, the series of delivered messages in the session is reset to the point after the last acknowledged message.</p>
</li>
</ul>
<p>The following are some Oracle JMS extensions:</p>
<ul>
<li>
<p><code>createQueueTable()</code></p>
<p>This method creates a <a href="glossary.htm#CBAFHDDD"><span class="xrefglossterm">queue table</span></a>.</p>
</li>
<li>
<p><code>getQueueTable()</code></p>
<p>This method gets a handle to an existing queue table.</p>
</li>
<li>
<p><code>createQueue()</code></p>
<p>This method creates a queue.</p>
</li>
<li>
<p><code>getQueue()</code></p>
<p>This method gets a handle to an existing queue.</p>
</li>
<li>
<p><code>createTopic()</code></p>
<p>This method creates a topic.</p>
</li>
<li>
<p><code>getTopic()</code></p>
<p>This method gets a handle to an existing topic.</p>
</li>
</ul>
<p>The <code>Session</code> object must be cast to <code>AQjmsSession</code> to use any of the extensions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The JMS specification expects providers to return null messages when receives are accomplished on a JMS <code>Connection</code> instance that has not been started.
<p>After you create a <code>javax.jms.Connection</code> instance, you must call the <code>start()</code> method on it before you can receive messages. If you add a line like <code>t_conn.start();</code> any time after the connection has been created, but before the actual receive, then you can receive your messages.</p>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIABFDIH"></a>
<div id="ADQUE2866" class="sect2">
<h3 class="sect2"><a id="sthref1091"></a>JMS Destination</h3>
<p>A <code>Destination</code> is an object a client uses to specify the destination where it sends messages, and the source from which it receives messages. A <code>Destination</code> object can be a <code>Queue</code> or a <code>Topic</code>. In Oracle Database Advanced Queuing, these map to a <code><span class="codeinlineitalic">schema.queue</span></code> at a specific database. <code>Queue</code> maps to a single-consumer queue, and <code>Topic</code> maps to a multiconsumer queue.</p>
<a id="CIAIJABD"></a>
<div id="ADQUE2867" class="sect3">
<h4 class="sect3"><a id="sthref1092"></a><a id="sthref1093"></a>Using a JMS Session to Obtain Destination Objects</h4>
<p><code>Destination</code> objects are created from a <code>Session</code> object using the following domain-specific <code>Session</code> methods:</p>
<ul>
<li>
<p><code>AQjmsSession.getQueue(queue_owner, queue_name)</code></p>
<p>This method gets a handle to a JMS queue.</p>
</li>
<li>
<p><code>AQjmsSession.getTopic(topic_owner, topic_name)</code></p>
<p>This method gets a handle to a <a href="glossary.htm#CBAICJAJ"><span class="xrefglossterm">JMS topic</span></a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1006007"></a>
<div id="ADQUE2868" class="sect3">
<h4 class="sect3"><a id="sthref1094"></a><a id="sthref1095"></a>Using JNDI to Look Up Destination Objects</h4>
<p>The database can be configured to register <a href="glossary.htm#CBACBEEF"><span class="xrefglossterm">schema</span></a> objects with an LDAP server. If a database has been configured to use LDAP and the GLOBAL_TOPIC_ENABLED parameter has been set to TRUE, then all JMS queues and topics are automatically registered with the LDAP server when they are created. The administrator can also create aliases to the queues and topics registered in LDAP. Queues and topics that are registered in LDAP can be looked up through JNDI using the name or alias of the queue or topic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_admin.htm#i1007391">&#34;Adding an Alias to the LDAP Server&#34;</a></div>
</div>
<!-- class="sect3" -->
<a id="CACCJDFE"></a>
<div id="ADQUE2869" class="sect3">
<h4 class="sect3"><a id="sthref1096"></a>JMS Destination Methods</h4>
<p>Methods on the <code>Destination</code> object include:</p>
<ul>
<li>
<p><code>alter()</code></p>
<p>This method alters a <code>Queue</code> or a <code>Topic</code>.</p>
</li>
<li>
<p><code>schedulePropagation()</code></p>
<p>This method schedules <a href="glossary.htm#CBADIFJC"><span class="xrefglossterm">propagation</span></a> from a source to a destination.</p>
</li>
<li>
<p><code>unschedulePropagation()</code></p>
<p>This method unschedules a previously scheduled propagation.</p>
</li>
<li>
<p><code>enablePropagationSchedule()</code></p>
<p>This method enables a propagation schedule.</p>
</li>
<li>
<p><code>disablePropagationSchedule()</code></p>
<p>This method disables a propagation schedule.</p>
</li>
<li>
<p><code>start()</code></p>
<p>This method starts a <code>Queue</code> or a <code>Topic</code>. The queue can be started for enqueue or <a href="glossary.htm#CBAGEGIF"><span class="xrefglossterm">dequeue</span></a>. The topic can be started for publish or subscribe.</p>
</li>
<li>
<p><code>stop()</code></p>
<p>This method stops a <code>Queue</code> or a <code>Topic</code>. The queue is stopped for enqueue or dequeue. The topic is stopped for publish or subscribe.</p>
</li>
<li>
<p><code>drop()</code></p>
<p>This method drops a <code>Queue</code> or a <code>Topic</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006119"></a>
<div id="ADQUE2870" class="sect2">
<h3 class="sect2"><a id="sthref1097"></a><a id="sthref1098"></a>System-Level Access Control in JMS</h3>
<p>Oracle8<span class="italic">i</span> or higher supports system-level access control for all queuing operations. This feature allows an application designer or DBA to create users as queue administrators. A queue administrator can invoke administrative and operational JMS interfaces on any queue in the database. This simplifies administrative work, because all administrative scripts for the queues in a database can be managed under one schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="manage.htm#i1005928">&#34;Oracle Enterprise Manager Support&#34;</a></div>
<p>When messages arrive at the destination queues, sessions based on the source queue schema name are used for enqueuing the newly arrived messages into the destination queues. This means that you must grant enqueue privileges for the destination queues to schemas of the source queues.</p>
<p>To propagate to a remote destination queue, the login user (specified in the database link in the address field of the agent structure) should either be granted the <code>ENQUEUE_ANY</code> privilege, or be granted the rights to enqueue to the destination queue. However, you are not required to grant any explicit privileges if the login user in the database link also owns the queue tables at the destination.</p>
</div>
<!-- class="sect2" -->
<a id="i1006141"></a>
<div id="ADQUE2871" class="sect2">
<h3 class="sect2"><a id="sthref1099"></a><a id="sthref1100"></a>Destination-Level Access Control in JMS</h3>
<p>Oracle8<span class="italic">i</span> or higher supports access control for enqueue and dequeue operations at the queue or topic level. This feature allows the application designer to protect queues and topics created in one schema from applications running in other schemas. You can grant only minimal access privileges to the applications that run outside the schema of the queue or topic. The supported access privileges on a queue or topic are <code>ENQUEUE</code>, <code>DEQUEUE</code> and <code>ALL</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="manage.htm#i1005928">&#34;Oracle Enterprise Manager Support&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1006161"></a>
<div id="ADQUE2872" class="sect2">
<h3 class="sect2"><a id="sthref1101"></a><a id="sthref1102"></a>Retention and Message History in JMS</h3>
<p>Messages are often related to each other. For example, if a message is produced as a result of the consumption of another message, then the two are related. As the application designer, you may want to keep track of such relationships. Oracle Database Advanced Queuing allows users to retain messages in the queue table, which can then be queried in SQL for analysis.</p>
<p>Along with retention and message identifiers, Oracle Database Advanced Queuing lets you automatically create message journals, also called tracking journals or event journals. Taken together, retention, message identifiers and SQL queries make it possible to build powerful message warehouses.</p>
</div>
<!-- class="sect2" -->
<a id="i1006177"></a>
<div id="ADQUE2873" class="sect2">
<h3 class="sect2"><a id="sthref1103"></a><a id="sthref1104"></a>Supporting Oracle Real Application Clusters in JMS</h3>
<p>In Oracle Database 12<span class="italic">c</span> Release 1 (12.1), Advanced Queuing introduces high performing and scalable JMS Sharded Queues. A sharded queue is a single logical queue that is divided into multiple, independent, physical queues through system-maintained partitioning. Sharded queues are the preferred JMS queues for queues used across Oracle RAC instances, for queues with high enqueue or dequeue rates, or for queues with many subscribers. See <a href="#BABGJGCA">&#34;JMS Sharded Queues and Oracle Real Application Clusters (Oracle RAC)&#34;</a> for more information.</p>
<p>For non-sharded queues, Oracle Real Application Clusters (Oracle RAC) can be used to improve Oracle Database Advanced Queuing performance by allowing different queues to be managed by different instances. You do this by specifying different instance affinities (preferences) for the queue tables that store the queues. This allows queue operations (enqueue/dequeue) or topic operations (<a href="glossary.htm#CBAIJICJ"><span class="xrefglossterm">publish/subscribe</span></a>) on different queues or topics to occur in parallel.</p>
<p>The Oracle Database Advanced Queuing queue monitor process continuously monitors the instance affinities of the queue tables. The queue monitor assigns ownership of a queue table to the specified primary instance if it is available, failing which it assigns it to the specified secondary instance.</p>
<p>If the owner instance of a queue table terminates, then the queue monitor changes ownership to a suitable instance such as the secondary instance.</p>
<p>Oracle Database Advanced Queuing propagation can make use of Oracle Real Application Clusters, although it is transparent to the user. The affinities for jobs submitted on behalf of the propagation schedules are set to the same values as that of the affinities of the respective queue tables. Thus, a <code>job_queue_process</code> associated with the owner instance of a queue table is handling the propagation from queues stored in that queue table, thereby minimizing pinging.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABHCHCH">&#34;JMS Sharded Queues&#34;</a></p>
</li>
<li>
<p><a href="aq_admin.htm#i1006952">&#34;Scheduling a Queue Propagation&#34;</a></p>
</li>
<li>
<p><a class="olink RACAD" href="../RACAD/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1006202"></a>
<div id="ADQUE2874" class="sect2">
<h3 class="sect2"><a id="sthref1105"></a><a id="sthref1106"></a>Supporting Statistics Views in JMS</h3>
<p>Each instance keeps its own Oracle Database Advanced Queuing statistics information in its own <a href="glossary.htm#CBAFGIIB"><span class="xrefglossterm">System Global Area</span></a> (SGA), and does not have knowledge of the statistics gathered by other instances. Then, when a <code>GV$AQ</code> view is queried by an instance, all other instances funnel their statistics information to the instance issuing the query.</p>
<p>The <code>GV$AQ</code> view can be queried at any time to see the number of messages in waiting, ready or expired state. The view also displays the average number of seconds messages have been waiting to be processed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_views.htm#i1007421">&#34;V$AQ: Number of Messages in Different States in Database&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAEHGBB"></a>
<div id="ADQUE2875" class="sect1">
<h2 class="sect1"><a id="sthref1107"></a><a id="sthref1108"></a><a id="sthref1109"></a><a id="sthref1110"></a>Structured Payload/Message Types in JMS</h2>
<p>JMS messages are composed of a header, properties, and a body.</p>
<p>The header consists of header fields, which contain values used by both clients and providers to identify and route messages. All messages support the same set of header fields.</p>
<p>Properties are optional header fields. In addition to standard properties defined by JMS, there can be provider-specific and application-specific properties.</p>
<p>The body is the message payload. JMS defines various types of message payloads, and a type that can store JMS messages of any or all JMS-specified message types.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1006233">JMS Message Headers</a></p>
</li>
<li>
<p><a href="#i1006384">JMS Message Properties</a></p>
</li>
<li>
<p><a href="#i1006533">JMS Message Bodies</a></p>
</li>
<li>
<p><a href="#CACJEGEG">Using Message Properties with Different Message Types</a></p>
</li>
<li>
<p><a href="#CIAEDDAE">Buffered Messaging with Oracle JMS</a></p>
</li>
</ul>
<a id="i1006233"></a>
<div id="ADQUE2876" class="sect2">
<h3 class="sect2"><a id="sthref1111"></a><a id="sthref1112"></a>JMS Message Headers</h3>
<p>A JMS message header contains the following fields:</p>
<ul>
<li>
<p><code>JMSDestination</code></p>
<p>This field contains the destination to which the message is sent. In Oracle Database Advanced Queuing this corresponds to the destination queue/topic. It is a <code>Destination</code> type set by JMS after the <code>Send</code> method has completed.</p>
</li>
<li>
<p><code>JMSDeliveryMode</code></p>
<p>This field determines whether the message is logged or not. JMS supports <code>PERSISTENT</code> delivery (where messages are logged to stable storage) and <code>NONPERSISTENT</code> delivery (messages not logged). It is a <code>INTEGER</code> set by JMS after the <code>Send</code> method has completed. JMS permits an administrator to configure JMS to override the client-specified value for <code>JMSDeliveryMode</code>.</p>
</li>
<li>
<p><code>JMSMessageID</code></p>
<p>This field uniquely identifies a message in a provider. All message IDs must begin with the string <code>ID:</code>. It is a <code>String</code> type set by JMS after the <code>Send</code> method has completed.</p>
</li>
<li>
<p><code>JMSTimeStamp</code></p>
<p>This field contains the time the message was handed over to the provider to be sent. This maps to Oracle Database Advanced Queuing message enqueue time. It is a <code>Long</code> type set by JMS after the <code>Send</code> method has completed.</p>
</li>
<li>
<p><code>JMSCorrelationID</code></p>
<p>This field can be used by a client to link one message with another. It is a <code>String</code> type set by the JMS client.</p>
</li>
<li>
<p><code>JMSReplyTo</code></p>
<p>This field contains a <code>Destination</code> type supplied by a client when a message is sent. Clients can use <code>oracle.jms.AQjmsAgent</code>; <code>javax.jms.Queue</code>; or <code>javax.jms.Topic</code>.</p>
</li>
<li>
<p><code>JMSType</code></p>
<p>This field contains a message type identifier supplied by a client at send time. It is a <code>String</code> type. For portability Oracle recommends that the <code>JMSType</code> be symbolic values.</p>
</li>
<li>
<p><code>JMSExpiration</code></p>
<p>This field is the sum of the enqueue time and the <code>TimeToLive</code> in non-Java EE compliance mode. In compliant mode, the <code>JMSExpiration</code> header value in a dequeued message is the sum of <code>JMSTimeStamp</code> when the message was enqueued (Greenwich Mean Time, in milliseconds) and the <code>TimeToLive</code> (in milliseconds). It is a <code>Long</code> type set by JMS after the <code>Send</code> method has completed. JMS permits an administrator to configure JMS to override the client-specified value for <code>JMSExpiration</code>.</p>
</li>
<li>
<p><code>JMSPriority</code></p>
<p>This field contains the priority of the message. It is a <code>INTEGER</code> set by JMS after the <code>Send</code> method has completed. In Java EE-compliance mode, the permitted values for priority are <code>0</code>&ndash;<code>9</code>, with <code>9</code> the highest priority and <code>4</code> the default, in conformance with the Sun Microsystem JMS 1.1 standard. Noncompliant mode is the default. JMS permits an administrator to configure JMS to override the client-specified value for <code>JMSPriority</code>.</p>
</li>
<li>
<p><code>JMSRedelivered</code></p>
<p>This field is a Boolean set by the JMS provider.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACCJDBI">&#34;Java EE Compliance&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1006384"></a>
<div id="ADQUE2877" class="sect2">
<h3 class="sect2"><a id="sthref1113"></a><a id="sthref1114"></a>JMS Message Properties</h3>
<p>JMS properties are set either explicitly by the client or automatically by the JMS provider (these are generally read-only). Some JMS properties are set using the parameters specified in <code>Send</code> and <code>Receive</code> operations.</p>
<p>Properties add optional header fields to a message. Properties allow a client, using a <code>messageSelector</code>, to have a JMS provider select messages on its behalf using application-specific criteria. Property names are strings and values can be: <code>Boolean</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, and <code>string</code>.</p>
<p>JMS-defined properties, which all begin with <code>&#34;JMSX&#34;</code>, include the following:</p>
<ul>
<li>
<p><code>JMSXUserID</code></p>
<p>This field is the identity of the user sending the message. It is a <code>String</code> type set by JMS after the <code>Send</code> method has completed.</p>
</li>
<li>
<p><code>JMSXAppID</code></p>
<p>This field is the identity of the application sending the message. It is a <code>String</code> type set by JMS after the <code>Send</code> method has completed.</p>
</li>
<li>
<p><code>JMSXDeliveryCount</code></p>
<p>This field is the number of message delivery attempts. It is an <code>Integer</code> set by JMS after the <code>Send</code> method has completed.</p>
</li>
<li>
<p><code>JMSXGroupid</code></p>
<p>This field is the identity of the message group that this message belongs to. It is a <code>String</code> type set by the JMS client.</p>
</li>
<li>
<p><code>JMSXGroupSeq</code></p>
<p>This field is the sequence number of a message within a group. It is an <code>Integer</code> set by the JMS client.</p>
</li>
<li>
<p><code>JMSXRcvTimeStamp</code></p>
<p>This field is the time the message was delivered to the consumer (dequeue time). It is a <code>String</code> type set by JMS after the <code>Receive</code> method has completed.</p>
</li>
<li>
<p><code>JMSXState</code></p>
<p>This field is the message state, set by the provider. The message state can be <code>WAITING</code>, <code>READY</code>, <code>EXPIRED</code>, or <code>RETAINED</code>.</p>
</li>
</ul>
<p>Oracle-specific JMS properties, which all begin with <code>JMS_Oracle</code>, include the following:</p>
<ul>
<li>
<p><code>JMS_OracleExcpQ</code></p>
<p>This field is the queue name to send the message to if it cannot be delivered to the original destination. It is a <code>String</code> type set by the JMS client. Only destinations of type <code>EXCEPTION</code> can be specified in the <code>JMS_OracleExcpQ</code> property.</p>
</li>
<li>
<p><code>JMS_OracleDelay</code></p>
<p>This field is the time in seconds to delay the delivery of the message. It is an <code>Integer</code> set by the JMS client. This can affect the order of message delivery.</p>
</li>
<li>
<p><code>JMS_OracleOriginalMessageId</code></p>
<p>This field is set to the message identifier of the message in the source if the message is propagated from one destination to another. It is a <code>String</code> type set by the JMS provider. If the message is not propagated, then this property has the same value as <code>JMSMessageId</code>.</p>
</li>
</ul>
<p>A client can add additional header fields to a message by defining properties. These properties can then be used in a <code>messageSelector</code> to select specific messages.</p>
</div>
<!-- class="sect2" -->
<a id="i1006533"></a>
<div id="ADQUE2878" class="sect2">
<h3 class="sect2"><a id="sthref1115"></a><a id="sthref1116"></a>JMS Message Bodies</h3>
<p>JMS provides five forms of message body:</p>
<ul>
<li>
<p><a href="#CACIFAFH">StreamMessage</a></p>
</li>
<li>
<p><a href="#CACFAGBI">BytesMessage</a></p>
</li>
<li>
<p><a href="#CACDGEIF">MapMessage</a></p>
</li>
<li>
<p><a href="#CACJFFEJ">TextMessage</a></p>
</li>
<li>
<p><a href="#CACFEFCI">ObjectMessage</a></p>
</li>
<li>
<p><a href="#CACJEGHJ">AdtMessage</a></p>
</li>
</ul>
<a id="CACIFAFH"></a>
<div id="ADQUE2879" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref1117"></a><a id="sthref1118"></a>StreamMessage</h4>
<p>A <code>StreamMessage</code> object is used to send a stream of Java primitives. It is filled and read sequentially. It inherits from <code>Message</code> and adds a <code>StreamMessage</code> body. Its methods are based largely on those found in <code>java.io.DataInputStream</code> and <code>java.io.DataOutputStream</code>.</p>
<p>The primitive types can be read or written explicitly using methods for each type. They can also be read or written generically as objects. To use <code>StreamMessage</code> objects, create the queue table with the <code>SYS.AQ$_JMS_STREAM_MESSAGE</code> or <code>AQ$_JMS_MESSAGE</code> payload types.</p>
<p><code>StreamMessage</code> objects support the conversions shown in <a href="#CACEJAJJ">Table 11-1</a>. A value written as the row type can be read as the column type.</p>
<div id="ADQUE2880" class="tblformalwide">
<p class="titleintable"><a id="sthref1119"></a><a id="CACEJAJJ"></a>Table 11-1 StreamMessage Conversion</p>
<table class="cellalignment1000" title="StreamMessage Conversion" summary="Rows are input message types, and columns are output message types. An &#34;X&#34; indicates that an input type can be converted to the corresponding output type; a &#34;-&#34; indicates it cannot." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t9">Input</th>
<th class="cellalignment1001" id="r1c2-t9">Boolean</th>
<th class="cellalignment1001" id="r1c3-t9">byte</th>
<th class="cellalignment1001" id="r1c4-t9">short</th>
<th class="cellalignment1001" id="r1c5-t9">char</th>
<th class="cellalignment1001" id="r1c6-t9">int</th>
<th class="cellalignment1001" id="r1c7-t9">long</th>
<th class="cellalignment1001" id="r1c8-t9">float</th>
<th class="cellalignment1001" id="r1c9-t9">double</th>
<th class="cellalignment1001" id="r1c10-t9">String</th>
<th class="cellalignment1001" id="r1c11-t9">byte[]</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t9" headers="r1c1-t9">
<p><code>Boolean</code></p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c2-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c4-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c6-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c7-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c9-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r2c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t9" headers="r1c1-t9">
<p><code>byte</code></p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c3-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c4-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c6-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c7-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c9-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r4c1-t9" headers="r1c1-t9">
<p><code>short</code></p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c4-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c6-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c7-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c9-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r5c1-t9" headers="r1c1-t9">
<p><code>char</code></p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c4-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c5-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c6-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c7-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c9-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r5c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r6c1-t9" headers="r1c1-t9">
<p><code>int</code></p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c4-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c6-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c7-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c9-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r6c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r7c1-t9" headers="r1c1-t9">
<p><code>long</code></p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c4-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c6-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c7-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c9-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r7c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r8c1-t9" headers="r1c1-t9">
<p><code>float</code></p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c4-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c6-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c7-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c8-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c9-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r8c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r9c1-t9" headers="r1c1-t9">
<p><code>double</code></p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c4-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c6-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c7-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c9-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r9c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r10c1-t9" headers="r1c1-t9">
<p><code>string</code></p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c2-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c3-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c4-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c5-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c6-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c7-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c8-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c9-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c10-t9">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t9 r1c11-t9">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r11c1-t9" headers="r1c1-t9">
<p><code>byte[]</code></p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c2-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c3-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c4-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c5-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c6-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c7-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c8-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c9-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c10-t9">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t9 r1c11-t9">
<p>X</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect3" -->
<a id="CACFAGBI"></a>
<div id="ADQUE2881" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref1120"></a><a id="sthref1121"></a>BytesMessage</h4>
<p>A <code>BytesMessage</code> object is used to send a message containing a stream of uninterpreted bytes. It inherits <code>Message</code> and adds a <code>BytesMessage</code> body. The receiver of the message interprets the bytes. Its methods are based largely on those found in <code>java.io.DataInputStream</code> and <code>java.io.DataOutputStream</code>.</p>
<p>This message type is for client encoding of existing message formats. If possible, one of the other self-defining message types should be used instead.</p>
<p>The primitive types can be written explicitly using methods for each type. They can also be written generically as objects. To use <code>BytesMessage</code> objects, create the queue table with <code>SYS.AQ$_JMS_BYTES_MESSAGE</code> or <code>AQ$_JMS_MESSAGE</code> payload types.</p>
</div>
<!-- class="sect3" -->
<a id="CACDGEIF"></a>
<div id="ADQUE2882" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref1122"></a><a id="sthref1123"></a>MapMessage</h4>
<p>A <code>MapMessage</code> object is used to send a set of name-value pairs where the names are <code>String</code> types, and the values are Java primitive types. The entries can be accessed sequentially or randomly by name. The order of the entries is undefined. It inherits from <code>Message</code> and adds a <code>MapMessage</code> body. The primitive types can be read or written explicitly using methods for each type. They can also be read or written generically as objects.</p>
<p>To use <code>MapMessage</code> objects, create the queue table with the <code>SYS.AQ$_JMS_MAP_MESSAGE</code> or <code>AQ$_JMS_MESSAGE</code> payload types. <code>MapMessage</code> objects support the conversions shown in <a href="#CACBFIDD">Table 11-2</a>. An &#34;X&#34; in the table means that a value written as the row type can be read as the column type.</p>
<div id="ADQUE2883" class="tblformalwide">
<p class="titleintable"><a id="sthref1124"></a><a id="CACBFIDD"></a>Table 11-2 MapMessage Conversion</p>
<table class="cellalignment1000" title="MapMessage Conversion" summary="Rows are input message types, and columns are output message types. An &#34;X&#34; indicates that an input type can be converted to the corresponding output type; a &#34;-&#34; indicates it cannot." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t10">Input</th>
<th class="cellalignment1001" id="r1c2-t10">Boolean</th>
<th class="cellalignment1001" id="r1c3-t10">byte</th>
<th class="cellalignment1001" id="r1c4-t10">short</th>
<th class="cellalignment1001" id="r1c5-t10">char</th>
<th class="cellalignment1001" id="r1c6-t10">int</th>
<th class="cellalignment1001" id="r1c7-t10">long</th>
<th class="cellalignment1001" id="r1c8-t10">float</th>
<th class="cellalignment1001" id="r1c9-t10">double</th>
<th class="cellalignment1001" id="r1c10-t10">String</th>
<th class="cellalignment1001" id="r1c11-t10">byte[]</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t10" headers="r1c1-t10">
<p><code>Boolean</code></p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c2-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c4-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c6-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c7-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c9-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r2c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t10" headers="r1c1-t10">
<p><code>byte</code></p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c3-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c4-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c6-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c7-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c9-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r3c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r4c1-t10" headers="r1c1-t10">
<p><code>short</code></p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c4-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c6-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c7-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c9-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r4c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r5c1-t10" headers="r1c1-t10">
<p><code>char</code></p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c4-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c5-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c6-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c7-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c9-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r5c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r6c1-t10" headers="r1c1-t10">
<p><code>int</code></p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c4-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c6-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c7-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c9-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r6c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r7c1-t10" headers="r1c1-t10">
<p><code>long</code></p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c4-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c6-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c7-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c9-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r7c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r8c1-t10" headers="r1c1-t10">
<p><code>float</code></p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c4-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c6-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c7-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c8-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c9-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r8c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r9c1-t10" headers="r1c1-t10">
<p><code>double</code></p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c4-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c6-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c7-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c9-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r9c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r10c1-t10" headers="r1c1-t10">
<p><code>string</code></p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c2-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c3-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c4-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c5-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c6-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c7-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c8-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c9-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c10-t10">
<p>X</p>
</td>
<td class="cellalignment1002" headers="r10c1-t10 r1c11-t10">
<p>-</p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r11c1-t10" headers="r1c1-t10">
<p><code>byte[]</code></p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c2-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c3-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c4-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c5-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c6-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c7-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c8-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c9-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c10-t10">
<p>-</p>
</td>
<td class="cellalignment1002" headers="r11c1-t10 r1c11-t10">
<p>X</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect3" -->
<a id="CACJFFEJ"></a>
<div id="ADQUE2884" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref1125"></a><a id="sthref1126"></a>TextMessage</h4>
<p>A <code>TextMessage</code> object is used to send a message containing a <code>java.lang.StringBuffer</code>. It inherits from <code>Message</code> and adds a <code>TextMessage</code> body. The text information can be read or written using methods <code>getText()</code> and <code>setText(</code>...<code>)</code>. To use <code>TextMessage</code> objects, create the queue table with the <code>SYS.AQ$_JMS_TEXT_MESSAGE</code> or <code>AQ$_JMS_MESSAGE</code> payload types.</p>
</div>
<!-- class="sect3" -->
<a id="CACFEFCI"></a>
<div id="ADQUE2885" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref1127"></a><a id="sthref1128"></a>ObjectMessage</h4>
<p>An <code>ObjectMessage</code> object is used to send a message that contains a serializable Java object. It inherits from Message and adds a body containing a single Java reference. Only serializable Java objects can be used. If a collection of Java objects must be sent, then one of the collection classes provided in JDK 1.4 can be used. The objects can be read or written using the methods <code>getObject()</code> and <code>setObject(</code>...<code>)</code>.To use <code>ObjectMessage</code> objects, create the queue table with the <code>SYS.AQ$_JMS_OBJECT_MESSAGE</code> or <code>AQ$_JMS_MESSAGE</code> payload types.</p>
</div>
<!-- class="sect3" -->
<a id="CACJEGHJ"></a>
<div id="ADQUE2886" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref1129"></a><a id="sthref1130"></a>AdtMessage</h4>
<p>An <code>AdtMessage</code> object is used to send a message that contains a Java object that maps to an Oracle object type. These objects inherit from <code>Message</code> and add a body containing a Java object that implements the <code>CustomDatum</code> or <code>ORAData</code> interface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDEV" href="../JJDEV/toc.htm"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> for information about the <code>CustomDatum</code> and <code>ORAData</code> interfaces</div>
<p>To use <code>AdtMessage</code> objects, create the queue table with payload type as the Oracle object type. The <code>AdtMessage</code> payload can be read and written using the <code>getAdtPayload</code> and <code>setAdtPayload</code> methods.</p>
<p>You can also use an <code>AdtMessage</code> object to send messages to queues of type <code>SYS.XMLType</code>. You must use the <code>oracle.xdb.XMLType</code> class to create the message.</p>
<p>For <code>AdtMessage</code> objects, the client can get:</p>
<ul>
<li>
<p><code>JMSXDeliveryCount</code></p>
</li>
<li>
<p><code>JMSXRecvTimeStamp</code></p>
</li>
<li>
<p><code>JMSXState</code></p>
</li>
<li>
<p><code>JMS_OracleExcpQ</code></p>
</li>
<li>
<p><code>JMS_OracleDelay</code></p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACJEGEG"></a>
<div id="ADQUE2887" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1131"></a><a id="sthref1132"></a>Using Message Properties with Different Message Types</h3>
<p>The following message properties can be set by the client using the <code>setProperty</code> call. For <code>StreamMessage</code>, <code>BytesMessage</code>, <code>ObjectMessage</code>, <code>TextMessage</code>, and <code>MapMessage</code> objects, the client can set:</p>
<ul>
<li>
<p><code>JMSXAppID</code></p>
</li>
<li>
<p><code>JMSXGroupID</code></p>
</li>
<li>
<p><code>JMSXGroupSeq</code></p>
</li>
<li>
<p><code>JMS_OracleExcpQ</code></p>
</li>
<li>
<p><code>JMS_OracleDelay</code></p>
</li>
</ul>
<p>For <code>AdtMessage</code> objects, the client can set:</p>
<ul>
<li>
<p><code>JMS_OracleExcpQ</code></p>
</li>
<li>
<p><code>JMS_OracleDelay</code></p>
</li>
</ul>
<p>The following message properties can be obtained by the client using the <code>getProperty</code> call. For <code>StreamMessage</code>, <code>BytesMessage</code>, <code>ObjectMessage</code>, <code>TextMessage</code>, and <code>MapMessage</code> objects, the client can get:</p>
<ul>
<li>
<p><code>JMSXuserID</code></p>
</li>
<li>
<p><code>JMSXAppID</code></p>
</li>
<li>
<p><code>JMSXDeliveryCount</code></p>
</li>
<li>
<p><code>JMSXGroupID</code></p>
</li>
<li>
<p><code>JMSXGroupSeq</code></p>
</li>
<li>
<p><code>JMSXRecvTimeStamp</code></p>
</li>
<li>
<p><code>JMSXState</code></p>
</li>
<li>
<p><code>JMS_OracleExcpQ</code></p>
</li>
<li>
<p><code>JMS_OracleDelay</code></p>
</li>
<li>
<p><code>JMS_OracleOriginalMessageID</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIAEDDAE"></a>
<div id="ADQUE2888" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1133"></a><a id="sthref1134"></a>Buffered Messaging with Oracle JMS</h3>
<p>Users can send a nonpersistent JMS message by specifying the <code>deliveryMode</code> to be <code>NON_PERSISTENT</code> when sending a message. JMS nonpersistent messages are not required to be logged to stable storage, so they can be lost after a JMS system failure. JMS nonpersistent messages are similar to the buffered messages now available in Oracle Database Advanced Queuing, but there are also important differences between the two.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not confuse Oracle JMS nonpersistent messages with Oracle Database Advanced Queuing nonpersistent queues, which are deprecated in Oracle Database 10<span class="italic">g</span> Release 2 (10.2).</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="aq_intro.htm#CHDGDCDA">&#34;Buffered Messaging&#34;</a></p>
</li>
<li>
<p><a href="ap_nonpers.htm#BCFGDJHG">Appendix A, &#34;Nonpersistent Queues&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead1"><a id="ADQUE2889"></a>Transaction Commits and Client Acknowledgments</p>
<p>The JMS <code>deliveryMode</code> is orthogonal to the transaction attribute of a message. JMS nonpersistent messages can be sent and received by either a transacted session or a nontransacted session. If a JMS nonpersistent message is sent and received by a transacted session, then the effect of the JMS operation is only visible after the transacted session commits. If it is received by a nontransacted session with <code>CLIENT_ACKNOWLEDGE</code> acknowledgment mode, then the effect of receiving this message is only visible after the client acknowledges the message. Without the acknowledgment, the message is not removed and will be redelivered if the client calls <code>Session.recover</code>.</p>
<p>Oracle Database Advanced Queuing buffered messages, however, do not support these transaction or acknowledgment concepts. Both sending and receiving a buffered message must be in the <code>IMMEDIATE</code> visibility mode. The effects of the sending and receiving operations are therefore visible to the user immediately, no matter whether the session is committed or the messages are acknowledged.</p>
<p class="subhead1"><a id="ADQUE2890"></a>Different APIs</p>
<p>Messages sent with the regular JMS send and publish methods are treated by Oracle Database Advanced Queuing as persistent messages. The regular JMS receive methods receive only AQ persistent messages. To send and receive buffered messages, you must use the Oracle extension APIs <code>bufferSend</code>, <code>bufferPublish</code>, and <code>bufferReceive</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JAJMS" href="../JAJMS/toc.htm"><span class="italic">Oracle Database Advanced Queuing Java API Reference</span></a> for more information on <code>bufferSend</code>, <code>bufferPublish</code>, and <code>bufferReceive</code></div>
<p class="subhead1"><a id="ADQUE2891"></a>Payload Limits</p>
<p>The Oracle Database Advanced Queuing implementation of buffered messages does not support <code>LOB</code> attributes. This places limits on the payloads for the five types of standard JMS messages:</p>
<ul>
<li>
<p>JMS <code>TextMessage</code> payloads cannot exceed 4000 bytes.</p>
<p>This limit might be even lower with some database character sets, because during the Oracle JMS character set conversion, Oracle JMS sometimes must make a conservative choice of using <code>CLOB</code> instead of <code>VARCHAR</code> to store the text payload in the database.</p>
</li>
<li>
<p>JMS <code>BytesMessage</code> payloads cannot exceed 2000 bytes.</p>
</li>
<li>
<p>JMS <code>ObjectMessage</code>, <code>StreamMessage</code>, and <code>MapMessage</code> data serialized by JAVA cannot exceed 2000 bytes.</p>
</li>
<li>
<p>For all other Oracle JMS ADT messages, the corresponding Oracle database ADT cannot contain <code>LOB</code> attributes.</p>
</li>
</ul>
<p class="subhead1"><a id="ADQUE2892"></a>Different Constants</p>
<p>The Oracle Database Advanced Queuing and Oracle JMS APIs use different numerical values to designate buffered and persistent messages, as shown in <a href="#CIAHFDBG">Table 11-3</a>.</p>
<div id="ADQUE2893" class="tblformal">
<p class="titleintable"><a id="sthref1135"></a><a id="CIAHFDBG"></a>Table 11-3 Oracle Database AQ and Oracle JMS Buffered Messaging Constants</p>
<table class="cellalignment1005" title="Oracle Database AQ and Oracle JMS Buffered Messaging Constants" summary="This table shows buffered messaging constants for Oracle Streams AQ and Oracle JMS. The first column is the API, the second column is the persistent constant, and the third column is the buffered constant." dir="ltr">
<thead>
<tr class="cellalignment994">
<th class="cellalignment1001" id="r1c1-t15">API</th>
<th class="cellalignment1001" id="r1c2-t15">Persistent Message</th>
<th class="cellalignment1001" id="r1c3-t15">Buffered Message</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r2c1-t15" headers="r1c1-t15">
<p>Oracle Database Advanced Queuing</p>
</td>
<td class="cellalignment1002" headers="r2c1-t15 r1c2-t15">
<p><code>PERSISTENT := 1</code></p>
</td>
<td class="cellalignment1002" headers="r2c1-t15 r1c3-t15">
<p><code>BUFFERED :=2</code></p>
</td>
</tr>
<tr class="cellalignment994">
<td class="cellalignment1002" id="r3c1-t15" headers="r1c1-t15">
<p>Oracle JMS</p>
</td>
<td class="cellalignment1002" headers="r3c1-t15 r1c2-t15">
<p><code>PERSISTENT := 2</code></p>
</td>
<td class="cellalignment1002" headers="r3c1-t15 r1c3-t15">
<p><code>NON_PERSISTENT := 1</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007207"></a>
<div id="ADQUE2901" class="sect1">
<h2 class="sect1"><a id="sthref1136"></a><a id="sthref1137"></a>JMS Point-to-Point Model Features</h2>
<p>In the point-to-point model, clients exchange messages from one point to another. Message producers and consumers send and receive messages using single-consumer queues. An administrator creates the single-consumer queues with the <code>createQueue</code> method in <code>AQjmsSession</code>. Before they can be used, the queues must be enabled for enqueue/dequeue using the <code>start</code> call in <code>AQjmsDestination</code>. Clients obtain a handle to a previously created queue using the <code>getQueue</code> method on <code>AQjmsSession</code>.</p>
<p>In a single-consumer queue, a message can be consumed exactly once by a single consumer. If there are multiple processes or operating system threads concurrently dequeuing from the same queue, then each process dequeues the first unlocked message at the head of the queue. A locked message cannot be dequeued by a process other than the one that has created the lock.</p>
<p>After processing, the message is removed if the retention time of the queue is 0, or it is retained for a specified retention time. As long as the message is retained, it can be either queried using SQL on the queue table view or dequeued by specifying the message identifier of the processed message in a <code>QueueBrowser</code>.</p>
<p class="subhead1"><a id="ADQUE2902"></a><a id="sthref1138"></a>QueueSender</p>
<p>A client uses a <code>QueueSender</code> to send messages to a queue. It is created by passing a queue to the <code>createSender</code> method in a client <code>Session</code>. A client also has the option of creating a <code>QueueSender</code> without supplying a queue. In that case a queue must be specified on every send operation.</p>
<p>A client can specify a default delivery mode, priority and <code>TimeToLive</code> for all messages sent by the <code>QueueSender</code>. Alternatively, the client can define these options for each message.</p>
<p class="subhead1"><a id="CACDFFDE"></a><a id="ADQUE2903"></a><a id="sthref1139"></a>QueueReceiver</p>
<p>A client uses a <code>QueueReceiver</code> to receive messages from a queue. It is created using the <code>createQueueReceiver</code> method in a client <code>Session</code>. It can be created with or without a <code>messageSelector</code>.</p>
<p class="subhead1"><a id="CACDBGEC"></a><a id="ADQUE2904"></a><a id="sthref1140"></a>QueueBrowser</p>
<p>A client uses a <code>QueueBrowser</code> to view messages on a queue without removing them. The browser method returns a <code>java</code>.<code>util</code>.<code>Enumeration</code> that is used to scan messages in the queue. The first call to <code>nextElement</code> gets a snapshot of the queue. A <code>QueueBrowser</code> can be created with or without a <code>messageSelector</code>.</p>
<p>A <code>QueueBrowser</code> can also optionally lock messages as it is scanning them. This is similar to a &#34;<code>SELECT</code>... <code>for</code> <code>UPDATE&#34;</code> command on the message. This prevents other consumers from removing the message while they are being scanned.</p>
<p class="subhead1"><a id="CACBBCBJ"></a><a id="ADQUE2905"></a><a id="sthref1141"></a><a id="sthref1142"></a>MessageSelector</p>
<p>A <code>messageSelector</code> allows the client to restrict messages delivered to the consumer to those that match the <code>messageSelector</code> expression. A <code>messageSelector</code> for queues containing payloads of type <code>TextMessage</code>, <code>StreamMessage</code>, <code>BytesMessage</code>, <code>ObjectMessage</code>, or <code>MapMessage</code> can contain any expression that has one or more of the following:</p>
<ul>
<li>
<p>JMS message identifier prefixed with &#34;ID:&#34;</p>
<pre>JMSMessageID =&#39;ID:23452345&#39;
</pre></li>
<li>
<p>JMS message header fields or properties</p>
<pre>JMSPriority &lt; 3 AND JMSCorrelationID = &#39;Fiction&#39;

JMSCorrelationID LIKE &#39;RE%&#39;
</pre></li>
<li>
<p>User-defined message properties</p>
<pre>color IN (&#39;RED&#39;, BLUE&#39;, &#39;GREEN&#39;) AND price &lt; 30000 
</pre></li>
</ul>
<p>The <code>messageSelector</code> for queues containing payloads of type <code>AdtMessage</code> can contain any expression that has one or more of the following:</p>
<ul>
<li>
<p>Message identifier without the &#34;ID:&#34; prefix</p>
<pre>msgid = &#39;23434556566767676&#39;
</pre></li>
<li>
<p>Priority, correlation identifier, or both</p>
<pre>priority &lt; 3 AND corrid = &#39;Fiction&#39;
</pre></li>
<li>
<p>Message payload</p>
<pre>tab.user_data.color = &#39;GREEN&#39; AND tab.user_data.price &lt; 30000
</pre></li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1007340"></a>
<div id="ADQUE2906" class="sect1">
<h2 class="sect1"><a id="sthref1143"></a><a id="sthref1144"></a>JMS Publish/Subscribe Model Features</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CACFBDHA">JMS Publish/Subscribe Overview</a></p>
</li>
<li>
<p><a href="#CACBAECF">DurableSubscriber</a></p>
</li>
<li>
<p><a href="#CACJIAGA">RemoteSubscriber</a></p>
</li>
<li>
<p><a href="#i1007464">TopicPublisher</a></p>
</li>
<li>
<p><a href="#i1007469">Recipient Lists</a></p>
</li>
<li>
<p><a href="#i1007506">TopicReceiver</a></p>
</li>
<li>
<p><a href="#i1007601">TopicBrowser</a></p>
</li>
<li>
<p><a href="#CACEHABC">Setting Up JMS Publish/Subscribe Operations</a></p>
</li>
</ul>
<a id="CACFBDHA"></a>
<div id="ADQUE2907" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Publish/Subscribe Overview</h3>
<p>JMS enables flexible and dynamic communication between applications functioning as publishers and applications playing the role of subscribers. The applications are not coupled together; they interact based on messages and message content.</p>
<p>In distributing messages, publisher applications are not required to handle or manage message recipients explicitly. This allows new subscriber applications to be added dynamically without changing any publisher application logic.</p>
<p>Similarly, subscriber applications receive messages based on message content without regard to which publisher applications are sending messages. This allows new publisher applications to be added dynamically without changing any subscriber application logic.</p>
<p>Subscriber applications specify interest by defining a rule-based subscription on message properties or the message content of a topic. The system automatically routes messages by computing recipients for published messages using the rule-based subscriptions.</p>
<p>In the publish/subscribe model, messages are published to and received from topics. A topic is created using the <code>CreateTopic()</code> method in an <code>AQjmsSession</code>. A client can obtain a handle to a previously-created topic using the <code>getTopic()</code> method in <code>AQjmsSession</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CACBAECF"></a>
<div id="ADQUE2908" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1145"></a>DurableSubscriber</h3>
<p>A client creates a <code>DurableSubscriber</code> with the <code>createDurableSubscriber()</code> method in a client <code>Session</code>. It can be created with or without a <code>messageSelector</code>.</p>
<p>A <code>messageSelector</code> allows the client to restrict messages delivered to the subscriber to those that match the selector. The syntax for the selector is described in detail in <code>createDurableSubscriber</code> in <a class="olink JAJMS" href="../JAJMS/toc.htm"><span class="italic">Oracle Database Advanced Queuing Java API Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACBBCBJ">&#34;MessageSelector&#34;</a></div>
<p>When subscribers use the same name, durable subscriber action depends on the Java EE compliance mode set for an <a href="glossary.htm#CBAFCEFF"><span class="xrefglossterm">Oracle Java Message Service</span></a> (Oracle JMS) client at runtime.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACCJDBI">&#34;Java EE Compliance&#34;</a></div>
<p>In noncompliant mode, two durable <code>TopicSubscriber</code> objects with the same name can be active against two different topics. In compliant mode, durable subscribers with the same name are not allowed. If two subscribers use the same name and are created against the same topic, but the selector used for each subscriber is different, then the underlying Oracle Database Advanced Queuing subscription is altered using the internal <code>DBMS_AQJMS.ALTER_SUBSCRIBER()</code> call.</p>
<p>If two subscribers use the same name and are created against two different topics, and if the client that uses the same subscription name also originally created the subscription name, then the existing subscription is dropped and the new subscription is created.</p>
<p>If two subscribers use the same name and are created against two different topics, and if a different client (a client that did not originate the subscription name) uses an existing subscription name, then the subscription is not dropped and an error is thrown. Because it is not known if the subscription was created by JMS or PL/SQL, the subscription on the other topic should not be dropped.</p>
</div>
<!-- class="sect2" -->
<a id="CACJIAGA"></a>
<div id="ADQUE2909" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1146"></a>RemoteSubscriber</h3>
<p>Remote subscribers are defined using the <code>createRemoteSubscriber</code> call. The remote subscriber can be a specific consumer at the remote topic or all subscribers at the remote topic</p>
<p>A remote subscriber is defined using the <code>AQjmsAgent</code> structure. An <code>AQjmsAgent</code> consists of a name and address. The name refers to the <code>consumer_name</code> at the remote topic. The address refers to the remote topic:</p>
<pre><span class="italic">schema.topic_name</span>[@dblink]
</pre>
<p>To publish messages to a particular consumer at the remote topic, the <code>subscription_name</code> of the <a href="glossary.htm#CBACHAEI"><span class="xrefglossterm">recipient</span></a> at the remote topic must be specified in the name field of <code>AQjmsAgent</code>. The remote topic must be specified in the address field of <code>AQjmsAgent</code>.</p>
<p>To publish messages to all subscribers of the remote topic, the name field of <code>AQjmsAgent</code> must be set to null. The remote topic must be specified in the address field of <code>AQjmsAgent</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i1007464"></a>
<div id="ADQUE2910" class="sect2">
<h3 class="sect2"><a id="sthref1147"></a>TopicPublisher</h3>
<p>Messages are published using <code>TopicPublisher</code>, which is created by passing a <code>Topic</code> to a <code>createPublisher</code> method. A client also has the option of creating a <code>TopicPublisher</code> without supplying a <code>Topic</code>. In this case, a <code>Topic</code> must be specified on every publish operation. A client can specify a default delivery mode, priority and <code>TimeToLive</code> for all messages sent by the <code>TopicPublisher</code>. It can also specify these options for each message.</p>
</div>
<!-- class="sect2" -->
<a id="i1007469"></a>
<div id="ADQUE2911" class="sect2">
<h3 class="sect2"><a id="sthref1148"></a><a id="sthref1149"></a>Recipient Lists</h3>
<p>In the JMS publish/subscribe model, clients can specify explicit recipient lists instead of having messages sent to all the subscribers of the topic. These recipients may or may not be existing subscribers of the topic. The recipient list overrides the subscription list on the topic for this message. Recipient lists functionality is an Oracle extension to JMS.</p>
</div>
<!-- class="sect2" -->
<a id="i1007506"></a>
<div id="ADQUE2912" class="sect2">
<h3 class="sect2"><a id="sthref1150"></a>TopicReceiver</h3>
<p>If the recipient name is explicitly specified in the recipient list, but that recipient is not a subscriber to the queue, then messages sent to it can be received by creating a <code>TopicReceiver</code>. If the subscriber name is not specified, then clients must use durable subscribers at the remote site to receive messages. <code>TopicReceiver</code> is an Oracle extension to JMS.</p>
<p>A <code>TopicReceiver</code> can be created with a <code>messageSelector</code>. This allows the client to restrict messages delivered to the recipient to those that match the selector.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACBBCBJ">&#34;MessageSelector&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1007601"></a>
<div id="ADQUE2913" class="sect2">
<h3 class="sect2"><a id="sthref1151"></a>TopicBrowser</h3>
<p>A client uses a <code>TopicBrowser</code> to view messages on a topic without removing them. The browser method returns a <code>java.util.Enumeration</code> that is used to scan topic messages. Only durable subscribers are allowed to create a <code>TopicBrowser</code>. The first call to <code>nextElement</code> gets a snapshot of the topic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="jm_pblsh.htm#CHDEAAJI">&#34;Creating a TopicBrowser for Standard JMS Messages&#34;</a></div>
<p>A <code>TopicBrowser</code> can optionally lock messages as it is scanning them. This is similar to a <code>SELECT</code>... <code>for</code> <code>UPDATE</code> command on the message. This prevents other consumers from removing the message while it is being scanned.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="jm_pblsh.htm#CHDIEGCJ">&#34;Creating a TopicBrowser for Standard JMS Messages, Locking Messages&#34;</a></div>
<p>A <code>TopicBrowser</code> can be created with a <code>messageSelector</code>. This allows the client to restrict messages delivered to the browser to those that match the selector.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACBBCBJ">&#34;MessageSelector&#34;</a></div>
<p><code>TopicBrowser</code> supports a purge feature. This allows a client using a <code>TopicBrowser</code> to discard all messages that have been seen during the current browse operation on the topic. A purge is equivalent to a destructive receive of all of the seen messages (as if performed using a <code>TopicSubscriber</code>).</p>
<p>For a purge, a message is considered seen if it has been returned to the client using a call to the <code>nextElement()</code> operation on the <code>java.lang.Enumeration</code> for the <code>TopicBrowser</code>. Messages that have not yet been seen by the client are not discarded during a purge. A purge operation can be performed multiple times on the same <code>TopicBrowser</code>.</p>
<p>The effect of a purge becomes stable when the JMS <code>Session</code> used to create the <code>TopicBrowser</code> is committed. If the operations on the session are rolled back, then the effects of the purge operation are also undone.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="jm_pblsh.htm#i1007232">&#34;Browsing Messages Using a TopicBrowser&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="CACEHABC"></a>
<div id="ADQUE2914" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1152"></a><a id="sthref1153"></a>Setting Up JMS Publish/Subscribe Operations</h3>
<p>Follow these steps to use the publish/subscribe model of communication in JMS:</p>
<ol>
<li>
<p>Set up one or more topics to hold messages. These topics represent an area or subject of interest. For example, a topic can represent billed orders.</p>
</li>
<li>
<p>Enable enqueue/dequeue on the topic using the <code>start</code> call in <code>AQjmsDestination</code>.</p>
</li>
<li>
<p>Create a set of durable subscribers. Each subscriber can specify a <code>messageSelector</code> that selects the messages that the subscriber wishes to receive. A null <code>messageSelector</code> indicates that the subscriber wishes to receive all messages published on the topic.</p>
<p>Subscribers can be local or remote. Local subscribers are durable subscribers defined on the same topic on which the message is published. Remote subscribers are other topics, or recipients on other topics that are defined as subscribers to a particular queue. In order to use remote subscribers, you must set up propagation between the source and destination topics. Remote subscribers and propagation are Oracle extensions to JMS.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_admin.htm#i1008689">&#34;Managing Propagations&#34;</a></div>
</li>
<li>
<p>Create <code>TopicPublisher</code> objects using the <code>createPublisher()</code> method in the publisher <code>Session</code>. Messages are published using the <code>publish</code> call. Messages can be published to all subscribers to the topic or to a specified subset of recipients on the topic.</p>
</li>
<li>
<p>Subscribers receive messages on the topic by using the <code>receive</code> method.</p>
</li>
<li>
<p>Subscribers can also receive messages asynchronously by using message listeners.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_opers.htm#CIHDAEEG">&#34;Listening to One or More Queues&#34;</a></div>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007627"></a>
<div id="ADQUE2915" class="sect1">
<h2 class="sect1"><a id="sthref1154"></a><a id="sthref1155"></a>JMS Message Producer Features</h2>
<ul>
<li>
<p><a href="#i1007646">Priority and Ordering of Messages</a></p>
</li>
<li>
<p><a href="#i1007668">Specifying a Message Delay</a></p>
</li>
<li>
<p><a href="#i1007673">Specifying a Message Expiration</a></p>
</li>
<li>
<p><a href="#i1007678">Message Grouping</a></p>
</li>
</ul>
<a id="i1007646"></a>
<div id="ADQUE2916" class="sect2">
<h3 class="sect2"><a id="sthref1156"></a><a id="sthref1157"></a><a id="sthref1158"></a><a id="sthref1159"></a>Priority and Ordering of Messages</h3>
<p>Message ordering dictates the order in which messages are received from a queue or topic. The ordering method is specified when the queue table for the queue or topic is created. Currently, Oracle Database Advanced Queuing supports ordering on message priority and enqueue time, producing four possible ways of ordering:</p>
<ul>
<li>
<p>First-In, First-Out (FIFO)</p>
<p>If enqueue time was chosen as the ordering criteria, then messages are received in the order of the enqueue time. The enqueue time is assigned to the message by Oracle Database Advanced Queuing at message publish/send time. This is also the default ordering.</p>
</li>
<li>
<p>Priority Ordering</p>
<p>If priority ordering was chosen, then each message is assigned a priority. Priority can be specified as a message property at publish/send time by the <code>MessageProducer</code>. The messages are received in the order of the priorities assigned.</p>
</li>
<li>
<p>FIFO Priority</p>
<p>If FIFO priority ordering was chosen, then the topic/queue acts like a priority queue. If two messages are assigned the same priority, then they are received in the order of their enqueue time.</p>
</li>
<li>
<p>Enqueue Time Followed by Priority</p>
<p>Messages with the same enqueue time are received according to their priorities. If the ordering criteria of two message is the same, then the order they are received is indeterminate. However, Oracle Database Advanced Queuing does ensure that messages produced in one session with a particular ordering criteria are received in the order they were sent.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007668"></a>
<div id="ADQUE2917" class="sect2">
<h3 class="sect2"><a id="sthref1160"></a><a id="sthref1161"></a><a id="sthref1162"></a>Specifying a Message Delay</h3>
<p>Messages can be sent/published to a queue/topic with delay. The delay represents a time interval after which the message becomes available to the message consumer. A message specified with a delay is in a waiting state until the delay expires. Receiving by message identifier overrides the delay specification.</p>
<p>Delay is an Oracle Database Advanced Queuing extension to JMS message properties. It requires the Oracle Database Advanced Queuing background process queue monitor to be started.</p>
</div>
<!-- class="sect2" -->
<a id="i1007673"></a>
<div id="ADQUE2918" class="sect2">
<h3 class="sect2"><a id="sthref1163"></a><a id="sthref1164"></a><a id="sthref1165"></a>Specifying a Message Expiration</h3>
<p>Producers of messages can specify expiration limits, or <code>TimeToLive</code> for messages. This defines the period of time the message is available for a Message Consumer.</p>
<p><code>TimeToLive</code> can be specified at send/publish time or using the set <code>TimeToLive</code> method of a <code>MessageProducer</code>, with the former overriding the latter. The Oracle Database Advanced Queuing background process queue monitor must be running to implement <code>TimeToLive</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i1007678"></a>
<div id="ADQUE2919" class="sect2">
<h3 class="sect2"><a id="sthref1166"></a><a id="sthref1167"></a>Message Grouping</h3>
<p>Messages belonging to a queue/topic can be grouped to form a set that can be consumed by only one consumer at a time. This requires the queue/topic be created in a queue table that is enabled for <a href="glossary.htm#CBACAHAA"><span class="xrefglossterm">transactional</span></a> message grouping. All messages belonging to a group must be created in the same transaction, and all messages created in one transaction belong to the same group.</p>
<p>Message grouping is an Oracle Database Advanced Queuing extension to the JMS specification.</p>
<p>You can use this feature to divide a complex message into a linked series of simple messages. For example, an invoice directed to an invoices queue could be divided into a header message, followed by several messages representing details, followed by the trailer message.</p>
<p>Message grouping is also very useful if the message payload contains complex large objects such as images and video that can be segmented into smaller objects.</p>
<p>The priority, delay, and expiration properties for the messages in a group are determined solely by the message properties specified for the first message (head) of the group. Properties specified for subsequent messages in the group are ignored.</p>
<p>Message grouping is preserved during propagation. The destination topic must be enabled for transactional grouping.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_intro.htm#CHDJGIJG">&#34;Dequeue Features&#34;</a> for a discussion of restrictions you must keep in mind if message grouping is to be preserved while dequeuing messages from a queue enabled for transactional grouping</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007692"></a>
<div id="ADQUE2920" class="sect1">
<h2 class="sect1"><a id="sthref1168"></a>JMS Message Consumer Features</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1007718">Receiving Messages</a></p>
</li>
<li>
<p><a href="#i1007834">Message Navigation in Receive</a></p>
</li>
<li>
<p><a href="#i1007911">Browsing Messages</a></p>
</li>
<li>
<p><a href="#CACDAJID">Remove No Data</a></p>
</li>
<li>
<p><a href="#i1007922">Retry with Delay Interval</a></p>
</li>
<li>
<p><a href="#i1007977">Asynchronously Receiving Messages Using MessageListener</a></p>
</li>
<li>
<p><a href="#i1008053">Exception Queues</a></p>
</li>
</ul>
<a id="i1007718"></a>
<div id="ADQUE2921" class="sect2">
<h3 class="sect2"><a id="sthref1169"></a><a id="sthref1170"></a>Receiving Messages</h3>
<p>A JMS application can receive messages by creating a message consumer. Messages can be received synchronously using the <code>receive</code> call or asynchronously using a message listener.</p>
<p>There are three modes of receive:</p>
<ul>
<li>
<p>Block until a message arrives for a consumer</p>
</li>
<li>
<p>Block for a maximum of the specified time</p>
</li>
<li>
<p>Nonblocking</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1007834"></a>
<div id="ADQUE2922" class="sect2">
<h3 class="sect2"><a id="sthref1171"></a><a id="sthref1172"></a>Messa<a id="sthref1173"></a>ge Navigation in Receive</h3>
<p>If a consumer does not specify a navigation mode, then its first <code>receive</code> in a session retrieves the first message in the queue or topic, its second <code>receive</code> gets the next message, and so on. If a high priority message arrives for the consumer, then the consumer does not receive the message until it has cleared the messages that were already there before it.</p>
<p>To provide the consumer better control in navigating the queue for its messages, Oracle Database Advanced Queuing offers several navigation modes as JMS extensions. These modes can be set at the <code>TopicSubscriber</code>, <code>QueueReceiver</code> or the <code>TopicReceiver</code>.</p>
<p>Two modes are available for ungrouped messages:</p>
<ul>
<li>
<p><code>FIRST_MESSAGE</code></p>
<p>This mode resets the position to the beginning of the queue. It is useful for priority ordered queues, because it allows the consumer to remove the message on the top of the queue.</p>
</li>
<li>
<p><code>NEXT_MESSAGE</code></p>
<p>This mode gets whatever message follows the established position of the consumer. For example, a <code>NEXT_MESSAGE</code> applied when the position is at the fourth message will get the fifth message in the queue. This is the default action.</p>
</li>
</ul>
<p>Three modes are available for grouped messages:</p>
<ul>
<li>
<p><code>FIRST_MESSAGE</code></p>
<p>This mode resets the position to the beginning of the queue.</p>
</li>
<li>
<p><code>NEXT_MESSAGE</code></p>
<p>This mode sets the position to the next message in the same transaction.</p>
</li>
<li>
<p><code>NEXT_TRANSACTION</code></p>
<p>This mode sets the position to the first message in the next transaction.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
JMS Sharded Queues does not support the three preceding modes.</div>
<p>The transaction grouping property can be negated if messages are received in the following ways:</p>
<ul>
<li>
<p>Receive by specifying a correlation identifier in the selector</p>
</li>
<li>
<p>Receive by specifying a message identifier in the selector</p>
</li>
<li>
<p>Committing before all the messages of a transaction group have been received</p>
</li>
</ul>
<p>If the consumer reaches the end of the queue while using the <code>NEXT</code>_<code>MESSAGE</code> or <code>NEXT</code>_<code>TRANSACTION</code> option, and you have specified a blocking <code>receive()</code>, then the navigating position is automatically changed to the beginning of the queue.</p>
<p>By default, a <code>QueueReceiver</code>, <code>TopicReceiver</code>, or <code>TopicSubscriber</code> uses <code>FIRST_MESSAGE</code> for the first receive call, and <code>NEXT_MESSAGE</code> for subsequent <code>receive()</code> calls.</p>
</div>
<!-- class="sect2" -->
<a id="i1007911"></a>
<div id="ADQUE2923" class="sect2">
<h3 class="sect2"><a id="sthref1174"></a><a id="sthref1175"></a>Browsing Messages</h3>
<p>Aside from the usual <code>receive</code>, which allows the dequeuing client to delete the message from the queue, JMS provides an interface that allows the JMS client to browse its messages in the queue. A <code>QueueBrowser</code> can be created using the <code>createBrowser</code> method from <code>QueueSession</code>.</p>
<p>If a message is browsed, then it remains available for further processing. That does not necessarily mean that the message will remain available to the JMS session after it is browsed, because a <code>receive</code> call from a concurrent session might remove it.</p>
<p>To prevent a viewed message from being removed by a concurrent JMS client, you can view the message in the locked mode. To do this, you must create a <code>QueueBrowser</code> with the locked mode using the Oracle Database Advanced Queuing extension to the JMS interface. The lock on the message is released when the session performs a commit or a rollback.</p>
<p>To remove a message viewed by a <code>QueueBrowser</code>, the session must create a <code>QueueReceiver</code> and use the <code>JMSmesssageID</code> as the selector.</p>
</div>
<!-- class="sect2" -->
<a id="CACDAJID"></a>
<div id="ADQUE2924" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1176"></a><a id="sthref1177"></a>Remove No Data</h3>
<p>The consumer can remove a message from a queue or topic without retrieving it using the <code>receiveNoData</code> call. This is useful when the application has already examined the message, perhaps using a <code>QueueBrowser</code>. This mode allows the JMS client to avoid the overhead of retrieving a payload from the database, which can be substantial for a large message.</p>
</div>
<!-- class="sect2" -->
<a id="i1007922"></a>
<div id="ADQUE2925" class="sect2">
<h3 class="sect2"><a id="sthref1178"></a><a id="sthref1179"></a>Retry with Delay Interval</h3>
<p>If a transaction receiving a message from a queue/topic fails, then it is regarded as an unsuccessful attempt to remove the message. Oracle Database Advanced Queuing records the number of failed attempts to remove the message in the message history.</p>
<p>An application can specify the maximum number of retries supported on messages at the queue/topic level. If the number of failed attempts to remove a message exceeds this maximum, then the message is moved to an exception queue.</p>
<p>Oracle Database Advanced Queuing allows users to specify a <code>retry_delay</code> along with <code>max_retries</code>. This means that a message that has undergone a failed attempt at retrieving remains visible in the queue for dequeue after <code>retry_delay</code> interval. Until then it is in the <code>WAITING</code> state. The Oracle Database Advanced Queuing background process time manager enforces the retry delay property.</p>
<p>The maximum retries and retry delay are properties of the queue/topic. They can be set when the queue/topic is created or by using the alter method on the queue/topic. The default value for MAX_RETRIES is 5.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
JMS Sharded Queues does not support retry delay.</div>
</div>
<!-- class="sect2" -->
<a id="i1007977"></a>
<div id="ADQUE2926" class="sect2">
<h3 class="sect2"><a id="sthref1180"></a><a id="sthref1181"></a><a id="sthref1182"></a>Asynchronously Receiving Messages Using MessageListener</h3>
<p>The JMS client can receive messages asynchronously by setting the <code>MessageListener</code> using the <code>setMessageListener</code> method.</p>
<p>When a message arrives for the consumer, the <code>onMessage</code> method of the message listener is invoked with the message. The message listener can commit or terminate the receipt of the message. The message listener does not receive messages if the JMS <code>Connection</code> has been stopped. The <code>receive</code> call must not be used to receive messages once the message listener has been set for the consumer.</p>
<p>The JMS client can receive messages asynchronously for all consumers in the session by setting the <code>MessageListener</code> at the session. No other mode for receiving messages must be used in the session once the message listener has been set.</p>
</div>
<!-- class="sect2" -->
<div id="ADQUE2927" class="sect2"><a id="i1008053"></a>
<h3 class="sect2"><a id="sthref1183"></a><a id="sthref1184"></a><a id="sthref1185"></a>Exception Queues<a id="sthref1186"></a></h3>
<p>An exception queue is a repository for all expired or unserviceable messages. Applications cannot directly enqueue into exception queues. However, an application that intends to handle these expired or unserviceable messages can receive/remove them from the exception queue.</p>
<p>To retrieve messages from exception queues, the JMS client must use the point-to-point interface. The exception queue for messages intended for a topic must be created in a queue table with multiple consumers enabled. Like any other queue, the exception queue must be enabled for receiving messages using the <code>start</code> method in the <code>AQOracleQueue</code> class. You get an exception if you try to enable it for enqueue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
JMS Sharded Queues does not support Exception Queues.</div>
<p>The exception queue is an Oracle-specific message property called <code>&#34;JMS_OracleExcpQ&#34;</code> that can be set with the message before sending/publishing it. If an exception queue is not specified, then the default exception queue is used. The default exception queue is automatically created when the queue table is created and is named <code>AQ$_</code><code><span class="codeinlineitalic">queue_table_name</span></code><code>_E</code>.</p>
<p>Messages are moved to the exception queue under the following conditions:</p>
<ul>
<li>
<p>The message was not dequeued within the specified <code>timeToLive</code>.</p>
<p>For messages intended for more than one subscriber, the message is moved to the exception queue if one or more of the intended recipients is not able to dequeue the message within the specified <code>timeToLive</code>.</p>
</li>
<li>
<p>The message was received successfully, but the application terminated the transaction that performed the <code>receive</code> because of an error while processing the message. The message is returned to the queue/topic and is available for any applications that are waiting to receive messages.</p>
<p>A <code>receive</code> is considered rolled back or undone if the application terminates the entire transaction, or if it rolls back to a savepoint that was taken before the <code>receive</code>.</p>
<p>Because this was a failed attempt to receive the message, its retry count is updated. If the retry count of the message exceeds the maximum value specified for the queue/topic where it resides, then it is moved to the exception queue.</p>
<p>If a message has multiple subscribers, then the message is moved to the exception queue only when all the recipients of the message have exceeded the retry limit.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If a dequeue transaction failed because the server process died (including <code>ALTER</code> <code>SYSTEM</code> <code>KILL</code> <code>SESSION</code>) or <code>SHUTDOWN</code> <code>ABORT</code> on the instance, then <code>RETRY_COUNT</code> is not incremented.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008071"></a>
<div id="ADQUE2928" class="sect1">
<h2 class="sect1"><a id="sthref1187"></a><a id="sthref1188"></a>JMS Propagation</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1008090">RemoteSubscriber</a></p>
</li>
<li>
<p><a href="#i1008252">Scheduling Propagation</a></p>
</li>
<li>
<p><a href="#i1008304">Enhanced Propagation Scheduling Capabilities</a></p>
</li>
<li>
<p><a href="#i1008321">Exception Handling During Propagation</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
JMS Sharded Queues does not support RemoteSubscriber, Scheduling Propagation, Enhanced Propagation Scheduling Capabilities, and Exception Handling During Propagation.</div>
<a id="i1008090"></a>
<div id="ADQUE2929" class="sect2">
<h3 class="sect2"><a id="sthref1189"></a><a id="sthref1190"></a>RemoteSubscriber</h3>
<p>Oracle Database Advanced Queuing allows a subscriber at another database to subscribe to a topic. If a message published to the topic meets the criterion of the remote subscriber, then it is automatically propagated to the queue/topic at the remote database specified for the remote subscriber. Propagation is performed using database links and Oracle Net Services. This enables applications to communicate with each other without having to be connected to the same database.</p>
<p>There are two ways to implement remote subscribers:</p>
<ul>
<li>
<p>The <code>createRemoteSubscriber</code> method can be used to create a remote subscriber to/on the topic. The remote subscriber is specified as an instance of the class <code>AQjmsAgent</code>.</p>
</li>
<li>
<p>The <code>AQjmsAgent</code> has a name and an address. The address consists of a queue/topic and the database link to the database of the subscriber.</p>
</li>
</ul>
<p>There are two kinds of remote subscribers:</p>
<ul>
<li>
<p>The remote subscriber is a topic.</p>
<p>This occurs when no name is specified for the remote subscriber in the <code>AQjmsAgent</code> object and the address is a topic. The message satisfying the subscriber&#39;s subscription is propagated to the remote topic. The propagated message is now available to all the subscriptions of the remote topic that it satisfies.</p>
</li>
<li>
<p>A specific remote recipient is specified for the message.</p>
<p>The remote subscription can be for a particular consumer at the remote database. If the name of the remote recipient is specified (in the <code>AQjmsAgent</code> object), then the message satisfying the subscription is propagated to the remote database for that recipient only. The recipient at the remote database uses the <code>TopicReceiver</code> interface to retrieve its messages. The remote subscription can also be for a point-to-point queue.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1008252"></a>
<div id="ADQUE2930" class="sect2">
<h3 class="sect2"><a id="sthref1191"></a><a id="sthref1192"></a>Scheduling Propagation</h3>
<p>Propagation must be scheduled using the <code>schedule_propagation</code> method for every topic from which messages are propagated to target destination databases.</p>
<p>A schedule indicates the time frame during which messages can be propagated from the source topic. This time frame can depend on several factors such as network traffic, the load at the source database, the load at the destination database, and so on. The schedule therefore must be tailored for the specific source and destination. When a schedule is created, a job is automatically submitted to the <code>job_queue</code> facility to handle propagation.</p>
<p>The administrative calls for propagation scheduling provide great flexibility for managing the schedules. The duration or propagation window parameter of a schedule specifies the time frame during which propagation must take place. If the duration is unspecified, then the time frame is an infinite single window. If a window must be repeated periodically, then a finite duration is specified along with a <code>next_time</code> function that defines the periodic interval between successive windows.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="jm_opers.htm#i1006974">&#34;Scheduling a Propagation&#34;</a></div>
<p>The propagation schedules defined for a queue can be changed or dropped at any time during the life of the queue. In addition there are calls for temporarily disabling a schedule (instead of dropping the schedule) and enabling a disabled schedule. A schedule is active when messages are being propagated in that schedule. All the administrative calls can be made irrespective of whether the schedule is active or not. If a schedule is active, then it takes a few seconds for the calls to be executed.</p>
<p>Job queue processes must be started for propagation to take place. At least 2 job queue processes must be started. The database links to the destination database must also be valid. The source and destination topics of the propagation must be of the same message type. The remote topic must be enabled for enqueue. The user of the database link must also have enqueue privileges to the remote topic.</p>
</div>
<!-- class="sect2" -->
<a id="i1008304"></a>
<div id="ADQUE2931" class="sect2">
<h3 class="sect2">Enhanced Propagation Scheduling Capabilities</h3>
<p>Catalog views defined for propagation provide the following information about active schedules:</p>
<ul>
<li>
<p>Name of the background process handling the schedule</p>
</li>
<li>
<p>SID (session and serial number) for the session handling the propagation</p>
</li>
<li>
<p>Instance handling a schedule (if using Oracle RAC)</p>
</li>
<li>
<p>Previous successful execution of a schedule</p>
</li>
<li>
<p>Next planned execution of a schedule</p>
</li>
</ul>
<p>The following propagation statistics are maintained for each schedule, providing useful information to queue administrators for tuning:</p>
<ul>
<li>
<p>The total number of messages propagated in a schedule</p>
</li>
<li>
<p>Total number of bytes propagated in a schedule</p>
</li>
<li>
<p>Maximum number of messages propagated in a window</p>
</li>
<li>
<p>Maximum number of bytes propagated in a window</p>
</li>
<li>
<p>Average number of messages propagated in a window</p>
</li>
<li>
<p>Average size of propagated messages</p>
</li>
<li>
<p>Average time to propagated a message</p>
</li>
</ul>
<p>Propagation has built-in support for handling failures and reporting errors. For example, if the database link specified is invalid, or if the remote database is unavailable, or if the remote topic/queue is not enabled for enqueuing, then the appropriate error message is reported. Propagation uses an exponential backoff scheme for retrying propagation from a schedule that encountered a failure. If a schedule continuously encounters failures, then the first retry happens after 30 seconds, the second after 60 seconds, the third after 120 seconds and so forth. If the retry time is beyond the expiration time of the current window, then the next retry is attempted at the start time of the next window. A maximum of 16 retry attempts are made after which the schedule is automatically disabled.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Once a retry attempt slips to the next propagation window, it will always do so; the exponential backoff scheme no longer governs retry scheduling. If the date function specified in the <code>next_time</code> parameter of <code>DBMS_AQADM.SCHEDULE_PROPAGATION()</code> results in a short interval between windows, then the number of unsuccessful retry attempts can quickly reach 16, disabling the schedule.</div>
<p>When a schedule is disabled automatically due to failures, the relevant information is written into the alert log. It is possible to check at any time if there were failures encountered by a schedule and if so how many successive failures were encountered, the error message indicating the cause for the failure and the time at which the last failure was encountered. By examining this information, an administrator can fix the failure and enable the schedule.</p>
<p>If propagation is successful during a retry, then the number of failures is reset to 0.</p>
<p>Propagation has built-in support for Oracle Real Application Clusters and is transparent to the user and the administrator. The job that handles propagation is submitted to the same instance as the owner of the queue table where the source topic resides. If at any time there is a failure at an instance and the queue table that stores the topic is migrated to a different instance, then the propagation job is also automatically migrated to the new instance. This minimizes the pinging between instances and thus offers better performance. Propagation has been designed to handle any number of concurrent schedules.</p>
<p>The number of <code>job_queue_processes</code> is limited to a maximum of 1000 and some of these can be used to handle jobs unrelated to propagation. Hence, propagation has built in support for multitasking and load balancing. The propagation algorithms are designed such that multiple schedules can be handled by a single snapshot (<code>job_queue</code>) process. The propagation load on a <code>job_queue</code> processes can be skewed based on the arrival rate of messages in the different source topics. If one process is overburdened with several active schedules while another is less loaded with many passive schedules, then propagation automatically redistributes the schedules among the processes such that they are loaded uniformly.</p>
</div>
<!-- class="sect2" -->
<a id="i1008321"></a>
<div id="ADQUE2932" class="sect2">
<h3 class="sect2"><a id="sthref1193"></a><a id="sthref1194"></a><a id="sthref1195"></a>Exception Handling During Propagation</h3>
<p>When a system error such as a network failure occurs, Oracle Database Advanced Queuing continues to attempt to propagate messages using an exponential back-off algorithm. In some situations that indicate application errors in queue-to-dblink propagations, Oracle Database Advanced Queuing marks messages as <code>UNDELIVERABLE</code> and logs a message in <code>alert.log</code>. Examples of such errors are when the remote queue does not exist or when there is a type mismatch between the source queue and the remote queue. The trace files in the <code>background_dump_dest</code> directory can provide additional information about the error.</p>
<p>When a new job queue process starts, it clears the mismatched type errors so the types can be reverified. If you have capped the number of job queue processes and propagation remains busy, then you might not want to wait for the job queue process to terminate and restart. Queue types can be reverified at any time using <code>DBMS_AQADM.VERIFY_QUEUE_TYPES</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When a type mismatch is detected in queue-to-queue propagation, propagation stops and throws an error. In such situations you must query the <code>DBA_SCHEDULES</code> view to determine the last error that occurred during propagation to a particular destination. The message is not marked as <code>UNDELIVERABLE</code>.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008327"></a>
<div id="ADQUE2933" class="sect1">
<h2 class="sect1"><a id="sthref1196"></a><a id="sthref1197"></a><a id="sthref1198"></a>Message Transformation with JMS AQ</h2>
<p>A <a href="glossary.htm#CBACGHDB"><span class="xrefglossterm">transformation</span></a> can be defined to map messages of one format to another. Transformations are useful when applications that use different formats to represent the same information must be integrated. Transformations can be SQL expressions and PL/SQL functions. Message transformation is an Oracle Database Advanced Queuing extension to the standard JMS interface.</p>
<p>The transformations can be created using the <code>DBMS_TRANSFORM.create_transformation</code> procedure. Transformation can be specified for the following operations:</p>
<ul>
<li>
<p>Sending a message to a queue or topic</p>
</li>
<li>
<p>Receiving a message from a queue or topic</p>
</li>
<li>
<p>Creating a <code>TopicSubscriber</code></p>
</li>
<li>
<p>Creating a <code>RemoteSubscriber</code>. This enables propagation of messages between topics of different formats.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
JMS Sharded Queues does not support message transformation.</div>
</div>
<!-- class="sect1" -->
<a id="BABHCHCH"></a>
<div id="ADQUE3649" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">JMS Sharded Queues</h2>
<p>JMS Sharded Queues has been introduced in Oracle Database 12<span class="italic">c</span> Release 1 (12.1) that provides JMS functionality with an optimized database queuing implementation. JMS Sharded Queues are the preferred JMS configuration for Oracle Advanced Queuing with:</p>
<ul>
<li>
<p>JMS queues that have enqueuers or dequeuers on multiple Oracle RAC instances</p>
</li>
<li>
<p>high throughput JMS queues</p>
</li>
<li>
<p>non-sharded JMS queues that consume too many system resources</p>
</li>
<li>
<p>JMS queues with a large number of subscribers.</p>
</li>
</ul>
<p>A sharded queue is a single logical queue that is transparently divided into multiple, independent, physical queues through system-maintained partitioning. A <a href="glossary.htm#CBADGDFG"><span class="xrefglossterm">sharded queue</span></a> increases enqueue-dequeue throughput, especially across Oracle RAC instances, because ordering between two messages on different queue shards is best effort. Each shard is ordered based on enqueue time within a session. Sharded queues automatically manage table partitions so that enqueuers and dequeuers do not contend among themselves. In addition, sharded queues use an in-memory message cache to optimize performance and reduce the disk and CPU overhead of AQ-JMS enqueues and dequeues.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABDDDIA">JMS Sharded Queues and the Message Cache</a></p>
</li>
<li>
<p><a href="#BABHGIEC">JMS Sharded Queues and Enqueuing / Dequeuing Messages</a></p>
</li>
<li>
<p><a href="#BABIEJBA">JMS Sharded Queues and Native JMS Support</a></p>
</li>
<li>
<p><a href="#BABGGIIC">JMS Sharded Queues and Partitioning</a></p>
</li>
<li>
<p><a href="#BABGJGCA">JMS Sharded Queues and Oracle Real Application Clusters (Oracle RAC)</a></p>
</li>
<li>
<p><a href="#BABBBHJI">JMS Sharded Queue Restrictions</a></p>
</li>
<li>
<p><a href="#BABFFFEA">JMS Sharded Queues Tuning</a></p>
</li>
</ul>
<a id="BABDDDIA"></a>
<div id="ADQUE3650" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Sharded Queues and the Message Cache</h3>
<p>Sharded queues introduce a special purpose message cache which lets you trade off SGA usage for increased throughput, reduced latency, and increased concurrency. When combined with partitioning, the message cache reduces the need for some queries, DML operations, and indexes. The message cache is most effective when all dequeuers keep up with enqueuers and when the message cache is big enough to store messages (including payloads) for each sharded queue&#39;s enqueuers and dequeuers. The message cache uses the Streams pool. If JMS sharded queues share the Streams pool on the same instance as Streams replication functionality, you can use <code>DBMS_AQADM</code> procedures such as <code>SET_MIN_STREAMS_POOL</code> and <code>SET_MAX_STREAMS_POOL</code> to fine tune the allocation of Streams Pool memory.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS005" href="../ARPLS/d_aqadm.htm#ARPLS005"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information</div>
</div>
<!-- class="sect2" -->
<a id="BABHGIEC"></a>
<div id="ADQUE3651" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Sharded Queues and Enqueuing / Dequeuing Messages</h3>
<p>To improve throughput and reduce overhead and latency, enqueues and dequeues are optimized to use the message cache, the rules engine, and background processing when possible. For example,</p>
<ul>
<li>
<p>sharded queues take advantage of new rules engine improvements</p>
</li>
<li>
<p>a message that has its payload in the message cache does not have to be re-read from disk during a dequeue</p>
</li>
<li>
<p>dequeue by correlation id or other JMS properties can often be evaluated without accessing the disk</p>
</li>
<li>
<p>partition operations on sharded queues implements efficient bulk processing.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABIEJBA"></a>
<div id="ADQUE3652" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Sharded Queues and Native JMS Support</h3>
<p>JMS Sharded Queues have native support for:</p>
<ul>
<li>
<p>Non-Durable Subscribers</p>
</li>
<li>
<p>JMS payloads</p>
</li>
<li>
<p>Priorities</p>
</li>
</ul>
<p>JMS Sharded Queues support both persistent and nonpersistent messages. Nonpersistent messages are stored in memory inside the message cache and are not stored on disk. As a result, nonpersistent messages are lost upon instance crash or shutdown.</p>
<p>JMS Sharded Queues natively support two kinds of subscribers to meet the JMS requirements:</p>
<ul>
<li>
<p>Non-durable subscribers: These subscribers receive messages on their chosen topic, only if the messages are published while the subscriber is active. This subscription is not sharable among different sessions.</p>
</li>
<li>
<p>Durable subscribers: These subscribers receive all the messages published on a topic, including those that are published while the subscriber is inactive. Multiple database sessions can share the same subscription.</p>
</li>
</ul>
<p>JMS Sharded Queues do not use ADTs to store the JMS payload. The JMS message is stored in scalar columns of the database. JMS message types such as <code>TEXT</code>, <code>BYTES</code>, <code>MAP</code>, <code>STREAM</code> and <code>OBJECT</code> store the JMS payload in scalar <code>TEXT</code>/<code>RAW</code> or <code>CLOB/BLOB</code> columns in the queue table depending on payload size and type. The JMS message properties are stored in a <code>CLOB</code> (SecureFile) column in the queue table with attribute access functions defined for the user defined properties. The payload and user properties are pickled into <code>RAW</code>, <code>VARCHAR2</code> or Secure File columns instead of being stored as an ADT. JMS Header properties and JMS provider information are stored in their own scalar columns.</p>
<p>JMS Sharded Queues support integer priority values ranging between 0 (lowest priority) and 9 (highest priority), with the default being priority 4, as defined by the JMS standard.</p>
</div>
<!-- class="sect2" -->
<a id="BABGGIIC"></a>
<div id="ADQUE3653" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Sharded Queues and Partitioning</h3>
<p>JMS Sharded Queues automatically manage the underlying partitioned tables used for the queue table. Such partition management may occur in the foreground or the background. Each shard provides session-level ordering of enqueued messages. Each enqueuing session is assigned a shard. Each shard is composed of a series of subshards. Each subshard maps to a single partition. JMS messages are automatically assigned to a table partition upon enqueue.</p>
<p>New partitions are automatically created as needed, as when the queue table needs to grow when dequeuers do not keep up with enqueuers. Partitions are truncated and reused when all messages in the partition are dequeued and no longer needed. The message cache automatically loads messages from partitions into memory as required by dequeuers. Global indexes should not be created on the partitioned table underlying a JMS Sharded Queue. Local indexes are not typically recommended on the partitioned table either. If such indexes are desired and result in performance degradation, then non-sharded queues should be considered.</p>
</div>
<!-- class="sect2" -->
<a id="BABGJGCA"></a>
<div id="ADQUE3654" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Sharded Queues and Oracle Real Application Clusters (Oracle RAC)</h3>
<p>JMS Sharded Queues automatically provides enqueue session ordering while avoiding cross-instance communication when possible. Sometimes cross instance communication is required. For example, if a JMS Sharded Queue has a single enqueuing session on one Oracle RAC instance and a single dequeuing session on another instance, then JMS Sharded Queues will forward messages between the Oracle RAC instances. The forwarding of messages is non-atomic to the enqueuing transaction to improve performance. Dequeuers may get an ORA-25228 if they are connected to an instance that has no messages in its shards.</p>
<p>In most cases, consider having multiple dequeuers for each subscriber or single consumer queue on each Oracle RAC instance to improve throughput and reduce cross-instance overhead. An exception to this guideline is when you are using dequeue selectors that specify a single message. If you want to dequeue a message from a sharded queue by its message identifier in an Oracle RAC database, then you have to connect to the instance that is assigned dequeue ownership for the shard containing the message. Otherwise, the message will not be available for dequeue to the dequeue session. If all dequeues are performed at a single instance, then messages will be automatically forwarded to this instance. Hence, for a sharded single-consumer queue that extensively dequeues by message ID, consider having all dequeue sessions for the sharded queue connect to a single instance. Similarly, for a sharded multiconsumer queue that extensively dequeues by message ID, consider having all dequeue sessions for each subscriber connect to a single instance. Services can be used to simplify connecting dequeue sessions to a particular instance.</p>
</div>
<!-- class="sect2" -->
<a id="BABBBHJI"></a>
<div id="ADQUE3655" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Sharded Queue Restrictions</h3>
<p>The following Oracle Database features are not currently supported for JMS Sharded Queues:</p>
<ul>
<li>
<p>Message retention</p>
</li>
<li>
<p>Message delay</p>
</li>
<li>
<p>Transaction grouping</p>
</li>
<li>
<p>Array enqueue</p>
</li>
<li>
<p>Array dequeue</p>
</li>
<li>
<p>Message export and import</p>
</li>
<li>
<p>Posting for subscriber notification</p>
</li>
<li>
<p>Messaging Gateway</p>
</li>
<li>
<p>Exception queues</p>
</li>
<li>
<p>Non-JMS enqueues or dequeues. For example, PL/SQL and OCI enqueue and dequeue are not supported for JMS Sharded Queues</p>
</li>
<li>
<p>Oracle extensions for JMS such as JMS propagation and remote subscribers</p>
</li>
<li>
<p>Multiple queues per queue table. Sharded queues are created via the <code>CREATE_SHARDED_QUEUE</code> interface.</p>
</li>
<li>
<p>Ordering other than message priority followed by enqueue time as specified in the JMS standard</p>
</li>
<li>
<p>The JDBC thick (OCI) driver.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFFFEA"></a>
<div id="ADQUE3656" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JMS Sharded Queues Tuning</h3>
<p>JMS Sharded Queues perform best when:</p>
<ul>
<li>
<p>dequeuers for each subscriber are located on each instance</p>
</li>
<li>
<p>subscribers keep up with the enqueuers. Consider having multiple dequeuers for each subscriber on each Oracle RAC instance</p>
</li>
</ul>
<p>The message cache is most effective when dequeuers keep up with enqueuers and where the cache is big enough to store messages (including payloads) for each JMS Sharded Queue&#39;s enqueuers and dequeuers. When using JMS Sharded Queues, Oracle requires that you do one of the following:</p>
<ul>
<li>
<p>set parameter <code>STREAMS_POOL_SIZE</code></p>
<p>This parameter controls the size of shared memory available to the Oracle Database for the JMS Sharded Queue message cache. If unspecified, up to 10% of the shared pool size may be allocated for the Streams pool.</p>
<p>Oracle&#39;s Automatic Shared Memory Management feature manages the size of the Streams pool when the <code>SGA_TARGET</code> initialization parameter is set to a nonzero value. If the <code>STREAMS_POOL_SIZE</code> initialization parameter also is set to a nonzero value, then Automatic Shared Memory Management uses this value as a minimum for the Streams pool.</p>
<p>If the <code>STREAMS_POOL_SIZE</code> initialization parameter is set to a nonzero value, and the <code>SGA_TARGET</code> parameter is set to <code>0</code> (zero), then the Streams pool size is the value specified by the <code>STREAMS_POOL_SIZE</code> parameter, in bytes.</p>
<p>If both the <code>STREAMS_POOL_SIZE</code> and the <code>SGA_TARGET</code> initialization parameters are set to <code>0</code> (zero), then, by default, the first use of the Streams pool in a database transfers an amount of memory equal to 10% of the shared pool from the buffer cache to the Streams pool.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><code>DBMS_AQADM.set_min_streams_pool()</code> and <code>DBMS_AQADM.set_max_streams_pool( )</code> in <a class="olink ARPLS005" href="../ARPLS/d_aqadm.htm#ARPLS005"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a finer grained control over <code>STREAMS_POOL</code> sharing with Streams processing.</p>
</li>
</ul>
</div>
</li>
<li>
<p>turn on SGA autotuning</p>
<p>Oracle will automatically allocate the appropriate amount of memory from the SGA for the Streams pool, based on Streams pool usage as well as usage of other components that use the SGA. Examples of such other components are buffer cache and library cache. If <code>STREAMS_POOL_SIZE</code> is specified, it is used as the lower bound.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACJGGFC"></a>
<div id="ADQUE3688" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">JMS Streaming</h2>
<p>AQ JMS now supports streaming with enqueue and dequeue for sharded queues through <code>AQjmsBytesMessage</code> and <code>AQjmsStreamMessage</code> for applications to send and receive large message data or payload.</p>
<p>JMS streaming reduces the memory requirement when dealing with large messages, by dividing the message payload into small chunks rather than sending or receiving a large contiguous array of bytes. As JMS standard does not have any streaming mechanism, AQ JMS will provide proprietary interfaces to expose AQ streaming enqueue and dequeue features. This allows users to easily use an existing java input output stream to send and receive message data or payload.</p>
<p>In order to allow the existing applications to work without any changes on upgrading database to RDBMS 12.1.0.2, the streaming APIs will be disabled by default.</p>
<p>The client application can enable JMS Streaming by using the system property <code>oracle.jms.useJmsStreaming</code> set to <code>true</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
JMS Streaming is supported only for thin drivers.</div>
<div id="ADQUE3689" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1199"></a>
<h3 class="sect2">JMS Streaming with Enqueue</h3>
<p>AQ JMS provides the new API <code>setInputStream(java.io.InputStream)</code> in <code>AQjmsBytesMessage</code> and <code>AQjmsStreamMessage</code>, to set an input stream for message data.</p>
<pre>    /**
     * @param inputStream - InputStream to read the message payload
     * @throws JMSException - if the JMS provided fails to read the payload due to
     *                        some internal error
     */
    public void setInputStream(InputStream inputStream) throws JMSException
</pre>
<p>The following code snippet creates a message of type <code>AQjmsBytesMessage</code> and sets a <code>FileInputStream</code> for the message data.</p>
<pre>    Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
    Destination destination = session.createQueue(&#34;queueName&#34;);
    MessageProducer producer = session.createProducer(destination);
 
     AQjmsBytesMessage bytesMessage = (AQjmsBytesMessage)session.createBytesMessage();
     InputStream input = new FileInputStream(&#34;somefile.data&#34;);
     bytesMessage.setInputStream(input);
     producer.send(bytesMessage);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The methods in <code>BytesMessage</code> and <code>StreamMessage</code> are based on the methods found in <code>java.io.DataInputStream</code> and <code>java.io.DataOutputStream</code>, and hence, meaningful conversion of various <code>read*()</code> and <code>write*()</code> methods is not possible with streaming. The following scenarios will result in an exception:</p>
<ul>
<li>
<p><code>bytesMessage.setInputStream(input);</code></p>
<p><code>bytesMessage.writeInt(99);</code></p>
</li>
<li>
<p><code>bytesMessage.writeInt(99);</code></p>
<p><code>bytesMessage.setInputStream(input);</code></p>
</li>
</ul>
</li>
<li>
<p>As with normal enqueue operation, the enqueue with streaming is going to be a synchronous one and we will return the control to the client only after the enqueue is complete.</p>
</li>
<li>
<p>Streaming will be used with enqueue only when these APIs are explicitly used by the client. AQ JMS will not use streaming with enqueue with the normal enqueue, irrespective of the size of the message data.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="ADQUE3690" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1200"></a>
<h3 class="sect2">JMS Streaming with Dequeue</h3>
<p>The dequeue operation with streaming is achieved in two steps. The server decides whether to stream the message body or not based on the size of the message body. The default threshold limit is 10 MB. So when the message body is greater than 10MB and streaming is enabled by the client using the system property oracle.jms.useJmsStreaming, server will use streaming with dequeue.</p>
<ol>
<li>
<p>This is the normal dequeue process where a client calls the <code>receive()</code> method.</p>
<pre>Destination destination = session.createQueue (&#34;queueName&#34;);             
AQjmsConsumer consumer = (AQjmsConsumer) session.createConsumer(destination);             
Message message = consumer.receive(10000);
</pre></li>
<li>
<p>When the client receives the message without the payload, client can figure out whether the streaming is used for dequeue by calling <code>isLargeBody()</code> on the received message.</p>
<pre>  /**
   * This method can be used by the client applications to check whether the message
   * contains large messaege body and hence requires streaming with dequeue.
   * 
   * @return true when the message body is large and server decides to stream
   *         the payload with dequeue
   */
  public boolean isLargeBody() 
</pre>
<p>A value of true returned by <code>isLargeBody()</code> indicates streaming with dequeue. When the dequeue uses streaming, AQ JMS will populate the length of the message body properly for <code>AQjmsStreamMessage</code> along with <code>AQjmsBytesMessage</code>. So the client application can call the <code>getBodyLength()</code> on the message to determine the size of the payload.</p>
<pre> public long getBodyLength()
</pre></li>
</ol>
<p>Once client has the understanding about the streaming with dequeue, the message data can be fetched by using one of the following APIs on the received message.</p>
<p>The client application can use on the following APIs available in <code>AQjmsBytesMessage</code> and <code>AQjmsStreamMessage</code> to receive the message data.</p>
<pre> /**
     * Writes the message body to the OutputStream specified.
     * 
     * @param outputStream - the OutputStream to which message body can be written
     * @return the OutputStream containing the message body.
     * @throws JMSException - if the JMS provided fails to receive the message body 
     *                        due to some internal error
     */
    public OutputStream getBody(OutputStream outputStream) throws JMSException
 
    /**
     * Writes the message body to the OutputStream specified, with chunkSize bytes 
     * written at a time.
     * 
     * @param outputStream - the OutputStream to which message body can be written
     * @param chunkSize - the number of bytes to be written at a time, default value 
     *                    8192 (ie. 8KB)
     * @return the OutputStream containing the message body.
     * @throws JMSException - if the JMS provided fails to receive the message body 
     *                        due to some internal error
     */
    public OutputStream getBody(OutputStream outputStream, int chunkSize)throws JMSException
    
 
    /**
     * Writes the message body to the OutputStream specified. This method waits until 
     * the message body is written completely to the OutputStream or the timeout expires.
     * 
     * A timeout of zero never expires, and a timeout of negative value is ignored.
     * 
     * @param outputStream - the OutputStream to which message body can be written
     * @param timeout - the timeout value (in milliseconds)
     * @return the OutputStream containing the message body.
     * @throws JMSException - if the JMS provided fails to receive the message body 
     *                        due to some internal error
     */   
    public OutputStream getBody(OutputStream outputStream, long timeout) throws JMSException 
 
 
    /**
     * Writes the message body to the OutputStream specified, chunkSize bytes at a time. 
     * This method waits until the message body is written completely to the OutputStream
     * or the timeout expires.
     * 
     * A timeout of zero never expires, and a timeout of negative value is ignored.
     * 
     * @param outputStream - the OutputStream to which message body can be written
     * @param chunkSize - the number of bytes to be written at a time, 
     *                    default value 8192 (ie. 8KB)
     * @param timeout - the timeout value (in milliseconds)
     * @return the OutputStream containing the message body.
     * @throws JMSException - if the JMS provided fails to receive the message body 
     *                        due to some internal error
     */   
    public OutputStream getBody(OutputStream outputStream, int chunkSize, long timeout) throws JMSException
</pre>
<p>The following code snippet checks whether streaming is used with dequeue and the payload received will be written to a <code>FileOutputStream</code>.</p>
<pre>     if (message instanceof BytesMessage &amp;&amp; (AQjmsBytesMessage)message.isLargeBody()){
         // optional : check the size of the payload and take appropriate action before 
         // receiving the payload.
          (AQjmsBytesMessage) message.getBody(new FileOutputStream(new File(&#34;&hellip;&#34;)));
     } else {
          // normal dequeue
     }
</pre>
<p>In general, when both the steps are complete, the message is considered as consumed completely. The AQ server keeps a lock on the message after Step 1 which will be released only after Step 2.</p>
<p>Considering the possible issues with partially consumed messages by the message consumers, we have restricted the Streaming APIs for the session with acknowledgement modes <code>CLIENT_ACKNOWLEDGE</code> and <code>SESSION_TRANSACTED</code>.</p>
<p>So all the messages including partially consumed messages are considered fully consumed when:</p>
<ul>
<li>
<p><code>message.acknowledge()</code> is called with <code>CLIENT_ACKNOWLEDGE</code> session.</p>
</li>
<li>
<p>Session&#39;s <code>commit()</code> is called in a transacted session.</p>
</li>
</ul>
<p>As in normal case, session <code>rollback()</code>, rolls back the messages received in that session.</p>
<p>The JMS Streaming is available with the following restrictions:</p>
<ul>
<li>
<p>Streaming is disabled by default, and can be enabled by the client application using the system property <code>oracle.jms.useJmsStreaming</code></p>
</li>
<li>
<p>Dequeue uses streaming when the size of the message data is more than the threshold value. The default threshold value is 10 MB.</p>
</li>
<li>
<p>Streaming support is available with <code>AQjmsBytesMessage</code> and <code>AQjmsStreamMessage</code></p>
</li>
<li>
<p>Streaming support is available only for sharded queues</p>
</li>
<li>
<p>Streaming support is available only with thin drivers</p>
</li>
<li>
<p>Streaming support is not available when the message producer uses the message delivery mode as <code>NON_PERSISTENT</code></p>
</li>
<li>
<p>Streaming is not supported with message listener. So when a MessageConsumer has a message listener set and if the message data crosses threshold limit, internally we will use the normal dequeue.</p>
</li>
<li>
<p>Streaming support is available with Sessions using acknowledgement modes <code>CLIENT_ACKNOWLEDGE</code> and <code>SESSION_TRANSACTED</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACCJDBI"></a>
<div id="ADQUE2934" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1201"></a><a id="sthref1202"></a>Java EE Compliance</h2>
<p>In Oracle Database 12<span class="italic">c</span> Release 1 (12.1), Oracle JMS conforms to the Oracle Sun Microsystems JMS 1.1 standard. You can define the Java EE compliance mode for an <a href="glossary.htm#CBAFCEFF"><span class="xrefglossterm">Oracle Java Message Service</span></a> (Oracle JMS) client at runtime. For compliance, set the Java property <code>oracle.jms.j2eeCompliant</code> to <code>TRUE</code> as a command line option. For noncompliance, do nothing. <code>FALSE</code> is the default value.</p>
<p>Features in Oracle Database Advanced Queuing that support Java EE compliance (and are also available in the noncompliant mode) include:</p>
<ul>
<li>
<p>Nontransactional sessions</p>
</li>
<li>
<p>Durable subscribers</p>
</li>
<li>
<p>Temporary queues and topics</p>
</li>
<li>
<p>Nonpersistent delivery mode</p>
</li>
<li>
<p>Multiple JMS messages types on a single JMS <a href="glossary.htm#CBAHIIAB"><span class="xrefglossterm">queue</span></a> or topic (using Oracle Database Advanced Queuing queues of the <code>AQ$_JMS_MESSAGE</code> type)</p>
</li>
<li>
<p>The <code>noLocal</code> option for durable subscribers</p>
</li>
<li>
<p>JMS Sharded Queues have native JMS support and conform to Java EE compliance</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><span class="italic">Java Message Service Specification</span>, version 1.1, March 18, 2002, Sun Microsystems, Inc.</p>
</li>
<li>
<p><a href="#i1006233">&#34;JMS Message Headers&#34;</a> for information on how the Java property <code>oracle.jms.j2eeCompliant</code> affects JMSPriority and JMSExpiration</p>
</li>
<li>
<p><a href="#CACBAECF">&#34;DurableSubscriber&#34;</a> for information on how the Java property <code>oracle.jms.j2eeCompliant</code> affects durable subscribers</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment993">
<tr>
<td class="cellalignment1002">
<table class="cellalignment998">
<tr>
<td class="cellalignment997"><a href="aq_opers.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment997"><a href="jm_opers.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1004">
<table class="cellalignment996">
<tr>
<td class="cellalignment997"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment997"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment997"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment997"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment997"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment997"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>