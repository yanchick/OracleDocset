<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-988"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Internet%20Access%20to%20Oracle%20Database%20Advanced%20Queuing"></a><title>Internet Access to Oracle Database Advanced Queuing</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T0:30:46Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Queuing User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17945-14"/>
<meta name="dcterms.isVersionOf" content="ADQUE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="perform.htm" title="Previous" type="text/html"/>
<link rel="Next" href="aq_trbl.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17945-14.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/34</span> <!-- End Header -->
<div id="ADQUE0600" class="chapter"><a id="g1035343"></a> <a id="i1008670"></a>
<h1 class="chapter"><span class="secnum">6</span> Internet Access to Oracle Database Advanced Queuing</h1>
<p>You can access Oracle Database Advanced Queuing (AQ) over the Internet by using <a href="glossary.htm#CBABEDEC"><span class="xrefglossterm">Simple Object Access Protocol</span></a> (SOAP). <a href="glossary.htm#CBADFCDG"><span class="xrefglossterm">Internet Data Access Presentation</span></a> (IDAP) is the SOAP specification for Oracle Database Advanced Queuing operations. IDAP defines XML<a id="sthref475"></a> <a href="glossary.htm#CBACDHGB"><span class="xrefglossterm">message</span></a> structure for the body of the SOAP request. An IDAP-structured message is transmitted over the Internet using HTTP.</p>
<p>Users can register for notifications using the IDAP interface.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1005587">Overview of Oracle Database Advanced Queuing Operations Over the Internet</a></p>
</li>
<li>
<p><a href="#i1007369">Deploying the Oracle Database Advanced Queuing XML Servlet</a></p>
</li>
<li>
<p><a href="#CIHFBDIB">Internet Data Access Presentation (IDAP)</a></p>
</li>
<li>
<p><a href="#i1005721">Request and Response IDAP Documents</a></p>
</li>
<li>
<p><a href="#CHDHHAJJ">Notification of Messages by E-Mail</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>Appendix&nbsp;B, &#34;SOAP and Oracle Database AQ XML Schemas&#34;, which appears only in the HTML version of this guide</p>
</li>
<li>
<p><a href="aq_intro.htm#CHDGGIJB">Table 1-3, &#34;Oracle Database Advanced Queuing XML Demonstrations&#34;</a> for the locations of AQ XML demonstrations</p>
</li>
</ul>
</div>
<a id="i1005587"></a>
<div id="ADQUE2606" class="sect1">
<h2 class="sect1">Overview of Oracle Database Advanced Queuing Operations Over the Internet</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CHDBIJCB">Oracle Database Advanced Queuing Internet Operations Architecture</a></p>
</li>
<li>
<p><a href="#CHDBEJDB">Internet Message Payloads</a></p>
</li>
<li>
<p><a href="#CHDCAJDB">Configuring the Web Server to Authenticate Users Sending POST Requests</a></p>
</li>
<li>
<p><a href="#CHDHEFHJ">Client Requests Using HTTP</a></p>
</li>
<li>
<p><a href="#CHDHIGEB">Oracle Database Advanced Queuing Servlet Responses Using HTTP</a></p>
</li>
<li>
<p><a href="#CHDFJCHD">Oracle Database Advanced Queuing Propagation Using HTTP and HTTPS</a></p>
</li>
</ul>
<a id="CHDBIJCB"></a>
<div id="ADQUE2607" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref476"></a><a id="sthref477"></a>Oracle Database Advanced Queuing Internet Operations Architecture</h3>
<p><a href="#i1005601">Figure 6-1</a> shows the architecture for performing <a id="sthref478"></a>Oracle Database Advanced Queuing operations over HTTP. The major components are:</p>
<ul>
<li>
<p>Oracle Database Advanced Queuing client program</p>
</li>
<li>
<p>Web server/servlet runner hosting the Oracle Database Advanced Queuing <a href="glossary.htm#CBADJIFE"><span class="xrefglossterm">servlet</span></a></p>
</li>
<li>
<p>Oracle Database server</p>
</li>
</ul>
<p>A Web browser or any other HTTP client can serve as an Oracle Database Advanced Queuing client program, sending XML messages conforming to IDAP to the Oracle Database Advanced Queuing servlet, which interprets the incoming XML messages. The Oracle Database Advanced Queuing servlet connects to the Oracle Database server and performs operations on user queues.</p>
<div id="ADQUE2608" class="figure">
<p class="titleinfigure"><a id="i1005601"></a>Figure 6-1 Architecture for Performing Oracle Database Advanced Queuing Operations Using HTTP</p>
<img width="509" height="156" src="img/adque430.gif" alt="Description of Figure 6-1 follows"/><br/>
<a id="sthref479" href="img_text/adque430.htm">Description of &#34;Figure 6-1 Architecture for Performing Oracle Database Advanced Queuing Operations Using HTTP&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CHDBEJDB"></a>
<div id="ADQUE2609" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref480"></a><a id="sthref481"></a>Internet Message Payloads</h3>
<p>Oracle Database Advanced Queuing supports messages of three types: RAW, Oracle object, and <a href="glossary.htm#i432286"><span class="xrefglossterm">Java Message Service</span></a> (JMS). All these message types can be accessed using SOAP and Web services. If the queue holds messages in RAW, Oracle object, or JMS format, then XML payloads are transformed to the appropriate internal format during enqueue and stored in the queue. During dequeue, when messages are obtained from queues containing messages in any of the preceding formats, they are converted to XML before being sent to the client.</p>
<p>The message payload type depends on the queue type on which the operation is being performed:</p>
<p class="subhead1"><a id="ADQUE2610"></a><a id="sthref482"></a><a id="sthref483"></a>RAW Queues</p>
<p>The contents of RAW queues are raw bytes. You must supply the hex representation of the message payload in the XML message. For example, <code>&lt;raw&gt;023f4523&lt;/raw&gt;</code>.</p>
<p class="subhead1"><a id="ADQUE2611"></a><a id="sthref484"></a><a id="sthref485"></a>Oracle Object Type Queues</p>
<p>For Oracle <a href="glossary.htm#CBAGCEHG"><span class="xrefglossterm">object type</span></a> queues that are not JMS queues (that is, they are not type <code>AQ$_JMS_*</code>), the type of the payload depends on the type specified while creating the queue table that holds the queue. The content of the XML elements must map to the attributes of the object type of the queue table.</p>
<p class="subhead1"><a id="ADQUE2612"></a><a id="sthref486"></a><a id="sthref487"></a><a id="sthref488"></a>JMS Type Queues/Topics</p>
<p>For queues with JMS types (that is, those with payloads of type <code>AQ$_JMS_*</code>), there are four XML elements, depending on the JMS type. IDAP supports queues or topics with the following JMS types:</p>
<ul>
<li>
<p><code>TextMessage</code></p>
</li>
<li>
<p><code>MapMessage</code></p>
</li>
<li>
<p><code>BytesMessage</code></p>
</li>
<li>
<p><code>ObjectMessage</code></p>
</li>
</ul>
<p>JMS queues with payload type <code>StreamMessage</code> are not supported through IDAP.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCAJDB"></a>
<div id="ADQUE2613" class="sect2">
<h3 class="sect2"><a id="sthref489"></a><a id="sthref490"></a>Configuring the Web Server to Authenticate Users Sending POST Requests</h3>
<p>After the servlet is installed, the Web server must be configured to authenticate all users that send <code>POST</code> requests to the Oracle Database Advanced Queuing servlet. The Oracle Database Advanced Queuing servlet allows only authenticated users to access the servlet. If the user is not authenticated, then an error is returned by the servlet.</p>
<p>The Web server can be configured in multiple ways to restrict access. Some of the common techniques are basic authentication (user name/password) over SSL and client certificates. Consult your Web server documentation to see how you can restrict access to servlets.</p>
<p>In the context of the Oracle Database Advanced Queuing servlet, the user name that is used to connect to the Web server is known as the Oracle Database Advanced Queuing HTTP agent or Oracle Database Advanced Queuing Internet user.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHEFHJ"></a>
<div id="ADQUE2614" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref491"></a><a id="sthref492"></a>Client Requests Using HTTP</h3>
<p>An Oracle Database Advanced Queuing client begins a request to the Oracle Database Advanced Queuing servlet using HTTP by opening a connection to the server. The client logs in to the server using HTTP basic authentication (with or without SSL) or SSL certificate-based client authentication. The client constructs an XML message representing the send, publish, receive or register request.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1005721">&#34;Request and Response IDAP Documents&#34;</a></div>
<p>The client sends an HTTP <code>POST</code> to the servlet at the remote server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_intro.htm#CHDGGIJB">Table 1-3, &#34;Oracle Database Advanced Queuing XML Demonstrations&#34;</a> for the locations of AQ XML demonstrations illustrating <code>POST</code> requests using HTTP</div>
<p class="subhead2"><a id="CHDJFGID"></a><a id="ADQUE3682"></a>User Sessions and Transactions</p>
<p>After a client is authenticated and connects to the Oracle Database Advanced Queuing servlet, an HTTP session is created on behalf of the user. The first request in the session also implicitly starts a new database transaction. This transaction remains open until it is explicitly committed or terminated. The responses from the servlet includes the session ID in the HTTP headers as cookies.</p>
<p>If the client wishes to continue work in the same transaction, then it must include this HTTP header containing the session ID cookie in subsequent requests. This is automatically accomplished by most Web browsers. However, if the client is using a Java or C client to post requests, then this must be accomplished programmatically.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aq_intro.htm#CHDGGIJB">Table 1-3, &#34;Oracle Database Advanced Queuing XML Demonstrations&#34;</a> for the locations of AQ XML demonstrations illustrating a Java program used to post requests as part of the same session</div>
<p>An explicit commit or rollback must be applied to end the transaction. The commit or rollback requests can also be included as part of other Oracle Database Advanced Queuing operations.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHIGEB"></a>
<div id="ADQUE2616" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref493"></a><a id="sthref494"></a><a id="sthref495"></a>Oracle Database Advanced Queuing Servlet Responses Using HTTP</h3>
<p>The server accepts the client HTTP(S) connection and authenticates the user (Oracle Database Advanced Queuing agent) specified by the client. The server receives the <code>POST</code> request and invokes the Oracle Database Advanced Queuing servlet.</p>
<p>If this is the first request from this client, then a new HTTP session is created. The XML message is parsed and its contents are validated. If a session ID is passed by the client in the HTTP headers, then this operation is performed in the context of that session.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDJFGID">&#34;User Sessions and Transactions&#34;</a></div>
<p>The servlet determines which object (queue/topic) the agent is trying to perform operations on. The servlet looks through the list of database users that map to this Oracle Database Advanced Queuing agent. If any one of these users has privileges to access the queue/topic specified in the request, then the Oracle Database Advanced Queuing servlet superuser creates a session on behalf of this user.</p>
<p>If no transaction is active in the HTTP session, then a new database transaction is started. Subsequent requests in the session are part of the same transaction until an explicit <code>COMMIT</code> or <code>ROLLBACK</code> request is made. The effects of the transaction are visible only after it is committed. If the transaction remains inactive for 120 seconds, then it is automatically terminated.</p>
<p>The requested operation is performed. The response is formatted as an XML message and sent back the client. The response also includes the session ID in the HTTP headers as a cookie.</p>
</div>
<!-- class="sect2" -->
<a id="CHDFJCHD"></a>
<div id="ADQUE2617" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref496"></a><a id="sthref497"></a><a id="sthref498"></a>Oracle Database Advanced Queuing Propagation<a id="sthref499"></a> Using <a id="sthref500"></a>HTTP and HTTPS</h3>
<p>You can propagate over HTTP and HTTPS (HTTP over SSL) instead of Oracle Net Services. HTTP, unlike Oracle Net Services, is easy to configure for firewalls. The background process doing propagation pushes messages to an Oracle Database Advanced Queuing servlet that enqueues them into the destination database, as shown in <a href="#CHDEGGDA">Figure 6-2</a>.</p>
<div id="ADQUE2618" class="figure">
<p class="titleinfigure"><a id="CHDEGGDA"></a>Figure 6-2 HTTP Oracle Database Advanced Queuing Propagation</p>
<img width="461" height="140" src="img/adque445.gif" alt="Description of Figure 6-2 follows"/><br/>
<a id="sthref501" href="img_text/adque445.htm">Description of &#34;Figure 6-2 HTTP Oracle Database Advanced Queuing Propagation&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>You can set up any application to use Oracle Database Advanced Queuing HTTP propagation without any change to the existing code. An application using Oracle Database Advanced Queuing HTTP propagation can easily switch back to Net Services propagation just by re-creating the database link with a Net Services connection string, without any other changes.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007369"></a>
<div id="ADQUE2619" class="sect1">
<h2 class="sect1"><a id="sthref502"></a><a id="sthref503"></a><a id="sthref504"></a>Deploying the Oracle Database Advanced Queuing XML Servlet</h2>
<p>Follow these steps to deploy the AQ XML servlet using OC4J:</p>
<ol>
<li>
<p>For JDK1.2.x or JDK1.3.x, include the following in your <code>CLASSPATH</code>:</p>
<pre><span class="italic">ORACLE_HOME</span>/jdbc/lib/classes12.zip 
<span class="italic">ORACLE_HOME</span>/jdbc/lib/nls_charset12.zip
<span class="italic">ORACLE_HOME</span>/jlib/javax-ssl-1_1.jar 
<span class="italic">ORACLE_HOME</span>/jlib/jndi.jar 
<span class="italic">ORACLE_HOME</span>/jlib/jssl-1_1.jar 
<span class="italic">ORACLE_HOME</span>/jlib/jta.jar 
<span class="italic">ORACLE_HOME</span>/jlib/orai18n.jar
<span class="italic">ORACLE_HOME</span>/jlib/orai18n-collation.jar
<span class="italic">ORACLE_HOME</span>/jlib/orai18n-mapping.jar
<span class="italic">ORACLE_HOME</span>/jlib/orai18n-utility.jar
<span class="italic">ORACLE_HOME</span>/lib/http_client.jar 
<span class="italic">ORACLE_HOME</span>/lib/lclasses12.zip
<span class="italic">ORACLE_HOME</span>/lib/servlet.jar 
<span class="italic">ORACLE_HOME</span>/lib/xmlparserv2.jar 
<span class="italic">ORACLE_HOME</span>/lib/xschema.jar 
<span class="italic">ORACLE_HOME</span>/lib/xsu12.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/aqapi.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/aqxml.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/jmscommon.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/xdb.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/xsu12.jar 
</pre></li>
<li>
<p>For JDK1.4.x, include the following in your <code>CLASSPATH</code>:</p>
<pre><span class="italic">ORACLE_HOME</span>/jdbc/lib/ojdbc14.jar 
<span class="italic">ORACLE_HOME</span>/jlib/javax-ssl-1_1.jar 
<span class="italic">ORACLE_HOME</span>/jlib/jndi.jar 
<span class="italic">ORACLE_HOME</span>/jlib/jssl-1_1.jar 
<span class="italic">ORACLE_HOME</span>/jlib/jta.jar 
<span class="italic">ORACLE_HOME</span>/jlib/orai18n.jar
<span class="italic">ORACLE_HOME</span>/jlib/orai18n-collation.jar
<span class="italic">ORACLE_HOME</span>/jlib/orai18n-mapping.jar
<span class="italic">ORACLE_HOME</span>/jlib/orai18n-utility.jar
<span class="italic">ORACLE_HOME</span>/lib/http_client.jar 
<span class="italic">ORACLE_HOME</span>/lib/lclasses12.zip
<span class="italic">ORACLE_HOME</span>/lib/servlet.jar 
<span class="italic">ORACLE_HOME</span>/lib/xmlparserv2.jar 
<span class="italic">ORACLE_HOME</span>/lib/xschema.jar 
<span class="italic">ORACLE_HOME</span>/lib/xsu12.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/aqapi.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/aqxml.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/jmscommon.jar 
<span class="italic">ORACLE_HOME</span>/rdbms/jlib/xdb.jar 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>http_client.jar</code>, <code>jssl-1_1.jar</code>, and <code>javax-ssl-1_1.jar</code> are required by <code>HTTPClient</code> used in <code>AQHttp.java</code> and <code>AQHttpRq.java</code>.</div>
</li>
<li>
<p>Compile <code>AQHttpRq.java</code>:</p>
<pre>cd <span class="italic">ORACLE_HOME</span>/rdbms/demo
javac AQHttpRq.java AQHttp.java
</pre></li>
<li>
<p>Set the following database initialization parameters to the indicated values:</p>
<pre>job_queue_processes=2
compatible=10.2.0
</pre></li>
<li>
<p>Restart the database and listener.</p>
</li>
<li>
<p>Set up queues and authenticate users for restricted access.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code>aqxmlREADME.txt</code> and <code>aqxmldmo.sql</code> in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/rdbms/demo</code> for additional information.</div>
</li>
<li>
<p>Deploy the servlet and start the OC4J instance:</p>
<pre>cd <span class="italic">ORACLE_HOME</span>/bin
sh aqxmlctl deploy
sh aqxmlctl start
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Use <code>sh aqxmlctl stop</code> to stop the OC4J instance. The deploy servlet and start OC4J instance steps might have been done during your Oracle Database installation. You can verify this in the following steps.</div>
</li>
<li>
<p>Check the status of the servlet and information on the protocol and port number used for deploying the servlet in the following files:</p>
<pre><span class="italic">ORACLE_HOME</span>/rdbms/demo/aqxml.ini
<span class="italic">ORACLE_HOME</span>/oc4j/j2ee/OC4J_AQ/config/rmi.xml
<span class="italic">ORACLE_HOME</span>/oc4j/j2ee/OC4J_AQ/config/http-web-site.xml
</pre></li>
<li>
<p>Point a web browser to the following URL:</p>
<pre>https://<span class="italic">hostname</span>:<span class="italic">portnumber</span>/aqserv/servlet/AQDemoServlet
</pre>
<p>where <code><span class="codeinlineitalic">hostname</span></code> is the server name, and <code><span class="codeinlineitalic">portnumber</span></code> is the value discovered in the previous step. After you respond to a user name and password prompt, the servlet displays:</p>
<pre>Sample AQ Servlet 
AQxmlServlet is working!
</pre></li>
<li>
<p>Create an SSL Certificate and generate a keystore. The following files provide examples:</p>
<pre><span class="italic">ORACLE_HOME</span>/rdbms/demo/aqxmloc4j.cert
<span class="italic">ORACLE_HOME</span>/rdbms/demo/keystore
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Keytool documentation at <code><a href="http://docs.oracle.com/javase/">http://docs.oracle.com/javase/</a></code></div>
<p>The following tags in <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/oc4j/j2ee/OC4J_AQ/config/http-web-site.xml</code> indicate that the Web site is secure and keystore is used for SSL authentication:</p>
<pre>&lt;web-site port=&#34;443&#34; secure=&#34;true&#34;&gt;
....
   &lt;ssl-config 
      keystore=&#34;<span class="italic">ORACLE_HOME</span>/oc4j/j2ee/home/keystore&#34; 
      keystore-password=&#34;welcome&#34; /&gt;
&lt;/web-site&gt;
</pre>
<p>To make the site access only HTTP requests, remove <code>secure=&#34;true&#34;</code> and <code>&lt;ssl-config&gt;</code> from <code>http-web-site.xml</code>.</p>
</li>
<li>
<p>Stop and restart the AQ XML servlet:</p>
<pre>sh aqxmlctl stop
sh aqxmlctl start
</pre></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CIHFBDIB"></a>
<div id="ADQUE2620" class="sect1">
<h2 class="sect1"><a id="sthref505"></a><a id="sthref506"></a>Internet Data Access Presentation (IDAP)</h2>
<p>Internet Data Access Presentation (IDAP) uses the Content-Type of <code>text/xml</code> to specify the body of the SOAP request. XML provides the presentation for IDAP request and response messages as follows:</p>
<ul>
<li>
<p>All request and response tags are scoped in the SOAP namespace.</p>
</li>
<li>
<p>Oracle Database Advanced Queuing operations are scoped in the IDAP namespace.</p>
</li>
<li>
<p>The sender includes namespaces in IDAP elements and attributes in the SOAP body.</p>
</li>
<li>
<p>The receiver processes SOAP messages that have correct namespaces and returns an invalid request error for requests with incorrect namespaces.</p>
</li>
<li>
<p>The SOAP namespace has the value <code>http://schemas.xmlsoap.org/soap/envelope/</code></p>
</li>
<li>
<p>The IDAP namespace has the value <code>http://ns.oracle.com/AQ/schemas/access</code></p>
</li>
</ul>
<div id="ADQUE2621" class="sect2"><a id="sthref507"></a>
<h3 class="sect2"><a id="sthref508"></a><a id="sthref509"></a>SOAP Message Structure</h3>
<p>SOAP structures a message request or response as follows:</p>
<ul>
<li>
<p><a href="#CHDEDAIF">SOAP Envelope</a></p>
</li>
<li>
<p><a href="#CHDDFJJE">SOAP Header</a></p>
</li>
<li>
<p><a href="#CHDHBDHG">SOAP Body</a></p>
</li>
</ul>
<a id="CHDEDAIF"></a>
<div id="ADQUE2622" class="sect3">
<h4 class="sect3"><a id="sthref510"></a><a id="sthref511"></a>SOAP Envelope</h4>
<p>This is the root or top element in an XML tree. Its tag is <code>SOAP:Envelope</code>. SOAP defines a global attribute <code>SOAP:encodingStyle</code> that indicates serialization rules used instead of those described by the SOAP specification. This attribute can appear on any element and is scoped to that element and all child elements not themselves containing such an attribute. Omitting this attribute means that type specification has been followed unless overridden by a parent element.</p>
<p>The SOAP envelope also contains namespace declarations and additional attributes, provided they are namespace-qualified. Additional namespace-qualified subelements can follow the body.</p>
</div>
<!-- class="sect3" -->
<a id="CHDDFJJE"></a>
<div id="ADQUE2623" class="sect3">
<h4 class="sect3"><a id="sthref512"></a>SOAP Header</h4>
<p>This is the first element under the root. Its tag is <code>SOAP:Header</code>. A SOAP header passes necessary information, such as the transaction identifier. The header is encoded as a child of the <code>SOAP:Envelope</code> XML element. Headers are identified by the name element and are namespace-qualified. A header entry is encoded as an embedded element.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHBDHG"></a>
<div id="ADQUE2624" class="sect3">
<h4 class="sect3"><a id="sthref513"></a><a id="sthref514"></a>SOAP Body</h4>
<p>This is the Oracle Database Advanced Queuing XML document. Its tag is <code>SOAP:Body</code>, and it contains a first subelement whose name is the method name. This method request element contains elements for each input and output parameter. The element names are the parameter names. The body also contains <code>SOAP:Fault</code>, indicating information about an error. The Oracle Database Advanced Queuing XML document has the namespace <code>http://ns.oracle.com/AQ/schemas/access</code></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADQUE2625" class="sect2"><a id="sthref515"></a>
<h3 class="sect2"><a id="sthref516"></a><a id="sthref517"></a>SOAP Method Invocation</h3>
<p>A method invocation is performed by creating the request header and body and processing the returned response header and body. The request and response headers can consist of standard transport protocol-specific and extended headers.</p>
<div id="ADQUE2626" class="sect3"><a id="sthref518"></a>
<h4 class="sect3"><a id="sthref519"></a>HTTP Headers</h4>
<p>The <code>POST</code> method within the HTTP request header performs the SOAP method invocation. The request should include the header <code>SOAPMethodName,</code> whose value indicates the method to be invoked on the target. The value is of the form <code><span class="codeinlineitalic">URI</span></code><code>#</code><code><span class="codeinlineitalic">method name</span></code>. For example:</p>
<pre>SOAPMethodName: http://ns.oracle.com/AQ/schemas/access#AQXmlSend
</pre>
<p>The URI used for the interface must match the implied or specified namespace qualification of the method name element in the <code>SOAP:Body</code> part of the payload. The method name must not include the &#34;#&#34; character.</p>
</div>
<!-- class="sect3" -->
<div id="ADQUE2627" class="sect3"><a id="sthref520"></a>
<h4 class="sect3">Method Invocation Body</h4>
<p>SOAP method invocation consists of a method request and optionally a method response. The SOAP method request and method response are an HTTP request and response, respectively, whose contents are XML documents consisting of the root and mandatory body elements. These XML documents are referred to as SOAP payloads in the rest of this chapter.</p>
<p>A SOAP payload is defined as follows:</p>
<ul>
<li>
<p>The SOAP root element is the top element in the XML tree.</p>
</li>
<li>
<p>The SOAP payload headers contain additional information that must travel with the request.</p>
</li>
<li>
<p>The method request is represented as an XML element with additional elements for parameters. It is the first child of the <code>SOAP:Body</code> element. This request can be one of the Oracle Database Advanced Queuing XML client requests described in the next section.</p>
</li>
<li>
<p>The response is the return value or an error or exception that is passed back to the client.</p>
</li>
</ul>
<p>At the receiving site, a request can have one of the following outcomes:</p>
<a id="i1005690"></a>
<ul>
<li>
<p>The HTTP infrastructure on the receiving site can receive and process the request. In this case, the HTTP infrastructure passes the headers and body to the SOAP infrastructure.</p>
</li>
<li>
<p>The HTTP infrastructure on the receiving site cannot receive and process the request. In this case, the result is an HTTP response containing an HTTP error in the status field and no XML body.</p>
</li>
<li id="i1005695">
<p>The SOAP infrastructure on the receiving site can decode the input parameters, dispatch to an appropriate server indicated by the server address, and invoke an application-level function corresponding semantically to the method indicated in the method request. In this case, the result of the method request consists of a response or error.</p>
</li>
<li id="i1005697">
<p>The SOAP infrastructure on the receiving site cannot decode the input parameters, dispatch to an appropriate server indicated by the server address, and invoke an application-level function corresponding semantically to the interface or method indicated in the method request. In this case, the result of the method is an error that prevented the dispatching infrastructure on the receiving side from successful completion.</p>
</li>
</ul>
<p>In the last two cases, additional message headers can be present in the results of the request for extensibility.</p>
</div>
<!-- class="sect3" -->
<div id="ADQUE2628" class="sect3"><a id="sthref521"></a>
<h4 class="sect3">Results from a Method Request</h4>
<p>The results of the request are to be provided in the form of a request response. The <a id="sthref522"></a>HTTP response must be of Content-Type <code>text/xml</code>. A SOAP result indicates success and an error indicates failure. The method response never contains both a result and an error.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005721"></a>
<div id="ADQUE2629" class="sect1">
<h2 class="sect1"><a id="sthref523"></a><a id="sthref524"></a>Request and Response IDAP Documents</h2>
<p>The body of a SOAP message is an <a id="sthref525"></a><a id="sthref526"></a>IDAP message. This XML document has the namespace <code>http://ns.oracle.com/AQ/schemas/access</code>. The body represents:</p>
<ul>
<li>
<p>Client requests for <a href="glossary.htm#CBAJCGCH"><span class="xrefglossterm">enqueue</span></a>, <a href="glossary.htm#CBAGEGIF"><span class="xrefglossterm">dequeue</span></a>, and registration</p>
</li>
<li>
<p>Server responses to client requests for enqueue, dequeue, and registration</p>
</li>
<li>
<p>Notifications from the server to the client</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database Advanced Queuing Internet access is supported only for 8.1or higher style queues.</div>
</li>
</ul>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CHDDAHGC">IDAP Client Requests for Enqueue</a></p>
</li>
<li>
<p><a href="#CHDDBHDB">IDAP Client Requests for Dequeue</a></p>
</li>
<li>
<p><a href="#CHDDJFBJ">IDAP Client Requests for Registration</a></p>
</li>
<li>
<p><a href="#CHDFFGDC">IDAP Client Requests to Commit a Transaction</a></p>
</li>
<li>
<p><a href="#CHDIIHBB">IDAP Client Requests to Roll Back a Transaction</a></p>
</li>
<li>
<p><a href="#CHDCEGBG">IDAP Server Response to an Enqueue Request</a></p>
</li>
<li>
<p><a href="#CHDFAHBG">IDAP Server Response to a Dequeue Request</a></p>
</li>
<li>
<p><a href="#CHDJHJEC">IDAP Server Response to a Register Request</a></p>
</li>
<li>
<p><a href="#CHDGBBDG">IDAP Commit Response</a></p>
</li>
<li>
<p><a href="#CHDCJJAD">IDAP Rollback Response</a></p>
</li>
<li>
<p><a href="#CHDJHJFB">IDAP Notification</a></p>
</li>
<li>
<p><a href="#CHDCFICA">IDAP Response in Case of Error</a></p>
</li>
</ul>
<a id="CHDDAHGC"></a>
<div id="ADQUE2630" class="sect2">
<h3 class="sect2"><a id="sthref527"></a><a id="sthref528"></a><a id="sthref529"></a>IDAP Client Requests for Enqueue<a id="sthref530"></a><a id="sthref531"></a></h3>
<p>Client <a href="glossary.htm#CBAFGDEC"><span class="xrefglossterm">send</span></a> and publish requests use <code>AQXmlSend</code> to enqueue to a single-consumer <a href="glossary.htm#CBAHIIAB"><span class="xrefglossterm">queue</span></a> and <code>AQXmlPublish</code> to enqueue to multiconsumer queues/topics</p>
<p><code><a id="sthref532"></a><a id="sthref533"></a>AQXmlSend</code> and <code>AQXmlPublish</code> contain the following elements:</p>
<ul>
<li>
<p><a href="#CHDJEFCI">producer_options</a></p>
</li>
<li>
<p><a href="#CHDEGGDC">message_set</a></p>
</li>
<li>
<p><a href="#CHDFEAEJ">message_header</a></p>
</li>
<li>
<p><a href="#CHDEHDEB">message_payload</a></p>
</li>
<li>
<p><a href="#CHDEEDBE">AQXmlCommit</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDJEFCI"></a><a id="ADQUE2631"></a>producer_options</p>
<p>This is a required element. It contains the following child elements:</p>
<ul>
<li>
<p><code>destination</code></p>
<p>This element is required. It specifies the queue/topic to which messages are to be sent. It has an optional <code>lookup_type</code> attribute, which determines how the destination value is interpreted. If lookup_type is <code>DATABASE</code>, which is the default, then the destination is interpreted as <code>schema.queue_name</code>. If <code>lookup_type</code> is <code>LDAP</code>, then the LDAP server is used to resolve the destination.</p>
</li>
<li>
<p><a id="sthref534"></a><code>visibility</code></p>
<p>This element is optional. It determines when an enqueue becomes visible. The default is <code>ON_COMMIT</code>, which makes the enqueue visible when the current transaction commits. If <code>IMMEDIATE</code> is specified, then the effects of the enqueue are visible immediately after the request is completed. The enqueue is not part of the current transaction. The operation constitutes a transaction on its own.</p>
</li>
<li>
<p><code>transformation</code></p>
<p>This element is optional. It specifies the PL/SQL <a href="glossary.htm#CBACGHDB"><span class="xrefglossterm">transformation</span></a> to be invoked before the message is enqueued.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDEGGDC"></a><a id="ADQUE2632"></a>message_set</p>
<p>This is a required element and contains one or more messages. Each message consists of a <a href="#CHDFEAEJ">message_header</a> and a <a href="#CHDEHDEB">message_payload</a>.</p>
<p class="subhead2"><a id="CHDFEAEJ"></a><a id="ADQUE2633"></a>message_header</p>
<p>This element is optional. It contains the following child elements:</p>
<ul>
<li>
<p><code>sender_id</code></p>
<p>If a <code>message_header</code> element is included, then it must contain a <code>sender_id</code> element, which specifies an application-specific identifier. The <code>sender_id</code> element can contain <code>agent_name</code>, <code>address</code>, <code>protocol</code>, and <code>agent_alias</code> elements. The <code>agent_alias</code> element resolves to a name, address, and protocol using LDAP.</p>
</li>
<li>
<p><code>message_id</code></p>
<p>This element is optional. It is a unique identifier of the message, supplied during dequeue.</p>
</li>
<li>
<p><code>correlation</code></p>
<p>This element is optional. It is the correlation identifier of the message.</p>
</li>
<li>
<p><code>delay</code></p>
<p>This element is optional. It specifies the duration in seconds after which a message is available for processing.</p>
</li>
<li>
<p><code>expiration</code></p>
<p>This element is optional. It specifies the duration in seconds that a message is available for dequeuing. This parameter is an offset from the delay. By default messages never expire. If a message is not dequeued before it expires, then it is moved to an <a href="glossary.htm#CBAHHGJI"><span class="xrefglossterm">exception queue</span></a> in the <code>EXPIRED</code> state.</p>
</li>
<li>
<p><code>priority</code></p>
<p>This element is optional. It specifies the priority of the message. The priority can be any number, including negative numbers. A smaller number indicates higher priority.</p>
</li>
<li>
<p><code>recipient_list</code></p>
<p>This element is optional. It is a list of recipients which overrides the default subscriber list. Each recipient is represented in <code>recipient_list</code> by a <code>recipient</code> element, which can contain <code>agent_name</code>, <code>address</code>, <code>protocol</code>, and <code>agent_alias</code> elements. The <code>agent_alias</code> element resolves to a name, address, and protocol using LDAP.</p>
</li>
<li>
<p><code>message_state</code></p>
<p>This element is optional. It specifies the state of the message. It is filled in automatically during dequeue. If <code>message_state</code> is 0, then the message is ready to be processed. If it is 1, then the message delay has not yet been reached. If it is 2, then the message has been processed and is retained. If it is 3, then the message has been moved to an exception queue.</p>
</li>
<li>
<p><code>exception_queue</code></p>
<p>This element is optional. It specifies the name of the queue to which the message is moved if the number of unsuccessful dequeue attempts has exceeded <code>max_retries</code> or the message has expired. All messages in the exception queue are in the <code>EXPIRED</code> state.</p>
<p>If the exception queue specified does not exist at the time of the move, then the message is moved to the default exception queue associated with the queue table, and a warning is logged in the alert log. If the default exception queue is used, then the parameter returns a <code>NULL</code> value at dequeue time.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDEHDEB"></a><a id="ADQUE2634"></a>message_payload</p>
<p>This is a required element. It can contain different elements based on the payload type of the destination queue/topic. The different payload types are described in <a href="#CHDDBHDB">&#34;IDAP Client Requests for Dequeue&#34;</a>.</p>
<p class="subhead2"><a id="CHDEEDBE"></a><a id="ADQUE2635"></a>AQXmlCommit</p>
<p>This is an optional empty element. If it is included, then the transaction is committed at the end of the request.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDBEJDB">&#34;Internet Message Payloads&#34;</a> for an explanation of IDAP message payloads</div>
</div>
<!-- class="sect2" -->
<a id="CHDDBHDB"></a>
<div id="ADQUE2636" class="sect2">
<h3 class="sect2"><a id="sthref535"></a><a id="sthref536"></a><a id="sthref537"></a>IDAP Client Requests for Dequeue</h3>
<p>Client requests for dequeue use <code><a id="sthref538"></a>AQXmlReceive</code>, which contains the following elements:</p>
<ul>
<li>
<p><a href="#CHDHBBAE">consumer_options</a></p>
</li>
<li>
<p><a href="#CHDJICCE">AQXmlCommit</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDHBBAE"></a><a id="ADQUE2637"></a>consumer_options</p>
<p>This is a required element. It contains the following child elements:</p>
<ul>
<li>
<p><code>destination</code></p>
<p>This element is required. It specifies the queue/topic from which messages are to be received. The <code>destination</code> element has an optional <code>lookup_type</code> attribute, which determines how the destination value is interpreted. If lookup_type is <code>DATABASE</code>, which is the default, then the destination is interpreted as <code>schema.queue_name</code>. If <code>lookup_type</code> is <code>LDAP</code>, then the LDAP server is used to resolve the destination.</p>
</li>
<li>
<p><code>consumer_name</code></p>
<p>This element is optional. It specifies the name of the <a href="glossary.htm#CBAJDFJA"><span class="xrefglossterm">consumer</span></a>. Only those messages matching the consumer name are accessed. If a queue is not set up for multiple consumers, then this field should not be specified.</p>
</li>
<li>
<p><code>wait_time</code></p>
<p>This element is optional. It specifies the number of seconds to wait if there is no message currently available which matches the search criteria.</p>
</li>
<li>
<p><code>selector</code></p>
<p>This element is optional. It specifies criteria used to select the message. It can contain child elements <code>correlation</code>, <code>message_id</code>, or <code>condition</code>.</p>
<p>A dequeue <code>condition</code> element is a Boolean expression using syntax similar to the <code>WHERE</code> clause of a SQL query. This Boolean expression can include conditions on message properties, user object payload data properties, and PL/SQL or SQL functions. Message properties include <code>priority</code>, <code>corrid</code> and other columns in the queue table.</p>
<p>To specify dequeue conditions on a message payload, use attributes of the <a href="glossary.htm#CBAGCEHG"><span class="xrefglossterm">object type</span></a> in clauses. You must prefix each attribute with <code>tab</code>.<code>user_data</code> as a qualifier to indicate the specific column of the queue table that stores the payload.</p>
<p>A dequeue <code>condition</code> element cannot exceed 4000 characters.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When a dequeue condition or correlation identifier is used, the order of the messages dequeued is indeterminate, and the sort order of the queue is not honored.</div>
</li>
<li>
<p><a id="sthref539"></a><code>visibility</code></p>
<p>This element is optional. It determines when a dequeue becomes visible. The default is <code>ON_COMMIT</code>, which makes the dequeue visible when the current transaction commits. If <code>IMMEDIATE</code> is specified, then the effects of the dequeue are visible immediately after the request is completed. The dequeue is not part of the current transaction. The operation constitutes a transaction on its own.</p>
</li>
<li>
<p><code>dequeue_mode</code></p>
<p>This element is optional. It specifies the locking action associated with the dequeue. The possible values are <code>REMOVE</code>, <code>BROWSE</code>, and <code>LOCKED</code>.</p>
<p><code>REMOVE</code> is the default and causes the message to be read and deleted. The message can be retained in the queue table based on the retention properties. <code>BROWSE</code> reads the message without acquiring any lock on it. This is equivalent to a select statement. <code>LOCKED</code> reads the message and obtains a write lock on it. The lock lasts for the duration of the transaction. This is equivalent to a select for update statement.</p>
</li>
<li>
<p><code>navigation_mode</code></p>
<p>This element is optional. It specifies the position of the message that is retrieved. First, the position is determined. Second, the search criterion is applied. Finally, the message is retrieved. Possible values are <code>FIRST_MESSAGE</code>, <code>NEXT_MESSAGE</code>, and <code>NEXT_TRANSACTION</code>.</p>
<p><code>FIRST_MESSAGE</code> retrieves the first message which is available and which matches the search criteria. This resets the position to the beginning of the queue. <code>NEXT_MESSAGE</code> is the default and retrieves the next message which is available and which matches the search criteria. If the previous message belongs to a message group, then Oracle Database Advanced Queuing retrieves the next available message which matches the search criteria and which belongs to the message group.<code>NEXT_TRANSACTION</code> skips the remainder of the current transaction group and retrieves the first message of the next transaction group. This option can only be used if message grouping is enabled for the current queue.</p>
</li>
<li>
<p><code>transformation</code></p>
<p>This element is optional. It specifies the PL/SQL <a href="glossary.htm#CBACGHDB"><span class="xrefglossterm">transformation</span></a> to be invoked after the message is dequeued.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDJICCE"></a><a id="ADQUE2638"></a>AQXmlCommit</p>
<p>This is an optional empty element. If it is included, then the transaction is committed at the end of the request.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDJFBJ"></a>
<div id="ADQUE2639" class="sect2">
<h3 class="sect2"><a id="sthref540"></a><a id="sthref541"></a><a id="sthref542"></a>IDAP Client Requests for Registration</h3>
<p>Client requests for registration use <code>AQXmlRegister</code>, which must contain a <code>register_options</code> element. The <code>register_options</code> element contains the following child elements:</p>
<ul>
<li>
<p><code>destination</code></p>
<p>This element is required. It specifies the queue/topic on which notifications are registered. The <code>destination</code> element has an optional <code>lookup_type</code> attribute, which determines how the destination value is interpreted. If lookup_type is <code>DATABASE</code>, which is the default, then the destination is interpreted as <code>schema.queue_name</code>. If <code>lookup_type</code> is <code>LDAP</code>, then the LDAP server is used to resolve the destination.</p>
</li>
<li>
<p><code>consumer_name</code></p>
<p>This element is optional. It specifies the consumer name for multiconsumer queues or topics. This parameter must not be specified for single-consumer queues.</p>
</li>
<li>
<p><code>notify_url</code></p>
<p>This element is required. It specifies where notification is sent when a message is enqueued. The form can be <code>http://</code><code><span class="codeinlineitalic">url</span></code>, <code>mailto://</code><code><span class="codeinlineitalic">email address</span></code> or <code>plsql://</code><code><span class="codeinlineitalic">pl/sql procedure</span></code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDFFGDC"></a>
<div id="ADQUE2640" class="sect2">
<h3 class="sect2"><a id="sthref543"></a><a id="sthref544"></a><a id="sthref545"></a>IDAP Client Requests to <a id="sthref546"></a>Commit a Transaction</h3>
<p>A request to commit all actions performed by the user in a session uses <code>AQXmlCommit</code>. A commit request has the following format:</p>
<pre>&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;Envelope xmlns=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;&gt;
   &lt;Body&gt;
      &lt;AQXmlCommit xmlns=&#34;http://ns.oracle.com/AQ/schemas/access&#34;/&gt;
   &lt;/Body&gt;
&lt;/Envelope&gt;
</pre></div>
<!-- class="sect2" -->
<a id="CHDIIHBB"></a>
<div id="ADQUE2641" class="sect2">
<h3 class="sect2"><a id="sthref547"></a><a id="sthref548"></a><a id="sthref549"></a>IDAP Client Requests to Roll Back a Transaction</h3>
<p><a id="sthref550"></a>A request to roll back all actions performed by the user in a session uses <code>AQXmlRollback</code>. Actions performed with <code>IMMEDIATE</code> visibility are not rolled back. An IDAP client rollback request has the following format:</p>
<pre>&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;Envelope xmlns=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;&gt;
   &lt;Body&gt;
      &lt;AQXmlRollback xmlns=&#34;http://ns.oracle.com/AQ/schemas/access&#34;/&gt;
   &lt;/Body&gt;
&lt;/Envelope&gt;
</pre></div>
<!-- class="sect2" -->
<a id="CHDCEGBG"></a>
<div id="ADQUE2642" class="sect2">
<h3 class="sect2"><a id="sthref551"></a><a id="sthref552"></a><a id="sthref553"></a>IDAP Server Response to an Enqueue Request</h3>
<p>The response to an enqueue request to a single-consumer queue uses <code>AQXmlSendResponse</code>. It contains the following elements:</p>
<ul>
<li>
<p><code>status_response</code></p>
<p>This element contains child elements <code>status_code</code>, <code>error_code</code>, and <code>error_message</code>. The <code>status_code</code> element takes value <code>0</code> for success or <code>-1</code> for failure. The <code>error_code</code> element contains an Oracle error code. The <code>error_message</code> element contains a description of the error.</p>
</li>
<li>
<p><code>send_result</code></p>
<p>This element contains child elements <code>destination</code> and <code>message_id</code>. The <code>destination</code> element specifies where the message was sent. The <code>message_id</code> element uniquely identifies every message sent.</p>
</li>
</ul>
<p>The response to an enqueue request to a multiconsumer queue or topic uses <code>AQXmlPublishResponse</code>. It contains the following elements:</p>
<ul>
<li>
<p><code>status_response</code></p>
<p>This element contains child elements <code>status_code</code>, <code>error_code</code>, and <code>error_message</code>. The <code>status_code</code> element takes value <code>0</code> for success or <code>-1</code> for failure. The <code>error_code</code> element contains an Oracle error code. The <code>error_message</code> element contains a description of the error.</p>
</li>
<li>
<p><code>publish_result</code></p>
<p>This element contains child elements <code>destination</code> and <code>message_id</code>. The <code>destination</code> element specifies where the message was sent. The <code>message_id</code> element uniquely identifies every message sent.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDFAHBG"></a>
<div id="ADQUE2643" class="sect2">
<h3 class="sect2"><a id="sthref554"></a><a id="sthref555"></a><a id="sthref556"></a>IDAP Server Response to a Dequeue Request</h3>
<p>The response to a dequeue request uses <code>AQXmlReceiveResponse</code>. It contains the following elements:</p>
<ul>
<li>
<p><code>status_response</code></p>
<p>This element contains child elements <code>status_code</code>, <code>error_code</code>, and <code>error_message</code>. The <code>status_code</code> element takes value <code>0</code> for success or <code>-1</code> for failure. The <code>error_code</code> element contains an Oracle error code. The <code>error_message</code> element contains a description of the error.</p>
</li>
<li>
<p><code>receive_result</code></p>
<p>This element contains child elements <code>destination</code> and <code>message_set</code>. The <code>destination</code> element specifies where the message was sent. The <code>message_set</code> element specifies the set of messages dequeued.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDJHJEC"></a>
<div id="ADQUE2644" class="sect2">
<h3 class="sect2"><a id="sthref557"></a><a id="sthref558"></a><a id="sthref559"></a>IDAP Server Response to a Register Request</h3>
<p>The response to a register request uses <code>AQXmlRegisterResponse</code>. It contains the <code>status_response</code> element described in <a href="#CHDFAHBG">&#34;IDAP Server Response to a Dequeue Request&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGBBDG"></a>
<div id="ADQUE2645" class="sect2">
<h3 class="sect2"><a id="sthref560"></a><a id="sthref561"></a>IDAP Commit Response</h3>
<p>The response to a commit request uses AQXmlCommitResponse. It contains the <code>status_response</code> element described in <a href="#CHDFAHBG">&#34;IDAP Server Response to a Dequeue Request&#34;</a>. The response to a commit request has the following format:</p>
<pre>&lt;?xml version = &#39;1.0&#39;?&gt;
&lt;Envelope xmlns=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;&gt;
   &lt;Body&gt;
      &lt;AQXmlCommitResponse xmlns=&#34;http://ns.oracle.com/AQ/schemas/access&#34;&gt;
         &lt;status_response&gt;
            &lt;status_code&gt;0&lt;/status_code&gt;
         &lt;/status_response&gt;
      &lt;/AQXmlCommitResponse&gt;
   &lt;/Body&gt;
&lt;/Envelope&gt;
</pre></div>
<!-- class="sect2" -->
<a id="CHDCJJAD"></a>
<div id="ADQUE2646" class="sect2">
<h3 class="sect2"><a id="sthref562"></a><a id="sthref563"></a>IDAP Rollback Response</h3>
<p>The response to a rollback request uses <code>AQXmlRollbackResponse</code>. It contains the <code>status_response</code> element described in <a href="#CHDFAHBG">&#34;IDAP Server Response to a Dequeue Request&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJHJFB"></a>
<div id="ADQUE2647" class="sect2">
<h3 class="sect2"><a id="sthref564"></a><a id="sthref565"></a><a id="sthref566"></a>IDAP Notification</h3>
<p>When an event for which a client has registered occurs, a notification is sent to the client at the URL specified in the <code>REGISTER</code> request using <code>AQXmlNotification</code>. It contains the following elements:</p>
<ul>
<li>
<p><code>notification_options</code></p>
<p>This element has child elements <code>destination</code> and <code>consumer_name</code>. The <code>destination</code> element specifies the destination queue/topic on which the event occurred. The consumer_name element specifies the consumer name for which the even occurred. It applies only to multiconsumer queues/topics.</p>
</li>
<li>
<p><code>message_set</code></p>
<p>This element specifies the set of message properties.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDCFICA"></a>
<div id="ADQUE2648" class="sect2">
<h3 class="sect2"><a id="sthref567"></a><a id="sthref568"></a><a id="sthref569"></a>IDAP Response in Case of Error</h3>
<p>In case of an error in any of the preceding requests, a <code>FAULT</code> is generated. The <code>FAULT</code> element contains the following elements:</p>
<ul>
<li>
<p><code>faultcode</code></p>
<p>This element specifies the error code for the fault.</p>
</li>
<li>
<p><code>faultstring</code></p>
<p>This element indicates a client error or a server error. A client error means that the request is not valid. A server error indicates that the Oracle Database Advanced Queuing servlet has not been set up correctly.</p>
</li>
<li>
<p><code>detail</code></p>
<p>This element contains the <code>status_response</code> element, which is described in <a href="#CHDFAHBG">&#34;IDAP Server Response to a Dequeue Request&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHHAJJ"></a>
<div id="ADQUE2649" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref570"></a><a id="sthref571"></a><a id="sthref572"></a>Notification of Messages by E-Mail</h2>
<p>Here are the steps for setting up your database for e-mail notifications:</p>
<ol>
<li>
<p>Set the SMTP mail host by invoking <code>DBMS_AQELM.SET_MAILHOST</code> as an Oracle Database Advanced Queuing administrator.</p>
</li>
<li>
<p>Set the SMTP mail port by invoking <code>DBMS_AQELM.SET_MAILPORT</code> as an Oracle Database Advanced Queuing administrator. If not explicit, set defaults to 25.</p>
</li>
<li>
<p>Set the SendFrom address by invoking <code>DBMS_AQELM.SET_SENDFROM</code>.</p>
</li>
<li>
<p>After setup, you can register for e-mail notifications using the Oracle Call Interface (OCI) or PL/SQL API.</p>
</li>
</ol>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment993">
<tr>
<td class="cellalignment1002">
<table class="cellalignment998">
<tr>
<td class="cellalignment997"><a href="perform.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment997"><a href="aq_trbl.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1004">
<table class="cellalignment996">
<tr>
<td class="cellalignment997"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment997"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment997"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment997"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment997"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment997"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>