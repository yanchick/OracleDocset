<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-106353"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Building%20a%20Database%20Access%20Class"></a><title>Building a Database Access Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743"/>
<meta name="dcterms.created" content="2014-02-04T21:52:14Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database 2 Day + PHP Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E18554-05"/>
<meta name="dcterms.isVersionOf" content="TDPPH"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2010, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_two.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_four_anyco_app.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E18554-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/18</span> <!-- End Header -->
<div id="TDPPH147" class="chapter"><a id="sthref94"></a>
<h1 class="chapter"><span class="secnum">3</span> Building a Database Access Class</h1>
<p>The Oracle database functionality for the AnyCo application will be abstracted into a class that handles all PHP OCI8 access.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHBACHJ">Connection Constants</a></p>
</li>
<li>
<p><a href="#CIHGDGGE">Creating the Db class</a></p>
</li>
<li>
<p><a href="#CIHEFHFI">General Example of Running SQL in PHP OCI8</a></p>
</li>
<li>
<p><a href="#CIHHDJHB">Running SQL with the Db Class</a></p>
</li>
<li>
<p><a href="#CIHIAGFF">Testing the Db Class</a></p>
</li>
</ul>
<a id="CIHBACHJ"></a>
<div id="TDPPH148" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Connection Constants</h2>
<p>Create a PHP file <code><a id="sthref95"></a><a id="sthref96"></a>ac_cred.inc.php</code>. The &#39;.inc&#39; component of the name is a common convention indicating that the file only contains definitions such as functions or classes. Giving it a final <code>.php</code> extension means that if a user somehow makes a HTTP request for that file, the web server will not send its text to the user (a security risk) but will run it as a PHP script. Because the file only contains definitions there will be no output sent to the user. This will prevent undesirable results or code exposure.</p>
<p>The <code>ac_cred.inc.php</code> file should initially look like:</p>
<pre>&lt;?php
 
/**
 * ac_cred.inc.php: Secret Connection Credentials for a database class
 * @package Oracle
 */
 
/**
 * DB user name
 */
define(&#39;SCHEMA&#39;, &#39;hr&#39;);
 
/**
 * DB Password.
 *
 * Note: In practice keep database credentials out of directories
 * accessible to the web server.
 */
define(&#39;PASSWORD&#39;, &#39;welcome&#39;);
 
/**
 * DB connection identifier
 */
define(&#39;DATABASE&#39;, &#39;localhost:pooled&#39;);
 
/**
 * DB character set for returned data
 */
define(&#39;CHARSET&#39;, &#39;UTF8&#39;);
 
/**
 * Client Information text for DB tracing
 */
define(&#39;CLIENT_INFO&#39;, &#39;AnyCo Corp.&#39;);
 
?&gt;
</pre>
<p>To connect to an Oracle DB requires a user name, password, and a string identifying which DB to connect to. These are set as the constants <code>SCHEMA</code>, <code>PASSWORD</code>, and <code>DATABASE</code> using PHP&#39;<a id="sthref97"></a>s <code>define()</code> command. A character set is an optional but recommended connection parameter. Here UTF8 is chosen in the <code>CHARSET</code> constant.</p>
<p>Most PHP applications connect to the DB using one constant database account. In this example the database user is HR. This has some security implications that should not be discounted. Even though the file has the .<code>php</code> extension, in practice it is recommended to keep any files containing credentials or other sensitive information out of directories that Apache can access, and use PHP&#39;s <a id="sthref98"></a><code>require()</code> command to load them. To avoid hard coding credentials in a file, some sites require applications read the values from environment variables set before starting Apache.</p>
<p>The database connection syntax used in DATABASE is Oracle&#39;s &#34;Easy Connect&#34; syntax. This specifies the host name where the database is running and identifies the service name of the database. Here the computer is given as <code>localhost</code>, meaning that PHP and the database need to be on the same computer. The <code>:pooled</code> suffix says that the connection should use the DRCP pool. If you did not start the DRCP pool in the section <a href="ch_two.htm#BABJJBDB">&#34;Post PHP Installation Tasks on Windows and Linux&#34;</a>, then omit this suffix and change <code>DATABASE</code> to <code>localhost</code>. This is the only application change that is necessary to determine whether to use DRCP.</p>
<p>A connection identifier could also be an Oracle Net <code>tnsnames.ora</code> alias, depending on your site standards.</p>
<p>The <code>CLIENT_INFO</code> constant will be used for end-to-end application tracing in the database. This is discussed in <a href="ch_thirteen_monitor.htm#CHDFGBGC">Chapter 13, &#34;Monitoring Database Usage of the Application.&#34;</a></p>
</div>
<!-- class="sect1" -->
<a id="CIHGDGGE"></a>
<div id="TDPPH149" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating the Db class</h2>
<p>Create a new PHP file <code><a id="sthref99"></a><a id="sthref100"></a>ac_db.inc.php</code> to hold a <a id="sthref101"></a><a id="sthref102"></a>database access class. Initially the file contains:</p>
<pre>&lt;?php
 
/**
 * ac_db.inc.php: Database class using the PHP OCI8 extension
 * @package Oracle
 */
 
namespace Oracle;
 
require(&#39;ac_cred.inc.php&#39;);
 
/**
 * Oracle Database access methods
 * @package Oracle
 * @subpackage Db
 */
class Db {
 
    /**
     * @var resource The connection resource
     * @access protected
     */
    protected $conn = null;
    /**
     * @var resource The statement resource identifier
     * @access protected
     */
    protected $stid = null;
    /**
     * @var integer The number of rows to prefetch with queries
     * @access protected
     */
    protected $prefetch = 100;
 
}
 
?&gt;
</pre>
<p>The <code>ac_db.inc.php</code> file sets the namespace to Oracle, defining the namespace of classes declared or used in the file. This avoids clashes if there are different implementations of classes in an application that happen to have the same name.</p>
<p>The database credentials are included with <code><a id="sthref103"></a>require()</code>. If a required file does not exist a compilation error will occur. PHP also has an <code><a id="sthref104"></a>include()</code> function that will not display an error for a missing file. You can use variants <code><a id="sthref105"></a>require_once()</code> and <code><a id="sthref106"></a>include_once()</code> to prevent a sub file from being included more than once.</p>
<p>The <code>Db</code> class attributes will be discussed soon.</p>
<p>The comments are in a format that the open source tool <a id="sthref107"></a>PHPDocumentor will parse, for example <code>@package</code> defines the overall package that this file belongs to. NetBeans 7.0 can use these tags to automatically generate application documentation.</p>
<p>Add the following two methods into the <code>Db</code> class, between the <code>$prefetch</code> attribute and the closing brace:</p>
<pre>   /**
     * Constructor opens a connection to the database
     * @param string $module Module text for End-to-End Application Tracing
     * @param string $cid Client Identifier for End-to-End Application Tracing
     */
    function __construct($module, $cid) {
        $this-&gt;conn = @oci_pconnect(SCHEMA, PASSWORD, DATABASE, CHARSET);
        if (!$this-&gt;conn) {
            $m = oci_error();
            throw new \Exception(&#39;Cannot connect to database: &#39; . $m[&#39;message&#39;]);
        }
        // Record the &#34;name&#34; of the web user, the client info and the module.
        // These are used for end-to-end tracing in the DB.
        oci_set_client_info($this-&gt;conn, CLIENT_INFO);
        oci_set_module_name($this-&gt;conn, $module);
        oci_set_client_identifier($this-&gt;conn, $cid);
    }
 
    /**
     * Destructor closes the statement and connection
     */
    function __destruct() {
        if ($this-&gt;stid)
            oci_free_statement($this-&gt;stid);
        if ($this-&gt;conn)
            oci_close($this-&gt;conn);
    }
</pre>
<p>When a PHP object instance is created its <a id="sthref108"></a><a id="sthref109"></a><code>__construct()</code> method will be called. The <code>Db</code> class constructor opens a connection to Oracle Database and keeps the connection resource in the <a id="sthref110"></a><code>$conn</code> attribute for use when running statements. If a connection does not succeed an error is generated. This error will be displayed to the user if PHP&#39;s <code>php.ini</code> parameter <code>display_errors</code> is <code>On</code> and sent to the Apache log files if <code>log_errors</code> is <code>On</code>. In the section <a href="ch_two.htm#BABJJBDB">&#34;Post PHP Installation Tasks on Windows and Linux&#34;</a>, <code>display_errors</code> was set to <code>On</code> to help development. A production application should never display errors to the user because this is an information security leak.</p>
<p>The constructor passes the connection credentials to an <code><a id="sthref111"></a><a id="sthref112"></a><a id="sthref113"></a>oci_pconnect()</code> function. The AnyCo application uses <code>oci_pconnect()</code> to create a &#34;persistent&#34; DRCP connection, as described in <a href="ch_two.htm#BABHHEDD">Database Resident Connection Pooling</a>.</p>
<p>The character set is also passed to <code>oci_pconnect()</code>. It specifies the character set that data will be in when returned from Oracle to PHP. Setting it is optional but recommended. If the character set is not passed to <code>oci_pconnect()</code>, then PHP will determine the character set from the environment settings, which can be slower and may lead to an unexpected value being used.</p>
<p>A consequence of using the one database user name is that all statements in the application are recorded in the database as being run by HR. This makes analysis and tracing difficult or impossible. The<a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a> <code>oci_set_client_identifier()</code> function allows an arbitrary string to be recorded with the connection and processed statement details in the database. By setting the identifier to the name of the web user this allows DBAs to explicitly associate an end user with database usage. The following article describes in detail where client identifiers can be used in Oracle Database:</p>
<p><code><a href="http://www.oracle.com/technetwork/articles/dsl/php-web-auditing-171451.html">http://www.oracle.com/technetwork/articles/dsl/php-web-auditing-171451.html</a></code></p>
<p>Also to aid database tracing, two other pieces of metadata are set for each connection: the Client Information and the Module Name. <a href="ch_thirteen_monitor.htm#CHDFGBGC">Chapter 13, &#34;Monitoring Database Usage of the Application&#34;</a> shows where they are useful.</p>
<p>If a connection error occurs, an exception is thrown. The Exception class name is fully qualified. If the leading &#39;<code>\</code>&#39; was removed then an attempt to call <code>\Oracle\Exception</code> would occur, causing a run time error because a class called Exception has not been defined in the Oracle namespace. The namespace separator in PHP is a backslash(\) because it was the only feasible character available when namespaces were introduced in PHP 5.3.</p>
<p>The <code>Db</code> instance destructor explicitly closes any open connection. For a persistent DRCP pooled connection like shown, this returns the database server process to the DRCP pool for reuse. Because PHP variables internally use a reference counting mechanism, any variable that increases the reference count on the connection resource must be freed before the underlying database connection will be physically closed. Here this means closing the statement resource, which is used later in this manual when the class is enhanced to run statements.</p>
<p>Because of PHP&#39;s reference counting mechanism, the destructor shown simply emulates the default behavior when an instance of the object is destroyed. Statement and connection resources will be terminated when variables referencing them are destroyed. This particular implementation of the destructor could therefore be omitted.</p>
</div>
<!-- class="sect1" -->
<a id="CIHEFHFI"></a>
<div id="TDPPH150" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">General Example of Running SQL in PHP OCI8</h2>
<p>Running a statement in PHP OCI8 involves parsing the statement text and running it. In procedural style an <code>INSERT</code> would look like:</p>
<pre>    $c = oci_pconnect($un, $pw, $db, $cs);
    $sql = &#34;INSERT INTO mytable (c1, c2) VALUES (1, &#39;abc&#39;)&#34;;
    $s = oci_parse($c, $sql);
    oci_execute($s);
</pre>
<p>If a statement will be re-run in the database system with different data values, then use bind variables:</p>
<pre>    $c = oci_pconnect($un, $pw, $db, $cs);
    $sql = &#34;INSERT INTO mytable (c1, c2) VALUES (:c1_bv, :c2_bv)&#34;;
    $s = oci_parse($c, $sql);
    $c1 = 1;
    $c2 = &#39;abc&#39;;
    oci_bind_by_name($s, &#34;:c1_bv&#34;, $c1, -1);
    oci_bind_by_name($s, &#34;:c2_bv&#34;, $c2, -1);
    oci_execute($s);
</pre>
<p>Binding associates PHP variables with the bind identifier place holders in the SQL statement. The bind lengths are set to <code>-1</code> telling PHP to deduce internal buffer sizes from the lengths of the PHP values. When using <code>oci_bind_by_name()</code> to return data from the database (such as when assigning a PL/SQL function return value to a bind variable), the actual expected data length should be specified so enough internal space can be allocated for the PHP variable.</p>
<p>Bind variables are important for performance and security reasons. They allow the database to reuse statement metadata for repeated statements where only the variable values change. An alternative PHP coding style would concatenate PHP variable values into the SQL statement text. Each such statement would appear unique to the DB and caching would be reduced. This severely impacts DB performance. Also concatenation introduces SQL Injection security risks, where concatenation with malicious user input changes the semantics of the SQL statement.</p>
<p>In PHP, a SQL query is similar to execution but has a subsequent fetch call, of which PHP has several variants. For example to fetch all rows at once:</p>
<pre>    $c = oci_pconnect($un, $pw, $db, $cs);
    $sql = &#34;SELECT * FROM mytable WHERE c1 = :c1_bv AND c2 = :c2_bv&#34;;
    $s = oci_parse($c, $sql);
    $c1 = 1;
    $c2 = &#39;abc&#39;;
    oci_bind_by_name($s, &#34;:c1_bv&#34;, $c1, -1);
    oci_bind_by_name($s, &#34;:c2_bv&#34;, $c2, -1);
    oci_execute($s);
    oci_fetch_all($s, $res, 0, -1, OCI_FETCHSTATEMENT_BY_ROW);
</pre>
<p>The query results would be in <code>$res</code>. The <a id="sthref117"></a><code>OCI_FETCHSTATEMENT_BY_ROW</code> constant indicates the results will be in an array with entries for each row. The rows themselves are represented by a sub-array.</p>
<p>If the query returns a large number of rows the memory use might be undesirably large. Other PHP OCI8 functions like <code><a id="sthref118"></a><a id="sthref119"></a><a id="sthref120"></a>oci_fetch_array()</code> could be called instead. This function returns only one row of the result set. After the script has processed the row, it could call <code>oci_fetch_array()</code> again to fetch the next row.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The bind variable name argument in an <a id="sthref121"></a><a id="sthref122"></a><a id="sthref123"></a><code>oci_bind_by_name()</code> call does not need to have a colon prefix, but it can help visual code inspection to include it.</div>
</div>
<!-- class="sect1" -->
<a id="CIHHDJHB"></a>
<div id="TDPPH151" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Running SQL with the Db Class</h2>
<p>To make our <code>Db</code> class in <code>ac_db.inc.php</code> useful add these two methods to the class:</p>
<pre> /**
     * Run a SQL or PL/SQL statement
     *
     * Call like:
     *     Db::execute(&#34;insert into mytab values (:c1, :c2)&#34;,
     *                 &#34;Insert data&#34;, array(array(&#34;:c1&#34;, $c1, -1),
     *                                      array(&#34;:c2&#34;, $c2, -1)))
     *
     * For returned bind values:
     *     Db::execute(&#34;begin :r := myfunc(:p); end&#34;,
     *                 &#34;Call func&#34;, array(array(&#34;:r&#34;, &amp;$r, 20),
     *                                    array(&#34;:p&#34;, $p, -1)))
     *
     * Note: this performs a commit.
     *
     * @param string $sql The statement to run
     * @param string $action Action text for End-to-End Application Tracing
     * @param array $bindvars Binds. An array of (bv_name, php_variable, length)
     */
    public function execute($sql, $action, $bindvars = array()) {
        $this-&gt;stid = oci_parse($this-&gt;conn, $sql);
        if ($this-&gt;prefetch &gt;= 0) {
            oci_set_prefetch($this-&gt;stid, $this-&gt;prefetch);
        }
        foreach ($bindvars as $bv) {
            // oci_bind_by_name(resource, bv_name, php_variable, length)
            oci_bind_by_name($this-&gt;stid, $bv[0], $bv[1], $bv[2]);
        }
        oci_set_action($this-&gt;conn, $action);
        oci_execute($this-&gt;stid);              // will auto commit
    }
 
    /**
     * Run a query and return all rows.
     *
     * @param string $sql A query to run and return all rows
     * @param string $action Action text for End-to-End Application Tracing
     * @param array $bindvars Binds. An array of (bv_name, php_variable, length)
     * @return array An array of rows
     */
    public function execFetchAll($sql, $action, $bindvars = array()) {
        $this-&gt;execute($sql, $action, $bindvars);
        oci_fetch_all($this-&gt;stid, $res, 0, -1, OCI_FETCHSTATEMENT_BY_ROW);
        $this-&gt;stid = null;  // free the statement resource
        return($res);
    }
</pre>
<p>These methods do the same as the previous procedural samples, with the addition of another piece of database tracing metadata called the Action, and a way to tune performance of queries, called prefetching. Prefetching is discussed later in <a href="ch_eight_query.htm#CBAFDDEF">Chapter 8, &#34;Query Performance and Prefetching&#34;</a>.</p>
<p>All the tracing metadata set in the <code>Db</code> class is optional, however it is easier to include it in the design instead of having to retrofit it. It can be painful to troubleshoot performance or access issues on production applications without it.</p>
<p>Setting the statement identifier resource <code>$this-&gt;stid</code> to null initiates the same internal cleanup as <code>oci_free_statement()</code> (used in the destructor) and also sets the attribute to null so later methods can test for validity.</p>
<p>Our <code>Db::execute()</code> method allows us to write our <code>INSERT</code> statement as:</p>
<pre>    $db = new \Oracle\Db(&#34;Test Example&#34;, &#34;Chris&#34;);
    $sql = &#34;INSERT INTO mytable (c1, c2) VALUES (:c1_bv, :c2_bv)&#34;;
    $c1 = 1;
    $c2 = &#39;abc&#39;;
    $db-&gt;execute($sql, &#34;Insert Example&#34;, array(array(&#34;:c1_bv&#34;, $c1, -1),
                                               array(&#34;:c2_bv&#34;, $c2, -1)));
</pre>
<p>The query example would be:</p>
<pre>    $db = new \Oracle\Db(&#34;Test Example&#34;, &#34;Chris&#34;);
    $sql = &#34;SELECT * FROM mytable WHERE c1 = :c1_bv AND c2 = :c2_bv&#34;;
    $c1 = 1;
    $c2 = &#39;abc&#39;;
    $res = $db-&gt;execFetchAll($sql, &#34;Query Example&#34;, 
                             array(array(&#34;:c1_bv&#34;, $c1, -1),
                                   array(&#34;:c2_bv&#34;, $c2, -1)));
</pre>
<p>The <code>Db</code> instance creation uses a fully qualified namespace description.</p>
<p>The bind variables are encapsulated in an array of arrays. Each sub-array describes one bind variable.</p>
<p>As coded, the <code>Db</code> class automatically commits each time <code>oci_execute()</code> it is called. This has performance and transactional consistency implications if the class is to be reused in future applications. To make <code>Db</code> more general purpose you could consider changing <code>Db::execute()</code> to do:</p>
<pre>        ...
        oci_execute($this-&gt;stid, OCI_NO_AUTO_COMMIT);
        ...
</pre>
<p>In this case you would need to add <code>commit</code> and <code>rollback</code> methods to the <code>Db</code> class that call <code>oci_commit()</code> and <code>oci_rollback()</code> respectively. The examples in this manual do not require these changes. In PHP any <code><a id="sthref124"></a><a id="sthref125"></a><a id="sthref126"></a>oci_connect()</code> or any <code>oci_pconnect()</code> call that uses the same connection credentials will reuse the same underlying connection to the database. So if an application creates two instances of <code>Db</code>, they will share the same transaction state. Rolling back or committing one instance will affect transactions in the other. The <a id="sthref127"></a><a id="sthref128"></a><a id="sthref129"></a><code>oci_new_connect()</code> function is different and will create its own new connection each time it is called.</p>
</div>
<!-- class="sect1" -->
<a id="CIHIAGFF"></a>
<div id="TDPPH152" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Testing the Db Class</h2>
<p>Test the <code>Db</code> class by creating a new PHP file called <code>test_db.php</code>:</p>
<pre>&lt;?php
 
// test_db.php
 
require(&#39;ac_db.inc.php&#39;);
 
$db = new \Oracle\Db(&#34;test_db&#34;, &#34;Chris&#34;);
$sql = &#34;SELECT first_name, phone_number FROM employees ORDER BY employee_id&#34;;
$res = $db-&gt;execFetchAll($sql, &#34;Query Example&#34;);
// echo &#34;&lt;pre&gt;&#34;; var_dump($res); echo &#34;&lt;/pre&gt;\n&#34;;
 
echo &#34;&lt;table border=&#39;1&#39;&gt;\n&#34;;
echo &#34;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Phone Number&lt;/th&gt;&lt;/tr&gt;\n&#34;;
foreach ($res as $row) {
    $name = htmlspecialchars($row[&#39;FIRST_NAME&#39;], ENT_NOQUOTES, &#39;UTF-8&#39;);
    $pn   = htmlspecialchars($row[&#39;PHONE_NUMBER&#39;], ENT_NOQUOTES, &#39;UTF-8&#39;);
    echo &#34;&lt;tr&gt;&lt;td&gt;$name&lt;/td&gt;&lt;td&gt;$pn&lt;/td&gt;&lt;/tr&gt;\n&#34;;
}
echo &#34;&lt;/table&gt;&#34;;
 
?&gt;
</pre>
<p>The <code>require()</code> command includes the content of <code>ac_db.inc.php</code> giving the script access to the <code>Db</code> class.</p>
<p>The module name parameter for the <code>Db</code> instance creation is set to the file name base <code>test_db</code>. This allows anyone doing database tracing to identify where the connection was initiated from. The connection identifier is arbitrarily set to a fictitious user&#39;s name. The Action parameter to <code>$db-&gt;execFetchAll()</code> is set to the operation in the file.</p>
<p>No bind variables are passed in this example so the optional bind parameter is not specified in the <code>$db-&gt;execFetchAll()</code> method call. The definition of <code>Db::execFetchAll()</code> sets the bind variable list to an empty array when there is no final argument and therefore won&#39;t attempt to bind any data.</p>
<p>The query results are returned in <code>$res</code> as an array of row data. You can see the array structure by un-commenting the <code><a id="sthref130"></a><a id="sthref131"></a><a id="sthref132"></a>var_dump()</code> function, which is useful for simple PHP debugging. The <code>$res</code> array is iterated over in a <code>foreach()</code> loop which processes each row in turn. The two columns in each row&#39;s sub-array are accessed by <code>$row[&#39;FIRST_NAME&#39;]</code> and <code>$row[&#39;PHONE_NUMBER&#39;]</code>. By default, columns in Oracle database tables are case insensitive. They will be returned to PHP as upper case array indexes. If the table had been created in Oracle with a case sensitive column name like</p>
<pre>CREATE TABLE mytab (&#34;MyCol&#34; NUMBER);
</pre>
<p>then in PHP you would need to use a case sensitive array index <code>$row[&#39;MyCol&#39;]</code>.</p>
<p>In <code>test_db.php</code>, the returned data is processed with <code>htmlspecialchars()</code> to ensure that any text that happens to look like HTML is treated as displayable text and not as HTML markup. This escaping of output is very important for security in web applications to make sure there are no cross-site scripting (XSS) security issues.</p>
<p>The exact <code><a id="sthref133"></a><a id="sthref134"></a><a id="sthref135"></a>htmlspecialchars()</code> options you use would depend on context. PHP also has an <a id="sthref136"></a><a id="sthref137"></a><a id="sthref138"></a><code>htmlentities()</code> function that might be useful. The character set should match the HTML page character set. The AnyCo application will do this.</p>
<p>Load <code>test_db.php</code> in a browser: <code>http://localhost/test_db.php</code>. Or, in NetBeans, right click the file in the <span class="bold">Projects</span> navigator and select <span class="bold">Run</span>.</p>
<p>It displays:</p>
<img width="237" height="297" src="img/chap3_test_db_class.png" alt="figure"/><br/>
<p>If you have problems connecting, resolve any PHP interpreter errors. Make sure all methods are located inside the class definition braces. Review the section <a href="ch_two.htm#BABFIHHF">Testing PHP Connections to Oracle</a> for other common problems.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4949">
<tr>
<td class="cellalignment4956">
<table class="cellalignment4954">
<tr>
<td class="cellalignment4953"><a href="ch_two.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4953"><a href="ch_four_anyco_app.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2010, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4958">
<table class="cellalignment4952">
<tr>
<td class="cellalignment4953"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4953"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4953"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4953"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4953"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4953"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>