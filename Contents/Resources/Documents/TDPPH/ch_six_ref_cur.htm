<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-106350"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Showing%20Equipment%20Records%20by%20Using%20a%20REF%20CURSOR"></a><title>Showing Equipment Records by Using a REF CURSOR</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743"/>
<meta name="dcterms.created" content="2014-02-04T21:52:15Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database 2 Day + PHP Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E18554-05"/>
<meta name="dcterms.isVersionOf" content="TDPPH"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2010, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_five_emp_data.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_seven_error.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E18554-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/18</span> <!-- End Header -->
<div id="TDPPH160" class="chapter"><a id="BABCDADC"></a>
<h1 class="chapter"><span class="secnum">6</span> Showing Equipment Records by Using a REF CURSOR</h1>
<p>This chapter creates the report run by clicking the <span class="bold">Show</span> link next to an employees name on the <span class="bold">AnyCo Corp. Employees List</span> page from the previous chapter.</p>
<p>The previous chapter showed how to fetch data from a SQL query. This chapter shows how to use a <code>REF CURSOR</code> in PHP. The <code>REF CURSOR</code> will fetch the names of the equipment that have been issued to an employee.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABFGHED">Introduction to PL/SQL Packages and Package Bodies</a></p>
</li>
<li>
<p><a href="#BABHEIAC">Introduction to PL/SQL Stored Procedures</a></p>
</li>
<li>
<p><a href="#BABFHEAJ">Introduction to REF CURSORs</a></p>
</li>
<li>
<p><a href="#BABHAEEH">The Equipment Table</a></p>
</li>
<li>
<p><a href="#BABEHEBA">Calling the REF CURSOR in PHP</a></p>
</li>
</ul>
<a id="BABFGHED"></a>
<div id="TDPPH161" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to PL/SQL Packages and Package Bodies</h2>
<p>A PL/SQL package stores related items as a single logical entity. A package is composed of two distinct pieces:</p>
<ul>
<li>
<p>The <span class="bold"><a id="sthref205"></a>package specification</span> defines what is contained in the package; it is analogous to a header file in a language such as C++. The specification defines all public items. The specification is the published interface to a package.</p>
</li>
<li>
<p>The <a id="sthref206"></a><span class="bold">package body</span> contains the code for the procedures and functions defined in the specification, and the code for private procedures and functions that are not declared in the specification. This private code is only visible within the package body.</p>
</li>
</ul>
<p>The package specification and body are stored as separate objects in the data dictionary and can be seen in the <code>user_source</code> view. The specification is stored as the <a id="sthref207"></a><a id="sthref208"></a><code>PACKAGE</code> type, and the body is stored as the <a id="sthref209"></a><a id="sthref210"></a><code>PACKAGE BODY</code> type.</p>
<p>While it is possible to have a specification without a body, as when declaring a set of public constants, it is not possible to have a body with no specification.</p>
</div>
<!-- class="sect1" -->
<a id="BABHEIAC"></a>
<div id="TDPPH162" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to PL/SQL Stored Procedures</h2>
<p>A stored procedure is a named set of PL/SQL statements designed to perform an action. Stored procedures are stored inside the database. They define a programming interface for the database rather than allowing the client application to interact with database objects directly. Stored procedures are typically used for data validation or to encapsulate large, complex processing instructions that combine several SQL queries.</p>
<p>Stored functions have a single return value parameter. Unlike functions, procedures may or may not return values.</p>
</div>
<!-- class="sect1" -->
<a id="BABFHEAJ"></a>
<div id="TDPPH163" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to REF CURSORs</h2>
<p>Using <a id="sthref211"></a><code>REF</code> <code>CURSOR</code>s is one of the most powerful, flexible, and scalable ways to return query results from an Oracle Database to a client application.</p>
<p>A <code>REF</code> <code>CURSOR</code> is a <a id="sthref212"></a>PL/SQL data type whose value is the memory address of a query work area on the database. In essence, a <code>REF</code> <code>CURSOR</code> is a pointer or a handle to a result set on the database.</p>
<p><code>REF</code> <code>CURSOR</code>s have the following characteristics:</p>
<ul>
<li>
<p>A <code>REF</code> <code>CURSOR</code> refers to a memory address on the database. Therefore, the client must be connected to the database during the lifetime of the <code>REF</code> <code>CURSOR</code> to access it.</p>
</li>
<li>
<p>A <code>REF</code> <code>CURSOR</code> involves an additional database round-trip. While the <code>REF</code> <code>CURSOR</code> is returned to the client, the actual data is not returned until the client opens the <code>REF</code> <code>CURSOR</code> and requests the data. Data is not retrieved until the user attempts to read it.</p>
</li>
<li>
<p>A <code>REF</code> <code>CURSOR</code> is not updatable. The result set represented by the <code>REF</code> <code>CURSOR</code> is read-only. You cannot update the database by using a <code>REF</code> <code>CURSOR</code>.</p>
</li>
<li>
<p>A <code>REF</code> <code>CURSOR</code> is not backward scrollable. The data represented by the <code>REF</code> <code>CURSOR</code> is accessed in a forward-only, serial manner. You cannot position a record pointer inside the <code>REF</code> <code>CURSOR</code> to point to random records in the result set.</p>
</li>
<li>
<p>A <code>REF</code> <code>CURSOR</code> is a PL/SQL data type. You create and return a <code>REF</code> <code>CURSOR</code> inside a PL/SQL code block.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABHAEEH"></a>
<div id="TDPPH164" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">The Equipment Table</h2>
<p>This manual&#39;s example scenario is that AnyCo Corp issues each employee various pieces of equipment to do their job. An <code>EQUIPMENT</code> table will hold the equipment names and which employee it was issued to.</p>
<p>In SQL*Plus connect as the <code>HR</code> user and run the following script:</p>
<pre>sqlplus hr/welcome@localhost
</pre>
<pre>CREATE TABLE equipment(
    id          NUMBER PRIMARY KEY,
    employee_id REFERENCES employees(employee_id) ON DELETE CASCADE,
    equip_name  VARCHAR2(20) NOT NULL);
 
CREATE SEQUENCE equipment_seq;
CREATE TRIGGER equipment_trig BEFORE INSERT ON equipment FOR EACH ROW
BEGIN
    :NEW.id := equipment_seq.NEXTVAL;
END;
/
</pre>
<p>The PL/SQL sequence and trigger assign a unique key to each new equipment record as it is inserted.</p>
<p>If you run these statements in a SQL editor, such as in NetBeans, omit the trailing slash (&#39;<code>/</code>&#39;) in the <code>CREATE TRIGGER</code> statement. The slash is SQL*Plus&#39;s end-of-statement indicator and is not part of the statement that is run by the database.</p>
<p>Create some sample data:</p>
<pre>-- Sample Data
INSERT INTO equipment (employee_id, equip_name) VALUES (100, &#39;pen&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (100, &#39;telephone&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (101, &#39;pen&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (101, &#39;paper&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (101, &#39;car&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (102, &#39;pen&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (102, &#39;paper&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (102, &#39;telephone&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (103, &#39;telephone&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (103, &#39;computer&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (121, &#39;computer&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (180, &#39;pen&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (180, &#39;paper&#39;);
INSERT INTO equipment (employee_id, equip_name) VALUES (180, &#39;cardboard box&#39;);
COMMIT;
</pre>
<p>In SQL*Plus create a procedure as <code>HR</code>:</p>
<pre>CREATE OR REPLACE PROCEDURE get_equip(eid_p IN NUMBER, RC OUT SYS_REFCURSOR) AS
BEGIN
    OPEN rc FOR SELECT   equip_name
                FROM     equipment
                WHERE    employee_id = eid_p
                ORDER BY equip_name;
END;
/
</pre>
<p>In PHP this procedure can be called by running an anonymous PL/SQL block:</p>
<pre>BEGIN get_equip(:id, :rc); END;
</pre>
<p>The <a id="sthref213"></a><a id="sthref214"></a><code>:id</code> bind variable is used similarly to binds shown before. It passes a value from a PHP variable into the database for the <code>WHERE</code> clause of <code>get_equip()</code>. The bind variable <code><a id="sthref215"></a><a id="sthref216"></a>:rc</code> is different and will hold the query results returned from <code>equip_name()</code> as explained in a few moments.</p>
</div>
<!-- class="sect1" -->
<a id="BABEHEBA"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Calling the REF CURSOR in PHP</h2>
<p>To display an employee&#39;s list of equipment create a new PHP file <code>ac_show_equip.php</code>:</p>
<pre>&lt;?php
 
/**
 * ac_show_equip.php: Show an employee&#39;s equipment
 * @package <a id="sthref217"></a>ShowEquipment
 */
 
session_start();
require(&#39;ac_db.inc.php&#39;);
require(&#39;ac_equip.inc.php&#39;);
 
$sess = new \Equipment\Session;
$sess-&gt;getSession();
if (!isset($sess-&gt;username) || empty($sess-&gt;username)
        || !isset($_GET[&#39;empid&#39;])) {
    header(&#39;Location: index.php&#39;);
    exit;
}
$empid = (int) $_GET[&#39;empid&#39;];
 
$page = new \Equipment\Page;
$page-&gt;printHeader(&#34;AnyCo Corp. Show Equipment&#34;);
$page-&gt;printMenu($sess-&gt;username, $sess-&gt;isPrivilegedUser());
printcontent($sess, $empid);
$page-&gt;printFooter();
 
// Functions
 
?&gt;
</pre>
<p>This is similar in structure to <code>ac_emp_list.php</code>. This time the verification test after <code>$sess-&gt;getSession()</code> also checks for an employee identifier. This value is passed in as a URL parameter from the <code><a id="sthref218"></a><a id="sthref219"></a><a id="sthref220"></a>printrecords()</code> function in <code>ac_emp_list.php</code>:</p>
<pre>...
&lt;a href=&#39;ac_show_equip.php?empid=$eid&#39;&gt;Show&lt;/a&gt;
...
</pre>
<p>The identifier value is accessed in <code>ac_show_equip.php</code> through PHP&#39;s <a id="sthref221"></a><code>$_GET</code> superglobal array. If the array entry is not set then the assumption is that <code>ac_show_equip.php</code> was called incorrectly and the user is redirected to the login page, <code>index.php</code>.</p>
<p>The <code>$_GET[&#39;empid&#39;]</code> value is cast to an integer to minimize potential SQL injection issues. Although the value will be bound, it is better to consistently filter all user input. If <code>$_GET[&#39;empid&#39;]</code> contained alphabetic text for some reason, PHP&#39;s casting rules will result in the number <code>0</code> being stored in <code>$empid</code>. If the text had a numeric prefix then <code>$empid</code> would be that number, but at least the following text would have been discarded.</p>
<p>Before getting to the main content of the file, add a small helper function <a id="sthref222"></a><a id="sthref223"></a><a id="sthref224"></a><code>getempname()</code> in the Functions section of <code>ac_show_equip.php</code>:</p>
<pre>/**
 * Get an Employee Name
 *
 * @param Db $db
 * @param integer $empid
 * @return string An employee name
 */
function getempname($db, $empid) {
    $sql = &#34;SELECT first_name || &#39; &#39; || last_name AS emp_name
        FROM employees
        WHERE employee_id = :id&#34;;
    $res = $db-&gt;execFetchAll($sql, &#34;Get EName&#34;, array(array(&#34;:id&#34;, $empid, -1)));
    $empname = $res[0][&#39;EMP_NAME&#39;];
    return($empname);
}
</pre>
<p>This takes the employee identifier that the script was invoked for and looks up the matching employee name. An exercise for the reader is to handle the case when the query does not return any rows.</p>
<p>Now add the main <code><a id="sthref225"></a><a id="sthref226"></a><a id="sthref227"></a>printcontent()</code> function to <code>ac_show_equip.php</code>:</p>
<pre>/**
 * Print the main body of the page
 *
 * @param Session $sess
 * @param integer $empid Employee identifier
 */
function printcontent($sess, $empid) {
    echo &#34;&lt;div id=&#39;content&#39;&gt;\n&#34;;
    $db = new \Oracle\Db(&#34;Equipment&#34;, $sess-&gt;username);
    $empname = htmlspecialchars(getempname($db, $empid), ENT_NOQUOTES, &#39;UTF-8&#39;);
    echo &#34;$empname has: &#34;;
 
    $sql = &#34;BEGIN get_equip(:id, :rc); END;&#34;;
    $res = $db-&gt;refcurExecFetchAll($sql, &#34;Get Equipment List&#34;,
            &#34;rc&#34;, array(array(&#34;:id&#34;, $empid, -1)));
    if (empty($res[&#39;EQUIP_NAME&#39;])) {
        echo &#34;no equipment&#34;;
    } else {
        echo &#34;&lt;table border=&#39;1&#39;&gt;\n&#34;;
        foreach ($res[&#39;EQUIP_NAME&#39;] as $item) {
            $item = htmlspecialchars($item, ENT_NOQUOTES, &#39;UTF-8&#39;);
            echo &#34;&lt;tr&gt;&lt;td&gt;$item&lt;/td&gt;&lt;/tr&gt;\n&#34;;
        }
        echo &#34;&lt;/table&gt;\n&#34;;
    }
    echo &#34;&lt;/div&gt;&#34;;  // content
}
</pre>
<p>This calls a new method <code><a id="sthref228"></a><a id="sthref229"></a>Db::refcurExecFetchAll()</code> which will return an array of records, printed in our traditional loop.</p>
<p>The <code>REF CURSOR</code> <a id="sthref230"></a><a id="sthref231"></a>bind parameter <code>:rc</code> must be bound specially. Since the bind variable name could be arbitrarily chosen or located anywhere in the statement text, its name is passed separately into <code>refcurExecFetchAll()</code> and it is not included in the array of normal bind variables.</p>
<p>Now create the <a id="sthref232"></a><a id="sthref233"></a><code>refcurExecFetchAll()</code> method by editing <code>ac_db.inc.php</code> and adding this to the <a id="sthref234"></a><code>Db</code> class:</p>
<pre>    /**
     * Run a call to a stored procedure that returns a REF CURSOR data
     * set in a bind variable.  The data set is fetched and returned.
     *
     * Call like Db::refcurexecfetchall(&#34;begin myproc(:rc, :p); end&#34;,
     *                            &#34;Fetch data&#34;, &#34;:rc&#34;, array(array(&#34;:p&#34;, $p, -1)))
     * The assumption that there is only one refcursor is an artificial
     * limitation of refcurexecfetchall()
     *
     * @param string <a id="sthref235"></a><a id="sthref236"></a>$sql A SQL string calling a PL/SQL stored procedure
     * @param string <a id="sthref237"></a><a id="sthref238"></a>$action Action text for End-to-End Application Tracing
     * @param string <a id="sthref239"></a><a id="sthref240"></a>$rcname the name of the REF CURSOR bind variable
     * @param array  <a id="sthref241"></a><a id="sthref242"></a>$otherbindvars Binds. Array (bv_name, php_variable, length)
     * @return array Returns an array of tuples
     */
    public function refcurExecFetchAll($sql, $action, $rcname, 
    $otherbindvars = array()) {
        $this-&gt;stid = oci_parse($this-&gt;conn, $sql);
        $rc = oci_new_cursor($this-&gt;conn);
        oci_bind_by_name($this-&gt;stid, $rcname, $rc, -1, OCI_B_CURSOR);
        foreach ($otherbindvars as $bv) {
            // oci_bind_by_name(resource, bv_name, php_variable, length)
            oci_bind_by_name($this-&gt;stid, $bv[0], $bv[1], $bv[2]);
        }
        oci_set_action($this-&gt;conn, $action);
        oci_execute($this-&gt;stid);
        oci_execute($rc); // run the ref cursor as if it were a statement id
        oci_fetch_all($rc, $res);   
        $this-&gt;stid = null;
        return($res);
    }
</pre>
<p>The <code>REF CURSOR</code> bind parameter in <code>$rcname</code> is bound to a cursor created with <code>oci_new_cursor</code>(), not to a normal PHP variable. The type <code>OCI_B_CURSOR</code> must specified.</p>
<p>After setting the tracing &#34;action&#34; text, the PL/SQL statement is run. In this example it calls <code>get_equip()</code> which opens and returns the cursor for the query. The <code>REF CURSOR</code> in <code>$rc</code> can now be treated like a PHP statement identifier as if it had been returned from an <code>oci_parse()</code> call. It is then fetched from. The query results are returned in <code>$res</code> to the function caller.</p>
<p>Save all files and run the application in a browser. Login as either <code>Simon</code> or <code>Administrator</code>. Click the <span class="bold">Show</span> link next to <span class="bold">Steven King</span>. The equipment he has is displayed:</p>
<img width="766" height="169" src="img/chap6_ref_cursor_call.png" alt="Equipments"/><br/></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4949">
<tr>
<td class="cellalignment4956">
<table class="cellalignment4954">
<tr>
<td class="cellalignment4953"><a href="ch_five_emp_data.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4953"><a href="ch_seven_error.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2010, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4958">
<table class="cellalignment4952">
<tr>
<td class="cellalignment4953"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4953"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4953"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4953"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4953"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4953"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>