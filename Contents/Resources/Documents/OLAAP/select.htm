<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79265"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Making%20Queries%20Using%20Source%20Methods"></a><title>Making Queries Using Source Methods</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T7:32:41Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Java API Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17707-05"/>
<meta name="dcterms.isVersionOf" content="OLAAP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="query.htm" title="Previous" type="text/html"/>
<link rel="Next" href="transact.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17707-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/19</span> <!-- End Header -->
<div class="chapter"><a id="g1017484"></a> <a id="i1006611"></a>
<h1 class="chapter"><span class="secnum">6</span> Making Queries Using Source Methods</h1>
<p><a id="sthref644"></a>You create a query by producing a <code>Source</code> that specifies the data that you want to retrieve and any operations that you want to perform on that data. To produce the query, you begin with the primary <code>Source</code> objects that represent the metadata of the measures and the dimensions and their attributes that you want to query. Typically, you use the methods of the primary <code>Source</code> objects to derive a number of other <code>Source</code> objects, each of which specifies a part of the query, such as a selection of dimension members or an operation to perform on the data. You then join the <code>Source</code> objects that specify the data and the operations that you want. The result is one <code>Source</code> that represents the query. You can then retrieve the data by creating a <code>Cursor</code> for the <code>Source</code>.</p>
<p>This chapter briefly describes the various kinds of <code>Source</code> methods, and discusses some of them in greater detail. It also discusses how to make some typical OLAP queries using these methods and provides examples of some of them.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#i1015557">Describing the Basic Source Methods</a></p>
</li>
<li>
<p><a href="#i1015560">Using the Basic Methods</a></p>
</li>
<li>
<p><a href="#i1015566">Using Other Source Methods</a></p>
</li>
</ul>
<a id="i1015557"></a>
<div class="sect1">
<h2 class="sect1">Describing the Basic Source Methods</h2>
<p><a id="sthref645"></a><a id="sthref646"></a><a id="sthref647"></a>The <code>Source</code> class has many methods that return a derived <code>Source</code>. The elements of the derived <code>Source</code> result from operations on the base <code>Source</code>, which is the <code>Source</code> whose method returns the derived <code>Source</code>. Only a few methods perform the most basic operations of the <code>Source</code> class.</p>
<p><a id="sthref648"></a>Many other methods of the <code>Source</code> class use one or more of the basic methods to perform operations such as selecting elements of the base <code>Source</code> by value or by position, or sorting elements. Many of the examples in this chapter and in <a href="query.htm#g1030586">Chapter 5, &#34;Understanding Source Objects&#34;</a>, use some of these methods. Other <code>Source</code> methods get objects that have information about the <code>Source</code>, such as the <code>getID</code>, <code>getInputs</code>, and <code>getType</code> methods, perform comparisons, such as the <code>ge</code> and <code>gt</code> methods, or convert the values of the <code>Source</code> from one data type to another, such as the <code>toDoubleSource</code> method.</p>
<p>This topic describes the basic <code>Source</code> methods and provides some examples of their use. <a href="#CHDDACIA">Table 6-1</a> lists the basic <code>Source</code> methods.</p>
<div class="tblruleformal">
<p class="titleintable"><a id="sthref649"></a><a id="CHDDACIA"></a>Table 6-1 The Basic Source Methods</p>
<table class="cellalignment4783" title="The Basic Source Methods" summary="This table lists the basic Source methods and provides brief descriptions of them." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-t2">Method</th>
<th class="cellalignment4782" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-t2" headers="r1c1-t2">
<p><a id="sthref650"></a><code>alias</code></p>
</td>
<td class="cellalignment4776" headers="r2c1-t2 r1c2-t2">
<p>Returns a <code>Source</code> that has the same elements as the base <code>Source</code>, but has the base <code>Source</code> as the type.</p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-t2" headers="r1c1-t2">
<p><a id="sthref651"></a><code>distinct</code></p>
</td>
<td class="cellalignment4776" headers="r3c1-t2 r1c2-t2">
<p>Returns a <code>Source</code> that has the same elements as the base <code>Source</code>, except that any elements that are duplicated in the base appear only once in the derived <code>Source</code>.</p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-t2" headers="r1c1-t2">
<p><a id="sthref652"></a><code>join</code></p>
</td>
<td class="cellalignment4776" headers="r4c1-t2 r1c2-t2">
<p>Returns a <code>Source</code> that has the elements of the base <code>Source</code> that are specified by the <code>joined</code>, <code>comparison</code>, and <code>comparisonRule</code> parameters of the method call. If the <code>visible</code> parameter is <code>true</code>, then the joined <code>Source</code> is an output of the resulting <code>Source</code>.</p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r5c1-t2" headers="r1c1-t2">
<p><a id="sthref653"></a><code>position</code></p>
</td>
<td class="cellalignment4776" headers="r5c1-t2 r1c2-t2">
<p>Returns a <code>Source</code> that has the positions of the elements of the base <code>Source</code>, and that has the base <code>Source</code> as an input.</p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r6c1-t2" headers="r1c1-t2">
<p><a id="sthref654"></a><code>recursiveJoin</code></p>
</td>
<td class="cellalignment4776" headers="r6c1-t2 r1c2-t2">
<p>Similar to the <code>join</code> method, except that this method, in the <code>Source</code> that it returns, orders the elements of the <code>Source</code> hierarchically by parent-child relationships.</p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r7c1-t2" headers="r1c1-t2">
<p><a id="sthref655"></a><code>value</code></p>
</td>
<td class="cellalignment4776" headers="r7c1-t2 r1c2-t2">
<p>Returns a <code>Source</code> that has the same elements as the base <code>Source</code>, but that has the base <code>Source</code> as an input.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" --></div>
<!-- class="sect1" -->
<a id="i1015560"></a>
<div class="sect1">
<h2 class="sect1">Using the Basic Methods</h2>
<p><a id="ABC1089140"></a>This topic provides examples of using some of the basic methods.</p>
<div class="sect2"><a id="sthref656"></a>
<h3 class="sect2">Using the alias Method</h3>
<p>You use the <code>alias</code> method to control the matching of a <code>Source</code> to an input. For example, if you want to find out if the measure values specified by a member of a dimension of the measure are greater than the measure values specified by the other members of the same dimension, then you need to match the inputs of the measure twice in the same join operation. To do so, you can derive two <code>Source</code> objects that are aliases for the same dimension, make them inputs of two <code>Source</code> objects that are derived from the measure, join each derived measure <code>Source</code> to the associated aliased dimension <code>Source</code> objects, and then compare the results.</p>
<p><a href="#i1014430">Example 6-1</a> performs such an operation. It produces a <code>Source</code> that specifies whether the number of units sold for each value of the CHANNEL_AWJ dimension is greater than the number of units sold for the other values of the CHANNEL_AWJ dimension.</p>
<p>The example joins <code>units</code>, which is the <code>Source</code> for a measure, to <code>Source</code> objects that are selections of single values of three of the dimensions of the measure to produce <code>unitsSel</code>. The <code>unitsSel</code> <code>Source</code> specifies the <code>units</code> elements for the dimension values that are specified by the <code>timeSel</code>, <code>custSel</code>, and <code>prodSel</code> objects, which are outputs of <code>unitsSel</code>. The <code>unitsSel</code> <code>Source</code> has the <code>Source</code> for CHANNEL_AWJ dimension as an input.</p>
<p>The <code>timeSel</code>, <code>custSel</code>, and <code>prodSel</code> <code>Source</code> objects specify single values from hierarchies of the TIME_AWJ, CUSTOMER_AWJ, and PRODUCT_AWJ dimensions, respectively. The <code>timeSel</code> value is <code>CALENDAR_YEAR::MONTH::2001.01</code>, which identifies the month January, 2001, the <code>custSel</code> value is <code>SHIPMENTS::SHIP_TO::BUSN WRLD SJ</code>, which identifies the Business World San Jose customer, and the <code>prodSel</code> value is <code>PRODUCT_PRIMARY::ITEM::ENVY ABM</code>, which identifies the Envoy Ambassador portable PC.</p>
<p><a id="sthref657"></a>The example next creates two aliases, <code>chanAlias1</code> and <code>chanAlias2</code>, for <code>chanHier</code>, which is the <code>Source</code> for the CHANNEL_PRIMARY hierarchy of the CHANNEL_AWJ dimension. It then produces <code>unitsSel1</code> by joining <code>unitsSel</code> with the <code>Source</code> returned by <code>chanAlias1.value()</code>. The <code>unitsSel1</code> <code>Source</code> has the elements and outputs of <code>unitsSel</code> and it has <code>chanAlias1</code> as an input. Similarly, the example produces <code>unitsSel2</code>, which has <code>chanAlias2</code> as an input.</p>
<p><a id="sthref658"></a>The example uses the <code>gt</code> method of <code>unitsSel1</code>, which determines whether the values of <code>unitsSel1</code> are greater than the values of <code>unitsSel2</code>. The final join operations match <code>chanAlias1</code> with the input of <code>unitsSel1</code> and match <code>chanAlias2</code> with the input of <code>unitsSel2</code>.</p>
<div class="example">
<p class="titleinexample"><a id="i1014430"></a>Example 6-1 Controlling Input-with-Source Matching with the alias Method</p>
<pre>Source unitsSel = units.join(timeSel).join(custSel).join(prodSel);
Source chanAlias1 = chanHier.alias();
Source chanAlias2 = chanHier.alias();
NumberSource unitsSel1 = (NumberSource)
                          unitsSel.join(chanAlias1.value());
NumberSource unitsSel2 = (NumberSource)
                          unitsSel.join(chanAlias2.value());
Source result = unitsSel1.gt(unitsSel2)
                         .join(chanAlias1)   // Output 2, column
                         .join(chanAlias2);  // Output 1, row;
</pre></div>
<!-- class="example" -->
<p><a id="sthref659"></a>The <code>result</code> <code>Source</code> specifies the query, &#34;Are the units sold values of <code>unitsSel1</code> for the channel values of <code>chanAlias1</code> greater than the units sold values of <code>unitsSel2</code> for the channel values of <code>chanAlias2</code>?&#34; Because <code>result</code> is produced by the joining of <code>chanAlias2</code> to the <code>Source</code> returned by <code>unitsSel1.gt(unitsSel2).join(chanAlias1)</code>, <code>chanAlias2</code> is the first output of <code>result</code>, and <code>chanAlias1</code> is the second output of <code>result</code>.</p>
<p>A <code>Cursor</code> for the <code>result</code> <code>Source</code> has as values the <code>boolean</code> values that answer the query. The values of the first output of the <code>Cursor</code> are the channel values specified by <code>chanAlias2</code> and the values of the second output are the channel values specified by <code>chanAlias1</code>.</p>
<p><a id="sthref660"></a>The following is a display of the values of the <code>Cursor</code> formatted as a crosstab with headings added. The column edge values are the values from <code>chanAlias1</code>, and the row edge values are the values from <code>chanAlias2</code>. The values of the crosstab cells are the <code>boolean</code> values that indicate whether the units sold value for the column channel value is greater than the units sold value for the row channel value. For example, the crosstab values in the first column indicate that the units sold value for the column channel value <code>Total Channel</code> is not greater than the units sold value for the row <code>Total Channel</code> value but it is greater than the units sold value for the <code>Direct Sales</code>, <code>Catalog</code>, and <code>Internet</code> row values.</p>
<pre>               ----------------- chanAlias1 ----------------
chanAlias2     TotalChannel  Catalog  Direct Sales    Internet
------------   ------------  -------  ------------  --------
TotalChannel      false       false      false       false
Catalog           true        false      false       false
Direct Sales      true        true       false       false
Internet          true        true       true        false
</pre></div>
<!-- class="sect2" -->
<a id="CHDFEBJE"></a>
<div class="sect2">
<h3 class="sect2">Using the distinct Method</h3>
<p><a id="sthref661"></a>You use the <code>distinct</code> method to produce a <code>Source</code> that does not have any duplicated values, as shown in <a href="#CBBECHCG">Example 6-2</a>. The example joins two selections of dimension members. Some dimension members exist in both selections. The example uses the <code>distinct</code> method to produce a <code>Source</code> that contains only unique dimension members, with no duplicated values.</p>
<p><a id="sthref662"></a><a id="sthref663"></a>The example gets the <code>MdmStandardDimension</code> object for the CUSTOMER_AWJ dimension and gets the <code>MdmLevelHierarchy</code> object for the MARKETS hierarchy of that dimension. It gets the <code>StringSource</code> object, <code>mktHier</code>, for the <code>MdmLevelHierarchy</code>. It then uses the <code>selectValues</code> method of <code>mktHier</code> to produce two selections of members of the hierarchy, <code>customersToSelect</code> and <code>moreCustomersToSelect</code>. Two of the members of <code>customersToSelect</code> are also present in <code>moreCustomersToSelect</code>.</p>
<p><a id="sthref664"></a>The example uses the <code>appendValues</code> method to combine the elements of <code>customersToSelect</code> and <code>moreCustomersToSelect</code> in the <code>combinedCustomers</code> <code>Source</code>. Finally, the example uses the <code>distinct</code> method of <code>combinedCustomers</code>, which returns a <code>Source</code>, <code>distinctCombinedCustomers</code>, that has only the distinct members of the hierarchy.</p>
<div class="example">
<p class="titleinexample"><a id="CBBECHCG"></a>Example 6-2 Using the distinct Method</p>
<pre>MdmStandardDimension mdmCustDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;CUSTOMER_AWJ&#34;);
MdmLevelHierarchy mdmMktHier =
  mdmCustDim.findOrCreateLevelHierarchy(&#34;MARKETS&#34;);
StringSource mktHier = (StringSource)mdmMktHier.getSource();

Source customersToSelect = 
  mktHier.selectValues(new String[] {&#34;MARKETS::SHIP_TO::KOSH ENT BOS&#34;,
                                     &#34;MARKETS::SHIP_TO::KOSH ENT TOK&#34;,
                                     &#34;MARKETS::SHIP_TO::KOSH ENT WAN&#34;});
Source moreCustomersToSelect = 
  mktHier.selectValues(new String[] {&#34;MARKETS::SHIP_TO::KOSH ENT BOS&#34;,
                                     &#34;MARKETS::SHIP_TO::KOSH ENT TOK&#34;,
                                     &#34;MARKETS::SHIP_TO::BUSN WRLD NY&#34;,
                                     &#34;MARKETS::SHIP_TO::BUSN WRLD SJ&#34;});
Source combinedCustomers =
  customersToSelect.appendValues(moreCustomersToSelect);

Source distinctCombinedCustomers = combinedCustomers.distinct();
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>combinedCustomers</code> <code>Source</code> has the following values:</p>
<pre>MARKETS::SHIP_TO::KOSH ENT BOS
MARKETS::SHIP_TO::KOSH ENT TOK
MARKETS::SHIP_TO::KOSH ENT WAN
MARKETS::SHIP_TO::KOSH ENT BOS
MARKETS::SHIP_TO::KOSH ENT TOK
MARKETS::SHIP_TO::BUSN WRLD NY
MARKETS::SHIP_TO::BUSN WRLD SJ
</pre>
<p>A <code>Cursor</code> for the <code>distinctCombinedCustomers</code> <code>Source</code> has the following values:</p>
<pre>MARKETS::SHIP_TO::KOSH ENT BOS
MARKETS::SHIP_TO::KOSH ENT TOK
MARKETS::SHIP_TO::KOSH ENT WAN
MARKETS::SHIP_TO::BUSN WRLD NY
MARKETS::SHIP_TO::BUSN WRLD SJ
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref665"></a>
<h3 class="sect2">Using the join Method</h3>
<p>As described in <a href="query.htm#g1030586">Chapter 5, &#34;Understanding Source Objects&#34;</a>, you use the <code>join</code> method to produce a <code>Source</code> that has the elements of the base <code>Source</code> that are determined by the <code>joined</code>, <code>comparison</code>, and <code>comparisonRule</code> parameters of the method. The <code>visible</code> parameter determines whether the <code>joined</code> parameter <code>Source</code> is an output of the <code>Source</code> produced by the join operation. You also use the <code>join</code> method to match a <code>Source</code> with an input of the base or <code>joined</code> parameter <code>Source</code>.</p>
<p><a id="sthref666"></a>Most of the examples in this chapter use one or more signatures of the <code>join</code> method, as do many of the examples in <a href="query.htm#g1030586">Chapter 5</a>. <a href="#CBBEBEJH">Example 6-3</a> uses the full <code>join</code> signature and the simplest <code>join</code> signature. In the example, the full <code>join</code> signature demonstrates the use of <code>COMPARISON_RULE_DESCENDING</code> as the <code>comparisonRule</code> parameter.</p>
<p><a href="#CBBEBEJH">Example 6-3</a> uses the following <code>Source</code> objects.</p>
<ul>
<li>
<p><code>prodSelWithShortDescr</code>, which is the <code>Source</code> produced by joining the short description attribute of the PRODUCT_AWJ dimension with the <code>Source</code> for the FAMILY hierarchy level of the PRODUCT_PRIMARY hierarchy of the dimension.</p>
</li>
<li>
<p><code>salesMeasure</code>, which is the <code>Source</code> for the SALES measure of the UNITS_CUBE_AWJ cube.</p>
</li>
<li>
<p><code>timeSelWithShortDescr</code>, which is the <code>Source</code> produced by joining the short description attribute of the TIME_AWJ dimension with the <code>Source</code> for a selected member of the CALENDAR_YEAR hierarchy of the dimension.</p>
</li>
<li>
<p><code>custSelWithShortDescr</code>, which is the <code>Source</code> produced by joining the short description attribute of the CUSTOMER_AWJ dimension with the <code>Source</code> for a selected member of the SHIPMENTS hierarchy of the dimension.</p>
</li>
<li>
<p><code>chanSelWithShortDescr</code>, which is the <code>Source</code> produced by joining the short description attribute of the CHANNEL_AWJ dimension with the <code>Source</code> for a selected member of the CHANNEL_PRIMARY hierarchy of the dimension.</p>
</li>
</ul>
<p>The first join operation uses the full signature of the <code>join</code> method with <code>prodSelWithShortDescr</code> as the base <code>Source</code>, <code>salesMeasure</code> as the joined <code>Source</code>, the <code>Source</code> for the Number data type as the comparison <code>Source</code>, and <code>COMPARISON_RULE_DESCENDING</code> as the comparison rule. The <code>Source</code> returned by that join operation has the product family level members and related product short description values as base values and an output that has the sales amounts in descending order.</p>
<p>The next three join operations join the single member selections of the other three dimensions of the measure. The <code>result</code> <code>Source</code> specifies the product family level members in descending order of sales amounts for the month of May, 2001 for all customers and all channels.</p>
<div class="example">
<p class="titleinexample"><a id="CBBEBEJH"></a>Example 6-3 Using COMPARISON_RULE_DESCENDING</p>
<pre>Source result = prodSelWithShortDescr.join(salesMeasure,
<a id="sthref667"></a>                                           salesMeasure.getDataType(),
                                           Source.COMPARISON_RULE_DESCENDING,
                                           true)
                                     .join(timeSelWithShortDescr)
                                     .join(custSelWithShortDescr)
                                     .join(chanSelWithShortDescr);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>result</code> <code>Source</code> has the following values, displayed as a table. The table includes only the short value descriptions of the hierarchy members and the sales amount values, and has headings and formatting added.</p>
<pre>Total Channel
Total Customer
MAY-01

Total Sales Amounts   Product Family
-------------------   -----------------
   3,580,239.72       Desktop PCs
   2,508,560.92       Portable PCs
     891,807.30       CD/DVD
     632,376.84       Modems/Fax
     444,444.38       Memory
     312,389.39       Accessories
     291,510.88       Monitors
     222,995.92       Operating Systems
      44,479.32       Documentation
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref668"></a>
<h3 class="sect2">Using the position Method</h3>
<p><a id="sthref669"></a>You use the <code>position</code> method to produce a <code>Source</code> that has the positions of the elements of the base and has the base as an input. <a href="#CBBHFCIH">Example 6-4</a> uses the <code>position</code> method in producing a <code>Source</code> that specifies the selection of the first and last members of the levels of a hierarchy of the TIME_AWJ dimension.</p>
<p><a id="sthref670"></a><a id="sthref671"></a>In the example, <code>mdmTimeDim</code> is the <code>MdmPrimaryDimension</code> for the TIME_AWJ dimension. The example gets the level attribute and the CALENDAR_YEAR hierarchy of the dimension. It then gets <code>Source</code> objects for the attribute and the hierarchy.</p>
<p><a id="sthref672"></a>Next, the example creates an array of <code>Source</code> objects and gets a <code>List</code> of the <code>MdmHierarchyLevel</code> components of the hierarchy. It gets the <code>Source</code> object for each level and adds it to the array, and then creates a list <code>Source</code> that has the <code>Source</code> objects for the levels as element values.</p>
<p><a id="sthref673"></a>The example then produces <code>levelMembers</code>, which is a <code>Source</code> that specifies the members of the levels of the hierarchy. Because the <code>comparison</code> parameter of the join operation is the <code>Source</code> produced by <code>levelList.value()</code>, <code>levelMembers</code> has <code>levelList</code> as an input. Therefore, <code>levelMembers</code> is a <code>Source</code> that returns the members of each level, by level, when the input is matched in a join operation.</p>
<p><a id="sthref674"></a><a id="sthref675"></a>The <code>range</code> <code>Source</code> specifies a range of elements from the second element to the next to last element of a <code>Source</code>.</p>
<p><a id="sthref676"></a>The next join operation produces the <code>firstAndLast</code> <code>Source</code>. The base of the operation is <code>levelMembers</code>. The <code>joined</code> parameter is the <code>Source</code> that results from the <code>levelMembers.position()</code> method. The <code>comparison</code> parameter is the <code>range</code> <code>Source</code> and the comparison rule is <code>COMPARISON_RULE_REMOVE</code>. The value of the <code>visible</code> parameter is <code>true</code>. The <code>firstAndLast</code> <code>Source</code> therefore specifies only the first and last members of the levels because it removes all of the other members of the levels from the selection. The <code>firstAndLast</code> <code>Source</code> still has <code>levelList</code> as an input.</p>
<p>The final join operation matches the input of <code>firstAndLast</code> with <code>levelList</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CBBHFCIH"></a>Example 6-4 Selecting the First and Last Time Elements</p>
<pre>MdmAttribute mdmTimeLevelAttr = mdmTimeDim.getLevelAttribute();
MdmLevelHierarchy mdmCalHier =
  mdmTimeDim.findOrCreateLevelHierarchy(&#34;CALENDAR_YEAR&#34;);

Source levelRel = mdmTimeLevelAttr.getSource();
StringSource calHier = (StringSource) mdmCalHier.getSource();

Source[] levelSources = new Source[3];
List levels = mdmCalHier.getHierarchyLevels();
for (int i = 0; i &lt; levelSources.length; i++)
{
  levelSources[i] = ((MdmHierarchyLevel) levels.get(i)).getSource();
}
Source levelList = dp.createListSource(levelSources);
Source levelMembers =  calHier.join(levelRel, levelList.value());
Source range = dp.createRangeSource(2, levelMembers.count().minus(1)); 
Source firstAndLast = levelMembers.join(levelMembers.position(),
                                        range,
                                        Source.COMPARISON_RULE_REMOVE,
                                        true);
 
Source result = firstAndLast.join(levelList);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>result</code> <code>Source</code> has the following values, displayed as a table with column headings and formatting added. The left column names the level, the middle column is the position of the member in the level, and the right column is the local value of the member. The TOTAL_TIME level has only one member.</p>
<pre>Level       Member Position in Level  Member Value
----------  ------------------------  ------------
TOTAL_TIME               1              TOTAL
YEAR                     1              CY1998
YEAR                    10              CY2007
QUARTER                  1              CY1998.Q1
QUARTER                 40              CY2007.Q4
MONTH                    1              1998.01
MONTH                  120              2007.12
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref677"></a>
<h3 class="sect2">Using the recursiveJoin Method</h3>
<p><a id="sthref678"></a>You use the <code>recursiveJoin</code> method to produce a <code>Source</code> that has elements that are ordered hierarchically. You use the <code>recursiveJoin</code> method only with the <code>Source</code> for an <code>MdmHierarchy</code> or with a subtype of such a <code>Source</code>. The method produces a <code>Source</code> whose elements are ordered hierarchically by the parents and their children in the hierarchy.</p>
<p>Like the <code>join</code> method, you use the <code>recursiveJoin</code> method to produce a <code>Source</code> that has the elements of the base <code>Source</code> that are determined by the <code>joined</code>, <code>comparison</code>, and <code>comparisonRule</code> parameters of the method. The <code>visible</code> parameter determines whether the joined <code>Source</code> is an output of the <code>Source</code> produced by the recursive join operation.</p>
<p>The full <code>recursiveJoin</code> method has other parameters that specify the parent attribute of the hierarchy, whether the result should have the parents before or after their children, and how to order the elements of the result if the result includes children but not the parent. The <code>recursiveJoin</code> method has several signatures that are shortcuts for the full signature.</p>
<p><a href="#CBBDDAHE">Example 6-5</a> uses a <code>recursiveJoin</code> method that lists the parents first, restricts the parents to the base, and does not add the joined <code>Source</code> as an output. The example first sorts the members of the PRODUCT_PRIMARY hierarchy of the PRODUCT_AWJ dimension by hierarchical levels and then by the value of the package attribute of each member.</p>
<p><a id="sthref679"></a>In the first <code>recursiveJoin</code> method, the <code>COMPARISON_RULE_ASCENDING</code> parameter specifies that the members of the <code>prodHier</code> hierarchy be in ascending alphabetical order within each level. The <code>prodParentAttr</code> object is the <code>Source</code> for the parent attribute of the hierarchy.</p>
<p>The <code>prodPkgAttr</code> object in the second <code>recursiveJoin</code> method is the <code>Source</code> for the package attribute of the dimension. Only the members of the ITEM level have a related package attribute value. Because the members in the aggregate levels TOTAL_PRODUCT, CLASS, and FAMILY, do not have a related package, the package attribute value for members in those levels is <code>null</code>, which appears as <code>NA</code> in the results. Some of the ITEM level members do not have a related package value, so their values are <code>NA</code>, also.</p>
<p><a id="sthref680"></a>The second <code>recursiveJoin</code> method joins the package attribute values to their related hierarchy members and sorts the members hierarchically by level, and then sorts them in ascending alphabetical order in the level by the package attribute value. The <code>COMPARISON_RULE_ASCENDING_NULLS_FIRST</code> parameter specifies that members that have a <code>null</code> value appear before the other members in the same level. The example then joins the result of the method, <code>sortedHierAscending</code>, to the package attribute to produce a <code>Source</code> that has the package attribute values as element values and <code>sortedHierAscending</code> as an output.</p>
<p><a id="sthref681"></a>The third <code>recursiveJoin</code> method is the same as the second, except that the <code>COMPARISON_RULE_DESCENDING_NULLS_FIRST</code> parameter sorts the hierarchy members in descending alphabetical order in the level by package attribute value.</p>
<div class="example">
<p class="titleinexample"><a id="CBBDDAHE"></a>Example 6-5 Sorting Products Hierarchically by Attribute</p>
<pre>Source result1 = prodHier.recursiveJoin(prodDim.value(),
                                        prodHier.getDataType(),
                                        prodParentAttr,
                                        Source.COMPARISON_RULE_ASCENDING);

Source sortedHierAscending = 
  prodHier.recursiveJoin(prodPkgAttr,
                         prodPkgAttr.getDataType(),
                         prodParentAttr,
                         Source.COMPARISON_RULE_ASCENDING_NULLS_FIRST);
Source result2 = prodPkgAttr.join(sortedHierAscending);

Source sortedHierDescending = 
  prodHier.recursiveJoin(prodPkgAttr,
<a id="sthref682"></a>                         prodPkgAttr.getDataType(),
                         prodParentAttr,
                         Source.COMPARISON_RULE_DESCENDING_NULLS_FIRST);
Source result3 = prodPkgAttr.join(sortedHierDescending);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>result1</code> <code>Source</code> has the following values, displayed with a heading added. The list contains only the first seventeen values of the <code>Cursor</code>.</p>
<pre>Product Primary Hierarchy Value
-------------------------------------
PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL
PRODUCT_PRIMARY::CLASS::HRD
PRODUCT_PRIMARY::FAMILY::DISK
PRODUCT_PRIMARY::ITEM::EXT CD ROM
PRODUCT_PRIMARY::ITEM::EXT DVD
PRODUCT_PRIMARY::ITEM::INT 8X DVD
PRODUCT_PRIMARY::ITEM::INT CD ROM
PRODUCT_PRIMARY::ITEM::INT CD USB
PRODUCT_PRIMARY::ITEM::INT RW DVD
PRODUCT_PRIMARY::FAMILY::DTPC
PRODUCT_PRIMARY::ITEM::SENT FIN
PRODUCT_PRIMARY::ITEM::SENT MM
PRODUCT_PRIMARY::ITEM::SENT STD
PRODUCT_PRIMARY::FAMILY::LTPC
PRODUCT_PRIMARY::ITEM::ENVY ABM
PRODUCT_PRIMARY::ITEM::ENVY EXE
PRODUCT_PRIMARY::ITEM::ENVY STD
...
</pre>
<p>A <code>Cursor</code> for the <code>result2</code> <code>Source</code> has the following values, displayed as a table with headings added. The table contains only the first seventeen values of the <code>Cursor</code>. The left column has the member values of the hierarchy and the right column has the package attribute value for the member.</p>
<p>The ITEM level members that have a <code>null</code> value appear first, and then the other level members appear in ascending order of package value. Since the data type of the package attribute is String, the package values are in ascending alphabetical order.</p>
<pre>Product Primary Hierarchy Value        Package Attribute Value
-------------------------------------  -----------------------
PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL     NA
PRODUCT_PRIMARY::CLASS::HRD               NA
PRODUCT_PRIMARY::FAMILY::DISK             NA
PRODUCT_PRIMARY::ITEM::EXT CD ROM         NA
PRODUCT_PRIMARY::ITEM::INT 8X DVD         NA
PRODUCT_PRIMARY::ITEM::INT CD USB         NA
PRODUCT_PRIMARY::ITEM::EXT DVD            Executive
PRODUCT_PRIMARY::ITEM::INT CD ROM         Laptop Value Pack
PRODUCT_PRIMARY::ITEM::INT RW DVD         Multimedia
PRODUCT_PRIMARY::FAMILY::DTPC             NA
PRODUCT_PRIMARY::ITEM::SENT FIN           NA
PRODUCT_PRIMARY::ITEM::SENT STD           NA
PRODUCT_PRIMARY::ITEM::SENT MM            Multimedia
PRODUCT_PRIMARY::FAMILY::LTPC             NA
RODUCT_PRIMARY::ITEM::ENVY ABM            NA
PRODUCT_PRIMARY::ITEM::ENVY EXE           Executive
PRODUCT_PRIMARY::ITEM::ENVY STD           Laptop Value Pack
...
</pre>
<p>A <code>Cursor</code> for the <code>result3</code> <code>Source</code> has the following values, displayed as a table with headings added. This time the members are in descending order, alphabetically by package attribute value.</p>
<pre>Product Primary Hierarchy Value        Package Attribute Value
-------------------------------------  -----------------------
PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL     NA
PRODUCT_PRIMARY::CLASS::HRD               NA
PRODUCT_PRIMARY::FAMILY::DISK             NA
PRODUCT_PRIMARY::ITEM::EXT CD ROM         NA
PRODUCT_PRIMARY::ITEM::INT 8X DVD         NA
PRODUCT_PRIMARY::ITEM::INT CD USB         NA
PRODUCT_PRIMARY::ITEM::INT RW DVD         Multimedia
PRODUCT_PRIMARY::ITEM::INT CD ROM         Laptop Value Pack
PRODUCT_PRIMARY::ITEM::EXT DVD            Executive
PRODUCT_PRIMARY::FAMILY::DTPC             NA
PRODUCT_PRIMARY::ITEM::SENT FIN           NA
PRODUCT_PRIMARY::ITEM::SENT STD           NA
PRODUCT_PRIMARY::ITEM::SENT MM            Multimedia
PRODUCT_PRIMARY::FAMILY::LTPC             NA
PRODUCT_PRIMARY::ITEM::ENVY ABM           NA
PRODUCT_PRIMARY::ITEM::ENVY STD           Laptop Value Pack
PRODUCT_PRIMARY::ITEM::ENVY EXE           Executive
...
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref683"></a>
<h3 class="sect2">Using the value Method</h3>
<p><a id="sthref684"></a>As described in <a href="query.htm#BABIBDAB">&#34;Deriving a Source with an Input&#34;</a>, you use the <code>value</code> method to create a <code>Source</code> that has itself as an input. That relationship enables you to select a subset of elements of the <code>Source</code>, as shown in the example in <a href="#CHDCAJII">&#34;Selecting Elements of a Source&#34;</a>. You can also use the value method to reverse a relation, as shown in the example in <a href="#CHDIIBHE">&#34;Reversing a Relation&#34;</a>.</p>
<a id="CHDCAJII"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Selecting Elements of a Source</h4>
<p><a id="sthref685"></a><a id="sthref686"></a><a href="query.htm#BABBCGED">Example 5-11</a> and <a href="#CBBIEBGB">Example 6-6</a> demonstrate the selection of a subset of the elements of a <code>Source</code>. In <a href="#CBBIEBGB">Example 6-6</a>, <code>shipHier</code> is a <code>Source</code> for the SHIPMENTS hierarchy of the CUSTOMER_AWJ dimension. The <code>selectValues</code> method of <code>shipHier</code> produces <code>custSel</code>, which is a selection of some of the elements of <code>shipHier</code>. The <code>selectValues</code> method of <code>custSel</code> produces <code>custSel2</code>, which is a subset of that selection.</p>
<p>The first <code>join</code> method has <code>custSel</code> as the base and as the joined <code>Source</code>. It has <code>custSel2</code> as the comparison <code>Source</code>. The elements of the resulting <code>Source</code>, <code>result1</code>, are the Cartesian product of the base and joined <code>Source</code> objects that are specified by the comparison <code>Source</code>. The <code>result1</code> <code>Source</code> has one set of the elements of <code>custSel</code> for each element of <code>custSel</code> that is in the comparison <code>Source</code>. The <code>true</code> value of the <code>visible</code> parameter causes the joined <code>Source</code> to be an output of <code>result1</code>.</p>
<p>The second <code>join</code> method also has <code>custSel</code> as the base and <code>custSel2</code> as the comparison <code>Source</code>, but it has the <code>Source</code> returned by the <code>custSel.value()</code> method as the joined <code>Source</code>. Because <code>custSel</code> is an input of the joined <code>Source</code>, the base <code>Source</code> matches with that input. That input relationship causes the resulting <code>Source</code>, <code>result2</code>, to have only those elements of <code>custSel</code> that are also in the comparison <code>Source</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CBBIEBGB"></a>Example 6-6 Selecting a Subset of the Elements of a Source</p>
<pre>StringSource custSel = shipHier.selectValues(new String[]
                                         {&#34;SHIPMENTS::SHIP_TO::COMP WHSE SIN&#34;,
                                          &#34;SHIPMENTS::SHIP_TO::COMP WHSE LON&#34;,
                                          &#34;SHIPMENTS::SHIP_TO::COMP WHSE SJ&#34;,
                                          &#34;SHIPMENTS::SHIP_TO::COMP WHSE ATL&#34;});

Source custSel2 = custSel.selectValues(new String[]
                                         {&#34;SHIPMENTS::SHIP_TO::COMP WHSE SIN&#34;,
                                          &#34;SHIPMENTS::SHIP_TO::COMP WHSE SJ&#34;});
 
Source result1 = custSel.join(custSel, custSel2, true);
 
Source  result2 = custSel.join(custSel.value(), custSel2, true);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for <code>result1</code> has the values shown in the following table. The table has formatting and headings that are not in the <code>Cursor</code>. The left column has the values of the elements of the output of the <code>Cursor</code>. The right column has the base values of the <code>Cursor</code>.</p>
<pre>          Output Value                        result1 Value        
---------------------------------   ---------------------------------
SHIPMENTS::SHIP_TO::COMP WHSE SJ    SHIPMENTS::SHIP_TO::COMP WHSE ATL
SHIPMENTS::SHIP_TO::COMP WHSE SJ    SHIPMENTS::SHIP_TO::COMP WHSE SJ
SHIPMENTS::SHIP_TO::COMP WHSE SJ    SHIPMENTS::SHIP_TO::COMP WHSE SIN
SHIPMENTS::SHIP_TO::COMP WHSE SJ    SHIPMENTS::SHIP_TO::COMP WHSE LON
SHIPMENTS::SHIP_TO::COMP WHSE SIN   SHIPMENTS::SHIP_TO::COMP WHSE ATL
SHIPMENTS::SHIP_TO::COMP WHSE SIN   SHIPMENTS::SHIP_TO::COMP WHSE SJ
SHIPMENTS::SHIP_TO::COMP WHSE SIN   SHIPMENTS::SHIP_TO::COMP WHSE SIN
SHIPMENTS::SHIP_TO::COMP WHSE SIN   SHIPMENTS::SHIP_TO::COMP WHSE LON
</pre>
<p>A <code>Cursor</code> for <code>result2</code> has the following values, displayed as a table with headings added. The left column has the values of the elements of the output of the <code>Cursor</code>. The right column has the base values of the <code>Cursor</code>.</p>
<pre>          Output Value                        result2 Value        
---------------------------------   ---------------------------------
SHIPMENTS::SHIP_TO::COMP WHSE SJ    SHIPMENTS::SHIP_TO::COMP WHSE SJ
SHIPMENTS::SHIP_TO::COMP WHSE SIN   SHIPMENTS::SHIP_TO::COMP WHSE SIN
</pre></div>
<!-- class="sect3" -->
<a id="CHDIIBHE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Reversing a Relation</h4>
<p><a id="sthref687"></a><a id="sthref688"></a><a id="sthref689"></a>Another use of the <code>value</code> method is to reverse a relation, as shown in <a href="#CHDEIIIH">Example 6-7</a>. The example reverses the ancestor attribute relation of the CUSTOMER_AWJ dimension to produce a <code>Source</code>, <code>marketsDescendants</code>, that represents a descendants relation. The <code>marketsDescendants</code> <code>Source</code> has as an input the <code>Source</code> for the MARKETS hierarchy of the dimension. When you join <code>marketsDescendants</code> with a <code>Source</code> that matches with that input, you get a <code>Source</code> that specifies the descendants of the participating members of the hierarchy.</p>
<p>Another example of reversing a relation is <a href="#CBBGEGFA">Example 6-10</a>. It uses the <code>value</code> method in reversing the parent attribute to get the children of a parent.</p>
<p><a href="#CHDEIIIH">Example 6-7</a> first gets the <code>MdmStandardDimension</code> object for the CUSTOMER_AWJ dimension and the <code>MdmLevelHierarchy</code> object for the MARKETS hierarchy of that dimension. It gets the <code>Source</code> for the hierarchy.</p>
<p><a id="sthref690"></a>The example next gets the ancestors attribute of the dimension and the <code>Source</code> for it. The ancestors attribute relates each dimension member to the ancestors of that member.</p>
<p>To produce a <code>Source</code> that represents the descendants of each member of the dimension, the example reverses the ancestor relation by joining the <code>Source</code> for the hierarchy, <code>mktHier</code>, with the ancestors attribute, <code>ancestorsAttr</code>. The join operation uses <code>mktHier.value()</code> as the comparison <code>Source</code>, so that the <code>Source</code> returned by the join operation, <code>marketsDescendants</code>, has <code>mktHier</code> as an input. The <code>marketsDescendants</code> <code>Source</code> specifies, for each element of <code>ancestorsAttr</code>, the elements of <code>mktHier</code> that have the <code>ancestorsAttr</code> element as their ancestor. Because it has <code>mktHier</code> as an input, the <code>marketsDescendants</code> <code>Source</code> functions in the same way as an attribute that represents the descendants relationship for the hierarchy.</p>
<p>The example demonstrates this when it joins <code>mktHier</code> to <code>marketsDescendants</code> in the following line.</p>
<pre>Source selValDescendants = marketsDescendants.join(mktHier, selVal);
</pre>
<p>In the join operation, the joined <code>Source</code>, <code>mktHier</code>, matches with the input of <code>marketsDescendants</code>. The comparison <code>Source</code> is <code>selVal</code>, which specifies a single member of the hierarchy. The join operation returns <code>selValDescendants</code>, which specifies the elements of <code>marketsDescendants</code> that are the descendants of the <code>selVal</code> member. The result also includes the ancestor member itself. The <code>mktHier</code> <code>Source</code> is not an output of <code>selValDescendants</code> because the signature of the <code>join</code> method used derives a <code>Source</code> that does not have the joined <code>Source</code> as an output.</p>
<p><a id="sthref691"></a>The example next uses the full signature of the <code>join</code> method to produce <code>selValDescendantsOnly</code>, which contains only the descendants and not the ancestor value. To remove the ancestor value, the example again uses the <code>value</code> method, this time to return a <code>Source</code> that is the <code>joined</code> parameter of the join operation that returns <code>selValDescendantsOnly</code>. The comparison <code>Source</code> is <code>selVal</code>, and the comparison rule is <code>COMPARISON_RULE_REMOVE</code>.</p>
<p><a id="sthref692"></a>Finally, the example uses the <code>removeValue</code> method to produce <code>selValDescendantsOnly2</code>, which is the same as <code>selValDescendantsOnly</code>. This simply demonstrates that the <code>removeValue</code> method is a shortcut for the join operation that returned <code>selValDescendantsOnly</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDEIIIH"></a>Example 6-7 Using the value Method to Reverse a Relation</p>
<pre>MdmStandardDimension mdmCustDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;CUSTOMER_AWJ&#34;);
MdmLevelHierarchy mdmMktHier =
  mdmCustDim.findOrCreateLevelHierarchy(&#34;MARKETS&#34;);
StringSource mktHier = (StringSource)mdmMktHier.getSource();
MdmAttribute mdmAncestorsAttr = mdmCustDim.getAncestorsAttribute();
Source ancestorsAttr = mdmAncestorsAttr.getSource();

// Reverse the ancestors relation to get the descendants relation.
Source marketsDescendants = mktHier.join(ancestorsAttr, mktHier.value());

Source selVal = mktHier.selectValue(&#34;MARKETS::ACCOUNT::BUSN WRLD&#34;);

// Select the descendants of the specified hierarchy member.
StringSource selValDescendants = 
  (StringSource)marketsDescendants.join(mktHier, selVal);

// Remove the ancestor value so that only the descendants remain.
Source selValDescendantsOnly =
  selValDescendants.join(selValDescendants.value(),
                         selVal, 
                         Source.COMPARISON_RULE_REMOVE),
                         false;

// Produce the same result using the removeValue method.
Source selValDescendantsOnly2 = 
  selValDescendants.removeValue(&#34;MARKETS::ACCOUNT::BUSN WRLD&#34;);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for <code>selValDescendants</code> has the following values.</p>
<pre>MARKETS::ACCOUNT::BUSN WRLD
MARKETS::SHIP_TO::BUSN WRLD HAM
MARKETS::SHIP_TO::BUSN WRLD NAN
MARKETS::SHIP_TO::BUSN WRLD NY
MARKETS::SHIP_TO::BUSN WRLD SJ
</pre>
<p>A <code>Cursor</code> for <code>selValDescendantsOnly</code> has the following values.</p>
<pre>MARKETS::SHIP_TO::BUSN WRLD HAM
MARKETS::SHIP_TO::BUSN WRLD NAN
MARKETS::SHIP_TO::BUSN WRLD NY
MARKETS::SHIP_TO::BUSN WRLD SJ
</pre>
<p>A <code>Cursor</code> for <code>selValDescendantsOnly2</code> has the following values.</p>
<pre>MARKETS::SHIP_TO::BUSN WRLD HAM
MARKETS::SHIP_TO::BUSN WRLD NAN
MARKETS::SHIP_TO::BUSN WRLD NY
MARKETS::SHIP_TO::BUSN WRLD SJ
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1015566"></a>
<div class="sect1">
<h2 class="sect1">Using Other Source Methods</h2>
<p>Along with the methods that are various signatures of the basic methods, the <code>Source</code> class has many other methods that use combinations of the basic methods. Some methods perform selections based on a single position, such as the <code>at</code> and <code>offset</code> methods. Others operate on a range of positions, such as the <code>interval</code> method. Some perform comparisons, such as <code>eq</code> and <code>gt</code>, select one or more elements, such as <code>selectValue</code> or <code>removeValue</code>, or sort elements, such as <code>sortAscending</code> or <code>sortDescendingHierarchically</code>.</p>
<p>The subclasses of <code>Source</code> each have other specialized methods, also. For example, the <code>NumberSource</code> class has many methods that perform mathematical functions such as <code>abs</code>, <code>div</code>, and <code>cos</code>, and methods that perform aggregations, such as <code>average</code> and <code>total</code>.</p>
<p>This topic has examples that demonstrate the use of some of the <code>Source</code> methods. Some of the examples are tasks that an OLAP application typically performs.</p>
<div class="sect2"><a id="sthref693"></a>
<h3 class="sect2">Using the extract Method</h3>
<p><a id="sthref694"></a><a id="sthref695"></a>You use the <code>extract</code> method to extract the values of a <code>Source</code> that is the value of an element of another <code>Source</code>. If the elements of a <code>Source</code> have element values that are not <code>Source</code> objects, then the <code>extract</code> method operates like the <code>value</code> method.</p>
<p><a href="#CBBBGBGC">Example 6-8</a> uses the <code>extract</code> method to get the values of the <code>NumberSource</code> objects that are themselves the values of the elements of the list <code>Source</code> <code>measDim</code>. Each of the <code>NumberSource</code> objects represents a measure.</p>
<p><a id="sthref696"></a><a id="sthref697"></a>The example selects elements from <code>StringSource</code> objects for the hierarchies of the dimensions of the UNITS_CUBE_AWJ cube. The <code>cost</code>, <code>units</code>, and <code>sales</code> objects are <code>NumberSource</code> objects for the COST, UNITS, and SALES measures of the cube.</p>
<p><a id="sthref698"></a>Next, the example creates <code>measDim</code>, which is a list <code>Source</code> that has the three <code>NumberSource</code> objects as element values. It then uses the <code>extract</code> method to get the values of the <code>NumberSource</code> objects. The resulting unnamed <code>Source</code> has <code>measDim</code> as an extraction input. The first join operation has <code>measDim.extract()</code> as the base <code>Source</code>. The input of the base <code>Source</code> matches with <code>measDim</code>, which is the <code>joined</code> parameter. The example then matches the other inputs of the measures by joining the dimension selections to produce the <code>result</code> <code>Source</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CBBBGBGC"></a>Example 6-8 Using the extract Method</p>
<pre>Source prodSel = prodHier.selectValues(new String[]
                                        {&#34;PRODUCT_PRIMARY::ITEM::ENVY STD&#34;,
                                         &#34;PRODUCT_PRIMARY::ITEM::ENVY EXE&#34;,
                                         &#34;PRODUCT_PRIMARY::ITEM::ENVY ABM&#34;});
Source chanSel = chanHier.selectValue(&#34;CHANNEL_PRIMARY::CHANNEL::DIR&#34;);
Source timeSel = timeHier.selectValue(&#34;CALENDAR_YEAR::MONTH::2001.05&#34;);
Source custSel = custHier.selectValue(&#34;SHIPMENTS::TOTAL_CUSTOMER::TOTAL&#34;);
 
Source measDim = dp.createListSource(new Source[] {cost, units, sales});
 
Source result = measDim.extract().join(measDim)   // column
                                 .join(prodSel)   // row
                                 .join(timeSel)   // page
                                 .join(chanSel)   // page
                                 .join(custSel);  // page
</pre></div>
<!-- class="example" -->
<p>The following crosstab displays the values of a <code>Cursor</code> for the <code>result</code> <code>Source</code>, with headings and formatting added.</p>
<pre>SHIPMENTS::TOTAL_CUSTOMER::TOTAL
CHANNEL_PRIMARY::CHANNEL::DIR
CALENDAR_YEAR::MONTH::2001.05
 
ITEM            COST      UNITS SOLD   SALES AMOUNT
--------     ----------   ----------   -------------
ENVY ABM      73,316.10       26          77,825.54
ENVY EXE     111,588.30       37         116,470.45
ENVY STD      92,692.47       39          93,429.57
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref699"></a>
<h3 class="sect2">Creating a Cube and Pivoting Edges</h3>
<p>One typical OLAP operation is the creation of a cube, which is a multi-dimensional array of data. The data of the cube is specified by the elements of the column, row, and page edges of the cube. The data of the cube can be data from a measure that is specified by the members of the dimensions of the measure. The cube data can also be dimension members that are specified by some calculation of the measure data, such as products that have unit sales quantities greater than a specified amount.</p>
<p><a id="sthref700"></a><a id="sthref701"></a><a id="sthref702"></a><a id="sthref703"></a><a id="sthref704"></a><a id="sthref705"></a><a id="sthref706"></a><a id="sthref707"></a><a id="sthref708"></a><a id="sthref709"></a><a id="sthref710"></a><a id="sthref711"></a><a id="sthref712"></a>Most of the examples in this topic create cubes. <a href="#CBAGDGHE">Example 6-9</a> creates a cube that has the quantity of units sold as the data of the cube. The column edge values are initially from a channel dimension hierarchy, the row edge values are from a time dimension hierarchy, and the page edge values are from hierarchies for product and customer dimensions. The product and customer member values on the page edge are represented by parameterized <code>Source</code> objects.</p>
<p>The example joins the selections of the hierarchy members to the short value description attributes for the dimensions so that the results include the attribute values. The example then joins the <code>Source</code> objects derived from the hierarchies to the <code>Source</code> for the measure to produce the <code>cube</code> query. It commits the current <code>Transaction</code>, and then creates a <code>Cursor</code> for the query and displays the values.</p>
<p>After displaying the values of the <code>Cursor</code>, the example changes the value of the <code>Parameter</code> for the parameterized <code>Source</code> for the customer selection, thereby retrieving a different result set using the same <code>Cursor</code> in the same <code>Transaction</code>. The example resets the position of the <code>Cursor</code>, and displays the values of the <code>Cursor</code> again.</p>
<p>The example then pivots the column and row edges so that the column values are time members and the row values are channel members. It commits the <code>Transaction</code>, creates another <code>Cursor</code> for the query, and displays the values. It then changes the value of each <code>Parameter</code> object and displays the values of the <code>Cursor</code> again.</p>
<p>The <code>dp</code> object is the <code>DataProvider</code>. The <code>getContext</code> method gets a <code>Context11g</code> object that has a method that displays the values of the <code>Cursor</code> in a crosstab format.</p>
<div class="example">
<p class="titleinexample"><a id="CBAGDGHE"></a>Example 6-9 Creating a Cube and Pivoting the Edges</p>
<pre>// Create Parameter objects with values from the hierarchies
// of the CUSTOMER_AWJ and PRODUCT_AWJ dimensions.
StringParameter custParam =
  new StringParameter(dp, &#34;SHIPMENTS::REGION::EMEA&#34;);
StringParameter prodParam =
  new StringParameter(dp, &#34;PRODUCT_PRIMARY::FAMILY::LTPC&#34;);
                      
// Create parameterized Source objects using the Parameter objects.
Source custParamSrc = custParam.createSource();
Source prodParamSrc = prodParam.createSource();

// Select single values from the hierarchies, using the Parameter
// objects as the comparisons in the join operations.
Source paramCustSel = custHier.join(custHier.value(), custParamSrc);
Source paramProdSel = prodHier.join(prodHier.value(), prodParamSrc);

// Select members from the other dimensions of the measure.
Source timeSel = 
  timeHier.selectValues(new String[] {&#34;CALENDAR_YEAR::YEAR::CY1999&#34;
                                      &#34;CALENDAR_YEAR::YEAR::CY2000&#34;,
                                      &#34;CALENDAR_YEAR::YEAR::CY2001&#34;});
Source chanSel = 
  chanHier.selectValues(new String[] {&#34;CHANNEL_PRIMARY::CHANNEL::DIR&#34;,
                                      &#34;CHANNEL_PRIMARY::CHANNEL::CAT     &#34;,
                                      &#34;CHANNEL_PRIMARY::CHANNEL::INT&#34;});

// Join the hierarchy selections to the short description attributes
// for the dimensions.
Source columnEdge = chanSel.join(chanShortDescr);
Source rowEdge = timeSel.join(timeShortDescr);
Source page1 = paramProdSel.join(prodShortDescr);
Source page2 = paramCustSel.join(custShortDescr);

// Join the dimension selections to the measure.
Source cube = units.join(columnEdge)
                   .join(rowEdge)
                   .join(page2)
                   .join(page1);

// The following method commits the current Transaction.
getContext().commit();

// Create a Cursor for the query.
CursorManager cursorMngr = dp.createCursorManager(cube);
CompoundCursor cubeCursor = (CompoundCursor) cursorMngr.createCursor();

// Display the values of the Cursor as a crosstab.
getContext().displayCursorAsCrosstab(cubeCursor);

// Change the customer parameter value.
custParam.setValue(&#34;SHIPMENTS::REGION::AMER&#34;);

// Reset the Cursor position to 1 and display the values again.
cubeCursor.setPosition(1);
println();
getContext().displayCursorAsCrosstab(cubeCursor);

// Pivot the column and row edges.
columnEdge = timeSel.join(timeShortDescr);
rowEdge = chanSel.join(chanShortDescr);

// Join the dimension selections to the measure.
cube = units.join(columnEdge)
            .join(rowEdge))
            .join(page2)
            .join(page1);
 
// Commit the current Transaction.
getContext().commit();

// Create another Cursor.
cursorMngr = dp.createCursorManager(cube);
cubeCursor = (CompoundCursor) cursorMngr.createCursor();
getContext().displayCursorAsCrosstab(cubeCursor);

// Change the product parameter value.
prodParam.setValue(&#34;PRODUCT_PRIMARY::FAMILY::DTPC&#34;);

// Reset the Cursor position to 1
cubeCursor.setPosition(1);
println();
getContext().displayCursorAsCrosstab(cubeCursor);
</pre></div>
<!-- class="example" -->
<p>The following crosstab has the values of <code>cubeCursor</code> displayed by the first <code>displayCursorAsCrosstab</code> method.</p>
<pre>Portable PCs
Europe
 
        Catalog  Direct Sales  Internet
1999       1986            86         0
2000       1777           193        10
2001       1449           196       215
 
</pre>
<p>The following crosstab has the values of <code>cubeCursor</code> after the example changed the value of the <code>custParam</code> <code>Parameter</code> object.</p>
<pre>Portable PCs
North America

        Catalog  Direct Sales  Internet
1999       6841           385        0
2000       6457           622       35
2001       5472           696      846
</pre>
<p>The next crosstab has the values of <code>cubeCursor</code> after pivoting the column and row edges.</p>
<pre>Portable PCs
North America
 
                1999    2000    2001
Catalog         6841    6457    5472
Direct Sales     385     622     696
Internet           0      35     846
</pre>
<p>The last crosstab has the values of <code>cubeCursor</code> after changing the value of the <code>prodParam</code> <code>Parameter</code> object.</p>
<pre>Desktop PCs
North America
 
                1999    2000    2001
Catalog        14057       13210        11337
Direct Sales     793    1224    1319
Internet           0      69    1748
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref713"></a>
<h3 class="sect2">Drilling Up and Down in a Hierarchy</h3>
<p><a id="sthref714"></a><a id="sthref715"></a><a id="sthref716"></a><a id="sthref717"></a><a id="sthref718"></a><a id="sthref719"></a>Drilling up or down in a dimension hierarchy is another typical OLAP operation. <a href="#CBBGEGFA">Example 6-10</a> demonstrates getting the members of one level of a dimension hierarchy, selecting a member, and then getting the parent, children, and ancestors of the member. The example gets the children of a parent by reversing the parent relation to produce the <code>prodHierChildren</code> <code>Source</code>.</p>
<p>The example uses the following objects.</p>
<ul>
<li>
<p><code>levelSrc</code>, which is the <code>Source</code> for the FAMILY level of the PRODUCT_PRIMARY hierarchy of the PRODUCT_AWJ dimension.</p>
</li>
<li>
<p><code>prodHier</code>, which is the <code>Source</code> for the PRODUCT_PRIMARY hierarchy.</p>
</li>
<li>
<p><code>prodHierParentAttr</code>, which is the <code>Source</code> for the parent attribute of the hierarchy.</p>
</li>
<li>
<p><code>prodHierAncsAttr</code>, which is the <code>Source</code> for the ancestors attribute of the hierarchy.</p>
</li>
<li>
<p><code>prodShortLabel</code>, which is the <code>Source</code> for the short value description attribute of the PRODUCT_AWJ dimension.</p>
</li>
</ul>
<div class="example">
<p class="titleinexample"><a id="CBBGEGFA"></a>Example 6-10 Drilling in a Hierarchy</p>
<pre>int pos = 5;
// Get the element at the specified position of the level Source.
Source levelElement = levelSrc.at(pos);

// Get ancestors of the level member.
Source levelElementAncs = prodHierAncsAttr.join(prodHier, levelElement);
// Get the parent of the level member.
Source levelElementParent = prodHierParentAttr.join(prodHier, levelElement);
// Get the children of a parent.
Source prodHierChildren = prodHier.join(prodHierParentAttr, prodHier.value());

// Select the children of the level member.
Source levelElementChildren = prodHierChildren.join(prodHier, levelElement);

// Get the short value descriptions for the members of the level.
Source levelSrcWithShortDescr = prodShortLabel.join(levelSrc);

// Get the short value descriptions for the children.
Source levelElementChildrenWithShortDescr =
  prodShortLabel.join(levelElementChildren);

// Get the short value descriptions for the parents.
Source levelElementParentWithShortDescr = 
  prodShortLabel.join(prodHier, levelElementParent, true);

// Get the short value descriptions for the ancestors.
Source levelElementAncsWithShortDescr = 
  prodShortLabel.join(prodHier, levelElementAncs, true);

// Commit the current Transaction.
getContext().commit();

// Create Cursor objects and display their values.
println(&#34;Level Source element values:&#34;);
getContext().displayResult(levelSrcWithShortDescr);
println(&#34;\nLevel Source element at position &#34; + pos + &#34;:&#34;);
getContext().displayResult(levelElement);
println(&#34;\nParent of the level member:&#34;);
getContext().displayResult(levelElementParentWithShortDescr);
println(&#34;\nChildren of the level member:&#34;);
getContext().displayResult(levelElementChildrenWithShortDescr);
println(&#34;\nAncestors of the level member:&#34;);
getContext().displayResult(levelElementAncsWithShortDescr);
</pre></div>
<!-- class="example" -->
<p>The following list has the values of the <code>Cursor</code> objects created by the <code>displayResults</code> methods.</p>
<pre>Level Source element values:
PRODUCT_PRIMARY::FAMILY::ACC,Accessories
PRODUCT_PRIMARY::FAMILY::DISK,CD/DVD
PRODUCT_PRIMARY::FAMILY::DOC,Documentation
PRODUCT_PRIMARY::FAMILY::DTPC,Portable PCs
PRODUCT_PRIMARY::FAMILY::LTPC,Desktop PCs
PRODUCT_PRIMARY::FAMILY::MEM,Memory
PRODUCT_PRIMARY::FAMILY::MOD,Modems/Fax
PRODUCT_PRIMARY::FAMILY::MON,Monitors
PRODUCT_PRIMARY::FAMILY::OS,Operating Systems

Level Source element at position 5:
PRODUCT_PRIMARY::FAMILY:LTPC

Parent of the level member:
PRODUCT_PRIMARY::CLASS::HRD,Hardware
 
Children of the level member:
PRODUCT_PRIMARY::ITEM::ENVY ABM,Envoy Ambassador
PRODUCT_PRIMARY::ITEM::ENVY EXE,Envoy Executive
PRODUCT_PRIMARY::ITEM::ENVY STD,Envoy Standard

Ancestors of the level member:
PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL,Total Product
PRODUCT_PRIMARY::CLASS::HRD,Hardware
PRODUCT_PRIMARY::FAMILY::LTPC,Portable PCs
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref720"></a>
<h3 class="sect2">Sorting Hierarchically by Measure Values</h3>
<p><a id="sthref721"></a><a id="sthref722"></a><a id="sthref723"></a><a id="sthref724"></a><a href="#CBBJDIAC">Example 6-11</a> uses the <code>recursiveJoin</code> method to sort the members of the PRODUCT_PRIMARY hierarchy of the PRODUCT_AWJ dimension hierarchically in ascending order of the values of the UNITS measure. The example joins the sorted products to the short value description attribute of the dimension, and then joins the result of that operation, <code>sortedProductsShortDescr</code>, to <code>units</code>.</p>
<p>The successive <code>joinHidden</code> methods join the selections of the other dimensions of <code>units</code> to produce the <code>result</code> <code>Source</code>, which has the measure data as element values and <code>sortedProductsShortDescr</code> as an output. The example uses the <code>joinHidden</code> methods so that the other dimension selections are not outputs of the result.</p>
<p>The example uses the following objects.</p>
<ul>
<li>
<p><code>prodHier</code>, which is the <code>Source</code> for the PRODUCT_PRIMARY hierarchy.</p>
</li>
<li>
<p><code>units</code>, which is the <code>Source</code> for the UNITS measure of product units sold.</p>
</li>
<li>
<p><code>prodParentAttr</code>, which is the <code>Source</code> for the parent attribute of the PRODUCT_PRIMARY hierarchy.</p>
</li>
<li>
<p><code>prodShortDescr</code>, which is the <code>Source</code> for the short value description attribute of the PRODUCT_AWJ dimension.</p>
</li>
<li>
<p><code>custSel</code>, which is a <code>Source</code> that specifies a single member of the SHIPMENTS hierarchy of the CUSTOMER_AWJ dimension. The member is <code>SHIPMENTS::TOTAL_CUSTOMER::TOTAL</code>, which is the total for all customers.</p>
</li>
<li>
<p><code>chanSel</code>, which is a <code>Source</code> that specifies a single member of the CHANNEL_PRIMARY hierarchy of the CHANNEL_AWJ dimension. The member value is <code>CHANNEL_PRIMARY::CHANNEL::DIR</code>, which is the direct sales channel.</p>
</li>
<li>
<p><code>timeSel</code>, which is a <code>Source</code> that specifies a single member of the CALENDAR_YEAR hierarchy of the TIME_AWJ dimension. The member is <code>CALENDAR_YEAR::YEAR::CY2001</code>, which is the year 2001.</p>
</li>
</ul>
<div class="example">
<p class="titleinexample"><a id="CBBJDIAC"></a>Example 6-11 Hierarchical Sorting by Measure Value</p>
<pre>Source sortedProduct =
  prodHier.recursiveJoin(units,
<a id="sthref725"></a>                         units.getDataType(),
                         prodParentAttr,
                         Source.COMPARISON_RULE_ASCENDING,
                         true,  // Parents first
                         true); // Restrict parents to base
 
Source sortedProductShortDescr = prodShortDescr.join(sortedProduct);
Source result = units.join(sortedProductShortDescr)
                     .joinHidden(custSel)
                     .joinHidden(chanSel)
                     .joinHidden(timeSel);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>result</code> <code>Source</code> has the following values, displayed in a table with column headings and formatting added. The left column has the name of the level in the <code>PRODUCT_PRIMARY</code> hierarchy. The next column to the right has the product identification value, and the next column has the short value description of the product. The rightmost column has the number of units of the product sold to all customers in the year 2001 through the direct sales channel.</p>
<p>The table contains only the first nine and the last eleven values of the <code>Cursor</code>, plus the Software/Other class value. The product values are listed hierarchically and in ascending order by units sold. The Hardware class appears before the Software/Other class because the Software/Other class has a greater number of units sold. In the Hardware class, the Portable PCs family sold the fewest units, so it appears first. In the Software/Other class, the Accessories family has the greatest number of units sold, so it appears last.</p>
<pre>Product Level      ID                 Description           Units Sold
-------------  ------------   ----------------------------- ----------
TOTAL_PRODUCT  TOTAL          Total Product                     43,785
CLASS          HRD            Hardware                          16,543
FAMILY         LTPC           Portable PCs                       1,192
ITEM           ENVY ABM       Envoy Ambassador                     330
ITEM           ENVY EXE       Envoy Executive                      385
ITEM           ENVY STD       Envoy Standard                       477
FAMILY         MON            Monitors                           1,193
ITEM           19 SVGA        Monitor- 19&#34; Super VGA               207
ITEM           17 SVGA        Monitor- 17&#34;Super VGA                986
...
CLASS          SFT            Software/Other)                   27,242
...
FAMILY         ACC            Accessories                       18,949
ITEM           ENVY EXT KBD   Envoy External Keyboard              146
ITEM           EXT KBD        External 101-key keyboard            678
ITEM           MM SPKR 5      Multimedia speakers- 5&#34; cones        717
ITEM           STD MOUSE      Standard Mouse                       868
ITEM           MM SPKR 3      Multimedia speakers- 3&#34; cones      1,120
ITEM           144MB DISK     1.44MB External 3.5&#34; Diskette      1,145
TEM            KBRD REST      Keyboard Wrist Rest                2,231
ITEM           LT CASE        Laptop carrying case               3,704
ITEM           DLX MOUSE      Deluxe Mouse                       3,884
ITEM           MOUSE PAD      Mouse Pad                          4,456
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref726"></a>
<h3 class="sect2">Using NumberSource Methods To Compute the Share of Units Sold</h3>
<p><a id="sthref727"></a><a id="sthref728"></a><a id="sthref729"></a><a id="sthref730"></a><a id="sthref731"></a><a href="#CBBDDCAH">Example 6-12</a> uses the <code>NumberSource</code> methods <code>div</code> and <code>times</code> to produce a <code>Source</code> that specifies the share that the Desktop PC and Portable PC families have of the total quantity of product units sold for the selected time, customer, and channel values. The example first uses the <code>selectValue</code> method of <code>prodHier</code>, which is the <code>Source</code> for a hierarchy of the PRODUCT_AWJ dimension, to produce <code>totalProds</code>, which specifies a single element with the value <code>PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL</code>, which is the highest aggregate level of the hierarchy.</p>
<p><a id="sthref732"></a>The <code>joinHidden</code> method of the <code>NumberSource</code> <code>units</code> produces <code>totalUnits</code>, which specifies the UNITS measure values at the total product level, without having <code>totalProds</code> appear as an output of <code>totalUnits</code>. The <code>div</code> method of <code>units</code> then produces a <code>Source</code> that represents each units sold value divided by the total quantity of units sold. The <code>times</code> method then multiplies the result of that <code>div</code> operation by 100 to produce <code>productShare</code>, which represents the percentage, or share, that a product member has of the total quantity of units sold. The <code>productShare</code> <code>Source</code> has the inputs of the <code>units</code> measure as inputs.</p>
<p>The <code>prodFamilies</code> object is the <code>Source</code> for the FAMILY level of the PRODUCT_PRIMARY hierarchy. The <code>join</code> method of <code>productShare</code>, with <code>prodFamilies</code> as the joined <code>Source</code>, produces a <code>Source</code> that specifies the share that each product family has of the total quantity of products sold.</p>
<p>The <code>custSel</code>, <code>chanSel</code>, and <code>timeSel</code> <code>Source</code> objects are selections of single members of hierarchies of the CUSTOMER_AWJ, CHANNEL_AWJ, and TIME_AWJ dimensions. The remaining <code>join</code> methods match those <code>Source</code> objects to the other inputs of <code>productShare</code>, to produce <code>result</code>. The <code>join(Source joined, String comparison)</code> signature of the <code>join</code> method produces a <code>Source</code> that does not have the joined <code>Source</code> as an output.</p>
<p>The <code>result</code> <code>Source</code> specifies the share for each product family of the total quantity of products sold to all customers through the direct sales channel in the year 2001.</p>
<div class="example">
<p class="titleinexample"><a id="CBBDDCAH"></a>Example 6-12 Getting the Share of Units Sold</p>
<pre>Source totalProds =
  prodHier.selectValue(&#34;PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL&#34;);
NumberSource totalUnits = (NumberSource) units.joinHidden(totalProds);
Source productShare = units.div(totalUnits).times(100);
Source result = 
  productShare.join(prodFamilies)
              .join(timeHier, &#34;CALENDAR_YEAR::YEAR::CY2001&#34;)
              .join(chanHier, &#34;CHANNEL_PRIMARY::CHANNEL::DIR&#34;)
              .join(custHier, &#34;SHIPMENTS::TOTAL_CUSTOMER::TOTAL&#34;);
Source sortedResult = result.sortAscending();
</pre>
<p>A <code>Cursor</code> for the <code>sortedResult</code> <code>Source</code> has the following values, displayed in a table with column headings and formatting added. The left column has the product family value and the right column has the share of the total number of units sold for the product family to all customers through the direct sales channel in the year 2001.</p>
<pre>Product Family Member          Share of Total Units Sold
-----------------------------  -------------------------
PRODUCT_PRIMARY::FAMILY::LTPC             2.72%
PRODUCT_PRIMARY::FAMILY::MON              2.73%
PRODUCT_PRIMARY::FAMILY::MEM              3.57%
PRODUCT_PRIMARY::FAMILY::DTPC             5.13%
PRODUCT_PRIMARY::FAMILY::DOC              6.4%
PRODUCT_PRIMARY::FAMILY::DISK            11.71%
PRODUCT_PRIMARY::FAMILY::MOD             11.92%
PRODUCT_PRIMARY::FAMILY::OS              12.54%
PRODUCT_PRIMARY::FAMILY::ACC             43.28%
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref733"></a>
<h3 class="sect2">Selecting Based on Time Series Operations</h3>
<p><a id="sthref734"></a><a id="sthref735"></a><a id="sthref736"></a><a id="sthref737"></a><a id="sthref738"></a>This topic has two examples of using methods that operate on a series of elements of the <code>MdmLevelHierarchy</code> for the CALENDAR_YEAR hierarchy of the TIME_AWJ dimension. <a href="#CBBHGDGG">Example 6-13</a> uses the <code>lag</code> method of <code>unitPrice</code>, which is the <code>Source</code> for the UNIT_PRICE measure, to produce <code>unitPriceLag4</code>, which specifies, for each element of <code>unitPrice</code> that matches with a member of the hierarchy, the element of <code>unitPrice</code> that matches with the hierarchy member that is four time periods earlier at the same level in the hierarchy.</p>
<p>In the example, <code>dp</code> is the <code>DataProvider</code>. The <code>createListSource</code> method creates <code>measuresDim</code>, which has the <code>unitPrice</code> and <code>unitPriceLag4</code> <code>Source</code> objects as element values. The <code>extract</code> method of <code>measuresDim</code> gets the values of the elements of <code>measuresDim</code>. The <code>Source</code> produced by the <code>extract</code> method has <code>measuresDim</code> as an extraction input. The first <code>join</code> method matches a <code>Source</code>, <code>measuresDim</code>, to the input of the <code>Source</code> returned by the <code>extract</code> method.</p>
<p>The <code>unitPrice</code> and <code>unitPriceLag4</code> measures both have the <code>Source</code> objects for the PRODUCT_AWJ and TIME_AWJ dimensions as inputs. The second <code>join</code> method matches <code>quarterLevel</code>, which is a <code>Source</code> for the QUARTER level of the CALENDAR_YEAR hierarchy of the TIME_AWJ dimension, with the TIME_AWJ dimension input of the measure, and makes it an output of the resulting <code>Source</code>.</p>
<p><a id="sthref739"></a>The <code>joinHidden</code> method matches <code>prodSel</code> with the PRODUCT_AWJ dimension input of the measure, and does not make <code>prodSel</code> an output of the resulting <code>Source</code>. The <code>prodSel</code> <code>Source</code> specifies the single hierarchy member <code>PRODUCT_PRIMARY::FAMILY::DTPC</code>, which is Desktop PCs.</p>
<p>The <code>lagResult</code> <code>Source</code> specifies the aggregate unit prices for the Desktop PC product family for each quarter and the quarter that is four quarters earlier.</p>
<div class="example">
<p class="titleinexample"><a id="CBBHGDGG"></a>Example 6-13 Using the Lag Method</p>
<pre>NumberSource unitPriceLag4 = unitPrice.lag(mdmCalHier, 4);
Source measuresDim = dp.createListSource(new Source[] {unitPrice, 
                                                       unitPriceLag4});
 
Source lagResult = measuresDim.extract()
                              .join(measuresDim)
                              .join(quarterLevel)
                              .joinHidden(prodSel);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>lagResult</code> <code>Source</code> has the following values, displayed in a table with column headings and formatting added. The left column has the quarter, the middle column has the total of the unit prices for the members of the Desktop PC family for that quarter, and the right column has the total of the unit prices for the quarter that is four quarters earlier. The first four values in the right column are <code>NA</code> because quarter 5, Q1-98, is the first quarter in the CALENDAR_YEAR hierarchy. The table includes only the first eight quarters.</p>
<pre>                                                    Unit Price  
Quarter                            Unit Price  Four Quarters Before
---------------------------------  ----------  --------------------
CALENDAR_YEAR::QUARTER::CY1998.Q1    2687.54                NA
CALENDAR_YEAR::QUARTER::CY1998.Q2    2704.48                NA
CALENDAR_YEAR::QUARTER::CY1998.Q3    2673.27                NA
CALENDAR_YEAR::QUARTER::CY1998.Q4    2587.76                NA
CALENDAR_YEAR::QUARTER::CY1999.Q1    2394.79           2687.54
CALENDAR_YEAR::QUARTER::CY1999.Q2    2337.18           2704.48
CALENDAR_YEAR::QUARTER::CY1999.Q3    2348.39           2673.27
CALENDAR_YEAR::QUARTER::CY1999.Q4    2177.89           2587.76
...
</pre>
<p><a id="sthref740"></a><a id="sthref741"></a><a id="sthref742"></a><a href="#CBBFEDFJ">Example 6-14</a> uses the same <code>unitPrice</code>, <code>mdmCalHier</code>, <code>quarterLevel</code>, and <code>prodSel</code> objects as <a href="#CBBHGDGG">Example 6-13</a>, but it uses the <code>unitPriceMovingTotal</code> measure as the second element of <code>measuresDim</code>. The <code>unitPriceMovingTotal</code> <code>Source</code> is produced by the <code>movingTotal</code> method of <code>unitPrice</code>. That method provides <code>mdmCalHier</code>, which is the <code>MdmLevelHierarchy</code> for the CALENDAR_YEAR hierarchy of the TIME_AWJ dimension, as the <code>dimension</code> parameter and the integers <code>0</code> and <code>3</code> as the starting and ending offset values.</p>
<p>The <code>movingTotalResult</code> <code>Source</code> specifies, for each quarter, the aggregate of the unit prices for the members of the Desktop PC family for that quarter and the total of that unit price plus the unit prices for the next three quarters.</p>
<div class="example">
<p class="titleinexample"><a id="CBBFEDFJ"></a>Example 6-14 Using the movingTotal Method</p>
<pre>NumberSource unitPriceMovingTotal = 
  unitPrice.movingTotal(mdmCalHier, 0, 3);
 
Source measuresDim =  
  dp.createListSource(new Source[]{unitPrice, unitPriceMovingTotal});

Source movingTotalResult = measuresDim.extract()
                                      .join(measuresDim)
                                      .join(quarterLevel)
                                      .joinHidden(prodSel);     
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>movingTotalResult</code> <code>Source</code> has the following values, displayed in a table with column headings and formatting added. The left column has the quarter, the middle column has the total of the unit prices for the members of the Desktop PC family for that quarter, and the left column has the total of the unit prices for that quarter and the next three quarters. The table includes only the first eight quarters.</p>
<pre>                                                   Unit Price Moving Total 
Quarter                             Unit Price  Current Plus Next Three Periods
---------------------------------   ----------  -------------------------------
CALENDAR_YEAR::QUARTER::CY1998.Q1     2687.54              10653.05
CALENDAR_YEAR::QUARTER::CY1998.Q2     2704.48              10360.30
CALENDAR_YEAR::QUARTER::CY1998.Q3     2673.27               9993.00
CALENDAR_YEAR::QUARTER::CY1998.Q4     2587.76               9668.12
CALENDAR_YEAR::QUARTER::CY1999.Q1     2394.79               9258.25
CALENDAR_YEAR::QUARTER::CY1999.Q2     2337.18               8911.87
CALENDAR_YEAR::QUARTER::CY1999.Q3     2348.39               8626.48
CALENDAR_YEAR::QUARTER::CY1999.Q4     2177.89               8291.37
...
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref743"></a>
<h3 class="sect2">Selecting a Set of Elements Using Parameterized Source Objects</h3>
<p><a id="sthref744"></a><a id="sthref745"></a><a id="sthref746"></a><a id="sthref747"></a><a id="sthref748"></a><a id="sthref749"></a><a id="sthref750"></a><a href="#CBBCFEBC">Example 6-15</a> uses <code>NumberParameter</code> objects to create parameterized <code>Source</code> objects. Those objects are the <code>bottom</code> and <code>top</code> parameters for the <code>interval</code> method of <code>prodHier</code>. That method returns <code>paramProdSelInterval</code>, which is a <code>Source</code> that specifies the set of elements of <code>prodHier</code> from the <code>bottom</code> to the <code>top</code> positions of the hierarchy.</p>
<p>The elements of the product <code>Source</code> specify the elements of the <code>units</code> measure that appear in the <code>result</code> <code>Source</code>. By changing the values of the <code>Parameter</code> objects, you can select a different set of units sold values using the same <code>Cursor</code> and without having to produce new <code>Source</code> and <code>Cursor</code> objects.</p>
<p>The example uses the following objects.</p>
<ul>
<li>
<p><code>dp</code>, which is the <code>DataProvider</code> for the session.</p>
</li>
<li>
<p><code>prodHier</code>, which is the <code>Source</code> for the PRODUCT_PRIMARY hierarchy of the PRODUCT_AWJ dimension.</p>
</li>
<li>
<p><code>prodShortDescr</code>, which is the <code>Source</code> for the short value description attribute of the PRODUCT_AWJ dimension.</p>
</li>
<li>
<p><code>units</code>, which is the <code>Source</code> for the UNITS measure of product units sold.</p>
</li>
<li>
<p><code>chanHier</code>, which is the <code>Source</code> for the CHANNEL_PRIMARY hierarchy of the CHANNEL_AWJ dimension.</p>
</li>
<li>
<p><code>calHier</code>, which is the <code>Source</code> for the CALENDAR_YEAR hierarchy of the TIME_AWJ dimension.</p>
</li>
<li>
<p><code>shipHier</code>, which is the <code>Source</code> for the SHIPMENTS hierarchy of the CUSTOMER_AWJ dimension.</p>
</li>
<li>
<p>The <code>Context11g</code> object that is returned by the <code>getContext</code> method. The <code>Context11g</code> has methods that commit the current <code>Transaction</code>, that create a <code>Cursor</code> for a <code>Source</code>, that display text, and that display the values of the <code>Cursor</code>.</p>
</li>
</ul>
<p><a id="sthref751"></a><a id="sthref752"></a>The <code>join</code> method of <code>prodShortDescr</code> gets the short value descriptions for the elements of <code>paramProdSelInterval</code>. The next four <code>join</code> methods match <code>Source</code> objects with the inputs of the <code>units</code> measure. The example creates a <code>Cursor</code> and displays the result set of the query. Next, the <code>setPosition</code> method of <code>resultCursor</code> sets the position of the <code>Cursor</code> back to the first element.</p>
<p>The <code>setValue</code> methods of the <code>NumberParameter</code> objects change the values of those objects, which changes the selection of elements of the product <code>Source</code> that are specified by the query. The example then displays the values of the <code>Cursor</code> again.</p>
<div class="example">
<p class="titleinexample"><a id="CBBCFEBC"></a>Example 6-15 Selecting a Range With NumberParameter Objects</p>
<pre>NumberParameter startParam = new NumberParameter(dp, 1);
NumberParameter endParam = new NumberParameter(dp, 6);
 
NumberSource startParamSrc = (NumberSource)startParam.createSource();
NumberSource endParamSrc = (NumberSource)endParam.createSource();

Source paramProdSelInterval = 
  prodHier.interval(startParamSrc, endParamSrc);
Source paramProdSelIntervalShortDescr =
  prodShortDescr.join(paramProdSelInterval);
 
NumberSource result =
  (NumberSource)units.join(chanHier, &#34;CHANNEL_PRIMARY::CHANNEL::INT&#34;)
                     .join(calHier, &#34;CALENDAR_YEAR::YEAR::CY2001&#34;)
                     .join(shipHier, &#34;SHIPMENTS::TOTAL_CUSTOMER::TOTAL&#34;)
                     .join(paramProdSelIntervalShortDescr);
<a id="sthref753"></a> 
// Commit the current transaction.
getContext().commit();
 
CursorManager  cursorMngr = dp.createCursorManager(result);
Cursor resultCursor = cursorMngr.createCursor();
 
getContext().displayCursor(resultCursor);
 
//Reset the Cursor position to 1.
resultCursor.setPosition(1);
 
// Change the value of the parameterized Source.
startParam.setValue(7);
endParam.setValue(12);

// Display the results again.
getContext().displayCursor(resultsCursor);
</pre></div>
<!-- class="example" -->
<p>The following table displays the values of <code>resultCursor</code>, with column headings and formatting added. The left column has the product hierarchy members, the middle column has the short value description, and the right column has the quantity of units sold.</p>
<pre>              Product                       Description        Units Sold
-------------------------------------  ----------------------  ----------
PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL   Total Product             55,872
PRODUCT_PRIMARY::CLASS::HRD             Hardware                  21,301
PRODUCT_PRIMARY::FAMILY::DISK           Memory                     6,634
PRODUCT_PRIMARY::ITEM::EXT CD ROM       External 48X CD-ROM          136
PRODUCT_PRIMARY::ITEM::EXT DVD          External - DVD-RW - 8X     1,526
PRODUCT_PRIMARY::ITEM::INT 8X DVD       Internal - DVD-RW - 8X     1,543
 
              Product                       Description        Units Sold
-------------------------------------  ----------------------  ----------
PRODUCT_PRIMARY::ITEM::INT CD ROM       Internal 48X CD-ROM          380
PRODUCT_PRIMARY::ITEM::INT CD USB       Internal 48X CD-ROM USB      162
PRODUCT_PRIMARY::ITEM::INT RW DVD       Internal - DVD-RW - 6X     2,887
PRODUCT_PRIMARY::FAMILY::DTPC           Desktop PCs                2,982
PRODUCT_PRIMARY::ITEM::SENT FIN         Sentinel Financial         1,015
PRODUCT_PRIMARY::ITEM::SENT MM          Sentinel Multimedia          875
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4769">
<tr>
<td class="cellalignment4776">
<table class="cellalignment4774">
<tr>
<td class="cellalignment4773"><a href="query.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4773"><a href="transact.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4778">
<table class="cellalignment4772">
<tr>
<td class="cellalignment4773"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4773"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4773"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4773"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4773"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4773"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>