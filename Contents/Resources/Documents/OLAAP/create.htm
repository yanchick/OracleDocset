<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79241"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Creating%20Metadata%20and%20Analytic%20Workspaces"></a><title>Creating Metadata and Analytic Workspaces</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T7:32:41Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Java API Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17707-05"/>
<meta name="dcterms.isVersionOf" content="OLAAP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="discover.htm" title="Previous" type="text/html"/>
<link rel="Next" href="query.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17707-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/19</span> <!-- End Header -->
<div class="chapter"><a id="g1008851"></a> <a id="i1005988"></a>
<h1 class="chapter"><span class="secnum">4</span> Creating Metadata and Analytic Workspaces</h1>
<p>This chapter describes how to create new metadata objects and map them to relational structures or expressions. It describes how to export and import the definitions of the metadata objects to XML templates. It also describes how to associate the objects with an analytic workspace, and how to build the analytic workspace.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#BABHHCGG">Overview of Creating and Mapping Metadata</a></p>
</li>
<li>
<p><a href="#BABHAEGI">Creating an Analytic Workspace</a></p>
</li>
<li>
<p><a href="#BABHEACF">Creating the Dimensions, Levels, and Hierarchies</a></p>
</li>
<li>
<p><a href="#BABIHGJD">Creating Attributes</a></p>
</li>
<li>
<p><a href="#BABJACHB">Creating Cubes and Measures</a></p>
</li>
<li>
<p><a href="#BABFFGIG">Committing Transactions</a></p>
</li>
<li>
<p><a href="#BABJCHBA">Exporting and Importing XML Templates</a></p>
</li>
<li>
<p><a href="#BABFGBDD">Building an Analytic Workspace</a></p>
</li>
</ul>
<a id="BABHHCGG"></a>
<div class="sect1">
<h2 class="sect1">Overview of Creating and Mapping Metadata</h2>
<p><a id="sthref403"></a><a id="sthref404"></a>The OLAP Java API provides the ability to create persistent metadata objects. The top-level metadata objects exist in the data dictionary of the Oracle Database instance. The API also provides the ability to create transient metadata objects that exist only for the duration of the session. An application can use both types of metadata objects to create queries that retrieve or otherwise use the data in the data store.</p>
<p>Before an OLAP Java API application can create metadata objects, a database administrator must have prepared the Oracle Database instance. The DBA must have set up permanent and temporary tablespaces in the database to support the creation of Oracle OLAP metadata objects and must have granted the privileges that allow the user of the session to create and manage objects. For information on preparing an Oracle Database instance, see <a class="olink OLAUG200" href="../OLAUG/start.htm#OLAUG200"><span class="italic">Oracle OLAP User&#39;s Guide</span></a>.</p>
<p>A dimensional metadata model typically includes the objects described in <a href="metadata.htm#BABHIFDH">Chapter 2, &#34;Understanding OLAP Java API Metadata&#34;</a>. For detailed information on designing a dimensional metadata model, see <a class="olink OLAUG300" href="../OLAUG/cubes.htm#OLAUG300"><span class="italic">Oracle OLAP User&#39;s Guide</span></a>.</p>
<p>You implement the dimensional model by creating OLAP Java API metadata objects. You use classes in the <code>oracle.olapi.metadata.mapping</code> package to map the metadata objects to relational source objects and to build analytic workspaces. You use classes in the <code>oracle.olapi.syntax</code> package to specify <code>Expression</code> objects that you use in mapping the metadata. You use classes in the <code>oracle.olapi.metadata.deployment</code> package to deploy the metadata objects in an analytic workspace or in a relational database (ROLAP) organization.</p>
<p>The basic steps for implementing the dimensional model as OLAP Java API objects in an analytic workspace are the following:</p>
<ol>
<li>
<p>Create an <code>AW</code> object and <code>MdmPrimaryDimension</code> and <code>MdmCube</code> objects.</p>
</li>
<li>
<p>Deploy the <code>MdmPrimaryDimension</code> and <code>MdmCube</code> objects to the <code>AW</code>.</p>
</li>
<li>
<p>Create <code>MdmDimensionLevel</code>, <code>MdmHierarchy</code>, and <code>MdmAttribute</code> objects for each <code>MdmPrimaryDimension</code>, create <code>MdmHierarchyLevel</code> objects to associate <code>MdmDimensionLevel</code> objects with an <code>MdmHierarchy</code>, and create the <code>MdmMeasure</code> and related objects for the <code>MdmCube</code> objects.</p>
</li>
<li>
<p>Map the metadata objects to the relational sources of the base data.</p>
</li>
<li>
<p>Commit the <code>Transaction</code>, which creates persistent objects in the database.</p>
</li>
<li>
<p>Load data into the objects from the relational sources by building the analytic workspace.</p>
</li>
</ol>
<p>The following topics describe these steps. The examples in this chapter are from the <code>CreateMetadataAndAW.java</code> example program. That program creates some of the same metadata objects as the <code>CreateAndBuildAW.java</code> and <code>SpecifyAWValues.java</code> example programs. The <code>CreateMetadataAndAW</code> program also exports the analytic workspace to an XML template.</p>
</div>
<!-- class="sect1" -->
<a id="BABHAEGI"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating an Analytic Workspace</h2>
<p><a id="sthref405"></a><a id="sthref406"></a><a id="sthref407"></a>An analytic workspace is a container for dimensional objects. It is represented by the <code>AW</code> class in the <code>oracle.olapi.metadata.deployment</code> package. An analytic workspace is owned by an <code>MdmDatabaseSchema</code>.</p>
<p><a id="sthref408"></a><a id="sthref409"></a><a href="#BABGHIJF">Example 4-1</a> demonstrates getting the <code>MdmDatabaseSchema</code> for the GLOBAL user and creating an <code>AW</code>. For an example that gets the <code>MdmRootSchema</code>, see <a href="discover.htm#g1015325">Chapter 3</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABGHIJF"></a>Example 4-1 Creating an AW</p>
<pre>private void createAW(MdmRootSchema mdmRootSchema)
{
  MdmDatabaseSchema mdmDBSchema = mdmRootSchema.getDatabaseSchema(&#34;GLOBAL&#34;);
  aw = mdmDBSchema.findOrCreateAW(&#34;GLOBAL_AWJ&#34;);
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABHEACF"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating the Dimensions, Levels, and Hierarchies</h2>
<p><a id="sthref410"></a><a id="sthref411"></a><a id="sthref412"></a><a id="sthref413"></a>A dimension is a list of unique values that identify and categorize data. Dimensions form the edges of a cube and identify the values in the measures of the cube. A dimension can have one or more levels that categorize the dimension members. It can have one or more hierarchies that further categorize the members. A dimension can also have no levels or hierarchies. However, a dimension must have one or more levels before Oracle OLAP can create a materialized view for it.</p>
<p>A dimension also has attributes that contain information about dimension members. For descriptions of creating attributes, see <a href="#BABIHGJD">&#34;Creating Attributes&#34;</a>.</p>
<p>This topic describes how to create objects that represent a dimension and the levels and hierarchies of a dimension.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref414"></a>
<h3 class="sect2">Creating and Mapping Dimensions</h3>
<p><a id="sthref415"></a><a id="sthref416"></a><a id="sthref417"></a><a id="sthref418"></a>An OLAP dimension is represented by the <code>MdmPrimaryDimension</code> class. A dimension is owned by an <code>MdmDatabaseSchema</code>. You create a dimension with the <code>findOrCreateTimeDimension</code> or the <code>findOrCreateStandardDimension</code> method of the <code>MdmDatabaseSchema</code>. You can map a dimension that has no levels to a relational data source by creating a <code>MemberListMap</code> for the dimension.</p>
<p><a id="sthref419"></a><a id="sthref420"></a><a href="#BABEACAJ">Example 4-2</a> creates a standard dimension that has the name CHANNEL_AWJ. The example creates an <code>AWPrimaryDimensionOrganization</code> object to deploy the dimension in an analytic workspace. The <code>mdmDBSchema</code> and <code>aw</code> objects are created by <a href="#BABGHIJF">Example 4-1</a>. The last three lines call the methods of <a href="#BABDJEDC">Example 4-3</a>, <a href="#BABHDHDG">Example 4-4</a>, and <a href="#BABDCDHH">Example 4-9</a>, respectively.</p>
<div class="example">
<p class="titleinexample"><a id="BABEACAJ"></a>Example 4-2 Creating and Deploying an MdmStandardDimension</p>
<pre>MdmStandardDimension mdmChanDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;CHANNEL_AWJ&#34;);
AWPrimaryDimensionOrganization awChanDimOrg = 
  mdmChanDim.findOrCreateAWPrimaryDimensionOrganization(aw);

createAndMapDimensionLevels(mdmChanDim);
createAndMapHierarchies();
commit(mdmChanDim);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref421"></a>
<h3 class="sect2">Creating and Mapping Dimension Levels</h3>
<p><a id="sthref422"></a><a id="sthref423"></a><a id="sthref424"></a><a id="sthref425"></a><a id="sthref426"></a><a id="sthref427"></a><a id="sthref428"></a>An <code>MdmDimensionLevel</code> represents the members of a dimension that are at the same level. Typically, the members of a level are in a column in a dimension table in the relational source. A <code>MemberListMap</code> associates the <code>MdmDimensionLevel</code> with the relational source.</p>
<p><a id="sthref429"></a><a id="sthref430"></a><a id="sthref431"></a><a id="sthref432"></a><a id="sthref433"></a><a id="sthref434"></a><a id="sthref435"></a><a id="sthref436"></a><a id="sthref437"></a><a href="#BABDJEDC">Example 4-3</a> creates two <code>MdmDimensionLevel</code> objects for the CHANNEL_AWJ dimension and maps the dimension levels to the key columns of the GLOBAL.CHANNEL_DIM table. The example also maps the long description attributes for the dimension levels to columns of that table. The long description attribute, <code>chanLongDescAttr</code>, is created by <a href="#BABEHBJF">Example 4-6</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABDJEDC"></a>Example 4-3 Creating and Mapping an MdmDimensionLevel</p>
<pre>private ArrayList&lt;MdmDimensionLevel&gt; dimLevelList = new ArrayList();
private ArrayList&lt;String&gt; dimLevelNames = new ArrayList();
private ArrayList&lt;String&gt; keyColumns = new ArrayList();
private ArrayList&lt;String&gt; lDescColNames = new ArrayList();

private void createAndMapDimensionLevels(MdmPrimaryDimension mdmChanDim)
{
  dimLevelNames.add(&#34;TOTAL_CHANNEL&#34;);
  dimLevelNames.add(&#34;CHANNEL&#34;);

  keyColumns.add(&#34;GLOBAL.CHANNEL_DIM.TOTAL_ID&#34;);
  keyColumns.add(&#34;GLOBAL.CHANNEL_DIM.CHANNEL_ID&#34;);

  lDescColNames.add(&#34;GLOBAL.CHANNEL_DIM.TOTAL_DSC&#34;);
  lDescColNames.add(&#34;GLOBAL.CHANNEL_DIM.CHANNEL_DSC&#34;);

  // Create the MdmDimensionLevel and MemberListMap objects.
  int i = 0;
  for(String dimLevelName : dimLevelNames)
  {
<a id="sthref438"></a>    MdmDimensionLevel mdmDimLevel = 
      mdmChanDim.findOrCreateDimensionLevel(dimLevelNames.get(i));
    dimLevelList.add(mdmDimLevel);

    // Create a MemberListMap for the dimension level.
    MemberListMap mdmDimLevelMemListMap = 
      mdmDimLevel.findOrCreateMemberListMap();
    ColumnExpression keyColExp = 
      (ColumnExpression)SyntaxObject.fromSyntax(keyColumns.get(i),
                                                metadataProvider);
    mdmDimLevelMemListMap.setKeyExpression(keyColExp);
    mdmDimLevelMemListMap.setQuery(keyColExp.getQuery());

    // Create an attribute map for the Long Description attribute.
<a id="sthref439"></a>    AttributeMap attrMapLong = 
      mdmDimLevelMemListMap.findOrCreateAttributeMap(chanLongDescAttr);

    // Create an expression for the attribute map.
    Expression lDescColExp = 
      (Expression)SyntaxObject.fromSyntax(lDescColNames.get(i),
                                          metadataProvider);
    attrMapLong.setExpression(lDescColExp);
    i++;
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CACIIAII"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating and Mapping Hierarchies</h3>
<p><a id="sthref440"></a><a id="sthref441"></a><a id="sthref442"></a><a id="sthref443"></a><a id="sthref444"></a><a id="sthref445"></a><a id="sthref446"></a>An <code>MdmHierarchy</code> represents a hierarchy in the dimensional object model. An <code>MdmHierarchy</code> can be an instance of the <code>MdmLevelHierarchy</code> or the <code>MdmValueHierarchy</code> class. An <code>MdmLevelHierarchy</code> has an ordered list of <code>MdmHierarchyLevel</code> objects that relate <code>MdmDimensionLevel</code> objects to the hierarchy.</p>
<a id="CACBHABH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating and Mapping an MdmLevelHierarchy</h4>
<p><a href="#BABHDHDG">Example 4-4</a> creates a hierarchy for the CHANNEL_AWJ dimension. It creates hierarchy levels for the hierarchy and associates attributes with the hierarchy levels. It also maps the hierarchy levels and the attributes to relational sources. The example uses the <code>ArrayList</code> objects from <a href="#BABDJEDC">Example 4-3</a>. It maps the <code>MdmHierarchyLevel</code> objects to the same relational source objects as the <code>MdmDimensionLevel</code> objects are mapped.</p>
<div class="example">
<p class="titleinexample"><a id="BABHDHDG"></a>Example 4-4 Creating and Mapping MdmLevelHierarchy and MdmHierarchyLevel Objects</p>
<pre>private void createAndMapHierarchies()
{
  MdmLevelHierarchy mdmLevelHier =
    mdmChanDim.findOrCreateLevelHierarchy(&#34;CHANNEL_PRIMARY&#34;);

  // Create the MdmHierarchyLevel and HierarchyLevelMap objects.
  int i = 0;
  for(String dimLevelName : dimLevelNames)
  {
    MdmDimensionLevel mdmDimLevel = 
      mdmChanDim.findOrCreateDimensionLevel(dimLevelName);
    MdmHierarchyLevel mdmHierLevel = 
<a id="sthref447"></a>      mdmLevelHier.findOrCreateHierarchyLevel(mdmDimLevel);
    HierarchyLevelMap hierLevelMap =
      mdmHierLevel.findOrCreateHierarchyLevelMap();
    ColumnExpression keyColExp = 
      (ColumnExpression)SyntaxObject.fromSyntax(keyColumns.get(i),
                                                metadataProvider);
    hierLevelMap.setKeyExpression(keyColExp);
    hierLevelMap.setQuery(keyColExp.getQuery());
    i++;
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CACGIGFE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating and Mapping an MdmValueHierarchy</h4>
<p><a id="sthref448"></a>The GLOBAL_AWJ analytic workspace that is used by the examples in this documentation does not have an <code>MdmPrimaryDimension</code> for which an <code>MdmValueHierarchy</code> would be sensible. The sample schema for the user <code>SCOTT</code> has a table that can serve as an example.</p>
<p>The SCOTT sample schema has a table named EMP. That table has columns for employees and for managers. You could create a dimension for employees. You could then create an <code>MdmValueHierarchy</code> in which you map the employee column as the base values for the hierarchy and you map the manager column as the parent relation, as shown in <a href="#BABDCIBA">Example 4-5</a>. To be able to create OLAP dimensions, the SCOTT user must be granted the <code>OLAP_USER</code> role and the <code>CREATE SESSION</code> privilege.</p>
<p><a id="sthref449"></a>In the example, <code>mdmDBSchema</code> is the <code>MdmDatabaseSchema</code> for the SCOTT user, <code>dp</code> is the <code>DataProvider</code>, and <code>mp</code> is the <code>MdmMetadataProvider</code>. The example does not show the code for connecting to the database or getting the <code>DataProvider</code> and creating a <code>UserSession</code>, or getting the <code>MdmMetadataProvider</code>, the <code>MdmRootSchema</code>, or the <code>MdmDatabaseSchema</code>. The code is an excerpt from a class that extends the <code>BaseExample11g</code> example class. That class uses other example classes that have methods for committing the current <code>Transaction</code> and for displaying output. For the complete code, see the <code>CreateValueHierarchy.java</code> example program.</p>
<div class="example">
<p class="titleinexample"><a id="BABDCIBA"></a>Example 4-5 Creating an MdmValueHierarchy</p>
<pre>// Create an analytic workspace object.
AW aw = mdmDBSchema.findOrCreateAW(awName);
// Create a dimension and deploy it to the analytic workspace.
MdmPrimaryDimension mdmEmpDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;EMP_DIM&#34;);
AWPrimaryDimensionOrganization awEmpDimOrg =
  mdmEmpDim.findOrCreateAWPrimaryDimensionOrganization(aw);

// Get the EMP table and the Query for the table.
MdmTable empTable = (MdmTable)mdmDBSchema.getTopLevelObject(&#34;EMP&#34;);
Query empQuery = empTable.getQuery();

// Create a value hierarchy. 
MdmValueHierarchy mdmValHier =
 mdmEmpDim.findOrCreateValueHierarchy(&#34;EMPVALHIER&#34;);
// Create a map for the hierarchy.
SolvedValueHierarchyMap solvedValHierMap =
 mdmValHier.findOrCreateSolvedValueHierarchyMap();
// Specify the Query, the key expression and the parent key expression for
// the hierarchy.
solvedValHierMap.setQuery(empQuery);
Expression keyExp =
 (Expression)SyntaxObject.fromSyntax(&#34;SCOTT.EMP.EMPNO&#34;, mp);
solvedValHierMap.setKeyExpression(keyExp);
Expression parentExp =
 (Expression)SyntaxObject.fromSyntax(&#34;SCOTT.EMP.MGR&#34;, mp);
solvedValHierMap.setParentKeyExpression(parentExp);

// Create an attribute that relates a name to each dimension member.
MdmBaseAttribute mdmNameAttr = 
 mdmEmpDim.findOrCreateBaseAttribute(&#34;EMP_NAME&#34;);
SQLDataType sdtVC2 = new SQLDataType(&#34;VARCHAR2&#34;);
mdmNameAttr.setSQLDataType(sdtVC2)
// Create an attribute map for the attribute.
AttributeMap attrMap =
 solvedValHierMap.findOrCreateAttributeMap(mdmNameAttr);
// Create and set an expression for the attribute map.
Expression exp = (Expression)
  SyntaxObject.fromSyntax(&#34;SCOTT.EMP.ENAME&#34;, mp);
attrMap.setExpression(exp);
mdmValHier.addAttribute(mdmNameAttr);
 
// Commit the Transaction before building the analytic workspace.
// The getContext method of BaseExample11g returns a Context11g object,
// which has a method that commits the Transaction.
getContext().commit();
BuildItem bldEmpDim = new BuildItem(mdmEmpDim);
ArrayList&lt;BuildItem&gt; items = new ArrayList();
items.add(bldEmpDim);
BuildProcess bldProc = new BuildProcess(items);
 
// Execute the build.
try
{
 dp.executeBuild(bldProc, 0);
}
catch (Exception ex)
{
 println(&#34;Could not execute the BuildProcess.&#34;);
 println(&#34;Caught: &#34; + ex);
}

//Get the Source objects for the dimension, the hierarchy, and the attribute.
Source empDim = mdmEmpDim.getSource();
Source valHier = mdmValHier.getSource();
Source empNameAttr = mdmNameAttr.getSource();
// Get the parent attribute and get the Source for it.
MdmAttribute mdmParentAttr = mdmEmpDim.getParentAttribute();
Source parentAttr = mdmParentAttr.getSource();

Source parentByEmpByName = parentAttr.join(valHier.join(empNameAttr));
// Sort the values in ascending order by employee number of the managers.
Source sortedParentByEmpByName = parentByEmpByName.sortAscending();

// Commit the Transaction before creating a Cursor.
getContext().commit();
// The displayResult method of the Context11g object creates a Cursor and 
// displays the results.
println(&#34;The managers of the employees are:&#34;);
getContext().displayResult(sortedParentByEmpByName);
</pre></div>
<!-- class="example" -->
<p>The output of <a href="#BABDCIBA">Example 4-5</a> is the following. It shows the employee name, the employee ID and then the employee ID of the manager. The results are sorted by manager. The employee King does not have a parent and is the highest member of the hierarchy so the manager value for King is null, which appears as <code>NA</code> in the output.</p>
<pre>The managers of the employees are:
1: ((SCOTT,EMPVALHIER::7788),EMPVALHIER::7566)
2: ((FORD,EMPVALHIER::7902),EMPVALHIER::7566)
3: ((ALLEN,EMPVALHIER::7499),EMPVALHIER::7698)
4: ((WARD,EMPVALHIER::7521),EMPVALHIER::7698)
5: ((MARTIN,EMPVALHIER::7654),EMPVALHIER::7698)
6: ((TURNER,EMPVALHIER::7844),EMPVALHIER::7698)
7: ((JAMES,EMPVALHIER::7900),EMPVALHIER::7698)
8: ((MILLER,EMPVALHIER::7934),EMPVALHIER::7782)
9: ((ADAMS,EMPVALHIER::7876),EMPVALHIER::7788)
10: ((JONES,EMPVALHIER::7566),EMPVALHIER::7839)
11: ((BLAKE,EMPVALHIER::7698),EMPVALHIER::7839)
12: ((CLARK,EMPVALHIER::7782),EMPVALHIER::7839)
13: ((SMITH,EMPVALHIER::7369),EMPVALHIER::7902)
14: ((KING,EMPVALHIER::7839),NA)
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIHGJD"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating Attributes</h2>
<p>Attributes contain information about dimension members. An <code>MdmBaseAttribute</code> represents values that are based on relational source tables. An <code>MdmDerivedAttribute</code> represents values that Oracle OLAP derives from characteristics or relationships of the dimension members. For example, the <code>getParentAttribute</code> method of an <code>MdmPrimaryDimension</code> returns an <code>MdmDerivedAttribute</code> that records the parent of each dimension member.</p>
<p><a id="sthref450"></a><a id="sthref451"></a><a id="sthref452"></a>You create a base attribute for a dimension with the <code>findOrCreateBaseAttribute</code> method. You can specify the data type of the attribute, although for many attributes Oracle OLAP can determine the data type from the attribute mapping. With the <code>setAllowAutoDataTypeChange</code> method, you can specify that Oracle OLAP determine the data type. Some attributes are used by the dimension in certain ways, such as to provide descriptions of dimension members or to provide date information that can be used in calculations. For example, you can specify an attribute for descriptions with the <code>setValueDescriptionAttribute</code> method of the dimension and you can specify an attribute that contains end date time period values with the <code>setEndDateAttribute</code> method of an <code>MdmTimeDimension</code>.</p>
<p><a id="sthref453"></a><a id="sthref454"></a><a id="sthref455"></a><a href="#BABEHBJF">Example 4-6</a> creates a long description attribute for the CHANNEL_AWJ dimension and specifies it as the attribute that contains descriptions of the members of the dimension. The example specifies that Oracle OLAP automatically determines a SQL data type for the attribute.</p>
<div class="example">
<p class="titleinexample"><a id="BABEHBJF"></a>Example 4-6 Creating an MdmBaseAttribute</p>
<pre>private MdmBaseAttribute chanLongDescAttr = null;
private void createLongDesciptionAttribute(MdmPrimaryDimension mdmChanDim)
{
// Create the long description attribute and allow the automatic changing of
// the SQL data type.
chanLongDescAttr = mdmChanDim.findOrCreateBaseAttribute(&#34;LONG_DESCRIPTION&#34;);
chanLongDescAttr.setAllowAutoDataTypeChange(true));

// Specifies that the attribute contains descriptions of the dimension members.
mdmChanDim.setValueDescriptionAttribute(chanLongDescAttr);
}
</pre>
<p><a id="sthref456"></a><a id="sthref457"></a><a id="sthref458"></a>An attribute can have different values for the members of different levels of the dimension. In that case the attribute has an attribute mapping for each level. <a href="#BABDJEDC">Example 4-3</a> creates an <code>AttributeMap</code> for the long description attribute for each dimension level by calling the <code>findOrCreateAttributeMap</code> method of the <code>MemberListMap</code> for each dimension level. It specifies a different column for each attribute map.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABJACHB"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating Cubes and Measures</h2>
<p>A cube in a dimensional object model is represented by the <code>MdmCube</code> class. An <code>MdmCube</code> owns one or more <code>MdmMeasure</code> objects. It has a list of the <code>MdmPrimaryDimension</code> objects that dimension the measures.</p>
<p>An <code>MdmCube</code> has the following objects associated with it.</p>
<ul>
<li>
<p><code>MdmPrimaryDimension</code> objects that specify the dimensionality of the cube.</p>
</li>
<li>
<p><code>MdmMeasure</code> objects that contain data that is identified by the dimensions.</p>
</li>
<li>
<p>A <code>CubeOrganization</code> that specifies how the cube stores and manages the measure data.</p>
</li>
<li>
<p><code>CubeMap</code> objects that associate the cube with relational sources.</p>
</li>
<li>
<p>A <code>ConsistentSolveSpecification</code> that specifies how to calculate, or solve, the aggregate level data.</p>
</li>
</ul>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref459"></a>
<h3 class="sect2">Creating Cubes</h3>
<p><a id="sthref460"></a><a id="sthref461"></a><a id="sthref462"></a><a id="sthref463"></a><a id="sthref464"></a>This topic has an example that creates a cube and some of the objects associated with it. <a href="#BABHHCBI">Example 4-7</a> creates an <code>MdmCube</code> that has the name PRICE_CUBE_AWJ. The example creates an <code>AWCubeOrganization</code> object to deploy the cube in an analytic workspace. The <code>mdmDBSchema</code> and <code>aw</code> objects are created by <a href="#BABGHIJF">Example 4-1</a> and the <code>leafLevel</code> <code>ArrayList</code> is created in <a href="#BABHDHDG">Example 4-4</a>. The <code>mdmTimeDim</code> and <code>mdmProdDim</code> objects are dimensions of time periods and product categories. The <code>CreateAndBuildAW</code> program creates those dimensions. The last lines of the example call the methods in <a href="#BABICJFH">Example 4-8</a> and <a href="#BABDCDHH">Example 4-9</a>, respectively.</p>
<div class="example">
<p class="titleinexample"><a id="BABHHCBI"></a>Example 4-7 Creating and Mapping an MdmCube</p>
<pre>private MdmCube createAndMapCube(MdmPrimaryDimension mdmTimeDim,
                                 MdmPrimaryDimension mdmProdDim)
{
<a id="sthref465"></a>  MdmCube mdmPriceCube = mdmDBSchema.findOrCreateCube(&#34;PRICE_CUBE_AWJ&#34;);
  // Add dimensions to the cube.
  mdmPriceCube.addDimension(mdmTimeDim);
  mdmPriceCube.addDimension(mdmProdDim);

<a id="sthref466"></a>  AWCubeOrganization awCubeOrg =
    mdmPriceCube.findOrCreateAWCubeOrganization(aw);
  awCubeOrg.setMVOption(AWCubeOrganization.NONE_MV_OPTION);
  awCubeOrg.setMeasureStorage(AWCubeOrganization.SHARED_MEASURE_STORAGE);
  awCubeOrg.setCubeStorageType(&#34;NUMBER&#34;);

  AggregationCommand aggCommand = new AggregationCommand(&#34;AVG&#34;);
  ArrayList&lt;ConsistentSolveCommand&gt; solveCommands = new ArrayList();
  solveCommands.add(aggCommand);
  ConsistentSolveSpecification conSolveSpec = 
                      new ConsistentSolveSpecification(solveCommands);
<a id="sthref467"></a>  mdmPriceCube.setConsistentSolveSpecification(conSolveSpec);

  // Create and map the measures of the cube.
  createAndMapMeasures(mdmPriceCube);
  // Commit the Transaction.
  commit(mdmPriceCube); 
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref468"></a>
<h3 class="sect2">Creating and Mapping Measures</h3>
<p><a id="sthref469"></a><a id="sthref470"></a><a id="sthref471"></a><a id="sthref472"></a><a id="sthref473"></a><a id="sthref474"></a><a id="sthref475"></a><a id="sthref476"></a><a id="sthref477"></a><a id="sthref478"></a><a id="sthref479"></a>This topic has an example that creates measures for a cube and maps the measures to fact tables in the relational database. The example uses the cube created by <a href="#BABHHCBI">Example 4-7</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABICJFH"></a>Example 4-8 Creating and Mapping Measures</p>
<pre>private void createAndMapMeasures(MdmCube mdmPriceCube)
{
  ArrayList&lt;MdmBaseMeasure&gt; measures = new ArrayList();
<a id="sthref480"></a>  MdmBaseMeasure mdmCostMeasure =
    mdmPriceCube.findOrCreateBaseMeasure(&#34;UNIT_COST&#34;);
  MdmBaseMeasure mdmPriceMeasure =
    mdmPriceCube.findOrCreateBaseMeasure(&#34;UNIT_PRICE&#34;);
  mdmCostMeasure.setAllowAutoDataTypeChange(true);
  mdmPriceMeasure.setAllowAutoDataTypeChange(true);
  measures.add(mdmCostMeasure);
  measures.add(mdmPriceMeasure);
<a id="sthref481"></a>  MdmTable priceCostTable = 
    (MdmTable)mdmDBSchema.getTopLevelObject(&#34;PRICE_FACT&#34;); 
  Query cubeQuery = priceCostTable.getQuery();
  ArrayList&lt;String&gt; measureColumns = new ArrayList();
  measureColumns.add(&#34;GLOBAL.PRICE_FACT.UNIT_COST&#34;);
  measureColumns.add(&#34;GLOBAL.PRICE_FACT.UNIT_PRICE&#34;);
  CubeMap cubeMap = mdmPriceCube.findOrCreateCubeMap();
  cubeMap.setQuery(cubeQuery);

  // Create MeasureMap objects for the measures of the cube and
  // set the expressions for the measures. The expressions specify the
  // columns of the fact table for the measures.
  int i = 0;
  for(MdmBaseMeasure mdmBaseMeasure : measures)
  {
<a id="sthref482"></a>    MeasureMap measureMap = cubeMap.findOrCreateMeasureMap(mdmBaseMeasure);
    Expression expr =
      (Expression)SyntaxObject.fromSyntax(measureColumns.get(i), 
                                          metadataProvider);
    measureMap.setExpression(expr);
    i++;
  }

  // Create CubeDimensionalityMap objects for the dimensions of the cube and
  // set the expressions for the dimensions. The expressions specify the
  // columns of the fact table for the dimensions.

  ArrayList&lt;String&gt; factColNames = new ArrayList();
  factColNames.add(&#34;GLOBAL.PRICE_FACT.MONTH_ID&#34;);
  factColNames.add(&#34;GLOBAL.PRICE_FACT.ITEM_ID&#34;);
  List&lt;MdmDimensionality&gt; mdmDimltys = mdmPriceCube.getDimensionality();
  for (MdmDimensionality mdmDimlty: mdmDimltys)
  {
<a id="sthref483"></a>    CubeDimensionalityMap cubeDimMap = 
      cubeMap.findOrCreateCubeDimensionalityMap(mdmDimlty);
    MdmPrimaryDimension mdmPrimDim = 
      (MdmPrimaryDimension)mdmDimlty.getDimension();
    String columnMap = null;
    if (mdmPrimDim.getName().startsWith(&#34;TIME&#34;))
    {
      columnMap = factColNames.get(0);
      i = 0;
    }
    else// (mdmPrimDim.getName().startsWith(&#34;PRODUCT&#34;))
    {
      columnMap = factColNames.get(1);
      i = 1;
    }
    Expression expr =
      (Expression)SyntaxObject.fromSyntax(columnMap,metadataProvider);
    cubeDimMap.setExpression(expr);

    // Associate the leaf level of the hierarchy with the cube.
    MdmHierarchy mdmDefHier = mdmPrimDim.getDefaultHierarchy();
    MdmLevelHierarchy mdmLevHier = (MdmLevelHierarchy)mdmDefHier;
    List&lt;MdmHierarchyLevel&gt; levHierList = mdmLevHier.getHierarchyLevels();
    // The last element in the list must be the leaf level of the hierarchy.
    MdmHierarchyLevel leafLevel = levHierList.get(levHierList.size() - 1);
    cubeDimMap.setMappedDimension(leafLevel);
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFFGIG"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Committing Transactions</h2>
<p><a id="sthref484"></a><a id="sthref485"></a>To save a metadata object as a persistent entity in the database, you must commit the <code>Transaction</code> in which you created the object. You can commit a <code>Transaction</code> at any time. Committing the <code>Transaction</code> after creating a top-level object and the objects that it owns is a good practice.</p>
<p><a href="#BABDCDHH">Example 4-9</a> gets the <code>TransactionProvider</code> from the <code>DataProvider</code> for the session and commits the current <code>Transaction</code>.</p>
<div class="example">
<p class="titleinexample"><a id="BABDCDHH"></a>Example 4-9 Committing Transactions</p>
<pre>private void commit(MdmSource mdmSource)
{
  try 
  {
    System.out.println(&#34;Committing the transaction for &#34; + 
                        mdmSource.getName() + &#34;.&#34;);      
    (dp.getTransactionProvider()).commitCurrentTransaction();
  } 
  catch (Exception ex) 
  {
    System.out.println(&#34;Could not commit the Transaction. &#34; + ex);
  } 
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABJCHBA"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exporting and Importing XML Templates</h2>
<p><a id="sthref486"></a><a id="sthref487"></a><a id="sthref488"></a>You can save the definition of a metadata object by exporting the object to an XML template. Exporting an object saves the definition of the object and the definitions of any objects that it owns. For example, if you export an <code>AW</code> object to XML, then the XML includes the definitions of any <code>MdmPrimaryDimension</code> and <code>MdmCube</code> objects that the <code>AW</code> owns, and the <code>MdmAttribute</code>, <code>MdmMeasure</code> and other objects owned by the dimensions and cubes.</p>
<p><a id="sthref489"></a><a href="#BABGCBEB">Example 4-10</a> exports metadata objects to an XML template and saves it in a file. The code excerpt at the beginning of the example creates a <code>List</code> of the objects to export. It adds to the <code>List</code> the <code>aw</code> object, which is the analytic workspace created by <a href="#BABGHIJF">Example 4-1</a>. It then calls the <code>exportToXML</code> method.</p>
<div class="example">
<p class="titleinexample"><a id="BABGCBEB"></a>Example 4-10 Exporting to an XML Template</p>
<pre> ... // In some method.
List objectsToExport = new ArrayList();
objectsToExport.add(aw);
exportToXML(objectsToExport, &#34;globalawj.xml&#34;);
...
public void exportToXML(List objectsToExport, String fileName)
{
  try
  {
    PrintWriter writer = new PrintWriter(new FileWriter(filename));
    mp.exportFullXML(writer,         // mp is the MdmMetadataProvider
                     objectsToExport,
                     null,           // No Map for renaming objects
                     false);         // Do not include the owner name
    writer.close();
  }
  catch (IOException ie)
  {
    ie.printStackTrace();
  }
}
</pre></div>
<!-- class="example" -->
<p><a id="sthref490"></a><a id="sthref491"></a><a id="sthref492"></a>You can import a metadata object definition as an XML template. After importing, you must build the object.</p>
</div>
<!-- class="sect1" -->
<a id="BABFGBDD"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Building an Analytic Workspace</h2>
<p>After creating and mapping metadata objects, or importing the XML definition of an object, you must perform the calculations that the objects specify and load the resulting data into physical storage structures.</p>
<p><a id="sthref493"></a><a id="sthref494"></a><a id="sthref495"></a><a id="sthref496"></a><a id="sthref497"></a><a href="#BABDFIJC">Example 4-11</a> creates <code>BuildItem</code> objects for the dimensions and cubes of the analytic workspace. It creates a <code>BuildProcess</code> that specifies the <code>BuildItem</code> objects and passes the <code>BuildProcess</code> to the <code>executeBuild</code> method of the <code>DataProvider</code> for the session.</p>
<div class="example">
<p class="titleinexample"><a id="BABDFIJC"></a>Example 4-11 Building an Analytic Workspace</p>
<pre>BuildItem bldChanDim = new BuildItem(mdmChanDim);
BuildItem bldProdDim = new BuildItem(mdmProdDim);
BuildItem bldCustDim = new BuildItem(mdmCustDim);
BuildItem bldTimeDim = new BuildItem(mdmTimeDim);
BuildItem bldUnitsCube = new BuildItem(mdmUnitsCube);
BuildItem bldPriceCube = new BuildItem(mdmPriceCube);
ArrayList&lt;BuildItem&gt; items = new ArrayList();
items.add(bldChanDim);
items.add(bldProdDim); 
items.add(bldCustDim);
items.add(bldTimeDim);
items.add(bldUnitsCube);
items.add(bldPriceCube);
BuildProcess bldProc = new BuildProcess(items);
try 
{
  dp.executeBuild(bldProc, 0);
} 
catch (Exception ex) 
{
  System.out.println(&#34;Could not execute the BuildProcess.&#34; + ex);
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4769">
<tr>
<td class="cellalignment4776">
<table class="cellalignment4774">
<tr>
<td class="cellalignment4773"><a href="discover.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4773"><a href="query.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4778">
<table class="cellalignment4772">
<tr>
<td class="cellalignment4773"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4773"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4773"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4773"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4773"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4773"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>