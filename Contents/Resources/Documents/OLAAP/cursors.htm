<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79243"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Retrieving%20Query%20Results"></a><title>Retrieving Query Results</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T7:32:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Java API Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17707-05"/>
<meta name="dcterms.isVersionOf" content="OLAAP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="crscncpt.htm" title="Previous" type="text/html"/>
<link rel="Next" href="template.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17707-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/19</span> <!-- End Header -->
<div class="chapter"><a id="g1018004"></a> <a id="i1006552"></a>
<h1 class="chapter"><span class="secnum">9</span> Retrieving Query Results</h1>
<p>This chapter describes how to retrieve the results of a query with an Oracle OLAP Java API <code>Cursor</code> and how to gain access to those results. This chapter also describes how to customize the behavior of a <code>Cursor</code> to fit your method of displaying the results. For information on the class hierarchies of <code>Cursor</code> and its related classes, and for information on the <code>Cursor</code> concepts of position, fetch size, and extent, see <a href="crscncpt.htm#g1014888">Chapter 8, &#34;Understanding Cursor Classes and Concepts&#34;</a>.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#i1007229">Retrieving the Results of a Query</a></p>
</li>
<li>
<p><a href="#i1007231">Navigating a CompoundCursor for Different Displays of Data</a></p>
</li>
<li>
<p><a href="#i1007233">Specifying the Behavior of a Cursor</a></p>
</li>
<li>
<p><a href="#i1007234">Calculating Extent and Starting and Ending Positions of a Value</a></p>
</li>
<li>
<p><a href="#i1007236">Specifying a Fetch Size</a></p>
</li>
</ul>
<a id="i1007229"></a>
<div class="sect1">
<h2 class="sect1">Retrieving the Results of a Query</h2>
<p><a id="sthref849"></a>A query is an OLAP Java API <code>Source</code> that specifies the data that you want to retrieve from the data store and any calculations that you want Oracle OLAP to perform on the data. A <code>Cursor</code> is the object that retrieves, or <span class="italic">fetches</span>, the result set specified by a <code>Source</code>. Creating a <code>Cursor</code> for a <code>Source</code> involves the following steps:</p>
<ol>
<li>
<p>Get a primary <code>Source</code> from an <code>MdmObject</code> or create a derived <code>Source</code> through operations on a <code>DataProvider</code> or a <code>Source</code>. For information on getting or creating <code>Source</code> objects, see <a href="query.htm#g1030586">Chapter 5, &#34;Understanding Source Objects&#34;</a>.</p>
</li>
<li>
<p>If the <code>Source</code> is a derived <code>Source</code>, then commit the <code>Transaction</code> in which you created the <code>Source</code>. To commit the <code>Transaction</code>, call the <code>commitCurrentTransaction</code> method of your <code>TransactionProvider</code>. For more information on committing a <code>Transaction</code>, see <a href="transact.htm#g1010472">Chapter 7, &#34;Using a TransactionProvider&#34;</a>. If the <code>Source</code> is a primary <code>Source</code>, then you do not need to commit the <code>Transaction</code>.</p>
</li>
<li>
<p>Create a <code>CursorManager</code> by calling a <code>createCursorManager</code> method of your <code>DataProvider</code> and passing that method the <code>Source</code>.</p>
</li>
<li>
<p>Create a <code>Cursor</code> by calling the <code>createCursor</code> method of the <code>CursorManager</code>.</p>
</li>
</ol>
<p><a id="sthref850"></a><a id="sthref851"></a><a id="sthref852"></a><a id="sthref853"></a><a href="#i1006606">Example 9-1</a> creates a <code>Cursor</code> for the derived <code>Source</code> named <code>querySource</code>. The example uses a <code>DataProvider</code> named <code>dp</code>. The example creates a <code>CursorManager</code> named <code>cursorMngr</code> and a <code>Cursor</code> named <code>queryCursor</code>.</p>
<p>Finally, the example closes the <code>CursorManager</code>. When you have finished using the <code>Cursor</code>, you should close the <code>CursorManager</code> to free resources.</p>
<div class="example">
<p class="titleinexample"><a id="i1006606"></a>Example 9-1 Creating a Cursor</p>
<pre>CursorManager cursorMngr = dp.createCursorManager(querySource);
Cursor queryCursor = cursorMngr.createCursor();

// Use the Cursor in some way, such as to display the values of it.

cursorMngr.close();
</pre></div>
<!-- class="example" -->
<div class="sect2"><a id="sthref854"></a>
<h3 class="sect2">Getting Values from a Cursor</h3>
<p><a id="sthref855"></a>The <code>Cursor</code> interface encapsulates the notion of a <span class="italic">current position</span> and has methods for moving the current position. The <code>ValueCursor</code> and <code>CompoundCursor</code> interfaces extend the <code>Cursor</code> interface. The Oracle OLAP Java API has implementations of the <code>ValueCursor</code> and <code>CompoundCursor</code> interfaces. Calling the <code>createCursor</code> method of a <code>CursorManager</code> returns either a <code>ValueCursor</code> or a <code>CompoundCursor</code> implementation, depending on the <code>Source</code> for which you are creating the <code>Cursor</code>.</p>
<p>A <code>ValueCursor</code> is returned for a <code>Source</code> that has a single set of values. A <code>ValueCursor</code> has a value at its current position, and it has methods for getting the value at the current position.</p>
<p>A <code>CompoundCursor</code> is created for a <code>Source</code> that has more than one set of values, which is a <code>Source</code> that has one or more outputs. Each set of values of the <code>Source</code> is represented by a child <code>ValueCursor</code> of the <code>CompoundCursor</code>. A <code>CompoundCursor</code> has methods for getting its child <code>Cursor</code> objects.</p>
<p><a id="sthref856"></a>The structure of the <code>Source</code> determines the structure of the <code>Cursor</code>. A <code>Source</code> can have nested outputs, which occurs when one or more of the outputs of the <code>Source</code> is itself a <code>Source</code> with outputs. If a <code>Source</code> has a nested output, then the <code>CompoundCursor</code> for that <code>Source</code> has a child <code>CompoundCursor</code> for that nested output.</p>
<p>The <code>CompoundCursor</code> coordinates the positions of the child <code>Cursor</code> objects that it contains. The current position of the <code>CompoundCursor</code> specifies one set of positions of the child <code>Cursor</code> objects.</p>
<p>For an example of a <code>Source</code> that has only one level of output values, see <a href="#i1006671">Example 9-4</a>. For an example of a <code>Source</code> that has nested output values, see <a href="#i1006700">Example 9-5</a>.</p>
<p><a id="sthref857"></a>An example of a <code>Source</code> that represents a single set of values is one returned by the <code>getSource</code> method of an <code>MdmDimension</code>, such as an <code>MdmPrimaryDimension</code> that represents product values. Creating a <code>Cursor</code> for that <code>Source</code> returns a <code>ValueCursor</code>. Calling the <code>getCurrentValue</code> method returns the product value at the current position of that <code>ValueCursor</code>.</p>
<p><a href="#i1006620">Example 9-2</a> gets the <code>Source</code> from <code>mdmProdHier</code>, which is an <code>MdmLevelHierarchy</code> that represents product values, and creates a <code>Cursor</code> for that <code>Source</code>. The example sets the current position to the fifth element of the <code>ValueCursor</code> and gets the product value from the <code>Cursor</code>. The example then closes the <code>CursorManager</code>. In the example, <code>dp</code> is the <code>DataProvider</code>.</p>
<div class="example">
<p class="titleinexample"><a id="i1006620"></a>Example 9-2 Getting a Single Value from a ValueCursor</p>
<pre>Source prodSource = mdmProdHier.getSource();
// Because prodSource is a primary Source, you do not need to
// commit the current Transaction.
CursorManager cursorMngr = dp.createCursorManager(prodSource);
Cursor prodCursor = cursorMngr.createCursor();
// Cast the Cursor to a ValueCursor.
ValueCursor prodValues = (ValueCursor) prodCursor;
// Set the position to the fifth element of the ValueCursor.
prodValues.setPosition(5);

// Product values are strings. Get the value at the current position.
String value = prodValues.getCurrentString();

// Do something with the value, such as display it.

// Close the CursorManager.
cursorMngr.close();
</pre>
<p><a id="sthref858"></a><a href="#i1006645">Example 9-3</a> uses the same <code>Cursor</code> as <a href="#i1006620">Example 9-2</a>. <a href="#i1006645">Example 9-3</a> uses a <code>do...while</code> loop and the <code>next</code> method of the <code>ValueCursor</code> to move through the positions of the <code>ValueCursor</code>. The <code>next</code> method begins at a valid position and returns <code>true</code> when an additional position exists in the <code>Cursor</code>. It also advances the current position to that next position.</p>
<p>The example sets the position to the first position of the <code>ValueCursor</code>. The example loops through the positions and uses the <code>getCurrentValue</code> method to get the value at the current position.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1006645"></a>Example 9-3 Getting All of the Values from a ValueCursor</p>
<pre>// prodValues is the ValueCursor for prodSource.
prodValues.setPosition(1);
do 
{
  println(prodValues.getCurrentValue);
} while(prodValues.next());
</pre>
<p><a id="sthref859"></a><a id="sthref860"></a><a id="sthref861"></a><a id="sthref862"></a>The values of the result set represented by a <code>CompoundCursor</code> are in the child <code>ValueCursor</code> objects of the <code>CompoundCursor</code>. To get those values, you must get the child <code>ValueCursor</code> objects from the <code>CompoundCursor</code>.</p>
<p><a id="sthref863"></a>An example of a <code>CompoundCursor</code> is one that is returned by calling the <code>createCursor</code> method of a <code>CursorManager</code> for a <code>Source</code> that represents the values of a measure as specified by selected values from the dimensions of the measure.</p>
<p><a href="#i1006671">Example 9-4</a> uses a <code>Source</code>, named <code>units</code>, that results from calling the <code>getSource</code> method of an <code>MdmBaseMeasure</code> that represents the number of units sold. The dimensions of the measure are <code>MdmPrimaryDimension</code> objects representing products, customers, times, and channels. This example uses <code>Source</code> objects that represent selected values from the default hierarchies of those dimensions. The names of those <code>Source</code> objects are <code>prodSel</code>, <code>custSel</code>, <code>timeSel</code>, and <code>chanSel</code>. The creation of the <code>Source</code> objects representing the measure and the dimension selections is not shown.</p>
<p><a href="#i1006671">Example 9-4</a> joins the dimension selections to the measure, which results in a <code>Source</code> named <code>unitsForSelections</code>. It creates a <code>CompoundCursor</code>, named <code>unitsForSelCursor</code>, for <code>unitsForSelections</code>, and gets the base <code>ValueCursor</code> and the outputs from the <code>CompoundCursor</code>. Each output is a <code>ValueCursor</code>, in this case. The outputs are returned in a <code>List</code>. The order of the outputs in the <code>List</code> is the inverse of the order in which the outputs were added to the list of outputs by the successive join operations. In the example, <code>dp</code> is the <code>DataProvider</code>.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1006671"></a>Example 9-4 Getting ValueCursor Objects from a CompoundCursor</p>
<pre>Source unitsForSelections = units.join(prodSel)
                                 .join(custSel)
                                 .join(timeSel)
                                 .join(chanSel);
// Commit the current Transaction (code not shown).

// Create a Cursor for unitsForSelections.
CursorManager cursorMngr = dp.createCursorManager(unitsForSelections);
CompoundCursor unitsForSelCursor = (CompoundCursor)
                                    cursorMngr.createCursor();

// Get the base ValueCursor.
ValueCursor specifiedUnitsVals = unitsForSelCursor.getValueCursor();

// Get the outputs.
List outputs = unitsForSelCursor.getOutputs();
ValueCursor chanSelVals = (ValueCursor) outputs.get(0);
ValueCursor timeSelVals = (ValueCursor) outputs.get(1);
ValueCursor custSelVals = (ValueCursor) outputs.get(2);
ValueCursor prodSelVals = (ValueCursor) outputs.get(3);

// You can now get the values from the ValueCursor objects.
// When you have finished using the Cursor objects, close the CursorManager.
cursorMngr.close();
</pre>
<p><a href="#i1006700">Example 9-5</a> uses the same units measure as <a href="#i1006671">Example 9-4</a>, but it joins the dimension selections to the measure differently. <a href="#i1006700">Example 9-5</a> joins two of the dimension selections together. It then joins the result to the <code>Source</code> produced by joining the single dimension selections to the measure. The resulting <code>Source</code>, <code>unitsForSelections</code>, represents a query has nested outputs, which means it has more than one level of outputs.</p>
<p>The <code>CompoundCursor</code> that this example creates for <code>unitsForSelections</code> therefore also has nested outputs. The <code>CompoundCursor</code> has a child base <code>ValueCursor</code> and has as outputs three child <code>ValueCursor</code> objects and one child <code>CompoundCursor</code>.</p>
<p><a href="#i1006700">Example 9-5</a> joins the selection of channel dimension values, <code>chanSel</code>, to the selection of customer dimension values, <code>custSel</code>. The result is <code>custByChanSel</code>, a <code>Source</code> that has customer values as the base values and channel values as the values of the output. The example joins to <code>units</code> the selections of product and time values, and then joins <code>custByChanSel</code>. The resulting query is represented by <code>unitsForSelections</code>.</p>
<p>The example commits the current <code>Transaction</code> and creates a <code>CompoundCursor</code>, named <code>unitsForSelCursor</code>, for <code>unitsForSelections</code>.</p>
<p>The example gets the base <code>ValueCursor</code> and the outputs from the <code>CompoundCursor</code>. In the example, <code>dp</code> is the <code>DataProvider</code>.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1006700"></a>Example 9-5 Getting Values from a CompoundCursor with Nested Outputs</p>
<pre><a id="sthref864"></a><a id="sthref865"></a>Source custByChanSel = custSel.join(chanSel);
Source unitsForSelections = units.join(prodSel)
                                 .join(timeSel)
                                 .join(custByChanSel);
// Commit the current Transaction (code not shown).

// Create a Cursor for unitsForSelections.
CursorManager cursorMngr = dp.createCursorManager(unitsForSelections);
Cursor unitsForSelCursor = cursorMngr.createCursor();

// Send the Cursor to a method that does different operations 
// depending on whether the Cursor is a CompoundCursor or a 
// ValueCursor.
printCursor(unitsForSelCursor);
cursorMngr.close();
// The remaining code of someMethod is not shown.

// The following code is in from the CursorPrintWriter class.
<a id="sthref866"></a>// The printCursor method has a do...while loop that moves through the positions
// of the Cursor passed to it. At each position, the method prints the number of
// the iteration through the loop and then a colon and a space. The output
// object is a PrintWriter. The method calls the private _printTuple method and
// then prints a new line. A &#34;tuple&#34; is the set of output ValueCursor values
// specified by one position of the parent CompoundCursor. The method prints one
// line for each position of the parent CompoundCursor.
private void printCursor(Cursor rootCursor) 
{
  int i = 1;
  do 
  {
     print(i++ + &#34;: &#34;);
     _printTuple(rootCursor);
     println();
     flush();
  } while(rootCursor.next());
}

// If the Cursor passed to the _printTuple method is a ValueCursor, then
// the method prints the value at the current position of the ValueCursor. 
// If the Cursor passed in is a CompoundCursor, then the method gets the 
// outputs of the CompoundCursor and iterates through the outputs,  
// recursively calling itself for each output. The method then gets the 
// base ValueCursor of the CompoundCursor and calls itself again. 
private void _printTuple(Cursor cursor) 
{
  if(cursor instanceof CompoundCursor) 
  {
    CompoundCursor compoundCursor = (CompoundCursor)cursor;
    // Put an open parenthesis before the value of each output.
    print(&#34;(&#34;);
    Iterator iterOutputs = compoundCursor.getOutputs().iterator();
    Cursor output = (Cursor)iterOutputs.next();
    _printTuple(output);
    while(iterOutputs.hasNext())
    {
      // Put a comma after the value of each output.
      print(&#34;,&#34;);
      _printTuple((Cursor)iterOutputs.next());
    }
    // Put a comma after the value of the last output.
    print(&#34;,&#34;);
    // Get the base ValueCursor.
    _printTuple(compoundCursor.getValueCursor());
    
    // Put a close parenthesis after the base value to indicate  
    // the end of the tuple.
    print(&#34;)&#34;);
  }
  else if(cursor instanceof ValueCursor) 
  {
    ValueCursor valueCursor = (ValueCursor) cursor;
    if (valueCursor.hasCurrentValue())
      print(valueCursor.getCurrentValue());
    else                       // If this position has a null value.
      print(&#34;NA&#34;);
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007231"></a>
<div class="sect1">
<h2 class="sect1">Navigating a CompoundCursor for Different Displays of Data</h2>
<p>With the methods of a <code>CompoundCursor</code> you can easily move through, or navigate, the <code>CompoundCursor</code> structure and get the values from the <code>ValueCursor</code> descendents of the <code>CompoundCursor</code>. Data from a multidimensional OLAP query is often displayed in a crosstab format, or as a table or a graph.</p>
<p>To display the data for multiple rows and columns, you loop through the positions at different levels of the <code>CompoundCursor</code> depending on the needs of your display. For some displays, such as a table, you loop through the positions of the parent <code>CompoundCursor</code>. For other displays, such as a crosstab, you loop through the positions of the child <code>Cursor</code> objects.</p>
<p><a id="sthref867"></a><a id="sthref868"></a>To display the results of a query in a table view, in which each row contains a value from each output <code>ValueCursor</code> and from the base <code>ValueCursor</code>, you determine the position of the top-level, or root, <code>CompoundCursor</code> and then iterate through its positions. <a href="#i1006777">Example 9-6</a> displays only a portion of the result set at one time. It creates a <code>Cursor</code> for a <code>Source</code> that represents a query that is based on a measure that has unit cost values. The dimensions of the measure are the product and time dimensions. The creation of the primary <code>Source</code> objects and the derived selections of the dimensions is not shown.</p>
<p>The example joins the <code>Source</code> objects representing the dimension value selections to the <code>Source</code> representing the measure. It commits the current <code>Transaction</code> and then creates a <code>Cursor</code>, casting it to a <code>CompoundCursor</code>. The example sets the position of the <code>CompoundCursor</code>, iterates through twelve positions of the <code>CompoundCursor</code>, and prints out the values specified at those positions. The <code>DataProvider</code> is <code>dp</code>.</p>
<div class="example">
<p class="titleinexample"><a id="i1006777"></a>Example 9-6 Navigating for a Table View</p>
<pre>Source unitPriceByMonth = unitPrice.join(productSel)
                                   .join(timeSel);
// Commit the current Transaction (code not shown).

// Create a Cursor for unitPriceByMonth.
CursorManager cursorMngr = dp.createCursorManager(unitPriceByMonth);
CompoundCursor rootCursor = (CompoundCursor) cursorMngr.createCursor();

// Determine a starting position and the number of rows to display.
int start = 7;
int numRows = 12;

println(&#34;Month     Product     Unit Price&#34;);
println(&#34;-------   --------   ----------&#34;);

// Iterate through the specified positions of the root CompoundCursor.
// Assume that the Cursor contains at least (start + numRows) positions.
for(int pos = start; pos &lt; start + numRows; pos++) 
{
  // Set the position of the root CompoundCursor.
  rootCursor.setPosition(pos);
  // Print the local values of the output and base ValueCursors.
  // The getLocalValue method gets the local value from the unique
  // value of a dimension element.
  String timeValue = ((ValueCursor)rootCursor.getOutputs().get(0))
                     .getCurrentString();
  String timeLocVal = getLocalValue(timeValue);
  String prodValue = ((ValueCursor)rootCursor.getOutputs().get(1))
                     .getCurrentString();
  String prodLocVal = getLocalValue(prodValue);
  Object price = rootCursor.getValueCursor().getCurrentValue();
  println(timeLocVal + &#34;   &#34; + prodLocVal + &#34;   &#34; +  price);
}
cursorMngr.close();
</pre>
<p>If the time selection for the query has eight values, such as the first month of each calendar quarter for the years 2001 and 2002, and the product selection has three values, then the result set of the <code>unitPriceByMonth</code> query has twenty-four positions. <a href="#i1006777">Example 9-6</a> displays the following table, which has the values specified by positions 7 through 18 of the <code>CompoundCursor</code>.</p>
<pre>Month     Product    Unit Price
-------   --------   ----------
2001.07   ENVY ABM   2892.18
2001.07   ENVY EXE   3155.91
2001.07   ENVY STD   2505.57
2001.10   ENVY ABM   2856.86
2001.10   ENVY EXE   3105.53
2001.10   ENVY STD   2337.3
2002.01   ENVY ABM   2896.77
2002.01   ENVY EXE   3008.95
2002.01   ENVY STD   2140.71
2002.04   ENVY ABM   2880.39
2002.04   ENVY EXE   2953.96
2002.04   ENVY STD   2130.88
</pre>
<p><a href="#i1006801">Example 9-7</a> uses the same query as <a href="#i1006777">Example 9-6</a>. In a crosstab view, the first row is column headings, which are the values from <code>prodSel</code> in this example. The output for <code>prodSel</code> is the faster varying output because the <code>prodSel</code> dimension selection is the last output in the list of outputs that results from the operations that join the measure to the dimension selections. The remaining rows begin with a row heading. The row headings are values from the slower varying output, which is <code>timeSel</code>. The remaining positions of the rows, under the column headings, contain the <code>unitPrice</code> values specified by the set of the dimension values. To display the results of a query in a crosstab view, you iterate through the positions of the children of the top-level <code>CompoundCursor</code>.</p>
<p>The <code>DataProvider</code> is <code>dp</code>.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1006801"></a>Example 9-7 Navigating for a Crosstab View Without Pages</p>
<pre><a id="sthref869"></a><a id="sthref870"></a>Source unitPriceByMonth = unitPrice.join(productSel)
                                   .join(timeSel);
// Commit the current Transaction (code not shown).

// Create a Cursor for unitPriceByMonth.
CursorManager cursorMngr = dp.createCursorManager(unitPriceByMonth);
CompoundCursor rootCursor = (CompoundCursor) cursorMngr.createCursor();

// Get the outputs and the ValueCursor objects.
List outputs = rootCursor.getOutputs();
// The first output has the values of timeSel, the slower varying output.
ValueCursor rowCursor = (ValueCursor) outputs.get(0);
// The second output has the faster varying values of productSel.
ValueCursor columnCursor = (ValueCursor) outputs.get(1);
// The base ValueCursor has the values from unitPrice.
ValueCursor unitPriceValues = rootCursor.getValueCursor();

// Display the values as a crosstab.
println(&#34;                     PRODUCT&#34;);
println(&#34;          ---------------------------------&#34;);
print(&#34;Month     &#34;);
do 
{
  String value = ((ValueCursor) columnCursor).getCurrentString();
  print(getContext().getLocalValue(value) + &#34;    &#34;);
} while (columnCursor.next());
println(&#34;\n-------   --------    --------    --------&#34;);

// Reset the column Cursor to its first element.
columnCursor.setPosition(1);

do 
{
  // Print the row dimension values.
  String value = ((ValueCursor) rowCursor).getCurrentString();
  print(getContext().getLocalValue(value) + &#34;    &#34;);
  // Loop over columns.
  do 
  {
    // Print data value.
    print(unitPriceValues.getCurrentValue() + &#34;     &#34;);
  } while (columnCursor.next());
 
  println();
 
  // Reset the column Cursor to its first element.
  columnCursor.setPosition(1);
  } while (rowCursor.next());

cursorMngr.close();
</pre></div>
<!-- class="example" -->
<p>The following is a crosstab view of the values from the result set specified by the <code>unitPriceByMonth</code> query. The first line labels the rightmost three columns as having product values. The third line labels the first column as having month values and then labels each of the rightmost three columns with the product value for that column. The remaining lines have the month value in the left column and then have the data values from the units measure for the specified month and product.</p>
<pre>                     PRODUCT
          ---------------------------------
Month     ENVY ABM    ENVY EXE    ENVY STD
-------   --------    --------    --------
2001.01    3042.22     3223.28     2426.07
2001.04    3026.12     3107.65     2412.42
2001.07    2892.18     3155.91     2505.57
2001.10    2856.86     3105.53     2337.30
2002.01    2896.77     3008.95     2140.71
2002.04    2880.39     2953.96     2130.88
2002.07    2865.14     3002.34     2074.56
2002.10    2850.88     2943.96     1921.62
</pre>
<p><a id="sthref871"></a><a id="sthref872"></a><a href="#i1006860">Example 9-8</a> creates a <code>Source</code> that is based on a measure of units sold values. The dimensions of the measure are the customer, product, time, and channel dimensions. The <code>Source</code> objects for the dimensions represent selections of the dimension values. The creation of those <code>Source</code> objects is not shown.</p>
<p>The query that results from joining the dimension selections to the measure <code>Source</code> represents unit sold values as specified by the values of the outputs.</p>
<p>The example creates a <code>Cursor</code> for the query and then sends the <code>Cursor</code> to the <code>printAsCrosstab</code> method, which prints the values from the <code>Cursor</code> in a crosstab. That method calls other methods that print page, column, and row values.</p>
<p>The fastest-varying output of the <code>Cursor</code> is the selection of products, which has three values (the product items ENVY ABM, ENVY EXE, and ENVY STD). The product values are the column headings of the crosstab. The next fastest-varying output is the selection of customers, which has three values (the customers COMP SERV TOK, COMP WHSE LON, and COMP WHSE SD). Those three values are the row headings. The page dimensions are selections of three time values (the months 2000.01, 2000.02, and 2000.03), and one channel value (DIR, which is the direct sales channel).</p>
<p>The <code>DataProvider</code> is <code>dp</code>. The <code>getLocalValue</code> method gets the local value from a unique dimension value.</p>
<div class="example">
<p class="titleinexample"><a id="i1006860"></a>Example 9-8 Navigating for a Crosstab View With Pages</p>
<pre>// In someMethod.
Source unitsForSelections = units.join(prodSel)
                                 .join(custSel)
                                 .join(timeSel)
                                 .join(chanSel);
// Commit the current Transaction (code not shown).

// Create a Cursor for unitsForSelections.
CursorManager cursorMngr = dp.createCursorManager(unitsForSelections);
CompoundCursor unitsForSelCursor = (CompoundCursor) cursorMngr.createCursor();

// Send the Cursor to the printAsCrosstab method.
printAsCrosstab(unitsForSelCursor);

cursorMngr.close();
// The remainder of the code of someMethod is not shown.

private void printAsCrosstab(CompoundCursor rootCursor)
{
  List outputs = rootCursor.getOutputs();
  int nOutputs = outputs.size();

  // Set the initial positions of all outputs.
  Iterator outputIter = outputs.iterator();
  while (outputIter.hasNext())
    ((Cursor) outputIter.next()).setPosition(1);
  
  // The last output is fastest-varying; it represents columns.
  // The next to last output represents rows.
  // All other outputs are on the page.
  Cursor colCursor = (Cursor) outputs.get(nOutputs - 1);
  Cursor rowCursor = (Cursor) outputs.get(nOutputs - 2);
  ArrayList pageCursors = new ArrayList();
  for (int i = 0 ; i &lt; nOutputs - 2 ; i++) 
  {
    pageCursors.add(outputs.get(i));
  }

  // Get the base ValueCursor, which has the data values.
  ValueCursor dataCursor = rootCursor.getValueCursor();

  // Print the pages of the crosstab.
  printPages(pageCursors, 0, rowCursor, colCursor, dataCursor);
}

// Prints the pages of a crosstab.
private void printPages(List pageCursors, int pageIndex, Cursor rowCursor,
                        Cursor colCursor, ValueCursor dataCursor) 
{
  // Get a Cursor for this page.
  Cursor pageCursor = (Cursor) pageCursors.get(pageIndex);

  // Loop over the values of this page dimension.
  do 
  {
    // If this is the fastest-varying page dimension, print a page.
    if (pageIndex == pageCursors.size() - 1) 
    {
      // Print the values of the page dimensions.
      printPageHeadings(pageCursors);

      // Print the column headings.
      printColumnHeadings(colCursor);

      // Print the rows.
      printRows(rowCursor, colCursor, dataCursor);

      // Print a couple of blank lines to delimit pages.
      println();
      println();
    }

    // If this is not the fastest-varying page, recurse to the
    // next fastest-varying dimension.
    else 
    {
      printPages(pageCursors, pageIndex + 1, rowCursor, colCursor, 
                 dataCursor);
    }
  } while (pageCursor.next());

  // Reset this page dimension Cursor to its first element.
  pageCursor.setPosition(1);
}

// Prints the values of the page dimensions on each page.
private void printPageHeadings(List pageCursors) 
{
  // Print the values of the page dimensions.
  Iterator pageIter = pageCursors.iterator();
  while (pageIter.hasNext())
  {
    String value = ((ValueCursor) pageIter.next()).getCurrentString();    
    println(getLocalValue(value));
  }
  println();
}

// Prints the column headings on each page.
private void printColumnHeadings(Cursor colCursor) 
{
  do 
  {
     print(&#34;\t&#34;);
     String value = ((ValueCursor) colCursor).getCurrentString();
     print(getLocalValue(value));
  } while (colCursor.next());
  println();
  colCursor.setPosition(1);
}

// Prints the rows of each page.
private void printRows(Cursor rowCursor, Cursor colCursor,
                       ValueCursor dataCursor) 
{
  // Loop over rows.
  do 
  {
    // Print row dimension value.
    String value = ((ValueCursor) rowCursor).getCurrentString();
    print(getLocalValue(value));
    print(&#34;\t&#34;);
    // Loop over columns.
    do 
    {
      // Print data value.
      print(dataCursor.getCurrentValue());
      print(&#34;\t&#34;);
    } while (colCursor.next());
    println();

    // Reset the column Cursor to its first element.
    colCursor.setPosition(1);
  } while (rowCursor.next());

  // Reset the row Cursor to its first element.
  rowCursor.setPosition(1);
}
</pre>
<p><a href="#i1006860">Example 9-8</a> displays the following values, formatted as a crosstab. The display has added page, column, and row headings to identify the local values of the dimensions.</p>
<pre>Channel DIR
Month 2001.01 
                           Product
                ------------------------------ 
Customer        ENVY ABM   ENVY EXE   ENVY STD
-------------   --------   --------   --------
COMP WHSE SD       0          0          1
COMP SERV TOK         2          4          2
COMP WHSE LON         1          1          2
 

Channel DIR
Month 2000.02
                           Product
                ------------------------------ 
Customer        ENVY ABM   ENVY EXE   ENVY STD
-------------   --------   --------   --------
COMP WHSE SD       1          1          1
COMP SERV TOK         5          6          6
COMP WHSE LON         1          2          2
 

Channel DIR
Month 2000.03
                           Product
                ------------------------------ 
Customer        ENVY ABM   ENVY EXE   ENVY STD
-------------   --------   --------   --------
COMP WHSE SD       0          2          2
COMP SERV TOK         2          0          2
COMP WHSE LON         0          2          3
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1007233"></a>
<div class="sect1">
<h2 class="sect1">Specifying the Behavior of a Cursor</h2>
<p><a id="sthref873"></a>You can specify the following aspects of the behavior of a <code>Cursor</code>.</p>
<ul>
<li>
<p>The <span class="bold">fetch size</span> of a <code>Cursor</code>, which is the number of elements of the result set that the <code>Cursor</code> retrieves during one fetch operation.</p>
</li>
<li>
<p>Whether or not Oracle OLAP calculates the <span class="bold">extent</span> of the <code>Cursor</code>. The extent is the total number of positions of the <code>Cursor</code>. The extent of a child <code>Cursor</code> of a <code>CompoundCursor</code> is relative to any of the slower varying outputs of the <code>CompoundCursor</code>.</p>
</li>
<li>
<p>Whether or not Oracle OLAP calculates the positions in the parent <code>Cursor</code> at which the value of a child <code>Cursor</code> starts or ends.</p>
</li>
</ul>
<p>To specify the behavior of <code>Cursor</code>, you use methods of a <code>CursorSpecification</code> that you specify for that <code>Cursor</code>. A <code>CursorSpecification</code> implements the <code>CursorInfoSpecification</code> interface.</p>
<p>You create a <code>CursorSpecification</code> for a <code>Source</code> by calling the <code>createCursorInfoSpecification</code> method of the <code>DataProvider</code>. You use methods of the <code>CursorSpecification</code> to set the characteristics that you want. You then create a <code>CursorManager</code> by calling the appropriate <code>createCursorManager</code> method of the <code>DataProvider</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Specifying the calculation of the extent or the starting or ending position in a parent <code>Cursor</code> of the current value of a child <code>Cursor</code> can be a very expensive operation. The calculation can require considerable time and computing resources. You should only specify these calculations when your application needs them.</div>
<p>For more information on the relationships of <code>Source</code>, <code>Cursor</code>, and <code>CursorSpecification</code> objects or the concepts of fetch size, extent, or <code>Cursor</code> positions, see <a href="crscncpt.htm#g1014888">Chapter 8</a>.</p>
<p><a id="sthref874"></a><a id="sthref875"></a><a href="#i1006988">Example 9-9</a> creates a <code>Source</code>, creates a <code>CompoundCursorSpecification</code> for a <code>Source</code>, and then gets the child <code>CursorSpecification</code> objects from the top-level <code>CompoundCursorSpecification</code>.</p>
<div class="example">
<p class="titleinexample"><a id="i1006988"></a>Example 9-9 Getting CursorSpecification Objects for a Source</p>
<pre>Source unitsForSelections = units.join(prodSel)
                                 .join(custSel)
                                 .join(timeSel)
                                 .join(chanSel);
// Commit the current Transaction (code not shown).

// Create a CompoundCursorSpecification for unitsForSelections.
CompoundCursorSpecification rootCursorSpec = (CompoundCursorSpecification)
                      dp.createCursorInfoSpecification(unitsForSelections);

// Get the ValueCursorSpecification for the base values.
ValueCursorSpecification baseValueSpec =
                        rootCursorSpec.getValueCursorSpecification();

// Get the ValueCursorSpecification objects for the outputs.
List outputSpecs = rootCursorSpec.getOutputs();
ValueCursorSpecification chanSelValCSpec = 
                       (ValueCursorSpecification) outputSpecs.get(0);
ValueCursorSpecification timeSelValCSpec = 
                       (ValueCursorSpecification) outputSpecs.get(1);
ValueCursorSpecification prodSelValCSpec = 
                       (ValueCursorSpecification) outputSpecs.get(2);
ValueCursorSpecification custSelValCSpec = 
                       (ValueCursorSpecification) outputSpecs.get(3);
</pre>
<p>Once you have the <code>CursorSpecification</code> objects, you can use their methods to specify the behavior of the <code>Cursor</code> objects that correspond to them.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1007234"></a>
<div class="sect1">
<h2 class="sect1">Calculating Extent and Starting and Ending Positions of a Value</h2>
<p><a id="sthref876"></a>To manage the display of the result set retrieved by a <code>CompoundCursor</code>, you sometimes need to know the extent of the child <code>Cursor</code> components. You might also want to know the position at which the current value of a child <code>Cursor</code> starts in the parent <code>CompoundCursor</code>. You might want to know the <span class="bold">span</span> of the current value of a child <code>Cursor</code>. The span is the number of positions of the parent <code>Cursor</code> that the current value of the child <code>Cursor</code> occupies. You can calculate the span by subtracting the starting position of the value from the ending position and subtracting 1.</p>
<p>Before you can get the extent of a <code>Cursor</code> or get the starting or ending positions of a value in the parent <code>Cursor</code>, you must specify that you want Oracle OLAP to calculate the extent or those positions. To specify the performance of those calculations, you use methods of the <code>CursorSpecification</code> for the <code>Cursor</code>.</p>
<p><a id="sthref877"></a><a id="sthref878"></a><a href="#i1007004">Example 9-10</a> specifies calculating the extent of a <code>Cursor</code>. The example uses the <code>CompoundCursorSpecification</code> from <a href="#i1006988">Example 9-9</a>.</p>
<div class="example">
<p class="titleinexample"><a id="i1007004"></a>Example 9-10 Specifying the Calculation of the Extent of a Cursor</p>
<pre>rootCursorSpec.setExtentCalculationSpecified(true);
</pre>
<p>You can use methods of a <code>CursorSpecification</code> to determine whether the <code>CursorSpecification</code> specifies the calculation of the extent of a <code>Cursor</code> as in the following example.</p>
<pre>boolean isSet = rootCursorSpec.isExtentCalculationSpecified();
</pre>
<p><a id="sthref879"></a><a href="#i1007024">Example 9-11</a> specifies calculating the starting and ending positions of the current value of a child <code>Cursor</code> in the parent <code>Cursor</code>. The example uses the <code>CompoundCursorSpecification</code> from <a href="#i1006988">Example 9-9</a>.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1007024"></a>Example 9-11 Specifying the Calculation of Starting and Ending Positions in a Parent</p>
<pre>// Get the List of CursorSpecification objects for the outputs. 
// Iterate through the list, specifying the calculation of the extent
// for each output CursorSpecification. 
Iterator iterOutputSpecs = rootCursorSpec.getOutputs().iterator();
while(iterOutputSpecs.hasNext()) 
{
  ValueCursorSpecification valCursorSpec = 
    (ValueCursorSpecification)iterOutputSpecs.next();
  valCursorSpec.setParentStartCalculationSpecified(true);
  valCursorSpec.setParentEndCalculationSpecified(true);
}
</pre>
<p>You can use methods of a <code>CursorSpecification</code> to determine whether the <code>CursorSpecification</code> specifies the calculation of the starting or ending positions of the current value of a child <code>Cursor</code> in a parent <code>Cursor</code>, as in the following example.</p>
<pre>Iterator iterOutputSpecs = rootCursorSpec.getOutputs().iterator();
ValueCursorSpecification valCursorSpec =
  (ValueCursorSpecification)iterOutputSpecs.next();
while(iterOutputSpecs.hasNext()) 
{
  if (valCursorSpec.isParentStartCalculationSpecified())
    // Do something.
  if (valCursorSpec.isParentEndCalculationSpecified())
    // Do something.
  valCursorSpec = (ValueCursorSpecification) iterOutputSpecs.next();
}
</pre>
<p><a href="#i1007049">Example 9-12</a> determines the span of the positions in a parent <code>CompoundCursor</code> of the current value of a child <code>Cursor</code> for two of the outputs of the <code>CompoundCursor</code>. The example uses the <code>unitForSelections</code> <code>Source</code> from <a href="#i1006860">Example 9-8</a>.</p>
<p>The example gets the starting and ending positions of the current values of the time and product selections and then calculates the span of those values in the parent <code>Cursor</code>. The parent is the root <code>CompoundCursor</code>. The <code>DataProvider</code> is <code>dp</code>.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1007049"></a>Example 9-12 Calculating the Span of the Positions in the Parent of a Value</p>
<pre>Source unitsForSelections = units.join(prodSel)
                                 .join(custSel)
                                 .join(timeSel)
                                 .join(chanSel);
// Commit the current Transaction (code not shown).

// Create a CompoundCursorSpecification for unitsForSelections.
CompoundCursorSpecification rootCursorSpec = (CompoundCursorSpecification)
  dp.createCursorInfoSpecification(unitsForSelections);
// Get the CursorSpecification objects for the outputs.
List outputSpecs = rootCursorSpec.getOutputs();
ValueCursorSpecification timeSelValCSpec = 
  (ValueCursorSpecification)outputSpecs.get(1); // Output for time.
ValueCursorSpecification prodSelValCSpec = 
 (ValueCursorSpecification)outputSpecs.get(3);  // Output for product.

// Specify the calculation of the starting and ending positions.
timeSelValCSpec.setParentStartCalculationSpecified(true);
timeSelValCSpec.setParentEndCalculationSpecified(true);
prodSelValCSpec.setParentStartCalculationSpecified(true);
prodSelValCSpec.setParentEndCalculationSpecified(true);

// Create the CursorManager and the Cursor.
CursorManager cursorMngr =
  dp.createCursorManager(unitsForSelections, 100, rootCursorSpec);
CompoundCursor rootCursor = (CompoundCursor) cursorMngr.createCursor();

// Get the child Cursor objects.
ValueCursor baseValCursor = cursor.getValueCursor();
List outputs = rootCursor.getOutputs();
ValueCursor chanSelVals = (ValueCursor) outputs.get(0);
ValueCursor timeSelVals = (ValueCursor) outputs.get(1);
ValueCursor custSelVals = (ValueCursor) outputs.get(2);
ValueCursor prodSelVals = (ValueCursor) outputs.get(3);

// Set the position of the root CompoundCursor.
rootCursor.setPosition(15);

// Get the values at the current position and determine the span
// of the values of the time and product outputs.
print(chanSelVals.getCurrentValue() + &#34;, &#34;);
print(timeSelVals.getCurrentValue() + &#34;,\n  &#34;);
print(custSelVals.getCurrentValue() + &#34;, &#34;);
print(prodSelVals.getCurrentValue() + &#34;, &#34;);
print(baseValCursor.getCurrentValue());
println();

// Determine the span of the values of the two fastest-varying outputs.
long span;
span = (prodSelVals.getParentEnd() - prodSelVals.getParentStart()) +1);
println(&#34;\nThe span of &#34; + prodSelVals.getCurrentValue() +
        &#34; at the current position is &#34; + span + &#34;.&#34;)
span = (timeSelVals.getParentEnd() - timeSelVals.getParentStart()) +1);
println(&#34;The span of &#34; + timeSelVals.getCurrentValue() +
        &#34; at the current position is &#34; + span + &#34;.&#34;)
cursorMngr.close();
</pre>
<p>This example displays the following text.</p>
<pre>CHANNEL_PRIMARY::CHANNEL::DIR, CALENDAR_YEAR::MONTH::2000.02, 
  SHIPMENTS::SHIP_TO::COMP SERV TOK, PRODUCT_PRIMARY::ITEM::ENVY STD, 6.0

The span of PRODUCT_PRIMARY::ITEM::ENVY STD at the current position is 1.
The span of CALENDAR_YEAR::MONTH::2000.02 at the current position is 9.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1007236"></a>
<div class="sect1">
<h2 class="sect1">Specifying a Fetch Size</h2>
<p>The number of elements of a <code>Cursor</code> that Oracle OLAP sends to the client application during one fetch operation depends on the fetch size specified for that <code>Cursor</code>. The default fetch size is 100. To change the fetch size, you can set the fetch size on the root <code>Cursor</code> for a <code>Source</code>.</p>
<p><a id="sthref880"></a><a id="sthref881"></a><a href="#CHDGHJJC">Example 9-13</a> gets the default fetch size from the <code>CompoundCursorSpecification</code> from <a href="#i1006988">Example 9-9</a>. The example creates a <code>Cursor</code> and sets a different fetch size on it, and then gets the fetch size for the <code>Cursor</code>. The <code>DataProvider</code> is <code>dp</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDGHJJC"></a>Example 9-13 Specifying a Fetch Size</p>
<pre>println(&#34;The default fetch size is &#34;
         + rootCursorSpec.getDefaultFetchSize() + &#34;.&#34;);
Source source = rootCursorSpec.getSource();
CursorManager cursorMngr = dp.createCursorManager(source);
Cursor rootCursor = cursorMngr.createCursor();
rootCursor.setFetchSize(10);
println(&#34;The fetch size is now &#34; + rootCursor.getFetchSize()) + &#34;.&#34;;
</pre></div>
<!-- class="example" -->
<p>This example displays the following text.</p>
<pre>The default fetch size is 100.
The fetch size is now 10.
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4769">
<tr>
<td class="cellalignment4776">
<table class="cellalignment4774">
<tr>
<td class="cellalignment4773"><a href="crscncpt.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4773"><a href="template.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4778">
<table class="cellalignment4772">
<tr>
<td class="cellalignment4773"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4773"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4773"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4773"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4773"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4773"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>