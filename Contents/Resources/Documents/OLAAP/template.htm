<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79267"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Creating%20Dynamic%20Queries"></a><title>Creating Dynamic Queries</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T7:32:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Java API Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17707-05"/>
<meta name="dcterms.isVersionOf" content="OLAAP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="cursors.htm" title="Previous" type="text/html"/>
<link rel="Next" href="devsetup.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17707-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/19</span> <!-- End Header -->
<div class="chapter"><a id="g1013092"></a> <a id="i1006493"></a>
<h1 class="chapter"><span class="secnum">10</span> Creating Dynamic Queries</h1>
<p>This chapter describes the Oracle OLAP Java API <code>Template</code> class and the related classes that you use to create dynamic queries. This chapter also provides examples of implementations of those classes.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#i1006334">About Template Objects</a></p>
</li>
<li>
<p><a href="#i1006336">Overview of Template and Related Classes</a></p>
</li>
<li>
<p><a href="#i1006337">Designing and Implementing a Template</a></p>
</li>
</ul>
<a id="i1006334"></a>
<div class="sect1">
<h2 class="sect1">About Template Objects</h2>
<p><a id="sthref882"></a><a id="sthref883"></a><a id="sthref884"></a><a id="sthref885"></a>The <code>Template</code> class is the basis of a very powerful feature of the Oracle OLAP Java API. You use <code>Template</code> objects to create modifiable <code>Source</code> objects. With those <code>Source</code> objects, you can create dynamic queries that can change in response to end-user selections. <code>Template</code> objects also offer a convenient way for you to translate user-interface elements into OLAP Java API operations and objects.</p>
<p>These features are briefly described in the following topic. The rest of this chapter describes the <code>Template</code> class and the other classes you use to create dynamic <code>Source</code> objects. For information on the <code>Transaction</code> objects that you use to make changes to the dynamic <code>Source</code> and to either save or discard those changes, see <a href="transact.htm#g1010472">Chapter 7, &#34;Using a TransactionProvider&#34;</a>.</p>
<div class="sect2"><a id="sthref886"></a>
<h3 class="sect2">About Creating a Dynamic Source</h3>
<p><a id="sthref887"></a>The main feature of a <code>Template</code> is the ability to produce a dynamic <code>Source</code>. That ability is based on two of the other objects that a <code>Template</code> uses: instances of the <code>DynamicDefinition</code> and <code>MetadataState</code> classes.</p>
<p><a id="sthref888"></a>When a <code>Source</code> is created, Oracle OLAP automatically associates a <code>SourceDefinition</code> with it. The <code>SourceDefinition</code> has information about the <code>Source</code>. Once created, the <code>Source</code> and the associated <code>SourceDefinition</code> are associated immutably. The <code>getSource</code> method of a <code>SourceDefinition</code> returns the <code>Source</code> associated with it.</p>
<p><a id="sthref889"></a><code>DynamicDefinition</code> is a subclass of <code>SourceDefinition</code>. A <code>Template</code> creates a <code>DynamicDefinition</code>, which acts as a proxy for the <code>SourceDefinition</code> of the <code>Source</code> produced by the <code>Template</code>. This means that instead of always getting the same immutably associated <code>Source</code>, the <code>getSource</code> method of the <code>DynamicDefinition</code> gets whatever <code>Source</code> is currently produced by the <code>Template</code>. The instance of the <code>DynamicDefinition</code> does not change even though the <code>Source</code> that it gets is different.</p>
<p>The <code>Source</code> that a <code>Template</code> produces can change because the values, including other <code>Source</code> objects, that the <code>Template</code> uses to create the <code>Source</code> can change. A <code>Template</code> stores those values in a <code>MetadataState</code>. A <code>Template</code> provides methods to get the current state of the <code>MetadataState</code>, to get or set a value, and to set the state. You use those methods to change the data values that the <code>MetadataState</code> stores.</p>
<p>You use a <code>DynamicDefinition</code> to get the <code>Source</code> produced by a <code>Template</code>. If your application changes the state of the values that the <code>Template</code> uses to create the <code>Source</code>, for example, in response to end-user selections, then the application uses the same <code>DynamicDefinition</code> to get the <code>Source</code> again, even though the new <code>Source</code> defines a result set different than the previous <code>Source</code>.</p>
<p>The <code>Source</code> produced by a <code>Template</code> can be the result of a series of <code>Source</code> operations that create other <code>Source</code> objects, such as a series of selections, sortings, calculations, and joins. You put the code for those operations in the <code>generateSource</code> method of a <code>SourceGenerator</code> for the <code>Template</code>. That method returns the <code>Source</code> produced by the <code>Template</code>. The operations use the data stored in the <code>MetadataState</code>.</p>
<p>You might build an extremely complex query that involves the interactions of dynamic <code>Source</code> objects produced by many different <code>Template</code> objects. The end result of the query building is a <code>Source</code> that defines the entire complex query. If you change the state of any one of the <code>Template</code> objects that you used to create the final <code>Source</code>, then the final <code>Source</code> represents a result set that is different from that of the previous <code>Source</code>. You can thereby modify the final query without having to reproduce all of the operations involved in defining the query.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref890"></a>
<h3 class="sect2">About Translating User Interface Elements into OLAP Java API Objects</h3>
<p>You design <code>Template</code> objects to represent elements of the user interface of an application. Your <code>Template</code> objects turn the selections that the end user makes into OLAP Java API query-building operations that produce a <code>Source</code>. You then create a <code>Cursor</code> to fetch from Oracle OLAP the result set defined by the <code>Source</code>. You get the values from the <code>Cursor</code> and display them to the end user. When an end user makes changes to the selections, you change the state of the <code>Template</code>. You then get the <code>Source</code> produced by the <code>Template</code>, create a new <code>Cursor</code>, get the new values, and display them.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006336"></a>
<div class="sect1">
<h2 class="sect1">Overview of Template and Related Classes</h2>
<p><a id="sthref891"></a>In the OLAP Java API, several classes work together to produce a dynamic <code>Source</code>. In designing a <code>Template</code>, you must implement or extend the following:</p>
<ul>
<li>
<p>The <code>Template</code> abstract class</p>
</li>
<li>
<p>The <code>MetadataState</code> interface</p>
</li>
<li>
<p>The <code>SourceGenerator</code> interface</p>
</li>
</ul>
<p>Instances of those three classes, plus instances of the <code>DataProvider</code> and <code>DynamicDefinition</code> classes, work together to produce the <code>Source</code> that the <code>Template</code> defines.</p>
<div class="sect2"><a id="sthref892"></a>
<h3 class="sect2">What Is the Relationship Between the Classes That Produce a Dynamic Source?</h3>
<p><a id="sthref893"></a>The classes that produce a dynamic <code>Source</code> work together as follows:</p>
<ul>
<li>
<p>A <code>Template</code> has methods that create a <code>DynamicDefinition</code> and that get and set the current state of a <code>MetadataState</code>. An extension to the <code>Template</code> abstract class adds methods that get and set the values of fields on the <code>MetadataState</code>.</p>
</li>
<li>
<p>The <code>MetadataState</code> implementation has fields for storing the data to use in generating the <code>Source</code> for the <code>Template</code>. When you create a new <code>Template</code>, you pass the <code>MetadataState</code> to the constructor of the <code>Template</code>. When you call the <code>getSource</code> method of the <code>DynamicDefinition</code>, the <code>MetadataState</code> is passed to the <code>generateSource</code> method of the <code>SourceGenerator</code>.</p>
</li>
<li>
<p>The <code>DataProvider</code> is used in creating a <code>Template</code> and by the <code>SourceGenerator</code> in creating new <code>Source</code> objects.</p>
</li>
<li>
<p>The <code>SourceGenerator</code> implementation has a <code>generateSource</code> method that uses the current state of the data in the <code>MetadataState</code> to produce a <code>Source</code> for the <code>Template</code>. You pass in the <code>SourceGenerator</code> to the <code>createDynamicDefinition</code> method of the <code>Template</code> to create a <code>DynamicDefinition</code>.</p>
</li>
<li>
<p>The <code>DynamicDefinition</code> has a <code>getSource</code> method that gets the <code>Source</code> produced by the <code>SourceGenerator</code>. The <code>DynamicDefinition</code> serves as a proxy for the <code>SourceDefinition</code> that is immutably associated with the <code>Source</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref894"></a>
<h3 class="sect2">Template Class</h3>
<p><a id="sthref895"></a>You use a <code>Template</code> to produce a modifiable <code>Source</code>. A <code>Template</code> has methods for creating a <code>DynamicDefinition</code> and for getting and setting the current state of the <code>Template</code>. In extending the <code>Template</code> class, you add methods that provide access to the fields on the <code>MetadataState</code> for the <code>Template</code>. The <code>Template</code> creates a <code>DynamicDefinition</code> that you use to get the <code>Source</code> produced by the <code>SourceGenerator</code> for the <code>Template</code>.</p>
<p>For an example of a <code>Template</code> implementation, see <a href="#i1006228">Example 10-1</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref896"></a>
<h3 class="sect2">MetadataState Interface</h3>
<p><a id="sthref897"></a>An implementation of the <code>MetadataState</code> interface stores the current state of the values for a <code>Template</code>. A <code>MetadataState</code> must include a <code>clone</code> method that creates a copy of the current state.</p>
<p>When instantiating a new <code>Template</code>, you pass a <code>MetadataState</code> to the <code>Template</code> constructor. The <code>Template</code> has methods for getting and setting the values stored by the <code>MetadataState</code>. The <code>generateSource</code> method of the <code>SourceGenerator</code> for the <code>Template</code> uses the <code>MetadataState</code> when the method produces a <code>Source</code> for the <code>Template</code>.</p>
<p>For an example of a <code>MetadataState</code> implementation, see <a href="#i1006260">Example 10-2</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref898"></a>
<h3 class="sect2">SourceGenerator Interface</h3>
<p><a id="sthref899"></a>An implementation of <code>SourceGenerator</code> must include a <code>generateSource</code> method, which produces a <code>Source</code> for a <code>Template</code>. A <code>SourceGenerator</code> must produce only one type of <code>Source</code>, such as a <code>BooleanSource</code>, a <code>NumberSource</code>, or a <code>StringSource</code>. In producing the <code>Source</code>, the <code>generateSource</code> method uses the current state of the data represented by the <code>MetadataState</code> for the <code>Template</code>.</p>
<p>To get the <code>Source</code> produced by the <code>generateSource</code> method, you create a <code>DynamicDefinition</code> by passing the <code>SourceGenerator</code> to the <code>createDynamicDefinition</code> method of the <code>Template</code>. You then get the <code>Source</code> by calling the <code>getSource</code> method of the <code>DynamicDefinition</code>.</p>
<p>A <code>Template</code> can create more than one <code>DynamicDefinition</code>, each with a differently implemented <code>SourceGenerator</code>. The <code>generateSource</code> methods of the different <code>SourceGenerator</code> objects use the same data, as defined by the current state of the <code>MetadataState</code> for the <code>Template</code>, to produce <code>Source</code> objects that define different queries.</p>
<p>For an example of a <code>SourceGenerator</code> implementation, see <a href="#i1006264">Example 10-3</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref900"></a>
<h3 class="sect2">DynamicDefinition Class</h3>
<p><a id="sthref901"></a><code><a id="sthref902"></a><a id="sthref903"></a>DynamicDefinition</code> is a subclass of <code>SourceDefinition</code>. You create a <code>DynamicDefinition</code> by calling the <code>createDynamicDefinition</code> method of a <code>Template</code> and passing it a <code>SourceGenerator</code>. You get the <code>Source</code> produced by the <code>SourceGenerator</code> by calling the <code>getSource</code> method of the <code>DynamicDefinition</code>.</p>
<p>A <code>DynamicDefinition</code> created by a <code>Template</code> is a proxy for the <code>SourceDefinition</code> of the <code>Source</code> produced by the <code>SourceGenerator</code>. The <code>SourceDefinition</code> is immutably associated with the <code>Source</code>. If the state of the <code>Template</code> changes, then the <code>Source</code> produced by the <code>SourceGenerator</code> is different. Because the <code>DynamicDefinition</code> is a proxy, you use the same <code>DynamicDefinition</code> to get the new <code>Source</code> even though that <code>Source</code> has a different <code>SourceDefinition</code>.</p>
<p>The <code>getCurrent</code> method of a <code>DynamicDefinition</code> returns the <code>SourceDefinition</code> immutably associated with the <code>Source</code> that the <code>generateSource</code> method currently returns. For an example of the use of a <code>DynamicDefinition</code>, see <a href="#i1006270">Example 10-4</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006337"></a>
<div class="sect1">
<h2 class="sect1">Designing and Implementing a Template</h2>
<p><a id="sthref904"></a>The design of a <code>Template</code> reflects the query-building elements of the user interface of an application. For example, suppose you want to develop an application that allows the end user to create a query that requests a number of values from the top or bottom of a list of values. The values are from one dimension of a measure. The other dimensions of the measure are limited to single values.</p>
<p>The user interface of your application has a dialog box that allows the end user to do the following:</p>
<ul>
<li>
<p>Select a radio button that specifies whether the data values should be from the top or bottom of the range of values.</p>
</li>
<li>
<p>Select a measure from a drop-down list of measures.</p>
</li>
<li>
<p>Select a number from a field. The number specifies the number of data values to display.</p>
</li>
<li>
<p>Select one of the dimensions of the measure as the base of the data values to display. For example, if the user selects the product dimension, then the query specifies some number of products from the top or bottom of the list of products. The list is determined by the measure and the selected values of the other dimensions.</p>
</li>
<li>
<p>Click a button to bring up a dialog box through which the end user selects the single values for the other dimensions of the selected measure. After selecting the values of the dimensions, the end user clicks an OK button on the second dialog box and returns to the first dialog box.</p>
</li>
<li>
<p>Click an OK button to generate the query. The results of the query appear.</p>
</li>
</ul>
<p>To generate a <code>Source</code> that represents the query that the end user creates in the first dialog box, you design a <code>Template</code> called <code>TopBottomTemplate</code>. You also design a second <code>Template</code>, called <code>SingleSelectionTemplate</code>, to create a <code>Source</code> that represents the end user&#39;s selections of single values for the dimensions other than the base dimension. The designs of your <code>Template</code> objects reflect the user interface elements of the dialog boxes.</p>
<p>In designing the <code>TopBottomTemplate</code> and its <code>MetadataState</code> and <code>SourceGenerator</code>, you do the following:</p>
<ul>
<li>
<p>Create a class called <code>TopBottomTemplate</code> that extends <code>Template</code>. To the class, you add methods that get the current state of the <code>Template</code>, set the values specified by the user, and then set the current state of the <code>Template</code>.</p>
</li>
<li>
<p>Create a class called <code>TopBottomTemplateState</code> that implements <code>MetadataState</code>. You provide fields on the class to store values for the <code>SourceGenerator</code> to use in generating the <code>Source</code> produced by the <code>Template</code>. The values are set by methods of the <code>TopBottomTemplate</code>.</p>
</li>
<li>
<p>Create a class called <code>TopBottomTemplateGenerator</code> that implements <code>SourceGenerator</code>. In the <code>generateSource</code> method of the class, you provide the operations that create the <code>Source</code> specified by the end user&#39;s selections.</p>
</li>
</ul>
<p>Using your application, an end user selects units sold as the measure and products as the base dimension in the first dialog box. The end user also selects the Asia Pacific region, the first quarter of 2001, and the direct sales channel as the single values for each of the remaining dimensions.</p>
<p>The query that the end user has created requests the ten products that have the highest total amount of units sold through the direct sales channel to customers in the Asia Pacific region during the calendar year 2001.</p>
<p>For examples of implementations of the <code>TopBottomTemplate</code>, <code>TopBottomTemplateState</code>, and <code>TopBottomTemplateGenerator</code> classes, and an example of an application that uses them, see <a href="#i1006228">Example 10-1</a>, <a href="#i1006260">Example 10-2</a>, <a href="#i1006264">Example 10-3</a>, and <a href="#i1006270">Example 10-4</a>. The <code>TopBottomTemplateState</code> and <code>TopBottomTemplateGenerator</code> classes are implemented as inner classes of the <code>TopBottomTemplate</code> outer class.</p>
<div class="sect2"><a id="sthref905"></a>
<h3 class="sect2">Implementing the Classes for a Template</h3>
<p><a id="sthref906"></a><a id="sthref907"></a><a href="#i1006228">Example 10-1</a> is an implementation of the <code>TopBottomTemplate</code> class.</p>
<div class="example">
<p class="titleinexample"><a id="i1006228"></a>Example 10-1 Implementing a Template</p>
<pre>import oracle.olapi.data.source.DataProvider;
import oracle.olapi.data.source.DynamicDefinition;
import oracle.olapi.data.source.Source;
import oracle.olapi.data.source.SourceGenerator;
import oracle.olapi.data.source.Template;
import oracle.olapi.transaction.metadataStateManager.MetadataState;

/**
 * Creates a TopBottomTemplateState, a TopBottomTemplateGenerator,
 * and a DynamicDefinition.
 * Gets the current state of the TopBottomTemplateState and the values 
 * that it stores. 
 * Sets the data values stored by the TopBottomTemplateState and sets the
 * changed state as the current state.
 */
public class TopBottomTemplate extends Template 
{
// Constants for specifying the selection of elements from the 
// beginning or the end of the result set.
  public static final int TOP_BOTTOM_TYPE_TOP = 0;
  public static final int TOP_BOTTOM_TYPE_BOTTOM = 1;

  // Variable to store the DynamicDefinition.
  private DynamicDefinition dynamicDef;

  /**
   * Creates a TopBottomTemplate with a default type and number values
   * and the specified base dimension.
   */
  public TopBottomTemplate(Source base, DataProvider dataProvider)
  {
    super(new TopBottomTemplateState(base, TOP_BOTTOM_TYPE_TOP, 0),
                                     dataProvider);
    // Create the DynamicDefinition for this Template. Create the 
    // TopBottomTemplateGenerator that the DynamicDefinition uses.
    dynamicDef = 
    createDynamicDefinition(new TopBottomTemplateGenerator(dataProvider));
  }

  /**
   * Gets the Source produced by the TopBottomTemplateGenerator
   * from the DynamicDefinition.
   */
  public final Source getSource() 
  {
    return dynamicDef.getSource();
  }

  /**
   * Gets the Source that is the base of the elements in the result set.
   * Returns null if the state has no base.
   */
  public Source getBase()
  {
    TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    return state.base;
  }

  /**
   * Sets a Source as the base.
   */
  public void setBase(Source base) 
  {
     TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    state.base = base;
    setCurrentState(state);
  }

  /**
   * Gets the Source that specifies the measure and the single
   * selections from the dimensions other than the base.
   */
  public Source getCriterion()
  {
    TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    return state.criterion;
  }

  /**
   * Specifies a Source that defines the measure and the single values 
   * selected from the dimensions other than the base.
   * The SingleSelectionTemplate produces such a Source.
   */
  public void setCriterion(Source criterion)
  {
    TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    state.criterion = criterion;
    setCurrentState(state);
  }

  /**
   * Gets the type, which is either TOP_BOTTOM_TYPE_TOP or 
   * TOP_BOTTOM_TYPE_BOTTOM.
   */
  public int getTopBottomType()
  {
    TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    return state.topBottomType;
  }

  /**
   * Sets the type.
   */
  public void setTopBottomType(int topBottomType)
  {
    if ((topBottomType &lt; TOP_BOTTOM_TYPE_TOP) ||
        (topBottomType &gt; TOP_BOTTOM_TYPE_BOTTOM    ))
      throw new IllegalArgumentException(&#34;InvalidTopBottomType&#34;);
    TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    state.topBottomType = topBottomType;
    setCurrentState(state);
  }

  /**
   * Gets the number of values selected.
   */
  public float getN()
  {
    TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    return state.N;
  }

  /**
   * Sets the number of values to select.
   */
  public void setN(float N)
  {
    TopBottomTemplateState state = (TopBottomTemplateState) getCurrentState();
    state.N = N;
    setCurrentState(state);
  }
}
</pre>
<p><a id="sthref908"></a><a href="#i1006260">Example 10-2</a> is an implementation of the <code>TopBottomTemplateState</code> inner class.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1006260"></a>Example 10-2 Implementing a MetadataState</p>
<pre>/**
 * Stores data that can be changed by a TopBottomTemplate.
 * The data is used by a TopBottomTemplateGenerator in producing
 * a Source for the TopBottomTemplate.
 */
private static final class TopBottomTemplateState
     implements Cloneable, MetadataState
{
  public int topBottomType;
  public float N;
  public Source criterion;
  public Source base;

  /**
   * Creates a TopBottomTemplateState.
   */
  public TopBottomTemplateState(Source base, int topBottomType, float N)
  {
    this.base = base;
    this.topBottomType = topBottomType;
    this.N = N;
  }

  /**
   * Creates a copy of this TopBottomTemplateState.
   */
  public final Object clone()
  {
    try 
    {
      return super.clone();
    }
    catch(CloneNotSupportedException e) 
    {
      return null;
    }
  }
}
</pre>
<p><a id="sthref909"></a><a href="#i1006264">Example 10-3</a> is an implementation of the <code>TopBottomTemplateGenerator</code> inner class.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1006264"></a>Example 10-3 Implementing a SourceGenerator</p>
<pre>/**
 * Produces a Source for a TopBottomTemplate based on the data
 * values of a TopBottomTemplateState.
 */
private final class TopBottomTemplateGenerator
      implements SourceGenerator
{
  // Store the DataProvider.
  private DataProvider _dataProvider;

  /**
   * Creates a TopBottomTemplateGenerator.
   */
  public TopBottomTemplateGenerator(DataProvider dataProvider)
  {
    _dataProvider = dataProvider;
  }

  /**
   * Generates a Source for a TopBottomTemplate using the current 
   * state of the data values stored by the TopBottomTemplateState.
   */
  public Source generateSource(MetadataState state)
  {
    TopBottomTemplateState castState = (TopBottomTemplateState) state;
    if (castState.criterion == null)
      throw new NullPointerException(&#34;CriterionParameterMissing&#34;);
    Source sortedBase = null;

    // Depending on the topBottomType value, select from the base Source
    // the elements specified by the criterion Source and sort the
    // elements in ascending or descending order.
    // For descending order, specify that null values are last.
    // For ascending order, specify that null values are first.
       
    if (castState.topBottomType == TOP_BOTTOM_TYPE_TOP)
      sortedBase = castState.base.sortDescending(castState.criterion, false);
    else
      sortedBase = castState.base.sortAscending(castState.criterion, true);
    return sortedBase.interval(1, Math.round(castState.N));
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref910"></a>
<h3 class="sect2">Implementing an Application That Uses Templates</h3>
<p><a id="sthref911"></a><a id="sthref912"></a>After you have stored the selections made by the end user in the <code>MetadataState</code> for the <code>Template</code>, use the <code>getSource</code> method of the <code>DynamicDefinition</code> to get the dynamic <code>Source</code> created by the <code>Template</code>. This topic provides an example of an application that uses the <code>TopBottomTemplate</code> described in <a href="#i1006228">Example 10-1</a>. For brevity, the code does not contain much exception handling.</p>
<p>The <code>BaseExample11g</code> class creates and stores an instance of the <code>Context11g</code> class, which has methods that do the following:</p>
<ul>
<li>
<p>Connect to an Oracle Database instance as the user in the command line arguments.</p>
</li>
<li>
<p>Create <code>Cursor</code> objects and displays their values.</p>
</li>
</ul>
<p><a href="#i1006270">Example 10-4</a> does the following:</p>
<ul>
<li>
<p>Gets the <code>MdmMetadataProvider</code> and the <code>MdmRootSchema</code>.</p>
</li>
<li>
<p>Gets the <code>DataProvider</code>.</p>
</li>
<li>
<p>Gets the <code>MdmDatabaseSchema</code> for the user.</p>
</li>
<li>
<p>Gets the <code>MdmCube</code> that has the COSTS, UNITS and SALES measures. From the cube, the example gets the UNITS and SALES measures and the dimensions associated with the cube.</p>
</li>
<li>
<p><a id="sthref913"></a>Creates a <code>SingleSelectionTemplate</code> for selecting single values from some of the dimensions of the measure. For the code of the <code>SingleSelectionTemplate</code> class that this example uses, see <a href="singlsel.htm#BABJBCCG">Appendix B</a>.</p>
</li>
<li>
<p>Creates a <code>TopBottomTemplate</code> and stores selections made by the end user.</p>
</li>
<li>
<p>Gets the <code>Source</code> produced by the <code>TopBottomTemplate</code>.</p>
</li>
<li>
<p>Uses the <code>Context11g</code> object to create a <code>Cursor</code> for that <code>Source</code> and to display the <code>Cursor</code> values.</p>
</li>
</ul>
<p>The complete code for <a href="transact.htm#i1006243">Example 7-3</a> includes some of the same code that is in <a href="#i1006270">Example 10-4</a>. The example does not show this code, which extends from the beginning of <a href="#i1006270">Example 10-4</a> to the following comment in the example:</p>
<pre>// End of code not shown in 
//<a href="transact.htm#i1006243">Example 7-3, &#34;Using Child Transaction Objects&#34;</a>.
</pre>
<div class="example">
<p class="titleinexample"><a id="i1006270"></a>Example 10-4 Getting the Source Produced by the Template</p>
<pre>import oracle.olapi.data.source.DataProvider;
import oracle.olapi.data.source.Source;
import oracle.olapi.examples.*;
import oracle.olapi.metadata.mdm.MdmAttribute;
import oracle.olapi.metadata.mdm.MdmBaseMeasure;
import oracle.olapi.metadata.mdm.MdmCube;
import oracle.olapi.metadata.mdm.MdmDatabaseSchema;
import oracle.olapi.metadata.mdm.MdmDimensionLevel;
import oracle.olapi.metadata.mdm.MdmDimensionMemberInfo;
import oracle.olapi.metadata.mdm.MdmHierarchyLevel;
import oracle.olapi.metadata.mdm.MdmLevelHierarchy;
import oracle.olapi.metadata.mdm.MdmMetadataProvider;
import oracle.olapi.metadata.mdm.MdmPrimaryDimension;
import oracle.olapi.metadata.mdm.MdmRootSchema;

/**
 * Creates a query that specifies a number of elements from the top
 * or bottom of a selection of dimension members, creates a Cursor
 * for the query, and displays the values of the Cursor.
 * The selected dimension members are those that have measure values
 * that are specified by selected members of the other dimensions of
 * the measure.
 */
public class TopBottomTest extends BaseExample11g
{
  /**
   * Gets the MdmMetadataProvider, the DataProvider, the MdmRootSchema, and the
   * MdmDatabaseSchema for the current user.
   * Gets the UNITS_CUBE_AWJ MdmCube.
   * From the cube, gets the MdmBaseMeasure objects for the UNITS and SALES
   * measures and the MdmPrimaryDimension objects that dimension them.
   * Gets a hierarchy of the PRODUCT_AWJ dimension and the leaf level of the
   * dimension.
   * Gets the short description attribute of the dimension.
   * Creates a SingleSelectionTemplate and adds selections to it.
   * Creates a TopBottomTemplate and sets the properties of it.
   * Gets the Source produced by the TopBottomTemplate, creates a Cursor 
   * for it, and displays the values of the Cursor.
   * Changes the state of the SingleSelectionTemplate and the
   * TopBottomTemplate, creates a new Cursor for the Source produced by the
   * TopBottomTemplate, and displays the values of that Cursor.
   */
  public void run() throws Exception
  {
    // Get the MdmMetadataProvider from the superclass.
    MdmMetadataProvider metadataProvider = getMdmMetadataProvider();
    // Get the DataProvider from the Context11g object of the superclass.
    DataProvider dp = getContext().getDataProvider();

    // Get the MdmRootSchema and the MdmDatabaseSchema for the user.
    MdmRootSchema mdmRootSchema =
      (MdmRootSchema)metadataProvider.getRootSchema();
    MdmDatabaseSchema mdmDBSchema = 
      mdmRootSchema.getDatabaseSchema(getContext().getUser());

    MdmCube unitsCube =
      (MdmCube)mdmDBSchema.getTopLevelObject(&#34;UNITS_CUBE_AWJ&#34;);
    MdmBaseMeasure mdmUnits = unitsCube.findOrCreateBaseMeasure(&#34;UNITS&#34;);
    MdmBaseMeasure mdmSales = unitsCube.findOrCreateBaseMeasure(&#34;SALES&#34;);

    // Get the Source objects for the measures.
    Source units = mdmUnits.getSource();
    Source sales = mdmSales.getSource();

    // Get the MdmPrimaryDimension objects for the dimensions of the cube. 
    List&lt;MdmPrimaryDimension&gt; cubeDims = unitsCube.getDimensions();
    MdmPrimaryDimension mdmTimeDim = null;
    MdmPrimaryDimension mdmProdDim = null;
    MdmPrimaryDimension mdmCustDim = null;
    MdmPrimaryDimension mdmChanDim = null;
    
    for(MdmPrimaryDimension mdmPrimDim : cubeDims)
    {
      if (mdmPrimDim.getName().startsWith(&#34;TIME&#34;))
        mdmTimeDim = mdmPrimDim;
      else if (mdmPrimDim.getName().startsWith(&#34;PROD&#34;))
        mdmProdDim = mdmPrimDim;
      else if (mdmPrimDim.getName().startsWith(&#34;CUST&#34;))
        mdmCustDim = mdmPrimDim;
      else if (mdmPrimDim.getName().startsWith(&#34;CHAN&#34;))
        mdmChanDim = mdmPrimDim;
    }

    // Get the hierarchy of the PRODUCT_AWJ dimension.
    MdmLevelHierarchy mdmProdHier = 
      mdmProdDim.findOrCreateLevelHierarchy(&#34;PRODUCT_PRIMARY&#34;);

    // Get the detail dimenson level of the PRODUCT_AWJ dimension.
    MdmDimensionLevel mdmItemDimLevel = 
      mdmProdDim.findOrCreateDimensionLevel(&#34;ITEM&#34;);
    // Get the hierarchy level of the dimension level.
    MdmHierarchyLevel mdmItemHierLevel = 
                       mdmProdHier.findOrCreateHierarchyLevel(mdmItemDimLevel);       
    // Get the Source for the hierarchy level.
    Source itemLevel = mdmItemHierLevel.getSource();

    // Get the short description attribute for the PRODUCT_AWJ dimension and
    // the Source for the attribute.
    MdmAttribute mdmProdShortDescrAttr = 
      mdmProdDim.getShortValueDescriptionAttribute();
    Source prodShortDescrAttr = mdmProdShortDescrAttr.getSource();

    // Create a SingleSelectionTemplate to produce a Source that
    // represents the measure values specified by single members of each of
    // the dimensions of the measure other than the base dimension.
    SingleSelectionTemplate singleSelections =
      new SingleSelectionTemplate(units, dp);

    // Create MdmDimensionMemberInfo objects for single members of the
    // other dimensions of the measure.
    MdmDimensionMemberInfo timeMemInfo =
      new MdmDimensionMemberInfo(mdmTimeDim, &#34;CALENDAR_YEAR::YEAR::CY2001&#34;);
    MdmDimensionMemberInfo custMemInfo =
      new MdmDimensionMemberInfo(mdmCustDim, &#34;SHIPMENTS::REGION::APAC&#34;);
    MdmDimensionMemberInfo chanMemInfo =
      new MdmDimensionMemberInfo(mdmChanDim, &#34;CHANNEL_PRIMARY::CHANNEL::DIR&#34;);
 
    // Add the dimension member information objects to the
    // SingleSelectionTemplate.
    singleSelections.addDimMemberInfo(custMemInfo);
    singleSelections.addDimMemberInfo(chanMemInfo);
    singleSelections.addDimMemberInfo(timeMemInfo);

    // Create a TopBottomTemplate specifying, as the base, the Source for a
    // a level of a hierarchy.
    TopBottomTemplate topNBottom = new TopBottomTemplate(itemLevel, dp);

    // Specify whether to retrieve the elements from the beginning (top) or the
    // end (bottom) of the selected elements of the base dimension.
    topNBottom.setTopBottomType(TopBottomTemplate.TOP_BOTTOM_TYPE_TOP);

    // Set the number of elements of the base dimension to retrieve.
    topNBottom.setN(10);
    // Get the Source produced by the SingleSelectionTemplate and specify it as
    // the criterion object.
    topNBottom.setCriterion(singleSelections.getSource());

    // End of code not shown in 
    //<a href="transact.htm#i1006243">Example 7-3, &#34;Using Child Transaction Objects&#34;</a>.

    // Display a description of the result.
    String resultDescription = &#34; products with the most units sold \nfor&#34;;
    displayResultDescr(singleSelections, topNBottom, resultDescription);

    // Get the Source produced by the TopBottomTemplate.
    Source result = topNBottom.getSource();

    // Join the Source produced by the TopBottomTemplate with the short
    // value descriptions. Use the joinHidden method so that the
    // dimension member values do not appear in the result.
    Source result = prodShortDescrAttr.joinHidden(topNBottomResult);

    // Commit the current transaction.
    getContext().commit();  // Method of Context11g.

    // Create a Cursor for the result and display the values of the Cursor.
    getContext().displayTopBottomResult(result);

    // Change a dimension member selection of the SingleSelectionTemplate.
    timeMemInfo.setUniqueValue(&#34;CALENDAR_YEAR::YEAR::CY2000&#34;);
    singleSelections.changeSelection(timeMemInfo);
 
    // Change the number of elements selected and the type of selection.
    topNBottom.setN(5);
    topNBottom.setTopBottomType(TopBottomTemplate.TOP_BOTTOM_TYPE_BOTTOM);
 
    // Join the Source produced by the TopBottomTemplate to the short
    // description attribute.
    result = prodShortDescrAttr.joinHidden(topNBottomResult);

    // Commit the current transaction.
    getContext().commit();
 
    // Display a description of the result.
    resultDescription = &#34; products with the fewest units sold \nfor&#34;;
    displayResultDescr(singleSelections, topNBottom, resultDescription);
 
    // Create a new Cursor for the Source produced by the TopBottomTemplate
    // and display the Cursor values.
    getContext().displayTopBottomResult(result);

    // Now change the measure to SALES, and get the top and bottom products by
    // SALES.    
    singleSelections.setMeasure(sales);
    // Change the number of elements selected.
    topNBottom.setN(7);
    // Change the type of selection back to the top.
    topNBottom.setTopBottomType(TopBottomTemplate.TOP_BOTTOM_TYPE_TOP);

    resultDescription = &#34; products with the highest sales amounts \nfor&#34;;
    displayResultDescr(singleSelections, topNBottom, resultDescription);

    topNBottomResult = topNBottom.getSource();
    result = prodShortDescrAttr.joinHidden(topNBottomResult);
    
    // Commit the current transaction.
    getContext().commit();
    getContext().displayTopBottomResult(result);

    // Change the type of selection back to the bottom.
    topNBottom.setTopBottomType(TopBottomTemplate.TOP_BOTTOM_TYPE_BOTTOM);

    resultDescription = &#34; products with the lowest sales amounts \nfor&#34;;
    displayResultDescr(singleSelections, topNBottom, resultDescription);

    topNBottomResult = topNBottom.getSource();
    result = prodShortDescrAttr.joinHidden(topNBottomResult);
    
    // Commit the current transaction.
    getContext().commit();
    getContext().displayTopBottomResult(result);

  } 

  /**
   * Displays a description of the results of the query.
   * 
   * @param singleSelections The SingleSelectionsTemplate used by the query.
   * 
   * @param topNBottom The TopBottomTemplate used by the query.
   * 
   * @param resultDescr A String that contains a description of the query.
   */
  private void displayResultDescr(SingleSelectionTemplate singleSelections,
                                  TopBottomTemplate topNBottom,
                                  String resultDescr)
  {
    DataProvider dp = getContext().getDataProvider();
    
    // Get the short descriptions of the dimension members of the  
    // SingleSelectionTemplate.
    StringBuffer shortDescrsForMemberVals =
      singleSelections.getMemberShortDescrs(dp);
    
    // Display the number of dimension members selected, the result description,
    // and the short descriptions of the single selection dimension members.
    println(&#34;\nThe &#34; + Math.round(topNBottom.getN()) + resultDescr
            + shortDescrsForMemberVals +&#34; are:\n&#34;); 
  }

  /**
   * Runs the TopBottomTest application.
   *
   * @param args An array of String objects that provides the arguments
   *             required to connect to an Oracle Database instance, as
   *             specified in the Context11g class.
   */
  public static void main(String[] args) 
  {
    new TopBottomTest().execute(args);
  }
</pre>
<p>}</p>
</div>
<!-- class="example" -->
<p>The <code>TopBottomTest</code> program produces the following output.</p>
<pre>The 10 products with the most units sold
for Asia Pacific, Direct Sales, 2001 are:

 1. Mouse Pad
 2. Unix/Windows 1-user pack
 3. Deluxe Mouse
 4. Laptop carrying case
 5. 56Kbps V.90 Type II Modem
 6. 56Kbps V.92 Type II Fax/Modem
 7. Keyboard Wrist Rest
 8. Internal - DVD-RW - 6X
 9. O/S Documentation Set - English
10. External - DVD-RW - 8X
 
The 5 products with the fewest units sold
for Asia Pacific, Direct Sales, 2000 are:
 
 1. Envoy External Keyboard
 2. O/S Documentation Set - Italian
 3. External 48X CD-ROM
 4. O/S Documentation Set - Spanish
 5. Internal 48X CD-ROM USB

The 7 products with the highest sales amounts 
for Asia Pacific, Direct Sales, 2000 are:
 
 1. Sentinel Financial
 2. Sentinel Standard
 3. Envoy Executive
 4. Sentinel Multimedia
 5. Envoy Standard
 6. Envoy Ambassador
 7. 56Kbps V.90 Type II Modem
 
The 7 products with the lowest sales amounts 
for Asia Pacific, Direct Sales, 2000 are:

 1. Envoy External Keyboard
 2. Keyboard Wrist Rest
 3. Mouse Pad
 4. O/S Documentation Set - Italian
 5. O/S Documentation Set - Spanish
 6. Standard Mouse
 7. O/S Documentation Set - French
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4769">
<tr>
<td class="cellalignment4776">
<table class="cellalignment4774">
<tr>
<td class="cellalignment4773"><a href="cursors.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4773"><a href="devsetup.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4778">
<table class="cellalignment4772">
<tr>
<td class="cellalignment4773"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4773"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4773"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4773"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4773"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4773"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>